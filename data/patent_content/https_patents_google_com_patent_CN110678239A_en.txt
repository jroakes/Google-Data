CN110678239A - Distributed sample-based game profiling and game API platform supporting third party content with game metadata and metrics - Google Patents
Distributed sample-based game profiling and game API platform supporting third party content with game metadata and metrics Download PDFInfo
- Publication number
- CN110678239A CN110678239A CN201880033465.3A CN201880033465A CN110678239A CN 110678239 A CN110678239 A CN 110678239A CN 201880033465 A CN201880033465 A CN 201880033465A CN 110678239 A CN110678239 A CN 110678239A
- Authority
- CN
- China
- Prior art keywords
- game
- server
- profiling
- data
- data samples
- Prior art date
- Legal status (The legal status is an assumption and is not a legal conclusion. Google has not performed a legal analysis and makes no representation as to the accuracy of the status listed.)
- Granted
Links
- 238000004458 analytical method Methods 0.000 claims abstract description 209
- 230000004044 response Effects 0.000 claims abstract description 69
- 230000001360 synchronised effect Effects 0.000 claims abstract description 38
- 238000000034 method Methods 0.000 claims description 140
- 238000004891 communication Methods 0.000 claims description 51
- 238000012545 processing Methods 0.000 claims description 47
- 238000003860 storage Methods 0.000 claims description 44
- 230000009471 action Effects 0.000 claims description 28
- 230000002547 anomalous effect Effects 0.000 claims description 23
- 230000002159 abnormal effect Effects 0.000 claims description 15
- 230000000694 effects Effects 0.000 claims description 13
- 238000013480 data collection Methods 0.000 claims description 12
- 230000003993 interaction Effects 0.000 claims description 12
- KRQUFUKTQHISJB-YYADALCUSA-N 2-[(E)-N-[2-(4-chlorophenoxy)propoxy]-C-propylcarbonimidoyl]-3-hydroxy-5-(thian-3-yl)cyclohex-2-en-1-one Chemical compound CCC\C(=N/OCC(C)OC1=CC=C(Cl)C=C1)C1=C(O)CC(CC1=O)C1CCCSC1 KRQUFUKTQHISJB-YYADALCUSA-N 0.000 claims description 11
- 230000000737 periodic effect Effects 0.000 claims description 10
- 230000008859 change Effects 0.000 claims description 6
- 238000007405 data analysis Methods 0.000 claims description 5
- 230000000977 initiatory effect Effects 0.000 claims description 3
- 230000003068 static effect Effects 0.000 description 59
- 238000010586 diagram Methods 0.000 description 26
- 230000002452 interceptive effect Effects 0.000 description 24
- 230000008569 process Effects 0.000 description 24
- 238000005070 sampling Methods 0.000 description 19
- 238000009877 rendering Methods 0.000 description 18
- 230000006870 function Effects 0.000 description 17
- 238000007726 management method Methods 0.000 description 12
- 238000001514 detection method Methods 0.000 description 7
- 238000005457 optimization Methods 0.000 description 7
- 230000008901 benefit Effects 0.000 description 6
- 235000019587 texture Nutrition 0.000 description 6
- 230000000007 visual effect Effects 0.000 description 6
- 238000012800 visualization Methods 0.000 description 5
- 238000005266 casting Methods 0.000 description 4
- 238000001914 filtration Methods 0.000 description 4
- 230000003287 optical effect Effects 0.000 description 4
- 239000007787 solid Substances 0.000 description 4
- 238000005516 engineering process Methods 0.000 description 3
- 238000005304 joining Methods 0.000 description 3
- 230000007246 mechanism Effects 0.000 description 3
- 238000004088 simulation Methods 0.000 description 3
- 230000002123 temporal effect Effects 0.000 description 3
- 238000012384 transportation and delivery Methods 0.000 description 3
- 230000001960 triggered effect Effects 0.000 description 3
- 101100408383 Mus musculus Piwil1 gene Proteins 0.000 description 2
- 238000007792 addition Methods 0.000 description 2
- 230000009286 beneficial effect Effects 0.000 description 2
- 230000005540 biological transmission Effects 0.000 description 2
- 230000010267 cellular communication Effects 0.000 description 2
- 230000003247 decreasing effect Effects 0.000 description 2
- 238000012986 modification Methods 0.000 description 2
- 230000004048 modification Effects 0.000 description 2
- 230000006855 networking Effects 0.000 description 2
- 230000008520 organization Effects 0.000 description 2
- 239000002245 particle Substances 0.000 description 2
- 239000000047 product Substances 0.000 description 2
- 230000004043 responsiveness Effects 0.000 description 2
- 230000000717 retained effect Effects 0.000 description 2
- 239000013589 supplement Substances 0.000 description 2
- 230000000153 supplemental effect Effects 0.000 description 2
- 239000008186 active pharmaceutical agent Substances 0.000 description 1
- 230000006399 behavior Effects 0.000 description 1
- 230000033228 biological regulation Effects 0.000 description 1
- 230000015572 biosynthetic process Effects 0.000 description 1
- 230000015556 catabolic process Effects 0.000 description 1
- 230000001413 cellular effect Effects 0.000 description 1
- 230000003750 conditioning effect Effects 0.000 description 1
- 238000013079 data visualisation Methods 0.000 description 1
- 230000007547 defect Effects 0.000 description 1
- 238000006731 degradation reaction Methods 0.000 description 1
- 230000001934 delay Effects 0.000 description 1
- 238000011161 development Methods 0.000 description 1
- 239000000284 extract Substances 0.000 description 1
- 239000012634 fragment Substances 0.000 description 1
- 235000019580 granularity Nutrition 0.000 description 1
- 230000036541 health Effects 0.000 description 1
- 230000008676 import Effects 0.000 description 1
- 230000006872 improvement Effects 0.000 description 1
- 238000003780 insertion Methods 0.000 description 1
- 230000037431 insertion Effects 0.000 description 1
- 230000000670 limiting effect Effects 0.000 description 1
- 238000013507 mapping Methods 0.000 description 1
- 239000000203 mixture Substances 0.000 description 1
- 238000012544 monitoring process Methods 0.000 description 1
- 238000005192 partition Methods 0.000 description 1
- 230000002093 peripheral effect Effects 0.000 description 1
- 238000011045 prefiltration Methods 0.000 description 1
- 238000010223 real-time analysis Methods 0.000 description 1
- 230000002829 reductive effect Effects 0.000 description 1
- 238000011160 research Methods 0.000 description 1
- 238000013432 robust analysis Methods 0.000 description 1
- 238000010206 sensitivity analysis Methods 0.000 description 1
- 230000008685 targeting Effects 0.000 description 1
- 238000012360 testing method Methods 0.000 description 1
- 238000012546 transfer Methods 0.000 description 1
- 238000013024 troubleshooting Methods 0.000 description 1
- 238000012795 verification Methods 0.000 description 1
- 230000003612 virological effect Effects 0.000 description 1
- 239000002699 waste material Substances 0.000 description 1
Images
Classifications
-
- A—HUMAN NECESSITIES
- A63—SPORTS; GAMES; AMUSEMENTS
- A63F—CARD, BOARD, OR ROULETTE GAMES; INDOOR GAMES USING SMALL MOVING PLAYING BODIES; VIDEO GAMES; GAMES NOT OTHERWISE PROVIDED FOR
- A63F13/00—Video games, i.e. games using an electronically generated display having two or more dimensions
- A63F13/30—Interconnection arrangements between game servers and game devices; Interconnection arrangements between game devices; Interconnection arrangements between game servers
- A63F13/35—Details of game servers
- A63F13/358—Adapting the game course according to the network or server load, e.g. for reducing latency due to different connection speeds between clients
-
- A—HUMAN NECESSITIES
- A63—SPORTS; GAMES; AMUSEMENTS
- A63F—CARD, BOARD, OR ROULETTE GAMES; INDOOR GAMES USING SMALL MOVING PLAYING BODIES; VIDEO GAMES; GAMES NOT OTHERWISE PROVIDED FOR
- A63F13/00—Video games, i.e. games using an electronically generated display having two or more dimensions
- A63F13/70—Game security or game management aspects
- A63F13/77—Game security or game management aspects involving data related to game devices or game servers, e.g. configuration data, software version or amount of memory
-
- A—HUMAN NECESSITIES
- A63—SPORTS; GAMES; AMUSEMENTS
- A63F—CARD, BOARD, OR ROULETTE GAMES; INDOOR GAMES USING SMALL MOVING PLAYING BODIES; VIDEO GAMES; GAMES NOT OTHERWISE PROVIDED FOR
- A63F13/00—Video games, i.e. games using an electronically generated display having two or more dimensions
- A63F13/30—Interconnection arrangements between game servers and game devices; Interconnection arrangements between game devices; Interconnection arrangements between game servers
- A63F13/35—Details of game servers
- A63F13/352—Details of game servers involving special game server arrangements, e.g. regional servers connected to a national server or a plurality of servers managing partitions of the game world
-
- A—HUMAN NECESSITIES
- A63—SPORTS; GAMES; AMUSEMENTS
- A63F—CARD, BOARD, OR ROULETTE GAMES; INDOOR GAMES USING SMALL MOVING PLAYING BODIES; VIDEO GAMES; GAMES NOT OTHERWISE PROVIDED FOR
- A63F13/00—Video games, i.e. games using an electronically generated display having two or more dimensions
- A63F13/30—Interconnection arrangements between game servers and game devices; Interconnection arrangements between game devices; Interconnection arrangements between game servers
- A63F13/35—Details of game servers
- A63F13/355—Performing operations on behalf of clients with restricted processing capabilities, e.g. servers transform changing game scene into an MPEG-stream for transmitting to a mobile phone or a thin client
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F9/00—Arrangements for program control, e.g. control units
- G06F9/06—Arrangements for program control, e.g. control units using stored programs, i.e. using an internal store of processing equipment to receive or retain programs
- G06F9/44—Arrangements for executing specific programs
- G06F9/455—Emulation; Interpretation; Software simulation, e.g. virtualisation or emulation of application or operating system execution engines
- G06F9/45533—Hypervisors; Virtual machine monitors
- G06F9/45558—Hypervisor-specific management and integration aspects
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04L—TRANSMISSION OF DIGITAL INFORMATION, e.g. TELEGRAPHIC COMMUNICATION
- H04L43/00—Arrangements for monitoring or testing data switching networks
- H04L43/04—Processing captured monitoring data, e.g. for logfile generation
-
- A—HUMAN NECESSITIES
- A63—SPORTS; GAMES; AMUSEMENTS
- A63F—CARD, BOARD, OR ROULETTE GAMES; INDOOR GAMES USING SMALL MOVING PLAYING BODIES; VIDEO GAMES; GAMES NOT OTHERWISE PROVIDED FOR
- A63F2300/00—Features of games using an electronically generated display having two or more dimensions, e.g. on a television screen, showing representations related to the game
- A63F2300/50—Features of games using an electronically generated display having two or more dimensions, e.g. on a television screen, showing representations related to the game characterized by details of game servers
- A63F2300/53—Features of games using an electronically generated display having two or more dimensions, e.g. on a television screen, showing representations related to the game characterized by details of game servers details of basic data processing
- A63F2300/534—Features of games using an electronically generated display having two or more dimensions, e.g. on a television screen, showing representations related to the game characterized by details of game servers details of basic data processing for network load management, e.g. bandwidth optimization, latency reduction
-
- A—HUMAN NECESSITIES
- A63—SPORTS; GAMES; AMUSEMENTS
- A63F—CARD, BOARD, OR ROULETTE GAMES; INDOOR GAMES USING SMALL MOVING PLAYING BODIES; VIDEO GAMES; GAMES NOT OTHERWISE PROVIDED FOR
- A63F2300/00—Features of games using an electronically generated display having two or more dimensions, e.g. on a television screen, showing representations related to the game
- A63F2300/50—Features of games using an electronically generated display having two or more dimensions, e.g. on a television screen, showing representations related to the game characterized by details of game servers
- A63F2300/53—Features of games using an electronically generated display having two or more dimensions, e.g. on a television screen, showing representations related to the game characterized by details of game servers details of basic data processing
- A63F2300/535—Features of games using an electronically generated display having two or more dimensions, e.g. on a television screen, showing representations related to the game characterized by details of game servers details of basic data processing for monitoring, e.g. of user parameters, terminal parameters, application parameters, network parameters
-
- A—HUMAN NECESSITIES
- A63—SPORTS; GAMES; AMUSEMENTS
- A63F—CARD, BOARD, OR ROULETTE GAMES; INDOOR GAMES USING SMALL MOVING PLAYING BODIES; VIDEO GAMES; GAMES NOT OTHERWISE PROVIDED FOR
- A63F2300/00—Features of games using an electronically generated display having two or more dimensions, e.g. on a television screen, showing representations related to the game
- A63F2300/50—Features of games using an electronically generated display having two or more dimensions, e.g. on a television screen, showing representations related to the game characterized by details of game servers
- A63F2300/55—Details of game data or player data management
- A63F2300/5526—Game data structure
- A63F2300/5533—Game data structure using program state or machine event data, e.g. server keeps track of the state of multiple players on in a multiple player game
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F9/00—Arrangements for program control, e.g. control units
- G06F9/06—Arrangements for program control, e.g. control units using stored programs, i.e. using an internal store of processing equipment to receive or retain programs
- G06F9/44—Arrangements for executing specific programs
- G06F9/455—Emulation; Interpretation; Software simulation, e.g. virtualisation or emulation of application or operating system execution engines
- G06F9/45533—Hypervisors; Virtual machine monitors
- G06F9/45558—Hypervisor-specific management and integration aspects
- G06F2009/45595—Network integration; Enabling network access in virtual machine instances
Abstract
The present application relates to implementing game parsing and analysis. While the game server executes multiple game instances of a game title in parallel, the profiling server generates a game profiling instruction that collects data samples associated with a subset of the game instances and sends the game profiling instruction to the game server. In response to the game profiling instruction, the game server identifies a subset of the plurality of game instances and collects a data sample associated with each game instance in the identified subset. Each collected data sample includes at least game state data and system performance data associated with a synchronized game session corresponding to a respective game instance. The game server sends the collected data samples associated with each game instance in the identified subset to the profiling server, which provides a plurality of data samples to the analysis server for further analysis.
Description
RELATED APPLICATIONS
The present application claims U.S. provisional patent application No.62/570,648 entitled "Gaming API Platform supporting third Party Content," filed on 10/2017, which is incorporated herein by reference in its entirety.
This application is related to U.S. patent application No.15/599,408 entitled "Method and Systems for purifying particle in a door Session" filed on day 5, month 18 2017, which claims the benefit of U.S. provisional patent application No.62/339,052 entitled "Method and Systems for purifying particle a door Session" filed on day 5, month 19 2016, each of which is incorporated herein by reference in its entirety.
This application relates to U.S. patent application No.15/851,610 entitled "Network impact framework for Verification of Real Time Interactive Media Streaming," filed on 12/21/2017, which is incorporated herein by reference in its entirety.
This application relates to U.S. provisional patent application No.62/651,662 entitled "detection and compensation for display bag in Gaming Systems," filed 2018, 4/2, which is incorporated herein by reference in its entirety.
This application relates to U.S. provisional patent application No.62/651,665 entitled "temporal gate Control by user simulation locking of Active Control," filed on 2018, 4/2, which is incorporated herein by reference in its entirety.
This application relates to U.S. provisional patent application No.62/651,542 entitled "Methods, Devices, and Systems for interactive Cloud Gaming," filed 2018, 4/2, which is incorporated herein by reference in its entirety.
This application relates to U.S. provisional patent application No.62/655,688 entitled "Memory Management in gamingending" filed on 2018, month 4 and day 10, which is incorporated herein by reference in its entirety.
This application is related to U.S. provisional patent application No.62/646,824 entitled "Methods and Systems for rendering encoded Content for on line Interactive Gaming Sessions" filed on 2018, 3, month 22, which is incorporated herein by reference in its entirety.
Technical Field
The present application relates generally to computer technology, including but not limited to methods and systems for creating a gaming environment to enable real-time gaming profiling (profiling) and analysis.
Background
Internet-connected electronic devices may support a variety of cloud-based media and entertainment applications. These applications include media streaming applications where the server streams content to the user device, gaming applications where users interact from the user device with games executed on the server, and various social media and communication applications that allow a large number of users to interact with each other and with cloud-hosted content and applications concurrently via their internet-connected devices. In cloud-based applications, cloud games present some unique challenges for the following reasons: the requirements of game titles on hardware are very different; a wide variety of topologies in which cloud-based gaming can be conducted (e.g., by one player, multiple players at one location, or multiple players at multiple locations); there is a need to reliably and without delay transmit player input to a game server executing a game session, and transmit game session output from the game server to the player's device/display; the players' expectations for speed and responsiveness of game play (gameplay) vary widely; and in some cases it may be desirable to provide near real-time game content to spectators. Other challenges of cloud-based gaming relate to providing players with a consistent game play experience, regardless of where they are located (e.g., near or far from a server), the manner in which they connect to the gaming service (e.g., via a fast or slow internet connection), and what type of device they use to play the game (e.g., a general purpose personal device or a dedicated game controller) and view the game play output (e.g., a personal device or a media device connected to a media streaming device).
In particular, there is a need for a cloud gaming system that supports multiple gaming sessions for multiple game titles, where the game may be executed concurrently with acceptable latency and responsiveness, including for multiple players playing the same game title using various input and output devices and network connections from the same or different locations. Additionally, there is a need for a cloud gaming system that processes user input and outputs high-definition images that are targeted to all game players and that simultaneously reflect the resulting latency of the player input action with acceptable latency immediately upon receiving player input (e.g., game input entered on the end use gaming device/controller) in a gaming session. There is also a need to track the state of different game titles, instances and sessions on a microscopic level and to understand the cause of their performance increase or decrease on a macroscopic level. Thus, it would be beneficial to provide a cloud gaming system that leverages an efficient game parsing and analysis mechanism to host online interactive game play for multiple users from different locations without compromising game processing and output or gaming experience on the cloud gaming system.
Disclosure of Invention
Embodiments described in this specification aim to provide a gaming Application Programming Interface (API) and cloud gaming platform to enable efficient game profiling and performance analysis for online interactive game play of selected game titles hosted by one or more game servers. In particular, game parsing and analysis is performed in real-time while one or more game instances of a game title are executed on a game server to enable game play of multiple users from different locations in multiple synchronized game sessions. The computing, storage, and communication resources of the cloud gaming platform are allocated among game processing, game profiling, and performance analysis to enable efficient and concurrent game play, game profiling, and performance analysis. For example, by allocating the tasks of game profiling control and performance analysis to a server different from the game server, such as a dedicated game profiling server and an offline analysis server, the processing power of the game server is essentially reserved for game processing (e.g., game content rendering). In some cases, the game profiling and analysis application is hosted and executed by the game profiling server and/or the analysis server independently of the execution of the game application on the game server that manages game play. In these ways, the processing power retained on the game server can be utilized to efficiently play the game and, more importantly, can benefit from the performance feedback provided by real-time game profiling and performance analysis.
In one aspect of the present application, a method is implemented at a distributed real-time game profiling system. The method comprises the following steps: multiple game instances of a game title are executed in parallel by the game server. Each of the plurality of game instances includes one or more synchronized game sessions, and each of the one or more game sessions is executed at a game application of the client device. The method further comprises the following steps: while the game server is executing the plurality of game instances, a game profiling instruction is generated by the profiling server that collects a plurality of data samples for each of a subset of the plurality of game instances. The profiling server is coupled to the game server through one or more wireless communication networks. The method further comprises the following steps: the game profiling instruction is sent to the game server by the profiling server. The method further comprises the following steps: in response to the game profiling instruction, a subset of the plurality of game instances is identified by a local coordinator module of the game server according to the game profiling instruction, and a plurality of data samples associated with each game instance in the identified subset is collected by a collection module of the game server. Each of the plurality of data samples includes at least game state data and system performance data associated with a synchronized game session corresponding to a respective game instance. The method further comprises the following steps: by the game server, a plurality of data samples associated with each game instance in the identified subset are sent to the profiling server, and the plurality of data samples are provided to the analysis server, thereby allowing the analysis server to analyze the plurality of data samples to improve game performance and/or user experience associated with the game title.
In some implementations, the game state data includes game context (context) data associated with the game session, e.g., a timestamp corresponding to a particular moment in time, a game level, a weapon level, a clothing type, and a number of objects in a game scene. In some implementations, the game state data includes one or more of game settings including a sliding window frame rate and a frame resolution of image frames rendered for a corresponding game session. In some embodiments, the system performance data includes, for each game instance, the following performance data: a CPU, GPU, memory, operating system, one or more input/output ports, and/or data bus assigned to execute each of one or more game sessions of a respective game instance. In some embodiments, the system performance data is stored in at least one of a CPU performance counter, a GPU performance counter, a stack trace, and an architecture counter.
In some embodiments, the method further comprises: the subset of game state data and system performance data in the plurality of data samples is visualized by the analytics server. Alternatively, the method further comprises: at the analytics server, two data samples of the plurality of data samples corresponding to a first time and a second time after the first time are compared, an anomalous profile event is identified based on the comparison, and an alert message is generated indicating that the anomalous profile event occurred. Alternatively, in some embodiments, the game server comprises a plurality of processors, and the method further comprises one or more of: the method includes performing hotspot analysis of the plurality of processors based on the plurality of data samples, profiling the plurality of processors based on the plurality of data samples, and profiling a plurality of game instances and one or more synchronized game sessions corresponding to each game instance.
In another aspect of the invention, a distributed real-time game profiling system comprises: one or more processors; and a memory having instructions stored thereon that, when executed by the one or more processors, cause the distributed real-time game profiling system to perform performing any of the methods described above.
In another aspect of the invention, a non-transitory computer-readable medium has instructions stored thereon, which when executed by one or more processors, cause the processors of a distributed real-time game profiling system to perform any of the methods described above.
Other embodiments and advantages will be apparent to those skilled in the art from the description and drawings herein.
Drawings
FIG. 1 is an example online gaming environment, according to some embodiments.
FIG. 2 illustrates a network-level view of the extensible devices and services platform with which the online gaming environment of FIG. 1 is integrated, according to some embodiments.
FIG. 3 illustrates an abstract functional diagram of the extensible device and service platform of FIG. 2, in accordance with some embodiments, with reference to a processing engine and devices of an online gaming environment.
FIG. 4 is an example online interactive gaming environment supported by a server system including multiple servers, according to some embodiments.
FIG. 5 is an example memory system configured to store data in a server system, according to some embodiments.
Fig. 6A is a block diagram illustrating a server system according to some embodiments, and fig. 6B is a block diagram illustrating a server-side game module executing at game server 118 of the server system according to some embodiments. FIG. 6C is a block diagram illustrating data stored in a server system, according to some embodiments.
FIG. 7 is a block diagram illustrating an example client device, according to some embodiments.
FIG. 8 is a block diagram illustrating an example media device of a gaming environment, in accordance with some embodiments.
FIG. 9A is an example flow diagram illustrating a process for performing an online gaming session on a server system according to some embodiments. FIG. 9B is an example flow diagram illustrating a real-time game profiling and analysis process collectively implemented by one or more game servers, profiling servers, and/or analysis servers in a server system, according to some embodiments.
10A-10C are example Graphical User Interfaces (GUIs) implemented by a game profiling and analysis application executing on a client device, according to some embodiments.
FIG. 11 is an example flow diagram illustrating a game parsing and analysis process according to some embodiments.
FIG. 12 is an example track recorded for a game instance, according to some embodiments.
FIG. 13 is a flow diagram illustrating an example method for parsing and analyzing game titles at a distributed real-time game parsing system, according to some embodiments.
14A-14E are flow diagrams illustrating another example method for parsing and analyzing a game title at a distributed real-time game parsing system, according to some embodiments.
FIG. 15 is an example flow diagram of a method of performing a game session on a game API platform according to some embodiments.
FIG. 16 is an example flow diagram of another distributed method of hosting an electronic game on a game API platform according to some embodiments.
Like reference symbols in the various drawings indicate corresponding parts.
Detailed Description
Reference will now be made in detail to embodiments, examples of which are illustrated in the accompanying drawings. In the following detailed description, numerous specific details are set forth in order to provide a thorough understanding of the various embodiments described. It will be apparent, however, to one skilled in the art that the various described embodiments may be practiced without these specific details. In other instances, well-known methods, procedures, components, and networks have not been described in detail as not to unnecessarily obscure aspects of the embodiments.
In various embodiments described herein, a gaming environment includes a plurality of media devices (e.g., casting devices), where each media device is optionally coupled to an output device, a plurality of client devices are communicatively coupled to the media devices, and a server system is coupled to the media devices and the client devices. The server system executes multiple game instances of the game title in parallel, and each of the multiple game instances includes one or more synchronized game sessions. Each of the one or more gaming sessions is executed at a gaming application of the client device to enable game play via the client device and optionally via the corresponding media device and/or output device. Optionally, the server system is configured to manage a virtual gaming domain in which the plurality of media devices and the plurality of client devices are linked to each other via a user account of the gaming application.
Game play activity in a gaming environment is monitored and analyzed by a distributed real-time profiling system that includes at least one profiling server in addition to one or more game servers. When one or more game servers are executing multiple game instances, the profiling server instructs the game servers to collect multiple data samples for a subset of the game instances. In response, the game server identifies a subset of game instances and collects a plurality of data samples, wherein each data sample includes at least game state data and system performance data associated with one or more synchronized game sessions corresponding to each game instance in the set of game instances. Optionally, the plurality of data samples are provided to a profiling server or an analysis server to allow the profiling or analysis server to analyze the plurality of data samples to improve game performance and/or user experience associated with the game title. In these ways, game instances are monitored and analyzed in real-time by a profiling server and/or analysis server that is different from the game server, allowing game play to occupy a large portion of the game server's resources while still benefiting from the performance improvements achieved by the real-time analysis results.
Online gaming environment
FIG. 1 is an example online interactive gaming environment 100, according to some embodiments. Online interactive gaming environment 100 includes one or more client devices (e.g., client devices 102 and 104). Each client device 102 executes one or more gaming applications. An online gaming session may be initiated and run on a particular gaming application to allow a user of the client device 102 to play an online interactive game (also referred to as a "game title") hosted by the server system 114. In some implementations, a client device 102 (e.g., a host client) is configured to invite one or more other client devices 102 to join a game scenario of an online interactive game. The gaming sessions of these client devices 102 are synchronized to display the same game scenes of the online interactive game, optionally with different perspectives corresponding to their respective users. These synchronous gaming sessions are collectively referred to as game instances. That is, in some implementations, the server system 114 hosts a plurality of game titles, where each game title includes a plurality of game instances, and each game instance includes a plurality of synchronized game sessions executing at a game application of the client device 102.
In some implementations, a client device 102 (e.g., client device 102A or 102B) is coupled to a media device 106. Media device 106 is also coupled to one or more output devices 108 (e.g., televisions, display monitors, sound systems, speakers, etc.) that may output visual and/or audio content, and is thus configured to output content to output devices 108. The client device 102 is configured to control game play and the media device 106 is configured to receive game content from the server system 116 via the communication network 112 and project the received game content onto the output device 108. In particular, the client device 102 may be communicatively coupled to the media device 106 directly (e.g., via a wired, bluetooth, or other wireless communication link), via a local network 110 (e.g., a Wi-Fi network), or via one or more communication networks 112. In some implementations, the client device 102 and the media device 106 are local to each other (e.g., in the same room, in the same house, etc.). In some implementations, the media device 106 is a casting device (e.g., Chromecast by Google inc.) or a device that includes functionality that is otherwise cast. Alternatively, in some implementations, the client device 102 (e.g., client device 102C) has a display screen integrated therein for directly displaying media or game content associated with the respective online game session without projecting the content onto the output device 108 via the media device 106.
In some implementations, the online interactive gaming environment 100 also includes an administrator/developer client device 104 configured to provide a Graphical User Interface (GUI) in a game profiling and analysis application. A GUI is displayed on the client device 104 on which an administrator or developer can enter user input to request a particular game profile or analysis to monitor the game and system performance of one or more game instances when a corresponding game title is executed in the online interactive gaming environment 100. The client device 104 is optionally connected to a communication network 112 via a cellular communication network, either directly or indirectly via a local area network 110'.
In some implementations, the server system 114 includes one or more game servers 118 and a media streaming server 120. Server system 114 is configured to concurrently provide two or more media streams 130 and 132 for an online interactive gaming session running on first client device 102A. The two or more media streams include a low latency stream 130 and a normal latency stream 132, which are provided to the first client device 102A and the reviewer device via one or more communication networks 112, respectively. When a user of the first client device 102A conducts a game session on the first client device 102A, the game session is recorded and broadcast to one or more spectators via the normal latency flow 132, i.e., the spectators may comment on the reviewer client device on the game session. The low latency stream 130 corresponds to game play of an online interactive game session and has a faster response rate and lower transmission latency than a normal latency stream 132 corresponding to an associated commentary session. Optionally, the reviewer device is co-located with the first client device 102A. Optionally, the reviewer device (e.g., client device 102C) is remote from the first client device 102A. In some implementations, the reviewer device is another client device similar to the first client device 102A, and optionally has an integrated display or an external display. In some implementations, the reviewer device is a media device 106 (e.g., a device with casting functionality) coupled to one or more output devices 108 that may output visual and/or audio content. In some implementations, both the low latency stream 130 and the normal latency stream 132 are concurrently displayed on the screen (e.g., on a partition screen using an embedded window).
In some implementations, game server 118 provides normal latency stream 132 to the commentary device and low latency stream 130 to first client device 102A. In some implementations, the game server 118 provides the normal latency stream 132 to the media streaming server 120 and the low latency stream 130 to the first client device 102A. The media streaming server 120 provides the normal latency stream 132 to the commentary device. The media streaming server 120 optionally hosts a media streaming site (e.g., YouTube) to provide media content to subscribers. In some implementations, media content (e.g., normal latency stream 132) may be provided to a subset of subscribers based on membership level.
Each client device 102 or 104 is capable of data communication and information sharing with a central server or cloud computing system (e.g., server system 114) and/or other network connected devices (e.g., another client device 102 or 104, media device 106, and output device 108). Data communication may be performed using any of a variety of custom or standard wireless protocols (e.g., IEEE802.15.4, Wi-Fi, ZigBee, 6LoWPAN, Thread, Z-Wave, Bluetooth Smart, ISA100.11a, WirelessHART, Miwi, etc.) and/or any of a variety of custom or standard wired protocols (e.g., Ethernet, HomePlug, etc.), or any other suitable communication protocol, including communication protocols not yet developed as of the date of filing of this document. In some embodiments, the online interactive gaming environment 100 includes a conventional network device (e.g., a router associated with the local area network 110) via which a set of client devices 102 and their corresponding media and output devices (if any) are communicatively coupled to each other over the local area network 110. The local area network is communicatively coupled to other portions of the communication network 112 (e.g., a wide area network and the internet). In some embodiments, each client device 102 optionally communicates with one or more other client devices 102, respective media devices 106, or respective output devices 108 using one or more radio communication networks (e.g., ZigBee, Z-Wave, Insteon, bluetooth, Wi-Fi, and/or other radio communication networks). In one example, the client device 102A or 102C is optionally connected with the communication network 112 via a cellular communication network, either directly or indirectly via a local area network 110'.
In some implementations, the client devices 102 are remote from each other, i.e., they are not located in the same room or even structure. The game title may be started on the client devices 102 by launching a game application (e.g., game application 732 in fig. 7) to execute at each client device 102. In some implementations, for each client device 102, the gaming application establishes an online gaming session 116 with the server system 114 independently. The online gaming sessions 116 of two or more client devices 102 (e.g., 102A and 102B) are related to each other (e.g., because the online gaming sessions 116 are conducted in the same gaming domain/instance of a game title), and thus share a game scene in a gaming application. The related online gaming sessions 116 are synchronized with each other, and each online gaming session 116 optionally shows the same game scenario with a unique player perspective corresponding to the respective client device 102. The user of each client device 102 may thus play a game on the respective client device and affect the output of the online gaming sessions 116 on other client devices 102 from the same game instance. For example, in some embodiments, the server-side gaming application 628 is configured to maintain a consistent game state among users concurrently playing the same game instance. In some implementations, the server system 114 and the server-side gaming application 628 maintain individual sessions for each game-playing user, which may result in rendered views of the scene that are specific to the user's individual game play state and view, but each of these sessions is consistent with other sessions of the user who are playing the same game instance and interacting with and viewing the same scene.
Alternatively, in some other implementations, after the gaming application of the first client device 102A establishes the online gaming session 116A, one or more second client devices 102B are invited to join the online gaming session 116A by an invitation message, and a message is sent to each second client device 102B, e.g., with a link (e.g., a URL address) to join the online gaming session 116A. An appropriate controller configuration is provided to each second client device 102B invited to join the online gaming session 116A. When the second client 102B joins the online gaming session 116A, the server system 114 creates a separate gaming session 116B for each individual second client device 102B and associates the gaming sessions 116A and 116B with the game instances. In the game instance, each individual game session 116B of the respective second client device 102B is synchronized with and shares the same scene with the game session 116A of the first client device 102A, but may have a unique player perspective corresponding to the respective second client device 102B. After each second client device 102B has joined the online gaming session 116A (more precisely, started its associated online gaming session 116B), the user may play a game on the respective second client device 102B and affect the output of the online gaming sessions 116A running on other client devices 102 in the same game instance.
The client device 102 is a device that includes and can run one or more different user applications (e.g., the game application 628 in fig. 6A) including a game application. In some implementations, the client device 102 is a smartphone, tablet, laptop, desktop computer, multimedia device, or remote control. In some implementations, the client device 102 includes a dedicated game controller device (e.g., game controller 102B). In some implementations, the client device 102 includes one or more user applications configured to operate in conjunction with the media device 106. In some implementations, the application includes a media device application for pairing the client device 102 with the media device 106 and configuring the media device 106. The applications also include one or more applications that can project the associated content to the media device 106. In some implementations, the application projects data and/or content to the media device 106 by directly sending the data/content to the media device 106 (e.g., via a local area network) and/or by pointing the media device 106 to a remote location (e.g., a URL or other link to a location on the server system 116 or game content host) from which the media device 106 can stream or otherwise receive the data/content. The media device 106 receives data/content from an application and/or a remote location and outputs visual and/or audio content corresponding to the received data/content to the output device 108. Accordingly, an online game session 116 is established between the game application running on the client device 102, the remote server system 114, and the media device 106.
In some implementations, as part of the process of linking related online game sessions 116 in a game instance, the server system 114 assesses the capabilities of each corresponding client device 102 and/or the quality of the communication connection between the server system 114 and the client device 102. In some implementations, server system 114 measures network latency between client device 102 and server system 114. If the measured latency is above the threshold and a lower latency connection is available, server system 114 may suggest to client device 102 to change to the lower latency connection, or invite the user of client device 102 to change client device 102 to the lower latency connection. For example, if the client device 102 is on a cellular wireless connection and a local network is available, the server system 114 may suggest that the client device 102 connect through the available local network. In some implementations, the latency threshold requirements vary from game to game. For example, some games (e.g., action games) experience the best on lower latency connections, while some other games (e.g., online board games or card games) do not have as high a latency requirement. In view of these different requirements associated with different types of games, server system 114 may make connection recommendations.
As part of the client device 102 initiating or joining the gaming session 116, the server system 114 communicates with the client device 102 to set up the controller on the client device 102. In some implementations, this includes the server system 114 assessing whether the client device 102 has the resources and communication capabilities required by the controller. The controller may be implemented differently at the client device 102 depending on the available resources, connection quality, and gaming requirements at the client device 102. In some implementations, a game title may be played using a web-based controller interface. For example, a controller interface for a game may be embedded in a web page, and the web page rendered in a web browser on the client device 102. Alternatively, in some embodiments, the standardized controller is implemented in a predefined application that is not specific to the game or is directly associated with the game (e.g., a casting device application, such as Chromecast or Google Cast from Google inc., or other media device application), or in the operating system of the client device 102. For example, a device operating system or a predefined application on the client device 102 may have a controller sub-module. The controller sub-module includes one or more standardized controller configurations, templates, and the like. Each standardized controller configuration configures the controller sub-module to implement a virtual controller in some manner with input devices and/or sensors on the client device 102. The standardized controller configuration used may vary from game to game and/or from type of client device to type of client device.
Further, in some embodiments, the game has a particular controller configuration that may be implemented on the controller sub-module. Such a configuration may be stored at the server system 114 and transmitted to the client device 102 as part of the process by which the client device 102 joins or begins the online gaming session 116. In some embodiments, the particular controller configuration may be a fully customized controller, or a mix of standard and customized controllers. Additionally, in some implementations, the game requires a particular application associated with the game. For example, a game may require a controller application specifically associated with the game. In some implementations, the client device 102 can be instructed to download a particular application or a predefined application as part of starting or joining the session 116. For example, if the client device 102 does not already have a predefined application (with the controller sub-module) or a particular application associated with a game, and such an application is necessary for game play, the server system 114 instructs the client device 102 to prompt its user for a download and requests user permission to proceed.
After a client device 102 logs into its respective user account and initiates/joins its online gaming session 116, the game server 118 sets up the gaming session 116 and manages each particular gaming session 116 for the respective client device 102 by: obtain game content from a content server (e.g., content server 450 in fig. 4), send the game content to a game application executing on the client device 102 or a designated media device 106, identify a user request or action, render a game play output for the client device 102 or media device 106 in response to the user request or action, and store game state data during a corresponding game session 116. In some embodiments, the content server provides third party game content, such as sports games, racing games, Role Playing Games (RPG), and First Person Shooter (FPS) games. Different instances of these games may have various different cloud hardware requirements and networks (e.g., to ensure an optimal user gaming experience-consistent with different subscription performance levels in some cases), based on different associated latency requirements and expectations, output video resolution and game server computing workload and video encoding/streaming resources, and network bandwidth.
In some implementations, game server 118 dynamically allocates cloud game hardware resources (e.g., GPU 406 and encoder 408 in fig. 4) and monitors and utilizes network bandwidth available to individual end users to provide an optimal cloud game experience. In some embodiments, game server 118 provides multiple performance levels, including: a tier that supports high performance, real-time gaming sessions with high definition video/media streams, and another tier that supports commentary media streams that correspond to little or no latency with one or more actual game streams.
FIG. 2 illustrates a network-level view of an extensible device and service platform 200 with which the online interactive gaming environment 100 of FIG. 1 is integrated, according to some embodiments. The extensible device and service platform 200 includes a remote server or cloud computing system 114 (i.e., the server system 114 in fig. 1). Each client device 102 or media device 106 may communicate with a remote server or cloud computing system 114. For example, a connection to one or more networks 112 (e.g., using 3G/4G connectivity to a wireless carrier) may be established directly, or through a network interface 160 (e.g., a router, switch, gateway, hub, or intelligent dedicated whole-home control node), or through any combination thereof.
In some implementations, the device and service platform 200 communicates with and collects data from the client devices 102 of the online gaming environment 100. Further, in some embodiments, the device and service platform 200 communicates with and collects data from a plurality of online gaming environments around the world. For example, the server system 114 collects game data 202 from client devices of one or more online gaming environments, where the client devices may routinely transmit game data or may transmit game data in particular instances (e.g., when the devices query for game data 302). Exemplary collected game data 202 includes, but is not limited to, game context, game settings and image frame data for different online game sessions for different game titles, and performance data for hardware and software systems executing corresponding game titles.
In some implementations, the smart home provider server system 164 provides one or more services 204 to the online gaming environment. Example services 204 include, but are not limited to, software updates, customer support, game data collection/logging, remote access, remote or distributed control, and/or use advice (e.g., based on collected game data 202) to improve performance, reduce utility costs, improve security, and the like. In some implementations, data associated with the service 204 is stored at the server system 114, and the server system 114 retrieves and transmits the data at an appropriate time (e.g., upon receiving a request from a user, at regular intervals, etc.).
In some embodiments, the extensible device and service platform 200 includes a processing engine 206, which may be centralized at a single server or distributed among multiple different computing entities without limitation. In some implementations, the processing engine 206 includes an engine that: configured to receive data from client devices of an online gaming environment (e.g., via the internet and/or a network interface), index the data, analyze the data, and/or generate statistics based on or as part of the analysis. In some implementations, the analyzed data is stored as game analysis data 208.
The results of the analysis or statistics may then be transmitted back to the client device 102, other devices, servers that provide web pages to users of the devices, or other non-game entertainment device entities (e.g., game developers, researchers, policy makers) that have provided the game data 202 used to derive the results. In some implementations, usage statistics, usage patterns, and/or statistics summarizing game data 202 relating to usage of other devices are generated and transmitted by processing engine 206. The results or statistics may be provided via one or more networks 112. In this manner, the processing engine 206 may be configured and programmed to derive a variety of useful information from the game data 202. A single server may include one or more processing engines.
The game analytics data 208 may be used at different granularities for a variety of useful purposes ranging from explicit programming control of the client device 102 in a per-session, per-instance, or per-game title manner to generation of inference abstractions that may provide assistance on a session, instance, or game title basis (e.g., an inference may be made that a game player has seen dropped frames and register overflows when L chunks occur in Tetris (Tetris), and thus, more computational and register resources must be allocated to the corresponding sessions when L chunks occur), to generation of statistical and associative abstractions that may be used for other purposes. For example, the processing engine 206 may generate statistics regarding frame losses across a population of client devices and send the statistics to device users, game providers/developers, system administrators, or other entities (e.g., entities that have requested statistics and/or entities that have provided monetary compensation for statistics).
In some embodiments, to encourage innovation and research and to increase the products and services available to users, the device and services platform 200 exposes a series of Application Programming Interfaces (APIs) 210 to third parties, such as: game content providers 214, third party gaming platforms 216, academic institutions 218 (e.g., university researchers), related businesses 220 (e.g., providing device warranties or services to related assets, targeting advertisements based on game data), game administrators 224, and other third parties. The API210 couples to a third party system and permits it to communicate with the server system 114, which server system 114 includes the service 204, the processing engine 206, the game data 202, and the game analytics data 208. In some implementations, the API210 allows applications executed by third parties to initiate specific data processing tasks performed by the server system 114, as well as receive dynamic updates to the game data 202 and game analytics data 208.
For example, a third party (e.g., a third party gaming platform) may develop programs and/or applications, such as web applications or mobile applications, that are integrated with the server system 114 to provide services and information to the user. Such programs and applications may, for example, be designed to manage different subscription models, identify bugs and bottlenecks in game programs, provide for high game demand, track past game service performance, provide game assistance, support social networking services, etc., and/or perform other beneficial functions or tasks.
FIG. 3 illustrates an abstract functional diagram 300 of the extensible device and service platform 200 of FIG. 2, in accordance with some embodiments, with reference to the processing engine 206 and the devices of the online gaming environment 100. Although devices located in an online gaming environment will have a variety of different individual capabilities and limitations, the devices can still be viewed as sharing a common trait in that each device is a data consumer 302(DC), a data source 304(DS), a service consumer 306(SC), and a service source 308 (SS). Advantageously, in addition to providing gaming information (e.g., gaming content and contextual information related to other players in the same gaming scenario/instance) used by the client devices 102 to achieve their gaming goals, the scalable device and service platform 200 may be configured to use the large amount of gaming-related data generated by these client devices 102 during their gaming sessions. In addition to enabling or optimizing the actual operation of the device itself for their instant game functionality, the extensible device and service platform 200 can also be directed to "re-use" (repurpose) this data in various automated, extensible, flexible, and/or scalable ways to achieve various useful goals. These goals may be predefined or adaptively identified based on, for example, usage patterns, device efficiency, and/or user input (e.g., requesting a particular function).
The processing engine 206 includes a plurality of processing paradigms 310. In some implementations, the processing engine 206 includes a managed game play service paradigm 310a that monitors and manages the game play functionality of the client device 102. The game play functions may include: ensuring proper multiplayer gaming play associated with a game instance in view of user input, troubleshooting problems that occur during the gaming play, monitoring and analyzing performance of the game session, and other game-related functions. In some implementations, the processing engine 206 includes an advertising/communication paradigm 310b that estimates characteristics (e.g., group characteristic information), desires, and/or features of interest of the user based on the game play activity. The user may then be offered or automatically provided with a service, promotion, product, or upgrade. In some implementations, the processing engine 206 includes a social paradigm 310c that uses information from the social network, provides information to the social network (e.g., based on game play activities), and/or processes data associated with the user, the game session, and/or interactions with the social network platform. For example, the user's status or level in the game title may be reported and updated to their trusted contacts on the social network. As another example, a user may be able to share game play skills with other users. In yet another example, a user may schedule a game play contest on a social network that is related to a particular game title.
In some implementations, the processing engine 206 includes a challenge/rule/compliance/reward paradigm 310d that informs the user of the challenge, competition, rule, compliance specification, and/or reward, and/or uses the operational data to determine whether the challenge has been met, whether the rule or specification has been complied with, and/or whether the reward has been earned. The challenges, rules, and/or regulations may be related to a particular game title. For example, one challenge may involve a participant reaching a high level of skill for a particular game title within a predetermined period of time (e.g., within a week). A game player who successfully completes a challenge will be awarded, such as awarding a coupon, virtual currency, virtual equipment or weapons, virtual game territory, status, and the like.
In some implementations, the processing engine 206 integrates or otherwise uses extrinsic information 312 from extrinsic sources to improve the functionality of one or more processing paradigms. Extrinsic information 312 may be used to interpret data collected in association with a game session, determine game state, evaluate hardware and software performance, identify social networks or social network information, determine contact information for game content providers, collect information about game skills and trends associated with game titles, and so forth.
FIG. 4 is an example online interactive gaming environment 400 supported by server system 114 including multiple servers, according to some embodiments. Server system 114 includes at least one or more game servers 118 and is configured to host one or more game titles. That is, the server system 114 is communicatively coupled to the plurality of client devices 102 over the one or more communication networks 112 and executes a plurality of online gaming sessions corresponding to the game title in parallel, thereby allowing each of the plurality of client devices 102 to participate in the gaming entertainment under the game title via the respective online gaming session. The game server 118 receives session requests from multiple client devices 102 and initiates, joins, or terminates online game sessions accordingly. In response to each session request, one of game servers 118 is assigned to perform the corresponding online game session. In performing each online gaming session, the game server 118 assigned to perform the respective online gaming session renders a plurality of image frames (i.e., session data streams) for the client device that has requested the online gaming session. In some cases, the plurality of image frames are rendered in response to receiving user input (e.g., a command to jump, shoot, or turn) from any one of a subset of online game sessions sharing a game instance or game title scene.
In some embodiments, the server system includes a game library server 422, the game library server 422 configured to provide executable game programs (e.g., game applications 628 in FIG. 6A) corresponding to one or more game titles loaded to the game server 118 for executing game titles. The server system 114 also includes a game content server 450, the game content server 450 configured to provide game content to the client device 102 and the game server 118 to initiate an online game session and render image frames of the online game session. Alternatively, in some cases, the game content server 450 is managed by a third party different from the server system 114 and provides third party game content to the server system 114. Examples of third party game content include, but are not limited to, sports games, racing games, Role Playing Games (RPG), and First Person Shooter (FPS) games. These game titles may have a variety of different cloud hardware requirements and networks (e.g., to ensure an optimal user gaming experience-consistent with different subscription performance levels in some instances) based on different associated latency requirements and expectations, output video resolution, and game server computing workload and video encoding/streaming resources, and network bandwidth.
Optionally, game server 118, which is assigned to perform the online game session, also generates a commentary media stream and provides it, directly or indirectly, via media streaming server 120 to spectators who want to comment on the game play in real-time. In some implementations, the media streaming server 120 is configured to host a media streaming website or application, and the commentary media stream is provided to the spectator via the media streaming website or application concurrent with the game play.
In some implementations, the game server 118 manages a user account associated with the client device 102, e.g., a subscription of the user account to members of one or more online interactive games. Alternatively, in some implementations, the server system 114 includes a front-end server 402 configured to manage user accounts associated with the client devices 102. Optionally, the front end server 402 is owned by a third party entity. After the client devices 102 log into their respective user accounts and initiate/join their online gaming sessions 116, the game servers 118 set up and manage the gaming sessions 116 by: obtain game content from the content server 450, send the game content to a game application executing on the client device 102 or a designated media device 106, identify a user request or action, render a game play output for the client device 102 in response to the user request or action, and store game state data during a corresponding game session 116.
In some implementations, game server 118 dynamically allocates cloud game hardware resources (e.g., GPU 406 and encoder 408) and monitors and utilizes network bandwidth available to individual end users to provide an optimal cloud game experience. In some embodiments, game server 118 provides multiple performance levels, including: a tier that supports high performance, real-time gaming sessions with high definition video/media streams, and another tier that supports commentary media streams that correspond to little or no latency with one or more actual game streams. Optionally, such commentary media streams are provided to one or more users via a media streaming site, such as YouTube, and the media streaming site is optionally managed by the media streaming server 120.
Each game server 118 includes one or more processing units (e.g., CPU404, GPU 406, and encoder 408), a main dynamic memory 410, and one or more local caches 412. The main dynamic memory 410 is configured to store programs and data for use by the CPU404 and GPU 406 during program execution. Optionally, each game server 118 has its own main dynamic memory 410. Optionally, a subset of the game servers 118 or all game servers share the main dynamic memory 410. Local cache 412 is configured to temporarily store data, such as media content that has completed post-vertex processing and awaits primitive assembly in GPU 406, and media content that GPU 406 generates and is to be provided to encoder 408 for further encoding.
In some embodiments, server system 114 includes a static memory pool 414 in addition to main memory 410 and cache 412. The pool of static memory 414 is shared among a subset or all of the game servers 118 (e.g., 118-1, 118-2, …, 118-n) and is configured to store one or more static data items used in multiple online game sessions for the same game title. Server system 114 also includes a memory controller 416 configured to manage a pool of static memory 414. In some implementations, each of the plurality of game sessions is associated with a particular static data item and requires a particular graphics operation that can be performed by the respective GPU 406 using the particular static data item, and the particular static data item is stored in the static memory pool 414. The respective GPU 406 is configured to access a static memory pool 414 via a memory controller 416 in order to retrieve a particular static data item.
Note that in some embodiments, static data items stored in static memory pool 414 may be stored in active dynamic memory 410. The GPU 406 accesses the main dynamic memory 410 at a faster rate than the static memory pool 414. However, the main dynamic memory 410 needs to be refreshed or given new electronic charge every few milliseconds to compensate for charge leakage from the memory, and is therefore not efficient in electrical performance. If static data items are moved to the static memory pool 414, a portion of the main dynamic memory 410 in the game server 118 may be freed and used to store more programs and dynamic data, or a smaller main dynamic memory 410 may be used to reduce power consumption.
In some implementations, game content corresponding to the game title is rendered by GPU 406 for the online game session according to a graphics pipeline process (e.g., OpenGL rendering pipeline). The graphics pipeline process includes an ordered sequence of graphics operations, and each graphics operation is implemented based on one or more user-defined shader programs. Shader library server 418 is coupled to game server 118 and is configured to provide standard shader programs as needed for different game titles. If a shader program is selected for use with a game title, the shader program is retrieved from shader library server 418, compiled by game server 118, and stored locally in game server 118 for rendering multiple image frames for each online game session. In some implementations, each image frame of the online game session is rendered by an ordered sequence of compiled shaders (e.g., including vertex shaders, tessellation shaders, geometry shaders, and fragment shaders), where each shader implements one or more particular image rendering operations during the creation of the respective image frame.
In some implementations, while the GPU is executing multiple online game sessions, the shader pipeline optimizer optimizes a sequence of shader programs for implementing an ordered sequence of graphics operations. In other words, the CPU404 allocates unused subsets of CPUs and GPUs in the server system 114 to identify an alternative sequence of shaders or another version of an ordered sequence of shaders with respect to one or more performance criteria. Optionally, game server 118 includes both unused subsets of CPUs and GPUs allocated for shader pipeline optimization and active CPUs and GPUs that perform online game sessions. Optionally, unlike game server 118, pipeline optimizer server 420 includes a subset of CPUs and GPUs allocated for shader pipeline optimization.
In some embodiments of the present application, server system 114 also includes a profiling server 430 and an analysis server 440, which are optionally separated into two different servers or integrated into one server. Profiling server 430 and analysis server 440 are configured to collect data samples associated with a subset of game instances of a game title and analyze the collected data samples, respectively. In particular, while game server 118 executes multiple game instances, profiling server 430 sends game profiling instructions (e.g., instructions 538 in FIG. 5) to game server 118 to collect multiple data samples for a subset of game instances corresponding to a game title. In response to the game profiling instructions, game server 118 identifies a subset of the plurality of game instances, collects a plurality of data samples including at least game state data and system performance data associated with one or more synchronized game sessions corresponding to each game instance in the set of game instances, and returns the plurality of data samples to profiling server 440. The profiling server 430 then provides the plurality of data samples to the analysis server 440, thereby allowing the analysis server 440 to analyze the plurality of data samples to improve game performance and/or user experience associated with the game title. In this way, data collection and analysis occurs at profiling server 430 and analysis server 440 concurrently with the execution of the online game session at game server 118.
FIG. 5 is an example memory system 500 having a multi-level storage scheme configured to store data in server system 114, according to some embodiments. According to a multi-level storage scheme, memory system 500 of server system 114 includes a plurality of caches 502 disposed directly within each individual server (e.g., game server 118). More specifically, each of the plurality of caches 502 is directly associated with a processor of an individual server (e.g., CPU404 and GPU 406 of game server 118) and is configured to simultaneously provide instructions for execution by the processor of the individual server and data used during execution of the instructions. Memory system 500 of server system 114 also includes main dynamic memory 410, with main dynamic memory 410 configured to store programs executed by one or more processors of a server (e.g., game server 118) and data used during execution of the programs. Each program includes a plurality of instructions, and during execution, the instructions are sequentially loaded into the cache 502 of the corresponding processor and wait to be executed by the corresponding processor. In some embodiments, a subset of the servers or all of the servers of server system 114 share the primary dynamic memory 410. The data bus couples a subset or all of the servers of server system 114 to the main dynamic memory 410 to enable write and read access to the main dynamic memory 410. Optionally, the data bus comprises a high speed data bus via which the main dynamic memory 410 is accessed with a latency that is much less than a threshold bus latency. In some implementations, each server of server system 114 has a respective primary dynamic memory 410 that is accessible only to one or more processors of the respective server. For example, game server 118 includes a main dynamic memory 410 that is accessible by CPU404 and GPU 406 of game server 118. The main dynamic memory 410 of the game server 118 stores instructions 504 configured to execute one or more game titles, such as the game title of the server-side game module 626 of FIG. 6A, and collect data samples during execution of the game title.
The main dynamic memory 410 of the game server 118 also stores dynamic data 506 associated with the online game session for each game instance, including game state data 508 (e.g., first game session data, second game session data) and system performance data 522. In particular, the game state data 508 for each game session optionally includes game context data 508A (e.g., game level, weapon type and clothing, objects in the corresponding game scene), game settings 508B (e.g., sliding window frame rate, frame resolution), and image frame data 508C (e.g., texture page, vertex page, constant page, and frame data) for the corresponding online game session for the respective game title. Further, in some embodiments, system performance data 522 is stored in at least one of a CPU performance counter, a GPU performance counter, a stack trace, and an architecture counter. Moreover, each of the game state data 508 and the system performance data 522 is associated with a timestamp indicating the time at which the corresponding data sample was collected.
According to a multi-level storage scheme, memory system 500 of server system 114 also includes a pool of static memory 414, the pool of static memory 414 being centralized and shared by one or more game servers 118 in server system 114. The static memory pool 414 is configured to store one or more static data items for image frames of an online game session used to render a game title. Examples of one or more static data items include, but are not limited to, texture object 512, vertex data buffer object 524, and constant data object 516. When one or more game servers 118 are assigned to execute multiple online game sessions, each game server 118 obtains one or more static data items from the static memory pool 414 and one or more dynamic data items 506 from its corresponding primary dynamic memory 410.
Further, in some embodiments, game server 118 also includes a shader cache 518 coupled to its GPU 406. Shader cache 518 is configured to store at least one sequence of compiled shaders such that instructions of the compiled shaders may be loaded directly to GPU 406 to render game content via a graphics pipeline process. In some implementations, the server system 114 includes a plurality of compiled shader sequences 520, where each compiled shader sequence 520 is configured according to performance criteria, and each compiled shader sequence 520 optionally includes multiple versions corresponding to different user input conditions. Optionally, a plurality of compiled shader sequences 520 are stored in shader cache 518. Optionally, a plurality of compiled shader sequences 520 are stored in the static memory pool 414 and moved to the shader cache 518 or directly into the cache of the GPU 406 (if selected for game content rendering).
Further, according to the multi-level storage scheme, the memory system 500 of the server system 114 includes a hard disk drive 524, the hard disk drive 524 storing one or more executable game programs corresponding to one or more game titles. In configuring server system 114 to host a game title, server system's CPU404 sends a program request 526 for an executable game program 528 corresponding to the game title. In response to the program request 526, the hard disk drive 524 returns an executable game program 528 corresponding to the game title to the CPU 404. In some implementations, the hard disk drive 524 does not store the requested executable game program 528, and the CPU404 sends a program request 526 to request the executable game program 528 from a remote server (e.g., the game library server 422, the content server 450, or another third party game provider). The CPU404 stores an executable game program 528 returned from the hard disk drive 524 or a remote server into the main dynamic memory 410 as a server-side game module 626.
In addition, in some embodiments, hard disk drive 524 also stores static data items for one or more game titles. In the process of loading a game title, the CPU404 of the server system sends a data request 530 for the static data items of the game title. In response to the data request 526, the hard disk drive 524 returns a subset or all of the static data items 532 corresponding to the game title to the CPU 404. In some implementations, the hard disk drive 524 does not store the particular static data item, and the CPU404 sends a data request 530 to request the particular static data item from a remote server (e.g., the content server 450 or the shader library server 418). One or more static data items 532A returned from the hard disk drive 524 or a remote server are stored in the static memory pool 414. Alternatively, in some embodiments, one or more static data items 532B are stored in the main dynamic memory 410 for direct access by the CPU404 and GPU 406 of the game server 118.
Additionally, the CPU404 also sends shader requests to the shader pool server to obtain one or more standard shader programs 536 for use in association with the game title, and the returned shader programs 536 are stored locally in the shader cache 518. While executing the online game session corresponding to the game title, the CPU404 and GPU 406 generate a plurality of dynamic data items 506 that include at least game state data 508 and system performance data 522 corresponding to the online game session. A plurality of dynamic data items 506 are stored in the main dynamic memory 410 of the server system 114. In some embodiments, the game state data 508 and system performance data 522 are selectively collected and stored in the main dynamic memory 410 according to a game profiling request 538 sent by the profiling server 430. The game state data 508 and system performance data 522 are periodically returned to the profiling server 430 according to a predefined schedule or in response to a query, and forwarded to the analysis server 440 for further analysis.
In some embodiments, server system 114 includes a dynamic memory controller 416A and a static memory controller 416B configured to manage write/read access to the main dynamic memory 410 and the static memory pool 414, respectively. Alternatively, in some embodiments, the server system 114 includes a single memory controller 416, the single memory controller 416 configured to manage write and read access to the primary dynamic memory 410 and the static memory pool 414. The main dynamic memory 410 includes a directory 540 that identifies the locations of the instructions 204, the dynamic data items 506, and the static data items 532B (if any) in the main dynamic memory 410. In some embodiments, the static memory pool 414 includes a hash table 542 that identifies the location of the static data item 532A in the static memory pool 414. Optionally, static data items are identified based on the contextual information 532. In one example, the static memory pool 414 stores a plurality of compiled shader sequences 520, and their addresses in the static memory pool 414 are identified using performance criteria, user input, and/or usage statistics of corresponding graphics pipeline processes in a hash table. Optionally, this context-based mapping in hash table 542 is also applied to other static data items. The hash table prevents the static memory pool 414 from repeatedly storing static data items in association with different situations, thereby causing a waste of its memory resources.
In some embodiments, each CPU404 includes multiple CPU cores. Each CPU core has a cache that stores both instructions for execution by the corresponding CPU core and data used during execution of the instructions. The cache is directly coupled with the respective CPU core and may immediately provide instructions and data directly to the respective CPU core. In some embodiments, the CPU core also includes a CPU cache shared by multiple CPU cores of the CPU 404. The CPU caches data used during execution of instructions stored in the CPU core. The CPU cache feeds its data to a cache 352 that is directly coupled to the CPU core.
Similarly, in some embodiments, each GPU 406 includes multiple GPU cores. Each GPU core has a cache that stores both instructions for execution by the corresponding GPU core and data used during execution of the instructions. The cache is directly coupled with the respective GPU core and may immediately provide instructions and data directly to the respective GPU core. In some embodiments, the GPU core also includes a GPU cache shared by multiple GPU cores of the GPU 406. The GPU cache stores data used during execution of instructions stored in the GPU core. The GPU cache feeds its data to a cache that is directly coupled to the GPU core. To render the game content of the game title, writing and reading in the memory system 300 is managed page by page (i.e., by an array of image pixels corresponding to an image frame of the game content). The page-sized reads are cached in the local GPU memory hierarchy (L1-L3 cache).
Server system, client device and media device in online game environment
Fig. 6A is a block diagram illustrating server system 114 according to some embodiments, and fig. 6B is a block diagram illustrating server-side game module 426 executing at game server 118 of server system 114 according to some embodiments. FIG. 6C is a block diagram illustrating data stored in server system 114, according to some embodiments. Server system 114 typically includes one or more processing units (e.g., CPU 602, GPU 406, and encoder 408), one or more network interfaces 604, memory 606, and one or more communication buses 608 (sometimes referred to as a chipset) for interconnecting these components. The server system 114 may optionally include one or more input devices 610 that facilitate user input, such as a keyboard, mouse, voice command input unit or microphone, touch screen display, touch sensitive input pad, gesture capture camera, or other input buttons or controls. Further, server system 114 may use microphone and voice recognition or camera and gesture recognition to supplement or replace the keyboard. In some embodiments, server system 114 optionally includes one or more cameras, scanners, or light sensor units for capturing images of, for example, a graphical series of codes printed on an electronic device. Server system 114 may also include one or more output devices 612 that enable presentation of a user interface and display content, including one or more speakers and/or one or more visual displays.
an operating system 616, including processes that handle various underlying system services and perform hardware-related tasks;
a network communication module 618 for connecting the server system 114 (e.g., game server 118) to other devices (e.g., other servers in the server system 114, client devices 102, and media devices 106) via one or more network interfaces 604 (wired or wireless) and one or more communication networks 112 (such as the internet, other wide area networks, local area networks, metropolitan area networks, etc.);
a user interface module 620 for presenting information (e.g., a graphical user interface for presenting applications, widgets, websites and web pages thereof, and/or games, audio and/or video content, text, etc.) at the client devices 102 and/or 104;
media device module 622 (optional) executed to provide server-side functionality for device configuration, device control, and user account management associated with media device 106;
a location determination module 624 for determining a location or proximity of the client device 102 based on location or proximity information of any of the client device 102 and the media device 106;
a server-side game module 626 for providing server-side functionality associated with one or more game titles at one or more game servers 118, including but not limited to: setting and approving a game session via one or more game applications 628, assigning a GPU to perform a subset of the session, storing session state data and other game related data, processing game play input from client device 102, rendering game play output (e.g., a sequence of image frames) in response to the game play input, and optimizing game rendering, wherein server-side game module 626 includes at least a local profiling coordinator module 630 and a collection module 632, the local profiling coordinator module 630 for receiving game profiling instructions from profiling server 430, the collection module 632 for collecting a plurality of data samples corresponding to the game session in response to the game profiling instructions while executing the game session corresponding to the game instance;
a media streaming server module 634 to host a media streaming site at the media streaming server 120, receive concurrent supplemental media streams associated with the online game session, and provide the concurrent media streams to the client device 102 or the media device 106 for display concurrently with the online game session being executed on the game application 732 of the client device 102 (optionally, the same client device 102 or a different client device 102);
a game front-end module 636 executable at the game front-end server 402 for managing a user account associated with a client device 102 that has subscribed to a game service of one or more game titles, wherein, in some embodiments, the game front-end module 636 further comprises a game application platform 658 for providing a user interface that integrates access to a plurality of game applications 628 that execute different game titles based on different game content (including third-party game content);
a game content module 638 executable at the content server 450 for providing game content to the client device 102 and the game server 118 to initiate an online game session associated with one or more game titles and render image frames of the online game session;
a game library module 640 executable at game library server 422 for providing executable game programs (e.g., one or more of server-side game modules 626) and static data items needed to execute the executable game programs;
a pipeline optimizer module 644 executable at the pipeline optimizer server 420 for providing server-side optimization of a compilation shader for use in a graphics pipeline process for rendering image frames of an online game session associated with a game title, optionally concurrently while the server-side game module 626 renders game play output in response to game play input corresponding to the online game session;
a game profiling module 646 executable at the profiling server 430 for executing a game profiling application and providing a user interface to receive user input defining a game profiling request, issue the game profiling request to instruct the game server 118 to collect a plurality of data samples of a subset of game instances executed by the game server 118 in association with a game title, and collect the plurality of data samples from the game server 118, wherein the profiling server module 646 comprises a global profiling coordinator module 648, the global profiling coordinator module 648 being configured to perform a game profiling function in conjunction with the local profiling coordinator module 630 executed at the game server 118;
a game analysis module 650 executable at the analysis server 440 for analyzing the collected data samples and enabling the analysis results to be displayed on a user interface;
a device/network rating module 642 for rating the device and network capabilities of the client device 102, including but not limited to, rating the network bandwidth of the connection with the client device 102, and rating whether the client device 102 has the required modules or applications to play the game;
a data transfer module 644 to provide data (e.g., game controller configuration 656), software updates, etc.) to the client device 102; and
Referring to FIG. 6B, in addition to the game application 628, the local profiling coordinator module 630, and the collection module 632, the server-side game module 626 includes the following programs, modules, or a subset or superset thereof:
a GPU time sharing module 660 for assigning each processing slice of GPU 406 to a respective subset of the online game sessions and dynamically sharing the duty cycle of the processing slice among two or more game sessions according to the real-time data processing requirements of the first and second game sessions (i.e., executing the two or more game sessions concurrently and in parallel during the duty cycle);
a multi-stream generation module 662 for encoding both the low-latency stream and the normal-latency stream within a time interval corresponding to a predefined frame rate;
a parallel encoding module 664 for allocating the encoder cores of the encoder 408 to process image tiles of an image and enabling the encoder cores to immediately encode each individual block in the respective image tile when its data and its corresponding boundary information are available;
a dynamic frame generation module 666 for: dynamically generating a variable number of frames in response to user commands during an online gaming session based on a predefined frame rate and corresponding communication and processing latencies associated with the user commands;
a resource assignment module 668 to determine a target quality parameter for the online game session based on the corresponding device and connection capabilities, associate resources of the server system 114 (e.g., virtual machines therein) with the online game session based on the target quality parameter, and manage the online game session according to a resource profile of the associated resources.
An intent determination module 670 for comparing user input delivery times (e.g., between the client device 102 and the server system 114) and display delivery times (e.g., between the media device 106 and the server system 114) and determining user intent behind a particular input by matching input events to corresponding trigger frames;
a latency adjustment module 672 to determine a plurality of intermediate frames for insertion by the GPU 406 between (i) the current frame being processed when the user input is received and (ii) a response frame showing the result of the received input;
a resource adjustment module 674 for determining a latency tolerance for a particular online gaming session;
a simulation module 676 for simulating game play input (e.g., based on in-game behavior of a particular player) during a network disruption between the player's game controller 102 and the server system 114;
an interruption detection module 678 to detect an interruption in, or of, a network connection between server system 114 and game controller 102 and/or media device 106 that supports a game session between or involving one or more of the above-mentioned components; and
a state reconciliation module 680 to process the resumed input after the network connection between the server system 114 and the game controller 102 is restored and reconcile the game state affected by the simulation with the game state intended by the user.
Referring to fig. 6C, in some embodiments, the server system data 656 includes the following data items, or a subset or superset thereof:
location/proximity data 686 including information associated with the presence, proximity, or location of any of the client device 102 and the media device 106;
static data items 692 to store data shared by multiple online gaming sessions, wherein static data items 692 include, but are not limited to, texture objects, vertex data buffer objects, constant data objects, and sequences of compiled shaders optimized to meet different performance criteria based on usage statistics 698;
a compiled shader sequence 694 to store shaders that have been compiled and are ready for execution in a graphics pipeline process, wherein the sequence of compiled shaders includes, but is not limited to, a default compiled shader sequence to render game content in a default manner and a plurality of compiled shader sequences that are optimized based on usage statistics 698 to meet different performance criteria 696;
a game instance track 698 stored for each of a plurality of game instances corresponding to one or more game titles executed by game server 118, wherein game instance track 698 comprises a series of ordered game events for which data samples are recorded; and
In some embodiments, server system 114 also includes one or more memory controllers 416 coupled to the CPU, GPU, active dynamic memory 410, and static memory pool 414 using one or more communication buses 608. The one or more memory controllers 416 optionally include a first memory controller 416A configured to manage the main dynamic memory 410 and a second memory controller 416B configured to manage the static memory pool 414. As described above, a subset of the elements 616-699 (e.g., the game state data 508 and the system performance data 522) are stored in the main dynamic memory 410 and are accessible via the first memory controller 416A. Static data items 692 are stored in the static memory pool 414 and are accessible via the second memory controller 416B.
Each of the above-identified elements may be stored in one or more of the previously mentioned memory devices and correspond to a set of instructions for performing the functions described above. The above-identified modules or programs (i.e., sets of instructions) need not be implemented as separate software programs, procedures, modules, or data structures, and thus various subsets of these modules may be combined or rearranged in various implementations. In some implementations, memory 606 optionally stores a subset of the modules and data structures identified above. Further, memory 606 optionally stores additional modules and data structures not described above.
FIG. 7 is a block diagram illustrating an example client device 102 or 104 of the gaming environment 100, according to some embodiments. Examples of client devices 102 or 104 include, but are not limited to, mobile phones, tablet computers, laptop computers, desktop computers, wearable personal devices, and dedicated game controller devices. The client device 102 or 104 includes one or more processing units (CPUs) 702, one or more network interfaces 704, memory 706, and one or more communication buses 708 (sometimes referred to as chipsets) for interconnecting these components. The client device 102 or 104 includes one or more input devices 710 that facilitate user input, such as a keyboard, mouse, voice command input unit or microphone, touch screen display, touch sensitive tablet, gesture capture camera, or other input buttons or controls. Further, the client device 102 or 104 uses microphone and voice recognition or camera and gesture recognition to supplement or replace the keyboard. In some implementations, the client device 102 or 104 includes one or more cameras, scanners, or light sensor units for capturing images of, for example, a graphical series of codes printed on an electronic device. Client device 102 or 104 also includes one or more output devices 712 that enable presentation of a user interface and display content, including one or more speakers and/or one or more visual displays. Optionally, the client device 102 or 104 includes a location detection device, such as a GPS (global positioning satellite) or other geographic location receiver, for determining the location of the client device 102 or 104. Client devices 102 or 104 may also include a proximity detection unit 714, such as an IR sensor, for determining the proximity of media device 106 and/or another client device. Client device 102 may also include one or more sensors 760 (e.g., accelerometers, gyroscopes, etc.) for sensing motion, orientation, and other parameters of client device 102 or 104 that may be used as input.
The memory 706 includes high-speed random access memory, such as DRAM, SRAM, DDR RAM, or other random access solid state memory devices; optionally, non-volatile memory is included, such as one or more magnetic disk storage devices, one or more optical disk storage devices, one or more flash memory devices, or one or more other non-volatile solid-state storage devices. The memory 706 optionally includes one or more storage devices remote from the one or more processing units 702. The memory 706 or non-volatile memory within the memory 706 includes non-transitory computer readable storage media. In some implementations, the memory 706 or a non-transitory computer-readable storage medium of the memory 706 stores the following programs, modules, and data structures, or a subset or superset thereof:
an operating system 716, including processes that handle various basic system services and perform hardware-related tasks;
a network communication module 718 for connecting client devices 102 or 104 to other devices (e.g., server system 114, media devices 106, and other client devices 102 or 104) via one or more network interfaces 704 (wired or wireless) and a local network 110 and one or more communication networks 112 (such as the internet, other wide area networks, local area networks, metropolitan area networks, etc.);
a user interface module 720 for presenting information (e.g., a graphical user interface for presenting applications, widgets, websites and web pages thereof, and/or games, audio and/or video content, text, etc.) at the client device 102 via one or more output devices 712 (e.g., displays, speakers, etc.);
an input processing module 722 for detecting one or more user inputs or interactions from one of the one or more input devices 710 and interpreting the detected inputs or interactions;
a Web browser module 724 for navigating, requesting (e.g., via HTTP), and displaying websites and their Web pages, including a Web interface for joining session 116;
a media device application 726 for interacting with the media device 106, including logging into a user account associated with the media device 106, controlling the media device 106 (if associated with the user account), and editing and viewing settings and data associated with the media device 106;
a client-side game module 728 for providing client-side functionality associated with one or more game titles in the client device 102, including but not limited to: setting up a gaming session, storing session state data and other game related data locally, receiving game play input from input device 710, and providing game play output (e.g., a sequence of image frames) in response to the game play input, wherein in some embodiments, client-side gaming module 728 further includes a game controller application 730 that configures the client device as a game controller device, one or more game applications 732 corresponding to one or more game titles, and a third party gaming interface 734 that supports game play based on content provided by a game content provider independent of the third party gaming platform;
a game profiling and analysis application 736 implemented at the client device 104 of an administrator or game developer for receiving a game profiling or analysis request, sending the game profiling request to the profiling server 430, receiving the analysis results from the analysis server 440, and presenting the results on the client device 104 while executing one or more game titles on the client device 102.
A data download module 738 for downloading data from the server system 114 and other content hosts and providers (e.g., game controller configuration 748, client-side game module 728 and other applications, updates to modules and applications, and data in memory 706);
client data 740, storing at least data related to the gaming application 732 and other applications/modules, including:
a media device setting 744 for storing information associated with the user account of the media device application 726, including one or more of account access information and device setting information (e.g., service layer, device model, storage capacity, processing capabilities, communication capabilities, etc.);
a game application setting 746 for storing information associated with a user account of the game application, including one or more of account access information, in-game user preferences, game play history data, and information about other players;
a game controller configuration 748 for storing information associated with the configuration of the client-side game module 728 for the game application 732 (e.g., the received configuration from the game controller configuration 688 of fig. 6);
location data 750 including information associated with the presence, proximity, or location of any of the client device 102 and the media device 106; and
local game session data 752, including information associated with online game sessions performed on the client device 102 in association with different game titles, e.g., latest state information, texture pages, vertex pages, constant pages, and frame data for one or more image frames associated with each online game session.
In some embodiments not shown in fig. 7, the client-side gaming module 728 includes a command module to transmit messages (e.g., setup commands) between the client device 102 and the media device 106 in the menu mode, a streaming module to transmit game play commands between the client device 102 and the server system 114 (e.g., to the media streaming server 120) in the game play mode, and a controller module to provide a game play input interface to the gaming application. In some implementations, the client-side game module 728 is part of the media device application 726 or another application (e.g., a sub-module) in the memory 706. In some implementations, the client-side gaming module 728 is part of the operating system 716. In some implementations, the client-side gaming module 728 is a different module or application.
In some implementations of the client device 102, the media device applications 726 (and corresponding media device settings 744) and the gaming applications 732 (and corresponding gaming application settings 746) are optional. Depending on the particular game the client device 102 is invited to join, the media device application 726 and the game application 732 are not necessary to play the game. If game play requires any of these applications (e.g., the game uses a client-side game module within the media device application 726), and if the application is not in the memory 706, the client device may be prompted to download the application.
In some implementations, the client device 102 is a dedicated game controller device. The game controller device includes one or more input devices 710 that facilitate user input, such as a microphone (or voice command input unit), buttons, directional keys, and a joystick. In some implementations, the game controller 102 also includes gesture recognition features. The game controller device 102 also includes one or more output devices, including speakers, LEDs, and/or optionally a display, that facilitate audio output and/or visual output.
Each of the above-identified elements may be stored in one or more of the previously mentioned memory devices and correspond to a set of instructions for performing the functions described above. The above-identified modules or programs (i.e., sets of instructions) need not be implemented as separate software programs, procedures, modules, or data structures, and thus, various subsets of these modules may be combined or rearranged in various embodiments. In some embodiments, memory 706 optionally stores a subset of the modules and data structures identified above. Further, memory 706 optionally stores additional modules and data structures not described above.
FIG. 8 is a block diagram illustrating an example media device 106 of gaming environment 100, according to some embodiments. Media device 106 includes one or more processing units (CPUs) 802, one or more network interfaces 804, memory 806, and one or more communication buses 808 (sometimes referred to as a chipset) for interconnecting these components. Optionally, the media device 106 includes a proximity/location detection unit 810, such as an IR sensor, for determining the proximity of the client device 102.
Further, in some implementations, the media device 106 includes a radio that supports one or more communication networks and allows the media device 106 to communicate with other devices (e.g., with the client device 102). In some embodiments, the radio is capable of data communication using any of a variety of custom or standard wireless protocols (e.g., IEEE802.15.4, Wi-Fi, ZigBee, 6LoWPAN, Thread, Z-Wave, Bluetooth Smart, ISA100.5A, WirelessHART, Miwi, Whispenet, Bluetooth Low energy, etc.), custom or standard wired protocols (e.g., Ethernet, HomePlug, etc.), or any other suitable communication protocol, including communication protocols not yet developed as of the date of filing of this document.
The memory 806 includes high-speed random access memory, such as DRAM, SRAM, DDR RAM, or other random access solid state memory devices; optionally, non-volatile memory is included, such as one or more magnetic disk storage devices, one or more optical disk storage devices, one or more flash memory devices, or one or more other non-volatile solid-state storage devices. Memory 806 optionally includes one or more storage devices remote from the one or more processing units 802. The memory 806 or non-volatile memory within the memory 806 includes non-transitory computer-readable storage media. In some implementations, memory 806 or a non-transitory computer-readable storage medium of memory 806 stores the following programs, modules, and data structures, or a subset or superset thereof:
an operating system 816, including processes that handle various basic system services and perform hardware-related tasks;
a network communication module 818 to connect the media device 106 to other computers or systems (e.g., server system 114, and client device 102) via one or more network interfaces 804 (wired or wireless) and one or more networks 112 (such as the internet, other wide area networks, local area networks, metropolitan area networks, cable television systems, satellite television systems, IPTV systems, etc.);
a content decoding module 820 for decoding content signals received from one or more content sources (e.g., server system 114 providing game output from game session 116) and outputting content in the decoded signals to output device 108 coupled to media device 106, wherein, in some embodiments, the output content includes two or more media streams 130 and 132 intended for game play and commentary, respectively;
a proximity determination module 822 for determining the proximity of the client device 102 based on proximity-related information detected by the proximity detection unit 810 or provided by the server system 114;
a media display module 824 for controlling the display of media; and
a game application 826 for controlling the lifecycle of all game components on the media device 106, receiving messages (e.g., commands) from the game controller 102, and relaying game controller input to the server system 114;
a game user interface module 828 for accessing user content (e.g., profile, avatar, purchased game, game directory, friends, messaging) and optimized images for display and receiving input from the client device 102 during game play;
an interface control module 830 for interfacing communications between the game application 826 and the game user interface module 828, and for initiating a session pairing request with the server system 114 during game launch;
a server interface module 832 for communicating with the server system 114 and the authentication system (if any), including:
an authentication sub-module 834 for communicating with an authentication system to authenticate a linked user of the game controller;
an omicron session submodule 836 for receiving game session information (e.g., session ID, game server configuration IP address, port, etc.) from the server system 114 and invoking callbacks on the interface control module 830 that provides this information; and
an omicron streaming sub-module 838 for receiving and displaying in real time during game play the game stream transmitted from the media streaming server 120 of the server system 114;
local game session data 846 including information associated with online game sessions performed on the client device 600 in association with different game titles, e.g., latest state information, texture pages, vertex pages, constant pages, and frame data for one or more image frames associated with each online game session.
Each of the above-identified elements may be stored in one or more of the previously mentioned memory devices and correspond to a set of instructions for performing the functions described above. The above-identified modules or programs (i.e., sets of instructions) need not be implemented as separate software programs, procedures, modules, or data structures, and thus, various subsets of these modules may be combined or rearranged in various embodiments. In some embodiments, memory 806 optionally stores a subset of the modules and data structures identified above. Further, memory 806 may optionally store additional modules and data structures not described above.
Distributed real-time game parsing and analysis
FIG. 9A is an example flow diagram illustrating a process 900 for performing an online gaming session on server system 114 according to some embodiments. FIG. 9B is an example flow diagram illustrating a real-time game profiling and analysis process 950 implemented collectively by one or more game servers 118, profiling server 430, and/or analysis server 440 in server system 114 according to some embodiments. Game server 118 includes one or more CPUs 404 and a plurality of GPUs 406, and employs a multi-level storage scheme (e.g., fig. 5), and is configured to host one or more game titles for users of client devices 102. The CPU receives (422) a plurality of session requests to initiate a plurality of online gaming sessions under a game title selected from a plurality of client devices 102. Each client device 102 executes a real-time user-interactive game application corresponding to the game title and sends (902) a respective session request from the game application of the respective client device 102. The respective session request includes the user information of the requesting client device 102. Upon receiving the user information for the respective client device 102, the CPU404 authorizes (904) the corresponding online gaming session based on the user information and allocates (906) one of the GPUs 406 to execute the corresponding online gaming session. In some implementations, two or more of the plurality of online gaming sessions are assigned to one of the GPUs 406. In other words, the two or more online gaming sessions must share the computing and memory resources of one of the GPUs based on Time Division Multiplexing (TDM), spatial multiplexing, or a combination thereof. More details of GPU allocation in gaming Content Rendering are explained in U.S. provisional patent application No.62/646,824 entitled "Methods and systems for Rendering and Encoding Content for Online Interactive gaming sessions", filed on 3, 22, 2018, which is incorporated herein by reference in its entirety.
In response to each session request, CPU404 copies 908 instructions of the game title's executable game program from main dynamic memory 410 to the CPU 404's local cache and executes the instructions one after the other. Likewise, if instructed by the CPU404, the respective GPU assigned to execute the respective online game session loads (908) the relevant game rendering instructions in the executable game program into its local cache, and executes the game rendering instructions one after another.
In some implementations, for example, each of the plurality of online gaming sessions is continually refreshed at a rate of 60 frames per second (fps). In some embodiments, each of the plurality of online gaming sessions is refreshed in response to user action input by the respective session itself or a related session. For example, when a subset of the online gaming sessions are in the same game scene of the game title, they are related and synchronized, and the game content transmitted to each of the subset of online gaming sessions is updated at least when any one of the subset of online gaming sessions enters a user action.
Specifically, for a particular online gaming session, CPU404 receives (910) user input entered via a gaming application of a first client device participating in the online gaming session or another different gaming session that shares the same gaming scene with the online gaming session. In response, CPU404 executes (912) instructions of the executable game program corresponding to the game title to instruct (918) GPU 406, assigned to perform the online game session, to render a sequence of image frames according to the user input. During execution of the online gaming session, dynamic data items associated with the online gaming session are stored in the main dynamic memory 410 or retrieved from the main dynamic memory 410 (914). The assigned GPU 406 then executes (920) the game rendering instructions received from the CPU404 to render image frames of the online game session based on the user input. The image frames rendered by the GPU 406 are encoded by the encoder 408 and streamed 926 to the client device 102 performing the online gaming session. In some implementations, image frames rendered by GPU 406 (e.g., image frames of normal latency streams intended for onlookers to comment) are streamed 928 to client device 102 via media streaming server 120.
While game server 118 is concurrently executing an online game session that shares the same game scene of the game title, profiling server 430 also instructs game server 118 to collect data samples related to the online game session. Some or all of the dynamic data items stored in the main dynamic memory 410 in association with the online game session have been stored in response to a game profiling request issued by the profiling server 430. That is, during execution of the online gaming session, game state data associated with the online gaming session is stored in or retrieved from the main dynamic memory 410 (930A), and system performance data associated with the online gaming session is stored in or retrieved from the main dynamic memory 410 (930B). More specifically, the game server executes multiple game instances of the game title in parallel, and each of the multiple game instances includes one or more synchronized game sessions. While game server 118 is executing multiple game instances, profiling server 430 receives a game profiling request (932) for collecting multiple data samples for each game instance in the set of game instances. In some implementations, the administrator or game developer's client device 104 executes (934) the game profiling application 736 and the profiling server 430 enables a user interface to be displayed on the game profiling application 736 to receive user input defining a game profiling request for a subset of game instances corresponding to a game title. Profiling server 430 includes a global profiling coordinator module 648 that generates game profiling instructions based on the received game profiling request and sends 936 the game profiling instructions to game server 118 to collect multiple data samples in real-time while game server 118 executes multiple game instances.
The game server 118 includes a local profiling coordinator module 630 and a collection module 632. Upon receiving the game profiling indication, the local profiling coordinator module 630 instructs (938) the collection module 632 to collect the requested data sample while the game application 628 executes the corresponding game instance. The local profiling coordinator 630 then periodically sends 940 the collected data samples to the profiling server 430 according to a schedule or in response to a query. Locally, the collected data samples are stored as part of dynamic data items that are dynamically stored in the main dynamic memory 410 in association with the online game session before being sent to the profiling server 430. The collected data samples include at least game state data 508 and system performance data 522 associated with online game sessions corresponding to each game instance in the set of game instances identified in the game profiling request. In some implementations, profiling server 430 receives the collected data samples from game server 118 and creates a game profile based on these data samples collected for each game instance in the identified set of game instances.
In some embodiments, after receiving the data samples collected by game server 118, profiling server 430 performs its own analysis functions on the collected data samples. Alternatively, in some embodiments, profiling server 430 sends (944) the collected data samples to an analysis server 440 that is different from profiling server 430, and analysis server 440 is configured to perform (946) analysis functions on the collected data and provide (948) the analysis results to the client device 104 of the administrator or game developer. Examples of analysis functions include, but are not limited to: hotspot analysis, processor profiling, game data visualization, and alert generation. The administrator or game developer's client device 104 executes the game analysis application on the profiling server 430 or analysis server 440, which implements a user interface of the game analysis application on the client device for visualizing the collected data samples, receiving (952) user input of a game analysis request, and/or presenting analysis results in response to the game analysis request. Alternatively, the game profiling application and the game analysis application are integrated into a single application (e.g., game profiling and analysis application 736 in FIG. 7) or executed as two applications independently of each other. If the game profiling application and the game analysis application are independent of each other, they may optionally run on the same client device 104 or on two different client devices 104. That is, the game parsing instructions and the game analysis requests are optionally sent from the same application running on the same client device 104 or from two different applications running on the same client device 104 or two different client devices 104.
In some implementations, the plurality of data samples collected by the collection module 632 of the game server 118 are stored locally until a query is received from the analysis server 440 (e.g., in a game analysis request). In response to the query, a subset of the plurality of data samples, or all thereof, is sent (944') to the analysis server 440 for further analysis.
Fig. 10A-10C are example Graphical User Interfaces (GUIs) 1000 implemented by a game profiling and analysis application 736 executing on a client device 104, according to some embodiments. The game profiling and analysis application 736 is a combination of a game profiling application and a game analysis application. Alternatively, in some embodiments, the game profiling application and the game analysis application are executed as two separate applications. The game profiling and analysis application 736 performs both the profiling and analysis functions available in the game profiling application and the game analysis application. Optionally, the GUI1000 of the game profiling and analysis application 736 has a plurality of tabs 1004 and 1014, including a first subset of tabs (e.g., the profiling request tab 1004) and a second subset of tabs (e.g., the analysis tab 1006 and 1014), which correspond to the game profiling function and the game analysis function, respectively. The game profiling and analysis application 736 is configured to receive user input defining a game profiling request on a first subset of tabs, generate a game profiling request for a data sample of a subset of game instances, and send the game profiling request to the profiling server 430. The game parsing and analysis application 736 is further configured to receive user input defining a game analysis request on the second subset of tabs, generate a game analysis request, and present an analysis result to a user (e.g., a game administrator or developer) of the game analysis application in response to the game analysis request. Note that in some embodiments, the GUI1000 of the game profiling and analysis application 736 has a single page or multiple pages for both game data collection and analysis, and each page is activated using a mechanism other than tab selection.
The profiling server 430 and the analysis server 440 are configured to perform game profiling and analysis functions associated with the game profiling and analysis application 736. Accordingly, the GUI1000 of the game profiling and analysis application 736 is implemented by the server-side game profiling module 646 and the server-side game analysis module 650 provided by the profiling server 430 and the analysis server 440. It is noted that in some embodiments, in order to preserve the computing, storage, and communication capabilities for executing one or more game titles and rendering image frames for game sessions associated with the game titles, server-side game profiling module 646 and server-side game analysis module 650 are not implemented on game server 118.
Referring to fig. 10A, the GUI1000 of the game profiling and analysis application 736 is configured to receive user input defining a game profiling request on a profiling request tab 1004. Optionally, the parsing request tab 1004 of the GUI1000 includes: a first field 1016 for selecting a game title from a plurality of game titles executed by game server 118; a second field 1018 for identifying a subset of game instances of the selected game title; and a third field 1020 for defining a sampling scheme for collecting data samples for the identified subset of game instances. After the game title is specified in the first field 1016, the profiling server 310 identifies a plurality of game instances running on the game title and allows the user to define a subset of game instances for data sample collection on the GUI 1000. In some embodiments, the subset of game instances is defined by: a user-defined percentage 1018a (e.g., 20%) of multiple game instances running on a game title, a user-defined number 1018b (e.g., 5), or a user-defined instance spacing 1018c (e.g., one out of every five). In one example, a user-defined percentage or number of game instances is randomly selected from a plurality of game instances. In some embodiments, a subset of game instances is defined in field 1018d to include all of the plurality of game instances running under the game title. Alternatively, in some embodiments, a subset of game instances is defined according to a characteristic 1018e, which characteristic 1018e is optionally selected from a predetermined specific list (e.g., top five game instances with over 100 players, 50% of players reaching high-level, running test game scenes or features, and most power-hungry).
In some implementations, the sampling scheme used to collect data samples for the identified subset of game instances is defined as a default scheme 1020a, e.g., periodic sampling at a sampling frequency of one sample per minute. Note that a data sample includes at least a set of game state data and system performance data captured at a particular time. In some embodiments, the sampling scheme is periodic sampling at a user-defined sampling rate, and GUI1000 includes a field 1020b configured to receive user input of the sampling rate. In some embodiments, the sampling plan is a timed sampling implemented during a user-defined time window and/or according to a user-defined schedule, and GUI1000 includes fields 1020c and 1020d configured to receive user input of the time window and schedule. Alternatively, in some cases, the target profile is of interest to the user because the performance of the corresponding game title is in a bottleneck or desired under the target profile. GUI1000 includes a target profile list 1020e that prompts a user to select one or more target profiles from which to collect a data sample when the one or more target profiles occur for a selected subset of game instances corresponding to a game title. GUI1000 optionally includes a field (not shown) for defining a custom condition into a list of target profiling conditions. In a particular example relating to a tetris game, the list of target parsing conditions includes at least an occurrence of an L-block, an occurrence of a T-block, a dropped frame, and a CPU utilization greater than 95%.
After the game title, subset of instances, and sampling plan are defined from the user input in fields 1016-1020, the game profiling and analysis application 736 sends a game profiling request generated based on the game title, subset of instances, and sampling plan to the profiling server 430. Specifically, the game profiling and analysis application includes user availability (affordance)1022, and in response to receiving a user action on user availability 1022, a game profiling request is generated and sent to profiling server 430. In this example, the user defines a game profiling request to collect data samples for all game instances that experience a target profiling condition (i.e., when an L chunk falls) related to an L chunk in a tetris game title. When the user of the game profiling and analysis application 736 clicks on the user availability 1022, the particular game profiling request is generated and sent to the profiling server 430 based on the user input in field 1016 and 1020.
The game profiling request includes information regarding one or more types of the plurality of data samples that profiling server 430 will collect from game server 118. In some embodiments, information relating to the type of the plurality of data samples is predefined and includes, for example, all data in a CPU performance counter, a GPU performance counter, a stack trace, and an architecture counter. In some embodiments not shown here, GUI1000 includes a field configured to receive user input defining information about the type of the plurality of data samples. The user input may select a subset or all of the CPU performance counters, GPU performance counters, stack traces, and architecture counters.
Referring to fig. 10B, the GUI1000 of the game parsing and analysis application 736 is configured to receive user input defining a game analysis request on the analysis tab 1006 and present the analysis results to a user of the corresponding game analysis application 1002 in response to the game analysis request on the analysis tab 1006. In some embodiments, not shown, GUI1000 includes two separate tabs for defining game analysis requests and presenting analysis results, respectively. At the time of loading analysis tab 1006, profiling server 430 has collected a number of data samples from game server 118. In some cases, information for a plurality of data samples is displayed on the analysis tab 1006 to allow a user to select a subset of the data samples for visualization or analysis. Analysis server 440 enables GUI1000 to directly visualize multiple data samples collected by profiling server 430. In some cases, after analyzing the information for the plurality of data samples, the analysis results are visualized on the analysis tab 1006 and the user is prompted to select one or more analysis results from the plurality of analysis results for visualization and further analysis. Rather, in the background, the analysis server 440 receives game analysis requests from the client device, remotely analyzes a plurality of data samples in the background, and sends the analysis results to the client device for display on the GUI 1000. In particular, analysis server 440 is configured to perform hotspot analysis of the processor of game server 118, to parse the performance of the processor, to parse a plurality of game instances, and to one or more synchronized game sessions corresponding to each game instance.
The profiling server 430 stores data samples collected for different game titles, instances and sessions in a game profiling database. The game analysis request identifies one or more of a game title, a game instance, a game session, and a subset of the plurality of data samples, and extracts the subset of the plurality of data samples associated with the game title, instance, and/or session from the game profiling database for visualization or analysis. GUI1000 includes a title field 1042, an instance field 1044, and a session field 1046 to receive user selections or inputs of game titles, instances, and sessions, respectively. In some cases, the instance domain 1044 and the session domain 1046 are left blank when the overall analysis results are presented and compared for the subset of instances for which data samples were collected. In some cases, when the conventional analysis results are presented and compared for the online game session corresponding to the instance in the instance domain, the instance domain 1044 is populated and the session domain 1046 is left blank. In addition, GUI1000 includes a list of data samples 1048, e.g., CPU idle, GPU resource assignments, PCI exchange rates, OS response times, memory access rates, frame loss rates, and average game latencies. A subset of the data samples 1048 may be selected for visualization on GUI 1000. The game profiling and analysis application includes user availability 1050 and, in response to receiving a user action on user availability 1050, generates and sends a game analysis request to analysis server 430. In this example, the user defines game analysis requests to visualize GPU resource assignments and average game latencies, temporal changes in L-block rate, and temporal changes in frame loss rate corresponding to a subset of instances whose data samples were collected under the tetris game title. When the user of the game profiling and analysis application 736 clicks on the user availability 1050, the particular game analysis request is generated and sent to the analysis server 430 based on the user input in the field 1042 and 1048.
Alternatively, in some implementations, the plurality of data samples collected by the collection module 632 of the game server 118 are stored locally until the game server 118 receives a query (e.g., in a game analysis request) directly or indirectly from the analysis server 440. That is, only after a user action on the user availability 1050, a subset or all of the plurality of data samples are obtained from the game server according to the selection in the field 1042 and 1048 and sent to the analysis server 440 for further processing.
A plurality of data samples or analysis results are presented on the GUI in one of a time graph, an instance graph, or a session graph. From the time map, a plurality of data samples or analysis results are depicted in the time domain. For example, the frame loss rate is depicted in the time domain in time graph 1052, and the L block rate (percentage of sessions running for L blocks) is depicted in the time domain in time graph 1054. According to an example graph, a plurality of data samples or analysis results are depicted for an example subset of which a plurality of data samples are collected. For example, the average game latency is obtained and depicted in example graph 1056 for a selected subset of instances of the tetris game, and the GPU resource assignments are depicted in example graph 1058 for the subset of instances. From the session graph, one game instance in the set of game instances is selected, for example in field 1048, and a plurality of data samples or analysis results are depicted for all sessions of the selected one game instance in the subset of game instances.
Referring to fig. 10C, the GUI1000 of the game parsing and analysis application 736 visualizes a set of data samples (e.g., GPU resource assignments, L-block rate, frame loss rate, and game latency) for a particular game instance (instance #22) in the time domain. The set of data samples being included at time t1And t2Two data samples captured at two different times. Each data sample including a time t corresponding thereto1Or t2Corresponding GPU resource assignment, L-block rate, frame loss rate, and game latency. In some embodiments, the analysis server 440 receives the set of data samples from the profiling server 430 and compares each data sample to a respective threshold level. Based on the comparison, analysis server 440 identifies an anomalous profile event (e.g., a frame loss rate greater than a threshold of 50%) and generates an alert message indicating that the anomalous profile event occurred. An alert message 1062 is sent to the client device and presented on the GUI1000 to alert the user of the client device of the anomalous profile event.
Alternatively, in some embodiments, the analysis server 440 receives the set of data samples from the profiling server 430 and compares the two data samples captured at times t1 and t 2. Based on the comparison, analysis server 440 identifies an anomalous profile event (e.g., a frame loss rate increased by 50%) and generates an indication that an anomalous profile occurredAlert messages for gear events. An alert message 1062 is sent to the client device 104 and presented on the GUI1000 to alert the user of the client device 104 of the anomalous profile event. In this particular example, based on the time t1And t2The game state data of the corresponding two data samples identify the frame loss rate increase. A processor error is determined (e.g., GPU resource assignment is decreased by greater than 50%) based on system performance data of two data samples corresponding to the online game session of the corresponding game instance. The frame loss rate increase is associated with processor errors. Thus, it is determined that the root cause of the anomalous profile event is a processor error.
In another example, not shown, based on game state data of two data samples, a frame loss rate and a game action rate for a particular game action are identified at time t2And the frame loss rate increase is associated with the particular game action and is therefore likely to be caused by the particular game action. For example, in a tetris game, the frame loss rate increase is determined to be caused by L chunks because the corresponding L chunk rate is very high (e.g., the percentage of sessions running for L chunks exceeds the chunk rate threshold).
In some embodiments, not shown, the analysis server 440 compares one of the plurality of data samples at a first time t1And at a first time t1After a second time t2A value of (e.g., a value of one of game state data and system performance data in a plurality of data samples). The analysis server 440 determines and/or visualizes a difference between values of one of the plurality of data samples at the first and second time instants. Furthermore, in some embodiments, at the first time t1Thereafter and at a second time t2Previous third time t3A game parsing request is sent to clarify profile criteria. The determined/visualized differences are thus associated with the profile criteria. In some cases, the profile criteria include a change in a type, compilation, or version of shader programs used to render one or more synchronized game sessions corresponding to respective game instances.
In some implementations, after displaying one or more of the plurality of data samples on the GUI1000, the game profiling and analysis application 736 receives user input from the GPU identifying anomalous profile events in a subset of the plurality of game instances from which the data samples were collected. For example, GUI1000 may receive user input at peak 1064 of the average latency to indicate an abnormal profile event. Further, in some embodiments, the first game profiling instruction enables periodic data sample collection, and a subset of the plurality of collected data samples is visualized in fig. 10C. An anomalous profile event (e.g., peak in average latency 1064) is identified in a plurality of data samples collected in response to a game profiling instruction that enables periodic data collection. The profiling server 430 then obtains a game profiling request that includes a target profiling condition associated with the abnormal profile event and generates a second game profiling instruction that collects a second plurality of data samples according to the target profiling condition. Optionally, the profiling server 430 automatically determines a target profiling condition based on the abnormal profile event and generates a second game profiling instruction. Optionally, GUI1000 receives a first user input in field 1020e to define a target profile condition based on the abnormal profile event and a second user input on user availability 1022 to generate the game profile request.
FIG. 11 is an example flow diagram illustrating a game parsing and analysis process 1100 according to some embodiments. According to game profiling and analysis process 1100, while game server 118 executes multiple game instances of a game title, a game profiling and analysis application executes concurrently on a game administrator or developer's client device 104 to receive (1102) user input corresponding to a first game profiling request on GUI1000 for periodically collecting data samples of a subset of game instances of the game title. A first game profile request for periodic data sampling is sent to a profile server 430 having a global profile coordinator module 648. Global profiling coordinator module 648 then generates and sends (1104) a first game profiling instruction to game server 118 for collecting a plurality of data samples for each game instance in the set of game instances concurrently at game server 118 while game server 118 is executing the plurality of game instances. In some implementations, the first game profiling instruction is received by a local profiling coordinator module 630 of the game server 118 and sent to a collection module 632 for collecting a plurality of data samples for each game instance in the set of game instances. In response to the first game profiling instruction, collection module 632 of game server 118 periodically collects a plurality of data samples for each game instance in the set of game instances. Optionally, the collected data samples are periodically sent 1106 to the profiling server 430 or the analysis server 440 according to a predefined time course or in response to a query (e.g., in a game analysis request).
In some implementations, the analysis server 440 enables the game profiling and analysis application 736 to visualize (1108) a subset of the collected data samples on the GUI 1000. An administrator or game developer identifies an anomalous profile event (1110), e.g., peak 1064 of the average latency in FIG. 10C, from the subset of data samples visualized. Alternatively, in some implementations, the analysis server 440 identifies 1112 an anomalous profile event (e.g., a frame loss rate greater than a threshold 50%) and generates 1114 an alert message indicating that the anomalous profile event occurred. An alert message is reported to the client device and presented on GUI1000 to alert the user of the client device of the anomalous profile event. In other words, analysis server 440 identifies one or more abnormal game, processor, or system states based on the plurality of data samples and associates a target profiling condition with the identified one or more game, processor, or system states. An alert message is generated to indicate that a target profiling condition has occurred and is caused by one or more game, processor or system states.
In some cases, after an anomalous profile event is identified in the plurality of data samples collected in response to the game profiling instruction that enables periodic data collection, the profiling server 430 receives (1116) a second game profiling request that includes a target profiling condition associated with the anomalous profile event and generates (1118) a second game profiling instruction that collects a second plurality of data samples according to the target profiling condition. When user input defining a target parsing condition and a subset of game instances of a game title is received on GUI1000, game parsing and analysis application 736 generates a second game parsing request. In some embodiments, the target profiling conditions comprise one or more of: frame loss, register overflow, frame rate drop, increased game latency, increased processor power consumption, increased memory occupancy, and/or changed processor utilization.
In some embodiments, the second game profiling instruction is received by a local profiling coordinator module 630 of the game server 118 and sent to the collection module 632 for collecting the second plurality of data samples for each game instance in the set of game instances according to the target profiling condition. In response to the second game profiling instruction, collection module 632 of game server 118 collects a second plurality of data samples for each game instance in the set of game instances according to the target profiling condition and periodically returns (1120) the collected data samples to profiling server 430 or analysis server 440 according to a schedule or in response to a query. Specifically, while game server 118 is executing multiple game instances, the local coordinator module of game server 118 automatically detects that a target profiling condition occurred for the first game instance and sends a command to collection module 632 to collect multiple data samples in association with the target profiling condition. A collection module 632 of game server 118 collects a second plurality of data samples corresponding to the detected target profiling condition. Each data sample of the second plurality of data samples includes at least game state data and system performance data associated with one or more synchronized game sessions corresponding to each game instance of the set of game instances.
FIG. 12 is an example track 1200 recorded for a game instance, according to some embodiments. In some embodiments, when game server 118 executes multiple game instances of a game title in parallel, game server 118 creates a game event track for each of the multiple game instances. The trajectory 1200 of game events includes a series of ordered game events that occur in one or more synchronized game sessions corresponding to respective game instances. The trace 1200 is configured to include a plurality of timestamps, each timestamp indicating a time at which game state data and system performance data was recorded. In this example, trace 1200 records two data samples, three data samples, and four data samples of three consecutive game events, including a first game event (game event 1), a second game event (game event 2), and a third game event (game event 3). Examples of game events include user actions (e.g., a jump of a game player), changes in game settings (e.g., a clothing change of a game player), and changes in shader programs used to render image frames of an online game session of a game instance.
More specifically, the first data sample 1202 corresponding to game event 1 includes: at a first time t1(timestamp 1) game state data (game state 1 and game state 2) recorded for two of the one or more synchronized online game sessions for the corresponding game instance at the time corresponding to the time. The game instance may include other online game sessions in addition to the two online game sessions corresponding to game states 1 and 2. For simplicity, the game state data for other online game sessions of the game instance is not included in FIG. 12. Likewise, a first data sample 1202 corresponding to game event 1 is included at a first time t1Two system performance data (system performance 1 and system performance 2) are recorded for two of the plurality of system characteristics. In addition to system capabilities 1 and 2, the game instance may also include other system performance data. For simplicity, other system performance data for this game instance is not included in FIG. 12. In some implementations, the first data sample 1202 is recorded when a first game event is triggered or initiated.
Further, in some embodiments, game server 118 receives game profiling instructions corresponding to a plurality of target profiling conditions (e.g., those corresponding to tags 1, 2, and 3) from profiling server 430. The game profiling instruction includes a profiling metadata call configured to: when recording a trace 1200 of a game event while executing a game instance, tags (e.g., tags 1, 2, and 3) indicating a plurality of target profile conditions are added in the trace 1200 of the game event. Examples of multiple target profiling conditions include, but are not limited to: l blocks (tag 1) occur, T blocks occur, GPU idle state (tag 2) and frame loss (tag 3). Optionally, the target profiling condition is consistent with the game event. Optionally, the target profiling condition is associated with a value of one of the game state data and the system performance data recorded for the corresponding game moment. In response to a predefined profiling metadata call, a subset of the plurality of data samples in the trace 1200 are recorded and marked when a plurality of target profiling conditions occur during execution of the game instance. For example, referring to FIG. 12, data samples 1202, 1204, and 1206 are labeled with Label 1, Label 2, and Label 3 to indicate that they are associated with three different predefined target profiling conditions.
Subsequently, in response to the query (e.g., in a game analysis request), game server 118 identifies a subset of the recorded data samples (e.g., data sample 1206) in the trace that corresponds to a subset of the target profiling conditions based on one or more corresponding tags (e.g., tag 3), and provides the subset of data samples to profiling server 430 or analysis server 440. In some implementations, in response to the query, a single data sample (e.g., data sample 1206) corresponding to a respective one of the target profile conditions in the target profile condition subset is provided to the profiling server 430 or the analysis server 440. Further, in some embodiments, in response to the query, a single data sample (e.g., data sample 1206) corresponding to each tag indicating a respective one of the subset of target profiling conditions is provided to the profiling server 430 or the analysis server 440, wherein the respective tag is preceded by a predefined first number of data samples (e.g., data sample 1208) and/or followed by a predefined second number of data samples (e.g., data sample 1210).
As described above, in some embodiments, the game state and system performance data includes a number of hardware attributes of the game server, a game version of the game title, and a kernel/driver version running on the game server. In particular, game state data corresponding to an online game session includes game context data, such as game level, weapon type, apparel for a game character, and number of objects in a corresponding game scene (e.g., number of leaves on a tree), and is optionally stored as metadata for the online game session. The game state data optionally includes one or more of game settings, such as a sliding window frame rate and a frame resolution. Further, for each game instance, the system performance data includes the following performance data: a CPU404, a GPU 406, memory (e.g., cache or registers), an operating system, one or more input/output ports, and/or a data bus assigned to execute each of one or more game sessions of a respective game instance. The performance data of the CPU404 or GPU 406 includes processor utilization and power consumption for a time corresponding to each of a plurality of data samples. In some embodiments, the system performance data is stored in at least one of a CPU performance counter, a GPU performance counter, a stack trace, and an architecture counter. In some embodiments, the system performance data also includes performance information about a PCI express switch (PCI express switch). The CPU performance counter includes a set of special purpose registers built into the CPU404 to store a count of hardware related activities within the CPU 404. The GPU performance counters include a set of special purpose registers built into the GPU 406 to store counts of hardware related activities within the GPU 406. CPU or GPU performance counters record processor utilization (e.g., 10% utilization) and power consumption. The stack trace includes a report of active stack frames at some point during the execution of the game instance.
In one example, the game metadata is interleaved with the CPU counter according to a timeline. Analysis server 440 determines, based on the game metadata and the CPU counter, that a certain number of CPUs are idle when a T block arrives, thus inferring that the CPU is in an underrun state when the scene includes a T or L block. Therefore, the GPU cannot keep up with the speed of the CPU, and therefore the GPU requires additional processing power. In another example, the analysis server 440 determines that a high-speed serial computer expansion bus (e.g., a bus conforming to the high speed of the Peripheral Component Interconnect (PCI)) is functioning properly and that a block of memory coupled to the bus has a problem (e.g., register overflow).
FIG. 13 is a flow diagram illustrating an example method 1300 for parsing and analyzing game titles at a distributed real-time game parsing system, according to some embodiments. In some implementations, the distributed real-time game profiling system includes a cloud collection coordinator located at profiling server 430 and local collection daemons located at one or more game servers 118. The cloud collection coordinator informs (1302) a local collection daemon running on each cloud-based game instance whether and/or when to collect data related to the respective game instance. The cloud collection coordinator requires the collection of data samples on a subset of, or all of, cloud-based game instances of running game titles, such as "tetris" and "Super marrio (Super Mario)". Each data sample collected by the local daemon is a state snapshot of the corresponding game instance at the corresponding time. The snapshot includes CPU state (e.g., program counters, stack traces, and architecture counters), system state (e.g., PCI express swap data), and GPU state variables. The sampling frequency used to capture the data samples depends on the tolerance (e.g., whether sample capture would result in any instantaneous card frames) and the amount of data to be collected. These data samples are then streamed (possibly batched first) to a collection server/backend (e.g., a profiling server). In some implementations, the collected data samples are also tagged with information about the corresponding game instance (e.g., hardware attributes, game version, kernel/driver version). Collected data samples may then be queried and merged across one or more game instances to form a program profile.
The captured program counter and stack trace are converted (1304) into human readable data using the symbolic data. In some embodiments, data samples are captured at the guest side, and the captured data samples are stored and tokenized at the guest side. Alternatively, in some embodiments, data samples are captured (1306) and made available on the host side, e.g., on the operating system of a host (e.g., a server system) in a virtualized system, so that the runtime consumed on the host can be checked out. The memory address on the host side is translated back to the address on the guest side in order to determine the location of the program counter for a given data sample.
While executing the game instance, the server system stores (1308) metadata of interest (e.g., game level, weapon type, clothing worn by the character) in locations in memory that are captured as part of the sample event. The server system uses the same mechanism (or data conditioning implementation) to store engine-level metrics (e.g., sliding window frame rate, instantaneous frame time, number of objects in the scene, number of leaves on the tree). In some cases, a callback may be triggered to fetch the relevant key-value pair when sampling. Optionally, callback state is captured at each data sample along with CPU, GPU and system data. Alternatively, if the corresponding sampling rate is very high and the data changes slowly, the callback state is captured at a lower sampling rate. In some implementations, game states or game metrics are captured to monitor overall game health in a formation without corresponding hardware-related data samples (e.g., CPU performance data). The game developer may then add hardware performance sampling across game instances for a particular game state to gain insight into the target problem area as it is detected.
In some embodiments, the collection coordinator daemon of the game server supports (1310) filtering the captured data samples according to (a) game instances of interest and (b) game states of interest. This pre-collection filtering avoids collecting data samples from uninteresting game instances and reduces the cost of data collection and processing. Optionally, the game state filter prevents the collection coordinator daemon from capturing undesirable samples. Optionally, undesirable samples are captured, for example to minimize the impact on game runtime, and discarded before being transmitted to the profiling server. For example, a game developer learns of chat conversations on web forums about questions about 27 th gate of version 1.2 of a game title and decides to increase the data collection rate for game instances executed on 27 th gate of version 1.2 of a game title with the aim of obtaining fine-grained resolution on the CPU profile.
In some implementations, the post-collection filtering is applied (1312) after the profiling server and/or the analysis server obtain the collected data samples. Optionally, the collected data samples are combined based on a plurality of variables. The user may explore the collected data samples and determine trends. For example, based on filtering game states and game metrics, one or more subsets of the collected data samples are understood in depth to facilitate hotspot analysis and CPU profiling.
In some implementations, a subset of the collected data samples is visualized (1314). A subset of the collected data samples is identified based on one or more sample criteria. Differences between subsets of the collected data samples are visualized in real-time. The game profiling application presents a GUI on the game administrator's client device 104, and the GUI visualizes the difference between two program profiles captured at different times. These two program profiles are optionally associated with slightly different shader compilations or game versions, which requires best-effort matching between the runtime program profiles. The two program profiles are optionally associated with two different profile criteria and, for example, compare hotspot analysis between 27 th gate and all gates to see what aspect of runtime is increased.
In some embodiments, sensitivity analysis is performed (1316) on collected data samples by a visualization tool or an uptake tube. In one example, variables are analyzed to automatically flag which game state conditions are most relevant to degradation of frame rate. In another example, game state variables are analyzed and/or visualized to identify that one of the game state variables has the greatest impact on a given function.
In some embodiments, alerts and triggers are generated (1318) based on the collected data samples. The game issuer or developer sets alerts for one or more exception profile events, allowing the game issuer or developer to proactively identify client-side faults in the game, similar to the faults they often monitor on a server system (e.g., in a multiplayer game). Alerts of one or more anomalous profile events allow a game publisher or developer to append a trajectory-based profiler to game instances of interest and/or to trigger more complete recording/streaming of data from one or more of the participating game instances.
In some implementations, the collected data samples are used to handle (1320) heterogeneous hardware. In one example, a set of android handsets are coupled to a game server through different hardware. A pre-filter is optionally used to locate a set of equivalent devices. A post-collection filter is optionally implemented to scale/adjust the collected data samples according to hardware settings.
In some implementations, the sample-based parsing is performed on a console of the game server (1322). The collected samples are stored locally in memory of the game server, filtered locally based on criteria sent from the cloud collection coordinator, de-duplicated/compressed, and then sent/packaged when the corresponding network is in a quiescent state or the corresponding game instance is complete. Optionally, the amount of data that can be collected is reduced.
In some implementations, the data sample collection is adjusted (1324), e.g., based on the power level of the client device, to minimize the impact on game play on the client device. For example, data samples are collected for a game session of a game instance based on a determination that the battery level of the mobile device exceeds 50% or that the mobile device is plugged into a power source.
In summary, sample data collection of both game state data and system performance data enables robust analysis of the resulting data samples. Such sample-based profiling and analysis occurs not only during the game development phase, but also in real-time while the corresponding game instance is being executed. Thus, a game developer can easily determine how world state, player state, and new additions/changes to corresponding game instances affect performance and the game player's experience.
14A-14E are a flow diagram illustrating another example method 1400 for parsing and analyzing game titles at a distributed real-time game parsing system, according to some embodiments. The method 1400 is optionally governed by instructions stored in a non-transitory computer-readable storage medium and executed by one or more processors of a distributed real-time game profiling system. 14A-14E may correspond to instructions stored in a computer memory or a non-transitory computer-readable storage medium (e.g., memory 606 of server system 114 in FIG. 6A). The computer-readable storage medium may include a magnetic or optical disk storage device, a solid state storage device such as flash memory, or other non-volatile memory device or devices. The instructions stored on the computer-readable storage medium may include one or more of the following: source code, assembly language code, object code, or other instruction format that is interpreted by one or more processors. Some operations in method 1100 may be combined and/or the order of some operations may be changed.
In a distributed real-time game profiling system, game server 118 executes (1402) multiple game instances of a game title in parallel (e.g., through game application 628 in fig. 6A). Each of the plurality of game instances includes (1404) one or more synchronized game sessions, and each of the one or more game sessions is executed at a game application of the client device.
In some implementations, while game server 118 is executing (1406) multiple game instances, profiling server 430 causes (1408) a GUI to be displayed on game profiling and analysis application 736 implemented at a client device 104 of an administrator or game developer. The GUI is configured to receive a game profiling request from a user, send the game profiling request to the profiling server 430, receive analysis results from the analysis server 440, and present the results on the GUI of the client device 104 of an administrator or game developer.
In response to the game profiling instruction (1414), the local coordinator module of game server 118 identifies (1416) a subset of the plurality of game instances in accordance with the game profiling instruction, and the collection module 632 of game server 118 collects (1418) a plurality of data samples associated with each game instance of the identified subset of the plurality of game instances. Each of the plurality of data samples includes at least game state data and system performance data associated with a synchronized game session corresponding to a respective game instance. In some implementations, the game profiling instructions also include target profiling conditions (e.g., dropped frames, decreased frame rates, increased game latency, increased processor power consumption, increased memory occupancy, and changes in processor utilization). In some cases, profiling server 430 receives user input defining a target profiling condition. While game server 118 is executing (1414) multiple game instances, local coordinator module 630 of game server 118 automatically detects (1422) that an objective profiling condition occurs on a subset of game instances. The plurality of data samples collected by collection module 632 of game server 118 correspond to the detected target profiling conditions.
In some implementations, while game server 118 is executing (1414) multiple game instances, game server 118 creates (1424) a trajectory of game events for each of the multiple game instances, and the trajectory of game events includes an ordered sequence of game events that occur on one or more synchronized game sessions corresponding to respective game instances. Further, in some embodiments, the game profiling request includes a predefined profiling metadata call, and in response to the predefined profiling metadata call, game server 118 records and marks (1426) a plurality of data samples in a track corresponding to each instance. Then, in response to the query, game server 118 identifies (1428) a subset of the plurality of data samples in the track based on the one or more corresponding tags. More details about recording and mark tracks are discussed above with reference to fig. 12.
After collecting the plurality of data samples, game server 118 sends (1430) a plurality of data samples associated with each game instance in the identified subset of game instances to profiling server 320. In some implementations, for a subset of the plurality of data samples, game server 118 obtains (1434) a respective difference between each data sample of the subset of the plurality of data samples and the reference data sample, and sends (1436) the respective difference to profiling server 430 to represent each data sample of the subset of the plurality of data samples. Optionally, the plurality of data samples comprises a reference data sample, and the reference data sample is sent to the profiling server 320 such that the analysis server can recover each data sample of the subset of the plurality of data samples by combining the respective difference and the reference data sample. Alternatively, in some embodiments, the plurality of data samples includes a first data sample and a second data sample, the second data sample being collected after the first data sample, and the second data sample corresponds to delta data (1438), the delta data being equal to a difference between the first data sample and the second data sample. The first data sample and delta data are sent to profiling server 430 while the second data sample is retained in game server 118.
In some embodiments, the collected multiple data samples, e.g., game version, operating system version, are tagged with additional information not included in the system performance data. These data samples can then be queried and merged across one or more game instances and a game profile is constructed. That is, in some cases, profiling server 430 is configured to create a game file based on a plurality of data samples collected for each game instance in the identified subset of the plurality of game instances.
In some implementations, the game profiling instructions support periodic data sample collection. Analysis server 440 identifies (1444) anomalous profile events in a plurality of data samples collected in response to game profiling instructions that support periodic data collection. The profiling server 430 receives (1448) a profiling request comprising an update of a target profiling condition associated with the abnormal profile event and generates (1450) a second game profiling instruction that collects a second plurality of data samples according to the target profiling condition. In particular, in some implementations, the analysis server 440 enables the display of multiple data samples on a GUI of a game profiling and analysis application implemented at the client device 104 of an administrator or game developer. Analysis server 440 receives user input from the GUI that identifies anomalous profile events in a subset of the plurality of game instances. Alternatively, in some implementations, the analysis server 440 automatically identifies anomalous profile events.
In some embodiments, the analytics server 440 compares (1452) values of data samples of the plurality of data samples at a first time and a second time after the first time, determines a difference between the values of the data samples of the plurality of data samples at the first time and the second time, and visualizes the difference between the two data samples of the plurality of data samples (1452). Further, in some cases, the game profiling instructions include profile criteria configured to take effect at a third time after the first time and before the second time, and then associate the profile criteria with the determined and visualized difference (1454). One example of profile criteria includes a change in the type, compilation, or version of shader programs used to render one or more synchronized game sessions corresponding to respective game instances.
In some implementations, game server 118 includes multiple processors. In general, the analytics server 440 is configured to perform at least one of the following operations: the method includes performing (1456) hotspot analysis of the plurality of processors based on the plurality of data samples, profiling (1458) the plurality of processors based on the plurality of data samples, and profiling (1460) the plurality of game instances and one or more synchronized game sessions corresponding to each game instance.
In some implementations, the analysis server 440 compares (1462) two of the plurality of data samples corresponding to a first time and a second time after the first time and identifies an abnormal profile event according to the comparison. An alert message is generated to indicate the occurrence of an abnormal profile event. Further, in some embodiments, the analysis server 440 identifies (1464) a frame loss rate increase based on the game state data for two of the plurality of data samples and identifies a processor error based on the system performance data for two of the plurality of data samples. The root cause of the frame loss rate increase is associated with the processor error. In addition, the analysis server 440 identifies (1466) a frame loss rate increase and a game action rate for the particular game action based on the game state data for two of the plurality of data samples and associates the frame loss rate increase with the particular game action. For example, the game title includes a tetris game. The analysis server 440 determines (1468) that the frame loss rate increase is due to L-blocks in the tetris game based on the plurality of data samples.
In some implementations, a plurality of data samples are collected in response to a game profiling instruction that includes a target profiling condition. Analysis server 440 determines that one or more game, processor, or operating system states are abnormal based on the plurality of data samples and associates a target profiling condition with the identified one or more game, processor, or operating system states. Analysis server 440 generates an alert message indicating that a target profiling condition has occurred and is caused by one or more games, processors, or operating system states.
In some embodiments of the present application, the distributed real-time game profiling system includes a plurality of servers having different response times, and the plurality of servers are assigned to game management, profiling coordination, and data analysis based on the different response times. Game server 118 corresponds to the first game delay and profiling server 430 is configured to respond to the game profiling instruction with a greater profiling delay than the first game delay. Analysis server 440 is configured to respond to game analysis requests with an analysis latency that is greater than the parsing latency. Most of the computing, storage, and communication resources of game server 118 may be reserved for latency-sensitive game rendering to provide a desired user experience with significantly low game latency to multiple remote game players.
The distributed real-time game profiling system dedicates the profiling server 430 and the analysis server 440 to performing game profiling and analysis in real-time while the game server 118 is executing one or more corresponding game titles. Once a defect is identified in a hardware unit (e.g., CPU or GPU) or in a software program (e.g., OS program or shader program), the hardware unit may be reassigned and the software program may be debugged in real time without interrupting execution of the game title. In addition, the profiling server 430 and the analysis server 440 provide a unified solution (e.g., a unified game profiling and analysis GUI) to profile and analyze the performance of different game titles, allowing game profiling and analysis to be implemented efficiently without being limited by different game titles.
It should be understood that the particular order in which the operations in fig. 14A-14E are described is merely exemplary and is not intended to indicate that the order described is the only order in which the operations may be performed. As described herein, one of ordinary skill in the art will recognize various ways to collect data from game server 118. Additionally, it should be noted that details of other processes described herein with respect to method 1300 (e.g., fig. 13) may also be applied in a similar manner to method 1400 described above with respect to fig. 14A-4E. For the sake of brevity, no further description is provided herein.
Game API platform supporting third-party content
Embodiments described in this specification aim to provide a gaming Application Programming Interface (API) and cloud platform to enable efficient, portable, low latency hosting of third party gaming content. Some embodiments dynamically allocate cloud gaming hardware resources and monitor and utilize network bandwidth available to individual end users to provide an optimal cloud gaming experience. Some embodiments provide multiple performance levels, including levels that support high performance, real-time gaming sessions with high definition video/media output/end-user streams (e.g., game play stream 130 and spectator comment stream 132). Some embodiments support different subscription models and/or are configured to provide one or more concurrent real-time game play and/or declarative media streams corresponding to little or no latency with one or more actual game streams (e.g., video streams output to client devices 102 of users participating in an online/cloud gaming session via a mobile application or browser-based program). In some implementations, particularly using the multi-stream generation module 662, concurrent game play and/or illustrative video is provided to one or more users via a media streaming site, such as YouTube, with little or no latency.
Some embodiments enable hosting of common events in conjunction with gaming competitions. For example, in connection with a hosted game-based multiplayer gaming event or tournament, in some embodiments, a cloud gaming site may broadcast or stream to specific spectators: (a) one or more concurrent auxiliary or supplemental media streams, including associated commentary tracks/streams; (b) game streams from different competitor viewpoints (points of views), highlight content streams showing game actions that are particularly compelling based on cloud server analysis and/or scoring of multiple game sessions associated with a game event; (c) one or more game viewpoint streams reflecting game play sessions of one or more active game players; and/or (d) illustrative audio tracks from one or more active game players and/or reviewers, possibly including real-time picture-in-picture (PIP) video sent by the active game players to the cloud game server system 114 along with their corresponding game play responses.
Some embodiments provide a content hosting and/or end user gaming entertainment API that enables developers of gaming content to focus on new gaming entertainment features without the need to address programming related to architectural tuning issues such as network and server performance optimization, thereby ensuring an optimal gaming experience for the end user. This also enables developers of game content to take advantage of advances in hardware and/or network resources provided by hosting organizations without the need for additional programming.
According to some embodiments, examples of third party content that may be effectively hosted in a cloud-based gaming system/environment include, but are not limited to, sports games, racing games, Role Playing Games (RPG), and First Person Shooter (FPS) games. Different instances of these games may have various different cloud hardware requirements and networks (e.g., to ensure an optimal user gaming experience-consistent with different subscription performance levels in some cases) based on different associated latency requirements and expectations, output video resolution and game server computing workload and video encoding/streaming resources, and network bandwidth.
Some embodiments provide an account management API and/or software module that monitors game play activities and subscriber related requests (e.g., requests made by end users to invite other players to a game session, upgrade their in-game tools and/or game performance), and transmits or provides associated information to third party content providers via the API to enable the content providers to track their subscriber and/or attendee settings (including but not limited to billing information, in-game credits, subscription levels, etc.). In some implementations, a content provider hosting content may provide one or more different subscription models for hosted content via the same hosting platform. In some implementations, users (e.g., subscribers to gaming services) are authorized unlimited access and game play to all games offered by content providers on hosted platforms. In some implementations, unlimited access and game play by a user (e.g., a subscriber to a game service) to one or more specific game privileges (franchises) (e.g., specific football or first-person shooter privileges) provided by a content provider on a hosting platform is authorized. In some embodiments, the subscription is for limited participation by the user — where participation may be limited based on game play time, level of hardware resources offered to the end user, or end user device type/location. The account API and module provided in some embodiments configures and monitors the gaming entertainment session and enables the content provider to track the gaming activity of the respective subscriber based on its most recent subscription information, even during active gaming entertainment.
The game API platform includes cloud features that allow the user to move around, for example, pause a first game flow of a first game session executing on a first client device 102 and restart the first game flow on a second game session of a second client device 102 to continue the first game session. The game API platform also supports multiple players on a large scale and provides a richer, more durable cloud-based world. The game API platform uses a cloud-based system to store information relating to different game sessions of the same user or different game sessions of different users.
The game API platform renders game content on a plurality of client devices 102, including but not limited to mobile phones, tablet computers, desktop computers, and televisions, for example. Optionally, the game content is dynamically adjusted to conform to the specifications of these client devices 102. In some implementations, the client device 102 has limited or no memory capability.
In addition to game content, the game API platform streams additional content to the client device, such as new tournament listings, statistics, and preview access to earlier titles, which are optionally updated periodically (e.g., updated on a daily basis, updated daily, or updated hourly). In some implementations, the additional content includes search results of an internet search or a database search.
In some implementations, the game API platform includes a live online community. A user (e.g., subscriber to a service) participates in a live event, tournament or activity on the game API platform all day. Examples of live events, tournaments, or activities include watching live gaming sessions played by other users, posting your achievements to a public domain (e.g., YouTube), and getting live reminders and instructional videos. For example, in response to a user action, the game API platform provides two or more live streams. While maintaining the first game stream on the first game session of the first client device of the game player, the game API platform also broadcasts a second live YouTube stream to one or more other client devices 102 (e.g., client devices of the subscriber). The second live stream allows the user to share the gaming experience with the audience. Optionally, the second live stream is a rendition of a screen of the first client device of the player. The game API platform may capture an audio stream of the player interpreting the first game session or a video stream of the player playing and interpreting the first game session. Alternatively, the audio stream may be played to the viewer at the same time the second live YouTube stream is played to the viewer. Optionally, the video stream may be played in an embedded window of the second live YouTube stream.
In some implementations, the method for concurrently providing media streams (e.g., optionally a first game stream and a second live YouTube stream associated with an online game session) is implemented at the server system 114. An encoder of server system 114 identifies frame data for image frames associated with an online interactive session, optionally including high-definition media content, and generates a plurality of media streams corresponding to the online interactive session. The plurality of media streams includes a low latency stream and a normal latency stream. Low latency streams have faster "response rates" and lower transmission delays than normal latency streams. The server identifies a predefined frame rate for encoding a sequence of image frames of the low latency stream. For each image frame in the first sequence of image frames of the low latency stream, the server determines a first time interval corresponding to the predefined frame rate and encodes the image frame during the first time interval. After encoding the image frame, the server determines a remaining time remaining in the first time interval. In accordance with a determination that the remaining time remaining in the first time interval satisfies a normal latency requirement associated with the normal latency stream, the server generates a subset of the second sequence of image frames during the remaining time of the first time interval. Alternatively, in accordance with a determination that the remaining time remaining in the first time interval does not meet the normal latency requirement, the server suspends generating any image frames in the second sequence of image frames during the remaining time of the first time interval.
Some embodiments provide a true-the-go game that allows users to take their most desirable game to any location or client device. For example, a user may initiate a gaming session on a mobile device while commuting and then seamlessly continue the gaming session on a laptop computer at his/her destination. Also, in some implementations, based on different client device resources available to the user when handing over a gaming session between different devices, the game/hosting server 114 may dynamically deploy different sets of hardware resources to optimize the user's gaming experience based on the different end-user current device resources (e.g., client hardware capabilities and network bandwidth).
Some embodiments provide immediate access and require little or no user device storage. For example, a user may begin playing within 5 seconds and save approximately 250GB of game host hard drive space.
Some embodiments provide conventional content delivery (e.g., DLC downloadable content), roster updates, live events, tournaments, and more game exclusive to platform providers integrated with game content providers.
The flexibility inherent in embodiments of the API-based game hosting platform described herein also provides content developers who import their content into the platform and associated users, potential users, or fans of the content developers with at least one or more of the following technical advantages and features:
in some embodiments, the gaming platform is configured to add new games (particularly new front-line games) over time, thereby increasing the value of the content provider.
In some implementations, the gaming platform is configured to provide a "Viral Trial" invitation to the user upon a command from the content provider. For example, a subscriber of a game content provider may receive 5 invitations per month that are included in their subscription (monitored by the game platform provider and/or content provider via the account API and/or module). In some implementations, the invitations can provide one or more of the following technical features to the recipients and/or senders of the invitations and content, as well as the platform provider. The sender may send a quick link to the gaming session to any friend on the internet. The user (i.e., the invitation recipient) may play a multiplayer game with their friends.
In some implementations, at the end of the game session triggered by the invitation, the invited user (invitee) is provided with an opportunity to subscribe to the entire game platform and/or to subscribe to content provided by the content provider on the provider's game platform.
The trial invitations may be limited to specific times of day or to specific trial events (e.g., trial events planned in connection with open tournaments, new releases provided by the content provider for specific franchises or games, or updates to the gaming platform and associated end-user gaming applications) depending on available hardware capacity/gaming load and/or policies defined by the platform provider and/or the content provider.
In some implementations, the gaming platform may configure its services according to predetermined criteria and/or subscriptions. For example, for all service users, the gaming platform provides free access to certain games on weekends.
In some implementations, the game platform provides a live event integrated with YouTube or another media streaming and/or broadcast platform. For example:
certain live community events (e.g., football challenges associated with particular content provider football game franchises) that are programmed to temporally coincide with certain events (e.g., super bowl) broadcast on YouTube.
In some implementations, live events are hosted on online platforms provided by game platforms and/or content providers, and availability is provided at a user portal (portal) for those platforms/hosted events to allow viewing participation or to transform viewers into subscribers (i.e., if a viewer is a subscriber, to allow the viewer to attend the live event or to allow the viewer to subscribe to a game platform (including different subscription levels and/or content packages) and/or hosted content provided by a content provider (including different subscription levels and/or content packages)).
FIG. 15 is an example flow diagram of a method 1500 of executing a game session on a game API platform according to some embodiments. As shown in fig. 4, the game API platform is created/at least hosted by an API platform server (e.g., game server 118) and implements game sessions in conjunction with game front end server 402 and content server 450. The game front-end server 402 is configured to provide services to users of the game session and manage accounts for the users. Alternatively, the user must subscribe to the game service via the game front-end server 402. The content server 450 provides game content related to the game session. The API platform server (e.g., game server 118) executes (1502) the game application to implement the game session based on the game content. In some implementations, the game front end server 402 and the API platform server (e.g., game server 118) are owned and managed by different entities. In particular, an online gaming application is executed for displaying a gaming user interface on a first client or media device (e.g., a television). A user selection to subscribe to a gaming service is received (1502) at a user interface. With respect to the user's request to subscribe to a game service, the server system 114 receives (1504) user information, allowing the user of the first client device 102 to register one of the different types of services for each individual game title (e.g., a free trial service or a regular subscription service). On the user interface, a user of the client device 102 can browse (1506) a series of rich hubs for each content domain (also referred to as content franchises). The user interface is configured to display game content, additional content (e.g., news, statistics), and live events (e.g., game broadcasts from another user, live chat messages).
In some implementations, a user selection of a game (e.g., a live football game) is received (1508) at a user interface. In response to the selection, the gaming application 732 is loaded 1508 for the first client device 102 for a predetermined delay time and the gaming environment is displayed for the user. Alternatively, in some implementations, the server system 114 provides (1510) the live stream to the user of the first client device 102 in response to the user action. For example, the server system 114 provides the first game stream 130 on a first game session of the first client device 102 and concurrently broadcasts 1510 a second live YouTube stream 132 to one or more other client devices 102. The second live stream 132 allows the user to share the gaming experience with the audience. Optionally, the second live stream includes an audio feed or a video feed provided by the user of the first client device 102 while the user is playing the game based on the first game stream.
In some implementations, the user of the first client device 102 may need to use a different client device 102 (e.g., due to moving to a different location. in response to the user action of suspending the first game session, the server system 114 suspends (1512) the first game flow of the first game session executing on the first client device 102 and records up-to-date state information about the first game session.
Referring to FIG. 15, server system 114 includes a front end server 402 and a game platform server (e.g., game server 118), each of which may have a corresponding user account system. In one example, the user account system of the front-end server 402 is used to manage subscriptions to particular game content and services, while the user account system of the gaming platform (e.g., YouTube or Google account) is used to manage gaming experiences (e.g., render game content to meet particular gaming criteria) and many other purposes. In some embodiments, the two user account systems share customer and usage data (e.g., social, friends, presence, authentication, account information, billing information). Information for the user account system is stored in the user information 690 in association with one or more game applications 628 that each user has subscribed to.
In some implementations, the content server 450 provides a service layer that is located above the technology layer provided by the game API platform server (e.g., game server 118). In some implementations, the game content server 450 manages additional user account systems for accessing its content. Optionally, an additional user account system for game content is integrated with the user account system of the game front-end server 402 for managing user subscriptions (e.g., using the game application platform 658 in the game front-end module 636).
In some implementations, the game platform provider maintains a cloud platform, infrastructure, streaming reliability, etc. (e.g., the software modules, data structures and storage, and computing infrastructure shown in fig. 6A-C) and allows the content provider to focus on the game-related features of a particular hosted game title.
In some implementations, the cloud gaming platform provides APIs, data structures, and modules (i.e., software modules) that support cross-play between a cloud version and a PC version for a selected game title (e.g., a game executing on the server system 114 as shown in fig. 6A-6C or the client device 102 as shown in fig. 7A). The user may switch between their PC versions of a particular game title provided by the content provider; alternatively, a subscriber to an online version of a title that also owns a PC version of the same title may play the PC version and concurrently interact with an online session of the same title, or the online subscriber may interact with a PC player of the same title (which may receive a special invitation if the PC game player has not become a subscriber).
Technical advantages to content providers hosting content on a gaming platform (and in some cases to providers hosting gaming platforms) according to embodiments described herein include, but are not limited to:
hosting the game platform providing the optimization for the content provider, the platform provider managing the optimization and game resources and programming on the platform;
transferring programming tasks related to content hosting and optimization from a content provider to a game platform provider in a hosted game platform embodiment;
enabling content providers to provide multiple multi-franchise subscriptions and multiple subscription hierarchies based on the APIs and modules provided by the platform provider;
support for corporate studio (party) relationships;
support for providing exclusive games;
providing a technology/engine partnership between the content provider and the platform provider;
in association with hosted gaming services, an unprecedented level of live programming is achieved, with little or no programming burden on the content provider.
In some implementations, the application/game session is associated with an online multiplayer game developed by a content provider, the online multiplayer game hosted in a cloud gaming environment provided by a gaming platform provider as described herein. In some embodiments, the game session is configured to execute on the game platform and interact with the end user according to hosting modules and APIs provided by the game platform provider. In some implementations, the gaming platforms and/or APIs described herein enable different hosted online games to be optimized for game play on different hardware and in view of different client device resources and network bandwidth, with minimal programming requirements on the part of the content provider. In some embodiments, the game user is a subscriber to game content provided by a content provider. As described herein, in some embodiments, a gaming platform provider provides an account management module and API that supports multiple subscription levels. For example, in some embodiments, the account management module and API monitors and collects game play statistics/information for an individual user based on the user's associated subscription information, enabling the relevant subscriber game play information to be provided to a content provider, enforcing (sometimes in conjunction with the content provider) subscription restrictions (e.g., restrictions on subscription content, level of play, time of play, etc.) associated with the individual user. In some implementations, the gaming platform also provides social and public services related to multiplayer or individual player gaming events or tournaments — for example, the gaming platform may be configured to provide (e.g., stream or broadcast) one or more of the following in real-time or near real-time based on concurrent active gaming sessions without placing a programming burden on the content provider: the real-time game plays streams, commentary streams, and/or commentary streams. Any of the features described herein for providing a cloud-based gaming service may be implemented in conjunction with content provided by a content provider that is hosted on a gaming platform provided by a gaming platform provider.
In some embodiments of the present application, the game API platform created by server system 114 enables real-time game profiling and analysis of third party content. As described above, server system 114 includes profiling server 430 and analysis server 440. While game server 118 is executing multiple game instances of a game title in parallel, which are implemented using third-party content provided by third-party content server 450, profiling server 430 generates a game profiling instruction that collects multiple data samples for each of a subset of the multiple game instances and sends the game profiling instruction to game server 118. In response to the game profiling instruction, the local coordinator module 630 of the game server 118 identifies a subset of the plurality of game instances according to the game profiling instruction, and the collection module 632 of the game server 118 collects a plurality of data samples associated with each game instance in the identified subset. Each of the plurality of data samples includes at least game state data and system performance data associated with a synchronized game session corresponding to a respective game instance. Game server 118 sends a plurality of data samples associated with each game instance in the identified subset to profiling server 430. The profiling server 430 provides the plurality of data samples to the analysis server 440, allowing the analysis server to analyze the plurality of data samples to improve game performance and/or user experience associated with game titles supported by third party game content.
FIG. 16 is an example flow diagram of another distributed method 1600 of hosting an electronic game on a game API platform, according to some embodiments. Method 1600 is implemented at an internet-connected game server (e.g., game server 118 in fig. 4) that includes one or more processing units and memory storing programs executable by the game server. The program includes a plurality of game applications (e.g., 628 in FIG. 6A) and a plurality of game platform modules (e.g., modules 630 and 655 and 658 in FIG. 6A and module 660 and 680 in FIG. 6B) that manage the execution of the game applications. In some implementations, each of the plurality of gaming applications is associated with a user front end, e.g., a third party developer interface, which is optionally implemented by the developer interface module 655. That is, a third party developer interface is provided to third party game developers to develop game applications without significant participation in game implementation and resource management, as multiple game platform modules are provided by internet-connected game servers to provide these services in the background. The game server obtains (1602) a first game application (e.g., game application 628) that includes first game play instructions executed by the game server to perform game play of the first game application and one or more API calls to hosted routines implemented by game platform modules 630-. Specifically, in one example, the first gaming application is obtained from a third party developer interface 655 associated with a third party developer. In some implementations, the hosting routine includes instructions that, when executed by the game server, implement one or more performance management features of the game server (e.g., GPU time sharing, multi-stream generation, and concurrent game encoding implemented by modules 660, 662, and 664, respectively) transparently to the first game application. In some cases, the instructions represent a first gaming application to implement management features of a game server.
The game server receives 1604, e.g., via the user front end 636, a first user request to initiate a first game play session of a first game application, and in response to the first user request, initiates 1606 the first game session and manages execution and context of the first game session under control of the game platform module. In some implementations, the game application platform 658 is implemented by the game front-end module 636 to provide a user interface that integrates access to multiple game applications 628 that execute different game titles based on different game content (including third-party game content). Optionally, the first gaming entertainment session is a multiplayer gaming entertainment session, and the game server may provide profile information for the first game application based on a service requested by the first user. To manage the execution and context of the first gameplay session, the game server receives (1608) a first gameplay input, e.g., via a user front end, executes (1610) a first gameplay instruction of the first game application in response to the first gameplay input and updates a first context of the first gameplay session in the game state data 508. The first context reflects, for example, the first user's interaction with the first gaming application from the first user's viewpoint. Optionally, the first context comprises one or more of: a state of the first user in the first game application, a scene/environment of the first game application, and interactions with other participants in the game session.
The game server generates (1612) the output game stream 130 and transmits the output game stream 130 to the first user, e.g., via a user front end, the output game stream 130 reflecting the updated first context of the first game session that has been stored in the game state data 508. In some implementations, the output game stream is transmitted with a parallel social stream 132 (e.g., an illustrative video or audio stream and a social media message stream). In some implementations, the output game stream 130 is provided in near real-time to reflect the updated first context of the first game session. In some implementations, the game stream 130 can be displayed by the user display device 108.
The game server manages (1614) performance of the first game session in accordance with session management routines implemented by the platform module and/or first API calls associated with the first game application, e.g., using the latency adjustment module 672, the resource adjustment module 674, the interrupt detection module 678, and the state reconciliation module 680.
In some implementations, a first user request to initiate a first gaming entertainment session is received at a game server via a first developer interface 655, the first developer interface 655 being configured to enable a user to initiate a game session with one or more game applications 628, including a first game application, provided by a first developer of the first game application 628 for execution on the game server. In some implementations, the first developer is associated with an organization that is different from the organization that operates and implements the game server.
In some implementations, the first developer logs onto the game server via the first developer interface 655. Further, in some implementations, an online marketplace (e.g., game application platform 658) is provided for users to purchase and/or subscribe at one time access rights to one or more second game applications provided by a plurality of different third party game developers (including the first developer) for execution on the game server. The game server also provides each of the second game applications with access to API calls to the managed routines implemented by the game platform modules 630, 655 and 658, 680.
Optionally, the first developer interface is implemented on game server 118. Optionally, the first developer interface is implemented on a third party server 402 that is distinct from the game server 118 and communicatively coupled to the game server 118.
In some implementations, the game server provides login services to the subscriber for one or more game applications provided by the first developer of the first game application for execution on the game server.
In some implementations, the game server obtains hosting specifications from a first developer of a first game application, wherein the hosting specifications relate to one or more of: a quality of service for a hosted game play session of a first game application; a record and/or report of user interaction with the first gaming application; a multi-player capability of a gaming-entertainment-session of a first gaming application; collection and/or reporting of performance profile data for the first gaming application; a game play level of a first game application; and social features of the gaming entertainment session of the first gaming application. The social features include availability of streams for viewers of the game play session, and in some embodiments, availability of streams includes game users' permission to share their streams to a social networking site (e.g., YouTube). Further, in some embodiments, the quality of service includes one or more of: a maximum output latency of an output game stream communicated to a game user, a predefined display resolution range of the output game stream, a predefined output frame rate range of the output game stream, a maximum frame loss rate of the output game stream, and a maximum display deviation for a multiplayer game session. The hosting specifications described above are optionally stored in association with a hosted gaming entertainment session in game context 508A and game settings 508B of game state data 508.
In some implementations, the game server provides entertainment information (e.g., user information 690 and game state data 508) to the first developer for the first user sufficient to enable the first developer to manage account information for the first user.
In some implementations, the game server collects performance information (e.g., usage statistics 698, game instance trajectories 699, and system performance data 522) for the first game application and reports the performance information for executing the first game application to the first developer. Further, in some implementations, the performance information includes one or more performance parameters of the game server hardware and the game application that are collected concurrently and associated with a game play state of the first game session, wherein the game play state includes one or more of a game play action of the first user and an associated game play context of the first game application. More details of the game-related information generated and stored by the game server are discussed above with reference to at least fig. 5 and 6C.
In some implementations, the game server obtains game performance specifications for the first game application and manages interactions of the first user with the first game application in accordance with the performance specifications for the first game application. Further, in some embodiments, the game performance specifications include game performance options, at least some of which are indicated via API calls. In some implementations, the game performance specification further includes a branding guide (branding guide) associated with the first developer of the first gaming application.
In some implementations, managing the performance of the first gaming application includes one or more of: managing GPU time sharing, managing multi-stream generation, managing parallel encoding of video streams and game streams, managing dynamic frame generation, and managing assignment of computing resources of a game server to game sessions of a first game application. Each of the game sessions is associated with one or more users who are playing the first game application. Referring to FIG. 6B, modules 660, 662, and 668 are configured to implement the aforementioned performance management functions.
In some implementations, the game server is part of a game system associated with a plurality of game users, each game user having a game controller (e.g., 102B in fig. 1), a network connection to the game system, and a display unit (e.g., 108 in fig. 1) that enable each game user to play an electronic game hosted by the game system (e.g., based on media stream 130). The gaming system includes a developer backend, a user frontend, a game server (e.g., 118 in FIG. 4), and a streaming server (e.g., 120 in FIG. 4). Further, in some embodiments, the game server is associated with a plurality of spectator users, each spectator user having a game controller, a network connection to the game system, and a display unit that enables each spectator user to view the near-real-time video stream 132 corresponding to the hosted electronic game played by the game user. The gaming application shows a game play course of the game and optionally provides one or more of the following: account management services (e.g., through the game application platform 658), application repository (e.g., through the game application 628), and game profiling services (e.g., through the local and global profiling coordinator modules 630 and 648).
Referring to fig. 5, in some embodiments, obtaining the first game application further comprises: a hosting request 526 to host a first game application 628 is received via a developer interface accessible to a third party developer and the first game application and performance specification are obtained in conjunction with the hosting request executable code 528. The performance specification is selected from a plurality of predefined game performance options provided by the game platform and relates to one or more of a plurality of performance parameters managed by the game platform. The operation of obtaining the first game application further comprises: the first game application is configured for execution by the game server according to performance specifications provided via the third party developer interface. Optionally, the selected performance metrics are stored in the user information 690 in association with the first game application.
In some implementations, in conjunction with generating and transmitting the output game stream 130 to the first user, the game server generates one or more social communications 132 of the game play of the first application in parallel, and each of the social communications is available for viewing by spectators not playing the first game application 628.
In some embodiments, the game server executes multiple game instances of a game title in parallel. Each of the plurality of game instances includes one or more synchronized game sessions, and each of the one or more game sessions is executed at a game application of the client device 102. Further, in some embodiments, while the game server is executing multiple game instances, the profiling server 430 generates a game profiling instruction 538 that collects multiple data samples for each game instance in a subset of the multiple game instances and sends the game profiling instruction 538 to the game server. Profiling server 430 is coupled to game server 118 through one or more wireless communication networks. Specifically, in response to the game profiling instructions 538, the local coordinator module 630 of the game server identifies a subset of the plurality of game instances according to the game profiling instructions 538, and the collection module 632 of the game server collects a plurality of data samples associated with each game instance in the identified subset. Each data sample of the plurality of data samples includes at least game state data 508 and system performance data 522 associated with a synchronized game session corresponding to a respective game instance. The game server sends the plurality of data samples associated with each game instance in the identified subset to profiling server 430 and provides the plurality of data samples to analysis server 440, thereby allowing analysis server 440 to analyze the plurality of data samples to improve game performance and/or user experience associated with the game title.
In some implementations, the output display stream 130 delivered to the first user represents one or more of: a viewpoint of the first user, a state of the first user in the first game application, a scene/environment of the first game application, and interactions with other participants in the game session.
The distributed real-time game hosting system includes one or more processors (e.g., 406, 408, and 602), and memory (e.g., 606) coupled to the one or more processors. The memory stores one or more programs configured for execution by the one or more processors, the one or more programs including instructions for performing any of the operations described above with reference to fig. 16. A non-transitory computer readable storage medium (e.g., 606) stores one or more programs. The one or more programs include instructions that, when executed by the distributed real-time game hosting system, cause the system to perform any of the operations described above with reference to fig. 16.
Reference has been made in detail to the various embodiments, examples of which are illustrated in the accompanying drawings. In the above detailed description, numerous specific details are set forth in order to provide a thorough understanding of the invention and the described embodiments. However, the invention may be practiced without these specific details. In other instances, well-known methods, procedures, components, and circuits have not been described in detail as not to unnecessarily obscure aspects of the embodiments.
It will be understood that, although the terms first, second, etc. may be used herein to describe various elements, these elements should not be limited by these terms. These terms are only used to distinguish one element from another. For example, a first device may be referred to as a second device, and similarly, a second device may be referred to as a first device without changing the meaning of the description, so long as all occurrences of the first device are renamed consistently and all occurrences of the second device are renamed consistently. The first device and the second device are both devices, but they are not the same device.
The terminology used herein is for the purpose of describing particular embodiments only and is not intended to be limiting of the claims. As used in the description of the embodiments and the appended claims, the singular forms "a", "an" and "the" are intended to include the plural forms as well, unless the context clearly indicates otherwise. It is also to be understood that the term "and/or" as used herein refers to and encompasses any and all possible combinations of one or more of the associated listed items. It will be further understood that the terms "comprises" and/or "comprising," when used in this specification, specify the presence of stated features, integers, steps, operations, elements, and/or components, but do not preclude the presence or addition of one or more other features, integers, steps, operations, elements, components, and/or groups thereof.
As used herein, the term "if" may be understood to mean "when" the prerequisite is true "or" after "the prerequisite is true" or "in response to determining" the prerequisite is true "or" in accordance with "the determination that the prerequisite is true" or "in response to detecting" the prerequisite is true, depending on the context. Similarly, the phrase "if it is determined that [ the prerequisite is true ]" or "if [ the prerequisite is true ]" or "when [ the prerequisite is true ]" may be understood to mean "after determining" the prerequisite is true "or" in response to determining "the prerequisite is true" or "according to a determination" that the prerequisite is true "or" after detecting "the prerequisite is true".
The foregoing description, for purpose of explanation, has been described with reference to specific embodiments. However, the illustrative discussions above are not intended to be exhaustive or to limit the invention to the precise forms disclosed. Many modifications and variations are possible in light of the above teaching. The embodiments were chosen and described in order to best explain the principles of the invention and its practical applications, to thereby enable others skilled in the art to best utilize the invention and various embodiments with various modifications as are suited to the particular use contemplated.
Claims (68)
1. A method implemented by a distributed real-time game profiling system, comprising:
executing, by a game server, a plurality of game instances of a game title in parallel, each of the plurality of game instances comprising one or more synchronized game sessions, each of the one or more game sessions executed at a game application of a client device;
while the game server is executing the plurality of game instances:
generating, by a profiling server, a game profiling instruction that collects a plurality of data samples for each of a subset of the plurality of game instances, wherein the profiling server is coupled to the game server through one or more wireless communication networks;
sending, by the profiling server, the game profiling instruction to the game server;
in response to the game parsing instruction:
identifying, by a local coordinator module of the game server, the subset of the plurality of game instances according to the game profiling instruction;
collecting, by a collection module of the game server, the plurality of data samples associated with each game instance in the identified subset, each data sample of the plurality of data samples including at least game state data and system performance data associated with one or more synchronized game sessions corresponding to the respective game instance; and
sending, by the game server, the plurality of data samples associated with each game instance in the identified subset to the profiling server; and
providing the plurality of data samples to an analytics server, thereby allowing the analytics server to analyze the plurality of data samples to improve game performance and/or user experience associated with the game title.
2. The method of claim 1, further comprising:
obtaining, by the game server, for a subset of the plurality of data samples, a respective difference between each data sample in the subset of the plurality of data samples and a reference data sample, wherein sending the plurality of data samples to the profiling server comprises: sending the respective differences to the profiling server to represent each of the subset of the plurality of data samples.
3. The method of claim 2, wherein the plurality of data samples comprises the reference data sample.
4. The method of claim 2, further comprising:
recovering, by the analytics server, each of the subset of the plurality of data samples by combining the respective difference and the reference data sample.
5. The method of any of claims 1 to 4, wherein the plurality of data samples includes a first data sample and a second data sample collected after the first data sample, and the second data sample corresponds to delta data equal to a difference between the first data sample and the second data sample; and wherein sending the plurality of data samples to the profiling server comprises: sending the first data sample and the delta data to the profiling server and maintaining the second data sample at the game server.
6. The method of any of claims 1 to 5, wherein the analytics server is remote from the gaming server and the profiling server.
7. The method of any of claims 1 to 6, wherein the analytics server is configured to operate offline.
8. The method of any of claims 1 to 7, further comprising, at the analytics server:
comparing values of data samples of the plurality of data samples at a first time and a second time after the first time; and
determining a difference between values of the data samples at the first time and the second time in the plurality of data samples; and
visualizing the difference between the two of the plurality of data samples.
9. The method of claim 8, wherein the game profiling instructions comprise profile criteria configured to take effect at a third time after the first time and before the second time, the method further comprising:
the profile criteria are associated with the determined and visualized differences.
10. The method of claim 9, wherein the profile criteria include a change in a type, compilation, or version of shader programs used to render the one or more synchronized game sessions corresponding to respective game instances.
11. The method of any of claims 1 to 10, further comprising, at the analytics server:
comparing two of the plurality of data samples, wherein two of the plurality of data samples correspond to a first time and a second time after the first time;
identifying an abnormal profile event according to the comparison result; and
generating an alert message indicating the occurrence of the abnormal profile event.
12. The method of claim 11, wherein identifying the anomalous profile event further comprises:
identifying a frame loss rate increase based on game state data for the two of the plurality of data samples;
identifying a processor error based on system performance data for the two of the plurality of data samples; and
associating a root cause of the frame loss rate increase with the processor error.
13. The method of claim 11, wherein identifying the anomalous profile event further comprises:
identifying a frame loss rate for a particular game action and an increase in a game action rate based on game state data for the two of the plurality of data samples; and
associating the increase in the frame loss rate with the particular game action.
14. The method of claim 13, wherein the game title comprises a tetris game, the method further comprising:
based on the plurality of data samples, determining that the increase in the frame loss rate was caused by an L-chunk in the Russian dice game.
15. The method of any of claims 1 to 4, wherein the game server comprises a plurality of processors, the method further comprising at least one of:
performing hotspot analysis of the plurality of processors based on the plurality of data samples;
profiling the plurality of processors based on the plurality of data samples; and
parsing the plurality of game instances and the one or more synchronized game sessions corresponding to each game instance.
16. The method of any of claims 1 to 15, further comprising:
causing a Graphical User Interface (GUI) to be displayed on a game profiling and analysis application implemented at an administrator client device, wherein the GUI is configured to: receiving a game profiling request from a user, sending the game profiling request to the profiling server, receiving an analysis result from the analysis server, and presenting the result on the GUI.
17. The method of any of claims 1 to 16, further comprising:
causing, by a game profiling and analysis application implemented at an administrator client device, the plurality of data samples to be displayed on a GUI; and
receiving user input from the GUI, the user input identifying an abnormal profile event in the subset of the plurality of game instances.
18. The method of any of claims 1-17, wherein the game profiling instruction further comprises a target profiling condition, the method further comprising:
receiving a user input defining the target profiling condition.
19. The method of any of claims 1-18, wherein the game profiling instructions enable periodic data sample collection, the method further comprising:
identifying an abnormal profile event in the plurality of data samples collected in response to the game profiling instruction that enables the periodic data collection;
receiving, by the profiling server, a profiling request comprising a target profiling condition associated with the abnormal profile event; and
generating, by the profiling server, a second game profiling instruction to collect a second plurality of data samples according to the target profiling condition.
20. The method of any of claims 1-19, wherein the game profiling instruction defines one or more of: a data collection schedule, a target profiling condition, and a time window.
21. The method of any of claims 1-20, wherein the game profiling instruction randomly selects the subset of the plurality of game instances according to an instance spacing or according to one or more instance characteristics.
22. The method of any of claims 1-21, wherein the game profiling instruction further comprises a target profiling condition, the method further comprising:
while the game server is executing the plurality of game instances:
automatically detecting, by the local coordinator module of the game server, that the target profile condition occurred for the subset of game instances, wherein the plurality of data samples collected by the collection module of the game server correspond to the detected target profile condition.
23. The method of claim 22, the method further comprising, at the analytics server:
determining, based on the plurality of data samples, that one or more game, processor, or operating system states are abnormal;
associating the target profiling condition with the determined one or more game, processor, or operating system states; and
generating an alert message indicating that the target profiling condition has occurred and is caused by the one or more games, processors, or operating system states.
24. The method of any of claims 1 to 23, wherein the target profiling condition comprises one of: frame dropping, frame rate dropping, game latency increasing, processor power consumption increasing, memory occupancy increasing, and/or processor utilization changing.
25. The method of any of claims 1-24, wherein the game profiling instruction comprises a data type of the plurality of data samples to be collected.
26. The method of any of claims 1-25, wherein executing, by the game server, the plurality of game instances of the game title in parallel further comprises: a game event track is created for each of the plurality of game instances, the game event track comprising an ordered sequence of game events occurring for the one or more synchronized game sessions corresponding to the respective game instance.
27. The method of claim 26, the game profiling request comprising a predefined profiling metadata call, the method further comprising:
recording and marking the plurality of data samples in a trace corresponding to each instance in response to the predefined profiling metadata call; and
in response to a query, a subset of the plurality of data samples in the trace is identified based on one or more corresponding tags.
28. The method of any of claims 1-27, wherein the game server corresponds to a first game latency, and the profiling server is configured to respond to the game profiling instruction with a greater profiling latency than the first game latency.
29. The method of any of claims 1-28, wherein the analysis server is configured to respond to data analysis requests with an analysis latency greater than the profiling latency.
30. The method of any of claims 1-29, wherein the distributed real-time game profiling system comprises a plurality of servers having different response times, and the plurality of servers are assigned to game management, profiling coordination, and data analysis based on the different response times.
31. The method of any of claims 1 to 30, further comprising:
creating, by the profiling server, a game profile based on the plurality of data samples collected for each of the identified subset of the plurality of game instances.
32. The method of any of claims 1 to 31, wherein the system performance data is stored in at least one of: CPU performance counters, GPU performance counters, stack traces, and architecture counters.
33. The method of any of claims 1 to 32, wherein the system performance data further comprises performance information regarding PCI express exchanges.
34. The method of any of claims 1 to 33, further comprising:
converting the plurality of data samples into readable data.
35. The method of any of claims 1 to 34, further comprising:
each of the plurality of data samples is marked with information of the game instance corresponding to the respective data sample.
36. The method of any of claims 1 to 35, wherein the plurality of data samples comprise a plurality of hardware attributes of the game server, a game version of the game title, and a kernel/driver version running on the game server.
37. The method of any of claims 1-36, wherein the game state data comprises game context data.
38. The method of any of claims 1 to 37, wherein the game state data comprises one or more of a plurality of game settings, the plurality of game settings comprising: a sliding window frame rate, an instantaneous frame time, and a number of objects in a game scene.
39. The method of any of claims 1 to 38, wherein the system performance data comprises, for each game instance, performance data of: a CPU, a GPU, a memory, an operating system, one or more input/output ports, and/or a data bus assigned to execute each of the one or more game sessions of the respective game instance.
40. The method of claim 39, wherein the performance data of the CPU comprises: processor utilization and power consumption at a time corresponding to each of the plurality of data samples.
41. A distributed real-time game profiling system, comprising:
one or more processors; and
a memory coupled to the one or more processors, the memory storing one or more programs configured for execution by the one or more processors, the one or more programs including instructions for performing the method of any of claims 1-40.
42. A non-transitory computer readable storage medium storing one or more programs, the one or more programs comprising instructions, which when executed by a distributed real-time game profiling system, cause the system to perform the method of any of claims 1-40.
43. A distributed method for hosting an electronic game, comprising:
at an internet-connected game server, the game server comprising one or more processing units and memory storing a program executable by the game server, wherein the program comprises a plurality of game applications and a plurality of game platform modules that manage execution of the game applications:
obtaining a first game application comprising first game play instructions to perform game play of the first game application and one or more API calls to a hosted routine implemented by the gaming platform module;
receiving a first user request to initiate a first game play session of the first game application; and
in response to the first user request, initiating the first gameplay session and managing execution and context of the first gameplay session under control of the gaming platform module, including:
receiving a first game play input;
in response to the first game play input, executing the first game play instructions of the first game application and updating a first context of the first game play session, wherein the first context reflects interactions of a first user with the first game application;
generating an output game stream and transmitting the output game stream to the first user, the output game stream reflecting the updated first context of the first game session; and
managing performance of the first game session in accordance with a session management routine implemented by the platform module and/or a first API call associated with the first game application.
44. The method of claim 43, wherein the hosting routine comprises instructions that, when executed by the game server, implement one or more performance management features of the game server transparently to the first game application.
45. The method of claim 43 wherein the first user request to initiate the first gaming entertainment session is received at the game server via a first developer interface configured to enable a user to initiate a game session with one or more game applications including the first game application, the one or more game applications provided by a first developer of the first game application for execution on the game server.
46. The method of claim 45, wherein the first developer is logged onto the game server via the first developer interface.
47. The method of claim 46, further comprising:
providing an online marketplace from which users may purchase and/or subscribe access to one or more second game applications at a time, the one or more second game applications being provided for execution on the game server by a plurality of different third party game developers including the first developer; and
providing each of the second gaming applications with access to API calls to hosted routines implemented by the gaming platform module.
48. The method of claim 45, wherein the first developer interface is implemented on the game server.
49. The method of claim 45, wherein the first developer interface is implemented on a third party server that is distinct from and communicatively coupled to the game server.
50. The method of claim 45, further comprising: providing, at the game server, a login service to a subscriber for the one or more game applications provided by the first developer of the first game application for execution on the game server.
51. The method of claim 45, further comprising:
obtaining a hosting specification from the first developer of the first gaming application, wherein the hosting specification relates to one or more of:
a quality of service of a hosted game play session of the first game application;
a record and/or report of user interactions with the first gaming application;
a multi-player capability of a gaming-entertainment-session of the first gaming application;
a collection and/or reporting of performance profile data for the first gaming application;
a game play level of the first game application; and
a social feature of a gameplay session of the first game application, wherein the social feature comprises availability of a stream for a viewer of the gameplay session.
52. The method of claim 51, wherein the quality of service comprises one or more of: a maximum output latency of an output game stream communicated to a game user, a predefined display resolution range of the output game stream, a predefined output frame rate range of the output game stream, a maximum frame loss rate of the output game stream, and a maximum display deviation for a multiplayer game session.
53. The method of claim 45, further comprising:
providing the first developer with game play information for the first user, the game play information being sufficient to enable the first developer to manage account information for the first user.
54. The method of claim 45, further comprising:
collecting performance information for the first game application; and
providing the performance information for execution of the first game application to the first developer.
55. The method of claim 54, wherein the performance information includes one or more performance parameters of the game application and game server hardware collected concurrently and associated with a game play state of the first game session, wherein the game play state includes one or more of: the gaming entertainment action of the first user and the associated gaming entertainment context of the first gaming application.
56. The method of claim 43, further comprising:
obtaining game performance specifications for the first game application, wherein the game server manages the first user's interactions with the first game application according to the performance specifications for the first game application.
57. The method of claim 56, wherein the game performance specifications include game performance options, at least some of which are indicated via the API calls.
58. The method of claim 57, wherein the game performance specification further comprises a branding guide associated with a first developer of the first gaming application.
59. The method of claim 43, wherein managing performance of the first game application comprises one or more of:
managing GPU time sharing;
managing multi-stream generation;
managing parallel encoding of video streams and game streams;
managing dynamic frame generation; and
managing assignment of computing resources of the game server to game sessions of the first game application, wherein each of the game sessions is associated with one or more users playing the first game application.
60. The method of claim 43, wherein the game server is associated with a plurality of game users, each game user having a game controller, a network connection to the game system, and a display unit that enables each game user to play an electronic game hosted by the game system.
61. The method of claim 60, wherein the game server is associated with a plurality of spectator users, each spectator user having a game controller, a network connection to the game system, and a display unit that enables each spectator user to view a near-real-time video stream corresponding to the hosted electronic game played by the game user.
62. The method of claim 43, wherein obtaining the first game application further comprises:
receiving, via a developer interface accessible to third party developers, a hosting request to host the first gaming application;
obtaining executable code and a performance specification for the first gaming application in conjunction with the hosting request, wherein the performance specification is selected from a plurality of predefined gaming performance options provided by the gaming platform and is related to one or more of a plurality of performance parameters managed by the gaming platform; and
configuring the first game application for execution by the game server in accordance with the performance specification provided via the third party developer interface.
63. The method of claim 43, further comprising:
in conjunction with generating the output game stream and transmitting the output game stream to the first user, generating one or more social communications for game play of the first application in parallel, wherein each of the social communications is viewable by spectators not playing the first game application.
64. The method of claim 43, further comprising:
executing, by the game server, a plurality of game instances of a game title in parallel, each of the plurality of game instances comprising one or more synchronous game sessions, each of the one or more synchronous game sessions executed at a game application of a client device.
65. The method of claim 64, further comprising:
while the game server is executing the plurality of game instances:
generating, by a profiling server, a game profiling instruction that collects a plurality of data samples for each of a subset of the plurality of game instances, wherein the profiling server is coupled to the game server through one or more wireless communication networks;
sending, by the profiling server, the game profiling instruction to the game server;
in response to the game parsing instruction:
identifying, by a local coordinator module of the game server, the subset of the plurality of game instances according to the game profiling instruction;
collecting, by a collection module of the game server, the plurality of data samples associated with each game instance in the identified subset, each data sample of the plurality of data samples including at least game state data and system performance data associated with the one or more synchronized game sessions corresponding to the respective game instance; and
sending, by the game server, the plurality of data samples associated with each game instance in the identified subset to the profiling server; and
providing the plurality of data samples to an analytics server, thereby allowing the analytics server to analyze the plurality of data samples to improve game performance and/or user experience associated with the game title.
66. The method of claim 43, wherein the output display stream communicated to the first user represents one or more of: a viewpoint of the first user, a state of the first user in the first game application, a scene/environment of the first game application, and interactions with other participants in the game session.
67. A distributed real-time game hosting system, comprising:
one or more processors; and
a memory coupled to the one or more processors, the memory storing one or more programs configured for execution by the one or more processors, the one or more programs including instructions for performing the method of any of claims 43-66.
68. A non-transitory computer readable storage medium storing one or more programs, the one or more programs comprising instructions, which when executed by a distributed real-time game hosting system, cause the system to perform the method of any of claims 43-66.
Applications Claiming Priority (3)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US201762570648P | 2017-10-10 | 2017-10-10 | |
US62/570,648 | 2017-10-10 | ||
PCT/US2018/055055 WO2019074952A2 (en) | 2017-10-10 | 2018-10-09 | Distributed sample-based game profiling with game metadata and metrics and gaming api platform supporting third-party content |
Publications (2)
Publication Number | Publication Date |
---|---|
CN110678239A true CN110678239A (en) | 2020-01-10 |
CN110678239B CN110678239B (en) | 2024-02-09 |
Family
ID=64110062
Family Applications (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
CN201880033465.3A Active CN110678239B (en) | 2017-10-10 | 2018-10-09 | Distributed sample-based game profiling with game metadata and metrics and game API platform supporting third party content |
Country Status (4)
Country | Link |
---|---|
US (1) | US11684849B2 (en) |
EP (2) | EP4336800A2 (en) |
CN (1) | CN110678239B (en) |
WO (1) | WO2019074952A2 (en) |
Cited By (4)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
CN111359220A (en) * | 2020-03-04 | 2020-07-03 | 深圳市腾讯网域计算机网络有限公司 | Game advertisement generation method and device and computer equipment |
CN111405562A (en) * | 2020-03-11 | 2020-07-10 | 中国科学院信息工程研究所 | Mobile malicious user identification method and system based on communication behavior rules |
CN112449203A (en) * | 2020-11-24 | 2021-03-05 | 广州虎牙科技有限公司 | Game live broadcast method and device, electronic equipment and storage medium |
CN113230665A (en) * | 2021-05-21 | 2021-08-10 | 珠海金山网络游戏科技有限公司 | Resource allocation method and device |
Families Citing this family (37)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
WO2016073035A1 (en) | 2014-11-05 | 2016-05-12 | Super League Gaming, Inc. | Game system |
US10238965B2 (en) * | 2016-04-28 | 2019-03-26 | Sony Interactive Entertainment America Llc | Cloud gaming device handover |
US10456672B2 (en) | 2016-05-19 | 2019-10-29 | Google Llc | Methods and systems for facilitating participation in a game session |
US11140207B2 (en) | 2017-12-21 | 2021-10-05 | Google Llc | Network impairment simulation framework for verification of real time interactive media streaming systems |
EP4276814A3 (en) | 2018-03-22 | 2023-12-20 | Google LLC | Methods and systems for rendering and encoding content for online interactive gaming sessions |
US10589171B1 (en) * | 2018-03-23 | 2020-03-17 | Electronic Arts Inc. | User interface rendering and post processing during video game streaming |
US10987579B1 (en) | 2018-03-28 | 2021-04-27 | Electronic Arts Inc. | 2.5D graphics rendering system |
US11077364B2 (en) | 2018-04-02 | 2021-08-03 | Google Llc | Resolution-based scaling of real-time interactive graphics |
WO2019194953A1 (en) | 2018-04-02 | 2019-10-10 | Google Llc | Methods, devices, and systems for interactive cloud gaming |
US11872476B2 (en) | 2018-04-02 | 2024-01-16 | Google Llc | Input device for an electronic system |
CN111417978A (en) | 2018-04-10 | 2020-07-14 | 谷歌有限责任公司 | Memory management in game rendering |
DE102018206785A1 (en) * | 2018-05-03 | 2019-11-07 | Audi Ag | Data transmission using the Bluetooth Low Energy (BLE) standard |
US11260295B2 (en) * | 2018-07-24 | 2022-03-01 | Super League Gaming, Inc. | Cloud-based game streaming |
US10887574B2 (en) | 2018-07-31 | 2021-01-05 | Intel Corporation | Selective packing of patches for immersive video |
US11185786B2 (en) * | 2018-08-21 | 2021-11-30 | Steelseries Aps | Methods and apparatus for monitoring actions during gameplay |
US10773156B2 (en) * | 2018-11-05 | 2020-09-15 | Sony Interactive Entertainment LLC | Systems and methods for establishing direct communication between a server system and a video game controller |
US11071914B2 (en) | 2018-11-09 | 2021-07-27 | Steelseries Aps | Methods, systems, and devices of providing portions of recorded game content in response to a trigger |
WO2020102493A1 (en) | 2018-11-16 | 2020-05-22 | Google Llc | Shadow tracking of real-time interactive simulations for complex system analysis |
US10918938B2 (en) | 2019-03-29 | 2021-02-16 | Electronic Arts Inc. | Dynamic streaming video game client |
KR102622252B1 (en) * | 2019-05-27 | 2024-01-08 | 삼성에스디에스 주식회사 | Apparatus and method for transmitting contents |
US11089112B2 (en) * | 2019-08-21 | 2021-08-10 | Facebook, Inc. | Low latency interactive media distribution using shared user hardware |
US11957974B2 (en) * | 2020-02-10 | 2024-04-16 | Intel Corporation | System architecture for cloud gaming |
US11648467B2 (en) | 2020-02-14 | 2023-05-16 | Microsoft Technology Licensing, Llc | Streaming channel personalization |
JP2023525335A (en) * | 2020-05-13 | 2023-06-15 | グーグル エルエルシー | Level change in game streaming system |
CN111736850B (en) * | 2020-07-21 | 2020-12-22 | 腾讯科技（深圳）有限公司 | Image processing method, apparatus, server and medium |
US11531670B2 (en) | 2020-09-15 | 2022-12-20 | Ensemble Rcm, Llc | Methods and systems for capturing data of a database record related to an event |
US11689763B2 (en) * | 2020-09-28 | 2023-06-27 | T-Mobile Usa, Inc. | Cross-party diagnostics |
LU102111B1 (en) * | 2020-10-09 | 2022-04-11 | Microsoft Technology Licensing Llc | Enabling local split-screen multiplayer experiences using remote multiplayer game support |
CN112492580B (en) * | 2020-11-25 | 2023-08-18 | 北京小米移动软件有限公司 | Information processing method and device, communication equipment and storage medium |
US11503090B2 (en) | 2020-11-30 | 2022-11-15 | At&T Intellectual Property I, L.P. | Remote audience feedback mechanism |
US11334586B1 (en) * | 2021-03-15 | 2022-05-17 | Ensemble Rcm, Llc | Methods and systems for processing database records based on results of a dynamic query session |
US11709618B2 (en) * | 2021-03-25 | 2023-07-25 | Dell Products L.P. | Automatically processing storage system data and generating visualizations representing differential data comparisons |
JP2022180883A (en) * | 2021-05-25 | 2022-12-07 | ローランド株式会社 | Video processing apparatus and video processing program |
CN113315831B (en) * | 2021-05-26 | 2023-01-31 | 广州虎牙科技有限公司 | Cloud game playing method, device, equipment and storage medium |
US11782889B2 (en) * | 2021-06-30 | 2023-10-10 | Collibra Belgium Bv | Systems and methods for continuous data profiling |
US20230293986A1 (en) * | 2022-03-17 | 2023-09-21 | Bidstack Group PLC | Server-side gaming method and system for the delivery of remotely-rendered content comprising impression content |
CN114632329B (en) * | 2022-05-16 | 2022-10-25 | 荣耀终端有限公司 | Terminal equipment performance adjusting method and related device |
Citations (8)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
CN1556958A (en) * | 2002-04-26 | 2004-12-22 | Multi-user application program interface | |
US20060287096A1 (en) * | 2005-06-20 | 2006-12-21 | Microsoft Corporation | Setting up on-line game sessions out of a game context |
CN101312772A (en) * | 2005-09-12 | 2008-11-26 | 百利游戏有限公司 | System and method for gaming-content configuration and management system |
US20120209571A1 (en) * | 2011-02-14 | 2012-08-16 | Disney Enterprises, Inc. | Performance Metrics Gathering From Multiple Video Game Platforms |
US20130274000A1 (en) * | 2012-04-11 | 2013-10-17 | Meteor Entertainment, Inc. | Modifying use of resources within a cloud-based gaming platform |
US20140342819A1 (en) * | 2013-05-20 | 2014-11-20 | Microsoft Corporation | Game availability in a remote gaming environment |
CN104866699A (en) * | 2014-02-25 | 2015-08-26 | 上海征途信息技术有限公司 | Intelligent online game data analysis method |
CN107213641A (en) * | 2016-03-21 | 2017-09-29 | 电子技术公司 | The video synchronous with remote measurement in game |
Family Cites Families (139)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US5892897A (en) | 1997-02-05 | 1999-04-06 | Motorola, Inc. | Method and apparatus for microprocessor debugging |
US7548238B2 (en) | 1997-07-02 | 2009-06-16 | Nvidia Corporation | Computer graphics shader systems and methods |
US6948092B2 (en) | 1998-12-10 | 2005-09-20 | Hewlett-Packard Development Company, L.P. | System recovery from errors for processor and associated components |
US7774440B1 (en) | 2001-07-25 | 2010-08-10 | Scalable Network Technologies, Inc. | Method and system for enhancing performance of a physical network under real-time control using simulation of a reference model |
US7015909B1 (en) | 2002-03-19 | 2006-03-21 | Aechelon Technology, Inc. | Efficient use of user-defined shaders to implement graphics operations |
US7803052B2 (en) | 2002-06-28 | 2010-09-28 | Microsoft Corporation | Discovery and distribution of game session information |
GB2405599A (en) | 2002-07-05 | 2005-03-09 | Dominic Clancy | System and method for playing an interactive game using a mobile device |
JP3495032B1 (en) | 2002-07-24 | 2004-02-09 | コナミ株式会社 | Game progress management device, game server device, terminal device, game progress management method, and game progress management program |
US20040198403A1 (en) | 2002-07-25 | 2004-10-07 | Pedersen Claus Aagaard | Gaming concept for wireless terminals |
US9138644B2 (en) | 2002-12-10 | 2015-09-22 | Sony Computer Entertainment America Llc | System and method for accelerated machine switching |
US8549574B2 (en) | 2002-12-10 | 2013-10-01 | Ol2, Inc. | Method of combining linear content and interactive content compressed together as streaming interactive video |
US8661496B2 (en) | 2002-12-10 | 2014-02-25 | Ol2, Inc. | System for combining a plurality of views of real-time streaming interactive video |
US20060154710A1 (en) | 2002-12-10 | 2006-07-13 | Nokia Corporation | Method and device for continuing an electronic multi-player game, in case of an absence of a player of said game |
US10664138B2 (en) | 2003-03-14 | 2020-05-26 | Comcast Cable Communications, Llc | Providing supplemental content for a second screen experience |
US20060178216A1 (en) | 2003-07-15 | 2006-08-10 | Shea Mattew T | Multi-session user launching and invitation system and method |
US7966642B2 (en) | 2003-09-15 | 2011-06-21 | Nair Ajith N | Resource-adaptive management of video storage |
EP1668520A4 (en) | 2003-09-19 | 2007-01-31 | Wildtangent Inc | Joint consumption of content invitation methods and apparatus |
US7261798B2 (en) | 2004-01-28 | 2007-08-28 | Hamilton Sundstrand Corporation | Assembly for maintaining compression for electrical contact of the active area of an electrochemical cell |
EP1948335A4 (en) | 2005-10-11 | 2011-02-09 | Thq Wireless Inc | Method and apparatus for finding desirable multi-player games for players |
KR20070082395A (en) | 2006-02-16 | 2007-08-21 | 엔에이치엔(주) | Flash game invitation system and method using url |
WO2007101198A2 (en) | 2006-02-27 | 2007-09-07 | Adra Hosni I | System and method for dynamically tracking and state forecasting tagged entities |
US20070293319A1 (en) | 2006-06-20 | 2007-12-20 | Microsoft Corporation | Transfer of Features Between Gaming Devices |
US7925485B2 (en) | 2006-10-25 | 2011-04-12 | International Business Machines Corporation | System and apparatus for managing latency-sensitive interaction in virtual environments |
CN101068258B (en) | 2006-12-14 | 2011-09-21 | 腾讯科技（深圳）有限公司 | Electronic game controlling method and controlling system |
US20080220878A1 (en) | 2007-02-23 | 2008-09-11 | Oliver Michaelis | Method and Apparatus to Create or Join Gaming Sessions Based on Proximity |
WO2008104221A1 (en) | 2007-02-27 | 2008-09-04 | Telefonaktiebolaget Lm Ericsson (Publ) | Method and apparatus for use in multiplayer server-based gaming |
KR101422005B1 (en) | 2007-07-04 | 2014-07-23 | 엘지전자 주식회사 | Dispenser and refrigerator including the same |
JP5468193B2 (en) | 2007-08-06 | 2014-04-09 | 任天堂株式会社 | Controller cover |
US8235817B2 (en) * | 2009-02-12 | 2012-08-07 | Sony Computer Entertainment America Llc | Object based observation |
US8979647B2 (en) | 2007-10-26 | 2015-03-17 | Microsoft Technology Licensing, Llc | Method of providing player status and ability to join games |
US8613673B2 (en) | 2008-12-15 | 2013-12-24 | Sony Computer Entertainment America Llc | Intelligent game loading |
US9498714B2 (en) | 2007-12-15 | 2016-11-22 | Sony Interactive Entertainment America Llc | Program mode switching |
US20100016081A1 (en) * | 2008-03-20 | 2010-01-21 | Gdi Game Domain International Plc | Game server |
JP5075727B2 (en) | 2008-04-25 | 2012-11-21 | 株式会社日立製作所 | Stream distribution system and failure detection method |
US8200795B2 (en) | 2008-06-05 | 2012-06-12 | Sony Computer Entertainment Inc. | Mobile phone game interface |
US20100073712A1 (en) | 2008-09-19 | 2010-03-25 | Konica Minolta Systems Laboratory, Inc. | Print job assignment method allowing user-prioritization |
US9498711B2 (en) | 2008-11-04 | 2016-11-22 | Quado Media Inc. | Multi-player, multi-screens, electronic gaming platform and system |
US20120079080A1 (en) | 2009-02-11 | 2012-03-29 | Shervin Pishevar | Apparatuses, Methods and Systems For An Interactive Proximity Display Tether With Remote Co-Play |
CN101887485A (en) | 2009-05-14 | 2010-11-17 | 灰熊(北京)科技有限公司 | Method for realizing reliable drop line reconnection in table games |
US8506402B2 (en) | 2009-06-01 | 2013-08-13 | Sony Computer Entertainment America Llc | Game execution environments |
US8621585B2 (en) | 2009-06-16 | 2013-12-31 | Z2Live, Inc. | Invitation service for multi-device application sessions |
US9155963B2 (en) | 2009-11-25 | 2015-10-13 | Disney Enterprises, Inc. | Collaborative online ranking |
US8352798B2 (en) | 2009-12-10 | 2013-01-08 | International Business Machines Corporation | Failure detection and fencing in a computing system |
CN102195935B (en) | 2010-03-03 | 2015-07-29 | 深圳市腾讯计算机系统有限公司 | game hosting system and method |
JP5730914B2 (en) | 2010-03-05 | 2015-06-10 | ブラス・モンキー・インコーポレイテッドＢｒａｓｓ Ｍｏｎｋｅｙ，Ｉｎｃ． | System and method for bidirectional communication and content control in a web browser |
US8619588B2 (en) | 2010-04-07 | 2013-12-31 | Avaya Inc. | System and method for predicting video transmission quality through a network |
US8591334B2 (en) | 2010-06-03 | 2013-11-26 | Ol2, Inc. | Graphical user interface, system and method for implementing a game controller on a touch-screen device |
EP2621594B1 (en) | 2010-09-13 | 2016-08-10 | Sony Computer Entertainment America LLC | Dual mode program execution and loading |
US8814697B2 (en) | 2011-04-19 | 2014-08-26 | Sony Computer Entertainment America Llc | Method and apparatus for use in preserving a game state |
JP5076132B1 (en) | 2011-05-25 | 2012-11-21 | 株式会社スクウェア・エニックス・ホールディングス | Drawing control apparatus, control method therefor, program, recording medium, drawing server, and drawing system |
US9412193B2 (en) | 2011-06-01 | 2016-08-09 | Apple Inc. | Run-time optimized shader program |
US20130017884A1 (en) | 2011-07-13 | 2013-01-17 | Igt | Methods and apparatus for providing secure logon to a gaming machine using a mobile device |
US8814956B2 (en) | 2011-07-14 | 2014-08-26 | Semiconductor Energy Laboratory Co., Ltd. | Power storage device, electrode, and manufacturing method thereof |
US9167260B2 (en) | 2011-08-02 | 2015-10-20 | Advanced Micro Devices, Inc. | Apparatus and method for video processing |
KR101817652B1 (en) | 2011-09-01 | 2018-02-22 | 삼성전자주식회사 | Method and apparatus for recieving game streamming data and method and server of transmitting game streaming data |
US9773344B2 (en) | 2012-01-11 | 2017-09-26 | Nvidia Corporation | Graphics processor clock scaling based on idle time |
EP2808787A4 (en) | 2012-01-24 | 2016-12-14 | Sony Interactive Entertainment Inc | Information processing device and information processing system |
US20130221923A1 (en) | 2012-02-23 | 2013-08-29 | Whalen Furniture Manufacturing Inc. | Universal charging system and battery pack for video game controllers |
US9868062B2 (en) | 2012-03-13 | 2018-01-16 | Sony Interactive Entertainment America Llc | System, method, and graphical user interface for controlling an application on a tablet |
US10535185B2 (en) | 2012-04-04 | 2020-01-14 | Qualcomm Incorporated | Patched shading in graphics processing |
US9208642B2 (en) | 2012-04-23 | 2015-12-08 | Touchspin Gaming Ag | Multiplayer slot machine gaming |
US20140006517A1 (en) | 2012-07-02 | 2014-01-02 | WUPIMA, Inc. | System and method for social invitations to facilitate playing and sharing of mobile application or mobile game on mobile device |
KR101923113B1 (en) | 2012-07-12 | 2018-11-28 | 캠프모바일 주식회사 | Method, service server, mobile phone and computer readable recording medium for invitation information processing |
WO2014022311A2 (en) | 2012-07-30 | 2014-02-06 | Google Inc. | Access control in communication environments |
JP5563633B2 (en) | 2012-08-31 | 2014-07-30 | 株式会社スクウェア・エニックス | Video game processing apparatus and video game processing program |
US8663004B1 (en) | 2012-09-05 | 2014-03-04 | Kabam, Inc. | System and method for determining and acting on a user's value across different platforms |
US20150009222A1 (en) | 2012-11-28 | 2015-01-08 | Nvidia Corporation | Method and system for cloud based virtualized graphics processing for remote displays |
US8870661B2 (en) | 2012-12-21 | 2014-10-28 | Sony Computer Entertainment America Llc | Cloud-based game slice generation and frictionless social sharing with instant play |
EP2750032B1 (en) | 2012-12-27 | 2020-04-29 | Sony Computer Entertainment America LLC | Methods and systems for generation and execution of miniapp of computer application served by cloud computing system |
WO2014120368A1 (en) | 2013-01-30 | 2014-08-07 | Intel Corporation | Content adaptive entropy coding for next generation video |
WO2014160354A1 (en) | 2013-03-14 | 2014-10-02 | Georgia State University Research Foundation, Inc. | Inhibiting or reducing fungal growth |
US11185783B2 (en) | 2013-03-14 | 2021-11-30 | Sony Interactive Entertainment Inc. | Controller emulation for cloud gaming |
US20140274384A1 (en) | 2013-03-15 | 2014-09-18 | Electronic Arts Inc. | Delivering and consuming interactive video gaming content |
US9628332B2 (en) | 2013-05-20 | 2017-04-18 | Microsoft Technology Licensing, Llc | Resource allocation to game titles in a remote gaming environment |
US9339733B2 (en) | 2013-05-22 | 2016-05-17 | Wesley John Boudville | Barcode-based methods to enhance mobile multiplayer games |
CA2886282C (en) | 2013-05-23 | 2019-07-23 | Stephan Georgiev | Dynamic allocation of rendering resources in a cloud gaming system |
US10587663B2 (en) | 2013-05-31 | 2020-03-10 | Verily Life Sciences Llc | Video stream preview |
US9675874B1 (en) | 2013-07-18 | 2017-06-13 | nWay, Inc. | Multi-player gaming system |
US9723051B2 (en) | 2013-08-13 | 2017-08-01 | Criteo Sa | Setting first-party cookies by redirection |
US20150087414A1 (en) | 2013-09-26 | 2015-03-26 | Cellco Partnership D/B/A Verizon Wireless | Cloud gaming implemented using a mobile device and a display device |
JP6292707B2 (en) | 2013-10-22 | 2018-03-14 | 任天堂株式会社 | Information processing system, information processing apparatus, information processing program, and information processing method |
US9592446B2 (en) | 2013-12-13 | 2017-03-14 | DeNA Co., Ltd. | Electronic game providing device and non-transitory computer-readable storage medium storing electronic game program |
US20160293134A1 (en) | 2013-12-26 | 2016-10-06 | Square Enix Holdings Co., Ltd. | Rendering system, control method and storage medium |
JP6376638B2 (en) | 2014-01-29 | 2018-08-22 | 株式会社コロプラ | Server computer and game program related to game |
JP6528281B2 (en) | 2014-01-29 | 2019-06-12 | 国立研究開発法人産業技術総合研究所 | Method of preparing aqueous extract of Ashwagandha leaf with enhanced anticancer activity by use of cyclodextrin, and pharmaceutical composition containing Ashwagandha leaf |
US9912562B2 (en) | 2014-03-31 | 2018-03-06 | Microsoft Technology Licensing, Llc | Measuring latency in an interactive application |
US20150297998A1 (en) | 2014-04-16 | 2015-10-22 | Microsoft Corporation | Hyperlink initiation of game sessions |
US9928565B2 (en) | 2014-04-21 | 2018-03-27 | Qualcomm Incorporated | Flex rendering based on a render target in graphics processing |
GB2525437B (en) | 2014-04-25 | 2016-05-25 | Cheng Uei Prec Ind Co Ltd | Push-button structure |
US9940686B2 (en) | 2014-05-14 | 2018-04-10 | Intel Corporation | Exploiting frame to frame coherency in a sort-middle architecture |
KR20180102212A (en) * | 2014-06-13 | 2018-09-14 | 콘비다 와이어리스, 엘엘씨 | Automated service profiling and orchestration |
US9393486B2 (en) | 2014-06-27 | 2016-07-19 | Amazon Technologies, Inc. | Character simulation and playback notification in game session replay |
US20160005257A1 (en) | 2014-07-04 | 2016-01-07 | Trendy Entertainment | Influence system and methods |
WO2016014603A1 (en) | 2014-07-22 | 2016-01-28 | Sony Computer Entertainment America Llc | Save game load time reduction for cloud gaming |
US10021214B2 (en) | 2014-07-22 | 2018-07-10 | Microsoft Technology Licensing, Llc | Synthetic transactions between communication endpoints |
US9975044B2 (en) | 2014-07-22 | 2018-05-22 | Ngage SporTek Ltd. | System and method for social gaming |
US20170124812A1 (en) | 2014-12-12 | 2017-05-04 | Synergy Blue, Llc | Gaming and wagering techniques relating to skill-based gaming |
US10909809B2 (en) | 2014-12-12 | 2021-02-02 | Synergy Blue Llc | Graphical user interface and computer processing techniques for facilitating user interaction with electronic gaming devices |
US10255765B2 (en) | 2015-08-20 | 2019-04-09 | Synergy Blue, Llc | Gaming aspects relating to multiplayer/tournament hybrid arcade/wager-based games |
CN104598292B (en) | 2014-12-15 | 2017-10-03 | 中山大学 | A kind of self adaptation stream adaptation and method for optimizing resources applied to cloud game system |
US10007965B2 (en) | 2014-12-16 | 2018-06-26 | Intel Corporation | Dynamic kernel modification for graphics processing units |
US9396702B2 (en) | 2014-12-23 | 2016-07-19 | Sony Interactive Entertainment America Llc | Latency tester |
US20160279523A1 (en) | 2015-03-25 | 2016-09-29 | GAMEin30 Ltd. | System and method for interactive gaming |
US10130874B2 (en) | 2015-05-01 | 2018-11-20 | Microsoft Technology Licensing, Llc | Removable controller accessory for a game controller |
WO2016183253A1 (en) * | 2015-05-12 | 2016-11-17 | Equinix, Inc. | Programmable network platform for a cloud-based services exchange |
US9609275B2 (en) | 2015-07-08 | 2017-03-28 | Google Inc. | Single-stream transmission method for multi-user video conferencing |
US10135892B2 (en) | 2015-07-28 | 2018-11-20 | Google Llc | Independent control of interactive streaming media |
US9993729B2 (en) | 2015-08-19 | 2018-06-12 | Sony Interactive Entertainment America Llc | User save data management in cloud gaming |
US9946593B2 (en) | 2015-09-18 | 2018-04-17 | Salesforce.Com, Inc. | Recovery strategy for a stream processing system |
US11420114B2 (en) | 2015-09-30 | 2022-08-23 | Sony Interactive Entertainment LLC | Systems and methods for enabling time-shifted coaching for cloud gaming systems |
JP6646319B2 (en) | 2015-09-30 | 2020-02-14 | ソニー・インタラクティブエンタテインメント エルエルシー | Multi-user demo streaming service for cloud games |
US20170097816A1 (en) | 2015-10-01 | 2017-04-06 | Motorola Mobility Llc | Context-based applications for mobile devices |
US10630773B2 (en) | 2015-11-12 | 2020-04-21 | Nvidia Corporation | System and method for network coupled cloud gaming |
US20170185464A1 (en) * | 2015-12-29 | 2017-06-29 | Ca, Inc. | Detecting flapping in resource measurements |
US20170246544A1 (en) | 2016-02-26 | 2017-08-31 | Microsoft Technology Licensing, Llc | Video game streaming for spectating |
CN105749551B (en) | 2016-02-26 | 2019-04-30 | 网易（杭州）网络有限公司 | A kind of game trustship method, system and terminal |
US10456672B2 (en) | 2016-05-19 | 2019-10-29 | Google Llc | Methods and systems for facilitating participation in a game session |
US10046236B2 (en) | 2016-06-13 | 2018-08-14 | Sony Interactive Entertainment America, LLC | Browser-based cloud gaming |
US11351468B2 (en) | 2016-06-13 | 2022-06-07 | Sony Interactive Entertainment LLC | Generating challenges using a location based game play companion application |
US10521879B2 (en) | 2016-07-05 | 2019-12-31 | Ubitus, Inc. | Overlaying multi-source media in VRAM |
US10332296B2 (en) | 2016-07-05 | 2019-06-25 | Ubitus Inc. | Overlaying multi-source media in VRAM |
CN106328855B (en) | 2016-11-29 | 2019-06-04 | 宁德时代新能源科技股份有限公司 | Battery pack and battery module |
US10722803B2 (en) | 2017-02-15 | 2020-07-28 | Roblox Corporation | Integrated chat and game play platform |
US20180250591A1 (en) | 2017-03-02 | 2018-09-06 | The Fast Mind, LLC | Methods of circumventing platform restrictions in gaming |
US10512846B2 (en) | 2017-03-07 | 2019-12-24 | Sony Interactive Entertainment LLC | Emulating player behavior after player departure |
US10645139B2 (en) | 2017-04-06 | 2020-05-05 | Microsoft Technology Licensing, Llc | Network protocol for switching between plain text and compressed modes |
CN107670275B (en) | 2017-10-26 | 2020-10-13 | 广州市雷军游乐设备有限公司 | Method and system for disconnection and reconnection of game process |
WO2019126350A1 (en) | 2017-12-19 | 2019-06-27 | Advanta Computer, LLC | Systems and methods for networked computing |
US10792576B2 (en) | 2018-02-28 | 2020-10-06 | Sony Interactive Entertainment LLC | Player to spectator handoff and other spectator controls |
EP4276814A3 (en) | 2018-03-22 | 2023-12-20 | Google LLC | Methods and systems for rendering and encoding content for online interactive gaming sessions |
US11077364B2 (en) | 2018-04-02 | 2021-08-03 | Google Llc | Resolution-based scaling of real-time interactive graphics |
WO2019194953A1 (en) | 2018-04-02 | 2019-10-10 | Google Llc | Methods, devices, and systems for interactive cloud gaming |
US10773168B2 (en) | 2018-04-02 | 2020-09-15 | Google Llc | Temporary game control by user simulation following loss of active control |
WO2019195300A2 (en) | 2018-04-02 | 2019-10-10 | Google Llc | Input device for an electronic system |
CN111417978A (en) | 2018-04-10 | 2020-07-14 | 谷歌有限责任公司 | Memory management in game rendering |
US10950092B2 (en) | 2018-10-07 | 2021-03-16 | Synergy Blue Llc | Skillful multi-level games and gaming machines in which players are granted free play sessions |
WO2020102493A1 (en) | 2018-11-16 | 2020-05-22 | Google Llc | Shadow tracking of real-time interactive simulations for complex system analysis |
US11731043B2 (en) | 2019-11-19 | 2023-08-22 | Sony Interactive Entertainment Inc. | Adaptive graphics for cloud gaming |
US11128636B1 (en) | 2020-05-13 | 2021-09-21 | Science House LLC | Systems, methods, and apparatus for enhanced headsets |
-
2018
- 2018-10-09 EP EP24155063.1A patent/EP4336800A2/en active Pending
- 2018-10-09 WO PCT/US2018/055055 patent/WO2019074952A2/en unknown
- 2018-10-09 CN CN201880033465.3A patent/CN110678239B/en active Active
- 2018-10-09 EP EP18797260.9A patent/EP3600581B1/en active Active
-
2020
- 2020-04-09 US US16/844,937 patent/US11684849B2/en active Active
Patent Citations (9)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
CN1556958A (en) * | 2002-04-26 | 2004-12-22 | Multi-user application program interface | |
US20060287096A1 (en) * | 2005-06-20 | 2006-12-21 | Microsoft Corporation | Setting up on-line game sessions out of a game context |
US20060287099A1 (en) * | 2005-06-20 | 2006-12-21 | Microsoft Corporation | On-line gaming session and party management |
CN101312772A (en) * | 2005-09-12 | 2008-11-26 | 百利游戏有限公司 | System and method for gaming-content configuration and management system |
US20120209571A1 (en) * | 2011-02-14 | 2012-08-16 | Disney Enterprises, Inc. | Performance Metrics Gathering From Multiple Video Game Platforms |
US20130274000A1 (en) * | 2012-04-11 | 2013-10-17 | Meteor Entertainment, Inc. | Modifying use of resources within a cloud-based gaming platform |
US20140342819A1 (en) * | 2013-05-20 | 2014-11-20 | Microsoft Corporation | Game availability in a remote gaming environment |
CN104866699A (en) * | 2014-02-25 | 2015-08-26 | 上海征途信息技术有限公司 | Intelligent online game data analysis method |
CN107213641A (en) * | 2016-03-21 | 2017-09-29 | 电子技术公司 | The video synchronous with remote measurement in game |
Non-Patent Citations (1)
Title |
---|
HIMANSHU YADAV: "Adaptive_GPU_resource_scheduling_on_virtualized_servers_in_cloud_gaming", 《2017 CONFERENCE ON INFORMATION AND COMMUNICATION TECHNOLOGY》 * |
Cited By (6)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
CN111359220A (en) * | 2020-03-04 | 2020-07-03 | 深圳市腾讯网域计算机网络有限公司 | Game advertisement generation method and device and computer equipment |
CN111359220B (en) * | 2020-03-04 | 2023-06-13 | 深圳市腾讯网域计算机网络有限公司 | Game advertisement generation method and device and computer equipment |
CN111405562A (en) * | 2020-03-11 | 2020-07-10 | 中国科学院信息工程研究所 | Mobile malicious user identification method and system based on communication behavior rules |
CN112449203A (en) * | 2020-11-24 | 2021-03-05 | 广州虎牙科技有限公司 | Game live broadcast method and device, electronic equipment and storage medium |
CN113230665A (en) * | 2021-05-21 | 2021-08-10 | 珠海金山网络游戏科技有限公司 | Resource allocation method and device |
CN113230665B (en) * | 2021-05-21 | 2023-08-29 | 珠海金山数字网络科技有限公司 | Resource allocation method and device |
Also Published As
Publication number | Publication date |
---|---|
EP4336800A2 (en) | 2024-03-13 |
WO2019074952A2 (en) | 2019-04-18 |
EP3600581A2 (en) | 2020-02-05 |
EP3600581B1 (en) | 2024-02-21 |
WO2019074952A3 (en) | 2019-05-23 |
US11684849B2 (en) | 2023-06-27 |
CN110678239B (en) | 2024-02-09 |
US20200230499A1 (en) | 2020-07-23 |
Similar Documents
Publication | Publication Date | Title |
---|---|---|
CN110678239B (en) | Distributed sample-based game profiling with game metadata and metrics and game API platform supporting third party content | |
CN111526927B (en) | Temporary game control via user simulation after loss of active control | |
US11654354B2 (en) | Resolution-based scaling of real-time interactive graphics | |
JP6982684B2 (en) | How and system to schedule gameplay for video games | |
Laghari et al. | Quality of experience (QoE) in cloud gaming models: A review | |
US11662051B2 (en) | Shadow tracking of real-time interactive simulations for complex system analysis | |
US11593872B2 (en) | Immersive virtual entertainment system | |
KR101908473B1 (en) | Messaging for event live-stream | |
JP2018113066A (en) | Display control program, computer device, display control method, and display control system | |
CN110830735B (en) | Video generation method and device, computer equipment and storage medium | |
US20130304820A1 (en) | Network system with interaction mechanism and method of operation thereof | |
CN109416668A (en) | Control method, information processing unit and the program of information processing unit | |
US20130305158A1 (en) | Network system with reaction mechanism and method of operation thereof | |
JP7419555B2 (en) | Methods for virtual influencer behavior based on predicted gaming activity and audience characteristics | |
JP2022521012A (en) | Transactional memory synchronization | |
US20170304727A1 (en) | User Save Data Migration Based on Location Information | |
JP7419554B2 (en) | Surfacing pre-recorded gameplay videos for in-game player assistance | |
CN109495427A (en) | Multi-medium data methods of exhibiting, device, storage medium and computer equipment | |
JP2022525880A (en) | Server load prediction and advanced performance measurement | |
CN109766046B (en) | Interactive operation execution method and device, storage medium and electronic device | |
KR20230030499A (en) | Electronic device, method, and computer readable storage medium for providing function regarding game service |
Legal Events
Date | Code | Title | Description |
---|---|---|---|
PB01 | Publication | ||
PB01 | Publication | ||
SE01 | Entry into force of request for substantive examination | ||
SE01 | Entry into force of request for substantive examination | ||
GR01 | Patent grant | ||
GR01 | Patent grant |