US8560477B1 - Graph-based semi-supervised learning of structured tagging models - Google Patents
Graph-based semi-supervised learning of structured tagging models Download PDFInfo
- Publication number
- US8560477B1 US8560477B1 US12/901,356 US90135610A US8560477B1 US 8560477 B1 US8560477 B1 US 8560477B1 US 90135610 A US90135610 A US 90135610A US 8560477 B1 US8560477 B1 US 8560477B1
- Authority
- US
- United States
- Prior art keywords
- pos
- vertex
- graph
- vertices
- gram
- Prior art date
- Legal status (The legal status is an assumption and is not a legal conclusion. Google has not performed a legal analysis and makes no representation as to the accuracy of the status listed.)
- Active, expires
Links
Images
Classifications
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06N—COMPUTING ARRANGEMENTS BASED ON SPECIFIC COMPUTATIONAL MODELS
- G06N20/00—Machine learning
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F18/00—Pattern recognition
- G06F18/20—Analysing
- G06F18/23—Clustering techniques
- G06F18/232—Non-hierarchical techniques
- G06F18/2323—Non-hierarchical techniques based on graph theory, e.g. minimum spanning trees [MST] or graph cuts
Definitions
- This specification relates to digital data processing and, in particular, part-of-speech tagging.
- SSL Semi-supervised learning
- Annotating training data for all sub-domains of a varied domain such as all of Web text can be impractical, giving impetus to the development of SSL techniques that can learn from unlabeled data to perform well across domains.
- An early SSL algorithm is self-training, where one makes use of a previously trained model to annotate unlabeled data which is then used to re-train the model. While self-training is widely used and can yield good results in some applications, it has no theoretical guarantees except under certain stringent conditions.
- SSL methods include co-training, transductive support vector machines (TSVM), and graph-based algorithms.
- TSVM transductive support vector machines
- a majority of SSL algorithms are computationally expensive; for example, solving a TSVM exactly is intractable.
- Graph-based SSL algorithms are an important subclass of SSL techniques that have received attention in the recent past as they can outperform other approaches and also scale easily to large problems.
- the data both labeled and unlabeled
- Graph edges link vertices that are likely to have the same label.
- Edge weights govern how strongly the labels of the nodes linked by the edge should agree.
- one innovative aspect of the subject matter described in this specification can be embodied in methods that include the actions of creating a graph having a plurality of unique vertices in which vertices in a first set of vertices represent n-grams that are each associated with a respective part-of-speech (POS) and that were derived from labeled source domain text, and in which vertices in a different second set of vertices represent n-grams that are not associated with a POS and that were derived from unlabeled target domain text; for different pairs of vertices in the plurality of vertices in which at least one vertex in the pair is in the second set of vertices, and at least one vertex in the pair is a k-nearest neighbor of the other vertex in the pair where k is greater than 1, determining respective features of each vertex in the pair based at least partially on features of words that surround occurrences of the particular vertex's n-gram in the source or target domain
- N-grams can be trigrams.
- the source and target domain text can comprise sentences in a natural language of the source domain.
- the respective features of the pair can be represented by point-wise mutual information vectors.
- the respective measure of similarity can be a cosine distance between the vectors.
- the respective features can include left and right word contexts.
- the similarity graph can be used to decode target domain text.
- a POS associated with a first vertex in the graph can be propagated to a second vertex in the graph based on a weight of an edge between the first vertex and the second vertex.
- POS part-of-speech
- the second natural language can be English.
- the n-grams can be trigrams.
- the respective features of the pair can be represented by point-wise mutual information vectors.
- the respective measure of similarity can be a cosine distance between the vectors.
- the respective features can include left and right word contexts.
- the graph can be used decode unlabeled data from the source domain text.
- a computer-implemented method comprising: training a semi-supervised statistical model on unlabeled text from a target domain, in which parameters of the semi-supervised statistical model are initialized based on those of a second statistical model trained on labeled text from a source domain; determining one or more respective part-of-speech (POS) probabilities for each of a plurality of unique n-grams in the unlabeled target domain text using the trained semi-supervised statistical model; smoothing the one or more determined POS probabilities using a similarity graph constructed over the labeled source domain text; and labeling one or more of the n-grams with a respective POS based on a combination of the particular n-gram's respective determined probabilities and smoothed probabilities.
- Other embodiments of this aspect include corresponding systems, apparatus, and computer programs, configured to perform the actions of the methods, encoded on computer storage devices.
- a third statistical model can be trained based on the labeled n-grams.
- the semi-supervised, second and third statistical models can be conditional random fields. Smoothing the one or more determined POS probabilities for a respective n-gram can be based on an edge weight between a first vertex in the similarity graph that represents the respective n-gram and a different, second vertex in the similarity graph that represents a different n-gram that is associated with a POS.
- An n-gram can be a trigram.
- the source domain can be English language newswire and the target domain is biomedical literature.
- the source domain can be English language newswire and the target domain comprises user queries.
- the source domain can be English language newswire and the target domain is newswire from a different natural language.
- aspects described herein provide a simple, scalable algorithm for training structured prediction models in a semi-supervised manner.
- One aspect is based on using a nearest-neighbor graph constructed over trigram types as a regularizer.
- Implementations include a scalable algorithm for semi-supervised training of conditional random fields (CRF) and its application to part of speech (POS) tagging.
- CRF conditional random fields
- POS part of speech
- the algorithm uses a similarity graph to encourage similar n-grams to have similar POS tags. It is assumed that text labeled with POS tags is available for the source domain. However we are interested in building a POS tagger for the target domain, for which no labeled data is available.
- the source and target domains can be different genres of text from one language (e.g., newswire and poetry) or two different languages (e.g., English and French).
- the graph is used during training to relate the two domains to each other. By smoothing the state posteriors on the target domain, it is possible to learn a more accurate target domain model.
- Particular implementations of the subject matter described in this specification can be implemented so as to realize one or more of the following advantages.
- Particular implementations can be inductive.
- the similarity graph is used to relate different genres of the same language to each other.
- Ambiguous words e.g., ‘book’ can be a verb or a noun
- the technique makes it possible to learn different models for each genre, without having human annotated data from each genre.
- the similarity graph is used to relate similar n-grams from two different natural languages to each other.
- the similarity graph can be used to propagate knowledge about the part-of-speech distribution in one language to the other language.
- Techniques described herein are able to scale to very large problems and yield improved target domain accuracy.
- the techniques are scalable because they include training using efficient standard building blocks for CRF inference and learning, and for graph label propagation. Because graph regularizer computations are used only during training, at test time standard CRF inference can be used.
- FIGS. 1A-C present tables that describe extracted features, domain adaptation experiments, and analysis of graphs, respectively.
- FIG. 2 shows an excerpt from an example similarity graph.
- FIG. 3 presents a flow chart of an example technique for constructing a similarity graph to be used as a graph regularizer.
- FIG. 4 presents a flow chart of an example technique for building a part-of-speech tagger for a resource poor language.
- FIG. 5 is a schematic diagram of an example system configured to build a part-of-speech tagger.
- FIG. 6 presents a flow chart of an example semi-supervised learning algorithm for tagging-specific problems.
- a CRF is trained on the source domain labeled data, and then the CRF is used to decode unlabeled data from the target domain.
- the state posteriors on the target domain are then smoothed using a graph regularizer. Best state sequences for the unlabeled target are then be created by Viterbi decoding with the smoothed state posteriors, and this automatic target domain annotation is combined with the labeled source domain data to retrain the CRF.
- the goal is to learn a CRF of the form
- ⁇ 2 is the squared 12-norm and acts as the regularizer
- ⁇ is a trade-off parameter whose setting is discussed below.
- Unlabeled data D u from the target domain can be used for training the CRF. First described is how to construct a similarity graph over the unlabeled data that will be used in varies implementations as a graph regularizer.
- Graph construction is an important step in graph-based SSL.
- a standard approach for unstructured problems is to construct a graph whose vertices are labeled and unlabeled examples, and whose weighted edges encode the degree to which the examples they link want to have the same label. See, e.g., Xiaojin Zhu, Zoubin Ghahramani, and John Lafferty, S EMI - SUPERVISED LEARNING USING G AUSSIAN FIELDS AND HARMONIC FUNCTIONS , Proceedings of the International Conference on Machine Learning (2003), which is incorporated by reference in its entirety.
- One graph construction choice is what measure of example similarity to use for the weighted edges between examples. However, in structured problems the situation can be more complicated.
- the set V of graph vertices consists of all the word n-grams (types) that have occurrences (tokens) in training sentences (labeled and unlabeled; n-grams padded with appropriate dummy symbols at sentence begin and end).
- types u and v can be linked with an edge of weight w uv when w uv >0:
- w uv ⁇ sim ⁇ ( u , v ) if ⁇ ⁇ v ⁇ K ⁇ ( u ) ⁇ ⁇ or ⁇ ⁇ u ⁇ K ⁇ ( v ) 0 otherwise ( 2 )
- K(u) is the set of k-nearest neighbors of u according to the given similarity.
- a set of context features are extracted. For example, for the token x 2 x 3 x 4 occurring in the sequence x 1 x 2 x 3 x 4 x 5 , features are extracted that capture the left (x 1 x 2 ) and right contexts (x 4 x 5 ). Additionally, features can be extracted based on eight discriminating suffixes of the word in the middle. In some implementations, the features illustrated in TABLE 1 ( FIG. 1A ) can be used. For each type, a vector of point-wise mutual information (PMI) values is computed between the type and each of the features that occur with tokens of that type. Finally, the cosine distance between those PMI vectors is used to determine type similarity. The graph so constructed captures significant local information about the contexts that favor particular tags.
- PMI point-wise mutual information
- FIG. 2 shows an excerpt from an example similarity graph 200 .
- the figure shows the local neighborhoods of a subset of the vertices with the center word ‘book.’ To reduce clutter, only closest neighbors and the edges that involve the nodes of interest are illustrated. It is remarkable that the local neighborhoods are coherent, showing very similar syntactic configurations. Furthermore, different vertices that (should) have the same label are close to each other, while the noun (NN) and verb (VB) interpretations are far apart, forming disjoint connected components.
- the similarity graph can provide information that cannot be expressed directly in a sequence model. In particular, it may not be possible in a CRF to directly enforce that similar trigrams appearing in different sentences should have similar POS tags. This constraint however is important during (semi-supervised) learning, and is what makes the approaches taken in various implementations different and more effective than self-training.
- the graph allows new features to be discovered. Many words occur only in the unlabeled data and a purely supervised CRF may not be able to learn feature weights for those observations. While self-training could be used to learn weights for those features, self-training just tends to reinforce the knowledge that the supervised model already has.
- the similarity graph on the other hand can link events that occur only in the unlabeled data to similar events in the labeled data. Furthermore, because the graph is built over types rather than tokens, it can enforce that the same interpretation is chosen for similar trigrams occurring in different sentences. For example, the word ‘unrar’ 202 will most likely not occur in the labeled training data.
- the graph can be used to propagate adjustments to the weights of known features. Many words occur only a handful of times in labeled data, resulting in poor estimates of their contributions. Even for frequently occurring events, their distribution in the target domain might be different from their distribution in the source domain. While self-training might be able to help adapt to such domain changes, its effectiveness can be limited because the model will always be inherently biased towards the source domain. In contrast, labeled vertices in the similarity graph can help disambiguate ambiguous contexts and correct (some of) the errors of the supervised model.
- FIG. 3 presents a flow chart of an example technique 300 for constructing a similarity graph to be used as a graph regularizer.
- a graph (e.g., similarity graph 200 ) is created that has vertices in which a first set of vertices represent n-grams that are each associated with a respective POS and that were derived from labeled source domain text, and in which a second set of vertices represent n-grams that are not associated with a POS and that were derived from unlabeled target domain text ( 302 ).
- respective features of each vertex in the pair are determined based at least partially on features of words that surround occurrences of the particular vertex's n-gram in the source or target domain text ( 304 ).
- at least one vertex in the pair is in the second set of vertices, and at least one vertex in the pair is a k-nearest neighbor of the other vertex in the pair.
- a respective measure of similarity is then calculated between the vertices in each of the pairs based at least partially on a distance between the respective features of the pair, and used to weight a graph edge between the pair ( 306 ).
- Supervised machine learning approaches have advanced the state-of-the-art on a variety of tasks in natural language processing, resulting in highly accurate systems.
- Supervised POS taggers for example, can approach the level of inter-annotator agreement.
- supervised methods rely on labeled training data, which is time-consuming and expensive to generate. It is therefore unrealistic to expect labeled data to be available for each task and every language, limiting the applicability of supervised learning.
- Unsupervised learning approaches appear to be a natural solution to this problem, as they require only un-annotated plain text for training models. Unfortunately, even though unsupervised approaches have received much attention lately, the gap between unsupervised and supervised performance still remains substantial.
- a POS tagger is constructed for a resource-poor language assuming that there exists a POS tagger for a first language (e.g., English) and parallel text between the first language and the resource-poor language.
- the parallel text can be aligned using a standard word alignment tool, for instance.
- a bilingual graph is constructed over trigram types for the resource-poor language, where the node labels correspond to the POS tag of the middle word in a trigram, for example. The edge weights in this graph indicate how likely it is that two connected nodes have the same label.
- a similarity function based on co-occurrence features can be used to compute these edge weights.
- the resource-poor language nodes can be connected to the first language nodes based on high-confidence word-alignments. Since there is a labeled POS tagging corpus for the first language, we can use a supervised first language POS tagger to generate labels for the graph nodes. Label propagation is then used to transfer the labels to graph nodes that represent the resource-poor language.
- FIG. 4 presents a flow chart of an example technique 400 for building a POS tagger for a resource poor language.
- a similarity graph is created that has a plurality of unique vertices in which the vertices represent n-grams that were derived from unlabeled source domain text in a first natural language ( 402 ).
- respective features of each vertex in the pair are determined based at least partially on features of words that surround occurrences of the particular vertex's n-gram in the source domain text ( 404 ).
- a respective measure of similarity between the vertices in each of the pairs is calculated based at least partially on a distance between the respective features of the pair and used to weight a graph edge between the pair ( 406 ).
- a respective POS is assigned to one or more vertices in a plurality of the graph vertices in which the respective POS corresponds to a POS of a respective n-gram in a target domain text that is in a different second natural language ( 408 ).
- Assigning the respective POS to the one or more vertices comprises determining that the respective n-gram in the target domain text is similar to the n-gram represented by the particular vertex based on co-occurrences of both n-grams in one or more natural languages.
- An assigned POS associated with a first vertex in the graph is then propagated to a second vertex in the graph based on a weight of an edge between the first vertex and the second vertex ( 410 ).
- the graph is used as a smoothness regularizer to train CRFs in a semi-supervised manner.
- ⁇ (s) (s stands for source domain) represent the optimal value of the parameters obtained during this step.
- the algorithm is described in the following sections.
- Set ⁇ 0 (t) ⁇ (s) , the source domain CRF parameters.
- x i , ⁇ n (t) ) ⁇ j ⁇ N i ,i ⁇ D l are computed over POS tags for every word position j for i indexing over sentences in D l ⁇ D u .
- the similarity graph is defined over types while the posteriors computed above involve particular tokens.
- token-based marginals are accumulated to create type marginals as follows.
- T(i, j) be the n-gram (graph node) with middle word at position j; conversely, for a n-gram u, let T l (u) be the set of occurrences of type u, that is, all pairs (i, j) where i is the index of a sentence where u occurs and j is the position of the center word of an occurrence of u in that sentence.
- the type-level posteriors can be calculated follows:
- c ⁇ ( q ) ⁇ u ⁇ V l ⁇ ⁇ r u - q u ⁇ 2 + ⁇ ⁇ ⁇ u ⁇ V , v ⁇ N ⁇ ( i ) ⁇ w uv ⁇ ⁇ q u - q v ⁇ 2 + v ⁇ ⁇ u ⁇ V ⁇ ⁇ q u - U ⁇ 2 ⁇ s . t .
- the graph propagation objective can be seen as a multi-class generalization of the quadratic cost criterion. See Y. Bengio, O. Delalleau, and N. L. Roux, S EMI -S UPERVISED L EARNING , chapter L ABEL P ROPOGATION AND Q UADRATIC C RITERION , MIT Press (2007), which is included by reference in its entirety.
- the first term in the above objective requires that the information in the labeled data be respected.
- the second term is the graph smoothness regularizer which requires that the q i 's be smooth with respect to the graph. In other words, if w uv is large, then q u and q v should be close in the squared-error sense.
- q u ( m ) ⁇ ( y ) ⁇ u ⁇ ( y ) ⁇ u ⁇
- ⁇ ⁇ u ⁇ ( y ) r u ⁇ ( y ) ⁇ ⁇ ⁇ ( u ⁇ V l ) + ⁇ v ⁇ N ⁇ ( u ) ⁇ w uv ⁇ q v ( m - 1 ) ⁇ ( y ) + vU ⁇ ( y )
- ⁇ ⁇ ⁇ u ⁇ ⁇ ( u ⁇ V l ) + v + ⁇ ⁇ ⁇ v ⁇ N ⁇ ( u ) ⁇ w uv ( 4 )
- m is the iteration index
- ⁇ is the indicator function that returns 1 in some implementations if and only if the condition is true.
- a combination of the type marginals obtained from the graph and the CRF can be used to tag the unlabeled data in some implementations.
- the following interpolated tag marginal can be calculated:
- ⁇ is a mixing coefficient which reflects the relative confidence between the original posteriors from the CRF and the smoothed posteriors from the graph. How a can be set is described below.
- the interpolated marginals summarize all the information obtained so far about the tag distribution at each position, if they are used alone to select a POS tagging for each unlabeled sentence, the first-order dependencies tag dependencies modeled by the CRF could be ignored. Therefore, in some implementations, a single POS tagging is selected for each unlabeled sentence by Viterbi decoding of the combined interpolated marginals and the CRF transition potentials. These 1-best transcripts are referred to as y i *,i ⁇ D u .
- the target domain one-best transcriptions obtained above is used in conjunction with the source domain labeled data to train a CRF:
- x i ; ⁇ n ( t ) ) - ⁇ ⁇ ⁇ i l + 1 l + u ⁇ log ⁇ ⁇ p ⁇ ( y i *
- ⁇ and ⁇ are hyper-parameters whose setting is discussed below. It is important to note that every step of the algorithm is convex, although their combination clearly is not.
- FIG. 5 is a schematic diagram of an example system 500 configured to build a part-of-speech tagger.
- the system 500 generally consists of a server 502 .
- the server 502 is optionally connected to one or more user or client computers 590 through a network 580 (e.g., the Internet).
- the server 502 consists of one or more data processing apparatuses. While only one data processing apparatus is shown, multiple data processing apparatuses can be used in one or more locations.
- the server 502 includes various modules, e.g., executable software programs, including a posterior decoder 504 configured to computer marginal probabilities over POS tags, a type mapper 506 configured to map tokens in a CRF to types in a graph, a graph propagator 508 configured to smooth type-level marginals, a Viterbi decoder 510 configured to tag unlabeled data using type marginals obtained from the graph and the CRF, and a CRF retrainer 530 configured to train a CRF using target domain 1-best transcriptions.
- executable software programs including a posterior decoder 504 configured to computer marginal probabilities over POS tags, a type mapper 506 configured to map tokens in a CRF to types in a graph, a graph propagator 508 configured to smooth type-level marginals, a Viterbi decoder 510 configured to tag unlabeled data using type marginals obtained from the graph and the CRF, and a CRF retrainer 530 configured to train a CRF using
- Each module runs as part of the operating system on the server 502 , runs as an application on the server 502 , or runs as part of the operating system and part of an application on the server 502 , for instance.
- the software modules can be distributed on one or more data processing apparatus connected by one or more networks or other suitable communication mediums.
- the server 502 also includes hardware or firmware devices including one or more processors 512 , one or more additional devices 514 , a computer readable medium 516 , a communication interface 518 , and one or more user interface devices 520 .
- Each processor 512 is capable of processing instructions for execution within the server 502 .
- the processor 512 is a single or multi-threaded processor.
- Each processor 512 is capable of processing instructions stored on the computer readable medium 516 or on a storage device such as one of the additional devices 514 .
- the server 502 can use its communication interface 518 to communicate with one or more computers 590 , for example, over a network 580 .
- Examples of user interface devices 520 include a display, a camera, a speaker, a microphone, a tactile feedback device, a keyboard, and a mouse.
- the server 502 can store instructions that implement operations associated with the modules described above, for example, on the computer readable medium 516 or one or more additional devices 514 , for example, one or more of a floppy disk device, a hard disk device, an optical disk device, or a tape device.
- FIG. 6 presents a flow chart of an example semi-supervised learning algorithm for tagging-specific problems.
- a semi-supervised statistical model e.g., a CRF
- a target domain e.g., by the posterior decoder 504
- parameters of the semi-supervised statistical model are initialized based on those of a second statistical model (e.g., another CRF) trained on labeled text from a source domain ( 602 ).
- One or more respective part-of-speech (POS) probabilities for each of a plurality of unique n-grams in the unlabeled target domain text are then determined (e.g., by the type mapper 506 ) using the trained semi-supervised statistical model ( 604 ).
- POS part-of-speech
- the one or more determined POS probabilities are smoothed (e.g., by the graph propagator) using a similarity graph constructed over the labeled source domain text ( 606 ).
- One or more of the n-grams are labeled with a respective POS based on a combination of the particular n-gram's respective determined probabilities and smoothed probabilities ( 608 ; e.g., by the Viterbi decoder 510 ).
- a new statistical model e.g., a CRF
- the QuestionBank (see J. Judge, A. Cahill, and J. van Genabith, Q UESTION - BANK : C REATING A CORPUS OF PARSE - ANNOTATED QUESTIONS , In Proceedings of the 21st International Conference on Computational Linguistics and 44th Annual Meeting of the Association for Computational Linguistics, pages 497-504 (2006)), provides an excellent corpus consisting of 4,000 questions that were manually annotated with POS tags and parse trees. We used the first half as our development set and the second half as our test set. Questions are difficult to tag with WSJ-trained taggers primarily because the word order is very different than that of the mostly declarative sentences in the training data.
- the unknown word rate is more than twice as high as on the in-domain development set (7.29% vs. 3.39%).
- BioTreebank For our second target domain we use the BioTreebank. This corpus consists of 1,061 sentences that have been manually annotated with POS tags. We used the first 500 sentences as a development set and the remaining 561 sentences as our final test set. The high unknown word rate (23.27%) makes this corpus very difficult to tag. Furthermore, the POS tag set for this data is a super-set of the Penn Treebank's, including the two new tags HYPH (for hyphens) and AFX (for common post-modifiers of biomedical entities such as genes). These tags were introduced due to the importance of hyphenated entities in biomedical text, and are used for 1.8% of the words in the test set. Any tagger trained only on WSJ text will automatically predict wrong tags for those words.
- FIG. 1B shows the results for both domains.
- the supervised CRF performs at only 85% on the development set. While it is almost impossible to improve in-domain tagging accuracy and tagging is therefore considered a solved problem by many, these results clearly show that the problem is far from solved.
- Self-training improves over the baseline by about 0.6% on the development set. However the gains from self-training are more modest (0.2%) on the evaluation (test) set.
- Our approach is able to provide a more solid improvement of about 3% over the supervised baseline and about 2% over the self-trained system on the question development set. Unlike self-training, on the question evaluation set, our approach provides about 3% improvement over the supervised baseline.
- Embodiments of the subject matter and the operations described in this specification can be implemented in digital electronic circuitry, or in computer software, firmware, or hardware, including the structures disclosed in this specification and their structural equivalents, or in combinations of one or more of them.
- Embodiments of the subject matter described in this specification can be implemented as one or more computer programs, i.e., one or more modules of computer program instructions, encoded on computer storage medium for execution by, or to control the operation of, data processing apparatus.
- the program instructions can be encoded on an artificially-generated propagated signal, e.g., a machine-generated electrical, optical, or electromagnetic signal, that is generated to encode information for transmission to suitable receiver apparatus for execution by a data processing apparatus.
- a computer storage medium can be, or be included in, a computer-readable storage device, a computer-readable storage substrate, a random or serial access memory array or device, or a combination of one or more of them.
- a computer storage medium is not a propagated signal, a computer storage medium can be a source or destination of computer program instructions encoded in an artificially-generated propagated signal.
- the computer storage medium can also be, or be included in, one or more separate physical components or media (e.g., multiple CDs, disks, or other storage devices).
- the operations described in this specification can be implemented as operations performed by a data processing apparatus on data stored on one or more computer-readable storage devices or received from other sources.
- the term “data processing apparatus” encompasses all kinds of apparatus, devices, and machines for processing data, including by way of example a programmable processor, a computer, a system on a chip, or multiple ones, or combinations, of the foregoing
- the apparatus can include special purpose logic circuitry, e.g., an FPGA (field programmable gate array) or an ASIC (application-specific integrated circuit).
- the apparatus can also include, in addition to hardware, code that creates an execution environment for the computer program in question, e.g., code that constitutes processor firmware, a protocol stack, a database management system, an operating system, a cross-platform runtime environment, a virtual machine, or a combination of one or more of them.
- the apparatus and execution environment can realize various different computing model infrastructures, such as web services, distributed computing and grid computing infrastructures.
- a computer program (also known as a program, software, software application, script, or code) can be written in any form of programming language, including compiled or interpreted languages, declarative or procedural languages, and it can be deployed in any form, including as a stand-alone program or as a module, component, subroutine, object, or other unit suitable for use in a computing environment.
- a computer program may, but need not, correspond to a file in a file system.
- a program can be stored in a portion of a file that holds other programs or data (e.g., one or more scripts stored in a markup language document), in a single file dedicated to the program in question, or in multiple coordinated files (e.g., files that store one or more modules, sub-programs, or portions of code).
- a computer program can be deployed to be executed on one computer or on multiple computers that are located at one site or distributed across multiple sites and interconnected by a communication network.
- the processes and logic flows described in this specification can be performed by one or more programmable processors executing one or more computer programs to perform actions by operating on input data and generating output.
- the processes and logic flows can also be performed by, and apparatus can also be implemented as, special purpose logic circuitry, e.g., an FPGA (field programmable gate array) or an ASIC (application-specific integrated circuit).
- processors suitable for the execution of a computer program include, by way of example, both general and special purpose microprocessors, and any one or more processors of any kind of digital computer.
- a processor will receive instructions and data from a read-only memory or a random access memory or both.
- the essential elements of a computer are a processor for performing actions in accordance with instructions and one or more memory devices for storing instructions and data.
- a computer will also include, or be operatively coupled to receive data from or transfer data to, or both, one or more mass storage devices for storing data, e.g., magnetic, magneto-optical disks, or optical disks.
- mass storage devices for storing data, e.g., magnetic, magneto-optical disks, or optical disks.
- a computer need not have such devices.
- a computer can be embedded in another device, e.g., a mobile telephone, a personal digital assistant (PDA), a mobile audio or video player, a game console, a Global Positioning System (GPS) receiver, or a portable storage device (e.g., a universal serial bus (USB) flash drive), to name just a few.
- Devices suitable for storing computer program instructions and data include all forms of non-volatile memory, media and memory devices, including by way of example semiconductor memory devices, e.g., EPROM, EEPROM, and flash memory devices; magnetic disks, e.g., internal hard disks or removable disks; magneto-optical disks; and CD-ROM and DVD-ROM disks.
- the processor and the memory can be supplemented by, or incorporated in, special purpose logic circuitry.
- a computer having a display device, e.g., a CRT (cathode ray tube) or LCD (liquid crystal display) monitor, for displaying information to the user and a keyboard and a pointing device, e.g., a mouse or a trackball, by which the user can provide input to the computer.
- a display device e.g., a CRT (cathode ray tube) or LCD (liquid crystal display) monitor
- keyboard and a pointing device e.g., a mouse or a trackball
- Other kinds of devices can be used to provide for interaction with a user as well; for example, feedback provided to the user can be any form of sensory feedback, e.g., visual feedback, auditory feedback, or tactile feedback; and input from the user can be received in any form, including acoustic, speech, or tactile input.
- a computer can interact with a user by sending documents to and receiving documents from a device that is used by the user; for example, by sending web pages to a
- Embodiments of the subject matter described in this specification can be implemented in a computing system that includes a back-end component, e.g., as a data server, or that includes a middleware component, e.g., an application server, or that includes a front-end component, e.g., a client computer having a graphical user interface or a Web browser through which a user can interact with an implementation of the subject matter described in this specification, or any combination of one or more such back-end, middleware, or front-end components.
- the components of the system can be interconnected by any form or medium of digital data communication, e.g., a communication network.
- Examples of communication networks include a local area network (“LAN”) and a wide area network (“WAN”), an inter-network (e.g., the Internet), and peer-to-peer networks (e.g., ad hoc peer-to-peer networks).
- LAN local area network
- WAN wide area network
- inter-network e.g., the Internet
- peer-to-peer networks e.g., ad hoc peer-to-peer networks.
- the computing system can include clients and servers.
- a client and server are generally remote from each other and typically interact through a communication network. The relationship of client and server arises by virtue of computer programs running on the respective computers and having a client-server relationship to each other.
- a server transmits data (e.g., an HTML page) to a client device (e.g., for purposes of displaying data to and receiving user input from a user interacting with the client device).
- client device e.g., for purposes of displaying data to and receiving user input from a user interacting with the client device.
- Data generated at the client device e.g., a result of the user interaction
Abstract
Description
for the target domain. In the above, Λ={λ1, . . . , λK}ε
Here ∥Λ∥2 is the squared 12-norm and acts as the regularizer, and γ is a trade-off parameter whose setting is discussed below. Unlabeled data Du from the target domain can be used for training the CRF. First described is how to construct a similarity graph over the unlabeled data that will be used in varies implementations as a graph regularizer.
where K(u) is the set of k-nearest neighbors of u according to the given similarity. In some implementations, n=3 and k=5.
The above combination rule connects the token-centered world of the CRF to type-centered world of the graph. Other ways of combining the token marginals, such as using weights derived from the entropies of marginals, are possible.
where q={q1, q2, . . . q|V|}, μ and v are hyper-parameters whose choice is discussed below, N(u) is the set of neighbors of node u, ∥qu−qv∥2=Σy(qu(y)−qu(y))2, ru is the empirical marginal label distribution for trigram u in the labeled data, and U is the uniform distribution over the possible labels Y. It can be shown that the above objective is convex in q.
where m is the iteration index and δ is the indicator function that returns 1 in some implementations if and only if the condition is true. The iterative procedure starts with qu (0)(y)=qu(y) as given in the previous section. In our experiments we run ten iterations of the above algorithm, and we denote by the type marginals at completion by qu*(y).
where α is a mixing coefficient which reflects the relative confidence between the original posteriors from the CRF and the smoothed posteriors from the graph. How a can be set is described below.
where η and γ are hyper-parameters whose setting is discussed below. It is important to note that every step of the algorithm is convex, although their combination clearly is not.
Claims (21)
Priority Applications (1)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US12/901,356 US8560477B1 (en) | 2010-10-08 | 2010-10-08 | Graph-based semi-supervised learning of structured tagging models |
Applications Claiming Priority (1)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US12/901,356 US8560477B1 (en) | 2010-10-08 | 2010-10-08 | Graph-based semi-supervised learning of structured tagging models |
Publications (1)
Publication Number | Publication Date |
---|---|
US8560477B1 true US8560477B1 (en) | 2013-10-15 |
Family
ID=49321587
Family Applications (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
US12/901,356 Active 2031-05-08 US8560477B1 (en) | 2010-10-08 | 2010-10-08 | Graph-based semi-supervised learning of structured tagging models |
Country Status (1)
Country | Link |
---|---|
US (1) | US8560477B1 (en) |
Cited By (16)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20130254153A1 (en) * | 2012-03-23 | 2013-09-26 | Nuance Communications, Inc. | Techniques for evaluation, building and/or retraining of a classification model |
US20130282628A1 (en) * | 2012-04-20 | 2013-10-24 | Unbound Concepts, Llc | Method and Apparatus for Performing Dynamic Textual Complexity Analysis Using Machine Learning Artificial Intelligence |
US20150169549A1 (en) * | 2013-12-13 | 2015-06-18 | Google Inc. | Cross-lingual discriminative learning of sequence models with posterior regularization |
WO2015123542A1 (en) * | 2014-02-14 | 2015-08-20 | Medaware Systems, Inc. | Biomedical research database development and uses |
US9311299B1 (en) * | 2013-07-31 | 2016-04-12 | Google Inc. | Weakly supervised part-of-speech tagging with coupled token and type constraints |
US20160335249A1 (en) * | 2015-05-14 | 2016-11-17 | Fuji Xerox Co., Ltd. | Information processing apparatus, information processing method, and non-transitory computer readable medium |
US9659560B2 (en) | 2015-05-08 | 2017-05-23 | International Business Machines Corporation | Semi-supervised learning of word embeddings |
US10185713B1 (en) * | 2015-09-28 | 2019-01-22 | Amazon Technologies, Inc. | Optimized statistical machine translation system with rapid adaptation capability |
US10268684B1 (en) | 2015-09-28 | 2019-04-23 | Amazon Technologies, Inc. | Optimized statistical machine translation system with rapid adaptation capability |
US10326863B2 (en) | 2017-01-21 | 2019-06-18 | Adp, Llc | Speed and accuracy of computers when resolving client queries by using graph database model |
CN111191445A (en) * | 2018-11-15 | 2020-05-22 | 北京京东金融科技控股有限公司 | Advertisement text classification method and device |
US10679088B1 (en) * | 2017-02-10 | 2020-06-09 | Proofpoint, Inc. | Visual domain detection systems and methods |
US11094015B2 (en) | 2014-07-11 | 2021-08-17 | BMLL Technologies, Ltd. | Data access and processing system |
US11200883B2 (en) | 2020-01-10 | 2021-12-14 | International Business Machines Corporation | Implementing a domain adaptive semantic role labeler |
US20230104607A1 (en) * | 2021-10-01 | 2023-04-06 | International Business Machines Corporation | Linguistic transformation based relationship discovery for transaction validation |
US11868851B2 (en) * | 2015-03-11 | 2024-01-09 | Symphonyai Sensa Llc | Systems and methods for predicting outcomes using a prediction learning model |
Citations (8)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US6278967B1 (en) * | 1992-08-31 | 2001-08-21 | Logovista Corporation | Automated system for generating natural language translations that are domain-specific, grammar rule-based, and/or based on part-of-speech analysis |
US20060190492A1 (en) * | 2005-02-21 | 2006-08-24 | Siemens Aktiengesellschaft | Data processor and method for processing medical text |
US20080154577A1 (en) * | 2006-12-26 | 2008-06-26 | Sehda,Inc. | Chunk-based statistical machine translation system |
US20080177545A1 (en) * | 2007-01-19 | 2008-07-24 | Microsoft Corporation | Automatic reading tutoring with parallel polarized language modeling |
US20090271177A1 (en) * | 2004-11-04 | 2009-10-29 | Microsoft Corporation | Extracting treelet translation pairs |
US7809548B2 (en) * | 2004-06-14 | 2010-10-05 | University Of North Texas | Graph-based ranking algorithms for text processing |
US20110093459A1 (en) * | 2009-10-15 | 2011-04-21 | Yahoo! Inc. | Incorporating Recency in Network Search Using Machine Learning |
US8145677B2 (en) * | 2007-03-27 | 2012-03-27 | Faleh Jassem Al-Shameri | Automated generation of metadata for mining image and text data |
-
2010
- 2010-10-08 US US12/901,356 patent/US8560477B1/en active Active
Patent Citations (8)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US6278967B1 (en) * | 1992-08-31 | 2001-08-21 | Logovista Corporation | Automated system for generating natural language translations that are domain-specific, grammar rule-based, and/or based on part-of-speech analysis |
US7809548B2 (en) * | 2004-06-14 | 2010-10-05 | University Of North Texas | Graph-based ranking algorithms for text processing |
US20090271177A1 (en) * | 2004-11-04 | 2009-10-29 | Microsoft Corporation | Extracting treelet translation pairs |
US20060190492A1 (en) * | 2005-02-21 | 2006-08-24 | Siemens Aktiengesellschaft | Data processor and method for processing medical text |
US20080154577A1 (en) * | 2006-12-26 | 2008-06-26 | Sehda,Inc. | Chunk-based statistical machine translation system |
US20080177545A1 (en) * | 2007-01-19 | 2008-07-24 | Microsoft Corporation | Automatic reading tutoring with parallel polarized language modeling |
US8145677B2 (en) * | 2007-03-27 | 2012-03-27 | Faleh Jassem Al-Shameri | Automated generation of metadata for mining image and text data |
US20110093459A1 (en) * | 2009-10-15 | 2011-04-21 | Yahoo! Inc. | Incorporating Recency in Network Search Using Machine Learning |
Non-Patent Citations (32)
Title |
---|
Alexandrescu, A. and Kirchhoff, K., "Graph-based learning for statistical machine translation," In NAACL, 2009, 9 pages. |
Altun, Y., et al., "Maximum margin semi-supervised learning for structured variables," In Advances in Neural Information Processing Systems 18, p. 18, 2005, 10 pages. |
Belkin, M., et al., "On manifold regularization," In Proc. of the Conference on Artificial Intelligence and Statistics (AISTATS), 2005, 12 pages. |
Bengio, Y., et al., "Semi-supervised learning," chapter Label Propagation and Quadratic Criterion, MIT Press, 2007, 26 pages. |
Blitzer, J. and Zhu, J., "ACL 2008 tutorial on semi-supervised learning," 2008, 98 pages. |
Blitzer, J., et al., "Domain adaptation with structural correspondence learning," In EMNLP, 2006, 9 pages. |
Blum, A. and Mitchell, T., "Combining labeled and unlabeled data with co-training," In COLT: Proceedings of the Workshop on Computational Learning Theory, 1998, 9 pages. |
Brefeld, U. and Scheffer, T., "Semi-supervised learning for structured output variables," In ICML06, 23rd International Conference on Machine Learning, 2006, 8 pages. |
Collobert, R., et al., "Large scale transductive SVMs," Journal of Machine Learning Research, 2006, 26 pages. |
Corduneanu, A. and Jaakkola, T., "On information regularization," In Uncertainty in Artificial Intelligence, 2003, 8 pages. |
Daume III, H., "Frustratingly easy domain adaptation," In Proceedings of the 45th Annual Meeting of the Association of Computational Linguistics, pp. 256-263, Prague, Czech Republic, June, Association for Computational Linguistics, 2007, 8 pages. |
Grandvalet, Y. and Bengio, Y, "Semi-supervised learning by entropy minimization," In CAP, 2005, 16 pages. |
Gupta, R., "Generalized collective inference with symmetric clique potentials," CoRR, abs/0907.0589, 2005. |
Haffari, G.R. and Sarkar, A., "Analysis of semi-supervised learning with the Yarowsky algorithm," In UAI, 2007, 8 pages. |
Huang, F. and Yates, A., "Distributional representations for handling sparsity in supervised sequence-labeling," In ACL-IJCNLP '09: Proceedings of the Joint Conference of the 47th Annual Meeting of the ACL and the 4th International Joint Conference on Natural Language Processing of the AFNLP: vol. 1, Association for Computational Linguistics, 2009, 9 pages. |
Joachims, T., "Transductive inference for text classification using support vector machines," In Proc. of the International Conference on Machine Learning (ICML), 1999, 12 pages. |
Joachims, T., "Transductive learning via spectral graph partitioning," In Proc. of the International Conference on Machine Learning (ICML), 2003, 8 pages. |
Judge, J., et al.,"Question Bank: creating a corpus of parse-annotated questions," In Proceedings of the 21st International Conference on Computational Linguistics and 44th Annual Meeting of the Association for Computational Linguistics, pp. 497-504, 2006, 8 pages. |
Klinger Roman and Tomanek Katrin. Classical Probabilistic Models and Conditional Random Fields. Algorithm Engineering Report. TR07-2-013 Dec. 2007.Technische Universitat Dortmund. * |
Lafferty, J., et al., "Conditional random fields: probabilistic models for segmenting and labeling sequence data," In Proc. of the International Conference on Machine Learning (ICML), 2001, 8 pages. |
Lawrence, N.D. and Jordan, M.I., "Semi-supervised learning via Gaussian processes," In L.K. Saul, Y. Weiss, and Bottou L, editors, Advances in Neural Information Processing Systems 17, pp. 753-760, Cambridge, MA, 2005, The MIT Press, 10 pages. |
Scudder, H.J., "Probability of error of some adaptive pattern-recognition machines," IEEE Transactions on Information Theory, 11, 1965, 9 pages. |
Seeger, M., "Learning with labeled and unlabeled data," Technical report, University of Edinburgh, U.K., 2000, 62 pages. |
Shen, L., et al., "Guided learning for bidirectional sequence classification," In ACL, 2007, 8 pages. |
Sindhwani, V., et al., "Beyond the point cloud: from transductive to semi-supervised learning," In Proc. of the International Conference on Machine Learning (ICML), 2005, 8 pages. |
Subramanya, A. and Bilmes, J.A., "En-tropic graph regularization in non-parametric semi-supervised classification," In Neural Information Processing Society (NIPS), Vancouver, Canada, Dec. 2009, 10 pages. |
Toutanova, K., et al., Feature-rich part-of-speech tagging with a cyclic dependency network, In HLT-NAACL, 2003, 8 pages. |
Wang, Y., et al., A rate distortion approach for semi-supervised conditional random fields, 2009, 10 pages. |
Xiaojin Zhu, Zoubin Ghahramani, and John Lafferty. 2003. Semi-supervised learning using gaussian fields and harmonic functions. In Proc. of the International Conference on Machine Learning (ICML), 9 pages. |
Xiaojin Zhu. 2005. Semi-Supervised Learning with Graphs. Ph.D. Dissertation. Carnegie Mellon Univ., Pittsburgh, PA, USA. AAI3179046. Published on the ACM Digital Library. * |
Yarowsky, D., "Unsupervised word sense disambiguation rivaling supervised methods," In Proceedings of the 33rd Annual Meeting of the Association for Computational Linguistics, 1995, 8 pages. |
Zhu, X., et al., "Semi-supervised learning using Gaussian fields and harmonic functions," In Proc. of the International Conference on Machine Learning (ICML), 2003, 9 pages. |
Cited By (25)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US9031897B2 (en) * | 2012-03-23 | 2015-05-12 | Nuance Communications, Inc. | Techniques for evaluation, building and/or retraining of a classification model |
US20130254153A1 (en) * | 2012-03-23 | 2013-09-26 | Nuance Communications, Inc. | Techniques for evaluation, building and/or retraining of a classification model |
US20150220853A1 (en) * | 2012-03-23 | 2015-08-06 | Nuance Communications, Inc. | Techniques for evaluation, building and/or retraining of a classification model |
US9311609B2 (en) * | 2012-03-23 | 2016-04-12 | Nuance Communications, Inc. | Techniques for evaluation, building and/or retraining of a classification model |
US20130282628A1 (en) * | 2012-04-20 | 2013-10-24 | Unbound Concepts, Llc | Method and Apparatus for Performing Dynamic Textual Complexity Analysis Using Machine Learning Artificial Intelligence |
US9311299B1 (en) * | 2013-07-31 | 2016-04-12 | Google Inc. | Weakly supervised part-of-speech tagging with coupled token and type constraints |
US9779087B2 (en) * | 2013-12-13 | 2017-10-03 | Google Inc. | Cross-lingual discriminative learning of sequence models with posterior regularization |
US20150169549A1 (en) * | 2013-12-13 | 2015-06-18 | Google Inc. | Cross-lingual discriminative learning of sequence models with posterior regularization |
WO2015123542A1 (en) * | 2014-02-14 | 2015-08-20 | Medaware Systems, Inc. | Biomedical research database development and uses |
US11094015B2 (en) | 2014-07-11 | 2021-08-17 | BMLL Technologies, Ltd. | Data access and processing system |
US11868851B2 (en) * | 2015-03-11 | 2024-01-09 | Symphonyai Sensa Llc | Systems and methods for predicting outcomes using a prediction learning model |
US20170162189A1 (en) * | 2015-05-08 | 2017-06-08 | International Business Machines Corporation | Semi-supervised learning of word embeddings |
US9659560B2 (en) | 2015-05-08 | 2017-05-23 | International Business Machines Corporation | Semi-supervised learning of word embeddings |
US9947314B2 (en) * | 2015-05-08 | 2018-04-17 | International Business Machines Corporation | Semi-supervised learning of word embeddings |
US9672814B2 (en) * | 2015-05-08 | 2017-06-06 | International Business Machines Corporation | Semi-supervised learning of word embeddings |
US20160335249A1 (en) * | 2015-05-14 | 2016-11-17 | Fuji Xerox Co., Ltd. | Information processing apparatus, information processing method, and non-transitory computer readable medium |
US10185713B1 (en) * | 2015-09-28 | 2019-01-22 | Amazon Technologies, Inc. | Optimized statistical machine translation system with rapid adaptation capability |
US10268684B1 (en) | 2015-09-28 | 2019-04-23 | Amazon Technologies, Inc. | Optimized statistical machine translation system with rapid adaptation capability |
US10326863B2 (en) | 2017-01-21 | 2019-06-18 | Adp, Llc | Speed and accuracy of computers when resolving client queries by using graph database model |
US10679088B1 (en) * | 2017-02-10 | 2020-06-09 | Proofpoint, Inc. | Visual domain detection systems and methods |
US11580760B2 (en) | 2017-02-10 | 2023-02-14 | Proofpoint, Inc. | Visual domain detection systems and methods |
CN111191445A (en) * | 2018-11-15 | 2020-05-22 | 北京京东金融科技控股有限公司 | Advertisement text classification method and device |
CN111191445B (en) * | 2018-11-15 | 2024-04-19 | 京东科技控股股份有限公司 | Advertisement text classification method and device |
US11200883B2 (en) | 2020-01-10 | 2021-12-14 | International Business Machines Corporation | Implementing a domain adaptive semantic role labeler |
US20230104607A1 (en) * | 2021-10-01 | 2023-04-06 | International Business Machines Corporation | Linguistic transformation based relationship discovery for transaction validation |
Similar Documents
Publication | Publication Date | Title |
---|---|---|
US8560477B1 (en) | Graph-based semi-supervised learning of structured tagging models | |
US11288593B2 (en) | Method, apparatus and device for extracting information | |
Tan et al. | Neural machine translation: A review of methods, resources, and tools | |
US11727243B2 (en) | Knowledge-graph-embedding-based question answering | |
Dhingra et al. | Embedding text in hyperbolic spaces | |
Subramanya et al. | Efficient graph-based semi-supervised learning of structured tagging models | |
US11868733B2 (en) | Creating a knowledge graph based on text-based knowledge corpora | |
Ling et al. | Latent predictor networks for code generation | |
US9135240B2 (en) | Latent semantic analysis for application in a question answer system | |
JP7316721B2 (en) | Facilitate subject area and client-specific application program interface recommendations | |
US20180189265A1 (en) | Learning entity and word embeddings for entity disambiguation | |
Parvez et al. | Building language models for text with named entities | |
CN110457708B (en) | Vocabulary mining method and device based on artificial intelligence, server and storage medium | |
Mahajani et al. | A comprehensive survey on extractive and abstractive techniques for text summarization | |
JP7303195B2 (en) | Facilitate subject area and client-specific application program interface recommendations | |
US20230401426A1 (en) | Prediction method, prediction apparatus and program | |
Liu et al. | Few-shot learning for name entity recognition in geological text based on GeoBERT | |
Whitney | Bootstrapping via graph propagation | |
Alexandrescu et al. | Graph-based learning for statistical machine translation | |
Lin et al. | NL2API: A framework for bootstrapping service recommendation using natural language queries | |
Abed et al. | Harmony search algorithm for word sense disambiguation | |
Dasgupta et al. | Word2box: Capturing set-theoretic semantics of words using box embeddings | |
Huang et al. | Prompt-Based Self-training Framework for Few-Shot Named Entity Recognition | |
Dutta et al. | Estimating Uncertainty in Multimodal Foundation Models using Public Internet Data | |
Chen et al. | Learning word embeddings from intrinsic and extrinsic views |
Legal Events
Date | Code | Title | Description |
---|---|---|---|
AS | Assignment |
Owner name: GOOGLE INC., CALIFORNIAFree format text: ASSIGNMENT OF ASSIGNORS INTEREST;ASSIGNORS:PETROV, SLAV;SUBRAMANYA, AMARNAG;PEREIRA, FERNANDO;AND OTHERS;SIGNING DATES FROM 20101007 TO 20101008;REEL/FRAME:025223/0157 |
|
STCF | Information on status: patent grant |
Free format text: PATENTED CASE |
|
FPAY | Fee payment |
Year of fee payment: 4 |
|
AS | Assignment |
Owner name: GOOGLE LLC, CALIFORNIAFree format text: CHANGE OF NAME;ASSIGNOR:GOOGLE INC.;REEL/FRAME:044101/0299Effective date: 20170929 |
|
MAFP | Maintenance fee payment |
Free format text: PAYMENT OF MAINTENANCE FEE, 8TH YEAR, LARGE ENTITY (ORIGINAL EVENT CODE: M1552); ENTITY STATUS OF PATENT OWNER: LARGE ENTITYYear of fee payment: 8 |