EP1738329B1 - Generating and serving tiles in a digital mapping system - Google Patents
Generating and serving tiles in a digital mapping system Download PDFInfo
- Publication number
- EP1738329B1 EP1738329B1 EP05729642.8A EP05729642A EP1738329B1 EP 1738329 B1 EP1738329 B1 EP 1738329B1 EP 05729642 A EP05729642 A EP 05729642A EP 1738329 B1 EP1738329 B1 EP 1738329B1
- Authority
- EP
- European Patent Office
- Prior art keywords
- map
- tile
- areas
- tiles
- sub
- Prior art date
- Legal status (The legal status is an assumption and is not a legal conclusion. Google has not performed a legal analysis and makes no representation as to the accuracy of the status listed.)
- Active
Links
Images
Classifications
-
- G—PHYSICS
- G01—MEASURING; TESTING
- G01C—MEASURING DISTANCES, LEVELS OR BEARINGS; SURVEYING; NAVIGATION; GYROSCOPIC INSTRUMENTS; PHOTOGRAMMETRY OR VIDEOGRAMMETRY
- G01C21/00—Navigation; Navigational instruments not provided for in groups G01C1/00 - G01C19/00
- G01C21/38—Electronic maps specially adapted for navigation; Updating thereof
- G01C21/3863—Structures of map data
- G01C21/387—Organisation of map data, e.g. version management or database structures
- G01C21/3881—Tile-based structures
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06T—IMAGE DATA PROCESSING OR GENERATION, IN GENERAL
- G06T11/00—2D [Two Dimensional] image generation
- G06T11/40—Filling a planar surface by adding surface attributes, e.g. colour or texture
-
- G—PHYSICS
- G09—EDUCATION; CRYPTOGRAPHY; DISPLAY; ADVERTISING; SEALS
- G09B—EDUCATIONAL OR DEMONSTRATION APPLIANCES; APPLIANCES FOR TEACHING, OR COMMUNICATING WITH, THE BLIND, DEAF OR MUTE; MODELS; PLANETARIA; GLOBES; MAPS; DIAGRAMS
- G09B29/00—Maps; Plans; Charts; Diagrams, e.g. route diagram
- G09B29/003—Maps
Definitions
- the invention relates to mapping systems, and more particularly, to mapping systems in a digital environment.
- Computerized mapping systems have been developed to search for, identify, and discover information about geographic locations.
- One form of such computerized mapping systems includes travel-planning Internet websites. With an excess of 50 million unique monthly users, such map sites are a very popular offering. Examples of such sites include AOL's MapQuest, Yahoo's Telcontar-based maps, and Microsoft's MapPoint.net suite. Such sites all work along the lines of a common model, as will now be described.
- a Web user asks for a new map view (e.g., by entering a postal address, or by clicking a navigation link next to a current map view)
- the user's Web browser sends to a Web server a request indicating the boundaries of the new map view.
- the Web server In turn extracts the corresponding vector-based map data from a database, and draws a bitmap image of the map.
- the server then converts the bitmap to an image format supported by the user's Web browser and returns the image, sometimes embedded in HTML, to the user's Web browser so that it can be displayed.
- map Web sites such as England's MultiMaps or Australia's Wherels utilize a raster-based map database instead. In these cases, it is not necessary to extract vectors and draw a map image. Rather, these functions are replaced by simply extracting the appropriate part of a larger, pre-rendered image.
- U. S. Patent 4972319 discloses a computer implemented method and system that organizes mapping data into a hierarchy of successive magnitudes or levels for presentation of the mapping data with variable resolution, starting from a first or highest magnitude and progressing to a lost or lowest magnitude with highest resolution.
- a system for generating map tiles for a tile-based digital mapping system comprising a map painter module for generating digital map images; a tile maker for generating map tiles from the digital map images, wherein the tile maker operates according to a configuration file that defines areas and zoom levels for which map tiles should be generated and uses the map painter module to generate the digital map images for areas defined in the configuration file, and wherein generating map tiles from the digital images comprises: identifying areas to be drawn, and various zoom levels at which each area needs to be drawn; dividing the areas into sub-areas as needed at the different zoom levels, such that each sub-area can be pre-rendered in an available memory; pre-rendering each sub-area at a given zoom level; dividing each pre-rendered sub-area into rendering areas, such that each rendering area can be rendered in the available memory; and rendering the rendering areas, and dividing the resulting image into map tiles; and a tile storage for storing map tiles generated by the tile maker.
- the map painter module is operable to request and receive geographical data for a given area from which the digital map images are generated.
- a map data storage can be used for storing one or more sets of the geographical data for a given area that is accessible by the map painter module.
- the map data storage may include, for example, a set of rich mapping format (RMF) files.
- RMF rich mapping format
- RME remote mapping engine
- the tile maker may operate, for example, according to a configuration file that defines areas and zoom levels for which map tiles should be generated.
- the configuration file may further define at least one of geographical data sets to use, and how the map should be drawn including label placement information.
- the tile maker can use the map painter module to generate the digital map images for areas defined in the configuration file.
- the tile maker is adapted to divide large areas defined in the configuration file into smaller areas, and uses the map painter module to generate the digital map images for those smaller areas.
- the tile maker may be further configured to encode the generated map tiles into a desired image format (e.g., sub-pixel bitmaps, GIF, PNG, TIFF, or JPEG), and to store the formatted map tiles.
- the system may further include a map tile serving system configured to serve map tiles stored in the tile storage, in response to map requests from a user.
- the method includes generating map tiles from digital map images, storing the map tiles, and serving one or more of the map tiles, in response to a user map request.
- the method may further include identifying uni-color map tiles that are locally available to a computing device of the user.
- the method may further include generating the digital map images, which includes defining areas and zoom levels for which map tiles should be generated.
- Generating the digital map images may include, for example, defining at least one of geographical data sets to use, and how the map should be drawn including label placement information.
- Storing the map tiles may include encoding the generated map tiles into a desired image format, and storing the formatted map tiles.
- Serving one or more of the map tiles may include caching the served map tiles.
- generating map tiles from digital map images may include: identifying areas to be drawn, and various zoom levels at which the area needs to be drawn; dividing the areas into sub-areas as needed at the different zoom levels, such that each sub-area can be pre-rendered in an available memory; pre-rendering each sub-area at a given zoom level; dividing each pre-rendered sub-area into rendering areas, such that each rendering can be rendered in the available memory; and rendering the rendering areas, and cutting the resulting image into map tiles.
- each of the sub-areas at a zoom level represents a task, so as to provide a list of tasks defined by area and zoom level, and parallel processing is applied to executing these tasks.
- the map to be displayed to the requesting user has a resolution
- Another embodiment of the present invention provides a method for generating digital map tiles from digital map data.
- the method includes identifying areas to be drawn, and various zoom levels at which each area needs to be drawn.
- the method continues with dividing the areas into sub-areas as needed at the different zoom levels, such that each sub- area can be pre-rendered in an available memory.
- the method continues with pre-rendering each sub-area at a given zoom level, and then dividing each pre-rendered sub-area into rendering areas, such that each rendering area can be rendered in the available memory.
- the method continues with rendering the rendering areas to produce an image, and dividing the image into map tiles.
- the pre-rendering each sub-area may include, for example, accessing at least one of geographical data sets and a representation of instructions about how to build the digital map image.
- the instructions can be represented, for instance, in a configuration file.
- a method for generating digital map tiles from digital map data comprising: identifying areas to be drawn, and various zoom levels at which each area needs to be drawn; dividing the areas into sub-areas as needed at the different zoom levels, such that each sub-area can be pre-rendered in an available memory; pre-rendering each sub-area at a given zoom level; dividing each pre-rendered sub-area into rendering areas, such that each rendering area can be rendered in the available memory; rendering the rendering areas to produce an image; and dividing the image into map tiles.
- the pre-rendering each sub-area may include, for example, accessing at least one of geographical data sets and a representation of instructions about how to build the digital map image.
- the instructions can be represented, for instance, in a configuration file.
- the sub-areas can each have a pre-determined fixed size for each zoom level.
- pre-rendering decisions prevent problematic features from crossing borders between sub-areas.
- pre-rendering decisions allow features to cross borders between sub-areas. In such a case, two aligning sub-areas associated with a border crossing feature are not allowed to be pre-rendered at the same time. Pre-rendering decisions can be stored so they can be used in subsequent pre-rendering tasks (which enables features to cross borders between sub-areas).
- an image tile-based digital mapping system is configured for generating map tiles during an offline session, and serving selected sets of those tiles to a client when requested. Also provided are solutions for handling map labels and other such features in a tile-based mapping system, such as for example when a map label or other feature crosses map tile boundaries.
- processing environments e.g., servers or other computing devices
- the functionality described herein may be implemented by computer program instructions. These instructions can be loaded into a computer or other processing environment to produce a machine, such that the instructions are executed to carry out tile-based mapping techniques in accordance with various embodiments of the present invention. These computer program instructions may also be encoded in a processor-readable medium so as to provide an article of manufacture. Any number of programming languages or combination thereof (e.g., C, C++, HTML) can be used to implement the computer program instructions. Other embodiments of the present invention can be implemented by purpose-built hardware, such as field programmable gate array (FPGA) or application specific integrated circuits (ASIC) technology. Likewise, combinations of hardware and software can be used to carry out other embodiments of the present invention, as will be apparent in light of this disclosure.
- FPGA field programmable gate array
- ASIC application specific integrated circuits
- FIG. 1 is a block diagram of a tile-based digital mapping system configured in accordance with one embodiment of the present invention.
- the system includes a computing device 103 connected to a network 105.
- Various serving systems are also connected to the network 105, including a web serving system 110, a tile serving system 115, and a location data serving system 120.
- Other computing devices 105 may also be in communication with the serving systems 110, 115, and 120 via the network 105.
- the computing device 103 may be any type of device configured for computing, such as a personal computer or laptop, a mobile phone, a personal digital assistant, a navigation system located in a vehicle, a handheld GPS system, and so on.
- the computing device 103 includes a browser (or other similar application) that allows the user to interface and communicate with other devices and systems on the network 105. Examples of browsers include Microsoft's Internet Explorer browser, Netscape's Navigator browser, Mozilla's Firefox browser, PalmSource's Web Browser, or any other browsing or application software capable of communicating with network 105.
- the computing device 103 can be any device that allows a user to access the serving systems 110, 115, and 120 via the network 105.
- the web serving system 110 is the part of the overall system that delivers the initial HTML (hypertext markup language), images, scripting language (e.g., JavaScript, IScript, Visual Basic Script), XSLT (extensible stylesheet language transformation), and other static elements that are used by the browser on computing device 103.
- this serving system 110 may include one or more servers operating under a load balancing scheme, with each server (or a combination of servers) configured to respond to and interact with the computing device 103.
- the web serving system 110 can be implemented with conventional technology, as will be apparent in light of this disclosure.
- the tile serving system 115 is the part of the overall system responsible for delivering individual map tiles in response to requests from the computing device 103, with each tile being uniquely defined, for example, by x, y and z values that coordinates to an overall tile-based map. Other tile identification schemes can be used as well.
- the serving system 115 may include one or more servers operating under a load balancing scheme, with each server (or a combination of servers) configured to respond to and interact with the computing device 103. Example architecture and functionality associated with the tile serving system 115 will be further discussed with reference to Figure 8 .
- the location data serving system 120 is the part of the overall system that delivers location data of various forms to the computing device 103. Its functions include, for example, finding the geographic location of a street address, generating and formatting driving directions, and searching for location-specific results to a query (e.g., as with the Google Local Search service). Other services may also be provided. In general, when the user enters a search string, it is put into a request by the computing device 103, and sent to the location data serving system 120 via the network 105.
- the location data serving system 120 determines what the request is for, and responds with the appropriate data from various subsystems, such as geo-coders, routing engines, and local search indexes, in a format that computing device 103 can use to present the data to the user (e.g., via a browser).
- various subsystems such as geo-coders, routing engines, and local search indexes
- the network 105 may be any type of communications network, such as a local area network (e.g., intranet), wide area network (e.g., internet), or some combination thereof.
- the network 105 may be a direct connection between the computing device 103 and the serving systems 110, 115, and 120.
- the computing device 103, network 105, and/or serving systems 110, 115, and 120 may be in communication via any type of wired or wireless connection, using a wide variety of communication protocols.
- FIG. 2 is a block diagram of a processing environment that can be employed in the system of Figure 1 .
- computing device 103 or any servers included in the serving systems 110, 115, and 120 can be configured using the illustrated processing environment.
- Numerous other processing environments can be used as well, and the present invention is not intended to be limited to any one such embodiment - Figure 2 is merely provided as one possible example.
- this example processing environment includes a bus 200, one or more processors 205, a main memory 210, a read-only memory (ROM) 215, a storage device 220, one or more input devices 225, one or more output devices 230, and a communication interface 235.
- Bus 200 may include one or more conductors that permit communication among the components of the processing environment, and can be implemented using conventional bus technology.
- Processor 205 may include any type of conventional processor, microprocessor, or processing logic that interprets and executes instructions.
- Main memory 210 may include a random-access memory (RAM) or another type of dynamic storage device that stores information and instructions for execution by processor 205.
- ROM 215 may include a conventional ROM device or another type of nonvolatile storage device that stores information and instructions for use by processor 205.
- Storage device 220 may include, for example, a magnetic and/or optical recording medium and its corresponding drive.
- the main memory 210 may also include a cache memory for temporarily storing commonly accessed data (e.g., map tiles). Such a cache will eliminate the need for accessing the storage device 220 each time a request for data is received, thereby reducing process times.
- Input device 225 may include one or more conventional mechanisms that permit a user to input information to the processing environment, such as a keyboard, a mouse, a pen, a stylus, handwriting recognition, voice recognition, biometric mechanisms, and the like.
- Output device 230 may include one or more conventional mechanisms that output information to the user, such as a display, printer, speakers, and the like.
- Communication interface 235 may include any transceiver-like mechanism that enables the processing environment to communicate with other devices and/or systems.
- communication interface 235 may include a modem (e.g., 56K, DSL, or cable) for communicating with another device or system via network 105.
- the computing device 103 requests map information that is stored in the tile serving system 115.
- a front-end server (included in tile serving system 115) responds to queries submitted by the computing device 103 or "client-side" by returning a web page that contains instructions (e.g., in JavaScript or another scripting language) accessed by the client-side browser.
- the client computing device 103 requests map tiles as needed from the tile serving system 115, which serves the tiles associated with the requested map image.
- the requested map image is then displayed at the computing device 103, by combining together in the web browser the set of tiles that form the requested map image.
- the map tiles can be "pre-rendered” meaning that they are produced during an off-line phase that will be discussed with reference to Figure 3 .
- a browser-side script can be used that uses only the smallest set of tiles that together covers the desired view.
- the user can view a served section of map, and then change the section of map being viewed (e.g., by dragging the map in one direction using the cursor of input device 225), thereby causing new map tiles to be served that fill in the new map locations now within the.browser window.
- the effect is a virtually endless map that can be zoomed in/out and further adjusted to new locations as desired.
- the size of the tiles can be determined heuristically, given the following trade-off: (1) larger tiles tend to increase the total size (in both pixels and bytes) of the tiles needed to produce a given view; while (2) smaller tiles tend to increase the number of separate requests (e.g., HTTP requests) needed to produce a given view.
- each tile can be stored In a separate file, accessible using unique URLs such as: http:// ⁇ domain>/7/-18/11-145_12_7.gif, where the directory path 7/-18/1 in this example depends solely on the tile coordinates, which in this case are equal to (-145, 12, 7).
- the first tile of each zoom-level z can be located such that the tile's upper-left pixel has coordinates (0, 0, z). This setup facilitates assignment of a unique coordinate triplet to each tile by integer-dividing the pixel x and y coordinates of the tile's upper-left pixel by the width and height of the tile, respectlvely.
- a total of three coordinate systems are thus utilized: latitude/longitude coordinates, pixel (x, y, z) coordinates, and tile (x, y, z) coordinates.
- This particular choice of coordinate systems is not intended to limit the present invention, and was chosen to aid in describing the algorithms used in some embodiments. In general, any consistent coordinate or indexing system can be used here.
- each pixel belongs to a unique tile, the coordinates of which can be easily computed.
- the zoom levels are numbered 0 thru Z, where 0 represents the level closest to street level, and Z the level that is furthest away from street level.
- An arbitrary latitude/longitude point within the area of interest is designated and defined as the origin, or origo (such as the geographic center of the contiguous United States).
- the coordinate triplet (0, 0, z) is assigned to the pixel of the z-level raster image containing this origin.
- a unique coordinate triplet (x, y, z) is assigned to each pixel of each of the raster images.
- a coordinate conversion routine given a zoom-level z, converts a latitude/longitude coordinate pair to the appropriate (x, y, z) pixel coordinate, and vice versa.
- the details of this conversion depend on the map projection that was used in producing the raster images in the first instance.
- Figure 3 is a block diagram of a system configured for generating map tiles for a digital mapping system in accordance with one embodiment of the present invention.
- a set of large, contiguous, pre-rendered raster images of the entire area covered by the map system can be generated in an off-line process that is transparent to the user.
- One such set of raster images is provided for each zoom-level, ranging, for example, from street level to country level.
- These larger images are then cut into tiles, which are then encoded into an appropriate image format (e.g., GIF).
- GIF image format
- the purpose of the system shown in Figure 3 is to generate a complete set of tiles, covering a given set of areas and zoom levels.
- the process of generating a map image from which map tiles can be made can be divided into two logic processes: pre-rendering and rendering.
- pre-rendering decisions about how the map should be drawn are made based on the available map data and configuration data.
- rendering the actual map drawing takes place, either by generating a bitmap image or by defining the map drawing in a vector-based format. For both processes, speed is highly desirable. Carrying out the processes in the memory of a computational device or other suitable processing environment is one way of achieving sufficient speed.
- the pre-rendering process has access to all the needed map data (geographical data sets from which map images can be drawn), and a representation of the decision about how to build the map in memory. This decision can be represented, for example, in a configuration file.
- the rendering process may keep the bitmap being drawn in memory, together with the definitions of what is to be drawn. In some (but not all) cases, the pre-rendering process can cover a much larger area than the rendering process in relation to the amount of memory available.
- tile generation For large areas is discussed herein. The tile generation process is initiated by executing the tile maker 305. To draw areas, the tile maker 305 uses the map painter module 310 to generate tile images.
- the map painter module 310 gets the geographical data for a given area through a commercially available RME (remote mapping engine) library 315, which employs an application program interface (API) that allows the map painter module 310 to access the map data storage 320.
- RME remote mapping engine
- API application program interface
- the map painter module 310 can be configured to directly access the map data storage 320, thereby eliminating the need for the commercial RME library 315.
- the map painter module 310 operates as a drawing module, where a graphics library can be used to generate bitmaps with the desired appearance.
- bitmap map image be anti-aliased, this can be done by the graphics library or by drawing the map image at a higher resolution than is desired, and then either scaling the image down with an appropriate method (such as bilinear or bicubic resampling), or by using the higher resolution bitmap as the input to software capable of generating sub-pixel bitmaps.
- One particular such embodiment draws a map image using Microsoft's GDI/GDI+ at 4 times the resolution, and then generates sub-pixel bitmaps by converting each 512x512 pixel area into one 128x128 pixel sub-pixel bitmap tile.
- the tile storage 300 is where the tiles generated by the tile maker 305 are saved.
- tile storage 300 is implemented as a simple disk based storage system, but it could be any system capable of receiving and storing large amounts of data efficiently. Since a normal file system often becomes inefficient when handling a large number of small files, the tiles can be stored in compound files. In one particular embodiment, the tiles are stored as sub-pixel bitmaps, but any bitmap or vector-based format could be used instead.
- the tile maker 305 can be started with a configuration file, which defines which areas and zoom levels the tiles should be generated for, which data sets to use, and how the map should be drawn (e.g., through a specification of colors, appearance for various features, label placement, and the like).
- the configuration file can also contain additional data not present in the map data storage 320, such as manually placed labels.
- the configuration file is implemented as an extensible markup language (XML) formatted text file, containing all the configuration data the tile maker 305 needs to draw map images (using the map painter module 310).
- XML extensible markup language
- Other formats and solutions for executing the tile maker 305 could be used as well, as will be apparent in light of this disclosure.
- map drawing is the process of generating a bitmap image of a target area (e.g., Midwestern United States or the city of San Francisco, or some other geographical area) from vector data defining points, lines, and areas of geographical features such as Points of Interest (POI) and addresses, features such as roads and railways, cities, parks, and the like.
- POI Points of Interest
- the tile maker 305 can divide the area into smaller areas, and draw those one at a time.
- Tile generation for large areas is further discussed herein. Since it is desirable for the area being drawn to constitute a single continual image, this division can lead to problems, since drawing decisions with respect to different parts of the area might not align at the borders between these parts.
- the tile maker 305 can use the map painter module 310, and pass on to the map painter module 310 the relevant information about the area to be drawn, the desired scale, which geographical data sets to include, which features to draw and how such features should be drawn.
- the map painter module 310 returns a corresponding digital map image, which is turned into tiles by the tile maker 305 and stored in the desired format, such as sub-pixel bitmaps (or any bitmap or vector based format), in the tile storage 300.
- a tile size of 128x128 pixels is used, with the tiles being stored in a GIF format.
- Other embodiments may use a tile size of 256x256 pixels, stored either in GIF, PNG, TIFF, or JPEG formats.
- Other tile sizes and image storage formats may also be used, depending on the requirements of each particular implementation.
- These tiles generally form a regular, rectangular grid, and this property facilitates system implementation in one embodiment.
- any other division of the large raster images into tiles of any shapes and sizes that allows for assembly on the client-side may also be used to achieve the effects of the present invention.
- the RME library 315 is a commercially available piece of software that can be used to query data from RMF (rich mapping format) files.
- the RME library 315 supports spatial queries that request information involving the geographic relation of two or more items. Example queries are "What map features fall within a given area?" or "What map features fall within a given area that have a priority level higher than a certain threshold?" The result of the spatial query is used to generate map images and ultimately map tiles.
- RMF files are generated by compiling other map formats to RMF. The benefit of this process is that the full range of map data file formats that can be compiled into RMF files can be queried in a consistent manner through the RME library 315. Note that any combination of file formats and libraries can be used in the described system; the only requirement is that there is a service that the map painter module 310 can use to get the geographica 1 data for a given area.
- the map data storage 320 is geographical map data stored on a disk, which is accessed by the RME library 315.
- the stored map data comprises commercially available NavTech data that has been compiled by Telcontar (a commercial provider of digital map and navigation information) into a set of RMF (Rich Map Format) files.
- RMF is a conventional map data format optimized for spatial query processing. Thus, once an item is found in the spatially formatted dataset, other close-by items can be found with relative ease. Note, however, that there are many other ways to organize the map data in storage 320, such as sequentially or in layers.
- the exact files/data sets to use can be defined by the configuration file that was used to control the execution of the tile maker 305.
- map data can be substituted here, and the RME library 315 and the map data storage 320 could be one system with an API that the map painter module 310 can use. Alternatively, the RME library 315 and API functionality can be integrated into the map painter module 310. Other configurations will be apparent in light of the disclosure herein.
- the pre-rendering process can (in some cases) cover a much larger area than the rendering process in relation to the amount of memory available.
- refinements can be made to the tile generation process carried out by the system of Figure 3 , so as to make tile generation feasible for large areas (e.g., the continental U.S. and Canada).
- the process for generation of all the tiles defined by a configuration file proceeds as follows.
- the tile maker 305 looks at all the areas that need to be drawn, and the various zoom levels at which they need to be drawn, and divides the areas into sub-areas as needed at the different zoom levels, such that each sub-area can be pre-rendered in a given amount of memory. The decision can be based on the actual data for a given area. Alternatively, to keep this step as short as possible, a fixed size for a sub-area can be used, or a fixed size for each zoom level. Each of the sub-areas at a zoom level becomes a task on its own, defined by area and zoom level, stored in a list, and a large number of tile makers 305 can be applied to executing these tasks (e.g., using parallel processing).
- the pre-rendering process can assure that no problematic features cross these borders, thereby enabling each sub-area to be pre-rendered and subsequently rendered fully independently ( Figure 6 ).
- the decisions made during one pre-rendering process can be saved so they can be accessed in subsequent pre-rendering tasks, so that features can cross borders between sub-areas ( Figure 7 ). This requires some coordination, so as to avoid having two aligning sub-areas be pre-rendered at the same time (assuming a parallel processing scheme with multiple tile makers 305 is in place).
- a tile maker 305 When a tile maker 305 takes one of the tasks from the list, it pre-renders the sub-area at the zoom level defined by the task, and then divides the sub-area into rendering areas that are small enough to be rendered in the available memory. The tile maker 305 then proceeds to render one rendering area at a time, cutting the resulting image into tiles, and placing the tiles in the tile storage 300. In one particular embodiment, the rendering is done at 4 times the desired resolution, and the resulting bitmap is used as input for generating tiles as sub-pixel bitmaps, but other sizes and formats can be used depending on the desired output. Note that features such as labels can cross the borders between the rendering areas, since all decisions about their placement are done during the pre-rendering process. Note also that if the sub-areas are made small enough to be both pre-rendered and rendered in memory, there is less distance between the borders that impose restriction on the placement of features such as labels, and the resulting map is generally of lesser quality.
- the pre-rendering process can load the entire feature from the map data, and use only the feature to decide where to place labels. This means that the decision about placement of such labels or similar features will be the same for adjacent sub-areas, so these features can be allowed to cross borders.
- mapping system embodiments may deal with large areas (e.g., on the scale of countries, continents, or even planets), having access to a full area bitmap at one time may not be practical. To address this issue, as previously explained, it may be desirable to divide the full area into smaller sub-areas, and to generate the tiles for one sub-area at a time. To do this without introducing errors into the full map image, one embodiment addresses the issue of continuity across tiles and sub-areas.
- Figure 4 illustrates a typical label placement problem, where a map label ("Main Street") crosses map tile boundaries (referred to as the sub-area border), while Figure 5 illustrates a problem that may appear when each sub-area is drawn independently.
- Figure 6 illustrates a solution to the problem shown in Figures 4 and 5 , where a map label is not allowed to cross map tile boundaries, in accordance with an embodiment of the present invention. This approach assure that features that could cause problems across borders between sub-areas are placed during the pre-rendering process so as to eliminate or otherwise reduce errors in the map.
- name labels for road or railroads are placed during the pre-rendering process so they do not cross these sub-area borders, assuring that the final map doesn't have labels that are only partially there (e.g., as shown in Figure 5 ).
- Labels for areas can be placed depending only on the shape of such features. This means that to place such labels, the entire feature being labeled must be retrieved, even if parts of the feature are in other sub-areas, and then the label must be placed based on the shape of the full area.
- area labels should be placed before the labels for other features such as roads and railroads, so that these other features will not affect an area label in one sub-area, since these effects would be unknown to the drawing process drawing the map in an adjoining sub-area, and therefore the exact identical placement of the area label would no longer be guaranteed.
- Figure 7 illustrates a solution to the problem shown in Figures 4 and 5 , where a map label that crosses a map tile boundary is drawn in two parts, in accordance with another embodiment of the present invention.
- This solution can be implemented by storing decisions made during the pre-rendering process for each sub-area, and making the decisions available to subsequent processes for drawing areas that contain the same features (or portions thereof), as well as adjoining areas that might move features and labels based on information about the placement of features and labels in previously drawn areas.
- the map drawing module e.g., map painter module 310 shown in Figure 3
- the map drawing module can place labels (e.g., on a road) without taking the border of the sub-area into account, since a label that crosses such a border is saved and available to the drawing process for the adjoining sub-area.
- the adjoining sub-area receives information regarding the placement of the crossing label, and uses that placement as its own, such that the label is drawn again, and the part of it that is in the adjoining sub-area is included in the tiles generated at that location.
- This approach facilitates the property that tiles on different sides of sub-area borders can have features and labels running across them, and thereby allows the process of placement of features and labels to ignore the sub-area borders.
- Pre-rendering decisions can similarly be made regarding how to draw intersecting roads that have grade-levels (ordering by height) assigned to them.
- grade-levels ordering by height assigned to them.
- an area surrounding a set of crossing roads is determined in such a way that it can be regarded as independent for adjoining roads, and the decisions are made for this area, and saved so they are available for the drawing of adjoining sub-areas, in particular those that are intersecting with the area found to be isolated in regard to grade levels.
- map painter module 310 may be configured to obtain different sets of information from different sources, rather than just from one data set.
- Tile serving can be implemented in multiple ways, as will be apparent in light of this disclosure.
- One approach is give each tile a file name and store it as an individual file.
- the tiles can then be placed on a server that makes them available by requests locally or over a network.
- this server could be an HTTP server that names each tile according to latitude, longitude, and zoom level. This approach may put some strain on the serving system, in particular as the number of tiles can get very large.
- a serving system can be assembled to ease the strain caused by a large number of tiles.
- the system receiving a request for map tiles may have access to one or more efficient storage mediums (e.g., local caches) that each contains the full set of tiles or a subset thereof, and then may retrieve a tile from that storage medium, and pass it on in response to a request.
- efficient storage mediums e.g., local caches
- FIG 8 is a block diagram of a map tile serving system configured in accordance with an embodiment of the present invention.
- This example configuration which can be used to implement the tile serving system 115 of Figure 1 , attempts to make the system respond well if part of the storage system fails, and is also able to handle large sets of tiles and high volume traffic.
- the tile serving system includes two types of tile servers: Tile Front End (TFE) and Tile Back End (TBE). These servers may communicate over an internal network or other medium.
- TFE Tile Front End
- TBE Tile Back End
- the requests for tiles coming from outside the system are evenly distributed between the TFEs via a request distribution subsystem that implements a load balancing scheme.
- the involved TFE then requests the map tiles from the appropriate TBE, and returns them to the requesting party.
- all of the tiles may be stored on disk storage facilities of each TBE (e.g., in the storage device 220, which could also be tile storage 300).
- the disk storage facilities are used such that each time a tile is requested by a TFE, the rest of the 64 tiles in the 8x8 block containing the tile are also read from the disk, and can reasonably be expected to be in the memory cache on the TBE (e.g., in the main memory 210).
- This embodiment uses an 8x8 block of tiles, so as to provide a total of 64 adjacent tiles at the same zoom level.
- Other embodiments can use other block dimensions (e.g., NxN or MxN).
- any subsequent requests for tiles in the same 8x8 block from the same TBE can be handled without the need for disk access, and therefore more efficiently, unless the 8x8 block has been pushed out of the memory cache by more recent requests. If that is the case, the requested tile can be read from disk, and the 8x8 block may likely be placed in the memory cache again. Thus, if the balance between the sizes of the memory cache on a TBE and the amount of requests for often-accessed tiles is taken into account, a high percentage of the requests may be handled from the memory cache, making each TBE more efficient.
- the TFEs may be used to distribute the requests among the TBEs so that they may function in a way that reasonably balances between serving as much as possible from memory cache, without using an unreasonable number of TBEs and while still being able to serve the full tile set efficiently.
- any one request for map data could be processed by a corresponding TBE using its cache memory. If one TBE fails, then its load can be distributed among the remaining 19 TBEs. In such a case, the cache memory of each remaining TBE would eventually grow (after a period of "learning") to include its share of the failed TBE's load.
- each tile in a block should be requested from the same TBE.
- each tile may be numbered sequentially with an x and y value, based on longitude and latitude, and a z value representing the zoom level at which the tile was drawn.
- a block may similarly be numbered such that its x and y are equal to the result of performing an integer division by 8 on any of the x and y value pairs of the tiles it contains.
- Hash(x div 8, y div 8, z) The value returned by the hash function may then be used to calculate a number corresponding to the TBE to use, as Hash(x div 8, y div 8, z) MOD N, where N is the number of TBEs in the system.
- This hashing function approach may help to evenly distribute the load on a tile serving system, when there is no knowledge of how the load will be distributed amongst the individual tiles, once the system gets to a reasonable size. This approach, however, does not address the issue of having the system function well if one of the TBE stops functioning.
- another input may be added to the hashing function, specifically, the number of attempts made at retrieving the tile from the TBEs.
- the hashing function may be described as Hash(x div 8, y div 8, z, #attempts).
- the TFEs might skip requests to TBEs that have failed within a short time period, or skip a fixed number of requests to a TBE that failed, or some combination thereof to limit the number of failed requests traveling within the system.
- the system may also handle failure of multiple TBEs, and may start using the failed TBEs again after they start working again or have been replaced, possibly after a short delay (if the time or counting method for reducing failed requests previously mentioned has been implemented). Also, for example, a system with a total of N TBEs, where M of those TBEs have failed, may stabilize after a period of time and function as a system with only N-M TBEs, except for a small increase in response time caused by the failing attempts. Many failover with load sharing schemes will be apparent based on the principles described here.
- the tiles produced by a map rendering process may contain a large percentage of tiles having a single color. Typically, this situation may occur with the colors used for water, land, parks, cities, campuses and other such areas. Since tiles that have the same single color in them are identical, the amount of storage needed on the TBEs may be greatly reduced in one embodiment by not storing these tiles individually. In some implementations, this may save 90+% of the storage space otherwise required.
- an index may be created that contains information about each tile that has been created (e.g., a tile may be a normal tile, a uni-colored tile of a specific color, a broken tile, or a missing tile).
- Such an index may be stored on the TFEs in one implementation, allowing the TFEs to send a tile of the correct color to the client whenever a uni-colored tile is requested.
- These generic uni-colored tiles may be stored in memory cache (e.g., in the main memory 210) on the TFEs to make serving them as efficient as possible.
- the index may also be stored on the TBE machines, in which case the generic tiles would then be delivered to the TFEs from the TBEs, and then passed on to the requesting party.
- the information regarding uni-colored tiles may be present on the client side, either fully, for a part of the map area, or for a single tile. If the index is present on the serving part of the system, it may respond to the request for the information, and the client may simply request the information for the area it is currently displaying, and use the information to avoid requesting uni-colored tiles.
- Another embodiment would allow the TFEs (or TBEs through the TFEs) to respond to a request for a tile, not with a tile, but by returning the information that the requested tile only contains a certain color, and therefore can be replaced by a generic tile on the receiving side.
- the TBE or TFE causes the remote computing device to use uni-color map tiles that are locally available, so that such tiles do not have to be served.
- the remote computing device uses uni-color map tiles that are locally available, so that such tiles do not have to be served.
- optimizations based on the knowledge about uni-colored tiles within the full set of tiles in a drawn map, as will be apparent in light of this disclosure.
Description
- The invention relates to mapping systems, and more particularly, to mapping systems in a digital environment.
- Computerized mapping systems have been developed to search for, identify, and discover information about geographic locations. One form of such computerized mapping systems includes travel-planning Internet websites. With an excess of 50 million unique monthly users, such map sites are a very popular offering. Examples of such sites include AOL's MapQuest, Yahoo's Telcontar-based maps, and Microsoft's MapPoint.net suite. Such sites all work along the lines of a common model, as will now be described.
- When a Web user asks for a new map view (e.g., by entering a postal address, or by clicking a navigation link next to a current map view), the user's Web browser sends to a Web server a request indicating the boundaries of the new map view. The Web server In turn extracts the corresponding vector-based map data from a database, and draws a bitmap image of the map. The server then converts the bitmap to an image format supported by the user's Web browser and returns the image, sometimes embedded in HTML, to the user's Web browser so that it can be displayed.
- Other map Web sites, such as Britain's MultiMaps or Australia's Wherels utilize a raster-based map database instead. In these cases, it is not necessary to extract vectors and draw a map image. Rather, these functions are replaced by simply extracting the appropriate part of a larger, pre-rendered image.
- Whether vector-based or raster-based, these existing systems typically exhibit very poor performance. In particular, the resulting maps tend to be small and move slowly. Consider, for example, the simple task of panning an existing map view west by, say, 50% of the width of the view. Conventional systems typically produce an entirely new image and transmit the new image from the server to the user's browser. Such systems are wasteful, as they fail to recognize and exploit the 50% overlap between the new and old map views. In the vector-based case, the addition need to produce a map image from vectors in real-time tends to result in maps that are generally hard to read and lack a professional look and feel, thereby detracting from the user experience.
-
U. S. Patent 4972319 discloses a computer implemented method and system that organizes mapping data into a hierarchy of successive magnitudes or levels for presentation of the mapping data with variable resolution, starting from a first or highest magnitude and progressing to a lost or lowest magnitude with highest resolution. - Other vendors have chosen to write custom software for their users to download and install. While this latter approach can result in a dramatic improvement in the user experience, the need to install software on a user's computer may prevent its widespread adoption.
- What is needed, therefore, are digital mapping techniques that facilitate the efficient online delivery of aesthetically pleasing maps.
- According to an aspect of the invention, there is provided a system for generating map tiles for a tile-based digital mapping system comprising a map painter module for generating digital map images; a tile maker for generating map tiles from the digital map images, wherein the tile maker operates according to a configuration file that defines areas and zoom levels for which map tiles should be generated and uses the map painter module to generate the digital map images for areas defined in the configuration file, and wherein generating map tiles from the digital images comprises: identifying areas to be drawn, and various zoom levels at which each area needs to be drawn; dividing the areas into sub-areas as needed at the different zoom levels, such that each sub-area can be pre-rendered in an available memory; pre-rendering each sub-area at a given zoom level; dividing each pre-rendered sub-area into rendering areas, such that each rendering area can be rendered in the available memory; and rendering the rendering areas, and dividing the resulting image into map tiles; and a tile storage for storing map tiles generated by the tile maker.
- In one embodiment, the map painter module is operable to request and receive geographical data for a given area from which the digital map images are generated. Here, a map data storage can be used for storing one or more sets of the geographical data for a given area that is accessible by the map painter module. The map data storage may include, for example, a set of rich mapping format (RMF) files. In one particular configuration, a remote mapping engine (RME) library has an application program interface that allows the map painter module to access the geographical data.
- The tile maker may operate, for example, according to a configuration file that defines areas and zoom levels for which map tiles should be generated. The configuration file may further define at least one of geographical data sets to use, and how the map should be drawn including label placement information. The tile maker can use the map painter module to generate the digital map images for areas defined in the configuration file. In one particular embodiment, the tile maker is adapted to divide large areas defined in the configuration file into smaller areas, and uses the map painter module to generate the digital map images for those smaller areas. The tile maker may be further configured to encode the generated map tiles into a desired image format (e.g., sub-pixel bitmaps, GIF, PNG, TIFF, or JPEG), and to store the formatted map tiles. The system may further include a map tile serving system configured to serve map tiles stored in the tile storage, in response to map requests from a user.
- Another embodiment of the present invention provides a tile-based digital mapping method. The method includes generating map tiles from digital map images, storing the map tiles, and serving one or more of the map tiles, in response to a user map request. The method may further include identifying uni-color map tiles that are locally available to a computing device of the user. The method may further include generating the digital map images, which includes defining areas and zoom levels for which map tiles should be generated. Generating the digital map images may include, for example, defining at least one of geographical data sets to use, and how the map should be drawn including label placement information. Storing the map tiles may include encoding the generated map tiles into a desired image format, and storing the formatted map tiles. Serving one or more of the map tiles may include caching the served map tiles.
- In one particular embodiment, generating map tiles from digital map images may include: identifying areas to be drawn, and various zoom levels at which the area needs to be drawn; dividing the areas into sub-areas as needed at the different zoom levels, such that each sub-area can be pre-rendered in an available memory; pre-rendering each sub-area at a given zoom level; dividing each pre-rendered sub-area into rendering areas, such that each rendering can be rendered in the available memory; and rendering the rendering areas, and cutting the resulting image into map tiles. In one such case, each of the sub-areas at a zoom level represents a task, so as to provide a list of tasks defined by area and zoom level, and parallel processing is applied to executing these tasks. In another such case, the map to be displayed to the requesting user has a resolution, and the rendering is done at a resolution N times greater than the resolution of the map to be displayed (e. g., N>=2), and the bitmap produced by the rendering is used as input for generating tiles as sub-pixel bitmaps.
- Another embodiment of the present invention provides a method for generating digital map tiles from digital map data. The method includes identifying areas to be drawn, and various zoom levels at which each area needs to be drawn. The method continues with dividing the areas into sub-areas as needed at the different zoom levels, such that each sub- area can be pre-rendered in an available memory. The method continues with pre-rendering each sub-area at a given zoom level, and then dividing each pre-rendered sub-area into rendering areas, such that each rendering area can be rendered in the available memory. The method continues with rendering the rendering areas to produce an image, and dividing the image into map tiles. The pre-rendering each sub-area may include, for example, accessing at least one of geographical data sets and a representation of instructions about how to build the digital map image. The instructions can be represented, for instance, in a configuration file.
- According to another aspect of the invention, there is provided a method for generating digital map tiles from digital map data, comprising: identifying areas to be drawn, and various zoom levels at which each area needs to be drawn; dividing the areas into sub-areas as needed at the different zoom levels, such that each sub-area can be pre-rendered in an available memory; pre-rendering each sub-area at a given zoom level; dividing each pre-rendered sub-area into rendering areas, such that each rendering area can be rendered in the available memory; rendering the rendering areas to produce an image; and dividing the image into map tiles.
- The pre-rendering each sub-area may include, for example, accessing at least one of geographical data sets and a representation of instructions about how to build the digital map image. The instructions can be represented, for instance, in a configuration file. The sub-areas can each have a pre-determined fixed size for each zoom level. In one particular embodiment, pre-rendering decisions prevent problematic features from crossing borders between sub-areas. Alternatively, in another embodiment, pre-rendering decisions allow features to cross borders between sub-areas. In such a case, two aligning sub-areas associated with a border crossing feature are not allowed to be pre-rendered at the same time. Pre-rendering decisions can be stored so they can be used in subsequent pre-rendering tasks (which enables features to cross borders between sub-areas).
- According to another aspect of the invention, there is provided computer program instructions encoded in a processor-readable medium to carry out the aforementioned method.
- The features and advantages described herein are not all-inclusive and, in particular, many additional features and advantages will be apparent to one of ordinary skill in the art in view of the figures and description. Moreover, it should be noted that the language used in the specification has been principally selected for readability and instructional purposes, and not to limit the scope of the inventive subject matter.
-
-
Figure 1 is a block diagram of a tile-based digital mapping system configured in accordance with one embodiment of the present invention. -
Figure 2 is a block diagram of a processing environment that can be employed in the system ofFigure 1 . -
Figure 3 is a block diagram of a system configured for generating map tiles for a digital mapping system in accordance with one embodiment of the present invention. -
Figures 4 and5 illustrate a tile-based mapping system scenario in which a map label crosses map tile boundaries. -
Figure 6 illustrates a solution to the scenario shown inFigures 4 and5 , where a map label is not allowed to cross map tile boundaries, in accordance with an embodiment of the present invention. -
Figure 7 illustrates another solution to the scenario shown inFigures 4 and5 , where a map label that crosses a map tile boundary is drawn in two parts, in accordance with an embodiment of the present invention. -
Figure 8 is a block diagram of a map tile serving system configured in accordance with an embodiment of the present invention. - Digital tile-based mapping techniques are disclosed that enable efficient online serving of aesthetically pleasing maps. In one particular embodiment, an image tile-based digital mapping system is configured for generating map tiles during an offline session, and serving selected sets of those tiles to a client when requested. Also provided are solutions for handling map labels and other such features in a tile-based mapping system, such as for example when a map label or other feature crosses map tile boundaries. Various processing environments (e.g., servers or other computing devices) can be employed in the system.
- The functionality described herein may be implemented by computer program instructions. These instructions can be loaded into a computer or other processing environment to produce a machine, such that the instructions are executed to carry out tile-based mapping techniques in accordance with various embodiments of the present invention. These computer program instructions may also be encoded in a processor-readable medium so as to provide an article of manufacture. Any number of programming languages or combination thereof (e.g., C, C++, HTML) can be used to implement the computer program instructions. Other embodiments of the present invention can be implemented by purpose-built hardware, such as field programmable gate array (FPGA) or application specific integrated circuits (ASIC) technology. Likewise, combinations of hardware and software can be used to carry out other embodiments of the present invention, as will be apparent in light of this disclosure.
-
Figure 1 is a block diagram of a tile-based digital mapping system configured in accordance with one embodiment of the present invention. As can be seen, the system includes acomputing device 103 connected to anetwork 105. Various serving systems are also connected to thenetwork 105, including aweb serving system 110, atile serving system 115, and a locationdata serving system 120. Other computing devices 105 (not shown) may also be in communication with the servingsystems network 105. - The
computing device 103 may be any type of device configured for computing, such as a personal computer or laptop, a mobile phone, a personal digital assistant, a navigation system located in a vehicle, a handheld GPS system, and so on. Thecomputing device 103 includes a browser (or other similar application) that allows the user to interface and communicate with other devices and systems on thenetwork 105. Examples of browsers include Microsoft's Internet Explorer browser, Netscape's Navigator browser, Mozilla's Firefox browser, PalmSource's Web Browser, or any other browsing or application software capable of communicating withnetwork 105. Generally stated, thecomputing device 103 can be any device that allows a user to access the servingsystems network 105. - The
web serving system 110 is the part of the overall system that delivers the initial HTML (hypertext markup language), images, scripting language (e.g., JavaScript, IScript, Visual Basic Script), XSLT (extensible stylesheet language transformation), and other static elements that are used by the browser oncomputing device 103. Note that this servingsystem 110 may include one or more servers operating under a load balancing scheme, with each server (or a combination of servers) configured to respond to and interact with thecomputing device 103. Theweb serving system 110 can be implemented with conventional technology, as will be apparent in light of this disclosure. - The
tile serving system 115 is the part of the overall system responsible for delivering individual map tiles in response to requests from thecomputing device 103, with each tile being uniquely defined, for example, by x, y and z values that coordinates to an overall tile-based map. Other tile identification schemes can be used as well. The servingsystem 115 may include one or more servers operating under a load balancing scheme, with each server (or a combination of servers) configured to respond to and interact with thecomputing device 103. Example architecture and functionality associated with thetile serving system 115 will be further discussed with reference toFigure 8 . - The location
data serving system 120 is the part of the overall system that delivers location data of various forms to thecomputing device 103. Its functions include, for example, finding the geographic location of a street address, generating and formatting driving directions, and searching for location-specific results to a query (e.g., as with the Google Local Search service). Other services may also be provided. In general, when the user enters a search string, it is put into a request by thecomputing device 103, and sent to the locationdata serving system 120 via thenetwork 105. The locationdata serving system 120 then determines what the request is for, and responds with the appropriate data from various subsystems, such as geo-coders, routing engines, and local search indexes, in a format thatcomputing device 103 can use to present the data to the user (e.g., via a browser). - The
network 105 may be any type of communications network, such as a local area network (e.g., intranet), wide area network (e.g., internet), or some combination thereof. Alternatively, thenetwork 105 may be a direct connection between thecomputing device 103 and the servingsystems computing device 103,network 105, and/or servingsystems -
Figure 2 is a block diagram of a processing environment that can be employed in the system ofFigure 1 . For instance,computing device 103, or any servers included in the servingsystems Figure 2 is merely provided as one possible example. - As can be seen, this example processing environment includes a
bus 200, one ormore processors 205, amain memory 210, a read-only memory (ROM) 215, astorage device 220, one ormore input devices 225, one ormore output devices 230, and acommunication interface 235.Bus 200 may include one or more conductors that permit communication among the components of the processing environment, and can be implemented using conventional bus technology. -
Processor 205 may include any type of conventional processor, microprocessor, or processing logic that interprets and executes instructions.Main memory 210 may include a random-access memory (RAM) or another type of dynamic storage device that stores information and instructions for execution byprocessor 205.ROM 215 may include a conventional ROM device or another type of nonvolatile storage device that stores information and instructions for use byprocessor 205.Storage device 220 may include, for example, a magnetic and/or optical recording medium and its corresponding drive. Note that themain memory 210 may also include a cache memory for temporarily storing commonly accessed data (e.g., map tiles). Such a cache will eliminate the need for accessing thestorage device 220 each time a request for data is received, thereby reducing process times. -
Input device 225 may include one or more conventional mechanisms that permit a user to input information to the processing environment, such as a keyboard, a mouse, a pen, a stylus, handwriting recognition, voice recognition, biometric mechanisms, and the like.Output device 230 may include one or more conventional mechanisms that output information to the user, such as a display, printer, speakers, and the like.Communication interface 235 may include any transceiver-like mechanism that enables the processing environment to communicate with other devices and/or systems. For example,communication interface 235 may include a modem (e.g., 56K, DSL, or cable) for communicating with another device or system vianetwork 105. - In the operation of one embodiment, the
computing device 103 requests map information that is stored in thetile serving system 115. A front-end server (included in tile serving system 115) responds to queries submitted by thecomputing device 103 or "client-side" by returning a web page that contains instructions (e.g., in JavaScript or another scripting language) accessed by the client-side browser. In this way, theclient computing device 103 requests map tiles as needed from thetile serving system 115, which serves the tiles associated with the requested map image. The requested map image is then displayed at thecomputing device 103, by combining together in the web browser the set of tiles that form the requested map image. The map tiles can be "pre-rendered" meaning that they are produced during an off-line phase that will be discussed with reference toFigure 3 . - To reproduce any sub-area view of the large raster image as a map image on a user's web browser, a browser-side script can be used that uses only the smallest set of tiles that together covers the desired view. Thus, the user can view a served section of map, and then change the section of map being viewed (e.g., by dragging the map in one direction using the cursor of input device 225), thereby causing new map tiles to be served that fill in the new map locations now within the.browser window. The effect is a virtually endless map that can be zoomed in/out and further adjusted to new locations as desired. For any given implementation, the size of the tiles can be determined heuristically, given the following trade-off: (1) larger tiles tend to increase the total size (in both pixels and bytes) of the tiles needed to produce a given view; while (2) smaller tiles tend to increase the number of separate requests (e.g., HTTP requests) needed to produce a given view.
- Alternatively, rather than using a database of tiles on the server side (e.g., tile serving system 115), each tile can be stored In a separate file, accessible using unique URLs such as: http://<domain>/7/-18/11-145_12_7.gif, where the directory path 7/-18/1 in this example depends solely on the tile coordinates, which in this case are equal to (-145, 12, 7). For simplicity, the first tile of each zoom-level z can be located such that the tile's upper-left pixel has coordinates (0, 0, z). This setup facilitates assignment of a unique coordinate triplet to each tile by integer-dividing the pixel x and y coordinates of the tile's upper-left pixel by the width and height of the tile, respectlvely. Note that in some embodiments, a total of three coordinate systems are thus utilized: latitude/longitude coordinates, pixel (x, y, z) coordinates, and tile (x, y, z) coordinates. This particular choice of coordinate systems is not intended to limit the present invention, and was chosen to aid in describing the algorithms used in some embodiments. In general, any consistent coordinate or indexing system can be used here. In turn, each pixel belongs to a unique tile, the coordinates of which can be easily computed.
- In one embodiment, the zoom levels are numbered 0 thru Z, where 0 represents the level closest to street level, and Z the level that is furthest away from street level. An arbitrary latitude/longitude point within the area of interest is designated and defined as the origin, or origo (such as the geographic center of the contiguous United States). Then, at each zoom level z, the coordinate triplet (0, 0, z) is assigned to the pixel of the z-level raster image containing this origin. Using the standard computer graphics convention that x-axis coordinates grow left-to-right, and y-axis coordinates grow up-to-down, a unique coordinate triplet (x, y, z) is assigned to each pixel of each of the raster images.
- A coordinate conversion routine, given a zoom-level z, converts a latitude/longitude coordinate pair to the appropriate (x, y, z) pixel coordinate, and vice versa. The details of this conversion depend on the map projection that was used in producing the raster images in the first instance.
-
Figure 3 is a block diagram of a system configured for generating map tiles for a digital mapping system in accordance with one embodiment of the present invention. - As mentioned earlier, a set of large, contiguous, pre-rendered raster images of the entire area covered by the map system can be generated in an off-line process that is transparent to the user. One such set of raster images is provided for each zoom-level, ranging, for example, from street level to country level. These larger images are then cut into tiles, which are then encoded into an appropriate image format (e.g., GIF). The purpose of the system shown in
Figure 3 is to generate a complete set of tiles, covering a given set of areas and zoom levels. - In general, the process of generating a map image from which map tiles can be made can be divided into two logic processes: pre-rendering and rendering. In the pre-rendering process, decisions about how the map should be drawn are made based on the available map data and configuration data. In the rendering process, the actual map drawing takes place, either by generating a bitmap image or by defining the map drawing in a vector-based format. For both processes, speed is highly desirable. Carrying out the processes in the memory of a computational device or other suitable processing environment is one way of achieving sufficient speed.
- In one embodiment, the pre-rendering process has access to all the needed map data (geographical data sets from which map images can be drawn), and a representation of the decision about how to build the map in memory. This decision can be represented, for example, in a configuration file. The rendering process may keep the bitmap being drawn in memory, together with the definitions of what is to be drawn. In some (but not all) cases, the pre-rendering process can cover a much larger area than the rendering process in relation to the amount of memory available.
- For example, to cover the entire continental United States and Canada, hundreds of millions of tiles may be needed, with a total file size for the tiles in the order of hundreds of gigabytes of data. Instead of drawing a map image from the underlying data on demand, the entire map is pre-drawn in sections (tiles), and the appropriate tiles are sent to the client when they are needed. Each tile-based map image that is eventually assembled and displayed on a user's web browser matches a sub-area (typically shaped as a rectangle) of one of the larger pre-determined raster images. Tile generation for large areas is discussed herein. The tile generation process is initiated by executing the
tile maker 305. To draw areas, thetile maker 305 uses themap painter module 310 to generate tile images. Themap painter module 310 gets the geographical data for a given area through a commercially available RME (remote mapping engine)library 315, which employs an application program interface (API) that allows themap painter module 310 to access themap data storage 320. Note that in alternative embodiments, themap painter module 310 can be configured to directly access themap data storage 320, thereby eliminating the need for thecommercial RME library 315. In any case, themap painter module 310 operates as a drawing module, where a graphics library can be used to generate bitmaps with the desired appearance. In order to have a bitmap map image be anti-aliased, this can be done by the graphics library or by drawing the map image at a higher resolution than is desired, and then either scaling the image down with an appropriate method (such as bilinear or bicubic resampling), or by using the higher resolution bitmap as the input to software capable of generating sub-pixel bitmaps. One particular such embodiment draws a map image using Microsoft's GDI/GDI+ at 4 times the resolution, and then generates sub-pixel bitmaps by converting each 512x512 pixel area into one 128x128 pixel sub-pixel bitmap tile. - The
tile storage 300 is where the tiles generated by thetile maker 305 are saved. In one embodiment,tile storage 300 is implemented as a simple disk based storage system, but it could be any system capable of receiving and storing large amounts of data efficiently. Since a normal file system often becomes inefficient when handling a large number of small files, the tiles can be stored in compound files. In one particular embodiment, the tiles are stored as sub-pixel bitmaps, but any bitmap or vector-based format could be used instead. Once the map tiles are stored in atile storage 300, they are available to a process that reads the tiles (e.g., in blocks or one at a time) and caches them in a manner that may be optimized with respect to the digital mapping system that serves the tiles to a requesting client. - The
tile maker 305 can be started with a configuration file, which defines which areas and zoom levels the tiles should be generated for, which data sets to use, and how the map should be drawn (e.g., through a specification of colors, appearance for various features, label placement, and the like). The configuration file can also contain additional data not present in themap data storage 320, such as manually placed labels. In one embodiment, the configuration file is implemented as an extensible markup language (XML) formatted text file, containing all the configuration data thetile maker 305 needs to draw map images (using the map painter module 310). Other formats and solutions for executing thetile maker 305 could be used as well, as will be apparent in light of this disclosure. - As explained, the
tile maker 305 uses themap painter module 310 to draw the map images for the areas defined in the configuration file. In one particular instance, map drawing is the process of generating a bitmap image of a target area (e.g., Midwestern United States or the city of San Francisco, or some other geographical area) from vector data defining points, lines, and areas of geographical features such as Points of Interest (POI) and addresses, features such as roads and railways, cities, parks, and the like. When an area is large, it can be impractical for themap painter module 310 to draw and store the entire drawn map image in memory, so thetile maker 305 can divide the area into smaller areas, and draw those one at a time. Tile generation for large areas is further discussed herein. Since it is desirable for the area being drawn to constitute a single continual image, this division can lead to problems, since drawing decisions with respect to different parts of the area might not align at the borders between these parts. - One solution, which is further discussed with reference to
Figure 6 , is to force labels and other problematic features to be drawn only fully inside the area currently being drawn - this solution prevents partially drawn labels, but it can decrease the quality of the map image along borders, since it limits the range of possibilities for placing such features. For instance, a road crossing such a border between two separately drawn areas could have the same label placed on both sides of the border, much closer than the labels would otherwise be placed. Another solution, which is further discussed with reference toFigure 7 , is to save the decisions for placing problematic features along borders, and then take these decisions into account when drawing subsequent areas. This can be done simply to avoid placing features in unfortunate ways on each side of a border, or it can allow features to be placed independently of borders (e.g., by allowing such features to cross borders). - To draw an area, the
tile maker 305 can use themap painter module 310, and pass on to themap painter module 310 the relevant information about the area to be drawn, the desired scale, which geographical data sets to include, which features to draw and how such features should be drawn. In response, themap painter module 310 returns a corresponding digital map image, which is turned into tiles by thetile maker 305 and stored in the desired format, such as sub-pixel bitmaps (or any bitmap or vector based format), in thetile storage 300. - In one particular embodiment, a tile size of 128x128 pixels is used, with the tiles being stored in a GIF format. Other embodiments may use a tile size of 256x256 pixels, stored either in GIF, PNG, TIFF, or JPEG formats. Other tile sizes and image storage formats may also be used, depending on the requirements of each particular implementation. These tiles generally form a regular, rectangular grid, and this property facilitates system implementation in one embodiment. However, note that any other division of the large raster images into tiles of any shapes and sizes that allows for assembly on the client-side (e.g., computing device 103) may also be used to achieve the effects of the present invention.
- As previously discussed, the
RME library 315 is a commercially available piece of software that can be used to query data from RMF (rich mapping format) files. TheRME library 315 supports spatial queries that request information involving the geographic relation of two or more items. Example queries are "What map features fall within a given area?" or "What map features fall within a given area that have a priority level higher than a certain threshold?" The result of the spatial query is used to generate map images and ultimately map tiles. RMF files are generated by compiling other map formats to RMF. The benefit of this process is that the full range of map data file formats that can be compiled into RMF files can be queried in a consistent manner through theRME library 315. Note that any combination of file formats and libraries can be used in the described system; the only requirement is that there is a service that themap painter module 310 can use to get the geographica 1 data for a given area. - The
map data storage 320 is geographical map data stored on a disk, which is accessed by theRME library 315. In one embodiment, the stored map data comprises commercially available NavTech data that has been compiled by Telcontar (a commercial provider of digital map and navigation information) into a set of RMF (Rich Map Format) files. RMF is a conventional map data format optimized for spatial query processing. Thus, once an item is found in the spatially formatted dataset, other close-by items can be found with relative ease. Note, however, that there are many other ways to organize the map data instorage 320, such as sequentially or in layers. The exact files/data sets to use can be defined by the configuration file that was used to control the execution of thetile maker 305. Any source of map data can be substituted here, and theRME library 315 and themap data storage 320 could be one system with an API that themap painter module 310 can use. Alternatively, theRME library 315 and API functionality can be integrated into themap painter module 310. Other configurations will be apparent in light of the disclosure herein. - As previously indicated, the pre-rendering process can (in some cases) cover a much larger area than the rendering process in relation to the amount of memory available. Refinements can be made to the tile generation process carried out by the system of
Figure 3 , so as to make tile generation feasible for large areas (e.g., the continental U.S. and Canada). In one embodiment, the process for generation of all the tiles defined by a configuration file proceeds as follows. - First, the
tile maker 305 looks at all the areas that need to be drawn, and the various zoom levels at which they need to be drawn, and divides the areas into sub-areas as needed at the different zoom levels, such that each sub-area can be pre-rendered in a given amount of memory. The decision can be based on the actual data for a given area. Alternatively, to keep this step as short as possible, a fixed size for a sub-area can be used, or a fixed size for each zoom level. Each of the sub-areas at a zoom level becomes a task on its own, defined by area and zoom level, stored in a list, and a large number oftile makers 305 can be applied to executing these tasks (e.g., using parallel processing). - To avoid problems across the borders between these sub-areas, the pre-rendering process can assure that no problematic features cross these borders, thereby enabling each sub-area to be pre-rendered and subsequently rendered fully independently (
Figure 6 ). Alternatively, the decisions made during one pre-rendering process can be saved so they can be accessed in subsequent pre-rendering tasks, so that features can cross borders between sub-areas (Figure 7 ). This requires some coordination, so as to avoid having two aligning sub-areas be pre-rendered at the same time (assuming a parallel processing scheme withmultiple tile makers 305 is in place). - When a
tile maker 305 takes one of the tasks from the list, it pre-renders the sub-area at the zoom level defined by the task, and then divides the sub-area into rendering areas that are small enough to be rendered in the available memory. Thetile maker 305 then proceeds to render one rendering area at a time, cutting the resulting image into tiles, and placing the tiles in thetile storage 300. In one particular embodiment, the rendering is done at 4 times the desired resolution, and the resulting bitmap is used as input for generating tiles as sub-pixel bitmaps, but other sizes and formats can be used depending on the desired output. Note that features such as labels can cross the borders between the rendering areas, since all decisions about their placement are done during the pre-rendering process. Note also that if the sub-areas are made small enough to be both pre-rendered and rendered in memory, there is less distance between the borders that impose restriction on the placement of features such as labels, and the resulting map is generally of lesser quality. - In addition to the already mentioned strategies for generating tiles depicting a continual map with no broken features (e.g., across tile borders), decisions about the placement of features can be made based only on map data within a certain radius, in such a way that nothing outside that radius can affect the label placement. In such a system, there may be no need to identify borders that cannot be crossed by features such as labels, as long as an area being pre-rendered and rendered can access map data beyond the sub-area (up to the radius outside the sub-area). With sufficient refinement of the pre-rendering code and a large enough radius, such a system may be able to produce results comparable in quality to the previously described methods. When labeling areas such as cities or lakes, the pre-rendering process can load the entire feature from the map data, and use only the feature to decide where to place labels. This means that the decision about placement of such labels or similar features will be the same for adjacent sub-areas, so these features can be allowed to cross borders.
- The following illustrates example applications of the previously described continuity techniques, with reference to
Figures 4 through 7 . - Since mapping system embodiments may deal with large areas (e.g., on the scale of countries, continents, or even planets), having access to a full area bitmap at one time may not be practical. To address this issue, as previously explained, it may be desirable to divide the full area into smaller sub-areas, and to generate the tiles for one sub-area at a time. To do this without introducing errors into the full map image, one embodiment addresses the issue of continuity across tiles and sub-areas.
Figure 4 illustrates a typical label placement problem, where a map label ("Main Street") crosses map tile boundaries (referred to as the sub-area border), whileFigure 5 illustrates a problem that may appear when each sub-area is drawn independently. -
Figure 6 illustrates a solution to the problem shown inFigures 4 and5 , where a map label is not allowed to cross map tile boundaries, in accordance with an embodiment of the present invention. This approach assure that features that could cause problems across borders between sub-areas are placed during the pre-rendering process so as to eliminate or otherwise reduce errors in the map. - For instance, name labels for road or railroads are placed during the pre-rendering process so they do not cross these sub-area borders, assuring that the final map doesn't have labels that are only partially there (e.g., as shown in
Figure 5 ). Labels for areas, such as cities or lakes, can be placed depending only on the shape of such features. This means that to place such labels, the entire feature being labeled must be retrieved, even if parts of the feature are in other sub-areas, and then the label must be placed based on the shape of the full area. In a system that seeks to minimize the appearance of overlapping labels, area labels should be placed before the labels for other features such as roads and railroads, so that these other features will not affect an area label in one sub-area, since these effects would be unknown to the drawing process drawing the map in an adjoining sub-area, and therefore the exact identical placement of the area label would no longer be guaranteed. -
Figure 7 illustrates a solution to the problem shown inFigures 4 and5 , where a map label that crosses a map tile boundary is drawn in two parts, in accordance with another embodiment of the present invention. This solution can be implemented by storing decisions made during the pre-rendering process for each sub-area, and making the decisions available to subsequent processes for drawing areas that contain the same features (or portions thereof), as well as adjoining areas that might move features and labels based on information about the placement of features and labels in previously drawn areas. - In such a case, the map drawing module (e.g.,
map painter module 310 shown inFigure 3 ) can place labels (e.g., on a road) without taking the border of the sub-area into account, since a label that crosses such a border is saved and available to the drawing process for the adjoining sub-area. The adjoining sub-area receives information regarding the placement of the crossing label, and uses that placement as its own, such that the label is drawn again, and the part of it that is in the adjoining sub-area is included in the tiles generated at that location. This approach facilitates the property that tiles on different sides of sub-area borders can have features and labels running across them, and thereby allows the process of placement of features and labels to ignore the sub-area borders. - The same approach can be applied to the placement of route signs and area labels (and it may be combined with the methods previously mentioned of looking at the entire area being labeled). Pre-rendering decisions can similarly be made regarding how to draw intersecting roads that have grade-levels (ordering by height) assigned to them. In the case of such roads with grade levels, an area surrounding a set of crossing roads is determined in such a way that it can be regarded as independent for adjoining roads, and the decisions are made for this area, and saved so they are available for the drawing of adjoining sub-areas, in particular those that are intersecting with the area found to be isolated in regard to grade levels.
- The available map data from various commercial vendors often vary greatly in coverage and quality. To achieve maps are of a high quality, it may be necessary to combine data from multiple sources. For example, one data set might have the most detailed outline of an airport area and the airport runways, while another set might have information about where the airport label could be placed, and a location that should be used for generating driving directions to and from the airport. To get the best from multiple map data sets, the
map painter module 310 may be configured to obtain different sets of information from different sources, rather than just from one data set. - The notion of a large continual map available as tiles at multiple zoom levels is also attractive when the map area covers multiple countries and even continents. Again, such a system may be implemented using the methods previously described for dividing a map drawing into sub-areas, and accessing the map tile sets available for the different countries. This means that instead of just a map of the United States, for example, a single continuous map can be generated for the entire North American continent, or even the entire planet, at a full range of zoom levels.
- Tile serving can be implemented in multiple ways, as will be apparent in light of this disclosure. One approach is give each tile a file name and store it as an individual file. The tiles can then be placed on a server that makes them available by requests locally or over a network. For a web-based system, this server could be an HTTP server that names each tile according to latitude, longitude, and zoom level. This approach may put some strain on the serving system, in particular as the number of tiles can get very large.
- There are many ways that a serving system can be assembled to ease the strain caused by a large number of tiles. For example, the system receiving a request for map tiles may have access to one or more efficient storage mediums (e.g., local caches) that each contains the full set of tiles or a subset thereof, and then may retrieve a tile from that storage medium, and pass it on in response to a request.
-
Figure 8 is a block diagram of a map tile serving system configured in accordance with an embodiment of the present invention. This example configuration, which can be used to implement thetile serving system 115 ofFigure 1 , attempts to make the system respond well if part of the storage system fails, and is also able to handle large sets of tiles and high volume traffic. - As can be seen, the tile serving system includes two types of tile servers: Tile Front End (TFE) and Tile Back End (TBE). These servers may communicate over an internal network or other medium. The requests for tiles coming from outside the system (e.g., via the external network) are evenly distributed between the TFEs via a request distribution subsystem that implements a load balancing scheme. The involved TFE then requests the map tiles from the appropriate TBE, and returns them to the requesting party.
- In one possible implementation, all of the tiles may be stored on disk storage facilities of each TBE (e.g., in the
storage device 220, which could also be tile storage 300). Here, the disk storage facilities are used such that each time a tile is requested by a TFE, the rest of the 64 tiles in the 8x8 block containing the tile are also read from the disk, and can reasonably be expected to be in the memory cache on the TBE (e.g., in the main memory 210). This embodiment uses an 8x8 block of tiles, so as to provide a total of 64 adjacent tiles at the same zoom level. Other embodiments can use other block dimensions (e.g., NxN or MxN). - Thus, any subsequent requests for tiles in the same 8x8 block from the same TBE can be handled without the need for disk access, and therefore more efficiently, unless the 8x8 block has been pushed out of the memory cache by more recent requests. If that is the case, the requested tile can be read from disk, and the 8x8 block may likely be placed in the memory cache again. Thus, if the balance between the sizes of the memory cache on a TBE and the amount of requests for often-accessed tiles is taken into account, a high percentage of the requests may be handled from the memory cache, making each TBE more efficient.
- In one embodiment, the TFEs may be used to distribute the requests among the TBEs so that they may function in a way that reasonably balances between serving as much as possible from memory cache, without using an unreasonable number of TBEs and while still being able to serve the full tile set efficiently. To increase the percentage of tiles served from memory cache, it may be desirable to cause all of the TFEs to direct requests for a given tile (e.g., or 8x8 set of tiles) to the same TBE, and/or it may be desirable for the load on the TBEs to be evenly distributed, so as to benefit more fully from each TBE.
- For instance, assume that there are 20 TBEs, and each is capable of caching 1/20 of an overall map. Thus, any one request for map data could be processed by a corresponding TBE using its cache memory. If one TBE fails, then its load can be distributed among the remaining 19 TBEs. In such a case, the cache memory of each remaining TBE would eventually grow (after a period of "learning") to include its share of the failed TBE's load.
- These functions may be implemented in one embodiment by using the same hashing function on each TFE. The hashing function returns (or can be used to compute) the number of the TBE from which to request a given tile. Since the tiles are stored in memory in 8x8 blocks in one embodiment, each tile in a block should be requested from the same TBE. In this implementation, each tile may be numbered sequentially with an x and y value, based on longitude and latitude, and a z value representing the zoom level at which the tile was drawn. In one embodiment, a block may similarly be numbered such that its x and y are equal to the result of performing an integer division by 8 on any of the x and y value pairs of the tiles it contains. Thus, the hashing functions in one embodiment can be described as Hash(x div 8, y div 8, z). The value returned by the hash function may then be used to calculate a number corresponding to the TBE to use, as Hash(x div 8, y div 8, z) MOD N, where N is the number of TBEs in the system.
- This hashing function approach may help to evenly distribute the load on a tile serving system, when there is no knowledge of how the load will be distributed amongst the individual tiles, once the system gets to a reasonable size. This approach, however, does not address the issue of having the system function well if one of the TBE stops functioning.
- To address this issue, in one embodiment another input may be added to the hashing function, specifically, the number of attempts made at retrieving the tile from the TBEs. In this embodiment, the hashing function may be described as Hash(x div 8, y div 8, z, #attempts). Thus, if a TFE fails in its first attempt to retrieve a tile from a TBE, it may increase the #attempts by adding 1 to the start value of #attempts (e.g., 0 or 1), and then may execute the hashing function again, which will now take it to the next TBE for the tile. This process may be repeated until either the tile can be retrieved, or the #attempts reaches a preset threshold, typically a number significantly greater than the number of TBEs in the system.
- This approach provides a number of advantages. Specifically, if a TBE goes down, the tiles it would normally serve will instead be served by the remaining TBEs, distributed by the hashing function. This can happen without any communication among the TFEs or TBEs, and may have little impact on the response time of the overall system. To further enhance the system, in one embodiment the TFEs might skip requests to TBEs that have failed within a short time period, or skip a fixed number of requests to a TBE that failed, or some combination thereof to limit the number of failed requests traveling within the system.
- The system may also handle failure of multiple TBEs, and may start using the failed TBEs again after they start working again or have been replaced, possibly after a short delay (if the time or counting method for reducing failed requests previously mentioned has been implemented). Also, for example, a system with a total of N TBEs, where M of those TBEs have failed, may stabilize after a period of time and function as a system with only N-M TBEs, except for a small increase in response time caused by the failing attempts. Many failover with load sharing schemes will be apparent based on the principles described here.
- The tiles produced by a map rendering process may contain a large percentage of tiles having a single color. Typically, this situation may occur with the colors used for water, land, parks, cities, campuses and other such areas. Since tiles that have the same single color in them are identical, the amount of storage needed on the TBEs may be greatly reduced in one embodiment by not storing these tiles individually. In some implementations, this may save 90+% of the storage space otherwise required.
- To make the system able to serve these uni-colored tiles in one embodiment, an index may be created that contains information about each tile that has been created (e.g., a tile may be a normal tile, a uni-colored tile of a specific color, a broken tile, or a missing tile). Such an index may be stored on the TFEs in one implementation, allowing the TFEs to send a tile of the correct color to the client whenever a uni-colored tile is requested. These generic uni-colored tiles may be stored in memory cache (e.g., in the main memory 210) on the TFEs to make serving them as efficient as possible. The index may also be stored on the TBE machines, in which case the generic tiles would then be delivered to the TFEs from the TBEs, and then passed on to the requesting party.
- In another embodiment, the information regarding uni-colored tiles may be present on the client side, either fully, for a part of the map area, or for a single tile. If the index is present on the serving part of the system, it may respond to the request for the information, and the client may simply request the information for the area it is currently displaying, and use the information to avoid requesting uni-colored tiles. Another embodiment would allow the TFEs (or TBEs through the TFEs) to respond to a request for a tile, not with a tile, but by returning the information that the requested tile only contains a certain color, and therefore can be replaced by a generic tile on the receiving side. In any such cases, the TBE or TFE causes the remote computing device to use uni-color map tiles that are locally available, so that such tiles do not have to be served. There are several ways of implementing optimizations based on the knowledge about uni-colored tiles within the full set of tiles in a drawn map, as will be apparent in light of this disclosure.
- The foregoing description of the embodiments of the invention has been presented for the purposes of illustration and description. It is not intended to be exhaustive or to limit the invention to the precise form disclosed. Many modifications and variations are possible in light of this disclosure. It is intended that the scope of the invention be limited not by this detailed description, but rather by the claims appended hereto.
Claims (30)
- A system for generating map tiles for a tile-based digital mapping system including:a map painter module (310) for generating digital map images;a tile maker (305) for generating map tiles from the digital map images, wherein the tile maker (305) operates according to a configuration file that defines areas and zoom levels for which map tiles should be generated and uses the map painter module (310) to generate the digital map images for areas defined in the configuration file, and wherein generating map tiles from the digital images includes:identifying areas to be drawn, and various zoom levels at which each area needs to be drawn;dividing the areas into sub-areas as needed at the different zoom levels, such that each sub-area can be pre-rendered in an available memory;pre-rendering each sub-area at a given zoom level;dividing each pre-rendered sub-area into rendering areas, such that each rendering area can be rendered in the available memory; andrendering the rendering areas, and dividing the resulting image into map tiles; anda tile storage (300) for storing map tiles generated by the tile maker.
- The system of claim 1 wherein the map painter module (310) is operable to request and receive geographical data for a given area from which the digital map images are generated.
- The system of claim 2 further including:a map data storage (320) for storing one or more sets of the geographical data for a given area that is accessible by the map painter module.
- The system of claim 3 wherein the map data storage (320) includes a set of rich mapping format (RMF) files.
- The system of any one of claims 2 to 4 further including:a remote mapping engine (RME) library (315) configured with an application program interface that allows the map painter module (310) to access the geographical data.
- The system of claim 1 wherein the configuration file further defines at least one of geographical data sets to use and how the map should be drawn including label placement information.
- The system of any one of claims 1 to 7 wherein the tile maker (305) is adapted to divide large areas defined in the configuration file into smaller areas, and uses the map painter module (310) to generate the digital map images for those smaller areas.
- The system of any previous claim wherein the tile maker (305) is operable to pass information to the map painter module (310), receive from the map painter module (310) a corresponding digital image that is based on the passed information, and divide the image into tiles.
- The system of any previous claim wherein the tile maker (305) is further configured to encode the generated map tiles into a desired image format, and to store the formatted map tiles.
- The system of any previous claim wherein the desired image format is sub-pixel bitmaps.
- The system of any previous claim further including a map tile serving system (115) configured to serve map tiles stored in the tile storage, in response to map requests from a user.
- The system of claim 11 wherein the map tile serving system (115) further includes a plurality of front end tile servers for serving one or more map tiles requested by a user;
a request distributor for distributing requests for map tiles between the plurality of front end tile servers; and
a plurality of back end tile servers communicatively coupled with the plurality of front end tile servers, each back end tile server having access to the map tiles generated by the tile maker, and configured to provide requested map tiles to a corresponding front end tile server. - A method for generating digital map tiles from digital map data, including:identifying areas to be drawn, and various zoom levels at which each area needs to be drawn;dividing the areas into sub-areas as needed at the different zoom levels, such that each sub-area can be pre-rendered in an available memory;pre-rendering each sub-area at a given zoom level;dividing each pre-rendered sub-area into rendering areas, such that each rendering area can be rendered in the available memory;rendering the rendering areas to produce an image; anddividing the image into map tiles.
- The method of claim 13 wherein pre-rendering each sub-area includes accessing at least one of geographical data sets and a representation of instructions about how to build the digital map image.
- The method of claim 14 wherein the instructions are represented in a configuration file.
- The method of any one of claims 13 to 15 wherein the sub-areas each have a pre-determined fixed size.
- The method of any one of claims 13 to 16 wherein the sub- areas each have a pre-determined fixed size for each zoom level.
- The method of any one of claims 13 to 17 wherein pre-rendering decisions prevent problematic features from crossing borders between sub-areas.
- The method of any one of claims 13 to 18 wherein pre-rendering decisions are stored so they can be used in subsequent pre-rendering tasks.
- The method of any one of claims 13 to 19 wherein pre-rendering decisions allow features to cross borders between sub-areas.
- The method of claim 20 wherein two aligning sub-areas associated with a border crossing feature are not allowed to be pre-rendered at the same time.
- The method of claim 13, further including:storing the map tiles; andserving one or more of the map tiles, in response to a user map request.
- The method of claim 22 wherein generating the digital map images further includes defining at least one of geographical data sets to use, how the map should be drawn including label placement information.
- The method of claim 22 or claim 23 wherein storing the map tiles includes encoding the generated map tiles into a desired image format, and storing the formatted map tiles.
- The method of claim 24 wherein the desired image format is sub-pixel bitmaps.
- The method of any one of claims 22 to 25 wherein serving one or more of the map tiles includes caching the served map tiles.
- The method of any one of claims 22 to 26 further including:identifying uni-color map tiles that are locally available to a computing device of the user.
- The method of claim 22, wherein each of the sub-areas at a zoom level represents a task, so as to provide a list of tasks defined by area and zoom level, and parallel processing is applied to executing these tasks.
- The method of claim 28 wherein the map to be displayed to the requesting user has a resolution, and the rendering is done at a resolution N times greater than the resolution of the map to be displayed, and the bitmap produced by the rendering is used as input for generating tiles as sub-pixel bitmaps.
- Computer program instructions encoded in a processor-readable medium to carry out the method of any one of claims 13 to 29.
Priority Applications (4)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
EP12189142.8A EP2560144B1 (en) | 2004-03-23 | 2005-03-23 | Generating and serving tiles in a digital mapping system |
EP20172965.4A EP3716219A1 (en) | 2004-03-23 | 2005-03-23 | Generating and serving tiles in a digital mapping system |
EP12189140.2A EP2560142B1 (en) | 2004-03-23 | 2005-03-23 | Generating and serving tiles in a digital mapping system |
EP12189141.0A EP2560143B1 (en) | 2004-03-23 | 2005-03-23 | Generating and serving tiles in a digital mapping system |
Applications Claiming Priority (4)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US55550104P | 2004-03-23 | 2004-03-23 | |
US56794604P | 2004-05-03 | 2004-05-03 | |
US65084005P | 2005-02-07 | 2005-02-07 | |
PCT/US2005/009538 WO2005094466A2 (en) | 2004-03-23 | 2005-03-23 | Generating and serving tiles in a digital mapping system |
Related Child Applications (7)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
EP20172965.4A Division EP3716219A1 (en) | 2004-03-23 | 2005-03-23 | Generating and serving tiles in a digital mapping system |
EP12189142.8A Division-Into EP2560144B1 (en) | 2004-03-23 | 2005-03-23 | Generating and serving tiles in a digital mapping system |
EP12189142.8A Division EP2560144B1 (en) | 2004-03-23 | 2005-03-23 | Generating and serving tiles in a digital mapping system |
EP12189140.2A Division EP2560142B1 (en) | 2004-03-23 | 2005-03-23 | Generating and serving tiles in a digital mapping system |
EP12189140.2A Division-Into EP2560142B1 (en) | 2004-03-23 | 2005-03-23 | Generating and serving tiles in a digital mapping system |
EP12189141.0A Division EP2560143B1 (en) | 2004-03-23 | 2005-03-23 | Generating and serving tiles in a digital mapping system |
EP12189141.0A Division-Into EP2560143B1 (en) | 2004-03-23 | 2005-03-23 | Generating and serving tiles in a digital mapping system |
Publications (3)
Publication Number | Publication Date |
---|---|
EP1738329A2 EP1738329A2 (en) | 2007-01-03 |
EP1738329A4 EP1738329A4 (en) | 2010-06-09 |
EP1738329B1 true EP1738329B1 (en) | 2016-12-28 |
Family
ID=37450528
Family Applications (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
EP05729642.8A Active EP1738329B1 (en) | 2004-03-23 | 2005-03-23 | Generating and serving tiles in a digital mapping system |
Country Status (4)
Country | Link |
---|---|
EP (1) | EP1738329B1 (en) |
JP (3) | JP5006187B2 (en) |
CA (1) | CA2560560C (en) |
WO (1) | WO2005094466A2 (en) |
Families Citing this family (14)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
DE102005054580A1 (en) * | 2005-11-16 | 2007-05-24 | Robert Bosch Gmbh | Method for displaying a map on a screen of a navigation system and a corresponding navigation system |
JP5207989B2 (en) * | 2009-01-07 | 2013-06-12 | 三菱電機株式会社 | Graphic drawing apparatus and graphic drawing program |
JP2014067077A (en) * | 2012-09-24 | 2014-04-17 | Yahoo Japan Corp | Map information providing device |
US9151627B2 (en) * | 2014-03-04 | 2015-10-06 | Google Inc. | Navigation directions between automatically determined starting points and selected destinations |
JP6022123B1 (en) | 2015-11-09 | 2016-11-09 | 三菱電機株式会社 | Image generation system and image generation method |
KR102479037B1 (en) * | 2016-05-25 | 2022-12-20 | 한국전자통신연구원 | Device for tile map service and method thereof |
CN107451150B (en) * | 2016-05-30 | 2023-01-20 | 中兴通讯股份有限公司 | Geographic data presentation method and device |
US10678842B2 (en) | 2017-03-21 | 2020-06-09 | EarthX, Inc. | Geostory method and apparatus |
JP7123430B2 (en) * | 2018-07-30 | 2022-08-23 | 学校法人千葉工業大学 | Map generation system and moving object |
CN109726260B (en) * | 2018-12-29 | 2023-05-12 | 浪潮软件科技有限公司 | Method for adding specific mark based on offline map tile |
CN111078814B (en) * | 2019-12-10 | 2023-06-20 | 孝感科先电力工程咨询设计有限责任公司 | Map drawing method based on tile map |
CN111753038B (en) * | 2020-06-28 | 2023-06-02 | 中国平安财产保险股份有限公司 | Map data rendering method and system |
CN113010622A (en) * | 2021-03-08 | 2021-06-22 | 智道网联科技(北京)有限公司 | Real-time traffic data processing method and device and electronic equipment |
CN115451943B (en) * | 2022-11-11 | 2023-09-15 | 阿里巴巴（中国）有限公司 | Electronic map processing and navigation method, device, equipment and storage medium |
Family Cites Families (25)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
DE3588138T2 (en) * | 1984-10-22 | 1997-04-17 | Etak Inc | DEVICE FOR PRESENTING A CARD |
JPS61135270A (en) * | 1984-12-06 | 1986-06-23 | Fujitsu Ltd | Picture display system |
US4972319A (en) | 1987-09-25 | 1990-11-20 | Delorme David M | Electronic global map generating system |
JPH0678912B2 (en) * | 1993-04-19 | 1994-10-05 | 日本電装株式会社 | Vehicle map display device |
JP2916347B2 (en) * | 1993-07-21 | 1999-07-05 | 株式会社日立製作所 | Character string display method and apparatus and graphic information management system |
JPH07181890A (en) * | 1993-12-22 | 1995-07-21 | Matsushita Electric Ind Co Ltd | Map display device |
JP3437240B2 (en) * | 1994-03-02 | 2003-08-18 | パイオニア株式会社 | Drawing area data generation method |
US5559707A (en) * | 1994-06-24 | 1996-09-24 | Delorme Publishing Company | Computer aided routing system |
US5848373A (en) * | 1994-06-24 | 1998-12-08 | Delorme Publishing Company | Computer aided map location system |
JPH08210862A (en) * | 1995-02-07 | 1996-08-20 | Mitsubishi Electric Corp | Map display method for navigation |
US5870097A (en) * | 1995-08-04 | 1999-02-09 | Microsoft Corporation | Method and system for improving shadowing in a graphics rendering system |
JP3586757B2 (en) * | 1996-12-04 | 2004-11-10 | カシオ計算機株式会社 | Map display device and map state notification method |
JPH11102156A (en) * | 1997-09-26 | 1999-04-13 | Hitachi Ltd | Map book registering device in map creation system |
JPH11195132A (en) * | 1997-10-31 | 1999-07-21 | Hewlett Packard Co <Hp> | Buffer for texture mapping and three-dimensional graphics processor and system therefor and method therefor and storage medium for storing processing program |
JP3717300B2 (en) * | 1998-03-13 | 2005-11-16 | 松下電器産業株式会社 | Route selection method |
JP2000029448A (en) * | 1998-07-13 | 2000-01-28 | Toshiba Corp | Picture information providing system, image information display terminal, and server device |
JP3732962B2 (en) * | 1999-02-12 | 2006-01-11 | 株式会社日立情報システムズ | Geographic information system |
JP2000305449A (en) * | 1999-04-19 | 2000-11-02 | Sony Corp | Media where electronic map is stored, and device and method for displaying the same |
GB2374697A (en) * | 2000-06-29 | 2002-10-23 | Emc Corp | Data storage system having point-to-point configuration |
JP2002032280A (en) * | 2000-07-13 | 2002-01-31 | Ism Consulting Firm Kk | Service system and method for distributing contents and software via distributed server and information storage medium |
US6714196B2 (en) * | 2000-08-18 | 2004-03-30 | Hewlett-Packard Development Company L.P | Method and apparatus for tiled polygon traversal |
US6803916B2 (en) * | 2001-05-18 | 2004-10-12 | Sun Microsystems, Inc. | Rasterization using two-dimensional tiles and alternating bins for improved rendering utilization |
JP2003208597A (en) * | 2002-01-11 | 2003-07-25 | Dream Technologies Kk | Image converter and image conversion method |
JP2003322537A (en) * | 2002-05-07 | 2003-11-14 | Fujitsu Ten Ltd | Information transmission/reception system for on-vehicle terminal and transmission/reception method |
JP2003186391A (en) * | 2002-12-09 | 2003-07-04 | Asia Air Survey Co Ltd | Method for transforming positional information and storage medium storing positional information transformation program |
-
2005
- 2005-03-23 JP JP2007505107A patent/JP5006187B2/en active Active
- 2005-03-23 EP EP05729642.8A patent/EP1738329B1/en active Active
- 2005-03-23 WO PCT/US2005/009538 patent/WO2005094466A2/en active Application Filing
- 2005-03-23 CA CA2560560A patent/CA2560560C/en active Active
-
2012
- 2012-03-31 JP JP2012083413A patent/JP5564067B2/en active Active
-
2014
- 2014-04-10 JP JP2014081318A patent/JP5789026B2/en active Active
Non-Patent Citations (1)
Title |
---|
None * |
Also Published As
Publication number | Publication date |
---|---|
JP5006187B2 (en) | 2012-08-22 |
EP1738329A2 (en) | 2007-01-03 |
CA2560560C (en) | 2011-08-02 |
WO2005094466A3 (en) | 2007-11-22 |
EP1738329A4 (en) | 2010-06-09 |
CA2560560A1 (en) | 2005-10-13 |
WO2005094466A2 (en) | 2005-10-13 |
JP2008501161A (en) | 2008-01-17 |
JP5789026B2 (en) | 2015-10-07 |
JP2014160490A (en) | 2014-09-04 |
JP5564067B2 (en) | 2014-07-30 |
JP2012168961A (en) | 2012-09-06 |
Similar Documents
Publication | Publication Date | Title |
---|---|---|
EP2560144B1 (en) | Generating and serving tiles in a digital mapping system | |
US7962281B2 (en) | Generating and serving tiles in a digital mapping system | |
EP1738329B1 (en) | Generating and serving tiles in a digital mapping system | |
US10679386B2 (en) | Draggable maps | |
CN101156158B (en) | Generating and serving tiles in a digital mapping system | |
US8903900B2 (en) | Managing map elements using aggregate feature identifiers | |
US6674445B1 (en) | Generalized, differentially encoded, indexed raster vector data and schema for maps on a personal digital assistant | |
US10198521B2 (en) | Processing ambiguous search requests in a geographic information system | |
Frolov et al. | Two Web-GIS Projects on Russian Historical Sources of the 15–19th Centuries | |
Srivastava et al. | Implementation of a complete Web based GIS Solution using Open Source Technologies |
Legal Events
Date | Code | Title | Description |
---|---|---|---|
PUAI | Public reference made under article 153(3) epc to a published international application that has entered the european phase |
Free format text: ORIGINAL CODE: 0009012 |
|
17P | Request for examination filed |
Effective date: 20061023 |
|
AK | Designated contracting states |
Kind code of ref document: A2Designated state(s): AT BE BG CH CY CZ DE DK EE ES FI FR GB GR HU IE IS IT LI LT LU MC NL PL PT RO SE SI SK TR |
|
AX | Request for extension of the european patent |
Extension state: AL BA HR LV MK YU |
|
DAX | Request for extension of the european patent (deleted) | ||
PUAK | Availability of information related to the publication of the international search report |
Free format text: ORIGINAL CODE: 0009015 |
|
RIC1 | Information provided on ipc code assigned before grant |
Ipc: G06G 5/00 20060101AFI20071207BHEP |
|
A4 | Supplementary search report drawn up and despatched |
Effective date: 20100512 |
|
RIC1 | Information provided on ipc code assigned before grant |
Ipc: G09B 29/00 20060101ALI20100506BHEPIpc: G06G 5/00 20060101AFI20071207BHEPIpc: G06T 11/40 20060101ALI20100506BHEP |
|
17Q | First examination report despatched |
Effective date: 20101008 |
|
GRAP | Despatch of communication of intention to grant a patent |
Free format text: ORIGINAL CODE: EPIDOSNIGR1 |
|
INTG | Intention to grant announced |
Effective date: 20160707 |
|
STAA | Information on the status of an ep patent application or granted ep patent |
Free format text: STATUS: GRANT OF PATENT IS INTENDED |
|
GRAS | Grant fee paid |
Free format text: ORIGINAL CODE: EPIDOSNIGR3 |
|
GRAA | (expected) grant |
Free format text: ORIGINAL CODE: 0009210 |
|
STAA | Information on the status of an ep patent application or granted ep patent |
Free format text: STATUS: THE PATENT HAS BEEN GRANTED |
|
AK | Designated contracting states |
Kind code of ref document: B1Designated state(s): AT BE BG CH CY CZ DE DK EE ES FI FR GB GR HU IE IS IT LI LT LU MC NL PL PT RO SE SI SK TR |
|
REG | Reference to a national code |
Ref country code: GBRef legal event code: FG4D |
|
REG | Reference to a national code |
Ref country code: CHRef legal event code: EP |
|
REG | Reference to a national code |
Ref country code: DERef legal event code: R081Ref document number: 602005051006Country of ref document: DEOwner name: GOOGLE LLC (N.D.GES.D. STAATES DELAWARE), MOUN, USFree format text: FORMER OWNER: GOOGLE, INC., MOUNTAIN VIEW, CALIF., US |
|
REG | Reference to a national code |
Ref country code: ATRef legal event code: REFRef document number: 857871Country of ref document: ATKind code of ref document: TEffective date: 20170115 |
|
REG | Reference to a national code |
Ref country code: IERef legal event code: FG4D |
|
REG | Reference to a national code |
Ref country code: DERef legal event code: R096Ref document number: 602005051006Country of ref document: DE |
|
REG | Reference to a national code |
Ref country code: LTRef legal event code: MG4D |
|
REG | Reference to a national code |
Ref country code: FRRef legal event code: PLFPYear of fee payment: 13 |
|
PG25 | Lapsed in a contracting state [announced via postgrant information from national office to epo] |
Ref country code: GRFree format text: LAPSE BECAUSE OF FAILURE TO SUBMIT A TRANSLATION OF THE DESCRIPTION OR TO PAY THE FEE WITHIN THE PRESCRIBED TIME-LIMITEffective date: 20170329Ref country code: LTFree format text: LAPSE BECAUSE OF FAILURE TO SUBMIT A TRANSLATION OF THE DESCRIPTION OR TO PAY THE FEE WITHIN THE PRESCRIBED TIME-LIMITEffective date: 20161228Ref country code: SEFree format text: LAPSE BECAUSE OF FAILURE TO SUBMIT A TRANSLATION OF THE DESCRIPTION OR TO PAY THE FEE WITHIN THE PRESCRIBED TIME-LIMITEffective date: 20161228 |
|
REG | Reference to a national code |
Ref country code: NLRef legal event code: MPEffective date: 20161228 |
|
REG | Reference to a national code |
Ref country code: ATRef legal event code: MK05Ref document number: 857871Country of ref document: ATKind code of ref document: TEffective date: 20161228 |
|
PG25 | Lapsed in a contracting state [announced via postgrant information from national office to epo] |
Ref country code: FIFree format text: LAPSE BECAUSE OF FAILURE TO SUBMIT A TRANSLATION OF THE DESCRIPTION OR TO PAY THE FEE WITHIN THE PRESCRIBED TIME-LIMITEffective date: 20161228 |
|
PG25 | Lapsed in a contracting state [announced via postgrant information from national office to epo] |
Ref country code: NLFree format text: LAPSE BECAUSE OF FAILURE TO SUBMIT A TRANSLATION OF THE DESCRIPTION OR TO PAY THE FEE WITHIN THE PRESCRIBED TIME-LIMITEffective date: 20161228 |
|
PG25 | Lapsed in a contracting state [announced via postgrant information from national office to epo] |
Ref country code: CZFree format text: LAPSE BECAUSE OF FAILURE TO SUBMIT A TRANSLATION OF THE DESCRIPTION OR TO PAY THE FEE WITHIN THE PRESCRIBED TIME-LIMITEffective date: 20161228Ref country code: EEFree format text: LAPSE BECAUSE OF FAILURE TO SUBMIT A TRANSLATION OF THE DESCRIPTION OR TO PAY THE FEE WITHIN THE PRESCRIBED TIME-LIMITEffective date: 20161228Ref country code: ROFree format text: LAPSE BECAUSE OF FAILURE TO SUBMIT A TRANSLATION OF THE DESCRIPTION OR TO PAY THE FEE WITHIN THE PRESCRIBED TIME-LIMITEffective date: 20161228Ref country code: SKFree format text: LAPSE BECAUSE OF FAILURE TO SUBMIT A TRANSLATION OF THE DESCRIPTION OR TO PAY THE FEE WITHIN THE PRESCRIBED TIME-LIMITEffective date: 20161228Ref country code: ISFree format text: LAPSE BECAUSE OF FAILURE TO SUBMIT A TRANSLATION OF THE DESCRIPTION OR TO PAY THE FEE WITHIN THE PRESCRIBED TIME-LIMITEffective date: 20170428 |
|
PG25 | Lapsed in a contracting state [announced via postgrant information from national office to epo] |
Ref country code: ESFree format text: LAPSE BECAUSE OF FAILURE TO SUBMIT A TRANSLATION OF THE DESCRIPTION OR TO PAY THE FEE WITHIN THE PRESCRIBED TIME-LIMITEffective date: 20161228Ref country code: BGFree format text: LAPSE BECAUSE OF FAILURE TO SUBMIT A TRANSLATION OF THE DESCRIPTION OR TO PAY THE FEE WITHIN THE PRESCRIBED TIME-LIMITEffective date: 20170328Ref country code: ATFree format text: LAPSE BECAUSE OF FAILURE TO SUBMIT A TRANSLATION OF THE DESCRIPTION OR TO PAY THE FEE WITHIN THE PRESCRIBED TIME-LIMITEffective date: 20161228Ref country code: BEFree format text: LAPSE BECAUSE OF FAILURE TO SUBMIT A TRANSLATION OF THE DESCRIPTION OR TO PAY THE FEE WITHIN THE PRESCRIBED TIME-LIMITEffective date: 20161228Ref country code: PLFree format text: LAPSE BECAUSE OF FAILURE TO SUBMIT A TRANSLATION OF THE DESCRIPTION OR TO PAY THE FEE WITHIN THE PRESCRIBED TIME-LIMITEffective date: 20161228Ref country code: PTFree format text: LAPSE BECAUSE OF FAILURE TO SUBMIT A TRANSLATION OF THE DESCRIPTION OR TO PAY THE FEE WITHIN THE PRESCRIBED TIME-LIMITEffective date: 20170428 |
|
REG | Reference to a national code |
Ref country code: DERef legal event code: R097Ref document number: 602005051006Country of ref document: DE |
|
PG25 | Lapsed in a contracting state [announced via postgrant information from national office to epo] |
Ref country code: ITFree format text: LAPSE BECAUSE OF FAILURE TO SUBMIT A TRANSLATION OF THE DESCRIPTION OR TO PAY THE FEE WITHIN THE PRESCRIBED TIME-LIMITEffective date: 20161228 |
|
REG | Reference to a national code |
Ref country code: CHRef legal event code: PL |
|
PLBE | No opposition filed within time limit |
Free format text: ORIGINAL CODE: 0009261 |
|
STAA | Information on the status of an ep patent application or granted ep patent |
Free format text: STATUS: NO OPPOSITION FILED WITHIN TIME LIMIT |
|
RAP2 | Party data changed (patent owner data changed or rights of a patent transferred) |
Owner name: GOOGLE LLC |
|
PG25 | Lapsed in a contracting state [announced via postgrant information from national office to epo] |
Ref country code: MCFree format text: LAPSE BECAUSE OF FAILURE TO SUBMIT A TRANSLATION OF THE DESCRIPTION OR TO PAY THE FEE WITHIN THE PRESCRIBED TIME-LIMITEffective date: 20161228Ref country code: DKFree format text: LAPSE BECAUSE OF FAILURE TO SUBMIT A TRANSLATION OF THE DESCRIPTION OR TO PAY THE FEE WITHIN THE PRESCRIBED TIME-LIMITEffective date: 20161228 |
|
26N | No opposition filed |
Effective date: 20170929 |
|
REG | Reference to a national code |
Ref country code: IERef legal event code: MM4A |
|
PG25 | Lapsed in a contracting state [announced via postgrant information from national office to epo] |
Ref country code: LUFree format text: LAPSE BECAUSE OF NON-PAYMENT OF DUE FEESEffective date: 20170323 |
|
PG25 | Lapsed in a contracting state [announced via postgrant information from national office to epo] |
Ref country code: CHFree format text: LAPSE BECAUSE OF NON-PAYMENT OF DUE FEESEffective date: 20170331Ref country code: IEFree format text: LAPSE BECAUSE OF NON-PAYMENT OF DUE FEESEffective date: 20170323Ref country code: SIFree format text: LAPSE BECAUSE OF FAILURE TO SUBMIT A TRANSLATION OF THE DESCRIPTION OR TO PAY THE FEE WITHIN THE PRESCRIBED TIME-LIMITEffective date: 20161228Ref country code: LIFree format text: LAPSE BECAUSE OF NON-PAYMENT OF DUE FEESEffective date: 20170331 |
|
REG | Reference to a national code |
Ref country code: DERef legal event code: R082Ref document number: 602005051006Country of ref document: DERepresentative=s name: MARKS & CLERK (LUXEMBOURG) LLP, LURef country code: DERef legal event code: R081Ref document number: 602005051006Country of ref document: DEOwner name: GOOGLE LLC (N.D.GES.D. STAATES DELAWARE), MOUN, USFree format text: FORMER OWNER: GOOGLE INC., MOUNTAIN VIEW, CALIF., US |
|
REG | Reference to a national code |
Ref country code: FRRef legal event code: PLFPYear of fee payment: 14 |
|
PG25 | Lapsed in a contracting state [announced via postgrant information from national office to epo] |
Ref country code: HUFree format text: LAPSE BECAUSE OF FAILURE TO SUBMIT A TRANSLATION OF THE DESCRIPTION OR TO PAY THE FEE WITHIN THE PRESCRIBED TIME-LIMIT; INVALID AB INITIOEffective date: 20050323 |
|
PG25 | Lapsed in a contracting state [announced via postgrant information from national office to epo] |
Ref country code: CYFree format text: LAPSE BECAUSE OF NON-PAYMENT OF DUE FEESEffective date: 20161228 |
|
PG25 | Lapsed in a contracting state [announced via postgrant information from national office to epo] |
Ref country code: TRFree format text: LAPSE BECAUSE OF FAILURE TO SUBMIT A TRANSLATION OF THE DESCRIPTION OR TO PAY THE FEE WITHIN THE PRESCRIBED TIME-LIMITEffective date: 20161228 |
|
PGFP | Annual fee paid to national office [announced via postgrant information from national office to epo] |
Ref country code: FRPayment date: 20230327Year of fee payment: 19 |
|
PGFP | Annual fee paid to national office [announced via postgrant information from national office to epo] |
Ref country code: GBPayment date: 20230327Year of fee payment: 19Ref country code: DEPayment date: 20230329Year of fee payment: 19 |
|
P01 | Opt-out of the competence of the unified patent court (upc) registered |
Effective date: 20230506 |