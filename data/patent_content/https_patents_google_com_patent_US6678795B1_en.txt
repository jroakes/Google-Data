US6678795B1 - Method and apparatus for memory prefetching based on intra-page usage history - Google Patents
Method and apparatus for memory prefetching based on intra-page usage history Download PDFInfo
- Publication number
- US6678795B1 US6678795B1 US09/639,263 US63926300A US6678795B1 US 6678795 B1 US6678795 B1 US 6678795B1 US 63926300 A US63926300 A US 63926300A US 6678795 B1 US6678795 B1 US 6678795B1
- Authority
- US
- United States
- Prior art keywords
- memory
- prefetch
- given
- entry
- request
- Prior art date
- Legal status (The legal status is an assumption and is not a legal conclusion. Google has not performed a legal analysis and makes no representation as to the accuracy of the status listed.)
- Expired - Lifetime, expires
Links
Images
Classifications
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F12/00—Accessing, addressing or allocating within memory systems or architectures
- G06F12/02—Addressing or allocation; Relocation
- G06F12/08—Addressing or allocation; Relocation in hierarchically structured memory systems, e.g. virtual memory systems
- G06F12/0802—Addressing of a memory level in which the access to the desired data or data block requires associative addressing means, e.g. caches
- G06F12/0862—Addressing of a memory level in which the access to the desired data or data block requires associative addressing means, e.g. caches with prefetch
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F2212/00—Indexing scheme relating to accessing, addressing or allocation within memory systems or architectures
- G06F2212/60—Details of cache memory
- G06F2212/6024—History based prefetching
Definitions
- the present invention relates generally to memories in computer processing systems and, in particular, to a method and apparatus for memory prefetching based on intra-page usage history.
- the prior art uses history information to predict the next possible cache line that a processor may access.
- Some of the prior art is based on parameters like stride distance, i.e., the distance between two consecutive accesses; in this case, the prediction engine adds or subtracts the stride distance to the current address with the anticipation that the processor will request the resulting address.
- Other approaches predict the next possible address based on some trend seen earlier in other regions of memory.
- Yet others like the Cosmos coherence message predictor, predict the source and type of coherence message for a cache line in a multiprocessor (MP) system using a complex prediction logic. The goal of the Cosmos predictor is to predict incoming messages that affect memory blocks and execute those messages in time.
- MP multiprocessor
- the problems stated above, as well as other related problems of the prior art, are solved by the present invention, a method and apparatus for memory prefetching based on intra-page usage history.
- the invention employs data-centric techniques to reduce data/instruction misses in cache memories in a computer processing system.
- the invention is based upon a mechanism for data/instruction prefetching which, in turn, is based upon prior intra-page usage.
- the concept is to monitor and keep a history of which cache lines (data/instructions) within a page are used, and attempt to pull multiple cache lines when the previous usage of a page appears to repeat.
- Cache lines may be pulled directly from main memory or from higher level caches, and even from other nodes/processors in the case of a multiprocessor (MP) system when the cache lines are resident there.
- MP multiprocessor
- the prior art in memory prefetching based on history has mostly been limited to the prediction and prefetching of the next possible sequential cache line(s) after a cache miss, or multiple cache lines that are identified by a sequential pattern.
- the invention may prefetch arbitrary lines within a page which do not need to exhibit any pattern, only history that they have been used in the past.
- the invention may use only one previous instance of a page being accessed (rather than two or more, as required by stride-based approaches of the prior art).
- the invention has a minimal initial learning overhead with respect to the prior art.
- the invention employs filtering of prefetch requests, which aids in removing redundant and useless prefetches so as to avoid excessive prefetch bus traffic.
- a method for fetching at least one of instructions and operand data from a second memory into a first memory of a computer system having at least one processor includes the step of storing a plurality of entries in a table associated with the first memory, wherein each entry is associated with a memory page that includes a plurality of storage elements in the second memory, and includes information of prior access by the at least one processor to each of the plurality of storage elements.
- the table is searched for a given entry associated with a given page that includes a target of the request.
- At least one prefetch request is generated to fetch at least one storage element included in the given page from the second memory to the first memory, based upon given information comprised in the given entry.
- the at least one prefetch request Prior to satisfying the at least one prefetch request, the at least one prefetch request is analyzed with respect to other prefetch requests and fetch requests, if any, to determine which of the at least one prefetch request and the other prefetch requests are to be satisfied.
- the method further includes the step of satisfying at least some of the at least one prefetch request and the other prefetch requests, based on a result of the analyzing step.
- the table is searched for a particular entry corresponding to a particular page that includes the target of the request. If the particular entry is found, particular information included in the particular entry is updated with usage information relative to any particular storage elements that contain the target.
- the method further includes the step of creating a new entry for the given page, if the given entry is not found.
- the creating step includes the step of flagging any given storage elements in the given page that contain the target.
- the flagging step includes the step of setting a bit corresponding to each of the given storage elements to a predefined value.
- the analyzing step includes the step of identifying any redundant prefetch and fetch requests from among the at least one prefetch request, the other prefetch requests, and the fetch requests.
- the analyzing step includes the step of prioritizing an order of the at least one prefetch request, the other prefetch requests, and the fetch requests with respect to other operations being handled by the second memory.
- the generating step further includes the step of limiting how many prefetch requests are at least one of generated and issued, based upon predefined criteria.
- the limiting step includes the step of constraining the generating step to generate the at least one prefetch request only if a target of the at least one prefetch request has been previously stored in the second memory.
- the limiting step includes the step of issuing the at least one prefetch request only if a target of the at least one prefetch request has been previously stored in the second memory.
- the method further includes the step of indicating whether a particular storage element has been previously stored in the second memory, based on a value associated with a particular bit in the table corresponding to the particular storage element.
- the limiting step includes the step of maintaining a count of storage elements that are mapped to the given entry in the table and are currently present in the second memory.
- the method further includes the step of incrementing the count for the given entry, upon the miss.
- the method further includes the step of decrementing the count for the given entry, when a given storage element included in the given entry is evicted from the given entry.
- the method further includes the step of determining a confidence value for the at least one prefetch request.
- the determining step includes the step of reporting whether the at least one prefetch request was at least one of accessed, used and canceled.
- the limiting step includes the step of constraining the generating step to generate the at least one prefetch request only if a target of the at least one prefetch request has a prefetch use measure greater than a predefined threshold.
- FIG. 1 is a diagram illustrating a snapshot of a memory address trace grouped into pages, according to an illustrative embodiment of the invention
- FIG. 2 is a diagram illustrating a multiprocessor computer system having a cache controller (CC) according to an illustrative embodiment of the invention
- FIG. 3 is a flow diagram illustrating a method for memory prefetching, according to an illustrative embodiment of the invention
- FIG. 4 is a flow diagram illustrating a method for setting and managing a presence counter, according to an illustrative embodiment of the invention.
- FIG. 5 is a flow diagram illustrating a method for updating the presence counter value, according to an illustrative embodiment of the invention.
- the present invention is directed to a method and apparatus for memory prefetching based on intra-page usage history. It is to be understood that the present invention may be implemented in various forms of hardware, software, firmware, special purpose processors, or a combination thereof. In one embodiment, the present invention may be implemented in software as an application program tangibly embodied on a program storage device.
- the application program may be uploaded to, and executed by, a machine comprising any suitable architecture.
- the machine is implemented on a computer platform having hardware such as one or more central processing units (CPU), a random access memory (RAM), and input/output (I/O) interface(s).
- the computer platform may also include an operating system and/or micro instruction code.
- various processes and functions described herein may either be part of the micro instruction code or part of the application program (or a combination thereof) which is executed via the operating system.
- various other peripheral devices may be connected to the computer platform such as an additional data storage device and a printing device.
- the invention is a data-centric technique that reduces the data/instruction access latency in modern computer processing systems.
- the invention considers the full memory space in terms of blocks of physically contiguous memory. In current virtual memory systems, this corresponds well to a memory page and, thus, the term “page” is used herein to refer to any such guaranteed contiguous segment of physical memory to which the invention is applied.
- the invention leverages intra-page instruction and data locality to generate prefetch requests into a local cache (or memory) from a distant cache (or memory).
- the prefetch requests are determined by keeping a per-page usage mask (PUM) at the local cache (or memory) controller, and using this mask to generate prefetch requests at an appropriate time.
- PUM per-page usage mask
- Each PUM entry records the set of sub-page entities within the page (usually called cache lines) that were accessed during an earlier usage of the page. It is to be appreciated that the invention may be implemented with respect to prefetching one or more cache lines, fractions of a cache line, or any variation thereof, as readily contemplated by one of ordinary skill in the related art.
- pre-fetching corresponds to the art of issuing a request ahead of time for a target instruction(s) and/or data in anticipation that the target instruction(s) and/or data will be needed by a processor in due course.
- a prefetch instruction allows for the target to be obtained and possibly cached, if the target is not already resident in a cache, in anticipation of a demand fetch instruction.
- Prefetching is to be contrasted with “demand fetching” or simply “fetching”, which corresponds to obtaining the target of a fetch instruction in response to a demand by a processor for the target.
- a target of a pre-fetch or fetch may be an instruction(s) and/or operand data.
- FIG. 1 is a diagram illustrating a snapshot of a memory address trace grouped into pages, according to an illustrative embodiment of the invention.
- the trace indicates those lines in the pages that are accessed by a processor, and the number of times each particular page is accessed.
- FIG. 1 serves as a strong basis for the invention, especially for the use of PUM entries to drive the unique cache lines that are prefetched from the distant memory.
- the number of page accesses is determined by counting the total number of accesses to a memory location that falls within the page.
- each page is 4 kilobytes, and the local memory (L 1 ) line size is fixed at 128 bytes.
- L 1 local memory
- a 32-bit entry is used to represent the 32 cache lines in a page.
- the page with index 3 was accessed 123,196 times, but only five different cache lines were accessed. If it is presumed that these five unique cache lines are all used during each of the page's tours through the cache, the number of cache misses can potentially be cut by as much as 80% through aggressive prefetching.
- hardware is added to the local-memory controller to monitor cache misses.
- the invention could be implemented without adding additional hardware to monitor the cache misses.
- code software may be added to the software-based cache miss handling code to handle the monitoring.
- FIG. 2 is a diagram illustrating a multiprocessor computer system 200 having a cache controller (CC), according to an illustrative embodiment of the invention. It is to be appreciated that the invention is not dependent on any particular computer processing architecture and, thus, while the cache controller is shown in a multiprocessor environment, other types of computer systems may also be used in accordance with the invention (e.g., uniprocessor systems).
- CC cache controller
- each of the various nodes/processors e.g.
- Pi 202 and Pj 252 has its own local cache memory (e.g., Li 204 , Lj 254 , respectively) which interfaces with that of other nodes/processors and the main memory through an intervening medium (e.g., a bus, a ring, and so forth).
- local cache memory e.g., Li 204 , Lj 254 , respectively
- Blocks CCi 206 and CCj 256 represent the cache controllers for the Li 204 and Lj 254 local caches, respectively.
- the local memory is the Lj cache 254
- the distant memory is, e.g., main memory 270
- the invention employs a PUM table 282 and a prefetch engine 284 (also collectively referred to herein as PUM engine 290 ) at the local cache controller.
- the PUM table 282 maintains PUM entries, which are cache line usage patterns for individual pages. Each PUM entry records the local cache line usage history for a page of memory. A bit value of zero indicates that the corresponding cache line has not been used, whereas a bit value of 1 indicates that the line was used. The mechanisms for setting the value of this bit are described below. Note that the PUM table structure needs to be large enough to ensure history availability whilst being insignificant in overall local memory space. Intuitively, the size of the PUM table should have enough space to contain as many pages as the number of unique pages present in the cache. Given the teachings of the invention provided herein, one of ordinary skill in the related art will readily contemplate a proper size for the PUM table structure given the computer processing system in which in the invention is to be implemented.
- FIG. 3 is a flow diagram illustrating a method for memory prefetching, according to an illustrative embodiment of the invention. The method summarily illustrates the functionality of the local cache controller CCj 256 and the attached PUM table 282 and prefetch engine 284 .
- a request is received by the cache controller CCj 256 (step 312 ). It is then determined whether the appropriate cache line is present in the local cache Lj 254 (i.e., is there a cache hit) (step 314 ). Such determination may be made using mechanisms/methods known by one of ordinary skill in the related art (e.g., mechanisms/methods for keeping a directory of cache contents).
- the cache controller CCj 256 performs the normal processing for an access that hits in the ache (step 316 ), sends a request to the PUM engine 290 to update the information in the PUM entry associated with the page containing the line accessed (step 318 ), and returns to step 312 .
- steps 316 and 318 are performed concurrently.
- the PUM engine 290 may optionally carry out operations as performed at steps 332 and 334 described below.
- the cache controller CCj 256 sends a request to transfer the missing cache line from the distant memory (i.e., the CCj 256 generates a demand fetch to the distant memory) (step 320 ), and also sends a request to the PUM engine 290 for the PUM engine to access the corresponding PUM entry (step 322 ).
- step 324 It is then determined whether there is a PUM entry in the PUM table 282 for the page associated with the requested cache line (step 324 ). If there is no such entry, then a new PUM entry is created within the PUM table to accumulate usage information for that page (step 326 ), the bit in the entry corresponding to the requested cache line is set to 1 to indicate that such line was accessed (step 328 ), and the method returns to step 312 . No prefetch requests are generated for a newly created PUM entry. The new PUM entry displaces an existing PUM entry, using a similar allocation mechanism as the one used by the cache controller CCj 256 to allocate in the local cache Lj 254 the new line being fetched from the distant memory 270 .
- the PUM engine 290 retrieves that entry and scans the entry for bits that are set to 1, which indicate previously accessed cache lines within the page (step 330 ). For each cache line whose bit is set to 1 in the PUM entry, the PUM engine generates a prefetch request and sends it to the cache controller CCj 256 (step 332 ). In addition, the bit in the PUM entry associated with the missing cache line is set to 1 (step 334 ). For example, in the case shown in FIG. 1, the PUM entry for the page with index 3 indicates that five cache lines were accessed during previous visits to that page of memory. This is represented by five bits in the PUN set to 1. Consequently, the PUN engine generates a prefetch request for each of the cache lines whose bit is set to 1 (at step 332 ).
- prefetch limiting it is then determined whether to employ prefetch limiting (step 334 ). This determination may be based upon may factors, as are readily apparent to one of ordinary skill in the related art. Moreover, methods in which to implement such a determination in a computer processing system are readily ascertainable by one of ordinary skill in the related art and are, thus, not further described herein.
- the PUM engine 290 limits the number of prefetch requests by applying various conditions to the prefetches generated, prior to sending the prefetch requests to the cache controller CCj 256 (step 336 ). Such limiting is described in further detail at the conclusion of the description of FIG. 2 .
- step 336 is bypassed and the method proceeds to step 338 .
- the cache controller CCj 256 filters the set of prefetch requests generated by the PUM engine 290 , to remove any redundant requests (e.g., requests for cache lines that are already in the local cache 254 ), and to prioritize the order of prefetch requests with respect to other cache traffic (potentially discarding prefetch requests when there are too many outstanding demand requests or too many prefetch requests generated). The method then returns to step 312 .
- the PUM engine 290 could generate prefetch requests only when the access in the PUM table 282 is to a PUM entry that has already been accessed by the cache controller Lj 254 (i.e., the PUM entry is already marked as accessed). This has the effect of limiting the PUM engine's 290 prefetch request generation to situations where previously cached data is being refetched into the local cache 254 , where the prefetches are more likely to be useful. This option requires an additional bit per PUM entry to indicate whether the entry has been previously accessed or not.
- This bit is set to 0 when the PUM entry is created, and is set to 1 when the PUM entry is accessed with a reference to a line whose corresponding bit in the PUM entry is set to 1 (e.g., the line has been previously accessed).
- a presence counter is simply a counter that records the number of cache lines mapped to the PUM entry that are currently present in the local cache Lj 254 .
- the cache controller CCj 256 When the cache controller CCj 256 generates a demand miss, it notifies the PUM engine 290 that the requested cache line will be brought into the local cache Lj 254 , and the PUM engine 290 increments the presence counter for the associated PUM entry.
- the cache controller CCj 256 notifies the PUM engine 290 .
- the presence counter is decremented.
- the presence counter can then be used to control when the PUM engine 290 will generate prefetches. For example, one extreme approach, which should produce a minimum number of prefetches, is to generate prefetches for a PUM entry only when the presence counter value goes from 0 to 1, i.e. the first miss to a page that is not a compulsory miss.
- FIGS. 4 and 5 Methods for managing and updating memory prefetching according to the invention are shown in FIGS. 4 and 5, respectively. Such methods employ a presence counter. However, it is to be appreciated that the invention is not limited to the methods of FIGS. 4 and 5 or the use of a presence counter with respect to managing and updating memory prefetching and, thus, other methods may be used. Given the teachings of the invention provided herein, one of ordinary skill in the related art will contemplate these and various other methods for managing and updating memory prefetching according to the invention, while maintaining the spirit and scope thereof.
- FIG. 4 is a flow diagram illustrating a method for setting and managing the presence counter, according to an illustrative embodiment of the invention.
- the cache controller CCj Upon a miss to local cache Lj 254 for a cache line i ( 410 ), the cache controller CCj performs normal demand miss processing (step 411 ) and it is also determined whether there is a PUM entry for the page P that includes the cache line i (step 412 ).
- step 414 If there is no such PUM entry, then a new PUM entry is created within the PUM table to accumulate usage information for that page (step 414 ), the bit in the entry corresponding to the requested cache line is set to 1 to indicate that such line was accessed (step 416 ), and the value of the presence counter PrCtr is incremented (step 418 ). In contrast, if it determined at step 412 that a PUM entry exists for the cache line I, then it is further determined whether the value of the PrCtr is equal to zero (step 420 ). If not, then the method repeats steps 416 and 418 .
- the bit in the entry corresponding to the requested cache line is set to 1 to indicate that such line was accessed (step 422 ), the value of the presence counter PrCtr is incremented (step 424 ), and the PUM entries having a one bit are sent to the cache controller CCj 516 for prefetch scheduling (step 426 ).
- FIG. 5 is a flow diagram illustrating a method for updating the presence counter value, according to an illustrative embodiment of the invention.
- cache controller CCj 256 Upon an external request to cache controller CCj 256 to invalidate a cache line i ( 510 ) or a need to replace the cache line i ( 511 ), it is determined whether there is a PUM entry for the page P that includes the cache line i (step 512 ). If not, then the method proceeds to step 516 . Otherwise, the value of the presence counter (PrCtr) for the PUM entry for the page P is decremented (step 514 ), and the method proceeds to step 516 . At step 516 , normal processing is performed/continued.
- the illustrative embodiment of the invention described herein uses a single bit per cache line to gather the PUM data. Although a single accessed bit is sufficient for implementing the invention, one of ordinary skill in the related art will realize that it may be possible to achieve additional benefits, or to implement other limiting mechanisms, by employing more than a single bit per cache line in the PUM entries. Such additional bits could be used in various ways, including a mechanism to provide confidence for the prefetch (as is currently done for the case of branch prediction mechanisms in a processor). For example, for each prefetch request the cache controller could later report to the PUM engine whether that prefetch was used or canceled.
- a multi-bit value (e.g., a code) could then be used to record not only which cache lines were accessed, but also whether the prefetches generated for that cache line were subsequently used or canceled by the cache controller.
- the PUM engine could then limit the generation of prefetches to those cache lines in the PUM entry that have a sufficiently high prefetch use measure, implying that they are generally effective. This could be implemented as a simple saturating counter/decrementer, where a use of a prefetch increments the cache line's access value, and a canceled prefetch decrements the access value.
- the PUM engine can then generate prefetches only for those cache lines whose access value exceeds a specified threshold. Given the teachings of the invention provided herein, one of ordinary skill in the related art will contemplate these and various other multi-bit implementations for gathering the PUM data, while maintaining the spirit and scope of the invention.
- the invention described herein employs a simple prediction scheme that is capable of looking at a wide scope of physical memory (a whole page), and deciding what specific cache lines to pull into the cache. This is a data-centric approach that actively and aggressively moves data closer to the processor. There is minimal learning overhead associated with this scheme since all that is required at a minimum is for a page to have been used earlier by a processor.
Abstract
Description
Claims (34)
Priority Applications (1)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US09/639,263 US6678795B1 (en) | 2000-08-15 | 2000-08-15 | Method and apparatus for memory prefetching based on intra-page usage history |
Applications Claiming Priority (1)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US09/639,263 US6678795B1 (en) | 2000-08-15 | 2000-08-15 | Method and apparatus for memory prefetching based on intra-page usage history |
Publications (1)
Publication Number | Publication Date |
---|---|
US6678795B1 true US6678795B1 (en) | 2004-01-13 |
Family
ID=29780687
Family Applications (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
US09/639,263 Expired - Lifetime US6678795B1 (en) | 2000-08-15 | 2000-08-15 | Method and apparatus for memory prefetching based on intra-page usage history |
Country Status (1)
Country | Link |
---|---|
US (1) | US6678795B1 (en) |
Cited By (56)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20030204673A1 (en) * | 2002-04-26 | 2003-10-30 | Suresh Venkumahanti | Data prefetching apparatus in a data processing system and method therefor |
US20040088415A1 (en) * | 2002-11-06 | 2004-05-06 | Oracle International Corporation | Techniques for scalably accessing data in an arbitrarily large document by a device with limited resources |
US20040215891A1 (en) * | 2003-04-28 | 2004-10-28 | International Business Machines Corporation | Adaptive memory access speculation |
US20050102290A1 (en) * | 2003-11-12 | 2005-05-12 | Yutaka Enko | Data prefetch in storage device |
US20050235116A1 (en) * | 2004-04-15 | 2005-10-20 | International Business Machines Corporation | System, method and storage medium for prefetching via memory block tags |
US20050235115A1 (en) * | 2004-04-15 | 2005-10-20 | International Business Machines Corporation | System, method and storage medium for memory management |
US20050268046A1 (en) * | 2004-05-28 | 2005-12-01 | International Business Machines Corporation | Compressed cache lines incorporating embedded prefetch history data |
US20060106991A1 (en) * | 2004-11-16 | 2006-05-18 | International Business Machines Corporation | Victim prefetching in a cache hierarchy |
US20060114820A1 (en) * | 2004-11-26 | 2006-06-01 | Agfa Inc. | System and method for caching and fetching data |
US20060123216A1 (en) * | 2004-12-06 | 2006-06-08 | International Business Machines Corporation | Locating wasted memory in software applications |
US20060174062A1 (en) * | 2005-02-02 | 2006-08-03 | Bockhaus John W | Method and system for cache utilization by limiting number of pending cache line requests |
US20060179228A1 (en) * | 2005-02-07 | 2006-08-10 | Advanced Micro Devices, Inc. | System for restricted cache access during data transfers and method thereof |
US20060179175A1 (en) * | 2005-02-02 | 2006-08-10 | Bockhaus John W | Method and system for cache utilization by limiting prefetch requests |
US20070198780A1 (en) * | 2006-02-17 | 2007-08-23 | Boyd Kenneth W | Apparatus, system, and method for determining prefetch data |
US20070204267A1 (en) * | 2006-02-28 | 2007-08-30 | Cole Michael F | Throttling prefetching in a processor |
US20070239905A1 (en) * | 2006-03-09 | 2007-10-11 | Banerjee Dwip N | Method and apparatus for efficient determination of memory copy versus registration in direct access environments |
US20080052466A1 (en) * | 2006-08-24 | 2008-02-28 | Advanced Micro Devices, Inc. | System and method for instruction-based cache allocation policies |
US20080077871A1 (en) * | 2002-09-30 | 2008-03-27 | David Baar | Detail-in-context lenses for interacting with objects in digital image presentations |
US20080104325A1 (en) * | 2006-10-26 | 2008-05-01 | Charles Narad | Temporally relevant data placement |
US20080133840A1 (en) * | 2005-05-12 | 2008-06-05 | Anand Vaijayanthimala K | System and Method of Improved Large Page Handling in a Virtual Memory System |
US20080155226A1 (en) * | 2005-05-18 | 2008-06-26 | International Business Machines Corporation | Prefetch mechanism based on page table attributes |
US20080276067A1 (en) * | 2007-05-01 | 2008-11-06 | Via Technologies, Inc. | Method and Apparatus for Page Table Pre-Fetching in Zero Frame Display Channel |
US20090254701A1 (en) * | 2007-08-08 | 2009-10-08 | Hitachi, Ltd. | Storage system and access count equalization method therefor |
US20100080237A1 (en) * | 2008-09-30 | 2010-04-01 | Gridlron Systems, Inc. | Fibre channel proxy |
US20100095070A1 (en) * | 2007-06-19 | 2010-04-15 | Fujitsu Limited | Information processing apparatus and cache memory control method |
US20100115211A1 (en) * | 2008-11-04 | 2010-05-06 | Gridlron Systems, Inc. | Behavioral monitoring of storage access patterns |
US20100115206A1 (en) * | 2008-11-04 | 2010-05-06 | Gridlron Systems, Inc. | Storage device prefetch system using directed graph clusters |
US20100122020A1 (en) * | 2008-11-13 | 2010-05-13 | Gridlron Systems, Inc. | Dynamic performance virtualization for disk access |
US20100125857A1 (en) * | 2008-11-17 | 2010-05-20 | Gridlron Systems, Inc. | Cluster control protocol |
US20100293339A1 (en) * | 2008-02-01 | 2010-11-18 | Arimilli Ravi K | Data processing system, processor and method for varying a data prefetch size based upon data usage |
US7975108B1 (en) * | 2004-03-25 | 2011-07-05 | Brian Holscher | Request tracking data prefetcher apparatus |
US20110320762A1 (en) * | 2010-06-23 | 2011-12-29 | Soares Livio B | Region based technique for accurately predicting memory accesses |
US20120331235A1 (en) * | 2011-06-22 | 2012-12-27 | Tomohiro Katori | Memory management apparatus, memory management method, control program, and recording medium |
US8402246B1 (en) | 2009-08-28 | 2013-03-19 | Violin Memory, Inc. | Alignment adjustment in a tiered storage system |
US8402198B1 (en) | 2009-06-03 | 2013-03-19 | Violin Memory, Inc. | Mapping engine for a storage device |
US8417871B1 (en) | 2009-04-17 | 2013-04-09 | Violin Memory Inc. | System for increasing storage media performance |
US8417895B1 (en) | 2008-09-30 | 2013-04-09 | Violin Memory Inc. | System for maintaining coherency during offline changes to storage media |
US8442059B1 (en) | 2008-09-30 | 2013-05-14 | Gridiron Systems, Inc. | Storage proxy with virtual ports configuration |
US8443150B1 (en) | 2008-11-04 | 2013-05-14 | Violin Memory Inc. | Efficient reloading of data into cache resource |
US8635416B1 (en) | 2011-03-02 | 2014-01-21 | Violin Memory Inc. | Apparatus, method and system for using shadow drives for alternative drive commands |
US8667366B1 (en) | 2009-04-17 | 2014-03-04 | Violin Memory, Inc. | Efficient use of physical address space for data overflow and validation |
US8713252B1 (en) | 2009-05-06 | 2014-04-29 | Violin Memory, Inc. | Transactional consistency scheme |
US8775741B1 (en) | 2009-01-13 | 2014-07-08 | Violin Memory Inc. | Using temporal access patterns for determining prefetch suitability |
US20140195771A1 (en) * | 2013-01-04 | 2014-07-10 | International Business Machines Corporation | Anticipatorily loading a page of memory |
US8788758B1 (en) | 2008-11-04 | 2014-07-22 | Violin Memory Inc | Least profitability used caching scheme |
US8832384B1 (en) | 2010-07-29 | 2014-09-09 | Violin Memory, Inc. | Reassembling abstracted memory accesses for prefetching |
US8959288B1 (en) | 2010-07-29 | 2015-02-17 | Violin Memory, Inc. | Identifying invalid cache data |
US8972689B1 (en) | 2011-02-02 | 2015-03-03 | Violin Memory, Inc. | Apparatus, method and system for using real-time performance feedback for modeling and improving access to solid state media |
US20150134915A1 (en) * | 2013-11-13 | 2015-05-14 | Violin Memory Inc. | Efficient caching system |
US9069676B2 (en) | 2009-06-03 | 2015-06-30 | Violin Memory, Inc. | Mapping engine for a storage device |
US20160019065A1 (en) * | 2014-07-17 | 2016-01-21 | Arm Limited | Prefetching instructions in a data processing apparatus |
US20170091104A1 (en) * | 2015-09-30 | 2017-03-30 | Arm Limited | Apparatus and method for prefetching |
WO2017176445A1 (en) * | 2016-04-08 | 2017-10-12 | Qualcomm Incorporated | Reducing memory access bandwidth based on prediction of memory request size |
US20190018772A1 (en) * | 2017-07-13 | 2019-01-17 | International Business Machines Corporation | Selective downstream cache processing for data access |
US10884476B2 (en) | 2013-11-27 | 2021-01-05 | Intel Corporation | Autonomously controlling a buffer of a processor |
US11182161B2 (en) | 2020-04-15 | 2021-11-23 | International Business Machines Corporation | Fractional or partial line usage prediction in a processor |
Citations (13)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US5361391A (en) * | 1992-06-22 | 1994-11-01 | Sun Microsystems, Inc. | Intelligent cache memory and prefetch method based on CPU data fetching characteristics |
US5537573A (en) * | 1993-05-28 | 1996-07-16 | Rambus, Inc. | Cache system and method for prefetching of data |
US5761706A (en) * | 1994-11-01 | 1998-06-02 | Cray Research, Inc. | Stream buffers for high-performance computer memory system |
US5925100A (en) * | 1996-03-21 | 1999-07-20 | Sybase, Inc. | Client/server system with methods for prefetching and managing semantic objects based on object-based prefetch primitive present in client's executing application |
US6026474A (en) * | 1996-11-22 | 2000-02-15 | Mangosoft Corporation | Shared client-side web caching using globally addressable memory |
US6134643A (en) * | 1997-11-26 | 2000-10-17 | Intel Corporation | Method and apparatus for cache line prediction and prefetching using a prefetch controller and buffer and access history |
US6173392B1 (en) * | 1997-04-12 | 2001-01-09 | Nec Corporation | Prefetch controller automatically updating history addresses |
US6182122B1 (en) * | 1997-03-26 | 2001-01-30 | International Business Machines Corporation | Precaching data at an intermediate server based on historical data requests by users of the intermediate server |
US6182111B1 (en) * | 1997-05-15 | 2001-01-30 | Hitachi, Ltd. | Method and system for managing distributed data |
US6233645B1 (en) * | 1998-11-02 | 2001-05-15 | Compaq Computer Corporation | Dynamically disabling speculative prefetch when high priority demand fetch opportunity use is high |
US6484239B1 (en) * | 1997-12-29 | 2002-11-19 | Intel Corporation | Prefetch queue |
US6549896B1 (en) * | 2000-04-07 | 2003-04-15 | Nec Usa, Inc. | System and method employing random walks for mining web page associations and usage to optimize user-oriented web page refresh and pre-fetch scheduling |
US6557079B1 (en) * | 1999-12-20 | 2003-04-29 | Emc Corporation | Remote data facility prefetch |
-
2000
- 2000-08-15 US US09/639,263 patent/US6678795B1/en not_active Expired - Lifetime
Patent Citations (13)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US5361391A (en) * | 1992-06-22 | 1994-11-01 | Sun Microsystems, Inc. | Intelligent cache memory and prefetch method based on CPU data fetching characteristics |
US5537573A (en) * | 1993-05-28 | 1996-07-16 | Rambus, Inc. | Cache system and method for prefetching of data |
US5761706A (en) * | 1994-11-01 | 1998-06-02 | Cray Research, Inc. | Stream buffers for high-performance computer memory system |
US5925100A (en) * | 1996-03-21 | 1999-07-20 | Sybase, Inc. | Client/server system with methods for prefetching and managing semantic objects based on object-based prefetch primitive present in client's executing application |
US6026474A (en) * | 1996-11-22 | 2000-02-15 | Mangosoft Corporation | Shared client-side web caching using globally addressable memory |
US6182122B1 (en) * | 1997-03-26 | 2001-01-30 | International Business Machines Corporation | Precaching data at an intermediate server based on historical data requests by users of the intermediate server |
US6173392B1 (en) * | 1997-04-12 | 2001-01-09 | Nec Corporation | Prefetch controller automatically updating history addresses |
US6182111B1 (en) * | 1997-05-15 | 2001-01-30 | Hitachi, Ltd. | Method and system for managing distributed data |
US6134643A (en) * | 1997-11-26 | 2000-10-17 | Intel Corporation | Method and apparatus for cache line prediction and prefetching using a prefetch controller and buffer and access history |
US6484239B1 (en) * | 1997-12-29 | 2002-11-19 | Intel Corporation | Prefetch queue |
US6233645B1 (en) * | 1998-11-02 | 2001-05-15 | Compaq Computer Corporation | Dynamically disabling speculative prefetch when high priority demand fetch opportunity use is high |
US6557079B1 (en) * | 1999-12-20 | 2003-04-29 | Emc Corporation | Remote data facility prefetch |
US6549896B1 (en) * | 2000-04-07 | 2003-04-15 | Nec Usa, Inc. | System and method employing random walks for mining web page associations and usage to optimize user-oriented web page refresh and pre-fetch scheduling |
Non-Patent Citations (2)
Title |
---|
Mukherjee et al., "Using Prediction to Accelerate Coherence Protocols", Proceedings of the 25<th >Annual International Symposium on Computer Architecture (ISCA), Barcelona, Spain, Jun. 27-Jul. 2, 1998, pp. 179-190. |
Mukherjee et al., "Using Prediction to Accelerate Coherence Protocols", Proceedings of the 25th Annual International Symposium on Computer Architecture (ISCA), Barcelona, Spain, Jun. 27-Jul. 2, 1998, pp. 179-190. |
Cited By (103)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US6785772B2 (en) * | 2002-04-26 | 2004-08-31 | Freescale Semiconductor, Inc. | Data prefetching apparatus in a data processing system and method therefor |
US20030204673A1 (en) * | 2002-04-26 | 2003-10-30 | Suresh Venkumahanti | Data prefetching apparatus in a data processing system and method therefor |
US20080077871A1 (en) * | 2002-09-30 | 2008-03-27 | David Baar | Detail-in-context lenses for interacting with objects in digital image presentations |
US20040088415A1 (en) * | 2002-11-06 | 2004-05-06 | Oracle International Corporation | Techniques for scalably accessing data in an arbitrarily large document by a device with limited resources |
US7058767B2 (en) * | 2003-04-28 | 2006-06-06 | International Business Machines Corporation | Adaptive memory access speculation |
US20040215891A1 (en) * | 2003-04-28 | 2004-10-28 | International Business Machines Corporation | Adaptive memory access speculation |
US20050102290A1 (en) * | 2003-11-12 | 2005-05-12 | Yutaka Enko | Data prefetch in storage device |
US7624091B2 (en) * | 2003-11-12 | 2009-11-24 | Hitachi, Ltd. | Data prefetch in storage device |
US7975108B1 (en) * | 2004-03-25 | 2011-07-05 | Brian Holscher | Request tracking data prefetcher apparatus |
US20050235115A1 (en) * | 2004-04-15 | 2005-10-20 | International Business Machines Corporation | System, method and storage medium for memory management |
US7337278B2 (en) | 2004-04-15 | 2008-02-26 | International Business Machines Corporation | System, method and storage medium for prefetching via memory block tags |
US20050235116A1 (en) * | 2004-04-15 | 2005-10-20 | International Business Machines Corporation | System, method and storage medium for prefetching via memory block tags |
US20080201530A1 (en) * | 2004-04-15 | 2008-08-21 | International Business Machines Corporation | System and storage medium for memory management |
US20080059714A1 (en) * | 2004-04-15 | 2008-03-06 | International Business Machines Corporation | System, method and storage medium for prefetching via memory block tags |
US7493453B2 (en) | 2004-04-15 | 2009-02-17 | International Business Machines Corporation | System, method and storage medium for prefetching via memory block tags |
US7617364B2 (en) | 2004-04-15 | 2009-11-10 | International Business Machines Corporation | System, method and storage medium for prefetching via memory block tags |
US7386679B2 (en) | 2004-04-15 | 2008-06-10 | International Business Machines Corporation | System, method and storage medium for memory management |
US20070204109A1 (en) * | 2004-04-15 | 2007-08-30 | International Business Machines Corporation | System, method and storage medium for prefetching via memory block tags |
US7783837B2 (en) | 2004-04-15 | 2010-08-24 | International Business Machines Corporation | System and storage medium for memory management |
US20050268046A1 (en) * | 2004-05-28 | 2005-12-01 | International Business Machines Corporation | Compressed cache lines incorporating embedded prefetch history data |
US7225297B2 (en) * | 2004-05-28 | 2007-05-29 | International Business Machines Corporation | Compressed cache lines incorporating embedded prefetch history data |
US20060106991A1 (en) * | 2004-11-16 | 2006-05-18 | International Business Machines Corporation | Victim prefetching in a cache hierarchy |
US7716424B2 (en) | 2004-11-16 | 2010-05-11 | International Business Machines Corporation | Victim prefetching in a cache hierarchy |
US20060114820A1 (en) * | 2004-11-26 | 2006-06-01 | Agfa Inc. | System and method for caching and fetching data |
US7539833B2 (en) * | 2004-12-06 | 2009-05-26 | International Business Machines Corporation | Locating wasted memory in software by identifying unused portions of memory blocks allocated to a program |
US20060123216A1 (en) * | 2004-12-06 | 2006-06-08 | International Business Machines Corporation | Locating wasted memory in software applications |
US20060179175A1 (en) * | 2005-02-02 | 2006-08-10 | Bockhaus John W | Method and system for cache utilization by limiting prefetch requests |
US7330940B2 (en) * | 2005-02-02 | 2008-02-12 | Hewlett-Packard Development Company, L.P. | Method and system for cache utilization by limiting prefetch requests |
US7328310B2 (en) * | 2005-02-02 | 2008-02-05 | Hewlett-Packard Development Company, L.P. | Method and system for cache utilization by limiting number of pending cache line requests |
US20060174062A1 (en) * | 2005-02-02 | 2006-08-03 | Bockhaus John W | Method and system for cache utilization by limiting number of pending cache line requests |
US20060179228A1 (en) * | 2005-02-07 | 2006-08-10 | Advanced Micro Devices, Inc. | System for restricted cache access during data transfers and method thereof |
US7958315B2 (en) * | 2005-05-12 | 2011-06-07 | International Business Machines Corporation | Prefetching in a virtual memory system based upon repeated accesses across page boundaries |
US20080133840A1 (en) * | 2005-05-12 | 2008-06-05 | Anand Vaijayanthimala K | System and Method of Improved Large Page Handling in a Virtual Memory System |
US20080155226A1 (en) * | 2005-05-18 | 2008-06-26 | International Business Machines Corporation | Prefetch mechanism based on page table attributes |
US8607005B2 (en) * | 2006-02-17 | 2013-12-10 | International Business Machines Corporation | Monitoring program execution to learn data blocks accessed by software process for facilitating efficient prefetching |
US20070198780A1 (en) * | 2006-02-17 | 2007-08-23 | Boyd Kenneth W | Apparatus, system, and method for determining prefetch data |
US20070204267A1 (en) * | 2006-02-28 | 2007-08-30 | Cole Michael F | Throttling prefetching in a processor |
US20070239905A1 (en) * | 2006-03-09 | 2007-10-11 | Banerjee Dwip N | Method and apparatus for efficient determination of memory copy versus registration in direct access environments |
US7685330B2 (en) * | 2006-03-09 | 2010-03-23 | International Business Machines Corporation | Method for efficient determination of memory copy versus registration in direct access environments |
US8606998B2 (en) * | 2006-08-24 | 2013-12-10 | Advanced Micro Devices, Inc. | System and method for instruction-based cache allocation policies |
US20080052466A1 (en) * | 2006-08-24 | 2008-02-28 | Advanced Micro Devices, Inc. | System and method for instruction-based cache allocation policies |
US20080104325A1 (en) * | 2006-10-26 | 2008-05-01 | Charles Narad | Temporally relevant data placement |
US7761666B2 (en) * | 2006-10-26 | 2010-07-20 | Intel Corporation | Temporally relevant data placement |
US20080276067A1 (en) * | 2007-05-01 | 2008-11-06 | Via Technologies, Inc. | Method and Apparatus for Page Table Pre-Fetching in Zero Frame Display Channel |
US20100095070A1 (en) * | 2007-06-19 | 2010-04-15 | Fujitsu Limited | Information processing apparatus and cache memory control method |
US8225070B2 (en) * | 2007-06-19 | 2012-07-17 | Fujitsu Limited | Information processing apparatus and cache memory control method |
US20090254701A1 (en) * | 2007-08-08 | 2009-10-08 | Hitachi, Ltd. | Storage system and access count equalization method therefor |
US7949827B2 (en) * | 2007-08-08 | 2011-05-24 | Hitachi, Ltd. | Storage system and access count equalization method therefor |
US20100293339A1 (en) * | 2008-02-01 | 2010-11-18 | Arimilli Ravi K | Data processing system, processor and method for varying a data prefetch size based upon data usage |
US8595443B2 (en) * | 2008-02-01 | 2013-11-26 | International Business Machines Corporation | Varying a data prefetch size based upon data usage |
US20100080237A1 (en) * | 2008-09-30 | 2010-04-01 | Gridlron Systems, Inc. | Fibre channel proxy |
US8830836B1 (en) | 2008-09-30 | 2014-09-09 | Violin Memory, Inc. | Storage proxy with virtual ports configuration |
US8160070B2 (en) | 2008-09-30 | 2012-04-17 | Gridiron Systems, Inc. | Fibre channel proxy |
US8442059B1 (en) | 2008-09-30 | 2013-05-14 | Gridiron Systems, Inc. | Storage proxy with virtual ports configuration |
US8417895B1 (en) | 2008-09-30 | 2013-04-09 | Violin Memory Inc. | System for maintaining coherency during offline changes to storage media |
US8443150B1 (en) | 2008-11-04 | 2013-05-14 | Violin Memory Inc. | Efficient reloading of data into cache resource |
US8214599B2 (en) * | 2008-11-04 | 2012-07-03 | Gridiron Systems, Inc. | Storage device prefetch system using directed graph clusters |
US20100115206A1 (en) * | 2008-11-04 | 2010-05-06 | Gridlron Systems, Inc. | Storage device prefetch system using directed graph clusters |
US20100115211A1 (en) * | 2008-11-04 | 2010-05-06 | Gridlron Systems, Inc. | Behavioral monitoring of storage access patterns |
US8214608B2 (en) | 2008-11-04 | 2012-07-03 | Gridiron Systems, Inc. | Behavioral monitoring of storage access patterns |
US8788758B1 (en) | 2008-11-04 | 2014-07-22 | Violin Memory Inc | Least profitability used caching scheme |
US20100122020A1 (en) * | 2008-11-13 | 2010-05-13 | Gridlron Systems, Inc. | Dynamic performance virtualization for disk access |
US8285961B2 (en) | 2008-11-13 | 2012-10-09 | Grid Iron Systems, Inc. | Dynamic performance virtualization for disk access |
US8838850B2 (en) | 2008-11-17 | 2014-09-16 | Violin Memory, Inc. | Cluster control protocol |
US20100125857A1 (en) * | 2008-11-17 | 2010-05-20 | Gridlron Systems, Inc. | Cluster control protocol |
US8775741B1 (en) | 2009-01-13 | 2014-07-08 | Violin Memory Inc. | Using temporal access patterns for determining prefetch suitability |
US9424180B2 (en) | 2009-04-17 | 2016-08-23 | Violin Memory Inc. | System for increasing utilization of storage media |
US8417871B1 (en) | 2009-04-17 | 2013-04-09 | Violin Memory Inc. | System for increasing storage media performance |
US8650362B2 (en) | 2009-04-17 | 2014-02-11 | Violin Memory Inc. | System for increasing utilization of storage media |
US8667366B1 (en) | 2009-04-17 | 2014-03-04 | Violin Memory, Inc. | Efficient use of physical address space for data overflow and validation |
US8713252B1 (en) | 2009-05-06 | 2014-04-29 | Violin Memory, Inc. | Transactional consistency scheme |
US8402198B1 (en) | 2009-06-03 | 2013-03-19 | Violin Memory, Inc. | Mapping engine for a storage device |
US9069676B2 (en) | 2009-06-03 | 2015-06-30 | Violin Memory, Inc. | Mapping engine for a storage device |
US8402246B1 (en) | 2009-08-28 | 2013-03-19 | Violin Memory, Inc. | Alignment adjustment in a tiered storage system |
CN103038748A (en) * | 2010-06-23 | 2013-04-10 | 英特尔公司 | Region based technique for accurately predicting memory accesses |
CN106294212B (en) * | 2010-06-23 | 2020-02-21 | 英特尔公司 | Region-based techniques for accurate prediction of memory accesses |
CN106294212A (en) * | 2010-06-23 | 2017-01-04 | 英特尔公司 | Technology based on region for accurate predicting access of storage |
US20110320762A1 (en) * | 2010-06-23 | 2011-12-29 | Soares Livio B | Region based technique for accurately predicting memory accesses |
US9418011B2 (en) * | 2010-06-23 | 2016-08-16 | Intel Corporation | Region based technique for accurately predicting memory accesses |
US8832384B1 (en) | 2010-07-29 | 2014-09-09 | Violin Memory, Inc. | Reassembling abstracted memory accesses for prefetching |
US8959288B1 (en) | 2010-07-29 | 2015-02-17 | Violin Memory, Inc. | Identifying invalid cache data |
US8972689B1 (en) | 2011-02-02 | 2015-03-03 | Violin Memory, Inc. | Apparatus, method and system for using real-time performance feedback for modeling and improving access to solid state media |
US8635416B1 (en) | 2011-03-02 | 2014-01-21 | Violin Memory Inc. | Apparatus, method and system for using shadow drives for alternative drive commands |
US9195407B2 (en) | 2011-03-02 | 2015-11-24 | Violin Memory Inc. | Apparatus, method and system for using shadow drives for alternative drive commands |
US20120331235A1 (en) * | 2011-06-22 | 2012-12-27 | Tomohiro Katori | Memory management apparatus, memory management method, control program, and recording medium |
US20140195771A1 (en) * | 2013-01-04 | 2014-07-10 | International Business Machines Corporation | Anticipatorily loading a page of memory |
US9201806B2 (en) * | 2013-01-04 | 2015-12-01 | International Business Machines Corporation | Anticipatorily loading a page of memory |
US9244861B2 (en) * | 2013-11-13 | 2016-01-26 | Violin Memory Inc. | Efficient caching system |
US20150134915A1 (en) * | 2013-11-13 | 2015-05-14 | Violin Memory Inc. | Efficient caching system |
US10884476B2 (en) | 2013-11-27 | 2021-01-05 | Intel Corporation | Autonomously controlling a buffer of a processor |
US9582282B2 (en) * | 2014-07-17 | 2017-02-28 | Arm Limited | Prefetching using a prefetch lookup table identifying previously accessed cache lines |
US20160019065A1 (en) * | 2014-07-17 | 2016-01-21 | Arm Limited | Prefetching instructions in a data processing apparatus |
US20170091104A1 (en) * | 2015-09-30 | 2017-03-30 | Arm Limited | Apparatus and method for prefetching |
US10866896B2 (en) * | 2015-09-30 | 2020-12-15 | Arm Limited | Apparatus and method for prefetching access request addresses in an adjacent region of memory |
WO2017176445A1 (en) * | 2016-04-08 | 2017-10-12 | Qualcomm Incorporated | Reducing memory access bandwidth based on prediction of memory request size |
US10169240B2 (en) | 2016-04-08 | 2019-01-01 | Qualcomm Incorporated | Reducing memory access bandwidth based on prediction of memory request size |
CN109074314A (en) * | 2016-04-08 | 2018-12-21 | 高通股份有限公司 | Prediction based on memory request size reduces memory access bandwidth |
US10409724B2 (en) | 2017-07-13 | 2019-09-10 | International Business Machines Corporation | Selective downstream cache processing for data access |
US10417127B2 (en) * | 2017-07-13 | 2019-09-17 | International Business Machines Corporation | Selective downstream cache processing for data access |
US20190018772A1 (en) * | 2017-07-13 | 2019-01-17 | International Business Machines Corporation | Selective downstream cache processing for data access |
US10956328B2 (en) | 2017-07-13 | 2021-03-23 | International Business Machines Corporation | Selective downstream cache processing for data access |
US10970214B2 (en) | 2017-07-13 | 2021-04-06 | International Business Machines Corporation | Selective downstream cache processing for data access |
US11182161B2 (en) | 2020-04-15 | 2021-11-23 | International Business Machines Corporation | Fractional or partial line usage prediction in a processor |
Similar Documents
Publication | Publication Date | Title |
---|---|---|
US6678795B1 (en) | Method and apparatus for memory prefetching based on intra-page usage history | |
US8041897B2 (en) | Cache management within a data processing apparatus | |
US5737565A (en) | System and method for diallocating stream from a stream buffer | |
US8909871B2 (en) | Data processing system and method for reducing cache pollution by write stream memory access patterns | |
CN104636270B (en) | Data processing apparatus and data processing method | |
US7177985B1 (en) | Microprocessor with improved data stream prefetching | |
JP4028875B2 (en) | System and method for managing memory | |
US8473689B2 (en) | Predictive sequential prefetching for data caching | |
US7284096B2 (en) | Systems and methods for data caching | |
JP3541998B2 (en) | Data cache system and method | |
US8683136B2 (en) | Apparatus and method for improving data prefetching efficiency using history based prefetching | |
US20110072218A1 (en) | Prefetch promotion mechanism to reduce cache pollution | |
EP1573555B1 (en) | Page descriptors for prefetching and memory management | |
US9582282B2 (en) | Prefetching using a prefetch lookup table identifying previously accessed cache lines | |
US7526609B2 (en) | Runtime register allocator | |
JPH09146835A (en) | System for prefetch of data | |
US8595443B2 (en) | Varying a data prefetch size based upon data usage | |
US20100217937A1 (en) | Data processing apparatus and method | |
US20210182214A1 (en) | Prefetch level demotion | |
CN105446898B (en) | Apparatus and method for data processing | |
US6959363B2 (en) | Cache memory operation | |
US11249762B2 (en) | Apparatus and method for handling incorrect branch direction predictions | |
CN114450668A (en) | Circuit and method | |
EP3332329A1 (en) | Device and method for prefetching content to a cache memory | |
EP1320801A2 (en) | System and method for pre-fetching for pointer linked data structures |
Legal Events
Date | Code | Title | Description |
---|---|---|---|
AS | Assignment |
Owner name: INTERNATIONAL BUSINESS MACHINES CORPORATION, NEW YFree format text: ASSIGNMENT OF ASSIGNORS INTEREST;ASSIGNORS:MORENO, JAIME H.;RIVERS, JUDE A.;WELLMAN, JOHN-DAVID;REEL/FRAME:011023/0666Effective date: 20000810 |
|
FEPP | Fee payment procedure |
Free format text: PAYOR NUMBER ASSIGNED (ORIGINAL EVENT CODE: ASPN); ENTITY STATUS OF PATENT OWNER: LARGE ENTITY |
|
STCF | Information on status: patent grant |
Free format text: PATENTED CASE |
|
FPAY | Fee payment |
Year of fee payment: 4 |
|
AS | Assignment |
Owner name: GOOGLE INC., CALIFORNIAFree format text: ASSIGNMENT OF ASSIGNORS INTEREST;ASSIGNOR:INTERNATIONAL BUSINESS MACHINES CORPORATION;REEL/FRAME:026664/0866Effective date: 20110503 |
|
FPAY | Fee payment |
Year of fee payment: 8 |
|
FPAY | Fee payment |
Year of fee payment: 12 |
|
AS | Assignment |
Owner name: GOOGLE LLC, CALIFORNIAFree format text: CHANGE OF NAME;ASSIGNOR:GOOGLE INC.;REEL/FRAME:044127/0735Effective date: 20170929 |