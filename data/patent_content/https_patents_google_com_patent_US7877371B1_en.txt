US7877371B1 - Selectively deleting clusters of conceptually related words from a generative model for text - Google Patents
Selectively deleting clusters of conceptually related words from a generative model for text Download PDFInfo
- Publication number
- US7877371B1 US7877371B1 US11/703,582 US70358207A US7877371B1 US 7877371 B1 US7877371 B1 US 7877371B1 US 70358207 A US70358207 A US 70358207A US 7877371 B1 US7877371 B1 US 7877371B1
- Authority
- US
- United States
- Prior art keywords
- node
- current model
- nodes
- model
- cluster node
- Prior art date
- Legal status (The legal status is an assumption and is not a legal conclusion. Google has not performed a legal analysis and makes no representation as to the accuracy of the status listed.)
- Active, expires
Links
Images
Classifications
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F16/00—Information retrieval; Database structures therefor; File system structures therefor
- G06F16/30—Information retrieval; Database structures therefor; File system structures therefor of unstructured textual data
- G06F16/35—Clustering; Classification
- G06F16/355—Class or cluster creation or modification
Definitions
- the present invention relates to techniques for modeling textual documents. More specifically, the present invention relates to a technique for selectively deleting clusters of conceptually related words from a probabilistic generative model for textual documents, wherein the model characterizes textual documents based on clusters of conceptually related words.
- Prototype systems with stemming components have been attempted but without any real success. This is because the problem of determining whether a stem can be used in a particular context is difficult. That might be determined more by other nearby words in the text rather than by the word to be stemmed itself. For example, if one were looking for the James Bond movie, “for your eyes only”, a result that returned a page with the words “for your eye only” might not look as good.
- clusters are formed during a training phase which considers a large number of documents while forming a generative model for the text.
- overfitting commonly occurs during the training phase which leads to clusters having just a few words.
- Such small clusters do not generalize well and hence are not useful for capturing semantic meaning. Consequently, the presence of such clusters in the generative model reduces processing efficiency and consumes memory without providing any benefits.
- These small clusters can also adversely affect the quality of clusters returned by the model by preventing good clusters from being activated.
- One embodiment of the present invention provides a system that selectively deletes clusters of conceptually-related words from a probabilistic generative model for textual documents.
- the system receives a current model, which contains terminal nodes representing random variables for words and contains one or more cluster nodes representing clusters of conceptually related words. Nodes in the current model are coupled together by weighted links, so that if an incoming link from a node that has fired causes a cluster node to fire with a probability proportionate to a weight of the incoming link, an outgoing link from the cluster node to another node causes the other node to fire with a probability proportionate to the weight of the outgoing link.
- the system processes a given cluster node in the current model for possible deletion.
- processing the given cluster node for possible deletion also involves processing each node in the current model for possible deletion.
- deleting the given cluster node from the current model involves: (1) deleting outgoing links from the given cluster node; (2) deleting incoming links into the given cluster node; and (3) deleting the given cluster node itself.
- the system also performs training operations, which involves iteratively: (1) receiving a set of training documents, wherein each training document contains a set of words; (2) applying the set of training documents to the current model to produce a new model; and (3) making the new model the current model.
- the system while applying the set of training documents to the current model, the system maintains counters for links and prospective links in the current model to count the expected number of times the links and prospective links are activated, where the expectation is over the probability that the links are activated given the training data
- EM expectation maximization
- the system during an initial training iteration, the system generates an initial current model from a set of words, which involves: (1) generating a universal node that is always active; (2) generating terminal nodes representing words in the set of words; and (3) directly linking the universal node to the terminal nodes.
- producing the new model additionally involves selectively introducing new cluster nodes into the current model.
- producing the new model additionally involves selectively introducing new links from cluster nodes to terminal nodes and from cluster nodes to other cluster nodes.
- FIG. 1 illustrates a probabilistic model in accordance with an embodiment of the present invention.
- FIG. 2 illustrates a state of the probabilistic model in accordance with an embodiment of the present invention.
- FIG. 3 illustrates a model representing states in the United States in accordance with an embodiment of the present invention.
- FIG. 4 illustrates global nodes and a number of local networks in accordance with an embodiment of the present invention.
- FIG. 5 illustrates a reworked model in accordance with an embodiment of the present invention.
- FIG. 6 illustrates the crawling, ranking and searching processes in accordance with an embodiment of the present invention.
- FIG. 7 illustrates data structures involved in characterizing a document in accordance with an embodiment of the present invention.
- FIG. 8 presents a flow chart of the characterization process in accordance with an embodiment of the present invention.
- FIG. 9 presents of a flow chart of the process for selecting candidate clusters in accordance with an embodiment of the present invention.
- FIG. 10 presents a flow chart of the process of approximating probabilities for candidate clusters in accordance with an embodiment of the present invention.
- FIG. 11 presents a flow chart illustrating how states for the probabilistic model are selected in accordance with an embodiment of the present invention.
- FIG. 12 presents a flow chart summarizing the learning process in accordance with an embodiment of the present invention.
- FIG. 13 presents a flow chart of the process of selectively deleting cluster nodes in accordance with an embodiment of the present invention.
- a computer-readable storage medium which may be any device or medium that can store code and/or data for use by a computer system.
- One embodiment of the present invention provides a system that learns concepts by learning an explanatory model of text.
- small pieces of text are generated in a fairly simple, but incredibly powerful way, through the execution of probabilistic network.
- the system learns the parameters of this network by examining many examples of small pieces of text.
- One embodiment of the system considers the important information in a piece of text to be the words (and compounds) used in the text. For example in the query “cooking classes palo alto” the words are “cooking” and “classes”, and the compounds consist of the simple compound “palo alto”. Distinguishing compounds from words is done on the basis of compositionality. For example, “cooking classes” is not a compound because it is about both cooking and classes. However “palo alto” is not about “palo” and “alto” separately. This is sometimes a hard distinction to make, but good guesses can make such a system better than no guesses at all.
- FIG. 1 shows one such model.
- the circles are called model nodes.
- These nodes represent random variables, each of which models the existence or non-existence of concepts or terminals.
- the only terminals we are considering in this model are “elephant”, “grey” and “skies”.
- This model might be used for example to explain why the words grey and skies often occur together, why the words grey and elephant often occur together, but yet why the words “elephant” and “skies” rarely occur together. It is because when people are generating text with these words, they have ideas in mind. The system's concepts are supposed to model the ideas in a person's mind before they generate text.
- This model can be used or “executed” to generate text.
- U Universal node
- firing means that the idea of that concept is active, and is able to fire terminals.
- terminals the idea of firing is that the terminals exist in the text to be generated.
- FIG. 2 shows this particular execution of the model detailed in FIG. 1 .
- C 1 becoming active
- FIG. 2 shows this particular execution of the model detailed in FIG. 1 .
- C 1 becoming active
- FIG. 2 shows this particular execution of the model detailed in FIG. 1 .
- C 1 becoming active
- FIG. 2 shows this particular execution of the model detailed in FIG. 1 .
- C 1 becoming active
- FIG. 2 shows this particular execution of the model detailed in FIG. 1 .
- FIG. 3 shows an example concept representing the states of the United States of America.
- the concept can fire terminals representing each of the 50 states, each with probability 1/50.
- That probability is roughly (1/50)*(49/50) 49 , which is approximately 0.7%.
- For this concept to fire all the states would be (1/50) 50 which is incredibly small.
- we develop such a concept that covers the idea of the states of the United States we would want it to explain pieces of text where all the states occur.
- each concept picks an activation level.
- this activation level chooses “how many” terminals are to be picked from this concept. Note that this activation level is not a quality of our model. In fact, it is only chosen when the model is being executed. What activation does is it modifies the probability that this concept fires each of its terminals (but not its sub-concepts, i.e. concept to concept linking is unaffected by activation).
- the probability that the result does NOT fire is the product of the probability that each cause does NOT fire it.
- Bayesian Networks a certain class of probabilistic models
- Bayesian networks are well-understood probabilistic modeling techniques in which conditional independences are asserted between various random variables in a joint distribution. As in the model above, Bayesian networks have nodes and directed links. These networks compactly represent a joint distribution over a number of random variables while structurally representing conditional independence assumptions about these variables.
- the set of nodes pointing to a node is called its “parents”.
- the set of nodes reachable from a node via following links is called its “descendants” or “children”; and the structure implies that a node is independent of its non-descendants given its parents.
- the entire distribution is therefore encoded in the conditional probability tables of a child given its parents (nodes with no parents have their own distributions). The probability of a particular instantiation of the entire network is simply then the product of the probabilities of each child given its parents.
- Bayesian networks are related to our model in the following way, if each node in the execution of our model is considered to be a random variable then the joint distribution over the set of nodes that are turned on is exactly that which arises from considering our model as a Bayesian network with noisy-or combination functions.
- noisy-or conditional probabilities turn a boolean child on independently from each parent. That is, the probability of a child being off is the product of the probability that each parent does not fire it. Note this is exactly the combination function used in our model to decide if multiple active concepts that link to a terminal fire it.
- Bayesian networks are themselves a subclass of more general probabilistic models.
- some source of text In learning a generative model of text, in one embodiment of the present invention some source of text must be chosen. Some considerations in such a choice are as follows: (1) it should have related words in close proximity; (2) it should present evidence that is independent, given the model we are trying to learn (more on this later); and (3) it should be relevant to different kinds of text. For this reason, the implementation of the model which follows uses exemplary “query sessions” from a search engine as its small pieces of text. We have also implemented and run our model on web pages and other sources of text, but for the purposes of making this exposition more concrete, we focus on the analysis of query sessions.
- a query session (also referred to as a user session or a session) as any set of queries that are deemed to be relevant.
- a query session can include a set of queries issued by a single user on a search engine over a fixed period of time. Note that while issuing queries, a user will often search for related material, issuing several queries in a row about a particular topic. Sometimes, these queries are interspersed with queries associated with other random topics.
- An example query session (not an actual one) might appear as follows:
- FIG. 4 illustrates a number of local networks.
- the terminals for a particular user session are assumed to be active. Note that our model is replicated for each such session. This is because what we observe for each session is only the words that the user used, and not in fact that concepts that were active in the user's mind when those words came about!
- the local nodes here represent our uncertainty about these concepts. Because the user may have been thinking of anything when they wrote each word they wrote, all concepts have to be considered in each local network.
- FIG. 5 shows a slightly reworked version of the model, where variables exist to explicitly show whether or not each concept triggers another concept or terminal. Note that the joint distributions implied by both are the same, once they are projected to the original variables we are interested in (i.e. C 1 and C 2 ). The triangles in this figure represent extra “trigger” variables, and it is often helpful to think about the model with them because they simplify the number of conditional probabilities that are required.
- the “trigger” variable between U and C 2 only needs to know the distributions of U and the weight of the link from U to C 2 to decide the probability that C 2 gets fired from U.
- the other trigger into C 2 only needs to know the values of the C 1 and weight of the link from C 1 to C 2 .
- the system maintains counters for links and prospective links in the current model to count the expected number of times they are activated during the training process, where the expectation is over the probability that the trigger variables are activated given the training data
- EM expectation maximization
- FIG. 6 illustrates the crawling, ranking and searching processes in accordance with an exemplary embodiment of the present invention.
- a web crawler 604 crawls or otherwise searches through websites on web 602 to select web pages to be stored in indexed form in data center 608 .
- the selected web pages are then compressed, indexed and ranked in module 605 (using the ranking process described above) before being stored in data center 608 .
- a search engine 612 receives a query 613 from a user 611 through a web browser 614 .
- This query 613 specifies a number of terms to be searched for in the set of documents.
- search engine 612 uses search terms specified in the query to identify highly-ranked documents that satisfy the query.
- Search engine 612 then returns a response 615 through web browser 614 , wherein the response 615 contains matching pages along with ranking information and references to the identified documents.
- the system can characterize the documents (and query phrases) based on the clusters of conceptually related words to improve the searching and/or ranking processes.
- FIG. 7 illustrates data structures involved in characterizing a document in accordance with an embodiment of the present invention. These data structures include, order one probability table 702 , parent table 704 , child table 706 and link table 708 .
- Order one probability table 702 includes entries for each node in the probabilistic model that approximate the order one (unconditional) probability that the node is active in generating a given set of words. Hence, an entry in order one probability table 702 indicates how common an associated word or cluster is in sets of words that are generated by the probabilistic model. In one embodiment of the present invention, order one priority table 702 also includes an “activation” for each cluster node indicating how many links from the candidate cluster to other nodes are likely to fire.
- Parent table 704 includes entries that identify parents of associated nodes in the probabilistic model, as well as the link weights from the identified parents.
- child table 706 includes entries that identify children of associated nodes in the probabilistic model, as well as the link weights to the identified children. (Note that child table 706 is optional; it is not necessary for most of the operations we discuss.)
- link table 708 is populated during the process of characterizing a document.
- Link table 708 includes entries for links to consider as evidence while constructing an evidence tree as is discussed below with reference to FIGS. 8-11 . Each entry in link table 708 contains the weight for an associated link as well as the identifier for the associated parent node. Moreover, link table 708 can be sorted by parent identifier as is discussed below.
- FIG. 8 presents a flow chart of the characterization process in accordance with an embodiment of the present invention.
- the system starts by receiving a document containing a set of words (step 802 ).
- this document can include a web page or a set of terms (words) from a query.
- the system selects a set of “candidate clusters” from the probabilistic model that are likely to be active in generating the set of words (step 804 ). This process is described in more detail below with reference to FIG. 9 . Note that by selecting a set of candidate clusters, the system limits the number of clusters that are considered in subsequent computational operations, thereby reducing the amount of computation involved in characterizing the document.
- the system then constructs a vector (set of components) to characterize the document (step 806 ).
- This vector includes components for candidate clusters, wherein each component of the vector indicates a degree to which the corresponding candidate cluster was active in generating the set of words in the document. This process is described in more detail below with reference to FIGS. 10-11 .
- the system can use this vector to facilitate a number of different operations related to the document (step 808 ). Some of these uses are listed below in a following section of this specification entitled “Uses of the Model”.
- FIG. 9 presents of a flow chart of the process for selecting candidate clusters in accordance with an embodiment of the present invention.
- This flow chart describes in more detail the operations involved in performing step 804 in FIG. 8 .
- the system starts by constructing an “evidence tree” starting from terminal nodes associated with the set of words in the document and following links to parent nodes (step 902 ). As a node is selected to be part of the evidence tree, links to the node from parent nodes are inserted into link table 808 .
- the system uses the evidence tree to estimate the likelihood that each parent cluster is active in generating the set of words (step 904 ). More specifically, in one embodiment of the present invention, for a cluster node C i that only points to terminal nodes, the system estimates the likelihood that C i was involved in generating the set of words (we refer to this estimated likelihood as the “Guess of C i ”) using the following formula,
- This formula indicates that the guess of C i is the order one probability of C i multiplied by a product of conditional probability contributions from active child nodes w j of C i .
- the numerator of this contribution is the weight of the link from C i to w j multiplied by a guess at the activation of C i . Recall that the activation of C i is an indicator of the number of active links out of node C i .
- the denominator of this contribution, ⁇ tilde over (P) ⁇ (w j ), is the order one probability of w j multiplied by the number of words in the set of words.
- Score ⁇ ( C i ) ⁇ k ⁇ ⁇ Contribution ⁇ ( C k , C i ) ⁇ ⁇ j ⁇ ⁇ Contribution ⁇ ( w j , C i ) .
- the guess of C i is the order one probability of C i multiplied by a product of conditional probability contributions.
- these conditional probability contributions come from other cluster nodes C k as well as from child nodes w j .
- Contribution ⁇ ( C k , C i ) P ⁇ ( C k
- the system marks terminal nodes during the estimation process for a given cluster node to ensure that terminal nodes are not factored into the estimation more than once.
- the system selects parent nodes to be candidate cluster nodes based on these estimated likelihoods (step 906 ).
- the system has a set of candidate clusters to consider along with their activations.
- FIG. 10 presents a flow chart of the process of approximating probabilities for candidate clusters in accordance with an embodiment of the present invention.
- the system first selects states for the probabilistic model that are likely to have generated the set of words (step 1002 ).
- the system constructs the vector, wherein the vector includes components for candidate clusters. Each of these components indicates a likelihood that a corresponding candidate cluster is active in generating the set of words.
- the system considers only selected states in approximating the probability that an associated candidate cluster is active in generating the set of words (step 1004 ).
- P ⁇ ( C i ) ⁇ P network ⁇ ( C i ⁇ ⁇ is ⁇ ⁇ on ) ⁇ P network ⁇ ( explored ) .
- This formula indicates that P(C i ) is the sum of the network probabilities for networks in which C i is discovered to be active divided by the sum of all network probabilities for networks that have been explored.
- the probability of a given network state occurring can be calculated as,
- P network ⁇ nodes ⁇ ⁇ j ⁇ ⁇ that ⁇ ⁇ are ⁇ ⁇ on ⁇ ⁇ ( 1 - ⁇ nodes ⁇ ⁇ i ⁇ ⁇ that ⁇ ⁇ are on ⁇ ⁇ and ⁇ ⁇ point ⁇ ⁇ to ⁇ ⁇ j ⁇ ⁇ ( 1 - w i ⁇ j ) ) ⁇ ⁇ nodes ⁇ ⁇ k that ⁇ ⁇ are ⁇ ⁇ off ⁇ ⁇ ( ⁇ nodes ⁇ ⁇ i ⁇ ⁇ that ⁇ ⁇ are on ⁇ ⁇ and ⁇ ⁇ point ⁇ ⁇ to ⁇ ⁇ k ⁇ ( 1 - w i ⁇ k ) )
- This probability includes contributions from nodes that are “on”.
- the system computes the probability that at least one link into j (from an active parent node i) fires. This is one minus the probability that no link into j from an active parent node i fires, wherein the probability that a link from an active node does not fire is one minus the link weight.
- the probability also includes contributions from nodes k that are “off”. For a given node k that is off, the contribution is the probability that no link points to k from active node i, which is simply the product of one minus the link weights.
- FIG. 11 illustrates how states for the probabilistic model are selected in accordance with an embodiment of the present invention.
- This flow chart describes in more detail the operations involved in performing step 1002 in FIG. 11 .
- one embodiment of the present invention considers only candidate cluster nodes and terminal nodes associated with the set of words in the document. All other terminals are assumed to be off and are summarized in a simple term which is used to reduce the probability of the parent being on.
- the system starts by randomly selecting a starting state for the probabilistic model (step 1102 ).
- Each starting state indicates which nodes in the probabilistic model are active and which ones are not. Note that any starting state is possible because the universal node can trigger any subset of the candidate nodes to fire.
- link weights in the probabilistic model tend to make some states more likely than others in generating the set of words in the document. Hence, it is unlikely that a random starting state would have generated the set of words in the document.
- the system performs “hill-climbing” operations to reach a state that is likely to have generated the set of words in the document (step 1104 ).
- hill-climbing operation typically changes the state of the system in a manner that increases the value of a specific objective function.
- the objective function is the probability of a given network state occurring, P network , which is described above.
- the system periodically changes the state of an individual candidate cluster between hill-climbing operations without regards to the objective function. In doing so, the system fixes the changed state so it does not change during subsequent hill-climbing operations. This produces a local optimum for the objective function, which includes the changed state, which enables to system to explore states of the probabilistic model that are otherwise unreachable through only hill-climbing operations.
- FIG. 12 presents a flow chart summarizing the learning process in accordance with an embodiment of the present invention.
- the system first receives a current model (step 1202 ).
- a current model can be created from a set of words by: (1) generating a universal node that is always active; (2) generating terminal nodes representing words in the set of words; (3) generating cluster nodes by selecting training instances; and (4) directly linking the universal node with all the nodes.
- the system receives a set of training documents (step 1204 ).
- the system starts with a small set of training documents for an initial iteration, and doubles the number of training documents in each subsequent iteration until all available training documents are used. This allows the system to learn larger concepts, which require fewer training documents to learn, during the earlier iterations.
- the system applies the set of training documents to links defined in the current model to produce weights for corresponding links in the new model.
- the system maintains counters for links and prospective links in the current model to count the expected number of times the links and prospective links are activated during the training process (step 1206 ), where the expectation is over the probability that the links are activated given the training data
- EM expectation maximization
- the system then selectively deletes clusters from the new model (step 1210 ). This process is described in more detail below with reference to FIG. 13 .
- the system then considers the new model to be the current model (step 1212 ) and repeats the process for a number of iterations to produce a generative model explains the set of training documents.
- FIG. 13 presents a flow chart of the process of selectively deleting cluster nodes in accordance with an embodiment of the present invention. This flow chart illustrates in more detail what takes place during step 1210 in the flow chart illustrated in FIG. 12 .
- the system determines the number of outgoing links from the cluster node to other nodes (step 1302 ). These other nodes can be terminal nodes associated with words or other cluster nodes. Using the expected counts collected over the training data, the system also determines the frequency with which the cluster node is activated (step 1304 ). If the number of outgoing links is less than a minimum value, or if the determined frequency is less than a minimum frequency, the system deletes the cluster node (step 1306 ).
- deleting the cluster node reduces memory usage, improves computational efficiency of the model, and improves the quality of clusters returned by the model without adversely affecting the usefulness of the model. Similarly, if a cluster node is rarely activated, deleting the cluster node has similar benefits.
- the process of deleting a cluster node from the model involves: (1) deleting outgoing links from the cluster node; (2) deleting incoming links into the cluster node; and (3) deleting the cluster node itself.
Abstract
Description
wherein
{tilde over (P)}(C i →w j)=(weightC
and wherein
{tilde over (P)}(w j)=O1(w j)×(# words).
This formula indicates that the guess of Ci is the order one probability of Ci multiplied by a product of conditional probability contributions from active child nodes wj of Ci. The numerator of this contribution, {tilde over (P)}(Ci→wj), is the weight of the link from Ci to wj multiplied by a guess at the activation of Ci. Recall that the activation of Ci is an indicator of the number of active links out of node Ci. The denominator of this contribution, {tilde over (P)}(wj), is the order one probability of wj multiplied by the number of words in the set of words.
Guess(C i)=O1(C i)·Score(C i),
wherein
As in the case of a cluster node that only points to terminals, the guess of Ci is the order one probability of Ci multiplied by a product of conditional probability contributions. However, these conditional probability contributions come from other cluster nodes Ck as well as from child nodes wj.
wherein P(Ck|Ci) is the conditional probability of Ck given Ci, P(Ck) is the order one probability of Ck, and Score(Ck) is the previously calculated score of Ck. Note that since the evidence tree is constructed from terminals up, the score of the child node Ck will have been computed before the score of the parent node Ci is computed.
V i=Activation(C i)×P(C i),
wherein the Activation(Ci) is an indicator of the number of links that will fire if node Ci fires, and wherein P(Ci) is the probability that Ci is active in generating the set of words in the document.
This formula indicates that P(Ci) is the sum of the network probabilities for networks in which Ci is discovered to be active divided by the sum of all network probabilities for networks that have been explored.
This probability includes contributions from nodes that are “on”. More specifically, for each node j that is on in a given network, the system computes the probability that at least one link into j (from an active parent node i) fires. This is one minus the probability that no link into j from an active parent node i fires, wherein the probability that a link from an active node does not fire is one minus the link weight.
-
- (1) Guessing at the concepts behind a piece of text. The concepts can then be displayed to a user allowing the user to better understand the meaning behind the text.
- (2) Comparing the words and concepts between a document and a query. This can be the information retrieval scoring function that is required in any document search engine, including the special case where the documents are web pages.
- (3) A different way of using our model for web search is to assume that the distribution of clusters extends the query. For example, a query for the word “jaguar” is ambiguous. It could mean either the animal or the car. Our model will identify clusters that relate to both meanings in response to this search. In this case, we can consider that the user typed in one of either two queries, the jaguar (CAR) query or the jaguar (ANIMAL) query. We can then retrieve documents for both of these queries taking into account the ratio of their respective clusters' probabilities. By carefully balancing how many results we return for each meaning, we assure a certain diversity of results for a search.
- (4) Comparing the words and concepts between a document and an advertisement. This can be used as a proxy for how well an advertisement will perform if attached to a certain piece of content. A specialization of this is attaching advertisements to web pages.
- (5) Comparing the words and concepts between a query and an advertisement (or targeting criteria for an advertisement). In search engines, advertisers often select a set of “targeting criteria”, which when they show up in user queries, and ad is served. The text of these criteria (and the ad copy itself) can be compared to a query via the use of clusters in our model. This comparison can be a proxy for how well the ad will perform if served on a search page resulting from the query.
- (6) Comparing the words and concepts between two documents. This can be used as a distance metric for conceptual clustering of documents, where similar documents are grouped together.
- (7) Projecting text into the space of clusters. The probabilities of clusters in the text can be used as features for an arbitrary classification task. For example, a pornography filter can be produced by projecting the text of a page onto clusters, and then building a classifier that uses the clusters and the words as its input.
- (8) Generalizing a web query to retrieve more results, using the bit cost or probability of a set of words or terminals given their parent clusters.
- (9) Guessing at whether a particular word is a misspelling of another word by looking at the concepts induced by the two words.
Claims (20)
Priority Applications (1)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US11/703,582 US7877371B1 (en) | 2007-02-07 | 2007-02-07 | Selectively deleting clusters of conceptually related words from a generative model for text |
Applications Claiming Priority (1)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US11/703,582 US7877371B1 (en) | 2007-02-07 | 2007-02-07 | Selectively deleting clusters of conceptually related words from a generative model for text |
Publications (1)
Publication Number | Publication Date |
---|---|
US7877371B1 true US7877371B1 (en) | 2011-01-25 |
Family
ID=43479845
Family Applications (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
US11/703,582 Active 2029-11-26 US7877371B1 (en) | 2007-02-07 | 2007-02-07 | Selectively deleting clusters of conceptually related words from a generative model for text |
Country Status (1)
Country | Link |
---|---|
US (1) | US7877371B1 (en) |
Cited By (14)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20110145206A1 (en) * | 2009-12-15 | 2011-06-16 | Juniper Networks Inc. | Atomic deletion of database data categories |
US20110145209A1 (en) * | 2009-12-15 | 2011-06-16 | Juniper Networks, Inc. | Atomic deletion of database data categories |
US20110238408A1 (en) * | 2010-03-26 | 2011-09-29 | Jean-Marie Henri Daniel Larcheveque | Semantic Clustering |
US8296257B1 (en) * | 2009-04-08 | 2012-10-23 | Google Inc. | Comparing models |
US9069750B2 (en) | 2006-10-10 | 2015-06-30 | Abbyy Infopoisk Llc | Method and system for semantic searching of natural language texts |
US9075864B2 (en) | 2006-10-10 | 2015-07-07 | Abbyy Infopoisk Llc | Method and system for semantic searching using syntactic and semantic analysis |
US9098489B2 (en) | 2006-10-10 | 2015-08-04 | Abbyy Infopoisk Llc | Method and system for semantic searching |
US9189482B2 (en) | 2012-10-10 | 2015-11-17 | Abbyy Infopoisk Llc | Similar document search |
US9275042B2 (en) | 2010-03-26 | 2016-03-01 | Virtuoz Sa | Semantic clustering and user interfaces |
US9418335B1 (en) * | 2007-08-01 | 2016-08-16 | Google Inc. | Method and apparatus for selecting links to include in a probabilistic generative model for text |
US9495358B2 (en) | 2006-10-10 | 2016-11-15 | Abbyy Infopoisk Llc | Cross-language text clustering |
US9524291B2 (en) | 2010-10-06 | 2016-12-20 | Virtuoz Sa | Visual display of semantic information |
US9892111B2 (en) | 2006-10-10 | 2018-02-13 | Abbyy Production Llc | Method and device to estimate similarity between documents having multiple segments |
US20180373791A1 (en) * | 2017-06-22 | 2018-12-27 | Cerego, Llc. | System and method for automatically generating concepts related to a target concept |
Citations (17)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US5794050A (en) | 1995-01-04 | 1998-08-11 | Intelligent Text Processing, Inc. | Natural language understanding system |
US5815830A (en) | 1994-12-23 | 1998-09-29 | Anthony; Andre Charles | Automatic generation of hypertext links to multimedia topic objects |
US6078914A (en) | 1996-12-09 | 2000-06-20 | Open Text Corporation | Natural language meta-search system and method |
US6137911A (en) | 1997-06-16 | 2000-10-24 | The Dialog Corporation Plc | Test classification system and method |
US20020087310A1 (en) | 2000-12-29 | 2002-07-04 | Lee Victor Wai Leung | Computer-implemented intelligent dialogue control method and system |
US20020120619A1 (en) | 1999-11-26 | 2002-08-29 | High Regard, Inc. | Automated categorization, placement, search and retrieval of user-contributed items |
US20030037041A1 (en) | 1994-11-29 | 2003-02-20 | Pinpoint Incorporated | System for automatic determination of customized prices and promotions |
US20030088562A1 (en) | 2000-12-28 | 2003-05-08 | Craig Dillon | System and method for obtaining keyword descriptions of records from a large database |
US6651054B1 (en) | 1999-10-30 | 2003-11-18 | International Business Machines Corporation | Method, system, and program for merging query search results |
US6671818B1 (en) * | 1999-11-22 | 2003-12-30 | Accenture Llp | Problem isolation through translating and filtering events into a standard object format in a network based supply chain |
US6684205B1 (en) | 2000-10-18 | 2004-01-27 | International Business Machines Corporation | Clustering hypertext with applications to web searching |
US20040088308A1 (en) | 2002-08-16 | 2004-05-06 | Canon Kabushiki Kaisha | Information analysing apparatus |
US6751611B2 (en) | 2002-03-01 | 2004-06-15 | Paul Jeffrey Krupin | Method and system for creating improved search queries |
US6820093B2 (en) | 1996-07-30 | 2004-11-16 | Hyperphrase Technologies, Llc | Method for verifying record code prior to an action based on the code |
US20050210008A1 (en) * | 2004-03-18 | 2005-09-22 | Bao Tran | Systems and methods for analyzing documents over a network |
US7013298B1 (en) | 1996-07-30 | 2006-03-14 | Hyperphrase Technologies, Llc | Method and system for automated data storage and retrieval |
US20060178918A1 (en) * | 1999-11-22 | 2006-08-10 | Accenture Llp | Technology sharing during demand and supply planning in a network-based supply chain environment |
-
2007
- 2007-02-07 US US11/703,582 patent/US7877371B1/en active Active
Patent Citations (19)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20030037041A1 (en) | 1994-11-29 | 2003-02-20 | Pinpoint Incorporated | System for automatic determination of customized prices and promotions |
US5815830A (en) | 1994-12-23 | 1998-09-29 | Anthony; Andre Charles | Automatic generation of hypertext links to multimedia topic objects |
US5794050A (en) | 1995-01-04 | 1998-08-11 | Intelligent Text Processing, Inc. | Natural language understanding system |
US7013298B1 (en) | 1996-07-30 | 2006-03-14 | Hyperphrase Technologies, Llc | Method and system for automated data storage and retrieval |
US6820093B2 (en) | 1996-07-30 | 2004-11-16 | Hyperphrase Technologies, Llc | Method for verifying record code prior to an action based on the code |
US6078914A (en) | 1996-12-09 | 2000-06-20 | Open Text Corporation | Natural language meta-search system and method |
US6137911A (en) | 1997-06-16 | 2000-10-24 | The Dialog Corporation Plc | Test classification system and method |
US6651054B1 (en) | 1999-10-30 | 2003-11-18 | International Business Machines Corporation | Method, system, and program for merging query search results |
US6671818B1 (en) * | 1999-11-22 | 2003-12-30 | Accenture Llp | Problem isolation through translating and filtering events into a standard object format in a network based supply chain |
US20060178918A1 (en) * | 1999-11-22 | 2006-08-10 | Accenture Llp | Technology sharing during demand and supply planning in a network-based supply chain environment |
US20020120619A1 (en) | 1999-11-26 | 2002-08-29 | High Regard, Inc. | Automated categorization, placement, search and retrieval of user-contributed items |
US6684205B1 (en) | 2000-10-18 | 2004-01-27 | International Business Machines Corporation | Clustering hypertext with applications to web searching |
US20030088562A1 (en) | 2000-12-28 | 2003-05-08 | Craig Dillon | System and method for obtaining keyword descriptions of records from a large database |
US7363308B2 (en) | 2000-12-28 | 2008-04-22 | Fair Isaac Corporation | System and method for obtaining keyword descriptions of records from a large database |
US20020087310A1 (en) | 2000-12-29 | 2002-07-04 | Lee Victor Wai Leung | Computer-implemented intelligent dialogue control method and system |
US6751611B2 (en) | 2002-03-01 | 2004-06-15 | Paul Jeffrey Krupin | Method and system for creating improved search queries |
US20040088308A1 (en) | 2002-08-16 | 2004-05-06 | Canon Kabushiki Kaisha | Information analysing apparatus |
US20050210008A1 (en) * | 2004-03-18 | 2005-09-22 | Bao Tran | Systems and methods for analyzing documents over a network |
US20070208719A1 (en) * | 2004-03-18 | 2007-09-06 | Bao Tran | Systems and methods for analyzing semantic documents over a network |
Non-Patent Citations (12)
Title |
---|
Graham, I., The HTML Sourcebook, John Wiley & Sons, 1995 (ISBN 0471118494) (pages on "partial URLs" and "BASE element", e.g., pp. 22-27; 87-88; 167-168). |
Mills, T., Providing world wide access to historical sources, Computer Networks and ISDN Systems, vol. 29, Nos. 8-13, Sep. 1997, pp. 1317-1325. |
Myka, A., Automatic Hypertext Conversion of Paper Document Collections (ch. 6), Digital Libraries Workshop DL '94, Newark NJ, May, 1994 (selected papers), pp. 65-90. |
Notice of Allowance for related case (U.S. Appl. No. 10/676,571), mailed from USPTO on Sep. 30, 2003. |
Notice of Allowance for related case (U.S. Appl. No. 10/788,837), mailed from USPTO on Feb. 26, 2004. |
Office Action for related case (U.S. Appl. No. 10/676,571), mailed from USPTO on Sep. 30, 2003. |
Office Action for related case (U.S. Appl. No. 10/788,837), mailed from USPTO on Feb. 26, 2004. |
Publication entitled "Asymptotic Model Selection for Directed Networks with Hidden Variables," by Dan Geiger et al., May 1996, Technical Report MSR-TR-96-07, Microsoft Research, Advanced Technology Division. |
Publication entitled "Estimating Dependency Structure as a Hidden Variable", by Marina Meila et al., Massachusetts Institute of Technology, A.I. Memo No. 1648, C.B.C.L. Memo No. 165, Sep. 1998. |
Publication entitled "Hidden Markov Decision Trees", by Michael I. Jordan et al., 1997, Center for Biological and Computational Learning Massachusetts Institute of Technology and Department of Computer Science, University of Toronto Canada. |
Publication entitled Learning Bayesian Networks: The Combination of Knowledge and 9, Microsoft Research, Advanced Technology Division, 1995. |
Thistlewaite, P., Automatic construction and management of large open webs, Information Processing and Management: an International Journal, vol. 33, Issue 2, Mar. 1997, pp. 161-173 (ISSN 0306-4573). |
Cited By (22)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US9069750B2 (en) | 2006-10-10 | 2015-06-30 | Abbyy Infopoisk Llc | Method and system for semantic searching of natural language texts |
US9892111B2 (en) | 2006-10-10 | 2018-02-13 | Abbyy Production Llc | Method and device to estimate similarity between documents having multiple segments |
US9495358B2 (en) | 2006-10-10 | 2016-11-15 | Abbyy Infopoisk Llc | Cross-language text clustering |
US9098489B2 (en) | 2006-10-10 | 2015-08-04 | Abbyy Infopoisk Llc | Method and system for semantic searching |
US9075864B2 (en) | 2006-10-10 | 2015-07-07 | Abbyy Infopoisk Llc | Method and system for semantic searching using syntactic and semantic analysis |
US9418335B1 (en) * | 2007-08-01 | 2016-08-16 | Google Inc. | Method and apparatus for selecting links to include in a probabilistic generative model for text |
US9213946B1 (en) | 2009-04-08 | 2015-12-15 | Google Inc. | Comparing models |
US8296257B1 (en) * | 2009-04-08 | 2012-10-23 | Google Inc. | Comparing models |
US20110145209A1 (en) * | 2009-12-15 | 2011-06-16 | Juniper Networks, Inc. | Atomic deletion of database data categories |
US20110145206A1 (en) * | 2009-12-15 | 2011-06-16 | Juniper Networks Inc. | Atomic deletion of database data categories |
US8214411B2 (en) * | 2009-12-15 | 2012-07-03 | Juniper Networks, Inc. | Atomic deletion of database data categories |
US8478797B2 (en) * | 2009-12-15 | 2013-07-02 | Juniper Networks, Inc. | Atomic deletion of database data categories |
US8290991B2 (en) * | 2009-12-15 | 2012-10-16 | Juniper Networks, Inc. | Atomic deletion of database data categories |
US20120239685A1 (en) * | 2009-12-15 | 2012-09-20 | Juniper Networks, Inc. | Atomic deletion of database data categories |
US9378202B2 (en) * | 2010-03-26 | 2016-06-28 | Virtuoz Sa | Semantic clustering |
US9275042B2 (en) | 2010-03-26 | 2016-03-01 | Virtuoz Sa | Semantic clustering and user interfaces |
US20110238408A1 (en) * | 2010-03-26 | 2011-09-29 | Jean-Marie Henri Daniel Larcheveque | Semantic Clustering |
US10360305B2 (en) | 2010-03-26 | 2019-07-23 | Virtuoz Sa | Performing linguistic analysis by scoring syntactic graphs |
US9524291B2 (en) | 2010-10-06 | 2016-12-20 | Virtuoz Sa | Visual display of semantic information |
US9189482B2 (en) | 2012-10-10 | 2015-11-17 | Abbyy Infopoisk Llc | Similar document search |
US20180373791A1 (en) * | 2017-06-22 | 2018-12-27 | Cerego, Llc. | System and method for automatically generating concepts related to a target concept |
US11086920B2 (en) * | 2017-06-22 | 2021-08-10 | Cerego, Llc. | System and method for automatically generating concepts related to a target concept |
Similar Documents
Publication | Publication Date | Title |
---|---|---|
US7877371B1 (en) | Selectively deleting clusters of conceptually related words from a generative model for text | |
US7383258B2 (en) | Method and apparatus for characterizing documents based on clusters of related words | |
US7231393B1 (en) | Method and apparatus for learning a probabilistic generative model for text | |
Su et al. | Building natural language interfaces to web apis | |
Chickering | Learning equivalence classes of Bayesian-network structures | |
US9098813B1 (en) | Methods and systems for conducting a personalized web browser search by probability estimation that is unseen document is of interest to the user | |
Pham et al. | A general recommendation model for heterogeneous networks | |
Kaiser et al. | Reinforcement learning from reformulations in conversational question answering over knowledge graphs | |
US9418335B1 (en) | Method and apparatus for selecting links to include in a probabilistic generative model for text | |
US8051027B2 (en) | Method and system for transitioning from a case-based classifier system to a rule-based classifier system | |
US8185482B2 (en) | Modeling semantic and structure of threaded discussions | |
Zhou et al. | A survey on multi-modal social event detection | |
US8069167B2 (en) | Calculating web page importance | |
Zhang et al. | A triple wing harmonium model for movie recommendation | |
US9507858B1 (en) | Selectively merging clusters of conceptually related words in a generative model for text | |
Rahmani et al. | Planning to chronicle: Optimal policies for narrative observation of unpredictable events | |
Huo et al. | User behavior sequence modeling to optimize ranking mechanism for e-commerce search | |
Ding et al. | Adversarial path sampling for recommender systems | |
AU2003282688B2 (en) | Method and apparatus for characterizing documents based on clusters of related words | |
Chugani et al. | On-Device Tag Generation for Unstructured Text | |
Sowmya et al. | Social recommendation system using network embedding and temporal information | |
Rohit et al. | Applications of Optimal Stopping Algorithm for Social Graph Based Recommendation | |
Codina Busquet | Exploiting distributional semantics for content-based and context-aware recommendation | |
George et al. | Large Scale Data Analysis and Knowledge Extraction in Communication Data | |
Neuman et al. | Information retrieval using bayesian networks |
Legal Events
Date | Code | Title | Description |
---|---|---|---|
AS | Assignment |
Owner name: GOOGLE INC., CALIFORNIAFree format text: ASSIGNMENT OF ASSIGNORS INTEREST;ASSIGNORS:LERNER, URI;JAHR, MICHAEL;KASERA, VISHAL;SIGNING DATES FROM 20070122 TO 20070123;REEL/FRAME:019039/0871 |
|
STCF | Information on status: patent grant |
Free format text: PATENTED CASE |
|
FEPP | Fee payment procedure |
Free format text: PAYER NUMBER DE-ASSIGNED (ORIGINAL EVENT CODE: RMPN); ENTITY STATUS OF PATENT OWNER: LARGE ENTITYFree format text: PAYOR NUMBER ASSIGNED (ORIGINAL EVENT CODE: ASPN); ENTITY STATUS OF PATENT OWNER: LARGE ENTITY |
|
FPAY | Fee payment |
Year of fee payment: 4 |
|
AS | Assignment |
Owner name: GOOGLE LLC, CALIFORNIAFree format text: CHANGE OF NAME;ASSIGNOR:GOOGLE INC.;REEL/FRAME:044101/0405Effective date: 20170929 |
|
MAFP | Maintenance fee payment |
Free format text: PAYMENT OF MAINTENANCE FEE, 8TH YEAR, LARGE ENTITY (ORIGINAL EVENT CODE: M1552)Year of fee payment: 8 |
|
MAFP | Maintenance fee payment |
Free format text: PAYMENT OF MAINTENANCE FEE, 12TH YEAR, LARGE ENTITY (ORIGINAL EVENT CODE: M1553); ENTITY STATUS OF PATENT OWNER: LARGE ENTITYYear of fee payment: 12 |