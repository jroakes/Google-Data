US6654777B1 - Single precision inverse square root generator - Google Patents
Single precision inverse square root generator Download PDFInfo
- Publication number
- US6654777B1 US6654777B1 US09/627,221 US62722100A US6654777B1 US 6654777 B1 US6654777 B1 US 6654777B1 US 62722100 A US62722100 A US 62722100A US 6654777 B1 US6654777 B1 US 6654777B1
- Authority
- US
- United States
- Prior art keywords
- floating point
- square root
- inverse square
- approximation
- value
- Prior art date
- Legal status (The legal status is an assumption and is not a legal conclusion. Google has not performed a legal analysis and makes no representation as to the accuracy of the status listed.)
- Expired - Fee Related, expires
Links
Images
Classifications
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F7/00—Methods or arrangements for processing data by operating upon the order or content of the data handled
- G06F7/38—Methods or arrangements for performing computations using exclusively denominational number representation, e.g. using binary, ternary, decimal representation
- G06F7/48—Methods or arrangements for performing computations using exclusively denominational number representation, e.g. using binary, ternary, decimal representation using non-contact-making devices, e.g. tube, solid state device; using unspecified devices
- G06F7/544—Methods or arrangements for performing computations using exclusively denominational number representation, e.g. using binary, ternary, decimal representation using non-contact-making devices, e.g. tube, solid state device; using unspecified devices for evaluating functions by calculation
- G06F7/552—Powers or roots, e.g. Pythagorean sums
- G06F7/5525—Roots or inverse roots of single operands
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F2207/00—Indexing scheme relating to methods or arrangements for processing data by operating upon the order or content of the data handled
- G06F2207/552—Indexing scheme relating to groups G06F7/552 - G06F7/5525
- G06F2207/5521—Inverse root of a number or a function, e.g. the reciprocal of a Pythagorean sum
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F7/00—Methods or arrangements for processing data by operating upon the order or content of the data handled
- G06F7/38—Methods or arrangements for performing computations using exclusively denominational number representation, e.g. using binary, ternary, decimal representation
- G06F7/48—Methods or arrangements for performing computations using exclusively denominational number representation, e.g. using binary, ternary, decimal representation using non-contact-making devices, e.g. tube, solid state device; using unspecified devices
- G06F7/483—Computations with numbers represented by a non-linear combination of denominational numbers, e.g. rational numbers, logarithmic number system or floating-point numbers
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F7/00—Methods or arrangements for processing data by operating upon the order or content of the data handled
- G06F7/38—Methods or arrangements for performing computations using exclusively denominational number representation, e.g. using binary, ternary, decimal representation
- G06F7/48—Methods or arrangements for performing computations using exclusively denominational number representation, e.g. using binary, ternary, decimal representation using non-contact-making devices, e.g. tube, solid state device; using unspecified devices
- G06F7/499—Denomination or exception handling, e.g. rounding or overflow
- G06F7/49905—Exception handling
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F7/00—Methods or arrangements for processing data by operating upon the order or content of the data handled
- G06F7/38—Methods or arrangements for performing computations using exclusively denominational number representation, e.g. using binary, ternary, decimal representation
- G06F7/48—Methods or arrangements for performing computations using exclusively denominational number representation, e.g. using binary, ternary, decimal representation using non-contact-making devices, e.g. tube, solid state device; using unspecified devices
- G06F7/499—Denomination or exception handling, e.g. rounding or overflow
- G06F7/49936—Normalisation mentioned as feature only
Definitions
- the present invention generally relates to computer graphics and more particularly to a circuit that calculates sphere mode texture coordinates as part of a geometry processing device in a graphics adapter.
- Graphics display subsystems are almost universally encountered in microprocessor based computer systems to facilitate a variety of graphics tasks and applications including computer-assisted drafting, architectural design, simulation trainers for aircraft and other vehicles, molecular modeling, virtual reality applications, and video games.
- Graphics processors, graphics adapters, and a variety of similarly designed computer products provide specialized hardware to speed the execution of graphics instructions and rendering of graphic images.
- These processors and adapters typically include, for example, circuitry optimized for translating, rotating, and scaling 3D graphic images.
- a graphical image that is displayed on a display terminal or other output device is composed of one or more graphic primitives.
- a graphic primitive may be thought of as one or more points, lines, or polygons that are associated with one another, such as by being connected to one another.
- the displayed image is generated by creating one or more graphic primitives, assigning various attributes to the graphic primitives, defining a viewing point and a viewing volume, determining which of the graphic primitives are within the defined viewing volume, and rendering those graphic primitives as they would appear from the viewing point.
- This process can require a tremendous amount of computing power to keep pace with the ever increasingly complex graphics applications that are commercially available. Accordingly, designers of graphics systems and graphics applications are continuously seeking cost effective means for improving the efficiency at which graphic images are rendered and displayed.
- a software application program typically generates a 3D graphics scene, and provides the scene, along with lighting attributes, to an application programming interface (API) such as the OpenGL® API developed by Silicon Graphics, Inc.
- API application programming interface
- Complete documentation of OpenGL® is available in M. Woo et al., OpenGL Programming Guide: The Official Guide to Learning OpenGL, Version 1.2 (Addison Wesley Longman, Inc. 1999) and D. Schreiner, OpenGL Reference Manual, Third Edition: The Official Reference Document to OpenGL, Version 1.2 (Addison Wesley Longman, Inc. 1999), both of which are incorporated by reference herein.
- a 3D graphics scene typically includes a number of polygons that are delimited by sets of vertices.
- the vertices are combined to form larger primitives, such as triangles or other polygons.
- the triangles (or polygons) are combined to form surfaces, and the surfaces are combined to form objects.
- Each vertex is associated with a set of attributes.
- Vertex attributes may include a position, including three Cartesian coordinates x, y, and z, a material color, which describes the color of the object to which the vertex belongs, and a normal vector, which describes the direction to which the surface is facing at the vertex.
- Each vertex may also be associated with texture coordinates and/or an alpha (transparency) value.
- the scene itself may be associated with a set of attributes including, as examples, an ambient color that typically describes the amount of ambient light and one or more individual light sources.
- Each light source has a number of properties associated with it, including a direction, an ambient color, a diffuse color, and a specular color.
- Rendering is employed within the graphics system to create two-dimensional image projections of a 3D graphics scene for display on a monitor or other display device.
- rendering includes processing geometric primitives (e.g., points, lines, and polygons) by performing one or more of the following operations as needed: transformation, clipping, culling, lighting, fog calculation, and texture coordinate generation.
- Rendering further includes processing the primitives to determine component pixel values for the display device, a process often referred to specifically as rasterization.
- the OpenGL® API and other API's such as the DirectX® API from Microsoft define the allowed vertex and scene attributes and the equations used to determine attribute values.
- the calculations specified by a particular API are implemented in software. It will be appreciated that software calculations can adversely affect the performance of the graphics adapter, especially if the equations require complex, floating point calculations. It would therefore be desirable to implement, to the extent feasible, some or all of the calculations specified by a particular graphics API in dedicated hardware circuitry. Moreover, it would be desirable if the implemented solution balanced improved performance against cost by optimizing the hardware design to account for such factors as, the frequency with which the particular function or equation is invoked and the speed required of the particular equation.
- the goal identified above is achieved with a floating point inverse square root circuit according to the present invention.
- the circuit is configured to receive a floating point value comprised of a sign bit, an exponent field, and a mantissa field.
- the inverse square root circuit includes a lookup table configured to receive at least a portion of the floating point value and further configured to generate an initial approximation (x 0 ) of the inverse square root of the floating point value from the received portion of the floating point value.
- the inverse square root circuit further includes a first estimation circuit that receives the initial approximation from the lookup table and at least a portion of a value L derived from the floating point value mantissa field (M) and further configured to produce a first approximation (x 1 ) of the floating point value's inverse square root based upon L and x 0 where x 1 is a more accurate estimate of the inverse square root than x 0 .
- a first estimation circuit that receives the initial approximation from the lookup table and at least a portion of a value L derived from the floating point value mantissa field (M) and further configured to produce a first approximation (x 1 ) of the floating point value's inverse square root based upon L and x 0 where x 1 is a more accurate estimate of the inverse square root than x 0 .
- the first estimation circuit may include first, second, and third fixed point multiplication units and first and second fixed point adders where the first multiplication unit is configured to square the initial approximation x 0 , the first fixed point adder is configured to receive as its inputs the initial approximation x 0 and the output of a first shift register that receives the initial approximation x 0 as its input, and the second multiplication unit is configured to multiply the output of the first multiplication unit by the initial approximation x 0 .
- the third multiplication unit may be configured to multiply the output of the second multiplication unit by L and the second adder may be configured to add the output of the first adder with a shifted and 2's complemented version of the output of the third multiplier to produce the first approximation x 1 .
- the value L may comprise the normalized mantissa field if the exponent of the floating point value is even and two times the normalized mantissa field if the exponent of the floating point value is odd.
- FIG. 1 A and FIG. 1B are block diagrams emphasizing selected hardware elements and software elements, respectively, of a data processing system according to one embodiment of the pet invention
- FIG. 2 is a block diagram of an embodiment of the graphics adapter of FIG. 1A;
- FIG. 3 is a block diagram of an embodiment of a geometry pipeline of the graphics adapter of FIG. 2;
- FIG. 4 is a block diagram illustrating functional blocks of a floating point inverse square root circuit suitable for use in various stages of the geometry pipeline of FIG. 3;
- FIG. 5 is a flow diagram illustrating the operation of a floating point circuit according to an embodiment of the invention that includes the inverse square root circuit of FIG. 4 .
- FIG. 1A is a block diagram of selected hardware elements of a data processing system 100 according to one embodiment of the present invention.
- system 100 includes one or more processor(s) 102 a through 102 n (generically or collectively referred to herein as processor(s) 102 ) are connected to a system bus 104 .
- processors 102 may be implemented with any of a variety of microprocessor components including, as examples, PowerPC® processors from IBM Corporation, SPARC® processors from Sun Microsystems, and ⁇ 86 compatible architectures such as the Pentium® family of processors from Intel Corporation and the Athlon® family of processors from Advanced Micro Devices, Inc.
- a system memory (RAM) 106 is accessible to processors 102 via system bus 104 .
- a host bridge 108 is connected between system bus 104 and an IO bus 110 .
- IO bus 110 is typically implemented as a PCI bus (as specified in PCI Local Bus Specification Rev . 2.2 available from the PCI Special Interest Group at www.pcisig.com and incorporated by reference herein), or a PCI derivative such as the Advanced Graphics Protocol (AGP) bus defined by Intel Corporation.
- the depicted embodiment of system 100 includes various peripheral devices including a network adapter 114 suitable for connecting system 100 to computer network and a secondary bridge 120 that provides support for legacy IO devices such as a keyboard 124 and a mouse 126 .
- System 100 further includes a graphics adapter 120 connected to IO bus 110 .
- the graphics adapter 120 is enabled to process graphics data received via IO bus 110 and typically includes a video controller that controls the image displayed on a display device 121 .
- system memory 106 may include all or portions of an operating system 130 .
- Suitable operating systems include the AIX® operating system from IBM Corporation (or another Unix derivative operating system), a Windows® family operating system from Microsoft, or a network operating system such as JavaOS® from Sun Microsystems.
- An application program 132 generates graphics scenes that are passed to an API 134 .
- API 134 may be the OpenGL® API, the DirectX® API, or another suitable 3D programming interface. API 134 processes graphics scenes generated by application program 132 and, via graphics adapter 120 , maintains the contents of a video display screen, plotter, or other suitable output device.
- graphics adapter 120 includes a geometry processor 210 and a rasterization portion (rasterizer) 220 .
- the geometry processor 210 performs complex calculations in response to data received from API 134 to generate the attributes specified by API 134 .
- Rasterizer 220 determines pixel values for the display device based upon information received from geometry processor 210 and maintains the contents of a frame buffer or other suitable graphics storage facility that is used to store a representation of the image that is displayed by the display device.
- geometry pipeline 210 receives data generated by API 134 .
- geometry processor 210 includes an interface that receives data, including commands and object coordinates, from IO bus 110 in 32-bit chunks.
- a vertex packer 302 converts the 32-bit chunks into a vertex width internally supported by geometry pipeline 210 .
- the vertex width may vary depending upon the data that is required by the stage.
- vertex packer 302 provides default values (pursuant to the API 134 ) for vertex attributes that are not specified by the application program.
- Vertex packer 302 forwards object coordinates to normal/model view transformation stage 304 where the normal vector is transformed from object space into eye space and the object coordinates are transformed into eye coordinates by translating, scaling, and rotating objects.
- the normalization stage 306 changes a normal vector to a vector of unit length (i.e., a vector having a magnitude of 1.0), while preserving the direction of the original vector.
- normalization stage 306 may generate normalized eye coordinates.
- the texture coordinate generation block 308 as its name implies, is responsible for generating object linear, eye linear, or spherical texture coordinates.
- the lighting stage 310 generates the color of each vertex of an object based on the orientation of the object and its material properties as well as the properties of the scene and any light sources that are defined.
- Texture/projection transformation stage 312 transforms texture coordinates and moves objects into a viewing volume by transforming eye coordinates into clip coordinates by translating, rotating, and scaling objects. Perspective projection makes objects that are further away from the viewer appear smaller whereas orthogonal projection does not.
- Clipping stage 314 clips objects to a defined viewing volume while fog factor generation stage 316 makes objects fade into the distance by making objects further from the viewer less visible than objects closer to the viewer.
- the perspective division stage 318 transforms clip coordinates to normalized device coordinates [ ⁇ 1,+1] by dividing by the 4th coordinate (the W coordinate).
- the viewport transformation stage 320 facilitates the rasterization process by transforming normalized device coordinates into screen or window coordinates.
- viewport transformation stage 320 may convert one or more floating point values to fixed point values.
- the vertex funnel 322 converts the internal vertex format into a 32-bit format suitable for an output interface of geometry processor 210 .
- One or more of the stages identified in FIG. 3, including normalization stage 306 , lighting stage 310 , and clipping stage 314 are typically required to compute the inverse square root of a floating point value as part of the geometry processing.
- the present invention contemplates a dedicated circuit for computing the inverse square root of a floating point value using fixed point calculations to reduce the number of cycles required to complete the computation.
- inverse square root circuit 400 is configured to receive a 32-bit single precision floating point number formatted according to the IEEE Standard for Binary Floating-Point Arithmetic (IEEE Std No. 0754P-1985) available from the IEEE and incorporated by reference herein.
- the inverse square root circuit 400 produces a 32-bit floating point value that represents the inverse square root (i.e., x ⁇ 0.5 ) of the floating point number received.
- Inverse square root circuit 400 achieves improved performance over a software solution by implementing a circuit that approximates the root of a function, where each successive approximation is computed with fixed point arithmetic.
- inverse square root circuit 400 depicted in FIG. 4 are utilized for “non-special” cases of floating point numbers. More specifically, the IEEE floating point specification defines special cases for ⁇ 0, ⁇ , denormalized numbers (numbers less than 2 ⁇ 126 ), and non-numbers, also referred to as Not-A-Number or NaN's). For all other numbers (i.e., non-zero values of x where 2 ⁇ 126 ⁇
- the single precision IEEE floating point format defines the format for a 32-bit value comprising bits b 0 through b 31 , where b 0 is the most significant bit, as follows:
- V ⁇ 1 S * 2 (E-127) * 1.M, where 1.M is a 24-bit binary representation of a value greater than or equal to 1 and less than 2.
- V ⁇ 0.5 2 (127-E)/2 *1 .M ⁇ 0.5
- One embodiment of the invention employs Newton-Raphson techniques to approximate the root of f(x). According to Newton-Raphson, an initial estimate (x 0 ) of the root of the function is chosen. From the initial estimate, successive estimates of the root are determined according to the formula
- x n+1 x n ⁇ f ( x n )/ f ′( x n )
- inverse square root circuit 400 receives the value L where L is the normalized mantissa (1.M or K) of an IEEE formatted floating point value if the exponent E-127 of the floating point value is even and where L is 2K if the exponent E-127 is odd. Initially, the value L is used to obtain an initial estimate x 0 of the inverse square root (1/L 1 ⁇ 2 ). In the depicted embodiment, the value L is routed to a lookup table 402 that stores precise values of inverse square roots for a selected number of input values. In one embodiment, the high order 11 bits of the value L form an index into lookup table 402 , which is configured as a 2K ⁇ 12 bit table.
- the 2K ⁇ 12 bit is of sufficient granularity (as measured by the number of index values) and precision (as measured by the number of bits in the output values) to result in more than adequate precision after just two iterations of Newton-Raphson.
- the precision of a Newton-Raphson estimate doubles with each iteration.
- the result should contain well in excess of the 23 bits of precision supported by single precision IEEE floating point.
- the output x 0 of lookup table 402 represents the initial estimate of the inverse square root 1/L 1 ⁇ 2 that will be used as a seed in the Newton-Raphson determination. As depicted in FIG. 4, the x 0 output from lookup table 402 forwarded to a first estimation circuit 403 a .
- the depicted embodiment of inverse square root 400 includes first and second estimation circuits 403 a and 403 b .
- First estimation circuit 403 a produces a first estimate x 1 of L ⁇ 1 ⁇ 2 from the initial estimate x 0 and second estimation circuit 403 b produces a second estimate x 2 of L ⁇ 1 ⁇ 2 from the first estimate x 1 .
- first and second estimation circuit 403 a and 403 b are substantially equivalent circuits except that, where the components of first estimator circuit 403 a receives an input value x 0 , the second estimator circuit 403 b receives the input value x 1 (which is the output of first estimator circuit 403 a ).
- both the initial estimate x 0 generated by lookup table 402 is connected to both inputs of a fixed point multiplier 404 to produce the value x 0 2 .
- the output x 0 2 of multiplier 404 may include up to 24 bits.
- the output x 0 from lookup table 402 is also routed to a divide-by-two circuit 406 , which is implemented in the depicted embodiment with a 1-bit shift register.
- the output of divide-by-two circuit 406 serves as an input point to a fixed point adder 410 that receives x 0 as its other input to produce a value of 1.5x 0 .
- the output of multiplier circuit 404 serves as an input to a second fixed point multiplier 408 that receives the value x 0 as its other input to produce the value x 0 3 .
- the x 0 3 value is then multiplied by the input L to produce a value Lx 0 3 .
- the Lx0 3 value is then halved in divide-by-two circuit 414 , which is implemented as a 1-bit shifter in the depicted embodiment, to generate the value 0.5Lx 0 3 .
- circuit 416 implemented as a 2's complement circuit in the depicted embodiment to produce the value ⁇ 0.5Lx 0 3 .
- the second estimate x 2 produced by inverse square root circuit 400 is fully accurate to the precision of the single precision floating point format (i.e., x 1 is precise to at least 23 mantissa bits).
- Latching circuitry (not depicted) is typically included in inverse square root circuit 400 to control the timing of the values produced by the various components of reciprocator circuit 400 .
- the outputs of lookup table 402 , multipliers 404 , 408 , and adders 410 and 418 are all latched.
- inverse square root circuit 400 may include multiplexing circuitry configured to generate appropriate output values when the input values are special cases.
- the mantissa of a denormalized value is 0.00011
- the mantissa is shifted four times to produce a normalized mantissa of 1.1.
- the exponent is decremented each time the mantissa is shifted. Since the IEEE exponent of all denormalized floating points is ⁇ 126, the resulting exponent will have a value of ⁇ 126-N, where N is number of times required to fully shift the most significant 1 bit in the mantissa. If the number N is odd, and additional shift of the mantissa and decrement of the exponent is performed to ensure that the exponent is even. After this manipulation, the mantissa, may be forwarded to inverse square root circuit 400 and the exponent may be treated the same as exponents of normalized numbers.
- floating point circuit 500 receives a 32-bit IEEE formatted floating point number as its input.
- Floating point circuit 500 includes a multiplexer circuit, represented by the decision block 502 , that determines if the input is a negative number (by examining the sign bit S) and, if so, generates (block 504 ) a predetermined NaN value for the output.
- the floating point circuit 500 further includes a multiplexer circuit represented by block 506 that determines if the input value is an IEEE NaN and, if so, generates (block 508 ) a predetermined NaN as the output. Similarly, a multiplexer circuit represented by block 510 determines if the input value is a +0 and generates with block 512 a + ⁇ value if so and a multiplexer circuit 514 determines if the input value is + ⁇ and generates with block 516 a +0 output if so.
- a multiplexer circuit represented by block 506 determines if the input value is an IEEE NaN and, if so, generates (block 508 ) a predetermined NaN as the output.
- a multiplexer circuit represented by block 510 determines if the input value is a +0 and generates with block 512 a + ⁇ value if so
- a multiplexer circuit 514 determines if the input value is + ⁇ and generates with block 516 a +0 output if
- Floating point circuit 500 further includes a multiplexing circuit represented by block 518 that determines if the floating point input is a denormalized number. If the input is a denormalized number, shift circuitry identified as block 520 shifts the mantissa appropriately (until the most significant 1 bit of the mantissa is shifted into the normalized position) and decrements the exponent for each shift of the mantissa. A multiplexer circuit represented by block 522 then determines if the floating point exponent is even or odd by looking at the least significant exponent bit.
- shift circuit 524 shifts the mantissa once and decrements the exponent to place the floating point input into a form suitable for processing as described above by inverse square root circuit 400 .
- the inverse square root circuit 400 produces the IEEE formatted mantissa portion of the output value. The exponent portion is handled by simple shift circuitry (not depicted) which divides the exponent value by two.
- a final normalization may be performed by shifting the output of inverse square root 400 a single time and decrementing the final exponent by 1 to place the final estimate of 1/L 1 ⁇ 2 in IEEE floating point format.
Abstract
Description
Claims (24)
Priority Applications (1)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US09/627,221 US6654777B1 (en) | 2000-07-27 | 2000-07-27 | Single precision inverse square root generator |
Applications Claiming Priority (1)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US09/627,221 US6654777B1 (en) | 2000-07-27 | 2000-07-27 | Single precision inverse square root generator |
Publications (1)
Publication Number | Publication Date |
---|---|
US6654777B1 true US6654777B1 (en) | 2003-11-25 |
Family
ID=29584790
Family Applications (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
US09/627,221 Expired - Fee Related US6654777B1 (en) | 2000-07-27 | 2000-07-27 | Single precision inverse square root generator |
Country Status (1)
Country | Link |
---|---|
US (1) | US6654777B1 (en) |
Cited By (3)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20060059216A1 (en) * | 2004-09-10 | 2006-03-16 | Silicon Integrated Systems Corp. | Method for square root computation |
US20070038694A1 (en) * | 2005-08-09 | 2007-02-15 | Lg Electronics Inc. | Method of root operation for voice recognition and mobile terminal thereof |
US20120157008A1 (en) * | 2010-12-20 | 2012-06-21 | Assaf Prihed | Method for avoiding overflow of multiplication of roots-of-unity by using overflow safe approximated values table |
Citations (6)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US5341321A (en) * | 1993-05-05 | 1994-08-23 | Hewlett-Packard Company | Floating point arithmetic unit using modified Newton-Raphson technique for division and square root |
US5386375A (en) * | 1993-11-01 | 1995-01-31 | Motorola, Inc. | Floating point data processor and a method for performing a floating point square root operation within the data processor |
US5537345A (en) * | 1993-10-14 | 1996-07-16 | Matsushita Electrical Industrial Co. Ltd. | Mathematical function processor utilizing table information |
US5847979A (en) * | 1996-10-31 | 1998-12-08 | Samsung Electronics Company, Ltd. | Method and apparatus for generating an initial estimate for a floating point reciprocal of a square root |
US6349319B1 (en) * | 1999-01-29 | 2002-02-19 | Sun Microsystems, Inc. | Floating point square root and reciprocal square root computation unit in a processor |
US6385713B2 (en) * | 1996-10-10 | 2002-05-07 | Sun Microsystems, Inc. | Microprocessor with parallel inverse square root logic for performing graphics function on packed data elements |
-
2000
- 2000-07-27 US US09/627,221 patent/US6654777B1/en not_active Expired - Fee Related
Patent Citations (6)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US5341321A (en) * | 1993-05-05 | 1994-08-23 | Hewlett-Packard Company | Floating point arithmetic unit using modified Newton-Raphson technique for division and square root |
US5537345A (en) * | 1993-10-14 | 1996-07-16 | Matsushita Electrical Industrial Co. Ltd. | Mathematical function processor utilizing table information |
US5386375A (en) * | 1993-11-01 | 1995-01-31 | Motorola, Inc. | Floating point data processor and a method for performing a floating point square root operation within the data processor |
US6385713B2 (en) * | 1996-10-10 | 2002-05-07 | Sun Microsystems, Inc. | Microprocessor with parallel inverse square root logic for performing graphics function on packed data elements |
US5847979A (en) * | 1996-10-31 | 1998-12-08 | Samsung Electronics Company, Ltd. | Method and apparatus for generating an initial estimate for a floating point reciprocal of a square root |
US6349319B1 (en) * | 1999-01-29 | 2002-02-19 | Sun Microsystems, Inc. | Floating point square root and reciprocal square root computation unit in a processor |
Cited By (4)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20060059216A1 (en) * | 2004-09-10 | 2006-03-16 | Silicon Integrated Systems Corp. | Method for square root computation |
US20070038694A1 (en) * | 2005-08-09 | 2007-02-15 | Lg Electronics Inc. | Method of root operation for voice recognition and mobile terminal thereof |
US20120157008A1 (en) * | 2010-12-20 | 2012-06-21 | Assaf Prihed | Method for avoiding overflow of multiplication of roots-of-unity by using overflow safe approximated values table |
US8577402B2 (en) * | 2010-12-20 | 2013-11-05 | Lsi Corporation | Method for avoiding overflow of multiplication of roots-of-unity by using overflow safe approximated values table |
Similar Documents
Publication | Publication Date | Title |
---|---|---|
US8615542B2 (en) | Multi-function floating point arithmetic pipeline | |
US6417858B1 (en) | Processor for geometry transformations and lighting calculations | |
Rumpf et al. | Level set segmentation in graphics hardware | |
US8098257B2 (en) | Filtering unit for floating-point texture data | |
US8441497B1 (en) | Interpolation of vertex attributes in a graphics processor | |
US7292242B1 (en) | Clipping with addition of vertices to existing primitives | |
US7002588B1 (en) | System, method and computer program product for branching during programmable vertex processing | |
EP0817126B1 (en) | Method and apparatus implementing high resolution rendition of Z-buffered primitives | |
JP4635087B2 (en) | Improved floating-point unit for extension functions | |
KR19980079671A (en) | Method of performing graphical data calculation and data processor | |
US9024969B2 (en) | Method and device for performing user-defined clipping in object space | |
US6681237B1 (en) | Exponentiation circuit for graphics adapter | |
US9852540B2 (en) | Graphics lighting engine including log and anti-log units | |
WO2001029768A2 (en) | Multi-stage fixed cycle pipe-lined lighting equation evaluator | |
EP0680020A2 (en) | Apparatus and method for direct calculation of clip region outcodes | |
US6654777B1 (en) | Single precision inverse square root generator | |
US20020126127A1 (en) | Lighting processing circuitry for graphics adapter | |
US6822656B1 (en) | Sphere mode texture coordinate generator | |
US6683621B1 (en) | Vertex and spherical normalization circuit | |
EP0817130A2 (en) | Apparatus and method for calculating specular lighting | |
KR20080064523A (en) | 3-dimension graphic processing apparatus and operating method thereof | |
US7061494B1 (en) | Method and apparatus for hardware optimization of graphics pipeline functions | |
JP2930069B1 (en) | Exponential function operation method and apparatus for speeding up light source calculation in three-dimensional graphics processing apparatus | |
KR19990078036A (en) | Method and apparatus for implementing efficient floating point Z-buffering | |
Kuschfeldt et al. | Case Study: Efficient visualization of physical and structural properties in crash-worthiness simulations |
Legal Events
Date | Code | Title | Description |
---|---|---|---|
AS | Assignment |
Owner name: INTERNATIONAL BUSINESS MACHINES CORPORATION, NEW YFree format text: ASSIGNMENT OF ASSIGNORS INTEREST;ASSIGNORS:FOSSUM, GORDON C.;FOX, THOMAS W.;REEL/FRAME:011021/0454Effective date: 20000725 |
|
FEPP | Fee payment procedure |
Free format text: PAYOR NUMBER ASSIGNED (ORIGINAL EVENT CODE: ASPN); ENTITY STATUS OF PATENT OWNER: LARGE ENTITY |
|
CC | Certificate of correction | ||
FPAY | Fee payment |
Year of fee payment: 4 |
|
FPAY | Fee payment |
Year of fee payment: 8 |
|
AS | Assignment |
Owner name: GOOGLE INC., CALIFORNIAFree format text: ASSIGNMENT OF ASSIGNORS INTEREST;ASSIGNOR:INTERNATIONAL BUSINESS MACHINES CORPORATION;REEL/FRAME:026664/0866Effective date: 20110503 |
|
REMI | Maintenance fee reminder mailed | ||
LAPS | Lapse for failure to pay maintenance fees | ||
STCH | Information on status: patent discontinuation |
Free format text: PATENT EXPIRED DUE TO NONPAYMENT OF MAINTENANCE FEES UNDER 37 CFR 1.362 |
|
FP | Lapsed due to failure to pay maintenance fee |
Effective date: 20151125 |
|
AS | Assignment |
Owner name: GOOGLE LLC, CALIFORNIAFree format text: CHANGE OF NAME;ASSIGNOR:GOOGLE INC.;REEL/FRAME:044144/0001Effective date: 20170929 |