CN117296061A - Diffusion model with improved accuracy and reduced computing resource consumption - Google Patents
Diffusion model with improved accuracy and reduced computing resource consumption Download PDFInfo
- Publication number
- CN117296061A CN117296061A CN202280034292.3A CN202280034292A CN117296061A CN 117296061 A CN117296061 A CN 117296061A CN 202280034292 A CN202280034292 A CN 202280034292A CN 117296061 A CN117296061 A CN 117296061A
- Authority
- CN
- China
- Prior art keywords
- model
- noise
- data
- computer
- learned
- Prior art date
- Legal status (The legal status is an assumption and is not a legal conclusion. Google has not performed a legal analysis and makes no representation as to the accuracy of the status listed.)
- Pending
Links
- 238000009792 diffusion process Methods 0.000 title claims abstract description 136
- 238000000034 method Methods 0.000 claims abstract description 106
- 238000010801 machine learning Methods 0.000 claims abstract description 95
- 230000004044 response Effects 0.000 claims abstract description 10
- 230000008569 process Effects 0.000 claims description 50
- 238000012549 training Methods 0.000 claims description 36
- 238000013528 artificial neural network Methods 0.000 claims description 31
- 230000006870 function Effects 0.000 claims description 31
- 230000000737 periodic effect Effects 0.000 claims description 3
- 239000010410 layer Substances 0.000 description 21
- 230000015654 memory Effects 0.000 description 14
- 238000012545 processing Methods 0.000 description 13
- 238000010586 diagram Methods 0.000 description 8
- 230000000007 visual effect Effects 0.000 description 6
- 230000008901 benefit Effects 0.000 description 5
- 238000004891 communication Methods 0.000 description 5
- 238000005457 optimization Methods 0.000 description 5
- 238000013519 translation Methods 0.000 description 5
- 238000007906 compression Methods 0.000 description 4
- 230000006835 compression Effects 0.000 description 4
- 230000004048 modification Effects 0.000 description 4
- 238000012986 modification Methods 0.000 description 4
- 230000003190 augmentative effect Effects 0.000 description 3
- 238000013144 data compression Methods 0.000 description 3
- 230000000306 recurrent effect Effects 0.000 description 3
- 238000013527 convolutional neural network Methods 0.000 description 2
- 238000001514 detection method Methods 0.000 description 2
- 230000000694 effects Effects 0.000 description 2
- 238000005516 engineering process Methods 0.000 description 2
- 238000003709 image segmentation Methods 0.000 description 2
- 230000006872 improvement Effects 0.000 description 2
- 230000007246 mechanism Effects 0.000 description 2
- 230000011218 segmentation Effects 0.000 description 2
- 230000009471 action Effects 0.000 description 1
- 238000007792 addition Methods 0.000 description 1
- 230000005540 biological transmission Effects 0.000 description 1
- 230000015572 biosynthetic process Effects 0.000 description 1
- 239000006227 byproduct Substances 0.000 description 1
- 238000004364 calculation method Methods 0.000 description 1
- 230000008859 change Effects 0.000 description 1
- 230000001143 conditioned effect Effects 0.000 description 1
- 238000013434 data augmentation Methods 0.000 description 1
- 230000003993 interaction Effects 0.000 description 1
- 230000007787 long-term memory Effects 0.000 description 1
- 230000003287 optical effect Effects 0.000 description 1
- 238000012805 post-processing Methods 0.000 description 1
- 238000012552 review Methods 0.000 description 1
- 230000006403 short-term memory Effects 0.000 description 1
- 239000002356 single layer Substances 0.000 description 1
- 238000003786 synthesis reaction Methods 0.000 description 1
- 238000013518 transcription Methods 0.000 description 1
- 230000035897 transcription Effects 0.000 description 1
- 230000014616 translation Effects 0.000 description 1
Classifications
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06N—COMPUTING ARRANGEMENTS BASED ON SPECIFIC COMPUTATIONAL MODELS
- G06N3/00—Computing arrangements based on biological models
- G06N3/02—Neural networks
- G06N3/04—Architecture, e.g. interconnection topology
- G06N3/048—Activation functions
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06N—COMPUTING ARRANGEMENTS BASED ON SPECIFIC COMPUTATIONAL MODELS
- G06N3/00—Computing arrangements based on biological models
- G06N3/02—Neural networks
- G06N3/08—Learning methods
- G06N3/088—Non-supervised learning, e.g. competitive learning
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06N—COMPUTING ARRANGEMENTS BASED ON SPECIFIC COMPUTATIONAL MODELS
- G06N3/00—Computing arrangements based on biological models
- G06N3/02—Neural networks
- G06N3/04—Architecture, e.g. interconnection topology
- G06N3/045—Combinations of networks
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06N—COMPUTING ARRANGEMENTS BASED ON SPECIFIC COMPUTATIONAL MODELS
- G06N3/00—Computing arrangements based on biological models
- G06N3/02—Neural networks
- G06N3/04—Architecture, e.g. interconnection topology
- G06N3/047—Probabilistic or stochastic networks
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06N—COMPUTING ARRANGEMENTS BASED ON SPECIFIC COMPUTATIONAL MODELS
- G06N3/00—Computing arrangements based on biological models
- G06N3/02—Neural networks
- G06N3/08—Learning methods
- G06N3/084—Backpropagation, e.g. using gradient descent
-
- G—PHYSICS
- G10—MUSICAL INSTRUMENTS; ACOUSTICS
- G10L—SPEECH ANALYSIS OR SYNTHESIS; SPEECH RECOGNITION; SPEECH OR VOICE PROCESSING; SPEECH OR AUDIO CODING OR DECODING
- G10L21/00—Processing of the speech or voice signal to produce another audible or non-audible signal, e.g. visual or tactile, in order to modify its quality or its intelligibility
- G10L21/02—Speech enhancement, e.g. noise reduction or echo cancellation
- G10L21/0208—Noise filtering
Abstract
A computer-implemented method for using a diffusion model with improved accuracy, comprising: obtaining input data, the input data comprising one or more channels; providing the input data to a machine learning diffusion model, the machine learning diffusion model comprising: a noise adding model comprising a plurality of noise adding stages, the noise adding model configured to introduce noise to receive input data and to generate intermediate data in response to receipt of the input data; and a denoising model configured to reconstruct output data from the intermediate data; and receiving, by the computing system, output data from the machine-learned diffusion model. The diffusion model may include a learned noise schedule. Additionally and/or alternatively, the input of the denoising model may comprise a set of fourier features. Additionally and/or alternatively, the diffusion model may be trained based at least in part on the continuous time loss of the evidence lower bound.
Description
RELATED APPLICATIONS
The present application claims priority and benefit from U.S. provisional patent application No. 63/210,314, filed on day 14 6 of 2021. U.S. provisional patent application No. 63/210,314 is incorporated by reference herein in its entirety.
Technical Field
The present disclosure relates generally to machine learning. More specifically, the present disclosure relates to diffusion models with improved accuracy.
Background
Likelihood-based generative modeling is a central task in machine learning that underlies a range of applications. Autoregressive models have long been the dominant model class for this task due to their tractable likelihood and expressivity. Diffusion models are a class of machine learning models that include a noise adding Model (noise Model) and a noise removing Model (noise Model). The diffusion model has not matched the autoregressive model on the density estimation basis.
Disclosure of Invention
Aspects and advantages of embodiments of the disclosure will be set forth in part in the description which follows, or may be learned from the description, or may be learned by practice of the embodiments.
One example aspect of the present disclosure is directed to a computing system for improved fine-scale prediction using fourier features. The computing system includes one or more processors and one or more non-transitory computer-readable media that collectively store: at least a denoising model of a machine learning diffusion model, the diffusion model comprising: a noise adding model comprising a plurality of noise adding stages, the noise adding model configured to receive input data and to generate potential data in response to receipt of the input data; and a denoising model configured to reconstruct output data from the underlying data; wherein the input to the denoising model comprises a fourier feature set comprising a linear projection of a channel of at least one stage of a plurality of denoising stages; and instructions that when executed by the one or more processors cause the computing system to execute the denoising model to process the potential data to generate output data.
Another example aspect of the present disclosure is directed to a computer-implemented method for using a diffusion model with improved accuracy, the method comprising: obtaining, by a computing system comprising one or more computing devices, input data, the input data comprising one or more channels; providing, by the computing system, the input data to a machine learning diffusion model, the machine learning diffusion model comprising: a noise adding model comprising a plurality of noise adding stages, the noise adding model configured to introduce noise to receive input data and to generate intermediate data in response to receipt of the input data; and a denoising model configured to reconstruct output data from the intermediate data; wherein the input to the denoising model comprises a fourier feature set comprising a linear projection of a channel of at least one stage of a plurality of denoising stages; and receiving, by the computing system, output data from the machine-learned diffusion model.
Another example aspect of the present disclosure is directed to one or more non-transitory computer-readable media collectively storing at least a noisy model of a diffusion model, the diffusion model comprising: a noise adding model comprising a plurality of noise adding stages, the noise adding model configured to introduce noise into the input data according to a noise schedule to produce intermediate data; and a denoising model configured to reconstruct output data from the intermediate data; wherein the noise schedule is a learned noise schedule comprising one or more learned parameter values.
Another example aspect of the present disclosure is directed to a computer-implemented method for using a diffusion model with improved accuracy, the method comprising: obtaining, by a computing system comprising one or more computing devices, input data, the input data comprising one or more channels; providing, by the computing system, the input data to a machine learning diffusion model, the machine learning diffusion model comprising: a noise adding model comprising a plurality of noise adding stages, the noise adding model configured to introduce noise to receive input data and to generate intermediate data in response to receipt of the input data; and a denoising model configured to reconstruct output data from the intermediate data; wherein the diffusion model comprises a learned noise schedule; and receiving, by the computing system, output data from the machine-learned diffusion model.
Another example aspect of the present disclosure is directed to a computer-implemented method for training a diffusion model while consuming less computing resources, the method comprising: obtaining training data by a computing system comprising one or more computing devices, the training data comprising one or more channels; providing, by the computing system, training data to a machine learning diffusion model, the machine learning diffusion model comprising: a noise adding model comprising a plurality of noise adding stages, the noise adding model configured to introduce noise to receive training data and to generate intermediate data in response to receipt of the training data; and a denoising model configured to reconstruct output data from the intermediate data; and determining, by the computing system, a training penalty based at least in part on the machine learning diffusion model and the use of training data, wherein the diffusion model is trained by optimizing parameters of the machine learning diffusion model towards a lower bound of evidence, wherein the lower bound of evidence includes a continuous time penalty.
Another example aspect of the present disclosure is directed to a computer-implemented method for using a diffusion model with improved accuracy, the method comprising: receiving compressed data; and decompressing the compressed data using a denoising model that has been trained as part of the diffusion model; wherein at least one of: 1) The input to the denoising model includes one or more fourier features; 2) The denoising model comprises a learned noise schedule; or 3) training a denoising model using a continuous time loss function.
Other aspects of the disclosure are directed to various systems, apparatuses, non-transitory computer-readable media, user interfaces, and electronic devices.
These and other features, aspects, and advantages of various embodiments of the present disclosure will become better understood with reference to the following description and appended claims. The accompanying drawings, which are incorporated in and constitute a part of this specification, illustrate exemplary embodiments of the disclosure and together with the description, serve to explain the principles of interest.
Drawings
A detailed discussion of embodiments directed to one of ordinary skill in the art is set forth in the specification in reference to the accompanying drawings, in which:
FIG. 1A depicts a block diagram of an example computing system, according to an example embodiment of the present disclosure.
FIG. 1B depicts a block diagram of an example computing device, according to an example embodiment of the present disclosure.
FIG. 1C depicts a block diagram of an example computing device, according to an example embodiment of the present disclosure.
FIG. 2 depicts a block diagram of an example diffusion model, according to an example embodiment of the present disclosure.
Fig. 3 depicts a flowchart of an example method according to an example embodiment of the present disclosure.
Repeated reference characters in the drawings are intended to represent like features in the various embodiments.
Detailed Description
In general, the present disclosure is directed to a flexible family of diffusion-based models (e.g., generative models) that achieve high levels of performance, such as high level likelihood of image density estimation benchmarks. The model according to example aspects of the present disclosure in combination with the rest of the diffusion model provides efficient optimization of noise schedule. In addition, the lower evidential bound (evidence lower bound, ELBO) of the model can be reduced to a relatively short expression relative to the signal-to-noise ratio (or noise schedule). This improved understanding provides a continuous-time lower bound of evidence that can be optimized to improve model accuracy. Furthermore, the continuous-time ELBO may be invariant to the noise schedule except at the end points of the signal-to-noise ratio. This provides a noise schedule that learns to minimize the variance of the resulting ELBO estimates, which may provide faster optimization. An example model according to example aspects of the present disclosure may also include a set of fourier features at the input of the denoising model, which may improve accuracy results.
Likelihood-based generative modeling is a central task in machine learning that can be applied in a wide range of applications including, for example, speech synthesis, translation, compression, etc. Autoregressive models have been demonstrated for these tasks due to tractable likelihood and expressivity. Diffusion models have shown impressive results in image generation and audio generation, especially for perceived quality, but are often not matched in the density estimation basis. Example aspects of the present disclosure provide a technical contribution to improving the competitiveness of diffusion models in this field.
One example aspect of the present disclosure is directed to a diffusion-based generative model that incorporates fourier features into the diffusion model. Another example aspect of the present disclosure is directed to a diffusion-based generative model employing a learnable specification of a diffusion process (referred to herein as a "noise schedule"). Another example aspect of the present disclosure is directed to a diffusion-based generative model employing a novel continuous-time Evidence Lower Bound (ELBO). This provides these models to achieve improved performance, including a new high level of log likelihood for the image density estimation basis without data augmentation.
Example aspects of the present disclosure are directed to a diffusion probability model (diffusion probabilistic model, DPM), also referred to as a diffusion model. The diffusion model may include a noise-adding model that introduces noise into the input data to blur the input data after multiple stages or "time steps". Such a model may be or may include a limited number of steps T or an unlimited number of steps such as t→infinity. Example aspects of the present disclosure recognize that a greater number of steps provides improved performance for likelihood. For example, the noise-adding model may include a plurality of noise-adding stages (e.g., layers), where each successive layer is more noisy than the previous layer. For example, the noise-adding model may be configured to introduce noise into the input data to produce intermediate data.
The diffusion model may additionally and/or alternatively include a denoising model that may generate samples matching the input data after multiple stages. For example, the diffusion model may include a Markov chain at the denoising model and/or the denoising model. The diffusion model may be implemented in discrete time, for example, where each layer corresponds to a time step. The diffusion model may also be implemented at any depth (e.g., continuous) time. For example, the model may be completely gaussian, such that an unbiased estimate of the objective function may be obtained from a single layer. Thus, calculation of intermediate layers can be avoided. The diffusion model may be conceptually similar to a variational automatic encoder (variational autoencoder, VAE), with its structure and loss function providing efficient training of arbitrary depth (e.g., infinite depth) models. The diffusion model may be trained using variational reasoning. In particular, example aspects of the present disclosure recognize a lower bound of evidence for a diffusion model and employ a continuous time lower bound of evidence to train a diffusion model with improved performance.
The diffusion model may be or may include one or more latent variables that form a latent variable model. This can be extended to multiple observed variables, estimated condition densities (e.g., p (x|y)), and so on. The diffusion model may include a diffusion process (e.g., a denoising model) that is reversed to obtain a generative model (e.g., a denoising model).
According to example aspects of the disclosure, a computer-implemented method for using a diffusion model may include obtaining input data by a computing system including one or more computing devices. In some implementations, the input data may include one or more channels. For example, one case of generative modeling involves an observation dataset of x, where the task is to estimate the marginal distribution p (x). For example, a diffusion model may receive data x and for a given x the underlying variable z t Is sampled. Time step t may run forward in time from t=0 to t=1. Latent variable z t The distribution at time step t can be given by:
where α is the mean of the marginal distribution, andis the variance of the marginal distribution. The mean and/or variance may be smoothed such that their derivatives with respect to t are finite. In addition, the signal-to-noise ratio (SNR) io，SNR)(also referred to as a noise schedule) may decrease monotonically with t. More generally, the noise schedule may additionally and/or alternatively refer to mean and/or variance, respectively, and/or any other suitable ratio of these quantities. The joint distribution of latent variables at subsequent time steps is distributed as a first order markov chain.
The diffusion model may also include a denoising model configured to reconstruct the output data from the intermediate data. For example, the diffusion process may be reversed to produce a generative model (e.g., a denoising model). For example, the generative model may be a hierarchical model that samples a sequence of potential variables from t=1 back to t=0 over time.
Model parameters may be optimized by maximizing the lower bound of variation of the marginal log likelihood. This is also known as the lower bound of Evidence (ELBO). In accordance with example aspects of the present disclosure, the inferred model parameters defining the forward time diffusion process may be jointly optimized with the rest of the model. An example negative marginal log likelihood is defined by the sum of a priori, reconstructed, and diffuse losses. The a priori loss is the KL divergence between two gaussians and can be calculated in a closed form. The re-parameterized gradient may be used to evaluate and optimize denoising model loss. Diffusion losses may depend on the number of time steps.
According to an example aspect of the present disclosure, the input to the denoising model includes a fourier feature set including a linear projection of the channel of at least one stage of the plurality of noise adding stages. The fourier feature set may comprise a linear projection of the channel of each of the plurality of noise adding stages. For example, the fourier feature set may comprise a linear projection of at least one of the plurality of noise adding stages to the set of high frequency periodic basis functions. Intuitively, a fourier feature set may provide a better understanding of the fine-scale details of the input data. In some implementations, the fourier feature set can include four channels. For example, the Fourier feature set includesAt least one Fourier feature of the form, where q is the frequency index of the Fourier feature, i and j are the position indices, k is the channel index, and z i,j,k Is a network input at the location index and the channel index. Additionally and/or alternatively, the fourier feature set may compriseAt least one Fourier feature of the form, where q is the frequency index of the Fourier feature, i and j are the position indices, k is the channel index, and z i,j,k Is a network input at the location index and the channel index. These fourier features may have one or more frequencies based on the selection of q. In some implementations, for example, the input data may have a bit length (bit length), and the set of fourier features may include fourier features having each frequency index from one to a bit length. Additionally and/or alternatively, in some embodiments, the input data may include eight or more bits long, and the fourier feature set may include fourier features having each frequency index from seven to a bit long. As an example, if the input data is represented in 8-bit bytes, the bit length may be 8, and the 4 channels of the fourier feature may include a frequency of 2 7 And 2 8 F and g features of (c). Using only higher frequencies (e.g. greater than 2 7 ) Faster training of the model may be provided.
According to example aspects of the present disclosure, the diffusion model may include a learned noise schedule. The noise schedule may include at least one or both of a mean of the marginal distribution and/or a variance of the marginal distribution of the diffusion model. For example, in some embodiments, the learned noise schedule includes a ratio of a square mean of the marginal distribution to a square variance of the marginal distribution of the diffusion model. For example, the learned noise schedule may be a signal-to-noise ratio function. The learned noise schedule may be learned in conjunction with a diffusion model, such as in conjunction with a denoising model and/or a denoising model.
In some embodimentsIn this manner, the learned noise schedule may be parameterized by a monotonically increasing function. For example, in some embodiments, the signal-to-noise ratio may be determined by SNR (t) =exp (- γ) η (t)) parameterization, wherein γ η (t) is a monotonically increasing function. The parameter η of the monotonically increasing function may be learned in conjunction with a diffusion model. For example, in some implementations (e.g., in the case of discrete times), parameters can be learned by maximizing ELBO and other model parameters. In the case of continuous time (where the diffusion loss is constant for the signal-to-noise ratio, except for its endpoints), the parameters are learned by optimization with respect to the endpoints (e.g., rather than parameters of a schedule of interpolation between them). For example, in some embodiments, parameters may be learned by minimizing variance, such as by performing a random gradient descent on squared diffusion losses. As a by-product of calculating the ELBO gradient, such gradients can be calculated with relatively low computational overhead.
According to example aspects of the present disclosure, the monotonically increasing function may be any suitable function. In some implementations, the monotonically increasing function can be a monotonically increasing neural network. In some implementations, the monotonically increasing neural network includes one or more linear layers that are constrained to be positive. For example, in some embodiments, the monotonically increasing neural network is represented by the following formula:
wherein l i (t) is the i-th layer of the monotonically increasing neural network at time step t, and wherein phi is a sigmoid (sigmoid) function. In some embodiments, l 2 A layer may have 1024 outputs and other layers may have a single output. In some embodiments, the monotonically increasing neural network is post-processed as:
wherein, gamma 0 ＝-log(SNR max ) And gamma is 1 ＝-log(SNR min ) So that the range of the monotonically increasing neural network is limited to [ SNR ] min ,SNR max ]And wherein γ 0 And gamma 0 Is optimized in combination with the parameters of the denoising model. For example, the post-processing may define the range of the neural network.
In some embodiments, the derivative of the loss function with respect to the noise schedule is calculated along with gradients of other parameters of the diffusion model without second back propagation through the noise cancellation model. In some embodiments, the parameters of the learned noise schedule are learned by maximizing the evidence lower bound along with other parameters of the diffusion model. In some embodiments, the diffusion model is a continuous time diffusion model, and wherein the parameters of the learned noise schedule are learned by optimizing a lower bound of evidence relative to endpoints of the learned noise schedule. In some embodiments, the parameters of the learned noise schedule are learned by performing a random gradient descent on the squared diffusion penalty to minimize variance.
According to example aspects of the present disclosure, a diffusion model may be trained by optimizing parameters of a machine-learned diffusion model toward a lower bound of evidence, wherein the lower bound of evidence includes a continuous time loss. In some embodiments, an unbiased estimate of continuous time loss is used to approximate continuous time loss. In some embodiments, the unbiased estimate includes a monte carlo estimate. In some embodiments, the continuous time penalty comprises an infinite depth.
For example, example aspects of the present disclosure provide an improvement in the lower bound of evidence for a greater number of time steps. In the case of continuous times (e.g., thus having infinite depth), ELBO can thus achieve improved performance. As described in U.S. provisional patent application No. 63/210,314, in the case of infinite time steps, diffusion losses can be simplified, thereby providing a practical implementation. In some embodiments, an unbiased monte carlo estimator may be used instead of the diffusion loss because evaluating the infinite integral may be computationally intractable.
In some implementations, the input data may include data to be compressed, and the output data may be reconstructed input data. For example, the input data may be provided to a diffusion model (e.g., a noise-adding model). The intermediate data may be stored as a compressed representation. The different devices and/or the same device may then access the intermediate data and provide the intermediate data as input to the denoising model. The output data from the denoising model may thus be reconstructed input data. As one example, a diffusion model may be used for image compression. For example, the input data and/or the output data may comprise image data. Diffusion models may also be used for other types of data compression, such as audio data, text data, multimodal data, and so forth. The diffusion model may also be used for the generation of signals (e.g., images). For example, the denoising model may be used as a generative model to generate data (e.g., image data) from an input signal (e.g., input distribution). The denoising model may be trained with the denoising model and then used as an independent model. For example, a denoising model may be useful for image denoising, image stuffing or other image manipulation, audio/text stuffing or denoising or other manipulation, translation, text-to-image, image-to-text, transcription of speech, or other prediction of high-dimensional signals conditioned on input signals.
Systems and methods according to example aspects of the present disclosure may provide a variety of technical effects and benefits, including improvements to computing technology. For example, a diffusion model according to example aspects of the present disclosure may achieve improved performance, such as improved likelihood. As an example, in data compression, systems and methods according to example aspects of the present disclosure may provide improved compression ratios, such as requiring fewer bits to store compressed data relative to existing systems.
As another example technical effect and benefit, systems and methods according to example aspects of the present disclosure may enable reduced consumption of computing resources when training a diffusion model. For example, the learned noise schedule described herein may minimize the variance of the resulting ELBO estimates, resulting in faster optimization. Faster optimizations result in less consumption of computing resources such as memory usage, processor usage, and the like. Similarly, faster training may also be achieved by including fourier features. As another example, the use of continuous time loss may enable training to occur where fewer time steps need to be performed and/or evaluated. Performing and/or evaluating fewer time steps results in less consumption of computing resources such as memory usage, processor usage, and the like.
Referring now to the drawings, example embodiments of the present disclosure will be discussed in more detail.
Fig. 1A depicts a block diagram of an example computing system 100, according to an example embodiment of the disclosure. The system 100 includes a user computing device 102, a server computing system 130, and a training computing system 150 communicatively coupled by a network 180.
The user computing device 102 may be any type of computing device, such as, for example, a personal computing device (e.g., laptop or desktop), a mobile computing device (e.g., smart phone or tablet), a game console or controller, a wearable computing device, an embedded computing device, or any other type of computing device.
The user computing device 102 includes one or more processors 112 and memory 114. The one or more processors 112 may be any suitable processing device (e.g., a processor core, microprocessor, ASIC, FPGA, controller, microcontroller, etc.), and may be one processor or multiple processors operatively connected. Memory 114 may include one or more non-transitory computer-readable storage media, such as RAM, ROM, EEPROM, EPROM, flash memory devices, magnetic disks, and the like, as well as combinations thereof. Memory 114 may store data 116 and instructions 118, the instructions 118 being executed by processor 112 to cause user computing device 102 to perform operations.
In some implementations, the user computing device 102 may store or include one or more diffusion models 120. For example, the diffusion model 120 may be or may otherwise include various machine learning models, such as a neural network (e.g., deep neural network) or other types of machine learning models, including nonlinear models and/or linear models. The neural network may include a feed forward neural network, a recurrent neural network (e.g., a long and short term memory recurrent neural network), a convolutional neural network, or other form of neural network. Some example machine learning models may utilize an attention mechanism such as self-attention. For example, some example machine learning models may include a multi-headed self-attention model (e.g., a transducer model). An example diffusion model 120 is discussed with reference to fig. 2-3.
In some implementations, one or more diffusion models 120 may be received from the server computing system 130 over the network 180, stored in the user computing device memory 114, and then used or otherwise implemented by the one or more processors 112. In some implementations, the user computing device 102 may implement multiple parallel instances of a single diffusion model 120.
Additionally or alternatively, one or more diffusion models 140 may be included in the server computing system 130 in communication with the user computing device 102 according to a client-server relationship, or otherwise stored and implemented by the server computing system 130. For example, the diffusion model 140 may be implemented by the server computing system 140 as part of a web service (e.g., an image generation service). Accordingly, one or more models 120 may be stored and implemented at the user computing device 102 and/or one or more models 140 may be stored and implemented at the server computing system 130.
The user computing device 102 may also include one or more user input components 122 that receive user input. For example, the user input component 122 may be a touch-sensitive component (e.g., a touch-sensitive display screen or touchpad) that is sensitive to touch by a user input object (e.g., a finger or stylus). The touch sensitive component may be used to implement a virtual keyboard. Other example user input components include a microphone, a conventional keyboard, or other means by which a user may provide user input.
The server computing system 130 includes one or more processors 132 and memory 134. The one or more processors 132 may be any suitable processing device (e.g., a processor core, microprocessor, ASIC, FPGA, controller, microcontroller, etc.), and may be one processor or multiple processors operatively connected. Memory 134 may include one or more non-transitory computer-readable storage media, such as RAM, ROM, EEPROM, EPROM, flash memory devices, magnetic disks, and the like, as well as combinations thereof. Memory 134 may store data 136 and instructions 138, the instructions 138 being executed by processor 132 to cause server computing system 130 to perform operations.
In some implementations, the server computing system 130 includes or is otherwise implemented by one or more server computing devices. Where the server computing system 130 includes multiple server computing devices, the server computing devices may operate according to a sequential computing architecture, a parallel computing architecture, or some combination thereof.
As described above, the server computing system 130 may store or otherwise include one or more diffusion models 140. For example, model 140 may be or may otherwise include various machine learning models. Example machine learning models include neural networks or other multi-layer nonlinear models. Example neural networks include feed forward neural networks, deep neural networks, recurrent neural networks, and convolutional neural networks. Some example machine learning models may utilize an attention mechanism such as self-attention. For example, some example machine learning models may include a multi-headed self-attention model (e.g., a transducer model). An example model 140 is discussed with reference to fig. 2-3.
The user computing device 102 and/or the server computing system 130 may train the models 120 and/or 140 via interactions with a training computing system 150 communicatively coupled via a network 180. The training computing system 150 may be separate from the server computing system 130 or may be part of the server computing system 130.
The training computing system 150 includes one or more processors 152 and memory 154. The one or more processors 152 may be any suitable processing device (e.g., processor core, microprocessor, ASIC, FPGA, controller, microcontroller, etc.), and may be one processor or multiple processors operatively connected. The memory 154 may include one or more non-transitory computer-readable storage media, such as RAM, ROM, EEPROM, EPROM, flash memory devices, magnetic disks, and the like, as well as combinations thereof. Memory 154 may store data 156 and instructions 158, the instructions 158 being executed by processor 152 to cause training computing system 150 to perform operations. In some implementations, the training computing system 150 includes or is otherwise implemented by one or more server computing devices.
Training computing system 150 may include a model trainer 160, model trainer 160 using various training or learning techniques (such as, for example, back propagation of errors) to train machine learning models 120 and/or 140 stored at user computing device 102 and/or server computing system 130. For example, the loss function may be counter-propagated through the model(s) to update one or more parameters of the model(s) (e.g., based on gradients of the loss function). Various loss functions may be used, such as mean square error, likelihood loss, cross entropy loss, hinge loss, and/or various other loss functions. Gradient descent techniques may be used to iteratively update parameters over multiple training iterations.
In some implementations, performing back-propagation of the error may include performing back-propagation through time truncation. Model trainer 160 may perform a variety of generalization techniques (e.g., weight decay, discard, etc.) to improve the generalization ability of the trained model.
In particular, model trainer 160 may train diffusion models 120 and/or 140 based on a set of training data 162. Training data 162 may include, for example, image data, audio data, and the like.
In some implementations, the training examples can be provided by the user computing device 102 if the user has provided consent. Thus, in such embodiments, the model 120 provided to the user computing device 102 may be trained by the training computing system 150 on user-specific data received from the user computing device 102. In some cases, this process may be referred to as a personalized model.
Model trainer 160 includes computer logic for providing the desired functionality. Model trainer 160 may be implemented in hardware, firmware, and/or software controlling a general purpose processor. For example, in some embodiments, model trainer 160 includes program files stored on a storage device, loaded into memory, and executed by one or more processors. In other implementations, model trainer 160 includes one or more sets of computer-executable instructions stored in a tangible computer-readable storage medium (such as RAM, a hard disk, or an optical or magnetic medium).
The network 180 may be any type of communication network, such as a local area network (e.g., an intranet), a wide area network (e.g., the internet), or some combination thereof, and may include any number of wired or wireless links. In general, communications over network 180 may be carried via any type of wired and/or wireless connection using a variety of communication protocols (e.g., TCP/IP, HTTP, SMTP, FTP), coding or formats (e.g., HTML, XML), and/or protection schemes (e.g., VPN, secure HTTP, SSL).
The machine learning model described in this specification may be used in a variety of tasks, applications, and/or use cases.
In some implementations, the input to the machine learning model(s) of the present disclosure can be image data. The machine learning model(s) may process the image data to generate an output. As an example, the machine learning model(s) may process the image data to generate an image recognition output (e.g., recognition of the image data, potential embedding of the image data, encoded representation of the image data, hashing of the image data, etc.). As another example, the machine learning model(s) may process the image data to generate an image segmentation output. As another example, the machine learning model(s) may process the image data to generate an image classification output. As another example, the machine learning model(s) may process the image data to generate an image data modification output (e.g., a change in the image data, etc.). As another example, the machine learning model(s) may process the image data to generate an encoded image data output (e.g., an encoded and/or compressed representation of the image data, etc.). As another example, the machine learning model(s) may process the image data to generate an augmented (upscaled) image data output. As another example, the machine learning model(s) may process the image data to generate a prediction output.
In some implementations, the input to the machine learning model(s) of the present disclosure can be text or natural language data. The machine learning model(s) may process text or natural language data to generate an output. As an example, the machine learning model(s) may process natural language data to generate a language encoded output. As another example, the machine learning model(s) may process text or natural language data to generate a potential text-embedded output. As another example, the machine learning model(s) may process text or natural language data to generate a translation output. As another example, the machine learning model(s) may process text or natural language data to generate a classification output. As another example, the machine learning model(s) may process text or natural language data to generate text segmentation output. As another example, the machine learning model(s) may process text or natural language data to generate semantic intent output. As another example, the machine learning model(s) may process text or natural language data to generate an augmented text or natural language output (e.g., text or natural language data of higher quality than the input text or natural language, etc.). As another example, the machine learning model(s) may process text or natural language data to generate a predictive output.
In some implementations, the input to the machine learning model(s) of the present disclosure can be speech data. The machine learning model(s) may process the speech data to generate an output. As an example, the machine learning model(s) may process the speech data to generate speech recognition output. As another example, the machine learning model(s) may process the speech data to generate a speech translation output. As another example, the machine learning model(s) may process the speech data to generate potentially embedded output. As another example, the machine learning model(s) may process the speech data to generate an encoded speech output (e.g., an encoded and/or compressed representation of the speech data, etc.). As another example, the machine learning model(s) may process the speech data to generate an augmented speech output (e.g., speech data of higher quality than the input speech data, etc.). As another example, the machine learning model(s) may process the speech data to generate a textual representation output (e.g., a textual representation of the input speech data, etc.). As another example, the machine learning model(s) may process the speech data to generate a prediction output.
In some implementations, the input to the machine learning model(s) of the present disclosure can be potentially encoded data (e.g., a potential spatial representation of the input, etc.). The machine learning model(s) may process the potentially encoded data to generate an output. As an example, the machine learning model(s) may process the potentially encoded data to generate an identification output. As another example, the machine learning model(s) may process the potentially encoded data to generate a reconstructed output. As another example, the machine learning model(s) may process the potentially encoded data to generate a search output. As another example, the machine learning model(s) may process the potentially encoded data to generate a reclustering output. As another example, the machine learning model(s) may process the potentially encoded data to generate a prediction output.
In some implementations, the input to the machine learning model(s) of the present disclosure can be statistical data. The statistical data may be, represent, or otherwise include data calculated and/or calculated from some other data source. The machine learning model(s) may process the statistical data to generate an output. As an example, the machine learning model(s) may process the statistical data to generate an identification output. As another example, the machine learning model(s) may process the statistical data to generate a prediction output. As another example, the machine learning model(s) may process the statistical data to generate a classification output. As another example, the machine learning model(s) may process the statistical data to generate a segmentation output. As another example, the machine learning model(s) may process the statistical data to generate a visual output. As another example, the machine learning model(s) may process the statistical data to generate a diagnostic output.
In some implementations, the input to the machine learning model(s) of the present disclosure can be sensor data. The machine learning model(s) may process the sensor data to generate an output. As an example, the machine learning model(s) may process the sensor data to generate an identification output. As another example, the machine learning model(s) may process the sensor data to generate a prediction output. As another example, the machine learning model(s) may process the sensor data to generate classification output. As another example, the machine learning model(s) may process the sensor data to generate a segmented output. As another example, the machine learning model(s) may process the sensor data to generate a visual output. As another example, the machine learning model(s) may process the sensor data to generate diagnostic output. As another example, the machine learning model(s) may process the sensor data to generate a detection output.
In some cases, the machine learning model(s) may be configured to perform tasks including encoding input data for reliable and/or efficient transmission or storage (and/or corresponding decoding). For example, the task may be an audio compression task. The input may comprise audio data and the output may comprise compressed audio data. In another example, the input includes visual data (e.g., one or more images or videos) and the output includes compressed visual data, and the task is a visual data compression task. In another example, a task may include generating an embedding for input data (e.g., input audio or video data).
In some cases, the input includes visual data and the task is a computer vision task. In some cases, pixel data including one or more images is input, and the task is an image processing task. For example, the image processing task may be an image classification, wherein the output is a set of scores, each score corresponding to a different object class and representing the likelihood that one or more images depict an object belonging to that object class. The image processing task may be object detection, wherein the image processing output identifies one or more regions in the one or more images and, for each region, identifies a likelihood that the region depicts the object of interest. As another example, the image processing task may be image segmentation, wherein the image processing output defines a respective likelihood for each category in the predetermined set of categories for each pixel in the one or more images. For example, the set of categories may be foreground and background. As another example, the set of categories may be object classes. As another example, the image processing task may be depth estimation, wherein the image processing output defines a respective depth value for each pixel in the one or more images. As another example, the image processing task may be motion estimation, wherein the network input includes a plurality of images, and the image processing output defines, for each pixel of one of the input images, a motion of a scene depicted at the pixel between the images in the network input.
In some cases, the input includes audio data representing a spoken utterance, and the task is a speech recognition task. The output may include a text output mapped to the spoken utterance. In some cases, the task includes encrypting or decrypting the input data. In some cases, tasks include microprocessor performance tasks such as branch prediction or memory address translation.
FIG. 1A illustrates one example computing system that may be used to implement the present disclosure. Other computing systems may also be used. For example, in some implementations, the user computing device 102 may include a model trainer 160 and a training data set 162. In such implementations, the model 120 may be trained and used locally at the user computing device 102. In some such implementations, the user computing device 102 may implement the model trainer 160 to personalize the model 120 based on user-specific data.
FIG. 1B depicts a block diagram of an example computing device 10, performed in accordance with an example embodiment of the present disclosure. Computing device 10 may be a user computing device or a server computing device.
Computing device 10 includes a plurality of applications (e.g., application 1 through application N). Each application contains its own machine learning library and machine learning model(s). For example, each application may include a machine learning model. Example applications include text messaging applications, email applications, dictation applications, virtual keyboard applications, browser applications, and the like.
As shown in fig. 1B, each application may communicate with a number of other components of the computing device (such as, for example, one or more sensors, a context manager, a device state component, and/or additional components). In some implementations, each application can communicate with each device component using an API (e.g., public API). In some implementations, the API used by each application is specific to that application.
Fig. 1C depicts a block diagram of an example computing device 50, performed in accordance with an example embodiment of the present disclosure. Computing device 50 may be a user computing device or a server computing device.
Computing device 50 includes a plurality of applications (e.g., application 1 through application N). Each application communicates with a central intelligent layer. Example applications include text messaging applications, email applications, dictation applications, virtual keyboard applications, browser applications, and the like. In some implementations, each application can communicate with the central intelligence layer (and model(s) stored therein) using an API (e.g., a common API across all applications).
The central intelligence layer includes a plurality of machine learning models. For example, as shown in FIG. 1C, a corresponding machine learning model may be provided for each application and managed by a central intelligence layer. In other implementations, two or more applications may share a single machine learning model. For example, in some embodiments, the central intelligence layer may provide a single model for all applications. In some implementations, the central intelligence layer is included within or otherwise implemented by the operating system of computing device 50.
The central intelligence layer may communicate with the central device data layer. The central device data layer may be a centralized data repository for computing devices 50. As shown in fig. 1C, the central device data layer may be in communication with a plurality of other components of the computing device, such as, for example, one or more sensors, a context manager, a device status component, and/or additional components. In some implementations, the central device data layer can communicate with each device component using an API (e.g., a proprietary API).
FIG. 2 depicts a block diagram of an example diffusion model 200, according to an example embodiment of the present disclosure. In some implementations, the diffusion model 200 is trained to receive a set of input data 210 and provide output data 220 as a result of the receipt of the input data 210. The diffusion model may include a noise adding model 202 and a noise removing model 204.
FIG. 3 depicts a flowchart of an example method for using a diffusion model with improved accuracy, according to an example embodiment of the present disclosure. Although fig. 3 depicts steps performed in a particular order for purposes of illustration and discussion, the methods of the present disclosure are not limited to the order or arrangement specifically shown. The various steps of method 300 may be omitted, rearranged, combined, and/or adjusted in various ways without departing from the scope of the present disclosure.
Method 300 may include, at 302, obtaining, by a computing system including one or more computing devices, input data, the input data including one or more channels. For example, the input data may be image data.
The method 300 may include, at 304, providing, by a computing system, input data to a machine learning diffusion model. The diffusion model may include: a noise adding model comprising a plurality of noise adding stages, the noise adding model configured to introduce noise to receive input data and to generate intermediate data in response to receipt of the input data; and a denoising model configured to reconstruct output data from the intermediate data.
The method 300 may include, at 306, receiving, by a computing system, output data from a machine learning diffusion model. For example, the output data may be reconstructed input data.
The technology discussed herein relates to servers, databases, software applications, and other computer-based systems, as well as actions taken and information sent to and from such systems. The inherent flexibility of computer-based systems allows for a wide variety of possible configurations, combinations, and divisions of tasks and functions between and among components. For example, the processes discussed herein may be implemented using a single device or component or multiple devices or components working in combination. The database and applications may be implemented on a single system or distributed across multiple systems. The distributed components may operate sequentially or in parallel.
While the present subject matter has been described in detail with respect to various specific example embodiments thereof, each example is provided by way of explanation and not limitation of the present disclosure. Modifications, variations and equivalents of these embodiments will occur to those skilled in the art upon review of the foregoing description. Accordingly, the subject disclosure does not preclude inclusion of such modifications, variations and/or additions to the present subject matter as would be readily apparent to one of ordinary skill in the art. For example, features illustrated or described as part of one embodiment can be used with another embodiment to yield still a further embodiment. Accordingly, the present disclosure is intended to cover such alternatives, modifications, and equivalents.
Claims (52)
1. A computing system for improved fine-scale prediction using fourier features, comprising:
one or more processors; and
one or more non-transitory computer-readable media that collectively store:
at least a denoising model of a machine learning diffusion model, the diffusion model comprising:
a noise adding model comprising a plurality of noise adding stages, the noise adding model configured to receive input data and to generate potential data in response to receipt of the input data; and
A denoising model configured to reconstruct output data from the potential data;
wherein the input to the denoising model comprises a set of fourier features comprising linear projections of channels of at least one stage of the plurality of denoising stages; and
instructions that, when executed by the one or more processors, cause the computing system to execute the denoising model to process the potential data to generate output data.
2. The computing system of any claim (e.g., claim 1), wherein the set of fourier features comprises a linear projection of a channel of each of the plurality of noise adding stages.
3. The computing system of any claim (e.g., claim 1), wherein the set of fourier features comprises a linear projection of at least one stage of the plurality of noise-adding stages onto a set of high-frequency periodic basis functions.
4. The computing system of any claim (e.g., claim 1), wherein the set of fourier features comprises four channels.
5. The computing system of any claim (e.g., claim 1), wherein the set of fourier features includes at least one fourier feature of the form:
Where q is the frequency of the Fourier feature, i and j are the position indices, k is the channel index, and z i,j,k Is a network input at the location index and the channel index.
6. The computing system of any claim (e.g., claim 1), wherein the set of fourier features includes at least one fourier feature of the form:
where q is the frequency of the Fourier feature, i and j are the position indices, k is the channel index, and z i,j,k Is a network input at the location index and the channel index.
7. The computing system of any claim (e.g., claim 1), wherein the input data comprises a bit length, and wherein the set of fourier features comprises fourier features having each frequency from one to the bit length.
8. The computing system of any claim (e.g., claim 1), wherein the input data comprises eight or more bits long, and wherein the set of fourier features comprises fourier features having each frequency from seven to the bits long.
9. A computing system according to any claim (e.g. claim 1), wherein the input data comprises image data.
10. A computing system according to any claim (e.g. claim 1), wherein the potential data comprises a compressed representation of the input data and the output data comprises a decompressed representation of the input data.
11. A computer-implemented method for using a diffusion model with improved accuracy, the method comprising:
obtaining, by a computing system comprising one or more computing devices, input data, the input data comprising one or more channels;
providing, by the computing system, the input data to a machine learning diffusion model, the machine learning diffusion model comprising:
a noise adding model comprising a plurality of noise adding stages, the noise adding model configured to introduce noise to receive the input data and to generate intermediate data in response to receipt of the input data; and
a denoising model configured to reconstruct output data from the intermediate data;
wherein the input to the denoising model comprises a set of fourier features comprising linear projections of channels of at least one stage of the plurality of denoising stages; and
output data from the machine learning diffusion model is received by the computing system.
12. The computer-implemented method of any claim (e.g., claim 11), wherein the set of fourier features comprises a linear projection of a channel of each of the plurality of noise adding stages.
13. The computer-implemented method of any claim (e.g., claim 11), wherein the set of fourier features comprises a linear projection of at least one of the plurality of noise adding stages onto a set of high frequency periodic basis functions.
14. The computer-implemented method of any claim (e.g., claim 11), wherein the set of fourier features comprises four channels.
15. The computer-implemented method of any claim (e.g., claim 11), wherein the set of fourier features comprises at least one fourier feature of the form:
where q is the frequency of the Fourier feature, i and j are the position indices, k is the channel index, and z i,j,k Is a network input at the location index and the channel index.
16. The computer-implemented method of any claim (e.g., claim 11), wherein the set of fourier features comprises at least one fourier feature of the form:
Where q is the frequency of the Fourier feature, i and j are the position indices, k is the channel index, and z i,j,k Is a network input at the location index and the channel index.
17. The computer-implemented method of any claim (e.g., claim 11), wherein the input data comprises a bit length, and wherein the set of fourier features comprises fourier features having each frequency from one to the bit length.
18. The computer-implemented method of any claim (e.g., claim 11), wherein the input data comprises eight or more bits long, and wherein the set of fourier features comprises fourier features having each frequency from seven to the bits long.
19. The computer-implemented method of any claim (e.g., claim 11), wherein the input data comprises image data.
20. The computer-implemented method of any claim (e.g., claim 11), wherein the output data comprises reconstructed input data.
21. One or more non-transitory computer-readable media collectively storing at least a noisy model of a diffusion model, the diffusion model comprising:
The noise adding model comprising a plurality of noise adding stages, the noise adding model configured to introduce noise into input data according to a noise schedule to produce intermediate data; and
a denoising model configured to reconstruct output data from the intermediate data;
wherein the noise schedule is a learned noise schedule comprising one or more learned parameter values.
22. The one or more non-transitory computer-readable media of any claim (e.g., claim 21), wherein the learned noise schedule comprises a ratio of a mean squared of a marginal distribution of the diffusion model to a variance squared of the marginal distribution.
23. The one or more non-transitory computer-readable media of any claim (e.g., claim 21), wherein the learned noise schedule is learned in conjunction with the diffusion model.
24. The one or more non-transitory computer-readable media of any claim (e.g., claim 21), wherein the learned noise schedule comprises a signal-to-noise ratio function.
25. The one or more non-transitory computer-readable media of any claim (e.g., claim 21), wherein the learned noise schedule is parameterized by a monotonically increasing function.
26. The one or more non-transitory computer-readable media of any claim (e.g., claim 25), wherein the monotonically increasing function comprises a monotonically increasing neural network.
27. The one or more non-transitory computer-readable media of any claim (e.g., claim 26), wherein the monotonically increasing neural network comprises one or more linear layers that are constrained to be positive.
28. The one or more non-transitory computer-readable media of any claim (e.g., claim 27), wherein the monotonically increasing neural network is represented by:
wherein l i (t) is the i-th layer of the monotonically increasing neural network at time step t, and wherein phi is a sigmoid function.
29. The one or more non-transitory computer-readable media of any claim (e.g., claim 28), wherein the monotonically increasing neural network is post-processed as:
wherein, gamma 0 ＝-log(SNR max ) And gamma is 1 ＝-log(SNR min ) Such that the range of the monotonically increasing neural network is limited to [ SNR ] min ,SNR max ]And wherein γ 0 And gamma 0 Is optimized in combination with the parameters of the denoising model.
30. The one or more non-transitory computer-readable media of any claim (e.g., claim 21), wherein a derivative of a loss function with respect to the noise schedule is calculated with gradients of other parameters of the diffusion model without second back propagation through the denoising model.
31. The one or more non-transitory computer-readable media of any claim (e.g., claim 21), wherein parameters of the learned noise schedule are learned by maximizing a lower bound of evidence and other parameters of the diffusion model.
32. The one or more non-transitory computer-readable media of any claim (e.g., claim 21), wherein the diffusion model is a continuous-time diffusion model, and wherein the parameters of the learned noise schedule are learned by optimizing a lower bound of evidence relative to endpoints of the learned noise schedule.
33. The one or more non-transitory computer-readable media of any claim (e.g., claim 21), wherein parameters of the learned noise schedule are learned by performing a random gradient descent on squared diffusion losses to minimize variance.
34. A computer-implemented method for using a diffusion model with improved accuracy, the method comprising:
obtaining, by a computing system comprising one or more computing devices, input data, the input data comprising one or more channels;
providing, by the computing system, the input data to a machine learning diffusion model, the machine learning diffusion model comprising:
A noise adding model comprising a plurality of noise adding stages, the noise adding model configured to introduce noise to receive the input data and to generate intermediate data in response to receipt of the input data; and
a denoising model configured to reconstruct output data from the intermediate data;
wherein the diffusion model comprises a learned noise schedule; and
output data from the machine learning diffusion model is received by the computing system.
35. The computer-implemented method of any claim (e.g., claim 34), wherein the learned noise schedule comprises a ratio of a mean squared of a marginal distribution of the diffusion model to a variance squared of the marginal distribution.
36. The computer-implemented method of any claim (e.g., claim 34), wherein the learned noise schedule is learned in conjunction with the diffusion model.
37. The computer-implemented method of any claim (e.g., claim 34), wherein the learned noise schedule comprises a signal-to-noise ratio function.
38. The computer-implemented method of any claim (e.g., claim 34), wherein the learned noise schedule is parameterized by a monotonically increasing function.
39. The computer-implemented method of any claim (e.g., claim 38), wherein the monotonically increasing function comprises a monotonically increasing neural network.
40. The computer-implemented method of any claim (e.g., claim 39), wherein the monotonically increasing neural network includes one or more linear layers that are constrained to be positive.
41. The computer-implemented method of any claim (e.g., claim 40), wherein the monotonically increasing neural network is represented by:
wherein l i (t) is the i-th layer of the monotonically increasing neural network at time step t, and wherein phi is a sigmoid function.
42. The computer-implemented method of any claim (e.g., claim 41), wherein the monotonically increasing neural network is post-processed as:
wherein, gamma 0 ＝-log(SNR max ) And gamma is 1 ＝-log(SNR min ) Such that the range of the monotonically increasing neural network is limited to [ SNR ] min ,SNR max ]And wherein γ 0 And gamma 0 Is optimized in combination with the parameters of the denoising model.
43. The computer-implemented method of any claim (e.g., claim 34), wherein a derivative of a loss function with respect to the noise schedule is calculated with gradients of other parameters of the diffusion model without second back propagation through the denoising model.
44. The computer-implemented method of any claim (e.g., claim 34), wherein parameters of the learned noise schedule are learned by maximizing a lower bound of evidence and other parameters of the diffusion model.
45. The computer-implemented method of any claim (e.g., claim 34), wherein the diffusion model is a continuous time diffusion model, and wherein the parameters of the learned noise schedule are learned by optimizing a lower bound of evidence relative to endpoints of the learned noise schedule.
46. The computer-implemented method of any claim (e.g., claim 34), wherein parameters of the learned noise schedule are learned by performing a random gradient descent on squared diffusion losses to minimize variance.
47. A computer-implemented method for training a diffusion model while consuming less computing resources, the method comprising:
obtaining training data by a computing system comprising one or more computing devices, the training data comprising one or more channels;
providing, by the computing system, the training data to a machine learning diffusion model, the machine learning diffusion model comprising:
A noise adding model comprising a plurality of noise adding stages, the noise adding model configured to introduce noise to receive the training data and to generate intermediate data in response to receipt of the training data; and
a denoising model configured to reconstruct output data from the intermediate data; and
determining, by the computing system, a training penalty based at least in part on the machine-learned diffusion model and use of the training data, wherein the diffusion model is trained by optimizing parameters of the machine-learned diffusion model towards a lower bound of evidence, wherein the lower bound of evidence includes a continuous time penalty.
48. The computer-implemented method of any claim (e.g., claim 47), wherein the continuous-time loss is approximated using an unbiased estimate of the continuous-time loss.
49. The computer-implemented method of any claim (e.g., claim 48), wherein the unbiased estimate includes a monte carlo estimate.
50. The computer-implemented method of any claim (e.g., claim 47), wherein the continuous time penalty comprises an infinite depth.
51. A computer-implemented method for using a diffusion model with improved accuracy, the method comprising:
Receiving compressed data; and
decompressing the compressed data using a denoising model that has been trained as part of a diffusion model;
wherein at least one of the following:
1) The input to the denoising model includes one or more fourier features;
2) The denoising model comprises a learned noise schedule; or alternatively
3) The denoising model is trained using a continuous time loss function.
52. The computer-implemented method of any claim (e.g., claim 51), wherein the compressed data comprises at least one of image data, audio data, text data, or incomplete data.
Applications Claiming Priority (3)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US202163210314P | 2021-06-14 | 2021-06-14 | |
US63/210,314 | 2021-06-14 | ||
PCT/US2022/033253 WO2022265992A1 (en) | 2021-06-14 | 2022-06-13 | Diffusion models having improved accuracy and reduced consumption of computational resources |
Publications (1)
Publication Number | Publication Date |
---|---|
CN117296061A true CN117296061A (en) | 2023-12-26 |
Family
ID=82404127
Family Applications (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
CN202280034292.3A Pending CN117296061A (en) | 2021-06-14 | 2022-06-13 | Diffusion model with improved accuracy and reduced computing resource consumption |
Country Status (4)
Country | Link |
---|---|
US (1) | US20230267315A1 (en) |
EP (1) | EP4295273A1 (en) |
CN (1) | CN117296061A (en) |
WO (1) | WO2022265992A1 (en) |
Families Citing this family (2)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
CN116701692B (en) * | 2023-08-04 | 2023-11-03 | 浪潮(北京)电子信息产业有限公司 | Image generation method, device, equipment and medium |
CN117789744A (en) * | 2024-02-26 | 2024-03-29 | 青岛海尔科技有限公司 | Voice noise reduction method and device based on model fusion and storage medium |
-
2022
- 2022-06-13 WO PCT/US2022/033253 patent/WO2022265992A1/en active Application Filing
- 2022-06-13 CN CN202280034292.3A patent/CN117296061A/en active Pending
- 2022-06-13 EP EP22738207.4A patent/EP4295273A1/en active Pending
- 2022-06-13 US US18/012,195 patent/US20230267315A1/en active Pending
Also Published As
Publication number | Publication date |
---|---|
US20230267315A1 (en) | 2023-08-24 |
WO2022265992A1 (en) | 2022-12-22 |
EP4295273A1 (en) | 2023-12-27 |
Similar Documents
Publication | Publication Date | Title |
---|---|---|
US11816577B2 (en) | Augmentation of audiographic images for improved machine learning | |
US20230267315A1 (en) | Diffusion Models Having Improved Accuracy and Reduced Consumption of Computational Resources | |
US11450096B2 (en) | Systems and methods for progressive learning for machine-learned models to optimize training speed | |
US20230267307A1 (en) | Systems and Methods for Generation of Machine-Learned Multitask Models | |
EP3973712A1 (en) | Small and fast video processing networks via neural architecture search | |
EP4214643A1 (en) | Dynamic language models for continuously evolving content | |
WO2022213825A1 (en) | Neural network-based end-to-end speech enhancement method and apparatus | |
US20220108220A1 (en) | Systems And Methods For Performing Automatic Label Smoothing Of Augmented Training Data | |
EP3971795A1 (en) | System and method for processing of information on quantum systems | |
CN115171710A (en) | Voice enhancement method and system for generating confrontation network based on multi-angle discrimination | |
US20230214656A1 (en) | Subtask Adaptable Neural Network | |
US11755883B2 (en) | Systems and methods for machine-learned models having convolution and attention | |
US20220245917A1 (en) | Systems and methods for nearest-neighbor prediction based machine learned models | |
US20220108219A1 (en) | Approximate Bayesian Logistic Regression For Sparse Online Learning | |
US20210383221A1 (en) | Systems And Methods For Machine-Learned Models With Message Passing Protocols | |
WO2024020107A1 (en) | Task-specific prompt recycling for machine-learned models that perform multiple tasks | |
WO2024072877A1 (en) | Learning the joint distribution of two sequences using little or no paired data | |
WO2023158494A1 (en) | Neural architecture search with improved computational efficiency | |
EP4334842A1 (en) | Portion-specific model compression for optimization of machine-learned models | |
WO2023172692A1 (en) | Maximizing generalizable performance by extraction of deep learned features while controlling for known variables | |
WO2023192632A1 (en) | Zero-shot multi-modal data processing via structured inter-model communication | |
CN115803753A (en) | Multi-stage machine learning model synthesis for efficient reasoning | |
CN115579019A (en) | Optimized training method and device for voice classification model, computer equipment and medium | |
CN117436516A (en) | Database performance prediction model training method and database performance prediction method | |
CN115668219A (en) | Generating few-sample-field adaptation in a countermeasure network |
Legal Events
Date | Code | Title | Description |
---|---|---|---|
PB01 | Publication | ||
PB01 | Publication | ||
SE01 | Entry into force of request for substantive examination | ||
SE01 | Entry into force of request for substantive examination |