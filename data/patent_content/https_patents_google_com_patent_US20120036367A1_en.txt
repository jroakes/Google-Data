US20120036367A1 - Systems and Methods for Transparent Configuration Authentication of Networked Devices - Google Patents
Systems and Methods for Transparent Configuration Authentication of Networked Devices Download PDFInfo
- Publication number
- US20120036367A1 US20120036367A1 US13/213,943 US201113213943A US2012036367A1 US 20120036367 A1 US20120036367 A1 US 20120036367A1 US 201113213943 A US201113213943 A US 201113213943A US 2012036367 A1 US2012036367 A1 US 2012036367A1
- Authority
- US
- United States
- Prior art keywords
- watermark
- watermarks
- server
- stream
- index number
- Prior art date
- Legal status (The legal status is an assumption and is not a legal conclusion. Google has not performed a legal analysis and makes no representation as to the accuracy of the status listed.)
- Granted
Links
- 238000000034 method Methods 0.000 title claims abstract description 55
- 230000005540 biological transmission Effects 0.000 claims abstract description 6
- 238000013475 authorization Methods 0.000 claims 4
- 230000003213 activating effect Effects 0.000 claims 1
- 238000004891 communication Methods 0.000 description 38
- 238000012544 monitoring process Methods 0.000 description 38
- 230000015654 memory Effects 0.000 description 13
- 230000007246 mechanism Effects 0.000 description 12
- 238000012795 verification Methods 0.000 description 10
- 241000700605 Viruses Species 0.000 description 5
- 238000013459 approach Methods 0.000 description 4
- 230000008859 change Effects 0.000 description 4
- 238000010586 diagram Methods 0.000 description 4
- 230000006855 networking Effects 0.000 description 4
- 230000003287 optical effect Effects 0.000 description 4
- 238000001514 detection method Methods 0.000 description 3
- 238000005516 engineering process Methods 0.000 description 3
- 230000008569 process Effects 0.000 description 3
- 230000002155 anti-virotic effect Effects 0.000 description 2
- 230000000694 effects Effects 0.000 description 2
- 230000006870 function Effects 0.000 description 2
- ZXQYGBMAQZUVMI-GCMPRSNUSA-N gamma-cyhalothrin Chemical compound CC1(C)[C@@H](\C=C(/Cl)C(F)(F)F)[C@H]1C(=O)O[C@H](C#N)C1=CC=CC(OC=2C=CC=CC=2)=C1 ZXQYGBMAQZUVMI-GCMPRSNUSA-N 0.000 description 2
- 238000009434 installation Methods 0.000 description 2
- 238000007726 management method Methods 0.000 description 2
- 239000000463 material Substances 0.000 description 2
- 230000004048 modification Effects 0.000 description 2
- 238000012986 modification Methods 0.000 description 2
- 238000012545 processing Methods 0.000 description 2
- 239000011800 void material Substances 0.000 description 2
- 230000009471 action Effects 0.000 description 1
- 230000000903 blocking effect Effects 0.000 description 1
- 230000001413 cellular effect Effects 0.000 description 1
- 230000001010 compromised effect Effects 0.000 description 1
- 238000010276 construction Methods 0.000 description 1
- 238000001914 filtration Methods 0.000 description 1
- 238000013467 fragmentation Methods 0.000 description 1
- 238000006062 fragmentation reaction Methods 0.000 description 1
- 230000008520 organization Effects 0.000 description 1
- 230000000737 periodic effect Effects 0.000 description 1
- 230000035755 proliferation Effects 0.000 description 1
- 150000003839 salts Chemical class 0.000 description 1
- 230000011664 signaling Effects 0.000 description 1
- 238000012546 transfer Methods 0.000 description 1
- 230000001052 transient effect Effects 0.000 description 1
- 230000001960 triggered effect Effects 0.000 description 1
- 238000010200 validation analysis Methods 0.000 description 1
Images
Classifications
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04L—TRANSMISSION OF DIGITAL INFORMATION, e.g. TELEGRAPHIC COMMUNICATION
- H04L63/00—Network architectures or network communication protocols for network security
- H04L63/12—Applying verification of the received information
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04L—TRANSMISSION OF DIGITAL INFORMATION, e.g. TELEGRAPHIC COMMUNICATION
- H04L63/00—Network architectures or network communication protocols for network security
- H04L63/12—Applying verification of the received information
- H04L63/123—Applying verification of the received information received data contents, e.g. message integrity
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F21/00—Security arrangements for protecting computers, components thereof, programs or data against unauthorised activity
- G06F21/10—Protecting distributed programs or content, e.g. vending or licensing of copyrighted material ; Digital rights management [DRM]
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04N—PICTORIAL COMMUNICATION, e.g. TELEVISION
- H04N1/00—Scanning, transmission or reproduction of documents or the like, e.g. facsimile transmission; Details thereof
- H04N1/32—Circuits or arrangements for control or supervision between transmitter and receiver or between image input and image output device, e.g. between a still-image camera and its memory or between a still-image camera and a printer device
- H04N1/32101—Display, printing, storage or transmission of additional information, e.g. ID code, date and time or title
- H04N1/32144—Display, printing, storage or transmission of additional information, e.g. ID code, date and time or title embedded in the image data, i.e. enclosed or integrated in the image, e.g. watermark, super-imposed logo or stamp
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F21/00—Security arrangements for protecting computers, components thereof, programs or data against unauthorised activity
- G06F21/60—Protecting data
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04L—TRANSMISSION OF DIGITAL INFORMATION, e.g. TELEGRAPHIC COMMUNICATION
- H04L2209/00—Additional information or applications relating to cryptographic mechanisms or cryptographic arrangements for secret or secure communication H04L9/00
- H04L2209/60—Digital content management, e.g. content distribution
- H04L2209/608—Watermarking
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04L—TRANSMISSION OF DIGITAL INFORMATION, e.g. TELEGRAPHIC COMMUNICATION
- H04L63/00—Network architectures or network communication protocols for network security
- H04L63/08—Network architectures or network communication protocols for network security for authentication of entities
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04L—TRANSMISSION OF DIGITAL INFORMATION, e.g. TELEGRAPHIC COMMUNICATION
- H04L63/00—Network architectures or network communication protocols for network security
- H04L63/20—Network architectures or network communication protocols for network security for managing network security; network security policies in general
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04N—PICTORIAL COMMUNICATION, e.g. TELEVISION
- H04N21/00—Selective content distribution, e.g. interactive television or video on demand [VOD]
- H04N21/80—Generation or processing of content or additional data by content creator independently of the distribution process; Content per se
- H04N21/83—Generation or processing of protective or descriptive data associated with content; Content structuring
- H04N21/835—Generation of protective data, e.g. certificates
- H04N21/8358—Generation of protective data, e.g. certificates involving watermark
Definitions
- This invention relates generally to methods and systems for providing secure transactions across a network and, more particularly, to methods and systems for watermarking at the packet level.
- Traditional approaches to ensuring the security and integrity of computer networks of any size include, for example, user authentication mechanisms, Internet firewalls and gateways, intrusion detection and reporting systems, installation, update, and configuration deployment systems, and distributed computer management systems.
- User authentication mechanisms provide security by allowing only authorized users to log on to the network devices for which they have been approved. Among other things, these mechanisms may be useful for preventing persons foreign to the organization (“foreign persons”) from inadvertently or maliciously compromising the network integrity from within, by means of, e.g., introducing malicious “Trojan horse” software, or tampering with the authorized installed software base.
- Internet firewalls and gateways filter out potentially unsafe content originating from untrusted sources at the point of entry into a network environment.
- Intrusion detection and reporting systems including “anti-virus” software, aim at limiting the extent of the damage after a breach of integrity has occurred, by means of early detection and hopeful containment of the breach.
- Installation, update, and configuration deployment systems when used in conjunction with the above mechanisms, ensure that the security software is up-to-date in order to respond against the most recent attacks as they are discovered.
- Distributed computer management systems ensure that all devices on a network have an approved configuration and only run approved applications.
- an internal threat is an authorized user that brings his or her own personal laptop or handheld computer and configures it to interoperate with the corporate network. Most networks do not authenticate the machines that are connected to them, or do so in such a way that the security credentials can easily be replicated across machines, thereby allowing the network to become infected.
- a further example of an internal threat is a hacker that exploits the poor security of existing wireless network offerings to gain access to a nearby corporate wireless network. Even though the trespasser is probably unable to log on to the network, lacking a valid password, the integrity of the network may still be potentially compromised by his or her activities.
- a stream of watermark bits is generated.
- a plurality of watermarks is generated, each of the plurality of watermarks comprising an index number and a portion of the stream of watermark bits.
- the watermarks are inserted into the headers of a plurality of outgoing packets.
- the plurality of outgoing packets are received and it is determined if a received packet is valid based on the watermark in the header of the received packet.
- FIG. 1 is a high level block diagram of an exemplary client-side system for practicing systems and methods consistent with the present invention
- FIG. 2 is a high level block diagram of an exemplary server-side system for practicing systems and methods consistent with the present invention
- FIG. 3 shows one exemplary method for watermarking outgoing packets consistent with the present invention
- FIG. 4 shows one exemplary method for verifying incoming watermarked packets consistent with the present invention
- FIG. 5 illustrates one embodiment of a client-server system consistent with the present invention.
- FIG. 6 shows, in more detail, an example of a client-server system interconnected through the network.
- the present invention provides methods and systems for addressing the threats posed to a computer network environment that may be created by the connection of potentially unsafe devices to, and from within, the network environment.
- conventional networks may comprise “servers” and “clients.”
- servers are the devices in a network that provide data
- clients are other machines in the network that request data.
- servers are protected against direct user tampering, but may be subject to internal attacks coming from the various clients that connect to the network.
- Systems and methods consistent with the present invention protect servers against such internal network attacks.
- client aspects and “server” aspects.
- server aspects of the present invention
- client aspects and “server” aspects.
- client aspects and “server” aspects.
- server aspects of the invention
- the same machine in a network may act as both a client and a server.
- the same machine may, for example, work as a client in one transaction, but then operate as a server in a different transaction. This may occur, for example, when machines are interconnected as peers in a work group.
- both the client and the server aspects of the invention described therein may be practiced on the same machine.
- a client is determined to be “clean,” that is, not containing a virus, Trojan horse, malicious software, or is otherwise secure.
- the clean machine is associated with a secret token that acts as a cryptographic seal of authenticity.
- the secret token may take the form of, for example, a cryptographic key, a secret token, or a digital certificate.
- the determination that a client is clean may occur upon initial setup of a client by an authorized administrator or during operation by, for example, an automatic or manual process that inspects and validates the machine state or configuration.
- the newly configured machine may also be equipped with a configuration monitoring system, which can monitor and mediate system activity.
- the configuration monitoring system may be integrated at the highest privilege level within the operating system and may ascertain that no unauthorized change has been effected or unauthorized application installed.
- the configuration monitoring system may act in accordance with a security policy in force in the network. If an anomaly or unauthorized action is detected, the integrity of the machine configuration or of the security mechanism itself may become untrustworthy, so the configuration monitoring system may destroy the secret token for this particular machine.
- a communications monitoring system may be used, on the client machine, to intercept outgoing information packets. As long as the secret token is present, the communications monitor may use it to cryptographically watermark outgoing packets.
- the watermarking is transparent to the underlying protocol, i.e., it does not affect the content of the packets, and does not interfere with the proper working of the communication protocols in case the receiving end is not equipped to recognize the watermarks.
- a similar communications monitor may be set to intercept and filter incoming packets as close as possible to the point of entry. Thereafter, the communications monitor only relays to other functions, such as higher-level services or applications, those packets that bear a valid and current watermark. The non-watermarked packets may be simply discarded.
- a system consistent with the present invention may comprise a client side and a server side.
- the client side and the server side may be present in the same machine if, for example, the machine is to operate as both a trusted client and a server on the protected network.
- FIG. 1 is a high level block diagram of an exemplary client-side system for practicing systems and methods consistent with the present invention.
- a client comprises a configuration monitoring module 110 , a communications monitoring module 120 , and a watermarking module 130 .
- Session table 170 stores active sessions and can be queried by other modules to determine if a particular session is active.
- Configuration monitoring module 110 may monitor the configuration of any number of applications 140 , 141 , 142 , . . . 14 n and of operating system kernel 150 running on the client. Such monitoring may be, for example, constant, periodic, or may be triggered by events, such as a request to use secret token 115 by watermarking module 130 , or other events that may result in a configuration change. Examples of events that may cause potentially threatening configuration changes include, without being limited to:
- Configuration monitoring module 110 also safeguards the secret token 115 , by monitoring the configuration of applications 140 , 141 , 142 , . . . 14 n , and of operating system kernel 150 , detecting changes to the configurations, and destroying secret token 115 or otherwise blocking its use, if a potentially threatening change to a configuration is detected.
- the secret token may take the form of for example, a cryptographic key, a secret token, or a digital certificate.
- Configuration monitoring module 110 may be implemented using a combination of techniques commonly known to those skilled in the art, and services provided by common host operating systems.
- the Windows Cryptographic API provides support for storing secret data on the local machine in a keyless, yet obfuscated manner.
- configuration monitoring module 110 may be launched during the start-up sequence, at which time it verifies the integrity of the current configuration (such as, by comparing it to a cryptographically-signed reference specification).
- Communications monitoring module 120 intercepts outgoing packets (such as IP packets, for systems communicating via the Internet Protocol) and checks to see if a secure communications session is still available. If a secure communications session has been established with the server, communications monitoring module 120 sends the packets to watermarking module 130 for tagging with a cryptographic watermark.
- this module (and its counterpart on the server side, communications monitoring module 220 ) may reside at the base of the communication stack within the operating system kernel and may depend on the specifics of the operating system or the networking protocol in use. For example, communications monitoring modules 120 and 220 may be low-level IP stack monitors in charge of intercepting the outgoing or incoming IP traffic.
- communications monitoring modules 120 and 220 are inserted to reside within the IP stack of the host operating system in such a way as to be activated whenever an IP segment or packet is to be transmitted or received. Communications monitoring modules 120 and 220 may then initiate watermarking-related operations by making appropriate calls to the watermarking module 130 and/or watermark verification module 230 . In certain embodiments, both modules may reside within the kernel in an actual implementation.
- One exemplary implementation of an interface between a low-level IP stack monitor and watermarking module 130 may be found in Appendix A.
- communications monitoring modules 120 and 220 may be inserted into modern versions of the FreeBSD kernel, which is a variant of Unix. Communications monitoring modules 120 and 220 may then be compiled as a run-time loadable kernel module, which attaches to the kernel-supplied hooks into the IP stack, originally designed to accommodate external packet filters or firewalls. In certain operating systems, such as Microsoft Windows, the kernel source code may be unavailable. In such implementations, communications monitoring modules 120 and 220 may be loaded alongside an operating kernel, and inserted into the running kernel by redirecting internal IP-stack kernel system calls, in a manner familiar to those skilled in the art.
- Configuration monitoring module 110 also provides secret token 115 to watermarking module 130 as needed.
- Watermarking module 130 receives packets from communications module 120 and communicates with configuration monitoring module 110 to determine if secret token 115 is still available for use in watermarking packets.
- Watermarking module 130 may initiate, maintain, and, if necessary, restore, a shared secret authentication state with each server the client is communicating with.
- this module is independent of the operating system, although it may optionally communicate with a network-wide security infrastructure (such as a Kerberos interface or public-key infrastructure (PKI) 135 ) to obtain server-specific key material, such as during the initial authentication data sent upon first communicating with a new server.
- a network-wide security infrastructure such as a Kerberos interface or public-key infrastructure (PKI) 135
- FIG. 2 is a high level block diagram of an exemplary server-side system for practicing systems and methods consistent with the present invention.
- the server-side system is composed of a communications monitoring module 220 and a watermark verification module 230 .
- the server-side system may also comprise a policy module 270 .
- Communications monitoring module 220 intercepts incoming network traffic, and filters it before providing it to the rest of the system and/or applications running on the server. In at least one embodiment, communications monitoring module 220 filters incoming traffic based on watermark validity. In certain embodiments, both module 220 and its namesake on the client side (module 120 ) may reside at a low level within the operating system of the server and client, respectively. The operation of these modules may also vary depending on the networking protocol in use.
- Watermark verification module 230 may be called by communications monitoring module 220 . Watermark verification module 230 verifies the validity of the watermarks associated with incoming packets, and determines whether the bearing packets should be allowed to proceed, or be dropped. In certain embodiments, this determination is optionally based on a security policy. This module may optionally interact with a network-wide security infrastructure, for example, to obtain client-specific key material used during the validation of the initial authentication data received from a client.
- An optional security policy module 270 may be used to specify exceptions to the watermark-based filtering scheme in order, for example, to allow some or all incoming packets to be allowed to proceed, even without a valid watermark.
- an-exemplary policy may state that all Dynamic Host Configuration Protocol (DHCP) requests and Domain Name System (DNS) queries should be allowed to proceed, even without a valid watermark.
- DHCP Dynamic Host Configuration Protocol
- DNS Domain Name System
- the DHCP is an Internet protocol for automating the configuration of computers that use TCP/IP and can be used to automatically assign IP addresses, deliver TCP/IP stack configuration parameters, and provide other configuration information.
- DNS is used to translate between domain names and IP addresses and control Internet email delivery and location of web sites.
- Methods and systems consistent with the present invention construct watermarks that are compatible with network transport protocols, such as Internet Protocol, by creating a covert channel in the packet header that is non-disruptive to the standards of various transport protocols. Communications may begin with a special packet recognized only by compliant servers. Thereafter, subsequent packets in a session are transparently watermarked using available bytes in the header, albeit in such a way that links them in a sequence originating in the initial packet.
- network transport protocols such as Internet Protocol
- FIG. 3 shows one exemplary method for watermarking outgoing packets consistent with the present invention.
- a client prepares to transmit a packet to a server.
- the request to send a packet is intercepted (step 310 ).
- the packet may be intercepted, for example, by communications monitoring module 120 of FIG. 1 .
- the communications monitoring module checks to see if the client already has established a secure communication session with the target server by, for example, checking the active sessions stored in table 170 (step 320 ). If the client has not yet established a secure communication session with the server, such as when starting communication with a server for the first time, the client initiates a secure communication session (step 325 ).
- the originating client sends a packet containing authentication/synchronization data to the server (step 330 ).
- the authentication/synchronization data may be based on the secret token of the client (assuming that it has not been discarded by the configuration verification subsystem).
- the authentication/synchronization data may be constructed based on single-pass symmetric or asymmetric encrypted key exchange techniques as known in the art.
- construction of the authentication/synchronization data using a symmetric cipher or message authentication code (MAC), for example may be preferred, such as in the case where all servers are restricted devices that may be entrusted with the knowledge of the secret tokens provided to the clients (e.g., centrally administered corporate servers out of reach of ordinary users).
- MAC message authentication code
- use of an asymmetric cipher or key exchange scheme may be preferred or even mandated depending on the application.
- Use of an asymmetric cipher may allow the authentication mechanism to work even though the servers are not entrusted with copies of the client tokens.
- the authentication/synchronization data may be constructed based on some or all of the following elements: the client secret token; the server public key, if applicable; the client network address (and port, if applicable); the server network address (and port, if applicable); the current time; and a cryptographic salt.
- the authentication/synchronization data proves to the server, in a cryptographically strong way, that the client still possesses its secret token (typically without revealing it), which is a means for indicating that data from the client is coming from a safe and approved configuration.
- This authentication/synchronization data may also be used to establish a cryptographically strong shared secret session state between the client and the server, which the subsequent packet watermarks can leverage.
- the client Upon sending the initial synchronization packet, the client constructs the corresponding shared cipher state, and stores it for future use. This information may be stored, for example, in table 260 of FIG. 2 , which may be lookup table, wherein the information is stored under the server designation (e.g., indexed by address and port).
- the server Upon receiving the initial synchronization packet, the server authenticates the information by, for example, verifying that the time stamp is current and the claimed source and destination addresses are correct (see, for example, step 425 of FIG. 4 ). The server may then use the received data to construct the shared stream cipher state, as will be discussed in more detail below. Table 260 , therefore, indicates whether a particular session is an active session.
- watermarking module 130 may query configuration monitoring module for the status of secret token 115 .
- configuration monitoring module 110 has detected a potentially threatening change to a configuration, signaling perhaps that the client is no longer “clean,” configuration monitoring module 115 may have destroyed or rendered unavailable secret token 115 .
- the packets may not be watermarked, but may be transmitted to the target server (step 340 ).
- a watermark may be computed based on the secret token (step 345 ) and the watermark may be attached to one or more packets (step 350 ). Thereafter, the watermarked packets may be sent to the server (step 355 ).
- the initial special packet is used to set up a shared secret session key from the client to the server.
- the shared secret session key may then be used to generate a sequence of bits to be used as watermarks for the regular data packets in the session.
- packets may, for example, be a stream generated using a stream cipher such as RC4, a block cipher such as 3DES in CBC mode, or other equivalent pseudo-random stream generating techniques.
- the stream may be pseudo-random. Techniques for generating the stream may be implemented in software or hardware.
- each outgoing packet to the designated server is transparently watermarked with cipher stream data by replacing a certain number of bits of header information with an equivalent number of bits from the generated stream.
- the amount of data added to each packet may vary according to underlying packet format. In the Internet Protocol, for example, two bytes or sixteen bits of watermark can be transparently inserted in each data packet using methods described herein.
- the watermarks are generated sequentially from the initial state of the stream cipher (and thus differ from one packet to the next).
- each watermark in a given sequence may be associated with an index number, starting at 0 (thus, in this example, 0 is the index of the synchronization packet, 1 is the index of the watermark attached with the first data packet, and so on).
- the client generates watermarks in increasing natural order of index number.
- the value of the data used to watermark the packets does not depend on the data payload of the packet to which it is attached. In alternative embodiments, however, the watermark may be constructed to cryptographically depend on the packet content, thereby ensuring the integrity of such content.
- the watermarking approach allows compliant servers to gain assurance of package integrity without breaking backward compatibility with non-compliant servers, thereby allowing clients to employ this technique without knowing whether the recipient is equipped with the technology to recognize the watermarks.
- the watermarks may be constructed using at least a portion of a MAC, instead of the actual cipher stream data, where the MAC is derived from the packet content data to protect, and is keyed by the cipher stream data it replaces, as those skilled in the art will appreciate.
- payload-independent watermarks allow the underlying operating system to fully exploit the direct memory access (DMA) capabilities of the networking hardware, whereby the packet payload may be directly copied from main memory to the networking hardware buffer, without being seen by the CPU. Computing a MAC would otherwise force the CPU to access the payload.
- DMA direct memory access
- FIG. 4 shows one exemplary method for verifying incoming watermarked packets consistent with the present invention.
- incoming packets may be intercepted (step 410 ) such as by communications monitoring module 220 of FIG. 2 .
- Communications monitoring module 220 may determine if the server has an active session with the client that sent the intercepted packet (step 415 ). If the server has no active session with the transmitting client, the server determines whether the incoming packet is authentication/synchronization data sent by the client to establish a session (step 420 ).
- the server may authenticate the client information and establish a secure session (step 425 ).
- the server may authenticate the information by, for example, verifying that the time stamp is current and the claimed source and destination addresses are correct.
- the server may then use the received data to construct the shared stream cipher state, which it may then associate with the client's address and port.
- the server may also store the authentication/synchronization data for use in computing
- each client maintains a table of all current authenticated sessions indexed by server addresses (optionally including the ports) in table 170 .
- Table 170 is periodically purged of any stale entry it may contain. “Stale” entries may be determined, for example, based on the time of last communication or other heuristics. If an active session is mistakenly purged, the client may be caused to re-synchronize with the server upon sending the next packet.
- the server similarly maintains a table of active sessions indexed by client network addresses (and, optionally, ports) in table 260 .
- the packet may simply be discarded as untrusted (step 430 ).
- the watermark may be extracted from the intercepted packet (step 440 ).
- the watermark may either be extracted by, for example, communications monitoring module 220 (and sent to watermark verification module 230 ) or directly by watermark verification module 230 if the entire packet is sent to watermark verification module 230 for processing.
- the watermark may be compared to “forward” and “backward” windows of expected watermarks maintained or generated by the server (step 445 ).
- each watermark in a given sequence may be associated with an index number, such that watermarks are generated in an increasing natural order of the index numbers.
- the server may at all times maintain a record of or pointer to the index number of the highest numbered valid watermark it has received (from a particular client). This index number may also be called the “pivot.”
- the server may also maintain or generate two small lists, or windows, associating watermarks with their index numbers.
- a forward window comprises the watermarks whose index numbers immediately follow the pivot.
- a backward window comprises watermarks whose index numbers immediately precede the pivot.
- the server may generate the expected watermarks in the forward and backward windows based on the authentication/synchronization received from the client.
- the watermark may be compared with the contents of both windows, so as to determine the index number of the match, if any (step 445 ). If a match is found in the forward window (step 450 ), the pivot may be increased accordingly, and the forward and backward windows may be adjusted based on the new pivot (step 460 ). For example, the forward window entries with index numbers between the old and the new value of the pivot may be displaced to the backward window, after which the forward window may be replenished with an appropriate number of new watermarks ahead of the current pivot, and the backward window may be trimmed of its oldest entries. If a match is found in the backward window (step 455 ), the matching entry may be removed from that window (the pivot and the forward window remain unchanged).
- the watermark is accepted as valid (and therefore allowed to proceed) only if there was a match in either window (step 470 ). If no match was detected in step 450 , the packet is discarded (step 430 ).
- an additional mechanism is provided, whereby, upon receiving an invalid watermark from a client, the server replies with a special re-authentication request (e.g., formatted as a UDP packet to an otherwise unused port, or using in any other method). Upon receiving such request, the client may choose to restart the entire unidirectional authentication process, in order to achieve a fresh shared state with the server.
- a special re-authentication request e.g., formatted as a UDP packet to an otherwise unused port, or using in any other method.
- This section describes the systems aspects of transparently watermarking Internet Protocol packets, in a backward compatible fashion.
- Two orthogonal approaches are presented, which may be used independently or in tandem, to afford the greater watermarking capacity.
- IP protocol provides for a 16-bit segment ID field in the IP header, that is a random value attributed and attached upon creation of the segment, and that is preserved in all packets, which the segment is broken up into, during transit.
- IP packet headers also contain “offset” and “length” fields, which are used to indicate the relative position of the packet within the segment, as well as a “next” flag, which is used to indicate whether the bearer is the last packet of the segment, or not.
- IP packet headers also contain two 32-bit source and destination address fields, as well as a rarely used 8-bit TOS field (originally meant to specify terms of service options).
- One exemplary method of watermarking consistent with the present invention is direct watermarking using the segment ID field.
- This exemplary watermarking method exploits the segment ID mechanism by substituting a watermark for the segment ID field (the specific value of which is generated according to the methods described elsewhere in this document). If the segment must be divided into several packets, all packets inherit the same watermark from the modified segment ID field, in order to comply with the requirements of the IP protocol.
- outgoing IP packets are intercepted after the segment header is constructed.
- the outgoing IP packets may be intercepted by, for example, communications monitoring module 120 of FIG. 1 .
- communications monitoring module 120 of FIG. 1 At this stage, both the source and destination addresses are known and therefore may be used in constructing the watermark.
- the ID field of incoming segments is extracted following the stage in which complete segments are reassembled from incoming packets, but preceding the stage in which the reassembled packet is transmitted to higher-level functions for further processing (which may include operating system and application-level services).
- Incoming segments may be intercepted by, for example, communications monitoring module 220 of FIG. 2 .
- the watermark may then be validated by, for example, watermark verification module 230 , and the segment accordingly approved or discarded according to the teachings of the present invention.
- a second exemplary method for watermarking consistent with the present invention involves fragmented watermarking using the TOS field.
- This watermarking approach exploits the rarely used (currently 8-bit) TOS field in IP headers, conjointly with the fragmentation mechanism, in order to provide at least 32 bits (4 bytes) of watermark per IP segment.
- the method works by breaking up the target segment into a number of unambiguously ordered packets, encoding 8 bits of watermark in each of these packets. Any segment with non-empty payload may be broken into some number of unambiguously ordered packets, recognized by unique combinations of payload length, offset, and “next” flag.
- Exemplary types of packets include: 1) a leading packet with empty payload (hence, having length 0), offset 0, and the “next” flag set; 2) a second packet containing some or all of the actual segment payload (hence, of non-zero length), offset 0, and the “next” flag set; 3) optional packets containing the remainder of the segment payload, having non-zero length, non-zero offset, and the “next” flag set; 4) a penultimate packet with empty payload, hence, having zero length, non-zero offset, and the “next” flag set; and 5) a final packet with empty payload, hence, having zero length, non-zero offset, and the “next” flag reset.
- the TOS field method may be combined with the segment ID field method to allow use of a larger number of bits of watermark data per segment. For example, at the current time, the protocol uses 16 bits in the segment ID field and 8 bits in the TOS field, the two methods used together would allow 24 bits (or three bytes) of data per segment to be used in the watermarking process.
- FIG. 5 illustrates one embodiment of a system consistent with the present invention.
- any conventional computer system may be programmed to support the principles of the present invention.
- the system in FIG. 5 represents a computer network 500 that comprises one or more client computers 504 and 514 and one or more servers 540 and 544 interconnected via network 502 .
- client and server are used to refer to a computer's general role as a requester of data (client) or provider of data (server), however each computer may request data in one transaction and provide data in another transaction, thus changing the computer's role from client to server.
- Client 504 may also be a thin client, which is generally understood to be a network computer without a hard disk drive.
- Client 504 may also be a personal digital assistant (“PDA”), such as a PalmPilot, a cellular phone, or other computerized device. As shown in FIG. 5 , client 504 may be connected to one or more servers by a suitable bus or wireless connection.
- PDA personal digital assistant
- a software application operating on client 504 may place a request that involves data stored on or instructions that are executed on Server A 540 . Since client 504 is directly connected to Server A 540 , for example, through a local area network, this request would not normally result in a transfer of data or instructions over what is shown as “network” of FIG. 5 .
- the “network” of FIG. 5 represents, for example, the Internet, which is an interconnection of networks.
- a different request may involve data or instructions stored on Server B 544 . In this case, the data may be transferred from Server B 544 through the network to Server A 540 and, finally, to computer 502 .
- the distance between Server A 540 and Server B 544 may be very long, e.g. across states, or very short, e.g., a few inches. Further, in traversing the network the data may be transferred through several intermediate servers and many routing devices, such as bridges and routers.
- FIG. 6 shows, in more detail, an example of a client-server system interconnected through network 600 .
- a server system 622 is interconnected through network 600 to client system 620 .
- Client system 620 includes conventional components such as a processor 624 , memory 625 (e.g. RAM), a bus 626 which couples processor 624 and memory 625 , a mass storage device 627 (e.g. a magnetic hard disk or an optical storage disk) coupled to processor 624 and memory 625 through an I/O controller 628 and a network interface 629 , such as a conventional modem.
- processor 624 e.g. RAM
- memory 625 e.g. RAM
- bus 626 which couples processor 624 and memory 625
- mass storage device 627 e.g. a magnetic hard disk or an optical storage disk
- Server system 622 also includes conventional components such as a processor 634 , memory 635 (e.g. RAM), a bus 636 which couples processor 634 and memory 635 , a mass storage device 637 (e.g. a magnetic or optical disk) coupled to processor 634 and memory 635 through an I/O controller 638 and a network interface 639 , such as a conventional modem.
- processor 634 e.g. RAM
- memory 635 e.g. RAM
- bus 636 which couples processor 634 and memory 635
- mass storage device 637 e.g. a magnetic or optical disk
- Processors 624 and 634 may be microprocessors such as the Pentium® family microprocessors manufactured by Intel Corporation. However, any other suitable microprocessor, micro-, mini-, or mainframe computer, may be used.
- Memories 625 and 635 may include a random access memory (RAM), a read-only memory (ROM), a video memory, or mass storage.
- Mass storage 627 and 637 may include both fixed and removable media (e.g., magnetic, optical, or magnetic optical storage systems or other available mass storage technology).
- Memories 625 and 635 may contain a program, such as an operating system, an application programming interface (API), and other instructions for performing the methods consistent with the invention.
- API application programming interface
- the present invention may also be embodied as computer-readable media that include program instructions or program code for performing various computer-implemented operations based on the methods of the present invention.
- the program instructions may be those specially designed and constructed for the purposes of the invention, or they may be of the kind well-known and available to those having skill in the computer software arts. Examples of program instructions include machine code, such as produced by a compiler, and files containing a high level code that can be executed by the computer using, for example, an interpreter or equivalent execution engine to facilitate execution of high level code.
- Alternative embodiments will become apparent to those skilled in the art to which the present invention pertains without departing from its spirit and scope. Accordingly, the scope of the present invention is defined by the appended claims rather than the foregoing description.
- APPENDIX A // File: gbLogicAPI.h #ifndef _GBLOGICAPI_H #define _GBLOGICAPI_H /* * Data types */ // return status for all GB watermarking logic calls typedef enum ⁇ GB_nil, // unexpected error condition GB_ok, // success condition GB_deny, // incoming segment to be dropped GB_prepare, // client monitor is to perform synch GB_reauth, // serv. mon.
Abstract
Description
- This application is a continuation of U.S. application Ser. No. 10/627,270, filed Jul. 25, 2003, which claims priority to U.S. Provisional Application No. 60/398,564, entitled “SYSTEM AND METHODS FOR TRANSPARENT CONFIGURATION AUTHENTICATION OF NETWORKED DEVICES,” filed Jul. 26, 2002, both of which are expressly incorporated herein by reference in their entireties.
- This invention relates generally to methods and systems for providing secure transactions across a network and, more particularly, to methods and systems for watermarking at the packet level.
- The ubiquity of networked computing environments, and the ever increasing reliance thereupon, has created a demand for network security products that guard against attacks from outside the network, such as computer worms or viruses, distributed denial of service attacks, and targeted criminal computer trespassing. Often ignored when discussing network security, but just as dangerous and disruptive, are attacks from inside the network. The proliferation of powerful portable networked computers, such as laptops, handheld devices, and personal digital assistants (PDAs), makes it particularly easy for an insider to connect a personal machine to a restricted network and unknowingly spread malicious programs, thereby compromising the integrity of the network.
- Traditional approaches to ensuring the security and integrity of computer networks of any size include, for example, user authentication mechanisms, Internet firewalls and gateways, intrusion detection and reporting systems, installation, update, and configuration deployment systems, and distributed computer management systems. User authentication mechanisms provide security by allowing only authorized users to log on to the network devices for which they have been approved. Among other things, these mechanisms may be useful for preventing persons foreign to the organization (“foreign persons”) from inadvertently or maliciously compromising the network integrity from within, by means of, e.g., introducing malicious “Trojan horse” software, or tampering with the authorized installed software base. Internet firewalls and gateways filter out potentially unsafe content originating from untrusted sources at the point of entry into a network environment. Intrusion detection and reporting systems, including “anti-virus” software, aim at limiting the extent of the damage after a breach of integrity has occurred, by means of early detection and hopeful containment of the breach.
- Installation, update, and configuration deployment systems, when used in conjunction with the above mechanisms, ensure that the security software is up-to-date in order to respond against the most recent attacks as they are discovered. Distributed computer management systems ensure that all devices on a network have an approved configuration and only run approved applications.
- All of the security mechanisms described above operate on the premise that if a networked environment is defended from outside threats, the entire environment will remain safe. These security mechanisms, however, are useless against internal threats such as the following. Say, for example, an authorized user inadvertently introduces a computer virus on an authorized machine by opening an infected piece of email from a business partner. In this case, the virus takes control of the machine and proceeds to replicate over the entire network. Another such internal threat is, for example, an authorized user that takes home an authorized laptop computer and connects it back to the internal network the following day. In the meantime, the laptop became infected with a virus, which has spread to the network from the inside. Yet another example of an internal threat is an authorized user that brings his or her own personal laptop or handheld computer and configures it to interoperate with the corporate network. Most networks do not authenticate the machines that are connected to them, or do so in such a way that the security credentials can easily be replicated across machines, thereby allowing the network to become infected. A further example of an internal threat is a hacker that exploits the poor security of existing wireless network offerings to gain access to a nearby corporate wireless network. Even though the trespasser is probably unable to log on to the network, lacking a valid password, the integrity of the network may still be potentially compromised by his or her activities.
- These examples illustrate the necessity of some form of protection against internal threats, whether the threats result from inadvertence or malice.
- According to at least one aspect of the invention, methods and systems are disclosed for providing secure transmissions across a network comprising a transmitting device and a receiving device. At the transmitting device, a stream of watermark bits is generated. Next, a plurality of watermarks is generated, each of the plurality of watermarks comprising an index number and a portion of the stream of watermark bits. The watermarks are inserted into the headers of a plurality of outgoing packets. At the receiving device, the plurality of outgoing packets are received and it is determined if a received packet is valid based on the watermark in the header of the received packet.
- The accompanying drawings, which are incorporated in and constitute a part of the specification, illustrate exemplary implementations and embodiments of the invention and, together with the detailed description, serve to explain the principles of the invention. In the drawings,
-
FIG. 1 is a high level block diagram of an exemplary client-side system for practicing systems and methods consistent with the present invention; -
FIG. 2 is a high level block diagram of an exemplary server-side system for practicing systems and methods consistent with the present invention; -
FIG. 3 shows one exemplary method for watermarking outgoing packets consistent with the present invention; -
FIG. 4 shows one exemplary method for verifying incoming watermarked packets consistent with the present invention; -
FIG. 5 illustrates one embodiment of a client-server system consistent with the present invention; and -
FIG. 6 shows, in more detail, an example of a client-server system interconnected through the network. - Reference will now be made in detail to exemplary implementations and embodiments of the invention, examples of which are illustrated in the accompanying the drawings. Wherever possible, the same reference numbers will be used throughout the drawings to refer to the same or like parts.
- The present invention provides methods and systems for addressing the threats posed to a computer network environment that may be created by the connection of potentially unsafe devices to, and from within, the network environment. It is well known that conventional networks may comprise “servers” and “clients.” Generally speaking, “servers” are the devices in a network that provide data and “clients” are other machines in the network that request data. In most cases, servers are protected against direct user tampering, but may be subject to internal attacks coming from the various clients that connect to the network. Systems and methods consistent with the present invention protect servers against such internal network attacks.
- The present invention is described herein in terms of “client” aspects and “server” aspects. However, those skilled in the art will understand that, in some cases, the same machine in a network may act as both a client and a server. The same machine may, for example, work as a client in one transaction, but then operate as a server in a different transaction. This may occur, for example, when machines are interconnected as peers in a work group. In such cases, both the client and the server aspects of the invention described therein may be practiced on the same machine.
- The principles of the present invention may be described generally as follows. First, a client is determined to be “clean,” that is, not containing a virus, Trojan horse, malicious software, or is otherwise secure. Once determined to be clean, the clean machine is associated with a secret token that acts as a cryptographic seal of authenticity. The secret token may take the form of, for example, a cryptographic key, a secret token, or a digital certificate. The determination that a client is clean may occur upon initial setup of a client by an authorized administrator or during operation by, for example, an automatic or manual process that inspects and validates the machine state or configuration.
- The newly configured machine may also be equipped with a configuration monitoring system, which can monitor and mediate system activity. The configuration monitoring system may be integrated at the highest privilege level within the operating system and may ascertain that no unauthorized change has been effected or unauthorized application installed. The configuration monitoring system may act in accordance with a security policy in force in the network. If an anomaly or unauthorized action is detected, the integrity of the machine configuration or of the security mechanism itself may become untrustworthy, so the configuration monitoring system may destroy the secret token for this particular machine.
- A communications monitoring system may be used, on the client machine, to intercept outgoing information packets. As long as the secret token is present, the communications monitor may use it to cryptographically watermark outgoing packets. In certain embodiments of the present invention, the watermarking is transparent to the underlying protocol, i.e., it does not affect the content of the packets, and does not interfere with the proper working of the communication protocols in case the receiving end is not equipped to recognize the watermarks.
- On the server side, a similar communications monitor may be set to intercept and filter incoming packets as close as possible to the point of entry. Thereafter, the communications monitor only relays to other functions, such as higher-level services or applications, those packets that bear a valid and current watermark. The non-watermarked packets may be simply discarded.
- In at least one embodiment, a system consistent with the present invention may comprise a client side and a server side. In certain embodiments, the client side and the server side may be present in the same machine if, for example, the machine is to operate as both a trusted client and a server on the protected network.
-
FIG. 1 is a high level block diagram of an exemplary client-side system for practicing systems and methods consistent with the present invention. As shown inFIG. 1 , in exemplary embodiments, a client comprises aconfiguration monitoring module 110, acommunications monitoring module 120, and awatermarking module 130. Session table 170 stores active sessions and can be queried by other modules to determine if a particular session is active. -
Configuration monitoring module 110 may monitor the configuration of any number ofapplications operating system kernel 150 running on the client. Such monitoring may be, for example, constant, periodic, or may be triggered by events, such as a request to usesecret token 115 by watermarkingmodule 130, or other events that may result in a configuration change. Examples of events that may cause potentially threatening configuration changes include, without being limited to: -
- Anti-virus definition database becoming too old;
- Key system components being tampered with;
- Modification of key system or application binaries;
- Security or configuration parameters being modified;
- Modification of system configuration files or databases;
- Device driver being installed or loaded into the kernel;
- Non-sanctioned application being installed in the main environment (as opposed to within an isolated virtualized safety environment); and
- Security software being uninstalled (such as GreenBorder Internet Security, which provides a transparently isolated virtual environment for untrusted applications).
-
Configuration monitoring module 110 also safeguards thesecret token 115, by monitoring the configuration ofapplications operating system kernel 150, detecting changes to the configurations, and destroyingsecret token 115 or otherwise blocking its use, if a potentially threatening change to a configuration is detected. As mentioned above, the secret token may take the form of for example, a cryptographic key, a secret token, or a digital certificate. -
Configuration monitoring module 110 may be implemented using a combination of techniques commonly known to those skilled in the art, and services provided by common host operating systems. For example, the Windows Cryptographic API provides support for storing secret data on the local machine in a keyless, yet obfuscated manner. In at least one exemplary embodiment,configuration monitoring module 110 may be launched during the start-up sequence, at which time it verifies the integrity of the current configuration (such as, by comparing it to a cryptographically-signed reference specification). -
Communications monitoring module 120 intercepts outgoing packets (such as IP packets, for systems communicating via the Internet Protocol) and checks to see if a secure communications session is still available. If a secure communications session has been established with the server,communications monitoring module 120 sends the packets towatermarking module 130 for tagging with a cryptographic watermark. In certain embodiments of the present invention, this module (and its counterpart on the server side, communications monitoring module 220) may reside at the base of the communication stack within the operating system kernel and may depend on the specifics of the operating system or the networking protocol in use. For example,communications monitoring modules communications monitoring modules Communications monitoring modules watermarking module 130 and/orwatermark verification module 230. In certain embodiments, both modules may reside within the kernel in an actual implementation. One exemplary implementation of an interface between a low-level IP stack monitor andwatermarking module 130 may be found in Appendix A. - In certain embodiments,
communications monitoring modules Communications monitoring modules communications monitoring modules -
Configuration monitoring module 110 also providessecret token 115 towatermarking module 130 as needed.Watermarking module 130, for example, receives packets fromcommunications module 120 and communicates withconfiguration monitoring module 110 to determine ifsecret token 115 is still available for use in watermarking packets.Watermarking module 130 may initiate, maintain, and, if necessary, restore, a shared secret authentication state with each server the client is communicating with. In certain embodiments, this module is independent of the operating system, although it may optionally communicate with a network-wide security infrastructure (such as a Kerberos interface or public-key infrastructure (PKI) 135) to obtain server-specific key material, such as during the initial authentication data sent upon first communicating with a new server. -
FIG. 2 is a high level block diagram of an exemplary server-side system for practicing systems and methods consistent with the present invention. In exemplary embodiments, the server-side system is composed of acommunications monitoring module 220 and awatermark verification module 230. Optionally, the server-side system may also comprise apolicy module 270. -
Communications monitoring module 220 intercepts incoming network traffic, and filters it before providing it to the rest of the system and/or applications running on the server. In at least one embodiment,communications monitoring module 220 filters incoming traffic based on watermark validity. In certain embodiments, bothmodule 220 and its namesake on the client side (module 120) may reside at a low level within the operating system of the server and client, respectively. The operation of these modules may also vary depending on the networking protocol in use. -
Watermark verification module 230 may be called bycommunications monitoring module 220.Watermark verification module 230 verifies the validity of the watermarks associated with incoming packets, and determines whether the bearing packets should be allowed to proceed, or be dropped. In certain embodiments, this determination is optionally based on a security policy. This module may optionally interact with a network-wide security infrastructure, for example, to obtain client-specific key material used during the validation of the initial authentication data received from a client. - An optional
security policy module 270 may be used to specify exceptions to the watermark-based filtering scheme in order, for example, to allow some or all incoming packets to be allowed to proceed, even without a valid watermark. For example, an-exemplary policy may state that all Dynamic Host Configuration Protocol (DHCP) requests and Domain Name System (DNS) queries should be allowed to proceed, even without a valid watermark. The DHCP is an Internet protocol for automating the configuration of computers that use TCP/IP and can be used to automatically assign IP addresses, deliver TCP/IP stack configuration parameters, and provide other configuration information. DNS is used to translate between domain names and IP addresses and control Internet email delivery and location of web sites. - Methods and systems consistent with the present invention construct watermarks that are compatible with network transport protocols, such as Internet Protocol, by creating a covert channel in the packet header that is non-disruptive to the standards of various transport protocols. Communications may begin with a special packet recognized only by compliant servers. Thereafter, subsequent packets in a session are transparently watermarked using available bytes in the header, albeit in such a way that links them in a sequence originating in the initial packet.
-
FIG. 3 shows one exemplary method for watermarking outgoing packets consistent with the present invention. To begin, a client prepares to transmit a packet to a server. The request to send a packet is intercepted (step 310). The packet may be intercepted, for example, bycommunications monitoring module 120 ofFIG. 1 . The communications monitoring module checks to see if the client already has established a secure communication session with the target server by, for example, checking the active sessions stored in table 170 (step 320). If the client has not yet established a secure communication session with the server, such as when starting communication with a server for the first time, the client initiates a secure communication session (step 325). - To initiate a secure communication session, the originating client sends a packet containing authentication/synchronization data to the server (step 330). The authentication/synchronization data may be based on the secret token of the client (assuming that it has not been discarded by the configuration verification subsystem). The authentication/synchronization data may be constructed based on single-pass symmetric or asymmetric encrypted key exchange techniques as known in the art. In some embodiments, construction of the authentication/synchronization data using a symmetric cipher or message authentication code (MAC), for example, may be preferred, such as in the case where all servers are restricted devices that may be entrusted with the knowledge of the secret tokens provided to the clients (e.g., centrally administered corporate servers out of reach of ordinary users). In certain embodiments, use of an asymmetric cipher or key exchange scheme may be preferred or even mandated depending on the application. Use of an asymmetric cipher may allow the authentication mechanism to work even though the servers are not entrusted with copies of the client tokens.
- The authentication/synchronization data may be constructed based on some or all of the following elements: the client secret token; the server public key, if applicable; the client network address (and port, if applicable); the server network address (and port, if applicable); the current time; and a cryptographic salt. In general, the authentication/synchronization data proves to the server, in a cryptographically strong way, that the client still possesses its secret token (typically without revealing it), which is a means for indicating that data from the client is coming from a safe and approved configuration. This authentication/synchronization data may also be used to establish a cryptographically strong shared secret session state between the client and the server, which the subsequent packet watermarks can leverage.
- Upon sending the initial synchronization packet, the client constructs the corresponding shared cipher state, and stores it for future use. This information may be stored, for example, in table 260 of
FIG. 2 , which may be lookup table, wherein the information is stored under the server designation (e.g., indexed by address and port). Upon receiving the initial synchronization packet, the server authenticates the information by, for example, verifying that the time stamp is current and the claimed source and destination addresses are correct (see, for example, step 425 ofFIG. 4 ). The server may then use the received data to construct the shared stream cipher state, as will be discussed in more detail below. Table 260, therefore, indicates whether a particular session is an active session. - Once a shared cipher state has been achieved between the client and the server, communications from the client to the server may proceed. Before watermarking of packets may take place, methods consistent with the present invention determine whether the secret token is still available. As discussed herein,
watermarking module 130 may query configuration monitoring module for the status ofsecret token 115. fconfiguration monitoring module 110 has detected a potentially threatening change to a configuration, signaling perhaps that the client is no longer “clean,”configuration monitoring module 115 may have destroyed or rendered unavailablesecret token 115. In this case, the packets may not be watermarked, but may be transmitted to the target server (step 340). - If, however,
secret token 115 is still available (step 335), a watermark may be computed based on the secret token (step 345) and the watermark may be attached to one or more packets (step 350). Thereafter, the watermarked packets may be sent to the server (step 355). - Specifically, the initial special packet is used to set up a shared secret session key from the client to the server. The shared secret session key may then be used to generate a sequence of bits to be used as watermarks for the regular data packets in the session. The sequence used to watermark regular data. packets may, for example, be a stream generated using a stream cipher such as RC4, a block cipher such as 3DES in CBC mode, or other equivalent pseudo-random stream generating techniques. The stream may be pseudo-random. Techniques for generating the stream may be implemented in software or hardware.
- In at least one exemplary embodiment, on the client side, each outgoing packet to the designated server is transparently watermarked with cipher stream data by replacing a certain number of bits of header information with an equivalent number of bits from the generated stream. The amount of data added to each packet may vary according to underlying packet format. In the Internet Protocol, for example, two bytes or sixteen bits of watermark can be transparently inserted in each data packet using methods described herein. In one exemplary embodiment, the watermarks are generated sequentially from the initial state of the stream cipher (and thus differ from one packet to the next). Additionally, each watermark in a given sequence may be associated with an index number, starting at 0 (thus, in this example, 0 is the index of the synchronization packet, 1 is the index of the watermark attached with the first data packet, and so on). Hence, the client generates watermarks in increasing natural order of index number.
- In certain embodiments, the value of the data used to watermark the packets does not depend on the data payload of the packet to which it is attached. In alternative embodiments, however, the watermark may be constructed to cryptographically depend on the packet content, thereby ensuring the integrity of such content.
- Unlike alternative backward-incompatible technologies, such as SSL, the watermarking approach allows compliant servers to gain assurance of package integrity without breaking backward compatibility with non-compliant servers, thereby allowing clients to employ this technique without knowing whether the recipient is equipped with the technology to recognize the watermarks. In at least one such exemplary embodiment, the watermarks may be constructed using at least a portion of a MAC, instead of the actual cipher stream data, where the MAC is derived from the packet content data to protect, and is keyed by the cipher stream data it replaces, as those skilled in the art will appreciate.
- In certain embodiments, payload-independent watermarks allow the underlying operating system to fully exploit the direct memory access (DMA) capabilities of the networking hardware, whereby the packet payload may be directly copied from main memory to the networking hardware buffer, without being seen by the CPU. Computing a MAC would otherwise force the CPU to access the payload.
- The present invention also provides methods and systems to reduce or eliminate the lost, duplicated, or reordered packets that often occur in most computer networks.
FIG. 4 shows one exemplary method for verifying incoming watermarked packets consistent with the present invention. On the receiving end, incoming packets may be intercepted (step 410) such as bycommunications monitoring module 220 ofFIG. 2 .Communications monitoring module 220 may determine if the server has an active session with the client that sent the intercepted packet (step 415). If the server has no active session with the transmitting client, the server determines whether the incoming packet is authentication/synchronization data sent by the client to establish a session (step 420). If the intercepted packet is authentication/synchronization data, the server may authenticate the client information and establish a secure session (step 425). The server may authenticate the information by, for example, verifying that the time stamp is current and the claimed source and destination addresses are correct. The server may then use the received data to construct the shared stream cipher state, which it may then associate with the client's address and port. The server may also store the authentication/synchronization data for use in computing - Authentication of each pair of communicating client and server uses a unique shared secret stream cipher state for the watermark generation and verification. To accommodate this, each client maintains a table of all current authenticated sessions indexed by server addresses (optionally including the ports) in table 170. Table 170 is periodically purged of any stale entry it may contain. “Stale” entries may be determined, for example, based on the time of last communication or other heuristics. If an active session is mistakenly purged, the client may be caused to re-synchronize with the server upon sending the next packet. The server similarly maintains a table of active sessions indexed by client network addresses (and, optionally, ports) in table 260.
- If the intercepted packet is not authentication/synchronization data, or the client cannot be authenticated based on the authentication/synchronization data provided by the intercepted packet (step 425), the packet may simply be discarded as untrusted (step 430).
- If, however, the server already has an active session with the client (step 415), the watermark may be extracted from the intercepted packet (step 440). The watermark may either be extracted by, for example, communications monitoring module 220 (and sent to watermark verification module 230) or directly by
watermark verification module 230 if the entire packet is sent to watermarkverification module 230 for processing. - After the watermark has been extracted, the watermark may be compared to “forward” and “backward” windows of expected watermarks maintained or generated by the server (step 445). As mentioned above, at the client, each watermark in a given sequence may be associated with an index number, such that watermarks are generated in an increasing natural order of the index numbers. In the present invention, the server may at all times maintain a record of or pointer to the index number of the highest numbered valid watermark it has received (from a particular client). This index number may also be called the “pivot.” The server may also maintain or generate two small lists, or windows, associating watermarks with their index numbers. A forward window comprises the watermarks whose index numbers immediately follow the pivot. A backward window comprises watermarks whose index numbers immediately precede the pivot. The server may generate the expected watermarks in the forward and backward windows based on the authentication/synchronization received from the client.
- Whenever the server receives a packet from a client, the watermark may be compared with the contents of both windows, so as to determine the index number of the match, if any (step 445). If a match is found in the forward window (step 450), the pivot may be increased accordingly, and the forward and backward windows may be adjusted based on the new pivot (step 460). For example, the forward window entries with index numbers between the old and the new value of the pivot may be displaced to the backward window, after which the forward window may be replenished with an appropriate number of new watermarks ahead of the current pivot, and the backward window may be trimmed of its oldest entries. If a match is found in the backward window (step 455), the matching entry may be removed from that window (the pivot and the forward window remain unchanged).
- The watermark is accepted as valid (and therefore allowed to proceed) only if there was a match in either window (step 470). If no match was detected in
step 450, the packet is discarded (step 430). - In at least one embodiment, to account for the possibility of severe transient network problems, an additional mechanism is provided, whereby, upon receiving an invalid watermark from a client, the server replies with a special re-authentication request (e.g., formatted as a UDP packet to an otherwise unused port, or using in any other method). Upon receiving such request, the client may choose to restart the entire unidirectional authentication process, in order to achieve a fresh shared state with the server.
- This section describes the systems aspects of transparently watermarking Internet Protocol packets, in a backward compatible fashion. Two orthogonal approaches are presented, which may be used independently or in tandem, to afford the greater watermarking capacity.
- Data transmission over an IP network occurs in logical units, called segments, whose length is variable and is at the discretion of the sender. Depending on their length, segments may be broken down in multiple units called packets, or transmitted atomically as a single packet. Packets belonging to the same segment are reassembled at the receiving end, to reconstitute the original segment; in case of a transmission problem with one of the packets, the entire segment is discarded. In support of this mechanism, the IP protocol provides for a 16-bit segment ID field in the IP header, that is a random value attributed and attached upon creation of the segment, and that is preserved in all packets, which the segment is broken up into, during transit. IP packet headers also contain “offset” and “length” fields, which are used to indicate the relative position of the packet within the segment, as well as a “next” flag, which is used to indicate whether the bearer is the last packet of the segment, or not. In addition to the above, IP packet headers also contain two 32-bit source and destination address fields, as well as a rarely used 8-bit TOS field (originally meant to specify terms of service options).
- One exemplary method of watermarking consistent with the present invention is direct watermarking using the segment ID field. This exemplary watermarking method exploits the segment ID mechanism by substituting a watermark for the segment ID field (the specific value of which is generated according to the methods described elsewhere in this document). If the segment must be divided into several packets, all packets inherit the same watermark from the modified segment ID field, in order to comply with the requirements of the IP protocol.
- On the client side, outgoing IP packets are intercepted after the segment header is constructed. The outgoing IP packets may be intercepted by, for example,
communications monitoring module 120 ofFIG. 1 . At this stage, both the source and destination addresses are known and therefore may be used in constructing the watermark. - On the server side, the ID field of incoming segments is extracted following the stage in which complete segments are reassembled from incoming packets, but preceding the stage in which the reassembled packet is transmitted to higher-level functions for further processing (which may include operating system and application-level services). Incoming segments may be intercepted by, for example,
communications monitoring module 220 ofFIG. 2 . The watermark may then be validated by, for example,watermark verification module 230, and the segment accordingly approved or discarded according to the teachings of the present invention. - A second exemplary method for watermarking consistent with the present invention involves fragmented watermarking using the TOS field. This watermarking approach exploits the rarely used (currently 8-bit) TOS field in IP headers, conjointly with the fragmentation mechanism, in order to provide at least 32 bits (4 bytes) of watermark per IP segment.
- The method works by breaking up the target segment into a number of unambiguously ordered packets, encoding 8 bits of watermark in each of these packets. Any segment with non-empty payload may be broken into some number of unambiguously ordered packets, recognized by unique combinations of payload length, offset, and “next” flag. Exemplary types of packets include: 1) a leading packet with empty payload (hence, having length 0), offset 0, and the “next” flag set; 2) a second packet containing some or all of the actual segment payload (hence, of non-zero length), offset 0, and the “next” flag set; 3) optional packets containing the remainder of the segment payload, having non-zero length, non-zero offset, and the “next” flag set; 4) a penultimate packet with empty payload, hence, having zero length, non-zero offset, and the “next” flag set; and 5) a final packet with empty payload, hence, having zero length, non-zero offset, and the “next” flag reset.
- The TOS field method may be combined with the segment ID field method to allow use of a larger number of bits of watermark data per segment. For example, at the current time, the protocol uses 16 bits in the segment ID field and 8 bits in the TOS field, the two methods used together would allow 24 bits (or three bytes) of data per segment to be used in the watermarking process.
-
FIG. 5 illustrates one embodiment of a system consistent with the present invention. In fact, any conventional computer system may be programmed to support the principles of the present invention. The system inFIG. 5 represents acomputer network 500 that comprises one ormore client computers more servers 540 and 544 interconnected vianetwork 502. In this specification, the terms “client” and “server” are used to refer to a computer's general role as a requester of data (client) or provider of data (server), however each computer may request data in one transaction and provide data in another transaction, thus changing the computer's role from client to server.Client 504 may also be a thin client, which is generally understood to be a network computer without a hard disk drive.Client 504 may also be a personal digital assistant (“PDA”), such as a PalmPilot, a cellular phone, or other computerized device. As shown inFIG. 5 ,client 504 may be connected to one or more servers by a suitable bus or wireless connection. - In some embodiments, a software application operating on
client 504 may place a request that involves data stored on or instructions that are executed on Server A 540. Sinceclient 504 is directly connected to Server A 540, for example, through a local area network, this request would not normally result in a transfer of data or instructions over what is shown as “network” ofFIG. 5 . The “network” ofFIG. 5 represents, for example, the Internet, which is an interconnection of networks. A different request may involve data or instructions stored onServer B 544. In this case, the data may be transferred fromServer B 544 through the network to Server A 540 and, finally, tocomputer 502. The distance between Server A 540 andServer B 544 may be very long, e.g. across states, or very short, e.g., a few inches. Further, in traversing the network the data may be transferred through several intermediate servers and many routing devices, such as bridges and routers. -
FIG. 6 shows, in more detail, an example of a client-server system interconnected throughnetwork 600. In this example, aserver system 622 is interconnected throughnetwork 600 toclient system 620.Client system 620 includes conventional components such as aprocessor 624, memory 625 (e.g. RAM), abus 626 which couplesprocessor 624 andmemory 625, a mass storage device 627 (e.g. a magnetic hard disk or an optical storage disk) coupled toprocessor 624 andmemory 625 through an I/O controller 628 and anetwork interface 629, such as a conventional modem. -
Server system 622 also includes conventional components such as aprocessor 634, memory 635 (e.g. RAM), abus 636 which couplesprocessor 634 andmemory 635, a mass storage device 637 (e.g. a magnetic or optical disk) coupled toprocessor 634 andmemory 635 through an I/O controller 638 and anetwork interface 639, such as a conventional modem. It will be appreciated from the description below that the present invention may be implemented in software which is stored as executable instructions on a computer readable medium on the client and server systems, such asmass storage devices memories -
Processors Memories Mass storage Memories - Thus, methods and systems are disclosed for providing secure transactions across a network and, more particularly, for watermarking at the packet level. The present invention may also be embodied as computer-readable media that include program instructions or program code for performing various computer-implemented operations based on the methods of the present invention. The program instructions may be those specially designed and constructed for the purposes of the invention, or they may be of the kind well-known and available to those having skill in the computer software arts. Examples of program instructions include machine code, such as produced by a compiler, and files containing a high level code that can be executed by the computer using, for example, an interpreter or equivalent execution engine to facilitate execution of high level code. Alternative embodiments will become apparent to those skilled in the art to which the present invention pertains without departing from its spirit and scope. Accordingly, the scope of the present invention is defined by the appended claims rather than the foregoing description.
-
APPENDIX A // File: gbLogicAPI.h #ifndef _GBLOGICAPI_H #define _GBLOGICAPI_H /* * Data types */ // return status for all GB watermarking logic calls typedef enum { GB_nil, // unexpected error condition GB_ok, // success condition GB_deny, // incoming segment to be dropped GB_prepare, // client monitor is to perform synch GB_reauth, // serv. mon. to request client resynch } GB_action_t; // 16-bit watermark data type typedef struct { char bytes[ 2]; } GB_watermark_t; // 256-bit shared secret state agreement data type typedef struct { char bytes[ 32]; } GB_agreement_t; // opaque context for watermarking logic module typedef struct GB context_s GB_context_t; /* * Housekeeping */ // constructor GB_context_t * gbInitialize( ); // destructor void gbFinalize ( GB_context_t * ctx); /* * Client calls */ // return values: GB_nil, GB_ok GB_action_t gbPrepareWMark ( GB_context_t * ctx, GB_agreement_t * data, ipaddr_t src, ipaddr_t dst); // return values: GB_nil, GB_ok, GB_prepare GB_action_t gbWMarkOutgoing ( GB_context_t * ctx, GB_watermark_t * mark, ipaddr_t src, ipaddr_t dst); /* * Server calls */ // return values: GB_nil, GB_ok, GB_deny GB_action_t gbSynchronizeWMark ( GB_context_t * ctx, GB_agreement_t const * data, ipaddr_t src, ipaddr_t dst); // return values: GB_nil, GB_ok, GB_deny, GB_reauth GB_action_t gbWMarkIncoming ( GB_context_t * ctx, GB_watermark_t const * mark, ipaddr_t src, ipaddr_t dst), void const * segment_hdr); #endif /* _GBLOGICAPI_H */ // End of file
Claims (24)
Priority Applications (2)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US13/213,943 US8522034B2 (en) | 2002-07-26 | 2011-08-19 | Systems and methods for transparent configuration authentication of networked devices |
US13/953,339 US9246926B2 (en) | 2002-07-26 | 2013-07-29 | Packet validation using watermarks |
Applications Claiming Priority (3)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US39856402P | 2002-07-26 | 2002-07-26 | |
US10/627,270 US8090951B2 (en) | 2002-07-26 | 2003-07-25 | Systems and methods for transparent configuration authentication of networked devices |
US13/213,943 US8522034B2 (en) | 2002-07-26 | 2011-08-19 | Systems and methods for transparent configuration authentication of networked devices |
Related Parent Applications (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
US10/627,270 Continuation US8090951B2 (en) | 2002-07-26 | 2003-07-25 | Systems and methods for transparent configuration authentication of networked devices |
Related Child Applications (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
US13/953,339 Continuation US9246926B2 (en) | 2002-07-26 | 2013-07-29 | Packet validation using watermarks |
Publications (2)
Publication Number | Publication Date |
---|---|
US20120036367A1 true US20120036367A1 (en) | 2012-02-09 |
US8522034B2 US8522034B2 (en) | 2013-08-27 |
Family
ID=31188418
Family Applications (3)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
US10/627,270 Active 2028-09-16 US8090951B2 (en) | 2002-07-26 | 2003-07-25 | Systems and methods for transparent configuration authentication of networked devices |
US13/213,943 Expired - Lifetime US8522034B2 (en) | 2002-07-26 | 2011-08-19 | Systems and methods for transparent configuration authentication of networked devices |
US13/953,339 Expired - Fee Related US9246926B2 (en) | 2002-07-26 | 2013-07-29 | Packet validation using watermarks |
Family Applications Before (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
US10/627,270 Active 2028-09-16 US8090951B2 (en) | 2002-07-26 | 2003-07-25 | Systems and methods for transparent configuration authentication of networked devices |
Family Applications After (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
US13/953,339 Expired - Fee Related US9246926B2 (en) | 2002-07-26 | 2013-07-29 | Packet validation using watermarks |
Country Status (6)
Country | Link |
---|---|
US (3) | US8090951B2 (en) |
EP (1) | EP1547337B1 (en) |
AT (1) | ATE321412T1 (en) |
AU (1) | AU2003259240A1 (en) |
DE (1) | DE60304207D1 (en) |
WO (1) | WO2004012416A2 (en) |
Cited By (2)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US9246926B2 (en) | 2002-07-26 | 2016-01-26 | Google Inc. | Packet validation using watermarks |
US20200210555A1 (en) * | 2018-12-27 | 2020-07-02 | Alibaba Group Holding Limited | Information Processing Method, Hidden Information Parsing and Embedding Method, Apparatus, and Device |
Families Citing this family (77)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US7362775B1 (en) | 1996-07-02 | 2008-04-22 | Wistaria Trading, Inc. | Exchange mechanisms for digital information packages with bandwidth securitization, multichannel digital watermarks, and key management |
US5613004A (en) | 1995-06-07 | 1997-03-18 | The Dice Company | Steganographic method and device |
US7664263B2 (en) | 1998-03-24 | 2010-02-16 | Moskowitz Scott A | Method for combining transfer functions with predetermined key creation |
US6205249B1 (en) | 1998-04-02 | 2001-03-20 | Scott A. Moskowitz | Multiple transform utilization and applications for secure digital watermarking |
US7457962B2 (en) * | 1996-07-02 | 2008-11-25 | Wistaria Trading, Inc | Optimization methods for the insertion, protection, and detection of digital watermarks in digitized data |
US7159116B2 (en) | 1999-12-07 | 2007-01-02 | Blue Spike, Inc. | Systems, methods and devices for trusted transactions |
US7177429B2 (en) * | 2000-12-07 | 2007-02-13 | Blue Spike, Inc. | System and methods for permitting open access to data objects and for securing data within the data objects |
US7346472B1 (en) | 2000-09-07 | 2008-03-18 | Blue Spike, Inc. | Method and device for monitoring and analyzing signals |
US7095874B2 (en) | 1996-07-02 | 2006-08-22 | Wistaria Trading, Inc. | Optimization methods for the insertion, protection, and detection of digital watermarks in digitized data |
US5889868A (en) * | 1996-07-02 | 1999-03-30 | The Dice Company | Optimization methods for the insertion, protection, and detection of digital watermarks in digitized data |
US7730317B2 (en) * | 1996-12-20 | 2010-06-01 | Wistaria Trading, Inc. | Linear predictive coding implementation of digital watermarks |
US7664264B2 (en) | 1999-03-24 | 2010-02-16 | Blue Spike, Inc. | Utilizing data reduction in steganographic and cryptographic systems |
US7475246B1 (en) | 1999-08-04 | 2009-01-06 | Blue Spike, Inc. | Secure personal content server |
US7111201B2 (en) | 2000-05-19 | 2006-09-19 | Self Repairing Computers, Inc. | Self repairing computer detecting need for repair and having switched protected storage |
US7137034B2 (en) * | 2000-05-19 | 2006-11-14 | Vir2Us, Inc. | Self repairing computer having user accessible switch for modifying bootable storage device configuration to initiate repair |
US20060277433A1 (en) * | 2000-05-19 | 2006-12-07 | Self Repairing Computers, Inc. | Computer having special purpose subsystems and cyber-terror and virus immunity and protection features |
US7096381B2 (en) | 2001-05-21 | 2006-08-22 | Self Repairing Computer, Inc. | On-the-fly repair of a computer |
US7127615B2 (en) | 2000-09-20 | 2006-10-24 | Blue Spike, Inc. | Security based on subliminal and supraliminal channels for data objects |
US7392541B2 (en) * | 2001-05-17 | 2008-06-24 | Vir2Us, Inc. | Computer system architecture and method providing operating-system independent virus-, hacker-, and cyber-terror-immune processing environments |
US7849360B2 (en) * | 2001-05-21 | 2010-12-07 | Vir2Us, Inc. | Computer system and method of controlling communication port to prevent computer contamination by virus or malicious code |
US7536598B2 (en) | 2001-11-19 | 2009-05-19 | Vir2Us, Inc. | Computer system capable of supporting a plurality of independent computing environments |
WO2003058879A1 (en) | 2002-01-08 | 2003-07-17 | Seven Networks, Inc. | Secure transport for mobile communication network |
US7788699B2 (en) | 2002-03-06 | 2010-08-31 | Vir2Us, Inc. | Computer and method for safe usage of documents, email attachments and other content that may contain virus, spy-ware, or malicious code |
US7287275B2 (en) | 2002-04-17 | 2007-10-23 | Moskowitz Scott A | Methods, systems and devices for packet watermarking and efficient provisioning of bandwidth |
EP1589716A1 (en) * | 2004-04-20 | 2005-10-26 | Ecole Polytechnique Fédérale de Lausanne (EPFL) | Method of detecting anomalous behaviour in a computer network |
FR2880441B1 (en) * | 2004-12-31 | 2010-06-18 | Trusted Logic | SECURE DYNAMIC LOADING |
US7813597B2 (en) | 2005-03-18 | 2010-10-12 | The Invention Science Fund I, Llc | Information encoded in an expression |
US8599174B2 (en) * | 2005-03-18 | 2013-12-03 | The Invention Science Fund I, Llc | Verifying a written expression |
US7809215B2 (en) | 2006-10-11 | 2010-10-05 | The Invention Science Fund I, Llc | Contextual information encoded in a formed expression |
US20070047590A1 (en) * | 2005-08-26 | 2007-03-01 | Nokia Corporation | Method for signaling a device to perform no synchronization or include a synchronization delay on multimedia stream |
JP2009512939A (en) * | 2005-10-21 | 2009-03-26 | ヴァー２アス インコーポレイテッド | Computer security method having operating system virtualization that allows multiple operating system instances to securely share a single machine resource |
US8327155B2 (en) | 2006-08-31 | 2012-12-04 | The Invention Science Fund I, Llc | Screening for masquerading content |
US9747426B2 (en) | 2006-08-31 | 2017-08-29 | Invention Science Fund I, Llc | Handling masquerading elements |
US8640248B2 (en) | 2006-08-31 | 2014-01-28 | The Invention Science Fund I, Llc | Handling masquerading elements |
US8555396B2 (en) * | 2006-08-31 | 2013-10-08 | The Invention Science Fund I, Llc | Authenticatable displayed content |
GB0619179D0 (en) * | 2006-09-29 | 2006-11-08 | Ip Access Ltd | Telecommunications access control system and method |
US8775369B2 (en) | 2007-01-24 | 2014-07-08 | Vir2Us, Inc. | Computer system architecture and method having isolated file system management for secure and reliable data processing |
RU2477572C2 (en) * | 2007-02-21 | 2013-03-10 | Конинклейке Филипс Электроникс Н.В. | Conditional access system |
US7602817B2 (en) * | 2007-02-22 | 2009-10-13 | Cisco Technology, Inc. | Low deviation field modulation for transfer of information |
US7990947B2 (en) | 2007-06-12 | 2011-08-02 | Robert W. Twitchell, Jr. | Network watermark |
US8464256B1 (en) | 2009-04-10 | 2013-06-11 | Open Invention Network, Llc | System and method for hierarchical interception with isolated environments |
US8555360B1 (en) | 2009-04-10 | 2013-10-08 | Open Invention Network Llc | System and method for on-line and off-line streaming application isolation |
US10419504B1 (en) | 2009-04-10 | 2019-09-17 | Open Invention Network Llc | System and method for streaming application isolation |
US8418236B1 (en) * | 2009-04-10 | 2013-04-09 | Open Invention Network Llc | System and method for streaming application isolation |
US11538078B1 (en) | 2009-04-10 | 2022-12-27 | International Business Machines Corporation | System and method for usage billing of hosted applications |
CN102667714B (en) * | 2009-11-25 | 2015-08-05 | 飞思卡尔半导体公司 | Support the method and system that the function provided by the resource outside operating system environment is provided |
US9239910B2 (en) * | 2011-04-04 | 2016-01-19 | Markany Inc. | System and method for preventing the leaking of digital content |
US8687814B2 (en) * | 2011-05-20 | 2014-04-01 | Citrix Systems, Inc. | Securing encrypted virtual hard disks |
US8978143B2 (en) * | 2013-01-02 | 2015-03-10 | Verisign, Inc. | Reverse authorized SYN cookie |
US9294503B2 (en) | 2013-08-26 | 2016-03-22 | A10 Networks, Inc. | Health monitor based distributed denial of service attack mitigation |
US9606605B2 (en) | 2014-03-07 | 2017-03-28 | Apple Inc. | Dynamic voltage margin recovery |
US9462087B2 (en) * | 2014-05-09 | 2016-10-04 | Unisys Corporation | Avoiding collisions in internet protocol (IP) packet identification numbers |
US11507663B2 (en) | 2014-08-11 | 2022-11-22 | Sentinel Labs Israel Ltd. | Method of remediating operations performed by a program and system thereof |
US9710648B2 (en) | 2014-08-11 | 2017-07-18 | Sentinel Labs Israel Ltd. | Method of malware detection and system thereof |
US9756071B1 (en) | 2014-09-16 | 2017-09-05 | A10 Networks, Inc. | DNS denial of service attack protection |
US9537886B1 (en) * | 2014-10-23 | 2017-01-03 | A10 Networks, Inc. | Flagging security threats in web service requests |
US9584318B1 (en) | 2014-12-30 | 2017-02-28 | A10 Networks, Inc. | Perfect forward secrecy distributed denial of service attack defense |
US9900343B1 (en) | 2015-01-05 | 2018-02-20 | A10 Networks, Inc. | Distributed denial of service cellular signaling |
US9848013B1 (en) | 2015-02-05 | 2017-12-19 | A10 Networks, Inc. | Perfect forward secrecy distributed denial of service attack detection |
US10063591B1 (en) | 2015-02-14 | 2018-08-28 | A10 Networks, Inc. | Implementing and optimizing secure socket layer intercept |
US10108579B2 (en) * | 2015-04-28 | 2018-10-23 | Comcast Cable Communications, Llc | Remote messaging using target memory location |
US9923929B2 (en) | 2015-11-20 | 2018-03-20 | Nasdaq, Inc. | Systems and methods for in-session refresh of entitlements associated with web applications |
US10469594B2 (en) | 2015-12-08 | 2019-11-05 | A10 Networks, Inc. | Implementation of secure socket layer intercept |
US10505984B2 (en) | 2015-12-08 | 2019-12-10 | A10 Networks, Inc. | Exchange of control information between secure socket layer gateways |
US10210715B2 (en) * | 2016-02-04 | 2019-02-19 | Lrb Patents Llc | Lottery transaction mechanisms |
US10116634B2 (en) | 2016-06-28 | 2018-10-30 | A10 Networks, Inc. | Intercepting secure session upon receipt of untrusted certificate |
US10158666B2 (en) | 2016-07-26 | 2018-12-18 | A10 Networks, Inc. | Mitigating TCP SYN DDoS attacks using TCP reset |
US10673893B2 (en) * | 2016-08-31 | 2020-06-02 | International Business Machines Corporation | Isolating a source of an attack that originates from a shared computing environment |
US10599842B2 (en) * | 2016-12-19 | 2020-03-24 | Attivo Networks Inc. | Deceiving attackers in endpoint systems |
US11616812B2 (en) | 2016-12-19 | 2023-03-28 | Attivo Networks Inc. | Deceiving attackers accessing active directory data |
US11695800B2 (en) * | 2016-12-19 | 2023-07-04 | SentinelOne, Inc. | Deceiving attackers accessing network data |
EP3643040A4 (en) | 2017-08-08 | 2021-06-09 | SentinelOne, Inc. | Methods, systems, and devices for dynamically modeling and grouping endpoints for edge networking |
CN107483461B (en) * | 2017-08-30 | 2020-06-12 | 奇安信科技集团股份有限公司 | Terminal access control method and device under NAT environment |
US11470115B2 (en) | 2018-02-09 | 2022-10-11 | Attivo Networks, Inc. | Implementing decoys in a network environment |
EP3973427A4 (en) | 2019-05-20 | 2023-06-21 | Sentinel Labs Israel Ltd. | Systems and methods for executable code detection, automatic feature extraction and position independent code detection |
US11579857B2 (en) | 2020-12-16 | 2023-02-14 | Sentinel Labs Israel Ltd. | Systems, methods and devices for device fingerprinting and automatic deployment of software in a computing network using a peer-to-peer approach |
US11899782B1 (en) | 2021-07-13 | 2024-02-13 | SentinelOne, Inc. | Preserving DLL hooks |
Citations (4)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US5151899A (en) * | 1991-02-11 | 1992-09-29 | Digital Equipment Corporation | Tracking sequence numbers in packet data communication system |
US6330672B1 (en) * | 1997-12-03 | 2001-12-11 | At&T Corp. | Method and apparatus for watermarking digital bitstreams |
US20030200439A1 (en) * | 2002-04-17 | 2003-10-23 | Moskowitz Scott A. | Methods, systems and devices for packet watermarking and efficient provisioning of bandwidth |
US7587601B2 (en) * | 1996-04-25 | 2009-09-08 | Digimarc Corporation | Digital watermarking methods and apparatus for use with audio and video content |
Family Cites Families (16)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US5175765A (en) * | 1989-05-09 | 1992-12-29 | Digital Equipment Corporation | Robust data broadcast over a distributed network with malicious failures |
US6408331B1 (en) * | 1995-07-27 | 2002-06-18 | Digimarc Corporation | Computer linking methods using encoded graphics |
US6430184B1 (en) * | 1998-04-10 | 2002-08-06 | Top Layer Networks, Inc. | System and process for GHIH-speed pattern matching for application-level switching of data packets |
US6647424B1 (en) * | 1998-05-20 | 2003-11-11 | Nortel Networks Limited | Method and apparatus for discarding data packets |
US6282650B1 (en) * | 1999-01-25 | 2001-08-28 | Intel Corporation | Secure public digital watermark |
DE19926783A1 (en) | 1999-06-11 | 2000-12-14 | Richard Roehrhoff | Information authentication method for data network by addition authentication code to information before transmission or placing on network |
US7363497B1 (en) * | 1999-07-20 | 2008-04-22 | Immediatek, Inc. | System for distribution of recorded content |
WO2001052178A1 (en) * | 2000-01-13 | 2001-07-19 | Digimarc Corporation | Authenticating metadata and embedding metadata in watermarks of media signals |
TW518864B (en) * | 2000-05-12 | 2003-01-21 | Ibm | Methods and system for defeating TCP SYN flooding attacks |
JP3784635B2 (en) | 2000-11-10 | 2006-06-14 | 富士通株式会社 | Data operation method |
US20020118692A1 (en) * | 2001-01-04 | 2002-08-29 | Oberman Stuart F. | Ensuring proper packet ordering in a cut-through and early-forwarding network switch |
JP4934923B2 (en) * | 2001-08-09 | 2012-05-23 | ソニー株式会社 | Information recording apparatus, information reproducing apparatus, information recording method, information reproducing method, and computer program |
US7260722B2 (en) * | 2001-12-28 | 2007-08-21 | Itt Manufacturing Enterprises, Inc. | Digital multimedia watermarking for source identification |
US7194630B2 (en) * | 2002-02-27 | 2007-03-20 | Canon Kabushiki Kaisha | Information processing apparatus, information processing system, information processing method, storage medium and program |
AU2003259240A1 (en) | 2002-07-26 | 2004-02-16 | Green Border Technologies, Inc. | Transparent configuration authentication of networked devices |
US7751587B2 (en) * | 2006-02-09 | 2010-07-06 | Hitachi, Ltd. | Data production method and apparatus |
-
2003
- 2003-07-25 AU AU2003259240A patent/AU2003259240A1/en not_active Abandoned
- 2003-07-25 AT AT03771837T patent/ATE321412T1/en not_active IP Right Cessation
- 2003-07-25 DE DE60304207T patent/DE60304207D1/en not_active Expired - Lifetime
- 2003-07-25 WO PCT/US2003/023302 patent/WO2004012416A2/en not_active Application Discontinuation
- 2003-07-25 US US10/627,270 patent/US8090951B2/en active Active
- 2003-07-25 EP EP03771837A patent/EP1547337B1/en not_active Expired - Lifetime
-
2011
- 2011-08-19 US US13/213,943 patent/US8522034B2/en not_active Expired - Lifetime
-
2013
- 2013-07-29 US US13/953,339 patent/US9246926B2/en not_active Expired - Fee Related
Patent Citations (4)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US5151899A (en) * | 1991-02-11 | 1992-09-29 | Digital Equipment Corporation | Tracking sequence numbers in packet data communication system |
US7587601B2 (en) * | 1996-04-25 | 2009-09-08 | Digimarc Corporation | Digital watermarking methods and apparatus for use with audio and video content |
US6330672B1 (en) * | 1997-12-03 | 2001-12-11 | At&T Corp. | Method and apparatus for watermarking digital bitstreams |
US20030200439A1 (en) * | 2002-04-17 | 2003-10-23 | Moskowitz Scott A. | Methods, systems and devices for packet watermarking and efficient provisioning of bandwidth |
Cited By (2)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US9246926B2 (en) | 2002-07-26 | 2016-01-26 | Google Inc. | Packet validation using watermarks |
US20200210555A1 (en) * | 2018-12-27 | 2020-07-02 | Alibaba Group Holding Limited | Information Processing Method, Hidden Information Parsing and Embedding Method, Apparatus, and Device |
Also Published As
Publication number | Publication date |
---|---|
US9246926B2 (en) | 2016-01-26 |
US20040083369A1 (en) | 2004-04-29 |
WO2004012416A3 (en) | 2004-04-08 |
WO2004012416A2 (en) | 2004-02-05 |
DE60304207D1 (en) | 2006-05-11 |
US8522034B2 (en) | 2013-08-27 |
EP1547337A2 (en) | 2005-06-29 |
EP1547337B1 (en) | 2006-03-22 |
US20130311782A1 (en) | 2013-11-21 |
ATE321412T1 (en) | 2006-04-15 |
AU2003259240A8 (en) | 2004-02-16 |
US8090951B2 (en) | 2012-01-03 |
AU2003259240A1 (en) | 2004-02-16 |
Similar Documents
Publication | Publication Date | Title |
---|---|---|
US9246926B2 (en) | Packet validation using watermarks | |
US6772334B1 (en) | System and method for preventing a spoofed denial of service attack in a networked computing environment | |
US7472414B2 (en) | Method of processing data traffic at a firewall | |
US7552323B2 (en) | System, apparatuses, methods, and computer-readable media using identification data in packet communications | |
KR101026558B1 (en) | A multi-layer based method for implementing network firewalls | |
US8745723B2 (en) | System and method for providing unified transport and security protocols | |
US6779033B1 (en) | System and method for transacting a validated application session in a networked computing environment | |
US7051365B1 (en) | Method and apparatus for a distributed firewall | |
US6751728B1 (en) | System and method of transmitting encrypted packets through a network access point | |
US20040210754A1 (en) | Shared security transform device, system and methods | |
US20100235632A1 (en) | Protecting against denial of service attacks using trust, quality of service, personalization, and hide port messages | |
US20070245137A1 (en) | HTTP cookie protection by a network security device | |
JP2004295891A (en) | Method for authenticating packet payload | |
EP1574009B1 (en) | Systems and apparatuses using identification data in network communication | |
US20020129239A1 (en) | System for secure communication between domains | |
US8406223B2 (en) | Mechanism for protecting H.323 networks for call set-up functions | |
US8127355B2 (en) | System and method for protecting network resources from denial of service attacks | |
US7634655B2 (en) | Efficient hash table protection for data transport protocols | |
RU2314562C1 (en) | Method for processing network traffic datagrams for delimiting access to informational and computing resources of computer networks |
Legal Events
Date | Code | Title | Description |
---|---|---|---|
AS | Assignment |
Owner name: GOOGLE INC., CALIFORNIAFree format text: MERGER;ASSIGNOR:GREEN BORDER TECHNOLOGIES, INC.;REEL/FRAME:026780/0417Effective date: 20070511Owner name: GREEN BORDER TECHNOLOGIES, CALIFORNIAFree format text: ASSIGNMENT OF ASSIGNORS INTEREST;ASSIGNORS:ERLINGSSON, ULFAR;BOYEN, XAVIER;ANDERSON, DARRELL;AND OTHERS;SIGNING DATES FROM 20031107 TO 20031205;REEL/FRAME:026780/0395 |
|
STCF | Information on status: patent grant |
Free format text: PATENTED CASE |
|
CC | Certificate of correction | ||
FPAY | Fee payment |
Year of fee payment: 4 |
|
AS | Assignment |
Owner name: GOOGLE LLC, CALIFORNIAFree format text: CHANGE OF NAME;ASSIGNOR:GOOGLE INC.;REEL/FRAME:044129/0001Effective date: 20170929 |
|
MAFP | Maintenance fee payment |
Free format text: PAYMENT OF MAINTENANCE FEE, 8TH YEAR, LARGE ENTITY (ORIGINAL EVENT CODE: M1552); ENTITY STATUS OF PATENT OWNER: LARGE ENTITYYear of fee payment: 8 |