US7592930B1 - Method and apparatus for reducing memory usage by encoding two values in a single field - Google Patents
Method and apparatus for reducing memory usage by encoding two values in a single field Download PDFInfo
- Publication number
- US7592930B1 US7592930B1 US12/120,085 US12008508A US7592930B1 US 7592930 B1 US7592930 B1 US 7592930B1 US 12008508 A US12008508 A US 12008508A US 7592930 B1 US7592930 B1 US 7592930B1
- Authority
- US
- United States
- Prior art keywords
- string
- bits
- single field
- length
- hash
- Prior art date
- Legal status (The legal status is an assumption and is not a legal conclusion. Google has not performed a legal analysis and makes no representation as to the accuracy of the status listed.)
- Active
Links
Images
Classifications
-
- H—ELECTRICITY
- H03—ELECTRONIC CIRCUITRY
- H03M—CODING; DECODING; CODE CONVERSION IN GENERAL
- H03M7/00—Conversion of a code where information is represented by a given sequence or number of digits to a code where the same, similar or subset of information is represented by a different sequence or number of digits
- H03M7/30—Compression; Expansion; Suppression of unnecessary data, e.g. redundancy reduction
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F8/00—Arrangements for software engineering
- G06F8/40—Transformation of program code
- G06F8/41—Compilation
- G06F8/44—Encoding
- G06F8/443—Optimisation
- G06F8/4434—Reducing the memory space required by the program code
Definitions
- the present invention relates to techniques for reducing memory usage in computing devices. More specifically, the present invention relates to a method and an apparatus for reducing memory usage by encoding two values in a single field.
- strings which comprise ordered sequences of symbols.
- strings are typically defined as structures in a programming language, and are stored as string objects in a runtime environment associated with the programming language.
- a given program may manipulate these string objects, and also compute and store additional values related to a given string, such as the length of the string and a hash value for the string.
- computing these additional values may not be optional, and re-computing the values may also be difficult (or even impossible).
- a system may store such values as part of the string object.
- the runtime environment may allocate additional fields for each string to store (and thereby avoid re-computing) such values.
- allocating multiple fields for each string can consume a substantial amount of memory for programs that include a large number of strings. This memory usage can become a problem for memory-constrained computing devices.
- One embodiment of the present invention provides a system that reduces memory usage by encoding two values in a single field.
- the system receives a string. After determining the length of the string, the system allocates a first set of bits in the single field to store the length of the string, where the size of this first set of bits depends upon the determined length of the string. The system then stores the length of the string in the first set of bits. Subsequently, the system computes a hash code for the string. The system then allocates a second set of bits from the remaining unallocated bits in the single field to store this hash code, and stores the hash code in this second set of bits. Thereafter, the system can access the string length value from the single field and can also use the entire single field as a hash value for the string.
- the system stores the length of the string and the hash value in the single field such that the system can quickly look up either of the two values. By storing both values in the single field, the system reduces the number of fields needed to store the two values.
- the system uses a valid bit in the single field to indicate whether a hash code has been stored in the single field. For instance, the system may check this valid bit to ensure that the single field contains a valid hash code before attempting to use the single field as a hash value.
- (1) the value for the length of the string is stored in the most significant bits of the single field, (2) the hash code is stored in the next most significant bits of the single field, and (3) the valid bit is stored in the least significant bit of the single field.
- reading the length of the string from the single field involves shifting the contents of the single field to the right until the hash code and the valid bit are shifted out and only the first set of bits (representing the value of the length of the string) remain.
- decreasing the number of bits used to store the length of the string increases the number of bits available for the hash code, thereby improving the distribution of hash values for shorter strings.
- the system uses a defined string type for each given allocation of bits (between the bits for the length and the hash code) in the single field.
- the system can simultaneously use these multiple string types within a given program to enable a runtime environment to determine for each given string how many bits are used for the length of the string and the hash code for the string.
- the system uses all but one of the bits of the single field to store the value for the string length of a long string.
- no hash code is computed for the string, and the one remaining unallocated bit in the single field is used as a valid bit that indicates whether the single field can be used as a valid hash value for the long string.
- FIG. 1 illustrates an exemplary string object allocated by a program executing in a runtime environment on a computing device.
- FIG. 2 illustrates an exemplary string object in which a runtime environment encodes two values in a single field in accordance with an embodiment of the present invention.
- FIG. 3 illustrates three exemplary layouts for a single 32-bit field that can be used for three different categories of string lengths in accordance with an embodiment of the present invention.
- FIG. 4A illustrates an exemplary short representation of the single field for a string at the time the string is created in accordance with an embodiment of the present invention.
- FIG. 4B illustrates an exemplary short representation of the single field for a string after the hash code bits have been set in accordance with an embodiment of the present invention.
- FIG. 4C illustrates the portion of an exemplary short representation of the single field for a string that is used as a hash value in accordance with an embodiment of the present invention.
- FIG. 4D illustrates the process of reading a string length from an exemplary short representation of the single field for a string in accordance with an embodiment of the present invention.
- FIG. 5 presents a flow chart illustrating the process of encoding two values in a single field in accordance with an embodiment of the present invention.
- FIG. 6 presents a flow chart illustrating the process of reading the value for the string length from the single field in accordance with an embodiment of the present invention.
- FIG. 7 presents a flow chart illustrating the process of reading a hash value for the string from the single field in accordance with an embodiment of the present invention.
- the data structures and code described in this detailed description are typically stored on a computer-readable storage medium, which may be any device or medium that can store code and/or data for use by a computer system.
- the computer-readable storage medium includes, but is not limited to, volatile memory, non-volatile memory, magnetic and optical storage devices such as disk drives, magnetic tape, CDs (compact discs), DVDs (digital versatile discs or digital video discs), or other media capable of storing computer-readable media now known or later developed.
- the methods and processes described in the detailed description section can be embodied as code and/or data, which can be stored in a computer-readable storage medium as described above.
- a computer system reads and executes the code and/or data stored on the computer-readable storage medium, the computer system perform the methods and processes embodied as data structures and code and stored within the computer-readable storage medium.
- the methods and processes described below can be included in hardware modules.
- the hardware modules can include, but are not limited to, application-specific integrated circuit (ASIC) chips, field-programmable gate arrays (FPGAs), and other programmable-logic devices now known or later developed.
- ASIC application-specific integrated circuit
- FPGA field-programmable gate arrays
- the hardware modules When the hardware modules are activated, the hardware modules perform the methods and processes included within the hardware modules.
- Strings are frequently used in programming languages. For instance, programs written in programming languages such as JavaScriptTM (the term JavaScript is a trademark of Sun Microsystems, Inc. of Santa Clara, Calif.) typically use a large number of strings, and hence create and manipulate a large number of string objects at runtime. Such programs may need to compute and quickly access one or more characteristics for each given string object. For instance, many programs frequently check the length of strings. Because calculating a string length typically involves a number of program instructions, programmers may design the runtime environment to only compute a string length once and store the computed length in a field associated with the string, thereby saving the string length for future re-use.
- JavaScriptTM the term JavaScript is a trademark of Sun Microsystems, Inc. of Santa Clara, Calif.
- programs may compute and store for each given string a hash value that serves as an index into a hash table (e.g., when the string is used as a key in a dictionary lookup structure).
- a hash value that serves as an index into a hash table
- Computing these hash values based on the content of the string often involves examining all of the characters in the string, and hence can be an expensive operation.
- a runtime environment ensures that the operation is only performed once and is not unnecessarily repeated multiple times, thereby improving performance.
- strings as a string header followed by the individual characters of the string.
- the string length and hash value may be stored in two separate fields in the header for a string object.
- FIG. 1 illustrates an exemplary string object 106 allocated by a program executing in a runtime environment 104 on computing device 100 .
- program source 102 for the program is loaded into runtime environment 104 .
- Program source 102 defines and performs a number of operations upon string object 106 .
- the runtime environment 104 allocates for string object 106 both a memory region that stores the actual string contents 116 (e.g., “MONDAY”) as well as a string header 108 that includes: a string length 110 field; a hash value field 112 ; and a string type 114 .
- the runtime environment may already compute string length 110 and hash value 112 at the time the string is created. Alternatively, the runtime environment may delay the computation of these values until the first use.
- One embodiment of the present invention reduces the memory used in a runtime environment by encoding the hash value for a string and the length of the string into a single field in the string header.
- the system encodes a hash value and a string-length value for a string into a single field.
- the system saves space in string headers while also ensuring efficient access to both the hash and string-length values. Note that this technique can be applied to the runtime implementation of any programming language.
- Strings used in programs are typically short.
- JavaScriptTM programs typically include a large number of short strings (e.g., less than 256 characters in length), a smaller number of medium-size strings (e.g., under 65,536 characters in length), and very few long strings (e.g., 65,536 or more characters in length).
- short strings e.g., less than 256 characters in length
- medium-size strings e.g., under 65,536 characters in length
- very few long strings e.g., 65,536 or more characters in length.
- the bits used to store the string length and any remaining unused bits in the single field are used together as a hash value for the string.
- FIG. 2 illustrates an exemplary string object 200 in which runtime environment 204 encodes two values in a single field 202 .
- program source 102 for the program is loaded into runtime environment 204 during operation, and defines and performs a number of operations upon string object 200 .
- runtime environment 204 instead of allocating two fields for the string length and hash value ( 110 and 112 in FIG. 1 ), allocates only a single field for the length and hash values 202 .
- the programming language implementation e.g., the runtime environment for the programming language
- the programming language implementation includes a number of string types that represent strings of different lengths (e.g., strings of short, medium and/or long length). Based on these string types, the runtime environment can determine a layout for the single field. Note that the described technique is not limited to three string types, but can instead include an arbitrary number of string types, as needed, depending on the distribution of string sizes and the number of bits available for the single field (e.g., different layouts for single fields that span 32 and/or 64 bits). The runtime environment uses the specified string type during execution to determine how to decode the string length from a given single field.
- FIG. 3 illustrates three exemplary layouts for a single 32-bit field that can be used for three different categories of string lengths. Note that in FIG. 3 , (1) bits dedicated to storing string lengths are indicated by the letter ‘L’, (2) bits allocated to storing hash code bits are indicated by the letter ‘H’, and (3) a valid bit is indicated by the letter ‘V’. Note also that a hash value associated with a given string comprises more than just the bits used for the hash code, but instead comprises all of the bits of the single field, including the bits that store the string length (as described below).
- Short string representation 300 for strings with a length less than 256 characters (which need 8 or fewer bits to represent the length of the string).
- Short string representation 300 stores string length 302 in the top (most-significant) eight bits of the single 32-bit field, leaving 24 bits unused.
- Short string representation 300 uses 23 of these remaining 24 bits to store a computed hash code 304 for the string, and uses the last (least-significant) bit (valid bit 306 ) to indicate whether a set of hash code bits have already been stored in the 23-bit hash code 304 .
- FIGS. 4A-4D illustrate the process of populating and using a single field associated with short string representation 300 .
- a short string e.g., the string “MONDAY”
- the runtime system determines the length of the string and writes this length (e.g., 6, or binary value “00000110”) into the string length bits 302 as is shown in FIG. 4A .
- the remaining bits of the single field e.g., hash code bits 304 and valid bit 306 ) remain blank (zero) (as shown in FIG. 4A ).
- the system checks whether valid bit 306 is ‘1’ (“valid”) or ‘0’ (“invalid”). If valid bit 306 indicates that hash code bits 304 are invalid for the given string (e.g., the system has not yet stored a hash code in hash code bits 304 ), the system: (1) computes a 23-bit hash code for the string; (2) sets hash code bits 304 in the single field for the string to the computed hash code value; (3) and sets valid bit 306 to valid (‘1’).
- the content of the exemplary single field after setting a hash code 410 is shown in FIG. 4B .
- hash code bits 304 contain a computed hash code
- the actual hash value used for the (short) string comprises the entire 32-bit value contained in the single field 420 , including string length bits 302 , hash code bits 304 , and valid bit 306 (as shown in FIG. 4C ). Because there are likely to be many short strings in a given program, using only string length as a hash value would be likely to result in collisions for short strings, but combining the string length with a computed hash code is likely to create a set of hash values that provide a good hash distribution.
- the hash function generating the hash code for the short (and medium-length) representation(s) can be customized to provide a good distribution for the hash values of strings in the system. For instance, the hash function may consider: the full or a partial set of characters in each string; the memory location of a string or a string header; the length of each string; an expected set of characteristics for one or more strings in the system; and/or other string and/or system characteristics.
- multiple string objects may hash to the same value (e.g., perhaps due to limitations in the system implementation, system environment, and/or hash function). For instance, in a system that cannot use the memory locations for strings in the hash function, string objects that contain the same characters may be considered equal and hash to the same value. The system may not ensure that string objects with different sequences of characters hash to different values, and in such (typically uncommon) cases may handle hash collisions using one or more collision management techniques.
- FIG. 4D illustrates the process of reading the length of a short string from a single field that uses the short string representation 300 illustrated in FIG. 3 .
- the system performs a right shift operation that shifts the value in the single field right 24 bits 430 .
- the shifted string length bits 432 now comprise the least significant bits of the single field and zeros have been shifted into the most significant bits of the single field.
- the system can read the string length value 434 as an integer by performing a single shift operation. Because shift operations typically involve only a single simple instruction, accessing the string length from the single field is almost as efficient as accessing the string length from a separate field.
- FIG. 3 also illustrates a medium-length string representation 310 .
- the system can use a medium-length string type for medium-sized strings with a length less than 65,536 characters. For such strings, the system stores a string length using 16 bits 312 , and then uses 15 of the remaining 16 bits to store a computed hash code 314 . As with short string representation 300 , the last bit is used as a valid bit 316 that indicates whether or not a hash code has been stored already in the single field.
- the process of accessing the hash value and string length for medium-length string representation 310 is substantially similar to accessing the two values for short string representation 300 : the system can read the entire 32-bit single field as the hash value, or can shift string length bits 312 (this time by 16 bits, instead of 24 bits) to access the string length as an integer.
- FIG. 3 also illustrates a long string representation 320 .
- a long string representation 320 there are typically very few strings with a length equal to or longer than 65,536 characters. For instance, a system that uses strings as keys for a dictionary lookup structure is unlikely to use a 65,000+ character string as a key for such a dictionary lookup structure. Because two of such long, rare strings are statistically unlikely to have exactly the same length, the system uses 31 bits of the single field to store the string length 322 . The system uses the one remaining unallocated bit in the single field as a valid bit 324 that indicates whether the single field can be used as a valid hash value for the long string. Note that including valid bit 324 in long string representation 320 makes access to the hash value uniform for all string objects.
- the three string representations illustrated in FIG. 3 save memory while providing a reasonable distribution of hash values for the full set of strings in a program. This is achieved for shorter strings by storing hash codes in bits not needed to store length information.
- the typical distribution of string lengths in programs works in conjunction with the described string representations to ensure that the hash values of short strings and medium-length strings are well distributed by the combination of the string length and hash code fields, while the hash distribution for long strings is also well distributed by the low likelihood of multiple long strings having the same length.
- FIG. 5 presents a flow chart illustrating the process of encoding two values in a single field.
- the system receives a string (operation 500 ). After determining the length of the string (operation 510 ), the system allocates a set of bits in the single field based on the length of the string (operation 520 ). The system stores the string length in these bits (step 530 ). Subsequently, the system determines that a hash value is needed for the string. Note that the timeframe for determining and storing this hash value may vary.
- the system may already compute the hash value at the time of string creation if it knows that a hash value will be needed for the string, or the system may instead wait to compute a hash value for the string until the system is sure that this hash value will indeed be needed. Regardless, at the time the system creates such a hash value, the system first determines whether or not the string is a long string (operation 540 ). If so, the system determines that all but one of the bits in the single field have been used to store a value for the string length, and that no hash code is needed. In this case, the system sets the valid bit to indicate that the single field can now be used as a hash value (operation 580 ), and the process completes.
- the system computes a hash code for the string (operation 550 ). The system then allocates a second set of bits from the remaining unallocated bits in the single field for storing this hash code (operation 560 ) and proceeds to store the hash code in this second set of bits (operation 570 ). Finally, the system sets a valid bit to indicate that the single field can now be used as a hash value (operation 580 ).
- a system that always computes and stores hash codes in unallocated bits of the single field (when unallocated bits are available) at the time of string creation may not need to allocate and set a valid bit. For example, if the system is assured that the hash values are always valid (from the time the string is created), it can proceed to use the hash value without needing to set and/or check a valid bit.
- FIG. 6 presents a flow chart illustrating the process of reading the value for the string length from the single field.
- the system shifts the value of the single field right a specified number of bits based on the string type (e.g., 24 bits right for short strings, 16 bits right for medium-length strings, and one bit right for long strings) (operation 600 ).
- the system may determine this string type implicitly. For instance, if the steps used to calculate the string length are associated with each specific string type, the system simply performs the operations for the given string type, and does not need to explicitly check the string type.
- the system then reads the resulting value as the string length (operation 610 ).
- the system can efficiently access the string length by executing a shift instruction followed by a load instruction.
- FIG. 7 presents a flow chart illustrating the process of reading a hash value for the string from the single field.
- the system checks whether the valid bit for the single field has been set (operation 700 ). If so, the system proceeds to use the entire single field as the hash value (operation 740 ). If not, the system checks the string type for the string object (operation 710 ). If the string is of the long string type, the system does not need to compute a hash code, and proceeds to set the valid bit (operation 730 ) and use the entire single field as the hash value (operation 740 ). If the string is not of the long string type (in operation 710 ), the system computes and stores an additional hash code in the single field (as described for FIG.
- operation 720 sets the valid bit (operation 730 ), and then uses the entire single field as a hash value (operation 740 ).
- a technique that uses the entire single field as the hash value and involves minimal checks is very beneficial for performance-sensitive program paths that need to efficiently access cached hash codes (for instance, programs that use a stub code cache as described in patent application GGL-1462-00-US, entitled “Supporting Efficient Access to Object Properties in a Dynamic Object-Oriented Programming Language,” by Kasper Verdich Lund and Lars Bak, having Ser. No. 12/120,077, and filing date May 13, 2008, which is included by reference).
- the system does not need to separate out the bits used for string length, but can instead read the entire field as the hash value in a single instruction.
- the process illustrated in FIG. 7 differs slightly depending on the string object's string type, but may not involve additional instructions that actually check the string type (as described below).
- the described techniques can be managed completely by a compiler and/or runtime environment for a given programming language, and can hence be transparent to programmers writing programs in the given programming language.
- the compiler and/or runtime environment can determine and remember the string type of each given string object, and ensure that the correct operations are performed when accessing the string length and hash value for each given string. For instance, for systems that use map objects to determine string types and properties (as described in patent application GGL-1461-00-US, entitled “Using Map Objects to Access Object Properties in a Dynamic Object-Oriented Programming Language,” by Lars Bak and Kasper Verdich Lund, having Ser. No.
- the system may use different map objects for short, medium-length, and long strings.
- the system may use the map object associated with each given string to automatically determine the string type and corresponding single field access methods for the string type.
- creating several additional types and looking up a set of additional types for distinguishing different representations of string objects typically does not involve any additional overhead.
- strings immutable e.g., string objects are never changed after they are created.
- Programs typically change strings infrequently, but when such a change occurs such systems typically create a whole new string object with a new string length and hash value.
- such systems often also create a new string object when two strings are concatenated.
- string lengths and hash values never need to be re-computed or changed, but instead are only written once (e.g., at the time the string object is created, or at the time the value is first used) and then subsequently are only read.
- the bit layout of different string representations may vary. For instance, one embodiment of the present invention uses a different bit (other than the least-significant bit) of the single field to indicate whether a hash code has been cached for the string.
- the single field is not a 32-bit value, but instead can have any number of bits.
- the number of internal string types, and therefore how bits in the single field are allocated between the string length and hash code fields may vary.
- some alternative embodiments may store the string length in a different set of bits. For instance, the system can store the string length as the least significant set of bits, and perform a masking operation to separate the string length from the set of bits used for the hash code.
- the system dynamically selects and adjusts the string representations for the single field during operation. For instance, the system can track string use during operation, and then adjust the set of string types and string representations based on the actual distribution of string lengths and the distribution of hash values for the string objects.
- one embodiment of the present invention encodes two values in a single field.
- the system creates compact string headers that use a single field in the string header to hold both a string length value for the string as well as a hash value for the string.
- the system may use up to all but one of the bits of the single field to store the string length.
- the system can use a set of bits not used for storing the string length (e.g., for shorter strings) to store a hash code, and then uses the entire single field as a hash value for the string.
- the typical distribution of string lengths in programs works in conjunction with the described string representations to insure that the hash values of short strings are well distributed by the combination of the string length and hash code fields, while the hash distribution for long strings is also well distributed by the low likelihood that multiple long strings will have the same length.
- the system saves memory space by reducing the size of the string header without incurring significant additional compute overhead.
- one embodiment of the present invention combines a string length value and a hash value into a single field
- the described technique can also be used to combine two fields for other purposes as well.
Abstract
Description
Claims (20)
Priority Applications (1)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US12/120,085 US7592930B1 (en) | 2008-05-13 | 2008-05-13 | Method and apparatus for reducing memory usage by encoding two values in a single field |
Applications Claiming Priority (1)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US12/120,085 US7592930B1 (en) | 2008-05-13 | 2008-05-13 | Method and apparatus for reducing memory usage by encoding two values in a single field |
Publications (1)
Publication Number | Publication Date |
---|---|
US7592930B1 true US7592930B1 (en) | 2009-09-22 |
Family
ID=41076976
Family Applications (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
US12/120,085 Active US7592930B1 (en) | 2008-05-13 | 2008-05-13 | Method and apparatus for reducing memory usage by encoding two values in a single field |
Country Status (1)
Country | Link |
---|---|
US (1) | US7592930B1 (en) |
Cited By (5)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20140222945A1 (en) * | 2013-02-01 | 2014-08-07 | International Business Machines Corporation | Boosting Remote Direct Memory Access Performance Using Cryptographic Hash Based Approach |
US8893099B1 (en) | 2011-11-30 | 2014-11-18 | Google Inc. | Inner function local variable name shadowing |
CN112232025A (en) * | 2019-06-26 | 2021-01-15 | 杭州海康威视数字技术股份有限公司 | Character string storage method and device and electronic equipment |
US10962595B1 (en) * | 2017-12-04 | 2021-03-30 | Synopsys, Inc. | Efficient realization of coverage collection in emulation |
CN114397851A (en) * | 2021-11-23 | 2022-04-26 | 青岛奥利普自动化控制系统有限公司 | Method, device and equipment for processing invalid characters in PLC character string |
Citations (4)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US5852664A (en) * | 1995-07-10 | 1998-12-22 | Intel Corporation | Decode access control for encoded multimedia signals |
US6920461B2 (en) * | 2001-07-10 | 2005-07-19 | Microsoft Corp. | Application program interface for network software platform |
US7028287B2 (en) * | 2001-11-14 | 2006-04-11 | Sun Microsystems, Inc. | Method and apparatus for facilitating compact object headers |
US7356848B1 (en) * | 1999-10-19 | 2008-04-08 | Thomson Licensing | System and method of verifying authorization for communicating protected content |
-
2008
- 2008-05-13 US US12/120,085 patent/US7592930B1/en active Active
Patent Citations (4)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US5852664A (en) * | 1995-07-10 | 1998-12-22 | Intel Corporation | Decode access control for encoded multimedia signals |
US7356848B1 (en) * | 1999-10-19 | 2008-04-08 | Thomson Licensing | System and method of verifying authorization for communicating protected content |
US6920461B2 (en) * | 2001-07-10 | 2005-07-19 | Microsoft Corp. | Application program interface for network software platform |
US7028287B2 (en) * | 2001-11-14 | 2006-04-11 | Sun Microsystems, Inc. | Method and apparatus for facilitating compact object headers |
Cited By (8)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US8893099B1 (en) | 2011-11-30 | 2014-11-18 | Google Inc. | Inner function local variable name shadowing |
US20140222945A1 (en) * | 2013-02-01 | 2014-08-07 | International Business Machines Corporation | Boosting Remote Direct Memory Access Performance Using Cryptographic Hash Based Approach |
US9218314B2 (en) * | 2013-02-01 | 2015-12-22 | International Business Machines Corporation | Boosting remote direct memory access performance using cryptographic hash based approach |
US9930044B2 (en) | 2013-02-01 | 2018-03-27 | International Business Machines Corporation | Boosting remote direct memory access performance using cryptographic hash based approach |
US10962595B1 (en) * | 2017-12-04 | 2021-03-30 | Synopsys, Inc. | Efficient realization of coverage collection in emulation |
CN112232025A (en) * | 2019-06-26 | 2021-01-15 | 杭州海康威视数字技术股份有限公司 | Character string storage method and device and electronic equipment |
CN112232025B (en) * | 2019-06-26 | 2023-11-03 | 杭州海康威视数字技术股份有限公司 | Character string storage method and device and electronic equipment |
CN114397851A (en) * | 2021-11-23 | 2022-04-26 | 青岛奥利普自动化控制系统有限公司 | Method, device and equipment for processing invalid characters in PLC character string |
Similar Documents
Publication | Publication Date | Title |
---|---|---|
US7461233B2 (en) | Method for identifying data characteristics for flash memory | |
US7447870B2 (en) | Device for identifying data characteristics for flash memory | |
US6505283B1 (en) | Efficient memory allocator utilizing a dual free-list structure | |
US8392881B1 (en) | Supporting efficient access to object properties in a dynamic object-oriented programming language | |
US8504792B2 (en) | Methods and apparatuses to allocate file storage via tree representations of a bitmap | |
US8412881B2 (en) | Modified B+ tree to store NAND memory indirection maps | |
EP3260993A1 (en) | File operation method and device | |
US7592930B1 (en) | Method and apparatus for reducing memory usage by encoding two values in a single field | |
US20080162782A1 (en) | Using Transacted Writes and Caching Mechanism to Improve Write Performance in Multi-Level Cell Flash Memory | |
US11314689B2 (en) | Method, apparatus, and computer program product for indexing a file | |
US7533234B2 (en) | Method and apparatus for storing compressed code without an index table | |
US20120011166A1 (en) | Skip list generation | |
US9519541B2 (en) | Data storage device and data checking and correction for volatile memory | |
CN111104347B (en) | Heap memory block searching method, device, equipment and storage medium | |
US8402221B2 (en) | Storing the most significant and the least significant bytes of characters at non-contiguous addresses | |
US20120136871A1 (en) | Skip list generation | |
US7401176B2 (en) | Method and system for fast access to stack memory | |
US20130339667A1 (en) | Special case register update without execution | |
US20080162856A1 (en) | Method for dynamic memory allocation on reconfigurable logic | |
US7299318B2 (en) | Method for reducing cache conflict misses | |
US7349909B2 (en) | Compact object header | |
KR20190123819A (en) | Method for managing of memory address mapping table for data storage device | |
US10236066B2 (en) | Method of managing semiconductor memories, corresponding interface, memory and device | |
CN107977282B (en) | Method and device for reading data page by SPI-Nand | |
US20090089768A1 (en) | Data management for dynamically compiled software |
Legal Events
Date | Code | Title | Description |
---|---|---|---|
AS | Assignment |
Owner name: GOOGLE INC., CALIFORNIAFree format text: ASSIGNMENT OF ASSIGNORS INTEREST;ASSIGNORS:AGER, MADS SIG;BAK, LARS;LUND, KASPER VERDICH;REEL/FRAME:021044/0375Effective date: 20080411 |
|
STCF | Information on status: patent grant |
Free format text: PATENTED CASE |
|
FEPP | Fee payment procedure |
Free format text: PAYER NUMBER DE-ASSIGNED (ORIGINAL EVENT CODE: RMPN); ENTITY STATUS OF PATENT OWNER: LARGE ENTITYFree format text: PAYOR NUMBER ASSIGNED (ORIGINAL EVENT CODE: ASPN); ENTITY STATUS OF PATENT OWNER: LARGE ENTITY |
|
FPAY | Fee payment |
Year of fee payment: 4 |
|
FPAY | Fee payment |
Year of fee payment: 8 |
|
AS | Assignment |
Owner name: GOOGLE LLC, CALIFORNIAFree format text: CHANGE OF NAME;ASSIGNOR:GOOGLE INC.;REEL/FRAME:044101/0610Effective date: 20170929 |
|
MAFP | Maintenance fee payment |
Free format text: PAYMENT OF MAINTENANCE FEE, 12TH YEAR, LARGE ENTITY (ORIGINAL EVENT CODE: M1553); ENTITY STATUS OF PATENT OWNER: LARGE ENTITYYear of fee payment: 12 |