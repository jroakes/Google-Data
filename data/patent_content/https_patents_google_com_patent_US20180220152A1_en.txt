US20180220152A1 - Multi-reference compound prediction using masking - Google Patents
Multi-reference compound prediction using masking Download PDFInfo
- Publication number
- US20180220152A1 US20180220152A1 US15/420,359 US201715420359A US2018220152A1 US 20180220152 A1 US20180220152 A1 US 20180220152A1 US 201715420359 A US201715420359 A US 201715420359A US 2018220152 A1 US2018220152 A1 US 2018220152A1
- Authority
- US
- United States
- Prior art keywords
- reference frames
- frame
- segment
- block
- mask
- Prior art date
- Legal status (The legal status is an assumption and is not a legal conclusion. Google has not performed a legal analysis and makes no representation as to the accuracy of the status listed.)
- Granted
Links
Images
Classifications
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04N—PICTORIAL COMMUNICATION, e.g. TELEVISION
- H04N19/00—Methods or arrangements for coding, decoding, compressing or decompressing digital video signals
- H04N19/10—Methods or arrangements for coding, decoding, compressing or decompressing digital video signals using adaptive coding
- H04N19/169—Methods or arrangements for coding, decoding, compressing or decompressing digital video signals using adaptive coding characterised by the coding unit, i.e. the structural portion or semantic portion of the video signal being the object or the subject of the adaptive coding
- H04N19/17—Methods or arrangements for coding, decoding, compressing or decompressing digital video signals using adaptive coding characterised by the coding unit, i.e. the structural portion or semantic portion of the video signal being the object or the subject of the adaptive coding the unit being an image region, e.g. an object
- H04N19/176—Methods or arrangements for coding, decoding, compressing or decompressing digital video signals using adaptive coding characterised by the coding unit, i.e. the structural portion or semantic portion of the video signal being the object or the subject of the adaptive coding the unit being an image region, e.g. an object the region being a block, e.g. a macroblock
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04N—PICTORIAL COMMUNICATION, e.g. TELEVISION
- H04N19/00—Methods or arrangements for coding, decoding, compressing or decompressing digital video signals
- H04N19/50—Methods or arrangements for coding, decoding, compressing or decompressing digital video signals using predictive coding
- H04N19/503—Methods or arrangements for coding, decoding, compressing or decompressing digital video signals using predictive coding involving temporal prediction
- H04N19/51—Motion estimation or motion compensation
- H04N19/573—Motion compensation with multiple frame prediction using two or more reference frames in a given prediction direction
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04N—PICTORIAL COMMUNICATION, e.g. TELEVISION
- H04N19/00—Methods or arrangements for coding, decoding, compressing or decompressing digital video signals
- H04N19/10—Methods or arrangements for coding, decoding, compressing or decompressing digital video signals using adaptive coding
- H04N19/102—Methods or arrangements for coding, decoding, compressing or decompressing digital video signals using adaptive coding characterised by the element, parameter or selection affected or controlled by the adaptive coding
- H04N19/119—Adaptive subdivision aspects, e.g. subdivision of a picture into rectangular or non-rectangular coding blocks
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04N—PICTORIAL COMMUNICATION, e.g. TELEVISION
- H04N19/00—Methods or arrangements for coding, decoding, compressing or decompressing digital video signals
- H04N19/10—Methods or arrangements for coding, decoding, compressing or decompressing digital video signals using adaptive coding
- H04N19/102—Methods or arrangements for coding, decoding, compressing or decompressing digital video signals using adaptive coding characterised by the element, parameter or selection affected or controlled by the adaptive coding
- H04N19/132—Sampling, masking or truncation of coding units, e.g. adaptive resampling, frame skipping, frame interpolation or high-frequency transform coefficient masking
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04N—PICTORIAL COMMUNICATION, e.g. TELEVISION
- H04N19/00—Methods or arrangements for coding, decoding, compressing or decompressing digital video signals
- H04N19/20—Methods or arrangements for coding, decoding, compressing or decompressing digital video signals using video object coding
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04N—PICTORIAL COMMUNICATION, e.g. TELEVISION
- H04N19/00—Methods or arrangements for coding, decoding, compressing or decompressing digital video signals
- H04N19/50—Methods or arrangements for coding, decoding, compressing or decompressing digital video signals using predictive coding
- H04N19/503—Methods or arrangements for coding, decoding, compressing or decompressing digital video signals using predictive coding involving temporal prediction
- H04N19/51—Motion estimation or motion compensation
- H04N19/56—Motion estimation with initialisation of the vector search, e.g. estimating a good candidate to initiate a search
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04N—PICTORIAL COMMUNICATION, e.g. TELEVISION
- H04N19/00—Methods or arrangements for coding, decoding, compressing or decompressing digital video signals
- H04N19/50—Methods or arrangements for coding, decoding, compressing or decompressing digital video signals using predictive coding
- H04N19/503—Methods or arrangements for coding, decoding, compressing or decompressing digital video signals using predictive coding involving temporal prediction
- H04N19/51—Motion estimation or motion compensation
- H04N19/577—Motion compensation with bidirectional frame interpolation, i.e. using B-pictures
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04N—PICTORIAL COMMUNICATION, e.g. TELEVISION
- H04N19/00—Methods or arrangements for coding, decoding, compressing or decompressing digital video signals
- H04N19/50—Methods or arrangements for coding, decoding, compressing or decompressing digital video signals using predictive coding
- H04N19/503—Methods or arrangements for coding, decoding, compressing or decompressing digital video signals using predictive coding involving temporal prediction
- H04N19/51—Motion estimation or motion compensation
- H04N19/58—Motion compensation with long-term prediction, i.e. the reference frame for a current frame not being the temporally closest one
Definitions
- Digital video streams may represent video using a sequence of frames or still images.
- Digital video can be used for various applications including, for example, video conferencing, high definition video entertainment, video advertisements, or sharing of user-generated videos.
- a digital video stream can contain a large amount of data and consume a significant amount of computing or communication resources of a computing device for processing, transmission or storage of the video data.
- Various approaches have been proposed to reduce the amount of data in video streams, including compression and other encoding techniques.
- the disclosure relates in general to video coding and in particular to multi-reference compound prediction using masking for encoding and decoding blocks of video frames.
- One aspect of the disclosed implementations is a method for encoding frames of a video sequence.
- the method includes determining, using a first set of reference frames, a mask for segmenting a current block of a current frame of the video sequence into at least a first segment and a second segment; generating, for the first segment of the current block, a first predictor using the first set of reference frames; and generating, for the second segment of the current block, a second predictor using a second set of reference frames, wherein the first set of reference frames is a subset of the second set of reference frames.
- Another aspect of the disclosed implementations is a method for decoding frames of a video sequence from an encoded video bitstream.
- the method includes determining, using a first set of reference frames, a mask for segmenting a current block of a current frame of the video sequence into at least a first segment and a second segment; generating, for the first segment of the current block, a first predictor using the first set of reference frames; and generating, for the second segment of the current block, a second predictor using a second set of reference frames, wherein the first set of reference frames is a subset of the second set of reference frames.
- the apparatus can be used for decoding frames of a video sequence from an encoded video bitstream.
- the processor is configured to execute instructions stored in the memory to determine, using a first set of reference frames, a mask for segmenting a current block of a current frame of the video sequence into at least a first segment and a second segment; generate, for the first segment of the current block, a first predictor using the first set of reference frames; and generate, for the second segment of the current block, a second predictor using a second set of reference frames, wherein the first set of reference frames is a subset of the second set of reference frames.
- FIG. 1 is a schematic of a video encoding and decoding system.
- FIG. 2 is a block diagram of an example of a computing device that can implement a transmitting station or a receiving station.
- FIG. 3 is a diagram of a video stream to be encoded and subsequently decoded.
- FIG. 4 is a block diagram of an encoder according to implementations of this disclosure.
- FIG. 5 is a block diagram of a decoder according to implementations of this disclosure.
- FIG. 6 is a flowchart diagram of an example of a reference frame buffer.
- FIG. 7 is a flowchart diagram of an example process for encoding or decoding blocks of a current frame using masked compound prediction.
- FIG. 8A is a diagram showing an example of a mask adaptively determined for a block according to an implementation.
- FIG. 8B is a diagram showing an example of a mask codebook available for a block according to another implementation.
- Compression schemes related to coding video streams may include breaking each image into blocks and generating a digital video output bitstream using one or more techniques to limit the information included in the output.
- a received bitstream can be decoded to re-create the blocks and the source images from the limited information.
- Encoding a video stream, or a portion thereof, such as a frame or a block can include using temporal and spatial similarities in the video stream to improve coding efficiency.
- a current block of a video stream may be encoded based on a previously encoded block in the video stream by predicting motion and color information for the current block based on the previously encoded block and identifying a difference (residual) between the predicted values and the current block.
- Inter-prediction uses one or more motion vectors to generate a block (also called a prediction block) that resembles a current block to be encoded using previously encoded and decoded pixels.
- a decoder receiving the encoded signal can re-create the current block.
- a motion vector used to generate a prediction block refers to a frame other than a current frame, i.e., a reference frame.
- Reference frames can be located before or after the current frame in the sequence of the video stream.
- a block may be predicted from a single reference frame (“single prediction”) or compound, such as two, reference frames (“compound prediction”). For example, a motion search that attempts each of the available inter-prediction modes using single or compound modes can be performed.
- a predictor e.g., a prediction block
- a combination such as an average (or weighted average) of the predictors can be used to predict the block.
- a compound prediction using masking is a special type of compound prediction, where a mask is used to segment the current block into segments.
- the current block can be segmented into a “foreground” segment and a “background” segment, based on motion characteristics.
- Each segment can be inter-predicted and encoded using different reference frames and motion vector combinations. It is also possible to use inter-prediction and intra-prediction for different segments within the same block.
- a mask for segmenting a block can be determined, using a first set of reference frames, such as a pair of forward reference frame and a backward reference frame selected from a set of candidate reference frames available to a current frame.
- the first set of reference frames can be determined by ranking the candidate reference frames based on, for example, distances to the current frame (e.g., “nearest”), popularity values or a combination of distances and popularity values.
- the mask can be determined for the block adaptively, for example, based on motion characteristics of the video content, such as by comparing two prediction blocks based on the pair of reference frames, and setting a threshold on the absolute difference values between the two prediction blocks.
- the mask can also be determined using a mask codebook, which includes predetermined block segmentation patterns.
- a special coding mode such as a mask mode, can be encoded into the block header without having encoding the mask itself.
- the first set of reference frames which have been used to determine the mask, can be reused to predict one or more segments determined by the mask. For example, a compound predictor for a “background” segment can be determined by averaging the predictors from the pair of reference frames. As mentioned, the first set of reference frames does not need to be explicitly encoded. Reusing the first set of reference frames for predicting one or more segments can further reduce the bits coded into the video bitstream.
- a third (or even a fourth) reference frame and a new motion vector can be searched for and used for inter prediction.
- the masked compound prediction adapts to the motion characteristic of the video content in the current block.
- the second segment can be predicted using single prediction, or compound prediction, or intra-prediction, based on results of the motion search.
- FIG. 1 is a schematic of a video encoding and decoding system 100 .
- a transmitting station 102 can be, for example, a computer having an internal configuration of hardware such as that described in FIG. 2 .
- the processing of the transmitting station 102 can be distributed among multiple devices.
- a network 104 can connect the transmitting station 102 and a receiving station 106 for encoding and decoding of the video stream.
- the video stream can be encoded in the transmitting station 102 and the encoded video stream can be decoded in the receiving station 106 .
- the network 104 can be, for example, the Internet.
- the network 104 can also be a local area network (LAN), wide area network (WAN), virtual private network (VPN), cellular telephone network or any other means of transferring the video stream from the transmitting station 102 to, in this example, the receiving station 106 .
- LAN local area network
- WAN wide area network
- VPN virtual private network
- the receiving station 106 in one example, can be a computer having an internal configuration of hardware such as that described in FIG. 2 . However, other suitable implementations of the receiving station 106 are possible. For example, the processing of the receiving station 106 can be distributed among multiple devices.
- an implementation can omit the network 104 .
- a video stream can be encoded and then stored for transmission at a later time to the receiving station 106 or any other device having memory.
- the receiving station 106 receives (e.g., via the network 104 , a computer bus, and/or some communication pathway) the encoded video stream and stores the video stream for later decoding.
- a real-time transport protocol RTP
- a transport protocol other than RTP may be used, e.g., an HTTP-based video streaming protocol.
- the transmitting station 102 and/or the receiving station 106 may include the ability to both encode and decode a video stream as described below.
- the receiving station 106 could be a video conference participant who receives an encoded video bitstream from a video conference server (e.g., the transmitting station 102 ) to decode and view and further encodes and transmits its own video bitstream to the video conference server for decoding and viewing by other participants.
- FIG. 2 is a block diagram of an example of a computing device 200 that can implement a transmitting station or a receiving station.
- the computing device 200 can implement one or both of the transmitting station 102 and the receiving station 106 of FIG. 1 .
- the computing device 200 can be in the form of a computing system including multiple computing devices, or in the form of a single computing device, for example, a mobile phone, a tablet computer, a laptop computer, a notebook computer, a desktop computer, and the like.
- a CPU 202 in the computing device 200 can be a central processing unit.
- the CPU 202 can be any other type of device, or multiple devices, capable of manipulating or processing information now-existing or hereafter developed.
- the disclosed implementations can be practiced with a single processor as shown, e.g., the CPU 202 , advantages in speed and efficiency can be achieved using more than one processor.
- a memory 204 in the computing device 200 can be a read-only memory (ROM) device or a random access memory (RAM) device in an implementation. Any other suitable type of storage device can be used as the memory 204 .
- the memory 204 can include code and data 206 that is accessed by the CPU 202 using a bus 212 .
- the memory 204 can further include an operating system 208 and application programs 210 , the application programs 210 including at least one program that permits the CPU 202 to perform the methods described here.
- the application programs 210 can include applications 1 through N, which further include a video coding application that performs the methods described here.
- the computing device 200 can also include a secondary storage 214 , which can, for example, be a memory card used with a computing device 200 that is mobile. Because the video communication sessions may contain a significant amount of information, they can be stored in whole or in part in the secondary storage 214 and loaded into the memory 204 as needed for processing.
- the computing device 200 can also include one or more output devices, such as a display 218 .
- the display 218 may be, in one example, a touch sensitive display that combines a display with a touch sensitive element that is operable to sense touch inputs.
- the display 218 can be coupled to the CPU 202 via the bus 212 .
- Other output devices that permit a user to program or otherwise use the computing device 200 can be provided in addition to or as an alternative to the display 218 .
- the output device is or includes a display
- the display can be implemented in various ways, including by a liquid crystal display (LCD), a cathode-ray tube (CRT) display or light emitting diode (LED) display, such as an organic LED (OLED) display.
- LCD liquid crystal display
- CRT cathode-ray tube
- LED light emitting diode
- OLED organic LED
- the computing device 200 can also include or be in communication with an image-sensing device 220 , for example a camera, or any other image-sensing device 220 now existing or hereafter developed that can sense an image such as the image of a user operating the computing device 200 .
- the image-sensing device 220 can be positioned such that it is directed toward the user operating the computing device 200 .
- the position and optical axis of the image-sensing device 220 can be configured such that the field of vision includes an area that is directly adjacent to the display 218 and from which the display 218 is visible.
- the computing device 200 can also include or be in communication with a sound-sensing device 222 , for example a microphone, or any other sound-sensing device now existing or hereafter developed that can sense sounds near the computing device 200 .
- the sound-sensing device 222 can be positioned such that it is directed toward the user operating the computing device 200 and can be configured to receive sounds, for example, speech or other utterances, made by the user while the user operates the computing device 200 .
- FIG. 2 depicts the CPU 202 and the memory 204 of the computing device 200 as being integrated into a single unit, other configurations can be utilized.
- the operations of the CPU 202 can be distributed across multiple machines (each machine having one or more of processors) that can be coupled directly or across a local area or other network.
- the memory 204 can be distributed across multiple machines such as a network-based memory or memory in multiple machines performing the operations of the computing device 200 .
- the bus 212 of the computing device 200 can be composed of multiple buses.
- the secondary storage 214 can be directly coupled to the other components of the computing device 200 or can be accessed via a network and can comprise a single integrated unit such as a memory card or multiple units such as multiple memory cards.
- the computing device 200 can thus be implemented in a wide variety of configurations.
- FIG. 3 is a diagram of an example of a video stream 300 to be encoded and subsequently decoded.
- the video stream 300 includes a video sequence 302 .
- the video sequence 302 includes a number of adjacent frames 304 . While three frames are depicted as the adjacent frames 304 , the video sequence 302 can include any number of adjacent frames 304 .
- the adjacent frames 304 can then be further subdivided into individual frames, e.g., a frame 306 .
- the frame 306 can be divided into a series of segments 308 or planes.
- the segments 308 can be subsets of frames that permit parallel processing, for example.
- the segments 308 can also be subsets of frames that can separate the video data into separate colors.
- the frame 306 of color video data can include a luminance plane and two chrominance planes.
- the segments 308 may be sampled at different resolutions.
- the frame 306 may be further subdivided into blocks 310 , which can contain data corresponding to, for example, 16 ⁇ 16 pixels in the frame 306 .
- the blocks 310 can also be arranged to include data from one or more segments 308 of pixel data.
- the blocks 310 can also be of any other suitable size such as 4 ⁇ 4 pixels, 8 ⁇ 8 pixels, 16 ⁇ 8 pixels, 8 ⁇ 16 pixels, 16 ⁇ 16 pixels or larger. Unless otherwise noted, the terms block and macroblock are used interchangeably herein.
- FIG. 4 is a block diagram of an encoder 400 in accordance with implementations of this disclosure.
- the encoder 400 can be implemented, as described above, in the transmitting station 102 such as by providing a computer software program stored in memory, for example, the memory 204 .
- the computer software program can include machine instructions that, when executed by a processor such as the CPU 202 , cause the transmitting station 102 to encode video data in the manner described in FIG. 4 .
- the encoder 400 can also be implemented as specialized hardware included in, for example, the transmitting station 102 .
- the encoder 400 can be a hardware encoder.
- the encoder 400 has the following stages to perform the various functions in a forward path (shown by the solid connection lines) to produce an encoded or compressed bitstream 420 using the video stream 300 as input: an intra/inter prediction stage 402 , a transform stage 404 , a quantization stage 406 , and an entropy encoding stage 408 .
- the encoder 400 may also include a reconstruction path (shown by the dotted connection lines) to reconstruct a frame for encoding of future blocks.
- the encoder 400 has the following stages to perform the various functions in the reconstruction path: a dequantization stage 410 , an inverse transform stage 412 , a reconstruction stage 414 , and a loop filtering stage 416 .
- Other structural variations of the encoder 400 can be used to encode the video stream 300 .
- a block can be encoded using intra-frame prediction (also called intra-prediction) or inter-frame prediction (also called inter-prediction), or a combination both.
- intra-frame prediction also called intra-prediction
- inter-frame prediction also called inter-prediction
- a prediction block can be formed.
- intra-prediction all or a part of a prediction block may be formed from samples in the current frame that have been previously encoded and reconstructed.
- inter-prediction all or part of a prediction block may be formed from samples in one or more previously constructed reference frames determined using motion vectors.
- blocks may be predicted from a single reference frame (“single prediction”) or compound, such as two, reference frames (“compound prediction”).
- compound prediction Various inter-prediction modes may be tested. For example, a motion search that attempts each of the available inter-prediction modes using single or compound modes can be used. In the case of compound prediction, two or more motion vectors can be obtained through a joint search between two or more reference frames.
- a bit cost of encoding the current block using the inter-prediction mode including the bits required to signal the inter-prediction mode, the reference frame(s), the residual block generated from the current block, and, if required, one or more motion vector(s) or motion vector differential(s), and the resulting error in the pixel values between the original values and the reconstructed values are calculated.
- the inter-prediction mode and reference frame(s) resulting in the lowest rate-distortion value may be selected as the inter-prediction mode for the current block.
- the prediction block can be subtracted from the current block at the intra/inter prediction stage 402 to produce a residual block (also called a residual).
- the transform stage 404 transforms the residual into transform coefficients in, for example, the frequency domain using block-based transforms.
- block-based transforms include, for example, the Discrete Cosine Transform (DCT) and the Asymmetric Discrete Sine Transform (ADST).
- DCT Discrete Cosine Transform
- ADST Asymmetric Discrete Sine Transform
- combinations of different transforms may be applied to a single residual.
- the DCT transforms the residual block into the frequency domain where the transform coefficient values are based on spatial frequency.
- the lowest frequency (DC) coefficient at the top-left of the matrix and the highest frequency coefficient at the bottom-right of the matrix may be different from the size of the transform block.
- the prediction block may be split into smaller blocks to which separate transforms are applied.
- the quantization stage 406 converts the transform coefficients into discrete quantum values, which are referred to as quantized transform coefficients, using a quantizer value or a quantization level. For example, the transform coefficients may be divided by the quantizer value and truncated.
- the quantized transform coefficients are then entropy encoded by the entropy encoding stage 408 . Entropy coding may be performed using any number of techniques, including token and binary trees.
- the entropy-encoded coefficients, together with other information used to decode the block, which may include for example the type of prediction used, transform type, motion vectors and quantizer value, are then output to the compressed bitstream 420 .
- the information to decode the block may be entropy coded into block, frame, slice and/or section headers within the compressed bitstream 420 .
- the compressed bitstream 420 can be formatted using various techniques, such as variable length coding (VLC) or arithmetic coding.
- VLC variable length coding
- the compressed bitstream 420 can also be referred to as an encoded video stream or encoded video bitstream, and the terms will be used interchangeably herein.
- the reconstruction path in FIG. 4 can be used to ensure that both the encoder 400 and a decoder 500 (described below) use the same reference frames and blocks to decode the compressed bitstream 420 .
- the reconstruction path performs functions that are similar to functions that take place during the decoding process that are discussed in more detail below, including dequantizing the quantized transform coefficients at the dequantization stage 410 and inverse transforming the dequantized transform coefficients at the inverse transform stage 412 to produce a derivative residual block (also called a derivative residual).
- the prediction block that was predicted at the intra/inter prediction stage 402 can be added to the derivative residual to create a reconstructed block.
- the loop filtering stage 416 can be applied to the reconstructed block to reduce distortion such as blocking artifacts.
- encoder 400 can be used to encode the compressed bitstream 420 .
- a non-transform based encoder 400 can quantize the residual signal directly without the transform stage 404 for certain blocks or frames.
- an encoder 400 can have the quantization stage 406 and the dequantization stage 410 combined into a single stage.
- FIG. 5 is a block diagram of a decoder 500 in accordance with implementations of this disclosure.
- the decoder 500 can be implemented in the receiving station 106 , for example, by providing a computer software program stored in the memory 204 .
- the computer software program can include machine instructions that, when executed by a processor such as the CPU 202 , cause the receiving station 106 to decode video data in the manner described in FIG. 10 below.
- the decoder 500 can also be implemented in hardware included in, for example, the transmitting station 102 or the receiving station 106 .
- the decoder 500 similar to the reconstruction path of the encoder 400 discussed above, includes in one example the following stages to perform various functions to produce an output video stream 516 from the compressed bitstream 420 : an entropy decoding stage 502 , a dequantization stage 504 , an inverse transform stage 506 , an intra/inter prediction stage 508 , a reconstruction stage 510 , a loop filtering stage 512 , and a deblocking filtering stage 514 .
- Other structural variations of the decoder 500 can be used to decode the compressed bitstream 420 .
- the data elements within the compressed bitstream 420 can be decoded by the entropy decoding stage 502 to produce a set of quantized transform coefficients.
- the dequantization stage 504 dequantizes the quantized transform coefficients (e.g., by multiplying the quantized transform coefficients by the quantizer value), and the inverse transform stage 506 inverse transforms the dequantized transform coefficients using the selected transform type to produce a derivative residual that can be identical to that created by the inverse transform stage 412 in the encoder 400 .
- the decoder 500 can use the intra/inter prediction stage 508 to create the same prediction block as was created in the encoder 400 , e.g., at the intra/inter prediction stage 402 . Implementations for forming a same prediction block as was created in the encoded 400 using masked compound prediction from multiple reference frames are discussed below with respect to FIGS. 6, 7, 8A, and 8B , for example.
- the prediction block can be added to the derivative residual to create a reconstructed block.
- the loop filtering stage 512 can be applied to the reconstructed block to reduce blocking artifacts, followed by the deblocking filtering stage 514 .
- the result is output as an output video stream 516 .
- the output video stream 516 can also be referred to as a decoded video stream, and the terms will be used interchangeably herein.
- decoder 500 can be used to decode the compressed bitstream 420 .
- the decoder 500 can produce the output video stream 516 without the deblocking filtering stage 514 .
- multiple reference frames can be used to obtain the motion vector(s) of a current block during inter-prediction.
- a block can be predicted using a single reference frame (i.e., “single prediction” using a single motion vector), or using a combination of multiple reference frames (e.g., “compound prediction” using two or more reference frames and motion vectors).
- a predictor e.g., a prediction block
- the final prediction block can be determined as a combination of the predictors, such as an average (or weighted average) of the predictors.
- the choice of compound prediction can be made at the frame level, or specified for those blocks that are inter-predicted.
- Each motion vector can refer to one of several available reference frames.
- a signal can be sent indicating that the reference frame that includes the motion vector reference is one of the available reference frames.
- the signal can be a shorter sequence of bits that identifies the type of reference frame.
- a current frame may be encoded using a reference frame such as a “last frame,” the adjacent frame immediately before the current frame in the video sequence.
- a reference frame such as a “last frame,” the adjacent frame immediately before the current frame in the video sequence.
- Encoding video frames may occur, for example, in the coding of so-called “alternate reference frames” that are not temporally neighboring to the frames coded immediately before or after them.
- An alternate reference frame may be a synthesized frame that does not occur in the input video stream or is a duplicate frame to one in the input video stream that is used for prediction and is generally not displayed following decoding.
- Such a frame can resemble a video frame in the non-adjacent future.
- Another example in which out of order encoding may occur is through the use of a so-called “golden frame,” which is a reconstructed video frame that may or may not be neighboring to a current frame and is stored in memory for use as a reference frame until replaced, e.g., by a new golden frame.
- FIG. 6 is a block diagram of an example of a reference frame buffer 600 .
- the reference frame buffer 600 stores reference frames used to encode or decode blocks of frames of a video sequence.
- the reference frame buffer 600 includes a last frame LAST_FRAME 602 , a golden frame GOLDEN_FRAME 604 , and an alternative reference frame ALTREF_FRAME 606 .
- the last frame LAST_FRAME 602 can be, for example, the adjacent frame immediately before the current frame in the video sequence, which is a forward reference frame.
- the golden frame GOLDEN_FRAME 604 can be, for example, a reconstructed video frame for use as a reference frame that may or may not be adjacent to the current frame.
- the alternative reference frame ALTREF_FRAME 606 can be, for example, a video frame in the non-adjacent future, which is a backward reference frame.
- the frame header of a reference frame includes a virtual index 608 to a location within the reference frame buffer 600 at which the reference frame is stored.
- a reference frame mapping 612 maps the virtual index 608 of a reference frame to a physical index 614 of memory at which the reference frame is stored. Where two reference frames are the same frame, those reference frames will have the same physical index even if they have different virtual indexes.
- One or more refresh flags 610 can be used to remove one or more of the stored reference frames from the reference frame buffer 600 , for example, to clear space in the reference frame buffer 600 for new reference frames, where there are no further blocks to encode or decode using the stored reference frames, or where a new golden frame is encoded or decoded.
- the reference frames stored in the reference frame buffer 600 can be used to identify motion vectors for predicting blocks of frames to be encoded or decoded. Different reference frames may be used depending on the type of prediction used to predict a current block of a current frame. For example, in bi-prediction, blocks of the current frame can be forward predicted using either the LAST_FRAME 602 or the GOLDEN_FRAME 604 , or backward predicted using the ALTREF_FRAME 606 . When compound prediction is used, multiple frames, such as one for forward prediction (e.g., LAST_FRAME 602 or GOLDEN_FRAME 604 ) and one for backward prediction (e.g., ALTREF_FRAME 606 ) can be used for predicting the current block.
- forward prediction e.g., LAST_FRAME 602 or GOLDEN_FRAME 604
- ALTREF_FRAME 606 backward prediction
- the reference frame buffer 600 can store up to eight reference frames, wherein each stored reference frame may be associated with a different virtual index 602 of the reference frame buffer. Although three of the eight spaces in the reference frame buffer 600 are used by the LAST_FRAME 602 , the GOLDEN_FRAME 604 , and the ALTREF_FRAME 606 , five spaces remain available to store other reference frames.
- one or more available spaces in the reference frame buffer 600 may be used to store a second last frame LAST2_FRAME and/or a third last frame LAST3_FRAME as additional forward reference frames, in addition to the LAST_FRAME 602 .
- a backward frame BWDREF_FRAME may be stored as an additional backward prediction reference frame, in addition to ALTREF_FRAME 606 .
- the BWDREF_FRAME can be closer in relative distance to the current frame than the ALTREF_FRAME 606 , for example.
- the reference motion vector candidate list may be constructed as described for each reference frame associated with a previously coded block or sub-block. For example, up to six reference frames may be available for each frame as described above—e.g., LAST_FRAME 602 , LAST2_FRAME, LAST3_FRAME, GOLDEN_FRAME 604 , ALTREF_FRAME 606 , and BWDREF_FRAME. In this case, separate reference motion vector candidate list may be constructed using those previously coded blocks or sub-blocks having motion vectors pointing each of the candidate reference frames. The last frame is updated for each frame, and the alt reference frame and golden reference frame may be updated less frequently, for example.
- the reference frame buffer 600 is shown as being able to store up to eight reference frames, other implementations of the reference frame buffer 600 may be able to store additional or fewer reference frames. Furthermore, one or more available spaces in the reference frame buffer 600 may be used to store additional alternative reference frames (e.g., ALTREF1_FRAME, ALTREF2_FRAME, etc., wherein the original alternative reference frame ALTREF_FRAME 606 could be referred to as ALTREF0_FRAME).
- the ALTREF_FRAME 606 is a frame of a video sequence that is distant from a current frame in a display order, but is encoded or decoded earlier than it is displayed. For example, the ALTREF_FRAME 606 may be ten, twelve, or more (or fewer) frames after the current frame in a display order.
- BWDREF_FRAME or the additional alternative reference frames can be frames located nearer to the current frame in the display order.
- BWDREF_FRAME can be one frame after the current frame in the display order.
- a first additional alternative reference frame, ALTREF2_FRAME can be five or six frames after the current frame in the display order
- ALTREF3_FRAME can be three or four frames after the current frame in the display order. Being closer to the current frame in display order increases the likelihood of the features of a reference frame being more similar to those of the current frame.
- one or more of the BWDREF_FRAME or additional alternative reference frames can be stored in the reference frame buffer 600 as additional options usable for backward prediction.
- FIG. 7 is a flowchart diagram of a process 700 for encoding or decoding blocks of a current frame using masked compound prediction from multiple reference frames according to implementations of this disclosure.
- the process 700 can be implemented in an encoder such as the encoder 400 and can be implemented, for example, as a software program that can be executed by computing devices such as transmitting station 102 .
- the process 700 can also be implemented in a decoder such as the decoder 500 and can be implemented, for example, as a software program that can be executed by computing devices such as receiving station 106 .
- the software program can include machine-readable instructions that can be stored in a memory such as the memory 204 or the secondary storage 214 , and that can be executed by a processor, such as CPU 202 , to cause the computing device to perform the process 700 .
- the process 700 can be performed in whole or in part by the intra/inter prediction stage 402 of the encoder 400 or the intra/inter prediction stage 508 of the decoder 500 .
- the process 700 can be implemented using specialized hardware or firmware.
- Some computing devices can have multiple memories, multiple processors, or both.
- the steps or operations of the process 700 can be distributed using different processors, memories, or both.
- Use of the terms “processor” or “memory” in the singular encompasses computing devices that have one processor or one memory as well as devices that have multiple processors or multiple memories that can be used in the performance of some or all of the recited steps.
- process 700 is implemented by a decoder such as the decoder 500
- the decoder determines whether the current block was encoded using single or compound prediction. This information can be communicated by reading and decoding bits from an encoded video bitstream (e.g., compressed bitstream 420 ) that indicate the coding mode(s), the one or more than one motion vectors was used to encode the current block.
- an encoded video bitstream e.g., compressed bitstream 420
- the encoded bitstream (or encoded video data) may be received by a decoder of a computing device in any number of ways, such as by receiving the video data over a network, over a cable, or by reading the video data from a primary memory or other storage device, including a disk drive or removable media such as a DVD, CompactFlash (CF) card, Secure Digital (SD) card, or any other device capable of communicating a video stream.
- a decoder of a computing device in any number of ways, such as by receiving the video data over a network, over a cable, or by reading the video data from a primary memory or other storage device, including a disk drive or removable media such as a DVD, CompactFlash (CF) card, Secure Digital (SD) card, or any other device capable of communicating a video stream.
- This information can be included in a header associated with a current block or a frame header, for example.
- a mask for segmenting a current block of a current frame of the video sequence into at least a first segment and a second segment is determined, using a first set of reference frames.
- the first set of reference frames can be determined, for example, based on distances between respective ones of a set of candidate reference frames identified for the current frame and the current frame of the video sequence.
- the encoder and the decoder can follow the same procedure to obtain the same set of reference frames.
- the first set of reference frames can be selected from the reference frames available for the current frame in the reference frame buffer 600 , such as LAST_FRAME 602 , LAST2_FRAME, LAST3_FRAME, GOLDEN_FRAME 604 , ALTREF_FRAME 606 , and BWDREF_FRAME.
- the first set of reference frames can also be determined by ranking the reference frames based on, for example, popularity values or a combination of distances and popularity values.
- the first set of reference frames can include a pair of a forward reference frame and a backward reference frame selected from the set of candidate reference frames. Both the forward reference frame and the backward reference frame can be selected based on distances between those frames and the current frame, such as having the shortest distance in display order (“nearest”) to the current frame.
- the pair of ⁇ LAST_FRAME, BWDREF_FRAME ⁇ can be established for coding the current frame as a bi-predictive frame.
- LAST_FRAME is a “nearest” forward reference frame for forward prediction
- BWDREF_FRAME is a “nearest” backward reference frame for backward prediction.
- single or compound prediction may be selected to inter-predict the current block.
- multiple, such as two, reference frames and motion vectors can be used to predict the current block.
- a compound prediction using masking is a special type of compound prediction, where a mask is used to segment the current block into segments. For example, the current block can be segmented into a “foreground” segment and a “background” segment, based on motion characteristics. Each segment can be inter-predicted and encoded using different reference frames and motion vector combinations. It is also possible to use inter-prediction for a segment and intra-prediction for the other segment within the same block.
- a mask can be determined for the current block adaptively, for example, based on motion characteristics of the video content. Determining the mask for the current block can include, for example, comparing a first prediction block with a second prediction block to determine a block of differential values, wherein the first prediction block is determined using a first frame of the first set of reference frames, and the second prediction block is determined using a second frame of the first set of reference frames.
- a corresponding value from the block of differential values e.g., the absolute difference value
- a pixel can be assigned to a corresponding segment (e.g., the foreground segment or the background segment). For example, a threshold can be set to “5” and any pixel having an absolute difference value greater than 5 can be assigned to the foreground segment. Otherwise, the pixel is assigned to the background segment. Pixels in the background segment tend to have lower level of motions.
- an initial mask can be determined using the techniques described above, including comparing the two prediction blocks and setting a threshold on the absolute difference values between the two prediction blocks.
- the initial mask can be further refined by morphological operations such as erosion and dilation to generate the final mask.
- a special coding mode such as a mask mode, can be encoded into the video bitstream for the current block without encoding the mask.
- the video bitstream can be compressed bitstream 420 .
- the special coding mode can be signaled in the block header, for example.
- the mask itself does not need to be encoded. Since both the encoder and the decoder follow the same procedure as described above to derive the mask, there is no need to encode the mask itself.
- the decoder can derive the mask from an encoded bitstream of the video sequence using the same set of reference frames, which are reconstructed and stored in the reference frame buffer.
- FIG. 8A is diagram showing an example of a mask adaptively determined for a block.
- Compound prediction is used and the two reference frames determined for the block is the pair of ⁇ LAST_FRAME, BWDREF_FRAME ⁇ .
- the pixels are assigned to two segments: the foreground segment 802 (shaded areas 802 a and 802 b ), and the background segment 804 (white areas 804 a and 804 b ).
- the mask itself does not need to be explicitly signaled in the video bitstream.
- the mask can also be further refined using morphological operations such as erosion and dilation.
- the mask can also be determined using a mask codebook, which includes predetermined block segmentation patterns.
- FIG. 8B is a diagram showing an example of a mask codebook 850 available for a block.
- the mask codebook 850 includes a predetermined set of mask candidates. Both the encoder and the decoder can follow the same procedure to select/identify the same mask candidate from the mask codebook 850 for coding the current block.
- the code for the selected mask can be either signaled to the decoder in the video bitstream, or it can be derived based on procedures known to both the encoder and decoder.
- a first predictor is generated for the first segment of the current block using the first set of reference frames.
- the first predictor can be generated, for example, using the first set of reference frames and the motion vectors as a result of motion search.
- the first set of reference frames which have been used to determine the mask, can be reused to predict one or more segments determined by the mask.
- the same pair of ⁇ LAST_FRAME, BWDREF_FRAME ⁇ can be used for compound prediction of one or more segment, such as the background segment.
- a compound predictor for the background segment can be determined by averaging the predictors generated using the pair of ⁇ LAST_FRAME, BWDREF_FRAME ⁇ .
- the first set of reference frames does not need to be explicitly encoded. Reusing the first set of reference frames for predicting one or more segments can further reduce the bits coded into the video bitstream.
- a second predictor is generated for the second segment of the current block using a second set of reference frames, and the first set of reference frames is a subset of the second set of reference frames. For example, a third (or even a fourth) reference frame and a new motion vector can be searched for the second segment. This is because the first set of reference frames might not turn out to be good predictors for the second segment, especially when the second segment is a foreground segment.
- the masked compound prediction adapts to the motion characteristic of the video content in the current block.
- the second segment can be predicted using either single prediction or compound prediction or intra-prediction, based on results of the motion search.
- LAST_FRAME 602 LAST2_FRAME, LAST3_FRAME, GOLDEN_FRAME 604 , ALTREF_FRAME 606 , and BWDREF_FRAME to generate the predictor for that segment.
- LAST_FRAME 602 LAST2_FRAME, LAST3_FRAME, GOLDEN_FRAME 604 , ALTREF_FRAME 606 , and BWDREF_FRAME to generate the predictor for that segment.
- LAST_FRAME 602 LAST2_FRAME
- LAST3_FRAME LAST3_FRAME
- GOLDEN_FRAME 604 ALTREF_FRAME 606
- BWDREF_FRAME BWDREF_FRAME
- steps in accordance with this disclosure can occur in various orders and/or concurrently. Additionally, steps in accordance with this disclosure may occur with other steps not presented and described herein. Furthermore, not all illustrated steps may be required to implement a method in accordance with the disclosed subject matter.
- encoding and decoding illustrate some encoding and decoding techniques. However, it is to be understood that encoding and decoding, as those terms are used in the claims, could mean compression, decompression, transformation, or any other processing or change of data.
- example or “implementation” are used herein to mean serving as an example, instance, or illustration. Any aspect or design described herein as “example” or “implementation” is not necessarily to be construed as preferred or advantageous over other aspects or designs. Rather, use of the words “example” or “implementation” is intended to present concepts in a concrete fashion.
- the term “or” is intended to mean an inclusive “or” rather than an exclusive “or”. That is, unless specified otherwise, or clear from context, “X includes A or B” is intended to mean any of the natural inclusive permutations.
- Implementations of transmitting station 102 and/or receiving station 106 can be realized in hardware, software, or any combination thereof.
- the hardware can include, for example, computers, intellectual property (IP) cores, application-specific integrated circuits (ASICs), programmable logic arrays, optical processors, programmable logic controllers, microcode, microcontrollers, servers, microprocessors, digital signal processors or any other suitable circuit.
- IP intellectual property
- ASICs application-specific integrated circuits
- programmable logic arrays optical processors
- programmable logic controllers programmable logic controllers
- microcode microcontrollers
- servers microprocessors, digital signal processors or any other suitable circuit.
- signal processors should be understood as encompassing any of the foregoing hardware, either singly or in combination.
- signals and “data” are used interchangeably. Further, portions of transmitting station 102 and receiving station 106 do not necessarily have to be implemented in the same manner.
- transmitting station 102 or receiving station 106 can be implemented using a general purpose computer or general purpose processor with a computer program that, when executed, carries out any of the respective methods, algorithms and/or instructions described herein.
- a special purpose computer/processor can be utilized which can contain other hardware for carrying out any of the methods, algorithms, or instructions described herein.
- Transmitting station 102 and receiving station 106 can, for example, be implemented on computers in a video conferencing system.
- transmitting station 102 can be implemented on a server and receiving station 106 can be implemented on a device separate from the server, such as a hand-held communications device.
- transmitting station 102 can encode content using an encoder 400 into an encoded video signal and transmit the encoded video signal to the communications device.
- the communications device can then decode the encoded video signal using a decoder 500 .
- the communications device can decode content stored locally on the communications device, for example, content that was not transmitted by transmitting station 102 .
- Other transmitting station 102 and receiving station 106 implementation schemes are available.
- receiving station 106 can be a generally stationary personal computer rather than a portable communications device and/or a device including an encoder 400 may also include a decoder 500 .
- implementations of the present disclosure can take the form of a computer program product accessible from, for example, a tangible computer-usable or computer-readable medium.
- a computer-usable or computer-readable medium can be any device that can, for example, tangibly contain, store, communicate, or transport the program for use by or in connection with any processor.
- the medium can be, for example, an electronic, magnetic, optical, electromagnetic, or a semiconductor device. Other suitable mediums are also available.
Abstract
Description
- Digital video streams may represent video using a sequence of frames or still images. Digital video can be used for various applications including, for example, video conferencing, high definition video entertainment, video advertisements, or sharing of user-generated videos. A digital video stream can contain a large amount of data and consume a significant amount of computing or communication resources of a computing device for processing, transmission or storage of the video data. Various approaches have been proposed to reduce the amount of data in video streams, including compression and other encoding techniques.
- The disclosure relates in general to video coding and in particular to multi-reference compound prediction using masking for encoding and decoding blocks of video frames.
- One aspect of the disclosed implementations is a method for encoding frames of a video sequence. The method includes determining, using a first set of reference frames, a mask for segmenting a current block of a current frame of the video sequence into at least a first segment and a second segment; generating, for the first segment of the current block, a first predictor using the first set of reference frames; and generating, for the second segment of the current block, a second predictor using a second set of reference frames, wherein the first set of reference frames is a subset of the second set of reference frames.
- Another aspect of the disclosed implementations is a method for decoding frames of a video sequence from an encoded video bitstream. The method includes determining, using a first set of reference frames, a mask for segmenting a current block of a current frame of the video sequence into at least a first segment and a second segment; generating, for the first segment of the current block, a first predictor using the first set of reference frames; and generating, for the second segment of the current block, a second predictor using a second set of reference frames, wherein the first set of reference frames is a subset of the second set of reference frames.
- Another aspect of the disclosed implementations is an apparatus including a non-transitory memory and a processor. The apparatus can be used for decoding frames of a video sequence from an encoded video bitstream. The processor is configured to execute instructions stored in the memory to determine, using a first set of reference frames, a mask for segmenting a current block of a current frame of the video sequence into at least a first segment and a second segment; generate, for the first segment of the current block, a first predictor using the first set of reference frames; and generate, for the second segment of the current block, a second predictor using a second set of reference frames, wherein the first set of reference frames is a subset of the second set of reference frames.
- These and other aspects of the present disclosure are disclosed in the following detailed description of the embodiments, the appended claims and the accompanying figures.
- The description herein makes reference to the accompanying drawings wherein like reference numerals refer to like parts throughout the several views.
-
FIG. 1 is a schematic of a video encoding and decoding system. -
FIG. 2 is a block diagram of an example of a computing device that can implement a transmitting station or a receiving station. -
FIG. 3 is a diagram of a video stream to be encoded and subsequently decoded. -
FIG. 4 is a block diagram of an encoder according to implementations of this disclosure. -
FIG. 5 is a block diagram of a decoder according to implementations of this disclosure. -
FIG. 6 is a flowchart diagram of an example of a reference frame buffer. -
FIG. 7 is a flowchart diagram of an example process for encoding or decoding blocks of a current frame using masked compound prediction. -
FIG. 8A is a diagram showing an example of a mask adaptively determined for a block according to an implementation. -
FIG. 8B is a diagram showing an example of a mask codebook available for a block according to another implementation. - Compression schemes related to coding video streams may include breaking each image into blocks and generating a digital video output bitstream using one or more techniques to limit the information included in the output. A received bitstream can be decoded to re-create the blocks and the source images from the limited information. Encoding a video stream, or a portion thereof, such as a frame or a block, can include using temporal and spatial similarities in the video stream to improve coding efficiency. For example, a current block of a video stream may be encoded based on a previously encoded block in the video stream by predicting motion and color information for the current block based on the previously encoded block and identifying a difference (residual) between the predicted values and the current block. Inter-prediction, for example, uses one or more motion vectors to generate a block (also called a prediction block) that resembles a current block to be encoded using previously encoded and decoded pixels. By encoding the motion vector(s), and the difference between the two blocks, a decoder receiving the encoded signal can re-create the current block.
- A motion vector used to generate a prediction block refers to a frame other than a current frame, i.e., a reference frame. Reference frames can be located before or after the current frame in the sequence of the video stream. A block may be predicted from a single reference frame (“single prediction”) or compound, such as two, reference frames (“compound prediction”). For example, a motion search that attempts each of the available inter-prediction modes using single or compound modes can be performed. In the case of compound prediction, a predictor (e.g., a prediction block) can be formed for each of the multiple reference frames, and a combination, such as an average (or weighted average) of the predictors can be used to predict the block.
- The teachings herein describe, among other things, compound prediction from multiple reference frames using masking. A compound prediction using masking (also referred to as “masked compound prediction”) is a special type of compound prediction, where a mask is used to segment the current block into segments. For example, the current block can be segmented into a “foreground” segment and a “background” segment, based on motion characteristics. Each segment can be inter-predicted and encoded using different reference frames and motion vector combinations. It is also possible to use inter-prediction and intra-prediction for different segments within the same block.
- A mask for segmenting a block can be determined, using a first set of reference frames, such as a pair of forward reference frame and a backward reference frame selected from a set of candidate reference frames available to a current frame. The first set of reference frames can be determined by ranking the candidate reference frames based on, for example, distances to the current frame (e.g., “nearest”), popularity values or a combination of distances and popularity values.
- The mask can be determined for the block adaptively, for example, based on motion characteristics of the video content, such as by comparing two prediction blocks based on the pair of reference frames, and setting a threshold on the absolute difference values between the two prediction blocks. The mask can also be determined using a mask codebook, which includes predetermined block segmentation patterns. A special coding mode, such as a mask mode, can be encoded into the block header without having encoding the mask itself.
- To further reduce overhead, the first set of reference frames, which have been used to determine the mask, can be reused to predict one or more segments determined by the mask. For example, a compound predictor for a “background” segment can be determined by averaging the predictors from the pair of reference frames. As mentioned, the first set of reference frames does not need to be explicitly encoded. Reusing the first set of reference frames for predicting one or more segments can further reduce the bits coded into the video bitstream.
- For a second segment, such as a “foreground” segment, a third (or even a fourth) reference frame and a new motion vector can be searched for and used for inter prediction. By using different sets of reference frames (and predictors) for different segments, the masked compound prediction adapts to the motion characteristic of the video content in the current block. The second segment can be predicted using single prediction, or compound prediction, or intra-prediction, based on results of the motion search. Other details are described herein first with reference to a system in which the teachings may be incorporated.
-
FIG. 1 is a schematic of a video encoding anddecoding system 100. A transmittingstation 102 can be, for example, a computer having an internal configuration of hardware such as that described inFIG. 2 . However, other suitable implementations of the transmittingstation 102 are possible. For example, the processing of the transmittingstation 102 can be distributed among multiple devices. - A
network 104 can connect the transmittingstation 102 and areceiving station 106 for encoding and decoding of the video stream. Specifically, the video stream can be encoded in thetransmitting station 102 and the encoded video stream can be decoded in thereceiving station 106. Thenetwork 104 can be, for example, the Internet. Thenetwork 104 can also be a local area network (LAN), wide area network (WAN), virtual private network (VPN), cellular telephone network or any other means of transferring the video stream from the transmittingstation 102 to, in this example, the receivingstation 106. - The receiving
station 106, in one example, can be a computer having an internal configuration of hardware such as that described inFIG. 2 . However, other suitable implementations of the receivingstation 106 are possible. For example, the processing of the receivingstation 106 can be distributed among multiple devices. - Other implementations of the video encoding and
decoding system 100 are possible. For example, an implementation can omit thenetwork 104. In another implementation, a video stream can be encoded and then stored for transmission at a later time to the receivingstation 106 or any other device having memory. In one implementation, the receivingstation 106 receives (e.g., via thenetwork 104, a computer bus, and/or some communication pathway) the encoded video stream and stores the video stream for later decoding. In an example implementation, a real-time transport protocol (RTP) is used for transmission of the encoded video over thenetwork 104. In another implementation, a transport protocol other than RTP may be used, e.g., an HTTP-based video streaming protocol. - When used in a video conferencing system, for example, the transmitting
station 102 and/or the receivingstation 106 may include the ability to both encode and decode a video stream as described below. For example, the receivingstation 106 could be a video conference participant who receives an encoded video bitstream from a video conference server (e.g., the transmitting station 102) to decode and view and further encodes and transmits its own video bitstream to the video conference server for decoding and viewing by other participants. -
FIG. 2 is a block diagram of an example of acomputing device 200 that can implement a transmitting station or a receiving station. For example, thecomputing device 200 can implement one or both of the transmittingstation 102 and the receivingstation 106 ofFIG. 1 . Thecomputing device 200 can be in the form of a computing system including multiple computing devices, or in the form of a single computing device, for example, a mobile phone, a tablet computer, a laptop computer, a notebook computer, a desktop computer, and the like. - A
CPU 202 in thecomputing device 200 can be a central processing unit. Alternatively, theCPU 202 can be any other type of device, or multiple devices, capable of manipulating or processing information now-existing or hereafter developed. Although the disclosed implementations can be practiced with a single processor as shown, e.g., theCPU 202, advantages in speed and efficiency can be achieved using more than one processor. - A
memory 204 in thecomputing device 200 can be a read-only memory (ROM) device or a random access memory (RAM) device in an implementation. Any other suitable type of storage device can be used as thememory 204. Thememory 204 can include code anddata 206 that is accessed by theCPU 202 using abus 212. Thememory 204 can further include anoperating system 208 andapplication programs 210, theapplication programs 210 including at least one program that permits theCPU 202 to perform the methods described here. For example, theapplication programs 210 can includeapplications 1 through N, which further include a video coding application that performs the methods described here. Thecomputing device 200 can also include asecondary storage 214, which can, for example, be a memory card used with acomputing device 200 that is mobile. Because the video communication sessions may contain a significant amount of information, they can be stored in whole or in part in thesecondary storage 214 and loaded into thememory 204 as needed for processing. - The
computing device 200 can also include one or more output devices, such as adisplay 218. Thedisplay 218 may be, in one example, a touch sensitive display that combines a display with a touch sensitive element that is operable to sense touch inputs. Thedisplay 218 can be coupled to theCPU 202 via thebus 212. Other output devices that permit a user to program or otherwise use thecomputing device 200 can be provided in addition to or as an alternative to thedisplay 218. When the output device is or includes a display, the display can be implemented in various ways, including by a liquid crystal display (LCD), a cathode-ray tube (CRT) display or light emitting diode (LED) display, such as an organic LED (OLED) display. - The
computing device 200 can also include or be in communication with an image-sensingdevice 220, for example a camera, or any other image-sensingdevice 220 now existing or hereafter developed that can sense an image such as the image of a user operating thecomputing device 200. The image-sensingdevice 220 can be positioned such that it is directed toward the user operating thecomputing device 200. In an example, the position and optical axis of the image-sensingdevice 220 can be configured such that the field of vision includes an area that is directly adjacent to thedisplay 218 and from which thedisplay 218 is visible. - The
computing device 200 can also include or be in communication with a sound-sensing device 222, for example a microphone, or any other sound-sensing device now existing or hereafter developed that can sense sounds near thecomputing device 200. The sound-sensing device 222 can be positioned such that it is directed toward the user operating thecomputing device 200 and can be configured to receive sounds, for example, speech or other utterances, made by the user while the user operates thecomputing device 200. - Although
FIG. 2 depicts theCPU 202 and thememory 204 of thecomputing device 200 as being integrated into a single unit, other configurations can be utilized. The operations of theCPU 202 can be distributed across multiple machines (each machine having one or more of processors) that can be coupled directly or across a local area or other network. Thememory 204 can be distributed across multiple machines such as a network-based memory or memory in multiple machines performing the operations of thecomputing device 200. Although depicted here as a single bus, thebus 212 of thecomputing device 200 can be composed of multiple buses. Further, thesecondary storage 214 can be directly coupled to the other components of thecomputing device 200 or can be accessed via a network and can comprise a single integrated unit such as a memory card or multiple units such as multiple memory cards. Thecomputing device 200 can thus be implemented in a wide variety of configurations. -
FIG. 3 is a diagram of an example of avideo stream 300 to be encoded and subsequently decoded. Thevideo stream 300 includes avideo sequence 302. At the next level, thevideo sequence 302 includes a number ofadjacent frames 304. While three frames are depicted as theadjacent frames 304, thevideo sequence 302 can include any number ofadjacent frames 304. Theadjacent frames 304 can then be further subdivided into individual frames, e.g., aframe 306. At the next level, theframe 306 can be divided into a series ofsegments 308 or planes. Thesegments 308 can be subsets of frames that permit parallel processing, for example. Thesegments 308 can also be subsets of frames that can separate the video data into separate colors. For example, theframe 306 of color video data can include a luminance plane and two chrominance planes. Thesegments 308 may be sampled at different resolutions. - Whether or not the
frame 306 is divided into thesegments 308, theframe 306 may be further subdivided intoblocks 310, which can contain data corresponding to, for example, 16×16 pixels in theframe 306. Theblocks 310 can also be arranged to include data from one ormore segments 308 of pixel data. Theblocks 310 can also be of any other suitable size such as 4×4 pixels, 8×8 pixels, 16×8 pixels, 8×16 pixels, 16×16 pixels or larger. Unless otherwise noted, the terms block and macroblock are used interchangeably herein. -
FIG. 4 is a block diagram of anencoder 400 in accordance with implementations of this disclosure. Theencoder 400 can be implemented, as described above, in the transmittingstation 102 such as by providing a computer software program stored in memory, for example, thememory 204. The computer software program can include machine instructions that, when executed by a processor such as theCPU 202, cause the transmittingstation 102 to encode video data in the manner described inFIG. 4 . Theencoder 400 can also be implemented as specialized hardware included in, for example, the transmittingstation 102. For example, theencoder 400 can be a hardware encoder. - The
encoder 400 has the following stages to perform the various functions in a forward path (shown by the solid connection lines) to produce an encoded orcompressed bitstream 420 using thevideo stream 300 as input: an intra/inter prediction stage 402, atransform stage 404, aquantization stage 406, and anentropy encoding stage 408. Theencoder 400 may also include a reconstruction path (shown by the dotted connection lines) to reconstruct a frame for encoding of future blocks. InFIG. 4 , theencoder 400 has the following stages to perform the various functions in the reconstruction path: adequantization stage 410, aninverse transform stage 412, areconstruction stage 414, and aloop filtering stage 416. Other structural variations of theencoder 400 can be used to encode thevideo stream 300. - When the
video stream 300 is presented for encoding, theframe 306 can be processed in units of blocks. At the intra/inter prediction stage 402, a block can be encoded using intra-frame prediction (also called intra-prediction) or inter-frame prediction (also called inter-prediction), or a combination both. In any case, a prediction block can be formed. In the case of intra-prediction, all or a part of a prediction block may be formed from samples in the current frame that have been previously encoded and reconstructed. In the case of inter-prediction, all or part of a prediction block may be formed from samples in one or more previously constructed reference frames determined using motion vectors. - Implementations for masked compound prediction from multiple reference frames are discussed below with respect to
FIGS. 6, 7, 8A, and 8B . For inter-prediction, blocks may be predicted from a single reference frame (“single prediction”) or compound, such as two, reference frames (“compound prediction”). Various inter-prediction modes may be tested. For example, a motion search that attempts each of the available inter-prediction modes using single or compound modes can be used. In the case of compound prediction, two or more motion vectors can be obtained through a joint search between two or more reference frames. For each proposed motion vector(s) and for each tested inter-prediction mode, a bit cost of encoding the current block using the inter-prediction mode, including the bits required to signal the inter-prediction mode, the reference frame(s), the residual block generated from the current block, and, if required, one or more motion vector(s) or motion vector differential(s), and the resulting error in the pixel values between the original values and the reconstructed values are calculated. The inter-prediction mode and reference frame(s) resulting in the lowest rate-distortion value may be selected as the inter-prediction mode for the current block. - Next, still referring to
FIG. 4 , the prediction block can be subtracted from the current block at the intra/inter prediction stage 402 to produce a residual block (also called a residual). Thetransform stage 404 transforms the residual into transform coefficients in, for example, the frequency domain using block-based transforms. Such block-based transforms include, for example, the Discrete Cosine Transform (DCT) and the Asymmetric Discrete Sine Transform (ADST). Other block-based transforms are possible. Further, combinations of different transforms may be applied to a single residual. In one example of application of a transform, the DCT transforms the residual block into the frequency domain where the transform coefficient values are based on spatial frequency. The lowest frequency (DC) coefficient at the top-left of the matrix and the highest frequency coefficient at the bottom-right of the matrix. It is worth noting that the size of a prediction block, and hence the resulting residual block, may be different from the size of the transform block. For example, the prediction block may be split into smaller blocks to which separate transforms are applied. - The
quantization stage 406 converts the transform coefficients into discrete quantum values, which are referred to as quantized transform coefficients, using a quantizer value or a quantization level. For example, the transform coefficients may be divided by the quantizer value and truncated. The quantized transform coefficients are then entropy encoded by theentropy encoding stage 408. Entropy coding may be performed using any number of techniques, including token and binary trees. The entropy-encoded coefficients, together with other information used to decode the block, which may include for example the type of prediction used, transform type, motion vectors and quantizer value, are then output to thecompressed bitstream 420. The information to decode the block may be entropy coded into block, frame, slice and/or section headers within thecompressed bitstream 420. Thecompressed bitstream 420 can be formatted using various techniques, such as variable length coding (VLC) or arithmetic coding. Thecompressed bitstream 420 can also be referred to as an encoded video stream or encoded video bitstream, and the terms will be used interchangeably herein. - The reconstruction path in
FIG. 4 (shown by the dotted connection lines) can be used to ensure that both theencoder 400 and a decoder 500 (described below) use the same reference frames and blocks to decode thecompressed bitstream 420. The reconstruction path performs functions that are similar to functions that take place during the decoding process that are discussed in more detail below, including dequantizing the quantized transform coefficients at thedequantization stage 410 and inverse transforming the dequantized transform coefficients at theinverse transform stage 412 to produce a derivative residual block (also called a derivative residual). At thereconstruction stage 414, the prediction block that was predicted at the intra/inter prediction stage 402 can be added to the derivative residual to create a reconstructed block. Theloop filtering stage 416 can be applied to the reconstructed block to reduce distortion such as blocking artifacts. - Other variations of the
encoder 400 can be used to encode thecompressed bitstream 420. For example, a non-transform basedencoder 400 can quantize the residual signal directly without thetransform stage 404 for certain blocks or frames. In another implementation, anencoder 400 can have thequantization stage 406 and thedequantization stage 410 combined into a single stage. -
FIG. 5 is a block diagram of adecoder 500 in accordance with implementations of this disclosure. Thedecoder 500 can be implemented in the receivingstation 106, for example, by providing a computer software program stored in thememory 204. The computer software program can include machine instructions that, when executed by a processor such as theCPU 202, cause the receivingstation 106 to decode video data in the manner described inFIG. 10 below. Thedecoder 500 can also be implemented in hardware included in, for example, the transmittingstation 102 or the receivingstation 106. - The
decoder 500, similar to the reconstruction path of theencoder 400 discussed above, includes in one example the following stages to perform various functions to produce anoutput video stream 516 from the compressed bitstream 420: anentropy decoding stage 502, adequantization stage 504, aninverse transform stage 506, an intra/inter prediction stage 508, areconstruction stage 510, aloop filtering stage 512, and adeblocking filtering stage 514. Other structural variations of thedecoder 500 can be used to decode thecompressed bitstream 420. - When the
compressed bitstream 420 is presented for decoding, the data elements within thecompressed bitstream 420 can be decoded by theentropy decoding stage 502 to produce a set of quantized transform coefficients. Thedequantization stage 504 dequantizes the quantized transform coefficients (e.g., by multiplying the quantized transform coefficients by the quantizer value), and theinverse transform stage 506 inverse transforms the dequantized transform coefficients using the selected transform type to produce a derivative residual that can be identical to that created by theinverse transform stage 412 in theencoder 400. Using header information decoded from thecompressed bitstream 420, thedecoder 500 can use the intra/inter prediction stage 508 to create the same prediction block as was created in theencoder 400, e.g., at the intra/inter prediction stage 402. Implementations for forming a same prediction block as was created in the encoded 400 using masked compound prediction from multiple reference frames are discussed below with respect toFIGS. 6, 7, 8A, and 8B , for example. At thereconstruction stage 510, the prediction block can be added to the derivative residual to create a reconstructed block. Theloop filtering stage 512 can be applied to the reconstructed block to reduce blocking artifacts, followed by thedeblocking filtering stage 514. The result is output as anoutput video stream 516. Theoutput video stream 516 can also be referred to as a decoded video stream, and the terms will be used interchangeably herein. - Other variations of the
decoder 500 can be used to decode thecompressed bitstream 420. For example, thedecoder 500 can produce theoutput video stream 516 without thedeblocking filtering stage 514. - As mentioned, multiple reference frames can be used to obtain the motion vector(s) of a current block during inter-prediction. A block can be predicted using a single reference frame (i.e., “single prediction” using a single motion vector), or using a combination of multiple reference frames (e.g., “compound prediction” using two or more reference frames and motion vectors). In the case of compound prediction, a predictor (e.g., a prediction block) can be formed for each of the multiple reference frames, while the final prediction block can be determined as a combination of the predictors, such as an average (or weighted average) of the predictors. The choice of compound prediction can be made at the frame level, or specified for those blocks that are inter-predicted.
- Each motion vector can refer to one of several available reference frames. A signal can be sent indicating that the reference frame that includes the motion vector reference is one of the available reference frames. Instead of signaling a frame identifier itself, which can be a relatively long sequence of bits, the signal can be a shorter sequence of bits that identifies the type of reference frame.
- For example, a current frame may be encoded using a reference frame such as a “last frame,” the adjacent frame immediately before the current frame in the video sequence. In some video coding schemes, particularly those where video frames are encoded out of order, it is desirable to include in the pool of candidate motion vectors motion information from video frames in the past or future. Encoding video frames may occur, for example, in the coding of so-called “alternate reference frames” that are not temporally neighboring to the frames coded immediately before or after them. An alternate reference frame may be a synthesized frame that does not occur in the input video stream or is a duplicate frame to one in the input video stream that is used for prediction and is generally not displayed following decoding. Such a frame can resemble a video frame in the non-adjacent future. Another example in which out of order encoding may occur is through the use of a so-called “golden frame,” which is a reconstructed video frame that may or may not be neighboring to a current frame and is stored in memory for use as a reference frame until replaced, e.g., by a new golden frame.
-
FIG. 6 is a block diagram of an example of areference frame buffer 600. Thereference frame buffer 600 stores reference frames used to encode or decode blocks of frames of a video sequence. Thereference frame buffer 600 includes alast frame LAST_FRAME 602, agolden frame GOLDEN_FRAME 604, and an alternativereference frame ALTREF_FRAME 606. As described above, thelast frame LAST_FRAME 602 can be, for example, the adjacent frame immediately before the current frame in the video sequence, which is a forward reference frame. Thegolden frame GOLDEN_FRAME 604 can be, for example, a reconstructed video frame for use as a reference frame that may or may not be adjacent to the current frame. The alternativereference frame ALTREF_FRAME 606 can be, for example, a video frame in the non-adjacent future, which is a backward reference frame. - The frame header of a reference frame includes a
virtual index 608 to a location within thereference frame buffer 600 at which the reference frame is stored. Areference frame mapping 612 maps thevirtual index 608 of a reference frame to aphysical index 614 of memory at which the reference frame is stored. Where two reference frames are the same frame, those reference frames will have the same physical index even if they have different virtual indexes. One ormore refresh flags 610 can be used to remove one or more of the stored reference frames from thereference frame buffer 600, for example, to clear space in thereference frame buffer 600 for new reference frames, where there are no further blocks to encode or decode using the stored reference frames, or where a new golden frame is encoded or decoded. - The reference frames stored in the
reference frame buffer 600 can be used to identify motion vectors for predicting blocks of frames to be encoded or decoded. Different reference frames may be used depending on the type of prediction used to predict a current block of a current frame. For example, in bi-prediction, blocks of the current frame can be forward predicted using either theLAST_FRAME 602 or theGOLDEN_FRAME 604, or backward predicted using theALTREF_FRAME 606. When compound prediction is used, multiple frames, such as one for forward prediction (e.g.,LAST_FRAME 602 or GOLDEN_FRAME 604) and one for backward prediction (e.g., ALTREF_FRAME 606) can be used for predicting the current block. - There may be a finite number of reference frames that can be stored within the
reference frame buffer 600. As shown inFIG. 6 , thereference frame buffer 600 can store up to eight reference frames, wherein each stored reference frame may be associated with a differentvirtual index 602 of the reference frame buffer. Although three of the eight spaces in thereference frame buffer 600 are used by theLAST_FRAME 602, theGOLDEN_FRAME 604, and theALTREF_FRAME 606, five spaces remain available to store other reference frames. - In particular, one or more available spaces in the
reference frame buffer 600 may be used to store a second last frame LAST2_FRAME and/or a third last frame LAST3_FRAME as additional forward reference frames, in addition to theLAST_FRAME 602. A backward frame BWDREF_FRAME may be stored as an additional backward prediction reference frame, in addition toALTREF_FRAME 606. The BWDREF_FRAME can be closer in relative distance to the current frame than theALTREF_FRAME 606, for example. - The reference motion vector candidate list may be constructed as described for each reference frame associated with a previously coded block or sub-block. For example, up to six reference frames may be available for each frame as described above—e.g.,
LAST_FRAME 602, LAST2_FRAME, LAST3_FRAME,GOLDEN_FRAME 604,ALTREF_FRAME 606, and BWDREF_FRAME. In this case, separate reference motion vector candidate list may be constructed using those previously coded blocks or sub-blocks having motion vectors pointing each of the candidate reference frames. The last frame is updated for each frame, and the alt reference frame and golden reference frame may be updated less frequently, for example. - Although the
reference frame buffer 600 is shown as being able to store up to eight reference frames, other implementations of thereference frame buffer 600 may be able to store additional or fewer reference frames. Furthermore, one or more available spaces in thereference frame buffer 600 may be used to store additional alternative reference frames (e.g., ALTREF1_FRAME, ALTREF2_FRAME, etc., wherein the original alternativereference frame ALTREF_FRAME 606 could be referred to as ALTREF0_FRAME). TheALTREF_FRAME 606 is a frame of a video sequence that is distant from a current frame in a display order, but is encoded or decoded earlier than it is displayed. For example, theALTREF_FRAME 606 may be ten, twelve, or more (or fewer) frames after the current frame in a display order. - It is possible for BWDREF_FRAME or the additional alternative reference frames to be frames located nearer to the current frame in the display order. In one example, BWDREF_FRAME can be one frame after the current frame in the display order. In another example, a first additional alternative reference frame, ALTREF2_FRAME, can be five or six frames after the current frame in the display order, whereas a second additional alternative reference frame, ALTREF3_FRAME, can be three or four frames after the current frame in the display order. Being closer to the current frame in display order increases the likelihood of the features of a reference frame being more similar to those of the current frame. As such, one or more of the BWDREF_FRAME or additional alternative reference frames can be stored in the
reference frame buffer 600 as additional options usable for backward prediction. -
FIG. 7 is a flowchart diagram of aprocess 700 for encoding or decoding blocks of a current frame using masked compound prediction from multiple reference frames according to implementations of this disclosure. Theprocess 700 can be implemented in an encoder such as theencoder 400 and can be implemented, for example, as a software program that can be executed by computing devices such as transmittingstation 102. Theprocess 700 can also be implemented in a decoder such as thedecoder 500 and can be implemented, for example, as a software program that can be executed by computing devices such as receivingstation 106. For example, the software program can include machine-readable instructions that can be stored in a memory such as thememory 204 or thesecondary storage 214, and that can be executed by a processor, such asCPU 202, to cause the computing device to perform theprocess 700. In at least some implementations, theprocess 700 can be performed in whole or in part by the intra/inter prediction stage 402 of theencoder 400 or the intra/inter prediction stage 508 of thedecoder 500. Theprocess 700 can be implemented using specialized hardware or firmware. Some computing devices can have multiple memories, multiple processors, or both. The steps or operations of theprocess 700 can be distributed using different processors, memories, or both. Use of the terms “processor” or “memory” in the singular encompasses computing devices that have one processor or one memory as well as devices that have multiple processors or multiple memories that can be used in the performance of some or all of the recited steps. - When
process 700 is implemented by a decoder such as thedecoder 500, the decoder determines whether the current block was encoded using single or compound prediction. This information can be communicated by reading and decoding bits from an encoded video bitstream (e.g., compressed bitstream 420) that indicate the coding mode(s), the one or more than one motion vectors was used to encode the current block. The encoded bitstream (or encoded video data) may be received by a decoder of a computing device in any number of ways, such as by receiving the video data over a network, over a cable, or by reading the video data from a primary memory or other storage device, including a disk drive or removable media such as a DVD, CompactFlash (CF) card, Secure Digital (SD) card, or any other device capable of communicating a video stream. This information can be included in a header associated with a current block or a frame header, for example. - At 702, a mask for segmenting a current block of a current frame of the video sequence into at least a first segment and a second segment is determined, using a first set of reference frames.
- The first set of reference frames can be determined, for example, based on distances between respective ones of a set of candidate reference frames identified for the current frame and the current frame of the video sequence. By tracking updates to the reference frame buffer, such as the
reference frame buffer 600 in the example ofFIG. 6 , the encoder and the decoder can follow the same procedure to obtain the same set of reference frames. For example, the first set of reference frames can be selected from the reference frames available for the current frame in thereference frame buffer 600, such asLAST_FRAME 602, LAST2_FRAME, LAST3_FRAME,GOLDEN_FRAME 604,ALTREF_FRAME 606, and BWDREF_FRAME. The first set of reference frames can also be determined by ranking the reference frames based on, for example, popularity values or a combination of distances and popularity values. - For example, the first set of reference frames can include a pair of a forward reference frame and a backward reference frame selected from the set of candidate reference frames. Both the forward reference frame and the backward reference frame can be selected based on distances between those frames and the current frame, such as having the shortest distance in display order (“nearest”) to the current frame. In one example, the pair of {LAST_FRAME, BWDREF_FRAME} can be established for coding the current frame as a bi-predictive frame. In this example, LAST_FRAME is a “nearest” forward reference frame for forward prediction, and BWDREF_FRAME is a “nearest” backward reference frame for backward prediction.
- As mentioned, single or compound prediction may be selected to inter-predict the current block. When compound prediction is used, multiple, such as two, reference frames and motion vectors can be used to predict the current block. A compound prediction using masking (also referred to as “masked compound prediction”) is a special type of compound prediction, where a mask is used to segment the current block into segments. For example, the current block can be segmented into a “foreground” segment and a “background” segment, based on motion characteristics. Each segment can be inter-predicted and encoded using different reference frames and motion vector combinations. It is also possible to use inter-prediction for a segment and intra-prediction for the other segment within the same block.
- A mask can be determined for the current block adaptively, for example, based on motion characteristics of the video content. Determining the mask for the current block can include, for example, comparing a first prediction block with a second prediction block to determine a block of differential values, wherein the first prediction block is determined using a first frame of the first set of reference frames, and the second prediction block is determined using a second frame of the first set of reference frames. Depending on whether a corresponding value from the block of differential values (e.g., the absolute difference value) exceeds a threshold, a pixel can be assigned to a corresponding segment (e.g., the foreground segment or the background segment). For example, a threshold can be set to “5” and any pixel having an absolute difference value greater than 5 can be assigned to the foreground segment. Otherwise, the pixel is assigned to the background segment. Pixels in the background segment tend to have lower level of motions.
- Each segment can have an arbitrary shape. In one implementation, an initial mask can be determined using the techniques described above, including comparing the two prediction blocks and setting a threshold on the absolute difference values between the two prediction blocks. The initial mask can be further refined by morphological operations such as erosion and dilation to generate the final mask.
- A special coding mode, such as a mask mode, can be encoded into the video bitstream for the current block without encoding the mask. The video bitstream can be compressed
bitstream 420. The special coding mode can be signaled in the block header, for example. However, the mask itself does not need to be encoded. Since both the encoder and the decoder follow the same procedure as described above to derive the mask, there is no need to encode the mask itself. During decoding, the decoder can derive the mask from an encoded bitstream of the video sequence using the same set of reference frames, which are reconstructed and stored in the reference frame buffer. -
FIG. 8A is diagram showing an example of a mask adaptively determined for a block. Compound prediction is used and the two reference frames determined for the block is the pair of {LAST_FRAME, BWDREF_FRAME}. After comparing the two prediction blocks calculated based on the two reference frames, and comparing the block of differential values with a threshold, the pixels are assigned to two segments: the foreground segment 802 (shadedareas white areas FIG. 8A , it is possible to have a segment with disjoint areas, such asshaded areas - The mask can also be determined using a mask codebook, which includes predetermined block segmentation patterns.
FIG. 8B is a diagram showing an example of amask codebook 850 available for a block. Themask codebook 850 includes a predetermined set of mask candidates. Both the encoder and the decoder can follow the same procedure to select/identify the same mask candidate from themask codebook 850 for coding the current block. In this example, the code for the selected mask can be either signaled to the decoder in the video bitstream, or it can be derived based on procedures known to both the encoder and decoder. - Referring again to
FIG. 7 , at 704, a first predictor is generated for the first segment of the current block using the first set of reference frames. The first predictor can be generated, for example, using the first set of reference frames and the motion vectors as a result of motion search. - To further reduce overhead, the first set of reference frames, which have been used to determine the mask, can be reused to predict one or more segments determined by the mask. For example, when the pair of {LAST_FRAME, BWDREF_FRAME} is used for determining the mask, the same pair of {LAST_FRAME, BWDREF_FRAME} can be used for compound prediction of one or more segment, such as the background segment. For example, a compound predictor for the background segment can be determined by averaging the predictors generated using the pair of {LAST_FRAME, BWDREF_FRAME}. As mentioned, the first set of reference frames does not need to be explicitly encoded. Reusing the first set of reference frames for predicting one or more segments can further reduce the bits coded into the video bitstream.
- At 706, a second predictor is generated for the second segment of the current block using a second set of reference frames, and the first set of reference frames is a subset of the second set of reference frames. For example, a third (or even a fourth) reference frame and a new motion vector can be searched for the second segment. This is because the first set of reference frames might not turn out to be good predictors for the second segment, especially when the second segment is a foreground segment. By using different sets of reference frames (and predictors) for different segments, the masked compound prediction adapts to the motion characteristic of the video content in the current block. The second segment can be predicted using either single prediction or compound prediction or intra-prediction, based on results of the motion search.
- Other ways to generate a predictor for a segment of the mask can include, for example, using any single or combination of
LAST_FRAME 602, LAST2_FRAME, LAST3_FRAME,GOLDEN_FRAME 604,ALTREF_FRAME 606, and BWDREF_FRAME to generate the predictor for that segment. In addition, other reference frames discussed in connection withFIG. 6 or other reference frames not discussed can also be used. - For simplicity of explanation, the
processes 700 is depicted and described as a series of steps. However, steps in accordance with this disclosure can occur in various orders and/or concurrently. Additionally, steps in accordance with this disclosure may occur with other steps not presented and described herein. Furthermore, not all illustrated steps may be required to implement a method in accordance with the disclosed subject matter. - The aspects of encoding and decoding described above illustrate some encoding and decoding techniques. However, it is to be understood that encoding and decoding, as those terms are used in the claims, could mean compression, decompression, transformation, or any other processing or change of data.
- The words “example” or “implementation” are used herein to mean serving as an example, instance, or illustration. Any aspect or design described herein as “example” or “implementation” is not necessarily to be construed as preferred or advantageous over other aspects or designs. Rather, use of the words “example” or “implementation” is intended to present concepts in a concrete fashion. As used in this application, the term “or” is intended to mean an inclusive “or” rather than an exclusive “or”. That is, unless specified otherwise, or clear from context, “X includes A or B” is intended to mean any of the natural inclusive permutations. That is, if X includes A; X includes B; or X includes both A and B, then “X includes A or B” is satisfied under any of the foregoing instances. In addition, the articles “a” and “an” as used in this application and the appended claims should generally be construed to mean “one or more” unless specified otherwise or clear from context to be directed to a singular form. Moreover, use of the term “an implementation” or “one implementation” throughout is not intended to mean the same embodiment or implementation unless described as such.
- Implementations of transmitting
station 102 and/or receiving station 106 (and the algorithms, methods, instructions, etc., stored thereon and/or executed thereby, including byencoder 400 and decoder 500) can be realized in hardware, software, or any combination thereof. The hardware can include, for example, computers, intellectual property (IP) cores, application-specific integrated circuits (ASICs), programmable logic arrays, optical processors, programmable logic controllers, microcode, microcontrollers, servers, microprocessors, digital signal processors or any other suitable circuit. In the claims, the term “processor” should be understood as encompassing any of the foregoing hardware, either singly or in combination. The terms “signal” and “data” are used interchangeably. Further, portions of transmittingstation 102 and receivingstation 106 do not necessarily have to be implemented in the same manner. - Further, in one aspect, for example, transmitting
station 102 or receivingstation 106 can be implemented using a general purpose computer or general purpose processor with a computer program that, when executed, carries out any of the respective methods, algorithms and/or instructions described herein. In addition or alternatively, for example, a special purpose computer/processor can be utilized which can contain other hardware for carrying out any of the methods, algorithms, or instructions described herein. - Transmitting
station 102 and receivingstation 106 can, for example, be implemented on computers in a video conferencing system. Alternatively, transmittingstation 102 can be implemented on a server and receivingstation 106 can be implemented on a device separate from the server, such as a hand-held communications device. In this instance, transmittingstation 102 can encode content using anencoder 400 into an encoded video signal and transmit the encoded video signal to the communications device. In turn, the communications device can then decode the encoded video signal using adecoder 500. Alternatively, the communications device can decode content stored locally on the communications device, for example, content that was not transmitted by transmittingstation 102. Other transmittingstation 102 and receivingstation 106 implementation schemes are available. For example, receivingstation 106 can be a generally stationary personal computer rather than a portable communications device and/or a device including anencoder 400 may also include adecoder 500. - Further, all or a portion of implementations of the present disclosure can take the form of a computer program product accessible from, for example, a tangible computer-usable or computer-readable medium. A computer-usable or computer-readable medium can be any device that can, for example, tangibly contain, store, communicate, or transport the program for use by or in connection with any processor. The medium can be, for example, an electronic, magnetic, optical, electromagnetic, or a semiconductor device. Other suitable mediums are also available.
- The above-described embodiments, implementations and aspects have been described in order to allow easy understanding of the present disclosure and do not limit the present disclosure. On the contrary, the disclosure is intended to cover various modifications and equivalent arrangements included within the scope of the appended claims, which scope is to be accorded the broadest interpretation so as to encompass all such modifications and equivalent structure as is permitted under the law.
Claims (20)
Priority Applications (2)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US15/420,359 US10462482B2 (en) | 2017-01-31 | 2017-01-31 | Multi-reference compound prediction of a block using a mask mode |
PCT/US2017/059255 WO2018144084A1 (en) | 2017-01-31 | 2017-10-31 | Multi-reference compound prediction using masking |
Applications Claiming Priority (1)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US15/420,359 US10462482B2 (en) | 2017-01-31 | 2017-01-31 | Multi-reference compound prediction of a block using a mask mode |
Publications (2)
Publication Number | Publication Date |
---|---|
US20180220152A1 true US20180220152A1 (en) | 2018-08-02 |
US10462482B2 US10462482B2 (en) | 2019-10-29 |
Family
ID=60452753
Family Applications (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
US15/420,359 Active 2037-05-31 US10462482B2 (en) | 2017-01-31 | 2017-01-31 | Multi-reference compound prediction of a block using a mask mode |
Country Status (2)
Country | Link |
---|---|
US (1) | US10462482B2 (en) |
WO (1) | WO2018144084A1 (en) |
Cited By (2)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
CN111225205A (en) * | 2018-11-27 | 2020-06-02 | 半导体元件工业有限责任公司 | Method and apparatus for performing intra block prediction |
CN113170108A (en) * | 2018-11-27 | 2021-07-23 | Op方案有限责任公司 | Adaptive block update for unavailable reference frames using explicit and implicit signaling |
Family Cites Families (13)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US6037988A (en) | 1996-03-22 | 2000-03-14 | Microsoft Corp | Method for generating sprites for object-based coding sytems using masks and rounding average |
US5764814A (en) | 1996-03-22 | 1998-06-09 | Microsoft Corporation | Representation and encoding of general arbitrary shapes |
WO1997040628A1 (en) | 1996-04-19 | 1997-10-30 | Nokia Mobile Phones Limited | Video encoder and decoder using motion-based segmentation and merging |
US6711211B1 (en) | 2000-05-08 | 2004-03-23 | Nokia Mobile Phones Ltd. | Method for encoding and decoding video information, a motion compensated video encoder and a corresponding decoder |
US7039232B2 (en) | 2001-12-20 | 2006-05-02 | Xerox Corporation | Block level analysis of segmentation tags |
JP2004023458A (en) * | 2002-06-17 | 2004-01-22 | Toshiba Corp | Moving picture encoding/decoding method and apparatus |
US7813429B2 (en) | 2002-08-13 | 2010-10-12 | Lsi Corporation | System and method for segmentation of macroblocks |
US8879632B2 (en) * | 2010-02-18 | 2014-11-04 | Qualcomm Incorporated | Fixed point implementation for geometric motion partitioning |
JP2013526199A (en) | 2010-04-26 | 2013-06-20 | パナソニック株式会社 | Predictive coding using block shapes derived from prediction errors |
US9531990B1 (en) * | 2012-01-21 | 2016-12-27 | Google Inc. | Compound prediction using multiple sources or prediction modes |
US9986236B1 (en) * | 2013-11-19 | 2018-05-29 | Google Llc | Method and apparatus for encoding a block using a partitioned block and weighted prediction values |
WO2016074746A1 (en) | 2014-11-14 | 2016-05-19 | Huawei Technologies Co., Ltd. | Systems and methods for mask based processing of a block of a digital image |
US10469841B2 (en) * | 2016-01-29 | 2019-11-05 | Google Llc | Motion vector prediction using prior frame residual |
-
2017
- 2017-01-31 US US15/420,359 patent/US10462482B2/en active Active
- 2017-10-31 WO PCT/US2017/059255 patent/WO2018144084A1/en active Application Filing
Cited By (3)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
CN111225205A (en) * | 2018-11-27 | 2020-06-02 | 半导体元件工业有限责任公司 | Method and apparatus for performing intra block prediction |
CN113170108A (en) * | 2018-11-27 | 2021-07-23 | Op方案有限责任公司 | Adaptive block update for unavailable reference frames using explicit and implicit signaling |
US11943477B2 (en) | 2018-11-27 | 2024-03-26 | Semiconductor Components Industries, Llc | Methods and apparatus for successive intra block prediction |
Also Published As
Publication number | Publication date |
---|---|
US10462482B2 (en) | 2019-10-29 |
WO2018144084A1 (en) | 2018-08-09 |
Similar Documents
Publication | Publication Date | Title |
---|---|---|
US10555000B2 (en) | Multi-level compound prediction | |
US10142652B2 (en) | Entropy coding motion vector residuals obtained using reference motion vectors | |
US10462457B2 (en) | Dynamic reference motion vector coding mode | |
CA3008890C (en) | Motion vector reference selection through reference frame buffer tracking | |
WO2017131908A1 (en) | Dynamic reference motion vector coding mode | |
US10469841B2 (en) | Motion vector prediction using prior frame residual | |
US10582212B2 (en) | Warped reference motion vectors for video compression | |
US20170272770A1 (en) | Motion vector prediction through scaling | |
US10419777B2 (en) | Non-causal overlapped block prediction in variable block size video coding | |
WO2019036080A1 (en) | Constrained motion field estimation for inter prediction | |
US10462482B2 (en) | Multi-reference compound prediction of a block using a mask mode | |
US10448013B2 (en) | Multi-layer-multi-reference prediction using adaptive temporal filtering | |
US10412383B2 (en) | Compressing groups of video frames using reversed ordering | |
US10412410B2 (en) | Compound motion-compensated prediction | |
GB2547754A (en) | Dynamic reference motion vector coding mode |
Legal Events
Date | Code | Title | Description |
---|---|---|---|
AS | Assignment |
Owner name: GOOGLE INC., CALIFORNIAFree format text: ASSIGNMENT OF ASSIGNORS INTEREST;ASSIGNORS:MUKHERJEE, DEBARGHA;XU, YAOWU;BANKOSKI, JAMES;AND OTHERS;SIGNING DATES FROM 20170130 TO 20170131;REEL/FRAME:041156/0903 |
|
AS | Assignment |
Owner name: GOOGLE LLC, CALIFORNIAFree format text: CHANGE OF NAME;ASSIGNOR:GOOGLE INC.;REEL/FRAME:044567/0001Effective date: 20170929 |
|
STPP | Information on status: patent application and granting procedure in general |
Free format text: RESPONSE TO NON-FINAL OFFICE ACTION ENTERED AND FORWARDED TO EXAMINER |
|
STPP | Information on status: patent application and granting procedure in general |
Free format text: FINAL REJECTION MAILED |
|
STPP | Information on status: patent application and granting procedure in general |
Free format text: NOTICE OF ALLOWANCE MAILED -- APPLICATION RECEIVED IN OFFICE OF PUBLICATIONS |
|
STPP | Information on status: patent application and granting procedure in general |
Free format text: PUBLICATIONS -- ISSUE FEE PAYMENT VERIFIED |
|
STCF | Information on status: patent grant |
Free format text: PATENTED CASE |
|
MAFP | Maintenance fee payment |
Free format text: PAYMENT OF MAINTENANCE FEE, 4TH YEAR, LARGE ENTITY (ORIGINAL EVENT CODE: M1551); ENTITY STATUS OF PATENT OWNER: LARGE ENTITYYear of fee payment: 4 |