US6574676B1 - System and method for scheduling disk drive commands by expected total access time - Google Patents
System and method for scheduling disk drive commands by expected total access time Download PDFInfo
- Publication number
- US6574676B1 US6574676B1 US09/481,255 US48125500A US6574676B1 US 6574676 B1 US6574676 B1 US 6574676B1 US 48125500 A US48125500 A US 48125500A US 6574676 B1 US6574676 B1 US 6574676B1
- Authority
- US
- United States
- Prior art keywords
- command
- candidate command
- scheduling algorithm
- candidate
- time
- Prior art date
- Legal status (The legal status is an assumption and is not a legal conclusion. Google has not performed a legal analysis and makes no representation as to the accuracy of the status listed.)
- Expired - Lifetime
Links
Images
Classifications
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F3/00—Input arrangements for transferring data to be processed into a form capable of being handled by the computer; Output arrangements for transferring data from processing unit to output unit, e.g. interface arrangements
- G06F3/06—Digital input from, or digital output to, record carriers, e.g. RAID, emulated record carriers or networked record carriers
- G06F3/0601—Interfaces specially adapted for storage systems
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F3/00—Input arrangements for transferring data to be processed into a form capable of being handled by the computer; Output arrangements for transferring data from processing unit to output unit, e.g. interface arrangements
- G06F3/06—Digital input from, or digital output to, record carriers, e.g. RAID, emulated record carriers or networked record carriers
- G06F2003/0697—Digital input from, or digital output to, record carriers, e.g. RAID, emulated record carriers or networked record carriers device management, e.g. handlers, drivers, I/O schedulers
Definitions
- the present invention relates to the field of data storage and particularly to a system and method for sorting I/O commands operations in rotating disk drives. More specifically, this invention relates to a computer program product for selecting the next command in an optimal way. Such selection is based on a probabilistic disk drive scheduling algorithm that reduces drive latency and improves its throughput.
- Computer systems or other accessories collectively referred to as “computer systems”, generally include data storage devices, such as hard disk drives.
- a hard disk drive is an electromechanical or an optical-mechanical device that reads from and writes to a hard disk that includes one or more disk platens.
- the main components of a disk drive are a spindle on which the platens are mounted, a drive motor for spinning the platens, one or more read/write heads, a seek mechanism for positioning the heads over the platens, and a controller which synchronizes read/write commands and transfers information to and from other components of the computer system.
- the computer system provides logical instructions to its disk drive, to read or write data into storage locations on the disk.
- the instructions typically include a logical address for the data, the data is not stored in logical format; rather, the data is stored in a physical address location.
- the controller typically translates the logical address into a physical address. Once the translation occurs, the controller directs the heads to the physical address location at which the desired data is stored or read.
- Access time The amount of time from the start of the movement of the heads arm until the start of the read or write phase of an I/O command is referred to as the “access time”.
- Access time is comprised of two components.
- the first component the seek and settling time, which is the time required to move a disk drive's read/write head to a specific track or cylinder on a disk and settling it on the target track.
- the second component is the rotational latency time, which corresponds to the additional time required for the disk to rotate so that the desired physical address location is located underneath the properly positioned head.
- the available rotational time of a command is calculated based on the rotational position of the command and the current position of the head. If there is no chance that the command could be accessed at that time because of the radial distance, this rotational time is repeatedly incremented by one revolution time, until there is a positive probability of a successful access.
- Each disk typically includes a plurality of concentric tracks, on one or both surfaces, from which information is read, or onto which information is written by a read/write element.
- each track is further divided into a plurality of sectors.
- a cylinder is formed by a plurality of tracks with the same radial coordinate on the stack of disks.
- a disk drive a disk rotates at a high speed while the read/write element “flies” over the surface of the rotating disk.
- the read/write element is positioned over specific areas or sectors of the disk in accordance with commands received from the computer system.
- the numerous commands of the computer system usually exceed the drive's ability to execute the commands immediately upon receipt, in which case a queue is formed.
- the set of commands available for execution by the disk drive is referred to as the “command queue”.
- controllers have been developed to reorder the command queue according to a positional sequence. Examples include reducing the number of changes in the direction of the movement of the head, ordering according to the shortest calculated head movement regardless of direction, and more commonly ordering according to the shortest overall access time between successive commands.
- the command with the shortest time difference is removed from the queue and the next command becomes the first command.
- the ordering algorithm is then repeated to determine a new next command.
- Still another disk scheduling method is illustrated in U.S. Pat. No. 5,854,941 to Ballard et al., that describes a disk scheduling queue for sorting pending disk I/O commands according to an estimated access time.
- the estimated access time is calculated from first and second rotational times that are derived from a rotational time table based on logical address and head movement time. Once the command is executed, the rotational positioning algorithm is repeated and the queue is resorted.
- the estimate results in a deterministic value rather than a weighted average that takes into account the probabilities of the possible values.
- a computer program product is provided as a scheduling algorithm for use in disk drives to place I/O commands in a queue.
- the scheduling strategy is implemented by selecting commands based on a probabilistic approach that minimizes the expected next command access time.
- the present scheduling algorithm allows data to be accessed in the shortest expected amount of time possible, maximizes the throughput of the drive and improves the overall performance of the computer system.
- the scheduling algorithm of the present invention improves the disk I/O average access time by estimating the expected access time (EAT) for the queued commands, and by selecting commands so that the command with the least EAT (LEAT) is executed first.
- EAT expected access time
- the probabilistic approach of the present invention does not postpone the execution of commands due to this uncertainty, but rather relies upon, and incorporates such uncertainty as a useful criterion in the comparison of commands.
- An exemplary criterion used in a preferred embodiment of the present invention is the least expected access time.
- the least expected access time is a concept which is introduced herein, and which is derived by having the disk scheduling algorithm sort pending disk I/O commands into a disk scheduling queue according to the expected time necessary to reach the target positions on the disk.
- the probabilistic algorithm weights the possible access times of commands sorted in the disk scheduling queue, and accounts for the probability of the drive executing a command during the first possible revolution as well as the probability of the drive executing the command in the second possible revolution. Both of these probabilities are taken into consideration in reaching a final determination as to the queue order of the commands. This would eliminate the rigid deterministic approach followed by conventional scheduling algorithms and allow for taking calculated risks in scheduling commands so as to minimize the long-term average latency.
- the scheduling algorithm assigns an Expected Access Time EAT(i) to an ith command as follows:
- p(i) is the probability that a revolution will be missed
- r is the one revolution time
- s(i) is the minimum time it would take to achieve the correct rotational position with nonzero probability of completing the seek and settling.
- the probability p(i) reflects various types of uncertainties, both intrinsic and resulting from the lack of computational resources. For simplicity purposes, the possibility of missing more than one revolution was neglected, though those skilled in the art could account for this factor without departing from the scope of the present invention.
- the scheduling algorithm will assign an EAT to each of the commands in the queue.
- each of the queued commands will be provided with a single number rather than two numbers as explained above in connection with the conventional deterministic approach.
- the scheduling algorithm will then reorder the queue commands according to a desired LEAT scheme, for example according to-ascending expected access times, so that the command with the LEAT will be executed next.
- the probability p(i) does not have to be computed for every single command in the queue. Rather, depending on the current best candidate, if a command certainly cannot be accessed faster than the current best candidate, then this command will not be assigned an EAT.
- FIG. 1 is a schematic illustration of a disk drive that implements a scheduling algorithm according to the present invention
- FIG. 2 is a schematic, top plan view of the disk drive of FIG. 1 viewed from a different angle;
- FIG. 3 is comprised of FIGS. 3A and 3B, and represents a flow chart that illustrates the operation of a preferred embodiment of the scheduling algorithm
- FIG. 4 is a graph that illustrates “mintime” versus the maximum seek length for a disk, and which is stored in tabular form in a processor of the disk drive of FIG. 1 .
- FIGS. 1 and 2 illustrate a disk drive 10 comprised of a head stack assembly 12 and a stack of spaced apart magnetic, optical and/or MO data storage disks or media 14 that are rotatable about a common shaft 16 .
- the head stack assembly 12 includes a number of actuator arms 20 that extend into spacings between the disks 14 , with only one disk 14 and one actuator arm 20 being illustrated for simplicity of illustration.
- the head stack assembly 12 also includes an E-shaped block 24 and a magnetic rotor 26 attached to the block 24 in a position diametrically opposite to the actuator arms 20 .
- the rotor 26 cooperates with a stator (not shown) for the actuator arms 20 to rotate in a substantially radial direction, along an arcuate path in the direction of an arrow A.
- Energizing a coil of the rotor 26 with a direct current in one polarity or the reverse polarity causes the head stack assembly 12 , including the actuator arms 20 , to rotate around axis P in a direction substantially radial to the disks 14 .
- a transducer head 40 is mounted on the free end of each actuator arm 20 for pivotal movement around axis P.
- the magnetic rotor 26 controls the movement of the head 40 in a radial direction, in order to position the head 40 in registration with data information tracks or data cylinders 42 to be followed, and to access particular data sectors 44 on these tracks 42 .
- a data cylinder includes a set of corresponding data information tracks 42 for the data surfaces of the stacked disks 14 .
- Data information tracks 42 include a plurality of segments or data sectors 44 , each containing a predefined size of individual groups of data records that are saved for later retrieval and updates.
- the data information tracks 42 can be disposed at predetermined positions relative to a servo reference index.
- each sector 44 is identified by a sector identification (SID) read by the head 40 from the disk surface.
- SID sector identification
- Each command is stored as an object of a linked list (or a data structure) representing the queue, and is characterized by a physical location on the surface of the disk 14 , which occupies one or more data sectors 44 .
- Each data sector is identified by a radial coordinate and an angular coordinate (also referred to as rotational position).
- the disk drive 10 further includes an interface processor 50 which is coupled to a command queue controller 55 that links the interface processor 50 to the head stack assembly 12 , via a servo processor 57 .
- the interface processor 50 implements a scheduling algorithm that sets a queue execution order of the pending commands when the current I/O command is being executed.
- the command queue controller 55 receives the logical addresses of the commands from the interface processor 50 , and translates them into physical addresses on the disks 14 .
- the command queue controller 55 then sends control signals to the servo processor 57 to move the heads 40 .
- the interface processor 50 , the command queue controller 55 and the servo processor 57 are shown to constitute part of the disk drive 10 . However, persons skilled in the art will recognize that these components may be provided as part of a separate host computer system.
- the present scheduling algorithm is implemented by the command queue controller 55 for sorting and scheduling commands in a command queue, to substantially minimize the long-term average access time of commands.
- the algorithm identifies a candidate command from the command queue with the least expected access time (LEAT), and reorders the command queue accordingly, so that this candidate command is executed following the current command. Using the LEAT leads to an approximately minimum average access time in the long run.
- LEAT least expected access time
- the scheduling algorithm is represented by a method 100 and illustrated in FIGS. 3A and 3B.
- the scheduling algorithm starts at block or step 105 by marking the end of the execution of the current command by the head 40 .
- an exemplary current command is denoted by the numeral reference 60 .
- the scheduling algorithm initializes “mintime”, by setting it to a predetermined large value.
- mintime denotes a program variable which is gradually decreased until it reaches a final minimum value.
- the scheduling algorithm acquires the first rotational time of a candidate command in the queue.
- an exemplary candidate command is denoted by the numeral reference 65 .
- the rotational time of the candidate command 65 is measured by the angular difference between the candidate command 65 relative to the end of the current command 60 .
- the rotational time of the candidate command 65 is the amount of time until the first time after the end of the current command that the rotational position of the candidate command will coincide with the rotational position of the head 40 .
- the scheduling algorithm inquires whether the rotational time determined in step 115 is greater than a current “mintime”, which is the shortest expected time for the drive 10 to access a candidate command among those that the command queue controller 55 has scanned so far. If the scheduling algorithm determines that the rotational time is greater than or equal to the current “mintime”, which implies the existence of another command in the queue which is at least as appropriate for execution, then the scheduling algorithm bypasses the candidate command 65 and proceeds to the next command in the queue (step 125 ).
- a current “mintime” is the shortest expected time for the drive 10 to access a candidate command among those that the command queue controller 55 has scanned so far.
- the scheduling algorithm then inquires, at decision step 130 , whether the end of the queue has been reached, that is whether the scheduling algorithm has completed the scanning of all the commands in the queue. If it has, then it proceeds to step 135 where it returns the best found result or command with the least expected access time (LEAT). If, on the other hand, the end of the queue has not been reached, the scheduling algorithm returns to the beginning of the loop and considers the next command in the queue.
- LEAT least expected access time
- the scheduling algorithm determines that the rotational time is less than the current “mintime”, which implies that the candidate command 65 might be better than any previously scanned command
- the scheduling algorithm checks additional conditions that would confirm, with a higher degree of certainty, whether or not the candidate command 65 has the least expected access time (LEAT) among previously scanned commands.
- the scheduling algorithm proceeds to step 140 where it acquires various parameters specific to the candidate command 65 . These parameters include, for example, the cylinder difference, the read/write type, the direction of the movement of the head (inward or outward) and the head number.
- the scheduling algorithm determines the maximum possible seek length within the current “mintime” at step 145 . It then proceeds to decision step 150 (FIG. 3B) where it compares the required seek time for the candidate command 65 (obtained at step 140 ) with the maximum possible seek length within the current “mintime” (obtained at step 145 ).
- This approach allows the scheduling algorithm to optimize the calculation of seek time in that the scheduling algorithm is no longer required to dedicate time referring to look-up tables stored in the interface processor 50 for each candidate command 65 . Rather, the scheduling algorithm checks only once the maximum seek time corresponding to the “mintime”, and then compares the required seek time for the candidate command 65 to the maximum possible seek length within the current “mintime”.
- FIG. 4 it illustrates an exemplary graph 200 that charts the maximum possible seek length versus available rotational time which is stored as a look-up table in the memory of the interface processor 50 .
- the shaded area defined by the coordinates of the available rotational time and the coordinate axes, represents the maximum seek length values (measured in cylinders) for candidate commands, that are less than the maximum possible seek length corresponding to the rotational time.
- step 150 If at step 150 the required seek time for the candidate command 65 is greater than the maximum seek length that is possible within the current “mintime”, as exemplified by the value 220 that lies above the shaded area, the scheduling algorithm bypasses the candidate command 65 for not possessing the LEAT, i.e., the currently best known command is more appropriate than the candidate command. The scheduling algorithm then proceeds to step 125 (FIG. 3A) and runs the sequence of steps as described above.
- step 150 the required seek time for the candidate command 65 is found to be less than or equal to the maximum possible seek length within the current “mintime”, as exemplified by the value 210 that lies within the shaded area (FIG. 4 ), the scheduling algorithm proceeds to perform more refined calculations that would confirm, with an even higher degree of accuracy, whether or not the candidate command 65 has the least expected access time.
- the scheduling algorithm consults a table stored in the memory of the interface processor 50 , and inquires at step 155 if, based on the parameters discovered so far, the candidate command may require an additional revolution to be added to the access time corresponding to the required seek length determined at step 140 .
- the stored look-up table provides two or more (e.g. five) columns of numbers that provide the probability of a successful execution of the candidate command 65 . For example, one column provides the shortest seek length with the zero probability of success, and another column provides the length of the longest seek with unity probability of success.
- the scheduling algorithm compares the seek length of the candidate command 65 to the column with zero probability of success, and, if it determines that the seek of the candidate command is longer than the seek length in that column, then the candidate command time is increased by one revolution at step 160 , and the scheduling algorithm proceeds to decision step 170 . If at step 155 the scheduling algorithm determines that the seek of the candidate command is shorter than the seek length in the column with the zero probability of success, it does not increase the candidate command time by a revolution, but proceeds to decision step 165 .
- the scheduling algorithm determines at decision step 165 whether the command time suffices with certainty for the seek. To this end, the scheduling algorithm compares the seek of the candidate command with the seek length in the column time with unity probability of success, and if it determines that the candidate seek is shorter than, or equal to the seek length in that column, then the candidate command 65 is deemed to satisfy the condition of decision step 165 , and the scheduling algorithm proceeds to step 170 .
- step 175 the scheduling algorithm proceeds to step 175 , where it adds the expected lost time from look-up tables stored in the memory of the interface processor 50 .
- This step is carried out as follows: Suppose the rotational time between the end of the current command 60 (FIG. 2) and the start of the candidate command is s. More precisely, it would take s time units for the rotational position of the head to change from that of the end of the current command 60 to that of the start of start of the candidate command.
- the quantity s is a constant depending on the difference in rotational locations.
- r is the (constant) time it takes to complete a full revolution.
- p the probability of the candidate command missing a revolution
- the probability p reflects various uncertainties, both intrinsic and due to the lack of computational resources for a more accurate evaluation.
- a command (i) in the queue has rotational time s(i) and probability of success p(i) during the first revolution, its expected access time (EAT), t(i), is expressed by the following equation:
- the scheduling algorithm then proceeds to decision step 170 , where it inquires whether the expected access time for the candidate command 65 obtained in step 140 is less than the current “mintime”. If it is not, the scheduling algorithm bypasses the candidate command 65 and proceeds to the next command in the queue at step 125 as explained above. If, on the other hand, the expected access time for the candidate command 65 obtained in step 140 is less than the current “mintime”, the scheduling algorithm proceeds to step 180 , and updates the current “mintime” with the value of the current candidate command 65 . It also stores the identity of the current command as the currently best known command.
- the scheduling algorithm returns to steps 125 and 130 (FIG. 3 A), as explained above, and terminates by selecting the command with the least expected access time (LEAT) or t(i) at step 135 .
- LEAT least expected access time
- throughput means the average number of commands per unit of time.
- the scheduling algorithm includes an efficient implementation of the LEAT criterion, namely, that the probability of a missed revolution p(i) does not have to be computed for every single command in the queue. Depending on the current best candidate, a command can be seen to have no chance of being the best candidate in the queue, regardless of its probability p(i) of a missed revolution.
Abstract
Description
Claims (44)
Priority Applications (1)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US09/481,255 US6574676B1 (en) | 2000-01-11 | 2000-01-11 | System and method for scheduling disk drive commands by expected total access time |
Applications Claiming Priority (1)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US09/481,255 US6574676B1 (en) | 2000-01-11 | 2000-01-11 | System and method for scheduling disk drive commands by expected total access time |
Publications (1)
Publication Number | Publication Date |
---|---|
US6574676B1 true US6574676B1 (en) | 2003-06-03 |
Family
ID=23911244
Family Applications (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
US09/481,255 Expired - Lifetime US6574676B1 (en) | 2000-01-11 | 2000-01-11 | System and method for scheduling disk drive commands by expected total access time |
Country Status (1)
Country | Link |
---|---|
US (1) | US6574676B1 (en) |
Cited By (49)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20020129083A1 (en) * | 2001-03-09 | 2002-09-12 | International Business Machines Corporation | System, method, and program for controlling execution sequencing of multiple jobs |
US20030023778A1 (en) * | 2001-07-26 | 2003-01-30 | International Business Machines Corporation | System and method for scheduling of random commands to minimize impact of locational uncertainty |
US20030056034A1 (en) * | 2001-09-14 | 2003-03-20 | Seagate Technology Llc | Prioritizing commands in a data storage device |
US20030056059A1 (en) * | 2001-09-17 | 2003-03-20 | Seagate Technology Llc | Optimizing data transfer performance through partial write command purging in a disc drive |
US20030115407A1 (en) * | 2001-11-27 | 2003-06-19 | International Business Machines Corporation | Command aging method for data storage devices |
US20030158996A1 (en) * | 2002-01-25 | 2003-08-21 | International Business Machines Corporation | System and method for efficiently sorting DASD queued commands with unknown rotational latency |
US20040015653A1 (en) * | 2002-07-22 | 2004-01-22 | Trantham Jon D. | Method and apparatus for determining the order of execution of queued commands in a data storage system |
US20040019745A1 (en) * | 2002-07-23 | 2004-01-29 | International Business Machines Corporation | Method and apparatus for implementing command queue ordering with benefit determination of prefetch operations |
US20040030827A1 (en) * | 2002-08-08 | 2004-02-12 | International Business Machines Corporation | Method and system for efficiently calculating and storing expected access time information for DASD |
US20040193743A1 (en) * | 2003-03-10 | 2004-09-30 | Byers Larry L. | Servo controller interface module for embedded disk controllers |
US20040199718A1 (en) * | 2003-03-10 | 2004-10-07 | Byers Larry L. | Method and system for embedded disk controllers |
US6826650B1 (en) * | 2000-08-22 | 2004-11-30 | Qlogic Corporation | Disk controller configured to perform out of order execution of write operations |
US6848019B1 (en) * | 2000-02-17 | 2005-01-25 | Seagate Technology Llc | Performance in a data storage device using head-to-head offsets in access command scheduling |
US20050166013A1 (en) * | 2004-01-26 | 2005-07-28 | Hitachi Global Storage Technologies | System and method for selecting command for execution in HDD based on benefit |
US20050174680A1 (en) * | 2004-02-10 | 2005-08-11 | Spaur Michael R. | Method and system for head position control in embedded disk drive controllers |
US20050185318A1 (en) * | 2004-02-25 | 2005-08-25 | Hitachi Global Storage Technologies | System and method for correcting for head tilt in HDD |
US20050193058A1 (en) * | 2004-03-01 | 2005-09-01 | Yoshiko Yasuda | Command control method in network storage system |
US20050190481A1 (en) * | 2004-02-26 | 2005-09-01 | Hitachi Global Storage Technologies | System and method for correcting for head tilt in HDD |
US20050259517A1 (en) * | 2004-05-10 | 2005-11-24 | Airmar Technology Corporation | Transducer identification |
US20050276151A1 (en) * | 2004-06-14 | 2005-12-15 | White Theodore C | Integrated memory controller |
US20050289312A1 (en) * | 2004-06-23 | 2005-12-29 | Sugata Ghosal | Methods, apparatus and computer programs for scheduling storage requests |
US20060015654A1 (en) * | 2004-07-19 | 2006-01-19 | Krantz Leon A | Dynamic WWN module for storage controllers |
US20060015774A1 (en) * | 2004-07-19 | 2006-01-19 | Nguyen Huy T | System and method for transmitting data in storage controllers |
US20060015660A1 (en) * | 2004-07-19 | 2006-01-19 | Kha Nguyen | System and method for controlling buffer memory overflow and underflow conditions in storage controllers |
US20060104269A1 (en) * | 2004-11-15 | 2006-05-18 | Perozo Angel G | Method and system for processing frames in storage controllers |
US20060117235A1 (en) * | 2004-11-08 | 2006-06-01 | Dinesh Jayabharathi | System and method for conducting BIST operations |
US20060129715A1 (en) * | 2003-01-31 | 2006-06-15 | White Theodore C | System and method for transferring data in storage controllers |
US20060227447A1 (en) * | 2005-04-06 | 2006-10-12 | Pinvidic Daniel R | Method and system for read gate timing control for storage controllers |
US20060288184A1 (en) * | 2005-06-17 | 2006-12-21 | Seagate Technology Llc | Admission control in data storage devices |
US20070198838A1 (en) * | 2004-04-02 | 2007-08-23 | Masao Nonaka | Unauthorized Contents Detection System |
US20080005463A1 (en) * | 2006-06-30 | 2008-01-03 | Seagate Technology Llc | Command queue ordering by flipping active write zones |
US20080005458A1 (en) * | 2006-06-29 | 2008-01-03 | Seagate Technology Llc | Command queue ordering with directional and floating write bands |
US20080059708A1 (en) * | 2006-06-30 | 2008-03-06 | Seagate Technology Llc | Command queue ordering by positionally pushing access commands |
US20090187705A1 (en) * | 2008-01-18 | 2009-07-23 | Microsoft Corporation | Fair and dynamic disk input/output bandwidth distribution |
US20100077175A1 (en) * | 2008-09-19 | 2010-03-25 | Ching-Yi Wu | Method of Enhancing Command Executing Performance of Disc Drive |
US20100146205A1 (en) * | 2008-12-08 | 2010-06-10 | Seagate Technology Llc | Storage device and method of writing data |
US7975110B1 (en) | 2003-03-10 | 2011-07-05 | Marvell International Ltd. | Method and system for supporting multiple external serial port devices using a serial port controller in embedded disk controllers |
US8166217B2 (en) | 2004-06-28 | 2012-04-24 | Marvell International Ltd. | System and method for reading and writing data using storage controllers |
US8189285B1 (en) | 2003-03-10 | 2012-05-29 | Marvell International Ltd. | Method and system for automatic time base adjustment for disk drive servo controllers |
US8417900B1 (en) | 2004-10-13 | 2013-04-09 | Marvell International Ltd. | Power save module for storage controllers |
US10175893B2 (en) | 2016-12-19 | 2019-01-08 | International Business Machines Corporation | Predictive scheduler for memory rank switching |
US10303373B2 (en) * | 2017-06-12 | 2019-05-28 | Seagate Technology Llc | Prioritizing commands in a data storage device |
US10310873B1 (en) | 2014-08-28 | 2019-06-04 | Seagate Technology Llc | Probabilistic aging command sorting |
US10310923B1 (en) * | 2014-08-28 | 2019-06-04 | Seagate Technology Llc | Probabilistic aging command sorting |
US10747446B2 (en) * | 2016-11-25 | 2020-08-18 | Hitachi, Ltd. | Computer system and storage device activation control method |
US10817217B2 (en) | 2018-06-28 | 2020-10-27 | Seagate Technology Llc | Data storage system with improved time-to-ready |
US10831403B2 (en) | 2017-05-19 | 2020-11-10 | Seagate Technology Llc | Probabalistic command aging and selection |
US11256423B2 (en) | 2019-10-14 | 2022-02-22 | Western Digital Technologies, Inc. | Efficiently identifying command readiness based on system state and data spread in multi queue depth environment |
US11966584B2 (en) * | 2021-03-05 | 2024-04-23 | EMC IP Holding Company LLC | Method, device, and computer program product for managing storage device |
Citations (12)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US4636883A (en) | 1983-10-21 | 1987-01-13 | Kabushiki Kaisha Toshiba | Magnetic head control apparatus |
US4899234A (en) | 1988-04-04 | 1990-02-06 | Magnetic Peripherals Inc. | Adaptive velocity profile for disk actuator control |
US5132855A (en) | 1989-11-28 | 1992-07-21 | Seagate Technology, Inc. | Adaptive velocity profile selection based on torque constant measurement |
US5381282A (en) | 1991-10-18 | 1995-01-10 | International Business Machines Corporation | Inter-sample switching of servo control in direct access storage devices |
US5570332A (en) | 1995-05-25 | 1996-10-29 | Seagate Technology, Inc. | Method for reducing rotational latency in a disc drive |
US5664143A (en) | 1994-11-23 | 1997-09-02 | International Business Machines Corporation | Method and apparatus for sorting disk access commands in a rotational position queue according to time differences between the commands |
US5729718A (en) * | 1993-11-10 | 1998-03-17 | Quantum Corporation | System for determining lead time latency as function of head switch, seek, and rotational latencies and utilizing embedded disk drive controller for command queue reordering |
US5854941A (en) * | 1996-05-31 | 1998-12-29 | Acceleration Software International Corporation | System for estimating access time by deriving from first and second rotational time from rotational time table based on logical address and head movement time |
US6002540A (en) | 1995-05-18 | 1999-12-14 | International Business Machines Corporation | Method and apparatus for rotary actuator arc compensation correction in a direct access storage device |
US6170042B1 (en) * | 1998-02-24 | 2001-01-02 | Seagate Technology Llc | Disc drive data storage system and method for dynamically scheduling queued commands |
US6311256B2 (en) * | 1997-06-30 | 2001-10-30 | Emc Corporation | Command insertion and reordering at the same storage controller |
US6442648B1 (en) * | 1998-09-03 | 2002-08-27 | International Business Machines Corporation | Method of and system for the dynamic scheduling of requests to access a storage system |
-
2000
- 2000-01-11 US US09/481,255 patent/US6574676B1/en not_active Expired - Lifetime
Patent Citations (12)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US4636883A (en) | 1983-10-21 | 1987-01-13 | Kabushiki Kaisha Toshiba | Magnetic head control apparatus |
US4899234A (en) | 1988-04-04 | 1990-02-06 | Magnetic Peripherals Inc. | Adaptive velocity profile for disk actuator control |
US5132855A (en) | 1989-11-28 | 1992-07-21 | Seagate Technology, Inc. | Adaptive velocity profile selection based on torque constant measurement |
US5381282A (en) | 1991-10-18 | 1995-01-10 | International Business Machines Corporation | Inter-sample switching of servo control in direct access storage devices |
US5729718A (en) * | 1993-11-10 | 1998-03-17 | Quantum Corporation | System for determining lead time latency as function of head switch, seek, and rotational latencies and utilizing embedded disk drive controller for command queue reordering |
US5664143A (en) | 1994-11-23 | 1997-09-02 | International Business Machines Corporation | Method and apparatus for sorting disk access commands in a rotational position queue according to time differences between the commands |
US6002540A (en) | 1995-05-18 | 1999-12-14 | International Business Machines Corporation | Method and apparatus for rotary actuator arc compensation correction in a direct access storage device |
US5570332A (en) | 1995-05-25 | 1996-10-29 | Seagate Technology, Inc. | Method for reducing rotational latency in a disc drive |
US5854941A (en) * | 1996-05-31 | 1998-12-29 | Acceleration Software International Corporation | System for estimating access time by deriving from first and second rotational time from rotational time table based on logical address and head movement time |
US6311256B2 (en) * | 1997-06-30 | 2001-10-30 | Emc Corporation | Command insertion and reordering at the same storage controller |
US6170042B1 (en) * | 1998-02-24 | 2001-01-02 | Seagate Technology Llc | Disc drive data storage system and method for dynamically scheduling queued commands |
US6442648B1 (en) * | 1998-09-03 | 2002-08-27 | International Business Machines Corporation | Method of and system for the dynamic scheduling of requests to access a storage system |
Cited By (109)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US6848019B1 (en) * | 2000-02-17 | 2005-01-25 | Seagate Technology Llc | Performance in a data storage device using head-to-head offsets in access command scheduling |
US7484037B2 (en) | 2000-08-22 | 2009-01-27 | Marvell International Ltd. | Disk controller configured to perform out of order execution of write operations |
US6826650B1 (en) * | 2000-08-22 | 2004-11-30 | Qlogic Corporation | Disk controller configured to perform out of order execution of write operations |
US7814271B2 (en) | 2000-08-22 | 2010-10-12 | Marvell World Trade Ltd. | Disk controller configured to perform out of order execution of write operations |
US8769219B2 (en) * | 2000-08-22 | 2014-07-01 | Marvell World Trade Ltd. | Disk controller configured to perform out of order execution of write operations |
US20090150607A1 (en) * | 2000-08-22 | 2009-06-11 | Krantz Arie L | Disk controller configured to perform out of order execution of write operations |
US7103715B2 (en) | 2000-08-22 | 2006-09-05 | Marvell World Trade Ltd. | Disk controller configured to perform out of order execution of write operations |
US20060288160A1 (en) * | 2000-08-22 | 2006-12-21 | Krantz Arie L | Disk controller configured to perform out of order execution of write operations |
US20120185655A1 (en) * | 2000-08-22 | 2012-07-19 | Krantz Arie L | Disk controller configured to perform out of order execution of write operations |
US20110029727A1 (en) * | 2000-08-22 | 2011-02-03 | Krantz Arie L | Disk Controller Configured to Perform Out of Order Execution of Write Operations |
US8145835B2 (en) | 2000-08-22 | 2012-03-27 | Marvell World Trade, Ltd. | Disk controller configured to perform out of order execution of write operations |
US7159218B2 (en) * | 2001-03-09 | 2007-01-02 | Lenovo (Singapore) Pte. Ltd. | System, method, and program for controlling execution sequencing of multiple jobs |
US20020129083A1 (en) * | 2001-03-09 | 2002-09-12 | International Business Machines Corporation | System, method, and program for controlling execution sequencing of multiple jobs |
US6763404B2 (en) * | 2001-07-26 | 2004-07-13 | International Business Machines Corporation | System and method for scheduling of random commands to minimize impact of locational uncertainty |
US20030023778A1 (en) * | 2001-07-26 | 2003-01-30 | International Business Machines Corporation | System and method for scheduling of random commands to minimize impact of locational uncertainty |
US20050055517A1 (en) * | 2001-09-14 | 2005-03-10 | Seagate Technology Llc, A Delaware Corporation | Prioritizing commands in a data storage device |
US8327093B2 (en) * | 2001-09-14 | 2012-12-04 | Seagate Technology Llc | Prioritizing commands in a data storage device |
US20030056034A1 (en) * | 2001-09-14 | 2003-03-20 | Seagate Technology Llc | Prioritizing commands in a data storage device |
US6826630B2 (en) * | 2001-09-14 | 2004-11-30 | Seagate Technology Llc | Prioritizing commands in a data storage device |
US20030056059A1 (en) * | 2001-09-17 | 2003-03-20 | Seagate Technology Llc | Optimizing data transfer performance through partial write command purging in a disc drive |
US6789163B2 (en) * | 2001-09-17 | 2004-09-07 | Seagate Technology Llc | Optimizing data transfer performance through partial write command purging in a disc drive |
US20030115407A1 (en) * | 2001-11-27 | 2003-06-19 | International Business Machines Corporation | Command aging method for data storage devices |
US6848020B2 (en) * | 2001-11-27 | 2005-01-25 | International Business Machines Corporation | Command aging method for data storage devices |
US6681289B2 (en) * | 2002-01-25 | 2004-01-20 | International Business Machines Corporation | System and method for efficiently sorting DASD queued commands with unknown rotational latency |
US20030158996A1 (en) * | 2002-01-25 | 2003-08-21 | International Business Machines Corporation | System and method for efficiently sorting DASD queued commands with unknown rotational latency |
US20040015653A1 (en) * | 2002-07-22 | 2004-01-22 | Trantham Jon D. | Method and apparatus for determining the order of execution of queued commands in a data storage system |
US7043567B2 (en) * | 2002-07-22 | 2006-05-09 | Seagate Technology Llc | Method and apparatus for determining the order of execution of queued commands in a data storage system |
US6877070B2 (en) * | 2002-07-23 | 2005-04-05 | Hitachi Global Storage Technologies Netherlands, B.V. | Method and apparatus for implementing command queue ordering with benefit determination of prefetch operations |
US20040019745A1 (en) * | 2002-07-23 | 2004-01-29 | International Business Machines Corporation | Method and apparatus for implementing command queue ordering with benefit determination of prefetch operations |
US6859859B2 (en) * | 2002-08-08 | 2005-02-22 | Hitachi Global Storage Technologies Netherlands, B.V. | Method and system for efficiently calculating and storing expected access time information for DASD |
US20040030827A1 (en) * | 2002-08-08 | 2004-02-12 | International Business Machines Corporation | Method and system for efficiently calculating and storing expected access time information for DASD |
US8713224B2 (en) | 2003-01-31 | 2014-04-29 | Marvell International Ltd. | System and method for transferring data in storage controllers |
US20060129715A1 (en) * | 2003-01-31 | 2006-06-15 | White Theodore C | System and method for transferring data in storage controllers |
US8189285B1 (en) | 2003-03-10 | 2012-05-29 | Marvell International Ltd. | Method and system for automatic time base adjustment for disk drive servo controllers |
US7853747B2 (en) | 2003-03-10 | 2010-12-14 | Marvell International Ltd. | Method and system for using an external bus controller in embedded disk controllers |
US7870320B1 (en) | 2003-03-10 | 2011-01-11 | Marvell International Ltd. | Interrupt controller for prioritizing interrupt requests in an embedded disk controller |
US7870346B2 (en) | 2003-03-10 | 2011-01-11 | Marvell International Ltd. | Servo controller interface module for embedded disk controllers |
US20040193743A1 (en) * | 2003-03-10 | 2004-09-30 | Byers Larry L. | Servo controller interface module for embedded disk controllers |
US20040199718A1 (en) * | 2003-03-10 | 2004-10-07 | Byers Larry L. | Method and system for embedded disk controllers |
US7975110B1 (en) | 2003-03-10 | 2011-07-05 | Marvell International Ltd. | Method and system for supporting multiple external serial port devices using a serial port controller in embedded disk controllers |
US20050166013A1 (en) * | 2004-01-26 | 2005-07-28 | Hitachi Global Storage Technologies | System and method for selecting command for execution in HDD based on benefit |
US7376784B2 (en) * | 2004-01-26 | 2008-05-20 | Hitachi Global Storage Technologies Netherlands B.V. | System and method for selecting command for execution in HDD based on benefit |
US20090097157A1 (en) * | 2004-02-10 | 2009-04-16 | Spaur Michael R | Method and system for head position control in embedded disk drive controllers |
US20070053099A1 (en) * | 2004-02-10 | 2007-03-08 | Marvell International Ltd. | Method and system for head position control in embedded disk drive controllers |
US20050174680A1 (en) * | 2004-02-10 | 2005-08-11 | Spaur Michael R. | Method and system for head position control in embedded disk drive controllers |
US8116026B2 (en) | 2004-02-10 | 2012-02-14 | Marvell International Ltd. | Method and system for head position control in embedded disk drive controllers |
US7133235B2 (en) * | 2004-02-25 | 2006-11-07 | Hitachi Global Storage Technologies Netherlands, B.V. | System and method for correcting for head tilt in HDD |
US20050185318A1 (en) * | 2004-02-25 | 2005-08-25 | Hitachi Global Storage Technologies | System and method for correcting for head tilt in HDD |
US20050190481A1 (en) * | 2004-02-26 | 2005-09-01 | Hitachi Global Storage Technologies | System and method for correcting for head tilt in HDD |
US7370142B2 (en) | 2004-03-01 | 2008-05-06 | Hitachi, Ltd. | Command control method in network storage system |
US20050193058A1 (en) * | 2004-03-01 | 2005-09-01 | Yoshiko Yasuda | Command control method in network storage system |
US8972737B2 (en) | 2004-04-02 | 2015-03-03 | Panasonic Intellectual Property Management Co., Ltd. | Unauthorized contents detection system |
US7549061B2 (en) | 2004-04-02 | 2009-06-16 | Panasonic Corporation | Unauthorized contents detection system |
US20070198838A1 (en) * | 2004-04-02 | 2007-08-23 | Masao Nonaka | Unauthorized Contents Detection System |
EP1840782A3 (en) * | 2004-04-02 | 2008-02-13 | Matsushita Electric Industrial Co., Ltd. | Unauthorized contents detection system |
US20080034442A1 (en) * | 2004-04-02 | 2008-02-07 | Masao Nonaka | Unauthorized contents detection system |
US20080034443A1 (en) * | 2004-04-02 | 2008-02-07 | Masao Nonaka | Unauthorized contents detection system |
EP1840782A2 (en) | 2004-04-02 | 2007-10-03 | Matsushita Electric Industrial Co., Ltd. | Unauthorized contents detection system |
US20110119493A1 (en) * | 2004-04-02 | 2011-05-19 | Masao Nonaka | Unauthorized contents detection system |
US7900062B2 (en) | 2004-04-02 | 2011-03-01 | Panasonic Corporation | Unauthorized contents detection system |
US8261084B2 (en) | 2004-04-02 | 2012-09-04 | Panasonic Corporation | Unauthorized contents detection system |
US7743261B2 (en) | 2004-04-02 | 2010-06-22 | Panasonic Corporation | Unauthorized contents detection system |
US9270470B2 (en) | 2004-04-02 | 2016-02-23 | Panasonic Intellectual Property Management Co., Ltd. | Unauthorized contents detection system |
US8667291B2 (en) | 2004-04-02 | 2014-03-04 | Panasonic Corporation | Unauthorized contents detection system |
US20050259517A1 (en) * | 2004-05-10 | 2005-11-24 | Airmar Technology Corporation | Transducer identification |
US20050276151A1 (en) * | 2004-06-14 | 2005-12-15 | White Theodore C | Integrated memory controller |
US7565484B2 (en) | 2004-06-23 | 2009-07-21 | International Business Machines Corporation | Methods, apparatus and computer programs for scheduling storage requests |
US20050289312A1 (en) * | 2004-06-23 | 2005-12-29 | Sugata Ghosal | Methods, apparatus and computer programs for scheduling storage requests |
US7277984B2 (en) * | 2004-06-23 | 2007-10-02 | International Business Machines Corporation | Methods, apparatus and computer programs for scheduling storage requests |
US20080016310A1 (en) * | 2004-06-23 | 2008-01-17 | Sugata Ghosal | Methods, apparatus and computer programs for scheduling stroage requests |
US8166217B2 (en) | 2004-06-28 | 2012-04-24 | Marvell International Ltd. | System and method for reading and writing data using storage controllers |
US20060015654A1 (en) * | 2004-07-19 | 2006-01-19 | Krantz Leon A | Dynamic WWN module for storage controllers |
US8032674B2 (en) | 2004-07-19 | 2011-10-04 | Marvell International Ltd. | System and method for controlling buffer memory overflow and underflow conditions in storage controllers |
US20060015774A1 (en) * | 2004-07-19 | 2006-01-19 | Nguyen Huy T | System and method for transmitting data in storage controllers |
US20060015660A1 (en) * | 2004-07-19 | 2006-01-19 | Kha Nguyen | System and method for controlling buffer memory overflow and underflow conditions in storage controllers |
US9201599B2 (en) | 2004-07-19 | 2015-12-01 | Marvell International Ltd. | System and method for transmitting data in storage controllers |
US7984252B2 (en) | 2004-07-19 | 2011-07-19 | Marvell International Ltd. | Storage controllers with dynamic WWN storage modules and methods for managing data and connections between a host and a storage device |
US7757009B2 (en) | 2004-07-19 | 2010-07-13 | Marvell International Ltd. | Storage controllers with dynamic WWN storage modules and methods for managing data and connections between a host and a storage device |
US8417900B1 (en) | 2004-10-13 | 2013-04-09 | Marvell International Ltd. | Power save module for storage controllers |
US8015448B2 (en) | 2004-11-08 | 2011-09-06 | Marvell International Ltd. | System and method for conducting BIST operations |
US20060117235A1 (en) * | 2004-11-08 | 2006-06-01 | Dinesh Jayabharathi | System and method for conducting BIST operations |
US20110022758A1 (en) * | 2004-11-15 | 2011-01-27 | Perozo Angel G | Method and system for processing frames in storage controllers |
US20060104269A1 (en) * | 2004-11-15 | 2006-05-18 | Perozo Angel G | Method and system for processing frames in storage controllers |
US8370541B2 (en) | 2004-11-15 | 2013-02-05 | Marvell International Ltd. | Method and system for processing frames in storage controllers |
US7802026B2 (en) | 2004-11-15 | 2010-09-21 | Marvell International Ltd. | Method and system for processing frames in storage controllers |
US20060227447A1 (en) * | 2005-04-06 | 2006-10-12 | Pinvidic Daniel R | Method and system for read gate timing control for storage controllers |
US8023217B1 (en) | 2005-04-06 | 2011-09-20 | Marvell International Ltd. | Method and system for read gate timing control for storage controllers |
US20060288184A1 (en) * | 2005-06-17 | 2006-12-21 | Seagate Technology Llc | Admission control in data storage devices |
US20080005458A1 (en) * | 2006-06-29 | 2008-01-03 | Seagate Technology Llc | Command queue ordering with directional and floating write bands |
US7890696B2 (en) | 2006-06-29 | 2011-02-15 | Seagate Technology Llc | Command queue ordering with directional and floating write bands |
US8244975B2 (en) | 2006-06-30 | 2012-08-14 | Seagate Technology Llc | Command queue ordering by flipping active write zones |
US7644206B2 (en) | 2006-06-30 | 2010-01-05 | Seagate Technology Llc | Command queue ordering by positionally pushing access commands |
US20080005463A1 (en) * | 2006-06-30 | 2008-01-03 | Seagate Technology Llc | Command queue ordering by flipping active write zones |
US20080059708A1 (en) * | 2006-06-30 | 2008-03-06 | Seagate Technology Llc | Command queue ordering by positionally pushing access commands |
US20090187705A1 (en) * | 2008-01-18 | 2009-07-23 | Microsoft Corporation | Fair and dynamic disk input/output bandwidth distribution |
US8090903B2 (en) | 2008-01-18 | 2012-01-03 | Microsoft Corporation | Fair and dynamic disk input/output bandwidth distribution |
US8332608B2 (en) * | 2008-09-19 | 2012-12-11 | Mediatek Inc. | Method of enhancing command executing performance of disc drive |
US20100077175A1 (en) * | 2008-09-19 | 2010-03-25 | Ching-Yi Wu | Method of Enhancing Command Executing Performance of Disc Drive |
US20100146205A1 (en) * | 2008-12-08 | 2010-06-10 | Seagate Technology Llc | Storage device and method of writing data |
US10310873B1 (en) | 2014-08-28 | 2019-06-04 | Seagate Technology Llc | Probabilistic aging command sorting |
US10310923B1 (en) * | 2014-08-28 | 2019-06-04 | Seagate Technology Llc | Probabilistic aging command sorting |
US10747446B2 (en) * | 2016-11-25 | 2020-08-18 | Hitachi, Ltd. | Computer system and storage device activation control method |
US10175893B2 (en) | 2016-12-19 | 2019-01-08 | International Business Machines Corporation | Predictive scheduler for memory rank switching |
US10379748B2 (en) | 2016-12-19 | 2019-08-13 | International Business Machines Corporation | Predictive scheduler for memory rank switching |
US10831403B2 (en) | 2017-05-19 | 2020-11-10 | Seagate Technology Llc | Probabalistic command aging and selection |
US10303373B2 (en) * | 2017-06-12 | 2019-05-28 | Seagate Technology Llc | Prioritizing commands in a data storage device |
US10817217B2 (en) | 2018-06-28 | 2020-10-27 | Seagate Technology Llc | Data storage system with improved time-to-ready |
US11256423B2 (en) | 2019-10-14 | 2022-02-22 | Western Digital Technologies, Inc. | Efficiently identifying command readiness based on system state and data spread in multi queue depth environment |
US11966584B2 (en) * | 2021-03-05 | 2024-04-23 | EMC IP Holding Company LLC | Method, device, and computer program product for managing storage device |
Similar Documents
Publication | Publication Date | Title |
---|---|---|
US6574676B1 (en) | System and method for scheduling disk drive commands by expected total access time | |
US6571298B1 (en) | System and method for grouping disk access commands in a queue according to proximate disk positions | |
US5570332A (en) | Method for reducing rotational latency in a disc drive | |
US6272565B1 (en) | Method, system, and program for reordering a queue of input/output (I/O) commands into buckets defining ranges of consecutive sector numbers in a storage medium and performing iterations of a selection routine to select and I/O command to execute | |
US5991825A (en) | System for handling missed revolution in a disk drive by aborting the execution of primary command and executing secondary command if a missed revolution occurs | |
US5729718A (en) | System for determining lead time latency as function of head switch, seek, and rotational latencies and utilizing embedded disk drive controller for command queue reordering | |
US6845405B1 (en) | Disk drive executing part of a linked disk command | |
US6499083B1 (en) | Disk-based storage system responsive to a direction-selection signal for autonomously controlling seeks in a sequence determined by the direction-selection signal and a locally-stored doubly linked list | |
US6339811B1 (en) | Rotationally optimized seek initiation | |
US6493176B1 (en) | Disk drive with variable TPI servo tracks | |
US5140683A (en) | Method for dispatching work requests in a data storage hierarchy | |
US7783828B1 (en) | File system write to storage without specifying location reference | |
KR20080056082A (en) | Hard disk drive and command execution method | |
US20030056060A1 (en) | Adaptive bi-directional write skip masks in a data storage device | |
US6490651B1 (en) | Host-based virtual disk drive for improving the performance of a hard disk drive's input/output | |
US6848019B1 (en) | Performance in a data storage device using head-to-head offsets in access command scheduling | |
US6957311B2 (en) | Data storage apparatus, computer apparatus, data processing apparatus, and data processing method | |
US20060047897A1 (en) | Method for improving data throughput for a data storage device | |
US20010032292A1 (en) | Implementation of skip mask hardware in a disc drive | |
US6898665B1 (en) | System and method for profiling access to disk drive commands based on a dual servo mode model | |
US6654852B2 (en) | Method and system of reading and writing data by a disk drive apparatus | |
US6578107B1 (en) | Method and system for prefetching data where commands are reordered for execution | |
US20060129716A1 (en) | Data storage device and buffer control method thereof | |
US6788489B1 (en) | Employing off-track capability in data access operations in a direct access storage device | |
US6697913B1 (en) | Seek queue for improved disk drive performance |
Legal Events
Date | Code | Title | Description |
---|---|---|---|
AS | Assignment |
Owner name: INTERNATIONAL BUSINESS MACHINES CORPORATION, NEW YFree format text: ASSIGNMENT OF ASSIGNORS INTEREST;ASSIGNOR:MEGIDDO, NIMROD;REEL/FRAME:010491/0862Effective date: 20000110 |
|
STCF | Information on status: patent grant |
Free format text: PATENTED CASE |
|
FPAY | Fee payment |
Year of fee payment: 4 |
|
REMI | Maintenance fee reminder mailed | ||
FPAY | Fee payment |
Year of fee payment: 8 |
|
SULP | Surcharge for late payment |
Year of fee payment: 7 |
|
AS | Assignment |
Owner name: GOOGLE INC., CALIFORNIAFree format text: ASSIGNMENT OF ASSIGNORS INTEREST;ASSIGNOR:INTERNATIONAL BUSINESS MACHINES CORPORATION;REEL/FRAME:026664/0866Effective date: 20110503 |
|
FPAY | Fee payment |
Year of fee payment: 12 |
|
AS | Assignment |
Owner name: GOOGLE LLC, CALIFORNIAFree format text: CHANGE OF NAME;ASSIGNOR:GOOGLE INC.;REEL/FRAME:044127/0735Effective date: 20170929 |