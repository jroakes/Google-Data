US20230106266A1 - Indexing Access Limited Native Applications - Google Patents
Indexing Access Limited Native Applications Download PDFInfo
- Publication number
- US20230106266A1 US20230106266A1 US17/966,356 US202217966356A US2023106266A1 US 20230106266 A1 US20230106266 A1 US 20230106266A1 US 202217966356 A US202217966356 A US 202217966356A US 2023106266 A1 US2023106266 A1 US 2023106266A1
- Authority
- US
- United States
- Prior art keywords
- native application
- account
- environment
- account credentials
- indexing
- Prior art date
- Legal status (The legal status is an assumption and is not a legal conclusion. Google has not performed a legal analysis and makes no representation as to the accuracy of the status listed.)
- Pending
Links
- 238000000034 method Methods 0.000 claims abstract description 35
- 230000004044 response Effects 0.000 claims description 11
- 238000004891 communication Methods 0.000 claims description 7
- 230000005055 memory storage Effects 0.000 claims 1
- 230000008569 process Effects 0.000 description 22
- 230000009471 action Effects 0.000 description 13
- 238000004590 computer program Methods 0.000 description 12
- 238000009877 rendering Methods 0.000 description 6
- 101150053844 APP1 gene Proteins 0.000 description 5
- 101100189105 Homo sapiens PABPC4 gene Proteins 0.000 description 5
- 102100039424 Polyadenylate-binding protein 4 Human genes 0.000 description 5
- 238000010586 diagram Methods 0.000 description 5
- 239000000284 extract Substances 0.000 description 4
- 238000013515 script Methods 0.000 description 4
- 230000006870 function Effects 0.000 description 3
- 230000003993 interaction Effects 0.000 description 3
- 230000000644 propagated effect Effects 0.000 description 3
- 230000002730 additional effect Effects 0.000 description 2
- 230000003287 optical effect Effects 0.000 description 2
- 238000000926 separation method Methods 0.000 description 2
- 241000282412 Homo Species 0.000 description 1
- 238000013473 artificial intelligence Methods 0.000 description 1
- 230000005540 biological transmission Effects 0.000 description 1
- 238000004422 calculation algorithm Methods 0.000 description 1
- 230000008859 change Effects 0.000 description 1
- 230000009193 crawling Effects 0.000 description 1
- 238000005516 engineering process Methods 0.000 description 1
- 239000004973 liquid crystal related substance Substances 0.000 description 1
- 238000010295 mobile communication Methods 0.000 description 1
- 239000004065 semiconductor Substances 0.000 description 1
- 230000001953 sensory effect Effects 0.000 description 1
- 238000004088 simulation Methods 0.000 description 1
- 239000000758 substrate Substances 0.000 description 1
- 230000000007 visual effect Effects 0.000 description 1
Images
Classifications
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F16/00—Information retrieval; Database structures therefor; File system structures therefor
- G06F16/90—Details of database functions independent of the retrieved data types
- G06F16/95—Retrieval from the web
- G06F16/953—Querying, e.g. by the use of web search engines
- G06F16/9537—Spatial or temporal dependent retrieval, e.g. spatiotemporal queries
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F16/00—Information retrieval; Database structures therefor; File system structures therefor
- G06F16/30—Information retrieval; Database structures therefor; File system structures therefor of unstructured textual data
- G06F16/31—Indexing; Data structures therefor; Storage structures
- G06F16/316—Indexing structures
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F16/00—Information retrieval; Database structures therefor; File system structures therefor
- G06F16/90—Details of database functions independent of the retrieved data types
- G06F16/95—Retrieval from the web
- G06F16/951—Indexing; Web crawling techniques
Definitions
- the Internet provides access to a wide variety of information. For example, digital image files, video and/or audio files, as well as web page resources for particular subjects or particular news articles, are accessible over the Internet.
- a variety of search engines are available for identifying particular resources accessible over the Internet. These search engines crawl and index the various web page resources. The search engine then uses the index to determine which resources are most responsive to a search query and provides search results that link to the resources in response to the query.
- This specification describes technologies relating to indexing environment instances of native applications.
- one innovative aspect of the subject matter described in this specification can be embodied in methods that include the actions of determining that a native application limits access to the native application using account credential requirements, the native application generating an application environment for display on a user device within the native application and operating independent of a browser application that can operate on the user device. Additional actions include in response to determining that the native application limits access to the native application using account credential requirements, obtaining a set of account credentials for indexing environment instances of the native application. Further actions include instantiating the native application with the set of account credentials and accessing environment instances of the native application.
- Additional actions include, for each of the environment instances, generating environment instance data describing content of the environment instance, the content described by the environment instance data including text that a user device displays on the environment instance when the user device displays the environment instance, and indexing the environment instance data for the native application in an index that is searchable by a search engine.
- determining that a native application limits access to the native application using account credential requirements includes determining that the native application uses an account authentication service that uses the account credential requirements.
- obtaining a set of account credentials for indexing environment instances generated by the native application includes obtaining a name and a password of an account for indexing environment instances generated by the native application.
- the account is specific to an environment instance indexing process for indexing the environment instances generated by the native application and is not specific to one or more particular human users.
- obtaining a set of account credentials for indexing environment instances generated by the native application includes determining that an account for indexing environment instances generated by the native application does not exist and generating the account for indexing environment instances generated by the native application, the account including the set of credentials.
- generating the account for indexing environment instances generated by the native application includes generating (i) a name, (ii) a password, and (iii) other account information corresponding with account information expected for particular users providing search queries.
- obtaining a set of account credentials for indexing environment instances generated by the native application includes determining that an account for indexing environment instances generated by the native application does exist and identifying the set of account credentials for the account.
- instantiating the native application with the set of account credentials includes instantiating a virtual machine emulating an operating system of the user device with the set of account credentials and instantiating the native application within the virtual machine.
- instantiating a virtual machine emulating an operating system of a user device with the set of account credentials includes instantiating the virtual machine emulating the operating system of the user device where the operating system indicates that the account is signed in using the set of account credentials.
- accessing environment instances of the native application includes determining that the native application limits access to the native application using account credential requirements, in response to determining that the native application limits access to the native application using account credential requirements, identifying the set of account credentials that the native application is instantiated with, and accessing the environment instances of the native application using the set of account credentials.
- Enabling an application indexer to access generic content in environment instances of native applications for which access is limited using account credential requirements allows for these environment instances to be indexed.
- This may provide a search engine with the ability to provide search results that include the environment instances with generic content for which access is limited using account credential requirements. This may enable the search engine to provide more relevant search results in cases that the environment instances with generic content for which access is limited using account credential requirements are relevant to a search query.
- FIG. 1 A is a block diagram of an example environment in which environment instances for native applications are indexed and searched.
- FIG. 1 B is a block diagram of an example implementation of a native application indexer.
- FIG. 2 is a flow diagram of an example process for indexing environment instances of native applications.
- a system indexes environment instances of native applications.
- a native application generates environment instances for display on a user device within an environment of the native application, and operates independent of a browser application on the user device.
- a native application is an application specifically designed to run on a particular user device operating system and machine firmware and not within a browser. Native applications thus differ from browser and browser-based applications and browser-rendered resources. The latter require all, or at least some, elements or instructions downloaded from a web server each time they are instantiated or rendered. Furthermore, browser-based applications and browser-rendered resources can be processed by all web-capable mobile devices within the browser and thus are not operating system specific as are native applications.
- An environment instance of a native application is an instance of particular user experience environment within a native application, and the environment instances are each characterized by unique set of user interface features distinguishable from each other in the native application.
- environment instances can be particular modes in an application, such as options screens, or three-dimensional sequences, such as a “tour” of a three dimensional space or an action sequence, such as a downhill skiing event, and the like.
- the user experience may be time based and require multiple frames, such as a three-dimensional experience in a game during which a user attempts to complete a task.
- the system determines a set of environment instances of the native application. For example, the system may access environment instances that are specified by a publisher of the native application or automatically explore, e.g., crawl, various menus and selection options available in environment instances generated by the native application. For each of these environment instances, the system may generate environment instance data that describes features of the environment instance. For example, the system may extract visibly or non-visibly displayed text of an environment instance and generate environment instance data representing the extracted text. The system then indexes the native application environment instance data for the native application in an index that is searchable by a search engine. The search engine, in turn, can access the indexed data to determine environment instances of native applications that may be responsive to queries.
- some native applications may limit access to the native applications using account credential requirements which may limit access by the system to the environment instances of the native application. For example, a native application may require that an account be logged in before environment instances beyond that of an initial log-in screen may be accessed. In another example, a native application may provide access to a subset of environment instances when account credentials are not provided but may limit access to a non-overlapping subset of environment instances until account credentials are provided. Accordingly, in the case where a native application limits access to generic content in the native application using account credential requirements, the system may obtain a set of robot account credentials for an account to index environment instances of the particular native application, e.g., from an account database 122 , and then access the particular native application using the set of account credentials.
- Robot account credentials may be account credentials that are for an automated crawler and not a human.
- FIG. 1 A is a block diagram of an example environment 100 in which environment instances for native applications are indexed and searched.
- a computer network 102 such as the Internet, connects resource publisher websites 104 , application publishers 106 , user devices 108 and a search engine 110 .
- a resource publisher website 104 includes one or more web resources 105 associated with a domain and hosted by one or more servers in one or more locations.
- a resource publisher website is a collection of web pages formatted in hypertext markup language (HTML) that can contain text, images, multimedia content, and programming elements.
- HTML hypertext markup language
- Each resource publisher website 104 is maintained by a content publisher, which is an entity that controls, manages and/or owns the website 104 .
- a web page resource is any data that can be provided by a publisher website 104 over the network 102 and that has a resource address, e.g., a uniform resource locator (URL).
- Web resources may be HTML pages, images files, video files, audio files, and feed sources, to name just a few.
- the resources may include embedded information, e.g., meta information and hyperlinks, and/or embedded instructions, e.g., client-side scripts.
- An application publisher website 106 may also include one or more web resources 105 , and also provides native applications 107 .
- a native application 107 is an application specifically designed to run on a particular user device operating system and machine firmware.
- a native application may have multiple environment instances, each specific to the particular native application.
- An environment instance differs from a rendered web resource in that the environment instance occurs within and is specific to the native application, while a web resource may be rendered in any browser for which the web page resource is compatible, and is independent of the operating system of the user device.
- a user device 108 is an electronic device, and is capable of requesting and receiving web page resources 104 and native applications 107 over the network 102 .
- Example user devices 108 include personal computers, mobile communication devices, and tablet computers.
- the search engine 110 accesses a web index 112 and an application index 114 .
- the web index 112 is an index of web resources 105 that has, for example, been built from crawling the publisher websites 104 .
- the application index 114 is an index of environment instances for native applications 107 , and is constructed using an application indexer 120 that implements an indexing process that is described in more detail below. Although shown as separate indexes, the web index 112 and the application index 114 can be combined in a single index.
- the user devices 108 submit search queries to the search engine 110 .
- the search engine 110 accesses the web index 112 and the application index 114 to identify resources and applications, respectively, that are relevant to the query.
- the search engine 110 may, for example, identify the resources and applications in the form of web resource search results and native application search results, respectively. Once generated, the search results are provided to the user device 108 from which the query was received.
- a web resource search result is data generated by the search engine 110 that identifies a web resource and provides information that satisfies a particular search query.
- a web resource search result for a resource can include a web page title, a snippet of text extracted from the resource, and a resource locator for the resource, e.g., the URL of a web page.
- a native application search result specifies a native application and is generated in response to a search of the application index 114 of environment instances.
- a variety of functions can be invoked by the selection of an application search result. For example, selection of a native application search result may cause the native application to launch (if installed on the user device 108 ) and generate the environment instance of the native application referenced in the native application search result.
- FIG. 2 illustrates a flow diagram of an example process 200 for indexing environment instances of native applications.
- the process 200 can be implemented in a data processing apparatus of one or more computers in data communication with each other.
- the process 200 determines that a native application 107 limits access to generic content in the native application 107 using account credential requirements ( 202 ).
- the process 200 may determine that a native application 107 limits access to generic content in the native application 107 in a variety of ways.
- the application indexer 120 may determine that a particular native application 107 limits access using account credential requirements based on identifying the particular native application 107 as a native application that has used an account authentication service. For example, the application indexer 120 may determine that a particular native application 107 has used an account authentication service by analyzing account authentication service usage logs.
- the application indexer 120 may determine that access to a native application is limited and then determine that the content for which access is limited is generic content.
- the application indexer 120 may determine that a particular native application 107 limits access using account credential requirements based on identifying the particular native application 107 as a native application that has been indicated by an application publisher 106 as using the account authentication service. For example, the application indexer 120 may query a database that indicates native applications for which the application publisher 106 has indicated the native application 107 as using the account authentication service.
- the application indexer 120 may analyze an environment instance generated by a particular native application 107 to determine if the particular native application 107 limits access to the native application 107 . For example, the application indexer 120 may determine that an environment instance generated by a particular native application 107 when account credentials are not provided for particular native application 107 includes one or more input elements, e.g., a textbox for receiving a user name and a textbox for receiving a password, for account credentials.
- a textbox for receiving a user name
- a textbox for receiving a password
- the process 200 obtains a set of robot account credentials for indexing environment instances of the native application 107 ( 204 ).
- the set of robot account credentials may include a user name and a password of an account for indexing environment instances generated by a native application.
- the set of account credentials for indexing native application “APP1” may include a user name “indexer_APP1_user” and a password “indexer_APP1_pass” of an account.
- the account for indexing environment instances generated by a particular native application may be specific to that particular native application.
- the application indexer 120 may use a first account when accessing a first native application and use a different, second account when accessing a second native application.
- any account for indexing the environment instances generated by a native application may not be specific to one or more particular human users.
- every account used by the application indexer 120 for indexing environment instances may be generated specifically for use by the application indexer 120 and not by humans.
- the application indexer 120 may obtain the set of robot account credentials by determining whether an account for indexing environment instances generated by the native application exists. For example, the application indexer 120 may access an account database 122 that stores data indicating both account credentials for indexing environment instances and native applications that correspond to the account credentials and determine whether account credentials for a particular native application are stored in the account database 122 .
- the application indexer 120 may determine that a robot account for indexing environment instances generated by the native application 107 does not exist. In response to this determination, the application indexer 120 may trigger generating of an account for indexing environment instances generated by the native application 107 .
- the application indexer 120 may generate a name and a password for an account for indexing environment instances generated by the native application 107 . For example, the application indexer 120 may generate an account for indexing native application “APP1” with the set of account credentials of a user name “indexer_APP1_user” and a password “indexer_APP1_pass.”
- the application indexer 120 may determine that a robot account for indexing environment instances generated by the native application 107 does exist. In response to this determination, the application indexer 120 may obtain from the account database 122 the set of account credentials that corresponds to the native application 107 . For example, the application indexer 120 may obtain from the account database 122 the set of account credentials of a user name “indexer_APP1_user” and a password “indexer_APP1_pass” for an account for indexing native application “APP1.”
- the process 200 instantiates the native application 107 with the set of robot account credentials ( 206 ).
- the application indexer 120 may instantiate the native application 107 with the set of robot account credentials by instantiating a virtual machine emulating an operating system of the user device with the set of account credentials and then instantiating the native application 107 within the virtual machine.
- the virtual machine 130 may, in some implementations, be a modified version of the operating system and includes extractors that extract data from environment instances as described in more detail below.
- the virtual machine 130 may, for each application in a set of native applications 107 to be processed, indicate that the operating system is signed in with an account 138 for indexing the native application 107 and launch an instance of the native application 107 .
- the application indexer 120 may instantiate the native application 107 with the set of robot account credentials by instantiating a virtual machine emulating an operating system of the user device with the set of account credentials already running the native application 107 . In other implementations, the application indexer 120 may instantiate the native application 107 with the set of robot account credentials without instantiating a virtual machine emulating an operating system of the user device.
- the application indexer 120 may instantiate a virtual machine emulating an operating system of a user device with the set of robot account credentials by having the operating system indicate that the account corresponding to the set of account credentials is signed in using the account credentials. For example, to index environment instances of native application “APP1,” the application indexer 120 may instantiate an operating system of the user device where the operating system indicates that an account is signed in on the user device using the user name “index_APP1_user” and the password “index_APP1_pass,” and then launch an instance of native application “APP1.” In another example, the application indexer 120 may utilize a virtual machine emulating an operating system of a user device that has been instantiated with a set of credentials for indexing a particular native application and change the set of credentials to another set of credentials for indexing another native application.
- the native application 107 may determine that the emulated operating system indicates that an account is already signed in. For example, once the native application 107 is launched, the native application 107 may determine that an account is signed in on the user device using the user name “index_APP1_user” and the password “index_APP1_pass.” The native application 107 may then verify that the set of account credentials are valid. For example, the native application 107 may utilize an account authentication service to determine whether the user name “index_APP1_user” and the password “index_APP1_pass” correspond to a valid account. If the native application 107 verifies that the set of account credentials are valid, the native application 107 may then enable the application indexer 120 to access environment instances of the native application 107 to which access is limited using account credentials.
- the process 200 accesses environment instances of the native application 107 ( 208 ).
- the application indexer 120 instantiates the environment instances by an automated process that explores various menus and selection options available in each environment instance, and each subsequent environment instance. Such an automated process can be accomplished by sequentially selecting menu options and links according to a deterministic routine that results in the selection of each environment instance provided by the native application 107 .
- the virtual machine 130 can access the environment instances that are specified by a publisher of the native application.
- the application publisher may provide a list of uniform resource identifiers 109 that the publisher desires to be crawled and indexed in the application index 114 , and only those environment instances referenced by the URIs for the particular native application 107 are accessed and indexed.
- the application indexer 120 may then generate environment instance data describing content of the environment instance ( 210 ).
- the virtual machine 130 includes extractors that extract textual data for indexing.
- the extracted textual data is, for example, data that has been embedded by the publisher for particular environment instances and is provided to a rendering process of the native application.
- the rendering process renders content based on the data for display on a user device.
- Use of extractors allows for more accurate identification of the textual data of an application instance, or alternative can be used to verify textual data that is provided separately with the uniform resource identifiers.
- the text extractor 132 extracts text data provided to a rendering process of the native application.
- the text data specifies the text that is to be rendered in the environment instance in invisible form.
- the video extractor 134 provides image data of an image or video (e.g., from a three dimensional experience) that is to be rendered in the environment of the native application 107 .
- Other data can also be extracted, such as environment link data describing links within the environment instance that link to another environment instance in the application; web page link data describing links within the environment that link to a web resource referenced by a uniform resource locator and that, when selected, instantiate a browser application that renders the resource in a browser environment separate from the native application; etc.
- the virtual machine 130 can perform either a set of predefined actions or, alternatively, perform actions according to a predefined set of commands.
- the virtual machine 130 may be programmed to perform certain actions such as inputting directional navigations, such as left, right, up and down; actuating direction navigation inputs, such as rotate left and rotate right, etc.
- the virtual machine 130 may perform actions stored in the index data 111 , such as actions specified by a publisher.
- the actions may be specified in the form of a script, which causes a sequence of time-based inputs to be received by the program so as to generate a natural “tour” of a multi-dimensional environment; or, in the case of applications that implement artificial intelligence (e.g., “Bots”), a “bot mode” can be initiated and a video of the multi-dimensional environment as seen from the point of view of the bot can be recorded. Other appropriate ways of gathering video data to be recorded can also be used.
- the extractors 132 and 134 can be implemented using appropriate data handlers for a particular operating system.
- the extractors 132 and 134 may be implemented using TextView objects and ImageView objects.
- the environment instance that corresponds to the uniform resource identifier (URI) is generated using a first OpenGL surface view of the environment instance.
- the textual data that is associated with the environment instance is provided to a rendering process of the native application in the form of a text view object and is overlaid on the OpenGL surface view. Because the text is designated as being invisible, the user does not see the text.
- the text data is also extracted from the text view object.
- the virtual machine 130 processes the objects to extract the corresponding data, e.g., by including instructions that cause the virtual machine to store for indexing the corresponding data that is provided for rendering.
- the process 200 indexes the application environment instance data for the native application in an index that is searchable by a search engine ( 212 ).
- the data are indexed such that the search engine 110 may evaluate the relevance of environment instances to search queries.
- the application indexer 120 may generate the application index 114 by indexing the application environment instance data.
- an indexer 160 indexes, for each URI and native application 107 identifier, the native application environment instance data describing the content for the environment instance. Additional information, such as images, screenshot and even short videos of the native application environment instance can also be generated and indexed as well. These additional data are used in generating native application search results
- the indexed data are stored in the application index 114 .
- a variety of appropriate indexing processes can be used to index the data.
- the application index 114 can include, for each native application 107 and URI pair, a row of data describing the environment instance data.
- the particular database and indexing scheme used may, for example, depend on the search engine algorithms utilized within the search engine.
- a particular application instance may have different URIs that correspond to different content.
- an automobile simulation application may have a first portion of a URI that is the same for an environment instances in which automobiles are rendered, and a second portion of the URI, such as a query parameter, that includes a name-value pair for a specific automobile to be rendered.
- each specific instance of a unique URI constitutes an entry in the application index 114 .
- Some native applications may request data and/or instructions from a source that is external to the virtual machine 130 .
- sources are web servers, feed sources, updated images for rendering, etc.
- the requested data and/or instructions may also be indexed in the application index 114 .
- the virtual machine 130 may include a receiving cache 142 that stores data and instructions that are requested by the native application 107 .
- the virtual machine 130 is configured to intercept the received data and store a copy of the data in the receiving cache 142 for indexing.
- the search engine 110 can access the application index 114 to identify native applications that may be responsive to a query.
- the applications may be identified by native application search results.
- the process 200 may enable the application indexer 120 to index native applications that limit access using account credential requirements without requiring that the native applications be specifically modified to enable the application indexer 120 to index the native applications. For example, once the application indexer 120 instantiates a virtual machine using the set of account credentials and launches the native application 107 , the native application 107 may perform its usual function of determining if the operating system indicates that an account that may be used to access the native application 107 is signed in.
- the native application 107 may generate generic content for environment instances based on information of an account used to access the native application 107 . For example, if account information indicates an account is for a user in England, the native application 107 may generate environment instances with generic content targeted for users in England. Similarly, if account information indicates an account is for a user in Spain, the native application 107 may generate environment instances with generic content targeted for users in Spain.
- the application indexer 120 may obtain a set of robot account credentials for an account that includes information corresponding with information expected for the particular users providing search queries. For example, when the application indexer 120 is generating environment instance data for responding to search queries from users in England, the application indexer 120 may obtain a set of robot account credentials for an account that includes information indicating that the account is for a robot user configured to provide results for England. In another example, when the application indexer 120 is generating environment instance data for responding to search queries from users in Spain, the application indexer 120 may obtain a set of robot account credentials for an account that includes information indicating that the account is for a robot user configured to provide results for Spain.
- the application indexer 120 may then generate the environment instance data using the different robot accounts and index the environment instance data based on the account information. For example, the application indexer 120 may index that a set of environment instance data corresponds to users in England and another set of environment instance data corresponds to users in Spain.
- the search engine 110 may consider information regarding the user, e.g., account information for the user or location of the user device 108 , and bias towards providing results from sets of environment instance data that were indexed by the application indexer 120 when accessing a native application with an account with information that corresponds to the user providing the search query.
- the system 100 may define a taxonomy of types of users that may provide search queries, and in response to receiving a search query from a particular user, the search engine 110 may classify the particular user according to the taxonomy and weight search results towards results that correspond to environment instance data that was indexed by the application indexer 120 with an account with information that matches the user type classified for the particular user providing the search query.
- the search engine 110 may weight search results for a user in the United States towards results that correspond with environment instance data that was indexed by the application indexer 120 when accessing native applications using robot accounts with information configured to provide results to user types for the United States and weight search results for a user in England towards results that correspond with environment instance data that was indexed by the application indexer 120 when accessing native applications using robot accounts with information configured to provide results to user types for England.
- Embodiments of the subject matter and the operations described in this specification can be implemented in digital electronic circuitry, or in computer software, firmware, or hardware, including the structures disclosed in this specification and their structural equivalents, or in combinations of one or more of them.
- Embodiments of the subject matter described in this specification can be implemented as one or more computer programs, i.e., one or more modules of computer program instructions, encoded on computer storage medium for execution by, or to control the operation of, data processing apparatus.
- the program instructions can be encoded on an artificially-generated propagated signal, e.g., a machine-generated electrical, optical, or electromagnetic signal, that is generated to encode information for transmission to suitable receiver apparatus for execution by a data processing apparatus.
- a computer storage medium can be, or be included in, a computer-readable storage device, a computer-readable storage substrate, a random or serial access memory array or device, or a combination of one or more of them.
- a computer storage medium is not a propagated signal, a computer storage medium can be a source or destination of computer program instructions encoded in an artificially-generated propagated signal.
- the environment computer storage medium can also be, or be included in, one or more separate physical components or media (e.g., multiple CDs, disks, or other storage devices).
- the operations described in this specification can be implemented as operations performed by a data processing apparatus on data stored on one or more computer-readable storage devices or received from other sources.
- data processing apparatus encompasses all kinds of apparatus, devices, and machines for processing data, including by way of example a programmable processor, a computer, a system on a chip, or multiple ones, or combinations, of the foregoing.
- the apparatus can also include, in addition to hardware, code that creates an execution environment for the computer program in question, e.g., code that constitutes processor firmware, a protocol stack, a database management system, an operating system, a cross-platform runtime environment, a virtual machine, or a combination of one or more of them.
- the apparatus and execution environment can realize various different computing model infrastructures, such as web services, distributed computing and grid computing infrastructures.
- a computer program (also known as a program, software, software application, script, or code) can be written in any form of programming language, including compiled or interpreted languages, declarative or procedural languages, and it can be deployed in any form, including as a stand-alone program or as a module, component, subroutine, object, or other unit suitable for use in a computing environment.
- a computer program may, but need not, correspond to a file in a file system.
- a program can be stored in a portion of a file that holds other programs or data (e.g., one or more scripts stored in a markup language document), in a single file dedicated to the program in question, or in multiple coordinated files (e.g., files that store one or more modules, sub-programs, or portions of code).
- a computer program can be deployed to be executed on one computer or on multiple computers that are located at one site or distributed across multiple sites and interconnected by a communication network.
- processors suitable for the execution of a computer program include, by way of example, both general and special purpose microprocessors, and any one or more processors of any kind of digital computer.
- a processor will receive instructions and data from a read-only memory or a random access memory or both.
- the essential elements of a computer are a processor for performing actions in accordance with instructions and one or more memory devices for storing instructions and data.
- a computer will also include, or be operatively coupled to receive data from or transfer data to, or both, one or more mass storage devices for storing data, e.g., magnetic, magneto-optical disks, or optical disks.
- mass storage devices for storing data
- a computer need not have such devices.
- a computer can be embedded in another device, e.g., a mobile telephone, a personal digital assistant (PDA), a mobile audio or video player, a game console, a Global Positioning System (GPS) receiver, or a portable storage device (e.g., a universal serial bus (USB) flash drive), to name just a few.
- PDA personal digital assistant
- GPS Global Positioning System
- USB universal serial bus
- Devices suitable for storing computer program instructions and data include all forms of non-volatile memory, media and memory devices, including by way of example semiconductor memory devices, e.g., EPROM, EEPROM, and flash memory devices; magnetic disks, e.g., internal hard disks or removable disks; magneto-optical disks; and CD-ROM and DVD-ROM disks.
- semiconductor memory devices e.g., EPROM, EEPROM, and flash memory devices
- magnetic disks e.g., internal hard disks or removable disks
- magneto-optical disks e.g., CD-ROM and DVD-ROM disks.
- the processor and the memory can be supplemented by, or incorporated in, special purpose logic circuitry.
- a computer having a display device, e.g., a CRT (cathode ray tube) or LCD (liquid crystal display) monitor, for displaying information to the user and a keyboard and a pointing device, e.g., a mouse or a trackball, by which the user can provide input to the computer.
- a display device e.g., a CRT (cathode ray tube) or LCD (liquid crystal display) monitor
- keyboard and a pointing device e.g., a mouse or a trackball
- Other kinds of devices can be used to provide for interaction with a user as well; for example, feedback provided to the user can be any form of sensory feedback, e.g., visual feedback, auditory feedback, or tactile feedback; and input from the user can be received in any form, including acoustic, speech, or tactile input.
- a computer can interact with a user by sending documents to and receiving documents from a device that is used by the user; for example, by sending web pages to a
- Embodiments of the subject matter described in this specification can be implemented in a computing system that includes a back-end component, e.g., as a data server, or that includes a middleware component, e.g., an application server, or that includes a front-end component, e.g., a user computer having a graphical user interface or a Web browser through which a user can interact with an implementation of the subject matter described in this specification, or any combination of one or more such back-end, middleware, or front-end components.
- the components of the system can be interconnected by any form or medium of digital data communication, e.g., a communication network.
- Examples of communication networks include a local area network (“LAN”) and a wide area network (“WAN”), an inter-network (e.g., the Internet), and peer-to-peer networks (e.g., ad hoc peer-to-peer networks).
- LAN local area network
- WAN wide area network
- inter-network e.g., the Internet
- peer-to-peer networks e.g., ad hoc peer-to-peer networks.
- the computing system can include users and servers.
- a user and server are generally remote from each other and typically interact through a communication network. The relationship of user and server arises by virtue of computer programs running on the respective computers and having a user-server relationship to each other.
- a server transmits data (e.g., an HTML page) to a user device (e.g., for purposes of displaying data to and receiving user input from a user interacting with the user device).
- Data generated at the user device e.g., a result of the user interaction
Abstract
Description
- This application is a continuation application of, and claims priority to, U.S. Pat. Application No. 14/602,440, titled “INDEXING ACCESS LIMITED NATIVE APPLICATIONS,” filed on Jan. 22, 2015. The disclosure of the foregoing application is incorporated herein by reference in its entirety for all purposes.
- The Internet provides access to a wide variety of information. For example, digital image files, video and/or audio files, as well as web page resources for particular subjects or particular news articles, are accessible over the Internet. A variety of search engines are available for identifying particular resources accessible over the Internet. These search engines crawl and index the various web page resources. The search engine then uses the index to determine which resources are most responsive to a search query and provides search results that link to the resources in response to the query.
- With the advent of tablet computers and smart phones, native applications that facilitate the performance of the same functions facilitated by the use of web page resources are now being provided in large numbers. Some of these native applications limit access to generic content in the native application until account credentials are provided to the native applications. Generic content may be content that is not specific to particular users.
- This specification describes technologies relating to indexing environment instances of native applications.
- In general, one innovative aspect of the subject matter described in this specification can be embodied in methods that include the actions of determining that a native application limits access to the native application using account credential requirements, the native application generating an application environment for display on a user device within the native application and operating independent of a browser application that can operate on the user device. Additional actions include in response to determining that the native application limits access to the native application using account credential requirements, obtaining a set of account credentials for indexing environment instances of the native application. Further actions include instantiating the native application with the set of account credentials and accessing environment instances of the native application. Additional actions include, for each of the environment instances, generating environment instance data describing content of the environment instance, the content described by the environment instance data including text that a user device displays on the environment instance when the user device displays the environment instance, and indexing the environment instance data for the native application in an index that is searchable by a search engine.
- Other embodiments of this aspect include corresponding systems, apparatus, and computer programs, configured to perform the actions of the methods, encoded on computer storage devices.
- These and other versions may each optionally include one or more of the following features. For instance, in some implementations determining that a native application limits access to the native application using account credential requirements includes determining that the native application uses an account authentication service that uses the account credential requirements. In certain aspects, obtaining a set of account credentials for indexing environment instances generated by the native application includes obtaining a name and a password of an account for indexing environment instances generated by the native application. In some aspects, the account is specific to an environment instance indexing process for indexing the environment instances generated by the native application and is not specific to one or more particular human users.
- In some implementations, obtaining a set of account credentials for indexing environment instances generated by the native application includes determining that an account for indexing environment instances generated by the native application does not exist and generating the account for indexing environment instances generated by the native application, the account including the set of credentials. In certain aspects, generating the account for indexing environment instances generated by the native application includes generating (i) a name, (ii) a password, and (iii) other account information corresponding with account information expected for particular users providing search queries. In some aspects, obtaining a set of account credentials for indexing environment instances generated by the native application includes determining that an account for indexing environment instances generated by the native application does exist and identifying the set of account credentials for the account.
- In some implementations, instantiating the native application with the set of account credentials includes instantiating a virtual machine emulating an operating system of the user device with the set of account credentials and instantiating the native application within the virtual machine. In certain aspects, instantiating a virtual machine emulating an operating system of a user device with the set of account credentials includes instantiating the virtual machine emulating the operating system of the user device where the operating system indicates that the account is signed in using the set of account credentials. In some aspects, accessing environment instances of the native application includes determining that the native application limits access to the native application using account credential requirements, in response to determining that the native application limits access to the native application using account credential requirements, identifying the set of account credentials that the native application is instantiated with, and accessing the environment instances of the native application using the set of account credentials.
- Particular embodiments of the subject matter described in this specification can be implemented so as to realize one or more of the following advantages. Enabling an application indexer to access generic content in environment instances of native applications for which access is limited using account credential requirements allows for these environment instances to be indexed. This, in turn, may provide a search engine with the ability to provide search results that include the environment instances with generic content for which access is limited using account credential requirements. This may enable the search engine to provide more relevant search results in cases that the environment instances with generic content for which access is limited using account credential requirements are relevant to a search query.
- The details of one or more embodiments of the subject matter described in this specification are set forth in the accompanying drawings and the description below. Other features, aspects, and advantages of the subject matter will become apparent from the description, the drawings, and the claims.
-
FIG. 1A is a block diagram of an example environment in which environment instances for native applications are indexed and searched. -
FIG. 1B is a block diagram of an example implementation of a native application indexer. -
FIG. 2 is a flow diagram of an example process for indexing environment instances of native applications. - Like reference numbers and designations in the various drawings indicate like elements.
- A system indexes environment instances of native applications. As used herein, a native application generates environment instances for display on a user device within an environment of the native application, and operates independent of a browser application on the user device. A native application is an application specifically designed to run on a particular user device operating system and machine firmware and not within a browser. Native applications thus differ from browser and browser-based applications and browser-rendered resources. The latter require all, or at least some, elements or instructions downloaded from a web server each time they are instantiated or rendered. Furthermore, browser-based applications and browser-rendered resources can be processed by all web-capable mobile devices within the browser and thus are not operating system specific as are native applications.
- An environment instance of a native application is an instance of particular user experience environment within a native application, and the environment instances are each characterized by unique set of user interface features distinguishable from each other in the native application. For example, environment instances can be particular modes in an application, such as options screens, or three-dimensional sequences, such as a “tour” of a three dimensional space or an action sequence, such as a downhill skiing event, and the like. In the case of the latter, the user experience may be time based and require multiple frames, such as a three-dimensional experience in a game during which a user attempts to complete a task.
- To index data for a native application, the system determines a set of environment instances of the native application. For example, the system may access environment instances that are specified by a publisher of the native application or automatically explore, e.g., crawl, various menus and selection options available in environment instances generated by the native application. For each of these environment instances, the system may generate environment instance data that describes features of the environment instance. For example, the system may extract visibly or non-visibly displayed text of an environment instance and generate environment instance data representing the extracted text. The system then indexes the native application environment instance data for the native application in an index that is searchable by a search engine. The search engine, in turn, can access the indexed data to determine environment instances of native applications that may be responsive to queries.
- However, some native applications may limit access to the native applications using account credential requirements which may limit access by the system to the environment instances of the native application. For example, a native application may require that an account be logged in before environment instances beyond that of an initial log-in screen may be accessed. In another example, a native application may provide access to a subset of environment instances when account credentials are not provided but may limit access to a non-overlapping subset of environment instances until account credentials are provided. Accordingly, in the case where a native application limits access to generic content in the native application using account credential requirements, the system may obtain a set of robot account credentials for an account to index environment instances of the particular native application, e.g., from an
account database 122, and then access the particular native application using the set of account credentials. Robot account credentials may be account credentials that are for an automated crawler and not a human. - Operation of the system that indexes environment instance data and the processing of search results for environment instances is described in more detail below.
-
FIG. 1A is a block diagram of anexample environment 100 in which environment instances for native applications are indexed and searched. Acomputer network 102, such as the Internet, connectsresource publisher websites 104,application publishers 106,user devices 108 and asearch engine 110. - A
resource publisher website 104 includes one ormore web resources 105 associated with a domain and hosted by one or more servers in one or more locations. Generally, a resource publisher website is a collection of web pages formatted in hypertext markup language (HTML) that can contain text, images, multimedia content, and programming elements. Eachresource publisher website 104 is maintained by a content publisher, which is an entity that controls, manages and/or owns thewebsite 104. - A web page resource is any data that can be provided by a
publisher website 104 over thenetwork 102 and that has a resource address, e.g., a uniform resource locator (URL). Web resources may be HTML pages, images files, video files, audio files, and feed sources, to name just a few. The resources may include embedded information, e.g., meta information and hyperlinks, and/or embedded instructions, e.g., client-side scripts. - An
application publisher website 106 may also include one ormore web resources 105, and also providesnative applications 107. As described above, anative application 107 is an application specifically designed to run on a particular user device operating system and machine firmware. As described above, a native application may have multiple environment instances, each specific to the particular native application. An environment instance differs from a rendered web resource in that the environment instance occurs within and is specific to the native application, while a web resource may be rendered in any browser for which the web page resource is compatible, and is independent of the operating system of the user device. - A
user device 108 is an electronic device, and is capable of requesting and receivingweb page resources 104 andnative applications 107 over thenetwork 102.Example user devices 108 include personal computers, mobile communication devices, and tablet computers. - To search
web resources 105 and thenative applications 107, thesearch engine 110 accesses aweb index 112 and anapplication index 114. Theweb index 112 is an index ofweb resources 105 that has, for example, been built from crawling thepublisher websites 104. Theapplication index 114 is an index of environment instances fornative applications 107, and is constructed using anapplication indexer 120 that implements an indexing process that is described in more detail below. Although shown as separate indexes, theweb index 112 and theapplication index 114 can be combined in a single index. - The
user devices 108 submit search queries to thesearch engine 110. In response to each query, thesearch engine 110 accesses theweb index 112 and theapplication index 114 to identify resources and applications, respectively, that are relevant to the query. Thesearch engine 110 may, for example, identify the resources and applications in the form of web resource search results and native application search results, respectively. Once generated, the search results are provided to theuser device 108 from which the query was received. - A web resource search result is data generated by the
search engine 110 that identifies a web resource and provides information that satisfies a particular search query. A web resource search result for a resource can include a web page title, a snippet of text extracted from the resource, and a resource locator for the resource, e.g., the URL of a web page. - A native application search result specifies a native application and is generated in response to a search of the
application index 114 of environment instances. A variety of functions can be invoked by the selection of an application search result. For example, selection of a native application search result may cause the native application to launch (if installed on the user device 108) and generate the environment instance of the native application referenced in the native application search result. - The collection of environment instance index data and indexing of the data for the
application index 114 is described with reference toFIG. 2 , which illustrates a flow diagram of anexample process 200 for indexing environment instances of native applications. Theprocess 200 can be implemented in a data processing apparatus of one or more computers in data communication with each other. - The
process 200 determines that anative application 107 limits access to generic content in thenative application 107 using account credential requirements (202). Theprocess 200 may determine that anative application 107 limits access to generic content in thenative application 107 in a variety of ways. In some implementations, theapplication indexer 120 may determine that a particularnative application 107 limits access using account credential requirements based on identifying the particularnative application 107 as a native application that has used an account authentication service. For example, theapplication indexer 120 may determine that a particularnative application 107 has used an account authentication service by analyzing account authentication service usage logs. In another implementation, theapplication indexer 120 may determine that access to a native application is limited and then determine that the content for which access is limited is generic content. - In some implementations, the
application indexer 120 may determine that a particularnative application 107 limits access using account credential requirements based on identifying the particularnative application 107 as a native application that has been indicated by anapplication publisher 106 as using the account authentication service. For example, theapplication indexer 120 may query a database that indicates native applications for which theapplication publisher 106 has indicated thenative application 107 as using the account authentication service. - In some implementations, the
application indexer 120 may analyze an environment instance generated by a particularnative application 107 to determine if the particularnative application 107 limits access to thenative application 107. For example, theapplication indexer 120 may determine that an environment instance generated by a particularnative application 107 when account credentials are not provided for particularnative application 107 includes one or more input elements, e.g., a textbox for receiving a user name and a textbox for receiving a password, for account credentials. - The
process 200 obtains a set of robot account credentials for indexing environment instances of the native application 107 (204). In some implementations, the set of robot account credentials may include a user name and a password of an account for indexing environment instances generated by a native application. For example, the set of account credentials for indexing native application “APP1” may include a user name “indexer_APP1_user” and a password “indexer_APP1_pass” of an account. In some implementations, the account for indexing environment instances generated by a particular native application may be specific to that particular native application. For example, theapplication indexer 120 may use a first account when accessing a first native application and use a different, second account when accessing a second native application. In some implementations, any account for indexing the environment instances generated by a native application may not be specific to one or more particular human users. For example, every account used by theapplication indexer 120 for indexing environment instances may be generated specifically for use by theapplication indexer 120 and not by humans. - In some implementations, the
application indexer 120 may obtain the set of robot account credentials by determining whether an account for indexing environment instances generated by the native application exists. For example, theapplication indexer 120 may access anaccount database 122 that stores data indicating both account credentials for indexing environment instances and native applications that correspond to the account credentials and determine whether account credentials for a particular native application are stored in theaccount database 122. - If the
application indexer 120 determines that theaccount database 122 does not store data indicating account credentials for a particularnative application 107, theapplication indexer 120 may determine that a robot account for indexing environment instances generated by thenative application 107 does not exist. In response to this determination, theapplication indexer 120 may trigger generating of an account for indexing environment instances generated by thenative application 107. Theapplication indexer 120 may generate a name and a password for an account for indexing environment instances generated by thenative application 107. For example, theapplication indexer 120 may generate an account for indexing native application “APP1” with the set of account credentials of a user name “indexer_APP1_user” and a password “indexer_APP1_pass.” - If the
application indexer 120 determines that theaccount database 122 does store data for the particularnative application 107, theapplication indexer 120 may determine that a robot account for indexing environment instances generated by thenative application 107 does exist. In response to this determination, theapplication indexer 120 may obtain from theaccount database 122 the set of account credentials that corresponds to thenative application 107. For example, theapplication indexer 120 may obtain from theaccount database 122 the set of account credentials of a user name “indexer_APP1_user” and a password “indexer_APP1_pass” for an account for indexing native application “APP1.” - The
process 200 instantiates thenative application 107 with the set of robot account credentials (206). In some implementations, theapplication indexer 120 may instantiate thenative application 107 with the set of robot account credentials by instantiating a virtual machine emulating an operating system of the user device with the set of account credentials and then instantiating thenative application 107 within the virtual machine. Thevirtual machine 130 may, in some implementations, be a modified version of the operating system and includes extractors that extract data from environment instances as described in more detail below. Thevirtual machine 130 may, for each application in a set ofnative applications 107 to be processed, indicate that the operating system is signed in with anaccount 138 for indexing thenative application 107 and launch an instance of thenative application 107. In an alternate implementation, theapplication indexer 120 may instantiate thenative application 107 with the set of robot account credentials by instantiating a virtual machine emulating an operating system of the user device with the set of account credentials already running thenative application 107. In other implementations, theapplication indexer 120 may instantiate thenative application 107 with the set of robot account credentials without instantiating a virtual machine emulating an operating system of the user device. - The
application indexer 120 may instantiate a virtual machine emulating an operating system of a user device with the set of robot account credentials by having the operating system indicate that the account corresponding to the set of account credentials is signed in using the account credentials. For example, to index environment instances of native application “APP1,” theapplication indexer 120 may instantiate an operating system of the user device where the operating system indicates that an account is signed in on the user device using the user name “index_APP1_user” and the password “index_APP1_pass,” and then launch an instance of native application “APP1.” In another example, theapplication indexer 120 may utilize a virtual machine emulating an operating system of a user device that has been instantiated with a set of credentials for indexing a particular native application and change the set of credentials to another set of credentials for indexing another native application. - When the
native application 107 is launched by theapplication indexer 120, thenative application 107 may determine that the emulated operating system indicates that an account is already signed in. For example, once thenative application 107 is launched, thenative application 107 may determine that an account is signed in on the user device using the user name “index_APP1_user” and the password “index_APP1_pass.” Thenative application 107 may then verify that the set of account credentials are valid. For example, thenative application 107 may utilize an account authentication service to determine whether the user name “index_APP1_user” and the password “index_APP1_pass” correspond to a valid account. If thenative application 107 verifies that the set of account credentials are valid, thenative application 107 may then enable theapplication indexer 120 to access environment instances of thenative application 107 to which access is limited using account credentials. - The
process 200 accesses environment instances of the native application 107 (208). In some implementations, theapplication indexer 120 instantiates the environment instances by an automated process that explores various menus and selection options available in each environment instance, and each subsequent environment instance. Such an automated process can be accomplished by sequentially selecting menu options and links according to a deterministic routine that results in the selection of each environment instance provided by thenative application 107. - Alternatively, the
virtual machine 130 can access the environment instances that are specified by a publisher of the native application. For example, as described above, the application publisher may provide a list ofuniform resource identifiers 109 that the publisher desires to be crawled and indexed in theapplication index 114, and only those environment instances referenced by the URIs for the particularnative application 107 are accessed and indexed. - The
application indexer 120 may then generate environment instance data describing content of the environment instance (210). In some implementations, thevirtual machine 130 includes extractors that extract textual data for indexing. The extracted textual data is, for example, data that has been embedded by the publisher for particular environment instances and is provided to a rendering process of the native application. The rendering process renders content based on the data for display on a user device. Use of extractors allows for more accurate identification of the textual data of an application instance, or alternative can be used to verify textual data that is provided separately with the uniform resource identifiers. For example, thetext extractor 132 extracts text data provided to a rendering process of the native application. The text data specifies the text that is to be rendered in the environment instance in invisible form. - Other extractors can likewise be used, such as a
video extractor 134. Thevideo extractor 134 provides image data of an image or video (e.g., from a three dimensional experience) that is to be rendered in the environment of thenative application 107. Other data can also be extracted, such as environment link data describing links within the environment instance that link to another environment instance in the application; web page link data describing links within the environment that link to a web resource referenced by a uniform resource locator and that, when selected, instantiate a browser application that renders the resource in a browser environment separate from the native application; etc. - To generate videos that may be used in search results, the
virtual machine 130 can perform either a set of predefined actions or, alternatively, perform actions according to a predefined set of commands. In the case of the former, thevirtual machine 130 may be programmed to perform certain actions such as inputting directional navigations, such as left, right, up and down; actuating direction navigation inputs, such as rotate left and rotate right, etc. In the case of the latter, thevirtual machine 130 may perform actions stored in theindex data 111, such as actions specified by a publisher. The actions may be specified in the form of a script, which causes a sequence of time-based inputs to be received by the program so as to generate a natural “tour” of a multi-dimensional environment; or, in the case of applications that implement artificial intelligence (e.g., “Bots”), a “bot mode” can be initiated and a video of the multi-dimensional environment as seen from the point of view of the bot can be recorded. Other appropriate ways of gathering video data to be recorded can also be used. - The
extractors extractors virtual machine 130 processes the objects to extract the corresponding data, e.g., by including instructions that cause the virtual machine to store for indexing the corresponding data that is provided for rendering. - The
process 200 indexes the application environment instance data for the native application in an index that is searchable by a search engine (212). The data are indexed such that thesearch engine 110 may evaluate the relevance of environment instances to search queries. For example, theapplication indexer 120 may generate theapplication index 114 by indexing the application environment instance data. In a particular example, For example, anindexer 160 indexes, for each URI andnative application 107 identifier, the native application environment instance data describing the content for the environment instance. Additional information, such as images, screenshot and even short videos of the native application environment instance can also be generated and indexed as well. These additional data are used in generating native application search results - The indexed data are stored in the
application index 114. A variety of appropriate indexing processes can be used to index the data. For example, theapplication index 114 can include, for eachnative application 107 and URI pair, a row of data describing the environment instance data. The particular database and indexing scheme used may, for example, depend on the search engine algorithms utilized within the search engine. - In some situations, a particular application instance may have different URIs that correspond to different content. For example, an automobile simulation application may have a first portion of a URI that is the same for an environment instances in which automobiles are rendered, and a second portion of the URI, such as a query parameter, that includes a name-value pair for a specific automobile to be rendered. In some implementations, each specific instance of a unique URI constitutes an entry in the
application index 114. - Some native applications may request data and/or instructions from a source that is external to the
virtual machine 130. Examples of such sources are web servers, feed sources, updated images for rendering, etc. The requested data and/or instructions may also be indexed in theapplication index 114. Accordingly, in some implementations, thevirtual machine 130 may include areceiving cache 142 that stores data and instructions that are requested by thenative application 107. Thevirtual machine 130 is configured to intercept the received data and store a copy of the data in thereceiving cache 142 for indexing. - After the
application index 114 is built, thesearch engine 110 can access theapplication index 114 to identify native applications that may be responsive to a query. In some implementations, the applications may be identified by native application search results. - In some implementations, the
process 200 may enable theapplication indexer 120 to index native applications that limit access using account credential requirements without requiring that the native applications be specifically modified to enable theapplication indexer 120 to index the native applications. For example, once theapplication indexer 120 instantiates a virtual machine using the set of account credentials and launches thenative application 107, thenative application 107 may perform its usual function of determining if the operating system indicates that an account that may be used to access thenative application 107 is signed in. - In some implementations, the
native application 107 may generate generic content for environment instances based on information of an account used to access thenative application 107. For example, if account information indicates an account is for a user in England, thenative application 107 may generate environment instances with generic content targeted for users in England. Similarly, if account information indicates an account is for a user in Spain, thenative application 107 may generate environment instances with generic content targeted for users in Spain. - So that the
search engine 110 may provide potentially more relevant search results to search queries from particular users, theapplication indexer 120 may obtain a set of robot account credentials for an account that includes information corresponding with information expected for the particular users providing search queries. For example, when theapplication indexer 120 is generating environment instance data for responding to search queries from users in England, theapplication indexer 120 may obtain a set of robot account credentials for an account that includes information indicating that the account is for a robot user configured to provide results for England. In another example, when theapplication indexer 120 is generating environment instance data for responding to search queries from users in Spain, theapplication indexer 120 may obtain a set of robot account credentials for an account that includes information indicating that the account is for a robot user configured to provide results for Spain. - The
application indexer 120 may then generate the environment instance data using the different robot accounts and index the environment instance data based on the account information. For example, theapplication indexer 120 may index that a set of environment instance data corresponds to users in England and another set of environment instance data corresponds to users in Spain. When thesearch engine 110 receives a search query, thesearch engine 110 may consider information regarding the user, e.g., account information for the user or location of theuser device 108, and bias towards providing results from sets of environment instance data that were indexed by theapplication indexer 120 when accessing a native application with an account with information that corresponds to the user providing the search query. For example, thesystem 100 may define a taxonomy of types of users that may provide search queries, and in response to receiving a search query from a particular user, thesearch engine 110 may classify the particular user according to the taxonomy and weight search results towards results that correspond to environment instance data that was indexed by theapplication indexer 120 with an account with information that matches the user type classified for the particular user providing the search query. Accordingly, thesearch engine 110 may weight search results for a user in the United States towards results that correspond with environment instance data that was indexed by theapplication indexer 120 when accessing native applications using robot accounts with information configured to provide results to user types for the United States and weight search results for a user in England towards results that correspond with environment instance data that was indexed by theapplication indexer 120 when accessing native applications using robot accounts with information configured to provide results to user types for England. - Embodiments of the subject matter and the operations described in this specification can be implemented in digital electronic circuitry, or in computer software, firmware, or hardware, including the structures disclosed in this specification and their structural equivalents, or in combinations of one or more of them. Embodiments of the subject matter described in this specification can be implemented as one or more computer programs, i.e., one or more modules of computer program instructions, encoded on computer storage medium for execution by, or to control the operation of, data processing apparatus. Alternatively or in addition, the program instructions can be encoded on an artificially-generated propagated signal, e.g., a machine-generated electrical, optical, or electromagnetic signal, that is generated to encode information for transmission to suitable receiver apparatus for execution by a data processing apparatus. A computer storage medium can be, or be included in, a computer-readable storage device, a computer-readable storage substrate, a random or serial access memory array or device, or a combination of one or more of them. Moreover, while a computer storage medium is not a propagated signal, a computer storage medium can be a source or destination of computer program instructions encoded in an artificially-generated propagated signal. The environment computer storage medium can also be, or be included in, one or more separate physical components or media (e.g., multiple CDs, disks, or other storage devices).
- The operations described in this specification can be implemented as operations performed by a data processing apparatus on data stored on one or more computer-readable storage devices or received from other sources.
- The term “data processing apparatus” encompasses all kinds of apparatus, devices, and machines for processing data, including by way of example a programmable processor, a computer, a system on a chip, or multiple ones, or combinations, of the foregoing. The apparatus can also include, in addition to hardware, code that creates an execution environment for the computer program in question, e.g., code that constitutes processor firmware, a protocol stack, a database management system, an operating system, a cross-platform runtime environment, a virtual machine, or a combination of one or more of them. The apparatus and execution environment can realize various different computing model infrastructures, such as web services, distributed computing and grid computing infrastructures.
- A computer program (also known as a program, software, software application, script, or code) can be written in any form of programming language, including compiled or interpreted languages, declarative or procedural languages, and it can be deployed in any form, including as a stand-alone program or as a module, component, subroutine, object, or other unit suitable for use in a computing environment. A computer program may, but need not, correspond to a file in a file system. A program can be stored in a portion of a file that holds other programs or data (e.g., one or more scripts stored in a markup language document), in a single file dedicated to the program in question, or in multiple coordinated files (e.g., files that store one or more modules, sub-programs, or portions of code). A computer program can be deployed to be executed on one computer or on multiple computers that are located at one site or distributed across multiple sites and interconnected by a communication network.
- The processes and logic flows described in this specification can be performed by one or more programmable processors executing one or more computer programs to perform actions by operating on input data and generating output. Processors suitable for the execution of a computer program include, by way of example, both general and special purpose microprocessors, and any one or more processors of any kind of digital computer. Generally, a processor will receive instructions and data from a read-only memory or a random access memory or both. The essential elements of a computer are a processor for performing actions in accordance with instructions and one or more memory devices for storing instructions and data. Generally, a computer will also include, or be operatively coupled to receive data from or transfer data to, or both, one or more mass storage devices for storing data, e.g., magnetic, magneto-optical disks, or optical disks. However, a computer need not have such devices. Moreover, a computer can be embedded in another device, e.g., a mobile telephone, a personal digital assistant (PDA), a mobile audio or video player, a game console, a Global Positioning System (GPS) receiver, or a portable storage device (e.g., a universal serial bus (USB) flash drive), to name just a few. Devices suitable for storing computer program instructions and data include all forms of non-volatile memory, media and memory devices, including by way of example semiconductor memory devices, e.g., EPROM, EEPROM, and flash memory devices; magnetic disks, e.g., internal hard disks or removable disks; magneto-optical disks; and CD-ROM and DVD-ROM disks. The processor and the memory can be supplemented by, or incorporated in, special purpose logic circuitry.
- To provide for interaction with a user, embodiments of the subject matter described in this specification can be implemented on a computer having a display device, e.g., a CRT (cathode ray tube) or LCD (liquid crystal display) monitor, for displaying information to the user and a keyboard and a pointing device, e.g., a mouse or a trackball, by which the user can provide input to the computer. Other kinds of devices can be used to provide for interaction with a user as well; for example, feedback provided to the user can be any form of sensory feedback, e.g., visual feedback, auditory feedback, or tactile feedback; and input from the user can be received in any form, including acoustic, speech, or tactile input. In addition, a computer can interact with a user by sending documents to and receiving documents from a device that is used by the user; for example, by sending web pages to a web browser on a user’s user device in response to requests received from the web browser.
- Embodiments of the subject matter described in this specification can be implemented in a computing system that includes a back-end component, e.g., as a data server, or that includes a middleware component, e.g., an application server, or that includes a front-end component, e.g., a user computer having a graphical user interface or a Web browser through which a user can interact with an implementation of the subject matter described in this specification, or any combination of one or more such back-end, middleware, or front-end components. The components of the system can be interconnected by any form or medium of digital data communication, e.g., a communication network. Examples of communication networks include a local area network (“LAN”) and a wide area network (“WAN”), an inter-network (e.g., the Internet), and peer-to-peer networks (e.g., ad hoc peer-to-peer networks).
- The computing system can include users and servers. A user and server are generally remote from each other and typically interact through a communication network. The relationship of user and server arises by virtue of computer programs running on the respective computers and having a user-server relationship to each other. In some embodiments, a server transmits data (e.g., an HTML page) to a user device (e.g., for purposes of displaying data to and receiving user input from a user interacting with the user device). Data generated at the user device (e.g., a result of the user interaction) can be received from the user device at the server.
- While this specification contains many specific implementation details, these should not be construed as limitations on the scope of any inventions or of what may be claimed, but rather as descriptions of features specific to particular embodiments of particular inventions. Certain features that are described in this specification in the context of separate embodiments can also be implemented in combination in a single embodiment. Conversely, various features that are described in the context of a single embodiment can also be implemented in multiple embodiments separately or in any suitable subcombination. Moreover, although features may be described above as acting in certain combinations and even initially claimed as such, one or more features from a claimed combination can in some cases be excised from the combination, and the claimed combination may be directed to a subcombination or variation of a subcombination.
- Similarly, while operations are depicted in the drawings in a particular order, this should not be understood as requiring that such operations be performed in the particular order shown or in sequential order, or that all illustrated operations be performed, to achieve desirable results. In certain circumstances, multitasking and parallel processing may be advantageous. Moreover, the separation of various system components in the embodiments described above should not be understood as requiring such separation in all embodiments, and it should be understood that the described program components and systems can generally be integrated together in a single software product or packaged into multiple software products.
- Thus, particular embodiments of the subject matter have been described. Other embodiments are within the scope of the following claims. In some cases, the actions recited in the claims can be performed in a different order and still achieve desirable results. In addition, the processes depicted in the accompanying figures do not necessarily require the particular order shown, or sequential order, to achieve desirable results. In certain implementations, multitasking and parallel processing may be advantageous.
Claims (19)
Priority Applications (1)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US17/966,356 US20230106266A1 (en) | 2015-01-22 | 2022-10-14 | Indexing Access Limited Native Applications |
Applications Claiming Priority (3)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US14/602,440 US10216852B1 (en) | 2015-01-22 | 2015-01-22 | Indexing access limited native applications |
US16/245,651 US11500952B1 (en) | 2015-01-22 | 2019-01-11 | Indexing access limited native applications |
US17/966,356 US20230106266A1 (en) | 2015-01-22 | 2022-10-14 | Indexing Access Limited Native Applications |
Related Parent Applications (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
US16/245,651 Continuation US11500952B1 (en) | 2015-01-22 | 2019-01-11 | Indexing access limited native applications |
Publications (1)
Publication Number | Publication Date |
---|---|
US20230106266A1 true US20230106266A1 (en) | 2023-04-06 |
Family
ID=65410636
Family Applications (3)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
US14/602,440 Active 2037-04-12 US10216852B1 (en) | 2015-01-22 | 2015-01-22 | Indexing access limited native applications |
US16/245,651 Active 2037-09-28 US11500952B1 (en) | 2015-01-22 | 2019-01-11 | Indexing access limited native applications |
US17/966,356 Pending US20230106266A1 (en) | 2015-01-22 | 2022-10-14 | Indexing Access Limited Native Applications |
Family Applications Before (2)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
US14/602,440 Active 2037-04-12 US10216852B1 (en) | 2015-01-22 | 2015-01-22 | Indexing access limited native applications |
US16/245,651 Active 2037-09-28 US11500952B1 (en) | 2015-01-22 | 2019-01-11 | Indexing access limited native applications |
Country Status (1)
Country | Link |
---|---|
US (3) | US10216852B1 (en) |
Families Citing this family (5)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US10706175B2 (en) * | 2016-06-10 | 2020-07-07 | Nirvon Shoa | Method and apparatus for hiding private browsing data |
GB2599057B (en) * | 2017-02-03 | 2022-09-21 | Worldpay Ltd | Terminal for conducting electronic transactions |
US11144720B2 (en) * | 2019-08-26 | 2021-10-12 | Roblox Corporation | Determining canonical content for a game |
US20220083510A1 (en) * | 2020-09-15 | 2022-03-17 | Open Text Holdings, Inc. | Connector for content repositories |
US11947528B1 (en) * | 2022-01-06 | 2024-04-02 | Splunk Inc. | Automatic generation of queries using non-textual input |
Citations (10)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20070016583A1 (en) * | 2005-07-14 | 2007-01-18 | Ronny Lempel | Enforcing native access control to indexed documents |
US20070283425A1 (en) * | 2006-03-01 | 2007-12-06 | Oracle International Corporation | Minimum Lifespan Credentials for Crawling Data Repositories |
US20100058440A1 (en) * | 2008-08-27 | 2010-03-04 | Yahoo! Inc. | Interaction with desktop and online corpus |
US20110178868A1 (en) * | 2010-01-21 | 2011-07-21 | Priyank Shanker Garg | Enhancing search result pages using content licensed from content providers |
US20130133046A1 (en) * | 2009-12-11 | 2013-05-23 | Microsoft Corporation | Search service administration web service protocol |
US20140201179A1 (en) * | 2013-01-16 | 2014-07-17 | Google Inc. | Indexing application pages of native applications |
US20140250098A1 (en) * | 2010-06-11 | 2014-09-04 | Doat Media Ltd. | System and method for indexing mobile applications |
US20140365462A1 (en) * | 2013-06-07 | 2014-12-11 | Google Inc. | Index data for native applications |
US9088564B1 (en) * | 2013-02-07 | 2015-07-21 | Intuit Inc. | Transitioning a logged-in state from a native application to any associated web resource |
US9436763B1 (en) * | 2010-04-06 | 2016-09-06 | Facebook, Inc. | Infrastructure enabling intelligent execution and crawling of a web application |
Family Cites Families (8)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
EP2410441A1 (en) | 2010-07-16 | 2012-01-25 | Research In Motion Limited | Registration of applications and unified media search |
US20120124028A1 (en) * | 2010-11-12 | 2012-05-17 | Microsoft Corporation | Unified Application Discovery across Application Stores |
US8341223B1 (en) * | 2011-06-07 | 2012-12-25 | Banjo, Inc. | Method for relevant content discovery |
US10290017B2 (en) * | 2011-11-15 | 2019-05-14 | Tapad, Inc. | Managing associations between device identifiers |
US9571282B1 (en) * | 2012-04-03 | 2017-02-14 | Google Inc. | Authentication on a computing device |
US9152674B2 (en) * | 2012-04-27 | 2015-10-06 | Quixey, Inc. | Performing application searches |
US20140250147A1 (en) | 2013-03-01 | 2014-09-04 | Quixey, Inc. | Generating Search Results Containing State Links to Applications |
US9516006B2 (en) * | 2013-10-23 | 2016-12-06 | Google Inc. | Re-programmable secure cryptographic device |
-
2015
- 2015-01-22 US US14/602,440 patent/US10216852B1/en active Active
-
2019
- 2019-01-11 US US16/245,651 patent/US11500952B1/en active Active
-
2022
- 2022-10-14 US US17/966,356 patent/US20230106266A1/en active Pending
Patent Citations (10)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20070016583A1 (en) * | 2005-07-14 | 2007-01-18 | Ronny Lempel | Enforcing native access control to indexed documents |
US20070283425A1 (en) * | 2006-03-01 | 2007-12-06 | Oracle International Corporation | Minimum Lifespan Credentials for Crawling Data Repositories |
US20100058440A1 (en) * | 2008-08-27 | 2010-03-04 | Yahoo! Inc. | Interaction with desktop and online corpus |
US20130133046A1 (en) * | 2009-12-11 | 2013-05-23 | Microsoft Corporation | Search service administration web service protocol |
US20110178868A1 (en) * | 2010-01-21 | 2011-07-21 | Priyank Shanker Garg | Enhancing search result pages using content licensed from content providers |
US9436763B1 (en) * | 2010-04-06 | 2016-09-06 | Facebook, Inc. | Infrastructure enabling intelligent execution and crawling of a web application |
US20140250098A1 (en) * | 2010-06-11 | 2014-09-04 | Doat Media Ltd. | System and method for indexing mobile applications |
US20140201179A1 (en) * | 2013-01-16 | 2014-07-17 | Google Inc. | Indexing application pages of native applications |
US9088564B1 (en) * | 2013-02-07 | 2015-07-21 | Intuit Inc. | Transitioning a logged-in state from a native application to any associated web resource |
US20140365462A1 (en) * | 2013-06-07 | 2014-12-11 | Google Inc. | Index data for native applications |
Also Published As
Publication number | Publication date |
---|---|
US11500952B1 (en) | 2022-11-15 |
US10216852B1 (en) | 2019-02-26 |
Similar Documents
Publication | Publication Date | Title |
---|---|---|
US9652550B2 (en) | Indexing application pages of native applications | |
US9846745B2 (en) | Index data for native applications | |
US20230106266A1 (en) | Indexing Access Limited Native Applications | |
US10713324B2 (en) | Search results for native applications | |
JP7330891B2 (en) | System and method for direct in-browser markup of elements in Internet content | |
US9547721B2 (en) | Native application search results | |
US9348671B1 (en) | Monitoring application loading | |
JP6580708B2 (en) | Application part deep links to corresponding resources | |
US10146842B2 (en) | Pre-instantiating native applications in background |
Legal Events
Date | Code | Title | Description |
---|---|---|---|
AS | Assignment |
Owner name: GOOGLE INC., CALIFORNIAFree format text: ASSIGNMENT OF ASSIGNORS INTEREST;ASSIGNORS:GUPTA, PRANAY;SHAH, CHIRAG;SIGNING DATES FROM 20141222 TO 20150121;REEL/FRAME:061550/0927 |
|
AS | Assignment |
Owner name: GOOGLE LLC, CALIFORNIAFree format text: CHANGE OF NAME;ASSIGNOR:GOOGLE INC.;REEL/FRAME:062354/0523Effective date: 20170929 |
|
STPP | Information on status: patent application and granting procedure in general |
Free format text: NON FINAL ACTION MAILED |
|
STPP | Information on status: patent application and granting procedure in general |
Free format text: RESPONSE TO NON-FINAL OFFICE ACTION ENTERED AND FORWARDED TO EXAMINER |
|
STPP | Information on status: patent application and granting procedure in general |
Free format text: NOTICE OF ALLOWANCE MAILED -- APPLICATION RECEIVED IN OFFICE OF PUBLICATIONS |
|
STPP | Information on status: patent application and granting procedure in general |
Free format text: PUBLICATIONS -- ISSUE FEE PAYMENT VERIFIED |