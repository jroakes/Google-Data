CN116888662A - Learning word level confidence for end-to-end automatic speech recognition of subwords - Google Patents
Learning word level confidence for end-to-end automatic speech recognition of subwords Download PDFInfo
- Publication number
- CN116888662A CN116888662A CN202280015500.5A CN202280015500A CN116888662A CN 116888662 A CN116888662 A CN 116888662A CN 202280015500 A CN202280015500 A CN 202280015500A CN 116888662 A CN116888662 A CN 116888662A
- Authority
- CN
- China
- Prior art keywords
- confidence
- subword
- speech recognizer
- speech
- word
- Prior art date
- Legal status (The legal status is an assumption and is not a legal conclusion. Google has not performed a legal analysis and makes no representation as to the accuracy of the status listed.)
- Pending
Links
- 239000013598 vector Substances 0.000 claims abstract description 50
- 238000000034 method Methods 0.000 claims abstract description 44
- 230000007246 mechanism Effects 0.000 claims abstract description 32
- 230000004931 aggregating effect Effects 0.000 claims abstract description 6
- 230000015654 memory Effects 0.000 claims description 41
- 238000013518 transcription Methods 0.000 claims description 32
- 230000035897 transcription Effects 0.000 claims description 31
- 238000012545 processing Methods 0.000 claims description 26
- 238000004891 communication Methods 0.000 claims description 15
- 230000008569 process Effects 0.000 claims description 10
- 230000000306 recurrent effect Effects 0.000 claims description 7
- 230000001537 neural effect Effects 0.000 claims description 6
- 238000013528 artificial neural network Methods 0.000 description 11
- 238000012549 training Methods 0.000 description 10
- 238000004590 computer program Methods 0.000 description 8
- 238000010586 diagram Methods 0.000 description 8
- 238000009826 distribution Methods 0.000 description 6
- 238000003058 natural language processing Methods 0.000 description 5
- 230000004044 response Effects 0.000 description 5
- 230000006870 function Effects 0.000 description 4
- 230000003287 optical effect Effects 0.000 description 4
- 230000009471 action Effects 0.000 description 3
- 230000008901 benefit Effects 0.000 description 3
- 230000009467 reduction Effects 0.000 description 3
- 230000002411 adverse Effects 0.000 description 2
- 230000008859 change Effects 0.000 description 2
- 230000001934 delay Effects 0.000 description 2
- 238000013461 design Methods 0.000 description 2
- 230000000694 effects Effects 0.000 description 2
- 230000003993 interaction Effects 0.000 description 2
- 238000002372 labelling Methods 0.000 description 2
- 230000006855 networking Effects 0.000 description 2
- 238000012552 review Methods 0.000 description 2
- 239000004065 semiconductor Substances 0.000 description 2
- 230000003068 static effect Effects 0.000 description 2
- 230000004913 activation Effects 0.000 description 1
- 230000002776 aggregation Effects 0.000 description 1
- 238000004220 aggregation Methods 0.000 description 1
- 238000013459 approach Methods 0.000 description 1
- 235000013405 beer Nutrition 0.000 description 1
- 239000000470 constituent Substances 0.000 description 1
- 238000003066 decision tree Methods 0.000 description 1
- 230000007423 decrease Effects 0.000 description 1
- 230000001419 dependent effect Effects 0.000 description 1
- 238000005516 engineering process Methods 0.000 description 1
- 239000004973 liquid crystal related substance Substances 0.000 description 1
- 230000007787 long-term memory Effects 0.000 description 1
- 230000007774 longterm Effects 0.000 description 1
- 238000012423 maintenance Methods 0.000 description 1
- 238000007726 management method Methods 0.000 description 1
- 238000012986 modification Methods 0.000 description 1
- 230000004048 modification Effects 0.000 description 1
- 238000010606 normalization Methods 0.000 description 1
- 230000000717 retained effect Effects 0.000 description 1
- 230000001953 sensory effect Effects 0.000 description 1
- 239000007787 solid Substances 0.000 description 1
- 230000005236 sound signal Effects 0.000 description 1
- 230000003595 spectral effect Effects 0.000 description 1
- 238000006467 substitution reaction Methods 0.000 description 1
- 238000012546 transfer Methods 0.000 description 1
- 230000000007 visual effect Effects 0.000 description 1
Classifications
-
- G—PHYSICS
- G10—MUSICAL INSTRUMENTS; ACOUSTICS
- G10L—SPEECH ANALYSIS OR SYNTHESIS; SPEECH RECOGNITION; SPEECH OR VOICE PROCESSING; SPEECH OR AUDIO CODING OR DECODING
- G10L15/00—Speech recognition
- G10L15/22—Procedures used during a speech recognition process, e.g. man-machine dialogue
-
- G—PHYSICS
- G10—MUSICAL INSTRUMENTS; ACOUSTICS
- G10L—SPEECH ANALYSIS OR SYNTHESIS; SPEECH RECOGNITION; SPEECH OR VOICE PROCESSING; SPEECH OR AUDIO CODING OR DECODING
- G10L15/00—Speech recognition
- G10L15/08—Speech classification or search
- G10L15/16—Speech classification or search using artificial neural networks
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06N—COMPUTING ARRANGEMENTS BASED ON SPECIFIC COMPUTATIONAL MODELS
- G06N3/00—Computing arrangements based on biological models
- G06N3/02—Neural networks
- G06N3/08—Learning methods
-
- G—PHYSICS
- G10—MUSICAL INSTRUMENTS; ACOUSTICS
- G10L—SPEECH ANALYSIS OR SYNTHESIS; SPEECH RECOGNITION; SPEECH OR VOICE PROCESSING; SPEECH OR AUDIO CODING OR DECODING
- G10L15/00—Speech recognition
- G10L15/08—Speech classification or search
-
- G—PHYSICS
- G10—MUSICAL INSTRUMENTS; ACOUSTICS
- G10L—SPEECH ANALYSIS OR SYNTHESIS; SPEECH RECOGNITION; SPEECH OR VOICE PROCESSING; SPEECH OR AUDIO CODING OR DECODING
- G10L25/00—Speech or voice analysis techniques not restricted to a single one of groups G10L15/00 - G10L21/00
- G10L25/27—Speech or voice analysis techniques not restricted to a single one of groups G10L15/00 - G10L21/00 characterised by the analysis technique
- G10L25/30—Speech or voice analysis techniques not restricted to a single one of groups G10L15/00 - G10L21/00 characterised by the analysis technique using neural networks
-
- G—PHYSICS
- G10—MUSICAL INSTRUMENTS; ACOUSTICS
- G10L—SPEECH ANALYSIS OR SYNTHESIS; SPEECH RECOGNITION; SPEECH OR VOICE PROCESSING; SPEECH OR AUDIO CODING OR DECODING
- G10L15/00—Speech recognition
- G10L15/08—Speech classification or search
- G10L2015/088—Word spotting
Abstract
The method (500) includes receiving a speech recognition result (232) and using a Confidence Estimation Module (CEM) (300), for each subword unit in a sequence of hypothesized subword units of the speech recognition result: obtaining a respective confidence inlay (242); generating a confidence feature vector (312) using the first attention mechanism (310); generating an acoustic context vector (332) using the second attention mechanism (320); and generating a respective confidence output score (302) for each corresponding subword unit as output from the output layer (340) of the CEM. For each of the one or more words formed by the hypothesized sub-word unit sequence, the method further includes determining a respective word-level confidence score for the word. The method also includes determining an utterance-level confidence score by aggregating the word-level confidence scores (350).
Description
Technical Field
The present disclosure relates to learning word-level confidence for end-to-end automatic speech recognition of subwords.
Background
Modern Automatic Speech Recognition (ASR) systems focus not only on providing quality/accuracy (e.g., low Word Error Rate (WER)), but also on providing low latency (e.g., short delay between user speaking and transcription occurring). Furthermore, ASR systems are required to decode utterances in a streaming manner when used today, which corresponds to displaying a transcription of an utterance in real time, or even faster than real time, when a user speaks. To illustrate, when an ASR system is deployed on a cell phone experiencing direct user interactivity, an application on the cell phone using the ASR system may require that speech recognition be streamed so that words, word blocks, and/or individual characters appear on the screen immediately when spoken. Here, the tolerance of the user of the mobile phone to the delay may also be low. Due to this low tolerance, speech recognition efforts are run on mobile devices to minimize the effects of delays and inaccuracies that may adversely affect the user experience.
Disclosure of Invention
An aspect of the present disclosure provides a computer-implemented method that, when executed on data processing hardware, causes the data processing hardware to perform operations that include receiving, from a speech recognizer, speech recognition results of an utterance spoken by a user. The speech recognition result includes a sequence of hypothesized subword units that form one or more words of the utterance. Each subword unit is output from the speech recognizer at a corresponding output step. Using the confidence estimation module, for each subword unit in the sequence of hypothesized subword units, the operations further comprise: obtaining respective confidence embeddings representing a set of confidence features associated with the corresponding outputting step when outputting the corresponding subword units from the speech recognizer; generating a confidence feature vector using a first attentive mechanism that self-attentive to respective confidence embeddings of corresponding subword units and confidence embeddings obtained for any other subword units in the sequence of hypothesized subword units continuing to correspond to the subword units; generating an acoustic context vector using a second attention mechanism that cross-notes a sequence of acoustic encodings, each acoustic encoding associated with a corresponding acoustic frame segmented from audio data corresponding to the utterance; and generating respective confidence output scores for corresponding subword units as output from the output layer of the confidence estimation module based on the confidence feature vectors and acoustic feature vectors received as input by the output layer of the confidence estimation module. For each of the one or more words formed by the sequence of hypothesized subword units, the operations further include determining a respective word-level confidence score for the word; and determining an utterance level confidence score for the speech recognition result by aggregating the respective word level confidence scores determined for the one or more words of the utterance. The respective word-level confidence score is equal to the respective confidence output score generated for the final subword unit in the word.
Embodiments of the present disclosure may include one or more of the following optional features. In some embodiments, the set of confidence features represented by the respective confidence embedment includes a softmax posterior feature of the speech recognizer at the corresponding outputting step, and a subword embedment feature of the corresponding subword unit. In additional embodiments, the set of confidence features represented by the respective confidence embeddings further comprises: a log posterior log feature indicating a probability value associated with a probability/likelihood of a corresponding subword unit output from the speech recognizer at the corresponding outputting step; and top K features indicating K maximum log probabilities for top K candidate hypotheses re-scored by the speech recognizer at corresponding output steps. Here, the first K candidate hypotheses are each represented by a sequence of respective hypothesized subword units of one or more words forming the utterance.
In some examples, the subword units include word blocks, while in other examples, the subword units include graphemes. The speech recognizer may include a transducer decoder model and a re-scorer decoder model. The transducer decoder model is configured to generate a plurality of candidate hypotheses during a first pass, and the re-scorer decoder model is configured to re-score the first K candidate hypotheses from the plurality of candidate hypotheses generated by the transducer decoder model during the first pass during a second pass. Each candidate hypothesis corresponds to a candidate transcription of the utterance and is represented by a sequence of respective hypothesis subword units. Further, candidate hypotheses of the first K candidate hypotheses re-scored by the re-scorer decoder model are output from the re-scorer decoder model as speech recognition results of the utterance spoken by the user, the candidate hypotheses being represented by sequences of respective hypothesized subword units associated with the highest second-pass logarithmic probabilities. The transducer decoder model may include a recurrent neural network-transducer (RNN-T) model architecture, and the re-scorer decoder model may include a listen, attention, and spelling (LAS) model architecture.
In some embodiments, the operations further comprise: generating a plurality of hypothesis codes during a second pass using a speech encoder of the speech recognizer by encoding each of a plurality of candidate hypotheses generated by the transducer decoder model during the first pass; and generating, using the confidence estimation module, a language context vector for each subword unit in the sequence of hypothesized subword units using a third attention mechanism that cross-notes the plurality of hypothesized encodings. In these embodiments, generating the respective confidence output scores for the corresponding subword units is further based on the language context vector received as input by the output layer of the confidence estimation module. Encoding each of the plurality of candidate hypotheses may include bi-directionally encoding each candidate hypothesis into a corresponding hypothesis code, and generating the plurality of candidate hypotheses may include generating the plurality of hypothesis codes by concatenating each corresponding hypothesis code.
The speech recognizer and confidence estimation module may be trained jointly or separately. The confidence estimation module may be trained using binary cross entropy loss based on features associated with the speech recognizer. In some examples, the operations further include determining whether the speech-level confidence score of the speech recognition result meets a confidence threshold, and when the speech-level confidence score of the speech recognition result fails to meet the confidence threshold, transmitting audio data corresponding to the utterance to another speech recognizer. Here, the other speech recognizer is configured to process the audio data to generate a transcription of the utterance. In these examples, the speech recognizer and confidence estimation module may be executing on the user computing device, while the other speech recognizer may be executing on a remote server in communication with the user computing device via a network.
Another aspect of the present disclosure provides a system that includes data processing hardware and memory hardware in communication with the data processing hardware and storing instructions that, when executed on the data processing hardware, cause the data processing hardware to perform operations that include receiving a speech recognition result of an utterance spoken by a user from a speech recognizer. The speech recognition result includes a sequence of hypothesized subword units that form one or more words of the utterance. Each subword unit is output from the speech recognizer at a corresponding output step. Using the confidence estimation module, for each subword unit in the sequence of hypothesized subword units, the operations further comprise: obtaining respective confidence embeddings representing a set of confidence features associated with the corresponding outputting step when outputting the corresponding subword units from the speech recognizer; generating a confidence feature vector using a first attentive mechanism that self-attentive to respective confidence embeddings of corresponding subword units and confidence embeddings obtained for any other subword units in the sequence of hypothesized subword units continuing to correspond to the subword units; generating an acoustic context vector using a second attention mechanism that cross-notes a sequence of acoustic encodings, each acoustic encoding associated with a corresponding acoustic frame segmented from audio data corresponding to the utterance; and generating respective confidence output scores for corresponding subword units as output from the output layer of the confidence estimation module based on the confidence feature vectors and acoustic feature vectors received as input by the output layer of the confidence estimation module. For each of the one or more words formed by the sequence of hypothesized subword units, the operations further include determining a respective word-level confidence score for the word; and determining an utterance level confidence score for the speech recognition result by aggregating the respective word level confidence scores determined for the one or more words of the utterance. The respective word-level confidence score is equal to the respective confidence output score generated for the final subword unit in the word.
This aspect may include one or more of the following optional features. In some embodiments, the set of confidence features represented by the respective confidence embedment includes a softmax posterior feature of the speech recognizer at the corresponding outputting step, and a subword embedment feature of the corresponding subword unit. In additional embodiments, the set of confidence features represented by the respective confidence embeddings further comprises: a log posterior log feature indicating a probability value associated with a probability/likelihood of a corresponding subword unit output from the speech recognizer at the corresponding outputting step; and top K features indicating K maximum log probabilities for top K candidate hypotheses re-scored by the speech recognizer at corresponding output steps. Here, the first K candidate hypotheses are each represented by a sequence of respective hypothesized subword units of one or more words forming the utterance.
In some examples, the subword units include word blocks, while in other examples, the subword units include graphemes. The speech recognizer may include a transducer decoder model and a re-scorer decoder model. The transducer decoder model is configured to generate a plurality of candidate hypotheses during a first pass, and the re-scorer decoder model is configured to re-score the first K candidate hypotheses from the plurality of candidate hypotheses generated by the transducer decoder model during the first pass during a second pass. Each candidate hypothesis corresponds to a candidate transcription of the utterance and is represented by a sequence of respective hypothesis subword units. Further, candidate hypotheses of the first K candidate hypotheses re-scored by the re-scorer decoder model are output from the re-scorer decoder model as speech recognition results of the utterance spoken by the user, the candidate hypotheses being represented by sequences of respective hypothesized subword units associated with the highest second-pass logarithmic probabilities. The transducer decoder model may include a recurrent neural network-transducer (RNN-T) model architecture, and the re-scorer decoder model may include a listen, attention, and spelling (LAS) model architecture.
In some embodiments, the operations further comprise: generating a plurality of hypothesis codes during a second pass using a speech encoder of the speech recognizer by encoding each of a plurality of candidate hypotheses generated by the transducer decoder model during the first pass; and generating, using the confidence estimation module, a language context vector for each subword unit in the sequence of hypothesized subword units using a third attention mechanism that cross-notes the plurality of hypothesized encodings. In these embodiments, generating the respective confidence output scores for the corresponding subword units is further based on the language context vector received as input by the output layer of the confidence estimation module. Encoding each of the plurality of candidate hypotheses may include bi-directionally encoding each candidate hypothesis into a corresponding hypothesis code, and generating the plurality of candidate hypotheses may include generating the plurality of hypothesis codes by concatenating each corresponding hypothesis code.
The speech recognizer and confidence estimation module may be trained jointly or separately. The confidence estimation module may be trained using binary cross entropy loss based on features associated with the speech recognizer. In some examples, the operations further include determining whether the speech-level confidence score of the speech recognition result meets a confidence threshold, and when the speech-level confidence score of the speech recognition result fails to meet the confidence threshold, transmitting audio data corresponding to the utterance to another speech recognizer. Here, the other speech recognizer is configured to process the audio data to generate a transcription of the utterance. In these examples, the speech recognizer and confidence estimation module may be executing on the user computing device, while the other speech recognizer may be executing on a remote server in communication with the user computing device via a network.
The details of one or more embodiments of the disclosure are set forth in the accompanying drawings and the description below. Other aspects, features, and advantages will be apparent from the description and drawings, and from the claims.
Drawings
FIG. 1 is a schematic diagram of an example speech environment.
FIG. 2A is a schematic diagram of an example speech recognizer with a two-pass model architecture for speech recognition with a transformer rescaler.
FIG. 2B is a schematic diagram of an example speech recognizer with a two-pass model architecture for speech recognition with a survey re-scorer.
FIG. 3 is a schematic diagram of an example confidence estimation module overlaid on a speech recognizer with a two-pass model architecture.
FIG. 4 is a schematic diagram of an example confidence-based routine for selecting an appropriate speech recognizer based on utterance-level confidence.
FIG. 5 is a flow chart of an example arrangement of operations of a method for estimating word-level confidence of a word using only the confidence of the final hypothesized sub-word units of the word recognized by a speech recognizer.
FIG. 6 is a schematic diagram of an example computing device that may be used to implement the systems and methods described herein.
Like reference symbols in the various drawings indicate like elements.
Detailed Description
Automatic Speech Recognition (ASR) systems focus not only on providing quality/accuracy (e.g., low Word Error Rate (WER)), but also on providing low latency (e.g., short delay between user speaking and transcription occurring). Recently, end-to-end (E2E) ASR models, such as recurrent neural network-transducers (RNN-T), transducers, or convolutional enhanced transducer transducers, and attention-based encoder-decoder models have gained popularity in achieving the most advanced performance of accuracy and latency. In contrast to conventional hybrid ASR systems that include separate acoustic, speech and language models, the E2E model applies a sequence-to-sequence approach to jointly learn acoustic and language modeling in a single neural network that trains end-to-end according to training data (e.g., speech-transcription pairs).
Examples of sequence-to-sequence models include an "attention-based" model and a "listen-attention-spelling" (LAS) model. The LAS model transcribes a speech utterance into characters using a listener component, a notifier component, and a speller component. Here, the listener is a Recurrent Neural Network (RNN) encoder that receives audio input (e.g., a time-frequency representation of speech input) and maps the audio input to a higher-level feature representation. The attention is paid to higher level features to learn the alignment between the input features and the predicted sub-word units (e.g., grapheme or word block (wordpiece)). The speller is an attention-based RNN decoder that generates a sequence of characters from an input by generating a probability distribution over a set of hypothesized words. With an integrated architecture, all components of the model can be jointly trained as a single end-to-end (E2E) neural network. Here, the E2E model refers to a model whose architecture is entirely constructed of a neural network. The full neural network functions without external and/or manually designed components (e.g., finite state transducers, dictionary or text normalization modules). In addition, when training E2E models, these models typically do not require bootstrapping (bootstrapping) from a decision tree or time alignment from a separate system.
Furthermore, ASR systems are required to decode utterances in a streaming manner when used today, which corresponds to displaying a transcription of an utterance in real time, or even faster than real time, when a user speaks. To illustrate, when an ASR system is deployed on a cell phone experiencing direct user interactivity, an application on a mobile phone using the ASR system may require that speech recognition be streamed so that words, word blocks, and/or individual characters appear on the screen immediately when spoken. Here, too, the tolerance of the user of the mobile phone to the delay may be low. Due to this low tolerance, speech recognition efforts are run on mobile devices to minimize the effects of delays and inaccuracies that may adversely affect the user experience. However, sequence-to-sequence models, such as LAS models that work by examining the entire input sequence of audio before generating output text, do not allow streaming of the output as the input is received. Due to this drawback, deploying LAS models for speech applications that are delay sensitive and/or require real-time speech transcription can be problematic. This makes the LAS model itself not an ideal model for mobile technology (e.g., mobile phones) that is often dependent on real-time applications (e.g., real-time communication applications).
Another form of sequence-to-sequence model, known as a recurrent neural network transducer (RNN-T), does not employ an attention mechanism, and unlike other sequence-to-sequence models that typically require processing of an entire sequence (e.g., an audio waveform) to produce an output (e.g., a sentence), RNN-T continuously processes input samples and streams output symbols, a feature that is particularly attractive for real-time communications. For example, speech recognition using RNN-T can output characters one by one in terms of speech. Here, RNN-T uses a feedback loop that feeds back the symbol predicted by the model to itself to predict the next symbol. Because decoding RNN-T involves beam searching through a single neural network, rather than a large decoder graph, RNN-T can be extended to a fraction of the size of the server-based speech recognition model. As the size decreases, RNN-T may be fully deployed on the device and able to run offline (i.e., without network connectivity); thereby avoiding unreliability problems of the communication network.
However, the RNN-T model alone still lags behind the large most advanced traditional model (e.g., server-based model with AM, PM, and LM alone) in terms of quality (e.g., speech recognition accuracy). However, the speech recognition quality of the non-streaming E2E LAS model is comparable to the large most advanced traditional model. To take advantage of the quality of the non-streaming E2E LAS model, a two-pass speech recognition system (e.g., as shown in fig. 2A) is developed that includes a first pass component of the RNN-T network followed by a second pass component of the LAS network. With this design, the two-pass model benefits from the streaming nature of the RNN-T model with low latency, while improving the accuracy of the RNN-T model by combining the second pass of the LAS network. Although LAS networks add latency compared to RNN-T only models, the increase in latency is quite slight and meets the latency constraints of on-device operation. With respect to accuracy, the WER of the two-pass model was reduced by 17-22% compared to RNN-T alone, and similar compared to the large traditional model.
Confidence scores are an important feature of ASR systems that support many downstream applications to mitigate speech recognition errors. For example, unlabeled utterances with recognition results output from the ASR model that achieve high confidence may be used for semi-supervised training of the ASR model, which may reduce the cost of training using only transcribed utterances. On the other hand, in an application program such as a spoken dialog system where a user interacts with a digital assistant executing on a computing device, an utterance with recognition results that achieve low word-level confidence may prompt the user to correct any incorrectly transcribed words. In addition, recognition results with low confidence may result in the delivery of audio of the corresponding utterance to a different ASR model (e.g., server-side) to improve recognition of the utterance.
While conventional hybrid ASR systems can easily estimate word-level confidence scores from word posterior probabilities calculated from a grid or confusion network and then aggregate to provide speech-level confidence, deep neural networks employed by E2E ASR models tend to exhibit excessive confidence in predicting words. Because many E2E ASR models are configured to output recognition results at the subword level, simply learning the confidence score for each subword recognized by the ASR model using the corresponding fixed subword labeling of the word as a reference sequence can result in incorrect ground truth labels for training the confidence estimation model because the recognition results may contain multiple valid labeling. For example, the reference fixed subword sequence of the utterance "Good morning" may be "go, od, mole, ing", while the hypothesized subword sequence recognized by the ASR model may be "go, od, mor, ning, mom". Here, even if the ASR model correctly recognizes the word "turn", the sub-word tags of the corresponding hypothesized sub-words "mor" and "ning" recognized by the ASR model will be marked as incorrect because they do not match the corresponding reference fixed sub-words "morn" and "ing" of the word "morning".
To mitigate the shortcomings associated with estimating the sub-word confidence scores of a sequence of hypothesized sub-words identified by an ASR model due to mismatches between reference fixed sub-word sequences, embodiments herein relate to a confidence estimation model that applies self-attention to estimate word-level confidence for each identified word using only the confidence of the final hypothesized sub-word units identified by the ASR model that make up the corresponding word. Additional embodiments of the present disclosure also relate to a confidence estimation module that additionally utilizes cross-attention to the acoustic context of the utterance being recognized and the linguistic context of multiple hypotheses (e.g., an N-best list) recognized by the ASR model during the first pass. It is apparent that the use of both acoustic and linguistic cross-attention results in an increase in the accuracy of the confidence score estimated by the confidence estimation module.
FIG. 1 is an example speech environment 100 in which a user 10 interacts with a user device 110 through voice input. User device 110 (also commonly referred to as device 110) includes a computing device configured to capture sound (e.g., streaming audio data) from one or more users 10 within supported voice environment 100. Here, streaming audio data 202 may refer to a spoken utterance 106 of the user 10 that is used as an audible query, a command by the device 110, or an audible communication captured by the device 110. The supported voice system of device 110 may field a query or command by answering the query and/or causing the command to be executed.
User device 110 may correspond to any computing device capable of receiving audio data 202. Some examples of user devices 110 include, but are not limited to, mobile devices (e.g., cell phones, tablet computers, laptops, etc.), computers, wearable devices (e.g., smartwatches), smart appliances, internet of things (IoT) devices, smart speakers/displays, vehicle infotainment systems, etc. The user device 110 includes data processing hardware 112 and memory hardware 114, the memory hardware 114 being in communication with the data processing hardware 112 and storing instructions that, when executed by the data processing hardware 112, cause the data processing hardware 112 to perform one or more operations. The user device 110 further comprises an audio subsystem 116 having: an audio capturing device (e.g., microphone) 116, 116a for capturing the spoken utterance 12 within the supported speech system 100 and converting the spoken utterance into an electrical signal; and a voice output device (e.g., speaker) 116, 116b for conveying audible audio signals (e.g., as output audio data from device 110). Although the user device 110 implements a single audio capture device 116a in the illustrated example, the user device 110 may implement an array of audio capture devices 116a without departing from the scope of the disclosure, whereby one or more of the capture devices 116a in the array may not physically reside on the user device 110, but instead communicate with the audio subsystem 116. In the illustrated example, user device 110 implements (e.g., using hardware 112, 114) a speech recognizer 200 configured to perform speech recognition on audio data 202 corresponding to utterance 12 spoken by user 10. Here, audio capture device 116a is configured to capture acoustic sounds representative of utterance 12 and convert the acoustic sounds into audio data 202 associated with a digital format compatible with speech recognizer 200. The digital format associated with the audio data 202 may correspond to an acoustic frame (e.g., a parameterized acoustic frame), such as a mel frame. For example, the parameterized acoustic frames correspond to log-mel filter bank energies.
Although fig. 1 shows a user device 100 implementing a speech recognizer 200 for performing speech recognition on a device, other embodiments include a remote server 410 (fig. 4) that implements the speech recognizer 200 by processing audio data 202 transmitted by the user device 110 via a network and providing a transcription 204 of the audio data 202 back to the user device 110. In some additional embodiments, the user device 110 utilizes both a local speech recognizer 200 resident on the user device 110 and a server-side speech recognizer 402 (fig. 4) executing on a remote server 410. Here, the user device 110 may use the local speech recognizer 200 when a network connection is unavailable or unavailable for speech applications that are delay sensitive and/or require streaming transcription, and may utilize the server-side speech recognizer 402 when additional resources are required to improve speech recognition accuracy, as described in more detail below with reference to fig. 4.
In some examples, the user 10 interacts with a program or application 118 executing on the user device 110 using the speech recognizer 200. For example, FIG. 1 depicts user 10 in communication with an automated assistant application 118. In this example, the user (e.g., bill) 10 meets the automated assistant application 118 by speaking the utterance 12 "Good morning" captured by the audio capture device 116a and converted into corresponding audio data 202 (e.g., as an acoustic frame) for processing by the speech recognizer 200. In this example, speech recognizer 200 transcribes audio data 202 representing utterance 12 into transcription 204 (e.g., a textual representation of "morning good"). Here, the automated assistant application 118 may apply natural language processing to the transcription 204 to generate a response 119 to output to the user 10 conveying a message, "morning, beer, your calendar the first meeting today is 9:00am. (Good Morning Bill, the first meeting today on your calendar is at 9:00 am.) natural language processing generally refers to the process of interpreting a written language (e.g., transcription 204) and determining whether the written language suggests any actions. In this example, assistant application 118 uses natural language processing to recognize that utterance 12 spoken by user 10 is intended to invoke assistant application 118 to access the calendar application of user 10 and provide a response 119 indicating what time is the first meeting of user 10 today. That is, by identifying these details using natural language processing, the assistant application 118 returns the response 119 to the user 12 as a synthesized speech representation for audible output through the audio output device 116a and/or as text for display on a screen in communication with the user device 110. In some examples, user device 110 displays transcription 204 of utterance 12 spoken by user 10 and corresponding response 119 from assistant application 118 as a dialog on a screen. In some configurations, natural language processing may occur on a remote system in communication with the data processing hardware 112 of the user device 110.
In some examples, speech recognizer 200 processes incoming audio data 202 in real-time to provide streaming transcription 204. Here, speech recognizer 200 is configured to generate a sequence of hypothesized subword units of words that constitute words of utterance 12 spoken by user 10. It is assumed that a subword unit may include a word block or a single character (e.g., grapheme). In the illustrated example, the hypothesized subword unit sequence recognized by the speech recognizer includes "sos_good_moring", where 'SOS' indicates a speech start tag and each word boundary indicator ('_') indicates a start/start subword unit for each word.
Referring to fig. 2A, in some embodiments, the speech recognizer 200, 200a is configured in a two pass decoding architecture and implements a Confidence Estimation Module (CEM) 300 to estimate the confidence 302 of the final recognition result 232 predicted by the speech recognizer 200. Notably, the speech recognizer 200a utilizes a transformer re-scorer architecture to perform the second pass 208 decoding/re-scoring. Here, the final recognition result 232 corresponds to a sequence of subword units, such as word blocks or graphemes, that when aggregated together form a transcription 204 of the utterance. In general, the two-pass architecture of speech recognizer 200 includes at least one shared encoder 210, an RNN-T decoder 220, and a re-scorer decoder 230 enhanced by an acoustic encoder 250. In two-pass decoding, the second pass 208 (shown, for example, as a re-scorer decoder 230) may refine the initial output 222 from the first pass 206 (shown, for example, as an RNN-T decoder 220) using, for example, lattice re-scoring or top K reordering. In other words, the RNN-T decoder 220 generates a plurality of candidate hypotheses H as output 222, and the re-scorer decoder 230 re-scores/reorders the top K candidate hypotheses H to identify the highest scored candidate hypothesis as the final identification result 232 corresponding to the transcript 204 (fig. 1). Although it is generally discussed that the re-scorer decoder 230 functions in a re-scoring mode that re-scores the streaming hypothesis H222 from the RNN-T decoder 220, the re-scorer decoder 230 can also operate in a different mode, such as a beam search mode, depending on design or other factors (e.g., utterance length). Furthermore, although the examples herein describe the RNN-T decoder 220 performing decoding during the first utterance, the decoder 220 may similarly include other types of transducer model architectures without departing from the scope of the present disclosure. For example, instead of an RNN-T model architecture, the decoder 220 may include one of a transducer-transducer, a convolutional neural network-transducer (ConvNet-transducer), or a convolutional enhanced transducer-transducer model architecture.
The at least one shared encoder 210 is configured to receive as input audio data 202 corresponding to utterance 12 as a sequence of acoustic frames. The acoustic frames may have been previously processed by the audio subsystem 116 into parametric acoustic frames (e.g., mel frames and/or spectral frames). In some implementations, the parameterized acoustic frames correspond to log-mel filter bank energies with log-mel characteristics. For example, a parameterized input acoustic frame representing the audio data 202 input into the encoder 210 may be represented as x= (x) 1 ,...,x T ) WhereinIs the log-mel filter bank energy, T represents the number of frames in x, and d represents the number of log-mel features. In some examples, each parameterized acoustic frame includes 128-dimensional log-mel features computed within a short shift window (e.g., 32 milliseconds and shifted once every 10 milliseconds). Each feature may be stacked with previous frames (e.g., three previous frames) to form a higher-dimensional vector (e.g., 512-dimensional vectors using three previous frames). The vector-forming features may then be downsampled (e.g., to a 30 millisecond frame rate). For each acoustic frame x of audio data 202 input to the encoder 210 1:T The encoder 210 is configured to generate a corresponding shared code e s 1:T As output 212.
Although the structure of the encoder 210 may be implemented in different ways, in some embodiments, the encoder 210 includes a long-term memory (LSTM) neural network. For example, an LSTM neural network may include eight (8) LSTM layers. Here, each layer may have 2,048 hidden units, followed by a 640-dimensional projection layer. In some examples, a time reduction layer with a reduction factor of n=2 is inserted after the second LSTM layer of encoder 210.
In some configurations, encoder 210 is a shared encoder network. In other words, instead of each encoding network 206, 208 having its own separate encoder, each encoding 206, 208 shares a single encoder 210. Sharing of the encoder 210 may reduce the model size and/or reduce the computational cost of the speech recognizer 200 utilizing a two pass architecture. Here, the reduction in model size may help enable the speech recognizer 200 to run entirely on the device.
In some examples, the speech recognizer 200 of fig. 2A also includes an additional encoder, such as an acoustic encoder 250, such that for each acoustic frame x a shared code e is generated as output 212 from the shared encoder 210 s A confidence 302 estimate appropriate for the second pass 208 of the re-scorer decoder 230 and the CEM 300. Here, the acoustic encoder 250 further encodes each shared code e generated as the output 212 of the shared encoder 210 during each time step s Coding into corresponding acoustic codes e 1:T 252. In some implementations, the acoustic encoder 250 includes an LSTM encoder (e.g., a two-layer LSTM encoder) that further encodes each output 212 from the shared encoder 210 into a corresponding acoustic code e 1:T 252. Each of the number of frames in x, denoted by T, corresponds to a respective time step. By including the acoustic encoder 250, the shared encoder 210 may still be retained as a shared encoder between the first pass 206 and the second pass 208.
In some embodiments, the RNN-T decoder 220 includes a predictive network and a federated network. Here, the prediction network may have two LSTM layers of 2,048 hidden units and 640-dimensional projections per layer and an embedded layer of 128 units. The output 212 of the shared encoder 210 and the prediction network may be fed to a joint network comprising softmax prediction layers. In some examples, the joint network of RNN-T decoders 220 includes 640 hidden units, followed by a softmax layer that predicts 4,096 case-mixed word blocks.
During the first pass 206, the RNN-T decoder 220 receives the shared code e generated as output 212 from the shared encoder 210 for each acoustic frame x s As input, and generate as output 222 a plurality of candidate hypotheses H, each candidate hypothesis being composed of a respective sequence y of hypothesized subword units 1 ,y 2 ,y 3 ,…,y M And (3) representing. For example, in an example where user 10 speaks "morning good," one candidate hypothesis H may include hypothesized subword units [ _go, od, _mor, ning]And another candidate hypothesis H may include hypothesized subword units [ _ go, od, _ turn, ing]Is a second sequence of (a). Many other candidate hypotheses H are possible. Here, the corresponding sequence y of hypothesized subword units representing each candidate hypothesis H 1 ,y 2 ,y 3 ,…,y M Corresponding to the candidate transcription of utterance 12. Assume that each corresponding sequence y of subword units 1 ,y 2 ,y 3 ,…,y M Each subword unit y of (1) i Representing probability distributions over possible subunits. The subword unit with the highest probability in the probability distribution may be selected as a hypothesized subword in the respective sequence of hypothesized subword units.
Continue to take part inReferring to fig. 2A, during the second pass 208, the re-scorer decoder 230 receives a sequence e of acoustic codes e output from the acoustic encoder 250 1:T 252 and the first K candidate hypotheses H generated as outputs 222 from the RNN-T decoder 220. In one example, K is equal to four (4), such that the first four candidate hypotheses H are provided as inputs to the re-scorer decoder 230 for re-scoring during the second pass 208. For each of the first K candidate hypotheses H, the re-scorer decoder 230 is configured to re-score each subword unit, and more specifically, the corresponding sequence y of hypothesized subword units using the following equation 1 ,y 2 ,y 3 ,…,y M The probability distribution of each subword unit in (c) is re-scored.
p(y i |e，y i：i-1 ))＝Softmax(Linear(φ(i|e，y 1：i-1 ))) (1)
Where phi denotes the penultimate layer activation for the re-scorer decoder 230. From the highest second pass log probabilityCorresponding sequence y of associated hypothesized subword units 1 ,y 2 ,y 3 ,…,y M The represented candidate hypothesis H may be output as a final recognition result 232 corresponding to the transcription 204. The re-scorer decoder 230 may implement a LAS architecture with four self-attention layers, two of which contain cross-attention on the encoder.
To reduce the size of the softmax layer, the sub-word unit vocabulary of possible sub-word units is typically smaller compared to the word vocabulary. The subword unit vocabulary may include graphemes or word blocks (WP). An example WP vocabulary may include 4,096 WPs. Although examples of the present disclosure use WP as a subword unit generated as an output from a speech recognizer, graphemes can be similarly utilized as subword units output from a speech recognizer without departing from the scope of the present disclosure. Thus, in order to calculate the Word Error Rate (WER) of candidate hypothesis H, the corresponding sequence of hypothesized subword units (e.g., WP) needs to be converted into its corresponding word orderColumn w 1 ,w 2 ,...,w L . This process for converting a sequence of sub-words into a sequence of words is uniquely determined because the first sub-word unit (e.g., WP) of each word starts with a word boundary indicator ('_'). Similarly, for inclusion of Q j Word w of individual WP j Wherein y is j Q represents the qth WP of the jth word and a simple technique for calculating word confidence can be expressed as follows.
c word (wj)＝agg(c(y j，1 )，...，c(y j ，Q j )) (2)
Where agg can be an arithmetic mean, a minimum, a product or a neural network. However, due to mismatch between WP correctness and word correctness, each word w j Being able to be divided into a number of different effective WP combinations, using equation 2 to estimate word level confidence creates an undesirable computational burden during training because it is necessary to search for the one with the least WP edit over all possible reference tokenizations. As used herein, WP editing includes correct (cor) tags when the hypothesized WP matches the reference WP, replacement (sub) tags when the valid hypothesized WP does not match the reference WP, and inserts (ins) when the hypothesized WP is incorrectly identified. Table 1 below shows an example in which the word "morning" is transcribed correctly, but two substitutions are produced in the WP edit distance output.
TABLE 1
Referring to fig. 2B, in some additional embodiments, instead of the transformer re-scorer architecture of fig. 2A, the speech recognizer 200, 200B configured in the two-pass decoding architecture performs a second pass 208 of decoding/re-scoring using a interrogation (re-scoring) re-scorer architecture. The review decoder 240 represents a review re-scorer architecture and includes a speech coder 241, a hypothesis attention mechanism 244, an acoustic attention mechanism 246, and a re-scorer decoder 230. The speech recognizer 200b includes the same shared encoder 210, first pass 206RNN-T decoder 220, and acoustics as the speech recognizer 200a of fig. 2A described above And an encoder 250. In contrast to the transformer re-scorer architecture utilized by the speech recognizer 200a of FIG. 2A, the speech recognizer 200B of FIG. 2B notes acoustics by noting the output 212 of the shared encoder 210 at the acoustic attention mechanism 246 and noting one or more of the first pass candidate hypotheses H, each of which is composed of a respective sequence y of hypothesized subword units, by noting the output 222 of the RNN-T decoder 220 at the hypothesis attention mechanism 244 1 ,y 2 ,y 3 ,…,y M And (3) representing. Instead, the speech recognizer 200 of FIG. 2A notices acoustics only by noting the output 212 of the encoder 210 at the re-scorer decoder 230 itself. By noting the acoustics (e.g. denoted as shared code e s Is included) and a first pass hypothesis, the interrogation decoder 240 generates as output a final recognition result 232, which is formed by a corresponding sequence y of hypothesized subword units 1 ,y 2 ,y 3 ,…,y M Representing that the hypothesized subword unit is associated with the highest second-pass log probability re-scored by re-scorer decoder 230. Notably, each attention mechanism 244, 246 forms a context vector 245, 247 (e.g., acoustic context vector 247 and hypothetical context vector 245) that is input into the re-scorer decoder 230. A concatenation of these context vectors 245, 247 may be input to the re-scorer decoder 230. The attention mechanisms 244, 246 may each include multiple heads of attention (e.g., four heads).
With continued reference to fig. 2B, during the second pass 208, the speech encoder 241 further encodes each candidate hypothesis H generated as output 222 from the RNN-T decoder 220 into a corresponding hypothesis code H243. Thus, the language encoder 241 may encode the plurality of candidate hypotheses into a plurality of hypothesis codes h 243, and provide the plurality of hypothesis codes h 243 as input to the language cross-attention mechanism 330 (fig. 3) of the CEM 300 for estimating the confidence level of the subword unit. In this case, the corresponding hypothesis codes H encoded from the plurality of candidate hypotheses H may be concatenated into the plurality of hypothesis codes H243 without providing any location information to allow the CEM 300 to use consistency between the plurality of hypotheses in scoring the current word. In addition, the speech encoder 241 may also encode the output 222 of useful context information for inclusion in the encoding hypothesis 243. For example, the speech encoder 241 may include a bi-directional encoder capable of including context information. Structurally, the language encoder 241 may be a bi-directional LSTM (BLSTM) encoder (e.g., a layer 2 BLSTM encoder). As a BLSTM encoder, each layer of the speech encoder 241 may include 2,048 hidden units, followed by 320-dimensional projections.
The re-scorer decoder 230 receives as inputs an acoustic context vector 247, which takes care of the sequence e of acoustic codes e output from the acoustic encoder 250, and a hypothesis context vector 245 1:T 252, the hypothesis context vector notes the coding hypotheses 243 for the first K candidate hypotheses H generated as outputs 222 from the RNN-T decoder 220. For each of the first K candidate hypotheses H, the re-scorer decoder 230 re-scores each subword unit using the context vectors 245, 247, and more specifically, the respective sequence y of hypothesized subword units 1 ,y 2 ,y 3 ,…,y M The probability distribution of each subword unit in (c) is re-scored.
To address the inherent mismatch between WP correctness and word correctness produced by speech recognizer 200 outputting at WP level as depicted in table 1, embodiments herein relate to a transformer/interrogation-based CEM 300 that utilizes the confidence output at the final WP of each word as a word level confidence while ignoring the confidence of all other previous WPs of each word. Fig. 3 shows an example of a transducer/interrogation-based CEM 300 overlaid on top of a speech recognizer 200 with a two-pass architecture. For clarity, fig. 3 depicts only the actions of CEM 300, which predicts the corresponding sequence y of hypothesized WP 1 ,y 2 ,y 3 ,…,y M Confidence output c (y) i ) 302, the hypothesis WP represents the final recognition result 232 re-scored by the re-scorer decoder 230. Specifically, FIG. 3 depicts CEM 300 predictive assumptions WP [ _go, od, _mor, ning]Confidence output c ("ning") of "ning" WP in the corresponding sequence of words, which WP is converted into the corresponding word sequence "morning good". As described in more detail below, allThe dashed connection and dashed language cross-attention block 330 is only used to interrogate the CEM 300 and is not used for the transducer CEM 300.
During the first pass 206, the RNN-T decoder 220 generates as output 222 a plurality of candidate hypotheses H, each of which is formed by a respective sequence y of hypothesized subword units 1 ,y 2 ,y 3 ,…,y M And (3) representing. For example, in the example of utterance 12 "morning good," candidate hypotheses H generated as output 222 from RNN-T decoder 220 may include hypothesized subword units [ _go, od, _mor, ning]And another candidate hypothesis H may include hypothesized subword units [ _ go, od, _ turn, ing]Is a second sequence of (a). At the same time, acoustic encoder 250 generates acoustic encoding sequence e 1:T 252, where T corresponds to a plurality of acoustic frames x segmented from utterance 12.
During the second pass 208, the re-scorer decoder 230 receives the sequence e of acoustic codes e output from the acoustic encoder 250 1:T 252 and the first K candidate hypotheses H generated as outputs 222 from the RNN-T decoder 220. For each of the first K candidate hypotheses H, the re-scorer decoder 230 is configured to re-score each subword unit, and more specifically, to re-score the respective sequence p (y 1 ),p(y 2 ),p(y 3 ),…,p(y M ) The probability distribution of each subword unit in (b) is re-scored so that the linear + softmax 235 can output the highest second-pass logarithmic probabilityThe associated candidate hypothesis H serves as the final recognition result 232. Here, the final recognition result 232 includes hypothesized subword (e.g., WP) units [ sos_go, od, _mor, ning eos ] with speech start (sos) and speech end (eos) marks]Is a sequence of (a).
For a hypothesized subword (e.g., WP) unit [ sos_go, od, _mor, ning eos ] representing the final recognition result 232]Each subword unit (y) in the sequence of (a) i ) Confidence inserts b (y) i ) 301 are provided as inputs to the CEM 300 to determine the corresponding locationConfidence output c (y i ) 302. In the illustrated example, the ith subword unit corresponds to WP "ning". Here, confidence is embedded in b (y i ) 301 transmits the softmax posterior feature of the re-scorer decoder 230 using equation (1) Input word + position embedding Emb (y) i ) Features (e.g., emb (ning)), log-posterior log (p (y) i ) One or more of the first K (i) features). The softmax posterior feature indicates the internal feature of WP "ning", the internal feature e of acoustic code e 1 : T And the penultimate layer of the re-scorer decoder 230 activates phi. Logarithmic posterior logarithm (p (y) 1 ) A) feature indication and subword unit y i The probability/likelihood associated probability value of WP "ning" is included, and the first K (i) features indicate the K largest logarithmic probabilities at decoder index (e.g., time step) i. In other words, the top K (i) features provide probability values for each candidate hypothesis H of the top K at decoder index (e.g., time step) i. Since both speech recognizer 200 and CEM 300 are configured to generate output for each time step at the subword (e.g., WP) level, CEM 300 is implemented as a transformer license: (1) By using the word c in each word w ord(w j ) Confidence output c (y) j ,Q j ) As a specific word-level confidence 302, use word edit distance output as a ground truth training tag; and (2) incorporating information/features from each WP that constitutes a word. In the illustrated example, the self-attention mechanism 310 of the transformer-based CEM 300 embeds b (y) based on the confidence level of the ith subword unit corresponding to WP "ning i ) 301 and confidence embeddings of earlier subword units in the same word apply self-attention to the confidence feature vector b 312. The confidence feature vector b may be represented by the following equation.
b(y i )＝[Emb(y i )；φ(i|e，y 1：i-1 )；log(p(y i ))；top-K(i)] (3)
b＝{b(y 1 ),…,b(y i )} (4)
In additionThe acoustic cross-attention mechanism 320 of the transducer-based CEM 300 applies acoustic cross-attention (CA (e)) to the sequence e of acoustic codes e output from the acoustic encoder 250 1:T 252 to generate an acoustic context vector 322 for increasing the respective confidence output c (y) of estimating the i-th subword unit corresponding to WP "ning i ) 302 accuracy. Finally, the linear+sigmoid block 340 uses the self-attention confidence feature vector SA (b) and the cross-attention CA (e) acoustic context vector 322 to permit the transformer-based CEM 300 to use the confidence output c (y j ,Q j ) Each word c is generated as follows word (w j ) Is a specific confidence 302.
c(y i )＝σ(Transformer(CA(e)，SA(b))) (5)
cword(w j )＝c(y j ，Q j )， (6)
Wherein the word c in the example shown word The confidence 302 of (morning) corresponds to the confidence output c (ning) of the final WP of the constituent words.
In some embodiments, the speech recognizer 200 performs a second pass re-scoring with the interrogation decoder 240 of FIG. 2B to implement an interrogation-based CEM 300 that incorporates language information for a plurality of candidate hypotheses H generated as output 222 from the RNN-T decoder 220 during the first pass 206 to further improve confidence accuracy. In general, the greater the number of candidate hypotheses H shared between words, the higher the confidence that the words tend to have. For example, in the example of the utterance "morning good" of Table 1, the hypothesized subword units [ _go, od, _mor, ning of the first candidate hypothesis H that are noted to each other ]Hypothesized subword units [ _go, od, _mole, ing ] of the first sequence and second candidate hypothesis H]Will inform the cen-ters based on the objections that they cascade to the same word sequence and should therefore be mapped to similar confidence scores. Notably, since the task of the CEM 300 is to estimate the confidence 302 of each word in a known hypothesis, the cen based on the interrogation can utilize the future context of the hypothesis when scoring/estimating the current word. Except that acoustic cross-attention CA (e) is applied to the sequence e of acoustic codes e output from acoustic encoder 250 1:T 252 to generate acoustic cross-attention mechanism 320 of acoustic context vector 322, the interrogation-based CEM 300 also includes a language cross-attention mechanism 330 that applies language cross-attention (CA (h)) to a plurality of candidate hypothesis codes h 243 output from a language encoder 241 (fig. 2B) to generate a language context vector 332 for estimating confidence of a subword unit. The plurality of hypothesis codes h 243 output from the language encoder 241 of fig. 2B may be expressed as follows.
Where H is the number of candidate hypotheses noted and M H Is the number of WP in the H hypothesis. In one example, H is equal to eight (8). In one example, H is equal to one (1), thereby noting only the hypothesized code H243 associated with the final recognition result 232 for estimating the confidence of the subword unit.
In addition, when estimating the respective confidence output c (y i ) 302, the interrogation-based CEM 300 notes the sequence e of acoustic codes e by passing through an acoustic cross-attention mechanism 320 1:T 252 into the acoustic context and into the language context by noting the multiple hypothesis codes h 243 via the language cross-attention mechanism 330. Finally, the output layer 340 corresponding to the linear+sigmoid block 340 of the CEM 300 uses the self-attention confidence feature vector SA (b), the cross-attention CA (e) acoustic context vector 322, and the cross-attention CA (h) language context vector 332 to permit the interrogation-based CEM 300 to generate a confidence output c (y) for each subword WP as follows i )。
c(y i )＝σ(Transformer(CA(e)+CA(h)，SA(b))) (8)
Like the transducer-based CEM 300, the interrogation-based CEM 300 may use equation (6) to output c (y j ,Q j ) To determine each word c word (w j ) Is a specific confidence 302. In a transducer-based and interrogation-based CEM 300In both, the corresponding word sequence w can be aggregated 1:L Each word c of (a) word (w j ) To determine the speech-level confidence score 350 (fig. 4). In some examples, the aggregation includes an arithmetic mean aggregator.
The CEM 300 may be trained in conjunction with the speech recognizer 200, or the CEM 300 and speech recognizer may be trained separately from each other. In some examples, CEM 300 uses binary cross entropy word level penalty training as follows.
Wherein Table 1 shows that when the hypothesized word matches the reference word, d (w j ) In the word w j Is equal to 1 when the Levenshtein word-level edit distance output "correct" (cor) tag, and d (w) when the hypothesized word does not match the reference word j ) In the word w j The Levenshtein word-level edit distance output "insert" (ins) or "replace" (sub) tag is equal to 0. Notably, since speech recognizer 200 and CEM 300 output at the sub-word level (e.g., per WP output), table 1 also shows that CEM 300 applies a word tail mask penalty m to focus only on the final WPs that make up a word, and ignores the WP penalty associated with the earlier WPs that make up the same word.
FIG. 4 shows a schematic diagram 400 of an example confidence-based routine for selecting an appropriate speech recognizer to transcribe utterance 12. In the illustrated example, a first speech recognizer 200 (e.g., comprising the transformer re-scorer architecture of fig. 2A or the query re-scorer architecture of fig. 2B) configured in a two-pass decoding architecture is used as a default speech recognizer for generating transcription 204 by processing incoming audio data 202 corresponding to utterance 12 spoken by user 10. The first speech recognizer 200 may correspond to a local speech recognizer executing on a user device 110 associated with the user 10. The first speech recognizer 200 also implements the CEM 300 for determining a speech-level confidence score 350 for the speech recognition result 232 output by the first speech recognizer 200, the speech recognition result corresponding to the transcription 204.
In some implementations, the confidence-based routine determines whether the speech-level confidence score 350 for the utterance 12 transcribed by the first speech recognizer 200 meets a confidence threshold. In the illustrated example, the speech-level confidence score 350 that is greater than the confidence threshold meets the confidence threshold, while the speech-level confidence score 350 that is less than or equal to the confidence threshold fails to meet the confidence threshold. When the utterance level confidence score 350 meets (e.g., is greater than) the confidence threshold (e.g., decision block 450 is "yes"), then the transcription 204 generated by the first speech recognizer 200 is accepted to achieve on-device gain in quality, latency, and reliability. Here, the accepted transcription 204 may be displayed or continued to be displayed on the user device 110 and/or passed to a downstream Natural Language Understanding (NLU) module for interpreting the transcription 204 and performing related actions/operations as necessary.
When the utterance level confidence score 350 fails to meet (e.g., is less than) the confidence threshold (e.g., no at decision block 450), then the confidence-based routine rejects the transcription 204 generated by the first speech recognizer 200 and passes the audio data 202 to the second speech recognizer 402 for processing to re-transcribe the utterance 12. The transcription 204 generated by the second speech recognizer 402 may be passed back to the user equipment 110 and/or downstream NLU module for interpretation. In examples where the first speech recognizer 200 is local and executing on the device 110 and the second speech recognizer 402 is server-side and executing on the remote server 410, the confidence-based routine causes the user device 110 to transmit the audio data 202 to the remote server 410 via a network (not shown) so that the second speech recognizer 402 executing thereon can transcribe the utterance 12. The second speech recognizer 402 may utilize a large language model trained on large-scale language model training data such that the second speech recognizer 402 is better suited to recognize proper nouns or less common words that are not present in the training data used to train the first speech recognizer 200.
In some examples, the first speech recognizer 200 is generally more accurate (e.g., to a lower word error rate) when recognizing short-form utterances than the second speech recognizer 402 implementing a larger language model and dictionary, and the first speech recognizer 200 may ultimately be less accurate than the second speech recognizer 402 when recognizing long-term utterances. Thus, the confidence-based routine may send all utterances with confidence scores 350 less than the confidence threshold to the second speech recognizer 402 to generate the transcription 204, and transcribe a majority of the utterances on the device 110 using the first speech recognizer 200 for quality, latency, and reliability.
Although the second speech recognizer 402 is shown as a server-side, the second speech recognizer 402 may also be executing on a device. For example, the second speech recognizer 402 may be associated with a computationally intensive speech recognizer that may produce more accurate speech recognition results on certain utterances than the first speech recognizer 200, but at the cost of reduced latency and increased power consumption. Thus, when the speech-level confidence score associated with the recognition result generated by the first speech recognizer 200 is less than the confidence threshold, the confidence-based routine may utilize the second speech recognizer 402 to transcribe the utterance 12.
A software application (i.e., a software resource) may refer to computer software that causes a computing device to perform tasks. In some examples, a software application may be referred to as an "application," "application," or program. Example applications include, but are not limited to, system diagnostic applications, system management applications, system maintenance applications, word processing applications, spreadsheet applications, messaging applications, media streaming applications, social networking applications, and gaming applications.
The non-transitory memory may be a physical device for temporarily or permanently storing programs (e.g., sequences of instructions) or data (e.g., program state information) for use by the computing device. The non-transitory memory may be volatile and/or non-volatile addressable semiconductor memory. Examples of non-volatile memory include, but are not limited to, flash memory and read-only memory (ROM)/programmable read-only memory (PROM)/erasable programmable read-only memory (EPROM)/electrically erasable programmable read-only memory (EEPROM) (e.g., commonly used for firmware such as a boot strap). Examples of volatile memory include, but are not limited to, random Access Memory (RAM), dynamic Random Access Memory (DRAM), static Random Access Memory (SRAM), phase Change Memory (PCM), and magnetic disk or tape.
FIG. 5 is a flow chart of an example arrangement of operations of a method 500 for estimating word-level confidence of a word using only the confidence of the final hypothesized sub-word units of the word recognized by a speech recognizer. The data processing hardware 112 (fig. 1) may execute instructions stored on the memory hardware 114 (fig. 1) to perform an example arrangement of operations of the method 500. At operation 502, the method 500 includes receiving, from the speech recognizer 200, speech recognition results 232 of the utterance 12 spoken by the user 10. The speech recognizer 200 may be configured in a two pass decoding architecture as discussed above with reference to fig. 2A and 2B. Here, speech recognition result 232 is the highest scoring candidate hypothesis that is rescaled by a rescaled decoder of speech recognizer 200 and includes a sequence of hypothesized subword units that form one or more words of utterance 12, each subword unit being output from speech recognizer 200 at a corresponding output step.
Using the Confidence Estimation Module (CEM) 300, the method 500 performs operations 504, 506, 508, 510 for each subword unit in the sequence of hypothesized subword units. At operation 504, the method 500 includes obtaining respective confidence embeddings 242 that represent a set of confidence features associated with corresponding output steps when corresponding subword units are output from the speech recognizer 200. At operation 506, the method 500 includes generating a confidence feature vector SA (b) 312 using a first attentive mechanism 310 that self-attentive to the respective confidence embedment b (y) of the corresponding subword unit i ) 242 and confidence embedment b (y) obtained for any other subword unit in the sequence of hypothesized subword units continuing to correspond to the subword unit 1 )–b(y 1-i ). At operation 508, the method 500 includes generating the acoustic context vector CA (e) 322 using the second attention mechanism 320 that cross-notes the sequence e of acoustic encodings e 1:T 252, each acoustic encoding is associated with a corresponding acoustic frame x segmented from audio data 202 corresponding to utterance 12 T And (5) associating. At operation 510, the method 500 includes receiving, as input, based on an output layer of the CEM 300The confidence feature vector SA (b) and the acoustic feature vector CA (e) 322 of the corresponding subword unit are generated as output from the output layer 340 of the CEM 300 as respective confidence output scores 302.
At operation 512, for each of the one or more words formed by the hypothesized sub-word unit sequence, the method 500 includes determining a respective word-level confidence score for the word. Here, the respective word-level confidence score is equal to the respective confidence output score 302 generated for the final subword unit in the word. At operation 514, method 500 includes determining an utterance-level confidence score 350 for speech recognition result 232 by aggregating respective word-level confidence scores determined for one or more words of utterance 12.
FIG. 6 is a schematic diagram of an exemplary computing device 600 that may be used to implement the systems and methods described in this document. Computing device 600 is intended to represent various forms of digital computers, such as laptops, desktops, workstations, personal digital assistants, servers, blade servers, mainframes, and other appropriate computers. The components, connections and relationships of components, and functions of components, shown herein are meant to be exemplary only, and are not meant to limit implementations of the inventions described and/or claimed in this document.
Computing device 600 includes a processor 610, memory 620, storage 630, high-speed interface/controller 640 connected to memory 620 and high-speed expansion ports 650, and low-speed interface/controller 660 connected to low-speed bus 670 and storage 630. Each of the components 610, 620, 630, 640, 650, and 660 are interconnected using various buses, and the components may be mounted on a common motherboard or in other manners as appropriate. The processor 610 is capable of processing instructions for execution within the computing device 600, including instructions stored in the memory 620 or on the storage device 630 to display graphical information for a Graphical User Interface (GUI) on an external input/output device, such as a display 680 coupled to the high-speed interface 640. In other embodiments, multiple processors and/or multiple buses may be used, as appropriate, along with multiple memories and types of memory. In addition, multiple computing devices 600 may be connected, with each device providing portions of the necessary operations (e.g., as a server bank, a group of blade servers, or a multiprocessor system).
Memory 620 stores information non-transitory within computing device 600. Memory 620 may be a computer-readable medium, volatile memory unit(s), or non-volatile memory unit(s). Non-transitory memory 620 may be a physical device for temporarily or permanently storing programs (e.g., sequences of instructions) or data (e.g., program state information) for use by computing device 600. Examples of non-volatile memory include, but are not limited to, flash memory and read-only memory (ROM)/programmable read-only memory (PROM)/erasable programmable read-only memory (EPROM)/electrically erasable programmable read-only memory (EEPROM) (e.g., commonly used for firmware such as a boot strap). Examples of volatile memory include, but are not limited to, random Access Memory (RAM), dynamic Random Access Memory (DRAM), static Random Access Memory (SRAM), phase Change Memory (PCM), and magnetic disk or tape.
The storage device 630 is capable of providing mass storage for the computing device 600. In some implementations, the storage device 630 is a computer-readable medium. In various different embodiments, the storage device 630 may be a floppy disk device, a hard disk device, an optical disk device, or a tape device, a flash memory or other similar solid state memory device, or an array of devices, including devices in a storage area network or other configurations. In additional embodiments, the computer program product is tangibly embodied in an information carrier. The computer program product contains instructions that, when executed, perform one or more methods, such as those described above. The information carrier is a computer-or machine-readable medium, such as the memory 620, the storage device 630, or memory on processor 610.
The high-speed controller 640 manages bandwidth-intensive operations for the computing device 600, while the low-speed controller 660 manages lower bandwidth-intensive operations. This allocation of responsibilities is merely exemplary. In some embodiments, the high speed controller 640 is coupled to a memory 620, a display 680 (e.g., via a graphics processor or accelerometer), and a high speed expansion port 650 that can accept various expansion cards (not shown). In some embodiments, a low speed controller 660 is coupled to the storage device 630 and the low speed expansion port 690. The low-speed expansion port 690, which may include various communication ports (e.g., USB, bluetooth, ethernet, wireless ethernet), may be coupled to one or more input/output devices, such as a keyboard, pointing device, scanner, or networking device, such as a switch or router, for example, through a network adapter.
As shown, computing device 600 may be implemented in a number of different forms. For example, the computing device may be implemented as a standard server 600a, or multiple times in a group of such servers 600a, as a laptop computer 600b, or as part of a rack server system 600 c.
Various implementations of the systems and techniques described here can be realized in digital electronic and/or optical circuits, integrated circuits, specially designed ASICs (application specific integrated circuits), computer hardware, firmware, software, and/or combinations thereof. These various embodiments can include embodiments in one or more computer programs that are executable and/or interpretable on a programmable system including at least one programmable processor, which may be used for special or general purpose, and coupled to receive data and instructions from, and to transmit data and instructions to, a storage system, at least one input device, and at least one output device.
These computer programs (also known as programs, software applications or code) include machine instructions for a programmable processor, and may be implemented in a high-level procedural and/or object-oriented programming language, and/or in assembly/machine language. As used herein, the terms "machine-readable medium" and "computer-readable medium" refer to any computer program product, non-transitory computer-readable medium, apparatus and/or device (e.g., magnetic discs, optical disks, memory, programmable Logic Devices (PLDs)) used to provide machine instructions and/or data to a programmable processor, including a machine-readable medium that receives machine instructions as a machine-readable signal. The term "machine-readable signal" refers to any signal used to provide machine instructions and/or data to a programmable processor.
The processes and logic flows described in this specification can be performed by one or more programmable processors, also referred to as data processing hardware, executing one or more computer programs to perform functions by operating on input data and generating output. The processes and logic flows can also be performed by, and special purpose logic circuitry, e.g., an FPGA (field programmable gate array) or an ASIC (application-specific integrated circuit). Processors suitable for the execution of a computer program include, by way of example, both general and special purpose microprocessors, and any one or more processors of any kind of digital computer. Generally, a processor will receive instructions and data from a read-only memory or a random access memory or both. The essential elements of a computer are a processor for executing instructions and one or more memory devices for storing instructions and data. Typically, a computer will also include, or be operatively coupled to receive data from or transfer data to, or both, one or more mass storage devices for storing data, e.g., magnetic, magneto-optical disks, or optical disks. However, a computer does not have to have such a device. Computer readable media suitable for storing computer program instructions and data include all forms of non-volatile memory, media and memory devices, including by way of example semiconductor memory devices, e.g., EPROM, EEPROM, and flash memory devices; magnetic disks, such as internal hard disks or removable disks; magneto-optical disk; CD ROM and DVD-ROM discs. The processor and the memory can be supplemented by, or incorporated in, special purpose logic circuitry.
To provide for interaction with a user, one or more aspects of the present disclosure can be implemented on a computer having a display device (e.g., a CRT (cathode ray tube), LCD (liquid crystal display) monitor, or touch screen) for displaying information to the user and optionally a keyboard and a pointing device (e.g., a mouse or a trackball) by which the user can provide input to the computer. Other kinds of devices can also be used to provide for interaction with a user; for example, feedback provided to the user can be any form of sensory feedback, e.g., visual feedback, auditory feedback, or tactile feedback; and input generated from the user can be received in any form, including acoustic, speech, or tactile input. In addition, by sending the document to and receiving the document from the device used by the user; for example, a computer can interact with a user by sending a web page to a web browser on the user's client device in response to a request received from the web browser.
Various embodiments have been described. Nevertheless, it will be understood that various modifications may be made without departing from the spirit and scope of the disclosure. Accordingly, other implementations are within the scope of the following claims.
Claims (28)
1. A computer-implemented method (500) that, when executed on data processing hardware (112), causes the data processing hardware (112) to perform operations comprising:
receiving from a speech recognizer (200) speech recognition results (232) of an utterance (12) spoken by a user (10), the speech recognition results (232) comprising a sequence of hypothesized sub-word units forming one or more words of the utterance (12), each sub-word unit being output from the speech recognizer (200) at a corresponding output step;
using a confidence estimation module (300), for each subword unit in the sequence of hypothesized subword units:
obtaining respective confidence embeddings (242) representing a set of confidence features associated with the corresponding outputting step when outputting the corresponding subword unit from the speech recognizer (200);
generating a confidence feature vector (312) using a first attentive mechanism (310) that self-attentive to respective confidence embeddings (242) of the corresponding subword unit and the confidence embeddings (242) obtained for any other subword unit in the sequence of hypothesized subword units that continue the corresponding subword unit;
Generating an acoustic context vector (332) using a second attention mechanism (320), the second attention mechanism cross-paying attention to a sequence of acoustic encodings (252), each acoustic encoding being associated with a corresponding acoustic frame segmented from audio data (202) corresponding to the utterance (12); and
generating respective confidence output scores (302) for the corresponding subword units as output from the output layer (340) of the confidence estimation module (300) based on the confidence feature vectors (312) and acoustic feature vectors (322) received as input by the output layer (340) of the confidence estimation module (300);
for each of the one or more words formed by the sequence of hypothesized subword units, determining a respective word-level confidence score for the word that is equal to a respective confidence output score generated for the final subword unit in the word (302); and
an utterance level confidence score (350) of the speech recognition result (232) is determined by aggregating respective word level confidence scores determined for the one or more words of the utterance (12).
2. The computer-implemented method (500) of claim 1, wherein the set of confidence features represented by the respective confidence embeddings (242) comprises:
-softmax posterior features of the speech recognizer (200) at the corresponding outputting step; and
and embedding the features into the subwords of the corresponding subword units.
3. The computer-implemented method (500) of claim 1 or 2, wherein the set of confidence features represented by the respective confidence embedment (242) further comprises:
a log-a-posteriori log feature indicative of a probability value associated with a probability/likelihood of the corresponding subword unit output from the speech recognizer (200) at the corresponding outputting step; and
-top K features indicating K maximum logarithmic probabilities at the corresponding output step of top K candidate hypotheses re-scored by the speech recognizer (200), each represented by a sequence of respective hypothesized subword units of one or more words forming the utterance (12).
4. A computer-implemented method (500) according to any of claims 1 to 3, wherein the subword unit comprises a word block.
5. The computer-implemented method (500) of any of claims 1 to 4, wherein the subword unit comprises a grapheme.
6. The computer-implemented method (500) of any of claims 1 to 5, wherein the speech recognizer (200) comprises:
A transducer decoder model (220) configured to generate a plurality of candidate hypotheses during a first pass (206), each candidate hypothesis corresponding to a candidate transcription of the utterance (12) and represented by a sequence of respective hypothesis subword units; and
a re-scorer decoder model (230) configured to re-score the first K candidate hypotheses of the plurality of candidate hypotheses generated by the transducer decoder model during the first pass (208),
wherein the candidate hypothesis of the top K candidate hypotheses re-scored by the re-scorer decoder model (230) is output from the re-scorer decoder model (230) as the speech recognition result (232) of the utterance (12) spoken by the user (10), the candidate hypothesis being represented by a sequence of respective hypothesized subword units associated with a highest second-pass logarithmic probability.
7. The computer-implemented method (500) of claim 6, wherein:
the transducer decoder model (220) includes a recurrent neural network-transducer (RNN-T) model architecture; and
the re-scorer decoder model (230) includes a listen, attention, and spelling (LAS) model architecture.
8. The computer-implemented method (500) of claim 6 or 7, wherein the operations further comprise:
generating a plurality of hypothesis codes (243) during the second pass (208) using a speech encoder (241) of the speech recognizer (200) by encoding each of the plurality of candidate hypotheses generated by the transducer decoder model (220) during the first pass (206); and
using the confidence estimation module (300), for each subword unit in the sequence of hypothesized subword units, generating a language context vector (332) using a third attention mechanism that cross-notes the plurality of hypothesized encodings (243),
wherein generating respective confidence output scores (302) for the corresponding subword units is further based on the language context vector (332) received as input by the output layer (340) of the confidence estimation module (300).
9. The computer-implemented method (500) of claim 8, wherein:
encoding each of the plurality of candidate hypotheses includes bi-directionally encoding each candidate hypothesis into a corresponding hypothesis code; and
the plurality of hypothesis codes is generated by concatenating each corresponding hypothesis code (243).
10. The computer-implemented method (500) of any of claims 1 to 9, wherein the speech recognizer (200) and the confidence estimation module (300) are trained jointly.
11. The computer-implemented method (500) of any of claims 1 to 10, wherein the speech recognizer (200) and the confidence estimation module (300) are trained separately.
12. The computer-implemented method (500) of any of claims 1 to 11, wherein the confidence estimation model (300) is trained using binary cross entropy loss based on features associated with the speech recognizer (200).
13. The computer-implemented method (500) of any of claims 1 to 12, wherein the operations further comprise:
determining whether the speech-level confidence score (350) of the speech recognition result (232) meets a confidence threshold; and
when the speech-level confidence score (350) of the speech recognition result (232) fails to meet the confidence threshold, audio data (202) corresponding to the utterance (12) is transmitted to another speech recognizer (402), the other speech recognizer (402) configured to process the audio data (202) to generate a transcription (204) of the utterance (12).
14. The computer-implemented method of claim 13, wherein:
the speech recognizer (200) and the confidence estimation module (300) execute on a user computing device (110); and
the further speech recognizer (402) is executed on a remote server (410) in communication with the user computing device (110) via a network.
15. A system (100) comprising:
data processing hardware (112); and
memory hardware (114) in communication with the data processing hardware (112) and storing instructions that, when executed on the data processing hardware (112), cause the data processing hardware (112) to perform operations comprising:
receiving from a speech recognizer (200) speech recognition results (232) of an utterance (12) spoken by a user (10), the speech recognition results (232) comprising a sequence of hypothesized sub-word units forming one or more words of the utterance (12), each sub-word unit being output from the speech recognizer (200) at a corresponding output step;
using a confidence estimation module (300), for each subword unit in the sequence of hypothesized subword units:
obtaining respective confidence embeddings (242) representing a set of confidence features associated with the corresponding outputting step when outputting the corresponding subword unit from the speech recognizer (200);
Generating a confidence feature vector (312) using a first attentive mechanism (310) that self-attentive to respective confidence embeddings (242) of the corresponding subword unit and the confidence embeddings (242) obtained for any other subword unit in the sequence of hypothesized subword units that continue the corresponding subword unit;
generating an acoustic context vector (332) using a second attention mechanism (320), the second attention mechanism cross-paying attention to a sequence of acoustic encodings (252), each acoustic encoding being associated with a corresponding acoustic frame segmented from audio data (202) corresponding to the utterance (12); and
generating respective confidence output scores (302) for the corresponding subword units as output from the output layer (340) of the confidence estimation module (300) based on the confidence feature vectors (312) and acoustic feature vectors (322) received as input by the output layer (340) of the confidence estimation module (300);
for each of the one or more words formed by the sequence of hypothesized subword units, determining a respective word-level confidence score for the word that is equal to a respective confidence output score generated for the final subword unit in the word (302); and
An utterance level confidence score (350) of the speech recognition result (232) is determined by aggregating respective word level confidence scores determined for the one or more words of the utterance (12).
16. The system (100) of claim 15, wherein the set of confidence features represented by the respective confidence embedment (242) includes:
-softmax posterior features of the speech recognizer (200) at the corresponding outputting step; and
and embedding the features into the subwords of the corresponding subword units.
17. The system (100) of claim 15 or 16, wherein the set of confidence features represented by the respective confidence embedment (242) further comprises:
a log-a-posteriori log feature indicative of a probability value associated with a probability/likelihood of the corresponding subword unit output from the speech recognizer (200) at the corresponding outputting step; and
top K features indicating K maximum log probabilities at the corresponding outputting step of top K candidate hypotheses re-scored by the speech recognizer (200), each represented by a sequence of respective hypothesized subword units of one or more words forming the utterance.
18. The system (100) of any of claims 15 to 17, wherein the subword unit comprises a word block.
19. The system (100) according to any one of claims 15 to 18, wherein the subword unit comprises graphemes.
20. The system (100) according to any one of claims 15 to 19, wherein the speech recognizer (200) comprises:
a transducer decoder model (220) configured to generate a plurality of candidate hypotheses during a first pass (206), each candidate hypothesis corresponding to a candidate transcription of the utterance (12) and represented by a sequence of respective hypothesis subword units; and
a re-scorer decoder model (230) configured to re-score the first K candidate hypotheses of the plurality of candidate hypotheses generated by the transducer decoder model during the first pass (208),
wherein the candidate hypothesis of the top K candidate hypotheses re-scored by the re-scorer decoder model (230) is output from the re-scorer decoder model (230) as the speech recognition result (232) of the utterance (12) spoken by the user (10), the candidate hypothesis being represented by a sequence of respective hypothesized subword units associated with a highest second-pass logarithmic probability.
21. The system (100) of claim 20, wherein:
the transducer decoder model (220) includes a recurrent neural network-transducer (RNN-T) model architecture; and
the re-scorer decoder model (230) includes a listen, attention, and spelling (LAS) model architecture.
22. The system (100) of claim 20 or 21, wherein the operations further comprise:
generating a plurality of hypothesis codes (243) during the second pass (208) using a speech encoder (241) of the speech recognizer (200) by encoding each of the plurality of candidate hypotheses generated by the transducer decoder model (220) during the first pass (206); and
using the confidence estimation module (300), for each subword unit in the sequence of hypothesized subword units, generating a language context vector (332) using a third attention mechanism that cross-notes the plurality of hypothesized encodings (243),
wherein generating respective confidence output scores for the corresponding subword units is further based on the language context vector received as input by the output layer of the confidence estimation module.
23. The system (100) of claim 22, wherein:
Encoding each of the plurality of candidate hypotheses includes bi-directionally encoding each candidate hypothesis into a corresponding hypothesis code; and
the plurality of hypothesis codes is generated by concatenating each corresponding hypothesis code (243).
24. The system (100) according to any one of claims 15 to 23, wherein the speech recognizer (200) and the confidence estimation module (300) are trained jointly.
25. The system (100) according to any one of claims 15 to 24, wherein the speech recognizer (200) and the confidence estimation module (300) are trained separately.
26. The system (100) according to any one of claims 15 to 25, wherein the confidence estimation model (300) is trained using binary cross entropy loss based on features associated with the speech recognizer (200).
27. The system (100) of any one of claims 15 to 26, wherein the operations further comprise:
determining whether the speech-level confidence score (350) of the speech recognition result (232) meets a confidence threshold; and
when the speech-level confidence score (350) of the speech recognition result (232) fails to meet the confidence threshold, audio data (202) corresponding to the utterance (12) is transmitted to another speech recognizer (402), the other speech recognizer (402) configured to process the audio data (202) to generate a transcription (204) of the utterance (12).
28. The system according to claim 27, wherein:
the speech recognizer (200) and the confidence estimation module (300) execute on a user computing device (110); and
the further speech recognizer (402) is executed on a remote server (410) in communication with the user computing device (110) via a network.
Applications Claiming Priority (3)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US17/182,592 US11610586B2 (en) | 2021-02-23 | 2021-02-23 | Learning word-level confidence for subword end-to-end automatic speech recognition |
US17/182,592 | 2021-02-23 | ||
PCT/US2022/017534 WO2022182769A1 (en) | 2021-02-23 | 2022-02-23 | Learning word-level confidence for subword end-to-end automatic speech recognition |
Publications (1)
Publication Number | Publication Date |
---|---|
CN116888662A true CN116888662A (en) | 2023-10-13 |
Family
ID=80739076
Family Applications (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
CN202280015500.5A Pending CN116888662A (en) | 2021-02-23 | 2022-02-23 | Learning word level confidence for end-to-end automatic speech recognition of subwords |
Country Status (6)
Country | Link |
---|---|
US (1) | US11610586B2 (en) |
EP (1) | EP4292081A1 (en) |
JP (1) | JP7436760B1 (en) |
KR (1) | KR20230147685A (en) |
CN (1) | CN116888662A (en) |
WO (1) | WO2022182769A1 (en) |
Families Citing this family (6)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
EP4200717A2 (en) | 2020-08-24 | 2023-06-28 | Unlikely Artificial Intelligence Limited | A computer implemented method for the automated analysis or use of data |
KR102637025B1 (en) * | 2021-03-26 | 2024-02-16 | 구글 엘엘씨 | Multilingual rescoring models for automatic speech recognition |
US11710479B1 (en) * | 2021-03-31 | 2023-07-25 | Amazon Technologies, Inc. | Contextual biasing of neural language models using metadata from a natural language understanding component and embedded recent history |
US11915690B1 (en) * | 2021-06-17 | 2024-02-27 | Amazon Technologies, Inc. | Automatic speech recognition |
US11977854B2 (en) * | 2021-08-24 | 2024-05-07 | Unlikely Artificial Intelligence Limited | Computer implemented methods for the automated analysis or use of data, including use of a large language model |
CN116453507B (en) * | 2023-02-21 | 2023-09-08 | 北京数美时代科技有限公司 | Confidence model-based voice recognition optimization method, system and storage medium |
Family Cites Families (3)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
JP2009116107A (en) | 2007-11-07 | 2009-05-28 | Canon Inc | Information processing device and method |
US9117453B2 (en) * | 2009-12-31 | 2015-08-25 | Volt Delta Resources, Llc | Method and system for processing parallel context dependent speech recognition results from a single utterance utilizing a context database |
CN112242144A (en) | 2019-07-17 | 2021-01-19 | 百度在线网络技术（北京）有限公司 | Voice recognition decoding method, device and equipment based on streaming attention model and computer readable storage medium |
-
2021
- 2021-02-23 US US17/182,592 patent/US11610586B2/en active Active
-
2022
- 2022-02-23 JP JP2023550664A patent/JP7436760B1/en active Active
- 2022-02-23 WO PCT/US2022/017534 patent/WO2022182769A1/en active Application Filing
- 2022-02-23 KR KR1020237032091A patent/KR20230147685A/en unknown
- 2022-02-23 EP EP22710232.4A patent/EP4292081A1/en active Pending
- 2022-02-23 CN CN202280015500.5A patent/CN116888662A/en active Pending
Also Published As
Publication number | Publication date |
---|---|
KR20230147685A (en) | 2023-10-23 |
JP7436760B1 (en) | 2024-02-22 |
US11610586B2 (en) | 2023-03-21 |
JP2024509515A (en) | 2024-03-04 |
US20220270597A1 (en) | 2022-08-25 |
EP4292081A1 (en) | 2023-12-20 |
WO2022182769A1 (en) | 2022-09-01 |
Similar Documents
Publication | Publication Date | Title |
---|---|---|
US11610586B2 (en) | Learning word-level confidence for subword end-to-end automatic speech recognition | |
US11908461B2 (en) | Deliberation model-based two-pass end-to-end speech recognition | |
EP4078572B1 (en) | Proper noun recognition in end-to-end speech recognition | |
CN116250038A (en) | Transducer of converter: unified streaming and non-streaming speech recognition model | |
US20230186901A1 (en) | Attention-Based Joint Acoustic and Text On-Device End-to-End Model | |
US20220310080A1 (en) | Multi-Task Learning for End-To-End Automated Speech Recognition Confidence and Deletion Estimation | |
US20240029720A1 (en) | Context-aware Neural Confidence Estimation for Rare Word Speech Recognition | |
US11580956B2 (en) | Emitting word timings with end-to-end models | |
US20230298563A1 (en) | Deliberation by Text-Only and Semi-Supervised Training | |
US20230107695A1 (en) | Fusion of Acoustic and Text Representations in RNN-T |
Legal Events
Date | Code | Title | Description |
---|---|---|---|
PB01 | Publication | ||
PB01 | Publication | ||
SE01 | Entry into force of request for substantive examination | ||
SE01 | Entry into force of request for substantive examination |