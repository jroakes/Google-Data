US8037068B2 - Searching through content which is accessible through web-based forms - Google Patents
Searching through content which is accessible through web-based forms Download PDFInfo
- Publication number
- US8037068B2 US8037068B2 US11/399,568 US39956806A US8037068B2 US 8037068 B2 US8037068 B2 US 8037068B2 US 39956806 A US39956806 A US 39956806A US 8037068 B2 US8037068 B2 US 8037068B2
- Authority
- US
- United States
- Prior art keywords
- web
- query
- forms
- interest
- score
- Prior art date
- Legal status (The legal status is an assumption and is not a legal conclusion. Google has not performed a legal analysis and makes no representation as to the accuracy of the status listed.)
- Active, expires
Links
Images
Classifications
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F40/00—Handling natural language data
- G06F40/10—Text processing
- G06F40/166—Editing, e.g. inserting or deleting
- G06F40/174—Form filling; Merging
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F16/00—Information retrieval; Database structures therefor; File system structures therefor
- G06F16/30—Information retrieval; Database structures therefor; File system structures therefor of unstructured textual data
- G06F16/33—Querying
- G06F16/3331—Query processing
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F16/00—Information retrieval; Database structures therefor; File system structures therefor
- G06F16/90—Details of database functions independent of the retrieved data types
- G06F16/95—Retrieval from the web
- G06F16/951—Indexing; Web crawling techniques
Definitions
- the present invention relates to techniques for performing searches through content on web sites. More specifically, the present invention relates to a method and an apparatus that facilitates searching through content which is not directly available on web pages, but is instead accessible though queries entered into web-based forms.
- a user typically accesses this type of data by filling in input fields in a web-based form.
- This causes a corresponding database query to be generated based on the values contained in the input fields, and the database query is submitted to an underlying database.
- This query causes data to be returned, and this data is typically displayed to a user.
- a web-based form for local property tax records can accept an address in a set of input fields and can output a corresponding property tax record for the address.
- a web-based form for a chain of coffee shops can accept a city name or a postal code in a set of input fields and in response can display the locations of nearby coffee shops.
- One embodiment of the present invention provides a system that facilitates crawling through web-based forms to gather information to facilitate subsequent searches through content which is accessible though the web-based forms.
- the system first obtains web-based forms to be searched.
- the system can obtain these web-based forms from a number of sources. For example, the system can crawl through web sites to identify web-based forms, the system can receive manually provided web-based forms, or the system can find web-based forms through methods other than crawling.
- the system creates database entries for the identified forms. This involves obtaining and storing metadata describing the identified forms into database entries and then storing these database entries in a form database to facilitate searches through content which is accessible through the identified forms.
- this form database can include a web index and associated documents, which can be used to facilitate web search queries that return both ordinary documents and documents that result from form queries.
- obtaining the web-based forms to be searched involves manually or automatically filtering out other web-based forms, which are not to be searched.
- the system additionally extracts content from a given form, and stores the extracted content to facilitate subsequent searches through the content.
- extracting the content from the given form involves accessing the given form through a Uniform Resource Locator (URL) which contains a GET-string that extracts the content from the given form.
- URL Uniform Resource Locator
- extracting the content from the given form involves: generating constants to be inputted into the given form; using the constants to fill input fields of the given form; extracting the content from associated output fields of the given form; and storing the content in the form database to facilitate subsequent queries involving the content.
- extracting and storing the content from the given form involves: obtaining constants associated with a given field of the given form from a drop-down menu associated with the given field; and storing the constants, whereby the constants can be subsequently used as inputs to the given field or as inputs to similar fields in other forms during subsequent query operations.
- obtaining metadata about an identified form involves obtaining information related to the source of the identified form. This can involve identifying: a class of the source; a geographic location most relevant to the source; and/or a page-rank of the source.
- obtaining metadata about an identified form involves identifying: a class of the identified form; a geographic location which is most relevant to objects retrieved from the identified form; fields of the identified form; required input fields or required combinations of input fields for the identified form; and/or mappings between fields of the identified form and associated class properties.
- a given form generates values for output fields by: forming a database query from constants received through input fields of the given form; sending the database query to a database system; receiving a response from the database system; and outputting data returned in the response through output fields of the given form.
- One embodiment of the present invention provides a system that facilitates searching through content which is accessible though web-based forms.
- the system receives a query containing keywords.
- the system analyzes the query to create a structured query.
- the system then performs a lookup based on the structured query in a database containing entries describing the web-based forms.
- the system ranks forms returned by the lookup, and uses the rankings and associated database entries to facilitate a search through content which is accessible through the forms.
- the system while analyzing the query to create the structured query, the system first predicts a search-ontology class for the query based on keywords in the query. The system then constructs the structured query by mapping keywords in the query to properties of the predicted search-ontology class.
- facilitating the search involves facilitating a search through one or more forms of interest, which were identified during the ranking process.
- facilitating the search through the one or more forms of interest involves presenting a highly-ranked form to a user through a “one-box” displayed prominently within a user interface.
- the system while facilitating the search through the one or more forms of interest, the system first presents a user with query-through links to the one or more forms of interest. The system then allows the user to click on a query-though link which automatically causes a corresponding query to be submitted to an associated form of interest.
- the system while presenting the user with a query-through link to a form of interest, the system first maps keywords from the query to input fields in the form of interest. Next, the system constructs a query-though link based on the mappings, which contains an invocation string to be submitted to the form of interest. The system then presents the query-through link to the user.
- facilitating the search through the content involves searching through a local database containing content which was previously extracted from the forms during a preceding web-crawling process.
- ranking a form involves considering: an approximate page-rank score reflecting the number of incoming links to a web page associated with the form; a keyword score reflecting the relevance of text associated with a web page associated with the form; an ontology score which captures the relevance of a search ontology class selected for the query to a web page associated with the form; a form score which captures the ability of the form to answer the query; and/or a location score which captures the distance from the most relevant location for a web page associated with the form from locations detected in the query.
- FIG. 1 illustrates a form engine which facilitates the process of searching through web-based forms in accordance with an embodiment of the present invention.
- FIG. 2 illustrates the structure of a form engine in accordance with an embodiment of the present invention.
- FIG. 3 illustrates entries contained in a form database in accordance with an embodiment of the present invention.
- FIG. 4 presents a flow chart illustrating the process of crawling through web pages to gather information related to web-based forms in accordance with an embodiment of the present invention.
- FIG. 5 presents a flow chart illustrating the process of retrieving pages from a form in accordance with an embodiment of the present invention.
- FIG. 6 presents a flow chart illustrating the process of searching through content which is accessible through web-based forms in accordance with an embodiment of the present invention.
- a computer-readable storage medium which may be any device or medium that can store code and/or data for use by a computer system. This includes, but is not limited to, magnetic and optical storage devices such as disk drives, magnetic tape, CDs (compact discs), DVDs (digital versatile discs or digital video discs), or any device capable of storing data usable by a computer system.
- FIG. 1 illustrates a form engine 106 which facilitates searching through web-based forms in accordance with an embodiment of the present invention.
- Form engine 106 can generally exist on any computing device which is accessible through network 110 .
- This computing device can include any type of computing device, including, but not limited to, a computing device based on a microprocessor, a mainframe computer, a digital signal processor, a portable computing device, a personal organizer, a device controller, and a computational engine within an appliance.
- Network 110 can generally include any type of wired or wireless communication channel capable of coupling together computing nodes. This includes, but is not limited to, a local area network, a wide area network, or a combination of networks. In one embodiment of the present invention, network 110 includes the Internet.
- form engine 106 accesses a number of forms 121 - 123 which are hosted on servers located throughout network 110 . These forms 121 - 123 can be used to access to data within underlying databases 131 - 133 .
- form engine 106 first obtains web-based forms of interest, and then creates corresponding database entries for the identified forms in an associated form database 107 .
- the system can obtain these web-based forms from a number of sources. For example, the system can crawl through web sites to identify web-based forms, the system can receive manually provided web-based forms, or the system can find web-based forms through methods other than crawling.
- form database 107 is used by form engine 106 to facilitate searches through content which is accessible through the web-based forms which are cataloged within form database 107 . More specifically, a user 102 operating a client 104 can send a query 108 containing keywords to form engine 106 . In response to query 108 , form engine 106 uses information within form database 107 to perform a search through content which is accessible through forms 121 - 123 . Note that form database 107 can include a web index and associated documents, which can be used to facilitate web search queries that return both ordinary documents and documents that were obtained from form queries.
- FIG. 2 presents an overview of form engine 106 (which is also referred to as a “deep-web search query engine”) in accordance with an embodiment of the present invention.
- form engine 106 includes a set of tools that facilitate constructing a search engine for the “deep web.”
- the deep web refers to the part of the web that hides behind forms and is therefore not accessible to traditional search engines.
- the tools include: a query engine 202 ; a web-form database 204 ; and a web crawler 206 (which includes form analyzer).
- web crawler 206 first obtains web-based forms of interest, and stores corresponding form-related information for the web-based forms of interest in web-form database 204 .
- query engine 202 accesses this form-related information from web-form database 204 to facilitate subsequent searching operations through content which is accessible through the web-based forms.
- the database describes web sources in terms of an ontology of classes and properties, which is referred to as the “search ontology” (SO).
- SO search ontology
- the classes and properties are referred to as “SO-classes” and “SO-properties,” respectively.
- the SO-classes form a hierarchy (not necessarily a tree, but a directed acyclic graph).
- the SO-properties have domains (the classes in the ontology they refer to), and ranges (either data types or other classes in the ontology).
- any knowledge-base editing tool can be used to create the ontology.
- the SO is exported into a Web Ontology Language (OWL) file.
- OWL Web Ontology Language
- the database has a distinct data “source” or each web page (identified by its URL) is a data source. (Note that the terms “web page,” “data source” and “web source” are used interchangeably in this document.)
- the database captures at least some of the following aspects of each source:
- a set of candidate web sources is collected and processed as described below to predict the database attributes associated with each source.
- the result of this processing can be shown to a human annotator who can certify the database contents and can change them if necessary. Note that it does not matter where the candidate sources are obtained from.
- a special set of crawlers that discover content which is especially appropriate for the engine is described below.
- the first step in processing a web source is to locate the forms in the source and to extract the text corresponding to the fields in the form.
- the web source is subsequently classified into the ontology classes.
- the class of the source is being classified, not the objects found in a form in the source.
- a TF/IDF text classifier is employed.
- each web page is represented as a word vector with each word having its weight set as the product of term frequency (number of occurrence on the page) and its inverse document frequency (1/log(1+number of pages with the word)). The weights are all normalized such that the word vector is of unit length.
- the mean word vector mv(c i ) is computed for each search class c i .
- the cosine measure between its word vector and the mean vector for each of the search classes can be computed.
- the search classes with the three highest values for the cosine measure are chosen as candidate search class matches. Note that the contents of a web page can first be pre-processed to remove any stop words and to stem all possible words.
- the forms on the page are classified into the classes in the ontology.
- This classification attempts to predict which kinds of objects would be found in the database queried by the form. Note that this is quite different than classifying the form itself, and that the context of the page may or may not provide good predictive power about the classification.
- the words on the site are typically very indicative of the content of the database.
- TF/IDF classifier Two word vectors are computed for each web form: a word vector for the entire web page (same as for the web page classifier), and a word vector for the form that includes just the words that appear in the form and just before and after the form. Furthermore, two separate classifiers are trained using the labeled training data. Note that this training in done for both the classifiers on the labels of the form, and not the page. Moreover, note that these labels are different from those used by the web page classifier. When classifying new forms, both trained classifiers are applied on the form contents. Their results are combined based on the number of forms on the same web page.
- required input fields and output fields are predicted based on past experience. For each class in the ontology, we look at previously annotated sites and find which fields have been marked as required or output. In various embodiments, there may be several clusters of possible output fields, and these clusters may be mined, and displayed to the user so that the user may make a selection.
- a mapping between the fields in the form and the SO-properties of the SO-classes that the form had been mapped to is predicted.
- This can involve employing an LSD-like multi-strategy approach for predicting field to property mappings. (For more information on LSD, see A. Doan, P. Domingos, and A. Levy, “Reconciling Schemas of Disparate Data Sources: A Machine-Learning Approach,” SIGMOD 2001, pp. 509-520.)
- each SO-class can be treated as a separate field-matching problem: the mediated schema has the SO-properties of that class.
- each web form is a source schema, and example mappings are provided where the fields of the web form are matched to properties of the search class.
- This labeled training data is used to train a variety of base classifiers and also a meta-classifier that combines the predictions of the different base classifiers.
- the different base classifiers we can use include: (a) an internal name matcher that uses edit distance to compare parameter names of the fields, (b) a visible text matcher that uses TFIDF to compare the text that can be easily associated with each visible field, (c) an instance matcher that uses TFIDF to compare the text in the different options for a field value, e.g. for a select box or radio button.
- the meta-classifier library in the WekaTM toolkit which is similar to the technique used in LSD, can be used to learn a separate combination hypothesis for each field.
- the trained base and meta-classifiers can be used to compute similarities between each web form fields and search class properties.
- a constraint-solving mechanism is used to output the specific matches.
- the match selection can be modeled as a cost minimization process, wherein the cost of selecting a particular set of matches is dependent on the similarities estimated between the elements in the chosen matches.
- desirable properties of the mappings can be encoded as costs and included as part of the minimization process, e.g. a penalty cost of mapping more than one field to the same SO-property.
- This cost minimization may be performed using a randomized technique.
- the process can start with a random assignment. Then, one element (web form field or SO-property) can be considered at a time and the system can try to match it with the best possible candidate element in the other schema (given the mappings for the rest of the elements in web form and SO-class) so as to minimize/reduce the cost of the mapping. Note that the definition of “best possible candidate” may be implementation dependent. This process continues until the mapping converges or until a fixed number of iterations occur.
- a web-page classifier can be used to predict the SO-class for the source.
- a web-form classifier can be used to identify the top candidate SO-classes for each web form on the web page.
- the form-field-to-SO-property matcher can be invoked to compute similarities between the fields on the web form and the properties of the search class.
- a constraint satisfaction module can then be invoked to pick the particular field-to-SO-property matches.
- the most likely country or state, and within it the most likely city are also predicted.
- a two-level hierarchy of locations is considered: the first level includes all the countries of the world (except the U.S.) and the states in the U.S., and the second level includes cities.
- city names are unique within each country or U.S. state. For ease of understanding, in the discussion below, sometimes only states are referred to, but the same holds true for countries as well, unless otherwise mentioned.
- the location prediction may be done as follows. First, for each country or U.S. state, its location score is computed:
- L ⁇ ( s i ) ⁇ w j ⁇ L s ⁇ ( w j , s i ) .
- each word w j in the web page text contributes L s (w j , s i ), a measure of the likelihood that it represents a location in the country or state s i .
- the most likely state is the one with the highest location score, provided the score is greater than a threshold t L . No state is predicted if none of the scores are greater than t L .
- Each score L s (w j , s i ) contributed by each word is computed as one of the following:
- the population score popl(w, s) can be defined as follows:
- the IDF score can vary from 1.5 to 0 depending on the frequency of the word.
- each word can correspond to multiple locations, e.g., cities in different states and countries. In this case, such a word contributes to the location score of each of the states or countries.
- the case of state and city names consisting of multiple words is also handled.
- the web page text is first pre-processed to identify all such multi-word location names which are then treated as single words.
- lexical or grammatical analysis of the text on the web page may also be performed.
- the location scores for each city within it is computed by using the criteria (b) and (c) in the above list.
- a city is predicted if its score is more than 0.3 of the state/country location score.
- the predicted locations are WASHINGTON State and SEATTLE, while for the Yahoo main page no locations are predicted.
- Web sites typically support query interfaces on multiple web pages which enable access to data in different sources.
- the New York Times has web forms for the weather and classifieds in the New York region, stock tickers for the different stock exchanges, etc.
- the site crawler explores such a web site (a domain like nytimes.com for the New York Times) to discover all such available web forms.
- the site crawler pursues hyperlinks recursively starting from a seed page (e.g., the main page of the web site). In addition, it can perform two operations for discovering web forms.
- a seed page e.g., the main page of the web site.
- the filtering of web forms may be done in a semi-automatic fashion.
- Classifiers are employed to predict the utility of each form (i.e., should the form be considered or ignored). These classifiers are trained from manually-supplied training data.
- Each web form has a utility score that is the score reported by the classifier.
- the web pages on each web site can be ranked in decreasing order of the scores of their forms. A user may be requested to scan this list to identify the most useful ones while the rest are ignored.
- Two web forms are considered to be identical if they invoke the same method and use exactly the same parameter values.
- the forms on each page are compared against already extracted forms and are eliminated if an identical form already exists.
- the crawler also determines which of the multiple occurrences of a web form have to be retained as the principal instance. For example, weather reports are available both from the “cnn.com” and “money.cnn.com sites,” but “money.cnn.com” might be the more suitable one.
- simple heuristics are used to make this selection: (a) larger domain names (with the same suffix, e.g., money.cnn.com as opposed to cnn.com) typically refer to more-specific web sites and hence are preferred, while (b) smaller path names refer to more authoritative pages and are hence preferred.
- Web forms on a web page can often refer to methods in different domains (e.g., the auto sales form on New York Times is redirected to a method on cars.com). These references indicate the importance of the referenced source and are recorded separately for the ranking process. In various embodiments, they are not reconciled since they typically have different parameter values (with information specific to the referring web site).
- the query analyzer can be adapted to consider keyword queries from a user and to predict the SO-class in the ontology that is most relevant to the query. During this process, a structured query is also constructed from the user query.
- three types of prediction can be used to predict the most likely search class for each query: (1) word-based prediction; (2) property-based prediction; and (3) feedback-based prediction. These types of prediction are described in more detail below.
- Words are often strongly correlated with specific SO-classes and this correlation can be used a basis for class prediction.
- a na ⁇ ve-Bayes-like scheme augmented with feature selection, can be employed.
- the predicted class is the one that is most likely to generate the words in the search query. For example, if the user query is w 1 w 2 . . . w n , then
- the marginal probability of each word is given by the expression:
- Feature Selection Sece a small amount of training data is employed, in order to avoid over-fitting, in various embodiments, only those words that are discriminative enough are used. In various embodiments, the ability of a word to discriminate between SO-classes can be measured by its entropy:
- H ⁇ ( w j ) - ⁇ C i ⁇ P ⁇ ( w j
- C i ) are normalized so that they sum to 1. All the words are sorted by their entropies and only the ones that are greater than a particular threshold are included. Furthermore, in various embodiments, (a) only words that have appeared in at least N different pages in total (typically 10-15), are considered, (b) only the top 10 classes for each word while computing the entropy are considered, and (c) probabilities for the non-top 10 classes are set to be equal to that of the 10th search class.
- feature selection may be performed via Mutual Information and the Fisher Discriminant.
- property recognizers are employed to identify interesting constants in user queries.
- SO-classes can be predicted based on the properties recognized.
- the most likely class may be the one that is most likely to generate the recognized property values in the user query (e.g., Acura is the name of a car make and Integra is the name of a car model, and hence the query “used Acura Integra” is most likely referring to Cars).
- the following expression is used to determine the most likely class:
- V k arg ⁇ ⁇ max C i ⁇ ⁇ sigmoid ( ⁇ V k ⁇ PS ⁇ ⁇ k ⁇ ⁇ ⁇ ( V k , C i ) ⁇ ⁇ ⁇ ( w j ⁇ V k ) ) .
- PS is the set of all property recognizers
- V k is the k-th recognizer
- ⁇ is a indicator function that is equal to 1 if the recognizer V k recognizes a property of the class C i (and 0 otherwise)
- ⁇ k is the weight or relevance of V k .
- each recognizer is trained to recognize examples of a particular set of search class properties and estimates a confidence score ⁇ that a word (or sequence of words) is an instance of the trained property.
- the score for each class is obtained by normalizing the probabilities for the various search classes to sum to one.
- one or more of the following recognizers can be employed:
- the recognizer weights are set such that multiple properties may be recognized for a search class to be successfully detected. Many of the recognizers return confidence scores ( ⁇ ) that are proportional to the IDF score (defined earlier). This enables words that occur rarely to be a unique representation of one class as opposed to others that occur frequently.
- each word in it can potentially be the name of a location.
- this module is adapted to identify the words in a phrase that most likely are the name of some location and the most likely single location referred to by that name.
- a probabilistic labeling scheme is employed.
- the word w is the name of some location (city, state, or country). In general, there can be more than one geographic location with that name (e.g., there are many cities in the U.S. with the name Paris, though the most famous one is the one in France).
- L w is the candidate locations for a word w.
- L w includes the null location to indicate that w while being the name of a location does not refer to any real location (e.g., the words home and page in the phrase “home page” do not refer to any location though there do exist towns in the U.S. named home and page).
- the probability P(w, l i ) that the word w refers to the candidate location l i in L w is estimated.
- the probabilities are initialized to be all equal to 1/L w . In various embodiments, the probabilities are iteratively re-estimated as below:
- the features used are similar to those used for the location prediction.
- the probabilities of all words with candidate locations is iteratively re-estimated until either there is convergence (all words have a candidate location with probability more than 0.5), or a maximum number of iterations are performed.
- the acceptable candidate locations are ones that have a higher probability than the null location. If the null location has the highest probability then no locations are detected for that word.
- This labeling process is able to effectively remove locations that have common place names (e.g., Home Page) and can easily disambiguate locations in the presence of additional information (e.g., 98105 Redmond is identified as Seattle, Wash. and Redmond, Wash.).
- there can be a pre-processing step where potential multi-word locations are identified and then treated as single words for the rest of the analysis.
- a structured query is constructed by mapping the individual words in the query to properties of the chosen search class.
- each Recognizer creates a RecognizerResult object.
- This object contains a number of RecognizerInfo objects.
- Each Recognizerinfo object records that the recognizer has identified a particular word (or a sequence of words) in the query with some confidence to be an example value of a particular SO-property (or a set of properties).
- the query description module tries to match each word in the user query to the most likely search class property. In various embodiments, this can be done using a greedy algorithm.
- search class property If the name of a search class property occurs in the query, it is identified as a requested output property, i.e. the property must be part of the result of a form submission.
- the other words in the user query can be mapped to the SO-property with the highest confidence score. If a word is not recognized in any RecognizerInfo object, then it can be left as-is and not forced to any property.
- search results in response to any search query are ranked based on one or more of the following criteria:
- An approximate page rank score which captures the importance of a particular page. This can be estimated as the logarithm of the number of incoming links to that page.
- Keyword scores which capture the IR-like score that computes the relevance of the text on web page to the user's query. There are three components to this: the page-text-score determined from the text on the web page; the anchor-score determined from text around the top 10 incoming links; and the title-score determined from title of the web pages. These scores can be reported directly from the values computed by a library that is used to index the web pages.
- Ontology scores capture the relevance of the SO-classes predicted for the user queried to those of the web pages returned. Given a particular SO-class selected from a user's query, the ontology score has two components: (1) the query-match-score is the probability with which the particular class was selected (this is not dependent on the content of the returned web pages and is the result of the class prediction described earlier); and the ontology-match-score is the highest probability with which a form on a particular page is classified to that search class.
- a form score captures the ability of a form to answer a user's query.
- the query-analysis module determines for each user query the properties that can be input to any form for a particular SO-class and also the properties that are expected as output. With this information, a form score can be computed for each web page, which measures the best compatibility of forms of a page to the user query. The form score compares this description of the query with the descriptions of the various forms, and is computed for each page using the formula
- FS ⁇ ( p ) max f ⁇ p ⁇ FS ⁇ ( f ) , where f is a form that is on page p and
- I f and O f are the input and output properties (i.e., fields and results) of a form f
- Q I and Q O are the input and output properties extracted from the user query.
- the first term is the Jaccard Coefficient and measures if the values in the user query are sufficient for invoking a particular form.
- the second term measures the ability of a form to produce the outputs required by the user.
- a location score captures the distance of the most-relevant location for a web page from locations detected in the user query.
- the locations for a page can be either manually tagged or the result of automatic prediction.
- the locations for a query are the automatically detected ones. If both are cities, the location score of a page p within 50 miles of the query location can be given by 1 ⁇ distance/50. If one of them is a city and the other a state, then a score of 0.5 is assigned if the city lies within the state. In all other cases, a score of 0 is used.
- the different score components are combined using a linear combination.
- the weights used in the combination are dependent in part on the query analysis. They are assigned default values, but (a) when an SO-class is predicted, the weight of the ontology match score is increased, and (b) when a location is detected, the weight of the location score is increased.
- mapping words to field values Before a web form can be invoked on behalf of a user, the words in a user query have to be mapped to the correct fields of the web form.
- the correct method invocation string has to then be determined before the form is submitted. In various embodiments, this can achieved through two operations: (1) mapping words to field values, and (2) constructing the invocation string. These two operations are described below.
- the result of the query analysis is a query description that includes a mapping from the properties of a class to words in the user query.
- the source description for each web form already includes a mapping from the fields of the web form to the properties of the search class. These two sets of mappings are composed so as to associate words with fields. This generally suffices for text input fields. However, for select boxes, radio buttons, and check boxes, the words for each field have to be then used to pick the correct internal values for the corresponding input. For example, the word “Washington,” which is one of the options in the select box might correspond to an internal value 50 (or anything else) that has to be used as the parameter value before invoking the method for the form.
- the mapping from select box values to internal values can be stored as part of the web form description and can be used to pick the correct internal values for method invocation.
- the words in the query might not correspond exactly to an option in the select box.
- For special data types such as state names, short forms for state names are used to determine the correct internal values.
- Javascript emulation engine is used.
- a simple browser client is invoked, which in turn invokes a JavaScript engine.
- Javascript fragments on a web page are also recorded.
- the script on the emulation engine is executed to get the modified invocation string if any.
- the parameters (and their mapped words or internal values) are then concatenated to the invocation string along with the values for any hidden inputs.
- the invocation string can be used to submit the form automatically on behalf of the user.
- the mapping for fields to words and internal values is done as part of the query processing and result ranking, but the Javascript emulation is done on the web server on when the user clicks on a particular result hyperlink. Hence, clicks from the search results page are directed to the web server, which then redirects it with the completed invocation string to the correct target web site. In various embodiments, this can also be done on the client side.
- FIG. 4 presents a flow chart illustrating the process of crawling through web pages to gather information related to web-based forms in accordance with an embodiment of the present invention.
- the system starts by obtaining web-based forms to be searched (step 402 ).
- the system can obtain these web-based forms from a number of sources. For example, the system can crawl through web sites to identify web-based forms, the system can receive manually provided web-based forms, or the system can find web-based forms through methods other than crawling.
- the system can facilitate a filtering operation to manually or automatically filter out forms that are not to be searched. This filtering process can be based on some type of pre-specified criteria.
- this form database can include a web index and associated documents, which can be used to facilitate web search queries that return both ordinary documents and documents that result from form queries.
- the system can also retrieve pages from a given form by submitting queries to it (step 408 ). (This process is described in more detail below with reference to FIG. 5 .) Next, the system stores the retrieved pages into a web index (or into some other type of database) along with other web pages to facilitate searches through the retrieved pages (step 410 ).
- FIG. 5 presents a flow chart illustrating the process of retrieving pages from a given form in accordance with an embodiment of the present invention.
- the system uses information stored for the given form in the form database to generate constants to be inputted into specific input fields in the given form (step 502 ).
- the system uses the constants to fill input fields in the given form (step 504 ). This causes the form to produce corresponding outputs which the system stores in a web index (step 506 ).
- extracting the content from the form can involve accessing the given form through a Uniform Resource Locator (URL) which contains a GET-string that extracts the content from the given form.
- URL Uniform Resource Locator
- the process of generating constants for a given field in a given form can involve obtaining constants from a drop-down menu associated with the given field, and then storing the constants. This allows the constants to be subsequently used as inputs to the given field or as inputs to similar fields in other forms during subsequent query operations.
- FIG. 6 presents a flow chart illustrating the process of searching through web-based forms in accordance with an embodiment of the present invention.
- the process starts when the system receives a query containing keywords (step 602 ).
- the system predicts a search-ontology class for the query based on the keywords (step 604 ).
- the system then constructs a structured query from the keywords by mapping keywords to properties of the predicted search-ontology class (step 606 ).
- the system performs a lookup based on the structured query in the form database to identify forms of interest (step 608 ) and ranks these forms (step 610 ).
- the system then presents the user with query-through links to the ranked forms of interest (step 612 ), and allows the user to click on a specific query-through link to submit a query to the associated form of interest (step 614 ). This query will hopefully return the content of interest.
- the system can optionally search through the pre-extracted content instead of having to query the form to obtain the content (step 616 ).
- this pre-extracted content can be stored in indexed form, like a normal web page, to facilitate this type of searching operation.
- a database that describes the various aspects of the data sources is provided to facilitate a deep-web search.
- This database describes the objects accessed by the form on the web source.
- the database also identifies classes of objects in the domain. These classes belong to a so called Search Ontology that is used to organize the classes into an inheritance hierarchy.
- the database also identifies the geographic location of the listings and the web source whenever applicable.
- the database identifies various aspects of the form that are needed for automatic querying, including: which fields in the form are required in order to query through it; which properties of the objects are provided by the answers to the queries; and how the fields in the form map to fields of the database.
- Content creation various embodiments of the present invention automatically find sources for the search engine and automatically guess how to place them in the database. For each web form, a number of items are predicted, including: the most likely classes of the objects obtained by the form; the nature of the source; the location of the contents; and the mappings of the fields of the web form to properties of the objects. This enables a human annotator to later review the guesses made and correct them if necessary.
- the tool includes one or more of the modules: (a) a module for locating forms in an HTML page, (b) a module for extracting the names of the fields in the form from the HTML, (c) a module for predicting the class of a web source, (d) a module for predicting the class of web forms within a web source, (e) a module for predicting the location associated with a web source and form, (f) a module for predicting the mapping of the web-form fields, (g) a module for predicting the output properties of a web form, and (h) a module for predicting the required fields of a form.
- the above-described engine generally finds the web pages with the most relevant web forms and ranks them appropriately.
- an answer to a query is a ranked set of forms, each of which can be consulted further to obtain relevant data.
- the engine fills out the form and displays the answers obtained from filling the form.
- a user may see a partially filled form and therefore expedite the query answering process (or correct the inputs to the form, if necessary).
- the query-answering process may involve two components: (1) a query analyzer; and (2) a ranking module.
- the query analyzer analyzes the query to map it to the terms of the ontology.
- the following predictions may be made by the query analyzer: a class (or set of classes) in the ontology that the query is most likely concerned with, the set of properties of that class that are mentioned in the query, constraints in the query (e.g., a person's name, car model), and a location that the query may be referring to.
- the ranking module orders web pages in the database by the relevance of their web forms to the user query. In doing so, the ranking module considers one or more the following factors: (a) the class in the ontology that the query and the web forms map to, (b) the properties mentioned in the query, (c) proximity to the location mentioned in the query and associated with the web source, (d) importance (page rank) of the web source, (e) keyword relevance between the web source and the query, (f) related classes in the ontology, and (g) classes that can be inferred from the keywords in the results to the query.
- factors (a) the class in the ontology that the query and the web forms map to, (b) the properties mentioned in the query, (c) proximity to the location mentioned in the query and associated with the web source, (d) importance (page rank) of the web source, (e) keyword relevance between the web source and the query, (f) related classes in the ontology, and (g) classes that can be inferred from the keywords in the results to the query.
- the above-described engine lets user query through web forms by deriving from the user's query the input values for fields in the forms. To do so, the engine considers: the set of required fields in the form, the mapping between the form fields and the ontology properties, and set of other items. These other items can include: (a) a mapping from values in the query string to specific instance values of ontology properties, (b) a mapping from values in the query string to values mentioned in selection menus in the form, (c) translations of formats from the query into those in the form, and/or (d) a choice of radio buttons or checkboxes in the form to pose a precise query to the form's server.
Abstract
Description
-
- 1. the class of the source (e.g., a portal, university, newspaper);
- 2. the geographic location most relevant to the source (when applicable), e.g. the city of Seattle in Washington state for the Seattle Times; and
- 3. the page rank of the source.
-
- 1. Fields in the form—For each field the information recorded can include its parameter name (used to invoke some server-side script), the human-readable or visible text for that field, field types (text, select box, radio button, or checkbox), and exemplary values for the field (e.g., the options in a select box).
- 2. The class of the form—This information specifies the types of objects that can be obtained by querying the form. For example, books, hotels, restaurants. Note that a source can have several forms on it, and they can relate to different classes of objects (e.g., newspapers often have forms for looking for houses, jobs and cars for sale).
- 3. Geographic location—This information specifies a geographic location which is specific to the objects retrieved using the form.
- 4. Required fields—These are field which are required to submit the form. In some cases, there are multiple combinations of fields that can satisfy the requirements.
- 5. Output properties—This specifies the type of information we will obtain from answers to a successful form submission. These are described as the SO-properties we are likely to find in the answers.
- 6. Schema mapping—This is the mapping between the fields in the form and the SO-properties. Note that in some cases, these mappings may be complex. For example, it is common for a field to ask for either the ZIP code or the city and state. This mapping can involve multiple SO-properties, but our database records the exact combinations of SO-properties that can be filled in the field.
- 7. Additional keywords—These are additional keywords that describe the web form.
Creating Content for Source Database
sim(f,c i)=pf×sim page(f,c i)+(1−pf)×sim form(f,c i)
where sim(f,ci) is the predicted similarity of the form f and the SO-class ci, and where the page factor pf=0.3+0.6/(num forms on page).
wherein each word wj in the web page text contributes Ls(wj, si), a measure of the likelihood that it represents a location in the country or state si. The most likely state is the one with the highest location score, provided the score is greater than a threshold tL. No state is predicted if none of the scores are greater than tL.
-
- (a) Cstate×idf(wj) if wj is the name of the state (or its abbreviation), wherein idf(w) is the inverse document frequency of the word w (defined below);
- (b) Ccity×idf(wj)×popl(wj, si) if wj is the name of a city within the state, wherein popl(wj, si) depends on the population of the city named wj in the state si; and
- (b) Czip×idf(wj)×popl(wj, si) if wj is the zip of a city within the state, wherein the population score is that of the corresponding city.
Moreover, the inverse document frequency (IDF) of a word can be defined as follows:
where count(w) is the number of web pages in our collection that contain the word w. Thus, the IDF score can vary from 1.5 to 0 depending on the frequency of the word.
-
- 1. It filters web forms. More specifically, for each new web page discovered by the crawler, it determines whether the web forms on the page, if any, are interesting and worth recording (e.g., email subscription forms are not very interesting and may be ignored).
- 2. It reconciles duplicate web forms. Very often the same web form appears on different web pages in the same web site, and the duplicate web forms are detected to prevent multiple recordings of the same source.
The probability of each class, i.e. P(w1w2 . . . wn|Ci), is obtained by normalizing the scores computed in the above expression such that they sum to 1. Described below is how the marginal probability can be estimated for each word and feature selection in accordance with an embodiment of the present invention.
where D(wj, dk) is the weight of word wj in the document dk (each document has a total weight of 1, and the weight of each word is proportional to the number of occurrences of this word in the document). Moreover, Di is the set of documents that have been labeled with class Ci, and K is the smoothing constant which is greater than 0. The smoothing ensures that in the absence of any training data the marginal probability distribution is uniform (1/|W|).
The marginal probabilities P(wj|Ci) are normalized so that they sum to 1. All the words are sorted by their entropies and only the ones that are greater than a particular threshold are included. Furthermore, in various embodiments, (a) only words that have appeared in at least N different pages in total (typically 10-15), are considered, (b) only the top 10 classes for each word while computing the entropy are considered, and (c) probabilities for the non-top 10 classes are set to be equal to that of the 10th search class. Note that the above definition is not exactly the technical definition of entropy since entropy is better defined when computed on P(Ci|wj). In various embodiments, feature selection may be performed via Mutual Information and the Fisher Discriminant.
Property-Based Prediction
where PS is the set of all property recognizers, Vk is the k-th recognizer, β is a indicator function that is equal to 1 if the recognizer Vk recognizes a property of the class Ci (and 0 otherwise), and αk is the weight or relevance of Vk. In various embodiments, each recognizer is trained to recognize examples of a particular set of search class properties and estimates a confidence score γ that a word (or sequence of words) is an instance of the trained property. The score for each class is obtained by normalizing the probabilities for the various search classes to sum to one.
-
- 1. a search-class recognizer which recognizes a word or a sequence of words representing the name of a class, a part of the name of the class or a synonym (synonyms are looked up from a pre-defined list of words associated with each class);
- 2. a property-name recognizer which recognizes a word representing the name of some property in the ontology;
- 3. a first-and-last-name recognizer which recognizes a common last name or first name (the score in this case is a measure of the frequency of the name as per the U.S. Census);
- 4. a location recognizer which recognizes the word or sequence of words representing a location name, i.e., city, state, or country name, or a valid U.S. ZIP code.
- 5. a generic-property recognizer which recognizes is the word representing a known example of a property, i.e., is there a known mapping from some web form field to the property by which it can be reasoned that the word is an example of the property (For example, “Acura” is a car make, since it appears as one of the options in a select box for car makes in a used car search web form. This recognizer can reuse the property mappings predicted by the schema matcher); or
- 6. a year recognizer which recognizes a year between 1900 and 2010.
where Γ is a set of features, Fj(li) is the value of the j-th feature when w refers to the location li, kj is the weight of the feature, aj is a base offset of the feature, and Z is a normalization constant such that
-
- 1. Population of the location:
- popl(li)=1+log(max(population(li),10000)/10000) if li is a city; and popl(li)=2 otherwise.
- 2. Inverse document frequency of the word:
- idf(w)=1.5×log(5)/(log(5+count(w))).
- 3. Co-located candidate locations: If li, one of the candidate locations for the word w, is a city or state in the U.S., then
- 1. Population of the location:
where f is a form that is on page p and
where If and Of are the input and output properties (i.e., fields and results) of a form f, and QI and QO are the input and output properties extracted from the user query. The first term is the Jaccard Coefficient and measures if the values in the user query are sufficient for invoking a particular form. The second term measures the ability of a form to produce the outputs required by the user.
Claims (25)
Priority Applications (4)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US11/399,568 US8037068B2 (en) | 2005-04-06 | 2006-04-05 | Searching through content which is accessible through web-based forms |
US13/246,519 US20120173507A1 (en) | 2005-04-06 | 2011-09-27 | Searching through content which is accesible through web-based forms |
US13/424,057 US20120179667A1 (en) | 2005-04-06 | 2012-03-19 | Searching through content which is accessible through web-based forms |
US13/424,050 US8468156B2 (en) | 2005-04-06 | 2012-03-19 | Determining a geographic location relevant to a web page |
Applications Claiming Priority (2)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US66929205P | 2005-04-06 | 2005-04-06 | |
US11/399,568 US8037068B2 (en) | 2005-04-06 | 2006-04-05 | Searching through content which is accessible through web-based forms |
Related Child Applications (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
US13/246,519 Continuation US20120173507A1 (en) | 2005-04-06 | 2011-09-27 | Searching through content which is accesible through web-based forms |
Publications (2)
Publication Number | Publication Date |
---|---|
US20060230033A1 US20060230033A1 (en) | 2006-10-12 |
US8037068B2 true US8037068B2 (en) | 2011-10-11 |
Family
ID=37074079
Family Applications (5)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
US11/398,970 Active 2026-11-06 US7739258B1 (en) | 2005-04-06 | 2006-04-05 | Facilitating searches through content which is accessible through web-based forms |
US11/399,568 Active 2026-10-16 US8037068B2 (en) | 2005-04-06 | 2006-04-05 | Searching through content which is accessible through web-based forms |
US13/246,519 Abandoned US20120173507A1 (en) | 2005-04-06 | 2011-09-27 | Searching through content which is accesible through web-based forms |
US13/424,050 Active US8468156B2 (en) | 2005-04-06 | 2012-03-19 | Determining a geographic location relevant to a web page |
US13/424,057 Abandoned US20120179667A1 (en) | 2005-04-06 | 2012-03-19 | Searching through content which is accessible through web-based forms |
Family Applications Before (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
US11/398,970 Active 2026-11-06 US7739258B1 (en) | 2005-04-06 | 2006-04-05 | Facilitating searches through content which is accessible through web-based forms |
Family Applications After (3)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
US13/246,519 Abandoned US20120173507A1 (en) | 2005-04-06 | 2011-09-27 | Searching through content which is accesible through web-based forms |
US13/424,050 Active US8468156B2 (en) | 2005-04-06 | 2012-03-19 | Determining a geographic location relevant to a web page |
US13/424,057 Abandoned US20120179667A1 (en) | 2005-04-06 | 2012-03-19 | Searching through content which is accessible through web-based forms |
Country Status (2)
Country | Link |
---|---|
US (5) | US7739258B1 (en) |
WO (1) | WO2006108069A2 (en) |
Cited By (8)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20080313174A1 (en) * | 2007-05-25 | 2008-12-18 | Veveo, Inc. | Method and system for unified searching across and within multiple documents |
US20110087646A1 (en) * | 2009-10-08 | 2011-04-14 | Nilesh Dalvi | Method and System for Form-Filling Crawl and Associating Rich Keywords |
US20110113063A1 (en) * | 2009-11-09 | 2011-05-12 | Bob Schulman | Method and system for brand name identification |
US20110145283A1 (en) * | 2009-12-10 | 2011-06-16 | International Business Machines Corporation | Intelligent mechanism for identifying ontological hypertext and pre-fetching and presenting the target information |
US8468156B2 (en) | 2005-04-06 | 2013-06-18 | Google Inc. | Determining a geographic location relevant to a web page |
US8688715B1 (en) | 2012-03-22 | 2014-04-01 | Google Inc. | Resource identification from organic and structured content |
WO2021060967A1 (en) * | 2019-09-27 | 2021-04-01 | Mimos Berhad | A system and method for predictive analytics of articles |
US10970323B2 (en) * | 2017-12-30 | 2021-04-06 | Innoplexus Ag | Method and system for providing suggestions for completing user-query |
Families Citing this family (83)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US8335753B2 (en) * | 2004-11-03 | 2012-12-18 | Microsoft Corporation | Domain knowledge-assisted information processing |
US7962462B1 (en) | 2005-05-31 | 2011-06-14 | Google Inc. | Deriving and using document and site quality signals from search query streams |
US7941433B2 (en) | 2006-01-20 | 2011-05-10 | Glenbrook Associates, Inc. | System and method for managing context-rich database |
US7849078B2 (en) * | 2006-06-07 | 2010-12-07 | Sap Ag | Generating searchable keywords |
US7624104B2 (en) * | 2006-06-22 | 2009-11-24 | Yahoo! Inc. | User-sensitive pagerank |
US8233714B2 (en) * | 2006-08-01 | 2012-07-31 | Abbyy Software Ltd. | Method and system for creating flexible structure descriptions |
US20080126319A1 (en) * | 2006-08-25 | 2008-05-29 | Ohad Lisral Bukai | Automated short free-text scoring method and system |
DE102007020870A1 (en) * | 2007-05-04 | 2008-11-13 | Airbus Deutschland Gmbh | High-lift system on the wing of an aircraft |
US7917490B2 (en) * | 2007-07-09 | 2011-03-29 | Google Inc. | Interpreting local search queries |
US8260619B1 (en) | 2008-08-22 | 2012-09-04 | Convergys Cmg Utah, Inc. | Method and system for creating natural language understanding grammars |
JP2009080624A (en) * | 2007-09-26 | 2009-04-16 | Toshiba Corp | Information display device, method and program |
US8484566B2 (en) | 2007-10-15 | 2013-07-09 | Google Inc. | Analyzing a form page for indexing |
US9418125B2 (en) * | 2007-10-19 | 2016-08-16 | Oracle International Corporation | Method and apparatus for employing a searchable abstraction layer over enterprise-wide searchable objects |
US7979474B2 (en) * | 2007-10-19 | 2011-07-12 | Oracle International Corporation | Search center dynamic configuration using field mappings |
US20090119283A1 (en) * | 2007-11-06 | 2009-05-07 | Muehlbauer Donald J | System and Method of Improving and Enhancing Electronic File Searching |
DE102007057248A1 (en) * | 2007-11-16 | 2009-05-20 | T-Mobile International Ag | Connection layer for databases |
US20090204881A1 (en) * | 2008-02-08 | 2009-08-13 | M/S. Scmooth (India) Private Limited | Method and system for knowledge-based filling and verification of complex forms |
US20090204610A1 (en) * | 2008-02-11 | 2009-08-13 | Hellstrom Benjamin J | Deep web miner |
US7996390B2 (en) * | 2008-02-15 | 2011-08-09 | The University Of Utah Research Foundation | Method and system for clustering identified forms |
US8965865B2 (en) * | 2008-02-15 | 2015-02-24 | The University Of Utah Research Foundation | Method and system for adaptive discovery of content on a network |
US7917542B2 (en) * | 2008-03-04 | 2011-03-29 | Siemens Aktiengesellschaft | System and method for minimizing transmitted data between diverse institutions |
US20090228490A1 (en) * | 2008-03-06 | 2009-09-10 | Robert Bosch Gmbh | Apparatus and method for universal data access by location based systems |
US7958136B1 (en) | 2008-03-18 | 2011-06-07 | Google Inc. | Systems and methods for identifying similar documents |
US20100057686A1 (en) * | 2008-09-03 | 2010-03-04 | Oded Haim Breiner | Deep Web Search |
US8849790B2 (en) * | 2008-12-24 | 2014-09-30 | Yahoo! Inc. | Rapid iterative development of classifiers |
US8880498B2 (en) * | 2008-12-31 | 2014-11-04 | Fornova Ltd. | System and method for aggregating and ranking data from a plurality of web sites |
US20100235189A1 (en) * | 2009-03-10 | 2010-09-16 | Searete Llc, A Limited Liability Corporation Of The State Of Delaware | Computational systems and methods for health services planning and matching |
US20100235190A1 (en) * | 2009-03-10 | 2010-09-16 | Searete Llc, A Limited Liability Corporation Of The State Of Delaware | Computational systems and methods for health services planning and matching |
US20100235191A1 (en) * | 2009-03-10 | 2010-09-16 | Searete Llc, A Limited Liability Corporation Of The State Of Delaware | Computational systems and methods for health services planning and matching |
US9858540B2 (en) * | 2009-03-10 | 2018-01-02 | Gearbox, Llc | Computational systems and methods for health services planning and matching |
US20100235185A1 (en) * | 2009-03-10 | 2010-09-16 | Searete Llc, A Limited Liability Corporation Of The State Of Delaware | Computational systems and methods for health services planning and matching |
US9911165B2 (en) | 2009-03-10 | 2018-03-06 | Gearbox, Llc | Computational systems and methods for health services planning and matching |
US20100241448A1 (en) * | 2009-03-10 | 2010-09-23 | Searete Llc, A Limited Corporation Of The State Of Delaware | Computational systems and methods for health services planning and matching |
US20100235182A1 (en) * | 2009-03-10 | 2010-09-16 | Searete Llc, A Limited Liability Corporation Of The State Of Delaware | Computational systems and methods for health services planning and matching |
US9892435B2 (en) * | 2009-03-10 | 2018-02-13 | Gearbox Llc | Computational systems and methods for health services planning and matching |
US20100235188A1 (en) * | 2009-03-10 | 2010-09-16 | Searete Llc, A Limited Liability Corporation Of The State Of Delaware | Computational systems and methods for health services planning and matching |
US20100235184A1 (en) * | 2009-03-10 | 2010-09-16 | Searete Llc | Computational systems and methods for health services planning and matching |
US9886729B2 (en) * | 2009-03-10 | 2018-02-06 | Gearbox, Llc | Computational systems and methods for health services planning and matching |
US20110202361A1 (en) * | 2009-03-10 | 2011-08-18 | Searete Llc, A Limited Liability Corporation Of The State Of Delaware | Computational systems and methods for health services planning and matching |
US10319471B2 (en) | 2009-03-10 | 2019-06-11 | Gearbox Llc | Computational systems and methods for health services planning and matching |
US20100274577A1 (en) * | 2009-03-10 | 2010-10-28 | Searete Llc, A Limited Liability Corporation Of The State Of Delaware | Computational systems and methods for health services planning and matching |
US20100235183A1 (en) * | 2009-03-10 | 2010-09-16 | Searete Llc, A Limited Liability Corporation Of The State Of Delaware | Computational systems and methods for health services planning and matching |
US20100235187A1 (en) * | 2009-03-10 | 2010-09-16 | Searete Llc, A Limited Liability Corporation Of The State Of Delaware | Computational systems and methods for health services planning and matching |
US8095384B2 (en) | 2009-03-10 | 2012-01-10 | The Invention Science Fund I | Computational systems and methods for health services planning and matching |
US8510308B1 (en) * | 2009-06-16 | 2013-08-13 | Google Inc. | Extracting semantic classes and instances from text |
US8275546B2 (en) * | 2009-09-29 | 2012-09-25 | Microsoft Corporation | Travelogue-based travel route planning |
US8281246B2 (en) * | 2009-09-29 | 2012-10-02 | Microsoft Corporation | Travelogue-based contextual map generation |
US8977632B2 (en) * | 2009-09-29 | 2015-03-10 | Microsoft Technology Licensing, Llc | Travelogue locating mining for travel suggestion |
US10068178B2 (en) * | 2010-01-13 | 2018-09-04 | Oath, Inc. | Methods and system for associating locations with annotations |
US20120233210A1 (en) * | 2011-03-12 | 2012-09-13 | Matthew Thomas Bogosian | Storage of Arbitrary Points in N-Space and Retrieval of Subset thereof Based on Criteria Including Maximum Distance to an Arbitrary Reference Point |
US20110238686A1 (en) * | 2010-03-24 | 2011-09-29 | Microsoft Corporation | Caching data obtained via data service interfaces |
US8572076B2 (en) * | 2010-04-22 | 2013-10-29 | Microsoft Corporation | Location context mining |
US8676807B2 (en) * | 2010-04-22 | 2014-03-18 | Microsoft Corporation | Identifying location names within document text |
US20110307432A1 (en) * | 2010-06-11 | 2011-12-15 | Microsoft Corporation | Relevance for name segment searches |
US20120011115A1 (en) * | 2010-07-09 | 2012-01-12 | Jayant Madhavan | Table search using recovered semantic information |
US8468119B2 (en) * | 2010-07-14 | 2013-06-18 | Business Objects Software Ltd. | Matching data from disparate sources |
US8489643B1 (en) * | 2011-01-26 | 2013-07-16 | Fornova Ltd. | System and method for automated content aggregation using knowledge base construction |
US9129010B2 (en) | 2011-05-16 | 2015-09-08 | Argo Data Resource Corporation | System and method of partitioned lexicographic search |
CA2741212C (en) * | 2011-05-27 | 2020-12-08 | Ibm Canada Limited - Ibm Canada Limitee | Automated self-service user support based on ontology analysis |
US8538949B2 (en) | 2011-06-17 | 2013-09-17 | Microsoft Corporation | Interactive web crawler |
CA2767676C (en) | 2012-02-08 | 2022-03-01 | Ibm Canada Limited - Ibm Canada Limitee | Attribution using semantic analysis |
CN103425704B (en) * | 2012-05-24 | 2017-07-21 | 阿里巴巴集团控股有限公司 | Application interface provides method and device |
US9600788B2 (en) * | 2012-12-27 | 2017-03-21 | Xerox Corporation | Crowdsourcing directory system |
US9760557B2 (en) * | 2013-01-04 | 2017-09-12 | International Business Machines Corporation | Tagging autofill field entries |
US10037314B2 (en) * | 2013-03-14 | 2018-07-31 | Palantir Technologies, Inc. | Mobile reports |
US20150120350A1 (en) * | 2013-10-24 | 2015-04-30 | Xerox Corporation | Method and system for recommending one or more crowdsourcing platforms/workforces for business workflow |
US8751466B1 (en) | 2014-01-12 | 2014-06-10 | Machine Intelligence Services, Inc. | Customizable answer engine implemented by user-defined plug-ins |
CN103914209B (en) * | 2014-03-28 | 2018-03-27 | 联想(北京)有限公司 | A kind of information processing method and electronic equipment |
RU2634218C2 (en) * | 2014-07-24 | 2017-10-24 | Общество С Ограниченной Ответственностью "Яндекс" | Method for determining sequence of web browsing and server used |
US9880714B2 (en) * | 2014-10-30 | 2018-01-30 | Ebay Inc. | Dynamic loading of contextual ontologies for predictive touch screen typing |
US10649740B2 (en) | 2015-01-15 | 2020-05-12 | International Business Machines Corporation | Predicting and using utility of script execution in functional web crawling and other crawling |
US10796264B2 (en) * | 2015-09-08 | 2020-10-06 | International Business Machines Corporation | Risk assessment in online collaborative environments |
US10740547B2 (en) * | 2015-10-27 | 2020-08-11 | Allscripts Software, Llc | Managing data relationships of customizable forms |
US10394972B2 (en) | 2015-12-04 | 2019-08-27 | Dell Products, Lp | System and method for modelling time series data |
US10540963B2 (en) * | 2017-02-02 | 2020-01-21 | International Business Machines Corporation | Input generation for classifier |
US11100115B1 (en) * | 2018-02-26 | 2021-08-24 | Intuit Inc. | Infrastructure and method for generating search results |
US10956470B2 (en) * | 2018-06-26 | 2021-03-23 | International Business Machines Corporation | Facet-based query refinement based on multiple query interpretations |
RU2714601C1 (en) * | 2018-09-14 | 2020-02-18 | Общество С Ограниченной Ответственностью "Яндекс" | Method and server for indexing web page in index |
US11038988B2 (en) * | 2019-08-26 | 2021-06-15 | Citrix Systems, Inc. | System and methods for providing user analytics and performance feedback for web applications |
US20220147568A1 (en) * | 2020-11-10 | 2022-05-12 | Sap Se | Mapping expression generator |
US11532023B2 (en) * | 2021-02-24 | 2022-12-20 | Kumar N Senthil | System and method for streamlining a checkout process of e-commerce websites |
JP7314199B2 (en) * | 2021-05-06 | 2023-07-25 | カレント自動車株式会社 | VEHICLE SALES SUPPORT DEVICE AND METHOD AND PROGRAM |
US20230161953A1 (en) * | 2021-11-23 | 2023-05-25 | John D'Uva | Automated Job Application Completion and Submission System (AJACSS) |
Citations (18)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US5442778A (en) * | 1991-11-12 | 1995-08-15 | Xerox Corporation | Scatter-gather: a cluster-based method and apparatus for browsing large document collections |
US6547829B1 (en) | 1999-06-30 | 2003-04-15 | Microsoft Corporation | Method and system for detecting duplicate documents in web crawls |
US20030177111A1 (en) | 1999-11-16 | 2003-09-18 | Searchcraft Corporation | Method for searching from a plurality of data sources |
US20030212737A1 (en) * | 2002-03-25 | 2003-11-13 | Moricz Michael Z. | Accessing deep web information using a search engine |
US6675159B1 (en) * | 2000-07-27 | 2004-01-06 | Science Applic Int Corp | Concept-based search and retrieval system |
US6687696B2 (en) * | 2000-07-26 | 2004-02-03 | Recommind Inc. | System and method for personalized search, information filtering, and for generating recommendations utilizing statistical latent class models |
US6738678B1 (en) | 1998-01-15 | 2004-05-18 | Krishna Asur Bharat | Method for ranking hyperlinked pages using content and connectivity analysis |
US20040153456A1 (en) * | 2003-02-04 | 2004-08-05 | Elizabeth Charnock | Method and apparatus to visually present discussions for data mining purposes |
US6799179B2 (en) | 2001-11-29 | 2004-09-28 | Inventec Corporation | Globally-integrated returned material authorization information system |
US6799176B1 (en) * | 1997-01-10 | 2004-09-28 | The Board Of Trustees Of The Leland Stanford Junior University | Method for scoring documents in a linked database |
US20050097160A1 (en) * | 1999-05-21 | 2005-05-05 | Stob James A. | Method for providing information about a site to a network cataloger |
US20050120292A1 (en) | 2003-11-28 | 2005-06-02 | Fuji Xerox Co., Ltd. | Device, method, and computer program product for generating information of link structure of documents |
US20050154746A1 (en) * | 2004-01-09 | 2005-07-14 | Yahoo!, Inc. | Content presentation and management system associating base content and relevant additional content |
US6931397B1 (en) | 2000-02-11 | 2005-08-16 | International Business Machines Corporation | System and method for automatic generation of dynamic search abstracts contain metadata by crawler |
US6963867B2 (en) | 1999-12-08 | 2005-11-08 | A9.Com, Inc. | Search query processing to provide category-ranked presentation of search results |
US20060282455A1 (en) | 2005-06-13 | 2006-12-14 | It Interactive Services Inc. | System and method for ranking web content |
US20080097958A1 (en) * | 2004-06-17 | 2008-04-24 | The Regents Of The University Of California | Method and Apparatus for Retrieving and Indexing Hidden Pages |
US20100169301A1 (en) * | 2008-12-31 | 2010-07-01 | Michael Rubanovich | System and method for aggregating and ranking data from a plurality of web sites |
Family Cites Families (13)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US6711585B1 (en) * | 1999-06-15 | 2004-03-23 | Kanisa Inc. | System and method for implementing a knowledge management system |
US6631369B1 (en) * | 1999-06-30 | 2003-10-07 | Microsoft Corporation | Method and system for incremental web crawling |
US6883135B1 (en) * | 2000-01-28 | 2005-04-19 | Microsoft Corporation | Proxy server using a statistical model |
EP3367268A1 (en) * | 2000-02-22 | 2018-08-29 | Nokia Technologies Oy | Spatially coding and displaying information |
US6684250B2 (en) * | 2000-04-03 | 2004-01-27 | Quova, Inc. | Method and apparatus for estimating a geographic location of a networked entity |
US8601519B1 (en) * | 2000-12-28 | 2013-12-03 | At&T Intellectual Property I, L.P. | Digital residential entertainment system |
AU2002334721B2 (en) * | 2001-09-28 | 2008-10-23 | Oracle International Corporation | An index structure to access hierarchical data in a relational database system |
US7440941B1 (en) * | 2002-09-17 | 2008-10-21 | Yahoo! Inc. | Suggesting an alternative to the spelling of a search query |
US7308464B2 (en) * | 2003-07-23 | 2007-12-11 | America Online, Inc. | Method and system for rule based indexing of multiple data structures |
US7606798B2 (en) * | 2003-09-22 | 2009-10-20 | Google Inc. | Methods and systems for improving a search ranking using location awareness |
US7603654B2 (en) * | 2004-03-01 | 2009-10-13 | Microsoft Corporation | Determining XML schema type equivalence |
US7231405B2 (en) * | 2004-05-08 | 2007-06-12 | Doug Norman, Interchange Corp. | Method and apparatus of indexing web pages of a web site for geographical searchine based on user location |
WO2006108069A2 (en) | 2005-04-06 | 2006-10-12 | Google, Inc. | Searching through content which is accessible through web-based forms |
-
2006
- 2006-04-04 WO PCT/US2006/012734 patent/WO2006108069A2/en active Application Filing
- 2006-04-05 US US11/398,970 patent/US7739258B1/en active Active
- 2006-04-05 US US11/399,568 patent/US8037068B2/en active Active
-
2011
- 2011-09-27 US US13/246,519 patent/US20120173507A1/en not_active Abandoned
-
2012
- 2012-03-19 US US13/424,050 patent/US8468156B2/en active Active
- 2012-03-19 US US13/424,057 patent/US20120179667A1/en not_active Abandoned
Patent Citations (18)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US5442778A (en) * | 1991-11-12 | 1995-08-15 | Xerox Corporation | Scatter-gather: a cluster-based method and apparatus for browsing large document collections |
US6799176B1 (en) * | 1997-01-10 | 2004-09-28 | The Board Of Trustees Of The Leland Stanford Junior University | Method for scoring documents in a linked database |
US6738678B1 (en) | 1998-01-15 | 2004-05-18 | Krishna Asur Bharat | Method for ranking hyperlinked pages using content and connectivity analysis |
US20050097160A1 (en) * | 1999-05-21 | 2005-05-05 | Stob James A. | Method for providing information about a site to a network cataloger |
US6547829B1 (en) | 1999-06-30 | 2003-04-15 | Microsoft Corporation | Method and system for detecting duplicate documents in web crawls |
US20030177111A1 (en) | 1999-11-16 | 2003-09-18 | Searchcraft Corporation | Method for searching from a plurality of data sources |
US6963867B2 (en) | 1999-12-08 | 2005-11-08 | A9.Com, Inc. | Search query processing to provide category-ranked presentation of search results |
US6931397B1 (en) | 2000-02-11 | 2005-08-16 | International Business Machines Corporation | System and method for automatic generation of dynamic search abstracts contain metadata by crawler |
US6687696B2 (en) * | 2000-07-26 | 2004-02-03 | Recommind Inc. | System and method for personalized search, information filtering, and for generating recommendations utilizing statistical latent class models |
US6675159B1 (en) * | 2000-07-27 | 2004-01-06 | Science Applic Int Corp | Concept-based search and retrieval system |
US6799179B2 (en) | 2001-11-29 | 2004-09-28 | Inventec Corporation | Globally-integrated returned material authorization information system |
US20030212737A1 (en) * | 2002-03-25 | 2003-11-13 | Moricz Michael Z. | Accessing deep web information using a search engine |
US20040153456A1 (en) * | 2003-02-04 | 2004-08-05 | Elizabeth Charnock | Method and apparatus to visually present discussions for data mining purposes |
US20050120292A1 (en) | 2003-11-28 | 2005-06-02 | Fuji Xerox Co., Ltd. | Device, method, and computer program product for generating information of link structure of documents |
US20050154746A1 (en) * | 2004-01-09 | 2005-07-14 | Yahoo!, Inc. | Content presentation and management system associating base content and relevant additional content |
US20080097958A1 (en) * | 2004-06-17 | 2008-04-24 | The Regents Of The University Of California | Method and Apparatus for Retrieving and Indexing Hidden Pages |
US20060282455A1 (en) | 2005-06-13 | 2006-12-14 | It Interactive Services Inc. | System and method for ranking web content |
US20100169301A1 (en) * | 2008-12-31 | 2010-07-01 | Michael Rubanovich | System and method for aggregating and ranking data from a plurality of web sites |
Non-Patent Citations (2)
Title |
---|
Graupmann et al. "COMPASS: A concept-based web search engine for HTML, XML, and Deep Web Data." Proceedings of the 30th VLDB Conference, Toronto, Canada, 2004. * |
U.S. Appl. No. 60/580,543, filed Jun. 17, 2004. * |
Cited By (17)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US8468156B2 (en) | 2005-04-06 | 2013-06-18 | Google Inc. | Determining a geographic location relevant to a web page |
US8886642B2 (en) * | 2007-05-25 | 2014-11-11 | Veveo, Inc. | Method and system for unified searching and incremental searching across and within multiple documents |
US20130238602A1 (en) * | 2007-05-25 | 2013-09-12 | Veveo Inc. | Method and system for unified searching and incremental searching across and within multiple documents |
US20080313174A1 (en) * | 2007-05-25 | 2008-12-18 | Veveo, Inc. | Method and system for unified searching across and within multiple documents |
US8296294B2 (en) * | 2007-05-25 | 2012-10-23 | Veveo, Inc. | Method and system for unified searching across and within multiple documents |
US8429158B2 (en) * | 2007-05-25 | 2013-04-23 | Veveo, Inc. | Method and system for unified searching and incremental searching across and within multiple documents |
US8793239B2 (en) * | 2009-10-08 | 2014-07-29 | Yahoo! Inc. | Method and system for form-filling crawl and associating rich keywords |
US20110087646A1 (en) * | 2009-10-08 | 2011-04-14 | Nilesh Dalvi | Method and System for Form-Filling Crawl and Associating Rich Keywords |
US20110113063A1 (en) * | 2009-11-09 | 2011-05-12 | Bob Schulman | Method and system for brand name identification |
US20110145283A1 (en) * | 2009-12-10 | 2011-06-16 | International Business Machines Corporation | Intelligent mechanism for identifying ontological hypertext and pre-fetching and presenting the target information |
US8688713B1 (en) | 2012-03-22 | 2014-04-01 | Google Inc. | Resource identification from organic and structured content |
US8688714B1 (en) | 2012-03-22 | 2014-04-01 | Google Inc. | Resource identification from organic and structured content |
US8688715B1 (en) | 2012-03-22 | 2014-04-01 | Google Inc. | Resource identification from organic and structured content |
US9317588B1 (en) | 2012-03-22 | 2016-04-19 | Google Inc. | Resource identification from organic and structured content |
US9589028B1 (en) | 2012-03-22 | 2017-03-07 | Google Inc. | Resource identification from organic and structured content |
US10970323B2 (en) * | 2017-12-30 | 2021-04-06 | Innoplexus Ag | Method and system for providing suggestions for completing user-query |
WO2021060967A1 (en) * | 2019-09-27 | 2021-04-01 | Mimos Berhad | A system and method for predictive analytics of articles |
Also Published As
Publication number | Publication date |
---|---|
US8468156B2 (en) | 2013-06-18 |
WO2006108069A2 (en) | 2006-10-12 |
US20120173507A1 (en) | 2012-07-05 |
US20120179695A1 (en) | 2012-07-12 |
US20120179667A1 (en) | 2012-07-12 |
US20060230033A1 (en) | 2006-10-12 |
US7739258B1 (en) | 2010-06-15 |
WO2006108069A3 (en) | 2007-01-11 |
Similar Documents
Publication | Publication Date | Title |
---|---|---|
US8037068B2 (en) | Searching through content which is accessible through web-based forms | |
US7613664B2 (en) | Systems and methods for determining user interests | |
US8156102B2 (en) | Inferring search category synonyms | |
US7493312B2 (en) | Media agent | |
US8073877B2 (en) | Scalable semi-structured named entity detection | |
US8898134B2 (en) | Method for ranking resources using node pool | |
US20070022085A1 (en) | Techniques for unsupervised web content discovery and automated query generation for crawling the hidden web | |
US20090254540A1 (en) | Method and apparatus for automated tag generation for digital content | |
US20100191740A1 (en) | System and method for ranking web searches with quantified semantic features | |
US20040243556A1 (en) | System, method and computer program product for performing unstructured information management and automatic text analysis, and including a document common analysis system (CAS) | |
US8332426B2 (en) | Indentifying referring expressions for concepts | |
US20090265338A1 (en) | Contextual ranking of keywords using click data | |
US20040243554A1 (en) | System, method and computer program product for performing unstructured information management and automatic text analysis | |
US20040243560A1 (en) | System, method and computer program product for performing unstructured information management and automatic text analysis, including an annotation inverted file system facilitating indexing and searching | |
US20050065774A1 (en) | Method of self enhancement of search results through analysis of system logs | |
US11361036B2 (en) | Using historical information to improve search across heterogeneous indices | |
EP2307951A1 (en) | Method and apparatus for relating datasets by using semantic vectors and keyword analyses | |
EP2192503A1 (en) | Optimised tag based searching | |
US8364672B2 (en) | Concept disambiguation via search engine search results | |
Zhang et al. | A semantics-based method for clustering of Chinese web search results | |
An et al. | Enriching ontology for deep Web search | |
King | Search engine content analysis | |
Sun | Smart search engine for information retrieval | |
Patil et al. | Content and usage based ranking for enhancing search result delivery | |
Yang et al. | Ontology-Supported Portal Architecture for Scholar's Webpages |
Legal Events
Date | Code | Title | Description |
---|---|---|---|
AS | Assignment |
Owner name: GOOGLE, INC., CALIFORNIAFree format text: ASSIGNMENT OF ASSIGNORS INTEREST;ASSIGNORS:HALEVY, ALON Y.;MADHAVAN, JAYANT;KO, DAVID H.;REEL/FRAME:017742/0923Effective date: 20060403 |
|
STCF | Information on status: patent grant |
Free format text: PATENTED CASE |
|
FPAY | Fee payment |
Year of fee payment: 4 |
|
AS | Assignment |
Owner name: GOOGLE LLC, CALIFORNIAFree format text: CHANGE OF NAME;ASSIGNOR:GOOGLE INC.;REEL/FRAME:044101/0405Effective date: 20170929 |
|
MAFP | Maintenance fee payment |
Free format text: PAYMENT OF MAINTENANCE FEE, 8TH YEAR, LARGE ENTITY (ORIGINAL EVENT CODE: M1552); ENTITY STATUS OF PATENT OWNER: LARGE ENTITYYear of fee payment: 8 |
|
MAFP | Maintenance fee payment |
Free format text: PAYMENT OF MAINTENANCE FEE, 12TH YEAR, LARGE ENTITY (ORIGINAL EVENT CODE: M1553); ENTITY STATUS OF PATENT OWNER: LARGE ENTITYYear of fee payment: 12 |