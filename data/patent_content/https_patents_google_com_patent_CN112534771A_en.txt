CN112534771A - System and method for verifying trigger keywords in an acoustic-based digital assistant application - Google Patents
System and method for verifying trigger keywords in an acoustic-based digital assistant application Download PDFInfo
- Publication number
- CN112534771A CN112534771A CN201980002173.8A CN201980002173A CN112534771A CN 112534771 A CN112534771 A CN 112534771A CN 201980002173 A CN201980002173 A CN 201980002173A CN 112534771 A CN112534771 A CN 112534771A
- Authority
- CN
- China
- Prior art keywords
- data processing
- request
- processing system
- links
- application
- Prior art date
- Legal status (The legal status is an assumption and is not a legal conclusion. Google has not performed a legal analysis and makes no representation as to the accuracy of the status listed.)
- Granted
Links
- 238000000034 method Methods 0.000 title claims abstract description 74
- 238000012545 processing Methods 0.000 claims abstract description 312
- 238000012795 verification Methods 0.000 claims abstract description 26
- 238000010200 validation analysis Methods 0.000 claims description 64
- 238000003058 natural language processing Methods 0.000 claims description 46
- 230000004044 response Effects 0.000 claims description 36
- 238000012546 transfer Methods 0.000 claims description 5
- 230000008685 targeting Effects 0.000 claims description 2
- 230000009471 action Effects 0.000 description 73
- 238000007726 management method Methods 0.000 description 67
- 230000000875 corresponding effect Effects 0.000 description 56
- 230000005236 sound signal Effects 0.000 description 37
- 238000012384 transportation and delivery Methods 0.000 description 24
- 230000000694 effects Effects 0.000 description 13
- 230000008569 process Effects 0.000 description 12
- 238000004590 computer program Methods 0.000 description 11
- 238000004891 communication Methods 0.000 description 8
- 230000000007 visual effect Effects 0.000 description 8
- 230000003993 interaction Effects 0.000 description 5
- 230000000670 limiting effect Effects 0.000 description 5
- 230000003287 optical effect Effects 0.000 description 5
- 238000013515 script Methods 0.000 description 5
- 239000000284 extract Substances 0.000 description 4
- 238000006243 chemical reaction Methods 0.000 description 3
- 238000010586 diagram Methods 0.000 description 3
- 230000006870 function Effects 0.000 description 3
- 230000000644 propagated effect Effects 0.000 description 3
- 230000006399 behavior Effects 0.000 description 2
- 230000005540 biological transmission Effects 0.000 description 2
- 230000033001 locomotion Effects 0.000 description 2
- 238000010801 machine learning Methods 0.000 description 2
- 230000007246 mechanism Effects 0.000 description 2
- 238000009877 rendering Methods 0.000 description 2
- 230000003068 static effect Effects 0.000 description 2
- 230000001360 synchronised effect Effects 0.000 description 2
- IRLPACMLTUPBCL-KQYNXXCUSA-N 5'-adenylyl sulfate Chemical compound C1=NC=2C(N)=NC=NC=2N1[C@@H]1O[C@H](COP(O)(=O)OS(O)(=O)=O)[C@@H](O)[C@H]1O IRLPACMLTUPBCL-KQYNXXCUSA-N 0.000 description 1
- 239000008186 active pharmaceutical agent Substances 0.000 description 1
- 238000004364 calculation method Methods 0.000 description 1
- 230000008859 change Effects 0.000 description 1
- 239000003795 chemical substances by application Substances 0.000 description 1
- 238000004140 cleaning Methods 0.000 description 1
- 239000003086 colorant Substances 0.000 description 1
- 238000007596 consolidation process Methods 0.000 description 1
- 230000001276 controlling effect Effects 0.000 description 1
- 230000008878 coupling Effects 0.000 description 1
- 238000010168 coupling process Methods 0.000 description 1
- 238000005859 coupling reaction Methods 0.000 description 1
- 238000003066 decision tree Methods 0.000 description 1
- 238000001914 filtration Methods 0.000 description 1
- 235000013305 food Nutrition 0.000 description 1
- 239000000446 fuel Substances 0.000 description 1
- 239000004973 liquid crystal related substance Substances 0.000 description 1
- 238000012423 maintenance Methods 0.000 description 1
- 239000011159 matrix material Substances 0.000 description 1
- 230000003278 mimic effect Effects 0.000 description 1
- 238000010295 mobile communication Methods 0.000 description 1
- 230000006855 networking Effects 0.000 description 1
- 230000008520 organization Effects 0.000 description 1
- 238000013468 resource allocation Methods 0.000 description 1
- 230000011218 segmentation Effects 0.000 description 1
- 239000004065 semiconductor Substances 0.000 description 1
- 238000000926 separation method Methods 0.000 description 1
- 230000011273 social behavior Effects 0.000 description 1
- 239000007787 solid Substances 0.000 description 1
- 238000013179 statistical model Methods 0.000 description 1
- 239000000758 substrate Substances 0.000 description 1
- 238000012549 training Methods 0.000 description 1
- 238000013519 translation Methods 0.000 description 1
Images
Classifications
-
- G—PHYSICS
- G10—MUSICAL INSTRUMENTS; ACOUSTICS
- G10L—SPEECH ANALYSIS OR SYNTHESIS; SPEECH RECOGNITION; SPEECH OR VOICE PROCESSING; SPEECH OR AUDIO CODING OR DECODING
- G10L17/00—Speaker identification or verification
- G10L17/22—Interactive procedures; Man-machine interfaces
- G10L17/24—Interactive procedures; Man-machine interfaces the user being prompted to utter a password or a predefined phrase
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F16/00—Information retrieval; Database structures therefor; File system structures therefor
- G06F16/90—Details of database functions independent of the retrieved data types
- G06F16/95—Retrieval from the web
- G06F16/955—Retrieval from the web using information identifiers, e.g. uniform resource locators [URL]
- G06F16/9558—Details of hyperlinks; Management of linked annotations
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F21/00—Security arrangements for protecting computers, components thereof, programs or data against unauthorised activity
- G06F21/50—Monitoring users, programs or devices to maintain the integrity of platforms, e.g. of processors, firmware or operating systems
- G06F21/55—Detecting local intrusion or implementing counter-measures
- G06F21/552—Detecting local intrusion or implementing counter-measures involving long-term monitoring or reporting
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F21/00—Security arrangements for protecting computers, components thereof, programs or data against unauthorised activity
- G06F21/50—Monitoring users, programs or devices to maintain the integrity of platforms, e.g. of processors, firmware or operating systems
- G06F21/55—Detecting local intrusion or implementing counter-measures
- G06F21/554—Detecting local intrusion or implementing counter-measures involving event detection and direct action
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F40/00—Handling natural language data
- G06F40/20—Natural language analysis
- G06F40/205—Parsing
-
- G—PHYSICS
- G10—MUSICAL INSTRUMENTS; ACOUSTICS
- G10L—SPEECH ANALYSIS OR SYNTHESIS; SPEECH RECOGNITION; SPEECH OR VOICE PROCESSING; SPEECH OR AUDIO CODING OR DECODING
- G10L15/00—Speech recognition
- G10L15/08—Speech classification or search
- G10L15/18—Speech classification or search using natural language modelling
- G10L15/1822—Parsing for meaning understanding
-
- G—PHYSICS
- G10—MUSICAL INSTRUMENTS; ACOUSTICS
- G10L—SPEECH ANALYSIS OR SYNTHESIS; SPEECH RECOGNITION; SPEECH OR VOICE PROCESSING; SPEECH OR AUDIO CODING OR DECODING
- G10L15/00—Speech recognition
- G10L15/22—Procedures used during a speech recognition process, e.g. man-machine dialogue
-
- G—PHYSICS
- G10—MUSICAL INSTRUMENTS; ACOUSTICS
- G10L—SPEECH ANALYSIS OR SYNTHESIS; SPEECH RECOGNITION; SPEECH OR VOICE PROCESSING; SPEECH OR AUDIO CODING OR DECODING
- G10L15/00—Speech recognition
- G10L15/28—Constructional details of speech recognition systems
- G10L15/30—Distributed recognition, e.g. in client-server systems, for mobile phones or network applications
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04L—TRANSMISSION OF DIGITAL INFORMATION, e.g. TELEGRAPHIC COMMUNICATION
- H04L63/00—Network architectures or network communication protocols for network security
- H04L63/14—Network architectures or network communication protocols for network security for detecting or protecting against malicious traffic
- H04L63/1441—Countermeasures against malicious traffic
- H04L63/1483—Countermeasures against malicious traffic service impersonation, e.g. phishing, pharming or web spoofing
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04L—TRANSMISSION OF DIGITAL INFORMATION, e.g. TELEGRAPHIC COMMUNICATION
- H04L67/00—Network arrangements or protocols for supporting network services or applications
- H04L67/01—Protocols
- H04L67/02—Protocols based on web technology, e.g. hypertext transfer protocol [HTTP]
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04L—TRANSMISSION OF DIGITAL INFORMATION, e.g. TELEGRAPHIC COMMUNICATION
- H04L67/00—Network arrangements or protocols for supporting network services or applications
- H04L67/14—Session management
- H04L67/146—Markers for unambiguous identification of a particular session, e.g. session cookie or URL-encoding
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04L—TRANSMISSION OF DIGITAL INFORMATION, e.g. TELEGRAPHIC COMMUNICATION
- H04L9/00—Cryptographic mechanisms or cryptographic arrangements for secret or secure communications; Network security protocols
- H04L9/32—Cryptographic mechanisms or cryptographic arrangements for secret or secure communications; Network security protocols including means for verifying the identity or authority of a user of the system or for message authentication, e.g. authorization, entity authentication, data integrity or data verification, non-repudiation, key authentication or verification of credentials
- H04L9/3226—Cryptographic mechanisms or cryptographic arrangements for secret or secure communications; Network security protocols including means for verifying the identity or authority of a user of the system or for message authentication, e.g. authorization, entity authentication, data integrity or data verification, non-repudiation, key authentication or verification of credentials using a predetermined code, e.g. password, passphrase or PIN
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04W—WIRELESS COMMUNICATION NETWORKS
- H04W88/00—Devices specially adapted for wireless communication networks, e.g. terminals, base stations or access point devices
- H04W88/02—Terminal devices
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F2221/00—Indexing scheme relating to security arrangements for protecting computers, components thereof, programs or data against unauthorised activity
- G06F2221/03—Indexing scheme relating to G06F21/50, monitoring users, programs or devices to maintain the integrity of platforms
- G06F2221/033—Test or assess software
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F2221/00—Indexing scheme relating to security arrangements for protecting computers, components thereof, programs or data against unauthorised activity
- G06F2221/21—Indexing scheme relating to G06F21/00 and subgroups addressing additional information or applications relating to security arrangements for protecting computers, components thereof, programs or data against unauthorised activity
- G06F2221/2119—Authenticating web pages, e.g. with suspicious links
-
- G—PHYSICS
- G10—MUSICAL INSTRUMENTS; ACOUSTICS
- G10L—SPEECH ANALYSIS OR SYNTHESIS; SPEECH RECOGNITION; SPEECH OR VOICE PROCESSING; SPEECH OR AUDIO CODING OR DECODING
- G10L15/00—Speech recognition
- G10L15/08—Speech classification or search
- G10L2015/088—Word spotting
-
- G—PHYSICS
- G10—MUSICAL INSTRUMENTS; ACOUSTICS
- G10L—SPEECH ANALYSIS OR SYNTHESIS; SPEECH RECOGNITION; SPEECH OR VOICE PROCESSING; SPEECH OR AUDIO CODING OR DECODING
- G10L15/00—Speech recognition
- G10L15/22—Procedures used during a speech recognition process, e.g. man-machine dialogue
- G10L2015/223—Execution procedure of a spoken command
Abstract
Systems and methods are provided for validating trigger keywords in an acoustic-based digital assistant application. The system may receive a request from an application developer computing device to generate a speech-based software application. The request may include a Uniform Resource Locator (URL) associated with a service provided by the voice-based software application and an identifier corresponding to the URL. The system may identify a plurality of links that include the URL as a target. The system may determine a subset of the plurality of links having a respective string that includes a reference to an identifier of the URL. The data processing system may compare a subset of the plurality of links to a threshold to determine a match level, and may determine a verification status of the request based on the match level.
Description
Technical Field
This specification relates to systems and methods for validating trigger keywords in an acoustic-based digital assistant application.
Background
An application may be installed on a computing device. The computing device may execute an application.
Disclosure of Invention
At least one aspect of the present disclosure is directed to a system for verifying a trigger keyword in an acoustic-based digital assistant application. The system includes a data processing system including at least one request management component, at least one link management component, at least one request validation component, at least one processor, and a memory. At least one request management component of the data processing system may receive a request from an application developer computing device to generate a voice-based software application. The request may include a Uniform Resource Locator (URL) associated with a service provided by the voice-based software application and an identifier corresponding to the URL. At least one link management component of the data processing system may identify a plurality of HTTP (or other protocol) links from the index of the plurality of web pages that include the URL as a target. Each link may include a respective string. The data processing system may parse the respective string of each of the plurality of links to determine a subset of the plurality of links having the respective string that includes a reference to the identifier corresponding to the URL. The data processing system may compare the subset of the plurality of links to a threshold to determine a match level. At least one request validation component of the data processing system can determine a validation status of the request based on the match level. In response to determining that the validation status of the request indicates that the request is validated, the data processing system may assign a trigger keyword to the voice-based software application. The data processing system may receive an audio input from the mobile computing device corresponding to the trigger keyword. In response to receiving the audio input corresponding to the trigger keyword, the data processing system may cause a speech-based software application to execute on the mobile computing device.
The data processing system may: determining at least one alternative identifier based on the identifier included in the request; and determining the subset of the plurality of links to include at least one link whose respective string includes a reference to an alternative identifier and does not include a reference to an identifier.
The data processing system may: determining a threshold to correspond to a first percentage; determining a second percentage comprising a portion of the plurality of links included in the subset; and comparing the second percentage to the first percentage to determine a match level.
The data processing system may determine a value of the threshold based on a number of links included in the plurality of links.
The data processing system may parse the respective character string for each of the plurality of links using natural language processing.
The data processing system may: determining a risk level associated with a request received from an application developer computing device; and determining a value of the threshold based on the risk level.
The data processing system may: determining a type of a voice-based software application; determining a risk level associated with a type of a speech-based software application; and determining a value of the threshold based on the risk level.
The data processing system may: transmitting a request to the proxy computing device for the plurality of links that include the URL as a target; and receiving the plurality of links from the proxy computing device in response to the request.
The data processing system may: transmitting a Remote Procedure Call (RPC) to a server including a request for the plurality of links targeting the URL; and receiving the plurality of links from the server in response to the RPC.
The data processing system may: determining a top-level domain corresponding to a URL included in a request received from an application developer computing device; identifying at least one subdomain associated with a top-level domain; and identifying the plurality of links to include at least one link targeted by a URL corresponding to the subdomain.
The data processing system may: at least a portion of the speech-based software application is generated in response to determining that the verification status indicates that the request is verified.
The data processing system may: transmitting a notification of the requested verification status to the application developer computing device such that the notification is displayed on the application developer computing device.
The data processing system may: receiving, from the second application developer computing device, a second request to generate a second voice-based software application, the second request including a second URL associated with a second service provided by the second voice-based software application and a second identifier corresponding to the second URL; identifying, from the index of the plurality of web pages, a second plurality of HTTP links that include a second URL as a target, each link of the plurality of second links including a respective character string; parsing the respective character string of each link of the plurality of second links to determine a subset of the plurality of second links having respective character strings that include references to second identifiers corresponding to second URLs; comparing a subset of the plurality of second links to a second threshold to determine a second match level; determining a verification status of the second request based on the second match level; and, in response to determining that the verification status of the second request indicates that the second request is not verified, preventing the second trigger key from being assigned to the second voice-based software application.
At least one aspect of the present disclosure is directed to a method of verifying a keyword in an acoustic-based digital assistant application. The method can comprise the following steps: a request to generate a speech-based software application is received from an application developer computing device by a data processing system including at least one request management component, at least one link management component, at least one request validation component, at least one processor, and a memory. The request may include a URL associated with a service provided by the voice-based software application and an identifier corresponding to the URL. The method can comprise the following steps: a plurality of HTTP links including the URL as a target are identified from the index of the plurality of web pages by at least one link management component of the data processing system. Each link may include a respective string. The method may include parsing, by the data processing system, a respective string of each of the plurality of links to determine a subset of the plurality of links having a respective string that includes a reference to the identifier corresponding to the URL. The method may include comparing, by the data processing system, the subset of the plurality of links to a threshold to determine a match level. The method may include determining, by at least one request validation component of the data processing system, a validation status of the request based on the match level. The method can comprise the following steps: in response to determining that the validation status of the request indicates that the request is validated, a trigger keyword is assigned, by the data processing system, to the voice-based software application. The method may include receiving, by the data processing system, an audio input from the mobile computing device corresponding to the trigger keyword. The method can comprise the following steps: in response to receiving the audio input corresponding to the trigger keyword, a speech-based software application is executed on the mobile computing device by the data processing system.
The method may further comprise: determining, by the data processing system, at least one alternative identifier based on the identifier included in the request; and determining, by the data processing system, the subset of the plurality of links to include at least one link whose respective string includes a reference to the alternative identifier and does not include a reference to the identifier.
The method may further comprise: determining, by the data processing system, a threshold to correspond to the first percentage; determining, by the data processing system, a second percentage that includes a portion of the plurality of links included in the subset; and comparing, by the data processing system, the second percentage to the first percentage to determine a match level.
The method may further comprise: determining, by the data processing system, a value of the threshold based on a number of links included in the plurality of links.
The method may further comprise: parsing, by the data processing system, the respective character string of each of the plurality of links using natural language processing.
The method may further comprise: determining, by the data processing system, a risk level associated with the request received from the application developer computing device; and determining, by the data processing system, a value of the threshold based on the risk level.
The method may further comprise: determining, by the data processing system, a type of the voice-based software application; determining, by the data processing system, a risk level associated with the type of the speech-based software application; and determining, by the data processing system, a value of the threshold based on the risk level.
These and other aspects and implementations are discussed in detail below. The foregoing information and the following detailed description include illustrative examples of various aspects and implementations, and provide an overview or framework for understanding the nature and character of the claimed aspects and implementations. The accompanying drawings are included to provide an illustration and a further understanding of the various aspects and implementations, and are incorporated in and constitute a part of this specification.
Drawings
The drawings are not intended to be drawn to scale. Like reference numbers and designations in the various drawings indicate like elements. For purposes of clarity, not every component may be labeled in every drawing. In the drawings:
FIG. 1 is an illustration of an example system for validating a trigger keyword in an acoustic-based digital assistant application;
FIG. 2 is an illustration of example operation of a system for verifying a trigger keyword in an acoustic-based digital assistant application;
FIG. 3 is an illustration of an example method of verifying a trigger keyword in an acoustic-based digital assistant application; and
FIG. 4 is a block diagram illustrating the general architecture of a computer system that may be used to implement elements of the systems and methods described and illustrated herein, including, for example, the systems depicted in FIGS. 1 and 2 and the method depicted in FIG. 3.
Detailed Description
The following are more detailed descriptions of various concepts related to methods, apparatus, and systems for validating trigger keywords in an acoustic-based digital assistant application, and implementations thereof. The various concepts introduced above and discussed in greater detail below may be implemented in any of numerous ways.
The present disclosure relates generally to validating trigger keywords in an acoustic-based digital assistant application. An application developer may wish to develop a software application having an acoustic-based component. An end user may use such an application to perform various functions, which may correspond to one or more services provided by an application developer. The user may invoke the application by providing audio input (e.g., voice input) corresponding to the trigger keyword associated with the application. For example, the trigger key may be a name of an entity associated with an application developer that develops the application.
It is technically challenging to correctly verify the trigger key of an application. For example, some applications may fail or operate incorrectly. For example, an application that is running incorrectly may be an application that contains a flaw that causes the application to return erroneous information to the user. An incorrectly running application may also be a fraudulent application, which may refer to an application that appears, from the end user's perspective, to be associated with a trusted entity but instead is associated with another fraudulent entity. For example, an application developer may attempt to fraudulently mimic a trusted entity by developing a fraudulent application that may be mistakenly executed by a user intending to interact with the trusted entity through the application. Thus, when a user interacts with a fraudulent application, the application may invoke services associated with a fraudulent or malicious entity, rather than services associated with a trusted entity that the user desires. Failure to run or running an incorrect application may consume computing resources, such as processor capacity and battery life, on the device on which it executes (such as on a server or client computing device). Inoperable applications or improperly operating applications also consume network resources on the computer network linking the computers accessing the applications, thereby reducing available bandwidth and increasing network latency. The systems and methods of the present disclosure provide techniques for verifying keywords for acoustic-based digital assistant applications that can help reduce computational and network resources consumed by applications that fail to run or that run incorrectly.
Technical solutions of the present disclosure include a data processing system that can verify a trigger keyword in an acoustic-based digital assistant application in an automated manner and with high accuracy. An application developer may use a computing device to submit a request to generate or provide an application. The request may include an identifier of the declared entity associated with the application and a corresponding Uniform Resource Locator (URL) or other form of resource locator or resource identifier. The data processing system may receive a request from an application developer computing device. The data processing system may identify a set of hypertext transfer protocol (HTTP) links (or any other type of protocol or link) that reference a URL contained in the request. For example, the collection of links may be publicly available or accessible links, such as links embedded in an internet web page. The data processing system may retrieve the set of links from an index of web pages that may be maintained by one or more remote servers.
The data processing system may compare the identified set of links to an identifier included in the request to determine whether the request is fraudulent. For example, each link may include or may be associated with a target URL and a text portion. The text portion may be a character string. For example, the string of characters of the link may be or may correspond to text displayed on a Web page rendered in a Web browser to visually represent the link. The data processing system may process or parse the string of each link in the identified set of links to determine whether each linked string includes a reference to an identifier provided by the application developer computing device usage request. The data processing system may attempt to match at least a portion of each linked string with at least a portion of the identifier. The data processing system may also determine one or more alternative identifiers. For example, the substitute identifier may be an identifier that references the same entity as the identifier provided by the application developer computing device as part of the request. Thus, the data processing system may determine whether each link includes an identifier or an alternative identifier that references the same entity. After processing each link in this manner, the data processing system may determine a subset of links whose strings include references to identifiers provided by the application developer computing device as part of the request.
The data processing system may use the identified subset of links to validate requests from the application developer computing device. For example, the data processing system may determine a level of match between the URL and the identifier received in the request from the application developer computing device. A higher or stronger match level may indicate a greater likelihood of a legitimate (e.g., non-spoofed) request, while a lower or weaker match level may indicate a greater likelihood of a request received from an application developer computing device being spoofed. The data processing system may determine the match level based in part on the subset of links identified as including references to identifiers of requests received from the application developer computing device (or alternative identifiers of entities referencing the same claim).
The data processing system may determine a verification status of the request received from the application developer computing device based on the match level. For example, the data processing system may compare the match level to one or more policies or to one or more thresholds to determine the verification status. The verification state may be a binary state indicating whether a request received from the application developer computing device is approved or verified. The data processing system may associate the trigger key with the software application in response to verifying the request. As a result of this association, the user may invoke the software application by providing audio input corresponding to the trigger keyword. The trigger key may be or may include the declared entity or a variation thereof. Thus, when a user provides audio input corresponding to a declared entity, the user may invoke an application that has been verified to be legitimate (e.g., not fraudulent).
The data processing system may also determine, based on the match level, that the request received from the application developer computing device is unverified. For example, the data processing system may determine that the match level does not satisfy one or more policies or one or more thresholds, and may therefore deny unverified requests received from the application developer computing device. Based on the matching level of the request, an unverified request may correspond to a request having a relatively high degree of likelihood of being fraudulent (e.g., as compared to a verified request). In response to determining that the request is not verified, the data processing system may prevent the trigger key from being associated with the software application. As a result, the data processing system will not cause the application to be invoked when the user provides an audio input corresponding to the trigger keyword. Thus, by automatically determining whether a trigger key should be verified for an application, the systems and methods of the present disclosure may reduce the number of non-runnable or incorrect applications that execute in response to an unverified trigger key. By limiting the execution of the inoperable or improperly running application, the systems and methods of the present disclosure reduce the computational resources, such as processor capacity and power usage, dedicated to such inoperable or improperly running applications, while also increasing the available network bandwidth that would otherwise be consumed by the inoperable or improperly running application and reducing latency in the computer network.
Fig. 1 illustrates an example system 100 for validating a trigger keyword in an acoustic-based digital assistant application. System 100 may include an application delivery infrastructure. The system 100 may include an online application store or marketplace. System 100 may include a data processing system 102. The data processing system 102 may communicate with one or more of the application developer device 160, the third party device 162, or the client computing device 140 via the network 105. The system 100 may also communicate with other devices, such as content provider devices or digital surface devices.
The network 105 may include a computer network such as the internet, a local area network, a wide area network, a metropolitan area network, or other area network, an intranet, a satellite network, and other communication networks such as voice or data mobile telephone networks. The network 105 may be used to access information resources, such as web pages, websites, domain names, or URLs that may be presented, output, rendered, or displayed on at least one client computing device 140, such as a laptop, desktop, tablet, digital assistant device, smartphone, wearable device, laptop, or speaker. For example, via the network 105, a user of the client computing device 140 may access information or data provided by the data processing system 102 or the application developer device 160.
The network 105 may include or constitute a display network, e.g., a subset of information resources available on the internet that are associated with a content placement or search engine results system or that qualify to include third party digital parts as part of a digital part placement activity. The data processing system 102 may use the network 105 to access information resources, such as web pages, websites, domain names, or uniform resource locators that may be rendered, output, rendered, or displayed by the client computing device 140. For example, via the network 105, a user of the client computing device 140 may access information or data provided by the data processing system 102 or the application developer device 160.
The network 105 may be any type or form of network and may include any of the following: point-to-point networks, broadcast networks, wide area networks, local area networks, telecommunications networks, data communication networks, computer networks, ATM (asynchronous transfer mode) networks, SONET (synchronous optical network) networks, SDH (synchronous digital hierarchy) networks, wireless networks and wired networks. The network 105 may include a wireless link, such as an infrared channel or satellite band. The topology of the network 105 may include a bus, star, or ring network topology. The network may include a mobile telephone network using any one or more protocols for communicating between mobile devices, including advanced mobile phone protocol ("AMPS"), time division multiple access ("TDMA"), code division multiple access ("CDMA"), global system for mobile communications ("GSM"), general packet radio service ("GPRS"), or universal mobile telecommunications system ("UMTS"). Different types of data may be transmitted through different protocols, or the same type of data may be transmitted through different protocols.
The servers in the machine farm may be stored in a high density rack system along with associated storage systems and may be located in an enterprise data center. For example, the consolidation server may in this way improve the manageability, data security, physical security and system performance of the system by placing the server and high performance storage system on a localized high performance network. The centralization of all or some of the data processing system 102 components, including servers and storage systems, and coupling them together with advanced system management tools, allows for more efficient utilization of server resources, which saves power and processing requirements and reduces bandwidth usage.
The system 100 may include, access, or otherwise interact with at least one third party device 162. The third party device 162 may include at least one logic device, such as a computing device with a processor, to communicate with the computing device 140, the data processing system 102, or the application developer device 160, for example, over the network 105. The third party device 162 may include at least one computing resource, server, processor, or memory. For example, the third party device 162 may include a plurality of computing resources or servers located in at least one data center.
The third party device 162 may provide the audio-based digital portion for presentation or display by the client computing device 140 as an audio output digital portion. The digital section may include a supply of goods or services, such as the statement "Would you like me to order you a taxi? (do you need i reserve a taxi for you. For example, the third party device 162 may include a memory for storing a series of audio digital portions that may be provided in response to a voice-based query. The third party device 162 may also provide the audio-based digital portion (or other digital portion) to the data processing system 102, where it is stored in the data store 118. The data processing system 102 can select the digital portion of the audio and provide (or instruct the third party device 162 to provide the digital portion of the audio) to the client computing device 140. The audio-based digital portion may be exclusively audio or may be combined with text, image or video data.
The client computing device 140 may download the application developed by the application developer device 160. The client computing device 140 may download applications from the data processing system 102 via the network 105. The client computing device may download the application from application delivery component 110. The client computing device 140 may install an application. The client computing device 140 may execute applications. The client computing device 140 may execute, launch, trigger, or otherwise access or use the application in response to user input or a triggering event or condition. An application may include a front-end component and a back-end component. The client computing device 140 can execute or provide the front-end components of an application, while the data processing system 102 or the application developer device 160 provides the back-end components of an application.
The client computing device 140 may include, interface with, or otherwise communicate with at least one sensor 144, transducer 146, audio driver 148, or preprocessor 150, the at least one sensor 144, transducer 146, audio driver 148, or preprocessor 150. The client computing device 140 may include a light source 142 or a display device 152, such as a light indicator, light emitting diode ("LED"), organic light emitting diode ("OLED"), or other visual indicator for providing a visual or optical output. The sensors 144 may include, for example, ambient light sensors, proximity sensors, temperature sensors, accelerometers, gyroscopes, motion detectors, GPS sensors, location sensors, microphones, or touch sensors. The transducer 146 may include a speaker or a microphone. The audio driver 148 may provide a software interface to the hardware transducer 146. The audio driver may execute audio files or other instructions provided by the data processing system 102 to control the transducer 146 to generate corresponding acoustic or sound waves. The preprocessor 150 may include a processing unit having hardware to detect keywords and perform actions based on the keywords. The preprocessor 150 can filter out one or more terms or modify terms before transmitting the terms to the data processing system 102 for further processing. The preprocessor 150 may convert an analog audio signal detected by the microphone into a digital audio signal and transmit one or more data packets carrying the digital audio signal to the data processing system 102 over the network 105. In some cases, the pre-processor 150 may transmit data packets carrying some or all of the input audio signal in response to detecting an instruction to perform such transmission. The instructions may include, for example, a trigger key or other key or approval to transmit a data packet including the input audio signal to the data processing system 102.
The client computing device 140 may be associated with an end user that inputs a voice query as audio input (via the sensor 144) into the client computing device 140 and receives audio output in the form of computer-generated speech output from the transducer 146 (e.g., speaker) that may be provided from the data processing system 102 (or the application developer device 160 or the third party device 162) to the client computing device 140. The computer-generated speech may include a recording from a real person or a computer-generated language.
The client computing device 140 (or computing device or client device or digital device) may or may not include a display. For example, the client computing device 140 may include a limited type of user interface, such as a microphone and speaker. In some cases, the primary user interface of the computing device 140 may be a microphone and speaker or a voice interface. For example, the primary user interface of the client computing device 140 may include a voice-based or audio-based user interface. The client computing device 140 may include a display and have a primary voice-based or audio-based user interface. The primary user interface of the client computing device 140 may be conversational. The conversational user interface may refer to a user interface driven or facilitated at least in part by a natural language processor ("NLP") component 106 of the data processing system 102.
The data processing system 102 may include a content placement system having at least one computing resource or server. The data processing system 102 may include at least one interface 104, interface with the at least one interface 104, or otherwise communicate with the at least one interface 104. The data processing system 102 can include, interface with, or otherwise communicate with at least one NLP component 106, 106. The data processing system 102 may include at least one direct action Application Programming Interface (API)108, interface with the direct action Application Programming Interface (API)108, or communicate with the direct action Application Programming Interface (API) 108. The interface 104, NLP component 106, and direct action API 108 may provide conversational APIs or digital assistant functionality. The conversational API or digital assistant may communicate or interface with one or more voice-based interfaces or various digital assistant devices or surfaces to provide data or receive data or perform other functions.
The interface 104, NLP component 106, direct action API 108, application delivery component 110, request management component 112, link management component 114, and request validation component 116 may each include at least one processing unit or other logic device, such as a programmable logic array engine or module, to communicate with a data store 118 or other database. The interface 104, NLP component 106, direct action API 108, application delivery component 110, request management component 112, link management component 114, request validation component 116, and data store 118 may be separate components, a single component, or a portion of the data processing system 102. System 100, and components of system 100 such as data processing system 102, may include hardware elements such as one or more processors, logic devices, or circuits.
The data processing system 102 may obtain anonymous computer network activity information associated with a plurality of client computing devices 140 (or computing devices or digital assistant devices). The user of the client computing device 140 or the mobile computing device may affirmatively authorize the data processing system 102 to obtain network activity information corresponding to the client computing device 140 or the mobile computing device. For example, the data processing system 102 may prompt a user of the computing device 140 for consent to obtain one or more types of network activity information. The client computing device 140 may include a mobile computing device, such as a smartphone, tablet, smart watch, or wearable device. The identity of the user of the client computing device 140 may remain anonymous, and the computing device 140 may be associated with a unique identifier (e.g., a unique identifier of the user or computing device provided by the data processing system or the user of the computing device). The data processing system may associate each observation with a corresponding unique identifier.
The data processing system 102 may interact with a third party device 162. The third party device 162 may include or refer to a device of a content provider. A content provider may establish an electronic content campaign. The electronic content campaign may be stored as content data in the data store 118. An electronic content campaign may refer to one or more groups of content that correspond to a common topic. The content campaign may include a hierarchical data structure including content groups, digital portion data objects, and content selection criteria. To create a content campaign, a content provider may specify values for campaign-level parameters of the content campaign. The activity level parameters may include, for example, the name of the activity, the preferred content network for placing the digital part object, the value of the resource for the content activity, the start and end dates of the content activity, the duration of the content activity, the schedule of digital part object placement, the language, the geographic location, the type of computing device on which the digital part object is to be provided. In some cases, an impression may refer to the time at which a digital partial object is extracted from a source of the digital partial object (e.g., the data processing system 102 or a content provider), and the impression is countable. In some cases, robot activity may be filtered and eliminated as an impression because click fraud may occur. Thus, in some cases, an impression may refer to a measure of the response from the Web server to a page request from the browser that filters out robot activity and error codes and is recorded as close as possible to an opportunity to render a digital section object for display on the display device 140. In some cases, an impression may refer to a visual or audible impression; for example, the digital portion object is at least partially visible (e.g., 20%, 30%, 40%, 50%, 60%, 70%, or more) on the display device 152 of the client computing device 140, or may be audible through the speaker 136 of the computing device 140. Clicking or selecting may refer to a user interaction with a digital portion object, such as a voice response to an audible impression, a mouse click, a touch interaction, a gesture, a shake, an audio interaction, or a keyboard click. Conversion may refer to a user taking an intended action with respect to the digital part object; for example, purchasing a product or service, completing a survey, visiting a physical store corresponding to the digital portion, or completing an electronic transaction.
The content provider may further establish one or more content groups for the content campaign. The content set includes one or more digital part objects and corresponding content selection criteria, such as keywords, words, terms, phrases, geographic locations, type of computing device, time of day, interests, topics, or verticals. Content groups under the same content campaign may share the same campaign level parameters, but may have customized specifications for particular content group level parameters, such as keywords, negative keywords (e.g., to prevent placement of digital parts if negative keywords are present on the primary content), keyword bids, or parameters associated with a bid or content campaign.
To create a new content group, the content provider may provide a value for a content group level parameter for the content group. Content group level parameters include, for example, a content group name or a content group subject, and bids for different content placement opportunities (e.g., automatically placed or managed placement) or results (e.g., clicks, impressions, or conversions). The content group name or content group topic may be one or more terms that the content provider may use to embody the topic or topic of the digital part object of the content group to be selected for display. For example, an automobile outlet may create a different content set for each brand of vehicle it sells, and may further create a different content set for each model of vehicle it sells. Examples of content set themes that may be used by an automobile dealer include, for example, "brand a sports car," "brand B sports car," "brand C truck," "brand C hybrid car," or "brand D hybrid car," for example. An example content campaign theme may be "hybrid vehicle" and include content sets such as both "brand C hybrid vehicle" and "brand D hybrid vehicle".
The content provider may provide one or more keywords and number part objects to each content group. The keywords may include terms related to a product or service associated with or identified by the digital portion object. Keywords may contain one or more terms or phrases. For example, an automobile outlet may include "sports cars", "V-6 engines", "four wheel drive", "fuel efficiency" as a keyword for a content group or content activity. In some cases, the content provider may specify negative keywords to avoid, prevent, block, or disable content placement on certain terms or keywords. The content provider may specify a type of match, such as an exact match, a phrase match, or a broad match, that is used to select the digital portion object.
The content provider may provide one or more keywords for use by the data processing system 102 to select the digital portion object provided by the content provider. The content provider can identify one or more keywords to bid on and further provide bid amounts for various keywords. The content provider may provide additional content selection criteria for use by the data processing system 102 to select the digital part object. Multiple content providers may bid on the same or different keywords, and the data processing system 102 may run a content selection process or an advertising auction in response to receiving an indication of a keyword of an electronic message.
The content provider may provide one or more digital part objects for selection by the data processing system 102. The data processing system 102 may select the digital section object when content placement opportunities become available that match resource allocation, content schedules, highest bids, keywords, and other selection criteria specified for the content group. Different types of digital part objects may be included in the content set, such as a voice digital part, an audio digital part, a text digital part, an image digital part, a video digital part, a multimedia digital part, or a digital part link. The digital portion object (or digital portion) may include, for example, a content item, an online file, audio, an image, a video, multimedia content, or sponsored content. After selecting the digital portion, data processing system 102 can transmit the digital portion object for rendering on computing device 140 or display device 152 of computing device 140. Rendering may include displaying the digital portion on a display device or playing the digital portion via a speaker of the computing device 140. Data processing system 102 may provide instructions to computing device 140 to render the digital portion object. The data processing system 102 may instruct the computing device 140 or the audio driver 148 of the computing device 140 to generate an audio signal or sound wave.
The data store 118 may include one or more local or distributed databases and may include a database management system. The data store 118 may include a computer data store or memory, and may store one or more of the following: application data 120, verification data 122 or policies 124, and other data. The data store 118 may store the application data 120, the validation data 122, or the policies 124 in one or more data structures, databases, data files, indexes, or other types of data stores.
The application data 120 may include information about the application. The application data 120 may include information about applications submitted by the application developer device 160. The application data 120 may include metadata associated with the application. The application data 120 may include, for example, a title, a brief description, a detailed description, a version identifier, an entity, an action, an intent, compatibility information, a size, a type of application, a category of application, and other information of the application. The application data 120 may include a unique identifier of the application, such as an alphanumeric identifier. The application data 120 may include information about an application developer that provided or submitted the application.
The application data 120 can also include information about declared entities of the developer of the application, which can be entities associated with the user of the application developer device 160. The information related to the declared entity may be a word, phrase, name, or any other type of information that identifies the declared entity. The declared entity may be an entity to which the user of the application developer device 160 claims to be attached. The declared entity may be a business, brand, or Web-based service. Information about a declared entity may be referred to as an identifier in this disclosure. The application data 120 for the application may store an association between the application and the identifier. The application data 120 may also include one or more URLs for the application. For example, the URL may be an address of a website that provides a service associated with the application. The application may interact with, access, or otherwise retrieve information from a server device (e.g., server 170) having an address corresponding to the URL of the application (e.g., server 170). The URL may be a URL of a website associated with a user of the application developer device 160. For example, the URL may be a URL of a website associated with a company that employs the user of the application developer device 160. Thus, there may be an association between an identifier of the application (e.g., the declared entity) and the URL of the application. For example, the identifier may include a word or phrase that matches or corresponds to at least a portion of the text of the URL, or the URL may include a word or phrase that matches or corresponds to at least a portion of the identifier.
In some implementations, the application data 120 may include a resource identifier other than a URL. For example, the application data 120 may include a Uniform Resource Identifier (URI). A URI may be or contain a string that identifies a particular networked resource. A networked resource may be any resource accessible through a computer network, such as network 105. The URI may be formatted according to a syntax associated with a particular protocol. The grammar can be a grammar associated with the web address. That is, the URI may be or may include a URL. URIs may also be formatted according to different protocols. For example, the URI may be formatted as a Uniform Resource Name (URN) or any other format for a resource identifier. The URI may be a URI of a networked resource associated with a user of the application developer device 160. For example, the URI may be a URI of a networking resource associated with a company that employs the user of the application developer device 160. Thus, there may be an association between an identifier of the application (e.g., the declared entity) and the URI of the application.
The validation data 122 may include data related to a validation state of an application (e.g., an application included in the validation data 122) or associated with a request to generate an application. Such a request may be received from the application developer device 160. The validation status of an application or request may indicate whether the declared entity provided by the application developer device 160 for the application is determined to match or correspond to the URL of the application also provided by the application developer device 160. The verification status of an application or request may be a binary value that may indicate that the application or request has been verified or that the application or request has not been verified. For example, the data processing system 102 may determine that the declared entity of the application provided by the application developer device 160 does not match the URL of the application provided by the application developer device 160. The data processing system 102 may then store the validation data 122 to indicate that the application or request was not validated (e.g., denied or denied). The validation data 122 can also include information that the data processing system 102 can use to determine the validation state of an application or request for generating an application. For example, the validation data 122 may include a set of links to URLs provided by the application developer device 160. When a link includes a URL as a target, the link may be considered to point to the URL. The link may be an HTTP link to a Web-based resource, such as a Web page. The links may also be formatted in different ways. For example, a link may be any data or data representation that points to, references, or identifies a networked resource. The links may be formatted according to a markup language. For example, the links may be formatted using hypertext markup language (HTML). The links may also be formatted using extensible markup language (XML). The link may include any referencing mechanism for referencing data or other electronic resources accessible over a computer network. The link may be an anchor link that is bound to a particular portion of a networked resource, such as a particular portion of a Web-based file. The link may be a download link that causes the file to be downloaded upon selection of the link. The link may be an email link that causes an email program to be launched or executed upon selection of the link.
The link may also include a string of characters. The string of characters of the link may be text that is displayed to visually describe the link when rendered in a web browser on a computing device, such as the client computing device 140. The character string of the link may be or may include text corresponding to a URL, but this is not required. For example, the character string of the link may also contain text that is additional or different relative to the text of the target URL of the link.
Referring again to FIG. 1, each policy 124 may be or include one or more rules, heuristics, instructions or other information that may be used by the data processing system 102 to determine a verification status of a request to generate an application that may be received from the application developer device 160. The data processing system 102 may determine the verification status of the request based on identifying a set of links to URLs provided by the application developer device 160. The data processing system 102 may identify such links using an index or other database or collection of Web-based links. Each link in the set of links may contain a target corresponding to a URL. The set of links may also include links having a target corresponding to a subdomain associated with the URL. For example, the URL may be a top-level domain, and links containing targets for related subdomains may also be contained in the collection of links. Each link in the set of links may also contain link text. The link text may be a character string. For example, the link text of a link may be a set of characters displayed in a Web browser when the link is rendered on a Web page within the Web browser.
The data processing system 102 may parse the link text of each link in the set of links to determine a subset of links whose link text references an identifier of the application. Policy 124 may include rules, heuristics, or instructions for determining a validation status of a request from application developer device 160 based on the identified subset of links. For example, the data processing system 102 may compare the subset of links to a threshold or other criteria based on one or more of the policies 124 to determine whether the request should be validated. The threshold may be a number (e.g., a minimum number) of links included in the subset of links. The threshold may be a percentage. For example, the data processing system 102 may determine a percentage of the total number of links represented by the subset of links that have a goal corresponding to the URL received from the application developer device 160, and the percentage may be compared to a predetermined percentage specified by one or more of the policies 124. The criteria for determining whether a request is validated may be dynamic. The data processing system 102 may store any number of policies 124, and a particular one of the policies 124 may be selected for identifying criteria for determining the validation status of a request based on various characteristics on the request or application. For example, the threshold specified by the policy 124 may be based on the type of application, the risk associated with the application, the popularity of the URL provided by the application developer device 160, or any other characteristic of the application's request.
The data processing system 102 may include an interface 104 (or interface component) to receive and transmit information using, for example, data packets. The interface 104 may receive and transmit information using one or more protocols, such as a network protocol. The interface 104 may include a hardware interface, a software interface, a wired interface, or a wireless interface. The interface 104 may facilitate converting or formatting data from one format to another. For example, the interface 104 may include an application programming interface that includes definitions for communicating between various components, such as software components. The interface 104 may communicate with one or more of the client computing device 140, the application developer device 160, or the third party device 162 via the network 105.
The data processing system 102 may interact with an application, script, or program, such as an app, installed on the client computing device 140 to transmit input audio signals to the interface 104 of the data processing system 102 and to drive components of the local client computing device to render output audio signals. The data processing system 102 may receive a data packet or one or more other signals that include or identify an audio input signal.
The data processing system 102 can include an NLP component 106. For example, the data processing system 102 can execute or run the NLP component 106 to receive or acquire an audio signal and parse the audio signal. For example, the NLP component 106 can provide interaction between a person and a computer. The NLP component 106 can implement techniques for understanding natural language and allowing the data processing system 102 to derive meaning from human or natural language input. The NLP component 106 can implement machine learning based techniques, such as statistical machine learning. The NLP component 106 can parse the input audio signal using a decision tree, statistical model, or probabilistic model. The NLP component 106 can, for example, perform functions such as: named entity recognition (e.g., determining which terms in text map to a proprietary name such as a person or place given a text stream, and what the type of each such name is, such as a person, a location, or an organization), natural language generation (e.g., converting information or semantic intent from a computer database into intelligible human language), natural language understanding (e.g., converting text into a more formal representation, such as a first-order logical structure that a computer module can manipulate), machine translation (e.g., automatically translating text from one human language to another), morpheme segmentation (e.g., separating words into individual morphemes and identifying categories of morphemes, which may be challenging based on the complexity of the morphemes or structures of the words of the language under consideration), question answering (e.g., determining answers to human language questions, which may be specific or open-ended), semantic processing (e.g., processing may occur after a word is identified and its meaning is encoded, such that the identified word is associated with other words having similar meanings).
The NLP component 106 may convert the audio input signal into recognized text by comparing the input signal to a stored, representative set of audio waveforms (e.g., in the data store 118) and selecting the closest match. The set of audio waveforms may be stored in the data store 118 or other database accessible to the data processing system 102. Representative waveforms are generated over a large set of users and may then be enhanced with speech samples from the users. After the audio signal is converted to recognized text, the NLP component 106 matches the text to words that are associated with actions that the data processing system 102 can service, for example, through training across users or through manual specification. Aspects or functionality of the NLP component 106 may be performed by the data processing system 102 or the client computing device 140. For example, the local NLP component may execute on the client computing device 140 to perform the following: the input audio signal is converted to text and the text is transmitted by data packets to the data processing system 102 for further natural language processing.
The audio input signal may be detected by a sensor 144 or a transducer 146 (e.g., a microphone) of the client computing device 140. Via the transducer 146, audio driver 148, or other components, the client computing device 140 can provide audio input signals to the data processing system 102 (e.g., over the network 105), where the signals can be received and provided to the NLP component 106 (e.g., over the interface 104) or stored in the data repository 118.
The client computing device 140 may include an audio driver 148, a transducer 146, a sensor 144, and a pre-processor 150. The sensor 144 may receive or detect an input audio signal (e.g., a voice input). The preprocessor 150 can be coupled to the audio driver, the transducer, and the sensor. The preprocessor 150 may filter the input audio signal (e.g., by removing certain frequencies or suppressing noise) to create a filtered input audio signal. The pre-processor 150 may convert the filtered input audio signal into data packets (e.g., using a software or hardware digital-to-analog converter). In some cases, the pre-processor 150 may convert the unfiltered input audio signal into data packets and transmit the data packets to the data processing system 102. The preprocessor 150 can transmit the data packets to the data processing system 102, the data processing system 102 including one or more processors and memory that execute a natural language processor component, an interface, a speaker recognition component, and a direct action application programming interface.
The data processing system 102 may receive data packets from the pre-processor component via the interface that include filtered (or unfiltered) input audio signals detected by the sensor. The data processing system 102 may identify an acoustic signature from the input audio signal. The data processing system 102 may identify the electronic account corresponding to the acoustic signature based on a lookup in a database (e.g., querying the database). In response to identifying the electronic account, the data processing system 102 may establish a session and an account for the session. The account may include a profile having one or more policies. The data processing system 102 may parse the input audio signal to identify the request and the trigger keyword corresponding to the request.
The data processing system 102 may provide the state to the preprocessor 150 of the client computing device 140. The client computing device 140 may receive an indication of the status. The audio driver may receive an indication of a state of the profile and generate an output signal based on the indication. The audio driver may convert the indication into an output signal, such as a sound signal or an acoustic output signal. The audio driver may drive a transducer 146 (e.g., a speaker) to generate sound based on an output signal generated by the audio driver.
In some cases, the client computing device 140 may include a light source 142. The light source may include one or more LEDs, lights, displays, or other components or devices for providing an optical or visual output. The preprocessor 150 can cause the light source to provide a visual indication corresponding to the status. For example, the visual indication may be a status indicator light that is on, a color change in light, a light pattern having one or more colors, or a visual display of text or images.
The NLP component 106 may acquire an input audio signal. From the input audio signal, the NLP component 106 can identify at least one request or at least one trigger keyword corresponding to the request. The request may indicate an intent or subject of the input audio signal. The trigger key may indicate the type of action that may be taken. The trigger keyword may be a wake signal or hotword that indicates to the client computing device 140 to convert subsequent audio input into text and transmit the text to the data processing system 102 for further processing. For example, the NLP component 106 can parse the input audio signal to identify at least one request for leaving home in the evening to attend dinner and watch a movie. The trigger key may comprise at least one word, phrase, root or partial word or derivative indicating the action to be taken. For example, the trigger keyword "go" or "to go" from the input audio signal may indicate a need for traffic. In this example, the input audio signal (or the identified request) does not directly express an intent for traffic, but the trigger keyword indicates that traffic is an ancillary action to the at least one other action indicated by the request.
The NLP component 106 may parse the input audio signal to identify, determine, retrieve, or otherwise obtain the request and trigger keywords. For example, the NLP component 106 may apply semantic processing techniques to the input audio signal to identify trigger keywords or requests. The NLP component 106 can apply semantic processing techniques to the input audio signal to identify a trigger phrase that includes one or more trigger keywords, such as a first trigger keyword and a second trigger keyword. For example, the input audio signal may comprise the sentence "I road a edge to the airport (I want to get on the bus to the airport)". The NLP component 106 can apply semantic processing techniques or other natural language processing techniques to the data packet comprising the sentence to identify the request or trigger phrases "road a ride" and "airport". The NLP component 106 can further identify a plurality of trigger keywords, such as wan (wanted) and ride (ride). For example, the NLP component 106 can determine that the trigger phrase includes a trigger keyword and a second trigger keyword.
The NLP component 106 may filter the input audio signal to identify the trigger keyword. For example, a data packet carrying an input audio signal may include "It would be if I could find a person who could help I go to an airport, which would be very good" in which case the NLP component 106 may filter out one or more terms as follows: "it", "woold", "be", "great", "if", "I", "result", "get", "someone", "that", "result", or "help". By filtering out these terms, the NLP component 106 can more accurately and reliably identify a trigger keyword, such as "go to the airport," and determine that this is a request for a taxi or ride share service.
In some cases, the NLP component 106 may determine that the data packet carrying the input audio signal includes one or more requests. For example, the input audio signal may include the sentence "I want to purchase an audio book and a monthly subscription to movies". The NLP component 106 can determine that this is a request for an audio book and a streaming multimedia service. The NLP component 106 can determine that this is a single request or multiple requests. The NLP component 106 can determine that these are two requests: a first request to a service provider that provides an audio reading; and a second request to the service provider providing the movie stream. In some cases, the NLP component 106 may combine the multiple determined requests into a single request and transmit the single request to the third party device 162. In some cases, the NLP component 106 may transmit the respective requests to another service provider device, or transmit the two requests separately to the same third party device 162.
The data processing system 102 may include a direct action API 108, the direct action API 108 designed and constructed to generate an action data structure based on a trigger keyword in response to a request. The direct action API 108 may generate an action data structure to cause the application to perform a corresponding action. The direct action API 108 may transmit the action data structure to an application installed on the client computing device 140 to cause the client computing device 140 to perform a corresponding action or initiate an action. The action data structure generated by the direct action API 108 may include deep links to applications installed on the client computing device 140. The application installed on the client computing device 140 may then perform the action or communicate with the application developer device 160 or the third party device 162 to perform the action.
The processor of the data processing system 102 may call the direct action API 108 to execute a script that generates a data structure to provide to an application installed on the client computing device 140, the application developer device 160, or the third party device 162, or other service provider, to obtain a digital part, a subscription service, or a product, such as an automobile or an audio reading from an automobile sharing service. The direct action API 108 may obtain data from the data store 118, as well as data received from the client computing device 140 with the user's consent, to determine location, time, user accounts, logistics transportation, or other information to allow the third party device 162 to perform operations, such as ordering a car from a car sharing service. Using the direct action API 108, the data processing system 102 may also communicate with a third party device 162 to complete the conversion by making a car share access reservation in this example.
The direct action API 108 may perform specified actions to satisfy the end user's intent as determined by the data processing system 102. The direct action API 108 may execute code or a session script that identifies the parameters needed to satisfy the user request according to the actions specified in its input and the parameters or rules in the data store 118. The direct action API 108 may execute an application to meet or fulfill the intent of the end user. Such code may, for example, look up additional information in the data store 118, such as the name of the home automation service or a third party service, or such code may provide an audio output to render at the client computing device 140 to ask an end user a question, such as the intended destination of the requested taxi. Direct action API 108 may determine parameters and may package the information into an action data structure, which may then be sent to another component, such as application delivery component 110, to be implemented.
The direct action API 108 may receive instructions or commands from the NLP component 106 or other components of the data processing system 102 to generate or construct an action data structure. The direct action API 108 may determine the type of action to select a template stored in the data store 118. The actions may be implemented by an application provided by the application delivery component 110 and submitted by the application developer device 160. An application may perform or facilitate the performance of an action. Example types of actions may include, for example, a viewing action, a listening action, a reading action, a navigation action, or a weather action. The type of action may include or may provide, for example, a service, a product, a subscription, a ticket, multimedia content, an audio reading, an administrative subscription, an adjustment subscription, a transfer of digital money, a purchase, or music. The action type may further include a type of service or product. For example, the types of services may include car sharing services, food delivery services, laundry services, cleaning services, maintenance services, housekeeping services, equipment automation services, or media streaming services. The product type may include, for example, clothing, shoes, toys, electronics, computers, books, or jewelry. The type of reservation may include, for example, a dinner reservation or a hair salon reservation. The type of ticket may include, for example, a movie ticket, a sporting venue ticket, or an airline ticket. In some cases, the type of service, product, reservation, or ticket may be categorized based on price, location, type of shipment, availability, or other attributes.
The NLP component 106 may parse the input audio signal to identify a request and a trigger key corresponding to the request and provide the request and the trigger key to the direct action API 108, such that the direct action API generates a first action data structure based on the trigger key in response to the request. Upon identifying the type of request, the direct action API 108 may access the corresponding template from a template store (e.g., data store 118). The template may include fields in the structured dataset that may be populated by the direct action API 108 to facilitate operations to input audio requests detected by the client computing device 140 (such as operations to send a taxi to pick up an end user at an pickup location and transport the end user to a destination location). The direct action API 108 or the client computing device 140 may launch or trigger an application to implement the request in the input audio. For example, the car sharing service application may include one or more of the following fields: device identifier, pickup location, destination location, number of passengers, or type of service. The direct action API 108 may populate the fields with values. To populate the fields with values, the direct action API 108 may ping, poll, or otherwise obtain information from one or more sensors 144 of the computing device 140 or the user interface of the device 140. For example, the direct action API 108 may detect the source location using a location sensor, such as a GPS sensor. The direct action API 108 may obtain more information by submitting surveys, prompts, or queries to the user side of the computing device 140. The direct action API may submit a survey, prompt, or query via the interface 104 of the data processing system 102 and a user interface (e.g., an audio interface, a voice-based user interface, a display, or a touch screen) of the computing device 140. Thus, the direct action API 108 may select a template for the action data structure based on a trigger keyword or request, populate one or more fields in the template with information detected by the one or more sensors 144 or obtained via the user interface, and generate, create, or otherwise construct the action data structure to facilitate the third party device 162 in performing the operation.
The application delivery component 110 can receive an application submitted by the application developer device 160 or generated based at least in part on input provided by the application developer device 160. The application delivery component 110 can maintain one or more versions of an application. Application delivery component 110 may transmit the application to client computing device 140. Application delivery component 110 may download the application onto client computing device 140. The application delivery component 110 can maintain an online application store or marketplace. The application delivery component 110 can manage or maintain an account of the application developer device 160 or the client computing device 140. Application delivery component 110 may maintain a profile of the account. An account or profile may be associated with a unique identifier. The account may include a financial account or a token account that may be used to purchase or subscribe to the application. Application delivery component 110 may prompt a user of client computing device 140 to pay for the application by providing electronic account information, such as an electronic financial account.
The data processing system 102 may include a request management component 112, interface with the request management component 112, or otherwise access the request management component 112. The request management component 112 can receive, process, and manage requests from the application developer device 160. The request may be or may include a request for the data processing system 102 to generate an application. The request may also be or include a request for the data processing system 102 to associate a trigger word or phrase with the application. The request management component 112 can communicate with the application developer device 160 to solicit or otherwise prompt the application developer device 160 to provide the request. For example, the request management component 112 can provide an interface (e.g., a graphical user interface) for display on the application developer device 160. A user of the application developer device 160 may interact with the interface to provide the request. The interface may provide one or more selectable options that the user of the application developer device 160 may select when providing the request. For example, a user of the application developer device 160 may be enabled to indicate the identifier with the request. The identifier may be a string of characters (e.g., a series of text-based characters) that the user of the application developer device 160 wishes to associate with the application. The identifier may correspond to an entity associated with the application developer device 160, such as a company or web-based service. By providing the identifier with the request, the user of the application developer device 160 can declare to the data processing system 102 that the identifier is associated with the application. Thus, an identifier may also refer to a declared entity in this disclosure.
The user of the application developer device 160 may also be enabled to provide the URL with the request. The request management component 112 can receive the URL. The URL may correspond to an address of a website that provides a service associated with the application. The URL may be a URL of an entity associated with the application developer device 160, such as a declared entity corresponding to an identifier included in a request received from the application developer device 160. The URL may be a URL of a website associated with a company that employs the user of the application developer device 160. The request management component 112 may also process, parse, or otherwise extract requests from information. For example, the request management component 112 can process the request to extract the identifier and the URL included in the request. The user of the application developer device 160 may also be enabled to provide different resource identifiers using the request. For example, a user of the application developer device 160 may instead provide a URI. A URI may be a string that identifies a particular networked resource. A networked resource may be any resource accessible through a computer network, such as network 105.
The data processing system 102 may include a link management component 114, interface with the link management component 114, or otherwise access the link management component 114. The link management component 114 can identify a set of links based on the request. For example, the link management component 114 may identify a set of links that each reference a URL included in the request received by the request management component 112 from the application developer device 160. The link management component 114 may identify a set of links based on determining that each link includes a target corresponding to the requested URL. The link management component 114 may also determine one or more alternative URLs. The alternate URL may be a URL related to a URL received as part of the request. For example, the relevant URL may be a URL to the relevant website or a URL corresponding to a subdomain of the top-level domain represented by the URL received as part of the request. The link management component 114 can identify a set of links to include links that reference one or more alternative URLs.
The link management component 114 can use information stored on the remote computing device to identify a set of links. For example, a remote computing device, such as server 170, may maintain an index of web pages. The link management component 114 may transmit a request to the server 170 requesting a set of links having targeted (or related) URLs. Such an index may also be maintained locally on data processing system 102. For example, the data store 118 or another storage element of the data processing system 102 may store information corresponding to an index of web pages. In the case where the link management component 114 requests a set of links from a remote computing device, the link management component 114 may transmit the request using one or more Remote Procedure Calls (RPCs). For example, the link management component 114 can construct a request for a set of links having a target corresponding to a URL provided by the application developer device 160 as an RPC, which can be provided to a remote computing device. The remote computing device may identify the set of links and may respond to the RPC by returning the set of links to the link management component 114. The remote computing device may be or include a server 170. The remote computing device may also be or include a proxy device. The server 170 may implement such a proxy device or may be replaced with a proxy device in the diagram shown in fig. 1. Thus, in the present disclosure, the server 170 may also be referred to as the proxy 170.
After identifying the set of links having a target corresponding to the URL provided by the application developer device 160, the link management component 114 can also identify a subset of links having a corresponding string that includes an identifier (e.g., a declared entity) provided by the application developer device 160. For example, each link in the set of links identified by the link management component 114 can include: a target, which may be a web address referenced by the link; and a character string or link text, which may be any textual information associated with the link. The character string may be text formatted according to a markup language, such as HTTP, that, when the link is rendered in a Web browser executing on a computing device, such as client computing device 140, causes the character string to be displayed as a visual representation of the link. Thus, when a user clicks on or otherwise selects a string, the Web browser may access the website or other resource corresponding to the target of the link. In the present disclosure, the linked character string may also be referred to as a link text.
The link management component 114 can identify a subset of links as those links whose link text includes, pertains to, references, or is otherwise associated with a set of identifiers provided by the application developer device 160 as part of the request. The link management component 114 can parse the corresponding string. Parsing the string may include processing or analyzing the string to extract information from the string. For example, the link management component 114 can parse the linked character string to identify each individual word of the character string. The link management component 114 can also parse the character string to determine each individual character of the character string. The link management component 114 can parse the string by applying language processing techniques. For example, the link management component 114 can apply natural language processing techniques (e.g., provided by the natural language processor component 106) to the character string to determine information such as the topic, theme, or perspective of the character string.
Based on the parsed string for a given link, the link management component 114 can determine whether the identifier provided by the application developer device 160 is contained or referenced in the string. For example, the link management component 114 can compare the identifier to each individual word of the linked string to determine a match. The match may be a full match (e.g., at least one word in the string matches the identifier exactly) or a partial match. When a match is determined for a link, the link may be included as part of a subset of links. The link management component 114 can include the link as part of a subset of links even when the string of the link does not completely match the identifier. For example, the link management component 114 can determine one or more alternative identifiers. The alternative identifier may be a different identifier than the identifier received from the application developer device 160 as part of the request. For example, an alternative identifier may still reference the same entity as the identifier, but may include one or more different words. The alternative identifier may include an alternative spelling, alternative name, abbreviation, etc. of the entity. The link management component 114 can determine a match between the alternative identifier and the linked string even when the linked string does not match the original identifier. The link management component 114 can determine a subset of matching links by comparing the identifier and any alternative identifiers to the string of each link in the set of links.
The data processing system 102 can include a request validation component 116, interface with the request validation component 116, or otherwise access the request validation component 116. The request validation component 116 can determine a validation status of a request received from the application developer device 160. The verification state may be a binary state. For example, the request may or may not be authenticated. The request validation component 116 can determine whether the request is validated based in part on a subset of the links identified by the link management component 114. For example, the link management component 114 can compare a subset of the links to one or more thresholds. The request validation component 116 may select a threshold for comparison based on one or more policies 124 stored in the data store 118. The threshold may be a percentage, such as a percentage of the plurality of links included in the subset of matching links identified by the link management component 114. In other words, the threshold may be a minimum required portion of the link that contains the URL received from the application developer device 160 with the request and also contains a string that matches the identifier (or an alternative identifier) received from the application developer device 160 with the request. For example, the threshold percentage may be 10%, 20%, 30%, 40%, 50%, 60%, 70%, 80%, or 90%. The threshold may also be a number rather than a percentage.
The request validation component 116 can also dynamically select the threshold. For example, the threshold may be selected based on other criteria. The criteria may include the type of application. For example, certain types of applications may have a higher fraud risk than others. Applications with a higher risk of fraud may include financial-related applications (e.g., banking applications) or any application that may receive or access private or sensitive information from a user. For applications that determine that there is a higher risk, the request validation component 116 can select a higher threshold for validating the request. The request validation component 116 can also select a threshold for comparison based on popularity of URLs received from the application developer device 160 as part of the request. For example, popularity may be determined based on the total number of links that include URLs as targets. Thus, the request validation component 116 can select a different threshold for requests specifying more popular URLs than for requests specifying less popular URLs. For example, the request validation component 116 may select a higher threshold for requests associated with more popular URLs.
The request validation component 116 can compare a subset of links having link text (e.g., a string) that matches the identifier or the alternate identifier to a threshold to determine a level of match. The request validation component 116 can determine that the request is validated in response to determining that the subset of links meets or exceeds a threshold (e.g., a number of links included in the subset of links is greater than or equal to a threshold). In response to determining that the subset of links does not meet or exceed the threshold (e.g., that the number of links included in the subset of links is less than the threshold), the request validation component 116 can also determine that the request is not validated. An unverified request may also be referred to as being denied or denied. The request validation component 116 may store the validation state of the request in the data store 118, for example, as validation data 122.
Fig. 2 is an illustration of the operation of a system 200 for validating a trigger keyword in an acoustic-based digital assistant application. The system 200 may include one or more components of the system 100 shown in fig. 1 or the system 400 shown in fig. 4. System 200 may include data processing system 102. The data processing system 102 may communicate with the application developer device 160, interface with the application developer device 160, or otherwise interact with the application developer device 160.
At ACT205, the application developer device 160 may generate a request. The request may be a request for the data processing system 102 to build, generate, or provide a voice-based software application. The request may include information related to the application. For example, the request may include an identifier of the declared entity associated with the application and a corresponding Uniform Resource Locator (URL). The URL may be associated with a service provided by a voice-based software application. For example, the URL may be accessed by the voice-based software application when the voice-based software application is subsequently executed by an end user, such as the user of the client computing device 140. When the end user subsequently executes the voice-based software application, the URL may also correspond to a top-level domain (e.g., a subdomain) of one or more other websites accessed by the voice-based software application. The identifier may correspond to a trigger keyword that the user of the application developer device 160 wishes to associate with the application. There is the following risk: the application developer device 160 may not actually be associated with the entity of the claim represented by the identifier provided in the request, but rather attempt to fraudulently impersonate the entity of the claim. For example, associating an application with a deceptively declared entity may trick a user into thinking that they are interacting with a different entity when executing the application. Thus, it may be useful for data processing system 102 to detect and prevent such fraudulent requests.
The data processing system 102 may receive a request from the application developer device 160. The request may be received, for example, by request management component 112 shown in FIG. 1. At ACT 210, the data processing system 102 or a component thereof, such as the request management component 112, may process the request to determine or extract a URL and identifier from the request. The URL may be an address of a website or other Web-based resource that provides a service associated with the application. The URL may be a URL of a website associated with a user of the application developer device 160. For example, the URL may be a URL of a website associated with a company that employs the user of the application developer device 160. Thus, there may be an association between an identifier of the application (e.g., the declared entity) and the URL of the application. The data processing system 102 may also (or alternatively) process the request to determine a different type of resource identifier than the URL. For example, data processing system 102 may instead process the request to determine the URI. The URI may be an identifier of any networked resource that may include one or more websites.
At ACT 215, the data processing system 102 may generate a request for a set of links based on information extracted from the request. For example, the requested link may be a link to a URL (or URI or other resource identifier) extracted from the request at the ACT 210. In other words, the data processing system 102 may generate a request for a set of links having a target corresponding to the URL of the request received from the application developer device 160. The request may be generated by the link management component 114. The request may be formatted as an RPC, for example, specifying a URL. The link management component 114 may transmit the request to the server 170, and the server 170 may be or include an agent.
At ACT 220, the server 170 may identify the set of links requested by the data processing system 102 at ACT 215. For example, server 170 may host or store an index of links. The link may be an HTTP link to a web page or other networked resource. The links may also be formatted in different ways. For example, a link may be any data or representation of data that points to, references, or identifies a networked resource. The links may be formatted according to a markup language. For example, the links may be formatted using hypertext markup language (HTML). At least some of the links may also be formatted using extensible markup language (XML). At least some of the links may each include any referencing mechanism for referencing data or other electronic resources accessible via a computer network. At least some of the links may be anchor links that are bound to a particular portion of a networked resource, such as a particular portion of a Web-based file. At least some of the links may be download links that cause the file to be downloaded upon selection of the link. At least some of the links may be email links that cause an email program to be launched or executed upon selection of the link. Server 170 may search the index to identify all links having a target corresponding to the requested URL. The identified links may together form a set of links requested by data processing system 102. Server 170 may return the identified set of links to data processing system 102. For example, the set of links may be returned to data processing system 102 in the format of a response to a request received from data processing system 102.
At ACT 225, the data processing system 102 may identify a subset of the set of links received from the server 170. The request validation component 116 can determine a subset of the links. The subset of links may include links having link text that matches the identifier extracted from the request in the ACT 210. For example, each link may include link text, which may be a character string. The string of links may be a character set that is displayed when the links are rendered in a Web browser. The request validation component 116 can identify the links to include in the subset by parsing the character string of each link to determine whether the character string includes at least a portion that matches the identifier. For example, the request validation component 116 can determine a match by determining that the identifier appears as a set of characters in a linked string of characters. The request verification component 116 can also determine partial matches. For example, at least a portion of the identifier may appear in the linked string even if the entire identifier is not present. The request validation component 116 can also determine one or more alternative identifiers. The alternative identifier may be a different identifier than the identifier extracted from the request in the ACT 210, but still reference the same entity as the identifier extracted from the request. For example, the alternative identifier may include an abbreviation or alternative spelling of the entity. The request validation component 116 can determine a match between the link and the alternate identifier and can therefore add the link to a subset of matching links.
At ACT 230, the data processing system 102 may determine the verification status of the request. For example, the verification status can be determined by the request verification component 116. The request validation component 116 can determine the validation status based on a subset of the links determined by the link management component 114 to match the identifier of the request or the alternate identifier. For example, the request validation component 116 may compare the number of links in the matching subset of links to the total number of links received from the server 170 to determine a level of match. The request validation component 116 can determine that the request is validated in response to determining that the match level meets or exceeds a predetermined threshold. The request validation component 116 can determine that the request is not validated (e.g., the request is denied or denied) in response to determining that the match level does not meet or exceed the predetermined threshold. The request validation component 116 can also provide an indication of the validation status of the request to the application developer device 160. In ACT 235, the application developer device 160 may receive the verification status from the data processing system 102 so that the application developer device 160 may be notified of the requested verification status.
At ACT 240, the data processing system 102 may determine whether the request is authenticated based on the authentication status determined at ACT 230. The data processing system 102 may prevent the allocation of the trigger key to the application at ACT 245 in response to determining that the request is not authenticated. For example, the trigger key may be an identifier extracted from the request at the ACT 210. When the request is not authenticated, it may indicate a relatively high degree of likelihood that a user of the application developer device 160 is attempting to fraudulently associate a trigger keyword (e.g., an identifier) with the URL provided in the request. As a result, users invoking such applications (e.g., using client computing devices 140) may be at greater risk of having the information they provide when interacting with the application be used for malicious or deceptive purposes. By preventing the assignment of trigger keywords to applications, data processing system 102 also prevents users from triggering applications by providing trigger keywords. Thus, the user can be protected from a spoofed application whose request is not authenticated.
The data processing system 102 may determine at ACT 250 that the request is validated and may respond to this determination by assigning a trigger key to the application. The data processing system 102 may receive an application from the application developer device 160. The data processing system 102 may also generate or build at least a portion of an application. Assigning the trigger keyword may include creating an association between the trigger keyword and the application that causes the application to be executed or accessed when an audio input corresponding to the trigger keyword is received, for example, from the client computing device 140.
In ACT 255, the user of the client computing device 140 may generate audio input. The audio input may be a speech input. For example, a user of the client computing device 140 may speak a word or phrase that may be detected by a component of the client computing device 140, such as the sensor 144 or the transducer 146. The audio input may correspond to a trigger key of an application associated with the request generated by the application developer device 160 at the ACT 205. For example, the trigger keyword may be or may include an identifier that the data processing system 102 extracts from the request at the ACT 210, and the audio input generated by the client computing device 140 may correspond to the trigger keyword. The client computing device 140 may transmit the audio input to the data processing system 102. When the data processing system 102 has determined that the request received from the application developer device 160 has not been unverified at the ACT 240, the trigger keyword is not associated with the application and the receipt of audio input will not cause the application to execute. On the other hand, the trigger key is associated with the application, and receipt of the audio input at ACT 260 may cause the application to execute when the data processing system 102 has determined that the request received from the application developer device 160 was validated at ACT 240.
For example, execution of the application may cause an action associated with the application to be provided at ACT 265. The action may be any response to a trigger keyword or any other input or request provided by the client computing device 140. In this manner, the data processing system 102 may cause at least a portion of the application to execute on the client computing device 140 at the ACT 270. At least another portion of the application may execute remotely, for example, on data processing system 102 or another computer system remote from client computing device 140. Thus, when the request has been authenticated at the ACT 240, the user of the client computing device 140 may interact with the application by providing audio input corresponding to the trigger keyword. When the request is not verified, the trigger keyword is not associated with the application, and the user of the client computing device 140 may not be able to interact with the application by providing audio input corresponding to the trigger keyword. Thus, a user may be prevented from interacting with applications determined by data processing system 102 to have a higher risk of fraud.
Fig. 3 is an illustration of an example method 300 of verifying a trigger keyword in an acoustic-based digital assistant application. Method 300 may be performed by one or more components, systems, or elements of system 100 depicted in fig. 1, system 200 depicted in fig. 2, or system 400 depicted in fig. 4. For example, method 300 may be performed by a data processing system, such as data processing system 102 shown in FIG. 1. At ACT 305, the data processing system 102 may receive a request to generate an application. The application may be a voice-based software application. The data processing system 102 may receive a request from the application developer device 160 shown in FIG. 1. The request may contain information about the application. For example, the request may include a URL and an identifier. The identifier may correspond to an entity associated with the application or with the application developer device 160. For example, the identifier may correspond to an entity of which the user of the application developer device 160 is a member, such as an employee. Thus, an identifier may also refer to a declared entity in this disclosure. The identifier may serve as a trigger key that the user of the application developer device 160 wishes to associate with the application. For example, the trigger keyword may be a keyword that causes an application to execute when provided as audio input from a computing device, such as the client computing device 140. There is the following risk: the application developer device 160 (or its user) is not actually associated with the declared entity represented by the identifier, but rather attempts to fraudulently impersonate the declared entity. For example, associating an application with a spoofed declared entity may trick a user into thinking that they are interacting with a different entity when executing the application. Thus, it may be useful for data processing system 102 to detect and prevent such fraudulent requests.
At ACT 310, the data processing system may include a collection of links that include the URL provided in the request. For example, the link may be a reference or a link to a URL. When a link contains a URL as a target, the link may point to the URL. The link may be an HTTP link that references a Web-based resource or page. A component of the data processing system 102, such as the request management component 112 or the link management component 114, may extract the URL from the request. The link may be determined by referring to a web page index. For example, the index may be hosted on a remote computing device, such as server 170. The data processing system 102 may transmit a request to the remote computing device to cause the remote computing device to return a set of links that include URLs. The request may be formatted as an RPC.
At ACT 315, the data processing system 102 may determine a subset of links that include references to identifiers provided in the request from the application developer device 160. Each link may include a corresponding string of characters, which may be referred to as link text. A link may be identified as referencing an identifier when its associated link text or character string includes or at least partially matches the identifier. Thus, the data processing system 102 may identify a subset of the links to include those links having link text that matches the identifier extracted from the request. The data processing system 102 may identify the links to include in the subset by parsing the character string of each link to determine whether the character string includes at least a portion that matches the identifier. For example, the data processing system 102 may compare the characters of the identifier to characters included in the link text to determine a match. The data processing system 102 may also determine a partial match, such as where a subset of the characters of the identifier appear in the linked text of the link and the complete character set of the identifier may not be present. The data processing system 102 may also determine one or more alternative identifiers. The alternative identifier may be an identifier that is different from the identifier contained in the request but still references the same entity as the identifier extracted from the request. For example, the substitute identifier can include an abbreviation or alternative spelling of the entity referenced by the identifier (e.g., the declared entity). The request validation component 116 can determine a match between the link and the alternate identifier and can therefore add the link to a subset of matching links. After each link has been compared to the identifier (or an alternative identifier) to determine a match, all of the matching links may be included in the subset of links determined in the ACT 315.
At ACT 320, the data processing system 102 may compare the linked subset to a threshold. The threshold for this comparison may be a percentage, such as a percentage of the number of links identified in the ACT 310 that are also included in the subset of links identified in the ACT 315. In other words, the threshold may be the smallest portion of the link that includes the URL received from the application developer device 160 with the request and also includes a string that matches (or at least partially matches) the identifier (or an alternative identifier) received from the application developer device 160 with the request. The threshold may also be a number rather than a percentage. Accordingly, the number of links included in the subset of links identified at the ACT 315 may be compared to a threshold number to determine whether the number of links included in the subset of links meets (e.g., meets or exceeds) the threshold number.
The data processing system 102 may select a threshold for the comparison in a dynamic manner. For example, the threshold may be selected based on various criteria. The criteria may include a type of application associated with the request. For example, certain types of applications may have a higher risk of fraud than other types of applications. Applications with a higher risk of fraud may include financial-related applications (e.g., banking applications) or any application that may receive or access private or sensitive information from a user. For applications determined to have a higher risk, the data processing system 102 may select a higher threshold for the validation request. The data processing system 102 may determine a risk level associated with the request based on the type of application or other criteria. The risk level may be a binary risk level (e.g., high risk or low risk). The risk level may also be a numerical value, such as a decimal value between zero and one or an integer value between 1 and 10 or 1 and 100. The data processing system 102 may select a threshold for comparison based in part on the determined risk level. For example, the data processing system 102 may select a higher threshold for a higher risk level, requiring a higher match level to validate the more risky request.
At ACT 325, the data processing system 102 may determine the verification status of the request. The verification status may be determined based on the comparison performed at ACT 320. For example, the data processing system 102 may compare a subset of links having link text (e.g., a string) that matches the identifier or the alternate identifier to a threshold to determine a match level. When the subset of links meets or exceeds a threshold (e.g., the number of links included in the subset of links is greater than or equal to the threshold), the data processing system 102 can determine that the request is validated. However, when the subset of links does not meet or exceed the threshold (e.g., the number of links contained in the subset of links is less than the threshold), the data processing system 102 may determine that the request is not validated. Requests that are not verified may also be referred to as being denied or denied. The data processing system 102 may store the requested validation state in, for example, the data store 118. The data processing system 102 may also notify the application developer device 160 of the verification status.
When the request is authenticated (e.g., as indicated by the determined authentication status), the data processing system 102 may assign a trigger key to the application at ACT 330. The data processing system 102 may receive at least a portion of the application from the application developer device 160. The data processing system 102 may also generate or build at least a portion of the application itself. Assigning the trigger keyword to the application may include creating an association between the trigger keyword and the application that causes the application to be executed or accessed when an audio input corresponding to the trigger keyword is received, for example, from the client computing device 140. Thus, audio data representing the trigger keyword may also be assigned to the application. The data processing system 102 may determine the keywords based on information included in the request received at the ACT 305. For example, the data processing system 102 may determine the trigger key as the identifier included in the request. The data processing system 102 may store the association between the trigger key and the application, for example, in the data store 118. On the other hand, when the request is not verified, the data processing system 102 may prevent the keyword from being associated with the application.
At ACT 335, the data processing system 102 may receive an audio input corresponding to the trigger keyword. Audio input may be received from a computing device, such as client computing device 140. The audio input may indicate that a user of the client computing device 140 wishes to execute, access, or otherwise interact with the application. For example, a user of the client computing device 140 may have downloaded or otherwise acquired an application, or may have access to an application executing at the data processing system 102, and may wish to interact with the application at the user's client computing device 140 by speaking a trigger keyword. Thus, the computing device 140 may execute the application or may access the application via a remote computing device executing the application, such as the data processing system 102. Computing device 140 may also access a portion of the application while a remote computing device, such as data processing system 102, executes another portion of the application. The data processing system 102 may parse the audio input, for example, using the natural language processor component 106, to determine that the audio input corresponds to the trigger keyword assigned to the application at the ACT 330. When the data processing system 102 determines that the audio input corresponds to a trigger keyword, the data processing system 102 may cause an application to be executed at ACT 340. For example, the data processing system 102 can cause an application to execute on a computing device (e.g., the client computing device 140) from which audio input corresponding to the trigger keyword is received. Data processing system 102 may also cause applications to execute on different computing devices, such as data processing system 102 itself or server 170. In this case, output from the application may be provided to the client computing device 140 to allow the client computing device 140 to remotely interact with the application. The data processing system 102 may also enable a portion of the application to be executed remotely from the client computing device 140 while another portion of the application may be executed on the client computing device 140.
Thus, using the method 300, a user of the client computing device 140 can invoke, access, or execute an application that was previously evaluated by the data processing system 102 for potential fraud. Because the data processing system 102 can prevent the assignment of a trigger keyword to an application based on the associated request not being verified, a user of the client computing device 140 can be protected from invoking such an application by providing a speech input corresponding to the trigger keyword. The data processing system 102 associates the trigger keyword with the application only after the request is verified, thereby protecting the user of the client computing device 140 from mistakenly interacting with a rogue application.
The method 300 may also be repeated any number of times to verify the trigger key of the additional application. For example, the data processing system 102 may receive subsequent requests from a developer computing device, such as the application developer device 160. The data processing system 102 may perform steps similar to those described above in connection with the method 300. In some cases, the data processing system 102 may determine that the subsequent request is not authenticated and may therefore prevent the trigger key from being assigned to the application corresponding to the subsequent request.
Fig. 4 is a block diagram of an example computer system 400. Computer system 400 may also be referred to as computing device 400. Computer system 400 may include or be used to implement system 100 or components thereof, such as data processing system 102. The data processing system 102 may include an intelligent personal assistant or a voice-based digital assistant. The computer system 400 includes: a bus 405 or other communication component for communicating information; and a processor 410 or processing circuitry coupled to bus 405 for processing information. Computer system 400 may also include one or more processors 410 or processing circuits coupled to the bus for processing information. The computer system 400 further includes: a main memory 415, such as a Random Access Memory (RAM) or other dynamic storage device, coupled to bus 405 for storing information; and instructions to be executed by processor 410. The main memory 415 may be the data store 118 or include the data store 118. Main memory 415 also may be used for storing location information, temporary variables, or other intermediate information during execution of instructions by processor 410. Computer system 400 may also include a Read Only Memory (ROM)420 or other static storage device coupled to bus 405 for storing static information and instructions for processor 410. A storage device 425, such as a solid state device, magnetic disk or optical disk, may be coupled to bus 405 for persistently storing information and instructions. The storage device 425 may include or be part of the data repository 118.
The processes, systems, and methods described herein may be implemented by computer system 400 in response to processor 410 executing an arrangement of instructions contained in main memory 415. Such instructions may be read into main memory 415 from another computer-readable medium, such as storage device 425. Execution of the arrangement of instructions contained in main memory 415 causes computer system 400 to perform the illustrative processes described herein. One or more processors in a multi-processing arrangement may also be employed to execute the instructions contained in main memory 415. Hardwired circuitry may be used in place of or in combination with software instructions to implement the systems and methods described herein. The systems and methods described herein are not limited to any specific combination of hardware circuitry and software.
Although an example computing system is described in FIG. 4, the subject matter including the operations described in this specification can be implemented in other types of digital electronic circuitry, or in computer software, firmware, or hardware, including the structures disclosed in this specification and their equivalents, or in combinations of one or more of them.
For the cases where the system discussed herein collects or may utilize personal information about a user, the user may be provided with an opportunity to control whether programs or features may collect personal information (e.g., information about the user's social network, social behavior or activity, the user's preferences, or the user's location), or whether or how to receive content from a content server or other data processing system that is more relevant to the user. In addition, certain data may be anonymized in one or more ways prior to storage or use, in order to remove personally identifiable information when generating the parameters. For example, the identity of the user may be anonymized so that no personally identifiable information can be determined for the user, or the geographic location of the user may be generalized where location information is obtained (such as, for example, to a city, zip code, or state level), so that no particular location of the user can be determined. Thus, the user may control how information is collected about him or her and used by the content server.
The subject matter and the operations described in this specification can be implemented in digital electronic circuitry, or in computer software, firmware, or hardware, including the structures disclosed in this specification and their equivalents, or in combinations of one or more of them. The subject matter described in this specification can be implemented as one or more computer programs, e.g., one or more circuits of computer program instructions, encoded on one or more computer storage media for execution by, or to control the operation of, data processing apparatus. Alternatively or additionally, the program instructions may be encoded on an artificially generated propagated signal, e.g., a machine-generated electrical, optical, or electromagnetic signal, that is generated to encode information for transmission to suitable receiver apparatus for execution by the data processing apparatus. The computer storage media may be or be included in a computer-readable storage device, a computer-readable storage substrate, a random or serial access memory array or device, or a combination of one or more of them. Although the computer storage medium is not a propagated signal, the computer storage medium can be a source or destination of computer program instructions encoded in an artificially generated propagated signal. The computer storage medium may also be or be included in one or more separate components or media (e.g., multiple CDs, disks, or other storage devices). The operations described in this specification may be implemented as operations performed by data processing apparatus on data stored on one or more computer-readable storage devices or received from other sources.
The terms "data processing system," "computing device," "component," or "data processing apparatus" encompass various devices, apparatuses, and machines for processing data, including by way of example a programmable processor, a computer, a system on a chip, or a plurality or combination of the foregoing. The apparatus can comprise special purpose logic circuitry, e.g., an FPGA (field programmable gate array) or an ASIC (application-specific integrated circuit). The apparatus can include, in addition to hardware, code that creates an execution environment for the computer program in question, e.g., code that constitutes processor firmware, a protocol stack, a database management system, an operating system, a cross-platform runtime environment, a virtual machine, or a combination of one or more of them. The apparatus and execution environment may implement a variety of different computing model infrastructures, such as web services, distributed computing, and grid computing infrastructures. For example, the direct action API 108 or NLP component 106 and other data processing system 102 components may include or share one or more data processing apparatuses, systems, computing devices, or processors.
A computer program (also known as a program, software application, app, script, or code) can be written in any form of programming language, including compiled or interpreted languages, declarative or procedural languages, including as a stand-alone program or as a module, component, subroutine, object, or other unit suitable for use in a computing environment, and may be deployed in any form. The computer program may correspond to a file in a file system. A computer program can be stored in a portion of a file that holds other programs or data (e.g., one or more scripts stored in a markup language file), in a single file dedicated to the program in question, or in multiple coordinated files (e.g., files that store one or more modules, sub programs, or portions of code). A computer program can be deployed to be executed on one computer or on multiple computers that are located at one site or distributed across multiple sites and interconnected by a communication network.
The processes and logic flows described in this specification can be performed by one or more programmable processors (e.g., components of data processing system 102) executing one or more computer programs to perform actions by operating on input data and generating output. The processes and logic flows can also be performed by, and apparatus can also be implemented as, special purpose logic circuitry, e.g., an FPGA (field programmable gate array) or an ASIC (application-specific integrated circuit). Devices suitable for storing computer program instructions and data include all forms of non-volatile memory, media and storage devices, including by way of example: semiconductor memory devices such as EPROM, EEPROM, and flash memory devices; magnetic disks, such as internal hard disks or removable disks; magneto-optical disks; and CD ROM and DVD-ROM disks. The processor and the memory can be supplemented by, or incorporated in, special purpose logic circuitry.
The subject matter described herein can be implemented in a computing system that includes a back-end component, e.g., as a data server, or that includes a middleware component, e.g., an application server, or that includes a front-end component, e.g., a client computer having a graphical user interface or a web browser through which a user can interact with an implementation of the subject matter described in this specification, or any combination of one or more such back-end, middleware, or front-end components. The components of the system can be interconnected by any form or medium of digital data communication, e.g., a communication network. Examples of communication networks include local area networks ("LANs") and wide area networks ("WANs"), internetworks (e.g., the internet), and peer-to-peer networks (e.g., ad hoc peer-to-peer networks).
A computer system, such as system 100 or system 400, may include clients and servers. A client and server are generally remote from each other and typically interact through a communication network, such as network 105. The relationship of client and server arises by virtue of computer programs running on the respective computers and having a client-server relationship to each other. In some implementations, the server transmits data (e.g., data packets representing the digital portion) to the client device (e.g., for the purpose of displaying data to and receiving user input from a user interacting with the client device). Data (e.g., the results of user interactions) generated at the client device may be received at the server from the client device (e.g., received by the data processing system 102 from the client computing device 140 or the application developer device 160 or the third party device 162).
Although operations are depicted in the drawings in a particular order, such operations need not be performed in the particular order shown or in sequential order, and all illustrated operations need not be performed. The actions described herein may be performed in a different order.
The separation of various system components need not be separate in all implementations, and the described program components may be included in a single hardware or software product. For example, the NLP component 106 or the direct action API 108 may be a single component, app, or program, or a logical device with one or more processing circuits or part of one or more servers of the data processing system 102.
Having now described some illustrative implementations, it is apparent that the foregoing is illustrative and not limiting, having been presented by way of example. In particular, although many of the examples presented herein involve specific combinations of method acts or system elements, those acts and those elements may be combined in other ways to accomplish the same objectives. Acts, elements and features discussed in connection with one implementation are not intended to be excluded from a similar role or implementation in other implementations.
The phraseology and terminology used herein is for the purpose of description and should not be regarded as limiting. The use of "including," "comprising," "having," "containing," "involving," "characterized by," and variations thereof herein, is meant to encompass the items listed thereafter, equivalents thereof, and other items, as well as alternative implementations consisting exclusively of the items listed thereafter. In one implementation, the systems and methods described herein consist of one, each combination of one or more of the described elements, acts, or components.
Any reference herein to an implementation or element or act of the systems and methods in the singular may also encompass implementations including a plurality of such elements, and any reference herein to any implementation or element or act in the plural may also encompass implementations including only a single element. References in the singular or plural form are not intended to limit the presently disclosed systems or methods, their components, acts or elements to a single or multiple configurations. References to any action or element based on any information, behavior, or element may include implementations in which the action or element is based, at least in part, on any information, behavior, or element.
Any implementation disclosed herein may be combined with any other implementation or embodiment, and references to "an implementation," "some implementations," or "one implementation," etc. are not necessarily mutually exclusive and are intended to indicate that a particular feature, structure, or characteristic described in connection with the implementation may be included in at least one implementation or embodiment. Such terms as used herein do not necessarily all refer to the same implementation. Any implementation may be combined with any other implementation, inclusively or exclusively, in any manner consistent with the aspects and implementations disclosed herein.
References to "or" may be construed as inclusive such that any term described using "or" may refer to any single, more than one, and all of the described terms. References to "at least one of a 'and' B" can only include 'a', only 'B', and 'a' and 'B'. Such references used in connection with "comprising" or other open-ended terms may include other items.
Technical features in the figures, detailed description or any claims are followed by reference signs, which have been included to increase the intelligibility of the figures, detailed description, and claims. Accordingly, the reference signs or their presence do not have any limiting effect on the scope of any claim element
The systems and methods described herein may be embodied in other specific forms without departing from the characteristics thereof. The foregoing implementations are illustrative, and not limiting of the described systems and methods. The scope of the systems and methods described herein is, therefore, indicated by the appended claims rather than by the foregoing description, and all changes that come within the meaning and range of equivalency of the claims are intended to be embraced therein.
Claims (20)
1. A system for verifying a trigger keyword in an acoustic-based digital assistant application, comprising:
a data processing system comprising at least one request management component, at least one link management component, at least one request validation component, at least one processor, and a memory to:
receiving, by the at least one request management component from an application developer computing device, a request to generate a voice-based software application, the request comprising a Uniform Resource Locator (URL) associated with a service provided by the voice-based software application and an identifier corresponding to the URL;
identifying, by the at least one link management component, a plurality of hypertext transfer protocol (HTTP) links from the index of the plurality of web pages that include the URL as a target, each link including a respective string;
parsing the respective string of each link of the plurality of links to determine a subset of the plurality of links having a respective string that includes a reference to the identifier corresponding to the URL;
comparing the subset of the plurality of links to a threshold to determine a match level;
determining, by the at least one request validation component, a validation status of the request based on the match level;
assigning a trigger keyword to the voice-based software application in response to determining that the validation status of the request indicates that the request is validated;
receiving, from a mobile computing device, an audio input corresponding to the trigger keyword; and
in response to receiving the audio input corresponding to the trigger keyword, causing the speech-based software application to execute on the mobile computing device.
2. The system of claim 1, comprising:
the data processing system is configured to:
determining at least one alternative identifier based on the identifier included in the request; and
determining the subset of the plurality of links to include at least one link whose respective string includes a reference to the alternative identifier and does not include a reference to the identifier.
3. The system of claim 1 or 2, comprising:
the data processing system is configured to:
determining the threshold to correspond to a first percentage;
determining a second percentage comprising a portion of the plurality of links included in the subset; and
comparing the second percentage to the first percentage to determine the match level.
4. The system of claim 1, 2 or 3, comprising:
the data processing system to determine a value of the threshold based on a number of links included in the plurality of links.
5. The system of any preceding claim, comprising:
the data processing system to parse the respective string for each of the plurality of links using natural language processing.
6. The system of any preceding claim, comprising:
the data processing system is configured to:
determining a risk level associated with the request received from the application developer computing device; and
determining a value of the threshold based on the risk level.
7. The system of any preceding claim, comprising:
the data processing system is configured to:
determining a type of the voice-based software application;
determining a risk level associated with the type of the speech-based software application; and
determining a value of the threshold based on the risk level.
8. The system of any preceding claim, comprising:
the data processing system is configured to:
transmitting, to a proxy computing device, a request for the plurality of links including the URL as the target; and
receiving the plurality of links from the proxy computing device in response to the request.
9. The system of any one of claims 1 to 7, comprising:
the data processing system is configured to:
transmitting a Remote Procedure Call (RPC) to a server, the remote procedure call comprising a request for the plurality of links targeting the URL; and
receiving the plurality of links from the server in response to the RPC.
10. The system of any preceding claim, comprising:
the data processing system is configured to:
determining a top-level domain corresponding to the URL included in the request received from the application developer computing device;
identifying at least one subdomain associated with the top-level domain; and
identifying the plurality of links including at least one link targeted by a URL corresponding to the subdomain.
11. The system of any preceding claim, comprising:
the data processing system is configured to:
generating at least a portion of the speech-based software application in response to determining that the verification status indicates that the request is verified.
12. The system of any preceding claim, comprising:
the data processing system is configured to:
transmitting a notification of the verification status of the request to the application developer computing device to cause the notification to be displayed on the application developer computing device.
13. The system of any preceding claim, comprising:
the data processing system is configured to:
receiving, from a second application developer computing device, a second request to generate a second voice-based software application, the second request including a second URL associated with a second service provided by the second voice-based software application and a second identifier corresponding to the second URL;
identifying, from the index of the plurality of web pages, a second plurality of HTTP links that include the second URL as a target, each link of the plurality of second links including a respective character string;
parsing the respective character string of each link of the plurality of second links to determine a subset of the plurality of second links having a respective character string that includes a reference to the second identifier corresponding to the second URL;
comparing the subset of the plurality of second links to a second threshold to determine a second match level;
determining a verification status of the second request based on the second match level; and
preventing a second trigger keyword from being assigned to the second speech-based software application in response to determining that the verification status of the second request indicates that the second request is not verified.
14. A method of verifying keywords in an acoustic-based digital assistant application, comprising:
receiving, by a data processing system comprising at least one request management component, at least one link management component, at least one request validation component, at least one processor, and a memory, a request from an application developer computing device to generate a voice-based software application, the request comprising a Uniform Resource Locator (URL) associated with a service provided by the voice-based software application and an identifier corresponding to the URL;
identifying, by the at least one link management component of the data processing system, a plurality of hypertext transfer protocol (HTTP) links from an index of a plurality of web pages that include the URL as a target, each link including a respective character string;
parsing, by the data processing system, the respective string of each link of the plurality of links to determine a subset of the plurality of links having a respective string that includes a reference to the identifier corresponding to the URL;
comparing, by the data processing system, the subset of the plurality of links to a threshold to determine a level of match;
determining, by the at least one request validation component of the data processing system, a validation status of the request based on the match level;
assigning, by the data processing system, a trigger keyword to the voice-based software application in response to determining that the validation status of the request indicates that the request is validated;
receiving, by the data processing system, an audio input from a mobile computing device corresponding to the trigger keyword; and
in response to receiving the audio input corresponding to the trigger keyword, causing, by the data processing system, the speech-based software application to execute on the mobile computing device.
15. The method of claim 14, comprising:
determining, by the data processing system, at least one alternative identifier based on the identifier included in the request; and
determining, by the data processing system, the subset of the plurality of links to include at least one link whose respective string includes a reference to the alternative identifier and does not include a reference to the identifier.
16. The method according to claim 14 or 15, comprising:
determining, by the data processing system, the threshold to correspond to a first percentage;
determining, by the data processing system, a second percentage comprising a portion of the plurality of links included in the subset; and
comparing, by the data processing system, the second percentage to the first percentage to determine the match level.
17. The method of claim 14, 15 or 16, comprising:
determining, by the data processing system, a value of the threshold based on a number of links included in the plurality of links.
18. The method of claims 14 to 17, comprising:
parsing, by the data processing system, the respective character string of each of the plurality of links using natural language processing.
19. The method of claims 14 to 18, comprising:
determining, by the data processing system, a risk level associated with the request received from the application developer computing device; and
determining, by the data processing system, a value of the threshold based on the risk level.
20. The method of claims 14 to 19, comprising:
determining, by the data processing system, a type of the voice-based software application;
determining, by the data processing system, a risk level associated with the type of the speech-based software application; and
determining, by the data processing system, a value of the threshold based on the risk level.
Applications Claiming Priority (1)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
PCT/US2019/042263 WO2021010997A1 (en) | 2019-07-17 | 2019-07-17 | Systems and methods to verify trigger keywords in acoustic-based digital assistant applications |
Publications (2)
Publication Number | Publication Date |
---|---|
CN112534771A true CN112534771A (en) | 2021-03-19 |
CN112534771B CN112534771B (en) | 2024-04-19 |
Family
ID=67515144
Family Applications (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
CN201980002173.8A Active CN112534771B (en) | 2019-07-17 | 2019-07-17 | System and method for verifying trigger keywords in an acoustic-based digital assistant application |
Country Status (4)
Country | Link |
---|---|
US (3) | US11217243B2 (en) |
EP (2) | EP4134842A1 (en) |
CN (1) | CN112534771B (en) |
WO (1) | WO2021010997A1 (en) |
Families Citing this family (1)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
CN112534771B (en) * | 2019-07-17 | 2024-04-19 | 谷歌有限责任公司 | System and method for verifying trigger keywords in an acoustic-based digital assistant application |
Citations (9)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20160294867A1 (en) * | 2014-02-14 | 2016-10-06 | Tencent Technology (Shenzhen) Company Limited | Method and system for security protection of account information |
US20170263269A1 (en) * | 2016-03-08 | 2017-09-14 | International Business Machines Corporation | Multi-pass speech activity detection strategy to improve automatic speech recognition |
US9823922B1 (en) * | 2014-12-22 | 2017-11-21 | Amazon Technologies, Inc. | Source code mapping through context specific key word indexes and fingerprinting |
CN107871501A (en) * | 2016-09-27 | 2018-04-03 | Fmr有限责任公司 | The automated software identified using intelligent sound performs method |
CN108551766A (en) * | 2016-12-30 | 2018-09-18 | 谷歌有限责任公司 | Natural language processing for the session establishment with ISP |
CN108738362A (en) * | 2017-02-15 | 2018-11-02 | 谷歌有限责任公司 | The deep linking of application is generated based on multi-layer reference data |
US20180322103A1 (en) * | 2011-11-14 | 2018-11-08 | Google Inc. | Extracting audiovisual features from digital components |
US20180322536A1 (en) * | 2014-01-14 | 2018-11-08 | Google Inc. | Resource utilization based cross device transmissions |
US10210868B2 (en) * | 2014-06-24 | 2019-02-19 | Google Llc | Device designation for audio input monitoring |
Family Cites Families (43)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US7006605B1 (en) * | 1996-06-28 | 2006-02-28 | Ochopee Big Cypress Llc | Authenticating a caller before providing the caller with access to one or more secured resources |
US6205204B1 (en) * | 1996-06-28 | 2001-03-20 | Distributed Software Development, Inc. | System and method for identifying an unidentified person using an ambiguity-resolution criterion |
US7376740B1 (en) * | 2000-06-13 | 2008-05-20 | Microsoft Corporation | Phone application state management mechanism |
MXPA03008341A (en) * | 2001-03-14 | 2003-12-11 | United Parcel Service Inc | Systems and methods for initiating returns over a network. |
US7233655B2 (en) * | 2001-10-03 | 2007-06-19 | Accenture Global Services Gmbh | Multi-modal callback |
US20040064442A1 (en) * | 2002-09-27 | 2004-04-01 | Popovitch Steven Gregory | Incremental search engine |
US7769820B1 (en) * | 2005-06-30 | 2010-08-03 | Voltage Security, Inc. | Universal resource locator verification services using web site attributes |
US20080255835A1 (en) * | 2007-04-10 | 2008-10-16 | Microsoft Corporation | User directed adaptation of spoken language grammer |
US9070301B2 (en) * | 2012-06-04 | 2015-06-30 | At&T Intellectual Property I, L.P. | System and method for improved human learning through multi-sensory stimulus |
CN104969289B (en) * | 2013-02-07 | 2021-05-28 | 苹果公司 | Voice trigger of digital assistant |
US10748529B1 (en) * | 2013-03-15 | 2020-08-18 | Apple Inc. | Voice activated device for use with a voice-based digital assistant |
US9892729B2 (en) * | 2013-05-07 | 2018-02-13 | Qualcomm Incorporated | Method and apparatus for controlling voice activation |
US20140337030A1 (en) * | 2013-05-07 | 2014-11-13 | Qualcomm Incorporated | Adaptive audio frame processing for keyword detection |
US20150011195A1 (en) * | 2013-07-03 | 2015-01-08 | Eric Li | Automatic volume control based on context and location |
US20170187866A1 (en) * | 2015-10-17 | 2017-06-29 | Eric Qing Li | Automatic Volume Control Based on Context and Location |
US9786296B2 (en) * | 2013-07-08 | 2017-10-10 | Qualcomm Incorporated | Method and apparatus for assigning keyword model to voice operated function |
US20210234832A1 (en) * | 2014-05-12 | 2021-07-29 | Tocmail Inc | Computer Security System and Method Based on User-Intended Final Destination |
US9959863B2 (en) * | 2014-09-08 | 2018-05-01 | Qualcomm Incorporated | Keyword detection using speaker-independent keyword models for user-designated keywords |
US10074360B2 (en) * | 2014-09-30 | 2018-09-11 | Apple Inc. | Providing an indication of the suitability of speech recognition |
US9930098B2 (en) * | 2015-01-23 | 2018-03-27 | Hughes Network Systems, Llc | Method and system for ISP network performance monitoring and fault detection |
US9887995B2 (en) * | 2015-03-20 | 2018-02-06 | Cyberdeadbolt Inc. | Locking applications and devices using secure out-of-band channels |
CN108604234A (en) * | 2015-07-15 | 2018-09-28 | 查比公司 | System and method for screenshot capture link |
US20170289338A1 (en) * | 2016-03-31 | 2017-10-05 | Microsoft Technology Licensing, Llc | Enabling stateful dynamic links in mobile applications |
US10104152B2 (en) * | 2016-04-28 | 2018-10-16 | TeamMate Licensing B.V. | Inter-application communication and integration broker |
US10313348B2 (en) * | 2016-09-19 | 2019-06-04 | Fortinet, Inc. | Document classification by a hybrid classifier |
US20180210701A1 (en) * | 2017-01-25 | 2018-07-26 | Essential Products, Inc. | Keyword driven voice interface |
US10360916B2 (en) * | 2017-02-22 | 2019-07-23 | Plantronics, Inc. | Enhanced voiceprint authentication |
US10362047B2 (en) * | 2017-05-08 | 2019-07-23 | KnowBe4, Inc. | Systems and methods for providing user interfaces based on actions associated with untrusted emails |
US10403299B2 (en) * | 2017-06-02 | 2019-09-03 | Apple Inc. | Multi-channel speech signal enhancement for robust voice trigger detection and automatic speech recognition |
US10650844B2 (en) * | 2018-01-18 | 2020-05-12 | Wipro Limited | Method and response recommendation system for recommending a response for a voice-based user input |
US10782981B2 (en) * | 2018-01-26 | 2020-09-22 | Avaya Inc. | Systems and methods of dynamic port assignment |
US11386412B1 (en) * | 2018-04-12 | 2022-07-12 | Wells Fargo Bank, N.A. | Authentication circle management |
US10928918B2 (en) * | 2018-05-07 | 2021-02-23 | Apple Inc. | Raise to speak |
FI20185605A1 (en) * | 2018-06-29 | 2019-12-30 | Crf Box Oy | Continuous user identity verification in clinical trials via voice-based user interface |
US10861444B2 (en) * | 2018-09-24 | 2020-12-08 | Rovi Guides, Inc. | Systems and methods for determining whether to trigger a voice capable device based on speaking cadence |
US11100923B2 (en) * | 2018-09-28 | 2021-08-24 | Sonos, Inc. | Systems and methods for selective wake word detection using neural network models |
US11049496B2 (en) * | 2018-11-29 | 2021-06-29 | Microsoft Technology Licensing, Llc | Audio pipeline for simultaneous keyword spotting, transcription, and real time communications |
US11468071B2 (en) * | 2018-11-30 | 2022-10-11 | Rovi Guides, Inc. | Voice query refinement to embed context in a voice query |
US11790153B2 (en) * | 2018-12-20 | 2023-10-17 | Atlassian Pty Ltd. | Systems and methods for creating and managing smart hyperlinks |
US11200894B2 (en) * | 2019-06-12 | 2021-12-14 | Sonos, Inc. | Network microphone device with command keyword eventing |
US11265297B2 (en) * | 2019-07-03 | 2022-03-01 | Microsoft Technology Licensing, Llc | Securely sharing context between web frames |
CN112534771B (en) * | 2019-07-17 | 2024-04-19 | 谷歌有限责任公司 | System and method for verifying trigger keywords in an acoustic-based digital assistant application |
DE102019218808B3 (en) * | 2019-12-03 | 2021-03-11 | Sivantos Pte. Ltd. | Method for training a hearing situation classifier for a hearing aid |
-
2019
- 2019-07-17 CN CN201980002173.8A patent/CN112534771B/en active Active
- 2019-07-17 EP EP22190544.1A patent/EP4134842A1/en active Pending
- 2019-07-17 US US16/485,069 patent/US11217243B2/en active Active
- 2019-07-17 WO PCT/US2019/042263 patent/WO2021010997A1/en unknown
- 2019-07-17 EP EP19749071.7A patent/EP3785396B1/en active Active
-
2022
- 2022-01-03 US US17/567,668 patent/US11869504B2/en active Active
-
2024
- 2024-01-08 US US18/407,058 patent/US20240144928A1/en active Pending
Patent Citations (9)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20180322103A1 (en) * | 2011-11-14 | 2018-11-08 | Google Inc. | Extracting audiovisual features from digital components |
US20180322536A1 (en) * | 2014-01-14 | 2018-11-08 | Google Inc. | Resource utilization based cross device transmissions |
US20160294867A1 (en) * | 2014-02-14 | 2016-10-06 | Tencent Technology (Shenzhen) Company Limited | Method and system for security protection of account information |
US10210868B2 (en) * | 2014-06-24 | 2019-02-19 | Google Llc | Device designation for audio input monitoring |
US9823922B1 (en) * | 2014-12-22 | 2017-11-21 | Amazon Technologies, Inc. | Source code mapping through context specific key word indexes and fingerprinting |
US20170263269A1 (en) * | 2016-03-08 | 2017-09-14 | International Business Machines Corporation | Multi-pass speech activity detection strategy to improve automatic speech recognition |
CN107871501A (en) * | 2016-09-27 | 2018-04-03 | Fmr有限责任公司 | The automated software identified using intelligent sound performs method |
CN108551766A (en) * | 2016-12-30 | 2018-09-18 | 谷歌有限责任公司 | Natural language processing for the session establishment with ISP |
CN108738362A (en) * | 2017-02-15 | 2018-11-02 | 谷歌有限责任公司 | The deep linking of application is generated based on multi-layer reference data |
Non-Patent Citations (2)
Title |
---|
MEDENNIKOV, I等: "Acoustic Modeling in the STC Keyword Search System for OpenKWS 2016 Evaluation", 《19TH INTERNATIONAL CONFERENCE ON SPEECH AND COMPUTER (SPECOM)》, 16 September 2017 (2017-09-16) * |
周艳萍: "机器人嵌入式语音识别系统设计与开发", 《中国优秀硕士学位论文全文数据库》, 15 May 2013 (2013-05-15) * |
Also Published As
Publication number | Publication date |
---|---|
KR20220017464A (en) | 2022-02-11 |
WO2021010997A1 (en) | 2021-01-21 |
US11217243B2 (en) | 2022-01-04 |
US20210335353A1 (en) | 2021-10-28 |
CN112534771B (en) | 2024-04-19 |
EP4134842A1 (en) | 2023-02-15 |
EP3785396A1 (en) | 2021-03-03 |
US20240144928A1 (en) | 2024-05-02 |
EP3785396B1 (en) | 2022-09-21 |
US11869504B2 (en) | 2024-01-09 |
US20220122608A1 (en) | 2022-04-21 |
Similar Documents
Publication | Publication Date | Title |
---|---|---|
US11829435B2 (en) | Secure digital assistant integration in web pages | |
US11924644B2 (en) | Secure communication in mobile digital pages | |
EP3762889B1 (en) | Secure digital assistant integration in web pages | |
US20210337249A1 (en) | Generating and updating voice-based software applications using application templates | |
US20220308987A1 (en) | Debugging applications for delivery via an application delivery server | |
US20240144928A1 (en) | Systems and methods to verify trigger keywords in acoustic-based digital assistant applications | |
EP3729259B1 (en) | Assessing applications for delivery via an application delivery server | |
KR102664371B1 (en) | System and method for validating trigger keywords in sound-based digital assistant applications | |
KR20240067283A (en) | Systems and methods to verify trigger keywords in acoustic-based digital assistant applications |
Legal Events
Date | Code | Title | Description |
---|---|---|---|
PB01 | Publication | ||
PB01 | Publication | ||
SE01 | Entry into force of request for substantive examination | ||
SE01 | Entry into force of request for substantive examination | ||
GR01 | Patent grant | ||
GR01 | Patent grant |