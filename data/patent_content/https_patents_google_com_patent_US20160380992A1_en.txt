US20160380992A1 - Authentication specific data - Google Patents
Authentication specific data Download PDFInfo
- Publication number
- US20160380992A1 US20160380992A1 US15/117,421 US201515117421A US2016380992A1 US 20160380992 A1 US20160380992 A1 US 20160380992A1 US 201515117421 A US201515117421 A US 201515117421A US 2016380992 A1 US2016380992 A1 US 2016380992A1
- Authority
- US
- United States
- Prior art keywords
- authentication
- authentication token
- specific information
- token
- user
- Prior art date
- Legal status (The legal status is an assumption and is not a legal conclusion. Google has not performed a legal analysis and makes no representation as to the accuracy of the status listed.)
- Abandoned
Links
Images
Classifications
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04L—TRANSMISSION OF DIGITAL INFORMATION, e.g. TELEGRAPHIC COMMUNICATION
- H04L63/00—Network architectures or network communication protocols for network security
- H04L63/08—Network architectures or network communication protocols for network security for authentication of entities
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F21/00—Security arrangements for protecting computers, components thereof, programs or data against unauthorised activity
- G06F21/60—Protecting data
- G06F21/62—Protecting access to data via a platform, e.g. using keys or access control rules
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F16/00—Information retrieval; Database structures therefor; File system structures therefor
- G06F16/20—Information retrieval; Database structures therefor; File system structures therefor of structured data, e.g. relational data
- G06F16/22—Indexing; Data structures therefor; Storage structures
- G06F16/2228—Indexing structures
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F16/00—Information retrieval; Database structures therefor; File system structures therefor
- G06F16/90—Details of database functions independent of the retrieved data types
- G06F16/95—Retrieval from the web
- G06F16/953—Querying, e.g. by the use of web search engines
- G06F16/9535—Search customisation based on user profiles and personalisation
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F16/00—Information retrieval; Database structures therefor; File system structures therefor
- G06F16/90—Details of database functions independent of the retrieved data types
- G06F16/95—Retrieval from the web
- G06F16/957—Browsing optimisation, e.g. caching or content distillation
-
- G06F17/30321—
-
- G06F17/30867—
-
- G06F17/30899—
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F21/00—Security arrangements for protecting computers, components thereof, programs or data against unauthorised activity
- G06F21/30—Authentication, i.e. establishing the identity or authorisation of security principals
- G06F21/31—User authentication
- G06F21/33—User authentication using certificates
- G06F21/335—User authentication using certificates for accessing specific resources, e.g. using Kerberos tickets
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F9/00—Arrangements for program control, e.g. control units
- G06F9/06—Arrangements for program control, e.g. control units using stored programs, i.e. using an internal store of processing equipment to receive or retain programs
- G06F9/44—Arrangements for executing specific programs
- G06F9/455—Emulation; Interpretation; Software simulation, e.g. virtualisation or emulation of application or operating system execution engines
- G06F9/45533—Hypervisors; Virtual machine monitors
- G06F9/45558—Hypervisor-specific management and integration aspects
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04L—TRANSMISSION OF DIGITAL INFORMATION, e.g. TELEGRAPHIC COMMUNICATION
- H04L63/00—Network architectures or network communication protocols for network security
- H04L63/08—Network architectures or network communication protocols for network security for authentication of entities
- H04L63/0807—Network architectures or network communication protocols for network security for authentication of entities using tickets, e.g. Kerberos
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F9/00—Arrangements for program control, e.g. control units
- G06F9/06—Arrangements for program control, e.g. control units using stored programs, i.e. using an internal store of processing equipment to receive or retain programs
- G06F9/44—Arrangements for executing specific programs
- G06F9/455—Emulation; Interpretation; Software simulation, e.g. virtualisation or emulation of application or operating system execution engines
- G06F9/45533—Hypervisors; Virtual machine monitors
- G06F9/45558—Hypervisor-specific management and integration aspects
- G06F2009/45595—Network integration; Enabling network access in virtual machine instances
Definitions
- the Internet provides access to a wide variety of information.
- digital image files, video and/or audio files, as well as web page resources for particular subjects or particular news articles are accessible over the Internet.
- web page resources many of these resources are designed to facilitate the performing of particular functions, such as blogging, booking hotel reservations, shopping, etc.
- Many of these resources are also personalized in that a user's specific history and user-specific information are shown on the resources when the user establishes an authenticated session with the publisher.
- an on-line shopping website may show the user's prior product browsing history and current orders
- an on-line music store may show the user's currently owned library of music; and so on.
- native applications that facilitate the performance of the same functions facilitated by the use of web page resources are now being provided in large numbers.
- other types of native applications such as games, may provide user-specific information, such as a user's game history.
- search engines are available for identifying particular resources accessible over the Internet. These search engines crawl and index the various web page resources and native applications. The search engines then uses the index to determine which resources are most responsive to a search query and provides search results that link to the resources in response to the query. Search engines, however, do not crawl or index information specific to users for web pages or native applications.
- one innovative aspect of the subject matter described in this specification can be embodied in methods that include the actions of: at a data processing apparatus, instantiating an instance of a browsing application; associating an authentication token with a browser session of the instance of the browsing application; requesting resources from publisher servers, each of the resources being a resource that provides authentication specific information specific to an authentication token, and each resource provides different authentication specific information for each different corresponding authentication token; for each publisher server, authenticating the authentication token for the browser session and receiving the authentication specific information in response; and associating the authentication specific information with only the authentication token; providing the authentication token and its associated authentication specific information to an indexer that indexes the authentication specific information, the resources, and the authentication token in an authentication specific corpus.
- Other embodiments of this aspect include corresponding systems, apparatus, and computer programs, configured to perform the actions of the methods, encoded on computer storage devices.
- Another innovative aspect of the subject matter described in this specification can be embodied in methods that include the actions of instantiating, at a first server, a session with a browser application on a user device, the user device being separate from the server; receiving, at the first server and from the user device, a request for an authentication token for the user device and unique to the user device; providing, from first server to the user device, the authentication token; receiving, at the first server and from a publisher server separate from the first server, the authentication token, wherein the authentication token was provided to the publisher server from the user device; authenticating, at the first server the authentication token, and in response providing to the publisher server an authentication notification that authenticates the authentication token.
- Other embodiments of this aspect include corresponding systems, apparatus, and computer programs, configured to perform the actions of the methods, encoded on computer storage devices.
- Another innovative aspect of the subject matter described in this specification can be embodied in methods that include the actions of requesting, by a publisher server, an authentication token from a user device in response to the user device requesting a resource from the publisher server; receiving, at the publisher server and from the user device, the authentication token; providing, from the publisher server to an authentication server, the authentication token, the authentication server being separate from the user device; receiving, from the authentication server, an authentication notification that authenticates the authentication token; and establishing an authenticated session between the publisher server and the user device based on the authentication notification.
- Other embodiments of this aspect include corresponding systems, apparatus, and computer programs, configured to perform the actions of the methods, encoded on computer storage devices.
- an authentication system does not store personal information that identifies the user; instead, a randomly generated authentication token is provided to the user device and associated with the user device, and the user device provides the authentication token to other websites or applications that require login. The publishers of the websites or applications then provide the authentication token to the authentication system for authentication. Thus, the identity of the user can be shielded from the authentication system.
- the authentication system can be used to verify the user account to publishers, and the publisher can then automatically login a user using publisher-side login credentials.
- the different login credentials of the user for different sites can be shielded from the authentication system, yet the user can still be automatically and safely logged into various sites that each use different login credentials.
- a search system can generate virtual machine instances and use the authentication tokens to receive and index resources and application page data that include authentication-specific information.
- the search engine in addition to searching a general web corpus index, also searches an authentication specific corpus index.
- the search of the authentication specific corpus index is constrained to data that is tied to the authentication token(s) associated with a user account or user device for which the search query was received. Accordingly, a user may be presented with authentication-specific information for the user in search results, in addition to general search results. Search operations are thus more likely to satisfy a user's informational need.
- FIG. 1 is a block diagram of an example environment in which authentication-specific data are indexed and searched.
- FIG. 2 is a system diagram of an example authentication data flow.
- FIG. 3 is a flow diagram of an example authentication process.
- FIG. 4 is a system diagram of an example authentication-specific crawling and indexing data flow.
- FIG. 5 is a flow diagram of an example process for crawling and indexing authentication-specific data.
- FIG. 6 is a flow diagram for providing authentication-specific data in response to a search query.
- FIG. 7 is an illustration of a search results page with an authentication-specific search result.
- a search system utilizes an authentication system to establish, for each user account (or, optionally, each user device), user sessions for resources and applications that require user logins.
- the authentication system generates a persistent token for a user device.
- the token may be specific to the user device, or may be specific to a user account. In the former case a unique token is provided to each user device; if the same user is using two different user devices, the tokens may be associated with a user account for that user. In the latter case, the same token may be provided to multiple user devices when a user presents login credentials to the authentication system.
- the authentication tokens can be provided to publishers to facilitate user logins for publisher websites.
- the authentication system by use of a back-end process between the publishers and the authentication system, is shielded from user login credentials to protect the user's privacy.
- the authentication system facilitates automatic logins of browsers and native applications, such as shopping apps, music apps, and the like.
- an authentication system does not store personal information that identifies the user; instead, a randomly generated authentication token is provided to the user device, and the user device provides the authentication token to other websites or applications that require logins.
- the publishers of the websites or applications then provide the authentication token to the authentication system for authentication. Upon receiving information that the authentication token is authenticated, the publishers may automatically login the users.
- the authentication system can be used to verify the user account to publishers, and the publisher can then automatically login a user using publisher-side login credentials.
- the publisher-side login credentials may be the user's login credentials (e.g., a user name and password) or may be a separate set of login credentials reserved specifically for logins by use of the authentication token.
- a search system in communication with the authentication system can use the authentication system to crawl and index authentication-specific information.
- the search system generates virtual machine instances of user devices and uses, for each of a plurality of user accounts, corresponding authentication tokens to receive and index resources and application page data that include authentication-specific information for users of the user accounts. Thereafter, when a user searches for information, the search engine, in addition to searching a general web corpus index, also searches an authentication-specific corpus index.
- the search of the authentication specific corpus index is constrained to data that is tied to the authentication token(s) associated with a user account for which the search query is received.
- the user is presented with general search results and authentication-specific information for the user in authentication-specific search results.
- the user may further instruct the search engine to not index authentication-specific information for the user if the user desires that such information not be crawled and indexed.
- each publisher may be required to specify resources and applications to be crawled and indexed for authentication-specific information. Failure to specify such resources and applications will result in the resources and applications not being crawled for such authentication-specific information.
- the users may be provided with an opportunity to control whether programs or features collect user information (e.g., information about a user's social network, social actions or activities, profession, a user's preferences, or a user's current location), or to control whether and/or how to receive content from the content server that may be more relevant to the user.
- user information e.g., information about a user's social network, social actions or activities, profession, a user's preferences, or a user's current location
- certain data may be treated in one or more ways before it is stored or used, so that personally identifiable information is removed.
- a user's identity may be treated so that no personally identifiable information can be determined for the user, or a user's geographic location may be generalized where location information is obtained (such as to a city, ZIP code, or state level), so that a particular location of a user cannot be determined.
- location information such as to a city, ZIP code, or state level
- the user may have control over how information is collected about the user and used by a content server.
- FIG. 1 is a block diagram of an example environment 100 in which authentication-specific data are indexed and searched.
- a computer network 102 such as the Internet, connects resource publisher web sites 104 , application publishers 106 , user devices 108 and a search engine 110 .
- An authentication system 120 , user device virtual machines 130 and an indexer 140 also facilitate the crawling and indexing of authentication-specification information.
- the authentication system 120 can also be used to facilitate automatic logins of users to various websites and applications, as will be described in more detail below.
- a resource publisher website 104 includes one or more web resources 105 associated with a domain and hosted by one or more servers in one or more locations.
- a resource publisher website is a collection of web pages formatted in hypertext markup language (HTML) that can contain text, images, multimedia content, and programming elements.
- HTML hypertext markup language
- Each website 104 is maintained by a content publisher, which is an entity that controls, manages and/or owns the website 104 .
- a web page resource is any data that can be provided by a publisher website 104 over the network 102 and that has a resource address, e.g., a uniform resource locator (URL).
- Web resources may be HTML pages, images files, video files, audio files, and feed sources, to name just a few.
- the resources may include embedded information, e.g., meta information and hyperlinks, and/or embedded instructions, e.g., client-side scripts.
- An application publisher website 106 may also include one or more web resources 105 , and also provides native applications 107 .
- a native application 107 is an application specifically designed to run on a particular user device operating system and machine firmware.
- an “application page” is a particular display environment within a native application and in which is displayed content, such as text, images, and the like.
- An application page is specific to the particular native application, and the native application is specific to the particular operating system of the user device 108 .
- An application page differs from a rendered web resource in that the application page is generated within and specific to the native application, while a web resource may be rendered in any browser for which the web page resource is compatible, and is independent of the operating system of the user device.
- a user device 108 is an electronic device that is under the control of a user.
- a user device 108 is typically capable of requesting and receiving web page resources 104 and native applications 107 over the network 102 .
- Example user devices 108 include personal computers, mobile communication devices, and tablet computers.
- the search engine 110 accesses a general corpus index 112 and an authentication-specific corpus index 114 .
- the general corpus index 112 is an index of web resources 105 and native application 107 page data.
- the authentication-specific corpus index 114 is an index of authentication-specification information from resources 105 and application pages for native applications 107 , and is constructed using virtual machines 130 and an indexer 140 . Although shown as separate indexes, the general corpus index 112 and the authentication-specific corpus index 114 can be combined in a single index.
- authentication-specific information or data is information that that is different for each user, and that is provided only in response to the establishment of a session authenticated for a user with a publisher.
- authentication-specific information is shopping history information and current orders for a user provided by a retailer website webpage, such as an “account information” webpage; data describing a library of songs currently owned by a user and purchased from an on-line media seller; and the like.
- the user devices 108 submit search queries to the search engine 110 .
- the search engine 110 accesses the general corpus index 112 and the authentication-specific corpus index 114 to identify general information and authentication-specific information, respectively, that are relevant to the query.
- the search engine 110 may, for example, identify the resources and applications in the form of general search results and authentication-specific search results, respectively.
- the search results are provided to the user device 108 from which the query was received.
- the search results may include web resource search results and native application search results.
- a web resource search result is data generated by the search engine 110 that identifies a web resource and provides information that satisfies a particular search query.
- a web resource search result for a resource can include a web page title, a snippet of text extracted from the resource, and a resource locator for the resource, e.g., the URL of a web page.
- a native application search result specifies a native application, and a variety of functions can be invoked by the selection of an application search result. For example, selection of a native application search result may cause the native application to launch (if installed on the user device 108 ) and generate an instance of application page referenced in the application search result and that includes content that is relevant to the search query. Such a function is referred to as “deep linking” within the application search result.
- FIG. 2 is a system diagram 200 of an example authentication data flow.
- the data flow of FIG. 2 is also described with reference to FIG. 3 , is a flow diagram of an example authentication process 300 .
- the process 300 is divided into sub-processes 302 , 304 , and 306 that take place at the user device, authentication server, and the publisher server, respectively.
- the authentication system 120 instantiates a session with an application 202 on a user device. This is represented by flow element 1 in FIG. 2 .
- the application may be a browser, or a native application that sends and receives data over a network, such as a video game, a shopping app, and the like.
- a browser is the application 202 .
- the browser may include a “log in” button on an initial resource 204 when initially loaded.
- the user may provide his or her login credentials to the authentication system 120 .
- One example is the use of a web browser associated with a search engine that includes the authentication system.
- the sessions is created for the user device 108 .
- the session may be based on the device itself, or, alternatively, may be based on a user account that may transfer from one device to another.
- the session may be persistent in that the session may last indefinitely, or for several months. In these situations the session is not cookie-based, nor is the resulting authentication token.
- the user device may provide a unique identifier, e.g., a MAC address, or a serial number uniquely associated with the browser, and thus whenever the user again activates the browser the user may be “automatically” logged in by the authentication system 120 , whether or not the user is actually “logged in” to a user account.
- the user may be required to log into the authentication system 120 after logging out, such as may occur when a user manually logs out. As will be described in more detail below, this step, represented by flow element 1 , is optional and can be done at a later time.
- the user device 108 requests a resource 214 from the publisher server 210 .
- the publisher 210 can provide the resource with an instruction that requests an authentication token for the user.
- the authentication token can be used to log in the user without requiring the user to provide user credentials specific to the publisher.
- the publisher 210 augments its user account data with an authentication token field for each user account.
- the authentication token once received and authenticated, can then be used to establish an authenticated session (e.g., a session that provides information specific to a user for which the session is authenticated).
- the publisher 210 may request the authentication token from the browser for each request.
- the browser is configured to provide header information with the request to notify the publisher 210 that the publisher may request the authentication token.
- the resource is provided with the instruction that causes the browser on the user device to provide the authentication token.
- the publisher server provides the resource 214 to the user device and requests the token from the user device 108 .
- This is represented by flow element 3 of FIG. 2 . If the user device 108 has the token stored locally, then the user device 108 will provide the token to the publisher 210 . However, assume the user device does not have the authentication token stored locally; in such a situation, the user device 108 will request the token from the authentication system 108 .
- the user device 108 requests the authentication token from authentication system 120 .
- the authentication system 210 will receive the request and determine if a session is established. If a session is not established (e.g., the flow element 1 of FIG. 2 was skipped), then the authentication system 120 can request the user log in to the authentication system 120 using authentication credentials specific to the authentication system 120 . If a session was previously established but the user logged out, the authentication system can use a device identifier or a browser identifier to access the authentication token associated with the user device.
- the authentication system 120 provides the authentication token to the user device 108 . This is represented by flow element 5 . Thereafter, at 320 , the user device 108 provides the authentication token to the publisher server 210 , as represented by flow element 6 .
- the publisher server 210 then requests the authentication system 120 to authenticate the authentication token. This is represented by flow element 7 .
- the publisher server 210 sends the authentication token to the authentication system 120 , and the authentication system 120 looks up the token. Provided the token is valid, it is authenticated.
- the authentication system 120 authenticates the token and sends an authentication notification to the publisher server 210 . This is represented by flow element 8 .
- the publisher server 210 then, at 326 , establishes an authenticated session and provides authentication specific information, as represented by flow element 9 .
- the authentication session of the publisher 108 can be established several ways.
- the publisher server 210 will store the authentication token with user access credentials that are specific to the publisher server 210 . If the authentication token is already stored at the publisher server 210 , the user may be automatically logged in under the user's credentials. If, however, the authentication token is not stored at the publisher server 210 , then the publisher server 210 may request the user to login using the user's credentials and the associate the user's credentials with the authentication token.
- This latter case may occur when the user is logging in to the publisher server 210 for the first time, such as when the user establishes an account; or when the user is logging in to the publisher server 210 for the first time by use of the authentication token; or when the authentication server 210 issues a new authentication token to the user, e.g., in the even that a previously issued authentication token has expired.
- one authentication token is used for a user device for one publisher server.
- the same authentication token can be used for different publisher servers, and thus once the user device has the authentication token stored locally, it need not go back to the authentication 120 system unless the authentication token has expired.
- a unique authentication token can be generated for the user device for each publisher server.
- the user device (or user account) is associated with multiple authentication tokens, each uniquely associating the user device and one publisher.
- the authentication token can be a randomly generated value, or some other value that is uniquely associated with the user device, or, alternatively, a user account.
- FIG. 4 is a system diagram 400 of an example authentication-specific crawling and indexing data flow.
- the data flow is described with reference to FIG. 5 , which is a flow diagram of an example process 500 for crawling and indexing authentication-specific data.
- the process 500 can be used in a search system that incorporates the authentication specific crawler 310 and instantiates the virtual machine instances 130 .
- the process 500 instantiates, for each of a plurality of user accounts, a virtual machine instance of an application 202 ( 502 ).
- the authentication specific crawler 410 instantiates the virtual machines, and launches a browser in each machine.
- Other applications as described above can also be instantiated.
- This process step is similar to step 310 of FIG. 3 ; however, the authentication specific crawler 310 creates the session and causes the authentication system 110 to issue an authentication token.
- the authentication token that is issued is one that has been previously issued for an actual user device or user account.
- the process 500 for each virtual machine instance, instantiates a browser session for an authentication token ( 504 ). This is represented by flow element 1 in FIG. 4 , and is similar to the establishment of a session as described in FIG. 2 . However, as described above, the authentication specific crawler 310 creates the session and causes the authentication system 110 to issue an authentication token.
- the process 500 requests resources from publisher servers ( 506 ).
- an example resource 214 is requested from the publisher 210 , as illustrated by process flow 2 .
- the resources that are requested are, in some implementations, only resources previously requested by requests associated with the authentication token.
- the virtual machine 130 and the publisher server 210 may thereafter perform the necessary steps to request the authentication token as described with reference to FIG. 2 above.
- the authentication specific crawler 310 does not have access to user credentials for logging into the publisher server 210 , sessions are only established for publisher servers 210 for which authenticated sessions have previously been established by a user and for which a device used by the user can be automatically logged in using a corresponding authentication token.
- the process 500 for each publisher server, authenticates the authentication token for the browser session and receives the authentication specific information in response ( 508 ). This is represented by flow elements 7 , 8 , and 9 in FIG. 4 , and is similar to the steps taken for flow elements 7 , 8 and 9 in FIG. 2 .
- the process 500 associates the authentication specific information with only the authentication token for the virtual machine instance ( 510 ).
- authentication specific information is provided for the resource 214 .
- Examples of authentication specific information may be a list of songs and videos in a user's digital library from a digital media provider; a list of prior orders and current orders for the user in the user's account for an online retailer; a user's list of virtual items, experience, and other user information for an online gaming environment; and so on.
- the process 500 provides each authentication token and its associated authentication specific information to an indexer 140 that indexes the authentication specific information, the resources, and the authentication token 114 in an authentication specific corpus ( 512 ).
- the indexer 140 and the corpus index 114 are maintained by a search system. Any appropriate indexing process may be used.
- a search system may then provide users with the ability to search authentication-specific information that is specific to the user. Because the search is constrained by authentication tokens, only the user's authentication-specification information is available to the user, and authentication-specific information for other authentication tokens not associated with the user will not be provided to the user.
- FIG. 6 is a flow diagram of an example process 600 for providing authentication-specific data in response to a search query.
- the process 600 can be used in a search system.
- the process 600 receives a search query from a user device and in response provides the search query and the authentication token to a search service ( 602 ).
- a user device may provide a query through a search interface.
- the query may be provided with the authentication token, or the search system may use an identifier, such as a user account if the user is logged into an account maintained by the search system, or a device identifier, or a browser identifier, to obtain the corresponding authentication token.
- the process 600 receive from the search service a set of search results, the set of search results including general search results and authentication specific search results ( 604 ).
- the general search results identify first resources indexed in a general resource corpus index 112
- the authentication specific search results identify resources and authentication-specific information indexed in the authentication specific corpus index 114 .
- the authentication specific search results are generated in response to a search constrained to only the authentication specific information associated with the authentication token.
- a variety of appropriate search processing algorithms can be used.
- the process 600 provides the set of search results to the user device ( 606 ).
- the search results are then displayed on the user device.
- FIG. 7 is an illustration of a search results page 700 with an authentication-specific search result 720 .
- Displayed in the search results page 700 are search results 710 , 720 and 730 , each of which identify information responsive to the query “Vivaldi” displayed in the search input field 704 .
- the search result 710 lists a portion of a user's library of purchased music. Because the user has purchased three compositions composed by Vivaldi, the three compositions are listed in the authentication-specific search result 710 .
- Two other search results 720 and 730 identify data indexed in the general corpus index 112 that are responsive to the query.
- the authentication specific search result 710 would list the different compositions and the different provider for that user.
- authentication-specific search results can include results identifying application specific pages indexed in the authentication specific corpus index 114 .
- the application specific result may include a URI that deep links into the application, and selection of an application specific result can cause the application to launch and invoke the particular application specific page.
- Embodiments of the subject matter and the operations described in this specification can be implemented in digital electronic circuitry, or in computer software, firmware, or hardware, including the structures disclosed in this specification and their structural equivalents, or in combinations of one or more of them.
- Embodiments of the subject matter described in this specification can be implemented as one or more computer programs, i.e., one or more modules of computer program instructions, encoded on computer storage medium for execution by, or to control the operation of, data processing apparatus.
- the program instructions can be encoded on an artificially-generated propagated signal, e.g., a machine-generated electrical, optical, or electromagnetic signal, that is generated to encode information for transmission to suitable receiver apparatus for execution by a data processing apparatus.
- a computer storage medium can be, or be included in, a computer-readable storage device, a computer-readable storage substrate, a random or serial access memory array or device, or a combination of one or more of them.
- a computer storage medium is not a propagated signal, a computer storage medium can be a source or destination of computer program instructions encoded in an artificially-generated propagated signal.
- the computer storage medium can also be, or be included in, one or more separate physical components or media (e.g., multiple CDs, disks, or other storage devices).
- the operations described in this specification can be implemented as operations performed by a data processing apparatus on data stored on one or more computer-readable storage devices or received from other sources.
- the term “data processing apparatus” encompasses all kinds of apparatus, devices, and machines for processing data, including by way of example a programmable processor, a computer, a system on a chip, or multiple ones, or combinations, of the foregoing
- the apparatus can include special purpose logic circuitry, e.g., an FPGA (field programmable gate array) or an ASIC (application-specific integrated circuit).
- the apparatus can also include, in addition to hardware, code that creates an execution environment for the computer program in question, e.g., code that constitutes processor firmware, a protocol stack, a database management system, an operating system, a cross-platform runtime environment, a virtual machine, or a combination of one or more of them.
- the apparatus and execution environment can realize various different computing model infrastructures, such as web services, distributed computing and grid computing infrastructures.
- a computer program (also known as a program, software, software application, script, or code) can be written in any form of programming language, including compiled or interpreted languages, declarative or procedural languages, and it can be deployed in any form, including as a stand-alone program or as a module, component, subroutine, object, or other unit suitable for use in a computing environment.
- a computer program may, but need not, correspond to a file in a file system.
- a program can be stored in a portion of a file that holds other programs or data (e.g., one or more scripts stored in a markup language document), in a single file dedicated to the program in question, or in multiple coordinated files (e.g., files that store one or more modules, sub-programs, or portions of code).
- a computer program can be deployed to be executed on one computer or on multiple computers that are located at one site or distributed across multiple sites and interconnected by a communication network.
- processors suitable for the execution of a computer program include, by way of example, both general and special purpose microprocessors, and any one or more processors of any kind of digital computer.
- a processor will receive instructions and data from a read-only memory or a random access memory or both.
- the essential elements of a computer are a processor for performing actions in accordance with instructions and one or more memory devices for storing instructions and data.
- a computer will also include, or be operatively coupled to receive data from or transfer data to, or both, one or more mass storage devices for storing data, e.g., magnetic, magneto-optical disks, or optical disks.
- mass storage devices for storing data
- a computer need not have such devices.
- a computer can be embedded in another device, e.g., a mobile telephone, a personal digital assistant (PDA), a mobile audio or video player, a game console, a Global Positioning System (GPS) receiver, or a portable storage device (e.g., a universal serial bus (USB) flash drive), to name just a few.
- PDA personal digital assistant
- GPS Global Positioning System
- USB universal serial bus
- Devices suitable for storing computer program instructions and data include all forms of non-volatile memory, media and memory devices, including by way of example semiconductor memory devices, e.g., EPROM, EEPROM, and flash memory devices; magnetic disks, e.g., internal hard disks or removable disks; magneto-optical disks; and CD-ROM and DVD-ROM disks.
- semiconductor memory devices e.g., EPROM, EEPROM, and flash memory devices
- magnetic disks e.g., internal hard disks or removable disks
- magneto-optical disks e.g., CD-ROM and DVD-ROM disks.
- the processor and the memory can be supplemented by, or incorporated in, special purpose logic circuitry.
- a computer having a display device, e.g., a CRT (cathode ray tube) or LCD (liquid crystal display) monitor, for displaying information to the user and a keyboard and a pointing device, e.g., a mouse or a trackball, by which the user can provide input to the computer.
- a display device e.g., a CRT (cathode ray tube) or LCD (liquid crystal display) monitor
- keyboard and a pointing device e.g., a mouse or a trackball
- Other kinds of devices can be used to provide for interaction with a user as well; for example, feedback provided to the user can be any form of sensory feedback, e.g., visual feedback, auditory feedback, or tactile feedback; and input from the user can be received in any form, including acoustic, speech, or tactile input.
- a computer can interact with a user by sending documents to and receiving documents from a device that is used by the user; for example, by sending web pages to a
- Embodiments of the subject matter described in this specification can be implemented in a computing system that includes a back-end component, e.g., as a data server, or that includes a middleware component, e.g., an application server, or that includes a front-end component, e.g., a user computer having a graphical user interface or a Web browser through which a user can interact with an implementation of the subject matter described in this specification, or any combination of one or more such back-end, middleware, or front-end components.
- the components of the system can be interconnected by any form or medium of digital data communication, e.g., a communication network.
- Examples of communication networks include a local area network (“LAN”) and a wide area network (“WAN”), an inter-network (e.g., the Internet), and peer-to-peer networks (e.g., ad hoc peer-to-peer networks).
- LAN local area network
- WAN wide area network
- inter-network e.g., the Internet
- peer-to-peer networks e.g., ad hoc peer-to-peer networks.
- the computing system can include users and servers.
- a user and server are generally remote from each other and typically interact through a communication network. The relationship of user and server arises by virtue of computer programs running on the respective computers and having a user-server relationship to each other.
- a server transmits data (e.g., an HTML page) to a user device (e.g., for purposes of displaying data to and receiving user input from a user interacting with the user device).
- Data generated at the user device e.g., a result of the user interaction
Abstract
Methods, systems, and apparatus, including computer programs encoded on a computer storage medium for managing authentications and processing authenitcation specific data. In one aspect, a method includes instantiating an instance of a browsing application ; associating an authentication token with a browser session of the instance of the browsing application; requesting resources from publisher servers, each of the resources being a resource that provides authentication specific information specific to an authentication token, and each resource provides different authentication specific information for each different corresponding authentication token; for each publisher server, authenticating the authentication token for the browser session and receiving the authentication specific information in response; and associating the authentication specific information with only the authentication token; providing the authentication token and its associated authentication specific information to an indexer that indexes the authentication specific information, the resources, and the authentication token in an authentication specific corpus.
Description
- The Internet provides access to a wide variety of information. For example, digital image files, video and/or audio files, as well as web page resources for particular subjects or particular news articles, are accessible over the Internet. With respect to web page resources, many of these resources are designed to facilitate the performing of particular functions, such as blogging, booking hotel reservations, shopping, etc. Many of these resources are also personalized in that a user's specific history and user-specific information are shown on the resources when the user establishes an authenticated session with the publisher. For example, an on-line shopping website may show the user's prior product browsing history and current orders; an on-line music store may show the user's currently owned library of music; and so on.
- Likewise, with the advent of tablet computers and smart phones, native applications that facilitate the performance of the same functions facilitated by the use of web page resources are now being provided in large numbers. Furthermore, other types of native applications, such as games, may provide user-specific information, such as a user's game history.
- A variety of search engines are available for identifying particular resources accessible over the Internet. These search engines crawl and index the various web page resources and native applications. The search engines then uses the index to determine which resources are most responsive to a search query and provides search results that link to the resources in response to the query. Search engines, however, do not crawl or index information specific to users for web pages or native applications.
- In general, one innovative aspect of the subject matter described in this specification can be embodied in methods that include the actions of: at a data processing apparatus, instantiating an instance of a browsing application; associating an authentication token with a browser session of the instance of the browsing application; requesting resources from publisher servers, each of the resources being a resource that provides authentication specific information specific to an authentication token, and each resource provides different authentication specific information for each different corresponding authentication token; for each publisher server, authenticating the authentication token for the browser session and receiving the authentication specific information in response; and associating the authentication specific information with only the authentication token; providing the authentication token and its associated authentication specific information to an indexer that indexes the authentication specific information, the resources, and the authentication token in an authentication specific corpus. Other embodiments of this aspect include corresponding systems, apparatus, and computer programs, configured to perform the actions of the methods, encoded on computer storage devices.
- Another innovative aspect of the subject matter described in this specification can be embodied in methods that include the actions of instantiating, at a first server, a session with a browser application on a user device, the user device being separate from the server; receiving, at the first server and from the user device, a request for an authentication token for the user device and unique to the user device; providing, from first server to the user device, the authentication token; receiving, at the first server and from a publisher server separate from the first server, the authentication token, wherein the authentication token was provided to the publisher server from the user device; authenticating, at the first server the authentication token, and in response providing to the publisher server an authentication notification that authenticates the authentication token. Other embodiments of this aspect include corresponding systems, apparatus, and computer programs, configured to perform the actions of the methods, encoded on computer storage devices.
- Another innovative aspect of the subject matter described in this specification can be embodied in methods that include the actions of requesting, by a publisher server, an authentication token from a user device in response to the user device requesting a resource from the publisher server; receiving, at the publisher server and from the user device, the authentication token; providing, from the publisher server to an authentication server, the authentication token, the authentication server being separate from the user device; receiving, from the authentication server, an authentication notification that authenticates the authentication token; and establishing an authenticated session between the publisher server and the user device based on the authentication notification. Other embodiments of this aspect include corresponding systems, apparatus, and computer programs, configured to perform the actions of the methods, encoded on computer storage devices.
- Particular embodiments of the subject matter described in this specification can be implemented so as to realize one or more of the following advantages. In some implementations, an authentication system does not store personal information that identifies the user; instead, a randomly generated authentication token is provided to the user device and associated with the user device, and the user device provides the authentication token to other websites or applications that require login. The publishers of the websites or applications then provide the authentication token to the authentication system for authentication. Thus, the identity of the user can be shielded from the authentication system.
- In other implementations in which the authentication token is tied to a user account, the authentication system can be used to verify the user account to publishers, and the publisher can then automatically login a user using publisher-side login credentials. Thus, the different login credentials of the user for different sites can be shielded from the authentication system, yet the user can still be automatically and safely logged into various sites that each use different login credentials.
- A search system can generate virtual machine instances and use the authentication tokens to receive and index resources and application page data that include authentication-specific information. When a user searches for information, the search engine, in addition to searching a general web corpus index, also searches an authentication specific corpus index. The search of the authentication specific corpus index is constrained to data that is tied to the authentication token(s) associated with a user account or user device for which the search query was received. Accordingly, a user may be presented with authentication-specific information for the user in search results, in addition to general search results. Search operations are thus more likely to satisfy a user's informational need.
- The details of one or more embodiments of the subject matter described in this specification are set forth in the accompanying drawings and the description below. Other features, aspects, and advantages of the subject matter will become apparent from the description, the drawings, and the claims.
-
FIG. 1 is a block diagram of an example environment in which authentication-specific data are indexed and searched. -
FIG. 2 is a system diagram of an example authentication data flow. -
FIG. 3 is a flow diagram of an example authentication process. -
FIG. 4 is a system diagram of an example authentication-specific crawling and indexing data flow. -
FIG. 5 is a flow diagram of an example process for crawling and indexing authentication-specific data. -
FIG. 6 is a flow diagram for providing authentication-specific data in response to a search query. -
FIG. 7 is an illustration of a search results page with an authentication-specific search result. - Like reference numbers and designations in the various drawings indicate like elements.
- Overview
- A search system utilizes an authentication system to establish, for each user account (or, optionally, each user device), user sessions for resources and applications that require user logins. The authentication system generates a persistent token for a user device. The token may be specific to the user device, or may be specific to a user account. In the former case a unique token is provided to each user device; if the same user is using two different user devices, the tokens may be associated with a user account for that user. In the latter case, the same token may be provided to multiple user devices when a user presents login credentials to the authentication system.
- The authentication tokens can be provided to publishers to facilitate user logins for publisher websites. The authentication system, by use of a back-end process between the publishers and the authentication system, is shielded from user login credentials to protect the user's privacy. The authentication system facilitates automatic logins of browsers and native applications, such as shopping apps, music apps, and the like. In some implementations, an authentication system does not store personal information that identifies the user; instead, a randomly generated authentication token is provided to the user device, and the user device provides the authentication token to other websites or applications that require logins. The publishers of the websites or applications then provide the authentication token to the authentication system for authentication. Upon receiving information that the authentication token is authenticated, the publishers may automatically login the users.
- In other implementations in which the authentication token is tied to a user account, the authentication system can be used to verify the user account to publishers, and the publisher can then automatically login a user using publisher-side login credentials. The publisher-side login credentials may be the user's login credentials (e.g., a user name and password) or may be a separate set of login credentials reserved specifically for logins by use of the authentication token.
- A search system in communication with the authentication system can use the authentication system to crawl and index authentication-specific information. The search system generates virtual machine instances of user devices and uses, for each of a plurality of user accounts, corresponding authentication tokens to receive and index resources and application page data that include authentication-specific information for users of the user accounts. Thereafter, when a user searches for information, the search engine, in addition to searching a general web corpus index, also searches an authentication-specific corpus index. The search of the authentication specific corpus index is constrained to data that is tied to the authentication token(s) associated with a user account for which the search query is received. The user is presented with general search results and authentication-specific information for the user in authentication-specific search results.
- The user may further instruct the search engine to not index authentication-specific information for the user if the user desires that such information not be crawled and indexed. Furthermore, each publisher may be required to specify resources and applications to be crawled and indexed for authentication-specific information. Failure to specify such resources and applications will result in the resources and applications not being crawled for such authentication-specific information.
- These features and additional features are described in more detail below.
- In situations in which the systems discussed here collect personal information about users, or may make use of personal information, the users may be provided with an opportunity to control whether programs or features collect user information (e.g., information about a user's social network, social actions or activities, profession, a user's preferences, or a user's current location), or to control whether and/or how to receive content from the content server that may be more relevant to the user. In addition, certain data may be treated in one or more ways before it is stored or used, so that personally identifiable information is removed. For example, a user's identity may be treated so that no personally identifiable information can be determined for the user, or a user's geographic location may be generalized where location information is obtained (such as to a city, ZIP code, or state level), so that a particular location of a user cannot be determined. Thus, the user may have control over how information is collected about the user and used by a content server.
- Example Operating Environment
-
FIG. 1 is a block diagram of anexample environment 100 in which authentication-specific data are indexed and searched. Acomputer network 102, such as the Internet, connects resourcepublisher web sites 104,application publishers 106,user devices 108 and asearch engine 110. Anauthentication system 120, user devicevirtual machines 130 and anindexer 140 also facilitate the crawling and indexing of authentication-specification information. Theauthentication system 120 can also be used to facilitate automatic logins of users to various websites and applications, as will be described in more detail below. - A
resource publisher website 104 includes one ormore web resources 105 associated with a domain and hosted by one or more servers in one or more locations. Generally, a resource publisher website is a collection of web pages formatted in hypertext markup language (HTML) that can contain text, images, multimedia content, and programming elements. Eachwebsite 104 is maintained by a content publisher, which is an entity that controls, manages and/or owns thewebsite 104. - A web page resource is any data that can be provided by a
publisher website 104 over thenetwork 102 and that has a resource address, e.g., a uniform resource locator (URL). Web resources may be HTML pages, images files, video files, audio files, and feed sources, to name just a few. The resources may include embedded information, e.g., meta information and hyperlinks, and/or embedded instructions, e.g., client-side scripts. - An
application publisher website 106 may also include one ormore web resources 105, and also providesnative applications 107. Anative application 107 is an application specifically designed to run on a particular user device operating system and machine firmware. As used in this specification, an “application page” is a particular display environment within a native application and in which is displayed content, such as text, images, and the like. An application page is specific to the particular native application, and the native application is specific to the particular operating system of theuser device 108. An application page differs from a rendered web resource in that the application page is generated within and specific to the native application, while a web resource may be rendered in any browser for which the web page resource is compatible, and is independent of the operating system of the user device. - A
user device 108 is an electronic device that is under the control of a user. Auser device 108 is typically capable of requesting and receivingweb page resources 104 andnative applications 107 over thenetwork 102.Example user devices 108 include personal computers, mobile communication devices, and tablet computers. - To search
web resources 105 and thenative applications 107, thesearch engine 110 accesses ageneral corpus index 112 and an authentication-specific corpus index 114. Thegeneral corpus index 112 is an index ofweb resources 105 andnative application 107 page data. The authentication-specific corpus index 114 is an index of authentication-specification information fromresources 105 and application pages fornative applications 107, and is constructed usingvirtual machines 130 and anindexer 140. Although shown as separate indexes, thegeneral corpus index 112 and the authentication-specific corpus index 114 can be combined in a single index. As used herein, authentication-specific information or data is information that that is different for each user, and that is provided only in response to the establishment of a session authenticated for a user with a publisher. An example of authentication-specific information is shopping history information and current orders for a user provided by a retailer website webpage, such as an “account information” webpage; data describing a library of songs currently owned by a user and purchased from an on-line media seller; and the like. - The
user devices 108 submit search queries to thesearch engine 110. In response to each query, thesearch engine 110 accesses thegeneral corpus index 112 and the authentication-specific corpus index 114 to identify general information and authentication-specific information, respectively, that are relevant to the query. Thesearch engine 110 may, for example, identify the resources and applications in the form of general search results and authentication-specific search results, respectively. Once generated, the search results are provided to theuser device 108 from which the query was received. - The search results may include web resource search results and native application search results. A web resource search result is data generated by the
search engine 110 that identifies a web resource and provides information that satisfies a particular search query. A web resource search result for a resource can include a web page title, a snippet of text extracted from the resource, and a resource locator for the resource, e.g., the URL of a web page. A native application search result specifies a native application, and a variety of functions can be invoked by the selection of an application search result. For example, selection of a native application search result may cause the native application to launch (if installed on the user device 108) and generate an instance of application page referenced in the application search result and that includes content that is relevant to the search query. Such a function is referred to as “deep linking” within the application search result. - Authentication
- The
authentication system 120 also facilitates automatic logins of browsers and native applications, such as shopping apps, music apps, and the like.FIG. 2 is a system diagram 200 of an example authentication data flow. The data flow ofFIG. 2 is also described with reference toFIG. 3 , is a flow diagram of anexample authentication process 300. Theprocess 300 is divided intosub-processes - At 310, the
authentication system 120 instantiates a session with anapplication 202 on a user device. This is represented byflow element 1 inFIG. 2 . The application may be a browser, or a native application that sends and receives data over a network, such as a video game, a shopping app, and the like. For this example, a browser is theapplication 202. - The browser may include a “log in” button on an
initial resource 204 when initially loaded. The user may provide his or her login credentials to theauthentication system 120. One example is the use of a web browser associated with a search engine that includes the authentication system. Once the user logs in, the sessions is created for theuser device 108. The session may be based on the device itself, or, alternatively, may be based on a user account that may transfer from one device to another. In some implementations, the session may be persistent in that the session may last indefinitely, or for several months. In these situations the session is not cookie-based, nor is the resulting authentication token. For example, the user device may provide a unique identifier, e.g., a MAC address, or a serial number uniquely associated with the browser, and thus whenever the user again activates the browser the user may be “automatically” logged in by theauthentication system 120, whether or not the user is actually “logged in” to a user account. In variations of this implementation, the user may be required to log into theauthentication system 120 after logging out, such as may occur when a user manually logs out. As will be described in more detail below, this step, represented byflow element 1, is optional and can be done at a later time. - At 312, the
user device 108 requests aresource 214 from thepublisher server 210. This is represented byflow element 2 ofFIG. 2 . If the resource is one for which a user may provide login credentials, thepublisher 210 can provide the resource with an instruction that requests an authentication token for the user. The authentication token can be used to log in the user without requiring the user to provide user credentials specific to the publisher. Assuming the publisher supports the authentication process, thepublisher 210 augments its user account data with an authentication token field for each user account. The authentication token, once received and authenticated, can then be used to establish an authenticated session (e.g., a session that provides information specific to a user for which the session is authenticated). - In some implementations, the
publisher 210, by use of a script API, may request the authentication token from the browser for each request. In other implementations, the browser is configured to provide header information with the request to notify thepublisher 210 that the publisher may request the authentication token. In the latter case, the resource is provided with the instruction that causes the browser on the user device to provide the authentication token. - At 314, the publisher server provides the
resource 214 to the user device and requests the token from theuser device 108. This is represented byflow element 3 ofFIG. 2 . If theuser device 108 has the token stored locally, then theuser device 108 will provide the token to thepublisher 210. However, assume the user device does not have the authentication token stored locally; in such a situation, theuser device 108 will request the token from theauthentication system 108. - At 316, the
user device 108 requests the authentication token fromauthentication system 120. This is represented byflow element 4. Theauthentication system 210 will receive the request and determine if a session is established. If a session is not established (e.g., theflow element 1 ofFIG. 2 was skipped), then theauthentication system 120 can request the user log in to theauthentication system 120 using authentication credentials specific to theauthentication system 120. If a session was previously established but the user logged out, the authentication system can use a device identifier or a browser identifier to access the authentication token associated with the user device. - At 318, the
authentication system 120 provides the authentication token to theuser device 108. This is represented byflow element 5. Thereafter, at 320, theuser device 108 provides the authentication token to thepublisher server 210, as represented byflow element 6. - At 322, the
publisher server 210 then requests theauthentication system 120 to authenticate the authentication token. This is represented byflow element 7. Thepublisher server 210 sends the authentication token to theauthentication system 120, and theauthentication system 120 looks up the token. Provided the token is valid, it is authenticated. - At 324, the
authentication system 120 authenticates the token and sends an authentication notification to thepublisher server 210. This is represented byflow element 8. Thepublisher server 210 then, at 326, establishes an authenticated session and provides authentication specific information, as represented byflow element 9. - The authentication session of the
publisher 108 can be established several ways. In one example, thepublisher server 210 will store the authentication token with user access credentials that are specific to thepublisher server 210. If the authentication token is already stored at thepublisher server 210, the user may be automatically logged in under the user's credentials. If, however, the authentication token is not stored at thepublisher server 210, then thepublisher server 210 may request the user to login using the user's credentials and the associate the user's credentials with the authentication token. This latter case may occur when the user is logging in to thepublisher server 210 for the first time, such as when the user establishes an account; or when the user is logging in to thepublisher server 210 for the first time by use of the authentication token; or when theauthentication server 210 issues a new authentication token to the user, e.g., in the even that a previously issued authentication token has expired. - In the example described above, one authentication token is used for a user device for one publisher server. The same authentication token can be used for different publisher servers, and thus once the user device has the authentication token stored locally, it need not go back to the
authentication 120 system unless the authentication token has expired. In other implementations, a unique authentication token can be generated for the user device for each publisher server. In these implementations, the user device (or user account) is associated with multiple authentication tokens, each uniquely associating the user device and one publisher. - The authentication token can be a randomly generated value, or some other value that is uniquely associated with the user device, or, alternatively, a user account.
- Crawling And Indexing Authentication-Specific Information
-
FIG. 4 is a system diagram 400 of an example authentication-specific crawling and indexing data flow. The data flow is described with reference toFIG. 5 , which is a flow diagram of anexample process 500 for crawling and indexing authentication-specific data. Theprocess 500 can be used in a search system that incorporates the authenticationspecific crawler 310 and instantiates thevirtual machine instances 130. - The
process 500 instantiates, for each of a plurality of user accounts, a virtual machine instance of an application 202 (502). For example, the authenticationspecific crawler 410 instantiates the virtual machines, and launches a browser in each machine. Other applications as described above can also be instantiated. This process step is similar to step 310 ofFIG. 3 ; however, the authenticationspecific crawler 310 creates the session and causes theauthentication system 110 to issue an authentication token. The authentication token that is issued is one that has been previously issued for an actual user device or user account. - The
process 500, for each virtual machine instance, instantiates a browser session for an authentication token (504). This is represented byflow element 1 inFIG. 4 , and is similar to the establishment of a session as described inFIG. 2 . However, as described above, the authenticationspecific crawler 310 creates the session and causes theauthentication system 110 to issue an authentication token. - The
process 500, for each virtual machine instance, requests resources from publisher servers (506). InFIG. 3 , anexample resource 214 is requested from thepublisher 210, as illustrated byprocess flow 2. The resources that are requested are, in some implementations, only resources previously requested by requests associated with the authentication token. Thevirtual machine 130 and thepublisher server 210 may thereafter perform the necessary steps to request the authentication token as described with reference toFIG. 2 above. However, because the authenticationspecific crawler 310 does not have access to user credentials for logging into thepublisher server 210, sessions are only established forpublisher servers 210 for which authenticated sessions have previously been established by a user and for which a device used by the user can be automatically logged in using a corresponding authentication token. - The
process 500, for each publisher server, authenticates the authentication token for the browser session and receives the authentication specific information in response (508). This is represented byflow elements FIG. 4 , and is similar to the steps taken forflow elements FIG. 2 . - The
process 500 associates the authentication specific information with only the authentication token for the virtual machine instance (510). For example, as shown inFIG. 4 , authentication specific information is provided for theresource 214. Examples of authentication specific information may be a list of songs and videos in a user's digital library from a digital media provider; a list of prior orders and current orders for the user in the user's account for an online retailer; a user's list of virtual items, experience, and other user information for an online gaming environment; and so on. - The
process 500 provides each authentication token and its associated authentication specific information to anindexer 140 that indexes the authentication specific information, the resources, and theauthentication token 114 in an authentication specific corpus (512). Theindexer 140 and thecorpus index 114 are maintained by a search system. Any appropriate indexing process may be used. - By use of the
process 500 ofFIG. 5 , a search system may then provide users with the ability to search authentication-specific information that is specific to the user. Because the search is constrained by authentication tokens, only the user's authentication-specification information is available to the user, and authentication-specific information for other authentication tokens not associated with the user will not be provided to the user. -
FIG. 6 is a flow diagram of anexample process 600 for providing authentication-specific data in response to a search query. Theprocess 600 can be used in a search system. - The
process 600 receives a search query from a user device and in response provides the search query and the authentication token to a search service (602). For example, a user device may provide a query through a search interface. The query may be provided with the authentication token, or the search system may use an identifier, such as a user account if the user is logged into an account maintained by the search system, or a device identifier, or a browser identifier, to obtain the corresponding authentication token. - The
process 600 receive from the search service a set of search results, the set of search results including general search results and authentication specific search results (604). The general search results identify first resources indexed in a generalresource corpus index 112, and the authentication specific search results identify resources and authentication-specific information indexed in the authenticationspecific corpus index 114. The authentication specific search results are generated in response to a search constrained to only the authentication specific information associated with the authentication token. A variety of appropriate search processing algorithms can be used. - The
process 600 provides the set of search results to the user device (606). The search results are then displayed on the user device. One such example display is shown inFIG. 7 , which is an illustration of a search resultspage 700 with an authentication-specific search result 720. Displayed in the search resultspage 700 aresearch results search input field 704. Thesearch result 710 lists a portion of a user's library of purchased music. Because the user has purchased three compositions composed by Vivaldi, the three compositions are listed in the authentication-specific search result 710. Twoother search results general corpus index 112 that are responsive to the query. - Had another user issued the same query, and the other user had purchased different Vivaldi compositions from a different media provider, the authentication
specific search result 710 would list the different compositions and the different provider for that user. - Other types of authentication-specific search results can also be provided. For example, for an application that provides application-specific pages, such as a game app, or a shopping app, the set of search results can include results identifying application specific pages indexed in the authentication
specific corpus index 114. The application specific result may include a URI that deep links into the application, and selection of an application specific result can cause the application to launch and invoke the particular application specific page. - Additional Implementation Details
- Embodiments of the subject matter and the operations described in this specification can be implemented in digital electronic circuitry, or in computer software, firmware, or hardware, including the structures disclosed in this specification and their structural equivalents, or in combinations of one or more of them. Embodiments of the subject matter described in this specification can be implemented as one or more computer programs, i.e., one or more modules of computer program instructions, encoded on computer storage medium for execution by, or to control the operation of, data processing apparatus. Alternatively or in addition, the program instructions can be encoded on an artificially-generated propagated signal, e.g., a machine-generated electrical, optical, or electromagnetic signal, that is generated to encode information for transmission to suitable receiver apparatus for execution by a data processing apparatus. A computer storage medium can be, or be included in, a computer-readable storage device, a computer-readable storage substrate, a random or serial access memory array or device, or a combination of one or more of them. Moreover, while a computer storage medium is not a propagated signal, a computer storage medium can be a source or destination of computer program instructions encoded in an artificially-generated propagated signal. The computer storage medium can also be, or be included in, one or more separate physical components or media (e.g., multiple CDs, disks, or other storage devices).
- The operations described in this specification can be implemented as operations performed by a data processing apparatus on data stored on one or more computer-readable storage devices or received from other sources.
- The term “data processing apparatus” encompasses all kinds of apparatus, devices, and machines for processing data, including by way of example a programmable processor, a computer, a system on a chip, or multiple ones, or combinations, of the foregoing The apparatus can include special purpose logic circuitry, e.g., an FPGA (field programmable gate array) or an ASIC (application-specific integrated circuit). The apparatus can also include, in addition to hardware, code that creates an execution environment for the computer program in question, e.g., code that constitutes processor firmware, a protocol stack, a database management system, an operating system, a cross-platform runtime environment, a virtual machine, or a combination of one or more of them. The apparatus and execution environment can realize various different computing model infrastructures, such as web services, distributed computing and grid computing infrastructures.
- A computer program (also known as a program, software, software application, script, or code) can be written in any form of programming language, including compiled or interpreted languages, declarative or procedural languages, and it can be deployed in any form, including as a stand-alone program or as a module, component, subroutine, object, or other unit suitable for use in a computing environment. A computer program may, but need not, correspond to a file in a file system. A program can be stored in a portion of a file that holds other programs or data (e.g., one or more scripts stored in a markup language document), in a single file dedicated to the program in question, or in multiple coordinated files (e.g., files that store one or more modules, sub-programs, or portions of code). A computer program can be deployed to be executed on one computer or on multiple computers that are located at one site or distributed across multiple sites and interconnected by a communication network.
- The processes and logic flows described in this specification can be performed by one or more programmable processors executing one or more computer programs to perform actions by operating on input data and generating output. Processors suitable for the execution of a computer program include, by way of example, both general and special purpose microprocessors, and any one or more processors of any kind of digital computer. Generally, a processor will receive instructions and data from a read-only memory or a random access memory or both. The essential elements of a computer are a processor for performing actions in accordance with instructions and one or more memory devices for storing instructions and data. Generally, a computer will also include, or be operatively coupled to receive data from or transfer data to, or both, one or more mass storage devices for storing data, e.g., magnetic, magneto-optical disks, or optical disks. However, a computer need not have such devices. Moreover, a computer can be embedded in another device, e.g., a mobile telephone, a personal digital assistant (PDA), a mobile audio or video player, a game console, a Global Positioning System (GPS) receiver, or a portable storage device (e.g., a universal serial bus (USB) flash drive), to name just a few. Devices suitable for storing computer program instructions and data include all forms of non-volatile memory, media and memory devices, including by way of example semiconductor memory devices, e.g., EPROM, EEPROM, and flash memory devices; magnetic disks, e.g., internal hard disks or removable disks; magneto-optical disks; and CD-ROM and DVD-ROM disks. The processor and the memory can be supplemented by, or incorporated in, special purpose logic circuitry.
- To provide for interaction with a user, embodiments of the subject matter described in this specification can be implemented on a computer having a display device, e.g., a CRT (cathode ray tube) or LCD (liquid crystal display) monitor, for displaying information to the user and a keyboard and a pointing device, e.g., a mouse or a trackball, by which the user can provide input to the computer. Other kinds of devices can be used to provide for interaction with a user as well; for example, feedback provided to the user can be any form of sensory feedback, e.g., visual feedback, auditory feedback, or tactile feedback; and input from the user can be received in any form, including acoustic, speech, or tactile input. In addition, a computer can interact with a user by sending documents to and receiving documents from a device that is used by the user; for example, by sending web pages to a web browser on a user's user device in response to requests received from the web browser.
- Embodiments of the subject matter described in this specification can be implemented in a computing system that includes a back-end component, e.g., as a data server, or that includes a middleware component, e.g., an application server, or that includes a front-end component, e.g., a user computer having a graphical user interface or a Web browser through which a user can interact with an implementation of the subject matter described in this specification, or any combination of one or more such back-end, middleware, or front-end components. The components of the system can be interconnected by any form or medium of digital data communication, e.g., a communication network. Examples of communication networks include a local area network (“LAN”) and a wide area network (“WAN”), an inter-network (e.g., the Internet), and peer-to-peer networks (e.g., ad hoc peer-to-peer networks).
- The computing system can include users and servers. A user and server are generally remote from each other and typically interact through a communication network. The relationship of user and server arises by virtue of computer programs running on the respective computers and having a user-server relationship to each other. In some embodiments, a server transmits data (e.g., an HTML page) to a user device (e.g., for purposes of displaying data to and receiving user input from a user interacting with the user device). Data generated at the user device (e.g., a result of the user interaction) can be received from the user device at the server.
- While this specification contains many specific implementation details, these should not be construed as limitations on the scope of any inventions or of what may be claimed, but rather as descriptions of features specific to particular embodiments of particular inventions. Certain features that are described in this specification in the context of separate embodiments can also be implemented in combination in a single embodiment. Conversely, various features that are described in the context of a single embodiment can also be implemented in multiple embodiments separately or in any suitable subcombination. Moreover, although features may be described above as acting in certain combinations and even initially claimed as such, one or more features from a claimed combination can in some cases be excised from the combination, and the claimed combination may be directed to a subcombination or variation of a subcombination.
- Similarly, while operations are depicted in the drawings in a particular order, this should not be understood as requiring that such operations be performed in the particular order shown or in sequential order, or that all illustrated operations be performed, to achieve desirable results. In certain circumstances, multitasking and parallel processing may be advantageous. Moreover, the separation of various system components in the embodiments described above should not be understood as requiring such separation in all embodiments, and it should be understood that the described program components and systems can generally be integrated together in a single software product or packaged into multiple software products.
- Thus, particular embodiments of the subject matter have been described. Other embodiments are within the scope of the following claims. In some cases, the actions recited in the claims can be performed in a different order and still achieve desirable results. In addition, the processes depicted in the accompanying figures do not necessarily require the particular order shown, or sequential order, to achieve desirable results. In certain implementations, multitasking and parallel processing may be advantageous.
Claims (11)
1. A computer implemented method, comprising:
at a data processing apparatus, instantiating an instance of a browsing application;
associating an authentication token with a browser session of the instance of the browsing application;
requesting resources from publisher servers, each of the resources being a resource that provides authentication specific information specific to an authentication token, and each resource provides different authentication specific information for each different corresponding authentication token;
for each publisher server, authenticating the authentication token for the browser session and receiving the authentication specific information in response; and
associating the authentication specific information with only the authentication token;
providing the authentication token and its associated authentication specific information to an indexer that indexes the authentication specific information, the resources, and the authentication token in an authentication specific corpus.
2. The method of claim 1 , wherein:
instantiating an instance of a browsing application comprises generating, for each of a plurality of user devices, a virtual machine instance of a browsing application;
associating an authentication token with a browser session of the instance of the browsing application comprises, for each virtual machine instance, instantiating a browser session for a corresponding authentication token, each authentication token uniquely corresponding to a user device;
requesting resources from publishing servers comprises, for each virtual machine instance, requesting resources from the publisher servers;
associating the authentication specific information with only the authentication token comprises, for each virtual machine instance, associating the authentication specific information with only the authentication token for the virtual machine instance; and
providing the authentication token and its associated authentication specific information to an indexer comprises providing each authentication token and its associated authentication specific information to an indexer that indexes the authentication specific information, the resources, and the authentication token in an authentication specific corpus.
3. The method of claim 2 , further comprising:
instantiating, at the data processing apparatus, a session with a browser application on a user device;
determining an authentication token for the session;
receiving a search query from the user device and in response providing the search query and the authentication token to a search service;
receiving, from the search service, a set of search results, the set of search results including:
first search results identifying first resources indexed in a general resource corpus, the first resources identified by the search service searching the general resource corpus; and
second search results identifying second resources indexed in the authentication specific corpus, the second resources identified by the search service searching the authentication specific corpus by a search constrained to only the authentication specific information associated with the authentication token; and
providing the set of search results to the user device in response to the query.
4. The method of claim 2 , further comprising, for two or more of the virtual machine instances:
instantiating, within the virtual machine, a native application that generates application pages for display on a user device within the native application, the native application operating independent of a browser application that can operate on the user device;
authenticating the authentication token for the native application;
accessing, within the virtual machine, application pages of the native application, and for each of the application pages receiving authentication specific information for the application page, wherein the application pages provide different authentication specific information for each authentication token;
providing the authentication token, application page identifiers and their associated authentication specific information from the application pages, to an indexer that indexes the application page identifiers, their associated authentication specific information, and the authentication token in the authentication specific corpus
5. The method of claim 4 , wherein the set of search results further includes third search results identifying application specific pages indexed in the authentication specific corpus, the application specific pages identified by the search service searching the authentication specific corpus by a search constrained to only the authentication specific information associated with the authentication token.
6. The method of claim 2 , wherein, for each publisher server, authenticating the authentication token for the browser session and receiving the authentication specific information in response comprises:
providing the authentication token to the virtual machine instance of the browser application;
providing, from the virtual machine instance of the browser application, the authentication token to the publisher server;
receiving, from the publisher server, the authentication token and a request to authenticate the authentication token; and
authenticating the authentication token, and in response providing to the publisher server an authentication notification that authenticates the authentication token.
7. The method of claim 2 , wherein each authentication token is further specific to each publisher server, and wherein a plurality of authentications token are associated with a user account.
8-15. (canceled)
16. A system, comprising:
a data processing apparatus; and
a memory storage device storing instructions executable by the data processing apparatus and that upon such execution cause the data processing apparatus to perform operations comprising:
generating, for each of a plurality of user devices, a virtual machine instance of a browsing application;
for each virtual machine instance:
instantiating a browser session for an authentication token, each authentication token uniquely corresponding to a user device;
requesting resources from publisher servers, each of the resources being a resource that provides authentication specific information specific to an authentication token, and each resource provides different authentication specific information for each authentication token;
for each publisher server, authenticating the authentication token for the browser session and receiving the authentication specific information in response; and
associating the authentication specific information with only the authentication token for the virtual machine instance;
providing each authentication token and its associated authentication specific information to an indexer that indexes the authentication specific information, the resources, and the authentication token in an authentication specific corpus.
17. A memory storage device storing instructions executable by the data processing apparatus and that upon such execution cause the data processing apparatus to perform operations comprising:
generating, for each of a plurality of user devices, a virtual machine instance of a browsing application;
for each virtual machine instance:
instantiating a browser session for an authentication token, each authentication token uniquely corresponding to a user device;
requesting resources from publisher servers, each of the resources being a resource that provides authentication specific information specific to an authentication token, and each resource provides different authentication specific information for each authentication token;
for each publisher server, authenticating the authentication token for the browser session and receiving the authentication specific information in response; and
associating the authentication specific information with only the authentication token for the virtual machine instance;
providing each authentication token and its associated authentication specific information to an indexer that indexes the authentication specific information, the resources, and the authentication token in an authentication specific corpus.
18-21. (canceled)
Priority Applications (1)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US15/117,421 US20160380992A1 (en) | 2014-02-11 | 2015-02-11 | Authentication specific data |
Applications Claiming Priority (3)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US201461938622P | 2014-02-11 | 2014-02-11 | |
US15/117,421 US20160380992A1 (en) | 2014-02-11 | 2015-02-11 | Authentication specific data |
PCT/US2015/015448 WO2015123319A2 (en) | 2014-02-11 | 2015-02-11 | Authentication specific data |
Publications (1)
Publication Number | Publication Date |
---|---|
US20160380992A1 true US20160380992A1 (en) | 2016-12-29 |
Family
ID=52684653
Family Applications (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
US15/117,421 Abandoned US20160380992A1 (en) | 2014-02-11 | 2015-02-11 | Authentication specific data |
Country Status (2)
Country | Link |
---|---|
US (1) | US20160380992A1 (en) |
WO (1) | WO2015123319A2 (en) |
Cited By (3)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20160259936A1 (en) * | 2015-03-05 | 2016-09-08 | Ricoh Co., Ltd. | Broker-Based Authentication System Architecture and Design |
US20170316186A1 (en) * | 2016-04-28 | 2017-11-02 | Verizon Patent And Licensing Inc. | Methods and Systems for Controlling Access to Virtual Reality Media Content |
US20180109628A1 (en) * | 2016-10-19 | 2018-04-19 | Microsoft Technology Licensing, Llc | Establishing secure sessions for stateful cloud services |
Citations (41)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20070083610A1 (en) * | 2005-10-07 | 2007-04-12 | Treder Terry N | Method and a system for accessing a plurality of files comprising an application program |
US20070234354A1 (en) * | 2006-03-31 | 2007-10-04 | Tomoki Hattori | System and method for printer driver distribution with searchable map database |
US20080033970A1 (en) * | 2006-08-07 | 2008-02-07 | Chacha Search, Inc. | Electronic previous search results log |
US20080235580A1 (en) * | 2007-03-20 | 2008-09-25 | Yahoo! Inc. | Browser interpretable document for controlling a plurality of media players and systems and methods related thereto |
EP2051469A1 (en) * | 2007-10-15 | 2009-04-22 | Axalto SA | Delegation of authentication |
US20090222374A1 (en) * | 2008-02-29 | 2009-09-03 | American Express Travel Related Services Company, Inc. | Total structural risk model |
US20090222565A1 (en) * | 2008-02-28 | 2009-09-03 | Microsoft Corporation | Centralized Publishing of Network Resources |
US20100005028A1 (en) * | 2008-07-07 | 2010-01-07 | International Business Machines Corporation | Method and apparatus for interconnecting a plurality of virtual world environments |
US20100058440A1 (en) * | 2008-08-27 | 2010-03-04 | Yahoo! Inc. | Interaction with desktop and online corpus |
US20110126275A1 (en) * | 2009-11-25 | 2011-05-26 | Novell, Inc. | System and method for discovery enrichment in an intelligent workload management system |
US20110191859A1 (en) * | 2008-10-06 | 2011-08-04 | Telefonaktiebolaget Lm Ericsson (Publ) | Digital Rights Management in User-Controlled Environment |
US20110270751A1 (en) * | 2009-12-14 | 2011-11-03 | Andrew Csinger | Electronic commerce system and system and method for establishing a trusted session |
US20110286584A1 (en) * | 2010-05-18 | 2011-11-24 | Albert Angel | Certified Communications System and Method |
US20120042365A1 (en) * | 2010-08-11 | 2012-02-16 | Emc Corporation | Disposable browser for commercial banking |
US20120096525A1 (en) * | 2010-10-15 | 2012-04-19 | Anne Louise Bolgert | Supporting Compliance in a Cloud Environment |
US20120124028A1 (en) * | 2010-11-12 | 2012-05-17 | Microsoft Corporation | Unified Application Discovery across Application Stores |
US20120166513A1 (en) * | 2010-12-28 | 2012-06-28 | Microsoft Corporation | Unified access to resources |
US20120297456A1 (en) * | 2011-05-20 | 2012-11-22 | Microsoft Corporation | Granular assessment of device state |
US8332688B1 (en) * | 2009-07-21 | 2012-12-11 | Adobe Systems Incorporated | Failover and recovery of a computing application hosted by a virtual instance of a machine |
US20130036456A1 (en) * | 2010-04-08 | 2013-02-07 | Securekey Technologies Inc. | Credential provision and proof system |
US20130173582A1 (en) * | 2006-03-01 | 2013-07-04 | Oracle International Corporation | Indexing secure enterprise documents using generic references |
US20130252583A1 (en) * | 2012-03-22 | 2013-09-26 | Research In Motion Limited | Authentication server and methods for granting tokens comprising location data |
US20140025949A1 (en) * | 2012-07-20 | 2014-01-23 | Google Inc. | Method and system for browser identity |
US8671444B2 (en) * | 2006-10-06 | 2014-03-11 | Fmr Llc | Single-party, secure multi-channel authentication for access to a resource |
US20140082715A1 (en) * | 2012-09-19 | 2014-03-20 | Secureauth Corporation | Mobile multifactor single-sign-on authentication |
US20140090028A1 (en) * | 2012-09-27 | 2014-03-27 | Canon Kabushiki Kaisha | Image forming apparatus, method for controlling image forming apparatus, and storage medium therefor |
US20140109243A1 (en) * | 2012-10-15 | 2014-04-17 | David M. T. Ting | Secure access supersession on shared workstations |
US20140143836A1 (en) * | 2012-11-21 | 2014-05-22 | Verizon Patent And Licensing Inc. | Extended OAuth Architecture |
US20140223516A1 (en) * | 2013-02-05 | 2014-08-07 | Google Inc. | Authorization flow initiation using short-term wireless communication |
US20140315518A1 (en) * | 2013-04-19 | 2014-10-23 | T-Mobile Usa, Inc. | Dynamic distribution of authentication sessions |
US20140325627A1 (en) * | 2013-04-30 | 2014-10-30 | Sensormatic Electronics, LLC | Authentication system and method for embedded applets |
US20140331297A1 (en) * | 2013-05-03 | 2014-11-06 | Citrix Systems, Inc. | Secured access to resources using a proxy |
US20140331060A1 (en) * | 2013-05-03 | 2014-11-06 | Citrix Systems, Inc. | User and Device Authentication in Enterprise Systems |
US20140359709A1 (en) * | 2013-06-04 | 2014-12-04 | Google Inc. | Maintaining Video Conference Session Continuity During Transfer of Session to Alternative Device |
US20150006401A1 (en) * | 2012-01-09 | 2015-01-01 | Cisco Technology Inc. | Clip Rate Adjustment |
US8966599B1 (en) * | 2013-03-14 | 2015-02-24 | Amazon Technologies, Inc. | Automatic token renewal for device authentication |
US20150081764A1 (en) * | 2013-09-13 | 2015-03-19 | Curious Olive, Inc. | Remote Virtualization of Mobile Apps |
US20150106158A1 (en) * | 2013-10-16 | 2015-04-16 | Verizon Patent And Licensing Inc. | Method and apparatus for providing folksonomic object scoring |
US9032217B1 (en) * | 2012-03-28 | 2015-05-12 | Amazon Technologies, Inc. | Device-specific tokens for authentication |
US9106642B1 (en) * | 2013-09-11 | 2015-08-11 | Amazon Technologies, Inc. | Synchronizing authentication sessions between applications |
US20150262170A1 (en) * | 2012-09-28 | 2015-09-17 | Bell Identification Bv | Method and Apparatus For Providing Secure Services Using A Mobile Device |
-
2015
- 2015-02-11 US US15/117,421 patent/US20160380992A1/en not_active Abandoned
- 2015-02-11 WO PCT/US2015/015448 patent/WO2015123319A2/en active Application Filing
Patent Citations (41)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20070083610A1 (en) * | 2005-10-07 | 2007-04-12 | Treder Terry N | Method and a system for accessing a plurality of files comprising an application program |
US20130173582A1 (en) * | 2006-03-01 | 2013-07-04 | Oracle International Corporation | Indexing secure enterprise documents using generic references |
US20070234354A1 (en) * | 2006-03-31 | 2007-10-04 | Tomoki Hattori | System and method for printer driver distribution with searchable map database |
US20080033970A1 (en) * | 2006-08-07 | 2008-02-07 | Chacha Search, Inc. | Electronic previous search results log |
US8671444B2 (en) * | 2006-10-06 | 2014-03-11 | Fmr Llc | Single-party, secure multi-channel authentication for access to a resource |
US20080235580A1 (en) * | 2007-03-20 | 2008-09-25 | Yahoo! Inc. | Browser interpretable document for controlling a plurality of media players and systems and methods related thereto |
EP2051469A1 (en) * | 2007-10-15 | 2009-04-22 | Axalto SA | Delegation of authentication |
US20090222565A1 (en) * | 2008-02-28 | 2009-09-03 | Microsoft Corporation | Centralized Publishing of Network Resources |
US20090222374A1 (en) * | 2008-02-29 | 2009-09-03 | American Express Travel Related Services Company, Inc. | Total structural risk model |
US20100005028A1 (en) * | 2008-07-07 | 2010-01-07 | International Business Machines Corporation | Method and apparatus for interconnecting a plurality of virtual world environments |
US20100058440A1 (en) * | 2008-08-27 | 2010-03-04 | Yahoo! Inc. | Interaction with desktop and online corpus |
US20110191859A1 (en) * | 2008-10-06 | 2011-08-04 | Telefonaktiebolaget Lm Ericsson (Publ) | Digital Rights Management in User-Controlled Environment |
US8332688B1 (en) * | 2009-07-21 | 2012-12-11 | Adobe Systems Incorporated | Failover and recovery of a computing application hosted by a virtual instance of a machine |
US20110126275A1 (en) * | 2009-11-25 | 2011-05-26 | Novell, Inc. | System and method for discovery enrichment in an intelligent workload management system |
US20110270751A1 (en) * | 2009-12-14 | 2011-11-03 | Andrew Csinger | Electronic commerce system and system and method for establishing a trusted session |
US20130036456A1 (en) * | 2010-04-08 | 2013-02-07 | Securekey Technologies Inc. | Credential provision and proof system |
US20110286584A1 (en) * | 2010-05-18 | 2011-11-24 | Albert Angel | Certified Communications System and Method |
US20120042365A1 (en) * | 2010-08-11 | 2012-02-16 | Emc Corporation | Disposable browser for commercial banking |
US20120096525A1 (en) * | 2010-10-15 | 2012-04-19 | Anne Louise Bolgert | Supporting Compliance in a Cloud Environment |
US20120124028A1 (en) * | 2010-11-12 | 2012-05-17 | Microsoft Corporation | Unified Application Discovery across Application Stores |
US20120166513A1 (en) * | 2010-12-28 | 2012-06-28 | Microsoft Corporation | Unified access to resources |
US20120297456A1 (en) * | 2011-05-20 | 2012-11-22 | Microsoft Corporation | Granular assessment of device state |
US20150006401A1 (en) * | 2012-01-09 | 2015-01-01 | Cisco Technology Inc. | Clip Rate Adjustment |
US20130252583A1 (en) * | 2012-03-22 | 2013-09-26 | Research In Motion Limited | Authentication server and methods for granting tokens comprising location data |
US9032217B1 (en) * | 2012-03-28 | 2015-05-12 | Amazon Technologies, Inc. | Device-specific tokens for authentication |
US20140025949A1 (en) * | 2012-07-20 | 2014-01-23 | Google Inc. | Method and system for browser identity |
US20140082715A1 (en) * | 2012-09-19 | 2014-03-20 | Secureauth Corporation | Mobile multifactor single-sign-on authentication |
US20140090028A1 (en) * | 2012-09-27 | 2014-03-27 | Canon Kabushiki Kaisha | Image forming apparatus, method for controlling image forming apparatus, and storage medium therefor |
US20150262170A1 (en) * | 2012-09-28 | 2015-09-17 | Bell Identification Bv | Method and Apparatus For Providing Secure Services Using A Mobile Device |
US20140109243A1 (en) * | 2012-10-15 | 2014-04-17 | David M. T. Ting | Secure access supersession on shared workstations |
US20140143836A1 (en) * | 2012-11-21 | 2014-05-22 | Verizon Patent And Licensing Inc. | Extended OAuth Architecture |
US20140223516A1 (en) * | 2013-02-05 | 2014-08-07 | Google Inc. | Authorization flow initiation using short-term wireless communication |
US8966599B1 (en) * | 2013-03-14 | 2015-02-24 | Amazon Technologies, Inc. | Automatic token renewal for device authentication |
US20140315518A1 (en) * | 2013-04-19 | 2014-10-23 | T-Mobile Usa, Inc. | Dynamic distribution of authentication sessions |
US20140325627A1 (en) * | 2013-04-30 | 2014-10-30 | Sensormatic Electronics, LLC | Authentication system and method for embedded applets |
US20140331297A1 (en) * | 2013-05-03 | 2014-11-06 | Citrix Systems, Inc. | Secured access to resources using a proxy |
US20140331060A1 (en) * | 2013-05-03 | 2014-11-06 | Citrix Systems, Inc. | User and Device Authentication in Enterprise Systems |
US20140359709A1 (en) * | 2013-06-04 | 2014-12-04 | Google Inc. | Maintaining Video Conference Session Continuity During Transfer of Session to Alternative Device |
US9106642B1 (en) * | 2013-09-11 | 2015-08-11 | Amazon Technologies, Inc. | Synchronizing authentication sessions between applications |
US20150081764A1 (en) * | 2013-09-13 | 2015-03-19 | Curious Olive, Inc. | Remote Virtualization of Mobile Apps |
US20150106158A1 (en) * | 2013-10-16 | 2015-04-16 | Verizon Patent And Licensing Inc. | Method and apparatus for providing folksonomic object scoring |
Non-Patent Citations (3)
Title |
---|
Chen, "Using Session Identifiers as Authentication Tokens", IEEE Communications Society IEEE ICC 2009 proceedings, 2009, 5 pages. * |
Mizani, "Design and Implementation of a Virtual Organization File System for Dynamic VOs", The 11th IEEE International Conference on Computational Science and Engineering - Workshops, 2008, pp. 77-82. * |
Noble, "The case for transient authentication", EW 10: Proceedings of the 10th Workshop on ACM SIGOPS European Workshop, July 2002, pp. 24-29. * |
Cited By (6)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20160259936A1 (en) * | 2015-03-05 | 2016-09-08 | Ricoh Co., Ltd. | Broker-Based Authentication System Architecture and Design |
US9779233B2 (en) * | 2015-03-05 | 2017-10-03 | Ricoh Co., Ltd. | Broker-based authentication system architecture and design |
US20170316186A1 (en) * | 2016-04-28 | 2017-11-02 | Verizon Patent And Licensing Inc. | Methods and Systems for Controlling Access to Virtual Reality Media Content |
US10430558B2 (en) * | 2016-04-28 | 2019-10-01 | Verizon Patent And Licensing Inc. | Methods and systems for controlling access to virtual reality media content |
US20180109628A1 (en) * | 2016-10-19 | 2018-04-19 | Microsoft Technology Licensing, Llc | Establishing secure sessions for stateful cloud services |
US10686886B2 (en) * | 2016-10-19 | 2020-06-16 | Mirosoft Technology Licensing, LLC | Establishing secure sessions for stateful cloud services |
Also Published As
Publication number | Publication date |
---|---|
WO2015123319A3 (en) | 2015-10-08 |
WO2015123319A2 (en) | 2015-08-20 |
Similar Documents
Publication | Publication Date | Title |
---|---|---|
US9547721B2 (en) | Native application search results | |
EP3161678B1 (en) | Deep links for native applications | |
US20190179827A1 (en) | Native application search result adjustment based on user specific affinity | |
US11836167B2 (en) | Search suggestions based on native application history | |
US9608870B1 (en) | Deep link verification for native applications | |
US9177058B2 (en) | Multi-step search result retrieval | |
US10013493B1 (en) | Customized search engines | |
EP3251013B1 (en) | Monitoring application loading | |
US20230106266A1 (en) | Indexing Access Limited Native Applications | |
RU2713608C2 (en) | Verification of own application content | |
CN107430614B (en) | Application local deep linking to corresponding resources | |
US9524347B1 (en) | Automatically implementing an application in response to a search query | |
US20160380992A1 (en) | Authentication specific data | |
US9513961B1 (en) | Monitoring application loading | |
US11003728B1 (en) | Native application search results | |
US20150199323A1 (en) | Method and system for posting comments on web pages | |
US20180349498A1 (en) | Systems and methods for building an on-device temporal web index for user curated/preferred web content | |
US20230052628A1 (en) | Additive and subtractive noise for privacy protection | |
RU2774319C2 (en) | Deep links for native applications |
Legal Events
Date | Code | Title | Description |
---|---|---|---|
AS | Assignment |
Owner name: GOOGLE INC., CALIFORNIAFree format text: ASSIGNMENT OF ASSIGNORS INTEREST;ASSIGNOR:BOODMAN, AARON;REEL/FRAME:041394/0364Effective date: 20141120 |
|
AS | Assignment |
Owner name: GOOGLE LLC, CALIFORNIAFree format text: CHANGE OF NAME;ASSIGNOR:GOOGLE INC.;REEL/FRAME:044695/0115Effective date: 20170929 |
|
STCB | Information on status: application discontinuation |
Free format text: ABANDONED -- FAILURE TO RESPOND TO AN OFFICE ACTION |