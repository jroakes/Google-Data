JP2023109847A - Image transformation for machine learning - Google Patents
Image transformation for machine learning Download PDFInfo
- Publication number
- JP2023109847A JP2023109847A JP2023078118A JP2023078118A JP2023109847A JP 2023109847 A JP2023109847 A JP 2023109847A JP 2023078118 A JP2023078118 A JP 2023078118A JP 2023078118 A JP2023078118 A JP 2023078118A JP 2023109847 A JP2023109847 A JP 2023109847A
- Authority
- JP
- Japan
- Prior art keywords
- pixel
- coordinate
- horizontal
- vertical
- image
- Prior art date
- Legal status (The legal status is an assumption and is not a legal conclusion. Google has not performed a legal analysis and makes no representation as to the accuracy of the status listed.)
- Pending
Links
- 238000010801 machine learning Methods 0.000 title claims abstract description 84
- 230000009466 transformation Effects 0.000 title abstract description 11
- 238000000034 method Methods 0.000 claims abstract description 57
- 230000004044 response Effects 0.000 claims abstract description 9
- 230000008569 process Effects 0.000 claims description 32
- 238000004364 calculation method Methods 0.000 abstract description 4
- 238000013528 artificial neural network Methods 0.000 description 11
- 238000010586 diagram Methods 0.000 description 9
- 238000004590 computer program Methods 0.000 description 7
- 239000011159 matrix material Substances 0.000 description 7
- 230000006870 function Effects 0.000 description 4
- 230000005055 memory storage Effects 0.000 description 3
- 230000003287 optical effect Effects 0.000 description 3
- 238000013527 convolutional neural network Methods 0.000 description 2
- 230000009467 reduction Effects 0.000 description 2
- 238000000926 separation method Methods 0.000 description 2
- 238000000844 transformation Methods 0.000 description 2
- 239000003086 colorant Substances 0.000 description 1
- 230000000593 degrading effect Effects 0.000 description 1
- 230000000644 propagated effect Effects 0.000 description 1
- 239000004065 semiconductor Substances 0.000 description 1
- 239000000758 substrate Substances 0.000 description 1
- 230000000007 visual effect Effects 0.000 description 1
Images
Classifications
-
- G06T3/18—
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06N—COMPUTING ARRANGEMENTS BASED ON SPECIFIC COMPUTATIONAL MODELS
- G06N20/00—Machine learning
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06N—COMPUTING ARRANGEMENTS BASED ON SPECIFIC COMPUTATIONAL MODELS
- G06N3/00—Computing arrangements based on biological models
- G06N3/02—Neural networks
- G06N3/06—Physical realisation, i.e. hardware implementation of neural networks, neurons or parts of neurons
- G06N3/063—Physical realisation, i.e. hardware implementation of neural networks, neurons or parts of neurons using electronic means
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06T—IMAGE DATA PROCESSING OR GENERATION, IN GENERAL
- G06T1/00—General purpose image data processing
- G06T1/60—Memory management
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06T—IMAGE DATA PROCESSING OR GENERATION, IN GENERAL
- G06T3/00—Geometric image transformation in the plane of the image
- G06T3/40—Scaling the whole image or part thereof
- G06T3/4007—Interpolation-based scaling, e.g. bilinear interpolation
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06T—IMAGE DATA PROCESSING OR GENERATION, IN GENERAL
- G06T3/00—Geometric image transformation in the plane of the image
- G06T3/40—Scaling the whole image or part thereof
- G06T3/4046—Scaling the whole image or part thereof using neural networks
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06T—IMAGE DATA PROCESSING OR GENERATION, IN GENERAL
- G06T2207/00—Indexing scheme for image analysis or image enhancement
- G06T2207/20—Special algorithmic details
- G06T2207/20081—Training; Learning
Abstract
Description
背景
機械学習を利用して画像を分類することができる。たとえば、ニューラルネットワークを使って画像を画像の視覚的特徴に基づいて分類することができる。ニューラルネットワークとは、受け付けた入力（たとえば、画像の特徴）に対する出力（たとえば、画像の分類結果）を生成する、１つ以上の層を採用した機械学習モデルである。いくつかのニューラルネットワークは、外層に加えて１つ以上の隠れ層を含む。ネットワークにおいて、各隠れ層の出力は、次の層、すなわち、次の隠れ層またはネットワークの出力層への入力として用いられる。ネットワークの各層は、一連のパラメータの現在値に従って、受け付けた入力から出力を生成する。
Background Machine learning can be used to classify images. For example, neural networks can be used to classify images based on visual features of the images. A neural network is a machine learning model employing one or more layers that produces an output (eg, a classification result of an image) for an accepted input (eg, image features). Some neural networks contain one or more hidden layers in addition to the outer layer. In the network, the output of each hidden layer is used as input to the next layer, ie the next hidden layer or output layer of the network. Each layer of the network produces an output from the input it receives according to the current values of a set of parameters.
いくつかのニューラルネットワークは、１つ以上の畳み込みニューラルネットワーク層を含む。各畳み込みニューラルネットワーク層は、関連する一連のカーネルを有する。カーネルは、重み入力の行列構造として表され得る。各畳み込み層は、これらのカーネルを用いて当該層への入力を処理する。また、層への一連の入力は、行列構造として表され得る。 Some neural networks include one or more convolutional neural network layers. Each convolutional neural network layer has an associated set of kernels. A kernel can be represented as a matrix structure of weight inputs. Each convolutional layer uses these kernels to process the inputs to that layer. Also, a sequence of inputs to a layer can be represented as a matrix structure.
ニューラルネットワークは、特定の形状の画像を受け付けるように構成される。しかしながら、ニューラルネットワークを使って分類されるいくつかの画像は、設定された形状とは異なる形状を有する場合がある。 A neural network is configured to accept images of a particular shape. However, some images that are classified using neural networks may have shapes that differ from the set shape.
概要
本明細書では、画像変換のための画素座標と、変換画像データを格納するためのメモリアドレスとを決定する特定用途向け演算ユニットに関する技術を説明する。
Overview This specification describes techniques for an application-specific arithmetic unit that determines pixel coordinates for image transformations and memory addresses for storing transformed image data.
一般に、本明細書に記載の主題の１つの革新的な態様は、画像についての機械学習演算を機械学習モデルおよびこれらの画像の画素値を使って行うように構成された処理部を備えるシステムに組み入れることができる。機械学習モデルは、特定の次元の画像を処理するように構成され得る。システムは、画像の画素値を格納するように構成された記憶媒体と、１つ以上のハードウェアプロセッサを含むメモリアドレス演算ユニットとを備え得る。１つ以上のハードウェアプロセッサは、画像の画像データを受け付けるように構成され得る。画像データは、画像の次元を規定し得る。画像の次元は、水平画素次元と、垂直画素次元とを規定し得る。水平画素次元は、画像の水平次元に沿った画素の数であり、垂直画素次元は、画像の垂直次元に沿った画素の数である。 In general, one innovative aspect of the subject matter described herein is a system comprising a processing unit configured to perform machine learning operations on images using machine learning models and pixel values of those images. can be incorporated. Machine learning models can be configured to process images of specific dimensions. The system may comprise a storage medium configured to store pixel values of an image and a memory addressing unit including one or more hardware processors. One or more hardware processors may be configured to accept image data for an image. The image data may define the dimensions of the image. The dimensions of an image may define a horizontal pixel dimension and a vertical pixel dimension. The horizontal pixel dimension is the number of pixels along the horizontal dimension of the image and the vertical pixel dimension is the number of pixels along the vertical dimension of the image.
１つ以上のハードウェアプロセッサは、画像の次元が特定の次元に一致しないと判断し、画像の次元が特定の次元に一致しないと判断することに応答して、画像の次元および特定の次元に基づいて、画像の水平画素ストライド（stride）および垂直画素ストライドを決定し、水平画素ストライドおよび垂直画素ストライドを使用して、変換されたバージョンの入力画像の画素座標を決定するように構成され得る。各画素座標は、垂直座標および水平座標を含む。画素ストライドは、元画像の次元を特定の次元に変換するために用いられるファクターである。 The one or more hardware processors determine that the dimensions of the image do not match the particular dimensions and, in response to determining that the dimensions of the image do not match the particular dimensions, determine the dimensions of the image and the particular dimensions. Based on this, the horizontal and vertical pixel strides of the image can be determined, and the horizontal and vertical pixel strides can be used to determine the pixel coordinates of the transformed version of the input image. Each pixel coordinate includes a vertical coordinate and a horizontal coordinate. Pixel stride is a factor used to transform the dimensions of the original image to a particular dimension.
画素座標の各々について、１つ以上のハードウェアプロセッサは、複数の画素座標の各々について、画素座標についての機械学習モデルへの入力を生成するために使われること
になる１つ以上の画素値を格納するための１つ以上のメモリアドレスを記憶媒体において決定し、各メモリアドレスを処理部に出力するように構成され得る。画素座標ごとの１つ以上のメモリアドレスは、画素座標の垂直座標および水平座標に基づく。
For each of the pixel coordinates, one or more hardware processors generate, for each of the plurality of pixel coordinates, one or more pixel values to be used to generate inputs to the machine learning model for the pixel coordinates. It may be configured to determine one or more memory addresses for storage on the storage medium and output each memory address to the processing unit. One or more memory addresses for each pixel coordinate are based on the vertical and horizontal coordinates of the pixel coordinate.
これらのおよびその他の実装形態は、各々、次の特徴のうちの１つ以上を任意で含み得る。いくつかの態様では、処理部は、各メモリアドレスを使ってメモリアドレスに格納された画素値にアクセスし、メモリアドレスに格納された画素値に基づいて機械学習演算を行う。 These and other implementations can each optionally include one or more of the following features. In some aspects, the processing unit uses each memory address to access the pixel values stored at the memory address and performs machine learning operations based on the pixel values stored at the memory address.
いくつかの態様では、メモリアドレス演算ユニットは、水平座標の現在値を格納するための１つ以上の第１のハードウェア記憶回路と、垂直座標の現在値を格納するための１つ以上の第２のハードウェア記憶回路とを含む。１つ以上のプロセッサは、初期の水平座標と初期の垂直座標とを含む初期の画素座標を求め、初期の水平座標を１つ以上の第１のハードウェア記憶回路に格納し、初期の垂直座標を１つ以上の第２のハードウェア記憶回路に格納し、画像の水平画素次元をトラバースするために使用される第１ループの繰り返しごとに、第１ループの繰り返しの後に水平画素ストライドを水平座標の現在値に加算することで水平座標の現在値を更新し、画像の垂直画素次元をトラバースするために使用される第２ループの繰り返しごとに、第１第２ループの繰り返しの後に垂直画素ストライドを垂直座標の現在値に加算することで垂直座標の現在値を更新すること、によって、画像の画素座標を決定し得る。 In some aspects, the memory address arithmetic unit includes one or more first hardware storage circuits for storing current values of horizontal coordinates and one or more first hardware storage circuits for storing current values of vertical coordinates. 2 hardware storage circuits. The one or more processors determine initial pixel coordinates including an initial horizontal coordinate and an initial vertical coordinate, store the initial horizontal coordinates in one or more first hardware storage circuits, and the initial vertical coordinates. is stored in one or more second hardware storage circuits, and for each iteration of the first loop used to traverse the horizontal pixel dimension of the image, after the first loop iteration the horizontal pixel stride is converted to the horizontal coordinate Update the current value of the horizontal coordinate by adding it to the current value of the vertical pixel stride after each second loop iteration used to traverse the vertical pixel dimension of the image. The pixel coordinates of the image can be determined by updating the current value of the vertical coordinate by adding to the current value of the vertical coordinate.
いくつかの態様では、画素座標ごとに決定されたメモリアドレスは、画素座標の最近傍画素の画素値を格納するための記憶媒体における位置に対応する。各最近傍画素の画素値は、機械学習モデルへの入力として処理部によって使用され得る。 In some aspects, the memory address determined for each pixel coordinate corresponds to a location in the storage medium for storing the pixel values of the pixels closest to the pixel coordinate. The pixel value of each nearest neighbor pixel can be used by the processing unit as input to the machine learning model.
いくつかの態様では、画素座標についての機械学習モデルへの入力を生成するために使われることになる１つ以上の画素値を格納するための１つ以上のメモリアドレスを記憶媒体において決定することは、第１ループまたは第２ループの繰り返しごとに、１つ以上の第１のハードウェア記憶回路に格納された水平座標の現在値を特定することと、１つ以上の第２のハードウェア記憶回路に格納された垂直座標の現在値を特定することと、水平座標の現在値および垂直座標の現在値に基づいて、水平座標の現在値および垂直座標の現在値に対応する画素座標のメモリアドレスを決定することとを含む。 In some aspects, determining one or more memory addresses in a storage medium for storing one or more pixel values to be used to generate an input to a machine learning model for pixel coordinates. identifies current values of horizontal coordinates stored in one or more first hardware storage circuits; Based on identifying the current value of the vertical coordinate stored in the circuit and the current value of the horizontal coordinate and the current value of the vertical coordinate, a memory address of the pixel coordinate corresponding to the current value of the horizontal coordinate and the current value of the vertical coordinate. and determining.
いくつかの態様では、水平座標の現在値および垂直座標の現在値に対応する画素座標のメモリアドレスを決定することは、水平座標の現在値と第１次元乗数との積に基づいて第１の部分アドレス値を決定することと、垂直座標の現在値と第２次元乗数との積に基づいて第２の部分アドレス値を決定することと、第１の部分アドレス値と第２の部分アドレス値との合計を求めることによって水平座標の現在値および垂直座標の現在値に対応する画素座標のメモリアドレスを決定することとを含む。 In some aspects, determining a memory address of pixel coordinates corresponding to the current value of the horizontal coordinate and the current value of the vertical coordinate includes: determining a partial address value; determining a second partial address value based on the product of the current value of the vertical coordinate and the second dimension multiplier; and the first partial address value and the second partial address value. and determining the memory address of the pixel coordinate corresponding to the current value of the horizontal coordinate and the current value of the vertical coordinate by summing.
いくつかの態様では、水平座標の現在値および垂直座標の現在値に対応する画素座標のメモリアドレスは、第１の部分アドレス値と第２の部分アドレス値と、基底メモリアドレスとの合計に等しい。第１ループは第２ループ内に入れ子にされている、または、第２ループは第１ループ内に入れ子にされている。 In some aspects, the pixel coordinate memory address corresponding to the current horizontal and vertical coordinate values is equal to the sum of the first partial address value, the second partial address value, and the base memory address. . The first loop is nested within the second loop, or the second loop is nested within the first loop.
いくつかの態様では、画素座標についての機械学習モデルへの入力を生成するために使われることになる１つ以上の画素値を格納するための１つ以上のメモリアドレスを記憶媒体において決定することは、画素座標の画素値のバイリニア補間で使うための４つの画素座標の各々のメモリアドレスを決定することを含む。これは、第１ループまたは第２ループの繰り返しごとに、１つ以上の第１のハードウェア記憶回路に格納された水平座標の現
在値を特定することと、１つ以上の第２のハードウェア記憶回路に格納された垂直座標の現在値を特定することと、垂直オフセット値を特定することと、水平オフセット値を特定することと、４つの画素座標のうちの第１の画素座標について、第１の画素座標の第１の画素値を格納するための第１メモリアドレスを、水平座標の現在値と垂直座標の現在値との合計に基づいて決定することと、４つの画素座標のうちの第２の画素座標について、第２の画素座標の第２の画素値を格納するための第２メモリアドレスを、水平座標の現在値と、垂直座標の現在値と、垂直オフセット値との合計に基づいて決定することと、４つの画素座標のうちの第３の画素座標について、第３の画素座標の第３の画素値を格納するための第３メモリアドレスを、水平座標の現在値と、垂直座標の現在値と、水平オフセット値との合計に基づいて決定することと、４つの画素座標のうちの第４の画素座標について、第４の画素座標の第４の画素値を格納するための第４メモリアドレスを、水平座標の現在値と、垂直座標の現在値と、垂直オフセット値と、水平オフセット値との合計に基づいて決定することとを含む。
In some aspects, determining one or more memory addresses in a storage medium for storing one or more pixel values to be used to generate an input to a machine learning model for pixel coordinates. includes determining a memory address for each of the four pixel coordinates for use in bilinear interpolation of the pixel coordinates' pixel values. This involves, for each iteration of the first or second loop, determining the current value of the horizontal coordinate stored in one or more first hardware storage circuits and one or more second hardware identifying a current value of the vertical coordinates stored in the storage circuit; identifying a vertical offset value; identifying a horizontal offset value; determining a first memory address for storing the first pixel value of one pixel coordinate based on the sum of the current value of the horizontal coordinate and the current value of the vertical coordinate; For the second pixel coordinate, the second memory address for storing the second pixel value of the second pixel coordinate is the sum of the current value of the horizontal coordinate, the current value of the vertical coordinate, and the vertical offset value. for a third pixel coordinate of the four pixel coordinates, a third memory address for storing the third pixel value of the third pixel coordinate, the current value of the horizontal coordinate; determining based on the sum of the current value of the vertical coordinate and the horizontal offset value; and for storing the fourth pixel value of the fourth pixel coordinate for the fourth pixel coordinate of the four pixel coordinates. based on the sum of the current value of the horizontal coordinate, the current value of the vertical coordinate, the vertical offset value, and the horizontal offset value.
いくつかの態様では、垂直オフセット値は、少なくとも画像の水平画素の数に基づき、水平オフセット値は１に等しい。１つ以上のプロセッサは、４つの画素座標の各々のバイリニア補間の重みを決定し、各重みを処理部に出力し得る。処理部は、４つの画素座標の各々にある画素値および４つの画素座標の各々の重みを使って機械学習モデルの入力画素値を決定し得る。４つの画素座標の各々の重みは、画素座標の水平座標の小数部分および画素座標の垂直座標の小数部分に基づき得る。 In some aspects, the vertical offset value is based on at least the number of horizontal pixels of the image, and the horizontal offset value is equal to one. The one or more processors may determine a bilinear interpolation weight for each of the four pixel coordinates and output each weight to the processing unit. The processing unit may use the pixel value at each of the four pixel coordinates and the weight of each of the four pixel coordinates to determine the input pixel value of the machine learning model. The weight of each of the four pixel coordinates may be based on the horizontal fractional portion of the pixel coordinate and the vertical fractional portion of the pixel coordinate.
いくつかの態様では、処理部は、画素座標の各々について、１つ以上のメモリアドレスに格納された画素座標の画素値から１つ以上の色値を決定することによって機械学習モデルへの入力を生成し、生成された入力を機械学習モデルを使って処理して機械学習出力を生成するように構成される。 In some aspects, the processing unit provides input to the machine learning model by determining, for each pixel coordinate, one or more color values from pixel values for pixel coordinates stored at one or more memory addresses. configured to generate and process the generated input using a machine learning model to generate a machine learning output.
本明細書に記載の主題は、次の利点のうちの１つ以上を実現するような特定の実施の形態で実現され得る。変換画像の画素座標と画素座標の画素値を格納するためのメモリアドレスとを機械学習プロセッサによって決定することにより、機械学習モデルが処理するように構成された特定の形状ではない画像についての機械学習演算を行う際の待ち時間が減る。たとえば、機械学習プロセッサは、変換するために画像を別のコンピューティングシステムに送り返さなくても、当該画像をチップ上で変換することができる。また、これにより、別のコンピューティングシステムが変換を実行することを待たずに機械学習プロセッサが画像データの処理を継続できるので、プロセッサの処理スループットも向上する。 The subject matter described herein may be implemented in particular embodiments that achieve one or more of the following advantages. Machine learning of non-particular shaped images that the machine learning model is configured to process by determining pixel coordinates of the transformed image and memory addresses for storing the pixel values of the pixel coordinates by the machine learning processor Waiting time for calculations is reduced. For example, a machine learning processor can transform an image on-chip without sending the image back to another computing system for transformation. This also increases the processing throughput of the processor as it allows the machine learning processor to continue processing the image data without waiting for another computing system to perform the transform.
単純な計算を使った少ない命令を用いて深く入れ子になったループを繰り返すことができる特定用途向け演算ユニットによって、より高いスループットと少ない待ち時間で画像をサイズ変更することが可能になる。演算ユニットのレジスタは、画像の画素座標の追跡と、画素データのメモリアドレスを決定するために使われるメモリアドレス値の追跡のために使用され得る。メモリアドレス値は、レジスタに格納された値に基づいた単純な演算を当てはめることによってすぐに特定することができる。単純な演算を使って、および機械学習演算を行う処理部とは別個のプロセッサによって画素値のメモリアドレス（および、任意で、それらの対応する重み）を決定することにより、処理部の演算サイクル数を減らすことができ、機械学習演算をさらに行えるよう、処理部の処理能力を増やすことができる。 An application-specific arithmetic unit that can iterate deeply nested loops using fewer instructions with simple computations allows for higher throughput and lower latency to resize images. Arithmetic unit registers may be used to track the pixel coordinates of the image and the memory address values used to determine the memory address of the pixel data. Memory address values can be readily identified by applying simple arithmetic based on values stored in registers. number of computation cycles of the processing unit using simple arithmetic and by determining the memory addresses of the pixel values (and optionally their corresponding weights) by a processor separate from the processing unit performing the machine learning operations; can be reduced and the processing power of the processing unit can be increased to perform more machine learning operations.
画素座標値を整数部分と小数部分とに分けることによって、同じ小数値を使ってバイリニア補間用の重みと画素値のメモリアドレスとを決定することができるようになる。これにより、機械学習プロセッサのメモリストレージ要件の低減、実行される演算の数の低減（たとえば、重みを決定するために画素同士の距離を別個に演算する必要がなくなる）、
および重みを決定するために必要な命令の数の低減が可能になる。当該命令数の低減によって、メモリストレージ要件がさらに抑えられる。
By separating the pixel coordinate values into an integer part and a fractional part, the same fractional value can be used to determine the weights for bilinear interpolation and the memory address of the pixel value. This reduces the memory storage requirements of the machine learning processor, reduces the number of operations performed (e.g., eliminates the need to separately compute the distance between pixels to determine weights);
and a reduction in the number of instructions required to determine the weights. This instruction count reduction further reduces memory storage requirements.
本態様およびその他の態様のその他の実装形態は、対応するシステムと、方法と、コンピュータプログラムとを含み、これらは、コンピュータ記憶装置上で符号化された、方法の動作を実行するように構成される。システム上にインストールされた、動作時にシステムに当該動作を実行させるソフトウェア、ファームウェア、ハードウェア、またはそれらの組合せにより、１つ以上のコンピュータから成るシステムを同様に構成することができる。命令を有することにより１つ以上のコンピュータプログラムを同様に構成することができる。当該命令は、データ処理装置によって実行されると、装置に当該動作を実行させる。 Other implementations of this and other aspects include corresponding systems, methods, and computer programs encoded on computer storage configured to perform the acts of the methods. be. A system of one or more computers may similarly be configured with software, firmware, hardware, or a combination thereof installed on the system that, when operated, causes the system to perform the operations in question. One or more computer programs may similarly be constructed by having instructions. The instructions, when executed by a data processing apparatus, cause the apparatus to perform the operations.
本明細書に記載の発明の主題の１つ以上の実装形態の詳細を、添付の図面および以下の説明に記載する。発明の主題のその他の潜在的特徴、態様、および利点は、説明、図面、および特許請求の範囲から明らかになるであろう。 The details of one or more implementations of the inventive subject matter described in this specification are set forth in the accompanying drawings and the description below. Other potential features, aspects, and advantages of the inventive subject matter will become apparent from the description, drawings, and claims.
様々な図面における同じ参照番号および名称は、同じ要素を示す。
詳細な説明
一般に、ループの入れ子構造を用いてＮ次元の規則的な行列が処理される場合がある。Ｎ次元の規則的な行列は、以下、「テンソル」と称する。各ループは、Ｎ次元テンソルの各次元をトラバースする役割を担い得る。多次元テンソルは、行列であってもよく、多次元行列であってもよい。たとえば、２次元テンソルは行列であるが、３次元テンソルは複数の２次元行列から構成される３次元行列である。Ｎ次元テンソルの各次元は、１つ以上の要素を含んでもよい。各要素は、それぞれデータ値を格納してもよい。たとえば、テンソルは、プログラムにおける変数であってもよい。変数は、３つの次元を有し得る。第１次元は、３００要素分の長さを有してもよく、第２次元の長さは、１０００要素分であってもよく、第３次元の長さは、２０要素分であってもよい。もちろん、各次元において、その他の要素数が可能である。
The same reference numbers and names in the various drawings identify the same elements.
DETAILED DESCRIPTION In general, N-dimensional regular matrices may be processed using a nested structure of loops. A regular matrix of dimensions N is hereinafter referred to as a "tensor". Each loop may be responsible for traversing each dimension of the N-dimensional tensor. A multidimensional tensor may be a matrix or a multidimensional matrix. For example, a 2D tensor is a matrix, while a 3D tensor is a 3D matrix composed of multiple 2D matrices. Each dimension of the N-dimensional tensor may contain one or more elements. Each element may store a respective data value. For example, a tensor may be a variable in a program. A variable can have three dimensions. The first dimension may have a length of 300 elements, the second dimension may have a length of 1000 elements, and the third dimension may have a length of 20 elements. good. Of course, other numbers of elements in each dimension are possible.
入れ子ループにおいてテンソルをトラバースすることは、要素のメモリアドレス値の演算を行って、当該要素の対応するデータ値をロードまたは格納することを含み得る。ｆｏｒループがループの入れ子構造の例であり、ここでは、３つのループインデックス変数（たとえば、ｉ、ｊ、およびｋ）によって追跡される３つのループが入れ子になっており、３次元テンソルをトラバースする。ニューラルネットワークでは、テンソルに関連する１つ以上のドット積演算において要素の値が用いられてもよい。たとえば、要素の値は、対応するパラメータまたは重みで乗算されてもよい。入れ子構造のｆｏｒループを用いてテンソルの要素が順番にトラバースされて、要素がアクセスされ、当該要素の値を用いた１つ以上の演算が実行されてもよい。引き続き３次元テンソルの例を用いると、変数ｉによって追跡されるループを外側のｆｏｒループを用いてトラバースしてもよく、変数ｊによ
って追跡されるループを中間のｆｏｒループを用いてトラバースしてもよく、変数ｋによって追跡されるループを内側のｆｏｒループを用いてトラバースしてもよい。この例では、最初にアクセスされる要素は（ｉ＝０、ｊ＝０、ｋ＝０）であってもよく、２番目の要素は（ｉ＝０、ｊ＝０、ｋ＝１）であってもよく、以下同様である。上述したように、テンソルトラバーサルユニットを使用して、処理部が要素の値にアクセスし、当該要素の値を用いて１つ以上の演算を実行できるよう、入れ子ループを使用して要素ごとのメモリアドレスを順番に決定することができる。
Traversing a tensor in a nested loop may include performing operations on memory address values of elements to load or store corresponding data values for those elements. A for-loop is an example of loop nesting, where three loops tracked by three loop index variables (e.g., i, j, and k) are nested to traverse a three-dimensional tensor. . In a neural network, element values may be used in one or more dot product operations involving tensors. For example, element values may be multiplied by corresponding parameters or weights. The elements of the tensor may be traversed in order using nested for loops to access the elements and perform one or more operations using the values of the elements. Continuing with the 3D tensor example, the loop tracked by variable i may be traversed with an outer for-loop, and the loop tracked by variable j may be traversed with an intermediate for-loop. Well, the loop tracked by variable k may be traversed using an inner for loop. In this example, the first element accessed may be (i=0, j=0, k=0) and the second element may be (i=0, j=0, k=1). and so on. As described above, using a tensor traversal unit, nested loops are used to provide a per-element memory Addresses can be determined in order.
場合によっては、外側ループインデックス変数を使った内側ループのループ範囲の設定など、ループ範囲条件をプロセッサが実行する必要がある場合がある。たとえば、入れ子ループの最も内側のループを出るかどうかを決定する際、プログラムは、入れ子ループの最も内側のループのループインデックス変数の現在値を、最も外側のループのループインデックス変数の現在値と比較してもよい。 In some cases, the processor may need to enforce loop bound conditions, such as setting the loop bounds of an inner loop using an outer loop index variable. For example, when deciding whether to exit the innermost loop of a nested loop, the program compares the current value of the loop index variable of the innermost loop of the nested loop with the current value of the loop index variable of the outermost loop. You may
これらのタスクは、分岐命令および整数演算命令など、かなりの数の命令を必要とする可能性がある。各ループ範囲が小さく、ループの繰り返し回数が多い場合、演算は、全体の実行時間のかなりの部分を要し、全体のパフォーマンスを深刻に低下させてしまう可能性がある。プロセッサのためのハードウェアテンソルトラバーサルユニットは、ループのトラバースおよびアドレス生成のすべてを行い、機械学習演算を実行するなどその他の作業を行うことができるようにプロセッサの数値演算ユニットを解放することによって、プロセッサの演算処理能力を向上させてもよい。 These tasks can require a significant number of instructions, such as branch instructions and integer arithmetic instructions. If each loop bound is small and the number of loop iterations is high, the computation can take a significant fraction of the total execution time, seriously degrading the overall performance. The hardware tensor traversal unit for the processor does all of the loop traversal and address generation, freeing up the processor's math unit to do other work, such as performing machine learning operations. The computing power of the processor may be increased.
テンソルは、画像の画像値、たとえば、ニューラルネットワークまたはその他の機械学習モデルによって処理されている画像の画素の色値を含み得る。たとえば、機械学習モデルは、画像を処理し、当該画像を１つ以上のオブジェクトクラスからオブジェクトを描画している画像として分類するように構成されてもよい。別の例として、機械学習モデルは、画像を処理し、オブジェクトを描画する画像における位置を特定するように構成されてもよい。さらに別の例として、機械学習モデルは、画像を処理し、画像の数値表現、たとえば、画像のコンテンツについての情報を伝える数値のベクトルを生成するように構成されてもよい。画像値は、画像の１つ以上の画素の値を含み得る。本明細書において、画素の値は、画素値と称され、画素の色を表す値（たとえば、グレースケール値またはＲＧＢ（赤、緑、もしくは青）値）を含み得る。ＲＧＢカラーの場合、テンソルは、赤値、緑値、および青値を画素ごとに含み得る。 A tensor may include image values of an image, eg, color values of pixels of an image being processed by a neural network or other machine learning model. For example, a machine learning model may be configured to process an image and classify the image as depicting objects from one or more object classes. As another example, a machine learning model may be configured to process an image and identify locations in the image that render objects. As yet another example, a machine learning model may be configured to process an image and generate a numerical representation of the image, eg, a vector of numerical values that convey information about the content of the image. Image values may include values of one or more pixels of an image. The value of a pixel is referred to herein as the pixel value and may include a value representing the color of the pixel (eg, grayscale value or RGB (red, green, or blue) value). For RGB colors, the tensor may contain red, green, and blue values for each pixel.
上記のように、ニューラルネットワークは、特定の形状の画像、たとえば、特定の水平次元と垂直次元とを有する画像を受け付けるように構成されてもよい。予想される入力形状に一致しない形状の画像の場合、当該画像は、ニューラルネットワークによって処理され得る前に予想される入力形状を有するよう、修正される必要がある。 As noted above, the neural network may be configured to accept images of a particular shape, eg, images having particular horizontal and vertical dimensions. For images whose shape does not match the expected input shape, the image needs to be modified to have the expected input shape before it can be processed by the neural network.
テンソルトラバーサルユニットは、予想される入力形状に画像を変換する画像変換処理において用いられる画素座標を決定することができる。また、テンソルトラバーサルユニットは、機械学習演算を実行する処理部が画素座標の対応する画素データにアクセスするまたは当該画素データを格納できるよう、変換画像の画素ごとに１つ以上のメモリアドレス値を演算する。適切な画素座標を決定する能力がない場合、テンソルトラバーサルユニットは、画像データを処理部または別のコンピューティングシステムに送り返して、メモリアドレス値を演算する前に画像変換を実行しなければならない。これらの特徴では、画像データをホストに送り返すことに関連した処理待ち時間が低減し、テンソルトラバーサルユニットおよび処理部の演算スループットが向上する。また、テンソルトラバーサルユニットの柔軟性も向上する。 A tensor traversal unit can determine the pixel coordinates used in the image transformation process to transform the image to the expected input shape. The tensor traversal unit also computes one or more memory address values for each pixel of the transformed image so that the processing unit performing the machine learning operation can access or store the pixel data corresponding to the pixel coordinates. do. Without the ability to determine the appropriate pixel coordinates, the tensor traversal unit must send the image data back to a processor or another computing system to perform image transformations before computing memory address values. These features reduce the processing latency associated with sending image data back to the host and increase the computational throughput of the tensor traversal unit and processor. It also improves the flexibility of the tensor traversal unit.
図１は、演算システム１０２の例を示すブロック図である。一般に、コンピューティングシステム１００は、ホスト１３０から受け付けた入力画像１３２を処理し、ホスト１３０に提供される出力１３４を生成する。コンピューティングシステム１００は、線形代数演算を行うように構成されてもよい。たとえば、コンピューティングシステム１００は、機械学習モデル、たとえば、ニューラルネットワークを用いて機械学習演算を行うように構成されてもよい。
FIG. 1 is a block diagram illustrating an
コンピューティングシステム１００は、処理部１１４と、記憶媒体１１６と、テンソルトラバーサルユニット１２０とを備える。処理部１０２は、入力画像１４２の画像データに対する演算を行って出力１４４を生成する１つ以上のプロセッサを含んでもよい。出力１４４は、入力画像１４２を特徴付ける、たとえば、画像データおよび機械学習モデルに基づいて、１つ以上のカテゴリに属しているオブジェクトの画像を含んでいるとして入力画像を分類するといった、分類結果またはその他の出力であってもよい。出力１４４は、別のコンピューティングシステム、たとえば、ユーザデバイスへの、受け付けた要求に応答した出力であり得る。
The
記憶媒体１０４は、コンピューティングシステム１００内の情報を格納する。いくつかの実装形態では、記憶媒体１０４は、１つまたは複数の揮発性記憶装置である。いくつかのその他の実装形態では、記憶媒体１０４は、１つまたは複数の不揮発性記憶装置である。また、記憶媒体１０４は、フロッピー（登録商標）ディスク装置、ハードディスク装置、光ディスク装置、またはテープ装置、フラッシュメモリもしくはその他の類似の固体メモリ装置、またはストレージエリアネットワークもしくはその他の構成に含まれる装置を含む装置のアレイなど、別の形態のコンピュータ読み取り可能な媒体であってもよい。
Storage medium 104 stores information within
テンソルトラバーサルユニット１２０は、特定用途向け集積回路として実現され得る。テンソルトラバーサルユニット１２０は、本明細書において、メモリアドレス演算ユニットとも称される。テンソルトラバーサルユニット１２０は、画像データを格納するためのメモリアドレスを決定するように構成された１つ以上のプロセッサ１２２を含み得る。また、テンソルトラバーサルユニット１２０は、数値演算ユニット１２４と、記憶回路１２６とを含む。数値演算ユニット１２４は、１つ以上の演算論理装置（ＡＬＵ）および／または１つ以上の加算器を含み得る。たとえば、数値演算ユニット１２４は、１つ以上のハードウェアＡＬＵおよび／または１つ以上のハードウェア加算器を含み得る。数値演算ユニット１２４は、画像データを格納するためのメモリアドレスを決定するように構成される。記憶回路１２６は、ハードウェアメモリストレージ、たとえば、レジスタを含む。
Tensor traversal unit 120 may be implemented as an application-specific integrated circuit. Tensor traversal unit 120 is also referred to herein as a memory address operation unit. Tensor traversal unit 120 may include one or
いくつかの実装形態では、テンソルトラバーサルユニット１２０は、画像の画素座標を、記憶媒体１１６に画素値を格納するためのメモリアドレスに変換する。たとえば、テンソルトラバーサルユニット１２０は、画素座標のセットを１次元のアドレス空間に変換し得る。画像の画素の画素座標は、垂直座標と水平座標とを含み得る。テンソルトラバーサルユニット１２０は、メモリアドレスを画素座標の垂直座標と水平座標との組合せ（たとえば、線型結合）にすることによってこの変換を行い得る。上述したように、画素値は、画素の色を表す値（たとえば、画素のグレースケール値またはＲＧＢ値）を含み得る。
In some implementations, tensor traversal unit 120 converts image pixel coordinates into memory addresses for storing pixel values in
テンソルトラバーサルユニット１２０は、画素座標ごとに、画素の色を表す色値（複数可）の１つ以上のメモリアドレスを決定し得る。たとえば、画像がグレースケール値を用いて表されている場合、テンソルトラバーサルユニットは、画素ごとに、画素のグレースケール値を格納するための１つのメモリアドレスを決定し得る。画像がＲＧＢ値を用いて表されている場合、テンソルトラバーサルユニットは、画素ごとに、すべての３つの色値を格納するための１つのメモリアドレスを決定し得る。この例では、各メモリアドレスは、４バイトの記憶場所を参照してもよく、無視される予備のバイトとともに、色値ごとに
１バイトが利用されてもよい。ＲＧＢ色値が使われるいくつかの実装形態では、テンソルトラバーサルユニット１２０は、画素ごとに、画素の赤値を格納するための第１メモリアドレスと、画素の緑値を格納するための第２メモリアドレスと、画素の青値を格納するための第３メモリアドレスとを決定し得る。
For each pixel coordinate, tensor traversal unit 120 may determine one or more memory addresses of color value(s) representing the color of the pixel. For example, if the image is represented using grayscale values, the tensor traversal unit may determine, for each pixel, one memory address for storing the pixel's grayscale value. If the image is represented using RGB values, the tensor traversal unit can determine, for each pixel, one memory address to store all three color values. In this example, each memory address may refer to a 4-byte memory location, with 1 byte per color value being utilized, with spare bytes to be ignored. In some implementations where RGB color values are used, for each pixel, tensor traversal unit 120 creates a first memory address for storing the pixel's red value and a second memory address for storing the pixel's green value. An address and a third memory address for storing the blue value of the pixel may be determined.
また、テンソルトラバーサルユニット１２０は、画像変換処理のための画素座標を決定することができる。画像変換処理では、画像を、当該画像を処理するために処理部１１４によって用いられる機械学習モデルの特定の次元に変換する。たとえば、特定の次元よりも大きい画像は、当該特定の次元に縮小され得る。同様に、特定の次元よりも小さい画像は、当該特定の次元に拡大され得る。
Tensor traversal unit 120 can also determine pixel coordinates for image transformation processing. The image transformation process transforms an image into specific dimensions of the machine learning model used by processing
テンソルトラバーサルユニット１２０は、最近傍法および／またはバイリニア法技術を使って拡大または縮小するための画素座標を決定することができる。いずれの技術の場合でも、テンソルトラバーサルユニット１２０は、変換画像、すなわち、機械学習モデルによって処理される画像の画素ごとに画素座標を決定することができる。本明細書において、変換画像の画素は、変換画素と称される。 Tensor traversal unit 120 may determine pixel coordinates for scaling using nearest neighbor and/or bilinear techniques. For either technique, tensor traversal unit 120 can determine pixel coordinates for each pixel of the transformed image, ie, the image processed by the machine learning model. A pixel of a transformed image is referred to herein as a transformed pixel.
テンソルトラバーサルユニットは、画像を変換するために最近傍補間が使われるモードと、バイリニア法が使われるモードとを切り替えることができる。たとえば、ユーザは、コンピューティングシステム１０２のユーザインターフェースを利用して、最近傍法またはバイリニア法のいずれかを選択することができる。処理部１１４は、当該選択を規定するデータを受け付けて、当該データをテンソルトラバーサルユニット１２０に提供し得る。これに応答して、テンソルトラバーサルユニット１２０は、選択された変換技術を使い得る。
The tensor traversal unit can switch between a mode in which nearest neighbor interpolation is used and a mode in which the bilinear method is used to transform the image. For example, a user may utilize the user interface of
変換画素ごとに、テンソルトラバーサルユニット１２０は、画素値（複数可）を格納するための記憶媒体１１６の１つ以上のメモリアドレスを決定し得る。最近傍補間が使われている場合、テンソルトラバーサルユニット１２０は、変換画素ごとに、変換画素の画素座標の位置に最も近い入力画像１４２の画素の画素値（複数可）を格納するためのメモリアドレスを決定し得る。たとえば、テンソルトラバーサルユニット１２０は、画素座標の位置に最も近い画素について、当該最も近い画素の色を表すために使われる１つ以上の色値を格納するためのメモリアドレスを決定し得る。
For each transformed pixel, tensor traversal unit 120 may determine one or more memory addresses in
バイリニア法実装が使われている場合、テンソルトラバーサルユニット１２０は、入力画像１４２における画素座標の位置に最も近い４画素のメモリアドレスを決定することができる。たとえば、テンソルトラバーサルユニット１２０は、４画素の各々について、画素の色を表すために用いられる１つ以上の色値を格納するためのそれぞれのメモリアドレスを決定し得る。
If a bilinear implementation is used, tensor traversal unit 120 can determine the memory address of the four pixels closest to the pixel coordinate location in
テンソルトラバーサルユニット１２０は、これらのメモリアドレスを処理部１１４に出力し得る。処理部１２０は、メモリアドレスに格納された画素値にアクセスし、当該画素値を用いて機械学習演算を行って、たとえば、入力画像１４２を分類し得る。バイリニア法が使われている場合、処理部１２０は、後述するが、色値（たとえば、赤値、緑値、または青値）ごとの４つの画素値にアクセスし、色値ごとに、変換画素の色を表す値を決定し得る。次に、処理部１２０は、変換画素ごとの色値（複数可）を用いて機械学習演算を実行し、機械学習出力、たとえば、出力１４４を生成し得る。次に、入力画像１４２を分類する要求に応答して、処理部１２０は、機械学習出力１４４をチップ外に、たとえば、ユーザデバイスに提供する。
Tensor traversal unit 120 may output these memory addresses to
画素座標を決定するというテンソルトラバーサルユニットの能力がない場合、テンソル
トラバーサルユニット１２０は、機械学習モデルのための特定の次元を有さない画像を、変換のために処理部１１４またはホスト１３０に送り返さなければならない。画素座標およびメモリアドレスを決定する能力によって、機械学習演算を実行する際の待ち時間が低減し、コンピューティングシステム１０２の処理スループット（たとえば、テンソルトラバーサルユニット１２０および／または処理部１１４の処理スループット）が向上する。
In the absence of the tensor traversal unit's ability to determine pixel coordinates, tensor traversal unit 120 must send images without specific dimensions for machine learning models back to
テンソルトラバーサルユニット１２０は、ループの入れ子構造を使って画素座標および画素座標のメモリアドレスを決定することができる。ループの入れ子構造は、画像の水平画素次元をトラバースする第１ループと、画像の垂直画素次元をトラバースする第２ループとを含み得る。第１ループの繰り返しごとに、テンソルトラバーサルユニット１２０は、更新水平座標を決定する。第２ループの繰り返しごとに、テンソルトラバーサルユニット１２０は、更新垂直座標を決定する。第１ループを第２ループ内に入れ子にしたり、第２ループを第１ループ内に入れ子にしたりすることができる。 Tensor traversal unit 120 can use nested loops to determine pixel coordinates and memory addresses for pixel coordinates. A nesting of loops may include a first loop that traverses the horizontal pixel dimension of the image and a second loop that traverses the vertical pixel dimension of the image. For each iteration of the first loop, tensor traversal unit 120 determines an updated horizontal coordinate. For each iteration of the second loop, tensor traversal unit 120 determines an updated vertical coordinate. The first loop can be nested within the second loop, and the second loop can be nested within the first loop.
変換画素の画素座標を決定するために、テンソルトラバーサルユニット１２０は、初期の変換画素の入力画像１４２内の初期の画素座標を求め得る。たとえば、この初期の変換画素は、変換画像の左上の画素であってもよい。この例では、入力画像の左上隅の座標は、（ｘ＝０，ｙ＝０）であってもよく、画像の右下隅の座標は、（ｘ＝画像に含まれる水平画素の総数、ｙ＝画像に含まれる垂直画素の総数）であってもよい。ここで、ｘは、水平次元であり、ｙは、垂直次元である。入力画像と変換画像との相対的な大きさに応じて、入力画像内の初期の変換画素の画素座標は、（ｘ＝０．３７５，ｙ＝０．３７５）に設定されてもよい。
To determine the pixel coordinates of the transformed pixels, tensor traversal unit 120 may determine the initial pixel coordinates in
この例のために、第２ループが外側ループであり、第１ループが内側ループであり、ｙ
ｍａｊｏｒ、ｘ ｍｉｎｏｒの順に左上隅から右下隅への順に画像をトラバースすると考える。このように、画像は、画像の最上行から始まって、一度に画素の水平方向の１行をトラバースし、画像の右下隅で終わる。
For this example, the second loop is the outer loop, the first loop is the inner loop, and y
Consider traversing the image from the top left corner to the bottom right corner in order major then x minor. Thus, the image starts at the top row of the image, traverses one horizontal row of pixels at a time, and ends at the lower right corner of the image.
第１ループの繰り返しごとに、テンソルトラバーサルユニット１２０は、たとえば、水平ストライドの値を水平座標の以前の値に加算することによって水平座標を更新することができる。たとえば、初期の画素座標は、（０．３７５，０．３７５）であってもよく、水平ストライドは、１．３７５であってもよい。この例では、水平ストライドの値（１．３７５）を以前の水平座標に加算することによって、第２の画素座標は、（１．７５，０．３７５）になる。テンソルトラバーサルユニット１２０は、第１ループのループ範囲条件に到達するまで、たとえば、テンソルトラバーサル１２０が画像の行の終わりに到達するまで水平ストライドの値を以前の水平座標に加算することによって入力画像１４２の水平次元をトラバースし得る。第１ループのループ条件に到達する度に、テンソルトラバーサルユニット１２０は、水平座標をその初期値（０．３７５）にリセットし、垂直ストライドの値を以前の垂直座標に加算して画像の次の行にトラバースすることによって垂直画素座標を更新し得る。この例では、２行目の最初の画素座標は、（０．３７５，１．７５）となる。テンソルトラバーサル１２０は、第２ループのループ範囲に到達するまで、たとえば、変換画像の変換画素ごとの画素座標が決定されるまでこの工程を継続し得る。
On each iteration of the first loop, tensor traversal unit 120 may update the horizontal coordinate by, for example, adding the value of horizontal stride to the previous value of the horizontal coordinate. For example, the initial pixel coordinates may be (0.375, 0.375) and the horizontal stride may be 1.375. In this example, by adding the horizontal stride value (1.375) to the previous horizontal coordinate, the second pixel coordinate becomes (1.75, 0.375). Tensor traversal unit 120 computes
決定された画素座標ごとに、テンソルトラバーサルユニット１２０は、画素座標の画素値（複数可）を格納するための１つ以上のメモリアドレスを決定し得る。最近傍法実装では、テンソルトラバーサルユニット１２０は、各変換画素の最近傍画素の画素値を格納するためのメモリアドレスを決定し得る。バイリニア法実装では、テンソルトラバーサルユニット１２０は、変換画素座標ごとに４つのメモリアドレス、変換画素座標の画素値を決定するために用いられる画素値の各々について１つのアドレスを決定し得る。 For each determined pixel coordinate, tensor traversal unit 120 may determine one or more memory addresses to store the pixel value(s) for the pixel coordinate. In a nearest neighbor implementation, tensor traversal unit 120 may determine memory addresses for storing the pixel values of the nearest neighbors of each transformed pixel. In a bilinear implementation, tensor traversal unit 120 may determine four memory addresses for each transformed pixel coordinate, one address for each pixel value used to determine the pixel value of the transformed pixel coordinate.
上記例で示したように、変換画素の画素座標は、小数コンポーネントを有する場合がある。テンソルトラバーサルユニット１２０は、固定小数点数を使って画素座標値を表し得る。いくつかの実装形態では、テンソルトラバーサルユニット１２０は、画素座標の整数値を、画素座標の小数部分とは分けて格納する。たとえば、図１に示すように、テンソルトラバーサルユニット１２０は、垂直画素座標の整数部分を格納する垂直画素座標整数要素１３２と、垂直画素座標の小数部分を格納する垂直画素座標小数要素１３４とを含む。同様に、テンソルトラバーサルユニット１２０は、水平画素座標の整数部分を格納する水平画素座標整数要素１３６と、水平画素座標の小数部分を格納する水平画素座標小数要素１３８とを含む。各要素１３２～１３８は、レジスタまたはその他の記憶回路を含み得る。
As shown in the example above, the pixel coordinates of a transformed pixel may have a fractional component. Tensor traversal unit 120 may represent pixel coordinate values using fixed point numbers. In some implementations, tensor traversal unit 120 stores integer values of pixel coordinates separately from the fractional portion of pixel coordinates. For example, as shown in FIG. 1, tensor traversal unit 120 includes vertical pixel coordinate
また、垂直ストライドの整数部分および小数部分と、水平ストライドの整数部分および小数部分とは、たとえば、それぞれのレジスタまたはその他の記憶回路に別々に格納され得る。テンソルトラバーサルユニット１２０が垂直座標を更新する場合、テンソルトラバーサルユニットは、垂直ストライドの整数部分を垂直座標の整数部分に加算し、垂直ストライドの小数部分を垂直座標の小数部分に加算し得る。この更新によって垂直座標の小数部分が１以上になるたびに、テンソルトラバーサルユニット１２０は、１という値を垂直座標の整数部分に加算し、１という値を垂直座標の小数部分から減算して垂直座標の小数部分を１よりも小さく維持し得る。 Also, the integer and fractional portions of the vertical stride and the integer and fractional portions of the horizontal stride may be stored separately, eg, in respective registers or other storage circuitry. When tensor traversal unit 120 updates the vertical coordinate, tensor traversal unit may add the integer portion of the vertical stride to the integer portion of the vertical coordinate and add the fractional portion of the vertical stride to the fractional portion of the vertical coordinate. Each time this update causes the fractional part of the vertical coordinate to be greater than or equal to 1, tensor traversal unit 120 adds the value of 1 to the integer part of the vertical coordinate and subtracts the value of 1 from the fractional part of the vertical coordinate to give the vertical coordinate can be kept smaller than one.
同様に、テンソルトラバーサルユニット１２０が水平座標を更新する場合、テンソルトラバーサルユニットは、水平ストライドの整数部分を水平座標の整数部分に加算し、水平ストライドの小数部分を水平座標の小数部分に加算し得る。この更新によって水平座標の小数部分が１以上になるたびに、テンソルトラバーサルユニット１２０は、１という値を水平座標の整数部分に加算し、１という値を水平座標の小数部分から減算して水平座標の小数部分を１よりも小さく維持し得る。 Similarly, when tensor traversal unit 120 updates the horizontal coordinate, tensor traversal unit may add the integer part of the horizontal stride to the integer part of the horizontal coordinate and add the fractional part of the horizontal stride to the fractional part of the horizontal coordinate. . Each time this update causes the fractional part of the horizontal coordinate to be greater than or equal to 1, tensor traversal unit 120 adds the value of 1 to the integer part of the horizontal coordinate and subtracts the value of 1 from the fractional part of the horizontal coordinate to give the horizontal coordinate can be kept smaller than one.
図２は、画像のバイリニア補間を説明する図解２００である。図解２００は、入力画像の画素レイアウト２１０と、変換されたバージョンの入力画像（「変換画像」）の画素レイアウト２２０とを含む。各レイアウト２００および２１０における四角形のそれぞれは、画素を表す。この例では、入力画像は、水平画素次元に１０画素、垂直画素次元に１０画素を有する。同様に、変換画像は、水平画素次元に７画素、垂直画素次元に７画素を有する。たとえば、機械学習モデルは、水平画素次元に７画素、垂直画素次元に７画素を有する画像を処理するように構成されてもよい。 FIG. 2 is a diagram 200 illustrating bilinear interpolation of an image. Illustration 200 includes a pixel layout 210 of an input image and a pixel layout 220 of a transformed version of the input image (the "transformed image"). Each square in each layout 200 and 210 represents a pixel. In this example, the input image has 10 pixels in the horizontal pixel dimension and 10 pixels in the vertical pixel dimension. Similarly, the transform image has 7 pixels in the horizontal pixel dimension and 7 pixels in the vertical pixel dimension. For example, a machine learning model may be configured to process images having 7 pixels in the horizontal pixel dimension and 7 pixels in the vertical pixel dimension.
入力画像を変換するために、変換画像の画素ごとに入力画像内の画素座標のセットが特定される。たとえば、変換画像の左上の画素２２２に対して点２１２の画素座標が特定される。同様に、画素２２２の右側の画素２２３に対して点２１３の画素座標が特定される。 To transform the input image, a set of pixel coordinates in the input image is identified for each pixel of the transformed image. For example, the pixel coordinates of point 212 are identified for the top left pixel 222 of the transformed image. Similarly, the pixel coordinates of point 213 are identified for pixel 223 to the right of pixel 222 .
変換画像の画素ごとの画素値を決定するために、当該画素の画素座標に最も近い４画素がソース画素として特定される。画素２２２については、画素座標２１２に最も近い４画素は、画素２１５ａ、２１５ｂ、２１５ｃ、および２１５ｄである。画素２２２の画素値は、ソース画素２１５ａ～２１５ｄの画素値の加重組合せであり得る。ソース画素ごとの重みは、点２１２の画素座標からのソース画素の距離に基づき得る。たとえば、点２１２により近いソース画素の画素値は、点２１２からより離れたソース画素の画素値よりも重く加重される。この例では、ソース画素２１５ａの画素値には、ソース画素２１５ｃの画素値よりも大きな重みが割り当てられる。変換画像の画素座標、変換画像の画素ごとの４つのソース画素、および各ソース画素の画素値の重みを決定するための技術の例を以下に説明する。 To determine the pixel value for each pixel of the transformed image, the four pixels closest to the pixel coordinates of that pixel are identified as the source pixels. For pixel 222, the four closest pixels to pixel coordinate 212 are pixels 215a, 215b, 215c, and 215d. The pixel value of pixel 222 may be a weighted combination of the pixel values of source pixels 215a-215d. A weight for each source pixel may be based on the distance of the source pixel from the pixel coordinates of point 212 . For example, pixel values of source pixels closer to point 212 are weighted more heavily than pixel values of source pixels further away from point 212 . In this example, the pixel value of source pixel 215a is assigned a greater weight than the pixel value of source pixel 215c. An example technique for determining the pixel coordinates of the transformed image, the four source pixels for each pixel of the transformed image, and the weight of the pixel value of each source pixel is described below.
図３は、画像データのメモリアドレスを決定するための例示的な工程３００を説明するフロー図である。工程３００は、１つ以上のコンピュータから構成されるシステム、たとえば、図１のコンピューティングシステム１０２によって実行されてもよい。システムは、テンソルトラバーサルユニット、たとえば、図１のテンソルトラバーサルユニット１２０を備える。
FIG. 3 is a flow diagram illustrating an
システムは、画像の画像データを受け付ける（３０２）。たとえば、テンソルトラバーサルユニットは、画像データを受け付け得る。画像データは、画像の次元を規定し得る。画像の次元は、水平画素次元と、垂直画素次元とを規定し得る。水平画素次元は、画像の水平次元に沿った画素の数である。垂直画素次元は、画像の垂直次元に沿った画素の数である。たとえば、高さ５００画素×幅４００画素の画像は、垂直画素次元が５００で、水平画素次元が４００になる。 The system accepts image data for an image (302). For example, a tensor traversal unit may accept image data. The image data may define the dimensions of the image. The dimensions of an image may define a horizontal pixel dimension and a vertical pixel dimension. The horizontal pixel dimension is the number of pixels along the horizontal dimension of the image. The vertical pixel dimension is the number of pixels along the vertical dimension of the image. For example, an image that is 500 pixels high by 400 pixels wide has 500 vertical pixel dimensions and 400 horizontal pixel dimensions.
システムは、画像の次元が機械学習モデルの特定の次元に一致しないと判断する（３０４）。たとえば、機械学習モデルは、特定の次元の画像を処理（たとえば、分類）するように構成されてもよい。特定の次元は、特定の垂直画素次元と、特定の水平画素次元とを規定し得る。テンソルトラバーサルユニットは、画像の次元を機械学習モデルの特定の次元と比較し得る。画像の垂直画素次元が機械学習モデルの特定の垂直画素次元に一致しない場合、または画像の水平画素次元が機械学習モデルの特定の水平画素次元に一致しない場合、テンソルトラバーサルユニットは、画像の次元が機械学習モデルの特定の次元に一致しないと判断し得る。 The system determines (304) that the dimensions of the image do not match certain dimensions of the machine learning model. For example, a machine learning model may be configured to process (eg, classify) images of a particular dimension. A particular dimension may define a particular vertical pixel dimension and a particular horizontal pixel dimension. A tensor traversal unit may compare the dimensions of an image with specific dimensions of a machine learning model. If the vertical pixel dimension of the image doesn't match the specific vertical pixel dimension of the machine learning model, or the horizontal pixel dimension of the image doesn't match the specific horizontal pixel dimension of the machine learning model, the tensor traversal unit assumes that the dimension of the image is It may be determined that certain dimensions of the machine learning model are not met.
システムは、画像の水平画素ストライドと垂直画素ストライドとを決定する（３０６）。水平画素ストライドおよび垂直画素ストライドは、画像内の画素座標を変換されたバージョンの画像変換画素ごとに特定するために使われる。 The system determines the horizontal and vertical pixel strides of the image (306). The horizontal pixel stride and vertical pixel stride are used to specify the pixel coordinates in the image for each transformed version of the image transformation pixel.
テンソルトラバーサルユニットは、画像の次元および機械学習モデルの特定の次元に基づいて水平画素ストライドと垂直画素ストライドとを決定し得る。いくつかの実装形態では、これらのストライドは、下記の関係式１および２を使って決定される。 A tensor traversal unit may determine the horizontal and vertical pixel strides based on the dimensions of the image and the specific dimensions of the machine learning model. In some implementations, these strides are determined using relations 1 and 2 below.
いくつかの実装形態では、テンソルトラバーサルユニットは、水平ストライドと垂直ストライドとを、テンソルトラバーサルユニットのそれぞれの記憶回路、たとえば、レジスタに格納する。上述したように、これらのストライドは、固定小数点数の形式で格納されてもよく、各ストライドの整数部分は、ストライドの小数部分とは別に格納されてもよい。この例では、ストライドの小数部分は、最も近い固定小数点数に端数処理されてもよい。最も近い固定小数点数は、各ストライドを格納するために使われるビットの数を用いて表され得る。たとえば、画像の次元が１０×１０であり、機械学習モデルの特定の次元が７×７である場合、水平ストライドは１．３７５となり、垂直ストライドは１．３７５となる。小数部分（０．３７５）は、小数部分を格納するためのレジスタが７ビットである場合、または小数部分の固定小数点数が７ビットを含む場合、４８／１２８に端数処理され得る。 In some implementations, the tensor traversal unit stores the horizontal stride and the vertical stride in respective storage circuits, eg, registers, of the tensor traversal unit. As noted above, these strides may be stored in the form of fixed point numbers, and the integer portion of each stride may be stored separately from the fractional portion of the stride. In this example, the fractional portion of the stride may be rounded to the nearest fixed point number. The closest fixed-point number can be represented using the number of bits used to store each stride. For example, if the dimension of the image is 10×10 and the specific dimension of the machine learning model is 7×7, then the horizontal stride will be 1.375 and the vertical stride will be 1.375. The fractional part (0.375) can be rounded to 48/128 if the register for storing the fractional part is 7 bits or if the fixed point number in the fractional part contains 7 bits.
システムは、変換されたバージョンの画像の画素座標を決定する（３０８）。テンソルトラバーサルユニットは、水平画素ストライドと垂直画素ストライドとを使って画素座標を決定し得る。たとえば、上述したように、テンソルトラバーサルユニットは、ループの入れ子構造を使ってストライド値を画素座標の現在値に加算することによって画素値を決定し、画素座標を決定し得る。例として、ループとストライドとを使って画素座標を決定するための工程を図４に示し、詳細を以下に説明する。 The system determines (308) the pixel coordinates of the transformed version of the image. A tensor traversal unit may use horizontal and vertical pixel strides to determine pixel coordinates. For example, as described above, the tensor traversal unit may determine the pixel value by adding the stride value to the current value of the pixel coordinate using a nested loop to determine the pixel coordinate. As an example, a process for determining pixel coordinates using loops and strides is shown in FIG. 4 and described in detail below.
システムは、特定された画素座標ごとに１つ以上のメモリアドレスを決定する（３１０）。画素座標ごとのメモリアドレスは、画素座標についての機械学習モデルへの入力を生成するために使われることになる１つ以上の画素値を格納するための、記憶媒体における位置に対応する。テンソルトラバーサルユニットは、垂直座標の値および水平座標の値に基づいて画素座標のメモリアドレスを決定し得る。画素座標セットごとにメモリアドレス（複数可）を決定するための技術の例を、図４および図５を参照しながら以下に説明する。 The system determines (310) one or more memory addresses for each specified pixel coordinate. The memory address for each pixel coordinate corresponds to a location in the storage medium for storing one or more pixel values that will be used to generate the input to the machine learning model for that pixel coordinate. The tensor traversal unit may determine the memory address of the pixel coordinates based on the vertical and horizontal coordinate values. Examples of techniques for determining the memory address(es) for each set of pixel coordinates are described below with reference to FIGS.
図４は、画像データのメモリアドレスを格納するための別の例示的な工程４００を説明するフロー図である。工程４００は、１つ以上のコンピュータから成るシステム、たとえば、図１のコンピューティングシステム１０２によって実行されてもよい。システムは、テンソルトラバーサルユニット、たとえば、図１のテンソルトラバーサルユニット１２０を備える。
FIG. 4 is a flow diagram illustrating another exemplary process 400 for storing memory addresses of image data. Process 400 may be performed by a system of one or more computers, such as
システムは、入力画像の初期の画素座標を求める（４０２）。初期の画素座標は、変換されたバージョンの画像変換画素の画像内の画素座標である。初期の画素座標は、画像の水平次元に沿った水平座標と、画像の垂直次元に沿った垂直座標とを含む。たとえば、変換画素の画素座標が左から右、そして上から下に決定される場合、初期の画素座標は、画像の左上近くの座標であり得る。その他の例では、初期の画素座標は、右下近く、または画像内の別の適切な位置であってもよい。 The system determines 402 the initial pixel coordinates of the input image. The initial pixel coordinates are the pixel coordinates in the image of the transformed version of the image transform pixel. The initial pixel coordinates include horizontal coordinates along the horizontal dimension of the image and vertical coordinates along the vertical dimension of the image. For example, if the pixel coordinates of the transformed pixels are determined from left to right and top to bottom, the initial pixel coordinates may be those near the upper left of the image. In other examples, the initial pixel coordinates may be near the bottom right or another suitable location within the image.
いくつかの実装形態では、テンソルトラバーサルユニットは、水平画素ストライドおよび／または垂直画素ストライドに基づいて初期の画素座標を求める。テンソルトラバーサルユニットは、上記関係式１および２をそれぞれ使って水平画素ストライドおよび垂直画素ストライドを決定することができる。テンソルトラバーサルユニットは、下記の関係式３および４を使って初期の水平座標および初期の垂直座標を求めることができる。 In some implementations, the tensor traversal unit determines initial pixel coordinates based on horizontal and/or vertical pixel strides. The tensor traversal unit can determine the horizontal and vertical pixel strides using relations 1 and 2 above, respectively. The tensor traversal unit can determine the initial horizontal and vertical coordinates using relations 3 and 4 below.
初期の水平座標＝水平画素ストライド－１ （３）
初期の垂直座標＝垂直画素ストライド－１ （４）
システムは、初期の水平座標を１つ以上のハードウェア記憶回路に格納する（４０４）。ハードウェア記憶回路は、テンソルトラバーサルユニットの記憶回路、たとえば、レジスタであり得る。たとえば、テンソルトラバーサルユニットは、初期の水平座標の整数部分を水平画素座標整数要素（たとえば、図１の水平画素座標整数要素１３６）に格納し、水平座標の小数部分を水平画素座標小数要素（たとえば、図１の水平画素座標小数要素１３８）に格納し得る。
initial horizontal coordinate = horizontal pixel stride - 1 (3)
initial vertical coordinate = vertical pixel stride - 1 (4)
The system stores the initial horizontal coordinates in one or more hardware storage circuits (404). The hardware storage circuit may be a tensor traversal unit storage circuit, eg a register. For example, the tensor traversal unit stores the integer portion of the initial horizontal coordinate in a horizontal pixel coordinate integer element (e.g., horizontal pixel coordinate
システムは、初期の垂直座標を１つ以上のハードウェア記憶回路に格納する（４０６）。ハードウェア記憶回路は、テンソルトラバーサルユニットの記憶回路、たとえば、レジスタであり得る。たとえば、テンソルトラバーサルユニットは、初期の垂直座標の整数部分を垂直画素座標整数要素（たとえば、図１の垂直画素座標整数要素１３２）に格納し、垂直座標の小数部分を垂直画素座標小数要素（たとえば、図１の垂直画素座標小数要素１３８）に格納し得る。
The system stores the initial vertical coordinates in one or more hardware storage circuits (406). The hardware storage circuit may be a tensor traversal unit storage circuit, eg a register. For example, the tensor traversal unit stores the integer portion of the initial vertical coordinate in the vertical pixel coordinate integer element (e.g., vertical pixel coordinate
システムは、画素座標の１つ以上のメモリアドレスを決定する（４０８）。初回の繰り返しでは、テンソルトラバーサルユニットは、初期の画素座標の１つ以上のメモリアドレスを決定し得る。上述したように、画像の水平次元および垂直次元をトラバースするために使用されるループの繰り返しごとに画素座標が更新される。更新された画素座標ごとに、テンソルトラバーサルユニットは、１つ以上のメモリアドレスを決定し得る。 The system determines one or more memory addresses for pixel coordinates (408). In the first iteration, the tensor traversal unit may determine one or more memory addresses of initial pixel coordinates. As described above, the pixel coordinates are updated on each iteration of the loop used to traverse the horizontal and vertical dimensions of the image. For each updated pixel coordinate, the tensor traversal unit may determine one or more memory addresses.
各メモリアドレスは、画素値を格納するための記憶媒体における位置に対応する。メモリアドレスは、処理部、たとえば、図１の処理部１１４によって画素値をロードまたは格納するために使われる。たとえば、処理部は、画素値のメモリアドレスを使って画素値を取得し、画素値に基づいて機械学習モデルの入力を生成してもよい。最近傍法実装では、生成された入力は、画素値自体であってもよい。バイリニア法実装において、生成された入力は、４つの画素値の加重組合せであってもよい。
Each memory address corresponds to a location on the storage medium for storing a pixel value. The memory addresses are used to load or store pixel values by a processing unit, such as
最近傍法実装では、画素座標のメモリアドレスは、画素座標に最も近い（たとえば、最近傍の）入力画像内の画素の画素値を格納するための記憶媒体における位置に対応する。メモリアドレスは、画素座標の垂直座標と水平座標とに基づき得る。たとえば、テンソルトラバーサルユニットは、水平座標に基づいて第１の部分アドレス値を決定し、垂直座標に基づいて第２の部分アドレス値を決定し得る。 In a nearest neighbor implementation, the memory address of the pixel coordinate corresponds to the location in the storage medium for storing the pixel value of the pixel in the input image that is closest (eg, nearest neighbor) to the pixel coordinate. Memory addresses may be based on vertical and horizontal coordinates of pixel coordinates. For example, a tensor traversal unit may determine a first partial address value based on horizontal coordinates and a second partial address value based on vertical coordinates.
いくつかの実装形態では、第１の部分アドレス値は、水平座標および第３次元（たとえば、ｚ方向）の大きさに基づく。第３次元は、画素の色を表すために使われる色値の数に基づき得る。たとえば、グレースケール値が使われる場合、第３次元の大きさは、１であり得る。ＲＧＢ色値が使われる場合、第３次元の大きさは、１（たとえば、すべての３つの色値が同じメモリアドレスに格納された場合）または３（たとえば、各色値が別々に格納された場合）であり得る。水平座標が小数部分を含んでいる可能性があるため、水平座標の値の端数が切り捨てられ得る。たとえば、テンソルトラバーサルユニットは、０．５という値が端数処理されてゼロになる五捨六入を使って水平座標の端数を切り捨て得る。第１の部分アドレス値は、端数処理された水平座標と第３次元の大きさとの積に基づき得る。 In some implementations, the first partial address value is based on horizontal coordinates and magnitude in a third dimension (eg, z-direction). A third dimension may be based on the number of color values used to represent the color of the pixel. For example, the magnitude of the third dimension may be 1 if grayscale values are used. If RGB color values are used, the magnitude of the third dimension can be 1 (eg, if all three color values are stored at the same memory address) or 3 (eg, if each color value is stored separately). ). The value of the horizontal coordinate may be truncated because the horizontal coordinate may contain fractional parts. For example, the tensor traversal unit may round the horizontal coordinate using rounding, where a value of 0.5 is rounded to zero. The first partial address value may be based on the product of the rounded horizontal coordinate and the third dimension magnitude.
同様に、第２の部分アドレス値は、垂直座標、および水平次元の大きさ（たとえば、画像の水平次元に沿った画素の数）と第３次元の大きさとの積に基づき得る。垂直座標が小数部分も含んでいる可能性があるので、たとえば、五捨六入を使って垂直座標の値も端数が切り捨てられ得る。第２の部分アドレス値は、端数処理された垂直座標、および水平次元の大きさと第３次元の大きさとの積に基づき得る。これにより、画素座標のセットごとに一意のメモリアドレスが必ず割り当てられることになる。 Similarly, the second portion address value may be based on the vertical coordinate and the product of the horizontal dimension size (eg, the number of pixels along the horizontal dimension of the image) and the third dimension size. Since the vertical coordinate may also contain a fractional part, the value of the vertical coordinate may also be rounded down, for example using half-to-half. The second partial address value may be based on the rounded vertical coordinate and the product of the horizontal dimension magnitude and the third dimension magnitude. This ensures that a unique memory address is assigned to each set of pixel coordinates.
画素座標のメモリアドレスは、第１の部分アドレス値と第２の部分アドレス値との合計に基づき得る。たとえば、メモリアドレスは、第１の部分アドレス値と、第２の部分アドレス値と、基底アドレスとの合計に等しくてもよい。 The pixel coordinate memory address may be based on the sum of the first partial address value and the second partial address value. For example, the memory address may be equal to the sum of the first partial address value, the second partial address value, and the base address.
バイリニア法実装において、テンソルトラバーサルユニットは、画素座標に基づいて４つのメモリアドレスを決定し得る。各メモリアドレスは、入力画像に含まれる４つのソース画素のうちの、入力画像における画素座標の位置に最も近い１つの画素の画素値（複数可）を格納するための記憶媒体における位置に対応する。たとえば、４つのソース画素は、画素座標の位置の下の左側にある左下画素と、画素座標の位置の下の右側にある右下画素と、画素座標の位置の上の左側にある左上画素と、および画素座標の位置の上の右側にある右上画素とを含んでもよい。４つのメモリアドレスを決定するための工程例を図５および以下に説明する。 In a bilinear implementation, a tensor traversal unit can determine four memory addresses based on pixel coordinates. Each memory address corresponds to a location in the storage medium for storing the pixel value(s) of one of the four source pixels in the input image that is closest to the location of the pixel coordinates in the input image. . For example, the four source pixels are the lower left pixel on the left below the pixel coordinate location, the lower right pixel on the right below the pixel coordinate location, and the upper left pixel on the left above pixel coordinate location. , and the upper right pixel to the right of the pixel coordinate location. An example process for determining the four memory addresses is described in FIG. 5 and below.
システムは、水平座標の現在値を更新し、画像の水平次元をトラバースするために使用されるループのループインデックスを更新する（４１０）。いくつかの実装形態では、ループインデックスを更新するために、システムは、１という値をループインデックスの以前の値に加算することによってループインデックスを繰り返し得る。いくつかの実装形態では、水平座標はループインデックスとして使用されるため、水平座標が更新された場合に更新される。 The system updates the current value of the horizontal coordinate and updates the loop index of the loop used to traverse the horizontal dimension of the image (410). In some implementations, to update the loop index, the system may iterate the loop index by adding a value of 1 to the previous value of the loop index. In some implementations, the horizontal coordinate is used as the loop index, so it updates when the horizontal coordinate is updated.
水平座標を更新するために、テンソルトラバーサルユニットは、水平ストライドを水平座標の現在値に加算し、水平座標の更新値を格納し得る。ループの初回の繰り返しでは、テンソルトラバーサルユニットは、水平ストライドを初期の水平座標に加算する。 To update the horizontal coordinate, the tensor traversal unit may add the horizontal stride to the current value of the horizontal coordinate and store the updated value of the horizontal coordinate. On the first iteration of the loop, the tensor traversal unit adds the horizontal stride to the initial horizontal coordinate.
水平座標の整数部分と小数部分とが別々に格納される場合、テンソルトラバーサルユニットは、水平画素ストライドの整数部分を水平座標の整数部分に加算し得る。同様に、テンソルトラバーサルユニットは、水平画素ストライドの小数部分を水平座標の小数部分に加算し得る。これによって水平座標の小数部分が１以上になった場合、テンソルトラバーサルユニットは、小数部分を１よりも下に維持するよう、水平座標の整数部分に１を加算し、水平座標の小数部分から１を減算し得る。 If the integer and fractional parts of the horizontal coordinate are stored separately, the tensor traversal unit may add the integer part of the horizontal pixel stride to the integer part of the horizontal coordinate. Similarly, the tensor traversal unit may add the fractional part of the horizontal pixel stride to the fractional part of the horizontal coordinate. If this causes the fractional part of the horizontal coordinate to be greater than or equal to 1, the tensor traversal unit adds 1 to the integer part of the horizontal coordinate to keep the fractional part below 1, and 1 from the fractional part of the horizontal coordinate. can be subtracted.
システムは、画像の水平次元をトラバースするために使用されるループのループインデックスがその範囲以上であるかどうかを判断する（４１２）。この範囲は、変換画像に含まれる水平画素の数に基づき得る。たとえば、機械学習モデルの特定の次元が水平次元に７画素を有する場合、画像の水平方向の各行の７画素の座標とメモリアドレスとが決定されるよう、ループは、７回の繰り返しを含んでいる可能性がある。たとえば、ループインデックスはゼロから始まり、範囲は、６である可能性がある。ループインデックスが６という値に到達した場合、システムは、ループインデックスがその範囲に等しいと判断し得る。 The system determines (412) whether the loop index of the loop used to traverse the horizontal dimension of the image is greater than or equal to the range. This range may be based on the number of horizontal pixels contained in the transform image. For example, if a particular dimension of the machine learning model has 7 pixels in the horizontal dimension, the loop includes 7 iterations so that the coordinates and memory addresses of 7 pixels for each horizontal row of the image are determined. there may be. For example, the loop index could start at zero and range to six. If the loop index reaches a value of 6, the system may determine that the loop index is equal to the range.
水平次元をトラバースするために使用されるループのループインデックスがその範囲以上でない場合、システムは、動作（４０８）に戻り、以前の垂直座標と更新された水平座標とを含む更新画素座標のための１つ以上のメモリアドレスを決定する。水平次元をトラバースするために使用されるループのループインデックスがその範囲以上である場合、システムは、水平座標の値を初期の水平座標にリセットし、水平次元をトラバースするために使用されるループのループインデックスをその初期値にリセットする（４１４）。 If the loop index of the loop used to traverse the horizontal dimension is not greater than or equal to the range, the system returns to operation (408) to find the updated pixel coordinates, including the previous vertical coordinates and the updated horizontal coordinates. Determine one or more memory addresses. If the loop index of the loop used to traverse the horizontal dimension is greater than or equal to that range, the system resets the value of the horizontal coordinate to the initial horizontal coordinate and resets the value of the loop used to traverse the horizontal dimension. Reset the loop index to its initial value (414).
システムは、垂直座標の現在値を更新し、画像の垂直次元をトラバースするために使用されるループのループインデックスを更新する（４１６）。いくつかの実装形態では、ループインデックスを更新するために、システムは、１という値をループインデックスの以前の値に加算することによってループインデックスを繰り返し得る。いくつかの実装形態では、垂直座標はループインデックスとして使用されるため、垂直座標が更新された場合に更新される。 The system updates the current value of the vertical coordinate and updates the loop index of the loop used to traverse the vertical dimension of the image (416). In some implementations, to update the loop index, the system may iterate the loop index by adding a value of 1 to the previous value of the loop index. In some implementations, the vertical coordinate is used as the loop index, so it updates when the vertical coordinate is updated.
垂直座標を更新するために、テンソルトラバーサルユニットは、垂直ストライドを垂直座標の現在値に加算し、垂直座標の更新値を格納し得る。ループの初回の繰り返しでは、テンソルトラバーサルユニットは、垂直ストライドを初期の垂直座標に加算する。 To update the vertical coordinate, the tensor traversal unit may add the vertical stride to the current value of the vertical coordinate and store the updated value of the vertical coordinate. On the first iteration of the loop, the tensor traversal unit adds vertical stride to the initial vertical coordinate.
垂直座標の整数部分と小数部分とが別々に格納される場合、テンソルトラバーサルユニットは、垂直画素ストライドの整数部分を垂直座標の整数部分に加算し得る。同様に、テンソルトラバーサルユニットは、垂直画素ストライドの小数部分を垂直座標の小数部分に加算し得る。これによって垂直座標の小数部分が１以上になった場合、テンソルトラバーサルユニットは、小数部分を１よりも下に維持するよう、垂直座標の整数部分に１を加算
し、垂直座標の小数部分から１を減算し得る。
If the integer and fractional parts of the vertical coordinate are stored separately, the tensor traversal unit may add the integer part of the vertical pixel stride to the integer part of the vertical coordinate. Similarly, the tensor traversal unit may add the fractional part of the vertical pixel stride to the fractional part of the vertical coordinate. If this causes the fractional part of the vertical coordinate to be greater than or equal to 1, the tensor traversal unit adds 1 to the integer part of the vertical coordinate to keep the fractional part below 1, and 1 from the fractional part of the vertical coordinate. can be subtracted.
システムは、画像の垂直次元をトラバースするために使用されるループのループインデックスがその範囲以上であるかどうかを判断する（４１８）。この範囲は、変換画像に含まれる垂直画素の数に基づき得る。たとえば、機械学習モデルの特定の次元が垂直次元に７画素を有する場合、画像の垂直方向の各列の７画素の座標とメモリアドレスとが決定されるよう、ループは、７回の繰り返しを含んでいる可能性がある。たとえば、ループインデックスはゼロから始まり、範囲は、６である可能性がある。ループインデックスが６という値に到達した場合、システムは、ループインデックスがその範囲に等しいと判断し得る。 The system determines (418) whether the loop index of the loop used to traverse the vertical dimension of the image is greater than or equal to the range. This range may be based on the number of vertical pixels contained in the transformed image. For example, if a particular dimension of the machine learning model has 7 pixels in the vertical dimension, the loop includes 7 iterations such that the coordinates and memory addresses of 7 pixels in each vertical column of the image are determined. It is possible that For example, the loop index could start at zero and range to six. If the loop index reaches a value of 6, the system may determine that the loop index is equal to the range.
垂直次元をトラバースするために使用されるループのループインデックスがその範囲以上でない場合、システムは、動作（４０８）に戻り、更新された垂直座標とリセットされた水平座標（初期の水平座標）とを含む更新画素座標のための１つ以上のメモリアドレスを決定する。これにより、水平次元についてのループを使った、画像の水平次元に沿った別の行のトラバースが開始することになる。 If the loop index of the loop used to traverse the vertical dimension is not greater than or equal to the range, the system returns to operation (408) and sets the updated vertical coordinate and the reset horizontal coordinate (initial horizontal coordinate). Determine one or more memory addresses for updated pixel coordinates, including: This will start another row traversal along the horizontal dimension of the image using a loop over the horizontal dimension.
水平次元をトラバースするために使用されるループのループインデックスがその範囲以上である場合、変換画像の変換画素ごとの１つ以上のメモリアドレスが決定されたとして、工程４００は終了する。 If the loop index of the loop used to traverse the horizontal dimension is greater than or equal to the range, then step 400 ends as one or more memory addresses for each transformed pixel of the transformed image have been determined.
アドレスがたとえば順番に決定されると、テンソルトラバーサルユニットは、各メモリアドレスを処理部に出力し得る。いくつかの実装形態では、変換画素ごとのメモリアドレス（複数可）が決定された後、テンソルトラバーサルユニットは、当該メモリアドレスを出力し得る。処理部は、これらのメモリアドレスを使って画素値をロードまたは格納し得る。 Once the addresses are determined, for example in order, the tensor traversal unit may output each memory address to the processing unit. In some implementations, after the memory address(es) for each transform pixel is determined, the tensor traversal unit may output the memory addresses. The processing unit can use these memory addresses to load or store pixel values.
この例では、画像の水平次元をトラバースするために使用されるループが、入力画像の垂直次元をトラバースするために使用されるループ内に入れ子にされている。下記のループの入れ子構造を使って入力画像のメモリアドレスを決定することができる。 In this example, the loop used to traverse the horizontal dimension of the image is nested within the loop used to traverse the vertical dimension of the input image. The following nested loops can be used to determine the memory address of the input image.
この例では、ｉｎｉｔｉａｌ＿ｙが、初期の垂直座標であり、ｃｏｏｒｄ＿ｙが、垂直座標の現在値であり、ｓｉｚｅ＿ｙが、入力画像の垂直次元に沿った画素の数である。よって、外側ループのループ範囲は、画像の垂直次元に沿った画素の数よりも１小さい値に
等しく、ループインデックスは、垂直座標の現在値である。外側ループの各繰り返しの後、垂直座標の現在値は、垂直画素ストライドを垂直座標の現在値に加算することによって更新される。これに加えて、第２の部分アドレス値（ｓｅｃｏｎｄ＿ｐａｒｔｉａｌ＿ａｄｄｒｅｓｓ＿ｖａｌｕｅ）は、（たとえば、最近傍法の場合、五捨六入、バイリニア法の場合、フロア関数を使って）垂直座標の現在値の端数を切り捨てて、端数処理された値を画像の水平次元の大きさと第３次元の大きさとの積で乗算することによって決定される。
In this example, initial_y is the initial vertical coordinate, coord_y is the current value of the vertical coordinate, and size_y is the number of pixels along the vertical dimension of the input image. Thus, the loop extent of the outer loop is equal to one less than the number of pixels along the vertical dimension of the image, and the loop index is the current value of the vertical coordinate. After each iteration of the outer loop, the current value of the vertical coordinate is updated by adding the vertical pixel stride to the current value of the vertical coordinate. In addition, the second partial address value (second_partial_address_value) is rounded down (e.g., using rounding off for nearest neighbors, floor function for bilinear methods). is determined by multiplying the rounded value by the product of the horizontal dimension size and the third dimension size of the image.
同様に、ｉｎｉｔｉａｌ＿ｘが、水平座標の初期値であり、ｃｏｏｒｄ＿ｘが、水平座標の現在値であり、ｓｉｚｅ＿ｘが、画像の水平次元に沿った画素の数である。よって、内側ループのループ範囲は、画像の水平次元に沿った画素の数よりも１小さい値に等しく、ループインデックスは、水平座標の現在値である。内側ループの各繰り返しの後、水平座標の現在値は、水平画素ストライドを水平座標の現在値に加算することによって更新される。これに加えて、第１の部分アドレス値（ｆｉｒｓｔ＿ｐａｒｔｉａｌ＿ａｄｄｒｅｓｓ＿ｖａｌｕｅ）は、（たとえば、最近傍法の場合、五捨六入、バイリニア法の場合、座標以下の最大整数を出力するフロア関数を使って）水平座標の現在値の端数を切り捨てて、端数処理された値を第３次元の大きさで乗算することによって決定される。 Similarly, initial_x is the initial value of the horizontal coordinate, coord_x is the current value of the horizontal coordinate, and size_x is the number of pixels along the horizontal dimension of the image. Thus, the loop extent of the inner loop is equal to one less than the number of pixels along the horizontal dimension of the image, and the loop index is the current value of the horizontal coordinate. After each iteration of the inner loop, the current value of the horizontal coordinate is updated by adding the horizontal pixel stride to the current value of the horizontal coordinate. In addition, the first partial address value (first_partial_address_value) is the horizontal It is determined by rounding down the current value of the coordinate and multiplying the rounded value by the third dimension magnitude.
また、内側ループの繰り返しごとに、画素座標のメモリアドレス（ｍｅｍｏｒｙ＿ａｄｄｒｅｓｓ）も決定される。最近傍法実装の場合、メモリアドレスは、第１の部分アドレス値と、第２の部分アドレス値と、基底アドレス（任意）との合計に等しくてもよい。後述するが、バイリニア法実装の場合、垂直オフセット値および水平オフセット値を使って４つのメモリアドレスを決定することができる。 The memory address of pixel coordinates (memory_address) is also determined for each iteration of the inner loop. For nearest neighbor implementations, the memory address may be equal to the sum of the first partial address value, the second partial address value, and the base address (optional). As will be described below, for bilinear implementations, the vertical and horizontal offset values can be used to determine four memory addresses.
図５は、画像データのメモリアドレスと、バイリニア補間用の重みとを決定するための例示的な工程５００を説明するフロー図である。工程５００は、１つ以上のコンピュータから構成されるシステム、たとえば、図１のコンピューティングシステム１０２によって実行されてもよい。このシステムは、テンソルトラバーサルユニット、たとえば、図１のテンソルトラバーサルユニット１２０を備える。入力画像を変換するためにバイリニア法が使われている場合、工程５００の動作（またはその一部）は、図４の動作４０８のサブ動作であり得る。
FIG. 5 is a flow diagram illustrating an exemplary process 500 for determining memory addresses for image data and weights for bilinear interpolation. Process 500 may be performed by a system comprised of one or more computers, such as
システムは、入力画像内の水平座標の現在値を特定する（５０２）。たとえば、上述したように、ループを使って入力画像の水平次元をトラバースし、変換されたバージョンの画像の変換画素の画素座標の水平座標を決定および更新することができる。ループの各繰り返しにおいて、たとえば、水平画素ストライドを水平座標の以前の値に加算することによって水平座標の現在値を更新することができる。テンソルトラバーサルユニットは、水平座標の現在値を１つ以上のハードウェア記憶回路に保持することができる。 The system identifies the current value of the horizontal coordinate within the input image (502). For example, as described above, a loop can be used to traverse the horizontal dimension of the input image to determine and update the horizontal coordinates of the pixel coordinates of the transformed pixels of the transformed version of the image. In each iteration of the loop, the current value of the horizontal coordinate can be updated, for example, by adding the horizontal pixel stride to the previous value of the horizontal coordinate. A tensor traversal unit can maintain the current value of the horizontal coordinate in one or more hardware storage circuits.
システムは、入力画像内の垂直座標の現在値を特定する（５０４）。たとえば、上述したように、ループを使って入力画像の垂直次元をトラバースし、変換されたバージョンの画像の変換画素の画素座標の垂直座標を決定および更新することができる。ループの各繰り返しにおいて、たとえば、垂直画素ストライドを垂直座標の以前の値に加算することによって垂直座標の現在値を更新することができる。テンソルトラバーサルユニットは、垂直座標の現在値を１つ以上のハードウェア記憶回路に保持することができる。 The system identifies (504) the current value of the vertical coordinate in the input image. For example, as described above, a loop can be used to traverse the vertical dimension of the input image to determine and update the vertical coordinates of the pixel coordinates of the transformed pixels of the transformed version of the image. On each iteration of the loop, the current value of the vertical coordinate can be updated, for example, by adding the vertical pixel stride to the previous value of the vertical coordinate. A tensor traversal unit can maintain the current value of the vertical coordinate in one or more hardware storage circuits.
システムは、水平オフセット値を特定する（５０６）。入力画像の水平次元をトラバースするために使用されるループが入力画像の垂直次元をトラバースするために使用されるループ内に入れ子にされるｙ－ｍａｊｏｒ、ｘ－ｍｉｎｏｒループの入れ子構造を使ってメモリアドレスを決定する実装形態では、水平オフセット値は、入力画像の第３次元の大
きさ（たとえば、各画素を表すために使われる色値の数）に基づき得る。たとえば、水平オフセット値は、１であってもよい。
The system identifies a horizontal offset value (506). memory using a nested structure of y-major, x-minor loops where the loop used to traverse the horizontal dimension of the input image is nested within the loop used to traverse the vertical dimension of the input image In address-determining implementations, the horizontal offset value may be based on the third dimension of the input image (eg, the number of color values used to represent each pixel). For example, the horizontal offset value may be one.
システムは、垂直オフセット値を特定する（５０８）。ｙ－ｍａｊｏｒ、ｘ－ｍｉｎｏｒループの入れ子構造を使ってメモリアドレスを決定する実装形態では、垂直オフセット値は、水平次元の大きさと第３次元の大きさとの組合せに基づき得る。たとえば、垂直オフセット値は、水平次元に沿った入力画像の画素の数の積に基づき得る。 The system identifies a vertical offset value (508). In implementations that use a nested structure of y-major, x-minor loops to determine memory addresses, the vertical offset value may be based on a combination of the horizontal dimension magnitude and the third dimension magnitude. For example, the vertical offset value may be based on the product of the number of pixels in the input image along the horizontal dimension.
ｘ－ｍａｊｏｒ、ｙ－ｍｉｎｏｒループの入れ子構造が使われる場合、水平オフセット値は、垂直次元の大きさ（たとえば、入力画像の垂直次元に沿った画素の数）と第３次元の大きさとの積に等しい値であり得る。同様に、垂直オフセット値は、第３次元の大きさであり得る。 If a nested structure of x-major, y-minor loops is used, the horizontal offset value is the product of the magnitude of the vertical dimension (e.g., the number of pixels along the vertical dimension of the input image) and the magnitude of the third dimension. can be a value equal to Similarly, the vertical offset value can be the third dimension magnitude.
システムは、４つの画素座標の各々について、メモリアドレスを決定する（５１０）。４つの画素座標は、入力画像に含まれる４つのソース画素に対応する。当該４つのソース画素のために画素の値を使用して、変換されたバージョンの画像に含まれる変換画素の画素値が決定されることになる。変換画素は、水平座標の現在値および垂直座標の現在値によって定義される画素座標にある入力画像の画素を表す、変換画像の画素である。 The system determines (510) a memory address for each of the four pixel coordinates. The four pixel coordinates correspond to four source pixels contained in the input image. The pixel values for the four source pixels will be used to determine the pixel values of the transformed pixels contained in the transformed version of the image. A transform pixel is a pixel of the transform image that represents the pixel of the input image at pixel coordinates defined by the current value of the horizontal coordinate and the current value of the vertical coordinate.
４画素は、入力画像における当該画素座標の位置に最も近い４画素であり得る。たとえば、４つのソース画素は、当該画素座標の位置の下の左側にある左下画素と、画素座標の位置の下の右側にある右下画素と、画素座標の位置の上の左側にある左上画素と、画素座標の位置の上の右側にある右上画素とを含んでもよい。 The 4 pixels may be the 4 pixels closest to the position of the pixel coordinates in the input image. For example, the four source pixels are the lower left pixel below the pixel coordinate location, the lower right pixel below the pixel coordinate location, and the upper left pixel above the pixel coordinate location. and the upper right pixel to the right of the pixel coordinate location.
４つのメモリアドレスの各々は、画素座標と、１つ以上のオフセット値とに基づき得る。たとえば、テンソルトラバーサルユニットは、４つのメモリアドレスの各々を決定するために使われる第１の部分アドレス値および第２の部分アドレス値を決定し得る。上述した最近傍法実装と同様に、第１の部分アドレス値は、水平座標と、第３次元（たとえば、ｚ次元）の大きさとに基づき得る。水平座標が小数部分を含んでいる可能性があるので、水平座標の値の端数が切り捨てられ得る。たとえば、テンソルトラバーサルユニットは、水平座標以下の最大整数を出力するフロア関数を使って水平座標の端数を切り捨てることができる。第１の部分アドレス値は、端数処理された水平座標と第３次元の大きさとの積に基づき得る。画像の場合、ｚ次元の大きさは１であるため、第１の部分アドレス値は、水平座標の端数処理された値に等しい。 Each of the four memory addresses may be based on pixel coordinates and one or more offset values. For example, the tensor traversal unit may determine first and second partial address values used to determine each of the four memory addresses. Similar to the nearest neighbor implementation described above, the first partial address value may be based on a horizontal coordinate and a magnitude in a third dimension (eg, z dimension). The horizontal coordinate value may be truncated because the horizontal coordinate may contain a fractional part. For example, a tensor traversal unit can round down the horizontal coordinate with a floor function that outputs the largest integer less than or equal to the horizontal coordinate. The first partial address value may be based on the product of the rounded horizontal coordinate and the third dimension magnitude. For images, the z dimension has a magnitude of 1, so the first portion address value is equal to the rounded value of the horizontal coordinate.
同様に、第２の部分アドレス値は、垂直座標、および水平次元の大きさと第３次元の大きさとの積に基づき得る。垂直座標も小数部分を含んでいる可能性があるので、たとえばフロア関数を使って垂直座標の値も端数が切り捨てられ得る。第２の部分アドレス値は、端数処理された垂直座標、および水平次元の大きさと第３次元の大きさとの積に基づき得る。画像の場合、ｚ次元の大きさは１であるため、第２の部分アドレス値は、垂直座標の端数処理された値と水平次元の大きさとの積に等しい。 Similarly, the second partial address value may be based on the vertical coordinate and the product of the horizontal dimension magnitude and the third dimension magnitude. Since the vertical coordinate may also contain a fractional part, the vertical coordinate value may also be rounded using, for example, a floor function. The second partial address value may be based on the rounded vertical coordinate and the product of the horizontal dimension magnitude and the third dimension magnitude. For images, the z-dimension is unity, so the second portion address value is equal to the rounded value of the vertical coordinate multiplied by the horizontal dimension.
テンソルトラバーサルユニットは、ループの入れ子構造を使って、４つのメモリアドレスを第１の部分アドレス値および第２の部分アドレス値に基づいて決定し得る。たとえば、下記のループの入れ子構造が使われ得る。 The tensor traversal unit may use loop nesting to determine four memory addresses based on the first partial address value and the second partial address value. For example, the following loop nesting may be used.
このループの入れ子構造の例では、ｏｆｆｓｅｔ＿ｙが、垂直オフセット値であり、ｏｆｆｓｅｔ＿ｘが、水平オフセット値である。これに加えて、ｓｉｚｅ＿ｘｚが、水平次元の大きさと第３次元の大きさとの積（たとえば、第３次元の大きさが１である場合の水平次元の大きさ）であり、ｓｉｚｅ＿ｚが、第３次元の大きさである。ループの入れ子構造によって、次の４つのメモリアドレスが生成される。（１）第１の部分アドレス値＋第２の部分アドレス値＋０＋０、（２）第１の部分アドレス値＋第２の部分アドレス値＋０＋ｓｉｚｅ＿ｚ、（３）第１の部分アドレス値＋第２の部分アドレス値＋ｓｉｚｅ＿ｘｚ＋０、（４）第１の部分アドレス値＋第２の部分アドレス値＋ｓｉｚｅ＿ｘｚ＋ｓｉｚｅ＿ｘ）。このループの入れ子構造を、バイリニア法実装の場合の上述した画素座標を決定するためのループ内に入れ子にして、４つの画素値の４つのメモリアドレスを決定することができる。 In this loop nesting example, offset_y is the vertical offset value and offset_x is the horizontal offset value. In addition, size_xz is the product of the size of the horizontal dimension and the size of the third dimension (eg, the size of the horizontal dimension when the size of the third dimension is 1), and size_z is the size of the third dimension. dimension size. The nesting of loops produces the following four memory addresses. (1) first partial address value+second partial address value+0+0, (2) first partial address value+second partial address value+0+size_z, (3) first partial address value+second portion address value+size_xz+0, (4) first partial address value+second partial address value+size_xz+size_x). This loop nesting can be nested within the loop for determining pixel coordinates described above for the bilinear method implementation to determine the four memory addresses for the four pixel values.
システムは、４つのソース画素の各々について、重みを決定する（５１２）。ソース画素ごとの重みは、水平座標の現在値の小数部分および／または垂直座標の現在値の小数部分に基づいて決定され得る。小数部分を使った重みの決定にループの入れ子構造を使うことができる。ループの入れ子構造は、メモリアドレスを決定するために使用されるループの入れ子構造と並列して実行することができる。このようにすれば、いったん処理部４つのソース画素すべての画素値と重みとを有すると処理部がこれらの画素値と重みとを使って機械学習モデルに入力するための変換画素の画素値を生成できるよう、テンソルトラバーサルユニットが画素値にアクセスするためのメモリアドレスと、画素値に対応する重みとを一緒に、または連続して出力できるようになる。下記のループの入れ子構造を使って重みを決定することができる。 The system determines a weight for each of the four source pixels (512). A weight for each source pixel may be determined based on the fractional portion of the current value of the horizontal coordinate and/or the fractional portion of the current value of the vertical coordinate. Nested loops can be used to determine weights using fractional parts. The loop nest can be executed in parallel with the loop nest used to determine the memory address. In this way, once we have the pixel values and weights for all four source pixels, the processor uses these pixel values and weights to determine the pixel values of the transformed pixels for input to the machine learning model. The memory addresses from which the tensor traversal unit accesses the pixel values and the weights corresponding to the pixel values can be output together or sequentially so that the tensor traversal unit can generate them. The weights can be determined using the loop nesting below.
この例では、上述したメモリアドレスを決定するために使用されるループの入れ子構造として、水平座標（ｃｏｏｒｄ＿ｘ）と垂直座標（ｃｏｏｒｄ＿ｙ）とを決定するための外側ループが同じループ範囲（ｓｉｚｅ＿ｙ－１およびｓｉｚｅ＿ｙ－１）とループインデックス（ｃｏｏｒｄ＿ｙおよびｃｏｏｒｄ＿ｘ）とを使っている。これによって、変換されたバージョンの画像の変換画素座標ごとに４つの重みが必ず決定されることになる。 In this example, the nested structure of the loops used to determine the memory address described above is such that the outer loops for determining the horizontal coordinate (coord_x) and the vertical coordinate (coord_y) have the same loop range (size_y-1 and size_y-1) and loop indices (coord_y and coord_x). This ensures that four weights are determined for each transformed pixel coordinate of the transformed version of the image.
ｙｙおよびｘｘのための２つの内側ループを使って、４つの重みが当該２つの内側ループのインデックス値に基づいて決定される。ｙｙについてのループは、２回繰り返される（ｙｙ＝０の場合に１回、ｙｙ＝１の場合に１回）。同様に、ｘｘについてのループは、２回繰り返される（ｘｘ＝０の場合に１回、ｘｘ＝１の場合に１回）。よって、変換画素座標ごとの内側ループの４つの条件は、（ｘｘ＝０，ｙｙ＝０）、（ｘｘ＝１，ｙｙ＝０）、（ｘｘ＝０，ｙｙ＝１）、および（ｘｘ＝１，ｙｙ＝１）となる。条件ごとに異なる重みが決定され、当該条件ごとの重みは、入力画像内の画素に対応する。当該画素の重み
は、その画素値に適用されることになる。
Using two inner loops for yy and xx, four weights are determined based on the index values of the two inner loops. The loop on yy is repeated twice (once if yy=0 and once if yy=1). Similarly, the loop on xx is repeated twice (once if xx=0 and once if xx=1). So the four conditions in the inner loop for each transformed pixel coordinate are (xx=0, yy=0), (xx=1, yy=0), (xx=0, yy=1), and (xx=1 , yy=1). A different weight is determined for each condition, and the weight for each condition corresponds to a pixel in the input image. The weight for that pixel will be applied to that pixel value.
この例では、第１条件（ｘｘ＝０，ｙｙ＝０）を使って画素座標の位置の下の左側にある左下ソース画素の重みが決定される。左下ソース画素の重みは、水平座標の現在値の小数部分を１から引いた値に等しい水平方向の重みと、垂直座標の現在値の小数部分を１から引いた値に等しい垂直方向の重みとを含む。 In this example, the first condition (xx=0, yy=0) is used to determine the weight of the lower left source pixel to the left below the pixel coordinate location. The weight of the lower left source pixel has a horizontal weight equal to 1 minus the fractional part of the current value of the horizontal coordinate and a vertical weight equal to 1 minus the fractional part of the current value of the vertical coordinate. including.
第２条件（ｘｘ＝１，ｙｙ＝０）を使って画素座標の位置の下の右側にある右下ソース画素の重みが決定される。右下ソース画素の重みは、水平座標の現在値の小数部分に等しい水平方向の重みと、垂直座標の現在値の小数部分を１から引いた値に等しい垂直方向の重みとを含む。 The second condition (xx=1, yy=0) is used to determine the weight of the lower right source pixel to the right below the pixel coordinate location. The weights for the lower right source pixel include a horizontal weight equal to the fractional part of the current value of the horizontal coordinate and a vertical weight equal to 1 minus the fractional part of the current value of the vertical coordinate.
第３条件（ｘｘ＝０，ｙｙ＝１）を使って画素座標の位置の上の左側にある左上ソース画素の重みが決定される。左上ソース画素の重みは、水平座標の現在値の小数部分を１から引いた値に等しい水平方向の重みと、垂直座標の現在値の小数部分に等しい垂直方向の重みとを含む。 The third condition (xx=0, yy=1) is used to determine the weight of the upper left source pixel to the left above the pixel coordinate location. The weights for the upper left source pixel include a horizontal weight equal to 1 minus the fractional part of the current value of the horizontal coordinate, and a vertical weight equal to the fractional part of the current value of the vertical coordinate.
第４条件（ｘｘ＝１，ｙｙ＝１）を使って画素座標の位置の上の右側にある右上ソース画素の重みが決定される。右上ソース画素の重みは、水平座標の現在値の小数部分に等しい水平方向の重みと、垂直座標の現在値の小数部分に等しい垂直方向の重みとを含む。 The fourth condition (xx=1, yy=1) is used to determine the weight of the upper right source pixel to the right of the pixel coordinate location. The weights for the upper right source pixel include a horizontal weight equal to the fractional part of the current value of the horizontal coordinate and a vertical weight equal to the fractional part of the current value of the vertical coordinate.
これらの演算を使うと、ソース画素ごとの水平方向の重みは、ソース画素と画素座標の現在の水平座標との水平方向の距離に反比例する。同様に、ソース画素ごとの垂直方向の重みは、ソース画素と画素座標の現在の垂直座標との垂直方向の距離に反比例する。 Using these operations, the horizontal weight for each source pixel is inversely proportional to the horizontal distance between the source pixel and the current horizontal coordinate in pixel coordinates. Similarly, the vertical weight for each source pixel is inversely proportional to the vertical distance between the source pixel and the current vertical coordinate in pixel coordinates.
テンソルトラバーサルユニットは、１つの画素座標についての４つの重みを処理部に出力する。次に、処理部は、水平座標の現在値と垂直座標の値の現在値とによって定義される画素座標に対応する変換画素の画素値を、ソース画素ごとの画素値およびその対応する重みを使って決定し得る。 The tensor traversal unit outputs four weights for one pixel coordinate to the processing unit. Next, the processing unit calculates the pixel value of the transformed pixel corresponding to the pixel coordinate defined by the current value of the horizontal coordinate and the current value of the vertical coordinate using the pixel value and its corresponding weight for each source pixel. can be determined by
たとえば、処理部は、下記の関係式５を使って変換座標の画素値を決定することができる。 For example, the processing unit can determine the pixel value of the transformed coordinates using Equation 5 below.
関係式５では、ｐｉｘｅｌ＿ｖａｌｕｅｘ０ｙ０が、左下ソース画素の画素値であり、ｗｅｉｇｈｔｘ０ｙ０が、左下ソース画素の水平方向の重みと左下ソース画素の垂直方向の重みとの積である。同様に、ｐｉｘｅｌ＿ｖａｌｕｅｘ１ｙ０が、右下ソース画素の画素値であり、ｗｅｉｇｈｔｘ１ｙ０が、右下ソース画素の水平方向の重みと右下ソース画素の垂直方向の重みとの積であり、ｐｉｘｅｌ＿ｖａｌｕｅｘ０ｙ１が、左上ソース画素の画素値であり、ｗｅｉｇｈｔｘ０ｙ１が、左上ソース画素の水平方向の重みと右上ソース画素の垂直方向の重みとの積であり、ｐｉｘｅｌ＿ｖａｌｕｅｘ１ｙ１が、右上ソース画素の画素値であり、ｗｅｉｇｈｔｘ１ｙ１が、右上ソース画素の水平方向の重みと右上
ソース画素の垂直方向の重みとの積である。
In Equation 5, pixel_value x0y0 is the pixel value of the bottom left source pixel and weight x0y0 is the product of the horizontal weight of the bottom left source pixel and the vertical weight of the bottom left source pixel. Similarly, pixel_value x1y0 is the pixel value of the bottom right source pixel, weight x1y0 is the product of the horizontal weight of the bottom right source pixel and the vertical weight of the bottom right source pixel, and pixel_value x0y1 is: is the pixel value of the top left source pixel, weight x0y1 is the product of the horizontal weight of the top left source pixel and the vertical weight of the top right source pixel, pixel_value x1y1 is the pixel value of the top right source pixel, weight x1y1 is the product of the horizontal weight of the upper right source pixel and the vertical weight of the upper right source pixel.
処理部は、関係式５を使って、変換されたバージョンの入力画像の変換画素ごとの画素値を決定することができる。グレースケール値を使って各画素の色が表わされている場合、処理部は、関係式５を使って、画素ごとに１つのグレースケール画素値を決定することができる。ＲＢＧ値を使って各画素の色が表わされている場合、処理部は、関係式５を使って、画素の各ＲＧＢ色の値を別々に決定することができる。各色値の重みは同じになる。たとえば、処理部は、関係式５を使って、４つのソース画素の各々の重みと赤値とを使って変換画素の赤値を決定することができる。また、処理部は、関係式５を使って、ソース画素ごとの重みと青値とを使って変換画素の青値を決定することができ、関係式５を使って、ソース画素ごとの重みと緑値とを使って変換画素の緑値を決定することができる。 Using Equation 5, the processing unit can determine the pixel value for each transformed pixel of the transformed version of the input image. If a grayscale value is used to represent the color of each pixel, the processing unit can use Equation 5 to determine one grayscale pixel value for each pixel. If RBG values are used to represent the color of each pixel, the processing unit can use Equation 5 to determine each RGB color value of the pixel separately. Each color value has the same weight. For example, using Equation 5, the processing unit can use the weight and red value of each of the four source pixels to determine the red value of the transformed pixel. The processing unit can also use Equation 5 to determine the blue value of the transformed pixel using the weight and the blue value for each source pixel, and using Equation 5, the weight and blue value for each source pixel. The green value can be used to determine the green value of the transformed pixel.
次に、処理部は、機械学習モデルへの入力としてこれらの画素値を提供し得る。機械学習モデルは、変換されたバージョンの画像と同じ形状の画像を処理するように構成される。機械学習モデルの出力は、変換されたバージョンの入力画像を使った入力画像の分類であり得る。 The processing unit can then provide these pixel values as inputs to the machine learning model. The machine learning model is configured to process images of the same shape as the transformed version of the image. The output of the machine learning model can be a classification of the input image using the transformed version of the input image.
本明細書に記載の本発明の主題の実施の形態および機能的動作は、本明細書に開示の構造およびその構造的均等物を含む、デジタル電子回路、有形に含まれるコンピュータソフトウェアまたはファームウェア、コンピュータハードウェア、またはそれらのうちの１つ以上の組合せで実現され得る。本明細書に記載の本発明の主題の実施の形態は、１つ以上のコンピュータプログラム、つまり、データ処理装置による実行のためにまたはデータ処理装置の動作を制御するために実行される、有形の非一時的なプログラムキャリア上で符号化されたコンピュータプログラム命令の１つ以上のモジュールとして実現され得る。追加的または代替的に、プログラム命令は、人為的に生成された伝播信号、たとえば、適切な受信装置に送信されてデータ処理装置によって実行される情報を符号化するために生成された、機械によって生成された電気信号、光信号、または電磁信号上で符号化され得る。コンピュータ記憶媒体は、機械によって読み取り可能な記憶装置、機械によって読み取り可能な記憶基板、ランダムアクセスメモリ素子もしくはシリアルアクセスメモリ素子、またはそれらのうちの１つ以上の組合せであり得る。 Embodiments and functional operations of the inventive subject matter described herein may be implemented in digital electronic circuits, tangibly contained computer software or firmware, computer hardware, including structures disclosed herein and structural equivalents thereof. It may be implemented in hardware, or a combination of one or more thereof. Embodiments of the inventive subject matter described herein comprise one or more computer programs, i.e., tangible programs, that are executed for execution by or to control the operation of a data processing apparatus. It may be implemented as one or more modules of computer program instructions encoded on a non-transitory program carrier. Additionally or alternatively, the program instructions may be implemented by an artificially generated propagated signal, e.g. by a machine generated to encode information that is transmitted to a suitable receiving device and executed by a data processing device. It can be encoded on a generated electrical, optical, or electromagnetic signal. A computer storage medium may be a machine-readable storage device, a machine-readable storage substrate, a random-access memory element or a serial-access memory element, or a combination of one or more thereof.
１つ以上のプログラム可能なコンピュータが入力データを操作することおよび出力を生成することによって１つ以上のコンピュータプログラムを実行して機能を実行することにより、本明細書に記載のプロセスおよび論理フローが実行され得る。また、プロセスおよび論理フローは、専用の論理回路、たとえば、ＦＰＧＡ（Ｆｉｅｌｄ Ｐｒｏｇｒａｍｍａｂｌｅ Ｇａｔｅ Ａｒｒａｙ）、ＡＳＩＣ（Ａｐｐｌｉｃａｔｉｏｎ Ｓｐｅｃｉｆｉｃ Ｉｎｔｅｇｒａｔｅｄ Ｃｉｒｃｕｉｔ）またはＧＰＧＰＵ（Ｇｅｎｅｒａｌ Ｐｕｒｐｏｓｅ Ｇｒａｐｈｉｃｓ Ｐｒｏｃｅｓｓｉｎｇ Ｕｎｉｔ）によって実行され得、装置は、このような専用の論理回路として実現され得る。 One or more programmable computers execute one or more computer programs to perform functions by manipulating input data and generating output to perform the processes and logic flows described herein. can be performed. Alternatively, the process and logic flow may be performed by a dedicated logic circuit, such as an FPGA (Field Programmable Gate Array), an ASIC (Application Specific Integrated Circuit) or a GPGPU (General Purpose Graphics Processing Unit), the apparatus like this It can be implemented as a dedicated logic circuit.
コンピュータプログラムの実行に適したコンピュータは、一例として、汎用マイクロプロセッサもしくは特定用途向けマイクロプロセッサまたはその両方、またはその他の種類のＣＰＵ（Ｃｅｎｔｒａｌ Ｐｒｏｃｅｓｓｉｎｇ Ｕｎｉｔ）を含む。一般に、ＣＰＵは、ＲＯＭ（Ｒｅａｄ－Ｏｎｌｙ Ｍｅｍｏｒｙ）、ＲＡＭ（Ｒａｎｄｏｍ Ａｃｃｅｓｓ Ｍｅｍｏｒｙ）、またはその両方から命令およびデータを受け取る。コンピュータの必須構成要素は、命令を実施または実行するためのＣＰＵ、ならびに命令およびデータを格納するための１つ以上のメモリ素子である。一般に、コンピュータは、データを格納するための１つ以上の大容量記憶装置、たとえば、磁気ディスク、光磁気ディスク、または光ディスクを備える、または、このような１つ以上の大容量記憶装置との間でデータの受信、送信、もしくはその両方を行うために操作可能に接続される。しかしながら、コンピ
ュータは、このような機器を有する必要はない。また、コンピュータは、別の機器、たとえば、一例を挙げると、携帯電話、携帯情報端末（ＰＤＡ）、携帯オーディオもしくはビデオプレーヤ、ゲームコントローラ、ＧＰＳ（Ｇｌｏｂａｌ Ｐｏｓｉｔｉｏｎｉｎｇ Ｓｙｓｔｅｍ）受信機、またはポータブル記憶装置（たとえば、ＵＳＢ（Ｕｎｉｖｅｒｓａｌ Ｓｅｒｉａｌ Ｂｕｓ）フラッシュドライブ）に組み込むことができる。
Computers suitable for the execution of a computer program include, by way of example, general and/or application specific microprocessors, or other types of CPUs (Central Processing Units). In general, a CPU receives instructions and data from read-only memory (ROM), random access memory (RAM), or both. The essential components of a computer are a CPU for implementing or executing instructions and one or more memory elements for storing instructions and data. Generally, a computer includes, or is in communication with, one or more mass storage devices, such as magnetic, magneto-optical, or optical disks, for storing data. operably connected to receive data, transmit data, or both. However, a computer need not have such equipment. Computers may also be connected to other devices such as mobile phones, personal digital assistants (PDAs), portable audio or video players, game controllers, Global Positioning System (GPS) receivers, or portable storage devices (e.g. , USB (Universal Serial Bus) flash drives).
コンピュータプログラム命令およびデータを格納するのに適した読み取り可能な媒体は、一例として、ＥＰＲＯＭ、ＥＥＰＲＯＭ、およびフラッシュメモリ素子などの半導体メモリ素子、内蔵ハードディスクまたはリムーバブルディスクなどの磁気ディスク、光磁気ディスク、ならびにＣＤ－ＲＯＭおよびＤＶＤ－ＲＯＭディスクを含むすべての形態の不揮発性メモリと、媒体と、メモリ素子とを含む。プロセッサおよびメモリは、専用の論理回路によって補われ得る、または専用の論理回路に内蔵され得る。 Suitable readable media for storing computer program instructions and data include, by way of example, semiconductor memory devices such as EPROM, EEPROM, and flash memory devices; magnetic disks, such as internal or removable hard disks; magneto-optical disks; It includes all forms of non-volatile memory, including CD-ROM and DVD-ROM disks, media and memory devices. The processor and memory may be supplemented by, or contained within, dedicated logic circuitry.
本明細書は、多くの具体的な実装形態の詳細を含むが、これらはいかなる発明の範囲および特許請求の範囲の限定として解釈されるべきではなく、むしろ、特定の発明の特定の実施の形態に固有であり得る特徴の説明であると解釈されるべきである。別々の実施の形態を背景に本明細書において説明した特定の特徴を組み合わせて１つの実施の形態で実現することもできる。その逆に、１つの実施の形態を背景に説明した様々な特徴を複数の実施の形態または任意の適した部分的な組合せで別々に実現することもできる。また、特徴を、特定の組合せで動作するものとして上述し、そのように当初、主張し得たが、主張した組合せから得られる１つ以上の特徴を場合によっては当該組合せから削除することができ、主張した組合せは、部分的な組合せまたは部分的な組合せの変形例を対象としてもよい。 While this specification contains many specific implementation details, these should not be construed as limitations on the scope of any invention or claims, but rather specific embodiments of the particular invention. should be construed as a description of features that may be inherent in Certain features that are described in this specification in the context of separate embodiments can also be implemented in combination in a single embodiment. Conversely, various features that are described in the context of a single embodiment can also be implemented separately in multiple embodiments or in any suitable subcombination. Also, while features may be described above and initially claimed as operating in a particular combination, one or more features resulting from the claimed combination may optionally be deleted from the combination. , a claimed combination may cover subcombinations or subcombination variations.
同様に、動作を特定の順番で図面に示したが、所望の結果を実現するために、このような動作が図示された特定の順番または連続して実行する、または、図示した動作のすべてを実行する必要があると理解されるべきではない。特定の状況では、多重タスク処理および並列処理が有利である場合がある。また、上述した実施の形態において様々なシステムモジュールおよび構成要素が分けられていることは、このように分けることがすべての実施の形態において必要であると理解されるべきではなく、記載のプログラムコンポーネントおよびシステムは、一般に、１つのソフトウェアプロダクトに一体化することができたり、複数のソフトウェアプロダクトにパッケージ化することができたりすると理解されるべきである。 Similarly, although acts have been illustrated in the figures in a particular order, it is believed that such acts may be performed in the particular order illustrated or sequentially, or all of the illustrated acts may be performed to achieve desired results. should not be construed as necessary to do so. Multitasking and parallel processing may be advantageous in certain situations. Also, the separation of various system modules and components in the above-described embodiments should not be construed as requiring such separation in all embodiments, rather than the described program components. and system generally can be integrated into one software product or packaged into multiple software products.
本発明の主題についての特定の実施の形態を説明した。その他の実施の形態は、添付の特許請求の範囲に含まれる。たとえば、請求項に記載の動作は、異なる順序で実行することができ、それでもなお所望の結果を実現することができる。一例として、添付の図面に示した工程は、所望の結果を実現するために必ずしも図示した特定の順番または連続した工程である必要はない。特定の実装形態では、多重タスク処理および並列処理が有利である場合がある。 Particular embodiments of the inventive subject matter have been described. Other embodiments are within the scope of the appended claims. For example, the actions recited in the claims can be performed in a different order and still achieve desirable results. As an example, the steps shown in the accompanying drawings need not necessarily be in the specific order or sequence shown to achieve desired results. Multitasking and parallel processing may be advantageous in certain implementations.
Claims (20)
画像についての機械学習演算を機械学習モデルおよび前記画像の画素値を使って行うように構成された処理部を備え、前記機械学習モデルは、特定の次元の画像を処理するように構成され、前記システムは、さらに、
前記画像の画素値を格納するように構成された記憶媒体と、
１つ以上のハードウェアプロセッサを含むメモリアドレス演算ユニットとを備え、前記１つ以上のハードウェアプロセッサは、
画像の画像データを受け付け、前記画像データは、前記画像の次元を規定し、前記画像の次元は、水平画素次元および垂直画素次元を規定し、前記水平画素次元は、前記画像の水平次元に沿った画素の数であり、前記垂直画素次元は、前記画像の垂直次元に沿った画素の数であり、前記１つ以上のハードウェアプロセッサは、さらに、
前記画像の次元が前記特定の次元に一致しないと判断し、
前記画像の次元が前記特定の次元に一致しないと判断することに応答して、
前記画像の次元および前記特定の次元に基づいて、前記画像の水平画素ストライドおよび垂直画素ストライドを決定し、
前記水平画素ストライドおよび前記垂直画素ストライドを使用して、変換されたバージョンの入力画像の複数の画素座標を決定し、各画素座標は、垂直座標および水平座標を含み、前記１つ以上のハードウェアプロセッサは、さらに、
前記複数の画素座標の各々について、画素座標についての前記機械学習モデルへの入力を生成するために使われることになる１つ以上の画素値を格納するための１つ以上のメモリアドレスを前記記憶媒体において決定し、前記画素座標ごとの１つ以上のメモリアドレスは、前記画素座標の垂直座標および水平座標に基づいており、前記１つ以上のハードウェアプロセッサは、さらに、
各メモリアドレスを前記処理部に出力するように構成される、システム。 a system,
a processing unit configured to perform a machine learning operation on an image using a machine learning model and pixel values of the image, the machine learning model configured to process an image of a particular dimension; The system further
a storage medium configured to store pixel values of the image;
a memory addressing unit including one or more hardware processors, the one or more hardware processors comprising:
receiving image data for an image, the image data defining dimensions of the image, the dimensions defining a horizontal pixel dimension and a vertical pixel dimension, the horizontal pixel dimension along the horizontal dimension of the image; and the vertical pixel dimension is the number of pixels along the vertical dimension of the image, the one or more hardware processors further comprising:
determining that the dimensions of the image do not match the specified dimensions;
In response to determining that the dimensions of the image do not match the specified dimensions,
determining horizontal and vertical pixel strides of the image based on the dimensions of the image and the particular dimension;
determining a plurality of pixel coordinates of a transformed version of an input image using said horizontal pixel stride and said vertical pixel stride, each pixel coordinate including a vertical coordinate and a horizontal coordinate; The processor further
for each of the plurality of pixel coordinates, storing one or more memory addresses for storing one or more pixel values to be used to generate inputs to the machine learning model for the pixel coordinates; determining in a medium, the one or more memory addresses for each pixel coordinate being based on vertical and horizontal coordinates of the pixel coordinate, the one or more hardware processors further comprising:
A system configured to output each memory address to the processing unit.
前記水平座標の現在値を格納するための１つ以上の第１のハードウェア記憶回路と、
前記垂直座標の現在値を格納するための１つ以上の第２のハードウェア記憶回路とを含み、
前記１つ以上のハードウェアプロセッサは、
初期の水平座標と初期の垂直座標とを含む初期の画素座標を求めること、
前記初期の水平座標を前記１つ以上の第１のハードウェア記憶回路に格納すること、
前記初期の垂直座標を前記１つ以上の第２のハードウェア記憶回路に格納すること、
前記画像の水平画素次元をトラバースするために使用される第１ループの繰り返しごとに、前記第１ループの繰り返しの後に前記水平画素ストライドを前記水平座標の現在値に加算することで前記水平座標の現在値を更新すること、
前記画像の垂直画素次元をトラバースするために使用される第２ループの繰り返しごとに、前記第１第２ループの繰り返しの後に前記垂直画素ストライドを前記垂直座標の現在値に加算することで前記垂直座標の現在値を更新すること、
によって、前記画像の複数の画素座標を決定する、請求項１または２に記載のシステム。 The memory address operation unit is
one or more first hardware storage circuits for storing current values of the horizontal coordinates;
one or more second hardware storage circuits for storing current values of said vertical coordinates;
The one or more hardware processors are
Determining initial pixel coordinates, including an initial horizontal coordinate and an initial vertical coordinate;
storing the initial horizontal coordinates in the one or more first hardware storage circuits;
storing the initial vertical coordinates in the one or more second hardware storage circuits;
for each iteration of the first loop used to traverse the horizontal pixel dimension of the image, after the first loop iteration, by adding the horizontal pixel stride to the current value of the horizontal coordinate; updating the current value,
By adding the vertical pixel stride to the current value of the vertical coordinate after each iteration of the first second loop, for each iteration of the second loop used to traverse the vertical pixel dimension of the image. updating the current values of the coordinates;
3. The system of claim 1 or 2, wherein a plurality of pixel coordinates of said image are determined by:
記機械学習モデルへの入力として前記処理部によって使用される、請求項３に記載のシステム。 The memory address determined for each pixel coordinate corresponds to a location in the storage medium for storing pixel values of pixels nearest to the pixel coordinate, and the pixel value for each nearest pixel is stored in the machine learning model. 4. The system of claim 3, used by said processing unit as an input to.
前記第１ループまたは前記第２ループの繰り返しごとに、
前記１つ以上の第１のハードウェア記憶回路に格納された前記水平座標の現在値を特定することと、
前記１つ以上の第２のハードウェア記憶回路に格納された前記垂直座標の現在値を特定することと、
前記水平座標の現在値および前記垂直座標の現在値に基づいて、前記水平座標の現在値および前記垂直座標の現在値に対応する前記画素座標のメモリアドレスを決定することとを含む、請求項３または４に記載のシステム。 Determining the one or more memory addresses in the storage medium for storing the one or more pixel values to be used to generate an input to the machine learning model for pixel coordinates;
For each iteration of the first loop or the second loop,
determining current values of the horizontal coordinates stored in the one or more first hardware storage circuits;
determining a current value of the vertical coordinate stored in the one or more second hardware storage circuits;
determining a memory address of said pixel coordinates corresponding to said current value of said horizontal coordinate and said current value of said vertical coordinate based on said current value of said horizontal coordinate and said current value of said vertical coordinate. Or the system according to 4.
前記水平座標の現在値と第１次元乗数との積に基づいて第１の部分アドレス値を決定することと、
前記垂直座標の現在値と第２次元乗数との積に基づいて第２の部分アドレス値を決定することと、
前記第１の部分アドレス値と前記第２の部分アドレス値との合計を求めることによって前記水平座標の現在値および前記垂直座標の現在値に対応する前記画素座標のメモリアドレスを決定することとを含む、請求項５に記載のシステム。 Determining a memory address of the pixel coordinates corresponding to the current value of the horizontal coordinate and the current value of the vertical coordinate comprises:
determining a first partial address value based on the product of the current value of the horizontal coordinate and a first dimension multiplier;
determining a second partial address value based on the product of the current value of the vertical coordinate and a second dimension multiplier;
determining a memory address of said pixel coordinates corresponding to said current value of said horizontal coordinate and said current value of said vertical coordinate by summing said first partial address value and said second partial address value. 6. The system of claim 5, comprising:
前記第１ループまたは前記第２ループの繰り返しごとに、
前記１つ以上の第１のハードウェア記憶回路に格納された前記水平座標の現在値を特定することと、
前記１つ以上の第２のハードウェア記憶回路に格納された前記垂直座標の現在値を特定することと、
垂直オフセット値を特定することと、
水平オフセット値を特定することと、
前記４つの画素座標のうちの第１の画素座標について、前記第１の画素座標の第１の画素値を格納するための第１メモリアドレスを、前記水平座標の現在値と前記垂直座標の現在値との合計に基づいて決定することと、
前記４つの画素座標のうちの第２の画素座標について、前記第２の画素座標の第２の画素値を格納するための第２メモリアドレスを、前記水平座標の現在値と、前記垂直座標
の現在値と、前記垂直オフセット値との合計に基づいて決定することと、
前記４つの画素座標のうちの第３の画素座標について、前記第３の画素座標の第３の画素値を格納するための第３メモリアドレスを、前記水平座標の現在値と、前記垂直座標の現在値と、前記水平オフセット値との合計に基づいて決定することと、
前記４つの画素座標のうちの第４の画素座標について、前記第４の画素座標の第４の画素値を格納するための第４メモリアドレスを、前記水平座標の現在値と、前記垂直座標の現在値と、前記垂直オフセット値と、前記水平オフセット値との合計に基づいて決定することとを含む、請求項３～８のいずれか１項に記載のシステム。 Determining the one or more memory addresses in the storage medium for storing the one or more pixel values to be used to generate an input to the machine learning model for pixel coordinates; Determining a memory address of each of the four pixel coordinates includes determining a memory address of each of the four pixel coordinates for use in bilinear interpolation of pixel values of the pixel coordinates;
For each iteration of the first loop or the second loop,
determining current values of the horizontal coordinates stored in the one or more first hardware storage circuits;
determining a current value of the vertical coordinate stored in the one or more second hardware storage circuits;
identifying a vertical offset value;
identifying a horizontal offset value;
For a first pixel coordinate of the four pixel coordinates, a first memory address for storing the first pixel value of the first pixel coordinate is the current value of the horizontal coordinate and the current value of the vertical coordinate. determining based on the sum of the values and
For a second pixel coordinate among the four pixel coordinates, a second memory address for storing a second pixel value of the second pixel coordinate is a current value of the horizontal coordinate and a current value of the vertical coordinate. determining based on the sum of a current value and the vertical offset value;
For a third pixel coordinate among the four pixel coordinates, a third memory address for storing a third pixel value of the third pixel coordinate is a current value of the horizontal coordinate and a current value of the vertical coordinate. determining based on the sum of a current value and the horizontal offset value;
For a fourth pixel coordinate among the four pixel coordinates, a fourth memory address for storing a fourth pixel value of the fourth pixel coordinate is a current value of the horizontal coordinate and a current value of the vertical coordinate. A system according to any one of claims 3 to 8, comprising determining based on the sum of a current value, said vertical offset value and said horizontal offset value.
前記処理部は、前記４つの画素座標の各々にある前記画素値および前記４つの画素座標の各々の重みを使って前記機械学習モデルの入力画素値を決定する、請求項９または１０に記載のシステム。 The one or more hardware processors determine bilinear interpolation weights for each of the four pixel coordinates and output each weight to the processing unit;
11. The processing unit of claim 9 or 10, wherein the processing unit determines the input pixel value of the machine learning model using the pixel value at each of the four pixel coordinates and the weight of each of the four pixel coordinates. system.
前記複数の画素座標の各々について、前記画素座標の１つ以上のメモリアドレスに格納された画素値から１つ以上の色値を決定することによって前記機械学習モデルへの入力を生成するように構成され、
生成された前記入力を前記機械学習モデルを使って処理し、機械学習出力を生成するように構成される、請求項１～１２のいずれか１項に記載のシステム。 The processing unit is
configured to generate input to the machine learning model by determining, for each of the plurality of pixel coordinates, one or more color values from pixel values stored at one or more memory addresses of the pixel coordinates; is,
The system of any one of claims 1-12, configured to process the generated input using the machine learning model to generate a machine learning output.
画像の画像データを受け付けるステップを含み、前記画像データは、前記画像の次元を規定し、前記画像の次元は、水平画素次元および垂直画素次元を規定し、前記水平画素次元は、前記画像の水平次元に沿った画素の数であり、前記垂直画素次元は、前記画像の垂直次元に沿った画素の数であり、前記方法は、さらに、
前記画像の次元が、機械学習モデルが処理するように構成された画像の特定の次元に一致しないと判断するステップと、
前記画像の次元が前記特定の次元に一致しないと判断することに応答して、
前記画像の次元および前記特定の次元に基づいて、前記画像の水平画素ストライドおよび垂直画素ストライドを決定するステップと、
前記水平画素ストライドおよび前記垂直画素ストライドを使用して、変換されたバージョンの入力画像の複数の画素座標を決定するステップとを含み、各画素座標は、垂直座標および水平座標を含み、前記方法は、さらに、
前記複数の画素座標の各々について、画素座標についての前記機械学習モデルへの入力を生成するために使われることになる１つ以上の画素値を格納するための１つ以上のメモリアドレスを記憶媒体において決定するステップを含み、前記画素座標ごとのメモリアドレスは、前記画素座標の垂直座標および水平座標に基づいており、前記方法は、さらに、
前記機械学習モデルを使って画像についての機械学習演算を行うように構成された処理部に各メモリアドレスを出力するステップを含む、方法。 A method performed by one or more hardware processors, the method comprising:
receiving image data for an image, said image data defining dimensions of said image, said image dimensions defining horizontal pixel dimensions and vertical pixel dimensions, said horizontal pixel dimensions being horizontal dimensions of said image; is the number of pixels along a dimension, the vertical pixel dimension being the number of pixels along the vertical dimension of the image, the method further comprising:
determining that the dimensions of the image do not match the particular dimensions of the image that the machine learning model is configured to process;
In response to determining that the dimensions of the image do not match the specified dimensions,
determining horizontal and vertical pixel strides of the image based on the dimensions of the image and the particular dimension;
determining a plurality of pixel coordinates of a transformed version of an input image using said horizontal pixel stride and said vertical pixel stride, each pixel coordinate comprising a vertical coordinate and a horizontal coordinate, said method comprising: ,moreover,
storage medium having, for each of said plurality of pixel coordinates, one or more memory addresses for storing one or more pixel values to be used to generate inputs to said machine learning model for said pixel coordinates; wherein the memory address for each pixel coordinate is based on the vertical and horizontal coordinates of the pixel coordinate, the method further comprising:
outputting each memory address to a processing unit configured to perform machine learning operations on images using the machine learning model.
クセスし、前記メモリアドレスに格納された画素値に基づいて機械学習演算を行う、請求項１４に記載の方法。 15. The method of claim 14, wherein the processing unit uses each memory address to access a pixel value stored at the memory address and performs machine learning operations based on the pixel values stored at the memory address.
初期の水平座標と初期の垂直座標とを含む初期の画素座標を求めるステップと、
前記初期の水平座標を１つ以上の第１のハードウェア記憶回路に格納するステップと、
前記初期の垂直座標を１つ以上の第２のハードウェア記憶回路に格納するステップと、
前記画像の水平画素次元をトラバースするために使用される第１ループの繰り返しごとに、前記第１ループの繰り返しの後に前記水平画素ストライドを前記水平座標の現在値に加算することによって前記水平座標の現在値を更新し、前記垂直座標の現在値に更新する度に、前記水平座標の現在値を前記１つ以上の第１のハードウェア記憶回路に格納するステップと、
前記画像の垂直画素次元をトラバースするために使用される第２ループの繰り返しごとに、前記第１第２ループの繰り返しの後に前記垂直画素ストライドを前記垂直座標の現在値に加算することによって前記垂直座標の現在値を更新し、前記垂直座標の現在値に更新する度に、前記垂直座標の現在値を前記１つ以上の第２のハードウェア記憶回路に格納するステップとを含む、請求項１４または１５に記載の方法。 Determining a plurality of pixel coordinates of the image comprises:
determining initial pixel coordinates including an initial horizontal coordinate and an initial vertical coordinate;
storing the initial horizontal coordinates in one or more first hardware storage circuits;
storing the initial vertical coordinates in one or more second hardware storage circuits;
For each iteration of the first loop used to traverse the horizontal pixel dimension of the image, after the iteration of the first loop, the horizontal coordinate is changed by adding the horizontal pixel stride to the current value of the horizontal coordinate. updating the current value and storing the current value of the horizontal coordinate in the one or more first hardware storage circuits each time it is updated to the current value of the vertical coordinate;
For each iteration of the second loop used to traverse the vertical pixel dimension of the image, the vertical pixel stride is added to the current value of the vertical coordinate after the first second loop iteration. updating the current value of coordinates and storing the current value of the vertical coordinate in the one or more second hardware storage circuits each time the current value of the vertical coordinate is updated to the current value of the vertical coordinate. Or the method according to 15.
画像の水平座標の現在値を格納するための１つ以上の第１のハードウェア記憶回路と、
画像の垂直座標の現在値を格納するための１つ以上の第２のハードウェア記憶回路とを備え、
１つ以上のハードウェアプロセッサは、
前記画像の画像データを受け付け、前記画像データは、前記画像の次元を規定し、前記画像の次元は、水平画素次元および垂直画素次元を規定し、前記水平画素次元は、前記画像の水平次元に沿った画素の数であり、前記垂直画素次元は、前記画像の垂直次元に沿った画素の数であり、前記１つ以上のハードウェアプロセッサは、さらに、
前記画像の次元が、機械学習モデルが処理するように構成された画像の特定の次元に一致しないと判断し、
前記画像の次元が前記特定の次元に一致しないと判断することに応答して、
前記画像の次元および前記特定の次元に基づいて、前記画像の水平画素ストライドおよび垂直画素ストライドを決定し、
前記水平画素ストライドおよび前記垂直画素ストライドを使用して、変換されたバージョンの入力画像の複数の画素座標を決定し、各画素座標は、垂直座標および水平座標を含み、前記画像の次元が前記特定の次元に一致しないと判断することに応答して、さらに、
前記水平座標を前記１つ以上の第１のハードウェア記憶回路に格納し、
前記垂直座標を１つ以上の第２のハードウェア記憶回路に格納し、前記１つ以上のハードウェアプロセッサは、さらに、
前記複数の画素座標の各々について、画素座標についての前記機械学習モデルへの入力を生成するために使われることになる１つ以上の画素値を格納するための１つ以上のメモリアドレスを記憶媒体において決定し、前記画素座標ごとのメモリアドレスは、前記画素座標の垂直座標および水平座標に基づいており、前記１つ以上のハードウェアプロセッサは、さらに、
前記機械学習モデルを使って画像についての機械学習演算を行うように構成された処
理部に各メモリアドレスを出力するように構成される、装置。 a device,
one or more first hardware storage circuits for storing current values of horizontal coordinates of an image;
one or more second hardware storage circuits for storing current values of vertical coordinates of the image;
one or more hardware processors
receiving image data for the image, the image data defining dimensions of the image, the dimensions defining a horizontal pixel dimension and a vertical pixel dimension, the horizontal pixel dimension being the horizontal dimension of the image; the number of pixels along, the vertical pixel dimension being the number of pixels along the vertical dimension of the image, the one or more hardware processors further comprising:
determining that the dimensions of the image do not match the particular dimensions of the image that the machine learning model is configured to process;
In response to determining that the dimensions of the image do not match the specified dimensions,
determining horizontal and vertical pixel strides of the image based on the dimensions of the image and the particular dimension;
determining a plurality of pixel coordinates of a transformed version of an input image using the horizontal pixel stride and the vertical pixel stride, each pixel coordinate including a vertical coordinate and a horizontal coordinate, and the dimensions of the image being the specified In response to determining that the dimensions of
storing the horizontal coordinates in the one or more first hardware storage circuits;
storing the vertical coordinates in one or more second hardware storage circuits, the one or more hardware processors further comprising:
storage medium having, for each of said plurality of pixel coordinates, one or more memory addresses for storing one or more pixel values to be used to generate inputs to said machine learning model for said pixel coordinates; wherein the memory address for each pixel coordinate is based on the vertical and horizontal coordinates of the pixel coordinate, the one or more hardware processors further comprising:
An apparatus configured to output each memory address to a processing unit configured to perform machine learning operations on an image using the machine learning model.
初期の水平座標と初期の垂直座標とを含む初期の画素座標を求めることと、
前記初期の水平座標を前記１つ以上の第１のハードウェア記憶回路に格納することと、
前記初期の垂直座標を前記１つ以上の第２のハードウェア記憶回路に格納することと、
前記画像の水平画素次元をトラバースするために使用される第１ループの繰り返しごとに、前記第１ループの繰り返しの後に前記水平画素ストライドを前記水平座標の現在値に加算することによって前記水平座標の現在値を更新し、前記垂直座標の現在値に更新する度に、前記水平座標の現在値を前記１つ以上の第１のハードウェア記憶回路に格納することと、
前記画像の垂直画素次元をトラバースするために使用される第２ループの繰り返しごとに、前記第１第２ループの繰り返しの後に前記垂直画素ストライドを前記垂直座標の現在値に加算することによって前記垂直座標の現在値を更新し、前記垂直座標の現在値に更新する度に、前記垂直座標の現在値を前記１つ以上の第２のハードウェア記憶回路に格納することとを含む、請求項１８または１９に記載の装置。 Determining a plurality of pixel coordinates of the image comprises:
determining initial pixel coordinates including an initial horizontal coordinate and an initial vertical coordinate;
storing the initial horizontal coordinates in the one or more first hardware storage circuits;
storing the initial vertical coordinates in the one or more second hardware storage circuits;
For each iteration of the first loop used to traverse the horizontal pixel dimension of the image, after the iteration of the first loop, the horizontal coordinate is changed by adding the horizontal pixel stride to the current value of the horizontal coordinate. updating the current value and storing the current value of the horizontal coordinate in the one or more first hardware storage circuits each time the current value is updated to the current value of the vertical coordinate;
For each iteration of the second loop used to traverse the vertical pixel dimension of the image, the vertical pixel stride is added to the current value of the vertical coordinate after the first second loop iteration. updating the current value of coordinates and storing the current value of the vertical coordinate in the one or more second hardware storage circuits each time the current value of the vertical coordinate is updated to the current value of the vertical coordinate. Or the device according to 19.
Applications Claiming Priority (4)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US15/885,178 US10373291B1 (en) | 2018-01-31 | 2018-01-31 | Image transformation for machine learning |
US15/885,178 | 2018-01-31 | ||
PCT/US2019/015770 WO2019152466A1 (en) | 2018-01-31 | 2019-01-30 | Image transformation for machine learning |
JP2020541806A JP2021516382A (en) | 2018-01-31 | 2019-01-30 | Image conversion for machine learning |
Related Parent Applications (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
JP2020541806A Division JP2021516382A (en) | 2018-01-31 | 2019-01-30 | Image conversion for machine learning |
Publications (1)
Publication Number | Publication Date |
---|---|
JP2023109847A true JP2023109847A (en) | 2023-08-08 |
Family
ID=65441078
Family Applications (2)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
JP2020541806A Pending JP2021516382A (en) | 2018-01-31 | 2019-01-30 | Image conversion for machine learning |
JP2023078118A Pending JP2023109847A (en) | 2018-01-31 | 2023-05-10 | Image transformation for machine learning |
Family Applications Before (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
JP2020541806A Pending JP2021516382A (en) | 2018-01-31 | 2019-01-30 | Image conversion for machine learning |
Country Status (6)
Country | Link |
---|---|
US (2) | US10373291B1 (en) |
EP (3) | EP4254313A3 (en) |
JP (2) | JP2021516382A (en) |
KR (2) | KR20220132659A (en) |
CN (2) | CN111656390B (en) |
WO (1) | WO2019152466A1 (en) |
Families Citing this family (7)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US10936942B2 (en) * | 2017-11-21 | 2021-03-02 | Google Llc | Apparatus and mechanism for processing neural network tasks using a single chip package with multiple identical dies |
US10373291B1 (en) | 2018-01-31 | 2019-08-06 | Google Llc | Image transformation for machine learning |
US11443176B2 (en) * | 2018-05-17 | 2022-09-13 | International Business Machines Corporation | Acceleration of convolutional neural networks on analog arrays |
CN113538252B (en) * | 2020-04-17 | 2024-03-26 | 嘉楠明芯(北京)科技有限公司 | Image correction method and device |
CN111951217B (en) * | 2020-07-07 | 2022-01-14 | 北京鹰瞳科技发展股份有限公司 | Model training method, medical image processing method and electronic device |
CN111984189B (en) * | 2020-07-22 | 2022-05-17 | 深圳云天励飞技术股份有限公司 | Neural network computing device, data reading method, data storage method and related equipment |
KR102412373B1 (en) | 2021-10-29 | 2022-06-23 | 주식회사 딥노이드 | Apparatus and method for generating 3D data using multi-view X-ray data |
Family Cites Families (27)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
JPS59100974A (en) * | 1982-12-01 | 1984-06-11 | Nec Corp | Picture processor |
US4942621A (en) | 1988-11-15 | 1990-07-17 | Msc Technologies, Inc. | Method for mapping scanned pixel data |
JP2845946B2 (en) | 1989-06-14 | 1999-01-13 | 株式会社日立製作所 | Image data converter |
US5193126A (en) | 1990-01-25 | 1993-03-09 | Toyo Ink Mfg. Co., Ltd. | Image deformation method and apparatus using coordinate transformation |
US5113455A (en) * | 1990-02-27 | 1992-05-12 | Eastman Kodak Company | Digital image scaling by stepwise pixel movement |
US5745739A (en) | 1996-02-08 | 1998-04-28 | Industrial Technology Research Institute | Virtual coordinate to linear physical memory address converter for computer graphics system |
US5949429A (en) | 1996-11-14 | 1999-09-07 | Microsoft Corporation | Method for performing pixel addressing operations for a tiled image |
US5870077A (en) * | 1997-02-26 | 1999-02-09 | Hewlett-Packard Company | Method for tristimulus color data non-linear storage, retrieval, and interpolation |
US6195737B1 (en) | 1998-03-23 | 2001-02-27 | Ati Technologies Inc. | Method and apparatus for relative addressing of tiled data |
JP3596590B2 (en) * | 1998-11-18 | 2004-12-02 | ソニー株式会社 | Apparatus and method for appending accompanying information, apparatus and method for detecting accompanying information |
US6667745B1 (en) | 1999-12-22 | 2003-12-23 | Microsoft Corporation | System and method for linearly mapping a tiled image buffer |
US6930688B1 (en) * | 2000-11-16 | 2005-08-16 | Lsi Logic Corporation | Generator of graphics in computer system |
FR2837607B1 (en) * | 2002-03-25 | 2004-06-11 | Thomson Licensing Sa | DEVICE FOR DIGITAL DISPLAY OF A VIDEO IMAGE |
EP2259215B1 (en) * | 2009-06-04 | 2016-08-10 | Honda Research Institute Europe GmbH | Method and structure for a neural associative memory based on optimal Bayesian learning |
US8442321B1 (en) * | 2011-09-14 | 2013-05-14 | Google Inc. | Object recognition in images |
JP5963431B2 (en) * | 2011-12-06 | 2016-08-03 | キヤノン株式会社 | Image forming apparatus, image display method, and program |
JP6161266B2 (en) * | 2012-11-27 | 2017-07-12 | キヤノン株式会社 | Information processing apparatus, control method therefor, electronic device, program, and storage medium |
KR102102702B1 (en) * | 2013-06-19 | 2020-04-21 | 삼성전자주식회사 | Unit pixel of image sensor and image sensor having the same |
US10073721B2 (en) * | 2014-08-20 | 2018-09-11 | The Florida International University Board Of Trustees | Non-blocking writes to file data |
JP2016058018A (en) * | 2014-09-12 | 2016-04-21 | キヤノン株式会社 | Image processing method, image processing program and image processor |
US10387804B2 (en) * | 2014-09-30 | 2019-08-20 | BoonLogic | Implementations of, and methods of use for a pattern memory engine applying associative pattern memory for pattern recognition |
KR102246873B1 (en) * | 2014-11-17 | 2021-04-30 | 삼성전자 주식회사 | A method removing a bad pixel of pixel image generated by an image sensor, a image sensor using the method, and a application processor using the method |
US10013652B2 (en) * | 2015-04-29 | 2018-07-03 | Nuance Communications, Inc. | Fast deep neural network feature transformation via optimized memory bandwidth utilization |
US9934153B2 (en) * | 2015-06-30 | 2018-04-03 | Nvidia Corporation | Patch memory system |
US11055063B2 (en) * | 2016-05-02 | 2021-07-06 | Marvell Asia Pte, Ltd. | Systems and methods for deep learning processor |
US10248908B2 (en) | 2017-06-19 | 2019-04-02 | Google Llc | Alternative loop limits for accessing data in multi-dimensional tensors |
US10373291B1 (en) | 2018-01-31 | 2019-08-06 | Google Llc | Image transformation for machine learning |
-
2018
- 2018-01-31 US US15/885,178 patent/US10373291B1/en active Active
-
2019
- 2019-01-30 JP JP2020541806A patent/JP2021516382A/en active Pending
- 2019-01-30 KR KR1020227032191A patent/KR20220132659A/en not_active Application Discontinuation
- 2019-01-30 EP EP23187356.3A patent/EP4254313A3/en active Pending
- 2019-01-30 CN CN201980010446.3A patent/CN111656390B/en active Active
- 2019-01-30 KR KR1020207022145A patent/KR102445872B1/en active IP Right Grant
- 2019-01-30 WO PCT/US2019/015770 patent/WO2019152466A1/en unknown
- 2019-01-30 EP EP19705633.6A patent/EP3583575B1/en active Active
- 2019-01-30 CN CN202310810057.7A patent/CN116933891A/en active Pending
- 2019-01-30 EP EP20182400.0A patent/EP3734543B1/en active Active
- 2019-08-05 US US16/531,876 patent/US11170469B2/en active Active
-
2023
- 2023-05-10 JP JP2023078118A patent/JP2023109847A/en active Pending
Also Published As
Publication number | Publication date |
---|---|
US20200027195A1 (en) | 2020-01-23 |
US20190236755A1 (en) | 2019-08-01 |
KR102445872B1 (en) | 2022-09-21 |
KR20220132659A (en) | 2022-09-30 |
WO2019152466A1 (en) | 2019-08-08 |
KR20200100190A (en) | 2020-08-25 |
CN116933891A (en) | 2023-10-24 |
CN111656390B (en) | 2023-07-07 |
EP4254313A2 (en) | 2023-10-04 |
CN111656390A (en) | 2020-09-11 |
EP3583575A1 (en) | 2019-12-25 |
EP3583575B1 (en) | 2020-07-01 |
EP3734543B1 (en) | 2023-11-15 |
JP2021516382A (en) | 2021-07-01 |
US11170469B2 (en) | 2021-11-09 |
EP3734543A1 (en) | 2020-11-04 |
EP4254313A3 (en) | 2023-12-20 |
US10373291B1 (en) | 2019-08-06 |
Similar Documents
Publication | Publication Date | Title |
---|---|---|
JP2023109847A (en) | Image transformation for machine learning | |
US10860922B2 (en) | Sparse convolutional neural network accelerator | |
US11922132B2 (en) | Information processing method and terminal device | |
US11847550B2 (en) | Sparse convolutional neural network accelerator | |
JP7279226B2 (en) | Alternate loop limit | |
JP6857286B2 (en) | Improved performance of neural network arrays | |
TWI811291B (en) | Deep learning accelerator and method for accelerating deep learning operations | |
CN109844738A (en) | Arithmetic processing circuit and identifying system | |
EP3093757B1 (en) | Multi-dimensional sliding window operation for a vector processor | |
US11164032B2 (en) | Method of performing data processing operation | |
JP2019128806A (en) | Data compressing apparatus, data compressing method, and data compressing program | |
US11636569B1 (en) | Matrix transpose hardware acceleration | |
JP2024004400A (en) | Data processor and method thereof |
Legal Events
Date | Code | Title | Description |
---|---|---|---|
A521 | Request for written amendment filed |
Free format text: JAPANESE INTERMEDIATE CODE: A523Effective date: 20230530 |
|
A621 | Written request for application examination |
Free format text: JAPANESE INTERMEDIATE CODE: A621Effective date: 20230530 |
|
A977 | Report on retrieval |
Free format text: JAPANESE INTERMEDIATE CODE: A971007Effective date: 20240405 |