US20220370908A1 - Using semantic natural language processing machine learning algorithms for a video game application - Google Patents
Using semantic natural language processing machine learning algorithms for a video game application Download PDFInfo
- Publication number
- US20220370908A1 US20220370908A1 US17/770,946 US202017770946A US2022370908A1 US 20220370908 A1 US20220370908 A1 US 20220370908A1 US 202017770946 A US202017770946 A US 202017770946A US 2022370908 A1 US2022370908 A1 US 2022370908A1
- Authority
- US
- United States
- Prior art keywords
- game
- text
- content
- curve
- actions
- Prior art date
- Legal status (The legal status is an assumption and is not a legal conclusion. Google has not performed a legal analysis and makes no representation as to the accuracy of the status listed.)
- Pending
Links
- 238000010801 machine learning Methods 0.000 title claims abstract description 75
- 238000003058 natural language processing Methods 0.000 title claims abstract description 72
- 230000009471 action Effects 0.000 claims abstract description 82
- 230000004044 response Effects 0.000 claims abstract description 22
- 230000006870 function Effects 0.000 claims abstract description 13
- 238000012545 processing Methods 0.000 claims description 34
- 238000000034 method Methods 0.000 claims description 20
- 238000013507 mapping Methods 0.000 claims description 3
- 238000002372 labelling Methods 0.000 claims 1
- 230000015654 memory Effects 0.000 abstract description 34
- 238000010586 diagram Methods 0.000 description 14
- 230000008901 benefit Effects 0.000 description 8
- 230000000694 effects Effects 0.000 description 6
- 230000000630 rising effect Effects 0.000 description 5
- 210000000038 chest Anatomy 0.000 description 4
- 230000003287 optical effect Effects 0.000 description 3
- 239000004783 Serene Substances 0.000 description 2
- 230000000739 chaotic effect Effects 0.000 description 2
- 230000033001 locomotion Effects 0.000 description 2
- 238000012986 modification Methods 0.000 description 2
- 230000004048 modification Effects 0.000 description 2
- MTCFGRXMJLQNBG-UHFFFAOYSA-N serine Chemical compound OCC(N)C(O)=O MTCFGRXMJLQNBG-UHFFFAOYSA-N 0.000 description 2
- 230000003068 static effect Effects 0.000 description 2
- 238000012549 training Methods 0.000 description 2
- 241000699670 Mus sp. Species 0.000 description 1
- 238000013459 approach Methods 0.000 description 1
- 230000001914 calming effect Effects 0.000 description 1
- 230000008859 change Effects 0.000 description 1
- 238000004891 communication Methods 0.000 description 1
- 238000010276 construction Methods 0.000 description 1
- 238000013461 design Methods 0.000 description 1
- 230000002996 emotional effect Effects 0.000 description 1
- 229910052737 gold Inorganic materials 0.000 description 1
- 239000010931 gold Substances 0.000 description 1
- 230000036541 health Effects 0.000 description 1
- 238000012805 post-processing Methods 0.000 description 1
- 238000012552 review Methods 0.000 description 1
- 230000033764 rhythmic process Effects 0.000 description 1
- 230000035939 shock Effects 0.000 description 1
- 229910052709 silver Inorganic materials 0.000 description 1
- 239000004332 silver Substances 0.000 description 1
- 239000007787 solid Substances 0.000 description 1
- 230000000007 visual effect Effects 0.000 description 1
Images
Classifications
-
- A—HUMAN NECESSITIES
- A63—SPORTS; GAMES; AMUSEMENTS
- A63F—CARD, BOARD, OR ROULETTE GAMES; INDOOR GAMES USING SMALL MOVING PLAYING BODIES; VIDEO GAMES; GAMES NOT OTHERWISE PROVIDED FOR
- A63F13/00—Video games, i.e. games using an electronically generated display having two or more dimensions
- A63F13/55—Controlling game characters or game objects based on the game progress
-
- A—HUMAN NECESSITIES
- A63—SPORTS; GAMES; AMUSEMENTS
- A63F—CARD, BOARD, OR ROULETTE GAMES; INDOOR GAMES USING SMALL MOVING PLAYING BODIES; VIDEO GAMES; GAMES NOT OTHERWISE PROVIDED FOR
- A63F13/00—Video games, i.e. games using an electronically generated display having two or more dimensions
- A63F13/45—Controlling the progress of the video game
- A63F13/46—Computing the game score
-
- A—HUMAN NECESSITIES
- A63—SPORTS; GAMES; AMUSEMENTS
- A63F—CARD, BOARD, OR ROULETTE GAMES; INDOOR GAMES USING SMALL MOVING PLAYING BODIES; VIDEO GAMES; GAMES NOT OTHERWISE PROVIDED FOR
- A63F13/00—Video games, i.e. games using an electronically generated display having two or more dimensions
- A63F13/45—Controlling the progress of the video game
- A63F13/49—Saving the game status; Pausing or ending the game
-
- A—HUMAN NECESSITIES
- A63—SPORTS; GAMES; AMUSEMENTS
- A63F—CARD, BOARD, OR ROULETTE GAMES; INDOOR GAMES USING SMALL MOVING PLAYING BODIES; VIDEO GAMES; GAMES NOT OTHERWISE PROVIDED FOR
- A63F13/00—Video games, i.e. games using an electronically generated display having two or more dimensions
- A63F13/55—Controlling game characters or game objects based on the game progress
- A63F13/57—Simulating properties, behaviour or motion of objects in the game world, e.g. computing tyre load in a car race game
-
- A—HUMAN NECESSITIES
- A63—SPORTS; GAMES; AMUSEMENTS
- A63F—CARD, BOARD, OR ROULETTE GAMES; INDOOR GAMES USING SMALL MOVING PLAYING BODIES; VIDEO GAMES; GAMES NOT OTHERWISE PROVIDED FOR
- A63F13/00—Video games, i.e. games using an electronically generated display having two or more dimensions
- A63F13/60—Generating or modifying game content before or while executing the game program, e.g. authoring tools specially adapted for game development or game-integrated level editor
- A63F13/67—Generating or modifying game content before or while executing the game program, e.g. authoring tools specially adapted for game development or game-integrated level editor adaptively or by learning from player actions, e.g. skill level adjustment or by storing successful combat sequences for re-use
-
- A—HUMAN NECESSITIES
- A63—SPORTS; GAMES; AMUSEMENTS
- A63F—CARD, BOARD, OR ROULETTE GAMES; INDOOR GAMES USING SMALL MOVING PLAYING BODIES; VIDEO GAMES; GAMES NOT OTHERWISE PROVIDED FOR
- A63F13/00—Video games, i.e. games using an electronically generated display having two or more dimensions
- A63F13/70—Game security or game management aspects
- A63F13/79—Game security or game management aspects involving player-related data, e.g. identities, accounts, preferences or play histories
- A63F13/798—Game security or game management aspects involving player-related data, e.g. identities, accounts, preferences or play histories for assessing skills or for ranking players, e.g. for generating a hall of fame
Definitions
- Video game developers have numerous tools at their disposal for influencing the experiences of the people playing the game.
- Relatively positive experiences are generated by providing valuable or desirable objects such as loot, higher-quality weapons, more ammunition, complimentary feedback from non-player characters (NPCs), and the like.
- Relatively negative experiences are generated by providing less valuable or harmful objects such as empty treasure chests, booby-traps, derogatory feedback from NPCs, and the like.
- the intensity of the gaming experience can be varied by, for example, changing the number of enemies attacking the player's character, the strength of these enemies relative to the strength of the player's character, the predictability or randomness of the movement of the enemies, the complexity of the responses or actions required of the player, the volume or rhythm or degree of harmony/dissonance of the background music, a relatively static or chaotic visual field, and the like. Similar approaches are used to affect or modify other player experiences, e.g., to influence emotional states such as victorious feelings, feelings of accomplishment, feelings of interpersonal connection or affection, feelings of mastery, and the like.
- video games are designed to evoke particular player experiences that reflect the current state of the game.
- at least one widely-available video game uses a set of heuristics to modify the level of difficulty based on game state data such as the current player health, status, skill, location, ammo counts, and the like.
- game state data such as the current player health, status, skill, location, ammo counts, and the like.
- level difficulties and the game state data specified by the set of heuristics is only applicable to this video game and cannot be used by developers of other games.
- the set of heuristics is predefined and cannot be adapted or modified to change the content that is served to the players or the game state information that is used to select this content. This reduces the adaptability of the heuristics to a variety of game types.
- the set of heuristics implemented in one type of video game e.g., a chaotic multiplayer zombie shooter
- would not likely be an appropriate choice of heuristics to influence the experience of a person playing a different type of video game e.g., a serene single player reflection on life, love, and loss).
- the proposed solution in particular relates to a (computer-implemented) method comprising executing a video game application at a video game processing system; in response to a game event during execution of the video game application, recording, by the video game processing system, a text string that represents the game event in a text log that comprises a sequence of text strings that represent game events that have been stored during execution of the video game application and thus while the video game has been played by a target player (i.e., game events that have transpired during a portion of the execution of the video game application and that, for example, have changed a state of the video game); generating, by the video game processing system using a semantic natural language processing (NLP) machine learning (ML) algorithm, scores for labeled actions or content based on the text log and a curve that is composed of data points representing values for a target user experience level at a point in time when playing the video game (the curve thus representing a target player experience as a function of progress through the game and, for example, being used to coordinate game
- associating the events with text strings that are added or appended to a text log allows the text log to be used to determine a current player experience.
- the labels for the actions or context may be used by the semantic NLP ML algorithm to choose one or more of the actions or context to serve to the target player to influence the target player experience based on the curve and the scores.
- the proposed solution generally relates to engine-agnostic and game-agnostic techniques (e.g., techniques that can be used in games regardless of the type of game or the game engine upon which the game is built) for influencing player experience based on game context using one or more machine learning (ML) algorithms for natural language processing (referred to herein as “an NLP ML algorithm”) to select labeled actions or content based on a text-based log that represents previous game events and one or more curves representative of one or more target player experiences.
- ML machine learning
- Game events include, but are not limited to, player actions (e.g., pressing a button or combination of buttons on a game controller), choices made by the player at junctures in the game, measures of a player's skill or success rate in facing challenges presented by the game, events that are generated by the game (e.g., spawning a zombie or revealing loot), content or actions that are procedurally generated by the game, combinations of player and game actions (e.g., the player using the game controller to cause their character to enter a new room), and the like.
- Game developers map game events to corresponding text strings, e.g., using an application programming interface (API) to associate numbers, letters, words, or phrases with each event. In some embodiments, the mapping is stored in a table.
- API application programming interface
- a text log includes a sequence of text strings that represent game events that have transpired during a portion (or the entirety) of the game.
- the text strings are added to the text log in response to occurrences of the corresponding game event.
- One or more curves represent target player experiences as a function of progress through the game. Examples of player experiences that are represented by curves include, but are not limited to, calm/intensity, bad/good fortune, and semantic concepts such as “victorious.”
- Game developers also define a set of actions or content that are labeled with text strings.
- the semantic NLP ML algorithm uses the text log and the curves to score or rank labeled actions or content in the set (or a subset) of the labeled actions or content.
- an API call is used to score or rank the labeled actions or content.
- the parameters of the API call include a context indicated by a text log, a curve representing the target player experience, an indicator of the type of curve, an indicator of a current place in the curve, and metadata indicating labels of the available actions or content.
- the API call returns a ranked list of the metadata, which is used to select the action or content that is served to the player.
- Some embodiments of the API call also return one or more of the scores for the content metadata generated by the NLP ML algorithm, an actual curve representing the actual player experience indicated by the text log, and the like. For example, if the API call includes a type that indicates that the curve is a calm/intensity curve, the semantic NLP ML algorithm uses the text log to rank the labeled actions/content based on how closely they match the target player experience indicated by the calm/intensity curve as a function of the player's progress through the game.
- one or more rules are used to modify the results provided by the semantic NLP ML algorithm based on alternate associations of terms or phrases used in the text log with the labels of actions or content. For example, in response to input indicating the action “killing,” the semantic NLP ML algorithm will likely return a low score or ranking for a positive experience such as “feeling victorious.” However, in a game world, killing many enemies could be a signal that the player is victorious.
- a rule can therefore be applied to modify the scores returned by the semantic NLP ML algorithm so that “killing” has a strong association with “feeling victorious.”
- the ranking produced by the semantic NLP ML algorithm is modified to increase the ranking of the experience of “feeling victorious” in response to the text log including the string “killing’ or strings associated with “killing.”
- a game that implements this rule can generate actions or serve content associated with the player “feeling victorious” in response to the player killing many enemies, even though the semantic NLP ML algorithm would not necessarily give this association a high score or ranking.
- FIG. 1 is a block diagram of a video game processing system that supports coordinating game decisions using a semantic natural language processing (NLP) machine learning (ML) algorithm according to some embodiments.
- NLP semantic natural language processing
- ML machine learning
- FIG. 2 is a block diagram of a cloud-based system that supports coordinating game decisions using a semantic NLP ML algorithm according to some embodiments.
- FIG. 3 is a block diagram that illustrates a text log made up of a sequence of text strings that represent events in the game according to some embodiments.
- FIG. 4 is a plot of a curve that represents a target player experience as a function of game progress according to some embodiments.
- FIG. 5 is a block diagram of an event map that maps or associates text strings to events or context that occur within a game according to some embodiments.
- FIG. 6 is a block diagram of a table of labeled actions or context for a game according to some embodiments.
- FIG. 7 is a block diagram of a game director to make coordinated game decisions using one or more instances of a semantic NLP ML algorithm according to some embodiments.
- FIG. 8 is a flow diagram of a method of coordinating game decisions using semantic NLP ML algorithms according to some embodiments.
- FIGS. 1-8 disclose engine-agnostic and game-agnostic techniques for influencing player experience based on game context using one or more machine learning (ML) algorithms for natural language processing (referred to herein as “an NLP ML algorithm”) to select labeled actions or content based on a text-based log that represents previous game events and one or more curves representative of one or more target player experiences.
- ML machine learning
- FIG. 1 is a block diagram of a video game processing system 100 that supports coordinating game decisions using a semantic natural language processing (NLP) machine learning (ML) algorithm according to some embodiments.
- the processing system 100 includes or has access to a system memory 105 or other storage element that is implemented using a non-transitory computer readable medium such as a dynamic random-access memory (DRAM).
- DRAM dynamic random-access memory
- some embodiments of the memory 105 are implemented using other types of memory including static RAM (SRAM), nonvolatile RAM, and the like.
- SRAM static RAM
- the processing system 100 also includes a bus 110 to support communication between entities implemented in the processing system 100 , such as the memory 105 .
- Some embodiments of the processing system 100 include other buses, bridges, switches, routers, and the like, which are not shown in FIG. 1 in the interest of clarity.
- the processing system 100 includes a central processing unit (CPU) 115 .
- Some embodiments of the CPU 115 include multiple processing elements (not shown in FIG. 1 in the interest of clarity) that execute instructions concurrently or in parallel.
- the processing elements are referred to as processor cores, compute units, or using other terms.
- the CPU 115 is connected to the bus 110 and the CPU 115 communicates with the memory 105 via the bus 110 .
- the CPU 115 executes instructions such as program code 120 stored in the memory 105 and the CPU 115 stores information in the memory 105 such as the results of the executed instructions.
- the CPU 115 is also able to initiate graphics processing by issuing draw calls.
- An input/output (I/O) engine 125 handles input or output operations associated with a display 130 that presents images or video on a screen 135 .
- the I/O engine 125 is connected to a game controller 140 which provides control signals to the I/O engine 125 in response to a user pressing one or more buttons on the game controller 140 or interacting with the game controller 140 in other ways, e.g., using motions that are detected by an accelerometer.
- the I/O engine 125 also provides signals to the game controller 140 to trigger responses in the game controller 140 such as vibrations, illuminating lights, and the like.
- the I/O engine 125 reads information stored on an external storage element 145 , which is implemented using a non-transitory computer readable medium such as a compact disk (CD), a digital video disc (DVD), and the like.
- the I/O engine 125 also writes information to the external storage element 145 , such as the results of processing by the CPU 115 .
- Some embodiments of the I/O engine 125 are coupled to other elements of the processing system 100 such as keyboards, mice, printers, external disks, and the like.
- the I/O engine 125 is coupled to the bus 110 so that the I/O engine 125 communicates with the memory 105 , the CPU 115 , or other entities that are connected to the bus 110 .
- the processing system 100 includes a graphics processing unit (GPU) 150 that renders images for presentation on the screen 135 of the display 130 , e.g., by controlling pixels that make up the screen 135 .
- the GPU 150 renders objects to produce values of pixels that are provided to the display 130 , which uses the pixel values to display an image that represents the rendered objects.
- the GPU 150 includes one or more processing elements such as an array 155 of compute units that execute instructions concurrently or in parallel. Some embodiments of the GPU 150 are used for general purpose computing.
- the GPU 150 communicates with the memory 105 (and other entities that are connected to the bus 110 ) over the bus 110 .
- the GPU 150 communicates with the memory 105 over a direct connection or via other buses, bridges, switches, routers, and the like.
- the GPU 150 executes instructions stored in the memory 105 and the GPU 150 stores information in the memory 105 such as the results of the executed instructions.
- the memory 105 stores instructions that represent a program code 160 that is to be executed by the GPU 150 .
- the CPU 115 , the GPU 150 , or a combination thereof execute machine learning algorithms such as a semantic NLP ML algorithm.
- the system memory 105 stores program code 165 that represents a semantic NLP ML algorithm that has been trained using a corpus of natural language data. Many text corpuses are available for training machine learning algorithms including corpuses related to media/product reviews, news articles, email/spam/newsgroup messages, tweets, dialogues, and the like.
- the CPU 115 , the GPU 150 , or one or more of the compute units in the array 155 execute the program code 165 that represents the trained semantic NLP ML algorithm in either input/response modality or a semantic similarity modality.
- the CPU 115 and the GPU 150 execute corresponding program code 120 , 160 to implement a video game application.
- user input received via the game controller 140 is processed by the CPU 115 to modify a state of the video game application.
- the CPU 115 then transmits draw calls to instruct the GPU 150 to render images representative of a state of the video game application for display on the screen 135 of the display 130 .
- the GPU 150 can also perform general-purpose computing related to the video game application such as executing the program code 165 that represents a semantic NLP ML algorithm implemented in the game.
- the system memory 105 includes a portion 170 that is reserved for storing game-related information, although this information can be stored in other locations in some embodiments.
- the CPU 115 and the GPU 150 use instances of the semantic NLP ML algorithm to coordinate game decisions to influence the player experience by selecting actions or content to be served to the player based on a current state of the game and a target player experience.
- the state of the game changes substantially continuously as game events transpire and the GPU 150 keeps track of the events using a text log that is stored in the portion 170 of the memory 105 .
- One or more text strings that represent the game event are recorded in the text log in response to each event that occurs in the game.
- the text log therefore includes a sequence of text strings that represent game events that have transpired during a portion (or the entirety) of the game.
- a set of actions or events that are potentially served to the player of the game are labeled with text phrases and stored in the portion 170 of the system memory 105 .
- Some embodiments of the semantic NLP ML algorithm generate scores for the labeled actions or content based on the text log and a curve that represents a target player experience as a function of progress through the game.
- One or more of the labeled actions or content is then selected based on their scores and the selected actions or content are served to the player.
- FIG. 2 is a block diagram of a cloud-based system 200 that supports coordinating game decisions using a semantic NLP ML algorithm according to some embodiments.
- the cloud-based system 200 includes a server 205 that is interconnected with a network 210 . Although a single server 205 shown in FIG. 2 , some embodiments of the cloud-based system 200 include more than one server connected to the network 210 .
- the server 205 includes a transceiver 215 that transmits signals towards the network 210 and receives signals from the network 210 .
- the transceiver 215 can be implemented using one or more separate transmitters and receivers.
- the server 205 also includes one or more processors 220 and one or more memories 225 .
- the processor 220 executes instructions such as program code stored in the memory 225 and the processor 220 stores information in the memory 225 such as the results of the executed instructions.
- the cloud-based system 200 includes one or more processing devices 230 such as a computer, set-top box, gaming console, and the like that are connected to the server 205 via the network 210 .
- the processing device 230 includes a transceiver 235 that transmits signals towards the network 210 and receives signals from the network 210 .
- the transceiver 235 can be implemented using one or more separate transmitters and receivers.
- the processing device 230 also includes one or more processors 240 and one or more memories 245 .
- the processor 240 executes instructions such as program code stored in the memory 245 and the processor 240 stores information in the memory 245 such as the results of the executed instructions.
- the transceiver 235 is connected to a display 250 that displays images or video on a screen 255 and a game controller 260 . Some embodiments of the cloud-based system 200 are therefore used by cloud-based game streaming applications.
- the processor 220 , the processor 240 , or a combination thereof execute program code representative of game that implements a semantic NLP ML algorithm in either input/response modality or a semantic similarity modality.
- the semantic NLP ML algorithm is pre-trained using one or more text corpuses.
- the game time decisions that affect the player experience are coordinated using the semantic NLP ML algorithm, as discussed herein.
- FIG. 3 is a block diagram that illustrates a text log 300 made up of a sequence of text strings that represent events in the game according to some embodiments.
- the text log 300 is generated by some embodiments of the GPU 150 shown in FIG. 1 and the processors 220 , 240 shown in FIG. 2 .
- Some embodiments of the text log are stored in a memory such as the system memory 105 shown in FIG. 1 and the memories 225 , 245 shown in FIG. 2 .
- the text strings in the text log 300 represent a portion (or the entirety) of the game and indicate the player experience up to the current point in the game.
- the events recorded in the text log 300 include information such as the information in Table 1, which includes a identifying a text string associated with an event, a time at which the event occurs, and the text string representing the event.
- Additional text strings are added to the text log 300 in response to events occurring in the game.
- an action 305 occurs that is represented by the text string “Zombie revives,” which indicates that the zombie that appeared to be dead has returned from the grave (again).
- the text string representative of the action 305 is then added to the text log 300 , as indicated by the arrow 310 .
- FIG. 4 is a plot 400 of a curve 405 that represents a target player experience as a function of game progress according to some embodiments.
- the vertical axis of the plot 400 indicates a target player experience (in arbitrary units) and the horizontal axis of the plot 400 indicates game progress from the beginning of the game (zero) to the end of the game (one).
- the curve 405 represents a target level of calm/intensity and points on the curve 405 correspond to the events represented by the text strings in the text log 300 shown in FIG. 3 .
- the curve 405 represents different target player experiences such as positive/negative sentiments, tracking of a semantic concept such as “victorious” or “sense of belonging,” and the like.
- the curve 405 can be bespoke, provided by a game developer, provided by a player, or created at runtime.
- the target player experience is relatively calm as indicated by the relatively low value of the curve 405 .
- the player begins to progress through the game and the environment experienced by the player is reflected in the text strings in the text log.
- the text log indicates that the player is walking in the rain and ominous music is playing, which is intended to gradually raise the sense of intensity, as indicated by the increasing value of the curve 405 from T 0 to T 1 .
- the text log includes a text string indicating that lightning struck and there was a thunderclap.
- a small spike in the curve 405 around the time T 1 indicates an increase in the intensity of the player experience corresponding to the lightning and thunder.
- the text log includes a text string indicating that a zombie has spawned nearly player. Adding a threatening character near the player is intended to increase the intensity of the player experience, as indicated by the curve 405 rising from time T 2 to time T 3 .
- the text log includes a text string indicating that the player attempted a shot at the zombie.
- the text string also indicates that the player missed the shot and so the intensity of the player experience continues to increase, as indicated by the curve 405 rising from time T 3 to time T 4 .
- the text log includes a text string indicating that the zombie continued to move towards the player. Reducing the distance between the zombie and the player increases the intensity of the player experience, as indicated by the curve rising from time T 4 to time T 5 .
- the text log includes a text string indicating that the player attempted a shot at the zombie.
- the text string also indicates that the player's shot hit the zombie. Successfully shooting the zombie reduces the intensity of the player experience, as indicated by the curve 405 falling from time T 4 to time T 5 .
- the text log includes a text string indicating that the zombie is not dead and continued to move towards the player. Reducing the distance between the zombie and the player increases the intensity of the player experience, as indicated by the curve rising from time T 6 to time T 7 .
- the text log includes a text string indicating that the player attempted a shot at the zombie.
- the text string also indicates that the player's shot hit the zombie in the head and the zombie died.
- the successful headshot and death of the zombie reduce the intensity of the player experience, as indicated by the curve 405 falling from time T 7 to time T 8 .
- the text log includes a text string indicating that the player examined the dead zombie.
- the zombie appeared to be dead and the intensity of the player experience continued to decrease, as indicated by the curve falling from time T 8 to time T 9 .
- the player is examining the “dead” zombie and the zombie revives, as shown in the action 305 in FIG. 3 .
- the unexpected revival of the zombie will cause the intensity of the player experience to spike, as indicated by the rising dashed arrow 410 after the time T 9 .
- curve 405 are used to coordinate game decisions to influence player experience.
- a semantic NLP ML algorithm uses the text log 300 shown in FIG. 3 and the curve 405 to score or rank labeled actions or content in a set (or a subset) of labeled actions or content.
- the semantic NLP ML algorithm returns a ranked list of the labeled actions or content, which is then used to select the action or content that is served to the player.
- a single curve 405 is shown in FIG. 4 , multiple curves are used in some embodiments to coordinate game decisions.
- the aspects of the player experience represented by the different curves are indicated by a curve type 415 .
- a first curve type indicates that the corresponding curve represents calm/intensity
- a second curve type indicates that the corresponding curve indicates positive/negative experiences
- a third curve type indicates a semantic type such as “victorious” or “sense of belonging.”
- FIG. 5 is a block diagram of an event map 500 that maps or associates text strings to events or context that occur within a game according to some embodiments.
- the text strings are written or appended to a text log (such as the text log 300 shown in FIG. 3 ) in response to the corresponding event occurring in the game.
- the event map 500 is created by game developers based on the events or context that are used to influence player experience within the game.
- a sense of “foreboding” is associated with playing “ominous music” and a sense of “shock, surprise” is associated with a “thunderclap.”
- Associating the events with text strings that are added or appended to a text log allows the text log to be used to determine a current player experience, as discussed herein.
- FIG. 6 is a block diagram of a table 600 of labeled actions or context for a game according to some embodiments.
- the labels for the actions or context are used by a semantic NLP ML algorithm to choose one or more of the actions or context to serve to a player to influence player experience based on a curve (such as the curve 405 shown in FIG. 4 ) that represents a target player experience as a function of progress through the game.
- Some embodiments of the table 600 are created by a game developer prior to runtime to associate text labels with actions or context that are available for presentation to the player during the game. For example, a “music loop 1” is labeled with the text string “ominous” to indicate that “music loop 1” influences player experience by increasing a sense of worry or foreboding. For another example, the “sound effect 1” is labeled with the texturing “shocking” to indicate that playing “sound effect 1” influences player experience by surprising or shocking the player.
- the example shown in table 600 is not meant to be exhaustive. To the contrary, the actions or context that are labeled with text strings and available for provision to the player during progress of the game can include anything developed for the game.
- the actions or contexts can include assets or data describing how new assets could be generated.
- the labeled content can include all the characters created for the game or set up to be generated by the game, modular world tiles associated with features and rules that govern how they connect to other tiles, data tables describing enemy's spawns (e.g., how many enemies, level of challenge, spawn location), data tables describing loot (e.g., range of items, value of items, each of which can be tagged with a text string), weather system settings, animation sets for characters, world status settings, music, and the like.
- game developers create multiple tables and associate different tables with different curves indicating different aspects of the player experience.
- FIG. 7 is a block diagram including a game director 700 that makes coordinated game decisions using one or more instances of a semantic NLP ML algorithm 701 according to some embodiments.
- the game director 700 is implemented in some embodiments of the GPU 150 shown in FIG. 1 and the processors 220 , 240 shown in FIG. 2 .
- a text log 705 such as the text log 300 shown in FIG. 3
- a curve 710 such as the curve 405 shown in FIG. 4
- a set 715 of labels actions/contexts such as the set of labeled actions/context listed in table 600 in FIG. 6 are provided to the semantic NLP ML algorithm 701 .
- the set 715 includes labels 720 , 721 , 722 , 723 , which are collectively referred to herein as “the labels 720 - 723 .”
- the game director 700 uses the instances of the semantic NLP ML algorithm 701 to generate scores for labeled actions/contexts based on a text log and a curve of target player experience. Generating the scores includes: (1) assessing the current player experience based on the text log and (2) generating the scores for the labeled actions/contexts based on the current player experience, the target player experience indicated by the curve, and the labeled actions/contexts.
- the game director 700 assesses the current player experience using the semantic NLP ML algorithm 701 and sentiment analysis. For example, the game director 700 determines whether there is a calming ambient audio of wind or ominous music creating tension, are there enemies spawning all around the player or is the player in a serene, cozy space?
- the sentiment that is evaluated based on the curve corresponds to the type of the curve. For example, the relative calm or intensity of the situation is evaluated if the curve indicates calm/intensity, the fortune of the player experience is evaluated if the curve indicates good/bad fortune, and other semantic concepts such as “victorious” or “sense of belonging” are evaluated for corresponding types of curves.
- the game director 700 uses the semantic NLP ML algorithm 701 to generate scores 725 , 726 , 727 , 728 (collectively referred to herein as “the scores 725 - 728 ”) that rank the labels 720 - 723 based on the current player experience and the target player experience indicated by the curve. For example, if the curve is used to track good/bad fortune for the player and if the text log indicates that the current player experience has been an unending stream of bad fortune, the semantic NLP ML algorithm 701 can return a score for opening a treasure chest to find a rare, valuable item that is higher than the score for opening the treasure chest to reveal a devastating trap.
- the semantic NLP ML algorithm 701 can return a lower score for the rare, valuable item and a higher score for the devastating trap if the current player experience has been exceptionally good. For another example, if the curve tracks a semantic concept such as “victorious” or “sense of belonging,” the semantic NLP ML algorithm 701 ranks the labels 720 - 723 based on the current player experience such as whether the player quests dealt with themes regarding “belonging to a tribe” or how “victorious” the player has been in previous encounters with enemies.
- the semantic NLP ML algorithm 701 is pre-trained using one or more text corpuses. Pre-training the semantic NLP ML algorithm 701 on conventional text corpuses causes the semantic NLP ML algorithm 701 to generate higher scores 725 - 728 for responses that are consistent with conventional usage or interpretation of the terms in the text log 705 and the labels 720 - 723 .
- some embodiments of the semantic NLP ML algorithm 701 are implemented in game worlds that purposely redefine concepts to contrast with their real-world interpretations.
- Post-processing of the results provided by the semantic NLP ML algorithm 701 is therefore used to modify the scores of 725 - 728 based on one or more rules that redefine the associations between the terms or phrases in the text log 705 and the labels 720 - 723 .
- the game director 700 uses the text log 705 , the curve 710 , and the set 715 of labeled actions/contexts to choose one or more actions or context to serve to the player.
- the game director 700 chooses the actions or context based on the scores 725 - 728 .
- the actions or context that are served by the game director 700 are expressed in natural language to enable subsequent NLP-based analysis.
- the game director 700 can choose an action 730 that results in an apparently dead zombie being revived, which is represented by the text string “Zombie revives.”
- Information that is used to select the action includes, but is not limited to:
- FIG. 8 is a flow diagram of a method 800 of coordinating game decisions using semantic NLP ML algorithms according to some embodiments.
- the game director 700 is implemented in some embodiments of the GPU 150 shown in FIG. 1 , the processors 220 , 240 shown in FIG. 2 , and the game director 700 shown in FIG. 7 .
- the game director accesses a text log including text strings that are mapped to events that have occurred in the game or a portion of the game.
- the game director accesses the curve representing a target player experience as a function of progress through the game.
- the game director accesses a set of labeled actions/contexts that are available for providing to the player.
- the blocks 805 , 810 , 815 are presented sequentially in FIG. 8 , some embodiments of the method 800 perform the blocks 805 , 810 , 815 in a different order or concurrently.
- an API call is used to perform the actions in blocks 805 , 810 , 815 .
- the parameters of the API call include a context indicated by a text log, a curve representing the target player experience, an indicator of the type of curve, an indicator of a current place in the curve, and metadata indicating labels of the available actions or content.
- an instance of the semantic NLP ML algorithm generates scores for the labeled actions/contexts, as discussed herein.
- the API call returns a ranked list of the metadata, which is used to select the action or content that is served to the player.
- Some embodiments of the API call also return one or more of the scores for the content metadata generated by the NLP ML algorithm, an actual curve representing the actual player experience indicated by the text log, and the like.
- the semantic NLP ML algorithm uses the text log to rank the labeled actions/content based on how closely they match the target player experience indicated by the calm/intensity curve as a function of the player's progress through the game.
- the game director selects a subset of the labeled actions/contexts based on the scores. In some embodiments, the game director selects labeled action/contexts to be in the subset in response to the corresponding scores being above a threshold. At block 830 , the game director (or other processor) serves the subset of labeled actions/contexts to the player.
- certain aspects of the techniques described above may be implemented by one or more processors of a processing system executing software.
- the software comprises one or more sets of executable instructions stored or otherwise tangibly embodied on a storage element implemented using a non-transitory computer readable storage medium.
- the software can include the instructions and certain data that, when executed by the one or more processors, manipulate the one or more processors to perform one or more aspects of the techniques described above.
- the non-transitory computer readable storage medium can include, for example, a magnetic or optical disk storage device, solid state storage devices such as Flash memory, a cache, random access memory (RAM) or other non-volatile memory device or devices, and the like.
- the executable instructions stored on the non-transitory computer readable storage medium may be in source code, assembly language code, object code, or other instruction format that is interpreted or otherwise executable by one or more processors.
- a computer readable storage medium may include any storage medium, or combination of storage media, accessible by a computer system during use to provide instructions and/or data to the computer system.
- Such storage media can include, but is not limited to, optical media (e.g., compact disc (CD), digital versatile disc (DVD), Blu-Ray disc), magnetic media (e.g., floppy disc, magnetic tape, or magnetic hard drive), volatile memory (e.g., random access memory (RAM) or cache), non-volatile memory (e.g., read-only memory (ROM) or Flash memory), or microelectromechanical systems (MEMS)-based storage media.
- optical media e.g., compact disc (CD), digital versatile disc (DVD), Blu-Ray disc
- magnetic media e.g., floppy disc, magnetic tape, or magnetic hard drive
- volatile memory e.g., random access memory (RAM) or cache
- non-volatile memory e.g., read-only memory (ROM) or Flash memory
- MEMS microelectro
- the computer readable storage medium may be embedded in the computing system (e.g., system RAM or ROM), fixedly attached to the computing system (e.g., a magnetic hard drive), removably attached to the computing system (e.g., an optical disc or Universal Serial Bus (USB)-based Flash memory), or coupled to the computer system via a wired or wireless network (e.g., network accessible storage (NAS)).
- system RAM or ROM system RAM or ROM
- USB Universal Serial Bus
- NAS network accessible storage
Abstract
Game decisions are coordinated using a semantic natural language processing (NLP) machine learning (ML) algorithm, which is stored in a memory in some cases. In response to a game event, a processor records a text string that represents the game event in a text log that includes a sequence of text strings that represent game events that have transpired during a portion of the game. The processor also generates, using the semantic NLP ML algorithm, scores for labeled actions or content based on the text log and a curve that represents a target player experience as a function of progress through the game. The processor further serves one or more of the labeled actions or content that is selected based on the scores. The labeled actions or content are served to a display associated with the processor.
Description
- Video game developers have numerous tools at their disposal for influencing the experiences of the people playing the game. Relatively positive experiences are generated by providing valuable or desirable objects such as loot, higher-quality weapons, more ammunition, complimentary feedback from non-player characters (NPCs), and the like. Relatively negative experiences are generated by providing less valuable or harmful objects such as empty treasure chests, booby-traps, derogatory feedback from NPCs, and the like. The intensity of the gaming experience can be varied by, for example, changing the number of enemies attacking the player's character, the strength of these enemies relative to the strength of the player's character, the predictability or randomness of the movement of the enemies, the complexity of the responses or actions required of the player, the volume or rhythm or degree of harmony/dissonance of the background music, a relatively static or chaotic visual field, and the like. Similar approaches are used to affect or modify other player experiences, e.g., to influence emotional states such as victorious feelings, feelings of accomplishment, feelings of interpersonal connection or affection, feelings of mastery, and the like.
- In some cases, video games are designed to evoke particular player experiences that reflect the current state of the game. For example, at least one widely-available video game uses a set of heuristics to modify the level of difficulty based on game state data such as the current player health, status, skill, location, ammo counts, and the like. However, the relationship between level difficulties and the game state data specified by the set of heuristics is only applicable to this video game and cannot be used by developers of other games.
- Furthermore, the set of heuristics is predefined and cannot be adapted or modified to change the content that is served to the players or the game state information that is used to select this content. This reduces the adaptability of the heuristics to a variety of game types. For example, the set of heuristics implemented in one type of video game (e.g., a chaotic multiplayer zombie shooter) would not likely be an appropriate choice of heuristics to influence the experience of a person playing a different type of video game (e.g., a serene single player reflection on life, love, and loss). And even if the set of heuristics established for one game was appropriate to another game, developers would not be able to use a bespoke system implemented in the game using game-specific code and would instead have to build their own system from the ground up, which would result in another system that is bespoke to the other game.
- Against this background the proposed solution in particular relates to a (computer-implemented) method comprising executing a video game application at a video game processing system; in response to a game event during execution of the video game application, recording, by the video game processing system, a text string that represents the game event in a text log that comprises a sequence of text strings that represent game events that have been stored during execution of the video game application and thus while the video game has been played by a target player (i.e., game events that have transpired during a portion of the execution of the video game application and that, for example, have changed a state of the video game); generating, by the video game processing system using a semantic natural language processing (NLP) machine learning (ML) algorithm, scores for labeled actions or content based on the text log and a curve that is composed of data points representing values for a target user experience level at a point in time when playing the video game (the curve thus representing a target player experience as a function of progress through the game and, for example, being used to coordinate game decisions to influence player experience); and serving, by the video game processing system to a display associated with the video game processing system, at least one of the labeled actions or content that is selected based on the scores. For example, associating the events with text strings that are added or appended to a text log allows the text log to be used to determine a current player experience. The labels for the actions or context may be used by the semantic NLP ML algorithm to choose one or more of the actions or context to serve to the target player to influence the target player experience based on the curve and the scores.
- The proposed solution generally relates to engine-agnostic and game-agnostic techniques (e.g., techniques that can be used in games regardless of the type of game or the game engine upon which the game is built) for influencing player experience based on game context using one or more machine learning (ML) algorithms for natural language processing (referred to herein as “an NLP ML algorithm”) to select labeled actions or content based on a text-based log that represents previous game events and one or more curves representative of one or more target player experiences. Game events include, but are not limited to, player actions (e.g., pressing a button or combination of buttons on a game controller), choices made by the player at junctures in the game, measures of a player's skill or success rate in facing challenges presented by the game, events that are generated by the game (e.g., spawning a zombie or revealing loot), content or actions that are procedurally generated by the game, combinations of player and game actions (e.g., the player using the game controller to cause their character to enter a new room), and the like. Game developers map game events to corresponding text strings, e.g., using an application programming interface (API) to associate numbers, letters, words, or phrases with each event. In some embodiments, the mapping is stored in a table. A text log includes a sequence of text strings that represent game events that have transpired during a portion (or the entirety) of the game. The text strings are added to the text log in response to occurrences of the corresponding game event. One or more curves represent target player experiences as a function of progress through the game. Examples of player experiences that are represented by curves include, but are not limited to, calm/intensity, bad/good fortune, and semantic concepts such as “victorious.” Game developers also define a set of actions or content that are labeled with text strings. For example, in a treasure chest system, different types of treasure or traps are associated with corresponding labels such as “silver,” “gold,” or “ticking time bomb.” For another example, in a music system, different pieces of music are given labels such as “sad,” “ominous,” and “playful.”
- In operation, the semantic NLP ML algorithm uses the text log and the curves to score or rank labeled actions or content in the set (or a subset) of the labeled actions or content. In some embodiments, an API call is used to score or rank the labeled actions or content. The parameters of the API call include a context indicated by a text log, a curve representing the target player experience, an indicator of the type of curve, an indicator of a current place in the curve, and metadata indicating labels of the available actions or content. The API call returns a ranked list of the metadata, which is used to select the action or content that is served to the player. Some embodiments of the API call also return one or more of the scores for the content metadata generated by the NLP ML algorithm, an actual curve representing the actual player experience indicated by the text log, and the like. For example, if the API call includes a type that indicates that the curve is a calm/intensity curve, the semantic NLP ML algorithm uses the text log to rank the labeled actions/content based on how closely they match the target player experience indicated by the calm/intensity curve as a function of the player's progress through the game.
- In some embodiments, one or more rules are used to modify the results provided by the semantic NLP ML algorithm based on alternate associations of terms or phrases used in the text log with the labels of actions or content. For example, in response to input indicating the action “killing,” the semantic NLP ML algorithm will likely return a low score or ranking for a positive experience such as “feeling victorious.” However, in a game world, killing many enemies could be a signal that the player is victorious. A rule can therefore be applied to modify the scores returned by the semantic NLP ML algorithm so that “killing” has a strong association with “feeling victorious.” When this rule is applied, the ranking produced by the semantic NLP ML algorithm is modified to increase the ranking of the experience of “feeling victorious” in response to the text log including the string “killing’ or strings associated with “killing.” Thus, a game that implements this rule can generate actions or serve content associated with the player “feeling victorious” in response to the player killing many enemies, even though the semantic NLP ML algorithm would not necessarily give this association a high score or ranking.
- The present disclosure is better understood, and its numerous features and advantages made apparent to those skilled in the art by referencing the accompanying drawings. The use of the same reference symbols in different drawings indicates similar or identical items.
-
FIG. 1 is a block diagram of a video game processing system that supports coordinating game decisions using a semantic natural language processing (NLP) machine learning (ML) algorithm according to some embodiments. -
FIG. 2 is a block diagram of a cloud-based system that supports coordinating game decisions using a semantic NLP ML algorithm according to some embodiments. -
FIG. 3 is a block diagram that illustrates a text log made up of a sequence of text strings that represent events in the game according to some embodiments. -
FIG. 4 is a plot of a curve that represents a target player experience as a function of game progress according to some embodiments. -
FIG. 5 is a block diagram of an event map that maps or associates text strings to events or context that occur within a game according to some embodiments. -
FIG. 6 is a block diagram of a table of labeled actions or context for a game according to some embodiments. -
FIG. 7 is a block diagram of a game director to make coordinated game decisions using one or more instances of a semantic NLP ML algorithm according to some embodiments. -
FIG. 8 is a flow diagram of a method of coordinating game decisions using semantic NLP ML algorithms according to some embodiments. -
FIGS. 1-8 disclose engine-agnostic and game-agnostic techniques for influencing player experience based on game context using one or more machine learning (ML) algorithms for natural language processing (referred to herein as “an NLP ML algorithm”) to select labeled actions or content based on a text-based log that represents previous game events and one or more curves representative of one or more target player experiences. -
FIG. 1 is a block diagram of a videogame processing system 100 that supports coordinating game decisions using a semantic natural language processing (NLP) machine learning (ML) algorithm according to some embodiments. Theprocessing system 100 includes or has access to asystem memory 105 or other storage element that is implemented using a non-transitory computer readable medium such as a dynamic random-access memory (DRAM). However, some embodiments of thememory 105 are implemented using other types of memory including static RAM (SRAM), nonvolatile RAM, and the like. Theprocessing system 100 also includes a bus 110 to support communication between entities implemented in theprocessing system 100, such as thememory 105. Some embodiments of theprocessing system 100 include other buses, bridges, switches, routers, and the like, which are not shown inFIG. 1 in the interest of clarity. - The
processing system 100 includes a central processing unit (CPU) 115. Some embodiments of theCPU 115 include multiple processing elements (not shown inFIG. 1 in the interest of clarity) that execute instructions concurrently or in parallel. The processing elements are referred to as processor cores, compute units, or using other terms. TheCPU 115 is connected to the bus 110 and theCPU 115 communicates with thememory 105 via the bus 110. TheCPU 115 executes instructions such asprogram code 120 stored in thememory 105 and theCPU 115 stores information in thememory 105 such as the results of the executed instructions. TheCPU 115 is also able to initiate graphics processing by issuing draw calls. - An input/output (I/O)
engine 125 handles input or output operations associated with adisplay 130 that presents images or video on ascreen 135. In the illustrated embodiment, the I/O engine 125 is connected to agame controller 140 which provides control signals to the I/O engine 125 in response to a user pressing one or more buttons on thegame controller 140 or interacting with thegame controller 140 in other ways, e.g., using motions that are detected by an accelerometer. The I/O engine 125 also provides signals to thegame controller 140 to trigger responses in thegame controller 140 such as vibrations, illuminating lights, and the like. In the illustrated embodiment, the I/O engine 125 reads information stored on anexternal storage element 145, which is implemented using a non-transitory computer readable medium such as a compact disk (CD), a digital video disc (DVD), and the like. The I/O engine 125 also writes information to theexternal storage element 145, such as the results of processing by theCPU 115. Some embodiments of the I/O engine 125 are coupled to other elements of theprocessing system 100 such as keyboards, mice, printers, external disks, and the like. The I/O engine 125 is coupled to the bus 110 so that the I/O engine 125 communicates with thememory 105, theCPU 115, or other entities that are connected to the bus 110. - The
processing system 100 includes a graphics processing unit (GPU) 150 that renders images for presentation on thescreen 135 of thedisplay 130, e.g., by controlling pixels that make up thescreen 135. For example, theGPU 150 renders objects to produce values of pixels that are provided to thedisplay 130, which uses the pixel values to display an image that represents the rendered objects. TheGPU 150 includes one or more processing elements such as anarray 155 of compute units that execute instructions concurrently or in parallel. Some embodiments of theGPU 150 are used for general purpose computing. In the illustrated embodiment, theGPU 150 communicates with the memory 105 (and other entities that are connected to the bus 110) over the bus 110. However, some embodiments of theGPU 150 communicate with thememory 105 over a direct connection or via other buses, bridges, switches, routers, and the like. TheGPU 150 executes instructions stored in thememory 105 and theGPU 150 stores information in thememory 105 such as the results of the executed instructions. For example, thememory 105 stores instructions that represent aprogram code 160 that is to be executed by theGPU 150. - The
CPU 115, theGPU 150, or a combination thereof execute machine learning algorithms such as a semantic NLP ML algorithm. In the illustrated embodiment, thesystem memory 105stores program code 165 that represents a semantic NLP ML algorithm that has been trained using a corpus of natural language data. Many text corpuses are available for training machine learning algorithms including corpuses related to media/product reviews, news articles, email/spam/newsgroup messages, tweets, dialogues, and the like. TheCPU 115, theGPU 150, or one or more of the compute units in thearray 155 execute theprogram code 165 that represents the trained semantic NLP ML algorithm in either input/response modality or a semantic similarity modality. - In the illustrated embodiment, the
CPU 115 and theGPU 150 executecorresponding program code game controller 140 is processed by theCPU 115 to modify a state of the video game application. TheCPU 115 then transmits draw calls to instruct theGPU 150 to render images representative of a state of the video game application for display on thescreen 135 of thedisplay 130. As discussed herein, theGPU 150 can also perform general-purpose computing related to the video game application such as executing theprogram code 165 that represents a semantic NLP ML algorithm implemented in the game. In the illustrated embodiment, thesystem memory 105 includes aportion 170 that is reserved for storing game-related information, although this information can be stored in other locations in some embodiments. - The
CPU 115 and theGPU 150 use instances of the semantic NLP ML algorithm to coordinate game decisions to influence the player experience by selecting actions or content to be served to the player based on a current state of the game and a target player experience. The state of the game changes substantially continuously as game events transpire and theGPU 150 keeps track of the events using a text log that is stored in theportion 170 of thememory 105. One or more text strings that represent the game event are recorded in the text log in response to each event that occurs in the game. The text log therefore includes a sequence of text strings that represent game events that have transpired during a portion (or the entirety) of the game. A set of actions or events that are potentially served to the player of the game are labeled with text phrases and stored in theportion 170 of thesystem memory 105. Some embodiments of the semantic NLP ML algorithm generate scores for the labeled actions or content based on the text log and a curve that represents a target player experience as a function of progress through the game. One or more of the labeled actions or content is then selected based on their scores and the selected actions or content are served to the player. -
FIG. 2 is a block diagram of a cloud-basedsystem 200 that supports coordinating game decisions using a semantic NLP ML algorithm according to some embodiments. The cloud-basedsystem 200 includes aserver 205 that is interconnected with anetwork 210. Although asingle server 205 shown inFIG. 2 , some embodiments of the cloud-basedsystem 200 include more than one server connected to thenetwork 210. In the illustrated embodiment, theserver 205 includes atransceiver 215 that transmits signals towards thenetwork 210 and receives signals from thenetwork 210. Thetransceiver 215 can be implemented using one or more separate transmitters and receivers. Theserver 205 also includes one ormore processors 220 and one ormore memories 225. Theprocessor 220 executes instructions such as program code stored in thememory 225 and theprocessor 220 stores information in thememory 225 such as the results of the executed instructions. - The cloud-based
system 200 includes one ormore processing devices 230 such as a computer, set-top box, gaming console, and the like that are connected to theserver 205 via thenetwork 210. In the illustrated embodiment, theprocessing device 230 includes atransceiver 235 that transmits signals towards thenetwork 210 and receives signals from thenetwork 210. Thetransceiver 235 can be implemented using one or more separate transmitters and receivers. Theprocessing device 230 also includes one ormore processors 240 and one ormore memories 245. Theprocessor 240 executes instructions such as program code stored in thememory 245 and theprocessor 240 stores information in thememory 245 such as the results of the executed instructions. Thetransceiver 235 is connected to adisplay 250 that displays images or video on ascreen 255 and agame controller 260. Some embodiments of the cloud-basedsystem 200 are therefore used by cloud-based game streaming applications. - The
processor 220, theprocessor 240, or a combination thereof execute program code representative of game that implements a semantic NLP ML algorithm in either input/response modality or a semantic similarity modality. As discussed herein, the semantic NLP ML algorithm is pre-trained using one or more text corpuses. The game time decisions that affect the player experience are coordinated using the semantic NLP ML algorithm, as discussed herein. -
FIG. 3 is a block diagram that illustrates atext log 300 made up of a sequence of text strings that represent events in the game according to some embodiments. Thetext log 300 is generated by some embodiments of theGPU 150 shown inFIG. 1 and theprocessors FIG. 2 . Some embodiments of the text log are stored in a memory such as thesystem memory 105 shown inFIG. 1 and thememories FIG. 2 . - The text strings in the
text log 300 represent a portion (or the entirety) of the game and indicate the player experience up to the current point in the game. As illustrated inFIG. 3 , the events recorded in thetext log 300 include information such as the information in Table 1, which includes a identifying a text string associated with an event, a time at which the event occurs, and the text string representing the event. -
TABLE 1 Number Time Text String 1 0:00.00 Player walking in rain 2 0:00.00 Ominous music 3 0:30.00 Lightning 4 0:30.50 Thunderclap 5 0:32.00 Zombie Spawns Near Player 6 0:33.00 Player Shoots Zombie, Misses 7 0:33.10 Zombie Moves Towards Player 8 0:35:00 Player Shoots Zombie, Hits 9 0:35.10 Zombie Moves Towards Player 10 0:36.00 Player Makes Headshot 11 0:36.10 Zombie Dies 12 0:40.00 Player Examines Zombie - Additional text strings are added to the
text log 300 in response to events occurring in the game. In the illustrated embodiment, anaction 305 occurs that is represented by the text string “Zombie revives,” which indicates that the zombie that appeared to be dead has returned from the grave (again). The text string representative of theaction 305 is then added to thetext log 300, as indicated by thearrow 310. -
FIG. 4 is aplot 400 of acurve 405 that represents a target player experience as a function of game progress according to some embodiments. The vertical axis of theplot 400 indicates a target player experience (in arbitrary units) and the horizontal axis of theplot 400 indicates game progress from the beginning of the game (zero) to the end of the game (one). In the illustrated embodiment, thecurve 405 represents a target level of calm/intensity and points on thecurve 405 correspond to the events represented by the text strings in the text log 300 shown inFIG. 3 . However, in other embodiments, thecurve 405 represents different target player experiences such as positive/negative sentiments, tracking of a semantic concept such as “victorious” or “sense of belonging,” and the like. Thecurve 405 can be bespoke, provided by a game developer, provided by a player, or created at runtime. - Initially, at time T0, the target player experience is relatively calm as indicated by the relatively low value of the
curve 405. The player begins to progress through the game and the environment experienced by the player is reflected in the text strings in the text log. For example, the text log indicates that the player is walking in the rain and ominous music is playing, which is intended to gradually raise the sense of intensity, as indicated by the increasing value of thecurve 405 from T0 to T1. - At the time T1, the text log includes a text string indicating that lightning struck and there was a thunderclap. A small spike in the
curve 405 around the time T1 indicates an increase in the intensity of the player experience corresponding to the lightning and thunder. - At the time T2, the text log includes a text string indicating that a zombie has spawned nearly player. Adding a threatening character near the player is intended to increase the intensity of the player experience, as indicated by the
curve 405 rising from time T2 to time T3. - At the time T3, the text log includes a text string indicating that the player attempted a shot at the zombie. However, the text string also indicates that the player missed the shot and so the intensity of the player experience continues to increase, as indicated by the
curve 405 rising from time T3 to time T4. - At the time T4, the text log includes a text string indicating that the zombie continued to move towards the player. Reducing the distance between the zombie and the player increases the intensity of the player experience, as indicated by the curve rising from time T4 to time T5.
- At the time T5, the text log includes a text string indicating that the player attempted a shot at the zombie. The text string also indicates that the player's shot hit the zombie. Successfully shooting the zombie reduces the intensity of the player experience, as indicated by the
curve 405 falling from time T4 to time T5. - At the time T6, the text log includes a text string indicating that the zombie is not dead and continued to move towards the player. Reducing the distance between the zombie and the player increases the intensity of the player experience, as indicated by the curve rising from time T6 to time T7.
- At the time T7, the text log includes a text string indicating that the player attempted a shot at the zombie. The text string also indicates that the player's shot hit the zombie in the head and the zombie died. The successful headshot and death of the zombie reduce the intensity of the player experience, as indicated by the
curve 405 falling from time T7 to time T8. - At the time T8, the text log includes a text string indicating that the player examined the dead zombie. The zombie appeared to be dead and the intensity of the player experience continued to decrease, as indicated by the curve falling from time T8 to time T9.
- At the time T9, the player is examining the “dead” zombie and the zombie revives, as shown in the
action 305 inFIG. 3 . The unexpected revival of the zombie will cause the intensity of the player experience to spike, as indicated by the rising dashedarrow 410 after the time T9. - Some embodiments of the
curve 405 are used to coordinate game decisions to influence player experience. For example, a semantic NLP ML algorithm uses the text log 300 shown inFIG. 3 and thecurve 405 to score or rank labeled actions or content in a set (or a subset) of labeled actions or content. The semantic NLP ML algorithm returns a ranked list of the labeled actions or content, which is then used to select the action or content that is served to the player. Although asingle curve 405 is shown inFIG. 4 , multiple curves are used in some embodiments to coordinate game decisions. The aspects of the player experience represented by the different curves are indicated by acurve type 415. For example, a first curve type indicates that the corresponding curve represents calm/intensity, a second curve type indicates that the corresponding curve indicates positive/negative experiences, and a third curve type indicates a semantic type such as “victorious” or “sense of belonging.” -
FIG. 5 is a block diagram of anevent map 500 that maps or associates text strings to events or context that occur within a game according to some embodiments. The text strings are written or appended to a text log (such as the text log 300 shown inFIG. 3 ) in response to the corresponding event occurring in the game. Theevent map 500 is created by game developers based on the events or context that are used to influence player experience within the game. For example, as indicated in theevent map 500, a sense of “foreboding” is associated with playing “ominous music” and a sense of “shock, surprise” is associated with a “thunderclap.” Associating the events with text strings that are added or appended to a text log allows the text log to be used to determine a current player experience, as discussed herein. -
FIG. 6 is a block diagram of a table 600 of labeled actions or context for a game according to some embodiments. The labels for the actions or context are used by a semantic NLP ML algorithm to choose one or more of the actions or context to serve to a player to influence player experience based on a curve (such as thecurve 405 shown inFIG. 4 ) that represents a target player experience as a function of progress through the game. Some embodiments of the table 600 are created by a game developer prior to runtime to associate text labels with actions or context that are available for presentation to the player during the game. For example, a “music loop 1” is labeled with the text string “ominous” to indicate that “music loop 1” influences player experience by increasing a sense of worry or foreboding. For another example, the “sound effect 1” is labeled with the texturing “shocking” to indicate that playing “sound effect 1” influences player experience by surprising or shocking the player. - The example shown in table 600 is not meant to be exhaustive. To the contrary, the actions or context that are labeled with text strings and available for provision to the player during progress of the game can include anything developed for the game. The actions or contexts can include assets or data describing how new assets could be generated. For example, the labeled content can include all the characters created for the game or set up to be generated by the game, modular world tiles associated with features and rules that govern how they connect to other tiles, data tables describing enemy's spawns (e.g., how many enemies, level of challenge, spawn location), data tables describing loot (e.g., range of items, value of items, each of which can be tagged with a text string), weather system settings, animation sets for characters, world status settings, music, and the like. In some embodiments, game developers create multiple tables and associate different tables with different curves indicating different aspects of the player experience.
-
FIG. 7 is a block diagram including agame director 700 that makes coordinated game decisions using one or more instances of a semanticNLP ML algorithm 701 according to some embodiments. Thegame director 700 is implemented in some embodiments of theGPU 150 shown inFIG. 1 and theprocessors FIG. 2 . In the illustrated embodiment, atext log 705 such as the text log 300 shown inFIG. 3 , acurve 710 such as thecurve 405 shown inFIG. 4 , and aset 715 of labels actions/contexts such as the set of labeled actions/context listed in table 600 inFIG. 6 are provided to the semanticNLP ML algorithm 701. Theset 715 includeslabels - The
game director 700 uses the instances of the semanticNLP ML algorithm 701 to generate scores for labeled actions/contexts based on a text log and a curve of target player experience. Generating the scores includes: (1) assessing the current player experience based on the text log and (2) generating the scores for the labeled actions/contexts based on the current player experience, the target player experience indicated by the curve, and the labeled actions/contexts. In the illustrated embodiment, thegame director 700 assesses the current player experience using the semanticNLP ML algorithm 701 and sentiment analysis. For example, thegame director 700 determines whether there is a calming ambient audio of wind or ominous music creating tension, are there enemies spawning all around the player or is the player in a serene, cozy space? The sentiment that is evaluated based on the curve corresponds to the type of the curve. For example, the relative calm or intensity of the situation is evaluated if the curve indicates calm/intensity, the fortune of the player experience is evaluated if the curve indicates good/bad fortune, and other semantic concepts such as “victorious” or “sense of belonging” are evaluated for corresponding types of curves. - The
game director 700 then uses the semanticNLP ML algorithm 701 to generatescores NLP ML algorithm 701 can return a score for opening a treasure chest to find a rare, valuable item that is higher than the score for opening the treasure chest to reveal a devastating trap. Conversely, the semanticNLP ML algorithm 701 can return a lower score for the rare, valuable item and a higher score for the devastating trap if the current player experience has been exceptionally good. For another example, if the curve tracks a semantic concept such as “victorious” or “sense of belonging,” the semanticNLP ML algorithm 701 ranks the labels 720-723 based on the current player experience such as whether the player quests dealt with themes regarding “belonging to a tribe” or how “victorious” the player has been in previous encounters with enemies. - As discussed herein, the semantic
NLP ML algorithm 701 is pre-trained using one or more text corpuses. Pre-training the semanticNLP ML algorithm 701 on conventional text corpuses causes the semanticNLP ML algorithm 701 to generate higher scores 725-728 for responses that are consistent with conventional usage or interpretation of the terms in thetext log 705 and the labels 720-723. However, some embodiments of the semanticNLP ML algorithm 701 are implemented in game worlds that purposely redefine concepts to contrast with their real-world interpretations. Post-processing of the results provided by the semanticNLP ML algorithm 701 is therefore used to modify the scores of 725-728 based on one or more rules that redefine the associations between the terms or phrases in thetext log 705 and the labels 720-723. - In response to a request to serve dynamic content, the
game director 700 uses thetext log 705, thecurve 710, and theset 715 of labeled actions/contexts to choose one or more actions or context to serve to the player. Thegame director 700 chooses the actions or context based on the scores 725-728. In some embodiments, the actions or context that are served by thegame director 700 are expressed in natural language to enable subsequent NLP-based analysis. For example, thegame director 700 can choose anaction 730 that results in an apparently dead zombie being revived, which is represented by the text string “Zombie revives.” Information that is used to select the action includes, but is not limited to: -
- The player choice expressed in the game, e.g., where did the player choose to go, are they role-playing as a paragon or an immoral character, etc.
- The (possibly emergent) events that have transpired in the game so far, e.g., if there was procedurally generated content, what is it, what form to take, and how has it affected the game world and state.
- The analysis of the player's experience so far, e.g., have they struggled or are they having too easy a time, is there enough variety to their experience?
- The decisions made by other players that have affected the game world.
-
FIG. 8 is a flow diagram of amethod 800 of coordinating game decisions using semantic NLP ML algorithms according to some embodiments. Thegame director 700 is implemented in some embodiments of theGPU 150 shown inFIG. 1 , theprocessors FIG. 2 , and thegame director 700 shown inFIG. 7 . - At
block 805, the game director accesses a text log including text strings that are mapped to events that have occurred in the game or a portion of the game. Atblock 810, the game director accesses the curve representing a target player experience as a function of progress through the game. Atblock 815, the game director accesses a set of labeled actions/contexts that are available for providing to the player. Although theblocks FIG. 8 , some embodiments of themethod 800 perform theblocks blocks - At
block 820, an instance of the semantic NLP ML algorithm generates scores for the labeled actions/contexts, as discussed herein. In some embodiments, the API call returns a ranked list of the metadata, which is used to select the action or content that is served to the player. Some embodiments of the API call also return one or more of the scores for the content metadata generated by the NLP ML algorithm, an actual curve representing the actual player experience indicated by the text log, and the like. For example, if the API call includes a type that indicates that the curve is a calm/intensity curve, the semantic NLP ML algorithm uses the text log to rank the labeled actions/content based on how closely they match the target player experience indicated by the calm/intensity curve as a function of the player's progress through the game. - At
block 825, the game director selects a subset of the labeled actions/contexts based on the scores. In some embodiments, the game director selects labeled action/contexts to be in the subset in response to the corresponding scores being above a threshold. Atblock 830, the game director (or other processor) serves the subset of labeled actions/contexts to the player. - In some embodiments, certain aspects of the techniques described above may be implemented by one or more processors of a processing system executing software. The software comprises one or more sets of executable instructions stored or otherwise tangibly embodied on a storage element implemented using a non-transitory computer readable storage medium. The software can include the instructions and certain data that, when executed by the one or more processors, manipulate the one or more processors to perform one or more aspects of the techniques described above. The non-transitory computer readable storage medium can include, for example, a magnetic or optical disk storage device, solid state storage devices such as Flash memory, a cache, random access memory (RAM) or other non-volatile memory device or devices, and the like. The executable instructions stored on the non-transitory computer readable storage medium may be in source code, assembly language code, object code, or other instruction format that is interpreted or otherwise executable by one or more processors.
- A computer readable storage medium may include any storage medium, or combination of storage media, accessible by a computer system during use to provide instructions and/or data to the computer system. Such storage media can include, but is not limited to, optical media (e.g., compact disc (CD), digital versatile disc (DVD), Blu-Ray disc), magnetic media (e.g., floppy disc, magnetic tape, or magnetic hard drive), volatile memory (e.g., random access memory (RAM) or cache), non-volatile memory (e.g., read-only memory (ROM) or Flash memory), or microelectromechanical systems (MEMS)-based storage media. The computer readable storage medium may be embedded in the computing system (e.g., system RAM or ROM), fixedly attached to the computing system (e.g., a magnetic hard drive), removably attached to the computing system (e.g., an optical disc or Universal Serial Bus (USB)-based Flash memory), or coupled to the computer system via a wired or wireless network (e.g., network accessible storage (NAS)).
- Note that not all of the activities or elements described above in the general description are required, that a portion of a specific activity or device may not be required, and that one or more further activities may be performed, or elements included, in addition to those described. Still further, the order in which activities are listed are not necessarily the order in which they are performed. Also, the concepts have been described with reference to specific embodiments. However, one of ordinary skill in the art appreciates that various modifications and changes can be made without departing from the scope of the present disclosure as set forth in the claims below. Accordingly, the specification and figures are to be regarded in an illustrative rather than a restrictive sense, and all such modifications are intended to be included within the scope of the present disclosure.
- Benefits, other advantages, and solutions to problems have been described above with regard to specific embodiments. However, the benefits, advantages, solutions to problems, and any feature(s) that may cause any benefit, advantage, or solution to occur or become more pronounced are not to be construed as a critical, required, or essential feature of any or all the claims. Moreover, the particular embodiments disclosed above are illustrative only, as the disclosed subject matter may be modified and practiced in different but equivalent manners apparent to those skilled in the art having the benefit of the teachings herein. No limitations are intended to the details of construction or design herein shown, other than as described in the claims below. It is therefore evident that the particular embodiments disclosed above may be altered or modified and all such variations are considered within the scope of the disclosed subject matter. Accordingly, the protection sought herein is as set forth in the claims below.
Claims (23)
1. A method comprising:
executing a video game application at a video game processing system;
in response to a game event during execution of the video game application, recording, by the video game processing system, a text string that represents the game event in a text log that comprises a sequence of text strings that represent game events that have transpired during a portion of the execution of the video game application;
generating, by the video game processing system using a semantic natural language processing (NLP) machine learning (ML) algorithm, scores for labeled actions or content based on the text log and a curve that represents a target player experience as a function of progress through the game; and
serving, by the video game processing system to a display associated with the video game processing system, at least one of the labeled actions or content that is selected based on the scores.
2. The method of claim 1 , further comprising:
mapping, by the video game processing system, a set of game events to a corresponding set of text strings.
3. The method of claim 2 , further comprising:
adding, by the video game processing system, a text string of the set of text strings to the text log in response to occurrence of a corresponding one of the set of game events.
4. The method of claim 1 , further comprising:
labeling, by the video game processing system, a set of actions or content with a corresponding set of text strings to generate the labeled actions or content.
5. The method of claim 1 , further comprising:
receiving, at the video game application, an application programming interface (API) call comprising information indicating a context indicated by the text log, the curve, an indicator of a type of the curve, and metadata indicating labels of the labeled actions or content.
6. The method of claim 5 , wherein generating the scores for the labeled actions or content comprises generating the scores based on the information received in the API call.
7. The method of claim 6 , further comprising:
returning, via the API call, a ranked list of the metadata; and
selecting, by the video game processing system, the at least one of the labeled actions or content to be served based on the ranked list.
8. The method of claim 7 , wherein the semantic NLP ML algorithm uses the text log to rank the labeled actions or content based on how closely they match the target player experience indicated by the curve of the type indicated by the indicator of the type of the curve.
9. The method of claim 7 , further comprising:
returning, via the API call, at least one of the scores generated by the semantic NLP ML algorithm for the metadata or an actual curve representing an actual player experience indicated by the text log.
10. The method of claim 1 , further comprising:
modifying the scores generated by the semantic NLP ML algorithm based on alternate associations of the text strings in the text log with labels of the labeled actions or content, wherein the alternate associations are indicated by at least one rule.
11. The method of claim 10 , wherein the at least one rule indicates at least one association between a text string and a label that is different than, or contrary to, at least one conventional association indicated by a corpus that is used to train the semantic NLP ML algorithm.
12. An apparatus, comprising:
a storage element configured to store executable a semantic natural language processing (NLP) machine learning (ML) algorithm; and
at least one processor configured to, in response to a game event during execution of a video game application, record a text string that represents the game event in a text log that comprises a sequence of text strings that represent game events that have transpired during a portion of the execution of the video game application, generate, using the semantic NLP ML algorithm, scores for labeled actions or content based on the text log and a curve that represents a target player experience as a function of progress through the game, and serve, to a display associated with the video game application, at least one of the labeled actions or content that is selected based on the scores.
13. The apparatus of claim 12 , wherein the processor is configured to map a set of game events to a corresponding set of text strings, and wherein the mapping is stored in storage element.
14. The apparatus of claim 13 , wherein the processor is configured to add one of the set of text strings to the text log in response to occurrence of a corresponding one of the set of game events.
15. The apparatus of claim 12 , wherein the processor is configured to label a set of actions or content with a corresponding set of text strings to generate the labeled actions or content.
16. The apparatus of claim 12 , wherein the processor is configured to receive an application programming interface (API) call comprising information indicating a context indicated by the text log, the curve, an indicator of a type of the curve, and metadata indicating labels of the labeled actions or content.
17. The apparatus of claim 16 , wherein the processor is configured to generate the scores for the labeled actions or content comprises generating the scores based on the information received in the API call.
18. The apparatus of claim 17 , wherein the processor is configured to:
return, via the API call, a ranked list of the metadata; and
select the at least one of the labeled actions or content to be served based on the ranked list.
19. The apparatus of claim 18 , wherein the semantic NLP ML algorithm uses the text log to rank the labeled actions or content based on how closely they match the target player experience indicated by the curve of the type indicated by the indicator of the type of the curve.
20. The apparatus of claim 18 , wherein the processor is configured to return, via the API call, at least one of the scores generated by the semantic NLP ML algorithm for the metadata or an actual curve representing an actual player experience indicated by the text log.
21. The apparatus of claim 12 , wherein the processor is configured to modify the scores generated by the semantic NLP ML algorithm based on alternate associations of the text strings in the text log with labels of the labeled actions or content, wherein the alternate associations are indicated by at least one rule.
22. The apparatus of claim 21 , wherein the at least one rule indicates at least one association between a text string and a label that is different than, or contrary to, at least one conventional association indicated by a corpus that is used to train the semantic NLP ML algorithm.
23. A non-transitory computer readable medium embodying a set of executable instructions, the set of executable instructions to manipulate at least one processor to:
in response to a game event during execution of a video game application, record a text string that represents the game event in a text log that comprises a sequence of text strings that represent game events that have transpired during a portion of the execution of the video game application;
generate, using a semantic natural language processing (NLP) machine learning (ML) algorithm, scores for labeled actions or content based on the text log and a curve that represents a target player experience as a function of progress through the game; and
serve, to a display associated with the video game application, at least one of the labeled actions or content that is selected based on the scores.
Priority Applications (1)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US17/770,946 US20220370908A1 (en) | 2020-03-20 | 2020-05-15 | Using semantic natural language processing machine learning algorithms for a video game application |
Applications Claiming Priority (3)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US202062992368P | 2020-03-20 | 2020-03-20 | |
PCT/US2020/033040 WO2021188131A1 (en) | 2020-03-20 | 2020-05-15 | Using semantic natural language processing machine learning algorithms for a video game application |
US17/770,946 US20220370908A1 (en) | 2020-03-20 | 2020-05-15 | Using semantic natural language processing machine learning algorithms for a video game application |
Publications (1)
Publication Number | Publication Date |
---|---|
US20220370908A1 true US20220370908A1 (en) | 2022-11-24 |
Family
ID=70978599
Family Applications (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
US17/770,946 Pending US20220370908A1 (en) | 2020-03-20 | 2020-05-15 | Using semantic natural language processing machine learning algorithms for a video game application |
Country Status (3)
Country | Link |
---|---|
US (1) | US20220370908A1 (en) |
EP (1) | EP4010097A1 (en) |
WO (1) | WO2021188131A1 (en) |
Cited By (1)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20210370178A1 (en) * | 2020-06-02 | 2021-12-02 | Nintendo Co., Ltd. | Storage medium storing game program, game apparatus, game system, and game processing method |
Citations (4)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US6699127B1 (en) * | 2000-06-20 | 2004-03-02 | Nintendo Of America Inc. | Real-time replay system for video game |
US20180139507A1 (en) * | 2016-11-14 | 2018-05-17 | Google, Inc | Systems and methods for providing interactive streaming media |
US20190251603A1 (en) * | 2018-02-15 | 2019-08-15 | Sampsa Valtteri Jaatinen | Systems and methods for a machine learning based personalized virtual store within a video game using a game engine |
US20200391118A1 (en) * | 2019-06-14 | 2020-12-17 | Roblox Corporation | Predictive data preloading |
Family Cites Families (2)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20170106283A1 (en) * | 2015-10-16 | 2017-04-20 | Microsoft Technology Licensing, Llc | Automated generation of game event recordings |
US9987559B2 (en) * | 2016-05-27 | 2018-06-05 | International Business Machines Corporation | Aggregating and utilizing meta-game data for artificial intelligence in video games |
-
2020
- 2020-05-15 WO PCT/US2020/033040 patent/WO2021188131A1/en unknown
- 2020-05-15 EP EP20730832.1A patent/EP4010097A1/en not_active Withdrawn
- 2020-05-15 US US17/770,946 patent/US20220370908A1/en active Pending
Patent Citations (4)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US6699127B1 (en) * | 2000-06-20 | 2004-03-02 | Nintendo Of America Inc. | Real-time replay system for video game |
US20180139507A1 (en) * | 2016-11-14 | 2018-05-17 | Google, Inc | Systems and methods for providing interactive streaming media |
US20190251603A1 (en) * | 2018-02-15 | 2019-08-15 | Sampsa Valtteri Jaatinen | Systems and methods for a machine learning based personalized virtual store within a video game using a game engine |
US20200391118A1 (en) * | 2019-06-14 | 2020-12-17 | Roblox Corporation | Predictive data preloading |
Cited By (2)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20210370178A1 (en) * | 2020-06-02 | 2021-12-02 | Nintendo Co., Ltd. | Storage medium storing game program, game apparatus, game system, and game processing method |
US11701588B2 (en) * | 2020-06-02 | 2023-07-18 | Nintendo Co., Ltd. | Storage medium storing game program, game apparatus, game system, and game processing method |
Also Published As
Publication number | Publication date |
---|---|
EP4010097A1 (en) | 2022-06-15 |
WO2021188131A1 (en) | 2021-09-23 |
Similar Documents
Publication | Publication Date | Title |
---|---|---|
Wydmuch et al. | Vizdoom competitions: Playing doom from pixels | |
Jørgensen | Time for new terminology?: Diegetic and non-diegetic sounds in computer games revisited | |
CN1160142C (en) | Competitive video game apparatus, method of playing video game, and computer-readable recording medium | |
JP6515053B2 (en) | Program and game system | |
US20040038739A1 (en) | Computer game with emotion-based character interaction | |
EP1704903B1 (en) | Message output device, message control method, program, and information recording medium | |
US11395971B2 (en) | Auto harassment monitoring system | |
CN112295228B (en) | Virtual object control method and device, electronic equipment and storage medium | |
US20230124014A1 (en) | Image display method and apparatus, device and storage medium | |
Montfort et al. | The Dreamcast, console of the avant-garde | |
US20220370908A1 (en) | Using semantic natural language processing machine learning algorithms for a video game application | |
US20120115605A1 (en) | Systems and methods for inverse franchising of virtual characters | |
Baerg | Risky Business: Neo-liberal Rationality and the | |
US10391401B2 (en) | Game system, its control method and a non-transitory storing media readable on a computer device | |
WO2023024880A1 (en) | Method and apparatus for expression displaying in virtual scenario, and device and medium | |
Stahlke et al. | The game designer's playbook: an introduction to game interaction design | |
WO2021168619A1 (en) | Information pushing method and apparatus, electronic device, and computer readable medium | |
Boren | Playing God: An Analysis of Video Game Religion | |
Casey | Teaching and Learning Game Design | |
US11443512B1 (en) | Systems and methods for querying video information of electronic games | |
US20220370913A1 (en) | Game analytics using natural language processing | |
US20230232083A1 (en) | Systems and methods for predicting user-generated content trends with machine-generated metadata | |
US20230326208A1 (en) | Systems and methods for user-generated content with machine-generated metadata | |
Aldaboubi | Big Data In Single Player Games | |
Savchev | “Do you accept defeat? Is it all pointless? Give up here?” Anti-violence Rhetoric in the NieR Series Within a Japanese Context |
Legal Events
Date | Code | Title | Description |
---|---|---|---|
AS | Assignment |
Owner name: GOOGLE LLC, CALIFORNIAFree format text: ASSIGNMENT OF ASSIGNORS INTEREST;ASSIGNOR:KIPNIS, ANNA;REEL/FRAME:059680/0274Effective date: 20220422 |
|
STPP | Information on status: patent application and granting procedure in general |
Free format text: DOCKETED NEW CASE - READY FOR EXAMINATION |
|
STPP | Information on status: patent application and granting procedure in general |
Free format text: NON FINAL ACTION MAILED |
|
STPP | Information on status: patent application and granting procedure in general |
Free format text: RESPONSE TO NON-FINAL OFFICE ACTION ENTERED AND FORWARDED TO EXAMINER |