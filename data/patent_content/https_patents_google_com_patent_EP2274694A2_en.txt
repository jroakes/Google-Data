EP2274694A2 - File access via conduit application - Google Patents
File access via conduit applicationInfo
- Publication number
- EP2274694A2 EP2274694A2 EP09723279A EP09723279A EP2274694A2 EP 2274694 A2 EP2274694 A2 EP 2274694A2 EP 09723279 A EP09723279 A EP 09723279A EP 09723279 A EP09723279 A EP 09723279A EP 2274694 A2 EP2274694 A2 EP 2274694A2
- Authority
- EP
- European Patent Office
- Prior art keywords
- file
- application
- directory
- user
- images
- Prior art date
- Legal status (The legal status is an assumption and is not a legal conclusion. Google has not performed a legal analysis and makes no representation as to the accuracy of the status listed.)
- Withdrawn
Links
Classifications
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F16/00—Information retrieval; Database structures therefor; File system structures therefor
- G06F16/10—File systems; File servers
- G06F16/16—File or folder operations, e.g. details of user interfaces specifically adapted to file systems
- G06F16/168—Details of user interfaces specifically adapted to file systems, e.g. browsing and visualisation, 2d or 3d GUIs
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F21/00—Security arrangements for protecting computers, components thereof, programs or data against unauthorised activity
- G06F21/50—Monitoring users, programs or devices to maintain the integrity of platforms, e.g. of processors, firmware or operating systems
- G06F21/52—Monitoring users, programs or devices to maintain the integrity of platforms, e.g. of processors, firmware or operating systems during program execution, e.g. stack integrity ; Preventing unwanted data erasure; Buffer overflow
- G06F21/53—Monitoring users, programs or devices to maintain the integrity of platforms, e.g. of processors, firmware or operating systems during program execution, e.g. stack integrity ; Preventing unwanted data erasure; Buffer overflow by executing in a restricted environment, e.g. sandbox or secure virtual machine
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F21/00—Security arrangements for protecting computers, components thereof, programs or data against unauthorised activity
- G06F21/60—Protecting data
- G06F21/62—Protecting access to data via a platform, e.g. using keys or access control rules
- G06F21/6218—Protecting access to data via a platform, e.g. using keys or access control rules to a system of files or objects, e.g. local or distributed file system or database
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F8/00—Arrangements for software engineering
- G06F8/30—Creation or generation of source code
- G06F8/35—Creation or generation of source code model driven
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F9/00—Arrangements for program control, e.g. control units
- G06F9/06—Arrangements for program control, e.g. control units using stored programs, i.e. using an internal store of processing equipment to receive or retain programs
- G06F9/44—Arrangements for executing specific programs
- G06F9/451—Execution arrangements for user interfaces
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F2221/00—Indexing scheme relating to security arrangements for protecting computers, components thereof, programs or data against unauthorised activity
- G06F2221/21—Indexing scheme relating to G06F21/00 and subgroups addressing additional information or applications relating to security arrangements for protecting computers, components thereof, programs or data against unauthorised activity
- G06F2221/2119—Authenticating web pages, e.g. with suspicious links
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04L—TRANSMISSION OF DIGITAL INFORMATION, e.g. TELEGRAPHIC COMMUNICATION
- H04L63/00—Network architectures or network communication protocols for network security
- H04L63/10—Network architectures or network communication protocols for network security for controlling access to devices or network resources
- H04L63/102—Entity profiles
Definitions
- This document relates to systems and techniques for accessing file system information where such information is normally blocked, such as by a web browser application using JavaScript.
- This document describes systems and techniques that may be used to generate a three-dimensional experience for a user without the need i for special three-dimensional software.
- a user may be allowed to manipulate a model in space in a web browser without needing special software such as a Flash plug-in or the like.
- the user may be provided an convenient mechanism by which to decide where the files associated with such imaging are to be stored. Such mechanism may work within a web browser even where certain browser-based restrictions would otherwise prevent the interaction.
- such systems and technique may provide one or more advantages.
- a user may stay within the context of a web browser, where they are comfortable, but may be given advanced features relating to a core operating system.
- the user may be provided with a file manager-like interface from within a web browser, where such an interface would normally be blocked for such interaction.
- Other forms of interaction with an operating system, from a protected application such as a web browser may also be achieved.
- a computer-implemented data access method is disclosed.
- the method comprises executing a file manager application in a container application, wherein the file manager application does not have direct access to a computer file system, executing a native application that does have direct access to the computer file system, and communicating between the file manager application and the native application, and between the native application and the computer file system to simulate direct file system access by the file manager application.
- the file manager application comprises a web page and the container application comprises a commercially-available web browser.
- the method can also include generating a user interface with the file manager application, wherein the interface simulates a file directory dialog box.
- the interface can comprise file directory icons, and textual directory labels corresponding to directories in the computer file system.
- the file manager application can be executed using JavaScript acting on HTML and CSS mark up code.
- the method can also include receiving a selection of a directory, communicating a first identifier for the directory from the file manager application to the native application, determining with the native application a second identifier for the directory corresponding to the first identifier, and passing the second identifier to the file system along with a request for a list of one or more subdirectories under the directory.
- the method further comprises receiving at the native application first identifiers for the list of subdirectories, determining with the native application second identifiers for the list of subdirectories, and passing the second identifiers for the list of subdirectories to the file manager application.
- the method can also include displaying, with the file manager application, the list of subdirectories visually under the directory, and changing an icon associated with the directory from a closed status to an open status.
- the method can comprise repeatedly communicating between the file manager application and the native application, and between the native application and the file system, in response to user selections with respect to file directories.
- the method can also comprise causing one or more files corresponding to the file manager application to be saved in a directory on the file system selected via the file manager application.
- a computer-implemented file access system comprises a file storage system provided by an computer operating system, a contained application for operating in a standard web browser and displaying a file manager interface, and a native application programmed to receive file-related requests from the contained application, to translate the requests, and to submit corresponding requests to the file storage system.
- the contained application can be programmed to generate a user interface that simulates a file manager user interface, for interaction with a user in performing actions for saving files by the native application.
- the user interface can comprise file directory icons, and textual directory labels corresponding to directories in the file storage system.
- the contained application can be programmed to receive a selection of a directory and communicate a first identifier for the directory to the native application, and the native application is programmed to transform the first identifier into a second identifier for passing to the file storage system to interact with the directory in a manner specified by a user of the contained application.
- the native application is programmed to receive a communication from the file storage system and to transform the communication into a different communication for the contained application, so as to cause the contained application to display information about directories in the file storage system.
- a file access system in another implementation, includes a file storage system provided by an computer operating system, a web browser operating on a computer corresponding to the file storage system, and means for managing interactions between an application running in the web browser and the file storage system.
- FIG. 1 is a conceptual diagram of a process for capturing a 3-D model for display as a series of 2-D images.
- FIG. 2 is a block diagram of an illustrative image capture system.
- FIG. 3 is a flow chart of an example process for capturing images of a 3-D model.
- FIG. 4 is a swim lane diagram showing a process for displaying a 3-D model using a progression of 2-D images.
- FIG. 5 is a flow chart of an example process for capturing images of a 3-D model and saving the images using a conduit application.
- FIG. 6 is a swim lane diagram showing a process for generating and displaying a 3-D model using a progression of 2-D images with the help of a conduit application.
- FIG. 7 shows a mobile device displaying a 3-D model using 2-D images.
- FIGs. 8A-8F show screen shots of a process for capturing and using 2-D images of a 3-D model.
- FIGs. 8G-8J show screen shots of dialog boxes for managing image capture of a model.
- FIG. 9 shows an example of a computer device and a mobile computer device that can be used to implement the techniques described here.
- This section describes various systems and techniques for generating representations of 3-D models, where the representations can be displayed in a manner very much like a display of the model itself, but without the computational overhead associated with manipulating a true 3-D model.
- a plug-in for a 3-D CADD system or similar application causes the system to orbit a model while capturing images of the model, so as to create multiple images from roughly evenly- spaced vantage points around the model.
- the plug-in can then automatically generate mark up code that permits easy manipulation of the 2-D images from a web browser, so that the images can be displayed in order to provide the effect of a 3-D object that is being spun around by a user in real time.
- the plug-in may operate, in certain circumstances, by opening a browser window that an operator may use in setting parameters for creating images of the model.
- the operator may select a folder or other location into which files associated with the imaging process are to be placed, so that they may be accessed later for viewing.
- Such an approach is not trivial because generally, a web page does not have access to a file system on a computer, or the access depends on the type of computer on which the page is being displayed.
- the web page code such as JavaScript code, may communicate with a native application that is loaded on the computer system and serves as a conduit for the web page program.
- the web page code may cause the native application to interact with a file management system on the computer, so that the web page code may have access, indirectly, to files on the computer.
- FIG. 1 is a conceptual diagram of a process 100 for capturing a 3- D model for display as a series of 2-D images.
- a model 102 of an automobile here a Lamborghini
- the model will be understood to be a 3-D model that may be rendered in a CADD system and may be viewed from a variety of angles.
- a number of cameras 104 are shown around the model to depict the generation of images of the model from various angles.
- the cameras 104 are positioned at roughly equal divisions around the perimeter of the model 102, and at a distance such that the entire model will be imaged in any virtual photo taken of the model 102 by the cameras 104.
- the height of the cameras relative to the model can be set or can be selected by the user - also, different cameras 104 around the model 102 can be at different heights from each other.
- the number of cameras 104 may be selected, such as by a user, to provide a number of two-dimensional images of the 3-D model 102 such that flipping from one image to the next will provide a relatively smooth rendering of the model.
- a user may selectively cycle through images taken by adjacent cameras in a progressive manner, to create a virtual animation of the model.
- the model is placed against a white or invisible background for the imaging, such flipping from image to image will make it appear to a viewer like the model is rotating freely in space.
- the visual effects for the viewer is somewhat like that provided by old flip-books or by the popular movie The Matrix, except with the model appearing to rotate in space, rather than the camera appearing to move about the model.
- a webpage 106 is shown conceptually below the model 102.
- the webpage 106 is shown to represent the manner that the images of the model 102 may be displayed to a user of a web browser after the imaging operation has occurred.
- the webpage 106 includes a display area 108 where images of the model 102 may be displayed to a viewer of the web browser. Other adjacent images, such as image 110, are shown in the figure next to image 108. In actuality, the other images would not be viewable to a user when image 108 is being displayed. Rather, the other images are shown conceptually here in the form of a filmstrip to indicate that, when a user manipulates controls below image 108, the other images will be displayed in order. As a result of such progressive display of the images, the user may generate the visual effect of rotating the model in space within the area shown for image 108, simply by causing the various adjacent images to be displayed in an appropriate order. In certain examples, the user may flip back and forth quickly between the images, with the result being that the object appears to be grasped and rotated in front of the user. In reality, however, the user will simply be viewing the individual images in sequence in a common area on their browser.
- FIG. 2 is a block diagram of an illustrative image capture system 200.
- the system 200 generally includes a number of components in a computer system that are adapted to generate a collection of files, including images of a 3-D model and code for generating views of those images, and for running the code and displaying the images.
- the various components may reside on one or more computers and may be managed by different entities. For example, programs for generating images and code for viewing the images may be operated by a first entity, while programs for running the code and viewing the images may be operated by a different entity.
- the system 200 includes an imaging computer 202 that includes, for example, a 3-D modeler 208.
- the 3-D modeler 208 may comprise any of a variety of computer-aided design programs that permit the construction of 3-D objects and the viewing of such objects.
- the 3-D modeler 208 may include functionality to generate images of models rendered by the system. Such functionality may commonly include an interface that permits a user to position a viewpoint and an angle of view for a virtual camera, and may also permit the definition of a field of view, such as by selecting a virtual lens for the camera.
- Control of such a virtual camera and generation of 2-D images of the 3-D model may occur with a 2-D renderer 206.
- the 2-D renderer 206 may create a standard image file, such as a JPEG file, in response to commands to provide an image of a model from a particular point at a particular angle.
- the 2-D renderer 206 may also accept commands, such as commands received through an application programming interface (API).
- API application programming interface
- another program may operate according to the API to control the positioning of a virtual camera by the 3-D modeler 208, and the generation of images by the 2-D renderer 206.
- Models for the 3-D modeler 208 may be stored in a models database 210.
- the database 210 may take a variety of forms, and may store each model in a separate file.
- Various models may be combined into one common model, such as by providing each model with a particular base point, and opening multiple models into a single model space. When such multiple models are opened near each other, imaging of the multiple models may occur using 2-D renderer 206.
- Database 210 may be implemented, for example, like the model warehouse component of GOOGLE SKETCHUP.
- An image generation module 204 may operate, such as through an API as described above, to cause automatic rendering of images by the 2-D renderer 206 through the 3-D modeler 208.
- the image generation module 204 may be programmed, for example, to interact with a user or an application in identifying locations around a model for placing a virtual camera, and a number of different images that are to be captured of the model.
- the image generation module 204 may be a native program that has been installed on the computer 202, and that runs separately of other programs on the computer 202. In one example, the image generation module may be written in a language such as Ruby. [0035] The image generation module 204 may, in one implementation, cause a dialog box to be generated for interacting with the user.
- the dialog box may take a variety of forms, and in one example, may take the form of a borderless web browser 212.
- the web browser 212 may operate in a familiar manner as one of a number of common browsers, such as the MICROSOFT INTERNET EXPLORER, the FOXFIRE browser, or the APPLE SAFARI browser. In appropriate circumstances, the browser may operate according to the techniques described in this document, without the need for additional plug-ins or other components.
- Pages within the web browser 212 may have difficulty accessing data on the computer 203 because of security restrictions that are part of the Web browser.
- a file system interpreter 213 may be provided on the computer 202.
- the file system interpreter 213 is part of or associated with the image generation module 204, and may be part of a native application, such as an application written in Ruby, running on the computer 202.
- the file system interpreter 213 is configured to communicate with a program running on the web browser 212, such as JavaScript code running on the web browser 212.
- the JavaScript and Ruby programs may communicate according to a prearranged communication protocol. Using such a protocol, the JavaScript running on the web browser 212 may make requests of the file system interpreter 213 that may be interpreted by the file system interpreter 213.
- the JavaScript code or other similar code running on the web browser 212 may request information about files on computer 202. Such a request may include a request to determine the folder structure on the computer 202.
- the file system interpreter 213 may respond to such requests by making a standard operating system request for data for a file system dialog box.
- the file system interpreter 213 may parse such data to determine a file structure on the computer 202, and may return such information to the application running on the web browser 212. For example, the file system interpreter 213 may pass a list of folders in a particular directory to the application running on the web browser 212.
- the application running on the web browser 212 may take such information and display it in a manner that appears to a user as if an actual file system has been accessed by the program running on the web browser 212.
- the program may generate a borderless webpage that has the appearance of a file dialog box, and may access a number of stored images to show icons such as folders and other similar organization for a file system.
- the program may also display, with the icons, textual description of the folders, so that a user is presented with a webpage that looks like a file system dialog box.
- user interaction with the webpage may include commands from the user, such as requests to save files in a particular folder, requests to create a new folder, or requests to move up and down in a folder hierarchy.
- requests may be interpreted by the program running on the Web browser 212 and passed to the file system interpreter 213 according to an agreed-upon protocol.
- the file system interpreter 213 may translate such requests and in turn make certain calls to a file system on an operating system for the computer 202. For example, the file system interpreter 213 may drill down in a set of folders in response to a user selection, and may pass back to the program running on the web browser 212 a new list of subfolders or other appropriate information.
- the program running on the web browser 212 may make a request to the file system interpreter 213, which may in turn access information stored on computer 202.
- the file system interpreter 213 may then analyze such returned information and pass it back to the program running on the web browser 212 in a manner that can be used by such program.
- the file system interpreter 213 ultimately provides to the program running on web browser 212 a view of data in a web data store 214.
- the web data store 214 may include a number of Internet-based files, such as HTML files, image files, stylesheet files, and other similar files.
- the file system interpreter 213 may, in response to user commands, cause certain files generated by the 2-D renderer 206 to be saved in a particular folder in the web data store 214.
- the web data store 214 may include, in particular, a portion of a standard disk or flash storage structure on computer 202. Such storage and the operation of the programs described here may, of course, be spread across multiple computers and/or storage devices.
- the file system interpreter 213 may generally be a native application running on the computer 202, so that it has access to the full range of services from the computer's operating system, including file management services and dialogues. In this manner, the file system interpreter 213 may permit the program running on the web browser 212 to access files on computer 202 where it would otherwise not be able to access them.
- the system 200 may generate a variety of outputs in response to user interaction with the system 200.
- the web browser 212 may display a variety of webpages 216a, such as dialog boxes needed for interacting with a user in capturing and saving images of a 3-D model.
- the webpages 216a may include a webpage for displaying and interacting with the images.
- the web browser 212 may also display various animations, such as interactive animations that flip from image to image, as discussed above with respect to fig one, or other such moving and interactive features for a user of a webpage.
- the computer 202 may generate a number of files for permitting interaction with a plurality of images that simulate a three-dimensional model.
- HTML files 218a may be generated automatically, such as files to present a webpage that shows the images to a user and allows the user to interact with the images so as to display various different images after each other in order to create an experience similar to full interaction with a 3-D model.
- the computer 202 may generate a plurality of image files, such as JPEG, GIF, TIFF, and other similar file format image files.
- the computer 202 may also generate cascading style sheet (CSS) files 218c that may additionally define the particular layout and look of web pages to be generated by the system 200.
- CSS cascading style sheet
- the computer 202 may generate JavaScript code 218d and may otherwise use such JavaScript code 218d.
- JavaScript code 218d may be used to generate dialog boxes for capturing 2-D images, and may also be used to display such images later on a webpage that permits interaction with the images by a user.
- FIG. 3 is a flow chart of an example process 300 for capturing images of a 3-D model.
- the process 300 involves identifying a 3- D model, capturing a plurality of 2-D images by circumventing the model with a virtual imaging apparatus, generating code for later reviewing such images in a convenient and interactive manner, and later running such code and receiving interactions by the user.
- the process 300 first receives a selection of a model to image.
- a user may initially open a model in a CAD program and may then select a control, such as an icon, within the program to begin a process of imaging the model.
- the control selected by the user may, for example, represent a plug-in provided with the CAD program for such imaging of models.
- the process 300 identifies imaging locations associated with the model.
- the locations may be at points along a circle, oval, or other geometric shape that circumscribes a path around the object.
- the location of each view relative to the next view may be provided by a user specifying an angle - e.g., if the user specifies ten degrees, each view will be ten degrees apart and there will be thirty-six images. Alternatively, the user may specify the number of images.
- the imaging locations need not be evenly spaced, however. In one example, the user may manually drag and drop the imaging locations into place, such as by starting with evenly-spaced icons of cameras that are placed automatically around the model, and then adjusting those icons. The user may generate previews of the resulting animation around the model (in a manner like that discussed below) and may then adjust the camera icons until they achieve an effect that they desire.
- the particular locations for the imaging may be computed, in some circumstances, by computing the smallest X, Y, and Z point in the model, and the largest such point.
- a virtual sphere that contains the two points may be generated and may be considered to bound the model.
- a separate circle or other path may then be selected that is sufficiently far outside the sphere, given the parameters of a virtual camera provided with the program (e.g., position and field of view), that the camera, when aimed inward toward the sphere, may capture all of the sphere within its field of view.
- the actual path for the camera may take on a variety of forms. In a simple example, the path may be a circle or oval with the camera at a single height relative to the model.
- the path may be sinusoidal, and thus vary in multiple dimensions, such that as the path moves around a model, the camera also moves up and down.
- a circular and sinusoidal path may provide alternating views near the top and bottom of the model.
- such a path may permit images of an automobile to show both the roof and the underbelly of the automobile where appropriate.
- the path that circumscribes the model may take the form of a sphere with positions for the virtual camera selected at approximately equal distances around the sphere. Using such a path, or collection of points, may enable a user to interact with the images so as to spin the model, or a least appear to spin the model, around multiple axes.
- the user may also specify the size of the images to be output. Such size may be specified, for instance as a number of pixels in the X and Y dimensions. Such scaling may be particularly convenient where the images are to be incorporated into a web page, where many elements are expressed in terms of pixel dimensions.
- the process 300 begins a repeated process of locating the camera at a particular point in the circumscribing path, and generating a 2-D image, as shown at box 308. Such activity may occur automatically using a particular CAD package, as controlled through API imports from another application, such as the image generation module 204 of FIG. 2. As each image is acquired, the process 300 may perform particular functions on the image. For example, background items may be eliminated from the image, as may phantom lines or other lines such as axes from the modeling program.
- certain styles may be referenced for the imaging process.
- users may set up preferring lighting scenarios for their models, such as by locating lighting sources in 3-D space and specifying the parameters (e.g., color and intensity) for the lighting sources.
- a user may also specify textures and materials for the model or for other items in an image.
- the positions along a circumscribing path may, in most circumstances, be equally spaced in a circle or oval. But other arrangements may also be used.
- images may be analyzed from a variety of positions around a model, such as on a sphere around the model, and a degree of difference between the various images may be computed.
- degree of difference may be performed using a variety of known techniques, such as by comparing distances between common pixels in different images and the degree of change in various pixels in the images.
- Positions about the model may then be selected automatically so as to provide images that differ from each other in substantially equal visual amounts.
- the imaging locations may be closer near an area of a model that contains significant detail, but may be farther apart on a less detailed portion of the model. In this manner, positions may be selected that provide a smoother experience for a user who later reviews such images, such as in a manner described below.
- the images may also be taken of a real object.
- a person wishing to list their automobile as part of an on line auction may take a plurality of digital photographs of the automobile at a common height (their eye level) at common spacing (e.g., taking two side steps between each shot) around the automobile. They may then save the images to a single folder, and applications like those discussed here may identify the image files, arrange them numerically by title (if the camera named the images sequentially), and generate the code needed to review the automobile with a 3-D effect as discussed next.
- the method 300 may generate and save code to support the images, at box 310.
- code may take the form, for example, of HTML and CSS code that points to the various images, for displaying the images in an appropriate progression and order.
- the code may generate a control for scanning forward and backward through the images, and may sequentially call up each image for display as the control is manipulated by a user.
- the particular code may be generated from a template into which is added data for the particular images that are to be viewed. For example, from one instantiation to the next, the names of the particular figures and the number of figures may change but other aspects of the code may remain the same.
- the template may be written to operate on an array of images, and the code generation process may simply add the particular file names to the array.
- the code may also stay as template code, and the parameters for particular images may be referenced by the code, such as by referencing data files for the imaging of the model from JavaScript code or the like.
- a second phase of the process i.e., viewing of the images in a manner that makes them look like they are still part of a 3-D model, begins. In this example, such viewing may occur by pointing a browser to the code generated in box 310. Such an action may occur by the process 300 causing a browser to be launched and pointed at such code.
- Launching of the browser pointed at the code may cause the browser to execute the code, which may in turn cause the generation of controls for viewing the images of the 3-D model, and may initially display a base image, at box 314.
- the base image may be any of the generated images, but may typically be a first image of the model that was taken in the process 300, such as a front view of the model.
- FIG. 4 is a swim lane diagram showing a process for displaying a 3-D model using a progression of 2-D images. In general, this process 400 is similar to the process 300 shown in FIG.
- the components include a modeling application, which may be a native application on a computer that is configured to cause 2-D images to be generated that are representative of a 3-D model.
- a modeling application which may be a native application on a computer that is configured to cause 2-D images to be generated that are representative of a 3-D model.
- Another component is a CAD program, which may be a general commercial design program made to permit the generation of 3-D models, and the imaging of such models, in convenient manners.
- a third component is a standard web browser, which in this example need not be provided with particular plug-ins such as VRML or FLASH plug-ins.
- the process begins at box 402, where the modeling application receives an imaging command and requests a model name.
- the CAD program may, at that time, already be displaying a model in front of the user.
- Such a command may come from a user selection of an icon that is presented as part of the CAD program, where the modeling application operates as a plug-in for the CAD program.
- the CAD program returns a name of the model, so that the modeling application may use such a name as a default name for the collection of files, such as images, that are to be generated in association with the model.
- the CAD program may pass a string identifying a default folder into which files associated with the model are to be stored.
- the modeling application may cause a dialog box to be displayed, such as by generating a webpage over the display of the CAD program.
- the dialog box may permit a user of a system to identify a location for storing files that is different from a default location, and also input parameters for camera locations in generating images of the model. For example, the user may select between a path that circumscribes the model horizontally or vertical, may select a shape for the path, and may also select a number of images to be captured along the path. Alternatively, the user may select to have images acquired from all directions pointing inward toward the model from a sphere.
- the modeling application may then interact with the CAD program to compute camera parameters, such as the base locations for the camera in the model space and the direction of the camera for each shot.
- the modeling application then steps through the location information for each imaging location and causes the CAD program to generate a 2-D image of the model from the particular location, and to save the image (e.g., as a JPEG file) to the folder or directory selected by the user.
- the image names may be determined by the program, such as by providing them with the model name as a prefix, and a sequential index number as a suffix, e.g., card .jpg, carO2.jpg, carO3.jpg, etc.
- the modeling application causes various files that support the images to be generated.
- HTML code is generated, where the code causes the display of a webpage that fetches the individual 2-D images in progression, in response to interaction from a user, and causes the images to be presented so as to provide the impression that the actual model is being manipulated.
- Other such files may also be generated, such as CSS and JavaScript files. Those files may also be saved to the folder or directory selected by the user.
- the user or another user may be readily directed to the figures by the modeling application sending a URL of the generated HTML code (box 414). Such transmission may occur in a variety of manners (box 416), including by redirecting a web browser to the URL so that the code is executed by the web browser, and an initial image from the images is displayed (box 418).
- FIG. 5 is a flow chart of an example process 500 for capturing images of a 3-D model and saving the images using a conduit application.
- This process bears similarities to those described above, but focuses more on the interaction of a non-native application that does not have direct access to certain operating system services, and a native application that does have such access and that serves as a conduit to such services for the non-native application.
- the process involves interacting with a user via a program, such as a program running on a webpage (e.g., in JavaScript), that does not have open access to a file system because of restrictions placed on the program by the application in which it is operating.
- the program achieves such access by communicating with a second application outside the first application, that is installed on the computer and can run independently and interact directly with the operating system, and thus may be considered a native application.
- Such a process may take place, for example, in receiving user input regarding a location to save certain files, by building a file manager dialog box that resembles an actual box, as described in examples above and below.
- the process 500 here is described from the standpoint of the program running on the web page that generates an interface for a user.
- a user interface is initially displayed.
- the interface may be placed over an application such as a CAD application and may permit a user to specify locations for saving images of the CAD application.
- the interface may include various elements for interacting with a file system on the computer on which the interface is displayed.
- the interface may be formed as a borderless webpage that simulates the look of a file system dialog box.
- the dialog box may include, for example, an area for entering a file name, and a larger area showing a hierarchical folder structure for a computer storage system.
- the initial display of the interface may lack particular information about the file system, as in this example, or communications with another program may initially occur to produce a starting display of file system information. For example, the identify of a default folder may be stored, and the process may access data defining the default folder so that it is initially displayed. Alternatively, a root folder for a particular storage drive may be displayed. Such display of default folders may require communication between the program generating the interface and a native application on the computer, as described below.
- a file-related command is received. For example, a user may choose to save a file, to display file or folder-related information in the dialog box, to open a file, to create a new folder in a file system, to delete a folder, or to perform other similar functions in the system.
- a native application is opened. This application is separately stored on the system and may access the operating system features directly, and thus may serve as a conduit for the initial application that opened the interface, in accessing the operating system file system. The opening of the native application may occur in a variety of manners, such as by the program that generated the user interface making a call for such a native application.
- a request is made for a list of directories from the native application.
- the program that generated the interface may need to display a number of directories in response to a request from a user. That program may thus identify directory-related information and pass it in a determined manner, such as by an application programming interface (API), to the native application.
- the native application may in turn be programmed to receive, recognize, and interpret such requests.
- the native application may parse a message received from the program that generated the interface, and create its own request formatted in an appropriate manner for a file system associated with an operating system on the computer.
- the request from the program that generated the user interface may be an asynchronous request, such as a request using AJAX methods, so that such program may continue operating while waiting for information to return from the native application.
- the program receives a list of directories or folders from the native application and displays the list.
- the list of directories may have been created by the native application by formatting a request to a file managing component of an operating system and receiving a response to that request.
- the native application may then have extracted information from the response and reformatted that information for transmission to the program that generated the user interface.
- the native application may send a list of strings formatted in a particular manner, where the strings represent folder names or subdirectory names in a particular directory.
- the program may display a list of such folders. To do so, the program may access image files that show icons representative of folders in an operating system, and may display those icons in a list with the textual information about the folders received from the native application. Such display may occur in a box on the user interface that corresponds to a typical folder or directory display area in a file manager interface. As a result, the user may be presented with a display that makes it look like the original program is actually accessing file management features of the operating system directly, rather than indirectly. Such an example display is shown in FIG. 8B. [0070] At box 512, a user command is received.
- the user command may be a click by the user on a particular folder icon in the displayed list, indicating that the user would like to see the subfolders underneath the selected folder.
- the program generating the interface may interpret such a selection, and provide data to the native application according to the API, to indicate that the native application should gather from the operating system a list of subfolders (box 514).
- the native application may thus in turn send to the operating system a request for a subfolders list or other data indicating the identity of the sub-folders. Such a request may occur while the program that generated the interface continues with other operations while waiting for a response (i.e., asynchronous operation).
- the native application may receive information from the operating system, may reformat the information appropriately, and may pass the new information to the program that generated the interface. That program may then update the strings and folder icons shown in the display so as to make it look to the user like they actually drilled down in the directory structure (box 516). Such updating may occur, for example, by editing a DOM tree associated with the display in a familiar manner.
- the file access process may take on, in one example, four different states. In a first state, the target directory is unselected and closed. Clicking on it selects it (e.g., by highlighting it and updating its title bar) and opens it. JavaScript code or other such code then makes a call to a native application, such as a Ruby application, for the sub-directories, and the native application reports back in an asynchronous manner the children or an error (e.g., the directory was not found). The JavaScript then modifies the HTML DOM to show the directory as selected, the icon for the directory as an open folder, and the subdirectories slightly indented from the directory, with closed icons. The selected directory label may also be changed in response to the selection.
- a native application such as a Ruby application
- the target directory was unselected and open (rather than closed). Clicking on the directory highlights the directory in the interface and updates the label that indicates which directory is selected.
- the target directory was selected and closed. Clicking on the directory causes the JavaScript to issue a request to the native application for the sub-directories, and the JavaScript receives the results in an asynchronous fashion and presents the sub-directories as sub- nodes of the directory (slightly indented and with closed folder icons). The JavaScript also swaps in an open folder icon for the selected directory.
- the target directory was selected and open.
- Clicking on the directory causes the JavaScript to edit the DOM to show the directory as closed (but still selected) and hides the sub-directories. If the user clicks on an "OK" button in the dialog, the selected directory is passed to the calling application and the dialog closes.
- the user may select a control to create a new directory, much like they would in a normal file management dialog. Such a selection will bring up another dialog box, which will shadow out the original dialog box.
- the user can enter a new directory name for the subdirectory, which name the JavaScript will pass to the native application, which will in turn cause that sub-directory to be created and pass an indicator of success of the operation back to the program in an asynchronous fashion.
- the JavaScript may respond to the message of success by adding a new subdirectory indicator to the DOM, and by opening it as the selected subdirectory.
- FIG. 6 is a swim lane diagram showing a process 600 for generating and displaying a 3-D model using a progression of 2-D images with the help of a conduit application.
- the process 600 is similar to the process 500 in FIG. 5, but shows other operations and additional detail, in addition to showing particular components that, in this example, may be used to perform certain actions in the process.
- These components include an imaging application that is responsible for interacting with the user in capturing images from a CAD program, where in this example, the imaging application is written at least in part using JavaScript.
- the components also include a file system that the other components access to obtain stored information and save additional information.
- the components include a conduit application, written here in Ruby, that is an application separate from whatever application the imaging application is running in, and that communicates directly with operating system components so as to be able to serve as a conduit for the imaging application.
- the model selection is initially received in a CAD program.
- a selection may take a familiar form, such as by a user selecting a data file "open” icon and selecting a file from a list of multiple files.
- the selection may also occur in the manner known for the GOOGLE SKETCHUP 3-D warehouse.
- the file system responds by serving model data to the CAD program (604), and the CAD program displays the model, at box 606, in a typical manner.
- the CAD program may be provided with a plug-in program that corresponds to the imaging application, and an icon for the program may be shown on the display of the CAD program. Selection of the icon by a user may launch the imaging application, which may be programmed to capture a plurality of sequential images of the model in the CAD program and save the images and generated markup code in a manner that a webpage may display the images to evoke an impression that the viewer is actually manipulating the model, and not just a series of images.
- the CAD program may cause the imaging application to be launched (box 608). Upon opening, at box 610, the imaging application may display an imaging window.
- the window may be, for example, a borderless browser window that is formatted to resemble a file access dialog box (see, e.g., FIG. 8A).
- the dialog box may initially show several default values such as a name to be associated with the images that matches a name of the model obtained from the CAD program, a number of images to obtain of the model, and a location for saving image-based files.
- the process receives various inputs for such values, and also receives a request from a user to see the file structure on the computer system on which the imaging application and conduit application are running, and on which the file system is operating.
- the imaging application in response to the user requests, sends a request to the conduit application, which the user may have previously installed on the computer for the purpose of allowing the imaging application to indirectly interact with the file system.
- the conduit application Upon receiving the request, the conduit application translates the request and sends the corresponding request to the file system to check a file structure (box 614), such as to obtain a list of file folders in a root directory for the file system.
- the file system returns the file structure in a familiar format for the particular operating system, to the conduit application.
- the conduit application then, at box 616, generates code for modifying the DOM to reflect an update in the interface that shows the file structure obtained from the file system.
- the imaging application updates the display. Alternatively, the imaging application, rather than the conduit application, may generate the appropriate code for modifying the DOM.
- a user may then be presented with a dialog box that shows a number of subdirectories that may be selected, and at box 622, the user selects a subdirectory and thus requests to see the file structure within that subdirectory.
- the imaging application sends a request to the conduit application
- the conduit application translates the request and checks the file structure from the file system (box 624)
- the file system returns the file structure (box 626)
- the conduit application (alone or in cooperation with the imaging application) again generates code for modifying the DOM structure of the display so as to reflect the change in the directories, e.g., to switch an icon of a selected directory from a closed image to an open image, and to add a list of sub-directories (with closed folder images) indented from the main directory (box 628).
- the user may then, by clicking on a particular control, select the particular directory for saving files, thus causing the path for the folder to be saved and the file dialog box to disappear.
- the user may provide a selection on the next display, which may be another dialog box by which the user may establish certain parameters for imaging of a model (box 630).
- the user may provide information about a camera to view the model, such as a number of images for the camera to create.
- the imaging application may pass such data to the conduit application, in certain implementations, which may then control creation of images by the CAD program (box 634) by interacting back-and-forth with the CAD program to control the positioning of the camera relative to the model (box 636).
- the CAD program may save the images in the file system (box 638), and may obtain information about the subdirectory in which to save the files from the conduit application.
- the conduit application may generate code to allow a user to view the images in a convenient manner.
- the conduit application generates HTML code for a webpage to display the images in a seamless manner as the user manipulates the images so as to create the impression of rotating the model in space.
- the code may be generated from a template, where the template defines certain control elements and display elements, and particular values, such as the number of images and the names of the image files, may be added during creation of the code.
- the conduit application may then pass a URL for the code to the imaging application (box 642) or to another appropriate browser-based application or other application.
- the URL causes the browser to be directed to the code, to load the code, to execute the code, and to thereby generate a visual display for the user of one of the images along with controls for manipulating the image.
- the user chooses to rotate the image so as to be able to see various sides of the model represented by the images, and such images are fetched from the file system (box 648).
- FIG. 7 shows a mobile device displaying a 3-D model using 2-D images.
- the mobile device is intended to represent a device that has not had particular three-dimensional imaging plug-ins added to it or other generic 3-D imaging provided for it.
- the device may have such capabilities but may be displaying a webpage whose author was not confident that many consumers would have such capabilities, and thus did not code such capabilities into the page.
- Shown on the display 710 of device 700 is an image of a 3-D model of an automobile from a particular angle.
- the device 700 may have a touchscreen, and the HTML code for generating the display 710 may respond to lateral dragging motions across the touchscreen in the area of the display 720, by fetching progressive adjacent images that were generated from the model of the automobile. Scanning through the images may also be controlled by a trackball located at the middle-right of the device.
- FIGs. 8A-8F show screen shots of a process for capturing and using 2-D images of a 3-D model.
- the figures show, in one particular example, a user initially capturing images of a model, and then manipulating those images to achieve a 3-D-like experience using 2-D images.
- FIG. 8A shows a display 800 of a design or CAD application 802 - here, the GOOGLE SKETCHUP application - with an imaging dialog 804 overlaid on the application.
- the program for generating the overlay has been invoked by a plug-in for the application, where the plug-in generates an user-selectable icon 806.
- the user has just selected the icon, causing the dialog 804 to be generated over the application.
- the dialog is generated as a borderless web page that has display content formatted to look like a dialog box that would be generated by a typical application.
- the dialog box 804 presents the user with instructions and the ability to enter three different parameters for the imaging process.
- a default name for the imaging is automatically entered in a name box 808, and the user can change that name.
- the name selected by the user may affect the name that is given to image files and to information that is later displayed on an automatically generated web page for displaying the images.
- An imaging parameter input box 812 allows the user, in this example, to select a number of images to be taken of the model. A higher number of images will permit for smoother manipulation of the object in the future, but will take up more space for storing the additional images.
- thirty-six images are to be generated, at ten degree intervals around the model.
- a user may be provided with alternative or additional imaging choices.
- the user may be allowed to select an axis around which the virtual camera will rotate in creating images of the model.
- the user may also identify a path or path shape (e.g., circle, oval, etc.) for the camera.
- a path or path shape e.g., circle, oval, etc.
- the model will appear to move toward the user and away from the user when they manipulate the images of the model to rotate the model in space.
- the user may be given an option to acquire images from points on a sphere or other 3-D object around the model.
- Example JavaScript code for generating the dialog shown in FIG. 8A is attached hereto in Appendix D. Common functions accessed by that code are attached hereto in Appendix E.
- FIG. 8B shows the application 802 of FIG. 8A with a file manager 814 generated in a light box over the dialog box 804.
- the file manager shows a default directory path and provides a number of controls that let a user select a displayed directory or subdirectory, to create a new directory, to cancel the operation, or to confirm the operation (with the "OK" button) and thus set the currently-selected directory as the directory into which files will be saved.
- the display of FIG. 8B may be called up by a user selecting the "Change" button in FIG. 8A.
- Example JavaScript code for generating the dialog shown in FIG. 8B is attached hereto in Appendices A and G.
- Example CSS code for the dialog is attached in Appendices B and H.
- Example HTML code is attached in Appendix I.
- FIG. 8C shows the dialog box 804 after a user has selected a folder into which files are to be saved and has also selected a number of images to capture of the model.
- the dialog 804 may show each image as it is captured and saved. When the captures are complete, a message to that effect may be shown to the viewer.
- Example JavaScript code for causing the images to be captured is attached hereto in Appendix D.
- FIG. 8D is simply a file manager view of the files that were saved by the process depicted in FIG. 8C.
- the files were stored in the c: ⁇ program files ⁇ Google ⁇ Google SketchUp 6 ⁇ Plugins ⁇ orbitalimages ⁇ l_amborghini sub-directory.
- the files include thirty-six image files of the car model (labeled "imageOO.jpg” to "image.35.jpg”), and an HTML file named "index.html.” The content of the HTML file is discussed next.
- FIGs. 8E and 8F show displays of the web page created by the process just discussed, where each figure shows one of the images that has been captured.
- a control in the form of a two-headed arrow can also be seen near on top of each image. That control appears when a user hovers their pointer over the images. If the user then down clicks and drags left or
- HTML template code for generating the dialog is attached in hereto in Appendix F.
- the HTML code for displaying FIGs. 8E and 8F (which may be formed from the template code) may take, in one example, the following form:
- FIGs. 8G-8J show screen shots of dialog boxes for managing image capture of a model. These screenshots are similar to those just discussed, but show alternative mechanisms for interacting with a user of such a system.
- FIG. 8G shows a dialog box like that shown in FIG. 8A.
- the dialog box shows an example first image of a model being imaged, and permits a user to enter three parameters associated with such imaging.
- the first parameter is the number of degrees between each image
- the third is a folder in which the images and other associated files are to be placed, with a button control that the user can select to change the folder.
- the system may initially show a default folder such as the common mydocuments folder for MICROSOFT WINDOWS computers, and the user may change to a different folder.
- FIG. 8H shows a dialog box by which a user is navigating a folder structure on an computer, and is this similar to FIG. 8B.
- the dialog box may be generated, as discussed above, in a web browser window made to look like a file manager dialog box, where the code generating the browser window communicates with a conduit application that gives it access to file system information.
- FIG. 8I shows a dialog box for exporting of files needed to review an animation that simulates a 3-D model.
- the dialog box shows one image of a model, and permits a user to place a cursor on the image and drag left and right to cause other images to be displayed in sequence. In such a manner, the user can seem to be pulling the model around so as to see it in a seeming 3-D state.
- FIG. 8J shows a dialog box for creating a new sub-directory for saving files relating to a model.
- a dialog box is shown over the dialog box of FIG. 8H, and may be generated when a user selects the "Create a New Directory" control of the dialog box in FIG. 8H.
- Such creation of a new directory may be simulated by the dialog box of FIG. 8J, and may be achieved in reality by the program that generates the dialog box as part of a web browser communicating with a conduit application, such as in the manners discussed above.
- FIG. 9 shows an example of a generic computer device 900 and a generic mobile computer device 950, which may be used with the techniques described here.
- Computing device 900 is intended to represent various forms of digital computers, such as laptops, desktops, workstations, personal digital assistants, servers, blade servers, mainframes, and other appropriate computers.
- Computing device 950 is intended to represent various forms of mobile devices, such as personal digital assistants, cellular telephones, smartphones, and other similar computing devices.
- the components shown here, their connections and relationships, and their functions, are meant to be exemplary only, and are not meant to limit implementations of the inventions described and/or claimed in this document.
- Computing device 900 includes a processor 902, memory 904, a storage device 906, a high-speed interface 908 connecting to memory 904 and high-speed expansion ports 910, and a low speed interface 912 connecting to low speed bus 914 and storage device 906.
- Each of the components 902, 904, 906, 908, 910, and 912 are interconnected using various busses, and may be mounted on a common motherboard or in other manners as appropriate.
- the processor 902 can process instructions for execution within the computing device 900, including instructions stored in the memory 904 or on the storage device 906 to display graphical information for a GUI on an external input/output device, such as display 916 coupled to high speed interface 908.
- multiple processors and/or multiple buses may be used, as appropriate, along with multiple memories and types of memory.
- multiple computing devices 900 may be connected, with each device providing portions of the necessary operations (e.g., as a server bank, a group of blade servers, or a multiprocessor system).
- the memory 904 stores information within the computing device 900.
- the memory 904 is a volatile memory unit or units.
- the memory 904 is a non-volatile memory unit or units.
- the memory 904 may also be another form of computer- readable medium, such as a magnetic or optical disk.
- the storage device 906 is capable of providing mass storage for the computing device 900.
- the storage device 906 may be or contain a computer-readable medium, such as a floppy disk device, a hard disk device, an optical disk device, or a tape device, a flash memory or other similar solid state memory device, or an array of devices, including devices in a storage area network or other configurations.
- a computer program product can be tangibly embodied in an information carrier.
- the computer program product may also contain instructions that, when executed, perform one or more methods, such as those described above.
- the information carrier is a computer- or machine-readable medium, such as the memory 904, the storage device 906, memory on processor 902, or a propagated signal.
- the high speed controller 908 manages bandwidth-intensive operations for the computing device 900, while the low speed controller 912 manages lower bandwidth-intensive operations.
- the high-speed controller 908 is coupled to memory 904, display 916 (e.g., through a graphics processor or accelerator), and to high-speed expansion ports 910, which may accept various expansion cards (not shown).
- low-speed controller 912 is coupled to storage device 906 and low-speed expansion port 914.
- the low-speed expansion port which may include various communication ports (e.g., USB, Bluetooth, Ethernet, wireless Ethernet) may be coupled to one or more input/output devices, such as a keyboard, a pointing device, a scanner, or a networking device such as a switch or router, e.g., through a network adapter.
- input/output devices such as a keyboard, a pointing device, a scanner, or a networking device such as a switch or router, e.g., through a network adapter.
- the computing device 900 may be implemented in a number of different forms, as shown in the figure. For example, it may be implemented as a standard server 920, or multiple times in a group of such servers. It may also be implemented as part of a rack server system 924. In addition, it may be implemented in a personal computer such as a laptop computer 922. Alternatively, components from computing device 900 may be combined with other components in a mobile device (not shown), such as device 950. Each of such devices may contain one or more of computing device 900, 950, and an entire system may be made up of multiple computing devices 900, 950 communicating with each other.
- Computing device 950 includes a processor 952, memory 964, an input/output device such as a display 954, a communication interface 966, and a transceiver 968, among other components.
- the device 950 may also be provided with a storage device, such as a microdrive or other device, to provide additional storage.
- a storage device such as a microdrive or other device, to provide additional storage.
- Each of the components 950, 952, 964, 954, 966, and 968 are interconnected using various buses, and several of the components may be mounted on a common motherboard or in other manners as appropriate.
- the processor 952 can execute instructions within the computing device 950, including instructions stored in the memory 964.
- the processor may be implemented as a chipset of chips that include separate and multiple analog and digital processors.
- the processor may provide, for example, for coordination of the other components of the device 950, such as control of user interfaces, applications run by device 950, and wireless communication by device 950.
- Processor 952 may communicate with a user through control interface 958 and display interface 956 coupled to a display 954.
- the display 954 may be, for example, a TFT LCD (Thin-Film-Transistor Liquid Crystal Display) or an OLED (Organic Light Emitting Diode) display, or other appropriate display technology.
- the display interface 956 may comprise appropriate circuitry for driving the display 954 to present graphical and other information to a user.
- the control interface 958 may receive commands from a user and convert them for submission to the processor 952.
- an external interface 962 may be provide in communication with processor 952, so as to enable near area communication of device 950 with other devices.
- External interface 962 may provide, for example, for wired communication in some implementations, or for wireless communication in other implementations, and multiple interfaces may also be used.
- the memory 964 stores information within the computing device 950.
- the memory 964 can be implemented as one or more of a computer- readable medium or media, a volatile memory unit or units, or a non-volatile memory unit or units.
- Expansion memory 974 may also be provided and connected to device 950 through expansion interface 972, which may include, for example, a SIMM (Single In Line Memory Module) card interface. Such expansion memory 974 may provide extra storage space for device 950, or may also store applications or other information for device 950.
- SIMM Single In Line Memory Module
- expansion memory 974 may include instructions to carry out or supplement the processes described above, and may include secure information also.
- expansion memory 974 may be provide as a security module for device 950, and may be programmed with instructions that permit secure use of device 950.
- secure applications may be provided via the SIMM cards, along with additional information, such as placing identifying information on the SIMM card in a non-hackable manner.
- the memory may include, for example, flash memory and/or NVRAM memory, as discussed below.
- a computer program product is tangibly embodied in an information carrier.
- the computer program product contains instructions that, when executed, perform one or more methods, such as those described above.
- the information carrier is a computer- or machine-readable medium, such as the memory 964, expansion memory 974, memory on processor 952, or a propagated signal that may be received, for example, over transceiver 968 or external interface 962.
- Device 950 may communicate wirelessly through communication interface 966, which may include digital signal processing circuitry where necessary. Communication interface 966 may provide for communications under various modes or protocols, such as GSM voice calls, SMS, EMS, or MMS messaging, CDMA, TDMA, PDC, WCDMA, CDMA2000, or GPRS, among others. Such communication may occur, for example, through radio- frequency transceiver 968. In addition, short-range communication may occur, such as using a Bluetooth, WiFi, or other such transceiver (not shown). In addition, GPS (Global Positioning System) receiver module 970 may provide additional navigation- and location-related wireless data to device 950, which may be used as appropriate by applications running on device 950.
- GPS Global Positioning System
- Device 950 may also communicate audibly using audio codec 960, which may receive spoken information from a user and convert it to usable digital information. Audio codec 960 may likewise generate audible sound for a user, such as through a speaker, e.g., in a handset of device 950. Such sound may include sound from voice telephone calls, may include recorded sound (e.g., voice messages, music files, etc.) and may also include sound generated by applications operating on device 950. [00117] The computing device 950 may be implemented in a number of different forms, as shown in the figure. For example, it may be implemented as a cellular telephone 980. It may also be implemented as part of a smartphone 982, personal digital assistant, or other similar mobile device.
- audio codec 960 may receive spoken information from a user and convert it to usable digital information. Audio codec 960 may likewise generate audible sound for a user, such as through a speaker, e.g., in a handset of device 950. Such sound may include sound from voice
- Various implementations of the systems and techniques described here can be realized in digital electronic circuitry, integrated circuitry, specially designed ASICs (application specific integrated circuits), computer hardware, firmware, software, and/or combinations thereof.
- ASICs application specific integrated circuits
- These various implementations can include implementation in one or more computer programs that are executable and/or interpretable on a programmable system including at least one programmable processor, which may be special or general purpose, coupled to receive data and instructions from, and to transmit data and instructions to, a storage system, at least one input device, and at least one output device.
- the systems and techniques described here can be implemented on a computer having a display device (e.g., a CRT (cathode ray tube) or LCD (liquid crystal display) monitor) for displaying information to the user and a keyboard and a pointing device (e.g., a mouse or a trackball) by which the user can provide input to the computer.
- a display device e.g., a CRT (cathode ray tube) or LCD (liquid crystal display) monitor
- a keyboard and a pointing device e.g., a mouse or a trackball
- Other kinds of devices can be used to provide for interaction with a user as well; for example, feedback provided to the user can be any form of sensory feedback (e.g., visual feedback, auditory feedback, or tactile feedback); and input from the user can be received in any form, including acoustic, speech, or tactile input.
- the systems and techniques described here can be implemented in a computing system that includes a back end component (e.g., as a data server), or that includes a middleware component (e.g., an application server), or that includes a front end component (e.g., a client computer having a graphical user interface or a Web browser through which a user can interact with an implementation of the systems and techniques described here), or any combination of such back end, middleware, or front end components.
- the components of the system can be interconnected by any form or medium of digital data communication (e.g., a communication network). Examples of communication networks include a local area network ("LAN”), a wide area network (“WAN”), and the Internet.
- the computing system can include clients and servers.
- a client and server are generally remote from each other and typically interact through a communication network.
- the relationship of client and server arises by virtue of computer programs running on the respective computers and having a client-server relationship to each other.
- client and server arises by virtue of computer programs running on the respective computers and having a client-server relationship to each other.
- client and server arises by virtue of computer programs running on the respective computers and having a client-server relationship to each other.
- client and server arises by virtue of computer programs running on the respective computers and having a client-server relationship to each other.
- TreeView holds directory listing in HTML using collapsable DIVs.
- TreeView .prototype . addArrayToDir function (pathName, dirList) ⁇ if (idirList
- ⁇ ele ele .parentNode; ⁇ if (this . setWorkingDirCallback) ⁇ this . setWorkingDirCallback (pathName) ; ⁇ ⁇ ;
- This plugin also creates a sample ⁇ BR>' +
- GetDirectoryDialog show (imageDirectory, handlePickDirectoryResults) ;
- NghtBox is a semi-transparent canvas we use to hide controls GetDirectoryDialog.
- lightBox createLightBox(root);
- dialog createGetDirectoryDialog(root);
- GetDirectoryDialog .treeView new TreeView(ele, GetDirectoryDialog. handleGetSubDirectory);
- handleGetSubDirectoryO makes a call to Ruby to get the
- #getDirectoryDialog ⁇ position: absolute; top: 5Opx; left: 25px; width: 418px; background-color: #FFFFFF; border: solid 2px #OOOOFF; z-index: 3; padding: 5px; ⁇
- #createDirectoryDialog ⁇ position: absolute; top: 20Opx; left: lOpx; width: 450px; height: 75px; background-color: #FFFFFF; border: solid 2px #0000FF; z-index: 5; padding: 5px; ⁇ #createDirectoryLabel ⁇ font-weight: normal; ⁇ #createDirectoryPathName ⁇ color: #0000FF; font-weight: bold; ⁇ #createDirectoryTextBox ⁇ color: #0000FF; font-weight: bold; margin-left: 5px; width: 200px; ⁇ #createDirectoryButtonsContainer ⁇ margin-top: 20px; ⁇ #createDirectoryCancelButton ⁇ float: left; ⁇ #createDirectoryOkButton ⁇ width: 50px; float: right; ⁇ #createDirectoryLightBox ⁇ position: absolute; left: Opx; top: Opx; background-color: #000000; z
- #sheet ⁇ position absolute; width: 400px; height: 400px; z-index: 3; background-color : #FFOOFF; cursor: w-resize; border: solid lpx #676767; ⁇
- sketchUpImage ⁇ position absolute; width: 400px; height: 400px; z- index: 2; border: solid lpx #676767; ⁇
- mouseX event . clientX + document .body . scrollLeft
- mouseY event . clientY + document .body . scrollTop
Abstract
Description
Claims
Applications Claiming Priority (2)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US12/053,420 US8886669B2 (en) | 2008-03-21 | 2008-03-21 | File access via conduit application |
PCT/US2009/037891 WO2009117714A2 (en) | 2008-03-21 | 2009-03-20 | File access via conduit application |
Publications (2)
Publication Number | Publication Date |
---|---|
EP2274694A2 true EP2274694A2 (en) | 2011-01-19 |
EP2274694A4 EP2274694A4 (en) | 2012-02-08 |
Family
ID=41089865
Family Applications (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
EP09723279A Withdrawn EP2274694A4 (en) | 2008-03-21 | 2009-03-20 | File access via conduit application |
Country Status (6)
Country | Link |
---|---|
US (1) | US8886669B2 (en) |
EP (1) | EP2274694A4 (en) |
CN (1) | CN102027476A (en) |
AU (1) | AU2009225393B2 (en) |
CA (1) | CA2719141C (en) |
WO (1) | WO2009117714A2 (en) |
Families Citing this family (20)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US8125481B2 (en) | 2008-03-21 | 2012-02-28 | Google Inc. | Lightweight three-dimensional display |
JP5335383B2 (en) * | 2008-11-18 | 2013-11-06 | キヤノン株式会社 | Image processing apparatus, information processing apparatus, control program for controlling information processing apparatus, and control program for controlling image processing apparatus |
US8997053B2 (en) * | 2010-01-14 | 2015-03-31 | Worksoft, Inc. | System and method for automated testing of software applications with dynamic user interfaces spanning multiple technologies |
US9262396B1 (en) | 2010-03-26 | 2016-02-16 | Amazon Technologies, Inc. | Browser compatibility checker tool |
US8706803B1 (en) * | 2010-09-24 | 2014-04-22 | Imdb.Com, Inc. | Client-side generation of preliminary version of network page |
US9003423B1 (en) * | 2011-07-29 | 2015-04-07 | Amazon Technologies, Inc. | Dynamic browser compatibility checker |
US8164596B1 (en) * | 2011-10-06 | 2012-04-24 | Sencha, Inc. | Style sheet animation creation tool with timeline interface |
US9594762B2 (en) * | 2012-01-06 | 2017-03-14 | International Business Machines Corporation | Intelligent file management |
US20150088974A1 (en) * | 2012-03-10 | 2015-03-26 | Evado Holdings Pty Ltd | Method and System of Application Development for Multiple Device Client Platforms |
US9122718B2 (en) | 2012-03-29 | 2015-09-01 | Dell Software Inc. | Dynamic directory control execution |
KR101649660B1 (en) * | 2012-07-06 | 2016-08-19 | 엘지전자 주식회사 | Terminal for increasing visual comfort sensation of 3d object and control method thereof |
CN109669921A (en) * | 2018-12-06 | 2019-04-23 | 深圳市网心科技有限公司 | File operation method and system, electronic equipment and storage medium |
US11379092B2 (en) * | 2019-11-11 | 2022-07-05 | Klarna Bank Ab | Dynamic location and extraction of a user interface element state in a user interface that is dependent on an event occurrence in a different user interface |
US11726752B2 (en) | 2019-11-11 | 2023-08-15 | Klarna Bank Ab | Unsupervised location and extraction of option elements in a user interface |
US11442749B2 (en) | 2019-11-11 | 2022-09-13 | Klarna Bank Ab | Location and extraction of item elements in a user interface |
US11366645B2 (en) | 2019-11-11 | 2022-06-21 | Klarna Bank Ab | Dynamic identification of user interface elements through unsupervised exploration |
US11409546B2 (en) | 2020-01-15 | 2022-08-09 | Klarna Bank Ab | Interface classification system |
US11386356B2 (en) | 2020-01-15 | 2022-07-12 | Klama Bank AB | Method of training a learning system to classify interfaces |
US10846106B1 (en) | 2020-03-09 | 2020-11-24 | Klarna Bank Ab | Real-time interface classification in an application |
CN114125017B (en) * | 2020-08-10 | 2024-04-09 | 腾讯科技（深圳）有限公司 | Media information display method and device, storage medium and electronic equipment |
Citations (2)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
WO1999038063A1 (en) * | 1998-01-27 | 1999-07-29 | Sun Microsystems, Inc. | Network-based authentication of a computer user |
US20040123154A1 (en) * | 2002-07-22 | 2004-06-24 | Alan Lippman | System and method for validating security access across network layer and a local file layer |
Family Cites Families (44)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
JPH0877356A (en) * | 1994-09-09 | 1996-03-22 | Fujitsu Ltd | Method and device for processing three-dimensional multi-view image |
US6081273A (en) * | 1996-01-31 | 2000-06-27 | Michigan State University | Method and system for building three-dimensional object models |
US5808613A (en) * | 1996-05-28 | 1998-09-15 | Silicon Graphics, Inc. | Network navigator with enhanced navigational abilities |
US6044367A (en) * | 1996-08-02 | 2000-03-28 | Hewlett-Packard Company | Distributed I/O store |
IL120867A0 (en) * | 1997-05-20 | 1997-09-30 | Cadent Ltd | Computer user interface for orthodontic use |
US6584495B1 (en) * | 1998-01-30 | 2003-06-24 | Microsoft Corporation | Unshared scratch space |
IL138808A0 (en) * | 1998-04-02 | 2001-10-31 | Kewazinga Corp | A navigable telepresence method and system utilizing an array of cameras |
JP2001165638A (en) * | 1999-02-19 | 2001-06-22 | Sanyo Electric Co Ltd | Device and method for providing three-dimensional model |
US6346938B1 (en) * | 1999-04-27 | 2002-02-12 | Harris Corporation | Computer-resident mechanism for manipulating, navigating through and mensurating displayed image of three-dimensional geometric model |
US7502027B1 (en) * | 1999-09-13 | 2009-03-10 | Solidworks Corporation | Electronic drawing viewer |
US6980690B1 (en) * | 2000-01-20 | 2005-12-27 | Canon Kabushiki Kaisha | Image processing apparatus |
US7065242B2 (en) * | 2000-03-28 | 2006-06-20 | Viewpoint Corporation | System and method of three-dimensional image capture and modeling |
AU2001264954A1 (en) * | 2000-05-25 | 2001-12-03 | Realitybuy, Inc. | A real time, three-dimensional, configurable, interactive product display systemand method |
GB2364590B (en) * | 2000-07-07 | 2004-06-02 | Mitsubishi Electric Inf Tech | Method and apparatus for representing and searching for an object in an image |
US6804699B1 (en) * | 2000-07-18 | 2004-10-12 | Palmone, Inc. | Identifying and locating lost or stolen personal digital assistant devices via a landline- or wireless-connected web server |
US6832220B1 (en) * | 2000-08-03 | 2004-12-14 | Microsoft Corporation | Method and apparatus for file searching, accessing file identifiers from reference page |
GB2370738B (en) * | 2000-10-27 | 2005-02-16 | Canon Kk | Image processing apparatus |
US6931604B2 (en) * | 2000-12-18 | 2005-08-16 | Derek Graham Lane | Method of navigating a collection of interconnected nodes |
US6987512B2 (en) * | 2001-03-29 | 2006-01-17 | Microsoft Corporation | 3D navigation techniques |
KR20020081661A (en) * | 2001-04-19 | 2002-10-30 | 주식회사 오픈비주얼 | Method and Apparatus for Visualization and Manipulation of Real 3-D Objects in Networked Environments |
US8392827B2 (en) | 2001-04-30 | 2013-03-05 | International Business Machines Corporation | Method for generation and assembly of web page content |
US20090100149A1 (en) * | 2001-05-21 | 2009-04-16 | Greg Arnold | Method and system for using tokens to conduct file sharing transactions between handhelds and a web service |
WO2003009177A1 (en) * | 2001-07-16 | 2003-01-30 | Dh Labs, Inc. | Web site application development method using object model for managing web-based content |
US7080325B2 (en) * | 2002-02-22 | 2006-07-18 | Call-Tell Llc | Graphical device for comprehensive viewing and input of variable data via a browser-based display |
US7945652B2 (en) * | 2002-08-06 | 2011-05-17 | Sheng (Ted) Tai Tsao | Display multi-layers list item in web-browser with supporting of concurrent multi-users |
US20060224979A1 (en) * | 2005-04-01 | 2006-10-05 | Paul Albrecht | Apparatus for creating graphical application interface |
CN1258728C (en) * | 2003-11-06 | 2006-06-07 | 北京四方继保自动化有限公司 | Application method and network system of fully distributed protected information processing system real-time database |
US20060114251A1 (en) * | 2004-02-11 | 2006-06-01 | Miller Jacob J | Methods for simulating movement of a computer user through a remote environment |
US20050188361A1 (en) * | 2004-02-23 | 2005-08-25 | Henry Cai | Browser-based web site generation system and method |
US20080016145A1 (en) * | 2004-09-07 | 2008-01-17 | Yutaka Takase | 3D Map Distribution Server Device, Client Terminal Device, and 3D Map Distribution System |
WO2006047218A2 (en) * | 2004-10-21 | 2006-05-04 | Createthe, Llc | System and method for managing creative assets via user interface |
US7467349B1 (en) * | 2004-12-15 | 2008-12-16 | Amazon Technologies, Inc. | Method and system for displaying a hyperlink at multiple levels of prominence based on user interaction |
CN1312550C (en) * | 2005-03-28 | 2007-04-25 | 北京紫光华宇软件股份有限公司 | Method for dumping data to mobile storage medium and extracting data therefrom |
US7523392B2 (en) * | 2005-04-22 | 2009-04-21 | Microsoft Corporation | Method and system for mapping between components of a packaging model and features of a physical representation of a package |
US7162488B2 (en) * | 2005-04-22 | 2007-01-09 | Microsoft Corporation | Systems, methods, and user interfaces for storing, searching, navigating, and retrieving electronic information |
US9070402B2 (en) * | 2006-03-13 | 2015-06-30 | Autodesk, Inc. | 3D model presentation system with motion and transitions at each camera view point of interest (POI) with imageless jumps to each POI |
US20080065685A1 (en) * | 2006-08-04 | 2008-03-13 | Metacarta, Inc. | Systems and methods for presenting results of geographic text searches |
US20080033641A1 (en) * | 2006-07-25 | 2008-02-07 | Medalia Michael J | Method of generating a three-dimensional interactive tour of a geographic location |
US20080147671A1 (en) * | 2006-12-18 | 2008-06-19 | Lampdesk Corporation | System for Running Web Applications Offline and Providing Access to Native Services |
US20080168098A1 (en) * | 2007-01-04 | 2008-07-10 | Joshua Paul | System For Creating Interactive Video Advertisement |
CN101677827B (en) * | 2007-05-10 | 2014-08-13 | 皇家飞利浦电子股份有限公司 | Targeting method, targeting device, computer readable medium and program element |
US9183305B2 (en) * | 2007-06-19 | 2015-11-10 | Red Hat, Inc. | Delegated search of content in accounts linked to social overlay system |
US20090158178A1 (en) * | 2007-12-17 | 2009-06-18 | Dorian Birsan | Graphically navigating tree structures |
US8125481B2 (en) * | 2008-03-21 | 2012-02-28 | Google Inc. | Lightweight three-dimensional display |
-
2008
- 2008-03-21 US US12/053,420 patent/US8886669B2/en active Active
-
2009
- 2009-03-20 CN CN2009801176592A patent/CN102027476A/en active Pending
- 2009-03-20 CA CA2719141A patent/CA2719141C/en active Active
- 2009-03-20 EP EP09723279A patent/EP2274694A4/en not_active Withdrawn
- 2009-03-20 AU AU2009225393A patent/AU2009225393B2/en active Active
- 2009-03-20 WO PCT/US2009/037891 patent/WO2009117714A2/en active Application Filing
Patent Citations (2)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
WO1999038063A1 (en) * | 1998-01-27 | 1999-07-29 | Sun Microsystems, Inc. | Network-based authentication of a computer user |
US20040123154A1 (en) * | 2002-07-22 | 2004-06-24 | Alan Lippman | System and method for validating security access across network layer and a local file layer |
Non-Patent Citations (1)
Title |
---|
See also references of WO2009117714A2 * |
Also Published As
Publication number | Publication date |
---|---|
CN102027476A (en) | 2011-04-20 |
AU2009225393A1 (en) | 2009-09-24 |
CA2719141C (en) | 2016-12-13 |
US8886669B2 (en) | 2014-11-11 |
WO2009117714A3 (en) | 2009-12-23 |
CA2719141A1 (en) | 2009-09-24 |
WO2009117714A2 (en) | 2009-09-24 |
EP2274694A4 (en) | 2012-02-08 |
AU2009225393B2 (en) | 2015-01-22 |
US20090240654A1 (en) | 2009-09-24 |
Similar Documents
Publication | Publication Date | Title |
---|---|---|
CA2719141C (en) | File access via conduit application | |
US8614706B2 (en) | Lightweight three-dimensional display | |
CN104216691B (en) | A kind of method and device for creating application | |
US11902377B2 (en) | Methods, systems, and computer program products for implementing cross-platform mixed-reality applications with a scripting framework | |
US10127327B2 (en) | Cloud-based image processing web service | |
US9183672B1 (en) | Embeddable three-dimensional (3D) image viewer | |
CN109643212A (en) | 3D document editing system | |
WO2008033530A2 (en) | System for controlling objects in a recursive browser system | |
US20190080017A1 (en) | Method, system, and device that invokes a web engine | |
US20180315400A1 (en) | Rendering graphical assets on electronic devices | |
US20090019370A1 (en) | System for controlling objects in a recursive browser system: forcefield | |
US20080082924A1 (en) | System for controlling objects in a recursive browser system | |
Sons et al. | xml3d. js: Architecture of a Polyfill Implementation of XML3D | |
CN102110166B (en) | Browser-based body 3D (3-demensional) visualizing and editing system and method | |
US20240137417A1 (en) | Methods, systems, and computer program products for implementing cross-platform mixed-reality applications with a scripting framework | |
Korhonen et al. | Creating Mashups with Adobe Flex and AIR | |
Osaci et al. | VRML (virtual reality modeling language) programming in SAP technologies |
Legal Events
Date | Code | Title | Description |
---|---|---|---|
PUAI | Public reference made under article 153(3) epc to a published international application that has entered the european phase |
Free format text: ORIGINAL CODE: 0009012 |
|
17P | Request for examination filed |
Effective date: 20101020 |
|
AK | Designated contracting states |
Kind code of ref document: A2Designated state(s): AT BE BG CH CY CZ DE DK EE ES FI FR GB GR HR HU IE IS IT LI LT LU LV MC MK MT NL NO PL PT RO SE SI SK TR |
|
AX | Request for extension of the european patent |
Extension state: AL BA RS |
|
DAX | Request for extension of the european patent (deleted) | ||
A4 | Supplementary search report drawn up and despatched |
Effective date: 20120106 |
|
RIC1 | Information provided on ipc code assigned before grant |
Ipc: G06F 9/44 20060101ALI20120102BHEPIpc: G06F 21/00 20060101ALI20120102BHEPIpc: G06F 17/30 20060101ALI20120102BHEPIpc: H04B 1/40 20060101ALI20120102BHEPIpc: G06F 9/06 20060101ALI20120102BHEPIpc: G06F 3/14 20060101ALI20120102BHEPIpc: G06F 17/50 20060101AFI20120102BHEP |
|
17Q | First examination report despatched |
Effective date: 20120119 |
|
STAA | Information on the status of an ep patent application or granted ep patent |
Free format text: STATUS: THE APPLICATION IS DEEMED TO BE WITHDRAWN |
|
18D | Application deemed to be withdrawn |
Effective date: 20120731 |