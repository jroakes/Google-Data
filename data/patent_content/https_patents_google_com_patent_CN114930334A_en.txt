CN114930334A - Additive and subtractive noise for privacy protection - Google Patents
Additive and subtractive noise for privacy protection Download PDFInfo
- Publication number
- CN114930334A CN114930334A CN202180008129.5A CN202180008129A CN114930334A CN 114930334 A CN114930334 A CN 114930334A CN 202180008129 A CN202180008129 A CN 202180008129A CN 114930334 A CN114930334 A CN 114930334A
- Authority
- CN
- China
- Prior art keywords
- user
- user group
- digital components
- group identifiers
- digital
- Prior art date
- Legal status (The legal status is an assumption and is not a legal conclusion. Google has not performed a legal analysis and makes no representation as to the accuracy of the status listed.)
- Pending
Links
Images
Classifications
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F21/00—Security arrangements for protecting computers, components thereof, programs or data against unauthorised activity
- G06F21/60—Protecting data
- G06F21/62—Protecting access to data via a platform, e.g. using keys or access control rules
- G06F21/6218—Protecting access to data via a platform, e.g. using keys or access control rules to a system of files or objects, e.g. local or distributed file system or database
- G06F21/6245—Protecting personal data, e.g. for financial or medical purposes
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04L—TRANSMISSION OF DIGITAL INFORMATION, e.g. TELEGRAPHIC COMMUNICATION
- H04L63/00—Network architectures or network communication protocols for network security
- H04L63/10—Network architectures or network communication protocols for network security for controlling access to devices or network resources
- H04L63/104—Grouping of entities
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04L—TRANSMISSION OF DIGITAL INFORMATION, e.g. TELEGRAPHIC COMMUNICATION
- H04L9/00—Cryptographic mechanisms or cryptographic arrangements for secret or secure communications; Network security protocols
- H04L9/06—Cryptographic mechanisms or cryptographic arrangements for secret or secure communications; Network security protocols the encryption apparatus using shift registers or memories for block-wise or stream coding, e.g. DES systems or RC4; Hash functions; Pseudorandom sequence generators
- H04L9/0643—Hash functions, e.g. MD5, SHA, HMAC or f9 MAC
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04L—TRANSMISSION OF DIGITAL INFORMATION, e.g. TELEGRAPHIC COMMUNICATION
- H04L9/00—Cryptographic mechanisms or cryptographic arrangements for secret or secure communications; Network security protocols
- H04L9/32—Cryptographic mechanisms or cryptographic arrangements for secret or secure communications; Network security protocols including means for verifying the identity or authority of a user of the system or for message authentication, e.g. authorization, entity authentication, data integrity or data verification, non-repudiation, key authentication or verification of credentials
- H04L9/3236—Cryptographic mechanisms or cryptographic arrangements for secret or secure communications; Network security protocols including means for verifying the identity or authority of a user of the system or for message authentication, e.g. authorization, entity authentication, data integrity or data verification, non-repudiation, key authentication or verification of credentials using cryptographic hash functions
- H04L9/3242—Cryptographic mechanisms or cryptographic arrangements for secret or secure communications; Network security protocols including means for verifying the identity or authority of a user of the system or for message authentication, e.g. authorization, entity authentication, data integrity or data verification, non-repudiation, key authentication or verification of credentials using cryptographic hash functions involving keyed hash functions, e.g. message authentication codes [MACs], CBC-MAC or HMAC
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04W—WIRELESS COMMUNICATION NETWORKS
- H04W12/00—Security arrangements; Authentication; Protecting privacy or anonymity
- H04W12/02—Protecting privacy or anonymity, e.g. protecting personally identifiable information [PII]
Abstract
The present disclosure relates to using additive and subtractive noise to protect the privacy of a user. In one aspect, a method includes obtaining a first set of real user group identifiers that identify a user group that includes a user as a member. Generating a second set of user group identifiers for the user by removing zero or more real user group identifiers from the first set to generate a second set, and adding one or more false user group identifiers to the second set that do not include the user's user group as a member. A probabilistic data structure is generated based on the second set of subscriber group identifiers. Transmitting the probabilistic data structure to a recipient computing system. Receiving data indicative of a set of digital components, the set of digital components including at least one digital component selected based on the probabilistic data structure. A given digital component is presented.
Description
Cross Reference to Related Applications
This application claims priority to IL application No.277642 filed on 29/9/2020. The entire contents of the aforementioned application are hereby incorporated by reference in their entirety.
Background
This specification relates generally to data processing and the use of additive and subtractive noise to protect the privacy of a user when analyzing user data to improve the user experience.
Differential privacy is the basis for many privacy preserving efforts and has become popular in recent years because it provides many theoretical guarantees. In general, differential privacy relates to techniques for sharing useful information about a data set while preserving privacy of individuals within the data set.
Disclosure of Invention
This specification describes technologies relating to protecting user privacy when analyzing user data to improve a user experience. In general, one inventive aspect of the subject matter described in this specification can be embodied in methods that include obtaining a first set of real user group identifiers that identify user groups that include a user as a member. Based on the first set of real user group identifiers, a second set of user group identifiers of the user is generated. Generating includes removing zero or more real user group identifiers from the first set of user group identifiers to generate a second set of user group identifiers. One or more false user group identifiers for user groups that do not include the user as a member are added to the second set of user group identifiers. A probabilistic data structure is generated based on the second set of user group identifiers. The probabilistic data structure is transmitted to a recipient computing system. Data is received indicating a set of digital components that includes at least one digital component selected based on a probabilistic data structure. Selecting a given digital component from the set of digital components. A given digital component is presented. Other implementations of this aspect include corresponding apparatuses, systems, and computer programs encoded on computer storage devices configured to perform aspects of the methods.
These and other implementations can each optionally include one or more of the following features. In some aspects, removing zero or more real user group identifiers from the first set of user group identifiers comprises removing a plurality of real user group identifiers from the first set of user group identifiers. In some aspects, the set of numerical components includes one or more additional numerical components that are not selected based on the probabilistic data structure.
In some aspects, selecting a given digital component from the set of digital components comprises generating a subset of filtered digital components by filtering one or more digital components from the set of digital components that do not have a corresponding user group identifier that matches one of the real user identifiers; and selecting the given digital component from the subset of filtered digital components.
In some aspects, filtering one or more digital components from the set of digital components that do not have a corresponding user group identifier that matches one of the real user group identifiers may include identifying, in the data indicative of the set of digital components, one or more corresponding user group identifiers for the digital components, each corresponding user identifier being a user group identifier for selecting a digital component contained in the set of digital components. Some aspects may include comparing each corresponding user identifier to a real user group identifier in the first set of user group identifiers; and removing from the set of digital components each digital component that does not have a corresponding subscriber group identifier that matches one of the real subscriber group identifiers in the first set of subscriber group identifiers.
In some aspects, the data indicative of the set of digital components includes data identifying first digital components each having one or more corresponding user group identifiers, and data identifying one or more second digital components that do not have any corresponding user group identifiers. Selecting a given digital component from the set of digital components may include removing each first digital component from the set of digital components, wherein none of the corresponding user group identifiers of the first digital components match a real user group identifier.
In some aspects, selecting a given digital component from the set of digital components includes selecting a second digital component when all first digital components are removed from the set of digital components.
In some aspects, the recipient computing system selects a subset of user groups from the plurality of user groups based on the probabilistic data structure and selects a set of digital components corresponding to the subset of user groups. In some aspects, the probabilistic data structure comprises a bloom filter or a cuckoo filter.
In some aspects, removing the one or more real user group identifiers from the first set of user group identifiers comprises randomly or pseudo-randomly selecting the one or more real user group identifiers, and adding the one or more dummy user group identifiers to the second set of group identifiers comprises randomly or pseudo-randomly selecting the one or more dummy user group identifiers.
In some aspects, each real user identifier is based on a combination of: (i) creating a domain of an entity of the user group identified by the real user group identifier, and (ii) a unique identifier of the user group identified by the real user group identifier.
In some aspects, each true subscriber group identifier is a message authentication code generated based on a combination of a domain and a unique identifier.
In some aspects, generating the probabilistic data structure based on the second set of group identifiers comprises: generating a hash output for each subscriber group identifier, the hash output having a uniform distribution across all subscriber group identifiers; and generating a probabilistic data structure comprising a hash output of each subscriber group identifier in the second set of group identifiers.
In general, the user experience is improved when the content platform provides digital components or other content based on the user's group membership data. For example, in response to a user interacting with an electronic resource associated with a particular category, the user may be added to a group of users of the category, thereby providing the digital components associated with the category to the user. This information may be stored at the user's device to protect the user's privacy in terms of group membership. In the event that this information is not available, the content platform must evaluate the digital components of the user group that does not include the user as a member. For example, the content platform may evaluate digital components of all of its user groups and provide digital components for at least some of these groups without knowing whether the user is actually a member of any of the groups. An application at the user device may evaluate each received digital component to determine whether it is associated with a user group in which the user is a member, and ignore digital components that do not have such an association. To mitigate the wasteful computational burden of evaluating digital components that are unrelated to a user's group membership, the user's group membership may be provided to the content platform. However, this membership data is typically private to the user and will enable the content platform to track the user by using the membership data sent in each request as a user fingerprint.
The subject matter described in this specification can be implemented in particular embodiments to realize one or more of the following advantages. For multiple requests sent by a user's client device, an application may modify the user's group membership list to add and delete user group identifiers such that the modified list provided to the content platform is different for the multiple requests, thereby providing differential privacy that prevents the content platform from tracking the user by using the same list as the user's fingerprint. By providing data that identifies a user group that includes the user as a member, a content platform that selects digital components for the user based on the user's group memberships may conserve computing resources that would otherwise be wasted evaluating digital components for a user group that does not include the user as a member. The computing resources of the client device are also conserved by also not having to evaluate digital components of user groups that do not include the user as a member. By making actual user group membership information available and adding and subtracting user group identifiers for differential privacy, the search space for matching user group identifiers is much smaller, thereby saving computation at the content platform and reducing digital components transmitted over the network and stored on the client device.
Data identifying the user group identifier of the user may be encoded in a probabilistic data structure that protects user privacy by not sharing the clear text values of all user group identifiers of the user and results in smaller data sizes. Such smaller data sizes reduce consumption of network bandwidth, increase transmission speed, reduce computational resources required to receive and process data, and reduce data storage requirements for storing user group membership data. By configuring the parameters of the probabilistic data structure to have a small (e.g., 1%) false positive rate, the number of user groups that do not include users as members and that the content platform evaluates is also small, resulting in computational savings at the content platform, the client device, and reducing the amount of bandwidth consumed by transmitting digital components of user groups that do not include users as members. The systems and techniques described in this document enable requesting and distributing digital components without identifying the requestor, thereby making the system more secure. This may prevent requesters from being targeted, for example, because their identities are unknown.
Various features and advantages of the foregoing subject matter are described below with respect to the accompanying drawings. Additional features and advantages will be apparent from the subject matter described herein and from the claims.
Drawings
Fig. 1 is a block diagram of an environment in which content is distributed to client devices.
FIG. 2 is a swim lane diagram of an example process for associating a user with a user group.
FIG. 3 is a swim lane diagram of an example process for requesting and receiving digital components based on a user group.
FIG. 4 is a flow chart illustrating an example process of generating a probabilistic data structure.
FIG. 5 is a block diagram of an example computer system.
Like reference numbers and designations in the various drawings indicate like elements.
Detailed Description
In general, this document relates to protecting user privacy while analyzing user data to improve user experience. This enables confidential information to be shared to the content platform using differential privacy techniques, thereby preserving the anonymity of the user while reducing the computational burden that the platform bears when evaluating digital components of user groups that do not include the user as a member.
Fig. 1 is a block diagram of an environment 100 in which content is distributed to client devices 110. The example environment 100 includes a data communication network 105, such as a Local Area Network (LAN), a Wide Area Network (WAN), the Internet, a mobile network, or a combination thereof. The network 105 connects client devices 110, Demand Side Platforms (DSPs) 150, supplier platforms (SSPs) 170, publishers 140, and websites 142. The example environment 100 may include many different client devices 110, DSPs 150, SSPs 170, publishers 140, and websites 142.
The client device 110 is an electronic device capable of communicating over the network 105. Example client devices 110 include personal computers, mobile communication devices such as smart phones, and other devices that can send and receive data over the network 105. The client device may also include a digital assistant device that accepts audio input through a microphone and outputs audio output through a speaker. When the digital assistant detects a "hot word" or "hot phrase" that activates the microphone to accept audio input, the digital assistant may be placed in a listening mode (e.g., ready to accept audio input). The digital assistant device may also include a camera and/or a display to capture images and visually present information. The digital assistant may be implemented with different forms of hardware devices, including a wearable device (e.g., a watch or glasses), a smartphone, a speaker device, a tablet device, or another hardware device. The client device may also include a digital media device, such as a streaming device that plugs into a television or other display to stream video to the television.
The client device 110 typically includes an application 112, such as a web browser and/or a native application, to facilitate sending and receiving data over the network 105. A native application is an application developed for a particular platform or a particular device (e.g., a mobile device with a particular operating system). The publisher 140 may develop and provide, for example, a native application to the client device 110 that is available for download. For example, in response to a user of the client device 110 entering a resource address of a resource 145 in an address bar of a web browser or selecting a link referencing the resource address, the web browser can request the resource 145 from a web server hosting the publisher's 140 website 142. Similarly, the native application may request application content from a publisher's remote server.
Some resources, application pages, or other application content can include a digital component slot for rendering a digital component with the resource 145 or application page. The digital component slot can be a digital component tag embedded in the resource, and the digital component tag includes computer readable code for requesting the digital component. As used throughout this document, the phrase "digital component" refers to a discrete unit of digital content or digital information (e.g., a video clip, an audio clip, a multimedia clip, an image, text, or another unit of content). The digital components may be electronically stored as a single file in a physical memory device or in a collection of files, and the digital components may be in the form of video files, audio files, multimedia files, image files, or text files and include advertising information such that the advertisement is one type of digital component. For example, the digital component may be content intended to supplement the content of a web page or other resource presented by the application 112. More specifically, the digital components may include digital content related to the resource content (e.g., the digital components may be related to the same subject matter as the web page content, or related subject matter). Thus, providing a digital component can supplement and generally enhance web page or application content.
When application 112 loads a resource (or application content) that includes one or more digital component slots, application 112 may request a digital component for each slot. In some implementations, the digital component slot may include code (e.g., script) that causes the application 112 to request the digital component for presentation to the user of the client device 110.
Some publishers 140 use SSP170 to manage the process of obtaining digital components for digital component slots of their resources and/or applications. The SSP170 is a technical platform implemented in hardware and/or software that automates the process of obtaining digital components of resources and/or applications. SSP170 can interact with one or more DSPs 150 to obtain information for digital components that can be used to select digital component slots. As described in more detail below, this information may include a selection parameter that indicates a number of digital components that the digital component provider 160 is willing to provide to the publisher 140 to present the digital component provider 160. Each publisher 140 may have a corresponding SSP170 or SSPs 170. Multiple publishers 140 may use the same SSP 170.
The digital component provider 160 can create (or otherwise publish) digital components that are presented in digital component slots of publishers' resources and applications. The digital component provider 160 may use the DSP 150 to manage the provisioning of its digital components for presentation in the digital component slots. DSP 150 is a technology platform implemented in hardware and/or software that automates the process of distributing digital components for utilization of a presentation of resources and/or applications. The DSP 150 may interact with a plurality of SSPs 170 on behalf of a digital component provider 160 to provide digital components for rendering of resources and/or applications that utilize a plurality of different publishers 140. In general, DSP 150 may receive requests for digital components (e.g., directly or via exchange from SSP 170), generate (or select) selection parameters for one or more digital components created by one or more digital component providers based on the requests, and provide data related to the digital components (e.g., the digital components themselves) and the selection parameters to SSP 170.
In some cases, it may be beneficial for a user to receive digital components related to web pages, application pages, or other electronic resources that the user previously accessed and/or previously interacted with. To distribute such digital components to users, users may be assigned to groups of users when they access a particular resource or perform a particular action at a resource (e.g., interact with a particular item presented on a web page or add an item to a virtual shopping cart). For example, if a user of the device searches for shoes and accesses multiple web pages of different shoe factories, the browser may add the user to a user group such as "shoes" and store a corresponding user group identifier for the user group "shoes" on the client device. Thus, the user group may represent the interests of the user. The user group may be generated by the digital component provider 160 and identified by a user group identifier. That is, each digital component provider 160 may assign users to their group of users when they access electronic resources of the digital component provider 160. For example, if a user adds shoes to a shopping cart of an online retailer, the retailer may add the user to a group of shoes users. The user may be assigned to multiple user groups of multiple different digital component providers.
To protect user privacy, the user's group membership may be maintained at the user's client device 110, for example, by one of the applications 112 or the operating system of the client device 110, rather than by the digital component provider 160, the content platform, or another party. In a particular example, the application 112 can maintain a list of user group identifiers ("user group list") 114 for the user. The user group list 114 may include a group identifier for each user group to which a user has been added. The digital component providers 160 that create the user group may specify the user group identifier for their user group. The user group identifier of the user group may describe the group (e.g., a gardening group) or a code (e.g., a non-descriptive alphanumeric sequence) representing the group. The user group list 114 of the user may be stored in a secure store at the client device 110 and/or may be encrypted at the time of storage.
The user group identifier to which the user is actually assigned is referred to as a real group identifier. In some implementations, each user group identifier is based on a combination of: (i) a resource locator (e.g., a domain, a URL, or an eTLD +1) of an entity (e.g., the digital component provider 160 or the DSP 150) that creates and/or manages the user group identified by the user group identifier, and (ii) a unique identifier of the user group identified by the user group identifier. Com, and a user group of shoes with an identifier "shoes". In this example, the user group identifier used in the environment 100, e.g., by the application 112, SSP170, and DSP 150, may be or be based on a combination of "example.
As mentioned above, the resource locator of an entity may be the tld +1 of the entity domain that creates or manages the user group. eTLD +1 is the valid top level field (eTLD) plus one level more than the common suffix. Example eTLD +1 is "example.com", where ". com" is the top level domain.
In an environment with multiple digital component providers 160, each digital component provider 160 may access or maintain multiple user groups and each user may be a member of multiple user groups. For example, a garment distributor may have a user group for each type of garment, and the user may be a member of one or more garment groups of the garment distributor, or may be a member of a gardening group of a home decoration company. In some implementations, a hash function can be used to generate a hash output for (i) a resource locator of an entity (e.g., a digital component provider) that created a user group and (ii) a unique identifier of the user group identified by the entity. The result of this hash function may be a user group identifier for the group used in the environment 100. In other examples, other information specific to the entity that created the user group may be used in place of the resource locator.
Com "is a domain of a digital component provider, and UG _ ID is a unique group identifier of a particular user group identified by the digital component provider 160. The application 112 may use a cryptographic function to generate a user group identifier based on the resource locator and the unique group identifier. The function may be a pseudorandom function, such as a keyed Hash Message Authentication Code (HMAC) implemented using a secure hash algorithm (SHA256), which is a cryptographic hash function having a digest length of 256 bits, to generate a hashed 256-bit (32-byte) output. In this example, HMAC (UG _ ID, example.com) generates a 256-bit unique identifier of the user group as the user group identifier.
By using a hash function to determine the user group identifier, it is computationally infeasible for the recipient of the user group identifier to find out the identity of the entity that created/managed the user group or the unique identifier of the user group without additional information. Thus, if another entity receives a user group identifier for a user, the hash function method protects the entity's confidential information (e.g., start, stop, number of ongoing digital component activities, etc.). The hash function also protects user privacy by preventing such entities from determining a user's full group membership.
When the application 112 presents resources or application content related to a web page on the digital component provider 160 or the website 142, the resource may request that the application 112 add one or more user group identifiers to the user's user group list. In response, the application 112 can add one or more user group identifiers to the user group list 114 and securely store the user group list. This is further explained with reference to fig. 2.
To obtain a digital component for utilization of a presentation of an electronic resource of the publisher 140, for example, in a digital component slot, the application 112 can submit a request for the publisher 140 to the SSP 170. This request may include a subscriber group identifier for the user, such as a subscriber group identifier included in the subscriber group list 114. In some implementations, the application 112 can send the clear text value of the user group identifier. However, this will provide the recipient of the list with the user's entire user group membership and enable the recipient to track the user based on multiple requests for the user.
To protect user privacy, the application 112 may apply noise (e.g., differential privacy noise) to the user group identifier of the user prior to providing the user group identifier to the SSP 170. As described below, this may include removing one or more real user group identifiers for the user group of which the user is actually a member. This may also include adding one or more false user group identifiers that may not represent any actual user groups (e.g., only random identifiers) or may be identifiers of actual user groups of which the user is not a member. This protects user privacy by preventing the recipient from knowing the user's entire group membership data, and if the user group identifiers added to and deleted from the list provided to the SSP170 are different for different requests, the recipient can be prevented from tracking the user based on their group membership, as the lists they receive will be different.
In addition, the application 112 may generate a probabilistic data structure, such as a bloom filter or a cuckoo filter, based on the user group identifiers in the user group list 114. For example, after applying the differential privacy technique to the user group list 114, the application 112 may generate a probabilistic data structure based on the list of user identifiers. This protects user privacy by preventing the recipient from obtaining the entire group membership data for the user, and reduces the data size of the user group data, thereby providing performance advantages, as described above.
SSP170 may receive the request and submit the request to one or more DSPs 150. These requests sent to DSP 150 may also include the user group identifier of the user. DSP 150 may select one or more digital components of the user based on one or more user groups of the user and provide selection parameters of the digital components to SSP 170. The selection parameter indicates the number of digital components that the digital component provider 160 is willing to provide to the publisher 140 to present the digital component provider 160. The SSP170 can apply some exclusions on behalf of the publisher 140 and provide a list of digital components to the application 112 based on the selection parameters. The application 112 can select a digital component from the list and present the digital component using the electronic resource of the publisher 140. An example process for obtaining a digital component is illustrated in fig. 3 and described below.
In some implementations, the application 112 can provide a user interface that enables a user to manage a user group to which the user is assigned. For example, the user interface may enable the user to remove the user group identifier, prevent all or a particular resource 145, publisher 140, digital component provider 160, digital component exchange, and/or DSP 150 from adding the user to the user group (e.g., prevent the entity from adding the user group identifier to a list of user group identifiers maintained by the application 112). This provides better transparency and control for the user.
In addition to the description throughout this document, a user may be equipped with controls that allow the user to select whether and when the systems, programs, or features described herein may enable the collection of user information (e.g., information about the user's social network, social behavior or activity, profession, user preferences, or the user's current location), and whether the user sends content or communications from a server. In addition, certain data may be processed in one or more ways prior to storage or use, such that personally identifiable information is removed. For example, the identity of the user may be processed such that personally identifiable information of the user cannot be determined, or the geographic location of the user may be summarized (e.g., at a city, zip code, or state level) with location information obtained such that a particular location of the user cannot be determined. Thus, the user may control what information is collected about the user, how the information is used, and what information is provided to the user.
FIG. 2 is a swim lane diagram illustrating an example process 200 for adding one or more user group identifiers to the user group list 114 of a user. The operations of process 200 may be performed, for example, by client device 110. The operations of process 200 may also be implemented as instructions stored on one or more computer-readable media, which may be non-transitory, and execution of the instructions by one or more data processing devices may cause the one or more data processing devices to perform the operations of process 200. Although this process 200 is described in terms of a web browser downloading a web page, native applications may be used in a similar process.
In this example, a user of a client device 110 uses an application 112, such as a web browser, to access a website 142 of a digital component provider 160 hosted on a web server. To access website 142, client device 110 may initiate a request for website 142, and a web server hosting website 142 may respond to the request by sending computer-executable instructions and/or data that initiate the presentation of a web page (or other electronic resource) at client device 110.
The web page may include computer executable code, such as scripts, that prompt the web browser of the client device 110 to request to join a given group of users, such as a group of users related to the content of the web page, or the user's interaction with the web page or web site 142. For example, assume that web site 142 is a footwear e-commerce web site. After navigating to website 142, the web page downloaded from website 142 may prompt the user of client device 110 to request to join the user group "shoes". The user interface of the web browser may further enable the user to respond to the prompt and allow the user to accept or decline the request to join the user group "shoes". In the event that the user of the client device 110 accepts the request to join the user group, the web browser stores the corresponding user group identifier on the client device 110. In another example, the web browser may add the user to the user group without prompting the user, for example, if the user enables this functionality. The example process 200 is further explained below.
In this example, the digital component provider 160 that provides digital components for utilizing the presentation of the resources of other publishers based on user group membership is also a publisher of the website. For example, the digital component provider 160 may have a website that includes content related to its products or services, and also wishes to present digital components related to its products or services on a website that has other content (e.g., a news website).
The user of client device 110 navigates to network 142(202) of digital component provider 160. For example, a user of client device 110 may access website 142 using a browser by specifying a reference (e.g., a URL). In another example, a user of client device 110 uses a web browser to submit a search query to a search system that identifies websites by crawling and indexing the websites (e.g., indexing based on the crawled content of the websites). In response, the search system identifies the website in the form of search results and returns the search results to the client device 110 in a search results page. Search results are data generated by a search system that identifies websites that are responsive to (e.g., relevant to) a particular search query and that includes active links (e.g., hypertext links) that enable client device 110 to request data from a specified location, such as a web server, in response to user interaction with the search results. Example search results may include a website title, a portion of a text snippet or image extracted from the website, and a URL of the website. After viewing the search results, the user of client device 110 may select and/or click on the search results corresponding to website 142.
A request for digital content may be transmitted, for example, over a packet network, and the content request itself may be formatted into packet data with a header and payload data. The header may specify the destination of the data packet and the payload data may include any of the information discussed above.
The web server responds with the content (e.g., web page) of the web site 142 (206). For example, after receiving a request for digital content (i.e., website 142) from client device 110, the web server hosting website 142 responds by transmitting machine-executable instructions that initiate the rendering of a web page at client device 110. The response may include data related to, for example, a web page transmitted over a packet network, and may format the content itself into packet data.
The client device 110 presents the content for presentation to the user (208). After receiving digital content (e.g., a web page) from a web server, the web browser renders the content for presentation to a user. For example, a web browser may present a web page to a user using a display of client device 110.
The digital component provider 160 requests the web browser of the client device 110 to add the user to the user group (210). For example, after transmitting computer-executable instructions that initiate presentation of data related to website 142, digital component provider 160 (e.g., a web server of digital component provider 160) may prompt a user of client device 110 to join a user group. In another example, the web page may include computer executable code, such as scripts, that invoke an Application Programming Interface (API) of the web browser to request the web browser to add the user to the user group.
In some implementations, the digital component provider 160 selects a user group from a plurality of available user groups known and/or managed by the digital component provider 160. In the present example, the website 142 is an e-commerce website for purchasing shoes. The web server hosting website 142 may prompt the user of client device 110 to request to join the user group "shoes". The user interface of the web browser may further enable the user to respond to the prompt and allow the user to accept or decline the request to join the user group "shoes".
In some implementations, the application 112 (e.g., a web browser) can provide configurable options to the user of the client device 110 so that the acceptance and rejection of a user group can be handled autonomously without user intervention. For example, a user of the client device 110 may configure certain options of the application 112 such that the application 112 may automatically accept groups of users upon prompting by the publisher 140.
The subscriber group identifier is stored on the client device 110 (212). As previously described, each user group is identified by a user group identifier determined by the publisher 140. After accepting the request to join the particular user group, the web browser stores a user group identifier corresponding to the particular user group on the client device 110. For example, if the user of the client device 110 accepts the request to join the user group "shoes", the web browser stores the user group identifier of the user group "shoes" on the client device 110 after being prompted by the content provider. As described above, the subscriber group identifier may be stored in a secure store at the client device 110.
In some cases, when application 112 loads a resource (or application content) that includes one or more slots for digital components, application 112 may request the digital components of each slot. In some implementations, the digital component slot may include code (e.g., script) that causes the application 112 to request a digital component from a digital component distribution system that selects and provides the digital component to the application 112 for presentation to a user of the client device 110.
FIG. 3 is a swim lane diagram illustrating an example process 300 for requesting and receiving a digital component. The operations of process 300 may be implemented, for example, by client device 110, SSP170, one or more DSPs 150, and publisher 140. The operations of process 300 may also be implemented as instructions stored on one or more computer-readable media, which may be non-transitory, and execution of the instructions by one or more data processing devices may cause the one or more data processing devices to perform the operations of process 300.
In this example, a user of a client device 110 uses an application 112, such as a web browser or native application, to access an electronic resource (e.g., a web page or application page) that includes a digital component slot.
After loading the web page that includes the digital component slot, the application 112 sends a request for the digital component to the digital component provider based on the one or more user groups to which the user of the client device 110 is assigned. In some implementations, the request for the digital component is sent to a provider platform (SSP)170, which is hardware and/or software that automates the process of obtaining the digital component for the application.
The request for the digital component includes a probabilistic data structure, such as a bloom filter or a cuckoo filter, generated by the application 112 or an operating system of the client device using a first set of user group identifiers stored in the client device 110. For example, the first set of subscriber group identifiers may be subscriber group identifiers stored in a subscriber group list 114 on the client device 110. In some implementations, the probabilistic data structure is based on a second set of group identifiers generated from the first set of group identifiers by removing one or more real group identifiers from the first set of user group identifiers and by adding one or more false group identifiers that are not in the first set of group identifiers. The probabilistic data structure may be based on a random hash function that generates a hash output for each subscriber group identifier such that the hash output has a uniform distribution across all subscriber group identifiers.
Upon receiving a request for a digital component, the SSP170 can interact with one or more digital component providers and/or one or more DSPs 150, which is a hardware and/or software implemented technology platform that can automate the process of distributing for presentation with an application. In some implementations, SSP170 can transmit the probabilistic data structure to DSP 150.
The DSP 150 selects one or more digital components from the set of available digital components by filtering out digital components that do not have a corresponding subscriber group identifier that matches one of the subscriber group identifiers represented by the probabilistic data structure. In some implementations, the DSP 150 can generate a hash output for each user group identifier associated with each available digital component using the same hash function as the application 112. In such an implementation, the hash output is searched within the probabilistic data structure and the digital components that do not have corresponding hash values for the subscriber group identifier are filtered from the selection process.
By filtering out one or more digital components from the set of digital components that do not have a corresponding subscriber group identifier that matches one of the real subscriber identifiers in the first set of subscriber group identifiers (e.g., the subscriber group identifiers in the subscriber group list 114), the application 112 executing on the client device 110, upon receiving the set of digital components, can select a filtered subset of digital components. To filter out one or more digital components from the set of digital components, application 112 identifies one or more corresponding user group identifiers for each digital component in the set of digital components (e.g., in metadata for the digital component). After identification, the application 112 compares each user group identifier of each digital component to a real user group identifier in the first set of user group identifiers to remove digital components that do not have a corresponding user group identifier that matches one of the real user group identifiers in the first set of user group identifiers.
Finally, the digital components in the filtered subset of digital components are analyzed to select a given digital component. After selection, the given digital component is presented on the client device (e.g., in a digital component slot).
A user of the client device 110 using the application 112 navigates to an electronic resource (302). For example, a user of client device 110 may access website 142 using a browser by specifying a reference (e.g., a URL). In another example, a user of client device 110 may use a web browser to submit a search query to a search system that identifies websites by crawling and indexing the websites (e.g., indexing based on the crawled content of the websites). In response, the search system identifies the web site in the form of search results and returns the search results to the client device 110 in a search results page. After viewing the search results, the user of client device 110 may select and/or click on the search results corresponding to website 142. In yet another example, a user may launch a native application requesting content from the publisher 140 of the application.
Requests for digital content may be transmitted, for example, over packet network 105, and the content requests themselves may be formatted into packet data with a header and payload data. The header may specify the destination of the data packet and the payload data may include any of the information discussed above.
The publisher 140, such as a web server or content server of the publisher 140, responds with content (306). For example, after receiving a request for content from client device 110 (i.e., a request for website 142), the server may respond by transmitting computer-executable instructions and data that initiate rendering a web page at client device 110. The response may include data related to, for example, a web page transmitted over packet network 105, and may format the content itself into packet data.
The client device 110 identifies the label of the digital component in the electronic resource (308). After receiving the electronic resource or the content of the electronic resource from the publisher 140, the application 112 may identify one or more tags, for example, one or more tags for a digital component slot of the electronic resource. For example, a web browser may identify one or more digital component slots in a web page.
The client device 110 generates a probabilistic data structure (310). As previously mentioned, the probabilistic data structure may be based on a second set of group identifiers generated from the first set of group identifiers by randomly (or pseudo-randomly) removing real group identifiers from the first set of subscriber group identifiers and by randomly (or pseudo-randomly) adding dummy group identifiers that are not among real subscriber group identifiers of the first set of subscriber group identifiers. The probabilistic data structure is based on a random hash function that generates a hash output for each subscriber group identifier such that the hash output has a uniform distribution across all subscriber group identifiers. Example probabilistic data structures include bloom filters or cuckoo filters. An example process for generating a probabilistic data structure is described below with reference to fig. 4.
The client device 110 transmits a request for a digital component to the SSP170 (312). The client device 110 may send the request to a computing system of the SSP170, which may also be referred to as a recipient computing system. For example, application 112 may generate one or more requests for digital components based on one or more digital component slots. In a particular example, the web browser can generate a request for a digital component based on the tag and transmit the request to SSP170 over network 105.
In some implementations, the request for the digital component may include a probabilistic data structure generated by the client device 110 (explained with reference to fig. 4). For example, the web browser application 112 generates a request for a numerical component that includes a probabilistic data structure. The probability data structure represents a second set of subscriber group identifiers that is based on the subscriber group identifiers in the subscriber group list 114 associated with the user of the client device 110, and transmits a request for the digital component to the SSP 170.
In some implementations, the request for the digital component can also include additional data, such as context data. The context data may include, for example, a resource locator of a resource, such as a Universal Resource Locator (URL) of a web page or a Universal Resource Identifier (URI) of application content, a language (e.g., a language used by content presented by an application presenting the content), and/or coarse geographic location information indicating a coarse location of the client device 110.
Requests for digital components may be transmitted, for example, over the packet network 105, and the component requests themselves may be formatted into packet data with header and payload data. The header may specify the destination of the data packet and the payload data may include any of the information discussed above.
SSP170 transmits a request for digital components to one or more DSPs 150 (314). As described above, the digital component provider 160 may use one or more DSPs 150 to automate the process of distributing digital components for utilization of the presentation of an application. After receiving the request, SSP170 can interact with one or more DSPs and transmit a corresponding request for a digital component that includes a probability data structure and optionally context data.
The DSP 150 filters the numerical component based on the probabilistic data structure (316). In some implementations, the DSP 150 selects one or more digital components from the set of digital components by filtering out digital components that do not have a corresponding subscriber group identifier that matches one of the subscriber group identifiers in the probabilistic data structure. In such implementations, the DSP 150 may generate a hash output using the same hash function as the client device 110 for each subscriber group identifier known to the DSP 150. In such implementations, DSP 150 may search the hash output within the probabilistic data structure for each subscriber group identifier known or managed by DSP 150. DSP 150 may filter each digital component that does not have a corresponding subscriber group identifier whose hash output is not found in the probabilistic data structure from the set of candidate digital components provided in response to the request. For example, at least a portion of the digital components distributed by the DSP 150 may have one or more user group identifiers for user groups associated with the digital components. In a particular example, a digital component having content about a particular pair of shoes may have identifiers for a "shoes" group, a "clothing" group, and a "footwear" group as corresponding user group identifiers.
Such an implementation may take advantage of the false positive rate of the probabilistic data structure. As used in this document, the phrase "false positive rate" refers to a value that identifies an expected false positive rate or number of false positives associated with a probabilistic data structure. For example, the false positive rate may be a function of the algorithms and parameters selected for the probabilistic data structure and the size of the probabilistic data structure. Thus, these parameters can be adjusted to adjust the false positive rate.
For example, assume that the probabilistic data structure is a bloom filter with a false positive rate of 1%. It is also assumed that DSP 150 knows and manages the provisioning of digital components for one million user groups. It is also assumed that the user is a member of ten of such user groups. This false positive rate may narrow the pool of all subscriber group identifiers known to the DSP 150 to approximately 1% of the subscriber group identifiers, resulting in a corresponding reduction in the number of candidate digital components remaining in the selection process after filtering. For example, there may be ten thousand false positive user group identifiers and ten true positive user group identifiers. This may result in better computational performance and faster response times for DSP 150, thereby improving the user experience because DSP 150 does not have to waste time and computational resources evaluating digital components for a million user groups.
After filtering out the digital components based on the probabilistic data structure, DSP 150 selects one or more digital components (318). In some implementations, the DSP 150 may further select digital components (e.g., the top N digital components) by analyzing and scoring each of the one or more selected digital components. For example, this score may be based on contextual data, expected performance of the digital component, and/or additional information.
The DSP 150 transmits data for the one or more selected digital components to the SSP170 (320). For example, the DSP 150 may respond to a request for a digital component of the SSP170 by transmitting one or more selected digital components or data identifying the digital component (e.g., a creative element that includes instructions for rendering the digital component). For each digital component, DSP 150 may also generate or select selection parameters for the digital component. DSP 150 may then transfer the digital component's selection parameters and data to SSP 170. Each digital component (or data thereof) may include additional data, such as metadata indicating a user group identifier corresponding to the digital component.
In some implementations, the DSP 150 may also select one or more digital components based on context data that is independent of the probabilistic data structure and thus independent of the user's group membership. These digital components may also be referred to as contextual digital components.
The SSP170 selects a set of digital components (322). For example, after receiving data for one or more selected digital components from DSP 150, SSP170 may review and select a set of digital components (e.g., the first K digital components). For example, the SSP170 may examine the content and format of the digital component to ensure that it meets various criteria, e.g., does not include a particular type of content, meets data and/or display size requirements, etc.
In some implementations, SSP170 selects a digital component based at least in part on selection parameters received from DSP 150. In such implementations, SSP170 may select the digital component with the highest selection parameter among the selection parameters received from DSP 150.
The SSP170 transmits the set of digital components to the client device 110 (324). For example, after selecting the set of digital components (e.g., the first K digital components), the SSP170 transmits the set of digital components (or data of the digital components) to the application 112 executing on the client device 110 over the network 105. In some implementations, SSP170 can transmit a set of selection parameters along with the set of digital components.
In some implementations, the list of digital components transmitted by SSP170 can be ordered based on a selection parameter. This enables the application 112 to select the digital component without knowing the actual selection parameters. For each digital component, the digital component list may also include data indicating a user group identifier corresponding to the digital component. This enables application 112 to filter out digital components of user groups of which the user is not a member.
In some implementations, this list includes a numeric component selected based on the probabilistic data structure and at least one contextual numeric component. In particular implementations, the list may include a number component selected in an order based on the selection parameter (e.g., from high to low) based on the probabilistic data structure and one context-number component at the end of the list (e.g., the context-number component having the highest selection parameter among all the context-number components received from DSP 150). In this manner, contextual digital components may be selected and presented by the application 112 if none of the digital components selected based on the probabilistic data structure have a user group identifier that matches the user's true user group identifier.
The application 112 running on the client device 110 selects a filtered subset of the digital components (326). By filtering out one or more digital components from the set of digital components that do not have a corresponding user group identifier that matches one of the real user identifiers in the first set of user group identifiers, the application 112 executing on the client device may select a filtered subset of digital components after receiving the set of digital components from the SSP 170. For example, to filter out one or more digital components from the set of digital components, the application 112 compares each subscriber group identifier of the digital components to the real subscriber group identifier of the user in the subscriber group list 114, e.g., stored at the client device 110.
For each digital component, the application 112 may compare one or more user group identifiers of the digital component to the user's real user group identifier. If no user group identifiers match, application 112 can filter the digital components from the collection of digital components. If at least one user group identifier matches, the application 112 can maintain the digital component in the set of digital components. This filtering may result in identifying one or more digital components of the set of digital components that do not have a corresponding subscriber group identifier that matches one of the real subscriber group identifiers. A filtered subset of digital components is then generated by the application 112 by removing the identified one or more digital components from the set of digital components.
FIG. 4 is a flow diagram illustrating a process 400 for generating a probabilistic data structure based on one or more user groups associated with a user of a client device. The operations of process 400 may be performed, for example, by client device 110. The operations of process 400 may also be implemented as instructions stored on one or more computer-readable media, which may be non-transitory, and execution of the instructions by one or more data processing devices may cause the one or more data processing devices to perform the operations of process 400.
A first set of real user group identifiers identifying user groups of which the user is a member is obtained (410). As described above with reference to fig. 2, a user of client device 110 may be associated with one or more user groups. In other words, the user of client device 110 may be a member of one or more user groups. Each user group is identified by a user group identifier stored on the client device 110 to maintain the privacy of the user. For example, the application 112, e.g., a web browser, may maintain a user group list 114 that includes one or more user group identifiers and store the user group list on the client device. The one or more subscriber group identifiers form a first set of real subscriber group identifiers of which the user is actually a member.
Zero or more real user group identifiers are removed from the first set of user group identifiers to generate a second set of user group identifiers (420). In some implementations, the application randomly or pseudo-randomly selects one or more of the real subscriber group identifiers to remove from the first set of subscriber group identifiers. For example, assume that the user group list 114 maintained by the application 112 includes five user group identifiers S1, S2, S3, S4, and S5. It is also assumed that S2 and S5 are randomly selected and removed. In this case, the second set of subscriber group identifiers includes S1, S3, and S4. In some implementations, the application 112 may not remove any real user group identifiers, e.g., depending on the target privacy level.
One or more false user group identifiers for user groups of which the user is not a member are added to the second set of user group identifiers (430). In some implementations, the application 112 randomly or pseudo-randomly selects one or more dummy user groups to add to the second set of user group identifiers. The false user group identifier is for a user group of which the user is not a member. For example, assume that the selected two or more false user group identifiers include S23 and S27 and that the user is not a member of the group corresponding to these user group identifiers. In this case, the second set of subscriber group identifiers would include S1, S3, S4, S23, and S27.
In some implementations, the false user group identifier does not actually represent a user group at all. For example, the application 112 may not know every user group managed by the DSP 150. The application 112 may generate a false user group identifier that may be only a random alphanumeric sequence, rather than selecting from a user group of which the user is not a member. By adding and removing user group identifiers in this manner, the application 112 can achieve differential privacy for each user.
A hash output is generated for each subscriber group identifier in the second set of subscriber group identifiers (440). The hash may be generated such that the hash output has a uniform distribution across all user group identifiers. As previously described, a hash function may be used to generate a hash output for each subscriber group identifier in the second set of subscriber group identifiers. For example, the application 112 hashes a message authentication code (HMAC) using a key, the HMAC implemented using a secure hash algorithm (SHA256), which is a cryptographic hash function having a digest length of 256 bits, to generate a 256-bit (32-byte) output of the hash of each of the subscriber group identifiers in the second set of subscriber group identifiers.
A probabilistic data structure is generated (450) that includes a hash output of each subscriber group identifier in the second set of group identifiers. In some implementations, a probabilistic data structure, such as a bloom filter or a cuckoo filter, is used to generate a spatially-efficient data structure that can be used to transmit information about user group identifiers from the client device 110 to the SSP 170. For example, assume that the subscriber group list 114 maintained by the application 112 includes 200 subscriber group identifiers. The hash output size of a single subscriber group identifier using HMAC-SHA256 would be 256 bits. In this case, the total size of the hash output of all 200 subscriber group identifiers in the subscriber group list 114 would be 51,200 bits (i.e., 6.4 kB). When using a bloom filter with a 1% probability of false positives, each user group identifier may be represented by less than 10 bits. In this case, 200 subscriber group identifiers in the subscriber group list 114 may be represented using 2000 bits (i.e., 250 bytes).
In some implementations, the application 112 generates a new probabilistic data structure for each request for a digital component sent by the application 112. In this way, the data structure is different for each request based on the user group identifiers that are added and removed randomly or pseudo-randomly. This prevents DSP 150 from tracking users based on user group membership. Since in some cases it may be possible to remove the subscriber group identifier of the DSP 150, the subscriber group identifier of the DSP 150 may be represented in at least one of the probabilistic data structures by changing the probabilistic data structure. In some implementations, the application 112 generates a new probabilistic data structure for each domain accessed by the application 112, but uses the same probabilistic data structure for multiple requests from the same domain.
FIG. 5 is a block diagram of an example computer system 500 that may be used to perform the operations described above. The system 500 includes a processor 510, a memory 520, a storage 530, and an input/output device 540. Each of the components 510, 520, 530, and 540 may be interconnected, for example, using a system bus 550. Processor 510 is capable of processing instructions for execution within system 500. In some implementations, the processor 510 is a single-threaded processor. In another implementation, the processor 510 is a multi-threaded processor. The processor 510 is capable of processing instructions stored in the memory 520 or on the storage device 530.
The storage device 530 is capable of providing mass storage for the system 500. In some implementations, the storage 530 is a computer-readable medium. In various different implementations, the storage 530 may include, for example, a hard disk device, an optical disk device, a storage device shared by multiple computing devices over a network (e.g., a cloud storage device), or some other mass storage device.
The input/output device 540 provides input/output operations for the system 500. In some implementations, the input/output device 540 can include one or more of a network interface device, such as an ethernet card, such as a serial communications device, and an RS-232 port, and/or a wireless interface device, such as a 802.11 card. In another implementation, the input/output devices may include driver devices configured to receive input data and send output data to external devices 560, such as keyboards, printers, and display devices. However, other implementations may also be used, such as mobile computing devices, mobile communication devices, set-top box television client devices, and so forth.
Although an example processing system has been described in fig. 5, implementations of the subject matter and the functional operations described in this specification can be implemented in other types of digital electronic circuitry, or in computer software, firmware, or hardware, including the structures disclosed in this specification and their structural equivalents, or in combinations of one or more of them.
Embodiments of the subject matter and the operations described in this specification can be implemented in digital electronic circuitry, or in computer software, firmware, or hardware, including the structures disclosed in this specification and their structural equivalents, or in combinations of one or more of them. Embodiments of the subject matter described in this specification can be implemented as one or more computer programs, i.e., one or more modules of computer program instructions encoded on one or more computer storage media for execution by, or to control the operation of, data processing apparatus. Alternatively or in addition, program instructions may be encoded on an artificially generated propagated signal, e.g., a machine-generated electrical, optical, or electromagnetic signal, that is generated to encode information for transmission to suitable receiver apparatus for execution by a data processing apparatus. The computer storage medium may be, or included in, a computer-readable storage device, a computer-readable storage substrate, a random or serial access memory array or device, or a combination of one or more of them. In addition, although a computer storage medium is not a propagated signal, a computer storage medium may be a source or destination of computer program instructions encoded in an artificially generated propagated signal. The computer storage medium may also be, or may be included in, one or more separate physical components or media (e.g., multiple CDs, disks, or other storage devices).
The operations described in this specification may be implemented as operations performed by a data processing apparatus on data stored on one or more computer-readable storage devices or received from other sources.
The term "data processing apparatus" encompasses all kinds of apparatus, devices, and machines for processing data, including by way of example a programmable processor, a computer, a system on a chip, or multiple systems on a chip, or a combination of the foregoing. An apparatus can comprise special purpose logic circuitry, e.g., an FPGA (field programmable gate array) or an ASIC (application-specific integrated circuit). The apparatus can include, in addition to hardware, code that creates an execution environment for the computer program in question, e.g., code that constitutes processor firmware, a protocol stack, a database management system, an operating system, a cross-platform execution environment, a virtual machine, or a combination of one or more of them. The devices and execution environments may implement a variety of different computing model infrastructures, such as web services, distributed computing infrastructures, and grid computing infrastructures.
A computer program (also known as a program, software application, script, or code) can be written in any form of programming language, including compiled or interpreted languages, declarative or procedural languages, and it can be deployed in any form, including as a stand-alone program or as a module, component, subroutine, object, or other unit suitable for use in a computing environment. A computer program may, but need not, correspond to a file in a file system. A program can be stored in a portion of a file that holds other programs or data (e.g., one or more scripts stored in a markup language document), in a single file dedicated to the program in question, or in multiple coordinated files (e.g., files that store one or more modules, sub programs, or portions of code). A computer program can be deployed to be executed on one computer or on multiple computers that are located at one site or distributed across multiple sites and interconnected by a communication network.
The processes and logic flows described in this specification can be performed by one or more programmable processors executing one or more computer programs to perform actions by operating on input data and generating output. The processes and logic flows can also be performed by, and apparatus can also be implemented as, special purpose logic circuitry, e.g., an FPGA (field programmable gate array) or an ASIC (application-specific integrated circuit).
Processors suitable for the execution of a computer program include, by way of example, both general and special purpose microprocessors. Generally, a processor will receive instructions and data from a read-only memory or a random access memory or both. The essential elements of a computer are a processor for performing actions in accordance with instructions, and one or more memory devices for storing instructions and data. Generally, a computer will also include, or be operatively coupled to receive data from or transfer data to, or both, one or more mass storage devices for storing data, e.g., magnetic, magneto-optical disks, or optical disks. However, the computer need not have such devices. Moreover, a computer may be embedded in another device, e.g., a mobile phone, a Personal Digital Assistant (PDA), a mobile audio or video player, a game console, a Global Positioning System (GPS) receiver, or a portable storage device (e.g., a Universal Serial Bus (USB) flash drive), to name a few. Means suitable for storing computer program instructions and data include all forms of non-volatile memory, media and memory devices, including by way of example semiconductor memory devices, e.g., EPROM, EEPROM, and flash memory devices; magnetic disks, such as internal hard disks or removable disks; a magneto-optical disk; and CD-ROM and DVD-ROM disks. The processor and the memory can be supplemented by, or incorporated in, special purpose logic circuitry.
To provide for interaction with a user, embodiments of the subject matter described in this specification can be implemented on a computer having a display device, e.g., a CRT (cathode ray tube) or LCD (liquid crystal display) monitor, for displaying information to the user and a keyboard and a pointing device, e.g., a mouse or a trackball, by which the user can provide input to the computer. Other kinds of devices may also be used to provide for interaction with the user; for example, feedback provided to the user can be any form of sensory feedback, e.g., visual feedback, auditory feedback, or tactile feedback; and input from the user can be received in any form, including acoustic, speech, or tactile input. In addition, by sending and receiving documents to and from a device used by a user; for example, a computer may interact with a user by sending web pages to a web browser on the user's client device in response to requests received from the web browser.
Embodiments of the subject matter described in this specification can be implemented in a computing system that includes a back end component, e.g., as a data server, or that includes a middleware component, e.g., an application server, or that includes a front end component, e.g., a client computer having a graphical user interface or a Web browser through which a user can interact with an implementation of the subject matter described is this specification, or any combination of one or more such back end, middleware, or front end components. The components of the system can be interconnected by any form or medium of digital data communication, e.g., a communication network. Examples of communication networks include a local area network ("LAN") and a wide area network ("WAN"), the internet (e.g., the internet), and peer-to-peer networks (e.g., ad hoc peer-to-peer networks).
The computing system may include clients and servers. A client and server are generally remote from each other and typically interact through a communication network. The relationship of client and server arises by virtue of computer programs running on the respective computers and having a client-server relationship to each other. In some embodiments, the server transmits data (e.g., HTML pages) to the client device (e.g., for the purpose of displaying data to and receiving user input from a user interacting with the client device). Data generated at the client device (e.g., a result of the user interaction) may be received from the client device at the server.
While this specification contains many specific implementation details, these should not be construed as limitations on the scope of any inventions or of what may be claimed, but rather as descriptions of features specific to particular embodiments of particular inventions. Certain features that are described in this specification in the context of separate embodiments can also be implemented in combination in a single embodiment. Conversely, various features that are described in the context of a single embodiment can also be implemented in multiple embodiments separately or in any suitable subcombination. Moreover, although features may be described above as acting in certain combinations and even initially claimed as such, one or more features from a claimed combination can in some cases be excised from the combination, and the claimed combination may be directed to a subcombination or variation of a subcombination.
Similarly, while operations are depicted in the drawings in a particular order, this should not be understood as requiring that such operations be performed in the particular order shown or in sequential order, or that all illustrated operations be performed, to achieve desirable results. In some cases, multitasking and parallel processing may be advantageous. Moreover, the separation of various system components in the embodiments described above should not be understood as requiring such separation in all embodiments, and it should be understood that the described program components and systems can generally be integrated together in a single software product or packaged into multiple software products.
Thus, particular embodiments of the subject matter have been described. Other embodiments are within the scope of the following claims. In some cases, the actions recited in the claims can be performed in a different order and still achieve desirable results. In addition, the processes depicted in the accompanying figures do not necessarily need to be in the particular order shown, or in sequential order, to achieve desirable results. In some implementations, multitasking and parallel processing may be advantageous.
Claims (16)
1. A computer-implemented method, comprising:
obtaining a first set of real user group identifiers identifying user groups comprising users as members;
generating a second set of subscriber group identifiers for the user based on the first set of real subscriber group identifiers, the generating comprising:
removing zero or more real user group identifiers from the first set of user group identifiers to generate a second set of the user group identifiers; and
adding one or more false user group identifiers to the second set of user group identifiers for user groups that do not include the user as a member;
generating a probabilistic data structure based on the second set of subscriber group identifiers;
transmitting the probabilistic data structure to a recipient computing system;
receiving data indicative of a set of digital components, the set of digital components including at least one digital component selected based on the probabilistic data structure;
selecting a given digital component from the set of digital components; and
presenting the given digital component.
2. The computer-implemented method of claim 1, wherein removing zero or more real user group identifiers from the first set of user group identifiers comprises removing a plurality of real user group identifiers from the first set of user group identifiers.
3. The computer-implemented method of claim 2, the set of digital components comprising one or more additional digital components not selected based on the probabilistic data structure.
4. The computer-implemented method of claim 2 or 3, wherein selecting a given digital component from the set of digital components comprises:
generating a filtered subset of digital components by filtering from the set of digital components one or more digital components that do not have a corresponding user group identifier that matches one of the real user identifiers;
selecting the given digital component from the filtered subset of digital components.
5. The computer-implemented method of claim 4, wherein filtering from the collection of digital components one or more digital components that do not have a corresponding user group identifier that matches one of the real user group identifiers comprises:
for each digital component in the set of digital components:
identifying, in data indicative of the set of digital components, one or more corresponding user group identifiers for the digital components, each corresponding user identifier being a user group identifier for selecting a digital component included in the set of digital components; and
comparing each corresponding user identifier with real user group identifiers in the first set of user group identifiers;
removing each digital component from the set of digital components that does not have a corresponding user group identifier that matches one of the real user group identifiers in the first set of user group identifiers.
6. The computer-implemented method of any preceding claim, wherein:
the data indicative of the set of digital components includes data identifying first digital components each having one or more corresponding user group identifiers, and data identifying one or more second digital components not having any corresponding user group identifiers;
selecting a given digital component from the set of digital components includes removing each first digital component from the set of digital components, wherein none of the corresponding user group identifiers of the first digital components match a real user group identifier.
7. The computer-implemented method of claim 6, wherein selecting a given digital component from the set of digital components comprises selecting a second digital component when all of the first digital components are removed from the set of digital components.
8. The computer-implemented method of any preceding claim, wherein the recipient computing system selects a subset of user groups from a plurality of user groups based on the probabilistic data structure and selects a set of digital components corresponding to the subset of user groups.
9. The computer-implemented method of any preceding claim, wherein the probabilistic data structure comprises a bloom filter or a cuckoo filter.
10. The computer-implemented method of any preceding claim, wherein:
removing one or more real subscriber group identifiers from the first set of subscriber group identifiers comprises randomly or pseudo-randomly selecting the one or more real subscriber group identifiers; and
adding one or more false subscriber group identifiers to the second set of group identifiers comprises randomly or pseudo-randomly selecting the one or more false subscriber group identifiers.
11. The computer-implemented method of any preceding claim, wherein each real user identifier is based on a combination of: (i) creating a domain of an entity of the user group identified by the real user group identifier, and (ii) a unique identifier of the user group identified by the real user group identifier.
12. The computer-implemented method of claim 10, wherein each real subscriber group identifier is a message authentication code generated based on a combination of the domain and the unique identifier.
13. The computer-implemented method of any preceding claim, wherein generating the probabilistic data structure based on the second set of group identifiers comprises:
generating a hash output for each subscriber group identifier, the hash output having a uniform distribution across all subscriber group identifiers; and
generating the probabilistic data structure comprising a hash output of each subscriber group identifier in the second set of group identifiers.
14. A system, comprising:
one or more processors; and
one or more storage devices storing instructions that, when executed by the one or more processors, cause the one or more processors to perform the method of any preceding claim.
15. A computer-readable medium carrying instructions that, when executed by one or more processors, cause the one or more processors to carry out the method of any one of claims 1 to 13.
16. A computer program product comprising instructions which, when executed by a computer, cause the computer to perform the steps of the method according to any one of claims 1 to 13.
Applications Claiming Priority (3)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
IL277642 | 2020-09-29 | ||
IL277642A IL277642A (en) | 2020-09-29 | 2020-09-29 | Additive and subtractive noise for privacy protection |
PCT/US2021/028170 WO2022071994A1 (en) | 2020-09-29 | 2021-04-20 | Additive and subtractive noise for privacy protection |
Publications (1)
Publication Number | Publication Date |
---|---|
CN114930334A true CN114930334A (en) | 2022-08-19 |
Family
ID=80951582
Family Applications (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
CN202180008129.5A Pending CN114930334A (en) | 2020-09-29 | 2021-04-20 | Additive and subtractive noise for privacy protection |
Country Status (7)
Country | Link |
---|---|
US (1) | US20230052628A1 (en) |
EP (1) | EP4066440A1 (en) |
JP (1) | JP7448663B2 (en) |
KR (1) | KR20220107035A (en) |
CN (1) | CN114930334A (en) |
IL (1) | IL277642A (en) |
WO (1) | WO2022071994A1 (en) |
Family Cites Families (5)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
WO2012146508A1 (en) | 2011-04-25 | 2012-11-01 | Alcatel Lucent | Privacy protection in recommendation services |
US10430830B2 (en) | 2015-06-16 | 2019-10-01 | Samsung Electronics Co., Ltd. | Advertisement selection using uncertain user data |
US20170017973A1 (en) | 2015-07-13 | 2017-01-19 | Iperceptions Inc. | Method and survey server for generating predictive survey participation patterns using online profile data |
US20170091824A1 (en) | 2015-09-25 | 2017-03-30 | The Provost, Fellows, Foundation Scholars, And The Other Members Of The Board | Method and system for providing item recommendations in a privacy-enhanced manner |
JP6965885B2 (en) | 2016-08-19 | 2021-11-10 | 日本電気株式会社 | Information processing equipment, information processing methods, and programs |
-
2020
- 2020-09-29 IL IL277642A patent/IL277642A/en unknown
-
2021
- 2021-04-20 CN CN202180008129.5A patent/CN114930334A/en active Pending
- 2021-04-20 US US17/794,040 patent/US20230052628A1/en active Pending
- 2021-04-20 JP JP2022541675A patent/JP7448663B2/en active Active
- 2021-04-20 WO PCT/US2021/028170 patent/WO2022071994A1/en unknown
- 2021-04-20 EP EP21724134.8A patent/EP4066440A1/en active Pending
- 2021-04-20 KR KR1020227022122A patent/KR20220107035A/en not_active Application Discontinuation
Also Published As
Publication number | Publication date |
---|---|
JP2023516541A (en) | 2023-04-20 |
JP7448663B2 (en) | 2024-03-12 |
US20230052628A1 (en) | 2023-02-16 |
KR20220107035A (en) | 2022-08-01 |
WO2022071994A1 (en) | 2022-04-07 |
IL277642A (en) | 2022-04-01 |
EP4066440A1 (en) | 2022-10-05 |
Similar Documents
Publication | Publication Date | Title |
---|---|---|
JP2023067928A (en) | Using secure multi-party computation to improve content selection process integrity | |
US20230188329A1 (en) | Using secure multi-party computation and probabilistic data structures to protect access to information | |
EP4066199A1 (en) | Feedback controller using secret sharing | |
JP2023089216A (en) | Secured management of data distribution restriction | |
US20220405407A1 (en) | Privacy preserving cross-domain machine learning | |
US20230052628A1 (en) | Additive and subtractive noise for privacy protection | |
US20240163259A1 (en) | Privacy preserving group-based content distribution | |
US11968297B2 (en) | Online privacy preserving techniques | |
JP7471450B2 (en) | Improving the performance of secure multiparty computation | |
US11841978B2 (en) | Protecting access to information in online interactions | |
US20240022392A1 (en) | Privacy preserving measurements using secure multi-party computation | |
US20230171091A1 (en) | Flexible content selection processes using secure multi-party computation | |
WO2023234940A1 (en) | Privacy preserving group-based content distribution | |
WO2024030200A1 (en) | Single request architecture for increasing efficiency of secure multi-party computations |
Legal Events
Date | Code | Title | Description |
---|---|---|---|
PB01 | Publication | ||
PB01 | Publication | ||
SE01 | Entry into force of request for substantive examination | ||
SE01 | Entry into force of request for substantive examination |