US5768417A - Method and system for velocity-based handwriting recognition - Google Patents
Method and system for velocity-based handwriting recognition Download PDFInfo
- Publication number
- US5768417A US5768417A US08/566,358 US56635895A US5768417A US 5768417 A US5768417 A US 5768417A US 56635895 A US56635895 A US 56635895A US 5768417 A US5768417 A US 5768417A
- Authority
- US
- United States
- Prior art keywords
- extrema
- substroke
- local extrema
- peak
- local
- Prior art date
- Legal status (The legal status is an assumption and is not a legal conclusion. Google has not performed a legal analysis and makes no representation as to the accuracy of the status listed.)
- Expired - Lifetime
Links
Images
Classifications
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06V—IMAGE OR VIDEO RECOGNITION OR UNDERSTANDING
- G06V30/00—Character recognition; Recognising digital ink; Document-oriented image-based pattern recognition
- G06V30/10—Character recognition
- G06V30/14—Image acquisition
- G06V30/142—Image acquisition using hand-held instruments; Constructional details of the instruments
- G06V30/1423—Image acquisition using hand-held instruments; Constructional details of the instruments the instrument generating sequences of position coordinates corresponding to handwriting
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F18/00—Pattern recognition
- G06F18/20—Analysing
- G06F18/24—Classification techniques
- G06F18/245—Classification techniques relating to the decision surface
- G06F18/2453—Classification techniques relating to the decision surface non-linear, e.g. polynomial classifier
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06V—IMAGE OR VIDEO RECOGNITION OR UNDERSTANDING
- G06V30/00—Character recognition; Recognising digital ink; Document-oriented image-based pattern recognition
- G06V30/10—Character recognition
- G06V30/14—Image acquisition
- G06V30/148—Segmentation of character regions
- G06V30/153—Segmentation of character regions using recognition of characters or words
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06V—IMAGE OR VIDEO RECOGNITION OR UNDERSTANDING
- G06V30/00—Character recognition; Recognising digital ink; Document-oriented image-based pattern recognition
- G06V30/10—Character recognition
- G06V30/22—Character recognition characterised by the type of writing
- G06V30/226—Character recognition characterised by the type of writing of cursive writing
- G06V30/2268—Character recognition characterised by the type of writing of cursive writing using stroke segmentation
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06V—IMAGE OR VIDEO RECOGNITION OR UNDERSTANDING
- G06V30/00—Character recognition; Recognising digital ink; Document-oriented image-based pattern recognition
- G06V30/10—Character recognition
- G06V30/24—Character recognition characterised by the processing or recognition method
- G06V30/248—Character recognition characterised by the processing or recognition method involving plural approaches, e.g. verification by template match; Resolving confusion among similar patterns, e.g. "O" versus "Q"
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06V—IMAGE OR VIDEO RECOGNITION OR UNDERSTANDING
- G06V30/00—Character recognition; Recognising digital ink; Document-oriented image-based pattern recognition
- G06V30/10—Character recognition
- G06V30/26—Techniques for post-processing, e.g. correcting the recognition result
- G06V30/262—Techniques for post-processing, e.g. correcting the recognition result using context analysis, e.g. lexical, syntactic or semantic context
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06V—IMAGE OR VIDEO RECOGNITION OR UNDERSTANDING
- G06V30/00—Character recognition; Recognising digital ink; Document-oriented image-based pattern recognition
- G06V30/10—Character recognition
- G06V30/32—Digital ink
- G06V30/333—Preprocessing; Feature extraction
- G06V30/347—Sampling; Contour coding; Stroke extraction
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06V—IMAGE OR VIDEO RECOGNITION OR UNDERSTANDING
- G06V30/00—Character recognition; Recognising digital ink; Document-oriented image-based pattern recognition
- G06V30/10—Character recognition
- G06V30/32—Digital ink
- G06V30/36—Matching; Classification
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06V—IMAGE OR VIDEO RECOGNITION OR UNDERSTANDING
- G06V30/00—Character recognition; Recognising digital ink; Document-oriented image-based pattern recognition
- G06V30/10—Character recognition
Definitions
- This invention relates generally to handwriting recognition and, in particular, to a computer implementable system for handwriting recognition.
- handwriting recognition is not a trivial task.
- handwriting tends to vary considerably from one person to another.
- handwriting can include isolated, connected (cursive), or mixture of characters, that is a combination of both isolated and connected characters.
- Syntactic pattern recognition is a pattern recognition technique based on the assumption that a pattern is a composition of primitive sub-pattern elements. Under this assumption, sub-patterns may be related with a syntax. Using a syntax, it is then possible to define a formal grammar which recognizes the presence or absence of a particular pattern of primitives. The representational capability of this technique generally exceeds that found in other methods of pattern recognition and is thus the primary appeal of syntactic pattern recognition. However, as the complexity of a pattern increases, it becomes increasingly difficult to define a formal grammar. Additionally, once a grammar has been defined it is adversely affected by unexpected variations in the patterns and class definitions.
- Time delay neural networks are a class of neural networks in which the temporal dynamics of patterns are coded in the TDNN architecture with delay-like elements and captured during the training phase of the TDNN.
- researchers have used this class of neural network for handwriting and speech recognition.
- the disadvantage of using a TDNN for handwriting recognition is that pattern warping and compression must be captured during the training phase, resulting in a training phase which is very computational intensive and thus very time consuming.
- HMM Hidden Markov modeling
- HMM An immediate difficulty with HMM is its complexity, which leads to problems in implementation. In practice there are a large number of inter-related tuning parameters, and some of the tuning parameters require a priori knowledge that often isn't available. In addition, the training samples used for HMM must be selected according to fairly complex criteria. Another drawback of implementing HMM is that the computational costs in the forward-backward computation (which is used for maximum likelihood estimation of the model parameters) can be prohibitively expensive.
- the prior art also teaches frame-based handwriting recognition systems.
- input data streams are broken down into a plurality of data frames.
- the frames are then processed to identify the handwriting input.
- Frame-based recognition systems provide many advantages, including improved recognition processing speed and reduced computational complexity.
- known techniques for partitioning input streams into data frames are inefficient and unreliable.
- the prior art provides data frame extraction techniques based on spatial attributes of handwriting input.
- One such technique equates data frame boundaries to points in the handwriting input having high curvatures.
- This technique has difficulty with reliably partitioning input characters having loops, such as the letters "o", "g", and "a".
- the prior art also teaches the use of fixed length data frames. With this approach, data frame boundaries are determined without regard to the characteristics of the handwriting input, consequently reducing the accuracy of a handwriting recognition system.
- FIG. 1 illustrates a block diagram of a first handwriting recognition system that can incorporate an embodiment of the present invention.
- FIG. 2 illustrates a flow diagram of a method of operating the handwriting recognition system shown in FIG. 1.
- FIG. 3 illustrates a block diagram of a second handwriting recognition system that can incorporate an embodiment of the present invention.
- FIG. 4 illustrates a block diagram representing the accumulator/selector shown in FIG. 3.
- FIG. 5 illustrates a block diagram of a third handwriting recognition system that can incorporate an embodiment of the present invention.
- FIG. 6 depicts a graphical representation of a confusion matrix.
- FIG. 7 illustrates a block diagram representing the accumulator/selector shown in FIG. 5.
- FIG. 8 illustrates a flow diagram of a method of operating the handwriting recognition system shown in FIG. 5.
- FIG. 9 illustrates a block diagram representing a frame extractor in accordance with a first embodiment of the present invention.
- FIG. 10 illustrates a graphical representation of handwriting text.
- FIG. 11 illustrates a graphical representation of a velocity profile corresponding to the handwriting text of FIG. 10.
- FIG. 12 illustrates a graphical representation of an exemplary velocity profile.
- FIG. 13 illustrates a flow diagram representing a method of using the frame extractor shown in FIG. 9 in accordance with second embodiment of the present invention.
- FIG. 14 illustrates a block diagram representing a frame extractor in accordance with a third embodiment of the present invention.
- FIG. 15 illustrates a flow diagram representing a method of using the frame extractor shown in FIG. 14 in accordance with a fourth embodiment of the present invention.
- FIG. 16 illustrates a block diagram representing a frame extractor in accordance with a fifth embodiment of the present invention.
- FIG. 17 illustrates a block diagram representing the peak extrema detector shown in FIG. 16.
- FIG. 18 illustrates a block diagram representing the in-line extrema detector shown in FIG. 16.
- FIG. 19 illustrates a flow diagram representing a method of using the frame extractor shown in FIG. 16 in accordance with a sixth embodiment of the present invention.
- FIG. 20 illustrates a block diagram representing an embodiment of the lexical post processor shown in FIGS. 3 and 5.
- FIG. 21 illustrates a method of using the lexical post processor shown in FIG. 20.
- FIG. 22 illustrates a detailed block diagram of the word generator shown in FIG. 20.
- FIGS. 23-25 illustrate a flow diagram representing a method using the lexical post processor of FIG. 22.
- the various embodiments of the frame extractor as described herein include an extrema filter that eliminates extremas caused by noise; thus, the embodiments of the present invention substantially improve the recognition accuracy of a HRS.
- any of the embodiments of the present invention herein disclosed may be used to identify handwriting text of many different languages and alphabets.
- a set of identifiable characters can include the upper and lower case English alphabet, numerals, punctuation marks, or handwriting gestures, such as those used to edit documents.
- FIG. 1 illustrates a block diagram of a HRS that can incorporate an embodiment of the present invention.
- the HRS comprises a feature extractor 30 and a polynomial classifier 32.
- the feature extractor 30 receives handwriting input, and in response, extracts a plurality of features from the handwriting input. The features are then provided as input to the polynomial classifier 32.
- the polynomial classifier 32 In response to the features, the polynomial classifier 32 generates a discriminant function output signal according to a polynomial expansion.
- the polynomial expansion can be represented by: ##EQU1##
- the discriminant function is preferably a second orders polynomial expansion of the form: ##EQU2##
- Equation 2 a O represents a zero-order coefficient, b i represents a first-order coefficient, and c ij represents a second-order coefficient, X i and x j represents the features, y represents the discriminant function output signal, and i, j, m and n are integers.
- the discriminant function can be based on an orthogonal function, such as a sine, cosine, exponential/logarithmic, Fourier transformation, Legendre polynomial, non-linear basis function such as a Volterra function or a radial basis function, or the like, or a combination of polynomial expansions and orthogonal functions.
- an orthogonal function such as a sine, cosine, exponential/logarithmic, Fourier transformation, Legendre polynomial, non-linear basis function such as a Volterra function or a radial basis function, or the like, or a combination of polynomial expansions and orthogonal functions.
- the polynomial discriminant function is preferably fitted to a set of samples in a p-dimensional feature space representing the examples. If the number of terms in the polynomial is equal to the number of examples, a matrix-inversion technique may be employed to solve for the value of each coefficient. If the number of terms is not equal to the number of examples, a least-squares estimation technique is employed to solve for the value of each coefficient. Suitable least-squares estimation techniques include, for example, least-squares, extended least-squares, pseudo-inverse algorithm, Kalman filter, maximum-likelihood algorithm, Bayesian estimation, and the like.
- Text in the handwriting input is identified based on the discriminant function output signal y.
- the discriminant function output signal is compared to other discriminant function outputs.
- the discriminant function output signal having the greatest magnitude designates the class of the text.
- a label associated with the class, such as an ASCII symbol representing the text, is output by the HRS.
- FIG. 2 illustrates a flow diagram of a method of operating the handwriting recognition system shown in FIG. 1.
- the plurality of features are extracted from the handwriting input.
- text in the handwriting input is identified by applying the features to a polynomial discriminant function.
- the discriminant function can be represented by either of the polynomial expansions given in Equations 1 and 2.
- FIG. 3 illustrates a block diagram of a second HRS that can incorporate an embodiment of the present invention.
- the HRS includes a pen 50, a tablet 52, a pre-processor 54, a frame extractor 56, a feature extractor 58, a plurality of character classifiers 60-64, a segment classifier 65, an accumulator/selector 66, and a lexical post-processor (LPP) 68.
- a pen 50 a tablet 52
- a pre-processor 54 includes a frame extractor 56, a feature extractor 58, a plurality of character classifiers 60-64, a segment classifier 65, an accumulator/selector 66, and a lexical post-processor (LPP) 68.
- LPP lexical post-processor
- the pen 50 is used to enter handwriting input onto tablet 52.
- the tablet 52 produces as output a sequence of coordinate-pairs that represent the handwritten text.
- the pre-processor 54 filters the sequence of coordinate-pairs to remove duplicate coordinate-pairs and unwanted noise.
- the pre-processor 54 preferably performs low pass filtering on the coordinate-pair sequence to reduce noise.
- the frame extractor 56 partitions the filtered sequence from the pre-processor 54 into a sequence of data frames.
- the data frames are then received by the feature extractor 58, which extracts a plurality of features from the data frames.
- the features are then distributed to a plurality of classifiers 60-65, four of which are shown in FIG. 3.
- Each classifier implements a different discriminant function.
- the classifiers produce a plurality of discriminant function output signals that are passed to the accumulator/selector 66.
- the accumulator/selector 66 accumulates the discriminant function output signals, over time, to generate a plurality of confidence values. Based on the confidence values, the accumulator/selector 66 determines "winning" classifiers and outputs the confidence values and class labels associated with the winning classifiers to the LPP 68.
- the LPP 68 compares at least one of the confidence values to a lexicon to generate an output signal representing the text contained in the handwriting input.
- the tablet 52 captures handwriting input and converts it into a digital format.
- Pen-based electronic devices that provide the preferable functionality of the tablet 52 are commercially available from suppliers such as Wacom, Inc.
- the tablet 52 provides a flat surface upon which a user writes.
- the surface typically includes charge coupled devices that are sensitive to the position of the tip of the pen 50 and associated with a coordinate plane having x and y axes with resolutions of 0.005".
- handwriting input can be represented by a plurality of coordinate-pairs (x, y).
- the position and movement of the pen 50 is captured by sampling the coordinate-pairs as a function of time to generate a sequence of digitized coordinate-pairs, (x, y). Although the sampling can be done at any frequency, it is preferably performed at approximately 100 Hz.
- the tablet 52 can produce pen activity indicators, such as pen-up and pen-down signals.
- pen-up signal indicates that the pen is not touching the writing surface, while the pen-down signal indicates the opposite thereof.
- a light pen on a raster monitor can also be used to provide user input to the pre-processor 54.
- the pre-processor 54 filters and smoothes the coordinate-pairs to remove noise and optimize the spectral content of the data provided to the feature extractor 58.
- the pre-processor 54 accomplishes this by passing the sequence of coordinate-pairs through one or more low pass filters (not shown). These filters can adaptively switch on or off depending on the characteristics of the data received from the tablet 52.
- the low pass filters can be multi-tap finite impulse response (FIR) filters.
- FIR finite impulse response
- the pre-processor 54 can generate more than one filtered sequence from a given sequence of coordinate-pairs.
- the pre-processor 54 includes an adaptive filter that performs the low-pass filtering.
- the adaptive filter facilitates a variable sampling rate.
- Duplicate coordinate-pairs which are generally cause by pen hesitations and noise, can also be filtered by the pre-processor 54.
- a duplicate coordinate-pair has the same (x, y) value as another coordinate-pair, but is associated with a different sampling time.
- the pre-processor 54 preferably generates a filtered sequence representing a sequence of strokes.
- a stroke is defined as the coordinate-pairs sampled from the handwriting input over a period of time beginning when the pen 50 initially contacts the writing surface of the tablet 52 and ending when the pen subsequently breaks contact with the writing surface.
- a stroke may include part of a character, a complete character, or an entire word made up of many characters.
- the pre-processor 54 preferably collects the filtered coordinate-pairs of a stroke into a single data packet which is then passed to the frame extractor 56.
- a control signal 55 can be transmitted to the accumulator/selector 66 to indicate the beginning or ending of a stroke.
- the frame extractor 56 Upon receiving a stroke of filtered coordinate-pairs, the frame extractor 56 partitions the stroke into a plurality of substrokes, also referred to as data frames or frames.
- a substroke includes a subset of stroke coordinate-pairs. Additionally, the substroke represents the preferable data unit size associated with the feature extractor 58, classifiers 60-65, and accumulator/selector 66.
- the frame extractor 56 delimits substrokes based on the velocity of the pen tip as it is writing. For the purposes of clarity, the term "velocity" as herein used refers to the scalar magnitude of velocity, or more conventionally, speed.
- the tablet 52 preferably samples the handwriting input at a constant frequency.
- the velocity of the pen tip is proportional to the physical distance between coordinate-pairs.
- the frame extractor 56 computes an approximate velocity.
- the frame extractor 56 preferably associates substroke boundaries with selected velocity minimas in the handwriting input.
- the feature extractor 58 processes each substroke it receives to extract a corresponding set of features, or measurements. This results in a representation of the substrokes which characterizes the relevant features of the handwriting input.
- the function of the feature extractor 58 can be regarded as a data reduction procedure that retains vital characteristics of the input and eliminates undesirable interference caused by irrelevant characteristics, thus easing the decision-making process of classifiers 60-65, accumulator/selector 66, and LPP 68.
- features that can be extracted are average rectilinear velocity, curvilinear velocity, angular velocity, stroke angle, data frame index, stroke curvature, Fourier coefficients, or coefficients of a polynomial.
- multi-frame features can be generated by the feature extractor 58. Examples of multi-frame features include feature continuity and feature persistence. Further details on features that can be utilized by the various embodiments of the present invention are found in copending U.S. patent application Ser. No. 08/315,784, which is hereby incorporated by reference.
- each of the classifiers 60-65 In response to the features extracted from a given substroke, each of the classifiers 60-65 generates a respective discriminant function output signal by computing a polynomial discriminant function.
- the polynomial discriminant functions generally have the form given by Equation 1 and preferably the form given by Equation 2.
- the character classifiers 60-64 designate different characters, while the segment classifier 65 designates a ligature, i.e., a portion of cursive handwriting that connect characters.
- the segment classifier produces a segment discriminant signal 67 that is used as a control signal within the accumulator/selector 66.
- the HRS can incorporate one or more segment classifiers.
- the segments are identified in order to determine the boundaries of each character. Determining the boundaries of a character increases the probability of correctly identifying the character. Segments are identified in the same manner as characters, that is, they are identified by classifying features.
- a sequence of substrokes is classified by the classifiers 60-65.
- each of the classifiers 60-65 generates a respective sequence of discriminant function output signals.
- Each sequence of classifier outputs is independently accumulated by the accumulator/selector 66 to generate a character confidence value corresponding to a respective classifier.
- the character confidence value indicates the relative likelihood that the substroke sequence represent a particular character or segment.
- the accumulator/selector 66 determines which of the character confidence values has the largest magnitude and then selects a label representing the corresponding character identity.
- the accumulator/selector 66 provides a word comprising one or more character labels and character confidence values.
- the accumulator/selector 66 essentially stores identified characters until a complete stroke is received by the HRS, as indicated by the control signal 55. After processing the entire stroke, the accumulator/selector 66 passes the word to the LPP 68.
- the output produced by the accumulator/selector 66 is preferably a digital word coded in a computer-readable format.
- the output provided may vary in form depending on the application of the system. As with any of the signals herein described, the output could also be an analog or optical signal.
- the LPP 68 compares the word information it receives to one or more lexicons. This comparison process increases the overall accuracy of the HRS in recognizing handwritten words. As output, the LPP 68 produces either the original word it received from the accumulator/selector 66, a replacement word selected from the lexicon, or a suggestion list of related words.
- FIG. 4 illustrates a detailed block diagram of the accumulator/selector 66 shown in FIG. 3.
- the accumulator/selector 66 includes a plurality of class accumulators 80-84, a selector 86, a plurality of class labels 92, a switch 88, and a character accumulator 90.
- the class accumulators 80-84 sum discriminant function outputs from respective ones of the character classifiers 60-64 to generate character confidence values.
- the selector 86 selects the character confidence value having the greatest magnitude and then passes this selected confidence value to the character accumulator 90.
- the selector 86 generates a switch control signal 89 that is used by the switch 88 to select the class label associated with the greatest confidence value.
- the class accumulators 80-84 and the selector 86 are reset when a segment confidence value, which is based on the segment discriminant signal 67, exceeds a predetermined segment threshold value.
- the segment discriminant signal 67 can be accumulated over a sequence of frames to produce the segment confidence value.
- segment discriminant signal 67 is compared to a statistical curve template to reset the class accumulators 80-84 and the selector 86.
- the class labels 92 identify the characters in the alphabet being used by the HRS.
- the class labels 92 can be implemented using digital words that are stored in computer memory.
- the switch control signal 89 could be a memory address, while the switch 88 could be an address decoder coupled to the computer memory.
- the digital words preferably represent ASCII symbols.
- the character accumulator 90 retains the selected class labels and confidence values until the control signal 55 indicates that an entire word has been processed.
- the control signal 55 can be time delayed to account for latency in the HRS processes preceding the character accumulator 90.
- the character accumulator 90 generates the output word for the accumulator/selector 66.
- FIG. 5 illustrates a block diagram of a third HRS that can incorporate an embodiment of the present invention.
- the HRS of FIG. 5 comprises many of the elements described in conjunction with the HRS shown in FIG. 3, that is, the pen 50, the tablet 52, the pre-processor 54, the frame extractor 56, the feature extractor 58, the character and segment classifiers 60-65, and the LPP 68.
- the HRS of FIG. 5 also includes a meta-class classifier 100 and a meta-class accumulator/selector 106.
- the meta-class classifier 100 and accumulator/selector 106 significantly improve the recognition accuracy of the HRS.
- a meta-class is a class that includes two or more characters. Generally, a meta-class includes characters that are not easily discernible from one another. For example, a first meta-class could include the cursive characters i, e, and c, and a second meta-class could include cursive m and n. Meta-classes are defined by using a confusion matrix to determine class membership. Meta-classes and meta-class characters are recognized by the HRS in the same manner as characters, that is, they are identified by classifying features using a polynomial expansion having the form of either Equation 1 or 2 given above.
- meta-classes provides superior recognition capability when two or more classes are sufficiently similar that the extracted features do not adequately distinguish between them.
- One such example is that of lower case cursive ⁇ m ⁇ and ⁇ n ⁇ .
- the features typically employed in an HRS would nearly always confuse "m” with "n”.
- the associated meta-class classifier can be trained to recognize either "m” or "n” inputs. This yields a robust, highly accurate "mn” meta-class classifier. Inputs identified as belonging to the meta-class can then be further scrutinized by the locally trained "m” and "n” meta-class character classifiers.
- the meta-class character classifiers specifically delineated between the two members of the meta-class, "m” and "n".
- localized features specific to the meta-class members, can be provided to the meta-class character classifiers.
- the "m” and “n” polynomial discriminant functions are separately trained (fitted to examples) so that a training algorithm, such as the singular value decomposition (SVD) algorithm takes advantage of the discriminating information these features provide.
- SVD singular value decomposition
- the meta-class classifier 100 generates a discriminant signal that is usable for identifying text in the handwriting input.
- the meta-class accumulator/selector 106 outputs an identified word based on the character confidence values and discriminant signal.
- FIG. 6 depicts a graphical representation of a confusion matrix.
- the confusion matrix consists of empirical results of the HRS's character recognition performance. Typically, these results are obtained without the use of the LPP 68.
- the confusion matrix provides a basis for a handwriting error model that is useful for improving the recognition performance of the HRS.
- the confusion matrix consists of empirical results of the HRS's character recognition performance during a validation session.
- a validation session is the act of processing a plurality of handwriting examples with the HRS in order to create a confusion matrix.
- the validation session occurs without the use of the LPP 68.
- the confusion matrix provides a basis for a handwriting error model that is useful for improving the recognition performance of the HRS.
- the columns in the confusion matrix indicate a known input character and the rows indicate the actual character identified by the HRS during a validation session.
- Each character in an alphabet has a matrix column associated with it.
- Each numeric value in the matrix represents the number of times the identified character in the row was generated in response to examples of the known input character indicated by corresponding column. For instance, the total of the values in the "a” column is 1104.
- the value at location (a,a) is "665". This value means that the HRS correctly identified the letter "a” 665 times out of 1104, or 60.23% of the time.
- the value at (a, b) is "45". This value indicates that the HRS incorrectly identified the input character "a” as a "b” 45 times.
- a meta-class is defined based on the ratios of the various numbers in a given column. Generally, a relatively large number residing off the matrix diagonal indicates that a character classifier is confusing an input character with another, and thus the need for a meta-class classifier.
- column "n", rows “m” and “n” indicate that a meta-class can be formed that includes the characters m and n.
- a total of 760 examples of "n” were processed. The HRS correctly identified the input "n” 306 times or 40.3%, while incorrectly identifying it as "m” 270 times.
- FIG. 7 illustrates a detailed block diagram representing the accumulator/selector shown in FIG. 5.
- the accumulator/selector 106 includes a plurality of class accumulators 120-124, a selector 132, a plurality of class labels 148, a switch 144, a meta-class accumulator 126, a plurality of meta-class character accumulators 128-130, a meta-class selector 138, a plurality of meta-class character labels 150, a meta-class switch 143, and a character accumulator 146.
- the class accumulators 120-124 sum discriminant function outputs from respective ones of the character classifiers 60-64 to generate character confidence values.
- the selector 132 selects the character confidence value having the greatest magnitude and then passes this selected confidence value 134 to the character accumulator 146.
- the selector 132 generates a switch control signal 136 that is used by the switch 144 to select the class label associated with the greatest confidence value.
- the meta-class character accumulators 128-130 likewise sum discriminant function outputs from respective meta-class character classifiers to generate confidence values.
- the meta-class selector 138 selects the greatest confidence value and generates a meta-class control signal 142 to set: the meta-class switch 143.
- the selector 132 issues the control signal 136 to cause the switch 144 to connect to the meta-class switch 143.
- one of the meta-class character labels 150 and its corresponding confidence value 140 is passed to the character accumulator 146.
- the class, meta-class, and meta-class character accumulators 120-130, as well as the selector 132 and meta-class selector 138, are reset when a segment confidence value, which is based on the segment discriminant signal 67, exceeds a predetermined segment threshold value.
- a segment confidence value which is based on the segment discriminant signal 67
- the segment discriminant signal 67 can be accumulated over a sequence of frames to produce the segment confidence value.
- the class and meta-class character labels 148-150 are similar in nature to the class labels 92 described in conjunction with FIG. 4.
- the character accumulator 146 functions in a manner similar to that of the character accumulator shown in FIG. 4.
- FIG. 8 illustrates a flow diagram of a method of operating the handwriting recognition system shown in FIG. 5.
- box 160 a sequence of coordinate-pairs representing handwriting input is received.
- the coordinate-pairs are preferably generated by the tablet 52.
- the coordinate-pairs are transmitted through a low pass filter to remove noise caused by things such as biological tremor, roughness of the writing surface.
- duplicate coordinate-pairs are removed from the sequence to reduce the amount of data processing required by the HRS.
- the sequence of coordinate-pairs is then partitioned into a sequence of data frames (substrokes).
- the frame boundaries are preferably based on velocity minimas of the pen tip.
- features are extracted from the data frames.
- the features are distributed to one or more meta-class discriminant functions.
- the same features are distributed to character discriminant functions.
- the discriminant functions are preferably second-order polynomial expansions.
- the outputs of the meta-class and character discriminant functions are accumulated to generate a plurality of character confidence values.
- an identified word is generated based on these confidence values, as previously described in reference to FIGS. 4 and 7.
- the word can have one or more characters.
- the word is compared to a lexicon. This comparison results in a HRS output that is either the identified word, a candidate replacement word, a suggestion list of related words, or a rejection indicator.
- FIG. 9 illustrates a detailed block diagram representing the frame extractor 56 in accordance with a first embodiment of the present invention.
- the frame extractor 56 improves the overall recognition capability of the HRS.
- Frame extractor 56 creates a plurality of data frames from a stroke of handwriting. Each data frame comprises a plurality of coordinate-pairs. Essentially, a data frame codes only a fraction of one stroke. A very high level of accuracy and robustness is obtained by incrementally accumulating recognition evidence by classifying features correspondingly extracted from the data frames.
- the use of data frames allows greater immunity to hand/pen jitters, character flourishes, and noise from tablet 52.
- the frame extractor 56 preferably assigns substroke boundaries at points in the stroke at which the pen tip velocity is an extrema.
- An extrema is either a maxima or minima of a function.
- the frame extractor 56 delimits frames with selected velocity minimas of the pen tip.
- the frame extractor 56 comprises a velocity profile calculator (VPC) 190, a peak extrema detector (PED) 192, an in-line extrema detector (IED) 194, and an extrema filter 196.
- VPC velocity profile calculator
- PED peak extrema detector
- IED in-line extrema detector
- the VPC 190 generates a velocity profile of a pen trace across the writing surface of the tablet.
- the VPC 190 preferably determines velocities directly from the distances between coordinate-pair samples taken from the handwriting input.
- the HRS preferably samples the handwriting input at a fixed frequency, and as a consequence, pen tip velocity is proportional to the physical distance between samples, which can be easily computed from the coordinate-pairs. This technique of calculating velocity provides increased computational efficiency.
- the profile computed from the handwriting input is provided to both the PED 192 and the IED 194.
- the PED 192 identifies a plurality of peak extremas within the velocity profile.
- An extrema can be either a minima or maxima occurring in the profile.
- a minima is defined as a velocity point having a lesser magnitude than each point immediately adjacent on either side thereof.
- a maxima is defined as a velocity point having a greater magnitude than each point immediately adjacent on either side thereof.
- Each extrema has an associated direction--the direction being either maxima or minima.
- the PED 192 detects a peak extrema in the profile by comparing a first extrema and a subsequent extrema having an opposite direction, i.e., it compares a minima to a maxima, or vice versa. This can be accomplished by determining the difference between a current smallest minima and a current largest maxima. If the difference is greater than a predetermined peak threshold, the first occurring extrema of this pair is identified as being a peak extrema.
- the PED 192 scans forward, with respect to time, through the velocity profile of a stroke.
- two software flags are maintained: a peak minima flag to indicate the current smallest minima and the peak maxima flag to indicate the current largest maxima. These flags are respectively initialized to indicate a first minima and a first maxima. If the different between the current largest maxima and the current smallest minima exceeds the peak threshold, the first occurring extrema of the pair is identified as a peak extrema. The respective flag is then updated to indicate the next subsequent extrema in the profile, and the above comparison is repeated.
- next extrema in the profile is compared to the current extrema having the same direction. If the next extrema is more extreme than the respective current extrema, the respective flag is updated to indicate the next extrema and the above peak threshold comparison is repeated. Otherwise, another successive extrema is located and the above comparison to the respective current extrema is repeated.
- the PED 192 outputs one or more detected peak extremas that alternate in direction to the extrema filter 196.
- the IED 194 detects an in-line extrema in the profile by determining the difference between a first extrema and a subsequent extrema having an opposite direction. If the difference is greater than a predetermined in-line threshold, then the first and subsequent extrema are identified as being in-line extremas.
- the IED 194 examines a group of extrema between two adjacent peak extremas of the opposite direction.
- the IED 194 determines the difference between each extrema of the group and the bounding peak extrema of the opposite direction, i.e. a minima extrema within the group is compared to the maxima peak extrema that bounds this group. If the difference is greater than a predetermined peak/in-line threshold, then the extrema group member is considered as a candidate in-line extrema.
- the IED 194 scans forward through the candidate in-line extrema and compares candidate in-lines of the same direction, i.e. it compares a minima to a minima, and selects the smallest minima candidate in-line and the largest maxima candidate in-line. A flag of the current smallest minima candidate in-line extrema and the current largest maxima candidate in-line extrema is maintained.
- the IED 194 detects an in-line extrema in the profile by determining the difference between the current smallest minima candidate and the current largest maxima candidate. If the difference is greater than a predetermined in-line threshold, then the earlier candidate in-line extrema of this pair is identified as being in-line extrema.
- the IED 194 After identifying an extrema as an in-line extrema, the IED 194 resets the flag of the current candidate in-line extrema of the same direction, i.e. when a maxima extrema is identified as an in-line extrema the current largest maxima candidate in-line extrema flag is reset.
- the IED 194 outputs one or more detected in-line extremas that alternate in direction to the extrema filter 196.
- the extrema filter 196 detects the substroke boundaries by filtering the peak and in-line extremas.
- the extrema filter ensures that substroke boundaries are at least a predetermined number of samples apart. Thus, some of the in-line and peak extremas are eliminated to produce filtered extremas that are separated one from another by a minimum number of intervening samples.
- a sample can be a coordinate-pair with its associated velocity.
- Each of the filtered extrema indicates a substroke boundary.
- substroke boundaries can be limited to filtered extremas having the same direction.
- FIG. 10 illustrates a graphical representation of a stroke of handwriting text.
- the text in the stroke is the word "old".
- Sample points 1-9 represent points in the stroke where the velocity is at a minimum.
- FIG. 11 illustrates a graphical representation of the velocity profile corresponding to the stroke of FIG. 10.
- the y-axis indicates pen tip velocity, and the x-axis represents time.
- the sample points 1-9 correspond to those shown in FIG. 10.
- FIG. 12 illustrates a graphical representation of an exemplary velocity profile. Shown in the profile are a plurality of in-line extremas 197 and a plurality of peak extremas 198-199.
- the peak extremas includes peak minimas 198 and peak maximas 199. As illustrated, the peak extremas are separated by the peak threshold T pk .
- the peak extremas are the most extreme values in their respective peak groups.
- a peak group includes all velocity points between peak extremas having opposite directions.
- adjacent peak extremas have opposite directions.
- the in-line extremas 197 are separated from each other by the in-line threshold T il . Additionally, in one embodiment of the present invention, the in-line extremas 197 are, at a minimum, separated from adjacent peak extremas by a peak/in-line threshold T pk-il . This is to prevent extremas near noisy peaks from being incorrectly identified as in-line extremas.
- FIG. 13 illustrates a flow diagram representing a method of using the frame extractor 56 shown in FIG. 9 to generate substroke boundaries in accordance with a second embodiment of the present invention.
- a velocity profile is generated from the handwriting input.
- the velocity profile can be represented with an array of velocity data indexed according to time.
- a plurality of peak extremas within the velocity profile are identified.
- a plurality of in-line extremas within the velocity profile are identified.
- the in-line and peak extremas are, at this point, possible substroke boundaries.
- the substroke boundaries are detected by filtering the peak and in-line extremas.
- the extremas are filtered with respect to time in order to ensure that substroke boundaries are separated by a minimum number of intervening sample points.
- FIG. 14 illustrates a block diagram representing the frame extractor 56 in accordance with a third embodiment of the present invention. Elements 190-196 of this embodiment of the frame extractor 56 directly correspond to elements 190-196 described in conjunction with FIG. 9. In addition to the elements 190-196, the frame extractor 56 of FIG. 14 also includes a half-substroke detector (HSD) 210 and a frame generator 212.
- HSD half-substroke detector
- the HSD 210 identifies a half-substroke in the handwriting input, based on the filtered extremas it receives from the extrema filter 196.
- a half-substroke is delimited by a pair of adjacent filtered extremas having opposite directions. This is in contrast to full substroke, which is delimited by filtered extremas having the same direction.
- a half-substroke occurs at either the beginning or end of a stroke.
- the HSD 210 concatenates a detected half-substroke to an adjoining full substroke.
- the HSD 210 can explicitly force the half-substroke to be treated as a separate full substroke or filter out the half-substroke. This can prevent a concatenated substroke from becoming unwieldingly large.
- the output of the HSD 210 is a plurality of substroke boundaries.
- the frame generator 212 uses the substroke boundaries to produce a time-ordered sequence of data frames (substrokes).
- Each data frame includes a plurality of samples, preferably coordinate-pairs, taken from the handwriting input between substroke boundaries.
- a data frame can include information derived from the velocity profile, such as pen tip velocities.
- FIG. 15 illustrates a flow diagram representing a method of using the frame extractor shown in FIG. 14 in accordance with a fourth embodiment of the present invention. Steps 200-206 of this method directly correspond to steps 200-206 described in conjunction with FIG. 13.
- one or more half-substroke are identified using the filtered extremas.
- the half-substrokes are either concatenated to an adjoining substroke to form a full substroke, or they are indicated as being a regular, full substroke.
- the data frames are generated based on the substroke boundaries.
- the data frames are transmitted to the feature extractor 58.
- FIG. 16 illustrates a detailed block diagram representing the frame extractor 56 in accordance with a fifth embodiment of the present invention.
- the VPC 190, extrema filter 196, HSD 210, and frame generator 212 of this embodiment of the frame extractor 56 directly correspond to the same elements described in conjunction with FIGS. 9 and 14.
- the frame extractor 56 of FIG. 14 also includes an enhanced PED 220 and an enhanced IED 222.
- FIG. 17 illustrates a detailed block diagram of the enhanced PED 220 shown in FIG. 16.
- the PED 220 includes a local extrema detector (LED) 230, a first selector 234, and a first comparator 236.
- LED local extrema detector
- the LED 230 identifies a plurality of local extremas within the velocity profile. The LED 230 accomplishes this by comparing each velocity point to the velocity points that are immediately adjacent. If the velocity point in question is either the greatest or the least of the three points, then it is identified as a local extrema. The local extremas are distributed on bus 232 to the first selector 234, the first comparator 236, and the IED 222.
- the first selector 234 and the first comparator 236 operate in conjunction to identify peak extremas.
- the first selector 234 selects a first local extrema from the plurality of local extremas. This selection process can be iteratively repeated during the operation of the PED 220.
- the first extrema is passed to the first comparator 236.
- the first comparator 236 compares the first local extrema with a subsequent local extrema having an opposite direction to generate a difference.
- the subsequent local extrema is selected from the local extremas receive on the bus 232.
- the first comparator 236 determines whether the difference is greater than a peak threshold. If so, the first local extrema and the subsequent local extrema are identified as being peak extremas and passed to the IED 222 and the extrema filter 196. If not, another subsequent extrema is chosen and the comparison is repeated. If the difference never exceeds the peak threshold after all comparisons are completed for a given first local extrema, the given first extrema is discarded and another first extrema is sent by the first selector 234. The first comparator 236 then repeats the above described processing for the successive first extrema.
- FIG. 18 illustrates a detailed block diagram of the enhanced IED 222 shown in FIG. 16.
- the IED 222 includes a peak group detector (PGD) 240, a second selector 242, and second comparator 246.
- PPD peak group detector
- the PGD 240 In response to the peak extremas from the PED 220, the PGD 240 identifies the boundaries of one or more peak groups within the velocity profile.
- a peak group includes a set of local extremas being bounded by a pair of peak extremas having opposite directions. Generally, the peak group boundaries are defined with respect to time. The peak group boundaries are transmitted to the second selector 242.
- the second selector 242 and the second comparator operate in conjunction to identify in-line extremas.
- the second selector 242 selects a first and a subsequent local extrema from within the peak group.
- the second local extrema has an opposite direction from the first local extrema.
- the second comparator 246 compares the first local extrema with the subsequent local extrema to generate a difference. Then, the second comparator 246 determines whether the difference is greater than an in-line threshold. If so, the second comparator 246 identifies the first and subsequent local extremas as being in-line extremas and outputs them to the extrema filter 196. If not, another subsequent extrema is chosen and the comparison is repeated. If the difference never exceeds the in-line threshold after all comparisons are completed for a given first local extrema, the given first extrema is discarded and another first extrema is sent by the second selector 242. The second comparator 246 then repeats the above described processing for the successive first extrema.
- the second comparator 246 makes an additional comparison to eliminate any false in-line extremas associated with noisy peaks. This is accomplished by comparing the local extremas against the peak/in-line threshold value. To perform this second test, the second comparator 246 compares the first and subsequent local extremas to the peak extremas bounding their respective peak group. Preferably, each local extrema is compared to the bounding peak extrema with opposite direction thereof. This comparison generates two second differences. The second comparator 246 then determines whether each the second differences are greater than the in-line/peak threshold. If so, the second comparator 246 identifies the first and subsequent local extremas as being in-line extremas. Otherwise, the local extrema pair in question is disregarded as possible substroke boundaries.
- FIG. 19 illustrates a flow diagram representing a method of using the frame extractor 56 shown in FIG. 16 to generate a substroke frame from handwriting input in accordance with a sixth embodiment of the present invention.
- a sequence of coordinate-pairs that represent the handwriting input is received.
- a velocity profile is generated from the sequence of coordinate-pairs.
- a plurality of local extremas are identified within the velocity profile, where each of the local extremas has an associated direction.
- peak extremas are identified amongst the local extremas. This is accomplished by comparing the first and subsequent local extrema to generate a first difference. The extremas are selected to have opposite directions. If the first difference is greater than the peak threshold, then the first and subsequent local extremas are identified as peak extremas.
- each peak group is bounded by a pair of peak extremas having opposite directions.
- in-line extremas are identified within each peak group. This is achieved by comparing the local extremas within a peak group. These comparisons are made between local extremas having opposite directions. If the difference between two such local extremas exceeds the in-line threshold, the extremas are identified as being in-line extremas.
- filtered extremas are selected from the identified peak and in-line extremas.
- the filtered extremas are chosen so that they are separated one from another by a minimum number of intervening coordinate-pairs. This results in a time-ordered sequence of extremas, minimally separated by a predetermined interval.
- each of the filter extremas is equated to a substroke boundary, resulting in a sequence of substroke boundaries.
- one or more half-substroke are identified using the filtered extremas.
- a half-substroke is bounded by filtered extremas having opposite directions.
- the half-substrokes are processed by any of the following steps: concatenating them to an adjoining substroke to form a full substroke; indicating them as being a regular, full substroke; or filtering them out.
- the substroke data frame is generated based on the substroke boundaries.
- the substroke frame includes those of the coordinate-pairs that occur between a subsequent pair of substroke boundaries.
- the data frame is transmitted to the feature extractor 58.
- FIG. 20 illustrates a block diagram representing an embodiment of the lexical post-processor (LPP) 68 shown in FIGS. 3 and 5.
- the LPP 68 is a lexical processor that includes an input interface 300 and a word generator 302.
- the input interface 300 provides a means for receiving an input word.
- the input word is generated by either the accumulator/selector 66 or the meta-class accumulator/selector 106.
- the input interface 300 can buffer the input word for future processing by the word generator 302.
- the word generator 302 produces a lexical output as a function of the input word and the confusion, matrix.
- FIG. 21 illustrates a method of using the lexical post processor 68 shown in FIG. 20.
- the input word is received.
- the lexical output is produced as a function of the input word and the confusion matrix.
- FIG. 22 illustrates a detailed block diagram representing the word generator 302 shown in FIG. 20.
- the word generator 302 comprises a word confidence value (WCV) calculator 320, a comparator 322, a spell-checker 324, a selector 326, and a computer memory 328.
- WV word confidence value
- the input word is distributed to the WCV calculator 320 and the selector 326.
- the WCV calculator provides a means for deriving a word confidence value from the input word.
- the word confidence value is passed to the comparator 322, which in response, generates a first result by comparing the word confidence value to a first pair of thresholds.
- the selector 326 produces the lexical output based on the first result.
- the selector 326 provides the rejection indicator, a candidate word, a suggestion list, or the original input word as the lexical output, depending on the value of the first result.
- the candidate word is generated by the selector 326 in the following manner. Using a replacement matrix, which is stored in the computer memory 328, the selector 326 selects a replacement character.
- the replacement matrix is derived from a confusion matrix, such as the one shown in FIG. 6.
- the candidate word is then produced by replacing a character in the input word with the replacement character.
- the spelling of the candidate word is then checked against a lexicon by the spell-checker 324. If the candidate word is not present in the lexicon, the spell-checker 324 produces a suggestion list of related words that is passed back to the selector 326.
- the selector 326 preferably selects only those replacement characters having likelihood values that minimize the distance between the candidate word and the input word. The distance is given by:
- Equation 3 D represents the distance, C represents the character confidence value associated with the character(s) being replaced in the input word, and L represents the likelihood value associated with the replacement character.
- a likelihood value is a relative measurement indicating the probability that a character in the input word has been misclassified as the replacement character associated therewith.
- the greater the likelihood value the greater the chance that the input character was incorrectly identified by the classifiers.
- the input character "a” could be associated with a replacement character "o” having a correspondingly high likelihood value. This indicates that there is a high chance that an input character classified as "a” is actually be an "o".
- the likelihood values are contained in the replacement matrix.
- the replacement matrix is an array of replacement characters and their corresponding likelihood values.
- the array is derived from the confusion matrix.
- Each column in the replacement matrix is associated with a character in the alphabet being used by the HRS.
- the number of elements in each column can be different.
- Each element includes a symbol representing a replacement character, such as an ASCII digital word, and the likelihood value associated with the replacement character.
- Elements in the columns are arranged according to descending likelihood values. In a given row, elements having the same likelihood values are arranged alphabetically.
- a replacement character is selected by first matching a character with a column in the replacement matrix and then choosing the element having the largest likelihood value in the column. This selection process can be iteratively repeated, selecting a sequence of replacement characters having decreasing likelihood values.
- the replacement matrix is derived from a confusion matrix generally as follows. Using the confusion matrix shown in FIG. 6 as a reference, each element in a given column is normalized with respect to the sum total of all element therein. This column normalization is repeated for every column in the matrix. Next, in each row, the resulting column normalized values are normalized with respect to the diagonal element of the row. This is accomplished by individually dividing each column normalized value by the diagonal element. The result of these normalizations is a plurality of likelihood values. The replacement matrix is then generated by assigning each row in the normalized confusion matrix to a column in the replacement matrix.
- FIGS. 23-25 illustrate a flow diagram representing a method using the lexical post processor of FIG. 22.
- FIG. 23 a flow diagram of a process of comparing the input word to a pair of thresholds is shown.
- the input word is received by the lexical processor.
- the input word includes a plurality of characters and a plurality of character confidence values associated with the characters.
- each character confidence value is compared to a predetermined rejection threshold (RT).
- a rejection ratio (RR) is then computed from the results of the comparisons.
- the rejection ratio is the percentage of characters having confidence values that are less than the rejection threshold.
- decision box 354 a determination is made whether the rejection ratio is greater than a reject character ratio threshold (RCRT). If so, the input word is rejected as unidentifiable and the rejection indicator is output (box 356). If not, the method proceeds to box 358.
- RCRT reject character ratio threshold
- MCC mean character confidence
- decision box 360 a determination is made whether the MCC is greater than an accept threshold (AT). If so, the lexical output is equated to the original input word. If not, a candidate word is generated according to the process shown in FIG. 24.
- AT accept threshold
- a candidate word is a variant of the input word.
- the candidate word is produced by replacing one or more characters in the input word with replacement characters.
- the replacement characters are selected according to a replacement matrix that is based on the confusion matrix.
- the candidate word is initialized to be the input word.
- the initial candidate word has a word distance of zero.
- the word distance provides a basis for selecting candidate words. It is a numerical value that quantifies the difference between the input word and a possible candidate word. Generally, the greater the word distance between a possible candidate word and the input word, the less likely the possible candidate is going to be selected to replace the input word.
- one or more lexicons are searched for the candidate word.
- a lexicon is a dictionary of words.
- the lexicon can be customized and updated by the HRS user to tailor the HRS to a particular application.
- lexicons can be incorporated from third party suppliers of dictionary databases, such as those available from Wintertree Software, Inc.
- box decision 368 a check is made to determine whether the candidate word is present in the lexicon. If so, the lexical output is generated according to the process depicted in FIG. 25. If not, the method proceeds to decision box 370.
- decision box 370 a check is made to determine whether the generator limits are exceeded. If so, the lexical output is generated according to the process depicted in FIG. 25. If not, the method proceeds to box 372.
- the generator limits are predetermined values that determine the extent of the candidate word generation. The limits include the maximum number of candidate words and the maximum word distance.
- a new candidate word and its associated word distance is generated.
- the new candidate word is selected using a replacement matrix that is derived from the confusion matrix.
- the new candidate word is appended to the suggestion list.
- the suggestion list comprises all candidate words generated, including the initial candidate word, that is, the input word.
- FIG. 25 shows a flow diagram of a procedure generating the lexical output. The procedure is entered from either of boxes 368-370 shown in FIG. 24.
- Box 380 is entered if the generator limits have been exceeded.
- the sub-process shown in boxes 380-390 is similar to that shown in boxes 352-362; however, the sub-processes preferably use different threshold values and comparisons.
- each character confidence value of the original input is compared to a predetermined miss rejection threshold (MRT).
- MRT miss rejection threshold
- a miss rejection ratio (MRR) is then computed from the results of the comparisons.
- the MRR is the percentage of characters having confidence values that are less than the MRT.
- decision box 384 a determination is made whether the miss rejection ratio is less than a miss reject character ratio threshold (MRCRT). If so, the input word is rejected as unidentifiable and the rejection indicator is output (box 386). If not, the method proceeds to decision box 388.
- MRCRT miss reject character ratio threshold
- decision box 388 a determination is made whether the MCC of the input word is less than a miss accept threshold (MAT). If so, the method proceeds to box 394. If not, the lexical output is equated to the original input word (box 390).
- MAT miss accept threshold
- decision box 392 is entered if the candidate word is located in the lexicon.
- a determination is made whether the word distance of the candidate word is greater than a hit distance threshold (HDT). If so, the method proceeds to box 394. Otherwise, the candidate word is provided as the lexical output (box 398).
- HDT hit distance threshold
- a temporary dictionary of words is appended to the suggestion list.
- the temporary dictionary includes words selected from the lexicon that are not already present in the suggestion list. These words are provided to the user as possible replacement words.
- the suggestion list is provided as the lexical output.
- the frame extractor 56 is implemented by software running on a processor such as a microprocessor.
- a processor such as a microprocessor.
- a programmable logic array, ASIC or other digital logic device could also be used to implement the functions performed by the frame extractor.
- the frame extractor 56 is implemented as an article of manufacture.
- the article of manufacture includes a computer-readable memory usable for causing a computer to detect substroke boundaries in handwriting input.
- the article of manufacture is produced by the act of storing a computer program in the computer-readable memory, where the computer program includes a method for detecting substroke boundaries in conformity with an embodiment of the present invention herein disclosed.
- the computer-readable memory could be any means for storing a computer program, including a CD-ROM, hard disk drive, floppy disk, ROM, or RAM.
- the various embodiments of the frame extractor as described herein include an extema filter that eliminates extremas caused by noise; thus, the embodiments of the present invention substantially improve the recognition accuracy of a HRS.
Abstract
Description
D=Σ(C/L) (3)
Claims (36)
Priority Applications (4)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US08/566,358 US5768417A (en) | 1994-09-09 | 1995-12-01 | Method and system for velocity-based handwriting recognition |
PCT/US1996/018924 WO1997020284A1 (en) | 1995-12-01 | 1996-11-27 | Method and system for velocity-based handwriting recognition |
AU10610/97A AU1061097A (en) | 1995-12-01 | 1996-11-27 | Method and system for velocity-based handwriting recognition |
CN96192320A CN1177407A (en) | 1995-12-01 | 1996-11-27 | Method and system for velocity-based head writing recognition |
Applications Claiming Priority (2)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US30400894A | 1994-09-09 | 1994-09-09 | |
US08/566,358 US5768417A (en) | 1994-09-09 | 1995-12-01 | Method and system for velocity-based handwriting recognition |
Related Parent Applications (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
US30400894A Continuation-In-Part | 1994-09-09 | 1994-09-09 |
Publications (1)
Publication Number | Publication Date |
---|---|
US5768417A true US5768417A (en) | 1998-06-16 |
Family
ID=24262546
Family Applications (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
US08/566,358 Expired - Lifetime US5768417A (en) | 1994-09-09 | 1995-12-01 | Method and system for velocity-based handwriting recognition |
Country Status (4)
Country | Link |
---|---|
US (1) | US5768417A (en) |
CN (1) | CN1177407A (en) |
AU (1) | AU1061097A (en) |
WO (1) | WO1997020284A1 (en) |
Cited By (28)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US6373490B1 (en) * | 1998-03-09 | 2002-04-16 | Macromedia, Inc. | Using remembered properties to create and regenerate points along an editable path |
US6587577B1 (en) * | 1999-04-21 | 2003-07-01 | International Business Machines Corporation | On-line signature verification |
US20040037463A1 (en) * | 2002-01-28 | 2004-02-26 | Calhoun Christopher L. | Recognizing multi-stroke symbols |
US20040165774A1 (en) * | 2003-02-26 | 2004-08-26 | Dimitrios Koubaroulis | Line extraction in digital ink |
US20040239639A1 (en) * | 2003-05-30 | 2004-12-02 | Stavely Donald J. | Systems and methods for facilitating composition of handwritten documents |
US20050100218A1 (en) * | 2003-11-10 | 2005-05-12 | Microsoft Corporation | Recognition of electronic ink with late strokes |
US6898315B2 (en) | 1998-03-23 | 2005-05-24 | Microsoft Corporation | Feature extraction for real-time pattern recognition using single curve per pattern analysis |
US20050147301A1 (en) * | 2001-08-08 | 2005-07-07 | Jingtao Wang | System and method for collaborative handwriting input |
US20050154686A1 (en) * | 2004-01-09 | 2005-07-14 | Corston Simon H. | Machine-learned approach to determining document relevance for search over large electronic collections of documents |
US20050168437A1 (en) * | 2004-01-30 | 2005-08-04 | Carl Stewart R. | Processing pose data derived from the pose of an elongate object |
US20050222848A1 (en) * | 2001-10-15 | 2005-10-06 | Napper Jonathan L | Digital ink database searching using handwriting feature synthesis |
US20050281467A1 (en) * | 2003-01-24 | 2005-12-22 | Stahovich Thomas F | Recognizing multi-stroke symbols |
US20060025762A1 (en) * | 2004-05-14 | 2006-02-02 | Mohan Ashik A | Ablation probe with stabilizing member |
US20060088215A1 (en) * | 1999-03-24 | 2006-04-27 | British Telecommunications, Public Limited Company | Handwriting recognition system |
US7197174B1 (en) | 1999-09-15 | 2007-03-27 | Intel Corporation | Magnetic ink encoding pen |
US20070133883A1 (en) * | 2005-12-12 | 2007-06-14 | Microsoft Corporation | Logical structure and layout based offline character recognition |
US7436541B2 (en) | 1997-10-27 | 2008-10-14 | Canon Kabushiki Kaisha | Information processing apparatus with an additional function unit |
US20090009529A1 (en) * | 2007-06-26 | 2009-01-08 | Microsoft Corporation | Adaptive contextual filtering |
US20090122066A1 (en) * | 2007-11-09 | 2009-05-14 | Canon Kabushiki Kaisha | Drawing-editing system and apparatus and grouping processing method |
US20100001998A1 (en) * | 2004-01-30 | 2010-01-07 | Electronic Scripting Products, Inc. | Apparatus and method for determining an absolute pose of a manipulated object in a real three-dimensional environment with invariant features |
US20100013860A1 (en) * | 2006-03-08 | 2010-01-21 | Electronic Scripting Products, Inc. | Computer interface employing a manipulated object with absolute pose detection component and a display |
US20130133423A1 (en) * | 2011-11-30 | 2013-05-30 | Kyung Rin KIM | Device for detecting motions and method for detecting motions |
US8666199B2 (en) * | 2009-10-07 | 2014-03-04 | Google Inc. | Gesture-based selection text recognition |
US20150220797A1 (en) * | 2014-02-06 | 2015-08-06 | Sony Corporation | Information processing system, information processing method, and program |
US9229540B2 (en) | 2004-01-30 | 2016-01-05 | Electronic Scripting Products, Inc. | Deriving input from six degrees of freedom interfaces |
US20160098595A1 (en) * | 2013-12-16 | 2016-04-07 | Google Inc. | Partial Overlap and Delayed Stroke Input Recognition |
US20200210644A1 (en) * | 2017-05-23 | 2020-07-02 | International Business Machines Corporation | Removable spell checker device |
US11577159B2 (en) | 2016-05-26 | 2023-02-14 | Electronic Scripting Products Inc. | Realistic virtual/augmented/mixed reality viewing and interactions |
Families Citing this family (5)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
GB9701793D0 (en) | 1997-01-29 | 1997-03-19 | Gay Geoffrey N W | Means for inputting characters or commands into a computer |
JPH11199512A (en) * | 1997-10-24 | 1999-07-27 | Pfizer Prod Inc | Use of mmp-13 selective inhibitor for the treatment of arthrosis deformans and other mmp-mediated disease |
JP3938928B1 (en) | 2006-06-22 | 2007-06-27 | 株式会社コナミデジタルエンタテインメント | Line shape processing apparatus, line shape processing method, and program |
KR20090030355A (en) * | 2007-09-20 | 2009-03-25 | 오의진 | Input device |
CN102541405A (en) * | 2010-12-23 | 2012-07-04 | 腾讯科技（深圳）有限公司 | Method and system for screening candidate area |
Citations (11)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US3133266A (en) * | 1960-06-14 | 1964-05-12 | Bell Telephone Labor Inc | Automatic recognition of handwriting |
US3962679A (en) * | 1974-06-06 | 1976-06-08 | Rca Corporation | Handwriting identification technique |
US4495644A (en) * | 1981-04-27 | 1985-01-22 | Quest Automation Public Limited Company | Apparatus for signature verification |
US4736445A (en) * | 1986-01-21 | 1988-04-05 | International Business Machines Corporation | Measure of distinguishability for signature verification |
US4901358A (en) * | 1985-04-26 | 1990-02-13 | Battelle Memorial Institute | Method of comparing a handwriting with a reference writing |
US5054088A (en) * | 1989-09-20 | 1991-10-01 | International Business Machines Corporation | Signature verification data compression for storage on an identification card |
US5077802A (en) * | 1991-02-11 | 1991-12-31 | Ecole Polytechnique | Apparatus and method for digitizing and segmenting a handwriting movement based on curvilinear and angular velocities |
US5134663A (en) * | 1991-04-19 | 1992-07-28 | Unisys Corporation | Center line magnetic ink character recognition system |
US5226091A (en) * | 1985-11-05 | 1993-07-06 | Howell David N L | Method and apparatus for capturing information in drawing or writing |
US5347594A (en) * | 1991-12-10 | 1994-09-13 | General Electric Cgr | Method of image analysis |
US5347593A (en) * | 1992-08-20 | 1994-09-13 | Soricon Corporation | Character recognition system |
-
1995
- 1995-12-01 US US08/566,358 patent/US5768417A/en not_active Expired - Lifetime
-
1996
- 1996-11-27 WO PCT/US1996/018924 patent/WO1997020284A1/en active Application Filing
- 1996-11-27 CN CN96192320A patent/CN1177407A/en active Pending
- 1996-11-27 AU AU10610/97A patent/AU1061097A/en not_active Abandoned
Patent Citations (11)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US3133266A (en) * | 1960-06-14 | 1964-05-12 | Bell Telephone Labor Inc | Automatic recognition of handwriting |
US3962679A (en) * | 1974-06-06 | 1976-06-08 | Rca Corporation | Handwriting identification technique |
US4495644A (en) * | 1981-04-27 | 1985-01-22 | Quest Automation Public Limited Company | Apparatus for signature verification |
US4901358A (en) * | 1985-04-26 | 1990-02-13 | Battelle Memorial Institute | Method of comparing a handwriting with a reference writing |
US5226091A (en) * | 1985-11-05 | 1993-07-06 | Howell David N L | Method and apparatus for capturing information in drawing or writing |
US4736445A (en) * | 1986-01-21 | 1988-04-05 | International Business Machines Corporation | Measure of distinguishability for signature verification |
US5054088A (en) * | 1989-09-20 | 1991-10-01 | International Business Machines Corporation | Signature verification data compression for storage on an identification card |
US5077802A (en) * | 1991-02-11 | 1991-12-31 | Ecole Polytechnique | Apparatus and method for digitizing and segmenting a handwriting movement based on curvilinear and angular velocities |
US5134663A (en) * | 1991-04-19 | 1992-07-28 | Unisys Corporation | Center line magnetic ink character recognition system |
US5347594A (en) * | 1991-12-10 | 1994-09-13 | General Electric Cgr | Method of image analysis |
US5347593A (en) * | 1992-08-20 | 1994-09-13 | Soricon Corporation | Character recognition system |
Non-Patent Citations (6)
Title |
---|
Handprinted numeral Recognition with the Learning Quadratic Discriminant Function by Takahiko Kawatani, 1993 IEEE, pp. 14 22. * |
Handprinted numeral Recognition with the Learning Quadratic Discriminant Function by Takahiko Kawatani, 1993 IEEE, pp. 14-22. |
Recognition Experiments of Cursive Dynamic Handwriting with Self Organizing Networks by P. Morasso, L. Barberis, S. Pagliano and D. Vergano, Pattern Recognition, vol. 26, No. 3, 1993, pp. 451 460. * |
Recognition Experiments of Cursive Dynamic Handwriting with Self-Organizing Networks by P. Morasso, L. Barberis, S. Pagliano and D. Vergano, Pattern Recognition, vol. 26, No. 3, 1993, pp. 451-460. |
Wintertree Software Inc. Catalog, 43 Rueter St., Nepean, Ontario, Canada K2J 3Z9, Phone: (613) 825 6271, FAX: (613) 825 5521. * |
Wintertree Software Inc. Catalog, 43 Rueter St., Nepean, Ontario, Canada K2J 3Z9, Phone: (613) 825-6271, FAX: (613) 825-5521. |
Cited By (52)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US7436541B2 (en) | 1997-10-27 | 2008-10-14 | Canon Kabushiki Kaisha | Information processing apparatus with an additional function unit |
US6373490B1 (en) * | 1998-03-09 | 2002-04-16 | Macromedia, Inc. | Using remembered properties to create and regenerate points along an editable path |
US6898315B2 (en) | 1998-03-23 | 2005-05-24 | Microsoft Corporation | Feature extraction for real-time pattern recognition using single curve per pattern analysis |
US20060088215A1 (en) * | 1999-03-24 | 2006-04-27 | British Telecommunications, Public Limited Company | Handwriting recognition system |
US7054510B1 (en) * | 1999-03-24 | 2006-05-30 | British Telecommunications Public Limited Company | Handwriting recognition system |
US6587577B1 (en) * | 1999-04-21 | 2003-07-01 | International Business Machines Corporation | On-line signature verification |
US7197174B1 (en) | 1999-09-15 | 2007-03-27 | Intel Corporation | Magnetic ink encoding pen |
US20050147301A1 (en) * | 2001-08-08 | 2005-07-07 | Jingtao Wang | System and method for collaborative handwriting input |
US8219908B2 (en) * | 2001-10-15 | 2012-07-10 | Silverbrook Research Pty Ltd | Digital ink database searching using handwriting feature synthesis |
US20050222848A1 (en) * | 2001-10-15 | 2005-10-06 | Napper Jonathan L | Digital ink database searching using handwriting feature synthesis |
US20040037463A1 (en) * | 2002-01-28 | 2004-02-26 | Calhoun Christopher L. | Recognizing multi-stroke symbols |
US20050281467A1 (en) * | 2003-01-24 | 2005-12-22 | Stahovich Thomas F | Recognizing multi-stroke symbols |
US20090238461A1 (en) * | 2003-02-26 | 2009-09-24 | Silverbrook Research Pty Ltd | System For Line Extraction In Digital Ink |
US7630551B2 (en) * | 2003-02-26 | 2009-12-08 | Silverbrook Research Pty Ltd | Method and system for line extraction in digital ink |
US20040165774A1 (en) * | 2003-02-26 | 2004-08-26 | Dimitrios Koubaroulis | Line extraction in digital ink |
US7526128B2 (en) * | 2003-02-26 | 2009-04-28 | Silverbrook Research Pty Ltd | Line extraction in digital ink |
US20080304748A1 (en) * | 2003-02-26 | 2008-12-11 | Silverbrook Research Pty Ltd | Method and system for line extraction in digital ink |
US7193616B2 (en) * | 2003-05-30 | 2007-03-20 | Hewlett-Packard Development Company, L.P. | Systems and methods for facilitating composition of handwritten documents |
US20040239639A1 (en) * | 2003-05-30 | 2004-12-02 | Stavely Donald J. | Systems and methods for facilitating composition of handwritten documents |
US7394934B2 (en) | 2003-11-10 | 2008-07-01 | Microsoft Corporation | Recognition of electronic ink with late strokes |
US7292726B2 (en) | 2003-11-10 | 2007-11-06 | Microsoft Corporation | Recognition of electronic ink with late strokes |
US20050100218A1 (en) * | 2003-11-10 | 2005-05-12 | Microsoft Corporation | Recognition of electronic ink with late strokes |
US20080056579A1 (en) * | 2003-11-10 | 2008-03-06 | Microsoft Corporation | Recognition of Electronic Ink with Late Strokes |
US7287012B2 (en) * | 2004-01-09 | 2007-10-23 | Microsoft Corporation | Machine-learned approach to determining document relevance for search over large electronic collections of documents |
US20050154686A1 (en) * | 2004-01-09 | 2005-07-14 | Corston Simon H. | Machine-learned approach to determining document relevance for search over large electronic collections of documents |
US9235934B2 (en) | 2004-01-30 | 2016-01-12 | Electronic Scripting Products, Inc. | Computer interface employing a wearable article with an absolute pose detection component |
US9939911B2 (en) | 2004-01-30 | 2018-04-10 | Electronic Scripting Products, Inc. | Computer interface for remotely controlled objects and wearable articles with absolute pose detection component |
US10191559B2 (en) | 2004-01-30 | 2019-01-29 | Electronic Scripting Products, Inc. | Computer interface for manipulated objects with an absolute pose detection component |
US20050168437A1 (en) * | 2004-01-30 | 2005-08-04 | Carl Stewart R. | Processing pose data derived from the pose of an elongate object |
US20100001998A1 (en) * | 2004-01-30 | 2010-01-07 | Electronic Scripting Products, Inc. | Apparatus and method for determining an absolute pose of a manipulated object in a real three-dimensional environment with invariant features |
US9229540B2 (en) | 2004-01-30 | 2016-01-05 | Electronic Scripting Products, Inc. | Deriving input from six degrees of freedom interfaces |
US8542219B2 (en) | 2004-01-30 | 2013-09-24 | Electronic Scripting Products, Inc. | Processing pose data derived from the pose of an elongate object |
US7826641B2 (en) | 2004-01-30 | 2010-11-02 | Electronic Scripting Products, Inc. | Apparatus and method for determining an absolute pose of a manipulated object in a real three-dimensional environment with invariant features |
US20060025762A1 (en) * | 2004-05-14 | 2006-02-02 | Mohan Ashik A | Ablation probe with stabilizing member |
CN101366017B (en) * | 2005-12-12 | 2010-06-16 | 微软公司 | Logical structure and layout based character recognition method and system |
US7844114B2 (en) * | 2005-12-12 | 2010-11-30 | Microsoft Corporation | Logical structure layout identification and classification for offline character recognition |
US20070133883A1 (en) * | 2005-12-12 | 2007-06-14 | Microsoft Corporation | Logical structure and layout based offline character recognition |
US20100013860A1 (en) * | 2006-03-08 | 2010-01-21 | Electronic Scripting Products, Inc. | Computer interface employing a manipulated object with absolute pose detection component and a display |
US8553935B2 (en) | 2006-03-08 | 2013-10-08 | Electronic Scripting Products, Inc. | Computer interface employing a manipulated object with absolute pose detection component and a display |
US7961909B2 (en) | 2006-03-08 | 2011-06-14 | Electronic Scripting Products, Inc. | Computer interface employing a manipulated object with absolute pose detection component and a display |
US7821524B2 (en) * | 2007-06-26 | 2010-10-26 | Microsoft Corporation | Adaptive contextual filtering |
US20090009529A1 (en) * | 2007-06-26 | 2009-01-08 | Microsoft Corporation | Adaptive contextual filtering |
US20090122066A1 (en) * | 2007-11-09 | 2009-05-14 | Canon Kabushiki Kaisha | Drawing-editing system and apparatus and grouping processing method |
US8666199B2 (en) * | 2009-10-07 | 2014-03-04 | Google Inc. | Gesture-based selection text recognition |
US20130133423A1 (en) * | 2011-11-30 | 2013-05-30 | Kyung Rin KIM | Device for detecting motions and method for detecting motions |
US20160098595A1 (en) * | 2013-12-16 | 2016-04-07 | Google Inc. | Partial Overlap and Delayed Stroke Input Recognition |
US10185872B2 (en) * | 2013-12-16 | 2019-01-22 | Google Llc | Partial overlap and delayed stroke input recognition |
US20150220797A1 (en) * | 2014-02-06 | 2015-08-06 | Sony Corporation | Information processing system, information processing method, and program |
US9928414B2 (en) * | 2014-02-06 | 2018-03-27 | Sony Corporation | Information processing system for displaying handwriting action trajectory based on meta information |
US11577159B2 (en) | 2016-05-26 | 2023-02-14 | Electronic Scripting Products Inc. | Realistic virtual/augmented/mixed reality viewing and interactions |
US20200210644A1 (en) * | 2017-05-23 | 2020-07-02 | International Business Machines Corporation | Removable spell checker device |
US10936815B2 (en) * | 2017-05-23 | 2021-03-02 | International Business Machines Corporation | Removable spell checker device |
Also Published As
Publication number | Publication date |
---|---|
AU1061097A (en) | 1997-06-19 |
WO1997020284A1 (en) | 1997-06-05 |
CN1177407A (en) | 1998-03-25 |
Similar Documents
Publication | Publication Date | Title |
---|---|---|
US5768417A (en) | Method and system for velocity-based handwriting recognition | |
US5854855A (en) | Method and system using meta-classes and polynomial discriminant functions for handwriting recognition | |
US5802205A (en) | Method and system for lexical processing | |
AU737039B2 (en) | Methods and apparatuses for handwriting recognition | |
EP0608708B1 (en) | Automatic handwriting recognition using both static and dynamic parameters | |
US5343537A (en) | Statistical mixture approach to automatic handwriting recognition | |
US20080008387A1 (en) | Method and apparatus for recognition of handwritten symbols | |
Parui et al. | Online handwritten Bangla character recognition using HMM | |
WO1997044758A9 (en) | Methods and apparatuses for handwriting recognition | |
WO2006091156A1 (en) | Recognition graph | |
KR19990022352A (en) | Character recognition method and handwriting input | |
EP0436819A2 (en) | Handwriting recognition employing pairwise discriminant measures | |
US5757960A (en) | Method and system for extracting features from handwritten text | |
Sundaram et al. | Bigram language models and reevaluation strategy for improved recognition of online handwritten Tamil words | |
JP4958236B2 (en) | Method and apparatus for recognizing handwritten patterns | |
Kaufmann et al. | Recognition of cursively handwritten words using a combined normalization/perturbation approach | |
Urala et al. | Recognition of open vocabulary, online handwritten pages in Tamil script | |
CN107912062B (en) | System and method for overlaying handwriting | |
Hurst et al. | Error repair in human handwriting: an intelligent user interface for automatic online handwriting recognition | |
Sim et al. | On-line recognition of cursive Korean characters using DP matching and fuzzy concept | |
Garain et al. | On machine understanding of online handwritten mathematical expressions | |
JP3374762B2 (en) | Character recognition method and apparatus | |
KR100414051B1 (en) | Method for recognizing stroke of character | |
Gmati et al. | Identity Signatures Extraction of Latin and Arabic Characters | |
KR940001739B1 (en) | On-line hand-written korean character recognition method by recognizing stroke |
Legal Events
Date | Code | Title | Description |
---|---|---|---|
AS | Assignment |
Owner name: MOTOROLA, INC., ILLINOISFree format text: ASSIGNMENT OF ASSIGNORS INTEREST;ASSIGNORS:ERRICO, JAMES H.;MURDOCK, MICHAEL C.;WANG, SHAY-PING T.;REEL/FRAME:007839/0572;SIGNING DATES FROM 19960102 TO 19960109 |
|
STCF | Information on status: patent grant |
Free format text: PATENTED CASE |
|
CC | Certificate of correction | ||
FPAY | Fee payment |
Year of fee payment: 4 |
|
FPAY | Fee payment |
Year of fee payment: 8 |
|
FPAY | Fee payment |
Year of fee payment: 12 |
|
AS | Assignment |
Owner name: MOTOROLA MOBILITY, INC, ILLINOISFree format text: ASSIGNMENT OF ASSIGNORS INTEREST;ASSIGNOR:MOTOROLA, INC;REEL/FRAME:025673/0558Effective date: 20100731 |
|
AS | Assignment |
Owner name: MOTOROLA MOBILITY LLC, ILLINOISFree format text: CHANGE OF NAME;ASSIGNOR:MOTOROLA MOBILITY, INC.;REEL/FRAME:029216/0282Effective date: 20120622 |
|
AS | Assignment |
Owner name: GOOGLE TECHNOLOGY HOLDINGS LLC, CALIFORNIAFree format text: ASSIGNMENT OF ASSIGNORS INTEREST;ASSIGNOR:MOTOROLA MOBILITY LLC;REEL/FRAME:034474/0001Effective date: 20141028 |