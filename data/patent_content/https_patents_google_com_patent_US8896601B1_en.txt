US8896601B1 - Projecting geographic data from a spherical surface to two-dimensional cartesian space - Google Patents
Projecting geographic data from a spherical surface to two-dimensional cartesian space Download PDFInfo
- Publication number
- US8896601B1 US8896601B1 US13/027,905 US201113027905A US8896601B1 US 8896601 B1 US8896601 B1 US 8896601B1 US 201113027905 A US201113027905 A US 201113027905A US 8896601 B1 US8896601 B1 US 8896601B1
- Authority
- US
- United States
- Prior art keywords
- face
- dimensional
- cartesian space
- faces
- dimensional cartesian
- Prior art date
- Legal status (The legal status is an assumption and is not a legal conclusion. Google has not performed a legal analysis and makes no representation as to the accuracy of the status listed.)
- Expired - Fee Related, expires
Links
Images
Classifications
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F16/00—Information retrieval; Database structures therefor; File system structures therefor
- G06F16/20—Information retrieval; Database structures therefor; File system structures therefor of structured data, e.g. relational data
- G06F16/29—Geographical information databases
-
- G06F17/30241—
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06T—IMAGE DATA PROCESSING OR GENERATION, IN GENERAL
- G06T15/00—3D [Three Dimensional] image rendering
- G06T15/10—Geometric effects
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06T—IMAGE DATA PROCESSING OR GENERATION, IN GENERAL
- G06T17/00—Three dimensional [3D] modelling, e.g. data description of 3D objects
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06T—IMAGE DATA PROCESSING OR GENERATION, IN GENERAL
- G06T17/00—Three dimensional [3D] modelling, e.g. data description of 3D objects
- G06T17/05—Geographic models
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06T—IMAGE DATA PROCESSING OR GENERATION, IN GENERAL
- G06T19/00—Manipulating 3D models or images for computer graphics
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06T—IMAGE DATA PROCESSING OR GENERATION, IN GENERAL
- G06T2219/00—Indexing scheme for manipulating 3D models or images for computer graphics
- G06T2219/021—Flattening
Definitions
- Embodiments relate generally to the field of computer graphics.
- the three-dimensional environment can include a virtual camera that defines what three-dimensional data to display.
- the virtual camera has a perspective according to its position and orientation. By changing the perspective of the virtual camera, a user can navigate through the three-dimensional environment.
- a geographic information system is one type of system that uses a virtual camera to present a three-dimensional environment.
- a geographic information system is a system for storing, retrieving, manipulating, and displaying a substantially spherical three-dimensional model of, for example, the Earth.
- the three dimensional model may include satellite images texture mapped to terrain, such as mountains, valleys, and canyons. Further, the three-dimensional model may include both two-dimensional and three-dimensional features that are visible at different zoom levels.
- a capability for projecting geographic data (e.g., latitude and longitude coordinates) from a spherical surface onto a two-dimensional Cartesian space is provided.
- Such a capability can employ a coordinate testing and transformation method to map the projected geographic data within the two-dimensional Cartesian space so that distances measured on the spherical surface are consistent with distances measured in the two-dimensional Cartesian space. Further, this capability allows for the use of efficient search algorithms to find projected geographic points within a particular geographic search area.
- Embodiments relate to projecting geographic data from a spherical surface to a two-dimensional Cartesian space.
- geographic data is projected from the spherical surface onto faces of a three-dimensional polyhedron.
- An example of such a three-dimensional polyhedron is a cube.
- the faces of the polyhedron are then arranged within the two-dimensional Cartesian space according to a cutout pattern that corresponds to the shape of the polyhedron.
- geographic data points associated with the spherical surface are mapped to a first set of Cartesian coordinates associated with the arranged faces within two-dimensional Cartesian space.
- One or more (i.e., a subset of) the geographic data points are mapped to a second set of Cartesian coordinates within the two-dimensional Cartesian space based on the cutout pattern so that relative distances among the geographic data points remain consistent between the spherical surface and the two-dimensional Cartesian space.
- Embodiments may be implemented using hardware, firmware, software, or a combination thereof and may be implemented in one or more computer systems or other processing systems.
- FIG. 1 is a diagram of a system suitable for indexing data, according to an embodiment.
- FIG. 2 is a diagram of a system suitable for parsing indexed data, according to an embodiment.
- FIG. 3 is a diagram of an exemplary system for projecting geographic data from a spherical surface to a two-dimensional Cartesian space, according to an embodiment.
- FIG. 4 is a diagram of an exemplary virtual cube for projecting geographic data from a spherical surface, according to an embodiment.
- FIG. 5A illustrates an exemplary cube cutout shape for projecting geographic data from a spherical surface to a two-dimensional Cartesian space, according to an embodiment.
- FIG. 5B illustrates an exemplary mapping of sections or tabs from faces of the cube cutout shape to locations within the two-dimensional Cartesian space, according to an embodiment.
- FIG. 5C illustrates an exemplary mapping of sections or tabs within a single quadrant of the two-dimensional Cartesian space, according to an embodiment.
- FIG. 6 is a flowchart of an exemplary method for projecting geographic data from a spherical surface to a two-dimensional Cartesian space, according to an embodiment.
- FIG. 7 is a diagram of an example computer system in which embodiments can be implemented.
- Embodiments relate to projecting geographic data, for example, latitude and longitude coordinates, from a spherical surface to a two-dimensional Cartesian space.
- Embodiments may employ a coordinate testing and transformation method to map the projected geographic data within the two-dimensional Cartesian space so that distances measured on the spherical surface remain relatively consistent with distances measured in the two-dimensional Cartesian space.
- the terms “consistent” and “relatively consistent” are used interchangeably herein to refer to distances that are not significantly different (e.g., greater than a factor of two) between geographic data points and the corresponding points as projected within the Cartesian coordinate space.
- embodiments may allow for the use of efficient search algorithms to find projected geographic points within a particular geographic search area. Consequently, the use of efficient search algorithms may enable the placement of features at a particular level of detail within a three-dimensional representation of a substantially spherical surface of, for example, a celestial body including, but not limited to, the Earth.
- embodiments may be implemented within geographic information systems for purposes of detecting whether placing a particular feature corresponding to one or more objects on the spherical surface would cause an intersection with an already-placed feature.
- various features or objects associated with the spherical surface may be thinned out depending on a particular zoom level in a layered three-dimensional space.
- such a space may comprise several three-dimensional layers with objects or features that can be overlayed on top of the spherical surface.
- the features or objects to display at a particular zoom level may be based on a score.
- a layered three-dimensional space may be found in Google Earth from Google Inc. of Mountain View, Calif.
- objects comprising descriptive information of a particular geographic area may be overlayed on top of the Earth.
- descriptive information can include, but is not limited to, text, graphic icons, thumbnails of photographs, or any other information.
- features must be thinned out so as not to display too much information at outer zoom levels, but progressively add more features as a user zooms in.
- An advantage of embodiments is that they allow for faster data generation in comparison to traditional methods. For example, Mercator-projection thinning, which works by first translating all points into a two-dimensional Cartesian coordinate space and performing searches with quad trees, is extremely fast.
- Mercator projection cannot be used for spherical thinning (e.g., for client applications such as Google Earth) as it produces large variations in the physical size of the area represented by a single pixel in the Mercator space.
- using Mercator projection for a spherical surface of a celestial body causes significant distortion between projected and actual distances near the poles (i.e., the ratio of projected to actual distance tends to infinity near the poles).
- embodiments provide a relatively simple and fast translation from latitude/longitude coordinates from a spherical surface to a two-dimensional Cartesian space, while maintaining a small variation in the physical size of a pixel. Further, embodiments enable searching spherical geographic data using a projected and translated version of geographic data points within a two-dimensional Cartesian space. Thus, embodiments can reduce search complexity and increase computing performance relative to traditional solutions that generally require an area search over the three-dimensional spherical surface.
- references to “one embodiment,” “an embodiment,” “an example embodiment,” etc. indicate that the embodiment described may include a particular feature, structure, or characteristic, but every embodiment may not necessarily include the particular feature, structure, or characteristic. Moreover, such phrases are not necessarily referring to the same embodiment. Further, when a particular feature, structure, or characteristic is described in connection with an embodiment, it is submitted that it is within the knowledge of one skilled in the art to effect such feature, structure, or characteristic in connection with other embodiments whether or not explicitly described.
- FIG. 1 is an exemplary architecture diagram of a system 100 .
- system 100 includes a preprocessing system 120 .
- Preprocessing system 120 further includes a level of detail (LOD) assigner 122 and an index generator 124 .
- Preprocessing system 120 may be coupled to an earth server 130 , according to an embodiment.
- Preprocessing system 120 may communicate with network 190 through earth server 130 .
- preprocessing system 120 can also be coupled directly to network 190 through connections not shown for clarity.
- preprocessing system 120 (and its components including level of detail (LOD) assigner 122 and index generator 124 ) can include pipelined processing or other processing arrangements to carry out its tasks as would be apparent to a person skilled in the art given this description.
- LOD level of detail
- Preprocessing system 120 may be implemented on a computing device.
- a computing device can include, but is not limited to, a personal computer, mobile device such as a mobile phone, workstation, embedded system, game console, television, or set-top box.
- Such a computing device may include, but is not limited to, a device having one or more processors and memory for executing and storing instructions.
- Such a computing device may include software, firmware, hardware, or a combination thereof.
- Software may include one or more applications and an operating system.
- Hardware can include, but is not limited to, a processor, memory and graphical user interface display.
- Preprocessing system 120 can also be implemented on a plurality of computing devices such as a cluster of computing devices located at the same or different locations.
- Network 190 may be any type of network or combination of networks that can carry data communication. Such network 190 can include, but is not limited to, a local area network, medium area network and/or wide area network such as the Internet. Network 190 may be in a form of a wired network or a wireless network. Network 190 can support protocols and technology including, but not limited to, World Wide Web protocols and/or services. Intermediate web servers, gateways, or other servers may be provided between components of system 100 depending upon a particular application or environment. In an embodiment, earth server 130 may communicate over network 190 to a client 140 . Client 140 will be described in further detail below with respect to FIG. 2 .
- LOD Assigner 122 receives geographic data 110 .
- Geographic data 110 may include, but is not limited to, latitude/longitude coordinates corresponding to geographic data points from the spherical surface of celestial body such as, for example, the Earth. Such geographic data points may be associated with one or more features corresponding to various geographic objects of interest on the spherical surface.
- LOD assigner 122 assigns a zoom level to each feature. As noted above, the zoom level assigned to each feature by LOD assigner 122 enables preprocessing system 120 to determine which features should be placed at a particular zoom level so as to prevent intersections or collisions with other features that may be placed at different zoom levels. As will be described in further detail below with respect to FIG. 3 , LOD Assigner 122 may employ a projection technique to project geographic data 110 to a two-dimensional Cartesian space in order to improve computing efficiency and performance.
- index generator 124 may generate a distribution of the one or more features to various levels of a geo-spatial quad tree.
- index generator 124 may store a feature having a particular zoom level at a node of the geo-spatial quad tree. Accordingly, the placement of a feature at a particular zoom level as applied to a geographic data point of interest on the spherical surface would correspond to the level of the quad tree node at which the feature is stored.
- index generator 124 generates a representation of geographic data 110 , as processed by LOD assigner 122 , that can be quickly served by earth server 130 to client 140 over network 190 . Additional characteristics regarding the use and operation of a geo-spatial quad tree data structure within system 100 would be apparent to a person skilled in the relevant art given this description.
- Earth server 130 may transmit geographic data to be displayed by client 140 over network 190 .
- earth server 130 may receive request from client 140 to transmit data corresponding to geographic region of interest on the spherical surface.
- the request may include a bounded geographic search area in the form of a bounding box having latitude/longitude data points associated with the geographic region of interest on the spherical surface.
- earth server 130 may transmit both images (e.g., in the form of image tiles) in addition to descriptive features corresponding to the latitude/longitude data points within the bounding box over network 190 .
- earth server 130 determines the relevant features associated with the geographic (i.e., latitude/longitude) data points that should be displayed and generates a compressed file in a Keyhole Markup Language (KML), which may be referred to as a “KMZ” file.
- KML Keyhole Markup Language
- Earth server 130 may determine such points using the data representation generated by index generator 124 , described above.
- the generated KMZ file can then be transmitted by earth server 130 in a response to client 140 over network 190 . Additional details of KML and KMZ files would be apparent to a person skilled in the relevant art given this description.
- earth server 130 may include a web server or may be coupled to communicate with a web server at the same or a different location.
- a web server can be a software component that responds to a hypertext transfer protocol (HTTP) request with an HTTP response.
- HTTP hypertext transfer protocol
- the web server may be, for example and without limitation, an Apache HTTP Server, Apache Tomcat, MICROSOFT Internet Information Server, JBOSS Application Server, WEBLOGIC Application Server, or SUN JAVA System Web Server.
- the web server may contain web applications which generate content in response to an HTTP request.
- the web server may package the generated content and serve the content to a client in the form of an HTTP response.
- Such content may include hypertext markup language (HTML), extensible markup language (XML), documents, videos, images, multimedia features, or any combination thereof. It is noted that the aforementioned examples of web servers are provided for illustrative purposes only and are not intended to limit embodiments.
- FIG. 2 illustrates an architecture diagram of a system 200 suitable for decompressing geometry and rendering geographic data in response to user commands, according to an embodiment.
- System 200 includes client 140 of FIG. 1 , described above.
- Client 140 includes a decode assembler and cache 212 , a data fetch analyzer 214 , a data aggregator 216 , a frame updater/LOD determiner 218 , and a scene graph display 220 .
- preprocessing system 130 transmits data over network 190 . Such data transmitted by preprocessing system 130 over network 190 may be received by client 140 , according to an embodiment.
- client 140 processes a texture forest generated by preprocessing system 130 and transmitted in part by earth server 130 over network 190 .
- Client 140 may choose which texture resolution to use when rendering a part of an object of interest and use the same single set of texture coordinates for all possible resolutions of that texture in the texture tree. Pre-vertex texture coordinates need not be computed at each resolution level while traversing the texture tree.
- the nodes of texture trees may be associated with the nodes of a spatial structure, such as, for example, a quad tree. Since it may be impractical to transmit the whole texture forest over a network to a client, such as from network 190 to client 140 , the client can use the geo-spatial quad tree to decide what parts of the forest to fetch. In other words, the client may only download the parts of the forest that may be needed to render the scene currently in view.
- Client 140 may be implemented on a computing device.
- a computing device can include, but is not limited to, a personal computer, mobile device such as a mobile phone, workstation, embedded system, game console, television, or set-top box.
- Such a computing device may include, but is not limited to, a device having one or more processors and memory for executing and storing instructions.
- Such a computing device may include software, firmware, hardware, or a combination thereof.
- Software may include one or more applications and an operating system.
- Hardware can include, but is not limited to, a processor, memory and graphical user interface display.
- Client 140 may also be implemented across multiple computing devices.
- decode assembler and cache 212 receives data from network 190 .
- this data may comprise three dimensional data relating to geometries of various objects of interest in a scene.
- data may comprise image data in highly compressed formats, such as, for example, the JPEG 2000 format.
- decode assembler and cache 212 may convert the data from a received format to another format that may be less efficiently compressed, but more suitable for direct rendering by client 140 . Additionally decode assembler and cache 212 may assemble and store the decoded data into data sets that may be used by client 140 for further processing.
- Data fetch analyzer 214 processes each node of the geo-spatial quad tree that intersects the current view to be rendered by client 140 and whose resolution is not too detailed for the current view. Data fetch analyzer 214 downloads metadata for these quad tree nodes from earth server 130 .
- the quad tree node metadata may indicate that the quad tree nodes contain geometric objects or textures, which are then downloaded.
- Data aggregator 216 may receive a plurality of data sets that includes texture and geometry data relating to objects of interest and other objects in a scene. Data aggregator 216 may then aggregate the data sets before they are provided to frame updater/LOD determiner 218 . As an example, data aggregator 216 may further aggregate textures and geometric objects using the same texture trees described above. Aggregation of various data sets may improve efficiency of client 140 .
- Frame updater/LOD determiner 218 processes a plurality of geometry LOD trees and texture trees received from data aggregator 216 .
- frame updater/LOD determiner 218 may determine LODs for all geometry and texture objects and update LODs that have been determined.
- a scene graph may be considered a representation that includes information about the geometry and appearance of all objects appearing on a graphical display.
- a scene graph may be a dynamic data structure within a computer program.
- a scene graph may include data that describes shape objects (geometry and appearance), geometric structure relationships (geometric transformations, ordering, and grouping), global objects (how all shape objects are viewed, e.g. viewpoints, lights, backgrounds), and behaviors (procedures for modifying information stored in a scene graph).
- a scene graph is implemented using object-oriented computer programming techniques.
- scene graph objects can be provided as object-oriented software objects, which may describe shape objects.
- a scene graph can include a software object associated with an building image, and a scene graph display command can operate on the building object to render the building image on a graphical display.
- Objects of a scene graph may be generated using software commands, for example a “create” command.
- the objects of a scene graph are operated upon using other commands, for example a “render” command, which causes an object to appear as an image on a video screen. Therefore, the scene graph, including the objects, is associated with a set of scene graph display commands.
- a scene graph can be represented diagrammatically as a tree structure having “nodes” and interconnecting lines or “arcs.”
- the scene graph data structure described above underlies the tree structure representation.
- the scene graph can also be associated with a sequence of display commands, which can be used to generate the underlying data structure of the scene graph.
- a scene graph can be associated with more scene graph display commands than actually are used to generate images on a graphical display.
- a scene graph can be associated with a set of “create” commands that represent scene graph objects, and not every object necessarily has a corresponding “render” command that generates an image on the graphical display.
- APIs high-level software application programmer interfaces
- Java3D and VRML provide high-level software to generate a scene graph.
- Lower level APIs have also been provided, including Open GL, and Direct 3D.
- Application software for example computer games, has been developed to provide the scene graph display command to an API.
- a scene graph generated and updated by frame updater/LOD determiner 218 may be provided to scene graph display 220 .
- Scene graph display 220 renders a scene graph for display so that a scene may be viewed by a user of client 140 .
- scene graph display 220 may be associated with a 3D graphics circuit board having local processing capability, and the ability to interpret scene graph data and rapidly provide a corresponding graphical display on a monitor.
- Exemplary scene graph programming techniques in conjunction with the 3D graphic circuit board, provide the ability to rapidly render a 3D image on a graphical display. Images on the graphical display can also be rapidly updated with one or more display commands, provided by the application software, interpreted by the API, and sent to the 3D graphics circuit board.
- FIG. 3 is a diagram of an exemplary system 300 for projecting geographic data from a spherical surface to a two-dimensional Cartesian space, according to an embodiment.
- System 300 includes a data projector 310 , a tab mapping unit 320 , two-dimensional (2D) data 330 , a boundary generator 340 , and a density correction unit 350 .
- System 300 may be implemented as a component of system 100 of FIG. 1 , discussed above, according to an embodiment.
- data projector 310 , tab mapping unit 320 , boundary generator 340 , and density correction unit 350 may be implemented in one or more components of preprocessing system 120 (including LOD assigner 122 and index generator 124 ) of FIG. 1 , as described above.
- data projector 310 tab mapping unit 320 , 2D data 330 , boundary generator 340 , and density correction unit 350 are shown in FIG. 3 , it would be apparent to a person skilled in the relevant art given this description that system 300 may include additional components, modules, and/or sub-components as necessary.
- data projector 310 , tab mapping unit 320 , boundary generator 340 , and density correction unit 350 may be communicatively coupled via, for example, an internal data bus of device 100 .
- a quad tree data structure using two distinct node types may be employed.
- a quad tree structure is generally a tree data structure in which each internal node has up to four children.
- a quad tree structure may be used, for example, to repeatedly subdivide space into quadrants.
- the structure has two distinct node types: leaf nodes and grid (or non-leaf) nodes.
- the leaf nodes are located at the bottom level (max_level) of the structure, and contain data entries (i.e., geo-located or geographic data) to be found in a bounding box associated with that node.
- Grid nodes may lie, for example, at levels 0 to max_level ⁇ 1, and may contain the total number of data entries in all leaf nodes descendant of the node.
- an unbalanced tree may be used instead, in which a leaf node is only turned into a grid node and subdivided when the leaf node's population exceeds some predetermined threshold limit. This allows large geographic areas that have no features on the spherical surface (e.g., large areas of ocean on the Earth), or any large quantity of the Cartesian space that may not map to any part of the spherical space, to be represented using very little memory.
- a spherical surface of a celestial body such as, for example and without limitation, the Earth can be represented using three-dimensional latitude/longitude space.
- a single grid node may cover the entire space (i.e., ( ⁇ 180, ⁇ 90) to (180, 90)), using the longitude/latitude coordinate system.
- this space may be divided into various cells of data.
- a row/column coordinate system in that division at a particular level may be used. For example, across the entire grid, a unique coordinate system may be represented as the following ordered set: (row, column, level). The root node is thus at coordinates (0, 0, 0).
- geographic data 110 represents the geographic data (e.g., latitude/longitude coordinates) associated with the spherical surface.
- data projector 310 is configured to project geographic data 110 from the spherical surface onto faces of a three-dimensional polyhedron.
- geographic data 110 includes geographic data associated with the spherical surface.
- the spherical surface may include, but is not limited to, the Earth, Mars, the Moon, or any other celestial body that may be modeled using a three-dimensional spherical surface.
- the three-dimensional polyhedron may include any geometric solid represented in a virtual three-dimensional space. In an example, described in further detail below, such polyhedron may be a virtual three-dimensional cube. It is noted that embodiments may be described with respect to a three-dimensional cube for illustrative purposes only, and embodiments are not limited thereto.
- data projector 310 further projects, or arranges, the faces of the three-dimensional polyhedron within a two-dimensional Cartesian space according to a cutout pattern corresponding to the type of three-dimensional polyhedron (see, e.g., the cube cutout pattern shown in FIG. 5A , described below).
- the faces of the three-dimensional polyhedron may be arranged within the two-dimensional Cartesian space so that the faces are centered within the Cartesian space and have folding symmetry across each dimension of the two-dimensional Cartesian space. It is noted that embodiments do not require the cutout pattern be centered and that faces of the polyhedron be arranged to have folding symmetry within the two-dimensional Cartesian space.
- any additional processing costs that may be necessary to implement such an optimized arrangement of faces would be significantly outweighed by the processing gains associated with employing such an arrangement, as will be described in further detail below.
- data projector 310 also projects geographic data points associated with the spherical surface to the two-dimensional Cartesian space by mapping such points to Cartesian coordinates.
- the Cartesian coordinates to which the geographic data points are mapped correspond to the arranged faces of the virtual three-dimensional polyhedron within the two-dimensional Cartesian space.
- the geographic data may be projected directly by data projector 310 from the spherical surface onto a cutout shape corresponding to the multiple faces of the polyhedron, according to an embodiment. Accordingly, the multiple faces of the cutout shape form the virtual polyhedron if they were to be folded in three-dimensional space. Further, the cutout shape may be, for example, centered on the two-dimensional Cartesian space in order to provide folding symmetry across each dimension of the two-dimensional Cartesian space, as described above.
- tab mapping unit 320 further maps one or more, or a subset, of the projected geographic data points to a second set of Cartesian coordinates within the two-dimensional Cartesian space.
- tab mapping unit 320 maps the one or more projected geographic data points by transforming sections of the arranged faces to various locations within the two-dimensional Cartesian space.
- the second set of Cartesian coordinates correspond to the various locations to which the subset of projected geographic data points are mapped.
- Such sections may be referred to herein as “tabs.”
- each section or tab may be of a predetermined size and all sections/tabs may be of the same size.
- a section may be a quarter of each face of the three-dimensional polyhedron, where all the faces of the polyhedron are of the same size. This is illustrated by tabs 502 and 504 in the example two-dimensional Cartesian space shown in FIG. 5B , described further below.
- these tabs are mapped across the two-dimensional Cartesian space in such a way as to ensure that edges of the faces of the polyhedron that adjoin in three-dimensional space also adjoin within the two-dimensional Cartesian space. Accordingly, relative distances among the projected geographic data points remain consistent between the spherical surface and the two-dimensional Cartesian space. For example, each of two geographic data points, which are relatively near each other on the spherical surface, may be projected onto different faces of the polyhedron. The different faces may then be projected or arranged by data projector 310 within the two-dimensional Cartesian space in such a way that the projected geographic data points are no longer near each other.
- any one projected geographic data point may be associated with either one or two sets of Cartesian coordinates within the two-dimensional Cartesian space.
- tab mapping unit 320 transforms tabs within the two-dimensional Cartesian space by applying various transformations to each of the tabs. For example, tab mapping unit 320 may apply one type of transformation to one tab associated with a face and a second transformation to another tab associated with a different face. Further, the first transformation may be based on a first face-dependent rotation associated with the first face and the second transformation may be based on a second face-dependent rotation associated with the second face.
- such transformations may involve rotating and transposing the tabs to various locations within the two-dimensional Cartesian space, as described above.
- tab mapping unit 320 may first determine a quadrant of the two-dimensional Cartesian space for each data point corresponding to different tabs or sections, which may in turn be associated with different faces.
- Tab mapping unit 320 may then rotate and transpose the sections within the determined quadrant based on respective face-dependent rotations.
- Tab mapping unit 320 may determine the face-dependent rotations based on the projected geographic data associated with each face within the two-dimensional Cartesian space.
- the geographic data may correspond to a specific geographic region from the spherical surface (e.g., a continent or body of land from the Earth's surface). A person skilled in the art would appreciate how such a face-dependent rotation may be determined based on the geographic region projected on a particular face.
- tab mapping unit 320 uses face-dependent rotations based on an angle of rotation specific to the shape of the three-dimensional polyhedron.
- tab mapping unit 320 uses face-dependent rotations that are multiples of 90 degrees.
- tab mapping unit 320 uses face-dependent rotations that are multiples of 72 degrees.
- different tabs may be rotated in different directions. For example, a first face-dependent rotation may be 90 degrees in a first direction (e.g., clockwise) and a second face-dependent rotation may be 90 degrees in a second direction opposite to the first direction (e.g., counter-clockwise).
- tab mapping unit 320 produces 2D data 330 once the projected geographic data points have been mapped to two-dimensional Cartesian coordinates, as described above.
- 2D data 330 represents a two-dimensional version of geographic data 110 .
- one advantage of a mapping from three-dimensional space to two-dimensional space is a significant performance advantage related to searching for data points within a particular geographic search area.
- 2D data 330 may be used to generate a spatial index of geographic or geospatial data covering all areas of the spherical surface.
- a spatial index may be stored as, for example, using a database or other collection.
- a spatial index may be represented using a quad tree data structure, as described above.
- 2D data 330 may be used to perform a search for a specific geographic data point associated with the spherical surface using the first and second sets of Cartesian coordinates within the two-dimensional Cartesian space. For example, geographic data points may be searched within a quad tree data structure corresponding to 2D data 330 .
- a bounding box is initially received by boundary generator 340 that corresponds to a particular latitude/longitude space.
- a result for the search may consist of two parts: a list of data entries, and a list of object collections. Data entries represent single data points, while object collections represent clusters of objects.
- Boundary generator 340 may determine a minimum output zoom level (or simply “minimum zoom level”) in an index for the bounding box. For example, if an item can be placed or displayed without any overlaps or intersections at a given zoom level, it can also be displayed at greater zoom levels. Boundary generator 340 may use a zoom level to determine which objects or features should be output for the level. For example, for a grid node containing fewer than N items (where N is a predetermined value associated with a maximum number of items to output at the minimum zoom level), boundary generator 340 may search descendant or child nodes corresponding to the minimum zoom level for this node and traverse them. There may be no more than N such nodes.
- boundary generator 340 may iterate the list of data entries and append those which fall into the query bounding box to the output.
- the data entries in the result may be scored (based, e.g., on popularity, last modification, or other user controlled parameters), and the most relevant ones may be output to limit the size of the output. It is noted that a query run at a sufficiently high zoom level may cause only data points corresponding to such a level to be emitted, e.g., if the level for a query bounding box reaches max level. For any query, a finite number of nodes may be explored, which is controlled by N and the number of levels one wants to reach.
- embodiments are described with respect to searching with quad trees for illustrative purposes and are not intended to be limited thereto.
- embodiments can be used to search geographic data points using any efficient searching algorithm.
- efficient searching algorithms would be apparent to a person skilled in the art given this detailed description.
- the projection of geographic data from a spherical surface such as, for example, the Earth, onto a three-dimensional polyhedron shape such as, for example, a cube, may cause density errors.
- a spherical surface such as, for example, the Earth
- a three-dimensional polyhedron shape such as, for example, a cube
- a fixed distance near a corner of a face in the Cartesian space represents a smaller geographic or spherical distance than the same distance near the center of a face
- a search for points within a fixed-size bounding box, a bounding box of a fixed size at the center of a cube face will therefore cover a larger portion of the spherical surface (e.g., the Earth) than the same box used near a corner.
- boundary generator 340 employs density correction unit 350 to correct for this effect by adjusting the size of the bounded geographic search area, i.e., the search box. If the box is increased in size near the cube corners, and reduced near the center of the faces, any visible defects or distortions can be removed. Further, by reducing or removing such density errors, the relative distances among the geographic data points within the bounded geographic search area remain consistent between the spherical surface and the two-dimensional Cartesian space. It is noted that such distances between points measured in the two-dimensional Cartesian space may vary relative to the distances between corresponding geographic points measured on the spherical surface depending on the shape of the polyhedron that is used.
- distances between each may vary by a factor of two.
- such variation may be reduced by using different polyhedron shapes having a larger number of faces.
- using a polyhedron with a larger number of faces would result in smaller density errors.
- density correction unit 350 may calculate the correct size of a geographical search area (i.e., adjusts the size of a search or bounding box) using trigonometry.
- density correction unit 350 may utilize a matrix of ratios covering a quarter of a face of the three-dimensional polyhedron (e.g., a quarter of a cube face) and then use a two-dimensional linear interpolation to calculate the correct adjustment for any given geographic location.
- An advantage of the latter approach may be speed and simplicity. For example, for cube projection, it has been found that a matrix of 20 ⁇ 20 points covering a quarter of a cube face is adequate.
- FIGS. 4 and 5 A- 5 C The example cube cutout projection described in this section and in FIGS. 4 and 5 A- 5 C is presented for illustrative purposes and embodiments are not limited to cubes or cube cutout shapes, as noted above. This example is also described with respect to the Earth for illustrative purposes only and embodiments are not limited thereto, as further noted above. Further, for ease of explanation, FIGS. 4 and 5 A- 5 C may be described with respect to system 300 of FIG. 3 , described above, but embodiments are not intended to be limited thereto.
- FIG. 4 is a diagram of an exemplary virtual three-dimensional cube 400 for projecting geographic data from a spherical surface, according to an embodiment.
- Cube 400 includes faces 410 , 412 , 414 , 416 , 418 , and 420 .
- geographic Earth data may be projected (e.g., by data projector 310 of FIG. 3 , described above) onto the six faces (i.e., faces 410 , 412 , 414 , 416 , 418 , and 420 ) of cube 400 .
- these cube faces may then be further projected or arranged in a pattern or shape on a two-dimensional Cartesian space such that faces which abut on the cube also abut (as far as possible) on the Cartesian space.
- the arranging or projecting is done in the same way one would draw out a flat paper shape which can be folded into a cube.
- the geographic data may be directly projected onto the cube cutout shape within the two-dimensional Cartesian space, as noted above.
- FIG. 5A illustrates an exemplary cube cutout shape, according to an embodiment.
- the example cube cutout shape shown in FIG. 5A includes faces labeled 0-5, in which each face corresponds to a different geographic region of the Earth. For example, face 0 corresponds to Africa, face 1 to India, and so forth.
- the faces of the cube cutout shown in FIG. 5A may be thought of as the arranged faces of cube 400 .
- face 418 of cube 400 may be designated as the North pole and face 412 may be designated as the South pole.
- face 0 of FIG. 5A may correspond to face 416 of cube 400 , face 1 to face 420 , face 2 to face 410 , face 3 to face 414 , face 4 to face 418 and face 5 to face 412 .
- tabs or sections of the faces from the cube cutout shape are mapped to various locations within the two-dimensional Cartesian space.
- tabs are similar to paper tabs one would add to a paper cube cutout in order to be able to glue abutting faces together.
- any given tab may correspond to a triangle forming a quarter of the area of one cube face.
- this triangle which the tab would overlap were the paper shape to be folded together.
- tap mapping unit 320 of FIG. 3 it must be determined (e.g., by tap mapping unit 320 of FIG. 3 , described above) whether the point lies on a part of a face whose area is also represented on a tab. If it is determined that the point does lie on a part of the face represented by a tab, we add the point also to the corresponding location on the tab itself.
- geographic points may be added in either one or two places within the Cartesian coordinate space (for any given point on a cube face, there can be only one tab to which that point must be mapped).
- the searching code itself may be adjusted such that if a search box overlaps the edge of a cube face, it is cut into pieces, and some of those pieces rotated and translated.
- Such an embodiment may be more complicated to implement than adding points multiple times within the two-dimensional Cartesian space.
- such an embodiment may yield lower memory use, as only one set of Cartesian coordinates rather than multiple sets is tracked for each geographic data point.
- such an approach may be desirable if, for example, the amount of available RAM becomes limited.
- the searching code may be adjusted such that if the center of a search box lies within an area of a face corresponding to a tab, a second search box is generated.
- a second search box may have the same dimensions as the original search box but have a center corresponding to the location of the mapped tab within the Cartesian space.
- a search for a projected data point corresponding to the tab can then be performed using both the original search box and the second search box.
- multiple searches are performed, such an embodiment may require more processing time than a single search where some points have been added multiple times to the two-dimensional Cartesian space.
- an advantage of such an embodiment is that it may yield lower memory use, as only one set (as opposed to multiple sets) of Cartesian coordinates is tracked for each geographic data point. Therefore, this approach may be used if it is desirable to reduce RAM usage at the cost of increased CPU usage.
- a search box must be split into two search boxes.
- the bounds of a search box may extend outside the bounds of the Cartesian space (i.e., such that the minimum X value is less than 0, or the maximum greater than the maximum X value possible).
- Such a search box must be split into two search boxes.
- One search box may be placed flush against the left-most edge of the Cartesian space while the other search box is placed flush against the right edge.
- a search box centered around the center of face 0 shown in FIG. 5A described above, must be split in two so as to cover the relevant portions of face 0, which are located on opposite sides of the Cartesian space.
- FIG. 5B illustrates an exemplary mapping of sections or tabs from faces of the cube cutout shape in FIG. 5A to locations within the two-dimensional Cartesian space, according to an embodiment. It is noted that at least one face (the face corresponding to face 0 in FIG. 5A ) wraps around from the left to the right in order to give the cutout shape folding symmetry across the X midpoint and across the Y midpoint of the two-dimensional Cartesian space. It would be apparent to a person skilled in the art given this description that an advantage of such folding symmetry is that it greatly simplifies the mapping of coordinates to tab coordinates, as described above.
- FIG. 5C illustrates an exemplary mapping of sections or tabs within a single quadrant of the two-dimensional Cartesian space, according to an embodiment.
- tab mapping unit 320 of FIG. 3 described above, can take advantage of the X and Y folding symmetry.
- the first stage of tab mapping may be to determine which quadrant a point is in, record that, and then map the X and Y coordinates from that into the single quadrant.
- tabs 1-4 there exist only four tabs (tabs 1-4) to be mapped.
- the tabs shown as 1 and 2 have 90 degree rotational symmetry about point A (in opposite directions), and tabs 3 and 4 have 180 degree rotation symmetry about point B.
- the tabs may be mapped (e.g., by tap mapping unit 320 , described above) to the appropriate locations within the two-dimensional Cartesian space without having to use trigonometric operations.
- FIG. 6 is a flowchart of an exemplary method 600 for projecting geographic data from a spherical surface to a two-dimensional Cartesian space, according to an embodiment.
- Method 600 includes steps 602 , 604 , 606 , 608 , and 610 .
- system 300 of FIG. 3 will be used to describe method 600 , but is not intended to be limited thereto.
- Method 600 begins in step 602 , which includes projecting geographic data from a spherical surface onto faces of a three-dimensional polyhedron.
- the spherical surface may be any real-world spherical body that can be represented using a spherical model (e.g., the Earth, Moon, Mars, etc.).
- the three-dimensional polyhedron includes, but is not limited to, a virtual three-dimensional cube. Step 602 may be performed by, for example, data projector 310 of FIG. 3 , as described above.
- Step 604 includes arranging the faces of the three-dimensional polyhedron within a two-dimensional Cartesian space according to a cutout pattern corresponding to the type of polyhedron being used.
- the cutout pattern would be a cube cutout pattern, as described above.
- Such a cutout pattern or shape has folding symmetry across each dimension in the two-dimensional Cartesian space.
- the geographic data points associated with the spherical surface are also mapped to Cartesian coordinates within the two-dimensional Cartesian space.
- steps 602 and 604 may be collapsed, according to an embodiment.
- the geographic data from the spherical surface may be projected directly onto a cutout shape within the two-dimensional Cartesian space.
- Step 604 may be performed by, for example, data projector 310 of FIG. 3 , as described above.
- step 606 in which sections (also referred to as “tabs”) of the arranged faces are transformed to various locations within the two-dimensional space.
- step 606 may involve rotating and transposing the tabs so that edges of faces which adjoin in three-dimensional space (i.e., if the cutout shape were folded into the three-dimensional polyhedron) also adjoin within the two-dimensional Cartesian space. It is noted that ensuring that the cutout shape is centered within the two-dimensional Cartesian space, the folding symmetry of the cube cutout shape can be utilized to facilitate applying various transformations to the tab/sections. Further, as described above, such rotations may be kept to multiples of 90 degrees, thereby reducing the complexity of any operations that are performed.
- step 608 in which projected geographic data points corresponding to the tabs are mapped to a second set of Cartesian coordinates corresponding to the locations of the transformed tabs within the two-dimensional Cartesian space.
- any projected geographic data point may be associated with either one or two sets of Cartesian coordinates.
- a geographic data point that lies within a tab of a face would be associated with the Cartesian coordinates corresponding to the face and the Cartesian coordinates corresponding to the locations to which the tab has been transformed within the Cartesian space (e.g., as illustrated in FIG. 5C , as described above).
- Step 608 ensures that distances between geographic data points measured on the spherical surface are consistent with the same distances measured in the two-dimensional Cartesian space. Steps 606 and 608 may be performed by, for example, tab mapping unit 320 of FIG. 3 , as described above.
- Method 600 may then conclude after step 608 or in optional step 610 , which includes performing efficient searches for projected data points within the two-dimensional Cartesian space.
- Such projected data points may represent geographic data points associated with the spherical surface, which lie within a bounded geographic area, as described above.
- step 610 may include additional steps for correcting density errors related to distances between points as reflected within the two-dimensional Cartesian space. As described above, such density errors may result as a consequence of projecting geographic data points from a spherical surface such as, for example, the Earth, onto the faces of a three-dimensional polyhedron shape.
- Step 610 may be performed by, for example, boundary generator 340 and density correction unit 350 of FIG. 3 , as described above.
- embodiments of method 600 as described herein provide a relatively simple and fast translation from latitude/longitude coordinates from a spherical surface to a two-dimensional Cartesian space, while maintaining a small variation in the physical size of a pixel (steps 602 - 608 ). Further, embodiments enable searching spherical geographic data using a two-dimensional Cartesian space (step 610 ). Searching by utilizing such a translation of spherical geographic data to Cartesian coordinates, as described herein, can reduce complexity and increase computing performance relative to traditional solutions that generally require an area search over the three-dimensional spherical surface.
- FIGS. 1-6 may be implemented using hardware, software modules, firmware, tangible computer readable media having instructions stored thereon, or a combination thereof and may be implemented in one or more computer systems or other processing systems.
- FIG. 7 illustrates an example computer system 700 in which embodiments of the present invention, or portions thereof, may by implemented as computer-readable code.
- one or more components of system 100 of FIG. 1 , system 200 of FIG. 2 , and/or system 300 of FIG. 3 can be implemented in computer system 700 using hardware, software, firmware, tangible computer readable media having instructions stored thereon, or a combination thereof and may be implemented in one or more computer systems or other processing systems.
- Hardware, software, or any combination of such may embody one or more of the modules and components in FIGS. 1-6 .
- programmable logic may execute on a commercially available processing platform or a special purpose device.
- programmable logic may execute on a commercially available processing platform or a special purpose device.
- One of ordinary skill in the art may appreciate that embodiments of the disclosed subject matter can be practiced with various computer system configurations, including multi-core multiprocessor systems, minicomputers, mainframe computers, computer linked or clustered with distributed functions, as well as pervasive or miniature computers that may be embedded into virtually any device.
- processor devices may be used to implement the above described embodiments.
- a processor device may be a single processor, a plurality of processors, or combinations thereof.
- Processor devices may have one or more processor “cores.”
- Processor device 704 may be a special purpose or a general purpose processor device. As will be appreciated by persons skilled in the relevant art, processor device 704 may also be a single processor in a multi-core/multiprocessor system, such system operating alone, or in a cluster of computing devices operating in a cluster or server farm. Processor device 704 is connected to a communication infrastructure 706 , for example, a bus, message queue, network, or multi-core message-passing scheme.
- Computer system 700 also includes a main memory 708 , for example, random access memory (RAM), and may also include a secondary memory 710 .
- Secondary memory 710 may include, for example, a hard disk drive 712 , removable storage drive 714 .
- Removable storage drive 714 may comprise a floppy disk drive, a magnetic tape drive, an optical disk drive, a flash memory, or the like.
- the removable storage drive 714 reads from and/or writes to a removable storage unit 718 in a well known manner.
- Removable storage unit 718 may comprise a floppy disk, magnetic tape, optical disk, etc. which is read by and written to by removable storage drive 714 .
- removable storage unit 718 includes a computer usable storage medium having stored therein computer software and/or data.
- secondary memory 710 may include other similar means for allowing computer programs or other instructions to be loaded into computer system 700 .
- Such means may include, for example, a removable storage unit 722 and an interface 720 .
- Examples of such means may include a program cartridge and cartridge interface (such as that found in video game devices), a removable memory chip (such as an EPROM, or PROM) and associated socket, and other removable storage units 722 and interfaces 720 which allow software and data to be transferred from the removable storage unit 722 to computer system 700 .
- Computer system 700 may also include a communications interface 724 .
- Communications interface 724 allows software and data to be transferred between computer system 700 and external devices.
- Communications interface 724 may include a modem, a network interface (such as an Ethernet card), a communications port, a PCMCIA slot and card, or the like.
- Software and data transferred via communications interface 724 may be in the form of signals, which may be electronic, electromagnetic, optical, or other signals capable of being received by communications interface 724 . These signals may be provided to communications interface 724 via a communications path 726 .
- Communications path 726 carries signals and may be implemented using wire or cable, fiber optics, a phone line, a cellular phone link, an RF link or other communications channels.
- Computer program medium and “computer usable medium” are used to generally refer to media such as removable storage unit 718 , removable storage unit 722 , and a hard disk installed in hard disk drive 712 .
- Computer program medium and computer usable medium may also refer to memories, such as main memory 708 and secondary memory 710 , which may be memory semiconductors (e.g. DRAMs, etc.).
- Computer programs are stored in main memory 708 and/or secondary memory 710 . Computer programs may also be received via communications interface 724 . Such computer programs, when executed, enable computer system 700 to implement embodiments of the present invention as discussed herein. In particular, the computer programs, when executed, enable processor device 704 to implement the processes of embodiments, such as the stages in the method illustrated by flowchart 600 of FIG. 6 discussed above. Accordingly, such computer programs represent controllers of the computer system 700 . Where embodiments are implemented using software, the software may be stored in a computer program product and loaded into computer system 700 using removable storage drive 714 , interface 720 , and hard disk drive 712 , or communications interface 724 .
- Embodiments of the invention also may be directed to computer program products comprising software stored on any computer useable medium. Such software, when executed in one or more data processing device, causes a data processing device(s) to operate as described herein.
- Embodiments of the invention employ any computer useable or readable medium. Examples of computer useable mediums include, but are not limited to, primary storage devices (e.g., any type of random access memory), secondary storage devices (e.g., hard drives, floppy disks, CD ROMS, ZIP disks, tapes, magnetic storage devices, and optical storage devices, MEMS, nanotechnological storage device, etc.).
Abstract
Description
Claims (27)
Priority Applications (1)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US13/027,905 US8896601B1 (en) | 2010-10-12 | 2011-02-15 | Projecting geographic data from a spherical surface to two-dimensional cartesian space |
Applications Claiming Priority (2)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US39236710P | 2010-10-12 | 2010-10-12 | |
US13/027,905 US8896601B1 (en) | 2010-10-12 | 2011-02-15 | Projecting geographic data from a spherical surface to two-dimensional cartesian space |
Publications (1)
Publication Number | Publication Date |
---|---|
US8896601B1 true US8896601B1 (en) | 2014-11-25 |
Family
ID=51901798
Family Applications (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
US13/027,905 Expired - Fee Related US8896601B1 (en) | 2010-10-12 | 2011-02-15 | Projecting geographic data from a spherical surface to two-dimensional cartesian space |
Country Status (1)
Country | Link |
---|---|
US (1) | US8896601B1 (en) |
Cited By (6)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20170200309A1 (en) * | 2015-12-16 | 2017-07-13 | Objectvideo, Inc. | Using satellite imagery to enhance a 3d surface model of a real world cityscape |
WO2018067952A1 (en) * | 2016-10-07 | 2018-04-12 | Vid Scale, Inc. | Geometry conversion and frame packing associated with 360-degree videos |
WO2018093100A1 (en) * | 2016-11-18 | 2018-05-24 | Samsung Electronics Co., Ltd. | Electronic apparatus and method for processing image thereof |
CN108776952A (en) * | 2018-05-24 | 2018-11-09 | 天津大学 | Sea chart coordinate conversion method for hydrological meteorological monitoring |
CN111831772A (en) * | 2018-06-06 | 2020-10-27 | 北京嘀嘀无限科技发展有限公司 | System and method for identifying grids of geographic regions in a map |
CN114491307A (en) * | 2022-01-14 | 2022-05-13 | 青岛海信网络科技股份有限公司 | Equipment aggregation method and device |
Citations (4)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20060251336A1 (en) * | 2002-12-03 | 2006-11-09 | Dan Lelescu | Representation and coding of panoramic and omnidirectional images |
US20090123088A1 (en) | 2007-11-14 | 2009-05-14 | Microsoft Corporation | Tiled projections for planar processing of round earth data |
US7576754B1 (en) | 2005-10-27 | 2009-08-18 | Google Inc. | System and method for identifying bounds of a geographical area |
US20100001997A1 (en) * | 2007-01-04 | 2010-01-07 | Hajime Narukawa | Information Processing Method |
-
2011
- 2011-02-15 US US13/027,905 patent/US8896601B1/en not_active Expired - Fee Related
Patent Citations (4)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20060251336A1 (en) * | 2002-12-03 | 2006-11-09 | Dan Lelescu | Representation and coding of panoramic and omnidirectional images |
US7576754B1 (en) | 2005-10-27 | 2009-08-18 | Google Inc. | System and method for identifying bounds of a geographical area |
US20100001997A1 (en) * | 2007-01-04 | 2010-01-07 | Hajime Narukawa | Information Processing Method |
US20090123088A1 (en) | 2007-11-14 | 2009-05-14 | Microsoft Corporation | Tiled projections for planar processing of round earth data |
Cited By (15)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US10430961B2 (en) * | 2015-12-16 | 2019-10-01 | Objectvideo Labs, Llc | Using satellite imagery to enhance a 3D surface model of a real world cityscape |
US20170200309A1 (en) * | 2015-12-16 | 2017-07-13 | Objectvideo, Inc. | Using satellite imagery to enhance a 3d surface model of a real world cityscape |
US11210806B1 (en) | 2015-12-16 | 2021-12-28 | Objectvideo Labs, Llc | Using satellite imagery to enhance a 3D surface model of a real world cityscape |
WO2018067952A1 (en) * | 2016-10-07 | 2018-04-12 | Vid Scale, Inc. | Geometry conversion and frame packing associated with 360-degree videos |
US11212496B2 (en) | 2016-10-07 | 2021-12-28 | Vid Scale, Inc. | Geometry conversion and frame packing associated with 360-degree videos |
KR20180056124A (en) * | 2016-11-18 | 2018-05-28 | 삼성전자주식회사 | Electronic apparatus and image processing method thereof |
US10535147B2 (en) | 2016-11-18 | 2020-01-14 | Samsung Electronics Co., Ltd. | Electronic apparatus and method for processing image thereof |
WO2018093100A1 (en) * | 2016-11-18 | 2018-05-24 | Samsung Electronics Co., Ltd. | Electronic apparatus and method for processing image thereof |
CN108776952A (en) * | 2018-05-24 | 2018-11-09 | 天津大学 | Sea chart coordinate conversion method for hydrological meteorological monitoring |
CN108776952B (en) * | 2018-05-24 | 2022-05-13 | 天津大学 | Sea chart coordinate conversion method for hydrological meteorological monitoring |
CN111831772A (en) * | 2018-06-06 | 2020-10-27 | 北京嘀嘀无限科技发展有限公司 | System and method for identifying grids of geographic regions in a map |
CN111831772B (en) * | 2018-06-06 | 2022-04-08 | 北京嘀嘀无限科技发展有限公司 | System and method for identifying grids of geographic regions in a map |
US11526536B2 (en) | 2018-06-06 | 2022-12-13 | Beijing Didi Infinity Technology And Development Co., Ltd. | Systems and methods for identifying grids of geographical region in map |
CN114491307A (en) * | 2022-01-14 | 2022-05-13 | 青岛海信网络科技股份有限公司 | Equipment aggregation method and device |
CN114491307B (en) * | 2022-01-14 | 2024-03-22 | 青岛海信网络科技股份有限公司 | Equipment aggregation method and device |
Similar Documents
Publication | Publication Date | Title |
---|---|---|
US11200280B2 (en) | System and method for storing and retrieving geospatial data | |
US9024947B2 (en) | Rendering and navigating photographic panoramas with depth information in a geographic information system | |
US9996976B2 (en) | System and method for real-time overlay of map features onto a video feed | |
CN101887595B (en) | Three-dimensional digital earth-space data organizing and rendering method based on quad-tree index | |
US9053127B2 (en) | System and method for storing a dataset of image tiles | |
US8660386B1 (en) | Large-scale image processing using mass parallelization techniques | |
US8447765B1 (en) | Height based indexing | |
WO2022193941A1 (en) | Image rendering method and apparatus, device, medium, and computer program product | |
US8896601B1 (en) | Projecting geographic data from a spherical surface to two-dimensional cartesian space | |
US7643673B2 (en) | Markup language for interactive geographic information system | |
US9165403B2 (en) | Planetary scale object rendering | |
US20150187130A1 (en) | Automatic Generation of 2.5D Extruded Polygons from Full 3D Models | |
US7098915B2 (en) | System and method for determining line-of-sight volume for a specified point | |
CA2718782A1 (en) | System and method for correlating and synchronizing a three-dimensional site model and two-dimensional imagery | |
US9311748B2 (en) | Method and system for generating and storing data objects for multi-resolution geometry in a three dimensional model | |
CN111986306A (en) | Integrated data display and simulation platform | |
Faust et al. | Real-time global data model for the digital earth | |
US10013474B2 (en) | System and method for hierarchical synchronization of a dataset of image tiles | |
Adorjan | Opensfm: A collaborative structure-from-motion system | |
Larrick et al. | Interactive visualization of 3d terrain data stored in the cloud | |
CN112489210A (en) | Method for constructing autonomous controllable three-dimensional natural resource map system | |
Liu et al. | An effective spherical panoramic LoD model for a mobile street view service | |
Que et al. | Realistic 3D terrain roaming and real-time flight simulation | |
CN115591247A (en) | Coordinate system repositioning method, system and server of game engine | |
Bladin et al. | Design and Implementation of an Out-of-Core Globe Rendering System Using Multiple Map Services |
Legal Events
Date | Code | Title | Description |
---|---|---|---|
AS | Assignment |
Owner name: GOOGLE INC., CALIFORNIAFree format text: ASSIGNMENT OF ASSIGNORS INTEREST;ASSIGNOR:NORMAN, PHIL;REEL/FRAME:025812/0421Effective date: 20110214 |
|
STCF | Information on status: patent grant |
Free format text: PATENTED CASE |
|
AS | Assignment |
Owner name: GOOGLE LLC, CALIFORNIAFree format text: CHANGE OF NAME;ASSIGNOR:GOOGLE INC.;REEL/FRAME:044277/0001Effective date: 20170929 |
|
MAFP | Maintenance fee payment |
Free format text: PAYMENT OF MAINTENANCE FEE, 4TH YEAR, LARGE ENTITY (ORIGINAL EVENT CODE: M1551)Year of fee payment: 4 |
|
FEPP | Fee payment procedure |
Free format text: MAINTENANCE FEE REMINDER MAILED (ORIGINAL EVENT CODE: REM.); ENTITY STATUS OF PATENT OWNER: LARGE ENTITY |
|
LAPS | Lapse for failure to pay maintenance fees |
Free format text: PATENT EXPIRED FOR FAILURE TO PAY MAINTENANCE FEES (ORIGINAL EVENT CODE: EXP.); ENTITY STATUS OF PATENT OWNER: LARGE ENTITY |
|
STCH | Information on status: patent discontinuation |
Free format text: PATENT EXPIRED DUE TO NONPAYMENT OF MAINTENANCE FEES UNDER 37 CFR 1.362 |
|
FP | Lapsed due to failure to pay maintenance fee |
Effective date: 20221125 |