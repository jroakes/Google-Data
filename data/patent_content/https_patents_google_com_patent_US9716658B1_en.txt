US9716658B1 - Weighted load balancing in a multistage network using heirachical ECMP - Google Patents
Weighted load balancing in a multistage network using heirachical ECMP Download PDFInfo
- Publication number
- US9716658B1 US9716658B1 US14/539,796 US201414539796A US9716658B1 US 9716658 B1 US9716658 B1 US 9716658B1 US 201414539796 A US201414539796 A US 201414539796A US 9716658 B1 US9716658 B1 US 9716658B1
- Authority
- US
- United States
- Prior art keywords
- egress ports
- ecmp
- weight
- ecmp table
- ports
- Prior art date
- Legal status (The legal status is an assumption and is not a legal conclusion. Google has not performed a legal analysis and makes no representation as to the accuracy of the status listed.)
- Active, expires
Links
Images
Classifications
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04L—TRANSMISSION OF DIGITAL INFORMATION, e.g. TELEGRAPHIC COMMUNICATION
- H04L47/00—Traffic control in data switching networks
- H04L47/10—Flow control; Congestion control
- H04L47/12—Avoiding congestion; Recovering from congestion
- H04L47/125—Avoiding congestion; Recovering from congestion by balancing the load, e.g. traffic engineering
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04L—TRANSMISSION OF DIGITAL INFORMATION, e.g. TELEGRAPHIC COMMUNICATION
- H04L45/00—Routing or path finding of packets in data switching networks
- H04L45/74—Address processing for routing
- H04L45/745—Address table lookup; Address filtering
- H04L45/7453—Address table lookup; Address filtering using hashing
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04L—TRANSMISSION OF DIGITAL INFORMATION, e.g. TELEGRAPHIC COMMUNICATION
- H04L45/00—Routing or path finding of packets in data switching networks
- H04L45/24—Multipath
Definitions
- This description relates to systems and techniques for weighted load balancing in a multistage network.
- a network may include a multistage network, which may include a wired and/or wireless network.
- a multistage network may be used in the context of telecommunication and data centers to realize large-scale networks.
- a multistage network in a data center may have a large shared infrastructure of shared resources.
- current approaches for weighted may be complicated to implement in large multistage networks, such as, for example, data center networks.
- a method can include generating, by a data switch, a first hash value based on a header of a data packet and performing a lookup in a first equal cost multi-path (ECMP) table using the first hash value.
- the first ECMP table can include a weighted listing of at least two secondary ECMP tables.
- the lookup in the first ECMP table can select a secondary ECMP table of the at least two secondary ECMP tables.
- the method can also include generating, by the data switch, a second hash value based on the header of the data packet and performing a lookup in the selected secondary ECMP table based on the second hash value to select an egress port of a plurality of egress ports of the data switch.
- a first secondary ECMP table of the at least two secondary ECMP tables can include an un-weighted listing of a first set of egress ports of the plurality of egress ports and a second secondary ECMP table of the at least two secondary ECMP tables can include an un-weighted listing of a second set of egress ports of the plurality of egress ports, the second set of egress ports being different than the first set of egress ports.
- the method can also include forwarding the data packet on the selected egress port.
- Example implementations can include one or more of the following features.
- the first set of egress ports can include egress ports of the plurality of egress ports having a highest routing weight of the plurality of egress ports.
- the second set of egress ports can include egress ports of the plurality of egress ports having a second highest routing weight of the plurality of egress ports, where the second set of egress ports also includes the first set of egress ports.
- a third secondary ECMP table of the at least two secondary ECMP tables can include an un-weighted listing of a third set of egress ports of the plurality of egress ports, the third set of egress ports being different than the first set of egress ports and the second set of egress ports.
- the third set of egress ports can include egress ports of the plurality of egress ports having a third highest routing weight of the plurality of egress ports, where the third set of egress ports also includes the first set of egress ports and the second set of egress ports.
- a weight for the first secondary ECMP table in the first ECMP table can be a fixed value.
- a weight for the second secondary ECMP table in the first ECMP table can be based on a ratio of (1) a product of a number of egress ports in the second secondary ECMP table, and a difference between the highest routing weight and the second highest routing weight and (2) a product of a number of ports in the first secondary ECMP table and the weight for the first secondary ECMP table.
- a weight for the third secondary ECMP table in the first ECMP table can be based on a ratio of (1) a product of a number of egress ports in the third secondary ECMP table, and a difference between the second highest routing weight and the third highest routing weight, and (2) a product of the number of ports in the third secondary ECMP table and the third highest routing weight plus the product of the number of ports in the first secondary ECMP table and the weight for the first secondary ECMP table.
- a weight for the first secondary ECMP table in the first ECMP table can be a fixed value.
- a weight for the second secondary ECMP table in the first ECMP table is based on a ratio of (1) a product of a number of egress ports in the second secondary ECMP table, and a difference between the highest routing weight and the second highest routing weight, and (2) a product of a number of ports in the first secondary ECMP table and the weight for the first secondary ECMP table.
- Weights in the first ECMP table can be based on respective routing weights for each egress port of the plurality of egress ports. Weights in the first ECMP table can be determined by equating a probability of a given egress port of the plurality of egress ports being the selected egress port with a ratio of respective routing weights for each egress port of the plurality of egress ports.
- a data switch can include at least one memory that is configured to store instructions and at least one processor that is operably coupled to the at least one memory and that is configured to process the instructions.
- the instructions when processed, can cause the data switch to generate a first hash value based on a header of a data packet and perform a lookup in a first equal cost multi-path (ECMP) table using the first hash value.
- the first ECMP table can include a weighted listing of at least two secondary ECMP tables.
- the lookup in the first ECMP table can select a secondary ECMP table of the at least two secondary ECMP tables.
- the instructions when processed, can also cause the data switch to generate a second hash value based on the header of the data packet and perform a lookup in the selected secondary ECMP table based on the second hash value to select an egress port of a plurality of egress ports of the data switch.
- a first secondary ECMP table of the at least two secondary ECMP tables can include an un-weighted listing of a first set of egress ports of the plurality of egress ports.
- a second secondary ECMP table of the at least two secondary ECMP tables can include an un-weighted listing of a second set of egress ports of the plurality of egress ports. The second set of egress ports can be different than the first set of egress ports.
- the instructions when processed, can also cause the data switch to forward the data packet on the selected egress port.
- Example implementations can include one or more of the following features.
- the first ECMP table and the at least two secondary ECMP tables can implement a WCMP vector using the plurality of egress ports.
- the first set of egress ports can include egress ports of the plurality of egress ports having a highest routing weight of the plurality of egress ports.
- the second set of egress ports can include egress ports of the plurality of egress ports having a second highest routing weight of the plurality of egress ports and also include the first set of egress ports.
- a third secondary ECMP table of the at least two secondary ECMP tables can include an un-weighted listing of a third set of egress ports of the plurality of egress ports.
- the third set of egress ports can be different than the first set of egress ports and the second set of egress ports.
- the third set of egress ports can include egress ports of the plurality of egress ports having a third highest routing weight of the plurality of egress ports and also include the first set of egress ports and the second set of egress ports.
- a weight for the first secondary ECMP table in the first ECMP table can be a fixed value.
- a weight for the second secondary ECMP table in the first ECMP table can be based on a ratio of (1) a product of a number of egress ports in the second secondary ECMP table, and a difference between the highest routing weight and the second highest routing weight and (2) a product of a number of ports in the first secondary ECMP table and the weight for the first secondary ECMP table.
- a weight for the third secondary ECMP table in the first ECMP table can be based on a ratio of (1) a product of a number of egress ports in the third secondary ECMP table, and a difference between the second highest routing weight and the third highest routing weight, and (2) a product of the number of ports in the third secondary ECMP table and the third highest routing weight plus the product of the number of ports in the first secondary ECMP table and the weight for the first secondary ECMP table.
- a weight for the first secondary ECMP table in the first ECMP table can be a fixed value.
- a weight for the second secondary ECMP table in the first ECMP table is based on a ratio of (1) a product of a number of egress ports in the second secondary ECMP table, and a difference between the highest routing weight and the second highest routing weight, and (2) a product of a number of ports in the first secondary ECMP table and the weight for the first secondary ECMP table.
- a method can include receiving, at a data switch, a set of routing weights for a plurality of egress ports of the data switch and converting the set of routing weights to a two-level hierarchy of equal cost multi-path (ECMP) tables.
- the converting can include generating a first-level ECMP table, generating a first second-level ECMP table and generating a second second-level ECMP table.
- the first-level ECMP table can include a weighted listing of the first second-level ECMP table and the second second-level ECMP table.
- the first second-level ECMP table can include an un-weighted listing of a first set of egress ports of the plurality of egress ports.
- the second second-level ECMP table can include an un-weighted listing of a second set of egress ports of the plurality of egress ports.
- the second set of egress ports can be different than the first set of egress ports.
- the method can also include storing the two-level hierarchy of ECMP tables in the data switch.
- Example implementations can include one or more of the following features.
- the first set of egress ports can include egress ports of the plurality of egress ports having a highest routing weight of the plurality of egress ports.
- the second set of egress ports can include egress ports of the plurality of egress ports having a second highest routing weight of the plurality of egress ports.
- the second set of egress ports can also include the first set of egress ports.
- the converting the set of routing weights to the two-level hierarchy of ECMP tables can include generating a third secondary ECMP table including an un-weighted listing of a third set of egress ports of the plurality of egress ports.
- the third set of egress ports can be different than the first set of egress ports and the second set of egress ports.
- the third set of egress ports can include egress ports of the plurality of egress ports having a third highest routing weight of the plurality of egress ports.
- the third set of egress ports can also include the first set of egress ports and the second set of egress ports.
- a weight for the first secondary ECMP table in the first ECMP table can be a fixed value.
- a weight for the second secondary ECMP table in the first ECMP table can be based on a ratio of (1) a product of a number of egress ports in the second secondary ECMP table, and a difference between the highest routing weight and the second highest routing weight and (2) a product of a number of ports in the first secondary ECMP table and the weight for the first secondary ECMP table.
- a weight for the third secondary ECMP table in the first ECMP table can be based on a ratio of (1) a product of a number of egress ports in the third secondary ECMP table, and a difference between the second highest routing weight and the third highest routing weight, and (2) a product of the number of ports in the third secondary ECMP table and the third highest routing weight plus the product of the number of ports in the first secondary ECMP table and the weight for the first secondary ECMP table.
- a weight for the first secondary ECMP table in the first ECMP table can be a fixed value.
- a weight for the second secondary ECMP table in the first ECMP table is based on a ratio of (1) a product of a number of egress ports in the second secondary ECMP table, and a difference between the highest routing weight and the second highest routing weight, and (2) a product of a number of ports in the first secondary ECMP table and the weight for the first secondary ECMP table.
- a data switch can include at least one memory that is configured to store instructions and at least one processor that is operably coupled to the at least one memory and that is configured to process the instructions.
- the instructions when processed, can cause the data switch to receive a set of routing weights for a plurality of egress ports of the data switch and convert the set of routing weights to a two-level hierarchy of equal cost multi-path (ECMP) tables.
- the converting can include generating a first-level ECMP table, generating a first second-level ECMP table and generating a second second-level ECMP table.
- the first-level ECMP table can include a weighted listing of the first second-level ECMP table and the second second-level ECMP table.
- the first second-level ECMP table can include an un-weighted listing of a first set of egress ports of the plurality of egress ports.
- the second second-level ECMP table can include an un-weighted listing of a second set of egress ports of the plurality of egress ports.
- the second set of egress ports can be different than the first set of egress ports.
- the instructions, when processed, can also cause the data switch to store the two-level hierarchy of ECMP tables in the data switch.
- Example implementations can include one or more of the following features.
- the first set of egress ports can include egress ports of the plurality of egress ports having a highest routing weight of the plurality of egress ports.
- the second set of egress ports can include egress ports of the plurality of egress ports having a second highest routing weight of the plurality of egress ports.
- the second set of egress ports can also include the first set of egress ports.
- the instructions for converting the set of routing weights to the two-level hierarchy of ECMP tables can include instructions that, when processed by the at least one processor, cause the data switch to generate a third secondary ECMP table including an un-weighted listing of a third set of egress ports of the plurality of egress ports.
- the third set of egress ports can be different than the first set of egress ports and the second set of egress ports.
- the third set of egress ports can include egress ports of the plurality of egress ports having a third highest routing weight of the plurality of egress ports.
- the third set of egress ports can also include the first set of egress ports and the second set of egress ports.
- a weight for the first secondary ECMP table in the first ECMP table can be a fixed value.
- a weight for the second secondary ECMP table in the first ECMP table can be based on a ratio of (1) a product of a number of egress ports in the second secondary ECMP table, and a difference between the highest routing weight and the second highest routing weight and (2) a product of a number of ports in the first secondary ECMP table and the weight for the first secondary ECMP table.
- a weight for the third secondary ECMP table in the first ECMP table can be based on a ratio of (1) a product of a number of egress ports in the third secondary ECMP table, and a difference between the second highest routing weight and the third highest routing weight, and (2) a product of the number of ports in the third secondary ECMP table and the third highest routing weight plus the product of the number of ports in the first secondary ECMP table and the weight for the first secondary ECMP table.
- a weight for the first secondary ECMP table in the first ECMP table can be a fixed value.
- a weight for the second secondary ECMP table in the first ECMP table is based on a ratio of (1) a product of a number of egress ports in the second secondary ECMP table, and a difference between the highest routing weight and the second highest routing weight, and (2) a product of a number of ports in the first secondary ECMP table and the weight for the first secondary ECMP table.
- FIG. 1 is a block diagram illustrating a multi-level, multi-path network, in accordance with an implementation.
- FIG. 2 is a flowchart illustrating a method for routing data traffic in a multi-level, multipath network, according to an example implementation.
- FIG. 3 is a block diagram illustrating elements of a data switch, according to an implementation.
- FIG. 4 is a flow chart illustrating a method for implementing weighted cost multi-path (WCMP) routing in a data switch, according to an implementation.
- WCMP weighted cost multi-path
- FIG. 6 is a flow chart illustrating a method for WCMP data traffic routing, according to an implementation.
- FIG. 7 is a graph illustrating a set of WCMP routing weights for a group of egress ports, according to an implementation.
- FIGS. 8A-8C are diagrams illustrating ECMP tables that may be used to implement WCMP for the routing weights of FIG. 7 using a two-level ECMP hierarchy, according to an implementation.
- FIG. 9 is a graph illustrating another set of WCMP routing weights for a group of egress ports, according to an implementation.
- FIGS. 10A-10C are diagrams illustrating ECMP tables that may be used to implement WCMP for the routing weights of FIG. 9 using a two-level ECMP hierarchy, according to an implementation.
- FIGS. 11A-11C are diagrams illustrating ECMP tables that may be used to implement WCMP using a two-level ECMP hierarchy with layered weighting in a first-level ECMP and un-weighted port lists in secondary ECMP tables, according to an implementation.
- FIGS. 12A-12D are diagrams illustrating ECMP tables that may be used to implement WCMP using another two-level ECMP hierarchy with layered weighting in a first-level ECMP and un-weighted port lists in secondary ECMP tables, according to an implementation.
- a source device may transmit packets to a destination device using a multi-level network, where multiple data paths (links) may be available (used) to transmit data between the source device and the destination device.
- Data switches (or other data routing devices) in the multi-level network may use a weighted cost multi-path (WCMP) routing table (e.g., included in a WCMP routing module) to balance data traffic (between the source device and the destination device) over the multiple paths between the source device and the destination device.
- WCMP weighted cost multi-path
- FIG. 1 is a block diagram illustrating a multi-level, multi-path network 100 , in accordance with an implementation.
- the network 100 includes a first data switch 110 , a second data switch 120 , a third data switch 130 and a fourth data switch 140 .
- the network 100 also includes data communication links 112 , 114 , 116 , 122 , 132 , 134 , which are used to communicate data (e.g., packet data) between the data switches 110 , 120 , 130 , 140 .
- data e.g., packet data
- the data switches 110 , 120 , 130 , 140 may include a number of different devices, such as a network data switch, a router, or other device capable of communicating (steering, routing, switching) data (such as packet data) from a source device to a destination device.
- the network 100 illustrated in FIG. 1 (which may be referred to as a multistage network) is shown for purposes of illustration.
- such multistage networks may include a large number of data communication devices (data switching devices).
- data switching devices data switching devices
- multistage networks may be used to implement large-scale commercial networks, such as commercial data center networks (DCNs). Scalability of such networks may be achieved by using relatively inexpensive and power-efficient commodity data switch devices as the building block at each network stage, instead of using fewer relatively expensive, high-end, large and complex switches.
- DCNs commercial data center networks
- data traffic may be routed using equal cost multi-path (ECMP) routing for load-balancing data traffic across the different switches at each stage.
- ECMP equal cost multi-path
- ECMP approaches may provide substantially equally balanced traffic distribution in multistage networks that are of uniform topology (e.g., there is a same number of data links from a given data switch to each neighboring switch along parallel data paths).
- ECMP approaches would not (e.g., presuming the use of statistically sufficient random selection) provide such evenly balanced traffic distribution in multistage networks that have uneven inter-stage connectivity topologies.
- the ports (ingress ports and egress ports, which may also be referred to as communication links, or links) that connect a sending switch with its neighboring switches on parallel paths are not evenly distributed.
- the network 100 includes such an uneven inter-stage topology (connectivity).
- the data switch 110 may communicate data traffic to the data switch 140 via the data switch 120 , or via the data switch 130 .
- there are two links 112 , 114 connecting the data switch 110 and the data switch 120 while there is only one link 116 connecting the data switch 110 and the data switch 130 .
- Such uneven inter-stage connectivity in such a multistage network may occur, for instance, by design. This design choice may occur because of the number of data switches present at each stage (e.g., due to the configuration of the particular network), or may occur because the multistage network was intentionally configured to leverage certain traffic locality patterns with uneven inter-stage connectivity. In other instances, uneven inter-stage connectivity in a multi-stage network may occur as a result of link failures between data switches in the network.
- Weighted cost multi-path (WCMP) data routing may be used to overcome, at least some of, the shortcomings of ECMP to evenly balance data traffic in such multi-stage networks with uneven inter-stage topologies. Because ECMP, which inherently assumes that all paths to a certain destination have a same capacity, balancing data traffic across unevenly distributed links with equal probability results in unequal traffic loading.
- WCMP Weighted cost multi-path
- ECMP For example and purposes of illustration, with reference to FIG. 1 , consider using ECMP for routing data traffic from the data switch 110 to the data switch 140 (where that traffic can go through either the data switch 120 or the data switch 130 ). Because ECMP routes data traffic using an equal-probability hashing function (e.g., and a corresponding modulo function), that is equally like to select each of the egress ports (links) 112 , 114 , 116 of the data switch 110 (which, in this example, are presumed to have equal capacity) for an arbitrary data flow, using ECMP would (over a population of data flows) result in twice as much data traffic being sent to data switch 120 (e.g., over the links 112 , 114 ) as compared to the amount of data traffic sent to the data switch 130 , despite the fact that the overall capacities of the two parallel paths from the switch 110 to the switch 140 (i.e., respectively through the switch 120 and the switch 130 ) are substantially the same (e.g., each of
- WCMP functionality is accomplished by overloading (replicating entries in) an ECMP table to achieve WCMP traffic routing.
- WCMP traffic routing may accomplished for data traffic from the data switch 110 to the data switch 140 by using an ECMP table with four entries, where each of the links 112 , 114 is listed once and the link 116 has a replicated listing (is listed twice), for a total of four entries.
- Such an approach represents a routing weight of “2” for the link 116 (by virtue of being listed twice) and a routing weight of “1” for each of the links 112 , 114 (by virtue of them each being listed once).
- WCMP may easily implemented by replicating the egress port listing for the link 116 in an ECMP table
- Scalability of WCMP in such networks has multiple considerations. For example, one consideration is the ability to support an arbitrary mix of weights with sufficient resolution in the switches of such networks.
- using ECMP tables with replicated entries to implement WCMP would typically require a prohibitive degree of replication (i.e., the required table sizes would likely far exceed the capacity of memory structures currently used to implement ECMP tables).
- the method 200 includes, at block 210 , receiving a set of routing weights for a group of egress ports of a data switch.
- the routing weights received at block 210 may correspond with a group of egress ports that can be used to send data traffic to a particular destination.
- the routing weights of block 210 may be used to implement WCMP data traffic routing for data traffic sent from the data switch to that particular destination.
- the routing weights may be provided to the data switch using a number of approaches.
- the routing weights may be provided to the data switch from a network configuration system.
- the data switch, at block 210 may receive the routing weights via a management port, via a configuration packet, or by a number of other approaches.
- the method 200 includes processing (which may also be referred to as pre-processing) the routing weights received at block 210 , such as using hardware or software (or firmware) for use in a WCMP table (or WCMP tables).
- the processed (pre-processed) weights of block 220 may be used (further processed) to create one or more WCMP data routing tables, where the WCMP table(s) created at block 230 may be used to route data traffic from the data switch of block 210 to the particular destination with which the received routing weights are associated.
- the one more WCMP tables of block 230 may be stored in the data switch using hardware, software, or a combination thereof.
- a data packet may be received at the data switch of block 210 .
- the data switch may determine a destination address of the data packet. The destination address may then be looked up in a forwarding table to determine a corresponding routing table (or tables) to use to determine an egress port to use to send the received data packet along to its destination. If the destination address of the data packet received at block 240 corresponds with the destination address associated with the routing weights received at block 210 , the forwarding table lookup may return a pointer to the WCMP table (or tables) generated at block 230 .
- the method 200 includes, at block 250 , generating at least one hash value from a header of the received data packet.
- the hash value may be generated using one or more fields of the data packet header that, for a given data flow, have fixed values. For instance a flow identification field, a source address field, a destination address field, a protocol identification field and/or a number of other possible fields with fixed values for a given data flow.
- the specific header field (or fields) that are used for generating the one or more hash values may depend on the particular network implementation.
- the method 200 includes determining, by using the one or more hash values as lookup value(s) for the WCMP tables of block 230 .
- the lookup at block 260 returns (determines) an egress port of the data switch to use to forward the data packet onto its destination.
- the method 200 includes transmitting the data packet using the determined egress port.
- a number of different hash functions may be used. For instance, a CRC16 hash function, a CRC32 hash function, an AES hash function, an SHA hash function and/or a number of other hash functions may be used.
- the hash function(s) used should be selected such that the hash values generated are sufficiently random for data routing purposes in a multi-level network, such as those described herein.
- a modulus (remainder) of the hash value generated by the selected hash functions may be taken before performing a lookup in the WCMP table(s).
- the result of the modulus function may be used directly, or indirectly, depending on the implementation, as an index (or lookup value) for the WCMP table(s) of block 230 .
- a modulus function that is applied may be based on the number of entries present in a WCMP table(s) on which the lookup will be performed.
- the lookup value may be a function of the result of the modulus operation (e.g., an encoded version of the result of the modulus function).
- the specific structure and arrangement of the WCMP table(s) (and the associated lookup values) used in the method 200 will depend on the specific implementation.
- the data switch 300 may receive a set of routing weights for a particular destination, e.g., via the ingress port 310 or a management port (not shown) and use those weights to implement one or more WCMP routing tables that may be included in the WCMP routing module 340 .
- the data switch 300 may also use the ECMP routing module 330 to implement ECMP data traffic routing for one or more destinations in a data network in which the data switch 300 is included, where each parallel path (the multi-paths) between the data switch 300 and a given destination have uniform inter-level topologies.
- the data switch 300 when a data packet is received at the ingress port 310 , the data switch 300 may determine a destination address for that data packet from its header. If the destination address of the received data packet corresponds with a destination address that is associated with a WCMP table (or tables) in the WCMP module 340 (e.g., corresponds with the received routing weights), the forwarding table 320 (when the destination address is used to perform a lookup in the forwarding table 320 ) may return a pointer to the corresponding WCMP routing tables in the WCMP routing module 340 .
- a WCMP table or tables in the WCMP module 340
- An egress port of the egress ports 350 to use to communicate the data packet to its destination may then be determined from the corresponding WCMP table(s), such as by using the approaches described herein. After the particular egress port to use is determined, the data packet may be sent on to its destination using the determined egress port.
- FIG. 4 is a flow chart illustrating a method 400 for implementing weighted cost multi-path (WCMP) routing in a data switch, according to an implementation.
- the method 400 may be used to implement approximated WCMP data traffic routing that reduces the number of routing table entries as compared to current WCMP approaches (e.g., overloading/replicating routing weights in a single ECMP table), as updates can require rewriting far fewer table entries than current approaches.
- WCMP weighted cost multi-path
- the method 400 may be implemented in accordance with the example routing weights and tables of FIGS. 7-12 , which will be described in further detail below. In other instances, the method 400 may be used to implement other set of routing weights for differently sized groupings of egress ports. In certain implementations (e.g., where there are sufficient available entries in the ECMP table or tables), the techniques described herein may be used to implement equivalent WCMP data traffic routing (e.g., equivalent to an overloaded ECMP table fully representing a given set of WCMP routing weights), without approximation.
- equivalent WCMP data traffic routing e.g., equivalent to an overloaded ECMP table fully representing a given set of WCMP routing weights
- the method 400 includes, at block 410 , receiving (e.g., at a data switch) a set of routing weights (WCMP weights) for a plurality of egress ports.
- the routing weights may be a set of routing weights for traffic being sent to a particular destination device.
- the routing weights may be for routing data traffic (using WCMP) to multiple destinations, or to a particular group of destinations.
- Each routing weight of the set of routing weights may be associated, respectively, with a specific egress port of the data switch.
- first-level ECMP table and the second-level ECMP tables will depend, at least in part, on the particular implementation and the specific WCMP routing weights that are being implemented. Examples of such tables are illustrated in, at least, FIGS. 5, 8A-8C, 10A-10C, 12A-12D and are discussed further below.
- the method 400 includes storing the two-level hierarchy of ECMP tables (for WCMP traffic routing) in the data switch.
- the two-level hierarchy of ECMP tables can be stored in a memory structure of the data switch.
- the two-level hierarchy of ECMP tables may be stored in a memory structure for implementing ECMP.
- the two-level hierarchy of ECMP tables can be implemented in a dedicated structure configured to implement WCMP data traffic routing using hierarchical ECMP tables, such as using the approaches described herein.
- the method 400 includes routing data packets (e.g., with approximated WCMP or equivalent WCMP) using the two-level hierarchy of ECMP tables created at block 420 and stored in the data switch at block 430 . Routing data packets using such a two-level ECMP table hierarchy is described in further detail below with respect to, at least, FIG. 6 , which may include using first-level and second-level ECMP tables such as those described herein.
- FIG. 5 is a diagram that schematically illustrates a two-level equal cost multi-path (ECMP) table hierarchy 500 for implementing WCMP routing weights, according to an implementation.
- the hierarchy 500 includes a port set weights (first-level ECMP) table 510 .
- the port set weights table 510 may include a weighted listing of a plurality of second-level ECMP (port set) tables.
- the weights in the port set weights table may be determined based, at least, on a ratio (or ratios) of two or more of the desired routing weights for a group of egress ports for which the hierarchy 500 is used to implement WCMP data routing.
- the port set weights table 510 can be used (e.g., with a first hash value of a data packet) to select one of a plurality of port set (second-level ECMP) tables, which, in this example, include a port_set_ 1 table 520 , a port_set_ 2 table 530 and a port set_ 3 table 540 .
- the selected second-level ECMP (port set) table can be then be used to select (e.g., using a second hash value of the data packet) a specific egress port on which to transmit a data packet, where this hierarchical egress port selection implements (approximated or equivalent) WCMP data traffic routing.
- each of the listings of egress ports in the second-level ECMP (port set) tables can be a weighted or and un-weighted listing.
- weights in the port set weight table 510 weights in the port set tables 520 , 530 , 540 can be also be determined based, at least, on a ratio (or ratios) of two or more of the desired routing weights for a group of egress ports for which the hierarchy 500 is used to implement WCMP data routing.
- each of the listings of ports in second-level ECMP tables can include at least one entry for each of the egress ports associated with the hierarchy 500 (e.g., include all egress ports of a given WCMP group) or, depending on the particular implementation, can include entries for a respective subset of the egress ports associated with the hierarchy 500 (e.g., a subset of egress ports of the given WCMP group).
- the port set weights table (first-level ECMP table) 510 is used to select a port set table (second-level ECMP table) 520 , 530 , 540 , and the selected port set table 520 , 530 , 540 is used to select an egress port for transmitting a data packet.
- the hierarchy 500 can include fewer port set (second-level ECMP) tables or can include additional port set tables than shown in FIG. 5 .
- FIG. 6 is a flow chart illustrating a method 600 for WCMP data traffic routing, according to an implementation.
- the method 600 can be implemented in conjunction with the approaches described herein.
- the method 600 can be implemented with a two-level hierarchy of ECMP tables, such as the hierarchy 500 of FIG. 5 , so as to affect WCMP data traffic routing (e.g., approximated or equivalent).
- the method 600 includes receiving a data packet for transmission towards a destination.
- the method 600 includes generating a first hash value and obtaining a first integer value from the first hash value.
- a hash function can be used to obtain the first hash value from a header of the data packet and a modulus operation, e.g., based on a number of entries in the port set weights table, can be performed to obtain a first integer value. For instance, if the port set weights table has seven entries (weighted or un-weighted), a modulus operator of “7” can be used to obtain the integer for value.
- the method 600 includes generating a second hash value and obtaining a second integer value from the second hash value.
- the first hash value and the second hash value may be a same hash value (and only a single hash function may be used).
- a second hash function (that is different from the hash function of block 620 ) can be used to obtain the second hash value from the header of the data packet (e.g., using the same fields as at block 620 ).
- a second modulus operation e.g., based on a number of entries in the selected port set table
- the method 600 includes performing a lookup (using the second integer value) in the selected second-level ECMP table (e.g., port set table) to select an egress port on which to transmit the data packet toward its destination.
- the data packet can be forwarded towards it destination using the egress port selected at block 650 .
- FIG. 7 is a graph 700 illustrating a set of WCMP routing weights for a group of egress ports, according to an implementation.
- FIGS. 8A-8C are diagrams illustrating ECMP tables 810 , 820 , 830 that may be used to implement WCMP data traffic routing for the routing weights of FIG. 7 using a two-level ECMP hierarchy, according to an implementation.
- the graph 700 will be referred to as WCMP group 700 .
- the WCMP group 700 includes eight egress ports, P 0 -P 7 .
- the ports P 0 -P 5 have routing weights of “8”, while the ports P 6 and P 7 have routing weights of “7.”
- the ports and routing weights in the WCMP group 700 are represented by the rectangles in FIG. 7 . Accordingly, the columns for P 0 -P 5 have eight rectangles, to represent their routing weight of “8”, while the columns for P 6 and P 7 have seven rectangles, to represent their routing weights of “7.”
- each of the rectangles of the WCMP groups described below will be referred to as members. Further, representation of the members (rectangles) of a given WCMP group in ECMP tables of a corresponding two-level hierarchy (such as the hierarchy 500 ) will be referred to as entries (which may be weighted, or un-weighted).
- the WCMP group 700 of FIG. 7 were to be implemented using a single overloaded ECMP table (by replicating entries for each egress port based on its routing weight), that overloaded ECMP table would include 62 entries (8 entries for each member corresponding with P 0 -P 5 , and 7 entries for each member corresponding with P 6 and P 7 ). In some data switching devices or network configurations, sufficient ECMP table entries may not be available to implement a 62 entry table in a given data switch.
- the ratio of the routing weights in this example, cannot be reduced to integer values smaller than “7” and “8” (in order to maintain the same ratio with a reduced number of entries), significant inaccuracies in WCMP data traffic routing may result by implementing the WCMP group in an overloaded ECMP table with less than 62 entries, as incorrect ratios would be used.
- the number of entries (ECMP table entries) used to implement the routing weights in the WCMP group 700 can be significantly reduced to implement a near equal approximation of the true the WCMP weights of the WCMP 700 (e.g., without introducing significant traffic waiting inaccuracies resulting from the fact that the raw ratio of the weights cannot be reduced to a ratio of smaller integer values).
- the WCMP group 700 may be divided into multiple port sets, as indicated by the dashed line in FIG. 7 .
- Set_ 0 in the WCMP group 700 includes the members above the dashed line, while Set_ 1 includes the members below the dashed line. Therefore, for the WCMP group 700 , Set_ 0 includes six members (one for each of ports P 0 -P 5 ), while Set_ 1 includes 56 members (seven for each of ports P 0 -P 7 ).
- the WCMP group 700 can be implemented as a two-level hierarchy with equal traffic weighting ratios as opposed to using a single, overloaded ECMP table.
- the ratio of (3, 28) is a reduced integer representation of the ratio of the number of members (rectangles) of Set_ 0 with the number of members (rectangles) of Set_ 1 .
- the weights represented by the reduced ratio (3:28) of the number of members of Set_ 0 and Set_ 1 may be used in first-level ECMP table in a two-level hierarchy (such as the hierarchy 500 ) as port set weights, where Set_ 0 would have a weight of “3” and Set_ 1 would have a weight of “28.”
- there are 6 ports included in Set_ 0 which may be represented by an un-weighted port set table (second level ECMP table) of 6 entries.
- Set_ 1 includes 8 ports, which may be represented by un-weighted port set table (second level ECMP table) of 8 entries.
- a two-level hierarchy of ECMP table used to implement substantially equal ECMP weighting would include 45 total entries That is, in this implementation, with reference to FIG. 5 , the port set weight table 510 would include 31 entries, 3 entries for Set_0 and 28 entries for Set_ 1 . Further, the Set_ 0 table (Port_Set_ 1 table 520 ) would include 6 entries, one for each of P 0 -P 5 and the Set_ 1 table (Port_Set_ 2 table 530 ) would include 8 entries, one for each of P 0 -P 7 .
- the first-level ECMP table of the two-level hierarchy would include 31 entries and the second-level ECMP tables would include 14 total entries (6 in the Set_ 0 table and 8 in the Set_ 0 table).
- the Port_Set_ 3 table 540 of the two-level hierarchy 500 would be eliminated and only two, second-level ECMP tables would be included in the two-level hierarchy 500 .
- WCMP routing for the routing WCMP group 700 can be implemented with even fewer entries than the 45 total entries discussed above.
- DCNs e.g., where it may be desirable for a given data switch to include WCMP routing functionality, with corresponding routing tables, for a large number of possible destinations
- such reductions in routing table sizes may allow for significant cost savings, as less complex (and less expensive) data switching hardware may be used.
- FIGS. 8A-8C are diagrams that illustrate example ECMP tables 810 - 830 , which can be used to implement the two-level hierarchy for the WCMP group 700 with a 22 total entries discussed above.
- the table 810 may be used as a first-level ECMP table in such a two-level hierarchy.
- the table 810 has 8 entries, with integer indices 0-7.
- the integer indices may be used to match an integer value determined from a header of a data packet, such as by using a hash function and modulus operation as discussed above in order to select one of the two second-level ECMP (port set) tables 820 , 830 .
- FIG. 8A illustrate example ECMP tables 810 - 830 , which can be used to implement the two-level hierarchy for the WCMP group 700 with a 22 total entries discussed above.
- the table 810 may be used as a first-level ECMP table in such a two-level hierarchy.
- the table 810 has 8 entries, with
- the set weights are represented by replication in the table 810 , with Set_ 0 being listed once (weight of “1”), and Set_ 1 being listed seven times (weight of “7”).
- the ordering of the entries in the tables of such a two-level hierarchy can be randomized, as compared with the table 810 . For instance, in the table 810 , Set_ 1 could be associated with indices 0-3 and 5-7, while Set_ 1 could be associated with index 4.
- FIG. 8B is a diagram that illustrates an un-weighted ECMP table 820 for Set_ 0 , with indices of 0-5 and egress ports P 0 -P 5 being listed.
- FIG. 8C is a diagram that illustrates an un-weighted ECMP table 830 for Set_ 1 , with indices of 0-7 and egress ports P 0 -P 7 being listed.
- the ordering of the ports in the listings of the tables 820 and 830 could be randomized, rather than listing the egress ports in the same numerical order as the indices.
- the amount of routing weight inaccuracy that is introduced by such WCMP approximations when implementing the WCMP group 700 using the tables 810 - 830 can be monotonically reduced by altering the number of rows in each of Set_ 0 and Set_ 1 of the WCMP group 700 . Because the inaccuracy is distributed evenly among each member of Set_ 0 (as shown in FIG. 7 ), including more members (rows) in Set_ 0 will result in the per port error being reduced.
- FIG. 9 illustrates a WCMP group 900 , which has the same member distribution as the WCMP group 700 , with the difference being that Set_ 0 includes the top two rows of members, rather than just a single member row.
- the ratio of member rows between Set_ 0 and Set_ 1 is ⁇ 2:6 ⁇ , which can be represented by 8 entries in weighted first-level ECMP table (port set weights table 510 ), such as is shown in the table 1010 in FIG. 10A .
- the ratio between the sets could be reduced to ⁇ 1:3 ⁇ , which could be represented in a 4 entry first-level ECMP table in a two-level hierarchy (not shown), with one entry for Set_ 0 and three entries for Set_ 1 .
- FIGS. 10A-10C are diagrams that illustrate example ECMP tables 1010 - 1030 , which can be used to implement the two-level hierarchy for the WCMP group 900 with a 30 total entries discussed above (26 entries if the port set weights ratio is reduced to ⁇ 1:3 ⁇ .
- the table 1010 may be used as a first-level ECMP table in such a two-level hierarchy.
- the table 1010 has 8 entries, with integer indices 0-7.
- the integer index may be used to match an integer value determined from a header of a data packet, such as by using a hash function and modulus operation as discussed above in order to select one of the two second-level ECMP (port set) tables 1020 , 1030 .
- FIG. 10B is a diagram that illustrates a weighted ECMP table 1020 for Set_ 0 of the ECMP group 900 , with indices of 0-13 and egress ports P 0 -P 7 being replicated according to their weights in Set_ 1 (P 0 -P 5 each having a weight of “2” and P 6 -P 7 each having a weight of “1”).
- the ordering of the ports in the table 1010 may be randomized.
- FIG. 10C is a diagram that illustrates an un-weighted ECMP table 1030 for Set_ 1 of the WCMP group 900 , with indices of 0-7 and egress ports P 0 -P 7 being listed.
- the ordering of the ports in the listings of the table 1030 could be randomized, rather than listing the ports in the same numerical order as the indices.
- the techniques discussed above may be used to further reduce per port routing error by, for example, adding more rows to Set_ 0 in the ECMP group 900 (e.g., top three rows). Further, the approaches described herein may be used to implement a two-level ECMP table hierarchy that includes additional second-level ECMP tables, such as in the hierarchy 500 shown in FIG. 5 .
- an ECMP group includes egress ports with three weights, and the ratios of those weights cannot be reduced to smaller integer values
- a two level-hierarchy (such as described herein) with three port sets (and three second-level ECMP tables) may be used to implement WCMP for that WCMP group with, depending on the number of available WCMP entries, equal data traffic weighting, or a near equal WCMP approximation.
- such a two-level hierarchy of ECMP tables (for three or more port sets) may use a reduced number of total table entries as compared to a single overloaded ECMP table.
- the approaches illustrated therein can be used to implement WCMP data traffic routing using a two-level hierarchy, where weights in the port set weights table 510 are weighted using a layered (or tiered) approach, and the port set tables 520 - 540 are un-weighted port sets that correspond with the layers (or tiers) used to define the weights of the port set weights table 510 .
- the number of port set tables 520 - 540 may vary depending on the particular implementation.
- FIGS. 11A-11C illustrate ECMP tables that may be used to implement such a layered or tiered WCMP approach for a set of three data egress ports ⁇ P 0 , P 1 , P 2 ⁇ of a data switch, where data is to be routed over those egress ports using respective routing weights of ⁇ 9, 9, 8 ⁇ .
- ports P 0 and P 1 each have routing weights (data traffic routing weights) of 9, while P 2 has a routing weight of 8.
- such a layered or tiered approached may be used to implement WCMP for other numbers of egress ports with different weights.
- the weights for the port set weights table 510 can be determined based on the desired forwarding probabilities for the ports P 0 , P 1 and P 2 with routing weights of ⁇ 9, 9, 8 ⁇ . For instance, in this example, where there only two unique routing weights and more than two egress ports to which those weights are assigned, such a determination can be made using the following approach.
- the lower routing weight can be represented as w
- the higher routing weight can be represented as w′
- the number of egress ports to which the higher routing weight is assigned can be represented as m
- the total number of egress ports of the WCMP group can be represented as n.
- the port set weights (e.g., in the table 510 ) for the above example are shown in table 1110 of FIG. 11A , where Set_ 0 has a single entry and Set_ 1 has 12 entries.
- Table 1120 in FIG. 11B illustrates Set_ 0 of v(0) above and includes single entries for each of ports P 0 and P 1 .
- Table 1130 in FIG. 11C illustrates Set_ 1 of v(1) above and includes single entries for each of ports P 0 , P 1 and P 2 .
- FIGS. 12A-12D illustrate ECMP tables that may be used to implement such a layered or tiered WCMP approach for a set of three data egress ports ⁇ P 0 , P 1 , P 2 ⁇ of a data switch, where data is to be routed over those egress ports using respective routing weights of ⁇ 12, 8, 2 ⁇ .
- port P 0 has a routing weight of 12
- P 1 has a routing weight of 8
- P 2 has a routing weight of 2.
- such a layered or tiered approached may be used to implement WCMP for other numbers of egress ports with different weights.
- d_1 is the thickness of the second layer, which is determined as the difference between the second highest routing weight (8) and the lowest routing weight (2).
- v(1) has a layered weight of 6 for P 0 and P 1 (e.g., Set_ 1 ).
- d_2 is the thickness of the third layer, which is equal to the lowest routing weight of 2
- v(2) has a layered weight of 2 for P 0 , P 1 and P 2 (e.g., Set_ 2 ).
- Traversing the three layers demonstrates that the desired routing weights of ⁇ 12, 8, 2 ⁇ are represented by the foregoing WCMP vector.
- Equation 5 “i” is an index for the current layer and the port set weights for each layer are represented by the product of the thickness of the respective layer and the number of ports present in the port set of that layer.
- the port set weights (e.g., in the table 510 ) for the above example are shown in table 1210 of FIG. 12A , where Set_ 0 has two entries, Set_ 1 has 6 entries and Set_ 2 has three entries.
- Table 1220 in FIG. 12B illustrates Set_ 0 of v(0) above and includes a single entry for port P 0 .
- Table 1230 in FIG. 12C illustrates Set_ 1 of v(1) above and includes single entries for each of ports P 0 and P 1 .
- Table 1240 in FIG. 12D illustrates Set_ 2 of v(2) above and includes single entries for each of ports P 0 , P 1 and P 2 .
- Implementations of the various techniques described herein may be implemented in digital electronic circuitry, or in computer hardware, firmware, software, or in combinations of them. Implementations may be implemented as a computer program product, i.e., a computer program tangibly embodied in an information carrier, e.g., in a machine-readable storage device, for execution by, or to control the operation of, data processing apparatus, e.g., a programmable processor, a computer, or multiple computers.
- a computer program such as the computer program(s) described above, can be written in any form of programming language, including compiled or interpreted languages, and can be deployed in any form, including as a stand-alone program or as a module, component, subroutine, or other unit suitable for use in a computing environment.
- a computer program can be deployed to be executed on one computer (or device) or on multiple computers (or devices) at one site or distributed across multiple sites and interconnected by a communication network.
- Method steps may be performed by one or more programmable processors executing a computer program to perform functions by operating on input data and generating output. Method steps also may be performed by, and an apparatus may be implemented as, special purpose logic circuitry, e.g., an FPGA (field programmable gate array) or an ASIC (application-specific integrated circuit).
- FPGA field programmable gate array
- ASIC application-specific integrated circuit
- processors suitable for the execution of a computer program include, by way of example, both general and special purpose microprocessors, and any one or more processors of any kind of digital computer or device.
- a processor will receive instructions and data from a read-only memory or a random access memory or both.
- Elements of a computer or device may include at least one processor for executing instructions and one or more memory devices for storing instructions and data.
- a computer or device also may include, or be operatively coupled to receive data from or transfer data to, or both, one or more mass storage devices for storing data, e.g., magnetic, magneto-optical disks, or optical disks.
- Information carriers suitable for embodying computer program instructions and data include all forms of non-volatile memory, including by way of example semiconductor memory devices, e.g., EPROM, EEPROM, and flash memory devices; magnetic disks, e.g., internal hard disks or removable disks; magneto-optical disks; and CD-ROM and DVD-ROM disks.
- semiconductor memory devices e.g., EPROM, EEPROM, and flash memory devices
- magnetic disks e.g., internal hard disks or removable disks
- magneto-optical disks e.g., CD-ROM and DVD-ROM disks.
- the processor and the memory may be supplemented by, or incorporated in special purpose logic circuitry.
- implementations may be implemented on a computer having a display device, e.g., a cathode ray tube (CRT) or liquid crystal display (LCD) monitor, for displaying information to the user and a keyboard and a pointing device, e.g., a mouse or a trackball, by which the user can provide input to the computer.
- a display device e.g., a cathode ray tube (CRT) or liquid crystal display (LCD) monitor
- keyboard and a pointing device e.g., a mouse or a trackball
- Other kinds of devices can be used to provide for interaction with a user as well; for example, feedback provided to the user can be any form of sensory feedback, e.g., visual feedback, auditory feedback, or tactile feedback; and input from the user can be received in any form, including acoustic, speech, or tactile input.
- Implementations may be implemented in a computing system that includes a back-end component, e.g., as a data server, or that includes a middleware component, e.g., an application server, or that includes a front-end component, e.g., a client computer having a graphical user interface or a Web browser through which a user can interact with an implementation, or any combination of such back-end, middleware, or front-end components.
- Components may be interconnected by any form or medium of digital data communication, e.g., a communication network. Examples of communication networks include a local area network (LAN) and a wide area network (WAN), e.g., the Internet.
- LAN local area network
- WAN wide area network
- a method can include generating, by a data switch, a first hash value based on a header of a data packet and performing a lookup in a first equal cost multi-path (ECMP) table using the first hash value.
- the first ECMP table can include a weighted listing of at least two secondary ECMP tables.
- the lookup in the first ECMP table can select a secondary ECMP table of the at least two secondary ECMP tables.
- the method can also include generating, by the data switch, a second hash value based on the header of the data packet and performing a lookup in the selected secondary ECMP table based on the second hash value to select an egress port of a plurality of egress ports of the data switch.
- Example implementations can include one or more of the following features.
- the first set of egress ports can include egress ports of the plurality of egress ports having a highest routing weight of the plurality of egress ports.
- the second set of egress ports can include egress ports of the plurality of egress ports having a second highest routing weight of the plurality of egress ports, where the second set of egress ports also includes the first set of egress ports.
- a third secondary ECMP table of the at least two secondary ECMP tables can include an un-weighted listing of a third set of egress ports of the plurality of egress ports, the third set of egress ports being different than the first set of egress ports and the second set of egress ports.
- the third set of egress ports can include egress ports of the plurality of egress ports having a third highest routing weight of the plurality of egress ports, where the third set of egress ports also includes the first set of egress ports and the second set of egress ports.
- a weight for the first secondary ECMP table in the first ECMP table can be a fixed value.
- a weight for the second secondary ECMP table in the first ECMP table can be based on a ratio of (1) a product of a number of egress ports in the second secondary ECMP table, and a difference between the highest routing weight and the second highest routing weight and (2) a product of a number of ports in the first secondary ECMP table and the weight for the first secondary ECMP table.
- a weight for the first secondary ECMP table in the first ECMP table can be a fixed value.
- a weight for the second secondary ECMP table in the first ECMP table is based on a ratio of (1) a product of a number of egress ports in the second secondary ECMP table, and a difference between the highest routing weight and the second highest routing weight, and (2) a product of a number of ports in the first secondary ECMP table and the weight for the first secondary ECMP table.
- the instructions when processed, can also cause the data switch to generate a second hash value based on the header of the data packet and perform a lookup in the selected secondary ECMP table based on the second hash value to select an egress port of a plurality of egress ports of the data switch.
- a first secondary ECMP table of the at least two secondary ECMP tables can include an un-weighted listing of a first set of egress ports of the plurality of egress ports.
- a second secondary ECMP table of the at least two secondary ECMP tables can include an un-weighted listing of a second set of egress ports of the plurality of egress ports. The second set of egress ports can be different than the first set of egress ports.
- the instructions when processed, can also cause the data switch to forward the data packet on the selected egress port.
- Example implementations can include one or more of the following features.
- the first ECMP table and the at least two secondary ECMP tables can implement a WCMP vector using the plurality of egress ports.
- the first set of egress ports can include egress ports of the plurality of egress ports having a highest routing weight of the plurality of egress ports.
- the second set of egress ports can include egress ports of the plurality of egress ports having a second highest routing weight of the plurality of egress ports and also include the first set of egress ports.
- a third secondary ECMP table of the at least two secondary ECMP tables can include an un-weighted listing of a third set of egress ports of the plurality of egress ports.
- the third set of egress ports can be different than the first set of egress ports and the second set of egress ports.
- the third set of egress ports can include egress ports of the plurality of egress ports having a third highest routing weight of the plurality of egress ports and also include the first set of egress ports and the second set of egress ports.
- a weight for the first secondary ECMP table in the first ECMP table can be a fixed value.
- a weight for the second secondary ECMP table in the first ECMP table can be based on a ratio of (1) a product of a number of egress ports in the second secondary ECMP table, and a difference between the highest routing weight and the second highest routing weight and (2) a product of a number of ports in the first secondary ECMP table and the weight for the first secondary ECMP table.
- a weight for the first secondary ECMP table in the first ECMP table can be a fixed value.
- a weight for the second secondary ECMP table in the first ECMP table is based on a ratio of (1) a product of a number of egress ports in the second secondary ECMP table, and a difference between the highest routing weight and the second highest routing weight, and (2) a product of a number of ports in the first secondary ECMP table and the weight for the first secondary ECMP table.
- a method can include receiving, at a data switch, a set of routing weights for a plurality of egress ports of the data switch and converting the set of routing weights to a two-level hierarchy of equal cost multi-path (ECMP) tables.
- the converting can include generating a first-level ECMP table, generating a first second-level ECMP table and generating a second second-level ECMP table.
- the first-level ECMP table can include a weighted listing of the first second-level ECMP table and the second second-level ECMP table.
- the first second-level ECMP table can include an un-weighted listing of a first set of egress ports of the plurality of egress ports.
- the second second-level ECMP table can include an un-weighted listing of a second set of egress ports of the plurality of egress ports.
- the second set of egress ports can be different than the first set of egress ports.
- the method can also include storing the two-level hierarchy of ECMP tables in the data switch.
- Example implementations can include one or more of the following features.
- the first set of egress ports can include egress ports of the plurality of egress ports having a highest routing weight of the plurality of egress ports.
- the second set of egress ports can include egress ports of the plurality of egress ports having a second highest routing weight of the plurality of egress ports.
- the second set of egress ports can also include the first set of egress ports.
- a weight for the first secondary ECMP table in the first ECMP table can be a fixed value.
- a weight for the second secondary ECMP table in the first ECMP table can be based on a ratio of (1) a product of a number of egress ports in the second secondary ECMP table, and a difference between the highest routing weight and the second highest routing weight and (2) a product of a number of ports in the first secondary ECMP table and the weight for the first secondary ECMP table.
- a weight for the third secondary ECMP table in the first ECMP table can be based on a ratio of (1) a product of a number of egress ports in the third secondary ECMP table, and a difference between the second highest routing weight and the third highest routing weight, and (2) a product of the number of ports in the third secondary ECMP table and the third highest routing weight plus the product of the number of ports in the first secondary ECMP table and the weight for the first secondary ECMP table.
- a weight for the first secondary ECMP table in the first ECMP table can be a fixed value.
- a weight for the second secondary ECMP table in the first ECMP table is based on a ratio of (1) a product of a number of egress ports in the second secondary ECMP table, and a difference between the highest routing weight and the second highest routing weight, and (2) a product of a number of ports in the first secondary ECMP table and the weight for the first secondary ECMP table.
- a data switch can include at least one memory that is configured to store instructions and at least one processor that is operably coupled to the at least one memory and that is configured to process the instructions.
- the instructions when processed, can cause the data switch to receive a set of routing weights for a plurality of egress ports of the data switch and convert the set of routing weights to a two-level hierarchy of equal cost multi-path (ECMP) tables.
- the converting can include generating a first-level ECMP table, generating a first second-level ECMP table and generating a second second-level ECMP table.
- the first-level ECMP table can include a weighted listing of the first second-level ECMP table and the second second-level ECMP table.
- the first second-level ECMP table can include an un-weighted listing of a first set of egress ports of the plurality of egress ports.
- the second second-level ECMP table can include an un-weighted listing of a second set of egress ports of the plurality of egress ports.
- the second set of egress ports can be different than the first set of egress ports.
- the instructions, when processed, can also cause the data switch to store the two-level hierarchy of ECMP tables in the data switch.
- Example implementations can include one or more of the following features.
- the first set of egress ports can include egress ports of the plurality of egress ports having a highest routing weight of the plurality of egress ports.
- the second set of egress ports can include egress ports of the plurality of egress ports having a second highest routing weight of the plurality of egress ports.
- the second set of egress ports can also include the first set of egress ports.
- the instructions for converting the set of routing weights to the two-level hierarchy of ECMP tables can include instructions that, when processed by the at least one processor, cause the data switch to generate a third secondary ECMP table including an un-weighted listing of a third set of egress ports of the plurality of egress ports.
- the third set of egress ports can be different than the first set of egress ports and the second set of egress ports.
- the third set of egress ports can include egress ports of the plurality of egress ports having a third highest routing weight of the plurality of egress ports.
- the third set of egress ports can also include the first set of egress ports and the second set of egress ports.
- a weight for the first secondary ECMP table in the first ECMP table can be a fixed value.
- a weight for the second secondary ECMP table in the first ECMP table can be based on a ratio of (1) a product of a number of egress ports in the second secondary ECMP table, and a difference between the highest routing weight and the second highest routing weight and (2) a product of a number of ports in the first secondary ECMP table and the weight for the first secondary ECMP table.
- a weight for the third secondary ECMP table in the first ECMP table can be based on a ratio of (1) a product of a number of egress ports in the third secondary ECMP table, and a difference between the second highest routing weight and the third highest routing weight, and (2) a product of the number of ports in the third secondary ECMP table and the third highest routing weight plus the product of the number of ports in the first secondary ECMP table and the weight for the first secondary ECMP table.
- a weight for the first secondary ECMP table in the first ECMP table can be a fixed value.
- a weight for the second secondary ECMP table in the first ECMP table is based on a ratio of (1) a product of a number of egress ports in the second secondary ECMP table, and a difference between the highest routing weight and the second highest routing weight, and (2) a product of a number of ports in the first secondary ECMP table and the weight for the first secondary ECMP table.
Abstract
Description
Lookup value=
Ports_Sets={Set_0,Set_1}
where:
Set_0={P0,P1,P2,P3,P4,P5}, and
Set_1={P0,P1,P2,P3,P4,P5,P6,P7}.
(weight_Set_0,weight_Set_1)=(6:56), which reduces to (3:28)
Sets_Weights=(weight_Set_0,weight_Set_1)=(1,7)
where the port sets (Set_0 and Set_1) are the same as those listed above. Accordingly, a port set weights table of a corresponding two-level ECMP table hierarchy would have 1 entry for Set_0 and 7 entries for Set_1, for a total of 8 entries. Accordingly, a two-level hierarchy in this example would have a total of 22 entries (8 entries for the port set weights table, 6 entries for the Set_0 table and 8 entries for the
Set_0={P0×2,P1×2P2×2,P3×2,P4×2,P5×2,P6×1,P7×1},
which can be represented in a 14 entry, weighted second-level ECMP table for Set_0 in a two-level hierarchy, such as in the table 1020. In this example, Set_1 would still be represented by an eight member, un-weighted 8 member ECMP group as follows:
Set_1={P0,P1,P2,P3,P4,P5,P6,P7}.
v0=(1,1,0),Set_0={P0,P1},layer thickness d_0=1
v1=(8,8,8),Set_1={P0,P1,P2},layer thickness d_1=8
where the thickness d_0 is determined as the difference between the highest routing weight value and the second highest routing weight value (which in this example is also the lowest routing weight value) and v0 has a layered weight of 1 for P0 and P1 (e.g., Set_0). In this example, d_1 is the thickness of the second layer, which is determined by the lowest routing weight of 8. Here, v1 has a layered weight of 8 for P0, P1 and P2 (e.g., Set_1). Traversing the layers demonstrates that the desired routing weights of {9, 9, 8} are represented by the foregoing WCMP vector (which can also be referred to a WCMP vector decomposition).
w/((w″*m)+w*(n−m))=w/((w*n)+(d_0*m))
P(Set_1,p_m)*P(Set_1)=(1/n)*(WS1)/(WS0+WS1)
where P(Set_1, p_m) is the probability of selecting a port with the lower routing weight within Set_1 (i.e., v(1)) and P(Set_1) is the probability of selecting Set_1. P(Set_1, p_m) is given by 1/n (n being the total number of ports in the WCMP group, and P(Set_1) is given by WS1/WS0+WS1, were WS0 is the desired port set weight for Set_0 (e.g., of v(0)) and WS1 is the desired port set weight for Set_1 (e.g., of v(1)).
WS1/WS0=(n*w)/(m*d_0)
which, for the implementation discussed above, and illustrated in
v0=(4,0,0),Set_0={P0},layer thickness d_0=4
v1=(6,6,0),Set_1={P0,P1},layer thickness d_1=6
v(2)=(2,2,2),Set_2={P0,P1,P2},layer thickness d_2=2
where the thickness d_0 is determined as the difference between the highest routing weight value (12) and the second highest routing weight value (8), and v0 has a layered weight of 4 for P0 (e.g., Set_0). In this example, d_1 is the thickness of the second layer, which is determined as the difference between the second highest routing weight (8) and the lowest routing weight (2). Here, v(1) has a layered weight of 6 for P0 and P1 (e.g., Set_1). Also in this example, d_2 is the thickness of the third layer, which is equal to the lowest routing weight of 2, and v(2) has a layered weight of 2 for P0, P1 and P2 (e.g., Set_2). Traversing the three layers demonstrates that the desired routing weights of {12, 8, 2} are represented by the foregoing WCMP vector.
(i+1)*(d_1)/((1*d_0)+(2*d_1) . . . +(i*d_i−1))
WS1/WS0=2*d_1/1*d_0=2*6/4*1=12/4=3/1
WS2/WS1=3*d_2/((2*d_1)+(1*d_0))=3*2/((2*6)+(1*4))=6/16
from which port set weights (e.g., in the table 510) WS0=1, WS1=3 and WS2=3/2 can be determined. These port set weights can be represented (using the lowest common denominator to determine the lowest integer values) as WS0=2, WS1=6 and WS2=3.
Claims (11)
Priority Applications (1)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US14/539,796 US9716658B1 (en) | 2014-02-25 | 2014-11-12 | Weighted load balancing in a multistage network using heirachical ECMP |
Applications Claiming Priority (3)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US201461944564P | 2014-02-25 | 2014-02-25 | |
US14/217,937 US9571400B1 (en) | 2014-02-25 | 2014-03-18 | Weighted load balancing in a multistage network using hierarchical ECMP |
US14/539,796 US9716658B1 (en) | 2014-02-25 | 2014-11-12 | Weighted load balancing in a multistage network using heirachical ECMP |
Related Parent Applications (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
US14/217,937 Continuation US9571400B1 (en) | 2014-02-25 | 2014-03-18 | Weighted load balancing in a multistage network using hierarchical ECMP |
Publications (1)
Publication Number | Publication Date |
---|---|
US9716658B1 true US9716658B1 (en) | 2017-07-25 |
Family
ID=57965046
Family Applications (2)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
US14/217,937 Active 2034-07-31 US9571400B1 (en) | 2014-02-25 | 2014-03-18 | Weighted load balancing in a multistage network using hierarchical ECMP |
US14/539,796 Active 2034-08-10 US9716658B1 (en) | 2014-02-25 | 2014-11-12 | Weighted load balancing in a multistage network using heirachical ECMP |
Family Applications Before (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
US14/217,937 Active 2034-07-31 US9571400B1 (en) | 2014-02-25 | 2014-03-18 | Weighted load balancing in a multistage network using hierarchical ECMP |
Country Status (1)
Country | Link |
---|---|
US (2) | US9571400B1 (en) |
Families Citing this family (27)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US9548960B2 (en) | 2013-10-06 | 2017-01-17 | Mellanox Technologies Ltd. | Simplified packet routing |
US9729473B2 (en) | 2014-06-23 | 2017-08-08 | Mellanox Technologies, Ltd. | Network high availability using temporary re-routing |
US9806994B2 (en) | 2014-06-24 | 2017-10-31 | Mellanox Technologies, Ltd. | Routing via multiple paths with efficient traffic distribution |
US10063479B2 (en) | 2014-10-06 | 2018-08-28 | Barefoot Networks, Inc. | Fast adjusting load balancer |
US9529531B2 (en) | 2014-10-06 | 2016-12-27 | Barefoot Networks, Inc. | Proxy hash table |
US9894005B2 (en) | 2015-03-31 | 2018-02-13 | Mellanox Technologies, Ltd. | Adaptive routing controlled by source node |
US10284471B2 (en) * | 2015-07-23 | 2019-05-07 | Netscout Systems, Inc. | AIA enhancements to support lag networks |
US9973435B2 (en) * | 2015-12-16 | 2018-05-15 | Mellanox Technologies Tlv Ltd. | Loopback-free adaptive routing |
US10313231B1 (en) * | 2016-02-08 | 2019-06-04 | Barefoot Networks, Inc. | Resilient hashing for forwarding packets |
US10063407B1 (en) | 2016-02-08 | 2018-08-28 | Barefoot Networks, Inc. | Identifying and marking failed egress links in data plane |
US10819621B2 (en) | 2016-02-23 | 2020-10-27 | Mellanox Technologies Tlv Ltd. | Unicast forwarding of adaptive-routing notifications |
US10178029B2 (en) | 2016-05-11 | 2019-01-08 | Mellanox Technologies Tlv Ltd. | Forwarding of adaptive routing notifications |
US10084687B1 (en) * | 2016-11-17 | 2018-09-25 | Barefoot Networks, Inc. | Weighted-cost multi-pathing using range lookups |
US10200294B2 (en) | 2016-12-22 | 2019-02-05 | Mellanox Technologies Tlv Ltd. | Adaptive routing based on flow-control credits |
US10237206B1 (en) | 2017-03-05 | 2019-03-19 | Barefoot Networks, Inc. | Equal cost multiple path group failover for multicast |
US10404619B1 (en) | 2017-03-05 | 2019-09-03 | Barefoot Networks, Inc. | Link aggregation group failover for multicast |
US10333549B1 (en) * | 2017-03-08 | 2019-06-25 | iDensify LLC | System and components for encoding integers |
US10158573B1 (en) | 2017-05-01 | 2018-12-18 | Barefoot Networks, Inc. | Forwarding element with a data plane load balancer |
US10642739B2 (en) * | 2017-09-11 | 2020-05-05 | Cisco Technology, Inc. | Distributed coordination of caching and processing by networking devices |
CN108337183B (en) * | 2017-12-19 | 2021-10-26 | 南京大学 | Method for balancing network flow load of data center |
US10644995B2 (en) | 2018-02-14 | 2020-05-05 | Mellanox Technologies Tlv Ltd. | Adaptive routing in a box |
US11005724B1 (en) | 2019-01-06 | 2021-05-11 | Mellanox Technologies, Ltd. | Network topology having minimal number of long connections among groups of network elements |
US11575594B2 (en) | 2020-09-10 | 2023-02-07 | Mellanox Technologies, Ltd. | Deadlock-free rerouting for resolving local link failures using detour paths |
US11411911B2 (en) | 2020-10-26 | 2022-08-09 | Mellanox Technologies, Ltd. | Routing across multiple subnetworks using address mapping |
US11329921B1 (en) * | 2020-11-19 | 2022-05-10 | Juniper Networks, Inc | Apparatus, system, and method for mapping incremental changes across hierarchical and non-hierarchical forwarding information bases |
US11870682B2 (en) | 2021-06-22 | 2024-01-09 | Mellanox Technologies, Ltd. | Deadlock-free local rerouting for handling multiple local link failures in hierarchical network topologies |
US11765103B2 (en) | 2021-12-01 | 2023-09-19 | Mellanox Technologies, Ltd. | Large-scale network with high port utilization |
Citations (43)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20030223413A1 (en) | 2002-05-29 | 2003-12-04 | Guerrero Miguel A. | Load balancing engine |
US20040264380A1 (en) | 2003-06-27 | 2004-12-30 | Broadcom Corporation | Distributing information across equal-cost paths in a network |
US20050270972A1 (en) | 2004-05-28 | 2005-12-08 | Kodialam Muralidharan S | Efficient and robust routing of potentially-variable traffic for path restoration following link failure |
US7190696B1 (en) | 2002-03-05 | 2007-03-13 | Force10 Networks, Inc. | System and method for distributing packets among a plurality of paths to a destination |
US20080071404A1 (en) | 2006-09-19 | 2008-03-20 | Samsung Electronics Co.,Ltd. | Job assignment apparatus of automatic material-handling system and method thereof |
US20080181103A1 (en) | 2007-01-29 | 2008-07-31 | Fulcrum Microsystems Inc. | Traffic distribution techniques |
US7568047B1 (en) | 2004-04-30 | 2009-07-28 | Nortel Networks Limited | Method and apparatus for adaptive service label management |
US20100265824A1 (en) | 2007-11-09 | 2010-10-21 | Blade Network Technologies, Inc | Session-less Load Balancing of Client Traffic Across Servers in a Server Group |
US20100290458A1 (en) | 2009-05-13 | 2010-11-18 | Avaya Inc. | Method and apparatus for providing fast reroute of a packet that may be forwarded on one of a plurality of equal cost multipath routes through a network |
US7898959B1 (en) | 2007-06-28 | 2011-03-01 | Marvell Israel (Misl) Ltd. | Method for weighted load-balancing among network interfaces |
US7903654B2 (en) | 2006-08-22 | 2011-03-08 | Foundry Networks, Llc | System and method for ECMP load sharing |
US20110134925A1 (en) | 2009-11-02 | 2011-06-09 | Uri Safrai | Switching Apparatus and Method Based on Virtual Interfaces |
US20110286462A1 (en) | 2010-05-19 | 2011-11-24 | Juniper Networks, Inc. | Systems and methods for equal-cost multi-path virtual private lan service |
US20120134497A1 (en) | 2010-11-30 | 2012-05-31 | Amir Roitshtein | Load balancing hash computation for network switches |
US20120136846A1 (en) | 2010-11-30 | 2012-05-31 | Haoyu Song | Methods of hashing for networks and systems thereof |
US20120170575A1 (en) | 2010-12-29 | 2012-07-05 | Juniper Networks, Inc. | Methods and apparatus for validation of equal cost multi path (ecmp) paths in a switch fabric system |
US20120179800A1 (en) | 2011-01-10 | 2012-07-12 | David Ian Allan | System and method for variable-size table construction applied to a table-lookup approach for load-spreading in forwarding data in a network |
US20120230225A1 (en) | 2011-03-11 | 2012-09-13 | Broadcom Corporation | Hash-Based Load Balancing with Per-Hop Seeding |
US20120314581A1 (en) | 2011-06-10 | 2012-12-13 | Force 10 Networks, Inc. | Method & apparatus for optimizing data traffic path through a stacked switch lag configuration |
US20130286846A1 (en) | 2012-04-25 | 2013-10-31 | Juniper Networks, Inc. | Path weighted equal-cost multipath |
US8595239B1 (en) | 2012-01-03 | 2013-11-26 | Google Inc. | Minimally disruptive hash table |
US20130329730A1 (en) | 2012-06-07 | 2013-12-12 | Cisco Technology, Inc. | Scaling IPv4 in Data Center Networks Employing ECMP to Reach Hosts in a Directly Connected Subnet |
US8612269B2 (en) | 2000-09-22 | 2013-12-17 | Google Inc. | Method, system, and computer program product to store event information and corresponding event availability information |
US20140064091A1 (en) | 2012-08-29 | 2014-03-06 | International Business Machines Corporation | Sliced routing table management with replication |
US20140101336A1 (en) | 2012-10-09 | 2014-04-10 | Cisco Technology, Inc. | System and method for implementing a multilevel data center fabric in a network environment |
US8769148B1 (en) | 2010-07-30 | 2014-07-01 | Google Inc. | Traffic distribution over multiple paths in a network |
US8787400B1 (en) * | 2012-04-25 | 2014-07-22 | Juniper Networks, Inc. | Weighted equal-cost multipath |
US8837470B1 (en) | 2012-01-26 | 2014-09-16 | Google Inc. | Multi-stage switching topology |
US20140293786A1 (en) * | 2013-04-01 | 2014-10-02 | Broadcom Corporation | Path Resolution for Hierarchical Load Distribution |
US8861527B1 (en) | 2011-12-30 | 2014-10-14 | Emc Corporation | Network-assisted routing for topology-aware overlay networks |
US8873567B1 (en) | 2011-10-20 | 2014-10-28 | Google Inc. | Providing routing information to support routing by port groups via corresponding network paths |
US8902751B1 (en) | 2012-01-26 | 2014-12-02 | Google Inc. | Multi-stage switching topology |
US20140355615A1 (en) | 2012-02-02 | 2014-12-04 | Hangzhou H3C Technologies Co., Ltd. | Traffic forwarding |
US20150033016A1 (en) | 2013-07-23 | 2015-01-29 | Battelle Memorial Institute | Systems and methods for securing real-time messages |
US8953605B1 (en) | 2012-01-03 | 2015-02-10 | Juniper Networks, Inc. | Methods and apparatus for a handshake protocol in a LAG-based multipath switch fabric for multipath OAM |
US20150058595A1 (en) | 2013-08-26 | 2015-02-26 | Oracle International Corporation | Systems and Methods for Implementing Dynamically Configurable Perfect Hash Tables |
US20150063360A1 (en) | 2013-09-04 | 2015-03-05 | Nicira, Inc. | High Availability L3 Gateways for Logical Networks |
US20150124652A1 (en) * | 2013-11-05 | 2015-05-07 | Cisco Technology, Inc. | Weighted equal cost multipath routing |
US20150138957A1 (en) | 2013-11-18 | 2015-05-21 | International Business Machines Corporation | Computing forwarding tables for link failures |
US20150163146A1 (en) | 2013-12-05 | 2015-06-11 | Mediatek Singapore Pte. Ltd. | Packet forwarding apparatus and method using flow subgroup based path selection for dynamic load balancing |
US20150163133A1 (en) | 2013-12-09 | 2015-06-11 | Donald B. Grosser | Load sharing of mpls pseudo-wires |
US9083710B1 (en) | 2012-01-03 | 2015-07-14 | Google Inc. | Server load balancing using minimally disruptive hash tables |
US9246821B1 (en) | 2014-01-28 | 2016-01-26 | Google Inc. | Systems and methods for implementing weighted cost multi-path using two-level equal cost multi-path tables |
-
2014
- 2014-03-18 US US14/217,937 patent/US9571400B1/en active Active
- 2014-11-12 US US14/539,796 patent/US9716658B1/en active Active
Patent Citations (43)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US8612269B2 (en) | 2000-09-22 | 2013-12-17 | Google Inc. | Method, system, and computer program product to store event information and corresponding event availability information |
US7190696B1 (en) | 2002-03-05 | 2007-03-13 | Force10 Networks, Inc. | System and method for distributing packets among a plurality of paths to a destination |
US20030223413A1 (en) | 2002-05-29 | 2003-12-04 | Guerrero Miguel A. | Load balancing engine |
US20040264380A1 (en) | 2003-06-27 | 2004-12-30 | Broadcom Corporation | Distributing information across equal-cost paths in a network |
US7568047B1 (en) | 2004-04-30 | 2009-07-28 | Nortel Networks Limited | Method and apparatus for adaptive service label management |
US20050270972A1 (en) | 2004-05-28 | 2005-12-08 | Kodialam Muralidharan S | Efficient and robust routing of potentially-variable traffic for path restoration following link failure |
US7903654B2 (en) | 2006-08-22 | 2011-03-08 | Foundry Networks, Llc | System and method for ECMP load sharing |
US20080071404A1 (en) | 2006-09-19 | 2008-03-20 | Samsung Electronics Co.,Ltd. | Job assignment apparatus of automatic material-handling system and method thereof |
US20080181103A1 (en) | 2007-01-29 | 2008-07-31 | Fulcrum Microsystems Inc. | Traffic distribution techniques |
US7898959B1 (en) | 2007-06-28 | 2011-03-01 | Marvell Israel (Misl) Ltd. | Method for weighted load-balancing among network interfaces |
US20100265824A1 (en) | 2007-11-09 | 2010-10-21 | Blade Network Technologies, Inc | Session-less Load Balancing of Client Traffic Across Servers in a Server Group |
US20100290458A1 (en) | 2009-05-13 | 2010-11-18 | Avaya Inc. | Method and apparatus for providing fast reroute of a packet that may be forwarded on one of a plurality of equal cost multipath routes through a network |
US20110134925A1 (en) | 2009-11-02 | 2011-06-09 | Uri Safrai | Switching Apparatus and Method Based on Virtual Interfaces |
US20110286462A1 (en) | 2010-05-19 | 2011-11-24 | Juniper Networks, Inc. | Systems and methods for equal-cost multi-path virtual private lan service |
US8769148B1 (en) | 2010-07-30 | 2014-07-01 | Google Inc. | Traffic distribution over multiple paths in a network |
US20120134497A1 (en) | 2010-11-30 | 2012-05-31 | Amir Roitshtein | Load balancing hash computation for network switches |
US20120136846A1 (en) | 2010-11-30 | 2012-05-31 | Haoyu Song | Methods of hashing for networks and systems thereof |
US20120170575A1 (en) | 2010-12-29 | 2012-07-05 | Juniper Networks, Inc. | Methods and apparatus for validation of equal cost multi path (ecmp) paths in a switch fabric system |
US20120179800A1 (en) | 2011-01-10 | 2012-07-12 | David Ian Allan | System and method for variable-size table construction applied to a table-lookup approach for load-spreading in forwarding data in a network |
US20120230225A1 (en) | 2011-03-11 | 2012-09-13 | Broadcom Corporation | Hash-Based Load Balancing with Per-Hop Seeding |
US20120314581A1 (en) | 2011-06-10 | 2012-12-13 | Force 10 Networks, Inc. | Method & apparatus for optimizing data traffic path through a stacked switch lag configuration |
US8873567B1 (en) | 2011-10-20 | 2014-10-28 | Google Inc. | Providing routing information to support routing by port groups via corresponding network paths |
US8861527B1 (en) | 2011-12-30 | 2014-10-14 | Emc Corporation | Network-assisted routing for topology-aware overlay networks |
US9083710B1 (en) | 2012-01-03 | 2015-07-14 | Google Inc. | Server load balancing using minimally disruptive hash tables |
US8953605B1 (en) | 2012-01-03 | 2015-02-10 | Juniper Networks, Inc. | Methods and apparatus for a handshake protocol in a LAG-based multipath switch fabric for multipath OAM |
US8595239B1 (en) | 2012-01-03 | 2013-11-26 | Google Inc. | Minimally disruptive hash table |
US8902751B1 (en) | 2012-01-26 | 2014-12-02 | Google Inc. | Multi-stage switching topology |
US8837470B1 (en) | 2012-01-26 | 2014-09-16 | Google Inc. | Multi-stage switching topology |
US20140355615A1 (en) | 2012-02-02 | 2014-12-04 | Hangzhou H3C Technologies Co., Ltd. | Traffic forwarding |
US20130286846A1 (en) | 2012-04-25 | 2013-10-31 | Juniper Networks, Inc. | Path weighted equal-cost multipath |
US8787400B1 (en) * | 2012-04-25 | 2014-07-22 | Juniper Networks, Inc. | Weighted equal-cost multipath |
US20130329730A1 (en) | 2012-06-07 | 2013-12-12 | Cisco Technology, Inc. | Scaling IPv4 in Data Center Networks Employing ECMP to Reach Hosts in a Directly Connected Subnet |
US20140064091A1 (en) | 2012-08-29 | 2014-03-06 | International Business Machines Corporation | Sliced routing table management with replication |
US20140101336A1 (en) | 2012-10-09 | 2014-04-10 | Cisco Technology, Inc. | System and method for implementing a multilevel data center fabric in a network environment |
US20140293786A1 (en) * | 2013-04-01 | 2014-10-02 | Broadcom Corporation | Path Resolution for Hierarchical Load Distribution |
US20150033016A1 (en) | 2013-07-23 | 2015-01-29 | Battelle Memorial Institute | Systems and methods for securing real-time messages |
US20150058595A1 (en) | 2013-08-26 | 2015-02-26 | Oracle International Corporation | Systems and Methods for Implementing Dynamically Configurable Perfect Hash Tables |
US20150063360A1 (en) | 2013-09-04 | 2015-03-05 | Nicira, Inc. | High Availability L3 Gateways for Logical Networks |
US20150124652A1 (en) * | 2013-11-05 | 2015-05-07 | Cisco Technology, Inc. | Weighted equal cost multipath routing |
US20150138957A1 (en) | 2013-11-18 | 2015-05-21 | International Business Machines Corporation | Computing forwarding tables for link failures |
US20150163146A1 (en) | 2013-12-05 | 2015-06-11 | Mediatek Singapore Pte. Ltd. | Packet forwarding apparatus and method using flow subgroup based path selection for dynamic load balancing |
US20150163133A1 (en) | 2013-12-09 | 2015-06-11 | Donald B. Grosser | Load sharing of mpls pseudo-wires |
US9246821B1 (en) | 2014-01-28 | 2016-01-26 | Google Inc. | Systems and methods for implementing weighted cost multi-path using two-level equal cost multi-path tables |
Non-Patent Citations (7)
Title |
---|
Al-Fares, Mohammad, et al. A Scalable, Commodity Data Center Network Architecture, ACM SIGCOMM Computer-Communication Review, vol. 38, No. 4, pp. 63-74, ACM, 2008. |
Al-Fares, Mohammad, et al. A Scalable, Commodity Data Center Network Architecture, ACM SIGCOMM Computer—Communication Review, vol. 38, No. 4, pp. 63-74, ACM, 2008. |
Liu, et al, "zUpciate: Updating Data Center Networks with Zero Loss", SIGCOMM'13, Aug. 12-16, 2013, 12 pages. |
U.S. Notice of Allowance issued Sep. 28, 2016 in U.S. Appl. No: 14/217,937 (8 pages). |
US Notice of Allowance issued Jun. 30, 2016 in U.S. Appl. No. 14/217,937. |
US Office Action on U.S. Appl. No. 14/217,937 DTD Jan. 11, 2016. |
Zhou, Junlan, et al. WCMP: Weighted Cost Multipathing for Improved Fairness in Data Centers, Proceedings of the Ninth European Conference on Computer Systems. ACM, Apr. 13-16, 2014. |
Also Published As
Publication number | Publication date |
---|---|
US9571400B1 (en) | 2017-02-14 |
Similar Documents
Publication | Publication Date | Title |
---|---|---|
US9716658B1 (en) | Weighted load balancing in a multistage network using heirachical ECMP | |
US11075986B2 (en) | Weighted load balancing using scaled parallel hashing | |
US9608913B1 (en) | Weighted load balancing in a multistage network | |
JP5551253B2 (en) | Method and apparatus for selecting from multiple equal cost paths | |
US8503456B2 (en) | Flow based path selection randomization | |
US8565239B2 (en) | Node based path selection randomization | |
US9246821B1 (en) | Systems and methods for implementing weighted cost multi-path using two-level equal cost multi-path tables | |
Teh et al. | Flexspander: augmenting expander networks in high-performance systems with optical bandwidth steering | |
US9716592B1 (en) | Traffic distribution over multiple paths in a network while maintaining flow affinity | |
JP2017516387A (en) | Reduction of prefix-aware weighted cost multiple path groups | |
US10397097B2 (en) | Weighted next hop selection at a router using an equal cost multipath process | |
WO2016007760A2 (en) | System and method for supporting efficient load-balancing in a high performance computing (hpc) environment | |
US9397957B2 (en) | Traffic engineering for large scale data center networks | |
Zhang et al. | Optimal controller placement problem in internet-oriented software defined network | |
US9529775B2 (en) | Network topology of hierarchical ring with gray code and binary code | |
Chen et al. | NFV middlebox placement with balanced set-up cost and bandwidth consumption | |
Ferrara et al. | The computational and latency advantage of quantum communication networks | |
CN117135059B (en) | Network topology structure, construction method, routing algorithm, equipment and medium | |
Montana et al. | Adaptive reconfiguration of data networks using genetic algorithms | |
CN105453489B (en) | A kind of modified ring topologies and its application method | |
Li et al. | Permutation generation for routing in BCube connected crossbars | |
Lin et al. | Proactive multipath routing with a predictive mechanism in software‐defined networks | |
EP3902212A1 (en) | A method to mitigate hash correlation in multi-path networks | |
US20230396546A1 (en) | Increasing multi-path size using hierarchical forwarding equivalent classes | |
Guo | DCube: A Family of Network Topologies for Containerized Data Centers |
Legal Events
Date | Code | Title | Description |
---|---|---|---|
AS | Assignment |
Owner name: GOOGLE INC., CALIFORNIAFree format text: ASSIGNMENT OF ASSIGNORS INTEREST;ASSIGNORS:MANDAL, SUBHASREE;KABBANI, ABDUL;REEL/FRAME:034922/0300Effective date: 20141107 |
|
STCF | Information on status: patent grant |
Free format text: PATENTED CASE |
|
AS | Assignment |
Owner name: GOOGLE LLC, CALIFORNIAFree format text: CHANGE OF NAME;ASSIGNOR:GOOGLE INC.;REEL/FRAME:044097/0658Effective date: 20170929 |
|
CC | Certificate of correction | ||
MAFP | Maintenance fee payment |
Free format text: PAYMENT OF MAINTENANCE FEE, 4TH YEAR, LARGE ENTITY (ORIGINAL EVENT CODE: M1551); ENTITY STATUS OF PATENT OWNER: LARGE ENTITYYear of fee payment: 4 |