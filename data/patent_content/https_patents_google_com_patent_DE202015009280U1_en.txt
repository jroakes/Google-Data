DE202015009280U1 - Integrated domain-specific languages as first-class code artifacts - Google Patents
Integrated domain-specific languages as first-class code artifacts Download PDFInfo
- Publication number
- DE202015009280U1 DE202015009280U1 DE202015009280.2U DE202015009280U DE202015009280U1 DE 202015009280 U1 DE202015009280 U1 DE 202015009280U1 DE 202015009280 U DE202015009280 U DE 202015009280U DE 202015009280 U1 DE202015009280 U1 DE 202015009280U1
- Authority
- DE
- Germany
- Prior art keywords
- programming language
- platform
- independent
- integrated
- extension
- Prior art date
- Legal status (The legal status is an assumption and is not a legal conclusion. Google has not performed a legal analysis and makes no representation as to the accuracy of the status listed.)
- Active
Links
Images
Classifications
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F8/00—Arrangements for software engineering
- G06F8/40—Transformation of program code
- G06F8/41—Compilation
- G06F8/42—Syntactic analysis
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F8/00—Arrangements for software engineering
- G06F8/40—Transformation of program code
- G06F8/41—Compilation
- G06F8/42—Syntactic analysis
- G06F8/427—Parsing
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F8/00—Arrangements for software engineering
- G06F8/40—Transformation of program code
- G06F8/41—Compilation
- G06F8/43—Checking; Contextual analysis
- G06F8/433—Dependency analysis; Data or control flow analysis
Abstract
System, das Folgendes umfasst: einen oder mehrere Prozessor(en); und ein nicht transitorisches computerlesbares Medium, das gekoppelt ist mit dem einen oder den mehreren Prozessoren, die darin gespeicherte Anweisungen aufweisen, die, wenn sie durch den einen oder die mehreren Prozessoren ausgeführt werden, den einen oder die mehreren Prozessoren veranlassen, Operationen durchzuführen, umfassend: das Analysieren einer plattformunabhängigen Programmiersprache in einer Quelldatei (110) mithilfe eines Analysators plattformunabhängiger Programmierung (120), worin der Analysator plattformunabhängiger Programmierung eine Erweiterung (130) zur Analyse integrierter Programmiersprachen beinhaltet; als Reaktion auf das Erkennen einer integrierten Programmiersprache in der Quelldatei durch den Analysator plattformunabhängiger Programmierung das Aufrufen der Erweiterung zur Analyse der integrierten Programmiersprache; das Bereitstellen von Daten über die plattformunabhängige Programmiersprache an die Erweiterung zur Analyse der integrierten Programmiersprachen; und das Generieren von semantischen Informationen über die integrierte Programmiersprache und die plattformunabhängige Programmiersprache, worin Teile der Quelldatei, die sich in der integrierten Programmiersprache befinden, Teilen der Quelldatei, die sich in der plattformunabhängigen Programmiersprache befinden, über die semantischen Informationen zugewiesen werden.A system comprising: one or more processors; and a non-transitory computer-readable medium coupled to the one or more processors having instructions stored therein that, when executed by the one or more processors, cause the one or more processors to perform operations by analyzing a platform-independent programming language in a source file (110) using a platform-independent programming analyzer (120), wherein the platform-independent programming analyzer includes an integrated programming language analysis extension (130); in response to detecting an integrated programming language in the source file through the platform independent analyzer, calling the extension to analyze the integrated programming language; Providing data via the platform-independent programming language to the extension for analysis of the integrated programming languages; and generating semantic information about the integrated programming language and the platform independent programming language, wherein portions of the source file residing in the integrated programming language are assigned to the source file residing in the platform independent programming language via the semantic information.
Description
Unter Schutz gestellt werden und Gegenstand des Gebrauchsmusters sind dabei, entsprechend den Vorschriften des Gebrauchsmustergesetzes, lediglich Vorrichtungen wie in den beigefügten Schutzansprüchen definiert, jedoch keine Verfahren. Soweit nachfolgend in der Beschreibung gegebenenfalls auf Verfahren Bezug genommen wird, dienen diese Bezugnahmen lediglich der beispielhaften Erläuterung der in den beigefügten Schutzansprüchen unter Schutz gestellten Vorrichtung oder Vorrichtungen.Be provided under protection and subject of the utility model are, according to the provisions of the utility model law, only devices as defined in the appended claims, but no method. Wherever in the description, if appropriate, reference is made to methods, these references are merely illustrative of the device or devices set forth in the appended claims.
HINTERGRUNDBACKGROUND
Entwickler schreiben große Mengen von Code in plattformunabhängigen Programmiersprachen (z. B. Programmiersprachen, die nicht auf die Verwendung innerhalb einer spezifischen Anwendungsdomäne begrenzt sind, sondern für das Schreiben von Software in einer Vielzahl von Anwendungsdomänen verwendet werden können) wie C++, Java, usw. Manchmal sind diese plattformunabhängigen Sprachen nicht ausdrucksstark genug oder zu umständlich für eine bestimmte Problemdomäne. Ein Ansatz von Entwicklern besteht darin, diese Probleme zu umgehen oder den Aufwand zu meiden und domänenspezifische Sprachen zu verwenden (z. B. Programmiersprachen speziell für eine bestimmte Anwendungsdomäne).Developers write large amounts of code in platform-independent programming languages (such as programming languages that are not limited to use within a specific application domain but can be used to write software in a variety of application domains) such as C ++, Java, and so on. Sometimes, these platform-independent languages are not expressive enough or too cumbersome for a particular problem domain. One approach for developers is to work around these issues or avoid the hassle of using domain-specific languages (for example, programming languages specific to a particular application domain).
KURZDARSTELLUNGSUMMARY
Diese Zusammenhang führt eine Auswahl an Konzepten in einer vereinfachten Form ein, um ein grundlegendes Verständnis von einigen Aspekten der vorliegenden Offenbarung. Diese Zusammenfassung ist keine umfangreiche Übersicht über die Offenbarung und zielt nicht darauf ab, Schlüssel- oder kritischen Elemente der Offenbarung festzustellen, oder den Umfang der Offenbarung abzugrenzen. Diese Zusammenfassung stellt bloß einige der Konzepte der Offenbarung dar, wie eine Einleitung zur ausführlichen Beschreibung, die unten zur Verfügung gestellt wird.This relationship introduces a selection of concepts in a simplified form to provide a basic understanding of some aspects of the present disclosure. This summary is not a comprehensive overview of the disclosure and is not intended to identify key or critical elements of the disclosure, or to delineate the scope of the disclosure. This summary merely presents some of the concepts of the disclosure, such as an introduction to the detailed description provided below.
Die vorliegende Offenbarung betrifft Verfahren und Systeme zur Bereitstellung von Webservices an Benutzer. Insbesondere betreffen Aspekte der vorliegenden Offenbarung die Bereitstellung von semantischen Informationen über integrierte Programmiersprachen, die in diesen plattformunabhängigen Programmiersprachen enthalten sind.The present disclosure relates to methods and systems for providing web services to users. In particular, aspects of the present disclosure pertain to providing semantic information about integrated programming languages included in these platform independent programming languages.
Eine Ausführungsform der vorliegenden Offenbarung betrifft ein computerimplementiertes Verfahren Folgendes umfassend: Analyse einer plattformunabhängigen Programmiersprache in einer Quelldatei mithilfe eines Analysators plattformunabhängiger Programmierung, worin der Analysator plattformunabhängiger Programmierung eine Erweiterung zur Analyse integrierter Programmiersprachen beinhaltet; als Reaktion auf das Erkennen einer integrierten Programmiersprache in der Quelldatei durch den Analysator plattformunabhängiger Programmierung Aufruf der Erweiterung zur Analyse der integrierten Programmiersprachen; Bereitstellen von Daten über die plattformunabhängige Programmiersprache an die Erweiterung zur Analyse der integrierten Programmiersprachen; und Generieren der semantischen Informationen über die integrierte Programmiersprache und die plattformunabhängige Programmiersprache, worin Teile der Quelldatei, die sich in der integrierten Programmiersprache befinden, Teilen der Quelldatei, die sich in der plattformunabhängigen Programmiersprache befinden über die semantischen Informationen zugewiesen werden.One embodiment of the present disclosure relates to a computer-implemented method comprising: analyzing a platform-independent programming language in a source file using a platform-independent programming analyzer, wherein the platform-independent programming analyzer includes an extension for analyzing integrated programming languages; in response to the recognition of an integrated programming language in the source file by the analyzer of platform-independent programming, calling the extension to analyze the integrated programming languages; Providing data via the platform-independent programming language to the extension for analysis of the integrated programming languages; and generating the semantic information about the integrated programming language and the platform independent programming language, wherein parts of the source file that are in the integrated programming language are allocated to the source file located in the platform independent programming language via the semantic information.
In einer anderen Ausführungsform umfasst das Verfahren des Weiteren das Hinzufügen der semantischen Informationen über die integrierte Programmiersprache und die plattformunabhängige Programmiersprache zu einem für die integrierte Programmiersprache und die plattformunabhängige Programmiersprache erstellten Modell.In another embodiment, the method further includes adding the semantic information about the integrated programming language and the platform-independent programming language to a model created for the integrated programming language and the platform-independent programming language.
In einer anderen Ausführungsform umfasst das Verfahren des Weiteren die Analyse eines abstrakten Syntaxbaums eines Konstrukts für das Aufrufen der Erweiterung zur Analyse der integrierten Programmiersprachen, und Bereitstellen von Daten über die plattformunabhängige Programmiersprache an die Erweiterung zur Analyse der integrierten Programmiersprachen aufgrund der Analyse des abstrakten Syntaxbaums.In another embodiment, the method further includes analyzing an abstract syntax tree of a construct for calling the extension to analyze the integrated programming languages, and providing data about the platform-independent programming language to the extension for analysis of the integrated programming languages based on the analysis of the abstract syntax tree.
In wieder einer anderen Ausführungsform umfasst das Verfahren des Weiteren die Verwendung von Heuristik zur Zuordnung (Mapping) der Argumente der plattformunabhängigen Programmiersprache zu anderen Stellen in einem abstrakten Syntaxbaum der plattformunabhängigen Programmiersprache und Bereitstellen von Daten über die plattformunabhängige Programmiersprache an die Erweiterung zur Analyse der integrierten Programmiersprachen aufgrund der zugeordneten Argumente.In yet another embodiment, the method further includes using heuristics to map the arguments of the platform-independent programming language to other locations in an abstract platform-independent language parse tree and provide platform-independent programming language information to the integrated programming language analysis extension due to the assigned arguments.
In wiederum einer anderen Ausführungsform umfasst das Verfahren des Weiteren das Ermitteln – aufgrund der Daten über die plattformunabhängige Programmiersprache, die an die Erweiterung zur Analyse der integrierten Programmiersprachen bereitgestellt wurden – ob einer der Knoten von der plattformunabhängigen Programmiersprache einen eindeutigen Namen besitzt und die Adressierung des Knotens von der plattformunabhängigen Programmiersprache mithilfe des eindeutigen Namens.In yet another embodiment, the method further comprises determining - based on the platform independent programming language data provided to the integrated programming language analysis extension - whether one of the platform independent programming language nodes has a unique name and addressing the node of the platform-independent programming language using the unique name.
In wieder einer anderen Ausführungsform umfasst das Verfahren des Weiteren das Hinzufügen eines Knotens zu einer Grafik durch den Analysator plattformunabhängiger Programmierung, wobei der Knoten einen nichteindeutigen Namen und einen Kantensatz zwischen dem Knoten mit dem nichteindeutigen Namen und dem Knoten mit dem eindeutigen Namen hat, und Hinzufügen, durch die Erweiterung zur Analyse der integrierten Programmiersprachen, einer Kante zu dem Knoten mit dem nichteindeutigen Namen, wobei der Knoten mit dem eindeutigen Namen mithilfe der Kante von dem Knoten mit dem nichteindeutigen Namen identifiziert wird. In yet another embodiment, the method further includes adding a node to a graph by the cross-platform programming analyzer, the node having a non-unique name and an edge set between the non-unique name node and the unique name node, and adding by the integrated programming language analysis extension, an edge to the non-unique name node, where the unique name node is identified by the non-unique name node using the edge.
Eine weitere Ausführungsform der vorliegenden Offenbarung betrifft ein System umfassend einen oder mehrere Prozessoren und ein nichtflüchtiges computerlesbares Medium gekoppelt mit einem oder mehreren Prozessoren mit gespeicherten Befehlen, das Operationen durchführt, wenn es von Prozessoren ausgeführt wird, Folgendes umfassend: Analyse einer plattformunabhängigen Programmiersprache in einer Quelldatei mithilfe eines Analysators plattformunabhängiger Programmierung, worin der Analysator plattformunabhängiger Programmierung eine Erweiterung zur Analyse integrierter Programmiersprachen beinhaltet; als Reaktion auf das Erkennen einer integrierten Programmiersprache in der Quelldatei durch den Analysator plattformunabhängiger Programmierung Aufruf der Erweiterung zur Analyse der integrierten Programmiersprachen; Bereitstellen von Daten über die plattformunabhängige Programmiersprache an die Erweiterung zur Analyse der integrierten Programmiersprachen; und Generieren der semantischen Informationen über die integrierte Programmiersprache und die plattformunabhängige Programmiersprache, worin Teile der Quelldatei, die sich in der integrierten Programmiersprache befinden, Teilen der Quelldatei, die sich in der plattformunabhängigen Programmiersprache befinden über die semantischen Informationen zugewiesen werden.Another embodiment of the present disclosure relates to a system comprising one or more processors and a non-transitory computer readable medium coupled to one or more stored command processors that performs operations when executed by processors, comprising: analyzing a platform independent programming language in a source file using a platform-independent programming analyzer, where the platform-independent programming analyzer includes an enhancement to the analysis of integrated programming languages; in response to the recognition of an integrated programming language in the source file by the analyzer of platform-independent programming, calling the extension to analyze the integrated programming languages; Providing data via the platform-independent programming language to the extension for analysis of the integrated programming languages; and generating the semantic information about the integrated programming language and the platform independent programming language, wherein parts of the source file that are in the integrated programming language are allocated to the source file located in the platform independent programming language via the semantic information.
In einer anderen Ausführungsform werden der eine oder die mehreren Prozessoren des Systems dazu veranlasst, weitere Operationen durchzuführen umfassend das Hinzufügen der semantischen Informationen über die integrierte Programmiersprache und die plattformunabhängige Programmiersprache zu einem für die integrierte Programmiersprache und die plattformunabhängige Programmiersprache erstellten Modell.In another embodiment, the one or more processors of the system are caused to perform further operations, including adding the semantic information about the integrated programming language and the platform independent programming language to a model created for the integrated programming language and the platform independent programming language.
In einer anderen Ausführungsform werden der eine oder die mehreren Prozessoren des Systems dazu veranlasst, weitere Operationen durchzuführen umfassend die Analyse eines abstrakten Syntaxbaums eines Konstrukts für das Aufrufen der Erweiterung zur Analyse der integrierten Programmiersprachen, und Bereitstellen von Daten über die plattformunabhängige Programmiersprache an die Erweiterung zur Analyse der integrierten Programmiersprachen aufgrund der Analyse des abstrakten Syntaxbaums.In another embodiment, the one or more processors of the system are caused to perform further operations including analyzing an abstract syntax tree of a construct to call the extension to analyze the integrated programming languages, and providing data to the extension via the platform independent programming language Analysis of the integrated programming languages based on the analysis of the abstract syntax tree.
In wieder einer anderen Ausführungsform werden der eine oder die mehreren Prozessoren des System dazu veranlasst, weitere Operationen durchzuführen umfassend: die Verwendung von Heuristik zur Zuordnung (Mapping) der Argumente der plattformunabhängigen Programmiersprache zu anderen Stellen in einem abstrakten Syntaxbaum der plattformunabhängigen Programmiersprache und Bereitstellen von Daten über die plattformunabhängige Programmiersprache an die Erweiterung zur Analyse der integrierten Programmiersprachen aufgrund der zugeordneten Argumente.In yet another embodiment, the one or more processors of the system are caused to perform further operations including: using heuristics to map the arguments of the platform-independent programming language to other locations in an abstract platform-independent programming language parse tree and provide data via the platform-independent programming language to the extension for the analysis of the integrated programming languages on the basis of the assigned arguments.
In wiederum einer anderen Ausführungsform werden der eine oder die mehreren Prozessoren des Systems veranlasst, weitere Operationen durchzuführen das Folgende umfassend: Durchführen einer Kontrollflussanalyse für die plattformunabhängige Programmiersprache; und Bereitstellen von Daten über die plattformunabhängige Programmiersprache an die Erweiterung zur Analyse der integrierten Programmiersprachen aufgrund der Kontrollflussanalyse.In yet another embodiment, the one or more processors of the system are caused to perform further operations, comprising: performing a control flow analysis for the platform independent programming language; and providing data through the platform-independent programming language to the extension for analysis of the integrated programming languages due to the control flow analysis.
In einer anderen Ausführungsform werden der eine oder die mehreren Prozessoren des Systems veranlasst, weitere Operationen durchzuführen das Folgende umfassend: Durchführen einer dynamischen Programmanalyse für die plattformunabhängige Programmiersprache; und Bereitstellen von Daten über die plattformunabhängige Programmiersprache an die Erweiterung zur Analyse der integrierten Programmiersprachen aufgrund der dynamischen Programmanalyse.In another embodiment, the one or more processors of the system are caused to perform further operations, comprising: performing a dynamic program analysis for the platform-independent programming language; and providing data through the platform-independent programming language to the extension for analysis of the integrated programming languages due to dynamic program analysis.
In wieder einer anderen Ausführungsform werden der eine oder die mehreren Prozessoren des Systems dazu veranlasst, weitere Operationen durchzuführen Folgendes umfassend: Erkennen des Verhältnisses zwischen der plattformunabhängigen Programmiersprache und der integrierten Programmiersprache mithilfe maschinellen Lernens; und Bereitstellen von Daten über die plattformunabhängige Programmiersprache an die Erweiterung zur Analyse der integrierten Programmiersprachen aufgrund des vom maschinellen Lernen bestimmten Verhältnisses.In yet another embodiment, the one or more processors of the system are caused to perform further operations comprising: detecting the relationship between the platform-independent programming language and the integrated programming language using machine learning; and providing data via the platform-independent programming language to the extension for analysis of the integrated programming languages due to the ratio determined by machine learning.
In wiederum einer anderen Ausführungsform werden der eine oder die mehreren Prozessoren des Systems veranlasst, weitere Operationen durchzuführen das Folgende umfassend: das Ermitteln – aufgrund der Daten über die plattformunabhängige Programmiersprache, die an die Erweiterung zur Analyse der integrierten Programmiersprachen bereitgestellt wurden – ob einer der Knoten von der plattformunabhängigen Programmiersprache einen eindeutigen Namen besitzt und die Adressierung des Knotens von der plattformunabhängigen Programmiersprache mithilfe des eindeutigen Namens.In yet another embodiment, the one or more processors of the system are caused to perform further operations, comprising: determining, based on the platform independent programming language data provided to the integrated programming language analysis extension, whether one of the nodes from the platform-independent programming language has a unique name and addressing the node from the platform-independent programming language using the unique name.
In wiederum einer anderen Ausführungsform werden der eine oder die mehreren Prozessoren des Systems dazu veranlasst, weitere Operationen durchzuführen Folgendes umfassend: das Hinzufügen eines Knotens zu einer Grafik durch den Analysator plattformunabhängiger Programmierung, wobei der Knoten einen nichteindeutigen Namen und einen Kantensatz zwischen dem Knoten mit dem nichteindeutigen Namen und dem Knoten mit dem eindeutigen Namen hat, und Hinzufügen, durch die Erweiterung zur Analyse der integrierten Programmiersprachen, einer Kante zu dem Knoten mit dem nichteindeutigen Namen, wobei der Knoten mit dem eindeutigen Namen mithilfe der Kanten von dem Knoten mit dem nichteindeutigen Namen identifiziert wird.In yet another embodiment, the one or more processors of the system are caused to perform further operations, comprising: adding a node to a graph by the cross-platform programming analyzer, the node having a non-unique name and an edge set between the node and the has unambiguous name and the node with the unique name, and adding, by the integrated programming language analysis extension, an edge to the non-unique name node, the unique name node using the edges of the non-unique name node is identified.
Eine weitere Ausführungsform der vorliegenden Offenbarung betrifft ein System umfassend einen oder mehrere Prozessoren und ein nichtflüchtiges computerlesbares Medium gekoppelt mit einem oder mehreren Prozessoren mit gespeicherten Befehlen, das Operationen durchführt, wenn es von Prozessoren ausgeführt wird, Folgendes umfassend: Analyse einer plattformunabhängigen Programmiersprache in einer Quelldatei mithilfe eines Analysators plattformunabhängiger Programmierung, worin der Analysator plattformunabhängiger Programmierung eine Erweiterung zur Analyse integrierter Programmiersprachen beinhaltet; als Reaktion auf das Erkennen einer integrierten Programmiersprache in der Quelldatei durch den Analysator plattformunabhängiger Programmierung Aufruf der Erweiterung zur Analyse der integrierten Programmiersprachen; Bereitstellen von Daten über die plattformunabhängige Programmiersprache an die Erweiterung zur Analyse der integrierten Programmiersprachen; und Generieren der semantischen Informationen über die integrierte Programmiersprache und die plattformunabhängige Programmiersprache, worin Teile der Quelldatei, die sich in der integrierten Programmiersprache befinden, Teilen der Quelldatei, die sich in der plattformunabhängigen Programmiersprache befinden über die semantischen Informationen zugewiesen werden.Another embodiment of the present disclosure relates to a system comprising one or more processors and a non-transitory computer readable medium coupled to one or more stored command processors that performs operations when executed by processors, comprising: analyzing a platform independent programming language in a source file using a platform-independent programming analyzer, where the platform-independent programming analyzer includes an enhancement to the analysis of integrated programming languages; in response to the recognition of an integrated programming language in the source file by the analyzer of platform-independent programming, calling the extension to analyze the integrated programming languages; Providing data via the platform-independent programming language to the extension for analysis of the integrated programming languages; and generating the semantic information about the integrated programming language and the platform independent programming language, wherein parts of the source file that are in the integrated programming language are allocated to the source file located in the platform independent programming language via the semantic information.
In einer oder mehreren anderen Ausführungsformen können die hier beschriebenen Verfahren und Systeme optional eine oder mehrere der folgenden zusätzlichen Merkmale beinhalten: die semantischen Informationen über die integrierte Programmiersprache und die plattformunabhängige Programmiersprache sind in einem Graph zum Modell als Knoten und Kanten hinzugefügt; die Daten über die plattformunabhängige Programmiersprache, die der Erweiterung zur Analyse der integrierten Programmiersprachen bereitgestellt wurden, beinhalten Informationen, die ein Konstrukt der integrierten Programmiersprache Konstrukten von der plattformunabhängigen Programmiersprache zuweisen, die für den Aufruf der Erweiterungsinstanz zur Analyse der integrierten Programmiersprachen relevant sind; die Konstrukte von der plattformunabhängigen Programmiersprache beinhalten eine oder mehrere der Folgenden: Argumente, Instanzen, auf denen die integrierte Programmiersprache aufgerufen wird, und den Umfang der Instanzen, auf denen die integrierte Programmiersprache aufgerufen wird; die Daten über die plattformunabhängige Programmiersprache, die der Erweiterung zur Analyse der integrierten Programmiersprachen bereitgestellt werden, beruhen auf der für die plattformunabhängige Programmiersprache durchgeführte Kontrollflussanalyse; die Daten über die plattformunabhängige Programmiersprache, die der Erweiterung zur Analyse der integrierten Programmiersprachen bereitgestellt werden, beruhen auf der der dynamischen Programmanalyse, die für die plattformunabhängige Programmiersprache durchgeführt wird; die Daten über die plattformunabhängige Programmiersprache, die der Erweiterung zur Analyse der integrierten Programmiersprachen bereitgestellt werden, beruhen auf maschinellem Lernen, das zur Bestimmung des Verhältnisses zwischen der plattformunabhängigen Programmiersprache und der integrierten Programmiersprache verwendet wird; und/oder die Knoten im Graph beinhalten Knoten von der integrierten Programmiersprache und Knoten von der plattformunabhängigen Programmiersprache, und worin sich die Kanten im Graph zwischen den Knoten von der integrierten Programmiersprache und den Knoten von der plattformunabhängigen Programmiersprache kreuzen.In one or more other embodiments, the methods and systems described herein may optionally include one or more of the following additional features: the semantic information about the integrated programming language and the platform-independent programming language are added in a graph to the model as nodes and edges; the platform-independent programming language data provided to the integrated programming language analysis extension includes information that assigns an integrated programming language construct to platform-independent programming language relevant to the call of the extension instance to analyze the integrated programming languages; the platform-independent programming language constructs include one or more of the following: arguments, instances that invoke the integrated programming language, and the scope of instances that invoke the integrated programming language; the platform independent programming language data provided to the integrated programming language analysis extension is based on the control flow analysis performed for the platform independent programming language; the platform-independent programming language data provided to the integrated programming language analysis extension is based on the dynamic program analysis performed for the platform-independent programming language; the platform independent programming language data provided to the integrated programming language analysis extension is based on machine learning used to determine the relationship between the platform independent programming language and the integrated programming language; and / or the nodes in the graph include integrated programming language nodes and platform independent programming language nodes, and wherein the edges in the graph intersect between the integrated programming language nodes and the platform independent programming language nodes.
Die Ausführungsformen einiger oder aller der hier offenbarten Prozessoren und Speichersysteme können auch so konfiguriert werden, dass einige oder alle Ausführungsformen des oben offenbarten Verfahrens durchgeführt werden. Ausführungsformen von einigen oder allen oben offengelegten Verfahren, können auch als Anweisungen dargestellt werden, die auf den vorübergehenden oder nicht-vorübergehenden, prozessorlesbaren Speichermedien enthalten sind, wie optische oder magnetische Speicher oder als ein fortgepflanztes Signal, das einem Prozessor oder Datenverarbeitungsgerät über ein Kommunikationsnetzwerk wie z. B. eine Internet- oder Telefonverbindung bereitgestellt wird.The embodiments of some or all of the processors and memory systems disclosed herein may also be configured to perform any or all embodiments of the method disclosed above. Embodiments of some or all of the methods disclosed above may also be represented as instructions contained on the transient or non-transitory processor-readable storage media, such as optical or magnetic storage or as a propagated signal sent to a processor or computing device via a communications network z. B. an Internet or telephone connection is provided.
Weiterhin wird der Umfang der Anwendbarkeit des Verfahrens und der Systeme der vorliegenden Offenbarung aus der nachfolgenden detaillierten Beschreibung offenbar werden. Jedoch sollte klargestellt werden, dass die ausführliche Beschreibung und spezifischen Beispiele nur durch Figuren bei der Angabe von Ausführungsformen der Verfahren und der Systeme gegeben werden, da verschiedene Änderungen und Modifikationen innerhalb des Geistes und des Umfangs der hierin offengelegten Konzepte für diejenigen erkennbar werden, die in der Kunst der detaillierten Beschreibung erfahren sind.Furthermore, the scope of applicability of the method and systems of the present disclosure will become apparent from the following detailed description. However, it should be understood that the detailed description and specific examples are given only by the figures when indicating embodiments of the methods and systems, since various changes and modifications are within the spirit and scope of the concepts disclosed herein for those who are skilled in the art of detailed description.
KURZBESCHREIBUNG DER ZEICHNUNGENBRIEF DESCRIPTION OF THE DRAWINGS
Diese und andere Objekte, Merkmale und Eigenschaften der vorliegenden Offenbarung werden Fachleuten auf dem Gebiet aus einer Studie der folgenden detaillierten Beschreibung zu den Patentansprüchen und -zeichnungen offenbar, die alle Teil dieser Spezifikation sind. Die Zeichnungen umfassen Folgendes:These and other objects, features, and features of the present disclosure will become apparent to those skilled in the art from a study of the following detailed description of the claims and drawings, all of which are part of this specification. The drawings include the following:
Die hierin bereitgestellten Titel dienen lediglich der Übersichtlichkeit und haben nicht notwendigerweise einen Einfluss auf den Umfang oder die Bedeutung des Patentanspruchs der vorliegenden Offenbarung.The titles provided herein are for convenience only and do not necessarily affect the scope or meaning of the claim of the present disclosure.
In den Zeichnungen werden aus Gründen der Verständlichkeit und Übersichtlichkeit dieselben Bezugszeichen und Abkürzungen verwendet, um Elemente oder Handlungen mit derselben oder ähnlicher Struktur oder Funktionalität zu kennzeichnen. Die Zeichnungen werden im Detail im Verlauf der folgenden detaillierten Beschreibung beschrieben.In the drawings, for purposes of clarity and clarity, the same reference numerals and abbreviations are used to identify elements or acts having the same or similar structure or functionality. The drawings will be described in detail in the course of the following detailed description.
DETAILLIERTE BESCHREIBUNGDETAILED DESCRIPTION
Die folgende Beschreibung enthält verschiedene Beispiele und Ausführungsformen der Verfahren und Systeme der vorliegenden Offenbarung. Die folgende Beschreibung bietet spezifische Details für ein vollständiges Verständnis und ermöglicht die Beschreibung dieser Beispiele. Jemand, der in der entsprechenden Kunst erfahren ist, wird jedoch verstehen, dass ein oder mehrere hierin beschriebenen Ausführungsformen ohne viele dieser Details angewandt werden können. Ebenso wird jemand, der in der entsprechenden Kunst erfahren ist, auch verstehen, dass ein oder mehrere Ausführungsformen der vorliegenden Offenbarung andere Eigenschaften umfassen können, die nicht im Detail hierin beschrieben werden. Zudem können einige wohlbekannte Strukturen oder Funktionen nachfolgend nicht im Detail gezeigt oder beschrieben werden, um in der entsprechenden Beschreibung nicht für eine unnötige Verwirrung zu sorgen.The following description includes various examples and embodiments of the methods and systems of the present disclosure. The following description provides specific details for a complete understanding and enables the description of these examples. However, one skilled in the art will appreciate that one or more embodiments described herein may be practiced without many of these details. Similarly, one skilled in the art will also appreciate that one or more embodiments of the present disclosure may include other features that are not described in detail herein. In addition, some well-known structures or functions may not be shown or described in detail below so as not to cause unnecessary confusion in the corresponding description.
Nach vorhandenen Ansätzen werden längere Codeausschnitte vom Benutzer normalerweise in Textform nachgesehen und überprüft. Manche integrierte Entwicklungsumgebungen (oder interaktive Entwicklungsumgebungen) (IDEs) erlauben es dem Benutzer, aufgrund der Kenntnis der Codesemantik durch Code zu navigieren. Dieser Ansatz ist jedoch nicht für alle Code-Datenbanken einfach skalierbar (wie für große Code-Datenbanken), die manche Einheiten pflegen. Manche Code-Datenbanken können z. B. eine Größe erreichen, dass die Verwendung einer IDE zur Suche von Code unpraktisch (oder sogar unmöglich) ist. Ohne den hierin beschriebenen Dienst kann eine IDE ein Client des hierin beschriebenen Systems/Dienstes sein.According to existing approaches, longer code snippets are usually looked up and checked by the user in text form. Some integrated development environments (or interactive development environments) (IDEs) allow the user to navigate through code based on knowledge of code semantics. However, this approach is not easily scalable for all code databases (as for large code databases) that maintain some units. Some code databases can, for. For example, the size of an IDE used to search for code is impractical (or even impossible). Without the service described herein, an IDE may be a client of the system / service described herein.
Entsprechend sind die Verfahren und Systeme der vorliegenden Offenbarung dazu ausgelegt, diese großen Code-Datenbanken in Textform verständlich zu machen, damit sie leichter und effizienter navigierbar sind. Gemäß einer oder mehrerer der hierin beschriebenen Ausführungsformen kann der Benutzer z. B. zur Position im Code springen, an der die Methode definiert ist, wobei ein Benutzer sieht, dass eine Methode aufgerufen wird. In ähnlicher Weise können diese Informationen dem Benutzer bereitgestellt werden, ohne dass dieser die gesamte Code-Datenbank durchsuchen muss, wenn der Benutzer alle Positionen innerhalb des Codes sehen möchte, in denen eine bestimmte Methode aufgerufen wird.Accordingly, the methods and systems of the present disclosure are designed to make these large code databases understandable in textual form so that they are easier and more efficient to navigate. According to one or more of the embodiments described herein, the user may e.g. For example, to jump to the position in the code where the method is defined, where a user sees that a method is called. Similarly, this information can be provided to the user without having to search the entire code database if the user wants to see all the positions within the code in which a particular method is invoked.
Wie oben beschrieben verwenden Entwickler häufig in die Programmiersprachen integrierte plattformunabhängige Programmiersprachen für bestimmte domänenspezifischen Probleme, da plattformunabhängige Programmiersprachen (wie C++, Java usw.) manchmal nicht ausdrucksstark genug oder zu umständlich sind. Entwickler können z. B. integrierte domänenspezifische Sprachen (auch EDSL genannt) verwenden, um die oben genannten potenziellen Probleme bezüglich der plattformunabhängigen Sprachen zu vermeiden. Im Fall von EDSL wird auf die domänenspezifische Sprache als Bibliothek von der plattformunabhängigen Programmiersprache zugegriffen (in noch spezifischeren Fällen kann die plattformunabhängige Programmiersprache auch eine spezielle Syntax bereitstellen, um zur integrierten Sprache zu wechseln). Ein Beispiel dieser EDSL sind Formatzeichenketten, bei denen mithilfe spezieller Markierungen und einem Satz von Argumenten längere Zeichenketten gebildet werden, anstatt dass der Entwickler Verkettungen verwendet, um die längere Zeichenkette zu bilden. Zu den Vorteilen der Verwendung dieses Musters gehören Lesbarkeit, Leistungsoptimierung, bessere Lokalisierbarkeit und die Fähigkeit, eine statische Analyse der integrierten Sprache durchzuführen. Andere Beispiele integrierter Programmiersprachen beinhalten C# LINQ, reguläre Ausdrücke usw.As described above, developers often use platform-independent programming languages integrated into the programming languages for certain domain-specific problems because platform-independent programming languages (such as C ++, Java, etc.) are sometimes not sufficiently expressive or too cumbersome. Developers can z. B. Use built-in domain-specific languages (also known as EDSLs) to avoid the potential issues listed above regarding platform-independent languages. In the case of EDSL, the domain specific language is accessed as a library by the platform independent programming language (in more specific cases, the platform independent programming language may also provide a special syntax to switch to the integrated language). An example of these EDSLs are format strings, which use special markers and a set of arguments to form longer strings, rather than the developer using links to form the longer string. Benefits of using this pattern include readability, performance optimization, better localizability, and the ability to perform static analysis of the integrated language. Other examples of integrated programming languages include C # LINQ, regular expressions, and so on.
Viele bestehenden Analysen zum Aufrufen semantischer Informationen über große Code-Datenbanken wurden jedoch für plattformunabhängige Programmiersprachen geschrieben und nicht für integrierte Programmiersprachen. In dem Moment, in dem ein Benutzer von einer plattformunabhängigen Programmiersprache zu einer der integrierten Programmiersprachen wechselt, die häufig als Zeichenketten kodiert sind, stellen die Analysen von daher nicht mehr die gewünschten semantischen Informationen über den Code bereit.However, many existing analytics for invoking semantic information across large code databases have been written for platform-independent programming languages, not integrated programming languages. Therefore, the moment a user switches from a platform-independent programming language to one of the integrated programming languages, which are often coded as strings, the analyzes no longer provide the desired semantic information about the code.
Angesichts des vorstehenden Problems sind die hierin beschriebenen Verfahren und Systeme dazu ausgelegt, einem Benutzer (z. B. einem Entwickler) dabei zu helfen, zu erkennen, wann Code von einer plattformunabhängigen Programmiersprache mit einer integrierten Programmiersprache interagiert, dem Benutzer verständlich zu machen, wie die Grenze zwischen den Sprachen überschritten wird und den Code so darzustellen, dass der Benutzer ihn leichter verstehen kann, wenn er ihn ansieht.In light of the above problem, the methods and systems described herein are designed to help a user (e.g., a developer) recognize when code from a platform-independent programming language interacts with an integrated programming language to make the user understand how the boundary between the languages is exceeded and the code is displayed so that the user can understand it more easily when looking at it.
Insbesondere betreffen Ausführungsformen der vorliegenden Offenbarung die Verfahren und System zur Erweiterung der semantischen Informationen, die für Quellcode generiert werden und die Informationen über integrierte Programmiersprachen beinhalten, die im Quellcode enthalten sind.In particular, embodiments of the present disclosure relate to the methods and system for expanding the semantic information generated for source code and containing information about integrated programming languages contained in the source code.
IDEs beinhalten normalerweise verschiedene Funktionalitäten (z. B. zur-Definitionspringen, Verweise suchen, betreffenden Code markieren usw.), die es Entwicklern erlauben, zu navigieren und den Quellcode zu verstehen. Diese Funktionalitäten werden häufig durch Betreiben der Compilers der plattformunabhängigen Programmiersprache in einem Spezialmodus implementiert, wobei die Informationen durch die IDE vom Compiler extrahiert werden können. Da der Compiler lediglich die plattformunabhängige Programmiersprache kennt, ist dieser nicht in der Lage, einen Zusammenhang zwischen der plattformunabhängigen Programmiersprache und jeglicher im Code verwendeter integrierter Programmiersprache herzustellen. Im Fall des Zeichenkettenformatierers sind die Funktionen zur-Definitionspringen, Verweise suchen oder Code markieren zwischen der Formatierermarkierung und den Variablen von der plattformunabhängigen Programmiersprache nicht möglich.IDEs typically include a variety of functionalities (such as-to-jump, find links, mark code, etc.) that allow developers to navigate and understand the source code. These functionalities are often implemented by operating the platform-independent programming language compilers in a special mode, which information can be extracted by the compiler through the IDE. Since the compiler only knows the platform-independent programming language, it is not able to establish a connection between the platform-independent programming language and any integrated programming language used in the code. In the case of the string formatter, the functions of -definition jump, search for references, or mark code between the formatter flag and the platform-independent programming language variables are not possible.
Der folgende Fall soll als Beispiel dienen:
String what = ”demoing”;
String longString = String.format („Lange Zeichenkette für %s zum Zweck des vorliegenden Beispiels”, what);The following case should serve as an example:
String what = "demoing";
String longString = String.format ("Long string for% s for the purposes of this example", what);
Im obigen Beispiel hätte ein Entwickler die folgenden Optionen: (1) auf jump-to-def auf dem 'what'-Argument zum Aufruf der Methode String.format klicken und zur Variablendeklaration 'what' springen; (2) auf der Variablendeklaration auf dem 'what'-String nach Querverweisen und nach dem Argument zu String.format suchen; oder (3) den Mauszeiger über eine der Anwendungen/Deklarationen von 'what' bewegen und die anderen zugehörigen Positionen im Code anzeigen.In the above example, a developer would have the following options: (1) click jump-to-def on the 'what' argument to call the String.format method and jump to the variable declaration 'what'; (2) look for cross-references to the variable declaration on the 'what' string and for the argument to String.format; or (3) hover over one of the applications / declarations of what and display the other related positions in the code.
Ohne die Verfahren und Systeme der vorliegenden Offenbarung wäre der Entwickler jedoch nicht in der Lage, die Anwendung und/oder das Verhältnis von '%s' im Formatstring anzuzeigen.However, without the methods and systems of the present disclosure, the developer would not be able to display the application and / or the ratio of '% s' in the format string.
Während mit einigen bestehenden statischen Analysen wie der Cross-Site-Scripting-Analyse und der Analyse von SQL-Injection-Angriffen z. B. versucht wird, die Lücke zwischen domänenspezifischen Sprachen und plattformunabhängigen Sprachen zu füllen, fehlt diesen bestehenden Ansätzen die semantische Navigationsfunktionalität der Verfahren und Systeme der vorliegenden Offenbarung.While with some existing static analysis such as cross-site scripting analysis and analysis of SQL injection attacks z. For example, in an effort to fill the gap between domain-specific languages and platform-independent languages, these existing approaches lack the semantic navigation functionality of the methods and systems of the present disclosure.
Wie hier noch weiter beschrieben werden wird nutzen die Verfahren und Systeme der vorliegenden Offenbarung ein semantisches Modell mit Informationen, die es einem Entwickler erlauben, zwischen EDSL-Konstrukten und den Konstrukten der plattformunabhängigen Sprache zu navigieren, die die EDSL-Instanz umgibt.As will be further described herein, the methods and systems of the present disclosure utilize a semantic model with information that allows a developer to navigate between EDSL constructs and the platform-independent language constructs surrounding the EDSL instance.
Gemäß mindestens einer Ausführungsform kann der semantische Graph
Gemäß einer oder mehrerer Ausführungsformen der vorliegenden Offenbarung kann der Graph
Durch die Verfahren und Systeme der vorliegenden Offenbarung wird der Graph
Obwohl die Erstellung der Knoten
Um Daten über EDSL in der plattformunabhängigen Sprache abzurufen, für die der Analysator
Die EDSL-Erweiterung
Die EDSL-Erweiterung
Wie oben beschrieben, können die Knoten umfassend den semantischen Graphen der vorliegenden Offenbarung (z. B. die Knoten
Wenn der Analysator
Argumente: Literale, Ausdrücke, Variablen;
Instanz, auf der die EDSL-Methode aufgerufen wird; und
Umfang, in dem der Aufruf erfolgt.When the
Arguments: literals, expressions, variables;
Instance on which the EDSL method is called; and
Scope in which the call is made.
Die EDSL-Erweiterung
Gemäß einer oder mehrerer hierin beschriebener Ausführungsformen können Informationen über plattformunabhängige Programmiersprachen der EDSL-Erweiterung
Gemäß einer oder mehrerer Ausführungsformen der vorliegenden Offenbarung kann der Analysator
Gemäß einer oder mehrerer Ausführungsformen kann der Analysator
Da der Analysator
- (1)
Der Analysator 120 der plattformunabhängigen Sprache kann so konfiguriert sein, dass genügend Daten bereitgestellt werden, um den Knoten eindeutig zu benennen; oder - (2) Der EDSL-Analysator kann so konfiguriert sein, dass die Benennung des Knoten aufseiten der plattformunabhängigen Sprache weniger präzise ist (was immer noch zu nützlichen Daten führt, nur ggf. etwas weniger präzise). Angenommen, es gibt einen Knoten in der plattformunabhängigen Programmierung mit einem eindeutigen Namen, aber die Erweiterung kennt diesen eindeutigen Namen nicht. Gemäß einer oder mehrerer hierin beschriebener Ausführungsformen kann der Analysator der plattformunabhängigen Sprache (z.
B. Analysator 120 der plattformunabhängigen Sprache) einen zusätzlichen Knoten mit einem nichteindeutigen Namen senden (da der Namen nicht eindeutig ist, dann er mehrmals gesendet werden) und einen Kantensatz zwischen den Knoten mit den eindeutigen Namen und den nichteindeutigen Name, (z. B. HAS_PARTIAL_NAME/PARTIAL_NAME_OF). Die Erweiterung kann dann eine Kante zu diesem nichteindeutigen Knoten senden. Der Benutzer des Graphen kann den Satz von Knoten mit den eindeutigen Namen auflösen, indem er die Kanten vom nichteindeutigen Knoten aufsucht.
- (1) The
analyzer 120 the platform-independent language may be configured to provide enough data to uniquely identify the node; or - (2) The EDSL analyzer may be configured so that the naming of the node is less precise on the platform-independent language (which still leads to useful data, but may be somewhat less precise). For example, suppose there is a node in platform-independent programming with a unique name, but the extension does not know that unique name. According to one or more embodiments described herein, the platform independent language analyzer (eg,
analyzer 120 the platform-independent language) send an additional node with a non-unique name (because the name is not unique, then it will be sent multiple times) and an edge set between the unique name and non-unique name nodes (for example, HAS_PARTIAL_NAME / PARTIAL_NAME_OF) , The extension can then send an edge to this non-unique node. The user of the graph can resolve the set of nodes with the unique names by looking at the edges of the non-unique node.
Nachdem der Analysator
Es ist anzumerken, dass eine oder mehrere Ausführungsformen der vorliegenden Offenbarung eine Programmierschnittstelle (API) beinhalten können oder eine solche im Zusammenhang damit implementiert werden kann, die dem Benutzer erlaubt, die mithilfe der hierin beschriebenen Verfahren und Systeme erfasste Daten abzurufen. Ein Webservice kann z. B. einem Benutzer den Zugang (dabei kann es sich um direkten oder sofortigen Zugang handeln) zu den von einem oder mehreren Compiler gesammelten Daten bereitstellen, die so konfiguriert sind, dass sie die hierin beschriebenen Verfahren ausführen. Im Einklang mit einer oder mehreren Ausführungsformen kann ein Benutzer ein Tool (z. B. einen Webbrowser) verwenden, das ihm erlaubt, seinen Quellcode zusammen mit Links zu sehen, die mit einem oder mehreren Servern interagieren, auf denen die hier beschriebenen Verfahren und Systeme implementiert werden können.It should be appreciated that one or more embodiments of the present disclosure may include or be implemented in conjunction with an application programming interface (API) that allows the user to retrieve the data acquired using the methods and systems described herein. A web service can, for. For example, a user may provide access (which may be direct or immediate access) to the data collected by one or more compilers that are configured to perform the methods described herein. In accordance with one or more embodiments, a user may use a tool (eg, a web browser) that allows him to view his source code along with links interacting with one or more servers on which the methods and systems described herein can be implemented.
Es ist ebenso impliziert, dass die aufgrund der hierin beschriebenen Verfahren und Systeme erstellten Daten dem Benutzer auf vielfache Weise bereitgestellt werden kann. Im Einklang mit mindestens einer Ausführungsform können die Daten auf einem Benutzerschnittstellen-Bildschirm angezeigt werden, auf den der Benutzer zugreifen kann, wo die Daten auf diesem Bildschirm hervorgehoben werden können, um sie leichter zu erkennen und zu interpretieren. Im Einklang mit einer oder mehreren weiteren Ausführungsformen können die Daten dem Benutzer über eine Befehlszeile zur Verfügung gestellt werden, oder durch eine interaktive Entwicklungsumgebung (IDE), oder durch andere zur Verfügung stehende Methoden.It is also implied that the data created by the methods and systems described herein may be provided to the user in a variety of ways. In accordance with at least one embodiment, the data may be displayed on a user interface screen that is accessible to the user, where the data on that screen may be highlighted to make it easier to recognize and interpret. In accordance with one or more further embodiments, the data may be provided to the user via a command line, or through an interactive development environment (IDE), or by other available methods.
In Block
In Block
In Block
Gemäß mindestens einer Ausführungsform können die Daten über die plattformunabhängige Programmiersprache der Erweiterung zur Analyse der integrierten Programmiersprachen (in Block
In Block
Gemäß einer oder mehrerer Ausführungsformen der vorliegenden Offenbarung kann der Beispielprozess
Gemäß mindestens einer Ausführungsform kann z. B. können die semantischen Informationen über die integrierte Programmiersprache und die plattformunabhängige Programmiersprache (z. B. in Block
Abhängig von der gewünschten Konfiguration kann der Prozessor (
Abhängig von der gewünschten Konfiguration kann der Systemspeicher (
Programmdaten (
Das Computergerät (
Der Systemspeicher (
Das Computergerät (
In der vorhergehenden detaillierte Beschreibung wurden verschiedene Ausführungsformen der Geräte und/oder Prozesse mithilfe von Blockdiagrammen, Flussdiagrammen und/oder Beispielen dargelegt. Insoweit wie solche Blockdiagramme, Flowcharts und/oder Beispiele eine oder mehrere Funktionen und/oder Operationen beinhalten, werden sie verstanden von denen in der Wissenschaft, das jede Funktion und/oder Operation mit solchen Blockdiagrammen, Flowcharts oder Beispielen implementiert werden können, individuell und/oder kollektiv, durch ein weites Angebot von Hardware, Software, Firmware der irgendeiner virtuellen Kombination davon. In Übereinstimmung mit mindestens einer Ausführungsform können mehrere Teile des betreffenden Gegenstands, das hierin beschrieben wird, über Application Specific Integrated Circuits (ASICs), Field Programmable Gate Arrays (FPGAs), digitale Signalprozessoren (DSPs) oder andere integrierte Formate eingeführt werden. Dennoch werden die Fachkundigen feststellen, dass einige Aspekte der hier dargelegten Ausführungen, teilweise oder gänzlich, ebenso in integrierten Kreisläufen implementiert werden können, als ein oder mehrere Computerprogramme, die auf einem oder mehreren Computer ausgeführt werden, als ein oder mehrere Programme, die auf einem oder mehreren Prozessoren ausgeführt werden, als Firmware oder irgend eine Kombination davon; und dass ein Entwurf der Kreisläufe und/oder des Schreibens des Codes für die Software und/oder Firmware unter Berücksichtigung der vorliegenden Veröffentlichung eine große Leistung wäre. Außerdem werden Fachleute verstehen, dass die Mechanismen dieses hier beschriebenen Gegenstands in der Lage sind, als ein Programmprodukt in einer Vielzahl von Formen verteilt zu werden, und dass eine veranschaulichende Ausführungsform des hier beschriebenen Gegenstands unabhängig von der besonderen Art des nicht-flüchtigen signalführenden Mediums gilt, das für die tatsächliche Verteilung verwendet wird. Beispiele nichtflüchtiger Signalträgermedien sind unter anderem: beschreibbare Medien wie Floppy Disk, Harddisklaufwerk, Compact Disc (CD), Digital Video Disk (DVD), Digitalband, Computerspeicher etc.; und Übertragungsmedien wie digitale und/oder analoge Kommunikationsmedien (z. B. Glasfaserkabel, Wellenleiter, drahtgebundene Kommunikationsverbindungen, drahtlose Kommunikationsverbindungen etc.)In the foregoing detailed description, various embodiments of the devices and / or processes have been set forth using block diagrams, flowcharts, and / or examples. To the extent that such block diagrams, flowcharts, and / or examples include one or more functions and / or operations, they will be understood by those in the science that any function and / or operation can be implemented with such block diagrams, flowcharts, or examples, individually and / or. or collectively, through a wide range of hardware, software, firmware of any virtual combination thereof. In accordance with at least one embodiment, multiple portions of the subject matter described herein may be introduced via Application Specific Integrated Circuits (ASICs), Field Programmable Gate Arrays (FPGAs), Digital Signal Processors (DSPs), or other integrated formats. However, those skilled in the art will appreciate that some aspects of the embodiments set forth herein may be implemented, in whole or in part, in integrated circuits as one or more computer programs executing on one or more computers as one or more programs running on one or more computers or multiple processors, as firmware or any combination thereof; and that a design of the circuits and / or the writing of the code for the software and / or firmware taking into account the present publication would be a great achievement. In addition, those skilled in the art will understand that the mechanisms of this subject matter described herein are capable of being distributed as a program product in a variety of forms, and that an illustrative embodiment of the subject matter described herein applies regardless of the particular nature of the non-volatile signal carrying medium which is used for the actual distribution. Examples of nonvolatile signal carrier media include: writable media such as floppy disk, hard disk drive, compact disc (CD), digital video disk (DVD), digital tape, computer memory, etc .; and transmission media such as digital and / or analog communication media (eg, fiber optic cables, waveguides, wired communication links, wireless communication links, etc.)
Bezüglich der Verwendung von im Wesentlichen beliebigen Plural- und/oder Singularausdrücken hierin kann der Fachmann von Plural zu Singular und/oder von Singular zu Plural übersetzen, wie dies für den Kontext und/oder die Anwendung angebracht ist. Die verschiedenen Singular-/Plural-Permutationen können hierin ausdrücklich aus Gründen der Klarheit dargelegt.As for the use of substantially any plural and / or singular expressions herein, those skilled in the art can translate from plural to singular and / or from singular to plural as appropriate to the context and / or application. The various singular / plural permutations may be expressly set forth herein for the sake of clarity.
Es ist zudem anzumerken, dass in Situationen, in denen durch die hierin beschriebenen Systeme und Methoden personenbezogene Daten über den Benutzer gesammelt werden oder personenbezogene Daten genutzt werden, der Benutzer eine Gelegenheit enthalten kann, zu steuern, ob mit den Systemen und/oder Programmen zusammenhängende Systeme und/oder Methoden Benutzerinformationen sammeln (z. B. Informationen über die Einstellungen des Benutzers). Darüber hinaus können gewisse Daten auf eine oder mehrere Wege behandelt werden, bevor sie gespeichert oder verwendet werden, sodass Informationen zur Identifizierung von Personen entfernt werden.It should also be noted that in situations where personal information about the user is collected or personal information is used by the systems and methods described herein, the user may have an opportunity to control whether related to the systems and / or programs Systems and / or methods collect user information (for example, information about the user's settings). In addition, certain data may be treated in one or more ways before being stored or used so that information for identifying persons is removed.
Eine Identität eines Benutzers kann zum Beispiel so behandelt werden, dass keine personenbezogenen Informationen für den Benutzer bestimmt werden können. Deshalb kann der Benutzer darüber Kontrolle haben, wie die Benutzerinformationen gesammelt und durch einen Server benutzt werden.For example, a user's identity may be treated so that no personal information can be determined for the user. Therefore, the user can have control over how the user information is collected and used by a server.
Es wurden somit besondere Ausführungsformen des Gegenstandes beschrieben. Weitere Ausführungsformen gehören zum Umfang der folgenden Ansprüche. In einigen Fällen können die in den Ansprüchen beschriebenen Handlungen in einer anderen Reihenfolge ausgeführt werden und dennoch erwünschte Ergebnisse erzielen. Zusätzlich erfordern die in den beigefügten Figuren dargestellten Prozesse nicht notwendigerweise die bestimmte gezeigte Reihenfolge oder aufeinanderfolgende Reihenfolge, um erwünschte Ergebnisse zu erzielen. Bei bestimmten Implementierungen können Multitasking und eine Parallelbearbeitung vorteilhaft sein.Thus, specific embodiments of the subject matter have been described. Other embodiments are within the scope of the following claims. In some cases, the acts described in the claims may be performed in a different order and still achieve desirable results. In addition, the processes illustrated in the attached figures do not necessarily require the particular order shown or sequential order to achieve desired results. In certain implementations, multitasking and parallel processing may be beneficial.
Claims (14)
Applications Claiming Priority (2)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US14/471,777 US20160062748A1 (en) | 2014-08-28 | 2014-08-28 | Embedded domain specific languages as first class code artifacts |
US14/471,777 | 2014-08-28 |
Publications (1)
Publication Number | Publication Date |
---|---|
DE202015009280U1 true DE202015009280U1 (en) | 2017-01-19 |
Family
ID=53718146
Family Applications (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
DE202015009280.2U Active DE202015009280U1 (en) | 2014-08-28 | 2015-06-29 | Integrated domain-specific languages as first-class code artifacts |
Country Status (3)
Country | Link |
---|---|
US (1) | US20160062748A1 (en) |
DE (1) | DE202015009280U1 (en) |
WO (1) | WO2016032616A1 (en) |
Families Citing this family (4)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US10915304B1 (en) * | 2018-07-03 | 2021-02-09 | Devfactory Innovations Fz-Llc | System optimized for performing source code analysis |
US11704117B2 (en) | 2018-07-03 | 2023-07-18 | Devfactory Innovations Fz-Llc | System optimized for performing source code analysis |
US11948118B1 (en) | 2019-10-15 | 2024-04-02 | Devfactory Innovations Fz-Llc | Codebase insight generation and commit attribution, analysis, and visualization technology |
US11379200B2 (en) | 2020-01-30 | 2022-07-05 | Oracle International Corporation | Method for applying graph-specific compiler optimizations to graph analysis programs |
Family Cites Families (4)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US7058562B2 (en) * | 2001-03-03 | 2006-06-06 | Hewlett-Packard Development Company, L.P. | Apparatus and method for performing event processing in a mixed-language simulator |
US7219338B2 (en) * | 2003-03-25 | 2007-05-15 | Microsoft Corporation | Multi-language compilation |
US20070044066A1 (en) * | 2005-08-19 | 2007-02-22 | Microsoft Corporation | Embedded multi-language programming |
US8533672B2 (en) * | 2008-03-20 | 2013-09-10 | Sap Ag | Extending the functionality of a host programming language |
-
2014
- 2014-08-28 US US14/471,777 patent/US20160062748A1/en not_active Abandoned
-
2015
- 2015-06-29 DE DE202015009280.2U patent/DE202015009280U1/en active Active
- 2015-06-29 WO PCT/US2015/038242 patent/WO2016032616A1/en active Application Filing
Also Published As
Publication number | Publication date |
---|---|
US20160062748A1 (en) | 2016-03-03 |
WO2016032616A1 (en) | 2016-03-03 |
Similar Documents
Publication | Publication Date | Title |
---|---|---|
DE112016003355B4 (en) | Safe use of an application across locations | |
DE112019002235T5 (en) | INTEGRATING A DICTIONARY EDITING SYSTEM IN A TEXT MINING | |
DE202016005239U1 (en) | Graph-based queries | |
DE112012003716T5 (en) | Generate compiled code that specifies register activity | |
DE112018005616T5 (en) | BLOCK EXTRACTION OF DOCUMENT METADATA | |
EP2354968A1 (en) | Hyperadapter and method for accessing documents in a document base | |
DE102014103279A1 (en) | Pivot facets for text mining and search | |
Thiele et al. | Agent-based modelling: Tools for linking NetLogo and R | |
DE202014010926U1 (en) | A system for modeling source code with code segments that the source location is missing | |
DE112018004660T5 (en) | USE COMMENTS TO PROVIDE OPTIMIZATION | |
DE202015009280U1 (en) | Integrated domain-specific languages as first-class code artifacts | |
DE112018005725T5 (en) | DATA DEIDENTIFICATION BASED ON DETECTION OF PERMITTED CONFIGURATIONS FOR DATA DEIDENTIFICATION PROCESSES | |
Fronza et al. | Cooperation wordle using pre-attentive processing techniques | |
DE102014112983A1 (en) | Active knowledge steering based on document depth analysis | |
DE202016007893U1 (en) | Systems for removing PLT stubs from dynamically linked binaries | |
DE112011103406T5 (en) | Management of unmodified objects | |
DE112021004694T5 (en) | TRAINING A QUESTION AND ANSWER DIALOGUE SYSTEM TO AVOID ENEMY ATTACKS | |
DE102012217315A1 (en) | Use native routines instead of emulated routines in an emulated application | |
DE102021123058A1 (en) | MASKING SENSITIVE INFORMATION IN A DOCUMENT | |
DE112009001892T5 (en) | Data record based code structure | |
DE112021001743T5 (en) | VECTOR EMBEDDING MODELS FOR RELATIONAL TABLES WITH NULL OR EQUIVALENT VALUES | |
DE202016008006U1 (en) | Generation of integration tests on a small scale | |
DE112020004806T5 (en) | CLUSTER SECURITY BASED ON VIRTUAL MACHINE CONTENT | |
DE112020000873T5 (en) | AUTOMATED RESOLUTION OF OVER- AND UNDER-SPECIFICATION IN A KNOWLEDGE GRAPH | |
DE102019008598A1 (en) | Identification and visualization of associations between code generated by a model and sources that influence code generation |
Legal Events
Date | Code | Title | Description |
---|---|---|---|
R207 | Utility model specification | ||
R081 | Change of applicant/patentee |
Owner name: GOOGLE LLC (N.D.GES.D. STAATES DELAWARE), MOUN, USFree format text: FORMER OWNER: GOOGLE INC., MOUNTAIN VIEW, CALIF., US |
|
R082 | Change of representative |
Representative=s name: BETTEN & RESCH PATENT- UND RECHTSANWAELTE PART, DE |
|
R150 | Utility model maintained after payment of first maintenance fee after three years | ||
R151 | Utility model maintained after payment of second maintenance fee after six years | ||
R152 | Utility model maintained after payment of third maintenance fee after eight years |