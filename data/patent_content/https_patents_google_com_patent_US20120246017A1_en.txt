US20120246017A1 - Distributing content - Google Patents
Distributing content Download PDFInfo
- Publication number
- US20120246017A1 US20120246017A1 US13/514,820 US201013514820A US2012246017A1 US 20120246017 A1 US20120246017 A1 US 20120246017A1 US 201013514820 A US201013514820 A US 201013514820A US 2012246017 A1 US2012246017 A1 US 2012246017A1
- Authority
- US
- United States
- Prior art keywords
- script
- iframe
- web site
- content
- executing
- Prior art date
- Legal status (The legal status is an assumption and is not a legal conclusion. Google has not performed a legal analysis and makes no representation as to the accuracy of the status listed.)
- Abandoned
Links
- 238000013515 script Methods 0.000 claims abstract description 160
- 238000009877 rendering Methods 0.000 claims abstract description 31
- 238000000034 method Methods 0.000 claims description 38
- 238000004590 computer program Methods 0.000 claims description 23
- 238000012545 processing Methods 0.000 description 23
- 230000008569 process Effects 0.000 description 17
- 238000004891 communication Methods 0.000 description 12
- 238000010586 diagram Methods 0.000 description 6
- 230000000644 propagated effect Effects 0.000 description 4
- 230000003993 interaction Effects 0.000 description 3
- 230000003287 optical effect Effects 0.000 description 3
- 230000004044 response Effects 0.000 description 3
- 238000013459 approach Methods 0.000 description 2
- 230000000903 blocking effect Effects 0.000 description 2
- 230000006870 function Effects 0.000 description 2
- 238000010295 mobile communication Methods 0.000 description 2
- 238000000926 separation method Methods 0.000 description 2
- 239000000758 substrate Substances 0.000 description 2
- 230000005540 biological transmission Effects 0.000 description 1
- 230000003111 delayed effect Effects 0.000 description 1
- 230000000694 effects Effects 0.000 description 1
- 239000004973 liquid crystal related substance Substances 0.000 description 1
- 238000012552 review Methods 0.000 description 1
- 239000004065 semiconductor Substances 0.000 description 1
- 230000001953 sensory effect Effects 0.000 description 1
- 238000012360 testing method Methods 0.000 description 1
- 238000012546 transfer Methods 0.000 description 1
- 230000000007 visual effect Effects 0.000 description 1
Images
Classifications
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06Q—INFORMATION AND COMMUNICATION TECHNOLOGY [ICT] SPECIALLY ADAPTED FOR ADMINISTRATIVE, COMMERCIAL, FINANCIAL, MANAGERIAL OR SUPERVISORY PURPOSES; SYSTEMS OR METHODS SPECIALLY ADAPTED FOR ADMINISTRATIVE, COMMERCIAL, FINANCIAL, MANAGERIAL OR SUPERVISORY PURPOSES, NOT OTHERWISE PROVIDED FOR
- G06Q30/00—Commerce
- G06Q30/02—Marketing; Price estimation or determination; Fundraising
Definitions
- This disclosure relates to distributing content.
- content providers want to distribute content to selected individuals for review. For example, advertisers want to distribute their advertisements where the advertisements will be effective in communicating information to receptive recipients, and at times when the advertisements will lead to desired activity, such as a purchase of the advertiser's goods or services.
- Content can be distributed electronically, such as by using a network of computers and other types of electronic devices.
- rendering a web page includes executing a first operation to create an empty iframe on a web page being rendered.
- the iframe is created without content.
- a second operation is executed to place content in the iframe.
- the content includes a script tag to download and execute a script from a web site.
- the second operation is different from the first operation.
- the script from the web site is downloaded and executed.
- An additional operation is executed to render the web page concurrently with executing at least one operation in the script downloaded from the web site.
- the additional operation is an operation other than the first operation and the second operation.
- the web site is a second web site that is different from a first web site that supplied the instructions to render the web page.
- the rendered web page includes content from the first web site and content from the second web site.
- Implementations may include one or more of the following features.
- the first operation may include an operation to create an iframe without a source attribute.
- the first operation may include an operation to create an iframe having a document object that is blank.
- the second operation may include a JavaScript document.write( )method.
- the script tag may identify an external source, and the JavaScript document.write( )method may inject the script tag into the iframe.
- the script downloaded from the second web site may include a command to close a document object in the iframe.
- the script downloaded from the second web site may include a calls to a JavaScript document.close( )method.
- the web page may include content from a publisher site, and the iframe on the web page may display an advertisement on the rendered page.
- the operations may include downloading a publisher script from the first web site, and executing the publisher script to download a first advertisement script from the second web site.
- Executing the first advertisement script may include executing the first operation to create the empty iframe.
- Executing the second operation may include placing, in the iframe, a script tag identifying a second advertisement script from the second web site.
- Implementations of the techniques discussed above may include a method or process, a system or apparatus, or computer software embedded on a computer-accessible medium.
- the details of one or more implementations are set forth in the accompanying drawings and the description below. Other features and advantages will become apparent from the description, the drawings, and the claims.
- FIG. 1 is a block diagram of an example system for distributing content.
- FIG. 2 is a block diagram of an example web browser user interface.
- FIG. 3 is a flow chart of an example process for rendering a web page including content from multiple web sites.
- FIG. 4 is a block diagram of an example system for distributing content.
- FIG. 5 is block diagram of an example computer system that can be used to distribute content.
- an example system 100 for distributing content includes a user device 111 to which content is distributed, and a publisher system 120 of a publisher that maintains (e.g., manages, owns) one or more websites 122 .
- the system 100 also includes an alternative content provider system 130 (e.g., a system of an advertiser) that provides alternative content (e.g., advertisements) for distribution to users.
- the system 100 further includes an alternative content server 150 (e.g., an advertising server) for selecting alternative content distribution for available spaces included in publishers' content, or other requested content.
- the example system 100 also includes a network 160 such as a local area network (LAN), wide area network (WAN), the Internet, or a combination thereof.
- the network 160 connects websites 122 , user devices 111 , the alternative content provider system 130 , and the alternative content server 150 .
- the example system 100 can include many thousands of user devices 111 , alternative content provider systems 130 , and websites 122 .
- a website 122 is one or more resources 124 associated with a domain name and hosted by one or more servers.
- An example website 122 is a collection of web pages formatted in hypertext markup language (HTML) that can contain text, images, multimedia content, and programming elements, e.g., scripts.
- the publisher system 120 includes a rendering subsystem 126 for generating code (e.g., HTML, scripts) for a web page.
- a resource 124 is any data that can be provided by the website 122 over the network 160 and that is associated with a resource address.
- Resources 124 include HTML pages, word processing documents, and portable document format (PDF) documents, images, video, and feed sources, to name only a few.
- PDF portable document format
- the resources 124 can include content, e.g., words, phrases, images and sounds that may include embedded information (such as meta-information in hyperlinks) and/or embedded instructions (such as JavaScript scripts).
- the user device 111 is an electronic device that is under control of a user and is capable of requesting and receiving resources 124 over the network 160 .
- Example user devices 111 include personal computers, mobile communication devices, and other devices that can send and receive data over the network 160 .
- a user device 111 can request resources 124 from a website 122 .
- data representing the resource 124 can be rendered by the rendering subsystem 126 and provided to the user device 111 for presentation by the user device 111 , such as in a web browser application 113 .
- Web browser applications 113 can include, for example, Internet ExplorerTM offered by Microsoft Inc., Google ChromeTM offered by Google Inc., OperaTM offered by Opera Software ASA, SafariTM offered by Apple Inc., and FirefoxTM offered by Mozilla Corporation.
- a web browser application also may be referred to as a web browser.
- the web browser 113 can facilitate the sending and receiving of data over the network 160 and is operable to output a display to the user and/or to receive inputs from the user, such as keystrokes, pointer clicks, voice commands, and/or another inputs.
- the web browser 113 in the example of FIG. 1 is displaying an example web page 114 rendered from HTML code generated by the rendering subsystem 126 .
- the example web page 114 includes a first area 115 for display of content 115 a - 115 c from a first source, such as content provided by the publisher system 120 .
- the example web page 114 also includes a second area 117 for display of alternative content 117 a - 117 c from a second source, such as advertisements selected by the alternative content server 150 from among available advertisements provided by one or more alternative content provider systems 130 .
- the rendering subsystem 126 can generate HTML code which includes the use of one or more “iframes,” where each iframe represents an area of the example web page 114 used to display content from a content source.
- a first iframe can be used to display content 115 a from the publisher system 120 and a second iframe can be used to display content 117 a from the alternative content provider system 130 .
- the first and second iframes may be referred to as children of the example web page 114 , and the example web page 114 may be referred to as the parent of the first and second iframes.
- Other iframes can be used to display other content, such as separate iframes for each of the content 115 b - 115 c and the alternative content 117 b - 117 c.
- An iframe can be an external iframe or a “friendly” iframe.
- An external iframe has a coded source attribute referring to a resource on an external server.
- a friendly iframe is from the same domain as its parent and may not necessarily have a source attribute specified.
- the web page 114 may include content that is not included in an iframe. In some implementations, most content of a web page is not included in an iframe.
- the rendering subsystem 126 can generate script code (e.g., JavaScript) to be executed by the web browser 113 .
- script code can be associated with an iframe (e.g., a script tag can be included inside of an iframe tag) or script code can be associated with the example web page 114 but not specifically associated with a particular iframe (e.g., a script tag can be included in the HTML code for the example web page 114 without being inside of any iframe tags).
- Script code can be internal (e.g., included in the HTML code generated by the rendering subsystem 126 ) or external (e.g., a script tag can have a coded source attribute which refers to a code file located on an external server, such as on the alternative content server 150 or on another server).
- the example web page 114 is represented by the web browser 113 as a set of document objects.
- a document object representing the contents of the example web page 114 as a whole may be referred to as a parent document object, and each iframe in the example web page 114 may be referred to as a child document object.
- the web browser 113 can create seven document objects (e.g., a parent document object and six child document objects, one for each of six iframes used to display the content 115 a - 115 c and the alternative content 117 a - 117 c ). If an iframe is a friendly iframe with no source attribute specified, then the document object for the friendly iframe is initially empty (e.g., having no content).
- a document object can be accessed by script code.
- a script can include a “document.write” instruction which appends text to a document object.
- a “document.write” instruction can be interpreted by the web browser 113 to refer to either a parent document object or a child document object, depending on the location of the instruction within the HTML code.
- a “document.write” instruction which is not located inside of code for an iframe refers to the parent document object
- a “document.write” instruction which is located inside of a script which is located within code for an iframe refers to the child document object associated with the iframe.
- a document object reference can be fully qualified to include the name of the containing iframe object.
- the web browser 113 can have a cross-domain restriction where script code inside of an external iframe tag is restricted from communicating with the parent document object if the domain name specified in the source attribute of the external iframe refers to a different domain than the domain of the server from which the example web page 114 was received.
- a cross-domain restriction can be helpful in providing some security against malicious code.
- a cross-domain restriction can be challenging in some circumstances by hindering inter-object communication.
- a friendly iframe e.g., an iframe which does not refer to an external server
- some web pages may alter the cross-domain-communications rules by setting the “document.domain” property, and in some browsers, this interferes with the ability of a friendly iframe to interact with its parent window. This can cause problems if the “document.domain” property is not set at the time the document.write instruction is loaded into the friendly iframe, but does get set later on (e.g., by unrelated JavaScript code executing in the parent window).
- the external script restores communication by altering the “document.domain” property inside the friendly iframe, when necessary. For example, possible values for the “document.domain” property can be set in turn, in a trial-and-error sort of way, to find out which one permits communication with the parent window.
- the web browser 113 can be single threaded such that an operation to download or execute a script can be a blocking operation. For example, when the web browser 113 is processing the HTML code for the example web page 114 and encounters a script tag, the web browser 113 may be blocked from doing other processing while processing the script. As another example, the web browser 113 can be blocked while downloading (as well as parsing and executing) an external script.
- An approach can be used to enable the web browser 113 to perform execution of rendering of content within an iframe while the web browser 113 continues to render other content of the example web page 114 .
- the rendering subsystem 126 can generate HTML code to create an empty (e.g., friendly) iframe on the example web page 114 .
- the rendering system 126 can generate script code to place content into the iframe.
- the rendering system 126 can generate a script tag which includes a “document.write” instruction which injects other script code into the child document object associated with the iframe.
- the injected script code can refer to script code on an external server (e.g., the alternative content server 150 ).
- the web browser 113 can process a child document object independently of processing the parent document object. Therefore, the web browser 113 can process the script code injected into the child document object associated with the iframe while continuing to process the parent document associated with the example web page 113 . Since the iframe is coded as a friendly iframe, the script code injected into the iframe can communicate with the parent document object (e.g., to ensure that alternative content displayed in the iframe is not a duplicate of other alternative content displayed on the example web page 114 ).
- the web browser 113 can process script code injected into a first iframe (e.g., an iframe corresponding to alternative content 117 a ) while processing script code injected into a second iframe (e.g., an iframe corresponding to alternative content 117 b ).
- a first iframe e.g., an iframe corresponding to alternative content 117 a
- a second iframe e.g., an iframe corresponding to alternative content 117 b
- Script code injected into an iframe can request alternative content from the alternative content server 150 .
- a selection engine 153 of the alternative content server 150 selects an appropriate number of pieces of content for distribution to the user device 111 from among candidate pieces of content referenced in one or more indices, such as indices 155 and 157 .
- the index 157 is a keyword-based index which is used to select pieces of alternative content based on keywords included in the request
- the index 155 is a content-based index which is used to select pieces of alternative content based on the content 115 a - 115 c requested from the publisher system 120 , as indicated in the request for alternative content.
- One or more of the components of the system 100 can include one or more computer systems, such as the computer system 500 of FIG. 5 .
- the computer system 500 includes a processor 510 , memory modules 530 , a storage device 520 , and an input-output module 540 connected by a system bus 560 .
- the input-output module 540 is operable with one or more input and/or output devices 550 , including a communication device for operable connection with a network 160 and with the other components of the system 100 .
- the one or more computer systems 500 can perform the various functions of the components of the system 100 by executing computer-readable instructions, such as computer software stored on a computer-readable storage device.
- FIG. 2 is a block diagram of an example web browser 200 .
- the web browser 200 is displaying an example web page 202 .
- the example web page 202 includes publisher content 204 .
- the publisher content 204 can be provided, for example, by the publisher system 120 (as referenced above with respect to FIG. 1 ).
- the publisher content 204 can include text, one or more graphics 206 , and other multimedia content (e.g., the publisher content 204 can include one or more resources 124 as described above with reference to FIG. 1 ).
- the web page 202 can also include one or more links 208 to other content.
- the links 208 can link to content from the same publisher that provided the content 204 or to other content.
- the web page 202 can also include one or more areas 210 - 220 for displaying alternative content, such as advertisements.
- the areas 210 - 220 can be used to display text advertisements, or advertisements that include one or more graphics (e.g., graphic 222 ) or other resources.
- the rendering subsystem 126 can generate HTML and script code so that when the HTML and script code is executed by the web browser 200 , rendering of alternative content in the areas 210 - 220 can be performed in parallel with rendering of the publisher content 204 .
- Parallel rendering of the content 204 along with rendering of alternative content displayed in one or more areas 210 - 220 can be accomplished by using the approach described above with reference to FIG. 1 of creating an empty iframe for each of the areas 210 - 220 and by injecting script code for each iframe into a child document object associated with the iframe.
- the injected script code can refer to a script located on an external server.
- the web browser 200 can process each child document object independently (and independently of processing a parent document object associated with the web page 202 ), thereby enabling parallel processing of script code injected into each document object and enabling parallel rendering of the content displayed in the areas 210 - 220 and of the publisher content 204 .
- FIG. 3 is a flow chart of an example process 300 for rendering a web page including content from multiple web sites.
- the process 300 can be performed, for example, by the example system 100 (discussed previously with respect to FIG. 1 ).
- the process 300 includes creating an empty iframe on a web page being rendered ( 302 ).
- the rendering subsystem 126 can generate HTML code for the example web page 114 , where the HTML code includes an iframe tag which does not include a source attribute.
- the web browser 113 can, when loading the example web page 114 , execute the iframe tag and create an associated document object, which can be initially blank (e.g., having no content).
- the rendering subsystem 126 can generate HTML for the web page 114 which is similar to the example numbered code shown below in Table 1.
- the empty iframe is created when line one of the script shown in Table 1 is executed by the web browser 113 .
- the empty iframe is named, but has no source attribute.
- a script tag is placed in the iframe to download and execute a script from an external web site ( 304 ).
- the rendering subsystem 126 can generate a first script tag which includes JavaScript code for a first script.
- the first script can open a document object associated with the iframe and write a second script tag for a second script into the document object associated with the iframe.
- the second script tag can have a source attribute which refers to an external script file located on an external server.
- the external script file can include code to render content (e.g., to render content for an advertisement).
- the first script begins on line two and ends on line nine.
- the second script is injected into the child document object associated with the iframe using the document.write instruction which begins on line four.
- the script on line seven is an example of the second script and refers to a script on a www.example.com external web site.
- a third script tag (the script tag on line six) is described in more detail below.
- a web page may attempt to download the same script in two places on the page at the same time, such as where there are two advertisements being shown on the page, which may cause a problem in rendering the page.
- a simple serialization queue can be added. For example, before placing the script tag inside the friendly iframe (described in paragraph [0036]), a check is performed to determine whether another script-write-into-friendly-iframe is in progress. If so, the document.write instruction of the second iframe is delayed until the previous one has finished.
- the script is downloaded from the external web site and executed, based on the script tag ( 306 ).
- the web browser 113 can execute the second script tag and can refer to the source attribute specified on the second script tag to determine the location of an associated script on an external web site.
- the web browser 113 can download the script from the external web site and execute the script commands included in the downloaded script.
- the web browser 113 can download a some_script.js file from the server www.example.com and can execute the script statements included in the some_script.js file.
- the web page is rendered by executing other operations while downloading and executing the script from the external web site ( 308 ).
- the web browser 113 can download and execute a script from an external web site that is associated with an iframe while continuing to render the remainder of the web page 114 . Because the script tag for the external script is injected into a child document object associated with the iframe, the web browser 113 can process the child document object independently of processing the parent document object associated with the web page 113 and independently of processing other child document objects associated with other iframes included in the web page 113 .
- a script injected into a child document object associated with the iframe can be loaded and executed in a non-blocking manner, and can be executed while other tasks are performed, such as rendering other portions of the web page 114 .
- the web browser 113 is briefly blocked while performing the document.open instruction on line three and the document.write instruction beginning on line four.
- the web browser 113 is not blocked while the some_script.js file is downloaded from the www.example.com server and is not blocked while the statements included in the some_script.js file are executed.
- the web browser 113 does not enforce a cross-domain restriction, which enables the script code injected into the iframe to communicate with a parent document object (e.g., to ensure that alternative content displayed in the iframe is not a duplicate of other alternative content displayed in other iframes included in the web page 114 ).
- additional code can be needed to close a child document object associated with an iframe beyond simply using a document.close instruction.
- closing a child document object can result in that type of web browser stopping further execution of downloaded script code associated with the child document object.
- calling document.close after a brief (e.g., one millisecond) time delay may be necessary in some types of web browsers to work around a bug in the web browser.
- the downloaded script code can include, as a last line of code, an instruction to call document.close after a brief time delay.
- the call to document.close can be conditional based on whether the script is called as a result of being used with an iframe. For example and in reference to Table 1, a test can be performed to determine whether a flag variable such as “running_in_dedicated_iframe” has been set (e.g., as set by an example third script included on line seven of Table 1).
- FIG. 4 illustrates an example system 400 for distributing content.
- the system 400 includes a publisher system 402 , an advertisement management system 404 , and a web browser 406 .
- the publisher system 402 includes a web page 408 which includes a publisher script to render content from advertisement management system 404 .
- the web page 408 can be coded so that in response to a request by the web browser 406 to load the web page 408 , publisher content from the publisher system 402 can be displayed in the web browser 406 , along with advertising content from the advertisement management system 404 .
- the web browser 406 downloads the web page 408 which results in the execution of the publisher script.
- the publisher script includes an instruction (e.g., an embedded script tag) to download and execute a first advertisement script 410 from the advertisement management system 404 .
- the web browser 406 downloads and executes the first advertisement script 410 .
- the downloading, parsing, and executing of the first advertisement script 410 blocks the web browser 406 from performing other actions until the first advertisement script 410 completes.
- the first advertisement script 410 includes instructions to create an empty iframe (e.g., a friendly iframe with no specified source attribute).
- the first advertisement script 410 also includes an instruction to write text into a child document object associated with the iframe.
- the text written into the iframe's document object includes a script tag which refers to a second advertisement script 412 .
- the web browser 406 processes the document object associated with the iframe and downloads and executes the second advertisement script 412 from the advertisement management system 404 .
- processing a child document object associated with an iframe does not block the web browser 406 from completing other tasks, such as rendering other portions of the web page 408 . Therefore, the web browser 406 can execute the second advertisement script 412 while performing other work.
- the second advertisement script 412 includes instructions to inject content (e.g., advertising content) into the iframe.
- the second advertisement script 412 also includes an instruction to close the child document object associated with the iframe.
- FIG. 5 is block diagram of an example computer system 500 that can be used to distribute content.
- the system 500 includes a processor 510 , memory 520 , a storage device 530 , and an input/output device 540 .
- Each of the components 510 , 520 , 530 , and 540 can be interconnected, for example, using a system bus 550 .
- the processor 510 is capable of processing instructions for execution within the system 500 .
- the processor 510 is a single-threaded processor.
- the processor 510 is a multi-threaded processor.
- the processor 510 is capable of processing instructions stored in the memory 520 or on the storage device 530 .
- the memory 520 stores information within the system 500 .
- the memory 520 is a computer-readable medium.
- the memory 520 is a volatile memory unit.
- the memory 520 is a non-volatile memory unit.
- the storage device 530 is capable of providing mass storage for the system 500 .
- the storage device 530 is a computer-readable medium.
- the storage device 530 can include, for example, a hard disk device, an optical disk device, or some other large capacity storage device.
- the input/output device 540 provides input/output operations for the system 500 .
- the input/output device 540 can include one or more of a network interface device, e.g., an Ethernet card, a serial communication device, e.g., an RS-232 port, and/or a wireless interface device, e.g., an 802.11 card.
- the input/output device can include driver devices configured to receive input data and send output data to other input/output devices, e.g., keyboard, printer and display devices 560 .
- Other implementations, however, can also be used, such as mobile computing devices, mobile communication devices, set-top box television client devices, etc.
- the rendering subsystem 126 can be realized by instructions that upon execution cause one or more processing devices to carry out the processes and functions described above. Such instructions can comprise, for example, interpreted instructions, such as script instructions, e.g., JavaScript or ECMAScript instructions, or executable code, or other instructions stored in a computer readable medium.
- the rendering subsystem 126 and/or alternative content server 150 can be distributively implemented over a network, such as a server farm, or can be implemented in a single computer device.
- implementations of the subject matter and the functional operations described in this specification can be implemented in other types of digital electronic circuitry, or in computer software, firmware, or hardware, including the structures disclosed in this specification and their structural equivalents, or in combinations of one or more of them.
- Implementations of the subject matter described in this specification can be implemented as one or more computer program products, i.e., one or more modules of computer program instructions encoded on a tangible program carrier for execution by, or to control the operation of, a processing system.
- the computer readable medium can be a machine readable storage device, a machine readable storage substrate, a memory device, a composition of matter effecting a machine readable propagated signal, or a combination of one or more of them.
- Implementations of the subject matter and the operations described in this specification can be implemented in digital electronic circuitry, or in computer software, firmware, or hardware, including the structures disclosed in this specification and their structural equivalents, or in combinations of one or more of them.
- Implementations of the subject matter described in this specification can be implemented as one or more computer programs, i.e., one or more modules of computer program instructions, encoded on a computer storage medium for execution by, or to control the operation of, data processing apparatus.
- the program instructions can be encoded on an artificially generated propagated signal, e.g., a machine-generated electrical, optical, or electromagnetic signal, that is generated to encode information for transmission to suitable receiver apparatus for execution by a data processing apparatus.
- a computer storage medium can be, or be included in, a computer-readable storage device, a computer-readable storage substrate, a random or serial access memory array or device, or a combination of one or more of them.
- a computer storage medium is not a propagated signal, a computer storage medium can be a source or destination of computer program instructions encoded in an artificially-generated propagated signal.
- the computer storage medium can also be, or be included in, one or more separate physical components or media (e.g., multiple CDs, disks, or other storage devices).
- the operations described in this specification can be implemented as operations performed by a data processing apparatus on data stored on one or more computer-readable storage devices or received from other sources.
- the term “data processing apparatus” encompasses all kinds of apparatus, devices, and machines for processing data, including by way of example a programmable processor, a computer, a system on a chip, or multiple ones, or combinations, of the foregoing
- the apparatus can include special purpose logic circuitry, e.g., an FPGA (field programmable gate array) or an ASIC (application-specific integrated circuit).
- the apparatus can also include, in addition to hardware, code that creates an execution environment for the computer program in question, e.g., code that constitutes processor firmware, a protocol stack, a database management system, an operating system, a cross-platform runtime environment, a virtual machine, or a combination of one or more of them.
- the apparatus and execution environment can realize various different computing model infrastructures, such as web services, distributed computing and grid computing infrastructures.
- a computer program (also known as a program, software, software application, script, or code) can be written in any form of programming language, including compiled or interpreted languages, declarative or procedural languages, and it can be deployed in any form, including as a stand-alone program or as a module, component, subroutine, object, or other unit suitable for use in a computing environment.
- a computer program may, but need not, correspond to a file in a file system.
- a program can be stored in a portion of a file that holds other programs or data (e.g., one or more scripts stored in a markup language document), in a single file dedicated to the program in question, or in multiple coordinated files (e.g., files that store one or more modules, sub-programs, or portions of code).
- a computer program can be deployed to be executed on one computer or on multiple computers that are located at one site or distributed across multiple sites and interconnected by a communication network.
- the processes and logic flows described in this specification can be performed by one or more programmable processors executing one or more computer programs to perform actions by operating on input data and generating output.
- the processes and logic flows can also be performed by, and apparatus can also be implemented as, special purpose logic circuitry, e.g., an FPGA (field programmable gate array) or an ASIC (application-specific integrated circuit).
- processors suitable for the execution of a computer program include, by way of example, both general and special purpose microprocessors, and any one or more processors of any kind of digital computer.
- a processor will receive instructions and data from a read-only memory or a random access memory or both.
- the essential elements of a computer are a processor for performing actions in accordance with instructions and one or more memory devices for storing instructions and data.
- a computer will also include, or be operatively coupled to receive data from or transfer data to, or both, one or more mass storage devices for storing data, e.g., magnetic, magneto-optical disks, or optical disks.
- mass storage devices for storing data, e.g., magnetic, magneto-optical disks, or optical disks.
- a computer need not have such devices.
- a computer can be embedded in another device, e.g., a mobile telephone, a personal digital assistant (PDA), a mobile audio or video player, a game console, a Global Positioning System (GPS) receiver, or a portable storage device (e.g., a universal serial bus (USB) flash drive), to name just a few.
- Devices suitable for storing computer program instructions and data include all forms of non-volatile memory, media and memory devices, including by way of example semiconductor memory devices, e.g., EPROM, EEPROM, and flash memory devices; magnetic disks, e.g., internal hard disks or removable disks; magneto-optical disks; and CD-ROM and DVD-ROM disks.
- the processor and the memory can be supplemented by, or incorporated in, special purpose logic circuitry.
- implementations of the subject matter described in this specification can be implemented on a computer having a display device, e.g., a CRT (cathode ray tube) or LCD (liquid crystal display) monitor, for displaying information to the user and a keyboard and a pointing device, e.g., a mouse or a trackball, by which the user can provide input to the computer.
- a display device e.g., a CRT (cathode ray tube) or LCD (liquid crystal display) monitor
- keyboard and a pointing device e.g., a mouse or a trackball
- Other kinds of devices can be used to provide for interaction with a user as well; for example, feedback provided to the user can be any form of sensory feedback, e.g., visual feedback, auditory feedback, or tactile feedback; and input from the user can be received in any form, including acoustic, speech, or tactile input.
- a computer can interact with a user by sending documents to and receiving documents from a device that is used
- Implementations of the subject matter described in this specification can be implemented in a computing system that includes a back-end component, e.g., as a data server, or that includes a middleware component, e.g., an application server, or that includes a front-end component, e.g., a client computer having a graphical user interface or a Web browser through which a user can interact with an implementation of the subject matter described in this specification, or any combination of one or more such back-end, middleware, or front-end components.
- the components of the system can be interconnected by any form or medium of digital data communication, e.g., a communication network.
- Examples of communication networks include a local area network (“LAN”) and a wide area network (“WAN”), an inter-network (e.g., the Internet), and peer-to-peer networks (e.g., ad hoc peer-to-peer networks).
- LAN local area network
- WAN wide area network
- inter-network e.g., the Internet
- peer-to-peer networks e.g., ad hoc peer-to-peer networks.
- the computing system can include clients and servers.
- a client and server are generally remote from each other and typically interact through a communication network. The relationship of client and server arises by virtue of computer programs running on the respective computers and having a client-server relationship to each other.
- a server transmits data (e.g., an HTML page) to a client device (e.g., for purposes of displaying data to and receiving user input from a user interacting with the client device).
- client device e.g., for purposes of displaying data to and receiving user input from a user interacting with the client device.
- Data generated at the client device e.g., a result of the user interaction
Abstract
Rendering a web page that includes content from multiple web sites includes executing a first operation to create an empty iframe on a web page being rendered. The iframe is created without content. A second operation is executed to place content in the iframe. The content includes a script tag to download and execute a script from a web site. Based on the script tag, the script from the web site is downloaded and executed. An additional operation is executed to render the web page concurrently with executing at least one operation in the script downloaded from the web site. The web site is a second web site that is different from a first web site that supplied the instructions to render the web page. The rendered web page includes content from the first web site and content from the second web site.
Description
- This application claims priority to U.S. Application No. 61/290,346, filed on Dec. 28, 2009, entitled DISTRIBUTING CONTENT, the disclosure of which is incorporated herein by reference.
- This disclosure relates to distributing content.
- In many different environments, content providers want to distribute content to selected individuals for review. For example, advertisers want to distribute their advertisements where the advertisements will be effective in communicating information to receptive recipients, and at times when the advertisements will lead to desired activity, such as a purchase of the advertiser's goods or services. Content can be distributed electronically, such as by using a network of computers and other types of electronic devices.
- In one general aspect, rendering a web page includes executing a first operation to create an empty iframe on a web page being rendered. The iframe is created without content. A second operation is executed to place content in the iframe. The content includes a script tag to download and execute a script from a web site. The second operation is different from the first operation. Based on the script tag, the script from the web site is downloaded and executed. An additional operation is executed to render the web page concurrently with executing at least one operation in the script downloaded from the web site. The additional operation is an operation other than the first operation and the second operation. The web site is a second web site that is different from a first web site that supplied the instructions to render the web page. The rendered web page includes content from the first web site and content from the second web site.
- Implementations may include one or more of the following features. For example, the first operation may include an operation to create an iframe without a source attribute. The first operation may include an operation to create an iframe having a document object that is blank. The second operation may include a JavaScript document.write( )method.
- The script tag may identify an external source, and the JavaScript document.write( )method may inject the script tag into the iframe. The script downloaded from the second web site may include a command to close a document object in the iframe. The script downloaded from the second web site may include a calls to a JavaScript document.close( )method. The web page may include content from a publisher site, and the iframe on the web page may display an advertisement on the rendered page.
- The operations may include downloading a publisher script from the first web site, and executing the publisher script to download a first advertisement script from the second web site. Executing the first advertisement script may include executing the first operation to create the empty iframe. Executing the second operation may include placing, in the iframe, a script tag identifying a second advertisement script from the second web site.
- Implementations of the techniques discussed above may include a method or process, a system or apparatus, or computer software embedded on a computer-accessible medium. The details of one or more implementations are set forth in the accompanying drawings and the description below. Other features and advantages will become apparent from the description, the drawings, and the claims.
-
FIG. 1 is a block diagram of an example system for distributing content. -
FIG. 2 is a block diagram of an example web browser user interface. -
FIG. 3 is a flow chart of an example process for rendering a web page including content from multiple web sites. -
FIG. 4 is a block diagram of an example system for distributing content. -
FIG. 5 is block diagram of an example computer system that can be used to distribute content. - Like reference numbers and designations in the various drawings indicate like elements.
- With reference to
FIG. 1 , anexample system 100 for distributing content includes auser device 111 to which content is distributed, and apublisher system 120 of a publisher that maintains (e.g., manages, owns) one ormore websites 122. Thesystem 100 also includes an alternative content provider system 130 (e.g., a system of an advertiser) that provides alternative content (e.g., advertisements) for distribution to users. Thesystem 100 further includes an alternative content server 150 (e.g., an advertising server) for selecting alternative content distribution for available spaces included in publishers' content, or other requested content. - The
example system 100 also includes anetwork 160 such as a local area network (LAN), wide area network (WAN), the Internet, or a combination thereof. Thenetwork 160 connectswebsites 122,user devices 111, the alternativecontent provider system 130, and thealternative content server 150. Theexample system 100 can include many thousands ofuser devices 111, alternativecontent provider systems 130, andwebsites 122. - A
website 122 is one ormore resources 124 associated with a domain name and hosted by one or more servers. Anexample website 122 is a collection of web pages formatted in hypertext markup language (HTML) that can contain text, images, multimedia content, and programming elements, e.g., scripts. Thepublisher system 120 includes arendering subsystem 126 for generating code (e.g., HTML, scripts) for a web page. - A
resource 124 is any data that can be provided by thewebsite 122 over thenetwork 160 and that is associated with a resource address.Resources 124 include HTML pages, word processing documents, and portable document format (PDF) documents, images, video, and feed sources, to name only a few. Theresources 124 can include content, e.g., words, phrases, images and sounds that may include embedded information (such as meta-information in hyperlinks) and/or embedded instructions (such as JavaScript scripts). - The
user device 111 is an electronic device that is under control of a user and is capable of requesting and receivingresources 124 over thenetwork 160.Example user devices 111 include personal computers, mobile communication devices, and other devices that can send and receive data over thenetwork 160. Auser device 111 can requestresources 124 from awebsite 122. In turn, data representing theresource 124 can be rendered by therendering subsystem 126 and provided to theuser device 111 for presentation by theuser device 111, such as in aweb browser application 113.Web browser applications 113 can include, for example, Internet Explorer™ offered by Microsoft Inc., Google Chrome™ offered by Google Inc., Opera™ offered by Opera Software ASA, Safari™ offered by Apple Inc., and Firefox™ offered by Mozilla Corporation. A web browser application also may be referred to as a web browser. - The
web browser 113 can facilitate the sending and receiving of data over thenetwork 160 and is operable to output a display to the user and/or to receive inputs from the user, such as keystrokes, pointer clicks, voice commands, and/or another inputs. Theweb browser 113 in the example ofFIG. 1 is displaying anexample web page 114 rendered from HTML code generated by therendering subsystem 126. Theexample web page 114 includes afirst area 115 for display ofcontent 115 a-115 c from a first source, such as content provided by thepublisher system 120. Theexample web page 114 also includes asecond area 117 for display ofalternative content 117 a-117 c from a second source, such as advertisements selected by thealternative content server 150 from among available advertisements provided by one or more alternativecontent provider systems 130. - To have content from multiple sources displayed in the
example web page 114, therendering subsystem 126 can generate HTML code which includes the use of one or more “iframes,” where each iframe represents an area of theexample web page 114 used to display content from a content source. For example, a first iframe can be used to displaycontent 115 a from thepublisher system 120 and a second iframe can be used to displaycontent 117 a from the alternativecontent provider system 130. The first and second iframes may be referred to as children of theexample web page 114, and theexample web page 114 may be referred to as the parent of the first and second iframes. Other iframes can be used to display other content, such as separate iframes for each of thecontent 115 b-115 c and thealternative content 117 b-117 c. - An iframe can be an external iframe or a “friendly” iframe. An external iframe has a coded source attribute referring to a resource on an external server. A friendly iframe is from the same domain as its parent and may not necessarily have a source attribute specified. The
web page 114 may include content that is not included in an iframe. In some implementations, most content of a web page is not included in an iframe. - The
rendering subsystem 126 can generate script code (e.g., JavaScript) to be executed by theweb browser 113. Script code can be associated with an iframe (e.g., a script tag can be included inside of an iframe tag) or script code can be associated with theexample web page 114 but not specifically associated with a particular iframe (e.g., a script tag can be included in the HTML code for theexample web page 114 without being inside of any iframe tags). Script code can be internal (e.g., included in the HTML code generated by the rendering subsystem 126) or external (e.g., a script tag can have a coded source attribute which refers to a code file located on an external server, such as on thealternative content server 150 or on another server). - The
example web page 114 is represented by theweb browser 113 as a set of document objects. A document object representing the contents of theexample web page 114 as a whole may be referred to as a parent document object, and each iframe in theexample web page 114 may be referred to as a child document object. For example, to process theexample web page 114, theweb browser 113 can create seven document objects (e.g., a parent document object and six child document objects, one for each of six iframes used to display thecontent 115 a-115 c and thealternative content 117 a-117 c). If an iframe is a friendly iframe with no source attribute specified, then the document object for the friendly iframe is initially empty (e.g., having no content). - A document object can be accessed by script code. For example, a script can include a “document.write” instruction which appends text to a document object. A “document.write” instruction can be interpreted by the
web browser 113 to refer to either a parent document object or a child document object, depending on the location of the instruction within the HTML code. For example, a “document.write” instruction which is not located inside of code for an iframe refers to the parent document object, whereas a “document.write” instruction which is located inside of a script which is located within code for an iframe refers to the child document object associated with the iframe. As another example, a document object reference can be fully qualified to include the name of the containing iframe object. - The
web browser 113 can have a cross-domain restriction where script code inside of an external iframe tag is restricted from communicating with the parent document object if the domain name specified in the source attribute of the external iframe refers to a different domain than the domain of the server from which theexample web page 114 was received. A cross-domain restriction can be helpful in providing some security against malicious code. A cross-domain restriction can be challenging in some circumstances by hindering inter-object communication. In an advertising environment, it may be desirable for script code within an iframe to be able to communicate with the parent document object. For example, such communication may be desirable to ensure that an advertisement to be displayed in the iframe is not a duplicate of another advertisement already displayed in another iframe of theexample web page 114. Therefore, to avoid a cross-domain restriction, a friendly iframe (e.g., an iframe which does not refer to an external server) can be used. Additionally, some web pages may alter the cross-domain-communications rules by setting the “document.domain” property, and in some browsers, this interferes with the ability of a friendly iframe to interact with its parent window. This can cause problems if the “document.domain” property is not set at the time the document.write instruction is loaded into the friendly iframe, but does get set later on (e.g., by unrelated JavaScript code executing in the parent window). In some implementations, the external script restores communication by altering the “document.domain” property inside the friendly iframe, when necessary. For example, possible values for the “document.domain” property can be set in turn, in a trial-and-error sort of way, to find out which one permits communication with the parent window. - Another limitation of the
web browser 113 is that theweb browser 113 can be single threaded such that an operation to download or execute a script can be a blocking operation. For example, when theweb browser 113 is processing the HTML code for theexample web page 114 and encounters a script tag, theweb browser 113 may be blocked from doing other processing while processing the script. As another example, theweb browser 113 can be blocked while downloading (as well as parsing and executing) an external script. - An approach can be used to enable the
web browser 113 to perform execution of rendering of content within an iframe while theweb browser 113 continues to render other content of theexample web page 114. For example, therendering subsystem 126 can generate HTML code to create an empty (e.g., friendly) iframe on theexample web page 114. Therendering system 126 can generate script code to place content into the iframe. For example, therendering system 126 can generate a script tag which includes a “document.write” instruction which injects other script code into the child document object associated with the iframe. The injected script code can refer to script code on an external server (e.g., the alternative content server 150). - Importantly, the
web browser 113 can process a child document object independently of processing the parent document object. Therefore, theweb browser 113 can process the script code injected into the child document object associated with the iframe while continuing to process the parent document associated with theexample web page 113. Since the iframe is coded as a friendly iframe, the script code injected into the iframe can communicate with the parent document object (e.g., to ensure that alternative content displayed in the iframe is not a duplicate of other alternative content displayed on the example web page 114). Theweb browser 113 can process script code injected into a first iframe (e.g., an iframe corresponding toalternative content 117 a) while processing script code injected into a second iframe (e.g., an iframe corresponding toalternative content 117 b). - Script code injected into an iframe can request alternative content from the
alternative content server 150. In response to receiving the request for alternative content, aselection engine 153 of thealternative content server 150 selects an appropriate number of pieces of content for distribution to theuser device 111 from among candidate pieces of content referenced in one or more indices, such asindices index 157 is a keyword-based index which is used to select pieces of alternative content based on keywords included in the request, and theindex 155 is a content-based index which is used to select pieces of alternative content based on thecontent 115 a-115 c requested from thepublisher system 120, as indicated in the request for alternative content. - One or more of the components of the
system 100, such as theuser device 111, thepublisher system 120, the alternativecontent provider system 130, and/or thealternative content server 150, can include one or more computer systems, such as thecomputer system 500 ofFIG. 5 . Thecomputer system 500 includes aprocessor 510,memory modules 530, astorage device 520, and an input-output module 540 connected by asystem bus 560. The input-output module 540 is operable with one or more input and/oroutput devices 550, including a communication device for operable connection with anetwork 160 and with the other components of thesystem 100. The one ormore computer systems 500 can perform the various functions of the components of thesystem 100 by executing computer-readable instructions, such as computer software stored on a computer-readable storage device. -
FIG. 2 is a block diagram of an example web browser 200. The web browser 200 is displaying anexample web page 202. Theexample web page 202 includespublisher content 204. Thepublisher content 204 can be provided, for example, by the publisher system 120 (as referenced above with respect toFIG. 1 ). Thepublisher content 204 can include text, one ormore graphics 206, and other multimedia content (e.g., thepublisher content 204 can include one ormore resources 124 as described above with reference toFIG. 1 ). Theweb page 202 can also include one ormore links 208 to other content. Thelinks 208 can link to content from the same publisher that provided thecontent 204 or to other content. - The
web page 202 can also include one or more areas 210-220 for displaying alternative content, such as advertisements. The areas 210-220 can be used to display text advertisements, or advertisements that include one or more graphics (e.g., graphic 222) or other resources. As mentioned above with respect toFIG. 1 , therendering subsystem 126 can generate HTML and script code so that when the HTML and script code is executed by the web browser 200, rendering of alternative content in the areas 210-220 can be performed in parallel with rendering of thepublisher content 204. - Parallel rendering of the
content 204 along with rendering of alternative content displayed in one or more areas 210-220 can be accomplished by using the approach described above with reference toFIG. 1 of creating an empty iframe for each of the areas 210-220 and by injecting script code for each iframe into a child document object associated with the iframe. The injected script code can refer to a script located on an external server. The web browser 200 can process each child document object independently (and independently of processing a parent document object associated with the web page 202), thereby enabling parallel processing of script code injected into each document object and enabling parallel rendering of the content displayed in the areas 210-220 and of thepublisher content 204. -
FIG. 3 is a flow chart of anexample process 300 for rendering a web page including content from multiple web sites. Theprocess 300 can be performed, for example, by the example system 100 (discussed previously with respect toFIG. 1 ). Theprocess 300 includes creating an empty iframe on a web page being rendered (302). For example and with reference toFIG. 1 , therendering subsystem 126 can generate HTML code for theexample web page 114, where the HTML code includes an iframe tag which does not include a source attribute. Theweb browser 113 can, when loading theexample web page 114, execute the iframe tag and create an associated document object, which can be initially blank (e.g., having no content). For example, therendering subsystem 126 can generate HTML for theweb page 114 which is similar to the example numbered code shown below in Table 1. The empty iframe is created when line one of the script shown in Table 1 is executed by theweb browser 113. The empty iframe is named, but has no source attribute. -
TABLE 1 1 <iframe name=”ads iframe”></iframe> 2 <script> 3 window.frames[″ads_iframe″].document.open( ); 4 window.frames[″ads_iframe″].document.write( 5 [′<!DOCTYPE html> <html><body>′, 6 ′<script> running_in_dedicated_iframe = true; <\/script>′, 7 ′<script src=″http://www.example.com/some_script.js″><\/script>′, 8 ′<\/body><\/html>′].join(′\n′)) 9 </script> - A script tag is placed in the iframe to download and execute a script from an external web site (304). For example and in reference to
FIG. 1 , therendering subsystem 126 can generate a first script tag which includes JavaScript code for a first script. The first script can open a document object associated with the iframe and write a second script tag for a second script into the document object associated with the iframe. The second script tag can have a source attribute which refers to an external script file located on an external server. The external script file can include code to render content (e.g., to render content for an advertisement). - For example and in reference to Table 1, the first script begins on line two and ends on line nine. The second script is injected into the child document object associated with the iframe using the document.write instruction which begins on line four. The script on line seven is an example of the second script and refers to a script on a www.example.com external web site. A third script tag (the script tag on line six) is described in more detail below.
- In some implementations, a web page may attempt to download the same script in two places on the page at the same time, such as where there are two advertisements being shown on the page, which may cause a problem in rendering the page. To avoid such a problem, a simple serialization queue can be added. For example, before placing the script tag inside the friendly iframe (described in paragraph [0036]), a check is performed to determine whether another script-write-into-friendly-iframe is in progress. If so, the document.write instruction of the second iframe is delayed until the previous one has finished.
- The script is downloaded from the external web site and executed, based on the script tag (306). For example and in reference to
FIG. 1 , theweb browser 113 can execute the second script tag and can refer to the source attribute specified on the second script tag to determine the location of an associated script on an external web site. Theweb browser 113 can download the script from the external web site and execute the script commands included in the downloaded script. For example and in reference to line seven of Table 1, theweb browser 113 can download a some_script.js file from the server www.example.com and can execute the script statements included in the some_script.js file. - The web page is rendered by executing other operations while downloading and executing the script from the external web site (308). For example and in reference to
FIG. 1 , theweb browser 113 can download and execute a script from an external web site that is associated with an iframe while continuing to render the remainder of theweb page 114. Because the script tag for the external script is injected into a child document object associated with the iframe, theweb browser 113 can process the child document object independently of processing the parent document object associated with theweb page 113 and independently of processing other child document objects associated with other iframes included in theweb page 113. Stated differently, a script injected into a child document object associated with the iframe can be loaded and executed in a non-blocking manner, and can be executed while other tasks are performed, such as rendering other portions of theweb page 114. Specifically, in reference to Table 1, theweb browser 113 is briefly blocked while performing the document.open instruction on line three and the document.write instruction beginning on line four. Theweb browser 113 is not blocked while the some_script.js file is downloaded from the www.example.com server and is not blocked while the statements included in the some_script.js file are executed. - Additionally, because the
rendering subsystem 126 can generate iframe tags without source attributes, theweb browser 113 does not enforce a cross-domain restriction, which enables the script code injected into the iframe to communicate with a parent document object (e.g., to ensure that alternative content displayed in the iframe is not a duplicate of other alternative content displayed in other iframes included in the web page 114). - For some types of web browsers, additional code can be needed to close a child document object associated with an iframe beyond simply using a document.close instruction. For example, in some versions of some web browsers, closing a child document object can result in that type of web browser stopping further execution of downloaded script code associated with the child document object. In some implementations, calling document.close after a brief (e.g., one millisecond) time delay may be necessary in some types of web browsers to work around a bug in the web browser. In some implementations, the downloaded script code can include, as a last line of code, an instruction to call document.close after a brief time delay. In some implementations, the call to document.close can be conditional based on whether the script is called as a result of being used with an iframe. For example and in reference to Table 1, a test can be performed to determine whether a flag variable such as “running_in_dedicated_iframe” has been set (e.g., as set by an example third script included on line seven of Table 1).
-
FIG. 4 illustrates anexample system 400 for distributing content. Thesystem 400 includes a publisher system 402, an advertisement management system 404, and a web browser 406. The publisher system 402 includes aweb page 408 which includes a publisher script to render content from advertisement management system 404. For example, theweb page 408 can be coded so that in response to a request by the web browser 406 to load theweb page 408, publisher content from the publisher system 402 can be displayed in the web browser 406, along with advertising content from the advertisement management system 404. - As indicated by step one, the web browser 406 downloads the
web page 408 which results in the execution of the publisher script. The publisher script includes an instruction (e.g., an embedded script tag) to download and execute afirst advertisement script 410 from the advertisement management system 404. As indicated by step two, the web browser 406 downloads and executes thefirst advertisement script 410. The downloading, parsing, and executing of thefirst advertisement script 410 blocks the web browser 406 from performing other actions until thefirst advertisement script 410 completes. Thefirst advertisement script 410 includes instructions to create an empty iframe (e.g., a friendly iframe with no specified source attribute). Thefirst advertisement script 410 also includes an instruction to write text into a child document object associated with the iframe. The text written into the iframe's document object includes a script tag which refers to asecond advertisement script 412. - As indicated by step three, the web browser 406 processes the document object associated with the iframe and downloads and executes the
second advertisement script 412 from the advertisement management system 404. Importantly, as described above with respect toFIG. 1 , processing a child document object associated with an iframe does not block the web browser 406 from completing other tasks, such as rendering other portions of theweb page 408. Therefore, the web browser 406 can execute thesecond advertisement script 412 while performing other work. Thesecond advertisement script 412 includes instructions to inject content (e.g., advertising content) into the iframe. Thesecond advertisement script 412 also includes an instruction to close the child document object associated with the iframe. -
FIG. 5 is block diagram of anexample computer system 500 that can be used to distribute content. Thesystem 500 includes aprocessor 510,memory 520, astorage device 530, and an input/output device 540. Each of thecomponents system bus 550. Theprocessor 510 is capable of processing instructions for execution within thesystem 500. In one implementation, theprocessor 510 is a single-threaded processor. In another implementation, theprocessor 510 is a multi-threaded processor. Theprocessor 510 is capable of processing instructions stored in thememory 520 or on thestorage device 530. - The
memory 520 stores information within thesystem 500. In one implementation, thememory 520 is a computer-readable medium. In one implementation, thememory 520 is a volatile memory unit. In another implementation, thememory 520 is a non-volatile memory unit. - The
storage device 530 is capable of providing mass storage for thesystem 500. In one implementation, thestorage device 530 is a computer-readable medium. In various different implementations, thestorage device 530 can include, for example, a hard disk device, an optical disk device, or some other large capacity storage device. - The input/
output device 540 provides input/output operations for thesystem 500. In one implementation, the input/output device 540 can include one or more of a network interface device, e.g., an Ethernet card, a serial communication device, e.g., an RS-232 port, and/or a wireless interface device, e.g., an 802.11 card. In another implementation, the input/output device can include driver devices configured to receive input data and send output data to other input/output devices, e.g., keyboard, printer anddisplay devices 560. Other implementations, however, can also be used, such as mobile computing devices, mobile communication devices, set-top box television client devices, etc. - The
rendering subsystem 126 can be realized by instructions that upon execution cause one or more processing devices to carry out the processes and functions described above. Such instructions can comprise, for example, interpreted instructions, such as script instructions, e.g., JavaScript or ECMAScript instructions, or executable code, or other instructions stored in a computer readable medium. Therendering subsystem 126 and/oralternative content server 150 can be distributively implemented over a network, such as a server farm, or can be implemented in a single computer device. - Although an example processing system has been described with reference to
FIG. 5 , implementations of the subject matter and the functional operations described in this specification can be implemented in other types of digital electronic circuitry, or in computer software, firmware, or hardware, including the structures disclosed in this specification and their structural equivalents, or in combinations of one or more of them. Implementations of the subject matter described in this specification can be implemented as one or more computer program products, i.e., one or more modules of computer program instructions encoded on a tangible program carrier for execution by, or to control the operation of, a processing system. The computer readable medium can be a machine readable storage device, a machine readable storage substrate, a memory device, a composition of matter effecting a machine readable propagated signal, or a combination of one or more of them. - Implementations of the subject matter and the operations described in this specification can be implemented in digital electronic circuitry, or in computer software, firmware, or hardware, including the structures disclosed in this specification and their structural equivalents, or in combinations of one or more of them. Implementations of the subject matter described in this specification can be implemented as one or more computer programs, i.e., one or more modules of computer program instructions, encoded on a computer storage medium for execution by, or to control the operation of, data processing apparatus. Alternatively or in addition, the program instructions can be encoded on an artificially generated propagated signal, e.g., a machine-generated electrical, optical, or electromagnetic signal, that is generated to encode information for transmission to suitable receiver apparatus for execution by a data processing apparatus. A computer storage medium can be, or be included in, a computer-readable storage device, a computer-readable storage substrate, a random or serial access memory array or device, or a combination of one or more of them. Moreover, while a computer storage medium is not a propagated signal, a computer storage medium can be a source or destination of computer program instructions encoded in an artificially-generated propagated signal. The computer storage medium can also be, or be included in, one or more separate physical components or media (e.g., multiple CDs, disks, or other storage devices).
- The operations described in this specification can be implemented as operations performed by a data processing apparatus on data stored on one or more computer-readable storage devices or received from other sources.
- The term “data processing apparatus” encompasses all kinds of apparatus, devices, and machines for processing data, including by way of example a programmable processor, a computer, a system on a chip, or multiple ones, or combinations, of the foregoing The apparatus can include special purpose logic circuitry, e.g., an FPGA (field programmable gate array) or an ASIC (application-specific integrated circuit). The apparatus can also include, in addition to hardware, code that creates an execution environment for the computer program in question, e.g., code that constitutes processor firmware, a protocol stack, a database management system, an operating system, a cross-platform runtime environment, a virtual machine, or a combination of one or more of them. The apparatus and execution environment can realize various different computing model infrastructures, such as web services, distributed computing and grid computing infrastructures.
- A computer program (also known as a program, software, software application, script, or code) can be written in any form of programming language, including compiled or interpreted languages, declarative or procedural languages, and it can be deployed in any form, including as a stand-alone program or as a module, component, subroutine, object, or other unit suitable for use in a computing environment. A computer program may, but need not, correspond to a file in a file system. A program can be stored in a portion of a file that holds other programs or data (e.g., one or more scripts stored in a markup language document), in a single file dedicated to the program in question, or in multiple coordinated files (e.g., files that store one or more modules, sub-programs, or portions of code). A computer program can be deployed to be executed on one computer or on multiple computers that are located at one site or distributed across multiple sites and interconnected by a communication network.
- The processes and logic flows described in this specification can be performed by one or more programmable processors executing one or more computer programs to perform actions by operating on input data and generating output. The processes and logic flows can also be performed by, and apparatus can also be implemented as, special purpose logic circuitry, e.g., an FPGA (field programmable gate array) or an ASIC (application-specific integrated circuit).
- Processors suitable for the execution of a computer program include, by way of example, both general and special purpose microprocessors, and any one or more processors of any kind of digital computer. Generally, a processor will receive instructions and data from a read-only memory or a random access memory or both. The essential elements of a computer are a processor for performing actions in accordance with instructions and one or more memory devices for storing instructions and data. Generally, a computer will also include, or be operatively coupled to receive data from or transfer data to, or both, one or more mass storage devices for storing data, e.g., magnetic, magneto-optical disks, or optical disks. However, a computer need not have such devices. Moreover, a computer can be embedded in another device, e.g., a mobile telephone, a personal digital assistant (PDA), a mobile audio or video player, a game console, a Global Positioning System (GPS) receiver, or a portable storage device (e.g., a universal serial bus (USB) flash drive), to name just a few. Devices suitable for storing computer program instructions and data include all forms of non-volatile memory, media and memory devices, including by way of example semiconductor memory devices, e.g., EPROM, EEPROM, and flash memory devices; magnetic disks, e.g., internal hard disks or removable disks; magneto-optical disks; and CD-ROM and DVD-ROM disks. The processor and the memory can be supplemented by, or incorporated in, special purpose logic circuitry.
- To provide for interaction with a user, implementations of the subject matter described in this specification can be implemented on a computer having a display device, e.g., a CRT (cathode ray tube) or LCD (liquid crystal display) monitor, for displaying information to the user and a keyboard and a pointing device, e.g., a mouse or a trackball, by which the user can provide input to the computer. Other kinds of devices can be used to provide for interaction with a user as well; for example, feedback provided to the user can be any form of sensory feedback, e.g., visual feedback, auditory feedback, or tactile feedback; and input from the user can be received in any form, including acoustic, speech, or tactile input. In addition, a computer can interact with a user by sending documents to and receiving documents from a device that is used by the user; for example, by sending web pages to a web browser on a user's client device in response to requests received from the web browser.
- Implementations of the subject matter described in this specification can be implemented in a computing system that includes a back-end component, e.g., as a data server, or that includes a middleware component, e.g., an application server, or that includes a front-end component, e.g., a client computer having a graphical user interface or a Web browser through which a user can interact with an implementation of the subject matter described in this specification, or any combination of one or more such back-end, middleware, or front-end components. The components of the system can be interconnected by any form or medium of digital data communication, e.g., a communication network. Examples of communication networks include a local area network (“LAN”) and a wide area network (“WAN”), an inter-network (e.g., the Internet), and peer-to-peer networks (e.g., ad hoc peer-to-peer networks).
- The computing system can include clients and servers. A client and server are generally remote from each other and typically interact through a communication network. The relationship of client and server arises by virtue of computer programs running on the respective computers and having a client-server relationship to each other. In some implementations, a server transmits data (e.g., an HTML page) to a client device (e.g., for purposes of displaying data to and receiving user input from a user interacting with the client device). Data generated at the client device (e.g., a result of the user interaction) can be received from the client device at the server.
- While this specification contains many specific implementation details, these should not be construed as limitations on the scope of the invention or of what may be claimed, but rather as descriptions of features specific to particular implementations of the invention. Certain features that are described in this specification in the context of separate implementations can also be implemented in combination in a single implementation. Conversely, various features that are described in the context of a single implementation can also be implemented in multiple implementations separately or in any suitable subcombination. Moreover, although features may be described above as acting in certain combinations and even initially claimed as such, one or more features from a claimed combination can in some cases be excised from the combination, and the claimed combination may be directed to a subcombination or variation of a subcombination.
- Similarly, while operations are depicted in the drawings in a particular order, this should not be understood as requiring that such operations be performed in the particular order shown or in sequential order, or that all illustrated operations be performed, to achieve desirable results. In certain circumstances, multitasking and parallel processing may be advantageous. Moreover, the separation of various system components in the implementations described above should not be understood as requiring such separation in all implementations, and it should be understood that the described program components and systems can generally be integrated together in a single software product or packaged into multiple software products.
- Thus, particular implementations of the invention have been described. Other implementations are within the scope of the following claims. In some cases, the actions recited in the claims can be performed in a different order and still achieve desirable results. In addition, the processes depicted in the accompanying figures do not necessarily require the particular order shown, or sequential order, to achieve desirable results. In certain implementations, multitasking and parallel processing may be advantageous.
Claims (20)
1. A computer program tangibly embodied in a computer-readable medium, the computer program having instructions that, when executed by at least one processor, cause the at least one processor to render a web page including content from multiple web sites by performing operations comprising:
executing a first operation to create an empty iframe on a web page being rendered, the iframe being created without content;
executing a second operation to place content in the iframe, wherein:
the content comprises a script tag to download and execute a script from a web site, and
the second operation is different from the first operation;
based on the script tag, downloading and executing the script from the web site;
executing an additional operation to render the web page concurrently with executing at least one operation in the script downloaded from the web site,
wherein:
the additional operation is an operation other than the first operation and the second operation,
the web site is a second web site that is different from a first web site that supplied the instructions to render the web page, and
the rendered web page includes content from the first web site and content from the second web site.
2. The computer program of claim 1 wherein the first operation comprises an operation to create an iframe without a source attribute.
3. The computer program of claim 1 wherein the first operation comprises an operation to create an iframe having a document object that is blank.
4. The computer program of claim 1 wherein the second operation comprises a JavaScript document.write( )method.
5. The computer program of claim 4 wherein:
the script tag identifies an external source, and
the JavaScript document.write( )method injects the script tag into the iframe.
6. The computer program of claim 1 wherein the script downloaded from the second web site includes a command to close a document object in the iframe.
7. The computer program of claim 6 wherein the script downloaded from the second web site includes calls a JavaScript document.close( )method.
8. The computer program of claim 6 wherein the web page comprises a web page including content from a publisher site and the iframe on the web page displays an advertisement on the rendered page.
9. The computer program of claim 1 wherein:
the operations include:
downloading a publisher script from the first web site, and
executing the publisher script to download a first advertisement script from the second web site, and
executing the first advertisement script comprises executing the first operation to create the empty iframe and executing the second operation to place, in the iframe, a script tag identifying a second advertisement script from the second web site.
10. A computer-implemented method for rendering a web page including content from multiple web sites, the method comprising:
executing a first operation to create an empty iframe on a web page being rendered, the iframe being created without content;
executing a second operation to place content in the iframe, wherein:
the content comprises a script tag to download and execute a script from a web site, and
the second operation is different from the first operation;
based on the script tag, downloading and executing the script from the web site;
executing an additional operation to render the web page concurrently with executing at least one operation in the script downloaded from the web site,
wherein:
the additional operation is an operation other than the first operation and the second operation,
the web site is a second web site that is different from a first web site that supplied the instructions to render the web page, and
the rendered web page includes content from the first web site and content from the second web site.
11. The method of claim 10 wherein the first operation comprises an operation to create an iframe without a source attribute.
12. The method of claim 10 wherein the first operation comprises an operation to create an iframe having a document object that is blank.
13. The method of claim 10 wherein the second operation comprises a JavaScript document.write( )method.
14. The method of claim 13 wherein:
the script tag identifies an external source, and
the JavaScript document.write( )method injects the script tag into the iframe.
15. The method of claim 10 wherein the script downloaded from the second web site includes a command to close a document object in the iframe.
16. The method of claim 15 wherein the script downloaded from the second web site includes calls a JavaScript document.close( )method.
17. The method of claim 15 wherein the web page comprises a web page including content from a publisher site and the iframe on the web page displays an advertisement on the rendered page.
18. The method of claim 10 wherein:
the operations include:
downloading a publisher script from the first web site, and
executing the publisher script to download a first advertisement script from the second web site, and
executing the first advertisement script comprises executing the first operation to create the empty iframe and executing the second operation to place, in the iframe, a script tag identifying a second advertisement script from the second web site.
19. A computer system for rendering a web page including content from multiple web sites, the system comprising at least one processor and at least one input/output device, the at least one processor configured to perform operations comprising:
executing a first operation to create an empty iframe on a web page being rendered, the iframe being created without content;
executing a second operation to place content in the iframe, wherein:
the content comprises a script tag to download and execute a script from a web site, and
the second operation is different from the first operation;
based on the script tag, downloading and executing the script from the web site;
executing an additional operation to render the web page concurrently with executing at least one operation in the script downloaded from the web site,
wherein:
the additional operation is an operation other than the first operation and the second operation,
the web site is a second web site that is different from a first web site that supplied the instructions to render the web page, and
the rendered web page includes content from the first web site and content from the second web site.
20. The system of claim 19 wherein the first operation comprises an operation to create an iframe without a source attribute.
Priority Applications (1)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US13/514,820 US20120246017A1 (en) | 2009-12-28 | 2010-11-24 | Distributing content |
Applications Claiming Priority (3)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US29034609P | 2009-12-28 | 2009-12-28 | |
PCT/US2010/058074 WO2011090550A1 (en) | 2009-12-28 | 2010-11-24 | Distributing content |
US13/514,820 US20120246017A1 (en) | 2009-12-28 | 2010-11-24 | Distributing content |
Publications (1)
Publication Number | Publication Date |
---|---|
US20120246017A1 true US20120246017A1 (en) | 2012-09-27 |
Family
ID=44307116
Family Applications (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
US13/514,820 Abandoned US20120246017A1 (en) | 2009-12-28 | 2010-11-24 | Distributing content |
Country Status (2)
Country | Link |
---|---|
US (1) | US20120246017A1 (en) |
WO (1) | WO2011090550A1 (en) |
Cited By (20)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20110225495A1 (en) * | 2010-03-12 | 2011-09-15 | Salesforce.Com, Inc. | Service Cloud Console |
US20140053057A1 (en) * | 2012-08-16 | 2014-02-20 | Qualcomm Incorporated | Speculative resource prefetching via sandboxed execution |
US20140297430A1 (en) * | 2013-10-31 | 2014-10-02 | Reach Labs, Inc. | System and method for facilitating the distribution of electronically published promotions in a linked and embedded database |
US8930971B1 (en) * | 2013-09-13 | 2015-01-06 | Linkedin Corporation | Embedded-advertising content presented in document context |
US20150220492A1 (en) * | 2013-02-22 | 2015-08-06 | Swoop Inc. | Systems and methods for integrating dynamic content into electronic media |
US9215096B2 (en) | 2011-08-26 | 2015-12-15 | Salesforce.Com, Inc. | Computer implemented methods and apparatus for providing communication between network domains in a service cloud |
WO2016185021A1 (en) * | 2015-05-21 | 2016-11-24 | Outfit7 Limited | Interfacing with servers having different apis to obtain advertisement data |
WO2017160377A1 (en) * | 2016-03-16 | 2017-09-21 | Google Inc. | Remote rendering of locally displayed content |
US9830304B1 (en) * | 2013-02-22 | 2017-11-28 | Swoop Inc. | Systems and methods for integrating dynamic content into electronic media |
US9898446B2 (en) | 2012-08-16 | 2018-02-20 | Qualcomm Incorporated | Processing a webpage by predicting the usage of document resources |
US20190179865A1 (en) * | 2017-12-13 | 2019-06-13 | Nativo, Inc. | Server side web based ad stitching and user specific optimization |
US20190236115A1 (en) * | 2018-02-01 | 2019-08-01 | Google Llc | Digital component backdrop rendering |
US10423674B1 (en) * | 2015-12-30 | 2019-09-24 | Google Llc | Serving multiple content items responsive to a single request |
TWI692232B (en) * | 2018-12-17 | 2020-04-21 | 宏碁股份有限公司 | Method and device for loading web page based on iframe |
US11164221B2 (en) * | 2012-12-18 | 2021-11-02 | Nativo, Inc. | Native online ad creation |
US11238216B2 (en) | 2017-12-13 | 2022-02-01 | Nativo, Inc. | Making real-time content selection decisions based on multivariate testing |
US11275813B2 (en) | 2017-12-13 | 2022-03-15 | Nativo, Inc. | Optimizing third party tag insertion |
US11611629B2 (en) * | 2020-05-13 | 2023-03-21 | Microsoft Technology Licensing, Llc | Inline frame monitoring |
US11615161B2 (en) * | 2010-04-07 | 2023-03-28 | Liveperson, Inc. | System and method for dynamically enabling customized web content and applications |
US11868591B2 (en) | 2012-04-26 | 2024-01-09 | Liveperson, Inc. | Dynamic user interface customization |
Families Citing this family (1)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
CN110781135B (en) * | 2019-09-20 | 2023-05-30 | 北京三快在线科技有限公司 | Distributed search system, index distribution method, and storage medium |
Citations (11)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20020124022A1 (en) * | 2000-12-29 | 2002-09-05 | Yoo Chin-Woo | Method and apparatus for processing web documents using multi-browse function |
US20050273762A1 (en) * | 2004-06-02 | 2005-12-08 | Lesh Joseph C | Systems and methods for dynamic menus |
US20060212803A1 (en) * | 2005-03-16 | 2006-09-21 | American Express Travel Related Services Company, Inc. | System and method for dynamically resizing embeded web page content |
US20060259455A1 (en) * | 2002-09-24 | 2006-11-16 | Darrell Anderson | Serving advertisements based on content |
US20070299857A1 (en) * | 2006-06-23 | 2007-12-27 | Microsoft Corporation | Cross Domain Communication |
US20080276183A1 (en) * | 2007-04-19 | 2008-11-06 | Joseph Siegrist | Method and apparatus for web page co-browsing |
US20090204476A1 (en) * | 2008-01-31 | 2009-08-13 | Comscore Networks, Inc. | Determining effectiveness of advertising campaigns |
US20090204886A1 (en) * | 2005-10-14 | 2009-08-13 | Sichun Xu | Asynchronously rendering dynamically created content across multiple network domains |
US20090299862A1 (en) * | 2008-06-03 | 2009-12-03 | Microsoft Corporation | Online ad serving |
US20100169363A1 (en) * | 2006-07-03 | 2010-07-01 | Dewey Gaedcke | System and method for managing and displaying additive content in a web browser |
US20110055683A1 (en) * | 2009-09-02 | 2011-03-03 | Facebook Inc. | Page caching for rendering dynamic web pages |
Family Cites Families (2)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US6912715B2 (en) * | 2001-07-30 | 2005-06-28 | Appeon Corporation | System and method for web-based remote procedure call (RPC) |
US20060117256A1 (en) * | 2004-07-29 | 2006-06-01 | Miller Steven H | Method of operating a web |
-
2010
- 2010-11-24 US US13/514,820 patent/US20120246017A1/en not_active Abandoned
- 2010-11-24 WO PCT/US2010/058074 patent/WO2011090550A1/en active Application Filing
Patent Citations (11)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20020124022A1 (en) * | 2000-12-29 | 2002-09-05 | Yoo Chin-Woo | Method and apparatus for processing web documents using multi-browse function |
US20060259455A1 (en) * | 2002-09-24 | 2006-11-16 | Darrell Anderson | Serving advertisements based on content |
US20050273762A1 (en) * | 2004-06-02 | 2005-12-08 | Lesh Joseph C | Systems and methods for dynamic menus |
US20060212803A1 (en) * | 2005-03-16 | 2006-09-21 | American Express Travel Related Services Company, Inc. | System and method for dynamically resizing embeded web page content |
US20090204886A1 (en) * | 2005-10-14 | 2009-08-13 | Sichun Xu | Asynchronously rendering dynamically created content across multiple network domains |
US20070299857A1 (en) * | 2006-06-23 | 2007-12-27 | Microsoft Corporation | Cross Domain Communication |
US20100169363A1 (en) * | 2006-07-03 | 2010-07-01 | Dewey Gaedcke | System and method for managing and displaying additive content in a web browser |
US20080276183A1 (en) * | 2007-04-19 | 2008-11-06 | Joseph Siegrist | Method and apparatus for web page co-browsing |
US20090204476A1 (en) * | 2008-01-31 | 2009-08-13 | Comscore Networks, Inc. | Determining effectiveness of advertising campaigns |
US20090299862A1 (en) * | 2008-06-03 | 2009-12-03 | Microsoft Corporation | Online ad serving |
US20110055683A1 (en) * | 2009-09-02 | 2011-03-03 | Facebook Inc. | Page caching for rendering dynamic web pages |
Non-Patent Citations (2)
Title |
---|
"Even Faster Web Sites: Performance Best Practices for Web Developers", June 2009 by Steve Souders. * |
How do I include one HTML file in another_09-20-2007 by Boutell * |
Cited By (41)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20110225495A1 (en) * | 2010-03-12 | 2011-09-15 | Salesforce.Com, Inc. | Service Cloud Console |
US20110225233A1 (en) * | 2010-03-12 | 2011-09-15 | Salesforce.Com, Inc. | Service Cloud Console |
US20110225500A1 (en) * | 2010-03-12 | 2011-09-15 | Salesforce.Com, Inc. | Service Cloud Console |
US9830054B2 (en) | 2010-03-12 | 2017-11-28 | Salesforce.Com, Inc. | Service cloud console |
US8745272B2 (en) | 2010-03-12 | 2014-06-03 | Salesforce.Com, Inc. | Service cloud console |
US8769416B2 (en) | 2010-03-12 | 2014-07-01 | Salesforce.Com, Inc. | Service cloud console |
US10101883B2 (en) | 2010-03-12 | 2018-10-16 | Salesforce.Com, Inc. | Service cloud console |
US8914539B2 (en) * | 2010-03-12 | 2014-12-16 | Salesforce.Com, Inc. | Service cloud console |
US9971482B2 (en) | 2010-03-12 | 2018-05-15 | Salesforce.Com, Inc. | Service cloud console |
US8984409B2 (en) | 2010-03-12 | 2015-03-17 | Salesforce.Com, Inc. | Service cloud console |
US11615161B2 (en) * | 2010-04-07 | 2023-03-28 | Liveperson, Inc. | System and method for dynamically enabling customized web content and applications |
US9215096B2 (en) | 2011-08-26 | 2015-12-15 | Salesforce.Com, Inc. | Computer implemented methods and apparatus for providing communication between network domains in a service cloud |
US10044660B2 (en) | 2011-08-26 | 2018-08-07 | Salesforce.Com, Inc. | Computer implemented methods and apparatus for providing communication between network domains in a service cloud |
US11868591B2 (en) | 2012-04-26 | 2024-01-09 | Liveperson, Inc. | Dynamic user interface customization |
US20140053057A1 (en) * | 2012-08-16 | 2014-02-20 | Qualcomm Incorporated | Speculative resource prefetching via sandboxed execution |
US9898445B2 (en) * | 2012-08-16 | 2018-02-20 | Qualcomm Incorporated | Resource prefetching via sandboxed execution |
US9898446B2 (en) | 2012-08-16 | 2018-02-20 | Qualcomm Incorporated | Processing a webpage by predicting the usage of document resources |
US11164221B2 (en) * | 2012-12-18 | 2021-11-02 | Nativo, Inc. | Native online ad creation |
US20150220492A1 (en) * | 2013-02-22 | 2015-08-06 | Swoop Inc. | Systems and methods for integrating dynamic content into electronic media |
US10007933B2 (en) * | 2013-02-22 | 2018-06-26 | Swoop Inc. | Systems and methods for integrating dynamic content into electronic media |
US9830304B1 (en) * | 2013-02-22 | 2017-11-28 | Swoop Inc. | Systems and methods for integrating dynamic content into electronic media |
US8930971B1 (en) * | 2013-09-13 | 2015-01-06 | Linkedin Corporation | Embedded-advertising content presented in document context |
US20140297430A1 (en) * | 2013-10-31 | 2014-10-02 | Reach Labs, Inc. | System and method for facilitating the distribution of electronically published promotions in a linked and embedded database |
WO2016185021A1 (en) * | 2015-05-21 | 2016-11-24 | Outfit7 Limited | Interfacing with servers having different apis to obtain advertisement data |
CN107852422A (en) * | 2015-05-21 | 2018-03-27 | 奥德菲七有限公司 | Connected from the server interface with different API to obtain ad data |
US11586684B2 (en) | 2015-12-30 | 2023-02-21 | Google Llc | Serving multiple content items responsive to a single request |
US10423674B1 (en) * | 2015-12-30 | 2019-09-24 | Google Llc | Serving multiple content items responsive to a single request |
WO2017160377A1 (en) * | 2016-03-16 | 2017-09-21 | Google Inc. | Remote rendering of locally displayed content |
US11663286B2 (en) | 2017-12-13 | 2023-05-30 | Nativo, Inc. | Server side web based ad stitching and user specific optimization |
US11651046B2 (en) | 2017-12-13 | 2023-05-16 | Nativo, Inc. | Optimizing third party tag insertion |
US10817585B2 (en) * | 2017-12-13 | 2020-10-27 | Nativo, Inc. | Server side web based ad stitching and user specific optimization |
US11238216B2 (en) | 2017-12-13 | 2022-02-01 | Nativo, Inc. | Making real-time content selection decisions based on multivariate testing |
US11250094B2 (en) | 2017-12-13 | 2022-02-15 | Nativo, Inc. | Server side web based ad stitching and user specific optimization |
US11275813B2 (en) | 2017-12-13 | 2022-03-15 | Nativo, Inc. | Optimizing third party tag insertion |
US20190179865A1 (en) * | 2017-12-13 | 2019-06-13 | Nativo, Inc. | Server side web based ad stitching and user specific optimization |
US11630949B2 (en) | 2017-12-13 | 2023-04-18 | Nativo, Inc. | Making real-time content selection decisions based on multivariate testing |
US20190236115A1 (en) * | 2018-02-01 | 2019-08-01 | Google Llc | Digital component backdrop rendering |
US11055474B2 (en) | 2018-02-01 | 2021-07-06 | Google Llc | Digital component backdrop rendering |
US10671798B2 (en) * | 2018-02-01 | 2020-06-02 | Google Llc | Digital component backdrop rendering |
TWI692232B (en) * | 2018-12-17 | 2020-04-21 | 宏碁股份有限公司 | Method and device for loading web page based on iframe |
US11611629B2 (en) * | 2020-05-13 | 2023-03-21 | Microsoft Technology Licensing, Llc | Inline frame monitoring |
Also Published As
Publication number | Publication date |
---|---|
WO2011090550A1 (en) | 2011-07-28 |
Similar Documents
Publication | Publication Date | Title |
---|---|---|
US20120246017A1 (en) | Distributing content | |
CN108984714B (en) | Page rendering method and device, electronic equipment and computer readable medium | |
US10007933B2 (en) | Systems and methods for integrating dynamic content into electronic media | |
US9672540B2 (en) | Web page ad slot identification | |
US20120317486A1 (en) | Embedded web viewer for presentation applications | |
WO2017027868A1 (en) | Configurable development platform integrating heterogeneous persistence systems | |
US20130179767A1 (en) | Reducing Ad Impact to Browser Onload Event | |
US20140108589A1 (en) | Testing an executable binary file using an injection proxy | |
US9830304B1 (en) | Systems and methods for integrating dynamic content into electronic media | |
KR20190094235A (en) | Custom digital components | |
US9160800B1 (en) | Integrating web services with a content item | |
CN105283843B (en) | Embeddable media content search widget | |
US20120089457A1 (en) | Search Container | |
US20210081464A1 (en) | Crawlability of single page applications | |
US20150121198A1 (en) | Style sheet speculative preloading | |
US9003365B1 (en) | Rapid presentations of versions | |
US10567845B2 (en) | Embeddable media content search widget | |
US11550638B2 (en) | Reducing latency in downloading electronic resources using multiple threads | |
US11770437B1 (en) | Techniques for integrating server-side and client-side rendered content | |
US20240028313A1 (en) | System and method for extending an application with user-defined content | |
JP7104091B2 (en) | Reduced latency when downloading electronic resources using multiple threads | |
US20150154161A1 (en) | Requesting service | |
US9733904B2 (en) | Content-aware code fragments | |
Yeh et al. | A Uniform Methodology for Mobile and Desktop Web Applications | |
Mabbutt et al. | Working with Controls |
Legal Events
Date | Code | Title | Description |
---|---|---|---|
AS | Assignment |
Owner name: GOOGLE INC., CALIFORNIAFree format text: ASSIGNMENT OF ASSIGNORS INTEREST;ASSIGNOR:KLEBER, MICHAEL;REEL/FRAME:028424/0011Effective date: 20101130 |
|
STCB | Information on status: application discontinuation |
Free format text: ABANDONED -- FAILURE TO RESPOND TO AN OFFICE ACTION |