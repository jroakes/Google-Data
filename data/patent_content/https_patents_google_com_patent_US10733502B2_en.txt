US10733502B2 - Training policy neural networks using path consistency learning - Google Patents
Training policy neural networks using path consistency learning Download PDFInfo
- Publication number
- US10733502B2 US10733502B2 US16/504,934 US201916504934A US10733502B2 US 10733502 B2 US10733502 B2 US 10733502B2 US 201916504934 A US201916504934 A US 201916504934A US 10733502 B2 US10733502 B2 US 10733502B2
- Authority
- US
- United States
- Prior art keywords
- path
- observation
- neural network
- action
- determining
- Prior art date
- Legal status (The legal status is an assumption and is not a legal conclusion. Google has not performed a legal analysis and makes no representation as to the accuracy of the status listed.)
- Active
Links
- 238000013528 artificial neural network Methods 0.000 title claims abstract description 183
- 238000012549 training Methods 0.000 title claims abstract description 34
- 230000009471 action Effects 0.000 claims abstract description 226
- 238000000034 method Methods 0.000 claims abstract description 56
- 230000002787 reinforcement Effects 0.000 claims abstract description 38
- 238000003860 storage Methods 0.000 claims abstract description 14
- 238000009826 distribution Methods 0.000 claims description 36
- 238000012545 processing Methods 0.000 claims description 34
- 230000008569 process Effects 0.000 claims description 28
- 230000015654 memory Effects 0.000 claims description 16
- 230000004044 response Effects 0.000 claims description 16
- 238000005070 sampling Methods 0.000 claims description 12
- 230000003993 interaction Effects 0.000 claims description 6
- 238000004590 computer program Methods 0.000 abstract description 14
- 239000003795 chemical substances by application Substances 0.000 description 84
- 230000006870 function Effects 0.000 description 20
- 230000007774 longterm Effects 0.000 description 14
- 238000004891 communication Methods 0.000 description 5
- 238000010801 machine learning Methods 0.000 description 5
- 238000010586 diagram Methods 0.000 description 4
- 238000004088 simulation Methods 0.000 description 4
- 230000008901 benefit Effects 0.000 description 3
- 238000013527 convolutional neural network Methods 0.000 description 2
- 238000003062 neural network model Methods 0.000 description 2
- 230000003287 optical effect Effects 0.000 description 2
- 230000000306 recurrent effect Effects 0.000 description 2
- 238000013515 script Methods 0.000 description 2
- 238000000926 separation method Methods 0.000 description 2
- 230000006403 short-term memory Effects 0.000 description 2
- 241000009334 Singa Species 0.000 description 1
- YTAHJIFKAKIKAV-XNMGPUDCSA-N [(1R)-3-morpholin-4-yl-1-phenylpropyl] N-[(3S)-2-oxo-5-phenyl-1,3-dihydro-1,4-benzodiazepin-3-yl]carbamate Chemical compound O=C1[C@H](N=C(C2=C(N1)C=CC=C2)C1=CC=CC=C1)NC(O[C@H](CCN1CCOCC1)C1=CC=CC=C1)=O YTAHJIFKAKIKAV-XNMGPUDCSA-N 0.000 description 1
- 230000006399 behavior Effects 0.000 description 1
- 230000005540 biological transmission Effects 0.000 description 1
- 230000001149 cognitive effect Effects 0.000 description 1
- 239000004973 liquid crystal related substance Substances 0.000 description 1
- 238000004519 manufacturing process Methods 0.000 description 1
- 230000000644 propagated effect Effects 0.000 description 1
- 239000004065 semiconductor Substances 0.000 description 1
- 230000001953 sensory effect Effects 0.000 description 1
- 239000000758 substrate Substances 0.000 description 1
- 238000012546 transfer Methods 0.000 description 1
- 230000000007 visual effect Effects 0.000 description 1
Images
Classifications
-
- G06N3/0454—
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06N—COMPUTING ARRANGEMENTS BASED ON SPECIFIC COMPUTATIONAL MODELS
- G06N3/00—Computing arrangements based on biological models
- G06N3/02—Neural networks
- G06N3/04—Architecture, e.g. interconnection topology
- G06N3/045—Combinations of networks
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06N—COMPUTING ARRANGEMENTS BASED ON SPECIFIC COMPUTATIONAL MODELS
- G06N3/00—Computing arrangements based on biological models
- G06N3/02—Neural networks
- G06N3/08—Learning methods
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06N—COMPUTING ARRANGEMENTS BASED ON SPECIFIC COMPUTATIONAL MODELS
- G06N3/00—Computing arrangements based on biological models
- G06N3/02—Neural networks
- G06N3/08—Learning methods
- G06N3/092—Reinforcement learning
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06N—COMPUTING ARRANGEMENTS BASED ON SPECIFIC COMPUTATIONAL MODELS
- G06N3/00—Computing arrangements based on biological models
- G06N3/004—Artificial life, i.e. computing arrangements simulating life
- G06N3/006—Artificial life, i.e. computing arrangements simulating life based on simulated virtual individual or collective life forms, e.g. social simulations or particle swarm optimisation [PSO]
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06N—COMPUTING ARRANGEMENTS BASED ON SPECIFIC COMPUTATIONAL MODELS
- G06N3/00—Computing arrangements based on biological models
- G06N3/02—Neural networks
- G06N3/04—Architecture, e.g. interconnection topology
- G06N3/044—Recurrent networks, e.g. Hopfield networks
- G06N3/0442—Recurrent networks, e.g. Hopfield networks characterised by memory or gating, e.g. long short-term memory [LSTM] or gated recurrent units [GRU]
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06N—COMPUTING ARRANGEMENTS BASED ON SPECIFIC COMPUTATIONAL MODELS
- G06N3/00—Computing arrangements based on biological models
- G06N3/02—Neural networks
- G06N3/04—Architecture, e.g. interconnection topology
- G06N3/0464—Convolutional networks [CNN, ConvNet]
Definitions
- This specification relates to reinforcement learning.
- an agent interacts with an environment by performing actions that are selected by the reinforcement learning system in response to receiving observations that characterize the current state of the environment.
- Some reinforcement learning systems select the action to be performed by the agent in response to receiving a given observation in accordance with an output of a neural network.
- Neural networks are machine learning models that employ one or more layers of nonlinear units to predict an output for a received input.
- Some neural networks are deep neural networks that include one or more hidden layers in addition to an output layer. The output of each hidden layer is used as input to the next layer in the network, i.e., the next hidden layer or the output layer.
- Each layer of the network generates an output from a received input in accordance with current values of a respective set of parameters.
- This specification generally describes a reinforcement learning system that trains a policy neural network that is used to select actions to be performed by a reinforcement learning agent interacting with an environment.
- a method for training a policy neural network used to select actions to be performed by a reinforcement learning agent interacting with an environment by performing actions from a pre-determined set of actions, the policy neural network having a plurality of policy network parameters and being configured to process an input observation characterizing a current state of the environment in accordance with the policy network parameters to generate a score distribution that includes a respective score for each action in the pre-determined set of actions, and the method comprising: obtaining path data defining a path through the environment traversed by the agent, wherein the path is a sequence from a first observation to a last observation, and wherein the path data includes a plurality of observation-action-reward tuples, wherein the observation in each tuple is an observation characterizing a state of the environment, the action in each tuple is an action performed by the agent in response to the observation in the tuple, and the reward in each tuple is a numeric value received as a result of the agent performing the action in
- determining the combined reward comprises determining a discounted sum of the rewards in the tuples in the path.
- the state value neural network is based on a Q neural network
- determining the first soft-max state value comprises: processing the first observation using the Q neural network in accordance with current values of Q network parameters to generate a respective Q value for each action in the predetermined set of actions; and determining the first soft-max state value V for the first observation that satisfies:
- V ⁇ ⁇ ⁇ log ⁇ ⁇ a ⁇ ( exp ⁇ Q ⁇ ( a ) ⁇ ) , where the sum is over the actions a in the predetermined set of actions, Q(a) is a Q value output of the Q neural network for the action, and ⁇ is a constant value.
- the state value neural network is based on a Q neural network
- determining the last soft-max state value comprises: processing the last observation using the Q neural network in accordance with current values of Q network parameters to generate a respective Q value for each action in the predetermined set of actions; and determining the last soft-max state value V for the last observation that satisfies:
- V ⁇ ⁇ ⁇ log ⁇ ⁇ a ⁇ ( exp ⁇ Q ⁇ ( a ) ⁇ ) , where the sum is over the actions a in the predetermined set of actions, Q(a) is a Q value output of the Q neural network for the action, and ⁇ is a constant value.
- the policy neural network is based on a Q neural network, and processing an observation using the policy neural network to generate a score distribution that includes a respective score for each action in the pre-determined set of actions comprises: processing the observation using the Q neural network in accordance with current values of Q network parameters to generate a respective Q value for each action in the predetermined set of actions; determining a soft-max state value for the observation that satisfies:
- V ⁇ ⁇ ⁇ log ⁇ ⁇ a ⁇ ( exp ⁇ Q ⁇ ( a ) ⁇ ) where the sum is over the actions a in the predetermined set of actions, Q(a) is a Q value output of the Q neural network for the action, and ⁇ is a constant value; and determining a score distribution ⁇ for the observation that satisfies:
- ⁇ ⁇ ( a ) exp ⁇ ⁇ Q ⁇ ( a ) - V ⁇ ⁇ , where a is an action in the predetermined set of actions, ⁇ (a) is a score for the action in the score distribution, Q(a) is a Q value output of the Q neural network for the action a, V is the soft-max state value for the observation, and ⁇ is a constant value.
- determining the path likelihood for the path comprises: processing each observation other than the last observation in the path using the policy network to determine a respective score distribution in accordance with the current values of the policy network parameters; determining, for each observation other than the last observation in the path, a selected action score, wherein the selected action score is the action score for the action in the same tuple as the observation in the score distribution for the observation; and determining a discounted sum of the logarithms of the selected action scores.
- the value update for the current values of the policy parameters is a product of the consistency error and the gradient.
- the method further comprises: determining a gradient of the first soft-max state value with respect to the Q network parameters; determining a gradient of the last soft-max state value with respect to the Q network parameters; and determining a value update for the current values of the Q network parameters from the consistency error, the gradient of the first soft-max state value, and the gradient of the second soft-max state value for the last observation; and using the value update to adjust the current values of the Q network parameters.
- the method further comprises generating the path on-policy by selecting the actions to be performed in response to the observations in the path using the policy neural network and in accordance with the current values of the policy network parameters.
- the method further comprises sampling the path data defining the path from a replay memory storing data generated as a result of interactions of the agent with the environment.
- the method further comprises providing the trained policy neural network for use in selecting actions to be performed by the reinforcement learning agent interacting with the environment.
- a method for training a policy neural network used to select actions to be performed by a reinforcement learning agent interacting with an environment by performing actions from a pre-determined set of actions, the policy neural network having a plurality of policy network parameters and being configured to process an input observation characterizing a current state of the environment in accordance with the policy network parameters to generate a score distribution that includes a respective score for each action in the pre-determined set of actions, and the method comprising: obtaining path data defining a path through the environment traversed by the agent, wherein the path is a sequence from a first observation to a last observation, and wherein the path data includes a plurality of observation-action-reward tuples, wherein the observation in each tuple is an observation characterizing a state of the environment, the action in each tuple is an action performed by the agent in response to the observation in the tuple, and the reward in each tuple is a numeric value received as a result of the agent performing the action in
- a system comprising one or more computers and one or more storage devices storing instructions that when executed by the one or more computers cause the one or more computers to perform the operations of any of the previously described methods.
- one or more computer storage media storing instructions that when executed by one or more computers cause the one or more computers to perform the operations of any of the previously described methods.
- the reinforcement learning system as described in this specification can be trained using both on-policy and off-policy path data in order to update, and preferably improve, an action selection policy based on which actions may be selected for performance by an agent which interacts with an environment.
- Path data is data characterizing observation-action-reward tuples for each of multiple time steps as an agent interacts with an environment. “Reward” in this sense may refer to an indication of whether the agent has accomplished a task (e.g., navigating to a target location in the environment) or of the progress of the agent towards accomplishing a task.
- On-policy path data refers to path data where the agent interacts with the environment by selecting actions based on the current action selection policy of the reinforcement learning system.
- off-policy path data refers to any path data, including path data where the agent interacts with the environment by selecting actions based on an action selection policy that is different from the action selection policy of the reinforcement learning system. Since the reinforcement learning system as described in this specification can be trained using both on-policy and off-policy path data, it can be trained more quickly (e.g., over fewer training iterations) and achieve better performance (e.g., by enabling the agent to perform tasks more effectively) than reinforcement learning systems that can only be trained using on-policy path data (e.g., reinforcement learning systems trained using policy-based methods).
- the reinforcement learning system as described in this specification can be trained using off-policy path data, it can be trained using expert trajectories.
- Expert trajectories are off-policy path data generated by the interaction of an expert agent with the environment, where an expert agent is an agent that interacts with the environment in accordance with an action selection policy that is unknown but that causes the expert agent to effectively perform tasks. Since the reinforcement learning system as described in this specification can be trained with expert trajectories, it can be trained more quickly and achieve better performance than conventional reinforcement learning systems that can only be trained using on-policy path data.
- the reinforcement learning system as described in this specification consumes fewer computational resources during training (e.g., memory and computing power) than conventional reinforcement learning systems that can only be trained using on-policy path data.
- the reinforcement learning system as described in this specification can be trained using a path consistency learning loss function that enables stable parameter value updates (i.e., parameter value updates that are likely to cause the system select actions that enable the agent to effectively perform tasks).
- conventional reinforcement learning systems e.g., systems trained using Q-learning methods
- FIG. 1 shows an example reinforcement learning system.
- FIG. 2 is a flow diagram of an example process for training a reinforcement learning system based on a path consistency learning loss function.
- FIG. 3 is a flow diagram of an example process for determining parameter value updates based on a path consistency learning loss function.
- FIG. 1 shows an example reinforcement learning system 100 .
- the reinforcement learning system 100 is an example of a system implemented as computer programs on one or more computers in one or more locations in which the systems, components, and techniques described below are implemented.
- the reinforcement learning system 100 selects actions 114 to be performed by an agent 116 interacting with an environment 118 at each of multiple time steps. At each time step, the system 100 receives data characterizing the current state of the environment 118 , e.g., an image of the environment, and selects an action 114 to be performed by the agent 116 in response to the received data. Data characterizing a state of the environment 118 will be referred to in this specification as an observation 120 .
- the reinforcement learning system 100 described herein is widely applicable and is not limited to one specific implementation. However, for illustrative purposes, a small number of example implementations are described below.
- the environment 118 is a real-world environment and the agent 116 is a mechanical agent interacting with the real-world environment.
- the agent may be a robot interacting with the environment to accomplish a specific task.
- the agent may be an autonomous or semi-autonomous vehicle navigating through the environment.
- the actions may be control inputs to control the robot or the autonomous vehicle.
- the observations 120 may be generated by or derived from sensors of the agent 116 .
- the observations 120 may be captured by a camera of the agent 116 .
- the observations 120 may be derived from data captured from a laser sensor of the agent 116 .
- the observations may be hyperspectral images captured by a hyperspectral sensor of the agent 116 .
- the environment 118 may be a simulated environment and the agent 116 may be implemented as one or more computer programs interacting with the simulated environment.
- the simulated environment may be a video game and the agent may be a simulated user playing the video game.
- the simulated environment may be a motion simulation environment, e.g., a driving simulation or a flight simulation, and the agent is a simulated vehicle navigating through the motion simulation environment.
- the actions may be control inputs to control the simulated user or simulated vehicle.
- the state of the environment 118 at the time step depends on the state of the environment 118 at the previous time step and the action 114 performed by the agent 116 at the previous time step.
- the system 100 receives a reward 122 based on the current state of the environment 118 and the action 114 of the agent 116 at the time step.
- the reward 122 is a numerical value.
- the reward 122 can be based on any event or aspect of the environment 118 .
- the reward 122 may indicate whether the agent 116 has accomplished a task (e.g., navigating to a target location in the environment 118 ) or the progress of the agent 116 towards accomplishing a task.
- the system 100 uses a policy neural network 112 in selecting actions to be performed by the agent 116 in response to observations 120 at each time step.
- the policy neural network 112 is configured to receive an observation 120 as input and to process the input in accordance with a set of parameters, referred to in this specification as policy neural network parameters, to generate a policy output that the system 100 uses to determine an action 114 to be performed by the agent 116 at the time step.
- the policy output is a score distribution that includes a respective score for each action in a predetermined set of actions.
- the system 100 determines the action 114 to be performed by the agent 116 at the time step to be the action with the highest score.
- the system 100 processes the scores (e.g., using a soft-max function) to generate a probability distribution over the predetermined set of actions.
- the system 100 determines the action 114 to be performed by the agent 116 at the time step by sampling an action from the predetermined set of actions in accordance with the probability distribution.
- the system 100 determines the action 114 to be performed by the agent 116 using an exploration strategy.
- the system 100 may use an ⁇ -greedy exploration strategy.
- E is a number between 0 and 1.
- the system 100 determines the action 114 to be performed by the agent 116 based on the policy output generated by the policy neural network 112 with probability (1 ⁇ ), and determines the action 114 to be performed by the agent 116 randomly with probability E.
- the system 100 includes a training system 102 that is configured to train the system 100 (including the policy neural network 112 ) over multiple training iterations using reinforcement learning techniques.
- the training system 102 trains the system 100 to cause the policy neural network 112 to generate policy outputs that result in the selection of actions 114 to be performed by the agent 116 which maximize a long-term time-discounted reward (such as an expected entropy regularized long-term time-discounted reward) received by the system 100 , and thereby cause the agent 116 to effectively perform given tasks.
- a long-term time-discounted reward such as an expected entropy regularized long-term time-discounted reward
- the long-term time-discounted reward is a measure of the expected future values of the rewards 122 received by the system 100 , where the rewards 122 are weighted by a discount factor reflecting the rewards 122 received sooner are more valuable to the system 100 than rewards 122 received later.
- the long-term time-discounted reward is an expected entropy regularized long-term time-discounted reward, it also includes an entropy regularization term, that encourages exploration and helps prevent the early convergence of the policy neural network 112 to sub-optimal action selection policies.
- the expected entropy regularized long-term time-discounted reward received by the system 100 from a state s of the environment 118 can be recursively expressed as:
- O ⁇ ( s , ⁇ ) ⁇ a ⁇ ⁇ ⁇ ( a
- the parameter ⁇ is set to zero (or near zero), in which case the training system 102 trains the system 100 to cause the policy neural network 112 to generate policy outputs that result in the selection of actions 114 to be performed by the agent 116 which maximize the expected long-term time-discounted reward received by the system 100 (without entropy regularization).
- the training system 102 includes a path sampling engine 108 that is configured to, at each training iteration, obtain path data that defines one or more paths traversed by an agent through the environment 118 over a predetermined number of time steps.
- the path data includes an observation-action-reward tuple for each time step of the path, including the observation 120 at the time step, the action 114 performed at the time step, and the reward 122 received at the time step.
- the path sampling engine 108 obtains offline path data from a replay memory 110 .
- Offline path data is path data that can include paths traversed by an agent performing actions selected based on policy outputs that are different from those that would be generated in accordance with the current values of the policy neural network parameters.
- the replay memory 110 stores path data from paths previously traversed by the agent 116 , from paths previously traversed by an expert agent, or both.
- An expert agent is an agent that interacts with the environment 118 in accordance with an action selection policy that is unknown but that causes the expert agent to successfully accumulate long-term time-discounted rewards by effectively performing tasks. For example, if the system 100 receives rewards in response to the agent 116 making progress towards accomplishing a task, an expert agent may be an agent controlled by a person who is skilled at the task to be performed by the agent 116 .
- the path sampling engine 108 obtains the path data by generating path data on-policy.
- Generating path data on-policy refers to selecting actions 114 to be performed by the agent 116 at each of the predetermined number of time steps based on policy outputs generated in accordance with the current values of the policy neural network parameters.
- the path sampling engine generates multiple different on-policy paths.
- the path sampling engine 108 obtains path data both by sampling from the replay memory 110 and by generating path data on-policy.
- the training system 102 includes a state value neural network 106 that is configured to receive an observation 120 as input and to process the input in accordance with a set of parameters, referred to in this specification as state value neural network parameters, to generate as output an estimated state value.
- a state value refers to the expected entropy regularized long-term time-discounted reward that would be received by the system 100 if, starting from the current state of the environment 118 , the agent 116 performs actions that are selected based on the policy outputs generated by the policy neural network 112 in accordance with the current values of the policy neural network parameters, i.e., and not based on a different action selection policy.
- the training system 102 includes a training engine 104 that is configured to, at each training iteration, update the current values of the policy neural network parameters and the state value neural network parameters.
- the training engine 104 uses gradient descent to adjust the policy neural network parameters and the state value neural network parameters to minimize a path consistency learning loss function 124 .
- a path consistency learning loss function (which will be described in more detail with reference to FIG. 2 and FIG.
- 3 is a loss function that includes consistency error terms that measure a consistency between policy outputs (i.e., as generated by the policy neural network 112 ) and estimated state values (i.e., as generated by the state value neural network 106 ) for any path through the environment 118 , and in particular, the paths of the path data obtained by the path sampling engine 108 .
- the training engine 102 causes the policy neural network 112 to generate policy outputs that, when used to select actions 114 to be performed by the agent 116 , maximize the expected entropy regularized long-term time-discounted reward received by the system 100 and thereby cause the agent to effectively perform given tasks.
- An example process for training the reinforcement learning system 100 is described with reference to FIG. 2 .
- the policy neural network 112 and the state value neural network 106 are implemented as separate neural networks that do not share parameter values and are each separately trained by the training engine 104 .
- the policy neural network 112 and the state value neural network 106 may be implemented as any appropriate neural network model, such as a feed-forward neural network (e.g., a multi-layer perceptron or a convolutional neural network) or a recurrent neural network (e.g., a long short-term memory network).
- the system integrates the policy neural network 112 and the state value neural network 106 into a single model.
- the system 100 includes a neural network referred to in this specification as a Q neural network, and generates both the policy output (otherwise generated by the policy neural network 112 ) and the estimated state values (otherwise generated by the state value network 106 ) based on the output of the Q neural network.
- the Q neural network is configured to receive as input an observation 120 and to process the input in accordance with a set of parameters, referred to in this specification as Q neural network parameters, to generate as output a different estimated Q-value for each action of the predetermined set of actions.
- a Q-value for an action is a scalar value that is the expected entropy regularized long-term time-discounted reward received by the system 100 if the agent 116 first selects the given action (i.e., in response to the given observation) and then at subsequent time steps selects actions in accordance with an optimal action selection policy (i.e., an action selection policy that maximizes the expected entropy regularized long-term time-discounted reward received).
- the Q neural network may be configured to receive as input both an observation and a representation of an action, and to process the inputs to generate as output an estimated Q-value for the particular input action.
- the system 100 generates the state value estimate for an observation from the output of the Q neural network as:
- V ⁇ ⁇ ⁇ log ⁇ ⁇ a ⁇ ( exp ⁇ Q ⁇ ( a ) ⁇ ) , where ⁇ is the hyper-parameter governing the degree of entropy regularization (as described earlier), the sum is over the actions a in the predetermined set of actions, and Q(a) is the estimated Q-value for action a (i.e., generated by the Q neural network by processing the observation).
- the system 100 generates the policy output for an observation from the output of the Q neural network as:
- ⁇ ⁇ ( a ) exp ⁇ ⁇ Q ⁇ ( a ) - V ⁇ ⁇ ,
- ⁇ is the policy output (i.e., the score distribution over the set of predetermined actions)
- ⁇ (a) is the score for action a in the score distribution ⁇
- Q(a) is the estimated Q-value corresponding to action a for the observation
- V is the state value estimate for the observation (determined from the output of the Q neural network as described above)
- ⁇ is the hyper-parameter governing the degree of entropy regularization (as described earlier).
- the training engine 104 operates analogously, by updating the current values of the Q neural network parameters using gradient descent to adjust the Q neural network parameters to minimize the path consistency learning loss function 124 .
- the Q neural network may be implemented as any appropriate neural network model.
- the Q neural network may be implemented as a feed-forward neural network (e.g., a multi-layer perceptron or a convolutional neural network) or a recurrent neural network (e.g., a long short-term memory network).
- FIG. 2 is a flow diagram of an example process 200 for training a reinforcement learning system based on a path consistency learning loss function.
- the process 200 will be described as being performed by a system of one or more computers located in one or more locations.
- a training system e.g., the training system 102 of FIG. 1 , appropriately programmed in accordance with this specification, can perform the process 200 .
- the system obtains path data ( 202 ).
- the path data defines one or more different paths traversed by an agent through the environment over a predetermined number of time steps.
- the path data includes an observation-action-reward tuple for each time step, including the observation at the time step, the action performed at the time step, and the reward received at the time step.
- the system obtains offline path data from a replay memory.
- Offline path data is path data that can include paths traversed by an agent performing actions selected based on policy outputs that are different from those generated in accordance with the current values of the policy neural network parameters.
- the replay memory stores path data from paths previously traversed by the agent and/or from paths previously traversed by an expert agent.
- An expert agent is an agent that interacts with the environment in accordance with an action selection policy that is unknown but that causes the expert agent to successfully accumulate long-term time-discounted rewards. For example, if the system receives rewards in response to the agent making progress towards accomplishing a task, an expert agent may be an agent controlled by a person who is skilled at the task to be performed by the agent.
- the system randomly samples path data from the replay memory. In some implementations, the system determines a probability distribution over the paths in the replay memory and samples path data from the replay memory in accordance with the probability distribution. In these implementations, the system may determine the probability distribution by assigning a different probability to each path in the replay memory based on the reward data associated with the path. For example, the system may assign a higher probability to paths where a measure of the total reward associated with the path (e.g., the sum of the rewards at each time step) is greater.
- a measure of the total reward associated with the path e.g., the sum of the rewards at each time step
- the system obtains the path data by generating path data on-policy.
- Generating path data on-policy refers to selecting actions to be performed by the agent at each of the predetermined number of time steps based on policy outputs generated in accordance with the current values of the policy neural network parameters.
- the path sampling engine generates multiple different on-policy paths.
- the system obtains path data both by sampling offline path data from the replay memory and by generating path data on-policy.
- the system determines parameter value updates for (i) the policy neural network parameters and the state value neural network parameters, or (ii) the Q neural network parameters, depending on whether the policy neural network and the state value neural network are implemented as separate models or integrated into a single model based on a Q neural network (as described earlier) ( 204 ).
- the system is configured to determine parameter value updates for (i) the policy and state value neural network parameters, or (ii) the Q neural network parameters, to minimize a path consistency learning loss function.
- the path consistency learning loss function characterizes a consistency between policy outputs and estimated state values for any path through the environment, and in particular, the paths of the obtained path data.
- the path consistency learning loss function may have the form:
- the system determines the parameter value updates by computing the gradient of the path consistency learning loss function with respect to the parameters of (i) the policy and state value neural networks, or (ii) the Q neural network (depending on the implementation).
- An example process for determining parameter value updates based on a path consistency learning loss function is described with reference to FIG. 3 .
- the system updates (i) the policy and state value neural network parameters, or (ii) the Q neural network parameters (depending on the implementation), using the determined parameter value updates ( 206 ).
- the system updates the parameters of a network (e.g., a policy, state value, or Q neural network) based on a determined parameter value update by: ⁇ + ⁇ , where ⁇ are the parameters of the network, ⁇ indicates the assignment operation, ⁇ is a learning rate (that controls the rate at which the values of the parameters are updated), and ⁇ is the parameter value update.
- the system By adjusting the network parameters to minimize the path consistency learning loss, the system causes policy outputs to be generated that, when used to select actions to be performed by the agent, maximize the expected entropy regularized long-term time-discounted reward received by the system.
- the system updates the replay buffer by inserting one or more paths from on-policy path data generated at the training iteration (e.g., as described in 202 ) ( 208 ).
- the system inserts each generated on-policy path into the replay buffer.
- the system inserts a generated on-policy path into the replay buffer with a fixed probability, for example, 10%, or any other appropriate probability. If the replay buffer is full, then the system can insert a given path into the replay buffer by selecting (e.g., randomly) a path that is currently in the replay buffer and overwriting (i.e., replacing) it with the given path.
- FIG. 3 is a flow diagram of an example process 300 for determining parameter value updates based on a path consistency learning loss function.
- the process 300 will be described as being performed by a system of one or more computers located in one or more locations.
- a training system e.g., the training system 102 of FIG. 1 , appropriately programmed in accordance with this specification, can perform the process 300 .
- the system determines a combined reward for the path based on the rewards received at one or more time steps in the path ( 302 ). For example, the system may determine the combined reward for a path to be the discounted sum of the rewards received at each time step in the path except for the last time step, i.e.:
- ⁇ j 0 d - 1 ⁇ ⁇ j ⁇ r j , where the sum is over the time steps of the path except the last time step, ⁇ is the discount factor, and r j is the reward received for time step j in the path.
- the system determines estimated state values for the first and last observation of the path ( 304 ).
- the system provides the first and last observation of each path as input to a state value neural network that processes the input to generate as output respective estimated state values for the first and last observation of the path.
- the system provides the first and last observation of each path as input to a Q neural network that processes the input to generate as output respective estimated Q-values for each action in the predetermined set of actions, for the first and last observation in the path.
- the system determines the estimated state values for the first and last observation based on the respective Q-values, as described earlier.
- the system determines a path likelihood for the path ( 306 ).
- the system determines a respective score distribution over the predetermined set of actions for each observation in the path other than the last observation.
- the system provides each observation in the path other than the last observation as inputs to a policy neural network that processes the inputs to generate as output respective score distributions over the predetermined set of actions for each observation in the path other than the last observation.
- the system provides each observation in the path other than the last observation as input to a Q neural network that processes the inputs to generate as output respective estimated Q-values for each action in the predetermined set of actions, for each observation in the path other than the last observation.
- the system determines the respective score distributions for each observation in the path other than the last observation based on the respective Q-values, as described earlier.
- the system determines, for each observation in the path other than the last observation, a selected action score. To determine the selected action score for an observation in a path, the system identifies the score distribution over the set of predetermined actions that the system determined for the observation. The system identifies the selected action score as the score from the score distribution for the action corresponding to the observation in the path according to the path data.
- the system determines the path likelihood for the path based on the selected action scores. For example, the system may determine the path likelihood for a path by:
- ⁇ j 0 d - 1 ⁇ ⁇ j ⁇ log ⁇ ⁇ ⁇ ⁇ ( a j
- the system determines a consistency error for the path ( 308 ). Specifically, the system determines the consistency error for a path by combining at least (i) the combined reward for the path, (ii) the estimated state values for the first and last observations in the path, and (iii) the path likelihood for the path. For example, the system may determine the consistency error for a path P to be:
- V(P 0 ) is the estimated state value estimate for the first observation in the path
- V(P d ) is the estimated state value for the last observation in the path
- ⁇ is a discount factor
- (d+1) is predetermined number of time steps in the path
- r j is the reward received at the j-th time step in the path
- ⁇ is a hyper-parameter governing the degree of entropy regularization (as described earlier)
- P j ) is the selected action score for the j-th observation in the path.
- the system determines parameter value updates for (i) the policy neural network parameters and the state value neural network parameters, or (ii) the Q neural network parameters, depending on whether the policy neural network and the state value neural network are implemented as separate models or integrated into a single model based on a Q neural network (as described earlier) ( 310 ).
- the system determines the parameter value updates by computing the gradient of the path consistency learning loss function with respect to the parameters of (i) the policy and state value neural networks, or (ii) the Q neural network (again, depending on the implementation).
- the path consistency learning loss function is based on the consistency errors for each of the paths of the obtained path data.
- the parameter value updates for a policy neural network may have the form:
- ⁇ is the overall parameter value update
- ⁇ P is the parameter value update corresponding to path P from the set of obtained path data E
- C(P) is the consistency error for path P
- ⁇ ⁇ is the gradient with respect to the parameters of the policy neural network (e.g., computed by backpropagation)
- j is an index over the predetermined number of time steps in each path
- ⁇ is a discount factor
- P j ) is the selected action score for the j-th observation in path P (where the dependence on the parameters ⁇ of the policy neural network is made explicit).
- the parameter value updates for a state value neural network may have the form:
- the parameter value updates for a Q neural network may have the form:
- Embodiments of the subject matter and the functional operations described in this specification can be implemented in digital electronic circuitry, in tangibly-embodied computer software or firmware, in computer hardware, including the structures disclosed in this specification and their structural equivalents, or in combinations of one or more of them.
- Embodiments of the subject matter described in this specification can be implemented as one or more computer programs, i.e., one or more modules of computer program instructions encoded on a tangible non-transitory storage medium for execution by, or to control the operation of, data processing apparatus.
- the computer storage medium can be a machine-readable storage device, a machine-readable storage substrate, a random or serial access memory device, or a combination of one or more of them.
- the program instructions can be encoded on an artificially-generated propagated signal, e.g., a machine-generated electrical, optical, or electromagnetic signal, that is generated to encode information for transmission to suitable receiver apparatus for execution by a data processing apparatus.
- data processing apparatus refers to data processing hardware and encompasses all kinds of apparatus, devices, and machines for processing data, including by way of example a programmable processor, a computer, or multiple processors or computers.
- the apparatus can also be, or further include, special purpose logic circuitry, e.g., an FPGA (field programmable gate array) or an ASIC (application-specific integrated circuit).
- the apparatus can optionally include, in addition to hardware, code that creates an execution environment for computer programs, e.g., code that constitutes processor firmware, a protocol stack, a database management system, an operating system, or a combination of one or more of them.
- a computer program which may also be referred to or described as a program, software, a software application, an app, a module, a software module, a script, or code, can be written in any form of programming language, including compiled or interpreted languages, or declarative or procedural languages; and it can be deployed in any form, including as a stand-alone program or as a module, component, subroutine, or other unit suitable for use in a computing environment.
- a program may, but need not, correspond to a file in a file system.
- a program can be stored in a portion of a file that holds other programs or data, e.g., one or more scripts stored in a markup language document, in a single file dedicated to the program in question, or in multiple coordinated files, e.g., files that store one or more modules, sub-programs, or portions of code.
- a computer program can be deployed to be executed on one computer or on multiple computers that are located at one site or distributed across multiple sites and interconnected by a data communication network.
- engine is used broadly to refer to a software-based system, subsystem, or process that is programmed to perform one or more specific functions.
- an engine will be implemented as one or more software modules or components, installed on one or more computers in one or more locations. In some cases, one or more computers will be dedicated to a particular engine; in other cases, multiple engines can be installed and running on the same computer or computers.
- the processes and logic flows described in this specification can be performed by one or more programmable computers executing one or more computer programs to perform functions by operating on input data and generating output.
- the processes and logic flows can also be performed by special purpose logic circuitry, e.g., an FPGA or an ASIC, or by a combination of special purpose logic circuitry and one or more programmed computers.
- Computers suitable for the execution of a computer program can be based on general or special purpose microprocessors or both, or any other kind of central processing unit.
- a central processing unit will receive instructions and data from a read-only memory or a random access memory or both.
- the essential elements of a computer are a central processing unit for performing or executing instructions and one or more memory devices for storing instructions and data.
- the central processing unit and the memory can be supplemented by, or incorporated in, special purpose logic circuitry.
- a computer will also include, or be operatively coupled to receive data from or transfer data to, or both, one or more mass storage devices for storing data, e.g., magnetic, magneto-optical disks, or optical disks.
- a computer need not have such devices.
- a computer can be embedded in another device, e.g., a mobile telephone, a personal digital assistant (PDA), a mobile audio or video player, a game console, a Global Positioning System (GPS) receiver, or a portable storage device, e.g., a universal serial bus (USB) flash drive, to name just a few.
- PDA personal digital assistant
- GPS Global Positioning System
- USB universal serial bus
- Computer-readable media suitable for storing computer program instructions and data include all forms of non-volatile memory, media and memory devices, including by way of example semiconductor memory devices, e.g., EPROM, EEPROM, and flash memory devices; magnetic disks, e.g., internal hard disks or removable disks; magneto-optical disks; and CD-ROM and DVD-ROM disks.
- semiconductor memory devices e.g., EPROM, EEPROM, and flash memory devices
- magnetic disks e.g., internal hard disks or removable disks
- magneto-optical disks e.g., CD-ROM and DVD-ROM disks.
- embodiments of the subject matter described in this specification can be implemented on a computer having a display device, e.g., a CRT (cathode ray tube) or LCD (liquid crystal display) monitor, for displaying information to the user and a keyboard and a pointing device, e.g., a mouse or a trackball, by which the user can provide input to the computer.
- a display device e.g., a CRT (cathode ray tube) or LCD (liquid crystal display) monitor
- keyboard and a pointing device e.g., a mouse or a trackball
- Other kinds of devices can be used to provide for interaction with a user as well; for example, feedback provided to the user can be any form of sensory feedback, e.g., visual feedback, auditory feedback, or tactile feedback; and input from the user can be received in any form, including acoustic, speech, or tactile input.
- a computer can interact with a user by sending documents to and receiving documents from a device that is used by the user; for example, by sending web pages to a web browser on a user's device in response to requests received from the web browser.
- a computer can interact with a user by sending text messages or other forms of message to a personal device, e.g., a smartphone that is running a messaging application, and receiving responsive messages from the user in return.
- Data processing apparatus for implementing machine learning models can also include, for example, special-purpose hardware accelerator units for processing common and compute-intensive parts of machine learning training or production, i.e., inference, workloads.
- Machine learning models can be implemented and deployed using a machine learning framework, e.g., a TensorFlow framework, a Microsoft Cognitive Toolkit framework, an Apache Singa framework, or an Apache MXNet framework.
- a machine learning framework e.g., a TensorFlow framework, a Microsoft Cognitive Toolkit framework, an Apache Singa framework, or an Apache MXNet framework.
- Embodiments of the subject matter described in this specification can be implemented in a computing system that includes a back-end component, e.g., as a data server, or that includes a middleware component, e.g., an application server, or that includes a front-end component, e.g., a client computer having a graphical user interface, a web browser, or an app through which a user can interact with an implementation of the subject matter described in this specification, or any combination of one or more such back-end, middleware, or front-end components.
- the components of the system can be interconnected by any form or medium of digital data communication, e.g., a communication network. Examples of communication networks include a local area network (LAN) and a wide area network (WAN), e.g., the Internet.
- LAN local area network
- WAN wide area network
- the computing system can include clients and servers.
- a client and server are generally remote from each other and typically interact through a communication network. The relationship of client and server arises by virtue of computer programs running on the respective computers and having a client-server relationship to each other.
- a server transmits data, e.g., an HTML page, to a user device, e.g., for purposes of displaying data to and receiving user input from a user interacting with the device, which acts as a client.
- Data generated at the user device e.g., a result of the user interaction, can be received at the server from the device.
Abstract
Description
where the sum is over the actions a in the predetermined set of actions, Q(a) is a Q value output of the Q neural network for the action, and τ is a constant value.
where the sum is over the actions a in the predetermined set of actions, Q(a) is a Q value output of the Q neural network for the action, and τ is a constant value.
where the sum is over the actions a in the predetermined set of actions, Q(a) is a Q value output of the Q neural network for the action, and τ is a constant value; and determining a score distribution π for the observation that satisfies:
where a is an action in the predetermined set of actions, π(a) is a score for the action in the score distribution, Q(a) is a Q value output of the Q neural network for the action a, V is the soft-max state value for the observation, and τ is a constant value.
where the sum is over the predetermined set of actions a that can be performed by the
where τ is the hyper-parameter governing the degree of entropy regularization (as described earlier), the sum is over the actions a in the predetermined set of actions, and Q(a) is the estimated Q-value for action a (i.e., generated by the Q neural network by processing the observation).
where π is the policy output (i.e., the score distribution over the set of predetermined actions), π(a) is the score for action a in the score distribution π, Q(a) is the estimated Q-value corresponding to action a for the observation, V is the state value estimate for the observation (determined from the output of the Q neural network as described above), and τ is the hyper-parameter governing the degree of entropy regularization (as described earlier).
where P is a path from the set of obtained path data E, and C(P) is a consistency error for path P. In general, the consistency error C(P) for a path P depends on the output of the policy neural network and the state value neural network for observations in the path.
θ←θ+η·Δθ,
where θ are the parameters of the network, ← indicates the assignment operation, η is a learning rate (that controls the rate at which the values of the parameters are updated), and Δθ is the parameter value update.
where the sum is over the time steps of the path except the last time step, γ is the discount factor, and rj is the reward received for time step j in the path.
where the sum is over each observation in the path P except for the last observation, γ is a discount factor, and π(aj|Pj) is the selected action score for the observation Pj corresponding to the j-th time step in the path.
where V(P0) is the estimated state value estimate for the first observation in the path, V(Pd) is the estimated state value for the last observation in the path, γ is a discount factor, (d+1) is predetermined number of time steps in the path, rj is the reward received at the j-th time step in the path, τ is a hyper-parameter governing the degree of entropy regularization (as described earlier), and π(aj|Pj) is the selected action score for the j-th observation in the path.
where Δθ is the overall parameter value update, ΔθP is the parameter value update corresponding to path P from the set of obtained path data E, C(P) is the consistency error for path P, ∇θ is the gradient with respect to the parameters of the policy neural network (e.g., computed by backpropagation), j is an index over the predetermined number of time steps in each path, γ is a discount factor, and πθ(αj|Pj) is the selected action score for the j-th observation in path P (where the dependence on the parameters θ of the policy neural network is made explicit).
where Δϕ is the overall parameter value update, ΔϕP is the parameter value update corresponding to path P from the set of obtained path data E, C(P) is the consistency error for path P, ∇ϕ is the gradient with respect to the parameters of the state value neural network (e.g., computed by backpropagation), ∇ϕ(P0) is the estimated state value (i.e., as generated by the state value neural network) for the first observation in the path, ∇ϕ(Pd) is the estimated state value for the last observation in the path (where the dependence on the parameters ϕ of the state value neural network are made explicit), (d+1) is the number of predetermined steps in each path, and γ is a discount factor.
where Δλ is the overall parameter value update, ΔλP is the parameter value update corresponding to path P from the set of obtained path data E, C(P) is the consistency error for path P, A is the gradient with respect to the parameters of the Q neural network (e.g., computed by backpropagation), j is an index over the predetermined number of time steps in each path, γ is a discount factor, πλ(aj|Pj) is the selected action score for the j-th observation in path P (where the dependence on the parameters A of the Q neural network is made explicit), Vλ(P0) is the estimated state value for the first observation in the path, and Vλ(Pd) is the estimated state value for the last observation in the path (where the dependence on the parameters λ of the Q neural network is made explicit). In some implementations, different learning rates (as described with reference to 206) are applied to the first and second terms of the Q neural network parameter value update described above.
Claims (20)
Priority Applications (2)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US16/504,934 US10733502B2 (en) | 2017-02-24 | 2019-07-08 | Training policy neural networks using path consistency learning |
US16/904,785 US11429844B2 (en) | 2017-02-24 | 2020-06-18 | Training policy neural networks using path consistency learning |
Applications Claiming Priority (3)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US201762463562P | 2017-02-24 | 2017-02-24 | |
PCT/US2018/019416 WO2018156891A1 (en) | 2017-02-24 | 2018-02-23 | Training policy neural networks using path consistency learning |
US16/504,934 US10733502B2 (en) | 2017-02-24 | 2019-07-08 | Training policy neural networks using path consistency learning |
Related Parent Applications (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
PCT/US2018/019416 Continuation WO2018156891A1 (en) | 2017-02-24 | 2018-02-23 | Training policy neural networks using path consistency learning |
Related Child Applications (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
US16/904,785 Continuation US11429844B2 (en) | 2017-02-24 | 2020-06-18 | Training policy neural networks using path consistency learning |
Publications (2)
Publication Number | Publication Date |
---|---|
US20190332922A1 US20190332922A1 (en) | 2019-10-31 |
US10733502B2 true US10733502B2 (en) | 2020-08-04 |
Family
ID=61617128
Family Applications (2)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
US16/504,934 Active US10733502B2 (en) | 2017-02-24 | 2019-07-08 | Training policy neural networks using path consistency learning |
US16/904,785 Active 2038-11-25 US11429844B2 (en) | 2017-02-24 | 2020-06-18 | Training policy neural networks using path consistency learning |
Family Applications After (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
US16/904,785 Active 2038-11-25 US11429844B2 (en) | 2017-02-24 | 2020-06-18 | Training policy neural networks using path consistency learning |
Country Status (4)
Country | Link |
---|---|
US (2) | US10733502B2 (en) |
EP (1) | EP3586277B1 (en) |
CN (1) | CN110326004B (en) |
WO (1) | WO2018156891A1 (en) |
Cited By (2)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20200250493A1 (en) * | 2019-02-06 | 2020-08-06 | Samsung Electronics Co., Ltd. | Apparatus for q-learning for continuous actions with cross-entropy guided policies and method thereof |
US20210174817A1 (en) * | 2019-12-06 | 2021-06-10 | Facebook Technologies, Llc | Systems and methods for visually guided audio separation |
Families Citing this family (23)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
WO2018083667A1 (en) * | 2016-11-04 | 2018-05-11 | Deepmind Technologies Limited | Reinforcement learning systems |
US11511745B2 (en) * | 2018-04-27 | 2022-11-29 | Huawei Technologies Co., Ltd. | Method and system for adaptively controlling object spacing |
US11410030B2 (en) * | 2018-09-06 | 2022-08-09 | International Business Machines Corporation | Active imitation learning in high dimensional continuous environments |
US11568207B2 (en) | 2018-09-27 | 2023-01-31 | Deepmind Technologies Limited | Learning observation representations by predicting the future in latent space |
EP3847583A1 (en) * | 2018-10-29 | 2021-07-14 | Google LLC | Determining control policies by minimizing the impact of delusion |
US11868866B2 (en) * | 2018-11-16 | 2024-01-09 | Deep Mind Technologies Limited | Controlling agents using amortized Q learning |
CA3114632A1 (en) * | 2018-11-19 | 2020-05-28 | Deeplite Inc. | System and method for automated design space determination for deep neural networks |
CN109818856B (en) * | 2019-03-07 | 2021-07-13 | 北京西米兄弟未来科技有限公司 | Multipath data transmission method and device |
EP3756147A1 (en) * | 2019-05-15 | 2020-12-30 | Alibaba Group Holding Limited | Determining action selection policies of an execution device |
WO2020249299A1 (en) * | 2019-06-11 | 2020-12-17 | Telefonaktiebolaget Lm Ericsson (Publ) | Methods and apparatus for data traffic routing |
SE1950924A1 (en) * | 2019-08-13 | 2021-02-14 | Kaaberg Johard Leonard | Improved machine learning for technical systems |
US20210089910A1 (en) * | 2019-09-25 | 2021-03-25 | Deepmind Technologies Limited | Reinforcement learning using meta-learned intrinsic rewards |
CN110673637B (en) * | 2019-10-08 | 2022-05-13 | 福建工程学院 | Unmanned aerial vehicle pseudo path planning method based on deep reinforcement learning |
CN112699990A (en) * | 2019-10-22 | 2021-04-23 | 杭州海康威视数字技术股份有限公司 | Neural network model training method and device and electronic equipment |
CN110852438B (en) * | 2019-11-11 | 2023-08-04 | 北京百度网讯科技有限公司 | Model generation method and device |
CN112437690A (en) * | 2020-04-02 | 2021-03-02 | 支付宝(杭州)信息技术有限公司 | Determining action selection guidelines for an execution device |
CN112533681A (en) | 2020-04-02 | 2021-03-19 | 支付宝(杭州)信息技术有限公司 | Determining action selection guidelines for an execution device |
US11710276B1 (en) * | 2020-09-21 | 2023-07-25 | Apple Inc. | Method and device for improved motion planning |
CN112362066B (en) * | 2020-11-20 | 2023-02-10 | 西北工业大学 | Path planning method based on improved deep reinforcement learning |
CN113343725B (en) * | 2021-04-14 | 2022-07-19 | 厦门大学 | Anti-collision method and system for multiple RFID readers |
CN113298386B (en) * | 2021-05-27 | 2023-08-29 | 广西大学 | Distributed multi-target depth deterministic value network robot energy management method |
CN115545350B (en) * | 2022-11-28 | 2024-01-16 | 湖南工商大学 | Vehicle path problem solving method integrating deep neural network and reinforcement learning |
CN116429137A (en) * | 2023-03-22 | 2023-07-14 | 上海知而行科技有限公司 | Traversal path generation method and equipment for cleaning device |
Family Cites Families (17)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
JP4639784B2 (en) * | 2004-12-06 | 2011-02-23 | ソニー株式会社 | Learning device, learning method, and program |
CN102129397A (en) * | 2010-12-29 | 2011-07-20 | 深圳市永达电子股份有限公司 | Method and system for predicating self-adaptive disk array failure |
US9146546B2 (en) * | 2012-06-04 | 2015-09-29 | Brain Corporation | Systems and apparatus for implementing task-specific learning using spiking neurons |
JP5879899B2 (en) * | 2011-10-12 | 2016-03-08 | ソニー株式会社 | Information processing apparatus, information processing method, and program |
JP5874292B2 (en) * | 2011-10-12 | 2016-03-02 | ソニー株式会社 | Information processing apparatus, information processing method, and program |
US9679258B2 (en) * | 2013-10-08 | 2017-06-13 | Google Inc. | Methods and apparatus for reinforcement learning |
US20150134582A1 (en) * | 2013-11-08 | 2015-05-14 | Qualcomm Incorporated | Implementing synaptic learning using replay in spiking neural networks |
US20150179170A1 (en) * | 2013-12-20 | 2015-06-25 | Microsoft Corporation | Discriminative Policy Training for Dialog Systems |
US20150242741A1 (en) * | 2014-02-21 | 2015-08-27 | Qualcomm Incorporated | In situ neural network co-processing |
CN105404632B (en) * | 2014-09-15 | 2020-07-31 | 深港产学研基地 | System and method for carrying out serialized annotation on biomedical text based on deep neural network |
WO2016057480A1 (en) * | 2014-10-07 | 2016-04-14 | Google Inc. | Training neural networks on partitioned training data |
US10465931B2 (en) * | 2015-01-30 | 2019-11-05 | Schneider Electric It Corporation | Automated control and parallel learning HVAC apparatuses, methods and systems |
US10628733B2 (en) * | 2015-04-06 | 2020-04-21 | Deepmind Technologies Limited | Selecting reinforcement learning actions using goals and observations |
WO2017004626A1 (en) * | 2015-07-01 | 2017-01-05 | The Board Of Trustees Of The Leland Stanford Junior University | Systems and methods for providing reinforcement learning in a deep learning system |
CN108027897B (en) * | 2015-07-24 | 2022-04-12 | 渊慧科技有限公司 | Continuous control with deep reinforcement learning |
DE202016004627U1 (en) * | 2016-07-27 | 2016-09-23 | Google Inc. | Training a neural value network |
CN106408017A (en) * | 2016-09-13 | 2017-02-15 | 天津大学 | Ultrasonic carotid artery intima media thickness measurement device and method based on deep learning |
-
2018
- 2018-02-23 EP EP18710220.7A patent/EP3586277B1/en active Active
- 2018-02-23 WO PCT/US2018/019416 patent/WO2018156891A1/en unknown
- 2018-02-23 CN CN201880013779.7A patent/CN110326004B/en active Active
-
2019
- 2019-07-08 US US16/504,934 patent/US10733502B2/en active Active
-
2020
- 2020-06-18 US US16/904,785 patent/US11429844B2/en active Active
Non-Patent Citations (57)
Title |
---|
Abbeel et al, "Apprenticeship learning via reinforcement learning" Proceedings of the twenty-first international conference on Machine learning, 2004, 8 pages. |
Antos et al, "Learning near-optimal policies with bellman-residual minimization based fitted policy iteration and a single sample path" Machine Learning, 2008, 41 pages. |
Asadi, M. L. Littman: "A new softmax operator for reinforcement learning", arXiv: 1612.05628x3, Dec. 21, 2016 (Dec. 21, 2016), XP080745018, Retrieved from the Internet: URL: https://arxiv.org/abs.1612.05628X3 [retrieved on May 23, 2018] sections 5 and 6. |
Azar et al,: "Dynamic policy programming", arXiv, 1004.2027v2, Sep. 6, 2011 (Sep. 6, 2011), XP080445439, Retrieved from the Internet: URL: https://arxiv.org/abs/1004.2027v2 [retrieved on May 23, 2018] section 3. |
BRENDAN O'DONOGHUE; REMI MUNOS; KORAY KAVUKCUOGLU; VOLODYMYR MNIH: "PGQ: Combining policy gradient and Q-learning", ARXIV.ORG, CORNELL UNIVERSITY LIBRARY, 201 OLIN LIBRARY CORNELL UNIVERSITY ITHACA, NY 14853, 5 November 2016 (2016-11-05), 201 Olin Library Cornell University Ithaca, NY 14853, XP080729582 |
Fox et al, "Taming the noise in reinforcement learning via soft updates", arXiv: 1512.08562x3, Jan. 23, 2017 (Jan. 23, 2012), XP055477502, Retrieved from the Internet: URL: https://arxiv.org/abs/1512.08562v3 [retrieved on May 23, 2018] section 3. |
Gomez et al, "Optimal control as a graphical model inference problem" arXiv, Jan. 2012, 26 pages. |
Gruslys et al, "The reactor: A simple-efficient actor-critic architecture" arXiv, Apr. 2017, 12 pages. |
Gu et al, "Deep reinforcement learning for robotic manipulation with asynchronous off-policy updates" arXiv, Nov. 2016, 9 pages. |
Gu et al, "Q-prop: Sample-efficient policy gradient with an off-policy critic" arXiv, Feb. 2017, 13 pages. |
Haarnoja et al, "Reinforcement learning with deep energy-based policies" arXiv, Jul. 2017, 16 pages. |
Ho et al, "Generative adversarial imitation learning" arXiv, Jun. 2016, 14 pages. |
Huang et al, "Approximate maxent inverse optimal control and its application for mental simulation of human interactions" Association for the Advancement of Artificial Intelligence, 2015, 7 pages. |
JING PENG ; RONALD J. WILLIAMS: "Incremental Multi-Step Q-Learning", MACHINE LEARNING, KLUWER ACADEMIC PUBLISHERS-PLENUM PUBLISHERS, NE, vol. 22, no. 1-3, 1 January 1996 (1996-01-01), Ne, pages 283 - 290, XP019213286, ISSN: 1573-0565 |
Kakade, "A natural policy gradient" NIPS, 2001, 8 pages. |
Kappen, "Path integrals and symmetry breaking for optimal control theory" arXiv, Aug. 2005, 22 pages. |
KAVOSH ASADI; MICHAEL L. LITTMAN: "A New Softmax Operator for Reinforcement Learning", ARXIV.ORG, CORNELL UNIVERSITY LIBRARY, 201 OLIN LIBRARY CORNELL UNIVERSITY ITHACA, NY 14853, 16 December 2016 (2016-12-16), 201 Olin Library Cornell University Ithaca, NY 14853, XP080745018 |
Kober et al, "Reinforcement learning in robotics: A survey" IJRR, 2013, 38 pages. |
Levine et al, "End-to-end training of deep visuomotor policies" arXiv, Apr. 2016, 40 pages. |
Li et al, "A contextual-bandit approach to personalized news article recommendation" arXiv, Feb. 2010, 10 pages. |
Lillicrap et al, "Continuous control with deep reinforcement learning" arXiv, Feb. 2016, 14 page. |
Lin, L., "Self-Improving Reactive Agents Based on Reinforcement Learning, Planning and Teaching," 1992, Machine Learning, 8, pp. 293-321 (Year: 1992). * |
Littman, "Algorithms for sequential decision making" Thesis for the degree of Doctor of Philosophy, University of Brown University, May 1996, 283 pages. |
Mnih et al, "Asynchronous methods for deep reinforcement learning" arXiv, Jun. 2016, 19 pages. |
Mnih et al, "Human-level control through deep reinforcement learning" Nature, 2015, 13 pages. |
MOHAMMAD GHESHLAGHI AZAR; VICENC GOMEZ; HILBERT J. KAPPEN: "Dynamic Policy Programming", ARXIV.ORG, CORNELL UNIVERSITY LIBRARY, 201 OLIN LIBRARY CORNELL UNIVERSITY ITHACA, NY 14853, 12 April 2010 (2010-04-12), 201 Olin Library Cornell University Ithaca, NY 14853, XP080445439 |
Munos et al, "Safe and efficient off-policy reinforcement learning" arXiv, Nov. 2016, 18 pages. |
Nachum et al, "Imrproving policy gradient by exploring underappreciated rewards" arXiv, Nov. 2017, 21 pages. |
O'Donaghue et al: "PGQ: combining policy gradient and Q-learning", arXiv: 1611.01626v1, Nov. 5, 2016 (Nov. 5, 2016), XP080729582, Retrieved from the Internet: URL: https://arxiv.org/abs/1611.01626v1 [retrieved on May 23, 2018] sections 2-5. |
O'Donoghue, B., et al., "PGQ: Combining Policy Gradient and Q-learning," Nov. 5, 2016, arXiv:1611.01626v1 [cs.LG], pp. 1-15 (Year: 2016). * |
PCT International Preliminary Report on Patentability issued in International Application No. PCT/US2018/019416, dated Sep. 6, 2019, 10 pages. |
PCT International Search Report and Written Opinion in International Application No. PCT/US2018/019416, dated Jun. 4, 2018, 16 pages. |
Peng, R.J. Williams. "Incremental multi-step Q-learning", Machine Learning, vol. 22, No. 1-3, Mar. 1996 (Mar. 1996), pp. 283-290, XP019213286, DOI: 10.1007/BF0014731 abstract. |
Peters et al, "Relative entropy policy search" Proceedings of the Twenty-Fourth AAAI Conference on Artificial Intelligence, 2010, 6 pages. |
Precup et al, "Off-policy temporal-difference learning with function approximation" Proceedings of the 17th International Conference on Machine Learning, 2001, 8 pages. |
Precup, "Eligibility traces for off-policy policy evaluation" Computer Science Department Faculty Publication Series, 2000, 9 pages. |
Schaul et al, "Prioritized experience replay" arXiv, Feb. 2016, 21 pages. |
Schulman et al, "Equivalence between policy gradients and soft Q-leaning" arXiv, Oct. 2018, 15 pages. |
Schulman et al, "High-dimensional continuous control using generalized advantage estimation" arXiv, Sep. 2016, 14 pages. |
Schulman et al, "Trust region policy optimization" arXiv, Jun. 2015, 16 pages. |
Schulman, J., et al., "High-Dimensional Continuous Control Using Generalized Advantage Estimation," Sep. 9, 2016, arXiv: 1506.02438v5 [cs.LG], pp. 1-14 (Year: 2016). * |
Silver et al, "Deterministic policy gradient algorithms" International Conference on Machine Learning, 2014, 9 pages. |
Sutton et al, "Introduction to Reinforcement Learning" Reinforcement Learning and Artificial Intelligence Laboratory, 2017, 20 pages. |
Sutton et al, "Policy gradient methods for reinforcement learning with function approximation" NIPS, 1999, 7 pages. |
Tesauro, "Temporal difference learning and TD-gammon" Communications of ACM, Mar. 1995, 16 pages. |
Theocharous et al, "Personalized ad recommendation sysyems for life-time value optimization with guarantees" Proceedings of the Twenty-Fourth International Joint Conference on Artificial Intelligence, 2015, 7 pages. |
Todorov, "Linearly-solvable Markov decision problems" NIPS, 2006, 8 pages. |
Todorov, "Policy gradients in linearly-solvable MDPs" NIPS, 2010, 9 pages. |
Wang et al, "Dueling network architectures for deep reinforcement learning" arXiv, Apr. 2016, 15 pages. |
Wang et al, "Sample efficient actor-critic with experience replay" arXiv, Jul. 2017, 20 pages. |
Watkins et al, "Q-learning" Machine Learning, 1992, 14 pages. |
Watkins, "Learning from delayed rewards" Thesis for the degree of Doctor of Philosophy, King's College, May 1989, 241 pages. |
Williams et al, "Function optimization using connectionist reinforcement learning algorithms" Connection Science, 1991, 30 pages. |
Williams, "Simple statistical gradient-following algorithms for connectionist reinforcement learning" Machine Learning, 1992, 28 pages. |
Ziebart et al, "Maximum entropy inverse reinforcement learning" Proceedings of the Twenty-Third AAAI Conference on Artificial Learning, 2008, 6 pages. |
Ziebart, Brian D., "Modeling Purposeful Adaptive Behavior with the Principle of Maximum Causal Entropy," Dec. 2010, CMU-ML-10-110, Machine Learning Department, School of Computer Science, Carnegie Mellon University, pp. 1-216 (Year: 2010). * |
Ziebart: "Modeling purposeful adaptive behavior with the principle of maximum causal entropy", Doctoral Thesis in Computer Science at Carnegie Mellon University, Dec. 2010 (Dec. 2010), XP055477670, ISBN: 978-1-124-41421-8 parts II and III. |
Cited By (4)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20200250493A1 (en) * | 2019-02-06 | 2020-08-06 | Samsung Electronics Co., Ltd. | Apparatus for q-learning for continuous actions with cross-entropy guided policies and method thereof |
US11710301B2 (en) * | 2019-02-06 | 2023-07-25 | Samsung Electronics Co., Ltd. | Apparatus for Q-learning for continuous actions with cross-entropy guided policies and method thereof |
US20210174817A1 (en) * | 2019-12-06 | 2021-06-10 | Facebook Technologies, Llc | Systems and methods for visually guided audio separation |
US11610599B2 (en) * | 2019-12-06 | 2023-03-21 | Meta Platforms Technologies, Llc | Systems and methods for visually guided audio separation |
Also Published As
Publication number | Publication date |
---|---|
EP3586277A1 (en) | 2020-01-01 |
EP3586277B1 (en) | 2024-04-03 |
US11429844B2 (en) | 2022-08-30 |
US20190332922A1 (en) | 2019-10-31 |
US20200320372A1 (en) | 2020-10-08 |
CN110326004A (en) | 2019-10-11 |
CN110326004B (en) | 2023-06-30 |
WO2018156891A1 (en) | 2018-08-30 |
Similar Documents
Publication | Publication Date | Title |
---|---|---|
US10733502B2 (en) | Training policy neural networks using path consistency learning | |
US20200293862A1 (en) | Training action selection neural networks using off-policy actor critic reinforcement learning | |
US10860920B2 (en) | Distributional reinforcement learning | |
US11132609B2 (en) | Multi-task neural network systems with task-specific policies and a shared policy | |
US11868894B2 (en) | Distributed training using actor-critic reinforcement learning with off-policy correction factors | |
US11074481B2 (en) | Environment navigation using reinforcement learning | |
US11537887B2 (en) | Action selection for reinforcement learning using a manager neural network that generates goal vectors defining agent objectives | |
US11604997B2 (en) | Training action selection neural networks using leave-one-out-updates | |
US11663475B2 (en) | Distributional reinforcement learning for continuous control tasks | |
US11868866B2 (en) | Controlling agents using amortized Q learning | |
US11922281B2 (en) | Training machine learning models using teacher annealing | |
US20220019866A1 (en) | Controlling robots using entropy constraints | |
US20220036186A1 (en) | Accelerated deep reinforcement learning of agent control policies |
Legal Events
Date | Code | Title | Description |
---|---|---|---|
FEPP | Fee payment procedure |
Free format text: ENTITY STATUS SET TO UNDISCOUNTED (ORIGINAL EVENT CODE: BIG.); ENTITY STATUS OF PATENT OWNER: LARGE ENTITY |
|
AS | Assignment |
Owner name: GOOGLE LLC, CALIFORNIAFree format text: ASSIGNMENT OF ASSIGNORS INTEREST;ASSIGNORS:NACHUM, OFIR;NOROUZI, MOHAMMAD;SCHUURMANS, DALE ERIC;AND OTHERS;SIGNING DATES FROM 20180216 TO 20180407;REEL/FRAME:049793/0742 |
|
STPP | Information on status: patent application and granting procedure in general |
Free format text: NON FINAL ACTION MAILED |
|
STPP | Information on status: patent application and granting procedure in general |
Free format text: RESPONSE TO NON-FINAL OFFICE ACTION ENTERED AND FORWARDED TO EXAMINER |
|
STPP | Information on status: patent application and granting procedure in general |
Free format text: NOTICE OF ALLOWANCE MAILED -- APPLICATION RECEIVED IN OFFICE OF PUBLICATIONS |
|
STPP | Information on status: patent application and granting procedure in general |
Free format text: PUBLICATIONS -- ISSUE FEE PAYMENT VERIFIED |
|
STCF | Information on status: patent grant |
Free format text: PATENTED CASE |
|
MAFP | Maintenance fee payment |
Free format text: PAYMENT OF MAINTENANCE FEE, 4TH YEAR, LARGE ENTITY (ORIGINAL EVENT CODE: M1551); ENTITY STATUS OF PATENT OWNER: LARGE ENTITYYear of fee payment: 4 |