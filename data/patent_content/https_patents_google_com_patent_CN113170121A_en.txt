CN113170121A - Adaptive filtering of video streams for bit rate reduction - Google Patents
Adaptive filtering of video streams for bit rate reduction Download PDFInfo
- Publication number
- CN113170121A CN113170121A CN201980077445.0A CN201980077445A CN113170121A CN 113170121 A CN113170121 A CN 113170121A CN 201980077445 A CN201980077445 A CN 201980077445A CN 113170121 A CN113170121 A CN 113170121A
- Authority
- CN
- China
- Prior art keywords
- candidate
- video stream
- bitstream
- input video
- copy
- Prior art date
- Legal status (The legal status is an assumption and is not a legal conclusion. Google has not performed a legal analysis and makes no representation as to the accuracy of the status listed.)
- Pending
Links
- 238000001914 filtration Methods 0.000 title abstract description 30
- 230000003044 adaptive effect Effects 0.000 title abstract description 24
- 230000009467 reduction Effects 0.000 title abstract description 6
- 238000000034 method Methods 0.000 claims description 61
- 230000015654 memory Effects 0.000 claims description 23
- 230000001131 transforming effect Effects 0.000 claims description 21
- 238000004422 calculation algorithm Methods 0.000 claims description 19
- 238000005457 optimization Methods 0.000 claims description 11
- 230000002068 genetic effect Effects 0.000 claims description 8
- 238000012545 processing Methods 0.000 abstract description 22
- 238000007906 compression Methods 0.000 abstract description 9
- 230000006835 compression Effects 0.000 abstract description 8
- 230000006837 decompression Effects 0.000 abstract description 4
- 238000010586 diagram Methods 0.000 description 18
- 238000004891 communication Methods 0.000 description 11
- 230000006870 function Effects 0.000 description 10
- 238000013139 quantization Methods 0.000 description 10
- 238000007781 pre-processing Methods 0.000 description 7
- 230000008569 process Effects 0.000 description 6
- 230000005540 biological transmission Effects 0.000 description 5
- 230000004044 response Effects 0.000 description 5
- 230000009466 transformation Effects 0.000 description 5
- 230000000903 blocking effect Effects 0.000 description 3
- 230000003287 optical effect Effects 0.000 description 3
- 230000008901 benefit Effects 0.000 description 2
- 238000004364 calculation method Methods 0.000 description 2
- 230000015556 catabolic process Effects 0.000 description 2
- 230000008859 change Effects 0.000 description 2
- 238000004590 computer program Methods 0.000 description 2
- 238000007796 conventional method Methods 0.000 description 2
- 238000006731 degradation reaction Methods 0.000 description 2
- 238000013461 design Methods 0.000 description 2
- 238000012986 modification Methods 0.000 description 2
- 230000004048 modification Effects 0.000 description 2
- 238000011084 recovery Methods 0.000 description 2
- 208000037170 Delayed Emergence from Anesthesia Diseases 0.000 description 1
- 230000004075 alteration Effects 0.000 description 1
- 238000013459 approach Methods 0.000 description 1
- 230000001413 cellular effect Effects 0.000 description 1
- 239000003086 colorant Substances 0.000 description 1
- 238000009499 grossing Methods 0.000 description 1
- 230000006872 improvement Effects 0.000 description 1
- 239000004973 liquid crystal related substance Substances 0.000 description 1
- 239000004065 semiconductor Substances 0.000 description 1
- 239000007787 solid Substances 0.000 description 1
- 230000002123 temporal effect Effects 0.000 description 1
- 239000013598 vector Substances 0.000 description 1
Images
Classifications
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04N—PICTORIAL COMMUNICATION, e.g. TELEVISION
- H04N19/00—Methods or arrangements for coding, decoding, compressing or decompressing digital video signals
- H04N19/10—Methods or arrangements for coding, decoding, compressing or decompressing digital video signals using adaptive coding
- H04N19/134—Methods or arrangements for coding, decoding, compressing or decompressing digital video signals using adaptive coding characterised by the element, parameter or criterion affecting or controlling the adaptive coding
- H04N19/146—Data rate or code amount at the encoder output
- H04N19/147—Data rate or code amount at the encoder output according to rate distortion criteria
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04N—PICTORIAL COMMUNICATION, e.g. TELEVISION
- H04N19/00—Methods or arrangements for coding, decoding, compressing or decompressing digital video signals
- H04N19/10—Methods or arrangements for coding, decoding, compressing or decompressing digital video signals using adaptive coding
- H04N19/102—Methods or arrangements for coding, decoding, compressing or decompressing digital video signals using adaptive coding characterised by the element, parameter or selection affected or controlled by the adaptive coding
- H04N19/103—Selection of coding mode or of prediction mode
- H04N19/105—Selection of the reference unit for prediction within a chosen coding or prediction mode, e.g. adaptive choice of position and number of pixels used for prediction
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04N—PICTORIAL COMMUNICATION, e.g. TELEVISION
- H04N19/00—Methods or arrangements for coding, decoding, compressing or decompressing digital video signals
- H04N19/10—Methods or arrangements for coding, decoding, compressing or decompressing digital video signals using adaptive coding
- H04N19/102—Methods or arrangements for coding, decoding, compressing or decompressing digital video signals using adaptive coding characterised by the element, parameter or selection affected or controlled by the adaptive coding
- H04N19/117—Filters, e.g. for pre-processing or post-processing
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04N—PICTORIAL COMMUNICATION, e.g. TELEVISION
- H04N19/00—Methods or arrangements for coding, decoding, compressing or decompressing digital video signals
- H04N19/10—Methods or arrangements for coding, decoding, compressing or decompressing digital video signals using adaptive coding
- H04N19/169—Methods or arrangements for coding, decoding, compressing or decompressing digital video signals using adaptive coding characterised by the coding unit, i.e. the structural portion or semantic portion of the video signal being the object or the subject of the adaptive coding
- H04N19/17—Methods or arrangements for coding, decoding, compressing or decompressing digital video signals using adaptive coding characterised by the coding unit, i.e. the structural portion or semantic portion of the video signal being the object or the subject of the adaptive coding the unit being an image region, e.g. an object
- H04N19/176—Methods or arrangements for coding, decoding, compressing or decompressing digital video signals using adaptive coding characterised by the coding unit, i.e. the structural portion or semantic portion of the video signal being the object or the subject of the adaptive coding the unit being an image region, e.g. an object the region being a block, e.g. a macroblock
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04N—PICTORIAL COMMUNICATION, e.g. TELEVISION
- H04N19/00—Methods or arrangements for coding, decoding, compressing or decompressing digital video signals
- H04N19/10—Methods or arrangements for coding, decoding, compressing or decompressing digital video signals using adaptive coding
- H04N19/189—Methods or arrangements for coding, decoding, compressing or decompressing digital video signals using adaptive coding characterised by the adaptation method, adaptation tool or adaptation type used for the adaptive coding
- H04N19/19—Methods or arrangements for coding, decoding, compressing or decompressing digital video signals using adaptive coding characterised by the adaptation method, adaptation tool or adaptation type used for the adaptive coding using optimisation based on Lagrange multipliers
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04N—PICTORIAL COMMUNICATION, e.g. TELEVISION
- H04N19/00—Methods or arrangements for coding, decoding, compressing or decompressing digital video signals
- H04N19/10—Methods or arrangements for coding, decoding, compressing or decompressing digital video signals using adaptive coding
- H04N19/189—Methods or arrangements for coding, decoding, compressing or decompressing digital video signals using adaptive coding characterised by the adaptation method, adaptation tool or adaptation type used for the adaptive coding
- H04N19/192—Methods or arrangements for coding, decoding, compressing or decompressing digital video signals using adaptive coding characterised by the adaptation method, adaptation tool or adaptation type used for the adaptive coding the adaptation method, adaptation tool or adaptation type being iterative or recursive
- H04N19/194—Methods or arrangements for coding, decoding, compressing or decompressing digital video signals using adaptive coding characterised by the adaptation method, adaptation tool or adaptation type used for the adaptive coding the adaptation method, adaptation tool or adaptation type being iterative or recursive involving only two passes
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04N—PICTORIAL COMMUNICATION, e.g. TELEVISION
- H04N19/00—Methods or arrangements for coding, decoding, compressing or decompressing digital video signals
- H04N19/48—Methods or arrangements for coding, decoding, compressing or decompressing digital video signals using compressed domain processing techniques other than decoding, e.g. modification of transform coefficients, variable length coding [VLC] data or run-length data
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04N—PICTORIAL COMMUNICATION, e.g. TELEVISION
- H04N19/00—Methods or arrangements for coding, decoding, compressing or decompressing digital video signals
- H04N19/80—Details of filtering operations specially adapted for video compression, e.g. for pixel interpolation
- H04N19/82—Details of filtering operations specially adapted for video compression, e.g. for pixel interpolation involving filtering within a prediction loop
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04N—PICTORIAL COMMUNICATION, e.g. TELEVISION
- H04N19/00—Methods or arrangements for coding, decoding, compressing or decompressing digital video signals
- H04N19/85—Methods or arrangements for coding, decoding, compressing or decompressing digital video signals using pre-processing or post-processing specially adapted for video compression
Abstract
Adaptive filtering is used for video streams to reduce the bit rate. A first copy of an input video stream is encoded as a reference bitstream. Each of the plurality of candidate filters is applied to each frame of the second copy of the input video stream to produce a filtered second copy of the input video stream. The filtered second copy is encoded as a candidate bitstream. The cost values for the candidate filters are determined based on the distortion values and the bit rate differences between the candidate bit streams and the reference bit stream. The candidate bitstream corresponding to the candidate filter having the lowest of the cost values is selected as the output bitstream, which is then output or stored. The use of adaptive filters and processing of the input video stream prior to encoding may result in a reduction in bit rate, thereby improving compression, decompression, and other performance.
Description
Cross Reference to Related Applications
The present disclosure claims the benefit of U.S. provisional application No.62/784,626 filed 24.12.2018, the entire disclosure of which is incorporated herein by reference.
Background
A digital video stream may represent video using a sequence of frames or still images. Digital video can be used for a variety of applications including, for example, video conferencing, high definition video entertainment, video advertising, or user-generated video sharing. Digital video streams may contain large amounts of data and consume a large amount of computing or communication resources of a computing device for processing, transmission, or storage of video data. Various methods have been proposed to reduce the amount of data in a video stream, including encoding or decoding techniques.
Disclosure of Invention
According to an embodiment of the present disclosure, a method for encoding an input video stream into an output bitstream includes encoding a first copy of the input video stream into a reference bitstream. The method further includes comparing the input video stream and the reference bitstream to determine a first distortion value and a first bitrate for the reference bitstream. The method further includes, for each candidate filter of the plurality of candidate filters: applying the candidate filter to each frame of the second copy of the input video stream to produce a filtered second copy of the input video stream; encoding the filtered second copy of the input video stream as a candidate bitstream; comparing the input video stream with a candidate bitstream to determine a second distortion value and a second bitrate for the candidate bitstream; and determining a cost value for the candidate filter based on a difference between the first distortion value and the second distortion value and based on a difference between the first bit rate and the second bit rate. The method further comprises selecting as the output bitstream the candidate bitstream corresponding to the candidate filter having the lowest of the cost values. The method further comprises outputting or storing the output bitstream.
In some embodiments of the method, the candidate filter is obtained using at least one of a genetic algorithm, a gradient descent algorithm, or another non-linear optimization technique.
In some embodiments of the method, applying a given candidate filter to a given frame of the second copy of the input video stream to produce a filtered second copy of the input video stream comprises: transforming values within the given frame from a spatial domain to a frequency domain; applying the given candidate filter to each block of the given frame after transformation to produce filtered frequency-domain values; and inversely transforming the filtered frequency-domain values from the frequency domain to the spatial domain.
In some implementations of the method, applying the given candidate filter to each block of the frame to produce the filtered frequency-domain value includes denoising an overlapping block region of the frame using the given candidate filter.
In some embodiments of the method, the overlapped block region is a half-overlapped block region.
In some implementations of the method, determining the cost value for a given candidate filter of the plurality of candidate filters comprises: calculating a weighted value by applying a weight to a difference between the first distortion value and the second distortion value; and determining the cost value by subtracting the weighting value from a difference between the first bit rate and the second bit rate.
In some embodiments of the method, the weights are defined based on a target of the second distortion value.
According to an embodiment of the present disclosure, an apparatus for encoding an input video stream into an output bitstream includes a memory and a processor configured to execute instructions stored in the memory. The instructions include instructions to encode a first copy of the input video stream into a reference bitstream. The instructions further include instructions to compare the input video stream and the reference bitstream to determine a first distortion value and a first bitrate for the reference bitstream. The instructions further include instructions for: for each candidate filter of the plurality of candidate filters: applying the candidate filter to each frame of the second copy of the input video stream to produce a filtered second copy of the input video stream; encoding the filtered second copy of the input video stream as a candidate bitstream; comparing the input video stream with a candidate bitstream to determine a second distortion value and a second bitrate for the candidate bitstream; and determining a cost value for the candidate filter based on a difference between the first distortion value and the second distortion value and based on a difference between the first bit rate and the second bit rate. The instructions further include instructions to select a candidate bitstream corresponding to the candidate filter having the lowest of the cost values as the output bitstream. The instructions further include instructions to output or store the output bitstream.
In some embodiments of the apparatus, the candidate filter is obtained using at least one of a genetic algorithm, a gradient descent algorithm, or another non-linear optimization technique.
In some embodiments of the apparatus, the instructions to apply a given candidate filter to a given frame of the second copy of the input video stream to generate a filtered second copy of the input video stream include instructions to: transforming values within the given frame from a spatial domain to a frequency domain; applying the given candidate filter to each block of the given frame after transformation to produce filtered frequency-domain values; and inversely transforming the filtered frequency-domain values from the frequency domain to the spatial domain.
In some embodiments of the apparatus, the instructions to apply the given candidate filter to each block of the frame to produce the filtered frequency-domain value comprise instructions to: denoising an overlapping block region of the frame using the given candidate filter.
In some embodiments of the apparatus, the overlapped block region is a half-overlapped block region.
In some implementations of the apparatus, the instructions to determine the cost value for a given candidate filter of the plurality of candidate filters include instructions to: calculating a weighted value by applying a weight to a difference between the first distortion value and the second distortion value; and determining the cost value by subtracting the weighting value from a difference between the first bit rate and the second bit rate.
In some embodiments of the apparatus, the weight is defined based on a target of the second distortion value.
According to an embodiment of the present disclosure, an encoder for encoding an input video stream into an output bitstream performs an operation including encoding a first copy of the input video stream into a reference bitstream. The operations further include comparing the input video stream and the reference bitstream to determine a first distortion value and a first bitrate for the reference bitstream. The operations further include, for each candidate filter of the plurality of candidate filters: applying the candidate filter to each frame of the second copy of the input video stream to produce a filtered second copy of the input video stream; encoding the filtered second copy of the input video stream as a candidate bitstream; comparing the input video stream with a candidate bitstream to determine a second distortion value and a second bitrate for the candidate bitstream; and determining a cost value for the candidate filter based on a difference between the first distortion value and the second distortion value and based on a difference between the first bit rate and the second bit rate. The operations further include selecting a candidate bitstream corresponding to the candidate filter having the lowest of the cost values as the output bitstream. The operations further include outputting or storing the output bitstream.
In some embodiments of the encoder, the candidate filter is obtained using at least one of a genetic algorithm, a gradient descent algorithm, or another non-linear optimization technique.
In some embodiments of the encoder, applying a given candidate filter to a given frame of the second copy of the input video stream to produce a filtered second copy of the input video stream comprises: transforming values within the given frame from a spatial domain to a frequency domain; applying the given candidate filter to each block of the given frame after transformation to produce filtered frequency-domain values; and inversely transforming the filtered frequency-domain values from the frequency domain to the spatial domain.
In some embodiments of the encoder, applying the given candidate filter to each block of the frame to produce the filtered frequency-domain value comprises denoising an overlapping block region of the frame using the given candidate filter.
In some embodiments of the encoder, the overlapped block region is a half-overlapped block region.
In some implementations of the encoder, determining the cost value for a given candidate filter of the plurality of candidate filters comprises: calculating a weighted value by applying a weight to a difference between the first distortion value and the second distortion value; and determining the cost value by subtracting the weighting value from a difference between the first bit rate and the second bit rate.
In some embodiments of the encoder, the weights are defined based on a target of the second distortion value.
These and other aspects of the disclosure are disclosed in the following detailed description of the embodiments, the appended claims and the accompanying drawings.
Drawings
The description herein makes reference to the accompanying drawings described below wherein like reference numerals refer to like parts throughout the several views.
Fig. 1 is a schematic diagram of an example of a video encoding and decoding system.
Fig. 2 is a block diagram of an example of a computing device that may implement a transmitting station or a receiving station.
Fig. 3 is a diagram of an example of a video stream to be encoded and subsequently decoded.
Fig. 4 is a block diagram of an example of an encoder according to an embodiment of the present disclosure.
Fig. 5 is a block diagram of an example of a decoder according to an embodiment of the present disclosure.
Fig. 6 is a block diagram of an example of a video stream processing pipeline that uses adaptive filtering for reducing bit rate.
Fig. 7 is a block diagram of an example of operations performed to select an output bitstream using adaptive filtering.
Fig. 8A-B are flow diagrams of examples of techniques for encoding a video stream into an output bitstream using adaptive filtering.
Figure 9 is a flow diagram of an example of a technique for selecting an output bitstream based on cost values determined for candidate filters.
Detailed Description
Video compression schemes may include decomposing a respective image or frame into smaller portions, such as blocks, and generating a compressed bitstream using techniques that limit the information included in the output for the respective blocks. The compressed bitstream can be decoded to recreate the source image from the limited information. Typical video compression techniques include reducing the bit rate of the video stream, such as reducing the transmission cost of the video hosting and serving platform.
However, reducing the bit rate of the video stream typically results in a loss of quality, such that the quality of the later decompressed video stream is lower than the quality of the original video stream processed using compression techniques. For example, undesirable blocking artifacts may be introduced during compression of a video stream. In some cases, those blocking artifacts may remain in the video stream after decompression of the video stream.
In some cases, pre-processing may be performed on the video stream before the video stream is compressed using a video compression scheme. Performing pre-processing may result in improving the video quality of the fixed bit rate video stream or minimizing the bit rate of the fixed quality video stream. For example, the pre-processing may include applying a filter to the video stream to remove noise and reduce artifacts (e.g., blocks, stripes, ringing, temporal flickering, etc.) within the video stream prior to encoding the video stream into the output bitstream. However, such filter-based approaches use fixed filters, which depend on a selected bit rate and/or a selected quality of the video stream. Therefore, typical fixed filters as used in video stream pre-processing cannot minimize bit rate or maximize quality.
Furthermore, the parameters used by such fixed filters depend on the content of the image blocks within the frames of the video stream. Thus, a typical fixed filter is generally more useful in removing artifacts from video edge textures than when removing artifacts from homogeneous regions of an image block. However, conventional methods for estimating fixed filter parameters often cause undesirable distortion within frames of a video stream, and may also affect the compression process in a complex and non-linear manner.
Embodiments of the present invention address such problems by using adaptive filtering to pre-process the video stream to reduce the bit rate. A first copy of an input video stream is encoded as a reference bitstream. Each of the plurality of candidate filters is applied to each frame of the second copy of the input video stream to produce a filtered second copy of the input video stream. The filtered second copy is encoded as a candidate bitstream. The cost values for the candidate filters are determined based on the distortion values and the bit rate differences between the candidate bit streams and the reference bit stream. A candidate bitstream corresponding to the candidate filter having the lowest cost value among the cost values is selected as an output bitstream, and then the bitstream is output or stored. The use of adaptive filters and processing of the input video stream prior to encoding may result in a reduction in bit rate, thereby improving compression, decompression, and other performance.
More details of techniques for adaptive filtering of video streams to reduce bit rates are first described herein with reference to systems in which they may be implemented. Fig. 1 is a schematic diagram of an example of a video encoding and decoding system 100. Transmitter station 102 may be, for example, a computer with an internal configuration of hardware, such as that described in fig. 2. However, other implementations of transmitting station 102 are possible. For example, the processing of transmitting station 102 may be distributed among multiple devices.
In one example, the receiving station 106 may be a computer with an internal configuration of hardware, such as that described in FIG. 2. However, other suitable implementations of the receiving station 106 are possible. For example, the processing of the receiving station 106 may be distributed among multiple devices.
Other implementations of the video encoding and decoding system 100 are possible. For example, one embodiment may omit network 104. In another embodiment, the video stream may be encoded and then stored for transmission at a later time to the receiving station 106 or any other device having memory. In one embodiment, the receiving station 106 receives the encoded video stream (e.g., via the network 104, a computer bus, and/or some communication path) and stores the video stream for later decoding. In an exemplary embodiment, the real-time transport protocol (RTP) is used for the transmission of encoded video over the network 104. In another embodiment, transport protocols other than RTP may be used (e.g., hypertext transport protocol (HTTP-based) video streaming protocols).
For example, when used in a videoconferencing system, transmitting station 102 and/or receiving station 106 may include the capability to both encode and decode video streams as described below. For example, receiving station 106 may be a video conference participant that receives an encoded video bitstream from a video conference server (e.g., transmitting station 102) for decoding and viewing, and further encodes and transmits his or her own video bitstream to the video conference server for decoding and viewing by other participants.
In some implementations, the video encoding and decoding system 100 can alternatively be used to encode and decode data other than video data. For example, the video encoding and decoding system 100 may be used to process image data. The image data may include blocks of data from an image. In such embodiments, transmitting station 102 may be used to encode image data, and receiving station 106 may be used to decode image data.
Alternatively, receiving station 106 may represent a computing device that stores the encoded image data for later use (such as after receiving the encoded or pre-encoded image data from transmitting station 102). As yet another alternative, transmitting station 102 may represent a computing device that decodes the image data, such as before sending the decoded image data to receiving station 106 for display.
Fig. 2 is a block diagram of an example of a computing device 200 that may implement a transmitting station or a receiving station. For example, computing device 200 may implement one or both of transmitting station 102 and receiving station 106 of fig. 1. Computing device 200 may be in the form of a computing system including multiple computing devices, or in the form of one computing device (e.g., a mobile phone, a tablet computer, a laptop computer, a notebook computer, a desktop computer, etc.).
The processor 202 in the computing device 200 may be a conventional central processing unit. Alternatively, processor 202 may be another type of device or devices capable of manipulating or processing information now known or later developed. For example, although the disclosed embodiments may be implemented with one processor (e.g., processor 202) as shown, speed and efficiency advantages may be realized by using more than one processor.
In an embodiment, the memory 204 in the computing device 200 may be a Read Only Memory (ROM) device or a Random Access Memory (RAM) device. However, other suitable types of storage devices may be used as memory 204. The memory 204 may include code and data 206 that are accessed by the processor 202 using the bus 212. Memory 204 may further include an operating system 208 and application programs 210, application programs 210 including at least one program that allows processor 202 to perform the techniques described herein. For example, the application programs 210 may include application 1 through application N, which further include video and/or image coding applications that perform the techniques described herein.
Although fig. 2 depicts the processor 202 and memory 204 of the computing device 200 as being integrated into one unit, other configurations may be utilized. The operations of processor 202 may be distributed across multiple machines (where an individual machine may have one or more processors) that may be coupled directly or across a local area network or other network. Memory 204 may be distributed across multiple machines, such as a network-based memory or memory in multiple machines that perform operations for computing device 200.
Although depicted as one bus herein, bus 212 of computing device 200 may comprise a plurality of buses. In addition, secondary storage 214 may be directly coupled to other components of computing device 200 or may be accessible via a network and may include an integrated unit (such as a memory card) or multiple units (such as multiple memory cards). Computing device 200 may be implemented in a wide variety of configurations.
Fig. 3 is a diagram of an example of a video stream 300 to be encoded and then decoded. The video stream 300 includes a video sequence 302. In the next stage, the video sequence 302 includes a plurality of adjacent frames 304. Although three frames are described as adjacent frames 304, the video sequence 302 may include any number of adjacent frames 304. The adjacent frame 304 may then be further subdivided into individual frames, such as frame 306.
At a next stage, the frame 306 may be divided into a series of planes or slices 308. For example, the segments 308 may be a subset of frames that allow for parallel processing, for example. The segment 308 may also be a subset of a frame that may separate the video data into separate colors. For example, a frame 306 of color video data may include a luminance plane and two chrominance planes. The segments 308 may be sampled at different resolutions.
Regardless of whether the frame 306 is divided into segments 308, the frame 306 may be further subdivided into blocks 310, which blocks 310 may contain data corresponding to, for example, 16x16 pixels in the frame 306. The block 310 may also be arranged to include data from one or more segments 308 of pixel data. The blocks 310 may also have any other suitable size, such as 4x4 pixels, 8x8 pixels, 16x8 pixels, 8x16 pixels, 16x16 pixels, or larger. The terms block and macroblock are used interchangeably herein unless otherwise specified.
Fig. 4 is a block diagram of an example of an encoder 400. As described above, encoder 400 may be implemented in transmitting station 102, such as by providing a computer software program stored in a memory (e.g., memory 204). The computer software program may include machine instructions that, when executed by a processor, such as processor 202, cause transmitting station 102 to encode video data in the manner described in fig. 4. Encoder 400 may also be implemented as dedicated hardware included, for example, in transmitting station 102. In one particularly preferred embodiment, encoder 400 is a hardware encoder.
The encoder 400 has the following stages that perform various functions in the forward path (shown by the solid connecting lines) to use the video stream 300 as input to produce an encoded or compressed bitstream 420: an intra/inter prediction stage 402, a transform stage 404, a quantization stage 406, and an entropy coding stage 408. The encoder 400 may also include a reconstruction path (shown by the dashed connecting lines) to reconstruct the frame used to encode future blocks. In fig. 4, the encoder 400 has the following stages that perform various functions in the reconstruction path: a dequantization stage 410, an inverse transform stage 412, a reconstruction stage 414, and a loop filtering stage 416. Other structural variations of the encoder 400 may be used to encode the video stream 300.
In some cases, the functions performed by encoder 400 may occur after filtering video stream 300. That is, prior to the video stream 300 being received by the encoder 400, the video stream 300 may undergo pre-processing in accordance with one or more embodiments of the present disclosure. Alternatively, the encoder 400 itself may perform such pre-processing on the video stream 300 before continuing to perform the functions described with reference to fig. 4, such as processing the video stream 300 in the intra/inter prediction stage 402.
When the video stream 300 is presented for encoding after performing pre-processing, respective adjacent frames 304, such as the frame 306, may be processed in units of blocks. At the intra/inter prediction stage 402, the corresponding block may be encoded using intra prediction (also referred to as intra prediction) or inter prediction (also referred to as inter prediction). In any case, a prediction block may be formed. In the case of intra prediction, the prediction block may be formed from samples in the current frame that have been previously encoded and reconstructed. In the case of inter-prediction, the prediction block may be formed from samples in one or more previously constructed reference frames.
Next, the prediction block may be subtracted from the current block at the intra/inter prediction stage 402 to generate a residual block (also referred to as a residual). The transform stage 404 uses a block-based transform to transform the residual into, for example, transform coefficients in the frequency domain. The quantization stage 406 uses a quantizer value or quantization stage to convert the transform coefficients into discrete quantum values, which are referred to as quantized transform coefficients. For example, the transform coefficients may be divided by the quantizer values and truncated.
The quantized transform coefficients are then entropy encoded by entropy encoding stage 408. The entropy encoded coefficients are then output to the compressed bitstream 420 along with other information used to decode the block, which may include, for example, syntax elements such as are used to indicate the type of prediction used, the type of transform, motion vectors, quantizer values, etc. The compressed bitstream 420 may be formatted using various techniques, such as Variable Length Coding (VLC) or arithmetic coding. The compressed bitstream 420 may also be referred to as an encoded video stream or an encoded video bitstream, and these terms will be used interchangeably herein.
The reconstruction path (shown by the dashed connecting lines) may be used to ensure that both the encoder 400 and the decoder 500 (described below with reference to fig. 5) use the same reference frame to decode the compressed bitstream 420. The reconstruction path performs functions similar to those performed during the decoding process (described below with reference to fig. 5), including dequantizing the quantized transform coefficients at a dequantization stage 410 and inverse transforming the dequantized transform coefficients at an inverse transform stage 412 to produce a block of derivative residues (also referred to as derivative residuals).
At the reconstruction stage 414, the predicted block predicted at the intra/inter prediction stage 402 may be added to the derivative residual to create a reconstructed block. The loop filtering stage 416 may apply in-loop filters or other filters to the reconstructed block to reduce distortion such as block artifacts. Examples of filters that may be applied at loop filtering stage 416 include, but are not limited to: deblocking filters as in AVC, HEVC, VP9, and AV 1; constrained direction enhancement filters as in AV 1; and a loop recovery filter as in AV 1.
Other variations of the encoder 400 may be used to encode the compressed bitstream 420. In some implementations, the non-transform based encoder can quantize the residual signal directly for certain blocks or frames without the transform stage 404. In some implementations, the encoder may have the quantization stage 406 and the dequantization stage 410 combined into a common stage.
Fig. 5 is a block diagram of an example of a decoder 500. The decoder 500 may be implemented in the receiving station 106, for example, by providing a computer software program stored in the memory 204. The computer software program may include machine instructions that, when executed by a processor, such as processor 202, cause receiving station 106 to decode video data in the manner described in fig. 5. Decoder 500 may also be implemented in hardware included in, for example, transmitting station 102 or receiving station 106.
Similar to the reconstruction path of the encoder 400 discussed above, the decoder 500 in one example includes the following stages that perform various functions to generate the output video stream 516 from the compressed bitstream 420: an entropy decoding stage 502, a dequantization stage 504, an inverse transform stage 506, an intra/inter prediction stage 508, a reconstruction stage 510, a loop filtering stage 512, and a post-filter stage 514. Other structural variations of the decoder 500 may be used to decode the compressed bitstream 420.
When the compressed bitstream 420 is presented for decoding, data elements within the compressed bitstream 420 may be decoded by the entropy decoding stage 502 to produce a set of quantized transform coefficients. Dequantization stage 504 dequantizes the quantized transform coefficients (e.g., by multiplying the quantized transform coefficients by quantizer values), and inverse transform stage 506 inverse transforms the dequantized transform coefficients to produce derivative residuals, which may be the same as the derivative residuals created by inverse transform stage 412 in encoder 400. Using the header information decoded from the compressed bitstream 420, the decoder 500 may use the intra/inter prediction stage 508 to create the same prediction block as was created in the encoder 400 (e.g., at the intra/inter prediction stage 402).
At the reconstruction stage 510, the prediction block may be added to the derivative residual to create a reconstructed block. A loop filtering stage 512 may be applied to the reconstructed block to reduce blocking artifacts. Examples of filters that may be applied at loop filtering stage 512 include, but are not limited to: deblocking filters as in AVC, HEVC, VP9, and AV 1; constrained direction enhancement filters as in AV 1; and a loop recovery filter as in AV 1.
Other filtering may be applied to the reconstructed block. In this example, a post-filter stage 514 is applied to the reconstructed block to reduce block distortion, and the result is output as an output video stream 516. The output video stream 516 may also be referred to as a decoded video stream, and these terms will be used interchangeably herein.
Other variations of the decoder 500 may be used to decode the compressed bitstream 420. In some implementations, the decoder 500 may generate the output video stream 516 without the post-filter stage 514.
Fig. 6 is a block diagram of an example of a video stream processing pipeline 600 that uses adaptive filtering to reduce bit rate. Pipeline 600 may include or be used in conjunction with an encoder (e.g., encoder 400 shown in fig. 4). At the beginning of the pipeline 600, an input video stream 602 is received. The input video stream 602 may be, for example, the video stream 300 shown in fig. 4. The input video stream 602 is replicated to obtain a first video stream replica 604 and a second video stream replica 606. Initially, the first video stream replica 604 and the second video stream replica 606 represent identical replicas of the input video stream 602.
In the encoding stage 608 of the pipeline 600, the first video stream copy 604 is encoded into a reference bitstream 610. The encoding stage 608 may include one or more stages of an encoder (e.g., encoder 400) at which data of the first video stream replica 604 is processed. For example, the encoding stages 608 may include at least a prediction stage, a transform stage, a quantization stage, and an entropy coding stage (e.g., the intra/inter prediction stage 402, transform stage 404, quantization stage 406, and entropy coding stage 408 shown in fig. 4).
The reference bitstream 610 is a compressed bitstream, such as the compressed bitstream 420 output from the encoding stage shown in fig. 4. The first video stream copy 604 is encoded as a reference bitstream 610 using a defined transcoding setting, such as a constant quality setting, a constant rate factor setting, or both. The input video stream 602 and the reference bitstream 610 may be compared to determine a distortion value and a bitrate for the reference bitstream 610. The distortion value represents a measure of an amount of distortion introduced to the input video stream by encoding a first copy of the input video stream into a reference bitstream. The bit rate represents a measure of the number of bits used to transmit the reference bit stream per unit of time (e.g., seconds).
The distortion value of the reference bitstream 610 may be determined using one of a variety of error calculation techniques. For example, the distortion value may be a peak signal-to-noise ratio (PSNR) metric, a Mean Square Error (MSE) metric, a Structural Similarity Index (SSI) metric, or another metric determined using a different error calculation technique. Conventional methods may be used to determine PSNR, MSE, SSI or other distortion metrics disclosed herein, as applicable.
At the adaptive filtering stage 612 of the pipeline 600, the second video stream replica 606 is processed. The adaptive filtering stage 612 includes a filter application stage 614, an encoding stage 616, and a bitstream selection stage 618. The filter application stage 614 and the encoding stage 616 include operations that are repeated for each of a plurality of candidate filters, such as encoding a different copy of the second video stream copy 606 as candidate bitstreams, where each candidate bitstream corresponds to one of the candidate filters and is generated using one of the candidate filters. Bitstream selection stage 618 includes operations performed after candidate bitstreams are generated, such as selecting one of those candidate bitstreams as output bitstream 620.
In the filter application stage 614, a candidate filter is applied to each video frame of the second video stream replica 606. Applying the candidate filter to each video frame of the second video stream replica 606 results in at least some data changes of the second video stream replica 606. For example, applying the candidate filter may introduce many blurring artifacts within the second video stream copy 606. In another example, applying the candidate filter may introduce an amount of noise within the second video stream replica 606. In yet another example, applying the candidate filter enhances the sharpness of some or all of the image objects within the second video stream replica 606.
The candidate filter is a two-dimensional filter of size MxN, where M and N may be the same number or different numbers. Each candidate filter may have the same size. Alternatively, some candidate filters may have different sizes from each other. As another alternative, in some cases, each candidate filter may have a different size.
The candidate filter includes a plurality of coefficients. The specific number of coefficients of the candidate filter depends on the size of the candidate filter. For example, a filter of size 32x32 includes 1,024 coefficients. Each coefficient of the candidate filter has a value ranging from 0 to 1 (including 0 and 1). Thus, the values of the coefficients of the candidate filter represent smoothing weights that are applied to pixel values within the video frames of the second video stream replica 606.
Some or all of the candidate filters may be obtained using non-linear optimization techniques. For example, one or more of a genetic algorithm, a gradient descent algorithm, or another non-linear optimization technique may be used to obtain some or all of the candidate filters. Alternatively, the candidate filters may be obtained from a list defining candidate filters to be applied to the second video stream replica 606. For example, a look-up table, object symbol file, or other data source may indicate candidate filters to use.
Applying the candidate filter results in a degradation of the quality of the second video stream copy 606. Thus, after applying the candidate filter, the resulting filtered second video stream copy has a lower quality than the second video stream copy 606. The degradation caused by applying the filter may be related to video data that is difficult or relatively difficult for a human viewer to perceive.
Each candidate filter may correspond to a different type of change made to the data within the second video stream replica 606. In some cases, two or more candidate filters may correspond to the same type of change, but represent different sizes or degrees thereof. For example, both the first and second filters may correspond to adding blurring artifacts, where the first filter adds a first amount of blurring artifacts and the second filter adds a second amount of blurring artifacts. In another example, the first filter may add a first amount of blurring artifacts to each video frame of the second video stream copy 606, and the second filter may add a second amount of blurring artifacts to each video frame of the second video stream copy 606.
In the encoding stage 616, the filtered second video stream replica is encoded as a candidate bitstream after the filtered second video stream replica is generated by applying the candidate filter to the second video stream replica 606. The encoding stage 616 may include one or more stages of an encoder (e.g., encoder 400) at which data of the filtered second video stream replica is processed. For example, the encoding stages 616 may include at least a prediction stage, a transform stage, a quantization stage, and an entropy coding stage (e.g., intra/inter prediction stage 402, transform stage 404, quantization stage 406, and entropy coding stage 408).
Candidate bit streams are generated for each filtered copy of the second video stream. The candidate bitstream is a compressed bitstream, such as compressed bitstream 420. The filtered second video stream copy may be encoded as a candidate bitstream using a defined transcoding setting, e.g., a constant quality setting, a constant rate factor setting, or both. Alternatively, the filtered copy of the second video stream may be encoded as a candidate bitstream using the transcoding settings of the corresponding candidate filter.
After the candidate bitstreams are generated, one of those candidate bitstreams is selected as an output bitstream 620, which may be, for example, output or stored for further processing (e.g., using a decoder such as decoder 500 shown in fig. 5), at bitstream selection stage 618. The output bitstream 620 is selected based on the cost values determined for each candidate bitstream.
To determine the cost values for the candidate bitstreams, the candidate bitstreams are first compared with the input video stream 602, such as to determine the distortion values and bitrates of the candidate bitstreams. The distortion value represents a measure of the amount of distortion introduced to the second video stream replica 606 by applying the corresponding candidate filter and then encoding the filtered second video stream replica as a reference bitstream. The bit rate represents a measure of the number of bits used to transmit the candidate bit stream per unit of time (e.g., seconds). The distortion value for each candidate bitstream may be determined using PSNR, MSE, SSI or another distortion metric technique.
After determining the distortion value and the bit rate of the candidate bitstream, the cost value of the candidate bitstream may be determined based on a difference between the distortion value of the reference bitstream 610 and the distortion value of the candidate bitstream and further based on a difference between the bit rate of the reference bitstream 610 and the bit rate of the candidate bitstream. After the cost values are determined for each candidate bitstream, the candidate bitstream with the lowest cost value of the cost values is selected as the output bitstream 620.
Other variations of 600 may be used to encode the input video stream 602 into the output bitstream 620. As described herein, the candidate bitstream may be iteratively generated, such as by applying candidate filters to the second video stream copy 606 individually, and then encoding the resulting filtered second video stream copy into the candidate bitstream individually. However, in some embodiments, the candidate bitstream may be generated after all of the filtered second video stream copies are generated by filter application stage 614.
For example, instead of employing each candidate filter to apply it to the second video stream replica 606 and then encoding the resulting filtered second video stream replica as a candidate bitstream, the filter application stage 614 may generate a filtered second video stream replica for some or all of the candidate filters. After the filter application stage 614 has completed its processing, an encoding stage 616 may receive each filtered copy of the second video stream and encode each of them as a respective candidate bitstream.
In some implementations, one or more of the filter application stage 614, the encoding stage 616, or the bitstream selection stage 618 can be external to the adaptive filtering stage 612. For example, the adaptive filtering stage may be limited to applying the candidate filter to a separate copy of the second video stream copy 606. In such embodiments, the input to the encoding stage 616 may be the output of the adaptive filtering stage 612.
In some implementations, pipeline 600 may include a cost value determination stage separate from bitstream selection stage 618. For example, the cost value determination stage may perform the operations described above with reference to bitstream selection stage 618, such as for determining cost values for candidate filters and corresponding candidate bitstreams. The cost value determination stage may be part of the adaptive filtering stage 612 or may occur after the adaptive filtering stage 612 in the pipeline 600.
In some embodiments, the encode stage 608 and the encode stage 616 may be replaced by a single encode stage of the pipeline 600. For example, the encoding stage may receive the first video stream copy 604 as input and output the reference bitstream 610. Similarly, the encoding stage may receive the filtered second video stream copy produced by the filter application stage 614 and output a candidate bitstream, such as for further processing at the bitstream selection stage 618.
Fig. 7 is a block diagram of an example of operations performed to select an output bitstream using adaptive filtering. For example, the operations shown and described with reference to fig. 7 may represent operations performed at one or more of the filter application stage 614, the encoding stage 616, and/or the bitstream selection stage 618 shown in fig. 6. The operations shown and described with reference to fig. 7 are performed to encode an input video stream into an output bitstream 700, such as by using a video stream copy 702 representing a copy of the input video stream, to generate candidate bitstreams that are selected as the output bitstream 700. For example, the output bitstream 700 and the video stream copy 702 may be the output bitstream 620 and the second video stream copy 606, respectively, shown in fig. 6.
The first part of the processing includes a transform stage 704, a candidate filter application stage 706 and an inverse transform stage 708, which perform the operations of generating a filtered copy 710 of the video stream. That is, a first portion of the processing is performed to apply a candidate filter to each frame of the video stream replica 702 to produce a filtered video stream replica 710.
For a given frame of the video stream replica 702, each block of the frame is transformed from the spatial domain to the frequency domain in a transform stage 704. Transforming a given block of a frame may include applying a two-dimensional fast fourier transform or similar transform to pixel values within the block. After transforming the pixel values to the frequency domain, the candidate filters are applied to produce filtered frequency domain values, at a candidate filter application stage 706. The filtered frequency-domain values are then inverse transformed in an inverse transform stage 708 to return those values to the spatial domain. The output of the inverse transform is a filtered video stream replica 710.
Applying the candidate filter to a given frame of video stream replica 702 includes dividing the frame into a plurality of overlapping blocks of size PxQ, where P and Q may be the same number or different numbers. The candidate filters are then applied to overlapping block regions of the frame, such as to denoise those block regions. The overlapping block region overlap may be a half overlap, a quarter overlap, or another amount of overlap. The denoising filter may be applied sequentially to overlapping block regions of the frame, in raster order or another order.
For example, for a frame of size 1,024x1,024 and a denoising filter of size 32x32, the filter is first applied to the block region of the frame from pixel position [0,0] to [312,312 ]. The next block region of the frame to which the denoising filter is applied is from pixel positions [16,0] to [478,312 ]. This will be repeated until the final application at the block region from pixel position [992,992] to [10,234,10,234 ]. Alternatively, the size of the denoising filter and/or the degree to which adjacent block regions overlap may vary for each block region. For example, the degree of overlap may be defined as a specific hysteresis with parameter values varying between 0 and N-1 in each individual direction.
The second part of the process includes an encoding stage 712 in which the filtered video stream replica 710 is encoded into a candidate bitstream 714. The encoding stage 712 may be, for example, the encoding stage 616 shown in fig. 6. For example, the encoding stage 712 may perform one or more operations for processing data of the filtered video stream replica 710 to generate the candidate bitstream 714.
The third part of the processing comprises a bitstream comparison stage 716 and a cost value determination stage 718. In the bitstream comparison stage 716, the candidate bitstream 714 and the input video stream are compared to determine a distortion value and a bitrate for the candidate bitstream 714. In the cost value determination stage 718, the distortion value and the bitrate of the candidate bitstream 714 are used to determine cost values for the candidate bitstream 714 (and thus for the candidate filters used to generate the candidate bitstream 714).
For example, the cost value for the candidate bitstream 714 (and thus for the corresponding candidate filter) may be calculated as:
E(F)＝B(T′)-α(D(T′)-D(T))
where F is the candidate filter, e (F) is the cost value, T is the reference bitstream (e.g., reference bitstream 610 shown in fig. 6), T ' is the candidate bitstream 714, B (T ') is the bitrate of T ', D (T ') is the measured distortion value for T ', D (T) is the measured distortion value for T ', and α is the weight applied to the difference of distortion values D (T ') and D (T). The value of alpha may be defined based on a target bitrate for the video stream copy 702. For example, the value of α that results in certain distortion values may be empirically identified.
In some cases, the difference between the distortion value of the reference bitstream and the distortion value of the candidate bitstream 714 may be non-linear. That is, whether the difference between those distortion values results in significant quality or bit rate reduction may depend on the distortion range in which the difference falls. For example, the difference between those distortion values is most pronounced in cases where they are each between 30 and 45 decibels. A difference of less than 25 db results in a significant quality loss that negatively impacts the appearance of the video stream. A difference of more than 50 db may result in a quality improvement that is hardly noticeable to a human viewer. Thus, reducing the distortion value while maintaining above 50 db may allow for deeper bit rate reduction. However, as the quality difference becomes more and more apparent below 50 db, there is less opportunity to reduce the bit rate without affecting the video stream quality.
After determining the cost value for candidate bitstream 714, it is determined whether the cost value is the lowest cost value calculated so far for the candidate bitstream. If so, the candidate bitstream 714 is stored as the best candidate bitstream. Otherwise, the candidate bitstream 714 is discarded or otherwise not used further.
For example, cost values may be iteratively determined for N candidate bit streams generated using respective N candidate filters. After a given cost value has been determined for a given candidate bitstream, this cost value may be compared with a stored cost value representing the lowest cost value determined for the N-X candidate bitstreams that has been processed so far by the cost value determination stage 718. If the given cost value is lower than the stored cost value, the candidate bitstream is stored to replace the previously stored candidate bitstream. After the final (i.e., nth) candidate bitstream is processed, the stored candidate bitstreams are selected as output bitstreams 700.
Other variations of the process shown in fig. 7 may be used to select the output bitstream 700. In some embodiments, non-linear optimization techniques may be used to obtain the candidate filters. For example, one or more of a genetic algorithm, a gradient descent algorithm, or another non-linear optimization technique may be used to obtain some or all of the candidate filters. In some embodiments, the candidate filters may be obtained using optimization operations other than non-linear processing. For example, the candidate filters may be obtained using a gradient distance function, a lagrangian function, a linear search function (e.g., using constrained parameters), and so on. For example, using a linear search function, the value of α may be increased stepwise from 0 to 1 in 0.1 or other increments. In this way, a different candidate bitstream may be determined for each incremental step of α.
More details of techniques for adaptive filtering of video streams to reduce bit rates are now described. Fig. 8A-B are flow diagrams of examples of techniques 800 for encoding a video stream into an output bitstream using adaptive filtering. Figure 9 is a flow diagram of an example of a technique 900 for selecting an output bitstream based on cost values determined for candidate filters.
For simplicity of explanation, both technique 800 and technique 900 are depicted and described herein as a series of steps or operations. However, steps or operations in accordance with the present disclosure may occur in various orders and/or concurrently. In addition, other steps or operations not presented and described herein may be used. Moreover, not all illustrated steps or operations may be required to implement a technique in accordance with the disclosed subject matter.
Referring first to fig. 8A-B, a technique 800 for encoding an input video stream into an output bitstream using adaptive filtering is shown. At 802, a first copy of an input video stream is encoded into a reference bitstream. The first copy of the input video stream is an identical copy of the input video stream. Encoding the first copy of the input video stream into the reference bitstream may include performing prediction, transform, quantization, and entropy coding operations on frames of the first copy of the input video stream using an encoder (e.g., encoder 400 shown in fig. 4).
At 804, the input video stream and the reference bitstream are compared to determine a distortion value and a bitrate for the reference bitstream. The distortion value represents a measure of the amount of distortion introduced to the input video stream by encoding a first copy of the input video stream into a reference bitstream. The bit rate represents a measure of the number of bits used to transmit the reference bit stream per unit time (e.g., seconds).
At 806, the candidate filter is applied to a second copy of the input video stream to produce a filtered second copy of the input video stream. The filtered second copy of each input video stream corresponds to the single candidate filter used to generate it. Applying the candidate filter to the second copy of the input video stream includes, for each frame of the second copy of the input video stream, first transforming values within the frame from a spatial domain to a frequency domain. After transformation, the candidate filter is applied to each block of the frame to produce a filtered frequency-domain value. The filtered frequency-domain values are then inverse transformed from the frequency domain to the spatial domain. The inverse transform value for each frame represents the value of the filtered second copy of the input video stream. A filtered second copy of the input video stream is generated for some or all of the candidate filters.
At 808, the filtered second copy of the input video stream is encoded as a candidate bitstream. Encoding the filtered second copy of the input video stream as the candidate bitstream may include performing prediction, transform, quantization, and entropy coding operations on the filtered second copy of the input video stream using an encoder (e.g., encoder 400 shown in fig. 4).
At 810, a distortion value and a bit rate are determined for each candidate bit stream. A distortion value and a bit rate of the candidate bitstream are determined by comparing the candidate bitstream to the input video stream. The distortion value represents a measure of the amount of distortion introduced to the input video stream by applying the corresponding candidate filter and then encoding the filtered second copy of the input video stream into a candidate bitstream. The bit rate represents a measure of the number of bits used to transmit the candidate bit stream per unit of time (e.g., seconds).
At 812, a cost value is determined for each candidate bitstream, and thus for each candidate filter applied to the second copy of the input video stream. Determining a cost value for the candidate bitstream based on a difference between the distortion value of the reference bitstream and the distortion value of the candidate bitstream and further based on a difference between a bitrate of the reference bitstream and a bitrate of the candidate bitstream. In particular, the weighting value is calculated by applying a weight to a difference between the distortion value of the reference bitstream and the distortion value of the candidate bitstream. The cost value of the candidate bitstream may then be determined by subtracting a weighting value from the difference between the bit rate of the reference bitstream and the bit rate of the candidate bitstream.
At 814, the candidate bitstream with the lowest of the cost values is selected as the output bitstream of the input video stream. Hereinafter, an embodiment and an example for selecting an output bitstream, including by iterating candidate bitstreams, are described with reference to fig. 9.
At 816, the output bitstream is output or stored. For example, the output bitstream may be sent to a decoder, such as for decoding the output bitstream into an output video stream. In another example, the output bitstream may be stored, such as for later use.
In some implementations, some or all of the operations described with respect to the technique 800 may be performed on individual candidate filters and then repeated on subsequent candidate filters. For example, the operations for applying the candidate filter to the second copy of the input video stream, encoding the filtered second copy of the input video stream as a candidate bitstream, determining a distortion value and a bitrate for the candidate bitstream, and determining a cost value for the candidate bitstream may be performed separately and iteratively for each candidate filter. For example, after the cost value for the xth candidate bitstream has been determined, then the technique may proceed to apply the xth +1 candidate filter to the second copy of the input video stream, and so on.
Referring next to fig. 9, a technique 900 for selecting an output bitstream based on cost values determined for candidate filters is illustrated. At 902, a copy of an input video stream is received. For example, the copy of the input video stream may be the video stream copy 702 shown in FIG. 7. The copy of the input video stream may represent a copy of the input video stream received at the encoder. Receiving a copy of the input video stream may include computational aspects of an encoder such as an adaptive filtering stage (e.g., adaptive filtering stage 612 shown in fig. 6) receiving a copy of the input video stream.
At 904, the nth filter is applied to each frame of the copy of the input video stream. The nth filter is one of many candidate filters that may be used to filter a copy of the input video stream. Applying the nth filter to each frame of the copy of the input video stream may include, for each such frame, transforming values within the given frame from the spatial domain to the frequency domain, applying a given candidate filter to each block of the given frame, thereby producing filtered frequency-domain values, and then inverse transforming the filtered frequency-domain values from the frequency domain to the spatial domain.
At 906, cost values are determined for candidate bitstreams generated after applying the nth filter to the copy of the input video stream. In particular, after applying the nth filter to the copy of the input video stream, the resulting filtered copy of the input video stream is encoded as a candidate bitstream (e.g., using an encoder such as encoder 400 shown in fig. 4). The input video stream is then compared with the candidate bit streams to determine the distortion value and bit rate of the candidate bit streams. The cost value is then determined based on a difference between the distortion value and the bit rate determined for the candidate bit stream and the distortion value and the bit rate determined for the reference bit stream.
At 908, it is determined whether the cost value resulting from applying the nth filter is the lowest cost value determined for candidate bitstreams generated using the N candidate filters. For example, the current lowest cost value resulting from applying the Nth-X filter to produce the Nth-X candidate bit stream may be stored in a buffer or other data store. Determining whether the cost value of the nth candidate bitstream is the lowest cost value may include comparing the cost value to stored cost values. The cost value of the nth candidate bitstream is the lowest cost value if it is lower than the stored cost values.
At 910, the nth candidate bitstream is stored in response to determining that the cost value of the nth candidate bitstream is the lowest cost value. Storing the nth candidate bit stream includes storing the nth candidate bit stream in a buffer or other data store to replace the nth-X candidate bit stream previously stored therein. For example, the nth candidate bitstream itself may be stored and/or an index or other indicator of the nth candidate bitstream may be stored. Alternatively, at 912, in response to determining that the cost value for the nth candidate bitstream is not the lowest cost value, the nth candidate bitstream is discarded.
At 914, it is determined whether the nth filter is the final candidate filter still available for consideration. At 916, in response to determining that the nth filter is not the final candidate filter still available for consideration, the value of N is incremented by 1 and the process is then repeated. Alternatively, at 918, the stored candidate bitstream is selected as the output bitstream in response to determining that the nth filter is the final candidate filter still available for consideration. For example, if the nth candidate bitstream is stored in a buffer or other data store before it is determined that the nth filter is the final remaining filter, then the N candidate bitstreams are selected as output bitstreams.
In some implementations, the technique 900 may include comparing one or more aspects of the candidate bitstream to a threshold. For example, the threshold may represent the maximum acceptable quality loss due to applying the respective candidate filter and subsequently encoding the filtered copy of the video stream as the candidate bitstream. In another example, the threshold may represent a maximum acceptable delay due to applying the respective candidate filter and subsequently encoding the filtered copy of the video stream as the candidate bitstream. In yet another example, the threshold may represent a maximum acceptable computational resource cost resulting from applying the respective candidate filter and subsequently encoding the filtered video stream replica as a candidate bitstream.
In this embodiment, one or more aspects of the candidate bitstream (e.g., quality loss, latency, and/or cost of its computational resources) are compared to a threshold (e.g., prior to determining whether the cost value of the candidate bitstream is the lowest cost value, or prior to storing the candidate bitstream in response to determining that the candidate bitstream has the lowest cost value). Where one or more aspects satisfy the threshold (e.g., by not exceeding the respective maximum), the technique 900 may proceed to continue processing the candidate bitstream. However, in the event that those one or more aspects do not satisfy the threshold, the candidate bitstream may be discarded or otherwise not further processed.
The aspects of encoding and decoding described above illustrate some examples of encoding and decoding techniques. However, it will be understood that encoding and decoding, as those terms are used in the claims, may refer to compression, decompression, transformation, or any other processing or alteration of data.
The word "example" is used herein to mean serving as an example, instance, or illustration. Any aspect or design described herein as "exemplary" is not necessarily to be construed as preferred or advantageous over other aspects or designs. Rather, use of the word "example" is intended to present concepts in a concrete fashion. As used in this application, the term "or" is intended to mean an inclusive "or" rather than an exclusive "or". That is, unless otherwise indicated or the context clearly dictates otherwise, the statement "X includes a or B" is intended to mean any of its natural inclusive permutations. That is, if X comprises A; x comprises B; or X includes both a and B, then "X includes a or B" is satisfied under any of the above examples. In addition, the articles "a" and "an" as used in this application and the appended claims should generally be construed to mean "one or more" unless specified otherwise or the context clearly dictates otherwise. Furthermore, the use of the term "embodiment" or the term "one embodiment" throughout this disclosure should not be taken to mean the same embodiment, unless described as such.
Embodiments of transmitting station 102 and/or receiving station 106 (as well as algorithms, methods, instructions, etc. stored thereon and/or executed thereby, including execution by encoder 400 and decoder 500) may be implemented in hardware, software, or any combination thereof. The hardware may include, for example, a computer, an Intellectual Property (IP) core, an Application Specific Integrated Circuit (ASIC), a programmable logic array, an optical processor, a programmable logic controller, microcode, microcontrollers, servers, microprocessors, digital signal processors, or any other suitable circuit. In the claims, the term "processor" should be understood to cover any of the above hardware, alone or in combination. The terms "signal" and "data" may be used interchangeably. In addition, portions of transmitting station 102 and receiving station 106 need not necessarily be implemented in the same manner.
Additionally, in one aspect, transmitting station 102 or receiving station 106 may be implemented, for example, using a general purpose computer or a general purpose processor having a computer program that, when executed, performs any of the respective methods, algorithms, and/or instructions described herein. Additionally or alternatively, for example, a special purpose computer/processor may be utilized which may contain other hardware for performing any of the methods, algorithms, or instructions described herein.
Transmitting station 102 and receiving station 106 may be implemented, for example, on computers in a videoconferencing system. Alternatively, transmitting station 102 may be implemented on a server, and receiving station 106 may be implemented on a device separate from the server, such as a handheld communication device. In this example, transmitting station 102 may use encoder 400 to encode content into an encoded video signal and transmit the encoded video signal to a communication device. In turn, the communication device may then use the decoder 500 to decode the encoded video signal. Alternatively, the communication device may decode content stored locally on the communication device (e.g., content not sent by transmitting station 102). Other suitable transmission and reception implementations are available. For example, the receiving station 106 may be a generally stationary personal computer rather than a portable communication device, and/or a device including the encoder 400 may also include the decoder 500.
Additionally, all or a portion of embodiments of the present disclosure may take the form of a computer program product accessible from computer-usable or computer-readable media, for example. A computer-usable or computer-readable medium may be any apparatus that can, for example, tangibly embody, store, communicate, or transport the program for use by or in connection with any processor. The medium may be, for example, an electronic, magnetic, optical, electromagnetic, or semiconductor device. Other suitable media are also available.
The above-described embodiments and other aspects have been described in order to facilitate easy understanding of the present disclosure and do not limit the present disclosure. On the contrary, the disclosure is intended to cover various modifications and equivalent arrangements included within the scope of the appended claims, which scope is to be accorded the broadest interpretation so as to encompass all such modifications and equivalent arrangements as is permitted under the law.
Claims (20)
1. A method for encoding an input video stream into an output bitstream, the method comprising:
encoding a first copy of the input video stream into a reference bitstream;
comparing the input video stream and the reference bit stream to determine a first distortion value and a first bit rate for the reference bit stream;
for each candidate filter of the plurality of candidate filters:
applying the candidate filter to each frame of the second copy of the input video stream to produce a filtered second copy of the input video stream;
encoding the filtered second copy of the input video stream as a candidate bitstream;
comparing the input video stream and the candidate bitstream to determine a second distortion value and a second bitrate for the candidate bitstream; and
determining a cost value for the candidate filter based on a difference between the first distortion value and the second distortion value and based on a difference between the first bit rate and the second bit rate;
selecting the candidate bitstream corresponding to the candidate filter having the lowest of the cost values as the output bitstream; and
outputting or storing the output bitstream.
2. The method of claim 1, wherein the candidate filter is obtained using at least one of a genetic algorithm, a gradient descent algorithm, or another non-linear optimization technique.
3. The method of any of claims 1-2, wherein applying a given candidate filter to a given frame of a second copy of the input video stream to generate the filtered second copy of the input video stream comprises:
transforming values within the given frame from a spatial domain to a frequency domain;
applying the given candidate filter to each block of the given frame after the transforming to produce filtered frequency-domain values; and
and transforming the filtered frequency-domain value from a frequency domain inverse to a spatial domain.
4. The method of claim 3, wherein applying the given candidate filter to each block of the frame to produce a filtered frequency-domain value comprises:
denoising an overlapping block region of the frame using the given candidate filter.
5. The method of claim 4, wherein the overlapped block region is a semi-overlapped block region.
6. The method of any of claims 1 to 5, wherein determining the cost value for a given candidate filter of the plurality of candidate filters comprises:
calculating a weighted value by applying a weight to a difference between the first distortion value and the second distortion value; and
determining the cost value by subtracting the weighting value from a difference between the first bit rate and the second bit rate.
7. The method of claim 6, wherein the weights are defined based on a target for the second distortion value.
8. An apparatus for encoding an input video stream into an output bitstream, the apparatus comprising:
a memory, and
a processor configured to execute instructions stored in the memory for:
encoding a first copy of the input video stream into a reference bitstream;
comparing the input video stream and the reference bit stream to determine a first distortion value and a first bit rate for the reference bit stream;
for each candidate filter of the plurality of candidate filters:
applying the candidate filter to each frame of the second copy of the input video stream to produce a filtered second copy of the input video stream;
encoding the filtered second copy of the input video stream as a candidate bitstream;
comparing the input video stream and the candidate bitstream to determine a second distortion value and a second bitrate for the candidate bitstream; and
determining a cost value for the candidate filter based on a difference between the first distortion value and the second distortion value and based on a difference between the first bit rate and the second bit rate;
selecting the candidate bitstream corresponding to the candidate filter having the lowest of the cost values as the output bitstream; and
outputting or storing the output bitstream.
9. The apparatus of claim 8, wherein the candidate filter is obtained using at least one of a genetic algorithm, a gradient descent algorithm, or another non-linear optimization technique.
10. The apparatus of any of claims 8-9, wherein the instructions to apply a given candidate filter to a given frame of a second copy of the input video stream to generate the filtered second copy of the input video stream comprise instructions to:
transforming values within the given frame from a spatial domain to a frequency domain;
applying the given candidate filter to each block of the given frame after the transforming to produce filtered frequency-domain values; and
and transforming the filtered frequency-domain value from a frequency domain inverse to a spatial domain.
11. The apparatus of claim 10, wherein the instructions to apply the given candidate filter to each block of the frame to produce filtered frequency-domain values comprise instructions to:
denoising an overlapping block region of the frame using the given candidate filter.
12. The apparatus of claim 11, wherein the overlapped block region is a half-overlapped block region.
13. The apparatus of any of claims 8 to 12, wherein the instructions to determine the cost value for a given candidate filter of the plurality of candidate filters comprise instructions to:
calculating a weighted value by applying a weight to a difference between the first distortion value and the second distortion value; and
determining the cost value by subtracting the weighting value from a difference between the first bit rate and the second bit rate.
14. The apparatus of claim 13, wherein the weights are defined based on a target of the second distortion value.
15. An encoder that performs operations for encoding an input video stream into an output bitstream, the operations comprising:
encoding a first copy of the input video stream into a reference bitstream;
comparing the input video stream and the reference bit stream to determine a first distortion value and a first bit rate for the reference bit stream;
for each candidate filter of the plurality of candidate filters:
applying the candidate filter to each frame of the second copy of the input video stream to produce a filtered second copy of the input video stream;
encoding the filtered second copy of the input video stream as a candidate bitstream;
comparing the input video stream and the candidate bitstream to determine a second distortion value and a second bitrate for the candidate bitstream; and
determining a cost value for the candidate filter based on a difference between the first distortion value and the second distortion value and based on a difference between the first bit rate and the second bit rate;
selecting the candidate bitstream corresponding to the candidate filter having the lowest of the cost values as the output bitstream; and
outputting or storing the output bitstream.
16. The encoder of claim 15, wherein the candidate filter is obtained using at least one of a genetic algorithm, a gradient descent algorithm, or another non-linear optimization technique.
17. The encoder of any of claims 15-16, wherein applying a given candidate filter to a given frame of the second copy of the input video stream to generate the filtered second copy of the input video stream comprises:
transforming values within the given frame from a spatial domain to a frequency domain;
applying the given candidate filter to each block of the given frame after the transforming to produce filtered frequency-domain values; and
and transforming the filtered frequency-domain value from a frequency domain inverse to a spatial domain.
18. The encoder of claim 17, wherein applying the given candidate filter to each block of the frame to produce the filtered frequency-domain value comprises:
denoising an overlapping block region of the frame using the given candidate filter.
19. The encoder of claim 18, wherein the overlapped block region is a half-overlapped block region.
20. The encoder of any of claims 15 to 19, wherein determining the cost value for a given candidate filter of the plurality of candidate filters comprises:
calculating a weighted value by applying a weight to a difference between the first distortion value and the second distortion value; and
determining the cost value by subtracting the weighting value from a difference between the first bit rate and the second bit rate,
wherein the weight is defined based on a target of the second distortion value.
Applications Claiming Priority (3)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US201862784626P | 2018-12-24 | 2018-12-24 | |
US62/784,626 | 2018-12-24 | ||
PCT/US2019/029088 WO2020139414A1 (en) | 2018-12-24 | 2019-04-25 | Video stream adaptive filtering for bitrate reduction |
Publications (1)
Publication Number | Publication Date |
---|---|
CN113170121A true CN113170121A (en) | 2021-07-23 |
Family
ID=66857970
Family Applications (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
CN201980077445.0A Pending CN113170121A (en) | 2018-12-24 | 2019-04-25 | Adaptive filtering of video streams for bit rate reduction |
Country Status (6)
Country | Link |
---|---|
US (1) | US20220078446A1 (en) |
EP (1) | EP3884666A1 (en) |
JP (1) | JP7125559B2 (en) |
KR (1) | KR20210089778A (en) |
CN (1) | CN113170121A (en) |
WO (1) | WO2020139414A1 (en) |
Families Citing this family (2)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US9248834B1 (en) | 2014-10-02 | 2016-02-02 | Google Inc. | Predicting trajectories of objects based on contextual information |
US11611770B2 (en) * | 2020-10-14 | 2023-03-21 | Tencent America LLC | Method and apparatus for video coding |
Citations (5)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
WO1998007117A1 (en) * | 1996-08-13 | 1998-02-19 | Polaroid Corporation | Large kernel filtering using a fixed-size block processor |
CN1292978A (en) * | 1999-01-15 | 2001-04-25 | 皇家菲利浦电子有限公司 | Coding and noise filtering image sequence |
US20090034622A1 (en) * | 2007-08-01 | 2009-02-05 | Her Majesty The Queen In Right Of Canada Represented By The Minister Of Industry | Learning Filters For Enhancing The Quality Of Block Coded Still And Video Images |
CN102450009A (en) * | 2009-04-20 | 2012-05-09 | 杜比实验室特许公司 | Filter selection for video pre-processing in video applications |
CN108605143A (en) * | 2016-02-04 | 2018-09-28 | 联发科技股份有限公司 | The method and apparatus of non local adaptive in-loop filter in Video coding |
Family Cites Families (2)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US7450771B2 (en) * | 2004-07-09 | 2008-11-11 | National Taiwan University | Pre-compression rate-distortion optimization method for JPEG 2000 |
JP2006157084A (en) * | 2004-11-25 | 2006-06-15 | Canon Inc | Image coding apparatus, image coding method, and computer program |
-
2019
- 2019-04-25 WO PCT/US2019/029088 patent/WO2020139414A1/en unknown
- 2019-04-25 US US17/416,235 patent/US20220078446A1/en active Pending
- 2019-04-25 JP JP2021533618A patent/JP7125559B2/en active Active
- 2019-04-25 KR KR1020217019333A patent/KR20210089778A/en active IP Right Grant
- 2019-04-25 CN CN201980077445.0A patent/CN113170121A/en active Pending
- 2019-04-25 EP EP19730578.2A patent/EP3884666A1/en active Pending
Patent Citations (5)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
WO1998007117A1 (en) * | 1996-08-13 | 1998-02-19 | Polaroid Corporation | Large kernel filtering using a fixed-size block processor |
CN1292978A (en) * | 1999-01-15 | 2001-04-25 | 皇家菲利浦电子有限公司 | Coding and noise filtering image sequence |
US20090034622A1 (en) * | 2007-08-01 | 2009-02-05 | Her Majesty The Queen In Right Of Canada Represented By The Minister Of Industry | Learning Filters For Enhancing The Quality Of Block Coded Still And Video Images |
CN102450009A (en) * | 2009-04-20 | 2012-05-09 | 杜比实验室特许公司 | Filter selection for video pre-processing in video applications |
CN108605143A (en) * | 2016-02-04 | 2018-09-28 | 联发科技股份有限公司 | The method and apparatus of non local adaptive in-loop filter in Video coding |
Also Published As
Publication number | Publication date |
---|---|
KR20210089778A (en) | 2021-07-16 |
EP3884666A1 (en) | 2021-09-29 |
US20220078446A1 (en) | 2022-03-10 |
JP7125559B2 (en) | 2022-08-24 |
WO2020139414A1 (en) | 2020-07-02 |
JP2022514505A (en) | 2022-02-14 |
Similar Documents
Publication | Publication Date | Title |
---|---|---|
KR102118573B1 (en) | Real-time video encoder rate control using dynamic resolution switching | |
US10798408B2 (en) | Last frame motion vector partitioning | |
US10277905B2 (en) | Transform selection for non-baseband signal coding | |
US9641843B1 (en) | Video coding using adaptive source variance based partitioning | |
CN110169059B (en) | Composite Prediction for Video Coding | |
EP3516877A1 (en) | Restoration in video coding using domain transform recursive filters | |
US10009622B1 (en) | Video coding with degradation of residuals | |
GB2549359A (en) | Adaptive Directional Loop Filter | |
US9578324B1 (en) | Video coding using statistical-based spatially differentiated partitioning | |
WO2019018011A1 (en) | Video coding using frame rotation | |
JP7125559B2 (en) | Video stream adaptive filtering for bitrate reduction | |
US9210424B1 (en) | Adaptive prediction block size in video coding | |
US11924476B2 (en) | Restoration in video coding using filtering and subspace projection | |
CN110692247B (en) | Prediction for composite motion compensation | |
CN117957839A (en) | Filtering side information using context designed filters |
Legal Events
Date | Code | Title | Description |
---|---|---|---|
PB01 | Publication | ||
PB01 | Publication | ||
SE01 | Entry into force of request for substantive examination | ||
SE01 | Entry into force of request for substantive examination |