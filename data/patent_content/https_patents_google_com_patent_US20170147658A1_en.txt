US20170147658A1 - Pre-instantiating native applications in background - Google Patents
Pre-instantiating native applications in background Download PDFInfo
- Publication number
- US20170147658A1 US20170147658A1 US14/945,703 US201514945703A US2017147658A1 US 20170147658 A1 US20170147658 A1 US 20170147658A1 US 201514945703 A US201514945703 A US 201514945703A US 2017147658 A1 US2017147658 A1 US 2017147658A1
- Authority
- US
- United States
- Prior art keywords
- native application
- background
- instance
- native
- deep link
- Prior art date
- Legal status (The legal status is an assumption and is not a legal conclusion. Google has not performed a legal analysis and makes no representation as to the accuracy of the status listed.)
- Granted
Links
Images
Classifications
-
- G06F17/30554—
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F16/00—Information retrieval; Database structures therefor; File system structures therefor
- G06F16/20—Information retrieval; Database structures therefor; File system structures therefor of structured data, e.g. relational data
- G06F16/24—Querying
- G06F16/245—Query processing
- G06F16/2455—Query execution
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F16/00—Information retrieval; Database structures therefor; File system structures therefor
- G06F16/20—Information retrieval; Database structures therefor; File system structures therefor of structured data, e.g. relational data
- G06F16/24—Querying
- G06F16/245—Query processing
- G06F16/2457—Query processing with adaptation to user needs
- G06F16/24578—Query processing with adaptation to user needs using ranking
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F16/00—Information retrieval; Database structures therefor; File system structures therefor
- G06F16/20—Information retrieval; Database structures therefor; File system structures therefor of structured data, e.g. relational data
- G06F16/24—Querying
- G06F16/248—Presentation of query results
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F16/00—Information retrieval; Database structures therefor; File system structures therefor
- G06F16/90—Details of database functions independent of the retrieved data types
- G06F16/95—Retrieval from the web
- G06F16/953—Querying, e.g. by the use of web search engines
- G06F16/9535—Search customisation based on user profiles and personalisation
-
- G06F17/2235—
-
- G06F17/30477—
-
- G06F17/3053—
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F3/00—Input arrangements for transferring data to be processed into a form capable of being handled by the computer; Output arrangements for transferring data from processing unit to output unit, e.g. interface arrangements
- G06F3/01—Input arrangements or combined input and output arrangements for interaction between user and computer
- G06F3/048—Interaction techniques based on graphical user interfaces [GUI]
- G06F3/0484—Interaction techniques based on graphical user interfaces [GUI] for the control of specific functions or operations, e.g. selecting or manipulating an object, an image or a displayed text element, setting a parameter value or selecting a range
- G06F3/04842—Selection of displayed objects or displayed text elements
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F40/00—Handling natural language data
- G06F40/10—Text processing
- G06F40/12—Use of codes for handling textual entities
- G06F40/134—Hyperlinking
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F9/00—Arrangements for program control, e.g. control units
- G06F9/06—Arrangements for program control, e.g. control units using stored programs, i.e. using an internal store of processing equipment to receive or retain programs
- G06F9/44—Arrangements for executing specific programs
- G06F9/445—Program loading or initiating
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F9/00—Arrangements for program control, e.g. control units
- G06F9/06—Arrangements for program control, e.g. control units using stored programs, i.e. using an internal store of processing equipment to receive or retain programs
- G06F9/44—Arrangements for executing specific programs
- G06F9/445—Program loading or initiating
- G06F9/44594—Unloading
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F9/00—Arrangements for program control, e.g. control units
- G06F9/06—Arrangements for program control, e.g. control units using stored programs, i.e. using an internal store of processing equipment to receive or retain programs
- G06F9/46—Multiprogramming arrangements
- G06F9/48—Program initiating; Program switching, e.g. by interrupt
- G06F9/4806—Task transfer initiation or dispatching
- G06F9/4843—Task transfer initiation or dispatching by program, e.g. task dispatcher, supervisor, operating system
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F9/00—Arrangements for program control, e.g. control units
- G06F9/06—Arrangements for program control, e.g. control units using stored programs, i.e. using an internal store of processing equipment to receive or retain programs
- G06F9/46—Multiprogramming arrangements
- G06F9/48—Program initiating; Program switching, e.g. by interrupt
- G06F9/4806—Task transfer initiation or dispatching
- G06F9/4843—Task transfer initiation or dispatching by program, e.g. task dispatcher, supervisor, operating system
- G06F9/485—Task life-cycle, e.g. stopping, restarting, resuming execution
Definitions
- the Internet provides access to a wide variety of information. For example, digital image files, video and/or audio files, as well as web page resources for particular subjects or particular news articles, are accessible over the Internet.
- native applications that facilitate the performance of the same functions facilitated by the use of web page resources are now being provided in large numbers. Additionally, native applications that do not have websites with such synchronous content, such as games and other applications, are also very popular on tablet computers and smart phones. Accordingly, search systems now also facilitate searching of these native applications.
- a deep link is an instruction specifying a particular environment instance of a native application and configured to cause the native application to instantiate the environment instance of the specified native application when selected at a user device.
- the native application generates the environment instance for display within the native application on a user device.
- This specification describes technologies relating to pre-instantiate native applications in the background when a deep link to the pre-instantiate native applications are present in a set of search results.
- one innovative aspect of the subject matter described in this specification can be embodied in a method that includes the action of receiving a set of search results, wherein the set includes search results that each include a native application deep link that instantiates an instance of a native application, wherein a native application generates environment instances for display on a user device within the native application, and the native application operates independent of a browser application that operates on the user device; selecting, prior to a user selection of a search result, native application deep links from the search results; instantiating, for each native application deep link that is selected, a background instance of the native application to which the native application deep link corresponds; determining, in response to an occurrence of a background unload event, background instances of the native applications instantiated from the native application deep links and that were not brought to the foreground prior to the occurrence of the background unload event; and terminating each of the background instances of the native applications instantiated that were not brought to the foreground prior to the occurrence of the background unload event.
- the present system enables a background pre-instantiation of a native application.
- the background pre-instantiation occurs without distracting or disturbing a user's ability to utilize a user device.
- the pre-instantiation of the native application reduces latency time for a user when a user selects a deep link corresponding to a particular native application.
- the reduced latency that occurs when a user selects a native application search result for which an application is pre-instantiated does not come with the attendant cost of leaving a number of native applications instantiated in the background after the user navigates away from a search environment.
- FIG. 1A is a block diagram of an example environment in which native applications are instantiated in the background and brought to the foreground.
- FIG. 1B is a block diagram of a user device that is configured to pre-instantiate native applications from native application search results.
- FIG. 2 is a flow diagram describing a process for instantiating background instances of native applications.
- a system receives a set of search results that are responsive to a search query. Within the set of search results are deep links The system recognizes the presence of the deep links and pre-instantiates the native applications, which correspond to each deep link within the search results, in the background of a user device.
- a native application generates environment instances for display on a user device within an environment of the native application, and operates independent of a browser application on the user device.
- a native application is an application specifically designed to run on a particular user device operating system and machine firmware. Native applications thus differ from browser-based applications and browser-rendered resources. The latter require all, or at least some, elements or instructions downloaded from a web server each time they are instantiated or rendered. Furthermore, browser-based applications and browser-rendered resources can be processed by all web-capable mobile devices within the browser and thus are not operating system specific.
- a deep link is an instruction specifying a particular environment instance of a native application and configured to cause the native application to instantiate the environment instance of the specified native application when selected at a user device.
- the native application generates the environment instance for display within the native application on a user device.
- a deep link may specify a selection menu for a game environment; or content from a website, such as a news site, forum, and the like; or a particular recipe for a cooking application; and the like.
- the system and methods in this specification perform a pre-instantiation of an environmental instance of a native application to reduce latency time for users who wish to open the native application.
- the system in response to receiving a set of search results that includes one or more deep links, identifies the one or more deep links present in the search results, and prelaunches or pre-instantiates the environmental instance for the native applications that correspond the one or more deep links
- the native application is pre-instantiated, it is launched in the background of the user device such that a user does not notice the pre-instantiation.
- the pre-instantiated environmental instance of the native application is brought to the foreground and any other pre-instantiated environmental instances are terminated. In other implementations, if the system initiates an unload event, all pre-instantiated environmental instances of the native applications are terminated.
- FIG. 1A is a block diagram of an example environment 100 in which native applications are instantiated in the background and brought to the foreground.
- a computer network 102 such as the Internet, connects resource publisher web sites 104 , application publishers 106 , user devices 108 and a search system 110 .
- a resource publisher website 104 includes one or more web resources 105 associated with a domain and hosted by one or more servers in one or more locations.
- a resource publisher website is a collection of web pages formatted in hypertext markup language (HTML) that can contain text, images, multimedia content, and programming elements.
- HTML hypertext markup language
- Each website 104 is maintained by a content publisher, which is an entity that controls, manages and/or owns the website 104 .
- a web page resource is any data that can be provided by a publisher website 104 over the network 102 and that has a resource address, e.g., a uniform resource locator (URL).
- Web resources may be HTML pages, images files, video files, audio files, and feed sources, to name just a few.
- the resources may include embedded information, e.g., meta information and hyperlinks, and/or embedded instructions, e.g., client-side scripts.
- An application publisher website 106 may also include one or more web resources 105 , and also provides native applications 107 .
- a native application 107 is an application specifically designed to run on a particular user device operating system and machine firmware.
- an “environment instance” is a display environment within a native application and in which is displayed content, such as text, images, and the like.
- An environment instance is specific to the particular native application, and the native application is specific to the particular operating system of the user device 108 a.
- An environment instance differs from a rendered web resource in that the environment instance is generated within and specific to the native application, while a web resource may be rendered in any browser for which the web page resource is compatible, and is independent of the operating system of the user device.
- a user device 108 a is an electronic device that is under the control of a user.
- a user device 108 a is typically capable of requesting and receiving web page resources 105 and native applications 107 over the network 102 .
- Example user devices 108 a include personal computers, mobile communication devices, and tablet computers.
- the search system 110 accesses a web index 112 and an application index 114 .
- the web index 112 is an index of web resources 105 that has, for example, been built from crawling the publisher web sites 104 .
- the application index 114 is an index of environment instances for native applications 107 , and is constructed using an indexer 114 that receives data crawled from an application instance 122 of a native application. Although shown as separate indexes, the web index 112 and the application index 114 can be combined in a single index.
- the user device 108 a submits search queries to the search system 110 .
- the search system 110 accesses the web index 112 and the application index 114 to respectively identify resources and applications that are relevant to the query.
- the search system 110 may, for example, identify the resources and applications in the form of web resource search results and native application search results, respectively.
- the search results are provided to the user device 108 a from which the query was received.
- a web resource search result is data generated by the search system 110 that identifies a web resource and provides information that satisfies a particular search query.
- a web resource search result for a resource can include a web page title, a snippet of text extracted from the resource, and a resource locator for the resource, e.g., the URL of a web page.
- a native application search result specifies a native application and is generated in response to a search of the application index 114 of environment instances.
- a native application search results includes a “deep link” specifying a particular environment instance of the native application and which is configured to cause the native application to instantiate the specified environmental instance. For example, selection of a native application search result may cause the native application to launch (if installed on the user device 108 ) and generate an environment instance referenced in the application search result in the form of a screen shot.
- publishers 106 that provide native applications 107 also provide deep links to the search system 110 .
- third parties may also provide deep links for native applications.
- the search system 110 can discover deep links from other multiple sources, such as app maps, web page annotations, etc., and thus the set of deep links may be constantly changing.
- an application publisher may provide a list of deep links 109 in the form of uniform resource identifiers (URIs) (or other instruction types that are specific to the native application published by the publisher).
- URIs uniform resource identifiers
- a deep link may specify a name of a native application, and may include optional parameters, e.g., ⁇ app_name>:// ⁇ params>. These optional parameters may cause the native application to instantiate at a certain state, such as a particular screen, menu or environment within the native application. For example, for the native application “Example_App”, a deep link to simply launch the native application may be the application name without parameter:
- the certain information or particular state may be specified by parameters. For example, for the application to instantiate at a for a certain news story with a unique ID News12345, the deep link may be:
- a user can submit a search query on a user device 108 a that will return a search results page 117 that may contain web resource search results 118 a, 118 c, and 118 n, and native application search results 118 b, 118 d, and 118 e.
- the system detects the deep links within the native application search results 118 b, 118 d and 118 e that are presented on the search results page 117 and begins pre-instantiates native applications 120 that correspond to native application search results 118 b, 118 d, and 118 e in the background of the user device 108 a.
- the background pre-instantiated native application instance 120 does not have an active viewport for a user to see or engage with. Thus, while the native application 107 is launched and running, it is instantiated in such a way that the user does not notice the native application is running
- FIG. 1B is a block diagram of a user device 108 a that is configured to pre-instantiate native applications from native application search results.
- the operating system of the user device 117 is configured to launch the native applications detected in the deep links in a manner so that they are launched in the background.
- instructions that define a deep link background launcher 140 may be included in the operating system.
- the instructions for the deep link background launcher 140 can be realized by another native application that a user launches to process native application search results as described below.
- the instructions for the deep link background launcher 140 can be included with any search results page or resource that includes a native application deep link.
- the launcher 140 can be realized in the search system 110 , and is configured to modify the deep links when necessary to cause the user device 108 a to pre-instantiate the native application upon processing the deep link.
- the deep link background launcher 140 is configured to determine when to pre-instantiate native applications, which deep links to process to pre-instantiate native applications, and when to terminate native applications that have been pre-instantiated.
- a background launch can be done by appending a command line parameter to the deeplink and then processing the deep link, e.g.,
- a number of native applications 107 that are pre-instantiated is determined based on constraints.
- the number of pre-instantiated native application instances 120 can depend on the amount of available system resources to preclude over-utilization the user device's resources (e.g., RAM, drive space, processing capability, etc.).
- the deep link background launcher 140 can limit the number of active pre-instantiated native application instances based on a ranking threshold.
- the ranking threshold may be based on a minimum ordinal position of a deep link within the search results.
- a ranking threshold is an ordinal position of 5. Any native application search result in ordinal positions 1 - 5 will thus be selected for pre-instantiation, and any at an ordinal position greater than 5 will not be selected.
- the deep link background launcher 140 prior to a user selection of a search result, selects native application deep links from the native application search results 118 b, 118 d, and 118 e, as their ordinal positions are 2, 4, and 5, respectively.
- any native application search results in a highest ranked proper subset of search results 117 that meet the ranking threshold will be selected for pre-instantiation.
- the ranking threshold can be based on user behavior signals for the native applications.
- the user behavior signals for example, can specify how probable it is that a user may click a deep link based on time of the day, the day, and other predictive variables.
- the system may choose to limit the number of pre-instantiated native application instances 120 to only those with deep links that the user will most likely select.
- the search system 110 may access user history data to determine a probability for each deep link and provide the probability to the deep link background launcher.
- the ranking threshold is based on a minimum relevance score for a search query.
- the search system may generate a relevance score for a deep link based on how relevant the deep link is to the search query.
- a relevance score may be determined by the number of times a deep link is clicked in response to a similar search query, a measure of relevance of the terms to the native application, or any other relevance scoring mechanism.
- the relevance score may be provided to the deep link background launcher 140 for the launcher 140 to make the determination.
- the launcher 140 selects which native application 107 to pre-instantiate based on the selected corresponding deep links within the search results page 117 .
- the launcher 140 sends to the user device operation system a “start” event with a unique identifier and an expiration time to pre-instantiate the native application instances in the background.
- the expiration time is a predefined time applied to the pre-instantiated native application 120 defining an amount of time the pre-instantiated native application 120 runs without user interaction before terminating 122 the pre-instantiated native application instance 120 . Further details regarding the expiration time and terminating 122 the pre-instantiated native application instance are provided below.
- a unique identifier is generated that corresponds to the particular instance of the native application 107 and the corresponding deep link.
- the unique identifier is generated by applying a hash function to the deep link. For example, the hash function can be applied to a native application identity and a uniform resource indicator.
- the launcher pre-instantiates the background instance of the native application using the unique identifier to identify each active instantiation.
- the launcher 140 receives the selection and determines whether the native application 107 to which the native application deep link corresponds has been instantiated in a background native application instance 120 .
- the selection of deep link causes the native application instantiated 120 in the background instance to transition to a foreground instance on the user device 108 b.
- a foreground instance of native application 107 has an active viewport that is viewable and can readily be interacted with by the user. Because the native application has been pre-instantiated, the transition to the foreground occurs with much less latency than there would be when the native application is launched after the user selection.
- the system sends an “open” event with the unique identifier to cause the native application to transition to the foreground instance. If a native application with the same unique identifier is not pre-instantiated in the background, the native application is opened by launching the native application.
- a background unload event can occur at the expiration of a timeout period measured from the instantiation of the native application background instances 120 .
- pre-instantiated native application instances 120 that are not brought to the foreground are terminated 122 when the launcher 140 generates sends an “unload” event accompanied with corresponding unique identifiers to the native applications 107 that have active pre-instantiated instances 120 .
- a timer for the pre-instantiated native application instance 120 expires and the launcher 140 generates the background unload event 142 . This causes terminations 122 of the native applications 107 .
- the background “unload” event occurs upon the unloading of a page in which the set of search results 117 are displayed.
- a page may be “unloaded” when a new set of search results for a search are requested, when a particular deep link is selected, or when the page is closed, for example.
- the “open” event for the particular native application is generated by the launcher 140 , and an “unload” event is sent to the launcher 140 for any other active pre-instantiated native application instances 120 not associated with the particular deep link selected by the user.
- the native application is brought to the foreground, the other active pre-instantiated native applications 120 are terminated 122 .
- an “unload” event is generated by the launcher 140 for all active pre-instantiated native application instances 120 to terminate 122 the instances.
- a particular native application may support pre-instantiating multiple native application instances 120 , and the launcher 140 may pre-instantiate multiple native application instances 120 for the particular native application 107 .
- Each instance may launch to a different portion of the native application 107 based on the unique deep link used to launch the instance. For example, for three different deep links with different parameters for a particular native application, one native application instance 120 may launch to a main menu, another instance 120 of the native application may launch to a sub-menu, and another instance 120 may launch to an editing environment within the native application.
- the unique identifiers for the instances of the native applications 107 can also be used to determine which instances to terminate.
- a native application is pre-instantiated, its corresponding unique identifier is stored in memory by the operating system. Thereafter, when a native application that has been pre-instantiated is brought to the foreground, its corresponding unique identifier is removed from the memory.
- the background unload signal is generated, any instances of native applications that were pre-instantiated and that still have unique identifier stored in the memory are terminated.
- the launcher 140 associates a unique identifier for each instance 120 .
- the launcher 140 associates each of the created unique identifiers with a corresponding unique instance of the native application. This enables the launcher 140 to bring the correct native application instance 120 to the foreground when a user selects a particular deep link. Therefore, causing the native application instantiated in the background instance to transition to a foreground instance requires causing only the unique instance of the native application to transition to the foreground instance by using that unique instance's particular unique identifier with the “open” event.
- the system also allows the system to determine which pre-instantiated native application instances were not brought to the foreground before the background unload event occurs and to terminate those pre-instantiated native applications.
- the use of the unique identifiers for each instantiation allows the system to ignore any instances of a native application that was loaded and in the background prior to the search operation. For example, a native application instance that was minimized by the user prior to a search will not be terminated if another instance of the native application is pre-instantiated in response to a native application deep link being provided in response to a search operation but not brought to the foreground before the background unload event occurs.
- the launcher 140 selects only a single native application deep link for that native application.
- native application search results 118 b and 118 d both have deep links to a chess program.
- the first deep link for the search result 118 b links to an opening book environment within the native application
- the second deep link for the search result 118 d links to a game selection menu within the native application. Because the search result 118 b is ranked above the search result 118 d, the native application is pre-instantiated to the opening book environment, and the deep link for the search result 118 d is not processed.
- the deep link background launcher 140 can be provided with data that describes which native applications support multiple instances and which support only single instances.
- the search engine 110 may provide a file that describes the capabilities of the native applications to support multiple instances. Using this information, the launcher 140 can then process the deep links as described above.
- pre-instantiation of native application instances can occur within in any resource that contains an application deep link 109 .
- the launcher 140 can pre-instantiate a native application instance upon detection of any native application deep link 109 .
- any native application deep link 109 For example, within a movie review application, there may be a movie watch, movie theater location, and/or movie trailer deep link present.
- the launcher 140 can pre-instantiate one or all of the native applications corresponding to the deep links 109 present within the movie review application.
- FIG. 2 is a flow diagram describing a process 200 for instantiating background instances of native applications.
- the process 200 can be implemented on a user device 108 .
- the process 200 receives a set of search results responsive to a search query ( 202 ).
- the set of search results include search results that each include a native application deep link 109 that, when engaged with, instantiates an instance of a native application 107 .
- a native application 107 generates environment instances for display on a user device within the native application, and the native application 107 operates independent of a browser application that operates on the user device.
- the process 200 selects, prior to a user selection of a search result, native application deep links 109 from the search results ( 204 ).
- the launcher 140 detects native application deep links 109 that are present within a set of search results and selects the deep links based on various constraints.
- the launcher 140 instantiates, for each native application deep link that is selected, a background instance 120 of the native application to which the native application deep link 109 corresponds ( 206 ).
- the process 200 determines, in response to an occurrence of a background unload event, background instances of the native applications instantiated from the native application deep links and that were not brought to the foreground prior to the occurrence of the background unload event ( 208 ). For example, if a pre-instantiated native application instance received an “open” event, that native application instance moves to the foreground in a viewport accessible by the user. For the other active pre-instantiated native application instances, the process 200 unloads each of the background instances of the native applications instantiated that were not brought to the foreground prior to the occurrence of the background unload event ( 210 ).
- the users may be provided with an opportunity to control whether programs or features collect user information (e.g., information about a user's social network, social actions or activities, profession, a user's preferences, or a user's current location), or to control whether and/or how to receive content from the content server that may be more relevant to the user.
- user information e.g., information about a user's social network, social actions or activities, profession, a user's preferences, or a user's current location
- certain data may be treated in one or more ways before it is stored or used, so that personally identifiable information is removed.
- a user's identity may be treated so that no personally identifiable information can be determined for the user, or a user's geographic location may be generalized where location information is obtained (such as to a city, ZIP code, or state level), so that a particular location of a user cannot be determined.
- location information such as to a city, ZIP code, or state level
- the user may have control over how information is collected about the user and used by a content server.
- Embodiments of the subject matter and the operations described in this specification can be implemented in digital electronic circuitry, or in computer software, firmware, or hardware, including the structures disclosed in this specification and their structural equivalents, or in combinations of one or more of them.
- Embodiments of the subject matter described in this specification can be implemented as one or more computer programs, i.e., one or more modules of computer program instructions, encoded on computer storage medium for execution by, or to control the operation of, data processing apparatus.
- a computer storage medium can be, or be included in, a computer-readable storage device, a computer-readable storage substrate, a random or serial access memory array or device, or a combination of one or more of them.
- a computer storage medium is not a propagated signal, a computer storage medium can be a source or destination of computer program instructions encoded in an artificially-generated propagated signal.
- the computer storage medium can also be, or be included in, one or more separate physical components or media (e.g., multiple CDs, disks, or other storage devices).
- the operations described in this specification can be implemented as operations performed by a data processing apparatus on data stored on one or more computer-readable storage devices or received from other sources.
- the term “data processing apparatus” encompasses all kinds of apparatus, devices, and machines for processing data, including by way of example a programmable processor, a computer, a system on a chip, or multiple ones, or combinations, of the foregoing.
- the apparatus can include special purpose logic circuitry, e.g., an FPGA (field programmable gate array) or an ASIC (application-specific integrated circuit).
- the apparatus can also include, in addition to hardware, code that creates an execution environment for the computer program in question, e.g., code that constitutes processor firmware, a protocol stack, a database management system, an operating system, a cross-platform runtime environment, a virtual machine, or a combination of one or more of them.
- the apparatus and execution environment can realize various different computing model infrastructures, such as web services, distributed computing and grid computing infrastructures.
- a computer program (also known as a program, software, software application, script, or code) can be written in any form of programming language, including compiled or interpreted languages, declarative or procedural languages, and it can be deployed in any form, including as a stand-alone program or as a module, component, subroutine, object, or other unit suitable for use in a computing environment.
- a computer program may, but need not, correspond to a file in a file system.
- a program can be stored in a portion of a file that holds other programs or data (e.g., one or more scripts stored in a markup language document), in a single file dedicated to the program in question, or in multiple coordinated files (e.g., files that store one or more modules, sub-programs, or portions of code).
- a computer program can be deployed to be executed on one computer or on multiple computers that are located at one site or distributed across multiple sites and interconnected by a communication network.
- the processes and logic flows described in this specification can be performed by one or more programmable processors executing one or more computer programs to perform actions by operating on input data and generating output.
- the processes and logic flows can also be performed by, and apparatus can also be implemented as, special purpose logic circuitry, e.g., a FPGA (field programmable gate array) or an ASIC (application-specific integrated circuit).
- special purpose logic circuitry e.g., a FPGA (field programmable gate array) or an ASIC (application-specific integrated circuit).
- processors suitable for the execution of a computer program include, by way of example, both general and special purpose microprocessors, and any one or more processors of any kind of digital computer.
- a processor will receive instructions and data from a read-only memory or a random access memory or both.
- the essential elements of a computer are a processor for performing actions in accordance with instructions and one or more memory devices for storing instructions and data.
- a computer will also include, or be operatively coupled to receive data from or transfer data to, or both, one or more mass storage devices for storing data, e.g., magnetic, magneto-optical disks, or optical disks.
- mass storage devices for storing data, e.g., magnetic, magneto-optical disks, or optical disks.
- a computer need not have such devices.
- a computer can be embedded in another device, e.g., a mobile telephone, a personal digital assistant (PDA), a mobile audio or video player, a game console, a Global Positioning System (GPS) receiver, or a portable storage device (e.g., a universal serial bus (USB) flash drive), to name just a few.
- Devices suitable for storing computer program instructions and data include all forms of non-volatile memory, media and memory devices, including by way of example semiconductor memory devices, e.g., EPROM, EEPROM, and flash memory devices; magnetic disks, e.g., internal hard disks or removable disks; magneto-optical disks; and CD-ROM and DVD-ROM disks.
- the processor and the memory can be supplemented by, or incorporated in, special purpose logic circuitry.
- a computer having a display device, e.g., a CRT (cathode ray tube) or LCD (liquid crystal display) monitor, for displaying information to the user and a keyboard and a pointing device, e.g., a mouse or a trackball, by which the user can provide input to the computer.
- a display device e.g., a CRT (cathode ray tube) or LCD (liquid crystal display) monitor
- keyboard and a pointing device e.g., a mouse or a trackball
- Other kinds of devices can be used to provide for interaction with a user as well; for example, feedback provided to the user can be any form of sensory feedback, e.g., visual feedback, auditory feedback, or tactile feedback; and input from the user can be received in any form, including acoustic, speech, or tactile input.
- a computer can interact with a user by sending documents to and receiving documents from a device that is used by the user; for example, by sending web pages to a
- Embodiments of the subject matter described in this specification can be implemented in a computing system that includes a back-end component, e.g., as a data server, or that includes a middleware component, e.g., an application server, or that includes a front-end component, e.g., a user computer having a graphical user interface or a Web browser through which a user can interact with an implementation of the subject matter described in this specification, or any combination of one or more such back-end, middleware, or front-end components.
- the components of the system can be interconnected by any form or medium of digital data communication, e.g., a communication network.
- Examples of communication networks include a local area network (“LAN”) and a wide area network (“WAN”), an inter-network (e.g., the Internet), and peer-to-peer networks (e.g., ad hoc peer-to-peer networks).
- LAN local area network
- WAN wide area network
- inter-network e.g., the Internet
- peer-to-peer networks e.g., ad hoc peer-to-peer networks.
- the computing system can include users and servers.
- a user and server are generally remote from each other and typically interact through a communication network. The relationship of user and server arises by virtue of computer programs running on the respective computers and having a user-server relationship to each other.
- a server transmits data (e.g., an HTML page) to a user device (e.g., for purposes of displaying data to and receiving user input from a user interacting with the user device).
- Data generated at the user device e.g., a result of the user interaction
Abstract
Description
- The Internet provides access to a wide variety of information. For example, digital image files, video and/or audio files, as well as web page resources for particular subjects or particular news articles, are accessible over the Internet.
- Furthermore, with the advent of tablet computers and smart phones, native applications that facilitate the performance of the same functions facilitated by the use of web page resources are now being provided in large numbers. Additionally, native applications that do not have websites with such synchronous content, such as games and other applications, are also very popular on tablet computers and smart phones. Accordingly, search systems now also facilitate searching of these native applications.
- One process by which search systems gather information for native applications is by accessing “deep links” for the native applications. A deep link is an instruction specifying a particular environment instance of a native application and configured to cause the native application to instantiate the environment instance of the specified native application when selected at a user device. The native application generates the environment instance for display within the native application on a user device.
- This specification describes technologies relating to pre-instantiate native applications in the background when a deep link to the pre-instantiate native applications are present in a set of search results.
- In general, one innovative aspect of the subject matter described in this specification can be embodied in a method that includes the action of receiving a set of search results, wherein the set includes search results that each include a native application deep link that instantiates an instance of a native application, wherein a native application generates environment instances for display on a user device within the native application, and the native application operates independent of a browser application that operates on the user device; selecting, prior to a user selection of a search result, native application deep links from the search results; instantiating, for each native application deep link that is selected, a background instance of the native application to which the native application deep link corresponds; determining, in response to an occurrence of a background unload event, background instances of the native applications instantiated from the native application deep links and that were not brought to the foreground prior to the occurrence of the background unload event; and terminating each of the background instances of the native applications instantiated that were not brought to the foreground prior to the occurrence of the background unload event. Other embodiments of this aspect include corresponding systems, apparatus, and computer programs, configured to perform the actions of the methods, encoded on computer storage devices.
- Particular embodiments of the subject matter described in this specification can be implemented so as to realize one or more of the following advantages. The present system enables a background pre-instantiation of a native application. The background pre-instantiation occurs without distracting or disturbing a user's ability to utilize a user device. The pre-instantiation of the native application reduces latency time for a user when a user selects a deep link corresponding to a particular native application. Furthermore, the automated terminating of pre-instantiated native applications for native application search results there were not selected automatically frees user device resources without user intervention. Thus, the reduced latency that occurs when a user selects a native application search result for which an application is pre-instantiated does not come with the attendant cost of leaving a number of native applications instantiated in the background after the user navigates away from a search environment.
- The details of one or more embodiments of the subject matter described in this specification are set forth in the accompanying drawings and the description below. Other features, aspects, and advantages of the subject matter will become apparent from the description, the drawings, and the claims.
-
FIG. 1A is a block diagram of an example environment in which native applications are instantiated in the background and brought to the foreground. -
FIG. 1B is a block diagram of a user device that is configured to pre-instantiate native applications from native application search results. -
FIG. 2 is a flow diagram describing a process for instantiating background instances of native applications. - Like reference numbers and designations in the various drawings indicate like elements.
- A system receives a set of search results that are responsive to a search query. Within the set of search results are deep links The system recognizes the presence of the deep links and pre-instantiates the native applications, which correspond to each deep link within the search results, in the background of a user device. As used herein, a native application generates environment instances for display on a user device within an environment of the native application, and operates independent of a browser application on the user device. A native application is an application specifically designed to run on a particular user device operating system and machine firmware. Native applications thus differ from browser-based applications and browser-rendered resources. The latter require all, or at least some, elements or instructions downloaded from a web server each time they are instantiated or rendered. Furthermore, browser-based applications and browser-rendered resources can be processed by all web-capable mobile devices within the browser and thus are not operating system specific.
- A deep link is an instruction specifying a particular environment instance of a native application and configured to cause the native application to instantiate the environment instance of the specified native application when selected at a user device. The native application generates the environment instance for display within the native application on a user device. For example, a deep link may specify a selection menu for a game environment; or content from a website, such as a news site, forum, and the like; or a particular recipe for a cooking application; and the like.
- The system and methods in this specification perform a pre-instantiation of an environmental instance of a native application to reduce latency time for users who wish to open the native application. In an implementation, the system, in response to receiving a set of search results that includes one or more deep links, identifies the one or more deep links present in the search results, and prelaunches or pre-instantiates the environmental instance for the native applications that correspond the one or more deep links When the native application is pre-instantiated, it is launched in the background of the user device such that a user does not notice the pre-instantiation.
- In some implementations, when a user selects a deep link from the search results, the pre-instantiated environmental instance of the native application is brought to the foreground and any other pre-instantiated environmental instances are terminated. In other implementations, if the system initiates an unload event, all pre-instantiated environmental instances of the native applications are terminated.
- These features and additional features are described in more detail below.
-
FIG. 1A is a block diagram of an example environment 100 in which native applications are instantiated in the background and brought to the foreground. Acomputer network 102, such as the Internet, connects resourcepublisher web sites 104,application publishers 106, user devices 108 and asearch system 110. - A
resource publisher website 104 includes one ormore web resources 105 associated with a domain and hosted by one or more servers in one or more locations. Generally, a resource publisher website is a collection of web pages formatted in hypertext markup language (HTML) that can contain text, images, multimedia content, and programming elements. Eachwebsite 104 is maintained by a content publisher, which is an entity that controls, manages and/or owns thewebsite 104. - A web page resource is any data that can be provided by a
publisher website 104 over thenetwork 102 and that has a resource address, e.g., a uniform resource locator (URL). Web resources may be HTML pages, images files, video files, audio files, and feed sources, to name just a few. The resources may include embedded information, e.g., meta information and hyperlinks, and/or embedded instructions, e.g., client-side scripts. - An
application publisher website 106 may also include one ormore web resources 105, and also providesnative applications 107. As described above, anative application 107 is an application specifically designed to run on a particular user device operating system and machine firmware. As used in this specification, an “environment instance” is a display environment within a native application and in which is displayed content, such as text, images, and the like. An environment instance is specific to the particular native application, and the native application is specific to the particular operating system of theuser device 108 a. An environment instance differs from a rendered web resource in that the environment instance is generated within and specific to the native application, while a web resource may be rendered in any browser for which the web page resource is compatible, and is independent of the operating system of the user device. - A
user device 108 a is an electronic device that is under the control of a user. Auser device 108 a is typically capable of requesting and receivingweb page resources 105 andnative applications 107 over thenetwork 102.Example user devices 108 a include personal computers, mobile communication devices, and tablet computers. - To search
web resources 105 and thenative applications 107, thesearch system 110 accesses aweb index 112 and anapplication index 114. Theweb index 112 is an index ofweb resources 105 that has, for example, been built from crawling thepublisher web sites 104. Theapplication index 114 is an index of environment instances fornative applications 107, and is constructed using anindexer 114 that receives data crawled from anapplication instance 122 of a native application. Although shown as separate indexes, theweb index 112 and theapplication index 114 can be combined in a single index. - The
user device 108 a submits search queries to thesearch system 110. In response to each query, thesearch system 110 accesses theweb index 112 and theapplication index 114 to respectively identify resources and applications that are relevant to the query. Thesearch system 110 may, for example, identify the resources and applications in the form of web resource search results and native application search results, respectively. Once generated, the search results are provided to theuser device 108 a from which the query was received. - A web resource search result is data generated by the
search system 110 that identifies a web resource and provides information that satisfies a particular search query. A web resource search result for a resource can include a web page title, a snippet of text extracted from the resource, and a resource locator for the resource, e.g., the URL of a web page. A native application search result specifies a native application and is generated in response to a search of theapplication index 114 of environment instances. A native application search results includes a “deep link” specifying a particular environment instance of the native application and which is configured to cause the native application to instantiate the specified environmental instance. For example, selection of a native application search result may cause the native application to launch (if installed on the user device 108) and generate an environment instance referenced in the application search result in the form of a screen shot. - As described above,
publishers 106 that providenative applications 107 also provide deep links to thesearch system 110. Furthermore, third parties may also provide deep links for native applications. Additionally, thesearch system 110 can discover deep links from other multiple sources, such as app maps, web page annotations, etc., and thus the set of deep links may be constantly changing. For example, an application publisher may provide a list ofdeep links 109 in the form of uniform resource identifiers (URIs) (or other instruction types that are specific to the native application published by the publisher). These deep links are deep links thatpublisher 106 desires to be crawled and indexed in theapplication index 114. - A deep link may specify a name of a native application, and may include optional parameters, e.g., <app_name>://<params>. These optional parameters may cause the native application to instantiate at a certain state, such as a particular screen, menu or environment within the native application. For example, for the native application “Example_App”, a deep link to simply launch the native application may be the application name without parameter:
- Example_App://
- However, should a native application search result specify certain information or a particular state for the native application, the certain information or particular state may be specified by parameters. For example, for the application to instantiate at a for a certain news story with a unique ID News12345, the deep link may be:
- Example_App://News12345
- A user can submit a search query on a
user device 108 a that will return a search resultspage 117 that may contain web resource search results 118 a, 118 c, and 118 n, and native application search results 118 b, 118 d, and 118 e. The system detects the deep links within the native application search results 118 b, 118 d and 118 e that are presented on the search resultspage 117 and begins pre-instantiatesnative applications 120 that correspond to native application search results 118 b, 118 d, and 118 e in the background of theuser device 108 a. In some implementations, the background pre-instantiatednative application instance 120 does not have an active viewport for a user to see or engage with. Thus, while thenative application 107 is launched and running, it is instantiated in such a way that the user does not notice the native application is running -
FIG. 1B is a block diagram of auser device 108 a that is configured to pre-instantiate native applications from native application search results. The operating system of theuser device 117, in some implementations, is configured to launch the native applications detected in the deep links in a manner so that they are launched in the background. For example, instructions that define a deeplink background launcher 140 may be included in the operating system. Alternatively, the instructions for the deeplink background launcher 140 can be realized by another native application that a user launches to process native application search results as described below. In yet other implementations, the instructions for the deeplink background launcher 140 can be included with any search results page or resource that includes a native application deep link. In still other implementations, thelauncher 140 can be realized in thesearch system 110, and is configured to modify the deep links when necessary to cause theuser device 108 a to pre-instantiate the native application upon processing the deep link. - As will be described below, the deep
link background launcher 140 is configured to determine when to pre-instantiate native applications, which deep links to process to pre-instantiate native applications, and when to terminate native applications that have been pre-instantiated. - In some implementations, a background launch can be done by appending a command line parameter to the deeplink and then processing the deep link, e.g.,
- Example_App://News12345&-bg
- Where “-bg” is a command line parameter that causes the native application to be launched in the background. Other processes to launch a native application in the background may also be used.
- In some implementations, a number of
native applications 107 that are pre-instantiated is determined based on constraints. For example, the number of pre-instantiatednative application instances 120 can depend on the amount of available system resources to preclude over-utilization the user device's resources (e.g., RAM, drive space, processing capability, etc.). - In addition, the deep
link background launcher 140 can limit the number of active pre-instantiated native application instances based on a ranking threshold. For example, the ranking threshold may be based on a minimum ordinal position of a deep link within the search results. To illustrate, assume a ranking threshold is an ordinal position of 5. Any native application search result in ordinal positions 1-5 will thus be selected for pre-instantiation, and any at an ordinal position greater than 5 will not be selected. The deeplink background launcher 140, prior to a user selection of a search result, selects native application deep links from the native application search results 118 b, 118 d, and 118 e, as their ordinal positions are 2, 4, and 5, respectively. Thus, any native application search results in a highest ranked proper subset ofsearch results 117 that meet the ranking threshold will be selected for pre-instantiation. - In some implementations, the ranking threshold can be based on user behavior signals for the native applications. The user behavior signals, for example, can specify how probable it is that a user may click a deep link based on time of the day, the day, and other predictive variables. Thus, the system may choose to limit the number of pre-instantiated
native application instances 120 to only those with deep links that the user will most likely select. Thesearch system 110 may access user history data to determine a probability for each deep link and provide the probability to the deep link background launcher. - In other implementations, the ranking threshold is based on a minimum relevance score for a search query. The search system may generate a relevance score for a deep link based on how relevant the deep link is to the search query. A relevance score may be determined by the number of times a deep link is clicked in response to a similar search query, a measure of relevance of the terms to the native application, or any other relevance scoring mechanism. The relevance score may be provided to the deep
link background launcher 140 for thelauncher 140 to make the determination. - The
launcher 140 selects whichnative application 107 to pre-instantiate based on the selected corresponding deep links within the search resultspage 117. In some implementations, thelauncher 140 sends to the user device operation system a “start” event with a unique identifier and an expiration time to pre-instantiate the native application instances in the background. The expiration time is a predefined time applied to the pre-instantiatednative application 120 defining an amount of time the pre-instantiatednative application 120 runs without user interaction before terminating 122 the pre-instantiatednative application instance 120. Further details regarding the expiration time and terminating 122 the pre-instantiated native application instance are provided below. - In some implementations, for each selected deep link that is pre-instantiated, a unique identifier is generated that corresponds to the particular instance of the
native application 107 and the corresponding deep link. In some implementations, the unique identifier is generated by applying a hash function to the deep link. For example, the hash function can be applied to a native application identity and a uniform resource indicator. The launcher pre-instantiates the background instance of the native application using the unique identifier to identify each active instantiation. Upon a user selection of a native application search result with a deep link, thelauncher 140 receives the selection and determines whether thenative application 107 to which the native application deep link corresponds has been instantiated in a backgroundnative application instance 120. If thenative application 107 has been instantiated in the background, the selection of deep link causes the native application instantiated 120 in the background instance to transition to a foreground instance on theuser device 108 b. A foreground instance ofnative application 107 has an active viewport that is viewable and can readily be interacted with by the user. Because the native application has been pre-instantiated, the transition to the foreground occurs with much less latency than there would be when the native application is launched after the user selection. - The system sends an “open” event with the unique identifier to cause the native application to transition to the foreground instance. If a native application with the same unique identifier is not pre-instantiated in the background, the native application is opened by launching the native application.
- In some implementations, a background unload event can occur at the expiration of a timeout period measured from the instantiation of the native
application background instances 120. For example, pre-instantiatednative application instances 120 that are not brought to the foreground are terminated 122 when thelauncher 140 generates sends an “unload” event accompanied with corresponding unique identifiers to thenative applications 107 that have activepre-instantiated instances 120. There are various implementations that can cause the system to send an “unload” event to anative application 107. For example, if a user does not interact with a deep link within the expiration time that was sent with a “start” event for a particular pre-instantiatednative application instance 120, a timer for the pre-instantiatednative application instance 120 expires and thelauncher 140 generates the background unloadevent 142. This causesterminations 122 of thenative applications 107. - In other implementations, the background “unload” event occurs upon the unloading of a page in which the set of
search results 117 are displayed. A page may be “unloaded” when a new set of search results for a search are requested, when a particular deep link is selected, or when the page is closed, for example. For example, upon a user selection of a particular deep link, the “open” event for the particular native application is generated by thelauncher 140, and an “unload” event is sent to thelauncher 140 for any other active pre-instantiatednative application instances 120 not associated with the particular deep link selected by the user. Thus, as the native application is brought to the foreground, the other active pre-instantiatednative applications 120 are terminated 122. - Similarly, if a user navigates away from the search results page, an “unload” event is generated by the
launcher 140 for all active pre-instantiatednative application instances 120 to terminate 122 the instances. - In some implementations, a particular native application may support pre-instantiating multiple
native application instances 120, and thelauncher 140 may pre-instantiate multiplenative application instances 120 for the particularnative application 107. Each instance may launch to a different portion of thenative application 107 based on the unique deep link used to launch the instance. For example, for three different deep links with different parameters for a particular native application, onenative application instance 120 may launch to a main menu, anotherinstance 120 of the native application may launch to a sub-menu, and anotherinstance 120 may launch to an editing environment within the native application. - The unique identifiers for the instances of the
native applications 107 can also be used to determine which instances to terminate. When a native application is pre-instantiated, its corresponding unique identifier is stored in memory by the operating system. Thereafter, when a native application that has been pre-instantiated is brought to the foreground, its corresponding unique identifier is removed from the memory. When the background unload signal is generated, any instances of native applications that were pre-instantiated and that still have unique identifier stored in the memory are terminated. - In the example where a
native application 107 can support multiplenative application instances 120, thelauncher 140 associates a unique identifier for eachinstance 120. Thus, for each native application that supports multiple instances of the native application, thelauncher 140 associates each of the created unique identifiers with a corresponding unique instance of the native application. This enables thelauncher 140 to bring the correctnative application instance 120 to the foreground when a user selects a particular deep link. Therefore, causing the native application instantiated in the background instance to transition to a foreground instance requires causing only the unique instance of the native application to transition to the foreground instance by using that unique instance's particular unique identifier with the “open” event. This also allows the system to determine which pre-instantiated native application instances were not brought to the foreground before the background unload event occurs and to terminate those pre-instantiated native applications. Finally, the use of the unique identifiers for each instantiation allows the system to ignore any instances of a native application that was loaded and in the background prior to the search operation. For example, a native application instance that was minimized by the user prior to a search will not be terminated if another instance of the native application is pre-instantiated in response to a native application deep link being provided in response to a search operation but not brought to the foreground before the background unload event occurs. - When a particular native application only supports a single instance of a native application on a user device, and multiple deep links for a particular native application are in the search results, the
launcher 140 selects only a single native application deep link for that native application. For example, with reference toFIG. 1B , assume native application search results 118 b and 118 d both have deep links to a chess program. The first deep link for thesearch result 118 b links to an opening book environment within the native application, and the second deep link for thesearch result 118 d links to a game selection menu within the native application. Because thesearch result 118 b is ranked above thesearch result 118 d, the native application is pre-instantiated to the opening book environment, and the deep link for thesearch result 118 d is not processed. - The deep
link background launcher 140 can be provided with data that describes which native applications support multiple instances and which support only single instances. For example, thesearch engine 110 may provide a file that describes the capabilities of the native applications to support multiple instances. Using this information, thelauncher 140 can then process the deep links as described above. - Although pre-instantiation of native application instances has been discussed with regards to search query and search results responsive to a search query, pre-instantiation of native application instances can occur within in any resource that contains an application
deep link 109. Thelauncher 140 can pre-instantiate a native application instance upon detection of any native applicationdeep link 109. For example, within a movie review application, there may be a movie watch, movie theater location, and/or movie trailer deep link present. Thelauncher 140 can pre-instantiate one or all of the native applications corresponding to thedeep links 109 present within the movie review application. -
FIG. 2 is a flow diagram describing aprocess 200 for instantiating background instances of native applications. Theprocess 200 can be implemented on a user device 108. Theprocess 200 receives a set of search results responsive to a search query (202). The set of search results include search results that each include a native applicationdeep link 109 that, when engaged with, instantiates an instance of anative application 107. In addition, anative application 107 generates environment instances for display on a user device within the native application, and thenative application 107 operates independent of a browser application that operates on the user device. - The
process 200 selects, prior to a user selection of a search result, native applicationdeep links 109 from the search results (204). As previously described, thelauncher 140 detects native applicationdeep links 109 that are present within a set of search results and selects the deep links based on various constraints. Upon selection of the deep links, thelauncher 140 instantiates, for each native application deep link that is selected, abackground instance 120 of the native application to which the native applicationdeep link 109 corresponds (206). - The
process 200 determines, in response to an occurrence of a background unload event, background instances of the native applications instantiated from the native application deep links and that were not brought to the foreground prior to the occurrence of the background unload event (208). For example, if a pre-instantiated native application instance received an “open” event, that native application instance moves to the foreground in a viewport accessible by the user. For the other active pre-instantiated native application instances, theprocess 200 unloads each of the background instances of the native applications instantiated that were not brought to the foreground prior to the occurrence of the background unload event (210). - Additional Implementation Details
- In situations in which the systems discussed here collect personal information about users, or may make use of personal information, the users may be provided with an opportunity to control whether programs or features collect user information (e.g., information about a user's social network, social actions or activities, profession, a user's preferences, or a user's current location), or to control whether and/or how to receive content from the content server that may be more relevant to the user. In addition, certain data may be treated in one or more ways before it is stored or used, so that personally identifiable information is removed. For example, a user's identity may be treated so that no personally identifiable information can be determined for the user, or a user's geographic location may be generalized where location information is obtained (such as to a city, ZIP code, or state level), so that a particular location of a user cannot be determined. Thus, the user may have control over how information is collected about the user and used by a content server.
- Embodiments of the subject matter and the operations described in this specification can be implemented in digital electronic circuitry, or in computer software, firmware, or hardware, including the structures disclosed in this specification and their structural equivalents, or in combinations of one or more of them. Embodiments of the subject matter described in this specification can be implemented as one or more computer programs, i.e., one or more modules of computer program instructions, encoded on computer storage medium for execution by, or to control the operation of, data processing apparatus.
- A computer storage medium can be, or be included in, a computer-readable storage device, a computer-readable storage substrate, a random or serial access memory array or device, or a combination of one or more of them. Moreover, while a computer storage medium is not a propagated signal, a computer storage medium can be a source or destination of computer program instructions encoded in an artificially-generated propagated signal. The computer storage medium can also be, or be included in, one or more separate physical components or media (e.g., multiple CDs, disks, or other storage devices).
- The operations described in this specification can be implemented as operations performed by a data processing apparatus on data stored on one or more computer-readable storage devices or received from other sources.
- The term “data processing apparatus” encompasses all kinds of apparatus, devices, and machines for processing data, including by way of example a programmable processor, a computer, a system on a chip, or multiple ones, or combinations, of the foregoing. The apparatus can include special purpose logic circuitry, e.g., an FPGA (field programmable gate array) or an ASIC (application-specific integrated circuit). The apparatus can also include, in addition to hardware, code that creates an execution environment for the computer program in question, e.g., code that constitutes processor firmware, a protocol stack, a database management system, an operating system, a cross-platform runtime environment, a virtual machine, or a combination of one or more of them. The apparatus and execution environment can realize various different computing model infrastructures, such as web services, distributed computing and grid computing infrastructures.
- A computer program (also known as a program, software, software application, script, or code) can be written in any form of programming language, including compiled or interpreted languages, declarative or procedural languages, and it can be deployed in any form, including as a stand-alone program or as a module, component, subroutine, object, or other unit suitable for use in a computing environment. A computer program may, but need not, correspond to a file in a file system. A program can be stored in a portion of a file that holds other programs or data (e.g., one or more scripts stored in a markup language document), in a single file dedicated to the program in question, or in multiple coordinated files (e.g., files that store one or more modules, sub-programs, or portions of code). A computer program can be deployed to be executed on one computer or on multiple computers that are located at one site or distributed across multiple sites and interconnected by a communication network.
- The processes and logic flows described in this specification can be performed by one or more programmable processors executing one or more computer programs to perform actions by operating on input data and generating output. The processes and logic flows can also be performed by, and apparatus can also be implemented as, special purpose logic circuitry, e.g., a FPGA (field programmable gate array) or an ASIC (application-specific integrated circuit).
- Processors suitable for the execution of a computer program include, by way of example, both general and special purpose microprocessors, and any one or more processors of any kind of digital computer. Generally, a processor will receive instructions and data from a read-only memory or a random access memory or both. The essential elements of a computer are a processor for performing actions in accordance with instructions and one or more memory devices for storing instructions and data. Generally, a computer will also include, or be operatively coupled to receive data from or transfer data to, or both, one or more mass storage devices for storing data, e.g., magnetic, magneto-optical disks, or optical disks. However, a computer need not have such devices. Moreover, a computer can be embedded in another device, e.g., a mobile telephone, a personal digital assistant (PDA), a mobile audio or video player, a game console, a Global Positioning System (GPS) receiver, or a portable storage device (e.g., a universal serial bus (USB) flash drive), to name just a few. Devices suitable for storing computer program instructions and data include all forms of non-volatile memory, media and memory devices, including by way of example semiconductor memory devices, e.g., EPROM, EEPROM, and flash memory devices; magnetic disks, e.g., internal hard disks or removable disks; magneto-optical disks; and CD-ROM and DVD-ROM disks. The processor and the memory can be supplemented by, or incorporated in, special purpose logic circuitry.
- To provide for interaction with a user, embodiments of the subject matter described in this specification can be implemented on a computer having a display device, e.g., a CRT (cathode ray tube) or LCD (liquid crystal display) monitor, for displaying information to the user and a keyboard and a pointing device, e.g., a mouse or a trackball, by which the user can provide input to the computer. Other kinds of devices can be used to provide for interaction with a user as well; for example, feedback provided to the user can be any form of sensory feedback, e.g., visual feedback, auditory feedback, or tactile feedback; and input from the user can be received in any form, including acoustic, speech, or tactile input. In addition, a computer can interact with a user by sending documents to and receiving documents from a device that is used by the user; for example, by sending web pages to a web browser on a user's user device in response to requests received from the web browser.
- Embodiments of the subject matter described in this specification can be implemented in a computing system that includes a back-end component, e.g., as a data server, or that includes a middleware component, e.g., an application server, or that includes a front-end component, e.g., a user computer having a graphical user interface or a Web browser through which a user can interact with an implementation of the subject matter described in this specification, or any combination of one or more such back-end, middleware, or front-end components. The components of the system can be interconnected by any form or medium of digital data communication, e.g., a communication network. Examples of communication networks include a local area network (“LAN”) and a wide area network (“WAN”), an inter-network (e.g., the Internet), and peer-to-peer networks (e.g., ad hoc peer-to-peer networks).
- The computing system can include users and servers. A user and server are generally remote from each other and typically interact through a communication network. The relationship of user and server arises by virtue of computer programs running on the respective computers and having a user-server relationship to each other. In some embodiments, a server transmits data (e.g., an HTML page) to a user device (e.g., for purposes of displaying data to and receiving user input from a user interacting with the user device). Data generated at the user device (e.g., a result of the user interaction) can be received from the user device at the server.
- While this specification contains many specific implementation details, these should not be construed as limitations on the scope of any inventions or of what may be claimed, but rather as descriptions of features specific to particular embodiments of particular inventions. Certain features that are described in this specification in the context of separate embodiments can also be implemented in combination in a single embodiment. Conversely, various features that are described in the context of a single embodiment can also be implemented in multiple embodiments separately or in any suitable subcombination. Moreover, although features may be described above as acting in certain combinations and even initially claimed as such, one or more features from a claimed combination can in some cases be excised from the combination, and the claimed combination may be directed to a subcombination or variation of a subcombination.
- Similarly, while operations are depicted in the drawings in a particular order, this should not be understood as requiring that such operations be performed in the particular order shown or in sequential order, or that all illustrated operations be performed, to achieve desirable results. In certain circumstances, multitasking and parallel processing may be advantageous. Moreover, the separation of various system components in the embodiments described above should not be understood as requiring such separation in all embodiments, and it should be understood that the described program components and systems can generally be integrated together in a single software product or packaged into multiple software products.
- Thus, particular embodiments of the subject matter have been described. Other embodiments are within the scope of the following claims. In some cases, the actions recited in the claims can be performed in a different order and still achieve desirable results. In addition, the processes depicted in the accompanying figures do not necessarily require the particular order shown, or sequential order, to achieve desirable results. In certain implementations, multitasking and parallel processing may be advantageous.
Claims (20)
Priority Applications (6)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US14/945,703 US10146842B2 (en) | 2015-11-19 | 2015-11-19 | Pre-instantiating native applications in background |
JP2018517190A JP6410992B1 (en) | 2015-11-19 | 2016-11-15 | Pre-instantiating native applications in the background |
KR1020187009185A KR102033704B1 (en) | 2015-11-19 | 2016-11-15 | Pre-instantiation of native applications in the background |
DE112016004130.6T DE112016004130T5 (en) | 2015-11-19 | 2016-11-15 | Pre-instantiate native applications in the background |
CN201680057518.6A CN108140037B (en) | 2015-11-19 | 2016-11-15 | Pre-instantiating native applications in the background |
PCT/US2016/062051 WO2017087394A1 (en) | 2015-11-19 | 2016-11-15 | Pre-instantiating native applications in background |
Applications Claiming Priority (1)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US14/945,703 US10146842B2 (en) | 2015-11-19 | 2015-11-19 | Pre-instantiating native applications in background |
Publications (2)
Publication Number | Publication Date |
---|---|
US20170147658A1 true US20170147658A1 (en) | 2017-05-25 |
US10146842B2 US10146842B2 (en) | 2018-12-04 |
Family
ID=57482512
Family Applications (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
US14/945,703 Active 2036-12-22 US10146842B2 (en) | 2015-11-19 | 2015-11-19 | Pre-instantiating native applications in background |
Country Status (6)
Country | Link |
---|---|
US (1) | US10146842B2 (en) |
JP (1) | JP6410992B1 (en) |
KR (1) | KR102033704B1 (en) |
CN (1) | CN108140037B (en) |
DE (1) | DE112016004130T5 (en) |
WO (1) | WO2017087394A1 (en) |
Cited By (4)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
CN111597027A (en) * | 2020-05-15 | 2020-08-28 | 北京百度网讯科技有限公司 | Application program starting method, device, equipment and storage medium |
WO2022055538A1 (en) * | 2020-09-09 | 2022-03-17 | Google Llc | Pre-launching an application using interprocess communication |
CN114237743A (en) * | 2021-12-14 | 2022-03-25 | 广州博冠信息科技有限公司 | Interface loading method and device, electronic equipment and storage medium |
US11301273B2 (en) * | 2020-03-11 | 2022-04-12 | Atlassian Pty Ltd. | Computer user interface for a virtual workspace having multiple application portals displaying context-related content |
Family Cites Families (18)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US6009432A (en) * | 1998-07-08 | 1999-12-28 | Required Technologies, Inc. | Value-instance-connectivity computer-implemented database |
CN1251121C (en) * | 2002-12-27 | 2006-04-12 | 华为技术有限公司 | Method for realizing maintenance interface system |
US7076616B2 (en) * | 2003-03-24 | 2006-07-11 | Sony Corporation | Application pre-launch to reduce user interface latency |
US20080005190A1 (en) * | 2006-06-28 | 2008-01-03 | Nokia Corporation | System, Method, Apparatus and Computer Program Product for Providing Resource Reclamation in a Virtual Machine |
US8032527B2 (en) * | 2007-08-29 | 2011-10-04 | Google Inc. | Search filtering |
US8010520B2 (en) * | 2008-01-25 | 2011-08-30 | International Business Machines Corporation | Viewing time of search result content for relevancy |
US9519726B2 (en) * | 2011-06-16 | 2016-12-13 | Amit Kumar | Surfacing applications based on browsing activity |
US20120324481A1 (en) * | 2011-06-16 | 2012-12-20 | Samsung Electronics Co. Ltd. | Adaptive termination and pre-launching policy for improving application startup time |
US9189252B2 (en) | 2011-12-30 | 2015-11-17 | Microsoft Technology Licensing, Llc | Context-based device action prediction |
US20140040226A1 (en) | 2012-07-31 | 2014-02-06 | Microsoft Corporation | Providing application result and preview |
US8886644B1 (en) * | 2012-11-01 | 2014-11-11 | Google Inc. | User control of search filter bubble |
US9002821B2 (en) * | 2013-01-16 | 2015-04-07 | Google Inc. | Indexing application pages of native applications |
US10430418B2 (en) * | 2013-05-29 | 2019-10-01 | Microsoft Technology Licensing, Llc | Context-based actions from a source application |
US9508040B2 (en) | 2013-06-12 | 2016-11-29 | Microsoft Technology Licensing, Llc | Predictive pre-launch for applications |
KR20150017156A (en) * | 2013-08-06 | 2015-02-16 | 삼성전자주식회사 | Method and apparatus for providing recommendations on portable terminal |
CN103778201A (en) * | 2014-01-10 | 2014-05-07 | 国网信通亿力科技有限责任公司 | Large-screen visualization display system and method based on procedural model configuration |
US20150242421A1 (en) * | 2014-02-21 | 2015-08-27 | Quixey, Inc. | Location-Based Searching |
US20150242510A1 (en) * | 2014-02-25 | 2015-08-27 | Quixey, Inc. | Interactive Search Results |
-
2015
- 2015-11-19 US US14/945,703 patent/US10146842B2/en active Active
-
2016
- 2016-11-15 KR KR1020187009185A patent/KR102033704B1/en active IP Right Grant
- 2016-11-15 CN CN201680057518.6A patent/CN108140037B/en active Active
- 2016-11-15 DE DE112016004130.6T patent/DE112016004130T5/en active Pending
- 2016-11-15 JP JP2018517190A patent/JP6410992B1/en active Active
- 2016-11-15 WO PCT/US2016/062051 patent/WO2017087394A1/en active Application Filing
Cited By (4)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US11301273B2 (en) * | 2020-03-11 | 2022-04-12 | Atlassian Pty Ltd. | Computer user interface for a virtual workspace having multiple application portals displaying context-related content |
CN111597027A (en) * | 2020-05-15 | 2020-08-28 | 北京百度网讯科技有限公司 | Application program starting method, device, equipment and storage medium |
WO2022055538A1 (en) * | 2020-09-09 | 2022-03-17 | Google Llc | Pre-launching an application using interprocess communication |
CN114237743A (en) * | 2021-12-14 | 2022-03-25 | 广州博冠信息科技有限公司 | Interface loading method and device, electronic equipment and storage medium |
Also Published As
Publication number | Publication date |
---|---|
CN108140037B (en) | 2021-08-06 |
US10146842B2 (en) | 2018-12-04 |
DE112016004130T5 (en) | 2018-06-14 |
WO2017087394A1 (en) | 2017-05-26 |
JP6410992B1 (en) | 2018-10-24 |
KR20180048940A (en) | 2018-05-10 |
CN108140037A (en) | 2018-06-08 |
KR102033704B1 (en) | 2019-10-17 |
JP2018534670A (en) | 2018-11-22 |
Similar Documents
Publication | Publication Date | Title |
---|---|---|
US9652550B2 (en) | Indexing application pages of native applications | |
US9547721B2 (en) | Native application search results | |
EP3161678B1 (en) | Deep links for native applications | |
US9608870B1 (en) | Deep link verification for native applications | |
US11836167B2 (en) | Search suggestions based on native application history | |
EP3251013B1 (en) | Monitoring application loading | |
US20160306801A1 (en) | Native application search result adjustment based on user specific affinity | |
US20150169703A1 (en) | Ranking of presentation modes for particular content | |
US20230106266A1 (en) | Indexing Access Limited Native Applications | |
US10146842B2 (en) | Pre-instantiating native applications in background | |
US9524347B1 (en) | Automatically implementing an application in response to a search query | |
US9513961B1 (en) | Monitoring application loading | |
EP3238105A1 (en) | Application partial deep link to a corresponding resource | |
US11003728B1 (en) | Native application search results | |
CN112204546A (en) | Causal selection preferences |
Legal Events
Date | Code | Title | Description |
---|---|---|---|
AS | Assignment |
Owner name: GOOGLE INC., CALIFORNIAFree format text: ASSIGNMENT OF ASSIGNORS INTEREST;ASSIGNORS:YEOM, JAEHYUN;LEE, DONG HA;CHOY, JONGHO;SIGNING DATES FROM 20151112 TO 20151116;REEL/FRAME:037095/0674 |
|
AS | Assignment |
Owner name: GOOGLE LLC, CALIFORNIAFree format text: CHANGE OF NAME;ASSIGNOR:GOOGLE INC.;REEL/FRAME:044567/0001Effective date: 20170929 |
|
STCF | Information on status: patent grant |
Free format text: PATENTED CASE |
|
CC | Certificate of correction | ||
MAFP | Maintenance fee payment |
Free format text: PAYMENT OF MAINTENANCE FEE, 4TH YEAR, LARGE ENTITY (ORIGINAL EVENT CODE: M1551); ENTITY STATUS OF PATENT OWNER: LARGE ENTITYYear of fee payment: 4 |