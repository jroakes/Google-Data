CN116644790A - Special neural network training chip - Google Patents
Special neural network training chip Download PDFInfo
- Publication number
- CN116644790A CN116644790A CN202310655432.5A CN202310655432A CN116644790A CN 116644790 A CN116644790 A CN 116644790A CN 202310655432 A CN202310655432 A CN 202310655432A CN 116644790 A CN116644790 A CN 116644790A
- Authority
- CN
- China
- Prior art keywords
- vector
- matrix
- dimensional
- hardware chip
- activation
- Prior art date
- Legal status (The legal status is an assumption and is not a legal conclusion. Google has not performed a legal analysis and makes no representation as to the accuracy of the status listed.)
- Pending
Links
- 238000013528 artificial neural network Methods 0.000 title claims abstract description 63
- 238000012549 training Methods 0.000 title claims abstract description 30
- 239000013598 vector Substances 0.000 claims abstract description 163
- 239000011159 matrix material Substances 0.000 claims abstract description 114
- 230000004913 activation Effects 0.000 claims abstract description 68
- 238000000034 method Methods 0.000 claims abstract description 32
- 230000015654 memory Effects 0.000 claims description 73
- 238000012545 processing Methods 0.000 claims description 59
- 230000009467 reduction Effects 0.000 claims description 17
- 238000004364 calculation method Methods 0.000 claims description 8
- 230000017105 transposition Effects 0.000 claims description 8
- 230000001105 regulatory effect Effects 0.000 claims 1
- 238000001994 activation Methods 0.000 description 20
- 238000004590 computer program Methods 0.000 description 12
- 238000004891 communication Methods 0.000 description 11
- 230000008569 process Effects 0.000 description 10
- 230000009471 action Effects 0.000 description 6
- 230000006870 function Effects 0.000 description 6
- 238000012546 transfer Methods 0.000 description 5
- 238000010586 diagram Methods 0.000 description 4
- 230000003993 interaction Effects 0.000 description 3
- 238000010801 machine learning Methods 0.000 description 2
- 230000003287 optical effect Effects 0.000 description 2
- 230000004044 response Effects 0.000 description 2
- 238000013515 script Methods 0.000 description 2
- 238000000926 separation method Methods 0.000 description 2
- 238000003491 array Methods 0.000 description 1
- 230000005540 biological transmission Effects 0.000 description 1
- 230000008859 change Effects 0.000 description 1
- 238000006243 chemical reaction Methods 0.000 description 1
- 230000001419 dependent effect Effects 0.000 description 1
- 239000004973 liquid crystal related substance Substances 0.000 description 1
- 238000013507 mapping Methods 0.000 description 1
- 230000000873 masking effect Effects 0.000 description 1
- 238000005457 optimization Methods 0.000 description 1
- 230000000644 propagated effect Effects 0.000 description 1
- 239000004065 semiconductor Substances 0.000 description 1
- 230000001953 sensory effect Effects 0.000 description 1
- 239000000758 substrate Substances 0.000 description 1
- 238000010977 unit operation Methods 0.000 description 1
- 230000000007 visual effect Effects 0.000 description 1
Classifications
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F17/00—Digital computing or data processing equipment or methods, specially adapted for specific functions
- G06F17/10—Complex mathematical operations
- G06F17/16—Matrix or vector computation, e.g. matrix-matrix or matrix-vector multiplication, matrix factorization
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06N—COMPUTING ARRANGEMENTS BASED ON SPECIFIC COMPUTATIONAL MODELS
- G06N3/00—Computing arrangements based on biological models
- G06N3/02—Neural networks
- G06N3/06—Physical realisation, i.e. hardware implementation of neural networks, neurons or parts of neurons
- G06N3/063—Physical realisation, i.e. hardware implementation of neural networks, neurons or parts of neurons using electronic means
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F9/00—Arrangements for program control, e.g. control units
- G06F9/06—Arrangements for program control, e.g. control units using stored programs, i.e. using an internal store of processing equipment to receive or retain programs
- G06F9/30—Arrangements for executing machine instructions, e.g. instruction decode
- G06F9/30003—Arrangements for executing specific machine instructions
- G06F9/30007—Arrangements for executing specific machine instructions to perform operations on data operands
- G06F9/3001—Arithmetic instructions
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F9/00—Arrangements for program control, e.g. control units
- G06F9/06—Arrangements for program control, e.g. control units using stored programs, i.e. using an internal store of processing equipment to receive or retain programs
- G06F9/30—Arrangements for executing machine instructions, e.g. instruction decode
- G06F9/30003—Arrangements for executing specific machine instructions
- G06F9/30007—Arrangements for executing specific machine instructions to perform operations on data operands
- G06F9/30032—Movement instructions, e.g. MOVE, SHIFT, ROTATE, SHUFFLE
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F9/00—Arrangements for program control, e.g. control units
- G06F9/06—Arrangements for program control, e.g. control units using stored programs, i.e. using an internal store of processing equipment to receive or retain programs
- G06F9/30—Arrangements for executing machine instructions, e.g. instruction decode
- G06F9/30003—Arrangements for executing specific machine instructions
- G06F9/30007—Arrangements for executing specific machine instructions to perform operations on data operands
- G06F9/30036—Instructions to perform operations on packed data, e.g. vector, tile or matrix operations
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F9/00—Arrangements for program control, e.g. control units
- G06F9/06—Arrangements for program control, e.g. control units using stored programs, i.e. using an internal store of processing equipment to receive or retain programs
- G06F9/30—Arrangements for executing machine instructions, e.g. instruction decode
- G06F9/30098—Register arrangements
- G06F9/30141—Implementation provisions of register files, e.g. ports
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F9/00—Arrangements for program control, e.g. control units
- G06F9/06—Arrangements for program control, e.g. control units using stored programs, i.e. using an internal store of processing equipment to receive or retain programs
- G06F9/30—Arrangements for executing machine instructions, e.g. instruction decode
- G06F9/38—Concurrent instruction execution, e.g. pipeline, look ahead
- G06F9/3885—Concurrent instruction execution, e.g. pipeline, look ahead using a plurality of independent parallel functional units
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F9/00—Arrangements for program control, e.g. control units
- G06F9/06—Arrangements for program control, e.g. control units using stored programs, i.e. using an internal store of processing equipment to receive or retain programs
- G06F9/30—Arrangements for executing machine instructions, e.g. instruction decode
- G06F9/38—Concurrent instruction execution, e.g. pipeline, look ahead
- G06F9/3885—Concurrent instruction execution, e.g. pipeline, look ahead using a plurality of independent parallel functional units
- G06F9/3887—Concurrent instruction execution, e.g. pipeline, look ahead using a plurality of independent parallel functional units controlled by a single instruction for multiple data lanes [SIMD]
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06N—COMPUTING ARRANGEMENTS BASED ON SPECIFIC COMPUTATIONAL MODELS
- G06N3/00—Computing arrangements based on biological models
- G06N3/02—Neural networks
- G06N3/08—Learning methods
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06N—COMPUTING ARRANGEMENTS BASED ON SPECIFIC COMPUTATIONAL MODELS
- G06N3/00—Computing arrangements based on biological models
- G06N3/02—Neural networks
- G06N3/08—Learning methods
- G06N3/084—Backpropagation, e.g. using gradient descent
-
- Y—GENERAL TAGGING OF NEW TECHNOLOGICAL DEVELOPMENTS; GENERAL TAGGING OF CROSS-SECTIONAL TECHNOLOGIES SPANNING OVER SEVERAL SECTIONS OF THE IPC; TECHNICAL SUBJECTS COVERED BY FORMER USPC CROSS-REFERENCE ART COLLECTIONS [XRACs] AND DIGESTS
- Y02—TECHNOLOGIES OR APPLICATIONS FOR MITIGATION OR ADAPTATION AGAINST CLIMATE CHANGE
- Y02D—CLIMATE CHANGE MITIGATION TECHNOLOGIES IN INFORMATION AND COMMUNICATION TECHNOLOGIES [ICT], I.E. INFORMATION AND COMMUNICATION TECHNOLOGIES AIMING AT THE REDUCTION OF THEIR OWN ENERGY USE
- Y02D10/00—Energy efficient computing, e.g. low power processors, power management or thermal management
Abstract
A method of training a neural network using a dedicated hardware chip is described, comprising: receiving, by a vector processor of a dedicated hardware chip, data representing a plurality of two-dimensional matrices of activation inputs, each two-dimensional matrix of activation inputs having a particular shape and comprising a portion of the activation inputs of an input activation matrix of a respective network layer of a neural network, generating, by a matrix multiplication unit, a respective multiplication result for each of the plurality of two-dimensional matrices; and updating the weight value of the neural network by back propagation based on the corresponding multiplication result.
Description
Cross Reference to Related Applications
The present application is a divisional application of patent application entitled "dedicated neural network training chip" with application number 201880018006.8, 5.17, 2018, which claims priority from U.S. patent application No.62/507,771 entitled "dedicated neural network training chip," filed 5.17, 2017, which is incorporated herein by reference in its entirety.
Background
The present description relates to performing neural network computations in hardware. Neural networks are machine learning models, each model employing one or more model layers to generate an output, e.g., a classification, for a received input. In addition to the output layer, some neural networks include one or more hidden layers. The output of each hidden layer serves as an input to the next layer in the network (i.e., the next hidden layer or output layer of the network). Each layer of the network generates an output from the received input based on the current values of the respective parameter sets.
Disclosure of Invention
This specification describes techniques related to dedicated hardware chips that are programmable linear algebraic accelerators optimized for machine learning workload, particularly for training phases.
In general, one innovative aspect of the subject matter described in this specification can be embodied in special purpose hardware chips.
Other embodiments of this aspect include respective computer systems, apparatuses, and computer programs recorded on one or more computer storage devices, each configured to perform the actions of the methods. For a system of one or more computers to be configured to perform a particular operation or action, meaning that the system has installed thereon software, firmware, hardware, or a combination thereof, in operation causes the system to perform the operation or action. For one or more computer programs to be configured to perform a particular operation or action, it is meant that the one or more programs include instructions that, when executed by the data processing apparatus, cause the apparatus to perform the operation or action.
The foregoing and other embodiments may each optionally include one or more of the following features, alone or in combination. In particular, one embodiment includes all of the following features in combination.
A dedicated hardware chip for training a neural network, the dedicated hardware chip comprising: a scalar processor configured to control computing operations of the dedicated hardware chip; a vector processor configured as a two-dimensional array with vector processing units that all execute the same instructions in a single instruction, multiple data manner, and communicate with each other through load and store instructions of the vector processor; and a matrix multiplication unit coupled to the vector processor, the matrix multiplication unit configured to multiply at least one two-dimensional matrix with another one-dimensional vector or two-dimensional matrix to obtain a multiplication result.
A vector memory configured to provide the vector processor with a fast private memory. A scalar memory configured to provide the scalar processor with a fast private memory. And a transposition unit configured to perform a transposition operation of the matrix. A reduction and permutation unit configured to perform reduction of the number and permute the number between different channels of the vector array. A high bandwidth memory configured to store data of the dedicated hardware chip. The dedicated hardware chip also includes a sparse computation core.
The special-purpose hardware chip further includes: an interface; and inter-chip interconnects for connecting the interfaces or resources on the dedicated hardware chip to other dedicated hardware chips or resources.
The dedicated hardware chip also includes high bandwidth memory. An inter-chip interconnect connects the interface and the high bandwidth memory to other dedicated hardware chips. The interface may be a host interface of a host computer. The interface may be a standard network interface of the host computer network.
The subject matter described in this specification can be implemented in specific embodiments to realize one or more of the following advantages. The dedicated hardware chip contains a processor that itself supports higher dimensional tensors (i.e., 2 and higher) in addition to the traditional 0 and 1 dimensional tensor computations, while also being optimized for machine-learned 32-bit or lower precision computations.
The details of one or more embodiments of the subject matter of this specification are set forth in the accompanying drawings and the description below. Other features, aspects, and advantages of the subject matter will become apparent from the description, the drawings, and the claims.
Drawings
FIG. 1 illustrates an example topology of a high-speed connection connecting an example combination of dedicated hardware chips that are connected in a ring topology on a board.
FIG. 2 depicts a high-level diagram of an example dedicated hardware chip for training a neural network.
Fig. 3 shows a high-level example of a computing core.
Fig. 4 shows a more detailed diagram of a chip that performs neural network training.
Like reference numbers and designations in the various drawings indicate like elements.
Detailed Description
A neural network with multiple layers can be trained and then used to compute inferences. Typically, some or all layers of the neural network have parameters that are adjusted during training of the neural network. For example, some or all layers may multiply a parameter matrix of layers, also referred to as weights, with an input of a layer as part of generating a layer output. The parameter values in the matrix are adjusted during training of the neural network.
In particular, during training, the training system performs a neural network training process to adjust parameter values of the neural network, e.g., to determine trained parameter values from initial values of the parameters. The training system uses error back propagation, known as back propagation, in conjunction with an optimization method to calculate a gradient of the objective function for each parameter of the neural network, and uses the gradient to adjust the value of the parameter.
The trained neural network may then use forward propagation to compute inferences, i.e., process inputs through layers of the neural network to generate neural network outputs for the inputs.
For example, given an input, the neural network may calculate an inference of the input. The neural network computes the inference by processing the input through each layer of the neural network. In some embodiments, the layers of the neural network are arranged in a sequence.
Thus, to calculate an inference from the received inputs, the neural network receives the inputs and processes through each neural network layer in the sequence to produce an inference, wherein the output from one neural network layer is provided as an input to the next neural network layer. The data input of a neural network layer may be referred to as an activation input of the layer, such as an input to the neural network or an output to a layer below a layer in a sequence of neural network layers.
In some embodiments, layers of the neural network are arranged in a directed graph. That is, any particular layer may receive multiple inputs, multiple outputs, or both. The layers of the neural network may also be arranged such that the output of a layer may be sent back as input to the previous layer.
An example system is a high performance multi-chip tensor computing system that is optimized for matrix multiplication and other computations for multi-dimensional arrays. These operations are important for training the neural network and, optionally, for using the neural network to calculate the inference.
Within an example system, a plurality of specialized chips are arranged to distribute operations so that the system efficiently performs training and inference calculations. In one embodiment, there are four chips on a board, and in a larger system, many boards are adjacent to each other in a rack or otherwise in data communication with each other.
FIG. 1 illustrates an example topology of a high-speed connection connecting an example combination of dedicated hardware chips 101a-101d, the dedicated hardware chips 101a-101d being connected in a ring topology on a board. Each chip contains two processors (102 a-h). The topology is a one-dimensional (1D) torus; in a 1D torus, each chip is directly connected to two adjacent chips. As shown, in some embodiments, the chip contains a microprocessor core that has been programmed with software or firmware instructions to operate. In fig. 1, all chips are on a single module 100. The lines between the processors shown in the figure represent high-speed data communication links. The processors are advantageously fabricated on one integrated circuit board, but they may also be fabricated on multiple boards. Across chip boundaries, the links are inter-chip network links; processors on the same chip communicate via an intra-chip interface link. The link may be a half-duplex link on which only one processor can transmit data at a time, or a full-duplex link on which data can be transmitted in both directions simultaneously. Parallel processing using this example topology and the like is described in detail in U.S. patent application Ser. No. 62/461,758, entitled "PARALLEL PROCESSING OF REDUCTION AND BROADCAST OPERATIONS ON LARGE DATASETS OF NON-SCALAR DATA," filed on 21, 2017, and incorporated herein by reference.
FIG. 2 depicts a high-level diagram of an example dedicated hardware chip for training a neural network. As shown, a single dedicated hardware chip includes two independent processors (202 a,202 b). Each processor (202 a,202 b) contains two different cores: (1) Computing cores, e.g., very Long Instruction Word (VLIW) machines, (203 a,203 b) and (2) sparse computing cores, i.e., embedded layer accelerators, (205 a,205 b).
Each core (203 a, b) is optimized for dense linear algebra problems. A single very long instruction word controls multiple compute cores in parallel. The computing core will be described in more detail with reference to fig. 3 and 4.
The example sparse computation cores (205 a, b) map very sparse high-dimensional data into dense low-dimensional data, such that the remaining layers process densely packed input data. For example, the sparse computation core may perform any embedded layer computation in the neural network being trained.
To do this sparse to dense mapping, the sparse computation core uses a pre-built look-up table, i.e., an embedded table. For example, when there is a series of query terms as user input, each query term is converted into a hash identifier or a one-hot encoding vector. Using the identifier as a table index, the embedded table returns a corresponding dense vector, which may be the input activation vector for the next layer. The sparse computation core may also perform a reduce operation across search query terms to create a dense activation vector. The sparse compute core performs an efficient sparse distributed lookup because the embedded table may be large and unsuitable for the limited capacity high bandwidth memory of one dedicated hardware chip. More details about sparse computing core functions can be found in U.S. patent application Ser. No. 15/016,486, entitled "MATRIX PROCESSING APPARATUS," filed on even date 2016, 2,
And are incorporated herein by reference.
Fig. 3 shows a high-level example of a computing core (300). The computing core may be a machine, i.e. a VLIW machine, which controls several computing units in parallel. Each computing core (300) comprises: scalar memory (304), vector memory (308), scalar processor (303), vector processor (306) and expansion vector unit (i.e., matrix multiplication unit (MXU) (313), transpose unit (XU) (314), and Reduction and Permutation Unit (RPU) (316)).
An example scalar processor performs VLIW instruction fetch/execute cycles and controls a compute core. After fetching and decoding the instruction bundles, the scalar processor itself executes the instructions found in the scalar slots of the bundles using only the scalar processor (303) and the multiple multi-bit registers of the scalar memory (304), i.e., the 32-bit registers. The scalar instruction set includes, for example, normal arithmetic operations for address calculation, load/store instructions, and branch instructions. The remaining instruction slots encode instructions for a vector processor (306) or other extension vector unit (313,314,316). The decoded vector instructions are forwarded to a vector processor (306).
Scalar processor (303) may forward up to three scalar register values with vector instructions to other processors and units for operation. The scalar processor may also retrieve the calculation results directly from the vector processor. However, in some embodiments, the example chip has a low bandwidth from a vector processor to a scalar processor
A communication path.
The vector instruction scheduler is located between the scalar processor and the vector processor. The scheduler receives decoded instructions from the non-scalar VLIW slots and broadcasts the instructions to the vector processor (306). The vector processor (306) is comprised of a two-dimensional array of vector processing units, i.e., a 128 x 8 array, that execute the same instructions in a Single Instruction Multiple Data (SIMD) manner. The vector processing unit is described in detail with reference to fig. 4.
The example scalar processor (303) accesses a small, fast private scalar memory (304) that is backed up by a larger but slower High Bandwidth Memory (HBM) (310). Similarly, the example vector processor (306) accesses a small, fast private vector memory (306), which is also backed up by the HBM (310). Word-granularity access occurs between scalar processor (303) and scalar memory (304) or vector processor (306) and vector memory (308). The granularity of the load and store between the vector processor and the vector memory is a vector of 128 32-bit words. Direct memory accesses occur between scalar memory (304) and HBM (310) and between vector memory (306) and HBM (310). In some implementations, the memory transfer from the HBM (310) to the processor (303,306) may be accomplished through scalar or vector memory only. In addition, there may be no direct memory transfer between the scalar memory and the vector memory.
The instruction may specify an extended vector unit operation. Along with each executed vector unit instruction, there are two-dimensional, i.e. 128 by 8 vector units, each of which can send one register value as an input operand to the extension vector unit. Each expansion vector unit takes an input operand, performs a corresponding operation, and returns the result to the vector processor (306). The extension vector unit will be described below with reference to fig. 4.
Fig. 4 shows a more detailed diagram of a chip that performs neural network training. As shown and described above, the chip contains two compute cores (480 a,480 b) and two sparse compute cores (452 a,452 b).
The chip has a shared area that includes an interface to a host computer (450) or a plurality of host computers. The interface may be a host interface of a host computer or may be a standard network interface of a host computer network. The shared region may also have a high bandwidth memory stack (456 a-456 d) along the bottom and an inter-chip interconnect (448) connecting the interface and memory together with data from other chips. The interconnect may also connect the interface to computing resources on the hardware chip. A plurality of stacks, i.e., two high bandwidth memories (456 a-b,456 c-d), are associated with each computing core (480 a,480 b).
The chip stores the data in a high bandwidth memory (456 c-d), reads the data into and out of a vector memory (446), and processes the data. The compute core (480 b) itself includes vector memory (446) which is on-chip S-RAM that is split into two dimensions. The vector memory has an address space in which addresses accommodate floating point numbers, i.e., 128 numbers of 32 bits each. The computing core (480 b) further includes a computing unit that computes values and a scalar unit that controls the computing unit. The computing unit may include a vector processor, and the scalar unit may include a scalar processor. The computing core, which may form part of a dedicated chip, may also include a matrix multiplication unit or another extended operation unit, such as a transpose unit (422) that performs a transpose operation of the matrix (i.e., 128 x 128 matrix), and a reduction and permutation unit.
Vector processor (306) is comprised of a two-dimensional array of vector processing units (i.e., 128 x 8), all executing the same instructions in a Single Instruction Multiple Data (SIMD) fashion. The vector processor has channels and sub-channels, i.e. 128 channels and 8 sub-channels. Within the channel, vector units communicate with each other through load and store instructions. Each vector unit may access one 4 byte value at a time. Vector units that do not belong to the same channel cannot communicate directly. These vector units must use the reduction/permutation units described below.
The calculation unit includes vector registers, i.e. 32 registers, in the vector processing unit (440), which can be used for floating point operations and integer operations. The computation unit includes two Arithmetic Logic Units (ALUs) (406 c-d) to perform the computation. One ALU (406 c) performs floating point addition and the other ALU (406 d) performs floating point multiplication. Various other operations, such as shifting, masking and comparing, may be performed by both ALUs (406 c-d). For example, the computing core (480 b) may want vector register V 1 Adding a second vector register V 2 And put the result into the third vector register V 3 Is a kind of medium. To compute the addition, the compute core (480 b) performs multiple operations in one clock cycle. Using these registers as operationsEach vector unit may execute two ALU instructions, one load and one store instruction, simultaneously per clock cycle. The base address of a load or store instruction may be calculated in a scalar processor and forwarded to a vector processor. Each vector unit in each subchannel may calculate its own offset address using various methods such as stride and dedicated index address registers.
The computation unit also includes an Extended Unary Pipeline (EUP) (416) that performs operations such as square root and reciprocal. The compute core (480 b) requires three clock cycles to perform these operations because they are more computationally complex. Since the EUP process requires more than one clock cycle, a fifo data memory is used to store the results. After the operation is completed, the result will be stored in the FIFO. The compute core may later pull the data from the FIFO and place the data into the vector registers using separate instructions. The random number generator (420) allows the compute core (480 b) to generate a plurality of random numbers per cycle, i.e., 128 random numbers per cycle.
As described above, each processor, which may be implemented as part of a dedicated hardware chip, has three extended operating units: a matrix multiplication unit (448) that performs matrix multiplication; a transpose unit (422) that performs a transpose operation of the matrix (i.e., 128x 128 matrix), and a reduction and permutation unit (424, 426 are shown as separate units in fig. 4).
The matrix multiplication unit performs matrix multiplication between two matrices. Since the computation core needs to load a set of numbers of the matrix to be multiplied, the matrix multiplication unit (438) receives the data. As shown, the data comes from vector registers (440). Each vector register contains 128x 8 digits, i.e. 32 digits. However, floating point conversion may occur when data is sent to the matrix multiplication unit (448) to change the number to a smaller bit size, i.e. from 32 bits to 16 bits. The serializer (440) ensures when digits are read out of the vector register, and a two-dimensional array, i.e. a 128x 8 matrix, is read as a set of 128 digits, which is sent to the matrix multiplication unit (448) for each of the next eight clock cycles. After the matrix multiplication has completed the computation, the results are de-serialized (447a, b), which means that the result matrix is held for several clock cycles. For example, for a 128x 8 array, 128 digits are held for each of the 8 clock cycles, and then the 128 digits are pushed to the FIFO so that a two-dimensional array of 128x 8 digits can be grabbed and stored in the vector register (440) in one clock cycle.
In a section of the period, i.e. 128, the weights are shifted into the matrix multiplication unit (448) as numbers to be multiplied by the matrix. Once the matrix and weights have been loaded, the computation core (480) may send a set of numbers (i.e., 128 x 8) to the matrix multiplication unit (448). Each row in the set may be multiplied by a matrix to produce several (i.e., 128) results per clock cycle. When the computing core performs a matrix multiplication, the computing core also shifts the new number set in the background to the next matrix that the computing core will multiply to be available when the computing process of the previous matrix is completed. Matrix multiplication unit (448) is described in more detail in application Ser. No. 16113-8251001, entitled "LOW MATRIX MULTIPLY UNIT COMPOSED OF MULTI-BIT CELLS", and Ser. No. 16113-8252001, entitled "MATRIX MULTIPLY UNIT WITH NUMERICS OPTIMIZED FOR NEURAL NETWORK APPLICATIONS", both of which are incorporated herein by reference.
The transpose unit transposes the matrix. A transpose unit (422) receives the numbers and transposes them such that the numbers across the channel are transposed along with the numbers in the other dimension. In some embodiments, the vector processor includes 128 x 8 vector units. Thus, to transpose a 128×128 matrix, a full matrix transpose requires 16 separate transpose instructions. After the transpose is complete, the transpose matrix will be available. However, explicit instructions are required to move the transpose into the vector register file.
The reduction/permutation units (or units 424, 426) solve the problem of cross-channel communication by supporting various operations such as permutation, channel rotation, rotation permutation, channel reduction, permutation channel reduction, and segment permutation channel reduction. As shown, these computations are separate, however, the computing cores may be linked to one another using one or the other or one. The reduction unit (424) adds all the digits in each row of digits and feeds the digits to the permutation unit (426). The permutation unit moves the data between the different channels. The transpose unit, the reduction unit, the permutation unit, and the matrix multiplication unit each require more than one clock cycle to complete. Thus, each cell has an associated FIFO, so the calculation result can be pushed to the FIFO, and a separate instruction can be executed later to pull the data from the FIFO and into the vector register. By using FIFOs, the compute core does not need to hold multiple vector registers during lengthy operations. As shown, each cell retrieves data from vector registers (440).
The compute core uses scalar units to control the compute units. Scalar units have two main functions: (1) performing cycle counting and addressing; (2) Direct Memory Address (DMA) requests are generated so that the DMA controller moves data in the background between the high bandwidth memory (456 c-d) and the vector memory (446), and then moves the data to the inter-chip connection (448) to other chips in the example system. The scalar unit includes an instruction memory (404), instruction decode and issue (402), a scalar processing unit (408) including scalar registers (i.e., 32 bits), a scalar memory (410), and two ALUs (406 a, b) for performing operations twice per clock cycle. Scalar units may feed operands and immediate values to vector operations. Each instruction may be sent from instruction decode and issue (402) as an instruction bundle containing instructions for execution on vector registers (440). Each instruction bundle is a Very Long Instruction Word (VLIW), and each instruction is several bits wide, divided into a number of instruction fields.
Chip 400 may be used to perform at least a portion of the training of a neural network. In particular, when training a neural network, the system receives labeled training data from a host computer using a host interface (450). The host interface may also receive instructions including parameters calculated by the neural network. The parameters may include at least one or more of the following: how many layers should be processed, the corresponding set of weight inputs for each layer, the initial set of activation inputs, i.e., training data, which is an input to the neural network, the magnitude of the corresponding inputs and outputs for each layer, the magnitude of the steps computed by the neural network, and the type of layer to be processed, e.g., a convolutional layer or a fully-connected layer.
The set of weight inputs and the set of activation inputs may be sent to a matrix multiplication unit of a computation core. There may be other calculations made on the inputs by other components in the system before sending the weight inputs and the activation inputs to the matrix multiplication unit. In some implementations, there are two ways to send the activation from the sparse computing core to the computing core. First, the sparse compute core may send communications through a high bandwidth memory. For large amounts of data, the sparse compute core may store the activations in high bandwidth memory using Direct Memory Address (DMA) instructions that update the target sync mark in the compute core. The compute kernel may wait for this synchronization flag using a synchronization instruction. Once the sync flag is set, the computing core copies the activation from the high bandwidth memory to the corresponding vector memory using DMA instructions.
Second, the sparse compute core may send communications directly to the compute core vector memory. If the amount of data is not large (i.e., suitable for the compute core vector memory), the sparse compute core may store the activation directly in the compute core's vector memory using DMA instructions while informing the compute core of the synchronization mark. The computing core may wait for this synchronization flag before performing the activation-dependent computation.
The matrix multiplication unit may process the weight inputs and the activation inputs and provide the vector or matrix of outputs to the vector processing unit. The vector processing unit may store the vectors or matrices of the processed outputs. For example, the vector processing unit may apply a nonlinear function to the output of the matrix multiplication unit to generate the activation value. In some embodiments, the vector processing unit generates a normalized value, a combined value, or both. The vector of processed outputs may be used as an activation input for a matrix multiplication unit for subsequent layers in the neural network.
Once the vector of processed outputs of a batch of training data is calculated, the outputs may be compared to the expected outputs of the labeled training data to determine an error. The system may then back-propagate to propagate errors through the neural network in order to train the network. The gradient of the loss function is calculated using an arithmetic logic unit of the on-chip vector processing unit.
The example system requires activation of the gradient to perform back propagation through the neural network. To send the activation gradient from the compute core to the sparse compute core, the example system may use compute core DMA instructions to store the activation gradient in high bandwidth memory while notifying the target sparse compute core with a synchronization mark. The sparse computation core may wait for the sync mark before performing the computation that depends on the activation gradient.
The matrix multiplication unit performs two matrix multiplication operations for back propagation. A matrix multiplication applies back propagation errors from a previous layer in the network to the weights along the back path through the network to adjust the weights and determine new weights for the neural network. The second matrix multiplication applies the error to the original activation as feedback to the previous layers in the neural network. The original activation is generated during forward transfer and may be stored for use during reverse transfer. For computation, general-purpose instructions in the vector processing unit may be used, including floating point addition, subtraction, and multiplication. The general purpose instructions may also include compare, shift, mask, and logic operations. Although matrix multiplication can be accelerated particularly well, the arithmetic logic unit of the vector processing unit performs general calculations at a rate of 128 x 8 x 2 operations per core per cycle.
Embodiments of the subject matter and the functional operations described in this specification can be implemented in digital electronic circuitry, in tangible embodied in computer software or firmware, in computer hardware, including the structures disclosed in this specification and their structural equivalents, or in combinations of one or more of them. Embodiments of the subject matter described in this specification can be implemented as one or more computer programs, i.e., one or more modules of computer program instructions encoded on a tangible, non-transitory program carrier for execution by, or to control the operation of, data processing apparatus. The computer storage medium can be a machine-readable storage device, a machine-readable storage substrate, a random or serial access storage device, or a combination of one or more of them. Alternatively, or in addition, the program instructions can be encoded on a manually-generated propagated signal, e.g., a machine-generated electrical, optical, or electromagnetic signal, that is generated to encode information for transmission to suitable receiver apparatus for execution by data processing apparatus.
The term "data processing apparatus" refers to data processing hardware and includes all types of apparatus, devices, and machines for processing data, including for example, a programmable processor, a computer, or multiple processors or computers. The apparatus may also or further comprise dedicated logic circuits, such as an FPGA (field programmable gate array) or an ASIC (application specific integrated circuit). In addition to hardware, the apparatus may include code that creates an execution environment for the computer program in question, e.g., code that constitutes processor firmware, a protocol stack, a database management system, an operating system, or a combination of one or more of them.
A computer program, also known as a program, software application, script, or code, can be written in any form of programming language, including compiled or interpreted languages, declarative or procedural languages, and it can be deployed in any form, including as a stand-alone program or as a module, component, subroutine, object, or other unit suitable for use in a computing environment. The computer program may, but need not, correspond to a file in a file system. A program can be stored in a portion of a file that holds other programs or data, e.g., one or more scripts stored in a markup language document, in a single file dedicated to the program in question, or in multiple coordinated files, e.g., files that store one or more modules, sub-programs, or portions of code. A computer program can be deployed to be executed on one computer or on multiple computers at one site or distributed across multiple sites and interconnected by a communication network.
The processes and logic flows described in this specification can be performed by one or more programmable computers executing one or more computer programs to perform functions by operating on input data and generating output. The processing and logic flows can also be performed by, and apparatus can also be implemented as, special purpose logic circuitry, e.g., an FPGA (field programmable gate array), an ASIC (application-specific integrated circuit), or a GPGPU (general purpose graphics processing unit).
Computers suitable for executing computer programs include, for example, capable of being based on a general purpose or special purpose microprocessor or both, or any other type of central processing unit. Typically, a central processing unit will receive instructions and data from a read only memory or a random access memory or both. The essential elements of a computer are a central processing unit for performing or executing instructions and one or more memory devices for storing instructions and data. The central processing unit and the memory may be supplemented by, or incorporated in, special purpose logic circuitry. Generally, a computer will also include, or be operatively coupled to receive data from or transfer data to, or both, one or more mass storage devices for storing data, e.g., magnetic, magneto-optical disks, or optical disks. However, the computer need not have such a device. In addition, the computer may be embedded in another device, such as a mobile phone, a Personal Digital Assistant (PDA), a mobile audio or video player, a game console, a Global Positioning System (GPS) receiver, or a portable storage device, such as a Universal Serial Bus (USB) flash drive, to name a few.
Computer readable media suitable for storing computer program instructions and data include all forms of non-volatile memory, media and memory devices, including by way of example semiconductor memory devices, e.g., EPROM, EEPROM, and flash memory devices; magnetic disks, such as internal hard disks or removable disks; magneto-optical disk; and CD-ROM and DVD-ROM disks.
To provide for interaction with a user, embodiments of the subject matter described in this specification can be implemented on a computer having a display device, e.g., a CRT (cathode ray tube) or LCD (liquid crystal display) monitor, for displaying information to the user and a keyboard and a pointing device, e.g., a mouse or a trackball, by which the user can provide input to the computer. Other types of devices may also be used to provide interaction with a user; for example, feedback provided to the user may be any form of sensory feedback, such as visual feedback, auditory feedback, or tactile feedback; and input from the user may be received in any form, including acoustic, speech, or tactile input. In addition, a computer may interact with a user by sending and receiving documents to and from devices used by the user; for example, by sending a web page to a web browser on a user device of a user in response to a request received from the web browser. Moreover, the computer may interact with the user by sending text messages or other forms of messages to a personal device (e.g., a smart phone running a messaging application), and receiving response messages from the user.
Embodiments of the subject matter described in this specification can be implemented in a computing system that includes a back-end component, e.g., as a data server, or that includes a middleware component, e.g., an application server, or that includes a front-end component, e.g., a user computer having a graphical user interface or a Web browser through which a user can interact with an implementation of the subject matter described in this specification, or any combination of one or more such back-end, middleware, or front-end components. The components of the system can be interconnected by any form or medium of digital data communication, e.g., a communication network. Examples of communication networks include a local area network ("LAN") and a wide area network ("WAN"), such as the Internet.
The computing system may include clients and servers. The client and server are typically remote from each other and typically interact through a communication network. The relationship of client and server arises by virtue of computer programs running on the respective computers and having a client-server relationship to each other. In some embodiments, the server sends data, e.g., HTML pages, to the user device, e.g., for the purpose of displaying data to and receiving user input from a user interacting with the device acting as a client. Data generated at the user device, e.g., results of a user interaction, may be received at the server from the device.
Embodiment 1 is a special-purpose hardware chip for training a neural network, the special-purpose hardware chip comprising: a scalar processor configured to control computing operations of the dedicated hardware chip; a vector processor configured as a two-dimensional array with vector processing units that all execute the same instructions in a single instruction, multiple data manner, and communicate with each other through load and store instructions of the vector processor; and a matrix multiplication unit coupled to the vector processor, the matrix multiplication unit configured to multiply at least one two-dimensional matrix with another one-dimensional vector or two-dimensional matrix to obtain a multiplication result.
Embodiment 2 is the special-purpose hardware chip of embodiment 1, further comprising: a vector memory configured to provide the vector processor with a fast private memory.
Embodiment 3 is the special-purpose hardware chip of embodiment 1 or 2, further comprising: a scalar memory configured to provide the scalar processor with a fast private memory.
Embodiment 4 is the special-purpose hardware chip of any one of embodiments 1-3, further comprising: and a transposition unit configured to perform a transposition operation of the matrix.
Embodiment 5 is the special-purpose hardware chip of any one of embodiments 1-4, further comprising: a reduction and permutation unit configured to perform reduction of the number and permute the number between different channels of the vector array.
Embodiment 6 is the special-purpose hardware chip of any one of embodiments 1-5, further comprising: a high bandwidth memory configured to store data of the dedicated hardware chip.
Embodiment 7 is the special-purpose hardware chip of any one of embodiments 1-6, further comprising: sparse computing kernels.
Embodiment 8 is the special-purpose hardware chip of any one of embodiments 1-7, further comprising: an interface; and inter-chip interconnects for connecting the interfaces or resources on the dedicated hardware chip to other dedicated hardware chips or resources.
Embodiment 9 is the special-purpose hardware chip of any one of embodiments 1-8, further comprising: a plurality of high bandwidth memories; wherein the inter-chip interconnect connects the interface and the high bandwidth memory to other dedicated hardware chips.
Embodiment 10 is the special-purpose hardware chip of any one of embodiments 1-9, wherein the interface is a host interface of a host computer.
Embodiment 11 is the special-purpose hardware chip of any one of embodiments 1-10, wherein the interface is a standard network interface of a network of host computers.
While this specification contains many specific implementation details, these should not be construed as limitations on the scope of any features or of what may be claimed, but rather as descriptions of features specific to particular embodiments. Certain features that are described in this specification in the context of separate embodiments can also be implemented in combination in a single embodiment. Conversely, various features that are described in the context of a single embodiment can also be implemented in multiple embodiments separately or in any suitable subcombination. Furthermore, although features may be described above as acting in certain combinations and even initially claimed as such, one or more features from a claimed combination can in some cases be excised from the combination, and the claimed combination may be directed to a subcombination or variation of a subcombination.
Similarly, although operations are depicted in the drawings in a particular order, this should not be understood as requiring that such operations be performed in the particular order shown or in sequential order, or that all illustrated operations be performed, to achieve desirable results. In some cases, multitasking and parallel processing may be advantageous. Moreover, the separation of various system components in the embodiments described above should not be understood as requiring such separation in all embodiments, and it should be understood that the described program components and systems can generally be integrated in a single software product or packaged into multiple software products.
Thus, particular embodiments of the subject matter have been described. Other embodiments are within the scope of the following claims. For example, the actions recited in the claims can be performed in a different order and still achieve desirable results. As one example, the processes depicted in the accompanying drawings do not necessarily require the particular order shown, or sequential order, to achieve desirable results. In some implementations, multitasking and parallel processing may be advantageous.
Claims (38)
1. A method of training a neural network using dedicated hardware chips, the method comprising:
receiving, by a vector processor of the dedicated hardware chip, data representing a plurality of two-dimensional matrices of activation inputs, each two-dimensional matrix of activation inputs having a particular shape and including a portion of the activation inputs of an input activation matrix of a respective network layer of a neural network, wherein the vector processor comprises:
a plurality of vector processing units arranged in a two-dimensional structure, wherein the two-dimensional structure includes a plurality of channels and a plurality of sub-channels for each of the plurality of channels, a respective vector processing unit located in each of the plurality of sub-channels; and
One or more vector registers, each configured to store one of a plurality of two-dimensional matrices of the activation inputs;
generating, by a matrix multiplication unit, a respective multiplication result for each of the plurality of two-dimensional matrices, comprising:
loading at least a portion of a respective row of the activation inputs in a two-dimensional matrix of the activation inputs into the matrix multiplication unit of the dedicated hardware chip in each of a plurality of clock cycles, wherein the two-dimensional matrix of activation inputs is stored in a corresponding vector register of one or more of the vector registers;
loading a two-dimensional matrix of weight values into the matrix multiplication unit before the end of the last clock cycle of the plurality of clock cycles, wherein the weight values in the two-dimensional matrix of weight values correspond to the activation inputs in the two-dimensional matrix of activation inputs; and
multiplying the two-dimensional matrix of the activation input and the two-dimensional matrix of the weight value by the matrix multiplication unit to obtain a corresponding multiplication result; and
updating the weight values of the neural network by back propagation based on the respective multiplication results.
2. The method of claim 1, wherein loading at least a portion of the respective rows of the activation inputs in the two-dimensional matrix of activation inputs to the matrix multiplication unit further comprises: at least a portion of a respective row of the activation input is converted from a first floating point format to a second floating point format having a smaller number of bits than the first floating point format.
3. The method as recited in claim 1, further comprising: the corresponding multiplication result is stored in a vector register of the one or more vector registers.
4. The method of claim 1, wherein the respective multiplication result is a two-dimensional matrix, wherein storing the respective multiplication result comprises:
the values of the respective rows of the respective multiplication results are temporarily stored in a first-in-first-out queue in one of the one or more vector registers during each clock cycle of the other set of clock cycles.
5. The method as recited in claim 1, further comprising:
data representing a plurality of two-dimensional matrices of the activation inputs is received by the vector processor from a vector memory of the dedicated hardware chip, the vector memory being configured to provide fast dedicated memory to the vector processor.
6. The method as recited in claim 1, further comprising:
and executing the transposition operation of the two-dimensional matrix of the activation input or the two-dimensional matrix of the weight by a transposition unit of the special hardware chip.
7. The method as recited in claim 1, further comprising:
the number of the corresponding multiplication results is regulated by a regulation unit of the special hardware chip, and
the number is arranged in different channels of the vector processing units of the plurality of vector processing units by an arrangement unit of the dedicated hardware chip.
8. The method as recited in claim 1, further comprising:
each multiplication result is stored in a high bandwidth memory of the dedicated hardware chip.
9. The method as recited in claim 1, further comprising:
the sparse high-dimensional data is mapped into dense low-dimensional data by the sparse computation core of the dedicated hardware chip using a pre-built look-up table.
10. The method as recited in claim 1, further comprising:
the inter-chip interconnections of the dedicated hardware chips are used to connect interfaces or resources of the dedicated hardware chips to other dedicated hardware chips or resources.
11. The method of claim 10, wherein the inter-chip interconnect connects the interface and high bandwidth memory of the dedicated hardware chip to other dedicated hardware chips.
12. The method of claim 10, wherein the interface is a host interface to a host computer or a standard network interface to a host computer network.
13. The method of claim 1, wherein the one or more vector registers comprise 32 vector registers.
14. The method of claim 1, wherein each vector processing unit of the plurality of vector processing units is configured to execute instructions of two respective arithmetic logic units ALUs, respective load instructions, and respective store instructions in each clock cycle.
15. The method of claim 14, wherein each vector processing unit of the plurality of vector processing units is configured to calculate a respective memory offset address required for executing the respective load instruction and the store instruction in each clock cycle.
16. The method of claim 1, wherein vector processing units of the plurality of vector processing units located in the same lane are configured to communicate with each other through respective load and store instructions.
17. A system comprising one or more computers and one or more storage devices on which are stored executable instructions that, when executed by the one or more computers, cause the one or more computers to perform operations for training a neural network through a dedicated hardware chip, the operations comprising:
receiving, by a vector processor of the dedicated hardware chip, data representing a plurality of two-dimensional matrices of activation inputs, each two-dimensional matrix of activation inputs having a particular shape and including a portion of the activation inputs of an input activation matrix of a respective network layer of a neural network, wherein the vector processor comprises:
a plurality of vector processing units arranged in a two-dimensional structure, wherein the two-dimensional structure includes a plurality of channels and a plurality of sub-channels for each of the plurality of channels, a respective vector processing unit located in each of the plurality of sub-channels; and
one or more vector registers, each configured to store one of a plurality of two-dimensional matrices of the activation inputs;
generating, by a matrix multiplication unit, a respective multiplication result for each of the plurality of two-dimensional matrices, comprising:
Loading at least a portion of a respective row of the activation inputs in a two-dimensional matrix of the activation inputs into the matrix multiplication unit of the dedicated hardware chip in each of a plurality of clock cycles, wherein the two-dimensional matrix of activation inputs is stored in a corresponding vector register of one or more of the vector registers;
loading a two-dimensional matrix of weight values into the matrix multiplication unit before the end of the last clock cycle of the plurality of clock cycles, wherein the weight values in the two-dimensional matrix of weight values correspond to the activation inputs in the two-dimensional matrix of activation inputs; and
multiplying the two-dimensional matrix of the activation input and the two-dimensional matrix of the weight value by the matrix multiplication unit to obtain a corresponding multiplication result; and
updating the weight values of the neural network by back propagation based on the respective multiplication results.
18. The system of claim 17, wherein loading at least a portion of the respective rows of the activation inputs in the two-dimensional matrix of activation inputs to the matrix multiplication unit further comprises: at least a portion of a respective row of the activation input is converted from a first floating point format to a second floating point format having a smaller number of bits than the first floating point format.
19. One or more non-transitory computer-readable storage media storing instructions that, when executed by one or more computers, cause the one or more computers to perform operations for training a neural network through a dedicated hardware chip, the operations comprising:
receiving, by a vector processor of the dedicated hardware chip, data representing a plurality of two-dimensional matrices of activation inputs, each two-dimensional matrix of activation inputs having a particular shape and including a portion of the activation inputs of an input activation matrix of a respective network layer of a neural network, wherein the vector processor comprises:
a plurality of vector processing units arranged in a two-dimensional structure, wherein the two-dimensional structure includes a plurality of channels and a plurality of sub-channels for each of the plurality of channels, a respective vector processing unit located in each of the plurality of sub-channels; and
one or more vector registers, each configured to store one of a plurality of two-dimensional matrices of the activation inputs;
generating, by a matrix multiplication unit, a respective multiplication result for each of the plurality of two-dimensional matrices, comprising:
Loading at least a portion of a respective row of the activation inputs in a two-dimensional matrix of the activation inputs into the matrix multiplication unit of the dedicated hardware chip in each of a plurality of clock cycles, wherein the two-dimensional matrix of activation inputs is stored in a corresponding vector register of one or more of the vector registers;
loading a two-dimensional matrix of weight values into the matrix multiplication unit before the end of the last clock cycle of the plurality of clock cycles, wherein the weight values in the two-dimensional matrix of weight values correspond to the activation inputs in the two-dimensional matrix of activation inputs; and
multiplying the two-dimensional matrix of the activation input and the two-dimensional matrix of the weight value by the matrix multiplication unit to obtain a corresponding multiplication result; and
updating the weight values of the neural network by back propagation based on the respective multiplication results.
20. The one or more non-transitory computer-readable storage media of claim 19, wherein loading at least a portion of the respective rows of the activation input in the two-dimensional matrix of activation inputs to the matrix multiplication unit further comprises converting at least a portion of the respective rows of the activation input from a first floating point format to a second floating point format having a smaller number of bits than the first floating point format.
21. A dedicated hardware chip for training a neural network, the dedicated hardware chip comprising:
a scalar processor configured to control computing operations of the dedicated hardware chip;
a vector processor having a two-dimensional array of vector processing units; and
a matrix multiplication unit coupled to the vector processor and configured to multiply at least the first two-dimensional matrix with the first one-dimensional vector or the second two-dimensional matrix to obtain a multiplication result.
22. The special-purpose hardware chip of claim 21, further comprising:
a vector memory configured to provide the vector processor with a fast private memory.
23. The special-purpose hardware chip of claim 21, further comprising:
a scalar memory configured to provide the scalar processor with a fast private memory.
24. The special-purpose hardware chip of claim 21, further comprising:
and a transposition unit configured to perform a transposition operation of the matrix.
25. The special-purpose hardware chip of claim 21, further comprising:
a reduction and arrangement unit configured to execute the reduction on the number and arrange the number between different channels of the vector array.
26. The special-purpose hardware chip of claim 21, further comprising:
a high bandwidth memory configured to store data of the dedicated hardware chip.
27. The special-purpose hardware chip of claim 21, further comprising a sparse compute core.
28. The special-purpose hardware chip of claim 21, further comprising:
an interface; and
inter-chip interconnects connect interfaces or resources on a dedicated hardware chip to other dedicated hardware chips or resources.
29. The special-purpose hardware chip of claim 28, further comprising: a high bandwidth memory; wherein the inter-chip interconnect connects the interface and the high bandwidth memory to other dedicated hardware chips.
30. The special purpose hardware chip of claim 28, wherein the interface is a host interface to a host computer.
31. The special purpose hardware chip of claim 28, wherein the interface is a standard network interface to a host computer network.
32. The special purpose hardware chip of claim 28, further comprising scalar memory and vector memory.
33. The special purpose hardware chip of claim 28, wherein the scalar instruction set of instructions includes arithmetic operations used in address calculation, load/store instructions, and branch instructions, and wherein the remaining ones of the instructions encode instructions of the vector processor and the matrix multiplication unit.
34. The special-purpose hardware chip of claim 28, wherein each vector processing unit in the two-dimensional array of vector processing units comprises 32 registers.
35. The special-purpose hardware chip of claim 28, wherein each vector processing unit in the two-dimensional array of vector processing units is configured to perform at least one of a floating point operation or an integer operation.
36. The special-purpose hardware chip of claim 28, wherein each vector processing unit in the two-dimensional array of vector processing units is configured to execute two respective arithmetic logic unit ALU instructions, respective load instructions, and respective store instructions in each clock cycle.
37. The dedicated hardware chip of claim 36, wherein each vector processing unit in a two-dimensional array of the vector processing units is configured to calculate a respective offset memory address for executing the respective load and store instruction in each clock cycle.
38. The special-purpose hardware chip of claim 21, wherein the vector processor comprises a plurality of lanes; wherein each vector processing unit of the two-dimensional array of vector processing units in the vector processor is located in a respective channel of the plurality of channels; wherein one or more vector processing units of a two-dimensional array of vector processing units located in the same lane are configured to communicate with each other via respective load and store instructions.
Applications Claiming Priority (4)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US201762507771P | 2017-05-17 | 2017-05-17 | |
US62/507,771 | 2017-05-17 | ||
CN201880018006.8A CN110622134B (en) | 2017-05-17 | 2018-05-17 | Special neural network training chip |
PCT/US2018/033215 WO2018213598A1 (en) | 2017-05-17 | 2018-05-17 | Special purpose neural network training chip |
Related Parent Applications (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
CN201880018006.8A Division CN110622134B (en) | 2017-05-17 | 2018-05-17 | Special neural network training chip |
Publications (1)
Publication Number | Publication Date |
---|---|
CN116644790A true CN116644790A (en) | 2023-08-25 |
Family
ID=62784215
Family Applications (2)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
CN202310655432.5A Pending CN116644790A (en) | 2017-05-17 | 2018-05-17 | Special neural network training chip |
CN201880018006.8A Active CN110622134B (en) | 2017-05-17 | 2018-05-17 | Special neural network training chip |
Family Applications After (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
CN201880018006.8A Active CN110622134B (en) | 2017-05-17 | 2018-05-17 | Special neural network training chip |
Country Status (8)
Country | Link |
---|---|
US (2) | US11275992B2 (en) |
EP (3) | EP3568756B1 (en) |
JP (3) | JP6938661B2 (en) |
KR (4) | KR20240056801A (en) |
CN (2) | CN116644790A (en) |
DK (1) | DK3568756T3 (en) |
TW (3) | TWI769810B (en) |
WO (1) | WO2018213598A1 (en) |
Families Citing this family (20)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US10853070B1 (en) * | 2017-10-23 | 2020-12-01 | Habana Labs Ltd. | Processor suspension buffer and instruction queue |
US11645358B2 (en) * | 2019-01-29 | 2023-05-09 | Hewlett Packard Enterprise Development Lp | Generation of executable files corresponding to neural network models |
US10997116B2 (en) * | 2019-08-06 | 2021-05-04 | Microsoft Technology Licensing, Llc | Tensor-based hardware accelerator including a scalar-processing unit |
KR102496734B1 (en) * | 2019-10-22 | 2023-02-06 | 에스앤즈 주식회사 | A deep learning processing acceleration system for streaming data based on packet transmissiong in a distributed environment and an anomaly detection system using the same |
CN111047036B (en) * | 2019-12-09 | 2023-11-14 | Oppo广东移动通信有限公司 | Neural network processor, chip and electronic equipment |
US11054998B1 (en) * | 2019-12-12 | 2021-07-06 | Facebook, Inc. | High bandwidth memory system with distributed request broadcasting masters |
US11755683B2 (en) | 2019-12-23 | 2023-09-12 | Western Digital Technologies, Inc. | Flexible accelerator for sparse tensors (FAST) in machine learning |
US11797830B2 (en) | 2020-03-25 | 2023-10-24 | Western Digital Technologies, Inc. | Flexible accelerator for sparse tensors in convolutional neural networks |
US11462003B2 (en) | 2020-03-25 | 2022-10-04 | Western Digital Technologies, Inc. | Flexible accelerator for sparse tensors in convolutional neural networks |
US20210312266A1 (en) * | 2020-04-01 | 2021-10-07 | Microsoft Technology Licensing, Llc | Deep neural network accelerator with independent datapaths for simultaneous processing of different classes of operations |
CN113867788A (en) * | 2020-06-30 | 2021-12-31 | 上海寒武纪信息科技有限公司 | Computing device, chip, board card, electronic equipment and computing method |
CN112148453A (en) * | 2020-09-29 | 2020-12-29 | 深圳致星科技有限公司 | Computing chip for privacy computation and network computing system |
CN112416433B (en) * | 2020-11-24 | 2023-01-17 | 中科寒武纪科技股份有限公司 | Data processing device, data processing method and related product |
EP4012623A1 (en) * | 2020-12-10 | 2022-06-15 | Toyota Jidosha Kabushiki Kaisha | Efficient and stable training of a neural network in compressed form |
WO2022133623A1 (en) * | 2020-12-24 | 2022-06-30 | Intel Corporation | Accelerated scale-out performance of deep learning training workload with embedding tables |
CN112860318A (en) * | 2021-01-29 | 2021-05-28 | 成都商汤科技有限公司 | Data transmission method, chip, equipment and storage medium |
US11782871B2 (en) | 2021-04-27 | 2023-10-10 | Microchip Technology Inc. | Method and apparatus for desynchronizing execution in a vector processor |
TWI808000B (en) * | 2022-09-20 | 2023-07-01 | 創鑫智慧股份有限公司 | Matrix device and operation method thereof |
CN115713103B (en) * | 2022-11-24 | 2023-08-18 | 辉羲智能科技(上海)有限公司 | On-chip-inter-chip interconnected neural network chip joint performance prediction method and system |
TWI830669B (en) * | 2023-02-22 | 2024-01-21 | 旺宏電子股份有限公司 | Encoding method and encoding circuit |
Family Cites Families (23)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
JPS5841071B2 (en) | 1981-10-13 | 1983-09-09 | 東北電子産業株式会社 | Bioinduction heating device |
JPH04290155A (en) | 1991-03-19 | 1992-10-14 | Fujitsu Ltd | Parallel data processing system |
CA2040903C (en) * | 1991-04-22 | 2003-10-07 | John G. Sutherland | Neural networks |
US5872988A (en) * | 1992-06-17 | 1999-02-16 | U.S. Philips Corporation | Parallel data processing device having a concatenated data path between elementary processors |
US5423051A (en) * | 1992-09-24 | 1995-06-06 | International Business Machines Corporation | Execution unit with an integrated vector operation capability |
AU2002338616A1 (en) * | 2001-02-06 | 2002-10-28 | Victor Demjanenko | Vector processor architecture and methods performed therein |
US7305540B1 (en) * | 2001-12-31 | 2007-12-04 | Apple Inc. | Method and apparatus for data processing |
US7219085B2 (en) * | 2003-12-09 | 2007-05-15 | Microsoft Corporation | System and method for accelerating and optimizing the processing of machine learning techniques using a graphics processing unit |
US8396582B2 (en) * | 2008-03-08 | 2013-03-12 | Tokyo Electron Limited | Method and apparatus for self-learning and self-improving a semiconductor manufacturing tool |
EP2798475A4 (en) * | 2011-12-30 | 2016-07-13 | Intel Corp | Transpose instruction |
US9785565B2 (en) * | 2014-06-30 | 2017-10-10 | Microunity Systems Engineering, Inc. | System and methods for expandably wide processor instructions |
US9589443B2 (en) | 2014-09-02 | 2017-03-07 | At&T Intellectual Property I, L.P. | Method and apparatus for providing an emergency notification for an allergic reaction |
KR102277439B1 (en) * | 2014-10-21 | 2021-07-14 | 삼성전자주식회사 | Reconfigurable Processor and method for operating the same |
US9965824B2 (en) | 2015-04-23 | 2018-05-08 | Google Llc | Architecture for high performance, power efficient, programmable image processing |
US9772852B2 (en) * | 2015-04-23 | 2017-09-26 | Google Inc. | Energy efficient processor core architecture for image processor |
US9747546B2 (en) * | 2015-05-21 | 2017-08-29 | Google Inc. | Neural network processor |
US10192162B2 (en) | 2015-05-21 | 2019-01-29 | Google Llc | Vector computation unit in a neural network processor |
US20160378465A1 (en) | 2015-06-23 | 2016-12-29 | Intel Corporation | Efficient sparse array handling in a processor |
GB2543554B (en) | 2015-10-22 | 2019-01-23 | Advanced Risc Mach Ltd | Handling exceptional conditions for vector arithmetic instruction |
US9904874B2 (en) * | 2015-11-05 | 2018-02-27 | Microsoft Technology Licensing, Llc | Hardware-efficient deep convolutional neural networks |
US9898441B2 (en) | 2016-02-05 | 2018-02-20 | Google Llc | Matrix processing apparatus |
WO2017146706A1 (en) * | 2016-02-25 | 2017-08-31 | Hewlett Packard Enterprise Development Lp | Performing complex multiply-accumulate operations |
EP3812900B1 (en) * | 2016-12-31 | 2023-11-29 | Intel Corporation | Systems, methods, and apparatuses for heterogeneous computing |
-
2018
- 2018-05-17 TW TW110117076A patent/TWI769810B/en active
- 2018-05-17 KR KR1020247013765A patent/KR20240056801A/en active Application Filing
- 2018-05-17 TW TW111120440A patent/TWI812254B/en active
- 2018-05-17 TW TW107116869A patent/TWI728247B/en active
- 2018-05-17 CN CN202310655432.5A patent/CN116644790A/en active Pending
- 2018-05-17 KR KR1020197026557A patent/KR102312264B1/en active IP Right Grant
- 2018-05-17 WO PCT/US2018/033215 patent/WO2018213598A1/en unknown
- 2018-05-17 EP EP18735433.7A patent/EP3568756B1/en active Active
- 2018-05-17 KR KR1020227045015A patent/KR102661910B1/en active IP Right Grant
- 2018-05-17 JP JP2019549507A patent/JP6938661B2/en active Active
- 2018-05-17 US US15/983,056 patent/US11275992B2/en active Active
- 2018-05-17 CN CN201880018006.8A patent/CN110622134B/en active Active
- 2018-05-17 KR KR1020217031994A patent/KR102481428B1/en active IP Right Grant
- 2018-05-17 EP EP22171943.8A patent/EP4083789B1/en active Active
- 2018-05-17 EP EP24163748.7A patent/EP4361832A2/en active Pending
- 2018-05-17 DK DK18735433.7T patent/DK3568756T3/en active
-
2021
- 2021-09-01 JP JP2021142529A patent/JP7314217B2/en active Active
-
2022
- 2022-03-14 US US17/694,598 patent/US20220261622A1/en active Pending
-
2023
- 2023-07-12 JP JP2023114361A patent/JP2023145517A/en active Pending
Also Published As
Publication number | Publication date |
---|---|
EP4083789A1 (en) | 2022-11-02 |
US20180336456A1 (en) | 2018-11-22 |
JP2023145517A (en) | 2023-10-11 |
KR102481428B1 (en) | 2022-12-23 |
KR20240056801A (en) | 2024-04-30 |
TW202311939A (en) | 2023-03-16 |
TWI769810B (en) | 2022-07-01 |
KR102312264B1 (en) | 2021-10-12 |
JP6938661B2 (en) | 2021-09-22 |
TW202132978A (en) | 2021-09-01 |
TW201908965A (en) | 2019-03-01 |
KR20210123435A (en) | 2021-10-13 |
KR102661910B1 (en) | 2024-04-26 |
EP3568756B1 (en) | 2022-07-06 |
EP4361832A2 (en) | 2024-05-01 |
JP7314217B2 (en) | 2023-07-25 |
TWI812254B (en) | 2023-08-11 |
US11275992B2 (en) | 2022-03-15 |
EP4083789B1 (en) | 2024-05-15 |
TWI728247B (en) | 2021-05-21 |
DK3568756T3 (en) | 2022-09-19 |
EP3568756A1 (en) | 2019-11-20 |
JP2022003532A (en) | 2022-01-11 |
WO2018213598A1 (en) | 2018-11-22 |
CN110622134A (en) | 2019-12-27 |
CN110622134B (en) | 2023-06-27 |
KR20190111132A (en) | 2019-10-01 |
JP2020519981A (en) | 2020-07-02 |
KR20230003443A (en) | 2023-01-05 |
US20220261622A1 (en) | 2022-08-18 |
Similar Documents
Publication | Publication Date | Title |
---|---|---|
CN110622134B (en) | Special neural network training chip | |
US10831862B2 (en) | Performing matrix multiplication in hardware | |
CN109997132B (en) | Low-delay matrix multiplication component | |
TW202414199A (en) | Method, system, and non-transitory computer-readable storage media for training neural networks |
Legal Events
Date | Code | Title | Description |
---|---|---|---|
PB01 | Publication | ||
PB01 | Publication | ||
SE01 | Entry into force of request for substantive examination | ||
SE01 | Entry into force of request for substantive examination | ||
REG | Reference to a national code |
Ref country code: HKRef legal event code: DERef document number: 40097458Country of ref document: HK |