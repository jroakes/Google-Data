US7254809B2 - Compilation of unified parallel C-language programs - Google Patents
Compilation of unified parallel C-language programs Download PDFInfo
- Publication number
- US7254809B2 US7254809B2 US10/630,023 US63002303A US7254809B2 US 7254809 B2 US7254809 B2 US 7254809B2 US 63002303 A US63002303 A US 63002303A US 7254809 B2 US7254809 B2 US 7254809B2
- Authority
- US
- United States
- Prior art keywords
- upc
- code
- unique
- constructs
- proxy
- Prior art date
- Legal status (The legal status is an assumption and is not a legal conclusion. Google has not performed a legal analysis and makes no representation as to the accuracy of the status listed.)
- Active - Reinstated, expires
Links
Images
Classifications
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F8/00—Arrangements for software engineering
- G06F8/40—Transformation of program code
- G06F8/41—Compilation
- G06F8/45—Exploiting coarse grain parallelism in compilation, i.e. parallelism between groups of instructions
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F8/00—Arrangements for software engineering
- G06F8/40—Transformation of program code
- G06F8/51—Source to source
Definitions
- the invention relates to the compilation of Unified Parallel C-language (UPC) programs.
- UPC Unified Parallel C-language
- a compiler generally includes a frontend that translates source code into an intermediate form.
- An intermediate form processor optimizes the intermediate form.
- a backend then converts the optimized intermediate form code into, typically, machine language code.
- a reference, that teaches source-to-source translation and translation after mapping to a smaller intermediate code, is A. V. Aho, R. Sethi, and J. D. Ullman, “Compilers Principles, Techniques, and Tools”, Addison-Wesley Publishing Company, Reading, Massachusetts, 1988.
- U.S. Pat. No. 6,253,370 (Abadi et al), issued Jun. 26, 2001, teaches a method and apparatus that can be applied in a pre-compiler environment to annotate a computer program to facilitate subsequent processing of a program.
- Code representing the program is generated at a first computer system.
- Annotations are generated for the code that provide information about the code.
- the code is processed according to the information provided by the annotations.
- the annotations for example, can indicate a control flow graph representing a flow of execution of the code.
- the information provided by the annotations can be a register allocation that maps data structures of the code to registers of the second computer system.
- UPC is a parallel extension to ANSI C, based on a distributed, shared-memory programing paradigm. It provides a common syntax and semantics for writing high-perfomance, explicitly parallel programs in C.
- An example of UPC is taught by T. A. El-Ghazawi, W. W. Carlson, and J. M. Draper, “UPC Language Specifications V1.1”, issued Mar. 24, 2003, as a joint work, by the University of California Berkerley and the National Energy Research Scientific Computing Center, Lawrence Berkely National Laboratory, Office of Science, US Department of Energy.
- UPC has a number of constructs in addition to ANSI C. They can be classified into three categories:
- a convenient approach to implementing UPC compiler using an existing C-compiler is to define a UPC run-time library that can be targeted by a compiler in generating code.
- the amount of code generation required of the compiler is substantial, involving generation at points of declaration, initialization, read and write of shared entities.
- proxy data structures are used to represent shared entities, and communication for read and write of the shared entities is carried out with reference to these proxy (but ordinary C) data structures.
- initializing proxy initializing remote data, communication via proxy
- a proxy involves manipulating its internal fields and values, which has to be reflected in the generated code.
- Chen reference chooses a C-level intermediate form in which reads and writes are transformed into calls in a runtime library.
- the gist of the invention is to generate C-level code strings for UPC constructs to be spliced into the source UPC program and then translated to intermediate form for optimization. Any UPC-unique components are discarded during optimization and the resultant intermediate form is then compiled as machine code.
- the C-level form constructs are converted to a form having proxy declarations.
- the proxy declarations for UPC data constructs include a name that is a mangled version of the name of the respective UPC-unique data component having a one-to-one mapping.
- the proxy declarations for a (UPC statement include a conditional statement.
- the conditional statement has predicates leading to evaluation based upon an affinity test.
- FIG. 1 is a schematic block diagram of a UPC compiler.
- FIG. 2 is a flow diagram of the data handling process of the compiler of FIG. 1 .
- FIG. 3 is a flow diagram showing processing of statements (including forall statements) by the front end module of FIG. 1 .
- FIG. 4 is a schematic representation of a parallel computer system having a distributed shared memory architecture suitable for supporting a compiler embodying the invention.
- a unique programming construct made available by UPC is a forall statement that allows programers to describe a loop, wherein loop iterations/indices are partitioned among threads based on a notion of thread affinity.
- a user only specifies an additional affinity expression compared to C's “for” loop. Assignment of threads to loop iterations based on the affinity expression is left to the UPC implementation to carry out.
- UPC's threads are global in nature and UPC's forall construct is also designed to be global in nature.
- Nesting of forall loops is intricate and not contained within the (static) code boundaries of any given procedure.
- Nesting may be defined as: if the loop body of a upc_forall statement contains one or more upc_forall statements, either directly or through one or more function calls, the construct is called a nested upc_forall statement.
- a nested upc_forall statement is thus very different from the commonplace intra-procedural definition of nested loops.
- the efficient and correct implementation of UPC's forall statement in its generality is a non-trivial task.
- the fourth expression in each loop header is the affinity expression associated with the loop.
- UPC semantics requires identifying the outermost upc_forall statement whose affinity expression is not “continue” as the controlling upc_forall statement. Only a controlling upc_forall statement partitions its instances for parallel execution on a thread by thread basis.
- the loop using the index variable “j” is the controlling upc_forall statement. All iterations of the “i” and “k” indexed foralls are carried out by each thread and only iterations of the “j”-indexed forall are partitioned among threads using an affinity-based predicate.
- UPC is designed such that its types are only a minor variation of ordinary C types, comprising of annotations like “shared”, “strict”/“relaxed”, and (an integral) blocking factor.
- the simplicity of these UPC variations is such that passing on the (unprocessed) variations as annotational information to an intermediate form is straightforward.
- This can be done using standard compiler means (such as “info” opcodes as used for transporting annotational information such as source locations for error/debug messages). While this makes modifying a standard C-compiler frontend to catch and pass-on UPC-related annotations to the intermediate form a straightforward task, challenges arise in digesting the annotations at the intermediate-form level.
- FIG. 1 is a schematic diagram of a compiler embodying the invention.
- UPC source code 10 is input to a compiler engine 20 , which outputs compiled machine language (object) code 30 .
- the compiler engine 20 has a Front End Module (FEM) 40 that performs certain processing steps (to be described), and passes an intermediate form of the UPC code to an Intermediate Form Processor (IFP) 42 .
- FEM Front End Module
- IFP 42 also loads and stores data from Run-Time Libraries (RTL) 44 , and has a feedback loop 46 to the FEM 40 .
- the output of the IFP 42 is passed to a Back End Module (BEM) 48 where it is processed then outputted as the compiled machine code 30 .
- RTL Run-Time Libraries
- the series FEM 40 , IFP 42 and BEM 48 arrangment is common with standard C compilers.
- a front end module converts the source code to an intermediate form.
- An intermediate form processor optimizes the intermediate form of the code by using standard procedures such as dead code elimination, strength reduction and loop invariant processing.
- a back end module converts the optimized intermediate form to machine code.
- the FEM 30 and the IFP 42 operate on a two invocation approach.
- the two invocations will now be described, dealing with each of the categories of UPC construct mentioned above.
- Conventional C language program statements are handled in the conventional manner.
- the UPC source code is read in a first invocation by the FEM 40 (step 50 ) and UPC data types are translated to the intermediate form and populated in the FEM's symbol table and mnemonic sequence (step 52 ).
- the first invocation of the IFP 42 traverses the intermediate form's mnemonic sequence, searching for read/write references to the UPC data types, and generates C-level code strings (step 54 ) for them.
- the C-level strings cover aspects of accessing UPC data types such as declaration of proxy or handler data structures representing UPC data types. Functions provided by the RTLs 44 are referenced (invoked) in these C strings, as, for example, for initialization purposes. Discovery of all handler data structures (and the generation of their C strings) occurs within one pass of the IFP 42 over the intermediate code.
- the first invocation of the IFP 42 is an intermediate form code traversal to collect all the UPC shared entities for which initialization and declaration code has to be generated.
- validation of the code and error-reporting is also carried out.
- C-level declaration/initialization code generation is then straightforward for all such entities.
- a declaration of its proxy structure is carried out.
- the name of the proxy is a unique mangled version of its UPC cousin with a one-to-one mapping from the mangled version to its cousin.
- the C-level strings corresponding to UPC data constructs are fedback by the loop 46 (step 56 ) and inserted into a copy of the original UPC program (step 58 ) before the second invocation or reuse of the FEM 40 .
- the second invocation of the FEM 40 now proceeds.
- the code being handled by the FEM 40 comprises of both UPC constructs in the source code and the C strings that represent a translation of the UPC constructs to standard C code.
- the task for the second invocation of the FEM 40 and IFP 42 is to regularise this “duplication” of C and UPC code in a manner that only C code remains pertinent and in actual use, while UPC code becomes dead code that can be eliminated using optimization techniques.
- the FEM 40 generates intermediate form code for ‘extra C+UPC’ code (step 60 ). Thus code generation for the added C-strings occurs by a simple reuse of the machinery of the C compiler frontend.
- a second invocation of the IFP 42 regularizes code duplication by traversing the mnemonic sequence again and shifting (by changing a UPC variable name to its mangled proxy cousin) each reference of a UPC variable to its corresponding handler data structure (step 62 ).
- the IFP 42 also expands reads and writes to UPC's shared distributed memory to RTL 44 function calls using the proxy structures.
- Declaration of UPC variables continue to remain, but they are unused and eligible for dead code elimination.
- typedef struct shared_handle_int ⁇ unsigned short _global_mem_no; unsigned short _index; int initialization_value; ⁇ shared_handle_int_t; shared_handle_int_t xxx_h;
- This mapping is used in step 62 , in substituting references to the UPC entity by its proxy structure.
- Both the UPC declarations and proxy declarations survive the two-step translation method, with only the proxies being the ones in actual use.
- the UPC shared declarations survive as dead code in the translation process.
- Such dead code (after being stripped of its intermediate-form annotational information) is left to basic compiler optimization (dead-code elimination).
- temporaries needed for the code generation in the step 62 may also be anticipated and declared in advance as a set of global variables in the first IFP step that generates C-level code.
- UPC forall processing can occur in either of the two FEM 40 invocations. It is conveniently described as taking place in the first invocation (but can equally occur in the second), wherein the FEM 40 carries out a complete translation of the UPC forall statement as follows:
- the high-level algorithm that is described below does one top-down pass over a UPC program and replaces UPC forall statements with C “for” loops and program text for forall related bookeeping.
- the choice of a top-down pass is solely for the sake of convenient description; a bottom-up pass version of the algorithm is possible, and may be preferred in some embodiments.
- FIG. 3 is a flow diagram of the forall processing algorithm.
- the input code is traversed top down, and the output code obtained by copying the input code (it can also be obtained by in-place modification of the input code).
- the output code will, on occasions, be modified to be different from the input code.
- Step 70 Each statement (step 70 ) in the input code is tested.
- Step 72 determines whether the statement is a UPC forall. If Yes, then, in step 74 , a further test of whether the forall is an ordinary upc_forall without affinity (or affinity being continue). Is Yes, then, in step 76 , copying the forall into an ordinary “for” loop. If No, then further processing occurs, beginning with step 78 .
- the body of the forall has to be sub-traversed as it may contain forall statements within itself.
- a test is performed, in step 80 , of whether it is a goto statement. If Yes, then, in step 82 , a code incrementing global variable is used having a diference in static nesting depth of label point and goto point followed by the jump. If No, then, in step 84 , the test is performed of whether it is a labelled statement. If Yes, then, in step 86 , the action is to copy the label into output code, but propogating the static nesting depth of the label to goto points. If No, then, in step 88 , a test is performed of whether it is a return statement.
- step 90 the output code is decremented before the return by the static depth of the return point. If No, then, in step 92 , the test is performed of whether it is a setjump statement. If Yes, then, in step 94 , the output code has the global variable saved therein in a manner analogous to the saving of the called environment of setjmp. Also, the setjmp code is placed followed by a restore code for the global variable.
- a upc_forall with any other affinity requires significant modification in the copying process.
- code for incrementing a thread-local, global, tracking variable of nesting depth has to be generated in the output code stream (step 78 ).
- a ‘for loop’ corresponding to the forall is generated (step 96 ), with its body comprising of a conditional statement whose predicate leads to the forall body evaluation based upon an affinity test.
- the forall body has to be sub-traversed for further translation, and the sub-traversal has to be carried out noting the context of one static level deeper nesting (into a forall loop with non-continue affinity).
- code for decrementing the global tracking variable is generated (step 98 ).
- This algorithm corresponds to the process described above with reference to FIG. 3 .
- Step 1 Define a thread-local global variable and copy it to output (i.e. translated) code stream:
- Step 2 Define an internal pre-processor variable. This variable is internal and is used solely in the pass described here. It is not copied on to the output stream.
- Step 3 For each translation unit (e.g. program file) making up the program, generate a translated version of each function definition as described below, while copying other declarations making up each translation unit as is to the output code stream. For each function definition that is encountered, do a top-down traversal, copying the input code stream to the output code stream unchanged, except for the constructs described below, whose output versions are modified versions of the input versions as follows:
- translation unit e.g. program file
- Step 3a For every “upc_forall (expressions opt ; expression opt ; expression opt ; affinity opt ) statement”,
- Step 3b In place of every goto statement with label “L1”,
- Step 3c Copy every label statement “L1: stmt” from input stream as is to the output stream, but make the Staticforall_Depth value at the statement point available to all gotos via the symbol table, as discussed in step 3b above.
- Step 3d For every “return stmt” in the input stream,
- Step 3e For every “setjmp(buf)” statement from input stream,
- the resultant intermediate form code now no longer contains any UPC unique constructs, but rather includes substitute data structures containing specific UPC tags and data, and only standard C statements.
- Such intermediate form code can be directly processed into machine code by the BEM 48 .
- FIG. 4 is a schematic representation of a computer system 100 that can be used to implement the techniques described herein.
- UPC is defined for parallel computers with distributed shared memory architecture.
- An interconnection network 114 interconnecting all node/memory pairs 110 / 112 .
- a single global real address space exists across the whole system 100 , typically achieved by intermediation by the processor nodes.
- all of the physical memory 112 n is addressable from any node 110 n , and any node can perform a load or a store instruction to any part of the real address space.
- there is a separate, but tightly connected operating system (or micro-kernel) image on each node 110 n Typically there is a separate, but tightly connected operating system (or micro-kernel) image on each node 110 n .
- the connection is achieved at least at the virtual memory manager level to ensure the single global real address space.
- a method, computer software and a computer system are each are described herein in the context of compiling UPC-language programs.
Abstract
Description
- 1. Data types—shared, strict and relaxed with blocking factors.
- 2. Statements—forall
- 3. Synchronization constructs—barrier, lock, etc.
int i,j,k; | ||
shared float *a, *b, *c; | ||
upc_forall(i=0; i<N; i++; continue) | ||
upc_forall(j=0; j<N; j++; &a[j]) | ||
upc_forall(k=0; k<N; k++; &b[k]) | ||
a[j] = b[k] * c[i]; | ||
-
- shared int xxx;
typedef struct shared_handle_int { | ||
unsigned short _global_mem_no; | ||
unsigned short _index; | ||
int initialization_value; } shared_handle_int_t; | ||
shared_handle_int_t xxx_h; | ||
-
- int******shared****yyy;
typedef struct shared_handle_pointer { | ||
unsigned short _global_mem_no; | ||
unsigned short _index; | ||
short blocking_factor = 1; | ||
int * initialization_value; } shared_handle_pointer_t; | ||
shared_handle_pointer_t yyy_h; | ||
-
- upc_forall (expressionopt; expressionopt; expressionopt; affinityopt) statement affinity: expressionopt|continue
- Input: A UPC program which may have upc_forall statements in all generality.
- Output: A translated version of the input program into an equivalent program that does not have upc_forall statements.
-
- unsigned int NestUpcforall_Depth=0;
- In the UPC model, as a result of the above, each thread gets its own private copy of the variable to work with.
-
- Staticforall_Depth=0;
-
- (i) If the affinity expression is “continue” or absent, then
- in place of “upc_forall (expressionopt; expressionopt; expressionopt; affinityopt) statement” in the input stream, insert
- “for (expressionopt; expressionopt; expressionopt) statement” into the output stream.
- in place of “upc_forall (expressionopt; expressionopt; expressionopt; affinityopt) statement” in the input stream, insert
- Statement in the above copying has to be sub-traversed (and copied with internal modification) as per the steps of this algorithm, so its copying above is highlighted by distinct underlining.
- (ii) Else
- in place of “upc_forall (expressionopt; expressionopt; expressionopt; affinityopt) statement” in the input stream,
- (i) If the affinity expression is “continue” or absent, then
insert | ||
“{NestUpcforall_Depth ++; | ||
for(expressionopt; expressionopt;expressionopt) | ||
If(affinity == MYTHREAD ∥ NestUPCforall_Depth !=1) | ||
Statement; | ||
NestUpcforall_Depth −−;}” | ||
-
-
- into output stream.
- Statement in the above copying has to be sub-traversed (and copied with internal modification) as per the steps of this algorithm, so its copying above is underlined distinctly. For (and only for) this sub-traversal of statement, increment internally, the pre-processor variable Staticforall_Depth by 1. Affinity in the above is underlined in order to highlight the type-specific code generation needed for the same. As per the UPC language definition, if affinity is a reference to shared memory space, then upc_threadof(affinity) is to be used for affinity into the output stream above, and if affinity is an integer expression, then pmod(affinity, THREADS) is to be used, where pmod(a, b) evaluates as (a>=0)?(a% b):(((a% b)+b)% b). Whether the generated code uses a pmod function, or macro, or directly inlined code is left as a compiler option. Decrement the internal pre-processor variable Staticforall_Depth by one at the exit of UPC forall processing.
-
insert “NestedUpcforall_Depth += Staticforall_Depth_Difference; |
goto L1;” |
-
- into output stream.
- Staticforall_Depth_Difference is a statically generated constant that is underlined in the above to highlight its careful generation as follows. It is the value of the internal pre-processor variable Staticforall_Depth at the point where label L1 exists in the input code, minus the value of Staticforall_Depth at the current point (i.e. the goto statement). The value of Staticforall_Depth at labels can be made available to all goto points (directly, or by straightforward backpatching) by storing the same in a symbol table.
Insert “NestedUpcforall_Depth −= Staticforall_Depth; | ||
return stmt” | ||
-
- to the output stream. Staticforall_Depth is underlined in the above, in order to highlight that the value of the internal pre-processor variable is inlined as a constant in the output code above.
insert “unsigned int Backup_NestedUpcforall_Depth = | ||
NestedUpcforall_Depth; | ||
setjmp(buf); | ||
NestedUpcforall_Depth = Backup_NestedUpcforall_Depth;” | ||
-
- into the output stream.
- Backup_NestedUpcforall_Depth is underlined in the above to highlight that the forall processing has to use a unique name (e.g. generated using gensym()) for each setjmp in order to avoid name conflicts in the output code.
Synchronization Constructs
- Backup_NestedUpcforall_Depth is underlined in the above to highlight that the forall processing has to use a unique name (e.g. generated using gensym()) for each setjmp in order to avoid name conflicts in the output code.
- into the output stream.
Claims (36)
Priority Applications (1)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US10/630,023 US7254809B2 (en) | 2003-07-30 | 2003-07-30 | Compilation of unified parallel C-language programs |
Applications Claiming Priority (1)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US10/630,023 US7254809B2 (en) | 2003-07-30 | 2003-07-30 | Compilation of unified parallel C-language programs |
Publications (2)
Publication Number | Publication Date |
---|---|
US20050028141A1 US20050028141A1 (en) | 2005-02-03 |
US7254809B2 true US7254809B2 (en) | 2007-08-07 |
Family
ID=34103740
Family Applications (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
US10/630,023 Active - Reinstated 2025-06-22 US7254809B2 (en) | 2003-07-30 | 2003-07-30 | Compilation of unified parallel C-language programs |
Country Status (1)
Country | Link |
---|---|
US (1) | US7254809B2 (en) |
Cited By (10)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20060136885A1 (en) * | 2001-11-12 | 2006-06-22 | Keith Stattenfield | Method for embedding object codes in source codes |
US20060195851A1 (en) * | 2005-02-25 | 2006-08-31 | Microsoft Corporation | Multiple version interface |
US20080222620A1 (en) * | 2007-02-14 | 2008-09-11 | The Mathworks, Inc. | Parallel programming computing system |
US20080320452A1 (en) * | 2007-06-22 | 2008-12-25 | Thompson Gerald R | Software diversity using context-free grammar transformations |
US20090037891A1 (en) * | 2003-07-03 | 2009-02-05 | International Business Machines Corporation | Apparatus to guarantee type and initialization safety in multithreaded programs |
US20090222827A1 (en) * | 2008-02-29 | 2009-09-03 | Microsoft Corporation | Continuation based declarative definition and composition |
US8032874B1 (en) * | 2006-01-20 | 2011-10-04 | Xilinx, Inc. | Generation of executable threads having source code specifications that describe network packets |
US20120036514A1 (en) * | 2001-03-22 | 2012-02-09 | Paul Master | Method and apparatus for a compiler and related components for stream-based computations for a general-purpose, multiple-core system |
US20140115276A1 (en) * | 2011-07-29 | 2014-04-24 | International Business Machines Corporation | Intraprocedural privatization for shared array references within partitioned global address space (pgas) languages |
US20220206768A1 (en) * | 2020-12-30 | 2022-06-30 | National Cheng Kung University | Compiler adapted in graphics processing unit and non-transitory computer-readable medium |
Families Citing this family (12)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US7337437B2 (en) * | 1999-12-01 | 2008-02-26 | International Business Machines Corporation | Compiler optimisation of source code by determination and utilization of the equivalence of algebraic expressions in the source code |
US8176108B2 (en) * | 2000-06-20 | 2012-05-08 | International Business Machines Corporation | Method, apparatus and computer program product for network design and analysis |
US7171544B2 (en) * | 2003-12-15 | 2007-01-30 | International Business Machines Corporation | Run-time parallelization of loops in computer programs by access patterns |
US8677386B2 (en) * | 2008-01-02 | 2014-03-18 | At&T Intellectual Property Ii, Lp | Automatic rating system using background audio cues |
US9489183B2 (en) | 2010-10-12 | 2016-11-08 | Microsoft Technology Licensing, Llc | Tile communication operator |
US9430204B2 (en) | 2010-11-19 | 2016-08-30 | Microsoft Technology Licensing, Llc | Read-only communication operator |
US9507568B2 (en) | 2010-12-09 | 2016-11-29 | Microsoft Technology Licensing, Llc | Nested communication operator |
US9395957B2 (en) | 2010-12-22 | 2016-07-19 | Microsoft Technology Licensing, Llc | Agile communication operator |
US8713039B2 (en) * | 2010-12-23 | 2014-04-29 | Microsoft Corporation | Co-map communication operator |
US9038045B2 (en) * | 2011-11-15 | 2015-05-19 | International Business Machines Corporation | Unified parallel C work-sharing loop construct transformation |
US9430199B2 (en) * | 2012-02-16 | 2016-08-30 | Microsoft Technology Licensing, Llc | Scalar optimizations for shaders |
US8839216B2 (en) | 2012-11-07 | 2014-09-16 | International Business Machines Corporation | Compiler optimization based on collectivity analysis |
Citations (5)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US5752036A (en) * | 1993-10-05 | 1998-05-12 | Seiko Epson Corporation | Apparatus for generating a program for parallel processing |
US5940620A (en) * | 1997-03-07 | 1999-08-17 | Ncr Corporation | Compiler with intermediate compiling mechanism |
US6106575A (en) * | 1998-05-13 | 2000-08-22 | Microsoft Corporation | Nested parallel language preprocessor for converting parallel language programs into sequential code |
US6253370B1 (en) | 1997-12-01 | 2001-06-26 | Compaq Computer Corporation | Method and apparatus for annotating a computer program to facilitate subsequent processing of the program |
US6760906B1 (en) * | 1999-01-12 | 2004-07-06 | Matsushita Electric Industrial Co., Ltd. | Method and system for processing program for parallel processing purposes, storage medium having stored thereon program getting program processing executed for parallel processing purposes, and storage medium having stored thereon instruction set to be executed in parallel |
-
2003
- 2003-07-30 US US10/630,023 patent/US7254809B2/en active Active - Reinstated
Patent Citations (5)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US5752036A (en) * | 1993-10-05 | 1998-05-12 | Seiko Epson Corporation | Apparatus for generating a program for parallel processing |
US5940620A (en) * | 1997-03-07 | 1999-08-17 | Ncr Corporation | Compiler with intermediate compiling mechanism |
US6253370B1 (en) | 1997-12-01 | 2001-06-26 | Compaq Computer Corporation | Method and apparatus for annotating a computer program to facilitate subsequent processing of the program |
US6106575A (en) * | 1998-05-13 | 2000-08-22 | Microsoft Corporation | Nested parallel language preprocessor for converting parallel language programs into sequential code |
US6760906B1 (en) * | 1999-01-12 | 2004-07-06 | Matsushita Electric Industrial Co., Ltd. | Method and system for processing program for parallel processing purposes, storage medium having stored thereon program getting program processing executed for parallel processing purposes, and storage medium having stored thereon instruction set to be executed in parallel |
Non-Patent Citations (3)
Title |
---|
A.V. Aho; R. Sethi, J.D. Ullman, Compilers Principles, Techniques, and Tools, 1998, pp. 1-23, 83-87, 159-171, 463-472, 513, 585-591, Addison-Wesley Publishing Company. |
T.A. El-Ghazawi, W.W. Carlson, J.M. Draper, UPC Language Specifications V1.1, Mar. 24, 2003, University of California Berkely and National Energy Research Scientific Computing Center, Lawrence Berkely National Laboratory, Office of Science, US Department of Energy (http://upc.nersc.gov). |
Wei Chen, The Berkely UPC Compiler, Mar. 2003, Open64 User Forum, International Symposium on Code Generation and Optimization, San Francisco, CA. |
Cited By (23)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US9934011B2 (en) * | 2001-03-22 | 2018-04-03 | Cornami, Inc. | Method and apparatus for a compiler and related components for stream-based computations for a general-purpose, multiple-core system |
US9110692B2 (en) * | 2001-03-22 | 2015-08-18 | Frederick Master | Method and apparatus for a compiler and related components for stream-based computations for a general-purpose, multiple-core system |
US20120036514A1 (en) * | 2001-03-22 | 2012-02-09 | Paul Master | Method and apparatus for a compiler and related components for stream-based computations for a general-purpose, multiple-core system |
US20060136885A1 (en) * | 2001-11-12 | 2006-06-22 | Keith Stattenfield | Method for embedding object codes in source codes |
US7694289B2 (en) * | 2001-11-12 | 2010-04-06 | Apple Inc. | Method for embedding object codes in source codes |
US20090037891A1 (en) * | 2003-07-03 | 2009-02-05 | International Business Machines Corporation | Apparatus to guarantee type and initialization safety in multithreaded programs |
US8271965B2 (en) * | 2003-07-03 | 2012-09-18 | International Business Machines Corporation | Apparatus to guarantee type and initialization safety in multithreaded programs |
US20060195851A1 (en) * | 2005-02-25 | 2006-08-31 | Microsoft Corporation | Multiple version interface |
US7506334B2 (en) * | 2005-02-25 | 2009-03-17 | Microsoft Corporation | Common, multi-version interface that allows a distributed sybsystem to communicate with multiple versions of the distributed subsystem |
US8032874B1 (en) * | 2006-01-20 | 2011-10-04 | Xilinx, Inc. | Generation of executable threads having source code specifications that describe network packets |
US8108845B2 (en) * | 2007-02-14 | 2012-01-31 | The Mathworks, Inc. | Parallel programming computing system to dynamically allocate program portions |
US20080222620A1 (en) * | 2007-02-14 | 2008-09-11 | The Mathworks, Inc. | Parallel programming computing system |
US8281290B2 (en) * | 2007-06-22 | 2012-10-02 | Alcatel Lucent | Software diversity using context-free grammar transformations |
US20080320452A1 (en) * | 2007-06-22 | 2008-12-25 | Thompson Gerald R | Software diversity using context-free grammar transformations |
US20090222794A1 (en) * | 2008-02-29 | 2009-09-03 | Microsoft Corporation | Unified expression and location framework |
US8181155B2 (en) | 2008-02-29 | 2012-05-15 | Microsoft Corporation | Unified expression and location framework |
US8191042B2 (en) | 2008-02-29 | 2012-05-29 | Microsoft Corporation | Continuation based declarative definition and composition |
US20090222827A1 (en) * | 2008-02-29 | 2009-09-03 | Microsoft Corporation | Continuation based declarative definition and composition |
US10318260B2 (en) | 2010-08-06 | 2019-06-11 | Cornami, Inc. | Method and apparatus for a compiler and related components for stream-based computations for a general-purpose, multiple-core system |
US20140115276A1 (en) * | 2011-07-29 | 2014-04-24 | International Business Machines Corporation | Intraprocedural privatization for shared array references within partitioned global address space (pgas) languages |
US8990791B2 (en) * | 2011-07-29 | 2015-03-24 | International Business Machines Corporation | Intraprocedural privatization for shared array references within partitioned global address space (PGAS) languages |
US20220206768A1 (en) * | 2020-12-30 | 2022-06-30 | National Cheng Kung University | Compiler adapted in graphics processing unit and non-transitory computer-readable medium |
US11567745B2 (en) * | 2020-12-30 | 2023-01-31 | National Cheng Kung University | Compiler adapted in graphics processing unit and non-transitory computer-readable medium |
Also Published As
Publication number | Publication date |
---|---|
US20050028141A1 (en) | 2005-02-03 |
Similar Documents
Publication | Publication Date | Title |
---|---|---|
US7254809B2 (en) | Compilation of unified parallel C-language programs | |
Midkiff | Automatic parallelization: an overview of fundamental compiler techniques | |
Hall | Managing interprocedural optimization | |
US5175856A (en) | Computer with integrated hierarchical representation (ihr) of program wherein ihr file is available for debugging and optimizing during target execution | |
US5956512A (en) | Computer program debugging in the presence of compiler synthesized variables | |
US5822588A (en) | System and method for checking the use of synchronization locks in a multi-threaded target program | |
US8370820B2 (en) | Method and apparatus for enabling parallel processing during execution of a Cobol source program using two-stage compilation | |
JP5893038B2 (en) | Compile-time boundary checking for user-defined types | |
US8869126B2 (en) | Method and apparatus enabling multi threaded program execution for a Cobol program including OpenMP directives by utilizing a two-stage compilation process | |
US20060212847A1 (en) | Type checker for a typed intermediate representation of object-oriented languages | |
US20030088860A1 (en) | Compiler annotation for binary translation tools | |
US20070074185A1 (en) | Identifier expressions | |
US5560010A (en) | Method for automatically generating object declarations | |
Min et al. | Portable compilers for OpenMP | |
Leupers | LANCE: AC compiler platform for embedded processors | |
JP3266097B2 (en) | Automatic reentrant method and system for non-reentrant program | |
Dillig et al. | SAIL: Static analysis intermediate language with a two-level representation | |
Tolmach | Combining closure conversion with closure analysis using algebraic types | |
Nystrom et al. | An annotation and compiler plugin system for X10 | |
Philipose et al. | Towards automatic construction of staged compilers | |
Haab | Data dependence analysis for Fortran programs in the IMPACT compiler | |
Jones | Optimising Compilers | |
Seddon | Computing Fine-grained Type Information for Rust Programs | |
Malý | Static analysis of C# programs | |
Louden et al. | Compilers and Interpreters. |
Legal Events
Date | Code | Title | Description |
---|---|---|---|
AS | Assignment |
Owner name: INTERNATIONAL BUSINESS MACHINES CORPORATION, NEW YFree format text: ASSIGNMENT OF ASSIGNORS INTEREST;ASSIGNORS:KURHEKAR, MANISH P.;VARMA, PRADEEP;BARIK, RAJKISHORE;REEL/FRAME:014361/0780;SIGNING DATES FROM 20030709 TO 20030728 |
|
FEPP | Fee payment procedure |
Free format text: PAYOR NUMBER ASSIGNED (ORIGINAL EVENT CODE: ASPN); ENTITY STATUS OF PATENT OWNER: LARGE ENTITY |
|
STCF | Information on status: patent grant |
Free format text: PATENTED CASE |
|
REMI | Maintenance fee reminder mailed | ||
FPAY | Fee payment |
Year of fee payment: 4 |
|
SULP | Surcharge for late payment | ||
AS | Assignment |
Owner name: GOOGLE INC., CALIFORNIAFree format text: ASSIGNMENT OF ASSIGNORS INTEREST;ASSIGNOR:INTERNATIONAL BUSINESS MACHINES CORPORATION;REEL/FRAME:026664/0866Effective date: 20110503 |
|
FPAY | Fee payment |
Year of fee payment: 8 |
|
AS | Assignment |
Owner name: GOOGLE LLC, CALIFORNIAFree format text: CHANGE OF NAME;ASSIGNOR:GOOGLE INC.;REEL/FRAME:044127/0735Effective date: 20170929 |
|
FEPP | Fee payment procedure |
Free format text: MAINTENANCE FEE REMINDER MAILED (ORIGINAL EVENT CODE: REM.); ENTITY STATUS OF PATENT OWNER: LARGE ENTITY |
|
LAPS | Lapse for failure to pay maintenance fees |
Free format text: PATENT EXPIRED FOR FAILURE TO PAY MAINTENANCE FEES (ORIGINAL EVENT CODE: EXP.); ENTITY STATUS OF PATENT OWNER: LARGE ENTITY |
|
STCH | Information on status: patent discontinuation |
Free format text: PATENT EXPIRED DUE TO NONPAYMENT OF MAINTENANCE FEES UNDER 37 CFR 1.362 |
|
FP | Lapsed due to failure to pay maintenance fee |
Effective date: 20190807 |
|
PRDP | Patent reinstated due to the acceptance of a late maintenance fee |
Effective date: 20200512 |
|
FEPP | Fee payment procedure |
Free format text: SURCHARGE, PETITION TO ACCEPT PYMT AFTER EXP, UNINTENTIONAL (ORIGINAL EVENT CODE: M1558); ENTITY STATUS OF PATENT OWNER: LARGE ENTITYFree format text: PETITION RELATED TO MAINTENANCE FEES GRANTED (ORIGINAL EVENT CODE: PMFG); ENTITY STATUS OF PATENT OWNER: LARGE ENTITYFree format text: PETITION RELATED TO MAINTENANCE FEES FILED (ORIGINAL EVENT CODE: PMFP); ENTITY STATUS OF PATENT OWNER: LARGE ENTITY |
|
MAFP | Maintenance fee payment |
Free format text: PAYMENT OF MAINTENANCE FEE, 12TH YEAR, LARGE ENTITY (ORIGINAL EVENT CODE: M1553); ENTITY STATUS OF PATENT OWNER: LARGE ENTITYYear of fee payment: 12 |
|
STCF | Information on status: patent grant |
Free format text: PATENTED CASE |