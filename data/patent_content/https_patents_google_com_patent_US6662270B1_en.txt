US6662270B1 - System and method for caching of reusable objects - Google Patents
System and method for caching of reusable objects Download PDFInfo
- Publication number
- US6662270B1 US6662270B1 US09/571,831 US57183100A US6662270B1 US 6662270 B1 US6662270 B1 US 6662270B1 US 57183100 A US57183100 A US 57183100A US 6662270 B1 US6662270 B1 US 6662270B1
- Authority
- US
- United States
- Prior art keywords
- caching
- caching operations
- operations
- new
- vipp
- Prior art date
- Legal status (The legal status is an assumption and is not a legal conclusion. Google has not performed a legal analysis and makes no representation as to the accuracy of the status listed.)
- Expired - Lifetime
Links
- 238000000034 method Methods 0.000 title claims abstract description 25
- 230000004048 modification Effects 0.000 claims description 9
- 238000012986 modification Methods 0.000 claims description 9
- 102100035353 Cyclin-dependent kinase 2-associated protein 1 Human genes 0.000 description 10
- 230000006399 behavior Effects 0.000 description 8
- 230000007246 mechanism Effects 0.000 description 8
- 238000004519 manufacturing process Methods 0.000 description 6
- 230000008901 benefit Effects 0.000 description 5
- 238000009877 rendering Methods 0.000 description 5
- 101100421134 Schizosaccharomyces pombe (strain 972 / ATCC 24843) sle1 gene Proteins 0.000 description 3
- 238000010586 diagram Methods 0.000 description 3
- 239000011159 matrix material Substances 0.000 description 3
- 229920000740 poly(D-lysine) polymer Polymers 0.000 description 3
- 230000009471 action Effects 0.000 description 2
- 230000008569 process Effects 0.000 description 2
- 238000012545 processing Methods 0.000 description 2
- 230000000717 retained effect Effects 0.000 description 2
- 101150069538 ROT1 gene Proteins 0.000 description 1
- 102100022419 RPA-interacting protein Human genes 0.000 description 1
- 230000003190 augmentative effect Effects 0.000 description 1
- 230000005540 biological transmission Effects 0.000 description 1
- 230000008859 change Effects 0.000 description 1
- 230000001419 dependent effect Effects 0.000 description 1
- 238000013461 design Methods 0.000 description 1
- 230000004069 differentiation Effects 0.000 description 1
- 230000000694 effects Effects 0.000 description 1
- 230000006870 function Effects 0.000 description 1
- 230000006872 improvement Effects 0.000 description 1
- 238000010348 incorporation Methods 0.000 description 1
- 230000008520 organization Effects 0.000 description 1
- 230000036316 preload Effects 0.000 description 1
- 230000003252 repetitive effect Effects 0.000 description 1
- 238000002473 ribonucleic acid immunoprecipitation Methods 0.000 description 1
- 238000006467 substitution reaction Methods 0.000 description 1
- 230000009466 transformation Effects 0.000 description 1
- 238000000844 transformation Methods 0.000 description 1
- 238000013519 translation Methods 0.000 description 1
Images
Classifications
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F3/00—Input arrangements for transferring data to be processed into a form capable of being handled by the computer; Output arrangements for transferring data from processing unit to output unit, e.g. interface arrangements
- G06F3/12—Digital output to print unit, e.g. line printer, chain printer
- G06F3/1201—Dedicated interfaces to print systems
- G06F3/1202—Dedicated interfaces to print systems specifically adapted to achieve a particular effect
- G06F3/1203—Improving or facilitating administration, e.g. print management
- G06F3/1204—Improving or facilitating administration, e.g. print management resulting in reduced user or operator actions, e.g. presetting, automatic actions, using hardware token storing data
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F3/00—Input arrangements for transferring data to be processed into a form capable of being handled by the computer; Output arrangements for transferring data from processing unit to output unit, e.g. interface arrangements
- G06F3/12—Digital output to print unit, e.g. line printer, chain printer
- G06F3/1201—Dedicated interfaces to print systems
- G06F3/1202—Dedicated interfaces to print systems specifically adapted to achieve a particular effect
- G06F3/1203—Improving or facilitating administration, e.g. print management
- G06F3/1205—Improving or facilitating administration, e.g. print management resulting in increased flexibility in print job configuration, e.g. job settings, print requirements, job tickets
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F3/00—Input arrangements for transferring data to be processed into a form capable of being handled by the computer; Output arrangements for transferring data from processing unit to output unit, e.g. interface arrangements
- G06F3/12—Digital output to print unit, e.g. line printer, chain printer
- G06F3/1201—Dedicated interfaces to print systems
- G06F3/1202—Dedicated interfaces to print systems specifically adapted to achieve a particular effect
- G06F3/1203—Improving or facilitating administration, e.g. print management
- G06F3/1206—Improving or facilitating administration, e.g. print management resulting in increased flexibility in input data format or job format or job type
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F3/00—Input arrangements for transferring data to be processed into a form capable of being handled by the computer; Output arrangements for transferring data from processing unit to output unit, e.g. interface arrangements
- G06F3/12—Digital output to print unit, e.g. line printer, chain printer
- G06F3/1201—Dedicated interfaces to print systems
- G06F3/1202—Dedicated interfaces to print systems specifically adapted to achieve a particular effect
- G06F3/1211—Improving printing performance
- G06F3/1212—Improving printing performance achieving reduced delay between job submission and print start
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F3/00—Input arrangements for transferring data to be processed into a form capable of being handled by the computer; Output arrangements for transferring data from processing unit to output unit, e.g. interface arrangements
- G06F3/12—Digital output to print unit, e.g. line printer, chain printer
- G06F3/1201—Dedicated interfaces to print systems
- G06F3/1223—Dedicated interfaces to print systems specifically adapted to use a particular technique
- G06F3/1237—Print job management
- G06F3/124—Parallel printing or parallel ripping
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F3/00—Input arrangements for transferring data to be processed into a form capable of being handled by the computer; Output arrangements for transferring data from processing unit to output unit, e.g. interface arrangements
- G06F3/12—Digital output to print unit, e.g. line printer, chain printer
- G06F3/1201—Dedicated interfaces to print systems
- G06F3/1223—Dedicated interfaces to print systems specifically adapted to use a particular technique
- G06F3/1237—Print job management
- G06F3/1244—Job translation or job parsing, e.g. page banding
- G06F3/1248—Job translation or job parsing, e.g. page banding by printer language recognition, e.g. PDL, PCL, PDF
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F3/00—Input arrangements for transferring data to be processed into a form capable of being handled by the computer; Output arrangements for transferring data from processing unit to output unit, e.g. interface arrangements
- G06F3/12—Digital output to print unit, e.g. line printer, chain printer
- G06F3/1201—Dedicated interfaces to print systems
- G06F3/1278—Dedicated interfaces to print systems specifically adapted to adopt a particular infrastructure
- G06F3/1285—Remote printer device, e.g. being remote from client or server
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F3/00—Input arrangements for transferring data to be processed into a form capable of being handled by the computer; Output arrangements for transferring data from processing unit to output unit, e.g. interface arrangements
- G06F3/12—Digital output to print unit, e.g. line printer, chain printer
- G06F3/1201—Dedicated interfaces to print systems
- G06F3/1223—Dedicated interfaces to print systems specifically adapted to use a particular technique
- G06F3/1237—Print job management
- G06F3/1244—Job translation or job parsing, e.g. page banding
- G06F3/1247—Job translation or job parsing, e.g. page banding by conversion to printer ready format
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F3/00—Input arrangements for transferring data to be processed into a form capable of being handled by the computer; Output arrangements for transferring data from processing unit to output unit, e.g. interface arrangements
- G06F3/12—Digital output to print unit, e.g. line printer, chain printer
- G06F3/1201—Dedicated interfaces to print systems
- G06F3/1223—Dedicated interfaces to print systems specifically adapted to use a particular technique
- G06F3/1237—Print job management
- G06F3/1267—Job repository, e.g. non-scheduled jobs, delay printing
Definitions
- This invention relates generally to a system and method which enables pre-rasterization and caching of reusable objects in page description languages.
- Page description language is a language which allows the appearance of a printed page (such as how to form the type and graphic elements on it) to be described in a high-level, device-independent way. Rather than download a font to the printer, for example, the PDL gives the printer instructions on how to draw each character from outlines; graphics are produced in a similar way. Printing then becomes a two-stage process: an application program produces a description of the document in the page description language, which is then interpreted by a specific output device. A page description language can therefore serve as an interchange standard for transmission and storage of printable documents. Examples of PDLs include Adobe Systems, Inc.'s PostScript or Xerox's Interpress.
- PDLs such as Adobe PostScript
- PostScript purport to contain defined operators to enable caching and pre-rasterization.
- the specifications for these mechanisms are not precise enough, or they are inconsistent in different applications or they frequently include limitations.
- the standard PostScript operators cannot be used to efficiently manage resources or to enable pre-rasterization and caching.
- some vendors have modified the PostScript interpreters and augmented the standard set of PostScript operators with a set of new, proprietary operators.
- the proprietary operators usually provide very similar functionality to the standard ones, but not the same functionality. The rational being that since the new set of operators is proprietary, their functionality can be defined as wanted.
- a system and method for enabling implementation-transparent caching of reusable objects in an application program using a language which may be a page description language, with defined operators is described.
- a default operator from the language, which supports a set of default caching operations is selected.
- a set of additional caching operations for use in a specific caching implementation is created.
- the set of additional caching operations is associated with the defined operator.
- a key for selecting between the set of default caching operations and the set of additional caching operations is also defined.
- the invention is particularly applicable to page description languages such as Adobe PostScript and other printer control languages.
- a PDL such as Adobe PostScript defines four operators to invoke default caching operations: defineresource, resourcestatus, findresource and execform.
- This set of caching operations enables caching to be performed to some extent. For example, it enables caching using virtual memory, but not external sources. If a reusable object such as a form is to be used from one job to another, it cannot be stored. Stored forms may not be modified during a print job.
- the invention enables the use of external caching resources, storing a reusable object for reuse across multiple jobs and modifying a stored reusable object (such as by scaling or rotation).
- the application program uses the key to automatically determine if the set of default caching operations is to be used or if the set of additional operations is to be used. In this way, the actual caching implementation is transparent to the user. The user sends his job to a printer. If the additional caching operations are implemented, the print job proceeds quickly. If not, the print job takes longer to complete. Furthermore, the method described here will allow some PDLs, such as PostScript, to ignore the selection of additional operations (and thus use default ones) when they are not implemented. In this case, the caching implementation is even transparent to the application program.
- PDLs such as PostScript
- the system and method of the invention provides a well-defined way to improve performance of a page description language interpreter in a PDL based printer controller and other devices or applications using the standard set of PDL operators.
- FIG. 1 is a diagram of a document including form data and variable data
- FIG. 2 is a block diagram illustrating a system according to the invention.
- FIG. 3 is a block diagram of a network including multiple printer devices implementing the system of the invention.
- PS Adobe PostScriptrmTM
- VIP Variable-data Intelligent Postscript Printware
- the “PostScript Language Reference Manual, Second Edition” (PLRM) section 3.9 introduces the notion of “named resources” and describes it as follows: “During execution, The PostScript program requests the objects by name. The interpreter loads them into VM [virtual memory] automatically from an external source, such as a disk file, a ROM cartridge, or a network file server.” Five PostScript operators support the implementation of this concept: findresource, resourcestatus, resourceforall, defineresource, and undefineresource.
- Section 4.7 of the PLRM also introduces the usage of “Forms” and describe them as follow: “a self-contained description of any arbitrary graphics, text, or sampled images that are to be painted multiple times, either on several pages or at several locations on the same page.” “Forms” are, for this embodiment, the same as reusable objects. Later on the same section, a set of basic rules is provided to describe the differentiation of an ordinary procedure and a form and the advantages of using forms is described as follow: “These rules permit the PostScript interpreter to save the graphical output of the form in a cache. Later, when the same form is used again, the interpreter substitutes the saved output instead of re-executing the form's definition. This can significantly improve performances when the form is used many times.”
- One PostScript operator, execform is provided to support usage of forms.
- VIPP was modified in accordance with the invention to take advantage of resource management and caching available on PostScript to provide a precise specification of the expected behavior of the existing PostScript operators: defineresource, resourcestatus, findresource and execform to make external resources available for caching, to enable reusable objects (Forms) to be reused across jobs and output devices and to enable modification of some stored reusable objects. Since the standard PostScript operators are maintained (such that the operators can be used in their default configuration), a PostScript job coded to take advantage of resource caching sent to a PostScript interpreter without resource caching will be processed without error.
- FIG. 1 shows a typical document 10 for printing which includes form data 14 and variable data 12 .
- the form data 14 is a likely candidate for a reusable object, which can be stored for reuse during a single print job, and stored for later use on other jobs.
- an application program 28 employing a language, such as Adobe PostScript, with defined operators for caching 26 , is shown. If an input file (a print job) 20 is provided to the application program 28 for interpretation into an output file 40 , the application program 28 has the choice of implementing the default caching operators 26 or the additional caching operators 24 .
- the additional caching operators 24 in this system, enable the use of external resources 22 for storage and modification of reusable objects. Since external resources 22 are available in this system, key 32 has been automatically set within application program 28 to select the additional caching operators 24 .
- the application program 28 uses the external resources 22 to store reusable objects or to reference previously stored reusable objects with the output file 40 . If external resources 22 were not available, the default caching operators 26 only enable use of internal resources (typically virtual memory) for storing reusable objects.
- output file 40 When the output file 40 is generated it contains a reference to a series of reusable objects stored on external resource 22 .
- output device 30 When the output file 40 is sent to output device 30 , output device 30 , if it is a printer, does not have to pre-rasterize or store any of the reusable objects which are referenced as stored in external resource 22 . Output device 30 can access those reusable objects during the actual print job.
- a network host 112 which may be any network host or workstation (e.g., IBM, UNIX, or a personal computer) includes an application program 28 (not shown) which accesses an input file from a database 114 for generation of an output print file 100 .
- the application program generates a series of reusable objects (FORMs) 111 , which may be sent as part of the print file 100 to output devices 118 .
- Each output device includes its own external resource 116 for storing the FORMs 111 for use in generating the print job output 120 .
- the output device can use its own external resources for caching, thereby avoiding the timely procedure of pre-rasterizing each form for each page and improving performance.
- Reusable Object means generally an image, text or graphic element (or a combination of these) used more than once in a job or across jobs.
- Variable data means generally an image, text or graphic (or a combination of these) used only once in a job or whose contents may vary during the job.
- VIPP as modified supports reusable objects in two ways: reusable objects within a job and reusable objects across jobs.
- the PostScript mechanisms (default caching operators) on which VIPP relies to implement these features are described in the following sections.
- Reusable Objects within a Job In this scenario, reusable objects are defined “on the fly” during the job, ripped only once and discarded after job completion.
- VIPP uses the PostScript operator execform to implement this feature. execform specifies a method to define and call a reusable object (a “Form” in the PostScript terminology) within a job and enable the PostScript interpreter to rip the object only once, save the associated raster data and re-use it on subsequent calls to the same object.
- Raster data can be kept in memory or written to a temporary external storage (or a mix of both) depending on its size and the memory management policy.
- the PLRM in section 4.7, describes a PostScript form as follows: “A self-contained description of any arbitrary graphics, text or sampled images that are to be painted multiple times on each of several pages or several times at different location on a single page.” Such a description (a piece of PostScript code) is built in a specific structure called a Form dictionary. The Form dictionary is passed as an argument to the execform operator.
- the first time execform executes a form it will rip the PostScript code, store the raster data and add a reference to it in the form dictionary (/Implementation key). For all subsequent executions of the same form, execform will not rip the code again but fetch the raster data instead.
- the raster data could be in any format appropriate and optimized for a specific interpreter/device and this format could be completely different across systems since it is considered as “implementation dependent” and completely transparent to VIPP. This addresses the requirements for the mechanism described in this section.
- VIPP Commands The following set of VIPP commands support reusable objects within a job: SETFORM, SETBFORM, SCALL. It should be noted that not all VIPP resources are candidates for caching. For instance, a VIPP form or segment may contain variables and thus have a different content from page to page. For this reason VIPP provides specific commands (to be combined with those above) to indicate when a resource can be cached. For example, a VIPP form will be cached (executed with execform) only when terminated by FSHOW.
- Reusable Objects across jobs reusable objects are defined globally as “external resources” and shared by all jobs. This implies two steps and thus two mechanisms.
- Pre-caching workflow during this step, a reusable object is submitted on its own to the PostScript interpreter or to any digital front end (DFE) dedicated application to be pre-ripped and stored as an external resource available for subsequent jobs.
- DFE digital front end
- VIPP provides an additional command and appropriate syntax to allow a VIPP resource to be sent to the PostScript interpreter for pre-ripping and storage as an external resource.
- This command will be used mainly by dedicated applications to automate the pre-caching workflow or by generic VIPP utilities to provide a unified pre-caching workflow for heterogeneous systems.
- VIPP uses the PostScript operator defineresource with the Form category to implement this feature. This PostScript operator specifies a method to create and register reusable objects in virtual memory (VM) but does not provide specification on how to define it on external storage.
- VM virtual memory
- VIPP extends the Form dictionary optional keys with a Boolean to key called /FormCache. When set to 2 in the Form dictionary this key instructs the defineresource operator to pre-rip and store the object on external storage.
- the key parameter specified by the defineresource syntax will be used as the name of the object on external storage.
- Pre-Cache utility This may also be implemented through a DFE application Pre-Cache utility that will allow an operator to submit a particular object for pre-caching, which may ingest not only PostScript format (EPS) but also other non PostScript format (TIFF, JPEG, etc.). The name of the original object will be retained as the name of the pre-ripped object on external storage.
- EPS PostScript format
- TIFF non PostScript format
- JPEG JPEG
- Pre-cached object referencing implementation uses the PostScript operators resourcestatus, findresource and execform to implement this feature. These operators specify a method to access and execute reusable objects on external storage.
- findresource states: “If the requested resource instance is not currently in VM (memory space available to the interpreter), findresource attempts to obtain it from an external source.
- the PostScript language does not specify the way this is done; it varies among different implementations. The effect of this action is to create an object (Form) in VM and . . . returns the newly created object.”
- VIPP applies the following algorithm until the resource is found:
- VIPP retrieves it from the internal dictionaries applies execform on it. Else, if resourcestatus returns true VIPP retrieves the resource from external storage using findresource, stores the returned Form dictionary in the internal resource dictionary and applies execform on it Finally, if both actions fail, VIPP looks for the resource in the VIPP resource libraries, retrieves it, converts it to a Form dictionary (if required), stores it in the internal resource dictionary and applies execform on it.
- VIPP Commands The following set of commands support reusable objects defined as “external resources”: SETFORM, SETBFORM, SCALL, ICALL.
- Resource management The file structure and access mechanisms to support reusable objects on external storage is generally implementation dependant, but of little concern to VIPP since it will only communicate with the external storage using the defineresource and findresource operators and a resource name. Resource management on external storage will be provided by two mechanisms: Resource management through a DFE application and Resource management through PostScript operators.
- DFE vendors may provide a resource management utility that will allow an operator to perform the various management tasks on resources (delete, move, copy, rename, show properties, etc) through a user interface.
- Resource management through PostScript operators will be used mainly by dedicated applications to automate the resource management or by generic VIPP utilities to provide a unified resource management for heterogeneous systems.
- the resourceforall operator will be used to obtain a list of resources currently available on the system.
- the resourcestatus operator will be used to obtain information like the size and the status of the resource.
- the raster data created by execform is linked to the current graphic state (scaling, rotation, etc.).
- the graphic state must be the same in order to allow execform to use the raster data. If this is not the case the execform specifications state that the object will be ripped again.
- the application requires the same object to be cached with different graphic states then several different objects must be defined and cached independently. Only changes in rotation, scaling and placement (horizontal/vertical positions) between calls are supported.
- CACHE Command is a new command that enables resource caching.
- CACHE delivers a form dictionary on the stack that is intended to be used as an argument by SETFORM, SETBFORM or SCALL. For this reason it must be combined with one of these three commands (see syntax examples in sections 3 and 4 below).
- CACHE takes a file name as argument and search for it in sequence in the following locations:
- PostScriptTM Forms directory (the directory where the DFE is storing Form resources) using findresource (access to pre-cached, pre-loaded and “already accessed” resources).
- VIPP formlib resource library as defined by SETFPATH (first access).
- VIPP imglib resource library as defined by SETIPATH (first access).
- VIPP mislib resource library as defined by SETMPATH (first access). If the resource is found in one of the VIPP resource libraries a form dictionary including the PaintProc: ⁇ (filepath/filename) run ⁇ is created behind the scene and registered using defineresource in the PostScript Forms directory (using “filename” as the registration key). Thus subsequent calls to the same resource will retrieve it with findresource.
- XGFRESDEF syntax is extended with the /CACHE option that will transform the argument procedure into a form dictionary and register it in the PostScript Forms directory with the PostScript operator defineresource. This extension is intended to serve two purposes: in-job definition of in-line forms or segments that require caching and incorporation of forms and segments that require caching by the “deplpr ” process.
- SETFORM/SETBFORM and SCALL receive the following extensions.
- a form dictionary will be supported as argument (support of “reusable object within a job” through the CACHE command).
- filename will be searched for in PostScript Forms directory prior to the VIPP formlib library (support of “reusable object across jobs” also called “pre-caching”).
- pre-caching support of “reusable object across jobs” also called “pre-caching”.
- FSHOW command will be redefined so that the form procedure will be transformed into a form dictionary.
- the second extension will allow pre-cached resources to be caught by SCALL and SETFORM/SETBFORM calls even if CACHE is not used.
- existing applications that do not yet use the CACHE command will benefit of the caching without any modification by simply downloading resources with pre-cached option.
- PRECACHE is a new command that enables resource pre-caching.
- PRECACHE is a standalone command and does not deliver anything on the stack. It takes a file name as argument and search for it in sequence in the following locations:
- VIPP formlib resource library as defined by SETFPATH.
- VIPP imglib resource library as defined by SETIPATH.
- VIPP mislib resource library as defined by SETMPATH. If the resource is found, a form dictionary including the PaintProc: ⁇ (filepath/filename) run ⁇ is created behind the scene and registered using defineresource in the external printer or DFE resource library using “filename” as the registration key. Thus subsequent calls to the same resource will retrieve it with findresource. These calls may be initiated from the same job or from jobs submitted subsequently.
- An additional parameter provides the list of rotation/scale combinations required for pre-rendering. For each of these combinations a specific image of the resource is pre-rendered and stored in the external library. If the resource already exists in the external resource library, all pre-rendered instances of this resource are discarded (see section “expected behavior of PostScript operators” for implementation details). Once a form has been pre-cached the original file may be removed from the VIPP resource library.
- the following syntax is used to pre-cache EPS or PostScript files (created by PostScript drivers) or TIFF files to be used latter as cached forms or segments.
- VIPP resources (.frm, .seg). Such forms and segments are generally coded using VIPP commands or user written PostScript code that does not include in-line images. PostScript files created by drivers are generally not suitable for VIPP forms and segments because they are either too big or contain in-line images.
- VIPP Forms The following syntax is used to call forms encoded according to the VIPP syntax for forms (starting by the “ ⁇ “character and ending with the “ ⁇ ” character or “ ⁇ FSHOW” sequence).
- caching is controlled through the command FSHOW at the end of the VIPP form. If FSHOW is present, caching will be used. If FSHOW is NOT present caching will NOT be used.
- CACHE the command CACHE. If CACHE is present, the segment will be cached. If CACHE is NOT present, the segment will NOT be cached.
- the resource will be cached and registered with the key /rname. These sequences must appear outside of a page definition and must be executed only once in the job otherwise the resource will be cached multiple times. [llx lly urx ury ] define the bounding box of the resource and is optional. If not present it will default to [0 0 pagewidth pageheight].
- the cached resources can then be called using the following syntaxes:
- the XGFRESDEF command is used to embed resources in a VIPP print job. These resources are retained in the printer memory only for the duration of the job.
- Such print jobs may be created by VIPP emitters for the following purposes: forward VIPP jobs to printers without permanent resources storage capabilities; proof print jobs in the design phase for which the resources have not yet been downloaded; temporarily “obscure” resident resources (for the duration of the job); embed critical resources (signature) within the print job to avoid permanent storage (security).
- the following syntaxes are used to pre-load and cache resources on the printer memory.
- a cached resource must be self-contained. That is it must not contain or depend on any variable element or setting that may vary from one call to another. If this happens the resource will always reflect the state at the first call or at pre-caching time.
- the only transformations allowed between subsequent calls to the same resource are translation, rotation and scaling.
- resourcestatus The expected behavior of resourcestatus is exactly what is described in the Adobe documentation (PostScript Language Reference 3rd edition).
- findresource The expected behavior of findresource is based on the Adobe documentation with more detailed specifications regarding the processing of Forms as external resources.
- findresource When findresource is executed two situations are considered: (1) the form is already in VM (either explicitly created by defineresource or loaded by a previous execution of findresource), in that case findresource will just push the form dictionary on the stack and (2) the form is not in VM but exists on external storage as a pre-cached form.
- findresource will access the form object on external storage, create the form dictionary in VM (execute defineresource) and push it on the stack. In addition it will establish a link between the form dictionary in VM and the form object on external storage so that subsequent executions of execform on this form dictionary will behave as described below.
- External storage pre-cached forms for the purpose of this document
- execform The expected behavior of execform is based on the Adobe documentation. That includes the mechanisms to cache the image rendered by the PaintProc and reuse it in subsequent execution of the same form.
- Adobe specifications state that the PaintProc must be re-executed (and a new cached image created) whenever the graphic state has changed between two executions of the same form.
- VIPP specifications assume that the PaintProc is self-contained and independent of the graphic state except for the rotation and scaling parameters of the CTM. Thus the PaintProc will only be re-executed when one or both of these two parameters change between two executions of the same form.
- each cached image resulting of a different rotation/scale combination will be kept during the lifetime of the job (or across jobs in case or pre-cached forms) so that it can be re-used whenever the form is called again with that combination.
- execform one matching Adobe's and one matching VIPP specifications
- defineresource Depending of the value of the FormCache key present in the form dictionary defineresource will have two different behaviors:
- FormCache 0 or 1: defineresource registers the resource in VM. On that point the expected behavior is the one described by Adobe.
- the form dictionary with the /Source key modified to reference the new location of the file.
- the form will not be registered in VM and no image will be put in the current page buffer.
- the form is likely to be printed later by another job that will access it using findresource and print it using execform.
Abstract
Description
Key | Type | Value |
/FormCache | Integer | 0-Behave according to Adobe specification of |
execform (the default) | ||
1-Behave according to VIPP specification of | ||
execform. The form dictionary has been | ||
created “on-the-fly” during the current job. | ||
If one of the cached images associated with | ||
this form matches the current rotation/scale | ||
parameters of the CTM use it otherwise execute | ||
the PaintProc to create a new image and cache | ||
it. In both cases put the form image in the | ||
current page buffer. | ||
2-Behave according to VIPP specification of | ||
execform. The form dictionary has been created | ||
by findresource after accessing a pre-cached | ||
form on external storage. If one of the pre- | ||
cached images associated with this form | ||
matches the current rotation/scale | ||
parameters of the CTM use it otherwise | ||
execute the PaintProc to create a | ||
new image and add it to the form | ||
object on external storage. In both | ||
cases put the form image in the current | ||
page buffer. | ||
/FormName | nametype | A name uniquely identifying the form inside an |
organization. The same name will be used by | ||
defineresource to register the form. | ||
(only relevant with FormCache = 1 or 2) | ||
/Source | string | Full path to the source file (in appropriate |
format for the underlying file system). | ||
This path is used by the PaintProc to | ||
locate the file (only relevant with | ||
FormCache = 2) | ||
/Rendering | array | An array of even length containing a list |
of number pairs representing the required | ||
rotation/scale combinations at pre-rendering | ||
time. (only relevant with FormCache = 2) | ||
Claims (16)
Priority Applications (4)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US09/571,831 US6662270B1 (en) | 2000-05-16 | 2000-05-16 | System and method for caching of reusable objects |
MXPA01004696A MXPA01004696A (en) | 2000-05-16 | 2001-05-09 | System and method for caching of reusable objects. |
CA002347221A CA2347221C (en) | 2000-05-16 | 2001-05-09 | System and method for caching of reusable objects |
BR0101977-5A BR0101977A (en) | 2000-05-16 | 2001-05-16 | System and method for intermediate storage of reusable objects |
Applications Claiming Priority (1)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US09/571,831 US6662270B1 (en) | 2000-05-16 | 2000-05-16 | System and method for caching of reusable objects |
Publications (1)
Publication Number | Publication Date |
---|---|
US6662270B1 true US6662270B1 (en) | 2003-12-09 |
Family
ID=24285250
Family Applications (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
US09/571,831 Expired - Lifetime US6662270B1 (en) | 2000-05-16 | 2000-05-16 | System and method for caching of reusable objects |
Country Status (4)
Country | Link |
---|---|
US (1) | US6662270B1 (en) |
BR (1) | BR0101977A (en) |
CA (1) | CA2347221C (en) |
MX (1) | MXPA01004696A (en) |
Cited By (30)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20040020389A1 (en) * | 2002-08-01 | 2004-02-05 | Holmstead Stanley Bruce | Cache memory system and method for printers |
US20040024844A1 (en) * | 2002-08-01 | 2004-02-05 | Stanley Bruce Holmstead | Downloading data for printers |
US20070028162A1 (en) * | 2005-07-30 | 2007-02-01 | Microsoft Corporation | Reusing content fragments in web sites |
US20070070378A1 (en) * | 2005-09-22 | 2007-03-29 | Xerox Corporation | Ubiquitous installation and removal of rip capabilities from PDL files |
US20070171473A1 (en) * | 2006-01-26 | 2007-07-26 | Ricoh Company, Ltd. | Information processing apparatus, Information processing method, and computer program product |
US20090225369A1 (en) * | 2008-03-07 | 2009-09-10 | Xerox Corporation | Page parallel rip and cache tuning for page description languages |
US20090262397A1 (en) * | 2008-04-18 | 2009-10-22 | Xerox Corporation | Method and apparatus for print image distortion compensation |
US20100002247A1 (en) * | 2008-07-03 | 2010-01-07 | Fuji Xerox Co., Ltd. | Image processor, image processing method, computer readable medium, and image processing system |
US20100157320A1 (en) * | 2008-12-18 | 2010-06-24 | Xerox Corporation | Method and system for utilizing transformation matrices to process rasterized image data |
US20100157319A1 (en) * | 2008-12-18 | 2010-06-24 | Xerox Corporation | Method and system for utilizing transformation matrices to process rasterized image data |
US20100157324A1 (en) * | 2008-12-18 | 2010-06-24 | Xerox Corporation | Method and system for utilizing transformation matrices to process rasterized image data |
US20100156890A1 (en) * | 2008-12-18 | 2010-06-24 | Xerox Corporation | Method and system for utilizing transformation matrices to process rasterized image data |
US20100157321A1 (en) * | 2008-12-18 | 2010-06-24 | Xerox Corporation | Method and system for utilizing transformation matrices to process rasterized image data |
US20100158411A1 (en) * | 2008-12-18 | 2010-06-24 | Xerox Corporation | Method and system for utilizing transformation matrices to process rasterized image data |
US20100156940A1 (en) * | 2008-12-19 | 2010-06-24 | Xerox Corporation | Method and system for utilizing transformation matrices to process rasterized image data |
US20100156938A1 (en) * | 2008-12-18 | 2010-06-24 | Xerox Corporation | Method and system for utilizing transformation matrices to process rasterized image data |
US20100157325A1 (en) * | 2008-12-18 | 2010-06-24 | Xerox Corporation | Method and system for utilizing transformation matrices to process rasterized image data |
US20100157323A1 (en) * | 2008-12-18 | 2010-06-24 | Xerox Corporation | Method and system for utilizing transformation matrices to process rasterized image data |
US20100157322A1 (en) * | 2008-12-18 | 2010-06-24 | Xerox Corporation | Method and system for utilizing transformation matrices to process rasterized image data |
US20100156937A1 (en) * | 2008-12-18 | 2010-06-24 | Xerox Corporation | Method and system for utilizing transformation matrices to process rasterized image data |
US20100214595A1 (en) * | 2009-02-25 | 2010-08-26 | Xerox Corporation | Method and apparatus for using pattern color space in print job processing |
US20100231952A1 (en) * | 2009-03-12 | 2010-09-16 | Fabio Giannetti | Printing system and method |
US20100254626A1 (en) * | 2009-04-01 | 2010-10-07 | Fuji Xerox., Ltd. | Image processing apparatus, image forming apparatus, image processing method and computer readable medium storing program |
US20110043855A1 (en) * | 2009-08-21 | 2011-02-24 | Canon Kabushiki Kaisha | Print data processing apparatus, print data processing method, and storage medium |
US20120262760A1 (en) * | 2011-04-18 | 2012-10-18 | Canon Kabushiki Kaisha | Image forming apparatus, method for controlling image forming apparatus, and storage medium |
US20120287451A1 (en) * | 2011-05-09 | 2012-11-15 | Canon Kabushiki Kaisha | Image forming apparatus, method for controlling same, and storage medium |
US20130067434A1 (en) * | 2011-09-12 | 2013-03-14 | Xerox Corporation | Systems and methods for disambiguating dialects in limited syntax languages to reduce system fragility |
US20130286044A1 (en) * | 2012-04-30 | 2013-10-31 | Canon Kabushiki Kaisha | System and method for fast manipulation of graphical objects |
CN112465619A (en) * | 2020-12-30 | 2021-03-09 | 广东金赋科技股份有限公司 | Tax handling method and device based on data conversion and one-key input gold tax three-phase system |
US11914906B2 (en) * | 2022-05-17 | 2024-02-27 | Kyocera Document Solutions Inc. | Pre-processing print jobs |
Families Citing this family (1)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US6662270B1 (en) * | 2000-05-16 | 2003-12-09 | Xerox Corporation | System and method for caching of reusable objects |
Citations (10)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US5402527A (en) * | 1993-04-23 | 1995-03-28 | Xerox Corporation | Apparatus and method for determining the page description language in which a print job is written |
US5416896A (en) * | 1992-04-30 | 1995-05-16 | Ricoh Company, Ltd. | Command definition dictionary handling and context declaration in a document publishing page description language (PDL) |
US5535318A (en) * | 1992-04-30 | 1996-07-09 | Ricoh Company, Ltd. | Debugging system for a hierarchically structured page description language |
US5748860A (en) * | 1995-06-06 | 1998-05-05 | R.R. Donnelley & Sons Company | Image processing during page description language interpretation |
US5897634A (en) * | 1997-05-09 | 1999-04-27 | International Business Machines Corporation | Optimized caching of SQL data in an object server system |
CA2347221A1 (en) * | 2000-05-16 | 2001-11-16 | Xerox Corporation | System and method for caching of reusable objects |
US6389462B1 (en) * | 1998-12-16 | 2002-05-14 | Lucent Technologies Inc. | Method and apparatus for transparently directing requests for web objects to proxy caches |
US6418448B1 (en) * | 1999-12-06 | 2002-07-09 | Shyam Sundar Sarkar | Method and apparatus for processing markup language specifications for data and metadata used inside multiple related internet documents to navigate, query and manipulate information from a plurality of object relational databases over the web |
US6424993B1 (en) * | 1999-05-26 | 2002-07-23 | Respondtv, Inc. | Method, apparatus, and computer program product for server bandwidth utilization management |
US6441919B1 (en) * | 1998-09-02 | 2002-08-27 | Adobe Systems Incorporated | Integrated rendering and compositing in variable printing |
-
2000
- 2000-05-16 US US09/571,831 patent/US6662270B1/en not_active Expired - Lifetime
-
2001
- 2001-05-09 CA CA002347221A patent/CA2347221C/en not_active Expired - Fee Related
- 2001-05-09 MX MXPA01004696A patent/MXPA01004696A/en active IP Right Grant
- 2001-05-16 BR BR0101977-5A patent/BR0101977A/en not_active Application Discontinuation
Patent Citations (10)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US5416896A (en) * | 1992-04-30 | 1995-05-16 | Ricoh Company, Ltd. | Command definition dictionary handling and context declaration in a document publishing page description language (PDL) |
US5535318A (en) * | 1992-04-30 | 1996-07-09 | Ricoh Company, Ltd. | Debugging system for a hierarchically structured page description language |
US5402527A (en) * | 1993-04-23 | 1995-03-28 | Xerox Corporation | Apparatus and method for determining the page description language in which a print job is written |
US5748860A (en) * | 1995-06-06 | 1998-05-05 | R.R. Donnelley & Sons Company | Image processing during page description language interpretation |
US5897634A (en) * | 1997-05-09 | 1999-04-27 | International Business Machines Corporation | Optimized caching of SQL data in an object server system |
US6441919B1 (en) * | 1998-09-02 | 2002-08-27 | Adobe Systems Incorporated | Integrated rendering and compositing in variable printing |
US6389462B1 (en) * | 1998-12-16 | 2002-05-14 | Lucent Technologies Inc. | Method and apparatus for transparently directing requests for web objects to proxy caches |
US6424993B1 (en) * | 1999-05-26 | 2002-07-23 | Respondtv, Inc. | Method, apparatus, and computer program product for server bandwidth utilization management |
US6418448B1 (en) * | 1999-12-06 | 2002-07-09 | Shyam Sundar Sarkar | Method and apparatus for processing markup language specifications for data and metadata used inside multiple related internet documents to navigate, query and manipulate information from a plurality of object relational databases over the web |
CA2347221A1 (en) * | 2000-05-16 | 2001-11-16 | Xerox Corporation | System and method for caching of reusable objects |
Non-Patent Citations (2)
Title |
---|
Adobe Systems Inc, "PostScript Language Reference Manual 2<nd >Edition", 1990, Addison-Wesley Publishing Co, pp. 9, 69-71, 170, 480, 487, 585-588. * |
Adobe Systems Inc, "PostScript Language Reference Manual 2nd Edition", 1990, Addison-Wesley Publishing Co, pp. 9, 69-71, 170, 480, 487, 585-588. |
Cited By (52)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20040020389A1 (en) * | 2002-08-01 | 2004-02-05 | Holmstead Stanley Bruce | Cache memory system and method for printers |
US20040024844A1 (en) * | 2002-08-01 | 2004-02-05 | Stanley Bruce Holmstead | Downloading data for printers |
US7265866B2 (en) * | 2002-08-01 | 2007-09-04 | Hewlett-Packard Development Company, L.P. | Cache memory system and method for printers |
US20070028162A1 (en) * | 2005-07-30 | 2007-02-01 | Microsoft Corporation | Reusing content fragments in web sites |
US20070070378A1 (en) * | 2005-09-22 | 2007-03-29 | Xerox Corporation | Ubiquitous installation and removal of rip capabilities from PDL files |
US7973947B2 (en) | 2005-09-22 | 2011-07-05 | Xerox Corporation | Ubiquitous installation and removal of RIP capabilities from PDL files |
US20070171473A1 (en) * | 2006-01-26 | 2007-07-26 | Ricoh Company, Ltd. | Information processing apparatus, Information processing method, and computer program product |
US20090225369A1 (en) * | 2008-03-07 | 2009-09-10 | Xerox Corporation | Page parallel rip and cache tuning for page description languages |
US8233185B2 (en) * | 2008-03-07 | 2012-07-31 | Xerox Corporation | Page parallel RIP and cache tuning in print/copy job environment utilizing page description languages |
US20090262397A1 (en) * | 2008-04-18 | 2009-10-22 | Xerox Corporation | Method and apparatus for print image distortion compensation |
US20100002247A1 (en) * | 2008-07-03 | 2010-01-07 | Fuji Xerox Co., Ltd. | Image processor, image processing method, computer readable medium, and image processing system |
US8599433B2 (en) * | 2008-07-03 | 2013-12-03 | Fuji Xerox Co., Ltd. | Image processor, image processing method, computer readable medium, and image processing system |
US20100157321A1 (en) * | 2008-12-18 | 2010-06-24 | Xerox Corporation | Method and system for utilizing transformation matrices to process rasterized image data |
US9679403B2 (en) | 2008-12-18 | 2017-06-13 | Xerox Corporation | Method and system for utilizing transformation matrices to process rasterized image data |
US20100158411A1 (en) * | 2008-12-18 | 2010-06-24 | Xerox Corporation | Method and system for utilizing transformation matrices to process rasterized image data |
US9495780B2 (en) | 2008-12-18 | 2016-11-15 | Xerox Corporation | Method and system for utilizing transformation matrices to process rasterized image data |
US20100156938A1 (en) * | 2008-12-18 | 2010-06-24 | Xerox Corporation | Method and system for utilizing transformation matrices to process rasterized image data |
US20100157325A1 (en) * | 2008-12-18 | 2010-06-24 | Xerox Corporation | Method and system for utilizing transformation matrices to process rasterized image data |
US20100157323A1 (en) * | 2008-12-18 | 2010-06-24 | Xerox Corporation | Method and system for utilizing transformation matrices to process rasterized image data |
US20100157322A1 (en) * | 2008-12-18 | 2010-06-24 | Xerox Corporation | Method and system for utilizing transformation matrices to process rasterized image data |
US20100156937A1 (en) * | 2008-12-18 | 2010-06-24 | Xerox Corporation | Method and system for utilizing transformation matrices to process rasterized image data |
US9508168B2 (en) | 2008-12-18 | 2016-11-29 | Xerox Corporation | Method and system for utilizing transformation matrices to process rasterized image data |
US20100156890A1 (en) * | 2008-12-18 | 2010-06-24 | Xerox Corporation | Method and system for utilizing transformation matrices to process rasterized image data |
US20100157320A1 (en) * | 2008-12-18 | 2010-06-24 | Xerox Corporation | Method and system for utilizing transformation matrices to process rasterized image data |
US9659392B2 (en) | 2008-12-18 | 2017-05-23 | Xerox Corporation | Method and system for utilizing transformation matrices to process rasterized image data |
US20100157324A1 (en) * | 2008-12-18 | 2010-06-24 | Xerox Corporation | Method and system for utilizing transformation matrices to process rasterized image data |
US20100157319A1 (en) * | 2008-12-18 | 2010-06-24 | Xerox Corporation | Method and system for utilizing transformation matrices to process rasterized image data |
US9652820B2 (en) | 2008-12-18 | 2017-05-16 | Xerox Corporation | Method and system for utilizing transformation matrices to process rasterized image data |
US9626602B2 (en) | 2008-12-18 | 2017-04-18 | Xerox Corporation | Method and system for utilizing transformation matrices to process rasterized image data |
US9530230B2 (en) | 2008-12-18 | 2016-12-27 | Xerox Corporation | Method and system for utilizing transformation matrices to process rasterized image data |
US9626603B2 (en) | 2008-12-18 | 2017-04-18 | Xerox Corporation | Method and system for utilizing transformation matrices to process rasterized image data |
US9619738B2 (en) | 2008-12-18 | 2017-04-11 | Xerox Corporation | Method and system for utilizing transformation matrices to process rasterized image data |
US8754909B2 (en) * | 2008-12-19 | 2014-06-17 | Xerox Corporation | Method and system for utilizing transformation matrices to process rasterized image data |
US20100156940A1 (en) * | 2008-12-19 | 2010-06-24 | Xerox Corporation | Method and system for utilizing transformation matrices to process rasterized image data |
US8355167B2 (en) | 2009-02-25 | 2013-01-15 | Xerox Corporation | Method and apparatus for using pattern color space in print job processing |
US20100214595A1 (en) * | 2009-02-25 | 2010-08-26 | Xerox Corporation | Method and apparatus for using pattern color space in print job processing |
US20100231952A1 (en) * | 2009-03-12 | 2010-09-16 | Fabio Giannetti | Printing system and method |
US20100254626A1 (en) * | 2009-04-01 | 2010-10-07 | Fuji Xerox., Ltd. | Image processing apparatus, image forming apparatus, image processing method and computer readable medium storing program |
US8437574B2 (en) * | 2009-04-01 | 2013-05-07 | Fuji Xerox Co., Ltd. | Image processing apparatus, image forming apparatus, image processing method and computer readable medium storing program |
US8625133B2 (en) * | 2009-08-21 | 2014-01-07 | Canon Kabushiki Kaisha | Print data processing apparatus, print data processing method, and storage medium |
US20110043855A1 (en) * | 2009-08-21 | 2011-02-24 | Canon Kabushiki Kaisha | Print data processing apparatus, print data processing method, and storage medium |
US8755079B2 (en) * | 2011-04-18 | 2014-06-17 | Canon Kabushiki Kaisha | Image forming apparatus discriminating whether image data of an object to be subjected to transformation processing is stored in a storage unit |
US20120262760A1 (en) * | 2011-04-18 | 2012-10-18 | Canon Kabushiki Kaisha | Image forming apparatus, method for controlling image forming apparatus, and storage medium |
US8780127B2 (en) * | 2011-05-09 | 2014-07-15 | Canon Kabushiki Kaisha | Image forming apparatus, method for controlling same, and storage medium |
US20120287451A1 (en) * | 2011-05-09 | 2012-11-15 | Canon Kabushiki Kaisha | Image forming apparatus, method for controlling same, and storage medium |
US20130067434A1 (en) * | 2011-09-12 | 2013-03-14 | Xerox Corporation | Systems and methods for disambiguating dialects in limited syntax languages to reduce system fragility |
US9367294B2 (en) * | 2011-09-12 | 2016-06-14 | Xerox Corporation | Systems and methods for disambiguating dialects in limited syntax languages to reduce system fragility |
US20130286044A1 (en) * | 2012-04-30 | 2013-10-31 | Canon Kabushiki Kaisha | System and method for fast manipulation of graphical objects |
US9183645B2 (en) * | 2012-04-30 | 2015-11-10 | Canon Kabushiki Kaisha | System and method for fast manipulation of graphical objects |
CN112465619A (en) * | 2020-12-30 | 2021-03-09 | 广东金赋科技股份有限公司 | Tax handling method and device based on data conversion and one-key input gold tax three-phase system |
CN112465619B (en) * | 2020-12-30 | 2024-04-23 | 广东金赋科技股份有限公司 | Tax handling method and device based on data conversion and one-key input tax three-period system |
US11914906B2 (en) * | 2022-05-17 | 2024-02-27 | Kyocera Document Solutions Inc. | Pre-processing print jobs |
Also Published As
Publication number | Publication date |
---|---|
MXPA01004696A (en) | 2004-09-10 |
CA2347221C (en) | 2005-04-26 |
BR0101977A (en) | 2001-12-26 |
CA2347221A1 (en) | 2001-11-16 |
Similar Documents
Publication | Publication Date | Title |
---|---|---|
US6662270B1 (en) | System and method for caching of reusable objects | |
US5867633A (en) | Method and apparatus for processing and printing documents | |
US6313920B1 (en) | System and method for remote printing using incremental font subsetting | |
US5499329A (en) | Method and system to handle context of interpretation in a document processing language | |
CA2462223C (en) | Idiom recognizing document splitter | |
US7403297B2 (en) | Printing system that manages font resources using system independent resource references | |
US8553272B2 (en) | Image processing apparatus, image processing method, program therefor, and medium storing program | |
US20080007776A1 (en) | Image processing apparatus and image processing method | |
US7761433B2 (en) | Document processing apparatus, method and program | |
US8228555B2 (en) | Systems and methods for parallel display list rasterization | |
US5483629A (en) | Method and system to handle dictionaries in a document processing language | |
US5446837A (en) | Method and system to process resources in a document processing language | |
JPH0683827A (en) | Method and device for controlling document presentation | |
JP2000207150A (en) | Printing system | |
US6574001B2 (en) | Managing font data in a print job | |
US20050094172A1 (en) | Linking font resources in a printing system | |
US7515297B2 (en) | System and method for improving throughput in printing impositioned documents | |
US9052854B2 (en) | Parallel printing system | |
JPH11191042A (en) | Data processor, data processing method therefor, and storage medium stored with computer-readable program | |
US20140071473A1 (en) | Generic Secondary Resource Referencing Mechanism | |
JP2004303077A (en) | Information processor and page description language generating method, program and storage medium | |
JP2006236006A (en) | Printer, program and recording medium | |
JP6908145B2 (en) | Job ticket conflict resolution for print jobs | |
JP3406705B2 (en) | Dictionary operation method | |
JP3406706B2 (en) | State variable management method |
Legal Events
Date | Code | Title | Description |
---|---|---|---|
AS | Assignment |
Owner name: XEROX CORPORATION, CONNECTICUTFree format text: ASSIGNMENT OF ASSIGNORS INTEREST;ASSIGNORS:SANS, CHARLES;BOUCHE, JEAN-YVES;REEL/FRAME:010809/0287Effective date: 20000516 |
|
AS | Assignment |
Owner name: BANK ONE, NA, AS ADMINISTRATIVE AGENT, ILLINOISFree format text: SECURITY AGREEMENT;ASSIGNOR:XEROX CORPORATION;REEL/FRAME:013111/0001Effective date: 20020621Owner name: BANK ONE, NA, AS ADMINISTRATIVE AGENT,ILLINOISFree format text: SECURITY AGREEMENT;ASSIGNOR:XEROX CORPORATION;REEL/FRAME:013111/0001Effective date: 20020621 |
|
AS | Assignment |
Owner name: JPMORGAN CHASE BANK, AS COLLATERAL AGENT, TEXASFree format text: SECURITY AGREEMENT;ASSIGNOR:XEROX CORPORATION;REEL/FRAME:015134/0476Effective date: 20030625Owner name: JPMORGAN CHASE BANK, AS COLLATERAL AGENT,TEXASFree format text: SECURITY AGREEMENT;ASSIGNOR:XEROX CORPORATION;REEL/FRAME:015134/0476Effective date: 20030625 |
|
STCF | Information on status: patent grant |
Free format text: PATENTED CASE |
|
AS | Assignment |
Owner name: JPMORGAN CHASE BANK, AS COLLATERAL AGENT, TEXASFree format text: SECURITY AGREEMENT;ASSIGNOR:XEROX CORPORATION;REEL/FRAME:015722/0119Effective date: 20030625Owner name: JPMORGAN CHASE BANK, AS COLLATERAL AGENT,TEXASFree format text: SECURITY AGREEMENT;ASSIGNOR:XEROX CORPORATION;REEL/FRAME:015722/0119Effective date: 20030625 |
|
FPAY | Fee payment |
Year of fee payment: 4 |
|
FPAY | Fee payment |
Year of fee payment: 8 |
|
AS | Assignment |
Owner name: XEROX CORPORATION, NEW YORKFree format text: RELEASE BY SECURED PARTY;ASSIGNOR:JPMORGAN CHASE BANK, N.A.;REEL/FRAME:026958/0362Effective date: 20061204Owner name: XEROX CORPORATION, NEW YORKFree format text: RELEASE BY SECURED PARTY;ASSIGNOR:BANK ONE, NA;REEL/FRAME:026957/0505Effective date: 20030625 |
|
AS | Assignment |
Owner name: GOOGLE INC., CALIFORNIAFree format text: ASSIGNMENT OF ASSIGNORS INTEREST;ASSIGNOR:XEROX CORPORATION;REEL/FRAME:027728/0811Effective date: 20111110 |
|
FPAY | Fee payment |
Year of fee payment: 12 |
|
AS | Assignment |
Owner name: GOOGLE LLC, CALIFORNIAFree format text: CHANGE OF NAME;ASSIGNOR:GOOGLE INC.;REEL/FRAME:044127/0735Effective date: 20170929 |
|
AS | Assignment |
Owner name: XEROX CORPORATION, CONNECTICUTFree format text: RELEASE BY SECURED PARTY;ASSIGNOR:JPMORGAN CHASE BANK, N.A. AS SUCCESSOR-IN-INTEREST ADMINISTRATIVE AGENT AND COLLATERAL AGENT TO BANK ONE, N.A.;REEL/FRAME:061360/0501Effective date: 20220822 |
|
AS | Assignment |
Owner name: XEROX CORPORATION, CONNECTICUTFree format text: RELEASE BY SECURED PARTY;ASSIGNOR:JPMORGAN CHASE BANK, N.A. AS SUCCESSOR-IN-INTEREST ADMINISTRATIVE AGENT AND COLLATERAL AGENT TO BANK ONE, N.A.;REEL/FRAME:061388/0388Effective date: 20220822Owner name: XEROX CORPORATION, CONNECTICUTFree format text: RELEASE BY SECURED PARTY;ASSIGNOR:JPMORGAN CHASE BANK, N.A. AS SUCCESSOR-IN-INTEREST ADMINISTRATIVE AGENT AND COLLATERAL AGENT TO JPMORGAN CHASE BANK;REEL/FRAME:066728/0193Effective date: 20220822 |