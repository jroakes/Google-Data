US7251654B2 - System and method for ranking nodes in a network - Google Patents
System and method for ranking nodes in a network Download PDFInfo
- Publication number
- US7251654B2 US7251654B2 US10/847,164 US84716404A US7251654B2 US 7251654 B2 US7251654 B2 US 7251654B2 US 84716404 A US84716404 A US 84716404A US 7251654 B2 US7251654 B2 US 7251654B2
- Authority
- US
- United States
- Prior art keywords
- nodes
- rank
- dangling
- node
- processor
- Prior art date
- Legal status (The legal status is an assumption and is not a legal conclusion. Google has not performed a legal analysis and makes no representation as to the accuracy of the status listed.)
- Active, expires
Links
Images
Classifications
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F16/00—Information retrieval; Database structures therefor; File system structures therefor
- G06F16/90—Details of database functions independent of the retrieved data types
- G06F16/95—Retrieval from the web
- G06F16/951—Indexing; Web crawling techniques
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F16/00—Information retrieval; Database structures therefor; File system structures therefor
- G06F16/30—Information retrieval; Database structures therefor; File system structures therefor of unstructured textual data
- G06F16/31—Indexing; Data structures therefor; Storage structures
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F16/00—Information retrieval; Database structures therefor; File system structures therefor
- G06F16/90—Details of database functions independent of the retrieved data types
- G06F16/95—Retrieval from the web
- G06F16/953—Querying, e.g. by the use of web search engines
- G06F16/9538—Presentation of query results
-
- Y—GENERAL TAGGING OF NEW TECHNOLOGICAL DEVELOPMENTS; GENERAL TAGGING OF CROSS-SECTIONAL TECHNOLOGIES SPANNING OVER SEVERAL SECTIONS OF THE IPC; TECHNICAL SUBJECTS COVERED BY FORMER USPC CROSS-REFERENCE ART COLLECTIONS [XRACs] AND DIGESTS
- Y10—TECHNICAL SUBJECTS COVERED BY FORMER USPC
- Y10S—TECHNICAL SUBJECTS COVERED BY FORMER USPC CROSS-REFERENCE ART COLLECTIONS [XRACs] AND DIGESTS
- Y10S707/00—Data processing: database and file management or data structures
- Y10S707/99931—Database or file accessing
- Y10S707/99937—Sorting
-
- Y—GENERAL TAGGING OF NEW TECHNOLOGICAL DEVELOPMENTS; GENERAL TAGGING OF CROSS-SECTIONAL TECHNOLOGIES SPANNING OVER SEVERAL SECTIONS OF THE IPC; TECHNICAL SUBJECTS COVERED BY FORMER USPC CROSS-REFERENCE ART COLLECTIONS [XRACs] AND DIGESTS
- Y10—TECHNICAL SUBJECTS COVERED BY FORMER USPC
- Y10S—TECHNICAL SUBJECTS COVERED BY FORMER USPC CROSS-REFERENCE ART COLLECTIONS [XRACs] AND DIGESTS
- Y10S707/00—Data processing: database and file management or data structures
- Y10S707/99941—Database schema or data structure
- Y10S707/99944—Object-oriented database structure
- Y10S707/99945—Object-oriented database structure processing
Definitions
- the present invention generally relates to ranking nodes in a directed graph representing an information network. Examples of such graphs include, but are not limited to, directories, subdirectories, and files in a logical directory such as an index produced by crawling the WWW, trust networks between people, or citation graphs.
- the present invention relates to a method for ranking dangling nodes, namely those nodes that have no outlinks, or whose outlinks are inaccessible to the ranking processor.
- the present invention relates to a method for penalizing a node has outlinks to “penalty nodes”, defined as nodes that reflect negatively on other nodes that endorse them.
- Graphs are used in the representation and analysis of many information structures. Ranking nodes in such graphs by their quality or importance is of great value.
- the World Wide Web (WWW) is comprised of an expansive network of interconnected computers upon which businesses, governments, groups, and individuals throughout the world maintain inter-linked computer files known as web pages. Users navigate these web pages by means of computer software programs commonly known as Internet browsers. Due to the vast number of WWW sites, many web pages have a redundancy of information or share a strong likeness in either function or title. The vastness of the unstructured WWW causes users to rely primarily on Internet search engines to retrieve information or to locate businesses. These search engines use various means to determine the relevance of the information retrieved to a user-defined search. Thus, ranking of web pages by their importance or authoritativeness is an important task.
- a typical search engine has an interface where the user enters an alphanumeric search expression or keywords.
- the search engine sifts through available web sites for the search terms, and returns the search results in the form of web pages in, for example, HTML.
- Each search result comprises a list of individual entries that have been identified by the search engine as satisfying the search expression.
- Each entry or “hit” comprises a hyperlink that points to a Uniform Resource Locator (URL) location or web page.
- URL Uniform Resource Locator
- An exemplary search engine is the Google® search engine.
- An important aspect of the Google® search engine is the ability to rank web pages according to the authority of the web pages with respect to a search query.
- One of the ranking techniques used by the Google® search engine is the PageRank algorithm. Reference is made to L. Page, et al., “The PageRank citation ranking: Bringing order to the web,” Technical report, Stanford Digital Library Technologies Project, 1998. Paper SIDL-WP-1999-0120.
- the PageRank algorithm calculates a stationary distribution of a Markov chain induced by hyperlink connectivity on the WWW. This same technique used by the PageRank algorithm applies to other directed graphs where edges or links imply endorsement or trust.
- PageRank In addition to scoring of pages on the world wide web, the technique of PageRank also applies to scoring of nodes in other types of networks. Examples include the scoring of patents by the scores of other patents that contain citations to it, the scoring of scientific literature that contains bibliographic citations, and the scoring of trust among individuals using the knowledge of trust relations between individuals.
- nodes may either have no outlinks or their outlinks are not accessible to a ranking processor; these nodes are known as “dangling nodes”.
- a node may be dangling for a variety of reasons. For example, in the context of the web graph, the web page may have not yet been crawled. In other cases, the node may genuinely have no outlinks, etc.
- a web page is further considered a dangling web page when protected by a robots.txt file.
- Use of a robots.txt file by a web page places the web page “off-limits” under a standard practice of crawling.
- web pages may comprise high-quality information that is of great interest to readers and worthy of indexing.
- ranking of certain kinds of dangling nodes might be particularly important. For instance, some web pages become dangling when they are deleted from the web by their author. Paradoxically, there may be very good reasons to calculate a rank of a web page that was deleted (e.g., a significant document that was removed for political or legal reasons).
- a URL may also be a dangling web page if it has a meta tag requesting that links not be followed from the web page. Further, a URL may be a dangling web page if it requires authentication (e.g., most of the Wall Street Journal site). Other reasons for dangling web pages comprise those links to pages that return a 500-class or 400-class error response at crawl time indicating that the web page is not available. Furthermore, some links may point to servers that are not resolvable in DNS, experience routing problems, etc.
- a 400-class error response comprises non-existent web pages, web pages requiring a password for access, etc.
- a 500-class error response comprises configuration problems, load problems, etc.
- similar situations exist.
- some works may only cite other works that are outside the field being analyzed.
- some of the nodes may represent people for which the list of people they trust is unavailable.
- Conventional graph ranking techniques treat all types of dangling nodes identically. Conventional graph ranking techniques remove dangling nodes from the graph before calculating the ranking and then add the dangling nodes back into the graph ranking analysis.
- L. Page, et al. “The PageRank citation ranking: Bringing order to the web,” Technical report, Stanford Digital Library Technologies Project, 1998. Paper SIDL-WP-1999-0120 (version of Nov. 11, 1999); and S. Kamvar, et al., “Exploiting the block structure of the web for computing pagerank,” Technical report, Stanford University, 2003.
- Dangling nodes may also appear in other types of networks besides the world wide web. Examples include scientific papers that cite no other papers, patents that cite no other patents, or people who trust nobody else. In addition, other types of networks may have nodes that qualify as penalty nodes.
- An example is provided in trust networks between individuals, in which a person may have expressed trust in a person who is convicted of a crime. In this case, the person who trusted the criminal may themselves have their own trust level decreased in acknowledgment of their ill advised trust in the criminal.
- Another example is provided in scientific literature that cites a paper that is later discredited for some reason (e.g., fraudulent data or improper experimental methodology). In this case, the discredited literature becomes a penalty node, and papers that cite it for their own evidence may have their score decreased accordingly.
- the present invention satisfies this need, and presents a system, a computer program product, and an associated method (collectively referred to herein as “the system” or “the present system”) for ranking dangling nodes in a graph.
- the present system ranks dangling nodes of high quality, such as web pages that cannot be crawled by a crawler.
- the present system adjusts ranks to penalize nodes that have outlinks to nodes that are considered “penalty nodes” and that are judged to reflect negatively on nodes linking to them. For example, by providing a rank for dangling web pages, the present system allows the concentration of crawling resources on those dangling web pages that have the highest rank in the uncrawled region.
- the present system operates locally to the dangling nodes, providing efficient determination of ranks for the dangling nodes.
- Some dangling nodes are of extremely high quality. Consequently, a node that points to these dangling nodes is considered by the present system to have good hub characteristics as a result of the link relationship. In contrast, some dangling nodes may reflect negatively on nodes linking to them. For example, in the case of the web, URLs that return errors such as, for example, a 500-class error response or a 400-class error response. Exemplary 400 class error responses are a 404 HTTP return code or a 403 HTTP return code. A 404 HTTP return code indicates a broken link; the web page to which the link points does not exist. A 403 HTTP return code indicates that the user is forbidden from accessing the page to which the link points. Such Web pages that return these errors are examples of penalty nodes. Consequently, the present system decreases the rank of a node that comprises links to penalty nodes.
- the present system calculates a rank for the dangling nodes as if all the dangling nodes were just one node, grouped together in a virtual node. The present system then calculates the rank of the non-dangling nodes together with the virtual node. The present system further modifies the jump probability to the virtual node by the number of outlinks to dangling nodes from a non-dangling node.
- Conventional graph ranking techniques utilize a virtual node in a different manner, as a mathematically formulation of random jumps in the random walk underlining the ranking paradigm.
- the present system converts links to the dangling nodes into links to the virtual node. In this manner, the present system removes the dangling nodes from the initial ranking calculation. The initial ranking calculation is then performed on the virtual node and the non-dangling nodes. The present system then mathematically computes the ranks of the dangling nodes from the ranks of the non-dangling nodes and the virtual node.
- a penalty node may occur, in the case of the Web, because a link to a web page existed at the time that the link was created, but was subsequently removed from the web, causing a broken link. The web page comprising the broken link is no longer being maintained and is out of date.
- a penalty node may occur because the original link was created in error; the web page never existed.
- the present system considers the web page comprising the link as having been poorly authored; the links were never checked for validity.
- a link to a web page that returns a 403 HTTP return code indicates a link to a page that is either not meant for public access or that resides on a server that is poorly configured. In this case, the present system considers the web page comprising the link as having been poorly authored; the author did not verify that the linked page to be publicly accessible.
- ⁇ may exhibit similar cases. For example, in a personal trust network, some of the nodes may have turned out to represent imposters. These nodes are then removed from the network. People who trusted the imposters may be considered to be less reliable than people who did not, as they failed to identify the imposters as such.
- the present system considers nodes that reflect negatively on nodes linking to them as “penalty nodes”.
- the concept of penalizing a node for linking to a penalty node has not previously been addressed by conventional graph ranking techniques.
- Conventional graph ranking techniques compute a rank based on nodes immediately “upstream” of a node rather than nodes immediately “downstream” of a node.
- the present system explicitly discriminates against nodes on the basis of whether they point to penalty nodes. By incorporating more fine-grained information such as this into ranking, the present system can improve the quality of ranking on the graph.
- the present system models a random walk through a graph in which scores are conferred to the nodes walked through by the graph ranking system.
- the path to the penalty node is through a contributing node and a penalized node.
- the penalized node is the node that linked to a penalty node.
- the rank of a node is based on its final score.
- the contributing node contributed score to the penalized node that the present system wishes to return by means of any of the following processors, either singly or in combination: the push-back processor, the self-loop processor, the jump-weighting processor, and the rank redistribution processor.
- the push-back processor returns a fraction of the score assigned to penalized nodes proportional to the fraction of outlinks to penalty nodes back to the contributing node or nodes.
- the pushed-back score is distributed among the contributing nodes in the same proportion that the contributing nodes conferred scores to the penalized node.
- the self-loop processor confers scores to nodes by forming a self-loop on every node. For every node in the random walk, the next step is to either stay at the node (forming a self-loop), follow an outlink from the node, or jump to a virtual node.
- the self-loop processor specifies that the probability of staying at the node and receiving the score associated with staying at the web page is inversely proportional to the fraction of links out of the node that link to penalty nodes.
- the jump-weighting processor modifies the probability of a node being the terminus of the random jump by attaching a jump weight to each node.
- the jump weight is inversely proportional to the number of penalty nodes to which the node links. A node with a high penalty fraction will have a lower possibility of receiving rank from a random jump.
- the rank redistribution processor alternates forward and backward steps in the random walk when encountering a node that is not a penalty node.
- the backward step confers score to the node. If the node is a dangling node but not a penalty node, the rank redistribution processor propagates the score associated with the dangling node among all the web pages contributing scores to the dangling node in the same proportion the score was contributed. If the node is a penalty node, the rank redistribution processor jumps to the virtual node, preventing scores associated with the step from being assigned to the node that linked to the penalty node.
- the present system may be embodied in a utility program such as a directed graph processing utility program.
- the present system provides means for the user to identify a directed graph for which the present system performs processing of dangling nodes.
- the present system further provides means for the user to specify a method by which the rank of nodes linking to penalty nodes is adjusted. Alternatively, the user may specify that ranks of nodes linking to penalty nodes not be adjusted.
- the user selects the input data, specifies whether ranks are adjusted for nodes linking to penalty nodes, selects a method by which ranks are adjusted for nodes linking to penalty nodes, and then invokes the graph processing utility program to rank the nodes in the directory or the index.
- FIG. 1 is a schematic illustration of an exemplary operating environment in which a dangling web page processing system of the present invention can be used;
- FIG. 2 is a block diagram of the high-level architecture of the dangling web page processing system of FIG. 1 ;
- FIG. 3 is a diagram illustrating a set of web pages and links between web pages illustrating an effect that dangling web pages can have on non-dangling web pages with and without teleportation as determined by the dangling web page processing system of FIGS. 1 and 2 ;
- FIG. 4 is a diagram illustrating a set of web pages comprising a dangling web page and links between web pages with no teleportation that may be analyzed by the dangling web page processing system of FIGS. 1 and 2 ;
- FIG. 5 is a diagram further illustrating a set of web pages comprising a dangling web page and links between web pages that may be analyzed by the dangling web page processing system of FIGS. 1 and 2 ;
- FIG. 6 is a process flow chart illustrating a method of operation of the dangling web page processor of the dangling web page processing system of FIGS. 1 and 2 ;
- FIG. 7 is a process flow chart illustrating a method of operation of the push-back processor of the dangling web page processing system of FIGS. 1 and 2 ;
- FIG. 8 is a process flow chart illustrating a method of operation of the self-loop processor of the dangling web page processing system of FIGS. 1 and 2 ;
- FIG. 9 is a process flow chart illustrating a method of operation of the jump-weighting processor of the dangling web page processing system of FIGS. 1 and 2 ;
- FIG. 10 is a process flow chart illustrating a method of operation of the rank redistribution processor of the dangling web page processing system of FIGS. 1 and 2 .
- Contributing Web Page A web page that contributes rank to a penalty page through a link to the penalty page.
- Dangling Web Page (Dangling web page): Web pages that have no outlinks or have outlinks that cannot be crawled either because the outlinks link to web pages inaccessible by a crawler or because the outlinks return an error to a crawler.
- Inlink Links coming into a web page or document such as an HTML document from another web page or document.
- Internet A collection of interconnected public and private computer networks that are linked together with routers by a set of standards protocols to form a global, distributed network.
- Link A pointer in a web page or in a document such as an HTML document that leads to another web page or to another place within the same document; also called a hyperlink.
- Outlink Links from a web page or document such as an HTML document to another web page or document.
- Penalty Fraction The fraction of outlinks on a web page that leads to penalty web pages as compared to the total number of outlinks on the web page.
- Penalty Page A web page that returns an error when a link to that web page is followed. A penalty page has no content.
- Penalized web page A web page comprising links to penalty pages.
- Teleportation a random jump from one web page to another that is not associated with actual links.
- URL Uniform Resource Locator
- Virtual Node A notional additional node of the graph which collects random jumps from other nodes and redistributes them to those nodes.
- WWW World Wide Web
- Internet client server hypertext distributed information retrieval system
- FIG. 1 portrays an exemplary overall environment in which a system and associated method (the “system 10 ”) for ranking dangling web pages on the world wide web according to the present invention may be used.
- System 10 comprises a software programming code or a computer program product that is typically embedded within, or installed on a host server 15 .
- system 10 can be saved on a suitable storage medium such as a diskette, a CD, a hard drive, or like devices.
- Users such as remote Internet users, are represented by a variety of computers such as computers 20 , 25 , 30 , and can access the host server 15 through a network 35 .
- system 10 ranks results obtained by a search engine operated on host server 15 .
- the results are accessed by system 10 from database (dB) 40 .
- Users access the results of the ranking when performing key word searches on the Internet.
- users provide an index or other hierarchical structure to system 10 ; system 10 then ranks the index or other hierarchical structure for the user.
- Output from system 10 is stored on dB 40 or on a storage repository of the user.
- Computers 20 , 25 , 30 each comprise software that allows the user to interface securely with the host server 15 .
- the host server 15 is connected to network 35 via a communications link 45 such as a telephone, cable, or satellite link.
- Computers 20 , 25 , 30 can be connected to network 35 via communications links 50 , 55 , 60 , respectively. While system 10 is described in terms of network 35 , computers 20 , 25 , 30 may also access system 10 locally rather than remotely. Computers 20 , 25 , 30 may access system 10 either manually, or automatically through the use of an application.
- FIG. 2 illustrates a high-level hierarchy of system 10 .
- System 10 comprises a dangling web page processor 205 .
- System 10 further push-back processor 210 , a self-loop processor 215 , a jump-weighting processor 220 , and a rank redistribution processor 225 , collectively referenced herein as penalty page processors 230 .
- the dangling web page processor 205 removes the dangling web pages from the ranking calculation by linking each of the dangling web pages to a virtual node.
- the dangling web page processor 205 then calculates a rank for a set of crawled pages and a virtual node.
- the dangling web page processor 205 adjusts the ranks of the dangling web pages based on the ranks of the crawled pages and the virtual node.
- System 10 uses any of the penalty page processors 230 to penalize the ranks of web pages that link to penalty pages. The excess ranking generated by penalizing web pages that link to penalty pages is then returned to contributing web pages, web pages that contributed rank to these penalized web pages.
- a conventional “ideal” assumption is that G is strongly connected; i.e., every node can be reached by following links from every other node.
- the a ij can be given by 1/d j , where d j is the out-degree of node j.
- This ideal assumption assumes that a “surfer” follows the outlinks from a node with equal probability.
- the web is not strongly connected. Consequently, adjustments to the ideal case are required to compensate for non-ideal aspects of the web.
- a common adjustment to the ideal assumption is the addition of links from nodes with no outlinks to some or all of the other nodes.
- a further adjustment is the use of “random jumps” not associated with actual links (also referenced herein as teleportation).
- the stochastic matrix in equation (2) is a convex combination of A and a rank one matrix.
- Web page ranking techniques such as, for example, the PageRank algorithm
- different choices for the teleportation parameter ⁇ can produce different convergence rates and different rankings.
- a random jump can be taken to one of an arbitrary set of nodes, as defined by f.
- L. Page, et al. “The PageRank citation ranking: Bringing order to the web,” Technical report, Stanford Digital Library Technologies Project, 1998.
- the subset C corresponds to a completely (strongly) connected subgraph (
- m).
- the remaining nodes in subset D have links from C but no outlinks.
- system 10 assumes a virtual (n+I) th node to and from which random jumps may be made (as in equation (3)).
- system 10 adds new edges (i, n+1) for i ⁇ D and (n+1, j) for j ⁇ C to define an expanded edge set E′.
- the dangling web page processor 205 partitions the matrix and vector of equation (3) and computes the ranking of the nodes in V′ via the principal eigenvector computation:
- Dangling nodes can have significant effects on the ranking of non-dangling nodes as illustrated by the diagram of FIG. 3 comprising web page 1 , 305 , web page 2 , 310 , web page 3 , 315 , and links 320 .
- Web page 3 , 315 is a dangling web page because it has no outlinks. In this example, it is important whether teleportation to dangling web pages is allowed. If uniform jumps from the dangling web page, web page 3 , 320 , to all nodes (including the dangling web page) are allowed, then the transition matrix is:
- web page 3 , 315 has a higher rank than web pages 1 , 305 , and web page 2 , 310 , since it has 2 inlinks and they have only one each.
- the dangling node processor 205 now determines the rank of the dangling node (web page 3 , 315 ) via equation (12). Consequently, web page 3 , 315 , has a rank of 0.27, lower than web page 1 , 305 , or web page 2 , 310 . Further, the rank of web page 3 , 315 , is less than the rank of the virtual node, z, because the virtual node, z, also receives random (teleportation) jumps from web page 1 , 305 , and web page 2 , 310 .
- the diagram of FIG. 4 illustrates another example, showing that dangling nodes can have a higher rank than non-dangling nodes, even when teleportation to dangling nodes is forbidden.
- the diagram of FIG. 4 comprises web page 1 , 405 , web page 2 , 410 , web page 3 , 415 , web page 4 , 420 , web page 5 , 425 , and web page 6 , 430 , collectively referenced as web pages 435 , and links 440 .
- Web page 5 , 425 , and web page 6 , 430 are dangling web pages.
- the dangling node processor 205 solves the reduced system ( 9 ) and generates the y values to obtain the normalized ranks (including that of the virtual node, z,) of web pages 435 such that:
- FIG. 5 illustrates another example in which penalty web pages are significant.
- FIG. 5 comprises web page 1 , 505 , web page 2 , 510 , web page 3 , 515 , web page 4 , 520 , and links 525 .
- Web page 4 , 520 is a dangling web page with a link 530 from web page 3 , 515 .
- system 10 applies a reduction in rank to the web page that comprises the dangling web pages rather than the neighbors of the web page comprising dangling web pages. Otherwise, web pages can accumulate rank by accumulating a quantity of links to dangling web pages to the detriment of web pages that have no links to dangling web pages.
- the web page that comprises a link to a penalty page is referenced as a penalized web page.
- the one or more web pages that contribute rank to the penalty page are referenced as contributing web pages. Consequently, system 10 modifies the calculation of the ranks to transfer rank from the penalized web page to the contributing web pages.
- System 10 utilizes any of the penalty page processors 230 to implement this transfer of rank.
- the push-back processor 210 is independent of the dangling node processor 203 . Its function is to reduce by a fraction the rank of a penalized node, creating an excess rank at the penalized node. The push-back processor 210 then returns the excess rank from the penalized node to one or more contributing nodes that pushed rank to the penalized node in the previous iteration. Excess rank is returned to the contributing nodes in the same proportion that the contributing nodes conferred rank to the penalized node. Consequently, the push-back processor 210 limits the “inflow” of rank to penalized nodes
- x i ( k + 1 ) ⁇ ( j , i ) ⁇ E ⁇ a ij ⁇ x j ( k ) ( 13 )
- the push-back processor 210 wishes to return a portion (say ⁇ , where 0 ⁇ i ⁇ 1) of that rank x i to the contributing nodes that point to the node i (i.e., the j such that j, i) ⁇ E).
- the push-back processor 210 returns the excess rank from the penalized node to the contributing nodes in the same proportion as it was bestowed in equation (13).
- the penalized node i retains a proportion (1 ⁇ i ) of its undiluted rank.
- the excess rank is distributed in proportion to the contributing nodes (i.e., the j such that (j, i) ⁇ E).
- the push-back processor 210 normalizes these proportions so that the total is one.
- this single penalized node may be assumed to be the first node examined by system 210 .
- the “push-back” of ranking to a contributing node corresponds to a B of the following form:
- the push-back processor 210 extends this procedure to construct a B such that each penalized node “gives back” the fraction (1 ⁇ i ) of its initial rank.
- the push-back processor 210 introduces an extra step at each iteration of the ranking iteration—the (sparse) post-multiplication of the rank vector by B.
- the push-back processor 210 applies to web pages with links that point to 404 web pages (or other bogus nodes). Let g i be the number of “good” links out of penalty p i and let b i be the number of bad (penalty) links out of node i.
- the push-back processor penalizes penalty page i by setting
- ⁇ i b i g i + b i .
- FIG. 5 is modified such that web page 3 , 515 , comprises eight links to dangling web pages of which four dangling web pages are bad ( 404 s ) and four dangling web pages are good.
- the push-back processor 210 obtains a set of ranks for web page 1 , 505 , web page 2 , 510 , web page 3 , 515 , and the virtual node, z, as follows:
- system 10 follows an outlink with probability ⁇ , or jumps to a random node with probability 1 ⁇ .
- the self-loop processor 215 augments each node with a self-loop link to itself and with some probability ⁇ i follows this self-loop link.
- the self-loop processor 215 assumes that all self-loops have been removed from the link graph prior to augmentation.
- the probability ⁇ i is smaller if the node has a large number of outlinks to penalty nodes. Consequently, the self-loop processor 215 allows a node that has no bad outlinks to retain some of its rank by following a link to itself. In contrast, the self-loop processor 215 does not allow a node with only bad links to retain any of its rank.
- the self-loop processor 215 chooses a probability ⁇ for ⁇ i and uses the following:
- the self-loop processor 215 adjusts the teleportation probability from 1 ⁇ to
- the self-loop processor 215 simply adds self-loops to a node for every good outlink and selects a random outlink from the node (including the added self-loops) with equal probability at each iteration.
- the self-loop processor 215 chooses a parameter ⁇ l for each node.
- System 10 follows the self-loop with probability ⁇ l and follows the standard ranking process with probability 1 ⁇ i .
- This embodiment results in transition probabilities of ⁇ i for the self-loop, probability (1 ⁇ i )(1 ⁇ ) for the teleportation step, and probability ⁇ (1 ⁇ i )/g of following a non-penalty outlink from a node. While this embodiment results in no rank for penalty pages, this embodiment can be modified in an obvious way to compute such ranks.
- the dangling node processor 205 treats bad links (such as 404 s ) as dangling nodes in the web graph and collapses them into the virtual node, z, along with the legitimate dangling nodes (equation (4)). The dangling node processor 205 then redistributes the rank of the virtual node, z, evenly (or to a chosen seed set) through “random jumps” to web pages.
- the jump-weighting processor 220 which is an alternative to the “push-back” and “self-loop” methods, biases the redistribution of rank such that penalized nodes receive less of this redistributed rank.
- the jump-weighting processor 220 provides a jump probability to each nodes based on the number of penalty pages a web page links to.
- a jump-weighting processor 220 weights a link from the virtual node, z, to an unpenalized node in C (or the seed set) by ⁇ and to a penalized node by ⁇ g i l(g i +b i ), where ⁇ is chosen so that the sum of all the edge weights representing these links is unity.
- the rank redistribution processor 225 is an alternative to the “push-back”, “self-loop” and “jump-weighting” techniques, does not depend on a query, and ranks all nodes in the graph.
- the rank redistribution processor 225 is most easily described by a random walk that comprises two steps, namely a forward step using any conventional node ranking approach. For all non-dangling nodes, the rank redistribution processor then takes a backward step that comprises a self-loop. In the case of linking to a penalized node, the rank redistribution processor 225 does not take a backward step but instead forwards all of the rank of the penalized node to the virtual node, z. In the case of a non-penalty node, the backward step performed by the rank redistribution processor 225 divides the current rank of the non-penalty node by the number of inlinks. The rank redistribution processor 225 then propagates the rank of the non-penalty node equally among all of the backward links.
- the rank redistribution processor 225 assumes that all web pages have an inward link as is true of web pages discovered by crawling. The rank redistribution processor 225 further assumes that the seed web pages have known inward links that the rank redistribution processor 225 processes. Without loss of generality, the rank redistribution processor 225 treats any node with no inlinks as a penalty node. When the rank redistribution processor 225 encounters a penalty node, the rank redistribution processor 225 takes a step to a randomly selected seed node or the virtual node, z, rather than traversing an inlink in the reverse direction. Consequently, the rank redistribution processor 225 “returns” the rank of web pages that point to non-penalty pages while redistributing the rank that is given to penalty pages.
- the rank redistribution processor 225 utilizes a matrix B that encodes a backwards step. If P denotes the matrix representing a conventional node ranking process, then a matrix describing the rank redistribution processor 225 is simply BP, where B is the matrix that encodes the backwards step. More specifically, the rank redistribution processor 225 orders nodes such that the penalty pages are at the end. For a non-penalty node j, let ⁇ (j) denote the indegree of a node j. Then let
- the rank redistribution processor 225 obtains a matrix, B, as follows:
- Matrix B describes the backwards step performed by the rank redistribution processor 225 .
- the number “1” in matrix B represents a matrix of ones. In one embodiment, this matrix of ones is replaced with a personalized distribution that favors some web pages over others. In another embodiment, the rank redistribution processor 225 excludes the penalty pages from the redistribution of weight. Consequently, p penalty nodes would produce a matrix such as:
- the matrix BP is stochastic because it is the product of two stochastic matrices.
- This Markov chain produces a rank that is a unique stationary probability distribution on the web pages.
- the probability mass of penalty nodes is generally less using the rank redistribution processor than the probability mass of the same penalty node using conventional ranking techniques.
- the rank redistribution processor 225 can be cast in a unified framework.
- the push-back processor 210 , the self-loop processor 215 , and the jump-weighting processor 220 require minimal computational overhead.
- the push-back processor 210 , the self-loop processor 215 , and the jump-weighting processor 220 are local in nature. Apart from the requirement to keep the matrix of equation (4) normalized, the changes to an entry in the i th row of the matrix of equation (4) are only dependent on the number of penalty outlinks, b i , and “good” outlinks, g i , from the i th node.
- the local nature of the push-back processor 210 , the self-loop processor 215 , and the jump-weighting processor 220 allows either the modified matrix to be pre-computed in linear time (given the vectors b and g), or the required modifications to be executed on the fly along with iterated ranking computations.
- rank redistribution processor 225 requires an eigen-system that comprises the dangling web pages. Consequently, the rank redistribution processor 225 is larger than that required for a “forward-only” process based on conventional page ranking techniques.
- FIG. 6 illustrates a method 600 of the system 10 .
- the dangling node processor 205 identifies dangling nodes (step 605 ) from the graph structure gathered by the crawler.
- the dangling node processor 205 treats outlinks from crawled pages to dangling nodes as outlinks to a virtual node, z (step 610 ).
- the dangling node processor 205 calculates a rank for the crawled pages and the virtual node, z, (step 615 ) using any method of calculating ranks such as, for example, PageRank.
- the dangling node processor 205 further calculates a rank for the dangling nodes (step 620 ) as if the dangling web pages had been in the original page ranking calculation.
- the rank calculated by the dangling node processor 205 is a stationary probability.
- the ranks of the dangling web pages are calculated by the dangling web page processor 205 in one step.
- the ranking technique used for the non-dangling nodes (such as PageRank) utilizes any of the penalty page processors 230 to adjust the rank of web pages with outlinks to penalty pages (step 625 ).
- FIG. 7 illustrates a method 700 of the push-back processor 210 .
- the push-back processor 210 identifies penalty nodes (step 705 ) and identifies penalized nodes (step 710 ).
- the push-back processor 210 determines the penalty fraction (step 715 ); the penalty fraction is the fraction of outlinks from the penalized node that link to penalty nodes. For example, a penalized node comprises four outlinks, three of which are links to penalty nodes. The penalized node then has a penalty fraction of 3 ⁇ 4.
- the push-back processor 210 determines the rank contribution made to the penalized node by each contributing node (step 720 ). The push-back processor 210 then returns rank to each contributing node that is based on the penalty fraction and the rank contribution supplied by the contributing node (step 725 ).
- FIG. 8 illustrates a method 800 of the self-loop processor 215 .
- the self-loop processor 215 identifies penalty nodes (step 805 ) and identifies penalized nodes (step 810 ).
- the self-loop processor 215 determines the penalty fraction for penalized web pages (step 815 ). From the penalty fraction, the self-loop processor 215 determines a probability of following a self-loop (step 820 ).
- a high penalty fraction indicates that a high percentage of outlinks on the penalized node link to penalty nodes. The higher the penalty fraction for a penalized node, the lower the probability that a self-loop is followed.
- the self-loop processor 215 determines whether the self-loop is followed for a penalty node at decision step 825 . If the self-loop is followed, the self-loop processor 215 confers rank to the penalized node (step 830 ). If the self-loop is not followed, the self-loop processor 215 confers rank to the virtual node, z.
- FIG. 9 illustrates a method 900 of the jump-weighting processor 220 .
- the jump-weighting processor 220 identifies penalty nodes (step 905 ) and identifies penalized nodes (step 910 ).
- the jump-weighting processor 220 determines the penalty fraction for penalized nodes (step 915 ). From the penalty fraction, the jump-weighting processor 220 determines a “jump weight” associated with penalized nodes based on the penalty fraction (step 920 ).
- the “jump weight” corresponds to a probability of randomly jumping to the penalized node from the virtual node, z.
- a high penalty fraction translates to a lower “jump weight” and a lower probability that rank is conferred to the penalized node from the virtual node, z, during a redistribution of rank from the virtual node, z.
- FIG. 10 illustrates a method 1000 of the rank redistribution processor 225 .
- a node is selected (step 1005 ) using any of a variety of page ranking techniques.
- An outlink is selected on the selected node and followed (step 1010 ).
- the rank redistribution processor 225 determines whether the current node is a dangling node (decision step 1015 ). If the current node is not a dangling node, the rank redistribution processor 225 returns to the selected node (step 1020 ).
- the rank redistribution processor 225 determines whether the current node is a penalty node (decision step 1025 ). If the current node is a penalty node, the rank redistribution processor 225 jumps to the virtual node, z, (step 1030 ). From the virtual node, z, the node ranking technique selects a node (step 1005 ).
- the rank redistribution processor 225 determines a “dangling” rank (step 1035 ).
- the dangling rank is determined by dividing the rank of the node by the number of inlinks to the node.
- the rank redistribution processor 225 then propagates the dangling rank among each of a set of nodes with inlinks to this node (step 1040 ). For example, a node may have two inlinks.
- the rank redistribution processor 225 determines the dangling rank by dividing the rank of the node by two.
- the rank redistribution processor 225 then adds the dangling rank to the rank of each of the two nodes that have inlinks to the node.
- the rank redistribution processor 225 jumps to the virtual node, z, (step 1030 ). In one embodiment, the rank redistribution processor 225 may jump to a predetermined seed set. In another embodiment, the rank redistribution processor 225 may jump to a randomly selected node at step 1030 .
Abstract
Description
Written in matrix terms, equation (1) becomes x=Ax. For the system represented by equation (1) to have a useful solution, A is required to be (column) stochastic; i.e., eTA=eT, where eT is the vector of all ones. Consequently, x is the principal eigenvector corresponding to the principal eigenvalue unity. Reference is made to G. Golub, et al., “Matrix Computations,” Johns Hopkins University Press, Baltimore, 3rd edition, 1996.
x=[(1−α)fe T +αA]x (2)
where α is the probability of following an actual outlink from a node, (1−α) is the probability of taking a “random jump” rather than following a link, and f is a stochastic vector (i.e., eT f=1). The stochastic matrix in equation (2) is a convex combination of A and a rank one matrix.
The solutions of this system are in one-to-one correspondence with those of the modified problem represented in equation (2).
where, if dj is the out-degree of node j
and x, y, z are of the row dimension of C, D and 1; e is the vector of ones of conforming dimension. The individual equations for x, y, and z are:
x=αCx+(z/m)e (5)
y=αDx (6)
z=(1−α)x+e T y (7)
Solving for z in terms of x alone yields:
z={(1−α)e T +αe T D}x (8)
since the reduced matrix is column stochastic and
{circumflex over (x)}=αC{circumflex over (x)}+({circumflex over (z)}/m)e (10)
{circumflex over (z)}={(1−α)e T +αe T D}{circumflex over (x)} (11)
ŷ=αD{circumflex over (x)} (12)
Consequently,
Consequently, there is no need for teleportation because the graph is now strongly connected. In this example,
The corresponding normalized web page ranks are:
-
- (x1, x2, z)=(0.317, 0.317, 0.365).
Consequently, the virtual web page, z, receives a higher rank thanweb page web page web page web page Web page web page links 320.
- (x1, x2, z)=(0.317, 0.317, 0.365).
-
- (x, y, z)=(
rank 1,rank 2,rank 3,rank 4,rank 5,rank 6, rank Z) - (x, y, z)=(0.1229, 0.1119, 0.1087, 0.1079, 0.1432, 0.09732, 0.3082)
Rank 1 is the rank ofweb page Rank 2 is the rank ofweb page Rank 3 is the rank ofweb page Rank 4 is the rank ofweb page Rank 5 is the rank ofweb page Rank 6 is the rank ofweb page web page web page web page web page web page
- (x, y, z)=(
-
- S=[
rank 1,rank 2,rank 3, rank Z] - S=[0.1987, 0.2831, 0.2831, 0.2351].
Rank 1 is the rank ofweb page Rank 2 is the rank ofweb page Rank 3 is the rank ofweb page
- S=[
-
- S=[0.196, 0.2293, 0.2792, 0.2955]
Because of the presence of the additional dangling web pages, the rank of the virtual node, z, has increased. However, the rank ofweb page web page
- S=[0.196, 0.2293, 0.2792, 0.2955]
The push-
x (k+1) =BAx (k)
The matrix B, like A, is a column stochastic matrix; i.e., eTA=eT, where eT is the vector of all ones. This clearly preserves the column stochastic property, since eT (BA)=eTA=eT.
where ā1 T is the first row of A (except for a11) and
σ=(1−β1)+β1 e T ā 1
is a normalizing factor, such that B is column stochastic.
-
- S=[
rank 1,rank 2,rank 3, rank Z] - S=[0.2923, 0.3122, 0.1666, 0.229].
Rank 1 is the rank ofweb page Rank 2 is the rank ofweb page Rank 3 is the rank ofweb page web page web page web page
- S=[
where again bi is the number of outlinks from node i to penalty nodes, and gi is the number of outlinks to non-penalty nodes. To create a stochastic matrix, the self-
be the probability of going from j to i. In this case, the
Claims (32)
Priority Applications (1)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US10/847,164 US7251654B2 (en) | 2004-05-15 | 2004-05-15 | System and method for ranking nodes in a network |
Applications Claiming Priority (1)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US10/847,164 US7251654B2 (en) | 2004-05-15 | 2004-05-15 | System and method for ranking nodes in a network |
Publications (2)
Publication Number | Publication Date |
---|---|
US20050256860A1 US20050256860A1 (en) | 2005-11-17 |
US7251654B2 true US7251654B2 (en) | 2007-07-31 |
Family
ID=35310592
Family Applications (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
US10/847,164 Active 2025-08-18 US7251654B2 (en) | 2004-05-15 | 2004-05-15 | System and method for ranking nodes in a network |
Country Status (1)
Country | Link |
---|---|
US (1) | US7251654B2 (en) |
Cited By (13)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20060095430A1 (en) * | 2004-10-29 | 2006-05-04 | Microsoft Corporation | Web page ranking with hierarchical considerations |
US20070208699A1 (en) * | 2004-09-07 | 2007-09-06 | Shigeki Uetabira | Information search provision apparatus and information search provision system |
US20080097980A1 (en) * | 2006-10-19 | 2008-04-24 | Sullivan Alan T | Methods and systems for node ranking based on dns session data |
US20080184165A1 (en) * | 2005-04-14 | 2008-07-31 | Sk Communications Corp. | System and Method For Evaluating Content on the Internet Network and Computer Readable Medium Processing the Method |
US20080313168A1 (en) * | 2007-06-18 | 2008-12-18 | Microsoft Corporation | Ranking documents based on a series of document graphs |
US20090083222A1 (en) * | 2007-09-21 | 2009-03-26 | Microsoft Corporation | Information Retrieval Using Query-Document Pair Information |
US20090319565A1 (en) * | 2005-05-02 | 2009-12-24 | Amy Greenwald | Importance ranking for a hierarchical collection of objects |
US20110125760A1 (en) * | 2006-07-14 | 2011-05-26 | Bea Systems, Inc. | Using tags in an enterprise search system |
US8060497B1 (en) * | 2009-07-23 | 2011-11-15 | Google Inc. | Framework for evaluating web search scoring functions |
US20130290303A1 (en) * | 2005-06-29 | 2013-10-31 | Wal-Mart Stores, Inc. | Categorizing Documents |
US8630992B1 (en) * | 2010-12-07 | 2014-01-14 | Conductor, Inc. | URL rank variability determination |
US8983943B2 (en) | 2007-04-30 | 2015-03-17 | Resource Consortium Limited | Criteria-specific authority ranking |
US11522758B1 (en) | 2021-09-13 | 2022-12-06 | International Business Machines Corporation | Preserving data integrity in cognitive multi-agent systems |
Families Citing this family (32)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US7698267B2 (en) * | 2004-08-27 | 2010-04-13 | The Regents Of The University Of California | Searching digital information and databases |
US20060112089A1 (en) * | 2004-11-22 | 2006-05-25 | International Business Machines Corporation | Methods and apparatus for assessing web page decay |
US9286387B1 (en) * | 2005-01-14 | 2016-03-15 | Wal-Mart Stores, Inc. | Double iterative flavored rank |
US20070067282A1 (en) * | 2005-09-20 | 2007-03-22 | Microsoft Corporation | Domain-based spam-resistant ranking |
WO2007041800A1 (en) * | 2005-10-14 | 2007-04-19 | Panscient Inc | Information extraction system |
US20070198504A1 (en) * | 2006-02-23 | 2007-08-23 | Microsoft Corporation | Calculating level-based importance of a web page |
US7580931B2 (en) * | 2006-03-13 | 2009-08-25 | Microsoft Corporation | Topic distillation via subsite retrieval |
US7509299B2 (en) * | 2006-03-13 | 2009-03-24 | Microsoft Corporation | Calculating web page importance based on a conditional Markov random walk |
US7627777B2 (en) * | 2006-03-17 | 2009-12-01 | Microsoft Corporation | Fault tolerance scheme for distributed hyperlink database |
WO2007110398A1 (en) * | 2006-03-24 | 2007-10-04 | Stefano Serra-Capizzano | Web search engine with new ranking method |
US7933890B2 (en) * | 2006-03-31 | 2011-04-26 | Google Inc. | Propagating useful information among related web pages, such as web pages of a website |
US8209305B2 (en) * | 2006-04-19 | 2012-06-26 | Microsoft Corporation | Incremental update scheme for hyperlink database |
US20080016072A1 (en) * | 2006-07-14 | 2008-01-17 | Bea Systems, Inc. | Enterprise-Based Tag System |
US20080016061A1 (en) * | 2006-07-14 | 2008-01-17 | Bea Systems, Inc. | Using a Core Data Structure to Calculate Document Ranks |
US20080016052A1 (en) * | 2006-07-14 | 2008-01-17 | Bea Systems, Inc. | Using Connections Between Users and Documents to Rank Documents in an Enterprise Search System |
US20080016053A1 (en) * | 2006-07-14 | 2008-01-17 | Bea Systems, Inc. | Administration Console to Select Rank Factors |
US20080016071A1 (en) * | 2006-07-14 | 2008-01-17 | Bea Systems, Inc. | Using Connections Between Users, Tags and Documents to Rank Documents in an Enterprise Search System |
US7634476B2 (en) * | 2006-07-25 | 2009-12-15 | Microsoft Corporation | Ranking of web sites by aggregating web page ranks |
US8392366B2 (en) * | 2006-08-29 | 2013-03-05 | Microsoft Corporation | Changing number of machines running distributed hyperlink database |
KR20090050086A (en) * | 2006-09-11 | 2009-05-19 | 인터내셔널 비지네스 머신즈 코포레이션 | Method for recommending short-cuts in order to ease and fasten navigating within navigation topology |
US20080114753A1 (en) * | 2006-11-15 | 2008-05-15 | Apmath Ltd. | Method and a device for ranking linked documents |
US7617194B2 (en) * | 2006-12-29 | 2009-11-10 | Microsoft Corporation | Supervised ranking of vertices of a directed graph |
ITBG20070012A1 (en) * | 2007-02-13 | 2008-08-14 | Web Lion Sas | SEARCH METHOD AND SELECTION OF WEB SITES |
US8122016B1 (en) * | 2007-04-24 | 2012-02-21 | Wal-Mart Stores, Inc. | Determining concepts associated with a query |
US8862608B2 (en) * | 2007-11-13 | 2014-10-14 | Wal-Mart Stores, Inc. | Information retrieval using category as a consideration |
US8200596B2 (en) * | 2009-05-28 | 2012-06-12 | Reid Andersen | Speeding up analysis of compressed web graphs using virtual nodes |
FI121638B (en) | 2009-06-12 | 2011-02-15 | Foster Wheeler Energia Oy | The fluidized bed reactor |
US8862569B2 (en) * | 2012-01-11 | 2014-10-14 | Google Inc. | Method and techniques for determining crawling schedule |
US20130226934A1 (en) * | 2012-02-27 | 2013-08-29 | Microsoft Corporation | Efficient Electronic Document Ranking For Internet Resources in Sub-linear Time |
US11803918B2 (en) | 2015-07-07 | 2023-10-31 | Oracle International Corporation | System and method for identifying experts on arbitrary topics in an enterprise social network |
CN107665189B (en) * | 2017-06-16 | 2019-12-13 | 平安科技（深圳）有限公司 | method, terminal and equipment for extracting central word |
CN115766589B (en) * | 2023-01-10 | 2023-07-14 | 长沙学院 | Virtual network mapping system based on high fault tolerance |
Citations (1)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20050216533A1 (en) * | 2004-03-29 | 2005-09-29 | Yahoo! Inc. | Search using graph colorization and personalized bookmark processing |
-
2004
- 2004-05-15 US US10/847,164 patent/US7251654B2/en active Active
Patent Citations (1)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20050216533A1 (en) * | 2004-03-29 | 2005-09-29 | Yahoo! Inc. | Search using graph colorization and personalized bookmark processing |
Non-Patent Citations (9)
Title |
---|
"Depth vs. Breadth," available at: http://WWW.webmasterworld.com/forum10003/2924.htm, on Mar. 22, 2004, 6 pages. |
"Edutech LMS Evaluation: Report," available at: http://WWW.edutech.ch/edutech/tools/ev2showreport.php?details=1&critdescr=1&compid0 . . . , on Mar. 22, 2004, 28 pages. |
"Holy smokes Batman, that is a Huge # of links," Apr. 4, 2003, available at: http://WWW.webmasterworld.com/forum<SUB>-</SUB>12/748-2-15.htm, on Mar. 22, 2004, 7 pages. |
Gisli Hjaltason et al., "Using Spatial Sorting and Ranking in Model-Based Object Recognition," 1998, 11 pages. |
Ian Rogers, "The Google Pagerank Algorithm and How It Works," available at: http://WWW.iprcom.com/papers/pagerank/, on Jan. 27, 2004, 18 pages. |
J.Scott Olsson, "Categorization for MALACH AMSC 663, Semester Progress Report," olsson@math.umd.edu, available at: http://www.math.umd.edu/~olsson/amsc663/docs/prop-talk.pdf, on May 15, 2004, 36 pages. |
Kamvar et al, "Extrapolation Methods for Accelerating PageRank Computations", WWW2003, May 20-24, 2003, ACM 1-58113-680-3/03/0005, pp. 261-270. * |
Langville et al, "Updating PageRank with Iterative Aggregation", WWW2004, May 17-22, 2004, ACM 1-58113-912-08/04/0005, pp. 392-393. * |
Rethinking Drupal's meta tags beyond version 3, available at: http://www.drupal.org/node/view/55, on Mar. 22, 2004, 24 pages. |
Cited By (25)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US8341135B2 (en) * | 2004-09-07 | 2012-12-25 | Interman Corporation | Information search provision apparatus and information search provision system |
US20070208699A1 (en) * | 2004-09-07 | 2007-09-06 | Shigeki Uetabira | Information search provision apparatus and information search provision system |
US20060095430A1 (en) * | 2004-10-29 | 2006-05-04 | Microsoft Corporation | Web page ranking with hierarchical considerations |
US7779001B2 (en) * | 2004-10-29 | 2010-08-17 | Microsoft Corporation | Web page ranking with hierarchical considerations |
US20080184165A1 (en) * | 2005-04-14 | 2008-07-31 | Sk Communications Corp. | System and Method For Evaluating Content on the Internet Network and Computer Readable Medium Processing the Method |
US7809736B2 (en) * | 2005-05-02 | 2010-10-05 | Brown University | Importance ranking for a hierarchical collection of objects |
US20090319565A1 (en) * | 2005-05-02 | 2009-12-24 | Amy Greenwald | Importance ranking for a hierarchical collection of objects |
US20130290303A1 (en) * | 2005-06-29 | 2013-10-31 | Wal-Mart Stores, Inc. | Categorizing Documents |
US8903808B2 (en) * | 2005-06-29 | 2014-12-02 | Wal-Mart Stores, Inc. | Categorizing documents |
US20110125760A1 (en) * | 2006-07-14 | 2011-05-26 | Bea Systems, Inc. | Using tags in an enterprise search system |
US7593935B2 (en) * | 2006-10-19 | 2009-09-22 | Paxfire | Methods and systems for node ranking based on DNS session data |
US8090726B2 (en) | 2006-10-19 | 2012-01-03 | Paxfire, Inc. | Methods and systems for node ranking based on DNS session data |
US20080097980A1 (en) * | 2006-10-19 | 2008-04-24 | Sullivan Alan T | Methods and systems for node ranking based on dns session data |
US8983943B2 (en) | 2007-04-30 | 2015-03-17 | Resource Consortium Limited | Criteria-specific authority ranking |
US9514193B2 (en) | 2007-04-30 | 2016-12-06 | Resource Consortium Limited | Criteria-specific authority ranking |
US10289646B1 (en) | 2007-04-30 | 2019-05-14 | Resource Consortium Limited | Criteria-specific authority ranking |
US9984162B1 (en) | 2007-04-30 | 2018-05-29 | Resource Consortium Limited | Criteria-specific authority ranking |
US8244737B2 (en) * | 2007-06-18 | 2012-08-14 | Microsoft Corporation | Ranking documents based on a series of document graphs |
US20080313168A1 (en) * | 2007-06-18 | 2008-12-18 | Microsoft Corporation | Ranking documents based on a series of document graphs |
US20090083222A1 (en) * | 2007-09-21 | 2009-03-26 | Microsoft Corporation | Information Retrieval Using Query-Document Pair Information |
US7877385B2 (en) * | 2007-09-21 | 2011-01-25 | Microsoft Corporation | Information retrieval using query-document pair information |
US8060497B1 (en) * | 2009-07-23 | 2011-11-15 | Google Inc. | Framework for evaluating web search scoring functions |
US8572075B1 (en) | 2009-07-23 | 2013-10-29 | Google Inc. | Framework for evaluating web search scoring functions |
US8630992B1 (en) * | 2010-12-07 | 2014-01-14 | Conductor, Inc. | URL rank variability determination |
US11522758B1 (en) | 2021-09-13 | 2022-12-06 | International Business Machines Corporation | Preserving data integrity in cognitive multi-agent systems |
Also Published As
Publication number | Publication date |
---|---|
US20050256860A1 (en) | 2005-11-17 |
Similar Documents
Publication | Publication Date | Title |
---|---|---|
US7251654B2 (en) | System and method for ranking nodes in a network | |
Eiron et al. | Ranking the web frontier | |
US8346759B2 (en) | Searching documents for ranges of numeric values | |
US8346763B2 (en) | Ranking method using hyperlinks in blogs | |
US6560600B1 (en) | Method and apparatus for ranking Web page search results | |
US9058382B2 (en) | Augmenting a training set for document categorization | |
US20080033932A1 (en) | Concept-aware ranking of electronic documents within a computer network | |
US7509299B2 (en) | Calculating web page importance based on a conditional Markov random walk | |
Ahmadi-Abkenari et al. | An architecture for a focused trend parallel Web crawler with the application of clickstream analysis | |
US7464076B2 (en) | System and method and computer program product for ranking logical directories | |
US7617194B2 (en) | Supervised ranking of vertices of a directed graph | |
US7809736B2 (en) | Importance ranking for a hierarchical collection of objects | |
US7873623B1 (en) | System for user driven ranking of web pages | |
US8260766B2 (en) | Embedded communication of link information | |
US7054859B2 (en) | Apparatus and method for responding to search requests for stored documents | |
US20090282032A1 (en) | Topic distillation via subsite retrieval | |
US7818334B2 (en) | Query dependant link-based ranking using authority scores | |
US20070198504A1 (en) | Calculating level-based importance of a web page | |
US20070112815A1 (en) | Hierarchy-based propagation of contribution of documents | |
Liu et al. | Webpage importance analysis using conditional markov random walk | |
US7984041B1 (en) | Domain specific local search | |
Selamat et al. | Architecture for a parallel focused crawler for clickstream analysis | |
Lynn et al. | A Study on Web Crawlers and Crawling Algorithms | |
Shrivastava et al. | Comparative Analysis of Web Crawling Algorithms for Improvement in Web Crawler | |
Ahmadi-Abkenari et al. | A Clickstream-based Focused Trend Parallel Web Crawler |
Legal Events
Date | Code | Title | Description |
---|---|---|---|
AS | Assignment |
Owner name: INTERNATIONAL BUSINESS MACHINES CORPORATION, NEW YFree format text: ASSIGNMENT OF ASSIGNORS INTEREST;ASSIGNORS:ELRON, NADAV;MCCURLEY, KEVIN SNOW;TOMLIN, JOHN ANTHONY;REEL/FRAME:015347/0564Effective date: 20040514 |
|
STCF | Information on status: patent grant |
Free format text: PATENTED CASE |
|
REMI | Maintenance fee reminder mailed | ||
FPAY | Fee payment |
Year of fee payment: 4 |
|
SULP | Surcharge for late payment | ||
AS | Assignment |
Owner name: GOOGLE INC., CALIFORNIAFree format text: ASSIGNMENT OF ASSIGNORS INTEREST;ASSIGNOR:INTERNATIONAL BUSINESS MACHINES CORPORATION;REEL/FRAME:026664/0866Effective date: 20110503 |
|
FPAY | Fee payment |
Year of fee payment: 8 |
|
AS | Assignment |
Owner name: GOOGLE LLC, CALIFORNIAFree format text: CHANGE OF NAME;ASSIGNOR:GOOGLE INC.;REEL/FRAME:044127/0735Effective date: 20170929 |
|
MAFP | Maintenance fee payment |
Free format text: PAYMENT OF MAINTENANCE FEE, 12TH YEAR, LARGE ENTITY (ORIGINAL EVENT CODE: M1553); ENTITY STATUS OF PATENT OWNER: LARGE ENTITYYear of fee payment: 12 |