US11477493B2 - Adaptation for entropy coding of blocks of image data - Google Patents
Adaptation for entropy coding of blocks of image data Download PDFInfo
- Publication number
- US11477493B2 US11477493B2 US15/671,595 US201715671595A US11477493B2 US 11477493 B2 US11477493 B2 US 11477493B2 US 201715671595 A US201715671595 A US 201715671595A US 11477493 B2 US11477493 B2 US 11477493B2
- Authority
- US
- United States
- Prior art keywords
- block
- elements
- scan order
- group
- intra
- Prior art date
- Legal status (The legal status is an assumption and is not a legal conclusion. Google has not performed a legal analysis and makes no representation as to the accuracy of the status listed.)
- Active, expires
Links
Images
Classifications
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04N—PICTORIAL COMMUNICATION, e.g. TELEVISION
- H04N19/00—Methods or arrangements for coding, decoding, compressing or decompressing digital video signals
- H04N19/90—Methods or arrangements for coding, decoding, compressing or decompressing digital video signals using coding techniques not provided for in groups H04N19/10-H04N19/85, e.g. fractals
- H04N19/91—Entropy coding, e.g. variable length coding [VLC] or arithmetic coding
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04N—PICTORIAL COMMUNICATION, e.g. TELEVISION
- H04N19/00—Methods or arrangements for coding, decoding, compressing or decompressing digital video signals
- H04N19/10—Methods or arrangements for coding, decoding, compressing or decompressing digital video signals using adaptive coding
- H04N19/134—Methods or arrangements for coding, decoding, compressing or decompressing digital video signals using adaptive coding characterised by the element, parameter or criterion affecting or controlling the adaptive coding
- H04N19/157—Assigned coding mode, i.e. the coding mode being predefined or preselected to be further used for selection of another element or parameter
- H04N19/159—Prediction type, e.g. intra-frame, inter-frame or bidirectional frame prediction
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04N—PICTORIAL COMMUNICATION, e.g. TELEVISION
- H04N19/00—Methods or arrangements for coding, decoding, compressing or decompressing digital video signals
- H04N19/10—Methods or arrangements for coding, decoding, compressing or decompressing digital video signals using adaptive coding
- H04N19/102—Methods or arrangements for coding, decoding, compressing or decompressing digital video signals using adaptive coding characterised by the element, parameter or selection affected or controlled by the adaptive coding
- H04N19/124—Quantisation
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04N—PICTORIAL COMMUNICATION, e.g. TELEVISION
- H04N19/00—Methods or arrangements for coding, decoding, compressing or decompressing digital video signals
- H04N19/10—Methods or arrangements for coding, decoding, compressing or decompressing digital video signals using adaptive coding
- H04N19/102—Methods or arrangements for coding, decoding, compressing or decompressing digital video signals using adaptive coding characterised by the element, parameter or selection affected or controlled by the adaptive coding
- H04N19/129—Scanning of coding units, e.g. zig-zag scan of transform coefficients or flexible macroblock ordering [FMO]
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04N—PICTORIAL COMMUNICATION, e.g. TELEVISION
- H04N19/00—Methods or arrangements for coding, decoding, compressing or decompressing digital video signals
- H04N19/10—Methods or arrangements for coding, decoding, compressing or decompressing digital video signals using adaptive coding
- H04N19/169—Methods or arrangements for coding, decoding, compressing or decompressing digital video signals using adaptive coding characterised by the coding unit, i.e. the structural portion or semantic portion of the video signal being the object or the subject of the adaptive coding
- H04N19/17—Methods or arrangements for coding, decoding, compressing or decompressing digital video signals using adaptive coding characterised by the coding unit, i.e. the structural portion or semantic portion of the video signal being the object or the subject of the adaptive coding the unit being an image region, e.g. an object
- H04N19/176—Methods or arrangements for coding, decoding, compressing or decompressing digital video signals using adaptive coding characterised by the coding unit, i.e. the structural portion or semantic portion of the video signal being the object or the subject of the adaptive coding the unit being an image region, e.g. an object the region being a block, e.g. a macroblock
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04N—PICTORIAL COMMUNICATION, e.g. TELEVISION
- H04N19/00—Methods or arrangements for coding, decoding, compressing or decompressing digital video signals
- H04N19/44—Decoders specially adapted therefor, e.g. video decoders which are asymmetric with respect to the encoder
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04N—PICTORIAL COMMUNICATION, e.g. TELEVISION
- H04N19/00—Methods or arrangements for coding, decoding, compressing or decompressing digital video signals
- H04N19/60—Methods or arrangements for coding, decoding, compressing or decompressing digital video signals using transform coding
Definitions
- Digital video streams may represent video using a sequence of frames or still images.
- Digital video can be used for various applications including, for example, video conferencing, high definition video entertainment, video advertisements, or sharing of user-generated videos.
- a digital video stream can contain a large amount of data and consume a significant amount of computing or communication resources of a computing device for processing, transmission or storage of the video data.
- Various approaches have been proposed to reduce the amount of data in video streams, including compression and other encoding techniques.
- Encoding based on spatial similarities may be performed by breaking a frame or image into blocks that are predicted based on other blocks within the same frame or image. Differences (i.e., residual errors) between blocks and prediction blocks are compressed and encoded in a bitstream. A decoder uses the differences and reference frames to reconstruct the frames or images.
- This application relates to encoding and decoding a current block of video data. Disclosed herein are aspects of systems, methods, and apparatuses for encoding and decoding the current block using adaptation for entropy coding.
- the system includes a memory and a processor.
- the memory stores instructions executable by the processor to cause the system to: partition a block of video data into a plurality of groups of elements; decode, using an entropy decoder, data from an encoded bitstream to obtain elements of a first group from the plurality of groups of elements; determine a category based on the elements of the first group; based on the category, select a context for an element from a second group from the plurality of groups of elements; and decode, using the entropy decoder using the context, data from the encoded bitstream to obtain the element of the second group from the plurality of groups of elements.
- Another aspect is a method for decoding video.
- the method includes partitioning a block of video data into a plurality of groups of elements; decoding, using an entropy decoder, data from an encoded bitstream to obtain elements of a first group from the plurality of groups of elements; determining a category based on the elements of the first group; based on the category, selecting a context for an element from a second group from the plurality of groups of elements; and decoding, using the entropy decoder using the context, data from the encoded bitstream to obtain the element of the second group from the plurality of groups of elements.
- the system includes a memory and a processor.
- the memory stores instructions executable by the processor to cause the system to: partition a block of video data into a plurality of groups of elements; encode, using an entropy encoder, elements of a first group from the plurality of groups of elements; determine a category based on the elements of the first group; based on the category, select a context for an element from a second group from the plurality of groups of elements; and encode, using the entropy encoder using the context, the element of the second group from the plurality of groups of elements.
- the system includes a memory and a processor.
- the memory stores instructions executable by the processor to cause the system to: partition a block of video data into a plurality of groups of elements; decode, using an entropy decoder, data from an encoded bitstream to obtain, using a first scan order, elements of a first group from the plurality of groups of elements, wherein the first group includes elements forming a triangle in a corner of the block, and wherein the triangle includes elements of a first row of the block and elements of a first column of the block; determine, based on the elements of the first group, a second scan order for a second group from the plurality of groups of elements; and decode, using the entropy decoder, data from the encoded bitstream to obtain, using the second scan order, elements of the second group from the plurality of groups of elements.
- the method includes partitioning a block of video data into a plurality of groups of elements; decoding, using an entropy decoder, data from an encoded bitstream to obtain, using a first scan order, elements of a first group from the plurality of groups of elements, wherein the first group includes elements forming a triangle in a corner of the block, and wherein the triangle includes elements of a first row of the block and elements of a first column of the block; determining, based on the elements of the first group, a second scan order for a second group from the plurality of groups of elements; and decoding, using the entropy decoder, data from the encoded bitstream to obtain, using the second scan order, elements of the second group from the plurality of groups of elements.
- the system includes a memory and a processor.
- the memory stores instructions executable by the processor to cause the system to: partition a block of video data into a plurality of groups of elements; encode, using an entropy encoder using a first scan order, elements of a first group from the plurality of groups of elements, wherein the first group includes elements forming a triangle in a corner of the block, and wherein the triangle includes elements of a first row of the block and elements of a first column of the block; determine, based on the elements of the first group, a second scan order for a second group from the plurality of groups of elements; and encode, using the entropy encoder using the second scan order, elements of the second group from the plurality of groups of elements.
- FIG. 1 is a schematic of a video encoding and decoding system.
- FIG. 2 is a block diagram of an example of a computing device that can implement a transmitting station or a receiving station.
- FIG. 3 is a diagram of a video stream to be encoded and subsequently decoded.
- FIG. 4 is a block diagram of an encoder according to implementations of this disclosure.
- FIG. 5 is a block diagram of a decoder according to implementations of this disclosure.
- FIG. 6 is a diagram illustrating quantized transform coefficients in accordance with implementations of this disclosure.
- FIG. 7A is a block diagram of an encoder that separately encodes quantized coefficients and an intra-prediction mode.
- FIG. 7B is a block diagram of a decoder that separately decodes quantized coefficients and an intra-prediction mode.
- FIG. 8A is a block diagram of an encoder that uses the intra-prediction mode to encode the quantized coefficients.
- FIG. 8B is a block diagram of a decoder that uses the intra-prediction mode to decode the quantized coefficients.
- FIG. 9 is a flowchart diagram of a process for coding a current block using an intra-prediction mode according to an implementation of this disclosure.
- FIG. 10 is a block diagram of an encoder according to implementations of this disclosure.
- FIG. 11 is a flowchart diagram of a process for decoding a current block using an intra-prediction mode according to an implementation of this disclosure.
- FIG. 12 is a block diagram of a decoder according to implementations of this disclosure.
- FIG. 13 is a flowchart diagram of a process for reconstructing a current block using an intra-prediction mode according to an implementation of this disclosure.
- FIG. 14A is a diagram of an intra-prediction mode having a 90 degree prediction angle according to implementations of this disclosure.
- FIG. 14B is a diagram of an intra-prediction mode having a 135 degree prediction angle according to implementations of this disclosure.
- FIG. 15A is a diagram of an example of a set of scan orders for a block that are adapted based on data of a first group of elements of the block.
- FIG. 15B is a diagram of an example of a set of scan orders for a block that are adapted based on a non-zero map for a first group of elements of the block.
- FIG. 16 is a flowchart of an example of a process for adapting scan order to encode a block of video data.
- FIG. 17 is a flowchart of an example of a process for adapting scan order to decode a block of video data.
- FIG. 18A is a flowchart of an example of a process for determining a scan order for a next group of elements of a block of video data.
- FIG. 18B is a flowchart of an example of a process for determining a scan order for a next group of elements of a block of video data.
- FIG. 19 is a flowchart of an example of a process for adapting scan order to encode a block of video data and encoding an intra-prediction mode for the block using a context selected based on data in the block.
- FIG. 20 is a flowchart of an example of a process for adapting scan order to decode a block of video data and decoding an intra-prediction mode for the block using a context selected based on data in the block.
- FIG. 21A is a diagram of an example of a set of scan orders for a block that are adapted based on data of a first group of elements of the block.
- FIG. 21B is a diagram of an example of a set of scan orders for a block that are adapted based on magnitudes for a first group of elements of the block.
- FIG. 22A is a diagram of an example of a scan order for a first group of elements of a block of image data.
- FIG. 22B is a diagram of an example of a scan order for a first group of elements of a block of image data.
- FIG. 23 is a flowchart of an example of a process for adapting context to encode a block of video data.
- FIG. 24 is a flowchart of an example of a process for adapting context to decode a block of video data.
- FIG. 25A is a flowchart of an example of a process for determining a category for a block based on a subset of elements of the block of image data.
- FIG. 25B is a flowchart of an example of a process for determining a category for a block based on a subset of elements of the block of image data.
- Compression schemes related to coding video streams may include breaking images into blocks and generating a digital video output bitstream (i.e., an encoded bitstream) using one or more techniques to reduce the data rate of the output bitstream.
- a received bitstream can be decoded to re-construct the blocks and the source images from the compressed information.
- Techniques used to encode and decode video streams can include entropy coding of components of a video signal (e.g., a prediction residual for a block from a frame of video).
- a hybrid video coding framework may make use of prediction, transform, quantization, and/or entropy coding to compress a block of video data.
- compression performance of entropy coding may be improved by adaptively selecting a scan order instead of using a fixed scan order. For example, if a significant number of zero valued coefficients occur at the end of the scan order for the block, then the ending run of zeros can be very efficiently coded (e.g., using an entropy encoder or an entropy decoder) explicitly or implicitly (e.g., by an end of block indication).
- a block may be partitioned for entropy coding into a plurality of groups of elements (e.g., quantized transform coefficients of a residual block), and information in the a first group of elements that are coded using a default scan order, which is available at both the encoder and compatible decoder, may be used to determine a scan order for a next group. For example, based on a distribution of non-zero valued elements in prior coded groups of elements, a scan order for the last group(s) of elements of the block may be selected to increase the probability of zero valued elements occurring at the end of the resulting scan order for the block.
- groups of elements e.g., quantized transform coefficients of a residual block
- scan order adaptation is based only on information available in the current block of elements (e.g., quantized transform coefficients of a residual block).
- Such a scheme may offer the advantage of avoiding dependency of the entropy coding of the block on other parameters, such as an intra-prediction mode for the block or coefficient statistics for other blocks of the video that may be used by a constrained adaptive scan order scheme.
- Information in the first group of elements may also be leveraged to improve coding efficiency of an entropy coding scheme by adapting one or more contexts that are used to code subsequent groups of elements in the block (e.g., a second group of elements including all remaining elements).
- a category may be determined based on elements of the first group and a context used for coding an element of a second group of elements of the block may be selected based in part on the category.
- a scan order for the second group of elements may also be determined based on the category.
- the first group of elements which are used to adapt a context and/or a scan order used for coding a second group of elements of the block, may be designed to reduce the size of the first group while still providing enough information to robustly inform adaptation.
- improved adapted coding parameters e.g., contexts or scan orders
- Coding efficiency can also be improved by designing the first group to include the elements of the block most likely to be non-zero (e.g., by using an upper-left triangular shape for the first group), to avoid constraining these likely non-zero coefficients to be coded after the first group.
- the shape and size of a first group of elements may be selected based on a size of the block.
- the advantages may include (1) increasing the coding efficiency of the an entropy encoder/decoder by using a scan order and/or a context that is adapted to the distribution of non-zero coefficients in the current block; (2) allowing the processing of blocks of a frame in different orders by avoiding a parsing dependency on information outside of the current block; and/or (3) enabling the improvement of intra-prediction mode coding efficiency by enabling intra-prediction modes to be decoded after the elements of a residual block and leveraging correlation between the elements of the block and the intra-prediction mode used to generate the block.
- the scan order for a block based on a residual block resulting from inter-prediction may be adapted based on information in a partitioned group of elements of the block that start the scan order.
- inter-prediction may use a motion vector that represents the spatial displacement of a previously coded block relative to the current block.
- the motion vector can be identified using a method of motion estimation, such as a motion search.
- a portion of a reference frame can be translated to a succession of locations to form a prediction block that can be subtracted from a portion of a current frame to form a series of residuals.
- the horizontal and/or vertical translations corresponding to the location having, e.g., the smallest, residual can be selected as the motion vector.
- the motion vector can be encoded in the encoded bitstream along with an indication of the reference frame.
- a resulting inter-prediction residual may exhibit spatial patterns that can be recognized and exploited to improve entropy coding efficiency for the residual by adapting the scan order for a block based on the residual.
- Encoding a video stream, or a portion thereof, such as a frame or a block can include using spatial similarities in the video stream to improve coding efficiency.
- a current block of a video stream may be encoded based on identifying a difference (residual) between the previously coded pixel values, or between a combination of previously coded pixel values, and those in the current block.
- Intra prediction attempts to predict the pixel values of a current block of a frame of a video stream using pixels peripheral to the current block; that is, using pixels that are in the same frame as the current block but that are outside of the current block.
- Intra prediction can be performed along a direction of prediction, referred to herein as prediction angle, where directions can correspond to respective intra-prediction modes.
- An intra-prediction mode uses pixels peripheral to the current block being predicted. Pixels peripheral to the current block are pixels outside the current block.
- intra-prediction modes may be referred to as directional intra-prediction modes, which may have corresponding prediction angles.
- Directional intra-prediction modes can include, for example, horizontal intra-prediction modes, vertical intra-prediction modes, and diagonal intra-prediction modes.
- a horizontal intra-prediction mode corresponds to an intra-prediction having a prediction angle that is generally horizontal.
- a vertical intra-prediction mode corresponds to an intra-prediction having a prediction angle that is generally vertical.
- a diagonal intra-prediction mode corresponds to a directional intra-prediction having a prediction angle that is neither generally horizontal nor generally vertical.
- the prediction angle of a directional intra-prediction mode can be a prediction angle between 0 and 360 degrees.
- the prediction angle can be a prediction angle between 0 and 270 degrees. Available prediction angles can also be a subset of all possible prediction angles.
- a codec can have available prediction modes corresponding to 50-60 discrete prediction angles of the 0 to 360 prediction angles.
- Non directional intra-prediction modes can also be supported, including, for example, a planar intra-prediction mode and a DC intra-prediction mode.
- Directional intra-prediction modes can be used to propagate pixel values from previously coded blocks along an angular line to predict a block.
- pixel values being propagated can include peripheral pixels above and/or to the left of the block in the same frame (e.g., when raster scan order is used in encoding).
- FIGS. 14A and 14B illustrate two example of intra prediction.
- FIG. 14A is a diagram of an intra-prediction mode 1401 having a 90 degree prediction angle according to implementations of this disclosure.
- FIG. 14A illustrates generating a prediction block for a 4 ⁇ 4 block to be predicted (also called a current block) using a vertical intra-prediction mode.
- the intra-prediction mode of FIG. 14A propagates peripheral pixels A through D down the columns of the prediction block such that each pixel in a column has its value set equal to that of the adjacent peripheral pixel A through D in the direction of the arrows.
- FIG. 14B is a diagram of an intra-prediction mode 1402 having a 135 degree prediction angle according to implementations of this disclosure.
- FIG. 14B illustrates generating a prediction block for a 4 ⁇ 4 current block using a diagonal intra-prediction mode.
- the intra-prediction mode of FIG. 14B propagates peripheral pixel values along a 135 degree line (i.e., lines 1406 ) to the right and down to form the prediction block.
- the peripheral pixel values can include, for example, some of peripheral pixels 1408 (i.e., pixels A through R) from blocks adjacent to the 4 ⁇ 4 current block of a frame 1410 , to form the prediction block 1403 for the current block.
- a linear combination e.g., weighted average
- some (e.g., two, three, or more) of the peripheral pixels can be used to predict pixel values of the prediction block along lines extending through the block.
- the pixel value 1404 to be propagated along line 1406 can be formed from a weighted average of pixel values K, L, and M.
- a residual block of residual errors can result from the intra prediction of a block of a video stream.
- the residual block can be in the pixel domain.
- the residual block can be transformed into the frequency domain resulting in a transform block of transform coefficients.
- the transform coefficients can be quantized resulting into a quantized transform block of quantized transform coefficients (also referred to herein as quantized coefficients).
- a quantized transform block of quantized transform coefficients is also referred to herein as a block of quantized transform coefficients.
- the quantized coefficients can be entropy encoded and added to an encoded bitstream.
- the intra-prediction mode can also be entropy encoded and added to the encoded bitstream.
- a decoder can receive the encoded bitstream, entropy decode the quantized transform coefficients and/or the intra-prediction mode to reconstruct the original video frame.
- the number of bits used to encode the intra-prediction mode can depend on the number of available intra-prediction modes. In a video coding system where N intra-prediction modes are available, log 2 N bits may be required to indicate the prediction mode. For example, in a system where nine (9) or ten (10) intra-prediction modes are available for a 4 ⁇ 4 luminance block, four (4) bits may be required to indicate an intra-prediction mode. In a system where 35 intra-prediction modes are available for a 4 ⁇ 4 luminance block, six (6) bits may be required to indicate an intra-prediction mode. Coding systems that use more intra-prediction modes require more bits to encode an intra-prediction mode.
- the number of bits required to encode an intra-prediction mode can be greater than the number of bits required to encode the pixel values of the current block being encoded. For example, to encode a 4 ⁇ 4 block (which contains 16 pixels) in a coding system that uses more than 16 intra-prediction modes, the number of distinct prediction modes is higher than the number of pixels to be predicted. This results in a problem of over saturation.
- Implementations of this disclosure can improve video compression using improved coding of intra-prediction modes.
- Implementations according to this disclosure can use information in residual blocks to improve the compression performance of intra-prediction modes.
- information in the quantized transform block can be used by an entropy encoder to encode the intra-prediction mode thereby improving compression performance.
- the bit rates resulting from encoding an intra-prediction mode can be reduced.
- Encoders and decoders according to implementations of this disclosure can improve the entropy coding without increasing the complexity of the encoding and decoding.
- FIG. 1 is a schematic of a video encoding and decoding system 100 .
- a transmitting station 102 can be, for example, a computer having an internal configuration of hardware such as that described in FIG. 2 .
- the processing of the transmitting station 102 can be distributed among multiple devices.
- a network 104 can connect the transmitting station 102 and a receiving station 106 for encoding and decoding of the video stream.
- the video stream can be encoded in the transmitting station 102 and the encoded video stream can be decoded in the receiving station 106 .
- the network 104 can be, for example, the Internet.
- the network 104 can also be a local area network (LAN), wide area network (WAN), virtual private network (VPN), cellular telephone network or any other means of transferring the video stream from the transmitting station 102 to, in this example, the receiving station 106 .
- LAN local area network
- WAN wide area network
- VPN virtual private network
- the receiving station 106 in one example, can be a computer having an internal configuration of hardware such as that described in FIG. 2 . However, other suitable implementations of the receiving station 106 are possible. For example, the processing of the receiving station 106 can be distributed among multiple devices.
- an implementation can omit the network 104 .
- a video stream can be encoded and then stored for transmission at a later time to the receiving station 106 or any other device having memory.
- the receiving station 106 receives (e.g., via the network 104 , a computer bus, and/or some communication pathway) the encoded video stream and stores the video stream for later decoding.
- a real-time transport protocol RTP
- a transport protocol other than RTP may be used, e.g., a Hyper-Text Transfer Protocol (HTTP)-based video streaming protocol.
- HTTP Hyper-Text Transfer Protocol
- the transmitting station 102 and/or the receiving station 106 may include the ability to both encode and decode a video stream as described below.
- the receiving station 106 could be a video conference participant who receives an encoded video bitstream from a video conference server (e.g., the transmitting station 102 ) to decode and view and further encodes and transmits its own video bitstream to the video conference server for decoding and viewing by other participants.
- FIG. 2 is a block diagram of an example of a computing device 200 that can implement a transmitting station or a receiving station.
- the computing device 200 can implement one or both of the transmitting station 102 and the receiving station 106 of FIG. 1 .
- the computing device 200 can be in the form of a computing system including multiple computing devices, or in the form of a single computing device, for example, a mobile phone, a tablet computer, a laptop computer, a notebook computer, a desktop computer, and the like.
- a CPU 202 in the computing device 200 can be a central processing unit.
- the CPU 202 can be any other type of device, or multiple devices, capable of manipulating or processing information now-existing or hereafter developed.
- the disclosed implementations can be practiced with a single processor as shown, e.g., the CPU 202 , advantages in speed and efficiency can be achieved using more than one processor.
- a memory 204 in the computing device 200 can be a read-only memory (ROM) device or a random access memory (RAM) device in an implementation. Any other suitable type of storage device can be used as the memory 204 .
- the memory 204 can include code and data 206 that is accessed by the CPU 202 using a bus 212 .
- the memory 204 can further include an operating system 208 and application programs 210 , the application programs 210 including at least one program that permits the CPU 202 to perform the methods described here.
- the application programs 210 can include applications 1 through N, which further include a video coding application that performs the methods described here.
- the computing device 200 can also include a secondary storage 214 , which can, for example, be a memory card used with a computing device 200 that is mobile. Because the video communication sessions may contain a significant amount of information, they can be stored in whole or in part in the secondary storage 214 and loaded into the memory 204 as needed for processing.
- the computing device 200 can also include one or more output devices, such as a display 218 .
- the display 218 may be, in one example, a touch sensitive display that combines a display with a touch sensitive element that is operable to sense touch inputs.
- the display 218 can be coupled to the CPU 202 via the bus 212 .
- Other output devices that permit a user to program or otherwise use the computing device 200 can be provided in addition to or as an alternative to the display 218 .
- the output device is or includes a display
- the display can be implemented in various ways, including by a liquid crystal display (LCD), a cathode-ray tube (CRT) display or light emitting diode (LED) display, such as an organic LED (OLED) display.
- LCD liquid crystal display
- CRT cathode-ray tube
- LED light emitting diode
- OLED organic LED
- the computing device 200 can also include or be in communication with an image-sensing device 220 , for example a camera, or any other image-sensing device 220 now existing or hereafter developed that can sense an image such as the image of a user operating the computing device 200 .
- the image-sensing device 220 can be positioned such that it is directed toward the user operating the computing device 200 .
- the position and optical axis of the image-sensing device 220 can be configured such that the field of vision includes an area that is directly adjacent to the display 218 and from which the display 218 is visible.
- the computing device 200 can also include or be in communication with a sound-sensing device 222 , for example a microphone, or any other sound-sensing device now existing or hereafter developed that can sense sounds near the computing device 200 .
- the sound-sensing device 222 can be positioned such that it is directed toward the user operating the computing device 200 and can be configured to receive sounds, for example, speech or other utterances, made by the user while the user operates the computing device 200 .
- FIG. 2 depicts the CPU 202 and the memory 204 of the computing device 200 as being integrated into a single unit, other configurations can be utilized.
- the operations of the CPU 202 can be distributed across multiple machines (each machine having one or more processors) that can be coupled directly or across a local area or other network.
- the memory 204 can be distributed across multiple machines such as a network-based memory or memory in multiple machines performing the operations of the computing device 200 .
- the bus 212 of the computing device 200 can be composed of multiple buses.
- the secondary storage 214 can be directly coupled to the other components of the computing device 200 or can be accessed via a network and can comprise a single integrated unit such as a memory card or multiple units such as multiple memory cards.
- the computing device 200 can thus be implemented in a wide variety of configurations.
- FIG. 3 is a diagram of an example of a video stream 300 to be encoded and subsequently decoded.
- the video stream 300 includes a video sequence 302 .
- the video sequence 302 includes a number of adjacent frames 304 .
- a frame may be referred to as a picture. While three frames are depicted as the adjacent frames 304 , the video sequence 302 can include any number of adjacent frames 304 .
- the adjacent frames 304 can then be further subdivided into individual frames, e.g., a frame 306 .
- the frame 306 can be divided into a series of segments 308 or planes.
- the segments 308 can be subsets of frames that permit parallel processing, for example.
- the segments 308 can also be subsets of frames that can separate the video data into separate colors.
- the frame 306 of color video data can include a luminance plane and two chrominance planes.
- the segments 308 may be sampled at different resolutions.
- the frame 306 may be further subdivided into blocks 310 , which can contain data corresponding to, for example, 16 ⁇ 16 pixels in the frame 306 .
- the blocks 310 can also be arranged to include data from one or more segments 308 of pixel data.
- the blocks 310 can also be of any other suitable size such as 4 ⁇ 4 pixels, 8 ⁇ 8 pixels, 16 ⁇ 8 pixels, 8 ⁇ 16 pixels, 16 ⁇ 16 pixels, 4 ⁇ 32 pixels, 8 ⁇ 32 pixels, 16 ⁇ 32 pixels, 32 ⁇ 4 pixels, 32 ⁇ 8 pixels, 32 ⁇ 16 pixels, 32 ⁇ 32 pixels, 64 ⁇ 64 pixels, or in general N ⁇ M pixels, where N, M may be an integer power of 2 like 2, 4, 8, 16, 32, 64, 128, 256, or larger.
- FIG. 4 is a block diagram of an encoder 400 according to implementations of this disclosure.
- the encoder 400 can be implemented, as described above, in the transmitting station 102 such as by providing a computer software program stored in memory, for example, the memory 204 .
- the computer software program can include machine instructions that, when executed by a processor such as the CPU 202 , cause the transmitting station 102 to encode video data in the manner described herein.
- the encoder 400 can also be implemented as specialized hardware included in, for example, the transmitting station 102 .
- the encoder 400 has the following stages to perform the various functions in a forward path (shown by the solid connection lines) to produce an encoded or compressed bitstream 420 using the video stream 300 as input: an intra/inter prediction stage 402 , a transform stage 404 , a quantization stage 406 , and an entropy encoding stage 408 .
- the encoder 400 may also include a reconstruction path (shown by the dotted connection lines) to reconstruct a frame for encoding of future blocks.
- the encoder 400 has the following stages to perform the various functions in the reconstruction path: a dequantization stage 410 , an inverse transform stage 412 , a reconstruction stage 414 , and a loop filtering stage 416 .
- Other structural variations of the encoder 400 can be used to encode the video stream 300 .
- a block can be encoded using intra-frame prediction (also called intra-prediction) or inter-frame prediction (also called inter-prediction), or a combination of both.
- intra-prediction also called intra-prediction
- inter-prediction inter-frame prediction
- a prediction block can be formed.
- intra-prediction all or a part of a prediction block may be formed from samples in the current frame that have been previously encoded and reconstructed.
- inter-prediction all or part of a prediction block may be formed from samples in one or more previously constructed reference frames determined using motion vectors.
- the prediction block can be subtracted from the current block at the intra/inter prediction stage 402 to produce a residual block (also called a residual).
- the transform stage 404 transforms the residual into transform coefficients in, for example, the frequency domain using block-based transforms.
- block-based transforms include, for example, the Discrete Cosine Transform (DCT) and the Asymmetric Discrete Sine Transform (ADST).
- DCT Discrete Cosine Transform
- ADST Asymmetric Discrete Sine Transform
- Other block-based transforms e.g., identity transform, transpose, rotation, and Karhunen-Loève transform (KLT) are possible. Further, combinations of different transforms may be applied to a single residual.
- the DCT transforms the residual block into the frequency domain where the transform coefficient values are based on spatial frequency.
- DC lowest frequency
- the size of a prediction block, and hence the resulting residual block may be different from the size of the transform block.
- the prediction block may be split into smaller blocks to which separate transforms are applied.
- the quantization stage 406 converts the transform coefficients into discrete quantum values, which are referred to as quantized transform coefficients, using a quantizer value or a quantization level. For example, the transform coefficients may be divided by the quantizer value and truncated.
- the quantized transform coefficients are then entropy encoded by the entropy encoding stage 408 . Entropy coding may be performed using any number of techniques, including token and binary trees.
- the entropy-encoded coefficients, together with other information used to decode the block, which may include for example the type of prediction used, transform type, motion vectors and quantizer value, are then output to the compressed bitstream 420 .
- the information to decode the block may be entropy coded into block, frame, slice and/or section headers within the compressed bitstream 420 .
- the compressed bitstream 420 can also be referred to as an encoded video stream or encoded video bitstream, and the terms will be used interchangeably herein.
- the reconstruction path in FIG. 4 can be used to ensure that both the encoder 400 and a decoder 500 (described below) use the same reference frames and blocks to decode the compressed bitstream 420 .
- the reconstruction path performs functions that are similar to functions that take place during the decoding process that are discussed in more detail below, including dequantizing the quantized transform coefficients at the dequantization stage 410 and inverse transforming the dequantized transform coefficients at the inverse transform stage 412 to produce a derivative residual block (also called a derivative residual).
- the prediction block that was predicted at the intra/inter prediction stage 402 can be added to the derivative residual to create a reconstructed block.
- the loop filtering stage 416 can be applied to the reconstructed block to reduce distortion such as blocking artifacts.
- encoder 400 can be used to encode the compressed bitstream 420 .
- a non-transform based encoder 400 can quantize the residual signal directly without the transform stage 404 for certain blocks or frames.
- an encoder 400 can have the quantization stage 406 and the dequantization stage 410 combined into a single stage.
- FIG. 5 is a block diagram of a decoder 500 according to implementations of this disclosure.
- the decoder 500 can be implemented in the receiving station 106 , for example, by providing a computer software program stored in the memory 204 .
- the computer software program can include machine instructions that, when executed by a processor such as the CPU 202 , cause the receiving station 106 to decode video data in the manner described herein.
- the decoder 500 can also be implemented in hardware included in, for example, the transmitting station 102 or the receiving station 106 .
- the decoder 500 similar to the reconstruction path of the encoder 400 discussed above, includes in one example the following stages to perform various functions to produce an output video stream 516 from the compressed bitstream 420 : an entropy decoding stage 502 , a dequantization stage 504 , an inverse transform stage 506 , an intra/inter-prediction stage 508 , a reconstruction stage 510 , a loop filtering stage 512 and a post-processing stage 514 (e.g., including deblocking filtering).
- Other structural variations of the decoder 500 can be used to decode the compressed bitstream 420 .
- the data elements within the compressed bitstream 420 can be decoded by the entropy decoding stage 502 to produce a set of quantized transform coefficients.
- the dequantization stage 504 dequantizes the quantized transform coefficients (e.g., by multiplying the quantized transform coefficients by the quantizer value), and the inverse transform stage 506 inverse transforms the dequantized transform coefficients using the selected transform type to produce a derivative residual that can be identical to that created by the inverse transform stage 412 in the encoder 400 .
- the decoder 500 can use the intra/inter-prediction stage 508 to create the same prediction block as was created in the encoder 400 , e.g., at the intra/inter prediction stage 402 .
- the prediction block can be added to the derivative residual to create a reconstructed block.
- the loop filtering stage 512 can be applied to the reconstructed block to reduce blocking artifacts. Other filtering can be applied to the reconstructed block.
- the deblocking filtering is applied by the post-processing stage 514 to the reconstructed block to reduce blocking distortion, and the result is output as an output video stream 516 .
- the output video stream 516 can also be referred to as a decoded video stream, and the terms will be used interchangeably herein.
- the decoder 500 can be used to decode the compressed bitstream 420 .
- the decoder 500 can produce the output video stream 516 without the post-processing stage 514 .
- the post-processing stage 514 e.g., including deblocking filtering
- the encoder 400 includes a deblocking filtering stage in addition to the loop filtering stage 416 .
- FIG. 6 is a diagram 600 illustrating quantized transform coefficients in accordance with implementations of this disclosure.
- the diagram 600 depicts a current block 620 , a scan order 602 , a quantized transform block 604 , a non-zero map 606 , an end-of-block map 622 , and a sign map 626 .
- the current block 620 is illustrated as a 4 ⁇ 4 block. However, any block size is possible.
- the current block can have a size (i.e., dimensions) of 4 ⁇ 4, 8 ⁇ 8, 16 ⁇ 16, 32 ⁇ 32, or any other square or rectangular block size.
- the current block 620 can be a block of a current frame.
- the current frame may be partitioned into segments (such as the segments 308 of FIG. 3 ), tiles, or the like, each including a collection of blocks, where the current block is a block of the partition.
- the quantized transform block 604 can be a block of size similar to the size of the current block 620 .
- the quantized transform block 604 includes non-zero coefficients (e.g., a coefficient 608 ) and zero coefficients (e.g., a coefficient 610 ).
- the quantized transform block 604 contains quantized transform coefficients for the residual block corresponding to the current block 620 .
- the quantized transform coefficients are entropy coded by an entropy coding phase, such as the entropy coding stage 408 of FIG. 4 .
- Entropy coding a quantized transform coefficient can involve the selection of a context model (also referred to as probability context model, probability model, and context) which provides estimates of conditional probabilities for coding the binary symbols of a binarized transform coefficient.
- a context model also referred to as probability context model, probability model, and context
- additional information may be used as the context for selecting a context model. For example, the magnitudes of the previously coded transform coefficients can be used, at least partially, for determining a probability model.
- a video coding system may traverse the transform block in a scan order and encode (e.g., entropy encode) the quantized transform coefficients as the quantized transform coefficients are respectively traversed (i.e., visited).
- encode e.g., entropy encode
- the top left corner of the transform block also known as the DC coefficient
- the next coefficient in the scan order i.e., the transform coefficient corresponding to the location labeled “1” is traversed and encoded, and so on.
- some quantized transform coefficients above and to the left of a current quantized transform coefficient are traversed first.
- Other scan orders are possible.
- a one-dimensional structure (e.g., an array) of quantized transform coefficients can result from the traversal of the two-dimensional quantized transform block using the scan order.
- encoding the quantized transform block 604 can include determining the non-zero map 606 , which indicates which quantized transform coefficients of the quantized transform block 604 are zero and which are non-zero.
- a non-zero coefficient and a zero coefficient can be indicated with values one (1) and zero (0), respectively, in the non-zero map.
- the non-zero map 606 includes a non-zero 607 at Cartesian location (0, 0) corresponding to the coefficient 608 and a zero 608 at Cartesian location (2, 0) corresponding to the coefficient 610 .
- the non-zero map may be referred to as the significance map.
- encoding the quantized transform block 604 can include generating the end-of-block map 622 .
- the end-of-block map indicates whether a non-zero quantized transform coefficient of the quantized transform block 604 is the last non-zero coefficient with respect to a given scan order. If a non-zero coefficient is not the last non-zero coefficient in the transform block, then it can be indicated with the binary value 0 (zero) in the end-of-block map. If, on the other hand, a non-zero coefficient is the last non-zero coefficient in the transform block, then it can be indicated with the binary value 1 (one) in the end-of-block map.
- the quantized transform coefficient corresponding to the scan location 11 i.e., the last non-zero quantized transform coefficient 628
- the end-of-block value 624 of 1 one
- all other non-zero transform coefficients are indicated with a zero.
- encoding the quantized transform block 604 can include generating the sign map 626 .
- the sign map 626 indicates which non-zero quantized transform coefficients of the quantized transform block 604 have positive values and which quantized transform coefficients have negative values. Transform coefficients that are zero need not be indicated in the sign map.
- the sign map 626 illustrates the sign map for the quantized transform block 604 . In the sign map, negative quantized transform coefficients can be indicated with a ⁇ 1 and positive quantized transform coefficients can be indicated with a 1.
- FIG. 7A is a block diagram of an encoder 700 that separately encodes quantized coefficients and an intra-prediction mode.
- the encoder 700 can be an example of the encoder 400 of FIG. 4 .
- the encoder 700 does not use information in residual blocks to improve the compression performance of intra-prediction modes.
- the encoder 700 can receive a block 701 of video and produces a bitstream 720 . That is, the encoder 700 receives the block 701 and outputs to the bitstream 720 an encoding for the block 701 .
- the encoder 700 includes a mode decision 702 , an intra prediction 704 , a transform/quantization 708 , an inverse quantization/transform 722 , an entropy encoder 712 , an entropy encoder 716 , and a multiplexer 718 .
- the block 701 can be a block of the input video stream 300 of FIG. 4 .
- the bitstream 720 can be the compressed bitstream 420 of FIG. 4 .
- the mode decision 702 and the intra prediction 704 can be, can be implemented by, or can be implemented similarly to, the intra/inter prediction stage 402 of FIG. 4 .
- the transform/quantization 708 can be, can be implemented by, or can be implemented similarly to, the transform stage 404 and the quantization stage 406 of FIG. 4 .
- the inverse quantization/transform 722 can be, can be implemented by, or can be implemented similarly to, the dequantization stage 410 and the inverse transform stage 412 of FIG. 4 .
- the entropy encoder 712 can be, can be implemented by, or can be implemented similarly to, the entropy encoding stage 408 of FIG. 4 .
- the entropy encoder 712 and the entropy encoder 716 can be the same entropy encoder.
- the entropy encoder 716 can be separate from, but functionally similar to, the entropy encoder 712 .
- An intra-prediction mode 714 for encoding the block 701 can be determined by the mode decision 702 .
- the intra prediction 704 can predict the block 701 using the intra-prediction mode 714 determined by the mode decision 702 .
- the encoder 700 generates a residual block 706 , as described with respect to FIG. 4 .
- the transform/quantization 708 transforms the residual block into a transform block and quantizes the transform block to produce a quantized transform block of quantized transform coefficients 710 .
- the intra-prediction mode 714 is received by the entropy encoder 716 .
- the entropy encoder 716 produces an entropy coded intra-prediction mode.
- the quantized transform coefficients 710 are received by the entropy encoder 712 .
- the entropy encoder 712 produces entropy encoded quantized coefficients.
- the entropy coded intra-prediction mode and the entropy encoded quantized coefficients can be multiplexed (e.g., added) into the bitstream 720 by the multiplexer 718 .
- FIG. 7B is a block diagram of a decoder 750 that separately decodes quantized coefficients and an intra-prediction mode.
- the decoder 750 can be an example of the decoder 500 of FIG. 5 .
- the decoder 750 does not use information in residual blocks (e.g., information in quantized transform blocks) encoded by an encoder to decode intra-prediction modes.
- the decoder 750 can receive a bitstream 720 of video and produces a reconstructed block 764 of video.
- the decoder 750 includes a de-multiplexer 752 , an entropy decoder 756 , an entropy decoder 754 , an inverse quantization/transform 760 , and an intra prediction 768 .
- the bitstream 720 can contain a current block of the input video to be reconstructed (i.e., decoded).
- the bitstream 720 can be the compressed bitstream 420 of FIG. 5 .
- the reconstructed block 764 can be a block of the output video stream 516 of FIG. 5 .
- the entropy decoder 754 can be, can be implemented by, or can be implemented similarly to, the entropy decoding stage 502 of FIG. 54 .
- the entropy decoder 756 and the entropy decoder 754 can be the same entropy decoder.
- the entropy decoder 756 can be separate from, by functionally similar to, the entropy decoder 754 .
- the inverse quantization/transform 760 can be, can be implemented by, or can be implemented similarly to, the dequantization stage 504 and the inverse transform stage 506 of FIG. 5 .
- the intra prediction 768 can be, can be implemented by, or can be implemented similarly to, the intra/inter-prediction stage 508 of FIG. 5 .
- the de-multiplexer 752 receives and extracts from the bitstream 720 the entropy coded intra-prediction mode and the entropy coded quantized transform coefficients.
- the entropy decoder 756 decodes the entropy coded quantized transform coefficients to produce quantized transform coefficients 758 .
- the inverse quantization/transform 760 uses the quantized transform coefficients 758 to produce residual block 762 .
- the entropy decoder 754 decodes an intra-prediction mode 766 from the entropy coded intra-prediction mode.
- the intra-prediction mode 766 can be used by the intra prediction 768 to generate a prediction block.
- the decoder 750 uses the prediction block and the residual block 762 to generate the reconstructed block 764 .
- FIG. 8A is a block diagram of an encoder 800 that uses the intra-prediction mode to encode the quantized coefficients.
- the encoder 800 can be an example of the encoder 400 of FIG. 4 .
- the encoder 800 includes some of the same components as those of the encoder 700 . Descriptions of components of the encoder 800 that are common with the encoder 700 are omitted.
- the encoder 800 includes an entropy encoder 804 in place of the entropy encoder 712 of FIG. 7 .
- the entropy encoder 804 receives, along path 802 , the intra-prediction mode 714 determined by the mode decision 702 .
- the encoder 800 can use the intra-prediction mode. For example, the encoder 800 selects a coding context for encoding the quantized transform coefficients of a transform block based on the intra-prediction mode 714 .
- the encoder 800 may include a number of intra-prediction modes.
- the encoder 800 (and any other encoder according to implementations of this disclosure) can include 35 intra-prediction modes.
- the intra-prediction modes can include a planar intra-prediction mode (also referred to as mode 0), a DC intra-prediction mode (also referred as mode 1), and angular prediction modes (e.g., mode 2 to mode 34).
- the intra-prediction modes can be classified into classes.
- the classes can include: horizontal, vertical, and diagonal or other.
- Horizontal intra-prediction modes are directional prediction modes (e.g., modes 6-14) whose intra-prediction angles are close to the horizontal axis (i.e., are generally horizontal).
- Vertical intra-prediction modes are directional intra-prediction modes (e.g., modes 22-30) whose prediction angles are close to the vertical axis (i.e., are generally vertical).
- Diagonal or other intra-prediction modes are all the remaining directional (which are neither horizontal nor vertical) and non-directional intra-prediction modes.
- the diagonal or other intra-prediction modes are the intra-prediction modes 0-5, 15-21, and 31-34. “Diagonal or other” may be referred to herein, collectively, as “diagonal.”
- m denote the intra-prediction mode 714 used to generate the residual block 706
- c(m) denote the class into which the intra-prediction mode m is classified.
- m can have a value equal to, or corresponding to, one of the intra-prediction modes 0 to 34.
- a classification of “diagonal” includes diagonal and other.
- the encoder 800 can use the classification c(m) to derive one or more context models to be used for encoding the non-zero map, such as the non-zero map 606 of FIG. 6 , in a 4 ⁇ 4 or 8 ⁇ 8 luminance residual block.
- the encoder 800 can use the classification c(m) to determine a scan order to use in encoding (and by a corresponding decoder, such as decoder 850 described below, in decoding) the quantized transform coefficients. For example, the encoder 800 can select a vertical scan order when the classification c(m) is horizontal, can select a horizontal (raster) scan order when the classification c(m) is vertical, and can select a diagonal scan order when the classification c(m) is diagonal.
- FIG. 8B is a block diagram of a decoder 850 that uses the intra-prediction mode to decode the quantized coefficients.
- the decoder 850 uses information in residual blocks (e.g., information in the quantized transform coefficients) encoded by an encoder, such as the encoder 800 of FIG. 8A , to improve the compression performance of the quantized transform coefficients.
- the decoder 850 receives a bitstream 720 of video and produces a reconstructed block 764 of video.
- the decoder 850 includes the de-multiplexer 752 , the entropy decoder 754 , an entropy decoder 855 , the inverse quantization/transform 760 , and the intra prediction 768 .
- the bitstream 720 can contain a current block of the input video to be reconstructed (i.e., decoded).
- the bitstream 720 can be the compressed bitstream 420 of FIG. 5 .
- the reconstructed block 764 can be a block of the output video stream 516 of FIG. 5 .
- the entropy decoder 754 can be, can be implemented by, or can be implemented similarly to, the entropy decoding stage 502 of FIG. 54 .
- the inverse quantization/transform 760 can be, can be implemented by, or can be implemented similarly to, the dequantization stage 504 and the inverse transform stage 506 of FIG. 5 .
- the intra prediction stage 508 can be, can be implemented by, or can be implemented similarly to, the intra/inter-prediction stage 508 of FIG. 5 .
- the de-multiplexer 752 receives the bitstream 720 .
- the de-multiplexer extracts, from the bitstream 720 , the entropy coded intra-prediction mode and the entropy coded quantized transform coefficients.
- the entropy decoder 754 decodes the entropy coded intra-prediction mode to generate the intra-prediction mode 766 .
- the entropy decoder 855 receives the intra-prediction mode 766 , along path 852 , and receives the entropy coded quantized transform coefficients to generate the quantized transform coefficients 758 . That is, the entropy decoder 855 can use the intra-prediction mode to determine a context model for decoding the quantized coefficients of the transform block.
- the inverse quantization/transform 760 uses the quantized transform coefficients 758 to produce residual block 762 .
- the intra-prediction mode 766 can be used by the intra prediction stage 508 to generate a prediction block.
- the decoder 750 uses the prediction block and the residual block 762 to generate the reconstructed block 764 .
- FIG. 9 is a flowchart diagram of a process 900 for coding a current block using an intra-prediction mode according to an implementation of this disclosure.
- coding means encoding, such as by an encoder.
- coding means decoding, such as by a decoder.
- the process 900 can be implemented, for example, as a software program that can be executed by computing devices such as the transmitting station 102 or the receiving station 106 .
- the software program can include machine-readable instructions that can be stored in a memory such as the memory 204 or the secondary storage 214 , and that can be executed by a processor, such as CPU 202 , to cause the computing device to perform the process 900 .
- the process 900 can be implemented using specialized hardware or firmware. Some computing devices can have multiple memories, multiple processors, or both. The steps or operations of the process 900 can be distributed using different processors, memories, or both. Use of the terms “processor” or “memory” in the singular encompasses computing devices that have one processor or one memory as well as devices that have multiple processors or multiple memories that can be used in the performance of some or all of the recited steps.
- the process 900 can be implemented in an encoder such as the encoder 400 of FIG. 4 . In at least some implementations, the process 900 can be performed at least in part by the entropy encoding stage 408 of the encoder 400 of FIG. 4 . When implemented by an encoder, the process 900 can encode the current block using an intra-prediction mode.
- the process 900 can be implemented in a decoder such as the decoder 500 of FIG. 5 . In at least some implementations, the process 900 can be performed at least in part by the entropy decoding stage 502 of the decoder 500 of FIG. 5 . When implemented by a decoder, the process 900 can decode the current block using the intra-prediction mode.
- the process 900 receives a block of quantized transform coefficients.
- the process 900 can receive the block of quantized transform coefficients generated as described above with respect to FIGS. 4 and 7A .
- the process 900 can receive the block of quantized transform coefficients generated by quantization stage 406 .
- the process 900 can receive the block of quantized transform coefficients in an encoded bitstream as described above with respect to FIGS. 5 and 7B .
- the process 900 determines a context for coding the intra-prediction mode using the quantized transform coefficients.
- the process 900 determines the context (i.e., context model) for encoding the intra-prediction mode in the encoded bitstream.
- the process 900 determines the context for decoding the intra-prediction mode from the encoded bitstream.
- Encoding the intra-prediction mode involves binarizing (i.e., converting to a binary code) the magnitude of a value corresponding to the intra-prediction before encoding the binarized value using the context model.
- the context model provides estimates of conditional probabilities for coding the binary symbols of a binarized intra-prediction mode. Improving the coding context can result in using less bits to encode (i.e., entropy encode) the possible values of intra-prediction modes.
- Implementations according to this disclosure leverage principles of information theory to improve the coding of intra-prediction modes.
- X and Y denote two random variables with finite alphabets (i.e., possible values).
- X ) H ( Y )+ H ( X
- H(X) and H(Y) denote the marginal entropy of X and Y, respectively, H(Y
- X)) results in more compression than directly encoding the intra-prediction mode (i.e., H(Y)).
- compression performance can be improved by leveraging the information of the residual block (i.e., X) in coding the intra-prediction mode (i.e., Y).
- the process 900 can leverage the correlation between the residual block and the intra-prediction mode for encoding and decoding the intra-prediction mode.
- the correlation can be expressed as: if the prediction angle is close to the horizontal axis (i.e., is generally horizontal), the non-zero quantized transform coefficients are more likely to appear in the first several columns of the quantized transform block; and if the prediction angle is close to the vertical axis (i.e., is generally vertical), the quantized transform coefficients are more likely to appear in the first several rows of the quantized transform block.
- determining the coding context can include determining a category for the intra-prediction mode using the quantized transform coefficients of the quantized transform block.
- the category can have a value that is selected from a set that includes a first category value and a second category value.
- the set can include other values.
- determining the coding context can be based on a comparison of a first number of non-zero coefficients in a row of the quantized transform block to a second number of non-zero coefficient in a column of the quantized transform block. The determination can be made using a non-zero map, such as the non-zero map 606 of FIG. 6 .
- determining a category for the intra-prediction mode includes determining a difference between a first number of non-zero coefficients in a row of the quantized transform block and a second number of non-zero coefficient in a column of the quantized transform block.
- the row can be a first row (e.g., top-most row) of the quantized transform block and the column can be a first column (e.g., left-most column) of the quantized transform block.
- the first row can include more than the top-most row and the first column can include more than the left-most column.
- the number of rows and columns can depend on the size of the block.
- the first row can include the two top-most rows and the first column can include the two left-most columns
- the first row can include the four top-most rows and the first column can include the four left-most columns.
- Determining the category for the intra-prediction mode can also include, on condition that the difference is greater than a first threshold, setting the category to a first category value and, on condition that the difference is less than a second threshold, setting the category to a second category value. That is, the category can be set to one or a first category value and a second category value based on the comparison. Determining the category for the intra-prediction mode can also include, on condition that the difference is not greater than the first threshold and is not less than the second threshold, setting the category to a third category.
- the first category, the second category, and the third category can indicate, respectively, that the intra-prediction mode is generally horizontal, generally vertical, and neither horizontal nor vertical (i.e., diagonal).
- N is equal to 4 corresponding to the size of the block 604 .
- the number of non-zero quantized transform coefficients in a row i.e., r[i]
- a column i.e., c[i]
- the number of non-zero coefficients can be compared to determine a category t of the intra-prediction mode.
- the category t can have the values 1, 2, and 0 corresponding, respectively, to a horizontal intra-prediction mode, a vertical intra-prediction mode, and neither horizontal nor vertical intra-prediction mode (i.e., diagonal).
- the compression gain of an encoder can be related to the number of possible values of the category t. If the category t can have three (3) values (e.g., 0, 1, 2), then the compression gain in encoding the intra-prediction mode can be log 2 (3) (i.e., 2) bits for each block that is encoded using intra prediction.
- the process 900 can determine the category t using algorithm (2):
- planar intra-prediction mode and the DC intra-prediction mode can be categorized as “diagonal.”
- the intra-prediction mode cannot be determined to be horizontal or vertical.
- the first threshold and/or the second threshold can relate to the size of the block of quantized transform coefficients.
- the first threshold can be set to N/4 and the second threshold can be set to N/4.
- the first threshold and the second threshold can have other values that may, but need not, be related to the quantized transform block size.
- the category of intra-prediction mode cannot be determined to be either horizontal or vertical based on a comparison of the number of non-zero quantized transform coefficients in a first row (e.g., the top-most row) of the quantized transform block to the number of non-zero quantized transform coefficients of a first column (e.g., left most column) of the quantized transform block, then a comparison can be made for additional rows and columns.
- determining the category based on a comparison of a third number of non-zero coefficients in a second row of the quantized transform block to a fourth number of non-zero coefficient in a second column of the quantized transform block.
- the first row and the second row are different rows of the quantized transform block.
- the first column and the second column are different columns of the quantized transform block.
- determining the coding context for the intra-prediction mode can include determining a first coding context using previously coded intra-prediction modes and determining the coding context using the first coding context and the category.
- the first coding context can be a coding context that is derived based on previously decoded intra-prediction modes and/or previously decoded blocks.
- the category t can be used to refine the first coding context to determine the coding contest that can provide better compression than the first coding context. For example, if the first coding context has one value (e.g., an index of a coding context), the category t can be used to split the value into three (e.g., each value corresponding to a possible value of t) different context index values.
- the process 900 can determine a first coding context, intra_mode_ctx, as described with respect to the entropy encoder 716 of FIG. 7A .
- the first coding context, intra_mode_ctx can be selected from a first set of coding contexts for the intra-prediction mode.
- the first coding context intra_mode_ctx can be the index of selected context of the set of coding contexts for the intra-prediction mode.
- the function ⁇ of equation (3) can be a function that maps (intra_mode_ctx, t) into an index in an allowable range of available coding contexts. Any number of mapping functions can be available as long as there exists at least one intra_mode_ctx such that (intra_mode_ctx, t) is mapped to at least two distinct indices. In other words, for the at least one intra_mode_ctx, there exist two values of t, t a and t b , such that t a ⁇ t b and (intra_mode_ctx, t a ) ⁇ (intra_mode_ctx, t b ).
- An example of a mapping function f can be given by equation (4) below.
- NUM_CONTEXTS can be the number of distinct values of intra_mode_ctx (i.e., the number of context models in the set of coding contexts for the intra-prediction mode).
- the process 900 can have available more context models to select the coding context (i.e., new_intra_mode_ctx) than are available for selecting intra_mode_ctx.
- an encoder that implements the process 900 such as the encoder 1000 of FIG. 10 (described below), can have available to an intra-prediction entropy encoder, such as the entropy encoder 1002 , additional coding contexts than the entropy encoder 716 of the encoder 700 of FIG. 7 .
- the coding contexts available to the entropy encoder 1002 of FIG. 10 can include the coding contexts available to the entropy encoder 716 .
- the process 900 codes the intra-prediction mode using the coding context.
- coding the intra-prediction mode using the coding context includes encoding, in an encoded bitstream, the intra-prediction mode using the context.
- coding the intra-prediction mode using the coding context includes decoding, from an encoded bitstream, the intra-prediction mode using the context.
- the process 900 can use a portion of a row and a portion of a column of the quantized transform block to determine the category t.
- the portion can be any contiguous or non-contiguous portion.
- the category t is set to 1 indicating, for example, a generally horizontal intra-prediction mode.
- the category t is set to 2 indicating, for example, a generally vertical intra-prediction mode. Otherwise, the category t is to zero indicating, for example, neither horizontal nor vertical intra-prediction mode.
- the algorithm (6) can be applied to another row and column.
- the process 900 can be applied repeatedly up to a predetermined number of rows and columns until a category of 1 or 2 can be set for the category t. For example, the process 900 can stop after N/2 rows and columns are examined.
- the algorithm (6) can use thresholds other than 0 to determine the category t.
- the third threshold and the fourth threshold can be such that 0 ⁇ fourth threshold ⁇ third threshold.
- the process 900 can determine the category t using the values of the quantized transform coefficients.
- the absolute values of the coefficients can be used. For example, let r[i] denote the sum of the absolute values of the quantized transform coefficients in the i-th row of the quantized transform block and let c[i] denote the sum of the absolute values of the quantized transform coefficients of the transform block in the j-th column.
- the value of category t can be determined using algorithm (8):
- the category t is set to 1 indicating, for example, a generally horizontal intra-prediction mode. If the total sum of the absolute values of the quantized transform coefficients in the first row is greater than twice the total sum of the absolute values of the quantized transform coefficients in the first column, then the category t is set to 2 indicating, for example, a generally vertical intra-prediction mode. Otherwise, the category t is set to 0.
- category t is described as having the values 0, 1, and 2, implementations according to this disclosure are no so limited.
- the category t can have any number of values.
- additional values of the category t can be used to provide additional granularity regarding the angle of the horizontal and vertical intra-prediction modes.
- the process 900 can include determining an intra-prediction mode predictor p using the quantized transform coefficients and encoding whether the intra-prediction mode predictor and the intra prediction mode are the same.
- the intra-prediction mode predictor p inversely predicts the intra-prediction mode based on the distribution of the decoded quantized transform coefficients. If, for example, the decoded non-zero quantized transform coefficients are skewed toward the first several columns of the quantized transform block, then a generally horizontal intra-prediction mode can be selected. If the decoded non-zero quantized transform coefficients are skewed toward the first several rows of the quantized transform block, then a generally vertical intra-prediction mode can be selected.
- the intra-prediction mode predictor p can be determined using a significance map of the quantized transform coefficients.
- the significance map can be as described with respect to the non-zero map 606 of FIG. 6 .
- the intra-prediction mode predictor p can be a function of the absolute values of the quantized transform coefficients or a function of the squared values of the quantized transform coefficients.
- the squared values of the quantized transform coefficients can be indicative of the distribution of energy in the block of quantized transform coefficients.
- the intra-prediction mode predictor p can indicate a generally vertical intra-prediction mode when the energy is concentrated in, e.g., the first several rows of the block of quantized transform coefficients, and can indicate a generally horizontal intra-prediction mode when the energy is concentrated in, e.g., the first several columns of block of quantized transform coefficients.
- the intra-prediction mode predictor p can then be selected according to where the energy is concentrated.
- the process 900 can determine the intra-prediction mode predictor p based on a comparison of a number of non-zero quantized coefficients in rows and columns of the quantized transform block as described above.
- the intra-prediction mode predictor p can be indicative of the prediction angle.
- the intra-prediction mode predictor p can have the value of an intra-prediction mode that is generally horizontal or generally vertical.
- the intra-prediction mode predictor p can have a value corresponding to one of the horizontal intra-prediction modes (e.g., modes 6-14) or one of the vertical intra-prediction modes (e.g., modes 22-30).
- the syntax element can be set another value (e.g., 1), followed by an encoding of the intra-prediction mode, when the intra-prediction mode predictor and the intra prediction mode are not the same.
- the intra prediction mode m can be encoded (and decoded by a decoder such as a decoder 1200 of FIG. 12 ) differentially by, for example, encoding the difference between the intra prediction mode m and the intra-prediction mode predictor p (i.e., m ⁇ p).
- the decoder can determine the category t and the intra prediction mode predictor p from the quantized transform coefficients as described above.
- FIG. 10 is an example of an encoder 1000 according to implementations of this disclosure.
- the encoder 1000 can implement the process 900 and depicts, in more detail, aspects of the encoder 400 of FIG. 4 .
- the encoder 1000 can use information in residual blocks to improve the compression performance of intra-prediction modes.
- the encoder 1000 includes some of the same components as those of the encoder 700 . Descriptions of components of the encoder 1000 that are common with or similar to, the encoder 700 are omitted.
- the encoder 1000 includes the mode decision 702 , the intra prediction 704 , the transform/quantization 708 , the inverse quantization/transform 722 , an entropy encoder 1002 , the entropy encoder 712 , and the multiplexer 718 .
- the encoder 1000 can provide improvements to the encoder 700 of FIG. 7 .
- the encoder 1000 can provide the entropy encoder 1002 , in place of the entropy encoder 716 of the encoder 700 of FIG. 7 , according to implementations of this disclosure.
- the block 701 can be a block of the input video stream 300 of FIG. 4 .
- the bitstream 720 can be the compressed bitstream 420 of FIG. 4 .
- the mode decision 702 and the intra prediction 704 can be, can be implemented by, or can be implemented similarly to, the intra/inter prediction stage 402 of FIG. 4 .
- the transform/quantization 708 can be, can be implemented by, or can be implemented similarly to, the transform stage 404 and the quantization stage 406 of FIG. 4 .
- the inverse quantization/transform 722 can be, can be implemented by, or can be implemented similarly to, the dequantization stage 410 and the inverse transform stage 412 of FIG. 4 .
- the entropy encoder 1002 can be, can be implemented by, or can be implemented similarly to, the entropy encoding stage 408 of FIG. 4 .
- the entropy encoder 1002 and the entropy encoder 712 can be the same entropy encoder.
- the entropy encoder 1002 can be separate from, by functionally similar to, the entropy encoder 712 .
- An intra-prediction mode 714 for encoding the block 701 can be determined by the mode decision 702 .
- the intra prediction 704 can encode the block 701 using the intra-prediction mode 714 determined by the mode decision 702 .
- the encoder 700 generates a residual block 706 , as described with respect to FIG. 4 .
- the transform/quantization 708 transforms the residual block into a transform block and quantizes the transform block to produce a quantized transform block of quantized transform coefficients 710 .
- the entropy encoder 712 produces entropy encoded quantized coefficients.
- the entropy encoder 1002 receives the intra-prediction mode 714 determined by the mode decision 702 and receives, along path 1004 , the quantized transform coefficients 710 .
- the entropy encoder 1002 uses the quantized transform coefficients 710 , as described with respect to FIG. 9 , to encode the intra-prediction mode.
- Encoding the intra-prediction mode can include determining a context model for encoding the intra-prediction mode.
- the entropy encoded intra-prediction mode and the entropy encoded quantized coefficients can be multiplexed (e.g., added) into the bitstream 720 by the multiplexer 718 .
- FIG. 11 is a flowchart diagram of a process 1100 for decoding a current block using an intra-prediction mode according to an implementation of this disclosure.
- the process 1100 can be implemented, for example, as a software program that can be executed by computing devices such as the transmitting station 102 or the receiving station 106 .
- the software program can include machine-readable instructions that can be stored in a memory such as the memory 204 or the secondary storage 214 , and that can be executed by a processor, such as CPU 202 , to cause the computing device to perform the process 1100 .
- the process 1100 can be implemented using specialized hardware or firmware. Some computing devices can have multiple memories, multiple processors, or both. The steps or operations of the process 1100 can be distributed using different processors, memories, or both. Use of the terms “processor” or “memory” in the singular encompasses computing devices that have one processor or one memory as well as devices that have multiple processors or multiple memories that can be used in the performance of some or all of the recited steps.
- the process 1100 can be implemented in a decoder such as the decoder 500 of FIG. 5 .
- the process 1100 can be implemented in an encoder, such as in the reconstruction path of the encoder 400 of FIG. 4 .
- the process 1100 decodes, from an encoded bitstream, quantized transform coefficients of a quantized transform block.
- the process 1100 determines a category for the intra-prediction mode using the quantized transform coefficients.
- the category can be one of horizontal, vertical, and other (i.e., not horizontal or vertical, e.g., diagonal).
- the process 1100 can determine a distribution of the non-zero quantized transform coefficients, as described above with respect to the process 900 , to determine the category of the intra-prediction mode.
- the intra-prediction mode is determined to be likely vertical; if the non-zero coefficients are concentrated in the first several columns (e.g., the first column), then the intra-prediction mode is determined to be likely horizontal. If the non-zero coefficients are not concentrated in rows or columns, then the intra-prediction mode is more likely to be diagonal (e.g., DC, planar, or a diagonal prediction mode). As such, depending on the distribution of the non-zero decoded quantized coefficients, the intra-prediction mode can be classified as described above with respect to the category t (e.g., into one three values).
- decoding the current block using the category includes determining a first context for decoding the intra-prediction mode, determining a second context model using the category and the first context, and decoding the intra-prediction mode using the second context.
- the first context and the second context can be determined as described above with the respect to FIG. 9 .
- the first context can be determined using the intra-prediction modes of previously decoded blocks, the size of the current block, the color component of the current block (e.g., luminance or chrominance), other criteria, or a combination thereof.
- the process 1100 decodes, from the encoded bitstream, the current block using the category.
- the process 1100 can include decoding, from the encoded bitstream, whether an intra-prediction mode predictor is the same as the intra-prediction mode.
- the intra-prediction mode predictor can be a prediction of the intra-prediction mode and is determined by an encoder using the quantized transform coefficients as described with respect to FIG. 9 .
- FIG. 12 is an example of a decoder 1200 according to implementations of this disclosure.
- the decoder 1200 can implement the process 1100 and depicts, in more detail, aspects of the decoder 500 of FIG. 5 .
- the decoder 1200 can also implement the process 900 .
- the decoder 1200 can use quantized transform coefficient information in an encoded bitstream to determine an intra prediction mode for decoding the current block.
- the encoded bitstream can be the bitstream 720 that is received from, generated by, or output by an encoder such as the encoder 1000 of FIG. 10 .
- the decoder 1200 generates the reconstructed block 764 .
- the decoder 1200 includes some of the same components as those of the decoder 750 of FIG. 7B . Descriptions of components of the decoder 1200 that are common with, or similar to those of, the decoder 750 are omitted.
- the decoder 750 includes the de-multiplexer 752 , the entropy decoder 756 , an entropy decoder 1202 , the inverse quantization/transform 760 , and intra prediction 768 .
- the entropy decoder 1202 receives, along path 1204 , the quantized transform coefficients 758 , which are entropy decoded by the entropy decoder 756 .
- the entropy decoder 1202 also receives an entropy encoded intra-prediction mode from the de-multiplexer 752 .
- the entropy decoder 1202 can determine a category for the intra-prediction mode as described with respect to FIG. 1100 .
- the entropy decoder 1202 uses the category of the intra-prediction mode and the quantized transform coefficients 758 to decode the intra-prediction mode.
- FIG. 13 is a flowchart diagram of a process 1300 for reconstructing a current block using an intra-prediction mode according to an implementation of this disclosure.
- the current block can be reconstructed from an encoded bitstream.
- the encoded bitstream can be the bitstream 420 of FIG. 5 .
- the bitstream can be the bitstream received by the reconstruction stage 414 and/or the bitstream of the reconstruction path of FIG. 4 .
- the process 1300 decodes a block of quantized transform coefficients from the encoded bitstream. Decoding the block of quantized transform coefficients can be as described with respect to the process 900 at 902 .
- the process 1300 determines at least one context for the intra-prediction mode using the quantized transform coefficients. Determining the context can be as described above with respect to the process 900 at 904 .
- the encoded bitstream can include more than one intra-prediction modes for the current block. As such, at least one intra-prediction mode can be determined using the quantized transform coefficients.
- the process 1300 decodes the intra-prediction mode from the encoded bitstream using the at least one context.
- the process 1300 reconstructs a residual block using the block of quantized transform coefficients.
- reconstructing the residual block can be as described with respect to the intra prediction 704 of FIG. 10 .
- reconstructing the residual block can be as described with respect to generating of residual block 762 of FIG. 12 .
- the process 1300 reconstructs the current block using the reconstructed residual block and the intra-prediction mode.
- reconstructing the current block can be as described with respect to the reconstruction path of FIG. 4 .
- reconstructing the current block can be as described with respect to generating the reconstructed block 764 of FIG. 12 .
- FIG. 15A is a diagram of an example of a set of scan orders 1500 for a block that are adapted based on data of a first group of elements of the block.
- the numbers shown in the cells of FIG. 15A are scan order sequence numbers for respective elements of the block at the corresponding locations within the block.
- the example set of scan orders 1500 includes four scan orders: zig-zag, horizontal scan order 1510 ; zig-zag, vertical scan order 1520 ; zig-zag, zig-zag scan order 1530 ; and zig-zag, diagonal scan order 1540 .
- FIG. 15A is a diagram of an example of a set of scan orders 1500 for a block that are adapted based on data of a first group of elements of the block.
- the numbers shown in the cells of FIG. 15A are scan order sequence numbers for respective elements of the block at the corresponding locations within the block.
- the example set of scan orders 1500 includes four scan orders: zig-zag, horizontal scan order 1510 ; zig-za
- the block to be coded is partitioned into two groups of elements: a first group that is coded (e.g., encoded or decoded) first using a zig-zag scan order reflected in the scan order sequence numbers 0-6 in the shaded cells of the diagram of FIG. 15A ; and a second group that is coded (e.g., encoded or decoded) next using a scan order that is selected or adapted based on the elements from the first group.
- a horizontal scan order may be selected for the second group, resulting in the zig-zag, horizontal scan order 1510 for the block.
- a vertical scan order may be selected for the second group, resulting in the zig-zag, vertical scan order 1520 for the block.
- a zig-zag scan order may be selected for the second group, resulting in the zig-zag, zig-zag scan order 1530 for the block.
- a diagonal scan order may be selected for the second group, resulting in the zig-zag, diagonal scan order 1540 for the block.
- the first group includes elements of a first row of the block and elements of a first column of the block.
- the second group includes all remaining elements of the block outside of the first group.
- the elements of the block may be quantized transform coefficients.
- the elements of the block may be quantized transform coefficients of a residual block (e.g., a residual block resulting from intra-frame prediction or a residual block resulting from inter-frame prediction).
- FIG. 15B is a diagram of an example of a set of scan orders 1550 for a block that are adapted based on a non-zero map for a first group of elements of the block.
- the numbers shown in the cells of FIG. 15B are binary non-zero map values for respective elements of the block at the corresponding locations within the block.
- the example set of scan orders 1550 includes four scan orders: zig-zag, horizontal scan order 1560 ; zig-zag, vertical scan order 1570 ; zig-zag, zig-zag scan order 1580 ; and zig-zag, diagonal scan order 1590 .
- FIG. 15B is a diagram of an example of a set of scan orders 1550 for a block that are adapted based on a non-zero map for a first group of elements of the block.
- the numbers shown in the cells of FIG. 15B are binary non-zero map values for respective elements of the block at the corresponding locations within the block.
- the example set of scan orders 1550
- the block to be coded is partitioned into two groups of elements: a first group that is coded (e.g., encoded or decoded) first using a zig-zag scan order; and a second group that is coded (e.g., encoded or decoded) next using a scan order that is selected or adapted based on a distribution (e.g., counts in certain portions of the first group) of non-zero elements from the first group.
- the first group includes elements of a first row of the block and elements of a first column of the block.
- the second group includes all remaining elements of the block outside of the first group.
- a horizontal scan order may be selected for the second group, resulting in the zig-zag, horizontal scan order 1560 for the block, where a count of non-zero elements in the second half of the first row is positive and a count of non-zero elements in the second half of the first column is zero.
- a vertical scan order may be selected for the second group, resulting in the zig-zag, vertical scan order 1570 for the block, where a count of non-zero elements in the second half of the first row is zero and a count of non-zero elements in the second half of the first column is positive.
- a zig-zag scan order may be selected for the second group, resulting in the zig-zag, zig-zag scan order 1580 for the block otherwise (e.g., where a count of non-zero elements in the second half of the first row is positive and a count of non-zero elements in the second half of the first column is positive).
- a diagonal scan order may be selected for the second group, resulting in the zig-zag, diagonal scan order 1590 for the block otherwise (e.g., where a count of non-zero elements in the second half of the first row is positive and a count of non-zero elements in the second half of the first column is positive).
- the elements of the block may be quantized transform coefficients.
- the elements of the block may be quantized transform coefficients of a residual block (e.g., a residual block resulting from intra-frame prediction or a residual block resulting from inter-frame prediction).
- an alternating scan order S1 as follows may be used to map a scan position k to a block position (e.g., Cartesian position).
- S 1[ k ] (0, k>> 1) if k is even
- a decision of whether to use the zig-zag scan order for the second block of scan order 1530 or the transposed zig-zag scan order might depend upon the number of the non-zero coefficients in the first row and the first column. If the former is larger, the transposed zig-zag scan order is used for the second group; otherwise the zig-zag, zig-zag scan order 1530 may be used.
- a 225-degree diagonal scan order (downward to the left) may be used for a group of elements from the block instead of the 45-degree diagonal scan order used for the second group in scan order 1540 of FIG. 15A .
- the 225-degree diagonal scan order may be chosen if there are more non-zero coefficients in the first column than in the first row, and otherwise the 45-degree diagonal scan order may be chosen.
- multi-level scan orders may be used.
- each element in FIGS. 15A and 15B may represent a sub-block of quantized transform coefficients, and the scan order may be used to determine the order to code (e.g., encode with an entropy encoder or decode with an entropy decoder) these sub-blocks.
- a zero in FIG. 15B may indicate the corresponding sub-block consists of all zero coefficients, and one may indicate the corresponding sub-block includes at least one non-zero coefficient.
- the scan order within a sub-block may be derived similarly according to the example above.
- the scan order within a sub-block may inherit the scan order determined at the sub-block level for the group including the element representing the sub-block. For example, each sub-block in 1560 may use the horizontal scan order, each sub-block in 1570 may use the vertical scan order, each sub-block in 1580 may use the zig-zag scan order, and each sub-block in 1590 may use the diagonal scan order.
- FIG. 16 is a flowchart of an example of a process 1600 for adapting scan order to encode a block of video data.
- the process 1600 includes partitioning 1610 a block of video data into a plurality of groups of elements; encoding 1620 , using an entropy encoder using a first scan order, elements of a first group from the plurality of groups of elements; selecting 1622 a next group from the plurality of groups; determining 1630 , based on the elements of the prior group(s), a next scan order for the next group; encoding 1640 , using the entropy encoder, using the next scan order, elements of the next group; and continuing (at 1645 ) to process any remaining groups from the plurality of groups until all groups have been encoded 1640 and then outputting 1650 the encoded elements of the block to a bitstream.
- the process 1600 may be implemented by the entropy encoder 712 .
- the process 1600 may be implemented by the transmitting station 102 .
- the process 1600 may be implemented by a computing device, such as the computing device 200 .
- the process 1600 may be implemented by a software program including machine-readable instructions that can be stored in a memory such as the memory 204 or the secondary storage 214 , and that can be executed by a processor, such as CPU 202 , to cause a computing device to perform the process 1600 .
- the process 1600 may be implemented by an encoder such as the encoder 400 of FIG. 4 .
- the process 1600 may be implemented by the entropy encoding stage 408 of the encoder 400 of FIG. 4 .
- the process 1600 includes partitioning 1610 a block of video data into a plurality of groups of elements.
- the groups may be disjoint.
- the block may include a two-dimensional array of elements (e.g., a 4 ⁇ 4, 8 ⁇ 8, 16 ⁇ 16, 32 ⁇ 32, or any other square or rectangular block size).
- a group from the plurality of groups of elements may be continuous or discontinuous within the structure of the block.
- the elements of the block may be pixel values (e.g., luminosity values).
- the elements of the block may be quantized transform coefficients.
- the elements of the block may be quantized transform coefficients of a residual block (e.g., a residual block resulting from intra-frame prediction or a residual block resulting from inter-frame prediction).
- the elements of the block may be based on a result of inter-frame prediction.
- the block may be a residual block resulting from inter-frame prediction.
- the elements of the block may be based on a result of intra-frame prediction.
- the block may be a residual block resulting from intra-frame prediction.
- the plurality of groups includes two groups (e.g., as shown in the examples of FIGS. 15A-B , FIGS. 21A-B , FIG. 22A or FIG. 22B ).
- a first group may include elements of a first row of the block and elements of a first column of the block.
- the first group includes elements forming a triangle in a corner of the block, and wherein the triangle includes elements of a first row of the block and elements of a first column of the block (e.g., as shown in the examples of FIGS. 21A-B , FIG. 22A or FIG. 22B ).
- the first group includes elements of a first row of the block that are outside of the triangle and elements of a first column of the block that are outside of the triangle (e.g., as shown in the examples of FIG. 22A or FIG. 22B ).
- a shape of the first group may be selected based on a size of the block (e.g., as described in relation to Table 2).
- a second group may include elements of a first row and a first column of remaining elements of the block outside of the first group
- a third group may include all remaining elements of the block outside of the union of the first group and the second group.
- the process 1600 includes encoding 1620 , using an entropy encoder using a first scan order, elements of a first group from the plurality of groups of elements.
- the first scan order may be a default or initial scan order that a compatible entropy decoder is configured to use to decode elements of the first group for the block.
- the first scan order may be a zig-zag order (e.g., as shown in FIG. 15A ).
- the entropy encoder may employ entropy encoding techniques such as, for example, variable length coding (VLC), context adaptive binary arithmetic coding (CABAC), or context adaptive (multi-symbol) arithmetic coding.
- VLC variable length coding
- CABAC context adaptive binary arithmetic coding
- multi-symbol multi-symbol
- the process 1600 includes selecting 1622 a next group (e.g., a second group) from the plurality of groups of elements of the block.
- a next group e.g., a second group
- the process 1600 includes determining 1630 , based on the elements of one or more prior groups (e.g., the first group), a next scan order (e.g., a second scan order) for the next group (e.g., the second group) from the plurality of groups of elements.
- the next scan order may be determined 1630 by selecting from among options including horizontal, vertical, diagonal-right, diagonal-left, zig-zag, etc. (e.g., as illustrated in FIG. 15A and FIG. 21A ).
- the next scan order may be determined 1630 based on a distribution of non-zero elements (e.g., quantized transform coefficients of a residual block) within the first group.
- the next scan order may be determined 1630 based on a distribution of non-zero elements within a union of prior groups).
- the process 1800 of FIG. 18A may be implemented to determine 1630 the next scan order.
- the process 1840 of FIG. 18B may be implemented to determine 1630 the next scan order.
- the determined 1630 scan order may increase the probability that non-zero elements will be front loaded within the next group or remaining groups and that a sequence of elements at the end of the resulting scan order for the block will be zeros that may be efficiently encoded, implicitly or explicitly, using the entropy encoder.
- a process similar to the process 2500 of FIG. 25A may be used to determine 1630 the next scan order (e.g., a second scan order).
- determining 1630 the second scan order may include determining a first sum of magnitudes of elements in a portion of the first group below a main diagonal of the block and at or above an anti-diagonal of the block; determining a second sum of magnitudes of elements in a portion of the first group above the main diagonal of the block and at or above the anti-diagonal of the block; and determining the second scan order based on the first sum and the second sum.
- determining 1630 the second scan order may include determining a first count of non-zero elements in a portion of the first group below a main diagonal of the block and at or above an anti-diagonal of the block; determining a second count of non-zero elements in a portion of the first group above the main diagonal of the block and at or above the anti-diagonal of the block; and determining the second scan order based on the first count and the second count.
- the process 1600 includes encoding 1640 , using the entropy encoder using the next scan order (e.g., the second scan order), elements of the next group (e.g., the second group) from the plurality of groups of elements of the block.
- the next scan order may be a horizontal scan order, a vertical scan order, a diagonal-right scan order, a diagonal-left scan order, a zig-zag scan order, etc. (e.g., as shown in FIG. 15A and FIG. 21A ).
- the entropy encoder may employ entropy encoding techniques such as, for example, variable length coding (VLC), context adaptive binary arithmetic coding (CABAC), or context adaptive (multi-symbol) arithmetic coding.
- VLC variable length coding
- CABAC context adaptive binary arithmetic coding
- multi-symbol multi-symetic coding
- the encoded elements of the block are output 1650 to an encoded bitstream.
- the encoded elements may be output from the entropy encoder 712 through the multiplexer 718 to be included in the bitstream 720 that bears a video signal including the block.
- the bitstream may be stored (e.g., in memory or on a disk) or transmitted (e.g., via network communication link).
- encoded elements may be output to an encoded bitstream as they become available.
- the process 1600 adjusts the scan order for the next stage on the fly based on information collected at a current stage. For example, let X denote an N ⁇ M block that has N>0 rows and M>0 columns.
- the process 1600 may be implemented by specialized hardware and/or software that performs operations corresponding to the following pseudocode:
- FIG. 17 is a flowchart of an example of a process 1700 for adapting scan order to decode a block of video data.
- the process 1700 includes partitioning 1710 a block of video data into a plurality of groups of elements; decoding 1720 , using an entropy decoder, data from an encoded bitstream to obtain, using a first scan order, elements of a first group from the plurality of groups of elements; selecting 1722 a next group from the plurality of groups; determining 1730 , based on the elements of the prior group(s), a next scan order for the next group; decoding 1740 , using the entropy decoder, data from the encoded bitstream to obtain, using the next scan order, elements of the next group; and continuing (at 1745 ) to process any remaining groups from the plurality of groups until all groups have been decoded 1740 and then outputting 1750 the decoded elements of the block for processing to generate video.
- the process 1700 may be implemented by the entropy decoder 756 .
- the process 1700 may be implemented by the receiving station 106 .
- the process 1700 may be implemented by a computing device, such as the computing device 200 .
- the process 1700 may be implemented by a software program including machine-readable instructions that can be stored in a memory such as the memory 204 or the secondary storage 214 , and that can be executed by a processor, such as CPU 202 , to cause a computing device to perform the process 1700 .
- the process 1700 may be implemented by a decoder such as the decoder 500 of FIG. 5 .
- the process 1700 may be implemented by the entropy decoding stage 502 of the decoder 500 of FIG. 5 .
- the process 1700 includes partitioning 1710 a block of video data into a plurality of groups of elements.
- the groups may be disjoint.
- the block may include a two-dimensional array of elements (e.g., a 4 ⁇ 4, 8 ⁇ 8, 16 ⁇ 16, 32 ⁇ 32, or any other square or rectangular block size).
- a group from the plurality of groups of elements may be continuous or discontinuous within the structure of the block.
- the elements of the block may be pixel values (e.g., luminosity values).
- the elements of the block may be quantized transform coefficients.
- the elements of the block may be quantized transform coefficients of a residual block (e.g., a residual block resulting from intra-frame prediction or a residual block resulting from inter-frame prediction).
- the elements of the block may be based on a result of inter-frame prediction.
- the block may be a residual block resulting from inter-frame prediction.
- the elements of the block may be based on a result of intra-frame prediction.
- the block may be a residual block resulting from intra-frame prediction.
- the plurality of groups includes two groups (e.g., as shown in the examples of FIGS. 15A-B , FIGS. 21A-B , FIG. 22A or FIG. 22B ).
- a first group may include elements of a first row of the block and elements of a first column of the block.
- the first group includes elements forming a triangle in a corner of the block, and wherein the triangle includes elements of a first row of the block and elements of a first column of the block (e.g., as shown in the examples of FIGS. 21A-B , FIG. 22A or FIG. 22B ).
- the first group includes elements of a first row of the block that are outside of the triangle and elements of a first column of the block that are outside of the triangle (e.g., as shown in the examples of FIG. 22A or FIG. 22B ).
- a shape of the first group may be selected based on a size of the block (e.g., as described in relation to Table 2).
- a second group may include all remaining elements of the block outside of the first group.
- the plurality of groups includes more than two groups of elements.
- a second group may include elements of a first row and a first column of remaining elements of the block outside of the first group, and a third group may include all remaining elements of the block outside of the union of the first group and the second group.
- the process 1700 includes decoding 1720 , using an entropy decoder, data from an encoded bitstream to obtain, using a first scan order, elements of a first group from the plurality of groups of elements.
- the first scan order may be a default or initial scan order that a compatible entropy encoder is configured to use to encode elements of the first group for the block.
- the first scan order may be a zig-zag order (e.g., as shown in FIG. 15A ).
- the entropy decoder may employ entropy decoding techniques such as, for example, variable length coding (VLC), context adaptive binary arithmetic coding (CABAC), or context adaptive (multi-symbol) arithmetic coding.
- VLC variable length coding
- CABAC context adaptive binary arithmetic coding
- multi-symbol multi-symbol
- the process 1700 includes selecting 1722 a next group (e.g., a second group) from the plurality of groups of elements of the block.
- a next group e.g., a second group
- the process 1700 includes determining 1730 , based on the elements of one or more prior groups (e.g., the first group), a next scan order (e.g., a second scan order) for the next group (e.g., the second group) from the plurality of groups of elements.
- the next scan order may be determined 1730 by selecting from among options including horizontal, vertical, diagonal-right, diagonal-left, zig-zag, etc. (e.g., as illustrated in FIG. 15A and FIG. 21A ).
- the next scan order may be determined 1730 based on a distribution of non-zero elements (e.g., quantized transform coefficients of a residual block) within the first group.
- the next scan order may be determined 1730 based on a distribution of non-zero elements within a union of prior groups).
- the process 1800 of FIG. 18A may be implemented to determine 1730 the next scan order.
- the process 1840 of FIG. 18B may be implemented to determine 1730 the next scan order.
- the determined 1730 scan order may increase the probability that non-zero elements will be front loaded within the next group or remaining groups and that a sequence of elements at the end of the resulting scan order for the block will be zeros that may be efficiently decoded, implicitly or explicitly, using the entropy decoder.
- a process similar to the process 2500 of FIG. 25A may be used to determine 1730 the next scan order (e.g., a second scan order).
- determining 1730 the second scan order may include determining a first sum of magnitudes of elements in a portion of the first group below a main diagonal of the block and at or above an anti-diagonal of the block; determining a second sum of magnitudes of elements in a portion of the first group above the main diagonal of the block and at or above the anti-diagonal of the block; and determining the second scan order based on the first sum and the second sum.
- determining 1730 the second scan order may include determining a first count of non-zero elements in a portion of the first group below a main diagonal of the block and at or above an anti-diagonal of the block; determining a second count of non-zero elements in a portion of the first group above the main diagonal of the block and at or above the anti-diagonal of the block; and determining the second scan order based on the first count and the second count.
- the process 1700 includes decoding 1740 , using the entropy decoder, data from the encoded bitstream to obtain, using the next scan order (e.g., the second scan order), elements of next group (e.g., the second group) from the plurality of groups of elements of the block.
- the next scan order may be a horizontal scan order, a vertical scan order, a diagonal-right scan order, a diagonal-left scan order, a zig-zag scan order, etc. (e.g., as shown in FIG. 15A and FIG. 21A ).
- the entropy decoder may employ entropy decoding techniques such as, for example, variable length coding (VLC), context adaptive binary arithmetic coding (CABAC), or context adaptive (multi-symbol) arithmetic coding.
- VLC variable length coding
- CABAC context adaptive binary arithmetic coding
- multi-symbol multi-symetic coding
- the decoded elements of the block are output 1750 for processing to generate video.
- the decoded elements may be output 1750 from the entropy decoder 756 through the inverse quantization/transform 760 and used to generate the reconstructed block 764 that forms part of a video.
- the resulting video may be stored (e.g., in the memory 204 or the secondary storage 214 ), transmitted (e.g., via a network communication link), or displayed (e.g., in a user interface, such as on screen or a projection).
- the process 1700 may include displaying video that is generated based in part on the decoded elements of the block (e.g., where the elements of the block are quantized transform coefficients of a residual block).
- the process 1700 adjusts the scan order for the next stage on the fly based on information collected at a current stage. For example, let X denote an N ⁇ M block that has N>0 rows and M>0 columns.
- the process 1700 may be implemented by specialized hardware and/or software that performs operations corresponding to the following pseudocode:
- FIG. 18A is a flowchart of an example of a process 1800 for determining a scan order for a next group of elements of a block of video data.
- the prior group(s) e.g., the first group
- the prior group(s) of elements which are available in the encoder and decoder for consideration in determining the scan order for the next group of elements, include a first row of the elements in the block and a first column of elements in the block.
- the process 1800 includes determining 1810 a first sum of magnitudes of elements in a portion of the first row of the block; determining 1812 a second sum of magnitudes of elements in a portion of the first column of the block; if (at 1815 ) the first sum is zero and the second sum is positive, determining 1820 the next scan order to be a vertical scan order; if (at 1825 ) the first sum is positive and the second sum is zero, determining 1830 the next scan order to be a horizontal scan order; otherwise, if (at 1825 ) the first sum and the second sum are both positive or both zero, determining 1832 the next scan order to be a default scan order.
- the same process 1800 may be used for determining a next scan order in both an encoder and a compatible decoder.
- the process 1800 may be implemented by the entropy encoder 712 or the entropy decoder 756 .
- the process 1800 may be implemented by the transmitting station 102 or the receiving station 106 .
- the process 1800 may be implemented by a computing device, such as the computing device 200 .
- the process 1800 may be implemented by a software program including machine-readable instructions that can be stored in a memory such as the memory 204 or the secondary storage 214 , and that can be executed by a processor, such as CPU 202 , to cause a computing device to perform the process 1800 .
- the process 1800 may be implemented by a decoder such as the decoder 500 of FIG. 5 .
- the process 1800 may be implemented by an encoder such as the encoder 400 of FIG. 4 .
- the process 1800 may be implemented by the entropy encoding stage 408 of the encoder 400 of FIG. 4 .
- the process 1800 may be implemented by the entropy decoding stage 502 of the decoder 500 of FIG. 5 .
- the process 1800 includes determining 1810 a first sum of magnitudes of elements in a portion of the first row of the block.
- the portion of the first row may be a right half of the first row.
- the portion of the first row may be the whole first row.
- the elements may be constrained to take integer values (e.g., as a result of quantization).
- the magnitude of an element may be the absolute value of the element.
- the magnitude of an element may be represented as the square of the value of the element or another quantity that varies monotonically with the absolute value of the element.
- SR is the first sum
- M is the number of columns in the block (e.g., an N ⁇ M block);
- M may be greater than or equal to two.
- the elements of the block may be quantized transform coefficients of a residual block (e.g., a residual block resulting from intra-frame prediction or a residual block resulting from inter-frame prediction).
- the process 1800 includes determining 1812 a second sum of magnitudes of elements in a portion of the first column of the block.
- the portion of the first column may be a bottom half of the first column.
- the portion of the first row may be the whole first column.
- the elements may be constrained to take integer values (e.g., as a result of quantization).
- the magnitude of an element may be the absolute value of the element.
- the magnitude of an element may be represented as the square of the value of the element or another quantity that varies monotonically with the absolute value of the element.
- (10) where SC is the second sum; N is the number of rows in the block (e.g., an N ⁇ M block); and c[i] is the ith element of the first column of the block for i 0 to N ⁇ 1. N may be greater than or equal to two.
- the process 1800 may include, responsive to the first sum (e.g., SR of equation 9) being zero and the second sum (e.g., SC of equation 10) being positive (at 1815 ), determining 1820 the next scan order (e.g., a second scan order) to be a vertical scan order (e.g., as illustrated by the scan order 1520 of FIG. 15A ).
- the first sum e.g., SR of equation 9
- SC of equation 10 being positive
- the process 1800 may include, responsive to the first sum (e.g., SR of equation 9) being positive and the second sum (e.g., SC of equation 10) being zero (at 1825 ), determining 1830 the next scan order (e.g., the second scan order) to be a horizontal scan order (e.g., as illustrated by the scan order 1510 of FIG. 15A ).
- the first sum e.g., SR of equation 9
- SC of equation 10 being zero
- the process 1800 may include, responsive to the first sum (e.g., SR of equation 9) and the second sum (e.g., SC of equation 10) both being positive or both being zero, determining 1832 the next scan order (e.g., the second scan order) to be a default scan order (e.g., zig-zag, diagonal, etc.).
- the first sum e.g., SR of equation 9
- SC of equation 10 the process 1800 may include, responsive to the first sum (e.g., SC of equation 9) and the second sum (e.g., SC of equation 10) both being positive or both being zero, determining 1832 the next scan order (e.g., the second scan order) to be a default scan order (e.g., zig-zag, diagonal, etc.).
- FIG. 18B is a flowchart of an example of a process 1840 for determining a scan order for a next group of elements of a block of video data.
- the prior group(s) e.g., the first group
- the prior group(s) include a first row of the elements in the block and a first column of elements in the block.
- the process 1840 includes determining 1850 a first count of non-zero elements in a portion of the first row of the block; determining 1852 a second count of non-zero elements in a portion of the first column of the block; if (at 1855 ) the first count is zero and the second count is positive, determining 1860 the next scan order to be a vertical scan order; if (at 1865 ) the first count is positive and the second count is zero, determining 1870 the next scan order to be a horizontal scan order; otherwise, if (at 1865 ) the first count and the second count are both positive or both zero, determining 1872 the next scan order to be a default scan order.
- the same process 1840 may be used for determining a next scan order in both an encoder and a compatible decoder.
- the process 1840 may be implemented by the entropy encoder 712 or the entropy decoder 756 .
- the process 1840 may be implemented by the transmitting station 102 or the receiving station 106 .
- the process 1840 may be implemented by a computing device, such as the computing device 200 .
- the process 1840 may be implemented by a software program including machine-readable instructions that can be stored in a memory such as the memory 204 or the secondary storage 214 , and that can be executed by a processor, such as CPU 202 , to cause a computing device to perform the process 1840 .
- the process 1840 may be implemented by a decoder such as the decoder 500 of FIG. 5 .
- the process 1840 may be implemented by an encoder such as the encoder 400 of FIG. 4 .
- the process 1840 may be implemented by the entropy encoding stage 408 of the encoder 400 of FIG. 4 .
- the process 1840 may be implemented by the entropy decoding stage 502 of the decoder 500 of FIG. 5 .
- the process 1840 includes determining 1850 a first count of non-zero elements in a portion of the first row of the block.
- the portion of the first row may be a right half of the first row.
- the portion of the first row may be the whole first row.
- the first count may be determined 1850 based on a non-zero map (e.g., similar to the non-zero map 606 ) for available group(s) of the block.
- the first count may be determined 1850 as a sum of the binary values from a non-zero map corresponding to the portion of the first row of the block.
- the elements of the block may be quantized transform coefficients of a residual block (e.g., a residual block resulting from intra-frame prediction or
- the process 1840 includes determining 1852 a second count of non-zero elements in a portion of the first column of the block.
- the portion of the first column may be a bottom half of the first column.
- the portion of the first column may be the whole first column.
- the second count may be determined 1852 based on a non-zero map (e.g., similar to the non-zero map 606 ) for available group(s) of the block.
- the second count may be determined 1850 as a sum of the binary values from a non-zero map corresponding to the portion of the first column of the block.
- the elements of the block may be quantized transform coefficients of a residual block (e.g., a residual block resulting from intra-frame prediction or a residual block resulting from inter-frame prediction).
- the process 1840 may include, responsive to the first count (e.g., CR of equation 11) being zero and the second count (e.g., CC of equation 12) being positive (at 1855 ), determining 1860 the next scan order (e.g., a second scan order) to be a vertical scan order (e.g., as illustrated by the scan order 1520 of FIG. 15A ).
- the first count e.g., CR of equation 11
- the second count e.g., CC of equation 12
- the process 1840 may include, responsive to the first count (e.g., CR of equation 11) being positive and the second count (e.g., CC of equation 12) being zero (at 1865 ), determining 1870 the next scan order (e.g., the second scan order) to be a horizontal scan order (e.g., as illustrated by the scan order 1510 of FIG. 15A ).
- the first count e.g., CR of equation 11
- the second count e.g., CC of equation 12
- the process 1840 may include, responsive to the first count (e.g., CR of equation 11) and the second count (e.g., CC of equation 12) both being positive or both being zero, determining 1872 the next scan order (e.g., the second scan order) to be a default scan order (e.g., zig-zag, diagonal, etc.).
- the first count e.g., CR of equation 11
- the second count e.g., CC of equation 12
- the next scan order e.g., the second scan order
- a default scan order e.g., zig-zag, diagonal, etc.
- CR and CC may be further used to determine the direction of the default scan order. For example, if the default scan order is the zig-zag scan order (downward first), then a transposed zig-zag scan order (to the right first) is to be used if CR is greater than CC; otherwise the (downward first) zig-zag scan order is to be used. If the default scan order is the 45-degree diagonal scan order (upward to the right), then the 225-degree diagonal scan order (downward to the left) may be used if CR is greater than CC; otherwise the 45-degree diagonal scan order may be used. SR and SC of equation 9 and equation 10 above may be used to determine the direction of the default scan order in a similar fashion.
- an encoder may manipulate CR and CC so that the desired scan order is chosen. For example, if the horizontal scan order is desired, the encoder can select quantized coefficients in the first row and the first column such that CR is non-zero and CC is zero (or they satisfy appropriate threshold constraints). The selection of quantized coefficients can be based on rate distortion cost. Similarly, the encoder may manipulate SR and SC to make sure the desired scan order is chosen.
- the process 1600 may impact context derivation in coding quantized transform coefficients. For example, depending upon the scan order selected, the available neighboring coefficients available for deriving contexts to code the current coefficient may be different. For example some entropy coding schemes may use two previously coded neighbors to derive a context for coding (encoding and decoding) a current coefficient represented by a token. Suppose that the first group in the process 1600 consists of the first row and the first column of the current block. Then the block positions of the two neighbors used for context derivation in coding a token at block position [r, c] may be given in the table below.
- Neighbors for context derivation in coefficient coding Neighbor A
- Neighbor B [0, 0] N/A N/A [1, 0] [0, 0] N/A [0, 1] [0, 0] [1, 0] [r, 0], r > 1 [r-1, 0] [r-2, 0] [0, c], c > 1 [0, c-1] [0, c-2] [r, c], r > 0, c > 0 [r-1, c] [r, c-1]
- contexts used in coding coefficients in a group other than the first group may depend upon the scan order selected for that group. For example, one context may be used for coding the coefficient at position (r, c), where r>0 and c>0, in the second group of FIG. 15B if the selected scan order for the second group is the horizontal or the vertical scan order and a different context may be used for coding the coefficient at position (r, c) if the selected scan order for the second group is the zig-zag scan order.
- the process 1600 may be used in tandem with processes (e.g., the process 900 ) for encoding an intra-prediction mode for a block using context determined based on elements of the block.
- processes e.g., the process 900
- such a combination of processes e.g., of the process 1600 with the process 900
- FIG. 19 is a flowchart of an example of a process 1900 for adapting scan order to encode a block of video data and encoding an intra-prediction mode for the block using a context selected based on data in the block.
- the process 1900 includes partitioning 1910 a block of video data into a plurality of groups of elements; encoding 1920 , using an entropy encoder using a first scan order, elements of a first group from the plurality of groups of elements; selecting 1922 a next group from the plurality of groups; determining 1930 , based on the elements of the prior group(s), a next scan order for the next group; encoding 1940 , using the entropy encoder, using the next scan order, elements of the next group; and continuing (at 1945 ) to process any remaining groups from the plurality of groups until all groups have been encoded 1940 ; determining 1950 , based on the elements of the block, a category (e.g., horizontal, vertical, or diagonal) for the block; determining 1952 a context
- the process 1900 may be implemented by the entropy encoder 712 .
- the process 1900 may be implemented by the transmitting station 102 .
- the process 1900 may be implemented by a computing device, such as the computing device 200 .
- the process 1900 may be implemented by a software program including machine-readable instructions that can be stored in a memory such as the memory 204 or the secondary storage 214 , and that can be executed by a processor, such as CPU 202 , to cause a computing device to perform the process 1900 .
- the process 1900 may be implemented by an encoder such as the encoder 400 of FIG. 4 .
- the process 1900 may be implemented by the entropy encoding stage 408 of the encoder 400 of FIG. 4 .
- the process 1900 includes partitioning 1910 a block of video data into a plurality of groups of elements.
- the groups may be disjoint.
- the block may include a two-dimensional array of elements (e.g., a 4 ⁇ 4, 8 ⁇ 8, 16 ⁇ 16, 32 ⁇ 32, or any other square or rectangular block size).
- a group from the plurality of groups of elements may be continuous or discontinuous within the structure of the block.
- the elements of the block may be pixel values (e.g., luminosity values).
- the elements of the block may be quantized transform coefficients.
- the elements of the block may be quantized transform coefficients of a residual block (e.g., a residual block resulting from intra-frame prediction or a residual block resulting from inter-frame prediction).
- the elements of the block may be based on a result of inter-frame prediction.
- the block may be a residual block resulting from inter-frame prediction.
- the elements of the block may be based on a result of intra-frame prediction.
- the block may be a residual block resulting from intra-frame prediction.
- the plurality of groups includes two groups (e.g., as shown in the example of FIG. 15A ).
- a first group may include elements of a first row of the block and elements of a first column of the block.
- a second group may include all remaining elements of the block outside of the first group.
- the plurality of groups includes more than two groups of elements.
- a second group may include elements of a first row and a first column of remaining elements of the block outside of the first group
- a third group may include all remaining elements of the block outside of the union of the first group and the second group.
- the process 1900 includes encoding 1920 , using an entropy encoder using a first scan order, elements (e.g., quantized transform coefficients of an intra-prediction residual block) of a first group from the plurality of groups of elements.
- the first scan order may be a default or initial scan order that a compatible entropy decoder is configured to use to decode elements of the first group for the block.
- the first scan order may be a zig-zag order (e.g., as shown in FIG. 15A ).
- the entropy encoder may employ entropy encoding techniques such as, for example, variable length coding (VLC), context adaptive binary arithmetic coding (CABAC), or context adaptive (multi-symbol) arithmetic coding.
- VLC variable length coding
- CABAC context adaptive binary arithmetic coding
- multi-symbol multi-symbol
- the process 1900 includes selecting 1922 a next group (e.g., a second group) from the plurality of groups of elements of the block.
- a next group e.g., a second group
- the next group may be selected 1922 by incrementing a group index.
- the process 1900 includes determining 1930 , based on the elements of one or more prior groups (e.g., the first group), a next scan order (e.g., a second scan order) for the next group (e.g., the second group) from the plurality of groups of elements.
- the next scan order may be determined 1930 by selecting from among options including horizontal, vertical, diagonal, zig-zag, etc. (e.g., as illustrated in FIG. 15A ).
- the next scan order may be determined 1930 based on a distribution of non-zero elements (e.g., quantized transform coefficients of an intra-prediction residual block) within the first group.
- the next scan order may be determined 1930 based on a distribution of non-zero elements within a union of prior groups).
- the process 1800 of FIG. 18A may be implemented to determine 1930 the next scan order.
- the process 1840 of FIG. 18B may be implemented to determine 1930 the next scan order.
- the determined 1930 scan order may increase the probability that non-zero elements will be front loaded within the next group or remaining groups and that a sequence of elements at the end of the resulting scan order for the block will be zeros that may be efficiently encoded, implicitly or explicitly, using the entropy encoder.
- the process 1900 includes encoding 1940 , using the entropy encoder using the next scan order (e.g., the second scan order), elements of the next group (e.g., the second group) from the plurality of groups of elements of the block.
- the next scan order may be a horizontal scan order, a vertical scan order, a zig-zag scan order, etc. (e.g., as shown in FIG. 15A ).
- the entropy encoder may employ entropy encoding techniques such as, for example, variable length coding (VLC), context adaptive binary arithmetic coding (CABAC), or context adaptive (multi-symbol) arithmetic coding.
- VLC variable length coding
- CABAC context adaptive binary arithmetic coding
- multi-symbol multi-symbol
- a category for the block is determined 1950 based on the elements (e.g., quantized transform coefficients of an intra-prediction residual block) of the block.
- the category may be determined as one of horizontal, vertical, and other (i.e., not horizontal or vertical, e.g., diagonal).
- the category may indicate a directional pattern in a distribution of non-zero elements within the block, which may be related to an intra-prediction mode that was used to generate the block.
- the category may be determined 1950 based on a first count of non-zero elements in a first portion of the block (e.g., a right half of the block) and based on a second count of non-zero elements in a second portion of the block (e.g., a bottom half of the block). For example, if the first count is zero and the second count is positive, the category may be determined 1950 to be vertical. For example, if the first count is positive and the second count is zero, the category may be determined 1950 to be horizontal. For example, if the first count and the second count are both zero or both positive, the category may be determined 1950 to be diagonal. In some implementations, the category may be determined 1950 based on elements in the first group of elements of the block.
- the category may be determined 1950 to be vertical when CR of equation 11 is zero and CC of equation 12 is positive.
- the category may be determined 1950 to be horizontal when CR of equation 11 is positive and CC of equation 12 is zero.
- the category may be determined 1950 to be diagonal when CR of equation 11 and CC of equation 12 are both zero or both positive.
- the category (t) may be determined using the algorithm (2) described in relation to FIG. 9 .
- the category (t) may be determined using the algorithm (6) described in relation to FIG. 9 .
- the category (t) may be determined using the algorithm (7) described in relation to FIG. 9 .
- the category (t) may be determined using the algorithm (8) described in relation to FIG. 9 .
- the process 1900 includes determining 1952 a context based on the category. Because patterns in the distribution of non-zero elements of the block may be correlated with an intra-prediction mode that was used to generate the block, the category may be used to select a more useful context for the intra-prediction mode, which may improve coding efficiency for encoding the intra-prediction mode.
- the context may be determined 1952 as described with respect to operation 904 of FIG. 9 .
- the context may be determined 1952 using the equation (3) described in relation to FIG. 9 .
- the context may be determined 1952 using the equation (4) described in relation to FIG. 9 .
- the context may be determined 1952 using the equation (5) described in relation to FIG. 9 .
- the process 1900 includes encoding 1954 , using an entropy decoder with the context, an intra-prediction mode for the block.
- the intra-prediction mode may be encoded 1954 as described in relation to operation 906 of FIG. 9 .
- the process 1900 includes outputting 1960 the encoded elements of the block and the encoded intra-prediction mode for the block to an encoded bitstream.
- the encoded elements may be output 1960 from the entropy encoder 712 through the multiplexer 718 to be included in the bitstream 720 that bears a video signal including the block.
- the encoded intra-prediction mode may be output 1960 from the entropy encoder 716 through the multiplexer 718 to be included in the bitstream 720 that bears a video signal including the block.
- the bitstream may be stored (e.g., in memory or on a disk) or transmitted (e.g., via network communication link).
- encoded elements may be output to an encoded bitstream as they become available.
- the process 1900 may be implemented by specialized hardware and/or software that performs operations corresponding to the following pseudocode (which uses the definitions provided in relation to equation 11 and equation 12 above):
- the process 1700 may be used in tandem with techniques (e.g., the process 1100 ) for decoding an intra-prediction mode for a block using context determined based on elements of the block.
- techniques e.g., the process 1100
- such a combination of techniques e.g., of the process 1700 with the process 1100
- FIG. 20 is a flowchart of an example of a process 2000 for adapting scan order to decode a block of video data and decoding an intra-prediction mode for the block using a context selected based on data in the block.
- the process 2000 includes partitioning 2010 a block of video data into a plurality of groups of elements; decoding 2020 , using an entropy decoder, data from an encoded bitstream to obtain, using a first scan order, elements of a first group from the plurality of groups of elements; selecting 2022 a next group from the plurality of groups; determining 2030 , based on the elements of the prior group(s), a next scan order for the next group; decoding 2040 , using the entropy decoder, data from the encoded bitstream to obtain, using the next scan order, elements of the next group; and continuing (at 2045 ) to process any remaining groups from the plurality of groups until all groups of elements of the block have been decoded 2040 ; determining 2050 , based on the de
- the process 2000 may be implemented by the entropy decoder 756 .
- the process 2000 may be implemented by the receiving station 106 .
- the process 2000 may be implemented by a computing device, such as the computing device 200 .
- the process 2000 may be implemented by a software program including machine-readable instructions that can be stored in a memory such as the memory 204 or the secondary storage 214 , and that can be executed by a processor, such as CPU 202 , to cause a computing device to perform the process 2000 .
- the process 2000 may be implemented by a decoder such as the decoder 500 of FIG. 5 .
- the process 2000 may be implemented by the entropy decoding stage 502 of the decoder 500 of FIG. 5 .
- the process 2000 includes partitioning 2010 a block of video data into a plurality of groups of elements.
- the groups may be disjoint.
- the block may include a two-dimensional array of elements (e.g., a 4 ⁇ 4, 8 ⁇ 8, 16 ⁇ 16, 32 ⁇ 32, or any other square or rectangular block size).
- a group from the plurality of groups of elements may be continuous or discontinuous within the structure of the block.
- the elements of the block may be pixel values (e.g., luminosity values).
- the elements of the block may be quantized transform coefficients.
- the elements of the block may be quantized transform coefficients of a residual block (e.g., a residual block resulting from intra-frame prediction or a residual block resulting from inter-frame prediction).
- the elements of the block may be based on a result of inter-frame prediction.
- the block may be a residual block resulting from inter-frame prediction.
- the elements of the block may be based on a result of intra-frame prediction.
- the block may be a residual block resulting from intra-frame prediction.
- the plurality of groups includes two groups (e.g., as shown in the example of FIG. 15A ).
- a first group may include elements of a first row of the block and elements of a first column of the block.
- a second group may include all remaining elements of the block outside of the first group.
- the plurality of groups includes more than two groups of elements.
- a second group may include elements of a first row and a first column of remaining elements of the block outside of the first group
- a third group may include all remaining elements of the block outside of the union of the first group and the second group.
- the process 2000 includes decoding 2020 , using an entropy decoder, data from an encoded bitstream to obtain, using a first scan order, elements of a first group from the plurality of groups of elements.
- the first scan order may be a default or initial scan order that a compatible entropy encoder is configured to use to encode elements of the first group for the block.
- the first scan order may be a zig-zag order (e.g., as shown in FIG. 15A ).
- the entropy decoder may employ entropy decoding techniques such as, for example, variable length coding (VLC), context adaptive binary arithmetic coding (CABAC), or context adaptive (multi-symbol) arithmetic coding.
- VLC variable length coding
- CABAC context adaptive binary arithmetic coding
- multi-symbol multi-symbol
- the process 2000 includes selecting 2022 a next group (e.g., a second group) from the plurality of groups of elements of the block.
- a next group e.g., a second group
- the next group may be selected 2022 by incrementing a group index.
- the process 2000 includes determining 2030 , based on the elements of one or more prior groups (e.g., the first group), a next scan order (e.g., a second scan order) for the next group (e.g., the second group) from the plurality of groups of elements.
- the next scan order may be determined 2030 by selecting from among options including horizontal, vertical, diagonal, zig-zag, etc. (e.g., as illustrated in FIG. 15A ).
- the next scan order may be determined 2030 based on a distribution of non-zero elements (e.g., quantized transform coefficients) within the first group.
- the next scan order may be determined 2030 based on a distribution of non-zero elements within a union of prior groups).
- the process 1800 of FIG. 18A may be implemented to determine 2030 the next scan order.
- the process 1840 of FIG. 18B may be implemented to determine 2030 the next scan order.
- the determined 2030 scan order may increase the probability that non-zero elements will be front loaded within the next group or remaining groups and that a sequence of elements at the end of the resulting scan order for the block will be zeros that may be efficiently decoded, implicitly or explicitly, using the entropy decoder.
- the process 2000 includes decoding 2040 , using the entropy decoder, data from the encoded bitstream to obtain, using the next scan order (e.g., the second scan order), elements of next group (e.g., the second group) from the plurality of groups of elements of the block.
- the next scan order may be a horizontal scan order, a vertical scan order, a zig-zag scan order, etc. (e.g., as shown in FIG. 15A ).
- the entropy decoder may employ entropy decoding techniques such as, for example, variable length coding (VLC), context adaptive binary arithmetic coding (CABAC), or context adaptive (multi-symbol) arithmetic coding.
- VLC variable length coding
- CABAC context adaptive binary arithmetic coding
- multi-symbol multi-symbol
- a category for the block is determined 2050 based on the decoded elements (e.g., quantized transform coefficients of an intra-prediction residual block) of the block.
- the category may be determined as one of horizontal, vertical, and other (i.e., not horizontal or vertical, e.g., diagonal).
- the category may indicate a directional pattern in a distribution of non-zero elements within the block, which may be related to an intra-prediction mode that was used to generate the block.
- the category may be determined 2050 based on a first count of non-zero elements in a first portion of the block (e.g., a right half of the block) and based on a second count of non-zero elements in a second portion of the block (e.g., a bottom half of the block). For example, if the first count is zero and the second count is positive, the category may be determined 2050 to be vertical. For example, if the first count is positive and the second count is zero, the category may be determined 2050 to be horizontal. For example, if the first count and the second count are both zero or both positive, the category may be determined 2050 to be diagonal.
- the category may be determined 2050 based on elements in the first group of elements of the block. For example, the category may be determined 2050 to be vertical when CR of equation 11 is zero and CC of equation 12 is positive. For example, the category may be determined 2050 to be horizontal when CR of equation 11 is positive and CC of equation 12 is zero. For example, the category may be determined 2050 to be diagonal when CR of equation 11 and CC of equation 12 are both zero or both positive.
- the category (t) may be determined using the algorithm (2) described in relation to FIG. 9 . In some implementations, the category (t) may be determined using the algorithm (6) described in relation to FIG. 9 . In some implementations, the category (t) may be determined using the algorithm (7) described in relation to FIG. 9 . In some implementations, the category (t) may be determined using the algorithm (8) described in relation to FIG. 9 .
- the process 2000 includes determining 2052 a context based on the category. Because patterns in the distribution of non-zero elements of the block may be correlated with an intra-prediction mode that was used to generate the block, the category may be used to select a more useful context for the intra-prediction mode, which may improve coding efficiency for decoding the intra-prediction mode.
- the context may be determined 2052 as described with respect to operation 904 of FIG. 9 .
- the context may be determined 2052 using the equation (3) described in relation to FIG. 9 .
- the context may be determined 2052 using the equation (4) described in relation to FIG. 9 .
- the context may be determined 2052 using the equation (5) described in relation to FIG. 9 .
- the process 2000 includes decoding 2054 , using an entropy decoder with the context, data from the encoded bitstream to obtain an intra-prediction mode for the block.
- the intra-prediction mode may be decoded 2054 as described in relation to operation 1106 of FIG. 11 .
- the process 2000 includes outputting 2060 the decoded elements of the block and the decoded intra-prediction mode for the block for processing to generate video.
- the decoded elements may be output 2060 from the entropy decoder 756 through the inverse quantization/transform 760 and used to generate the reconstructed block 764 that forms part of a video.
- the decoded intra-prediction mode may be output 2060 from the entropy decoder 754 to the intra prediction 768 and used to generate the reconstructed block 764 that forms part of a video.
- the resulting video may be stored (e.g., in memory or on a disk), transmitted (e.g., via network communication link), or displayed (e.g., in a user interface, such as on screen or a projection).
- the process 2000 may include displaying video that is generated based in part on the decoded elements of the block (e.g., where the elements of the block are quantized transform coefficients of a residual block) and based in part on the decoded intra-prediction mode.
- the process 2000 may be implemented by specialized hardware and/or software that performs operations corresponding to the following pseudocode (which uses the definitions provided in relation to equation 11 and equation 12 above):
- a category for a block may be used to encode and decode an intra-prediction mode m in a variety of ways, such as, deriving the context used to encode and decode the intra-prediction mode m, and/or deriving a predictor for the intra-prediction mode m (e.g., as described with respect to the intra-prediction mode predictor p of FIG. 9 ).
- an intra-prediction mode m may be differentially encoded and decoded using a prediction of m that is determined based on a category for the block.
- FIGS. 15A-B may be modified using a smaller first group of elements with a different shape, which may include elements that are less likely to be zero (e.g., the element in the second row and second column may be likely to be non-zero where it is a low frequency transform coefficient). Adjusting a first group to be smaller and more likely to include all non-zero values of the block may improve coding efficiency.
- FIG. 21A is a diagram of an example of a set of scan orders 2100 for a block that are adapted based on data of a first group of elements of the block. The numbers shown in the cells of FIG. 21A are scan order sequence numbers for respective elements of the block at the corresponding locations within the block.
- the example set of scan orders 2100 includes four scan orders: alternating diagonal, horizontal scan order 2110 ; alternating diagonal, vertical scan order 2120 ; alternating diagonal, diagonal-right scan order 2130 ; and alternating diagonal, diagonal-left scan order 2140 .
- the block to be coded is partitioned into two groups of elements: a first group that is coded (e.g., encoded or decoded) first using an alternating diagonal scan order reflected in the scan order sequence numbers 0-5 in the shaded cells of the diagram of FIG. 21A ; and a second group that is coded (e.g., encoded or decoded) next using a scan order that is selected or adapted based on the elements from the first group.
- a horizontal scan order may be selected for the second group, resulting in the alternating diagonal, horizontal scan order 2110 for the block.
- a vertical scan order may be selected for the second group, resulting in the alternating diagonal, vertical scan order 2120 for the block.
- a diagonal-right scan order may be selected for the second group, resulting in the alternating diagonal, diagonal-right scan order 2130 for the block.
- a diagonal-left scan order may be selected for the second group, resulting in the alternating diagonal, diagonal-left scan order 2140 for the block.
- the first group includes elements forming a triangle in a corner of the block, and wherein the triangle includes elements of a first row of the block and elements of a first column of the block.
- the second group includes all remaining elements of the block outside of the first group.
- the elements of the block may be quantized transform coefficients.
- the elements of the block may be quantized transform coefficients of a residual block (e.g., a residual block resulting from intra-frame prediction or a residual block resulting from inter-frame prediction).
- FIG. 21B is a diagram of an example of a set of scan orders 2150 for a block that are adapted based on magnitudes for a first group of elements of the block.
- the numbers shown in the cells of FIG. 21B are magnitudes of values for respective elements of the block at the corresponding locations within the block.
- the example set of scan orders 2150 includes four scan orders: alternating diagonal, horizontal scan order 2160 ; alternating diagonal, vertical scan order 2170 ; alternating diagonal, diagonal-right scan order 2180 ; and alternating diagonal, diagonal-left scan order 2190 .
- FIG. 21B is a diagram of an example of a set of scan orders 2150 for a block that are adapted based on magnitudes for a first group of elements of the block.
- the numbers shown in the cells of FIG. 21B are magnitudes of values for respective elements of the block at the corresponding locations within the block.
- the example set of scan orders 2150 includes four scan orders: alternating diagonal, horizontal scan order 2160 ; alternating diagonal, vertical scan order 21
- the block to be coded is partitioned into two groups of elements: a first group that is coded (e.g., encoded or decoded) first using an alternating diagonal scan order; and a second group that is coded (e.g., encoded or decoded) next using a scan order that is selected or adapted based on a distribution (e.g., sums of magnitudes in certain portions of the first group) of non-zero elements from the first group.
- the first group includes elements forming a triangle in a corner of the block, and wherein the triangle includes elements of a first row of the block and elements of a first column of the block.
- the second group includes all remaining elements of the block outside of the first group.
- a horizontal scan order may be selected for the second group, resulting in the alternating diagonal, horizontal scan order 2160 for the block, where a sum of magnitudes of elements in a portion of the first row is positive and a sum of magnitudes of elements in a portion of the first column is zero.
- a vertical scan order may be selected for the second group, resulting in the alternating diagonal, vertical scan order 2170 for the block, where a sum of magnitudes of elements in a portion of the first row is zero.
- a diagonal-left scan order may be selected for the second group, resulting in the alternating diagonal, diagonal-left scan order 2190 for the block, where a sum of magnitudes of elements in a portion of the first row is greater than a sum of magnitudes of elements in a portion of the first column and both sums are positive.
- a diagonal-right scan order may be selected for the second group, resulting in the alternating diagonal, diagonal-right scan order 2180 for the block otherwise (e.g., where both sums are positive and the row sum is less than or equal to the column sum).
- the elements of the block may be quantized transform coefficients.
- the elements of the block may be quantized transform coefficients of a residual block (e.g., a residual block resulting from intra-frame prediction or a residual block resulting from inter-frame prediction).
- r[i] above indicates whether the i-th coefficient in the first row is non-zero or not
- c[j] above indicates whether the j-th coefficient in the first column is non-zero or not
- i, j 0, . . . , N ⁇ 1.
- the scheme of FIGS. 21A-B defines a smaller first group of elements and thus has the potential to leverage a better scan order in a larger second group of elements to improve coding efficiency.
- cSum and rSum may be computed by using coefficient values at positions beyond the first row and the first column. For example, let u[i,j] denote the absolute value or magnitude of the coefficient at block position [i, j] (i-th row and j-th column). Then cSum and rSum may be computed as follows in Equation (13) below. Let K ⁇ 2N be a non-negative constant that is known to the encoder and the decoder.
- the size and shape of the first group of elements of a block may be selected based on the size of the block of image data to implement a size dependent partition of the block.
- the number of boundary pixels in an N ⁇ N block of image data e.g., transform coefficients
- the first group of elements uses a fixed scan order and the second group potentially benefits from a scan order learned from the first group
- coding efficiency might be improved by making the partition of a block into two groups of elements dependent upon the block size and possibly other information like a transform type (e.g., Discrete Cosine Transform, Discrete Fourier Transform, identity, etc.).
- the first group may consist of a fixed size of upper-left triangle plus an additional segment of the first row and an additional segment of the first column.
- FIGS. 22A-B show two examples of combining the two algorithms for an 8 ⁇ 8 transform, where the size of the first group of elements in FIG. 22A is 12 and the size of the first group of elements in FIG. 22B is 14, both are smaller than the first group of elements that would be used by the scheme of 21 A-B or the scheme of 15 A-B.
- FIG. 22A is a diagram of an example of a scan order 2200 for a first group of elements of a block of image data.
- the elements of the first group appear in shaded cells and are labeled with are scan order sequence numbers for respective elements of the block at the corresponding locations within the block.
- the scan order 2200 includes an alternating diagonal scan order for the first group of elements of the block.
- the first group of elements for the scan order 2200 includes elements forming a triangle in a corner of the block, and wherein the triangle includes elements of a first row of the block and elements of a first column of the block (e.g., the elements labeled 0-5 in the scan order 2200 ).
- the first group of elements for the scan order 2200 also includes elements of a first row of the block that are outside of the triangle and elements of a first column of the block that are outside of the triangle (e.g., the elements labeled 6-11 in the scan order 2200 ).
- a second group of elements of the block may include all remaining elements of the block outside of the first group.
- FIG. 22B is a diagram of an example of a scan order 2250 for a first group of elements of a block of image data.
- the elements of the first group appear in shaded cells and are labeled with are scan order sequence numbers for respective elements of the block at the corresponding locations within the block.
- the scan order 2250 includes an alternating diagonal scan order for the first group of elements of the block.
- the first group of elements for the scan order 2250 includes elements forming a triangle in a corner of the block, and wherein the triangle includes elements of a first row of the block and elements of a first column of the block (e.g., the elements labeled 0-9 in the scan order 2250 ).
- the first group of elements for the scan order 2250 also includes elements of a first row of the block that are outside of the triangle and elements of a first column of the block that are outside of the triangle (e.g., the elements labeled 10-13 in the scan order 2200 ).
- a second group of elements of the block may include all remaining elements of the block outside of the first group.
- the scan order for the second group of elements is inferred from the elements (e.g., transform coefficients) decoded in the first group.
- the inferred scan order may work well for the second group in many cases, there might still be cases where the inferred scan order is not the best scan order among a given set of available scan orders, i.e., another scan order might provide better compression performance (e.g., coding efficiency) for a given block of image data.
- some implementations may code and send (e.g., in a bitstream) the scan order for the second group of elements, and use the first group of elements to determine a scan order predictor and the context used in coding the this scan order for the second group.
- encoding and decoding s as a symbol in ⁇ 0,1,2,3 ⁇ t ⁇ may further use t to determine a context.
- t itself may be used as the context.
- the predictive coding of the second scan order described above can be integrated with the process 1600 of FIG. 16 and the process 1700 of FIG. 17 .
- the process 1600 of FIG. 16 may be modified to include determining a scan order prediction based on the elements of the first group; and encoding, using the entropy encoder, a scan order adjustment parameter that is based on the second scan order and the scan order prediction.
- This scan order adjustment parameter may be output as part of the bitstream.
- determining 1730 based on the elements of the first group, the second scan order for the second group from the plurality of groups of elements includes determining a scan order prediction based on the elements of the first group; decoding, using the entropy decoder, data from the encoded bitstream to obtain a scan order adjustment parameter; and determining the second scan order based on the scan order prediction and the scan order adjustment parameter.
- a signaling scheme may be used to instruct the decoder to enable or disable scan order adaptation.
- a signaling scheme involves coding and sending a binary flag to the decoder. For example, suppose that the flag is named EnableScanOrderSelection. Then the scan order selection is enabled if EnableScanOrderSelection is set (i.e. equal to 1) and the scan order selection is disable if the flag is cleared (i.e. equal to 0).
- Coding EnableScanOrderSelection adds additional bits to the coded bitstream and impacts compression performance.
- the processes described herein may be modified to embed signaling indicating whether scan order adaptation (e.g., as described in relation to FIGS. 15A-B , FIGS. 21A-B , or combinations of these schemes) is enabled or not.
- scan order adaptation e.g., as described in relation to FIGS. 15A-B , FIGS. 21A-B , or combinations of these schemes
- absSum denote the sum of absolute values of all quantized coefficients (available to both the encoder and the decoder) in the first group of elements of a block of image data. Then the parity of absSum may be used to signal whether scan order adaptation is enabled for the second group of elements of the block.
- the scan order for the second group is determined as described in relation to FIGS. 21A-B ; otherwise (i.e., if absSum is less than the threshold or if absSum is odd) the scan order for the second group is a default scan order (e.g., diagonal-right or zig-zag).
- a threshold e.g. 2, 2
- absSum is even
- the scan order for the second group is a default scan order (e.g., diagonal-right or zig-zag).
- scan order adaptation is enabled or disabled is inferred from the values of the first group of elements (e.g., transform coefficients), and does not require additional bits in the coded bitstream.
- the first group of elements e.g., transform coefficients
- such information may be regarded as being embedded in the coefficients at the possible cost of increased distortion.
- the embedded coding to enable adaptation of the second scan order described above can be integrated with the process 1600 of FIG. 16 and the process 1700 of FIG. 17 .
- the process 1600 of FIG. 16 may be modified to include determining a sum of magnitudes of all the elements of the first group; checking a parity of the sum; and adjusting an element of the first group to change the parity of the sum to signal that use of the second scan order is enabled.
- the process 1700 of FIG. 17 may be modified to include determining a sum of magnitudes of all the elements of the first group; checking a parity of the sum; and enabling use of the second scan order based on the parity of the sum.
- the parity of absSum may be used to signal the scan order directly. For example, if absSum is even, the scan order for the second group is a default scan order (e.g., diagonal-right or zig-zag); and if absSum is odd, the scan order is an alternate scan order (e.g. diagonal-left, horizontal, or vertical).
- scan order inference based on absSum may be disabled if absSum is less than a prescribed a threshold and/or the number of nonzero coefficients in the first group of elements of a block of image data is less than a threshold.
- block positions may be used in band derivation operations.
- Coding efficiency for a block of image data may be improved by adapting context based on elements in a first group or subset of the block.
- Non-zero quantized transform e.g., Discrete Cosine Transform
- Discrete Cosine Transform coefficients typically concentrate in the top left corner around the DC position.
- the exact locations of these non-zero coefficients are entropy coded and sent to the decoder. It may nevertheless be possible to shed light on where these non-zero coefficients will likely appear in a transform block if some values in the transformed block are already decoded and known, and leverage such knowledge to improve coding efficiency.
- a context model is designed to adapt based on a subset of decoded coefficients in the block (e.g., block of quantized transform coefficients).
- This adaptive context model design may a refinement of a current context model (e.g. an AV1 or VP9 context model for coefficient coding).
- FIG. 23 is a flowchart of an example of a process 2300 for adapting context to encode a block of video data.
- the process 2300 includes partitioning 2310 a block of video data into a plurality of groups of elements; encoding 2320 , using an entropy encoder, elements of a first group from the plurality of groups of elements; selecting 2322 a next group from the plurality of groups; determining 2330 a category based on the elements of the prior group(s); based on the category, selecting 2332 one or more contexts for elements from a next group from the plurality of groups of elements; encoding 2340 , using the entropy encoder using the context(s), the elements of the next group from the plurality of groups of elements; and continuing (at 2345 ) to process any remaining groups from the plurality of groups until all groups have been encoded 2340 and then outputting 2350 the encoded elements of the block to a bitstream.
- the process 2300 may be implemented by the entropy encoder 712 .
- the process 2300 may be implemented by the transmitting station 102 .
- the process 2300 may be implemented by a computing device, such as the computing device 200 .
- the process 2300 may be implemented by a software program including machine-readable instructions that can be stored in a memory such as the memory 204 or the secondary storage 214 , and that can be executed by a processor, such as CPU 202 , to cause a computing device to perform the process 2300 .
- the process 2300 may be implemented by an encoder such as the encoder 400 of FIG. 4 .
- the process 2300 may be implemented by the entropy encoding stage 408 of the encoder 400 of FIG. 4 .
- the process 2300 includes partitioning 2310 a block of video data into a plurality of groups of elements.
- the groups may be disjoint.
- the block may include a two-dimensional array of elements (e.g., a 4 ⁇ 4, 8 ⁇ 8, 16 ⁇ 16, 32 ⁇ 32, or any other square or rectangular block size).
- a group from the plurality of groups of elements may be continuous or discontinuous within the structure of the block.
- the elements of the block may be pixel values (e.g., luminosity values).
- the elements of the block may be quantized transform coefficients.
- the elements of the block may be quantized transform coefficients of a residual block (e.g., a residual block resulting from intra-frame prediction or a residual block resulting from inter-frame prediction).
- the elements of the block may be based on a result of inter-frame prediction.
- the block may be a residual block resulting from inter-frame prediction.
- the elements of the block may be based on a result of intra-frame prediction.
- the block may be a residual block resulting from intra-frame prediction.
- the elements of the block each represent a sub-block of quantized transform coefficients.
- the plurality of groups includes two groups (e.g., as shown in the examples of FIGS. 15A-B , FIGS. 21A-B , FIG. 22A or FIG. 22B ).
- a first group may include elements of a first row of the block and elements of a first column of the block.
- the first group includes elements forming a triangle in a corner of the block, and wherein the triangle includes elements of a first row of the block and elements of a first column of the block (e.g., as shown in the examples of FIGS. 21A-B , FIG. 22A or FIG. 22B ).
- the first group includes elements of a first row of the block that are outside of the triangle and elements of a first column of the block that are outside of the triangle (e.g., as shown in the examples of FIG. 22A or FIG. 22B ).
- a shape of the first group may be selected based on a size of the block (e.g., as described in relation to Table 2).
- a second group may include all remaining elements of the block outside of the first group.
- the plurality of groups includes more than two groups of elements.
- the process 2300 includes encoding 2320 , using an entropy encoder, elements of a first group from the plurality of groups of elements.
- the first group of elements may be encoded using a default or initial scan order that a compatible entropy decoder is configured to use to decode elements of the first group for the block.
- the first scan order may be a zig-zag order (e.g., as shown in FIG. 15A ) or an alternating diagonal order (e.g., as shown in FIG. 21A ).
- the entropy encoder may employ entropy encoding techniques such as, for example, variable length coding (VLC), context adaptive binary arithmetic coding (CABAC), or context adaptive (multi-symbol) arithmetic coding.
- VLC variable length coding
- CABAC context adaptive binary arithmetic coding
- multi-symbol multi-symbol
- the process 2300 includes selecting 2322 a next group (e.g., a second group) from the plurality of groups of elements of the block.
- a next group e.g., a second group
- the process 2300 includes determining 2330 a category based on the elements of one or more prior groups (e.g., based on the elements of the first group).
- the category may be used to select 2332 a context for encoding one or more elements of a subsequent group (e.g., a second group) of elements of the block.
- the category may correspond a spatial distribution of element values of the block and/or to a scan order that may be used for one or more subsequent groups of elements of the block.
- the category is one of horizontal, vertical, diagonal-left, and diagonal-right (e.g., as illustrated in FIG. 21A ).
- the category may be determined 2330 based on a distribution of non-zero elements (e.g., quantized transform coefficients of a residual block) within the first group of elements of the block.
- the category order may be determined 2330 based on a distribution of non-zero elements within a union of prior groups).
- the process 2500 of FIG. 25A may be implemented to determine 2330 the category.
- the process 2550 of FIG. 25B may be implemented to determine 2330 the category.
- the process 2300 includes determining, based on the category, a scan order for the second group from the plurality of groups of elements.
- a process similar to the process 1800 of FIG. 18A may be used to determine 2430 the category.
- determining 2430 the category may include determining a first sum of magnitudes of elements in a portion of a first row of the block; determining a second sum of magnitudes of elements in a portion of a first column of the block; and responsive to the first sum being positive and the second sum being zero, determine the category to be a value corresponding to a horizontal scan order.
- a process similar to the process 1840 of FIG. 18B may be used to determine 2430 the category.
- determining 2430 the category may include determining a first count of non-zero elements in a portion of a first row of the block; determining a second count of non-zero elements in a portion of a first column of the block; and responsive to the first count being zero and the second count being positive, determine the category to be a value corresponding to a vertical scan order.
- the process 2300 includes based on the category, selecting 2332 a context for an element from a second group from the plurality of groups of elements.
- all the elements in the second group will be encoded with a single context that is selected 2332 based on the category.
- individual elements in the second group have position dependent contexts for decoding that are selected 2332 based on the category.
- an entropy encoder may be configured to use a context from a table of contexts (e.g., including 18 or 72 contexts) shared with a matching decoder. An index to this table used to select one of the contexts for decoding an element of the block may be modified based on the category determined 2330 based on elements of the first group of elements.
- a default context Ctx[i,j] is derived by using an existing context (e.g., a VP9 context model for coefficient coding). Then a new context is determined based on the default context for the element and the category t that has been determined 2330 for the block.
- x might depend upon (i, j).
- the process 2300 includes encoding 2340 , using the entropy encoder using the context, the element of the next group (e.g., the second group) from the plurality of groups of elements.
- the entropy encoder may employ entropy encoding techniques such as, for example, variable length coding (VLC), context adaptive binary arithmetic coding (CABAC), or context adaptive (multi-symbol) arithmetic coding.
- VLC variable length coding
- CABAC context adaptive binary arithmetic coding
- multi-symbol multi-symbol
- encoding 2340 of elements of the next group uses a scan order that has determined based on the category.
- the process 2300 may include encoding, using the entropy encoder using the scan order, elements of the second group from the plurality of groups of elements.
- the scan order may be a horizontal scan order, a vertical scan order, a diagonal-right scan order, a diagonal-left scan order, a zig-zag scan order, etc. (e.g., as shown in FIG. 15A or FIG. 21A ).
- the encoded elements of the block are output 2350 to an encoded bitstream.
- the encoded elements may be output from the entropy encoder 712 through the multiplexer 718 to be included in the bitstream 720 that bears a video signal including the block.
- the bitstream may be stored (e.g., in memory or on a disk) or transmitted (e.g., via network communication link).
- encoded elements may be output to an encoded bitstream as they become available.
- FIG. 24 is a flowchart of an example of a process 2400 for adapting context to decode a block of video data.
- the process 2400 includes partitioning 2410 a block of video data into a plurality of groups of elements; decoding 2420 , using an entropy decoder, data from an encoded bitstream to obtain elements of a first group from the plurality of groups of elements; selecting 2422 a next group from the plurality of groups; determining 2430 a category based on the elements of the prior group(s); based on the category, selecting 2432 one or more contexts for elements from the next group from the plurality of groups of elements; decoding 2440 , using the entropy decoder using the context(s), data from the encoded bitstream to obtain the elements of the next group from the plurality of groups of elements; and continuing (at 2445 ) to process any remaining groups from the plurality of groups until all groups have been decoded 2440 and then outputting 2450 the decoded elements of the block for processing to generate video
- the process 2400 may be implemented by the entropy decoder 756 .
- the process 2400 may be implemented by the receiving station 106 .
- the process 2400 may be implemented by a computing device, such as the computing device 200 .
- the process 2400 may be implemented by a software program including machine-readable instructions that can be stored in a memory such as the memory 204 or the secondary storage 214 , and that can be executed by a processor, such as CPU 202 , to cause a computing device to perform the process 2400 .
- the process 2400 may be implemented by a decoder such as the decoder 500 of FIG. 5 .
- the process 2400 may be implemented by the entropy decoding stage 502 of the decoder 500 of FIG. 5 .
- the process 2400 includes partitioning 2410 a block of video data into a plurality of groups of elements.
- the groups may be disjoint.
- the block may include a two-dimensional array of elements (e.g., a 4 ⁇ 4, 8 ⁇ 8, 16 ⁇ 16, 32 ⁇ 32, or any other square or rectangular block size).
- a group from the plurality of groups of elements may be continuous or discontinuous within the structure of the block.
- the elements of the block may be pixel values (e.g., luminosity values).
- the elements of the block may be quantized transform coefficients.
- the elements of the block may be quantized transform coefficients of a residual block (e.g., a residual block resulting from intra-frame prediction or a residual block resulting from inter-frame prediction).
- the elements of the block may be based on a result of inter-frame prediction.
- the block may be a residual block resulting from inter-frame prediction.
- the elements of the block may be based on a result of intra-frame prediction.
- the block may be a residual block resulting from intra-frame prediction.
- the elements of the block each represent a sub-block of quantized transform coefficients.
- the plurality of groups includes two groups (e.g., as shown in the examples of FIGS. 15A-B , FIGS. 21A-B , FIG. 22A or FIG. 22B ).
- a first group may include elements of a first row of the block and elements of a first column of the block.
- the first group includes elements forming a triangle in a corner of the block, and wherein the triangle includes elements of a first row of the block and elements of a first column of the block (e.g., as shown in the examples of FIGS. 21A-B , FIG. 22A or FIG. 22B ).
- the first group includes elements of a first row of the block that are outside of the triangle and elements of a first column of the block that are outside of the triangle (e.g., as shown in the examples of FIG. 22A or FIG. 22B ).
- a shape of the first group may be selected based on a size of the block (e.g., as described in relation to Table 2).
- a second group may include all remaining elements of the block outside of the first group.
- the plurality of groups includes more than two groups of elements.
- the process 2400 includes decoding 2420 , using an entropy decoder, data from an encoded bitstream to obtain elements of a first group from the plurality of groups of elements.
- the first group of elements may be decoded using a default or initial scan order that a compatible entropy encoder is configured to use to encode elements of the first group for the block.
- the first scan order may be a zig-zag order (e.g., as shown in FIG. 15A ) or an alternating diagonal order (e.g., as shown in FIG. 21A ).
- the entropy decoder may employ entropy decoding techniques such as, for example, variable length coding (VLC), context adaptive binary arithmetic coding (CABAC), or context adaptive (multi-symbol) arithmetic coding.
- VLC variable length coding
- CABAC context adaptive binary arithmetic coding
- multi-symbol multi-symbol
- the process 2400 includes selecting 2422 a next group (e.g., a second group) from the plurality of groups of elements of the block.
- a next group e.g., a second group
- the process 2400 includes determine 2430 a category based on the elements of one or more prior groups (e.g., based on the elements of the first group).
- the category may be used to select 2432 a context for decoding one or more elements of a subsequent group (e.g., a second group) of elements of the block.
- the category may correspond a spatial distribution of element values of the block and/or to a scan order that may be used for one or more subsequent groups of elements of the block.
- the category is one of horizontal, vertical, diagonal-left, and diagonal-right (e.g., as illustrated in FIG. 21A ).
- the category may be determined 2430 based on a distribution of non-zero elements (e.g., quantized transform coefficients of a residual block) within the first group of elements of the block.
- the category order may be determined 2430 based on a distribution of non-zero elements within a union of prior groups).
- the process 2500 of FIG. 25A may be implemented to determine 2430 the category.
- the process 2550 of FIG. 25B may be implemented to determine 2430 the category.
- the process 2400 includes determining, based on the category, a scan order for the second group from the plurality of groups of elements.
- a process similar to the process 1800 of FIG. 18A may be used to determine 2430 the category.
- determining 2430 the category may include determining a first sum of magnitudes of elements in a portion of a first row of the block; determining a second sum of magnitudes of elements in a portion of a first column of the block; and responsive to the first sum being positive and the second sum being zero, determine the category to be a value corresponding to a horizontal scan order.
- a process similar to the process 1840 of FIG. 18B may be used to determine 2430 the category.
- determining 2430 the category may include determining a first count of non-zero elements in a portion of a first row of the block; determining a second count of non-zero elements in a portion of a first column of the block; and responsive to the first count being zero and the second count being positive, determine the category to be a value corresponding to a vertical scan order.
- the process 2400 includes based on the category, selecting 2432 a context for an element from a second group from the plurality of groups of elements.
- all the elements in the second group will be decoded with a single context that is selected 2432 based on the category.
- individual elements in the second group have position dependent contexts for decoding that are selected 2432 based on the category.
- an entropy decoder may be configured to use a context from a table of contexts (e.g., including 18 or 72 contexts) shared with a matching encoder. An index to this table used to select one of the contexts for decoding an element of the block may be modified based on the category determined 2430 based on elements of the first group of elements.
- a default context Ctx[i,j] is derived by using an existing context (e.g., a VP9 context model for coefficient coding). Then a new context is determined based on the default context for the element and the category t that has been determined 2430 for the block.
- x might depend upon (i, j).
- the process 2400 includes decoding 2440 , using the entropy decoder using the context, data from the encoded bitstream to obtain the element of the next group (e.g., the second group) from the plurality of groups of elements.
- the entropy decoder may employ entropy decoding techniques such as, for example, variable length coding (VLC), context adaptive binary arithmetic coding (CABAC), or context adaptive (multi-symbol) arithmetic coding.
- VLC variable length coding
- CABAC context adaptive binary arithmetic coding
- multi-symbol multi-symbol
- decoding 2440 of elements of the next group uses a scan order that has determined based on the category.
- the process 2400 may include decoding, using the entropy decoder, data from the encoded bitstream to obtain, using a scan order, elements of the second group from the plurality of groups of elements.
- the scan order may be a horizontal scan order, a vertical scan order, a diagonal-right scan order, a diagonal-left scan order, a zig-zag scan order, etc. (e.g., as shown in FIG. 15A or FIG. 21A ).
- the decoded elements of the block are output 2450 for processing to generate video.
- the decoded elements may be output 2450 from the entropy decoder 756 through the inverse quantization/transform 760 and used to generate the reconstructed block 764 that forms part of a video.
- the resulting video may be stored (e.g., in the memory 204 or the secondary storage 214 ), transmitted (e.g., via a network communication link), or displayed (e.g., in a user interface, such as on screen or a projection).
- the process 2400 may include displaying video that is generated based in part on decoded elements of the block (e.g., where the elements of the block are quantized transform coefficients of a residual block).
- FIG. 25A is a flowchart of an example of a process 2500 for determining a category for a block based on a subset of elements of the block of image data.
- the process 2500 includes determining 2510 a first sum of magnitudes of elements in a portion of the first group below a main diagonal of the block and at or above an anti-diagonal of the block; determining 2512 a second sum of magnitudes of elements in a portion of the first group above the main diagonal of the block and at or above the anti-diagonal of the block; and determining 2520 the category based on the first sum and the second sum.
- the same process 2500 may be used for determining a category in both an encoder and a compatible decoder.
- the process 2500 may be implemented by the entropy encoder 712 or the entropy decoder 756 .
- the process 2500 may be implemented by the transmitting station 102 or the receiving station 106 .
- the process 2500 may be implemented by a computing device, such as the computing device 200 .
- the process 2500 may be implemented by a software program including machine-readable instructions that can be stored in a memory such as the memory 204 or the secondary storage 214 , and that can be executed by a processor, such as CPU 202 , to cause a computing device to perform the process 2500 .
- the process 2500 may be implemented by a decoder such as the decoder 500 of FIG. 5 .
- the process 2500 may be implemented by an encoder such as the encoder 400 of FIG. 4 .
- the process 2500 may be implemented by the entropy encoding stage 408 of the encoder 400 of FIG. 4 .
- the process 2500 may be implemented by the entropy decoding stage 502 of the decoder 500 of FIG. 5 .
- a first sum of magnitudes of elements in a portion of the first group below a main diagonal of the block and at or above an anti-diagonal of the block may be determined 2510 as cSum according to Equation (13).
- a second sum of magnitudes of elements in a portion of the first group above the main diagonal of the block and at or above the anti-diagonal of the block may be determined 2512 as rSum according to Equation (13).
- the process 2500 includes determining 2520 the category based on the first sum and the second sum.
- the category may be determined by comparing the first sum and the second sum to each other and/or to zero.
- the category t may be determined 2570 according to:
- FIG. 25B is a flowchart of an example of a process 2550 for determining a category for a block based on a subset of elements of the block of image data.
- the process 2550 includes determining 2560 a first count of non-zero elements in a portion of the first group below a main diagonal of the block and at or above an anti-diagonal of the block; determining 2562 a second count of non-zero elements in a portion of the first group above the main diagonal of the block and at or above the anti-diagonal of the block; and determining 2570 the category based on the first count and the second count.
- the same process 2500 may be used for determining a category in both an encoder and a compatible decoder.
- the process 2500 may be implemented by the entropy encoder 712 or the entropy decoder 756 .
- the process 2500 may be implemented by the transmitting station 102 or the receiving station 106 .
- the process 2500 may be implemented by a computing device, such as the computing device 200 .
- the process 2500 may be implemented by a software program including machine-readable instructions that can be stored in a memory such as the memory 204 or the secondary storage 214 , and that can be executed by a processor, such as CPU 202 , to cause a computing device to perform the process 2500 .
- the process 2500 may be implemented by a decoder such as the decoder 500 of FIG. 5 .
- the process 2500 may be implemented by an encoder such as the encoder 400 of FIG. 4 .
- the process 2500 may be implemented by the entropy encoding stage 408 of the encoder 400 of FIG. 4 .
- the process 2500 may be implemented by the entropy decoding stage 502 of the decoder 500 of FIG. 5 .
- a first count of non-zero elements in a portion of the first group below a main diagonal of the block and at or above an anti-diagonal of the block may be determined 2560 as cSum according to Equation (13).
- a second count of non-zero elements in a portion of the first group above the main diagonal of the block and at or above the anti-diagonal of the block may be determined 2562 as rSum according to Equation (13).
- the process 2550 includes determining 2570 the category based on the first count and the second count.
- the category may be determined by comparing the first count and the second count to each other and/or to zero.
- the category t may be determined 2570 according to:
- encoding and decoding illustrate some encoding and decoding techniques. However, it is to be understood that encoding and decoding, as those terms are used in the claims, could mean compression, decompression, transformation, or any other processing or change of data.
- example or “implementation” are used herein to mean serving as an example, instance, or illustration. Any aspect or design described herein as “example” or “implementation” is not necessarily to be construed as preferred or advantageous over other aspects or designs. Rather, use of the words “example” or “implementation” is intended to present concepts in a concrete fashion.
- the term “or” is intended to mean an inclusive “or” rather than an exclusive “or”. That is, unless specified otherwise, or clear from context, “X includes A or B” is intended to mean any of the natural inclusive permutations.
- Implementations of transmitting station 102 and/or receiving station 106 can be realized in hardware, software, or any combination thereof.
- the hardware can include, for example, computers, intellectual property (IP) cores, application-specific integrated circuits (ASICs), programmable logic arrays, optical processors, programmable logic controllers, microcode, microcontrollers, servers, microprocessors, digital signal processors or any other suitable circuit.
- IP intellectual property
- ASICs application-specific integrated circuits
- programmable logic arrays optical processors
- programmable logic controllers programmable logic controllers
- microcode microcontrollers
- servers microprocessors, digital signal processors or any other suitable circuit.
- signal processors should be understood as encompassing any of the foregoing hardware, either singly or in combination.
- signals and “data” are used interchangeably. Further, portions of transmitting station 102 and receiving station 106 do not necessarily have to be implemented in the same manner.
- transmitting station 102 or receiving station 106 can be implemented using a computer or processor with a computer program that, when executed, carries out any of the respective methods, algorithms and/or instructions described herein.
- a special purpose computer/processor can be utilized which can contain other hardware for carrying out any of the methods, algorithms, or instructions described herein.
- Transmitting station 102 and receiving station 106 can, for example, be implemented on computers in a video conferencing system.
- transmitting station 102 can be implemented on a server and receiving station 106 can be implemented on a device separate from the server, such as a hand-held communications device.
- transmitting station 102 can encode content using an encoder 400 into an encoded video signal and transmit the encoded video signal to the communications device.
- the communications device can then decode the encoded video signal using a decoder 500 .
- the communications device can decode content stored locally on the communications device, for example, content that was not transmitted by transmitting station 102 .
- Other transmitting station 102 and receiving station 106 implementation schemes are available.
- receiving station 106 can be a generally stationary personal computer rather than a portable communications device and/or a device including an encoder 400 may also include a decoder 500 .
- implementations of the present disclosure can take the form of a computer program product accessible from, for example, a tangible computer-usable or computer-readable medium.
- a computer-usable or computer-readable medium can be any device that can, for example, tangibly contain, store, communicate, or transport the program for use by or in connection with any processor.
- the medium can be, for example, an electronic, magnetic, optical, electromagnetic, or a semiconductor device. Other suitable mediums are also available.
Abstract
Description
H(X,Y)=X(X)+H(Y|X)=H(Y)+H(X|Y) (1)
new_intra_mode_ctx=ƒ(intra_mode_ctx,t) (3)
ƒ(intra_mode_ctx,t)=t*NUM_CONTEXTS+intra_mode_ctx (4)
ƒ(intra_mode_ctx,t)=intra_mode_ctx*3+t. (5)
if c[0]>third threshold and r[0]≤fourth threshold, set t=1
if r[0]>third threshold and c[0]≤fourth threshold, set t=2
otherwise, set t=0 (7)
S1[k]=(0,k>>1) if k is even
S1[k]=((k+1)>>1,0) if k is odd
where k=0, . . . , 2*N−2.
7 | 8 | 12 |
9 | 11 | 13 |
10 | 14 | 15 |
For example, a decision of whether to use the zig-zag scan order for the second block of
SR=|r[ceil(M/2)]|+|r[ceil(M/2)+1]|+ . . . +|r[M−1]| (9)
where SR is the first sum; M is the number of columns in the block (e.g., an N×M block); r[i] is the ith element of the first row of the block for i=0 to M−1; and ceil( ) denotes the ceiling function, i.e., for any real number a, ceil(a) returns the smallest integer that is greater than or equal to a. M may be greater than or equal to two. For example, the elements of the block may be quantized transform coefficients of a residual block (e.g., a residual block resulting from intra-frame prediction or a residual block resulting from inter-frame prediction).
SC=|c[ceil(N/2)]|+|c[ceil(N/2)+1]|+ . . . |c[N−1]| (10)
where SC is the second sum; N is the number of rows in the block (e.g., an N×M block); and c[i] is the ith element of the first column of the block for i=0 to
CR=nz(r[ceil(M/2)])+nz(r[ceil(M/2)+1])+ . . . nz(r[M−1]) (11)
where CR is the first count; M is the number of columns in the block (e.g., an N×M block); r[i] is the ith element of the first row of the block for i=0 to M−1; nz( ) denotes a non-zero function that returns one if the argument is non-zero and zero if the argument is zero; and ceil( ) denotes the ceiling function, i.e., for any real number a, ceil(a) returns the smallest integer that is greater than or equal to a. M may be greater than or equal to two. For example, the elements of the block may be quantized transform coefficients of a residual block (e.g., a residual block resulting from intra-frame prediction or a residual block resulting from inter-frame prediction).
CC=nz(c[ceil(N/2)])+nz(c[ceil(N/2)+1])+ . . . nz(c[N−1]) (12)
where CC is the second count; N is the number of rows in the block (e.g., an N×M block); and c[i] is the ith element of the first column of the block for i=0 to
TABLE 1 |
Neighbors for context derivation in coefficient coding |
Neighbor A | Neighbor B | |||
[0, 0] | N/A | N/A | ||
[1, 0] | [0, 0] | N/A | ||
[0, 1] | [0, 0] | [1, 0] | ||
[r, 0], r > 1 | [r-1, 0] | [r-2, 0] | ||
[0, c], c > 1 | [0, c-1] | [0, c-2] | ||
[r, c], r > 0, c > 0 | [r-1, c] | [r, c-1] | ||
-
- a. if CC>=1 and CR==0, set t=1, and select the vertical scan order.
- b. if CC==0 and CR>=1, set t=2, and select the horizontal scan order.
- c. otherwise, set t=0, and select the default scan order (e.g., zigzag, diagonal, etc.).
-
- a. if CC>=1 and CR==0, set t=1, and select the vertical scan order.
- b. if CC==0 and CR>=1, set t=2, and select the horizontal scan order.
- c. otherwise, set t=0, and select the default scan order (e.g., zigzag, diagonal, etc.).
-
- a. if rSum>cSum and cSum==0, select the horizontal scan order;
- b. If rSum>cSum and cSum>0, select the diagonal-left scan order (e.g., downward to the left parallel to the anti-diagonal line);
- c. if rSum<=cSum and rSum==0, select the vertical scan order; otherwise
- d. select the diagonal-right scan order (e.g., upward to the right parallel to the anti-diagonal line).
Note that the scan order used for the first group can be any default scan order (horizontal, diagonal, alternating diagonal, zig-zag, vertical, etc.) that is known to both the encoder and the decoder. Note further that for larger blocks like 8×8, 16×16, 32×32 or even bigger ones, L and/or K may be increased correspondingly. For example, K may be N/2−1, i.e., K=3 when N=8, K=7 when N=16, K=15 when N=32, etc. In some implementations, the value of L and/or K may be sent as part of header information, e.g. picture or coding block header, to the decoder. Different values of L and/or K for the first column and the first row may be used. In that case, cSum and rSum may be scaled according to the number of positions used to accumulate the respective sums. Note also that though a set of four distinct scan orders (diagonal-left, horizontal, vertical, diagonal-right} are used in this document to illustrate the solution, these are merely examples. Other scan orders including but not limited to zig-zag (downward first), zig-zag (right first) may be used.
In Equation (13), cSum in effect is the sum of absolute values of coefficients that are located below the main diagonal line, and above or on an antidiagonal line defined by K, that is, coefficients at positions [i, j] where i+j<=K, and j<i. Correspondingly, in Equation (13), rSum is the sum of absolute values of coefficients that are located above the main diagonal line, and above or on an antidiagonal line defined by K, that is, coefficients at positions [i, j] where i+j<=K, and i<j.
TABLE 2 |
Size of the first group of elements of a block relative to block size |
Size of the | Size of the | ||||
first group | first group | ||||
consisting of | consisting of the | ||||
the upper-left | Percentage | first row and the | Percentage | ||
triangle as in | of the | first column as | of the | ||
N | FIGS. 21A-B | block size | in FIGS. 15A- | block size | |
4 | 6 | 0.375 | 7 | 0.4375 |
8 | 15 | 0.234375 | 15 | 0.234375 |
16 | 45 | 0.17578125 | 31 | 0.12109375 |
32 | 153 | 0.1494140625 | 63 | 0.0615234375 |
64 | 561 | 0.1369628906 | 127 | 0.03100585938 |
-
- 0 indicates the default diagonal-right scan order
- 1 indicates the horizontal scan order
- 2 indicates the vertical scan order
- 3 indicates the diagonal-left scan order.
-
- if rSum>cSum and cSum==0, set t=1;
- if rSum>cSum and cSum>0, set t=3;
- if rSum<=cSum and rSum==0, set t=2;
- otherwise, set t=0.
Next, encode or decode the selected scan order s∈{0, 1, 2, 3} given t. In one example, encoding s given t is as follows: - Encode a binary flag ScanOrderNotEqualToPredictor indicating whether s==t.
- If ScanOrderNotEqualToPredictor is 0, encoding of s terminates;
- otherwise encode s as a symbol in {0,1,2,3}\{t}, where for two sets A and B,
A\B indicates the complement of B with respect to A.
Correspondingly, decoding s given t from a coded bitstream is as follows: - Decode from the bitstream a binary flag ScanOrderNotEqualToPredictor.
- If ScanOrderNotEqualToPredictor is 0, set s=t and decoding of s terminates;
- otherwise decode s as a symbol in {0,1,2,3}\{t}.
-
- 1.) Compute cSum=c[L]+ . . . +c[N−1-K] and rSum=r[L]+ . . . +r[N−1-K], where L<N and K<N are non-negative constants.
- 2.) Then derive a category t from {0, 1, 2, 3}.
- if rSum>cSum and cSum==0, set t=1;
- if rSum>cSum and cSum>0, set t=3;
- if rSum<=cSum and rSum==0, set t=2;
- otherwise, set t=0;
The category values may correspond to scan orders and may be used to select both scan orders and contexts for elements of the second group of elements of the block. For example, t=0 may correspond to a diagonal-right scan order, t=1 may correspond to a horizontal scan order, t=2 may correspond to a vertical scan order, and t=3 may correspond to a diagonal-left scan order. In some implementations, the rSum and cSum that are used to determine 2330 the category, may be determined according to Equation (13) above. For example, these sums may be sums of magnitudes of the respective elements or counts of binary indicators of whether a respective element has a non-zero value.
-
- 3.) Compute cSum=c[L]+ . . . +c[N−1-K] and rSum=r[L]+ . . . +r[N−1-K], where L<N and K<N are non-negative constants.
- 4.) Then derive a category t from {0, 1, 2, 3}.
- if rSum>cSum and cSum==0, set t=1;
- if rSum>cSum and cSum>0, set t=3;
- if rSum<=cSum and rSum==0, set t=2;
- otherwise, set t=0;
The category values may correspond to scan orders and may be used to select both scan orders and contexts for elements of the second group of elements of the block. For example, t=0 may correspond to a diagonal-right scan order, t=1 may correspond to a horizontal scan order, t=2 may correspond to a vertical scan order, and t=3 may correspond to a diagonal-left scan order. In some implementations, the rSum and cSum that are used to determine 2430 the category, may be determined according to Equation (13) above. For example, these sums may be sums of magnitudes of the respective elements or counts binary indicators of whether a respective element has a non-zero value.
-
- if Sum_2>Sum_1 and Sum_1==0, set t=1;
- if Sum_2>Sum_1 and Sum_1>0, set t=3;
- if Sum_2<=Sum_1 and Sum_2==0, set t=2;
- otherwise, set t=0;
-
- if Count_2>Count_1 and Count_1==0, set t=1;
- if Count_2>Count_1 and Count_1>0, set t=3;
- if Count_2<=Count_1 and Count_2==0, set t=2;
- otherwise, set t=0;
Claims (17)
Priority Applications (1)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US15/671,595 US11477493B2 (en) | 2017-08-04 | 2017-08-08 | Adaptation for entropy coding of blocks of image data |
Applications Claiming Priority (2)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US15/668,745 US11477492B2 (en) | 2017-08-04 | 2017-08-04 | Adaptation for entropy coding of blocks of image data |
US15/671,595 US11477493B2 (en) | 2017-08-04 | 2017-08-08 | Adaptation for entropy coding of blocks of image data |
Related Parent Applications (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
US15/668,745 Continuation US11477492B2 (en) | 2017-08-04 | 2017-08-04 | Adaptation for entropy coding of blocks of image data |
Publications (2)
Publication Number | Publication Date |
---|---|
US20190045226A1 US20190045226A1 (en) | 2019-02-07 |
US11477493B2 true US11477493B2 (en) | 2022-10-18 |
Family
ID=62165738
Family Applications (3)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
US15/668,745 Active 2040-03-20 US11477492B2 (en) | 2017-08-04 | 2017-08-04 | Adaptation for entropy coding of blocks of image data |
US15/671,595 Active 2038-06-01 US11477493B2 (en) | 2017-08-04 | 2017-08-08 | Adaptation for entropy coding of blocks of image data |
US17/956,908 Pending US20230039465A1 (en) | 2017-08-04 | 2022-09-30 | Adaptation for entropy coding of blocks of image data |
Family Applications Before (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
US15/668,745 Active 2040-03-20 US11477492B2 (en) | 2017-08-04 | 2017-08-04 | Adaptation for entropy coding of blocks of image data |
Family Applications After (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
US17/956,908 Pending US20230039465A1 (en) | 2017-08-04 | 2022-09-30 | Adaptation for entropy coding of blocks of image data |
Country Status (4)
Country | Link |
---|---|
US (3) | US11477492B2 (en) |
EP (1) | EP3662665A1 (en) |
CN (1) | CN110800299B (en) |
WO (1) | WO2019027523A1 (en) |
Families Citing this family (9)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US10623738B2 (en) * | 2017-04-06 | 2020-04-14 | Futurewei Technologies, Inc. | Noise suppression filter |
US11412241B2 (en) * | 2018-03-06 | 2022-08-09 | Telefonaktiebolaget Lm Ericsson (Publ) | Decoding or encoding delta transform coefficients |
KR102030384B1 (en) * | 2018-06-19 | 2019-11-08 | 광운대학교 산학협력단 | A method and an apparatus for encoding/decoding residual coefficient |
US11350093B2 (en) | 2018-06-11 | 2022-05-31 | Hanwha Techwin Co., Ltd. | Residual coefficient encoding/decoding method and device |
CN113228645A (en) * | 2018-12-28 | 2021-08-06 | 韩国电子通信研究院 | Image encoding/decoding method and apparatus, and recording medium storing bit stream |
US11212555B2 (en) * | 2019-06-19 | 2021-12-28 | Tencent America LLC | Method of reducing context models for entropy coding of transform coefficient significant flag |
CN114365492B (en) * | 2019-08-24 | 2023-12-15 | 北京字节跳动网络技术有限公司 | Residual coefficient coding and decoding |
WO2021037053A1 (en) * | 2019-08-27 | 2021-03-04 | Huawei Technologies Co., Ltd. | An encoder, a decoder and corresponding methods of cabac coding for the indices of geometric partition flag |
US11363295B2 (en) * | 2019-11-27 | 2022-06-14 | Tencent America LLC | Method and system for intra mode coding |
Citations (19)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US5500678A (en) | 1994-03-18 | 1996-03-19 | At&T Corp. | Optimized scanning of transform coefficients in video coding |
US5767909A (en) | 1995-03-28 | 1998-06-16 | Daewoo Electronics, Co., Ltd. | Apparatus for encoding a digital video signal using an adaptive scanning technique |
US20110206135A1 (en) * | 2008-10-28 | 2011-08-25 | Virginie Drugeon | Image coding method, image decoding method, image coding apparatus, image decoding apparatus, integrated circuit and program |
US8140121B2 (en) | 2007-03-30 | 2012-03-20 | Fujitsu Limtied | Base station apparatus, communication system and computer program |
US20120230417A1 (en) | 2011-03-08 | 2012-09-13 | Qualcomm Incorporated | Coding of transform coefficients for video coding |
US20120236931A1 (en) * | 2010-12-23 | 2012-09-20 | Qualcomm Incorporated | Transform coefficient scan |
US8311119B2 (en) | 2004-12-31 | 2012-11-13 | Microsoft Corporation | Adaptive coefficient scan order |
US20130054162A1 (en) * | 2011-08-31 | 2013-02-28 | Tollgrade Communications, Inc. | Methods and apparatus for determining conditions of power lines |
US20130083857A1 (en) * | 2011-06-29 | 2013-04-04 | Qualcomm Incorporated | Multiple zone scanning order for video coding |
US20150078432A1 (en) | 2013-09-19 | 2015-03-19 | Blackberry Limited | Coding position data for the last non-zero transform coefficient in a coefficient group |
US20160080749A1 (en) | 2013-01-16 | 2016-03-17 | Blackberry Limited | Transform coefficient coding for context-adaptive binary entropy coding of video |
US9386306B2 (en) | 2012-08-15 | 2016-07-05 | Qualcomm Incorporated | Enhancement layer scan order derivation for scalable video coding |
US20160277746A1 (en) * | 2013-11-29 | 2016-09-22 | Huawei Technologies Co., Ltd. | Image compression method and apparatus |
US20170118473A1 (en) | 2015-10-21 | 2017-04-27 | Qualcomm Incorporated | Entropy coding techniques for display stream compression (dsc) of non-4:4:4 chroma sub-sampling |
US20170142448A1 (en) | 2015-11-13 | 2017-05-18 | Qualcomm Incorporated | Coding sign information of video data |
US9712830B1 (en) | 2016-09-15 | 2017-07-18 | Dropbox, Inc. | Techniques for image recompression |
US20170280163A1 (en) * | 2014-11-21 | 2017-09-28 | Vid Scale, Inc. | One-dimensional transform modes and coefficient scan order |
US9832745B2 (en) * | 2006-09-22 | 2017-11-28 | Samsung Electronics Co., Ltd. | Transport stream packets with time stamp generation by medium access control |
US20180352232A1 (en) | 2016-02-12 | 2018-12-06 | Huawei Technologies Co., Ltd. | Method and apparatus for scan order selection |
Family Cites Families (3)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
PT3244612T (en) * | 2010-04-13 | 2018-11-14 | Ge Video Compression Llc | Coding of significance maps and transform coefficient blocks |
CA2839560C (en) * | 2011-06-16 | 2016-10-04 | Fraunhofer-Gesellschaft Zur Forderung Der Angewandten Forschung E.V. | Entropy coding of motion vector differences |
EP2936816B1 (en) * | 2013-04-09 | 2020-04-29 | MediaTek Singapore Pte Ltd. | Method and apparatus for non-square intra mode coding |
-
2017
- 2017-08-04 US US15/668,745 patent/US11477492B2/en active Active
- 2017-08-08 US US15/671,595 patent/US11477493B2/en active Active
-
2018
- 2018-05-01 CN CN201880036773.1A patent/CN110800299B/en active Active
- 2018-05-01 EP EP18724762.2A patent/EP3662665A1/en active Pending
- 2018-05-01 WO PCT/US2018/030346 patent/WO2019027523A1/en unknown
-
2022
- 2022-09-30 US US17/956,908 patent/US20230039465A1/en active Pending
Patent Citations (22)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US5500678A (en) | 1994-03-18 | 1996-03-19 | At&T Corp. | Optimized scanning of transform coefficients in video coding |
US5767909A (en) | 1995-03-28 | 1998-06-16 | Daewoo Electronics, Co., Ltd. | Apparatus for encoding a digital video signal using an adaptive scanning technique |
US8311119B2 (en) | 2004-12-31 | 2012-11-13 | Microsoft Corporation | Adaptive coefficient scan order |
US9832745B2 (en) * | 2006-09-22 | 2017-11-28 | Samsung Electronics Co., Ltd. | Transport stream packets with time stamp generation by medium access control |
US8140121B2 (en) | 2007-03-30 | 2012-03-20 | Fujitsu Limtied | Base station apparatus, communication system and computer program |
US20110206135A1 (en) * | 2008-10-28 | 2011-08-25 | Virginie Drugeon | Image coding method, image decoding method, image coding apparatus, image decoding apparatus, integrated circuit and program |
US20120236931A1 (en) * | 2010-12-23 | 2012-09-20 | Qualcomm Incorporated | Transform coefficient scan |
US9197890B2 (en) | 2011-03-08 | 2015-11-24 | Qualcomm Incorporated | Harmonized scan order for coding transform coefficients in video coding |
US20120230417A1 (en) | 2011-03-08 | 2012-09-13 | Qualcomm Incorporated | Coding of transform coefficients for video coding |
US9445093B2 (en) | 2011-06-29 | 2016-09-13 | Qualcomm Incorporated | Multiple zone scanning order for video coding |
US20130083857A1 (en) * | 2011-06-29 | 2013-04-04 | Qualcomm Incorporated | Multiple zone scanning order for video coding |
US20130054162A1 (en) * | 2011-08-31 | 2013-02-28 | Tollgrade Communications, Inc. | Methods and apparatus for determining conditions of power lines |
US9386306B2 (en) | 2012-08-15 | 2016-07-05 | Qualcomm Incorporated | Enhancement layer scan order derivation for scalable video coding |
US20160080749A1 (en) | 2013-01-16 | 2016-03-17 | Blackberry Limited | Transform coefficient coding for context-adaptive binary entropy coding of video |
US20150078432A1 (en) | 2013-09-19 | 2015-03-19 | Blackberry Limited | Coding position data for the last non-zero transform coefficient in a coefficient group |
US20160277746A1 (en) * | 2013-11-29 | 2016-09-22 | Huawei Technologies Co., Ltd. | Image compression method and apparatus |
US20170280163A1 (en) * | 2014-11-21 | 2017-09-28 | Vid Scale, Inc. | One-dimensional transform modes and coefficient scan order |
US20170118473A1 (en) | 2015-10-21 | 2017-04-27 | Qualcomm Incorporated | Entropy coding techniques for display stream compression (dsc) of non-4:4:4 chroma sub-sampling |
US20170142448A1 (en) | 2015-11-13 | 2017-05-18 | Qualcomm Incorporated | Coding sign information of video data |
US20180352232A1 (en) | 2016-02-12 | 2018-12-06 | Huawei Technologies Co., Ltd. | Method and apparatus for scan order selection |
US9712830B1 (en) | 2016-09-15 | 2017-07-18 | Dropbox, Inc. | Techniques for image recompression |
US9832475B1 (en) | 2016-09-15 | 2017-11-28 | Dropbox, Inc. | Digital image recompression |
Non-Patent Citations (20)
Title |
---|
"Introduction to Video Coding Part 1: Transform Coding", Mozilla, Mar. 2012, 171 pp. |
"Overview VP7 Data Format and Decoder", Version 1.5, On2 Technologies, Inc., Mar. 28, 2005, 65 pp. |
"VP6 Bitstream and Decoder Specification", Version 1.02, On2 Technologies, Inc., Aug. 17, 2006, 88 pp. |
"VP6 Bitstream and Decoder Specification", Version 1.03, On2 Technologies, Inc., Oct. 29, 2007, 95 pp. |
"VP8 Data Format and Decoding Guide, WebM Project", Google On2, Dec. 1, 2010, 103 pp. |
Bankoski et al., "VP8 Data Format and Decoding Guide draft-bankoski-vp8-bitstream-02", Network Working Group, Internet-Draft, May 18, 2011, 288 pp. |
Bankoski et al., "VP8 Data Format and Decoding Guide", Independent Submission RFC 6389, Nov. 2011, 305 pp. |
Bankoski, et al., "Technical Overview of VP8, An Open Source Video Codec for the Web", Jul. 11, 2011, 6 pp. |
International Search Report and Written Opinion in PCT/US2018/030346, dated Jul. 4, 2018, 14 pgs. |
J. Sole et al., "Unified scans for the significance map and coefficient level coding in high coding efficiency", JCT-VC Meeting; 96.MPEG Meeting; Mar. 16, 2011-Mar. 23, 2011; Geneva;(Joint Collaborative Team on Video Coding of ISO/IEC JTC1/SC29/WG11 and ITU-T SG.16 ); URL: http://wftp3.itu.int/av-arch/jctvc-site/, No. JCTVC-E335, Mar. 11, 2011, pp. 1-5. |
Series H: Audiovisual and Multimedia Systems, Coding of moving video: Implementors Guide for H.264: Advanced video coding for generic audiovisual services, International Telecommunication Union, Jul. 30, 2010, 15 pp. |
Series H: Audiovisual and Multimedia Systems, Infrastructure of audiovisual services—Coding of moving video, Advanced video coding for generic audiovisual services, Amendment 1: Support of additional colour spaces and removal of the High 4:4:4 Profile, International Telecommunication Union, Jun. 2006, 16 pp. |
Series H: Audiovisual and Multimedia Systems, Infrastructure of audiovisual services—Coding of moving video, Advanced video coding for generic audiovisual services, International Telecommunication Union, Version 11, Mar. 2009. 670 pp. |
Series H: Audiovisual and Multimedia Systems, Infrastructure of audiovisual services—Coding of moving video, Advanced video coding for generic audiovisual services, International Telecommunication Union, Version 12, Mar. 2010, 676 pp. |
Series H: Audiovisual and Multimedia Systems, Infrastructure of audiovisual services—Coding of moving video, Advanced video coding for generic audiovisual services, Version 1, International Telecommunication Union, May 2003, 282 pp. |
Series H: Audiovisual and Multimedia Systems, Infrastructure of audiovisual services—Coding of moving video, Advanced video coding for generic audiovisual services, Version 3, International Telecommunication Union, Mar. 2005, 343 pp. |
Series H: Audiovisual and Multimedia Systems, Infrastructure of audiovisual services—Coding of moving video, Advanced video coding for generic audiovisual services, Version 8, International Telecommunication Union, Nov. 1, 2007, 564 pp. |
Series H: Audiovisual and Multimedia Systems, Infrastructure of audiovisual services—Coding of moving video, Amendment 2: New profiles for professional applications, International Telecommunication Union, Apr. 2007, 75 pp. |
Sole, Joel et al.; "Transform coefficient coding in HEVC"; IEEE Transactions on Circuits and Systems for Video Technology; Dec. 2012; pp. 1-12. |
Tung Nguyen et al., "Improved Context Modeling for Coding Quantized Transform Coefficients in Video Compression", 28th Picture Coding Symposium, PCS2010, Dec. 8-10, 2010, Nagoya, Japan, pp. 378-381. |
Also Published As
Publication number | Publication date |
---|---|
CN110800299B (en) | 2023-08-04 |
US20190045225A1 (en) | 2019-02-07 |
US20190045226A1 (en) | 2019-02-07 |
WO2019027523A1 (en) | 2019-02-07 |
EP3662665A1 (en) | 2020-06-10 |
CN110800299A (en) | 2020-02-14 |
US11477492B2 (en) | 2022-10-18 |
US20230039465A1 (en) | 2023-02-09 |
Similar Documents
Publication | Publication Date | Title |
---|---|---|
US20230039465A1 (en) | Adaptation for entropy coding of blocks of image data | |
US10735767B2 (en) | Transform coefficient coding using level maps | |
US10142628B1 (en) | Hybrid transform in video codecs | |
CN107027033B (en) | Video coding and decoding method for copying by using patch | |
US11102477B2 (en) | DC coefficient sign coding scheme | |
US11917156B2 (en) | Adaptation of scan order for entropy coding | |
US9674530B1 (en) | Hybrid transforms in video coding | |
US10225578B2 (en) | Intra-prediction edge filtering | |
US10630974B2 (en) | Coding of intra-prediction modes | |
US10951894B2 (en) | Transform block-level scan order selection for video coding | |
US10419777B2 (en) | Non-causal overlapped block prediction in variable block size video coding |
Legal Events
Date | Code | Title | Description |
---|---|---|---|
AS | Assignment |
Owner name: GOOGLE INC., CALIFORNIAFree format text: ASSIGNMENT OF ASSIGNORS INTEREST;ASSIGNORS:XU, RUIJIE;HE, DAKE;REEL/FRAME:043256/0688Effective date: 20170804 |
|
AS | Assignment |
Owner name: GOOGLE LLC, CALIFORNIAFree format text: CHANGE OF NAME;ASSIGNOR:GOOGLE INC.;REEL/FRAME:044567/0001Effective date: 20170929 |
|
STPP | Information on status: patent application and granting procedure in general |
Free format text: NON FINAL ACTION MAILED |
|
STPP | Information on status: patent application and granting procedure in general |
Free format text: RESPONSE TO NON-FINAL OFFICE ACTION ENTERED AND FORWARDED TO EXAMINER |
|
STPP | Information on status: patent application and granting procedure in general |
Free format text: FINAL REJECTION MAILED |
|
STPP | Information on status: patent application and granting procedure in general |
Free format text: ADVISORY ACTION MAILED |
|
STCV | Information on status: appeal procedure |
Free format text: NOTICE OF APPEAL FILED |
|
STCV | Information on status: appeal procedure |
Free format text: APPEAL BRIEF (OR SUPPLEMENTAL BRIEF) ENTERED AND FORWARDED TO EXAMINER |
|
STCV | Information on status: appeal procedure |
Free format text: EXAMINER'S ANSWER TO APPEAL BRIEF MAILED |
|
STCV | Information on status: appeal procedure |
Free format text: EXAMINER'S ANSWER TO APPEAL BRIEF MAILED |
|
STCV | Information on status: appeal procedure |
Free format text: ON APPEAL -- AWAITING DECISION BY THE BOARD OF APPEALS |
|
STCV | Information on status: appeal procedure |
Free format text: BOARD OF APPEALS DECISION RENDERED |
|
STCV | Information on status: appeal procedure |
Free format text: REQUEST RECONSIDERATION AFTER BOARD OF APPEALS DECISION |
|
STCV | Information on status: appeal procedure |
Free format text: BOARD OF APPEALS DECISION RENDERED AFTER REQUEST FOR RECONSIDERATION |
|
STPP | Information on status: patent application and granting procedure in general |
Free format text: AMENDMENT / ARGUMENT AFTER BOARD OF APPEALS DECISION |
|
STPP | Information on status: patent application and granting procedure in general |
Free format text: NOTICE OF ALLOWANCE MAILED -- APPLICATION RECEIVED IN OFFICE OF PUBLICATIONS |
|
STPP | Information on status: patent application and granting procedure in general |
Free format text: PUBLICATIONS -- ISSUE FEE PAYMENT RECEIVED |
|
STPP | Information on status: patent application and granting procedure in general |
Free format text: PUBLICATIONS -- ISSUE FEE PAYMENT VERIFIED |
|
STCF | Information on status: patent grant |
Free format text: PATENTED CASE |