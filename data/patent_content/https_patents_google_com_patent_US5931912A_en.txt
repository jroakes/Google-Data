US5931912A - Traversal path-based approach to understanding user-oriented hypertext object usage - Google Patents
Traversal path-based approach to understanding user-oriented hypertext object usage Download PDFInfo
- Publication number
- US5931912A US5931912A US08/708,004 US70800496A US5931912A US 5931912 A US5931912 A US 5931912A US 70800496 A US70800496 A US 70800496A US 5931912 A US5931912 A US 5931912A
- Authority
- US
- United States
- Prior art keywords
- access
- hyperlink
- pair
- session
- source
- Prior art date
- Legal status (The legal status is an assumption and is not a legal conclusion. Google has not performed a legal analysis and makes no representation as to the accuracy of the status listed.)
- Expired - Lifetime
Links
Images
Classifications
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F16/00—Information retrieval; Database structures therefor; File system structures therefor
- G06F16/90—Details of database functions independent of the retrieved data types
- G06F16/95—Retrieval from the web
- G06F16/957—Browsing optimisation, e.g. caching or content distillation
- G06F16/9574—Browsing optimisation, e.g. caching or content distillation of access to content, e.g. by caching
Definitions
- the present invention is related to co-pending U.S. patent application Ser. No. 08/525,891, entitled “A Fast Method for Mining Path Traversal Patterns", by Ming-Scan Chen and Philip S. Yu, filed Sep. 8, 1995, IBM Docket No. YO995-119, which is commonly assigned to the assignee of the present invention, and is hereby incorporated by reference in its entirety.
- the present invention generally relates to computerized methods of understanding client access patterns in stateliness server environment.
- a more particular aspect of the present invention is related to the analysis of user behavior in accessing hypertext objects in a stateliness hypertext server, such as a World Wide Web hypertext server in the Internet providing hypertext objects to various clients equipped with a browser.
- Internet The network of networks and gateways that use the TAP/TIP suite of protocols.
- a client is a computer which issues commands to the server which performs the task associated with the command.
- Any computer that performs a task at the command of another computer is a server.
- a Web server typically supports one or more clients.
- Network protocols standard methods for machines to communicate with one another. The protocols indicate how data should be formatted for receipt and transmission across networks. Heterogeneous machines can communicate seamlessly over a network via standard protocols. Examples of standard Internet protocols include: HTTP, see, e.g., "Hypertext Transfer Protocol--HTTP/1.0", http://www.ics.uci.edu/pub/ietf/http/draft-ietf-http-v10-spec-03.html, by T. Berners-Lee, R. Fielding, and H. Frystyk, Sep. 4, 1995; SMTP, see, e.g, "Simple Mail Transfer Protocol". RFC 821, J. B.
- Client-server model one of the dominant paradigms in network programming, see, e.g., W. R. Stevens, “Unix Network Programming", Prentice Hall PTR, Englewood Cliffs, N.J., 1990; and D. E. Comer, "Internetworking with TCP/IP” vol 1., Prentice Hall, Englewood Cliffs, N.J., 1991.
- a server program offers a service which can be accessed by multiple users over the network.
- a program becomes a client when it sends a message to a server and waits for a response from the server.
- the client process which is typically optimized for user interaction, uses the requested service without having to know any of the detailed workings of the requested service or server.
- WWW World Wide Web
- An Internet WWW server supports clients and provides information.
- the Web can be considered as the Internet with all of the resources addressed as URLs and which uses HTML to display the information corresponding to URLs and provide a point-and-click interface to other URLs.
- "browsers" constitute client programs while the programs sending back information to the browser constitute server programs.
- Universal Resource Locator A way to uniquely identify or address information on the Internet. Can be considered to be a Web document version of an e-mail address. URLs can be accessed with a Hyperlink. An example of a URL is "http://www.arun.com:80/table.html”.
- a URL has four components. Starting from the left, the first specifies the protocol to use, separated from the rest of the locator by a ":”. Next is the hostname or IP address of the target host; this is delimited by the "//" on the left and on the right by a "/” or optionally a ":”. The port number is optional, and is delimited on the left from the hostname by a ":” and on the right by a "/”. The fourth component is the actual file name or program name. In this example, the ".html” extension means that this is an HTML file.
- HyperText Markup Language HTML is the language used by Web servers to create and connect documents that are viewed by Web clients. HTML uses Hypertext documents. Other uses of Hypertext documents are described in U.S. Pat. Nos. 5,204,947, granted Apr. 20, 1993 to Bernstein et al.: 5,297,249, granted Mar. 22, 1994 to Bernstein et al.; 5,355,472, granted Oct. 11, 1994 to Lewis; all of which are assigned to International Business Machines Corporation, and which are incorporated by reference herein.
- HTTP Hypertext transfer protocol
- Internet Browser A graphical interface tool that runs Internet protocols such as http, and display results on the customers screen.
- the browser can act as an Internet tour guide, complete with pictorial desktops, directories and search tools used when a user "surfs" the Internet.
- the Web browser is a client service which communicates with the World Wide Web.
- HTTP daemon An IBM OS/2 Web Server or any other server having Hypertext Markup Language and Common Gateway Interface capability.
- the HTTPd is typically supported by an access agent which provides the hardware connections to machines on the intranet and access to the Internet, such as TCP/IP couplings.
- hypertext objects are transferred between the server and clients via the network and Hypertext Transfer Protocol (HTTP).
- HTTP Hypertext Transfer Protocol
- a client makes a request to a server for hypertext objects, usually through a browser which is a software tool running on the client's system; the server retrieves the requested objects and sends them through the network to the client. These hypertext objects are then displayed on the client's browser.
- HTTP is an example of a stateliness protocol. This means that every request from a client to a server is treated independently. After the server responds to the client's request, the connection between the client and the server is dropped. There is no record of prior activities from a given client address. The server treats every request as if it were brand-new, i.e., without context. Two advantages of using stateliness protocols are efficiency and simplicity.
- a firewall also called a proxy server, is typically employed between clients and the network which connects to a hypertext server where requested objects are stored.
- Client users access the hypertext objects of the hypertext server in the network through the proxy server.
- the real client address is replaced with the proxy server's address before the requests for objects are sent to the hypertext server.
- the real client identities are generally not available to the hypertext server.
- a client With client identities usually masked by the proxy server, a client usually accesses the hypertext objects of a server in an anonymous way.
- anonymity inhibits the analysis of aggregate user behavior, since the hypertext server cannot distinguish requests from different clients who access hypertext objects via the same proxy server.
- the hypertext server also cannot determine which group of objects are accessed together in a user session by an individual client. Hence, it becomes difficult to collect user-oriented hypertext object statistics. Understanding user-oriented object usage would provide many benefits, such as more effective marketing and better presentation of hypertext objects.
- Simple raw access counts may substantially overstate the actual number of client accesses to a hypertext object, as the same user may repeatedly access to the same object by going back and forth through a hyperlink. The counting of repeated accesses by a single user to an object can lead to inaccurate conclusions in some cases.
- a simple approach to grouping user accesses into user sessions is based on time stamps. For example, a user session could include all accesses within a predetermined interval. Unfortunately, this approach cannot distinguish two different client requests coming from the same proxy server within the specified time interval. Also, a single user session exceeding the predetermined interval will incorrectly be counted as two sessions.
- client and/or proxy caching are usually employed. With caching, hypertext objects are fetched locally instead of from the hypertext server. Thus, no requests are made to the server for the cached objects. There is also a need for a method and system for analyzing user-oriented hypertext object usage which accounts for client and/or proxy caching. The present invention addresses such a need.
- the present invention is directed to a method and system to identify user sessions in a stateliness hypertext server so that user-oriented object usage statistics can be analyzed.
- a plurality of information about the access is recorded, including the requestor address, the hyperlink source (i.e., the hyper-text object that refers the client to the target object), the hyperlink target (i.e., the hypertext object being accessed) and the time stamp of the access.
- the hyperlink source and hyperlink target are used to form a hyperlink access pair, representing a step in the user traversal path on the hypertext objects. These hyperlink access pairs are then mapped into hyperlink access groups.
- Each hyperlink group represents all the hypertext objects visited by a user along a traversal path.
- each access pair is added to an active session if the new access pair can expand the session into a connected traversal path.
- user-oriented object usage statistics can be analyzed.
- client and/or proxy caching are usually employed.
- caching hypertext objects are fetched locally instead of from the hypertext server.
- no requests are made to the server for the cached objects.
- it may be required to add certain backward traversal steps to an active session in order to form a connected traversal path. Since the server would not have any knowledge about a client's access to the cached objects, it is sufficient to find any backward traversal path for the needed backward steps.
- a method is disclosed to find the shortest backward traversal path in order to save memory space during the session identification.
- FIG. 1 is a block diagram of a hypertext server system having features of the present invention
- FIG. 2 depicts a data structure constructed from information logged by a stateliness hypertext server in response to a client request
- FIG. 3 is an example of the user-oriented object usage analysis logic of FIG. 1;
- FIG. 4 is an example of a data structure header of an active user session according to the present invention.
- FIG. 5 is an example of a data structure for a hyperlink access pair according to the present invention.
- FIG. 6 is an example of logic for beginning a new active session (step 305).
- FIG. 7 is an example of a logic diagram for computing the time gap and the number of back steps for the current log entry (step 308) against all active sessions;
- FIG. 8 is an example of a logic diagram for finding an active session to append the current log entry and mark all dormant sessions for closure (step 309);
- FIG. 9 is an example of a logic diagram for appending the current log entry to an active session (step 312);
- FIG. 10 is an example of a logic diagram for closing all dormant sessions in the current active session list (step 310); and collecting user-oriented object access statistics on the hypertext objects;
- FIG. 11 is an example of a logic diagram for closing all currently active sessions (step 307);
- FIG. 12 is an example of a logic diagram for finding the shortest backward path for the current log entry (step 904) and an active session;
- FIG. 13 is an example of a logic diagram for contracting the backwards access path in order to find the shortest backward path connecting two hypertext objects.
- FIG. 1 is a block diagram of a stateliness hypertext server system 5 that provides services to a plurality of clients 3 through a data communication network 4.
- An example of such a system is a World Wide Web server using the Hypertext Transfer Protocol 11 (HTTP) to provide hypertext objects to various clients through the Internet.
- HTTP Hypertext Transfer Protocol
- a client system 3 typically uses a software browser 2 to retrieve and display hypertext objects 1 through the communication network 4.
- client systems 3 are hidden behind a proxy server 10, also called a firewall, between them and the data communication network 4.
- a proxy server is a firewall which can protect client identities from the network.
- a client can also be directly connected to the data communication network without a proxy server.
- the communications between the client and the server are typically stateliness, i.e., after the requested hypertext objects are sent to the client from the server, the connection is dropped.
- the server treats each hypertext request as a brand new request without prior context.
- a hypertext server system has a hypertext object store 9 from which hypertext objects are retrieved and sent to clients through a data communication network 4.
- the hypertext object store 9 can be a file system or a database system.
- the hypertext objects are typically stored in a stable memory such a Direct Access Storage Device (DASD) 15 which can be retrieved into main memory 14 when requested.
- the hypertext server uses a conventional HTTPd 6 to process requests from clients.
- An example of a HTTPd is the Internet Connection Server, sold by IBM.
- the server system typically logs certain information about the request in a hypertext request log 8 in main memory 14. When the main memory 8 allocated for the logs becomes full, the logs are typically spooled to a stable large capacity storage device such as DASD 15.
- the information in the hypertext object request log 8 may be used to perform user-oriented object usage statistics.
- a user-oriented object usage analysis logic 7 uses the hypertext object request log 8 to construct data structures, 16 (such as are depicted in FIGS. 4-5) representing user traversal paths, which may be stored in memory 8 and/or DASD 15.
- the object usage analysis logic 7, is preferably embodied as computer readable program code stored on a computer readable medium such as DASD 15, or other conventional magnetic media such as a disk or optical media such as a CD-ROM.
- the object usage analysis logic 7 is preferably loaded into main memory 8 and executed on the server 5 to process the hypertext request logs 8 in a batch mode.
- the object usage analysis logic 7 will be described with reference to FIGS. 3 through 13. Those skilled in the art will appreciate that the statistical analysis can be conducted by the hypertext server itself 5 or can be executed against the logs on or through a different system. Those skilled in the art will also appreciate that the object usage analysis logic 7 can also be executed dynamically as clients 3 access the hypertext server 5.
- FIG. 2 depicts a data structure constructed from information logged by a stateless hypertext server in response to a client request.
- the information may include a requestor address 200, hyperlink source 201, hyperlink target 202, time stamp 203 of the access, and (optional) agent information 204.
- the requestor address 200 is the network address (such as the IP address) of the source of the hypertext object request. This requestor address may be the client's TIP address or it can be the proxy server's IP address if the client accesses the hypertext server through a proxy server.
- the time stamp 203 is the time when the requested hypertext object is processed and sent from the server.
- Hypertext objects such as HTML files and CGI programs
- HTML files and CGI programs are usually accessed by a client through a hyperlink embedded in another hypertext object, such as an HTML file displayed on a browser 2, which is HTML compatible.
- the requested object is called the hyperlink target 202 and the object that refers the client to the target object is called the hyperlink source 201.
- Both hyperlink source 201 and hyperlink target 202 are typically represented by a universal resource identifier (URI) or universal resource locator (URL) in HTTP.
- URI universal resource identifier
- URL universal resource locator
- Logging is a typical function performed by a hypertext server for each access to a hypertext object. Those skilled in the art will appreciate that there may be more or different information than that indicated in FIG. 2; and that the logs can be stored in a single log file or multiple log files. The following is a sample log entry from the NCSA HTTPd:
- This log entry indicates that a request from good.watson.ibm.com (requestor address 200) to access /www/mozock.htm (hyperlink target 202) was performed successfully on Mar. 14, 1996 at 11:25:11. A total of 913 bytes of data were transferred to the client, which is using a browser of Mozilla/2.0 running under AIX 2 (agent info 204).
- the hyperlink target 202 was referenced from http://bad.watson.ibm.com/book.htm (hyperlink source 201).
- the hyperlink source 201 and hyperlink target 202 together form a hyperlink access pair (to be discussed later with reference to FIG. 5).
- the hyperlink access pair represents a traversal step by the client 3 from the source object 201 to the target object 202.
- traversal steps may be grouped (also called partitioning or mapping) together to construct hypertext access groups, representing a traversal path during a user access session.
- the user access session identification process is also called session identification.
- Information which may be used for session identification includes the requestor address 200, the hyperlink source 201, the hyperlink target 202 and the time stamp 203.
- the agent information 204 indicating information about the software browser running on the client system, can also be used in the session identification process.
- two access pairs may have the same requestor address because they come from the same proxy server but have different agents.
- the agent information can be used to map the otherwise indistinguishable access pairs into two different sessions.
- FIG. 3 shows an example of the user-oriented object usage analysis logic 7 of FIG. 1.
- a traversal path-based approach to session identification by partitioning the hyperlink access pairs into access groups is depicted.
- the session identification process opens a plurality of active sessions and maps each access pair, represented by a log entry, to the tail end of one of the sessions.
- a log of n entries corresponding to n hypertext object accesses to the server 5 are to be processed.
- Each log entry contains a plurality of information about each access, such as is shown in FIG. 2.
- the session identification process begins by first sorting the entire log array based on the requestor address. If two log entries have the same requestor address, the ordering may be determined by their time stamps in ascending order. The objective of sorting based on requestor address is to group together all the requests coming from the same requestor. Log entries with different requestor addresses represent requests made by different users.
- step 302 if there are log entries to be processed, control passes to step 303.
- step 303 the next log entry from the sorted log array is obtained for processing.
- To process a log entry we want to map the log entry into an active session. It is possible that a log entry cannot be appended to any of the currently active sessions. In this case, a new session with the current log entry (or access pair) will be opened.
- step 304 if there is currently no such active session, then a new session corresponding to the current log entry is opened, in step 305. (Details about beginning a new session will be described with reference to FIG. 6.) Next, the process returns to step 302 as described above.
- step 306 if there are currently active sessions, then it is determined whether the requestor address 200 of the current log entry is the same as that of any of the active sessions. Recall that the log entries have been sorted according to requestor address at the beginning in step 301. Thus, if the current log entry has a requestor address that is different from the current active sessions, it is assumed that the subsequent log entries will also have different addresses. If no match is found, all the currently active sessions are closed, in step 307 (details about closing all active sessions will be described with reference to FIG. 11). The process continues, in step 305, wherein a new session with the current log entry is begun.
- step 306 if the current log entry has the same requestor address as the active sessions, the process continues at step 308.
- step 308 the time gap and the number of back steps of the current log entry against all active sessions is computed (described with reference to FIG. 7).
- the time gap represents the difference between the time stamp of the current log and that of the access pair in the tail of an active session.
- the number of back steps represents the number of backward access steps needed to traverse from the hyperlink target 202 of the last access pair of an active session to the hyperlink source 201 of the current log entry.
- client systems usually cache some hypertext objects, so that no requests need to be made when the cached objects are referenced again. In this case, however, certain log entries representing part of a client's traversal path are missing, and a path representing the missing traversal steps (described with reference to FIGS. 9 and 12) should be added to the active session.
- the time gap and number of back steps may be used as criteria to select a proper active session to append the current log entry, in step 309.
- a session pointer (sp) may be used to point to an active session meeting the criteria.
- dormant sessions are also identified. Dormant sessions are those to which no access pair has been added for a predetermined period of time.
- the set of access pairs in a dormant session represents a complete traversal path by a client.
- Dormant sessions are closed, in step 310.
- step 311 if an active session can be found (sp is not empty) to map the current log entry to, then the access pair representing the current log entry is appended to it, in step 312. Otherwise, in step 305, a new session will be created for the current log entry. Processing returns to step 302, as described above.
- step 313 after all log entries have been processed, all active sessions are closed, and the session identification process ends, in step 314.
- a time stamp is used to determine whether or not a session has become dormant.
- session dormancy can be determined by the number of accesses since the last time an access pair was appended to a session.
- the session identification process can be performed dynamically as accesses occur. In this case, the sorting of log entries based on requestor address is not needed.
- real-time dynamic processing may eliminate the need for the time stamp 203. For example, a system clock can be used to calculate a relative time gap.
- a possible downside to real-time processing is that at least some CPU costs will be incurred during peak hours whereas the hypertext logs can be batch processed at low-usage times.
- FIG. 4 shows a session header 400 data structure having features of the present invention.
- the session header 400 (and the associated active session) may be stored in the main memory 14 of the server 5 or on a static memory such as DASD 15.
- the session header 400 includes the pertinent data fields of an active session: requestor 401, dormant 402, timegap 403, backstep 404, previous 405, next 406, sessionhead 407, and sessiontail 408.
- the session header 400 points to a linked list of all the access pairs belonging to this active session (discussed with reference to FIG. 5).
- the requestor address 200 associated with an access pair is assigned to the requestor field 401 when a new session is opened.
- the dormant field 402 is a flag used to indicate whether or not this session is dormant and should be closed.
- the timegap field 403 represents the time difference of the time stamp of the current log entry and that of the last access pair on the current session.
- the backstep field 404 represents the number of backward access steps required to traverse backward from the hyperlink target of the last access pair to an access pair whose hyperlink target is the same as the hyperlink source of the current log entry. If the target of the last access pair of the active session is the same as the source of the current log entry, then the number of back steps is zero. In this case, the client can directly traverse from the last object of the session to the current target object, and the current log entry can be appended to the session without adding the missing steps.
- FIG. 5 shows an example of one hyperlink access pair 500 in a linked list data structure representing an active session pointed at by the session header 400.
- Each access pair 500 may include a time stamp 501, source 502, target 503, forward 504, and backward 505 data fields.
- the time stamp 501, source 502, target 503 data fields represent, respectively, the time stamp 203, hyperlink source 201, and the hyperlink target 202 of the corresponding log entry.
- Data fields forward 504 and backward 505 are links to the next access pair in the forward and backward direction.
- FIG. 6 shows an example of a logic diagram for setting up a new active session (step 305).
- a new access pair 500 is created and an access pair pointer ap is initialized to point to the access pair 500.
- the time stamp 501, source 502 and target 503 are assigned the respective values in the array representing current log entry, log i!.time stamp, log i!.source, and log i!.target.
- a new session header is also created, in step 603, and a session pointer sp is initialized to point to the new session header.
- the session header data fields are assigned the values as shown.
- the requestor 401 field is assigned the log i!.requestor value from the current log entry.
- the dormant 402 data field is initialized to indicate the session is active.
- the timegap 403 and backstep 404 data fields are initialized to predetermined default values L.
- the access pair 500 is linked to the session head 407.
- the new session header is linked to an active session list which is pointed at by a global session list pointer SH. After the session header is linked to the active session list, the process of setting up a new session is completed, in step 607.
- FIG. 7 shows an example of a method for determining the time gap and the number of back steps for all the current active sessions.
- the log entries have preferably been sorted by requestor address 200.
- the determination is done for all active sessions using the current log entry in order to determine which active session the current log should be appended or whether a new active session should be created.
- the process begins at the head of the active session list, and ends in step 703, when all active sessions are processed by the loop formed by steps 702 to 711.
- step 704 to compute the time gap 403 for a session, link to the access pair at the tail end of the session.
- step 705 compute the time gap 403 as the difference between the time stamp 203 of the current log entry and the time stamp 501 of the access pair 500 at the session tail 408.
- the number of back steps 404 may be determined as follows: In step 709, compare the value of the hyperlink target 503 of the access pair 500 at the tail 408 to the value of the hyperlink source 201 of the current log entry. In step 711, if equal, then set backstep 404 to a zero value, point to the next 406 session and repeat the process, at step 702. A zero value means that the log entry can be directly appended to the session without additional backward steps.
- step 710 if they are not equal, then traverse backward 505 through the session 400 (repeating steps 706-709-710) to find an access pair whose target is the same as the source of the log entry. If none can be found in the current session, including the source of the first access pair in step 707, then the number of back steps is assigned a number L, in step 708. Note that we always check the target of an access pair in a session against the source of the current log entry. But, if the access pair is the first one in a session, we also check against its source. This is to handle the case of a traversal path can branching out from the first hyperlink source of a session to another hyperlink target.
- FIG. 8 shows an example of a method for finding an active candidate session to append the current log entry and marking all the sessions which are considered dormant and should be closed (step 309).
- the first active session is selected from the head of the list of active sessions.
- the process ends, in step 804, when all active sessions have been processed.
- the time gap is greater than a pre-specified time, TIME -- FOR -- CLOSE, for closing a session, then the dormant 402 flag in the session header 400 is set to a true value, in step 806.
- steps 807, 808 and 809 the active session having the smallest time gap whose number of back steps is less than the predetermined large number L, is preferably chosen as the candidate.
- FIG. 9 depicts an example of a method for appending the current log entry to the candidate session identified in step 309.
- the current log entry is going to be appended at the tail end of the session 901 and the access pair pointer ap is set to the sessiontail 408.
- the access pair at the tail 408 is the same as the current entry log, then nothing has to be done and the process ends, in step 903.
- the backstep 404 value for this session (described in FIG. 7) is not zero, it implies that there have been backward traversal steps by the client 3 that are not logged by the hypertext object server 5. These traversal steps may be missing because the client 3 or a proxy server 10 has cached those objects and no requests for those objects were made to the hypertext object server 5.
- step 904 the shortest valid backward path is preferably determined (described with reference to FIG. 12).
- step 905 additional access pairs, corresponding to the traversal path are created and appended to the tail of the current session.
- step 906 the current log entry is appended to the session tail 408.
- FIG. 10 is an example of a logic diagram for closing all dormant sessions in the current active session list (step 310); and collecting user-oriented object access statistics on the hypertext objects.
- the entire list of active sessions is examined.
- S is a pointer to a session header 400
- SH is a pointer to the current active session list.
- the process starts by setting S to SH, in step 1001, and advances S to the next session on the list, in step 1007.
- step 1003 if S is empty, the process ends in step 1003.
- step 1003 if S is not empty, then a dormant flag 402 stored in the session header is checked, in step 1004.
- the access pairs linked in this session represent a pattern of hypertext objects that were accessed during a user session.
- a variety of user-oriented statistics can be collected, by conventional means, in step 1005. For example: the most frequently accessed pages; the most frequent source of visitors accessing the server, the average time spent, and the average number of pages visited; the distribution of user-session duration; the distribution of the number of pages visited in a session; the most frequent referrers to the site; and the pages from which most users exit the site.
- the entire session can then be removed from the active list after collecting necessary statistics. The process ends, in steps 1003 and 1002, after each active session has been examined,.
- FIG. 11 is an example of a logic diagram for closing all currently active sessions. This procedure is used after the entire log has been processed (step 313), or a new log entry with a different requester address is to be processed (step 307).
- S is a pointer to a session header 400
- SH is a pointer to the start of the current active session list.
- step 1101 set S to SH.
- steps 1102 and 1105 for each session header 400, the dormant flag 402 of the session header pointing at S is set to YES (dormant).
- step 1102 after all the session headers 400 are marked as dormant (i.e., S is empty), all the sessions marked as dormant may be closed, in step 1103, using the procedure described in FIG. 10.
- FIG. 12 is an example of a logic diagram for finding the shortest valid backward path (also called backpath) for the current log entry (step 904) in an active session. This is necessary because of traversal steps that may be missing due to client and/or proxy caching. There may be many possible valid backward traversal paths from the last access pair to an access pair whose target is the same as the source of the current log entry and as discussed, the (stateliness) server does not have any record of them. Thus, it is sufficient to find one such path and append the corresponding access pairs to the session. One such path can be found by simply traversing the session backward from the tail until we find the access pair whose target is the same as the source of the current log. However, there are very likely traversal steps that are repeated along the backward path.
- backpath also called backpath
- FIG. 12 depicts a logic diagram for constructing the shortest valid backward path for the current log entry (step 904) in an active session.
- step 1201 initialize a pointer "ap” to the access pair at the tail of the session 408, and a variable, "back” to equal the number of backsteps 404 recorded in the session header 400 pointed to by S.
- step 1202 initialize a pointer "end” to the hyperlink target 503 of the access pair at the tail of the session 408.
- the shortest valid backward path is now found by going forward from the access pair pointed to by "ap".
- the process ends when the target of an access pair pointed to by "ap” is the same as “end”, in step 1206 (set in step 1202).
- the shortest path may be stored in "backpath” in reverse order by using a function "find -- index(backpath, I, ap->target)" (to be described in FIG. 13).
- backpath is an array storing the hyperlink targets of the shortest path to be found by "find -- index(backpath, i, ap->target).” More specifically, the function “find -- index(backpath, I, ap->target” finds the “index” on “backpath” such that the next unique "ap->target” is to be appended to the path. For example, if “backpath i! is the same as “ap->target”, then “i+1” is returned. If we cannot find an element in "backpath” matching "ap->target”, then "i” is returned.
- step 1210 If the returned "index" is the same as “i”, in step 1210, this means that "ap->target” is a new hyperlink target which has not yet appeared on the path stored on "backpath". As a result, it is assigned to "backpath i! and “i” is incremented by one, in step 1212. But, if "index” is not the same as “i”, it means that "ap->target” is already reflected in the path stored in "backpath index-1!. In this case, "i” is set to "index”, in step 1211 and control passes to step 1213. In step 1213, “ap” is advanced to "ap->forward", and the process repeats from 1206. Each element in "backpath” represents the hyperlink target 503 of an access pair 500 along the path.
- backpath is expanded if the target pointed to by "ap” does not already exist in “backpath”, in step 1212. If some element in “backpath” is found that is the same as the target pointed to by "ap”, then “backpath” is contracted to eliminate the repeated element (details in FIG. 13). In addition to storing the path in "backpath”, the length of this "backpath” may also be returned, in step 1208.
- FIG. 13 is an example of a logic diagram for contracting the backwards access path (step 1209) in order to find the shortest backward path connecting two hypertext objects.
- the logic “find -- index(backpath, i, item)” returns the index "i” in array "backpath” of an element having the same value as "item”.
- step 1307 if a match is found, control passes to step 1309.
- step 1309 the "found” flag is set to YES and control passes to step 1303-1304.
- step 1304 the returned index "j" points to the match for the input "item”.
- step 1306 the index "j" is incremented and returned, in step 1304. In any case, the index returned in step 1304 points to the element in "backpath” where the next element is to be appended.
Abstract
Description
Claims (41)
Priority Applications (1)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US08/708,004 US5931912A (en) | 1996-08-09 | 1996-08-09 | Traversal path-based approach to understanding user-oriented hypertext object usage |
Applications Claiming Priority (1)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US08/708,004 US5931912A (en) | 1996-08-09 | 1996-08-09 | Traversal path-based approach to understanding user-oriented hypertext object usage |
Publications (1)
Publication Number | Publication Date |
---|---|
US5931912A true US5931912A (en) | 1999-08-03 |
Family
ID=24844013
Family Applications (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
US08/708,004 Expired - Lifetime US5931912A (en) | 1996-08-09 | 1996-08-09 | Traversal path-based approach to understanding user-oriented hypertext object usage |
Country Status (1)
Country | Link |
---|---|
US (1) | US5931912A (en) |
Cited By (64)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US6145004A (en) * | 1996-12-02 | 2000-11-07 | Walsh; Stephen Kelly | Intranet network system |
US6167438A (en) * | 1997-05-22 | 2000-12-26 | Trustees Of Boston University | Method and system for distributed caching, prefetching and replication |
WO2001011506A1 (en) * | 1999-08-06 | 2001-02-15 | Red Sheriff Limited | Network resource monitoring and measurement system and method |
US6278966B1 (en) * | 1998-06-18 | 2001-08-21 | International Business Machines Corporation | Method and system for emulating web site traffic to identify web site usage patterns |
US6304904B1 (en) * | 1997-03-27 | 2001-10-16 | Intel Corporation | Method and apparatus for collecting page-level performance statistics from a network device |
US6314432B1 (en) * | 1998-05-13 | 2001-11-06 | International Business Machines Corporation | System and method for retrieval, saving and printing of using hyperlinks |
US20020013795A1 (en) * | 2000-06-21 | 2002-01-31 | Bodin Dresevie | Serial storage of ink and its properties |
US6345295B1 (en) * | 1999-01-22 | 2002-02-05 | International Business Machines Corporation | Conducting traces in a computer system attachment network |
US20020049787A1 (en) * | 2000-06-21 | 2002-04-25 | Keely Leroy B. | Classifying, anchoring, and transforming ink |
US20020055933A1 (en) * | 2000-10-19 | 2002-05-09 | Kirk Feathers | Method and system for dynamically maintaining internet associations |
US20020080126A1 (en) * | 2000-12-21 | 2002-06-27 | Keely Leroy B. | Mode hinting and switching |
US20020099552A1 (en) * | 2001-01-25 | 2002-07-25 | Darryl Rubin | Annotating electronic information with audio clips |
US20020097270A1 (en) * | 2000-11-10 | 2002-07-25 | Keely Leroy B. | Selection handles in editing electronic documents |
FR2819916A1 (en) * | 2001-01-25 | 2002-07-26 | Numsight Sa | PROCESS FOR PROCESSING INTERNET REQUEST FILES |
US6427172B1 (en) * | 1999-07-20 | 2002-07-30 | Cyberstar, L.P. | Method and apparatus for internet cache content delivery via a data distribution system |
US20020184570A1 (en) * | 2001-05-31 | 2002-12-05 | International Business Machines Corporation | Method and apparatus for calculating data integrity metrics for web server activity log analysis |
US20030140118A1 (en) * | 2001-06-01 | 2003-07-24 | Alexander Lloyd Ian George | Apparatus and method for focused presentations of static and dynamic data using local storage media and networked web pages |
US20030164850A1 (en) * | 2002-03-01 | 2003-09-04 | Erwin Rojewski | Recording user interaction with an application |
US6760763B2 (en) | 1999-08-27 | 2004-07-06 | International Business Machines Corporation | Server site restructuring |
US20040196311A1 (en) * | 2000-03-02 | 2004-10-07 | Microsoft Corporation | Cluster-based visualization of user traffic on an internet site |
US20040205624A1 (en) * | 2001-08-01 | 2004-10-14 | Lui Charlton E. | System and method for scaling and repositioning drawings |
US6816892B1 (en) * | 1998-03-18 | 2004-11-09 | Ncr Corporation | Web-on-cd |
US6820111B1 (en) * | 1999-12-07 | 2004-11-16 | Microsoft Corporation | Computer user interface architecture that saves a user's non-linear navigation history and intelligently maintains that history |
US6820071B1 (en) * | 1997-01-16 | 2004-11-16 | Electronic Data Systems Corporation | Knowledge management system and method |
US6823339B2 (en) * | 1997-01-28 | 2004-11-23 | Fujitsu Limited | Information reference frequency counting apparatus and method and computer program embodied on computer-readable medium for counting reference frequency in an interactive hypertext document reference system |
US20040268253A1 (en) * | 1999-12-07 | 2004-12-30 | Microsoft Corporation | Method and apparatus for installing and using reference materials in conjunction with reading electronic content |
US20050071776A1 (en) * | 2002-01-31 | 2005-03-31 | Mansfield Steven M | Multifunction hyperlink and methods of producing multifunction hyperlinks |
US20050078098A1 (en) * | 2001-08-01 | 2005-04-14 | Microsoft Corporation | Dynamic rendering of ink strokes with transparency |
US20050105946A1 (en) * | 2000-06-21 | 2005-05-19 | Microsoft Corporation | Transform table for ink sizing and compression |
US20050105944A1 (en) * | 2001-06-27 | 2005-05-19 | Microsoft Corporation | Transform table for ink sizing and compression |
US20050162413A1 (en) * | 2001-08-01 | 2005-07-28 | Microsoft Corporation | Rendering ink strokes of variable width and angle |
US6925496B1 (en) | 2000-06-16 | 2005-08-02 | I-Lor, Llc | Method of enhancing hyperlinks by adding user selectable functions to hyperlinks for capturing displayable elements and the url associated with the hyperlinks and displaying a link snapshot based on the hyperlink |
US6957233B1 (en) | 1999-12-07 | 2005-10-18 | Microsoft Corporation | Method and apparatus for capturing and rendering annotations for non-modifiable electronic content |
US20050259120A1 (en) * | 2000-05-04 | 2005-11-24 | Stephen Mansfield | Method for adding a user-selectable function to a hyperlink |
US20060010396A1 (en) * | 1999-12-07 | 2006-01-12 | Microsoft Corporation | Method and apparatus for capturing and rendering text annotations for non-modifiable electronic content |
US20060015504A1 (en) * | 2004-07-15 | 2006-01-19 | Qingfeng Yu | Method and system for site path evaluation using web session clustering |
US6992687B1 (en) | 1999-12-07 | 2006-01-31 | Microsoft Corporation | Bookmarking and placemarking a displayed document in a computer system |
US20060036782A1 (en) * | 2004-08-10 | 2006-02-16 | Peterson Beth A | Method, system, and program for managing path groups to an input/output (I/O) device |
US20060059209A1 (en) * | 2004-09-14 | 2006-03-16 | Lashley Scott D | Crash recovery by logging extra data |
US7185274B1 (en) | 1999-12-07 | 2007-02-27 | Microsoft Corporation | Computer user interface architecture wherein users interact with both content and user interface by activating links |
US7209959B1 (en) * | 2000-04-04 | 2007-04-24 | Wk Networks, Inc. | Apparatus, system, and method for communicating to a network through a virtual domain providing anonymity to a client communicating on the network |
US20070106791A1 (en) * | 1996-09-03 | 2007-05-10 | Trevor Blumenau | Content display monitor |
US7219072B1 (en) * | 1999-06-01 | 2007-05-15 | International Business Machines Corporation | Method and system for co-browsing in electronic commerce |
US7234108B1 (en) | 2000-06-29 | 2007-06-19 | Microsoft Corporation | Ink thickness rendering for electronic annotations |
US20070157315A1 (en) * | 1999-08-30 | 2007-07-05 | Symantec Corporation | System and method for using timestamps to detect attacks |
US7243299B1 (en) | 2000-04-21 | 2007-07-10 | Microsoft Corporation | Methods and apparatus for displaying multiple contexts in electronic documents |
US7260781B2 (en) | 1999-12-07 | 2007-08-21 | Microsoft Corporation | System, method and user interface for active reading of electronic content |
US7277926B1 (en) * | 2000-09-28 | 2007-10-02 | International Business Machines Corporation | Business method and user interface for representing business analysis information side-by-side with product pages of an online store |
US7337389B1 (en) | 1999-12-07 | 2008-02-26 | Microsoft Corporation | System and method for annotating an electronic document independently of its content |
US20080281863A1 (en) * | 2007-05-10 | 2008-11-13 | Hewlett-Packard Development Company, L.P. | Repository system and method |
US7458014B1 (en) | 1999-12-07 | 2008-11-25 | Microsoft Corporation | Computer user interface architecture wherein both content and user interface are composed of documents with links |
US7506075B1 (en) * | 1999-12-07 | 2009-03-17 | International Business Machines Corporation | Fair elevator scheduling algorithm for direct access storage device |
US7757248B2 (en) | 1999-01-07 | 2010-07-13 | The Nielsen Company (Us), Llc | Detection of media links in broadcast signals |
US7876748B1 (en) | 2000-09-07 | 2011-01-25 | International Business Machines Corporation | Stable hash-based mapping computation for a dynamically varying target set |
US8271778B1 (en) | 2002-07-24 | 2012-09-18 | The Nielsen Company (Us), Llc | System and method for monitoring secure data on a network |
US8661111B1 (en) | 2000-01-12 | 2014-02-25 | The Nielsen Company (Us), Llc | System and method for estimating prevalence of digital content on the world-wide-web |
TWI476673B (en) * | 2013-07-25 | 2015-03-11 | Inventec Appliances Corp | Rapid page switching browsing system and method thereof |
US9185435B2 (en) | 2013-06-25 | 2015-11-10 | The Nielsen Company (Us), Llc | Methods and apparatus to characterize households with media meter data |
US9277265B2 (en) | 2014-02-11 | 2016-03-01 | The Nielsen Company (Us), Llc | Methods and apparatus to calculate video-on-demand and dynamically inserted advertisement viewing probability |
US9424240B2 (en) | 1999-12-07 | 2016-08-23 | Microsoft Technology Licensing, Llc | Annotations for electronic content |
US9848224B2 (en) | 2015-08-27 | 2017-12-19 | The Nielsen Company(Us), Llc | Methods and apparatus to estimate demographics of a household |
CN108874909A (en) * | 2018-05-28 | 2018-11-23 | 深圳壹账通智能科技有限公司 | User access path acquisition methods, server and computer storage medium |
US10219039B2 (en) | 2015-03-09 | 2019-02-26 | The Nielsen Company (Us), Llc | Methods and apparatus to assign viewers to media meter data |
US10791355B2 (en) | 2016-12-20 | 2020-09-29 | The Nielsen Company (Us), Llc | Methods and apparatus to determine probabilistic media viewing metrics |
Citations (1)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US5355487A (en) * | 1991-02-28 | 1994-10-11 | International Business Machines Corporation | Non-invasive trace-driven system and method for computer system profiling |
-
1996
- 1996-08-09 US US08/708,004 patent/US5931912A/en not_active Expired - Lifetime
Patent Citations (1)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US5355487A (en) * | 1991-02-28 | 1994-10-11 | International Business Machines Corporation | Non-invasive trace-driven system and method for computer system profiling |
Non-Patent Citations (15)
Title |
---|
Apache Server Log "Multiple Log Files" Man Page, Apache Group, 1996. |
Apache Server Log Multiple Log Files Man Page, Apache Group, 1996. * |
Build a World WIde Web Commerce Center, net.Genesis, Wiley & Sons, 1996. * |
Computer Networks, Tanenbaum, Prentice Hall, 1981, p. xiv, 36 and 86, 1981. * |
Computer Networks, Tanenbaum, Prentice-Hall, 1981, p. xiv, 36 and 86, 1981. |
Dictiornary of Computing, Oxford University Press, 1996. * |
Getstats Documentation, (www.eit.com/software/getstats.getstats.html), p. 5. * |
Silk from a sow s ear: extracting usable structures from the web, Pirolli, Peter et al., Proceedings of the 1996 Conference on Human Factors in Computing Systems, CHI 96, ACM pp. 118 125, 1996. * |
Silk from a sow's ear: extracting usable structures from the web, Pirolli, Peter et al., Proceedings of the 1996 Conference on Human Factors in Computing Systems, CHI 96, ACM pp. 118-125, 1996. |
SpeedTracer: a Web usage mining and analysis tool, Wu, K. L. et al., IBM Systems Journal, pp. 89 105, 1998. * |
SpeedTracer: a Web usage mining and analysis tool, Wu, K.-L. et al., IBM Systems Journal, pp. 89-105, 1998. |
The Computer Science and Engineering Handbook, CRC Press, pp. 211 213 (describing Prim (1957), 1997. * |
The Computer Science and Engineering Handbook, CRC Press, pp. 211-213 (describing Prim (1957), 1997. |
World Wide Web & HTML preparing documents for online presentation, MacArthur, Douglas, Dr. Dobbs Journal, pp. 18 26, Dec. 1994. * |
World Wide Web & HTML--preparing documents for online presentation, MacArthur, Douglas, Dr. Dobbs Journal, pp. 18-26, Dec. 1994. |
Cited By (140)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US7720963B2 (en) | 1996-09-03 | 2010-05-18 | The Nielsen Company (Us), Llc | Content display monitor |
US7756974B2 (en) | 1996-09-03 | 2010-07-13 | The Nielsen Company (Us), Llc. | Content display monitor |
US7720964B2 (en) | 1996-09-03 | 2010-05-18 | The Nielsen Company (Us), Llc | Content display monitor |
US8719698B2 (en) | 1996-09-03 | 2014-05-06 | Comscore, Inc. | Content display monitor |
US8713428B2 (en) | 1996-09-03 | 2014-04-29 | Comscore, Inc. | Content display monitor |
US20070106791A1 (en) * | 1996-09-03 | 2007-05-10 | Trevor Blumenau | Content display monitor |
US7650407B2 (en) | 1996-09-03 | 2010-01-19 | The Nielsen Company (Us), Llc. | Content display monitor |
US7653724B2 (en) | 1996-09-03 | 2010-01-26 | The Nielsen Company (Us), Llc. | Content display monitor |
US7716326B2 (en) | 1996-09-03 | 2010-05-11 | The Nielsen Company (Us), Llc. | Content display monitor |
US8769394B2 (en) | 1996-09-03 | 2014-07-01 | Comscore, Inc. | Content display monitor |
US6145004A (en) * | 1996-12-02 | 2000-11-07 | Walsh; Stephen Kelly | Intranet network system |
US6820071B1 (en) * | 1997-01-16 | 2004-11-16 | Electronic Data Systems Corporation | Knowledge management system and method |
US6823339B2 (en) * | 1997-01-28 | 2004-11-23 | Fujitsu Limited | Information reference frequency counting apparatus and method and computer program embodied on computer-readable medium for counting reference frequency in an interactive hypertext document reference system |
US6304904B1 (en) * | 1997-03-27 | 2001-10-16 | Intel Corporation | Method and apparatus for collecting page-level performance statistics from a network device |
US6167438A (en) * | 1997-05-22 | 2000-12-26 | Trustees Of Boston University | Method and system for distributed caching, prefetching and replication |
US6816892B1 (en) * | 1998-03-18 | 2004-11-09 | Ncr Corporation | Web-on-cd |
US6314432B1 (en) * | 1998-05-13 | 2001-11-06 | International Business Machines Corporation | System and method for retrieval, saving and printing of using hyperlinks |
US6278966B1 (en) * | 1998-06-18 | 2001-08-21 | International Business Machines Corporation | Method and system for emulating web site traffic to identify web site usage patterns |
US20100235853A1 (en) * | 1999-01-07 | 2010-09-16 | Harkness David H | Detection of media links in broadcast signals |
US7757248B2 (en) | 1999-01-07 | 2010-07-13 | The Nielsen Company (Us), Llc | Detection of media links in broadcast signals |
US7941816B2 (en) | 1999-01-07 | 2011-05-10 | The Nielsen Company (Us), Llc | Detection of media links in broadcast signals |
US20110179447A1 (en) * | 1999-01-07 | 2011-07-21 | Harkness David H | Detection of media links in broadcast signals |
US6345295B1 (en) * | 1999-01-22 | 2002-02-05 | International Business Machines Corporation | Conducting traces in a computer system attachment network |
US7219072B1 (en) * | 1999-06-01 | 2007-05-15 | International Business Machines Corporation | Method and system for co-browsing in electronic commerce |
US6427172B1 (en) * | 1999-07-20 | 2002-07-30 | Cyberstar, L.P. | Method and apparatus for internet cache content delivery via a data distribution system |
US7953839B2 (en) | 1999-08-06 | 2011-05-31 | The Nielsen Company (Us), Llc. | Network resource monitoring and measurement system and method |
US20080256235A1 (en) * | 1999-08-06 | 2008-10-16 | Lim Or Sim | Network resource monitoring and measurement system and method |
WO2001011506A1 (en) * | 1999-08-06 | 2001-02-15 | Red Sheriff Limited | Network resource monitoring and measurement system and method |
US8112511B2 (en) | 1999-08-06 | 2012-02-07 | The Nielsen Company (Us), Llc | Network resource monitoring and measurement system and method |
US8495198B2 (en) | 1999-08-06 | 2013-07-23 | Comscore, Inc. | Network resource monitoring and measurement system and method |
AU781008B2 (en) * | 1999-08-06 | 2005-04-28 | Comscore, Inc. | Network resource monitoring and measurement system and method |
US9992092B2 (en) | 1999-08-06 | 2018-06-05 | Comscore, Inc. | Network resource monitoring and measurement system and method |
US7953791B2 (en) | 1999-08-06 | 2011-05-31 | The Nielsen Company (Us), Llc. | Network resource monitoring and measurement system and method |
US6760763B2 (en) | 1999-08-27 | 2004-07-06 | International Business Machines Corporation | Server site restructuring |
US20070157315A1 (en) * | 1999-08-30 | 2007-07-05 | Symantec Corporation | System and method for using timestamps to detect attacks |
US8578490B2 (en) * | 1999-08-30 | 2013-11-05 | Symantec Corporation | System and method for using timestamps to detect attacks |
US6992687B1 (en) | 1999-12-07 | 2006-01-31 | Microsoft Corporation | Bookmarking and placemarking a displayed document in a computer system |
US7568168B2 (en) | 1999-12-07 | 2009-07-28 | Microsoft Corporation | Method and apparatus for capturing and rendering text annotations for non-modifiable electronic content |
US20040233235A1 (en) * | 1999-12-07 | 2004-11-25 | Microsoft Corporation | Computer user interface architecture that saves a user's non-linear navigation history and intelligently maintains that history |
US8627197B2 (en) | 1999-12-07 | 2014-01-07 | Microsoft Corporation | System and method for annotating an electronic document independently of its content |
US7260781B2 (en) | 1999-12-07 | 2007-08-21 | Microsoft Corporation | System, method and user interface for active reading of electronic content |
US20040268253A1 (en) * | 1999-12-07 | 2004-12-30 | Microsoft Corporation | Method and apparatus for installing and using reference materials in conjunction with reading electronic content |
US7458014B1 (en) | 1999-12-07 | 2008-11-25 | Microsoft Corporation | Computer user interface architecture wherein both content and user interface are composed of documents with links |
US6957233B1 (en) | 1999-12-07 | 2005-10-18 | Microsoft Corporation | Method and apparatus for capturing and rendering annotations for non-modifiable electronic content |
US7337389B1 (en) | 1999-12-07 | 2008-02-26 | Microsoft Corporation | System and method for annotating an electronic document independently of its content |
US20060010396A1 (en) * | 1999-12-07 | 2006-01-12 | Microsoft Corporation | Method and apparatus for capturing and rendering text annotations for non-modifiable electronic content |
US7185274B1 (en) | 1999-12-07 | 2007-02-27 | Microsoft Corporation | Computer user interface architecture wherein users interact with both content and user interface by activating links |
US20060020882A1 (en) * | 1999-12-07 | 2006-01-26 | Microsoft Corporation | Method and apparatus for capturing and rendering text annotations for non-modifiable electronic content |
US6820111B1 (en) * | 1999-12-07 | 2004-11-16 | Microsoft Corporation | Computer user interface architecture that saves a user's non-linear navigation history and intelligently maintains that history |
US9424240B2 (en) | 1999-12-07 | 2016-08-23 | Microsoft Technology Licensing, Llc | Annotations for electronic content |
US7496856B2 (en) | 1999-12-07 | 2009-02-24 | Microsoft Corporation | Method and apparatus for capturing and rendering text annotations for non-modifiable electronic content |
US7496830B2 (en) | 1999-12-07 | 2009-02-24 | Microsoft Corporation | Computer user interface architecture that saves a user's non-linear navigation history and intelligently maintains that history |
US7594187B2 (en) | 1999-12-07 | 2009-09-22 | Microsoft Corporation | Bookmarking and placemarking a displayed document in a computer system |
US8555198B2 (en) | 1999-12-07 | 2013-10-08 | Microsoft Corporation | Annotations for electronic content |
US7506075B1 (en) * | 1999-12-07 | 2009-03-17 | International Business Machines Corporation | Fair elevator scheduling algorithm for direct access storage device |
US9514479B2 (en) | 2000-01-12 | 2016-12-06 | The Nielsen Company (Us), Llc | System and method for estimating prevalence of digital content on the world-wide-web |
US8661111B1 (en) | 2000-01-12 | 2014-02-25 | The Nielsen Company (Us), Llc | System and method for estimating prevalence of digital content on the world-wide-web |
US20040196311A1 (en) * | 2000-03-02 | 2004-10-07 | Microsoft Corporation | Cluster-based visualization of user traffic on an internet site |
US7454705B2 (en) * | 2000-03-02 | 2008-11-18 | Microsoft Corporation | Cluster-based visualization of user traffic on an internet site |
US20070162590A1 (en) * | 2000-04-04 | 2007-07-12 | Campbell Douglas A | Apparatus, systems, and method for communicating to a network through a virtual domain |
US8762498B2 (en) | 2000-04-04 | 2014-06-24 | Darmate Glassworks Llc | Apparatus, system, and method for communicating to a network through a virtual domain |
US7209959B1 (en) * | 2000-04-04 | 2007-04-24 | Wk Networks, Inc. | Apparatus, system, and method for communicating to a network through a virtual domain providing anonymity to a client communicating on the network |
US8370457B2 (en) | 2000-04-04 | 2013-02-05 | Darmate Glassworks Llc | Network communication through a virtual domain |
US7496829B2 (en) | 2000-04-21 | 2009-02-24 | Microsoft Corporation | Method and apparatus for displaying multiple contexts in electronic documents |
US7243299B1 (en) | 2000-04-21 | 2007-07-10 | Microsoft Corporation | Methods and apparatus for displaying multiple contexts in electronic documents |
US20050193090A1 (en) * | 2000-05-04 | 2005-09-01 | I-Lor, Llc | Method for adding a user selectable function to a hyperlink |
US7076743B2 (en) | 2000-05-04 | 2006-07-11 | I-Lor, Llc | Method for adding a plurality of user selectable functions to a hyperlink |
US20050259120A1 (en) * | 2000-05-04 | 2005-11-24 | Stephen Mansfield | Method for adding a user-selectable function to a hyperlink |
US7206839B2 (en) | 2000-05-04 | 2007-04-17 | I-Lor, Llc | Method for adding a user selectable function to a hyperlink |
US9569555B2 (en) | 2000-05-04 | 2017-02-14 | Google Inc. | Method for adding a user-selectable function to a hyperlink |
US6925496B1 (en) | 2000-06-16 | 2005-08-02 | I-Lor, Llc | Method of enhancing hyperlinks by adding user selectable functions to hyperlinks for capturing displayable elements and the url associated with the hyperlinks and displaying a link snapshot based on the hyperlink |
US20050105946A1 (en) * | 2000-06-21 | 2005-05-19 | Microsoft Corporation | Transform table for ink sizing and compression |
US20050147300A1 (en) * | 2000-06-21 | 2005-07-07 | Microsoft Corporation | Serial storage of ink and its properties |
US7321689B2 (en) | 2000-06-21 | 2008-01-22 | Microsoft Corporation | Serial storage of ink and its properties |
US7317834B2 (en) | 2000-06-21 | 2008-01-08 | Microsoft Corporation | Serial storage of ink and its properties |
US20020013795A1 (en) * | 2000-06-21 | 2002-01-31 | Bodin Dresevie | Serial storage of ink and its properties |
US20020049787A1 (en) * | 2000-06-21 | 2002-04-25 | Keely Leroy B. | Classifying, anchoring, and transforming ink |
US7346230B2 (en) | 2000-06-21 | 2008-03-18 | Microsoft Corporation | Transform table for ink sizing and compression |
US20050103871A1 (en) * | 2000-06-21 | 2005-05-19 | Microsoft Corporation | Serial storage of ink and its properties |
US7397949B2 (en) | 2000-06-21 | 2008-07-08 | Microsoft Corporation | Serial storage of ink and its properties |
US20050103872A1 (en) * | 2000-06-21 | 2005-05-19 | Microsoft Corporation | Serial storage of ink and its properties |
US7006711B2 (en) | 2000-06-21 | 2006-02-28 | Microsoft Corporation | Transform table for ink sizing and compression |
US7259753B2 (en) | 2000-06-21 | 2007-08-21 | Microsoft Corporation | Classifying, anchoring, and transforming ink |
US7319789B2 (en) | 2000-06-21 | 2008-01-15 | Microsoft Corporation | Serial storage of ink and its properties |
US7234108B1 (en) | 2000-06-29 | 2007-06-19 | Microsoft Corporation | Ink thickness rendering for electronic annotations |
US7730391B2 (en) | 2000-06-29 | 2010-06-01 | Microsoft Corporation | Ink thickness rendering for electronic annotations |
US7876748B1 (en) | 2000-09-07 | 2011-01-25 | International Business Machines Corporation | Stable hash-based mapping computation for a dynamically varying target set |
US7277926B1 (en) * | 2000-09-28 | 2007-10-02 | International Business Machines Corporation | Business method and user interface for representing business analysis information side-by-side with product pages of an online store |
US20020055933A1 (en) * | 2000-10-19 | 2002-05-09 | Kirk Feathers | Method and system for dynamically maintaining internet associations |
US20020097270A1 (en) * | 2000-11-10 | 2002-07-25 | Keely Leroy B. | Selection handles in editing electronic documents |
US6891551B2 (en) | 2000-11-10 | 2005-05-10 | Microsoft Corporation | Selection handles in editing electronic documents |
US20020080126A1 (en) * | 2000-12-21 | 2002-06-27 | Keely Leroy B. | Mode hinting and switching |
US7002558B2 (en) | 2000-12-21 | 2006-02-21 | Microsoft Corporation | Mode hinting and switching |
FR2819916A1 (en) * | 2001-01-25 | 2002-07-26 | Numsight Sa | PROCESS FOR PROCESSING INTERNET REQUEST FILES |
WO2002059781A2 (en) * | 2001-01-25 | 2002-08-01 | Numsight Sa | Method for processing internet request files |
US20020099552A1 (en) * | 2001-01-25 | 2002-07-25 | Darryl Rubin | Annotating electronic information with audio clips |
WO2002059781A3 (en) * | 2001-01-25 | 2003-02-20 | Numsight Sa | Method for processing internet request files |
US7035772B2 (en) * | 2001-05-31 | 2006-04-25 | International Business Machines Corporation | Method and apparatus for calculating data integrity metrics for web server activity log analysis |
US20020184570A1 (en) * | 2001-05-31 | 2002-12-05 | International Business Machines Corporation | Method and apparatus for calculating data integrity metrics for web server activity log analysis |
US20030140118A1 (en) * | 2001-06-01 | 2003-07-24 | Alexander Lloyd Ian George | Apparatus and method for focused presentations of static and dynamic data using local storage media and networked web pages |
US20050105945A1 (en) * | 2001-06-27 | 2005-05-19 | Microsoft Corporation | Transform table for ink sizing and compression |
US7343053B2 (en) | 2001-06-27 | 2008-03-11 | Microsoft Corporation | Transform table for ink sizing and compression |
US7346229B2 (en) | 2001-06-27 | 2008-03-18 | Microsoft Corporation | Transform table for ink sizing and compression |
US20050105944A1 (en) * | 2001-06-27 | 2005-05-19 | Microsoft Corporation | Transform table for ink sizing and compression |
US7236180B2 (en) | 2001-08-01 | 2007-06-26 | Microsoft Corporation | Dynamic rendering of ink strokes with transparency |
US20050078098A1 (en) * | 2001-08-01 | 2005-04-14 | Microsoft Corporation | Dynamic rendering of ink strokes with transparency |
US20040205624A1 (en) * | 2001-08-01 | 2004-10-14 | Lui Charlton E. | System and method for scaling and repositioning drawings |
US20050162413A1 (en) * | 2001-08-01 | 2005-07-28 | Microsoft Corporation | Rendering ink strokes of variable width and angle |
US20050078097A1 (en) * | 2001-08-01 | 2005-04-14 | Microsoft Corporation | Dynamic rendering of ink strokes with transparency |
US7168038B2 (en) | 2001-08-01 | 2007-01-23 | Microsoft Corporation | System and method for scaling and repositioning drawings |
US7352366B2 (en) | 2001-08-01 | 2008-04-01 | Microsoft Corporation | Dynamic rendering of ink strokes with transparency |
US7091963B2 (en) | 2001-08-01 | 2006-08-15 | Microsoft Corporation | Dynamic rendering of ink strokes with transparency |
US20050071776A1 (en) * | 2002-01-31 | 2005-03-31 | Mansfield Steven M | Multifunction hyperlink and methods of producing multifunction hyperlinks |
US7139978B2 (en) * | 2002-03-01 | 2006-11-21 | Sap Ag | Recording user interaction with an application |
US20030164850A1 (en) * | 2002-03-01 | 2003-09-04 | Erwin Rojewski | Recording user interaction with an application |
US8799643B2 (en) | 2002-07-24 | 2014-08-05 | The Nielsen Company (Us), Llc | System and method for monitoring secure data on a network |
US9401897B2 (en) | 2002-07-24 | 2016-07-26 | The Nielsen Company (Us), Llc. | System and method for monitoring secure data on a network |
US8271778B1 (en) | 2002-07-24 | 2012-09-18 | The Nielsen Company (Us), Llc | System and method for monitoring secure data on a network |
US8572233B2 (en) | 2004-07-15 | 2013-10-29 | Hewlett-Packard Development Company, L.P. | Method and system for site path evaluation using web session clustering |
US20060015504A1 (en) * | 2004-07-15 | 2006-01-19 | Qingfeng Yu | Method and system for site path evaluation using web session clustering |
US7743180B2 (en) * | 2004-08-10 | 2010-06-22 | International Business Machines Corporation | Method, system, and program for managing path groups to an input/output (I/O) device |
US20060036782A1 (en) * | 2004-08-10 | 2006-02-16 | Peterson Beth A | Method, system, and program for managing path groups to an input/output (I/O) device |
US20060059209A1 (en) * | 2004-09-14 | 2006-03-16 | Lashley Scott D | Crash recovery by logging extra data |
US20080281863A1 (en) * | 2007-05-10 | 2008-11-13 | Hewlett-Packard Development Company, L.P. | Repository system and method |
US9185435B2 (en) | 2013-06-25 | 2015-11-10 | The Nielsen Company (Us), Llc | Methods and apparatus to characterize households with media meter data |
TWI476673B (en) * | 2013-07-25 | 2015-03-11 | Inventec Appliances Corp | Rapid page switching browsing system and method thereof |
US9277265B2 (en) | 2014-02-11 | 2016-03-01 | The Nielsen Company (Us), Llc | Methods and apparatus to calculate video-on-demand and dynamically inserted advertisement viewing probability |
US9544632B2 (en) | 2014-02-11 | 2017-01-10 | The Nielsen Company (Us), Llc | Methods and apparatus to calculate video-on-demand and dynamically inserted advertisement viewing probability |
US9774900B2 (en) | 2014-02-11 | 2017-09-26 | The Nielsen Company (Us), Llc | Methods and apparatus to calculate video-on-demand and dynamically inserted advertisement viewing probability |
US10757480B2 (en) | 2015-03-09 | 2020-08-25 | The Nielsen Company (Us), Llc | Methods and apparatus to assign viewers to media meter data |
US11785301B2 (en) | 2015-03-09 | 2023-10-10 | The Nielsen Company (Us), Llc | Methods and apparatus to assign viewers to media meter data |
US10219039B2 (en) | 2015-03-09 | 2019-02-26 | The Nielsen Company (Us), Llc | Methods and apparatus to assign viewers to media meter data |
US11516543B2 (en) | 2015-03-09 | 2022-11-29 | The Nielsen Company (Us), Llc | Methods and apparatus to assign viewers to media meter data |
US9848224B2 (en) | 2015-08-27 | 2017-12-19 | The Nielsen Company(Us), Llc | Methods and apparatus to estimate demographics of a household |
US10924791B2 (en) | 2015-08-27 | 2021-02-16 | The Nielsen Company (Us), Llc | Methods and apparatus to estimate demographics of a household |
US10298982B2 (en) | 2015-08-27 | 2019-05-21 | The Nielsen Company (Us), Llc | Methods and apparatus to estimate demographics of a household |
US11700405B2 (en) | 2015-08-27 | 2023-07-11 | The Nielsen Company (Us), Llc | Methods and apparatus to estimate demographics of a household |
US10791355B2 (en) | 2016-12-20 | 2020-09-29 | The Nielsen Company (Us), Llc | Methods and apparatus to determine probabilistic media viewing metrics |
US11778255B2 (en) | 2016-12-20 | 2023-10-03 | The Nielsen Company (Us), Llc | Methods and apparatus to determine probabilistic media viewing metrics |
CN108874909A (en) * | 2018-05-28 | 2018-11-23 | 深圳壹账通智能科技有限公司 | User access path acquisition methods, server and computer storage medium |
Similar Documents
Publication | Publication Date | Title |
---|---|---|
US5931912A (en) | Traversal path-based approach to understanding user-oriented hypertext object usage | |
US8572100B2 (en) | Method and system for recording search trails across one or more search engines in a communications network | |
KR100377715B1 (en) | Method and system for prefetching information | |
Pitkow | Summary of WWW characterizations | |
US6411998B1 (en) | World wide web internet delay monitor | |
US6078956A (en) | World wide web end user response time monitor | |
US6304904B1 (en) | Method and apparatus for collecting page-level performance statistics from a network device | |
US7389343B2 (en) | Method, system and program product for tracking web user sessions | |
CA2300239C (en) | A content-indexing search system and method providing search results consistent with content filtering and blocking policies implemented in a blocking engine | |
EP1325434B1 (en) | A method for searching and analysing information in data networks | |
CA2408233C (en) | Network usage monitoring device and associated method | |
Cunha et al. | Characteristics of WWW client-based traces | |
US7246101B2 (en) | Knowledge-based system and method for reconstructing client web page accesses from captured network packets | |
US6480853B1 (en) | Systems, methods and computer program products for performing internet searches utilizing bookmarks | |
US7437451B2 (en) | System and method for collecting desired information for network transactions at the kernel level | |
US20060212265A1 (en) | Method and system for assessing quality of search engines | |
US20030046343A1 (en) | Method for improving web performance by adapting servers based on client cluster characterization | |
US20070226229A1 (en) | Method and system for class-based management of dynamic content in a networked environment | |
US20050076111A1 (en) | System and method for relating aborted client accesses of data to quality of service provided by a server in a client-server network | |
US20020198961A1 (en) | Method for improving web performance by client characterization-driven server adaptation | |
CN101551813A (en) | Network connection apparatus, search equipment and method for collecting search engine data source | |
US20070022082A1 (en) | Search engine coverage | |
US7222170B2 (en) | Tracking hits for network files using transmitted counter instructions | |
AU2004313991B2 (en) | Method and system for recording search trails across one or more search engines in a communications network | |
Wright | Constituencies for users: How to develop them by interpreting logs of web site access |
Legal Events
Date | Code | Title | Description |
---|---|---|---|
AS | Assignment |
Owner name: IBM CORPORATION, NEW YORKFree format text: ASSIGNMENT OF ASSIGNORS INTEREST;ASSIGNORS:WU, KUN-LUNG;YU, PHILIP SHI-LUNG;REEL/FRAME:008195/0173Effective date: 19960808 |
|
STCF | Information on status: patent grant |
Free format text: PATENTED CASE |
|
FPAY | Fee payment |
Year of fee payment: 4 |
|
FPAY | Fee payment |
Year of fee payment: 8 |
|
REMI | Maintenance fee reminder mailed | ||
FPAY | Fee payment |
Year of fee payment: 12 |
|
SULP | Surcharge for late payment |
Year of fee payment: 11 |
|
AS | Assignment |
Owner name: GOOGLE INC., CALIFORNIAFree format text: ASSIGNMENT OF ASSIGNORS INTEREST;ASSIGNOR:INTERNATIONAL BUSINESS MACHINES CORPORATION;REEL/FRAME:026664/0866Effective date: 20110503 |
|
AS | Assignment |
Owner name: GOOGLE LLC, CALIFORNIAFree format text: CHANGE OF NAME;ASSIGNOR:GOOGLE INC.;REEL/FRAME:044127/0735Effective date: 20170929 |