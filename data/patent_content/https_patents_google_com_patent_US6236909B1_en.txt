US6236909B1 - Method for representing automotive device functionality and software services to applications using JavaBeans - Google Patents
Method for representing automotive device functionality and software services to applications using JavaBeans Download PDFInfo
- Publication number
- US6236909B1 US6236909B1 US09/221,890 US22189098A US6236909B1 US 6236909 B1 US6236909 B1 US 6236909B1 US 22189098 A US22189098 A US 22189098A US 6236909 B1 US6236909 B1 US 6236909B1
- Authority
- US
- United States
- Prior art keywords
- java
- component
- javabean
- control unit
- electronic control
- Prior art date
- Legal status (The legal status is an assumption and is not a legal conclusion. Google has not performed a legal analysis and makes no representation as to the accuracy of the status listed.)
- Expired - Lifetime
Links
Images
Classifications
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F21/00—Security arrangements for protecting computers, components thereof, programs or data against unauthorised activity
- G06F21/60—Protecting data
- G06F21/62—Protecting access to data via a platform, e.g. using keys or access control rules
- G06F21/6218—Protecting access to data via a platform, e.g. using keys or access control rules to a system of files or objects, e.g. local or distributed file system or database
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F8/00—Arrangements for software engineering
- G06F8/20—Software design
- G06F8/24—Object-oriented
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F2221/00—Indexing scheme relating to security arrangements for protecting computers, components thereof, programs or data against unauthorised activity
- G06F2221/21—Indexing scheme relating to G06F21/00 and subgroups addressing additional information or applications relating to security arrangements for protecting computers, components thereof, programs or data against unauthorised activity
- G06F2221/2113—Multi-level security, e.g. mandatory access control
-
- Y—GENERAL TAGGING OF NEW TECHNOLOGICAL DEVELOPMENTS; GENERAL TAGGING OF CROSS-SECTIONAL TECHNOLOGIES SPANNING OVER SEVERAL SECTIONS OF THE IPC; TECHNICAL SUBJECTS COVERED BY FORMER USPC CROSS-REFERENCE ART COLLECTIONS [XRACs] AND DIGESTS
- Y10—TECHNICAL SUBJECTS COVERED BY FORMER USPC
- Y10S—TECHNICAL SUBJECTS COVERED BY FORMER USPC CROSS-REFERENCE ART COLLECTIONS [XRACs] AND DIGESTS
- Y10S707/00—Data processing: database and file management or data structures
- Y10S707/99941—Database schema or data structure
- Y10S707/99944—Object-oriented database structure
Definitions
- computing architectures have incorporated a component approach.
- the base platform is composed by lower level components in an architecturally consistent fashion.
- This approach yields a more modular approach to software platforms, which allow any component to be replaced by another component, which achieves the same task. What allows this exchangeability of components is the standardization of software interfaces.
- a component is built to support one or more interfaces and provides these services to the computing platform. Any other component, which also implements those interfaces, can be used as a replacement.
- component architectures appear in the current art. These examples include the ActiveX architecture produced by Microsoft and the JavaBeans component model for Java produced by Sun Microsystems.
- PC Personal Computer
- This configuration includes: CPU, memory, keyboard, mouse, monitor, serial port, and a small number of standard bus architectures, which attach external devices to the computing platform on the PC.
- Automotive embedded computing differs from PC and other Pervasive Computing situations because an automobile is a federation of connected devices as opposed to a single fit for purpose device like a smart pager or cellular telephone, or a reliable configuration of devices as is defined by the defacto standard PC.
- Applications need access to functionality conveyed by devices on the automobile, either to poll their current status, as in the case of a fuel gauge, or manipulate the device, as in the case of radio station presets on a radio application. Because the population of devices can vary by individual automobile based on dealer and aftermarket device add-ons, the applications cannot rely on a fixed, standard population of devices. As a result, applications need to be written in a manner that is independent of device implementation and device configuration. When applications are written to standard APIs, independent of implementation details, they are more portable across car models and option/aftermarket add-on device populations. In addition, they are simpler because applications tend not to be littered with low level device-dependent implementation details.
- applications need to be constructed in a manner in which access to device and software service functionality is done through an industry standard application programming interface (API) and not through details specific to one particular implementation of the device or software service.
- API application programming interface
- This allows applications to run with little or no modification on a greater variety of device configurations and automotive computing platform environments.
- This also allows applications to be added to the automotive computing platform throughout the life of the automobile, in particular, it enables third party software developers to construct applications to run on the automobile's computing platform.
- AutoPC is an API set developed by Microsoft Corporation, which extends the WinCE operating system into the automotive industry.
- the WinCE operating system is an operating system available from Microsoft Corporation.
- AutoPC uses the classic procedural approach of providing a set of data structures and function APIs to manipulate them.
- certain device functionality on the automobile may be benign and has little security issues.
- Other device functionality such as adjusting power seats, unlocking car doors, current GPS data, or manufacturer proprietary engine diagnostics data do have requirements for restricted access.
- Access to these devices or software services is important for certain applications, but uncontrolled access to these devices by any user over the internet (or directly connected) poses a security risk.
- secure access to on-board device functionality is a requirement of automotive network computing.
- the present invention provides a method, apparatus, and instruction for use in an automotive computing environment for representing automotive device functionality and software services as software components of the automotive computing platform.
- a computing platform is used on a vehicle in which the computing platform is capable of executing computer program instructions written in the Java programming language.
- a component repository is employed such that software applications can determine the availability of the JavaBean components and establish access to any component's functionality using Java programming language method invocation.
- the present invention provides a first mechanism used by applications to locate the component repository, this is known as repository discovery.
- a second mechanism is present for applications to query the repository to determine availability of components, this is known as component lookup.
- a third mechanism is available by which applications can gain access to components from the component repository.
- FIG. 1 is a block diagram showing a typical computing environment on an automobile in which the present invention may be practiced;
- FIG. 2 is a block diagram representing the repository of program components found on the automobile computing platform
- FIG. 3 illustrates how the automobile's complement of JavaBean components are constructed and registered into the repository
- FIG. 4 illustrates how software applications are constructed using JavaBeans
- FIG. 5 illustrates how software applications discover the registry on the automobile's computing platform, query the registry for required JavaBean functionality, and gain reference to a JavaBean representing device functionality or software service;
- FIG. 6 is a diagram of the components in a registry used for component lookup controlled by a security mechanism in accordance with a preferred embodiment of the present invention
- FIGS. 7A and 7B are tables illustrating entries in databases contained within a registry in accordance with a preferred embodiment of the present invention.
- FIG. 7C is a table containing multiple objects for an object or component type illustrated in accordance with a preferred embodiment of the present invention.
- FIG. 8 is a flowchart of a process for creating a JavaBean component in accordance with a preferred embodiment of the present invention.
- FIG. 9 is a flowchart of a process used in registering a set of JavaBean components and associated user profiles in accordance with a preferred embodiment of the present invention.
- FIG. 10 is a flowchart of a process used in a lookup mechanism in a registry in accordance with a preferred embodiment of the present invention.
- FIG. 11 is a flowchart of a process used to log on a user or driver of a vehicle in accordance with a preferred embodiment of the present invention.
- the present invention provides a solution to integrating and providing communication between applications and devices in a vehicle that has impact on Java-based automotive computing at several points in the software systems development life-cycle: 1) device and software services component development, 2) application development, 3) system configuration time, and 4) system run-time.
- the present invention provides a method, apparatus, and instructions for use in an automotive computing platform.
- Standard Java APIs for the devices and software services are available on the computing platform in accordance with a preferred embodiment of the present invention. These implementations are in the form of JavaBeans.
- the present invention provides a method, apparatus, and instructions for representing the hardware and software components of an automotive platform using the JavaBeans component model for Java.
- API application programming interface
- An API is applied to all of the devices, which appear in a vehicle, such as an automobile.
- the mechanism or electronic means of querying or manipulating the device is present.
- these device standard APIs are defined in terms of Java interface definitions.
- JavaBeans component model The standard component model in Java is the JavaBeans component model.
- a JavaBean has two parts. The first part is the ‘public face’ the commitment to implement a standard Java interface representing an automotive device or software service. This defines a type in the Java language with which JavaBean is compatible. The second part is a web of collaborating Java instances that fulfill the interface implementation commitment. This web of instances collaborate to complete the bus and device specific implementation details in order that the semantics of the Java interface definition are properly implemented.
- Software services such as a network stack for off vehicle data communications, or a sound output service utilizing the car's speakers are also representable as JavaBeans.
- JavaBeans offer a superior approach to representing automotive devices and software services to Java applications for several reasons.
- a component model approach offers an efficient mechanism for applications to cope with the variety of devices and services, which may exist on an automobile.
- the configuration of an automobile's devices and services may be done either dynamically or statically through JavaBean serialization. Static configuration is more memory space efficient and cost efficient.
- a JavaBean can represent as a unit, a collaborating web of Java instances which proxy the device or convey the service. This allows the device interface implementation to be made out of a collaborating set of objects, some of which are reused for other device implementations.
- a gateway object that encapsulates access mechanisms to an automotive bus can provide service to the device JavaBean proxies for each device on that bus.
- applications can be composed of lower-level component building blocks. This composition is done in an implementation independent fashion, offering more portability of applications.
- Componentization with JavaBeans offers a higher degree of flexibility when packaging applications and system configurations.
- a registry is employed to provide applications access to the various JavaBean components.
- the registry is augmented with an ability to index the registry entry with a set of objects, keyed by an authorization level.
- a lookup mechanism is used to access the registry in which the lookup mechanism includes as a parameter, the authorization certificate of the requesting application.
- the authorization level is compared with the set of entries indexed by authorization.
- the authorization is based on an X509 certificate, used to map the requesting agent to a user profile stored in the registry.
- User profiles could include: owner, driver, content provider, ISP, dealer, third party mechanic, manufacturer, other, etc.
- the object returned depends on matching the given authorization level with one of the collection of components within the directory entry. In the depicted example, if a match between the authorization level of a component and the authorization level of a user is absent, the user is not allowed access to this particular component. The user is told that the particular component is absent from the vehicle.
- FIG. 1 a block diagram of an automotive computing platform in an automobile is depicted in accordance with a preferred embodiment of the present invention.
- the automobile 100 shown in FIG. 1 includes a computing platform 102 , which contains a central processing unit (CPU) 104 and a computer memory 106 .
- CPU 104 is an embedded processor in this example, but may be implemented using other processors, such as, for example, a Pentium Processor from Intel Corporation. “Pentium” is a trademark of Intel Corporation.
- Memory 106 in this example, may be in the form of read only memory (ROM), random access memory (RAM), non-volatile RAM and/or flash memory.
- Computing platform 102 also hosts a component registry 108 .
- a mass storage device 110 may be found in automotive platform 100 .
- Component registry may be stored on mass storage 110 or may be located in both memory 106 and mass storage 110 .
- Mass storage device may be, for example, a hard disk drive or a CD-ROM drive.
- Software components 112 configured with the computing platform 102 , are stored in component registry 108 .
- Software applications may also be stored in component registry 108 .
- ECUs 114 a - 114 c Electronice control units
- ECUs 114 a - 114 c also may be in the form of electronic equipment, such as a stereo system or mobile phone installed in automobile 100 .
- ECUs may be connected via one or more data communications buses 116 of various architectures within automobile 100 .
- the automotive industry uses different bus architectures than are common in the computing industry.
- Example automotive bus architectures that may be used within an automobile include architectures such as Controller Area Network (CAN), J1850; Intelligent Transportation System Data Bus (IDB); MultiMedia Link (MML), and MOST.
- CAN Controller Area Network
- J1850 Intelligent Transportation System Data Bus
- IDB Intelligent Transportation System Data Bus
- MML MultiMedia Link
- MOST MultiMedia Link
- CAN is a protocol that was developed in Europe for passenger cars and is internationally standardized under ISO 11898.
- J1850 is a Society of Automotive Engineers (SAE) standard developed by various automotive manufacturers.
- IDB is defined by SAE and is a serial communications bus that creates an open, nonproprietary standard architecture to allow multiple electronic devices to be installed easily, cost effectively, and safely in any vehicle.
- MML is a bus architecture developed by Delco/Delphi. Lower speed bus architectures are often used to network ECUs in the engine compartments, the chassis and the cabin. Higher speed bus architectures are used to stream multimedia data between entertainment devices in the car such as between the radio and the in-cabin speakers.
- Each type of bus defines the format of the message protocols that determine the mechanism by which devices connected to the bus may communicate.
- Computing platform 102 is connected to one or more of the automotive buses or discrete points of input/output (I/O) through an electronic connection of some means.
- This connection is known as a gateway 118 .
- Gateway 118 is a combination of hardware and software, providing a mechanism by which the components and applications, running on the automotive computing platform, may communicate with the ECUs 114 a - 114 b.
- Computing platform 102 may also support other bus architectures more commonly found in the computing industry. Connections such as serial connections or Universal Serial Bus (USB) 120 may be used.
- the gateway 122 provides similar mechanism as described for gateway 118 to bus 116 .
- Connected devices such as a laptop computer 124 or an engine function diagnostic console 126 may be connected to the computing platform 102 using this type of gateway.
- a smart card device 128 may be attached to USB 120 for use in logging on a driver or user of the vehicle. Depending on the implementation, a driver or user of a vehicle may be required to log in to use the vehicle.
- a smart card which is a device with a circuit board or other circuitry containing built in logic or firmware in which information, such as a certificate may be located.
- This smart card is typically a credit card sized device, but may be incorporated into an ignition key to form a smart key.
- FIG. 1 illustrates a computing platform connected to components by buses
- other types of connections may be employed.
- discrete connections between computing platform 102 and the various components, such as ECU's 114 a - 114 c may be employed in place of bus 116 .
- Component registry 108 includes a component database 200 with components 202 a - 202 c.
- Components 202 a - 202 c found in database 200 may be, for example, without limitation, software representations of devices available on the automobile, software services (such as a data communications stack for off vehicle data communications) or applications.
- Component registry 108 includes a registration mechanism 204 by which components can be inserted into, modified, and/or removed from the database.
- Component registry 108 also contains a discovery mechanism 206 by which applications can locate component registry 108 .
- Discovery mechanism 206 can be implemented in a number of ways, such as, for example, as a broadcast mechanism on one or more of the bus architectures connected to the computing platform.
- discovery mechanism 206 may be embodied by a well-known memory address published in the architectural specifications of the computing platform, or it can also be embodied by a well-known name in the data communications address space of the computing platform.
- Component registry 108 also has a lookup mechanism 208 by which applications can query the contents of the component database 200 and gain reference to one or more of these components 202 a - 202 c.
- Lookup mechanism 208 receives a query from an application specifying the kind of component that the application requires.
- the embodiment of this query can include any predicate of name/value pairs. This is known in the art as query-by-example. It can also be embodied by specifying the required component in terms of the required interfaces the component must support or implement.
- the mechanism of reference is the standard object reference model as conveyed by the Java programming model.
- FIG. 3 a diagram illustrating a creation and registration of components with a registry in an automotive computing platform is shown in accordance with a preferred embodiment of the present invention.
- the process starts by the programmer understanding the details on the functionality conveyed by an ECU software driver 300 , including the specification of the ECU's external application programming interface (API) and bus message protocols understood by ECU software driver 300 .
- API application programming interface
- the programmer needs to understand the API that the software driver presents.
- the programmer also uses specifications of the mechanism by which that functionality can be accessed as well as the facilities made available by the corresponding gateway (i.e. gateway 118 in FIG. 1 ), which connects the computing platform to the ECU.
- gateway i.e. gateway 118 in FIG. 1
- Java interfaces 302 are described in the form of textual specification or source code defining the Java interface itself.
- a Java programming language development environment 304 is used, for example, to define the JavaBean corresponding to a device or software service.
- Java programming language development environment 304 may be implemented using VisualAge for Java in accordance with a preferred embodiment of the present invention. VisualAge for Java is available from International Business Machines Corporation. In the case of a JavaBean representing an ECU, details of the ECUs API and message programming protocols are input to this process.
- the JavaBean is constructed using the Java Native Interface (JNI) to access low-level programming constructs such as sending messages on an automotive bus, usually implemented in a lower-level procedural programming language such as C.
- JNI Java Native Interface
- C a lower-level procedural programming language
- JNI is a standard programming interface for writing Java native methods and embedding the Java virtual machine into native applications. The primary goal of this interface is to provide binary compatibility of native method libraries across all Java virtual machine implementations on a given platform. These details may be completely embodied in the gateway to that bus, in which case the JavaBean need not have any native code.
- the JavaBean must implement the standard interface for that device if such a standard has been defined. These interface standards are input into the development environment.
- the developer uses the development environment to create the set of classes that collaborate to form the JavaBean, create property sheets and/or customize objects to help systems integrators adapt the JavaBean to a particular automotive computing platform implementation.
- JavaBean component 306 The output of the development environment is a JavaBean component 306 .
- the JavaBean component 306 is typically composed of one or more Java class files and is often conveyed in the form of a Java Archive (JAR) file.
- JavaBean component 306 is input to the automotive computing platform's component registry using the registry's registration mechanism 204 in FIG. 2 .
- the registration mechanism uses interface 308 between itself and the database of components 310 to insert the JavaBean component into the database.
- JavaBean component 306 is now available for applications to use in order to access device functionality or software services on the platform.
- FIG. 4 a diagram illustrates a process of how automotive software applications can be built using the component model described in this invention.
- the process begins with a specification 400 , which is the intended functionality of the application.
- Specification 400 is usually embodied as a textual description, which may include use cases, scenarios, functional requirements and non-functional requirements.
- a standard interface 402 of the automotive computing platform's component registry is also input to this process.
- standard interface 402 is a Java interface, which describes the standard application programming interface to the component registry on any automotive computing platform.
- Java interfaces 404 to components on the automobile such as devices and/or software services. Java interfaces are preferably uniform or standard for all devices to which a computing platform is to interface in accordance with a preferred embodiment of the present invention.
- the programmer uses a Java programming language development environment 400 such as IBM's VisualAge for Java.
- the programmer imports the definition for the component registry's interface as well as the standard interfaces to whichever device or software service components required by the application.
- the output of the development environment 406 is an application 408 in the form of a Java Application or Java Applet.
- the embodiment of this output can be a Java class file or a Java Archive (JAR) file.
- Visual programming is an important productivity tool used in software development.
- Advanced automotive software development environments may also integrate a simulation environment to accelerate development and testing of automotive applications.
- a JavaBean representing a device could be programmed by the device manufacturer to include a graphical representation of the device suitable for the simulation environment.
- the application developer can use the JavaBean in a simulation environment to develop and test his/her application. These temporary graphical representations are stripped out by the packaging operation of the application.
- Application 408 can be downloaded onto the automotive computing platform in a number of ways.
- Application 408 can be packaged with the platform itself, for example as an image stored in the platform's mass storage device 110 in computing center 102 .
- This package mechanism may also place application 408 in a ROM in memory 106 using a tool, which converts Java application files into code, which can reside in ROM.
- the application may alternatively be installed as a component into component registry 108 using the registration mechanism available from the automotive computing platform's component registry as described earlier.
- Application 408 may also be loaded over the network as a Java applet in a dynamic and yet secure fashion.
- application 408 can be added to the automotive computing platform at any time during the development process.
- An application can be developed as part of the automotive computing platform during manufacturing, added later as a component in the automotive computing platform's component registry or downloaded from the Internet using Javas' secure mechanism of class loading over a data communications network.
- FIG. 5 a diagram illustrating the mechanism by which an application running on the automotive computing platform can access components representing devices and software service functionality is shown in accordance with a preferred embodiment of the present invention.
- An application 500 running on the automotive computing platform, can discover component registry 108 using the discovery mechanism 206 of component registry 108 as described previously. Once application 500 has a reference to component registry 108 , application 500 can use lookup mechanism 208 to query the component database 200 to determine if the required functionality is conveyed by a component registered with the component registry 108 . If such a component is available in the registry, lookup mechanism 208 returns to application 500 , a reference to that component.
- the component may be JavaBean component 502 .
- application 500 can access the device or software service functionality by invoking methods on JavaBean component 502 , using the normal mechanism of Java method invocation.
- FIG. 6 a diagram of the components in a registry used for component lookup controlled by a security mechanism is depicted in accordance with a preferred embodiment of the present invention.
- An application 600 uses lookup mechanism 208 in registry 108 to request a component from database 200 that satisfies a particular set of properties (for example matches a well known name or implements a given Java Interface).
- Lookup mechanism 208 in registry 108 restricts access to components by requiring application 600 to supply an authentication token 602 .
- authentication may be achieved using an X509 certificate, which is a CCITT X series certificate.
- CCITT X series is a set of recommendations adopted by the International Telecommunications Union (ITU-T), formerly the CCITT, and ISO for standardizing equipment and protocols used in both public-access and private computer networks.
- a certificate is a file that identifies a person or organization. The certificate may encrypt information used to certify the identity of an owner of the certificate. In the depicted example, the certificate may be retrieved from a smart key 604 , which contains the certificate.
- the token can be retrieved from the automobile occupant in myriad ways. These include: encoding an X509 certificate on the ignition key during dealer preparation of vehicle before delivery of customer; requiring the occupant to perform a system logon, including user ID and password and using this user ID/password combination as authentication; and recording voice patterns associated with the occupant and recognizing the occupant based on voice recognition in response to a system greeting/challenge issued by the automotive computing platform.
- the registry has a database 604 , which matches instances of the preferred embodiment of the authentication token (X509, voice recognition , user ID/password) into one or more user profile(s).
- Standard user profiles may be associated with the automotive computing platform, which may include: guest, owner, driver, passenger, authorized mechanic, authorized dealership mechanic, authorized factory engineer. There may also be other user profiles that are specific to and are defined by system services or third party applications installed on the computing platform.
- Database 604 may be implemented in a number of ways, such as, for example, a X509 public key chain.
- the lookup mechanism 208 matches the lookup request with all qualifying components found in the database of components 200 .
- lookup mechanism 208 concurrently access database 604 , containing user profiles, to establish a user profile associated with the lookup request, submitted by application 600 . Based upon the user profile associated with authentication token 602 supplied by application 600 , lookup mechanism 208 reduces the set of components matching the submitted request by filtering out those components that do not match the privileges associated with that user profile.
- lookup mechanism 208 will return the component containing the most functionality. If there are no components that satisfy these restrictions, the value null is returned to application 600 , indicating that no component is available.
- the response of the registry can take a few forms. For example, the registry may raise an exception that the service is not available or may disable the device (in severe cases this may be the best response for an apparent attack, requiring the dealer or authorized administrator to “enable” the JavaBean again).
- the registry may leave the JavaBean intact, but increase the security required to access it (a defensive posture as well). Or, the registry may respond exactly the same as if there was no corresponding entry in the database; the application could not tell the difference between “device is not present” and “device is there, but you don't have authority to view it”.
- Table 700 in FIG. 7A is a table illustrating entries for user profiles in database 604 while table 702 in FIG. 7B illustrates entries for components in database 200 .
- Each entry in table 702 includes a reference (not shown) to the component associated with the entry. This reference is a standard Java reference.
- profile names are associated with authorization levels for use by lookup mechanism 208 to determine whether a component meeting the criteria in an application should be returned to the application.
- entry 704 is a driver having an authorization level of 6
- entry 706 is an owner having an authorization level of 5
- entry 708 is a third party mechanic having an authorization level of 4
- entry 710 is a dealer having an authorization level of 3
- entry 712 is a manufacturer having an authorization level of 2
- entry 714 is a designer having an authorization level of 1 .
- the profile for the driver in entry 704 may be unique for each driver of the vehicle.
- components are associated with authorization levels so that lookup mechanism 208 can determine whether to return a component to an application based on the authorization level of the user as defined in a user profile entry in table 700 .
- entry 716 includes a stereo component having an authorization level of 6
- entry 718 is a fuel gauge component having an authorization level of 6
- entry 720 is a fuel injection component having an authorization level of 4
- entry 722 is a power seat component having an authorization level of 6
- entry 724 is a standard engine diagnostics component having an authorization level of 4
- entry 726 is Et global positioning satellite (GPS) component having an authorization level 5
- entry 728 is a proprietary engine diagnostics component having an authorization level of 1 .
- GPS global positioning satellite
- entry 728 is a proprietary engine diagnostics component having an authorization level of 1 .
- a match between a component and a user occurs if the authorization level of the user is equal to or less than the authorization level associated with the component.
- FIG. 7C a table 730 containing multiple objects for an object or component type is illustrated in accordance with a preferred embodiment of the present invention. Like table 700 and 702 in FIG. 7A and 7B, this table also may be located within a registry. In this example, entries 732 - 742 are all entries for a component type identified as engine diagnostic.
- Each entry contains an authorization level and an identification of an object representing the component in addition to the component type.
- an application that requested an engine diagnostic would receive a result based on the authorization level. If the authorization level is 4 or less, the application would be returned one of the objects identified in entries 736 - 742 .
- These objects in entries 736 - 742 may be different versions of the same component providing different amounts of functionality or access to different numbers of functions. Alternatively, they may provide entirely different functions.
- the authorization level for the application is 5 or 6 , a null parameter is found in entries 732 and 734 . In such an instance, the application would be returned a result indicating that no software component matched the request or alternatively, that access to the component is not allowed.
- object 3 in entry 740 would be returned to the application in response to a request for a component having a type identified as engine diagnostic component.
- the best component or component having the highest level of functionality will be returned to the application in the event that the application is allowed to access more than one component based on the authorization level. For example, if the application is allowed to access two components in which one component has more functions or methods available, that component will be returned to the application.
- the functionality conveyed by the device or service JavaBean may have restricted levels of service depending on the authorization level associated with the request.
- the service providing this information may have three levels of authorization: owner, garage mechanic and manufacturer engineer.
- the engine diagnostic JavaBean associated with the owner level of authorization may not allow access at all.
- the engine diagnostic JavaBean associated with the garage mechanic may have all of the engine diagnostic API definition implemented, but nothing more.
- the JavaBean associated with the manufacturer engineer authorization level will have the entire standard engine diagnostic API, plus additional methods that access private, proprietary engine data.
- FIG. 8 a flowchart of a process for creating a JavaBean component is depicted in accordance with a preferred embodiment of the present invention.
- the depicted example involves the creation of a JavaBean component for a device, this process is also applicable to the creation of a JavaBean component for a software service.
- the process in FIG. 8 begins by identifying a device for which a JavaBean component is to be created (step 800 ).
- a Java interface is then identified for the device (step 802 ).
- the interface by which the device communicates is identified. In most cases, it is preferable that the device employ a standard Java interface. If other interfaces are employed by the device, it is possible to create an interface for use with the JavaBean component through a JNI.
- Methods are then selected for the JavaBean component based on the functionality of the device that the JavaBean component is to represent (step 804 ).
- a method in a JavaBean component is a normal Java method, which can be called from other components or from a scripting environment.
- properties are set for the JavaBean component (step 806 ). Properties are named attributes associated with a bean that can be read or written by calling the appropriate methods on the bean.
- events are selected for the JavaBean component (step 808 ). Events provide a way for one component to notify other components that something interesting has happened. These components may be other beans. Thereafter, the JavaBean component is created (step 810 ) with the process terminating thereafter.
- FIG. 9 a flowchart of a process used in registering a set of JavaBean components and associated user profiles is depicted in accordance with a preferred embodiment of the present invention.
- a JavaBean representing the engine diagnostics from a car.
- the engine diagnostics JavaBean would be based on a standard engine diagnostics service interface defined in Java. For the sake of argument, let this interface define 12 methods.
- the manufacturer of the engine diagnostics subsystem could define one or more JavaBeans components that implement a selected interface (step 900 ).
- Each JavaBean component, developed in step 900 implementing the standard engine diagnostics interface uses different mechanisms.
- Each JavaBean component is associated with a user profile (step 902 ). An association is made between a collection of user profiles and a device or software service JavaBean using a property of the JavaBean.
- the manufacturer decides to make one JavaBean implementation associated with the user profile “guest”, one for user profile “owner”, one for user profile “garage mechanic”, and one for user profile “factory engineer”.
- the implementation associated with the guest user profile implements all 12 methods of the interface to throw the exception “UnsupportedOperationException”.
- the JavaBean associated with the “owner” user profile implements 6 of the methods using simple read only algorithms and throws “UnsupportedOperationException” for the other 6.
- the “garage mechanic” version has all but 2 of the methods implemented properly, with the final 2 methods, associated with proprietary, detailed engine diagnostic data throwing the “UnsupportedOperationException”.
- the most complete implementation of the interface is associated with “factory engineer” and has a complete, detailed implementation of all 12 methods.
- the set of JavaBeans is registered with the registry using the registry's registration mechanism (step 904 ).
- the registration mechanism registers each JavaBean component into the database of components (step 906 ).
- the registry's registration mechanism interrogates the user profile property of the JavaBean and updates the database of user profiles (step 908 ) if there are any new user profiles defined by the JavaBean. Steps 906 and 908 are performed concurrently in the depicted example.
- FIG. 10 a flowchart of a process used in a lookup mechanism in a registry is depicted in accordance with a preferred embodiment of the present invention.
- An application uses the lookup mechanism of a registry to establish a reference to a JavaBean component implementing a required interface.
- the application When an application desires access to a device or service within a vehicle, the application will send a request to the lookup mechanism in a registry for the device or service.
- a reference to a component matching the device or service will be returned to the application if the component is present within the registry and if the application is authorized to access the component.
- the process begins by receiving a request for a device or service represented by a JavaBean component implementing a particular interface (step 1000 ).
- This request may be for a particular function or device.
- an authentication token is received as part of the request.
- Data is then extracted from the authentication token to perform authentication of the user for the requested JavaBean component (step 1002 ).
- This data extracted from the authentication token includes a user profile name.
- a database containing user profiles is queried using the information extracted from the authorization token (step 1004 ).
- a result is received from the database (step 1006 ).
- This result contains an authorization level, such as those illustrated in FIG. 7 A.
- the database containing components also is queried (step 1008 ). Steps 1004 and 1008 are performed concurrently in the depicted example.
- a result is received from this query (step 1010 ).
- the result is one or more components matching the requested function or device.
- step 1010 If more than one component was returned in step 1010 , the function or device having the most features may be returned, or alternatively, the device or function having the most recent revision data may be returned. Otherwise, if a JavaBean component is not to be returned to the application, a null value is returned (step 1016 ) with the process terminating thereafter. This value is used to indicate to the application that a JavaBean component corresponding to the requested device or service is absent in the registry.
- the process begins by detecting insertion of a smart key in the ignition of the vehicle (step 1100 ).
- the smart key contains circuitry storing a certificate.
- the authentication information is received from the smart key (step 1102 ).
- An authorization token is then created from the certificate (step 1104 ) with the process terminating thereafter.
- a user may log on via a user name and password or through a voice recognition system with these inputs being used to create an authorization token.
- the present invention provides a mechanism to deliver device functionality and software services to Javabased applications in an efficient manner.
- the present invention uses JavaBean components in a computing platform on a vehicle that may have varying device population available and software services. This platform allows for applications to be able to find and access these devices.
- the present invention provides a technique in which the functionality of devices and software services on an automobile can be designed as modular components of an automobile's computing platform.
- a technique is provided whereby an application for an automotive computing platform can be designed and constructed to discover and utilize the functionality available on an automotive computing platform through a software component model.
- the present invention provides these benefits through a mechanism by which device components use a standard API definition with applications are built to access device and software services based on these standard interfaces and not based on low-level details specific to the implementation of the device or software service particular of an automotive computing platform.
- the description of the present invention has been presented for purposes of illustration and description, but is not intended to be exhaustive or limited to the invention in the form disclosed. Many modifications and variations will be apparent to those of ordinary skill in the art.
- the depicted examples were directed towards an automobile, the process, apparatus, and instructions of the present invention may be applied towards other types of vehicles.
- the present invention may be employed in an aircraft, such as airplanes or helicopters.
- the apparatus, processes, and instructions of the present invention may be applied to other programming systems other than Java.
- the present invention may be applied to other bytecode based systems, such as Smalltalk.
- the embodiment was chosen and described in order to best explain the principles of the invention, the practical application, and to enable others of ordinary skill in the art to understand the invention for various embodiments with various modifications as are suited to the particular use contemplated.
Abstract
Description
Claims (25)
Priority Applications (2)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US09/221,890 US6236909B1 (en) | 1998-12-28 | 1998-12-28 | Method for representing automotive device functionality and software services to applications using JavaBeans |
JP36597999A JP3851042B2 (en) | 1998-12-28 | 1999-12-24 | Computer system for automobile |
Applications Claiming Priority (1)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US09/221,890 US6236909B1 (en) | 1998-12-28 | 1998-12-28 | Method for representing automotive device functionality and software services to applications using JavaBeans |
Publications (1)
Publication Number | Publication Date |
---|---|
US6236909B1 true US6236909B1 (en) | 2001-05-22 |
Family
ID=22829843
Family Applications (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
US09/221,890 Expired - Lifetime US6236909B1 (en) | 1998-12-28 | 1998-12-28 | Method for representing automotive device functionality and software services to applications using JavaBeans |
Country Status (2)
Country | Link |
---|---|
US (1) | US6236909B1 (en) |
JP (1) | JP3851042B2 (en) |
Cited By (60)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20010047265A1 (en) * | 2000-03-02 | 2001-11-29 | Raymond Sepe | Voice actuation with contextual learning for intelligent machine control |
US6385763B1 (en) * | 1998-12-29 | 2002-05-07 | At&T Corp. | Methodology for mapping use cases to operations for operational profile development |
US20020073205A1 (en) * | 2000-08-02 | 2002-06-13 | Miraj Mostafa | Communication service |
US20020112244A1 (en) * | 2000-12-19 | 2002-08-15 | Shih-Ping Liou | Collaborative video delivery over heterogeneous networks |
US6449541B1 (en) * | 2000-10-17 | 2002-09-10 | Microsoft Corporation | Application-to-component communications helper in a vehicle computer system |
US20030131139A1 (en) * | 2002-01-07 | 2003-07-10 | International Business Machines Corporation | Data processing system, method, and computer program product for generating a generic compilation interface from object-oriented code |
US20030167345A1 (en) * | 2002-02-25 | 2003-09-04 | Knight Alexander N. | Communications bridge between a vehicle information network and a remote system |
US20030182027A1 (en) * | 2002-03-22 | 2003-09-25 | Sun Microsystems, Inc. | System and method for simulating an input to a telematics system |
US6637021B1 (en) * | 1999-06-30 | 2003-10-21 | Sun Microsystems, Inc. | JavaBean activation framework-common desktop environment bridge |
US6640169B2 (en) * | 2001-03-21 | 2003-10-28 | Volkswagen Ag | Dynamic human-machine interface device and method |
US20040003252A1 (en) * | 2002-06-28 | 2004-01-01 | Dabbish Ezzat A. | Method and system for vehicle authentication of a component class |
US20040001593A1 (en) * | 2002-06-28 | 2004-01-01 | Jurgen Reinold | Method and system for component obtainment of vehicle authentication |
US20040003228A1 (en) * | 2002-06-28 | 2004-01-01 | Fehr Walton L. | Method and system for vehicle authentication of a remote access device |
US20040003242A1 (en) * | 2002-06-28 | 2004-01-01 | Fehr Walton L. | Method and system for vehicle authorization of a service technician |
US20040003245A1 (en) * | 2002-06-28 | 2004-01-01 | Dabbish Ezzat A. | Method and system for multiple scope authentication of vehicle components |
US20040003230A1 (en) * | 2002-06-28 | 2004-01-01 | Puhl Larry C. | Method and system for vehicle authentication of a service technician |
US20040003231A1 (en) * | 2002-06-28 | 2004-01-01 | Levenson Samuel M. | Method and system for component authentication of a vehicle |
US20040003234A1 (en) * | 2002-06-28 | 2004-01-01 | Jurgen Reinold | Method and system for vehicle authentication of a subassembly |
US20040003232A1 (en) * | 2002-06-28 | 2004-01-01 | Levenson Samuel M. | Method and system for vehicle component authentication of another vehicle component |
US20040003229A1 (en) * | 2002-06-28 | 2004-01-01 | Jurgen Reinold | Method and system for vehicle authentication of another vehicle |
US20040003243A1 (en) * | 2002-06-28 | 2004-01-01 | Fehr Walton L. | Method and system for authorizing reconfiguration of a vehicle |
EP1347618A3 (en) * | 2002-03-22 | 2004-02-04 | Sun Microsystems, Inc. | Manager level device / service arbitrator |
US20040030460A1 (en) * | 2002-08-08 | 2004-02-12 | Volkswagen Ag | Method and device for producing a display and control environment of a human/machine interface |
US20040044448A1 (en) * | 2002-08-27 | 2004-03-04 | Ford Motor Company | Vehicle systems controller with modular architecture |
US20040083234A1 (en) * | 2002-03-25 | 2004-04-29 | Takashi Higuchi | System, program and method for producing computer application |
US20040176935A1 (en) * | 2003-03-04 | 2004-09-09 | Microsoft Corporation | Facilitating communication with automotive vehicle buses |
US20050021860A1 (en) * | 2003-07-02 | 2005-01-27 | Kelly Thomas J. | Systems and methods for providing server operations in a work machine |
US20050107925A1 (en) * | 2001-04-06 | 2005-05-19 | Holger Enigk | Method and divece for outputting data relating to information of a motor vehicle |
US20050182534A1 (en) * | 2003-12-31 | 2005-08-18 | Ian Legate | Telematics-based vehicle data acquisition architecture |
US20050222718A1 (en) * | 2004-03-30 | 2005-10-06 | Scania Cv Ab (Publ) | Data access to electronic control units |
US6971015B1 (en) * | 2000-03-29 | 2005-11-29 | Microsoft Corporation | Methods and arrangements for limiting access to computer controlled functions and devices |
US20060020813A1 (en) * | 2004-06-30 | 2006-01-26 | International Business Machines Corporation | Dynamic cache lookup based on dynamic data |
US20060130033A1 (en) * | 2003-03-03 | 2006-06-15 | Snap-On Technologies, Inc. | Method for providing a software module to an automotive vehicle control unit, and computer program for executing the method |
US20060212146A1 (en) * | 1999-06-11 | 2006-09-21 | Invensys Systems, Inc. | Methods and apparatus for control using control devices that provide a virtual machine environment and that communicate via an IP network |
WO2006107243A1 (en) * | 2005-04-04 | 2006-10-12 | Volvo Lastvagnar Ab | Arrangement and method for programming motor vehicles |
US7228420B2 (en) | 2002-06-28 | 2007-06-05 | Temic Automotive Of North America, Inc. | Method and system for technician authentication of a vehicle |
US20070143091A1 (en) * | 2001-11-30 | 2007-06-21 | Takashi Hiquchi | Microcomputer logic development system |
US20070225873A1 (en) * | 2006-03-23 | 2007-09-27 | Denso Corporation | Software system of electronic control unit for vehicle and design method thereof |
US20070294073A1 (en) * | 2004-08-24 | 2007-12-20 | Sharp Kabushiki Kaisha | Simulation Device, Simulation Program, and Simulation Method |
US7356832B1 (en) * | 1999-07-01 | 2008-04-08 | International Business Machines Corporation | Security for network-connected vehicles and other network-connected processing environments |
US7356840B1 (en) * | 2001-06-19 | 2008-04-08 | Microstrategy Incorporated | Method and system for implementing security filters for reporting systems |
US20080148374A1 (en) * | 2003-01-28 | 2008-06-19 | Cellport Systems, Inc. | Secure telematics |
US20080177554A1 (en) * | 2007-01-22 | 2008-07-24 | Ford Motor Company | Software architecture for developing in-vehicle software applications |
US20080288768A1 (en) * | 2006-05-03 | 2008-11-20 | Siemens Aktiengesellschaft | Arrangement and method for reprogramming control devices |
US20090118846A1 (en) * | 1999-05-17 | 2009-05-07 | Invensys Systems, Inc. | Control systems and methods with smart blocks |
US7653734B1 (en) * | 1999-11-05 | 2010-01-26 | Nokia Corporation | Method for implementing a multimedia messaging service, a multimedia messaging system, a server of a multimedia messaging system and a multimedia terminal |
US20100205307A1 (en) * | 2007-07-31 | 2010-08-12 | Hiroyuki Sarugai | Communication control system |
US7778750B2 (en) | 2002-02-25 | 2010-08-17 | Cummins Inc. | Vehicle communications network adapter |
US20110154118A1 (en) * | 2009-12-23 | 2011-06-23 | Honeywell International Inc. | Gateway data proxy for embedded health management systems |
US7983820B2 (en) | 2003-07-02 | 2011-07-19 | Caterpillar Inc. | Systems and methods for providing proxy control functions in a work machine |
US8023500B2 (en) | 1996-08-20 | 2011-09-20 | Invensys Systems, Inc. | Methods for process control with change updates |
US20110227942A1 (en) * | 2007-09-11 | 2011-09-22 | Sharp Kabushiki Kaisha | Instrument panel image forming device, instrument panel image forming method, vehicle, instrument panel image display device, instrument panel image display method, instrument panel image forming program, and a computer readable recording medium on which instrument panel image forming program is recorded |
US8127060B2 (en) | 2009-05-29 | 2012-02-28 | Invensys Systems, Inc | Methods and apparatus for control configuration with control objects that are fieldbus protocol-aware |
US8368640B2 (en) | 1999-05-17 | 2013-02-05 | Invensys Systems, Inc. | Process control configuration system with connection validation and configuration |
US8463964B2 (en) | 2009-05-29 | 2013-06-11 | Invensys Systems, Inc. | Methods and apparatus for control configuration with enhanced change-tracking |
US8594814B2 (en) | 2008-06-20 | 2013-11-26 | Invensys Systems, Inc. | Systems and methods for immersive interaction with actual and/or simulated facilities for process, environmental and industrial control |
US20150081495A1 (en) * | 2013-09-19 | 2015-03-19 | Barclays Bank Plc | System and Method for Account Succession |
US20150261827A1 (en) * | 2006-05-26 | 2015-09-17 | Andrew S. Poulsen | Meta-configuration of profiles |
US9299247B2 (en) | 2008-01-14 | 2016-03-29 | Caterpillar Inc. | System and method for adjusting machine parameters |
US11487748B2 (en) * | 2016-10-03 | 2022-11-01 | Hitachi Astemo, Ltd. | In-vehicle processing device |
Families Citing this family (7)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
JP2003228640A (en) * | 2002-02-01 | 2003-08-15 | J Tech Players:Kk | Virtual golf tournament management system and its method |
JP2004192278A (en) * | 2002-12-10 | 2004-07-08 | Sumitomo Electric Ind Ltd | Communication system and onboard gateway device |
US7562346B2 (en) * | 2003-09-02 | 2009-07-14 | Microsoft Corporation | Software componentization for building a software product |
JP4635452B2 (en) * | 2004-02-23 | 2011-02-23 | 日本電気株式会社 | Defect investigation system, method, portable terminal and program for portable terminal |
JP4411344B2 (en) * | 2004-04-01 | 2010-02-10 | バイエリッシェ モートーレン ウエルケ アクチエンゲゼルシャフト | A method for recognizing incompatibility in a bus system with multiple control devices |
WO2019224912A1 (en) * | 2018-05-22 | 2019-11-28 | 三菱電機株式会社 | Vehicle communication device, vehicle access control system, management device, vehicle access control method, and vehicle access control program |
CN110430079B (en) | 2019-08-05 | 2021-03-16 | 腾讯科技（深圳）有限公司 | Vehicle-road cooperation system |
Citations (10)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US5742914A (en) * | 1984-04-27 | 1998-04-21 | Hagenbuch; Leroy G. | Apparatus and method responsive to the on-board measuring of haulage parameters of a vehicle |
US5828840A (en) * | 1996-08-06 | 1998-10-27 | Verifone, Inc. | Server for starting client application on client if client is network terminal and initiating client application on server if client is non network terminal |
US5848581A (en) * | 1992-08-20 | 1998-12-15 | Toyota Jidosha Kabushiki Kaisha | Fuel injection controller for use in an internal combustion engine |
US6021307A (en) * | 1994-04-07 | 2000-02-01 | Chan; Hark C. | Information distribution and processing system |
US6022315A (en) * | 1993-12-29 | 2000-02-08 | First Opinion Corporation | Computerized medical diagnostic and treatment advice system including network access |
US6028537A (en) * | 1996-06-14 | 2000-02-22 | Prince Corporation | Vehicle communication and remote control system |
US6038542A (en) * | 1998-04-28 | 2000-03-14 | Micron Electronics, Inc. | System for notifying an individual of a previously scheduled event |
US6061721A (en) * | 1997-10-06 | 2000-05-09 | Sun Microsystems, Inc. | Bean-based management system |
US6083276A (en) * | 1998-06-11 | 2000-07-04 | Corel, Inc. | Creating and configuring component-based applications using a text-based descriptive attribute grammar |
US6085198A (en) * | 1998-06-05 | 2000-07-04 | Sun Microsystems, Inc. | Integrated three-tier application framework with automated class and table generation |
-
1998
- 1998-12-28 US US09/221,890 patent/US6236909B1/en not_active Expired - Lifetime
-
1999
- 1999-12-24 JP JP36597999A patent/JP3851042B2/en not_active Expired - Fee Related
Patent Citations (10)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US5742914A (en) * | 1984-04-27 | 1998-04-21 | Hagenbuch; Leroy G. | Apparatus and method responsive to the on-board measuring of haulage parameters of a vehicle |
US5848581A (en) * | 1992-08-20 | 1998-12-15 | Toyota Jidosha Kabushiki Kaisha | Fuel injection controller for use in an internal combustion engine |
US6022315A (en) * | 1993-12-29 | 2000-02-08 | First Opinion Corporation | Computerized medical diagnostic and treatment advice system including network access |
US6021307A (en) * | 1994-04-07 | 2000-02-01 | Chan; Hark C. | Information distribution and processing system |
US6028537A (en) * | 1996-06-14 | 2000-02-22 | Prince Corporation | Vehicle communication and remote control system |
US5828840A (en) * | 1996-08-06 | 1998-10-27 | Verifone, Inc. | Server for starting client application on client if client is network terminal and initiating client application on server if client is non network terminal |
US6061721A (en) * | 1997-10-06 | 2000-05-09 | Sun Microsystems, Inc. | Bean-based management system |
US6038542A (en) * | 1998-04-28 | 2000-03-14 | Micron Electronics, Inc. | System for notifying an individual of a previously scheduled event |
US6085198A (en) * | 1998-06-05 | 2000-07-04 | Sun Microsystems, Inc. | Integrated three-tier application framework with automated class and table generation |
US6083276A (en) * | 1998-06-11 | 2000-07-04 | Corel, Inc. | Creating and configuring component-based applications using a text-based descriptive attribute grammar |
Cited By (99)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US8023500B2 (en) | 1996-08-20 | 2011-09-20 | Invensys Systems, Inc. | Methods for process control with change updates |
US6385763B1 (en) * | 1998-12-29 | 2002-05-07 | At&T Corp. | Methodology for mapping use cases to operations for operational profile development |
US20090118846A1 (en) * | 1999-05-17 | 2009-05-07 | Invensys Systems, Inc. | Control systems and methods with smart blocks |
US8368640B2 (en) | 1999-05-17 | 2013-02-05 | Invensys Systems, Inc. | Process control configuration system with connection validation and configuration |
US8229579B2 (en) | 1999-05-17 | 2012-07-24 | Invensys Systems, Inc. | Control systems and methods with versioning |
US8028272B2 (en) | 1999-05-17 | 2011-09-27 | Invensys Systems, Inc. | Control system configurator and methods with edit selection |
US8225271B2 (en) | 1999-05-17 | 2012-07-17 | Invensys Systems, Inc. | Apparatus for control systems with objects that are associated with live data |
US8028275B2 (en) | 1999-05-17 | 2011-09-27 | Invensys Systems, Inc. | Control systems and methods with smart blocks |
US20060212146A1 (en) * | 1999-06-11 | 2006-09-21 | Invensys Systems, Inc. | Methods and apparatus for control using control devices that provide a virtual machine environment and that communicate via an IP network |
US8090452B2 (en) | 1999-06-11 | 2012-01-03 | Invensys Systems, Inc. | Methods and apparatus for control using control devices that provide a virtual machine environment and that communicate via an IP network |
US6637021B1 (en) * | 1999-06-30 | 2003-10-21 | Sun Microsystems, Inc. | JavaBean activation framework-common desktop environment bridge |
US7797737B2 (en) | 1999-07-01 | 2010-09-14 | International Business Machines Corporation | Security for network-connected vehicles and other network-connected processing environments |
US7356832B1 (en) * | 1999-07-01 | 2008-04-08 | International Business Machines Corporation | Security for network-connected vehicles and other network-connected processing environments |
US20080092227A1 (en) * | 1999-07-01 | 2008-04-17 | International Business Machines Corporation | Security For Network-Connected Vehicles and Other Network-Connected Processing Environments |
US7653734B1 (en) * | 1999-11-05 | 2010-01-26 | Nokia Corporation | Method for implementing a multimedia messaging service, a multimedia messaging system, a server of a multimedia messaging system and a multimedia terminal |
US6895380B2 (en) * | 2000-03-02 | 2005-05-17 | Electro Standards Laboratories | Voice actuation with contextual learning for intelligent machine control |
US20010047265A1 (en) * | 2000-03-02 | 2001-11-29 | Raymond Sepe | Voice actuation with contextual learning for intelligent machine control |
US20060010499A1 (en) * | 2000-03-29 | 2006-01-12 | Microsoft Corporation | Methods and arrangements for limiting access to computer controlled functions and devices |
US7950048B2 (en) | 2000-03-29 | 2011-05-24 | Microsoft Corporation | Methods and arrangements for limiting access to computer controlled functions and devices |
US6971015B1 (en) * | 2000-03-29 | 2005-11-29 | Microsoft Corporation | Methods and arrangements for limiting access to computer controlled functions and devices |
US20020073205A1 (en) * | 2000-08-02 | 2002-06-13 | Miraj Mostafa | Communication service |
US10581792B2 (en) | 2000-08-02 | 2020-03-03 | Conversant Wireless Licensing S.A R.L. | Streaming of media in a multimedia messaging service |
US9800538B2 (en) | 2000-08-02 | 2017-10-24 | Conversant Wireless Licensing S.A R.L. | Communication service |
US6449541B1 (en) * | 2000-10-17 | 2002-09-10 | Microsoft Corporation | Application-to-component communications helper in a vehicle computer system |
US20020112244A1 (en) * | 2000-12-19 | 2002-08-15 | Shih-Ping Liou | Collaborative video delivery over heterogeneous networks |
US6640169B2 (en) * | 2001-03-21 | 2003-10-28 | Volkswagen Ag | Dynamic human-machine interface device and method |
US20050107925A1 (en) * | 2001-04-06 | 2005-05-19 | Holger Enigk | Method and divece for outputting data relating to information of a motor vehicle |
US7356840B1 (en) * | 2001-06-19 | 2008-04-08 | Microstrategy Incorporated | Method and system for implementing security filters for reporting systems |
US7650274B2 (en) | 2001-11-30 | 2010-01-19 | Fujitsu Ten Limited | Microcomputer logic development system |
US20070143091A1 (en) * | 2001-11-30 | 2007-06-21 | Takashi Hiquchi | Microcomputer logic development system |
US20030131139A1 (en) * | 2002-01-07 | 2003-07-10 | International Business Machines Corporation | Data processing system, method, and computer program product for generating a generic compilation interface from object-oriented code |
US7296262B2 (en) | 2002-01-07 | 2007-11-13 | International Business Machines Corporation | Data processing system, method, and computer program product for generating a generic compilation interface from object-oriented code |
US7778750B2 (en) | 2002-02-25 | 2010-08-17 | Cummins Inc. | Vehicle communications network adapter |
US20030167345A1 (en) * | 2002-02-25 | 2003-09-04 | Knight Alexander N. | Communications bridge between a vehicle information network and a remote system |
DE10392279B4 (en) | 2002-02-25 | 2020-08-06 | Cummins Inc. | Communication bridge between a vehicle information network and a remote system |
US7171345B2 (en) * | 2002-03-22 | 2007-01-30 | Sun Microsystems, Inc. | System and method for simulating an input to a telematics system |
US20030182027A1 (en) * | 2002-03-22 | 2003-09-25 | Sun Microsystems, Inc. | System and method for simulating an input to a telematics system |
EP1347618A3 (en) * | 2002-03-22 | 2004-02-04 | Sun Microsystems, Inc. | Manager level device / service arbitrator |
US20040083234A1 (en) * | 2002-03-25 | 2004-04-29 | Takashi Higuchi | System, program and method for producing computer application |
US20040003245A1 (en) * | 2002-06-28 | 2004-01-01 | Dabbish Ezzat A. | Method and system for multiple scope authentication of vehicle components |
US7137001B2 (en) | 2002-06-28 | 2006-11-14 | Motorola, Inc. | Authentication of vehicle components |
US7131005B2 (en) | 2002-06-28 | 2006-10-31 | Motorola, Inc. | Method and system for component authentication of a vehicle |
US7181615B2 (en) * | 2002-06-28 | 2007-02-20 | Motorola, Inc. | Method and system for vehicle authentication of a remote access device |
US7228420B2 (en) | 2002-06-28 | 2007-06-05 | Temic Automotive Of North America, Inc. | Method and system for technician authentication of a vehicle |
US7127611B2 (en) | 2002-06-28 | 2006-10-24 | Motorola, Inc. | Method and system for vehicle authentication of a component class |
US20040003243A1 (en) * | 2002-06-28 | 2004-01-01 | Fehr Walton L. | Method and system for authorizing reconfiguration of a vehicle |
US20040003229A1 (en) * | 2002-06-28 | 2004-01-01 | Jurgen Reinold | Method and system for vehicle authentication of another vehicle |
US20040003232A1 (en) * | 2002-06-28 | 2004-01-01 | Levenson Samuel M. | Method and system for vehicle component authentication of another vehicle component |
US20040003234A1 (en) * | 2002-06-28 | 2004-01-01 | Jurgen Reinold | Method and system for vehicle authentication of a subassembly |
US7325135B2 (en) | 2002-06-28 | 2008-01-29 | Temic Automotive Of North America, Inc. | Method and system for authorizing reconfiguration of a vehicle |
US20040003231A1 (en) * | 2002-06-28 | 2004-01-01 | Levenson Samuel M. | Method and system for component authentication of a vehicle |
US20040003230A1 (en) * | 2002-06-28 | 2004-01-01 | Puhl Larry C. | Method and system for vehicle authentication of a service technician |
US20040003242A1 (en) * | 2002-06-28 | 2004-01-01 | Fehr Walton L. | Method and system for vehicle authorization of a service technician |
US20040003228A1 (en) * | 2002-06-28 | 2004-01-01 | Fehr Walton L. | Method and system for vehicle authentication of a remote access device |
US20040001593A1 (en) * | 2002-06-28 | 2004-01-01 | Jurgen Reinold | Method and system for component obtainment of vehicle authentication |
US20040003252A1 (en) * | 2002-06-28 | 2004-01-01 | Dabbish Ezzat A. | Method and system for vehicle authentication of a component class |
US7600114B2 (en) | 2002-06-28 | 2009-10-06 | Temic Automotive Of North America, Inc. | Method and system for vehicle authentication of another vehicle |
US7549046B2 (en) | 2002-06-28 | 2009-06-16 | Temic Automotive Of North America, Inc. | Method and system for vehicle authorization of a service technician |
US6775598B2 (en) * | 2002-08-08 | 2004-08-10 | Volkswagen Ag | Method and device for producing a display and control environment of a human/machine interface |
US20040030460A1 (en) * | 2002-08-08 | 2004-02-12 | Volkswagen Ag | Method and device for producing a display and control environment of a human/machine interface |
US20040044448A1 (en) * | 2002-08-27 | 2004-03-04 | Ford Motor Company | Vehicle systems controller with modular architecture |
US8719592B2 (en) | 2003-01-28 | 2014-05-06 | Cellport Systems, Inc. | Secure telematics |
US20080148374A1 (en) * | 2003-01-28 | 2008-06-19 | Cellport Systems, Inc. | Secure telematics |
US20060130033A1 (en) * | 2003-03-03 | 2006-06-15 | Snap-On Technologies, Inc. | Method for providing a software module to an automotive vehicle control unit, and computer program for executing the method |
US20040176935A1 (en) * | 2003-03-04 | 2004-09-09 | Microsoft Corporation | Facilitating communication with automotive vehicle buses |
US7275027B2 (en) * | 2003-03-04 | 2007-09-25 | Microsoft Corporation | Facilitating communication with automotive vehicle buses |
US7983820B2 (en) | 2003-07-02 | 2011-07-19 | Caterpillar Inc. | Systems and methods for providing proxy control functions in a work machine |
US20050021860A1 (en) * | 2003-07-02 | 2005-01-27 | Kelly Thomas J. | Systems and methods for providing server operations in a work machine |
US7584029B2 (en) * | 2003-12-31 | 2009-09-01 | Teradyne, Inc. | Telematics-based vehicle data acquisition architecture |
US20050182534A1 (en) * | 2003-12-31 | 2005-08-18 | Ian Legate | Telematics-based vehicle data acquisition architecture |
US8290660B2 (en) * | 2004-03-30 | 2012-10-16 | Scania Cv Ab (Publ) | Data access to electronic control units |
US20050222718A1 (en) * | 2004-03-30 | 2005-10-06 | Scania Cv Ab (Publ) | Data access to electronic control units |
US7752452B2 (en) * | 2004-06-30 | 2010-07-06 | International Business Machines Corporation | Dynamic cache lookup based on dynamic data |
US20090138951A1 (en) * | 2004-06-30 | 2009-05-28 | International Business Machines Corporation | Dynamic Cache Lookup Based on Dynamic Data |
US7487361B2 (en) * | 2004-06-30 | 2009-02-03 | International Business Machines Corporation | Dynamic cache lookup based on dynamic data |
US20060020813A1 (en) * | 2004-06-30 | 2006-01-26 | International Business Machines Corporation | Dynamic cache lookup based on dynamic data |
US20070294073A1 (en) * | 2004-08-24 | 2007-12-20 | Sharp Kabushiki Kaisha | Simulation Device, Simulation Program, and Simulation Method |
US20080216067A1 (en) * | 2005-04-04 | 2008-09-04 | Volvo Lastvagnar Ab | Arrangement and Method for Programming Motor Vehicles |
WO2006107243A1 (en) * | 2005-04-04 | 2006-10-12 | Volvo Lastvagnar Ab | Arrangement and method for programming motor vehicles |
US20070225873A1 (en) * | 2006-03-23 | 2007-09-27 | Denso Corporation | Software system of electronic control unit for vehicle and design method thereof |
US7930079B2 (en) | 2006-03-23 | 2011-04-19 | Denso Corporation | Software system of electronic control unit for vehicle and design method thereof |
US20080288768A1 (en) * | 2006-05-03 | 2008-11-20 | Siemens Aktiengesellschaft | Arrangement and method for reprogramming control devices |
US20150261827A1 (en) * | 2006-05-26 | 2015-09-17 | Andrew S. Poulsen | Meta-configuration of profiles |
US9547692B2 (en) * | 2006-05-26 | 2017-01-17 | Andrew S. Poulsen | Meta-configuration of profiles |
US10228814B1 (en) * | 2006-05-26 | 2019-03-12 | Andrew S. Poulsen | Meta-configuration of profiles |
US11182041B1 (en) | 2006-05-26 | 2021-11-23 | Aspiration Innovation, Inc. | Meta-configuration of profiles |
US9081648B2 (en) | 2007-01-22 | 2015-07-14 | Ford Motor Company | Software architecture for developing in-vehicle software applications |
US8161454B2 (en) | 2007-01-22 | 2012-04-17 | Ford Motor Company | Software architecture for developing in-vehicle software applications |
US20080177554A1 (en) * | 2007-01-22 | 2008-07-24 | Ford Motor Company | Software architecture for developing in-vehicle software applications |
US20100205307A1 (en) * | 2007-07-31 | 2010-08-12 | Hiroyuki Sarugai | Communication control system |
US20110227942A1 (en) * | 2007-09-11 | 2011-09-22 | Sharp Kabushiki Kaisha | Instrument panel image forming device, instrument panel image forming method, vehicle, instrument panel image display device, instrument panel image display method, instrument panel image forming program, and a computer readable recording medium on which instrument panel image forming program is recorded |
US9299247B2 (en) | 2008-01-14 | 2016-03-29 | Caterpillar Inc. | System and method for adjusting machine parameters |
US8594814B2 (en) | 2008-06-20 | 2013-11-26 | Invensys Systems, Inc. | Systems and methods for immersive interaction with actual and/or simulated facilities for process, environmental and industrial control |
US8463964B2 (en) | 2009-05-29 | 2013-06-11 | Invensys Systems, Inc. | Methods and apparatus for control configuration with enhanced change-tracking |
US8127060B2 (en) | 2009-05-29 | 2012-02-28 | Invensys Systems, Inc | Methods and apparatus for control configuration with control objects that are fieldbus protocol-aware |
US8090824B2 (en) | 2009-12-23 | 2012-01-03 | Honeywell International, Inc. | Gateway data proxy for embedded health management systems |
US20110154118A1 (en) * | 2009-12-23 | 2011-06-23 | Honeywell International Inc. | Gateway data proxy for embedded health management systems |
US20150081495A1 (en) * | 2013-09-19 | 2015-03-19 | Barclays Bank Plc | System and Method for Account Succession |
US11487748B2 (en) * | 2016-10-03 | 2022-11-01 | Hitachi Astemo, Ltd. | In-vehicle processing device |
Also Published As
Publication number | Publication date |
---|---|
JP2000194565A (en) | 2000-07-14 |
JP3851042B2 (en) | 2006-11-29 |
Similar Documents
Publication | Publication Date | Title |
---|---|---|
US6236909B1 (en) | Method for representing automotive device functionality and software services to applications using JavaBeans | |
US6574734B1 (en) | Method and apparatus for securing access to automotive devices and software services | |
JP6898420B2 (en) | A specially programmed computing system with associated equipment configured to implement secure lockdown and how to use it. | |
US7146307B2 (en) | System and method for testing telematics software | |
US6925466B2 (en) | Asynchronous protocol framework | |
CN101694687B (en) | Code signing system and method | |
US6981150B2 (en) | Apparatus and method for authorizing transfer of software into one or more embedded systems | |
US20100280932A1 (en) | System and method for managing and deploying functional services to a vehicle client | |
US20060036356A1 (en) | System and method of vehicle policy control | |
US8290660B2 (en) | Data access to electronic control units | |
CN101196974B (en) | Method and system for auto-configuratoin of software application program | |
US7502794B2 (en) | Method for controlling access to a resource of an application in a data-processing device | |
CN1989472A (en) | A generic declarative authorization scheme for java | |
US7450030B2 (en) | Method for authorisation in a telematic centre using two databases containing data characterising the motor vehicle or a mobile radio connection | |
KR20090056071A (en) | Autosar service system for exchangeability and easy assembly | |
US7748043B2 (en) | Method for authenticating, in particular, software components that can be loaded into a control unit of a motor vehicle | |
US7343560B1 (en) | Method and system for generating dynamic images | |
CN113810446A (en) | Safety upgrading management method for ECU of vehicle-mounted network | |
US20030182362A1 (en) | System and method for distributed preference data services | |
Yen et al. | Information Security and Integrity in Network Vehicle | |
Müller | Aspect design with the building block method | |
Rasal et al. | Auto motive refuge concept using Embedded and computing approches. | |
US20130253807A1 (en) | Method for reversibly coding an engine controller for a motor vehicle in manipulation-proof fashion, and engine controller | |
CN115134244B (en) | Vehicle access device management method and device, electronic device and storage medium | |
Adelsbach et al. | Embedding Trust into Cars—Secure Software Delivery and Installation |
Legal Events
Date | Code | Title | Description |
---|---|---|---|
AS | Assignment |
Owner name: IBM CORPORATION, NEW YORKFree format text: ASSIGNMENT OF ASSIGNORS INTEREST;ASSIGNORS:COLSON, JAMES CAMPBELL;GRAHAM, STEPHEN GLEN;REEL/FRAME:009679/0508;SIGNING DATES FROM 19981216 TO 19981217 |
|
STCF | Information on status: patent grant |
Free format text: PATENTED CASE |
|
FEPP | Fee payment procedure |
Free format text: PAYOR NUMBER ASSIGNED (ORIGINAL EVENT CODE: ASPN); ENTITY STATUS OF PATENT OWNER: LARGE ENTITY |
|
FPAY | Fee payment |
Year of fee payment: 4 |
|
FPAY | Fee payment |
Year of fee payment: 8 |
|
FEPP | Fee payment procedure |
Free format text: PAYOR NUMBER ASSIGNED (ORIGINAL EVENT CODE: ASPN); ENTITY STATUS OF PATENT OWNER: LARGE ENTITYFree format text: PAYER NUMBER DE-ASSIGNED (ORIGINAL EVENT CODE: RMPN); ENTITY STATUS OF PATENT OWNER: LARGE ENTITY |
|
FEPP | Fee payment procedure |
Free format text: PAYOR NUMBER ASSIGNED (ORIGINAL EVENT CODE: ASPN); ENTITY STATUS OF PATENT OWNER: LARGE ENTITYFree format text: PAYER NUMBER DE-ASSIGNED (ORIGINAL EVENT CODE: RMPN); ENTITY STATUS OF PATENT OWNER: LARGE ENTITY |
|
AS | Assignment |
Owner name: GOOGLE INC., CALIFORNIAFree format text: ASSIGNMENT OF ASSIGNORS INTEREST;ASSIGNOR:INTERNATIONAL BUSINESS MACHINES CORPORATION;REEL/FRAME:025077/0868Effective date: 20100930 |
|
FPAY | Fee payment |
Year of fee payment: 12 |
|
FEPP | Fee payment procedure |
Free format text: PAYOR NUMBER ASSIGNED (ORIGINAL EVENT CODE: ASPN); ENTITY STATUS OF PATENT OWNER: LARGE ENTITYFree format text: PAYER NUMBER DE-ASSIGNED (ORIGINAL EVENT CODE: RMPN); ENTITY STATUS OF PATENT OWNER: LARGE ENTITY |
|
AS | Assignment |
Owner name: GOOGLE LLC, CALIFORNIAFree format text: CHANGE OF NAME;ASSIGNOR:GOOGLE INC.;REEL/FRAME:044127/0735Effective date: 20170929 |