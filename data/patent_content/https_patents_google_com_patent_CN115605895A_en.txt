CN115605895A - Securing access to information using secure multi-party computation and probabilistic data structures - Google Patents
Securing access to information using secure multi-party computation and probabilistic data structures Download PDFInfo
- Publication number
- CN115605895A CN115605895A CN202180035224.4A CN202180035224A CN115605895A CN 115605895 A CN115605895 A CN 115605895A CN 202180035224 A CN202180035224 A CN 202180035224A CN 115605895 A CN115605895 A CN 115605895A
- Authority
- CN
- China
- Prior art keywords
- selection
- value
- selection value
- digital component
- user group
- Prior art date
- Legal status (The legal status is an assumption and is not a legal conclusion. Google has not performed a legal analysis and makes no representation as to the accuracy of the status listed.)
- Pending
Links
Images
Classifications
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04L—TRANSMISSION OF DIGITAL INFORMATION, e.g. TELEGRAPHIC COMMUNICATION
- H04L9/00—Cryptographic mechanisms or cryptographic arrangements for secret or secure communications; Network security protocols
- H04L9/08—Key distribution or management, e.g. generation, sharing or updating, of cryptographic keys or passwords
- H04L9/0816—Key establishment, i.e. cryptographic processes or cryptographic protocols whereby a shared secret becomes available to two or more parties, for subsequent use
- H04L9/085—Secret sharing or secret splitting, e.g. threshold schemes
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04L—TRANSMISSION OF DIGITAL INFORMATION, e.g. TELEGRAPHIC COMMUNICATION
- H04L9/00—Cryptographic mechanisms or cryptographic arrangements for secret or secure communications; Network security protocols
- H04L9/06—Cryptographic mechanisms or cryptographic arrangements for secret or secure communications; Network security protocols the encryption apparatus using shift registers or memories for block-wise or stream coding, e.g. DES systems or RC4; Hash functions; Pseudorandom sequence generators
- H04L9/0643—Hash functions, e.g. MD5, SHA, HMAC or f9 MAC
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F16/00—Information retrieval; Database structures therefor; File system structures therefor
- G06F16/20—Information retrieval; Database structures therefor; File system structures therefor of structured data, e.g. relational data
- G06F16/28—Databases characterised by their database models, e.g. relational or object models
- G06F16/284—Relational databases
- G06F16/285—Clustering or classification
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F21/00—Security arrangements for protecting computers, components thereof, programs or data against unauthorised activity
- G06F21/60—Protecting data
- G06F21/62—Protecting access to data via a platform, e.g. using keys or access control rules
- G06F21/6218—Protecting access to data via a platform, e.g. using keys or access control rules to a system of files or objects, e.g. local or distributed file system or database
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06Q—INFORMATION AND COMMUNICATION TECHNOLOGY [ICT] SPECIALLY ADAPTED FOR ADMINISTRATIVE, COMMERCIAL, FINANCIAL, MANAGERIAL OR SUPERVISORY PURPOSES; SYSTEMS OR METHODS SPECIALLY ADAPTED FOR ADMINISTRATIVE, COMMERCIAL, FINANCIAL, MANAGERIAL OR SUPERVISORY PURPOSES, NOT OTHERWISE PROVIDED FOR
- G06Q10/00—Administration; Management
- G06Q10/10—Office automation; Time management
- G06Q10/101—Collaborative creation, e.g. joint development of products or services
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06Q—INFORMATION AND COMMUNICATION TECHNOLOGY [ICT] SPECIALLY ADAPTED FOR ADMINISTRATIVE, COMMERCIAL, FINANCIAL, MANAGERIAL OR SUPERVISORY PURPOSES; SYSTEMS OR METHODS SPECIALLY ADAPTED FOR ADMINISTRATIVE, COMMERCIAL, FINANCIAL, MANAGERIAL OR SUPERVISORY PURPOSES, NOT OTHERWISE PROVIDED FOR
- G06Q30/00—Commerce
- G06Q30/02—Marketing; Price estimation or determination; Fundraising
- G06Q30/0241—Advertisements
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04L—TRANSMISSION OF DIGITAL INFORMATION, e.g. TELEGRAPHIC COMMUNICATION
- H04L9/00—Cryptographic mechanisms or cryptographic arrangements for secret or secure communications; Network security protocols
- H04L9/08—Key distribution or management, e.g. generation, sharing or updating, of cryptographic keys or passwords
- H04L9/0816—Key establishment, i.e. cryptographic processes or cryptographic protocols whereby a shared secret becomes available to two or more parties, for subsequent use
- H04L9/0838—Key agreement, i.e. key establishment technique in which a shared key is derived by parties as a function of information contributed by, or associated with, each of these
- H04L9/0841—Key agreement, i.e. key establishment technique in which a shared key is derived by parties as a function of information contributed by, or associated with, each of these involving Diffie-Hellman or related key agreement protocols
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06Q—INFORMATION AND COMMUNICATION TECHNOLOGY [ICT] SPECIALLY ADAPTED FOR ADMINISTRATIVE, COMMERCIAL, FINANCIAL, MANAGERIAL OR SUPERVISORY PURPOSES; SYSTEMS OR METHODS SPECIALLY ADAPTED FOR ADMINISTRATIVE, COMMERCIAL, FINANCIAL, MANAGERIAL OR SUPERVISORY PURPOSES, NOT OTHERWISE PROVIDED FOR
- G06Q2220/00—Business processing using cryptography
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04L—TRANSMISSION OF DIGITAL INFORMATION, e.g. TELEGRAPHIC COMMUNICATION
- H04L2209/00—Additional information or applications relating to cryptographic mechanisms or cryptographic arrangements for secret or secure communication H04L9/00
- H04L2209/46—Secure multiparty computation, e.g. millionaire problem
Abstract
This document describes systems and techniques for protecting the security of information in content selection and distribution. In one aspect, a method includes receiving, by a first computing system in an MPC system, a digital component request comprising a distributed point function representing a secret share of a respective point function indicating whether a user of a client device is a member of a first group of users. A selection value is identified. Each selection value corresponds to a respective digital component, a set of context signals, and a respective second user group identifier for a respective second user group to which the respective digital component is eligible to be distributed. A distributed point function is used for each selection value and in the secure MPC process to determine a candidate parameter indicating whether the second user group identifier matches a user group comprising the user as a member.
Description
Technical Field
This specification relates to cryptography and data security.
Background
Secure multi-party computing (MPC) is a series of cryptographic protocols that prevent access to data by distributing computing across multiple parties so that no individual party can access the data of another party. The MPC computing system uses secret shares of data to perform computations. A probabilistic data structure is a data structure that uses a hash function to represent a set of elements and can be queried to determine whether an element is included in the set represented by the data structure. Example probabilistic data structures include bloom filters and cuckoo filters.
Disclosure of Invention
In general, one innovative aspect of the subject matter described in this specification can be embodied in methods that include: receiving, from a client device and by a first computing system of a plurality of multi-party computing (MPC) systems, a digital component request comprising distributed point functions each representing a secret share of a respective point function indicating whether a user of the client device is a member of a respective first user group identified by a respective first user group identifier; identifying a plurality of selection values, wherein each selection value corresponds to a respective digital component, a set of context signals, and a respective second user group identifier for a respective second user group to which the respective digital component is eligible to be distributed; determining, for each selection value and using a distributed point function in a secure MPC process executed in cooperation with one or more second computing systems in the plurality of MPC systems, a candidate parameter indicating whether a second user group identifier corresponding to the selection value matches a user group that includes the user as a member; generating a first secret share of a selection result that identifies a given digital component having a highest selection value from among a plurality of candidate digital components based on the selection value and a candidate parameter, wherein each candidate digital component is a digital component for which a candidate parameter of the selection value corresponding to the digital component indicates that a second user group identifier corresponding to the selection value matches a user group that includes the user as a member; and transmitting a first secret share to the client device that identifies the selection result for the given digital component. Other embodiments of this aspect include corresponding apparatuses, systems, and computer programs, encoded on computer storage devices, configured to perform various aspects of the methods.
These and other embodiments can each optionally include one or more of the following features. In some aspects, determining the candidate parameter for each selection value includes determining a first secret share of the candidate parameter for each selection value.
Generating the first secret share of the selection result may include: generating an order of selection values based on the magnitude of each selection value; determining a first secret share of a cumulative value for each selection value based on the order of the selection values and the candidate parameter for each selection value, wherein the cumulative value for each selection value indicates a position of the selection value in a ranked order of the plurality of candidate selection values; for each selection value, determining a first secret share of the winner parameter based on (i) a candidate parameter of the selection value and (ii) a result of an equality test indicating whether the accumulated value used to select the value is the specified value; and for each selection value, determining a first secret share of a sum of a product of the winner parameter for the selection value and the digital component information element for the selection value as a first secret share of the selection result.
Determining the first secret share of the accumulated value for each of the selection values can include: for each individual selection value, a number of selection values between the highest selection value and the individual selection value having a candidate parameter indicating that the second user group identifier corresponding to the selection value matches at least one of the one or more first user group identifiers is determined. The specified value can be one.
In some aspects, the distributed point function is generated based on a plurality of user groups that include a user of the client device as a member. In some aspects, the digital component request includes a user group request key based on a set of context signals for the digital component slot, and identifying the plurality of selection values includes identifying each selection value in the data structure having a lookup key that matches the user group request key.
The subject matter described in this specification can be implemented in particular embodiments to realize one or more of the following advantages. Using a secure MPC process performed by two or more MPC servers operated by different parties to select a digital component based on a secret share of user information ensures that the user information cannot be accessed in the clear by the MPC server or another party in the absence of unauthorized collusion between MPC servers. A client device of a user can generate a probability data structure, such as a cuckoo filter, that represents a user group that includes the user as a member, and can generate a distributed point function based on the probability data structure. The distributed point function is a secret share that cryptographically represents whether a user is a member of a user group. Using the probabilistic data structure and distributed point functions in this manner protects user privacy and reduces the size of information provided to the MPC cluster by preventing access to the user's group membership. This reduction in data size reduces the amount of bandwidth consumed to transmit information, reduces latency in transmitting information, and reduces the amount of processing power and associated battery power required by a device (e.g., a mobile device) running on a battery to transmit information.
The MPC cluster can transmit a secret share identifying the result of the MPC cluster using the selected digital components selected by the secure MPC process. By sending only a secret share of the result of selecting a digital component, rather than sending information for all or a large set of digital components, bandwidth, latency, processing power, and battery power consumed in transmitting and receiving the result are similarly reduced. This also reduces the potential leakage of confidential information that submits select values of digital components to the content platform of the MPC cluster by limiting the number of digital components that provide information to the client device.
Various features and advantages of the above-described subject matter are described below with reference to the following drawings. Additional features and advantages will be apparent from the subject matter described herein and from the claims.
Drawings
FIG. 1 is a block diagram of an environment in which an MPC cluster performs a secure MPC process to select digital components for distribution to client devices.
FIG. 2 is a swim lane diagram of an example process for selecting a numeric component for display at a client device.
FIG. 3 is a swim lane diagram of an example process for selecting a digital component for distribution to a client device.
FIG. 4 is a flow diagram illustrating an example process for selecting digital components for distribution to client devices.
FIG. 5 is a block diagram of an example computer system.
Like reference numbers and designations in the various drawings indicate like elements.
Detailed Description
In general, this document describes systems and techniques for securing information in content selection and distribution. The MPC cluster of server computers is able to perform secure MPC processes to select digital components based on user information without requiring any MPC server to be able to access the user information in the clear in the absence of unauthorized collusion. The user information can be sent to the MPC cluster using a probabilistic data structure and/or a distributed point function to reduce the data size of the information transmitted over the network and to maintain information security during transmission.
Fig. 1 is a block diagram of an environment 100 in which an MPC cluster performs a secure MPC process to select digital components for distribution to client devices 110. The example environment 100 includes a data communication network 105, such as a Local Area Network (LAN), a Wide Area Network (WAN), the internet, a mobile network, or a combination thereof. The network 105 connects client devices 110, secure MPC cluster 130, publisher 140, web site 142, content platforms, such as Supply Side Platform (SSP) 170 and demand side platform DSP (150). Example environment 100 may include many different client devices 110, secure MPC cluster 130, publisher 140, web site 142, DSP150, and SSP 170.
The client device 110 is an electronic device capable of communicating over the network 105. Example client devices 110 include personal computers, mobile communication devices, such as smart phones, and other devices capable of sending and receiving data over the network 105. The client device can also include a digital assistant device that accepts audio input through a microphone and outputs audio output through a speaker. When the digital assistant detects a "hot word" or "hot phrase" that activates the microphone to accept audio input, the digital assistant can be placed in a listening mode (e.g., ready to accept audio input). The digital assistant device can also include a camera and/or a display to capture images and visually present information. The digital assistant can be implemented in different forms of hardware devices, including a wearable device (e.g., a watch or glasses), a smartphone, a speaker device, a tablet device, or another hardware device. The client device can also include a digital media device, such as a streaming device that plugs into a television or other display to stream video to a television, gaming system, or virtual reality system.
The client device 110 typically includes an application 112, such as a web browser and/or a native application, to facilitate sending and receiving data over the network 105. A native application is an application developed for a particular platform or a particular device (e.g., a mobile device with a particular operating system). The publisher 140 can develop and provide (e.g., make available for download) native applications to the client device 110. For example, in response to a user of the client device 110 keying in a resource address of the resource 145 in an address bar of the web browser or selecting a link referencing the resource address, the web browser can request the resource 145 from a web server of the web site 142 hosting the publisher 140. Similarly, the native application can request application content from a publisher's remote server.
Some resources, application pages, or other application content can include a digital component slot for displaying a digital component with the resource 145 or application page. As used throughout this document, the phrase "digital component" refers to a discrete unit of digital content or digital information (e.g., a video clip, an audio clip, a multimedia clip, an image, text, or another unit of content). The digital components can be electronically stored in the physical memory device as a single file or in a collection of files, and the digital components can take the form of video files, audio files, multimedia files, image files, or text files and include advertising information such that the advertisement is one type of digital component. For example, the digital component may be content intended to supplement the content of a web page or other resource displayed by the application 112. More specifically, the digital components may include digital content related to the resource content (e.g., the digital components may relate to the same subject matter as the web page content, or related subject matter). Thus, the provision of digital components can supplement and generally enhance web page or application content.
When application 112 loads a resource (or application content) that includes one or more digital component slots, application 112 can request the digital component of each slot. In some implementations, the digital component slots can include code (e.g., scripts) that cause the application 112 to request the digital components from a digital component distribution system that selects the digital components and provides the digital components to the application 112 for display to a user of the client device 110. As described below, the application 112 can request digital components from the MPC cluster 130 and/or one or more SSPs 170.
Some publishers 140 use SSP 170 to manage the process of obtaining digital components for digital component slots of their resources and/or applications. The SSP 170 is a hardware and/or software implemented technology platform that automates the process of obtaining digital components of resources and/or applications. Each publisher 140 can have a corresponding SSP 170 or SSPs 170. Some publishers 140 may use the same SSP 170.
The digital component provider 160 can create (or otherwise publish) digital components that are displayed in digital component slots of publishers' resources and applications. The digital component provider 160 can use the DSP150 to manage the provision of its digital components for display in the digital component slots. DSP150 is a hardware and/or software implemented technology platform that automates the process of distributing digital components for display with resources and/or applications. The DSP150 is capable of interacting with multiple supply side platforms SSP on behalf of a digital component provider 160 to provide digital components for display with resources and/or applications of multiple different publishers 140. In general, the DSP150 is capable of receiving a request for a digital component (e.g., from an SSP), generating (or selecting) a selection value for one or more digital components created by one or more digital component providers based on the request, and providing data related to the digital component (e.g., the digital component itself) and a selection parameter to the SSP. The selection value can indicate the number of digital component providers 160 willing to provide for display or user interaction with the digital component. The SSP can then select a digital component for display at the client device 110 and provide the client device 110 with data that causes the client device 110 to display the digital component.
In some cases, it may be beneficial for a user to receive digital components related to a web page, application page, or other electronic resource that the user previously accessed and/or interacted with. To distribute such digital components to users, users can be assigned to groups of users, e.g., groups of user interests, groups of similar users, or other group types involving similar user data, when the user accesses a particular resource or performs a particular action on the resource (e.g., interacts with a particular item displayed on a web page or adds the item to a virtual shopping cart). The user group can be generated by the digital component provider 160. That is, each digital component provider 160 is able to assign users to their group of users when they access electronic resources of the digital component provider 160. The user group can also be created by the content platform, e.g., by DSP150 and/or SSP 170.
To protect user privacy, user group membership can be maintained at the user's client device 110, e.g., by one of the applications 112 or the operating system of the client device 110, rather than by a digital component provider, content platform, or other party. In a particular example, a trusted program (e.g., a web browser or operating system) can maintain a list of user group identifiers ("user group list") for users using a web browser or another application (e.g., users logged into the browser, application, or client device 110). The user group list can include a group identifier for each user group in which the user is a member. The digital component provider 160 that creates the user group can specify the user group identifier for their user group. The user group identifier of the user group can describe the group (e.g. a gardening group) or a code (e.g. a non-descriptive alphanumeric sequence) representing the group. The user group list of the user can be stored in a secure store at the client device 110 and/or can be encrypted at the time of storage to prevent others from accessing the list.
When the application 112 displays a resource or application content associated with the digital component provider 160 or a web page on the web site 142, the resource can request that the application 112 add one or more user group identifiers to the list of user groups. In response, the application 112 can add one or more user group identifiers to the user group list and securely store the user group list.
The MPC cluster 130 can use the user group membership of the user to select digital components or other content that may be of interest to the user or otherwise beneficial to the user/user device. For example, such digital components or other content may include data that improves the user experience, improves the operation of the user device, or benefits the user or user device in some other manner. However, a user group identifier of the user's user group list can be provided and used to prevent computing system MPCs in MPC cluster 130 1 And MPC 2 The digital components are selected in a way that the user group identifier of the user is accessed in clear text, thereby protecting the privacy of the user when the user group membership data is used to select the digital components. Plaintext is text that is computationally untagged, specially formatted, or written in code or data (including binary files) in a form that can be viewed or used without the need for a key or other decryption device or other decryption process.
Computing system MPC 1 And MPC 2 Can be operated by different entities. In this manner, each entity may not have clear access to the user's group membership. For example, a computing system MPC 1 Or MPC 2 Can be operated by a different trusted party than the user, the publisher 140, the DSP150, the SSP 170, and the digital component provider 160. For example, an industry group, government group, or browser developer may maintain and operate a computing system MPC 1 And MPC 2 Of the above. Other computing systems may be operated by a different one of the groups, such that different trusted parties operate each computing system MPC 1 And MPC 2 . Preferably, the MPC of the different computing systems is operated 1 And MPC 2 There is no incentive for different parties to collude to compromise user privacy. In some embodiments, a computing system MPC 1 And MPC 2 Are architecturally separate and are monitored so as not to communicate with each other except to perform the secure MPC process described herein.
In addition to the description throughout this document, a user may be provided with controls (e.g., user interface elements with which the user can interact) to allow the user to select whether and when the systems, programs, or features described herein may enable the collection of user information (e.g., information about the user's social network, social actions or activities, profession, the user's preferences, or the user's current location), and whether to send content or communications from a server to the user. Further, certain data may be disposed of in one or more ways before it is stored or used, such that personally identifiable information is removed. For example, the identity of the user may be disposed of such that personally identifiable information of the user cannot be determined, or the geographic location of the user may be generalized (such as to a city, zip code, or state level) if location information is obtained such that a particular location of the user cannot be determined. Thus, the user may have control over what information is collected about the user, how the information is used, and what information is provided to the user.
FIG. 2 is a swim lane diagram of an example process 200 for selecting a digital component for display at a client device. The operation of process 200 can be performed, for example, by a client device 110, a computing system MPC in an MPC cluster 130 1 And MPC 2 And DSP 150. The operations of process 200 can also be implemented as instructions stored on one or more computer-readable media, which may be non-transitory, and execution of the instructions by one or more data processing apparatus can cause one or more data processing apparatus to perform the operations of process 200. Although the process 200 and the following other processes are described in terms of two computing system MPC clusters 130, MPC clusters having more than two computing systems can also be used to perform similar processes. Additionally, the operations of process 200 can be implemented by SSP 170.
DSP150 provides the MPC cluster 130 with selection values for the digital components (202). In some cases, DSP150 can provide a selection value to MPC cluster 130 via SSP 170. As described above, the selection value can indicate an amount that the digital component provider 160 is willing to provide for display or user interaction with the digital component. MPC cluster 130 is capable of storing selection values for future digital component requests received from client devices 110. For each digital component, the DSP150 can also upload additional data, such as metadata, for the digital component. The additional data for the digital component can include a user group identifier of a user group corresponding to the digital component. For example, DSP150 can manage activities in which digital components are distributed to client devices 110 of users that are members of a user group.
The data for the digital component can include a context selection signal that indicates a context for which the digital component is eligible, e.g., a location of the client device 110, a spoken language selected for the application 112, and/or a Universal Resource Locator (URL) of a resource with which the digital component can be displayed. This data for the digital component can also identify the digital component, for example, using a unique identifier, a field from which the digital component can be obtained, and/or other suitable data for the digital component.
In some embodiments, the MPC cluster 130 caches or otherwise stores selected values of the digital components provided to the MPC cluster 130 for the digital component request. In this example, the context signals for the digital component and the selection value can include the context signals included in the digital component request.
In some embodiments, each computing system MPC 1 And MPC 2 A two-level look-up table (LUT) is used to store the selection values for the digital components. The use of a two-stage LUT can provide some performance advantages, but other suitable data structures can also be used. The first level can be keyed by a user group Request Key (UG _ Request _ Key). The UG Request Key can be a composite message based on a set of context signals, e.g., a set of context signals requested by a digital component (e.g., URL, location, language, etc.) or a set of context signals that the digital component is eligible to distribute. That is, the first level LUT can be keyed based on a set of context signals. The Key for the first level can be a hash of the UG _ Request _ Key, e.g., using a hash function such as SHA 256. The key can be truncated to a specified number of bits, for example, to 16 bits, 32 bits, or other suitable number of bits. The value of each Key UG _ Request _ Key in the first level LUT can indicate a second level LUT comprising data that requests a qualified digital component for a digital component of a context signal that includes the UG _ Request _ Key. For example, for each unique Key UG _ Request _ Key, a two-level LUT can have a corresponding second-level LUT.
An example first-level LUT is shown in table 1 below.
Secret key | Value of |
SHA256(UG_Request_Key) | Second level LUT |
… | ... |
TABLE 1
The second level LUT can be keyed based on the subscriber group identifier. In some implementations, for example, if the second level LUT is a single table of data that includes multiple keys UG _ Request _ keys, the second level LUT can be keyed based on the combination of the keys UG _ Request _ keys and the subscriber group identifiers. In this example, the value for each SHA256 (UG _ Request _ Key) is a pair (ending _ row) to specify the sub-portion (i.e., consecutive rows) of the LUT corresponding to SHA256 (UG _ Request _ Key). Each row in the second level LUT can be used for a particular select value for a particular digital component. For example, the DSP150 can submit different selection values for the same digital component, where each selection value is for a different set of context signals and/or a different user group identifier. Thus, the selection value for the digital component can vary based on context.
The DSP150 or digital component provider 160 can associate (e.g., link or map) the digital component to a user group to which the DSP150 or digital component provider wants to display the digital component. For example, DSP150 may want to display digital components associated with a man's basketball shoe to men who have shown an interest in basketball and/or shoes. In this example, DSP150 can provide data to MPC cluster 130 indicating that the digital components correspond to a user group identifier that includes a user group that has shown males interested in basketball and/or shoes.
In some embodiments, the Key for a row in the second level LUT can be a hash or code generated based on a combination of the user group Request Key UG _ Request _ Key and the user group identifier of the digital component of the row. For example, the key can be the combined hash-based message authentication code (HMAC), which can be represented as HMAC SHA256 (UG _ Request _ Key, UG _ id). The user group identifier ug id can be based on a combination of the internal user group identifier of the user group and the domain of the owner of the user group (e.g. the DSP, SSP or digital component provider owning the user group). For example, the user group identifier ug _ id can be a digital digest of the owner domain's eTLD +1 and the owner's internal user group identifier of the user group. Tld +1 is the valid top level field (tld) plus a field one level more than the common suffix. Com "where" com "is the top level domain. ug _ id can be truncated to 16 bytes or other appropriate data size
Continuing with the previous example of a men's basketball shoe, the second level lookup Key for a row that includes information to be displayed to the digital components of users in the men's basketball shoe set can be a combination of the user group Request Key UG _ Request _ Key and the user group identifier UG _ id of the men's basketball shoe set. Since the digital components can be displayed in different contexts, the second level lookup table can include multiple rows of digital components associated with different user group identifiers including the user group identifier UG _ id of the men's basketball shoe group, each row having a different user group Request Key UG _ Request _ Key and a different value.
The values of each row of the second level LUT can be selected values of the digital components and other data of the digital components, such as metadata identifying the digital components or network locations from which the digital components can be downloaded, and the like. The value can be a digital component information element dc _ information _ element, which can be a byte array with a selection value and metadata. Byte array can have trusted programs of applications 112 or client devices 110 and computing system MPC 1 And MPC 2 A specific format that can be parsed to obtain the selection values and metadata. Example second level LUTs such as a table2 are shown below.
Secret key | Value of |
HMAC(UG_Request_Key,UG_ID) | { selection value, metadata } |
… | … |
TABLE 2
The second level LUT maps the selection value to a particular digital component, to a particular subscriber group identifier UG _ id, and to a particular set of context signals defined by the first level lookup Key UG _ Request _ Key, which can in some cases be present in the calculation of the second level LUT Key. By doing so, the second level LUT indicates the particular context of the digital component socket for which a selected value is expected. This allows DSP150 or digital component provider 160 to specify different selection values for the same digital component for different contexts defined by context signals and the user's group membership. When a digital component request is received indicating that the user to which the digital component is to be displayed is a member of a particular user group identified by a particular user group identifier ug ig and that the digital component is to be displayed in a particular context defined by the context signal of the first level lookup key, any selection value in the second level LUT having a matching user group identifier and matching first level lookup key is a candidate for being selected for distribution in response to the request.
The client device 110 identifies a set of user group identifiers (206). The set of user group identifiers can be user group identifiers of user groups that include the user as a member. For example, the set of subscriber group identifiers can be subscriber group identifiers in a subscriber group list. The application 112 rendering the content or the trusted program can identify the set of user group identifiers, for example, by accessing the user group list from a secure store of the client device 110.
The client device 110 generates a probabilistic data structure (208). The application 112 or trusted program can use the set of user group identifiers to generate the probabilistic data structure. In some embodiments, the probabilistic data structure is a cuckoo filter with a table using two hash functions F1 and F2. Cuckoo hashing is a hashing method that uses two (or more) tables that have a total of (1 + \ epsilon) N entries to store N items, such as user group identifiers, so that each entry will contain at most one item. In addition, each item, such as a subscriber group identifier, will appear in one of the two entries defined by one of the two hash functions F1 and F2, the output of which is the set [ (1 + \ epsilon) N ]. The entry associated with key k will appear at location F1 (k) in the first table or at location F2 (k) in the second table. For a fairly large number N of entries (e.g., N ≧ 1000), it is sufficient to use \ epsilon =0.1, which means that the N entries can be hashed using the cuckoo hashing method with a combined table size of 1.1N. In these expressions, epsilon can be referred to as a loading factor.
To construct a sparse private information retrieval data structure using cuckoo filters, up to N user group identifiers are hashed into two tables using cuckoo hashing, the table combinations having a size of 1.1N or another suitable size. All empty entries can be replaced with 0-bit strings. To inquireThe user group identifier associated with the key k, the user group identifier (if it exists in the data structure) will appear in the entry F in the first table 1 (k) Or F in the second table 2 (k) To (3). Using table size C =1.1N will yield 1. Ltoreq.F 1 (ug_id)，F 2 (ug_ic)≤C。
The client device 110 can use the hash function F 1 And F 2 Both compute two possible positions of the user group identifier for each user group identifier in the set of user group identifiers to generate the cuckoo filter. If at least one of the two possible positions is empty, the client device 110 can insert an element into the empty position, which can be in either table, to complete the insertion process for the subscriber group identifier. If both locations are occupied, the client device 110 randomly picks one location and exchanges the item currently in that location with the item to be inserted. The client device 110 can then recalculate the two hash functions F 1 And F 2 And the insertion is attempted again. This process is repeated for each user group identifier in the set of user group identifiers until the insertion is successful or too many attempts fail. After the cuckoo filter is built, each user group identifier ug _ id is stored in a specific index of the table.
The client device 110 generates a distributed point function (210). The application 112 or trusted program can generate a distributed point function using the point function and the cuckoo filter table. The distributed point function represents a secret share (secret shares) of the point function. In general, the point function is a function f i ：[N]→[N]Wherein when x! If and f (i) =1, f (x) =0. Point function f i Is two functions g i ：[N]→[N]And h i ：[N]→[N]So that for the set [ N ]]All of x, f in (1) i (x)＝g i (x)+h i (x) In that respect Furthermore, function h is given i Or g i (but not both) detailed description, it is not possible to recover the original function f i 。
For each ug _ id, a point function G is required ug_id Which can be split into distributed point functionsNumber g ug_id，1 And g ug_id，2 So as to be directed to
If i = F 1 (ug _ id), then G ug_id (i)＝g ug_id，1 (i)+g ug_id，2 (i)＝ug_id (1)
Otherwise G ug_id (i)＝g ug_id，1 (i)+g ug_id，2 (i)＝0 (2)
Similarly, a point function H is required ug_id Which can be split into distributed point functions h ug_id，1 And h ug_id，2 So as to be directed to
If i = F 2 (ug _ id), then H ug_id (i)＝h ug_id，1 (i)+h ug_id，2 (i)＝ug_id (3)
Otherwise H ug_id (i)＝h ug_id，1 (i)+h ug_id，2 (i)＝0 (4)
That is, the distributed point function of a particular point function can be evaluated over a number of possible points (e.g., a number of possible user group identifiers), but the result is always zero except for the user group identifier ug _ id of the user group for which the user is a member and for which the distributed point function was generated. The distributed point function has a very small data size that can be transmitted over the network without using too much bandwidth and with low latency compared to sending subscriber group identifiers in other encrypted forms.
For a given user group identifier ug _ id, a point function F 1 And a corresponding first table of cuckoo filters, the client device 110 generates a first table for use in a computing system MPC 1 Distributed point function g of ug_id，1 And for computing systems MPC 2 Distributed function g of ug_id，2 . Similarly, for a given user group identifier ug _ id, the point function F 2 Corresponding to a cuckoo filterSecond Table, client device 110 generated for computing System MPC 1 Distributed point function h of ug_id，1 And for computing systems MPC 2 Distributed point function h of ug_id，2 。
The client device 110 transmits a digital component request including the distributed point function to the MPC cluster 130 (212). The digital component request can include a pair of distributed point functions for each user group identifier ugid. The client device 110 is able to transmit to the computing system MPC 1a transmission including each distributed point function g ug_id，1 And each distributed point function h ug_id，1 The digital component request. The digital component Request can include a first level lookup Key, such as SHA256 (UG _ Request _ Key). Client device 110 can generate a first level lookup key based on the context signal requested by the digital component. For example, client device 110 can generate the first level lookup key by generating a composite message that includes context signals, such as a URL of a resource with which the selected digital component is to be displayed, a location of client device 110 that submitted the digital component request, a spoken language of application 112 that is to display the selected digital component, and so forth. The client device 110 can then apply a hash function, such as a SHA256 function, to the composite message to generate a first level lookup key.
Similarly, the client device 110 can send a computing system MPC 2 The transmission includes each distributed point function g ug_id，2 And each distributed point function h ug_id，2 The digital component request. The digital component Request can also include a first level lookup Key, such as SHA256 (UG _ Request _ Key). Since the context signals are the same, MPC is transmitted to both computing systems in MPC cluster 130 1 And MPC 2 The first level lookup key can be the same.
Computing system MPC 1 Can create additive secret shares M 1 ]＝[m 1，1 ，…m C，1 ]Wherein for 1 ≦ i ≦ C, m i，1 ＝∑ ug_id g ug_id，1 (i) In that respect Brackets are used in this document to denote secret shares of a secret. Subscripts after commaIn specifying secret shares, for example, 1 is a first secret share, and 2 is a second secret share, gug _ id. Similarly, computing system MPC 2 Can create additive secret shares [ M ] 2 ]＝[m 1，2 ，…m C，2 ]Wherein for 1 ≦ i ≦ C, m i，2 ＝∑ ug_id g ug_id，2 (i) In that respect In this example, secret shares [ m ] i，1 ]And [ m ] i，2 ]Is G ug_id (i) Additive secret shares of, and [ M ] 1 ]And [ M 2 ]Is a vector of two additive secret shares of M, i.e. dimension C, where M i ＝G ug_id (i) .1. The The secret shares can be generated using Shamir's secret sharing or another suitable secret sharing technique. Computing system MPC 1 And MPC 2 Can be directed to a point function h ug_id，1 (i) And h ug_id，1 (i) Similar vectors are generated.
The MPC cluster 130 performs a secure MPC process using a distributed point function to select a digital component based on a user group that includes a user of the client device 110 as a member (214). This can include using a first level lookup key to search for a key at the computing system MPC 1 And MPC 2 Identifies qualified selection values for the digital component in the two-level lookup table. This can also include identifying a selection value for the numeric component as a candidate for selection based on the numeric component having a user group identifier that matches one of the user group identifiers of the users. This can also include selecting a digital component from the candidate digital components based on the selection value of the digital component. This can be done in a computing system MPC 1 Or MPC 2 Cannot be performed in its entirety in the clear with access to the user group identifier. An example process for selecting a digital component using a secure MPC process is illustrated in fig. 3 and described below.
The MPC cluster 130 transmits a secret share of the selection result to the client device 110 (216). The selection result can be in the form of a byte array that includes information about the selected digital component. For example, the selection result can be a byte array including values of the digital components in the second LUT (e.g., the selection values of the digital components and metadata of the digital components). Computing system MPC 1 And MPC 2 The secret share of the selection result can be determined using a secure MPC process, as described in more detail below. Computing system MPC 1 Transmitting a first secret share of the selection result to the client device 110 and computing the system MPC 2 A second secret share of the selection result can be sent to the client device 110. To prevent computing system MPC 1 And MPC 2 Knowing selected digital components can prevent computing system MPC 1 And MPC 2 Share their secret shares of the selection result with each other. For example, a computing system MPC 1 And MPC 2 Its secret shares can be independently encrypted using the public key of the application (e.g., browser).
When using two tables of cuckoo filters, the MPC cluster 130 can provide a secret share of the two selection results, one for each table. However, retrieving two user group list selection values for two digital components facilitates selecting value obsolete. To reduce this risk, the MPC cluster 130 can use another secure MPC technique to return at most one selection result with the highest selection value, as described below.
In some implementations, the client device 110 can request digital components based on user group membership from the MPC cluster 130. Client device 110 can also request digital components based on context signals from SSP 170. These context signals can include the same context signals described above, as well as optionally additional context signals, such as the number of digital component slots of a resource, the type of digital component slot, the type and/or format of digital components that can be displayed with a resource, and so forth. SSP 170 can select one or more digital components based on the context signal and the selection value for the digital component, and provide one or more of the selected digital component (or data identifying the digital component) and the selection value for the digital component to client device 110. The client device 110 can then select a digital component to be displayed with the resource from a set of digital components that includes the selection result received from the MPC cluster 130 and the digital component selected by the SSP 170.
If the resource includes multiple slots for digital components, client device 110 can request the respective digital component for each slot from MPC cluster 130 and from SSP 170. To reduce the consumed bandwidth and latency, the client device 110 can transmit a distributed point function for the user for all digital component slots at once.
Although the steps for generating the cuckoo filter and the distributed point function are shown in fig. 2 as being performed after receiving the content, the client device 110 can generate the cuckoo filter and the distributed point function prior to receiving the content. For example, the client device 110 can generate and cache the cuckoo filter and the distributed point function periodically or in response to the user group membership of the user being updated.
FIG. 3 is a swim lane diagram of an example process 300 for selecting digital components for distribution to client devices. The operation of the process 300 can be performed, for example, by a computing system MPC in an MPC cluster 130 1 And MPC 2 To achieve the same. The operations of process 300 can also be implemented as stored on one or more computer-readable mediaThe one or more computer-readable media may be non-transitory, and execution of the instructions by one or more data processing apparatus may cause the one or more data processing apparatus to perform the operations of process 300.
Computing system MPC 1 Qualified selection values are identified (302). Computing system MPC 1 Qualified selection values of digital component requests received from client device 110 can be identified, for example, as described above with reference to fig. 2. For each user group that includes a user of the client device as a member, the digital component request can include use of a hash function F by the client device 110 1 Distributed point function g generated for user group identifier ug _ id ug_id,1 . The digital component request can also include the use of a hash function F by the client device 110 2 Distributed point function h generated for user group identifier ug _ id ug_id,1 . The digital component Request can also include a first level lookup Key, such as SHA256 (UG _ Request _ Key), generated based on the context signal of the digital component Request.
Computing system MPC 1 The qualified selection value can be identified using a first level lookup key requested by the digital component. Computing system MPC 1 A first level LUT can be accessed and used to identify a row of a second level LUT that includes information for a selection value of a digital component (e.g., for which the selection value has been received) that is eligible for display for the set of context signals represented by the first level lookup key. For example, as described above, each row of the second level LUT includes information for a digital component and a second level lookup key based on the set of context signals. Thus, computing system MPC 1 A first-level lookup key can be used to identify a row of a second-level LUT having a set of context signals that matches the set of context signals defined by the first-level lookup key received in the digital component request. These lines include information of digital components that are eligible to be displayed or have eligible selection values for the context defined by the first level lookup key received in the digital component request.
Computing system MPC 2 Qualified selection values are identified (304). Computing system MPC 2 Qualified selection values for digital component requests received from client device 110 can be identified. The digital component request can include, for each user group that includes as a member the user of the client device, the use of a hash function F by the client device 110 1 Distributed point function g generated for user group identifier ug _ id ug_id,2 . The digital component request can also include the use of a hash function F by the client device 110 2 Distributed point function h generated for user group identifier ug _ id ug_id,2 . The digital component Request can also include a first level lookup Key, such as SHA256 (UG _ Request _ Key), generated based on the context signal of the digital component Request.
By a computing system MPC 2 The first level lookup key requested by the received digital component can be associated with the first level lookup key requested by the computing system MPC 1 The received first level lookup keys are the same. Each distributed point function g ug_id,2 Can be based on and calculated by a system MPC 1 Received distributed point function G with same corresponding distributed point function ud_id To generate. That is, the client device 110 can use the hash function F for the user group identifier ud _ id of the user group comprising the user as a member 1 Generating a distributed function g of a digital component request ug_id,1 And g ug_id,2 . Similarly, the client device 110 can use a hash function F for the user group identifier ud _ id of the user group comprising the user as a member 2 Distributed function h for generating digital component requests ug_id,1 And h ug_id,2 。
For simplicity, the remaining steps of process 300 are based on responses according to a hash function F 1 Requesting a digital component of the distributed point function to select a digital component for distribution to the client device 110. However, it is possible to match the hash function F 2 The distributed point function of (2) performs the same steps. This can result in two selected digital components and the MPC cluster 130 can perform additional operations to select one of the two digital components, as described below.
Computing system MPC 2 Identification using a first level lookup key requested by a digital componentAnd (6) selecting a value qualified. Computing system MPC 2 A first level LUT can be accessed and a first level lookup key used to identify a row of a second level LUT that includes information for digital components (e.g., for which a selection value has been received) that qualify to be displayed for the set of context signals represented by the first level lookup key. As described above, each computing system MPC 1 And MPC 2 A corresponding two-level LUT can be maintained that includes the same information.
For each qualified selection value, calculate the system MPC 1 And MPC 2 A determination is made in response to the digital component request whether the selection value and its digital component are candidates for selection for distribution to the client device 110 (308). The candidate selection values are qualified selection values of the numeric components having a user group identifier that matches the user group identifier of the user (e.g., the user group identifier of the user group that includes the user as a member). As described above, each digital component can be mapped to one or more user groups that include members to which the DSP150 or digital component provider 160 indicates that the digital component should be displayed. As described above, this information (i.e., ug id) is part of the second level lookup key of the second level LUT.
The digital component of a row in the second level LUT is a candidate for selection if its subscriber group identifier ug id matches one of the subscriber group identifiers of the subscriber as part of the second level lookup key for that row. Conceptually, to use a two-table cuckoo filter to determine whether a digital component is a candidate to represent a user's group membership, the computing system can determine whether the user group identifier ug _ id of the second level lookup key matches one of the two tags in one of the two cuckoo filter locations.
Computing system MPC 1 And MPC 2 Candidate selection values can be identified using secure MPC techniques with secret shares such that computing system MPC 1 And MPC 2 Neither is it known which digital components are candidates or include groups of users that are members of the user. To do so, the computing system MPC 1 Calculating a first candidate parameter is _ dc _ a _ candidate for each digital component of a row in the second level LUT as a candidate for selectionAnd (4) shares. Similarly, computing system MPC 2 A second contribution of the candidate parameter is _ dc _ a _ candidate is calculated for each digital component of a row in the second level LUT as candidate for selection. The candidate parameter is _ dc _ a _ candidate can be a boolean value (e.g. zero or one) indicating whether the selection value linked to the user group identifier ug _ id and the corresponding digital component are candidates.
A first share of the candidate parameter is _ dc _ a _ candidate for the digital component dc can be denoted as [ is _ dc _ a _ candidate [ ] dc，1 ]And a second contribution of the candidate parameter is _ dc _ a _ candidate can be represented as [ is _ dc _ a _ candidate [ ] dc，2 ]. The first secret share of the candidate parameters of the digital components dc of the rows in the second level LUT as candidates for selection and associated with the subscriber group identifier ug id is boolean
Computing system MPC 1 And MPC 2 Enabling MPC in a computing system 1 And MPC 2 Using secure MPC techniques for hash function F with one or more round trips therebetween 1 Calculating secret share [ is _ dc _ a _ candidate ] dc，1 ]And [ is _ dc _ a _ candidate dc，2 ]To evaluate ug _ id = = [ g =% ug_id，1 (F 1 (ug_id))]And ug _ id = [ g = = = [ g ] ug_id，1 (F 1 (ug_id))]Is expressed in terms of equality. That is, computing system MPC 1 And MPC 2 Can be directed to as a digital componentEach subscriber group identifier received by the requesting portion from the client device 110 is based on a distributed point function g ug_id，1 And g ug_id，2 To determine the secret share of each digital component [ is _ dc _ a _ candidate ] associated with the user group identifier ug _ id dc，1 ]And [ is _ dc _ a _ candidate ] dc，2 ]。
Computing system MPC 1 And MPC 2 A secret sharing technique or secret sharing library that supports the operations shown in table 3 below can be used. One example secret sharing technique that supports these operations is security through private information aggregation (SEPIA).
TABLE 3
Computing system MPC 1 An order in which the values are selected is determined (308). Similarly, computing system MPC 2 An order of the selection values is determined (310). MPC for each computing system 1 And MPC 2 The order of the select values in its second level LUT can be determined. If the two-level LUT includes a second level LUT for each user group Request Key UG _ Request _ Key, the order can include all selection values in the second level LUT, including candidate selection values and selection values that are not candidates. The order can be from highest selection value to lowest selection value. In some embodiments, the selection value for the order can be a value provided to the resource issuer after displaying the selected digital component, e.g., after any sharing with DSP150 and/or SSP 170. Since the selection values are in plain text, the computing system MPC is calculated 1 And MPC 2 It is not necessary to perform any round trip calculation to order the selection values. Alternatively, each computing system MPC 1 And MPC 2 The select values of their second level LUTs can be independently ordered. If the selection value is stored as a secret share in each computing system MPC 1 And MPC 2 Where each computing system MPC 1 And MPC 2 Having a respective secret share for each selected value, the system MPC is calculated 1 And MPC 2 Can be performed using round trip calculationsThe secured MPC process to order the selection values.
Computing system MPC 1 And MPC 2 A secret share of the accumulated value for each candidate selection value is determined (312). Conceptually, the cumulative value of a given selection value for a numeric component represents the total number of candidate selection values from the top of the order to the given selection value (including the given selection value if the given selection value is a candidate). This concept is shown in table 4 below.
Sorted selection values | is_dc_a_candidate | Cumulative value (acc) | Is the cumulative value equal to 1? |
Highest point of the design | 0 | 0 | 0 |
Second highest | 1 | 1 | 1 |
Third highest | 0 | 1 | 1 |
Height four | 1 | 2 | 0 |
… | … | … | … |
TABLE 4
In some embodiments, the cumulative value of a given selection value for a numeric component represents the total number of candidate selection values from the top of the order to the given selection value (excluding the given selection value if it is a candidate). In this example, the fourth column would indicate whether the accumulated value is equal to zero instead of one. In either case, the accumulated value of each selection value indicates a position of the selection value in a ranked order of candidate selection values, the candidate selection values being candidates selected based on the selection values being associated with user group identifiers matching the user's user group identifier.
In table 4, for each selected value having a candidate parameter is _ dc _ a _ candidate equal to one, the cumulative value (acc) increases as it progresses from the top of the order to the bottom of the order. For example, the accumulated value acc of the highest selection value is zero, because the candidate parameter is _ dc _ a _ candidate for the highest selection value is equal to zero. The accumulated value acc for the second selection value is one because the candidate parameter is _ dc _ a _ candidate for the second selection value is equal to one and no selection values higher than the second highest selection value have a candidate parameter is _ dc _ a _ candidate equal to one. Moving downwards in order, the candidate parameter is _ dc _ a _ candidate for the third highest selection value is zero, so the accumulated value acc for the third selection value is not incremented from the accumulated value acc for the second selection value. Since the candidate parameter is _ dc _ a _ candidate for the fourth highest selection value is one, the cumulative value acc for the fourth highest selection value is incremented by one from the cumulative value acc for the third highest selection value. Therefore, the cumulative value acc for the fourth high selection value is equal to two, because there are two selection values with the candidate parameter is _ dc _ a _ candidate from the highest selection value to the fourth high selection value (including the highest selection value and the fourth high selection value).
Using the table, the system MPC is calculated 1 And MPC 2 The digital component corresponding to the selected parameter having the value of one together with the candidate parameter is _ dc _ a _ candidate and the cumulative value acc having the value of one (as indicated in the fourth column of table 4) will be selected for distribution to the client device 110. This means that the candidate parameter is _ dc _ a _ candidate has the highest ranking selection value of one. Since the candidate parameter is _ dc _ a _ candidate is in secret shares for computing the system MPC 1 And MPC 2 Maintaining user privacy and ensuring that user data is not compromised, therefore computing system MPC 1 And MPC 2 A secret share of the accumulated value acc of each selection value is determined and a round trip calculation is used to determine which selection value has an accumulated value acc equal to one and a candidate parameter is _ dc _ a _ candidate equal to one.
Computing system MPC 1 And MPC 2 The secret shares of the accumulated value acc of each of their selected values can be determined independently without any round trip calculation. For example, a computing system MPC 1 The first contribution [ acc ] of the accumulated value acc can be determined for each selection value and its corresponding digital component dc by traversing all selection values in order from highest to lowest and summing the candidate parameters is _ dc _ a _ candidate for the selection values along the way dc，1 ]As described above with reference to table 4. Similarly, computing system MPC 2 The second contribution [ acc ] of the accumulated value acc can be determined for each selection value and its corresponding digital component dc by traversing all selection values in order from highest to lowest and summing the candidate parameters is _ dc _ a _ candidate for the selection values along the way dc，2 ]。
Computing system MPC 1 And MPC 2 A secret share of the result is determined for each selected value (314) indicating whether the accumulated value has a specified value. The specified value can be the value one as shown in columns 3 and 4 of table 4. As described above, the selection value for which the accumulated value acc is one and the candidate parameter is _ dc _ a _ candidate is one is the highest selection value among the candidate selection values.
Computing system MPC 1 And MPC 2 Capable of participating in multiple rounds of computation, e.g., multiple Remote Procedure Calls (RPCs), as part of a secure MPC process to compute an equality operation acc from a secret share of each selected value dc =1. At the end of this process, the computing system MPC 1 With a result acc for each selection value dc =1, and computing system MPC 2 With a result acc for each selection value dc =1 another secret share.
Computing system MPC 1 And MPC 2 A selection result is determined (316). Computing system MPC 1 And MPC 2 Can be based on acc for each selected value dc Secret share and candidate parameter is _ dc _ a _ candidate of =1 dc Determines the selection result. To do so, the computing system MPC 1 And MPC 2 The winner parameter is _ dc _ the _ winner can be calculated from the secret share dc . Winner parameter is _ dc _ the _ winner dc Can be a boolean value indicating whether the selection value is a winner of the selection process (e.g., whether a digital component corresponding to the selection value was selected for distribution to the client device 110 in response to a digital component request).
Selecting a value winner parameter is _ dc _ the _ winner dc The candidate parameter is _ dc _ a _ candidate can be based on a selection value dc And whether the cumulative value acc of the selection value is equal to a specified value, e.g., one or zero depending on how the fourth column of table 4 is determined. In the following example, the MPC cluster 130 can determine the product of these two parameters for each selected value. Other techniques can also be used to determine the candidate parameter is _ dc _ a _ candidate dc Whether true or one and whether the accumulated value is equal to the specified value.
Each computing system MPC 1 And MPC 2 The winner parameter is _ dc _ the _ winner can be calculated independently from the secret share for each selected value dc ＝＝(is_dc_a_candidate dc ×(acc dc = 1)). This requires a computing system MPC 1 And MPC 2 One RPC in between to multiply the two secret shares. Where the MPC processAt the end, computing system MPC 1 With result is _ dc _ the _ winner dc Is expressed as [ is _ dc _ the _ winner [ ] dc,1 ]＝[is_dc_a_candidate dc,1 ]x([acc dc,1 ]= 1). Similarly, computing system MPC 2 With result is _ dc _ the _ winner dc Is expressed as [ is _ dc _ the _ winner) dc,2 ]＝[is_dc_a_candidate dc,2 ]x([acc dc,2 ]= 1). Note that for all selection values, at most one selection value has a winner parameter is _ dc _ the _ winner equal to one dc Which corresponds to the digital component selected for distribution to the client device 110. All other selection values will be equal to zero.
Computing system MPC 1 And MPC 2 The selection result can be calculated based on the winner parameter of the selection value and the digital component information element dc _ information _ element of the selection value or the selection value itself. As described above, the digital component information element dc _ information _ element of the digital component can include a selection value of the digital component and other data of the digital component.
Computing system MPC 1 And MPC 2 The selection result can be calculated using the following relation 5 F1 。
In this example, the selection result resultF1 will have a value of zero in case there is no cached selection value with a user group identifier matching the user's user group identifier, or will have a value equal to the digital component information element dc _ information _ element of the selected digital component having an is _ dc _ the _ winner equal to one dc . In another example, the digital component information element dc _ information _ element can be replaced with a selection value of the digital component in relation 5. In this example, the result is selected F1 Will be selected when there is no cache with a subscriber group identifier matching the subscriber's subscriber group identifierHas a value of zero in the case of a select value, or will have a value equal to the select value of the selected digital component having is _ dc _ the _ winner equal to one dc 。
To perform calculations in secret shares, the computing system MPC 1 Takes all the buffered selection values and will be the digital component information element dc _ information _ element for the selection value, which can be in plaintext dc Multiplying a first secret share [ is _ dc _ the _ winner ] of the winner parameter dc，1 ]. Computing system MPC 1 The sum of these products can then be determined and returned to the client device 110 that submitted the digital component request. That is, computing system MPC 1 The first share as a result of using the sum of the following relational expression 6 can be determined
Computing system MPC 2 Similar calculations can be performed to determine a second share of the result using the following relationship 7
Computing system MPC 1 Can select the first share of the resultclient device 110. Similarly, computing system MPC 2 Can select the second share of the resultclient device 110. Application 112 can then useTwo secret sharesMPC cluster 130 does not identify a digital component for the user group that includes the user as a member. Otherwise, result is selected F1 Having a value equal to the digital component information element dc _ information _ element selected in the selection process, the application 112 is able to parse the digital component information element dc _ information _ element to obtain the selected value and metadata of the digital component. As described above, the application 112 can then display the digital component or perform a selection process using the digital component and other digital components received from the SSP 170.
In a dual table cuckoo filter implementation where an element can be inserted into one of two possible locations, application 112 can receive two selection results, each hash function F 1 And F 2 One. In this example, the application 112 can select a digital component from a collection of digital components that includes both these digital components and any digital components received from the SSP 170.
In some embodiments, application 112 may be able to perform final verification that the user group of digital components selected by MPC cluster 130 matches the user group that includes the user as a member. For example, the digital component information element dc _ information _ element of each digital component can include a user group identifier of the digital component. The application 112 is able to compare the user group identifier of the digital component information element dc _ information _ element with the user group list of the user. If there is no match, the application 112 can exclude the digital component from the selection process. If there is a match, the application 112 can include the digital component in the selection process.
As described above, receiving two selection results from the MPC cluster 130 can facilitate selection value discarding. To reduce this risk, the MPC cluster 130 can perform a process that returns only one selection result.
In a single table cuckoo filter implementation, each subscriber group identifier ug _ id can appear at its index F 1 (ug _ id) and F 2 (ug _ id) in two places. Let M denote a single table cuckoo filter and Mi denote the value of the ith element in the table. If it is notMPC cluster 130 can calculate the candidate parameter is _ dc _ a _ candidate for the selected value using the following relation 8 or 9 dc 。
Relation 8 can require two equality tests that can be performed in parallel. Relation 9 can require one equality test and one multiplication. When performing these operations on secret shares using the secure MPC process, the multiplication requires fewer computations and one round trip but the equality test can require more computations and four round trips in the probability solution. Therefore, relational expression 8 can require fewer round trips but more computations than relational expression 9.
Computing system MPC 1 The candidate parameter is _ dca _ candidate can be calculated for the selected value on the secret share based on relation 8 using relation 10 below dc 。
[is_dc_a_candidate dc，1 ]＝(ug_id＝＝[g ug_id，1 (F 1 (ug-id))])+(ug_id＝＝[g ug_id，1 (F 2 (ug_id))]) (10)
Similarly, computing system MPC 2 The candidate parameter is _ dc _ a _ candidate can be calculated for the selected value on the secret share based on the relation 8 using the following relation 11 dc 。
[is_dc_a_candidate dc，2 ]＝(ug_id＝＝[g ug_id，2 (F 1 (ug_id))])+(ug_id＝＝[g ug_id，2 (F 2 (ug_id))]) (11)
Computing system MPC 1 The candidate parameter is _ dc _ a _ candidate can be calculated for the selected value on the secret share based on relation 9 using relation 12 below dc 。
[is_dc_a_candidate dc，1 ]＝((ug_id-[g ug_id，1 (F 1 (ug_id))])×(ug_id-[g ug_id，1 (F 2 (ug_id))]))＝＝0 (12)
Computing system MPC 2 The candidate parameter is _ dc _ a _ candidate can be calculated for the selected value on the secret share based on relation 9 using relation 13 below dc 。
[is_dc_a_candidate dc，2 ]＝((ug_id-[g ug_id，2 (F 1 (ug_id))])×(ug_id-[g ug_id，2 (F 2 (ug_id))]))＝＝0 (13)
The MPC cluster 130 can then calculate the secret share of the selection result using a process similar to the process 300 of fig. 3. In particular, a computing system MPC 1 And MPC 2 The secret share [ acc ] of the accumulated value acc can be calculated for each selection value based on the order of the selection values and the candidate parameter of the selection value, respectively dc，1 ]And [ acc ] or dc，2 ]。
Computing system MPC 1 And MPC 2 The secret share [ is _ dc _ the _ winner ] of the winner parameter is _ dc _ the _ winner can be calculated for each choice value based on the candidate parameter of the choice value and whether the cumulative value of the choice values is equal to one or not, respectively dc，1 ]And [ is _ dc _ the _ winner dc，2 ]。
Computing system MPC 1 And MPC 2 Can useThe secret share [ result ] of the selection result is calculated by the following relations 14 and 15 1 ]And [ result 2 ]。
[result 1 ]＝∑ dc ([is_dc_the_winner dc，1 ]×dc_information_element dc ) (14)
[result 2 ]＝∑ dc ([is_dc_the_winner dc，2 ]×dc_information_element dc ) (15)
Computing system MPC 1 Can select the result [ result 1 ]Is returned to the application 112 and the system MPC is calculated 2 Can select the result [ result 2 ]The second share of (c) is returned to the application 112. As described above, the application 112 can then use the two secret shares to reconstruct the selection result.
The above description relates the multiplication between secret shares of secret integers whose values are 0 or 1 to a computer logical AND (AND). The above description also relates to a secret share of 1 minus a secret integer whose value is 0 or 1 to a computer logical NOT (NOT). In some embodiments, alternative solutions can be employed to evaluate logical expressions with respect to secret shares. For example, to compute a logical AND of additive secret shares of a secret integer whose value is 0 or 1, the MPC server can compare the sum of those additive secret shares with the number of secret shares. For yet another example, to compute an arbitrary logical expression with secret shares as input, the MPC server can employ a truth table approach, i.e., computing the system MPC 1 Can construct a model including MPC 2 A truth table for one row for each possible combination of held input secret shares. Computing system MPC 1 Is represented as [ result 1 ]The result of (2) randomly selects secret shares. For each row, computing system MPC 1 Can combine its input secret shares and be processed by the MPC 2 The held speculation inputs secret shares to reconstruct the inputs of the logical expression in the clear, and then evaluates the results of the logical expression. For each row, computing system MPC 1 The result is split into two secret shares, one of which is [ result 1 ]And the other is [ result 2 ]. Computing systemUnified personal computer (MPC) 1 Then [ result ] will 2 ]To the rows in the truth table. In a computing system MPC 1 After completing the construction of the truth table, the system MPC is calculated 2 Can initiate an inadvertent transport extension (OTe) to extract truth tables from the MPC 2 The row corresponding to the held input secret share. The extraction result is [ result 2 ]. At the end of the above process, the system MPC is calculated 1 And MPC 2 Respectively hold [ result 1 ]And [ result 2 ]They are secret shares of the logic expression result. Computing system MPC 1 Not knowing [ result 2 ]And calculating the system MPC 2 Not knowing [ result 1 ]The value of (c). In some embodiments, a computing system MPC 1 And MPC 2 The is _ dc _ a _ candidate can be determined by constructing a garbled circuit to evaluate a logic expression dc,1 And is _ dc _ a _ candidate dc,2 。
Fig. 4 is a flow diagram illustrating an example process 400 for selecting digital components for distribution to client devices. The operation of the process 400 can be performed, for example, by a computing system MPC of the MPC cluster 130 1 Or a computing system MPC 2 And (5) realizing. The operations of process 400 can also be implemented as instructions stored on one or more computer-readable media, which can be non-transitory, and execution of the instructions by one or more data processing apparatus can cause the one or more data processing apparatus to perform the operations of process 400. For simplicity, process 400 is described as being performed by a computing system MPC 1 And (6) executing.
Computing system MPC 1 A digital component request is received from a client device 110 (402). The digital component request can include one or more distributed point functions. Each distributed point function can represent a secret share of the point function that indicates whether a user of the client device is a member of a respective first user group identified by a respective first user group identifier. E.g. by a computing system MPC 1 The received digital component request can include a distributed point function g for each user group that includes the user of the client device 110 as a member ug_id,1 。
Digital component requests can also be packagedIncluding the lookup key. For example, the digital component Request can include a user group Request Key UG _ Request _ Key, which can be a composite message based on a set of context signals (e.g., the set of context signals requested by the digital component). Capable of adding MPC systems (e.g. computing system MPC) to one or more 2 ) Sending similar digital component requests, the attached computing system will be in a secure MPC process with the computing system MPC 1 Cooperate to select a digital component to be provided to the client device 110 in response to a digital component request. For each distributed point function of a digital component request, each other digital component request can include a corresponding distributed point function generated for the same user group identifier using the same point function. For example, a computing system MPC 2 Will be directed to a MPC by a computing system 1 Each distributed point function g received ug_id,1 Receiving a corresponding distributed point function g ug_id,2 。
Computing system MPC 1 A plurality of selection values are identified (404). Each selection value can correspond to a respective numeric component and a respective second user group identifier for a respective second user group to which the respective numeric component is eligible to be distributed. As described above, the selection value can be stored in a second level LUT having metadata identifying its corresponding digital component and a lookup key for the context signal to which the selection value qualifies based on the user group identifier of the selection value and the selection value.
Computing system MPC 1 Candidate parameters are determined using a secure MPC process in cooperation with one or more second computing systems in the plurality of MPC systems for each selected value (406). The candidate parameter is _ dc _ a _ candidate indicates whether the second user group identifier corresponding to the selection value matches at least one of the one or more first user group identifiers. That is, the candidate parameter is _ dc _ a _ candidate for the selection value indicates whether the user group identifier for the selection value matches the user group identifier of the user group comprising the user of the client device 110 as a member. If so, the numerical component corresponding to the selection value is a candidate numerical component as a selected candidate. As described above, computing system MPC 1 Being able to use a secure MPC processAnd including a computing system MPC 2 The one or more additional MPC systems of (a) cooperate to obtain a first secret share of the candidate parameter is _ dc _ a _ candidate for each selected value.
Computing system MPC 1 A first secret share of the selection result is generated (408). Computing system MPC 1 Capable of being combined with and including a computing system MPC 2 The one or more additional MPC systems of (a) cooperate to generate a selection result. Typically, the selection result identifies the candidate digital component with the highest selection value. As described above, the MPC system can rank the selection values, determine a cumulative value for each selection value, and determine a secret share of the winner parameter is _ dc _ the _ winner for each selection value. The MPC system can then cooperate to determine, for each selection value, a secret share of the selection result that is the sum of the winner parameter of the selection value and the product of the digital component information elements of the selection value. For example, the MPC system can determine the secret share of the sum of products using the relation 5 shown above.
Computing system MPC 1 A first secret share that identifies the selection result for a given digital component is provided to client device 110 (410). As described above, the selection result identifies the selected digital component and the selected value of the digital component. The client device 110 is also capable of receiving a respective secret share of the selection result from each of the one or more additional MPC systems. As described above, the client device 110 can use the secret shares to reconstruct the selection result.
In some embodiments, cuckoo filters can be sent to the MPC cluster 130 themselves, rather than using a distributed point function. In this example, the application 112 can use a pseudo-random function (PRF) parameterized by the user group identifier or an identifier from the set of blocking identifiers and either of two random variables generated by the application 112. For example, assume that the three random variables generated by the application 112 are rand _ var1a, rand _ var1b, and rand _ var2. It is also assumed that each entry in the bucket is a k-bit integer. In some embodiments, the application 112 and MPC cluster 130 agree on a PRF in advance, where k is the number of bits in each entry in the bucket of the cuckoo filter. Each item in the bucket of the cuckoo filter can be occupied by a user group identifier or a block identifier, or empty. For example, the application 112 can generate a cuckoo filter table whose items are PRF (ug _ id, rand _ var1 a), PRF (blocked _ id, rand _ var1 b), or 0, where ug _ id is an identifier of a user group generated by applying HMAC on a label of the user group (e.g., user group identifier) based on the domain of the content provider, and 0 represents an empty item. The process is repeated on all subscriber group identifiers and blocking identifiers.
Computing system MPC 1 It is determined whether each candidate selection value is associated with the user group specified in the request. Computing system MPC 1 An equivalent value of the secret share array of the received cuckoo filter table M, denoted as [ M ] 1 ]. Each subscriber group identifier present in M will be located in one of N possible locations.
Computing system MPC 1 The user group-based candidate parameter [ is _ dc _ a _ candidate is calculated according to the following relation 16 x，1 ]；
Where ii represents a multiplication of a plurality of terms. Here, ug _ id (x) is a function for retrieving the user group identifier ug _ id associated with the selection value x, { F 1 ，...F N Is the set of hash functions used to compute the possible indices of the entries in the cuckoo filter table a, and rand val1a is the random value received in the digital component request. [ M ] A x，1 ]Is a series of numbers [ M 1 ]The x-th element in (1). = equality test between the secret shares of the plaintext integer and the secret integer. The result of = is a secret share of a secret integer of 0 (not equal) or 1 (equal). Here, [ M ] i，1 ]Value of = [ PRF (rand _ val2a, i) ] 1 ]。
Similarly, computing system MPC 2 The user group-based candidate parameter [ is _ dc _ a _ candidate is calculated according to the following relation 17 x，2 ]：
Here, [ M ] i，2 ]Value of (1 = B) i 。
FIG. 5 is a block diagram of an example computer system 500 that can be used to perform the operations described above. The system 500 includes a processor 510, a memory 520, a storage device 530, and an input/output device 540. Each of the components 510, 520, 530, and 540 can be interconnected, for example, using a system bus 550. Processor 510 is capable of processing instructions for execution within system 500. In some implementations, the processor 510 is a single-threaded processor. In another implementation, the processor 510 is a multi-threaded processor. The processor 510 is capable of processing instructions stored in the memory 520 or the storage device 530.
The storage device 530 is capable of providing mass storage for the system 500. In some implementations, the storage device 530 is a computer-readable medium. In various different implementations, the storage device 530 can include, for example, a hard disk device, an optical disk device, a storage device shared by multiple computing devices over a network (e.g., a cloud storage device), or some other mass storage device.
The input/output device 540 provides input/output operations for the system 500. In some implementations, the input/output device 540 can include one or more of: a network interface device, such as an ethernet card, a serial communication device, such as an RS-232 port, and/or a wireless interface device, such as an 802.11 card. In another embodiment, the input/output devices can include drive devices configured to receive input data and transmit output data to external devices 560 (e.g., key fobs, printers, and display devices). However, other implementations can also be used, such as mobile computing devices, mobile communication devices, set-top box television client devices, and so forth.
Although an example processing system has been described in fig. 5, implementations of the subject matter and the functional operations described in this specification can be implemented in other types of digital electronic circuitry, or in computer software, firmware, or hardware, including the structures disclosed in this specification and their structural equivalents, or in combinations of one or more of them.
Embodiments of the subject matter and the operations described in this specification can be implemented in digital electronic circuitry, or in computer software, firmware, or hardware, including the structures disclosed in this specification and their structural equivalents, or in combinations of one or more of them. Embodiments of the subject matter described in this specification can be implemented as one or more computer programs, i.e., one or more modules of computer program instructions, encoded on a computer storage medium (or media) for execution by, or to control the operation of, data processing apparatus. Alternatively or additionally, the program instructions can be encoded on an artificially generated propagated signal, e.g., a machine-generated electrical, optical, or electromagnetic signal, that is generated to encode information for transmission to suitable receiver apparatus for execution by the data processing apparatus. The computer storage medium can be or be included in a computer-readable storage device, a computer-readable storage substrate, a random or serial access memory array or device, or a combination of one or more of them. Further, although the computer storage medium is not a propagated signal, the computer storage medium can be a source or destination of computer program instructions encoded in an artificially generated propagated signal. The computer storage medium can also be or be included in one or more separate physical components or media (e.g., multiple CDs, disks, or other storage devices).
The operations described in this specification can be implemented as operations performed by data processing apparatus on data stored on one or more computer-readable storage devices or received from other sources.
The term "data processing apparatus" encompasses all kinds of apparatus, devices, and machines for processing data, including by way of example a programmable processor, a computer, a system on a chip, or a plurality or combination of the foregoing. The apparatus can comprise special purpose logic circuitry, e.g., an FPGA (field programmable gate array) or an ASIC (application-specific integrated circuit). The apparatus can include, in addition to hardware, code that creates an execution environment for the computer program in question, e.g., code that constitutes processor firmware, a protocol stack, a database management system, an operating system, a cross-platform runtime environment, a virtual machine, or a combination of one or more of them. The apparatus and execution environment are capable of implementing a variety of different computing model infrastructures, such as web services, distributed computing and grid computing infrastructures.
A computer program (also known as a program, software application, script, or code) can be written in any form of programming language, including compiled or interpreted languages, declarative or procedural languages, and it can be deployed in any form, including as a stand-alone program or as a module, component, subroutine, object, or other unit suitable for use in a computing environment. A computer program may, but need not, correspond to a file in a file system. A program can be stored in a portion of a file that holds other programs or data (e.g., one or more scripts stored in a markup language document), in a single file dedicated to the program in question, or in multiple coordinated files (e.g., files that store one or more modules, sub programs, or portions of code). A computer program can be deployed to be executed on one computer or on multiple computers that are located at one site or distributed across multiple sites and interconnected by a communication network.
The processes and logic flows described in this specification can be performed by one or more programmable processors executing one or more computer programs to perform actions by operating on input data and generating output. The processes and logic flows can also be performed by, and apparatus can also be implemented as, special purpose logic circuitry, e.g., an FPGA (field programmable gate array) or an ASIC (application-specific integrated circuit).
Processors suitable for the execution of a computer program include, by way of example, both general and special purpose microprocessors. Generally, a processor will receive instructions and data from a read-only memory or a random access memory or both. The essential elements of a computer are a processor for performing actions in accordance with instructions and one or more memory devices for storing instructions and data. Generally, a computer will also include, or be operatively coupled to receive data from or transfer data to, or both, one or more mass storage devices for storing data, e.g., magnetic, magneto optical disks, or optical disks. However, a computer need not have such a device. Further, the computer can be embedded in another device, e.g., a mobile telephone, a Personal Digital Assistant (PDA), a mobile audio or video player, a game console, a Global Positioning System (GPS) receiver, or a portable storage device (e.g., a Universal Serial Bus (USB) flash drive), to name a few. Devices suitable for storing computer program instructions and data include all forms of non-volatile memory, media and memory devices, including by way of example semiconductor memory devices, e.g., EPROM, EEPROM, and flash memory devices; magnetic disks, such as internal hard disks or removable disks; magneto-optical disks; and CD-ROM and DVD-ROM disks. The processor and the memory can be supplemented by, or incorporated in, special purpose logic circuitry.
To provide for interaction with a user, embodiments of the subject matter described in this specification can be implemented on a computer having a display device, e.g., a CRT (cathode ray tube) or LCD (liquid crystal display) monitor, for displaying information to the user and a keyboard and a pointing device, e.g., a mouse or a trackball, by which the user can provide input to the computer. Other types of devices can also be used to provide for interaction with a user; for example, feedback provided to the user can be any form of sensory feedback, such as visual feedback, auditory feedback, or tactile feedback; and input from the user can be received in any form, including acoustic, speech, or tactile input. Further, the computer is able to interact with the user by sending and receiving documents to and from the device used by the user; for example, by sending a web page to a web browser on the user's client device in response to a request received from the web browser.
Embodiments of the subject matter described in this specification can be implemented in a computing system that includes a back-end component (e.g., as a data server), or that includes a middleware component (e.g., an application server), or that includes a front-end component (e.g., a client computer having a graphical user interface or a Web browser through which a user can interact with an implementation of the subject matter described in this specification), or any combination of one or more such back-end, middleware, or front-end components. The components of the system can be interconnected by any form or medium of digital data communication, e.g., a communication network. Examples of communication networks include local area networks ("LANs") and wide area networks ("WANs"), the internet (e.g., the internet), and peer-to-peer networks (e.g., ad hoc peer-to-peer networks).
The computing system can include clients and servers. A client and server are generally remote from each other and typically interact through a communication network. The relationship of client and server arises by virtue of computer programs running on the respective computers and having a client-server relationship to each other. In some embodiments, the server sends data (e.g., an HTML page) to the client device (e.g., for displaying data to a user interacting with the client device and receiving user input from the user). Data generated at the client device (e.g., a result of the user interaction) can be received at the server from the client device.
In addition to the above embodiments, the following embodiments are also innovative:
embodiment 1 is a method comprising: receiving, from a client device and by a first computing system of a plurality of multi-party computing (MPC) systems, a digital component request comprising distributed point functions each representing a secret share of a respective point function indicating whether a user of the client device is a member of a respective first user group identified by a respective first user group identifier; identifying a plurality of selection values, wherein each selection value corresponds to a respective digital component, a set of context signals, and a respective second user group identifier for a respective second user group to which the respective digital component is eligible to be distributed; determining, for each selection value and using a distributed point function in a secure MPC process executed in cooperation with one or more second computing systems in the plurality of MPC systems, a candidate parameter indicating whether a second user group identifier corresponding to the selection value matches a user group that includes the user as a member; generating a first secret share of a selection result that identifies a given digital component having a highest selection value from among a plurality of candidate digital components based on the selection value and a candidate parameter, wherein each candidate digital component is a digital component for which the selection value corresponding to the digital component indicates that a second user group identifier corresponding to the selection value matches a user group that includes the user as a member; and transmitting a first secret share to the client device that identifies the selection result for the given digital component.
Embodiment 2 is the method of embodiment 1, wherein determining the candidate parameter for each selection value comprises determining a first secret share of the candidate parameter for each selection value.
Embodiment 3 is the method of embodiment 1 or embodiment 2, wherein generating the first secret share of the selection result comprises: generating an order of selection values based on the magnitude of each selection value; determining a first secret share of a cumulative value for each selection value based on the order of the selection values and the candidate parameter for each selection value, wherein the cumulative value for each selection value indicates a position of the selection value in a ranking order of the plurality of candidate selection values; for each selection value, a first secret share of the winner parameter is determined based on: (i) A candidate parameter for selecting a value and (ii) a result of an equality test indicating whether the accumulated value for selecting a value is a specified value; and for each selection value, determining a first secret share of a sum of a winner parameter for the selection value and a product of the digital component information element for the selection value as a first secret share of the selection result.
Embodiment 4 is the method of embodiment 3, wherein determining a first secret share of the accumulated value for each of the selected values comprises: for each individual selection value, a number of selection values between the highest selection value and the individual selection value having a candidate parameter indicating that the second user group identifier corresponding to the selection value matches at least one of the one or more first user group identifiers is determined.
Embodiment 5 is the method of embodiment 3 or 4, wherein the specified value is one or logically true.
Embodiment 6 is the method of any one of embodiments 1 to 5, wherein the distributed point function is generated based on a plurality of user groups including a user of the client device as a member.
Embodiment 7 is the method of any one of embodiments 1 to 6, wherein the digital component request comprises a user group request key based on a set of context signals for the digital component slot; and identifying the plurality of selection values comprises identifying each selection value in the data structure having a lookup key that matches the user group request key.
Embodiment 8 is a system, comprising: one or more processors; and one or more storage devices storing instructions that, when executed by the one or more processors, cause the one or more processors to perform the method of any of embodiments 1-7.
Embodiment 9 is a computer-readable storage medium carrying instructions that, when executed by one or more processors, cause the one or more processors to perform the method of any one of embodiments 1-7.
Embodiment 10 is a computer program product comprising instructions that, when executed by one or more processors, cause the one or more processors to perform the method of any of embodiments 1-7.
While this specification contains many specific implementation details, these should not be construed as limitations on the scope of any invention or of what may be claimed, but rather as descriptions of features specific to particular embodiments of particular inventions. Certain features that are described in this specification in the context of separate embodiments can also be implemented in combination in a single embodiment. Conversely, various features that are described in the context of a single embodiment can also be implemented in multiple embodiments separately or in any suitable subcombination. Moreover, although features may be described above as acting in certain combinations and even initially claimed as such, one or more features from a claimed combination can in some cases be excised from the combination, and the claimed combination may be directed to a subcombination or variation of a subcombination.
Similarly, while operations are depicted in the drawings in a particular order, this should not be understood as requiring that such operations be performed in the particular order shown or in sequential order, or that all illustrated operations be performed, to achieve desirable results. In some cases, multitasking and parallel processing may be advantageous. Moreover, the separation of various system components in the embodiments described above should not be understood as requiring such separation in all embodiments, and it should be understood that the described program components and systems can generally be integrated together in a single software product or packaged into multiple software products.
Thus, particular embodiments of the subject matter have been described. Other embodiments are within the scope of the following claims. In some cases, the actions recited in the claims can be performed in a different order and still achieve desirable results. Moreover, the processes depicted in the accompanying figures do not necessarily require the particular order shown, or sequential order, to achieve desirable results. In some embodiments, multitasking and parallel processing may be advantageous.
Claims (24)
1. A computer-implemented method, comprising:
receiving, from a client device and by a first computing system of a plurality of multi-party computing MPC systems, a digital component request comprising distributed point functions, each of the distributed point functions representing a secret share of a respective point function indicating whether a user of the client device is a member of a respective first user group identified by a respective first user group identifier;
identifying a plurality of selection values, wherein each selection value corresponds to a respective digital component, a set of context signals, and a respective second user group identifier of a respective second user group to which the respective digital component is eligible to be distributed;
determining, for each selection value and using the distributed point function in a secure MPC process executing in cooperation with one or more second computing systems of the plurality of MPC systems, a candidate parameter indicating whether the second user group identifier corresponding to the selection value matches a user group that includes the user as a member;
generating a first secret share of a selection result that identifies a given digital component having a highest selection value from a plurality of candidate digital components based on the selection value and the candidate parameter, wherein each candidate digital component is a digital component for which the candidate parameter of the selection value corresponding to the digital component indicates that the second user group identifier corresponding to the selection value matches a user group that includes the user as a member; and
transmitting the first secret share identifying the selection result of the given digital component to the client device.
2. The computer-implemented method of claim 1, wherein determining the candidate parameters for each selection value comprises: a first secret share of the candidate parameter is determined for each selection value.
3. The computer-implemented method of claim 1 or 2, wherein generating the first secret share of the selection result comprises:
generating an order of the selection values based on the magnitude of each selection value;
determining a first secret share of a cumulative value for each selection value based on the order of the selection values and the candidate parameter for each selection value, wherein the cumulative value for each selection value indicates a position of the selection value in a ranking order of a plurality of candidate selection values;
for each selection value, a first secret share of the winner parameter is determined based on: (ii) (i) the candidate parameter for the selected value; and (ii) a result of an equality test indicating whether the accumulated value for the selected value is a specified value; and
for each selection value, determining a first secret share of a sum of products of the winner parameter for the selection value and a digital component information element for the selection value as the first secret share of the selection result.
4. The computer-implemented method of claim 3, wherein determining the first secret share of an accumulated value for each selection value comprises:
for each individual selection value, determining a number of selection values between the highest selection value and the individual selection value having a candidate parameter indicating a match of at least one of the second user group identifier and the one or more first user group identifiers corresponding to the selection value.
5. The computer-implemented method of claim 3 or 4, wherein the specified value is one or a logical true.
6. The computer-implemented method of any preceding claim, wherein the distributed point function is generated based on a plurality of user groups that include the user of the client device as a member.
7. The computer-implemented method of any preceding claim, wherein:
the digital component request comprises a user group request key based on a set of context signals for a digital component slot; and
identifying the plurality of selection values comprises: each selection value having a lookup key that matches the user group request key is identified in a data structure.
8. A system, comprising:
one or more processors; and
one or more storage devices storing instructions that, when executed by the one or more processors, cause the one or more processors to perform the method of any preceding claim.
9. A computer-readable storage medium carrying instructions which, when executed by one or more processors, cause the one or more processors to carry out the method according to any one of claims 1 to 7.
10. A computer program product comprising instructions which, when executed by a computer, cause the computer to perform the steps of the method according to any one of claims 1 to 7.
11. A system, comprising:
one or more processors; and
one or more computer-readable media storing instructions that, when executed by the one or more processors, cause the one or more processors to perform operations comprising:
receiving, from a client device and by a first computing system of a plurality of multi-party computing MPC systems, a digital component request comprising distributed point functions, each of the distributed point functions representing a secret share of a respective point function indicating whether a user of the client device is a member of a respective first user group identified by a respective first user group identifier;
identifying a plurality of selection values, wherein each selection value corresponds to a respective digital component, a set of context signals, and a respective second user group identifier of a respective second user group to which the respective digital component is eligible to be distributed;
determining, for each selection value and using the distributed point function in a secure MPC process executing in cooperation with one or more second computing systems of the plurality of MPC systems, a candidate parameter indicating whether the second user group identifier corresponding to the selection value matches a user group that includes the user as a member;
generating a first secret share of a selection result that identifies a given digital component having a highest selection value from a plurality of candidate digital components based on the selection value and the candidate parameter, wherein each candidate digital component is a digital component for which the candidate parameter of the selection value corresponding to the digital component indicates that the second user group identifier corresponding to the selection value matches a user group that includes the user as a member; and
transmitting the first secret share identifying the selection result of the given digital component to the client device.
12. The system of claim 11, wherein determining the candidate parameter for each selection value comprises: a first secret share of the candidate parameter is determined for each selection value.
13. The system of claim 11, wherein generating the first secret share of the selection result comprises:
generating an order of the selection values based on the magnitude of each selection value;
determining a first secret share for a cumulative value for each selection value based on the order of the selection values and the candidate parameter for each selection value, wherein the cumulative value for each selection value indicates a position of the selection value in a ranked order of a plurality of candidate selection values;
for each selection value, a first secret share of the winner parameter is determined based on: (ii) (i) the candidate parameter for the selected value; and (ii) a result of an equality test indicating whether the accumulated value for the selected value is a specified value; and
for each selection value, determining a first secret share of a sum of products of the winner parameter for the selection value and a digital component information element for the selection value as the first secret share of the selection result.
14. The system of claim 13, wherein determining the first secret share of the accumulated value for each selection value comprises:
for each individual selection value, determining a number of selection values between the highest selection value and the individual selection value having a candidate parameter indicating a match of at least one of the second user group identifier and the one or more first user group identifiers corresponding to the selection value.
15. The system of claim 14, wherein the specified value is one or logical true.
16. The system of claim 11, wherein the distributed point function is generated based on a plurality of user groups that include the user of the client device as a member.
17. The system of claim 11, wherein:
the digital component request comprises a user group request key based on a set of context signals for a digital component slot; and
identifying the plurality of selection values comprises: each selection value having a lookup key that matches the user group request key is identified in a data structure.
18. One or more non-transitory computer-readable media storing instructions that, when executed by one or more computers, cause the one or more computers to perform operations comprising:
receiving, from a client device and by a first computing system of a plurality of multi-party computing MPC systems, a digital component request comprising distributed point functions, each of the distributed point functions representing a secret share of a respective point function indicating whether a user of the client device is a member of a respective first user group identified by a respective first user group identifier;
identifying a plurality of selection values, wherein each selection value corresponds to a respective digital component, a set of context signals, and a respective second user group identifier of a respective second user group to which the respective digital component is eligible to be distributed;
determining, for each selection value and using the distributed point function in a secure MPC process executed in cooperation with one or more second computing systems of the plurality of MPC systems, a candidate parameter indicative of whether the second user group identifier corresponding to the selection value matches a user group that includes the user as a member;
generating a first secret share of a selection result that identifies a given digital component having a highest selection value from among a plurality of candidate digital components based on the selection value and the candidate parameter, wherein each candidate digital component is a digital component for which the selection value corresponding to the digital component indicates that the second user group identifier corresponding to the selection value matches a user group that includes the user as a member; and
transmitting the first secret share identifying the selection result of the given digital component to the client device.
19. The one or more non-transitory computer-readable media of claim 18, wherein determining the candidate parameter for each selection value comprises: a first secret share of the candidate parameter is determined for each selection value.
20. The one or more non-transitory computer-readable media of claim 18, wherein generating the first secret share of the selection result comprises:
generating an order of the selection values based on the magnitude of each selection value;
determining a first secret share for a cumulative value for each selection value based on the order of the selection values and the candidate parameter for each selection value, wherein the cumulative value for each selection value indicates a position of the selection value in a ranked order of a plurality of candidate selection values;
for each selection value, a first secret share of the winner parameter is determined based on: (ii) (i) the candidate parameter for the selected value; and (ii) a result of an equality test indicating whether the accumulated value for the selected value is a specified value; and
for each selection value, determining a first secret share of a sum of products of the winner parameter for the selection value and a digital component information element for the selection value as the first secret share of the selection result.
21. The one or more non-transitory computer-readable media of claim 20, wherein determining the first secret share of the accumulated value for each selection value comprises:
for each individual selection value, determining a number of selection values between the highest selection value and the individual selection value having a candidate parameter indicating a match of at least one of the second user group identifier and the one or more first user group identifiers corresponding to the selection value.
22. The one or more non-transitory computer-readable media of claim 21, wherein the specified value is one or logically true.
23. The one or more non-transitory computer-readable media of claim 18, wherein the distributed point function is generated based on a plurality of user groups that include the user of the client device as a member.
24. The one or more non-transitory computer-readable media of claim 18, wherein:
the digital component request comprises a user group request key based on a set of context signals for a digital component slot; and
identifying the plurality of selection values comprises: each selection value having a lookup key that matches the user group request key is identified in a data structure.
Applications Claiming Priority (3)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US202063125142P | 2020-12-14 | 2020-12-14 | |
US63/125,142 | 2020-12-14 | ||
PCT/US2021/063024 WO2022132617A1 (en) | 2020-12-14 | 2021-12-13 | Using secure multi-party computation and probabilistic data structures to protect access to information |
Publications (1)
Publication Number | Publication Date |
---|---|
CN115605895A true CN115605895A (en) | 2023-01-13 |
Family
ID=79316627
Family Applications (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
CN202180035224.4A Pending CN115605895A (en) | 2020-12-14 | 2021-12-13 | Securing access to information using secure multi-party computation and probabilistic data structures |
Country Status (6)
Country | Link |
---|---|
US (1) | US20230188329A1 (en) |
EP (1) | EP4121931A1 (en) |
JP (1) | JP2023532834A (en) |
KR (1) | KR20220167394A (en) |
CN (1) | CN115605895A (en) |
WO (1) | WO2022132617A1 (en) |
Cited By (1)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
CN117857039A (en) * | 2024-03-04 | 2024-04-09 | 浪潮(北京)电子信息产业有限公司 | Multiparty security computing method, device, equipment and medium |
Families Citing this family (1)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US11861030B1 (en) * | 2023-08-17 | 2024-01-02 | Datchat, Inc. | Technology platform for providing secure group-based access to sets of digital assets |
Family Cites Families (2)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US10068247B2 (en) * | 2014-12-17 | 2018-09-04 | Excalibur Ip, Llc | Pacing control for online ad campaigns |
US11245536B2 (en) * | 2019-04-16 | 2022-02-08 | Meta Platforms, Inc. | Secure multi-party computation attribution |
-
2021
- 2021-12-13 EP EP21840744.3A patent/EP4121931A1/en active Pending
- 2021-12-13 KR KR1020227040280A patent/KR20220167394A/en unknown
- 2021-12-13 JP JP2022570382A patent/JP2023532834A/en active Pending
- 2021-12-13 US US17/924,561 patent/US20230188329A1/en active Pending
- 2021-12-13 CN CN202180035224.4A patent/CN115605895A/en active Pending
- 2021-12-13 WO PCT/US2021/063024 patent/WO2022132617A1/en unknown
Cited By (1)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
CN117857039A (en) * | 2024-03-04 | 2024-04-09 | 浪潮(北京)电子信息产业有限公司 | Multiparty security computing method, device, equipment and medium |
Also Published As
Publication number | Publication date |
---|---|
KR20220167394A (en) | 2022-12-20 |
WO2022132617A1 (en) | 2022-06-23 |
JP2023532834A (en) | 2023-08-01 |
EP4121931A1 (en) | 2023-01-25 |
US20230188329A1 (en) | 2023-06-15 |
Similar Documents
Publication | Publication Date | Title |
---|---|---|
CN115605895A (en) | Securing access to information using secure multi-party computation and probabilistic data structures | |
JP7471425B2 (en) | Feedback Controller Using Secret Sharing | |
WO2022072146A1 (en) | Privacy preserving centroid models using secure multi-party computation | |
EP4070223B1 (en) | Using secure multi-party computation to improve content selection process integrity | |
EP4081971B1 (en) | Using secure mpc and vector computations to protect access to information in content distribution | |
CN117355834A (en) | Privacy-secure bulk retrieval using private information retrieval and secure multiparty computing | |
WO2023196016A1 (en) | Secure computation using multi-party computation and a trusted execution environment | |
WO2023027982A1 (en) | Cryptographically secure control using secure multi-party computation | |
JP7471450B2 (en) | Improving the performance of secure multiparty computation | |
JP7440667B2 (en) | Flexible content selection process using secure multiparty calculations | |
CN114450919B (en) | Online privacy protection method and system | |
WO2022192146A1 (en) | Privacy preserving measurements using secure multi-party computation |
Legal Events
Date | Code | Title | Description |
---|---|---|---|
PB01 | Publication | ||
PB01 | Publication | ||
SE01 | Entry into force of request for substantive examination | ||
SE01 | Entry into force of request for substantive examination |