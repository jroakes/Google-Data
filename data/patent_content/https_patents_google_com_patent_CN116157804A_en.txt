CN116157804A - Neural network model using peer-to-peer attention - Google Patents
Neural network model using peer-to-peer attention Download PDFInfo
- Publication number
- CN116157804A CN116157804A CN202180060744.0A CN202180060744A CN116157804A CN 116157804 A CN116157804 A CN 116157804A CN 202180060744 A CN202180060744 A CN 202180060744A CN 116157804 A CN116157804 A CN 116157804A
- Authority
- CN
- China
- Prior art keywords
- block
- output
- attention
- neural network
- input
- Prior art date
- Legal status (The legal status is an assumption and is not a legal conclusion. Google has not performed a legal analysis and makes no representation as to the accuracy of the status listed.)
- Pending
Links
Images
Classifications
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06V—IMAGE OR VIDEO RECOGNITION OR UNDERSTANDING
- G06V10/00—Arrangements for image or video recognition or understanding
- G06V10/70—Arrangements for image or video recognition or understanding using pattern recognition or machine learning
- G06V10/82—Arrangements for image or video recognition or understanding using pattern recognition or machine learning using neural networks
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06N—COMPUTING ARRANGEMENTS BASED ON SPECIFIC COMPUTATIONAL MODELS
- G06N3/00—Computing arrangements based on biological models
- G06N3/02—Neural networks
- G06N3/08—Learning methods
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06N—COMPUTING ARRANGEMENTS BASED ON SPECIFIC COMPUTATIONAL MODELS
- G06N3/00—Computing arrangements based on biological models
- G06N3/02—Neural networks
- G06N3/04—Architecture, e.g. interconnection topology
- G06N3/045—Combinations of networks
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06V—IMAGE OR VIDEO RECOGNITION OR UNDERSTANDING
- G06V10/00—Arrangements for image or video recognition or understanding
- G06V10/20—Image preprocessing
- G06V10/26—Segmentation of patterns in the image field; Cutting or merging of image elements to establish the pattern region, e.g. clustering-based techniques; Detection of occlusion
Abstract
Methods, systems, and apparatus, including computer programs encoded on a computer storage medium, for processing network inputs using a neural network to generate network outputs. In one aspect, a method includes processing a network input using a neural network to generate a network output, wherein the neural network has a plurality of blocks, wherein each block is configured to process a block input to generate a block output, the method comprising: generating, for each target block of the neural network, an attention weighted representation of a plurality of first block outputs; for each first block output, the method includes: processing the plurality of second block outputs to generate an attention factor; and generating an attention weighted representation of each first block output by applying a respective attention factor to the corresponding first block output; and generating a target block input from the attention weighted representation; and processing the target block input using the target block to generate a target block output.
Description
Technical Field
The present description relates to processing data using a machine learning model.
Background
The machine learning model receives input and generates output, such as predicted output, based on the received input. Some machine learning models are parametric models and generate an output based on the received input and the values of the parameters of the model.
Some machine learning models are depth models that employ multiple layers of models to generate output for received inputs. For example, a deep neural network is a deep machine learning model that includes an output layer and one or more hidden layers, each of which applies a nonlinear transformation to a received input to generate an output.
Disclosure of Invention
The present specification generally describes a system implemented as a computer program on one or more computers located in one or more locations for processing network inputs using a neural network to generate network outputs. The neural network implements a "peer attention" mechanism, i.e., a channel in which the output of one or more blocks in the neural network are processed to generate a set of attention factors that are applied to the input of another block in the neural network. "Block" refers to a group of one or more neural network layers.
According to a first aspect, there is provided a method performed by one or more data processing apparatus for processing a network input using a neural network to generate a network output, wherein the neural network comprises a plurality of blocks, each of the plurality of blocks comprising one or more respective neural network layers, wherein each block is configured to process a respective block input to generate a respective block output, the method comprising, for each of one or more target blocks of the neural network: generating a target block input to the target block, comprising receiving a respective first block output for each of one or more respective first blocks, wherein each first block output comprises a plurality of channels, wherein the first block output is generated by the first block during processing of the network input by the neural network; generating a respective attention weighted representation of each first block output, comprising, for each first block output: receiving a respective second block output for each of the one or more second blocks, wherein at least one of the second block outputs is different from the first block output, wherein the second block output is generated by the second block during processing of the network input by the neural network; processing the second block output to generate a respective attention factor corresponding to each channel of the first block output; and generating an attention weighted representation of the first block output by applying each attention factor to a corresponding channel of the first block output; and generating a target block input from at least the attention weighted representation of the first block output; and processing the target block input using the target block to generate a target block output.
In some implementations, processing the second block output to generate a respective attention factor corresponding to each channel of the first block output includes: generating a combined representation by combining the second block outputs using a set of attention weights, wherein each attention weight corresponds to a respective second block output; the combined representation is processed using one or more neural network layers to generate a respective attention factor corresponding to each channel of the first block output.
In some implementations, generating the combined representation by combining the second block outputs using the set of attention weights includes: scaling each second block output by a function of the corresponding attention weight; and determining a combined representation based on the sum of the scaled second block outputs.
In some implementations, processing the combined representation using one or more neural network layers to generate a respective attention factor corresponding to each channel of the first block output includes: processing the combined representation using a pooling layer that performs global average pooling over the spatial dimensions of the combined representation; and processing the output of the pooling layer using the fully connected neural network layer.
In some embodiments, the values of the attention weights are learned during training of the neural network.
In some implementations, generating the attention weighted representation of the first block output by applying each attention factor to a corresponding channel of the first block output includes: each channel of the first block output is scaled by a corresponding attention factor.
In some implementations, generating the target block input from at least the attention weighted representation of the first block output includes: the attention weighted representations of the first block outputs are combined using a set of connection weights, wherein each connection weight corresponds to a respective attention weighted representation of the first block output.
In some implementations, combining the attention weighted representations of the first block outputs using the set of connection weights includes: each attention weighted representation of the first block output is scaled by a function of the corresponding connection weights.
In some embodiments, the values of the connection weights are learned during training of the neural network.
In some implementations, each block in the neural network is associated with a respective level in the sequence of levels; and for each given block associated with a given level following a first level in the sequence of levels, the given block receives only block outputs from other blocks associated with levels preceding the given level.
In some implementations, the target block is associated with a target rank, and the target block receives: (i) A respective first block output of each first block associated with a level preceding the target level, and (ii) a respective second block output of each second block associated with a level preceding the target level.
In some implementations, the neural network performs video processing tasks.
In some implementations, the network input includes a plurality of video frames.
In some implementations, the network input further includes data defining one or more segmentation maps, wherein each segmentation map corresponds to a respective video frame, and the segmentation of the video frame is defined as one or more object classifications.
In some implementations, the network input further includes a plurality of optical flow frames corresponding to the plurality of video frames.
In some implementations, the neural network includes a plurality of input blocks, wherein each input block includes one or more respective neural network layers, wherein the plurality of input blocks includes: (i) Processing a first input block of a plurality of video frames, and (ii) processing a second input block of one or more segmentation maps.
In some implementations, each block of the plurality of blocks is configured to process the block input at a respective temporal resolution.
In some implementations, each block includes one or more expanded (dlated) temporal convolution layers having a temporal expansion rate corresponding to the temporal resolution of the block.
In some implementations, each block of the plurality of blocks is a space-time convolutional block including one or more convolutional neural network layers.
In some implementations, the neural network generates the network output by processing the target block output.
Particular embodiments of the subject matter described in this specification can be implemented to realize one or more of the following advantages.
The present specification describes a neural network implementing a "peer attention" mechanism, i.e., a channel in which the output of one or more blocks in the neural network are processed to generate a set of attention factors that are applied to the input of another block in the neural network. In general, the output of different blocks in a neural network may encode different information at different levels of abstraction. The use of peer-to-peer attention enables the neural network to focus on relevant features of the network input by integrating information that is different at various levels of abstraction, and thus can improve the performance (e.g., prediction accuracy) of the neural network. Furthermore, using peer-to-peer attention may enable the neural network to achieve acceptable performance levels in fewer training iterations, thereby reducing the consumption of computing resources (e.g., memory and computing power) during training.
Peer-to-peer attention mechanisms may be flexible and data driven, for example, because the attention weights (i.e., the impact exerted by the attention factor controlling the input channel that each block applies to each other block) are learned, and because the attention factor is dynamically conditioned on network inputs. Thus, peer-to-peer attention mechanisms may better improve the performance of the neural network than traditional attention mechanisms (e.g., attention mechanisms that may be manually designed or hard coded).
The neural network may perform video processing tasks by processing multi-modal inputs, including: (i) a set of video frames, (ii) optical flow frames, each optical flow frame corresponding to apparent motion of an object between two consecutive video frames, and (iii) a segmentation map, each segmentation map corresponding to a respective video frame and defining segments of the video frames as one or more object classifications. Processing the video frames, optical flow frames, and segmentation maps enables the neural network to learn interactions between semantic object information and original appearance and motion features, which may improve performance (e.g., prediction accuracy) of the neural network compared to a neural network that does not process segmentation maps.
The details of one or more embodiments of the subject matter are set forth in the accompanying drawings and the description below. Other features, aspects, and advantages of the subject matter will become apparent from the description, the drawings, and the claims.
Drawings
FIG. 1 is a block diagram of an example neural network system.
FIG. 2 is a diagram illustrating an example data flow for implementing peer attention to generate target block inputs for target blocks.
FIG. 3 is a flow chart of an example process for generating target block inputs for a target block.
FIG. 4 is a flow chart of an example process for generating attention factors for respective first block outputs.
Like reference numbers and designations in the various drawings indicate like elements.
Detailed Description
Fig. 1 illustrates an example neural network system 100. The neural network system 100 is an example of a system implemented as a computer program on one or more computers in one or more locations, in which the systems, components, and techniques described below are implemented.
The neural network system 100 processes the network input 102 using one or more blocks arranged in a hierarchy to generate a network output 104 that characterizes the network input. One or more blocks are arranged in an ordered sequence of levels such that each block belongs to only one of the levels. Each of the one or more blocks is configured to process the block input using one or more neural network layers to generate a block output.
The neural network system 100 may be configured to process any suitable network input, such as the network input 102. The network input 102 may have spatial and temporal dimensions. For example, the network input may include a sequence of video frames, a sequence of optical flow frames corresponding to the sequence of video frames, a sequence of object segmentation maps corresponding to the sequence of video frames, or a combination thereof. In other examples, the network input may include a representation of the image (e.g., represented by an intensity value or RGB value for each pixel in the image), an audio waveform, a point cloud (e.g., generated by a lidar or radar sensor), a protein, a sequence of words (e.g., forming one or more sentences or paragraphs), a video (e.g., represented by a sequence of video frames), one or more optical flow images (e.g., generated from a sequence of video frames), a segmentation map (e.g., represented by one-hot (one-hot) encoding of integer class values per pixel in the image or per pixel in a video frame in the sequence of video frames, where each integer class value represents a different class of objects), or any combination thereof.
The neural network system 100 may be configured to generate any suitable network output, such as network output 104 that characterizes a network input. For example, the neural network output may be a classification output, a regression output, a sequence output (i.e., including a sequence of output elements), a segmentation output, or a combination thereof. Each level in the neural network system may include any suitable number of blocks. The number of blocks in each tier and the architecture of the blocks in each tier may be selected in any suitable manner, for example, may be received as input from a user of the system 100, or may be determined by an architecture search system. Examples of architectural search systems for determining the respective number and architecture of blocks in each level are described in more detail with reference to PCT application No. PCT/US2020/34267, which is incorporated herein by reference.
The neural network system 100 may be configured to have a plurality of block types. That is, each block may have a respective combination of neural network layers, and a respective neural network parameter value corresponding to the respective combination of neural network layers. A block may have any suitable neural network structure that enables it to perform its described functions (i.e., process the block input to generate a block output that characterizes the block input). In particular, a block may include any suitable number (e.g., 1, 5, or 25 layers) of neural network layers (e.g., fully connected layers, attention layers, convolutional layers, etc.) of any suitable type and connected in any suitable configuration (e.g., as a linear layer sequence).
For example, the system may have various input blocks for level 1 (e.g., processing various corresponding network input types), various intermediate blocks, and one or more output blocks for final levels (e.g., generating various network outputs).
Each block may be a space-time convolutional block, i.e., a block comprising one or more convolutional neural network layers and configured to process a space-time input to generate a space-time output. Space-time data refers to an ordered set of values, e.g., tensors of values, that include a plurality of spatial dimensions, a temporal dimension, and optionally a channel dimension. Each block may generate an output having a corresponding number of channels. Each channel may be represented as an ordered set of values, e.g., a 2D array of values, and may correspond to, e.g., one of a plurality of filters in an output convolution layer in a block.
Each block may include, for example, a spatial convolution layer (i.e., having a convolution kernel defined in a spatial dimension), a spatio-temporal convolution layer (i.e., having a convolution kernel defined across a spatial and temporal dimension), and a temporal convolution layer (i.e., having a convolution kernel defined in a temporal dimension). Each of the plurality of blocks may, for example, be configured to process the block input at a respective temporal resolution.
Each block may include, for example, one or more inflated temporal convolution layers (i.e., having a convolution kernel defined in the temporal dimension, where the inflation factor is equal to 1 for a normal temporal convolution layer or greater than 1 for an inflated temporal convolution layer). The temporal expansion rate of each block may correspond to the temporal resolution of the block.
The systems described herein are broadly applicable and are not limited to one particular implementation. However, for purposes of illustration, a few example embodiments are described below.
In some implementations, the neural network may be configured to perform video processing tasks. In these embodiments, the neural network may process a network input that includes a sequence of a plurality of video frames, and optionally further includes other data, such as a sequence of optical flow frames corresponding to the sequence of video frames, a respective segmentation map generated from each of the one or more video frames (e.g., including classification values for each pixel in the video frames), or both.
In one example, the video processing task is an action classification task, wherein the neural network generates an action classification output that includes a respective score for each action in a set of possible actions. The score of an action may characterize the likelihood that the video frame depicts an agent (e.g., a person, animal, or robot) performing the action (e.g., running, walking, etc.). In some cases, the action classification output includes a respective score for each action in a respective set of possible actions associated with each of the plurality of object classifications. The score of an action associated with a particular object may characterize the likelihood that a video frame depicts an agent (e.g., a person, animal, or robot) performs an action with the object, e.g., that the agent is reading a book, speaking a phone, riding a bike, driving a car, etc.
In another example, the video processing task is a super-resolution task, for example, where the neural network generates an output sequence of video frames having a higher spatial and/or temporal resolution than the input sequence of video frames.
In another example, the video processing task is an artifact removal task, for example, wherein the neural network generates an output sequence of video frames that is an enhanced version of the input sequence of video frames that excludes one or more artifacts present in the input sequence of video frames.
In some implementations, the neural network may be configured to process the image to generate an object recognition output that includes a respective score for each object classification in a set of possible object classifications. The score of the object classification may characterize the likelihood that the image depicts an object (e.g., road sign, vehicle, bicycle, etc.) in the object classification.
In some implementations, the neural network may be configured to process one or more medical images (e.g., magnetic Resonance Images (MRIs), computed Tomography (CT) images, ultrasound (US) images, or Optical Coherence Tomography (OCT) images) of the patient to generate a network output that characterizes the medical images. The network output may include, for example: a respective referral score for each of a plurality of referral decisions that indicates a predicted likelihood that the referral decision is the most appropriate referral decision for the patient, (ii) a respective condition score for each of one or more medical conditions that indicates a predicted likelihood that the patient is in the medical condition, (iii) a respective progress score for each of one or more condition states that indicates a predicted likelihood that the state of the corresponding medical condition will progress to the condition state at a particular future time, and/or (iv) a respective treatment score for each of a plurality of treatments that indicates a predicted likelihood that the treatment is the best treatment for the patient.
In some implementations, the neural network may be configured to process observations (e.g., including one or more of images, video frame sequences, optical flow frame sequences, etc.) that characterize the state of the environment to generate an action selection output that includes a respective score for each of a set of possible actions that may be performed by the agent. The action selection output may be used to select an action to be performed by the agent, for example, by selecting the action with the highest score. The agent may be, for example, a mechanical or robotic agent that interacts with the real world environment, or a simulated agent that interacts with a simulated environment.
Typically, the neural network system 100 has more than one block level. Each block level may have one or more blocks, and each block may include a different neural network layer type. The neural network system 100 may include various input blocks in level 1 (e.g., block 110a, block 110b, block 110c, etc.) for processing the network input 102, various blocks in intermediate levels 2 through N-1 (e.g., blocks 120a, 120b, 120c, … in level 2 and blocks 130a, 130b, 130c, …, etc. in level 3) for further processing block outputs from the input blocks, and output blocks in final level N (e.g., block 140) to generate the network output 104. For example, the neural network system 100 may have a rank 1 that includes various input blocks that process various input types, such as input blocks that process raw RGB video input, input blocks that process optical flow data that characterizes the RGB video input, and input blocks that process a segmentation map (e.g., generated for each video frame in the raw RGB video input). Each block input modality may be fed to multiple input blocks, e.g., a single raw RGB video input may go to multiple input blocks configured to process the raw RBG video input.
The neural network may perform machine learning tasks by processing multi-modal inputs. For example, the neural network may perform video processing by processing: (i) A set of video frames, and (ii) a respective segmentation map for each of the video frames, the segmentation map defining a video segmentation to one or more object classifications. The video processing tasks may include, for example, an action classification task, e.g., identifying that an agent (e.g., a person, animal, or robot) in a scene is performing an action related to one of the object classifications, e.g., reading a book, driving a car, riding a bicycle, or speaking a phone. Processing the video frames and the segmentation map may enable the neural network to learn interactions between semantic object information and the original appearance and motion features, which may improve performance (e.g., prediction accuracy) of the neural network compared to a neural network that does not process the segmentation map.
The neural network system 100 processes the network input using the input blocks in the first level, and generates a block input for each block in each level after the first level by processing the block outputs from one or more corresponding blocks of the previous level. Typically, for each given block associated with a given level following a first level in the sequence of levels, the given block receives only block outputs from other blocks associated with levels of the previous given level. The connections between blocks are shown using arrows in fig. 1. That is, the arrow shown representing the output of one block is provided to another block. For example, to generate a block input for target block 130b, the system may process block outputs from blocks 110a, 110b, and 120 c. The connection between blocks may skip levels, such as the block output from block 110c contributing to the block input of target block 140.
Each block output includes a set of channels. A channel may be represented by an ordered set of values, for example, a vector or matrix of values. For example, a block output may have multiple output channels, each output channel in the block output corresponding to a different convolution filter in the block.
The system 100 may use "peer attention" to generate corresponding block inputs for some or all of the blocks after the first level. The system uses the attention factor engine 106 to implement peer attention, as will be discussed in more detail below with reference to fig. 2.
The neural network system 100 has a set of neural network parameters. The system may update the neural network parameters using the training engine 108.
The training engine 108 may use a set of training data to train the neural network system 100. The set of training data may include a plurality of training examples, wherein each training example specifies: (i) A training input for the neural network, and (ii) a target output that should be generated by the neural network by processing the training input. For example, each training example may include: training inputs specifying a sequence of video frames and/or a corresponding sequence of optical flow frames, and target classification outputs, for example, indicating actions being performed by a person depicted in the video frames. The training engine 108 may train the neural network system 100 using any suitable machine learning training technique, such as random gradient descent, in which the gradient of the objective function counter-propagates through the neural network at each of one or more training iterations. The objective function may be, for example, a cross entropy objective function, or any other suitable objective function.
It will be appreciated that by appropriate selection of training data and/or loss functions, the neural network system 100 may be trained for video processing tasks other than classification tasks. For example, the neural network system 100 is trained for super resolution (in the spatial and/or temporal domain) using a training set comprising downsampled video and corresponding higher resolution reference truth (ground) video, employing a penalty function that compares the output of the neural network to the higher resolution reference truth video corresponding to the downsampled video input to the neural network, e.g., L1 or L2 penalty. As another example, the neural network system 100 may be trained to remove one or more types of image/video artifacts from video, such as block artifacts that may be introduced during video encoding. In this example, the training data set may include a set of reference truth videos, each having one or more corresponding "degraded" videos (i.e., incorporating one or more types of artifacts), wherein the penalty function compares the output of the neural network system 100 to the reference truth videos corresponding to the degraded videos input to the neural network system 100, such as an L1 or L2 penalty.
Fig. 2 illustrates a diagram of an example data flow 200 that illustrates operations performed by a neural network system implementing peer-to-peer attention to generate block inputs for blocks in any level after a first level, which are referred to as "target" blocks for convenience. That is, a target block may refer to any block subsequent to the block of the first level. Examples of neural network systems, such as neural network system 100, that may perform the operations of data stream 200 are described in more detail above with reference to fig. 1.
The system generates a target block input for the target block by processing the respective block outputs of each of the one or more other blocks to generate a combined representation of the respective block outputs. The target block may then process the combined representation as a target block input to generate a target block output.
The system receives a respective block output (e.g., first block outputs 204a, 204b, and 204c from blocks 202a, 202b, and 202c, respectively) for each of one or more "first" blocks, where each first block may be from any level prior to a target level for a target block. (for convenience, each block providing a block output to a target block will be referred to as a first block.) the first block outputs each include a plurality of channels and are each generated by a respective first block during processing of a network input (e.g., network input 102 of FIG. 1). For example, each channel in the output of a respective first block may correspond to a filter in a convolutional layer in the respective first block.
For each first block output, the system generates a respective attention factor for each channel of the first block output by processing a respective block output of each of one or more "second" blocks, wherein at least one of the respective second blocks is different from the first block. (for convenience, each block that generates a block output for generating an attention factor to be applied to a channel of the first block output will be referred to as a "second" block). Each second block outputs a block in a level preceding the target level from the target block. In general, a set of second block outputs that are processed to generate attention factors for one first block output may be different from a set of second blocks that are processed to generate attention factors for another first block output.
The system may use the attention factor engine 106 to generate corresponding attention factors from one or more second block outputs. For example, the attention factor engine may generate a combined representation of the respective second block outputs and process the combined representation to generate the respective attention factors, as discussed in further detail with reference to fig. 4. Referring to fig. 2, there is shown a respective second block output (i.e., second block outputs 206a, 206b, and 206 c) processed to generate a respective attention factor 208a of the first block output 204 a. For convenience, the respective second block outputs processed to generate attention factor 208b (i.e., for first block output 204 b) and the respective second block outputs processed to generate attention factor 208c (i.e., for first block output 204 c) are omitted from the figures. Note that the factor may be represented by a value, such as a floating point value. A set of attention factors of a block output may be represented by a set of ordered values (e.g., a vector of floating point values), where each value corresponds to a channel of the block output.
For each first block output, the system generates an attention weighted representation of the first block output. The system may generate an attention weighted representation of the first block output by applying each attention factor to a corresponding channel of the first block input. For example, the system may generate the attention weighted representation by: each channel of the first block output is scaled by a corresponding attention factor. Referring to fig. 2, the system applies attention factor 208a to first block output 204a to generate attention weighted representation 210a, attention factor 208b to first block output 204b to generate attention weighted representation 210b, and attention factor 208c to first block output 204c to generate attention weighted representation 210c.
The system generates target block inputs 214 by processing attention weighted representations 210a, 210b, and 210c. The system may generate the target block input 214 by generating a combined representation of the attention weighted representations. For example, the system may use a set of connection weights 212 to generate a weighted sum of attention weighted representations, as discussed in further detail with reference to fig. 3. Referring to fig. 2, the system generates target block inputs 214 by: each attention weighted representation is scaled by a function of the corresponding one of the connected weights 212 and then summed.
The target block 216 processes the target block input 214 to generate a target block output 218 that characterizes the target block input 214. Typically, the target block output 218 has multiple channels. In some cases, for one or more target blocks in a subsequent level, the target block output 218 may be processed as a respective first block output, a respective second block output, or both. In another case, the target block 216 may process the target block 214 such that the target block output 218 is a network output.
FIG. 3 is a flow chart of an example process for generating target block inputs for a target block. For convenience, process 300 will be described as being performed by a system of one or more computers located at one or more locations. For example, a neural network system, such as the neural network system 100 of FIG. 1, suitably programmed according to the present description, may perform process 300.
The system receives respective first block outputs of the one or more first blocks (302). Each first block may be from any level before the target level of the target block. For example, for a target block in level 5 of the neural network system, the system may receive a corresponding first block output from a first block in level 1, 2, 3, 4, or any combination thereof.
For each first block output, the system implements a "peer-to-peer attention" mechanism, i.e., processes the output of one or more second blocks in the neural network (where at least one of the second blocks is different from the first block) to generate a set of attention factors that are applied to the channels of the first block output, as described in steps 304-306. For convenience, the second block that provides an output to generate an attention factor for the first block output will be referred to as an "attention connection".
For each first block output, the system receives a respective second block output (304) for each of one or more second blocks, wherein at least one of the second blocks is different from the first block. Each second block may be in any level prior to the target level of the target block. For example, for a target block in level 5 and a first block in level 2, a second block may be in level 1, 2, 3, or 4.
For each first block output, the system generates a corresponding attention factor (306). The system may generate an attention factor for each channel of the first block output by processing one or more second block outputs. For example, the system may generate a combined representation of one or more second block outputs and process the combined representation using one or more neural network layers to generate an attention factor for the first block outputs, as discussed in further detail with reference to fig. 4.
In general, the outputs of different modules in a neural network may encode different information at different levels of abstraction. The use of peer-to-peer attention enables the neural network to focus on relevant features of the network input by integrating information that is different at various levels of abstraction, and thus can improve the performance (e.g., prediction accuracy) of the neural network. Furthermore, using peer-to-peer attention may enable the neural network to achieve acceptable performance levels in fewer training iterations, thereby reducing the consumption of computing resources (e.g., memory and computing power) during training.
For each first block output, the system generates an attention weighted representation of the first block output (308). The system may generate an attention weighted representation of the first block output by applying each attention factor to a corresponding channel of the first block output. The system may use element-by-element multiplication, for example, to scale each channel of the first block output by a corresponding attention factor,
wherein j indexes the first block,
The system generates a target block input for the target block based at least in part on the attention weighted representation of the first block output (310). For example, the system may generate the target block input based on a weighted sum of the attention weighted representations of the first block output using a set of connection weights, such as connection weight 212 in FIG. 2, as follows
Wherein i indexes the target block, j indexes the first block,training engine 108 of fig. 1.
In general, any block may receive a block output from any block in the previous hierarchy, and the blocks may be connected in any suitable manner. In some implementations, the blocks may be initially fully connected, i.e., such that each block in each level provides its block output to each block in each subsequent level. During training of the neural network, the respective connection weights associated with each block connection are trained, and optionally, some of the block connections may be removed ("trimmed") during or after training. For example, the system may optionally remove any connection having a connection weight less than a predetermined value, or the system may remove a predetermined number of connections having a connection weight of the lowest value.
FIG. 4 is a flow chart of an example process for generating attention factors for respective first block outputs. For convenience, process 400 will be described as being performed by a system of one or more computers located at one or more locations. For example, a suitably programmed attention factor engine in accordance with the present description, such as attention factor engine 106 of FIG. 1, may perform process 400.
The system receives a respective second block output for each of the one or more second blocks (402). Each second block may be from any level before the target level of the target block. For example, if the target block is from level 3, the second block may be from level 1, level 2, or a combination of both.
The system scales each second block output by a function of the corresponding attention weight (404). The corresponding attention weights are learnable parameters that may be trained, for example, by the training engine 108 of fig. 1, and each attention weight corresponds to a second block output. In one example, the system may apply a softmax function to the attention weights corresponding to each second block output, and then scale each second block output by the corresponding attention weights output by the softmax function. The contribution of the most influential second block or blocks may be emphasized using the softmax function.
The system generates a combined representation of the scaled second block output (406). For example, the system may represent the combined representation as follows,
wherein i indexes the target block, k indexes the second block, X com A combined representation representing the output of the second block,training system 108 of fig. 1.
In general, any block may receive second block outputs from any number of second blocks in a previous level, i.e., through corresponding attention connections, for generating an attention weighted representation of the first block outputs. In some implementations, the system may initialize a block to be fully connected with the attention connection, i.e., such that for any block that processes block inputs generated by peer-to-peer attention, an attention weighted representation of each first block output is generated using each possible second block output. During training of the neural network, the respective attention weights associated with each attention connection are trained, and optionally, some of the attention connections may be removed ("pruned") during or after training. For example, the system may optionally remove any attention connection having an attention weight less than a predetermined value, or the system may remove a predetermined number of attention connections having the lowest attention weight value.
Peer-to-peer attention mechanisms may be flexible and data driven, for example, because attention weights are learned, and because each attention factor is dynamically conditioned on network inputs. Thus, peer-to-peer attention mechanisms may better improve the performance of the neural network than traditional attention mechanisms (e.g., attention mechanisms that may be manually designed or hard coded).
The system generates attention factors by processing the combined representation using one or more neural network layers (408). For example, the system may use a global average pooling layer over the spatial dimension of each channel, followed by a fully connected layer and an element-by-element sigmoid function to process the combined representation, as shown below
A j ＝σ(f(GAP(X com ))), (3)
Wherein j indexes the first block, A j Attention factor representing the first block j, σ () 'represents an element-by-element sigmoid function, f represents a fully connected neural network layer, GAP ()' represents global average pooling, and X com A combined representation representing the second block output. The full connection layer outputs the following vectors: the number of elements is equal to the number of channels of the corresponding first block output.
The term "configuration" is used in this specification in connection with systems and computer program components. By a system of one or more computers configured to perform a particular operation or action is meant that the system has installed thereon software, firmware, hardware, or a combination thereof that, when operated, causes the system to perform the operation or action. By one or more computer programs configured to perform a particular operation or action is meant that the one or more programs include instructions that, when executed by a data processing apparatus, cause the apparatus to perform the operation or action.
Embodiments of the subject matter and the functional operations described in this specification can be implemented in digital electronic circuitry, in tangibly embodied computer software or firmware, in computer hardware, including the structures disclosed in this specification and their structural equivalents, or in combinations of one or more of them. Embodiments of the subject matter described in this specification can be implemented as one or more computer programs, i.e., one or more modules of computer program instructions encoded on a tangible, non-volatile storage medium for execution by, or to control the operation of, data processing apparatus. The computer storage medium may be a machine-readable storage device, a machine-readable storage substrate, a random or serial access memory device, or a combination of one or more of the foregoing. Alternatively or additionally, the program instructions may be encoded on a manually generated propagated signal, e.g., a machine-generated electrical, optical, or electromagnetic signal, that is generated to encode information for transmission to suitable receiver apparatus for execution by data processing apparatus.
The term "data processing apparatus" refers to data processing hardware and includes all kinds of apparatus, devices, and machines for processing data, including for example a programmable processor, a computer, or multiple processors or computers. The apparatus may also be or further comprise a dedicated logic circuit, such as an FPGA (field programmable gate array) or an ASIC (application specific integrated circuit). In addition to hardware, the apparatus may optionally include code that creates an execution environment for the computer program, e.g., code that constitutes processor firmware, a protocol stack, a database management system, an operating system, or a combination of one or more of them.
A computer program, which may also be referred to or described as a program, software application, app, module, software module, script, or code, may be written in any form of programming language, including compiled or interpreted languages, or declarative or procedural languages; and it may be deployed in any form, including as a stand-alone program or as a module, component, subroutine, or other unit suitable for use in a computing environment. A program may, but need not, correspond to a file in a file system. A program can be stored in a portion of a file that holds other programs or data, e.g., one or more scripts stored in a markup language document, in a single file dedicated to the program in question; or in a plurality of collaboration files, such as files that store one or more modules, subroutines, or portions of code. A computer program can be deployed to be executed on one computer or on multiple computers at one site or distributed across multiple sites and interconnected by a data communication network.
In this specification, the term "engine" is used broadly to refer to a software-based system, subsystem, or process that is programmed to perform one or more particular functions. Typically, the engine will be implemented as one or more software modules or components installed on one or more computers in one or more locations. In some cases, one or more computers will be dedicated to a particular engine; in other cases, multiple engines may be installed and run on the same or multiple computers.
The processes and logic flows described in this specification can be performed by one or more programmable computers executing one or more computer programs to perform functions by operating on input data and generating output. The processes and logic flows can also be performed by, or combination of, special purpose logic circuitry (e.g., an FPGA or ASIC) and one or more programmed computers.
A computer adapted to execute a computer program may be based on a general purpose or a special purpose microprocessor or both, or any other kind of central processing unit. Typically, a central processing unit will receive instructions and data from a read only memory or a random access memory or both. The essential elements of a computer are a central processing unit for executing or executing instructions and one or more memory devices for storing instructions and data. The central processing unit and the memory may be supplemented by, or incorporated in, special purpose logic circuitry. Typically, a computer will also include, or be operatively coupled to receive data from or transfer data to, or both, one or more mass storage devices for storing data, e.g., magnetic, magneto-optical disks, or optical disks. However, a computer does not have to have such a device. Furthermore, the computer may be embedded in another device, such as a mobile phone, a Personal Digital Assistant (PDA), a mobile audio or video player, a game console, a Global Positioning System (GPS) receiver, or a portable storage device, such as a Universal Serial Bus (USB) flash drive, to name a few.
Computer readable media suitable for storing computer program instructions and data include all forms of non-volatile memory, media and memory devices, including by way of example semiconductor memory devices, e.g., EPROM, EEPROM, and flash memory devices; magnetic disks, e.g., internal hard disks or removable disks; magneto-optical disk; CDROM and DVD-ROM discs.
To provide for interaction with a user, embodiments of the subject matter described in this specification can be implemented on a computer having: a display device for displaying information to a user, such as a CRT (cathode ray tube) or LCD (liquid crystal display) monitor; and a keyboard and pointing device, such as a mouse or trackball, by which a user can provide input to a computer. Other types of devices may also be used to provide for interaction with a user; for example, feedback provided to the user may be any form of sensory feedback, such as visual feedback, auditory feedback, or tactile feedback; and input from the user may be received in any form, including acoustic, speech, or tactile input. In addition, the computer may interact with the user by sending and receiving documents to and from the device used by the user; for example, by sending a web page to a web browser on a user device in response to a request received from the web browser. In addition, the computer may interact with the user by sending a text message or other form of message to a personal device (e.g., a smart phone running a messaging application), and in turn receiving a response message from the user.
The data processing means for implementing the machine learning model may also comprise, for example, a dedicated hardware accelerator unit for handling the general and computationally intensive parts of machine learning training or production, i.e. reasoning, workload.
The machine learning model may be implemented and deployed using a machine learning framework, such as a TensorFlow framework, microsoft cognitive toolkit framework, apache Singa framework, or Apache MXNet framework.
Embodiments of the subject matter described in this specification can be implemented in a computing system that includes a back-end component, e.g., as a data server; or include middleware components, such as application servers; or an app that includes a front-end component, such as a client computer with a graphical user interface, a web browser, or through which a user can interact with an implementation of the subject matter described in this specification; or any combination of one or more such back-end, middleware, or front-end components. The components of the system can be interconnected by any form or medium of digital data communication (e.g., a communication network). Examples of communication networks include a Local Area Network (LAN) and a Wide Area Network (WAN), such as the internet.
The computing system may include clients and servers. The client and server are typically remote from each other and typically interact through a communication network. The relationship of client and server arises by virtue of computer programs running on the respective computers and having a client-server relationship to each other. In some embodiments, the server sends data, such as HTML pages, to the user device, for example, in order to display data to and receive user input from a user interacting with the device acting as a client. Data generated at the user device, such as the results of a user interaction, may be received at the server from the device.
While this specification contains many specific implementation details, these should not be construed as limitations on the scope of any invention or of what may be claimed, but rather as descriptions of features specific to particular embodiments of particular inventions. Certain features that are described in this specification in the context of separate embodiments can also be implemented in combination in a single embodiment. Conversely, various features that are described in the context of a single embodiment can also be implemented in multiple embodiments separately or in any suitable subcombination. Furthermore, although features may be described above as acting in certain combinations and even initially claimed as such, one or more features from a claimed combination can in some cases be excised from the combination, and the claimed combination may be directed to a subcombination or variation of a subcombination.
Similarly, although operations are depicted in the drawings and described in the claims in a particular order, this should not be understood as requiring that such operations be performed in the particular order shown or in sequential order, or that all illustrated operations be performed, to achieve desirable results. In some cases, multitasking and parallel processing may be advantageous. Moreover, the separation of various system modules and components in the embodiments described above should not be understood as requiring such separation in all embodiments, and it should be understood that the described program components and systems can generally be integrated together in a single software product or packaged into multiple software products.
Specific embodiments of the subject matter have been described. Other embodiments are within the scope of the following claims. For example, the actions recited in the claims can be performed in a different order and still achieve desirable results. As one example, the processes depicted in the accompanying figures do not necessarily require the particular order shown, or sequential order, to achieve desirable results. In some cases, multitasking and parallel processing may be advantageous.
Claims (22)
1. A method performed by one or more data processing apparatus for processing a network input using a neural network to generate a network output, wherein the neural network comprises a plurality of blocks, each of the plurality of blocks comprising one or more respective neural network layers, wherein each block is configured to process a respective block input to generate a respective block output, the method comprising, for each of one or more target blocks of the neural network:
generating a target block input to a target block, comprising:
receiving a respective first block output for each of the one or more respective first blocks, wherein each first block output comprises a plurality of channels, wherein the first block output is generated by the first block during processing of the network input by the neural network;
Generating a respective attention weighted representation of each first block output, comprising, for each first block output:
receiving a respective second block output for each of the one or more second blocks, wherein at least one of the second block outputs is different from the first block output, wherein the second block output is generated by the second block during processing of the network input by the neural network;
processing the second block output to generate a respective attention factor corresponding to each channel of the first block output; and
generating an attention weighted representation of the first block output by applying each attention factor to a corresponding channel of the first block output; and
generating a target block input from at least the attention weighted representation of the first block output; and
the target block input is processed using the target block to generate a target block output.
2. The method of claim 1, wherein processing the second block output to generate a respective attention factor corresponding to each channel of the first block output comprises:
generating a combined representation by combining the second block outputs using a set of attention weights, wherein each attention weight corresponds to a respective second block output;
the combined representation is processed using one or more neural network layers to generate a respective attention factor corresponding to each channel of the first block output.
3. The method of claim 2, wherein generating a combined representation by combining the second block output using the set of attention weights comprises:
scaling each second block output by a function of the corresponding attention weight; and
a combined representation is determined based on a sum of the scaled second block outputs.
4. A method according to any of claims 2-3, wherein processing the combined representation using one or more neural network layers to generate a respective attention factor corresponding to each channel of the first block output comprises:
processing the combined representation using a pooling layer that performs global average pooling over the spatial dimensions of the combined representation; and
the output of the pooling layer is processed using a fully connected neural network layer.
5. The method of any of claims 2-4, wherein the value of the attention weight is learned during training of the neural network.
6. The method of any preceding claim, wherein generating an attention weighted representation of the first block output by applying each attention factor to a corresponding channel of the first block output comprises:
each channel of the first block output is scaled by a corresponding attention factor.
7. The method of any preceding claim, wherein generating a target block input from at least the attention weighted representation of the first block output comprises:
The attention weighted representations of the first block outputs are combined using a set of connection weights, wherein each connection weight corresponds to a respective attention weighted representation of the first block output.
8. The method of claim 7, wherein combining the attention weighted representation of the first block output using the set of connection weights comprises:
each attention weighted representation of the first block output is scaled by a function of the corresponding connection weights.
9. The method of any of claims 7-8, wherein the value of the connection weight is learned during training of the neural network.
10. The method of any preceding claim, wherein:
each block in the neural network is associated with a respective level in the sequence of levels; and
for each given block associated with a given level following a first level in the sequence of levels, the given block receives only block outputs from other blocks associated with levels preceding the given level.
11. The method of claim 10, wherein the target block is associated with a target rank, and the target block receives: (i) A respective first block output of each first block associated with a level preceding the target level, and (ii) a respective second block output of each second block associated with a level preceding the target level.
12. The method of any preceding claim, wherein the neural network performs video processing tasks.
13. The method of claim 12, wherein the network input comprises a plurality of video frames.
14. The method of claim 13, wherein the network input further comprises data defining one or more segmentation maps, wherein each segmentation map corresponds to a respective video frame, and wherein the segmentation of the video frame is defined as one or more object classifications.
15. The method of any of claims 13-14, wherein the network input further comprises a plurality of optical flow frames corresponding to a plurality of video frames.
16. The method of any of claims 14-15, wherein the neural network comprises a plurality of input blocks, wherein each input block comprises one or more respective neural network layers, wherein the plurality of input blocks comprises: (i) Processing a first input block of a plurality of video frames, and (ii) processing a second input block of the one or more segmentation maps.
17. The method of any of claims 12-16, wherein each of the plurality of blocks is configured to process a block input at a respective temporal resolution.
18. The method of claim 17, wherein each block comprises one or more inflated temporal convolution layers having a temporal inflation rate corresponding to a temporal resolution of the block.
19. The method of any of claims 12-18, wherein each of the plurality of blocks is a space-time convolutional block comprising one or more convolutional neural network layers.
20. A method according to any preceding claim, wherein the neural network generates a network output by processing a target block output.
21. A system, comprising:
one or more computers; and
one or more storage devices communicatively coupled to the one or more computers, wherein the one or more storage devices store instructions that, when executed by the one or more computers, cause the one or more computers to perform the operations of the respective method of any one of claims 1-20.
22. One or more non-transitory computer storage media storing instructions which, when executed by one or more computers, cause the one or more computers to perform the operations of the respective method of any one of claims 1-20.
Applications Claiming Priority (3)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US202063051554P | 2020-07-14 | 2020-07-14 | |
US63/051,554 | 2020-07-14 | ||
PCT/US2021/041583 WO2022015822A1 (en) | 2020-07-14 | 2021-07-14 | Neural network models using peer-attention |
Publications (1)
Publication Number | Publication Date |
---|---|
CN116157804A true CN116157804A (en) | 2023-05-23 |
Family
ID=77249902
Family Applications (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
CN202180060744.0A Pending CN116157804A (en) | 2020-07-14 | 2021-07-14 | Neural network model using peer-to-peer attention |
Country Status (4)
Country | Link |
---|---|
US (1) | US20230114556A1 (en) |
EP (1) | EP4094199A1 (en) |
CN (1) | CN116157804A (en) |
WO (1) | WO2022015822A1 (en) |
Families Citing this family (1)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
WO2020237168A1 (en) * | 2019-05-23 | 2020-11-26 | Google Llc | Connection weight learning for guided architecture evolution |
Family Cites Families (2)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US10445207B2 (en) | 2017-07-31 | 2019-10-15 | Oracle International Corporation | System and method to execute and manage load tests using containers |
CN110443266B (en) * | 2018-05-04 | 2022-06-24 | 上海商汤智能科技有限公司 | Object prediction method and device, electronic equipment and storage medium |
-
2021
- 2021-07-14 EP EP21751925.5A patent/EP4094199A1/en active Pending
- 2021-07-14 CN CN202180060744.0A patent/CN116157804A/en active Pending
- 2021-07-14 US US17/909,581 patent/US20230114556A1/en active Pending
- 2021-07-14 WO PCT/US2021/041583 patent/WO2022015822A1/en unknown
Also Published As
Publication number | Publication date |
---|---|
EP4094199A1 (en) | 2022-11-30 |
WO2022015822A1 (en) | 2022-01-20 |
US20230114556A1 (en) | 2023-04-13 |
Similar Documents
Publication | Publication Date | Title |
---|---|---|
US11361546B2 (en) | Action recognition in videos using 3D spatio-temporal convolutional neural networks | |
WO2021052358A1 (en) | Image processing method and apparatus, and electronic device | |
CN110799992B (en) | Use of simulation and domain adaptation for robot control | |
AU2019200270A1 (en) | Concept mask: large-scale segmentation from semantic concepts | |
CN112634296A (en) | RGB-D image semantic segmentation method and terminal for guiding edge information distillation through door mechanism | |
CN111932529B (en) | Image classification and segmentation method, device and system | |
AU2021354030B2 (en) | Processing images using self-attention based neural networks | |
Yuan et al. | Multi receptive field network for semantic segmentation | |
Zhai et al. | Optical flow estimation using channel attention mechanism and dilated convolutional neural networks | |
CN113348472A (en) | Convolutional neural network with soft kernel selection | |
CN111950700A (en) | Neural network optimization method and related equipment | |
CN116157804A (en) | Neural network model using peer-to-peer attention | |
US20230053618A1 (en) | Recurrent unit for generating or processing a sequence of images | |
CN113095473A (en) | Neural network architecture search system and method, and computer-readable recording medium | |
CN112532251A (en) | Data processing method and device | |
CN116997939A (en) | Processing images using expert blending | |
CN114170519A (en) | High-resolution remote sensing road extraction method based on deep learning and multidimensional attention | |
Imah | Child Violence Detection in Surveillance Video Using Deep Transfer Learning and Ensemble Decision Fusion Learning. | |
US20220189154A1 (en) | Connection weight learning for guided architecture evolution | |
Zhuohang | Dynamic convolution-based image dehazing network | |
Tang | Monocular Depth Prediction in Deep Neural Networks | |
WO2023225340A1 (en) | Performing computer vision tasks using guiding code sequences | |
CN116704382A (en) | Unmanned aerial vehicle image semantic segmentation method, device, equipment and storage medium | |
CN118043818A (en) | Self-attention-based neural network for processing network metrics from multiple modalities |
Legal Events
Date | Code | Title | Description |
---|---|---|---|
PB01 | Publication | ||
PB01 | Publication | ||
SE01 | Entry into force of request for substantive examination | ||
SE01 | Entry into force of request for substantive examination |