CN113168566A - Controlling a robot by using entropy constraints - Google Patents
Controlling a robot by using entropy constraints Download PDFInfo
- Publication number
- CN113168566A CN113168566A CN201980077793.8A CN201980077793A CN113168566A CN 113168566 A CN113168566 A CN 113168566A CN 201980077793 A CN201980077793 A CN 201980077793A CN 113168566 A CN113168566 A CN 113168566A
- Authority
- CN
- China
- Prior art keywords
- entropy
- policy
- robot
- action
- temperature parameter
- Prior art date
- Legal status (The legal status is an assumption and is not a legal conclusion. Google has not performed a legal analysis and makes no representation as to the accuracy of the status listed.)
- Pending
Links
Images
Classifications
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06N—COMPUTING ARRANGEMENTS BASED ON SPECIFIC COMPUTATIONAL MODELS
- G06N3/00—Computing arrangements based on biological models
- G06N3/02—Neural networks
- G06N3/08—Learning methods
- G06N3/084—Backpropagation, e.g. using gradient descent
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06N—COMPUTING ARRANGEMENTS BASED ON SPECIFIC COMPUTATIONAL MODELS
- G06N3/00—Computing arrangements based on biological models
- G06N3/004—Artificial life, i.e. computing arrangements simulating life
- G06N3/008—Artificial life, i.e. computing arrangements simulating life based on physical entities controlled by simulated intelligence so as to replicate intelligent life forms, e.g. based on robots replicating pets or humans in their appearance or behaviour
Abstract
Methods, systems, and apparatus, including computer programs encoded on a computer storage medium, for training a strategic neural network having strategic parameters. One of the methods includes: obtaining trajectory data comprising one or more tuples; updating the current values of the policy parameters using a maximum entropy reinforcement learning technique that maximizes both (i) a reward term and (ii) an entropy term by using the trajectory data, wherein a relative weight between the entropy term and the reward term in the maximization is determined by a temperature parameter; and updating the temperature parameter to adjust a desired entropy of the probability distribution to be at least equal to a minimum desired entropy value by using a probability distribution defined by the policy output generated from the current value of the policy parameter for the tuple in the trajectory data.
Description
Cross Reference to Related Applications
This application claims priority from U.S. patent application No. 62/773,932, filed on 30/11/2018, the entire contents of which are incorporated herein by reference.
Background
This description relates to controlling a robot to perform a particular task.
Some systems control a robot by using a strategic neural network that generates outputs that define a probability distribution over actions that can be performed by the robot, i.e., the system selects actions to be performed by the robot in accordance with the outputs generated by the strategic neural network.
Neural networks are machine learning models that employ one or more layers of nonlinear elements to predict the output for a received input. Some neural networks are deep neural networks that include one or more hidden layers in addition to an output layer. The output of each hidden layer serves as the input to the next layer in the network (i.e., the next hidden layer or output layer). Each layer of the network generates an output from the received input in accordance with current values of a respective set of parameters.
Disclosure of Invention
This specification describes a system, implemented as one or more computer programs on one or more computers located in one or more locations, for training a strategic neural network. The strategic neural network is used to control a robot in order to cause the robot to perform a specific task in an environment. For example, the task may be an industrial robot task involving navigating in an environment, moving an object in an environment, or both.
Particular embodiments of the subject matter described in this specification can be implemented to realize one or more of the following advantages.
Applying deep reinforcement learning methods on real-world robots is exceptionally difficult due to both the sample complexity of deep reinforcement learning methods (i.e., the number of training samples needed to learn an effective control strategy) and, equally importantly, the sensitivity of these methods to hyper-parameters. In particular, tuning hyper-parameters directly on a real-world robot platform (i.e., a platform that involves real-world robots interacting with a real-world environment) can be problematic. More specifically, a robot (e.g., a quadruped robot or other mobile robot) may be damaged or at least severely worn after a significant amount of trial-and-error learning, which is often necessary to determine valid hyper-parameter settings for the hyper-parameters of the reinforcement learning training process.
Specifically, in maximum entropy reinforcement learning, the relative weight between the entropy term and the reward term in the maximization is determined by a parameter, which is referred to as a temperature parameter. Conventional maximum entropy reinforcement learning techniques require extensive over-parameter adjustments to be made to determine the optimal settings for temperature parameters for a given task. When learning the strategy on real-world robots, such a hyper-parametric search may result in damage, wear, or both to the robot even before the training process begins.
However, the described techniques require minimal or no over-parameter adjustments, as the temperature parameters are learned during training of the neural network for strategies. In other words, the claimed technology automatically leverages exploration and development by dynamically and automatically adjusting the temperature parameters used to determine the randomness of the policy. Thus, the control strategy can be determined efficiently without excessive wear or damage to the real world robot, since the need for trial and error learning is reduced or even eliminated.
Additionally, the described techniques automatically adjust the temperature parameter as the strategy improves time during training. This may further reduce the number of training iterations and the degree of robot wear required for the robot to learn high quality control strategies. More generally, automatically adjusting the temperature parameters results in the strategy being free to explore more in areas where the best action is not determined, but with higher certainty in states with clear distinction between good and bad actions, thus improving the quality of the final strategy learned.
The details of one or more embodiments of the subject matter described in this specification are set forth in the accompanying drawings and the description below. Other features, aspects, and advantages of the subject matter will become apparent from the description, the drawings, and the claims.
Drawings
FIG. 1 illustrates an example control system.
FIG. 2 is a flow diagram of an example process for training a policy neural network.
FIG. 3 is a flow chart of an example process for updating a current temperature parameter.
Like reference numbers and designations in the various drawings indicate like elements.
Detailed Description
FIG. 1 illustrates an example control system 100. The control system 100 is an example of a system implemented as a computer program on one or more computers located at one or more locations in which the systems, components, and techniques described below are implemented.
The system 100 includes a strategic neural network 110, a training engine 150, and one or more memories storing a set of strategic parameters 118 and temperature parameters 152 of the strategic neural network 110.
The system 100 controls the robot 102 to interact with the environment 104 by selecting an action 106 to be performed by the robot 102 and then causing the robot 102 to perform the selected action 106.
The robot 102 executing the selected action 106 typically transitions the environment 104 to a new state. By repeatedly causing the robot 102 to perform actions in the environment 104, the system 100 may control the robot 102 to complete a specified task. For example, the task may be an industrial robot task involving navigating in an environment, moving an object in an environment, or both.
In particular, the control system 100 controls the robot 102 by using the strategic neural network 110 to cause the robot 102 to perform specified tasks in the environment 104.
The policy neural network 110 is a neural network having parameters (referred to herein as "policy parameters") that receives a state representation 120 characterizing the state of the environment 104 with which the robot 102 interacts, and generates a policy output 122, the policy output 122 defining a probability distribution over a set of possible actions that may be performed by the robot 102.
Each action in the set of possible actions is typically a multi-dimensional action, such as a multi-dimensional vector. For example, each dimension may correspond to a different joint or motor of the robot 102 and may be a control input for the joint or motor, such as a torque to be applied to the joint or a position or setting of the motor. As an example, if a robot is controlled by eight actuator motors positioned at different points along the frame of the robot, each action will typically be an eight-dimensional vector, where each dimension corresponds to one of the eight motors, and the value in that dimension corresponds to the expected motor position for that motor.
When the set of actions is discrete, the policy output 122 may include a respective probability for each action in the set. When the set of actions is continuous, the policy output 122 may include, for each dimension, parameters of the distribution over possible values of the dimension, such as mean and covariance of a gaussian distribution.
Generally, the state representation 120 is generated from sensor data captured by sensors of the robot 102. For example, the state representation 120 may include observations comprising one or more sensor readings that characterize the current state of the robot 102, such as sensors for measuring the angles of certain joints or motors of the robot 102, an IMU for measuring the orientation and angular velocity of the robot 102, and so forth.
In some cases, the observations may also include images captured by a camera sensor, laser data captured by a laser sensor, or both.
In some cases, the state representation 120 includes additional data, such as one or more recently received observations in addition to the current observations, data specifying the most recent action performed by the robot, or data 100 specifying the most recent reward 124 received by the system 100.
The policy neural network 110 may have any suitable neural network architecture that allows the policy neural network 110 to map the received state representation 120 to the policy output 122. For example, when the state representation 120 includes high-dimensional image or laser data, the strategic neural network 110 may be a convolutional neural network. As another example, the policy neural network 110 may be a multi-layered perceptron when the state representation 120 includes only relatively low-dimensional inputs (e.g., sensor readings used to characterize the current state of the robot).
The system 100 uses the policy output 122 to control the robot, i.e. to select an action 106 to be performed by the robot at the current time step according to an action selection policy, and then to cause the robot to perform the action 106, e.g. by transmitting a control signal directly to the robot, or by transmitting data identifying the action 106 to the control system of the robot 102.
The system 100 may select an action to be performed by the robot 102 based on the action selection output 122 by using any of a variety of action selection strategies, such as by sampling the actions according to their probability values, or by selecting the action with the highest probability value.
The system 100 may receive a respective reward 124 at each time step, where the reward 124 is specified by a scalar value and characterizes, for example, the progress of the robot 102 toward completing a specified task.
To improve control of the robot 102, the training engine 150 repeatedly updates the strategy parameters 118 of the strategic neural network 110 to cause the strategic neural network 110 to generate more accurate strategy outputs, i.e., strategy outputs that result in the system 100 receiving a higher reward 124, and thus, improve the performance of the robot 102 on the intended task. In other words, the training engine 150 trains the strategic neural network 110 by repeatedly updating the strategic parameters 118.
Specifically, the training engine 150 updates the policy parameters 118 by using a maximum entropy reinforcement learning technique. In this technique, the training engine 150 updates the policy parameters 118 to maximize both (i) reward terms that measure the total reward in the tuples in the trace data used for the update and (ii) entropy terms that measure the entropy of the probability distribution defined by the policy output generated by processing the state representation in the tuples in the trace data according to the current values of the policy parameters. While the "entropy" term refers throughout to measuring the 'entropy' of a probability distribution, it is to be understood that the "entropy" term typically measures the differential entropy of a probability distribution when the action space is continuous (and the output of the policy network is a parameter of a continuous probability distribution).
Each trajectory in the trajectory data is a sequence of tuples, wherein each tuple includes a state representation, an action performed in response to the state representation, and a reward earned in response to the robot performing the action.
The relative weight between the entropy and bonus items in the maximization is determined by a parameter referred to as the temperature parameter 152. For example, the entropy term may be multiplied by a temperature parameter optimized in the overall target. That is, the objective function may include an overall term that is the difference between the reward term and the product of the temperature parameter 152 and the entropy term.
Specifically, the objective function J (pi) may satisfy:
where E is the desired operator and τ is the trajectory sampled from the trajectory distribution resulting from the strategic neural network π, i.e., the trajectory generated by selecting an action from the strategic output 122 generated by the strategic neural network 110, the trajectory comprising time steps 0 through T, r(s)t，at) As the robot 102 responds to the status representation stPerforming action atThe reward received by the system 100 as a result of(s), pi(s)t，at) Is assigned to action a in a probability distribution generated by processing the state representation st using a strategic neural networktAnd α is a temperature parameter.
Unlike conventional maximum entropy reinforcement learning techniques, which treat the temperature parameter 152 as a hyperparameter that must be set prior to training, the training engine 152 also repeatedly updates the temperature parameter 152 as the strategy parameters 118 are updated, i.e., in conjunction with training the strategy neural network 110. In particular, the training engine 150 repeatedly updates the temperature parameter 152 to adjust the desired entropy of the probability distribution defined by the output of the strategic neural network 110 to be at least equal to (i.e., greater than or equal to) the minimum desired entropy value.
Training the neural network 110 and updating the temperature parameter 152 is described in more detail below with reference to fig. 2 and 3.
FIG. 2 is a flow diagram of an example process 200 for training a policy neural network. For convenience, process 200 will be described as being performed by a system of one or more computers located at one or more locations. For example, a suitably programmed control system (e.g., control system 100 of FIG. 1) may perform process 200.
The system may repeatedly perform process 200 on trajectory data (e.g., trajectory data sampled from a replay buffer or other memory used to store trajectory data generated as a result of the robot interacting with the environment while being controlled by a strategic neural network or some other control strategy) to train the strategic neural network and adjust the temperature parameter in conjunction with the training.
The system obtains trajectory data (step 202). The trajectory data includes one or more tuples, wherein each tuple identifies a state representation for characterizing a state of the environment, an action performed by the robot while the environment is in the state characterized by the state representation, a reward received in response to the robot performing the action, and a next state representation for characterizing a next state of the environment after the robot performs the action.
Using the trajectory data, the system updates the current value of the policy parameter by using a maximum entropy reinforcement learning technique that maximizes both (i) an incentive item that measures the total reward in a tuple in the trajectory data and (ii) an entropy item that measures the entropy of a probability distribution defined by policy outputs generated by processing state representations in the tuple in the trajectory data according to the current value of the policy parameter, wherein a relative weight between the entropy item and the incentive item in the maximization is determined by the current temperature parameter (step 204).
Typically, as part of such updating, the system processes each state representation in each tuple in the trajectory data by using a policy neural network to generate a policy output for the state representation in accordance with the current values of the policy parameters.
More specifically, the system may determine the update by using the current temperature parameter and any suitable maximum entropy reinforcement learning technique. As a specific example, the system may use the Soft actuator-Critic (Flexible actuation-evaluation, SAC) algorithm to determine updates to the current values of the policy parameters. In the SAC algorithm, the entropy term is scaled by, i.e. multiplied by, the current temperature parameter value before calculating the error and gradient. The SAC algorithm is described in more detail in "Soft Actor-Critic: Off-Policy Maximum Entropy estimation Learning with a Stochastic Actor" (available in arXiv: 1801.01290) published by Haarnoja et al in 2018.
The system updates the temperature parameters by using a probability distribution defined by the policy output generated from the current values of the policy parameters for the tuples in the trajectory data (step 206). In particular, the system updates the temperature parameter to adjust the desired entropy of the probability distribution defined by the policy output to be at least equal to a minimum desired entropy value.
The minimum desired entropy value is a fixed value that adjusts the desired minimum entropy of the probability distribution defined by the strategy output generated by the strategic neural network during the training.
In some embodiments, the minimum desired entropy is a constant provided as an input to the system.
In some other embodiments, the system determines a minimum desired entropy value prior to performing the training. For example, when the action space is continuous, the minimum desired entropy value may be determined based on the number of action dimensions of the actions in the set of possible actions. As a particular example, the minimum desired entropy value may be the negative of the number of action dimensions, i.e., such that when there are eight action dimensions, the minimum desired entropy value will be-8.
Typically, the system determines the update by using an objective function that depends on the temperature parameter, the entropy of the probability distribution, and the minimum desired entropy value for each of the probability distributions.
As a particular example, the objective function J (α) may satisfy
Where α is the temperature parameter, E is the desired operator, atIs for the t-th tuple by processing the state representation s in the tuple according to the current values of the policy parameterstAnd from the strategic neural network pitThe generated probability distribution is sampled, and
As can be seen from the above formula for the objective function J (α), the optimizer for the objective function J (α) is always plus or minus infinity, since the function ignores the dependence of the probability distribution generated by the strategic neural network on the temperature parameter. Thus, instead of minimizing J (α), the system takes only one (or a few) gradient steps for the minimization at each iteration, and then updates πtTo better match the updated alpha, i.e., jointly update the reinforcement learning objective and J (alpha) by dual gradient descent.
Updating the current temperature parameter is described in more detail below with reference to fig. 3.
FIG. 3 is a flow diagram of an example process 300 for updating a current temperature parameter. For convenience, process 300 will be described as being performed by a system of one or more computers located at one or more locations. For example, a suitably programmed control system (e.g., control system 100 of FIG. 1) may perform process 300.
For each tuple, the system samples an action from a probability distribution generated by the policy neural network for the tuple (step 302). In other words, the system selects an action from a set of possible actions, where each action has a probability of being selected that depends on (e.g., is equal to) the probability of that action in the probability distribution.
For each tuple, the system determines the gradient of the objective function with respect to the temperature parameter, i.e., the difference between (i) the negative of the logarithm of the probability assigned to the sampled action by the probability distribution and (ii) the minimum desired entropy value (step 304).
The system combines the gradients of the tuples (step 306), i.e. by summing or averaging the gradients of the tuples, and determines an update to the temperature parameter from the combined gradients (step 308). The system may determine the update by applying an update rule (e.g., an ADAM update rule or a random gradient descent update rule) to the combined gradient used to determine the update.
The system then applies the update to the current temperature parameter, i.e., subtracts the update from the current temperature parameter, to determine an updated temperature parameter (step 310).
The illustration of process 300 describes taking one gradient step for each tuple to update the temperature parameter. In some cases, the system performs multiple gradient steps (i.e., two, five, or ten gradient steps) to iterate before determining a final update to the current temperature parameter.
The term "configured" is used herein in connection with system and computer program components. For a system of one or more computers, to be configured to perform a particular operation or action means that software, firmware, hardware, or a combination thereof, which in operation causes the system to perform the operation or action, has been installed on the system. For one or more computer programs, to be configured to perform certain operations or actions means that the one or more programs comprise instructions which, when executed by data processing apparatus, cause the apparatus to perform the operations or actions.
Embodiments of the subject matter described in this specification and their functional operations may be implemented in digital electronic circuitry, in tangibly embodied computer software or firmware, in computer hardware (including the structures disclosed in this specification and their structural equivalents), or in combinations of one or more of them. Embodiments of the subject matter described in this specification can be implemented as one or more computer programs, i.e., one or more modules of computer program instructions, encoded on a tangible, non-transitory storage medium for execution by, or to control the operation of, data processing apparatus. The computer storage medium may be a machine-readable storage device, a machine-readable storage substrate, a random or serial access memory device, or a combination of one or more of them. Alternatively or additionally, the program instructions may be encoded on an artificially generated propagated signal, such as a machine-generated electrical, optical, or electromagnetic signal, that is generated to encode information for transmission to suitable receiver apparatus for execution by the data processing apparatus.
The term "data processing apparatus" refers to data processing hardware and encompasses all kinds of apparatus, devices and machines for processing data, including, for example: a programmable processor, a computer, or multiple processors or computers. The apparatus can also be, or further comprise, special purpose logic circuitry, e.g., an FPGA (field programmable gate array) or an ASIC (application-specific integrated circuit). The apparatus can optionally include, in addition to hardware, code that creates an execution environment for the computer program, e.g., code that constitutes processor firmware, a protocol stack, a database management system, an operating system, or a combination of one or more of them.
A computer program (which may also be referred to or described as a program, software application, app, module, software module, script, or code) can be written in any form of programming language, including compiled or interpreted languages or declarative or procedural languages, and it can be deployed in any form, including as a stand-alone program or as a module, component, subroutine, or other unit suitable for use in a computing environment. A program may, but need not, correspond to a file in a file system. A program can be stored in a portion of a file that holds other programs or data (e.g., one or more scripts stored in a markup language document), in a single file dedicated to the program in question, or in multiple coordinated files (e.g., files that store one or more modules, sub-programs, or portions of code). A computer program can be deployed to be executed on one computer or on multiple computers at one site or distributed across multiple sites and interconnected by a data communication network.
In this specification, the term "database" is used broadly to refer to any collection of data classes: the data need not be structured in any particular way, or at all, and it may be stored in one or more storage devices in one or more locations. Thus, for example, the index database may include multiple data class sets, each of which may be organized and accessed differently.
Similarly, in this specification, the term "engine" is used broadly to refer to a software-based system, subsystem, or process that is programmed to perform one or more particular functions. Typically, the engine will be implemented as one or more software modules or components installed on one or more computers located at one or more locations. In some cases, one or more computers will be dedicated to a particular engine; in other cases, multiple engines may be installed and run on the same computer or computers.
The processes and logic flows described in this specification can be performed by one or more programmable computers executing one or more computer programs to perform functions by operating on input data and generating output. The processes and logic flows can also be performed by, and in combination with, special purpose logic circuitry, e.g., an FPGA or an ASIC, or a combination of special purpose logic circuitry and one or more programmed computers.
A computer suitable for executing a computer program may be based on a general-purpose or special-purpose microprocessor or both, or any other kind of central processing unit. Generally, a central processing unit will receive instructions and data from a read-only memory or a random access memory or both. Elements of a computer are a central processing unit for performing or executing instructions and one or more memory devices for storing instructions and data. The central processing unit and the memory can be supplemented by, or incorporated in, special purpose logic circuitry. Generally, a computer will also include, or be operatively coupled to receive data from or transfer data to, or both, one or more mass storage devices for storing data, e.g., magnetic, magneto-optical disks, or optical disks. However, the computer need not have such devices. Moreover, a computer may be embedded in another device, e.g., a mobile telephone, a Personal Digital Assistant (PDA), a mobile audio or video player, a game player, a Global Positioning System (GPS) receiver, or a portable storage device (e.g., a Universal Serial Bus (USB) flash drive), to name a few.
Computer readable media suitable for storing computer program instructions and data include all forms of non-volatile memory, media and memory devices, including: for example, semiconductor memory devices (e.g., EPROM, EEPROM, and flash memory devices), magnetic disks (e.g., an internal hard disk or a removable disk), magneto-optical disks, CD-ROM disks, and DVD-ROM disks.
To provide for interaction with a user, embodiments of the subject matter described in this specification can be implemented on a computer having: a display device for displaying information to a user, such as a CRT (cathode ray tube) or LCD (liquid crystal display) monitor; and a keyboard and a pointing device, such as a mouse or a trackball, by which a user can provide input to the computer. Other kinds of devices may also be used to provide for interaction with a user; for example, feedback provided to the user can be any form of sensory feedback, such as visual feedback, auditory feedback, or tactile feedback; and input from the user may be received in any form, including acoustic, speech, or tactile input. Additionally, the computer may interact with the user by sending documents to and receiving documents from a device used by the user (e.g., by sending web pages to a web browser on the user's device in response to requests received from the web browser). Moreover, the computer may interact with the user by sending a text message or other form of message to a personal device (e.g., a smart phone running a messaging application) and receiving a response message back from the user.
The data processing apparatus for implementing a machine learning model may further comprise: for example, dedicated hardware accelerator units for handling machine learning training or production (i.e., reasoning), common parts of workloads, and compute intensive parts.
The machine learning model may be implemented and deployed using a machine learning framework (e.g., a TensorFlow framework, a Microsoft Cognitive Toolkit framework, an Apache Singa framework, or an Apache MXNet framework).
Embodiments of the subject matter described in this specification can be implemented in a computing system that includes a back-end component (e.g., as a data server), or that includes a middleware component (e.g., an application server), or that includes a front-end component (e.g., a user computer having a graphical user interface, a web browser, or an app through which a user can interact with an implementation of the subject matter described in this specification), or any combination of one or more such back-end, middleware, or front-end components. The components of the system can be interconnected by any form or medium of digital data communication (e.g., a communication network). Examples of communication networks include: a local area network ("LAN") and a wide area network ("WAN"), such as the Internet.
The computing system may include clients and servers. A client and server are generally remote from each other and typically interact through a communication network. The relationship of client and server arises by virtue of computer programs running on the respective computers and having a client-server relationship to each other. In some embodiments, the server transmits data (e.g., HTML pages) to the user device, for example, for displaying data to and receiving user input from a user interacting with the device (which acts as a client). Data generated at the user device (e.g., the result of the user interaction) may be received at the server from the device.
While this specification contains many specific implementation details, these should not be construed as limitations on the scope of any inventions or of what may be claimed, but rather as descriptions of features that may be specific to particular embodiments of particular inventions. Certain features that are described in this specification in the context of separate embodiments can also be implemented in combination in a single embodiment. Conversely, various features that are described in the context of a single embodiment can also be implemented in multiple embodiments separately or in any suitable subcombination. Moreover, although features may be described above as acting in certain combinations and even initially claimed as such, one or more features from a claimed combination can in some cases be excised from the combination. And claimed combinations may be directed to subcombinations or variations of subcombinations.
Similarly, while operations are depicted in the drawings and described in the claims in a particular order, this should not be understood as requiring that such operations be performed in the particular order shown or in sequential order, or that all illustrated operations be performed, to achieve desirable results. In some cases, multitasking and parallel processing may be advantageous. Moreover, the separation of various system modules and components in the embodiments described above should not be understood as requiring such separation in all embodiments, and it should be understood that the described program components and systems can generally be integrated together in a single software product or packaged into multiple software products.
Specific embodiments of the present subject matter have been described. Other embodiments are within the scope of the following claims. For example, the actions set forth in the claims can be performed in a different order and still achieve desirable results. As one example, the processes depicted in the accompanying figures do not necessarily require the particular order shown, or sequential order, to achieve desirable results. In some cases, multitasking and parallel processing may be advantageous.
Claims (10)
1. A method for training a strategic neural network having a plurality of strategic parameters and for controlling a robot interacting with an environment, wherein the strategic neural network is configured to: receiving as input a state representation of a state characterising the environment, and processing the state representation in accordance with the policy parameters to generate a policy output defining a probability distribution over a set of actions performable by the robot, the method comprising:
obtaining trajectory data comprising one or more tuples, each tuple identifying a state representation for characterizing a state of the environment, an action performed by the robot while the environment is in the state characterized by the state representation, an award received in response to the robot performing the action, and a next state representation for characterizing a next state of the environment after the robot performs the action;
updating a current value of the policy parameter using a maximum entropy reinforcement learning technique by using the trajectory data, the maximum entropy reinforcement learning technique maximizing both (i) a reward item that measures an overall reward in the tuple in the trajectory data and (ii) an entropy item that measures an entropy of a probability distribution defined by policy outputs generated by processing the state representations in the tuple in the trajectory data according to the current value of the policy parameter, wherein a relative weight between the entropy item and the reward item in the maximization is determined by a temperature parameter; and
updating the temperature parameter to adjust a desired entropy of the probability distribution to be at least equal to a minimum desired entropy value by using the probability distribution defined by the policy output generated from the current value of the policy parameter for the tuple in the trajectory data.
2. The method of claim 1, further comprising:
controlling the robot by using the policy neural network and in accordance with the updated values of the policy parameters.
3. The method of any one of the preceding claims, wherein updating the temperature parameter comprises: updating the temperature parameter by using an objective function, the objective function depending on the temperature parameter, the entropy of the probability distribution, and the minimum desired entropy value for each of the probability distributions.
4. The method of claim 3, wherein the minimum desired entropy value is based on a number of action dimensions of the action in a set of possible actions.
5. The method of claim 4, wherein the minimum desired entropy value is the negative of the number of action dimensions.
6. The method of any of claims 3 to 5, wherein updating the temperature parameter comprises:
determining, for each of the one or more tuples, a gradient of the temperature parameter with respect to the objective function; and
updating the temperature parameter by using the determined gradient.
7. The method of claim 6, wherein determining the gradient comprises, for each of the tuples:
sampling an action from the probability distribution generated by the policy neural network for the tuple; and
determining a difference between (i) a negative of a logarithm of the probability assigned to the sampled action by the probability distribution and (ii) the minimum desired entropy value.
8. The method of any of claims 3 to 7, wherein the objective function satisfies:
where α is the temperature parameter, E is the desired operator, atIs for the t-th tuple by processing the state representation s in the tuple according to the current value of the policy parametertAnd from the strategic neural network pitAn act of sampling the generated probability distribution, and
9. One or more computer-readable storage media storing instructions that, when executed by one or more computers, cause the one or more computers to perform the respective operations of any one of the methods of any preceding claim.
10. A system comprising one or more computers and one or more storage devices storing instructions that, when executed by the one or more computers, cause the one or more computers to perform respective operations of any one of the methods of any one of the preceding claims.
Applications Claiming Priority (3)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US201862773932P | 2018-11-30 | 2018-11-30 | |
US62/773,932 | 2018-11-30 | ||
PCT/US2019/064047 WO2020113228A1 (en) | 2018-11-30 | 2019-12-02 | Controlling robots using entropy constraints |
Publications (1)
Publication Number | Publication Date |
---|---|
CN113168566A true CN113168566A (en) | 2021-07-23 |
Family
ID=69165562
Family Applications (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
CN201980077793.8A Pending CN113168566A (en) | 2018-11-30 | 2019-12-02 | Controlling a robot by using entropy constraints |
Country Status (4)
Country | Link |
---|---|
US (1) | US20220019866A1 (en) |
EP (1) | EP3888014A1 (en) |
CN (1) | CN113168566A (en) |
WO (1) | WO2020113228A1 (en) |
Cited By (1)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
CN113919475A (en) * | 2021-12-16 | 2022-01-11 | 中国科学院自动化研究所 | Robot skill learning method and device, electronic equipment and storage medium |
Families Citing this family (8)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
CN114190102A (en) * | 2020-07-15 | 2022-03-15 | 百度时代网络技术（北京）有限公司 | Video recommendation with multiple expert mixed soft actor critics |
US20220143819A1 (en) * | 2020-11-10 | 2022-05-12 | Google Llc | System and methods for training robot policies in the real world |
CN112926628A (en) * | 2021-01-29 | 2021-06-08 | 北京字节跳动网络技术有限公司 | Action value determination method, device, learning framework, medium and equipment |
CN114282640B (en) * | 2021-12-31 | 2024-02-06 | 北京瑞莱智慧科技有限公司 | Method, device, medium and computing equipment for generating diversity strategy |
CN115314904B (en) * | 2022-06-14 | 2024-03-29 | 北京邮电大学 | Communication coverage method based on multi-agent maximum entropy reinforcement learning and related equipment |
CN114986518B (en) * | 2022-07-19 | 2022-11-04 | 聊城一明五金科技有限公司 | Intelligent control method and system for automobile disassembly production line |
CN116168333B (en) * | 2023-04-20 | 2023-08-22 | 华南理工大学 | Self-supervision visual language navigation pre-training method, device and storage medium |
CN116774725B (en) * | 2023-05-19 | 2024-01-16 | 北华航天工业学院 | Low-altitude unmanned aerial vehicle path planning and obstacle avoidance method capable of improving SAC algorithm |
-
2019
- 2019-12-02 WO PCT/US2019/064047 patent/WO2020113228A1/en unknown
- 2019-12-02 EP EP19836712.0A patent/EP3888014A1/en active Pending
- 2019-12-02 CN CN201980077793.8A patent/CN113168566A/en active Pending
- 2019-12-02 US US17/297,902 patent/US20220019866A1/en active Pending
Cited By (2)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
CN113919475A (en) * | 2021-12-16 | 2022-01-11 | 中国科学院自动化研究所 | Robot skill learning method and device, electronic equipment and storage medium |
CN113919475B (en) * | 2021-12-16 | 2022-04-08 | 中国科学院自动化研究所 | Robot skill learning method and device, electronic equipment and storage medium |
Also Published As
Publication number | Publication date |
---|---|
US20220019866A1 (en) | 2022-01-20 |
WO2020113228A1 (en) | 2020-06-04 |
EP3888014A1 (en) | 2021-10-06 |
Similar Documents
Publication | Publication Date | Title |
---|---|---|
CN113168566A (en) | Controlling a robot by using entropy constraints | |
CN110692066B (en) | Selecting actions using multimodal input | |
US11868894B2 (en) | Distributed training using actor-critic reinforcement learning with off-policy correction factors | |
US11727281B2 (en) | Unsupervised control using learned rewards | |
CN110326004B (en) | Training a strategic neural network using path consistency learning | |
US10860920B2 (en) | Distributional reinforcement learning | |
US11627165B2 (en) | Multi-agent reinforcement learning with matchmaking policies | |
US11537887B2 (en) | Action selection for reinforcement learning using a manager neural network that generates goal vectors defining agent objectives | |
EP3788549B1 (en) | Stacked convolutional long short-term memory for model-free reinforcement learning | |
US11977983B2 (en) | Noisy neural network layers with noise parameters | |
US11868866B2 (en) | Controlling agents using amortized Q learning | |
US20210103815A1 (en) | Domain adaptation for robotic control using self-supervised learning | |
US20220036186A1 (en) | Accelerated deep reinforcement learning of agent control policies | |
US20230330846A1 (en) | Cross-domain imitation learning using goal conditioned policies | |
CN114341895A (en) | Exploration using hyper-models | |
US20220237488A1 (en) | Hierarchical policies for multitask transfer | |
US20240160901A1 (en) | Controlling agents using amortized q learning |
Legal Events
Date | Code | Title | Description |
---|---|---|---|
PB01 | Publication | ||
PB01 | Publication | ||
SE01 | Entry into force of request for substantive examination | ||
SE01 | Entry into force of request for substantive examination |