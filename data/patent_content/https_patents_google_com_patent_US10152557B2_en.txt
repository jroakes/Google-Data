US10152557B2 - Efficient similarity ranking for bipartite graphs - Google Patents
Efficient similarity ranking for bipartite graphs Download PDFInfo
- Publication number
- US10152557B2 US10152557B2 US14/278,811 US201414278811A US10152557B2 US 10152557 B2 US10152557 B2 US 10152557B2 US 201414278811 A US201414278811 A US 201414278811A US 10152557 B2 US10152557 B2 US 10152557B2
- Authority
- US
- United States
- Prior art keywords
- nodes
- node
- similarity
- subgraph
- category
- Prior art date
- Legal status (The legal status is an assumption and is not a legal conclusion. Google has not performed a legal analysis and makes no representation as to the accuracy of the status listed.)
- Active, expires
Links
Images
Classifications
-
- G06F17/30943—
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F16/00—Information retrieval; Database structures therefor; File system structures therefor
- G06F16/90—Details of database functions independent of the retrieved data types
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F2216/00—Indexing scheme relating to additional aspects of information retrieval not explicitly covered by G06F16/00 and subgroups
- G06F2216/03—Data mining
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06Q—INFORMATION AND COMMUNICATION TECHNOLOGY [ICT] SPECIALLY ADAPTED FOR ADMINISTRATIVE, COMMERCIAL, FINANCIAL, MANAGERIAL OR SUPERVISORY PURPOSES; SYSTEMS OR METHODS SPECIALLY ADAPTED FOR ADMINISTRATIVE, COMMERCIAL, FINANCIAL, MANAGERIAL OR SUPERVISORY PURPOSES, NOT OTHERWISE PROVIDED FOR
- G06Q30/00—Commerce
- G06Q30/02—Marketing; Price estimation or determination; Fundraising
- G06Q30/0241—Advertisements
Definitions
- Data graphs store data and rules that describe knowledge about the data in a form that provides for deductive reasoning.
- Data graphs can be bipartite, meaning that the nodes in the graph can be divided into two disjoint sets, with all edges going between the two sets.
- Bipartite graphs can be generated for use in web usage mining, which extracts implicit knowledge from data that captures user interactions with the web.
- a bipartite graph may be generated with one set of nodes representing people or organizations and the other set of nodes representing actions, interests, etc., relevant to the people or organizations.
- a bipartite graph may have advertisers in one set of nodes and queries in another set of nodes, where an advertiser is connected to a query when their ad has been shown in response to the query.
- edges connecting the first set of nodes to the second set of nodes can be weighted, or each edge may be counted the same.
- Bipartite graphs are commonly lopsided, with many more nodes in one set than the other. Such graphs may also be very large. For example, the advertising graph may have billions of queries but only millions of advertisers.
- Bipartite graphs can be used in data mining, for example to detect interesting patterns and connections between nodes of one type and nodes of another type, for example between users and other actors.
- Users or other actors may represent one set of nodes and items representing data collected from search records or application logs may be the second set of nodes.
- Actors in such a graph are connected to items that describe their web usage patterns. Often the items can be put into categories that generalize the actions. Determining which actors are similar to other actors, e.g., computing a similarity ranking between one actor and another actor, is a desirable tool for web mining.
- Targeted similarity can also be important, especially for advertising, social media, retail, and the like, to personalize services in a more effective way.
- Similarity rankings can be used, for example, to identify a competing advertiser, to suggest related queries for an advertiser, to find people with similar interests, etc. Computing similarity rankings, however, is challenging in a large graph due to the sheer amount of data.
- Some implementations provide an efficient approach to computing similarity rankings in bipartite graphs using various similarity metrics.
- the approach is based on a reduction operator that reduces the bipartite graph into multiple subgraphs, and an aggregation operator for aggregating two or more of the subgraphs and determining similarity rankings for a specified node.
- the system may assign each B node to a category, where the categories are disjoint. Thus, each node in the B nodes is assigned to one category.
- the system may then generate a subgraph for each category using a reduction operation.
- the reduction operation outputs, for each category in isolation, a compact representation of the information used to compute the similarity rankings in that category.
- the nodes in the subgraph are A nodes from the bipartite graph connected to each other by a weighted edge.
- the weight of the edge is determined by a similarity metric.
- Two A nodes connected by an edge in the subgraph indicates they each connect to the same B node in the bipartite graph, the B node being assigned to the category for the subgraph. Because the subgraph eliminates the B nodes, the size of a subgraph is bounded by the quantity of A nodes.
- the subgraphs may be generated in a batch mode or off-line, and stored, so they are available to generate real-time similarity rankings in response to a query.
- the system may aggregate the subgraphs for the identified subset of categories, determining a similarity ranking for other A nodes to the particular A node identified in the query. Like the reduction operation, the aggregation operation is dependent on the similarity metric used in generating the subgraphs.
- a computer system includes at least one processor and memory storing a bipartite graph having a first set of nodes and a second set of nodes, nodes in the first set being connected to nodes in the second set by edges.
- the memory also stores instructions that, when executed by the at least one processor, cause the system to assign each node in the second set to one of a plurality of categories and, for each of the plurality of categories, generate a subgraph.
- the subgraph may include a subset of nodes in the first set and edges linking the nodes in the subset, where the nodes in the subset are selected based on connection to a node in the second set that is assigned to the category.
- the system may store the subgraph in the memory.
- a method in another aspect, includes determining, using at least one processor, that a first node in a first set of nodes in a bipartite graph is linked to a second node in a second set of nodes in the bipartite graph, determining, using the at least one processor, that a third node in the first set of nodes is linked to the second node in the bipartite graph, and generating, in a subgraph, a link between the first node and the third node, the link having a weight determined by a similarity metric.
- the method also includes repeating the determining and generating for other nodes in the first set of nodes, so that the subgraph includes nodes in the first set linked to each other and storing the subgraph in a memory.
- a method in another aspect, includes storing a bipartite graph comprising a first set of nodes and a second set of nodes, the first set and the second set being disjoint sets and, prior to receiving a query, generating subgraphs of the bipartite graph comprising nodes of the first set such that a similarity function computed on the bipartite graph would have the same result as a similarity function computed on the subgraphs.
- the method may also include receiving the query, which identifies a particular node from the first set of nodes, aggregating two or more of the subgraphs to determine other first nodes most similar to the particular first node, and using one or more of the other first nodes for responding to the query.
- a non-transitory computer-readable medium may include instructions executable by at least one processor that cause a computer system to perform one or more of the methods described above.
- the method allows real-time similarity rankings to be computed on large, unbalanced bipartite graphs. Implementations pre-compute the minimum amount of information needed to answer on-the-fly a personalized similarity ranking on a specific subset of categories. Implementations are also flexible, offering a variety of similarity metrics to be used in the calculation of similarity ranking.
- FIG. 1 illustrates an example system in accordance with the disclosed subject matter.
- FIG. 2 illustrates a flow diagram of an example process for efficiently determining similarity rankings in a large bipartite graph, in accordance with an implementation.
- FIG. 3 illustrates an example of a bipartite graph, in accordance with an implementation.
- FIG. 4 illustrates an example of subgraphs for the bipartite graph of FIG. 3 generated by a reduction operator, in accordance with an implementation.
- FIG. 5 illustrates weighted edges in one of the subgraphs of FIG. 4 for various similarity metrics, in accordance with implementations.
- FIG. 6 illustrates an example of a bipartite graph with weighted edges and a subgraph generated using a reduction operation for Personal PageRank similarity, according to an implementation.
- FIG. 7 shows an example of a computer device that can be used to implement the described techniques.
- FIG. 8 shows an example of a distributed computer device that can be used to implement the described techniques.
- FIG. 1 is a block diagram of a graph system in accordance with an example implementation.
- the system 100 may be used to efficiently determine similarity rankings in a bipartite graph. While the system 100 can be used to find similarity rankings between nodes in any bipartite graph, the system 100 is especially useful for large, lopsided bipartite graphs as the processing time to calculate similarity rankings in such graphs is cost- and time-prohibitive.
- a lopsided bipartite graph is a bipartite graph where one set of nodes (e.g., the actors) are an order of magnitude smaller than the other set of nodes (e.g., the items).
- the smaller set of nodes may be several orders of magnitude smaller, for example 1000 times smaller than the larger set of nodes.
- Such large graphs may include billions of nodes.
- the graph system 100 may be a computing device or devices that take the form of a number of different devices.
- the system 100 may be a standard server, a group of such servers, a client-server system, or a rack server system.
- system 100 may be implemented in a personal computer, for example a laptop computer.
- the graph system 100 may be an example of computer device 700 , as depicted in FIG. 7 , or computer device 800 , as depicted in FIG. 8 .
- the graph system 100 may include a bipartite graph 140 .
- the bipartite graph 140 can be a directed edge-labeled graph. Such a data graph stores nodes and edges. The nodes in the data graph can be divided into two disjoint sets. In some implementations the first set represents actors and the other set represents items. While the bipartite graph 140 is described as having actor nodes and item nodes for ease in discussing to the two sets of nodes, it is understood that implementations are not limited to bipartite graphs with actor nodes and item nodes.
- the system 100 may operate on any bipartite graph regardless of the types of nodes.
- nodes in the first set e.g., the actors or A nodes
- nodes in the second set e.g. the items or B nodes
- the item nodes are assigned to a category.
- the items may represent queries and each query may be assigned to a market segment in an advertising platform.
- the categories are disjoint, so that each item node is assigned to one category.
- Graph 300 of FIG. 3 illustrates an example of a small bipartite graph.
- the graph 300 includes actor nodes a-e and item nodes 1 - 5 .
- Item nodes 1 - 5 are assigned to one of three categories, category 305 , category 310 , and category 315 . It is understood that the two sets of nodes may represent groups other than actors and items.
- the edges between nodes in the first set and nodes in the second set can be weighted.
- bipartite graph 140 may be stored in an external storage device accessible from system 100 .
- the bipartite graph 140 may be distributed across multiple storage devices and/or multiple computing devices, for example multiple servers. In such a distributed graph the system may use MapReduce or a similar model for performing computations on the graph.
- the graph system 100 can include one or more processors (e.g., silicon-based hardware processors) configured to execute one or more machine executable instructions or pieces of software, firmware, or a combination thereof.
- the graph system 100 can also include an operating system and one or more computer memories, for example, a main memory, configured to store one or more pieces of data, either temporarily, permanently, semi-permanently, or a combination thereof.
- the memory may include any type of storage device that stores information in a format that can be read and/or executed by the one or more processors.
- the memory may include volatile memory, non-volatile memory, or a combination thereof, and store modules that, when executed by the one or more processors, perform certain operations. In some implementations, the modules may be stored in an external storage device and loaded into the memory of system 100 .
- the modules may include a similarity ranking engine 110 .
- the similarity ranking engine 110 may oversee the creation of weighted category subgraphs 150 and the generation of responses to queries.
- the similarity ranking engine 110 may include a reduction engine 112 .
- the reduction engine 112 may operate in an off-line or batch mode to generate the weighted category subgraphs 150 from the bipartite graph 140 .
- the reduction engine 112 may take as input the bipartite graph 140 and generate as output a subgraph 150 for each category in the set of categories C.
- the reduction engine 112 may generate one subgraph for each market segment.
- the reduction engine 112 may be configured to output one set of weighted category subgraphs 150 for each of a number of similarity metrics.
- the reduction engine 112 may include various versions and the version invoked determines the similarity metric used to generate the subgraphs 150 .
- weighted category subgraphs 150 may include multiple versions of subgraphs 150 , one for each similarity metric.
- subgraphs 150 may include one set of subgraphs for a Neighborhood Intersection similarity metric and another set of subgraphs for a Personalized PageRank similarity metric, as one example. Both sets may be generated from the same input, e.g., bipartite graph 140 .
- the weighted category subgraphs 150 are graphs generated by a reduction operation on bipartite graph 140 .
- Subgraphs 150 include nodes of one type from the bipartite graph 140 .
- subgraphs 150 may include only actor nodes.
- each subgraph may be for actor nodes connected to common item nodes assigned to one specific category.
- actor nodes included in a subgraph for a particular category are connected in the bipartite graph to at least one item node that is assigned to the category.
- the subgraph may be generated using large scale computations in MapReduce due to the size of the bipartite graph.
- An edge connecting two actor nodes in the subgraph indicate that the two actor nodes were connected to the same item node in the bipartite graph.
- the system assigns a weight to the edge based on a similarity function.
- the similarity function is determined based on the similarity metric.
- the subgraphs may be generated such that a similarity function computed on the bipartite graph G, e.g., sim( ), and a new similarity function computed on the subgraphs, e.g., sim*( ) produce the same results.
- sim x (y, G) sim x *(y, ⁇ ).
- a similarity ranking is obtained by sorting in decreasing order of sim a ( ⁇ , G) the nodes on the A side.
- the weighted category subgraphs 150 may be stored in non-volatile memory so that they may be subsequently accessed and used to calculate a similarity ranking for a particular node in response to a query.
- the similarity ranking engine 110 may also include an aggregation engine 114 .
- the aggregation engine 114 may aggregate one or more subgraphs to determine actor nodes in the bipartite graph 140 that are similar to a given actor node.
- the aggregation engine 114 may also take as input a similarity metric to be used and may select a set of subgraphs corresponding to the similarity metric.
- the aggregation engine 114 may include various versions, one for each similarity metric and the version invoked determines the similarity metric used.
- the similarity ranking engine 110 may also include a search engine (not shown).
- the search engine may receive queries, identify an actor node and one or more categories from the query and use the aggregation engine 114 to determine actor nodes most similar to the actor node from the query within the provided categories.
- the search engine may use the most similar nodes in generating a search result from the bipartite graph 140 . For example, if an actor node b is found to be similar to the actor node a identified in a query, the search engine may find item nodes from the bipartite graph that are related to b and not a and suggest those items for a in a search result.
- the search engine may provide the search result to another search engine or other module for combination with search results from other sources.
- Graph system 100 may be in communication with client(s) 180 over network 160 .
- Clients 180 may allow a user to submit queries to the similarity ranking engine 110 , to maintain bipartite graph 140 , to schedule creation of weighted category subgraphs 150 , etc.
- Network 160 may be, for example, the Internet, or the network 160 can be a wired or wireless local area network (LAN), wide area network (WAN), etc., implemented using, for example, gateway devices, bridges, switches, and/or so forth.
- the graph system 100 may communicate with and transmit data to/from clients 180 .
- graph system 100 may be in communication with or include other computing devices that provide updates to the bipartite graph 140 .
- graph system 100 may include or be in communication with a computing device that generates entries for bipartite graph 140 from, for example, search records.
- the graph system 100 represents one example configuration and implementations may incorporate other configurations.
- elements of the similarity ranking engine 110 may be distributed across different computing devices.
- the elements of the similarity ranking engine 110 may be distributed across a client computing device and one or more servers that store the bipartite graph 140 .
- FIG. 2 illustrates a flow diagram of an example process 200 for efficiently determining similarity rankings in a large bipartite graph, in accordance with an implementation.
- Process 200 may be performed by a graph system, such as system 100 of FIG. 1 .
- Process 200 may include two operations. The first operation, a reduction operation, may be performed in an off-line or batch manner to generate the weighted category subgraphs.
- Steps 205 to 215 represent the reduction operation.
- the system may perform a second operation, an aggregation operation, in real-time to generate similarity rankings for actor nodes in response to a query.
- Steps 220 to 230 represent the aggregation operation. While the operations are independent of each other, the system must have performed the reduction operation at least once before the system may perform the aggregation operation.
- the system performs process 200 on a bipartite graph that has a first set of nodes (e.g., actor nodes) and a second set of nodes (e.g., item nodes).
- nodes in the first set are labeled actor nodes and nodes in the second set are labeled item nodes for ease of discussion, and process 200 is not limited to nodes characterized in this particular manner.
- Process 200 begins with the system partitioning the item nodes into a set of disjoint categories ( 205 ). In other words, each node in the item nodes is assigned to one of a plurality of categories. Assignment may be performed via an attribute of the item node, or by a labeling function defined on the item nodes, for example.
- the system may then select a category from among the plurality of categories and generate a subgraph for the category, the subgraph including actor nodes only ( 210 ).
- Actor nodes included in the subgraph are actor nodes that are connected in the bipartite graph to item nodes assigned to the category.
- An actor node that is connected in the subgraph to another actor node represents the fact that both actor nodes are connected in the bipartite graph to the same item node.
- the weight of the edge between the two nodes in the subgraph represents a result from a similarity function for the nodes.
- the system may repeat the generation of a subgraph for each category in the plurality of categories.
- the output of step 210 is a set of subgraphs, one for each category.
- the system may store the generated subgraphs ( 215 ) in a non-volatile memory for later access.
- the subgraphs may be stored on separate computing devices, or on logical partitions of a computing device, especially when the bipartite graph is very large.
- Steps 205 to 215 may be repeated periodically, for example daily or weekly, to account for changes to the bipartite graph.
- the reduction operation may be performed as a last step in a batch process that adds additional nodes to the bipartite graph. For example, a process may extract information from search records to generate additional item nodes and connections between the nodes, and the reduction operation may be performed after such modifications are made.
- the system may receive a query that includes an indication of a particular actor node and one or more categories ( 220 ).
- the system may generate similarity rankings for other actor nodes.
- the query may be a request to compute similarity rankings for the particular actor node within specified categories.
- the system may generate the similarity rankings by aggregating the subgraphs that correspond to the categories indicated in the query ( 225 ).
- a similarity ranking is a value assigned to one of the actor nodes that is not the actor node indicated in the query. The value represents a similarity metric between the two nodes based on the given parameters (e.g., the categories specified in the query).
- the similarity metric is the same metric used to generate the subgraphs.
- the system may provide the similarity rankings for the other actor nodes ( 230 ) as a response to the query.
- the similarity rankings may be used by another process to generate a search result.
- the rankings themselves may be provided as the result. Steps 220 to 230 may be repeated as needed to respond to queries.
- the graph 300 includes actor nodes a-e and item nodes 1 - 5 .
- the item nodes are assigned to one of three categories. For example, item nodes 1 and 2 are assigned to category 305 , item node 3 is assigned to category 310 , and item nodes 4 and 5 are assigned to category 315 .
- three subgraphs are generated. Each subgraph corresponds to one of the three categories.
- FIG. 4 illustrates the three subgraphs generated by the system.
- Subgraph 405 corresponds to category 305 and includes actor nodes a, b, and d because these actor nodes are connected in graph 300 to item nodes 1 and/or 2 , which are assigned to category 305 .
- Subgraph 410 corresponds to category 310 and includes actor nodes a, b, and c because these nodes are connected to item node 3 in the graph 300 .
- Subgraph 415 corresponds to category 315 and includes actor nodes b, c, d, and e because these nodes are connected to item nodes 4 and/or 5 in the graph 300 , and item nodes 4 and 5 are assigned to category 315 .
- Nodes a and d are connected to each other in subgraph 405 because both connect to item node 1 in graph 300 .
- Actor nodes b and d are connected to each other because each is connected to item node 2 in the graph 300 .
- Actor nodes a and b are not connected in subgraph 305 by an edge because a and b do not share a common item node that is assigned to category 305 .
- nodes b and c are not connected by an edge because they do not share an item node assigned to category 315 in graph 300 .
- Actor nodes b and c are connected in subgraph 410 because each is connected to node 3 , which is assigned to category 310 .
- edges in the subgraphs are weighted edges.
- the value of the edge is dependent on the similarity metric used to generate the subgraph. Any of various known similarity metrics may be used. Examples of five similarity metrics are presented below. Given these examples, implementations may be modified to accommodate other similarity metrics in a similar manner.
- FIG. 5 illustrates the subgraph 405 when generated using various similarity metrics.
- Subgraph 405 (A) represents a common neighbors weighted subgraph, which can be used with a Neighbor Intersection similarity metric or a Katz similarity metric.
- the weight of the edges in subgraph 405 (A) represents the quantity of item nodes in category 305 that are common to the two actor nodes linked by the edge. Thus, because actor nodes a and d are both linked to item node 2 , the weight of the edge between a and d in subgraph 405 (A) is 1. Similarly, the weight of the edge between b and d in subgraph 405 (A) is 1 because each is linked to item node 1 in graph 300 .
- where N(x) is the neighborhood of x in the bipartite graph G (e.g., N(x) ⁇ b ⁇ B: (x, b) ⁇ E ⁇ .
- the system adds the weighted edges that connect two nodes in the various subgraphs. This can be represented by
- G′ G[A ⁇ C′ 1 ⁇ . . . ⁇ C′ c ]
- G i G[A ⁇ C i ]
- ⁇ i is the graph obtained by running the reduction operation on G i .
- P G (x, y, l) defined as the set of distinct paths of length l between x and y in graph G.
- the system may limit similarity to path lengths of 4 (e.g., ⁇ 4 ) because computation of paths of infinite length is impractical. Paths of length 2 are always in a single subgraph. But path lengths of 4 are not necessarily within one category (e.g., one subgraph, represented by ⁇ i ). For example, node e of graph 300 in FIG. 3 is connected to node c by a path length of 4, but the path from e to b falls in category 315 and the path from b to c falls in category 310 .
- the system split the length 4 paths into intra-category paths (e.g., path from a to b via d in category 305 ) and inter-category paths (e.g., path from c to e via d).
- intra-category paths e.g., path from a to b via d in category 305
- inter-category paths e.g., path from c to e via d.
- KATZ ⁇ , x * ⁇ ( y ) ⁇ 2 ⁇ ⁇ C i ⁇ D ⁇ ⁇ w G ⁇ i ⁇ ( x , y ) ⁇ ⁇ ( Part ⁇ ⁇ 1 ) + ⁇ 4 ⁇ ⁇ C i ⁇ D ⁇ ( ⁇ p ⁇ P G ⁇ i ⁇ ( x , y , 2 ) ⁇ ( ⁇ e ⁇ p ⁇ ⁇ w ⁇ ( e ) ) ) ⁇ ⁇ ( Part ⁇ ⁇ 2 ) + ⁇ 4 ⁇ ⁇ C i , C i ⁇ D , C i ⁇ C j ⁇ ( ⁇ z ⁇ A ⁇ w G ⁇ i ⁇ ( x , z ) ⁇ w G ⁇ j ⁇ ( z , y ) ) ⁇ ⁇ ( Part ⁇ ⁇ 3 ) for actor nodes x and y.
- Subgraph 405 (B) represents a weighted subgraph for a Jaccard coefficient similarity metric.
- a Jaccard coefficient is defined as the ratio between the intersection of the neighborhood of node x, and node y and the union of the neighborhoods.
- the weight of an edge in subgraph 405 (B) includes a first component and a second component.
- the first component is the weight for the number of common neighbors, described above with regard to subgraph 405 (A).
- the second component represents the quantity of item nodes in the union of the neighborhoods of the actor nodes. In other words, the total number of item nodes assigned to category 305 that either actor node links to in the bipartite graph.
- subgraph 405 (B) has ⁇ 1,2 ⁇ as the weight between actor nodes a and d.
- the first component, 1, represents the neighbor intersection
- the second component, 2 represents the neighbor union.
- 2 is the second component between a and d because a and d link to item node 2 in the graph 300 , but d also links to item node 1 .
- the new similarity measure can be defined as
- Jac x * ⁇ ( y ) ⁇ w ⁇ ( x , y ) ⁇ ⁇ w ⁇ ( x , y ) ⁇
- the aggregation operation for a Jaccard coefficient may be implemented in two steps.
- the system may, in the first step, sum the first components of the edges between nodes x and y from the desired subgraphs.
- the system may divide the sum of the first components by the sum of the second components. The result of the division is the value that represents the similarity ranking for node y given node x.
- Subgraph 405 (C) represents a weighted subgraph for an Adamic-Adar similarity metric.
- the Adamic-Adar similarity can be described as
- AA x ⁇ ( y ) ⁇ z ⁇ N ⁇ ( x ) ⁇ N ⁇ ( y ) ⁇ 1 log ⁇ ⁇ N ⁇ ( z ) ⁇
- the weight of an edge connecting two actor nodes in an Adamic-Adar similarity subgraph is equal to the sum of the inverse logarithm of the number of edges leading out of the common item nodes in the bipartite graph.
- nodes a and d share one common neighbor, item node 1 .
- Item node 1 has two edges, making the weight of the edge between a and d
- the aggregation operation for Adamic-Adar similarity metric is the sum of the weighted edges between two given nodes.
- FIG. 6 illustrates a weighted bipartite graph 300 ′. As illustrated, each edge between the actor nodes and the item nodes has a weight w. In some implementations, all edges may have the same weight, for example a weight of 1.
- Subgraph 405 (D) of FIG. 6 represents a weighted subgraph for a Personalized PageRank similarity (PPR).
- PPR Personalized PageRank similarity
- the walk starts at node x. At each step, if the walk is in node n, with probability ⁇ it jumps to node x, otherwise it moves to z ⁇ N(n) with the ordinary random walk transition probability
- the weight of the edge in the subgraph 405 (D) thus represents the 2-step ordinary random walk transition probabilities. This may be represented by
- w ⁇ ( x , y ) ⁇ z ⁇ N ⁇ ( x ) ⁇ N ⁇ ( y ) ⁇ p ⁇ ( x , z ) ⁇ p ⁇ ( z , y )
- the weight is the sum of the probability of getting from actor node x to actor node y through item node z.
- the weights of the edges between x and z and between y and z in the bipartite graph affect this probability.
- the weight of the edge between actor node a in graph 300 ′ and item node 1 is 1.
- Actor node a also has a weighted edge of 5 to item node 3 .
- the probability of getting from a to 1 (e.g., p(a,1)) is
- the 2-step ordinary random walk transition probability for going from a to d is 0.1667*0.5 or 0.0833. Because node 1 is the only node in the intersection of nodes a and d, the weight of the edge in the subgraph 405 (D) between a and d is 0.0833. The probability of getting from b to node 2 in graph 300 ′ is
- the 2-step ordinary random walk transition probability for going from b to d is 0.5*0.1538 or 0.0769, and this is the weight of the edge between b and d in subgraph 405 (D).
- the new similarity function for the PPR subgraphs can be expressed as
- PPR ⁇ , x * 1 2 - ⁇ ⁇ PPR ⁇ ( G ⁇ , 2 ⁇ ⁇ - ⁇ 2 , x ) because in a 2-step PPR walk the probability of not jumping is (1 ⁇ 2 ) and the probability of restarting is 2 ⁇ 2 .
- the PPR stationary distribution conditioned on the fact that the random walk is on a node in the A (or actor) nodes is PPR( ⁇ , 2 ⁇ 2 , x) and to get to the correct distribution the system can multiply this distribution by the probability of always being in the A side, or
- the system may use an iterative method that alternates a step of one on the entire graph and a step on the subgraph.
- the iterative method works because we have the random walk stationary distributions on the subgraphs.
- the definition of the aggregation operation for the PPR similarity metric benefits from additional information on the structure of the bipartite graph.
- the system may also define for any given x ⁇ A and category C i ⁇ C, let F(x, C i , C j ) be the probability of reaching any node in C j , after performing a 3-step standard random walk, in the bipartite graph G (A ⁇ B, E), starting from the node x and conditioned to the fact that the first step ends in a node in C i .
- the definition of the aggregation operation for PPR similarity may build on the iterative aggregation-disaggregation algorithm of Koury et al, “Iterative methods for computing stationary distributions of nearly completely decomposable markov chains,” SIAM Journal on Algebraic Discrete Methods, 5(2):164-186, 1984.
- This operation can repeated an arbitrary quantity of times (after applying at the end of each step some simple matrix operations to avoid the algorithm from being trapped in fixed point) and under certain assumptions on the Markov chain described in details in Koury et al., the algorithm converges in the limit to the exact stationary distribution.
- the system cannot apply directly the results in the Markov chain state aggregation theory (see, for example, Meyer, “Stochastic complementation, uncoupling Markov chains, and the theory of nearly reducible systems,” SIAM review, 31(2):240-272, 1989) as they rely on the disjointness of the sets of states aggregated.
- the aggregate operation is implemented as a real-time algorithm, which means that all the computations depending on the actual classes C′ 1 , . . . , C′ c aggregated, which are only known at the run-time, must be as efficient as possible.
- the system thus defines the aggregation operation for PPR similarity to addresses both issues.
- the input of the aggregation operation is the node a from a query.
- the system may have precomputed F( ⁇ ) values and U( ⁇ ) values for the subgraphs and adjacency lists of the subgraphs.
- the system may perform iteration of the aggregate operation.
- Each iteration of the aggregate operation may proceed as follows:
- T ij ( 2 ⁇ ⁇ - ⁇ 2 ) ⁇ U a ⁇ ( C j ′ ) ⁇ C k ′ ⁇ D ⁇ U a ⁇ ( C k ′ ) + ( 1 - ⁇ ) 2 ⁇ ⁇ x ⁇ A ⁇ ⁇ i ⁇ ⁇ ( x ) ⁇ F ⁇ ( x , C i ′ , C j ′ ) ⁇ C k ′ ⁇ D ⁇ F ⁇ ( x , C i ′ , C k ′ ) :
- Equation (2) the system uses the last ⁇ i vectors to compute the approximation ⁇ i of the stationary distribution using the equations:
- FIG. 7 shows an example of a generic computer device 700 , which may be operated as system 100 , and/or client 170 of FIG. 1 , which may be used with the techniques described here.
- Computing device 700 is intended to represent various example forms of computing devices, such as laptops, desktops, workstations, personal digital assistants, cellular telephones, smart phones, tablets, servers, and other computing devices, including wearable devices.
- the components shown here, their connections and relationships, and their functions, are meant to be examples only, and are not meant to limit implementations of the inventions described and/or claimed in this document.
- Computing device 700 includes a processor 702 , e.g., a silicone-based hardware processor, memory 704 , a storage device 706 , and expansion ports 710 connected via an interface 708 .
- computing device 700 may include transceiver 746 , communication interface 744 , and a GPS (Global Positioning System) receiver module 748 , among other components, connected via interface 708 .
- Device 700 may communicate wirelessly through communication interface 744 , which may include digital signal processing circuitry where necessary.
- Each of the components 702 , 704 , 706 , 708 , 710 , 740 , 744 , 746 , and 748 may be mounted on a common motherboard or in other manners as appropriate.
- the processor 702 can process instructions for execution within the computing device 700 , including instructions stored in the memory 704 or on the storage device 706 to display graphical information for a GUI on an external input/output device, such as display 716 .
- Display 716 may be a monitor or a flat touchscreen display.
- multiple processors and/or multiple buses may be used, as appropriate, along with multiple memories and types of memory.
- multiple computing devices 700 may be connected, with each device providing portions of the necessary operations (e.g., as a server bank, a group of blade servers, or a multi-processor system).
- the memory 704 stores information within the computing device 700 .
- the memory 704 is a volatile memory unit or units.
- the memory 704 is a non-volatile memory unit or units.
- the memory 704 may also be another form of computer-readable medium, such as a magnetic or optical disk.
- the memory 704 may include expansion memory provided through an expansion interface.
- the storage device 706 is capable of providing mass storage for the computing device 700 .
- the storage device 706 may be or include a computer-readable medium, such as a floppy disk device, a hard disk device, an optical disk device, or a tape device, a flash memory or other similar solid state memory device, or an array of devices, including devices in a storage area network or other configurations.
- a computer program product can be tangibly embodied in such a computer-readable medium.
- the computer program product may also include instructions that, when executed, perform one or more methods, such as those described above.
- the computer- or machine-readable medium is a storage device such as the memory 704 , the storage device 706 , or memory on processor 702 .
- the interface 708 may be a high speed controller that manages bandwidth-intensive operations for the computing device 700 or a low speed controller that manages lower bandwidth-intensive operations, or a combination of such controllers.
- An external interface 740 may be provided so as to enable near area communication of device 700 with other devices.
- controller 708 may be coupled to storage device 706 and expansion port 714 .
- the expansion port which may include various communication ports (e.g., USB, Bluetooth, Ethernet, wireless Ethernet) may be coupled to one or more input/output devices, such as a keyboard, a pointing device, a scanner, or a networking device such as a switch or router, e.g., through a network adapter.
- the computing device 700 may be implemented in a number of different forms, as shown in the figure. For example, it may be implemented as a standard server 730 , or multiple times in a group of such servers. It may also be implemented as part of a rack server system. In addition, it may be implemented in a personal computer such as a laptop computer 722 , or smart phone 736 . An entire system may be made up of multiple computing devices 700 communicating with each other. Other configurations are possible.
- FIG. 8 shows an example of a generic computer device 800 , which may be system 100 of FIG. 1 , which may be used with the techniques described here.
- Computing device 800 is intended to represent various example forms of large-scale data processing devices, such as servers, blade servers, datacenters, mainframes, and other large-scale computing devices.
- Computing device 800 may be a distributed system having multiple processors, possibly including network attached storage nodes, that are interconnected by one or more communication networks.
- the components shown here, their connections and relationships, and their functions, are meant to be examples only, and are not meant to limit implementations of the inventions described and/or claimed in this document.
- Distributed computing system 800 may include any number of computing devices 880 .
- Computing devices 880 may include a server or rack servers, mainframes, etc. communicating over a local or wide-area network, dedicated optical links, modems, bridges, routers, switches, wired or wireless networks, etc.
- each computing device may include multiple racks.
- computing device 880 a includes multiple racks 858 a - 858 n .
- Each rack may include one or more processors, such as processors 852 a - 852 n and 862 a - 862 n .
- the processors may include data processors, network attached storage devices, and other computer controlled devices.
- one processor may operate as a master processor and control the scheduling and data distribution tasks.
- Processors may be interconnected through one or more rack switches 858 , and one or more racks may be connected through switch 878 .
- Switch 878 may handle communications between multiple connected computing devices 800 .
- Each rack may include memory, such as memory 854 and memory 864 , and storage, such as 856 and 866 .
- Storage 856 and 866 may provide mass storage and may include volatile or non-volatile storage, such as network-attached disks, floppy disks, hard disks, optical disks, tapes, flash memory or other similar solid state memory devices, or an array of devices, including devices in a storage area network or other configurations.
- Storage 856 or 866 may be shared between multiple processors, multiple racks, or multiple computing devices and may include a computer-readable medium storing instructions executable by one or more of the processors.
- Memory 854 and 864 may include, e.g., volatile memory unit or units, a non-volatile memory unit or units, and/or other forms of computer-readable media, such as a magnetic or optical disks, flash memory, cache, Random Access Memory (RAM), Read Only Memory (ROM), and combinations thereof. Memory, such as memory 854 may also be shared between processors 852 a - 852 n . Data structures, such as an index, may be stored, for example, across storage 856 and memory 854 . Computing device 800 may include other components not shown, such as controllers, buses, input/output devices, communications modules, etc.
- An entire system such as system 100 , may be made up of multiple computing devices 800 communicating with each other.
- device 880 a may communicate with devices 880 b , 880 c , and 880 d , and these may collectively be known as system 100 .
- system 100 of FIG. 1 may include one or more computing devices 800 . Some of the computing devices may be located geographically close to each other, and others may be located geographically distant.
- the layout of system 800 is an example only and the system may take on other layouts or configurations.
- a computer system includes at least one processor and memory storing a bipartite graph having a first set of nodes and a second set of nodes, nodes in the first set being connected to nodes in the second set by edges.
- the memory also stores instructions that, when executed by the at least one processor, cause the system to assign each node in the second set to one of a plurality of categories and, for each of the plurality of categories, generate a subgraph.
- the subgraph may include a subset of nodes in the first set and edges linking the nodes in the subset, where the nodes in the subset are selected based on connection to a node in the second set that is assigned to the category.
- the system may store the subgraph in the memory.
- the edges in the subgraphs between the nodes in the subset may be weighted, the weights being based on a similarity metric.
- the memory may further store instructions that, when executed by the at least one processor, cause the system to receive a query including a particular node in the first set of nodes and a first category of the plurality of categories and a second category of the plurality of categories, calculate similarity rankings for at least some nodes in the first set other than the particular node by applying an aggregation function to the subgraph for the first category and the subgraph for the second category, the aggregation function being based on the similarity metric, and provide the similarity rankings in response to the query.
- calculating the similarity ranking for a certain node in the first set other than the particular node can include determining that the particular node is linked to the certain node in the subgraph for the first category by a first edge having a first weight, determining that the particular node is linked to the certain node in the subgraph for the second category by a second edge having a second weight, and combining the first weight and the second weight according to the aggregation function to calculate the similarity ranking for the certain node.
- the first weight and the second weight may each represent a quantity of common neighbors in the bipartite graph between the particular node and the certain node and combining the first weight and the second weight may be achieved by adding the first weight and the second weight.
- the similarity metric is a Jaccard coefficient and the first weight and the second weight include a first component representing a quantity of common neighbors in the bipartite graph between the particular node and the certain node, and a second component representing a quantity of nodes in a union of a neighborhood of the particular node and the certain node.
- Combining the first weight and the second weight in such an implementation may include dividing a sum of the first components by a sum of the second components.
- the similarity metric is an Adamic-Adar similarity and the first weight and the second weight represents a sum of, for each common neighbor of the particular node and the certain node in the bipartite graph, an inverse of a logarithm of a quantity of edges connecting the common neighbor, and combining the first weight with the second weight includes adding the first weight to the second weight.
- the bipartite graph is a weighted bipartite graph and the similarity metric is Personalized PageRank and the first weight represents an ordinary random walk transition probability from the particular node to the certain node in the weighted bipartite graph.
- an edge linking a first node in the subset and a second node in the subset indicates the first node and the second node each connect to a particular node in the second set in the bipartite graph.
- a method in another aspect, includes determining, using at least one processor, that a first node in a first set of nodes in a bipartite graph is linked to a second node in a second set of nodes in the bipartite graph, determining, using the at least one processor, that a third node in the first set of nodes is linked to the second node in the bipartite graph, and generating, in a subgraph, a link between the first node and the third node, the link having a weight determined by a similarity metric.
- the method also includes repeating the determining and generating for other nodes in the first set of nodes, so that the subgraph includes nodes in the first set linked to each other and storing the subgraph in a memory.
- the method may also include receiving a query identifying a particular node in the first set, calculating a similarity ranking for respective nodes in the subgraph linked to the particular node, the similarity ranking being based on the weight of the link between the particular node and the respective node, and providing the similarity rankings as a response to the query.
- the second node may be assigned to a first category of a plurality of categories, the subgraph being a first subgraph and including nodes in the first set linked to nodes in the second set that are assigned to the first category, and the method may include determining that the first node is linked to a fourth node in the second set of nodes in the bipartite graph, the fourth node being assigned to a second category of the plurality of categories, determining that a fifth node in the first set of nodes is linked to the fourth node in the bipartite graph, and generating, in a second subgraph, a link between the first node and the fifth node, the link having a weight determined by the similarity metric.
- the method may further include repeating the determining and generating so that each category in the plurality of categories has an associated subgraph and storing the associated subgraphs in the memory.
- the method may also include receiving a query identifying a particular node in the first set and at least the first category and the second category, calculating a similarity ranking for each node in the first subgraph and in the second subgraph that is connected to the particular node by aggregating the subgraph associated with the first category with the subgraph associated with the second category on the particular node, the aggregation being based on the similarity metric, and providing the similarity rankings as a response to the query.
- a method in another aspect, includes storing a bipartite graph comprising a first set of nodes and a second set of nodes, the first set and the second set being disjoint sets and, prior to receiving a query, generating subgraphs of the bipartite graph comprising nodes of the first set such that a similarity function computed on the bipartite graph would have the same result as a similarity function computed on the subgraphs.
- the method may also include receiving the query, which identifies a particular node from the first set of nodes, aggregating two or more of the subgraphs to determine other first nodes most similar to the particular first node, and using one or more of the other first nodes for responding to the query.
- the bipartite graph may be distributed among multiple computing devices.
- each of the subgraphs may include weighted edges, the weight of the edge being based on a similarity metric corresponding to the similarity function.
- aggregating the two or more subgraphs generates a similarity ranking for each of the other nodes and the method may also include sorting the other nodes by descending similarity ranking and providing a quantity of other nodes in sorted order as the response.
- the subgraphs include edges between pairs of nodes in the first set that have a common neighbor node from the second set.
- the similarity metric may be a neighbor intersection metric, a Jaccard coefficient metric, an Adamic-Adar metric, a Katz metric, or a Personal PageRank metric.
- generating the subgraphs can include partitioning the nodes in the second set into a set of disjoint categories and generating a subgraph for each of the disjoint categories, so that for a particular category in the set of the disjoint categories, edges in a subgraph for the particular category are based on edges between pairs of nodes in the first set that have a common neighbor node from the second set, the common neighbor node being partitioned into the particular category.
- the query may identify at least two categories from the disjoint categories, and aggregating the two or more subgraphs includes aggregating subgraphs that correspond to the at least two categories.
- Various implementations can include implementation in one or more computer programs that are executable and/or interpretable on a programmable system including at least one programmable processor, which may be special or general purpose, coupled to receive data and instructions from, and to transmit data and instructions to, a storage system, at least one input device, and at least one output device.
- a programmable processor which may be special or general purpose, coupled to receive data and instructions from, and to transmit data and instructions to, a storage system, at least one input device, and at least one output device.
- the systems and techniques described here can be implemented in a computing system that includes a back end component (e.g., as a data server), or that includes a middleware component (e.g., an application server), or that includes a front end component (e.g., a client computer having a graphical user interface or a Web browser through which a user can interact with an implementation of the systems and techniques described here), or any combination of such back end, middleware, or front end components.
- the components of the system can be interconnected by any form or medium of digital data communication (e.g., a communication network). Examples of communication networks include a local area network (“LAN”), a wide area network (“WAN”), and the Internet.
- LAN local area network
- WAN wide area network
- the Internet the global information network
- the computing system can include clients and servers.
- a client and server are generally remote from each other and typically interact through a communication network.
- the relationship of client and server arises by virtue of computer programs running on the respective computers and having a client-server relationship to each other.
Abstract
Description
where G′=G[A∪C′1∪ . . . ∪C′c], Gi=G[A∪Ci] and Ĝi is the graph obtained by running the reduction operation on Gi.
with PG (x, y, l) defined as the set of distinct paths of length l between x and y in graph G. Because the length of any path between any two actor nodes is always even in a bipartite graph, the common neighbor weight represents paths with a length of 2. Furthermore, because all paths between actor nodes are even, the new similarity measure can be defined as
for actor nodes x and y.
in the bipartite graph G. Accordingly, the weight of an edge in subgraph 405(B) includes a first component and a second component. The first component is the weight for the number of common neighbors, described above with regard to subgraph 405(A). The second component represents the quantity of item nodes in the union of the neighborhoods of the actor nodes. In other words, the total number of item nodes assigned to
or 3.322. With the weight of the edge calculated this way, the new similarity function for the subgraph then becomes AAx*=w(x, y). The aggregation operation for Adamic-Adar similarity metric is the sum of the weighted edges between two given nodes. Thus, for example, adding the edges connecting node x and node y in various subgraphs provides the similarity ranking for node y with regard to node x.
The weight of the edge in the subgraph 405(D) thus represents the 2-step ordinary random walk transition probabilities. This may be represented by
or 0.1667. The probability of getting from item node 1 to actor node d (e.g., p(1, d)) is
or 0.5. Thus, the 2-step ordinary random walk transition probability for going from a to d is 0.1667*0.5 or 0.0833. Because node 1 is the only node in the intersection of nodes a and d, the weight of the edge in the subgraph 405(D) between a and d is 0.0833. The probability of getting from b to node 2 in
or 0.1538 while the probability of getting from item node 2 to actor node d is
or 0.5. Thus, the 2-step ordinary random walk transition probability for going from b to d is 0.5*0.1538 or 0.0769, and this is the weight of the edge between b and d in subgraph 405(D). The new similarity function for the PPR subgraphs can be expressed as
because in a 2-step PPR walk the probability of not jumping is (1−α2) and the probability of restarting is 2α−α2. Hence, the PPR stationary distribution conditioned on the fact that the random walk is on a node in the A (or actor) nodes is PPR(Ĝ, 2α−α2, x) and to get to the correct distribution the system can multiply this distribution by the probability of always being in the A side, or
in a bipartite graph.
-
- Compute the c×c transition matrix T using the equation
-
- Compute the stationary distribution t=(t1, . . . , tc) of the matrix T.
- For each C′j∈D compute,
-
- where 1a is a vector with all zeros except a 1 in position a (the size is assumed by the context), Ĝj(x) is the vector representing the row of node x in the adjacency matrix of the reduced graph Ĝj and e is a vector with all ones.
Claims (20)
Priority Applications (1)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US14/278,811 US10152557B2 (en) | 2014-01-31 | 2014-05-15 | Efficient similarity ranking for bipartite graphs |
Applications Claiming Priority (2)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US201461934440P | 2014-01-31 | 2014-01-31 | |
US14/278,811 US10152557B2 (en) | 2014-01-31 | 2014-05-15 | Efficient similarity ranking for bipartite graphs |
Publications (2)
Publication Number | Publication Date |
---|---|
US20150220530A1 US20150220530A1 (en) | 2015-08-06 |
US10152557B2 true US10152557B2 (en) | 2018-12-11 |
Family
ID=53754978
Family Applications (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
US14/278,811 Active 2036-09-14 US10152557B2 (en) | 2014-01-31 | 2014-05-15 | Efficient similarity ranking for bipartite graphs |
Country Status (1)
Country | Link |
---|---|
US (1) | US10152557B2 (en) |
Cited By (7)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20180268244A1 (en) * | 2017-03-14 | 2018-09-20 | Samsung Electronics Co., Ltd. | System and method for deep labeling |
US10521445B2 (en) * | 2017-06-01 | 2019-12-31 | Fuji Xerox Co., Ltd. | System for visually exploring coordinated relationships in data |
US20200265270A1 (en) * | 2019-02-20 | 2020-08-20 | Caseware International Inc. | Mutual neighbors |
US10963301B2 (en) * | 2019-07-17 | 2021-03-30 | Google Llc | Scheduling operations on a computation graph |
US11500936B2 (en) * | 2018-08-07 | 2022-11-15 | Walmart Apollo, Llc | System and method for structure and attribute based graph partitioning |
US11704680B2 (en) | 2020-08-13 | 2023-07-18 | Oracle International Corporation | Detecting fraudulent user accounts using graphs |
US11895134B2 (en) | 2021-04-12 | 2024-02-06 | Sap Se | Securing applications through similarity-based risk assessment |
Families Citing this family (25)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US9886705B2 (en) * | 2014-09-26 | 2018-02-06 | Exaclibur Ip, Llc | Advertisement opportunity bidding |
US10353912B2 (en) | 2014-10-10 | 2019-07-16 | Salesforce.Com, Inc. | Navigation of a data extraction graph of data and metadata from a data repository |
US10255358B2 (en) * | 2014-12-30 | 2019-04-09 | Facebook, Inc. | Systems and methods for clustering items associated with interactions |
US10796319B2 (en) | 2015-04-07 | 2020-10-06 | International Business Machines Corporation | Rating aggregation and propagation mechanism for hierarchical services and products |
US10713579B2 (en) * | 2015-05-08 | 2020-07-14 | Nec Corporation | Weighted similarity estimation in data streams with applications to collaborative filtering and viral marketing |
US10025799B2 (en) * | 2015-07-22 | 2018-07-17 | International Business Machines Corporation | Access and presentation of files based on semantic proximity to current interests |
GB2545931A (en) * | 2015-12-31 | 2017-07-05 | Francis Murphy Dominic | Defining edges and their weights between nodes in a network |
CN105825237B (en) * | 2016-03-21 | 2019-03-01 | 山东联科云计算股份有限公司 | A kind of similar querying method of subgraph estimated based on figure |
US9558265B1 (en) * | 2016-05-12 | 2017-01-31 | Quid, Inc. | Facilitating targeted analysis via graph generation based on an influencing parameter |
US10467229B2 (en) | 2016-09-30 | 2019-11-05 | Microsoft Technology Licensing, Llc. | Query-time analytics on graph queries spanning subgraphs |
US10545945B2 (en) | 2016-10-28 | 2020-01-28 | Microsoft Technology Licensing, Llc | Change monitoring spanning graph queries |
US10445361B2 (en) * | 2016-12-15 | 2019-10-15 | Microsoft Technology Licensing, Llc | Caching of subgraphs and integration of cached subgraphs into graph query results |
US10402403B2 (en) | 2016-12-15 | 2019-09-03 | Microsoft Technology Licensing, Llc | Utilization of probabilistic characteristics for reduction of graph database traversals |
US10242223B2 (en) | 2017-02-27 | 2019-03-26 | Microsoft Technology Licensing, Llc | Access controlled graph query spanning |
US11194630B2 (en) * | 2017-05-30 | 2021-12-07 | Microsoft Technology Licensing, Llc | Grouped shuffling of partition vertices |
CN107665189B (en) * | 2017-06-16 | 2019-12-13 | 平安科技（深圳）有限公司 | method, terminal and equipment for extracting central word |
DE102018100423A1 (en) * | 2018-01-10 | 2019-07-11 | Dspace Digital Signal Processing And Control Engineering Gmbh | Incrementally generate an FPGA implementation with graph-based similarity search |
CN108319698B (en) * | 2018-02-02 | 2021-01-15 | 华中科技大学 | Game-based flow graph dividing method and system |
US10650559B2 (en) * | 2018-04-30 | 2020-05-12 | Robert Bosch Gmbh | Methods and systems for simplified graphical depictions of bipartite graphs |
CN109766940B (en) * | 2018-12-29 | 2024-02-02 | 北京天诚同创电气有限公司 | Method and apparatus for evaluating similarity between multiple sewage treatment systems |
CN111176838B (en) * | 2019-12-18 | 2023-12-22 | 北京百度网讯科技有限公司 | Method and device for distributing embedded vector to node in bipartite graph |
US11507996B1 (en) * | 2020-01-09 | 2022-11-22 | Amazon Technologies, Inc. | Catalog item selection based on visual similarity |
US20230004977A1 (en) * | 2021-06-30 | 2023-01-05 | Oracle International Corporation | Exploiting graph structure to improve results of entity resolution |
CN114095176B (en) * | 2021-10-29 | 2024-04-09 | 北京天融信网络安全技术有限公司 | Malicious domain name detection method and device |
US20230195733A1 (en) * | 2021-12-17 | 2023-06-22 | Baidu Usa Llc | Fast neural ranking on bipartite graph indices |
Citations (9)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20070239694A1 (en) * | 2006-02-27 | 2007-10-11 | Singh Ambuj K | Graph querying, graph motif mining and the discovery of clusters |
US7315973B1 (en) * | 2005-09-30 | 2008-01-01 | Unisys Corporation | Method and apparatus for choosing tests for simulation and associated algorithms and hierarchical bipartite graph data structure |
US20090063455A1 (en) * | 2007-08-30 | 2009-03-05 | Microsoft Corporation | Bipartite Graph Reinforcement Modeling to Annotate Web Images |
US20090124507A1 (en) * | 2007-05-04 | 2009-05-14 | New York University | System and method for rapid searching of highly similar protein-coding sequences using bipartite graph matching |
US20090160860A1 (en) * | 2007-12-20 | 2009-06-25 | Malcolm Slaney | Using a bipartite graph to model and derive image and text associations |
US20120323932A1 (en) * | 2011-06-20 | 2012-12-20 | Microsoft Corporation | Iterative set expansion using samples |
US20130073346A1 (en) * | 2011-09-16 | 2013-03-21 | David Chun | Identifying companies most closely related to a given company |
US8832091B1 (en) * | 2012-10-08 | 2014-09-09 | Amazon Technologies, Inc. | Graph-based semantic analysis of items |
US20140317038A1 (en) * | 2013-04-23 | 2014-10-23 | International Business Machines Corporation | Predictive and descriptive analysis on relations graphs with heterogeneous entities |
-
2014
- 2014-05-15 US US14/278,811 patent/US10152557B2/en active Active
Patent Citations (9)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US7315973B1 (en) * | 2005-09-30 | 2008-01-01 | Unisys Corporation | Method and apparatus for choosing tests for simulation and associated algorithms and hierarchical bipartite graph data structure |
US20070239694A1 (en) * | 2006-02-27 | 2007-10-11 | Singh Ambuj K | Graph querying, graph motif mining and the discovery of clusters |
US20090124507A1 (en) * | 2007-05-04 | 2009-05-14 | New York University | System and method for rapid searching of highly similar protein-coding sequences using bipartite graph matching |
US20090063455A1 (en) * | 2007-08-30 | 2009-03-05 | Microsoft Corporation | Bipartite Graph Reinforcement Modeling to Annotate Web Images |
US20090160860A1 (en) * | 2007-12-20 | 2009-06-25 | Malcolm Slaney | Using a bipartite graph to model and derive image and text associations |
US20120323932A1 (en) * | 2011-06-20 | 2012-12-20 | Microsoft Corporation | Iterative set expansion using samples |
US20130073346A1 (en) * | 2011-09-16 | 2013-03-21 | David Chun | Identifying companies most closely related to a given company |
US8832091B1 (en) * | 2012-10-08 | 2014-09-09 | Amazon Technologies, Inc. | Graph-based semantic analysis of items |
US20140317038A1 (en) * | 2013-04-23 | 2014-10-23 | International Business Machines Corporation | Predictive and descriptive analysis on relations graphs with heterogeneous entities |
Non-Patent Citations (70)
Title |
---|
"A Quick Look at Ads on Google", Google AdWords, retrieved on Feb. 27, 2014, from www.google.com/adwords, 2 pages. |
Adamic et al. "Friends and neighbors on the Web", Social networks, 2003, 20 pages. |
Adamic et al., "Friends and Neighbors on the Web", Social Networks, 2001, pp. 1-18. |
Adamic et al., "Friends and neighbors on the Web", Social Networks, 25:211-230, 2001, 18 pages. |
Adamic et al., "Friends and Neighbors on the Web", Social Networks, vol. 25, 2003, pp. 211-230. |
Anagnostopoulos et al., "Approximation Algorithms for Co-Clustering", In Proceedings of the Twenty-Seventh ACM SIGMOD-SIGACT-SIGART Symposium on Principles of Database Systems, Jun. 9-12, 2008, 10 pages. |
Anagnostopoulos et al., "Approximation Algorithms for Co-Clustering", Proceedings of the twenty-seventh ACM SIGMOD-SIGACT-SIGART symposium on Principles of database systems, pp. 201-210, 2008, 10 pages. |
Andersen et al., "Using PageRank to Locally Partition a Graph", Internet Mathematics, 4(1):35-64, Dec. 20, 2006, 23 pages. |
Andersen et al., "Using PageRank to Locally Partition a Graph", Proceedings of the 47th Annual Symposium on Foundations of Computer Science, vol. 4, No. 1, Dec. 20, 2006, 23 pages. |
Beeferman et al., "Agglomerative clustering of a search engine query log", KDD, 2000, 10 pages. |
Broder et al., "Efficient PageRank approximation via graph aggregation", Information Retrieval, 9(2):123-138, 2006, 16 pages. |
Broder et al., "Efficient PageRank Approximation Via Graph Aggregation", Information Retrieval, vol. 9, 2006, pp. 123-138. |
Broder et al., "Min-Wise Independent Permutations (extended abstract)", Proceedings of the thirtieth annual ACM symposium on Theory of computing, STOC '98, pp. 327-336, 1998, 36 pages. |
Broder et al., "Min-Wise Independent Permutations", In Proceedings of the Thirtieth Annual ACM Symposium on Theory of Computing, 1998, pp. 1-36. |
C. D. Meyer, "Stochastic complementation, uncoupling Markov chains, and the theory of nearly reducible systems", SIAM review, 31(2):240-272, 1989, 34 pages. |
Carrasco et al., "Clustering of bipartite advertiser-keyword graph", ICDM, 2003, 8 pages. |
Chien et al., "Link Evolution: Analysis and Algorithms", Internet Mathematics, 1(3):277-304, 2004, 28 pages. |
Chien et al., "Link Evolution: Analysis and Algorithms", Internet Mathematics, vol. 1, No. 3, 2004, pp. 277-304. |
Davis et al., "Estimating the Global PageRank of Web Communities", In Proceedings of the 12th ACM SIGKDD International Conference on Knowledge Discovery and Data Mining, Aug. 20-23, 2006, 10 pages. |
Davis et al., "Estimating the Global PageRank of Web Communities", Proceedings of the 12th ACM SIGKDD international conference on Knowledge discovery and data mining, pp. 116-125, 2006, 10 pages. |
Dblp dataset, accessed on Sep. 12, 2013 from http://dblp.uni-trier.de/xml/, 1 page. |
Dblp dataset, retrieved on Sep. 12, 2013, from http://dblp.uni-trier.de/xml/, 1 page. |
Dean et al., "MapReduce: Simplified Data Processing on Large Clusters", 6th Symposium on Operating Systems Design and Implementation, 2004, pp. 137-149. |
Dean, et al, "MapReduce: Simplified Data Processing on Large Clusters", Communications of the ACM, vol. 51, Issue 1, 2008, 13 pages. |
Deng et al., "A Generalized Co-HITS Algorithm and its Application to Bipartite Graphs", In Proceedings of the 15th ACM SIGKDD International Conference on Knowledge Discovery and Data Mining, Jun. 28-Jul. 1, 2009, 9 pages. |
Deng et al., "A Generalized Co-HITS Algorithm and its Application to Bipartite Graphs", Proceedings of the 15th ACM SIGKDD international conference on Knowledge discovery and data mining, pp. 239-248, 2009, 9 pages. |
Dhillon, "Co-clustering documents and words using Bipartite Spectral Graph Partitioning", KDD, 2001, 6 pages. |
Dhillon, Inderjit S.,"Co-Clustering Documents and Words Using Bipartite Spectral Graph Partitioning", KDD, 2001, 6 pages. |
Gibson et al., "Discovering Large Dense Subgraphs in Massive Graphs", Proceedings of the 31st VLDB Conference, 2005, pp. 721-732. |
Gibson et al., "Discovering Large Dense Subgraphs in Massive Graphs", VLDB, 2005, 12 pages. |
Greene et al., "Spectral Co-Clustering for Dynamic Bipartite Graphs", 2010, 12 pages. |
Greene et al., "Spectral Co-Clustering for Dynamic Bipartite Graphs", Jul. 2010, 12 pages. |
Hall et al., "The NBER Patent Citation Data File: Lessons, Insights and Methodological Tools", Technical report, National Bureau of Economic Research, 2001, 77 pages. |
Hartigan, "Direct Clustering of a Data Matrix", Journal of the American Statistical Association, 67(337):123-129, 1972, 8 pages. |
Hartigan, J. A., "Direct Clustering of a Data Matrix", Journal of the American Statistical Association, vol. 67, No. 337, Mar. 1972, pp. 123-129. |
Haveliwala, "Topic-Sensitive PageRank", Proceedings of the 11th international conference on World Wide Web, WWW '02, pp. 517-526, 2002, 10 pages. |
Haveliwala, Taher H., "Topic-Sensitive PageRank", In Proceedings of the 11th International Conference on World Wide Web, WWW 2002, May 7-11, 2002, 10 pages. |
Jurafsky et al., "Speech and Language Processing: An Introduction to Natural Language Processing, Computational Linguistics, and Speech Recognition", Prentice Hall PTR, 1st edition, 2000, 975 pages. |
Katz, "A new status index derived from sociometric analysis", Psychometrika, 18(1):39-43, 1953, 5 pages. |
Katz, Leo, "A New Status Index Derived from Sociometric Analysis", Psychometrika, vol. 18, No. 1, Mar. 1953, pp. 39-43. |
Kleinberg, "Authoritative Sources in a Hyperlinked Environment", Journal of the ACM, 46(5):604-632, 1999, 34 pages. |
Kleinberg, Jon M., "Authoritative Sources in a Hyperlinked Environment", Journal of the ACM, vol. 46, No. 5, Sep. 1999, pp. 604-632. |
Knight, "A Computer Method for Calculating Kendall's Tau with Ungrouped Data", Journal of the American Statistical Association, vol. 61, No. 314, Part 1, Jun. 1966, pp. 436-439, 5 pages. |
Knight, William R., "A Computer Method for Calculating Kendall's Tau with Ungrouped Data", Journal of the American Statistical Association, vol. 61, No. 314, Part 1, 1966, pp. 436-439. |
Kumar et al., "Trawling the Web for emerging cyber-communities", Computer networks, 1999, 13 pages. |
Langville et al., "Updating Markov Chains with an eye on Google's PageRank", SIAM Journal on Matrix Analysis and Applications, 27(4):968-987, 2006, 20 pages. |
Langville et al., "Updating Markov Chains with an Eye on Google's PageRank", SIAM Journal on Matrix Analysis and Applications, vol. 27, No. 4, 2006, pp. 968-987. |
Liben-Nowell et al., "The Link Prediction Problem for Social Networks", Journal of the American Society for Information Science and Technology, (7), Jan. 8, 2007, 19 pages. |
Liben-Nowell et al., "The link-Prediction Problem for Social Networks", Journal of the American Society for Information Science and Ttechnology, (7), Jan. 8, 2004, 19 pages. |
Madeira et al., "Biclustering Algorithms for Biological Data Analysis: A Survey", IEEE/ACM Transactions on Computational Biology and Bioinformatics, 1(1):24-45, 2004, 31 pages. |
Madeira et al., "Biclustering Algorithms for Biological Data Analysis: A Survey", IEEE/ACM Transactions on Computational Biology and Bioinformatics, Jan. 2004, pp. 1-31. |
Meyer, C. D., "Stochastic Complementation, Uncoupling Markov Chains, and the Theory of Nearly Reducible Systems", SIAM Review, 1989, pp. 1-34. |
Mirzal et al., "Eigenvectors for clustering: Unipartite, bipartite, and directed graph cases", Electronics and Information Engineering (ICEIE), Jul. 12, 2010, 9 pages. |
Mirzal et al., "Eigenvectors for Clustering: Unipartite, Bipartite, and Directed Graph Cases", In Electronics and Information Engineering (ICEIE), 2010, 9 pages. |
Ng et al., "MultiRank: Co-Ranking for Objects and Relations in Multi-Relational Data", In Proceedings of the 17th ACM SIGKDD international conference on Knowledge discovery and data mining, Aug. 21-24, 2011, pp. 1217-1225. |
Ng et al., "MultiRank: Co-Ranking for Objects and Relations in Multi-Relational Data", Proceedings of the 17th ACM SIGKDD international conference on Knowledge discovery and data mining, Aug. 2011, 9 pages. |
Parreira et al., "The JXP Method for Robust PageRank Approximation in a Peer-to-Peer Web Search Network", The VLDB Journal Manuscript, 17 (2), 2008, pp. 1-22. |
Parreira et al., "The JXP Method for Robust PageRank Approximation in a Peer-to-Peer Web Search Network", The VLDB Journal, 17(2):291-313, 2008, 22 pages. |
Simon et al., "Aggregation of Variables in Dynamic Systems", Econometrica, vol. 29, No. 2, Apr. 1961, pp. 111-138. |
Simon et al., "Aggregation of Variables in Dynamic Systems", Econometrica: Journal of the Econometric Society, vol. 29, No. 2, pp. 111-138, Apr. 1961, 29 pages. |
Vattani et al., "Preserving Personalized PageRank in Subgraphs", In Proceedings of the 28th International Conference on Machine Learning (ICML-11), 2011, 8 pages. |
Vattani et al., "Preserving Personalized PageRank in Subgraphs", Proceedings of the 28th International Conference on Machine Learning (ICML-11), pp. 793-800, 2011, 8 pages. |
Walpole et al., "Probability and Statistics for Engineers & Scientists", Prentice Hall, 1993, 812 pages. |
Walpole et al., "Probability and Statistics for Engineers and Scientists", Prentice Hall, Ninth Edition, 1993, 812 pages. |
Wu et al., "ApproxRank: Estimating Rank for a Subgraph", IEEE International Conference on Data Engineering, 2009, pp. 54-65. |
Wu et al., "ApproxRrank: Estimating rank for a subgraph", IEEE 25th International Conference on Data Engineering, pp. 54-65, 2009, 12 pages. |
Wu et al., "Learning Query and Document Similarities from Click-through Bipartite Graph with Metadata", Microsoft Research Technical Report, Nov. 2011, 22 pages. |
Wu et al., "Learning Query and Document Similarities from Click-Through Bipartite Graph with Metadata", WSDM, 2013, 22 pages. |
Zha et al., "Bipartite Graph Partitioning and Data Clustering", ACM Proceedings of the tenth international conference on Information and knowledge management, pp. 25-32, 2001, 8 pages. |
Zha et al., "Bipartite Graph Partitioning and Data Clustering", In ACM Proceedings of the Tenth International Conference on Information and Knowledge Management, Nov. 2001, 8 pages. |
Cited By (9)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20180268244A1 (en) * | 2017-03-14 | 2018-09-20 | Samsung Electronics Co., Ltd. | System and method for deep labeling |
US11631236B2 (en) * | 2017-03-14 | 2023-04-18 | Samsung Electronics Co., Ltd. | System and method for deep labeling |
US10521445B2 (en) * | 2017-06-01 | 2019-12-31 | Fuji Xerox Co., Ltd. | System for visually exploring coordinated relationships in data |
US11500936B2 (en) * | 2018-08-07 | 2022-11-15 | Walmart Apollo, Llc | System and method for structure and attribute based graph partitioning |
US20200265270A1 (en) * | 2019-02-20 | 2020-08-20 | Caseware International Inc. | Mutual neighbors |
US10963301B2 (en) * | 2019-07-17 | 2021-03-30 | Google Llc | Scheduling operations on a computation graph |
US11755367B2 (en) | 2019-07-17 | 2023-09-12 | Google Llc | Scheduling operations on a computation graph |
US11704680B2 (en) | 2020-08-13 | 2023-07-18 | Oracle International Corporation | Detecting fraudulent user accounts using graphs |
US11895134B2 (en) | 2021-04-12 | 2024-02-06 | Sap Se | Securing applications through similarity-based risk assessment |
Also Published As
Publication number | Publication date |
---|---|
US20150220530A1 (en) | 2015-08-06 |
Similar Documents
Publication | Publication Date | Title |
---|---|---|
US10152557B2 (en) | Efficient similarity ranking for bipartite graphs | |
US10430464B1 (en) | Scalable graph propagation for knowledge expansion | |
US11062226B2 (en) | Determining a likelihood of a user interaction with a content element | |
Chen et al. | Scatterbrain: Unifying sparse and low-rank attention | |
US11514515B2 (en) | Generating synthetic data using reject inference processes for modifying lead scoring models | |
Dowlatshahi et al. | GGSA: a grouping gravitational search algorithm for data clustering | |
US10824674B2 (en) | Label propagation in graphs | |
US11928616B2 (en) | Method and system for hierarchical forecasting | |
US20120030020A1 (en) | Collaborative filtering on spare datasets with matrix factorizations | |
Biswas et al. | A two-stage VIKOR assisted multi-operator differential evolution approach for Influence Maximization in social networks | |
US20220300850A1 (en) | End-to-end machine learning pipelines for data integration and analytics | |
WO2019010379A1 (en) | System and method for evaluating the true reach of social media influencers | |
US20220129316A1 (en) | Workload Equivalence Class Identification For Resource Usage Prediction | |
US20220114225A1 (en) | Influence maximization on social networks with tensor bandits | |
Mikeli et al. | A multi-criteria recommendation method for interval scaled ratings | |
CN108665293A (en) | Feature importance acquisition methods and device | |
CN110717116B (en) | Link prediction method and system of relational network, equipment and storage medium | |
CN114036388A (en) | Data processing method and device, electronic equipment and storage medium | |
Tekin et al. | Context-adaptive big data stream mining | |
US20160342899A1 (en) | Collaborative filtering in directed graph | |
Khade et al. | Classification of web pages on attractiveness: A supervised learning approach | |
Zhang et al. | Traces: Generating twitter stories via shared subspace and temporal smoothness | |
Qin et al. | A Bayesian framework for large-scale geo-demand estimation in on-line retailing | |
Li et al. | Analysis and research of retail customer consumption behavior based on support vector machine | |
Devi et al. | Efficient Seed Selection for IC-IS Multiphase Diffusion Model |
Legal Events
Date | Code | Title | Description |
---|---|---|---|
AS | Assignment |
Owner name: GOOGLE INC., CALIFORNIAFree format text: ASSIGNMENT OF ASSIGNORS INTEREST;ASSIGNORS:BANADAKI, SEYED VAHAB MIRROKNI;LATTANZI, SILVIO;FELDMAN, JONATHAN EZRA;AND OTHERS;SIGNING DATES FROM 20140416 TO 20140514;REEL/FRAME:033355/0422 |
|
AS | Assignment |
Owner name: GOOGLE LLC, CALIFORNIAFree format text: CHANGE OF NAME;ASSIGNOR:GOOGLE INC.;REEL/FRAME:044129/0001Effective date: 20170929 |
|
STCF | Information on status: patent grant |
Free format text: PATENTED CASE |
|
MAFP | Maintenance fee payment |
Free format text: PAYMENT OF MAINTENANCE FEE, 4TH YEAR, LARGE ENTITY (ORIGINAL EVENT CODE: M1551); ENTITY STATUS OF PATENT OWNER: LARGE ENTITYYear of fee payment: 4 |