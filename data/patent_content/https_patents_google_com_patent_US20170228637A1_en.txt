US20170228637A1 - Augmenting Neural Networks with External Memory - Google Patents
Augmenting Neural Networks with External Memory Download PDFInfo
- Publication number
- US20170228637A1 US20170228637A1 US15/396,289 US201615396289A US2017228637A1 US 20170228637 A1 US20170228637 A1 US 20170228637A1 US 201615396289 A US201615396289 A US 201615396289A US 2017228637 A1 US2017228637 A1 US 2017228637A1
- Authority
- US
- United States
- Prior art keywords
- weight
- neural network
- external memory
- location
- locations
- Prior art date
- Legal status (The legal status is an assumption and is not a legal conclusion. Google has not performed a legal analysis and makes no representation as to the accuracy of the status listed.)
- Granted
Links
Images
Classifications
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06N—COMPUTING ARRANGEMENTS BASED ON SPECIFIC COMPUTATIONAL MODELS
- G06N3/00—Computing arrangements based on biological models
- G06N3/02—Neural networks
- G06N3/06—Physical realisation, i.e. hardware implementation of neural networks, neurons or parts of neurons
- G06N3/063—Physical realisation, i.e. hardware implementation of neural networks, neurons or parts of neurons using electronic means
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06N—COMPUTING ARRANGEMENTS BASED ON SPECIFIC COMPUTATIONAL MODELS
- G06N3/00—Computing arrangements based on biological models
- G06N3/02—Neural networks
- G06N3/04—Architecture, e.g. interconnection topology
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06N—COMPUTING ARRANGEMENTS BASED ON SPECIFIC COMPUTATIONAL MODELS
- G06N3/00—Computing arrangements based on biological models
- G06N3/02—Neural networks
- G06N3/04—Architecture, e.g. interconnection topology
- G06N3/044—Recurrent networks, e.g. Hopfield networks
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06N—COMPUTING ARRANGEMENTS BASED ON SPECIFIC COMPUTATIONAL MODELS
- G06N3/00—Computing arrangements based on biological models
- G06N3/02—Neural networks
- G06N3/04—Architecture, e.g. interconnection topology
- G06N3/044—Recurrent networks, e.g. Hopfield networks
- G06N3/0442—Recurrent networks, e.g. Hopfield networks characterised by memory or gating, e.g. long short-term memory [LSTM] or gated recurrent units [GRU]
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06N—COMPUTING ARRANGEMENTS BASED ON SPECIFIC COMPUTATIONAL MODELS
- G06N3/00—Computing arrangements based on biological models
- G06N3/02—Neural networks
- G06N3/08—Learning methods
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F12/00—Accessing, addressing or allocating within memory systems or architectures
- G06F12/02—Addressing or allocation; Relocation
- G06F12/08—Addressing or allocation; Relocation in hierarchically structured memory systems, e.g. virtual memory systems
- G06F12/12—Replacement control
- G06F12/121—Replacement control using replacement algorithms
- G06F12/123—Replacement control using replacement algorithms with age lists, e.g. queue, most recently used [MRU] list or least recently used [LRU] list
Definitions
- This specification relates to neural network system architectures.
- Neural networks are machine learning models that employ one or more layers of nonlinear units to predict an output for a received input.
- Some neural networks include one or more hidden layers in addition to an output layer. The output of each hidden layer is used as input to the next layer in the network, i.e., the next hidden layer or the output layer.
- Each layer of the network generates an output from a received input in accordance with current values of a respective set of parameters.
- a recurrent neural network is a neural network that receives an input sequence and generates an output sequence from the input sequence.
- a recurrent neural network can use some or all of the internal state of the network from processing a previous input in computing a current output.
- An example of a recurrent neural network is a Long Short-Term Memory (LSTM) neural network that includes one or more LSTM memory blocks. Each LSTM memory block can include one or more cells that each include an input gate, a forget gate, and an output gate that allow the cell to store previous states for the cell, e.g., for use in generating a current activation or to be provided to other components of the LSTM neural network.
- LSTM Long Short-Term Memory
- an augmented neural network system includes a neural network configured to receive a neural network input and generate a neural network output, an external memory that stores values derived from portions of the neural network output, and a memory access subsystem that is configured to receive the neural network output and read and write from/to the external memory based on the neural network output and a number of weighted values corresponding to locations in the external memory.
- a system of one or more computers to be configured to perform particular operations or actions means that the system has installed on it software, firmware, hardware, or a combination of them that in operation cause the system to perform the operations or actions.
- one or more computer programs to be configured to perform particular operations or actions means that the one or more programs include instructions that, when executed by data processing apparatus, cause the apparatus to perform the operations or actions.
- the augmented neural network can more accurately generate outputs from received inputs for a variety of machine learning tasks.
- Such augmented neural networks may store and access new information flexibly by providing a mechanism in which inferences may be drawn from new data based on longer-term experience i.e., inductive transfer.
- augmented neural networks allow for gradual, incremental learnings to encode background knowledge that spans tasks.
- a more flexible memory resource binds information particular to newly encountered tasks.
- Augmented neural networks may be employed to quickly encode and retrieve new information, and hence can potentially obviate the downsides of conventional models.
- an augmented neural network may rapidly assimilate new data and leverage this data to make accurate predictions after only a single or a few samples.
- the augmented neural network accesses the external memory by focusing on memory content, which supports robust meta learning and extends the range of problems to which deep learning can be effectively applied.
- FIG. 1 shows an example augmented neural network system.
- FIG. 2 is a flow diagram of an example process for generating a system output from a system input.
- FIG. 3 is a flow diagram of an example process for determining weights for a time step.
- FIG. 4 is a flow diagram of an example of an augmented neural network system employing meta-learning tasks.
- FIG. 1 shows an example augmented neural network system 100 .
- the augmented neural network system 100 is an example of a system implemented as computer programs on one or more computers in one or more locations, in which the systems, components, and techniques described below are implemented.
- the augmented neural network system 100 is a machine learning system that receives a sequence of system inputs and generates a sequence of system outputs from the system inputs.
- the augmented neural network system 100 can receive a system input x as part of an input sequence and generate a system output y from the system input x.
- the augmented neural network system 100 can store the generated sequence of outputs in an output data repository or provide the output for use for some other immediate purpose.
- the augmented neural network system 100 can be configured to receive any kind of digital data input and to generate any kind of score or classification output based on the input.
- the output generated by the augmented neural network system 100 for a given image may be scores for each of a set of object categories, with each score representing an estimated likelihood that the image contains an image of an object belonging to the category.
- the output generated by the augmented neural network system 100 for a given Internet resource, document, or portion of a document may be a score for each of a set of topics, with each score representing an estimated likelihood that the Internet resource, document, or document portion is about the topic.
- the output generated by the augmented neural network system 100 may be a score that represents an estimated likelihood that the particular advertisement will be clicked on.
- the output generated by the augmented neural network system 100 may be a score for each of a set of content items, with each score representing an estimated likelihood that the user will respond favorably to being recommended the content item.
- the output generated by the augmented neural network system 100 may be a score for each of a set of pieces of text in another language, with each score representing an estimated likelihood that the piece of text in the other language is a proper translation of the input text into the other language.
- the output generated by the augmented neural network system 100 may be a score for each of a set of pieces of text, each score representing an estimated likelihood that the piece of text is the correct transcript for the utterance or sequence of utterances.
- the output generated by the augmented neural network system 100 may identify a predicted output of the computer program.
- the augmented neural network system 100 can be part of a speech synthesis system.
- the augmented neural network system 100 can be part of a video processing system.
- the augmented neural network system 100 can be part of a dialogue system.
- the augmented neural network system 100 can be part of an auto completion system.
- the augmented neural network system 100 can be part of a text processing system.
- the augmented neural network system 100 can be part of a reinforcement learning system.
- the augmented neural network system 100 includes a controller neural network 102 and an external memory 104 .
- the controller neural network 102 may be a feedfoward neural network or a recurrent neural network, e.g., a long short-term memory (LSTM) neural network, that is configured to, at each of multiple time steps, receive a neural network input and process the neural network input to generate a neural network output for the time step.
- LSTM long short-term memory
- the neural network input received by the controller neural network 102 is a combination of the current system input and data read from the external memory 104 by a memory interface subsystem, such as a Least Recently Used Access (LRUA) subsystem 106 .
- the controller neural network 102 may be configured to receive a current neural network input made up of the current system input x and data r read from the external memory 104 and to generate a neural network output o that is provided to the LRUA subsystem 106 .
- Neural network output o may include a read key and a write vector.
- the write vector is the same as the read key, i.e., the same set of values is used as both the read key and the write vector. In other implementations, the write vector is different from the read key.
- the system also includes the LRUA subsystem 106 .
- the LRUA subsystem 106 is configured to maintain a respective usage weight for each of multiple locations in the external memory 104 that represents a strength with which the location has recently been written to or read from by the LRUA subsystem 106 .
- the LRUA subsystem 106 is configured to, for each of the time steps, generate a respective reading weight for each of the locations in the external memory 104 using the read key and then read data from the locations in the external memory 104 in accordance with the reading weights.
- the LRUA subsystem 106 is configured to generate a respective writing weight for each of the locations in the external memory 104 from a respective reading weight for the location from a preceding time step and the respective usage weight for the location and write the write vector to the locations in the external memory 104 in accordance with the writing weights.
- the LRUA subsystem 106 is also configured to, for each time step, update the respective usage weight for each of the locations in the external memory 104 from the respective reading weight for the location and the respective writing weight for the location.
- the LRUA subsystem 106 receives outputs generated by the controller neural network 102 , e.g., neural network output o, and translates the received outputs into read and write operations to be performed on the external memory 104 . That is, the LRUA subsystem 106 receives an output o from the controller neural network 102 and, based on the read key, the read weight, the usage weight, and the write weight, writes data w, which may include the received write vector, to the external memory 104 , and reads data r from the external memory 104 . In some examples, LRUA subsystem 106 may read and write data from/to external memory 104 via respective read and write heads.
- the LRUA subsystem 106 generates the system output y based on the read data.
- the data read by the LRUA subsystem 106 can then be provided to the controller neural network 102 as a portion of a later neural network input, e.g., along with the next system input.
- the LRUA module 106 may be a pure content-based memory writer that writes memories to either the least used memory location or the most recently used memory location within the external memory 104 .
- This module emphasizes accurate encoding of relevant (i.e., recent) information, and pure content-based retrieval.
- new information may be written into rarely-used locations, preserving recently encoded information.
- new information may be written to the last used location, which can function as an update of the memory with newer, possibly more relevant information. The distinction between these two options can be accomplished with an interpolation between the previous read weights and weights scaled according to usage weights.
- the usage weights are updated at each time-step by decaying the previous usage weights and adding the current read and write weights.
- the external memory 104 stores data vectors written to the external memory 104 by the LRUA subsystem 106 .
- the external memory 104 is a real-valued matrix memory that has elements M(i,j,t), where i indexes location, j indexes the vector element, and t indexes time.
- M(i,j,t) would be the value stored at element j of the vector stored at location i in the external memory 104 at time t.
- FIG. 2 is a flow diagram of an example process 200 for generating a system output from a system input at a given time step.
- the process 200 will be described as being performed by a system of one or more computers located in one or more locations.
- an augmented neural network system e.g., the augmented neural network system 100 of FIG. 1 , appropriately programmed in accordance with this specification, can perform the process 200 .
- the system receives a system input for the time step (step 202 ).
- the system input is one of a sequence of system inputs received by the system.
- the system obtains read data from an external memory (step 204 ), e.g., the external memory 104 of FIG. 1 .
- the read data was generated by the system by reading from the external memory during processing of the preceding input in the sequence of system inputs i.e., at the preceding time step(s).
- the system generates a neural network input by combining the system input and the data read from the external memory (step 206 ). For example, the system can concatenate the system input and the read data to generate the neural network input. For the first system input, the system can concatenate the system input with a pre-determined vector, e.g., a learned state of the neural network.
- a pre-determined vector e.g., a learned state of the neural network.
- the system processes the neural network input using a neural network, e.g., the controller neural network 102 of FIG. 1 , to generate a neural network output from the neural network input (step 208 ).
- the neural network can either be a feed-forward neural network, e.g., a convolutional neural network or another kind of deep feed-forward neural network, or a recurrent neural network, e.g., an LSTM neural network. If the neural network is a recurrent neural network, the recurrent neural network also uses the internal state of the recurrent neural network from the preceding neural network input in the sequence in processing the current neural network input to generate the neural network output.
- the neural network includes both recurrent and feed-forward layers.
- the system determines the read weights, write weights, and usage weights for the current time step from the read key in the neural network output and the weights from the previous time step(s) (step 210 ). Determining these weights is described in more detail below with reference to FIG. 3 .
- the system determines a write vector to be written to the external memory from the received neural network output and then writes the write vector to the external memory in accordance with the write weights (step 212 ). In some examples, the system may write the write vector to multiple memory locations within the external memory.
- the least used memory location is computed from the usage weights from the previous time step (w t ⁇ 1 u ) and is set to zero. For example, the system may identify a location in the memory that has a lowest usage weight and erase the data stored in the identified location, i.e., set the data stored at the location to a vector of zeroes.
- M t ⁇ 1 (i) is the data stored at a particular location i in the external memory prior to the write, i.e., after the preceding time step
- w t w is the current write weight for location i in the external memory
- k t is the read key.
- the read key is replaced with the write vector.
- the system reads from the external memory using the determined read wrights and the read key (step 214 ). Determining the read weights is described in more detail below with reference to FIG. 3 . In some examples, information within a memory location, r t , is retrieved using the determined read weights according to:
- w t r (i) is the read weight for the location i
- M t (i) is the data stored in location i in the external memory.
- the system performs multiple read and write operations for a given system input.
- the system can perform multiple read operations, multiple write operations, or both in parallel and independently of each of the other operations.
- the system can use different memory access weights in performing each set of operations.
- the system generates a system output for the system input from the information retrieved according to the read weights (step 216 ).
- the system may include one or more output layers configured to process the retrieved information for each time step to generate a system output for each time step.
- the retrieved information may be directly provided as the system output or processed through a softmax layer or another output layer to generate the system output.
- the system also provides the retrieved information as part of the next neural network input.
- the neural network output may also include a system output portion, i.e., in addition to the read key and the write vector, that the system uses as the system output, i.e., instead of generating the system output from the retrieved information.
- each read operation can be performed independently with optionally different values for the read weights.
- the system can combine the read data vectors generated by each read operation, e.g., by concatenating the vectors, to form a final read data vector that is provided as part of the next neural network input to the neural network.
- each write operation can be performed independently with optionally different values for the writing weights and the write vectors.
- the cumulative effect of the multiple write operations being performed in parallel is additive.
- the system can perform the read, and write operations in any order. For example, in some implementations, the system writes and then reads from the external memory. However, in other implementations, the system can perform these operations in a different order.
- the process 200 can be performed for each system input in a sequence of system inputs to generate a sequence of system outputs for the sequence of system inputs.
- the sequence of system inputs can be a sequence for which the desired output, i.e., the output sequence that should be generated by the system for the input sequence, is not known.
- the system can also perform the process 200 on inputs in a set of training data, i.e., a set of inputs for which the output that should be predicted by the system is known, in order to train the system, i.e., to determine trained values for the parameters of the neural network and any additional parameters of processes used in erasing, writing, and reading from the external memory.
- the process 200 can be performed repeatedly on inputs selected from a set of training data as part of a conventional machine learning training technique to train the neural network, e.g., a stochastic gradient descent backpropagation through time training technique if the neural network is a recurrent neural network.
- FIG. 3 is a flow diagram of an example process for determining weights from a neural network output.
- the process 300 will be described as being performed by a system of one or more computers located in one or more locations.
- an augmented neural network system e.g., the augmented neural network system 100 of FIG. 1 , appropriately programmed in accordance with this specification, can perform the process 300 .
- the system receives a neural network output from a neural network, e.g., the controller neural network 102 of FIG. 1 , (step 302 ).
- the neural network output may include a read key and write vector.
- the system determines the read weights, w t r from the received read key (step 304 ).
- the external memory M t is addressed using the cosine similarity measure
- K ⁇ ( k t , M t ⁇ ( i ) ) k t ⁇ M t ⁇ ( i ) ⁇ k t ⁇ ⁇ ⁇ ⁇ M t ⁇ ( i ) ⁇ ,
- the system determines the write weights for the current time step from the read and usage weights from the previous time step(s) using the LRUA Subsystem (step 306 ).
- a learnable sigmoid gate parameter may be used to compute a convex combination of the previous read weights and previous usage weights:
- ⁇ is the learnable gate parameter to interpolate between the weights.
- the system determines the usage weights for the current time step from the read and write weights from the current time step along with the usage weights from the previous time step(s) using the LRUA Subsystem (step 308 ). These usage weights, w t u , are updated at each time-step t by decaying the previous usage weights w t ⁇ 1 u , and adding the current read w t r , and write weights w t w :
- ⁇ is a decay parameter
- the system may determine the least-used weights, w t lu for the current time step from the usage weights for the time step using the LRUA Subsystem. Elements of w t lu are set accordingly:
- w t lu ⁇ ( i ) ⁇ 0 if ⁇ ⁇ w t u ⁇ ( i ) > m ⁇ ( w t u ) 1 if ⁇ ⁇ w t u ⁇ ( i ) ⁇ m ⁇ ( w t u ) ,
- the least-used weights determined for the time step t may be used to determine the write weights for the next time step, t+1 (see above for determining w t w ). Alternatively, they system may directly use the determined usage weights for the time step t in place of the least-used weights to determine the write weights.
- the system can maintain various degrees of persistence of the data stored in the external memory based on outputs received from the neural network. For example, in some implementations, the system re-sets the external memory after each sequence of system inputs has been fully processed by the system. As another example, in some implementations, the data stored in the external memory persists between input sequences. That is, the system does not delete any data from the external memory between sequences of system inputs. In these implementations, the system may re-set the external memory after a given task assigned to the system is completed and before the system begins a different machine learning task. Alternatively, the system may maintain the external memory without deleting values even between tasks. Thus, while processing a current input sequence, the system may be able to leverage data stored in the memory while processing a previous input sequence or even while performing a previous machine learning task.
- FIG. 4 is a flow diagram of an example process 400 of an augmented neural network system performing meta-learning tasks.
- the process 400 will be described as being performed by a system of one or more computers located in one or more locations.
- an augmented neural network system e.g., the augmented neural network system 100 of FIG. 1 , appropriately programmed in accordance with this specification, can perform the process 400 .
- the disclosed augmented neural network is capable of meta-learning in tasks that carry significant short- and long-term memory demands.
- Meta-learning generally refers to a scenario in which an agent learns at two levels, each associated with different time scales. Rapid learning occurs within a task, for example, when learning to accurately classify within a particular dataset. This learning may be guided by knowledge accrued more gradually across tasks, which captures the way in which task structure varies across target domains.
- Such meta-learning may manifest as an ability to successfully carry out industrial meta-learning tasks with high accuracy after only a few presentations, and to perform principled function estimation based on a small number of samples.
- industrial meta-learning tasks include spam classification (e.g., classification based recommendation and classification based ranking of search results), quick learning to recognize the speech of a new speaker, rapid classification from very few training examples by any desired useful actionable property (e.g., discerning rotten fruit or faulty items on a conveyor belt), and counting items of a given type from very few examples of that particular type (e.g., the number of chickens in a cage from a realistic cluttered image, the number of trees from an aerial image, or the number of people in an area).
- the disclosed augmented neural network system may combine an ability to slowly learn an abstract method for obtaining useful representations of raw data, via gradient descent, and the ability to rapidly bind never-before-seen information after minimal presentations, via an external memory module. Such a combination supports robust meta-learning, extending the range of problems to which deep learning can be effectively applied. Thus, the disclosed augmented neural network system may learn a general strategy for the types of representations to be placed into memory and how to later use these representations for predictions.
- the system trains the neural network to determine trained values of the parameters ⁇ of the neural network to reduce the expected learning cost, L, across a distribution of datasets, p(D), with each data set corresponding to a different task. Training the neural network for an example meta-learning scenario is described below with reference to the process 400 .
- the system may feed a series of input sequences for each data set (step 402 ).
- y t is the class label for an image x t
- y t is the value of a hidden function for a vector with real-valued elements x t , or a real-valued number x t .
- y t has a purpose in addition to being the target for the output of controller neural network 102 .
- y t may also be presented as input along with x t , in a temporarily offset manner.
- the neural network produces a system output for each system input (step 404 ).
- the neural network may be fed the input sequence (x 1 ; null); (x 2 ; y 1 ); ::: ; (x T ; y T-1 ).
- the correct label for the previous data sample (y t ⁇ 1 ) may be provided as input along with a new query x t .
- the controller neural network 102 may be tasked to output the appropriate label for x t (i.e., y t ) at the given timestep.
- labels may be shuffled from dataset-to-dataset to prevent the controller neural network 102 from slowly learning sample-class bindings in its weights, and instead, learn to hold data samples in memory until the appropriate labels are presented at a next time step, after which, sample-class information can be bound and stored for later use.
- performance may involve a random guess for the first presentation of a class, since the appropriate label cannot be inferred from previous episodes due to label shuffling, and the use of memory to achieve increased accuracy thereafter.
- the employed augmented neural network system aims at modelling the predictive distribution p(y t
- the system adjusts values of the parameters of the neural network based on errors between the produced labels and the actual labels for the inputs in the data sets (step 406 ), e.g., using a conventional neural network training technique such as backpropagation through time.
- Embodiments of the subject matter and the functional operations described in this specification can be implemented in digital electronic circuitry, in tangibly-embodied computer software or firmware, in computer hardware, including the structures disclosed in this specification and their structural equivalents, or in combinations of one or more of them.
- Embodiments of the subject matter described in this specification can be implemented as one or more computer programs, i.e., one or more modules of computer program instructions encoded on a tangible non-transitory program carrier for execution by, or to control the operation of, data processing apparatus.
- the program instructions can be encoded on an artificially-generated propagated signal, e.g., a machine-generated electrical, optical, or electromagnetic signal, that is generated to encode information for transmission to suitable receiver apparatus for execution by a data processing apparatus.
- the computer storage medium can be a machine-readable storage device, a machine-readable storage substrate, a random or serial access memory device, or a combination of one or more of them.
- data processing apparatus refers to data processing hardware and encompasses all kinds of apparatus, devices, and machines for processing data, including by way of example a programmable processor, a computer, or multiple processors or computers.
- the apparatus can also be or further include special purpose logic circuitry, e.g., an FPGA (field programmable gate array) or an ASIC (application-specific integrated circuit).
- the apparatus can optionally include, in addition to hardware, code that creates an execution environment for computer programs, e.g., code that constitutes processor firmware, a protocol stack, a database management system, an operating system, or a combination of one or more of them.
- a computer program (which may also be referred to or described as a program, software, a software application, a module, a software module, a script, or code) can be written in any form of programming language, including compiled or interpreted languages, or declarative or procedural languages, and it can be deployed in any form, including as a stand-alone program or as a module, component, subroutine, or other unit suitable for use in a computing environment.
- a computer program may, but need not, correspond to a file in a file system.
- a program can be stored in a portion of a file that holds other programs or data, e.g., one or more scripts stored in a markup language document, in a single file dedicated to the program in question, or in multiple coordinated files, e.g., files that store one or more modules, sub-programs, or portions of code.
- a computer program can be deployed to be executed on one computer or on multiple computers that are located at one site or distributed across multiple sites and interconnected by a communication network.
- the processes and logic flows described in this specification can be performed by one or more programmable computers executing one or more computer programs to perform functions by operating on input data and generating output.
- the processes and logic flows can also be performed by, and apparatus can also be implemented as, special purpose logic circuitry, e.g., a field programmable gate array (FPGA) or an application specific integrated circuit (ASIC).
- FPGA field programmable gate array
- ASIC application specific integrated circuit
- Computers suitable for the execution of a computer program include, by way of example, can be based on general or special purpose microprocessors or both, or any other kind of central processing unit.
- a central processing unit will receive instructions and data from a read-only memory or a random access memory or both.
- the essential elements of a computer are a central processing unit for performing or executing instructions and one or more memory devices for storing instructions and data.
- a computer will also include, or be operatively coupled to receive data from or transfer data to, or both, one or more mass storage devices for storing data, e.g., magnetic, magneto-optical disks, or optical disks.
- mass storage devices for storing data, e.g., magnetic, magneto-optical disks, or optical disks.
- a computer need not have such devices.
- a computer can be embedded in another device, e.g., a mobile telephone, a personal digital assistant (PDA), a mobile audio or video player, a game console, a Global Positioning System (GPS) receiver, or a portable storage device, e.g., a universal serial bus (USB) flash drive, to name just a few.
- PDA personal digital assistant
- GPS Global Positioning System
- USB universal serial bus
- Computer-readable media suitable for storing computer program instructions and data include all forms of non-volatile memory, media and memory devices, including by way of example semiconductor memory devices, e.g., EPROM, EEPROM, and flash memory devices; magnetic disks, e.g., internal hard disks or removable disks; magneto-optical disks; and CD-ROM and DVD-ROM disks.
- semiconductor memory devices e.g., EPROM, EEPROM, and flash memory devices
- magnetic disks e.g., internal hard disks or removable disks
- magneto-optical disks e.g., CD-ROM and DVD-ROM disks.
- the processor and the memory can be supplemented by, or incorporated in, special purpose logic circuitry.
- a computer having a display device, e.g., a CRT cathode ray tube (CRT) or liquid crystal display (LCD) monitor, for displaying information to the user and a keyboard and a pointing device, e.g., a mouse or a trackball, by which the user can provide input to the computer.
- a display device e.g., a CRT cathode ray tube (CRT) or liquid crystal display (LCD) monitor
- keyboard and a pointing device e.g., a mouse or a trackball
- Other kinds of devices can be used to provide for interaction with a user as well; for example, feedback provided to the user can be any form of sensory feedback, e.g., visual feedback, auditory feedback, or tactile feedback; and input from the user can be received in any form, including acoustic, speech, or tactile input.
- a computer can interact with a user by sending documents to and receiving documents from a device that is used by the user; for example, by
- Embodiments of the subject matter described in this specification can be implemented in a computing system that includes a back-end component, e.g., as a data server, or that includes a middleware component, e.g., an application server, or that includes a front-end component, e.g., a client computer having a relationship graphical user interface or a Web browser through which a user can interact with an implementation of the subject matter described in this specification, or any combination of one or more such back-end, middleware, or front-end components.
- the components of the system can be interconnected by any form or medium of digital data communication, e.g., a communication network. Examples of communication networks include a local area network (LAN) and a wide area network (WAN), e.g., the Internet.
- LAN local area network
- WAN wide area network
- the computing system can include clients and servers.
- a client and server are generally remote from each other and typically interact through a communication network.
- the relationship of client and server arises by virtue of computer programs running on the respective computers and having a client-server relationship to each other.
Abstract
Description
- This application claims priority to U.S. Provisional Application No. 62/292,158, filed on Feb. 5, 2016. The disclosure of the prior application is considered part of and is incorporated by reference in the disclosure of this application.
- This specification relates to neural network system architectures.
- Neural networks are machine learning models that employ one or more layers of nonlinear units to predict an output for a received input. Some neural networks include one or more hidden layers in addition to an output layer. The output of each hidden layer is used as input to the next layer in the network, i.e., the next hidden layer or the output layer. Each layer of the network generates an output from a received input in accordance with current values of a respective set of parameters.
- Some neural networks are recurrent neural networks. A recurrent neural network is a neural network that receives an input sequence and generates an output sequence from the input sequence. In particular, a recurrent neural network can use some or all of the internal state of the network from processing a previous input in computing a current output. An example of a recurrent neural network is a Long Short-Term Memory (LSTM) neural network that includes one or more LSTM memory blocks. Each LSTM memory block can include one or more cells that each include an input gate, a forget gate, and an output gate that allow the cell to store previous states for the cell, e.g., for use in generating a current activation or to be provided to other components of the LSTM neural network.
- This specification describes technologies that relate to augmented neural network systems. In general, an augmented neural network system includes a neural network configured to receive a neural network input and generate a neural network output, an external memory that stores values derived from portions of the neural network output, and a memory access subsystem that is configured to receive the neural network output and read and write from/to the external memory based on the neural network output and a number of weighted values corresponding to locations in the external memory.
- For a system of one or more computers to be configured to perform particular operations or actions means that the system has installed on it software, firmware, hardware, or a combination of them that in operation cause the system to perform the operations or actions. For one or more computer programs to be configured to perform particular operations or actions means that the one or more programs include instructions that, when executed by data processing apparatus, cause the apparatus to perform the operations or actions.
- The subject matter described in this specification can be implemented in particular embodiments so as to realize one or more of the following advantages. By augmenting a neural network with an external memory, the augmented neural network can more accurately generate outputs from received inputs for a variety of machine learning tasks. Such augmented neural networks may store and access new information flexibly by providing a mechanism in which inferences may be drawn from new data based on longer-term experience i.e., inductive transfer. Given their combination of flexible memory storage and the rich capacity of deep architectures for representation learning, augmented neural networks allow for gradual, incremental learnings to encode background knowledge that spans tasks. Moreover, a more flexible memory resource binds information particular to newly encountered tasks. Augmented neural networks may be employed to quickly encode and retrieve new information, and hence can potentially obviate the downsides of conventional models. In particular, an augmented neural network may rapidly assimilate new data and leverage this data to make accurate predictions after only a single or a few samples. Further, the augmented neural network accesses the external memory by focusing on memory content, which supports robust meta learning and extends the range of problems to which deep learning can be effectively applied.
- The details of one or more embodiments of the subject matter of this specification are set forth in the accompanying drawings and the description below. Other features, aspects, and advantages of the subject matter will become apparent from the description, the drawings, and the claims.
-
FIG. 1 shows an example augmented neural network system. -
FIG. 2 is a flow diagram of an example process for generating a system output from a system input. -
FIG. 3 is a flow diagram of an example process for determining weights for a time step. -
FIG. 4 is a flow diagram of an example of an augmented neural network system employing meta-learning tasks. - Like reference numbers and designations in the various drawings indicate like elements.
-
FIG. 1 shows an example augmentedneural network system 100. The augmentedneural network system 100 is an example of a system implemented as computer programs on one or more computers in one or more locations, in which the systems, components, and techniques described below are implemented. - The augmented
neural network system 100 is a machine learning system that receives a sequence of system inputs and generates a sequence of system outputs from the system inputs. For example, the augmentedneural network system 100 can receive a system input x as part of an input sequence and generate a system output y from the system input x. The augmentedneural network system 100 can store the generated sequence of outputs in an output data repository or provide the output for use for some other immediate purpose. - The augmented
neural network system 100 can be configured to receive any kind of digital data input and to generate any kind of score or classification output based on the input. - For example, if the inputs to the augmented
neural network system 100 are images or features that have been extracted from images, the output generated by the augmentedneural network system 100 for a given image may be scores for each of a set of object categories, with each score representing an estimated likelihood that the image contains an image of an object belonging to the category. - As another example, if the inputs to the augmented
neural network system 100 are Internet resources (e.g., web pages), documents, or portions of documents or features extracted from Internet resources, documents, or portions of documents, the output generated by the augmentedneural network system 100 for a given Internet resource, document, or portion of a document may be a score for each of a set of topics, with each score representing an estimated likelihood that the Internet resource, document, or document portion is about the topic. - As another example, if the inputs to the augmented
neural network system 100 are features of an impression context for a particular advertisement, the output generated by the augmentedneural network system 100 may be a score that represents an estimated likelihood that the particular advertisement will be clicked on. - As another example, if the inputs to the augmented
neural network system 100 are features of a personalized recommendation for a user, e.g., features characterizing the context for the recommendation or features characterizing previous actions taken by the user, the output generated by the augmentedneural network system 100 may be a score for each of a set of content items, with each score representing an estimated likelihood that the user will respond favorably to being recommended the content item. - As another example, if the input to the augmented
neural network system 100 is text in one language, the output generated by the augmentedneural network system 100 may be a score for each of a set of pieces of text in another language, with each score representing an estimated likelihood that the piece of text in the other language is a proper translation of the input text into the other language. - As another example, if the input to the augmented
neural network system 100 is a spoken utterance, a sequence of spoken utterances, or features derived from one of the two, the output generated by the augmentedneural network system 100 may be a score for each of a set of pieces of text, each score representing an estimated likelihood that the piece of text is the correct transcript for the utterance or sequence of utterances. - As another example, if the inputs to the augmented
neural network system 100 are pieces of code from a computer program, the output generated by the augmentedneural network system 100 may identify a predicted output of the computer program. - As another example, the augmented
neural network system 100 can be part of a speech synthesis system. - As another example, the augmented
neural network system 100 can be part of a video processing system. - As another example, the augmented
neural network system 100 can be part of a dialogue system. - As another example, the augmented
neural network system 100 can be part of an auto completion system. - As another example, the augmented
neural network system 100 can be part of a text processing system. - As another example, the augmented
neural network system 100 can be part of a reinforcement learning system. - In particular, the augmented
neural network system 100 includes a controllerneural network 102 and anexternal memory 104. The controllerneural network 102 may be a feedfoward neural network or a recurrent neural network, e.g., a long short-term memory (LSTM) neural network, that is configured to, at each of multiple time steps, receive a neural network input and process the neural network input to generate a neural network output for the time step. - Generally, the neural network input received by the controller
neural network 102 is a combination of the current system input and data read from theexternal memory 104 by a memory interface subsystem, such as a Least Recently Used Access (LRUA)subsystem 106. For example, the controllerneural network 102 may be configured to receive a current neural network input made up of the current system input x and data r read from theexternal memory 104 and to generate a neural network output o that is provided to theLRUA subsystem 106. Neural network output o may include a read key and a write vector. In some implementations, the write vector is the same as the read key, i.e., the same set of values is used as both the read key and the write vector. In other implementations, the write vector is different from the read key. - To allow the controller
neural network 102 to make use of theexternal memory 104, the system also includes theLRUA subsystem 106. The LRUAsubsystem 106 is configured to maintain a respective usage weight for each of multiple locations in theexternal memory 104 that represents a strength with which the location has recently been written to or read from by the LRUAsubsystem 106. - To read from the
external memory 104, the LRUAsubsystem 106 is configured to, for each of the time steps, generate a respective reading weight for each of the locations in theexternal memory 104 using the read key and then read data from the locations in theexternal memory 104 in accordance with the reading weights. - To write to the external memory, the
LRUA subsystem 106 is configured to generate a respective writing weight for each of the locations in theexternal memory 104 from a respective reading weight for the location from a preceding time step and the respective usage weight for the location and write the write vector to the locations in theexternal memory 104 in accordance with the writing weights. - The
LRUA subsystem 106 is also configured to, for each time step, update the respective usage weight for each of the locations in theexternal memory 104 from the respective reading weight for the location and the respective writing weight for the location. - In some examples, the
LRUA subsystem 106 receives outputs generated by the controllerneural network 102, e.g., neural network output o, and translates the received outputs into read and write operations to be performed on theexternal memory 104. That is, theLRUA subsystem 106 receives an output o from the controllerneural network 102 and, based on the read key, the read weight, the usage weight, and the write weight, writes data w, which may include the received write vector, to theexternal memory 104, and reads data r from theexternal memory 104. In some examples,LRUA subsystem 106 may read and write data from/toexternal memory 104 via respective read and write heads. TheLRUA subsystem 106 generates the system output y based on the read data. The data read by theLRUA subsystem 106 can then be provided to the controllerneural network 102 as a portion of a later neural network input, e.g., along with the next system input. - The
LRUA module 106 may be a pure content-based memory writer that writes memories to either the least used memory location or the most recently used memory location within theexternal memory 104. This module emphasizes accurate encoding of relevant (i.e., recent) information, and pure content-based retrieval. In some examples, new information may be written into rarely-used locations, preserving recently encoded information. In some examples, new information may be written to the last used location, which can function as an update of the memory with newer, possibly more relevant information. The distinction between these two options can be accomplished with an interpolation between the previous read weights and weights scaled according to usage weights. In some examples, the usage weights are updated at each time-step by decaying the previous usage weights and adding the current read and write weights. - The
external memory 104 stores data vectors written to theexternal memory 104 by theLRUA subsystem 106. In some implementations, theexternal memory 104 is a real-valued matrix memory that has elements M(i,j,t), where i indexes location, j indexes the vector element, and t indexes time. Thus, M(i,j,t) would be the value stored at element j of the vector stored at location i in theexternal memory 104 at time t. By configuring theexternal memory 104, theLRUA subsystem 106, and the controllerneural network 102 in this manner, the components of the augmentedneural network system 100 are entirely differentiable, allowing the augmentedneural network system 100 to be effectively trained. -
FIG. 2 is a flow diagram of anexample process 200 for generating a system output from a system input at a given time step. For convenience, theprocess 200 will be described as being performed by a system of one or more computers located in one or more locations. For example, an augmented neural network system, e.g., the augmentedneural network system 100 ofFIG. 1 , appropriately programmed in accordance with this specification, can perform theprocess 200. - The system receives a system input for the time step (step 202). The system input is one of a sequence of system inputs received by the system.
- The system obtains read data from an external memory (step 204), e.g., the
external memory 104 ofFIG. 1 . Generally, the read data was generated by the system by reading from the external memory during processing of the preceding input in the sequence of system inputs i.e., at the preceding time step(s). - The system generates a neural network input by combining the system input and the data read from the external memory (step 206). For example, the system can concatenate the system input and the read data to generate the neural network input. For the first system input, the system can concatenate the system input with a pre-determined vector, e.g., a learned state of the neural network.
- The system processes the neural network input using a neural network, e.g., the controller
neural network 102 ofFIG. 1 , to generate a neural network output from the neural network input (step 208). Depending on the implementation, the neural network can either be a feed-forward neural network, e.g., a convolutional neural network or another kind of deep feed-forward neural network, or a recurrent neural network, e.g., an LSTM neural network. If the neural network is a recurrent neural network, the recurrent neural network also uses the internal state of the recurrent neural network from the preceding neural network input in the sequence in processing the current neural network input to generate the neural network output. In some implementations, the neural network includes both recurrent and feed-forward layers. - The system determines the read weights, write weights, and usage weights for the current time step from the read key in the neural network output and the weights from the previous time step(s) (step 210). Determining these weights is described in more detail below with reference to
FIG. 3 . - The system determines a write vector to be written to the external memory from the received neural network output and then writes the write vector to the external memory in accordance with the write weights (step 212). In some examples, the system may write the write vector to multiple memory locations within the external memory.
- In some examples, prior to writing to the external memory, the least used memory location is computed from the usage weights from the previous time step (wt−1 u) and is set to zero. For example, the system may identify a location in the memory that has a lowest usage weight and erase the data stored in the identified location, i.e., set the data stored at the location to a vector of zeroes.
- Writing to external memory then occurs in accordance with the computed write weights:
-
Mt(i)←Mt−1(i)+wt w(i)kt, ∀i. - where Mt−1(i) is the data stored at a particular location i in the external memory prior to the write, i.e., after the preceding time step, wt w is the current write weight for location i in the external memory, and kt is the read key. In implementations where the write vector is different from the read key, the read key is replaced with the write vector.
- The system reads from the external memory using the determined read wrights and the read key (step 214). Determining the read weights is described in more detail below with reference to
FIG. 3 . In some examples, information within a memory location, rt, is retrieved using the determined read weights according to: -
rt←Σiwt r(i)Mt(i), - where wt r(i) is the read weight for the location i, and Mt(i) is the data stored in location i in the external memory.
- In some implementations, the system performs multiple read and write operations for a given system input. For example, the system can perform multiple read operations, multiple write operations, or both in parallel and independently of each of the other operations. Additionally, the system can use different memory access weights in performing each set of operations.
- The system generates a system output for the system input from the information retrieved according to the read weights (step 216). The system may include one or more output layers configured to process the retrieved information for each time step to generate a system output for each time step. For example, the retrieved information may be directly provided as the system output or processed through a softmax layer or another output layer to generate the system output. The system also provides the retrieved information as part of the next neural network input.
- In alternative implementations, the neural network output may also include a system output portion, i.e., in addition to the read key and the write vector, that the system uses as the system output, i.e., instead of generating the system output from the retrieved information.
- In implementations where the system performs multiple read operations for a given system input, e.g., in parallel as described above, each read operation can be performed independently with optionally different values for the read weights. In these implementations, the system can combine the read data vectors generated by each read operation, e.g., by concatenating the vectors, to form a final read data vector that is provided as part of the next neural network input to the neural network.
- In implementations where the system performs multiple write operations for a given system input, e.g., in parallel as described above, each write operation can be performed independently with optionally different values for the writing weights and the write vectors. Thus, the cumulative effect of the multiple write operations being performed in parallel is additive.
- Additionally, the system can perform the read, and write operations in any order. For example, in some implementations, the system writes and then reads from the external memory. However, in other implementations, the system can perform these operations in a different order.
- The
process 200 can be performed for each system input in a sequence of system inputs to generate a sequence of system outputs for the sequence of system inputs. The sequence of system inputs can be a sequence for which the desired output, i.e., the output sequence that should be generated by the system for the input sequence, is not known. The system can also perform theprocess 200 on inputs in a set of training data, i.e., a set of inputs for which the output that should be predicted by the system is known, in order to train the system, i.e., to determine trained values for the parameters of the neural network and any additional parameters of processes used in erasing, writing, and reading from the external memory. Because the components of the system are entirely differentiable, theprocess 200 can be performed repeatedly on inputs selected from a set of training data as part of a conventional machine learning training technique to train the neural network, e.g., a stochastic gradient descent backpropagation through time training technique if the neural network is a recurrent neural network. -
FIG. 3 is a flow diagram of an example process for determining weights from a neural network output. For convenience, theprocess 300 will be described as being performed by a system of one or more computers located in one or more locations. For example, an augmented neural network system, e.g., the augmentedneural network system 100 ofFIG. 1 , appropriately programmed in accordance with this specification, can perform theprocess 300. - The system receives a neural network output from a neural network, e.g., the controller
neural network 102 ofFIG. 1 , (step 302). The neural network output may include a read key and write vector. - The system determines the read weights, wt r from the received read key (step 304). When reading from the external memory, the external memory Mt is addressed using the cosine similarity measure,
-
- which is used to produce a read-weight vector, wt r, with elements computed according to a softmax:
-
- The system determines the write weights for the current time step from the read and usage weights from the previous time step(s) using the LRUA Subsystem (step 306). To obtain the write weights, wt r, a learnable sigmoid gate parameter may be used to compute a convex combination of the previous read weights and previous usage weights:
-
wt w←σ(α)wt−1 r+(1−σ(α))wt−1 lu, - where σ(·) is the sigmoid function,
-
- is the read weight for the previous time step (t-1), wt−1 lu is the least used weight for the previous time step, and α is the learnable gate parameter to interpolate between the weights.
- The system determines the usage weights for the current time step from the read and write weights from the current time step along with the usage weights from the previous time step(s) using the LRUA Subsystem (step 308). These usage weights, wt u, are updated at each time-step t by decaying the previous usage weights wt−1 u, and adding the current read wt r, and write weights wt w:
-
wt u←γwt−1 u+wt r+wt w, - where γ is a decay parameter.
- Optionally, the system may determine the least-used weights, wt lu for the current time step from the usage weights for the time step using the LRUA Subsystem. Elements of wt lu are set accordingly:
-
- where m(v) denotes the smallest element of the vector v. The least-used weights determined for the time step t may be used to determine the write weights for the next time step, t+1 (see above for determining wt w). Alternatively, they system may directly use the determined usage weights for the time step t in place of the least-used weights to determine the write weights.
- Depending on the implementation, the system can maintain various degrees of persistence of the data stored in the external memory based on outputs received from the neural network. For example, in some implementations, the system re-sets the external memory after each sequence of system inputs has been fully processed by the system. As another example, in some implementations, the data stored in the external memory persists between input sequences. That is, the system does not delete any data from the external memory between sequences of system inputs. In these implementations, the system may re-set the external memory after a given task assigned to the system is completed and before the system begins a different machine learning task. Alternatively, the system may maintain the external memory without deleting values even between tasks. Thus, while processing a current input sequence, the system may be able to leverage data stored in the memory while processing a previous input sequence or even while performing a previous machine learning task.
-
FIG. 4 is a flow diagram of anexample process 400 of an augmented neural network system performing meta-learning tasks. For convenience, theprocess 400 will be described as being performed by a system of one or more computers located in one or more locations. For example, an augmented neural network system, e.g., the augmentedneural network system 100 ofFIG. 1 , appropriately programmed in accordance with this specification, can perform theprocess 400. - As described in
FIG. 4 , the disclosed augmented neural network is capable of meta-learning in tasks that carry significant short- and long-term memory demands. Meta-learning generally refers to a scenario in which an agent learns at two levels, each associated with different time scales. Rapid learning occurs within a task, for example, when learning to accurately classify within a particular dataset. This learning may be guided by knowledge accrued more gradually across tasks, which captures the way in which task structure varies across target domains. - Such meta-learning may manifest as an ability to successfully carry out industrial meta-learning tasks with high accuracy after only a few presentations, and to perform principled function estimation based on a small number of samples. Examples of industrial meta-learning tasks include spam classification (e.g., classification based recommendation and classification based ranking of search results), quick learning to recognize the speech of a new speaker, rapid classification from very few training examples by any desired useful actionable property (e.g., discerning rotten fruit or faulty items on a conveyor belt), and counting items of a given type from very few examples of that particular type (e.g., the number of chickens in a cage from a realistic cluttered image, the number of trees from an aerial image, or the number of people in an area).
- The disclosed augmented neural network system may combine an ability to slowly learn an abstract method for obtaining useful representations of raw data, via gradient descent, and the ability to rapidly bind never-before-seen information after minimal presentations, via an external memory module. Such a combination supports robust meta-learning, extending the range of problems to which deep learning can be effectively applied. Thus, the disclosed augmented neural network system may learn a general strategy for the types of representations to be placed into memory and how to later use these representations for predictions.
- To configure the controller
neural network 102 ofFIG. 1 to carry out a meta-learning scenario, the system trains the neural network to determine trained values of the parameters θ of the neural network to reduce the expected learning cost, L, across a distribution of datasets, p(D), with each data set corresponding to a different task. Training the neural network for an example meta-learning scenario is described below with reference to theprocess 400. - To train the neural network, the system may feed a series of input sequences for each data set (step 402). To accomplish this goal, a task or episode may involve the presentation of some dataset: D={dt}t=1 T={(xtyt)}t=1 T. For image classification tasks, yt is the class label for an image xt, and for regression, yt is the value of a hidden function for a vector with real-valued elements xt, or a real-valued number xt. In this setup, yt has a purpose in addition to being the target for the output of controller
neural network 102. yt may also be presented as input along with xt, in a temporarily offset manner. - The neural network produces a system output for each system input (step 404). For example, the neural network may be fed the input sequence (x1; null); (x2; y1); ::: ; (xT; yT-1). At time t, the correct label for the previous data sample (yt−1) may be provided as input along with a new query xt. In such examples, the controller
neural network 102 may be tasked to output the appropriate label for xt (i.e., yt) at the given timestep. Additionally, labels may be shuffled from dataset-to-dataset to prevent the controllerneural network 102 from slowly learning sample-class bindings in its weights, and instead, learn to hold data samples in memory until the appropriate labels are presented at a next time step, after which, sample-class information can be bound and stored for later use. Thus, for a given episode, performance may involve a random guess for the first presentation of a class, since the appropriate label cannot be inferred from previous episodes due to label shuffling, and the use of memory to achieve increased accuracy thereafter. In some examples, the employed augmented neural network system aims at modelling the predictive distribution p(yt|xt, D1:t;θ), inducing a corresponding loss at each time step. - The system adjusts values of the parameters of the neural network based on errors between the produced labels and the actual labels for the inputs in the data sets (step 406), e.g., using a conventional neural network training technique such as backpropagation through time.
- Embodiments of the subject matter and the functional operations described in this specification can be implemented in digital electronic circuitry, in tangibly-embodied computer software or firmware, in computer hardware, including the structures disclosed in this specification and their structural equivalents, or in combinations of one or more of them. Embodiments of the subject matter described in this specification can be implemented as one or more computer programs, i.e., one or more modules of computer program instructions encoded on a tangible non-transitory program carrier for execution by, or to control the operation of, data processing apparatus. Alternatively or in addition, the program instructions can be encoded on an artificially-generated propagated signal, e.g., a machine-generated electrical, optical, or electromagnetic signal, that is generated to encode information for transmission to suitable receiver apparatus for execution by a data processing apparatus. The computer storage medium can be a machine-readable storage device, a machine-readable storage substrate, a random or serial access memory device, or a combination of one or more of them.
- The term “data processing apparatus” refers to data processing hardware and encompasses all kinds of apparatus, devices, and machines for processing data, including by way of example a programmable processor, a computer, or multiple processors or computers. The apparatus can also be or further include special purpose logic circuitry, e.g., an FPGA (field programmable gate array) or an ASIC (application-specific integrated circuit). The apparatus can optionally include, in addition to hardware, code that creates an execution environment for computer programs, e.g., code that constitutes processor firmware, a protocol stack, a database management system, an operating system, or a combination of one or more of them.
- A computer program (which may also be referred to or described as a program, software, a software application, a module, a software module, a script, or code) can be written in any form of programming language, including compiled or interpreted languages, or declarative or procedural languages, and it can be deployed in any form, including as a stand-alone program or as a module, component, subroutine, or other unit suitable for use in a computing environment. A computer program may, but need not, correspond to a file in a file system. A program can be stored in a portion of a file that holds other programs or data, e.g., one or more scripts stored in a markup language document, in a single file dedicated to the program in question, or in multiple coordinated files, e.g., files that store one or more modules, sub-programs, or portions of code. A computer program can be deployed to be executed on one computer or on multiple computers that are located at one site or distributed across multiple sites and interconnected by a communication network.
- The processes and logic flows described in this specification can be performed by one or more programmable computers executing one or more computer programs to perform functions by operating on input data and generating output. The processes and logic flows can also be performed by, and apparatus can also be implemented as, special purpose logic circuitry, e.g., a field programmable gate array (FPGA) or an application specific integrated circuit (ASIC).
- Computers suitable for the execution of a computer program include, by way of example, can be based on general or special purpose microprocessors or both, or any other kind of central processing unit. Generally, a central processing unit will receive instructions and data from a read-only memory or a random access memory or both. The essential elements of a computer are a central processing unit for performing or executing instructions and one or more memory devices for storing instructions and data. Generally, a computer will also include, or be operatively coupled to receive data from or transfer data to, or both, one or more mass storage devices for storing data, e.g., magnetic, magneto-optical disks, or optical disks. However, a computer need not have such devices. Moreover, a computer can be embedded in another device, e.g., a mobile telephone, a personal digital assistant (PDA), a mobile audio or video player, a game console, a Global Positioning System (GPS) receiver, or a portable storage device, e.g., a universal serial bus (USB) flash drive, to name just a few.
- Computer-readable media suitable for storing computer program instructions and data include all forms of non-volatile memory, media and memory devices, including by way of example semiconductor memory devices, e.g., EPROM, EEPROM, and flash memory devices; magnetic disks, e.g., internal hard disks or removable disks; magneto-optical disks; and CD-ROM and DVD-ROM disks. The processor and the memory can be supplemented by, or incorporated in, special purpose logic circuitry.
- To provide for interaction with a user, embodiments of the subject matter described in this specification can be implemented on a computer having a display device, e.g., a CRT cathode ray tube (CRT) or liquid crystal display (LCD) monitor, for displaying information to the user and a keyboard and a pointing device, e.g., a mouse or a trackball, by which the user can provide input to the computer. Other kinds of devices can be used to provide for interaction with a user as well; for example, feedback provided to the user can be any form of sensory feedback, e.g., visual feedback, auditory feedback, or tactile feedback; and input from the user can be received in any form, including acoustic, speech, or tactile input. In addition, a computer can interact with a user by sending documents to and receiving documents from a device that is used by the user; for example, by sending web pages to a web browser on a user's client device in response to requests received from the web browser.
- Embodiments of the subject matter described in this specification can be implemented in a computing system that includes a back-end component, e.g., as a data server, or that includes a middleware component, e.g., an application server, or that includes a front-end component, e.g., a client computer having a relationship graphical user interface or a Web browser through which a user can interact with an implementation of the subject matter described in this specification, or any combination of one or more such back-end, middleware, or front-end components. The components of the system can be interconnected by any form or medium of digital data communication, e.g., a communication network. Examples of communication networks include a local area network (LAN) and a wide area network (WAN), e.g., the Internet.
- The computing system can include clients and servers. A client and server are generally remote from each other and typically interact through a communication network. The relationship of client and server arises by virtue of computer programs running on the respective computers and having a client-server relationship to each other.
- While this specification contains many specific implementation details, these should not be construed as limitations on the scope of any invention or of what may be claimed, but rather as descriptions of features that may be specific to particular embodiments of particular inventions. Certain features that are described in this specification in the context of separate embodiments can also be implemented in combination in a single embodiment. Conversely, various features that are described in the context of a single embodiment can also be implemented in multiple embodiments separately or in any suitable subcombination. Moreover, although features may be described above as acting in certain combinations and even initially claimed as such, one or more features from a claimed combination can in some cases be excised from the combination, and the claimed combination may be directed to a subcombination or variation of a subcombination.
- Similarly, while operations are depicted in the drawings in a particular order, this should not be understood as requiring that such operations be performed in the particular order shown or in sequential order, or that all illustrated operations be performed, to achieve desirable results. In certain circumstances, multitasking and parallel processing may be advantageous. Moreover, the separation of various system modules and components in the embodiments described above should not be understood as requiring such separation in all embodiments, and it should be understood that the described program components and systems can generally be integrated together in a single software product or packaged into multiple software products.
- Particular embodiments of the subject matter have been described. Other embodiments are within the scope of the following claims. For example, the actions recited in the claims can be performed in a different order and still achieve desirable results. As one example, the processes depicted in the accompanying figures do not necessarily require the particular order shown, or sequential order, to achieve desirable results. In certain implementations, multitasking and parallel processing may be advantageous.
Claims (20)
Priority Applications (1)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US15/396,289 US10885426B2 (en) | 2016-02-05 | 2016-12-30 | Augmenting neural networks with external memory |
Applications Claiming Priority (2)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US201662292158P | 2016-02-05 | 2016-02-05 | |
US15/396,289 US10885426B2 (en) | 2016-02-05 | 2016-12-30 | Augmenting neural networks with external memory |
Publications (2)
Publication Number | Publication Date |
---|---|
US20170228637A1 true US20170228637A1 (en) | 2017-08-10 |
US10885426B2 US10885426B2 (en) | 2021-01-05 |
Family
ID=57838554
Family Applications (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
US15/396,289 Active 2039-11-08 US10885426B2 (en) | 2016-02-05 | 2016-12-30 | Augmenting neural networks with external memory |
Country Status (4)
Country | Link |
---|---|
US (1) | US10885426B2 (en) |
EP (1) | EP3398117B1 (en) |
CN (1) | CN109155002B (en) |
WO (1) | WO2017136080A1 (en) |
Cited By (15)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
CN110473203A (en) * | 2018-05-09 | 2019-11-19 | 西门子医疗有限公司 | Medical image segmentation |
US10643705B2 (en) | 2018-07-24 | 2020-05-05 | Sandisk Technologies Llc | Configurable precision neural network with differential binary non-volatile memory cell structure |
US10643119B2 (en) | 2018-07-24 | 2020-05-05 | Sandisk Technologies Llc | Differential non-volatile memory cell for artificial neural network |
EP3776372A4 (en) * | 2018-08-10 | 2021-06-02 | Samsung Electronics Co., Ltd. | System and method for deep memory network |
US20210216858A1 (en) * | 2020-01-10 | 2021-07-15 | International Business Machines Corporation | Training machine learning systems |
US11170290B2 (en) | 2019-03-28 | 2021-11-09 | Sandisk Technologies Llc | Realization of neural networks with ternary inputs and binary weights in NAND memory arrays |
US11328204B2 (en) | 2018-07-24 | 2022-05-10 | Sandisk Technologies Llc | Realization of binary neural networks in NAND memory arrays |
US20220180167A1 (en) * | 2020-12-03 | 2022-06-09 | International Business Machines Corporation | Memory-augmented neural network system |
US11397886B2 (en) | 2020-04-29 | 2022-07-26 | Sandisk Technologies Llc | Vertical mapping and computing for deep neural networks in non-volatile memory |
US11544547B2 (en) | 2020-06-22 | 2023-01-03 | Western Digital Technologies, Inc. | Accelerating binary neural networks within latch structure of non-volatile memory devices |
US11568228B2 (en) | 2020-06-23 | 2023-01-31 | Sandisk Technologies Llc | Recurrent neural network inference engine with gated recurrent unit cell and non-volatile memory arrays |
US11568200B2 (en) | 2019-10-15 | 2023-01-31 | Sandisk Technologies Llc | Accelerating sparse matrix multiplication in storage class memory-based convolutional neural network inference |
US11625586B2 (en) | 2019-10-15 | 2023-04-11 | Sandisk Technologies Llc | Realization of neural networks with ternary inputs and ternary weights in NAND memory arrays |
US11657259B2 (en) | 2019-12-20 | 2023-05-23 | Sandisk Technologies Llc | Kernel transformation techniques to reduce power consumption of binary input, binary weight in-memory convolutional neural network inference engine |
US11663471B2 (en) | 2020-06-26 | 2023-05-30 | Sandisk Technologies Llc | Compute-in-memory deep neural network inference engine using low-rank approximation technique |
Families Citing this family (3)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US10853725B2 (en) | 2018-05-18 | 2020-12-01 | Deepmind Technologies Limited | Neural networks with relational memory |
CN110457450B (en) * | 2019-07-05 | 2023-12-22 | 平安科技（深圳）有限公司 | Answer generation method based on neural network model and related equipment |
CN113435514A (en) * | 2021-06-29 | 2021-09-24 | 同济大学 | Construction waste fine classification method and device based on meta-deep learning |
Family Cites Families (8)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US6954744B2 (en) * | 2001-08-29 | 2005-10-11 | Honeywell International, Inc. | Combinatorial approach for supervised neural network learning |
JP2011154410A (en) * | 2010-01-25 | 2011-08-11 | Sony Corp | Analysis server and method of analyzing data |
US8965819B2 (en) * | 2010-08-16 | 2015-02-24 | Oracle International Corporation | System and method for effective caching using neural networks |
US8533398B2 (en) | 2010-11-09 | 2013-09-10 | Microsoft Corporation | Combination based LRU caching |
US9182473B2 (en) * | 2012-05-10 | 2015-11-10 | Lear Corporation | System, method and product for locating vehicle key using neural networks |
US9218564B2 (en) * | 2012-07-30 | 2015-12-22 | International Business Machines Corporation | Providing transposable access to a synapse array using a recursive array layout |
US11080587B2 (en) * | 2015-02-06 | 2021-08-03 | Deepmind Technologies Limited | Recurrent neural networks for data item generation |
US10380481B2 (en) * | 2015-10-08 | 2019-08-13 | Via Alliance Semiconductor Co., Ltd. | Neural network unit that performs concurrent LSTM cell calculations |
-
2016
- 2016-12-30 EP EP16828903.1A patent/EP3398117B1/en active Active
- 2016-12-30 WO PCT/US2016/069570 patent/WO2017136080A1/en active Application Filing
- 2016-12-30 US US15/396,289 patent/US10885426B2/en active Active
- 2016-12-30 CN CN201680083483.3A patent/CN109155002B/en active Active
Cited By (17)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
CN110473203A (en) * | 2018-05-09 | 2019-11-19 | 西门子医疗有限公司 | Medical image segmentation |
US10643705B2 (en) | 2018-07-24 | 2020-05-05 | Sandisk Technologies Llc | Configurable precision neural network with differential binary non-volatile memory cell structure |
US10643119B2 (en) | 2018-07-24 | 2020-05-05 | Sandisk Technologies Llc | Differential non-volatile memory cell for artificial neural network |
US11328204B2 (en) | 2018-07-24 | 2022-05-10 | Sandisk Technologies Llc | Realization of binary neural networks in NAND memory arrays |
EP3776372A4 (en) * | 2018-08-10 | 2021-06-02 | Samsung Electronics Co., Ltd. | System and method for deep memory network |
US11775815B2 (en) | 2018-08-10 | 2023-10-03 | Samsung Electronics Co., Ltd. | System and method for deep memory network |
US11170290B2 (en) | 2019-03-28 | 2021-11-09 | Sandisk Technologies Llc | Realization of neural networks with ternary inputs and binary weights in NAND memory arrays |
US11568200B2 (en) | 2019-10-15 | 2023-01-31 | Sandisk Technologies Llc | Accelerating sparse matrix multiplication in storage class memory-based convolutional neural network inference |
US11625586B2 (en) | 2019-10-15 | 2023-04-11 | Sandisk Technologies Llc | Realization of neural networks with ternary inputs and ternary weights in NAND memory arrays |
US11657259B2 (en) | 2019-12-20 | 2023-05-23 | Sandisk Technologies Llc | Kernel transformation techniques to reduce power consumption of binary input, binary weight in-memory convolutional neural network inference engine |
US20210216858A1 (en) * | 2020-01-10 | 2021-07-15 | International Business Machines Corporation | Training machine learning systems |
US11397885B2 (en) | 2020-04-29 | 2022-07-26 | Sandisk Technologies Llc | Vertical mapping and computing for deep neural networks in non-volatile memory |
US11397886B2 (en) | 2020-04-29 | 2022-07-26 | Sandisk Technologies Llc | Vertical mapping and computing for deep neural networks in non-volatile memory |
US11544547B2 (en) | 2020-06-22 | 2023-01-03 | Western Digital Technologies, Inc. | Accelerating binary neural networks within latch structure of non-volatile memory devices |
US11568228B2 (en) | 2020-06-23 | 2023-01-31 | Sandisk Technologies Llc | Recurrent neural network inference engine with gated recurrent unit cell and non-volatile memory arrays |
US11663471B2 (en) | 2020-06-26 | 2023-05-30 | Sandisk Technologies Llc | Compute-in-memory deep neural network inference engine using low-rank approximation technique |
US20220180167A1 (en) * | 2020-12-03 | 2022-06-09 | International Business Machines Corporation | Memory-augmented neural network system |
Also Published As
Publication number | Publication date |
---|---|
EP3398117A1 (en) | 2018-11-07 |
CN109155002B (en) | 2021-11-09 |
US10885426B2 (en) | 2021-01-05 |
WO2017136080A1 (en) | 2017-08-10 |
CN109155002A (en) | 2019-01-04 |
EP3398117B1 (en) | 2023-12-20 |
Similar Documents
Publication | Publication Date | Title |
---|---|---|
US10885426B2 (en) | Augmenting neural networks with external memory | |
US11210579B2 (en) | Augmenting neural networks with external memory | |
US20210117801A1 (en) | Augmenting neural networks with external memory | |
US20230289598A1 (en) | Augmented recurrent neural network with external memory | |
US11714993B2 (en) | Classifying input examples using a comparison set | |
US10691997B2 (en) | Augmenting neural networks to generate additional outputs | |
US10366327B2 (en) | Generating vector representations of documents | |
US11151443B2 (en) | Augmenting neural networks with sparsely-accessed external memory | |
US20210089968A1 (en) | Memory augmented generative temporal models | |
US11080594B2 (en) | Augmenting neural networks with external memory using reinforcement learning | |
US11003993B1 (en) | Training recurrent neural networks to generate sequences | |
US20200293873A1 (en) | Generating vector representations of documents | |
US20230029590A1 (en) | Evaluating output sequences using an auto-regressive language model neural network | |
US20190147365A1 (en) | Deep vector table machine systems |
Legal Events
Date | Code | Title | Description |
---|---|---|---|
AS | Assignment |
Owner name: GOOGLE INC., CALIFORNIAFree format text: ASSIGNMENT OF ASSIGNORS INTEREST;ASSIGNORS:SANTORO, ADAM ANTHONY;WIERSTRA, DANIEL PIETER;LILLICRAP, TIMOTHY PAUL;AND OTHERS;SIGNING DATES FROM 20170126 TO 20170131;REEL/FRAME:041143/0125 |
|
STPP | Information on status: patent application and granting procedure in general |
Free format text: DOCKETED NEW CASE - READY FOR EXAMINATION |
|
AS | Assignment |
Owner name: GOOGLE LLC, CALIFORNIAFree format text: CHANGE OF NAME;ASSIGNOR:GOOGLE INC.;REEL/FRAME:044129/0001Effective date: 20170929 |
|
AS | Assignment |
Owner name: DEEPMIND TECHNOLOGIES LIMITED, UNITED KINGDOMFree format text: ASSIGNMENT OF ASSIGNORS INTEREST;ASSIGNOR:GOOGLE INC.;REEL/FRAME:044242/0116Effective date: 20170921 |
|
STPP | Information on status: patent application and granting procedure in general |
Free format text: NON FINAL ACTION MAILED |
|
STPP | Information on status: patent application and granting procedure in general |
Free format text: RESPONSE TO NON-FINAL OFFICE ACTION ENTERED AND FORWARDED TO EXAMINER |
|
STPP | Information on status: patent application and granting procedure in general |
Free format text: NOTICE OF ALLOWANCE MAILED -- APPLICATION RECEIVED IN OFFICE OF PUBLICATIONS |
|
STCF | Information on status: patent grant |
Free format text: PATENTED CASE |
|
AS | Assignment |
Owner name: DEEPMIND TECHNOLOGIES LIMITED, UNITED KINGDOMFree format text: CORRECTIVE ASSIGNMENT TO CORRECT THE DECLARATION PREVIOUSLY RECORDED AT REEL: 044129 FRAME: 0001. ASSIGNOR(S) HEREBY CONFIRMS THE DECLARATION;ASSIGNOR:DEEPMIND TECHNOLOGIES LIMITED;REEL/FRAME:058721/0308Effective date: 20220111 |