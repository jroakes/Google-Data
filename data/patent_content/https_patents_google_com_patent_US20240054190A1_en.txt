US20240054190A1 - Digital Rights Management for NFTs Across Search Surfaces - Google Patents
Digital Rights Management for NFTs Across Search Surfaces Download PDFInfo
- Publication number
- US20240054190A1 US20240054190A1 US18/077,650 US202218077650A US2024054190A1 US 20240054190 A1 US20240054190 A1 US 20240054190A1 US 202218077650 A US202218077650 A US 202218077650A US 2024054190 A1 US2024054190 A1 US 2024054190A1
- Authority
- US
- United States
- Prior art keywords
- data
- content item
- media content
- computing system
- permissions
- Prior art date
- Legal status (The legal status is an assumption and is not a legal conclusion. Google has not performed a legal analysis and makes no representation as to the accuracy of the status listed.)
- Pending
Links
- 238000000034 method Methods 0.000 claims abstract description 121
- 230000003190 augmentative effect Effects 0.000 claims description 45
- 238000012545 processing Methods 0.000 claims description 25
- 230000004044 response Effects 0.000 claims description 19
- 230000009471 action Effects 0.000 claims description 12
- 230000003993 interaction Effects 0.000 claims description 12
- 235000006679 Mentha X verticillata Nutrition 0.000 claims description 7
- 235000002899 Mentha suaveolens Nutrition 0.000 claims description 7
- 235000001636 Mentha x rotundifolia Nutrition 0.000 claims description 7
- 230000000977 initiatory effect Effects 0.000 claims description 3
- 230000008569 process Effects 0.000 description 45
- 230000015654 memory Effects 0.000 description 30
- 238000010586 diagram Methods 0.000 description 22
- 238000007726 management method Methods 0.000 description 18
- 238000012549 training Methods 0.000 description 15
- 238000004891 communication Methods 0.000 description 14
- 238000013528 artificial neural network Methods 0.000 description 12
- 230000006870 function Effects 0.000 description 10
- 230000008901 benefit Effects 0.000 description 6
- 230000011218 segmentation Effects 0.000 description 5
- 230000000007 visual effect Effects 0.000 description 5
- 238000009877 rendering Methods 0.000 description 4
- 238000013515 script Methods 0.000 description 4
- 230000004075 alteration Effects 0.000 description 3
- 230000000306 recurrent effect Effects 0.000 description 3
- 238000013519 translation Methods 0.000 description 3
- 238000010200 validation analysis Methods 0.000 description 3
- 230000003416 augmentation Effects 0.000 description 2
- 230000008859 change Effects 0.000 description 2
- 238000013527 convolutional neural network Methods 0.000 description 2
- 238000013500 data storage Methods 0.000 description 2
- 230000000694 effects Effects 0.000 description 2
- 238000005516 engineering process Methods 0.000 description 2
- 238000003709 image segmentation Methods 0.000 description 2
- 230000004048 modification Effects 0.000 description 2
- 238000012986 modification Methods 0.000 description 2
- 230000003287 optical effect Effects 0.000 description 2
- 238000007792 addition Methods 0.000 description 1
- 230000005540 biological transmission Effects 0.000 description 1
- 238000007906 compression Methods 0.000 description 1
- 230000006835 compression Effects 0.000 description 1
- 238000004590 computer program Methods 0.000 description 1
- 238000013144 data compression Methods 0.000 description 1
- 238000013479 data entry Methods 0.000 description 1
- 238000001514 detection method Methods 0.000 description 1
- 230000006872 improvement Effects 0.000 description 1
- 238000010801 machine learning Methods 0.000 description 1
- 238000005065 mining Methods 0.000 description 1
- 238000010422 painting Methods 0.000 description 1
- 230000000644 propagated effect Effects 0.000 description 1
- 230000004043 responsiveness Effects 0.000 description 1
- 230000006403 short-term memory Effects 0.000 description 1
- 238000012800 visualization Methods 0.000 description 1
Images
Classifications
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F21/00—Security arrangements for protecting computers, components thereof, programs or data against unauthorised activity
- G06F21/10—Protecting distributed programs or content, e.g. vending or licensing of copyrighted material ; Digital rights management [DRM]
- G06F21/16—Program or content traceability, e.g. by watermarking
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F2221/00—Indexing scheme relating to security arrangements for protecting computers, components thereof, programs or data against unauthorised activity
- G06F2221/21—Indexing scheme relating to G06F21/00 and subgroups addressing additional information or applications relating to security arrangements for protecting computers, components thereof, programs or data against unauthorised activity
- G06F2221/2141—Access rights, e.g. capability lists, access control lists, access tables, access matrices
Definitions
- the present disclosure relates generally to blockchain-enabled digital rights management. More particularly, the present disclosure relates to minting a non-fungible token on a blockchain with one or more permissions embedded in the non-fungible token data.
- Content items displayed on the internet may be published with the intent to have certain permissions and copyright agreements attached. However, users may disregard these permissions and copyright licenses, which can cause the owner of the content item to have their content item used in a way not originally intended. The issue can occur in a social media setting as users find content items that they later want to use for their own purposes. Additionally, databases and content aggregators may save and reproduce the content item without checking the permissions or the copyright license.
- the system can include one or more processors and one or more non-transitory computer-readable media that collectively store instructions that, when executed by the one or more processors, cause the computing system to perform operations.
- the operations can include obtaining a media content item.
- the media content item can be associated with a particular user.
- the operations can include obtaining one or more user inputs.
- the one or more user inputs can be associated with the particular user.
- the operations can include determining the one or more user inputs are associated with a selection of one or more permissions.
- the one or more permissions can be associated with the media content item.
- the operations can include generating non-fungible token data based on the media content item and the one or more permissions.
- One or more references to the media content item can be embedded in the non-fungible token data.
- the one or more permissions can be embedded in the non-fungible token data.
- the one or more permissions can be configured to be identifiable for display with the media content item.
- the operations can include registering the non-fungible token data with a blockchain.
- the blockchain can be associated with a decentralized blockchain computing system.
- the method can include providing, by a computing system including one or more processors, a media content item for display.
- the media content item can be a digital resource associated with a non-fungible token.
- the non-fungible token can be documented on a blockchain.
- the method can include obtaining, by the computing system, input data from a user computing system.
- the input data can be descriptive of one or more inputs to interact with the media content item.
- the method can include obtaining, by the computing system, permission data associated with the media content item based on the input data.
- the permission data can be stored on the blockchain.
- the permission data can be descriptive of one or more permissions associated with the media content item.
- the method can include providing, by the computing system, a user interface element for display.
- the user interface element can include a notification.
- the notification can be descriptive of the one or more permissions associated with the media content item.
- the operations can include obtaining content item data from a user computing system.
- the content item data can be associated with a particular user.
- the operations can include obtaining permission data associated with the content item data.
- the permission data can be descriptive of one or more permissions for interacting with the content item data.
- the operations can include generating a content-specific identifier for the content item data.
- the content-specific identifier can include identification data that is specifically generated for the content item data.
- the operations can include generating augmented content item data by embedding the content-specific identifier in the content item data.
- the operations can include generating non-fungible token data based on the permission data and the augmented content item data.
- the non-fungible token data can include the permission data.
- the non-fungible token data can reference the augmented content item data.
- the operations can include registering the non-fungible token data with a blockchain.
- FIG. 1 A depicts a block diagram of an example computing system that performs digital rights management according to example embodiments of the present disclosure.
- FIG. 1 B depicts a block diagram of an example computing device that performs digital rights management according to example embodiments of the present disclosure.
- FIG. 2 depicts a block diagram of an example non-fungible token data generation system according to example embodiments of the present disclosure.
- FIG. 3 depicts an illustration of an example search results page according to example embodiments of the present disclosure.
- FIG. 4 depicts a block diagram of an example non-fungible token data generation system according to example embodiments of the present disclosure.
- FIG. 5 depicts a block diagram of an example search results page generation system according to example embodiments of the present disclosure.
- FIG. 6 depicts a flow chart diagram of an example method to perform permission-embedded non-fungible token generation according to example embodiments of the present disclosure.
- FIG. 7 depicts a flow chart diagram of an example method to perform permission-based display according to example embodiments of the present disclosure.
- FIG. 8 depicts a flow chart diagram of an example method to perform permission-embedded non-fungible token generation according to example embodiments of the present disclosure.
- FIG. 9 A depicts a block diagram of an example computing system that performs digital rights management according to example embodiments of the present disclosure.
- FIG. 9 B depicts a block diagram of an example computing device that performs digital rights management according to example embodiments of the present disclosure.
- FIG. 9 C depicts a block diagram of an example computing system that performs digital rights management according to example embodiments of the present disclosure.
- the present disclosure is directed to systems and methods for digital rights management for content items.
- the systems and methods disclosed herein can leverage a blockchain and/or one or more user interface elements to manage the interactions with digital content items.
- the systems and methods can include obtaining a media content item.
- the media content item can be associated with a particular user.
- the systems and methods can include obtaining one or more user inputs.
- the one or more user inputs can be associated with the particular user.
- the one or more user inputs can be determined to be associated with a selection of one or more permissions.
- the one or more permissions can be associated with the media content item.
- the systems and methods can include generating non-fungible token data based on the media content item and the one or more permissions.
- One or more references to the media content item can be embedded in the non-fungible token data.
- the one or more permissions can be embedded in the non-fungible token data.
- the one or more permissions can be configured to be identifiable for display with the media content item.
- the systems and methods can include registering the non-fungible token data with a blockchain.
- the blockchain can be associated with a decentralized blockchain computing system.
- the systems and methods can obtain a content item (e.g., a media content item).
- the media content item can be associated with a particular user.
- the content item can include image data, video data, audio data, text data, and/or latent encoding data.
- the content item may be generated by and/or published by the particular user.
- the content item may be a content item stored locally by the particular user, may be stored in cloud storage for the particular user, and/or may be published on the web (e.g., on a social media website, a blog website, and/or a personal website).
- the systems and methods can obtain one or more user inputs.
- the one or more user inputs can be associated with the particular user.
- the one or more user inputs can be obtained from a user computing system.
- the one or more user inputs can be inputs to a user interface provided via a server computing system.
- one or more user interface elements can be provided in a content item management platform (e.g., a cloud storage web platform, a social media platform, and/or a content item repository platform).
- the one or more user inputs may be associated with a user interface with one or more options for selecting permissions to be associated with the obtained content item.
- the one or more options can include do not allow republishing or copying, allow republishing or copying if revenue provided to original owner, allow republishing or copying freely, and/or any other form of permissions, which can include caveats manually input by a user.
- the one or more user inputs can be determined to be associated with a selection of one or more permissions.
- the one or more permissions can be associated with the media content item.
- the one or more permissions can be associated with permissible interactions with the media content item.
- the permissible interactions can be associated with whether third parties can copy, republish, and/or share the content item.
- the determination can be based on heuristics, deterministic data, and/or one or more machine-learned parameters.
- the systems and methods can generate non-fungible token data based on the media content item and the one or more permissions.
- One or more references to the media content item may be embedded in the non-fungible token data.
- the one or more permissions can be embedded in the non-fungible token data.
- the non-fungible token data can include smart contract data.
- the payload of the smart contract associated with the smart contract data may be the content item.
- the content item may be viewed as a digital resource that may be transferred based on the criteria of the smart contract.
- the smart contract data can include the one or more permissions.
- the one or more permissions may be configured to be identifiable for display with the media content item.
- the non-fungible token data can be registered with a blockchain.
- the blockchain can be associated with a decentralized blockchain computing system.
- the non-fungible token data may be minted to the blockchain and may be associated with an electronic ledger that tracks transactions associated with the non-fungible token data. Additionally and/or alternatively, the non-fungible token data may be processed to generate index data associated with the non-fungible token data. The index data can then be added to a searchable database.
- the systems and methods can obtain a display request associated with the media content item.
- the non-fungible token data associated with the media content item can be identified.
- the permission data associated with the media content item can then be obtained.
- a display dataset can then be generated.
- the display dataset can include the media content item and the permission data.
- the display dataset can be provided.
- the display request can be associated with a third party computing system.
- the display request can be generated based on a search query processed by a search engine.
- the media content item can be responsive to the search query.
- the systems and methods can include determining the display request complies with the one or more preferences.
- the display dataset can include executable code for providing a user interface for displaying the one or more preferences in response to a selection of the media content item.
- the systems and methods can include obtaining a search query from a third party computing system and processing the search query to determine a plurality of search results responsive to the search query.
- the plurality of search results can include the media content item.
- the systems and methods can include determining the plurality of search results include one or more particular search results associated with one or more respective other content items that are associated with the media content item, determining ranking data for the plurality of search results based on the one or more respective other content items being associated with the media content item, and providing the plurality of search results for display based on the ranking data.
- the ranking data can be descriptive of non-fungible token search results being provided preference over general search results.
- the media content item can be provided for display before the one or more respective other content items.
- the generated non-fungible token data can then be utilized when providing the media content item for display.
- the systems and methods can include providing a media content item for display.
- the media content item can be a digital resource associated with a non-fungible token.
- the non-fungible token can be documented on a blockchain.
- the systems and methods can include obtaining input data from a user computing system.
- the input data can be descriptive of one or more inputs to interact with the media content item.
- Permission data associated with the media content item can be obtained based on the input data.
- the permission data can be stored on the blockchain.
- the permission data can be descriptive of one or more permissions associated with the media content item.
- the systems and methods can include providing a user interface element for display.
- the user interface element can include a notification.
- the notification can be descriptive of the one or more permissions associated with the media content item.
- the systems and methods can provide a media content item for display.
- the media content item can be a digital resource associated with a non-fungible token.
- the non-fungible token can be documented on a blockchain.
- the media content item can include image data, video data, text data, multimodal data, audio data, virtual reality data, augmented reality data, and/or latent encoding data.
- the media content item can be provided for display in a user interface.
- the media content item can be provided for display in a user interface of a search results page, a social media platform, a shared content item storage platform, a blog platform, and/or other web platform.
- the media content item may be provided for display in response to a search query.
- the media content item may be provided in a social media feed and/or a news feed.
- Input data can be obtained from a user computing system.
- the input data can be descriptive of one or more inputs to interact with the media content item.
- the input data can be descriptive of a request to copy and/or republish the media content item.
- the input data can be descriptive of one or more selections to a user interface, which may include an initial selection of the media content item, then one or more selections to a pop-up interface.
- the systems and methods can obtain permission data associated with the media content item based on the input data.
- the permission data can be stored on the blockchain.
- the permission data can be descriptive of one or more permissions associated with the media content item.
- the one or more permissions can include one or more parameters for generating a copy of the media content item.
- a user interface element can then be provided for display.
- the user interface element can include a notification.
- the notification can be descriptive of the one or more permissions associated with the media content item. Additionally and/or alternatively, the notification may provide one or more options for interacting with the media content item.
- the one or more options can be options that comply with the parameters set by the one or more permissions. For example, the one or more options provided may differ from one media content item to another media content item based on the level of interactions allowed based on the one or more permissions.
- the systems and methods can include obtaining additional input data.
- the additional input data can be descriptive of a copy request to generate a copy of the media content item.
- the additional input data and the permission data can be processed to determine a response action.
- the response action can include generating a media content item dataset.
- the media content item dataset can include the permission data embedded in the media content item.
- the response action can include providing a rejection notification. The rejection notification can indicate that generating a copy is against the one or more permissions associated with the media content item.
- the systems and methods can include embedding one or more identifiers in the content item data.
- the systems and methods can include obtaining content item data from a user computing system.
- the content item data can be associated with a particular user.
- Permission data associated with the content item data can be obtained.
- the permission data can be descriptive of one or more permissions for interacting with the content item data.
- the systems and methods can include generating a content-specific identifier for the content item data.
- the content-specific identifier can include identification data that is specifically generated for the content item data.
- Augmented content item data can be generated by embedding the content-specific identifier in the content item data.
- the systems and methods can include generating non-fungible token data based on the permission data and the augmented content item data.
- the non-fungible token data can include the permission data.
- the non-fungible token data can reference the augmented content item data.
- the non-fungible token data can be registered with a blockchain.
- the systems and methods can obtain content item data from a user computing system.
- the content item data can be associated with a particular user.
- the content item may be a media content item (e.g., an image, a video, a text string, a song, a virtual-reality asset, and/or an augmented-reality asset).
- the content item can be obtained via a user input, can be extracted from a webpage, and/or can be obtained from a database.
- obtaining the content item data from the user computing system can include accessing a user-specific content item database (e.g., a web storage platform, a local drive, and/or a server storage drive) and providing a mint user interface.
- a user-specific content item database e.g., a web storage platform, a local drive, and/or a server storage drive
- the mint user interface can include one or more selectable interface elements for initiating non-fungible token generation.
- Permission data associated with the content item data can then be obtained.
- the permission data can be descriptive of one or more permissions for interacting with the content item data.
- the one or more permissions can be descriptive of one or more parameters for republishing the augmented content item data.
- the permission data may be descriptive of view preferences. For example, the permission data may indicate the content item may be provided for display as a preview, with a watermark, and/or in a lower resolution.
- a content-specific identifier can then be generated for the content item data.
- the content-specific identifier can include identification data that is specifically generated for the content item data.
- the content-specific identifier can be a set of data that acts as a fingerprint for identifying the content item and copies of the content item throughout the internet and/or local drives.
- the content-specific identifier can include a watermark and/or other embedded data that may be readily viewable and/or may be indistinguishable to the viewers but identifiable via computer systems processing and rendering the data.
- Augmented content item data can be generated by embedding the content-specific identifier in the content item data.
- the augmented content item data may be generated by one or more machine-learned models.
- the one or more machine-learned models may process the content item data and the content-specific identifier to generate the augmented content item data.
- the one or machine-learned models can include an augmentation model, a segmentation model, an embedding model, an encoder model, a self-attention model, a decoder model, and/or a concatenation model.
- the systems and methods can then generate non-fungible token data based on the permission data and the augmented content item data.
- the non-fungible token data can include the permission data.
- the non-fungible token data can reference the augmented content item data.
- the non-fungible token data can then be registered with a blockchain.
- Registering the non-fungible token data can include minting a non-fungible token on the blockchain.
- the blockchain can be associated with a blockchain computing system.
- the blockchain computing system can include a decentralized and distributed computing system.
- the systems and methods can include adding the non-fungible token data to a search database.
- the search database can then be queried in response to receiving a search input.
- the search database can include non-fungible token content items and unminted content items.
- the non-fungible token content items can be more heavily weighted and, therefore, more highly ranked when pulled for search purposes.
- the search database may hide other content items that are substantially similar to and/or the same as the content item and/or the augmented content item.
- the systems and methods can include obtaining a search query.
- a plurality of search results responsive to the search query can then be determined.
- the plurality of search results can include a particular search result associated with the augmented content item data.
- One or more other search results associated with other content data can be determined to include the content-specific identifier.
- the augmented content item data can be provided for display without providing the one or more other search results.
- the systems and methods disclosed herein can be utilized to mint a content item with an embedded identifier.
- the minted content item can then be obtained by a search engine in response to a search query.
- the minted content item can be upranked while unminted content items may be downranked.
- unminted content items that are substantially similar to or the same as the minted content item may be hidden while the minted content item is provided for display.
- the unminted content items can be provided for display with a link to the minted content item.
- the minted and/or the unminted content items may be provided for display with respective labels.
- the systems and methods can include minting every content item added to a web platform to provide ownership for every content item added to the web platform.
- the systems and methods disclosed herein can be utilized to track the use of advertisement content.
- the systems and methods disclosed herein can be utilized to track content items, which can allow for content creators to identify other uses of their content and request take downs and/or a portion of the created revenue.
- Search platforms, social media platforms, and/or other web platforms may enforce the permissions by storing and/or identifying the permissions.
- the web platforms may check a blockchain to determine if a newly added content item is associated with a non-fungible token and/or is substantially similar to a digital resource of a non-fungible token.
- displaying the content item can include displaying a card associated with the content item.
- the “front” of the card can include a preview of the content item, and the “back” of the card can include the one or more permissions associated with the content item.
- a plurality of content items may be categorized based on their permissions.
- a search results page may provide search results with different permissions in different display panels.
- the search may be filtered by selected permissions.
- non-fungible tokens on search surfaces.
- non-fungible token content may be elevated over non-NFT versions of the same content.
- non-NFT versions may be hidden.
- the systems and methods disclosed herein can include providing one or more tools to a content owner to control display of the NFT content.
- the systems and methods may be utilized to digital resources being generated and provided throughout the internet.
- the digital resources can be augmented to embed a content ID or other content fingerprint.
- a smart contract can be generated for the digital resource, which can then be embedded on a blockchain and attached to the digital resource.
- the smart contract may be descriptive of what other users and/or other systems can do with the digital resource.
- the systems and methods of the present disclosure provide a number of technical effects and benefits.
- the system and methods can provide systems and methods for generating non-fungible token data with embedded permissions.
- the systems and methods disclosed herein can leverage a blockchain for generating a non-fungible token that embeds the permissions such that the permissions are easily identifiable for display with the content item.
- Another technical benefit of the systems and methods of the present disclosure is the ability to leverage identified permission data for informing third parties of permissions associated with a content item.
- the systems and methods disclosed herein can process one or more user inputs associated with a content item, determine a non-fungible token associated with content item, determine one or more permissions associated with the content item, and provide an informational display associated with the one or more permissions.
- content items may be shared throughout the internet based on the one or more permissions and/or with the one or more permissions being continually tracked during republishing.
- Another example of technical effect and benefit relates to improved computational efficiency and improvements in the functioning of a computing system.
- the systems and methods disclosed herein can leverage the embedded permission data and content-specific identifiers to provide a continuous link to the content item without the computational expense of standard search.
- FIG. 1 A depicts a block diagram of an example computing system 100 that performs digital rights management according to example embodiments of the present disclosure.
- the system 100 includes a user computing system 130 , a server computing system 110 , a creator computing system 150 , and a blockchain computing system 170 that are communicatively coupled over a network 180 .
- the user computing system 130 can be any type of computing device, such as, for example, a personal computing device (e.g., laptop or desktop), a mobile computing device (e.g., smartphone or tablet), a gaming console or controller, a wearable computing device, an embedded computing device, or any other type of computing device.
- a personal computing device e.g., laptop or desktop
- a mobile computing device e.g., smartphone or tablet
- a gaming console or controller e.g., a gaming console or controller
- a wearable computing device e.g., an embedded computing device, or any other type of computing device.
- the user computing system 130 includes one or more processors 132 and a memory 134 .
- the one or more processors 132 can be any suitable processing device (e.g., a processor core, a microprocessor, an ASIC, a FPGA, a controller, a microcontroller, etc.) and can be one processor or a plurality of processors that are operatively connected.
- the memory 134 can include one or more non-transitory computer-readable storage mediums, such as RAM, ROM, EEPROM, EPROM, flash memory devices, magnetic disks, etc., and combinations thereof.
- the memory 134 can store data 136 and instructions 138 which are executed by the processor 132 to cause the user computing system 130 to perform operations.
- the user computing system 130 can also include one or more user input components that receive user input.
- the user input component can be a touch-sensitive component (e.g., a touch-sensitive display screen or a touch pad) that is sensitive to the touch of a user input object (e.g., a finger or a stylus).
- the touch-sensitive component can serve to implement a virtual keyboard.
- Other example user input components include a microphone, a traditional keyboard, or other means by which a user can provide user input.
- the server computing system 110 includes one or more processors 112 and a memory 114 .
- the one or more processors 112 can be any suitable processing device (e.g., a processor core, a microprocessor, an ASIC, a FPGA, a controller, a microcontroller, etc.) and can be one processor or a plurality of processors that are operatively connected.
- the memory 114 can include one or more non-transitory computer-readable storage mediums, such as RAM, ROM, EEPROM, EPROM, flash memory devices, magnetic disks, etc., and combinations thereof.
- the memory 114 can store data 118 and instructions 116 which are executed by the processor 112 to cause the server computing system 110 to perform operations.
- the server computing system 110 includes or is otherwise implemented by one or more server computing devices. In instances in which the server computing system 110 includes plural server computing devices, such server computing devices can operate according to sequential computing architectures, parallel computing architectures, or some combination thereof.
- the blockchain computing system 170 includes one or more processors and a memory.
- the one or more processors can be any suitable processing device (e.g., a processor core, a microprocessor, an ASIC, a FPGA, a controller, a microcontroller, etc.) and can be one processor or a plurality of processors that are operatively connected.
- the memory can include one or more non-transitory computer-readable storage mediums, such as RAM, ROM, EEPROM, EPROM, flash memory devices, magnetic disks, etc., and combinations thereof.
- the memory can store data and instructions which are executed by the processor to cause the blockchain computing system 170 to perform operations.
- the blockchain computing system 170 includes or is otherwise implemented by one or more server computing devices.
- the network 180 can be any type of communications network, such as a local area network (e.g., intranet), wide area network (e.g., Internet), or some combination thereof and can include any number of wired or wireless links.
- communication over the network 180 can be carried via any type of wired and/or wireless connection, using a wide variety of communication protocols (e.g., TCP/IP, HTTP, SMTP, FTP), encodings or formats (e.g., HTML, XML), and/or protection schemes (e.g., VPN, secure HTTP, SSL).
- the computing system 100 can include a number of applications (e.g., applications 1 through N). Each application can be in communication with a central intelligence layer.
- Example applications can include a text messaging application, an email application, a dictation application, a virtual keyboard application, a browser application, etc.
- each application can communicate with the central intelligence layer (and model(s) stored therein) using an API (e.g., a common API across all applications).
- the central intelligence layer can communicate with a central device data layer.
- the central device data layer can be a centralized repository of data for the computing system 100 .
- the central device data layer can communicate with a number of other components of the computing device, such as, for example, one or more sensors, a context manager, a device state component, and/or additional components.
- the central device data layer can communicate with each device component using an API (e.g., a private API).
- FIG. 1 A depicts an exemplary computing system 100 that can be used to implement a digital rights management system according to aspects of the present disclosure.
- the system 100 has a user-server architecture that includes a server 110 that communicates with one or more user computing systems 130 over a network 180 .
- the present disclosure can be implemented using other suitable architectures, which can include any number of computing systems communicating over a network 180 .
- the system 100 includes a server 110 , such as, for example, a web server.
- the server 110 can be one or more computing devices that are implemented as a parallel computing system and/or a distributed computing system. In particular, multiple computing devices can act together as a single server 110 .
- the server 110 can have one or more processor(s) 112 and a memory 114 .
- the server 110 can also include a network interface used to communicate with one or more remote computing devices (e.g., user devices) 130 over a network 180 .
- the processor(s) 112 can be any suitable processing device, such as a microprocessor, microcontroller, integrated circuit, or other suitable processing device.
- the memory 114 can include any suitable computing system or media, including, but not limited to, non-transitory computer-readable media, RAM, ROM, hard drives, flash drives, or other memory devices.
- the memory 114 can store information accessible by processor(s) 112 , including instructions 116 that can be executed by processor(s) 112 .
- the instructions 116 can be any set of instructions that when executed by the processor(s) 112 , cause the processor(s) 112 to provide desired functionality.
- the instructions 116 can be executed by the processor(s) 112 to implement a digital rights management system.
- the user profile database 120 can be configured to store a plurality of user profiles associated with a plurality of users utilizing one or more user computing systems 130 .
- the user profile database 120 can be configured to be utilized for facilitating one or more interactions.
- the facilitation of the one or more interactions can involve the use of a blockchain application programming interface (API) 122 to send data to and receive data from a blockchain computing system 170 .
- API application programming interface
- a server computing system 110 can utilize the blockchain API 122 to update one or more ledgers 172 of the blockchain computing system 170 .
- the one or more ledgers 172 can be associated with one or more tokens 174 .
- the one or more tokens 174 can include one or more non-fungible tokens, which can include scripts associated with a digital asset (e.g., image data, video data, text data, latent encoding data, domain data, audio data, augmented-reality asset rendering data, and/or virtual-reality asset rendering data).
- the script can reference a specific digital asset that is provided for sale.
- the digital asset can include image data, text data, video data, latent encoding data, a domain name, a virtual property, an augmented-reality asset, a virtual-reality asset (e.g., a virtual-reality environment and/or a virtual-reality object for interaction in an environment), a smart contract, a physical item authentication, etc.
- the one or more ledgers 172 can be associated with cryptocurrency that can be utilized to make transactions in a physical marketplace and/or a virtual marketplace.
- element can refer to computer logic utilized to provide desired functionality.
- any element, function, and/or instructions can be implemented in hardware, application specific circuits, firmware and/or software controlling a general purpose processor.
- the elements or functions are program code files stored on the storage device, loaded into memory and executed by a processor or can be provided from computer program products, for example computer executable instructions, that are stored in a tangible computer-readable storage medium such as RAM, hard disk or optical or magnetic media.
- Memory 114 can also include data 118 that can be retrieved, manipulated, created, or stored by processor(s) 112 .
- the data 118 can include search result data, ranking data, image data (e.g., digital maps, satellite images, aerial photographs, street-level photographs, synthetic models, paintings, personal images, portraits, etc.), video data, audio data, text data (e.g., books, articles, blogs, poems, etc.), latent encoding data, blockchain address data, tables, vector data (e.g., vector representations of roads, parcels, buildings, etc.), point of interest data (e.g., locales such as islands, cities, restaurants, hospitals, parks, hotels, and schools), or other data or related information.
- the data 118 can be used to access information and data associated with a specific digital asset, website, search result, blockchain, etc.
- the data 118 can be stored in one or more databases.
- the one or more databases can be connected to the server 110 by a high bandwidth LAN or WAN, or can also be connected to server 110 through network 180 .
- the one or more databases can be split up so that they are located in multiple locales.
- the server 110 can exchange data with one or more user computing systems 130 over the network 180 .
- user computing systems 130 can be any suitable type of computing device, such as a general purpose computer, special purpose computer, navigational device, laptop, desktop, integrated circuit, mobile device, smartphone, tablet, wearable-computing devices, a display with one or more processors coupled thereto and/or embedded therein, or other suitable computing device.
- the user computing system 130 can be multiple computing devices acting together to perform operations or computing actions.
- a user computing system 130 can include a processor(s) 132 and a memory 134 .
- the memory 134 can store information accessible by processor(s) 132 , including instructions that can be executed by processor(s) and data.
- memory 134 can store data 136 and instructions 138 .
- Instructions 138 can provide instructions for implementing a browser, a non-fungible token purchase, and/or a plurality of other functions.
- the user of user computing system 130 can exchange data with server 110 by using the browser to visit a website accessible at a particular web-address.
- the digital rights management system of the present disclosure can be provided as an element of a user interface of a website and/or application.
- the data 136 can include data related to running a specialized application on the user computing system 130 .
- the specialized application can be used to exchange data with server 110 over the network 160 .
- the data 136 can include user-device-readable code for providing and implementing aspects of the present disclosure. Additionally and/or alternatively, the data 136 can include data related to previously inputted or received data. For example, the data 136 can include data related to past occurrences of the special application.
- the user computing system 130 can include various user input devices for receiving information from a user, such as a touch screen, touch pad, data entry keys, speakers, mouse, motion sensor, and/or a microphone suitable for voice recognition. Further, the user computing system 130 can have a display for presenting information, such as a user interface, displaying a digital asset, displaying pop-ups or application elements displayed in an interface, and/or other forms of information.
- the user computing system 130 can also include a user profile 140 that can be used to identify a user of the user computing system 130 .
- the user profile 140 can be optionally used by the user to make one or more transactions which can then be recorded on one or more ledgers 172 of the blockchain computing system 170 .
- the user profile 140 can be descriptive of user information, which can include identification numbers and/or payment account information.
- the user profile 140 can include data associated with a crypto wallet, which may be linked to a browser application via an application extension and/or embedding.
- the user computing system 130 can further include a graphics processing unit. Graphics processing unit can be used by processor 132 to generate the non-fungible token data and/or provide a user interface for viewing and interacting with permissions. In some embodiments, the user computing system 130 performs any and all user interface display or generation.
- the user computing system 130 can include a network interface for communicating with a server 110 over a network 180 .
- Network interface can include any components or configuration suitable for communication with server 110 over network 180 , including, for example, one or more ports, transmitters, wireless cards, controllers, physical layer components, or other items for communication according to any currently known or future developed communications protocol or technology.
- the network 180 can be any type of communications network, such as a local area network (e.g., intranet), wide area network (e.g., Internet), or some combination thereof.
- the network 180 can also include a direct connection between a client device 130 and the server 110 .
- communication between the server 110 and a client device 130 can be carried via network interface using any type of wired and/or wireless connection, using a variety of communication protocols (e.g., TCP/IP, HTTP), encodings or formats (e.g., HTML, XML), and/or protection schemes (e.g., VPN, secure HTTP, SSL).
- the exemplary computing system 100 can include one or more creator computing systems 150 .
- the one or more creator computing systems 150 can be utilized for generating images, videos, prose, poetry, audio, etc., which can then be provided for sale.
- the one or more creator computing systems 150 can include one or more processors 152 , which can be utilized to execute one or more operations to implement the systems and methods disclosed herein.
- the one or more creator computing systems 150 can include one or more memory components 154 , which can be utilized to store data 156 and one or more instructions 158 .
- the data 156 can include data related to one or more applications, one or more media datasets, etc.
- the instructions 158 can include one or more operations for implementing the systems and methods disclosed herein.
- the one or more creator computing systems 150 can store data associated with one or more digital assets 160 and/or one or more creator profiles 162 .
- the one or more digital assets 160 can include text data, image data, video data, audio data, latent encoding data, domain data, or a variety of other data formats.
- the one or more creator profiles 162 can include information associated with one or more “creators” of the one or more digital assets 160 .
- the one or more creator profiles 162 can include identification data, transaction data, and/or crypto wallet data.
- the exemplary computing system 100 can include one or more blockchain computing systems 170 .
- the one or more blockchain computing systems 170 can include a plurality of computing devices being utilized for decentralized data storage, such that a plurality of “blocks” can be distributed throughout a network of computing devices to provide a secure system for data storage, which can include one or more ledgers 172 and one or more tokens 174 .
- each of the one or more tokens 174 can be associated with at least a portion of the one or more ledgers 172 .
- Blockchain can refer to a system configured to securely record information.
- the blockchain can include a decentralized system that can render changing information extremely difficult.
- the blockchain can include a digital ledger of transactions that can be duplicated and distributed across a network of computing systems. Each block in the chain can include a number of transactions. When a new transaction occurs on the blockchain, a record of that transaction can be added to every computing device's ledger.
- the blockchain can be utilized to track the exchange of currency and/or digital assets via the recording of transactions on the digital ledger, which can be propagated throughout the decentralized system.
- the currency exchanged and tracked via the blockchain computing system 170 can be referred to as cryptocurrency.
- the tokens 174 can include one or more non-fungible tokens.
- the non-fungible tokens can be minted on a blockchain associated with the blockchain computing system 170 .
- a non-fungible token can be a certificate of authenticity of a digital asset. NFTs can be non-interchangeable thus making their worth depend on the price anyone may be willing to pay for the asset. NFTs can be minted on blockchains such that their scarcity and authenticity can be maintained.
- a digital asset can be defined as anything that is stored digitally and can be uniquely identifiable that organizations can use to realize value. Examples of digital assets can include a tweet, a social media comment, documents, audio, images, videos, logos, website domains, slide presentations, spreadsheets, CSS files and formats, executable code, and/or websites.
- FIG. 1 B depicts a block diagram of an example blockchain 50 that may be utilized by the blockchain computing system 170 of the exemplary computing system 100 of FIG. 1 A .
- the example blockchain 50 can include a plurality of blocks that can be utilized to store data with one or more cryptographic features.
- the blockchain 50 can be stored on a decentralized computing system comprising a plurality of computing devices.
- the blockchain 50 can be a public blockchain (e.g., a blockchain that is open without access restrictions such that anyone with an internet access can send transactions or validate transactions as part of the decentralized, distributed system), a private blockchain (e.g., a blockchain that provides access based on permissions set by network administrators), or a hybrid blockchain (e.g., a blockchain with a combination of blocks with no restrictions and blocks with restrictions).
- the blockchain 50 can include proof of work features that can include one or more cryptographic forms of proof.
- the proof of work can be provided upon a request to update the blockchain 50 (e.g., a request to update the ledgers based on a new transaction).
- the proof of work can convey that a certain device or group of devices have performed a certain amount of computation, which can then be validated by other parties.
- the blockchain 50 can be updated, or may remain unchanged in response to a failure to validate.
- the proof of work feature can be utilized to mitigate the computational cost of every device in the system having to perform the same computational functions and checks for determining a request is valid for updating the blockchain 50 .
- Each block can include a hash, a previous hash associated with the hash of the previous block, and data.
- each block can include a nonce.
- a hash can be a hash value of a fixed length that can be a fingerprint for the particular block. The hash value can be generated based on a hash function and may be changed each time a change is made to the data of that particular block.
- the previous hash can include a hash value of the block immediately preceding the particular block. The previous hash can be utilized to ensure the downstream ground truth stays unchanged unless proper validation occurs.
- the data can include transaction data (e.g., a transaction ledger), a timestamp, a value associated with a cryptocurrency value, a non-fungible token (e.g., a non-fungible token including a script that references a digital asset, nonce data, and/or general blockchain data.
- transaction data e.g., a transaction ledger
- timestamp e.g., a value associated with a cryptocurrency value
- a non-fungible token e.g., a non-fungible token including a script that references a digital asset
- nonce data e.g., a script that references a digital asset
- general blockchain data e.g., a blockchain data that specifies a script that references a digital asset
- Nonce i.e., a number only used once
- the nonce can be a number that blockchain miners are solving for, in order to receive an incentive (e.g., cryptocurrency).
- the blockchain 50 can include one or more security protocols and/or features.
- the blockchain 50 can include a cryptographic system.
- the blockchain 50 can validate the blockchain 50 is valid by ensuring the stored previous hash stored in the block matches the hash value of the previous block from the last block back to the first block (e.g., the genesis block).
- the blockchain 50 can include proof of work validation that can rely on verifying proof of computation before implementing a change to the stored data (e.g., the stored ledger). Proof of work validation can take seconds, minutes, and/or hours based in part on the number of blocks in the blockchain 50 .
- the blockchain 50 can be implemented on a distributed, decentralized computing system.
- each computing device in the distributed, decentralized computing system can store a portion of (e.g., a block of the plurality of blocks) or all of the blocks in the blockchain 50 . Therefore, the system can verify data by ensuring the data is uniform across most, if not all, of the distributed system. Each node of the distributed system can be checked for tampering before adding new data.
- the data can include data associated with a cryptocurrency value (e.g., a ledger associated with a specific cryptocurrency value), data associated with a digital asset (e.g., a non-fungible token minted on the blockchain 50 that can include a script associated with the digital asset), data associated with a smart contract (e.g., a smart contract that includes conditions that automatically initiates an action in response to a criteria being met), and/or timestamp data (e.g., timestamp data for block creation, minting, a transaction, etc.).
- a cryptocurrency value e.g., a ledger associated with a specific cryptocurrency value
- data associated with a digital asset e.g., a non-fungible token minted on the blockchain 50 that can include a script associated with the digital asset
- data associated with a smart contract e.g., a smart contract that includes conditions that automatically initiates an action in response to a criteria being met
- timestamp data e.g., timestamp data for block creation, mint
- FIG. 1 B depicts a first block 10 , a second block 20 , a third block 30 , a fourth block 40 , and an nth block 60 .
- the first block 10 can be a genesis block (e.g., a first overall block in the blockchain).
- the first block 10 can include a respective first hash 12 (e.g., a hash value associated with the first block 10 ).
- the first block 10 may include a first previous hash 14 (e.g., if the first block 10 has a block before it in the blockchain 50 , then the hash of the previous block can be stored on the first block 10 ). Additionally and/or alternatively, the first block 10 can include data 16 and nonce 18 .
- the second block 20 can follow the first block 10 .
- the second block 20 can include a respective second hash 22 (e.g., a hash value associated with the second block 20 ).
- the second block 20 may include a second previous hash 24 (e.g., the second previous hash 24 can be the same as, or reference, the first hash 12 ). Additionally and/or alternatively, the second block 20 can include data 26 and nonce 28 .
- the third block 30 can follow the second block 20 .
- the third block 30 can include a respective third hash 32 (e.g., a hash value associated with the third block 30 ).
- the third block 30 may include a third previous hash 34 (e.g., the third previous hash 34 can be the same as, or reference, the second hash 22 ). Additionally and/or alternatively, the third block 30 can include data 36 and nonce 38 .
- the fourth block 40 , the nth block 60 , and other potential blocks can include a respective hash, a respective previous hash, and data.
- the first data 16 , the second data 26 , the third data 36 , and the data of the other blocks can include overlapping data, can differ, and/or be the same such that the data is duplicative for all blocks.
- each block can be associated with a different transaction (e.g., a different minting, a different sale, etc.).
- the first nonce 18 , the second nonce 28 , the third nonce 38 , and the nonce's of the other blocks can differ and may be solved during mining.
- the data in each block can include ledger data, which can include a timestamp, asset and/or cryptocurrency exchanged, actors involved in transaction, and/or a variety of other information.
- a plurality of different blockchains can be utilized for the systems and methods disclosed herein.
- the different blockchains can include different configurations.
- the different blockchains can include parallel chains, side chains, shared blocks, differing chains, varying permissions, varying purposes, varying number of blocks, and/or varying hash functions and/or varying hashing value lengths.
- the systems and methods can include one or more machine-learned model computing systems 900 .
- the one or more machine-learned models can be utilized for a variety of tasks for enabling token data identification, obtainment, indexing, and deduplication.
- FIG. 9 A depicts a block diagram of an example computing system 900 that performs digital rights management according to example embodiments of the present disclosure.
- the system 900 includes a user computing device 902 , a server computing system 930 , and a training computing system 950 that are communicatively coupled over a network 980 .
- the user computing device 902 can be any type of computing device, such as, for example, a personal computing device (e.g., laptop or desktop), a mobile computing device (e.g., smartphone or tablet), a gaming console or controller, a wearable computing device, an embedded computing device, or any other type of computing device.
- a personal computing device e.g., laptop or desktop
- a mobile computing device e.g., smartphone or tablet
- a gaming console or controller e.g., a gaming console or controller
- a wearable computing device e.g., an embedded computing device, or any other type of computing device.
- the user computing device 902 includes one or more processors 912 and a memory 914 .
- the one or more processors 912 can be any suitable processing device (e.g., a processor core, a microprocessor, an ASIC, a FPGA, a controller, a microcontroller, etc.) and can be one processor or a plurality of processors that are operatively connected.
- the memory 914 can include one or more non-transitory computer-readable storage mediums, such as RAM, ROM, EEPROM, EPROM, flash memory devices, magnetic disks, etc., and combinations thereof.
- the memory 914 can store data 916 and instructions 918 which are executed by the processor 912 to cause the user computing device 902 to perform operations.
- the user computing device 902 can store or include one or more permissions models 920 .
- the permissions models 920 can be or can otherwise include various machine-learned models such as neural networks (e.g., deep neural networks) or other types of machine-learned models, including non-linear models and/or linear models.
- Neural networks can include feed-forward neural networks, recurrent neural networks (e.g., long short-term memory recurrent neural networks), convolutional neural networks or other forms of neural networks.
- Example permissions models 920 are discussed with reference to FIGS. 2 - 5 .
- the one or more permissions models 920 can be received from the server computing system 930 over network 980 , stored in the user computing device memory 914 , and then used or otherwise implemented by the one or more processors 912 .
- the user computing device 902 can implement multiple parallel instances of a single permissions model 920 (e.g., to perform parallel content item dataset generation across multiple instances of content items).
- the one or more permissions models can generate one or more non-fungible token datasets.
- the one or more non-fungible token datasets can include augmented content items with embedded one or more content-specific identifiers.
- the one or more non-fungible token datasets can include embedded permission data that can be identified and provided with the content item.
- one or more permissions models 940 can be included in or otherwise stored and implemented by the server computing system 930 that communicates with the user computing device 902 according to a client-server relationship.
- the permissions models 940 can be implemented by the server computing system 940 as a portion of a web service (e.g., a digital rights management service).
- a web service e.g., a digital rights management service.
- one or more models 920 can be stored and implemented at the user computing device 902 and/or one or more models 940 can be stored and implemented at the server computing system 930 .
- the user computing device 902 can also include one or more user input components 922 that receives user input.
- the user input component 922 can be a touch-sensitive component (e.g., a touch-sensitive display screen or a touch pad) that is sensitive to the touch of a user input object (e.g., a finger or a stylus).
- the touch-sensitive component can serve to implement a virtual keyboard.
- Other example user input components include a microphone, a traditional keyboard, or other means by which a user can provide user input.
- the server computing system 930 includes one or more processors 932 and a memory 934 .
- the one or more processors 932 can be any suitable processing device (e.g., a processor core, a microprocessor, an ASIC, a FPGA, a controller, a microcontroller, etc.) and can be one processor or a plurality of processors that are operatively connected.
- the memory 934 can include one or more non-transitory computer-readable storage mediums, such as RAM, ROM, EEPROM, EPROM, flash memory devices, magnetic disks, etc., and combinations thereof.
- the memory 934 can store data 936 and instructions 938 which are executed by the processor 932 to cause the server computing system 930 to perform operations.
- the server computing system 930 includes or is otherwise implemented by one or more server computing devices. In instances in which the server computing system 930 includes plural server computing devices, such server computing devices can operate according to sequential computing architectures, parallel computing architectures, or some combination thereof.
- the server computing system 930 can store or otherwise include one or more machine-learned permissions models 940 .
- the models 940 can be or can otherwise include various machine-learned models.
- Example machine-learned models include neural networks or other multi-layer non-linear models.
- Example neural networks include feed forward neural networks, deep neural networks, recurrent neural networks, and convolutional neural networks.
- Example models 940 are discussed with reference to FIGS. 2 - 5 .
- the user computing device 902 and/or the server computing system 930 can train the models 920 and/or 940 via interaction with the training computing system 950 that is communicatively coupled over the network 980 .
- the training computing system 950 can be separate from the server computing system 930 or can be a portion of the server computing system 930 .
- the training computing system 950 includes one or more processors 952 and a memory 954 .
- the one or more processors 952 can be any suitable processing device (e.g., a processor core, a microprocessor, an ASIC, a FPGA, a controller, a microcontroller, etc.) and can be one processor or a plurality of processors that are operatively connected.
- the memory 954 can include one or more non-transitory computer-readable storage mediums, such as RAM, ROM, EEPROM, EPROM, flash memory devices, magnetic disks, etc., and combinations thereof.
- the memory 954 can store data 956 and instructions 958 which are executed by the processor 952 to cause the training computing system 950 to perform operations.
- the training computing system 950 includes or is otherwise implemented by one or more server computing devices.
- the training computing system 950 can include a model trainer 960 that trains the machine-learned models 920 and/or 940 stored at the user computing device 902 and/or the server computing system 930 using various training or learning techniques, such as, for example, backwards propagation of errors.
- a loss function can be backpropagated through the model(s) to update one or more parameters of the model(s) (e.g., based on a gradient of the loss function).
- Various loss functions can be used such as mean squared error, likelihood loss, cross entropy loss, hinge loss, and/or various other loss functions.
- Gradient descent techniques can be used to iteratively update the parameters over a number of training iterations.
- performing backwards propagation of errors can include performing truncated backpropagation through time.
- the model trainer 960 can perform a number of generalization techniques (e.g., weight decays, dropouts, etc.) to improve the generalization capability of the models being trained.
- the model trainer 960 can train the permissions models 920 and/or 940 based on a set of training data 962 .
- the training data 962 can include, for example, example permissions, example content-specific identifiers, ground truth training data, ground truth labels, and/or ground truth augmented content items.
- the training examples can be provided by the user computing device 902 .
- the model 920 provided to the user computing device 902 can be trained by the training computing system 950 on user-specific data received from the user computing device 902 . In some instances, this process can be referred to as personalizing the model.
- the model trainer 960 includes computer logic utilized to provide desired functionality.
- the model trainer 960 can be implemented in hardware, firmware, and/or software controlling a general purpose processor.
- the model trainer 960 includes program files stored on a storage device, loaded into a memory and executed by one or more processors.
- the model trainer 960 includes one or more sets of computer-executable instructions that are stored in a tangible computer-readable storage medium such as RAM hard disk or optical or magnetic media.
- the network 980 can be any type of communications network, such as a local area network (e.g., intranet), wide area network (e.g., Internet), or some combination thereof and can include any number of wired or wireless links.
- communication over the network 980 can be carried via any type of wired and/or wireless connection, using a wide variety of communication protocols (e.g., TCP/IP, HTTP, SMTP, FTP), encodings or formats (e.g., HTML, XML), and/or protection schemes (e.g., VPN, secure HTTP, SSL).
- the machine-learned models described in this specification may be used in a variety of tasks, applications, and/or use cases.
- the input to the machine-learned model(s) of the present disclosure can be image data.
- the machine-learned model(s) can process the image data to generate an output.
- the machine-learned model(s) can process the image data to generate an image recognition output (e.g., a recognition of the image data, a latent embedding of the image data, an encoded representation of the image data, a hash of the image data, etc.).
- the machine-learned model(s) can process the image data to generate an image segmentation output.
- the machine-learned model(s) can process the image data to generate an image classification output.
- the machine-learned model(s) can process the image data to generate an image data modification output (e.g., an alteration of the image data, etc.).
- the machine-learned model(s) can process the image data to generate an encoded image data output (e.g., an encoded and/or compressed representation of the image data, etc.).
- the machine-learned model(s) can process the image data to generate an upscaled image data output.
- the machine-learned model(s) can process the image data to generate a prediction output.
- the input to the machine-learned model(s) of the present disclosure can be text or natural language data.
- the machine-learned model(s) can process the text or natural language data to generate an output.
- the machine-learned model(s) can process the natural language data to generate a language encoding output.
- the machine-learned model(s) can process the text or natural language data to generate a latent text embedding output.
- the machine-learned model(s) can process the text or natural language data to generate a translation output.
- the machine-learned model(s) can process the text or natural language data to generate a classification output.
- the machine-learned model(s) can process the text or natural language data to generate a textual segmentation output.
- the machine-learned model(s) can process the text or natural language data to generate a semantic intent output.
- the machine-learned model(s) can process the text or natural language data to generate an upscaled text or natural language output (e.g., text or natural language data that is higher quality than the input text or natural language, etc.).
- the machine-learned model(s) can process the text or natural language data to generate a prediction output.
- the input to the machine-learned model(s) of the present disclosure can be speech data.
- the machine-learned model(s) can process the speech data to generate an output.
- the machine-learned model(s) can process the speech data to generate a speech recognition output.
- the machine-learned model(s) can process the speech data to generate a speech translation output.
- the machine-learned model(s) can process the speech data to generate a latent embedding output.
- the machine-learned model(s) can process the speech data to generate an encoded speech output (e.g., an encoded and/or compressed representation of the speech data, etc.).
- an encoded speech output e.g., an encoded and/or compressed representation of the speech data, etc.
- the machine-learned model(s) can process the speech data to generate an upscaled speech output (e.g., speech data that is higher quality than the input speech data, etc.).
- the machine-learned model(s) can process the speech data to generate a textual representation output (e.g., a textual representation of the input speech data, etc.).
- the machine-learned model(s) can process the speech data to generate a prediction output.
- the input to the machine-learned model(s) of the present disclosure can be latent encoding data (e.g., a latent space representation of an input, etc.).
- the machine-learned model(s) can process the latent encoding data to generate an output.
- the machine-learned model(s) can process the latent encoding data to generate a recognition output.
- the machine-learned model(s) can process the latent encoding data to generate a reconstruction output.
- the machine-learned model(s) can process the latent encoding data to generate a search output.
- the machine-learned model(s) can process the latent encoding data to generate a reclustering output.
- the machine-learned model(s) can process the latent encoding data to generate a prediction output.
- the input to the machine-learned model(s) of the present disclosure can be statistical data.
- the machine-learned model(s) can process the statistical data to generate an output.
- the machine-learned model(s) can process the statistical data to generate a recognition output.
- the machine-learned model(s) can process the statistical data to generate a prediction output.
- the machine-learned model(s) can process the statistical data to generate a classification output.
- the machine-learned model(s) can process the statistical data to generate a segmentation output.
- the machine-learned model(s) can process the statistical data to generate a segmentation output.
- the machine-learned model(s) can process the statistical data to generate a visualization output.
- the machine-learned model(s) can process the statistical data to generate a diagnostic output.
- the machine-learned model(s) can be configured to perform a task that includes encoding input data for reliable and/or efficient transmission or storage (and/or corresponding decoding).
- the task may be audio compression task.
- the input may include audio data and the output may comprise compressed audio data.
- the input includes visual data (e.g., one or more images or videos), the output comprises compressed visual data, and the task is a visual data compression task.
- the task may comprise generating an embedding for input data (e.g., input audio or visual data).
- the input includes visual data and the task is a computer vision task.
- the input includes pixel data for one or more images and the task is an image processing task.
- the image processing task can be image classification, where the output is a set of scores, each score corresponding to a different object class and representing the likelihood that the one or more images depict an object belonging to the object class.
- the image processing task may be object detection, where the image processing output identifies one or more regions in the one or more images and, for each region, a likelihood that region depicts an object of interest.
- the image processing task can be image segmentation, where the image processing output defines, for each pixel in the one or more images, a respective likelihood for each category in a predetermined set of categories.
- the set of categories can be foreground and background.
- the set of categories can be object classes.
- the image processing task can be depth estimation, where the image processing output defines, for each pixel in the one or more images, a respective depth value.
- the image processing task can be motion estimation, where the network input includes multiple images, and the image processing output defines, for each pixel of one of the input images, a motion of the scene depicted at the pixel between the images in the network input.
- the input includes audio data representing a spoken utterance and the task is a speech recognition task.
- the output may comprise a text output which is mapped to the spoken utterance.
- the task comprises encrypting or decrypting input data.
- the task comprises a microprocessor performance task, such as branch prediction or memory address translation.
- FIG. 9 A illustrates one example computing system that can be used to implement the present disclosure.
- the user computing device 902 can include the model trainer 960 and the training dataset 962 .
- the models 920 can be both trained and used locally at the user computing device 902 .
- the user computing device 902 can implement the model trainer 960 to personalize the models 920 based on user-specific data.
- FIG. 9 B depicts a block diagram of an example computing device 970 that performs according to example embodiments of the present disclosure.
- the computing device 970 can be a user computing device or a server computing device.
- the computing device 970 includes a number of applications (e.g., applications 1 through N). Each application contains its own machine learning library and machine-learned model(s). For example, each application can include a machine-learned model.
- Example applications include a text messaging application, an email application, a dictation application, a virtual keyboard application, a browser application, etc.
- each application can communicate with a number of other components of the computing device, such as, for example, one or more sensors, a context manager, a device state component, and/or additional components.
- each application can communicate with each device component using an API (e.g., a public API).
- the API used by each application is specific to that application.
- FIG. 9 C depicts a block diagram of an example computing device 990 that performs according to example embodiments of the present disclosure.
- the computing device 990 can be a user computing device or a server computing device.
- the computing device 990 includes a number of applications (e.g., applications 1 through N). Each application is in communication with a central intelligence layer. Example applications include a text messaging application, an email application, a dictation application, a virtual keyboard application, a browser application, etc. In some implementations, each application can communicate with the central intelligence layer (and model(s) stored therein) using an API (e.g., a common API across all applications).
- applications e.g., applications 1 through N.
- Each application is in communication with a central intelligence layer.
- Example applications include a text messaging application, an email application, a dictation application, a virtual keyboard application, a browser application, etc.
- each application can communicate with the central intelligence layer (and model(s) stored therein) using an API (e.g., a common API across all applications).
- the central intelligence layer includes a number of machine-learned models. For example, as illustrated in FIG. 9 C , a respective machine-learned model (e.g., a model) can be provided for each application and managed by the central intelligence layer. In other implementations, two or more applications can share a single machine-learned model. For example, in some implementations, the central intelligence layer can provide a single model (e.g., a single model) for all of the applications. In some implementations, the central intelligence layer is included within or otherwise implemented by an operating system of the computing device 990 .
- a respective machine-learned model e.g., a model
- two or more applications can share a single machine-learned model.
- the central intelligence layer can provide a single model (e.g., a single model) for all of the applications.
- the central intelligence layer is included within or otherwise implemented by an operating system of the computing device 990 .
- the central intelligence layer can communicate with a central device data layer.
- the central device data layer can be a centralized repository of data for the computing device 990 .
- the central device data layer can communicate with a number of other components of the computing device, such as, for example, one or more sensors, a context manager, a device state component, and/or additional components.
- the central device data layer can communicate with each device component using an API (e.g., a private API).
- FIG. 2 depicts a block diagram of an example non-fungible token data generation system 200 according to example embodiments of the present disclosure.
- the non-fungible token data generation system 200 is configured to receive a content item and/or a set of input data 204 descriptive of a selected permissions for the content item 202 and, as a result of receipt of the content item 202 and the input data 204 , provide output data that can include non-fungible token data 210 to be added to a non-fungible token database 212 .
- the non-fungible token data generation system 200 can include a user interface 208 that is operable to receive the data that can then be utilized to generate the non-fungible token data 210 .
- the non-fungible token data generation system 200 can obtain a content item 202 .
- the content item 202 can include image data, video data, audio data, text data, augmented reality data, virtual reality data, and/or latent encoding data.
- input data 204 can be obtained.
- the input data 204 can be processed to generate permission data 206 .
- the permission data 206 can be descriptive of one or more selected permissions to be associated with the content item 202 .
- the permission data can dictate how third party computing systems can interact with the content item 202 .
- the content item 202 and/or the input data 204 may be obtained via a user interface 208 .
- the data obtained by the user interface 208 can be processed to generate non-fungible token data 210 .
- the non-fungible token data 210 can include data descriptive of and/or referencing the content item 202 . Additionally and/or alternatively, the non-fungible token data 210 can include data descriptive of a smart contract. In some implementations, the non-fungible token data 210 can include the permission data 206 embedded such that the permission data 206 may be associated with the content item 202 , which can allow the permissions to be surfaced with the content item 202 .
- the non-fungible token data 210 can be registered to a blockchain.
- the non-fungible token data 210 can be added to a non-fungible token database 212 , which can allow the content item 202 and respective permission data 206 to be searchable.
- FIG. 3 depicts an illustration of an example search results page 300 according to example embodiments of the present disclosure.
- the example search results page 300 of FIG. 3 can be provided in a browser application 302 and/or a search engine application.
- the search results page 300 can include a search query input box 304 configured to receive search queries.
- the input of the search query can result in a plurality of search results to be identified, which can include non-fungible token search results and/or general search results not associated with non-fungible tokens.
- the non-fungible token search results can be provided for display in a non-fungible token search results panel 306 .
- the general search results can be provided for display in a general search results panel 308 .
- the first non-fungible token search result 314 can be the highest ranking search result and may be ranked higher that substantially similar general search results such as the fourth general search result 316 .
- the non-fungible token search results and/or the general search results may be interacted with to copy, save, and/or republish the content items. Interacting with the search results can cause a pop-up interface element 312 to be displayed. For example, interacting with the third non-fungible token search result 310 can cause the pop-up interface element 312 to be displayed.
- the pop-up interface element 312 can include information descriptive of the one or more permissions associated with the third non-fungible token search result.
- the pop-up interface element 312 can include one or more selectable options for interacting with the content item of the third non-fungible token search result (e.g., copy, copy with watermark, copy with permissions, redirect to permissions list, purchase non-fungible token, and/or copy with revenue link to inform non-fungible token owner of potential future revenue flow).
- selectable options for interacting with the content item of the third non-fungible token search result e.g., copy, copy with watermark, copy with permissions, redirect to permissions list, purchase non-fungible token, and/or copy with revenue link to inform non-fungible token owner of potential future revenue flow.
- FIG. 4 depicts a block diagram of an example non-fungible token data generation system 400 according to example embodiments of the present disclosure.
- the non-fungible token data generation system 400 is similar to the non-fungible token data generation system 200 of FIG. 2 except that the non-fungible token data generation system 400 further includes augmented content item 408 generation.
- the non-fungible token data generation system 400 can obtain a content item 402 .
- the content item 402 can include image data, video data, audio data, text data, augmented reality data, virtual reality data, and/or latent encoding data.
- the content item 402 can be processed by a content ID block 404 to generate a content ID 406 (e.g., one or more content-specific identifiers).
- the content ID block 404 can include one or more processors and/or one or more encryption blocks.
- the content ID 406 can be configured as a fingerprint specific for the content item 202 . In some implementations, the content ID 406 may be searchable and unique for the particular content item 402 .
- the content item 402 and the content ID 406 can then be utilized to generate an augmented content item 408 .
- the augmented content item 408 can be generated by concatenating the data and/or by one or more machine-learned models.
- the augmented content item 408 can include the content ID 406 embedded into the content item 402 .
- input data 410 can be obtained.
- the input data 410 can be processed to generate permission data 412 .
- the permission data 412 can be descriptive of one or more selected permissions to be associated with the content item 402 .
- the permission data can dictate how third party computing systems can interact with the content item 402 .
- the content item 402 and/or the input data 410 may be obtained via a user interface 414 .
- the data obtained by the user interface 414 can be processed to generate non-fungible token data 416 .
- the non-fungible token data 416 can include data descriptive of and/or referencing the augmented content item 408 . Additionally and/or alternatively, the non-fungible token data 416 can include data descriptive of a smart contract.
- the non-fungible token data 416 can include the permission data 412 embedded such that the permission data 412 may be associated with the augmented content item 408 , which can allow the permissions to be surfaced with the augmented content item 408 .
- the non-fungible token data 416 can be registered to a blockchain.
- the non-fungible token data 416 can be added to a non-fungible token database 418 , which can allow the augmented content item 408 and respective permission data 412 to be searchable.
- FIG. 5 depicts a block diagram of an example search results page generation system 500 according to example embodiments of the present disclosure.
- a search query 502 can be obtained.
- the search query 502 can be processed with a search engine 504 to determine and/or generate a plurality of search results 510 .
- the plurality of search results 510 can include a first search result 512 , a second search result 514 , a third search result 516 , and/or an nth search result 518 .
- the plurality of search results 510 can be filtered and ranked based on responsiveness to the search query, based on one or more contexts, and/or based on whether the search result is a duplicate of a digital resource of a non-fungible token.
- the first search result 512 , the second search result 514 , the third search result 516 , and/or the nth search result 518 can be processed by a filter block 520 .
- the filter block 520 can filter out one or more search results to not be displayed.
- the third search result 516 may be filtered out based on the third search result 516 being descriptive of a content item substantially similar to the content item of the first search result 512 , which may be associated with a non-fungible token.
- the remaining search results can then be utilized to generate a search results page 530 .
- the search results page 530 can then be provided to one or more users.
- FIG. 6 depicts a flow chart diagram of an example method to perform according to example embodiments of the present disclosure.
- FIG. 6 depicts steps performed in a particular order for purposes of illustration and discussion, the methods of the present disclosure are not limited to the particularly illustrated order or arrangement.
- the various steps of the method 600 can be omitted, rearranged, combined, and/or adapted in various ways without deviating from the scope of the present disclosure.
- a computing system can obtain a media content item.
- the media content item can be associated with a particular user.
- the content item can include image data, video data, audio data, text data, and/or latent encoding data.
- the content item may be generated by and/or published by the particular user.
- the content item may be a content item stored locally by the particular user, may be stored in cloud storage for the particular user, and/or may be published on the web (e.g., on a social media website, a blog website, and/or a personal website).
- the computing system can obtain one or more user inputs.
- the one or more user inputs can be associated with the particular user.
- the one or more user inputs can be obtained from a user computing system.
- the one or more user inputs can be inputs to a user interface provided via a server computing system.
- one or more user interface elements can be provided in a content item management platform (e.g., a cloud storage web platform, a social media platform, and/or a content item repository platform).
- the one or more user inputs may be associated with a user interface with one or more options for selecting permissions to be associated with the obtained content item.
- the one or more options can include do not allow republishing or copying, allow republishing or copying if revenue provided to original owner, allow republishing or copying freely, and/or any other form of permissions, which can include caveats manually input by a user.
- the computing system can determine the one or more user inputs are associated with a selection of one or more permissions.
- the one or more permissions can be associated with the media content item.
- the one or more permissions can be associated with permissible interactions with the media content item.
- the permissible interactions can be associated with whether third parties can copy, republish, and/or share the content item.
- the determination can be based on heuristics, deterministic data, and/or one or more machine-learned parameters.
- the computing system can generate non-fungible token data based on the media content item and the one or more permissions.
- One or more references to the media content item may be embedded in the non-fungible token data.
- the one or more permissions can be embedded in the non-fungible token data.
- the one or more permissions can be configured to be identifiable for display with the media content item.
- the non-fungible token data can include smart contract data.
- the payload of the smart contract associated with the smart contract data may be the content item.
- the content item may be viewed as a digital resource that may be transferred based on the criteria of the smart contract.
- the smart contract data can include the one or more permissions.
- the computing system can register the non-fungible token data with a blockchain.
- the blockchain can be associated with a decentralized blockchain computing system.
- the non-fungible token data may be minted to the blockchain and may be associated with an electronic ledger that tracks transactions associated with the non-fungible token data. Additionally and/or alternatively, the non-fungible token data may be processed to generate index data associated with the non-fungible token data. The index data can then be added to a searchable database.
- the computing system can obtain a display request associated with the media content item.
- the non-fungible token data associated with the media content item can be identified.
- the permission data associated with the media content item can then be obtained.
- a display dataset can then be generated.
- the display dataset can include the media content item and the permission data.
- the display dataset can be provided.
- the display request can be associated with a third party computing system.
- the display request can be generated based on a search query processed by a search engine.
- the media content item can be responsive to the search query.
- the computing system can determine the display request complies with the one or more preferences.
- the display dataset can include executable code for providing a user interface for displaying the one or more preferences in response to a selection of the media content item.
- the computing system can obtain a search query from a third party computing system and process the search query to determine a plurality of search results responsive to the search query.
- the plurality of search results can include the media content item.
- the computing system can determine the plurality of search results include one or more particular search results associated with one or more respective other content items that are associated with the media content item, determining ranking data for the plurality of search results based on the one or more respective other content items being associated with the media content item, and providing the plurality of search results for display based on the ranking data.
- the ranking data can be descriptive of non-fungible token search results being provided preference over general search results.
- the media content item can be provided for display before the one or more respective other content items.
- FIG. 7 depicts a flow chart diagram of an example method to perform according to example embodiments of the present disclosure.
- FIG. 7 depicts steps performed in a particular order for purposes of illustration and discussion, the methods of the present disclosure are not limited to the particularly illustrated order or arrangement.
- the various steps of the method 700 can be omitted, rearranged, combined, and/or adapted in various ways without deviating from the scope of the present disclosure.
- a computing system can provide a media content item for display.
- the media content item can be a digital resource associated with a non-fungible token.
- the non-fungible token can be documented on a blockchain.
- the media content item can include image data, video data, text data, multimodal data, audio data, virtual reality data, augmented reality data, and/or latent encoding data.
- the media content item can be provided for display in a user interface.
- the media content item can be provided for display in a user interface of a search results page, a social media platform, a shared content item storage platform, a blog platform, and/or other web platform.
- the media content item may be provided for display in response to a search query.
- the media content item may be provided in a social media feed and/or a news feed.
- the computing system can obtain input data from a user computing system.
- the input data can be descriptive of one or more inputs to interact with the media content item.
- the input data can be descriptive of a request to copy and/or republish the media content item.
- the input data can be descriptive of one or more selections to a user interface, which may include an initial selection of the media content item, then one or more selections to a pop-up interface.
- the computing system can obtain permission data associated with the media content item based on the input data.
- the permission data can be stored on the blockchain.
- the permission data can be descriptive of one or more permissions associated with the media content item.
- the one or more permissions can include one or more parameters for generating a copy of the media content item.
- the computing system can provide a user interface element for display.
- the user interface element can include a notification.
- the notification can be descriptive of the one or more permissions associated with the media content item. Additionally and/or alternatively, the notification may provide one or more options for interacting with the media content item.
- the one or more options can be options that comply with the parameters set by the one or more permissions. For example, the one or more options provided may differ from one media content item to another media content item based on the level of interactions allowed based on the one or more permissions.
- the computing system can obtain additional input data.
- the additional input data can be descriptive of a copy request to generate a copy of the media content item.
- the additional input data and the permission data can be processed to determine a response action.
- the response action can include generating a media content item dataset.
- the media content item dataset can include the permission data embedded in the media content item.
- the response action can include providing a rejection notification. The rejection notification can indicate that generating a copy is against the one or more permissions associated with the media content item.
- FIG. 8 depicts a flow chart diagram of an example method to perform according to example embodiments of the present disclosure.
- FIG. 8 depicts steps performed in a particular order for purposes of illustration and discussion, the methods of the present disclosure are not limited to the particularly illustrated order or arrangement.
- the various steps of the method 800 can be omitted, rearranged, combined, and/or adapted in various ways without deviating from the scope of the present disclosure.
- a computing system can obtain content item data from a user computing system.
- the content item data can be associated with a particular user.
- the content item may be a media content item (e.g., an image, a video, a text string, a song, a virtual-reality asset, and/or an augmented-reality asset).
- the content item can be obtained via a user input, can be extracted from a webpage, and/or can be obtained from a database.
- obtaining the content item data from the user computing system can include accessing a user-specific content item database (e.g., a web storage platform, a local drive, and/or a server storage drive) and providing a mint user interface.
- a user-specific content item database e.g., a web storage platform, a local drive, and/or a server storage drive
- the mint user interface can include one or more selectable interface elements for initiating non-fungible token generation.
- the computing system can obtain permission data associated with the content item data.
- the permission data can be descriptive of one or more permissions for interacting with the content item data.
- the one or more permissions can be descriptive of one or more parameters for republishing the augmented content item data.
- the permission data may be descriptive of view preferences. For example, the permission data may indicate the content item may be provided for display as a preview, with a watermark, and/or in a lower resolution.
- the computing system can generate a content-specific identifier for the content item data.
- the content-specific identifier can include identification data that is specifically generated for the content item data.
- the content-specific identifier can be a set of data that acts as a fingerprint for identifying the content item and copies of the content item throughout the internet and/or local drives.
- the content-specific identifier can include a watermark and/or other embedded data that may be readily viewable and/or may be indistinguishable to the viewers but identifiable via computer systems processing and rendering the data.
- the computing system can generate augmented content item data by embedding the content-specific identifier in the content item data.
- the augmented content item data may be generated by one or more machine-learned models.
- the one or more machine-learned models may process the content item data and the content-specific identifier to generate the augmented content item data.
- the one or machine-learned models can include an augmentation model, a segmentation model, an embedding model, an encoder model, a self-attention model, a decoder model, and/or a concatenation model.
- the computing system can generate non-fungible token data based on the permission data and the augmented content item data.
- the non-fungible token data can include the permission data.
- the non-fungible token data can reference the augmented content item data.
- the computing system can register the non-fungible token data with a blockchain. Registering the non-fungible token data can include minting a non-fungible token on the blockchain.
- the blockchain can be associated with a blockchain computing system.
- the blockchain computing system can include a decentralized and distributed computing system.
- the computing system can add the non-fungible token data to a search database.
- the search database can then be queried in response to receiving a search input.
- the search database can include non-fungible token content items and unminted content items.
- the non-fungible token content items can be more heavily weighted and, therefore, more highly ranked when pulled for search purposes.
- the search database may hide other content items that are substantially similar to and/or the same as the content item and/or the augmented content item.
- the computing system can obtain a search query.
- a plurality of search results responsive to the search query can then be determined.
- the plurality of search results can include a particular search result associated with the augmented content item data.
- One or more other search results associated with other content data can be determined to include the content-specific identifier.
- the augmented content item data can be provided for display without providing the one or more other search results.
- the technology discussed herein makes reference to servers, databases, software applications, and other computer-based systems, as well as actions taken and information sent to and from such systems.
- the inherent flexibility of computer-based systems allows for a great variety of possible configurations, combinations, and divisions of tasks and functionality between and among components.
- processes discussed herein can be implemented using a single device or component or multiple devices or components working in combination.
- Databases and applications can be implemented on a single system or distributed across multiple systems. Distributed components can operate sequentially or in parallel.
Abstract
Systems and methods for digital rights management can include embedding a content item and a set of permissions in the blockchain. The systems and methods may obtain the set of permissions via a user interface. The systems and methods may embed the data such that when a content item is surfaced, the permissions are also surfaced. The systems and methods may include embedding a content-specific identifier in the content item, which can allow for copies to be identified by searching for the identifier.
Description
- This application claims priority to and the benefit of U.S. Provisional Patent Application No. 63/397,962, filed Aug. 15, 2022. U.S. Provisional Patent Application No. 63/397,962 is hereby incorporated by reference in its entirety.
- The present disclosure relates generally to blockchain-enabled digital rights management. More particularly, the present disclosure relates to minting a non-fungible token on a blockchain with one or more permissions embedded in the non-fungible token data.
- Content items displayed on the internet may be published with the intent to have certain permissions and copyright agreements attached. However, users may disregard these permissions and copyright licenses, which can cause the owner of the content item to have their content item used in a way not originally intended. The issue can occur in a social media setting as users find content items that they later want to use for their own purposes. Additionally, databases and content aggregators may save and reproduce the content item without checking the permissions or the copyright license.
- Aspects and advantages of embodiments of the present disclosure will be set forth in part in the following description, or can be learned from the description, or can be learned through practice of the embodiments.
- One example aspect of the present disclosure is directed to a computing system for digital rights management. The system can include one or more processors and one or more non-transitory computer-readable media that collectively store instructions that, when executed by the one or more processors, cause the computing system to perform operations. The operations can include obtaining a media content item. The media content item can be associated with a particular user. The operations can include obtaining one or more user inputs. The one or more user inputs can be associated with the particular user. The operations can include determining the one or more user inputs are associated with a selection of one or more permissions. In some implementations, the one or more permissions can be associated with the media content item. The operations can include generating non-fungible token data based on the media content item and the one or more permissions. One or more references to the media content item can be embedded in the non-fungible token data. The one or more permissions can be embedded in the non-fungible token data. In some implementations, the one or more permissions can be configured to be identifiable for display with the media content item. The operations can include registering the non-fungible token data with a blockchain. The blockchain can be associated with a decentralized blockchain computing system.
- Another example aspect of the present disclosure is directed to a computer-implemented method for digital rights management. The method can include providing, by a computing system including one or more processors, a media content item for display. The media content item can be a digital resource associated with a non-fungible token. In some implementations, the non-fungible token can be documented on a blockchain. The method can include obtaining, by the computing system, input data from a user computing system. The input data can be descriptive of one or more inputs to interact with the media content item. The method can include obtaining, by the computing system, permission data associated with the media content item based on the input data. The permission data can be stored on the blockchain. In some implementations, the permission data can be descriptive of one or more permissions associated with the media content item. The method can include providing, by the computing system, a user interface element for display. The user interface element can include a notification. The notification can be descriptive of the one or more permissions associated with the media content item.
- Another example aspect of the present disclosure is directed to one or more non-transitory computer-readable media that collectively store instructions that, when executed by one or more computing devices, cause the one or more computing devices to perform operations. The operations can include obtaining content item data from a user computing system. The content item data can be associated with a particular user. The operations can include obtaining permission data associated with the content item data. In some implementations, the permission data can be descriptive of one or more permissions for interacting with the content item data. The operations can include generating a content-specific identifier for the content item data. The content-specific identifier can include identification data that is specifically generated for the content item data. The operations can include generating augmented content item data by embedding the content-specific identifier in the content item data. The operations can include generating non-fungible token data based on the permission data and the augmented content item data. The non-fungible token data can include the permission data. In some implementations, the non-fungible token data can reference the augmented content item data. The operations can include registering the non-fungible token data with a blockchain.
- Other aspects of the present disclosure are directed to various systems, apparatuses, non-transitory computer-readable media, user interfaces, and electronic devices.
- These and other features, aspects, and advantages of various embodiments of the present disclosure will become better understood with reference to the following description and appended claims. The accompanying drawings, which are incorporated in and constitute a part of this specification, illustrate example embodiments of the present disclosure and, together with the description, serve to explain the related principles.
- Detailed discussion of embodiments directed to one of ordinary skill in the art is set forth in the specification, which makes reference to the appended figures, in which:
-
FIG. 1A depicts a block diagram of an example computing system that performs digital rights management according to example embodiments of the present disclosure. -
FIG. 1B depicts a block diagram of an example computing device that performs digital rights management according to example embodiments of the present disclosure. -
FIG. 2 depicts a block diagram of an example non-fungible token data generation system according to example embodiments of the present disclosure. -
FIG. 3 depicts an illustration of an example search results page according to example embodiments of the present disclosure. -
FIG. 4 depicts a block diagram of an example non-fungible token data generation system according to example embodiments of the present disclosure. -
FIG. 5 depicts a block diagram of an example search results page generation system according to example embodiments of the present disclosure. -
FIG. 6 depicts a flow chart diagram of an example method to perform permission-embedded non-fungible token generation according to example embodiments of the present disclosure. -
FIG. 7 depicts a flow chart diagram of an example method to perform permission-based display according to example embodiments of the present disclosure. -
FIG. 8 depicts a flow chart diagram of an example method to perform permission-embedded non-fungible token generation according to example embodiments of the present disclosure. -
FIG. 9A depicts a block diagram of an example computing system that performs digital rights management according to example embodiments of the present disclosure. -
FIG. 9B depicts a block diagram of an example computing device that performs digital rights management according to example embodiments of the present disclosure. -
FIG. 9C depicts a block diagram of an example computing system that performs digital rights management according to example embodiments of the present disclosure. - Reference numerals that are repeated across plural figures are intended to identify the same features in various implementations.
- Generally, the present disclosure is directed to systems and methods for digital rights management for content items. In particular, the systems and methods disclosed herein can leverage a blockchain and/or one or more user interface elements to manage the interactions with digital content items. For example, the systems and methods can include obtaining a media content item. The media content item can be associated with a particular user. The systems and methods can include obtaining one or more user inputs. The one or more user inputs can be associated with the particular user. The one or more user inputs can be determined to be associated with a selection of one or more permissions. The one or more permissions can be associated with the media content item. The systems and methods can include generating non-fungible token data based on the media content item and the one or more permissions. One or more references to the media content item can be embedded in the non-fungible token data. In some implementations, the one or more permissions can be embedded in the non-fungible token data. The one or more permissions can be configured to be identifiable for display with the media content item. The systems and methods can include registering the non-fungible token data with a blockchain. The blockchain can be associated with a decentralized blockchain computing system.
- The systems and methods can obtain a content item (e.g., a media content item). The media content item can be associated with a particular user. The content item can include image data, video data, audio data, text data, and/or latent encoding data. The content item may be generated by and/or published by the particular user. The content item may be a content item stored locally by the particular user, may be stored in cloud storage for the particular user, and/or may be published on the web (e.g., on a social media website, a blog website, and/or a personal website).
- The systems and methods can obtain one or more user inputs. The one or more user inputs can be associated with the particular user. The one or more user inputs can be obtained from a user computing system. In some implementations, the one or more user inputs can be inputs to a user interface provided via a server computing system. For example, one or more user interface elements can be provided in a content item management platform (e.g., a cloud storage web platform, a social media platform, and/or a content item repository platform). The one or more user inputs may be associated with a user interface with one or more options for selecting permissions to be associated with the obtained content item. For example, the one or more options can include do not allow republishing or copying, allow republishing or copying if revenue provided to original owner, allow republishing or copying freely, and/or any other form of permissions, which can include caveats manually input by a user.
- The one or more user inputs can be determined to be associated with a selection of one or more permissions. The one or more permissions can be associated with the media content item. In some implementations, the one or more permissions can be associated with permissible interactions with the media content item. The permissible interactions can be associated with whether third parties can copy, republish, and/or share the content item. The determination can be based on heuristics, deterministic data, and/or one or more machine-learned parameters.
- The systems and methods can generate non-fungible token data based on the media content item and the one or more permissions. One or more references to the media content item may be embedded in the non-fungible token data. In some implementations, the one or more permissions can be embedded in the non-fungible token data. The non-fungible token data can include smart contract data. In some implementations, the payload of the smart contract associated with the smart contract data may be the content item. The content item may be viewed as a digital resource that may be transferred based on the criteria of the smart contract. The smart contract data can include the one or more permissions. The one or more permissions may be configured to be identifiable for display with the media content item.
- The non-fungible token data can be registered with a blockchain. The blockchain can be associated with a decentralized blockchain computing system. The non-fungible token data may be minted to the blockchain and may be associated with an electronic ledger that tracks transactions associated with the non-fungible token data. Additionally and/or alternatively, the non-fungible token data may be processed to generate index data associated with the non-fungible token data. The index data can then be added to a searchable database.
- In some implementations, the systems and methods can obtain a display request associated with the media content item. The non-fungible token data associated with the media content item can be identified. The permission data associated with the media content item can then be obtained. A display dataset can then be generated. The display dataset can include the media content item and the permission data. The display dataset can be provided. In some implementations, the display request can be associated with a third party computing system. The display request can be generated based on a search query processed by a search engine. The media content item can be responsive to the search query. In some implementations, the systems and methods can include determining the display request complies with the one or more preferences. The display dataset can include executable code for providing a user interface for displaying the one or more preferences in response to a selection of the media content item.
- Alternatively and/or additionally, the systems and methods can include obtaining a search query from a third party computing system and processing the search query to determine a plurality of search results responsive to the search query. The plurality of search results can include the media content item.
- In some implementations, the systems and methods can include determining the plurality of search results include one or more particular search results associated with one or more respective other content items that are associated with the media content item, determining ranking data for the plurality of search results based on the one or more respective other content items being associated with the media content item, and providing the plurality of search results for display based on the ranking data. The ranking data can be descriptive of non-fungible token search results being provided preference over general search results. In some implementations, the media content item can be provided for display before the one or more respective other content items.
- The generated non-fungible token data can then be utilized when providing the media content item for display. For example, the systems and methods can include providing a media content item for display. The media content item can be a digital resource associated with a non-fungible token. In some implementations, the non-fungible token can be documented on a blockchain. The systems and methods can include obtaining input data from a user computing system. The input data can be descriptive of one or more inputs to interact with the media content item. Permission data associated with the media content item can be obtained based on the input data. The permission data can be stored on the blockchain. In some implementations, the permission data can be descriptive of one or more permissions associated with the media content item. The systems and methods can include providing a user interface element for display. The user interface element can include a notification. In some implementations, the notification can be descriptive of the one or more permissions associated with the media content item.
- The systems and methods can provide a media content item for display. The media content item can be a digital resource associated with a non-fungible token. In some implementations, the non-fungible token can be documented on a blockchain. The media content item can include image data, video data, text data, multimodal data, audio data, virtual reality data, augmented reality data, and/or latent encoding data. The media content item can be provided for display in a user interface. In some implementations, the media content item can be provided for display in a user interface of a search results page, a social media platform, a shared content item storage platform, a blog platform, and/or other web platform. The media content item may be provided for display in response to a search query. Alternatively and/or additionally, the media content item may be provided in a social media feed and/or a news feed.
- Input data can be obtained from a user computing system. The input data can be descriptive of one or more inputs to interact with the media content item. The input data can be descriptive of a request to copy and/or republish the media content item. The input data can be descriptive of one or more selections to a user interface, which may include an initial selection of the media content item, then one or more selections to a pop-up interface.
- The systems and methods can obtain permission data associated with the media content item based on the input data. The permission data can be stored on the blockchain. In some implementations, the permission data can be descriptive of one or more permissions associated with the media content item. The one or more permissions can include one or more parameters for generating a copy of the media content item.
- A user interface element can then be provided for display. The user interface element can include a notification. The notification can be descriptive of the one or more permissions associated with the media content item. Additionally and/or alternatively, the notification may provide one or more options for interacting with the media content item. The one or more options can be options that comply with the parameters set by the one or more permissions. For example, the one or more options provided may differ from one media content item to another media content item based on the level of interactions allowed based on the one or more permissions.
- In some implementations, the systems and methods can include obtaining additional input data. The additional input data can be descriptive of a copy request to generate a copy of the media content item. The additional input data and the permission data can be processed to determine a response action. The response action can include generating a media content item dataset. The media content item dataset can include the permission data embedded in the media content item. Alternatively and/or additionally, the response action can include providing a rejection notification. The rejection notification can indicate that generating a copy is against the one or more permissions associated with the media content item.
- The systems and methods can include embedding one or more identifiers in the content item data. For example, the systems and methods can include obtaining content item data from a user computing system. The content item data can be associated with a particular user. Permission data associated with the content item data can be obtained. In some implementations, the permission data can be descriptive of one or more permissions for interacting with the content item data. The systems and methods can include generating a content-specific identifier for the content item data. The content-specific identifier can include identification data that is specifically generated for the content item data. Augmented content item data can be generated by embedding the content-specific identifier in the content item data. The systems and methods can include generating non-fungible token data based on the permission data and the augmented content item data. The non-fungible token data can include the permission data. In some implementations, the non-fungible token data can reference the augmented content item data. The non-fungible token data can be registered with a blockchain.
- The systems and methods can obtain content item data from a user computing system. The content item data can be associated with a particular user. The content item may be a media content item (e.g., an image, a video, a text string, a song, a virtual-reality asset, and/or an augmented-reality asset). The content item can be obtained via a user input, can be extracted from a webpage, and/or can be obtained from a database.
- In some implementations, obtaining the content item data from the user computing system can include accessing a user-specific content item database (e.g., a web storage platform, a local drive, and/or a server storage drive) and providing a mint user interface. The mint user interface can include one or more selectable interface elements for initiating non-fungible token generation.
- Permission data associated with the content item data can then be obtained. The permission data can be descriptive of one or more permissions for interacting with the content item data. In some implementations, the one or more permissions can be descriptive of one or more parameters for republishing the augmented content item data. The permission data may be descriptive of view preferences. For example, the permission data may indicate the content item may be provided for display as a preview, with a watermark, and/or in a lower resolution.
- A content-specific identifier can then be generated for the content item data. The content-specific identifier can include identification data that is specifically generated for the content item data. In some implementations, the content-specific identifier can be a set of data that acts as a fingerprint for identifying the content item and copies of the content item throughout the internet and/or local drives. The content-specific identifier can include a watermark and/or other embedded data that may be readily viewable and/or may be indistinguishable to the viewers but identifiable via computer systems processing and rendering the data.
- Augmented content item data can be generated by embedding the content-specific identifier in the content item data. The augmented content item data may be generated by one or more machine-learned models. For example, the one or more machine-learned models may process the content item data and the content-specific identifier to generate the augmented content item data. The one or machine-learned models can include an augmentation model, a segmentation model, an embedding model, an encoder model, a self-attention model, a decoder model, and/or a concatenation model.
- The systems and methods can then generate non-fungible token data based on the permission data and the augmented content item data. The non-fungible token data can include the permission data. In some implementations, the non-fungible token data can reference the augmented content item data.
- The non-fungible token data can then be registered with a blockchain. Registering the non-fungible token data can include minting a non-fungible token on the blockchain. The blockchain can be associated with a blockchain computing system. The blockchain computing system can include a decentralized and distributed computing system.
- In some implementations, the systems and methods can include adding the non-fungible token data to a search database. The search database can then be queried in response to receiving a search input. The search database can include non-fungible token content items and unminted content items. The non-fungible token content items can be more heavily weighted and, therefore, more highly ranked when pulled for search purposes. The search database may hide other content items that are substantially similar to and/or the same as the content item and/or the augmented content item.
- Alternatively and/or additionally, the systems and methods can include obtaining a search query. A plurality of search results responsive to the search query can then be determined. The plurality of search results can include a particular search result associated with the augmented content item data. One or more other search results associated with other content data can be determined to include the content-specific identifier. The augmented content item data can be provided for display without providing the one or more other search results.
- In some implementations, the systems and methods disclosed herein can be utilized to mint a content item with an embedded identifier. The minted content item can then be obtained by a search engine in response to a search query. The minted content item can be upranked while unminted content items may be downranked. In some implementations, unminted content items that are substantially similar to or the same as the minted content item may be hidden while the minted content item is provided for display. Alternatively and/or additionally, the unminted content items can be provided for display with a link to the minted content item. The minted and/or the unminted content items may be provided for display with respective labels.
- The systems and methods can include minting every content item added to a web platform to provide ownership for every content item added to the web platform.
- In some implementations, the systems and methods disclosed herein can be utilized to track the use of advertisement content. Alternatively and/or additionally, the systems and methods disclosed herein can be utilized to track content items, which can allow for content creators to identify other uses of their content and request take downs and/or a portion of the created revenue.
- Search platforms, social media platforms, and/or other web platforms may enforce the permissions by storing and/or identifying the permissions. The web platforms may check a blockchain to determine if a newly added content item is associated with a non-fungible token and/or is substantially similar to a digital resource of a non-fungible token.
- In some implementations, displaying the content item can include displaying a card associated with the content item. The “front” of the card can include a preview of the content item, and the “back” of the card can include the one or more permissions associated with the content item.
- Additionally and/or alternatively, a plurality of content items may be categorized based on their permissions. In some implementations, a search results page may provide search results with different permissions in different display panels. Alternatively and/or additionally, the search may be filtered by selected permissions.
- The system and methods disclosed herein can be utilized for digital rights management of non-fungible tokens (NFTs) on search surfaces. For example, non-fungible token content may be elevated over non-NFT versions of the same content. In some implementations, non-NFT versions may be hidden.
- In some implementations, the systems and methods disclosed herein can include providing one or more tools to a content owner to control display of the NFT content.
- The systems and methods may be utilized to digital resources being generated and provided throughout the internet. The digital resources can be augmented to embed a content ID or other content fingerprint. In some implementations, a smart contract can be generated for the digital resource, which can then be embedded on a blockchain and attached to the digital resource. The smart contract may be descriptive of what other users and/or other systems can do with the digital resource.
- The systems and methods of the present disclosure provide a number of technical effects and benefits. As one example, the system and methods can provide systems and methods for generating non-fungible token data with embedded permissions. For example, the systems and methods disclosed herein can leverage a blockchain for generating a non-fungible token that embeds the permissions such that the permissions are easily identifiable for display with the content item.
- Another technical benefit of the systems and methods of the present disclosure is the ability to leverage identified permission data for informing third parties of permissions associated with a content item. For example, the systems and methods disclosed herein can process one or more user inputs associated with a content item, determine a non-fungible token associated with content item, determine one or more permissions associated with the content item, and provide an informational display associated with the one or more permissions. In particular, content items may be shared throughout the internet based on the one or more permissions and/or with the one or more permissions being continually tracked during republishing.
- Another example of technical effect and benefit relates to improved computational efficiency and improvements in the functioning of a computing system. For example, the systems and methods disclosed herein can leverage the embedded permission data and content-specific identifiers to provide a continuous link to the content item without the computational expense of standard search.
- With reference now to the Figures, example embodiments of the present disclosure will be discussed in further detail.
-
FIG. 1A depicts a block diagram of anexample computing system 100 that performs digital rights management according to example embodiments of the present disclosure. Thesystem 100 includes auser computing system 130, aserver computing system 110, acreator computing system 150, and ablockchain computing system 170 that are communicatively coupled over anetwork 180. - The
user computing system 130 can be any type of computing device, such as, for example, a personal computing device (e.g., laptop or desktop), a mobile computing device (e.g., smartphone or tablet), a gaming console or controller, a wearable computing device, an embedded computing device, or any other type of computing device. - The
user computing system 130 includes one ormore processors 132 and amemory 134. The one ormore processors 132 can be any suitable processing device (e.g., a processor core, a microprocessor, an ASIC, a FPGA, a controller, a microcontroller, etc.) and can be one processor or a plurality of processors that are operatively connected. Thememory 134 can include one or more non-transitory computer-readable storage mediums, such as RAM, ROM, EEPROM, EPROM, flash memory devices, magnetic disks, etc., and combinations thereof. Thememory 134 can storedata 136 andinstructions 138 which are executed by theprocessor 132 to cause theuser computing system 130 to perform operations. - The
user computing system 130 can also include one or more user input components that receive user input. For example, the user input component can be a touch-sensitive component (e.g., a touch-sensitive display screen or a touch pad) that is sensitive to the touch of a user input object (e.g., a finger or a stylus). The touch-sensitive component can serve to implement a virtual keyboard. Other example user input components include a microphone, a traditional keyboard, or other means by which a user can provide user input. - The
server computing system 110 includes one ormore processors 112 and amemory 114. The one ormore processors 112 can be any suitable processing device (e.g., a processor core, a microprocessor, an ASIC, a FPGA, a controller, a microcontroller, etc.) and can be one processor or a plurality of processors that are operatively connected. Thememory 114 can include one or more non-transitory computer-readable storage mediums, such as RAM, ROM, EEPROM, EPROM, flash memory devices, magnetic disks, etc., and combinations thereof. Thememory 114 can storedata 118 andinstructions 116 which are executed by theprocessor 112 to cause theserver computing system 110 to perform operations. - In some implementations, the
server computing system 110 includes or is otherwise implemented by one or more server computing devices. In instances in which theserver computing system 110 includes plural server computing devices, such server computing devices can operate according to sequential computing architectures, parallel computing architectures, or some combination thereof. - The
blockchain computing system 170 includes one or more processors and a memory. The one or more processors can be any suitable processing device (e.g., a processor core, a microprocessor, an ASIC, a FPGA, a controller, a microcontroller, etc.) and can be one processor or a plurality of processors that are operatively connected. The memory can include one or more non-transitory computer-readable storage mediums, such as RAM, ROM, EEPROM, EPROM, flash memory devices, magnetic disks, etc., and combinations thereof. The memory can store data and instructions which are executed by the processor to cause theblockchain computing system 170 to perform operations. In some implementations, theblockchain computing system 170 includes or is otherwise implemented by one or more server computing devices. - The
network 180 can be any type of communications network, such as a local area network (e.g., intranet), wide area network (e.g., Internet), or some combination thereof and can include any number of wired or wireless links. In general, communication over thenetwork 180 can be carried via any type of wired and/or wireless connection, using a wide variety of communication protocols (e.g., TCP/IP, HTTP, SMTP, FTP), encodings or formats (e.g., HTML, XML), and/or protection schemes (e.g., VPN, secure HTTP, SSL). - The
computing system 100 can include a number of applications (e.g.,applications 1 through N). Each application can be in communication with a central intelligence layer. Example applications can include a text messaging application, an email application, a dictation application, a virtual keyboard application, a browser application, etc. In some implementations, each application can communicate with the central intelligence layer (and model(s) stored therein) using an API (e.g., a common API across all applications). - The central intelligence layer can communicate with a central device data layer. The central device data layer can be a centralized repository of data for the
computing system 100. In some implementations, the central device data layer can communicate with a number of other components of the computing device, such as, for example, one or more sensors, a context manager, a device state component, and/or additional components. In some implementations, the central device data layer can communicate with each device component using an API (e.g., a private API). - Additionally and/or alternatively,
FIG. 1A depicts anexemplary computing system 100 that can be used to implement a digital rights management system according to aspects of the present disclosure. Thesystem 100 has a user-server architecture that includes aserver 110 that communicates with one or moreuser computing systems 130 over anetwork 180. However, the present disclosure can be implemented using other suitable architectures, which can include any number of computing systems communicating over anetwork 180. - The
system 100 includes aserver 110, such as, for example, a web server. Theserver 110 can be one or more computing devices that are implemented as a parallel computing system and/or a distributed computing system. In particular, multiple computing devices can act together as asingle server 110. Theserver 110 can have one or more processor(s) 112 and amemory 114. Theserver 110 can also include a network interface used to communicate with one or more remote computing devices (e.g., user devices) 130 over anetwork 180. - The processor(s) 112 can be any suitable processing device, such as a microprocessor, microcontroller, integrated circuit, or other suitable processing device. The
memory 114 can include any suitable computing system or media, including, but not limited to, non-transitory computer-readable media, RAM, ROM, hard drives, flash drives, or other memory devices. Thememory 114 can store information accessible by processor(s) 112, includinginstructions 116 that can be executed by processor(s) 112. Theinstructions 116 can be any set of instructions that when executed by the processor(s) 112, cause the processor(s) 112 to provide desired functionality. - In particular, the
instructions 116 can be executed by the processor(s) 112 to implement a digital rights management system. Theuser profile database 120 can be configured to store a plurality of user profiles associated with a plurality of users utilizing one or moreuser computing systems 130. In some implementations, theuser profile database 120 can be configured to be utilized for facilitating one or more interactions. The facilitation of the one or more interactions can involve the use of a blockchain application programming interface (API) 122 to send data to and receive data from ablockchain computing system 170. For example, aserver computing system 110 can utilize theblockchain API 122 to update one ormore ledgers 172 of theblockchain computing system 170. The one ormore ledgers 172 can be associated with one ormore tokens 174. The one ormore tokens 174 can include one or more non-fungible tokens, which can include scripts associated with a digital asset (e.g., image data, video data, text data, latent encoding data, domain data, audio data, augmented-reality asset rendering data, and/or virtual-reality asset rendering data). In particular, the script can reference a specific digital asset that is provided for sale. The digital asset can include image data, text data, video data, latent encoding data, a domain name, a virtual property, an augmented-reality asset, a virtual-reality asset (e.g., a virtual-reality environment and/or a virtual-reality object for interaction in an environment), a smart contract, a physical item authentication, etc. In some implementations, the one ormore ledgers 172 can be associated with cryptocurrency that can be utilized to make transactions in a physical marketplace and/or a virtual marketplace. - It will be appreciated that the term “element” can refer to computer logic utilized to provide desired functionality. Thus, any element, function, and/or instructions can be implemented in hardware, application specific circuits, firmware and/or software controlling a general purpose processor. In one implementation, the elements or functions are program code files stored on the storage device, loaded into memory and executed by a processor or can be provided from computer program products, for example computer executable instructions, that are stored in a tangible computer-readable storage medium such as RAM, hard disk or optical or magnetic media.
-
Memory 114 can also includedata 118 that can be retrieved, manipulated, created, or stored by processor(s) 112. Thedata 118 can include search result data, ranking data, image data (e.g., digital maps, satellite images, aerial photographs, street-level photographs, synthetic models, paintings, personal images, portraits, etc.), video data, audio data, text data (e.g., books, articles, blogs, poems, etc.), latent encoding data, blockchain address data, tables, vector data (e.g., vector representations of roads, parcels, buildings, etc.), point of interest data (e.g., locales such as islands, cities, restaurants, hospitals, parks, hotels, and schools), or other data or related information. As an example, thedata 118 can be used to access information and data associated with a specific digital asset, website, search result, blockchain, etc. - The
data 118 can be stored in one or more databases. The one or more databases can be connected to theserver 110 by a high bandwidth LAN or WAN, or can also be connected toserver 110 throughnetwork 180. The one or more databases can be split up so that they are located in multiple locales. - The
server 110 can exchange data with one or moreuser computing systems 130 over thenetwork 180. Although twouser computing systems 130 are illustrated inFIG. 1A , any number ofuser computing systems 130 can be connected to theserver 110 over thenetwork 180. Theuser computing systems 130 can be any suitable type of computing device, such as a general purpose computer, special purpose computer, navigational device, laptop, desktop, integrated circuit, mobile device, smartphone, tablet, wearable-computing devices, a display with one or more processors coupled thereto and/or embedded therein, or other suitable computing device. Further, theuser computing system 130 can be multiple computing devices acting together to perform operations or computing actions. - Similar to
server 110, auser computing system 130 can include a processor(s) 132 and amemory 134. Thememory 134 can store information accessible by processor(s) 132, including instructions that can be executed by processor(s) and data. As an example,memory 134 can storedata 136 andinstructions 138. -
Instructions 138 can provide instructions for implementing a browser, a non-fungible token purchase, and/or a plurality of other functions. In particular, the user ofuser computing system 130 can exchange data withserver 110 by using the browser to visit a website accessible at a particular web-address. The digital rights management system of the present disclosure can be provided as an element of a user interface of a website and/or application. - The
data 136 can include data related to running a specialized application on theuser computing system 130. In particular, the specialized application can be used to exchange data withserver 110 over thenetwork 160. Thedata 136 can include user-device-readable code for providing and implementing aspects of the present disclosure. Additionally and/or alternatively, thedata 136 can include data related to previously inputted or received data. For example, thedata 136 can include data related to past occurrences of the special application. - The
user computing system 130 can include various user input devices for receiving information from a user, such as a touch screen, touch pad, data entry keys, speakers, mouse, motion sensor, and/or a microphone suitable for voice recognition. Further, theuser computing system 130 can have a display for presenting information, such as a user interface, displaying a digital asset, displaying pop-ups or application elements displayed in an interface, and/or other forms of information. - The
user computing system 130 can also include auser profile 140 that can be used to identify a user of theuser computing system 130. Theuser profile 140 can be optionally used by the user to make one or more transactions which can then be recorded on one ormore ledgers 172 of theblockchain computing system 170. Theuser profile 140 can be descriptive of user information, which can include identification numbers and/or payment account information. For example, theuser profile 140 can include data associated with a crypto wallet, which may be linked to a browser application via an application extension and/or embedding. - The
user computing system 130 can further include a graphics processing unit. Graphics processing unit can be used byprocessor 132 to generate the non-fungible token data and/or provide a user interface for viewing and interacting with permissions. In some embodiments, theuser computing system 130 performs any and all user interface display or generation. - The
user computing system 130 can include a network interface for communicating with aserver 110 over anetwork 180. Network interface can include any components or configuration suitable for communication withserver 110 overnetwork 180, including, for example, one or more ports, transmitters, wireless cards, controllers, physical layer components, or other items for communication according to any currently known or future developed communications protocol or technology. - The
network 180 can be any type of communications network, such as a local area network (e.g., intranet), wide area network (e.g., Internet), or some combination thereof. Thenetwork 180 can also include a direct connection between aclient device 130 and theserver 110. In general, communication between theserver 110 and aclient device 130 can be carried via network interface using any type of wired and/or wireless connection, using a variety of communication protocols (e.g., TCP/IP, HTTP), encodings or formats (e.g., HTML, XML), and/or protection schemes (e.g., VPN, secure HTTP, SSL). - In some implementations, the
exemplary computing system 100 can include one or morecreator computing systems 150. The one or morecreator computing systems 150 can be utilized for generating images, videos, prose, poetry, audio, etc., which can then be provided for sale. The one or morecreator computing systems 150 can include one ormore processors 152, which can be utilized to execute one or more operations to implement the systems and methods disclosed herein. The one or morecreator computing systems 150 can include one ormore memory components 154, which can be utilized to storedata 156 and one ormore instructions 158. Thedata 156 can include data related to one or more applications, one or more media datasets, etc. Theinstructions 158 can include one or more operations for implementing the systems and methods disclosed herein. - The one or more
creator computing systems 150 can store data associated with one or moredigital assets 160 and/or one or more creator profiles 162. The one or moredigital assets 160 can include text data, image data, video data, audio data, latent encoding data, domain data, or a variety of other data formats. The one ormore creator profiles 162 can include information associated with one or more “creators” of the one or moredigital assets 160. The one ormore creator profiles 162 can include identification data, transaction data, and/or crypto wallet data. - Additionally and/or alternatively, the
exemplary computing system 100 can include one or moreblockchain computing systems 170. The one or moreblockchain computing systems 170 can include a plurality of computing devices being utilized for decentralized data storage, such that a plurality of “blocks” can be distributed throughout a network of computing devices to provide a secure system for data storage, which can include one ormore ledgers 172 and one ormore tokens 174. In some implementations, each of the one ormore tokens 174 can be associated with at least a portion of the one ormore ledgers 172. - Blockchain can refer to a system configured to securely record information. The blockchain can include a decentralized system that can render changing information extremely difficult. The blockchain can include a digital ledger of transactions that can be duplicated and distributed across a network of computing systems. Each block in the chain can include a number of transactions. When a new transaction occurs on the blockchain, a record of that transaction can be added to every computing device's ledger. The blockchain can be utilized to track the exchange of currency and/or digital assets via the recording of transactions on the digital ledger, which can be propagated throughout the decentralized system. The currency exchanged and tracked via the
blockchain computing system 170 can be referred to as cryptocurrency. - The
tokens 174 can include one or more non-fungible tokens. The non-fungible tokens can be minted on a blockchain associated with theblockchain computing system 170. A non-fungible token (NFT) can be a certificate of authenticity of a digital asset. NFTs can be non-interchangeable thus making their worth depend on the price anyone may be willing to pay for the asset. NFTs can be minted on blockchains such that their scarcity and authenticity can be maintained. A digital asset can be defined as anything that is stored digitally and can be uniquely identifiable that organizations can use to realize value. Examples of digital assets can include a tweet, a social media comment, documents, audio, images, videos, logos, website domains, slide presentations, spreadsheets, CSS files and formats, executable code, and/or websites. -
FIG. 1B depicts a block diagram of anexample blockchain 50 that may be utilized by theblockchain computing system 170 of theexemplary computing system 100 ofFIG. 1A . Theexample blockchain 50 can include a plurality of blocks that can be utilized to store data with one or more cryptographic features. Theblockchain 50 can be stored on a decentralized computing system comprising a plurality of computing devices. Theblockchain 50 can be a public blockchain (e.g., a blockchain that is open without access restrictions such that anyone with an internet access can send transactions or validate transactions as part of the decentralized, distributed system), a private blockchain (e.g., a blockchain that provides access based on permissions set by network administrators), or a hybrid blockchain (e.g., a blockchain with a combination of blocks with no restrictions and blocks with restrictions). Theblockchain 50 can include proof of work features that can include one or more cryptographic forms of proof. The proof of work can be provided upon a request to update the blockchain 50 (e.g., a request to update the ledgers based on a new transaction). The proof of work can convey that a certain device or group of devices have performed a certain amount of computation, which can then be validated by other parties. Once validated, theblockchain 50 can be updated, or may remain unchanged in response to a failure to validate. The proof of work feature can be utilized to mitigate the computational cost of every device in the system having to perform the same computational functions and checks for determining a request is valid for updating theblockchain 50. - Each block can include a hash, a previous hash associated with the hash of the previous block, and data. In some implementations, each block can include a nonce. A hash can be a hash value of a fixed length that can be a fingerprint for the particular block. The hash value can be generated based on a hash function and may be changed each time a change is made to the data of that particular block. The previous hash can include a hash value of the block immediately preceding the particular block. The previous hash can be utilized to ensure the downstream ground truth stays unchanged unless proper validation occurs. The data can include transaction data (e.g., a transaction ledger), a timestamp, a value associated with a cryptocurrency value, a non-fungible token (e.g., a non-fungible token including a script that references a digital asset, nonce data, and/or general blockchain data. Nonce (i.e., a number only used once) can be a number added to a block in a blockchain that can meet a difficulty level restriction when a block is rehashed. The nonce can be a number that blockchain miners are solving for, in order to receive an incentive (e.g., cryptocurrency).
- The
blockchain 50 can include one or more security protocols and/or features. Theblockchain 50 can include a cryptographic system. For example, theblockchain 50 can validate theblockchain 50 is valid by ensuring the stored previous hash stored in the block matches the hash value of the previous block from the last block back to the first block (e.g., the genesis block). In some implementations, theblockchain 50 can include proof of work validation that can rely on verifying proof of computation before implementing a change to the stored data (e.g., the stored ledger). Proof of work validation can take seconds, minutes, and/or hours based in part on the number of blocks in theblockchain 50. Additionally and/or alternatively, theblockchain 50 can be implemented on a distributed, decentralized computing system. In some implementations, each computing device in the distributed, decentralized computing system can store a portion of (e.g., a block of the plurality of blocks) or all of the blocks in theblockchain 50. Therefore, the system can verify data by ensuring the data is uniform across most, if not all, of the distributed system. Each node of the distributed system can be checked for tampering before adding new data. - The data can include data associated with a cryptocurrency value (e.g., a ledger associated with a specific cryptocurrency value), data associated with a digital asset (e.g., a non-fungible token minted on the
blockchain 50 that can include a script associated with the digital asset), data associated with a smart contract (e.g., a smart contract that includes conditions that automatically initiates an action in response to a criteria being met), and/or timestamp data (e.g., timestamp data for block creation, minting, a transaction, etc.). - In particular,
FIG. 1B depicts afirst block 10, asecond block 20, athird block 30, afourth block 40, and annth block 60. Although five blocks are depicted, any number of blocks can be utilized. Thefirst block 10 can be a genesis block (e.g., a first overall block in the blockchain). Thefirst block 10 can include a respective first hash 12 (e.g., a hash value associated with the first block 10). Thefirst block 10 may include a first previous hash 14 (e.g., if thefirst block 10 has a block before it in theblockchain 50, then the hash of the previous block can be stored on the first block 10). Additionally and/or alternatively, thefirst block 10 can includedata 16 andnonce 18. - The
second block 20 can follow thefirst block 10. Thesecond block 20 can include a respective second hash 22 (e.g., a hash value associated with the second block 20). Thesecond block 20 may include a second previous hash 24 (e.g., the secondprevious hash 24 can be the same as, or reference, the first hash 12). Additionally and/or alternatively, thesecond block 20 can includedata 26 andnonce 28. - The
third block 30 can follow thesecond block 20. Thethird block 30 can include a respective third hash 32 (e.g., a hash value associated with the third block 30). Thethird block 30 may include a third previous hash 34 (e.g., the thirdprevious hash 34 can be the same as, or reference, the second hash 22). Additionally and/or alternatively, thethird block 30 can includedata 36 andnonce 38. - Additionally and/or alternatively, the
fourth block 40, thenth block 60, and other potential blocks can include a respective hash, a respective previous hash, and data. Thefirst data 16, thesecond data 26, thethird data 36, and the data of the other blocks can include overlapping data, can differ, and/or be the same such that the data is duplicative for all blocks. In some implementations, each block can be associated with a different transaction (e.g., a different minting, a different sale, etc.). Thefirst nonce 18, thesecond nonce 28, thethird nonce 38, and the nonce's of the other blocks can differ and may be solved during mining. - The data in each block can include ledger data, which can include a timestamp, asset and/or cryptocurrency exchanged, actors involved in transaction, and/or a variety of other information.
- In some implementations, a plurality of different blockchains can be utilized for the systems and methods disclosed herein. The different blockchains can include different configurations. The different blockchains can include parallel chains, side chains, shared blocks, differing chains, varying permissions, varying purposes, varying number of blocks, and/or varying hash functions and/or varying hashing value lengths.
- In some implementations, the systems and methods can include one or more machine-learned
model computing systems 900. The one or more machine-learned models can be utilized for a variety of tasks for enabling token data identification, obtainment, indexing, and deduplication. -
FIG. 9A depicts a block diagram of anexample computing system 900 that performs digital rights management according to example embodiments of the present disclosure. Thesystem 900 includes auser computing device 902, aserver computing system 930, and atraining computing system 950 that are communicatively coupled over anetwork 980. - The
user computing device 902 can be any type of computing device, such as, for example, a personal computing device (e.g., laptop or desktop), a mobile computing device (e.g., smartphone or tablet), a gaming console or controller, a wearable computing device, an embedded computing device, or any other type of computing device. - The
user computing device 902 includes one ormore processors 912 and amemory 914. The one ormore processors 912 can be any suitable processing device (e.g., a processor core, a microprocessor, an ASIC, a FPGA, a controller, a microcontroller, etc.) and can be one processor or a plurality of processors that are operatively connected. Thememory 914 can include one or more non-transitory computer-readable storage mediums, such as RAM, ROM, EEPROM, EPROM, flash memory devices, magnetic disks, etc., and combinations thereof. Thememory 914 can storedata 916 andinstructions 918 which are executed by theprocessor 912 to cause theuser computing device 902 to perform operations. - In some implementations, the
user computing device 902 can store or include one ormore permissions models 920. For example, thepermissions models 920 can be or can otherwise include various machine-learned models such as neural networks (e.g., deep neural networks) or other types of machine-learned models, including non-linear models and/or linear models. Neural networks can include feed-forward neural networks, recurrent neural networks (e.g., long short-term memory recurrent neural networks), convolutional neural networks or other forms of neural networks.Example permissions models 920 are discussed with reference toFIGS. 2-5 . - In some implementations, the one or
more permissions models 920 can be received from theserver computing system 930 overnetwork 980, stored in the usercomputing device memory 914, and then used or otherwise implemented by the one ormore processors 912. In some implementations, theuser computing device 902 can implement multiple parallel instances of a single permissions model 920 (e.g., to perform parallel content item dataset generation across multiple instances of content items). - More particularly, the one or more permissions models can generate one or more non-fungible token datasets. The one or more non-fungible token datasets can include augmented content items with embedded one or more content-specific identifiers. The one or more non-fungible token datasets can include embedded permission data that can be identified and provided with the content item.
- Additionally or alternatively, one or
more permissions models 940 can be included in or otherwise stored and implemented by theserver computing system 930 that communicates with theuser computing device 902 according to a client-server relationship. For example, thepermissions models 940 can be implemented by theserver computing system 940 as a portion of a web service (e.g., a digital rights management service). Thus, one ormore models 920 can be stored and implemented at theuser computing device 902 and/or one ormore models 940 can be stored and implemented at theserver computing system 930. - The
user computing device 902 can also include one or moreuser input components 922 that receives user input. For example, theuser input component 922 can be a touch-sensitive component (e.g., a touch-sensitive display screen or a touch pad) that is sensitive to the touch of a user input object (e.g., a finger or a stylus). The touch-sensitive component can serve to implement a virtual keyboard. Other example user input components include a microphone, a traditional keyboard, or other means by which a user can provide user input. - The
server computing system 930 includes one ormore processors 932 and amemory 934. The one ormore processors 932 can be any suitable processing device (e.g., a processor core, a microprocessor, an ASIC, a FPGA, a controller, a microcontroller, etc.) and can be one processor or a plurality of processors that are operatively connected. Thememory 934 can include one or more non-transitory computer-readable storage mediums, such as RAM, ROM, EEPROM, EPROM, flash memory devices, magnetic disks, etc., and combinations thereof. Thememory 934 can storedata 936 andinstructions 938 which are executed by theprocessor 932 to cause theserver computing system 930 to perform operations. - In some implementations, the
server computing system 930 includes or is otherwise implemented by one or more server computing devices. In instances in which theserver computing system 930 includes plural server computing devices, such server computing devices can operate according to sequential computing architectures, parallel computing architectures, or some combination thereof. - As described above, the
server computing system 930 can store or otherwise include one or more machine-learnedpermissions models 940. For example, themodels 940 can be or can otherwise include various machine-learned models. Example machine-learned models include neural networks or other multi-layer non-linear models. Example neural networks include feed forward neural networks, deep neural networks, recurrent neural networks, and convolutional neural networks.Example models 940 are discussed with reference toFIGS. 2-5 . - The
user computing device 902 and/or theserver computing system 930 can train themodels 920 and/or 940 via interaction with thetraining computing system 950 that is communicatively coupled over thenetwork 980. Thetraining computing system 950 can be separate from theserver computing system 930 or can be a portion of theserver computing system 930. - The
training computing system 950 includes one ormore processors 952 and amemory 954. The one ormore processors 952 can be any suitable processing device (e.g., a processor core, a microprocessor, an ASIC, a FPGA, a controller, a microcontroller, etc.) and can be one processor or a plurality of processors that are operatively connected. Thememory 954 can include one or more non-transitory computer-readable storage mediums, such as RAM, ROM, EEPROM, EPROM, flash memory devices, magnetic disks, etc., and combinations thereof. Thememory 954 can storedata 956 andinstructions 958 which are executed by theprocessor 952 to cause thetraining computing system 950 to perform operations. In some implementations, thetraining computing system 950 includes or is otherwise implemented by one or more server computing devices. - The
training computing system 950 can include amodel trainer 960 that trains the machine-learnedmodels 920 and/or 940 stored at theuser computing device 902 and/or theserver computing system 930 using various training or learning techniques, such as, for example, backwards propagation of errors. For example, a loss function can be backpropagated through the model(s) to update one or more parameters of the model(s) (e.g., based on a gradient of the loss function). Various loss functions can be used such as mean squared error, likelihood loss, cross entropy loss, hinge loss, and/or various other loss functions. Gradient descent techniques can be used to iteratively update the parameters over a number of training iterations. - In some implementations, performing backwards propagation of errors can include performing truncated backpropagation through time. The
model trainer 960 can perform a number of generalization techniques (e.g., weight decays, dropouts, etc.) to improve the generalization capability of the models being trained. - In particular, the
model trainer 960 can train thepermissions models 920 and/or 940 based on a set oftraining data 962. Thetraining data 962 can include, for example, example permissions, example content-specific identifiers, ground truth training data, ground truth labels, and/or ground truth augmented content items. - In some implementations, if the user has provided consent, the training examples can be provided by the
user computing device 902. Thus, in such implementations, themodel 920 provided to theuser computing device 902 can be trained by thetraining computing system 950 on user-specific data received from theuser computing device 902. In some instances, this process can be referred to as personalizing the model. - The
model trainer 960 includes computer logic utilized to provide desired functionality. Themodel trainer 960 can be implemented in hardware, firmware, and/or software controlling a general purpose processor. For example, in some implementations, themodel trainer 960 includes program files stored on a storage device, loaded into a memory and executed by one or more processors. In other implementations, themodel trainer 960 includes one or more sets of computer-executable instructions that are stored in a tangible computer-readable storage medium such as RAM hard disk or optical or magnetic media. - The
network 980 can be any type of communications network, such as a local area network (e.g., intranet), wide area network (e.g., Internet), or some combination thereof and can include any number of wired or wireless links. In general, communication over thenetwork 980 can be carried via any type of wired and/or wireless connection, using a wide variety of communication protocols (e.g., TCP/IP, HTTP, SMTP, FTP), encodings or formats (e.g., HTML, XML), and/or protection schemes (e.g., VPN, secure HTTP, SSL). - The machine-learned models described in this specification may be used in a variety of tasks, applications, and/or use cases.
- In some implementations, the input to the machine-learned model(s) of the present disclosure can be image data. The machine-learned model(s) can process the image data to generate an output. As an example, the machine-learned model(s) can process the image data to generate an image recognition output (e.g., a recognition of the image data, a latent embedding of the image data, an encoded representation of the image data, a hash of the image data, etc.). As another example, the machine-learned model(s) can process the image data to generate an image segmentation output. As another example, the machine-learned model(s) can process the image data to generate an image classification output. As another example, the machine-learned model(s) can process the image data to generate an image data modification output (e.g., an alteration of the image data, etc.). As another example, the machine-learned model(s) can process the image data to generate an encoded image data output (e.g., an encoded and/or compressed representation of the image data, etc.). As another example, the machine-learned model(s) can process the image data to generate an upscaled image data output. As another example, the machine-learned model(s) can process the image data to generate a prediction output.
- In some implementations, the input to the machine-learned model(s) of the present disclosure can be text or natural language data. The machine-learned model(s) can process the text or natural language data to generate an output. As an example, the machine-learned model(s) can process the natural language data to generate a language encoding output. As another example, the machine-learned model(s) can process the text or natural language data to generate a latent text embedding output. As another example, the machine-learned model(s) can process the text or natural language data to generate a translation output. As another example, the machine-learned model(s) can process the text or natural language data to generate a classification output. As another example, the machine-learned model(s) can process the text or natural language data to generate a textual segmentation output. As another example, the machine-learned model(s) can process the text or natural language data to generate a semantic intent output. As another example, the machine-learned model(s) can process the text or natural language data to generate an upscaled text or natural language output (e.g., text or natural language data that is higher quality than the input text or natural language, etc.). As another example, the machine-learned model(s) can process the text or natural language data to generate a prediction output.
- In some implementations, the input to the machine-learned model(s) of the present disclosure can be speech data. The machine-learned model(s) can process the speech data to generate an output. As an example, the machine-learned model(s) can process the speech data to generate a speech recognition output. As another example, the machine-learned model(s) can process the speech data to generate a speech translation output. As another example, the machine-learned model(s) can process the speech data to generate a latent embedding output. As another example, the machine-learned model(s) can process the speech data to generate an encoded speech output (e.g., an encoded and/or compressed representation of the speech data, etc.). As another example, the machine-learned model(s) can process the speech data to generate an upscaled speech output (e.g., speech data that is higher quality than the input speech data, etc.). As another example, the machine-learned model(s) can process the speech data to generate a textual representation output (e.g., a textual representation of the input speech data, etc.). As another example, the machine-learned model(s) can process the speech data to generate a prediction output.
- In some implementations, the input to the machine-learned model(s) of the present disclosure can be latent encoding data (e.g., a latent space representation of an input, etc.). The machine-learned model(s) can process the latent encoding data to generate an output. As an example, the machine-learned model(s) can process the latent encoding data to generate a recognition output. As another example, the machine-learned model(s) can process the latent encoding data to generate a reconstruction output. As another example, the machine-learned model(s) can process the latent encoding data to generate a search output. As another example, the machine-learned model(s) can process the latent encoding data to generate a reclustering output. As another example, the machine-learned model(s) can process the latent encoding data to generate a prediction output.
- In some implementations, the input to the machine-learned model(s) of the present disclosure can be statistical data. The machine-learned model(s) can process the statistical data to generate an output. As an example, the machine-learned model(s) can process the statistical data to generate a recognition output. As another example, the machine-learned model(s) can process the statistical data to generate a prediction output. As another example, the machine-learned model(s) can process the statistical data to generate a classification output. As another example, the machine-learned model(s) can process the statistical data to generate a segmentation output. As another example, the machine-learned model(s) can process the statistical data to generate a segmentation output. As another example, the machine-learned model(s) can process the statistical data to generate a visualization output. As another example, the machine-learned model(s) can process the statistical data to generate a diagnostic output.
- In some cases, the machine-learned model(s) can be configured to perform a task that includes encoding input data for reliable and/or efficient transmission or storage (and/or corresponding decoding). For example, the task may be audio compression task. The input may include audio data and the output may comprise compressed audio data. In another example, the input includes visual data (e.g., one or more images or videos), the output comprises compressed visual data, and the task is a visual data compression task. In another example, the task may comprise generating an embedding for input data (e.g., input audio or visual data).
- In some cases, the input includes visual data and the task is a computer vision task. In some cases, the input includes pixel data for one or more images and the task is an image processing task. For example, the image processing task can be image classification, where the output is a set of scores, each score corresponding to a different object class and representing the likelihood that the one or more images depict an object belonging to the object class. The image processing task may be object detection, where the image processing output identifies one or more regions in the one or more images and, for each region, a likelihood that region depicts an object of interest. As another example, the image processing task can be image segmentation, where the image processing output defines, for each pixel in the one or more images, a respective likelihood for each category in a predetermined set of categories. For example, the set of categories can be foreground and background. As another example, the set of categories can be object classes. As another example, the image processing task can be depth estimation, where the image processing output defines, for each pixel in the one or more images, a respective depth value. As another example, the image processing task can be motion estimation, where the network input includes multiple images, and the image processing output defines, for each pixel of one of the input images, a motion of the scene depicted at the pixel between the images in the network input.
- In some cases, the input includes audio data representing a spoken utterance and the task is a speech recognition task. The output may comprise a text output which is mapped to the spoken utterance. In some cases, the task comprises encrypting or decrypting input data. In some cases, the task comprises a microprocessor performance task, such as branch prediction or memory address translation.
-
FIG. 9A illustrates one example computing system that can be used to implement the present disclosure. Other computing systems can be used as well. For example, in some implementations, theuser computing device 902 can include themodel trainer 960 and thetraining dataset 962. In such implementations, themodels 920 can be both trained and used locally at theuser computing device 902. In some of such implementations, theuser computing device 902 can implement themodel trainer 960 to personalize themodels 920 based on user-specific data. -
FIG. 9B depicts a block diagram of anexample computing device 970 that performs according to example embodiments of the present disclosure. Thecomputing device 970 can be a user computing device or a server computing device. - The
computing device 970 includes a number of applications (e.g.,applications 1 through N). Each application contains its own machine learning library and machine-learned model(s). For example, each application can include a machine-learned model. Example applications include a text messaging application, an email application, a dictation application, a virtual keyboard application, a browser application, etc. - As illustrated in
FIG. 9B , each application can communicate with a number of other components of the computing device, such as, for example, one or more sensors, a context manager, a device state component, and/or additional components. In some implementations, each application can communicate with each device component using an API (e.g., a public API). In some implementations, the API used by each application is specific to that application. -
FIG. 9C depicts a block diagram of anexample computing device 990 that performs according to example embodiments of the present disclosure. Thecomputing device 990 can be a user computing device or a server computing device. - The
computing device 990 includes a number of applications (e.g.,applications 1 through N). Each application is in communication with a central intelligence layer. Example applications include a text messaging application, an email application, a dictation application, a virtual keyboard application, a browser application, etc. In some implementations, each application can communicate with the central intelligence layer (and model(s) stored therein) using an API (e.g., a common API across all applications). - The central intelligence layer includes a number of machine-learned models. For example, as illustrated in
FIG. 9C , a respective machine-learned model (e.g., a model) can be provided for each application and managed by the central intelligence layer. In other implementations, two or more applications can share a single machine-learned model. For example, in some implementations, the central intelligence layer can provide a single model (e.g., a single model) for all of the applications. In some implementations, the central intelligence layer is included within or otherwise implemented by an operating system of thecomputing device 990. - The central intelligence layer can communicate with a central device data layer. The central device data layer can be a centralized repository of data for the
computing device 990. As illustrated inFIG. 9C , the central device data layer can communicate with a number of other components of the computing device, such as, for example, one or more sensors, a context manager, a device state component, and/or additional components. In some implementations, the central device data layer can communicate with each device component using an API (e.g., a private API). -
FIG. 2 depicts a block diagram of an example non-fungible tokendata generation system 200 according to example embodiments of the present disclosure. In some implementations, the non-fungible tokendata generation system 200 is configured to receive a content item and/or a set ofinput data 204 descriptive of a selected permissions for thecontent item 202 and, as a result of receipt of thecontent item 202 and theinput data 204, provide output data that can include non-fungibletoken data 210 to be added to a non-fungibletoken database 212. Thus, in some implementations, the non-fungible tokendata generation system 200 can include auser interface 208 that is operable to receive the data that can then be utilized to generate the non-fungibletoken data 210. - In particular, the non-fungible token
data generation system 200 can obtain acontent item 202. Thecontent item 202 can include image data, video data, audio data, text data, augmented reality data, virtual reality data, and/or latent encoding data. Additionally and/or alternatively,input data 204 can be obtained. Theinput data 204 can be processed to generatepermission data 206. Thepermission data 206 can be descriptive of one or more selected permissions to be associated with thecontent item 202. The permission data can dictate how third party computing systems can interact with thecontent item 202. Thecontent item 202 and/or theinput data 204 may be obtained via auser interface 208. - The data obtained by the
user interface 208 can be processed to generate non-fungibletoken data 210. The non-fungibletoken data 210 can include data descriptive of and/or referencing thecontent item 202. Additionally and/or alternatively, the non-fungibletoken data 210 can include data descriptive of a smart contract. In some implementations, the non-fungibletoken data 210 can include thepermission data 206 embedded such that thepermission data 206 may be associated with thecontent item 202, which can allow the permissions to be surfaced with thecontent item 202. - The non-fungible
token data 210 can be registered to a blockchain. The non-fungibletoken data 210 can be added to a non-fungibletoken database 212, which can allow thecontent item 202 andrespective permission data 206 to be searchable. -
FIG. 3 depicts an illustration of an examplesearch results page 300 according to example embodiments of the present disclosure. In particular, the examplesearch results page 300 ofFIG. 3 can be provided in abrowser application 302 and/or a search engine application. The search resultspage 300 can include a search query input box 304 configured to receive search queries. - The input of the search query can result in a plurality of search results to be identified, which can include non-fungible token search results and/or general search results not associated with non-fungible tokens.
- The non-fungible token search results can be provided for display in a non-fungible token
search results panel 306. The general search results can be provided for display in a generalsearch results panel 308. The first non-fungible token search result 314 can be the highest ranking search result and may be ranked higher that substantially similar general search results such as the fourthgeneral search result 316. - The non-fungible token search results and/or the general search results may be interacted with to copy, save, and/or republish the content items. Interacting with the search results can cause a pop-up
interface element 312 to be displayed. For example, interacting with the third non-fungibletoken search result 310 can cause the pop-upinterface element 312 to be displayed. The pop-upinterface element 312 can include information descriptive of the one or more permissions associated with the third non-fungible token search result. Alternatively and/or additionally, the pop-upinterface element 312 can include one or more selectable options for interacting with the content item of the third non-fungible token search result (e.g., copy, copy with watermark, copy with permissions, redirect to permissions list, purchase non-fungible token, and/or copy with revenue link to inform non-fungible token owner of potential future revenue flow). -
FIG. 4 depicts a block diagram of an example non-fungible tokendata generation system 400 according to example embodiments of the present disclosure. The non-fungible tokendata generation system 400 is similar to the non-fungible tokendata generation system 200 ofFIG. 2 except that the non-fungible tokendata generation system 400 further includes augmentedcontent item 408 generation. - In particular, the non-fungible token
data generation system 400 can obtain acontent item 402. Thecontent item 402 can include image data, video data, audio data, text data, augmented reality data, virtual reality data, and/or latent encoding data. - The
content item 402 can be processed by acontent ID block 404 to generate a content ID 406 (e.g., one or more content-specific identifiers). Thecontent ID block 404 can include one or more processors and/or one or more encryption blocks. Thecontent ID 406 can be configured as a fingerprint specific for thecontent item 202. In some implementations, thecontent ID 406 may be searchable and unique for theparticular content item 402. - The
content item 402 and thecontent ID 406 can then be utilized to generate anaugmented content item 408. Theaugmented content item 408 can be generated by concatenating the data and/or by one or more machine-learned models. In some implementations, theaugmented content item 408 can include thecontent ID 406 embedded into thecontent item 402. - Additionally and/or alternatively,
input data 410 can be obtained. Theinput data 410 can be processed to generatepermission data 412. Thepermission data 412 can be descriptive of one or more selected permissions to be associated with thecontent item 402. The permission data can dictate how third party computing systems can interact with thecontent item 402. Thecontent item 402 and/or theinput data 410 may be obtained via auser interface 414. - The data obtained by the
user interface 414 can be processed to generate non-fungibletoken data 416. The non-fungibletoken data 416 can include data descriptive of and/or referencing theaugmented content item 408. Additionally and/or alternatively, the non-fungibletoken data 416 can include data descriptive of a smart contract. In some implementations, the non-fungibletoken data 416 can include thepermission data 412 embedded such that thepermission data 412 may be associated with theaugmented content item 408, which can allow the permissions to be surfaced with theaugmented content item 408. - The non-fungible
token data 416 can be registered to a blockchain. The non-fungibletoken data 416 can be added to a non-fungibletoken database 418, which can allow theaugmented content item 408 andrespective permission data 412 to be searchable. -
FIG. 5 depicts a block diagram of an example search resultspage generation system 500 according to example embodiments of the present disclosure. In particular, asearch query 502 can be obtained. Thesearch query 502 can be processed with asearch engine 504 to determine and/or generate a plurality of search results 510. The plurality ofsearch results 510 can include afirst search result 512, asecond search result 514, athird search result 516, and/or annth search result 518. - The plurality of
search results 510 can be filtered and ranked based on responsiveness to the search query, based on one or more contexts, and/or based on whether the search result is a duplicate of a digital resource of a non-fungible token. For example, thefirst search result 512, thesecond search result 514, thethird search result 516, and/or thenth search result 518 can be processed by afilter block 520. Thefilter block 520 can filter out one or more search results to not be displayed. For example, thethird search result 516 may be filtered out based on thethird search result 516 being descriptive of a content item substantially similar to the content item of thefirst search result 512, which may be associated with a non-fungible token. The remaining search results can then be utilized to generate a search resultspage 530. The search resultspage 530 can then be provided to one or more users. -
FIG. 6 depicts a flow chart diagram of an example method to perform according to example embodiments of the present disclosure. AlthoughFIG. 6 depicts steps performed in a particular order for purposes of illustration and discussion, the methods of the present disclosure are not limited to the particularly illustrated order or arrangement. The various steps of themethod 600 can be omitted, rearranged, combined, and/or adapted in various ways without deviating from the scope of the present disclosure. - At 602, a computing system can obtain a media content item. The media content item can be associated with a particular user. The content item can include image data, video data, audio data, text data, and/or latent encoding data. The content item may be generated by and/or published by the particular user. The content item may be a content item stored locally by the particular user, may be stored in cloud storage for the particular user, and/or may be published on the web (e.g., on a social media website, a blog website, and/or a personal website).
- At 604, the computing system can obtain one or more user inputs. The one or more user inputs can be associated with the particular user. The one or more user inputs can be obtained from a user computing system. In some implementations, the one or more user inputs can be inputs to a user interface provided via a server computing system. For example, one or more user interface elements can be provided in a content item management platform (e.g., a cloud storage web platform, a social media platform, and/or a content item repository platform). The one or more user inputs may be associated with a user interface with one or more options for selecting permissions to be associated with the obtained content item. For example, the one or more options can include do not allow republishing or copying, allow republishing or copying if revenue provided to original owner, allow republishing or copying freely, and/or any other form of permissions, which can include caveats manually input by a user.
- At 606, the computing system can determine the one or more user inputs are associated with a selection of one or more permissions. The one or more permissions can be associated with the media content item. In some implementations, the one or more permissions can be associated with permissible interactions with the media content item. The permissible interactions can be associated with whether third parties can copy, republish, and/or share the content item. The determination can be based on heuristics, deterministic data, and/or one or more machine-learned parameters.
- At 608, the computing system can generate non-fungible token data based on the media content item and the one or more permissions. One or more references to the media content item may be embedded in the non-fungible token data. In some implementations, the one or more permissions can be embedded in the non-fungible token data. The one or more permissions can be configured to be identifiable for display with the media content item. The non-fungible token data can include smart contract data. In some implementations, the payload of the smart contract associated with the smart contract data may be the content item. The content item may be viewed as a digital resource that may be transferred based on the criteria of the smart contract. The smart contract data can include the one or more permissions.
- At 610, the computing system can register the non-fungible token data with a blockchain. The blockchain can be associated with a decentralized blockchain computing system. The non-fungible token data may be minted to the blockchain and may be associated with an electronic ledger that tracks transactions associated with the non-fungible token data. Additionally and/or alternatively, the non-fungible token data may be processed to generate index data associated with the non-fungible token data. The index data can then be added to a searchable database.
- In some implementations, the computing system can obtain a display request associated with the media content item. The non-fungible token data associated with the media content item can be identified. The permission data associated with the media content item can then be obtained. A display dataset can then be generated. The display dataset can include the media content item and the permission data. The display dataset can be provided. In some implementations, the display request can be associated with a third party computing system. The display request can be generated based on a search query processed by a search engine. The media content item can be responsive to the search query. In some implementations, the computing system can determine the display request complies with the one or more preferences. The display dataset can include executable code for providing a user interface for displaying the one or more preferences in response to a selection of the media content item.
- Alternatively and/or additionally, the computing system can obtain a search query from a third party computing system and process the search query to determine a plurality of search results responsive to the search query. The plurality of search results can include the media content item.
- In some implementations, the computing system can determine the plurality of search results include one or more particular search results associated with one or more respective other content items that are associated with the media content item, determining ranking data for the plurality of search results based on the one or more respective other content items being associated with the media content item, and providing the plurality of search results for display based on the ranking data. The ranking data can be descriptive of non-fungible token search results being provided preference over general search results. In some implementations, the media content item can be provided for display before the one or more respective other content items.
-
FIG. 7 depicts a flow chart diagram of an example method to perform according to example embodiments of the present disclosure. AlthoughFIG. 7 depicts steps performed in a particular order for purposes of illustration and discussion, the methods of the present disclosure are not limited to the particularly illustrated order or arrangement. The various steps of themethod 700 can be omitted, rearranged, combined, and/or adapted in various ways without deviating from the scope of the present disclosure. - At 702, a computing system can provide a media content item for display. The media content item can be a digital resource associated with a non-fungible token. In some implementations, the non-fungible token can be documented on a blockchain. The media content item can include image data, video data, text data, multimodal data, audio data, virtual reality data, augmented reality data, and/or latent encoding data. The media content item can be provided for display in a user interface. In some implementations, the media content item can be provided for display in a user interface of a search results page, a social media platform, a shared content item storage platform, a blog platform, and/or other web platform. The media content item may be provided for display in response to a search query. Alternatively and/or additionally, the media content item may be provided in a social media feed and/or a news feed.
- At 704, the computing system can obtain input data from a user computing system. The input data can be descriptive of one or more inputs to interact with the media content item. The input data can be descriptive of a request to copy and/or republish the media content item. The input data can be descriptive of one or more selections to a user interface, which may include an initial selection of the media content item, then one or more selections to a pop-up interface.
- At 706, the computing system can obtain permission data associated with the media content item based on the input data. The permission data can be stored on the blockchain. In some implementations, the permission data can be descriptive of one or more permissions associated with the media content item. The one or more permissions can include one or more parameters for generating a copy of the media content item.
- At 708, the computing system can provide a user interface element for display. The user interface element can include a notification. The notification can be descriptive of the one or more permissions associated with the media content item. Additionally and/or alternatively, the notification may provide one or more options for interacting with the media content item. The one or more options can be options that comply with the parameters set by the one or more permissions. For example, the one or more options provided may differ from one media content item to another media content item based on the level of interactions allowed based on the one or more permissions.
- In some implementations, the computing system can obtain additional input data. The additional input data can be descriptive of a copy request to generate a copy of the media content item. The additional input data and the permission data can be processed to determine a response action. The response action can include generating a media content item dataset. The media content item dataset can include the permission data embedded in the media content item. Alternatively and/or additionally, the response action can include providing a rejection notification. The rejection notification can indicate that generating a copy is against the one or more permissions associated with the media content item.
-
FIG. 8 depicts a flow chart diagram of an example method to perform according to example embodiments of the present disclosure. AlthoughFIG. 8 depicts steps performed in a particular order for purposes of illustration and discussion, the methods of the present disclosure are not limited to the particularly illustrated order or arrangement. The various steps of themethod 800 can be omitted, rearranged, combined, and/or adapted in various ways without deviating from the scope of the present disclosure. - At 802, a computing system can obtain content item data from a user computing system. The content item data can be associated with a particular user. The content item may be a media content item (e.g., an image, a video, a text string, a song, a virtual-reality asset, and/or an augmented-reality asset). The content item can be obtained via a user input, can be extracted from a webpage, and/or can be obtained from a database.
- In some implementations, obtaining the content item data from the user computing system can include accessing a user-specific content item database (e.g., a web storage platform, a local drive, and/or a server storage drive) and providing a mint user interface. The mint user interface can include one or more selectable interface elements for initiating non-fungible token generation.
- At 804, the computing system can obtain permission data associated with the content item data. The permission data can be descriptive of one or more permissions for interacting with the content item data. In some implementations, the one or more permissions can be descriptive of one or more parameters for republishing the augmented content item data. The permission data may be descriptive of view preferences. For example, the permission data may indicate the content item may be provided for display as a preview, with a watermark, and/or in a lower resolution.
- At 806, the computing system can generate a content-specific identifier for the content item data. The content-specific identifier can include identification data that is specifically generated for the content item data. In some implementations, the content-specific identifier can be a set of data that acts as a fingerprint for identifying the content item and copies of the content item throughout the internet and/or local drives. The content-specific identifier can include a watermark and/or other embedded data that may be readily viewable and/or may be indistinguishable to the viewers but identifiable via computer systems processing and rendering the data.
- At 808, the computing system can generate augmented content item data by embedding the content-specific identifier in the content item data. The augmented content item data may be generated by one or more machine-learned models. For example, the one or more machine-learned models may process the content item data and the content-specific identifier to generate the augmented content item data. The one or machine-learned models can include an augmentation model, a segmentation model, an embedding model, an encoder model, a self-attention model, a decoder model, and/or a concatenation model.
- At 810, the computing system can generate non-fungible token data based on the permission data and the augmented content item data. The non-fungible token data can include the permission data. In some implementations, the non-fungible token data can reference the augmented content item data.
- At 812, the computing system can register the non-fungible token data with a blockchain. Registering the non-fungible token data can include minting a non-fungible token on the blockchain. The blockchain can be associated with a blockchain computing system. The blockchain computing system can include a decentralized and distributed computing system.
- In some implementations, the computing system can add the non-fungible token data to a search database. The search database can then be queried in response to receiving a search input. The search database can include non-fungible token content items and unminted content items. The non-fungible token content items can be more heavily weighted and, therefore, more highly ranked when pulled for search purposes. The search database may hide other content items that are substantially similar to and/or the same as the content item and/or the augmented content item.
- Alternatively and/or additionally, the computing system can obtain a search query. A plurality of search results responsive to the search query can then be determined. The plurality of search results can include a particular search result associated with the augmented content item data. One or more other search results associated with other content data can be determined to include the content-specific identifier. The augmented content item data can be provided for display without providing the one or more other search results.
- The technology discussed herein makes reference to servers, databases, software applications, and other computer-based systems, as well as actions taken and information sent to and from such systems. The inherent flexibility of computer-based systems allows for a great variety of possible configurations, combinations, and divisions of tasks and functionality between and among components. For instance, processes discussed herein can be implemented using a single device or component or multiple devices or components working in combination. Databases and applications can be implemented on a single system or distributed across multiple systems. Distributed components can operate sequentially or in parallel.
- While the present subject matter has been described in detail with respect to various specific example embodiments thereof, each example is provided by way of explanation, not limitation of the disclosure. Those skilled in the art, upon attaining an understanding of the foregoing, can readily produce alterations to, variations of, and equivalents to such embodiments. Accordingly, the subject disclosure does not preclude inclusion of such modifications, variations and/or additions to the present subject matter as would be readily apparent to one of ordinary skill in the art. For instance, features illustrated or described as part of one embodiment can be used with another embodiment to yield a still further embodiment. Thus, it is intended that the present disclosure cover such alterations, variations, and equivalents.
Claims (20)
1. A computing system for digital rights management, the system comprising:
one or more processors; and
one or more non-transitory computer-readable media that collectively store instructions that, when executed by the one or more processors, cause the computing system to perform operations, the operations comprising:
obtaining a media content item, wherein the media content item is associated with a particular user;
obtaining one or more user inputs, wherein the one or more user inputs are associated with the particular user;
determining the one or more user inputs are associated with a selection of one or more permissions, wherein the one or more permissions are associated with the media content item;
generating non-fungible token data based on the media content item and the one or more permissions, wherein one or more references to the media content item are embedded in the non-fungible token data, wherein the one or more permissions are embedded in the non-fungible token data, and wherein the one or more permissions are configured to be identifiable for display with the media content item; and
registering the non-fungible token data with a blockchain, wherein the blockchain is associated with a decentralized blockchain computing system.
2. The system of claim 1 , wherein the operations further comprise:
obtaining a display request associated with the media content item;
identifying the non-fungible token data associated with the media content item;
obtaining permission data associated with the media content item, wherein the permission data is descriptive of the one or more permissions;
generating a display dataset, wherein the display dataset comprises the media content item and the permission data; and
providing the display dataset.
3. The system of claim 2 , wherein the display request is associated with a third party computing system, wherein the display request is generated based on a search query processed by a search engine, and wherein the media content item is responsive to the search query.
4. The system of claim 2 , wherein the operations further comprise:
determining the display request complies with the one or more preferences.
5. The system of claim 2 , wherein the display dataset comprises executable code for providing a user interface for displaying the one or more preferences in response to a selection of the media content item.
6. The system of claim 1 , wherein the operations further comprise:
obtaining a search query from a third party computing system; and
processing the search query to determine a plurality of search results responsive to the search query, wherein the plurality of search results comprise the media content item.
7. The system of claim 6 , wherein the operations further comprise:
determining the plurality of search results comprise one or more particular search results associated with one or more respective other content items that are associated with the media content item;
determining ranking data for the plurality of search results based on the one or more respective other content items being associated with the media content item; and
providing the plurality of search results for display based on the ranking data.
8. The system of claim 7 , wherein the ranking data is descriptive of non-fungible token search results being provided preference over general search results.
9. The system of claim 7 , wherein the media content item is provided for display before the one or more respective other content items.
10. The system of claim 1 , wherein the one or more permissions are associated with permissible interactions with the media content item.
11. A computer-implemented method for digital rights management, the method comprising:
providing, by a computing system comprising one or more processors, a media content item for display, wherein the media content item is a digital resource associated with a non-fungible token, wherein the non-fungible token is documented on a blockchain;
obtaining, by the computing system, input data from a user computing system, wherein the input data is descriptive of one or more inputs to interact with the media content item;
obtaining, by the computing system, permission data associated with the media content item based on the input data, wherein the permission data is stored on the blockchain, and wherein the permission data is descriptive of one or more permissions associated with the media content item; and
providing, by the computing system, a user interface element for display, wherein the user interface element comprises a notification, wherein the notification is descriptive of the one or more permissions associated with the media content item.
12. The method of claim 11 , further comprising:
obtaining, by the computing system, additional input data, wherein the additional input data is descriptive of a copy request to generate a copy of the media content item; and
processing, by the computing system, the additional input data and the permission data to determine a response action.
13. The method of claim 12 , wherein the response action comprises:
generating, by the computing system, a media content item dataset, wherein the media content item dataset comprises the permission data embedded in the media content item.
14. The method of claim 12 , wherein the response action comprises:
providing, by the computing system, a rejection notification, wherein the rejection notification indicates that generating a copy is against the one or more permissions associated with the media content item.
15. The method of claim 11 , wherein the one or more permissions comprise one or more parameters for generating a copy of the media content item.
16. One or more non-transitory computer-readable media that collectively store instructions that, when executed by one or more computing devices, cause the one or more computing devices to perform operations, the operations comprising:
obtaining content item data from a user computing system, wherein the content item data is associated with a particular user;
obtaining permission data associated with the content item data, wherein the permission data is descriptive of one or more permissions for interacting with the content item data;
generating a content-specific identifier for the content item data, wherein the content-specific identifier comprises identification data that is specifically generated for the content item data;
generating augmented content item data by embedding the content-specific identifier in the content item data;
generating non-fungible token data based on the permission data and the augmented content item data, wherein the non-fungible token data comprises the permission data, and wherein the non-fungible token data references the augmented content item data; and
registering the non-fungible token data with a blockchain.
17. The one or more non-transitory computer-readable media of claim 16 , wherein the operations further comprise:
obtaining a search query;
determining a plurality of search results responsive to the search query, wherein the plurality of search results comprise a particular search result associated with the augmented content item data;
determining one or more other search results associated with other content data comprising the content-specific identifier; and
providing the augmented content item data without providing the one or more other search results.
18. The one or more non-transitory computer-readable media of claim 16 , wherein obtaining the content item data from the user computing system comprises:
accessing a user-specific content item database; and
providing a mint user interface, wherein the mint user interface comprises one or more selectable interface elements for initiating non-fungible token generation.
19. The one or more non-transitory computer-readable media of claim 16 , wherein the operations further comprise:
adding the non-fungible token data to a search database.
20. The one or more non-transitory computer-readable media of claim 16 , wherein the one or more permissions are descriptive of one or more parameters for republishing the augmented content item data.
Priority Applications (1)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US18/077,650 US20240054190A1 (en) | 2022-08-15 | 2022-12-08 | Digital Rights Management for NFTs Across Search Surfaces |
Applications Claiming Priority (2)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US202263397962P | 2022-08-15 | 2022-08-15 | |
US18/077,650 US20240054190A1 (en) | 2022-08-15 | 2022-12-08 | Digital Rights Management for NFTs Across Search Surfaces |
Publications (1)
Publication Number | Publication Date |
---|---|
US20240054190A1 true US20240054190A1 (en) | 2024-02-15 |
Family
ID=89846248
Family Applications (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
US18/077,650 Pending US20240054190A1 (en) | 2022-08-15 | 2022-12-08 | Digital Rights Management for NFTs Across Search Surfaces |
Country Status (1)
Country | Link |
---|---|
US (1) | US20240054190A1 (en) |
-
2022
- 2022-12-08 US US18/077,650 patent/US20240054190A1/en active Pending
Similar Documents
Publication | Publication Date | Title |
---|---|---|
O’Dwyer | Limited edition: Producing artificial scarcity for digital art on the blockchain and its implications for the cultural industries | |
US11632238B2 (en) | Traceability of edits to digital documents via distributed ledgers | |
US20200162266A1 (en) | Facilitating analytic services for provenance of digital documents | |
US11775949B2 (en) | Trusted transaction system for digital asset licensing | |
US20180232444A1 (en) | Web api recommendations | |
CN103544204B (en) | For that be expressed as the classification of tree and based on index the system and method for watermark | |
WO2008157475A1 (en) | Licensed rights clearance and tracking for digital assets | |
CN103348341A (en) | User-friendly method and system for compiling unique sample code for digital sample with help of user interface | |
CN101556617A (en) | Systems and methods for associating metadata with media | |
US20230009908A1 (en) | Distributed platform for integration of existing digital unique resources | |
Kripa et al. | Blockchain framework for social media DRM based on secret sharing | |
Mekouar et al. | A survey on blockchain-based Recommender Systems: Integration architecture and taxonomy | |
Rama et al. | A large scale study of reader interactions with images on Wikipedia | |
JP2023517518A (en) | Vector embedding model for relational tables with null or equivalent values | |
Shen | Blockchain technology and its applications in digital content copyright protection | |
US20180322295A1 (en) | Encoding information using word embedding | |
US20240054190A1 (en) | Digital Rights Management for NFTs Across Search Surfaces | |
US20230244761A1 (en) | Techniques for providing computer-mediated reality content as digital multimedia experiences via webpage non-fungible tokens | |
US20240048397A1 (en) | Identity Management for Web2 and Web3 Environments | |
US20240048547A1 (en) | User Data and Personalization Models Implemented on a Blockchain | |
EP4322023A1 (en) | Authoritative factual service for blockchain smart contracts | |
US20240056441A1 (en) | Decentralized Identity Management for Web3 | |
KR20150120046A (en) | Terminal for uploading digital contents, server for managing the digital contents, and methods threrof | |
US20230385791A1 (en) | Experience Based NFT Marketplace for Digital Assets | |
WO2024005823A1 (en) | Generating a comprehensive non-fungible token search index |
Legal Events
Date | Code | Title | Description |
---|---|---|---|
STPP | Information on status: patent application and granting procedure in general |
Free format text: DOCKETED NEW CASE - READY FOR EXAMINATION |
|
AS | Assignment |
Owner name: GOOGLE LLC, CALIFORNIAFree format text: ASSIGNMENT OF ASSIGNORS INTEREST;ASSIGNOR:BADR, IBRAHIM;REEL/FRAME:062548/0550Effective date: 20220802 |