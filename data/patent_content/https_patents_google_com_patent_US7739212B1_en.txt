US7739212B1 - System and method for updating facts in a fact repository - Google Patents
System and method for updating facts in a fact repository Download PDFInfo
- Publication number
- US7739212B1 US7739212B1 US11/692,475 US69247507A US7739212B1 US 7739212 B1 US7739212 B1 US 7739212B1 US 69247507 A US69247507 A US 69247507A US 7739212 B1 US7739212 B1 US 7739212B1
- Authority
- US
- United States
- Prior art keywords
- fact
- attribute
- type
- rule
- correlation
- Prior art date
- Legal status (The legal status is an assumption and is not a legal conclusion. Google has not performed a legal analysis and makes no representation as to the accuracy of the status listed.)
- Active, expires
Links
Images
Classifications
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F16/00—Information retrieval; Database structures therefor; File system structures therefor
- G06F16/30—Information retrieval; Database structures therefor; File system structures therefor of unstructured textual data
- G06F16/31—Indexing; Data structures therefor; Storage structures
- G06F16/316—Indexing structures
- G06F16/328—Management therefor
Definitions
- the disclosed embodiments relate generally to fact databases. More particularly, the disclosed embodiments relate to determining and applying rules based on metadata associated with facts in a database.
- the method comprises identifying a correlation between a type of a first object stored in the repository and an attribute of a fact associated with the first object.
- the method further comprises determining a rule based on the correlation between the type of the first object and the attribute of the fact associated with the first object and applying the rule to a second object of the type to modify the second object to produce a groomed object.
- the method stores the groomed object in the repository.
- system and computer program product comprise a rule creation engine for identifying a correlation between a type of a first object stored in the repository and an attribute of a fact associated with the first object and for determining a rule based on the correlation between the type of the first object and the attribute of the fact associated with the first object.
- the system and computer program product further comprise a rule application engine for applying the rule to a second object of the type to modify the second object to produce a groomed object, and for storing the groomed object in the repository.
- FIG. 1 shows a system architecture adapted to support one embodiment.
- FIGS. 2( a )- 2 ( d ) are block diagrams illustrating a data structure for facts within a repository of FIG. 1 in accordance with some embodiments.
- FIG. 2( e ) is a block diagram illustrating an alternate data structure for facts and objects in accordance with some embodiments.
- FIG. 3 illustrates a system for creating and applying rules based on metadata associated with an object, according to one embodiment.
- FIG. 4 illustrates various exemplary correlations between object type and attributes of facts.
- FIG. 5 illustrates a rule according to one embodiment.
- FIG. 6( a ) illustrates application of a rule, according to one embodiment.
- FIG. 6( b ) illustrates application of a rule, according to another embodiment.
- FIG. 7 illustrates a method for creating and applying rules based on metadata associated with an object, according to one embodiment.
- FIG. 1 shows a system architecture 100 adapted to support one embodiment.
- FIG. 1 shows components used to add facts into, and retrieve facts from a repository 115 .
- the system architecture 100 includes a network 104 , through which any number of document hosts 102 communicate with a data processing system 106 , along with any number of object requesters 152 , 154 .
- Document hosts 102 store documents and provide access to documents.
- a document is comprised of any machine-readable data including any combination of text, graphics, multimedia content, etc.
- a document may be encoded in a markup language, such as Hypertext Markup Language (HTML), i.e., a web page, in a interpreted language (e.g., JavaScript) or in any other computer readable or executable format.
- HTML Hypertext Markup Language
- a document can include one or more hyperlinks to other documents.
- a typical document will include one or more facts within its content.
- a document stored in a document host 102 may be located and/or identified by a Uniform Resource Locator (URL), or Web address, or any other appropriate form of identification and/or location.
- URL Uniform Resource Locator
- a document host 102 is implemented by a computer system, and typically includes a server adapted to communicate over the network 104 via networking protocols (e.g., TCP/IP), as well as application and presentation protocols (e.g., HTTP, HTML, SOAP, D-HTML, JAVA®).
- networking protocols e.g., TCP/IP
- application and presentation protocols e.g., HTTP, HTML, SOAP, D-HTML, JAVA®.
- the documents stored by a host 102 are typically held in a file directory, a database, or other data repository.
- a host 102 can be implemented in any computing device (e.g., from a PDA or personal computer, a workstation, mini-computer, or mainframe, to a cluster or grid of computers), as well as in any processor architecture or operating system.
- FIG. 1 shows components used to manage facts in a fact repository 115 .
- Data processing system 106 includes one or more importers 108 , one or more janitors 110 , a build engine 112 , a service engine 114 , and a fact repository 115 (also called simply a “repository”).
- Importers 108 operate to process documents received from the document hosts, read the data content of documents, and extract facts (as operationally and programmatically defined within the data processing system 106 ) from such documents.
- the importers 108 also determine the subject or subjects with which the facts are associated, and extract such facts into individual items of data, for storage in the repository 115 .
- there are different types of importers 108 for different types of documents for example, dependent on the format or document type.
- Janitors 110 operate to process facts extracted by the importer 108 .
- This processing can include but is not limited to, data cleansing, object merging, and fact induction.
- Other types of janitors 110 may be implemented, depending on the types of data management functions desired, such as translation, compression, spelling or grammar correction, and the like.
- Various janitors 110 act on facts to normalize attribute names, and values and delete duplicate and near-duplicate facts so an object does not have redundant information. For example, we might find on one page that Britney Spears' birthday is “12/2/1981” while on another page that her date of birth is “Dec. 2, 1981.”Birthday and Date of Birth might both be rewritten as Birthdate by one janitor and then another janitor might notice that 12/2/1981 and Dec. 2, 1981 are different forms of the same date. It would choose the preferred form, remove the other fact and combine the source lists for the two facts. As a result, one source page for this fact will contain an exact match of the fact while another source page will contain text that is considered synonymous with the fact.
- the build engine 112 builds and manages the repository 115 .
- the service engine 114 is an interface for querying the repository 115 .
- the service engine 114 ′s main function is to process queries, score matching objects, and return them to the caller but it is also used by the janitor 110 .
- the repository 115 stores factual information extracted from a plurality of documents that are located on document hosts 102 .
- a document from which a particular fact may be extracted is a source document (or “source”) of that particular fact.
- source a source of a fact includes that fact (or a synonymous fact) within its contents.
- the repository 115 contains one or more facts.
- each fact is associated with exactly one object.
- One implementation for this association includes in each fact an object ID that uniquely identifies the object of the association.
- any number of facts may be associated with an individual object, by including the object ID for that object in the facts.
- objects themselves are not physically stored in the repository 115 , but rather are defined by the set or group of facts with the same associated object ID, as described below. Further details about facts in the repository 115 are described below, in relation to FIGS. 2( a )- 2 ( d ).
- the importer 108 provides facts directly to the build engine 112 and/or repository 115 .
- the janitors 110 operate on the facts and/or objects in the repository 115 .
- the repository 115 may be deployed over multiple servers.
- the janitors 110 may be located on any number of different computers. For convenience of explanation, however, the components of the data processing system 106 are discussed as though they were implemented on a single computer.
- document hosts 102 are located on the data processing system 106 instead of being coupled to the data processing system 106 by a network.
- importer the 108 may import facts from a database that is a part of or associated with the data processing system 106 .
- FIG. 1 also includes components to access the repository 115 on behalf of one or more object requesters 152 , 154 .
- Object requesters are entities that request objects from the repository 115 .
- Object requesters 152 , 154 may be understood as clients of the system 106 , and can be implemented in any computer device or architecture.
- a first object requester 152 is located remotely from system 106
- a second object requester 154 is located in the data processing system 106 .
- the blog may include a reference to an object whose facts are in the repository 115 .
- An object requester 152 such as a browser displaying the blog, will access data processing system 106 so that the information of the facts associated with the object can be displayed as part of the blog web page.
- janitor 110 or other entity considered to be part of data processing system 106 can function as an object requester 154 , requesting the facts of objects from the repository 115 .
- FIG. 1 shows that the data processing system 106 includes a memory 107 and one or more processors 116 .
- the memory 107 includes the importers 108 , janitors 110 , build engine 112 , service engine 114 , and requester 154 , each of which is preferably implemented as instructions stored in memory 107 and executable by processor 116 .
- Memory 107 also includes the repository 115 .
- the repository 115 can be stored in a memory of one or more computer systems or in a type of memory such as a disk.
- FIG. 1 also includes a computer readable medium 118 containing, for example, at least one of importers 108 , janitors 110 , the build engine 112 , the service engine 114 , the requester 154 , and at least some portions of the repository 115 .
- FIG. 1 also includes one or more input/output devices 120 that allow data to be input and output to and from the data processing system 106 . It will be understood that embodiments of the data processing system 106 also include standard software components such as operating systems and the like and further include standard hardware components not shown in the figure for clarity of example.
- FIG. 2( a ) shows an example format of a data structure for facts within the repository 115 , according to some embodiments.
- the repository 115 includes facts 204 .
- Each fact 204 includes a unique identifier for that fact, such as a fact ID 210 .
- Each fact 204 includes at least an attribute 212 and a value 214 .
- a fact associated with an object representing George Washington may include an attribute of “date of birth” and a value of “Feb. 22, 1732.”
- all facts are stored as alphanumeric characters since they are extracted from web pages.
- facts also can store binary data values.
- Other embodiments, however, may store fact values as mixed types, or in encoded formats.
- each fact is associated with an object ID 209 that identifies the object that the fact describes.
- object ID 209 identifies the object that the fact describes.
- objects are not stored as separate data entities in memory.
- the facts associated with an object contain the same object ID, but no physical object exists.
- objects are stored as data entities in memory, and include references (for example, pointers or IDs) to the facts associated with the object.
- the logical data structure of a fact can take various forms; in general, a fact is represented by a tuple that includes a fact ID, an attribute, a value, and an object ID.
- the storage implementation of a fact can be in any underlying physical data structure.
- FIG. 2( b ) shows an example of facts having respective fact IDs of 10 , 20 , and 30 in the repository 115 .
- Facts 10 and 20 are associated with an object identified by object ID “1.”
- Fact 10 has an attribute of “Name” and a value of “China.”
- Fact 20 has an attribute of “Category” and a value of “Country.”
- the object identified by object ID “1” has a name fact 205 with a value of “China” and a category fact 206 with a value of “Country.”
- Fact 30 208 has an attribute of “Property” and a value of “Bill Clinton was the 42nd President of the United States from 1993 to 2001.”
- the object identified by object ID “2” has a property fact with a fact ID of 30 and a value of “Bill Clinton was the 42nd President of the United States from 1993 to 2001.”
- each fact has one attribute and one value.
- the number of facts associated with an object is not limited; thus while only two facts are shown for the “China” object, in practice there may be dozens, even hundreds of facts associated with a given object.
- the value fields of a fact need not be limited in size or content. For example, a fact about the economy of “China” with an attribute of “Economy” would have a value including several paragraphs of text, numbers, and perhaps even tables of figures. This content can be formatted, for example, in a markup language. For example, a fact having an attribute “original html” might have a value of the original html text taken from the source web page.
- FIG. 2( b ) shows the explicit coding of object ID, fact ID, attribute, and value
- content of the fact can be implicitly coded as well (e.g., the first field being the object ID, the second field being the fact ID, the third field being the attribute, and the fourth field being the value).
- Other fields include but are not limited to: the language used to state the fact (English, etc.), how important the fact is, the source of the fact, a confidence value for the fact, and so on.
- FIG. 2( c ) shows an example object reference table 210 that is used in some embodiments. Not all embodiments include an object reference table.
- the object reference table 210 functions to efficiently maintain the associations between object IDs and fact IDs. In the absence of an object reference table 210 , it is also possible to find all facts for a given object ID by querying the repository 115 to find all facts with a particular object ID. While FIGS. 2( b ) and 2 ( c ) illustrate the object reference table 210 with explicit coding of object and fact IDs, the table also may contain just the ID values themselves in column or pair-wise arrangements.
- FIG. 2( d ) shows an example of a data structure for facts within the repository 115 , according to some embodiments, showing an extended format of facts.
- the fields include an object reference link 216 to another object.
- the object reference link 216 can be an object ID of another object in the repository 115 , or a reference to the location (e.g., table row) for the object in the object reference table 210 .
- the object reference link 216 allows facts to have as values other objects. For example, for an object “United States,” there may be a fact with the attribute of “president” and the value of “George W. Bush,” with “George W. Bush” being an object having its own facts in the repository 115 .
- the value field 214 stores the name of the linked object and the link 216 stores the object identifier of the linked object.
- this “president” fact would include the value 214 of “George W. Bush”, and an object reference link 216 that contains the object ID for the “George W. Bush” object.
- facts 204 do not include a link field 216 because the value 214 of a fact 204 may store a link to another object.
- Each fact 204 also may include one or more metrics 218 .
- a metric provides an indication of the quality of the fact.
- the metrics include a confidence level and an importance level.
- the confidence level indicates the likelihood that the fact is correct.
- the importance level indicates the relevance of the fact to the object, compared to other facts for the same object.
- the importance level may optionally be viewed as a measure of how vital a fact is to an understanding of the entity or concept represented by the object.
- Each fact 204 includes a list of one or more sources 220 that include the fact and from which the fact was extracted.
- Each source may be identified by a Uniform Resource Locator (URL), or Web address, or any other appropriate form of identification and/or location, such as a unique document identifier.
- URL Uniform Resource Locator
- the facts illustrated in FIG. 2( d ) include an agent field 222 that identifies the importer 108 that extracted the fact.
- the importer 108 may be a specialized importer that extracts facts from a specific source (e.g., the pages of a particular web site, or family of web sites) or type of source (e.g., web pages that present factual information in tabular form), or an importer 108 that extracts facts from free text in documents throughout the Web, and so forth.
- a name fact 207 is a fact that conveys a name for the entity or concept represented by the object ID.
- a name fact 207 includes an attribute 224 of “name” and a value, which is the name of the object. For example, for an object representing the country Spain, a name fact would have the value “Spain.”
- a name fact 207 being a special instance of a general fact 204 , includes the same fields as any other fact 204 ; it has an attribute, a value, a fact ID, metrics, sources, etc.
- the attribute 224 of a name fact 207 indicates that the fact is a name fact, and the value is the actual name.
- the name may be a string of characters.
- An object ID may have one or more associated name facts, as many entities or concepts can have more than one name. For example, an object ID representing Spain may have associated name facts conveying the country's common name “Spain” and the official name “Kingdom of Spain.” As another example, an object ID representing the U.S. Patent and Trademark Office may have associated name facts conveying the agency's acronyms “PTO” and “USPTO” as well as the official name “United States Patent and Trademark Office.” If an object does have more than one associated name fact, one of the name facts may be designated as a primary name and other name facts may be designated as secondary names, either implicitly or explicitly.
- a property fact 208 is a fact that conveys a statement about the entity or concept represented by the object ID.
- Property facts are generally used for summary information about an object.
- a property fact 208 being a special instance of a general fact 204 , also includes the same fields (such as attribute, value, fact ID, etc.) as other facts 204 .
- the attribute field 226 of a property fact 208 indicates that the fact is a property fact (e.g., attribute is “property”) and the value is a string of text that conveys the statement of interest.
- the value of a property fact may be the text string “Bill Clinton was the 42nd President of the United States from 1993 to 2001.”
- Some object IDs may have one or more associated property facts while other objects may have no associated property facts.
- the data structure of the repository 115 may take on other forms. Other fields may be included in facts and some of the fields described above may be omitted.
- each object ID may have additional special facts aside from name facts and property facts, such as facts conveying a type or category (for example, person, place, movie, actor, organization, etc.) for categorizing the entity or concept represented by the object ID.
- an object's name(s) and/or properties may be represented by special records that have a different format than the general fact records 204 .
- null object As described previously, a collection of facts is associated with an object ID of an object.
- An object may become a null or empty object when facts are disassociated from the object.
- a null object can arise in a number of different ways.
- One type of null object is an object that has had all of its facts (including name facts) removed, leaving no facts associated with its object ID.
- Another type of null object is an object that has all of its associated facts other than name facts removed, leaving only its name fact(s).
- the object may be a null object only if all of its associated name facts are removed.
- a null object represents an entity or concept for which the data processing system 106 has no factual information and, as far as the data processing system 106 is concerned, does not exist.
- facts of a null object may be left in the repository 115 , but have their object ID values cleared (or have their importance set to a negative value). However, the facts of the null object are treated as if they were removed from the repository 115 . In some other embodiments, facts of null objects are physically removed from the repository 115 .
- FIG. 2( e ) is a block diagram illustrating an alternate data structure 290 for facts and objects in accordance with embodiments of the invention.
- an object 290 contains an object ID 292 and references or points to facts 294 .
- Each fact includes a fact ID 295 , an attribute 297 , and a value 299 .
- an object 290 actually exists in memory 107 .
- an object may explicitly exist in the repository 115 , or it may exist merely as a collection of facts with a common object ID.
- a fact is associated with an object by sharing a common object ID with other facts. For example, a fact could be associated with an object of a given type by sharing a common object ID at least with a type fact indicating the given type (or as another example, with a category fact indicating a particular category of object).
- facts and objects can be stored in a variety of structures, such as fact and/or object repositories.
- structures such as fact and/or object repositories.
- repository 115 it should be understood that various embodiments may store facts and/or objects in a variety of data structures.
- FIG. 3 illustrates a system for creating and applying rules based on metadata associated with an object, according to one embodiment.
- various components of the system illustrated in FIG. 3 are implemented in a janitor 110 , such as a metadata janitor.
- a method used by the metadata janitor, according to one embodiment of the present invention, is described herein with reference to FIG. 7 .
- a rule creation engine 304 is configured to receive a plurality of objects 302 .
- the objects 302 are stored in the repository 115 .
- the rule creation engine 304 is configured to identify correlations among types of objects and attributes of facts associated with those objects.
- the rule creation engine 304 is configured to identify correlations among types of objects, the attributes of the facts associated with the objects, and the format and/or range of the values of the facts having those attributes.
- the rule creation engine 304 is configured to determine a rule 306 based on an identified correlation.
- An example of a rule 306 is described herein with reference to FIG. 5 .
- a rule application engine 308 is configured to apply the rule 306 to an object 311 .
- the object 311 is stored in the repository 115 .
- the object 311 can also be included in the set of objects 302 .
- the rule application engine 308 is configured to apply the rule 306 to the object 311 to produce a groomed object 312 .
- the groomed object 312 is based on the object 311 , and can be associated with different facts than the object 311 based on the application of the rule 306 .
- the groomed object 312 is stored in the repository 115 .
- the rule application engine 308 is configured to overwrite the object 311 with the groomed object 312 in the repository 115 .
- the groomed object 312 and the object 311 are associated with a common object ID.
- the rule creation engine 304 and the rule application engine 308 are shown as separate components.
- both the rule creation engine 304 and the rule application engine 308 are implemented in a metadata janitor.
- a metadata janitor is configured to process a set of objects 302 , identify correlations in the objects 302 , and create and apply rules based on those correlations resulting in the modification of at least some of the objects 302 .
- a metadata janitor can improve the quality of facts in the repository 115 and, through cooperation with an importer, assist with the successful importation of new facts.
- FIG. 4 illustrates various exemplary correlations between object type and attributes of facts.
- identifying a correlation comprises constructing a correlation table 402 .
- the rule creation engine 304 identifies correlations between object type and attributes of facts using the correlation table 402 .
- the correlation table 402 shown in FIG. 4 has been given for the purposes of illustration and is not limiting.
- an object type can be implemented as any metadata describing, for example, the kind, type, or category of a set of facts.
- the rule creation engine 304 can use a variety of techniques and structures to identify correlations between object type and attributes of facts.
- a first dimension is indexed by various object types.
- object types include “Country”, “Animal”, “Person”, and “City”. These examples of object types have been given for the purposes of illustration and are not limiting. Other examples of object types will be apparent to one of skill in the art.
- a second dimension is indexed by various attributes.
- attributes include “Mother”, “Habitat”, “Capital”, “Hair Color”, “Population” and “Height”. These examples of attributes have been given for the purposes of illustration and are not limiting. Other examples of attributes will be apparent to one of skill in the art.
- the correlation table 402 includes all attributes that exist as a component of a fact in the repository 115 .
- the set of attributes included in the correlation table 402 is a subset of the set of all attributes that exist as a component of a fact in the repository 115 . For example, only attributes that occur a number of times above some minimal threshold will be included in the correlation table 402 .
- Entries in the correlation table 402 indicate the number of objects associated with facts having various attributes.
- a particular entry in the correlation table 402 indicates the number of objects of a first type in the repository 115 that are associated with facts having a first attribute.
- the entry for the “Country”/“Mother” pair indicates the number of objects of the type “Country” in the repository 115 associated with one or more facts having the attribute “Mother”.
- Entries in the correlation table 402 can be given in a variety of metrics. For example, the number of objects associated with one or more facts having a particular attribute can be given as an absolute or relative count, a percentage, or as an aggregated or rounded figure. In the example illustrated, entries in the correlation table 402 are rounded to the thousands.
- the correlation table 402 is used to identify correlations between object type and fact attributes. For example, in the example illustrated there is a positive correlation between objects of the type “Country” and facts having the attribute “Capital”. Objects of a given type are said to be correlated with facts having a given attribute when objects of the given type are more likely to be associated with a fact having the given attribute than with another fact. Therefore, the rule creation engine 304 can create a rule indicating that objects of the type “Country” should have a “Capital” fact. As another example, there is a negative correlation between objects of the type “Country” and facts having the attribute “Hair Color”.
- Objects of a given type are said to be negatively correlated with facts having a given attribute when objects of the given type are less likely to be associated with a fact having the given attribute than with another fact. Therefore, the rule creation engine 304 can create a rule indicating that objects of the type “Country” should not have any “Hair Color” facts.
- Other entries in the correlation table 402 may be more ambiguous. For example, a moderate number of “Country” and “City” objects have “Height” facts. In the example illustrated, there is no positive or negative correlation between these objects and these facts.
- correlations are identified among object types and the attributes or facts because of its relative visual simplicity.
- correlations are identified among types of objects, the attributes of the facts associated with the objects, and the format and/or range of the values of the facts having those attributes.
- higher dimension correlation tables can be implemented to facilitate identification of correlation among higher numbers of variables. For example, a three-dimensional correlation table can be used to identify correlations between facts having a first attribute and facts having a second attribute for various types of objects.
- Correlation tables have been described herein as an example of one technique for identifying correlations among object types, attribute facts, and in some cases, the format and/or range of attribute values. However, in various embodiments, other techniques for identifying correlations can be implemented. Other examples of techniques for identifying correlations among variables will be apparent to one of skill in the art.
- a rule creation engine 304 can advantageously create rules based on insights from the pool of available facts.
- FIG. 5 illustrates a rule according to one embodiment.
- the rule 306 includes a type 502 .
- the type 502 describes a type of an object, such as may be contained as a value in a type fact.
- the type 502 indicates one or more types of objects to which the rule 306 is applicable. For example, the type 502 can indicate that the rule 306 is applicable to “Person” objects. As another example, the type 502 can indicate that the rule 306 is applicable to both “Country” and “City” objects. In one embodiment, the type 502 can indicate that the rule 306 is applicable to objects of all types.
- the rule 306 includes one or more attributes 504 .
- An attribute 504 describes an attribute of a fact associated with an object.
- the rule 306 is applicable to objects associated with facts containing a number of the attributes 504 .
- a rule 306 can be applicable to objects of the type 502 associated with facts containing at least two of the three attributes 504 .
- a rule 306 can be applicable to objects of the type 502 associated with facts containing any of the attributes 504 .
- a rule 306 can include any number of attributes 504 , or none at all.
- the rule 306 contains an action 506 .
- the action 506 describes restrictions and/or steps to be taken when the rule 306 is applied to an object.
- an action 506 could specify that an object satisfying the rule should not be associated with a fact having a “Mother” attribute.
- an action 506 could specify that a fact having a particular attribute should have a value of a particular range and/or format.
- an action 506 could specify behavior for importers, janitors, and so on when handling an object satisfying the rule.
- the action 506 is typically created based on an identified correlation, and can be modified by a user. Various examples of actions 506 are described herein with reference to FIGS. 6( a ) and 6 ( b ).
- FIG. 6( a ) illustrates application of a rule, according to one embodiment of the present invention.
- the object 311 contains a plurality of facts 602 .
- One such fact 602 is a type fact 604 .
- the type fact 604 indicates that the object 311 is a “Country” object.
- the other facts 602 include attribute/value pairs describing various aspects of the object 311 .
- the rule application engine 308 receives the object 311 and applies the rule 306 .
- the rule 306 indicates that objects of the type “Country” associated with facts having a “Capital” attribute should not be associated with facts having a “Hair Color” attribute.
- the rule application engine 308 applies the rule 306 to produce the groomed object 312 .
- the fact with the attribute “Hair Color” is not associated with the groomed object 312 .
- the rule 306 can indicate that objects of the type “Country” should not be associated with facts having a “Hair Color” attribute, regardless of other facts with which the objects may be associated. Restricting the attributes of facts associated with objects of a particular type is often useful for correcting frequently made errors in a data importation process.
- the fact with the attribute “Hair Color” is removed from the object 311 .
- the fact with the attribute “Hair Color” can be associated with another object, or it can be deleted from the repository 115 .
- the rule application engine 308 removes the object from the repository 115 .
- FIG. 6( b ) illustrates application of a rule, according to another embodiment of the present invention.
- the object 311 contains a plurality of facts 602 .
- One such fact 602 is a type fact 604 .
- the type fact 604 indicates that the object 311 is a “Person” object.
- Another fact has the attribute “Height” and the improperly formatted value “6 1”.
- the other facts 602 include attribute/value pairs describing various aspects of the object 311 .
- the rule application engine 308 receives the object 311 and applies the rule 306 .
- the rule 306 indicates that facts having a “Height” attribute associated with objects of the type “Person” should be of a specified format.
- the rule application engine 308 applies the rule 306 to produce the groomed object 312 .
- the value of the fact with the attribute “Height” is formatted properly in the groomed object 312 .
- the value of the fact with the attribute “Height” is formatted to reflect the expected range/format of objects of the type “Person”.
- a “Height” fact with value of “17 feet three inches” could be disassociated or deleted because the value is outside the expected range of “Height” for objects of the type “Person”.
- the rule 506 could specify that facts associated with all types of objects having a “Height” attribute should have a numeric value. Facts having the attribute “Height” with non-numeric values are deleted or reformatted when the rule is applied.
- the rule creation and rule application engines apply insights from the repository 115 to correct errors in the values of particular facts.
- FIG. 7 illustrates a method for creating and applying rules based on metadata associated with an object, according to one embodiment.
- the method is performed by a metadata janitor.
- the metadata janitor identifies 702 a correlation between at least a first type of object and attributes of facts. For example, in the example illustrated in FIG. 4 , the metadata janitor may identify 702 a negative correlation between “Person” objects and facts having the attribute “Capital”, because “Person” objects are comparatively unlikely to be associated with at least one fact having the attribute “Capital”.
- the metadata janitor can identify 702 a correlation between a first type of object, an attribute of facts, and a range and/or format of the values of facts having the attribute.
- the metadata may identify 702 a positive correlation between “Person” objects, facts having the attribute “Height”, and a range for those facts between three feet and nine feet.
- the metadata janitor determines 704 a rule based on the correlation.
- the metadata janitor determines 704 a rule that supports likely positive correlations and/or discourages likely negative correlations.
- the metadata janitor can determine 704 a rule indicating that “Person” objects associated with a fact having a “Mother” attribute should not be associated with any facts having the attribute “Capital” based on the positive correlation between “Person” objects associated with facts having a “Mother” attribute and relative unlikelihood that those objects are associated with facts having a “Capital” attribute.
- the metadata janitor displays 706 the rule to a human user for modification and/or approval. It is often advantageous to allow a user to adjust or otherwise modify rules before applying them to objects. For example, in the example illustrated in FIG. 4 , objects of the type “Country” may appear to be negatively correlated with facts having the attribute “Height”, and the metadata janitor may determine 704 a rule based on the negative correlation. In many cases, however, it is beneficial to present the determined 704 rule to a human user.
- the human user may consider that “Height” in the context of a country may refer to the average elevation above sea-level in a country, and decide that facts with the attribute “Height” should be allowed to be associated with “Country” objects (for example, when the value of the “Height” fact is within a specified range). The user can modify the rule accordingly.
- the human user may consider the determined 704 rule to be insufficiently stringent, and may broaden the effects of the rule as the user sees fit, advantageously improving the consistency of facts in the repository 115 .
- the metadata janitor applies 708 the rule to objects in the repository 115 .
- the metadata janitor can retrieve the objects in the repository 115 of the type (or types) subject to the rule and modify the objects as specified in the rule.
- the metadata janitor can collect a set of rules and apply them to objects iteratively. Applying 708 the rule to an object advantageously improves the accuracy and consistency of the objects in the repository 115 , facilitating the organization of useful information and the importation of additional information from source documents.
- Certain aspects of the present invention include process steps and instructions described herein in the form of an algorithm. It should be noted that the process steps and instructions of the present invention can be embodied in software, firmware or hardware, and when embodied in software, can be downloaded to reside on and be operated from different platforms used by a variety of operating systems.
- the present invention also relates to an apparatus for performing the operations herein.
- This apparatus may be specially constructed for the required purposes, or it may comprise a general-purpose computer selectively activated or reconfigured by a computer program stored in the computer.
- a computer program may be stored in a computer readable storage medium, such as, but is not limited to, any type of disk including floppy disks, optical disks, CD-ROMs, magnetic-optical disks, read-only memories (ROMs), random access memories (RAMs), EPROMs, EEPROMs, magnetic or optical cards, application specific integrated circuits (ASICs), or any type of media suitable for storing electronic instructions, and each coupled to a computer system bus.
- the computers referred to in the specification may include a single processor or may be architectures employing multiple processor designs for increased computing capability.
Abstract
Description
Claims (42)
Priority Applications (1)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US11/692,475 US7739212B1 (en) | 2007-03-28 | 2007-03-28 | System and method for updating facts in a fact repository |
Applications Claiming Priority (1)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US11/692,475 US7739212B1 (en) | 2007-03-28 | 2007-03-28 | System and method for updating facts in a fact repository |
Publications (1)
Publication Number | Publication Date |
---|---|
US7739212B1 true US7739212B1 (en) | 2010-06-15 |
Family
ID=42237703
Family Applications (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
US11/692,475 Active 2028-06-25 US7739212B1 (en) | 2007-03-28 | 2007-03-28 | System and method for updating facts in a fact repository |
Country Status (1)
Country | Link |
---|---|
US (1) | US7739212B1 (en) |
Citations (11)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US5475819A (en) | 1990-10-02 | 1995-12-12 | Digital Equipment Corporation | Distributed configuration profile for computing system |
US5560005A (en) | 1994-02-25 | 1996-09-24 | Actamed Corp. | Methods and systems for object-based relational distributed databases |
US5574898A (en) | 1993-01-08 | 1996-11-12 | Atria Software, Inc. | Dynamic software version auditor which monitors a process to provide a list of objects that are accessed |
US6078918A (en) * | 1998-04-02 | 2000-06-20 | Trivada Corporation | Online predictive memory |
US20050097150A1 (en) * | 2003-11-03 | 2005-05-05 | Mckeon Adrian J. | Data aggregation |
US20060053175A1 (en) * | 2004-09-03 | 2006-03-09 | Biowisdom Limited | System and method for creating, editing, and utilizing one or more rules for multi-relational ontology creation and maintenance |
US20060053171A1 (en) * | 2004-09-03 | 2006-03-09 | Biowisdom Limited | System and method for curating one or more multi-relational ontologies |
US20060238919A1 (en) * | 2005-04-20 | 2006-10-26 | The Boeing Company | Adaptive data cleaning |
US20060248045A1 (en) * | 2003-07-22 | 2006-11-02 | Kinor Technologies Inc. | Information access using ontologies |
US20060288268A1 (en) * | 2005-05-27 | 2006-12-21 | Rage Frameworks, Inc. | Method for extracting, interpreting and standardizing tabular data from unstructured documents |
US20070143317A1 (en) * | 2004-12-30 | 2007-06-21 | Andrew Hogue | Mechanism for managing facts in a fact repository |
-
2007
- 2007-03-28 US US11/692,475 patent/US7739212B1/en active Active
Patent Citations (11)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US5475819A (en) | 1990-10-02 | 1995-12-12 | Digital Equipment Corporation | Distributed configuration profile for computing system |
US5574898A (en) | 1993-01-08 | 1996-11-12 | Atria Software, Inc. | Dynamic software version auditor which monitors a process to provide a list of objects that are accessed |
US5560005A (en) | 1994-02-25 | 1996-09-24 | Actamed Corp. | Methods and systems for object-based relational distributed databases |
US6078918A (en) * | 1998-04-02 | 2000-06-20 | Trivada Corporation | Online predictive memory |
US20060248045A1 (en) * | 2003-07-22 | 2006-11-02 | Kinor Technologies Inc. | Information access using ontologies |
US20050097150A1 (en) * | 2003-11-03 | 2005-05-05 | Mckeon Adrian J. | Data aggregation |
US20060053175A1 (en) * | 2004-09-03 | 2006-03-09 | Biowisdom Limited | System and method for creating, editing, and utilizing one or more rules for multi-relational ontology creation and maintenance |
US20060053171A1 (en) * | 2004-09-03 | 2006-03-09 | Biowisdom Limited | System and method for curating one or more multi-relational ontologies |
US20070143317A1 (en) * | 2004-12-30 | 2007-06-21 | Andrew Hogue | Mechanism for managing facts in a fact repository |
US20060238919A1 (en) * | 2005-04-20 | 2006-10-26 | The Boeing Company | Adaptive data cleaning |
US20060288268A1 (en) * | 2005-05-27 | 2006-12-21 | Rage Frameworks, Inc. | Method for extracting, interpreting and standardizing tabular data from unstructured documents |
Similar Documents
Publication | Publication Date | Title |
---|---|---|
US9558186B2 (en) | Unsupervised extraction of facts | |
US7464090B2 (en) | Object categorization for information extraction | |
US8244689B2 (en) | Attribute entropy as a signal in object normalization | |
US7966291B1 (en) | Fact-based object merging | |
US9760570B2 (en) | Finding and disambiguating references to entities on web pages | |
US7792837B1 (en) | Entity name recognition | |
US7672971B2 (en) | Modular architecture for entity normalization | |
US9710549B2 (en) | Entity normalization via name normalization | |
US9208229B2 (en) | Anchor text summarization for corroboration | |
US7991797B2 (en) | ID persistence through normalization | |
US8239751B1 (en) | Data from web documents in a spreadsheet | |
US8812435B1 (en) | Learning objects and facts from documents | |
US10459955B1 (en) | Determining geographic locations for place names | |
US7774328B2 (en) | Browseable fact repository | |
US8954426B2 (en) | Query language | |
US20130060746A1 (en) | Automatic Object Reference Identification and Linking in a Browseable Fact Respository | |
US20120124053A1 (en) | Annotation Framework | |
US7590628B2 (en) | Determining document subject by using title and anchor text of related documents | |
US9785686B2 (en) | Corroborating facts in electronic documents | |
US20140359409A1 (en) | Learning Synonymous Object Names from Anchor Texts | |
US8239350B1 (en) | Date ambiguity resolution | |
US7739212B1 (en) | System and method for updating facts in a fact repository |
Legal Events
Date | Code | Title | Description |
---|---|---|---|
AS | Assignment |
Owner name: GOOGLE INC.,CALIFORNIAFree format text: ASSIGNMENT OF ASSIGNORS INTEREST;ASSIGNORS:REYNAR, JEFFREY C.;MILLER, ANDREW T.;YEHUDA, DANIEL J.;SIGNING DATES FROM 20070326 TO 20070327;REEL/FRAME:019079/0212 |
|
STCF | Information on status: patent grant |
Free format text: PATENTED CASE |
|
FPAY | Fee payment |
Year of fee payment: 4 |
|
AS | Assignment |
Owner name: GOOGLE LLC, CALIFORNIAFree format text: CHANGE OF NAME;ASSIGNOR:GOOGLE INC.;REEL/FRAME:044101/0405Effective date: 20170929 |
|
MAFP | Maintenance fee payment |
Free format text: PAYMENT OF MAINTENANCE FEE, 8TH YEAR, LARGE ENTITY (ORIGINAL EVENT CODE: M1552)Year of fee payment: 8 |
|
MAFP | Maintenance fee payment |
Free format text: PAYMENT OF MAINTENANCE FEE, 12TH YEAR, LARGE ENTITY (ORIGINAL EVENT CODE: M1553); ENTITY STATUS OF PATENT OWNER: LARGE ENTITYYear of fee payment: 12 |