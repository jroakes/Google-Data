CN117203702A - Phonemes and graphemes for neurotext-to-speech - Google Patents
Phonemes and graphemes for neurotext-to-speech Download PDFInfo
- Publication number
- CN117203702A CN117203702A CN202180096396.2A CN202180096396A CN117203702A CN 117203702 A CN117203702 A CN 117203702A CN 202180096396 A CN202180096396 A CN 202180096396A CN 117203702 A CN117203702 A CN 117203702A
- Authority
- CN
- China
- Prior art keywords
- word
- phoneme
- encoder
- lemma
- sequence
- Prior art date
- Legal status (The legal status is an assumption and is not a legal conclusion. Google has not performed a legal analysis and makes no representation as to the accuracy of the status listed.)
- Pending
Links
- 238000000034 method Methods 0.000 claims abstract description 59
- 238000012549 training Methods 0.000 claims description 91
- 230000015572 biosynthetic process Effects 0.000 claims description 56
- 238000003786 synthesis reaction Methods 0.000 claims description 56
- 230000015654 memory Effects 0.000 claims description 35
- 238000012545 processing Methods 0.000 claims description 25
- 230000000873 masking effect Effects 0.000 claims description 18
- 238000004891 communication Methods 0.000 claims description 16
- 230000007246 mechanism Effects 0.000 claims description 5
- 230000008569 process Effects 0.000 description 25
- 238000013528 artificial neural network Methods 0.000 description 16
- 238000004590 computer program Methods 0.000 description 8
- 239000012634 fragment Substances 0.000 description 8
- 238000013459 approach Methods 0.000 description 7
- 230000004044 response Effects 0.000 description 7
- 238000003780 insertion Methods 0.000 description 6
- 230000037431 insertion Effects 0.000 description 6
- 238000010586 diagram Methods 0.000 description 5
- 230000006870 function Effects 0.000 description 5
- 230000003287 optical effect Effects 0.000 description 4
- 230000005236 sound signal Effects 0.000 description 4
- 238000013518 transcription Methods 0.000 description 4
- 230000035897 transcription Effects 0.000 description 4
- 230000004048 modification Effects 0.000 description 3
- 238000012986 modification Methods 0.000 description 3
- 230000001537 neural effect Effects 0.000 description 3
- 230000008901 benefit Effects 0.000 description 2
- 230000015556 catabolic process Effects 0.000 description 2
- 238000006243 chemical reaction Methods 0.000 description 2
- 238000006731 degradation reaction Methods 0.000 description 2
- 238000011161 development Methods 0.000 description 2
- 230000003993 interaction Effects 0.000 description 2
- 229930091051 Arenine Natural products 0.000 description 1
- 230000009286 beneficial effect Effects 0.000 description 1
- 230000002457 bidirectional effect Effects 0.000 description 1
- 230000005540 biological transmission Effects 0.000 description 1
- 230000008859 change Effects 0.000 description 1
- 239000003795 chemical substances by application Substances 0.000 description 1
- 230000000295 complement effect Effects 0.000 description 1
- 239000002131 composite material Substances 0.000 description 1
- 230000000694 effects Effects 0.000 description 1
- 238000005516 engineering process Methods 0.000 description 1
- 230000014509 gene expression Effects 0.000 description 1
- 230000006872 improvement Effects 0.000 description 1
- 230000002452 interceptive effect Effects 0.000 description 1
- 239000004973 liquid crystal related substance Substances 0.000 description 1
- 238000003058 natural language processing Methods 0.000 description 1
- 230000006855 networking Effects 0.000 description 1
- 230000002093 peripheral effect Effects 0.000 description 1
- 230000000717 retained effect Effects 0.000 description 1
- 239000004065 semiconductor Substances 0.000 description 1
- 230000001953 sensory effect Effects 0.000 description 1
- 239000007787 solid Substances 0.000 description 1
- 230000003068 static effect Effects 0.000 description 1
- 238000012546 transfer Methods 0.000 description 1
- 230000000007 visual effect Effects 0.000 description 1
Classifications
-
- G—PHYSICS
- G10—MUSICAL INSTRUMENTS; ACOUSTICS
- G10L—SPEECH ANALYSIS OR SYNTHESIS; SPEECH RECOGNITION; SPEECH OR VOICE PROCESSING; SPEECH OR AUDIO CODING OR DECODING
- G10L13/00—Speech synthesis; Text to speech systems
- G10L13/08—Text analysis or generation of parameters for speech synthesis out of text, e.g. grapheme to phoneme translation, prosody generation or stress or intonation determination
- G10L13/086—Detection of language
-
- G—PHYSICS
- G10—MUSICAL INSTRUMENTS; ACOUSTICS
- G10L—SPEECH ANALYSIS OR SYNTHESIS; SPEECH RECOGNITION; SPEECH OR VOICE PROCESSING; SPEECH OR AUDIO CODING OR DECODING
- G10L13/00—Speech synthesis; Text to speech systems
- G10L13/02—Methods for producing synthetic speech; Speech synthesisers
- G10L13/04—Details of speech synthesis systems, e.g. synthesiser structure or memory management
- G10L13/047—Architecture of speech synthesisers
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F40/00—Handling natural language data
- G06F40/20—Natural language analysis
- G06F40/263—Language identification
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F40/00—Handling natural language data
- G06F40/20—Natural language analysis
- G06F40/279—Recognition of textual entities
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06N—COMPUTING ARRANGEMENTS BASED ON SPECIFIC COMPUTATIONAL MODELS
- G06N3/00—Computing arrangements based on biological models
- G06N3/02—Neural networks
- G06N3/08—Learning methods
Abstract
The method (400) includes receiving a text input (152) including a sequence of words represented as an input encoder insert (210). The input encoder embeds a plurality of lemmas (212), wherein the plurality of lemmas includes a first set of grapheme lemmas (212G) representing the text input as corresponding graphemes and a second set of phoneme lemmas (212P) representing the text input as corresponding phonemes. The method further includes, for each respective phoneme lemma in the second set of phoneme lemmas: the method includes identifying respective words in a word sequence corresponding to the respective phoneme lemma and determining respective grapheme lemmas representing the respective words in the word sequence corresponding to the respective phoneme lemma. The method further includes generating an output encoder embedding (Vc) based on a relationship between each respective phoneme lemma and a corresponding grapheme lemma determined to represent the same respective word as the respective phoneme lemma.
Description
Technical Field
The present disclosure relates to phonemes and graphemes for a neurotext-to-speech (TTS).
Background
A speech synthesis system generates speech from text input using a text-to-speech (TTS) model. The generated/synthesized speech should accurately convey the message (intelligibility) while sounding like human speech (naturalness) with the intended prosody (expressivity). Speech synthesis systems have evolved from spliced and parametric synthesis models to models with neural networks. This evolution has significantly improved the naturalness of the synthesized speech, but today TTS models still do not fully preserve the input text fed into the TTS model to generate the synthesized speech. That is, most TTS models, even neural network TTS models, convert input text into a phoneme representation without retaining the corresponding graphemes. Due to the lack of graphemes, TTS models cannot take advantage of the relationship between phonemes and graphemes to further enhance the functionality of TTS models.
Disclosure of Invention
One aspect of the present disclosure provides a computer-implemented method for implementing phonemes and grapheme tokens (token) for neural text-to-speech synthesis. The computer-implemented method, when executed on data processing hardware, causes the data processing hardware to perform operations including receiving text input at an encoder of a speech synthesis model, the text input including a sequence of words represented as embedded by an input encoder. The input encoder embeds a plurality of lemmas, wherein the plurality of lemmas includes a first set of grapheme lemmas representing the text input as corresponding graphemes and a second set of phoneme lemmas representing the text input as corresponding phonemes. The operations further include, for each respective phoneme lemma in the second set of phoneme lemmas: identifying respective words in the word sequence corresponding to the respective phoneme lemma; and determining respective grapheme lements representing respective words in the word sequence corresponding to the respective phoneme lemma. The operations further comprise: an output encoder embedment is generated by the encoder based on a relationship between each respective phoneme lemma and a corresponding grapheme lemma determined to represent the same respective word as the respective phoneme lemma.
Embodiments of the present disclosure may include one or more of the following optional features. In some embodiments, identifying, by the encoder, respective words in the word sequence corresponding to the respective phoneme lemma includes identifying locations in the respective words corresponding to the respective phoneme lemma, and determining, by the encoder, respective grapheme lemmas representing respective words in the word sequence corresponding to the respective phoneme lemma includes determining, at the locations in the respective words corresponding to the respective phoneme lemma, respective grapheme lemmas representing respective words in the word sequence corresponding to the respective phoneme lemma.
In some examples, each of the plurality of tokens embedded by the input encoder represents a combination of: one of grapheme word embedding or phoneme word embedding; embedding the segments; word position embedding; and/or location embedding. In these examples, identifying the respective word in the word sequence corresponding to the respective phoneme lemma may include: respective words in the word sequence corresponding to the respective phoneme lemma are identified based on the respective word position embedding associated with the respective phoneme lemma. Here, determining the respective grapheme lemma representing the respective word in the word sequence corresponding to the respective phoneme lemma may include: determining the respective phoneme lemma includes a corresponding word position embedding that matches the respective word position embedding of the respective phoneme lemma.
In some embodiments, the speech synthesis model includes an attention mechanism in communication with the encoder. The speech synthesis model may include a duration-based upsampler in communication with the encoder. Further, the plurality of tokens embedded by the input encoder may include special tokens that identify the language of the input text.
The operations may further include pre-training an encoder of the speech synthesis model by: feeding the encoder with a plurality of training examples, each training example represented as a training word element lemma sequence corresponding to a training sequence of words and a training phoneme lemma sequence corresponding to the same training sequence instance of words; masking training phoneme lemmas from the training phoneme lemma sequence for corresponding words from the training sequence of words; and masking the training character from the training phoneme character sequence for the corresponding word from the training sequence of words.
In some embodiments, the speech synthesis model comprises a multilingual speech synthesis model, and the operations further comprise pre-training an encoder of the speech synthesis model using a classification target to predict a classification lemma of the plurality of lemmas embedded by the input encoder, the classification lemma comprising a language identifier. In other embodiments, the speech synthesis model comprises a multilingual speech synthesis model and the output encoder embedding comprises a sequence of encoder tokens, wherein each encoder token comprises language information about the input text.
In yet other embodiments, the speech synthesis model comprises a multi-tone speech synthesis model, and the operations further comprise pre-training an encoder of the speech synthesis model using a classification target to predict a classification lemma of the plurality of lemmas embedded by the input encoder, wherein the classification lemma comprises a accent identifier.
Another aspect of the present disclosure provides a system for implementing phonemes and grapheme lemmas for neural text-to-speech synthesis. The system includes data processing hardware and memory hardware in communication with the data processing hardware. The memory hardware stores instructions that, when executed on the data processing hardware, cause the data processing hardware to perform operations including receiving text input at an encoder of a speech synthesis model, the text input including a sequence of words represented as embedded by an input encoder. The input encoder embeds a plurality of lemmas, wherein the plurality of lemmas includes a first set of grapheme lemmas representing the text input as corresponding graphemes and a second set of phoneme lemmas representing the text input as corresponding phonemes. The operations further include, for each respective phoneme lemma in the second set of phoneme lemmas: identifying respective words in the word sequence corresponding to the respective phoneme lemma; and determining respective grapheme lements representing respective words in the word sequence corresponding to the respective phoneme lemma. The operations further comprise: an output encoder embedment is generated by the encoder based on a relationship between each respective phoneme lemma and a corresponding grapheme lemma determined to represent the same respective word as the respective phoneme lemma.
This aspect may include one or more of the following optional features. In some embodiments, identifying, by the encoder, respective words in the word sequence corresponding to the respective phoneme lemma includes identifying locations in the respective words corresponding to the respective phoneme lemma, and determining, by the encoder, respective grapheme lemmas representing respective words in the word sequence corresponding to the respective phoneme lemma includes determining, at the locations in the respective words corresponding to the respective phoneme lemma, respective grapheme lemmas representing respective words in the word sequence corresponding to the respective phoneme lemma.
In some examples, each of the plurality of tokens embedded by the input encoder represents a combination of: one of grapheme word embedding or phoneme word embedding; embedding the segments; word position embedding; and/or location embedding. In these examples, identifying the respective word in the word sequence corresponding to the respective phoneme lemma may include: respective words in the word sequence corresponding to the respective phoneme lemma are identified based on the respective word position embedding associated with the respective phoneme lemma. Here, determining the respective grapheme lemma representing the respective word in the word sequence corresponding to the respective phoneme lemma may include: determining the respective phoneme lemma includes a corresponding word position embedding that matches the respective word position embedding of the respective phoneme lemma.
In some embodiments, the speech synthesis model includes an attention mechanism in communication with the encoder. The speech synthesis model may include a duration-based upsampler in communication with the encoder. Further, the plurality of tokens embedded by the input encoder may include special tokens that identify the language of the input text.
The operations may further include pre-training an encoder of the speech synthesis model by: feeding the encoder with a plurality of training examples, each training example represented as a training word element lemma sequence corresponding to a training sequence of words and a training phoneme lemma sequence corresponding to the same training sequence instance of words; masking training phoneme lemmas from the training phoneme lemma sequence for corresponding words from the training sequence of words; and masking the training character from the training phoneme character sequence for the corresponding word from the training sequence of words.
In some embodiments, the speech synthesis model comprises a multilingual speech synthesis model, and the operations further comprise pre-training an encoder of the speech synthesis model using a classification target to predict a classification lemma of the plurality of lemmas embedded by the input encoder, the classification lemma comprising a language identifier. In other embodiments, the speech synthesis model comprises a multilingual speech synthesis model and the output encoder embedding comprises a sequence of encoder tokens, wherein each encoder token comprises language information about the input text.
In yet other embodiments, the speech synthesis model comprises a multi-tone speech synthesis model, and the operations further comprise pre-training an encoder of the speech synthesis model using a classification target to predict a classification lemma of the plurality of lemmas embedded by the input encoder, wherein the classification lemma comprises a accent identifier.
The details of one or more embodiments of the disclosure are set forth in the accompanying drawings and the description below. Other aspects, features, and advantages will be apparent from the description and drawings, and from the claims.
Drawings
FIG. 1 is a schematic diagram of an example speech environment.
Fig. 2A-2C are schematic diagrams of example enhancement encoders for text-to-speech models.
FIG. 3 is a schematic diagram of an example training process for an enhancement encoder.
FIG. 4 is a flow chart of an example arrangement of operations of a method of generating output encoder embeddings using both phonemes and graphemes.
FIG. 5 is a schematic diagram of an example computing device that may be used to implement the systems and methods described herein.
Like reference symbols in the various drawings indicate like elements.
Detailed Description
The rapid development of neural end-to-end text-to-speech (TTS) synthesis has brought the generation of speech close to human naturalness levels. The neural network of these TTS systems typically includes an encoder that encodes the input text representation into hidden states and a decoder that decodes the spectrogram frames or waveform samples from the hidden states. These TTS systems may then use an attention or duration based up-sampler to connect the encoder to the decoder.
During the development of these TTS systems, the form of input of the neural network representing the text has evolved. For example, early TTS systems would receive the plain characters of the input text as input to a neural network. However, over time, it was found that if the input to the neural network is not a pure character but a phoneme (i.e., text represents how it is pronounced), the TTS system may achieve better stability. Unfortunately, phoneme-based TTS models are not without their setbacks. For example, when the pronunciation of two words is the same, but the two words actually have different meanings; i.e., homonyms, a significant problem arises with phoneme-based models. For illustration, the sentence "To cancel the payment, press one; or to continuous, two, (to cancel payment, one, or continue payment, two) "is an example of homonyms that may often be used by the dialog AI agent of the call center. In the phoneme representation of this sentence, the trailing "…, two" is easily confused with "…, to (also)" because "to" is a word that occurs more frequently in plain english. That is, the prediction system is more likely to output the word "to", even if "two" is the intent. In this example, at comma locations of the two modes, different prosody is expected in natural speech. In the case of "…, two", a moderate pause is expected at comma, while for the pattern "…, top" there is typically no pause. When the TTS model is phoneme-based, the phoneme input of the neural network for the text representation of such example sentences lacks the written context of the sentence to ensure consistent and accurate output; the synthesized speech has a pause after the comma to make the synthesized speech sound like the output of the input sentence.
To overcome this setback of the phoneme-based model, it would therefore be advantageous to have the input of the neural network of the TTS model include both phonemes and graphemes. That is, the input is a representation of the pronunciation of the text (i.e., phonemes) of the input and a representation of how the text was written (i.e., graphemes). Ideally, inclusion of graphemes will reduce or eliminate problems caused by pronunciation ambiguities (e.g., homonyms). However, generating input for a neural network that includes both phonemes and graphemes is not as simple as it might sound. One complexity is that phonemes and graphemes may represent the same content but differ in length. For example, a word in a sentence may have two subwords or graphemes, but only a single phoneme, or in the opposite example, a word in a sentence may have one subword or grapheme (e.g., the subword is identical to the word) and two phonemes. Thus, phonemes representing a first sequence of sentences will have inherent alignment problems with graphemes representing a second sequence of the same sentence.
Even if this problem exists, some approaches have attempted to combine input phonemes with grapheme representations. These approaches generally tend to avoid this problem, rather than proposing a solution to this alignment problem. For example, one approach is to combine phoneme and grapheme representations at the word level by concatenating grapheme-based embeddings with phoneme embeddings. Since these approaches do not address the alignment challenges between phonemes and grapheme-based lemmas (i.e., at the subword level), they do not fully exploit the phoneme-grapheme relationship. This means that these means limit the binding of graphemes potentially providing the potential (e.g., in terms of accuracy) of TTS models.
To address the problems of the previous approaches, the current techniques described herein consider alignment (or misalignment) between phonemes and graphemes. More particularly, the means represents the alignment (i.e., at the subword or tokenization level) between the phoneme and grapheme tokens over the entire text represented as the input to the neural network (i.e., the input to the encoder of the neural network). This approach is similar to that of the encoder representation (BERT) model of the bi-directional transducer (e.g., described in Devlin, BERT: pre-training of Deep Bidirectional Transformers for Language Understanding (Pre-training of deep bi-directional transducers for language understanding), available at https:// arxiv. Org/pdf 1810.04805v2.Pdf, and incorporated herein by reference). In the conventional BERT model, an encoder receives input corresponding to a plurality of sentences (i.e., fragments) identified by fragment Identifiers (IDs). The input of BERT represents the plurality of sentences as a sum of phoneme-based word embedding, fragment embedding, and position embedding. Although similar in some respects, current techniques may be considered enhanced BERT or PnG BERT, as this technique includes phonemes and graphemes for word embedding. To interpret graphemes at the grapheme level, the enhanced BERT includes not only the grapheme embedding, segment embedding, and position embedding of conventional BERTs, but also word position embedding that provides word level alignment between phonemes and graphemes. Thus, the input of the enhanced BERT is a representation of four types of embeddings, whereas the traditional BERT includes only three types of embeddings, without any grapheme representation.
Since the enhanced BERT approach represents the phoneme-grapheme relationship as an input to the neural network encoder, such an enhanced BERT encoder (also referred to as an enhanced encoder) may be used for different types of TTS models. That is, since neural networks are typically encoder-decoder structures with attention-or duration-based upsampling, enhancement encoders may replace encoders in other encoder-decoder structures of the TTS model. This means that the enhancement encoder is compatible with both attention-based and duration-based neural networks without any significant modification. Thus, functionally, the enhancement encoder can be used for single language TTS models, language area TTS models, multilingual TTS models, and/or multitone TTS models.
Another reason that the current technology builds on the BERT model is: BERT is a model architecture that uses pre-training to improve its natural language processing. Generally, that pre-training is a self-supervising pre-training performed on a large text corpus using a target such as a Language Model (LM) or a Masking Language Model (MLM). For traditional BERT, pre-training is performed only at the grapheme (at the subword level) or at the sentence level. The phonemes are not traditionally pre-trained. Since the enhanced BERT is able to model the relationship between the phones and graphemes, this relationship may also be converted into pre-training so that the enhanced BERT may be pre-trained on both phones and graphemes.
Referring to fig. 1, in some implementations, a speech environment 100 includes a user 10 transmitting a spoken utterance 12 to a speech-enabled device 110 (also referred to as a device 110 or user device 110). User 10 (i.e., the speaker of utterance 12) may speak utterance 12 as a query or command to request a response from device 110 or to cause device 110 to perform a task specified by the query. The device 110 is configured to capture sound from one or more users 10 within the speech environment 100. Here, the audio sounds may refer to spoken utterances 12 of the user 10 that are used as audible queries, commands for the device 110, or audible communications captured by the device 110. A voice-enabled system (e.g., a digital assistant interface) of the device 110 or associated with the device 110 may respond to a command query by answering the query and/or causing execution of the command.
Here, device 110 captures audio data 14 corresponding to utterance 12 spoken by user 10. The device 110 may correspond to any computing device associated with the user 10 and capable of receiving the audio data 14. Some examples of user devices 110 include, but are not limited to, mobile devices (e.g., mobile phones, platform computers, laptop computers, electronic book readers, etc.), computers, wearable devices (e.g., smartwatches), music players, playback devices, smart appliances (e.g., smarttelevisions) and internet of things (IoT) devices, remote controls, smart speakers, etc. The apparatus 110 includes data processing hardware 112 and memory hardware 114, the memory hardware 114 being in communication with the data processing hardware 112 and storing instructions that, when executed by the data processing hardware 112, cause the data processing hardware 112 to perform one or more operations related to speech and/or text processing. In some examples, the apparatus 110 includes one or more applications (i.e., software applications), each of which may utilize one or more voice processing systems 140, 150, 200 associated with the apparatus 110 to perform various functions within the application. For example, the device 110 includes an auxiliary application configured to communicate synthesized playback audio 154 (also referred to as synthesized speech 154) to the user 10 to assist the user 10 in accomplishing various tasks.
The device 110 further includes an audio subsystem having: an audio capturing device (e.g., a microphone) 116 for capturing audio data 14 within the speech environment 100 and converting the audio data 14 into an electrical signal; and a speech output device (e.g., a speaker) 118 for delivering audible audio signals (e.g., a composite playback signal 154 from the device 110). Although the device 110 implements a single audio capture device 116 in the illustrated example, the device 110 may implement an array of audio capture devices 116 without departing from the scope of the disclosure, whereby one or more audio capture devices 116 in the array may not physically reside on the device 110, but instead communicate with an audio subsystem (e.g., peripheral to the device 110). For example, the device 110 may correspond to a vehicle infotainment system that utilizes an array of microphones located throughout a vehicle.
Further, the apparatus 110 is configured to communicate with a remote system 130 via a network 120. The remote system 130 may include remote resources 132, such as remote data processing hardware 134 (e.g., a remote server or CPU) and/or remote memory hardware 136 (e.g., a remote database or other storage hardware). The device 110 may utilize the remote resource 132 to perform various functions related to speech processing and/or synthetically played communications. For example, the apparatus 110 is configured to perform speech recognition using the speech recognition system 140 and/or text-to-speech conversion using the TTS system 150 (e.g., using the TTS model 200). These systems 140, 150, 200 may reside on the device 110 (referred to as a system-on-device) or remotely (e.g., on the remote system 130), but are in communication with the device 110. In some examples, some of these systems 140, 150, 200 reside locally or on the device, while others reside remotely. In other words, any of these systems 140, 150, 200 may be local or remote in any combination. For example, when the size or processing requirements of the system 140, 150, 200 are substantial, the system 140, 150, 200 may reside in the remote system 130. However, when the device 110 may support the size or processing requirements of one or more systems 140, 150, 200, the one or more systems 140, 150, 200 may reside on the device 110 using the data processing hardware 112 and/or the memory hardware 114. Alternatively, the one or more of the systems 140, 150, 200 may reside locally/on the device and remotely. For example, when a connection between the device 110 and the remote system 130 with the network 120 is available, one or more of the systems 140, 150, 200 may execute on the remote system 130 by default, but when the connection is lost or the network 120 is not available, then the systems 140, 150, 200 execute locally on the device 110 instead.
The speech recognition system 140 receives the audio data 14 as input and transcribes the audio signal into a transcription 142 as output. In general, by converting the audio data 14 into the transcription 142, the speech recognition system 140 allows the device 110 to recognize when the spoken utterance 12 from the user 10 corresponds to a query, a command, or some other form of audio communication. Transcription 142 refers to a sequence of text that device 110 may then use to generate a response to a query or command. For example, if the user 10 asks the device 110 for the question "how weather today," the device 110 communicates the audio data 14 corresponding to the question "how weather today (what will the weather be like today)" to the speech recognition system 140. The speech recognition system 140 converts the audio data 14 to include the text "how does today weather? "transcription. The device 110 may then determine a response to the query using the text or portions of the text. For example, to determine the weather for the day (i.e., today), the device 110 communicates text (e.g., "how does today weather. The search engine may then return one or more search results that are interpreted by the device 110 to generate a response to the user 10.
In some implementations, the device 110 or a system associated with the device 110 identifies the device 110 to transmit text 152 (also referred to as a sequence of text 152 or input text 152) to the user 10 as a response to the query of the spoken utterance 12. The device 110 may then use the TTS system 150 to convert the text 152 into corresponding synthesized playback audio 154 for transmission by the device 110 to the user 10 (e.g., audibly to the user 10) as a response to the query for the spoken utterance 12. In other words, TTS system 150 receives text 152 as input and converts text 152 into an output of synthesized playback audio 154 (e.g., through a series of neural networks), where synthesized playback audio 154 is an audio signal that defines an audible reproduction of text 152. For example, the playback audio 154 is a verbalization or narration of the input text 152. In some examples, the input text 152 refers to text or a sequence of characters in a particular natural language (e.g., english, spanish, or french). The character sequence may include letters, numbers, punctuation marks, and/or other special characters. When the TTS system 150 generates the playback audio 154, the playback audio 154 is synthesized speech because it approximates how a human would define the character sequence of the input text 152 with speech expressions.
The TTS system 150 (or other speech synthesis system) includes a TTS model 200 (e.g., the TTS model 200 of fig. 2), the TTS model 200 utilizing a deep neural network to generate the synthesized playback audio 154.TTS model 200 processes the embedding of the encoded representation as speech features (e.g., features of input text 152) to generate an audio waveform (e.g., a time-domain audio waveform defining the amplitude of the audio signal over time). Once generated, TTS system 150 transmits synthesized playback audio 154 to device 110 to allow device 110 to output synthesized playback audio 154. For example, the device 110 outputs synthesized playback audio 154 "sunny today" at the speaker 118 of the device 110. Here, TTS model 200 of TTS system 150 is configured to control speech-related properties of synthesized speech 154. In other words, TTS model 200 is configured to simulate the speech of a human speaker in terms of naturalness while also being able to generate different synthesized speech by modeling fine-grained latent features. Although FIG. 1 depicts an example of TTS system 150 in the context of an auxiliary application, TTS system 150 (e.g., using TTS model 200) may be applied to other text-to-speech scenarios, such as navigating or reading documents.
Referring to fig. 2A through 2c, tts model 200 includes enhancement encoder 202, adapter 204, and decoder 206. The enhancement encoder 202 receives text 152 as input, converts the text 152 into an input embedment 210 for encoding by a transformer (transformer) 220 into a context vector Vc. In general, the encoder-decoder architecture uses the adapter 204 because the input sequence and the output sequence of the decoder 206 are different in length. Thus, the adapter 204 serves as a mechanism to handle how the input sequence corresponds to the output sequence. For example, how many audio frames correspond to the lemma of the context vector Vc. As shown in fig. 2A, there are two options for the adapters 204, 204 a-b. For the first option, the first adapter 204a uses attention (commonly referred to as an attention-based TTS model) to provide the context vector Vc in a compatible form for decoding by the decoder 206 into the synthesized speech 154 (e.g., a spectrogram or waveform). For the second option, the second adapter 204b performs duration-based upsampling (referred to as a duration-based TTS model) instead of focusing on the context vector Vc, thereby providing the context vector Vc in a compatible form for decoding by the decoder 206 into the synthesized speech 154.
To form the input embedding 210, the tts model 200 functions similarly to the BERT model described above in that: input embeddings 210 are combinations of embeddings E representing input text 152. In some embodiments, the input embeddings 210 correspond to word sequences (e.g., a sentence or sentences) represented as a plurality of lemmas 212, 212a-n, or sequences of lemmas 212. The plurality of lemmas 212 includes a first set of phoneme lemmas 212, 212P representing the text input 152 1–n Second set of grapheme lements 212G, 212G that also represent text input 152 1–n . That is to say that the first and second,both the first set and the second set of tokens 212 represent the same text input 152. Thus, if the input text 152 is the sentence "my dog lovely," the first set of phoneme lemmas 212P represent the sentence "my dog lovely" as phoneme lemmas 212P, and the second set of grapheme lemmas 212G represent the same sentence "my dog lovely" as grapheme lemmas 212G. Here, the phoneme lemma 212P may refer to an international phonetic symbol (IPA) phoneme, and the grapheme lemma 212G may correspond to a subword unit. Similar to the original BERT model, the plurality of lemmas 212 may also include special lemmas shown as CLS lemmas 212, 212CLS and SEP lemmas 212, 212SEP. CLS lemma 212CLS is a special lemma that can be preset to the first segment (i.e., sentence) or pre-segment of lemma 212, while SEP lemma 212SEP acts as a separator appended to each segment to indicate where one segment ends and another segment begins. For example, when the input text 152 includes two sentences represented as two segments, the sequence of lemmas 212 will include SEP lemmas 212SEP separating the two segments (e.g., as shown in fig. 2A-2C). In some configurations, all of the tokens representing the input text 152 share the same Identifier (ID) space for purposes of embedded lookup and Masking Language Modeling (MLM) classification.
In some examples, the enhancement encoder 202 forms the input embeddings 210 from four types of embeddings E, unlike the original BERT that formed the input embeddings using a combination of three types of embeddings (e.g., word-element embeddings, segment embeddings, and position embeddings). For example, instead of three types of embedded E, the enhancement encoder 202 uses four types of embedded E to provide an alignment context for the enhancement encoder 202 to include graphemes in addition to phonemes. Referring to fig. 2B, the input insert 210 represents the sum of the position insert E, ep, the word position insert E, ewp, the segment insert E, es, and the word element insert E, et. Here, word location embedding Ewp differs from location embedding Ep in that: location embedding is an overall index of the locations of the plurality of tokens 212. However, word location embedment Ewp represents locations at the subword level (i.e., where the tokens occur in the words of the segment). By including the word position embedment Ewp, the input embedment 210 can represent, for example, a first word in a second word block (i.e., word position) of a sentence in which a second phoneme corresponds to the first word, while also representing that a second grapheme of the same sentence corresponds to a second word in the sentence. This means that the alignment between phonemes and graphemes is represented in the input embedding 210.
Fig. 2B illustrates a vertical dashed box surrounding each individual word element 212 of the input insert 210 (i.e., the tokenization step of the input insert 210) to depict that each word element 212 of the input insert 210 is a combination of a position insert E, ep, a word position insert E, ewp, a segment insert E, es, and a word element insert E, et. Here, location embedding Ep refers to the global or global location of the lemma step relative to the input embeddings 210 (e.g., the entire current input embeddings 210). In fig. 2B, there are nine positions or tokenization steps starting from the index of zero. Word location embedment Ewp refers to which word in the word sequence from the input text 152 the lemma 212 corresponds to. Fig. 2B has three words of input text 152. The fragment embedment Es identifies which phrase or sentence corresponds to the lemma 212. Where the enhancement encoder 202 has inputs corresponding to graphemes and phonemes, the input text 152 includes at least two segments for each individual segment of the input text 152. In other words, each segment of the input text 152 is repeated twice, once as a phoneme segment (shown as segment a in fig. 2B) and once as a grapheme segment (shown as segment B in fig. 2B). Thus, if the input text 152 is two or four sentences (meaning two or four fragments of a traditional BERT), the input embeddings 210 for the enhancement encoder 202 will be four fragments or eight fragments, respectively (i.e., each sentence is represented once as a grapheme and once as a phoneme). In addition, the lemma insert Et forming the input insert 210 corresponds to a subunit representation of a word of a segment (or sentence). As previously described, the phoneme lemma may be a separate IPA phoneme, while the grapheme lemma is a word block subword.
With continued reference to FIG. 2B, each of the tokens 212 of the input embeddings 210 is shown in a vertical dashed box to illustrate that the respective token 212 is a combination of multiple embeddings E. The first lemma 212a of the input insert 210 is a combination of the first lemma inserts Et, et1, the first segment inserts Es, esA, the first word position inserts Ewp, ewp0, and the first position inserts Ep, ep0 of CLS lemmas. The second lemma 212b corresponding to the first phone lemma 212P1 in the set of phone lemmas 212P of the input insert 210 is a combination of the second lemma inserts Et, et2, the first segment inserts Es, esA, the second word position inserts Ewp, ewp1, and the second position inserts Ep, ep1 of the phone lemmas P1. The third lemma 212c corresponding to the second phone lemma 212P2 in the set of phone lemmas 212P of the input insert 210 is a combination of the third lemma inserts Et, et3, the first segment inserts Es, esA, the second word position inserts Ewp, ewp1, and the third position inserts Ep, ep2 of the phone lemmas P2. The fourth lemma 212d corresponding to the nth phoneme lemma 212Pn in the set of phoneme lemmas 212P of the input insert 210 is a combination of the nth lemma inserts Et, et4, the first segment inserts Es, esA, the third word position inserts Ewp, ewp2, and the fourth position inserts Ep, ep3 of the phoneme lemmas Pn. The fifth lemma 212e corresponding to the SEP lemma 212SEP of the input insert 210 is a combination of the fifth lemma inserts Et, et5, the first segment inserts Es, esA, the third word position inserts Ewp, ewp3, and the fifth position inserts Ep, ep4 of the SEP lemma SEP. The sixth lemma 212f corresponding to the first lemma 212G1 of the second set of lemma 212G of the input insert 210 is a combination of the sixth lemma inserts Et, et6, the second segment inserts Es, esB, the first word position inserts Ewp, ewp1, and the sixth position inserts Ep, ep4 of the lemma G1. The seventh lemma 212G corresponding to the second voxel 212G2 of the second set of lemma 212G of the input insert 210 is a combination of the seventh lemma inserts Et, et7, the second segment inserts Es, esB, the second word position inserts Ewp, ewp2, and the seventh position inserts Ep, ep7 of the lemma G2. The eighth lemma 212h corresponding to the nth lemma 212Gn in the second set of lemma 212G of the input insert 210 is a combination of the eighth lemma inserts Et, et7, the second segment inserts Es, esB, the second word position inserts Ewp, ewp2, and the eighth position inserts Ep, ep8 of the lemma Gn. The ninth lemma 212i corresponding to the second SEP lemma 212SEP of the input insert 210 (e.g., indicating the end of the second segment) is a combination of the ninth lemma inserts Et, et9, the second segment inserts Es, esB, the third word position inserts Ewp, ewp3, and the ninth position inserts Ep, ep9 of CEP lemmas. Here, since the segment a and the segment B are for the same sentence, the insert E representing the first word position (e.g., the first word position insert Ewp 1) of the phoneme lemma 212P of the input insert 210 is the same as the insert E representing the first word position (e.g., the first word position insert Ewp 1) of the grapheme lemma 212G; the indicator grapheme and phoneme graphemes 212 appear at the same word block level.
In some examples, transformer 220 of enhancement encoder 202 receives input encoder embedding 210 and generates context vector Vc as an output of enhancement encoder 202 (also referred to as output encoder embedding (Vc)). Much like the input encoder embedding 210, the output encoder embedding or context vector Vc may also be based on an output sequence of tokens (e.g., shown as V1-V9) of the input tokens 212. Referring to fig. 2C, in some embodiments, the converter 220 is configured to: receiving the input encoder insertion 210 and generating an output encoder insertion V based on a relationship between a phoneme lemma 212P and a grapheme lemma 212G of the input encoder insertion 210 c . For example, for each phoneme lemma 212P in the set of phoneme lemmas 212P from the input encoder embedment 210, the transformer 220 identifies the respective word of the text input 152 corresponding to the respective phoneme lemma 212P. The transformer 220 may identify respective words corresponding to the respective phoneme lemma 212P based on the word position embedding Ewp of the respective phonemes. For example, for the first phoneme 212p of the input encoder insertion 210, the word position insertion Ewp is to identify the insertion of the first phoneme lemma 212p in the first word of segment a (i.e., the phoneme segment). Once the transformer 220 identifies the respective word corresponding to the respective phoneme lemma 212p, the transformer 220 determines which grapheme lemma 212G also belongs to that respective word. In this example, the first phoneme lemma 212P corresponds to a first word of the input text 152, and the first grapheme lemma 212G also corresponds to a first word of the input text 151 (e.g., depicted as a first word (wp=1) in segment B (s=b)). Similar to the phoneme lemma 212P, the transformer 220 may use word position embedding E, ewp of the set of grapheme lemmas 212G to determine the word position of the grapheme lemmas 212G corresponding to the first phoneme lemma 212. For example, word position embedding E, ewp corresponding to first phoneme lemma 212P1 and word position embedding corresponding to first phoneme lemma 212G1 E. Ewp1 are matched or identical. By identifying such a relationship between the phoneme lemma 212P and the grapheme lemma 212P, the transformer 220 represents the relationship as part of the context vector Vc. The transformer 220 may then repeat this process for each input word element 212.
In some configurations, transformer 220 generates each of the tokens V of context vector Vc by representing a particular input token 212 as its relationship to all other input tokens 212. For example, FIG. 2C shows that for the current lemma step of input lemma 212P1, the output lemma V2 of transformer 220 interprets the relationship of the first phoneme lemma with all other input lemmas 212. In some embodiments, the transformer 220 may be configured to weight or qualitatively represent the strength of the current lemma step (e.g., the first phoneme lemma 212P) for each of the other input lemmas 212 such that each of the other input lemmas 212 has some effect on the output lemma V2. Here, since the first phoneme lemma 212P1 has a strong relationship (e.g., shared insert E at the word position level) with the first grapheme lemma 212G1, the transformer 220 may generate an output lemma V2 having some representation of this relationship.
Generating each of the tokens V of the context vector Vc as a representation of the relationship of a particular input token to all other input tokens 212 may be beneficial for different types of TTS models. That is, there are often some TTS cases that have historically required special TTS models or TTS models with specific architecture to accommodate their specific TTS tasks. This has been generally the case for multilingual TTS models or multitone TTS models. The multilingual TTS model refers to a TTS model that can accommodate input text 152 from various languages and accordingly generate synthesized speech 154 in these various languages. This is in contrast to single language (or single language) TTS models. Multilingual TTS models tend to be problematic because these TTS models traditionally employ phoneme-based TTS models. Phonemes present challenges for multi-language models because phonemes can have significant overlap between different languages. Thus, due to this overlap, which results in language ambiguity, conventional multi-language models must contain additional language input of the model to be effective. However, when a code switch occurs, there may be some difficulty in using additional language input. Code switching refers to when a single sentence includes multiple languages. In the case of transcoding, language input combined with text input may not recognize multiple languages or which specific tokens correspond to which languages. In other words, it is difficult to obtain an accurate language identifier for each of the tokens in the sentence. However, the enhancement encoder 202 may solve these problems because each of the tokens V of the context vector Vc is a representation of the relationship of a particular input token to all other input tokens 212. Thus, if one input token 212 for the input encoder embedding 210 includes a language identifier, that language information is carried to the corresponding token V of the output encoder embedding Vc. For example, fig. 2C illustrates that one professional token 212CLS includes a language identifier 214, and then converts the language identifier 214 into a second token V2 of the context vector Vc. Although fig. 2C depicts a language identifier 214 associated with the professional lexeme 212CLS, the input encoder embedding 210 may be configured such that other input lexemes 212 include the language identifier 214. Additionally or alternatively, for a multi-accent TTS model, the identifier 214 may alternatively be a language region or accent identifier 214.
In addition to the multi-language TTS model, the enhancement encoder 202 may also be incorporated into a multi-tone TTS model. The multi-tone TTS model has also historically presented some challenges. For example, a multi-tone TTS model similar to a multi-language TTS model tends to use a phoneme-based TTS model. This may be due to the fact that the alignment problem between phonemes and graphemes of the encoder input has not been solved. However, using current techniques of enhancement encoder 202, the polyphonic TTS model is now able to identify language regions or accents of the input text 152 using graphemes. By representing the relationship between phonemes and graphemes through these alignment improvements, the enhancement encoder 202 may be used in a variety of TTS models, such as a single language TTS model, a single language region TTS model, a multi-language TTS model, a multi-tone TTS model, an attention-based TTS, and a duration-based TTS model, without requiring significant modification, if any. Thus, enhancement encoder 202 may replace encoders used in TTS systems without interfering with other architectures of these TTS systems.
Referring to fig. 3, much like a conventional BERT, the enhancement encoder 202 undergoes a pre-training process 300. Only here, unlike a conventional BERT, where the pre-training process uses only graphemes, the pre-training process 300 of the enhancement encoder 202 uses both phonemes and graphemes. During the pre-training process, enhancement encoder 202 pre-trains on plain text corpus 302. In some embodiments, when training on the plain text corpus 302, the pre-training process 300 obtains phonemes using a grapheme-to-phoneme (G2P) conversion system and graphemes using a subword text grapher. In some examples, the pre-training process 300 may vary depending on the type of TTS model 200 that is to be incorporated into the enhancement encoder 202. For example, when the enhancement encoder 202 is pre-trained for a single language or single language region TTS model, the pre-training process 200 uses only a single target 320 or Masking Language Modeling (MLM) targets 320, 320a. In general, some percentage of the input lemmas 312, 312a-n are randomly masked in order to predict the masked input lemmas 312M when trained with the MLM targets 320, 320a. Such masking predictions allow both right and left contexts (i.e., bi-directional contexts). However, for the enhancement encoder 202, the input content 304 of each training example 310 corresponding to a word sequence (i.e., one or several sentences) is represented twice-once as a sequence of training phoneme lemmas 312, 312b-d and once as a sequence of training word lemmas 312, 312 f-h. Here, if the MLM target 320a applies masking randomly to these training lemmas 312, the training lemmas 312 masked in the training phoneme lemmas 312b-d may have their counterparts present (i.e., unmasked) in the training grapheme lemmas 312 f-h; biasing the pre-trained word prediction process. For this reason, the pre-training process 300 with the MLM target 320a instead applies random masking at the word level, but ensures that it is consistent between phonemes and grapheme fragments. That is, if the phonemes of the word are masked, the corresponding grapheme is also masked. For example, FIG. 3 depicts two masked phonemes 312, 312M of the first word of segment A p1,2 And one mask grapheme 312, 312M of segment B corresponding to the first word G (i.e., complementary grapheme). Alternatively, the MLM target 320a may be implemented during the pre-training process 300 using other masking strategies. For example, the original BERT masking may be applied, but with an increased masking ratio, or the pre-training process 300 applies masking in a manner similar to P2G and G2P, where all tokens in one segment (e.g., grapheme segment-segment B) are masked out, while all tokens in another segment (e.g., phoneme segment-segment a) are retained.
For other TTS models 200, such as multilingual TTS models and polyphonic TTS models, the pre-training process 300 additionally uses classification targets 320, 320b. Here, the output of the enhancement encoder 202 is trained to predict a language region or language using the pre-training process 300 of the classification target 320b. For example, as previously described, special tokens, such as CLS tokens, may carry a language or language region identifier 214. Here, when pre-trained, enhancement encoder 202 learns the predicted language or language region and indicates the language or language region as an identifier associated with a lemma (e.g., CLS lemma). In some instances, language classification may be easier relative to accent classification. In these examples, the classification loss of classification target 320b may use a lower weight (e.g., 0.1).
Since the pre-training process 300 pre-trains the enhancement encoder 202 of the TTS model 200 to learn how to predict the input encoder embedment 210, the fine tuning process then trains the enhancement encoder 202 incorporated into the complete TTS model 200 for the particular task. The fine tuning process initializes weights from the pre-trained model and then continues to make further adjustments to these weights during TTS model training. In some examples, fine tuning freezes the embedded and lower layers of the transducer 220 while fine tuning the higher layers of the transducer 220 in order to prevent degradation and facilitate generalization of the trained TTS model 200. Degradation may occur because the fine tuning process uses a smaller training data set. The fine tuning process may pass only hidden states downstream from the final transformer layer on the phoneme lemma 212P to TTS components (e.g., the adapter 204 and decoder 206). Even though these hidden states refer only to phoneme locations, these hidden states still carry information from graphemes and the language (or language region) based on the manner in which the enhancement encoder 202 is trained. In some configurations, the fine tuning process turns off the MLM target 320a, but keeps the classification target 320b active for multi-language or multi-tone TTS models. For example, by keeping the classification target 320b active during the fine-tuning process, linguistic information may be maintained in the encoded representation.
Fig. 4 is a flow chart of an example arrangement of operations of a method 400 of generating an output encoder embedded Vc using both phonemes and graphemes. At operation 402, the method 400 receives a text input 152 at the encoder 202 of the speech synthesis model 200, the text input 152 comprising a sequence of words represented as an input encoder insert 210. The input encoder embedment 210 includes a plurality of lemmas 212, wherein the plurality of lemmas 212 includes a first set of grapheme lemmas 212, 212G representing the text input 152 as corresponding graphemes and a second set of phoneme lemmas 212, 212P representing the text input 152 as corresponding phonemes. The method 400 performs operations 404 and 406 on each respective phoneme lemma 212P in the second set of phoneme lemmas 212P. At operation 404, the method 400 identifies respective words in the word sequence corresponding to the respective phoneme lemma 212P. At operation 406, the method 400 determines a respective grapheme voxel 212G, the respective grapheme voxel 212G representing a respective word in a word sequence corresponding to the respective phoneme voxel 212P. At operation 408, the method 400 generates an output encoder embedded Vc based on the relationship between each respective phoneme lemma 212P and the corresponding grapheme lemma 212G that is determined to represent the same respective word as the respective phoneme lemma 212P.
FIG. 5 is a schematic diagram of an example computing device 500 that may be used to implement the systems (e.g., TTS system 150, TTS model 200, and/or enhancement encoder 202) and methods (e.g., method 400) described in this document. Computing device 500 is intended to represent various forms of digital computers, such as laptops, desktops, workstations, personal digital assistants, servers, blade servers, mainframes, and other appropriate computers. The components, connections and relationships of components, and functions of components, shown herein are meant to be exemplary only, and are not meant to limit implementations of the inventions described and/or claimed in this document.
Computing device 500 includes a processor 510 (e.g., data processing hardware), a memory 520 (e.g., memory hardware), a storage device 530, a high-speed interface/controller 540 connected to memory 520 and high-speed expansion ports 550, and a low-speed interface/controller 560 connected to low-speed bus 570 and storage device 530. Each of the components 510, 520, 530, 540, 550, and 560 are interconnected using various buses, and may be mounted on a common motherboard or in other manners as appropriate. The processor 510 is capable of processing instructions for execution within the computing device 500, including instructions stored in the memory 520 or on the storage device 530 to display graphical information of a Graphical User Interface (GUI) on an external input/output device, such as a display 580 coupled to the high speed interface 540. In other embodiments, multiple processors and/or multiple buses may be used, as appropriate, along with multiple memories and types of memory. Moreover, multiple computing devices 500 may be connected, with each device providing portions of the necessary operations (e.g., as a server bank, a group of blade servers, or a multiprocessor system).
Memory 520 non-transitory stores information within computing device 500. Memory 520 may be a computer-readable medium, a volatile memory unit, or a non-volatile memory unit. Non-transitory memory 520 may be a physical device for temporarily or permanently storing programs (e.g., sequences of instructions) or data (e.g., program state information) for use by computing device 500. Examples of non-volatile memory include, but are not limited to, flash memory and read-only memory (ROM)/programmable read-only memory (PROM)/erasable programmable read-only memory (EPROM)/electrically erasable programmable read-only memory (EEPROM) (e.g., commonly used in firmware such as a boot program). Examples of volatile memory include, but are not limited to, random Access Memory (RAM), dynamic Random Access Memory (DRAM), static Random Access Memory (SRAM), phase Change Memory (PCM), and magnetic disk or tape.
The storage device 530 is capable of providing mass storage for the computing device 500. In some implementations, the storage 530 is a computer-readable medium. In various different embodiments, storage device 530 may be a floppy disk device, a hard disk device, an optical disk device, or a tape device, a flash memory, or other similar solid state memory device or array of devices, including devices in a storage area network or other configuration. In additional embodiments, the computer program product is tangibly embodied in an information carrier. The computer program product contains instructions that, when executed, perform one or more methods, such as those described above. The information carrier is a computer-or machine-readable medium, such as the memory 520, the storage 530, or memory on processor 510.
The high speed controller 540 manages bandwidth-intensive operations of the computing device 500, while the low speed controller 560 manages lower bandwidth-intensive operations. This allocation of responsibilities is merely exemplary. In some embodiments, the high speed controller 540 is coupled to the memory 520, the display 580 (e.g., via a graphics processor or accelerometer), and to a high speed expansion port 550 that can accept various expansion cards (not shown). In some implementations, a low speed controller 560 is coupled to the storage device 530 and the low speed expansion port 590. The low-speed expansion port 590, which may include various communication ports (e.g., USB, bluetooth, ethernet, wireless ethernet), may be coupled to one or more input/output devices, such as a keyboard, pointing device, scanner, or networking device, such as a switch or router, for example, through a network adapter.
As shown in the figures, computing device 500 may be implemented in a number of different forms. For example, it may be implemented as a standard server 500a, or multiple times in a group of such servers 500a, as a laptop computer 500b, or as part of a rack server system 500 c.
Various implementations of the systems and techniques described here can be implemented in digital electronic and/or optical circuitry, integrated circuitry, specially designed ASICs (application specific integrated circuits), computer hardware, firmware, software, and/or combinations thereof. These various embodiments may include embodiments in one or more computer programs capable of execution and/or explanation on a programmable system including at least one programmable processor, which may be used for special or general purpose, and coupled to receive data and instructions from, and to transmit data and instructions to, a storage system, at least one input device, and at least one output device.
These computer programs (also referred to as programs, software applications or code) include machine instructions for a programmable processor, and may be implemented in a high-level procedural and/or object-oriented programming language, and/or in assembly/machine language. As used herein, the terms "machine-readable medium" and "computer-readable medium" refer to any computer program product, non-transitory computer-readable medium, apparatus and/or device (e.g., magnetic discs, optical disks, memory, programmable Logic Devices (PLDs)) used to provide machine instructions and/or data to a programmable processor, including a machine-readable medium that receives machine instructions as a machine-readable signal. The term "machine-readable signal" refers to any signal used to provide machine instructions and/or data to a programmable processor.
The processes and logic flows described in this specification can be performed by one or more programmable processors executing one or more computer programs to perform functions by operating on input data and generating output. The processes and logic flows can also be performed by, and special purpose logic circuitry, e.g., an FPGA (field programmable gate array) or an ASIC (application-specific integrated circuit). Processors suitable for the execution of a computer program include, by way of example, both general and special purpose microprocessors, and any one or more processors of any kind of digital computer. Generally, a processor will receive instructions and data from a read-only memory or a random access memory or both. The essential elements of a computer are a processor for executing instructions and one or more memory devices for storing instructions and data. Typically, a computer will also include, or be operatively coupled to receive data from or transfer data to, or both, one or more mass storage devices for storing data, e.g., magnetic, magneto-optical disks, or optical disks. However, a computer need not have such devices. Computer readable media suitable for storing computer program instructions and data include all forms of non-volatile memory, media and memory devices, including by way of example semiconductor memory devices, e.g., EPROM, EEPROM, and flash memory devices; magnetic disks, such as internal hard disks or removable disks; magneto-optical disk; CD ROM and DVD-ROM discs. The processor and the memory can be supplemented by, or incorporated in, special purpose logic circuitry.
To provide for interaction with a user, one or more aspects of the present disclosure may be implemented on a computer having a display device (e.g., a CRT (cathode ray tube), LCD (liquid crystal display) monitor, or touch screen) for displaying information to the user and optionally a keyboard and a pointing device (e.g., a mouse or a trackball) by which the user can provide input to the computer. Other kinds of devices may also be used to provide for interaction with a user; for example, feedback provided to the user may be any form of sensory feedback, e.g., visual feedback, auditory feedback, or tactile feedback; and input from the user may be received in any form, including acoustic, speech, or tactile input. In addition, by sending the document to and receiving the document from the device used by the user; for example, a computer can interact with a user by sending web pages to a web browser on the user's client device in response to requests received from the web browser.
Various embodiments have been described. Nevertheless, it will be understood that various modifications may be made without departing from the spirit and scope of the disclosure. Accordingly, other implementations are within the scope of the following claims.
Claims (24)
1. A computer-implemented method (400), which when executed by data processing hardware (112), causes the data processing hardware (112) to perform operations comprising:
receiving a text input (152) at an encoder (202) of a speech synthesis model (150), the text input comprising a sequence of words represented as an input encoder insert (210), the input encoder insert (210) comprising a plurality of tokens (212), the plurality of tokens (212) comprising a first set of grapheme tokens (212G) representing the text input (152) as corresponding graphemes and a second set of phoneme tokens (212P) representing the text input (152) as corresponding phonemes;
for each respective phoneme lemma (212P) in the second set of phoneme lemmas (212P):
identifying, by the encoder (202), a respective word in the sequence of words corresponding to the respective phoneme lemma (212P); and
determining, by the encoder (202), a respective grapheme-word (212G) embedding representing the respective word in the word sequence corresponding to the respective phoneme-word (212P); and
an output encoder embedding (Vc) is generated by the encoder (202) based on a relationship between each respective phoneme lemma (212P) and a corresponding grapheme lemma (212G) embedding determined to represent the same respective word as the respective phoneme lemma (212P).
2. The method (400) of claim 1, wherein:
identifying, by the encoder (202), the respective word in the sequence of words corresponding to the respective phoneme lemma (212P) includes identifying a location in the respective word corresponding to the respective phoneme lemma (212P); and is also provided with
Determining, by the encoder (202), that the respective grapheme (212G) embedment represents the respective word in the sequence of words corresponding to the respective phoneme lemma (212P) includes determining, at the location in the respective word corresponding to the respective phoneme lemma (212P), that the respective grapheme (212G) embedment represents the respective word in the sequence of words corresponding to the respective phoneme lemma (212P).
3. The method (400) of claim 1 or 2, wherein each of the plurality of tokens (212) of the input encoder insert (210) represents a combination of:
one of a grapheme lemma (212G) insert or a phoneme lemma (212P) insert;
embedding the segments;
word position embedding; and
and (5) embedding the position.
4. The method (400) of claim 3, wherein identifying the respective word in the word sequence corresponding to the respective phoneme lemma (212P) comprises: the respective word in the word sequence corresponding to the respective phoneme lemma (212P) is identified based on the respective word position embedding associated with the respective phoneme lemma (212P).
5. The method (400) of claim 4, wherein determining that the respective grapheme word (212G) representing the respective word in the sequence of words corresponding to the respective phoneme word (212P) is embedded comprises: determining that the respective grapheme word-gram (212G) insert includes a corresponding word-position insert that matches the respective word-position insert of the respective phoneme word (212P).
6. The method (400) of any of claims 1-5, wherein the speech synthesis model (150) includes an attention mechanism in communication with the encoder (202).
7. The method (400) of any of claims 1-6, wherein the speech synthesis model (150) includes a duration-based upsampler in communication with the encoder (202).
8. The method (400) of any of claims 1-7, wherein the plurality of tokens (212) embedded (210) by the input encoder includes special tokens that identify a language of the input text.
9. The method (400) of any of claims 1-8, wherein the operations further comprise:
pre-training the encoder (202) of the speech synthesis model (150) by:
feeding the encoder (202) with a plurality of training examples (310), each training example (310) being represented as a training grapheme-word (212G) embedded sequence corresponding to a training sequence of words and a training phoneme-word (212P) sequence corresponding to a training sequence of the same words;
Masking training phoneme lemmas (212P) from the training phoneme lemmas (212P) sequence for respective words from the training sequence of words; and
masking training character-words (212G) embeddings from the training phoneme word (212P) sequence for the respective words from the training sequence of words.
10. The method (400) according to any of claims 1 to 9, wherein:
the speech synthesis model (150) comprises a multilingual speech synthesis model (150); and is also provided with
The operations further include pre-training the encoder (202) of the speech synthesis model (150) using a classification target (320) to predict a classification token of the plurality of tokens (212) embedded (210) by the input encoder, the classification token including a language identifier (214).
11. The method (400) according to any of claims 1 to 10, wherein:
the speech synthesis model (150) comprises a multilingual speech synthesis model (150); and is also provided with
The output encoder embedding (Vc) includes a sequence of encoder tokens, each encoder token including language information about the input text.
12. The method (400) of any of claims 1-11, wherein:
The speech synthesis model (150) comprises a multitone speech synthesis model (150); and is also provided with
The operations further include pre-training the encoder (202) of the speech synthesis model (150) using a classification target (320) to predict classification tokens among the plurality of tokens (212) embedded (210) by the input encoder, the classification tokens including accent identifiers (214).
13. A system (200), comprising:
data processing hardware (112); and
memory hardware (114) in communication with the data processing hardware (112), the memory hardware (114) storing instructions that, when executed on the data processing hardware (112), cause the data processing hardware (112) to perform operations comprising:
receiving a text input (152) at an encoder (202) of a speech synthesis model (150), the text input comprising a sequence of words represented as an input encoder insert (210), the input encoder insert (210) comprising a plurality of tokens (212), the plurality of tokens (212) comprising a first set of grapheme tokens (212G) representing the text input (152) as corresponding graphemes and a second set of phoneme tokens (212P) representing the text input (152) as corresponding phonemes;
For each respective phoneme lemma (212P) in the second set of phoneme lemmas (212P):
identifying, by the encoder (202), a respective word in the sequence of words corresponding to the respective phoneme lemma (212P); and
determining, by the encoder (202), a respective grapheme-word (212G) embedding representing the respective word in the word sequence corresponding to the respective phoneme-word (212P); and
an output encoder embedding (Vc) is generated by the encoder (202) based on a relationship between each respective phoneme lemma (212P) and a corresponding grapheme lemma (212G) embedding determined to represent the same respective word as the respective phoneme lemma (212P).
14. The system (200) of claim 13, wherein:
identifying, by the encoder (202), the respective word in the sequence of words corresponding to the respective phoneme lemma (212P) includes identifying a location in the respective word corresponding to the respective phoneme lemma (212P); and is also provided with
Determining, by the encoder (202), that the respective grapheme (212G) embedment represents the respective word in the sequence of words corresponding to the respective phoneme lemma (212P) includes determining, at the location in the respective word corresponding to the respective phoneme lemma (212P), that the respective grapheme (212G) embedment represents the respective word in the sequence of words corresponding to the respective phoneme lemma (212P).
15. The system (200) of claim 13 or 14, wherein each of the plurality of tokens (212) of the input encoder insert (210) represents a combination of:
one of a grapheme lemma (212G) insert or a phoneme lemma (212P) insert;
embedding the segments;
word position embedding; and
and (5) embedding the position.
16. The system (200) of claim 15, wherein identifying the respective word in the word sequence corresponding to the respective phoneme lemma (212P) comprises: the respective word in the word sequence corresponding to the respective phoneme lemma (212P) is identified based on the respective word position embedding associated with the respective phoneme lemma (212P).
17. The system (200) of claim 16, wherein determining the respective grapheme word-gram (212G) that represents the respective word in the word sequence corresponding to the respective phoneme word (212P) is embedded comprises: determining that the respective grapheme word-gram (212G) insert includes a corresponding word-position insert that matches the respective word-position insert of the respective phoneme word (212P).
18. The system (200) of any of claims 13 to 17, wherein the speech synthesis model (150) includes an attention mechanism in communication with the encoder (202).
19. The system (200) of any of claims 13 to 18, wherein the speech synthesis model (150) comprises a duration-based upsampler in communication with the encoder (202).
20. The system (200) of any of claims 13-19, wherein the plurality of tokens (212) embedded (210) by the input encoder includes special tokens identifying a language of the input text.
21. The system (200) of any of claims 13 to 20, wherein the operations further comprise:
pre-training the encoder (202) of the speech synthesis model (150) by:
feeding the encoder (202) with a plurality of training examples (310), each training example (310) being represented as a training grapheme-word (212G) embedded sequence corresponding to a training sequence of words and a training phoneme-word (212P) sequence corresponding to a training sequence of the same words;
masking training phoneme lemmas (212P) from the training phoneme lemmas (212P) sequence for respective words from the training sequence of words; and
masking training character-words (212G) embeddings from the training phoneme word (212P) sequence for the respective words from the training sequence of words.
22. The system (200) according to any one of claims 13 to 21, wherein:
the speech synthesis model (150) comprises a multilingual speech synthesis model (150); and is also provided with
The operations further include pre-training the encoder (202) of the speech synthesis model (150) using a classification target (320) to predict a classification token of the plurality of tokens (212) embedded (210) by the input encoder, the classification token including a language identifier (214).
23. The system (200) according to any one of claims 13 to 22, wherein:
the speech synthesis model (150) comprises a multilingual speech synthesis model (150); and is also provided with
The output encoder embedding (Vc) includes a sequence of encoder tokens, each encoder token including language information about the input text.
24. The system (200) according to any one of claims 13 to 23, wherein:
the speech synthesis model (150) comprises a multitone speech synthesis model (150); and is also provided with
The operations further include pre-training the encoder (202) of the speech synthesis model (150) using a classification target (320) to predict classification tokens among the plurality of tokens (212) embedded (210) by the input encoder, the classification tokens including accent identifiers (214).
Applications Claiming Priority (3)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US202163166929P | 2021-03-26 | 2021-03-26 | |
US63/166,929 | 2021-03-26 | ||
PCT/US2021/062837 WO2022203730A1 (en) | 2021-03-26 | 2021-12-10 | Phonemes and graphemes for neural text-to-speech |
Publications (1)
Publication Number | Publication Date |
---|---|
CN117203702A true CN117203702A (en) | 2023-12-08 |
Family
ID=79282928
Family Applications (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
CN202180096396.2A Pending CN117203702A (en) | 2021-03-26 | 2021-12-10 | Phonemes and graphemes for neurotext-to-speech |
Country Status (6)
Country | Link |
---|---|
US (1) | US20220310059A1 (en) |
EP (1) | EP4295354A1 (en) |
JP (1) | JP2024514064A (en) |
KR (1) | KR20230158603A (en) |
CN (1) | CN117203702A (en) |
WO (1) | WO2022203730A1 (en) |
Cited By (2)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
CN117765926A (en) * | 2024-02-19 | 2024-03-26 | 上海蜜度科技股份有限公司 | Speech synthesis method, system, electronic equipment and medium |
CN117765926B (en) * | 2024-02-19 | 2024-05-14 | 上海蜜度科技股份有限公司 | Speech synthesis method, system, electronic equipment and medium |
Families Citing this family (2)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
CN115762489A (en) * | 2022-10-27 | 2023-03-07 | 阿里巴巴达摩院(杭州)科技有限公司 | Data processing system and method of voice recognition model and voice recognition method |
CN115547292B (en) * | 2022-11-28 | 2023-02-28 | 成都启英泰伦科技有限公司 | Acoustic model training method for speech synthesis |
Family Cites Families (3)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US10872598B2 (en) * | 2017-02-24 | 2020-12-22 | Baidu Usa Llc | Systems and methods for real-time neural text-to-speech |
WO2020118643A1 (en) * | 2018-12-13 | 2020-06-18 | Microsoft Technology Licensing, Llc | Neural text-to-speech synthesis with multi-level text information |
CN112185337B (en) * | 2019-07-02 | 2024-04-26 | 微软技术许可有限责任公司 | Multilingual neural text-to-speech synthesis |
-
2021
- 2021-12-10 KR KR1020237036147A patent/KR20230158603A/en unknown
- 2021-12-10 EP EP21839780.0A patent/EP4295354A1/en active Pending
- 2021-12-10 US US17/643,684 patent/US20220310059A1/en active Pending
- 2021-12-10 WO PCT/US2021/062837 patent/WO2022203730A1/en active Application Filing
- 2021-12-10 CN CN202180096396.2A patent/CN117203702A/en active Pending
- 2021-12-10 JP JP2023558845A patent/JP2024514064A/en active Pending
Cited By (2)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
CN117765926A (en) * | 2024-02-19 | 2024-03-26 | 上海蜜度科技股份有限公司 | Speech synthesis method, system, electronic equipment and medium |
CN117765926B (en) * | 2024-02-19 | 2024-05-14 | 上海蜜度科技股份有限公司 | Speech synthesis method, system, electronic equipment and medium |
Also Published As
Publication number | Publication date |
---|---|
KR20230158603A (en) | 2023-11-20 |
EP4295354A1 (en) | 2023-12-27 |
JP2024514064A (en) | 2024-03-28 |
WO2022203730A1 (en) | 2022-09-29 |
US20220310059A1 (en) | 2022-09-29 |
Similar Documents
Publication | Publication Date | Title |
---|---|---|
KR102581346B1 (en) | Multilingual speech synthesis and cross-language speech replication | |
US11514886B2 (en) | Emotion classification information-based text-to-speech (TTS) method and apparatus | |
WO2020118521A1 (en) | Multi-speaker neural text-to-speech synthesis | |
US20240029710A1 (en) | Method and System for a Parametric Speech Synthesis | |
KR20230003056A (en) | Speech recognition using non-speech text and speech synthesis | |
EP4029010B1 (en) | Neural text-to-speech synthesis with multi-level context features | |
CN116034424A (en) | Two-stage speech prosody migration | |
CN104899192B (en) | For the apparatus and method interpreted automatically | |
CN114746935A (en) | Attention-based clock hierarchy variation encoder | |
CN117203702A (en) | Phonemes and graphemes for neurotext-to-speech | |
US11475874B2 (en) | Generating diverse and natural text-to-speech samples | |
CN112581963A (en) | Voice intention recognition method and system | |
JP7110055B2 (en) | Speech synthesis system and speech synthesizer | |
CN116601702A (en) | End-to-end nervous system for multi-speaker and multi-language speech synthesis | |
Ifeanyi et al. | Text–To–Speech Synthesis (TTS) | |
WO2023023434A1 (en) | Improving speech recognition with speech synthesis-based model adaption | |
Barros et al. | Maximum entropy motivated grapheme-to-phoneme, stress and syllable boundary prediction for Portuguese text-to-speech | |
Nguyen et al. | Learning Vietnamese-English Code-Switching Speech Synthesis Model Under Limited Code-Switched Data Scenario | |
Bacchiani et al. | Speech research at Google to enable universal speech interfaces | |
US20230360632A1 (en) | Speaker Embeddings for Improved Automatic Speech Recognition | |
KR20080011859A (en) | Method for predicting sentence-final intonation and text-to-speech system and method based on the same | |
KR20220116660A (en) | Tumbler device with artificial intelligence speaker function | |
EP4352724A1 (en) | Two-level text-to-speech systems using synthetic training data | |
CN117396958A (en) | Speech conversion model based on convolution enhanced transformation neural network |
Legal Events
Date | Code | Title | Description |
---|---|---|---|
PB01 | Publication | ||
PB01 | Publication | ||
SE01 | Entry into force of request for substantive examination | ||
SE01 | Entry into force of request for substantive examination |