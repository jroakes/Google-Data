US20190340225A1 - System and method providing a binary representation of a web page - Google Patents
System and method providing a binary representation of a web page Download PDFInfo
- Publication number
- US20190340225A1 US20190340225A1 US16/518,482 US201916518482A US2019340225A1 US 20190340225 A1 US20190340225 A1 US 20190340225A1 US 201916518482 A US201916518482 A US 201916518482A US 2019340225 A1 US2019340225 A1 US 2019340225A1
- Authority
- US
- United States
- Prior art keywords
- web page
- binary representation
- page
- source document
- client
- Prior art date
- Legal status (The legal status is an assumption and is not a legal conclusion. Google has not performed a legal analysis and makes no representation as to the accuracy of the status listed.)
- Granted
Links
Images
Classifications
-
- G06F17/2247—
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F8/00—Arrangements for software engineering
- G06F8/40—Transformation of program code
- G06F8/41—Compilation
- G06F8/44—Encoding
- G06F8/443—Optimisation
- G06F8/4441—Reducing the execution time required by the program code
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F16/00—Information retrieval; Database structures therefor; File system structures therefor
- G06F16/90—Details of database functions independent of the retrieved data types
- G06F16/95—Retrieval from the web
- G06F16/957—Browsing optimisation, e.g. caching or content distillation
- G06F16/9577—Optimising the visualization of content, e.g. distillation of HTML documents
-
- G06F17/2252—
-
- G06F17/2288—
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F40/00—Handling natural language data
- G06F40/10—Text processing
- G06F40/12—Use of codes for handling textual entities
- G06F40/14—Tree-structured documents
- G06F40/143—Markup, e.g. Standard Generalized Markup Language [SGML] or Document Type Definition [DTD]
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F40/00—Handling natural language data
- G06F40/10—Text processing
- G06F40/12—Use of codes for handling textual entities
- G06F40/14—Tree-structured documents
- G06F40/146—Coding or compression of tree-structured data
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F40/00—Handling natural language data
- G06F40/10—Text processing
- G06F40/197—Version control
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04L—TRANSMISSION OF DIGITAL INFORMATION, e.g. TELEGRAPHIC COMMUNICATION
- H04L67/00—Network arrangements or protocols for supporting network services or applications
- H04L67/01—Protocols
- H04L67/02—Protocols based on web technology, e.g. hypertext transfer protocol [HTTP]
Definitions
- Web pages are typically provided as hypertext markup language (HTML) documents. These documents are constructed of text strings that define the structure and content of the associated web page. In order to utilize the text strings to display the web page, the text strings are parsed and processed by software executing on the client, such as a web browser. The parsing and processing of these text strings requires time and system resources of the client.
- HTML hypertext markup language
- a server may compile a source page, such as a hypertext markup language (“HTML”) document, to create a compiled representation of the source page. Creation of a compiled representation may include generating a document object model (“DOM”) for the content associated with the source page.
- the compiled page may be transmitted to a client as a random-access file or flat file, where the data is encoded in one or more data types other than a string representation.
- the client may receive the compiled page and load the compiled page directly as a DOM for the page without the need to parse HTML text strings.
- the server and client may reconcile the data format of the compiled page, such as by exchanging or verifying a compiler dictionary associated with the page.
- the method may include parsing a web page source document, using a processor, to identify one or more page elements, the source document comprising text that defines a web page, where the source document is written in hypertext markup language (“HTML”), generating, with the processor, a binary representation corresponding to a document object model structure of a web page using the identified one or more page elements, the first binary representation including a conversion of the one or more page elements to a format other than plain text, and providing the binary representation such that, in response to a request from a client device, the binary representation is provided to the client device to render the web page without parsing the web page source document.
- HTML hypertext markup language
- the binary representation may be generated using a binary representation dictionary, the binary representation dictionary defining at least one binary instruction corresponding to each of the one or more page elements.
- the binary representation includes a datum identifying a version of the binary representation dictionary.
- the binary representation may include a tree structure, and each of the one or more page elements may be a node in the tree structure.
- the first binary representation may further include content associated with the web page.
- the binary representation may further include cascading style sheet information associated with the web page.
- the binary representation may be associated with a version identifier.
- the method may include determining if the web page source document has changed since the binary representation was generated using the version identifier, and generating a new binary representation using the web page source document if the web page source document has changed since the binary representation was generated.
- the version identifier may be at least one of a time stamp or a hash value.
- the method may include receiving a web page in a binary representation, the binary representation defining a document object model of the web page, the document object model defining one or more hypertext markup language (“HTML”) page elements as including at least a pair of an integer value and one or more attributes associated with the integer value, and rendering the web page, using a processor, by processing the binary representation, the structure of the web page defined by the document object model.
- the method may further include reconciling a first binary representation dictionary version used in rendering the web page with a second binary representation dictionary version used in compiling the web page.
- the method may further include rendering the web page only when the first binary representation dictionary version is greater than or equal to the second binary representation dictionary version.
- the method may include requesting an updated binary representation dictionary when the first binary representation dictionary version is not greater than or equal to the second binary representation dictionary version.
- the rendering may be performed by a browser layout engine executing on the processor.
- the method may further include requesting a HTML source document for the web page in response to a user's request to view the HTML source document.
- the binary representation may include a tree structure defining the document object model and the one or more page elements, the binary representation is received incrementally, and the method may further include requesting data corresponding to the one or more page elements as each page element is rendered.
- the processing system may include a memory for storing a web page source document and a binary representation of the web page source document, at least one processor coupled to the memory.
- the processor may be configured to parse the web page source document to identify one or more page elements, the web page source document comprising text that defines a web page, where the source document is written in hypertext markup language (“HTML”), generate a binary representation corresponding to a document object model of a web page using the identified one or more page elements, the binary representation including a conversion of the one or more page elements to a format other than plain text, and provide the binary representation such that, in response to a request from a client device, the binary representation may be provided to the client device to render the web page without parsing the web page source document.
- HTML hypertext markup language
- the binary representation may be generated using a binary representation dictionary, the binary representation dictionary may define at least one binary instruction corresponding to each of the one or more page elements.
- the binary representation may include a datum identifying a version of the binary representation dictionary.
- the binary representation may include a tree structure, and each of the one or more page elements is a node in the tree structure.
- the binary representation may include content of the web page.
- the binary representation may include cascading style sheet information associated with the web page.
- the binary representation may be associated with a version identifier, and the method may include determining if the web page source document has changed since the first binary representation was generated using the version identifier, and generating a new binary representation using the web page source document if the web page source document has changed since the first binary representation was generated.
- the version identifier may be at least one of a time stamp or a hash value.
- the method may include receiving a web page in a binary representation, the binary representation defining a document object model of the web page, the document object model defining one or more hypertext markup language (“HTML”) page elements as including at least a pair of an integer value and one or more attributes associated with the integer value, and rendering the web page, using a processor, by processing the binary representation, the structure of the web page defined by the document object model.
- the instructions may further include reconciling a first binary representation dictionary version used in rendering the web page with a second binary representation dictionary version used in compiling the web page.
- the instructions may further include rendering the web page only when the first binary representation dictionary version is greater than or equal to the second binary representation dictionary version.
- the instructions may include requesting an updated binary representation dictionary when the first binary representation dictionary version is not greater than or equal to the second binary representation dictionary version.
- the rendering may be performed by a browser layout engine executing on the processor.
- the instructions may include requesting a HTML source document for the web page in response to a user's request to view the HTML source document.
- the binary representation may include a tree structure defining the document object model and the one or more page elements, the binary representation is received incrementally, and the instructions may further include requesting data corresponding to the one or more page elements as each page element is rendered.
- FIG. 1 is a system diagram depicting an example of a system for providing a binary representation of a web page in accordance with aspects of the disclosure.
- FIG. 2 is an illustration of an example of a data flow between a client and server in accordance with aspects of the disclosure.
- FIG. 3 is a flow diagram of an example of a method for creating a binary representation of a web page in accordance with aspects of the disclosure.
- FIG. 4 is a flow diagram of an example of a method for accessing a web page using a binary representation of the web page in accordance with aspects of the disclosure.
- the disclosure describes systems and methods for providing a binary representation of a web page. Aspects of the disclosure provide a straightforward process for speeding up the load time of web content and decreasing the amount of data that is transmitted from a server to a client before the client may render the web content. Elements of the system relate to compiling a source web page into a compiled page, such that the compiled page may be loaded directly by the client without the need to parse hypertext markup language (“HTML”) text data.
- HTML hypertext markup language
- a server may host web content, and a client device may request the web content from the server.
- the server may provide a compiled version of the web content in response to the client request.
- the compiled version may be a binary representation of the web page, such as a generated DOM that represents the structure and/or content of the web page in a binary format, rather than the text string format in which HTML pages are typically provided.
- Providing the web content in this format allows for faster processing by the client device, because the client device may not parse text data transmitted in a HTML document to render the web content.
- FIG. 1 is a system diagram depicting an example of a system 100 for providing a binary representation of a web page in accordance with aspects of the disclosure.
- an example of such a system includes a server 102 coupled to a client 104 via a network 138 .
- the server 102 may be operable to host web content, compile the web content into a binary representation, and provide the web content and/or the binary representation to the client device 104 .
- the server 102 may be computing device such as a laptop computer, a desktop computer, a netbook, a rack-mounted server, a smartphone, a cellular phone, a tablet computer, or any other device containing programmable hardware or software for executing instructions.
- the server 102 may be implemented as multiple devices with both portable and non-portable components (e.g., software executing on a rack-mounted server with a mobile interface for gathering location information).
- the server 102 may include a processor 106 , a memory 108 and other components typically present in general purpose computers.
- the processor 106 may be any processor capable of execution of computer code.
- the processor 106 may be a dedicated controller such as an application-specific integrated circuit (“ASIC”) or other processing device.
- ASIC application-specific integrated circuit
- the server 102 may have all of the components normally used in connection with a wireless mobile device such as a central processing unit (“CPU”), memory (e.g., RAM and ROM) storing data and instructions, an electronic display (e.g., a liquid crystal display (“LCD”) screen or touch-screen), user input (e.g., a keyboard, touch-screen or microphone), camera, a speaker, a network interface component, and all of the components used for connecting these elements to one another. Some or all of these components may all be internally stored within the same housing, e.g. a housing defined by a plastic shell and LCD screen.
- CPU central processing unit
- memory e.g., RAM and ROM
- LCD liquid crystal display
- user input e.g., a keyboard, touch-screen or microphone
- camera e.g., a keyboard, touch-screen or microphone
- speaker e.g., a speaker
- network interface component e.g., a network interface component
- the memory 108 may store information that is accessible by the processor 106 , including instructions 110 that may be executed by the processor 106 , and data 112 .
- the memory 108 may be of any type of memory operative to store information accessible by the processor 106 , including a non-transitory computer-readable medium, or other medium that stores data that may be read with the aid of an electronic device, such as a hard-drive, memory card, read-only memory (“ROM”), random access memory (“RAM”), digital versatile disc (“DVD”) or other optical disks, as well as other write-capable and read-only memories.
- the system and method may include different combinations of the foregoing, whereby different portions of the instructions and data are stored on different types of media.
- the instructions 110 may be any set of instructions to be executed directly (such as machine code) or indirectly (such as scripts) by the processor 106 .
- the instructions 110 may be stored as computer code on the computer-readable medium.
- the terms “instructions” and “programs” may be used interchangeably herein.
- the instructions 110 may be stored in object code format for direct processing by the processor 106 , or in any other computer language including scripts or collections of independent source code modules that are interpreted on demand or compiled in advance.
- the instructions 110 may comprise a hosting application 114 for providing web content, such as a source page 118 or a compiled page 120 , to the client device 102 .
- the hosting application 114 may be any application capable of providing such content, such as APACHE, NGINX, INTERNET INFORMATION SERVICES, or the like.
- the hosting application 114 may be operable to receive network content requests, such as a Hypertext Transfer Protocol (“HTTP”) GET request, and provide content in response to the request.
- HTTP Hypertext Transfer Protocol
- the instructions 110 may further comprise a page compiler 116 .
- the page compiler 116 may convert HTML text of the source page 118 to a set of compiled data stored in the compiled page 120 .
- the page compiler 116 may parse the text of the source page 118 to determine the structure and the content of the page.
- the page compiler 116 may convert elements of the structure and content into data formats other than the text data contained within the source page 118 .
- the format of the compiled page 120 may be specified by a compiler dictionary 122 .
- the compiler dictionary 122 may specify that particular elements of the page structure (e.g., particular page attributes, tags, or element identifiers) are stored as particular data types (e.g., integers, vectors, maps, strings).
- the page compiler 116 may further associate the compiled page 120 with a particular time or date stamp to indicate when the compiled page 120 was generated.
- the page compiler 116 may create multiple binary representations of each page. For example, the page compiler 116 may generate a first, uncompressed binary representation of a page that minimizes the amount of processing that must be done to render the page, and a second, compressed binary representation of the page that compresses the data to further reduce the file size, but requires more processing by a browser to render.
- the page compiler 116 may also associate the compiled page with a version identifier, which may identify the version of the compiler dictionary 122 utilized to generate the compiled page.
- the page compiler 116 may be implemented as a separate application, or it may be integrated into the hosting application 114 .
- the page compiler 116 may be integrated into the hosting application 114 to dynamically verify web content as it is loaded, accessed, and hosted by the hosting application 114 , and recreate the compiled page 120 in the event an alternate compiler dictionary 122 is provided.
- the page compiler 116 may verify that the content to be provided may be converted to a compiled page 120 before hosting.
- the compiled page 120 is dynamically generated in response to a request form the client, the compiled page 120 may be provided piece-meal to the client, with structure and content interleaved and provided as it is compiled.
- the data 112 may be retrieved, stored or modified by the processor 106 in accordance with the instructions 110 .
- the data may be stored in computer registers, in a relational database as a table having a plurality of different fields and records, Extensible Markup Language (“XML”) documents or flat files.
- XML Extensible Markup Language
- the data may also be formatted in any computer readable format such as, but not limited to, binary values or Unicode.
- image data may be stored as bitmaps comprised of grids of pixels that are stored in accordance with formats that are compressed or uncompressed, lossless (e.g., BMP) or lossy (e.g., JPEG), and bitmap or vector-based (e.g., SVG), as well as computer instructions for drawing graphics.
- the data may comprise any information sufficient to identify the relevant information, such as numbers, descriptive text, proprietary codes, references to data stored in other areas of the same memory or different memories (including other network locations) or information that is used by a function to calculate the relevant data.
- Portions of the data 112 may comprise the source page 118 , the compiled page 120 , and the compiler dictionary 122 .
- the source page 118 may include a HTML document defining a set of web content.
- the HTML document includes a set of text data from which a web page may be constructed. While data stored in a text format may be easy for a user to read and edit, this text must be parsed by a program before it can be used to create a web page.
- the compiled page 120 may be a binary representation of the source page 118 .
- the compiled page 120 may be stored in a platform independent data format.
- the compiled page 120 may be stored in two different versions, one version for little-Endian clients and one version for big-Endian clients.
- the compiled page 120 may be stored in a single format.
- the compiled page 120 may be stored in a little-Endian format to ease adoption on certain hardware configurations, with an understanding that hardware configurations with big-Endian formats will convert the data upon receipt.
- the compiled page 120 may be in a particular format as defined by the compiler dictionary 122 .
- the compiled page 120 may include an integer value for a version identifier, a vector for a list of elements of the page, a tree structure for elements of the DOM, map structures for each tag and the associated tag attributes, and the like.
- Certain HTML features and tags may be identified using integers, such as by using a particular integer value for bold or italic text, or a particular integer value to indicate that a tag is a hyperlink.
- the compiled page may have the following structure:
- the “DOM” term may define a generic tree that can be stored as a left child right sibling binary tree and then written out as an array in breadth-first order to minimize the memory footprint of the tree.
- the client may choose to process the tree into a more general structure for depth-first searches.
- the tree may also be written out in preorder with NULL markers as a first approximation.
- the client may choose to process the tree into a more general structure for depth-first searches.
- the “Type” field may designate which table to use to look up the data for the entry in the tree.
- New HTML features may be added to the end of the enum and deprecated tags may remain in the enum to ensure consistency across versions.
- Clients may choose to implement a given TagId as a no-op (e.g., no operation will be performed). It may be possible to consolidate some HTML tags into single TagIds with dummy attributes. For example, b, em, i, and strong could all be a style id with an attribute describing the style.
- the “QuoteType” term may identify the type of quotes used in the document, in order to avoid malformed HTML.
- the “Content” term may identify string content associated with the element. For international implementations, it may be important that this string data respects the original encoding of the HTML page.
- this element may be encoded using UTF-8.
- multiple binary representations may be generated corresponding to different data formats. Different formats may compress the data of the original HTML file to further reduce file size.
- the client may indicate which format should be provided when requesting the page. For example, where the client is bandwidth constrained (e.g., a mobile device on a 3G network), the client may request the compressed representation of the page, and where the client is not bandwidth constrained (e.g., the same mobile device on a Wi-Fi network), the client may request the uncompressed representation.
- the binary representation may include conversion of different page elements into a binary format.
- HTML documents include one or more tags, and contents associated with those tags.
- a binary representation may include a particular instruction code (e.g., 8 bits of data) for each type of tag. Although 8 bit instruction codes are described (allowing 255 distinct tag instruction types), different size instruction codes may be utilized to define fewer or more tags.
- Tags may also be associated with style information (e.g., ⁇ em>, ⁇ b>, or ⁇ a>). These styles may be each associated with an instruction value.
- the styles may be represented by a 16 bit index into a style table, such as a table maintained in the compiler dictionary 122 , or a style table may be provided as part of the compiled page 120 , such that each compiled page may provide a unique set of styles.
- Each style may be associated with one or more colors and font rendering and positional information.
- the server 102 would transmit 21 bytes of data, one byte for each character in the HTML document.
- the page information could be transmitted as 8 bytes, as follows:
- “09” may be an instruction indicating that the tag is a “title” tag, “09” indicates the number of characters in the title, and “70 61 67 65 74 69 74 6C 65” represent the ASCII values of the text “pagetitle”. Definitions of the values associated with each tag and the attendant syntax may be defined in the compiler dictionary 122 .
- the compiler dictionary 122 may be sent to the client along with the compiled page 120 , or the server 102 and client 104 may perform a handshake process verifying that the client 104 is using an appropriate version of the compiler dictionary 122 to process the compiled page.
- the client 104 may utilize a version number embedded within the compiled page 120 to verify that the compiled page 120 can be properly processed.
- the compiled page 120 may also be provided in more than one file.
- a first file may be provided with the DOM structure of the page, and a second file may be provided with the content associated with the DOM elements (e.g., text associated with particular tags).
- These files may be cached and maintained separately by the server 102 , so that a change to the content of a page does not necessarily result in the recompiling of the structure of the page, assuming the structure has not changed.
- the compiled page 120 may also include style information of the source page 118 .
- the source page 118 may include a set of style attributes such as size, shape, and color, stored as a Cascading Style Sheet (“CSS”) file.
- This CSS file may also include text data that is to be parsed and processed by the browser, and thus may benefit from compiling into a binary format.
- a third “style” file may be provided along with the structure and content of the page.
- the structure, content, and style are described as being provided separately and distinctly, these elements can also be broken down into component parts and provided in an interleaved format to the client 104 .
- some structure elements of the page may be provided along with content elements associated with those structure elements before sending additional structure elements or style data.
- FIG. 1 functionally illustrates the processor 106 and memory 108 as being within the same block, the processor 108 and memory 110 may actually comprise multiple processors and memories that may or may not be stored within the same physical housing. Accordingly, references to a processor, computer or memory will be understood to include references to a collection of processors, computers or memories that may or may not operate in parallel.
- the client 104 may be operable to request web content from the server 102 , and display the web content, such as via a browser 132 .
- the client 104 may be configured similarly to the server 102 , with a processor 124 and memory 126 .
- the memory 126 may comprise a set of instructions 128 and a set of data 130 .
- the processor 124 executes the instructions 128 to control operation of the client 104 .
- the instructions 128 may include a browser 132 .
- the browser 132 may function to request, receive, and display web content, such as the compiled page 120 .
- the browser may parse the text of the document and process the parsed text to generate a DOM for the page.
- the browser 132 may interact with this generated DOM to display the page to the user and allow interaction with the page.
- the browser 132 may load the binary representation directly into a DOM, without the need to parse text of the page.
- the browser 132 may include a binary representation processing application 134 to interpret the binary representation and load the contents of the binary representation into a DOM.
- the binary representation processing application 134 may be integrated within the browser 132 directly, such as at the lowest resource-loading level of the browser 132 (e.g., in WEBKIT, a layout engine included in some popular browsers) or as a browser plug-in. In instances where the binary representation processing application 134 is integrated directly with the browser, the binary representation processing application 134 may replace a previous implementation of the DOM within the browser 132 and allow manipulations and accesses to the DOM via the binary representation processing application 134 .
- the client 104 may also request the source page 118 in addition to the compiled page 120 .
- a user may wish to view the page source associated with the displayed content.
- the browser 132 may be operable to request the source page 118 from the server 102 in response to such a request by the user.
- the server 102 may be at a first node of a network 138 and the client 104 may be at a second node of the network 138 .
- the server 102 and the client 104 may be operative to directly and indirectly communicate with other nodes of the network.
- the client 104 may comprise a mobile device that is operative to communicate with the server 102 via the network 138 such that the server 102 uses the network 138 to transmit and display web content to a user via the client 104 .
- the server 102 may also comprise a plurality of computers that exchange information with different nodes of a network for the purpose of receiving, processing and transmitting data to the client devices; in this instance, the client 104 may be at a different node of the network than any of the computers comprising the server 102 .
- the network 138 may comprise various configurations and use various protocols including the Internet, World Wide Web, intranets, virtual private networks, local Ethernet networks, private networks using communication protocols proprietary to one or more companies, cellular and wireless networks (e.g., Wi-Fi), instant messaging, HTTP and simple mail transfer protocol (“SMTP”), and various combinations of the foregoing.
- cellular and wireless networks e.g., Wi-Fi
- instant messaging HTTP and simple mail transfer protocol (“SMTP”), and various combinations of the foregoing.
- SMTP simple mail transfer protocol
- information may be sent via a medium such as an optical disk or portable drive.
- information may be transmitted in a non-electronic format and manually entered into the system.
- FIG. 2 is an illustration of an example of a data flow 200 between a client 104 and server 102 in accordance with aspects of the disclosure.
- the data flow 200 depicts the process by which a compiled web page is transmitted from the server 102 to the client 104 .
- the server 102 is operable to host a set of web content, and compile that web content into a binary representation.
- the binary representation is transmitted to the client 104 for rendering, such that the client does not need to parse data stored in an inefficient format, such as plain text.
- the web page may thus be displayed more quickly to the user by processing the web content in a native format without parsing or converting the text of the document.
- the server 102 hosts a web page represented by a HTML document 202 .
- the HTML document 202 contains text information that describes the structure and content of the web page.
- the structure and content of the page are stored as a series of tags represented by plain text.
- the HTML document 202 is compiled into a binary representation of the page DOM 204 and a set of content 206 .
- the HTML document 202 may be compiled by parsing the text to identify the tags, styles, content, and the like contained within the document.
- the parsed text may be converted into a binary representation 204 , where different page elements correspond to particular binary values or instructions.
- the binary representation 204 may comprise a DOM 205 and a set of content 206 .
- the relationship between page elements and binary values may be enumerated in a compiler dictionary as described above (see FIG. 1 ).
- the client 104 may send a request to the server 102 for a web page at action 216 .
- the request may be a HTTP GET request, or any other method of requesting a HTML document.
- the client 104 may indicate in the request that the client 104 is capable of supporting binary representations of web content. This flag in the request may induce the server 102 to respond with the binary representation 204 instead of a standard HTML document.
- the server 102 may respond to the HTTP GET request by providing the binary representation 204 to the client 104 , where it is stored as the binary representation 208 , including a DOM 209 and a set of content 210 .
- the binary format of the page allows the client 104 to process the page DOM 209 without the need to parse text to determine the structure and content of the page.
- the client 104 may load the binary representation 208 , including the page DOM 209 , directly into memory as the structure of the page without an intervening text parsing process.
- the content 210 associated with the DOM 209 may be transmitted as part of the same binary representation, or in a separate request/response action between the client 104 and the server 102 .
- the page DOM 208 may contain a set of tags and formatting information that defines the structure of the page, but the actual content of those tags may not have been received by the client 104 .
- the client 104 may request the page content 206 from the server 102 .
- the server 102 may evaluate where the page should be recompiled into a new binary representation 204 upon receiving the request from the client 102 . In circumstances where the page is recompiled, the server 102 may transmit individual page elements as they are recompiled, rather than waiting for the entire page to be converted to a binary representation.
- the response header sent to the client in response to the initial request may indicate that compilation was possible (i.e., no validation errors occurred prior to beginning recompilation).
- the client may render as normal, and scripts in the page may manipulate the DOM as usual without the need for the client to transform the data received into a separate internal representation, as would be performed with a traditional HTML document.
- the client 104 may utilize the binary representation 208 to render the web page in a browser to provide a rendered web page 212 .
- FIG. 3 is a flow diagram of an example of a method 300 for creating a binary representation of a web page in accordance with aspects of the disclosure.
- the method 300 is operable to convert a text HTML document into a binary representation such that a web browser may interpret the binary representation to render the web page associated with the HTML document.
- the method 300 may be performed by a server, such as the server 102 described above (see FIG. 102 ) or any computing device operable to execute instructions with a processor.
- a HTML document is validated to ensure that the document may be processed into a binary representation.
- a compiler application may identify the tags included in the HTML document to ensure that each tag is associated with a particular binary value in a compiler dictionary.
- parts of the HTML document may be converted to a binary representation and parts may not, if certain tags or content are not contained within the dictionary.
- the validation check may be performed when receiving the HTML document to ensure that when the document is requested, it may be properly converted to a binary representation.
- the HTML document is parsed to identify information that describes the page associated with the HTML document. For example, each HTML tag, style, and the associated content may be identified within the page for compiling into the binary representation.
- the parsing process may utilize the compiler dictionary to identify particular elements of the page.
- the identified page elements may be utilized to create a page structure in the binary representation.
- a binary representation of the page associated with the HTML document is created.
- the page elements identified at action 304 may each be associated with a particular instruction code or binary value. These instruction codes may be entered in the binary representation in such a way that they may be read and processed by a client to recreate the web page without needing to parse the original HTML text from the HTML document.
- the binary representation may also be compressed during this process, though compression may not be optimal in all circumstances due to the need to decompress the representation when the binary representation is read. Compression may thus be utilized to reduce the amount of data transmitted while requiring additional processing on the client side, or the binary representation may be transmitted uncompressed to minimize the amount of processing by the client.
- multiple binary representations may be generated for a given HTML document. For example, a first binary representation may minimize rendering time (e.g., uncompressed data), while another binary representation may compress the data to further reduce the file size.
- the binary representation may be generated in response to a request by a client for the web page associated with the HTML content, or it may be generated in advance of the request.
- the server 102 may periodically generate binary representations of hosted HTML documents to ensure that the binary representations are immediately available for sending to the client upon a request from the client, or the server 102 may generate the binary representation on-demand.
- the binary representation is stored for transmission to the client.
- the binary representation may also be stored with a version identifier.
- the version identifier may identify certain aspects of the binary representation. For example, the version identifier may be used to identify the source HTML document used to create the binary representation, the date or time the binary representation was created, and/or the version of the compiler dictionary utilized to create the binary representation.
- the version identifier may be used to determine whether the binary representation should be recreated (e.g., if the version identifier indicates the binary representation was created more than 1 day, 1 week, or 1 month ago, it should be recreated).
- a change in the HTML document may be detected.
- the HTML document changes it may be necessary to recompile the document to create a new binary representation or alter the stored binary representation.
- the method 300 may monitor for a change in a timestamp, a checksum, or a file hash in the source HTML document (e.g., a MD5 checksum), and initiate a recompilation of the HTML document when the change occurs. If a change is detected, the method 300 returns to action 304 to create a new binary representation. Otherwise, the method 300 ends.
- FIG. 4 is a flow diagram of an example of a method 400 for accessing a web page using a binary representation of the web page in accordance with aspects of the disclosure.
- the client receiving the page may need to ascertain that the page provided in response to the client's request is not encoded in a standard text format.
- the client may be programmed or configured to identify that the server has provided a web page encoded in a binary representation, and that the page should be processed accordingly.
- the server may indicate that that page is provided in a particular format via a special message, or the client may identify that the received page is not encoded in a text format.
- the client may also determine the format of the received binary representation using a compiler dictionary that indicates which instruction codes are associated with which page elements.
- the client may further request a particular version of the binary representation. For example, the client may request a compressed version of the web page if the client is bandwidth constrained, or an uncompressed representation if the client is not bandwidth constrained.
- the client may determine which compiler dictionary to use via a reconciliation process with the server.
- the client may create the DOM of the page using the binary representation without needing to parse text from a HTML document, thus reducing the amount of processing performed by the client before the page is rendered by the client.
- the client may be a mobile device that can access the network using both 3G and Wi-Fi. Where the client may only access the 3G network, the client may wish to limit the amount of bandwidth used due to slower available speeds and/or increased cost of using the network. Thus, the client may request smaller, compressed binary representations of the web content. Where the client is not bandwidth constrained (e.g., connecting via Wi-Fi), the client may request an uncompressed binary representation, to reduce the amount of processing necessary to render the page in a browser.
- bandwidth constraint scenario is described to illustrate circumstances where different binary representations are appropriate, other factors may also influence the type of representation requested (e.g., available system resources, browser capabilities, battery level, type of page, etc.). For example, where device battery power is not constrained, the device may request a more complex representation (e.g., a compressed representation) because the device processor is not required to operate in a power saving mode. A combination of factors may also be used, such as by requesting a less complex (e.g., uncompressed) representation when both bandwidth is constrained and the device is operating on battery power.
- a more complex representation e.g., a compressed representation
- a combination of factors may also be used, such as by requesting a less complex (e.g., uncompressed) representation when both bandwidth is constrained and the device is operating on battery power.
- the page is requested.
- the version of the page requested may be dependent upon whether or not the client was determined to be bandwidth constrained at action 401 .
- an uncompressed version of the page may be requested at action 402 .
- a compressed version of the page may be requested at action 403 .
- the two types of representations described relate to whether or not the page is compressed, other formats and versions of the binary representation may also be used as appropriate (e.g., different compiler dictionary versions, different data encoding formats, whether other generated and derived page elements are included, etc.).
- the client 104 may send a HTTP GET request to the server 102 that is hosting the web page.
- the client 104 may explicitly request a binary representation of the web page, such as by issuing a special request command that indicates that the client is capable of processing a binary representation of the page.
- the client may be configurable by the user to determine whether to request a binary representation of a web page or a standard HTML document.
- the client 104 may include a flag in the initial request to the server 102 to indicate that the client 104 is capable of processing binary representations of web pages.
- the server 102 may respond to the client 102 with a flag in the response header.
- the client 102 may also identify valid HTML/compiled HTML by investigating the first few bytes of the file.
- the client 102 may also request that a specific version of the compiler dictionary be used (e.g., the client is older than the cutting edge). As such, the server 102 may be configured to support older versions.
- the server 102 may store multiple compiled versions of a given HTML file locally if different versions are requested.
- a binary representation of the web page is received.
- the binary representation may be generated from a source web page, such as described above (see FIGS. 1 and 3 ).
- the binary representation may be provided with a particular flag or identifier to indicate to the client that the web page is provided in a binary representation.
- the client may reconcile a version of the compiler dictionary used to generate the binary representation of the web page.
- the compiler dictionary may determine which binary instruction values correspond to particular page elements.
- the compiler dictionary may be reconciled between the client and server by identifying a particular version in the binary representation. Alternately, the client and server may perform a handshaking process to verify the version of the compiler dictionary.
- the server may transmit the compiler dictionary to the client. Transmission of the compiler dictionary may occur spontaneously (e.g., the server does not verify that the client does not have the correct version before transmission), or the transmission of the compiler dictionary may occur after verification that the client does not have the proper version.
- the client may determine the version from a version identifier embedded in the compiled page, and request an updated version of the compiler dictionary if the client does not have the proper version.
- the compiler dictionary may be provided such that newer versions of the dictionary are compatible with web pages encoded using older versions.
- the binary representation is used to load the web page.
- the elements of the page defined by the binary instructions may be loaded into a DOM associated with the page.
- the binary representation may be processed by a browser plug-in loaded with the browser, or the browser may incorporate processing of the binary representation into the layout engine of the browser. Certain advantages may be obtained from integration with the layout engine, as the direct integration may allow for display of the page associated with the binary representation with fewer translation steps.
- the process of loading the page may include creating the page structure as a DOM in the browser.
- the browser may perform additional request operations to request content defined in the binary representation. For example, the browser may identify a tree structure in the binary representation that identifies elements of the page, and request those elements from the server. These requested elements may also be provided as binary representations. For example, as described above (see FIGS. 1 and 2 ), the elements of the page may be separated into binary representations of page structure, page content, and page style, and provided to the client in separate data elements.
- the page is rendered using the binary representation or representations received by the client.
- the received binary representations are processed to determine how the page should be displayed in the web browser.
- the page may not actually be displayed in the browser.
- the web page may be loaded in a background browser instance, or the web page may be prerendered in a browser instance that is hidden from the user.
- stages of the illustrated methods described above are not intended to be limiting.
- the functionality of the methods may exist in a fewer or greater number of stages than what is shown and, even with the depicted methods, the particular order of events may be different from what is shown in the figures and include additional stages or omit stages as shown.
- the systems and methods described above advantageously provide a straightforward method and system for providing web content in a fast, efficient manner.
- HTML documents By converting HTML documents to a binary representation before transmission to a client, the associated pages may be displayed faster while simultaneously consuming less bandwidth.
- legacy support for providing page source may be maintained by allowing simultaneous or on-demand transmission of the original source page.
- the binary representation requires less processing by the browser, as the browser does not need to parse an entire text document into machine-readable instructions.
- the binary representation may also reproduce the DOM directly, such that the browser can immediately display the DOM while also maintaining functionality of components that rely upon manipulation of the DOM (e.g., JAVASCRIPT).
Abstract
Description
- The present application is a continuation of U.S. patent application Ser. No. 15/046,601, filed Feb. 18, 2016, which is a continuation of U.S. patent application Ser. No. 13/790,285, filed Mar. 8, 2013, which claims the benefit of the filing date of U.S. Provisional Patent Application No. 61/610,096 filed Mar. 13, 2012, the disclosures of which are hereby incorporated herein by reference.
- The advent of the World Wide Web has placed more information at the fingertips of today's users than ever before. Various websites cater to nearly every need and interest, providing access to reference information, business and financial documents, social networking, and more. Widespread broadband Internet access provides faster access to these sites than ever before.
- However, as fast as current high-speed Internet services are, the act of browsing the web is not instantaneous. When a user selects a link on a page or enters a uniform resource locator (URL) in a text field, there is a delay while data is requested from the host, sent to the client, and rendered in the browser. Web pages are typically provided as hypertext markup language (HTML) documents. These documents are constructed of text strings that define the structure and content of the associated web page. In order to utilize the text strings to display the web page, the text strings are parsed and processed by software executing on the client, such as a web browser. The parsing and processing of these text strings requires time and system resources of the client. On electronic devices that have fewer system resources to devote to the display of web content, such as mobile devices, these parsing and processing steps may cause a noticeable delay in the display of the associated web content. Sending the HTML content as text strings may also be inefficient, as string data types may require more data and a larger memory footprint than alternatives.
- Systems and methods for providing a binary representation of a web page are described. A server may compile a source page, such as a hypertext markup language (“HTML”) document, to create a compiled representation of the source page. Creation of a compiled representation may include generating a document object model (“DOM”) for the content associated with the source page. The compiled page may be transmitted to a client as a random-access file or flat file, where the data is encoded in one or more data types other than a string representation. The client may receive the compiled page and load the compiled page directly as a DOM for the page without the need to parse HTML text strings. The server and client may reconcile the data format of the compiled page, such as by exchanging or verifying a compiler dictionary associated with the page.
- Aspects of the disclosure provide a computer-implemented method for providing a binary representation of a web page. The method may include parsing a web page source document, using a processor, to identify one or more page elements, the source document comprising text that defines a web page, where the source document is written in hypertext markup language (“HTML”), generating, with the processor, a binary representation corresponding to a document object model structure of a web page using the identified one or more page elements, the first binary representation including a conversion of the one or more page elements to a format other than plain text, and providing the binary representation such that, in response to a request from a client device, the binary representation is provided to the client device to render the web page without parsing the web page source document. The binary representation may be generated using a binary representation dictionary, the binary representation dictionary defining at least one binary instruction corresponding to each of the one or more page elements. The binary representation includes a datum identifying a version of the binary representation dictionary. The binary representation may include a tree structure, and each of the one or more page elements may be a node in the tree structure. The first binary representation may further include content associated with the web page. The binary representation may further include cascading style sheet information associated with the web page. The binary representation may be associated with a version identifier. The method may include determining if the web page source document has changed since the binary representation was generated using the version identifier, and generating a new binary representation using the web page source document if the web page source document has changed since the binary representation was generated. The version identifier may be at least one of a time stamp or a hash value.
- Aspects of the disclosure provide a computer-implemented method for processing a web page received in a binary representation. The method may include receiving a web page in a binary representation, the binary representation defining a document object model of the web page, the document object model defining one or more hypertext markup language (“HTML”) page elements as including at least a pair of an integer value and one or more attributes associated with the integer value, and rendering the web page, using a processor, by processing the binary representation, the structure of the web page defined by the document object model. The method may further include reconciling a first binary representation dictionary version used in rendering the web page with a second binary representation dictionary version used in compiling the web page. The method may further include rendering the web page only when the first binary representation dictionary version is greater than or equal to the second binary representation dictionary version. The method may include requesting an updated binary representation dictionary when the first binary representation dictionary version is not greater than or equal to the second binary representation dictionary version. The rendering may be performed by a browser layout engine executing on the processor. The method may further include requesting a HTML source document for the web page in response to a user's request to view the HTML source document. The binary representation may include a tree structure defining the document object model and the one or more page elements, the binary representation is received incrementally, and the method may further include requesting data corresponding to the one or more page elements as each page element is rendered.
- Aspects of the disclosure provide a processing system for providing a binary representation of a web page. The processing system may include a memory for storing a web page source document and a binary representation of the web page source document, at least one processor coupled to the memory. The processor may be configured to parse the web page source document to identify one or more page elements, the web page source document comprising text that defines a web page, where the source document is written in hypertext markup language (“HTML”), generate a binary representation corresponding to a document object model of a web page using the identified one or more page elements, the binary representation including a conversion of the one or more page elements to a format other than plain text, and provide the binary representation such that, in response to a request from a client device, the binary representation may be provided to the client device to render the web page without parsing the web page source document. The binary representation may be generated using a binary representation dictionary, the binary representation dictionary may define at least one binary instruction corresponding to each of the one or more page elements. The binary representation may include a datum identifying a version of the binary representation dictionary. The binary representation may include a tree structure, and each of the one or more page elements is a node in the tree structure. The binary representation may include content of the web page. The binary representation may include cascading style sheet information associated with the web page. The binary representation may be associated with a version identifier, and the method may include determining if the web page source document has changed since the first binary representation was generated using the version identifier, and generating a new binary representation using the web page source document if the web page source document has changed since the first binary representation was generated. The version identifier may be at least one of a time stamp or a hash value.
- Aspects of the disclosure provide a non-transitory computer readable storage medium containing instructions that, when executed by a processor, cause the processor to perform a method. The method may include receiving a web page in a binary representation, the binary representation defining a document object model of the web page, the document object model defining one or more hypertext markup language (“HTML”) page elements as including at least a pair of an integer value and one or more attributes associated with the integer value, and rendering the web page, using a processor, by processing the binary representation, the structure of the web page defined by the document object model. The instructions may further include reconciling a first binary representation dictionary version used in rendering the web page with a second binary representation dictionary version used in compiling the web page. The instructions may further include rendering the web page only when the first binary representation dictionary version is greater than or equal to the second binary representation dictionary version. The instructions may include requesting an updated binary representation dictionary when the first binary representation dictionary version is not greater than or equal to the second binary representation dictionary version. The rendering may be performed by a browser layout engine executing on the processor. The instructions may include requesting a HTML source document for the web page in response to a user's request to view the HTML source document. The binary representation may include a tree structure defining the document object model and the one or more page elements, the binary representation is received incrementally, and the instructions may further include requesting data corresponding to the one or more page elements as each page element is rendered.
-
FIG. 1 is a system diagram depicting an example of a system for providing a binary representation of a web page in accordance with aspects of the disclosure. -
FIG. 2 is an illustration of an example of a data flow between a client and server in accordance with aspects of the disclosure. -
FIG. 3 is a flow diagram of an example of a method for creating a binary representation of a web page in accordance with aspects of the disclosure. -
FIG. 4 is a flow diagram of an example of a method for accessing a web page using a binary representation of the web page in accordance with aspects of the disclosure. - The aspects, features and advantages of the present disclosure will be appreciated when considered with reference to the following description of preferred embodiments and accompanying figures. The following description does not limit the disclosure; rather, the scope is defined by the appended claims and equivalents. While certain processes in accordance with example embodiments are shown in the figures as occurring in a linear fashion, this is not a requirement unless expressly stated herein. Different processes may be performed in a different order or concurrently.
- The disclosure describes systems and methods for providing a binary representation of a web page. Aspects of the disclosure provide a straightforward process for speeding up the load time of web content and decreasing the amount of data that is transmitted from a server to a client before the client may render the web content. Elements of the system relate to compiling a source web page into a compiled page, such that the compiled page may be loaded directly by the client without the need to parse hypertext markup language (“HTML”) text data.
- A server may host web content, and a client device may request the web content from the server. The server may provide a compiled version of the web content in response to the client request. The compiled version may be a binary representation of the web page, such as a generated DOM that represents the structure and/or content of the web page in a binary format, rather than the text string format in which HTML pages are typically provided. Providing the web content in this format allows for faster processing by the client device, because the client device may not parse text data transmitted in a HTML document to render the web content.
-
FIG. 1 is a system diagram depicting an example of asystem 100 for providing a binary representation of a web page in accordance with aspects of the disclosure. As shown inFIG. 1 , an example of such a system includes aserver 102 coupled to aclient 104 via anetwork 138. Theserver 102 may be operable to host web content, compile the web content into a binary representation, and provide the web content and/or the binary representation to theclient device 104. Theserver 102 may be computing device such as a laptop computer, a desktop computer, a netbook, a rack-mounted server, a smartphone, a cellular phone, a tablet computer, or any other device containing programmable hardware or software for executing instructions. Although aspects of the disclosure generally relate to a portable device, theserver 102 may be implemented as multiple devices with both portable and non-portable components (e.g., software executing on a rack-mounted server with a mobile interface for gathering location information). Theserver 102 may include aprocessor 106, amemory 108 and other components typically present in general purpose computers. Theprocessor 106 may be any processor capable of execution of computer code. Alternatively, theprocessor 106 may be a dedicated controller such as an application-specific integrated circuit (“ASIC”) or other processing device. - The
server 102 may have all of the components normally used in connection with a wireless mobile device such as a central processing unit (“CPU”), memory (e.g., RAM and ROM) storing data and instructions, an electronic display (e.g., a liquid crystal display (“LCD”) screen or touch-screen), user input (e.g., a keyboard, touch-screen or microphone), camera, a speaker, a network interface component, and all of the components used for connecting these elements to one another. Some or all of these components may all be internally stored within the same housing, e.g. a housing defined by a plastic shell and LCD screen. - The
memory 108 may store information that is accessible by theprocessor 106, includinginstructions 110 that may be executed by theprocessor 106, anddata 112. Thememory 108 may be of any type of memory operative to store information accessible by theprocessor 106, including a non-transitory computer-readable medium, or other medium that stores data that may be read with the aid of an electronic device, such as a hard-drive, memory card, read-only memory (“ROM”), random access memory (“RAM”), digital versatile disc (“DVD”) or other optical disks, as well as other write-capable and read-only memories. The system and method may include different combinations of the foregoing, whereby different portions of the instructions and data are stored on different types of media. - The
instructions 110 may be any set of instructions to be executed directly (such as machine code) or indirectly (such as scripts) by theprocessor 106. For example, theinstructions 110 may be stored as computer code on the computer-readable medium. In that regard, the terms “instructions” and “programs” may be used interchangeably herein. Theinstructions 110 may be stored in object code format for direct processing by theprocessor 106, or in any other computer language including scripts or collections of independent source code modules that are interpreted on demand or compiled in advance. - The
instructions 110 may comprise a hostingapplication 114 for providing web content, such as asource page 118 or a compiledpage 120, to theclient device 102. The hostingapplication 114 may be any application capable of providing such content, such as APACHE, NGINX, INTERNET INFORMATION SERVICES, or the like. For example, the hostingapplication 114 may be operable to receive network content requests, such as a Hypertext Transfer Protocol (“HTTP”) GET request, and provide content in response to the request. - The
instructions 110 may further comprise apage compiler 116. Thepage compiler 116 may convert HTML text of thesource page 118 to a set of compiled data stored in the compiledpage 120. For example, thepage compiler 116 may parse the text of thesource page 118 to determine the structure and the content of the page. Thepage compiler 116 may convert elements of the structure and content into data formats other than the text data contained within thesource page 118. The format of the compiledpage 120 may be specified by acompiler dictionary 122. For example, thecompiler dictionary 122 may specify that particular elements of the page structure (e.g., particular page attributes, tags, or element identifiers) are stored as particular data types (e.g., integers, vectors, maps, strings). Thepage compiler 116 may further associate the compiledpage 120 with a particular time or date stamp to indicate when the compiledpage 120 was generated. Thepage compiler 116 may create multiple binary representations of each page. For example, thepage compiler 116 may generate a first, uncompressed binary representation of a page that minimizes the amount of processing that must be done to render the page, and a second, compressed binary representation of the page that compresses the data to further reduce the file size, but requires more processing by a browser to render. - The
page compiler 116 may also associate the compiled page with a version identifier, which may identify the version of thecompiler dictionary 122 utilized to generate the compiled page. Thepage compiler 116 may be implemented as a separate application, or it may be integrated into the hostingapplication 114. For example, thepage compiler 116 may be integrated into the hostingapplication 114 to dynamically verify web content as it is loaded, accessed, and hosted by the hostingapplication 114, and recreate the compiledpage 120 in the event analternate compiler dictionary 122 is provided. When providing the web content, thepage compiler 116 may verify that the content to be provided may be converted to a compiledpage 120 before hosting. Where the compiledpage 120 is dynamically generated in response to a request form the client, the compiledpage 120 may be provided piece-meal to the client, with structure and content interleaved and provided as it is compiled. - The
data 112 may be retrieved, stored or modified by theprocessor 106 in accordance with theinstructions 110. For instance, although the architecture is not limited by any particular data structure, the data may be stored in computer registers, in a relational database as a table having a plurality of different fields and records, Extensible Markup Language (“XML”) documents or flat files. The data may also be formatted in any computer readable format such as, but not limited to, binary values or Unicode. By further way of example only, image data may be stored as bitmaps comprised of grids of pixels that are stored in accordance with formats that are compressed or uncompressed, lossless (e.g., BMP) or lossy (e.g., JPEG), and bitmap or vector-based (e.g., SVG), as well as computer instructions for drawing graphics. The data may comprise any information sufficient to identify the relevant information, such as numbers, descriptive text, proprietary codes, references to data stored in other areas of the same memory or different memories (including other network locations) or information that is used by a function to calculate the relevant data. - Portions of the
data 112 may comprise thesource page 118, the compiledpage 120, and thecompiler dictionary 122. Thesource page 118 may include a HTML document defining a set of web content. The HTML document includes a set of text data from which a web page may be constructed. While data stored in a text format may be easy for a user to read and edit, this text must be parsed by a program before it can be used to create a web page. - The compiled
page 120 may be a binary representation of thesource page 118. The compiledpage 120 may be stored in a platform independent data format. For example, the compiledpage 120 may be stored in two different versions, one version for little-Endian clients and one version for big-Endian clients. Alternately, the compiledpage 120 may be stored in a single format. For example, the compiledpage 120 may be stored in a little-Endian format to ease adoption on certain hardware configurations, with an understanding that hardware configurations with big-Endian formats will convert the data upon receipt. - The compiled
page 120 may be in a particular format as defined by thecompiler dictionary 122. For example, the compiledpage 120 may include an integer value for a version identifier, a vector for a list of elements of the page, a tree structure for elements of the DOM, map structures for each tag and the associated tag attributes, and the like. Certain HTML features and tags may be identified using integers, such as by using a particular integer value for bold or italic text, or a particular integer value to indicate that a tag is a hyperlink. - For example, the compiled page may have the following structure:
- Version: integer
- DOM: tree<pair<Type, index»
- Type: Element type I Contents type
- ElementList: vector<Element>
- Element: pair<Tag, AttributeList>
- Tag: enum [a, body, b, em, html, . . . ]
- AttributeList: map<AttributeKey, AttributeValue>
- AttributeKey: string
- AttributeValue: pair<string, QuoteType>
- QuoteType: enum [None, Single, Double]
- ContentList: vector<Content>
- Content: string
- The “version” term may describe a set of TagIds that are supported (e.g., clients may require a version of the dictionary >=this version). The “DOM” term may define a generic tree that can be stored as a left child right sibling binary tree and then written out as an array in breadth-first order to minimize the memory footprint of the tree. The client may choose to process the tree into a more general structure for depth-first searches. For ease of implementation, the tree may also be written out in preorder with NULL markers as a first approximation. The client may choose to process the tree into a more general structure for depth-first searches. The “Type” field may designate which table to use to look up the data for the entry in the tree. New HTML features may be added to the end of the enum and deprecated tags may remain in the enum to ensure consistency across versions. Clients may choose to implement a given TagId as a no-op (e.g., no operation will be performed). It may be possible to consolidate some HTML tags into single TagIds with dummy attributes. For example, b, em, i, and strong could all be a style id with an attribute describing the style. The “QuoteType” term may identify the type of quotes used in the document, in order to avoid malformed HTML. The “Content” term may identify string content associated with the element. For international implementations, it may be important that this string data respects the original encoding of the HTML page. As such, this element may be encoded using UTF-8. As described above, multiple binary representations may be generated corresponding to different data formats. Different formats may compress the data of the original HTML file to further reduce file size. The client may indicate which format should be provided when requesting the page. For example, where the client is bandwidth constrained (e.g., a mobile device on a 3G network), the client may request the compressed representation of the page, and where the client is not bandwidth constrained (e.g., the same mobile device on a Wi-Fi network), the client may request the uncompressed representation.
- The binary representation may include conversion of different page elements into a binary format. For example, HTML documents include one or more tags, and contents associated with those tags. A binary representation may include a particular instruction code (e.g., 8 bits of data) for each type of tag. Although 8 bit instruction codes are described (allowing 255 distinct tag instruction types), different size instruction codes may be utilized to define fewer or more tags. Tags may also be associated with style information (e.g., <em>, <b>, or <a>). These styles may be each associated with an instruction value. The styles may be represented by a 16 bit index into a style table, such as a table maintained in the
compiler dictionary 122, or a style table may be provided as part of the compiledpage 120, such that each compiled page may provide a unique set of styles. Each style may be associated with one or more colors and font rendering and positional information. As an example of the benefits of transmitting the web content as a binary representation, consider the following HTML data: -
- <title>pagetitle</title>
- To transmit this data from the
server 102 to theclient 104 as asource page 118, theserver 102 would transmit 21 bytes of data, one byte for each character in the HTML document. Alternately, as a compiled representation, the page information could be transmitted as 8 bytes, as follows: -
- 09 09 70 61 67 65 74 69 74 6C 65
- “09” may be an instruction indicating that the tag is a “title” tag, “09” indicates the number of characters in the title, and “70 61 67 65 74 69 74 6C 65” represent the ASCII values of the text “pagetitle”. Definitions of the values associated with each tag and the attendant syntax may be defined in the
compiler dictionary 122. Thecompiler dictionary 122 may be sent to the client along with the compiledpage 120, or theserver 102 andclient 104 may perform a handshake process verifying that theclient 104 is using an appropriate version of thecompiler dictionary 122 to process the compiled page. Theclient 104 may utilize a version number embedded within the compiledpage 120 to verify that the compiledpage 120 can be properly processed. - The compiled
page 120 may also be provided in more than one file. For example, a first file may be provided with the DOM structure of the page, and a second file may be provided with the content associated with the DOM elements (e.g., text associated with particular tags). These files may be cached and maintained separately by theserver 102, so that a change to the content of a page does not necessarily result in the recompiling of the structure of the page, assuming the structure has not changed. - The compiled
page 120 may also include style information of thesource page 118. For example, thesource page 118 may include a set of style attributes such as size, shape, and color, stored as a Cascading Style Sheet (“CSS”) file. This CSS file may also include text data that is to be parsed and processed by the browser, and thus may benefit from compiling into a binary format. As such, a third “style” file may be provided along with the structure and content of the page. Although the structure, content, and style are described as being provided separately and distinctly, these elements can also be broken down into component parts and provided in an interleaved format to theclient 104. For example, some structure elements of the page may be provided along with content elements associated with those structure elements before sending additional structure elements or style data. - Although
FIG. 1 functionally illustrates theprocessor 106 andmemory 108 as being within the same block, theprocessor 108 andmemory 110 may actually comprise multiple processors and memories that may or may not be stored within the same physical housing. Accordingly, references to a processor, computer or memory will be understood to include references to a collection of processors, computers or memories that may or may not operate in parallel. - The
client 104 may be operable to request web content from theserver 102, and display the web content, such as via abrowser 132. Theclient 104 may be configured similarly to theserver 102, with aprocessor 124 andmemory 126. As described with respect to theserver 102, thememory 126 may comprise a set ofinstructions 128 and a set ofdata 130. Theprocessor 124 executes theinstructions 128 to control operation of theclient 104. Theinstructions 128 may include abrowser 132. - The
browser 132 may function to request, receive, and display web content, such as the compiledpage 120. When receiving a standard HTML document, such as thesource page 118, the browser may parse the text of the document and process the parsed text to generate a DOM for the page. Thebrowser 132 may interact with this generated DOM to display the page to the user and allow interaction with the page. When receiving a binary representation of a page, such as the compiledpage 120, thebrowser 132 may load the binary representation directly into a DOM, without the need to parse text of the page. Thebrowser 132 may include a binaryrepresentation processing application 134 to interpret the binary representation and load the contents of the binary representation into a DOM. The binaryrepresentation processing application 134 may be integrated within thebrowser 132 directly, such as at the lowest resource-loading level of the browser 132 (e.g., in WEBKIT, a layout engine included in some popular browsers) or as a browser plug-in. In instances where the binaryrepresentation processing application 134 is integrated directly with the browser, the binaryrepresentation processing application 134 may replace a previous implementation of the DOM within thebrowser 132 and allow manipulations and accesses to the DOM via the binaryrepresentation processing application 134. - In some instances the
client 104 may also request thesource page 118 in addition to the compiledpage 120. For example, a user may wish to view the page source associated with the displayed content. Thebrowser 132 may be operable to request thesource page 118 from theserver 102 in response to such a request by the user. - The
server 102 may be at a first node of anetwork 138 and theclient 104 may be at a second node of thenetwork 138. Theserver 102 and theclient 104 may be operative to directly and indirectly communicate with other nodes of the network. For example, theclient 104 may comprise a mobile device that is operative to communicate with theserver 102 via thenetwork 138 such that theserver 102 uses thenetwork 138 to transmit and display web content to a user via theclient 104. Theserver 102 may also comprise a plurality of computers that exchange information with different nodes of a network for the purpose of receiving, processing and transmitting data to the client devices; in this instance, theclient 104 may be at a different node of the network than any of the computers comprising theserver 102. - The
network 138, and the intervening nodes between theserver 102 and theclient 104, may comprise various configurations and use various protocols including the Internet, World Wide Web, intranets, virtual private networks, local Ethernet networks, private networks using communication protocols proprietary to one or more companies, cellular and wireless networks (e.g., Wi-Fi), instant messaging, HTTP and simple mail transfer protocol (“SMTP”), and various combinations of the foregoing. Although only a single client device is depicted inFIG. 1 , it should be appreciated that a typical system may include a large number of connected computers. - Although some functions are indicated as taking place on the
server 102 and other functions are indicated as taking place on theclient 104, various aspects may be implemented by a single computer having a single processor. In accordance with one aspect of the system and method, operations performed on theserver 102 may be implemented on theclient 104, and vice-versa. - Although certain advantages are obtained when information is transmitted or received as noted above, other aspects of the system and method are not limited to any particular manner of transmission of information. For example, in some aspects, information may be sent via a medium such as an optical disk or portable drive. In other aspects, the information may be transmitted in a non-electronic format and manually entered into the system.
-
FIG. 2 is an illustration of an example of adata flow 200 between aclient 104 andserver 102 in accordance with aspects of the disclosure. Thedata flow 200 depicts the process by which a compiled web page is transmitted from theserver 102 to theclient 104. Theserver 102 is operable to host a set of web content, and compile that web content into a binary representation. The binary representation is transmitted to theclient 104 for rendering, such that the client does not need to parse data stored in an inefficient format, such as plain text. The web page may thus be displayed more quickly to the user by processing the web content in a native format without parsing or converting the text of the document. - The
server 102 hosts a web page represented by aHTML document 202. TheHTML document 202 contains text information that describes the structure and content of the web page. The structure and content of the page are stored as a series of tags represented by plain text. - At
action 214, theHTML document 202 is compiled into a binary representation of thepage DOM 204 and a set ofcontent 206. TheHTML document 202 may be compiled by parsing the text to identify the tags, styles, content, and the like contained within the document. The parsed text may be converted into abinary representation 204, where different page elements correspond to particular binary values or instructions. Thebinary representation 204 may comprise aDOM 205 and a set ofcontent 206. The relationship between page elements and binary values may be enumerated in a compiler dictionary as described above (seeFIG. 1 ). - The
client 104 may send a request to theserver 102 for a web page ataction 216. The request may be a HTTP GET request, or any other method of requesting a HTML document. Theclient 104 may indicate in the request that theclient 104 is capable of supporting binary representations of web content. This flag in the request may induce theserver 102 to respond with thebinary representation 204 instead of a standard HTML document. Theserver 102 may respond to the HTTP GET request by providing thebinary representation 204 to theclient 104, where it is stored as thebinary representation 208, including aDOM 209 and a set ofcontent 210. The binary format of the page allows theclient 104 to process thepage DOM 209 without the need to parse text to determine the structure and content of the page. Thus, theclient 104 may load thebinary representation 208, including thepage DOM 209, directly into memory as the structure of the page without an intervening text parsing process. - The
content 210 associated with theDOM 209 may be transmitted as part of the same binary representation, or in a separate request/response action between theclient 104 and theserver 102. For example, thepage DOM 208 may contain a set of tags and formatting information that defines the structure of the page, but the actual content of those tags may not have been received by theclient 104. As such, theclient 104 may request thepage content 206 from theserver 102. Theserver 102 may evaluate where the page should be recompiled into a newbinary representation 204 upon receiving the request from theclient 102. In circumstances where the page is recompiled, theserver 102 may transmit individual page elements as they are recompiled, rather than waiting for the entire page to be converted to a binary representation. The response header sent to the client in response to the initial request may indicate that compilation was possible (i.e., no validation errors occurred prior to beginning recompilation). In response to receiving the appropriate response header, the client may render as normal, and scripts in the page may manipulate the DOM as usual without the need for the client to transform the data received into a separate internal representation, as would be performed with a traditional HTML document. - At
action 220, theclient 104 may utilize thebinary representation 208 to render the web page in a browser to provide a renderedweb page 212. -
FIG. 3 is a flow diagram of an example of amethod 300 for creating a binary representation of a web page in accordance with aspects of the disclosure. Themethod 300 is operable to convert a text HTML document into a binary representation such that a web browser may interpret the binary representation to render the web page associated with the HTML document. Themethod 300 may be performed by a server, such as theserver 102 described above (seeFIG. 102 ) or any computing device operable to execute instructions with a processor. - At
action 302, a HTML document is validated to ensure that the document may be processed into a binary representation. For example, a compiler application may identify the tags included in the HTML document to ensure that each tag is associated with a particular binary value in a compiler dictionary. In some cases, parts of the HTML document may be converted to a binary representation and parts may not, if certain tags or content are not contained within the dictionary. For example, if the HTML document is not well formed according to W3C standards, it may not be possible to create a binary representation of the document. The validation check may be performed when receiving the HTML document to ensure that when the document is requested, it may be properly converted to a binary representation. - At
action 304, the HTML document is parsed to identify information that describes the page associated with the HTML document. For example, each HTML tag, style, and the associated content may be identified within the page for compiling into the binary representation. The parsing process may utilize the compiler dictionary to identify particular elements of the page. The identified page elements may be utilized to create a page structure in the binary representation. - At
action 306, a binary representation of the page associated with the HTML document is created. The page elements identified ataction 304 may each be associated with a particular instruction code or binary value. These instruction codes may be entered in the binary representation in such a way that they may be read and processed by a client to recreate the web page without needing to parse the original HTML text from the HTML document. The binary representation may also be compressed during this process, though compression may not be optimal in all circumstances due to the need to decompress the representation when the binary representation is read. Compression may thus be utilized to reduce the amount of data transmitted while requiring additional processing on the client side, or the binary representation may be transmitted uncompressed to minimize the amount of processing by the client. As described above (seeFIG. 1 ), multiple binary representations may be generated for a given HTML document. For example, a first binary representation may minimize rendering time (e.g., uncompressed data), while another binary representation may compress the data to further reduce the file size. - The binary representation may be generated in response to a request by a client for the web page associated with the HTML content, or it may be generated in advance of the request. The
server 102 may periodically generate binary representations of hosted HTML documents to ensure that the binary representations are immediately available for sending to the client upon a request from the client, or theserver 102 may generate the binary representation on-demand. - At
action 308, the binary representation is stored for transmission to the client. The binary representation may also be stored with a version identifier. The version identifier may identify certain aspects of the binary representation. For example, the version identifier may be used to identify the source HTML document used to create the binary representation, the date or time the binary representation was created, and/or the version of the compiler dictionary utilized to create the binary representation. The version identifier may be used to determine whether the binary representation should be recreated (e.g., if the version identifier indicates the binary representation was created more than 1 day, 1 week, or 1 month ago, it should be recreated). - At
action 310, a change in the HTML document may be detected. When the HTML document changes, it may be necessary to recompile the document to create a new binary representation or alter the stored binary representation. For example, themethod 300 may monitor for a change in a timestamp, a checksum, or a file hash in the source HTML document (e.g., a MD5 checksum), and initiate a recompilation of the HTML document when the change occurs. If a change is detected, themethod 300 returns toaction 304 to create a new binary representation. Otherwise, themethod 300 ends. -
FIG. 4 is a flow diagram of an example of amethod 400 for accessing a web page using a binary representation of the web page in accordance with aspects of the disclosure. In order to process a web page encoded in a binary representation, the client receiving the page may need to ascertain that the page provided in response to the client's request is not encoded in a standard text format. For example, the client may be programmed or configured to identify that the server has provided a web page encoded in a binary representation, and that the page should be processed accordingly. The server may indicate that that page is provided in a particular format via a special message, or the client may identify that the received page is not encoded in a text format. The client may also determine the format of the received binary representation using a compiler dictionary that indicates which instruction codes are associated with which page elements. The client may further request a particular version of the binary representation. For example, the client may request a compressed version of the web page if the client is bandwidth constrained, or an uncompressed representation if the client is not bandwidth constrained. The client may determine which compiler dictionary to use via a reconciliation process with the server. The client may create the DOM of the page using the binary representation without needing to parse text from a HTML document, thus reducing the amount of processing performed by the client before the page is rendered by the client. - At
action 401, a determination is made as to whether the client is bandwidth constrained. For example, as described above (seeFIG. 1 ), the client may be a mobile device that can access the network using both 3G and Wi-Fi. Where the client may only access the 3G network, the client may wish to limit the amount of bandwidth used due to slower available speeds and/or increased cost of using the network. Thus, the client may request smaller, compressed binary representations of the web content. Where the client is not bandwidth constrained (e.g., connecting via Wi-Fi), the client may request an uncompressed binary representation, to reduce the amount of processing necessary to render the page in a browser. Although a bandwidth constraint scenario is described to illustrate circumstances where different binary representations are appropriate, other factors may also influence the type of representation requested (e.g., available system resources, browser capabilities, battery level, type of page, etc.). For example, where device battery power is not constrained, the device may request a more complex representation (e.g., a compressed representation) because the device processor is not required to operate in a power saving mode. A combination of factors may also be used, such as by requesting a less complex (e.g., uncompressed) representation when both bandwidth is constrained and the device is operating on battery power. - At
actions action 401. Where the client is not bandwidth constrained, an uncompressed version of the page may be requested ataction 402. Where the client is bandwidth constrained, a compressed version of the page may be requested ataction 403. Although the two types of representations described relate to whether or not the page is compressed, other formats and versions of the binary representation may also be used as appropriate (e.g., different compiler dictionary versions, different data encoding formats, whether other generated and derived page elements are included, etc.). For example, theclient 104 may send a HTTP GET request to theserver 102 that is hosting the web page. Theclient 104 may explicitly request a binary representation of the web page, such as by issuing a special request command that indicates that the client is capable of processing a binary representation of the page. In some aspects, the client may be configurable by the user to determine whether to request a binary representation of a web page or a standard HTML document. Theclient 104 may include a flag in the initial request to theserver 102 to indicate that theclient 104 is capable of processing binary representations of web pages. Theserver 102 may respond to theclient 102 with a flag in the response header. Theclient 102 may also identify valid HTML/compiled HTML by investigating the first few bytes of the file. Theclient 102 may also request that a specific version of the compiler dictionary be used (e.g., the client is older than the cutting edge). As such, theserver 102 may be configured to support older versions. Theserver 102 may store multiple compiled versions of a given HTML file locally if different versions are requested. - At
action 404, a binary representation of the web page is received. The binary representation may be generated from a source web page, such as described above (seeFIGS. 1 and 3 ). The binary representation may be provided with a particular flag or identifier to indicate to the client that the web page is provided in a binary representation. - At
action 406, the client may reconcile a version of the compiler dictionary used to generate the binary representation of the web page. The compiler dictionary may determine which binary instruction values correspond to particular page elements. The compiler dictionary may be reconciled between the client and server by identifying a particular version in the binary representation. Alternately, the client and server may perform a handshaking process to verify the version of the compiler dictionary. The server may transmit the compiler dictionary to the client. Transmission of the compiler dictionary may occur spontaneously (e.g., the server does not verify that the client does not have the correct version before transmission), or the transmission of the compiler dictionary may occur after verification that the client does not have the proper version. The client may determine the version from a version identifier embedded in the compiled page, and request an updated version of the compiler dictionary if the client does not have the proper version. The compiler dictionary may be provided such that newer versions of the dictionary are compatible with web pages encoded using older versions. - At
action 408, the binary representation is used to load the web page. For example, the elements of the page defined by the binary instructions may be loaded into a DOM associated with the page. As described above, the binary representation may be processed by a browser plug-in loaded with the browser, or the browser may incorporate processing of the binary representation into the layout engine of the browser. Certain advantages may be obtained from integration with the layout engine, as the direct integration may allow for display of the page associated with the binary representation with fewer translation steps. - The process of loading the page may include creating the page structure as a DOM in the browser. During the loading operation, the browser may perform additional request operations to request content defined in the binary representation. For example, the browser may identify a tree structure in the binary representation that identifies elements of the page, and request those elements from the server. These requested elements may also be provided as binary representations. For example, as described above (see
FIGS. 1 and 2 ), the elements of the page may be separated into binary representations of page structure, page content, and page style, and provided to the client in separate data elements. - At
action 410, the page is rendered using the binary representation or representations received by the client. During the rendering process, the received binary representations are processed to determine how the page should be displayed in the web browser. Although the rendering process relates to preparing the web page for display, the page may not actually be displayed in the browser. For example, the web page may be loaded in a background browser instance, or the web page may be prerendered in a browser instance that is hidden from the user. - The stages of the illustrated methods described above are not intended to be limiting. The functionality of the methods may exist in a fewer or greater number of stages than what is shown and, even with the depicted methods, the particular order of events may be different from what is shown in the figures and include additional stages or omit stages as shown.
- The systems and methods described above advantageously provide a straightforward method and system for providing web content in a fast, efficient manner. By converting HTML documents to a binary representation before transmission to a client, the associated pages may be displayed faster while simultaneously consuming less bandwidth. Although such representations may not be immediately readable by a human being, legacy support for providing page source may be maintained by allowing simultaneous or on-demand transmission of the original source page. The binary representation requires less processing by the browser, as the browser does not need to parse an entire text document into machine-readable instructions. The binary representation may also reproduce the DOM directly, such that the browser can immediately display the DOM while also maintaining functionality of components that rely upon manipulation of the DOM (e.g., JAVASCRIPT).
- As these and other variations and combinations of the features discussed above can be utilized without departing from the disclosure as defined by the claims, the foregoing description of the embodiments should be taken by way of illustration rather than by way of limitation of the disclosure as defined by the claims. It will also be understood that the provision of examples of the disclosure (as well as clauses phrased as “such as,” “e.g.”, “including” and the like) should not be interpreted as limiting the disclosure to the specific examples; rather, the examples are intended to illustrate only some of many possible embodiments.
Claims (20)
Priority Applications (1)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US16/518,482 US11194557B2 (en) | 2012-03-13 | 2019-07-22 | System and method providing a binary representation of a web page |
Applications Claiming Priority (4)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US201261610096P | 2012-03-13 | 2012-03-13 | |
US13/790,285 US9298679B2 (en) | 2012-03-13 | 2013-03-08 | System and method providing a binary representation of a web page |
US15/046,601 US10360291B2 (en) | 2012-03-13 | 2016-02-18 | System and method providing a binary representation of a web page |
US16/518,482 US11194557B2 (en) | 2012-03-13 | 2019-07-22 | System and method providing a binary representation of a web page |
Related Parent Applications (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
US15/046,601 Continuation US10360291B2 (en) | 2012-03-13 | 2016-02-18 | System and method providing a binary representation of a web page |
Publications (2)
Publication Number | Publication Date |
---|---|
US20190340225A1 true US20190340225A1 (en) | 2019-11-07 |
US11194557B2 US11194557B2 (en) | 2021-12-07 |
Family
ID=49158870
Family Applications (3)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
US13/790,285 Active 2034-03-30 US9298679B2 (en) | 2012-03-13 | 2013-03-08 | System and method providing a binary representation of a web page |
US15/046,601 Active 2034-08-26 US10360291B2 (en) | 2012-03-13 | 2016-02-18 | System and method providing a binary representation of a web page |
US16/518,482 Active US11194557B2 (en) | 2012-03-13 | 2019-07-22 | System and method providing a binary representation of a web page |
Family Applications Before (2)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
US13/790,285 Active 2034-03-30 US9298679B2 (en) | 2012-03-13 | 2013-03-08 | System and method providing a binary representation of a web page |
US15/046,601 Active 2034-08-26 US10360291B2 (en) | 2012-03-13 | 2016-02-18 | System and method providing a binary representation of a web page |
Country Status (4)
Country | Link |
---|---|
US (3) | US9298679B2 (en) |
EP (1) | EP2825978B1 (en) |
CN (2) | CN104185845B (en) |
WO (1) | WO2013138179A1 (en) |
Cited By (3)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
CN113703750A (en) * | 2021-10-29 | 2021-11-26 | 成都中科合迅科技有限公司 | Dynamic flow generation method based on custom algorithm |
US11308060B2 (en) * | 2019-01-29 | 2022-04-19 | Beijing Baidu Netcom Science And Technology Co., Ltd. | Method, apparatus, device and storage medium for managing index |
US11960561B2 (en) * | 2022-07-28 | 2024-04-16 | Siteimprove A/S | Client-side generation of lossless object model representations of dynamic webpages |
Families Citing this family (46)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US8756488B2 (en) | 2010-06-18 | 2014-06-17 | Sweetlabs, Inc. | Systems and methods for integration of an application runtime environment into a user computing environment |
CA2754520A1 (en) * | 2010-10-07 | 2012-04-07 | Dundas Data Visualization, Inc. | Systems and methods for dashboard image generation |
WO2013079999A1 (en) * | 2011-12-02 | 2013-06-06 | Canon Kabushiki Kaisha | Methods and devices for encoding and decoding messages |
US8775917B2 (en) | 2012-08-09 | 2014-07-08 | Sweetlabs, Inc. | Systems and methods for alert management |
US8775925B2 (en) | 2012-08-28 | 2014-07-08 | Sweetlabs, Inc. | Systems and methods for hosted applications |
US9081757B2 (en) | 2012-08-28 | 2015-07-14 | Sweetlabs, Inc | Systems and methods for tracking and updating hosted applications |
US9069735B2 (en) | 2012-10-15 | 2015-06-30 | Sweetlabs, Inc. | Systems and methods for integrated application platforms |
WO2014153239A1 (en) * | 2013-03-14 | 2014-09-25 | Google Inc. | Real-time collaboration for binary data files |
KR20140133125A (en) * | 2013-05-09 | 2014-11-19 | 삼성전자주식회사 | Method and apparatus for a client to browse a web page provided by a server |
JP2015052821A (en) * | 2013-09-05 | 2015-03-19 | 株式会社東芝 | Communication device and communication method |
US9749440B2 (en) | 2013-12-31 | 2017-08-29 | Sweetlabs, Inc. | Systems and methods for hosted application marketplaces |
KR102131644B1 (en) * | 2014-01-06 | 2020-07-08 | 삼성전자주식회사 | Electronic apparatus and operating method of web-platform |
US10313410B2 (en) | 2014-03-21 | 2019-06-04 | Ptc Inc. | Systems and methods using binary dynamic rest messages |
US9762637B2 (en) | 2014-03-21 | 2017-09-12 | Ptc Inc. | System and method of using binary dynamic rest messages |
US9462085B2 (en) | 2014-03-21 | 2016-10-04 | Ptc Inc. | Chunk-based communication of binary dynamic rest messages |
US9560170B2 (en) * | 2014-03-21 | 2017-01-31 | Ptc Inc. | System and method of abstracting communication protocol using self-describing messages |
US9961058B2 (en) | 2014-03-21 | 2018-05-01 | Ptc Inc. | System and method of message routing via connection servers in a distributed computing environment |
US20150271044A1 (en) * | 2014-03-24 | 2015-09-24 | International Business Machines Corporation | Browser response optimization |
US10019247B2 (en) | 2014-05-15 | 2018-07-10 | Sweetlabs, Inc. | Systems and methods for application installation platforms |
US10089098B2 (en) | 2014-05-15 | 2018-10-02 | Sweetlabs, Inc. | Systems and methods for application installation platforms |
CA2875850C (en) * | 2014-12-23 | 2022-07-05 | Steve Cooper | Version synchronization of dependent components |
CN104598635B (en) * | 2015-02-06 | 2018-01-19 | 无锡江南计算技术研究所 | A kind of complex documents automatic generation method based on XML descriptions |
CN104598636B (en) * | 2015-02-06 | 2017-09-19 | 无锡江南计算技术研究所 | Complex documents chorista method and complex documents automatic generation method |
US10003631B1 (en) * | 2015-06-15 | 2018-06-19 | Amazon Technologies, Inc. | Modifying user experiences |
US10296580B1 (en) * | 2015-09-18 | 2019-05-21 | Amazon Technologies, Inc. | Delivering parsed content items |
US10127210B1 (en) | 2015-09-25 | 2018-11-13 | Amazon Technologies, Inc. | Content rendering |
US10601894B1 (en) * | 2015-09-28 | 2020-03-24 | Amazon Technologies, Inc. | Vector-based encoding for content rendering |
US10241983B1 (en) | 2015-09-28 | 2019-03-26 | Amazon Technologies, Inc. | Vector-based encoding for content rendering |
US10691750B1 (en) | 2015-09-28 | 2020-06-23 | Amazon Technologies, Inc. | Browser configured to efficiently store browsing session state |
US10534852B2 (en) | 2015-09-30 | 2020-01-14 | Samsung Display Co., Ltd. | Display system and virtual web device in the cloud |
US10348797B1 (en) | 2015-12-15 | 2019-07-09 | Amazon Technologies, Inc. | Network browser configuration |
US10341345B1 (en) | 2015-12-15 | 2019-07-02 | Amazon Technologies, Inc. | Network browser configuration |
CN105843603B (en) * | 2016-03-17 | 2019-08-16 | 广州爱九游信息技术有限公司 | The method and device of graphics process |
DE102016206046A1 (en) * | 2016-04-12 | 2017-10-12 | Siemens Aktiengesellschaft | Device and method for processing a binary-coded structure document |
CN107015870B (en) | 2016-09-19 | 2020-11-03 | 创新先进技术有限公司 | Method and device for realizing communication between web page and local application and electronic equipment |
WO2018058614A1 (en) * | 2016-09-30 | 2018-04-05 | 深圳市华傲数据技术有限公司 | Page rendering method and apparatus |
CN110235122B (en) * | 2016-12-21 | 2023-07-07 | 开文公司 | System and method for converting web content into reusable templates and components |
US10795977B2 (en) * | 2017-08-24 | 2020-10-06 | Oracle International Corporation | Digital asset traceability and assurance using a distributed ledger |
US10977221B2 (en) * | 2017-10-20 | 2021-04-13 | Hewlett Packard Enterprise Development Lp | Encoding of data formatted in human-readable text according to schema into binary |
CN107682829A (en) * | 2017-10-23 | 2018-02-09 | 深圳市沃特沃德股份有限公司 | The data transmission method and device of mobile terminal |
CN111803950B (en) * | 2019-04-26 | 2022-08-16 | 厦门雅基软件有限公司 | Data processing method and device for web game, electronic equipment and storage medium |
CN110262788B (en) * | 2019-06-24 | 2020-08-28 | 北京三快在线科技有限公司 | Page configuration information determination method and device, computer equipment and storage medium |
US10922476B1 (en) * | 2019-12-13 | 2021-02-16 | Microsoft Technology Licensing, Llc | Resource-efficient generation of visual layout information associated with network-accessible documents |
CN112231619A (en) * | 2020-10-15 | 2021-01-15 | 北京三快在线科技有限公司 | Conversion method, conversion device, electronic equipment and storage medium |
CN112801248B (en) * | 2021-02-04 | 2023-02-28 | 西安热工研究院有限公司 | Non-contact page data transmission method suitable for water-electricity SCADA system |
CN113792536A (en) * | 2021-09-18 | 2021-12-14 | 深信服科技股份有限公司 | Page generation method, page generation system, storage medium and electronic equipment |
Family Cites Families (40)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US5504891A (en) * | 1991-10-17 | 1996-04-02 | Ricoh Company, Ltd. | Method and apparatus for format conversion of a hierarchically structured page description language document |
US5506985A (en) * | 1991-10-17 | 1996-04-09 | Ricoh Company, Ltd. | Method and apparatus for format conversion of a hierarchically structured page description language document |
US6671853B1 (en) * | 1999-07-15 | 2003-12-30 | International Business Machines Corporation | Method and system for selectively streaming markup language documents |
US7007105B1 (en) * | 2001-01-11 | 2006-02-28 | Remote Knowledge, Inc. | Method and system for improving data transmission and storage of markup language documents |
EP1360772A2 (en) * | 2001-01-26 | 2003-11-12 | Pogo Mobile Solutions Limited | A method of data compression |
WO2002076058A2 (en) | 2001-03-21 | 2002-09-26 | Research In Motion Limited | Method and apparatus for providing content to media devices |
EP1374525B1 (en) * | 2001-03-21 | 2013-11-06 | BlackBerry Limited | Method and apparatus for providing content to media devices |
US20020199014A1 (en) * | 2001-03-26 | 2002-12-26 | Accton Technology Corporation | Configurable and high-speed content-aware routing method |
US6928488B1 (en) * | 2001-06-27 | 2005-08-09 | Microsoft Corporation | Architecture and method for serialization and deserialization of objects |
US20040110490A1 (en) | 2001-12-20 | 2004-06-10 | Steele Jay D. | Method and apparatus for providing content to media devices |
CN2512277Y (en) * | 2001-12-29 | 2002-09-25 | 周云亭 | Movable sole sleeve joint slippers |
US7299411B2 (en) * | 2002-09-27 | 2007-11-20 | Liberate Technologies | Providing a presentation engine adapted for use by a constrained resource client device |
CA2414053A1 (en) * | 2002-12-09 | 2004-06-09 | Corel Corporation | System and method for manipulating a document object model |
US7627814B1 (en) * | 2004-01-14 | 2009-12-01 | Microsoft Corporation | Hierarchical bit stream markup compilation and rendering |
US7647415B1 (en) * | 2004-02-25 | 2010-01-12 | Sun Microsystems, Inc. | Dynamic web services stack |
US7769904B2 (en) * | 2004-06-09 | 2010-08-03 | L-3 Communications Integrated Systems L.P. | Extensible binary mark-up language for efficient XML-based data communications and related systems and methods |
US7613780B2 (en) * | 2005-06-17 | 2009-11-03 | Microsoft Corporation | Optimizing content retrieval over a data network |
CA2513010A1 (en) * | 2005-07-22 | 2007-01-22 | Research In Motion Limited | A method for detecting state changes between data stored in a first computing device and data retrieved from a second computing device |
US7739586B2 (en) * | 2005-08-19 | 2010-06-15 | Microsoft Corporation | Encoding of markup language data |
US7716577B2 (en) * | 2005-11-14 | 2010-05-11 | Oracle America, Inc. | Method and apparatus for hardware XML acceleration |
US20080222273A1 (en) * | 2007-03-07 | 2008-09-11 | Microsoft Corporation | Adaptive rendering of web pages on mobile devices using imaging technology |
US20080270890A1 (en) * | 2007-04-24 | 2008-10-30 | Stern Donald S | Formatting and compression of content data |
US8370424B2 (en) * | 2007-06-22 | 2013-02-05 | Aol Inc. | Systems and methods for caching and serving dynamic content |
WO2009050345A2 (en) * | 2007-07-27 | 2009-04-23 | Goojet | Method and device for creating computer applications |
US20090063530A1 (en) * | 2007-09-04 | 2009-03-05 | Lg Telecom Ltd. | System and method for mobile web service |
KR101424261B1 (en) * | 2007-09-04 | 2014-07-31 | 주식회사 엘지유플러스 | Method for prviding mobile web service and a mobile phone for excuting the method |
US8352509B2 (en) * | 2007-12-19 | 2013-01-08 | International Business Machines Corporation | Methods, systems, and computer program products for accessing a multi-format data object |
US7609179B2 (en) * | 2008-01-08 | 2009-10-27 | International Business Machines Corporation | Method for compressed data with reduced dictionary sizes by coding value prefixes |
US8595710B2 (en) | 2008-03-03 | 2013-11-26 | Microsoft Corporation | Repositories and related services for managing localization of resources |
US20100050089A1 (en) * | 2008-08-20 | 2010-02-25 | Company 100, Inc. | Web browser system of mobile communication terminal, using proxy server |
US8818959B2 (en) * | 2008-12-02 | 2014-08-26 | Adobe Systems Incorporated | Virtual embedding of files in documents |
US20110276659A1 (en) * | 2010-04-05 | 2011-11-10 | Electronics And Telecommunications Research Institute | System and method for providing multimedia service in a communication system |
WO2012033271A1 (en) * | 2010-09-07 | 2012-03-15 | 에스케이텔레콤 주식회사 | System for displaying cached webpages, a server therefor, a terminal therefor, a method therefor and a computer-readable recording medium on which the method is recorded |
CN102487402B (en) * | 2010-12-03 | 2014-03-19 | 腾讯科技（深圳）有限公司 | Method, device and system for realizing webpage rendering by server side |
US20120151321A1 (en) * | 2010-12-09 | 2012-06-14 | Schneider Electric USA, Inc. | System for Generating Websites for Products with an Embedded Processor |
US8880538B1 (en) * | 2011-02-08 | 2014-11-04 | Google Inc. | Electronic document encoding |
CN102111455A (en) * | 2011-03-11 | 2011-06-29 | 深圳市五巨科技有限公司 | Method and system for shortening network accessing time of mobile terminal |
US8539338B2 (en) * | 2011-04-11 | 2013-09-17 | Microsoft Corporation | Cooperative rendering cache for mobile browser |
GB2492096B (en) * | 2011-06-21 | 2014-02-19 | Canon Kk | Method for processing a structured document to render, and corresponding processor |
US20130212559A1 (en) * | 2012-02-14 | 2013-08-15 | Appgyver Oy | Method and System for Developing Applications for Portable Communication Devices |
-
2013
- 2013-03-08 WO PCT/US2013/029879 patent/WO2013138179A1/en active Application Filing
- 2013-03-08 US US13/790,285 patent/US9298679B2/en active Active
- 2013-03-08 EP EP13761758.5A patent/EP2825978B1/en active Active
- 2013-03-08 CN CN201380014036.9A patent/CN104185845B/en active Active
- 2013-03-08 CN CN201711105211.1A patent/CN107832277B/en active Active
-
2016
- 2016-02-18 US US15/046,601 patent/US10360291B2/en active Active
-
2019
- 2019-07-22 US US16/518,482 patent/US11194557B2/en active Active
Cited By (3)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US11308060B2 (en) * | 2019-01-29 | 2022-04-19 | Beijing Baidu Netcom Science And Technology Co., Ltd. | Method, apparatus, device and storage medium for managing index |
CN113703750A (en) * | 2021-10-29 | 2021-11-26 | 成都中科合迅科技有限公司 | Dynamic flow generation method based on custom algorithm |
US11960561B2 (en) * | 2022-07-28 | 2024-04-16 | Siteimprove A/S | Client-side generation of lossless object model representations of dynamic webpages |
Also Published As
Publication number | Publication date |
---|---|
US20160239469A1 (en) | 2016-08-18 |
CN107832277B (en) | 2021-12-24 |
US10360291B2 (en) | 2019-07-23 |
US20130246906A1 (en) | 2013-09-19 |
EP2825978B1 (en) | 2021-06-30 |
EP2825978A4 (en) | 2015-12-23 |
CN107832277A (en) | 2018-03-23 |
US9298679B2 (en) | 2016-03-29 |
CN104185845B (en) | 2017-12-12 |
WO2013138179A8 (en) | 2014-09-12 |
WO2013138179A1 (en) | 2013-09-19 |
EP2825978A1 (en) | 2015-01-21 |
CN104185845A (en) | 2014-12-03 |
US11194557B2 (en) | 2021-12-07 |
Similar Documents
Publication | Publication Date | Title |
---|---|---|
US11194557B2 (en) | System and method providing a binary representation of a web page | |
Hickson et al. | Html5 | |
US7500017B2 (en) | Method and system for providing an XML binary format | |
US8620995B2 (en) | Method, computer program, transcoding server and computer system for modifying a digital document | |
US8769050B2 (en) | Serving font files in varying formats based on user agent type | |
US8769405B2 (en) | Reduced glyph font files | |
US7669120B2 (en) | Method and system for encoding a mark-up language document | |
US7895598B2 (en) | Page and device-optimized cascading style sheets | |
US20080040659A1 (en) | Markup Language Translator System | |
US20130159839A1 (en) | Semantic compression of cascading style sheets | |
US20140207826A1 (en) | Generating xml schema from json data | |
KR20070086019A (en) | Form related data reduction | |
EP1678629B1 (en) | Extensible framework for handling different mark up language parsers and generators in a computing device | |
CN102916991B (en) | Method, system and device for transmitting data | |
US20070168868A1 (en) | Method and system for integrating calculation and presentation technologies | |
CN110688118A (en) | Webpage optimization method and device | |
US8862737B2 (en) | Application integration of network data based on resource identifiers | |
US10956659B1 (en) | System for generating templates from webpages | |
US8949375B2 (en) | Data processing of media file types supported by client devices | |
CN113139145B (en) | Page generation method and device, electronic equipment and readable storage medium | |
Butler | Using capability classes to classify and match CC/PP and UAProf profiles | |
AU2019201944A1 (en) | Translating xml with multiple namespace extensions | |
Zhu et al. | On an enhancement of XML applied for mobile E-commerce |
Legal Events
Date | Code | Title | Description |
---|---|---|---|
FEPP | Fee payment procedure |
Free format text: ENTITY STATUS SET TO UNDISCOUNTED (ORIGINAL EVENT CODE: BIG.); ENTITY STATUS OF PATENT OWNER: LARGE ENTITY |
|
AS | Assignment |
Owner name: GOOGLE LLC, CALIFORNIAFree format text: CHANGE OF NAME;ASSIGNOR:GOOGLE INC.;REEL/FRAME:049854/0318Effective date: 20170929Owner name: GOOGLE INC., CALIFORNIAFree format text: ASSIGNMENT OF ASSIGNORS INTEREST;ASSIGNOR:HAMON, DOMINIC;REEL/FRAME:049848/0930Effective date: 20120425 |
|
STPP | Information on status: patent application and granting procedure in general |
Free format text: DOCKETED NEW CASE - READY FOR EXAMINATION |
|
STPP | Information on status: patent application and granting procedure in general |
Free format text: NON FINAL ACTION MAILED |
|
STPP | Information on status: patent application and granting procedure in general |
Free format text: NON FINAL ACTION MAILED |
|
STPP | Information on status: patent application and granting procedure in general |
Free format text: RESPONSE TO NON-FINAL OFFICE ACTION ENTERED AND FORWARDED TO EXAMINER |
|
STPP | Information on status: patent application and granting procedure in general |
Free format text: FINAL REJECTION MAILED |
|
STPP | Information on status: patent application and granting procedure in general |
Free format text: RESPONSE AFTER FINAL ACTION FORWARDED TO EXAMINER |
|
STPP | Information on status: patent application and granting procedure in general |
Free format text: NOTICE OF ALLOWANCE MAILED -- APPLICATION RECEIVED IN OFFICE OF PUBLICATIONS |
|
STPP | Information on status: patent application and granting procedure in general |
Free format text: PUBLICATIONS -- ISSUE FEE PAYMENT VERIFIED |
|
STCF | Information on status: patent grant |
Free format text: PATENTED CASE |
|
CC | Certificate of correction |