CN103959243A - Methods and apparatus for extensions to directed graphs with minimal and maximal constraints are encoded by arcs in opposite directions - Google Patents
Methods and apparatus for extensions to directed graphs with minimal and maximal constraints are encoded by arcs in opposite directions Download PDFInfo
- Publication number
- CN103959243A CN103959243A CN201280048261.XA CN201280048261A CN103959243A CN 103959243 A CN103959243 A CN 103959243A CN 201280048261 A CN201280048261 A CN 201280048261A CN 103959243 A CN103959243 A CN 103959243A
- Authority
- CN
- China
- Prior art keywords
- edge
- mesh lines
- constraint
- rectangular module
- node
- Prior art date
- Legal status (The legal status is an assumption and is not a legal conclusion. Google has not performed a legal analysis and makes no representation as to the accuracy of the status listed.)
- Granted
Links
Classifications
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F9/00—Arrangements for program control, e.g. control units
- G06F9/06—Arrangements for program control, e.g. control units using stored programs, i.e. using an internal store of processing equipment to receive or retain programs
- G06F9/44—Arrangements for executing specific programs
- G06F9/451—Execution arrangements for user interfaces
Abstract
Disclosed are apparatus and methods for generating displays based on a layout. A layout is received that specifies a set of rectangular components within a container rectangle. Each rectangular component has a size. A plurality of grid lines is determined from the layout. Each rectangular component is associated with at least two grid lines that are based on the size of the rectangular component. A system of constraints is generated that includes a minimum constraint and a maximum constraint. Each constraint is related to at least two grid lines of the plurality of grid lines. The minimum and maximum constraints respectively specify a minimum and a maximum value between at least two grid lines. The system of constraints is solved to determine a location for each grid line. A display of the rectangular components is generated based on the locations of the grid lines.
Description
The cross reference of related application
The application requires the U.S. Patent application 13/566 of submitting on August 3rd, 2012, the right of priority of No. 749, the U.S. Provisional Application 61/541 that the title that this U.S. Patent application requires to submit on September 30th, 2011 is " Apparatus and Methods for Efficient Layout of Components on a User-Interface ", the right of priority of No. 853, is incorporated to the content of these U. S. applications for all objects here by reference completely.
Background technology
The many modern computer application that operate on computing equipment provide graphic user interface to come for user interactions.The operating system of controlling computing equipment provides the support of certain type to allow to utilize the application of operating system to have common the look and feel with Computer Aided Design user interface to these application continually.
It is " layout manager " that operating system offers the exemplary tools that application helps design user interface, it is configured to receive " layout " (layout), in other words for by user interface can with one or more relatively large rectangle be divided into can be by the series of instructions of of spatial separation group less rectangle.Relatively large rectangle is commonly called " container " (container), and these less rectangles are commonly called " assembly " (component).Conventionally, layout manager is realized the placement strategy being associated with container.
Summary of the invention
In first aspect, computing equipment receives layout, and this layout is configured at least one group of rectangular module in specified containers rectangle.Each rectangular module has at least one size at least one dimension.Computing equipment is determined many mesh lines from layout.At least two mesh lines in many mesh lines of each rectangular module in this group rectangular module and this are associated.These at least two mesh lines are at least one sizes based on this rectangular module.Computing equipment generates the system of constraint, and wherein each constraint of the system of constraint is relevant at least two mesh lines in many mesh lines.Computing equipment solves the system of constraint, thinks that every mesh lines in many mesh lines determines the position of this mesh lines.The position of computing equipment based on mesh lines generates the demonstration of at least some rectangular module in this group rectangular module.
In second aspect, computing equipment receives user interface layout, and user interface layout is configured to specify at least the first rectangular module and the second rectangular module, both in container rectangle.The first rectangular module has the first size in level or vertical dimensions.The second rectangular module has the second size in level or vertical dimensions.Computing equipment is determined many mesh lines based on user interface layout.The first rectangular module is associated with first group of at least two mesh lines in many mesh lines, and the second rectangular module is associated with second group of at least two mesh lines in many mesh lines.Computing equipment can generate the system of constraint, and wherein the first constraint in the system of constraint is relevant to first group of at least two mesh lines, and second in the system of constraint retrains relevant to second group of at least two mesh lines.The system that computing equipment solves constraint thinks that each mesh lines in first group and the second networking ruling determine each mesh lines position separately.Computing equipment can generate and comprise that the user interface of the first and second rectangular module shows based on each mesh lines position separately.Computing equipment can show that this user interface shows.
In the third aspect, computing equipment receives layout, and this layout is configured at least one group of rectangular module in specified containers rectangle.Each rectangular module has at least one size at least one dimension.Computing equipment is determined many mesh lines from layout.At least two mesh lines in many mesh lines of each rectangular module in this group rectangular module and this are associated.These at least two mesh lines at least one size based on this rectangular module.Computing equipment generates the system of constraint, and wherein each constraint of the system of constraint is relevant at least two mesh lines in many mesh lines.Computing equipment generates the figure that comprises multiple nodes and multiple edges.Each node is associated with nodal value.Multiple nodes are corresponding to many mesh lines, and multiple edge is corresponding to the system of constraint.Computing equipment carries out topological sorting to multiple edges.Computing equipment by utilization be configured in conjunction with the Bel that operates through multiple edges of topological sorting graceful-variant of Ford (Bellman-Ford) algorithm solves single source path length issue and determines the position of mesh lines for figure.The position of computing equipment based on mesh lines generates the demonstration of at least some rectangular module in this group rectangular module.
In fourth aspect, computing equipment receives layout, and this layout is configured at least one group of rectangular module in specified containers rectangle, and wherein the each rectangular module in this group rectangular module has at least one size at least one dimension.This group rectangular module comprises space components, and this space components is configured to invisible and is configured to user interface event not reacted.Computing equipment is determined many mesh lines from layout.At least two mesh lines in many mesh lines of each rectangular module in this group rectangular module and this are associated.These at least two mesh lines are at least one sizes based on this rectangular module.Computing equipment generates the system of constraint, and wherein each constraint of the system of constraint is relevant at least two mesh lines in many mesh lines.The system that computing equipment solves constraint thinks that every mesh lines in many mesh lines determines the position of this mesh lines.The position of computing equipment based on mesh lines generates the demonstration of at least some rectangular module in this group rectangular module.
In aspect the 5th, computing equipment receives layout, and this layout is configured at least one group of rectangular module in specified containers rectangle.Each rectangular module in this group rectangular module has at least one size at least one dimension.Computing equipment is determined many mesh lines from layout.At least two mesh lines in many mesh lines of each rectangular module in this group rectangular module and this are associated.Article at least two, mesh lines is at least one size based on this rectangular module.Computing equipment generates the system of constraint, and the system of constraint comprises one or more normal sequence constraints.Each constraint of the system of constraint is relevant at least two mesh lines in many mesh lines.The normal sequence of many mesh lines is specified in one or more normal sequence constraints.The system that computing equipment solves constraint thinks that every mesh lines in many mesh lines determines the primary importance of this mesh lines.Computing equipment is identified at least one the approximately intrafascicular normal sequence that can loosen constraint of one or more normal sequences.The system of computing equipment based on loosening normal sequence constraint that at least one can loosen and solve constraint thinks that every mesh lines in many mesh lines determines the second place of this mesh lines.For at least one mesh lines being relaxed in many mesh lines, the second place is different from primary importance.The second place of computing equipment based on mesh lines generates the demonstration of at least some rectangular module in this group rectangular module.Computing equipment shows this demonstration.
In aspect the 6th, receive layout at computing equipment place.This layout is configured to one group of rectangular module in specified containers rectangle.Each rectangular module has at least one size at least one dimension, and is configured with weight parameter.The weight parameter of each rectangular module based on this rectangular module is classified as flexibly or is inflexible.Computing equipment can be determined many mesh lines from layout.At least two mesh lines in many mesh lines of each rectangular module in this group rectangular module and this are associated.These at least two mesh lines are at least one sizes based on this rectangular module.Computing equipment can generate the system of constraint, and wherein each constraint of the system of constraint is relevant at least two mesh lines in many mesh lines.The system that computing equipment can solve constraint thinks that every mesh lines in many mesh lines determines the position of this mesh lines.Computing equipment can the position based on mesh lines generates the demonstration of at least some rectangular module in this group rectangular module.
In aspect the 7th, computing equipment receives layout, and this layout is configured at least one group of rectangular module in specified containers rectangle.Each rectangular module in this group rectangular module has at least one size at least one dimension.Computing equipment is determined many mesh lines from layout.At least two mesh lines in many mesh lines of each rectangular module in this group rectangular module and this are associated.These at least two mesh lines are at least one sizes based on this rectangular module.Computing equipment generates the system of constraint, and the system of constraint comprises least commitment and maximum constrained.Each constraint of the system of constraint is relevant at least two mesh lines in described many mesh lines.The minimum value between at least two mesh lines is specified in least commitment, and maximum constrained is specified the maximal value between at least two mesh lines.The system that computing equipment solves constraint thinks that every mesh lines in many mesh lines determines the position of this mesh lines.The position of computing equipment based on mesh lines generates the demonstration of at least some rectangular module in this group rectangular module.
In eight aspect, computing equipment receives layout, and this layout is configured at least one group of rectangular module in specified containers rectangle.Each rectangular module in this group rectangular module has at least one size at least one dimension.Computing equipment is determined many mesh lines from layout.At least two mesh lines in many mesh lines of each rectangular module in this group rectangular module and this are associated.These at least two mesh lines are at least one sizes based on this rectangular module.Computing equipment generates the system of constraint.Each constraint of the system of constraint is relevant at least two mesh lines in many mesh lines.The system of constraint comprises inconsistent constraint.Generation has the figure at multiple nodes and multiple edges.Each node is associated with nodal value.Multiple nodes are corresponding to many mesh lines.Multiple edges are corresponding to the system of constraint.The system that the variant of computing equipment utilization is configured to the Bel that operates in conjunction with inconsistent constraint graceful-Ford algorithm solves constraint is to determine the position of mesh lines.The position of computing equipment based on mesh lines generates the demonstration of at least some rectangular module in this group rectangular module.
Those of ordinary skill in the art are by reading following describe in detail and in due course with reference to accompanying drawing, will know these and other aspect, advantage and alternative.In addition, should be appreciated that unrestriced mode illustrates claimed theme with example in the description plan that in this summary of the invention part and the literature, other places provide.
Brief description of the drawings
Fig. 1 shows the distributing mode computer system structure according to example embodiment.
Fig. 2 A is according to the block diagram of the computing equipment of example embodiment.
Fig. 2 B shows the server system based on cloud according to example embodiment.
Fig. 3 shows the scene of the example user interface and have without mesh lines according to example embodiment.
Fig. 4 shows example grid, constraint and the figure corresponding with the example user interface of Fig. 3 according to example embodiment.
Fig. 5 shows the initial and final figure of the exemplary plot shown in Fig. 4 according to example embodiment.
Fig. 6 A and 6B show the example user interface of the value in the final figure based on Fig. 5 according to example embodiment.
Fig. 6 C, 6D and 6E show the highly constrained example user interface of the example user interface based on Fig. 3 according to example embodiment.
Fig. 7 A and 7B show another scene according to example embodiment, comprising the appointment of the scope of the value in example grid, and corresponding constraint, finally figure and user interface.
Fig. 8 is according to the process flow diagram of the method for example embodiment.
Fig. 9 is according to the process flow diagram of the method for example embodiment.
Figure 10 is according to the process flow diagram of the method for example embodiment.
Figure 11 is according to the process flow diagram of the method for example embodiment.
Figure 12 is according to the process flow diagram of the method for example embodiment.
Figure 13 is according to the process flow diagram of the method for example embodiment.
Figure 14 is according to the process flow diagram of the method for example embodiment.
Figure 15 is according to the process flow diagram of the method for example embodiment.
Embodiment
General introduction
Along with support computing application equipment type kind increase, design can support the challenge of the layout manager flexibly of these equipment also correspondingly to increase.For example, may wish that software application can operation rightly in dissimilar mobile phone, flat computer and/or Digital Television.
For example, but demonstration size and display resolution (, picture element density) that these equipment are supported may differ widely.Mobile phone can have from 208x208 following so little of the above so large display resolution of 960x640 (display resolution of m x n generally refers in the display screen support level direction on equipment n pixel in m pixel and vertical direction) here.Flat computer can be supported the following so little display resolution more than 1280x1024 from 768x480.Modern high definition digital television is supported many display resolutions, and some have exceeded 1920x1080.
Due to this great diversity of display resolution, so even likely promote to have consistent form in the subset of equipment using user interface layout be also challenging.Especially challenging is that design can be supported in the appropriate layout manager that shows user interface layout on the equipment with the small screen resolution more.
In some layout managers, layout's strategy relates to specifies and determines subsequently: (i) the level in assembly and/or vertical alignment, and (ii) fixing or changeable " dirigibility " of the assembly in container.The size that the dirigibility of assembly can be used for indication component can be adjusted to assembly is fitted in to the degree in the demonstration of assembly at least one dimension.Size, alignment and the requirement on flexibility of the each assembly of layout manager in subsequently can collection container rectangle produce user interface with the position based on these assemblies and size.Then, application can utilize the user interface of layout to allow the remainder of user and application mutual.
It is that a series of constraints that the one or more rectangular module in container rectangle are specified generate user interface demonstration that the disclosure relates to based on solving by layout.Layout can logically be divided into row and column by container rectangle, and the rectangular module comprising is arranged along these row and columns.In general, can be by component definition occupy container rectangle more than a line and/or more than row, as long as these row and columns adjoin.The appointment of this assembly is normally according to initial row or column index(index) and span(span) indicate---Z-axis is specified with line index and row span, and transverse axis is specified with column index and row span.
" cell group " is defined as being started by start(along X-axis and Y-axis) and end(finish) index delimit one group of unit: four numerals altogether.For example, if want an assembly that occupies the whole top line of the user interface that is divided into 5 row and 5 row, can utilize following four numerals to specify the cell group of top line at cloth intra-office:
RowStart(begin column)=0
RowEnd(end line)=1
ColumnStart(begin column)=0
ColumnEnd(end column)=5
In disclosed layout system, these numerals can identify " mesh lines " that container rectangle be divided into row and column.Can specify these row and columns according to start index and span or a pair of start and end index.For example, in the time that four in definition container is listed as, the mesh lines that defines these four row can be called as X0, X1, X2, X3 and X4.Similarly, the mesh lines of definition four lines is labeled for Y0, Y1, Y2, Y3 and Y4.Assembly and container rectangle all can utilize these to mark to define; For example, container rectangle has from X0 and crosses the row of X4 and cross the row of Y4 from Y0.
The index of the mesh lines of mark row can occur checking in region by " normal sequence "; , X0 → X1 → X2 → X3 → X4.The corresponding normal sequence condition of row is Y0 → Y1 → Y2 → Y3 → Y4.But, abandon normal sequence condition for some assemblies and can allow mesh lines to move freely and produce a strong much bigger system in part or all of the space of receptor rectangle control.It makes to have negative line height and/or column width.For example, specify negative line height and/or column width can make layout system can find the layout solution of adaptive its content better for invisible assembly.
Utilize mesh lines to carry out assignment component and container rectangle has allowed to be transformed into a series of constraints for for mesh lines specified pixel position.For example, if an assembly is specified by mesh lines X1 to X3 in x dimension and must is just in time that 200 pixels are wide, the corresponding constraint of specifying in x dimension for this assembly is X3 – X1=200.If this assembly is specified by mesh lines Y2 and Y3 in y dimension and highly must, 150 to 200 pixels, can carry out nominated bank's condition with two corresponding constraints: Y2 – Y3 >=-200 and Y3-Y2 >=150.
In certain embodiments, can specify and there is a dimension or assembly and container more than two dimensions.But, in each dimension, can define starting position and the end position in this dimension by a pair of numeral; Thereby, specify the assembly of N dimension, can use 2N numeral.
Then can utilize linear programming or other algorithms to solve this group constraint.In one embodiment, this group constraints conversion can be become to corresponding figure.Can solve " single source path length issue " (single-source path-length problem) to determine the position of every mesh lines with respect to source mesh lines for this figure.The example of single source path length issue comprises " single source shortest route problem " of the shortest path between other nodes of finding out in single source node and figure and finds out " single source longest path problem " of the longest path between other nodes in single source node and figure.Layout system can come with these positions the position of the mesh lines in specified containers rectangle, and utilizes the mesh lines of location to generate at least some the demonstration in the assembly in container rectangle.
A kind of algorithm that solves single source path length issue be Bel graceful-Ford (Bellman-Ford) algorithm.In aspect one of the present disclosure, Bel disclosed herein is graceful-and a kind of implementation of Ford algorithm variations can solve single source path length issue with the average operating time of O (| E|), wherein | in this figure of E|=, retrain the number at corresponding arc (edge) with this group.In some particular aspects, figure can be digraph.In other particular aspects, Bel disclosed herein is graceful-and the implementation of Ford algorithm variations can identify and remove the arc that represents inactivce constraints in figure.
Layout system is accepted the simplification of layout and is specified, and these are simplified appointment and do not require the clearly appointment to dirigibility constraint.(described above, the size that the dirigibility of assembly refers to assembly can be adjusted how many to assembly is fitted in the demonstration of assembly at least one dimension).In declarative system and traditional OO system, user can select not state completely gravity conventionally.Disclosed system can utilize undefined state to carry out the dirigibility of inference component in a row or column.If component definition level or vertical alignment, can think that the dirigibility of assembly is flexibly, because defined for additional space what can occur.Not clearly the alignment of definition " gravity " or horizontal/vertical in the situation that, the size that system can be made contrary deduction: the assembly that the size of unit is comprised by it---for example text, button, demonstration etc.---is fixed, from but inflexible.As Space(described herein space) do not specify in big or small another kind of situation for given assembly assembly, can think that given assembly is flexibly.
Even in order also further to infer the dirigibility of row and column in the situation that row and column comprises multiple assembly, can dispose following two abbreviation rules:
Rule 1: parallel element (for example, the element aliging in row) is flexibly, if all parallel elements are all to talk about flexibly.
Rule 2: series of elements (for example, the element in a line) is flexibly, if one of this series of elements is to talk about flexibly.By removing the clearly appointment to dirigibility, layout manager has been simplified user interface designer and the appointment of instrument to layout.
Layout manager allows to loosen for the mesh lines being associated with invisible assembly the normal sequence condition of row and column.Even the loosening of normal sequence condition can make in some cases when desired under container squareness ratio normal sequence condition more hour also can complete demonstration user interface.In addition, here, in disclosed embodiment, the efficient algorithm of layout manager utilization promptly operates, thereby has enabled the size of adjustment rapidly of user interface and redrawn system operation.
Sample data network
Forward accompanying drawing to, Fig. 1 shows and is configured to the server apparatus 108,110 of communicating by letter with 104c with programmable device 104a, 104b via network 106.Network 106 can be corresponding to the network that is configured to provide communication path between the computing equipment of networking of LAN, wide area network (wide area network, WAN), company's Intranet, public the Internet or any other type.Network 106 also can be corresponding to the combination of one or more LAN, WAN, company's Intranet and/or public the Internet.
Although Fig. 1 only shows three programmable devices, Distributed Application architecture can be tens of, hundreds of or thousands of programmable device services.In addition, programmable device 104a, 104b and 104c(or any extra programmable device) can be the computing equipment of any kind, for example common laptop computer, desktop computer, the network terminal, Wireless Telecom Equipment (for example cell phone or smart phone), etc.In certain embodiments, programmable device 104a, 104b and 104c can be exclusively used in the design and use of software application.In other embodiments, programmable device 104a, 104b and 104c can be the multi-purpose computers that is configured to carry out multiple tasks and does not need to be exclusively used in SDK (Software Development Kit).
Server apparatus 108,110 can be configured to carry out one or more services according to the request of programmable device 104a, 104b and/or 104c.For example, server apparatus 108 and/or 110 can provide content to programmable device 104a-104c.Content can include but not limited to webpage, hypertext, script, binary data, image, audio frequency and/or video such as the software of compiling.Content can comprise content compression and/or unpressed.Content can encrypted and/or deciphering.The content of other types is also possible.
As another example, server apparatus 108 and/or 110 can provide the access to the software for database, search, calculating, figure, audio frequency, video, the utilization of WWW/the Internet and/or other functions to programmable device 104a-104c.Many other examples of server apparatus are also possible.
Computing equipment architecture
Fig. 2 A is the block diagram of the computing equipment (for example system) according to example embodiment.Particularly, the computing equipment 200 shown in Fig. 2 A can be configured to carry out the one or more one or more functions in server apparatus 108,110, network 106 and/or programmable device 104a, 104b and 104c.Computing equipment 200 can comprise Subscriber Interface Module SIM 201, network communication interface module 202, one or more processor 203 and data storage device 204, and all these can link together via system bus, network or other connection mechanisms 205.
Subscriber Interface Module SIM 201 can operate to external user input-output apparatus and sends and/or receive data from external user input-output apparatus.For example, Subscriber Interface Module SIM 201 can be configured to send and/or receive data from user input device to user input device, and user input device is for example keyboard, keypad, touch-screen, computer mouse, trace ball, operating rod, camera, sound identification module and/or other similar equipment.Subscriber Interface Module SIM 201 also can be configured to provide output to user's display device, user's display device is for example one or more cathode-ray tube (CRT)s (cathode ray tube, CRT), liquid crystal display (liquid crystal display, LCD), light emitting diode (light emitting diode, LED), use other similar devices of the display, printer, bulb of digital light processing (digital light processing, DLP) technology and/or known or later exploitation now.Subscriber Interface Module SIM 201 also can be configured to generate can listen output, for example loudspeaker, speaker receptacle, audio output port, audio output apparatus, earphone and/or other similar equipment.Especially, the computing equipment 200 with Subscriber Interface Module SIM 201 can be used for showing user interface, and this user interface comprises the one or more assemblies in container rectangle.
Network communication interface module 202 can comprise one or more wave points 207 and/or one or more wireline interface 208, and these wave points 207 and wireline interface 208 can be configured to via network service, example network 106 as shown in Figure 1.Wave point 207 can comprise one or more radio transmitters, receiver and/or transceiver, for example bluetooth transceiver, Zigbee transceiver, Wi-Fi transceiver, WiMAX transceiver and/or can be configured to the wireless transceiver via other similar type of wireless communication.Wireline interface 208 can comprise one or more wired transmitters, receiver and/or transceiver, for example ethernet transceiver, USB (universal serial bus) (Universal Serial Bus, USB) transceiver or can be configured to the similar transceiver that connects to communicate by letter via twisted-pair feeder, concentric cable, optical fiber link or the similar physical to cable network.
In certain embodiments, network communication interface module 202 can be configured to provide reliable, safe and/or certified communication.For each communication described herein, can be provided for guaranteeing the information (guaranteed message delivery) of reliable communication, (for example, packets/messages sequencing information, capsule header and/or afterbody, size/temporal information and the transmission authorization information such as CRC and/or parity values) may be provided as a part for message header and/or afterbody.Can utilize one or more cipher protocols and/or algorithm to be protected (for example coding or encryption) and/or deciphering/decoding to communication, these cipher protocols and/or algorithm are such as but not limited to being DES, AES, RSA, Diffie-Hellman and/or DSA.Except list here those also can protect (be then decrypted/decode) to communication with other cipher protocols and/or algorithm.
Processor 203 can comprise one or more general processors and/or one or more application specific processor (for example, digital signal processor, special IC, etc.).Processor 203 can be configured to carry out computer-readable program instructions 206a and/or other instructions as described herein of being included in data storage device 204.
Data storage device 204 can comprise one or more computer-readable recording mediums that can be read and/or access by least one processor 203.One or more computer-readable recording mediums can comprise volatibility and/or non-volatile storage components, for example optics, magnetic, organic or other storeies or disc memory device, and they can be all or part of integrated with at least one processor 203.In certain embodiments, data storage device 204 (for example can utilize single physical equipment, optics, magnetic, organic or other storeies or disk storage unit) realize, and in other embodiments, data storage device 204 can utilize two or more physical equipments to realize.
Data storage device 204 can comprise computer-readable program instructions 206a, actual environment 206b and data that may be extra.Actual environment 206b can store at least some in the data that used by one or more processes of software application and/or thread.In certain embodiments, data storage device 204 also can comprise the needed memory storage of at least a portion of carrying out method described herein and at least a portion of technology and/or the function of equipment described herein and network.
Based on the server of cloud
Fig. 2 B has described to be arranged as the calculating cluster 209a of the server system based on cloud, the network 106 of 209b, 209c according to example embodiment.Server apparatus 108 and/or 110 can be application and/or the programmed logic of service and/or the equipment based on cloud of data of storage based on cloud.In certain embodiments, server apparatus 108 and/or 110 can be the single computing equipment residing in single computing center.In other embodiments, server apparatus 108 and/or 110 can comprise the multiple computing equipments in single computing center, or is even being arranged in multiple computing equipments of multiple computing centers of multiple diverse geographic locations.For example, Fig. 1 described in server apparatus 108 and 110 each reside in different physical locations.
In certain embodiments, the data at server apparatus 108 and/or 110 places and service can be encoded as the computer-readable information that is stored in tangible computer-readable medium (or computer-readable recording medium) and can be accessed by programmable device 104a, 104b and 104c and/or other computing equipments.In certain embodiments, the data at server apparatus 108 and/or 110 places can be stored on single disc driver or other tangible storage mediums, or can realize on the multiple disk drives or other tangible storage mediums that are positioned at one or more diverse geographic locations.
Fig. 2 B has described the server system based on cloud according to example embodiment.In Fig. 2 B, the function of server apparatus 108 and/or 110 can be distributed in three and calculate between cluster 209a, 209b and 209c.Calculate cluster 209a and can comprise one or more computing equipment 200a, the cluster storage array 210a and the cluster routers 211a that are connected by local cluster network 212a.Similarly, calculate cluster 209b and can comprise one or more computing equipment 200b, the cluster storage array 210b and the cluster routers 211b that are connected by local cluster network 212b.Similarly, calculate cluster 209c and can comprise one or more computing equipment 200c, the cluster storage array 210c and the cluster routers 211c that are connected by local cluster network 212c.
In certain embodiments, calculate computing equipment, the cluster storage array of equal number and the cluster routers of equal number of each the had equal number in cluster 209a, 209b and 209c.But in other embodiments, each calculating cluster can have the cluster storage array of the computing equipment of different numbers, different numbers and the cluster routers of different numbers.The number of computing equipment, cluster storage array and cluster routers in each calculating cluster can be depending on the one or more calculation tasks that are assigned to each calculating cluster.
For example, in calculating cluster 209a, computing equipment 200a can be configured to carry out the various calculation tasks of electronic communication service device 112.In one embodiment, the various functions of electronic communication service device 112 can be distributed between one or more in computing equipment 200a, 200b and 200c.The computing equipment 200b and the 200c that calculate in cluster 209b and 209c can configure similarly with the computing equipment 200a calculating in cluster 209a.On the other hand, in certain embodiments, computing equipment 200a, 200b and 200c can be configured to carry out different functions.
In certain embodiments, the calculation task being associated with server apparatus 108 and/or 110 and the storage data delay of the network link between the computing equipment in processing power, the each calculating cluster of the processing requirements based on server apparatus 108 and/or 110, computing equipment 200a, 200b and 200c and between calculating cluster itself and/or other factors that can make contributions to the cost of whole system architecture, speed, fault-tolerant, elasticity, efficiency and/or other design objects at least partly, are distributed on computing equipment 200a, 200b and 200c.
Cluster storage array 210a, the 210b and the 210c that calculate cluster 209a, 209b and 209c can be data storage arrays, and these data storage arrays comprise and are configured to management reading and the disk array controller of write-access hard disk drive group.Disk array controller is combined and also can be configured to backup or the redundant copies of the data of storing in management cluster storage array individually or with its computing equipment separately, to be protected for hindering one or more computing equipments to access the disk drive of one or more cluster storage arrays or other cluster storage array faults and/or network failure.
To be distributed in mode on computing equipment 200a, 200b and the 200c that calculates cluster 209a, 209b and 209c similar with the function of server apparatus 108 and/or 110, and the comings and goings part of these assemblies and/or backup part can be distributed on cluster storage array 210a, 210b and 210c.For example, some cluster storage arrays can be configured to the data of storage server equipment 108, and the data that other cluster storage arrays can storage server equipment 110.In addition, some cluster storage arrays can be configured to store the backup version of the data of storing in other cluster storage arrays.
Cluster routers 211a, the 211b and the 211c that calculate in cluster 209a, 209b and 209c can comprise the networked devices that is configured to provide for calculating cluster internal and external communication.For example, the cluster routers 211a calculating in cluster 209a can comprise the exchange of one or more internets and routing device, these equipment are configured to provide: (i) between computing equipment 200a and cluster storage array 210a via the local area network communication of local cluster network 212a, and (ii) calculate cluster 209a and calculate between cluster 209b and 209c via the wan communication that is connected 213a to the wide area network of network 106.Cluster routers 211b and 211c can comprise the similar network equipment with cluster routers 211a, and cluster routers 211b and 211c can be, and to calculate that cluster 209b and 209c carry out with cluster routers 211a be to calculate the similar network savvy that cluster 209a carries out.
In certain embodiments, the configuration of cluster routers 211a, 211b and 211c its communication ability, local network 212a, 212b, the delay of 212c and delay, handling capacity and the cost of handling capacity, wide area network link 213a, 213b and 213c of the network equipment in the data communication requirement based on computing equipment and cluster storage array, cluster routers 211a, 211b and 211c and/or other factors that can make contributions to the cost of suitable system architecture, speed, fault-tolerant, elasticity, efficiency and/or other design objects at least partly.
Example layout
Fig. 3 has described the scene 300 about example user interface 310 according to an embodiment.Definition can utilize the example layout of the user interface 310 that computing equipment such as computing equipment 200 shows shown in following table 1.
Table 1
Table 1 is extending mark language (eXtended Markup Language, the XML) document that definition is called as the layout of " GridLayout " (grid layout).Usually, XML document comprises zero or more daughter element of root element and root element.XML root element or daughter element comprise at least one label, and can have label, content and the end-tag of beginning.Start label and there is <tag[attrib1=" value ", [attrib2=" value2 " ... ] form of >, wherein label (tag) is XML() title of element, and attrib1 and attrib2 are amendments and/or the son about XML(are provided) optional attribute of the information of element.Content starts after starting label.End-tag delimited the end of content, and be conventionally represented as </tag>.
GridLayout root element can be used for defining the user interface of utilizing mesh lines placing modules in grid rectangle.The GridLayout root element of table 1 starts to illustrate separately in following table 1.1 with end-tag.
Table 1.1
As shown in table 1.1, GridLayout starts label and specifies XML NameSpace via URL(uniform resource locator) (Uniform Resource Locator, URL), and specifies several parameters.These parameters comprise the parameter that is used to specify the following: layout width and height, acquiescence back gauge, alignment pattern, row order retain and column number.Row order retention parameter is set as equaling " vacation " and shows to allow layout manager to loosen normal sequence constraint for the row of layout under certain conditions.In the example of table 1 and table 1.1, the number of row is set to 4.In other embodiments, can specify the part of more or less parameter as GridLayout element.GridLayout end-tag illustrates and is replicated to the footline of table 1.1 in the footline of table 1.
Starting at GridLayout between label and end-tag is content, and it has defined the daughter element of GridLayout element.In the example shown in table 1, GridLayout root element has nine daughter elements: four TextView daughter elements, two EditText daughter elements, two Button daughter elements and a Space daughter element.For simplicity, table 1.1 has been replaced these daughter elements with suspension points.In some instances, for example, in user interface 310, GridLayout element can be used for the attribute of the container rectangle at designated user interface, and the daughter element of GridLayout element can be used for the attribute of the assembly at designated user interface.
TextView daughter element can be used for specifying in the text that for example, will show in user interface (user interface 310).The one TextView daughter element of the GridLayout element in table 1 illustrates separately in following table 1.2:
Table 1.2
As shown in table 1.2, the number of the row that the label of TextView daughter element can specify text, size text, row " span " or TextView daughter element occupy, and " gravity " parameter.In this example, text is " Email setup " (Email setting), size text is the irrelevant pixels (density-independent pixel, dip) of 32 density, and the columnSpan parameter of the number assembly like this of row in row span specified be 4.In other examples, can nominated bank and/or column number, can nominated bank's span, and can use the other unit that is different from dip unit for size text; For example, font point, pixel, ems, inch, centimetre and/or other suitable units.
The placement of weight parameter Control Component in cell group.In the example of table 1.2, gravity is " center_horizontal " (horizontal center), the text " Email setup " that shows this TextView daughter element in this cell group by horizontal center.Other example horizontal gravity values comprise " top " (top), " bottom " (on the lower), stretch assembly to take " fill_horizontal " (the level filling) in the space in cell group completely, and along " baseline " " baseline " (baseline) of the text to homogeneous component.Baseline is following imaginary line: the major part letter " seat " in given font is on this imaginary line, and this imaginary line below for example, is used by the alphabetical sloping portion in font (, the afterbody of letter " p ").Utilize example word " dog ", letter ' d ' and the bottom of " o " and the top circle of letter " g " are on baseline, and the afterbody of letter " g " drops to baseline below.
In some instances, as the replacement to horizontal gravity value or additional, can use vertical gravity value.Example vertical gravity value comprises " left " (keeping left), " center_vertical " (vertical center), " right " (keeping right) and " fill_vertical " (vertical filling).In addition, specified level and vertical gravity value simultaneously, for example specify layout_gravity=" center_horizontal " for horizontal center in cell group, and specify layout_gravity=" center_vertical " for vertical center in cell group, thereby make assembly horizontal and vertical in cell group all placed in the middle.
GridLayout element can be associated with the grid of row and column.Grid can usually be specified by GridLayout unit at least partly.In the example shown in table 1 and table 1.1, GridLayout element utilizes columnCount parameter to specify in four row in grid.In addition, daughter element can specified portions or whole grid; For example, start, cross over and/or finish columns and rows by appointment.
EditText daughter element for example can be used for license, via user interface (user interface 310) input text.The one EditText daughter element of the GridLayout element in table 1 illustrates separately in following table 1.3.
Table 1.3
EditText daughter element shown in table 1.3 has a parameter " ems ", and it specifies the size for the territory, input text area of input text.In this example, the size in territory, input text area is 10 " ems ".Ems is the unit with respect to the some size definition letter of specific font; For example, some size and the font to territory, input text area for input text.In other examples, can provide by the other unit except " ems " size in territory, input text area; For example, dip unit, pixel, font point, ems, inch, centimetre and/or other suitable units.
Space(space) daughter element can be used for allowing the invisible assembly of designated user interface (for example user interface 310).In certain embodiments, in the time being played up as user interface a part of, Space daughter element is transparent, user interface event (for example, click, knocking, mouse-over, pinch handle gesture, etc.) is not reacted, and can not have child.On the other hand, non-Space assembly can be reacted to some user interface events.Like this, the realization of the assembly corresponding with Space daughter element can the non-Space assembly of consumption rate system resource still less.
The Space daughter element of the GridLayout element in table 1 illustrates separately in following table 1.4.
Table 1.4
Because Space assembly is conventional assembly, so it can have the attribute of the parameter of being designated as just as non-Space assembly.Space daughter element shown in table 1.4 has four parameters: " layout_row " that specifies the begin column of the GridLayout grid of Space assembly, the line number object " rowSpan " of the GridLayout grid that appointment Space assembly occupies, specify " layout_column " of the begin column of the GridLayout grid of Space assembly, taking and value as " fill " (filling) is to specify " layout_gravity " parameter of vertical filling.Based on begin column 2 and the row span 3 of specifying, Space assembly will occupy row 2,3 and 4 in the row 2 of user interface.
By make for micro-(widget) of Space assembly from inherit for micro-of non-Space assembly common superclass, Space assembly can obtain automatic support in existing placement strategy.For example, Space assembly can be embodied as the subclass of the basic class/common superclass of micro-using in user interface.Continue this example, all component of layout manager utilization can have basic class or common superclass Component.Component class can have method and/or the data relevant to micro-of all component, and for example, for data and/or the method for row, row span, row, row span, dirigibility, gravity and mesh lines, and many other examples are also possible.
Component class can have subclass, for example, for the SpaceComponent and the VisibleComponent for relevant micro-of non-Space assembly with visible assembly method and data of relevant micro-of Space assembly.Example Space assembly method and data comprise text-dependent data/method, Drawing Object related data/method, button related data/method.The visible assembly method of example and data comprise text-dependent data/method, Drawing Object related data/method, button related data/method, and many other examples of subclass, method and data are also possible.
Space assembly can be unified the principle in space on multiple placement strategies.Particularly, in GridLayout, Space assembly can be used for specifying in user interface, where insert space and in the time that container rectangle is resized this space should have which kind of behavior.
In addition,---for example Space assembly of definition in table 1.4---is flexible component to have the Space assembly of the gravity of appointment.Like this, can change according to the requirement of layout manager the size of Space assembly.For example, suppose that Space assembly (or other flexible components) is in a container rectangle, the size of this container rectangle is mated the display window for showing user interface 310 just.Then, suppose this display window by user adjust size to increase or to shrink.Be resized in response to display window, the size of the flexible component of layout manager capable of regulating such as Space assembly, fits in the display window of adjusting after size user interface 310 as far as possible best.For example, the one or more large I of Space assembly along with display window increase and increase, or along with display window shrink and reduce.
In certain embodiments, Space assembly is used in the mesh lines outside specified amount in GridLayout.In some scenes, extra mesh lines can be violated normal sequence condition, because they relate to invisible assembly.Like this, when container rectangle is less than predeterminedly when big or small, mesh lines can allow overline and/or row.About the example of overline, referring to the user interface 610a of Fig. 6 B and discussion below.
Button(button) daughter element can be used for the button of designated user interface (for example user interface 310).The one Button daughter element of the GridLayout element in table 1 illustrates separately in following table 1.5:
Table 1.5
Button daughter element shown in table 1.3 has three parameters: " text " (text) of " Manual setup ", and it is the text on the button that will be presented in user interface 310; " layout_row ", it specifies the begin column of the GridLayout grid of Button daughter element; And " layout_column ", it specifies the begin column of the GridLayout grid of Button daughter element.Based on " layout_row " and " layout_column " that specify, as the Button assembly of specifying in table 1.5 will start from row 5, the row 3 of user interface 310.
In other examples, to compared with shown in table 1.5, that GridLayout element can have is more, still less and/or different daughter elements with table 1.Correspondingly, in these other examples, user interface 310 can have from shown in Fig. 3, compare more, still less and/or different assemblies.In other embodiments, can utilize the other technologies except XML to specify GridLayout.
Fig. 3 shows the user interface 310 with text 320 and 322, and text 320 and 322 corresponds respectively to the first and second TextView daughter elements of table 1.Because each TextView daughter element is crossed over all four row of user interface 310, so each daughter element is shown in independent a line.
Text 324 is corresponding to the 3rd TextView daughter element of table 1---because this TextView daughter element does not comprise the appointment of " columnSpan " parameter, so use the acquiescence row span of 1 row.The next daughter element---EditText daughter element for table 1---of then, specifying in table 1 is illustrated as text input (text entry, the TE) region 326 on text 324 the right in Fig. 3.
Table 1 is specified the four TextView daughter element corresponding with text 328 subsequently, its as utilize layout_column parameter specified start from begin column " 0 ", and use the acquiescence row span of 1 row.Thereby, because text 328 starts from row 0, so text 328 starts from the row of text 324 belows.The next daughter element---the 2nd EditText daughter element of table 1---of then, specifying in table 1 is illustrated as text input (TE) region 330 on text 328 the right in Fig. 3.
Table 1 continues with Space daughter element, and Space daughter element will occupy the row 2,3 and 4 of row 2 of user interface as mentioned above.Row and column is numbered since 0 due to table 1, so this Space daughter element will occupy the tertial the 3rd, the 4th in respective user interfaces and fifth line.As shown in Figure 3, space 332(indicates with cross-hauling for clarity) occupy the tertial the 3rd, the 4th and fifth line of user interface 310.The expansion in the space 332 of the fifth line of user interface 310 below the top of Fig. 3 is illustrated as text 328 and territory, input text area 330.In certain embodiments, space components is sightless, thereby so any other without cross-hauling or for example, a part to user interface (user interface 310) indicate as seen.
Table 1 ends at two corresponding with button 334 and 336 respectively Button daughter elements.The Button daughter element corresponding with button 334 indicates this button to be had text " Manual setup " (manually arrange) and is positioned in the row 5, row 3 of GridLayout; That is to say in the 6th row and the 4th row of user interface 310; Just right side below space 332.Finally, the Button daughter element corresponding with button 336 indicates this button to be had text " Next " (next step) and is positioned in the row 3 of GridLayout, and this is the 4th row of user interface 310.Because button 334 occupies the 4th row in the 6th row of user interface 310, so showing button 336, Fig. 3 in the 7th row, occupies the 4th row in other words at the next line of user interface 310.
The bottom of Fig. 3 shows row and column and the corresponding mesh lines (grid line, GL) of user interface 310.Mesh lines is the line of separating the row and column in GridLayout element and in respective user interfaces.Fig. 3 shows the user interface 310 with seven row 340-346 and four row 350-353.Every a line is defined by two mesh lines: for example, Fig. 3 show row 340 up by mesh lines Y0 gauge and below by mesh lines Y1 gauge.Similarly, each row is defined by two mesh lines: for example, Fig. 3 show row 352 in left side by mesh lines X2 gauge and on right side by mesh lines X3 gauge.
Fig. 4 shows scene 300 according to an embodiment and continues to determine the constraint corresponding with the assembly of cloth intra-office, and determines the figure corresponding with constraint.
Grid 400 has been described based on user interface 310 in the top of Fig. 4.Fig. 4 show grid 400 as shown in Figure 3 and more specifically based in above table 1 specify GridLayout element and daughter element comprise mesh lines X0-X4 and Y0-Y7.Fig. 4 also shows one group of assembly (C) 402-418 that is depicted as grey rectangle, and they are corresponding to the assembly 320-336 of user interface 310.For example, the assembly 402 of grid 400 is corresponding to the text 320 of user interface 310 because text 320 and assembly 402 all in top line and all crossed over user interface 310(for text 320) or grid 400(for assembly 402) all row.
Table 2 shows the corresponding relation between the edge in the user interface components shown in Fig. 3 and full grid assembly, constraint and Figure 44 0 shown in Figure 4.
User interface components | Grid assembly | Constraint | Edge in Figure 44 0 |
Text 320 | Assembly 402 | Constraint 422 | Edge 442 |
Text 322 | Assembly 404 | Constraint 424 | Edge 444 |
Text 324 | Assembly 406 | Constraint 426 | Edge 446 |
Territory, input text area 326 | Assembly 408 | Constraint 428 | Edge 448 |
Text 328 | Assembly 412 | Constraint 432 | Edge 452 |
Territory, input text area 330 | Assembly 414 | Constraint 434 | Edge 454 |
Space 332 | Assembly 410 | Constraint 430 | Edge 450 |
Button 334 | Assembly 416 | Constraint 436 | Edge 456 |
Button 336 | Assembly 418 | Constraint 438 | Edge 458 |
Table 2
Each row and column of grid 400 is the same with the row and column of user interface 310 to be defined by two mesh lines.For row example, the first row that Fig. 4 shows grid 400 up by mesh lines Y0 gauge and below by mesh lines Y1 gauge.As listing example, the right column that Fig. 4 shows grid 400 in left side by mesh lines X3 gauge and on right side by mesh lines X4 gauge.
One or more sizes when each assembly can be played up on display for it are determined numerical value, and these numerical value are passed to layout manager.For the example of text children, can determine according to pixels or width and the height of the daughter element of other unit.In certain embodiments, text that width and height value can be based on showing, for example, for showing the text feature (, underscore, runic, etc.) of the font of text of text children and font size, use.As an example, the text of 72 can be played up in the horizontal text of 1 inch, or showing on the display device of text by 96 pixel/inch, can be played up in 96 horizontal pixels.In a particular embodiment, layout manager can add back gauge to text, and this has correspondingly increased numerical value height and/or the width value of text component.
Especially, the spacing requirement between as required can the rectangle of re user interface 310, thus make there is no too much space between the assembly 402-418 of the grid 400 of Fig. 4.But as shown in Figure 4, some or all in the assembly 402-418 of grid 400 can be overlapping partially or completely.
Each assembly 402-418 that Fig. 4 shows grid 400 has the respective width taking pixel as unit; For example, the text of user interface components 320 and corresponding grid assembly 402 are defined as fitting in the assembly that width is 160 pixels by layout manager.In the more unshowned scenes of Fig. 4, each assembly 402-418 also can have the corresponding height taking pixel as unit.In certain embodiments, can carry out assignment component size by the other unit that is different from pixel, such as but not limited to height and/or width.As shown in Figure 4, grid 400 has one group of vertical gridlines { X0, X1 ... X4} and one group of horizontal gridlines { Y0, Y1 ... Y7}.In other scenes, grid 400 can only have a networking ruling (for example, only having vertical gridlines) or for example have, more than two networking rulings (, vertically, level and deep grid line).
The horizontal and vertical aspect of location problem can be separated, thereby allows to calculate for the independent of the position of mesh lines of row and the position of the mesh lines of row.Because the horizontal and vertical aspect of location problem is independently, so now only describe calculating for the position of the mesh lines of row to simplify scene 300.Referring to the discussion of the following calculating about Fig. 6 C-6E and the position to the mesh lines of going.
Like this, each assembly 402-418 of grid 400 has at least four attributes:
1. minimum widith (can be zero).
2. minimum constructive height (can be zero).
3. from this networking ruling { two mesh lines that align with left hand edge assembly and right hand edge X0...X4}.
4. from this networking ruling { two mesh lines that align with top edge assembly and feather edge Y0...Y7}.
Once for each assembly of user interface 310 and corresponding grid 400 has been determined these attributes, just determine and this group vertical gridlines { X0, X1, X2, and horizontal gridlines { Y0, Y1, Y2, one group of corresponding numerical value of every mesh lines, to make each child's assembly at least there is so much space of its request.
Because each assembly has minimum widith and is associated with two mesh lines that align with the left and right edges of this assembly, so can determine the constraint of answering with these Attribute Relatives.For example, the right hand edge of assembly 402 and the pixel value of 160 pixels (centre at assembly 402 illustrates) that grid 400 shows the left hand edge of the assembly 402 aliging with mesh lines X0, aligns with mesh lines X4, show that assembly 402 has at least 160 pixels wide.Because assembly 402 is crossed over the width of grid 400, thus assembly 402 on the left side edge align with mesh lines X0 and on the right edge align with mesh lines X4.These conditions are corresponding to constraint 422 " X4 – X0 >=160 " pixel.
As another example, the left hand edge that grid 400 shows assembly 414 aligns with mesh lines X1, and the right hand edge of assembly 414 aligns with mesh lines X2, and the pixel value of 130 pixels (centre at assembly 414 illustrates), shows that assembly 414 has at least 160 pixels wide.These conditions of assembly 414 are corresponding to constraint 434 " X2 – X1 >=130 " pixel.
The center section of Fig. 4 shows one group of constraint 422-438.Each constraint in constraint 422-438 is corresponding to each assembly 402-418 of grid 400.As another example, the constraint 430 corresponding with assembly 410 shows that the position of the right hand edge (X3) of assembly 410 must be more than or equal to the position of the left hand edge (X2) of assembly 410.In other scenes, for example, in those scenes of below discussing in the context of Fig. 6 C and 6D, for this group horizontal gridlines { Y0 of grid 400 ... Y7} can determine similar constraint.
For every group of constraint, can determine a figure, wherein node corresponding to mesh lines and edge corresponding to the constraint on mesh lines.The bottom of Fig. 4 shows Figure 44 0, and wherein node is illustrated as grey circle.Figure 44 0 has a node for every vertical gridlines X0, X1, X2, X3 and X4.Figure 44 0 also has the edge 442-458 corresponding with constraint 420.Each in edge 442-458 in Figure 44 0 has one-to-one relationship with constraint 422-438.As mentioned above, each constraint 422-438 is corresponding to the assembly 402-418 in grid 400.For example, as shown in Table 2 above, edge 444 corresponding to assembly 404 and constraint 424 both.
Because the position of X0 mesh lines can be pre at initial point, for example X0=0, so the nodes X 0 of Figure 44 0 can be designated as " source " node.Under normal sequence condition, all vertical gridlineses all have in the position on X0 right side, so all mesh lines X0 ... it is non-negative that the position of X4 all can be assumed that at first.In addition, owing to must determining each position X0 in order to solve location problem ... X4, thereby, can be to each nodes X 0 of Figure 44 0 ... X4 gives a value, and this value is corresponding to go to the required ultimate range taking pixel as unit of this node from source node X0.
Bel is graceful-and the variant of Ford algorithm can operate to determine in grid 400 and the largest amount in the specified dimension of the each assembly in user interface 310 correspondingly on Figure 44 0.Bel is graceful-and Ford algorithm variations can be used for value by the edge based on corresponding figure and gives to the each node except source node the value representing from source to the income of each respective nodes and solve single source longest path problem.Due to Bel graceful-edge of Ford algorithm variations evaluation graph, so value that can knot modification determines that (a) this figure has solution, or (b) on this figure, have the edge that causes " just encircling ".If this figure has solution, the value of given Nodes is corresponding to the income of the longest path between source node and this given node.
In the time solving single source longest path problem, Bel is graceful-Ford algorithm is set as the value of source node 0 and residue nodal value is set as to invalid value at first, for example+∞ or-∞.In certain embodiments, Bel is graceful-Ford algorithm variations can be initialized as a common value by all nodal values, and for example 0.In these embodiments, this is equivalent to all nodes to be connected to that its value is set to 0 synthetic source node and the edge weights from this synthetic source node to the edge of all nodes all equals this common value.
Fig. 5 shows the initial graph 500 that uses common value 0 for all nodes X 0 to X4.That is to say graceful-Ford algorithm variations institute initialization that initial graph 500 is initialized as all nodal values the Bel of common value 0.
The Bel that ends in the time that nodal value no longer changes is graceful-and the false code of the variant of Ford algorithm provides in following table 3.Table 3 shows a kind of solve method, and it gets two parameters: the list (arcs) of the arc corresponding with the edge of figure, and the list of the position corresponding with the node of figure (locations).This solve method and then call relax function and determine whether nodal value should be updated.
Table 3
In more detail, solve method has the skin circulation of the node (locations) of the traversing graph taking i as index.For each iteration of skin circulation, carry out interior loop with the edge (arcs) of traversing graph and via calling to follow the tracks of and get the nodal value that whether can upgrade figure when leading edge (arcs[j]) relax method.
Relax method is determined that the value (locations[u]) of edge-source node adds and whether will be increased value when leading edge-destination node (locations[v]) when the candidate value of the weight (value) of leading edge.If will increase locations[v when the value of leading edge-destination node] value is set to candidate value, and returns to true value (showing that nodal value is updated).If can not increase locations[v when the value of leading edge-destination node] be worth constantly, and return to false value, show that nodal value is not updated.
In solve method, " changed=changed|relax (...); " this assignment shows that the value of the changed Boolean that is set at first logic FALSE and the rreturn value of relax function carry out logical OR computing.That is to say, as long as relax function returns to logic FALSE value, changed value just will remain logic FALSE.But once relax function returns to logic TRUE value, changed value just will be set to logic TRUE and remain logic TRUE during the residue iteration of the interior loop of solve method.
Then utilize interior loop to amount to | the list at the edge of V|-1 traversing graph, wherein | V| is the number of the node (summit) in figure.Bel is graceful-and Ford algorithm can end at " effectively " result, if do not have nodal value to be updated in the time of an extra list through edge; Or end at engineering noise, if upgraded at least one nodal value during this is extra one time.Only, when just encircling while being figure a part of, this at least one nodal value is just updated.Thereby Bel is graceful-and Ford algorithm gets the individual instruction of O (| V|*|E|), wherein | E| is the number at edge.
Single source longest path problem on weighted digraph is equal to the single source shortest route problem on existing a lot of weighted digraph of studying.Can prove as follows this identity property: the given weighted digraph G=(V, A) that comprises the one group of directed arc A that links summit V; Structure weighted graph G'=(V, A'), wherein for all arc a in all arc a' and A in A':
source(a')=source(a)，
Destination (a')=destination (a), and
weight(a')=-weight(a)。
Minimal path in G is the maximum path in G', and vice versa.For have the arc of positive weight and negative weight solve shortest route problem such as Bel graceful-algorithm Ford can be deployed the longest path problem that solves.This use can be by refetching negative or the beginning condition using in the relax function shown in following table 3 and comparison operators are changed over to " > " from " < " realizing to the entitlement in figure.In the situation that algorithm is not modified, its end condition is unaffected.In the situation that algorithm is modified, end condition correspondingly changes the attribute of getting negative figure that reflects that it is operated.Be modified solve the Bel of single source longest path problem graceful-Ford algorithm variations stops in the situation that its input does not comprise positive weight circulation or " just encircling ".
Just encircling and relating to from first node N1 through one or more other nodes N2 ... .Nm turn back to the path of N1, be wherein greater than 0 along the summation of the edge weights of this ring, for example positive weight path.Each traversal of just encircling can improve from source node along the just belt income nodal value in other words that enters one or more nodes.Because each traversal of just encircling can improve the value of at least some nodes, thus can not determine the maximum return that advances to every other node from source node, thereby Bel as shown in Table 3 above graceful-Ford algorithm variations will can not solve single source longest path problem.
Fig. 5 shows the final Figure 54 0 of example, and that for example can be determined by solve method is that.Fig. 5 shows nodes X 0 and has end value 0, and nodes X 1 has value 100, and X2 and X3 have value 260 separately, and X4 has value 360.
Fig. 6 A shows scene 300 and proceeds the demonstration of user interface (UI) 610.User interface 610 is utilized as the assembly that the definite nodal value of final Figure 54 0 shows user interface 310.Particularly, text component 320 and 322 is shown in from former and lights the mesh lines X0 of 0 pixel and align between the former X4 that lights 360 pixels, and text component 324 and 328 is shown between the mesh lines X0 at 0 pixel place and the X1 at 100 pixel places and aligns.Territory, input text area 326 and 330 is shown in from former and lights the mesh lines X1 of 100 pixels and align between the former X2 that lights 260 pixels.Space components 332 is not illustrated as a part for user interface 610 in Fig. 6 A, because space components 332 is invisible assemblies.Button 334 and 336 is shown in from former and lights the mesh lines X3 of 260 pixels and align between the former X4 that lights 360 pixels.
Scene 300 continues the width of user interface 610 to reduce 50 pixels, obtains the rear width that reduces of 310 pixels altogether.For example, the user of user interface 610 can the window that comprises user interface 310, from least 360 pixels, wide to be retracted to 310 pixels wide.It is 360 pixels that Fig. 6 A shows the width that all component including space components 332 has the user interface 610 of non-negative width.
The top of Fig. 6 B shows the user interface 610a adjusting after size, and it has width 310 pixels and overlapping mesh lines X0 – X4.From the top of Fig. 6 B, in user interface 610a, mesh lines X3 illustrates at the rightmost edges place of 310 pixels from mesh lines X0 together with mesh lines X4.Like this, Fig. 6 B shows button 334 and 336 by brachymemma, and the whole width of the row that comprise button 334 and 336 can not be shown because 310 pixel wide of user interface 610a are too little.
Button 334 and 336 by brachymemma be because: (1) this layout does not allow (for example to violate normal sequence for row, table 1 and table 1.1 do not have such as columnOrderPreserved(row orders retain) setting parameter=" false " (vacation)), and the 4th row that comprise button 334 and 336 of (2) user interface 610a have dumb assembly, therefore make these row dumb.
The part corresponding with button 334 that table 1 shows layout is as follows:
As mentioned above, in the situation that clearly definition " gravity " or horizontal/vertical are not alignd, for example above to shown in button 334, it is inflexible that layout manager deducibility goes out assembly.In addition, if all elements in row is all flexibly, layout manager infers that the element aliging in these row is flexibly.Because button 334 is dumb assemblies, so layout manager infers that the 4th row of user interface 610a are inflexible, therefore there is fixed width.Thereby, when the width of user interface 610a is too little to such an extent as to when the whole width of the 4th row of user interface 610a can not be shown, layout manager is the demonstration of brachymemma button 334 and 336 partially or completely.
Scene 300 continues the width of user interface 610a to increase 90 pixels, obtains the width of 400 pixels altogether.For example, the user of user interface 610a can by the window that comprises user interface 610a, from 310 pixels, wide to expand 400 pixels to wide.
The bottom of Fig. 6 B shows the user interface 610b adjusting after size, and it has width 400 pixels and overlapping mesh lines X0 – X4.Can find out from the bottom of Fig. 6 B, in user interface 610b, mesh lines X3 illustrates on the right side of mesh lines X2; That is to say, the mesh lines of user interface 610b is restored to normal sequence.
From Fig. 6 B, for user interface 610a and 610b, text component 324 and 328 is alignd by " to left-justify " or with user interface 610a separately or the leftmost edge of 610b, and button 334 and 336 " is aligned right " or align with user interface 610a separately or the rightmost edges of 610b.The aligning right all by space 332 is realized to the positive width of 40 pixels of user interface 610b from the negative width adjustment of user interface 610a-50 pixel to left-justify and assembly 334 and 336 of assembly 324 and 328.
By allowing space components flexible, can keep key feature for the solution of the GridLayout element of specifying in above table 1 and the location problem of daughter element, for example, to left-justify with align right.
Fig. 6 C, 6D and 6E show the highly constrained example user interface of the example user interface based on to Fig. 3 according to example embodiment.
Grid 620 has been described based on user interface 310 in the top of Fig. 6 C.Fig. 6 C show grid 620 as shown in Figure 3 and more specifically based in above table 1 specify GridLayout element and daughter element comprise mesh lines X0-X4 and Y0-Y7.Fig. 6 C also shows one group of assembly (C) 402-418 that is depicted as grey rectangle, and they are corresponding to the assembly 320-336 of user interface 310.
Table 4 shows the user interface components shown in Fig. 3 and the full corresponding relation between the edge in the grid assembly shown in Fig. 6 C, highly constrained and Figure 65 0.
User interface components | Grid assembly | Highly constrained | Edge in Figure 65 0 |
Text 320 | Assembly 402 | Constraint 632 | Edge 652 |
Text 322 | Assembly 404 | Constraint 634 | Edge 654 |
Text 324 | Assembly 406 | Constraint 636 | Edge 656 |
Territory, input text area 326 | Assembly 408 | Constraint 638 | Edge 658 |
Text 328 | Assembly 412 | Constraint 632 | Edge 662 |
Territory, input text area 330 | Assembly 414 | Constraint 644 | Edge 664 |
Space 332 | Assembly 410 | Constraint 640 | Edge 660 |
Button 334 | Assembly 416 | Constraint 646 | Edge 666 |
Button 336 | Assembly 418 | Constraint 648 | Edge 668 |
Table 4
Especially, the spacing requirement between as required can the rectangle of re user interface 310, thus make there is no too much space between the assembly 402-418 of the grid 620 of Fig. 6 C.But as shown in Figure 6 C, some or all in the assembly 402-418 of grid 620 can be overlapping partially or completely.
Each assembly 402-418 that Fig. 6 C shows grid 400 has the corresponding height taking pixel as unit; For example, to be defined as fitting in by layout manager be highly in the assembly of 30 pixels for the text of user interface components 320 and corresponding grid assembly 402.As shown in Figure 6 C, grid 620 has one group of vertical gridlines { X0, X1 ... X4} and one group of horizontal gridlines { Y0, Y1 ... Y7}.In other scenes, grid 400 can only have a networking ruling (for example, only having vertical gridlines) or for example have, more than two networking rulings (, vertically, level and deep grid line).
Like this, each assembly 402-418 of grid 400 has at least four attributes:
1. minimum widith (can be zero).
2. minimum constructive height (can be zero).
3. from this networking ruling { two mesh lines that align with left hand edge assembly and right hand edge X0...X4}.
4. from this networking ruling { two mesh lines that align with top edge assembly and feather edge Y0...Y7}.
Because each assembly has minimum constructive height and is associated with two mesh lines that align with top edge and the feather edge of this assembly, so can determine the constraint of answering with these Attribute Relatives.For example, the feather edge of assembly 402 and the pixel value of 30 pixels (centre at assembly 402 illustrates) that grid 620 shows the top edge of the assembly 402 aliging with mesh lines Y0, aligns with mesh lines Y1, show that assembly 402 has at least 30 pixels high.These conditions are corresponding to constraint 632 " Y1-Y0 >=30 " pixel.
As another example, grid 400 shows the top edge of assembly 414 and aligns with mesh lines Y3, and the feather edge of assembly 414 aligns with mesh lines Y2, and the pixel value of 12 pixels (centre at assembly 414 illustrates), shows that assembly 414 has at least 12 pixels high.These conditions of assembly 414 are corresponding to constraint 644 " Y4 – Y3 >=12 " pixel.
The center section of Fig. 6 C shows one group of constraint 632-648.One of each assembly 402-418 corresponding to grid 620 in constraint 632-648.As another example, the constraint 640 corresponding with assembly 410 shows that the position of the feather edge (Y5) of assembly 410 must be more than or equal to the position of the top edge (Y2) of assembly 410.For example, but because assembly 410 is flexible components, so this constraint can allow to loosen normal sequence condition for mesh lines Y3 and Y4 between two parties, that discusses in the context of Fig. 6 D below is such.
For every group of constraint, can determine a figure, wherein node corresponding to mesh lines and edge corresponding to the constraint on mesh lines.The bottom of Fig. 6 C shows Figure 65 0, and wherein node is illustrated as grey circle.Figure 65 0 has a node for every horizontal gridlines Y0-Y7.Figure 65 0 also has edge (E) 652-668 corresponding with constraint 630.Each edge 652-668 of Figure 65 0 is corresponding to one of constraint 632-648, and as mentioned above, each constraint 632-648 is corresponding to an assembly 402-418 of grid 620.For example, as shown in above table 4, edge 654 corresponding to assembly 404 and constraint 634 both.
Because the position of Y0 mesh lines can be pre at initial point, for example Y0=0, so the node Y0 of Figure 65 0 can be designated as above-mentioned Bel graceful-source node of the variant of Ford algorithm.Bel is graceful-and the variant of Ford algorithm can operate to determine in grid 620 and the specified maximum height of each assembly in user interface 310 correspondingly on Figure 65 0.
Fig. 6 D by application Bel graceful-variant 520 of Ford algorithm is defined as the nodal value that Figure 65 0 solves single source longest path problem and continues scene 300.Fig. 6 D shows the final Figure 67 0 with following nodal value: being 0 for Y0, is 30 for Y1, is 45 for Y2, is 60 for Y3, is 75 for Y4, is 45 for Y5, is 63 for Y6, and is 78 for Y7.Can think that these nodal values are the pixel values of mesh lines Y0 to Y7 in the time of layout user interface 680a.
Recall from above table 1 and table 1.1, the row order retention parameter of GridLayout element is set equal to " vacation " to show that layout manager is allowed to loosen normal sequence constraint as the row of layout.Thereby because (a) corresponding assembly and row are flexibly, and (b) layout allows to violate normal sequence condition for line ordering, so layout manager can allow to violate normal sequence condition for row.
In addition recalling, is flexible components to assembly 410.Because layout manager is allowed to loosen normal sequence condition for row, so as long as the constraint being associated with assembly 410 is met, layout manager is just allowed to exchange row.The constraint 640 being associated with assembly 410 points out that Y5-Y2 must be more than or equal to zero.Thereby as shown in final Figure 65 0, the nodal value of node Y2 and Y5 equals and is set to 45 pixels.But the nodal value of node Y3 and Y4 is respectively 60 and 75 pixels, this is greater than the nodal value of node Y5, thereby has violated normal sequence condition.But, because Y3 and Y4 are mesh lines between two parties for assembly 410---that is to say, do not appear at the approximately intrafascicular mesh lines relevant with assembly 410, if so meet the following conditions, can violate normal sequence condition for mesh lines between two parties: (a) corresponding assembly and row (for height) or row (for width) are flexibly, and (b) layout allows to violate normal sequence condition in the direction of expecting.
In addition, recall from above table 1 and table 1.4, the layout_gravity of space components 410 is designated as " fill "; Thereby, can specify the gravity in vertical direction.Owing to having specified gravity for assembly 410, be flexibly so layout manager deducibility goes out assembly 410.Because assembly 410 is flexibly and is the unique assembly during the 3rd of user interface 300 is listed as, so the 3rd row are to be listed as flexibly.
Fig. 6 D shows the respective user interfaces 680a corresponding with the final Figure 67 0 that has violated normal sequence condition.That is to say, Fig. 6 D shows the row of button 334 and the row in text 324 and territory, input text area 326 is overlapping, and shows the row of button 336 and the row in text 328 and territory, input text area 330 is overlapping.In addition, mesh lines Y4(is at 75 pixel places) and Y5(at 45 pixel places) between line height for negative---this line height is-30 pixels, shows to have violated normal sequence condition for the row between Y4 and Y5.
Scene 300 proceeds the height of user interface 680a to be stretched over the adjustment size operation that 123 pixels are high.Like this, Fig. 6 D shows every a line in four lines and shows respectively not having overlapping in the situation that: (i) text 324 and territory, input text area 326, (ii) text 328 and territory, input text area 330, (iii) button 334, and (iv) button 336.Adjusting after size, user interface 680a the mesh lines Y4 corresponding with the bottom of the row in text 328/ territory, input text area 330 and and the corresponding mesh lines Y5 in the top of the row of button 334 between there is the space of 18 pixels.
In the accompanying drawings in unshowned scene, the high shrinkage of user interface 680a is inputted to 330 row separately to the high adjustment size operation of 78 pixels by the row that causes button 334 and 336 in user interface 680a and text 324 and text input 326 and text 328 and text overlapping.Thereby, remove normal sequence constraint and allowed the negative spacing between some mesh lines, and allowed the solution of location problem to there is overlapping row, column etc.
Although the example shown in Fig. 6 C and 6D relates to row, but in the accompanying drawings in unshowned scene, can loosen normal sequence in other dimensions and retrain to allow overlapping and negative width columns, allow negative width and the overlapping cutting along Z axis or degree of depth axle, and loosening for other dimensions.
Fig. 6 E shows Figure 67 0b, and it is the variation of Figure 67 0, wherein retains (, not violating) normal sequence condition for row.A kind of technology of implementing normal sequence is add and implement to the system of constraint | V| normal sequence constraint.This | V| normal sequence constraint can have following form: Y
1-Y
0>=0, Y
2-Y
1>=0 ... Y
i+1– Y
i>=0 ... Y
| V|-Y
| V|-1>=0, wherein | V|-1>i>1(is for row), or X
1-X
0>=0, X
2-X
1>=0 ... X
i+1– X
i>=0 ... X
| V|-X
| V|-1>=0, wherein | V|-1>i>1(is for row).Then, for for example, for loosening normal sequence, Y with the subset of adjoining mesh lines of line correlation connection
r1y
r2, wherein r1=first loosens mesh lines, and r2 is that most end is loosened mesh lines, can from the system of constraint, remove corresponding normal sequence constraint Y
r1+1-Y
r1>=0 ... Y
r2-Y
r2-1>=0.Similarly, for example, in order to loosen normal sequence for the subset of adjoining mesh lines being associated with row, X
r1x
r2, wherein r1=first loosens mesh lines, and r2 is that most end is loosened mesh lines, can from the system of constraint, remove corresponding normal sequence constraint X
r1+1-X
r1>=0 ... X
r2-X
r2-1>=0.
Fig. 6 E shows final Figure 67 0b, and it is by the nodal value of Y4 and Y5 being set as equal 75 Figure 67 0 that retained Fig. 6 D of normal sequence.In addition, make in the following way nodal value Y6 and the Y7 renewal to some extent with respect to Figure 67 0: add the previous difference 30 between Y4 and the nodal value of Y5 to Y6 and Y7 nodal value separately.The user interface 680b of Fig. 6 E uses the nodal value from Figure 67 0b, and it has retained normal sequence and has illustrated in the bottom of Fig. 6 E.
Fig. 7 A and 7B show the exemplary scene 700 with example grid 710 and corresponding constraint 730, Figure 75 0, final Figure 77 0 and user interface (UI) 770, wherein in grid 710, have the size of some assemblies to utilize scope to specify.
In scene 700, user interface 310 has been modified to remove text component 328, territory, input text area 330 and button 336.For scene 700, the appointment of text component 322 and button 334 has also been modified with according to the scope of pixel instead of utilize fixed pixel amount to carry out specified width, which width.Like this, the top of Fig. 7 A shows grid 710, point out: (a) width of text component 322 is designated as the scope 300-400 of pixel value, (b) entry about text component 328, territory, input text area 330 and button 336 not in grid 710, and (c) width of button 334 is designated as the scope 100-132 of pixel value.
As mentioned above, the width of text component 322 is designated as the pixel value scope from minimum 300 pixels to maximum 400 pixels.Text component crosses the mesh lines X4 on right side from the mesh lines X0 in left side.Thereby the minimum corresponding with this width range of text component 322 and maximum constrained are:
X4–X0≥300
X4–X0≤400
In order to use rightly this two constraints on same figure, these two constraints should be same inequality; ; in order to use single source longest path algorithm; two constraints all must be greater than " > " by being write as or be more than or equal to " >=" symbol; or for having used single source shortest path first, two constraints all must be less than " < " by being write as or be less than or equal to "≤" symbol.
In order to use single source longest path algorithm, by getting the negative value of inequality both sides, " X4 – X0≤400 " inequality can be rewritten as to use is-at-least symbol: " X0 – X4 >=-400 ".Continue scene 700, the centre of Fig. 7 A shows the constraint corresponding with grid 710 730.Particularly, the assembly 714 of grid 710 has been converted to two constraints: constraint 734a, wherein X4 – X0 >=300, and constraint 734b, wherein X0 – X4 >=-400.In addition, assembly 726 has been converted to two constraints: constraint 746a, wherein X4 – X3 >=100, and constraint 746b, wherein X3 – X4 >=-132.
Replace non-directed graph and can use digraph (or " digraph ").In the time characterizing the marginal cost at the edge between two summit A and B, can hold two or more numerals (or weight), instead of one.Digraph has allowed following figure: wherein, the cost or the income that advance to B from A can be different from the cost or the income that advance to A from B, for example, when for example, when assembly,---assembly 714 or assembly 726---has big or small between minimum value and maximal value.
The bottom of Fig. 7 A comprises Figure 75 0 corresponding with constraint 730.Particularly, edge 754a and 754b be corresponding to corresponding constraint 734a and 734b, and edge 766a and 766b are corresponding to corresponding constraint 746a and 746b.Two edge 754b and 766b can be classified as " counter edge ", because be associated with less mark compared with the source node at the destination node of each in these edges and each edge.For example, edge 754b has the destination node that is labeled as X0, and this is less than the mark X4 of source node.In addition, edge 754b and 766b have negative edge weights; For edge 754b, edge weights is-400, and for edge 766b, edge weights is-132.Different with it, residue edge can be classified as " forward edge ", because be associated with larger mark compared with the source node at the destination node of each in these edges and each edge.
Fig. 7 B by application Bel graceful-variant of Ford algorithm is defined as the nodal value that Figure 75 0 solves single source longest path problem and continues scene 700.Fig. 7 B shows the Figure 77 0 with following nodal value: being 0 for X0, is 100 for X1, is 260 for X2 and X3, and is 360 for X4.Can think that these nodal values are the pixel values of mesh lines X0 to X4 in the time of layout user interface 780.
Fig. 7 B shows scene 700 and continues to show user interface (UI) 780 in bottom.User interface 780 shown user interface 310 be selected to comprise and call the constraint of grid 710 and be utilized as the assembly of the definite nodal value of final Figure 77 0.Particularly, text component 320 and 322 is shown in from former and lights the mesh lines X0 of 0 pixel and align between the former X4 that lights 360 pixels, and text component 324 is shown between the mesh lines X0 at 0 pixel place and the X1 at 100 pixel places and aligns.Territory, input text area 326 is shown in from former and lights the mesh lines X1 of 100 pixels and align between the former X2 that lights 260 pixels.Space components 332 is not illustrated as a part for user interface 770 in Fig. 7 B, because space components 332 is invisible assemblies.Button 334 is shown in from former lighting between the mesh lines X3 of 260 pixels and the X4 at 360 pixel places and aligns.
Reliably Bel graceful-Ford variant
Some layouts cause mutual inconsistent constrain set.An example on desktop system can be by window contraction to following size: this size is less than all assemblies that comprise is shown to necessary size with its minimal size.Standard Bel is graceful-and Ford algorithm can detect this condition, but can report failure in the case, and do not return to spendable solution.
Can cause inconsistent edge and therefore remove and can cause inconsistent constraint to remove by amendment figure, revise the contract of constraint resolver to specify in the expected behavior in the inconsistent situation such as inconsistent constraint.Modified Bel is graceful-and the following false code of Ford algorithm can operate the in the situation that of inconsistent constraint:
0. offer modified Bel graceful-ordered list is put at the edge of the figure of Ford algorithm.The order at the edge in this ordered list can indicate the constraint being associated with priority, wherein the edge of higher priority in list prior to the edge of lower priority.In addition, by boolean arch-criminal value (culprit value) C
ieach edge E with figure
ibe associated, this value indicates at edge E
ithe Bel of the above table 3 of upper operation is graceful-the relax function of Ford algorithm Bel graceful-Ford algorithm the term of execution any time point whether returned to logic TRUE value.C
ivalue can be initialized to logic FALSE.The use of " list " word is not implying specific data structure; Any data structure that or rather, can be configured to carry out the action about ordered list described herein all can be used as the data structure of ordered list.
For example, consider Figure 44 0 of Fig. 4.Figure 44 0 has 9 edges, and wherein each edge 442-458 is associated with constraint 422-438 separately.Then, edge 442-458 is put into ordered list, wherein the first edge in ordered list is the limit priority edge of Figure 44 0, the second edge in ordered list is the second high priority edge of Figure 44 0, the rest may be inferred, until the 9th edge in ordered list is the lowest priority edge of Figure 44 0.Each in nine edges can be worth C with the arch-criminal who is set at first FALSE
ibe associated, wherein the scope of i is 1 to 9.
1. the each nodal value in the figure of initialization offers modified Bel graceful-Ford, uses common values 0 for all nodes.
Operation Bel graceful-Ford algorithm.
3. if Bel were graceful-Ford algorithm would report successfully, exits.
4. each arch-criminal is worth to C
ibe set as FALSE.
5. in the situation that not reinitializing nodal value, again move Bel graceful-Ford algorithm, and when at edge E
ithe Bel of the above table 3 of upper operation is graceful-and the relax function of Ford algorithm is while returning to logic TRUE value, and arch-criminal is worth to C
ifor good and all be set as TRUE, show edge E
ionce be used to upgrade nodal value.
6. find out corresponding arch-criminal and be worth C
lVbe set to the maximal value LV of TRUE.Then, for the maximal value LV finding, by edge E
lVremove from figure as arch-criminal edge.In certain embodiments, can provide signal to software and/or nextport hardware component NextPort, point out and arch-criminal edge E
lVcorresponding user interface constraint is removed.In some scenes, the user interface constraint of removal can be relevant with the size of the window of demonstration user interface.For example, it is too little to such an extent as to whole user interface can not be shown that the constraint of the user interface of removal can indicate display window, and this may trigger the variation of window size, interpolation or certain other action of scroll bar.Other signals and/or action are also possible.
7. repetition from step 1.
8. finish.
Faster Bel graceful-Ford variant
For improve the Bel shown in above table 3 graceful-performance of the variant of Ford algorithm, topological sorting is carried out in list that can edge (arcs) before calling solve method.The topological sorting of the list of edge E is the one sequence of the list of the node N of figure G, is the edge from node u to node v if it makes edge E (u, v), wherein u, and v is in N, before in the sequence of the list of node N, u is positioned at v.
For example, for initial graph 500 and final Figure 54 0 of Fig. 5, a list on summit is { X0, X1, X2, X3, X4}.Thereby the sample topology sorted lists at the edge of Figure 50 0 or 540 can be { E (X0, X1,100), E (X0, X1,80), E (X1, X2,160), E (X1, X2,130), E (X2, X3,0), E (X0, X4,160), E (X0, X4,300), E (X3, X4,100), E (X3, X4,50) }, wherein E (u, v, v ') is the edge with value v ' from node u to node v of Figure 50 0 or 540.Other topological sorting lists at edge are also possible.
The list at edge can be divided into two parts: comprise all forwards edge and only include just extrorse forward marginal portion, and comprise all counter edge and only include the counter edge part of counter edge.In the time that topological sorting is carried out in the list of edge, can carry out topological sorting to each part respectively.That is to say, the forward edge of forward marginal portion and the counter edge of counter edge part can be carried out respectively topological sorting.Then,, after difference topological sorting, two parts can heavily be merged into the list at edge.Overlap and edge list can be sorted, to make each edge in forward marginal portion before all edges of counter edge part.Thereby counter edge has higher index in the list at edge.
Then, process by the edge list to through topological sorting, it is all node determination nodal values in figure that solve method is utilized twice iteration of outer circulation conventionally: one time iteration allows the edge list of interior loop based on through topological sorting determine nodal value, and iteration allows interior loop determine that nodal value does not change for the second time.In the time not changing during the iteration of nodal value in interior loop, the changed variable of solve method will be logic FALSE, thereby will utilize break statement to stop outer circulation.
Conventionally,, in the time utilizing forward separately and counter edge part to carry out the solve method shown in table 3 and each part by topological sorting respectively, solve method will be taked the outer loop iteration of constant, numbers.As mentioned above, each outer loop iteration requires the inferior iteration of O (| E|) of interior loop.Because each interior loop relates to the individual instruction of O (1), so the inferior iteration of the O of interior loop (| E|) will be spent the individual instruction of O (| E|).Thereby the forward that the utilization shown in table 3 separates and counter edge part and each part will be needed the individual instruction of O (| E|) conventionally by the solve method of topological sorting respectively.
Exemplary operations
Figure 8 – Figure 15 are process flow diagrams that various example embodiment are shown.These embodiment can relate to computing equipment and/or be carried out by computing equipment, the computing equipment shown in programmable device as shown in Figure 1 of example or server apparatus, Fig. 2 A and/or the calculating cluster shown in Fig. 2 B.Can in the context of the discussion of above figure 3 – Fig. 7 B, understand the description of these embodiment.
Fig. 8 is according to the process flow diagram of the method 800 of example embodiment.Method 800 starts from piece 810, and here computing equipment can receive layout.This layout can be configured at least one group of rectangular module in specified containers rectangle.Each rectangular module can have at least one size at least one dimension.
At piece 820, computing equipment can be determined many mesh lines from layout.Each rectangular module in this group rectangular module can be associated with at least two mesh lines in these many mesh lines.These at least two mesh lines can be based on this rectangular module at least one size.
In certain embodiments, layout can be configured to specify at least one space components as the assembly in this group rectangular module.In other embodiments, layout can be configured to specify the dirigibility of at least one rectangular module in this group rectangular module.In other embodiments, layout can be configured to specify at least one GridLayout element.
At piece 830, computing equipment can generate the system of constraint.Each constraint of the system of constraint can be relevant at least two mesh lines in many mesh lines.
At piece 840, computing equipment can solve the system of constraint.Computing equipment can be every mesh lines in many mesh lines determines the position of this mesh lines.
In certain embodiments, the system that solves constraint thinks that every mesh lines in many mesh lines determines that the position of this mesh lines comprises: (a) utilize every the mesh lines marking in many mesh lines, (b) come many mesh lines to sort based on mark; And (c) sequence based on many mesh lines utilizes the normal sequence of mesh lines, for example above in the context of at least Fig. 6 A and 6B, discuss like that.
In other embodiments, this group assembly comprises invisible assembly.In these other embodiment, the system that solves constraint thinks that every mesh lines in many mesh lines determines that the position of this mesh lines comprises: (a) determine two or more mesh lines that are associated with invisible assembly, and (b) at least for two or more mesh lines that are associated with invisible assembly, loosen the normal sequence of mesh lines, for example above in the context of at least Fig. 6 A and 6B, discuss like that.
In certain embodiments, the system that solves constraint thinks that every mesh lines in many mesh lines determines that the position of this mesh lines comprises: (a) generate the figure that comprises multiple nodes and multiple edges, wherein multiple nodes are corresponding to many mesh lines, and multiple edges are corresponding to the system of constraint, and (b) solve single source path length issue to determine the position of mesh lines for this figure.
In certain embodiments, for this figure solve single source path length issue with determine the position of mesh lines can comprise utilize Bel graceful-variant of Ford algorithm solves single source path length issue.
In certain embodiments: (a) figure can be digraph, (b) at least the first edge in multiple edges and the second edge can be associated with the first constraint and second constraint of the system retraining respectively, (c) first constraint and second retrain both can be associated with the single rectangular module in this group rectangular module, (d) the first constraint can comprise the constraint about minimum value for this single rectangular module, (e) second constraint can comprise for this single rectangular module about peaked constraint, and (f) direction at the first edge can be different from the direction at the second edge, for example above in the context of at least Fig. 7 A and 7B, discuss like that.
In a particular embodiment, method 800 can comprise: (g) multiple edges are divided into at least Part I edge and Part II edge, wherein the first edge is in Part I, the second edge is in Part II, the direction at the each edge in Part I is the direction at the first edge, and the direction at the each edge in Part II is the direction at the second edge, (h) Part I edge is carried out to topological sorting, with Part I edge dividually, the Part II at multiple edges is carried out to topological sorting, and (j) utilize the Bel that operates at the Part I edge through topological sorting with on the Part II edge of topological sorting graceful-variant of Ford algorithm solves single source path length issue, as mentioned above.
In more specific embodiment, utilize the Bel that operates at the Part I edge through topological sorting with on the Part II edge of topological sorting graceful-variant of Ford algorithm solves single source path length issue and comprises: (k) generate the sequence at multiple edges, wherein the each edge in the Part I edge of topological sorting is prior to the each edge in the Part II edge of topological sorting; (l) generate and at least comprise through the Part I edge of topological sorting with through orderly multiple edges at the Part II edge of topological sorting based on the sequence at multiple edges; And (m) utilize the Bel that operates on orderly multiple edges graceful-variant of Ford algorithm solves single source path length issue.
In more specific embodiment, utilize the Bel that operates on orderly multiple edges graceful-variant of Ford algorithm solves single source path length issue and comprises: (n) use Bel graceful-variant of Ford algorithm after, determine in the system of constraint and have one or more inconsistent constraints, (o) identify the one or more arch-criminals edge corresponding with one or more inconsistent constraints in orderly multiple edges; And (p) in one or more arch-criminals edge sequence the highest arch-criminal edge from orderly multiple edges, remove.
In other embodiments, for this figure solve single source path length issue with determine the position of mesh lines comprise utilize Bel graceful-variant of Ford algorithm solves single source path length issue.Utilize Bel graceful-variant of Ford algorithm solve single source path length issue can be included in call Bel graceful-at least a portion at multiple edges is carried out to topological sorting before the variant of Ford algorithm.
At piece 850, computing equipment can the position based on mesh lines generates the demonstration of at least some rectangular module in this group rectangular module.
In certain embodiments, computing equipment can show the demonstration of at least some rectangular module in this group rectangular module.In certain embodiments, the computing equipment that has generated the demonstration of at least some rectangular module in this group rectangular module can show at least some rectangular module in this group rectangular module on the display being associated with this computing equipment.In other embodiments, the computing equipment that has generated the demonstration of at least some rectangular module in this group rectangular module can send to another computing equipment by this demonstration so that this another computing equipment shows on the display being associated with this another computing equipment.
Fig. 9 is according to the process flow diagram of the method 900 of example embodiment.Method 900 starts from piece 910, and here computing equipment can receive user interface layout.User interface layout can be configured to specify at least the first rectangular module and the second rectangular module, both in container rectangle.The first rectangular module can have the first size in level or vertical dimensions, and the second rectangular module can have the second size in level or vertical dimensions.
In certain embodiments, the first rectangular module can have the first size and the third-largest little, and wherein the first size is in horizontal dimensions, and the third-largest little in vertical dimensions.
At piece 920, computing equipment can be determined many mesh lines based on user interface layout.The first rectangular module can be associated with first group of at least two mesh lines in many mesh lines, and the second rectangular module can be associated with second group of at least two mesh lines in many mesh lines.
In certain embodiments, determine that based on user interface layout many mesh lines can comprise first group of at least two mesh lines based in definite many mesh lines of the first size, and based on the third-largest little the 3rd group of at least two articles of mesh lines determining in many articles of mesh lines.
In piece 930, computing equipment can generate the system of constraint.Constraint system in first constraint can be relevant to first group of at least two mesh lines, and constraint system in second retrain can be relevant to second group of at least two mesh lines.
In certain embodiments, the system of constraint can comprise horizontal restraint system and vertical constraint system.In a particular embodiment, horizontal restraint system can comprise at least one constraint based on first group of at least two mesh lines, and vertical constraint system can comprise at least one constraint based on the 3rd group of at least two articles of mesh lines.
At piece 940, the system that computing equipment can solve constraint thinks that each mesh lines in first group and the second networking ruling determine each mesh lines position separately.
In certain embodiments, the system that solves constraint comprises: (a) generate the figure that comprises multiple nodes and multiple edges, wherein multiple nodes are corresponding to many mesh lines, and multiple edges are corresponding to the system of constraint, and (b) utilize Bel graceful-variant of Ford algorithm solves single source path length issue to determine the position of mesh lines for this figure.
In other embodiments, the system that solves constraint comprises: (c) solve horizontal restraint system to determine multiple horizontal levels, and (d) solve vertical constraint system to determine multiple upright positions.In a particular embodiment, solve horizontal restraint system and comprise that being independent of vertical constraint systematically solves horizontal restraint system.In other specific embodiments, multiple horizontal levels comprise the position of each mesh lines in first group of at least two mesh lines, and multiple upright position comprises the position of the 3rd group of each article of mesh lines at least two articles of mesh lines.
At piece 950, computing equipment can generate and comprise that the user interface of the first and second rectangular module shows based on each mesh lines position separately.
In certain embodiments, generation comprises that the user interface demonstration of the first and second rectangular module comprises that generating following user interface shows: in this user interface shows, and the position of the position of the mesh lines of the horizontal level of the first assembly based in first group of at least two articles of mesh lines and the upright position mesh lines based in the 3rd group of at least two articles of mesh lines.
At piece 960, computing equipment can show that this user interface shows.
Figure 10 is according to the process flow diagram of the method 1000 of example embodiment.Method 1000 starts from piece 1010, and here computing equipment can receive layout.This layout can be configured at least one group of rectangular module in specified containers rectangle.Each rectangular module can have at least one size at least one dimension.
In certain embodiments, the specific rectangular module in this group rectangular module can at least have specific components height and specific components width.In a particular embodiment, this specific rectangular module also at least has the specific components degree of depth.
In other specific embodiments, many mesh lines can comprise many horizontal gridlineses and many vertical gridlineses.Specific rectangular module can be associated with at least two horizontal gridlineses this specific components height correlation with in many horizontal gridlineses.Specific rectangular module can be associated at least two vertical gridlineses relevant with this specific components width in many vertical gridlineses.The system of constraint can comprise the system of the horizontal restraint corresponding with many horizontal gridlineses and the system with the corresponding vertical constraint of many vertical gridlineses.
In embodiment more specifically, generation figure can comprise: (a) generate the first figure being associated with the system of many horizontal gridlineses and horizontal restraint and the second figure that (b) generation is associated with the system of many vertical gridlineses and vertical constraint.Then, solving single source path length issue for this figure can comprise: (c) solve first single source path length issue to determine the position of many horizontal gridlineses for the first figure, and (d) solve second single source path length issue to determine the position of many vertical gridlineses for the second figure.In addition, generate and show and can comprise that the position of position based on many horizontal gridlineses and many vertical gridlineses generates the demonstration of at least some rectangular module in this group rectangular module.
At piece 1020, computing equipment can be determined many mesh lines from layout.Each rectangular module in this group rectangular module can be associated with at least two mesh lines in these many mesh lines.These at least two mesh lines can be based on this rectangular module at least one size.
At piece 1030, computing equipment can generate the system of constraint.Each constraint of the system of constraint can be relevant at least two mesh lines in many mesh lines.
At piece 1040, computing equipment can generate the figure that comprises multiple nodes and multiple edges.Each node can be associated with nodal value.Multiple nodes can be corresponding to many mesh lines.Multiple edges can be corresponding to the system of constraint.
In certain embodiments: (a) figure can be digraph, (b) at least the first edge in multiple edges and the second edge can be associated with the first constraint and second constraint of the system retraining respectively, (c) first constraint and second retrain both can be associated with the single rectangular module in this group rectangular module, (d) the first constraint can comprise the constraint about minimum value for this single rectangular module, (e) second constraint can comprise for this single rectangular module about peaked constraint, and (f) direction at the first edge can be different from the direction at the second edge.
At piece 1050, computing equipment can carry out topological sorting to multiple edges.
In a particular embodiment, multiple edges are carried out to topological sorting can be comprised: (a) multiple edges are divided into at least Part I edge and Part II edge, wherein the first edge is in Part I, the second edge is in Part II, the direction at the each edge in Part I is the direction at the first edge, and the direction at the each edge in Part II is the direction at the second edge, (b) Part I edge is carried out to topological sorting.
At piece 1060, computing equipment can be determined by solving single source path length issue for figure the position of mesh lines.Can utilize be configured in conjunction with the Bel that operates through multiple edges of topological sorting graceful-variant of Ford algorithm solves single source path length issue.
In certain embodiments, utilize be configured in conjunction with the Bel that operates through multiple edges of topological sorting graceful-variant of Ford algorithm for this figure solve single source path length issue can comprise utilize the Bel who operates at the Part I edge through topological sorting with on the Part II edge of topological sorting graceful-variant of Ford algorithm solves single source path length issue.
In a particular embodiment, utilize the Bel that operates at the Part I edge through topological sorting with on the Part II edge of topological sorting graceful-variant of Ford algorithm solves single source path length issue and can comprise: (a) generate the sequence at multiple edges, wherein the each edge in the Part I edge of topological sorting is prior to the each edge in the Part II edge of topological sorting; (b) generate and at least comprise through the Part I edge of topological sorting with through orderly multiple edges at the Part II edge of topological sorting based on the sequence at multiple edges; And (c) utilize the Bel that operates on orderly multiple edges graceful-variant of Ford algorithm solves single source path length issue.
In other embodiments, be configured in conjunction with the Bel that operates through multiple edges of topological sorting graceful-variant of Ford algorithm can comprise interior loop and outer circulation.Outer circulation can be configured to travel through multiple nodes.Interior loop can be configured to travel through the multiple edges that are associated with the node in multiple nodes and determine whether at least one node weights has changed during traveling through the multiple edges that are associated with this node.In a particular embodiment, outer circulation can be configured to end at and determine that at least one node weights does not change during traveling through the multiple edges that are associated with this node.
At piece 1070, computing equipment can the position based on mesh lines generates the demonstration of at least some rectangular module in this group rectangular module.
In certain embodiments, computing equipment can show the demonstration of at least some rectangular module in this group rectangular module.
Figure 11 is the process flow diagram that method 1100 is shown according to example embodiment.Method 1100 starts from piece 1110, and here computing equipment can receive layout.This layout can be configured at least one group of rectangular module in specified containers rectangle.Each rectangular module in this group rectangular module can have at least one size at least one dimension.This group rectangular module can comprise space components, and this space components is configured to invisible and is configured to user interface event not reacted.
At piece 1120, computing equipment can be determined many mesh lines from layout.Each rectangular module in this group rectangular module can be associated with at least two corresponding mesh lines in these many mesh lines.These at least two corresponding mesh lines can be based on this rectangular module at least one size.
At piece 1130, computing equipment can generate the system of constraint.Each constraint of the system of constraint can be relevant at least two corresponding mesh lines in many mesh lines.
At piece 1140, the system that computing equipment can solve constraint thinks that every mesh lines in many mesh lines determines the position of this mesh lines.
In certain embodiments, the system that solves constraint can comprise utilize Bel graceful-variant of Ford algorithm solves the system of constraint.
At piece 1150, computing equipment can the position based on mesh lines generates the demonstration of at least some rectangular module in this group rectangular module.
In certain embodiments, computing equipment can show at least some in each rectangular module, and wherein space components can be shown pellucidly.
In other embodiments, user interface event can comprise click, knocking, mouse-over and pinch handle gesture.
In other embodiments, space components utilizes one or more parameters to configure.In a particular embodiment, one or more parameters comprise line parameter, row parameter, weight parameter and combination thereof.
In other embodiments, the each assembly in this group rectangular module can be associated with one micro-.In a particular embodiment, can inherit from common superclass for each micro-that is associated with the assembly in this group rectangular module.In more specific embodiment, be associated with space components micro-can have the class of the subclass that is this common superclass.
In certain embodiments, space components is configured to flexible component.In a particular embodiment, can receive for the demonstration of at least some rectangular module in this group rectangular module and adjust big or small request; And in response to adjusting big or small request to showing, space components can be resized flexibly.In more specific embodiment, space components is flexibly adjusted to size and comprise for space components flexibly and loosen normal sequence condition.In more specific embodiment, demonstration can be resized, and at least one pair of row or column wherein showing is based on space components flexibly and overlapping.
Figure 12 is according to the process flow diagram of the method 1200 of example embodiment.Method 1200 starts from piece 1210, can receive at computing equipment place layout here.This layout can be configured at least one group of rectangular module in specified containers rectangle.Each rectangular module can have at least one size at least one dimension.
At piece 1220, computing equipment can be determined many mesh lines from layout.Each rectangular module in this group rectangular module can be associated with at least two mesh lines in these many mesh lines.These at least two mesh lines can be based on this rectangular module at least one size.
In certain embodiments, many mesh lines can comprise n+1 bar mesh lines Y0, Y1 ..., Yn, wherein n>0.Each in n+1 bar mesh lines can be corresponding to the constraint of the row in showing.In a particular embodiment, one or more normal sequence constraints can comprise that n+1 has Y
i+1– Y
ithe constraint of>=0 form, wherein i be between 0 to n-1 including 0 and n-1 integer.
In other embodiments, many mesh lines can comprise m+1 bar mesh lines X0, X1 ..., Xm, wherein m>0.Each in m+1 bar mesh lines can be corresponding to the constraint of the row in showing.In a particular embodiment, one or more normal sequence constraints can comprise that m+1 has X
i+1– X
ithe constraint of>=0 form, wherein i be between 0 to m-1 including 0 and m-1 integer.
At piece 1230, computing equipment can generate the system of constraint.The system of constraint can comprise one or more normal sequence constraints.Each constraint of the system of constraint can be relevant at least two mesh lines in many mesh lines.One or more normal sequence constraints can be specified the normal sequence of many mesh lines.
At piece 1240, the system that computing equipment can solve constraint thinks that every mesh lines in many mesh lines determines the primary importance of respective wire ruling.
In certain embodiments, the system that solves constraint can comprise utilize Bel graceful-variant of Ford algorithm solves the system of constraint.
At piece 1250, computing equipment can be identified at least one the approximately intrafascicular normal sequence that can loosen constraint of one or more normal sequences.
At piece 1260, computing equipment can the system based on loosening normal sequence constraint that at least one can loosen and solve constraint thinks that every mesh lines in many mesh lines determines the second place of this mesh lines.For at least one mesh lines being relaxed in many mesh lines, the second place can be different from primary importance.
In certain embodiments, the second place of at least one mesh lines being relaxed can be less than the primary importance of at least one mesh lines being relaxed.
In other embodiments, loosen normal sequence constraint that at least one can loosen and can comprise that the normal sequence constraint that at least one can loosen this removes from the system of constraint.
In a particular embodiment, the system that solves constraint can comprise utilize Bel graceful-variant of Ford algorithm solves the system of constraint.
At piece 1270, computing equipment can the second place based on mesh lines generates the demonstration of at least some rectangular module in this group rectangular module.
In certain embodiments, the demonstration of at least some rectangular module in this group rectangular module can have at least a line of negative altitude, and at least a line wherein with negative altitude is associated with at least one mesh lines being relaxed.In a particular embodiment, at least two row in demonstration can be based on negative altitudes and are overlapping.
In other embodiments, the demonstration of at least some rectangular module in this group rectangular module can have at least one row of negative width, and at least one row wherein with negative width are associated with at least one mesh lines being relaxed.In a particular embodiment, at least two in demonstration row can be based on negative width and overlapping.
At piece 1280, computing equipment can show this demonstration.
Figure 13 is according to the process flow diagram of the method 1300 of example embodiment.Method 1300 starts from piece 1310, can receive at computing equipment place layout here.This layout can be configured to one group of rectangular module in specified containers rectangle.Each rectangular module can have the size at least one dimension.Each rectangular module can be configured with weight parameter.Each rectangular module can the weight parameter based on this rectangular module be classified as flexibly or inflexible.
In certain embodiments, can specify weight parameter at least one dimension, and specific components can be categorized as flexibly in this at least one dimension.
In other embodiments, can at least one dimension, not specify weight parameter, and in this at least one dimension, specific components can be categorized as inflexible.
At piece 1320, computing equipment can be determined many mesh lines from layout.Each rectangular module in this group rectangular module can be associated with at least two mesh lines in these many mesh lines.These at least two mesh lines can be based on this rectangular module at least one size.
At piece 1330, computing equipment can generate the system of constraint.Each constraint of the system of constraint can be relevant at least two corresponding mesh lines in many mesh lines.
At piece 1340, the system that computing equipment can solve constraint thinks that every mesh lines in many mesh lines determines the position of this mesh lines.
At piece 1350, computing equipment can the position based on each mesh lines generates the demonstration of at least some rectangular module in this group rectangular module, and the user interface of at least some rectangular module in this group rectangular module shows and can be generated.
In certain embodiments, container rectangle can be divided into row or multiple row.Each row in these row or multiple row can be classified as flexibly or be inflexible, and can have negative or non-negative width.Row can be configured to have negative or non-negative width flexibly, but not row can be configured to only have non-negative width flexibly.
In a particular embodiment, the subset of this group rectangular module can be aligned in the particular column in these row or multiple row.Each assembly in this subset of rectangular module can be classified as flexibly, and these given row can be classified as flexibly.
In other specific embodiments, the subset of this group rectangular module can be aligned in the particular column in these row or multiple row.At least one rectangular module in this subset of rectangular module can be classified as inflexible, and these given row can be classified as inflexible.
In some other specific embodiments, at least one row in these row or multiple row can be classified as flexibly.Specific flexible row in these at least one flexible row can have negative width.At least some row in these row or multiple row can be based on these specific flexible row and overlapping on showing.
In other embodiments, container rectangle can be divided into a line or multirow.Every a line in this line or multirow can be classified as flexibly or be inflexible, and can have negative or non-negative height.Row can be configured to have negative or non-negative height flexibly, but not row can be configured to only have non-negative height flexibly.
In other specific embodiments, the subset of this group rectangular module can be aligned in the particular row in this line or multirow.Each assembly in this subset of rectangular module can be classified as inflexible, and this given row can be classified as inflexible.
In other specific embodiments, the subset of this group rectangular module can be aligned in the particular row in this line or multirow.At least one rectangular module in this subset of rectangular module can be classified as flexibly, and this given row can be classified as flexibly.
In other specific embodiments, at least a line in this line or multirow can be classified as flexibly.Specific flexible row in this at least one flexible row can have negative altitude.At least some row in this line or multirow can be based on this specific flexible row and overlapping on showing.
Figure 14 is according to the process flow diagram of the exemplary method 1400 of example embodiment.Method 1400 starts from piece 1410, can receive at computing equipment place layout here.This layout can be configured at least one group of rectangular module in specified containers rectangle.Each rectangular module can have at least one size at least one dimension.
At piece 1420, computing equipment can be determined many mesh lines from layout.Each rectangular module in this group rectangular module can be associated with at least two mesh lines in these many mesh lines.These at least two mesh lines can be based on this rectangular module at least one size.
At piece 1430, computing equipment can generate the system of constraint.The system of constraint can comprise least commitment and maximum constrained.Least commitment can be specified two minor increments between given mesh lines, and maximum constrained can be specified two ultimate ranges between given mesh lines.
In certain embodiments, least commitment and maximum constrained can be associated with the single rectangular module in this group rectangular module.This single rectangular module can be associated with the second mesh lines in the first mesh lines and many mesh lines in many mesh lines.In a particular embodiment, least commitment can comprise the constraint about minimum value for this single rectangular module, and maximum constrained can comprise for this single rectangular module about peaked constraint.
At piece 1440, the system that computing equipment can solve constraint thinks that every mesh lines in many mesh lines determines the position of respective wire ruling.
In certain embodiments, the system that solves constraint can comprise: generate the figure that comprises multiple nodes and multiple edges, wherein multiple nodes are corresponding to many mesh lines, multiple edges are corresponding to the system of constraint, at least minimum edge in multiple edges and maximal margin are associated with least commitment and the maximum constrained of the system retraining respectively, and minimum edge has first direction, and maximal margin has the second direction that is different from first direction.In a particular embodiment, first node in multiple nodes is corresponding to the first mesh lines, Section Point in multiple nodes is corresponding to the second mesh lines, and minimum edge is the forward edge from first node to Section Point, and maximal margin is the counter edge from Section Point to first node.
In more specific embodiment, the system that solves constraint can comprise: (a) for first node is determined first node weight, (b) for Section Point is determined Section Point weight, and (c) determine the difference between Section Point weight and the first node weight between this minimum value and this maximal value.
At piece 1450, computing equipment can the position based on mesh lines generates the demonstration of at least some rectangular module in this group rectangular module.
In certain embodiments, generate and show and can comprise based on first node weight and determine primary importance and determine the second place based on Section Point weight.Then, can in this demonstration, between primary importance and the second place, show this single rectangular module.
In certain embodiments, method 1400 can comprise: multiple edges are divided into at least Part I edge and Part II edge, wherein minimum edge is in Part I, maximal margin is in Part II, in a first direction, and each edge in Part II is in second direction at each edge in Part I.
In specific embodiment in these embodiments, method 1400 also can comprise: (a) to the sequence of Part I edge, (b) dividually Part II edge is sorted with Part I edge, and (c) merge Part I edge and Part II edge.In more specific embodiment in these embodiments, method 1400 also can comprise: generate the sequence at multiple edges, wherein the each edge in Part I edge is prior to the each edge in Part II edge, and merge Part I edge and Part II edge and comprise the merging list that Part I edge and Part II edge is merged into edge, make all edges prior to Part II edge in this merging list, each edge in the Part I in this merging list.In more specific embodiment in these embodiments, the system that solves constraint can comprise utilize the Bel who operates in this merging list graceful-variant of Ford algorithm solves single source path length issue.
Figure 15 is according to the process flow diagram of the exemplary method 1500 of example embodiment.Method 1500 starts from piece 1510, can receive at computing equipment place layout here.This layout can be configured at least one group of rectangular module in specified containers rectangle.Each rectangular module can have at least one size at least one dimension.
At piece 1520, computing equipment can be determined many mesh lines from layout.Each rectangular module in this group rectangular module can be associated with at least two mesh lines in these many mesh lines.These at least two mesh lines can be based on this rectangular module at least one size.
At piece 1530, computing equipment can generate the system of constraint.Each constraint of the system of constraint can be relevant at least two mesh lines in many mesh lines.The system of constraint can comprise inconsistent constraint.
At piece 1540, computing equipment can generate the figure that comprises multiple nodes and multiple edges.Each node in multiple nodes can be associated with nodal value.Multiple nodes can be corresponding to many mesh lines.Multiple edges can be corresponding to the system of constraint.
At piece 1550, can solve single source path length issue of figure to determine the position of mesh lines.Can utilize be configured to the Bel that operates in conjunction with inconsistent constraint graceful-variant of Ford algorithm solves single source path length issue of figure.
In certain embodiments, Bel is graceful-and the variant of Ford algorithm is also configured at least: (a) ordered list is put into in multiple edges of figure, wherein the edge of higher priority in list prior to the edge of lower priority, (b) each nodal value of multiple nodes is initialised to common value, (c) attempts solving single source path length issue on this figure; And whether the successful result of (d) determining this list source path length issue occurs.In specific embodiment in these embodiments, in response to being determined to be successful result, can exit Bel graceful-variant of Ford algorithm.
At piece 1560, computing equipment can the position based on mesh lines generates the demonstration of at least some rectangular module in the each rectangular module of this group.
In certain embodiments, generate demonstration and can comprise the demonstration generating for showing in window, wherein show and there are one or more demonstration sizes, window has one or more window sizes, and at least one in one or more demonstration size shows that size is greater than corresponding at least one window size in one or more window sizes.In specific embodiment in these embodiments, inconsistent approximately intrafascicular at least one corresponding in one or more demonstration sizes be greater than corresponding at least one window size in one or more window sizes at least one show size.
In certain embodiments, method 1500 also can comprise, does not occur: (a) arch-criminal is worth to C in response to definite successful result
iwith the each edge E in ordered list
ibe associated, this arch-criminal is worth C
ibe endowed at first logic falsity; (b) in the case of the each nodal value that does not reinitialize multiple nodes, attempt solving the single source path length issue on this figure, and at definite edge E
ionce while being used to upgrade the nodal value of the node in multiple nodes to this edge E
iarch-criminal be worth C
igive logic true value, (c) find out and make arch-criminal be worth C
lVfor the maximal value LV of logic true value, and (d) by edge E
lVfrom ordered list, remove.
In specific embodiment in these embodiments, method 1500 also can comprise: (e) each nodal value of multiple nodes is initialised to this common value, (f) is removing edge E
lVsituation under attempt solving the single source path length issue on this figure, (g) determine and removing edge E
lVsituation under on this figure, whether there is the successful result of single source path length issue, and (h) removing edge E in response to determining
lVsituation under on this figure, there is the successful result of single source path length issue, exit Bel graceful-variant of Ford algorithm.
In other embodiment in these embodiments, method 1500 also can comprise: in response to by edge E
lVfrom ordered list, remove, generate the signal to user interface.In other specific embodiments, can be configured to add one or more scroll bars to user interface to the signal of user interface.In other specific embodiments, can be configured to change the window size of user interface to the signal of user interface.
Conclusion
More than describe various features and function that disclosed system, equipment and method have been described with reference to the drawings in detail.In the accompanying drawings, similar symbol is the similar assembly of mark conventionally, unless context separately has instruction.The illustrative embodiment of describing in detailed description, accompanying drawing and claim is also not intended to limit.In the case of not departing from the spirit or scope of theme given here, can utilize other embodiment, and can carry out other changes.Easily understand, general description and each side of the present disclosure illustrated in the accompanying drawings can arrange, replace, combine, separate and design by the different configuration of many kinds here, and all these have here all been susceptible to clearly.
Any or all of about in ladder diagram, scene and process flow diagram in accompanying drawing as described herein, each square and/or communication can represent the processing to information and/or the transmission to information according to example embodiment.Alternative embodiment is included in the scope of these example embodiment.In these alternative embodiments, for example, depend on related function, the function, transmission, communication, request, response and/or the message that are described to square can be carried out not according to order shown or that discuss, comprise and substantially carry out simultaneously or carry out in reverse order.In addition, can use more or less piece and/or function for any one in ladder diagram, scene and the process flow diagram discussed here, and these ladder diagrams, scene and process flow diagram can be partly or entirely and combination with one another.
The square of the processing of expression information can be corresponding to the circuit that can be configured to the concrete logic function of carrying out method described herein or technology.Alternatively or extraly, represent that the square of the processing of information can be corresponding to the program code module of (comprising related data), fragment or part.Program code can comprise and can carry out the concrete logic function of implementation method or technology or one or more instructions of action by processor.Program code and/or related data can be stored on the computer-readable medium of any type, for example memory device or other storage mediums including dish or hard disk drive.
Computer-readable medium also can comprise non-transient state computer-readable medium, for example, as register memory, processor cache and random access storage device (random access memory, the RAM) computer-readable medium of short time storage data like that.Computer-readable medium also can comprise the non-transient state computer-readable medium of program code stored and/or data for a long time, for example secondary or permanent long-term storage apparatus, such as ROM (read-only memory) (read only memory, ROM), CD or disk, compact disk ROM (read-only memory) (compact-disc read only memory, CD-ROM).Computer-readable medium can be also any other volatibility or Nonvolatile memory system.Computer-readable medium can be considered to for example computer-readable recording medium, or tangible memory device.
In addition, represent that the square of one or more communications can be corresponding to the communication between software and/or hardware module in Same Physical equipment.But other communications can occur between the software module and/or hardware module in different physical equipments.
Although disclose various aspects and embodiment here, those skilled in the art will know other aspects and embodiment.Various aspect disclosed herein and embodiment are in order to illustrate, and do not intend to limit, and real scope and spirit are indicated by claim.
A disclosed part for patent document comprises the material that is subject to copyright protection.Copyrighter does not oppose that anyone copies reproduction to patent documentation or the open form appearing in patent and trademark office file or record with it of patent, but in addition retains all literary property rights.
Claims (30)
1. a method, comprising:
Receive layout at computing equipment place, this layout is configured at least one group of rectangular module in specified containers rectangle, and wherein each rectangular module has at least one size at least one dimension;
Described computing equipment is determined many mesh lines from described layout, each rectangular module in described one group of rectangular module is associated with at least two mesh lines in described many mesh lines, and described at least two mesh lines are at least one sizes based on this rectangular module;
Described computing equipment generates the system of constraint, the system of described constraint comprises least commitment and maximum constrained, each constraint of the system of wherein said constraint is relevant at least two mesh lines in described many mesh lines, the minimum value between at least two mesh lines is specified in the least commitment of the system of wherein said constraint, and the maximum constrained of the system of wherein said constraint is specified the maximal value between at least two mesh lines;
The system that described computing equipment solves described constraint thinks that every mesh lines in described many mesh lines determines the position of this mesh lines; And
The position of described computing equipment based on mesh lines generates the demonstration of at least some rectangular module in described one group of rectangular module.
2. the method for claim 1, wherein, described least commitment and maximum constrained are associated with the single rectangular module in described one group of rectangular module, and described single rectangular module is associated with the second mesh lines in the first mesh lines and described many mesh lines in described many mesh lines.
3. method as claimed in claim 2, wherein, described least commitment comprises the constraint about minimum value for described single rectangular module, and
Wherein, described maximum constrained comprise for described single rectangular module about peaked constraint.
4. method as claimed in claim 2, wherein, the system that solves described constraint thinks that every mesh lines in described many mesh lines determines that the position of this mesh lines comprises:
Generation comprises the figure at multiple nodes and multiple edges, and wherein said multiple nodes are corresponding to described many mesh lines, and wherein said multiple edges are corresponding to the system of described constraint;
Wherein, at least minimum edge in described multiple edges and maximal margin are associated with described least commitment and the described maximum constrained of the system of described constraint respectively, and
Wherein, described minimum edge has first direction, and described maximal margin has the second direction that is different from described first direction.
5. method as claimed in claim 4, first node in wherein said multiple node is corresponding to described the first mesh lines, Section Point in wherein said multiple node is corresponding to described the second mesh lines, wherein said minimum edge is the forward edge from described first node to described Section Point, and wherein said maximal margin is the counter edge from described Section Point to described first node.
6. method as claimed in claim 5, wherein, the system that solves described constraint thinks that every mesh lines in described many mesh lines determines that the position of this mesh lines comprises:
For described first node is determined first node weight;
For described Section Point is determined Section Point weight; And
Determine the difference between described Section Point weight and the described first node weight between described minimum value and described maximal value.
7. method as claimed in claim 6, wherein, the demonstration that the position based on mesh lines generates at least some rectangular module in described one group of rectangular module comprises:
Determine primary importance and determine the second place based on described Section Point weight based on described first node weight; And
In described demonstration, between described primary importance and the described second place, show described single rectangular module.
8. method as claimed in claim 4, also comprises:
Described multiple edges are divided into at least Part I edge and Part II edge, wherein said minimum edge is in described Part I, and wherein said maximal margin is in described Part II, each edge in wherein said Part I is on described first direction, and each edge in wherein said Part II is in described second direction.
9. method as claimed in claim 8, also comprises:
Described Part I edge is sorted;
Dividually described Part II edge is sorted with described Part I edge; And
Merge described Part I edge and Part II edge.
10. method as claimed in claim 9, also comprises:
Generate the sequence at described multiple edges, the each edge in wherein said Part I edge is prior to the each edge in described Part II edge; And wherein merge described Part I edge and Part II edge and comprise the merging list that described Part I edge and Part II edge is merged into edge, make all edges prior to described Part II edge in described merging list, each edge in the described Part I in described merging list.
11. methods as claimed in claim 10, wherein, the system that solves described constraint comprise utilize the Bel who operates in described merging list graceful-variant of Ford algorithm solves single source path length issue.
12. 1 kinds of computing equipments, comprising:
Processor; And
Data storage device, is configured at least store computer-readable program instructions, and wherein said instruction is configured to make described computing equipment carry out function in the time being carried out by described processor, and described function comprises:
Receive layout, this layout is configured at least one group of rectangular module in specified containers rectangle, and wherein each rectangular module has at least one size at least one dimension;
Determine many mesh lines from described layout, the each rectangular module in wherein said one group of rectangular module is associated with at least two mesh lines in described many mesh lines, and described at least two mesh lines are at least one sizes based on this rectangular module;
Generate the system of constraint, the system of described constraint comprises least commitment and maximum constrained, each constraint of the system of wherein said constraint is relevant at least two mesh lines in described many mesh lines, and the minimum value between at least two mesh lines is specified in the least commitment of the system of wherein said constraint, and the maximum constrained of the system of wherein said constraint is specified the maximal value between at least two mesh lines;
The system that solves described constraint thinks that every mesh lines in described many mesh lines determines the position of this mesh lines; And
Position based on mesh lines generates the demonstration of at least some rectangular module in described one group of rectangular module.
13. computing equipments as claimed in claim 12, wherein, described least commitment and maximum constrained are associated with the single rectangular module in described one group of rectangular module, and described single rectangular module is associated with the second mesh lines in the first mesh lines and described many mesh lines in described many mesh lines.
14. computing equipments as claimed in claim 13, wherein, described least commitment comprises the constraint about minimum value for described single rectangular module, and
Wherein, described maximum constrained comprise for described single rectangular module about peaked constraint.
15. computing equipments as claimed in claim 13, wherein, the system that solves described constraint comprises:
Generation comprises the figure at multiple nodes and multiple edges, and wherein said multiple nodes are corresponding to described many mesh lines, and wherein said multiple edge is corresponding to the system of described constraint;
Wherein, at least minimum edge in described multiple edges and maximal margin are associated with described least commitment and the described maximum constrained of the system of described constraint respectively, and
Wherein, described minimum edge has first direction, and described maximal margin has the second direction that is different from described first direction.
16. computing equipments as claimed in claim 15, first node in wherein said multiple node is corresponding to described the first mesh lines, Section Point in wherein said multiple node is corresponding to described the second mesh lines, wherein said minimum edge is the forward edge from described first node to described Section Point, and wherein said maximal margin is the counter edge from described Section Point to described first node.
17. computing equipments as claimed in claim 16, wherein, the system that solves described constraint comprises:
For described first node is determined first node weight;
For described Section Point is determined Section Point weight; And
Determine the difference between described Section Point weight and the described first node weight between described minimum value and described maximal value.
18. computing equipments as claimed in claim 17, wherein, generate described demonstration and comprise:
Determine primary importance and determine the second place based on described Section Point weight based on described first node weight; And
In described demonstration, between described primary importance and the described second place, show described single rectangular module.
19. computing equipments as claimed in claim 15, wherein, described function also comprises:
Described multiple edges are divided into at least Part I edge and Part II edge, wherein said minimum edge is in described Part I, and wherein said maximal margin is in described Part II, each edge in wherein said Part I is on described first direction, and each edge in wherein said Part II is in described second direction.
20. computing equipments as claimed in claim 19, wherein, described function also comprises:
Described Part I edge is sorted;
Dividually described Part II edge is sorted with described Part I edge; And
Merge described Part I edge and Part II edge.
21. computing equipments as claimed in claim 20, wherein, described function also comprises:
Generate the sequence at described multiple edges, the each edge in wherein said Part I edge is prior to the each edge in described Part II edge; And wherein merge described Part I edge and Part II edge and comprise the merging list that described Part I edge and Part II edge is merged into edge, make all edges prior to described Part II edge in described merging list, each edge in the described Part I in described merging list, and
Wherein, the system that solves described constraint comprise utilize the Bel who operates in described merging list graceful-variant of Ford algorithm solves single source path length issue.
22. 1 kinds of goods, comprise the non-transient state computer-readable recording medium that stores instruction, and described instruction makes described processor carry out function in response to being executed by processor, and described function comprises:
Receive layout, this layout is configured at least one group of rectangular module in specified containers rectangle, and wherein each rectangular module has at least one size at least one dimension;
Determine many mesh lines from described layout, the each rectangular module in wherein said one group of rectangular module is associated with at least two mesh lines in described many mesh lines, and described at least two mesh lines are at least one sizes based on this rectangular module;
Generate the system of constraint, the system of described constraint comprises least commitment and maximum constrained, each constraint of the system of wherein said constraint is relevant at least two mesh lines in described many mesh lines, and the minimum value between at least two mesh lines is specified in the least commitment of the system of wherein said constraint, and the maximum constrained of the system of wherein said constraint is specified the maximal value between at least two mesh lines;
The system that solves described constraint thinks that every mesh lines in described many mesh lines determines the position of this mesh lines; And
Position based on mesh lines generates the demonstration of at least some rectangular module in described one group of rectangular module.
23. goods as claimed in claim 22, wherein said least commitment and maximum constrained are associated with the single rectangular module in described one group of rectangular module, described single rectangular module is associated with the second mesh lines in the first mesh lines and described many mesh lines in described many mesh lines, wherein said least commitment comprises the constraint about minimum value for described single rectangular module, and wherein said maximum constrained comprise for described single rectangular module about peaked constraint.
24. goods as claimed in claim 23, wherein, the system that solves described constraint comprises:
Generation comprises the figure at multiple nodes and multiple edges, and wherein said multiple nodes are corresponding to described many mesh lines, and wherein said multiple edge is corresponding to the system of described constraint;
Wherein, at least minimum edge in described multiple edges and maximal margin are associated with described least commitment and the described maximum constrained of the system of described constraint respectively, and
Wherein, described minimum edge has first direction, and described maximal margin has the second direction that is different from described first direction.
25. goods as claimed in claim 24, first node in wherein said multiple node is corresponding to described the first mesh lines, Section Point in wherein said multiple node is corresponding to described the second mesh lines, wherein said minimum edge is the forward edge from described first node to described Section Point, and wherein said maximal margin is the counter edge from described Section Point to described first node.
26. goods as claimed in claim 25, wherein, the system that solves described constraint comprises:
For described first node is determined first node weight;
For described Section Point is determined Section Point weight; And
Determine the difference between described Section Point weight and the described first node weight between described minimum value and described maximal value.
27. goods as claimed in claim 26, wherein, generate described demonstration and comprise:
Determine primary importance and determine the second place based on described Section Point weight based on described first node weight; And
In described demonstration, between described primary importance and the described second place, show described single rectangular module.
28. goods as claimed in claim 24, wherein, described function also comprises:
Described multiple edges are divided into at least Part I edge and Part II edge, wherein said minimum edge is in described Part I, and wherein said maximal margin is in described Part II, each edge in wherein said Part I is on described first direction, and each edge in wherein said Part II is in described second direction.
29. goods as claimed in claim 28, wherein, described function also comprises:
Described Part I edge is sorted;
Dividually described Part II edge is sorted with described Part I edge; And
Merge described Part I edge and Part II edge.
30. goods as claimed in claim 29, wherein, described function also comprises:
Generate the sequence at described multiple edges, the each edge in wherein said Part I edge is prior to the each edge in described Part II edge; And wherein merge described Part I edge and Part II edge and comprise the merging list that described Part I edge and Part II edge is merged into edge, make all edges prior to described Part II edge in described merging list, each edge in the described Part I of described merging list, and
Wherein, the system that solves described constraint comprise utilize the Bel who operates in described merging list graceful-variant of Ford algorithm solves single source path length issue.
Applications Claiming Priority (5)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US201161541853P | 2011-09-30 | 2011-09-30 | |
US61/541,853 | 2011-09-30 | ||
US13/566,749 | 2012-08-03 | ||
US13/566,749 US8493411B2 (en) | 2011-09-30 | 2012-08-03 | Methods and apparatus for extensions to directed graphs with minimal and maximal constraints are encoded by arcs in opposite directions |
PCT/US2012/057866 WO2013049537A1 (en) | 2011-09-30 | 2012-09-28 | Methods and apparatus for extensions to directed graphs with minimal and maximal constraints are encoded by arcs in opposite directions |
Publications (2)
Publication Number | Publication Date |
---|---|
CN103959243A true CN103959243A (en) | 2014-07-30 |
CN103959243B CN103959243B (en) | 2016-08-24 |
Family
ID=47992131
Family Applications (2)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
CN201280048261.XA Active CN103959243B (en) | 2011-09-30 | 2012-09-28 | The method and apparatus expanding to the directed graph retrained by opposite arc coding minimum and maximum |
CN201280048317.1A Pending CN103959244A (en) | 2011-09-30 | 2012-09-28 | Efficient layout of components on user interface |
Family Applications After (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
CN201280048317.1A Pending CN103959244A (en) | 2011-09-30 | 2012-09-28 | Efficient layout of components on user interface |
Country Status (4)
Country | Link |
---|---|
US (8) | US8599217B1 (en) |
EP (3) | EP2761443B1 (en) |
CN (2) | CN103959243B (en) |
WO (3) | WO2013049556A1 (en) |
Cited By (2)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
CN109144656A (en) * | 2018-09-17 | 2019-01-04 | 广州视源电子科技股份有限公司 | Method, apparatus, computer equipment and the storage medium of multielement layout |
CN109375972A (en) * | 2018-09-17 | 2019-02-22 | 广州视源电子科技股份有限公司 | Method, apparatus, computer equipment and the storage medium of multielement layout |
Families Citing this family (21)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US9471333B2 (en) * | 2006-11-03 | 2016-10-18 | Conceptual Speech, Llc | Contextual speech-recognition user-interface driven system and method |
US8599217B1 (en) | 2011-09-30 | 2013-12-03 | Google Inc. | Methods and apparatus for reordering of rows and columns in layout grids |
US20130167072A1 (en) * | 2011-12-22 | 2013-06-27 | Sap Portals Israel Ltd. | Smart and Flexible Layout Context Manager |
US9268469B2 (en) * | 2012-11-27 | 2016-02-23 | Google Inc. | Image display environment |
US20140282055A1 (en) * | 2013-03-15 | 2014-09-18 | Agilent Technologies, Inc. | Layout System for Devices with Variable Display Screen Sizes and Orientations |
US20140310205A1 (en) * | 2013-04-15 | 2014-10-16 | Microsoft Corporation | Constraint-based configuration supporting calculations |
US10121270B2 (en) * | 2013-07-01 | 2018-11-06 | Facebook, Inc. | Flexible image layout |
GB2519516B (en) * | 2013-10-21 | 2017-05-10 | Openwave Mobility Inc | A method, apparatus and computer program for modifying messages in a communications network |
US10386994B2 (en) | 2015-02-17 | 2019-08-20 | Microsoft Technology Licensing, Llc | Control of item arrangement in a user interface |
US11048484B2 (en) * | 2015-10-09 | 2021-06-29 | Oracle International Corporation | Automated responsive grid-based layout design system |
CN105912318A (en) * | 2016-04-01 | 2016-08-31 | 北京京东尚科信息技术有限公司 | Self-adaptive display method of terminal screen, terminal, server and system |
US10339206B2 (en) * | 2016-05-17 | 2019-07-02 | Wing Aviation Llc | Systems and methods for automatic determination of layout constraints |
CN108234310B (en) * | 2016-12-12 | 2021-06-15 | 清华大学 | Multilevel interconnection network, self-adaptive routing method and routing equipment |
CN107145280B (en) * | 2017-04-20 | 2020-04-24 | 腾讯科技（深圳）有限公司 | Image data processing method and device |
CN107273081B (en) * | 2017-06-20 | 2020-12-11 | 网易（杭州）网络有限公司 | Method, medium, apparatus and computing device for displaying multiple components |
CN107577490A (en) * | 2017-08-03 | 2018-01-12 | 武汉斗鱼网络科技有限公司 | View autoplacement method and device in a kind of iOS |
US10997261B2 (en) * | 2018-09-06 | 2021-05-04 | Google Llc | System and method that facilitate display responsive message rendering on client device |
CN109558201A (en) * | 2018-12-11 | 2019-04-02 | 南威软件股份有限公司 | A kind of interface iOS simplified topology method based on UIScrollView |
CN109976849B (en) * | 2019-03-12 | 2022-08-23 | 深圳点猫科技有限公司 | Method and electronic device for suspending web component on desktop based on programming language |
CN112230828B (en) * | 2019-07-15 | 2023-07-25 | 腾讯科技（深圳）有限公司 | Component layout method and device and storage medium |
US11699014B2 (en) * | 2021-01-29 | 2023-07-11 | Insight Direct Usa, Inc. | System and method for determining paths between locations in a physical system |
Citations (4)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
CN1677343A (en) * | 2004-03-31 | 2005-10-05 | 微软公司 | Grid canvas |
CN101484869A (en) * | 2005-01-05 | 2009-07-15 | 希尔克瑞斯特实验室公司 | Scaling and layout methods and systems for handling one-to-many objects |
CN101971204A (en) * | 2007-10-01 | 2011-02-09 | 惠普开发有限公司 | Arranging graphic objects on a page with relative position based control |
CN102129344A (en) * | 2010-01-14 | 2011-07-20 | 微软公司 | Layout constraint manipulation via user gesture recognition |
Family Cites Families (18)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
JPH09108933A (en) | 1995-10-18 | 1997-04-28 | Yoji Kajitani | Arrangement of raw material and cutting-out method |
US6323879B1 (en) * | 1998-05-14 | 2001-11-27 | Autodesk, Inc. | Method and system for determining the spacing of objects |
US6594806B1 (en) | 2000-03-03 | 2003-07-15 | Nec Corporation | System and method for performing timing analysis, including error diagnosis, signal tracking and clock skew |
US20020188632A1 (en) | 2001-06-06 | 2002-12-12 | Ming-Shing Su | Table editor for web pages |
JP3800524B2 (en) * | 2002-03-15 | 2006-07-26 | インターナショナル・ビジネス・マシーンズ・コーポレーション | Display control method, program using the same, and information processing apparatus |
US6873187B1 (en) | 2002-10-29 | 2005-03-29 | Lattice Semiconductor Corporation | Method and apparatus for controlling signal distribution in an electronic circuit |
US7246311B2 (en) | 2003-07-17 | 2007-07-17 | Microsoft Corporation | System and methods for facilitating adaptive grid-based document layout |
US7554689B2 (en) | 2003-10-15 | 2009-06-30 | Canon Kabushiki Kaisha | Document layout method |
US7730418B2 (en) | 2005-05-04 | 2010-06-01 | Workman Nydegger | Size to content windows for computer graphics |
US20070266359A1 (en) | 2006-05-15 | 2007-11-15 | Magma Design Automation, Inc. | Relative Floorplanning For Improved Integrated Circuit Design |
US7707508B1 (en) | 2006-12-12 | 2010-04-27 | Adobe Systems Incorporated | Methods and apparatus for efficient layout of digital content |
US7770141B2 (en) | 2007-01-29 | 2010-08-03 | United Microelectronics Corp. | Computer recording medium for storing program of checking design rule of layout |
US7707528B1 (en) * | 2007-02-24 | 2010-04-27 | Cadence Design Systems, Inc. | System and method for performing verification based upon both rules and models |
US8726190B2 (en) | 2007-09-28 | 2014-05-13 | Adobe Systems Incorporated | Automatically transformed graphical user interface |
US8547588B2 (en) | 2009-01-23 | 2013-10-01 | Hewlett-Packard Development Company, L.P. | Method and article for providing layout flexibility |
US8296706B2 (en) | 2010-04-26 | 2012-10-23 | International Business Machines Corporation | Handling two-dimensional constraints in integrated circuit layout |
US9128733B2 (en) | 2010-11-12 | 2015-09-08 | Microsoft Technology Licensing, Llc | Display and resolution of incompatible layout constraints |
US8599217B1 (en) | 2011-09-30 | 2013-12-03 | Google Inc. | Methods and apparatus for reordering of rows and columns in layout grids |
-
2012
- 2012-08-03 US US13/566,859 patent/US8599217B1/en active Active
- 2012-08-03 US US13/566,792 patent/US8645850B1/en active Active
- 2012-08-03 US US13/566,768 patent/US8643673B1/en active Active
- 2012-08-03 US US13/566,820 patent/US8599216B2/en active Active
- 2012-08-03 US US13/566,878 patent/US8645851B1/en active Active
- 2012-08-03 US US13/566,749 patent/US8493411B2/en active Active
- 2012-08-03 US US13/566,840 patent/US8446430B2/en not_active Expired - Fee Related
- 2012-08-03 US US13/566,895 patent/US8599218B1/en active Active
- 2012-09-28 WO PCT/US2012/057892 patent/WO2013049556A1/en active Application Filing
- 2012-09-28 EP EP12773182.6A patent/EP2761443B1/en active Active
- 2012-09-28 EP EP12773181.8A patent/EP2761442A1/en not_active Withdrawn
- 2012-09-28 CN CN201280048261.XA patent/CN103959243B/en active Active
- 2012-09-28 WO PCT/US2012/057877 patent/WO2013049544A1/en active Application Filing
- 2012-09-28 EP EP12773184.2A patent/EP2761444A1/en not_active Withdrawn
- 2012-09-28 CN CN201280048317.1A patent/CN103959244A/en active Pending
- 2012-09-28 WO PCT/US2012/057866 patent/WO2013049537A1/en active Application Filing
Patent Citations (4)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
CN1677343A (en) * | 2004-03-31 | 2005-10-05 | 微软公司 | Grid canvas |
CN101484869A (en) * | 2005-01-05 | 2009-07-15 | 希尔克瑞斯特实验室公司 | Scaling and layout methods and systems for handling one-to-many objects |
CN101971204A (en) * | 2007-10-01 | 2011-02-09 | 惠普开发有限公司 | Arranging graphic objects on a page with relative position based control |
CN102129344A (en) * | 2010-01-14 | 2011-07-20 | 微软公司 | Layout constraint manipulation via user gesture recognition |
Cited By (3)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
CN109144656A (en) * | 2018-09-17 | 2019-01-04 | 广州视源电子科技股份有限公司 | Method, apparatus, computer equipment and the storage medium of multielement layout |
CN109375972A (en) * | 2018-09-17 | 2019-02-22 | 广州视源电子科技股份有限公司 | Method, apparatus, computer equipment and the storage medium of multielement layout |
CN109144656B (en) * | 2018-09-17 | 2022-03-08 | 广州视源电子科技股份有限公司 | Method, apparatus, computer device and storage medium for multi-element layout |
Also Published As
Publication number | Publication date |
---|---|
US20130083028A1 (en) | 2013-04-04 |
US8446430B2 (en) | 2013-05-21 |
US8645851B1 (en) | 2014-02-04 |
EP2761443B1 (en) | 2017-03-01 |
US8599216B2 (en) | 2013-12-03 |
WO2013049537A1 (en) | 2013-04-04 |
EP2761444A1 (en) | 2014-08-06 |
EP2761442A1 (en) | 2014-08-06 |
CN103959243B (en) | 2016-08-24 |
US20130083053A1 (en) | 2013-04-04 |
US8645850B1 (en) | 2014-02-04 |
US8599218B1 (en) | 2013-12-03 |
US8643673B1 (en) | 2014-02-04 |
US8493411B2 (en) | 2013-07-23 |
CN103959244A (en) | 2014-07-30 |
WO2013049556A1 (en) | 2013-04-04 |
EP2761443A1 (en) | 2014-08-06 |
US20130083027A1 (en) | 2013-04-04 |
WO2013049544A1 (en) | 2013-04-04 |
US8599217B1 (en) | 2013-12-03 |
Similar Documents
Publication | Publication Date | Title |
---|---|---|
CN103959243A (en) | Methods and apparatus for extensions to directed graphs with minimal and maximal constraints are encoded by arcs in opposite directions | |
US10795544B2 (en) | Relationship visualizations | |
US8949742B2 (en) | Compressing tree diagrams | |
US20050183008A1 (en) | Method and system for separation of content and layout definitions in a display description | |
US20140059488A1 (en) | System and method for viewing selected descendant nodes in a tree hierarchy displayed in tabular form | |
CN102710900B (en) | A kind of video matrix output display implement device, method and video matrix equipment | |
CN1952884A (en) | Automatic layout method and automatic layout device | |
JP6375210B2 (en) | Model construction apparatus and program | |
US10866831B2 (en) | Distributed execution of data processing pipelines | |
JP2022012393A (en) | Software development environment providing system, software development environment providing method, and software development environment providing program | |
US9536330B2 (en) | Program information generation system, method for program information generation, program for program information generation, and program information display system for displaying the execution status of a program | |
KR102644170B1 (en) | Method for assisting select of screen components and collect of coordinate information | |
JP5967200B2 (en) | Rule management device, rule management method and program | |
JP5869465B2 (en) | Software complexity measuring apparatus and method, and program | |
CN101599092B (en) | Human-computer interaction method for computer auxiliary design and fabrication | |
JP6372168B2 (en) | Program, information processing apparatus and display method | |
CN114356304A (en) | Data model configuration method and device, storage medium and computer equipment | |
CN111831939A (en) | Page component skipping method and device | |
CN116700870A (en) | Window updating method, device, computer equipment and storage medium | |
CN117493616A (en) | Directed graph layout method and device, electronic equipment and storage medium | |
JP2005190178A (en) | Data maintenance apparatus, data maintenance method and data maintenance program | |
JP2017224126A (en) | Function specification device, function specification method, and function specification program |
Legal Events
Date | Code | Title | Description |
---|---|---|---|
C06 | Publication | ||
PB01 | Publication | ||
C10 | Entry into substantive examination | ||
SE01 | Entry into force of request for substantive examination | ||
C14 | Grant of patent or utility model | ||
GR01 | Patent grant | ||
CP01 | Change in the name or title of a patent holder |
Address after: American CaliforniaPatentee after: Google limited liability companyAddress before: American CaliforniaPatentee before: Google Inc. |
|
CP01 | Change in the name or title of a patent holder |