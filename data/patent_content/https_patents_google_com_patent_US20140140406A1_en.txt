US20140140406A1 - Devices and methods for processing of non-idr related syntax for high efficiency video coding (hevc) - Google Patents
Devices and methods for processing of non-idr related syntax for high efficiency video coding (hevc) Download PDFInfo
- Publication number
- US20140140406A1 US20140140406A1 US13/864,198 US201313864198A US2014140406A1 US 20140140406 A1 US20140140406 A1 US 20140140406A1 US 201313864198 A US201313864198 A US 201313864198A US 2014140406 A1 US2014140406 A1 US 2014140406A1
- Authority
- US
- United States
- Prior art keywords
- idr
- idr parameter
- parameter
- picture
- term reference
- Prior art date
- Legal status (The legal status is an assumption and is not a legal conclusion. Google has not performed a legal analysis and makes no representation as to the accuracy of the status listed.)
- Abandoned
Links
Images
Classifications
-
- H04N19/00884—
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04N—PICTORIAL COMMUNICATION, e.g. TELEVISION
- H04N19/00—Methods or arrangements for coding, decoding, compressing or decompressing digital video signals
- H04N19/70—Methods or arrangements for coding, decoding, compressing or decompressing digital video signals characterised by syntax aspects related to video coding, e.g. related to compression standards
Definitions
- the disclosure relates generally to the field of video coding, and more specifically to systems, devices and methods for cleaning up the slice segment header syntax design.
- Video compression uses block processing for many operations.
- a block of neighboring pixels is grouped into a coding unit and compression operations treat this group of pixels as one unit to take advantage of correlations among neighboring pixels within the coding unit.
- Block-based processing often includes prediction coding and transform coding.
- Transform coding with quantization is a type of data compression which is commonly “lossy” as the quantization of a transform block taken from a source picture often discards data associated with the transform block in the source picture, thereby lowering its bandwidth requirement but often also resulting in quality loss in reproducing of the original transform block from the source picture.
- MPEG-4 AVC also known as H.264
- H.264 is an established video compression standard that uses transform coding in block processing.
- a picture is divided into macroblocks (MBs) of 16 ⁇ 16 pixels.
- MB macroblocks
- Each MB is often further divided into smaller blocks.
- Blocks equal in size to or smaller than a MB are predicted using intra-/inter-picture prediction, and a spatial transform along with quantization is applied to the prediction residuals.
- the quantized transform coefficients of the residuals are commonly encoded using entropy coding methods (e.g., variable length coding or arithmetic coding).
- Context Adaptive Binary Arithmetic Coding was introduced in H.264 to provide a substantially lossless compression efficiency by combining an adaptive binary arithmetic coding technique with a set of context models.
- Context model selection plays a role in CABAC in providing a degree of adaptation and redundancy reduction.
- H.264 specifies two kinds of scan patterns over 2D blocks. A zigzag scan is used for pictures coded with progressive video compression techniques and an alternative scan is for pictures coded with interlaced video compression techniques.
- HEVC High Efficiency Video Coding
- HD high definition
- codecs encoders and decoders
- method comprising: evaluating, by the computing device, a single conditional statement once to determine if a current picture is a non-IDR picture; based on the evaluating of the single conditional statement, when a non-IDR flag indicates a non-IDR picture is present, performing: encoding or decoding, by the computing device, a first non-IDR parameter indicating a picture order count modulo MaxPicOrderCntLsb for the current picture; encoding or decoding, by the computing device, a second non-IDR parameter indicating how a short-term picture set of the current picture is created; encoding or decoding, by the computing device, a third non-IDR parameter indicating an index to a list of the short-term reference picture sets used for creation of a reference picture set of the current picture; encoding or decoding, by the computing device, a fourth non-IDR parameter indicating a number of candidate long-term reference pictures that are included in a long-term reference picture set of
- an order in the encoded bitstream is the first non-IDR parameter, the second non-IDR parameter, the third non-IDR parameter, the fourth non-IDR parameter, the fifth non-IDR parameter, the sixth non-IDR parameter, the seventh non-IDR parameter, the eighth non-IDR parameter, the ninth non-IDR parameter, the tenth non-IDR parameter, the eleventh non-IDR parameter and the twelfth non-IDR parameter.
- the non-IDR flag is set to a first value to enable a non-IDR picture mode or set to a second value to disable the non-IDR picture mode.
- the non-IDR flag indicates the non-IDR mode is disabled, not encoding or decoding the first non-IDR parameter, the second non-IDR parameter, the third non-IDR parameter, the fourth non-IDR parameter, the fifth non-IDR parameter, the sixth non-IDR parameter, the seventh non-IDR parameter, the eighth non-IDR parameter, the ninth non-IDR parameter, the tenth non-IDR parameter, the eleventh non-IDR parameter and the twelfth non-IDR parameter in or from the encoded bitstream associated with the sequence of video.
- an order in the encoded bitstream varies among the first non-IDR parameter, the second non-IDR parameter, the third non-IDR parameter, the fourth non-IDR parameter, the fifth non-IDR parameter, the sixth non-IDR parameter, the seventh non-IDR parameter, the eighth non-IDR parameter, the ninth non-IDR parameter, the tenth non-IDR parameter, the eleventh non-IDR parameter and the twelfth non-IDR parameter.
- the method further comprises: encoding or decoding, by the computing device, a first IDR parameter indicating if sample adaptive offset (SAO) is enabled for a luma component of the sequence of video, wherein the first IDR parameter is encoded or decoded consecutively without any other bits or syntax between the twelfth non-IDR parameter and first IDR parameter.
- the method further comprises: encoding or decoding, by the computing device, a second IDR parameter indicating if sample adaptive offset (SAO) is enabled for a chroma component of the sequence of video, wherein the second IDR parameter is encoded or decoded consecutively without any other bits or syntax between the first IDR parameter and second IDR parameter.
- all of the non-IDR parameters in a slice are grouped under a single non-IDR flag.
- the non-IDR flag is located in a slice header.
- a decoder comprising: one or more computer processors; and a non-transitory computer-readable storage medium comprising instructions that, when executed, control the one or more computer processors to be configured for: determining an encoded bitstream; evaluating, by the computing device, a single conditional statement once to determine if a current picture is a non-IDR picture; based on the evaluating of the single conditional statement, when a non-IDR flag indicates a non-IDR picture is present, performing: decoding a first non-IDR parameter indicating a picture order count modulo MaxPicOrderCntLsb for the current picture; decoding a second non-IDR parameter indicating how a short-term picture set of the current picture is created; decoding a third non-IDR parameter indicating an index to a list of the short-term reference picture sets used for creation of a reference picture set of the current picture; decoding a fourth non-IDR parameter indicating a number of candidate long-term reference pictures
- an order in the encoded bitstream is the first non-IDR parameter, the second non-IDR parameter, the third non-IDR parameter, the fourth non-IDR parameter, the fifth non-IDR parameter, the sixth non-IDR parameter, the seventh non-IDR parameter, the eighth non-IDR parameter, the ninth non-IDR parameter, the tenth non-IDR parameter, the eleventh non-IDR parameter and the twelfth non-IDR parameter.
- the non-IDR flag is set to a first value to enable a non-IDR picture mode or set to a second value to disable the non-IDR picture mode.
- the non-IDR flag indicates the non-IDR mode is disabled, not decoding the first non-IDR parameter, the second non-IDR parameter, the third non-IDR parameter, the fourth non-IDR parameter, the fifth non-IDR parameter, the sixth non-IDR parameter, the seventh non-IDR parameter, the eighth non-IDR parameter, the ninth non-IDR parameter, the tenth non-IDR parameter, the eleventh non-IDR parameter and the twelfth non-IDR parameter from the encoded bitstream associated with the sequence of video.
- an order in the encoded bitstream varies among the first non-IDR parameter, the second non-IDR parameter, the third non-IDR parameter, the fourth non-IDR parameter, the fifth non-IDR parameter, the sixth non-IDR parameter, the seventh non-IDR parameter, the eighth non-IDR parameter, the ninth non-IDR parameter, the tenth non-IDR parameter, the eleventh non-IDR parameter and the twelfth non-IDR parameter.
- all of the non-IDR parameters in a slice are grouped under a single non-IDR flag.
- the non-IDR flag is located in a slice header.
- an encoder comprising: one or more computer processors; and a non-transitory computer-readable storage medium comprising instructions that, when executed, control the one or more computer processors to be configured for: evaluating a single conditional statement once to determine if a current picture is a non-IDR picture; based on the evaluating of the single conditional statement, when a non-IDR flag indicates a non-IDR picture is present, performing: encoding a first non-IDR parameter indicating a picture order count modulo MaxPicOrderCntLsb for the current picture; encoding a second non-IDR parameter indicating how a short-term picture set of the current picture is created; encoding a third non-IDR parameter indicating an index to a list of the short-term reference picture sets used for creation of a reference picture set of the current picture; encoding a fourth non-IDR parameter indicating a number of candidate long-term reference pictures that are included in a long-term reference picture set
- an order in the encoded bitstream is the first non-IDR parameter, the second non-IDR parameter, the third non-IDR parameter, the fourth non-IDR parameter, the fifth non-IDR parameter, the sixth non-IDR parameter, the seventh non-IDR parameter, the eighth non-IDR parameter, the ninth non-IDR parameter, the tenth non-IDR parameter, the eleventh non-IDR parameter and the twelfth non-IDR parameter.
- an order in the encoded bitstream varies among the first non-IDR parameter, the second non-IDR parameter, the third non-IDR parameter, the fourth non-IDR parameter, the fifth non-IDR parameter, the sixth non-IDR parameter, the seventh non-IDR parameter, the eighth non-IDR parameter, the ninth non-IDR parameter, the tenth non-IDR parameter, the eleventh non-IDR parameter and the twelfth non-IDR parameter.
- all of the non-IDR parameters in a slice are grouped under a single non-IDR flag.
- FIG. 1A is a video system in which the various embodiments of the disclosure may be used
- FIG. 1B is a computer system on which embodiments of the disclosure may be implemented
- FIGS. 2A , 2 B, 3 A and 3 B illustrate certain video encoding principles according to embodiments of the disclosure
- FIGS. 4A and 4B show possible architectures for an encoder and a decoder according to embodiments of the disclosure
- FIGS. 5A and 5B illustrate further video coding principles according to embodiments of the disclosure
- FIGS. 6A through 6C together illustrate an example of a syntax that describes a grouping of the parameters for non-IDR picture mode according to an embodiment of the disclosure.
- FIG. 7 illustrates FIGS. 7A through 7C together illustrate an example of a syntax that describes a grouping of the parameters for non-IDR picture mode according to another embodiment of the disclosure.
- coding refers to encoding that occurs at the encoder or decoding that occurs at the decoder.
- coder refers to an encoder, a decoder, or a combined encoder/decoder (CODEC).
- CODEC encoder/decoder
- coder, encoder, decoder and CODEC all refer to specific machines designed for the coding (encoding and/or decoding) of image and/or video data consistent with this disclosure.
- Image and video data generally consist of three components—one for a luma component which represents brightness of a pixel and two for chroma components which represent color information of a pixel.
- a video system may include a head end 100 of a cable television network.
- the head end 100 may be configured to deliver video content to neighborhoods 129 , 130 and 131 .
- the head end 100 may operate within a hierarchy of head ends, with the head ends higher in the hierarchy generally having greater functionality.
- the head end 100 may be communicatively linked to a satellite dish 112 and receive video signals for non-local programming from it.
- the head end 100 may also be communicatively linked to a local station 114 that delivers local programming to the head end 100 .
- the head end 100 may include a decoder 104 that decodes the video signals received from the satellite dish 112 , an off-air receiver 106 that receives the local programming from the local station 114 , a switcher 102 that routes data traffic among the various components of the head end 100 , encoders 116 that encode video signals for delivery to customers, modulators 118 that modulate signals for delivery to customers, and a combiner 120 that combines the various signals into a single, multi-channel transmission.
- a decoder 104 that decodes the video signals received from the satellite dish 112
- an off-air receiver 106 that receives the local programming from the local station 114
- a switcher 102 that routes data traffic among the various components of the head end 100
- encoders 116 that encode video signals for delivery to customers
- modulators 118 that modulate signals for delivery to customers
- a combiner 120 that combines the various signals into a single, multi-channel transmission.
- the head end 100 may also be communicatively linked to a hybrid fiber cable (HFC) network 122 .
- the HFC network 122 may be communicatively linked to a plurality of nodes 124 , 126 , and 128 .
- Each of the nodes 124 , 126 , and 128 may be linked by coaxial cable to one of the neighborhoods 129 , 130 and 131 and deliver cable television signals to that neighborhood.
- One of the neighborhoods 130 of FIG. 1A is shown in more detail.
- the neighborhood 130 may include a number of residences, including a home 132 shown in FIG. 1A . Within the home 132 may be a set-top box 134 communicatively linked to a video display 136 .
- the set-top box 134 may include a first decoder 138 and a second decoder 140 .
- the first and second decoders 138 and 140 may be communicatively linked to a user interface 142 and a mass storage device 144 .
- the user interface 142 may be communicatively linked to the video display 136 .
- head end 100 may receive local and nonlocal programming video signals from the satellite dish 112 and the local station 114 .
- the nonlocal programming video signals may be received in the form of a digital video stream, while the local programming video signals may be received as an analog video stream.
- local programming may also be received as a digital video stream.
- the digital video stream may be decoded by the decoder 104 and sent to the switcher 102 in response to customer requests.
- the head end 100 may also include a server 108 communicatively linked to a mass storage device 110 .
- the mass storage device 110 may store various types of video content, including video on demand (VOD), which the server 108 may retrieve and provide to the switcher 102 .
- VOD video on demand
- the switcher 102 may route local programming directly to the modulators 118 , which modulate the local programming, and route the non-local programming (including any VOD) to the encoders 116 .
- the encoders 116 may digitally encode the non-local programming.
- the encoded non-local programming may then be transmitted to the modulators 118 .
- the combiner 120 may be configured to receive the modulated analog video data and the modulated digital video data, combine the video data and transmit it via multiple radio frequency (RF) channels to the HFC network 122 .
- RF radio frequency
- the HFC network 122 may transmit the combined video data to the nodes 124 , 126 and 128 , which may retransmit the data to their respective neighborhoods 129 , 130 and 131 .
- the home 132 may receive this video data at the set-top box 134 , more specifically at the first decoder 138 and the second decoder 140 .
- the first and second decoders 138 and 140 may decode the digital portion of the video data and provide the decoded data to the user interface 142 , which then may provide the decoded data to the video display 136 .
- the encoders 116 and the decoders 138 and 140 of FIG. 1A may be implemented as computer code comprising computer readable instructions stored on a computer readable storage device, such as memory or another type of storage device.
- the computer code may be executed on a computer system by a processor, such as an application-specific integrated circuit (ASIC), or other type of circuit.
- ASIC application-specific integrated circuit
- computer code for implementing the encoders 116 may be executed on a computer system (such as a server) residing in the headend 100 .
- Computer code for the decoders 138 and 140 may be executed on the set-top box 134 , which constitutes a type of computer system.
- the code may exist as software programs comprised of program instructions in source code, object code, executable code or other formats. It should be appreciated that the computer code for the various components shown in FIG. 1A may reside anywhere in system 10 or elsewhere (such as in a cloud network), that is determined to be desirable or advantageous. Furthermore, the computer code may be located in one or more components, provided the instructions may be effectively performed by the one or more components.
- FIG. 1B shows an example of a computer system on which computer code for the encoders 116 and the decoders 138 and 140 may be executed.
- the computer system generally labeled 400 , includes a processor 401 , or processing circuitry, that may implement or execute software instructions performing some or all of the methods, functions and other steps described herein. Commands and data from processor 401 may be communicated over a communication bus 403 , for example.
- Computer system 400 may also include a computer readable storage device 402 , such as random access memory (RAM), where the software and data for processor 401 may reside during runtime. Storage device 402 may also include non-volatile data storage.
- Computer system 400 may include a network interface 404 for connecting to a network.
- the computer system 400 may reside in the headend 100 and execute the encoders 116 , and may also be embodied in the set-top box 134 to execute the decoders 138 and 140 . Additionally, the computer system 400 may reside in places other than the headend 100 and the set-top box 134 , and may be miniaturized so as to be integrated into a smartphone or tablet computer.
- Video encoding systems may achieve compression by removing redundancy in the video data, e.g., by removing those elements that can be discarded without greatly adversely affecting reproduction fidelity. Because video signals take place in time and space, most video encoding systems exploit both temporal and spatial redundancy present in these signals. Typically, there is high temporal correlation between successive frames. This is also true in the spatial domain for pixels which are close to each other. Thus, high compression gains are achieved by carefully exploiting these spatio-temporal correlations.
- HEVC High Efficiency Video Coding
- LCUs largest coding units
- CTBs coding tree blocks
- An LCU can be divided into four square blocks, called CUs (coding units), which are a quarter of the size of the LCU. Each CU can be further split into four smaller CUs, which are a quarter of the size of the original CU. The splitting process can be repeated until certain criteria are met.
- FIG. 3A shows an example of LCU partitioned into CUs. In general, for HEVC, the smallest CU used (e.g., a leaf node as described in further detail below) is considered a CU.
- a flag is set to “1” if the node is further split into sub-nodes. Otherwise, the flag is unset at “0.”
- the LCU partition of FIG. 3A can be represented by the quadtree of FIG. 3B .
- These “split flags” may be jointly coded with other flags in the video bitstream, including a skip mode flag, a merge mode flag, and a predictive unit (PU) mode flag, and the like.
- the split flags 10100 could be coded as overhead along with the other flags. Syntax information for a given CU may be defined recursively, and may depend on whether the CU is split into sub-CUs.
- a node that is not split may include one or more prediction units (PUs).
- PUs prediction units
- a PU represents all or a portion of the corresponding CU, and includes data for retrieving a reference sample for the PU for purposes of performing prediction for the CU.
- a CU of 2N ⁇ 2N can possess one of four possible patterns (N ⁇ N, N ⁇ 2N, 2N ⁇ N and 2N ⁇ 2N), as shown in FIG. 2B . While shown for a 2N ⁇ 2N CU, other PUs having different dimensions and corresponding patterns (e.g., square or rectangular) may be used.
- a CU can be either spatially or temporally predictive coded. If a CU is coded in intra mode, each PU of the CU can have its own spatial prediction direction. If a CU is coded in inter mode, each PU of the CU can have its own motion vector(s) and associated reference picture(s).
- the data defining the motion vector may describe, for example, a horizontal component of the motion vector, a vertical component of the motion vector, a resolution for the motion vector (e.g., one-quarter pixel precision or one-eighth pixel precision), a reference frame to which the motion vector points, and/or a reference list (e.g., list 0 or list 1 ) for the motion vector.
- a motion vector predictor index may be used to identify a motion vector predictor (e.g., MV of left neighbor, MV of co-located neighbor).
- Data for the CU defining the one or more PUs of the CU may also describe, for example, partitioning of the CU into the one or more PUs. Partitioning modes may differ between whether the CU is uncoded, intra-prediction mode encoded, or inter-prediction mode encoded.
- the prediction can be formed by a weighted average of the previously encoded samples, located above and to the left of the current block.
- the encoder may select the mode that minimizes the difference or cost between the original and the prediction and signals this selection in the control data.
- inter-prediction encoding video sequences have high temporal correlation between frames, enabling a block in the current frame to be accurately described by a region (or two regions in the case of bi-prediction) in the previously coded frames, which are known as reference frames.
- Inter-prediction utilizes previously encoded and reconstructed reference frames to develop a prediction using a block-based motion estimation and compensation technique.
- quantization may be performed.
- any transform operations may be bypassed using e.g., a transform skip mode in HEVC.
- Quantization generally refers to a process in which transform coefficients are quantized to possibly reduce the amount of data used to represent the coefficients, e.g., by converting high precision transform coefficients into a finite number of possible values.
- Each CU can also be divided into transform units (TUs).
- a block transform operation is performed on one or more TUs, to decorrelate the pixels within the block and compact the block energy into the low order coefficients of the transform block.
- one transform of 8 ⁇ 8 or 4 ⁇ 4 may be applied.
- a set of block transforms of different sizes may be applied to a CU, as shown in FIG. 5A where the left block is a CU partitioned into PUs and the right block is the associated set of transform units (TUs).
- the size and location of each block transform within a CU is described by a separate quadtree, called RQT.
- FIG. 5B shows the quadtree representation of TUs for the CU in the example of FIG. 5A .
- 11000 is coded and transmitted as part of the overhead.
- CUs, PUs, and TUs may be of N ⁇ N in size or M ⁇ N (or N ⁇ M), where N ⁇ M.
- the TUs and PUs of any given CU may be used for different purposes.
- TUs are typically used for transformation, quantizing and coding operations
- PUs are typically used for spatial and temporal prediction. There is not necessarily a direct relationship between the number of PUs and the number of TUs for a given CU.
- Video blocks may comprise blocks of pixel data in the pixel domain, or blocks of transform coefficients in the transform domain, e.g., following application of a transform, such as a discrete cosine transform (DCT), an integer transform, a wavelet transform, or a conceptually similar transform to residual data for a given video block, wherein the residual data represents pixel differences between video data for the block and predictive data generated for the block.
- video blocks may comprise blocks of quantized transform coefficients in the transform domain, wherein, following application of a transform to residual data for a given video block, the resulting transform coefficients are also quantized.
- quantization is the step that introduces loss, so that a balance between bitrate and reconstruction quality can be established.
- Block partitioning serves an important purpose in block-based video coding techniques. Using smaller blocks to code video data may result in better prediction of the data for locations of a video frame that include high levels of detail, and may therefore reduce the resulting error (e.g., deviation of the prediction data from source video data), represented as residual data.
- prediction exploits the spatial or temporal redundancy in a video sequence by modeling the correlation between sample blocks of various dimensions, such that only a small difference between the actual and the predicted signal needs to be encoded. A prediction for the current block is created from the samples which have already been encoded. While potentially reducing the residual data, such techniques may, however, require additional syntax information to indicate how the smaller blocks are partitioned relative to a video frame, and may result in an increased coded video bitrate. Accordingly, in some techniques, block partitioning may depend on balancing the desirable reduction in residual data against the resulting increase in bitrate of the coded video data due to the additional syntax information.
- blocks and the various partitions thereof may be considered video blocks.
- a slice may be considered to be a plurality of video blocks (e.g., macroblocks, or coding units), and/or sub-blocks (partitions of macroblocks, or sub-coding units such as sub-blocks of PUs, TUs, etc.).
- Each slice may be an independently decodable unit of a video frame.
- frames themselves may be decodable units, or other portions of a frame may be defined as decodable units.
- a GOP also referred to as a group of pictures, may be defined as a decodable unit.
- the encoders 116 may be, according to an embodiment of the disclosure, composed of several functional modules as shown in FIG. 4A . These modules may be implemented as hardware, software, or any combination of the two. Given a current PU, x, a prediction PU, x′, may first be obtained through either spatial prediction or temporal prediction.
- This spatial or temporal prediction may be performed by a spatial prediction module 129 or a temporal prediction module 130 respectively.
- spatial prediction directions there are several possible spatial prediction directions that the spatial prediction module 129 can perform per PU, including horizontal, vertical, 45-degree diagonal, 135-degree diagonal, DC, Planar, etc.
- spatial prediction may be performed differently for luma PU and chroma PU.
- an additional mode called IntraFromLuma, may be used for the Chroma intra prediction mode.
- a syntax indicates the spatial prediction direction per PU.
- the encoder 116 may perform temporal prediction through motion estimation operation. Specifically, the temporal prediction module 130 ( FIG. 4A ) may search for a best match prediction for the current PU over reference pictures.
- the best match prediction may be described by motion vector (MV) and associated reference picture (refIdx).
- MV motion vector
- refIdx reference picture
- a PU in B pictures can have up to two MVs. Both MV and refIdx may be part of the syntax in the bitstream.
- the prediction PU may then be subtracted from the current PU, resulting in the residual PU, e.
- the residual CU generated by grouping the residual PU, e, associated with the CU, may then be transformed by a transform module 117 , one transform unit (TU) at a time, resulting in the residual PU in the transform domain, E.
- the transform module 117 may use e.g., either a square or a non-square block transform.
- the transform coefficients E may then be quantized by a quantizer module 118 , converting the high precision transform coefficients into a finite number of possible values.
- the quantization process may reduce the bit depth associated with some or all of the coefficients. For example, an n-bit value may be rounded down to an m-bit value during quantization, where n is greater than m.
- external boundary conditions are used to produce modified one or more transform coefficients. For example, a lower range or value may be used in determining if a transform coefficient is given a nonzero value or just zeroed out.
- quantization is a lossy operation and the loss by quantization generally cannot be recovered.
- the quantized coefficients may then be entropy coded by an entropy coding module 120 , resulting in the final compression bits.
- the specific steps performed by the entropy coding module 120 will be discussed below in more detail. It should be noted that the prediction, transform, and quantization described above may be performed for any block of video data, e.g., to a PU and/or TU of a CU, or to a macroblock, depending on the specified coding standard.
- the encoder 116 may also take the quantized transform coefficients E and dequantize them with a dequantizer module 122 resulting in the dequantized transform coefficients E′.
- the dequantized transform coefficients are then inverse transformed by an inverse transform module 124 , resulting in the reconstructed residual PU, e′.
- the reconstructed residual PU, e′ is then added to the corresponding prediction, x′, either spatial or temporal, to form a reconstructed PU, x′′.
- a deblocking filter (DBF) operation may be performed on the reconstructed PU, x′′, first to reduce blocking artifacts.
- a sample adaptive offset (SAO) process may be conditionally performed after the completion of the deblocking filter process for the decoded picture, which compensates the pixel value offset between reconstructed pixels and original pixels.
- both the DBF operation and SAO process are implemented by adaptive loop filter functions, which may be performed conditionally by a loop filter module 126 over the reconstructed PU.
- the adaptive loop filter functions minimize the coding distortion between the input and output pictures.
- loop filter module 126 operates during an inter-picture prediction loop. If the reconstructed pictures are reference pictures, they may be stored in a reference buffer 128 for future temporal prediction.
- HEVC specifies two loop filters that are applied in order with the de-blocking filter (DBF) applied first and the sample adaptive offset (SAO) filter applied afterwards.
- the DBF is similar to the one used by H.264/MPEG-4 AVC but with a simpler design and better support for parallel processing.
- the DBF only applies to an 8 ⁇ 8 sample grid while with H.264/MPEG-4 AVC the DBF applies to a 4 ⁇ 4 sample grid.
- DBF uses an 8 ⁇ 8 sample grid since it causes no noticeable degradation and significantly improves parallel processing because the DBF no longer causes cascading interactions with other operations.
- Another change is that HEVC only allows for three DBF strengths of 0 to 2.
- HEVC also requires that the DBF first apply horizontal filtering for vertical edges to the picture and only after that does it apply vertical filtering for horizontal edges to the picture. This allows for multiple parallel threads to be used for the DBF.
- the SAO filter process is applied after the DBF and is made to allow for better reconstruction of the original signal amplitudes by using e.g., a look up table that includes some parameters that are based on a histogram analysis made by the encoder.
- the SAO filter has two basic types which are the edge offset (EO) type and the band offset (BO) type.
- One of the SAO types can be applied per coding tree block (CTB).
- the edge offset (EO) type has four sub-types corresponding to processing along four possible directions (e.g., horizontal, vertical, 135 degree, and 45 degree). For a given EO sub-type, the edge offset (EO) processing operates by comparing the value of a pixel to two of its neighbors using one of four different gradient patterns.
- An offset is applied to pixels in each of the four gradient patterns. For pixel values that are not in one of the gradient patterns, no offset is applied.
- the band offset (BO) processing is based directly on the sample amplitude which is split into 32 bands.
- An offset is applied to pixels in 16 of the 32 bands, where a group of 16 bands corresponds to a BO sub-type.
- the SAO filter process was designed to reduce distortion compared to the original signal by adding an offset to sample values. It can increase edge sharpness and reduce ringing and impulse artifacts.
- intra pictures such as an I picture
- inter pictures such as P pictures or B pictures
- An intra picture may be coded without referring to other pictures.
- spatial prediction may be used for a CU/PU inside an intra picture.
- An intra picture provides a possible point where decoding can begin.
- an inter picture generally aims for high compression.
- Inter picture supports both intra and inter prediction.
- a CU/PU in inter picture is either spatially or temporally predictive coded. Temporal references are the previously coded intra or inter pictures.
- An entropy decoding module 146 of the decoder 145 may decode the sign values, significance map and non-zero coefficients to recreate the quantized and transformed coefficients.
- the entropy decoding module 146 may perform the reverse of the procedure described in conjunction with the entropy coding module 120 —decoding the significance map along a scanning pattern made up of scanning lines.
- the entropy decoding module 146 then may provide the coefficients to a dequantizer module 147 , which dequantizes the matrix of coefficients, resulting in F.
- the dequantizer module 147 may provide the dequantized coefficients to an inverse transform module 149 .
- the inverse transform module 149 may perform an inverse transform operation on the coefficients resulting in e′. Filtering and spatial prediction may be applied in a manner described in conjunction with FIG. 4A .
- encoders operate by encoding slices of a video stream.
- a slice may be considered to be a plurality of video blocks (e.g., macroblocks, or coding units), and/or sub-blocks (partitions of macroblocks, or sub-coding units such as sub-blocks of PUs, TUs, etc.).
- Each slice may be an independently or dependent decodable unit of a video frame.
- Encoders 116 may use a flag !IdrPicFlag that indicates whether or not a non-instantaneous decoding refresh (non-IDR) picture is present in a sequence of video.
- An IDR picture contains only I slices, and may be the first picture in the bitstream in decoding order, or may appear later in the bitstream.
- Each IDR picture is the first picture of a coded video sequence (CVS) in decoding order.
- CVS coded video sequence
- non-IDR pictures may include I-, B- and P-slices.
- the flag !IdrPicFlag when the flag !IdrPicFlag is set to a first value, such as 0, then non-IDR picture data is not present in the sequence of video. However, when the flag !IdrPicFlag is equal to a second value, such as 1, then it is possible that non-IDR picture data is present in the sequence of video.
- the flag !IdrPicFlag is calculated according to the Network Abstraction unit (NAL unit) type information specified in the header of NAL that includes the current slice header.
- the slice header is a header for a slice.
- the flag !IdrPicFlag governs whether non-IDR picture data may be found in the picture that is associated with the slice header.
- the flag !IdrPicFlag may be located in other headers, such as in a picture header. If the flag !IdrPicFlag is in the picture header, the flag !IdrPicFlag applies to all pictures that are associated with this picture header.
- FIG. 6 illustrates an example slice header syntax 600 in current HEVC.
- Slice header syntax 600 describes two groupings 601 and 603 of the parameters for non-IDR pictures according to one embodiment.
- Syntax 600 governs how encoders 116 encode the slice header and how decoders 138 , 140 decode the slice header.
- syntax 600 is located in or is part of a sequence parameter set (SPS) header. Consequently, in such embodiments, the non-IDR flag is located in the SPS header.
- SPS sequence parameter set
- the flag !IdrPicFlag is shown. Also at 604 , another flag !IdrPicFlag in combination with flag sps_temporal_mvp_enable_flag is shown.
- the flag !IdrPicFlag may indicate whether a non-IDR picture is present for the sequence of pictures.
- encoders 116 may encode the value for the flag !IdrPicFlag as 0 or 1.
- the sps_temporal_mvp_enable_flag 1 specifies that slice_temporal_mvp_enabled flag is present in the slice headers of non-IDR pictures in the CVS.
- the sps_temporal_mvp_enable_flag equal to 0 specifies that slice_temporal_mvp_enabled flag is not present in slice headers and that temporal motion vector predictors are not used in the CVS.
- flag !IdrPicFlag 602 and flag !IdrPicFlag 604 include a conditional statement (e.g., if statement) that tests whether the flag !IdrPicFlag is enabled or disabled. If the flag !IdrPicFlag is disabled, then encoders 116 do not encode the parameters shown in groupings 601 and 603 in the encoded bitstream. Further, decoders 138 , 140 do not attempt to decode the parameters shown in groupings 601 and 602 if the flag !IdrPicFlag is disabled.
- a conditional statement e.g., if statement
- encoders 116 encode the non-IDR picture parameters shown in groupings 601 and 602 in the encoded bitstream and also decoders 138 , 140 decode the non-IDR picture parameters from the encoded bitstream.
- syntax 600 includes a parameter pic_order_cnt_lsb.
- This parameter specifies the picture order count modulo MaxPicOrderCntLsb for the current picture.
- the length of the pic_order_cnt_lsb syntax element is log 2_max_pic_order_cnt_lsb_minus4+4 bits.
- the value of the pic_order_cnt_lsb shall be in the range of 0 to MaxPicOrderCntLsb ⁇ 1, inclusive. When pic_order_cnt_lsb is not present, pic_order_cnt_lsb is inferred to be equal to 0.
- syntax 600 includes a parameter short_term_ref_pic_set_sps_flag.
- This parameter specifies how the short-term picture set of the current picture is created. For example, short_term_ref_pic_set_sps_flag equal to 1 specifies that the short-term reference picture set of the current picture is created using syntax elements in the active SPS. short_term_ref_pic_set_sps_flag equal to 0 specifies that the short-term reference picture set of the current picture is created using syntax elements in the short_term_ref_pic_set( )syntax structure in the slice header.
- syntax 600 includes a parameter short_term_ref_pic_set_idx.
- This parameter specifies the index to the list of the short-term reference picture sets specified in the active SPS that is used for creation of the reference picture set of the current picture.
- the syntax element short_term_ref_pic_set_idx is represented by Ceil(Log 2(num_short_term_ref_pic_sets)) bits. When not present, the value of short_term_ref_pic_set_idx is inferred to be equal to 0.
- the value of short_term_ref_pic_set_idx shall be in the range of 0 to num_short_term_ref_pic_sets ⁇ 1, inclusive.
- syntax 600 includes a parameter num_long_term_sps.
- This parameter specifies the number of candidate long-term reference pictures specified in the active SPS that are included in the long-term reference picture set of the current picture.
- the value of num_long_term_sps shall be in the range of 0 to Min(num_long_term_ref_pics_sps, sps_max_dec_pic_buffering_minus1[sps_max_sub_layers_minus1] ⁇ NumNegativePics[StRps Idx] ⁇ NumPositivePics[StRpsIdx]), inclusive.
- the value of num_long_term_sps is inferred to be equal to 0.
- syntax 600 includes a parameter num_long_term_pics.
- This parameter specifies the number of long-term reference pictures specified in the slice header, which are included in the long-term reference picture set of the current picture.
- the value of num_long_term_pics shall be in the range of 0 to sps_max_dec_pic_buffering_minus1[sps_max_sub_layers_minus1] ⁇ NumNegativePics[StRps Idx] ⁇ NumPositivePics[StRpsIdx] ⁇ num_long_term_sps, inclusive.
- the value of num_long_term_pics is inferred to be equal to 0.
- syntax 600 includes a parameter lt_idx_sps[1].
- This parameter specifies an index into the list of candidate long-term reference pictures specified in the active SPS for identification of the picture that is included in the long-term reference picture set of the current picture.
- the number of bits used to represent lt_idx_sps[i] is equal to Ceil(Log 2(num_long_term_ref_pics_sps)).
- the value of lt_idx_sps[i] is inferred to be equal to 0.
- the value of lt_idx_sps[i] shall be in the range of 0 to num_long_term_ref_pics_sps ⁇ 1, inclusive.
- syntax 600 includes a parameter poc_lsb_lt[i]. This parameter specifies the value of the picture order count modulo MaxPicOrderCntLsb of the i-th long-term reference picture that is included in the long-term reference picture set of the current picture.
- the length of the poc_lsb_lt[i] syntax element is log 2_max_pic_order_cnt_lsb_minus4+4 bits.
- syntax 600 includes a parameter used_by_curr_pic_lt_flag[i]. This parameter specifies whether the i-th long term reference picture is used for reference by the current picture.
- a used_by_curr_pic_lt_flag[i] equal to 0 specifies that the i-th long-term reference picture included in the long-term reference picture set of the current picture is not used for reference by the current picture.
- PocLsbLt[i] and UsedByCurrPicLt[i] may be derived as follows:
- syntax 600 includes a parameter delta_poc_msb_present_flag[i]. This parameter specifies if delta_poc_msb_cycle_lt[i] is present, which may be used to calculate the picture order of the long term reference picture set of the current picture.
- a delta_poc_msb_cycle_lt[i] is equal to 1 specifies that delta_poc_msb_cycle_lt[i] is present.
- delta_poc_msb_present_flag[i] equal to 0 specifies that delta_poc_msb_cycle_lt[i] is not present.
- syntax 600 includes a parameter delta_poc_msb_cycle_lt[i]. This parameter is used to determine the value of the most significant bits of the picture order count value of the i-th long-term reference picture that is included in the long-term reference picture set of the current picture. When delta_poc_msb_cycle_lt[i] is not present, it is inferred to be equal to 0.
- the parameter DeltaPocMsbCycleLt[i] is derived as follows:
- syntax 600 includes a parameter slice_temporal_mvp_enable_flag. This parameter specifies whether temporal motion vector predictors can be used for inter prediction. If slice_temporal_mvp_enabled flag is equal to 0, the syntax elements of the current picture shall be constrained such that no temporal motion vector predictor is used in decoding of the current picture. If slice_temporal_mvp_enabled flag is equal to 1, temporal motion vector predictors may be used in decoding of the current picture. When not present, the value of slice_temporal_mvp_enabled flag is inferred to be equal to 0.
- some syntax parameters are spread in different locations in the slice header, such as the two groupings 601 and 603 , relating to parameters for non-IDR pictures.
- This spreading of syntax parameters throughout the slice header may be arbitrary, e.g., the location of the s may not necessarily have a causal relationship with other parameters.
- Such design is less than ideal because it is messy for presentation of slice header syntax and because it may require more logic condition checking.
- the relative syntax parameters and function calls that are under a same condition may be grouped together, as shown in FIG. 7 .
- particular embodiments group the parameters for the non-IDR pictures together in grouping 701 in the slice header.
- encoders 116 encode the non-IDR picture parameters consecutively in the encoded bitstream.
- decoders 138 , 140 may decode the non-IDR picture parameters consecutively when the encoded bitstream is received.
- FIG. 7 illustrates an example slice header syntax using such syntax grouping for same non-IDR picture condition in HEVC.
- Slice header syntax 700 describes a single grouping 701 of the parameters for non-IDR pictures according to one embodiment.
- Syntax 700 may be for a slice header, but may be used for other headers.
- Syntax 700 governs how encoders 116 encode the slice header and how decoders 138 , 140 decode the SPS header.
- the flag !IdrPicFlag is shown. As described above, the flag !IdrPicFlag may indicate whether a non-IDR picture is present for the sequence of pictures.
- flag !IdrPicFlag 702 includes a conditional statement (e.g., if statement) that tests whether the flag !IdrPicFlag is enabled or disabled. If the flag !IdrPicFlag is disabled, then encoders 116 do not encode the parameters shown in grouping 701 in the encoded bitstream. Further, decoders 138 , 140 do not attempt to decode the parameters shown in grouping 701 if the flag !IdrPicFlag is disabled.
- conditional statement e.g., if statement
- encoders 116 encode the non-IDR picture parameters shown in grouping 701 in the encoded bitstream and also decoders 138 , 140 decode the non-IDR picture parameters from the encoded bitstream.
- syntax 700 includes a parameter pic_order_cnt_lsb. As described above, this parameter specifies the picture order count modulo MaxPicOrderCntLsb for the current picture.
- syntax 700 includes a parameter short_term_ref_pic_set_sps_flag. As described above, this parameter specifies how the short-term picture set of the current picture is created.
- syntax 700 includes a parameter short_term_ref_pic_set_dx. As described above, this parameter specifies the index to the list of the short-term reference picture sets specified in the active SPS that is used for creation of the reference picture set of the current picture.
- syntax 700 includes a parameter num_long_term_sps. As described above, this parameter specifies the number of candidate long-term reference pictures specified in the active SPS that are included in the long-term reference picture set of the current picture.
- syntax 700 includes a parameter num_long_term_pics. As described above, this parameter specifies the number of long-term reference pictures specified in the slice header, which are included in the long-term reference picture set of the current picture.
- syntax 700 includes a parameter lt_idx_sps[1]. As described above, this parameter specifies an index into the list of candidate long-term reference pictures specified in the active SPS for identification of the picture that is included in the long-term reference picture set of the current picture.
- syntax 700 includes a parameter poc_lsb_lt[i]. As described above, this parameter specifies the value of the picture order count modulo MaxPicOrderCntLsb of the i-th long-term reference picture that is included in the long-term reference picture set of the current picture.
- syntax 700 includes a parameter used_by_curr_pic_lt_flag[i]. As described above, this parameter specifies whether the i-th long term reference picture is used for reference by the current picture.
- syntax 700 includes a parameter delta_poc_msb_present_flag[i]. As described above, this parameter specifies if delta_poc_msb_cycle_lt[i] is present.
- syntax 700 includes a parameter delta_poc_msb_cycle_lt[i]. As described above, this parameter is used to determine the value of the most significant bits of the picture order count value of the i-th long-term reference picture that is included in the long-term reference picture set of the current picture.
- syntax 700 includes a parameter sps_temporal_mvp_enable_flag.
- this parameter specifies if temporal motion vector predictors may be used in the CVS.
- the sps_temporal_mvp_enable_flag 1 specifies that slice_temporal_mvp_enabled flag is present in the slice headers of non-IDR pictures in the CVS.
- the sps_temporal_mvp_enable_flag 0 specifies that slice_temporal_mvp_enabled flag is not present in slice headers and that temporal motion vector predictors are not used in the CVS.
- syntax 700 includes a parameter slice_temporal_mvp_enable_flag. As described above, this parameter specifies whether temporal motion vector predictors can be used for inter prediction.
- the parameter slice_temporal_mvp_enable_flag may be moved or grouped under a single condition 701 of non-IDR picture.
- This slice_temporal_mvp_enable_flag parameter may be moved because it has the same logic conditions as the group it is being moved to (i.e., !IdrPicFlag). Consequently, at 740 , syntax 700 illustrates the moved parameters 728 and 730 , shown with strikethrough.
- syntax 700 includes a parameter slice_sao_luma_flag. This parameter specifies whether SAO is enabled for a luma component in a current slice.
- a slice_sao_luma_flag equal to 1 specifies that SAO is enabled for the luma component in the current slice;
- slice_sao_luma_flag 0 specifies that SAO is disabled for the luma component in the current slice.
- slice_sao_luma_flag is not present, it is inferred to be equal to 0.
- syntax includes a parameter slice_sao_chroma_flag. This parameter specifies whether SAO is enabled for a chroma component in a current slice.
- a slice_sao_chroma_flag 1 specifies that SAO is enabled for the chroma component in the current slice;
- slice_sao_chroma_flag 0 specifies that SAO is disabled for the chroma component in the current slice.
- slice_sao_chroma_flag is not present, it is inferred to be equal to 0.
- the parameters slice_sao_luma_flag 732 and slice_sao_chroma_flag 734 may be placed after the group of non-IDR picture parameters 701 because of above grouping or reordering.
Abstract
Syntax cleanup methods and systems for High Efficiency Video Coding (HEVC) are disclosed.
Description
- The present application claims the benefit of U.S. provisional patent application No. 61/727,659, entitled “Non-IDR Picture Related Syntax Cleanup for HEVC” filed Nov. 16, 2012, and U.S. provisional patent application No. 61/785,781, entitled “DEVICES AND METHODS FOR SYNTAX CLEANUP FOR HIGH EFFICIENCY VIDEO CODING (HEVC)” filed Mar. 14, 2013, which are incorporated herein by reference in their entirety.
- The disclosure relates generally to the field of video coding, and more specifically to systems, devices and methods for cleaning up the slice segment header syntax design.
- Video compression uses block processing for many operations. In block processing, a block of neighboring pixels is grouped into a coding unit and compression operations treat this group of pixels as one unit to take advantage of correlations among neighboring pixels within the coding unit. Block-based processing often includes prediction coding and transform coding. Transform coding with quantization is a type of data compression which is commonly “lossy” as the quantization of a transform block taken from a source picture often discards data associated with the transform block in the source picture, thereby lowering its bandwidth requirement but often also resulting in quality loss in reproducing of the original transform block from the source picture.
- MPEG-4 AVC, also known as H.264, is an established video compression standard that uses transform coding in block processing. In H.264, a picture is divided into macroblocks (MBs) of 16×16 pixels. Each MB is often further divided into smaller blocks. Blocks equal in size to or smaller than a MB are predicted using intra-/inter-picture prediction, and a spatial transform along with quantization is applied to the prediction residuals. The quantized transform coefficients of the residuals are commonly encoded using entropy coding methods (e.g., variable length coding or arithmetic coding). Context Adaptive Binary Arithmetic Coding (CABAC) was introduced in H.264 to provide a substantially lossless compression efficiency by combining an adaptive binary arithmetic coding technique with a set of context models. Context model selection plays a role in CABAC in providing a degree of adaptation and redundancy reduction. H.264 specifies two kinds of scan patterns over 2D blocks. A zigzag scan is used for pictures coded with progressive video compression techniques and an alternative scan is for pictures coded with interlaced video compression techniques.
- HEVC (High Efficiency Video Coding), an international video coding standard developed to succeed H.264, extends transform block sizes to 16×16 and 32×32 pixels to benefit high definition (HD) video coding. HEVC may also use a variety of scan patterns, including zigzag.
- Within video compression standards such as HEVC, coding mechanisms for reducing spatial and temporal redundancies are desirable. Ongoing efforts are directed at increasing the efficiencies of encoders and decoders (codecs), which compress and decompress, respectively, video data streams. Because a purpose of codecs is to reduce the size of digital video frames, thereby promoting the efficient storage and communication of video, development in codec hardware and encoding/decoding processes continues.
- Accordingly, there is provided herein systems and methods for processing of non-IDR related syntax for HEVC.
- In a first aspect, method is disclosed comprising: evaluating, by the computing device, a single conditional statement once to determine if a current picture is a non-IDR picture; based on the evaluating of the single conditional statement, when a non-IDR flag indicates a non-IDR picture is present, performing: encoding or decoding, by the computing device, a first non-IDR parameter indicating a picture order count modulo MaxPicOrderCntLsb for the current picture; encoding or decoding, by the computing device, a second non-IDR parameter indicating how a short-term picture set of the current picture is created; encoding or decoding, by the computing device, a third non-IDR parameter indicating an index to a list of the short-term reference picture sets used for creation of a reference picture set of the current picture; encoding or decoding, by the computing device, a fourth non-IDR parameter indicating a number of candidate long-term reference pictures that are included in a long-term reference picture set of the current picture; encoding or decoding, by the computing device, a fifth non-IDR parameter indicating the number of long-term reference pictures that are included in the long-term reference picture set of the current picture; encoding or decoding, by the computing device, a sixth non-IDR parameter indicating an index into a list of candidate long-term reference pictures for identification of a picture that is included in the long-term reference picture set of the current picture; encoding or decoding, by the computing device, a seventh non-IDR parameter indicating a value of a picture order count modulo MaxPicOrderCntLsb of an i-th long-term reference picture that is included in the long-term reference picture set of the current picture; encoding or decoding, by the computing device, an eighth non-IDR parameter indicating whether the i-th long term reference picture is used for reference by the current picture; encoding or decoding, by the computing device, a ninth non-IDR parameter indicating how to calculate a picture order of the long term reference picture set of the current picture; encoding or decoding, by the computing device, a tenth non-IDR parameter indicating the value of most significant bits of a picture order count value of the i-th long-term reference picture that is included in the long-term reference picture set of the current picture; encoding or decoding, by the computing device, an eleventh non-IDR parameter indicating if temporal motion vector predictors are used in the sequence of video; encoding or decoding, by the computing device, a twelfth non-IDR parameter indicating whether temporal motion vector predictors can be used for inter prediction; wherein the first non-IDR parameter, the second non-IDR parameter, the third non-IDR parameter, the fourth non-IDR parameter, the fifth non-IDR parameter, the sixth non-IDR parameter, the seventh non-IDR parameter, the eighth non-IDR parameter, the ninth non-IDR parameter, the tenth non-IDR parameter, the eleventh non-IDR parameter and the twelfth non-IDR parameter are encoded or decoded consecutively without any other bits or syntax between the first non-IDR parameter, the second non-IDR parameter, the third non-IDR parameter, the fourth non-IDR parameter, the fifth non-IDR parameter, the sixth non-IDR parameter, the seventh non-IDR parameter, the eighth non-IDR parameter, the ninth non-IDR parameter, the tenth non-IDR parameter, the eleventh non-IDR parameter and the twelfth non-IDR parameter in or from an encoded bitstream associated with the sequence of video. In an embodiment of the first aspect, an order in the encoded bitstream is the first non-IDR parameter, the second non-IDR parameter, the third non-IDR parameter, the fourth non-IDR parameter, the fifth non-IDR parameter, the sixth non-IDR parameter, the seventh non-IDR parameter, the eighth non-IDR parameter, the ninth non-IDR parameter, the tenth non-IDR parameter, the eleventh non-IDR parameter and the twelfth non-IDR parameter. In an embodiment of the first aspect, the non-IDR flag is set to a first value to enable a non-IDR picture mode or set to a second value to disable the non-IDR picture mode. In an embodiment of the first aspect, the non-IDR flag indicates the non-IDR mode is disabled, not encoding or decoding the first non-IDR parameter, the second non-IDR parameter, the third non-IDR parameter, the fourth non-IDR parameter, the fifth non-IDR parameter, the sixth non-IDR parameter, the seventh non-IDR parameter, the eighth non-IDR parameter, the ninth non-IDR parameter, the tenth non-IDR parameter, the eleventh non-IDR parameter and the twelfth non-IDR parameter in or from the encoded bitstream associated with the sequence of video. In an embodiment of the first aspect, an order in the encoded bitstream varies among the first non-IDR parameter, the second non-IDR parameter, the third non-IDR parameter, the fourth non-IDR parameter, the fifth non-IDR parameter, the sixth non-IDR parameter, the seventh non-IDR parameter, the eighth non-IDR parameter, the ninth non-IDR parameter, the tenth non-IDR parameter, the eleventh non-IDR parameter and the twelfth non-IDR parameter. In an embodiment of the first aspect, the method further comprises: encoding or decoding, by the computing device, a first IDR parameter indicating if sample adaptive offset (SAO) is enabled for a luma component of the sequence of video, wherein the first IDR parameter is encoded or decoded consecutively without any other bits or syntax between the twelfth non-IDR parameter and first IDR parameter. In an embodiment of the first aspect, the method further comprises: encoding or decoding, by the computing device, a second IDR parameter indicating if sample adaptive offset (SAO) is enabled for a chroma component of the sequence of video, wherein the second IDR parameter is encoded or decoded consecutively without any other bits or syntax between the first IDR parameter and second IDR parameter. In an embodiment of the first aspect, all of the non-IDR parameters in a slice are grouped under a single non-IDR flag. In an embodiment of the first aspect, the non-IDR flag is located in a slice header.
- In a second aspect, a decoder is disclosed comprising: one or more computer processors; and a non-transitory computer-readable storage medium comprising instructions that, when executed, control the one or more computer processors to be configured for: determining an encoded bitstream; evaluating, by the computing device, a single conditional statement once to determine if a current picture is a non-IDR picture; based on the evaluating of the single conditional statement, when a non-IDR flag indicates a non-IDR picture is present, performing: decoding a first non-IDR parameter indicating a picture order count modulo MaxPicOrderCntLsb for the current picture; decoding a second non-IDR parameter indicating how a short-term picture set of the current picture is created; decoding a third non-IDR parameter indicating an index to a list of the short-term reference picture sets used for creation of a reference picture set of the current picture; decoding a fourth non-IDR parameter indicating a number of candidate long-term reference pictures that are included in a long-term reference picture set of the current picture; decoding a fifth non-IDR parameter indicating the number of long-term reference pictures that are included in the long-term reference picture set of the current picture; decoding a sixth non-IDR parameter indicating an index into a list of candidate long-term reference pictures for identification of a picture that is included in the long-term reference picture set of the current picture; decoding a seventh non-IDR parameter indicating a value of a picture order count modulo MaxPicOrderCntLsb of an i-th long-term reference picture that is included in the long-term reference picture set of the current picture; decoding an eighth non-IDR parameter indicating whether the i-th long term reference picture is used for reference by the current picture; decoding a ninth non-IDR parameter indicating how to calculate a picture order of the long term reference picture set of the current picture; decoding a tenth non-IDR parameter indicating the value of most significant bits of a picture order count value of the i-th long-term reference picture that is included in the long-term reference picture set of the current picture; decoding an eleventh non-IDR parameter indicating if temporal motion vector predictors are used in the sequence of video; decoding a twelfth non-IDR parameter indicating whether temporal motion vector predictors can be used for inter prediction; wherein the first non-IDR parameter, the second non-IDR parameter, the third non-IDR parameter, the fourth non-IDR parameter, the fifth non-IDR parameter, the sixth non-IDR parameter, the seventh non-IDR parameter, the eighth non-IDR parameter, the ninth non-IDR parameter, the tenth non-IDR parameter, the eleventh non-IDR parameter and the twelfth non-IDR parameter are decoded consecutively without any other bits or syntax between the first non-IDR parameter, the second non-IDR parameter, the third non-IDR parameter, the fourth non-IDR parameter, the fifth non-IDR parameter, the sixth non-IDR parameter, the seventh non-IDR parameter, the eighth non-IDR parameter, the ninth non-IDR parameter, the tenth non-IDR parameter, the eleventh non-IDR parameter and the twelfth non-IDR parameter from the encoded bitstream associated with the sequence of video. In an embodiment of the second aspect, an order in the encoded bitstream is the first non-IDR parameter, the second non-IDR parameter, the third non-IDR parameter, the fourth non-IDR parameter, the fifth non-IDR parameter, the sixth non-IDR parameter, the seventh non-IDR parameter, the eighth non-IDR parameter, the ninth non-IDR parameter, the tenth non-IDR parameter, the eleventh non-IDR parameter and the twelfth non-IDR parameter. In an embodiment of the second aspect, the non-IDR flag is set to a first value to enable a non-IDR picture mode or set to a second value to disable the non-IDR picture mode. In an embodiment of the second aspect, when the non-IDR flag indicates the non-IDR mode is disabled, not decoding the first non-IDR parameter, the second non-IDR parameter, the third non-IDR parameter, the fourth non-IDR parameter, the fifth non-IDR parameter, the sixth non-IDR parameter, the seventh non-IDR parameter, the eighth non-IDR parameter, the ninth non-IDR parameter, the tenth non-IDR parameter, the eleventh non-IDR parameter and the twelfth non-IDR parameter from the encoded bitstream associated with the sequence of video. In an embodiment of the second aspect, an order in the encoded bitstream varies among the first non-IDR parameter, the second non-IDR parameter, the third non-IDR parameter, the fourth non-IDR parameter, the fifth non-IDR parameter, the sixth non-IDR parameter, the seventh non-IDR parameter, the eighth non-IDR parameter, the ninth non-IDR parameter, the tenth non-IDR parameter, the eleventh non-IDR parameter and the twelfth non-IDR parameter. In an embodiment of the second aspect, all of the non-IDR parameters in a slice are grouped under a single non-IDR flag. In an embodiment of the second aspect, the non-IDR flag is located in a slice header.
- In a third aspect, an encoder is disclosed comprising: one or more computer processors; and a non-transitory computer-readable storage medium comprising instructions that, when executed, control the one or more computer processors to be configured for: evaluating a single conditional statement once to determine if a current picture is a non-IDR picture; based on the evaluating of the single conditional statement, when a non-IDR flag indicates a non-IDR picture is present, performing: encoding a first non-IDR parameter indicating a picture order count modulo MaxPicOrderCntLsb for the current picture; encoding a second non-IDR parameter indicating how a short-term picture set of the current picture is created; encoding a third non-IDR parameter indicating an index to a list of the short-term reference picture sets used for creation of a reference picture set of the current picture; encoding a fourth non-IDR parameter indicating a number of candidate long-term reference pictures that are included in a long-term reference picture set of the current picture; encoding a fifth non-IDR parameter indicating the number of long-term reference pictures that are included in the long-term reference picture set of the current picture; encoding a sixth non-IDR parameter indicating an index into a list of candidate long-term reference pictures for identification of a picture that is included in the long-term reference picture set of the current picture; encoding a seventh non-IDR parameter indicating a value of a picture order count modulo MaxPicOrderCntLsb of an i-th long-term reference picture that is included in the long-term reference picture set of the current picture; encoding an eighth non-IDR parameter indicating whether the i-th long term reference picture is used for reference by the current picture; encoding a ninth non-IDR parameter indicating how to calculate a picture order of the long term reference picture set of the current picture; encoding a tenth non-IDR parameter indicating the value of most significant bits of a picture order count value of the i-th long-term reference picture that is included in the long-term reference picture set of the current picture; encoding an eleventh non-IDR parameter indicating if temporal motion vector predictors are used in the sequence of video; encoding a twelfth non-IDR parameter indicating whether temporal motion vector predictors can be used for inter prediction; wherein the first non-IDR parameter, the second non-IDR parameter, the third non-IDR parameter, the fourth non-IDR parameter, the fifth non-IDR parameter, the sixth non-IDR parameter, the seventh non-IDR parameter, the eighth non-IDR parameter, the ninth non-IDR parameter, the tenth non-IDR parameter, the eleventh non-IDR parameter and the twelfth non-IDR parameter are encoded consecutively without any other bits or syntax between the first non-IDR parameter, the second non-IDR parameter, the third non-IDR parameter, the fourth non-IDR parameter, the fifth non-IDR parameter, the sixth non-IDR parameter, the seventh non-IDR parameter, the eighth non-IDR parameter, the ninth non-IDR parameter, the tenth non-IDR parameter, the eleventh non-IDR parameter and the twelfth non-IDR parameter in an encoded bitstream associated with the sequence of video. In an embodiment of the third aspect, an order in the encoded bitstream is the first non-IDR parameter, the second non-IDR parameter, the third non-IDR parameter, the fourth non-IDR parameter, the fifth non-IDR parameter, the sixth non-IDR parameter, the seventh non-IDR parameter, the eighth non-IDR parameter, the ninth non-IDR parameter, the tenth non-IDR parameter, the eleventh non-IDR parameter and the twelfth non-IDR parameter. In an embodiment of the third aspect, an order in the encoded bitstream varies among the first non-IDR parameter, the second non-IDR parameter, the third non-IDR parameter, the fourth non-IDR parameter, the fifth non-IDR parameter, the sixth non-IDR parameter, the seventh non-IDR parameter, the eighth non-IDR parameter, the ninth non-IDR parameter, the tenth non-IDR parameter, the eleventh non-IDR parameter and the twelfth non-IDR parameter. In an embodiment of the third aspect, all of the non-IDR parameters in a slice are grouped under a single non-IDR flag.
- The details of the present disclosure, both as to its structure and operation, may be understood in part by study of the accompanying drawings, in which like reference numerals refer to like parts. The drawings are not necessarily to scale, emphasis instead being placed upon illustrating the principles of the disclosure.
-
FIG. 1A is a video system in which the various embodiments of the disclosure may be used; -
FIG. 1B is a computer system on which embodiments of the disclosure may be implemented; -
FIGS. 2A , 2B, 3A and 3B illustrate certain video encoding principles according to embodiments of the disclosure; -
FIGS. 4A and 4B show possible architectures for an encoder and a decoder according to embodiments of the disclosure; -
FIGS. 5A and 5B illustrate further video coding principles according to embodiments of the disclosure; -
FIGS. 6A through 6C together illustrate an example of a syntax that describes a grouping of the parameters for non-IDR picture mode according to an embodiment of the disclosure; and -
FIG. 7 illustratesFIGS. 7A through 7C together illustrate an example of a syntax that describes a grouping of the parameters for non-IDR picture mode according to another embodiment of the disclosure. - In this disclosure, the term “coding” refers to encoding that occurs at the encoder or decoding that occurs at the decoder. Similarly, the term coder refers to an encoder, a decoder, or a combined encoder/decoder (CODEC). The terms coder, encoder, decoder and CODEC all refer to specific machines designed for the coding (encoding and/or decoding) of image and/or video data consistent with this disclosure. Image and video data generally consist of three components—one for a luma component which represents brightness of a pixel and two for chroma components which represent color information of a pixel.
- The present discussion begins with a very brief overview of some terms and techniques known in the art of digital image compression. This overview is not meant to teach the known art in any detail. Those skilled in the art know how to find greater details in textbooks and in the relevant standards.
- An example of a video system in which an embodiment of the disclosure may be used will now be described. It is understood that elements depicted as function blocks in the figures may be implemented as hardware, software, or a combination thereof. Furthermore, embodiments of the disclosure may also be employed on other systems, such as on a personal computer, smartphone or tablet computer.
- Referring to
FIG. 1A , a video system, generally labeled 10, may include ahead end 100 of a cable television network. Thehead end 100 may be configured to deliver video content toneighborhoods head end 100 may operate within a hierarchy of head ends, with the head ends higher in the hierarchy generally having greater functionality. Thehead end 100 may be communicatively linked to a satellite dish 112 and receive video signals for non-local programming from it. Thehead end 100 may also be communicatively linked to alocal station 114 that delivers local programming to thehead end 100. Thehead end 100 may include adecoder 104 that decodes the video signals received from the satellite dish 112, an off-air receiver 106 that receives the local programming from thelocal station 114, aswitcher 102 that routes data traffic among the various components of thehead end 100,encoders 116 that encode video signals for delivery to customers,modulators 118 that modulate signals for delivery to customers, and acombiner 120 that combines the various signals into a single, multi-channel transmission. - The
head end 100 may also be communicatively linked to a hybrid fiber cable (HFC)network 122. TheHFC network 122 may be communicatively linked to a plurality ofnodes nodes neighborhoods neighborhoods 130 ofFIG. 1A is shown in more detail. Theneighborhood 130 may include a number of residences, including ahome 132 shown inFIG. 1A . Within thehome 132 may be a set-top box 134 communicatively linked to avideo display 136. The set-top box 134 may include afirst decoder 138 and asecond decoder 140. The first andsecond decoders user interface 142 and amass storage device 144. Theuser interface 142 may be communicatively linked to thevideo display 136. - During operation,
head end 100 may receive local and nonlocal programming video signals from the satellite dish 112 and thelocal station 114. The nonlocal programming video signals may be received in the form of a digital video stream, while the local programming video signals may be received as an analog video stream. In some embodiments, local programming may also be received as a digital video stream. The digital video stream may be decoded by thedecoder 104 and sent to theswitcher 102 in response to customer requests. Thehead end 100 may also include aserver 108 communicatively linked to amass storage device 110. Themass storage device 110 may store various types of video content, including video on demand (VOD), which theserver 108 may retrieve and provide to theswitcher 102. Theswitcher 102 may route local programming directly to themodulators 118, which modulate the local programming, and route the non-local programming (including any VOD) to theencoders 116. Theencoders 116 may digitally encode the non-local programming. The encoded non-local programming may then be transmitted to themodulators 118. Thecombiner 120 may be configured to receive the modulated analog video data and the modulated digital video data, combine the video data and transmit it via multiple radio frequency (RF) channels to theHFC network 122. - The
HFC network 122 may transmit the combined video data to thenodes respective neighborhoods home 132 may receive this video data at the set-top box 134, more specifically at thefirst decoder 138 and thesecond decoder 140. The first andsecond decoders user interface 142, which then may provide the decoded data to thevideo display 136. - The
encoders 116 and thedecoders FIG. 1A (as well as all of the other steps and functions described herein) may be implemented as computer code comprising computer readable instructions stored on a computer readable storage device, such as memory or another type of storage device. The computer code may be executed on a computer system by a processor, such as an application-specific integrated circuit (ASIC), or other type of circuit. For example, computer code for implementing theencoders 116 may be executed on a computer system (such as a server) residing in theheadend 100. Computer code for thedecoders top box 134, which constitutes a type of computer system. The code may exist as software programs comprised of program instructions in source code, object code, executable code or other formats. It should be appreciated that the computer code for the various components shown inFIG. 1A may reside anywhere insystem 10 or elsewhere (such as in a cloud network), that is determined to be desirable or advantageous. Furthermore, the computer code may be located in one or more components, provided the instructions may be effectively performed by the one or more components. -
FIG. 1B shows an example of a computer system on which computer code for theencoders 116 and thedecoders processor 401, or processing circuitry, that may implement or execute software instructions performing some or all of the methods, functions and other steps described herein. Commands and data fromprocessor 401 may be communicated over acommunication bus 403, for example.Computer system 400 may also include a computerreadable storage device 402, such as random access memory (RAM), where the software and data forprocessor 401 may reside during runtime.Storage device 402 may also include non-volatile data storage.Computer system 400 may include anetwork interface 404 for connecting to a network. Other known electronic components may be added or substituted for the components depicted in thecomputer system 400. Thecomputer system 400 may reside in theheadend 100 and execute theencoders 116, and may also be embodied in the set-top box 134 to execute thedecoders computer system 400 may reside in places other than theheadend 100 and the set-top box 134, and may be miniaturized so as to be integrated into a smartphone or tablet computer. - Video encoding systems may achieve compression by removing redundancy in the video data, e.g., by removing those elements that can be discarded without greatly adversely affecting reproduction fidelity. Because video signals take place in time and space, most video encoding systems exploit both temporal and spatial redundancy present in these signals. Typically, there is high temporal correlation between successive frames. This is also true in the spatial domain for pixels which are close to each other. Thus, high compression gains are achieved by carefully exploiting these spatio-temporal correlations.
- A high-level description of how video data gets encoded and decoded by the
encoders 116 and thedecoders FIG. 2A . Unlike other video coding standards, in which the basic coding unit is a macroblock of 16×16 pixels, in HEVC, the LCU can be as large as 128×128 pixels. An LCU can be divided into four square blocks, called CUs (coding units), which are a quarter of the size of the LCU. Each CU can be further split into four smaller CUs, which are a quarter of the size of the original CU. The splitting process can be repeated until certain criteria are met.FIG. 3A shows an example of LCU partitioned into CUs. In general, for HEVC, the smallest CU used (e.g., a leaf node as described in further detail below) is considered a CU. - How a particular LCU is split into CUs can be represented by a quadtree. At each node of the quadtree, a flag is set to “1” if the node is further split into sub-nodes. Otherwise, the flag is unset at “0.” For example, the LCU partition of
FIG. 3A can be represented by the quadtree ofFIG. 3B . These “split flags” may be jointly coded with other flags in the video bitstream, including a skip mode flag, a merge mode flag, and a predictive unit (PU) mode flag, and the like. In the case of the quadtree ofFIG. 3B , the split flags 10100 could be coded as overhead along with the other flags. Syntax information for a given CU may be defined recursively, and may depend on whether the CU is split into sub-CUs. - A node that is not split (e.g., a node corresponding a terminal, or “leaf” node in a given quadtree) may include one or more prediction units (PUs). In general, a PU represents all or a portion of the corresponding CU, and includes data for retrieving a reference sample for the PU for purposes of performing prediction for the CU. Thus, at each leaf of a quadtree, a CU of 2N×2N can possess one of four possible patterns (N×N, N×2N, 2N×N and 2N×2N), as shown in
FIG. 2B . While shown for a 2N×2N CU, other PUs having different dimensions and corresponding patterns (e.g., square or rectangular) may be used. A CU can be either spatially or temporally predictive coded. If a CU is coded in intra mode, each PU of the CU can have its own spatial prediction direction. If a CU is coded in inter mode, each PU of the CU can have its own motion vector(s) and associated reference picture(s). The data defining the motion vector may describe, for example, a horizontal component of the motion vector, a vertical component of the motion vector, a resolution for the motion vector (e.g., one-quarter pixel precision or one-eighth pixel precision), a reference frame to which the motion vector points, and/or a reference list (e.g.,list 0 or list 1) for the motion vector. Additionally, a motion vector predictor index may be used to identify a motion vector predictor (e.g., MV of left neighbor, MV of co-located neighbor). Data for the CU defining the one or more PUs of the CU may also describe, for example, partitioning of the CU into the one or more PUs. Partitioning modes may differ between whether the CU is uncoded, intra-prediction mode encoded, or inter-prediction mode encoded. - In general, in intra-prediction encoding, a high level of spatial correlation is present between neighboring blocks in a frame. Consequently, a block can be predicted from the nearby encoded and reconstructed blocks, giving rise to the intra prediction. In some embodiments, the prediction can be formed by a weighted average of the previously encoded samples, located above and to the left of the current block. The encoder may select the mode that minimizes the difference or cost between the original and the prediction and signals this selection in the control data.
- In general, in inter-prediction encoding, video sequences have high temporal correlation between frames, enabling a block in the current frame to be accurately described by a region (or two regions in the case of bi-prediction) in the previously coded frames, which are known as reference frames. Inter-prediction utilizes previously encoded and reconstructed reference frames to develop a prediction using a block-based motion estimation and compensation technique.
- Following intra-predictive or inter-predictive encoding to produce predictive data and residual data, and following any transforms (such as the 4×4 or 8×8 integer transform used in H.264/AVC or a discrete cosine transform (DCT)) to produce transform coefficients, quantization of transform coefficients may be performed. In some embodiments, any transform operations may be bypassed using e.g., a transform skip mode in HEVC. Quantization generally refers to a process in which transform coefficients are quantized to possibly reduce the amount of data used to represent the coefficients, e.g., by converting high precision transform coefficients into a finite number of possible values. These steps will be discussed in more detail below.
- Each CU can also be divided into transform units (TUs). In some embodiments, a block transform operation is performed on one or more TUs, to decorrelate the pixels within the block and compact the block energy into the low order coefficients of the transform block. In some embodiments, one transform of 8×8 or 4×4 may be applied. In other embodiments, a set of block transforms of different sizes may be applied to a CU, as shown in
FIG. 5A where the left block is a CU partitioned into PUs and the right block is the associated set of transform units (TUs). The size and location of each block transform within a CU is described by a separate quadtree, called RQT.FIG. 5B shows the quadtree representation of TUs for the CU in the example ofFIG. 5A . In this example, 11000 is coded and transmitted as part of the overhead. As is appreciated, CUs, PUs, and TUs may be of N×N in size or M×N (or N×M), where N≠M. - The TUs and PUs of any given CU may be used for different purposes. TUs are typically used for transformation, quantizing and coding operations, while PUs are typically used for spatial and temporal prediction. There is not necessarily a direct relationship between the number of PUs and the number of TUs for a given CU.
- Video blocks may comprise blocks of pixel data in the pixel domain, or blocks of transform coefficients in the transform domain, e.g., following application of a transform, such as a discrete cosine transform (DCT), an integer transform, a wavelet transform, or a conceptually similar transform to residual data for a given video block, wherein the residual data represents pixel differences between video data for the block and predictive data generated for the block. In some cases, video blocks may comprise blocks of quantized transform coefficients in the transform domain, wherein, following application of a transform to residual data for a given video block, the resulting transform coefficients are also quantized. In video encoding, quantization is the step that introduces loss, so that a balance between bitrate and reconstruction quality can be established. These steps will be discussed further below.
- Block partitioning serves an important purpose in block-based video coding techniques. Using smaller blocks to code video data may result in better prediction of the data for locations of a video frame that include high levels of detail, and may therefore reduce the resulting error (e.g., deviation of the prediction data from source video data), represented as residual data. In general, prediction exploits the spatial or temporal redundancy in a video sequence by modeling the correlation between sample blocks of various dimensions, such that only a small difference between the actual and the predicted signal needs to be encoded. A prediction for the current block is created from the samples which have already been encoded. While potentially reducing the residual data, such techniques may, however, require additional syntax information to indicate how the smaller blocks are partitioned relative to a video frame, and may result in an increased coded video bitrate. Accordingly, in some techniques, block partitioning may depend on balancing the desirable reduction in residual data against the resulting increase in bitrate of the coded video data due to the additional syntax information.
- In general, blocks and the various partitions thereof (e.g., sub-blocks) may be considered video blocks. In addition, a slice may be considered to be a plurality of video blocks (e.g., macroblocks, or coding units), and/or sub-blocks (partitions of macroblocks, or sub-coding units such as sub-blocks of PUs, TUs, etc.). Each slice may be an independently decodable unit of a video frame. Alternatively, frames themselves may be decodable units, or other portions of a frame may be defined as decodable units. Furthermore, a GOP, also referred to as a group of pictures, may be defined as a decodable unit.
- The encoders 116 (
FIG. 1A ) may be, according to an embodiment of the disclosure, composed of several functional modules as shown inFIG. 4A . These modules may be implemented as hardware, software, or any combination of the two. Given a current PU, x, a prediction PU, x′, may first be obtained through either spatial prediction or temporal prediction. - This spatial or temporal prediction may be performed by a
spatial prediction module 129 or atemporal prediction module 130 respectively. - There are several possible spatial prediction directions that the
spatial prediction module 129 can perform per PU, including horizontal, vertical, 45-degree diagonal, 135-degree diagonal, DC, Planar, etc. In general, spatial prediction may be performed differently for luma PU and chroma PU. For example, including the Luma intra modes, an additional mode, called IntraFromLuma, may be used for the Chroma intra prediction mode. A syntax indicates the spatial prediction direction per PU. - The encoder 116 (
FIG. 1A ) may perform temporal prediction through motion estimation operation. Specifically, the temporal prediction module 130 (FIG. 4A ) may search for a best match prediction for the current PU over reference pictures. The best match prediction may be described by motion vector (MV) and associated reference picture (refIdx). Generally, a PU in B pictures can have up to two MVs. Both MV and refIdx may be part of the syntax in the bitstream. - The prediction PU may then be subtracted from the current PU, resulting in the residual PU, e. The residual CU, generated by grouping the residual PU, e, associated with the CU, may then be transformed by a
transform module 117, one transform unit (TU) at a time, resulting in the residual PU in the transform domain, E. To accomplish this task, thetransform module 117 may use e.g., either a square or a non-square block transform. - Referring back to
FIG. 4A , the transform coefficients E, may then be quantized by aquantizer module 118, converting the high precision transform coefficients into a finite number of possible values. The quantization process may reduce the bit depth associated with some or all of the coefficients. For example, an n-bit value may be rounded down to an m-bit value during quantization, where n is greater than m. In some embodiments, external boundary conditions are used to produce modified one or more transform coefficients. For example, a lower range or value may be used in determining if a transform coefficient is given a nonzero value or just zeroed out. As should be appreciated, quantization is a lossy operation and the loss by quantization generally cannot be recovered. - The quantized coefficients may then be entropy coded by an
entropy coding module 120, resulting in the final compression bits. The specific steps performed by theentropy coding module 120 will be discussed below in more detail. It should be noted that the prediction, transform, and quantization described above may be performed for any block of video data, e.g., to a PU and/or TU of a CU, or to a macroblock, depending on the specified coding standard. - To facilitate temporal and spatial prediction, the
encoder 116 may also take the quantized transform coefficients E and dequantize them with adequantizer module 122 resulting in the dequantized transform coefficients E′. The dequantized transform coefficients are then inverse transformed by aninverse transform module 124, resulting in the reconstructed residual PU, e′. The reconstructed residual PU, e′, is then added to the corresponding prediction, x′, either spatial or temporal, to form a reconstructed PU, x″. - Referring still to
FIG. 4A , a deblocking filter (DBF) operation may be performed on the reconstructed PU, x″, first to reduce blocking artifacts. A sample adaptive offset (SAO) process may be conditionally performed after the completion of the deblocking filter process for the decoded picture, which compensates the pixel value offset between reconstructed pixels and original pixels. In some embodiments, both the DBF operation and SAO process are implemented by adaptive loop filter functions, which may be performed conditionally by aloop filter module 126 over the reconstructed PU. In some embodiments, the adaptive loop filter functions minimize the coding distortion between the input and output pictures. In some embodiments,loop filter module 126 operates during an inter-picture prediction loop. If the reconstructed pictures are reference pictures, they may be stored in areference buffer 128 for future temporal prediction. - HEVC specifies two loop filters that are applied in order with the de-blocking filter (DBF) applied first and the sample adaptive offset (SAO) filter applied afterwards. The DBF is similar to the one used by H.264/MPEG-4 AVC but with a simpler design and better support for parallel processing. In HEVC the DBF only applies to an 8×8 sample grid while with H.264/MPEG-4 AVC the DBF applies to a 4×4 sample grid. DBF uses an 8×8 sample grid since it causes no noticeable degradation and significantly improves parallel processing because the DBF no longer causes cascading interactions with other operations. Another change is that HEVC only allows for three DBF strengths of 0 to 2. HEVC also requires that the DBF first apply horizontal filtering for vertical edges to the picture and only after that does it apply vertical filtering for horizontal edges to the picture. This allows for multiple parallel threads to be used for the DBF.
- The SAO filter process is applied after the DBF and is made to allow for better reconstruction of the original signal amplitudes by using e.g., a look up table that includes some parameters that are based on a histogram analysis made by the encoder. The SAO filter has two basic types which are the edge offset (EO) type and the band offset (BO) type. One of the SAO types can be applied per coding tree block (CTB). The edge offset (EO) type has four sub-types corresponding to processing along four possible directions (e.g., horizontal, vertical, 135 degree, and 45 degree). For a given EO sub-type, the edge offset (EO) processing operates by comparing the value of a pixel to two of its neighbors using one of four different gradient patterns. An offset is applied to pixels in each of the four gradient patterns. For pixel values that are not in one of the gradient patterns, no offset is applied. The band offset (BO) processing is based directly on the sample amplitude which is split into 32 bands. An offset is applied to pixels in 16 of the 32 bands, where a group of 16 bands corresponds to a BO sub-type. The SAO filter process was designed to reduce distortion compared to the original signal by adding an offset to sample values. It can increase edge sharpness and reduce ringing and impulse artifacts.
- In an embodiment of the disclosure, intra pictures (such as an I picture) and inter pictures (such as P pictures or B pictures) are supported by the encoder 116 (
FIG. 1A ). An intra picture may be coded without referring to other pictures. Hence, spatial prediction may be used for a CU/PU inside an intra picture. An intra picture provides a possible point where decoding can begin. On the other hand, an inter picture generally aims for high compression. Inter picture supports both intra and inter prediction. A CU/PU in inter picture is either spatially or temporally predictive coded. Temporal references are the previously coded intra or inter pictures. - When the
decoders 138 and 140 (FIG. 1A ) receive the bitstream, they perform the functions shown in e.g.,FIG. 4B . Anentropy decoding module 146 of thedecoder 145 may decode the sign values, significance map and non-zero coefficients to recreate the quantized and transformed coefficients. In decoding the significance map, theentropy decoding module 146 may perform the reverse of the procedure described in conjunction with theentropy coding module 120—decoding the significance map along a scanning pattern made up of scanning lines. Theentropy decoding module 146 then may provide the coefficients to adequantizer module 147, which dequantizes the matrix of coefficients, resulting in F. Thedequantizer module 147 may provide the dequantized coefficients to aninverse transform module 149. Theinverse transform module 149 may perform an inverse transform operation on the coefficients resulting in e′. Filtering and spatial prediction may be applied in a manner described in conjunction withFIG. 4A . - As is known by those of skill in the art, encoders operate by encoding slices of a video stream. As mentioned above, a slice may be considered to be a plurality of video blocks (e.g., macroblocks, or coding units), and/or sub-blocks (partitions of macroblocks, or sub-coding units such as sub-blocks of PUs, TUs, etc.). Each slice may be an independently or dependent decodable unit of a video frame.
-
Encoders 116 may use a flag !IdrPicFlag that indicates whether or not a non-instantaneous decoding refresh (non-IDR) picture is present in a sequence of video. An IDR picture contains only I slices, and may be the first picture in the bitstream in decoding order, or may appear later in the bitstream. Each IDR picture is the first picture of a coded video sequence (CVS) in decoding order. Thus, non-IDR pictures may include I-, B- and P-slices. - In an example, when the flag !IdrPicFlag is set to a first value, such as 0, then non-IDR picture data is not present in the sequence of video. However, when the flag !IdrPicFlag is equal to a second value, such as 1, then it is possible that non-IDR picture data is present in the sequence of video.
- In one embodiment, the flag !IdrPicFlag is calculated according to the Network Abstraction unit (NAL unit) type information specified in the header of NAL that includes the current slice header. The slice header is a header for a slice. In this case, the flag !IdrPicFlag governs whether non-IDR picture data may be found in the picture that is associated with the slice header. Although the flag !IdrPicFlag is discussed as being in the slice header, the flag !IdrPicFlag may be located in other headers, such as in a picture header. If the flag !IdrPicFlag is in the picture header, the flag !IdrPicFlag applies to all pictures that are associated with this picture header.
-
FIG. 6 illustrates an exampleslice header syntax 600 in current HEVC.Slice header syntax 600 describes twogroupings Syntax 600 governs howencoders 116 encode the slice header and howdecoders syntax 600 is located in or is part of a sequence parameter set (SPS) header. Consequently, in such embodiments, the non-IDR flag is located in the SPS header. - At 602, the flag !IdrPicFlag is shown. Also at 604, another flag !IdrPicFlag in combination with flag sps_temporal_mvp_enable_flag is shown. The flag !IdrPicFlag may indicate whether a non-IDR picture is present for the sequence of pictures. For example, as described above,
encoders 116 may encode the value for the flag !IdrPicFlag as 0 or 1. The sps_temporal_mvp_enable_flag equal to 1 specifies that slice_temporal_mvp_enabled flag is present in the slice headers of non-IDR pictures in the CVS. The sps_temporal_mvp_enable_flag equal to 0 specifies that slice_temporal_mvp_enabled flag is not present in slice headers and that temporal motion vector predictors are not used in the CVS. - As shown, flag !
IdrPicFlag 602 and flag !IdrPicFlag 604 include a conditional statement (e.g., if statement) that tests whether the flag !IdrPicFlag is enabled or disabled. If the flag !IdrPicFlag is disabled, then encoders 116 do not encode the parameters shown ingroupings decoders groupings encoders 116 encode the non-IDR picture parameters shown ingroupings decoders - At 608,
syntax 600 includes a parameter pic_order_cnt_lsb. This parameter specifies the picture order count modulo MaxPicOrderCntLsb for the current picture. The length of the pic_order_cnt_lsb syntax element is log 2_max_pic_order_cnt_lsb_minus4+4 bits. The value of the pic_order_cnt_lsb shall be in the range of 0 to MaxPicOrderCntLsb−1, inclusive. When pic_order_cnt_lsb is not present, pic_order_cnt_lsb is inferred to be equal to 0. - At 610,
syntax 600 includes a parameter short_term_ref_pic_set_sps_flag. This parameter specifies how the short-term picture set of the current picture is created. For example, short_term_ref_pic_set_sps_flag equal to 1 specifies that the short-term reference picture set of the current picture is created using syntax elements in the active SPS. short_term_ref_pic_set_sps_flag equal to 0 specifies that the short-term reference picture set of the current picture is created using syntax elements in the short_term_ref_pic_set( )syntax structure in the slice header. - At 612,
syntax 600 includes a parameter short_term_ref_pic_set_idx. This parameter specifies the index to the list of the short-term reference picture sets specified in the active SPS that is used for creation of the reference picture set of the current picture. The syntax element short_term_ref_pic_set_idx is represented by Ceil(Log 2(num_short_term_ref_pic_sets)) bits. When not present, the value of short_term_ref_pic_set_idx is inferred to be equal to 0. The value of short_term_ref_pic_set_idx shall be in the range of 0 to num_short_term_ref_pic_sets−1, inclusive. - At 614,
syntax 600 includes a parameter num_long_term_sps. This parameter specifies the number of candidate long-term reference pictures specified in the active SPS that are included in the long-term reference picture set of the current picture. The value of num_long_term_sps shall be in the range of 0 to Min(num_long_term_ref_pics_sps, sps_max_dec_pic_buffering_minus1[sps_max_sub_layers_minus1]−NumNegativePics[StRps Idx]−NumPositivePics[StRpsIdx]), inclusive. When not present, the value of num_long_term_sps is inferred to be equal to 0. - At 616,
syntax 600 includes a parameter num_long_term_pics. This parameter specifies the number of long-term reference pictures specified in the slice header, which are included in the long-term reference picture set of the current picture. The value of num_long_term_pics shall be in the range of 0 to sps_max_dec_pic_buffering_minus1[sps_max_sub_layers_minus1]−NumNegativePics[StRps Idx]−NumPositivePics[StRpsIdx]−num_long_term_sps, inclusive. When not present, the value of num_long_term_pics is inferred to be equal to 0. - At 618,
syntax 600 includes a parameter lt_idx_sps[1]. This parameter specifies an index into the list of candidate long-term reference pictures specified in the active SPS for identification of the picture that is included in the long-term reference picture set of the current picture. The number of bits used to represent lt_idx_sps[i] is equal to Ceil(Log 2(num_long_term_ref_pics_sps)). When not present, the value of lt_idx_sps[i] is inferred to be equal to 0. The value of lt_idx_sps[i] shall be in the range of 0 to num_long_term_ref_pics_sps−1, inclusive. - At 620,
syntax 600 includes a parameter poc_lsb_lt[i]. This parameter specifies the value of the picture order count modulo MaxPicOrderCntLsb of the i-th long-term reference picture that is included in the long-term reference picture set of the current picture. The length of the poc_lsb_lt[i] syntax element is log 2_max_pic_order_cnt_lsb_minus4+4 bits. - At 622,
syntax 600 includes a parameter used_by_curr_pic_lt_flag[i]. This parameter specifies whether the i-th long term reference picture is used for reference by the current picture. A used_by_curr_pic_lt_flag[i] equal to 0 specifies that the i-th long-term reference picture included in the long-term reference picture set of the current picture is not used for reference by the current picture. - The parameters PocLsbLt[i] and UsedByCurrPicLt[i] may be derived as follows:
-
- If i is less than num_long_term_sps, PocLsbLt[i] is set equal to lt_ref_pic_poc_lsb_sps[lt_idx_sps[i]] and UsedByCurrPicLt[i] is set equal to used_by_curr_pic_lt_sps_flag[lt_idx_sps[i]].
- Otherwise, PocLsbLt[i] is set equal to poc_lsb_lt[i] and UsedByCurrPicLt[i] is set equal to used_by_curr_pic_lt_flag[i].
- At 624,
syntax 600 includes a parameter delta_poc_msb_present_flag[i]. This parameter specifies if delta_poc_msb_cycle_lt[i] is present, which may be used to calculate the picture order of the long term reference picture set of the current picture. A delta_poc_msb_cycle_lt[i] is equal to 1 specifies that delta_poc_msb_cycle_lt[i] is present. delta_poc_msb_present_flag[i] equal to 0 specifies that delta_poc_msb_cycle_lt[i] is not present. - At 626,
syntax 600 includes a parameter delta_poc_msb_cycle_lt[i]. This parameter is used to determine the value of the most significant bits of the picture order count value of the i-th long-term reference picture that is included in the long-term reference picture set of the current picture. When delta_poc_msb_cycle_lt[i] is not present, it is inferred to be equal to 0. The parameter DeltaPocMsbCycleLt[i] is derived as follows: -
• if( i == 0 || i == num_long_term_sps ) DeltaPocMsbCycleLt[ i ] = delta_poc_msb_cycle_lt[ i ] • else DeltaPocMsbCycleLt[i ] = delta_poc_msb_cycle_lt[ i ] + DeltaPocMsbCycleLt[ i − 1 ] - As described above, at 604, another flag !IdrPicFlag in combination with flag sps_temporal_mvp_enable_flag is shown. At 630,
syntax 600 includes a parameter slice_temporal_mvp_enable_flag. This parameter specifies whether temporal motion vector predictors can be used for inter prediction. If slice_temporal_mvp_enabled flag is equal to 0, the syntax elements of the current picture shall be constrained such that no temporal motion vector predictor is used in decoding of the current picture. If slice_temporal_mvp_enabled flag is equal to 1, temporal motion vector predictors may be used in decoding of the current picture. When not present, the value of slice_temporal_mvp_enabled flag is inferred to be equal to 0. - From reviewing
FIG. 6 , some syntax parameters, even under the same logic conditions, are spread in different locations in the slice header, such as the twogroupings - Thus, in order to save logic checks and also have a better presentation, the relative syntax parameters and function calls that are under a same condition (i.e., non-IDR picture) may be grouped together, as shown in
FIG. 7 . For example, particular embodiments group the parameters for the non-IDR pictures together in grouping 701 in the slice header. For example,encoders 116 encode the non-IDR picture parameters consecutively in the encoded bitstream. Then,decoders -
FIG. 7 illustrates an example slice header syntax using such syntax grouping for same non-IDR picture condition in HEVC.Slice header syntax 700 describes asingle grouping 701 of the parameters for non-IDR pictures according to one embodiment.Syntax 700 may be for a slice header, but may be used for other headers.Syntax 700 governs howencoders 116 encode the slice header and howdecoders - At 702, the flag !IdrPicFlag is shown. As described above, the flag !IdrPicFlag may indicate whether a non-IDR picture is present for the sequence of pictures.
- As shown, flag !
IdrPicFlag 702 includes a conditional statement (e.g., if statement) that tests whether the flag !IdrPicFlag is enabled or disabled. If the flag !IdrPicFlag is disabled, then encoders 116 do not encode the parameters shown ingrouping 701 in the encoded bitstream. Further,decoders grouping 701 if the flag !IdrPicFlag is disabled. However, if the flag !IdrPicFlag is enabled, then the conditional statement evaluates to true, andencoders 116 encode the non-IDR picture parameters shown ingrouping 701 in the encoded bitstream and alsodecoders - At 708,
syntax 700 includes a parameter pic_order_cnt_lsb. As described above, this parameter specifies the picture order count modulo MaxPicOrderCntLsb for the current picture. - At 710,
syntax 700 includes a parameter short_term_ref_pic_set_sps_flag. As described above, this parameter specifies how the short-term picture set of the current picture is created. - At 712,
syntax 700 includes a parameter short_term_ref_pic_set_dx. As described above, this parameter specifies the index to the list of the short-term reference picture sets specified in the active SPS that is used for creation of the reference picture set of the current picture. - At 714,
syntax 700 includes a parameter num_long_term_sps. As described above, this parameter specifies the number of candidate long-term reference pictures specified in the active SPS that are included in the long-term reference picture set of the current picture. - At 716,
syntax 700 includes a parameter num_long_term_pics. As described above, this parameter specifies the number of long-term reference pictures specified in the slice header, which are included in the long-term reference picture set of the current picture. - At 718,
syntax 700 includes a parameter lt_idx_sps[1]. As described above, this parameter specifies an index into the list of candidate long-term reference pictures specified in the active SPS for identification of the picture that is included in the long-term reference picture set of the current picture. - At 720,
syntax 700 includes a parameter poc_lsb_lt[i]. As described above, this parameter specifies the value of the picture order count modulo MaxPicOrderCntLsb of the i-th long-term reference picture that is included in the long-term reference picture set of the current picture. - At 722,
syntax 700 includes a parameter used_by_curr_pic_lt_flag[i]. As described above, this parameter specifies whether the i-th long term reference picture is used for reference by the current picture. - At 724,
syntax 700 includes a parameter delta_poc_msb_present_flag[i]. As described above, this parameter specifies if delta_poc_msb_cycle_lt[i] is present. - At 726,
syntax 700 includes a parameter delta_poc_msb_cycle_lt[i]. As described above, this parameter is used to determine the value of the most significant bits of the picture order count value of the i-th long-term reference picture that is included in the long-term reference picture set of the current picture. - At 728,
syntax 700 includes a parameter sps_temporal_mvp_enable_flag. As described above, this parameter specifies if temporal motion vector predictors may be used in the CVS. The sps_temporal_mvp_enable_flag equal to 1 specifies that slice_temporal_mvp_enabled flag is present in the slice headers of non-IDR pictures in the CVS. The sps_temporal_mvp_enable_flag equal to 0 specifies that slice_temporal_mvp_enabled flag is not present in slice headers and that temporal motion vector predictors are not used in the CVS. - At 730,
syntax 700 includes a parameter slice_temporal_mvp_enable_flag. As described above, this parameter specifies whether temporal motion vector predictors can be used for inter prediction. - From comparing
FIGS. 6 and 7 , the parameter slice_temporal_mvp_enable_flag may be moved or grouped under asingle condition 701 of non-IDR picture. This slice_temporal_mvp_enable_flag parameter may be moved because it has the same logic conditions as the group it is being moved to (i.e., !IdrPicFlag). Consequently, at 740,syntax 700 illustrates the movedparameters 728 and 730, shown with strikethrough. - In addition, at 732,
syntax 700 includes a parameter slice_sao_luma_flag. This parameter specifies whether SAO is enabled for a luma component in a current slice. A slice_sao_luma_flag equal to 1 specifies that SAO is enabled for the luma component in the current slice; slice_sao_luma_flag equal to 0 specifies that SAO is disabled for the luma component in the current slice. When slice_sao_luma_flag is not present, it is inferred to be equal to 0. - At 734, syntax includes a parameter slice_sao_chroma_flag. This parameter specifies whether SAO is enabled for a chroma component in a current slice. A slice_sao_chroma_flag equal to 1 specifies that SAO is enabled for the chroma component in the current slice; slice_sao_chroma_flag equal to 0 specifies that SAO is disabled for the chroma component in the current slice. When slice_sao_chroma_flag is not present, it is inferred to be equal to 0.
- As shown in
FIG. 7 , the parameters slice_sao_luma_flag 732 andslice_sao_chroma_flag 734 may be placed after the group ofnon-IDR picture parameters 701 because of above grouping or reordering. - While only a few examples have been shown, other syntax positions are contemplated. For example, under a specific logic condition, alternative relative positions of syntaxes are possible.
- The above description of the disclosed embodiments is provided to enable any person skilled in the art to make or use the disclosure. Various modifications to these embodiments will be readily apparent to those skilled in the art, and the generic principles described herein can be applied to other embodiments without departing from the spirit or scope of the disclosure. Thus, it is to be understood that the description and drawings presented herein represent exemplary embodiments of the disclosure and are therefore representative of the subject matter which is broadly contemplated by the present disclosure. It is further understood that the scope of the present disclosure fully encompasses other embodiments and that the scope of the present disclosure is accordingly limited by nothing other than the appended claims.
Claims (20)
1. A method comprising:
evaluating, by the computing device, a single conditional statement once to determine if a current picture is a non-IDR picture;
based on the evaluating of the single conditional statement, when a non-IDR flag indicates a non-IDR picture is present, performing:
encoding or decoding, by the computing device, a first non-IDR parameter indicating a picture order count modulo MaxPicOrderCntLsb for the current picture;
encoding or decoding, by the computing device, a second non-IDR parameter indicating how a short-term picture set of the current picture is created;
encoding or decoding, by the computing device, a third non-IDR parameter indicating an index to a list of the short-term reference picture sets used for creation of a reference picture set of the current picture;
encoding or decoding, by the computing device, a fourth non-IDR parameter indicating a number of candidate long-term reference pictures that are included in a long-term reference picture set of the current picture;
encoding or decoding, by the computing device, a fifth non-IDR parameter indicating the number of long-term reference pictures that are included in the long-term reference picture set of the current picture;
encoding or decoding, by the computing device, a sixth non-IDR parameter indicating an index into a list of candidate long-term reference pictures for identification of a picture that is included in the long-term reference picture set of the current picture;
encoding or decoding, by the computing device, a seventh non-IDR parameter indicating a value of a picture order count modulo MaxPicOrderCntLsb of an i-th long-term reference picture that is included in the long-term reference picture set of the current picture;
encoding or decoding, by the computing device, an eighth non-IDR parameter indicating whether the i-th long term reference picture is used for reference by the current picture;
encoding or decoding, by the computing device, a ninth non-IDR parameter indicating how to calculate a picture order of the long term reference picture set of the current picture;
encoding or decoding, by the computing device, a tenth non-IDR parameter indicating the value of most significant bits of a picture order count value of the i-th long-term reference picture that is included in the long-term reference picture set of the current picture;
encoding or decoding, by the computing device, an eleventh non-IDR parameter indicating if temporal motion vector predictors are used in the sequence of video;
encoding or decoding, by the computing device, a twelfth non-IDR parameter indicating whether temporal motion vector predictors can be used for inter prediction;
wherein the first non-IDR parameter, the second non-IDR parameter, the third non-IDR parameter, the fourth non-IDR parameter, the fifth non-IDR parameter, the sixth non-IDR parameter, the seventh non-IDR parameter, the eighth non-IDR parameter, the ninth non-IDR parameter, the tenth non-IDR parameter, the eleventh non-IDR parameter and the twelfth non-IDR parameter are encoded or decoded consecutively without any other bits or syntax between the first non-IDR parameter, the second non-IDR parameter, the third non-IDR parameter, the fourth non-IDR parameter, the fifth non-IDR parameter, the sixth non-IDR parameter, the seventh non-IDR parameter, the eighth non-IDR parameter, the ninth non-IDR parameter, the tenth non-IDR parameter, the eleventh non-IDR parameter and the twelfth non-IDR parameter in or from an encoded bitstream associated with the sequence of video.
2. The method of claim 1 , wherein an order in the encoded bitstream is the first non-IDR parameter, the second non-IDR parameter, the third non-IDR parameter, the fourth non-IDR parameter, the fifth non-IDR parameter, the sixth non-IDR parameter, the seventh non-IDR parameter, the eighth non-IDR parameter, the ninth non-IDR parameter, the tenth non-IDR parameter, the eleventh non-IDR parameter and the twelfth non-IDR parameter.
3. The method of claim 1 , wherein the non-IDR flag is set to a first value to enable a non-IDR picture mode or set to a second value to disable the non-IDR picture mode.
4. The method of claim 1 , wherein when the non-IDR flag indicates the non-IDR mode is disabled, not encoding or decoding the first non-IDR parameter, the second non-IDR parameter, the third non-IDR parameter, the fourth non-IDR parameter, the fifth non-IDR parameter, the sixth non-IDR parameter, the seventh non-IDR parameter, the eighth non-IDR parameter, the ninth non-IDR parameter, the tenth non-IDR parameter, the eleventh non-IDR parameter and the twelfth non-IDR parameter in or from the encoded bitstream associated with the sequence of video.
5. The method of claim 1 , wherein an order in the encoded bitstream varies among the first non-IDR parameter, the second non-IDR parameter, the third non-IDR parameter, the fourth non-IDR parameter, the fifth non-IDR parameter, the sixth non-IDR parameter, the seventh non-IDR parameter, the eighth non-IDR parameter, the ninth non-IDR parameter, the tenth non-IDR parameter, the eleventh non-IDR parameter and the twelfth non-IDR parameter.
6. The method of claim 1 , further comprising:
encoding or decoding, by the computing device, a first IDR parameter indicating if sample adaptive offset (SAO) is enabled for a luma component of the sequence of video,
wherein the first IDR parameter is encoded or decoded consecutively without any other bits or syntax between the twelfth non-IDR parameter and first IDR parameter.
7. The method of claim 6 , further comprising:
encoding or decoding, by the computing device, a second IDR parameter indicating if sample adaptive offset (SAO) is enabled for a chroma component of the sequence of video,
wherein the second IDR parameter is encoded or decoded consecutively without any other bits or syntax between the first IDR parameter and second IDR parameter.
8. The method of claim 1 , wherein all of the non-IDR parameters in a slice are grouped under a single non-IDR flag.
9. The method of claim 1 , wherein the non-IDR flag is located in a slice header.
10. A decoder comprising:
one or more computer processors; and
a non-transitory computer-readable storage medium comprising instructions that, when executed, control the one or more computer processors to be configured for:
determining an encoded bitstream;
evaluating, by the computing device, a single conditional statement once to determine if a current picture is a non-IDR picture;
based on the evaluating of the single conditional statement, when a non-IDR flag indicates a non-IDR picture is present, performing:
decoding a first non-IDR parameter indicating a picture order count modulo MaxPicOrderCntLsb for the current picture;
decoding a second non-IDR parameter indicating how a short-term picture set of the current picture is created;
decoding a third non-IDR parameter indicating an index to a list of the short-term reference picture sets used for creation of a reference picture set of the current picture;
decoding a fourth non-IDR parameter indicating a number of candidate long-term reference pictures that are included in a long-term reference picture set of the current picture;
decoding a fifth non-IDR parameter indicating the number of long-term reference pictures that are included in the long-term reference picture set of the current picture;
decoding a sixth non-IDR parameter indicating an index into a list of candidate long-term reference pictures for identification of a picture that is included in the long-term reference picture set of the current picture;
decoding a seventh non-IDR parameter indicating a value of a picture order count modulo MaxPicOrderCntLsb of an i-th long-term reference picture that is included in the long-term reference picture set of the current picture;
decoding an eighth non-IDR parameter indicating whether the i-th long term reference picture is used for reference by the current picture;
decoding a ninth non-IDR parameter indicating how to calculate a picture order of the long term reference picture set of the current picture;
decoding a tenth non-IDR parameter indicating the value of most significant bits of a picture order count value of the i-th long-term reference picture that is included in the long-term reference picture set of the current picture;
decoding an eleventh non-IDR parameter indicating if temporal motion vector predictors are used in the sequence of video;
decoding a twelfth non-IDR parameter indicating whether temporal motion vector predictors can be used for inter prediction;
wherein the first non-IDR parameter, the second non-IDR parameter, the third non-IDR parameter, the fourth non-IDR parameter, the fifth non-IDR parameter, the sixth non-IDR parameter, the seventh non-IDR parameter, the eighth non-IDR parameter, the ninth non-IDR parameter, the tenth non-IDR parameter, the eleventh non-IDR parameter and the twelfth non-IDR parameter are decoded consecutively without any other bits or syntax between the first non-IDR parameter, the second non-IDR parameter, the third non-IDR parameter, the fourth non-IDR parameter, the fifth non-IDR parameter, the sixth non-IDR parameter, the seventh non-IDR parameter, the eighth non-IDR parameter, the ninth non-IDR parameter, the tenth non-IDR parameter, the eleventh non-IDR parameter and the twelfth non-IDR parameter from the encoded bitstream associated with the sequence of video.
11. The decoder of claim 10 , wherein an order in the encoded bitstream is the first non-IDR parameter, the second non-IDR parameter, the third non-IDR parameter, the fourth non-IDR parameter, the fifth non-IDR parameter, the sixth non-IDR parameter, the seventh non-IDR parameter, the eighth non-IDR parameter, the ninth non-IDR parameter, the tenth non-IDR parameter, the eleventh non-IDR parameter and the twelfth non-IDR parameter.
12. The decoder of claim 10 , wherein the non-IDR flag is set to a first value to enable a non-IDR picture mode or set to a second value to disable the non-IDR picture mode.
13. The decoder of claim 12 , wherein when the non-IDR flag indicates the non-IDR mode is disabled, not decoding the first non-IDR parameter, the second non-IDR parameter, the third non-IDR parameter, the fourth non-IDR parameter, the fifth non-IDR parameter, the sixth non-IDR parameter, the seventh non-IDR parameter, the eighth non-IDR parameter, the ninth non-IDR parameter, the tenth non-IDR parameter, the eleventh non-IDR parameter and the twelfth non-IDR parameter from the encoded bitstream associated with the sequence of video.
14. The decoder of claim 10 , wherein an order in the encoded bitstream varies among the first non-IDR parameter, the second non-IDR parameter, the third non-IDR parameter, the fourth non-IDR parameter, the fifth non-IDR parameter, the sixth non-IDR parameter, the seventh non-IDR parameter, the eighth non-IDR parameter, the ninth non-IDR parameter, the tenth non-IDR parameter, the eleventh non-IDR parameter and the twelfth non-IDR parameter.
15. The decoder of claim 10 , wherein all of the non-IDR parameters in a slice are grouped under a single non-IDR flag.
16. The decoder of claim 10 , wherein the non-IDR flag is located in a slice header.
17. An encoder comprising:
one or more computer processors; and
a non-transitory computer-readable storage medium comprising instructions that, when executed, control the one or more computer processors to be configured for:
evaluating a single conditional statement once to determine if a current picture is a non-IDR picture;
based on the evaluating of the single conditional statement, when a non-IDR flag indicates a non-IDR picture is present, performing:
encoding a first non-IDR parameter indicating a picture order count modulo MaxPicOrderCntLsb for the current picture;
encoding a second non-IDR parameter indicating how a short-term picture set of the current picture is created;
encoding a third non-IDR parameter indicating an index to a list of the short-term reference picture sets used for creation of a reference picture set of the current picture;
encoding a fourth non-IDR parameter indicating a number of candidate long-term reference pictures that are included in a long-term reference picture set of the current picture;
encoding a fifth non-IDR parameter indicating the number of long-term reference pictures that are included in the long-term reference picture set of the current picture;
encoding a sixth non-IDR parameter indicating an index into a list of candidate long-term reference pictures for identification of a picture that is included in the long-term reference picture set of the current picture;
encoding a seventh non-IDR parameter indicating a value of a picture order count modulo MaxPicOrderCntLsb of an i-th long-term reference picture that is included in the long-term reference picture set of the current picture;
encoding an eighth non-IDR parameter indicating whether the i-th long term reference picture is used for reference by the current picture;
encoding a ninth non-IDR parameter indicating how to calculate a picture order of the long term reference picture set of the current picture;
encoding a tenth non-IDR parameter indicating the value of most significant bits of a picture order count value of the i-th long-term reference picture that is included in the long-term reference picture set of the current picture;
encoding an eleventh non-IDR parameter indicating if temporal motion vector predictors are used in the sequence of video;
encoding a twelfth non-IDR parameter indicating whether temporal motion vector predictors can be used for inter prediction;
wherein the first non-IDR parameter, the second non-IDR parameter, the third non-IDR parameter, the fourth non-IDR parameter, the fifth non-IDR parameter, the sixth non-IDR parameter, the seventh non-IDR parameter, the eighth non-IDR parameter, the ninth non-IDR parameter, the tenth non-IDR parameter, the eleventh non-IDR parameter and the twelfth non-IDR parameter are encoded consecutively without any other bits or syntax between the first non-IDR parameter, the second non-IDR parameter, the third non-IDR parameter, the fourth non-IDR parameter, the fifth non-IDR parameter, the sixth non-IDR parameter, the seventh non-IDR parameter, the eighth non-IDR parameter, the ninth non-IDR parameter, the tenth non-IDR parameter, the eleventh non-IDR parameter and the twelfth non-IDR parameter in an encoded bitstream associated with the sequence of video.
18. The encoder of claim 17 , wherein an order in the encoded bitstream is the first non-IDR parameter, the second non-IDR parameter, the third non-IDR parameter, the fourth non-IDR parameter, the fifth non-IDR parameter, the sixth non-IDR parameter, the seventh non-IDR parameter, the eighth non-IDR parameter, the ninth non-IDR parameter, the tenth non-IDR parameter, the eleventh non-IDR parameter and the twelfth non-IDR parameter.
19. The encoder of claim 17 , wherein an order in the encoded bitstream varies among the first non-IDR parameter, the second non-IDR parameter, the third non-IDR parameter, the fourth non-IDR parameter, the fifth non-IDR parameter, the sixth non-IDR parameter, the seventh non-IDR parameter, the eighth non-IDR parameter, the ninth non-IDR parameter, the tenth non-IDR parameter, the eleventh non-IDR parameter and the twelfth non-IDR parameter.
20. The encoder of claim 17 , wherein all of the non-IDR parameters in a slice are grouped under a single non-IDR flag.
Priority Applications (3)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US13/864,198 US20140140406A1 (en) | 2012-11-16 | 2013-04-16 | Devices and methods for processing of non-idr related syntax for high efficiency video coding (hevc) |
PCT/US2013/065870 WO2014078013A1 (en) | 2012-11-16 | 2013-10-21 | Devices and methods for processing of non-idr related syntax for high efficiency video coding (hevc) |
EP13786369.2A EP2920971B1 (en) | 2012-11-16 | 2013-10-21 | Devices and methods for processing of non-idr related syntax for high efficiency video coding (hevc) |
Applications Claiming Priority (3)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US201261727659P | 2012-11-16 | 2012-11-16 | |
US201361785781P | 2013-03-14 | 2013-03-14 | |
US13/864,198 US20140140406A1 (en) | 2012-11-16 | 2013-04-16 | Devices and methods for processing of non-idr related syntax for high efficiency video coding (hevc) |
Publications (1)
Publication Number | Publication Date |
---|---|
US20140140406A1 true US20140140406A1 (en) | 2014-05-22 |
Family
ID=50727910
Family Applications (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
US13/864,198 Abandoned US20140140406A1 (en) | 2012-11-16 | 2013-04-16 | Devices and methods for processing of non-idr related syntax for high efficiency video coding (hevc) |
Country Status (3)
Country | Link |
---|---|
US (1) | US20140140406A1 (en) |
EP (1) | EP2920971B1 (en) |
WO (1) | WO2014078013A1 (en) |
Cited By (12)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20140192869A1 (en) * | 2013-01-04 | 2014-07-10 | Canon Kabushiki Kaisha | Method, device, computer program, and information storage means for encoding or decoding a video sequence |
US20140198857A1 (en) * | 2013-01-15 | 2014-07-17 | Sharp Laboratories Of America, Inc. | Video decoder with signaling |
US20140314148A1 (en) * | 2013-04-17 | 2014-10-23 | Nokia Corporation | Apparatus, a method and a computer program for video coding and decoding |
US20150010050A1 (en) * | 2013-07-02 | 2015-01-08 | Qualcomm Incorporated | Optimizations on inter-layer prediction signalling for multi-layer video coding |
US20150189301A1 (en) * | 2013-12-27 | 2015-07-02 | Canon Kabushiki Kaisha | Encoding apparatus, encoding method, and image capture apparatus |
US9681145B2 (en) | 2013-10-14 | 2017-06-13 | Qualcomm Incorporated | Systems and methods for inter-layer RPS derivation based on sub-layer reference prediction dependency |
US10003793B2 (en) | 2012-10-01 | 2018-06-19 | Google Technology Holdings LLC | Processing of pulse code modulation (PCM) parameters |
WO2020141889A1 (en) * | 2019-01-02 | 2020-07-09 | 엘지전자 주식회사 | Method and device for processing video signal by using inter prediction |
US10972756B2 (en) * | 2015-07-16 | 2021-04-06 | Dolby Laboratories Licensing Corporation | Signal reshaping and coding for HDR and wide color gamut signals |
US11032574B2 (en) * | 2018-12-31 | 2021-06-08 | Tencent America LLC | Method and apparatus for video coding |
US11039138B1 (en) | 2012-03-08 | 2021-06-15 | Google Llc | Adaptive coding of prediction modes using probability distributions |
WO2021195588A1 (en) * | 2020-03-26 | 2021-09-30 | Alibaba Group Holding Limited | Methods and apparatuses for signaling picture header |
Citations (7)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20130077687A1 (en) * | 2011-09-23 | 2013-03-28 | Ye-Kui Wang | Coding reference pictures for a reference picture set |
US20130089152A1 (en) * | 2011-10-05 | 2013-04-11 | Qualcomm Incorporated | Signaling picture identification for video coding |
US20130089134A1 (en) * | 2011-10-10 | 2013-04-11 | Qualcomm Incorporated | Efficient signaling of reference picture sets |
US20130343465A1 (en) * | 2012-06-26 | 2013-12-26 | Qualcomm Incorporated | Header parameter sets for video coding |
US20140003493A1 (en) * | 2012-07-02 | 2014-01-02 | Qualcomm Incorporated | Video parameter set for hevc and extensions |
US20140192881A1 (en) * | 2013-01-07 | 2014-07-10 | Sony Corporation | Video processing system with temporal prediction mechanism and method of operation thereof |
US20150071356A1 (en) * | 2012-02-29 | 2015-03-12 | Lg Electronics Inc. | Inter-layer prediction method and apparatus using same |
-
2013
- 2013-04-16 US US13/864,198 patent/US20140140406A1/en not_active Abandoned
- 2013-10-21 WO PCT/US2013/065870 patent/WO2014078013A1/en active Application Filing
- 2013-10-21 EP EP13786369.2A patent/EP2920971B1/en active Active
Patent Citations (7)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20130077687A1 (en) * | 2011-09-23 | 2013-03-28 | Ye-Kui Wang | Coding reference pictures for a reference picture set |
US20130089152A1 (en) * | 2011-10-05 | 2013-04-11 | Qualcomm Incorporated | Signaling picture identification for video coding |
US20130089134A1 (en) * | 2011-10-10 | 2013-04-11 | Qualcomm Incorporated | Efficient signaling of reference picture sets |
US20150071356A1 (en) * | 2012-02-29 | 2015-03-12 | Lg Electronics Inc. | Inter-layer prediction method and apparatus using same |
US20130343465A1 (en) * | 2012-06-26 | 2013-12-26 | Qualcomm Incorporated | Header parameter sets for video coding |
US20140003493A1 (en) * | 2012-07-02 | 2014-01-02 | Qualcomm Incorporated | Video parameter set for hevc and extensions |
US20140192881A1 (en) * | 2013-01-07 | 2014-07-10 | Sony Corporation | Video processing system with temporal prediction mechanism and method of operation thereof |
Non-Patent Citations (2)
Title |
---|
Chat from July 23rd, 2011 found at the website: http://stackoverflow.com/questions/6801844/c-optimizing-if-statements * |
http://www.compileroptimizations.com/category/if_optimization.htm in which the Examiner uses the March 15th, 2012 version of the website archived at https://web.archive.org/web/20120315024604/http://www.compileroptimizations.com/category/if_optimization.htm * |
Cited By (30)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US11627321B2 (en) | 2012-03-08 | 2023-04-11 | Google Llc | Adaptive coding of prediction modes using probability distributions |
US11039138B1 (en) | 2012-03-08 | 2021-06-15 | Google Llc | Adaptive coding of prediction modes using probability distributions |
US10003793B2 (en) | 2012-10-01 | 2018-06-19 | Google Technology Holdings LLC | Processing of pulse code modulation (PCM) parameters |
US10298937B2 (en) * | 2013-01-04 | 2019-05-21 | Canon Kabushiki Kaisha | Method, device, computer program, and information storage means for encoding or decoding a video sequence |
US20140192869A1 (en) * | 2013-01-04 | 2014-07-10 | Canon Kabushiki Kaisha | Method, device, computer program, and information storage means for encoding or decoding a video sequence |
US20140198857A1 (en) * | 2013-01-15 | 2014-07-17 | Sharp Laboratories Of America, Inc. | Video decoder with signaling |
US10230979B2 (en) | 2013-01-15 | 2019-03-12 | Huawei Technologies Co., Ltd. | Video decoder with signaling |
US9674524B2 (en) * | 2013-01-15 | 2017-06-06 | Huawei Technologies Co., Ltd. | Video decoder with signaling |
US10027978B2 (en) | 2013-01-15 | 2018-07-17 | Huawei Technologies Co., Ltd. | Video decoder with signaling |
US20140314148A1 (en) * | 2013-04-17 | 2014-10-23 | Nokia Corporation | Apparatus, a method and a computer program for video coding and decoding |
US9800893B2 (en) * | 2013-04-17 | 2017-10-24 | Nokia Technologies Oy | Apparatus, a method and a computer program for video coding and decoding |
US20150010050A1 (en) * | 2013-07-02 | 2015-01-08 | Qualcomm Incorporated | Optimizations on inter-layer prediction signalling for multi-layer video coding |
US9756335B2 (en) | 2013-07-02 | 2017-09-05 | Qualcomm Incorporated | Optimizations on inter-layer prediction signalling for multi-layer video coding |
US9648326B2 (en) * | 2013-07-02 | 2017-05-09 | Qualcomm Incorporated | Optimizations on inter-layer prediction signalling for multi-layer video coding |
US9681145B2 (en) | 2013-10-14 | 2017-06-13 | Qualcomm Incorporated | Systems and methods for inter-layer RPS derivation based on sub-layer reference prediction dependency |
US9736485B2 (en) * | 2013-12-27 | 2017-08-15 | Canon Kabushiki Kaisha | Encoding apparatus, encoding method, and image capture apparatus |
US20150189301A1 (en) * | 2013-12-27 | 2015-07-02 | Canon Kabushiki Kaisha | Encoding apparatus, encoding method, and image capture apparatus |
US11234021B2 (en) * | 2015-07-16 | 2022-01-25 | Dolby Laboratories Licensing Corporation | Signal reshaping and coding for HDR and wide color gamut signals |
US20220150548A1 (en) * | 2015-07-16 | 2022-05-12 | Dolby Laboratories Licensing Corporation | Signal reshaping and coding for hdr and wide color gamut signals |
US10972756B2 (en) * | 2015-07-16 | 2021-04-06 | Dolby Laboratories Licensing Corporation | Signal reshaping and coding for HDR and wide color gamut signals |
US11800151B2 (en) * | 2015-07-16 | 2023-10-24 | Dolby Laboratories Licensing Corporation | Signal reshaping and coding for HDR and wide color gamut signals |
US11032574B2 (en) * | 2018-12-31 | 2021-06-08 | Tencent America LLC | Method and apparatus for video coding |
US11722700B2 (en) | 2018-12-31 | 2023-08-08 | Tencent America LLC | Method and apparatus for video coding |
US11044468B2 (en) | 2019-01-02 | 2021-06-22 | Lg Electronics Inc. | Method and device for processing video signal by using inter prediction |
WO2020141889A1 (en) * | 2019-01-02 | 2020-07-09 | 엘지전자 주식회사 | Method and device for processing video signal by using inter prediction |
RU2769347C1 (en) * | 2019-01-02 | 2022-03-30 | ЭлДжи ЭЛЕКТРОНИКС ИНК. | Method and apparatus for processing a video signal using external prediction |
US11570429B2 (en) | 2019-01-02 | 2023-01-31 | Lg Electronics Inc. | Method and device for processing video signal by using inter prediction |
US20230118101A1 (en) | 2019-01-02 | 2023-04-20 | Lg Electronics Inc. | Method and device for processing video signal by using inter prediction |
US11805246B2 (en) | 2019-01-02 | 2023-10-31 | Lg Electronics Inc. | Method and device for processing video signal by using inter prediction |
WO2021195588A1 (en) * | 2020-03-26 | 2021-09-30 | Alibaba Group Holding Limited | Methods and apparatuses for signaling picture header |
Also Published As
Publication number | Publication date |
---|---|
EP2920971B1 (en) | 2020-07-01 |
EP2920971A1 (en) | 2015-09-23 |
WO2014078013A1 (en) | 2014-05-22 |
Similar Documents
Publication | Publication Date | Title |
---|---|---|
US9888249B2 (en) | Devices and methods for sample adaptive offset coding and/or selection of edge offset parameters | |
EP2878124B1 (en) | Devices and methods for processing of partition mode in high efficiency video coding | |
EP2920971B1 (en) | Devices and methods for processing of non-idr related syntax for high efficiency video coding (hevc) | |
US20140146894A1 (en) | Devices and methods for modifications of syntax related to transform skip for high efficiency video coding (hevc) | |
CN106464877B (en) | Determining to apply deblocking filtering to palette coded blocks in video coding | |
US9565435B2 (en) | Devices and methods for context reduction in last significant coefficient position coding | |
US9774853B2 (en) | Devices and methods for sample adaptive offset coding and/or signaling | |
US9872034B2 (en) | Devices and methods for signaling sample adaptive offset (SAO) parameters | |
US9955153B2 (en) | Devices and methods for sample adaptive offset coding | |
US8891617B2 (en) | Method and system for processing video data | |
US9813701B2 (en) | Devices and methods for context reduction in last significant coefficient position coding | |
US20130188741A1 (en) | Devices and methods for sample adaptive offset coding and/or selection of band offset parameters | |
US8953690B2 (en) | Method and system for processing video data | |
US20140092975A1 (en) | Devices and methods for using base layer motion vector for enhancement layer motion vector prediction | |
US11039166B2 (en) | Devices and methods for using base layer intra prediction mode for enhancement layer intra mode prediction | |
WO2013109419A1 (en) | Devices and methods for sample adaptive offset coding and/or selection of band offset parameters |
Legal Events
Date | Code | Title | Description |
---|---|---|---|
AS | Assignment |
Owner name: MOTOROLA MOBILITY LLC, ILLINOISFree format text: ASSIGNMENT OF ASSIGNORS INTEREST;ASSIGNORS:YU, YUE;LOU, JIAN;WANG, LIMIN;SIGNING DATES FROM 20130529 TO 20130604;REEL/FRAME:030605/0213 |
|
AS | Assignment |
Owner name: GOOGLE TECHNOLOGY HOLDINGS LLC, CALIFORNIAFree format text: ASSIGNMENT OF ASSIGNORS INTEREST;ASSIGNOR:MOTOROLA MOBILITY LLC;REEL/FRAME:034274/0290Effective date: 20141028 |
|
STCB | Information on status: application discontinuation |
Free format text: ABANDONED -- FAILURE TO RESPOND TO AN OFFICE ACTION |