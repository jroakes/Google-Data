CN115867904A - Real-time micro-profile generation using dynamic tree structures - Google Patents
Real-time micro-profile generation using dynamic tree structures Download PDFInfo
- Publication number
- CN115867904A CN115867904A CN202180046635.3A CN202180046635A CN115867904A CN 115867904 A CN115867904 A CN 115867904A CN 202180046635 A CN202180046635 A CN 202180046635A CN 115867904 A CN115867904 A CN 115867904A
- Authority
- CN
- China
- Prior art keywords
- data processing
- processing system
- child node
- response
- micro
- Prior art date
- Legal status (The legal status is an assumption and is not a legal conclusion. Google has not performed a legal analysis and makes no representation as to the accuracy of the status listed.)
- Pending
Links
Images
Classifications
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F16/00—Information retrieval; Database structures therefor; File system structures therefor
- G06F16/20—Information retrieval; Database structures therefor; File system structures therefor of structured data, e.g. relational data
- G06F16/24—Querying
- G06F16/245—Query processing
- G06F16/2457—Query processing with adaptation to user needs
Abstract
Real-time micro-profile generation using a dynamic tree structure is provided. The system receives a first voice query. The system generates a first pivot point having child nodes in a tree structure of the first voice query from historical searches related to the first voice query. The system outputs an audio prompt to request selection of one of the child nodes. The system receives a voice input having a selection of a first child node in response to the audio prompt. The system searches for a second pivot point in the spanning tree structure that includes a grandchild node from the history associated with the first child node. The system determines to generate checkpoints to reduce additional child node generation based on the resource reduction policy. The system builds a micro-profile of the electronic account identifier with a tree structure based on the response to the checkpoint.
Description
Background
The computing device may receive a query from a user, process the query, and provide a response to the query. However, due to limited availability or functionality in input or output interfaces of computing devices, it can be challenging to provide useful responses to queries with limited information in a manner that is efficient and without excessive input/output processes via the available interfaces.
Disclosure of Invention
The present disclosure is generally directed to dynamic tree structures. The present technical solution may use a dynamic tree structure to generate micro-profiles in real time. For example, in a speech-based computing environment, a computing device executing a digital assistant may receive user input in the form of speech input or audio input. The digital assistant can parse the speech input to identify a query. The digital assistant may attempt to generate a response to the query. However, if the query includes limited or insufficient information, or the user does not have access to sufficient information, it can be challenging for the digital assistant to generate an accurate or useful response in an efficient manner. For example, a digital assistant may provide a response that may be useless or possibly erroneous. In another example, a user may enter a large or plethora of voice queries to identify a desired result. In yet another example, the digital assistant may output a list of candidate responses, which may be cumbersome or overly cumbersome for the user to hear or process. Providing erroneous or incorrect results or responses to a query or generating a large list of candidate responses may be processor-intensive, computationally intensive, utilize additional network bandwidth, or extend the duration of the communication while introducing delays or latencies in the amount of time it takes to generate accurate, desired results for the query.
The system and method of the present technical solution provides real-time micro-profile generation using a dynamic tree structure. The technical solution may receive a general voice query from a user and generate a pivot point. The present technology solution may utilize historical search queries executed by multiple computing devices to identify disjoint result sets. The technical solution may determine a similar distance between each of the disjoint sets and then select two or more of the disjoint sets that have the largest distance between them. The technical solution may then generate an output audio prompt asking the user to select one between two items in the pivot point, or asking something else. The present technical solution may continue to generate pivot points in this manner and proceed through child nodes in the tree structure until a final node is identified.
To reduce the number of input/output requests, the present technology solution may generate checkpoints during the process to ask the user whether the current node is satisfied or make suggestions of final nodes for the user to select. In some cases, a checkpoint may need to attempt to resolve a query without generating additional pivot points and child nodes. With the present technical solution, the digital assistant can dynamically or automatically regroup the tree structure and generate one or more child nodes. The technical solution may then generate a micro-profile based on the tree structure that results in the selection of the final node. The present technology solution may associate a micro-profile with the current context of the query, such as the time of day, day of week, location, or other contextual information associated with the electronic identifier making the request. In response to a subsequent new voice query, the digital assistant of the present technology solution may determine whether the context matches the context of a previously generated micro-profile and, if so, determine to load the micro-profile in order to take advantage of the previously dynamically generated tree structure and more efficiently select a response to the query.
At least one aspect is directed to a system for dynamic tree structure generation. The system may include a data processing system including a memory and one or more processors. The data processing system may receive a first voice query, associated with an electronic account identifier, detected via a microphone. The data processing system may generate a first pivot point comprising a plurality of child nodes in a tree structure of a first voice query from historical searches performed by a plurality of computing devices related to the first voice query. The data processing system may output an audio prompt requesting selection of one of the plurality of child nodes. The data processing system may receive a voice input including a selection of a first child node of the plurality of child nodes in response to the audio prompt. The data processing system may search for a second pivot point in the spanning tree structure that includes a plurality of grandchild nodes from the history associated with the first child node. The data processing system may determine to generate checkpoints to reduce additional child node generation based on the resource reduction policy. The data processing system may construct a micro-profile of the electronic account identifier with a tree structure based on the response to the checkpoint.
At least one aspect is directed to a method for dynamic tree structure generation. The method is performed by a data processing system that includes a memory and one or more processors. The method may include the data processing system receiving a first voice query, associated with an electronic account identifier, detected via a microphone. The method may include the data processing system generating a first pivot point comprising a plurality of child nodes in a tree structure of a first voice query from historical searches performed by a plurality of computing devices related to the first voice query. The method may include the data processing system outputting an audio prompt to request selection of one of the plurality of child nodes. The method may include the data processing system receiving a voice input including a selection of a first child node of the plurality of child nodes in response to the audio prompt. The method may include the data processing system searching a second pivot point in the spanning tree structure including a plurality of grandchild nodes from a history associated with the first child node. The method may include the data processing system determining to generate a checkpoint to reduce additional child node generation based on a resource reduction policy. The method may include the data processing system building a micro-profile of the electronic account identifier with a tree structure based on the response to the checkpoint.
These and other aspects and embodiments are discussed in detail below. The foregoing information and the following detailed description include illustrative examples of various aspects and embodiments, and provide an overview or framework for understanding the nature and character of the claimed aspects and embodiments. The accompanying drawings are included to provide a further understanding of the various aspects and embodiments, and are incorporated in and constitute a part of this specification.
Drawings
The figures are not intended to be drawn to scale. Like reference numbers and designations in the various drawings indicate like elements. For purposes of clarity, not every component may be labeled in every drawing. In the drawings:
FIG. 1 is an illustration of an example system for dynamic tree structure generation, according to an embodiment;
FIG. 2 is an illustration of an example query flow for dynamic tree structure generation, according to an embodiment;
FIG. 3 is an illustration of an example query flow for dynamic tree structure generation, according to an embodiment;
FIG. 4 is an illustration of an example method for dynamic tree structure generation, according to an embodiment;
FIG. 5 is a block diagram illustrating an architecture of a computer system that may be used to implement elements of the systems and methods described and illustrated herein, including, for example, the system depicted in FIG. 1, the query flow depicted in FIGS. 2 and 3, and the method depicted in FIG. 4.
Detailed Description
The following is a more detailed description of various concepts related to methods, apparatus and systems for dynamic tree structure generation and embodiments thereof. The various concepts introduced above and discussed in greater detail below may be implemented in any of numerous ways.
The present technical solution may use a dynamic tree structure to generate micro-profiles in real time. In a speech-based computing environment, a computing device executing a digital assistant may receive user input in the form of speech input or audio input. For example, a digital assistant device may not include a display device or monitor, or may not include keyboard or mouse input. In some cases where the digital assistant device includes a display device and an input device, a user may prefer to operate the digital assistant in a pure speech mode where the input/output interface is a microphone for speech input and a speaker for audio output. When using a speech-based interface, the digital assistant can receive an input audio signal having a speech input and recognize a query. The digital assistant may attempt to generate a response to the query. However, if the query includes limited or insufficient information, or the user does not have access to sufficient information, it can be challenging for the digital assistant to generate an accurate or useful response in an efficient manner.
For example, using natural language processing, a digital assistant may receive voice commands and output various information, or order products and services. However, the voice query may have to be specific to the digital assistant providing the correct information or ordering the correct product or service. The voice query may be generic or the user may not have sufficient information or capabilities to generate a particular voice query. For example, a generic and unspecific voice query may be "why did the operating system crash on my laptop? ". Based on the general query, the data processing system of the present technology solution may generate one or more pivot points (pivot points) from one or more levels in a tree structure from disjoint (disjoint) result sets based on historical search results and obtain a selection of pivot points from the user until a final node is reached. Upon reaching the final node, the data processing system may recognize the action and then perform the action. For example, the action for the end node may be to install the application on the crashed computing device, reinstall the application, or upgrade a version of the application.
Another example of a generic and unspecific voice query may be "help me find a gift for my mother of the moon". The user may not have any idea and thus cannot provide additional information. If the voice query is not specific enough, the information, product, or service identified by the digital assistant may not be correct. In some cases, the digital assistant may proceed to order an incorrect product or service, thereby performing a wasteful or unwanted transaction that wastes computing resource utilization, network utilization, or battery utilization. In other cases, the digital assistant may be too cumbersome to narrow the scope of the suggestions, resulting in too many trips between the user and the digital assistant. Without a screen or other display device, the digital assistant may not be able or able to display a list of results for the user to scroll through.
Thus, the system and method of the present technical solution may receive a generic voice query, then generate a pivot point with two suggested results for the voice query, and ask the user to select one from the suggested results, or ask something else. The technical solution may provide a digital assistant that is configured to quickly and efficiently narrow the scope of results while providing correct and useful results in a manner that minimizes or reduces the number of round trips between the digital assistant and the user. For example, in response to a general voice query "help me find a gift for my mother of the moon," the digital assistant may generate a pivot point query "do you be interested in jewelry, performance tickets, or something else? ". The pivot point query may be formed by two child nodes: the first child node "jewelry" and the second child node "performance tickets". The digital assistant can identify two child nodes using historical search queries or search results aggregated from multiple computing devices. The digital assistant of the present technical solution may select two child nodes from a plurality of result sets, which have the greatest similarity between them.
The digital assistant may base clarification on questions and results based on past searches from other users. Over time, the digital assistant can build micro-profiles based on different contexts. The context may be topic-based, such as buying shoes, buying gifts, or movie suggestions. The context may be based on geographic location, time of year (e.g., near vacation). The micro-profile context may be more or more granular. For example, a Yuanmu may be the context of a particular micro-profile generated in real-time using a dynamic tree structure. The digital assistant can use past searches to build micro-profiles to allow past searches to influence future searches, allowing the digital assistant to reduce round trips and efficiently and accurately narrow down suggestions to final nodes.
To this end, the digital assistant may receive an original query from a user. In response to receiving the original query, the digital assistant can begin generating a tree structure. The original query may form a top node in a tree structure. The digital assistant may then generate and ask the user a clarification question to proceed to a child node in the tree structure. The tree may be binary (e.g., the digital assistant may ask a "yes" or "no" question) or more general. The digital assistant can then generate a pivot point. The digital assistant can generate questions to divide the universe of possible outcomes into disjoint sets of equal or substantially equal size (e.g., having 1%, 2%, 3%, 4%, 5%, 6%, 10% or other quantities that facilitate generating micro-profiles in real-time using a dynamic tree structure). In a distance metric of similarity, disjoint sets may be far apart from each other. Based on the user's response, the digital assistant may proceed to a child node, which may act as the next pivot point. The digital assistant can repeat the process until the digital assistant reaches a result or final node.
The digital assistant can periodically and dynamically generate checkpoints. A checkpoint may refer to presenting the possible end results as options to the user. For example, the end result may be a particular product or item that may respond to the user's original query. This may allow the user to skip intermediate child nodes and proceed directly to the final node. However, the end result suggested with greater likelihood may be incorrect because the digital assistant may skip intermediate nodes when suggesting the end result. Thus, the digital assistant can use policies or rules to determine when the tree structure advances to an optimal or satisfactory level of nodes to suggest a final result with a sufficient likelihood or confidence of success. The digital assistant can be optimized for different goals, such as helping the user find the results as quickly as possible on average, or avoiding the possibility of a large number of trips.
With the present technical solution, child nodes may not be predetermined. The digital assistant may generate an open question, such as "what color shoes are you looking for? ". The spectrum of responses is broad and the digital assistant can proceed to generate the next pivot point or child node based on the responses. If the user provides information beyond what the digital assistant requires, the digital assistant may be configured to skip one level of the tree structure, thereby increasing efficiency and reducing delays in tree structure or micro-profile generation, thereby allowing the user to reach the end result as quickly as possible.
To generate pivot points, the digital assistant of the present technical solution may use a correlation search. The digital assistant may use related searches associated with the electronic account identifier or other electronic account identifiers having similar profiles. The digital assistant may divide the results into approximately the same size groups with minimal or no overlap. The search may be considered relevant based on various factors, such as time, geographic location, language, and so forth. The digital assistant may generate child nodes that are equally likely to contain the user's desired end result, even though some child nodes are "larger" in the sense of having more final nodes. These probabilities may be determined based on past queries associated with other electronic account identifiers, or using previously constructed micro-profiles. The digital assistant may traverse from the original node to the final node using various paths, in which case the result sets grouped under a particular node may not be completely disjoint.
Once the tree structure has been generated for the electronic account identifier in response to the original query, the digital assistant may generate a micro-profile based on interactions related to the tree structure. The digital assistant may use the micro-profile to improve the efficiency and accuracy of responding to subsequent queries from the electronic account identifier. Which micro-profile the digital assistant uses and changes may depend on the original user query and the first few questions. The micro-profile may cover some contexts, such as buying shoes, vacation shopping, movie searching, or buying a gift for a particular person (e.g., yueshen).
These micro-profiles are different from the general user profile. For example, very similar queries may have very different results due to small changes in context. There may be a specific micro-profile of the time of day and/or mood of the user. For example, "i want to watch a movie" may use different contexts for weekday evenings (e.g., action movies) versus (vs.) saturday morning (e.g., home movies). Purchasing a gift will depend on who the user purchases. Thus, the digital assistant can build a context-specific micro-profile and then load the micro-profile when there is a context match.
The end result can have a large impact on shaping the micro-profile and affecting future results. However, the digital assistant may use each answer along the way to refine the micro-profile. The digital assistant may create a micro-profile locally for each user session. The digital assistant may store the micro-profile on the server side for future use, for use across multiple devices, or erase the micro-profile at the end of the user session. At the end of the micro-profile generation, the digital assistant may ask the user if the user would like to store the micro-profile for future use. If the micro-profile has been previously stored and the user agrees, the new enhanced (from the current search) micro-profile may override the previously generated micro-profile with the same context. If the user indicates that the micro-profile is not to be saved, the digital assistant may erase the micro-profile at the end of the current session.
By asking questions to guide the search and using the micro-profile, the digital assistant can effectively help the user find answers to open questions and searches. In some cases, the user may terminate the search prematurely, or move to a visual surface to view results corresponding to the node. The digital assistant may integrate the process with a third party application upon completion of the search in order to perform actions such as, for example, ordering a product or streaming a movie.
The digital assistant, upon identifying the end node and the action associated with the end node, may perform an action to make the purchase, such as using the linked payment option. Seamless integration may allow the digital assistant to authenticate the selected payment method based on voice signatures or a combination of voice authentication and other biometric or password based security credentials.
FIG. 1 illustrates an example system 100 for dynamic tree structure generation, according to an embodiment. The system 100 may include a content selection infrastructure. System 100 may include a data processing system 102. The data processing system 102 may communicate with one or more of the client computing device 140 or the supplemental digital content provider device 130 via the network 105. The network 105 may include computer networks (such as the internet, local area networks, wide area networks, metropolitan area networks, or other area networks, intranets, satellite networks) and other communication networks (such as voice or data mobile telephone networks). The network 105 may be used to access information resources, such as web pages, web sites, domain names, or uniform resource locators, that may be provided, output, surfaced, or displayed on the client computing device 140.
The network 105 may include or constitute a display network, e.g., a subset of information resources available on the internet associated with a content placement or search engine results system or eligible to include third party digital components as part of a digital component placement campaign. The network 105 may be used by the data processing system 102 to access information resources, such as web pages, web sites, domain names, or uniform resource locators that may be provided, output, surfaced, or displayed by the client computing devices 140. For example, via the network 105, a user of the client computing device 140 may access information or data provided by the supplemental digital content provider device 130.
The network 105 may be any type or form of network and may include any of the following: point-to-point networks, broadcast networks, wide area networks, local area networks, telecommunications networks, data communication networks, computer networks, ATM (asynchronous transfer mode) networks, SONET (synchronous optical network) networks, SDH (synchronous digital hierarchy) networks, wireless networks and wired networks. The network 105 may include a wireless link, such as an infrared channel or satellite band. The topology of the network 105 may include a bus, star, or ring network topology. The network may include a mobile telephone network that uses any one or more protocols for communicating between mobile devices, including advanced mobile phone protocol ("AMPS"), time division multiple access ("TDMA"), code division multiple access ("CDMA"), global system for mobile communications ("GSM"), general packet radio service ("GPRS"), or universal mobile telecommunications system ("UMTS"). Different types of data may be sent via different protocols, or the same type of data may be sent via different protocols.
The client computing device 140 may include, for example, a laptop, a desktop, a tablet, a digital assistant device, a smartphone, a mobile telecommunications device, a portable computer, a smart watch, a wearable device, a headset, a speaker, a television, a smart display, or an automotive unit. For example, via the network 105, a user of the client computing device 140 may access information or data provided by the supplemental digital content provider device 130. In some cases, the client computing device 140 may or may not include a display; for example, a computing device may include a limited type of user interface, such as a microphone and speaker. In some cases, the primary user interface of the client computing device 140 may be a microphone and speaker, or a voice interface. In some cases, the client computing device 140 includes a display device coupled to the client computing device 140, and a main user interface of the client computing device 140 may utilize the display device.
The client computing device 140 may include a microphone 142. The microphone 142 may include a transducer or other hardware configured to detect sound waves (such as voice input from a user) and convert the sound waves into another format that may be processed by the client computing device 140. For example, the microphone 142 may detect sound waves and convert the sound waves into analog or digital signals. The client computing device 140 may use hardware or software to convert the analog or digital signals into data packets corresponding to voice input or other detected audio input. The client computing device 140 may send the data packet with the voice input to the data processing system 102 for further processing.
The client computing device 140 may include speakers 144. The speaker 144 may output audio or sound. The speaker 144 may be driven by an audio driver to generate audio output. The speaker 144 may output language or other audio that is generated by the data processing system 102 and provided to the client computing device 140 for output. For example, a user may have a conversation with the digital assistant 108 via the microphone 142 and speaker 144 of the client computing device 140.
In some cases, the client computing device 140 may include one or more components or functions of the data processing system 102, such as the NLP106, the digital assistant 108, the interface 104, or the data repository 118. For example, the client computing device 140 may include a local digital assistant or digital assistant proxy having one or more components or functions of the server digital assistant 108 or NLP 106. The client computing device 140 may include a data repository that stores micro-profiles. The client computing device 140 may include one or more components or functions of the computing system 500 depicted in fig. 5.
The servers in the machine farm may be stored in a high density rack system along with associated storage systems and located in an enterprise data center. For example, by locating servers and high-performance storage systems on a local high-performance network, consolidating servers in this manner may improve system manageability, data security, physical security of the system, and system performance. The centralization of all or some of the data processing system 102 components, including servers and storage systems, and coupling them with advanced system management tools allows for more efficient use of server resources, which saves power and processing requirements, and reduces bandwidth usage.
The system 100 may include, access, or otherwise interact with at least one third party device, such as a supplemental digital content provider device 130 or a service provider device. The supplemental digital content provider device 130 or other service provider device may include at least one logic device, such as a computing device having a processor, to communicate with, for example, the client computing device 140 or the data processing system 102 via the network 105.
The supplemental digital content provider device 130 may provide audio-based digital components for display by the client computing device 140 as audio output digital components. The digital component may be referred to as a sponsored digital component because it is provided by a third party sponsor. The numeric component may include an offer for a good or service, such as a voice-based message, stating: "do you want me to reserve a taxi for you? ". For example, the supplemental digital content provider device 130 may include a memory to store a series of audio digital components that may be provided in response to a voice-based query. The supplemental digital content provider device 130 may also provide audio-based digital components (or other digital components) to the data processing system 102, where they may be stored in a data repository of the data processing system 102. The data processing system 102 can select an audio digital component and provide (or instruct the supplemental digital content provider device 130 to provide) the audio digital component to the client computing device 140. The audio-based digital components may be exclusively audio or may be combined with text, image or video data.
The data processing system 102 may include a content placement system having at least one computing resource or server. The data processing system 102 may include, interface with, or otherwise communicate with at least one interface 104. The data processing system 102 may include, interface with, or otherwise communicate with at least one natural language processor 106 (or natural language processor component). The interface 104 or the natural language processor 106 may form or be referred to as a server digital assistant 108. The data processing system 102 may include, interface with, or otherwise communicate with at least one server digital assistant 108 (or server digital assistant component). The server digital assistant 108 can communicate or interface with one or more voice-based interfaces or various digital assistant devices or surfaces to provide data or receive data or perform other functions. The data processing system 102 may include at least one content selector 110 (or content selector component). The data processing system 102 may include at least one tree generator 112. The data processing system 102 may include at least one checkpoint generator 114. The data processing system 102 may include at least one micro-profile manager 116. The data processing system 102 may include at least one data repository 118. The data repository 118 may store micro-profiles 120 that include keywords and contextual information associated with the dynamically generated tree structure. The data repository 118 may store historical searches 122 performed by other computing devices 140 during previous time periods or intervals. The data repository 118 may include policies 124 that may be used to generate checkpoints to reduce additional resource consumption and node level generation.
The data processing system 102, interface 104, NLP106, content selector 110, tree generator 112, checkpoint generator 114, and micro-profile manager 116 may each include at least one processing unit or other logic device, such as a programmable logic array engine, or module configured to communicate with a data repository or database of the data processing system 102. The interface 104, NLP106 or content selector 110, tree generator 112, checkpoint generator 114 and micro-profile manager 116 may be separate components, a single component, or part of the data processing system 102. System 100 and its components, such as data processing system 102, may include hardware elements, such as one or more processors, logic devices, or circuits.
The data processing system 102 may obtain anonymous computer network activity information associated with a plurality of computing devices 140 (or computing devices or digital assistant devices). The user of the client computing device 140 or the mobile computing device may affirmatively authorize the data processing system 102 to obtain network activity information corresponding to the client computing device 140 or the mobile computing device. For example, the data processing system 102 may prompt the user of the client computing device 140 for consent to obtain one or more types of network activity information. The identity of the user of the client computing device 140 may remain anonymous, and the client computing device 140 may be associated with a unique identifier (e.g., a unique identifier of the user or computing device provided by the data processing system or the user of the computing device). The data processing system 102 can associate each observation with a corresponding unique identifier.
The data processing system 102 may include an interface 104 (or interface component) designed, configured, constructed, or operated to receive and transmit information using, for example, data packets. The interface 104 may receive and transmit information using one or more protocols, such as a network protocol. The interface 104 may include a hardware interface, a software interface, a wired interface, or a wireless interface. The interface 104 may facilitate converting or formatting data from one format to another. For example, the interface 104 may include an application programming interface that includes definitions for communicating between various components, such as software components. The interface 104 may communicate with one or more of the client computing device 140 or the supplemental digital content provider device 130 via the network 105.
The data processing system 102 may interface with an application, script, or program installed at the client computing device 140, such as an application that communicates input audio signals to the interface 104 of the data processing system 102 and drives components of the client computing device 140 to render, or otherwise output visual or audio signals. The data processing system 102 may receive data packets or other signals that include or identify audio input signals.
The data processing system 102 may include a natural language processor ("NLP") 106. For example, the data processing system 102 may execute or run the NLP106 to parse a received input audio signal or query. For example, the NLP106 may provide for interaction between a human and a computer. The NLP106 may be configured with techniques for understanding natural language and allowing the data processing system 102 to derive meaning from human or natural language input. The NLP106 may include or be configured with machine learning based techniques, such as statistical machine learning. The NLP106 may parse the input audio signal using a decision tree, statistical model, or probabilistic model. NLP106 may perform functions such as, for example, named entity recognition (e.g., given a stream of text, determining which terms in the text map to proprietary names (such as people or places), and what the type of each such name is, such as people, locations, or organizations), natural language generation (e.g., converting information from a computer database or semantic intent into intelligible human language), natural language understanding (e.g., converting text into a more formal representation, such as a first-order logical structure that a computer module may manipulate), machine translation (e.g., automatically translating text from one human language to another), morpheme segmentation (e.g., separating words into individual morphemes and identifying categories of morphemes that may be challenging based on the complexity of the morphemes or structure of the words of the language under consideration), question answering (e.g., determining answers to human language questions, which may be specific or open semantics), processing (e.g., processing that may occur after identifying words and encoding their meanings in order to associate the identified words with other words having similar meanings).
The NLP106 may convert the audio input signal into recognized text by comparing the input signal to a stored set of representative audio waveforms and selecting the closest match. The set of audio waveforms may be stored in a data repository or other database accessible to the data processing system 102. The representative waveform is generated across a large set of users and can then be augmented with language samples from the users. After the audio signal is converted to recognized text, the NLP106 matches the text to words associated with actions that the data processing system 102 can service (e.g., via training across users or through manual specifications). Aspects or functions of the NLP106 may be performed by the data processing system 102 or the client computing device 140. For example, the NLP component may execute on the client computing device 140 to perform aspects of converting an input audio signal to text and sending the text via data packets to the data processing system 102 for further natural language processing.
The audio input signal may be detected by a sensor or transducer (e.g., a microphone) of the client computing device 140. Via the transducer, audio driver, or other component, the client computing device 140 can provide an audio input signal to the data processing system 102 (e.g., via the network 105), where the audio input signal can be received (e.g., through the interface 104) and provided to the NLP106 or stored in a data repository.
The data processing system 102 may receive, via the interface 104, a data packet including an input audio signal detected by a microphone of the client computing device 140. The data processing system 102 may receive data packets generated based on input audio signals detected by the microphone. The data packets may or may not be filtered. The data packet may be a digitized version of the detected input audio signal. The data packet may include text generated by the client computing device 140 based on the detected input audio signal. For example, the local digital assistant of the client computing device 140 may process the detected input audio signals and send data packets to the server digital assistant 108 for further processing or to perform actions based on the processed input audio signals.
The data processing system 102 may include a server digital assistant 108. Server digital assistant 108 and NLP106 can be a single component, or server digital assistant 108 can include one or more components or functions of NLP 106. The server digital assistant 108 can interface with the NLP 106. The data processing system 102 (e.g., server digital assistant 108) may process the data packets to perform actions or otherwise respond to voice input. In some cases, the data processing system 102 may identify an acoustic signature from the input audio signal. The data processing system 102 can identify the electronic account corresponding to the acoustic signature based on a lookup in a data repository (e.g., querying a database). In response to the identification of the electronic account, the data processing system 102 may establish a session and an account for use in the session. An account may include a profile with one or more policies. The data processing system 102 may parse the input audio signal to identify a request and a trigger keyword corresponding to the request.
The NLP106 may obtain an input audio signal. In response to the local digital assistant on the client computing device 140 detecting the trigger keyword, the NLP106 of the data processing system 102 can receive a data packet having a speech input or an input audio signal. The trigger keyword may be a wake signal or a hotword that indicates to the client computing device 140 to convert the subsequent audio input to text and send the text to the data processing system 102 for further processing.
Upon receiving the input audio signal, the NLP106 may identify at least one query or request or at least one keyword corresponding to the request. The request may indicate an intent or subject of the input audio signal. The keywords may indicate the types of actions that may be taken. For example, the NLP106 may parse the input audio signal to identify at least one request to go home in the evening to attend dinner and movies. The trigger key may comprise at least one word, phrase, root or partial word, or derivative indicating an action to be taken. For example, a trigger keyword "go" or "to go to" from the input audio signal may indicate that transmission is required. In this example, the input audio signal (or the identified request) does not directly express the transmission intent, however the trigger keyword indicates that the transmission is an auxiliary action to the at least one other action indicated by the request. In another example, the voice input may include a search query, such as "find work near me". However, for situations where the raw query may be generic or lack sufficient information to generate accurate results, the NLP106 or server digital assistant 108 may forward the raw query to the tree generator 112, checkpoint generator 114, or micro-profile manager 116 for further processing.
The NLP106 may parse the input audio signal to identify, determine, retrieve, or otherwise obtain the request and one or more keywords associated with the request. For example, the NLP106 may apply semantic processing techniques to the input audio signal to identify keywords or requests. The NLP106 may apply semantic processing techniques to the input audio signal to identify keywords or phrases comprising one or more keywords, such as a first keyword and a second keyword. For example, the input audio signal may comprise the sentence "i want to buy an audio reading". The NLP106 may apply semantic processing techniques or other natural language processing techniques to the data packets comprising sentences to identify keywords or phrases "buy" and "talking books". The NLP106 can further identify multiple keywords such as purchases and audiobooks. For example, the NLP106 may determine that the phrase includes a first keyword and a second keyword.
The NLP106 may filter the input audio signal to identify the trigger keyword. For example, a data packet carrying an input audio signal may include "It world be a linear if I complex get a solution by which is a complex word me to the airport", in which case the NLP106 may filter out one or more of the following terms: "it", "woold", "be", "great", "if", "I", "result", "get", "sound", "stone", "result", "help", or "help". By filtering out these terms, the NLP106 may more accurately and reliably identify a trigger keyword, such as "go to the airport," and determine that this is a request for taxi or carpool service.
However, in some cases, the original speech query may be generic or contain insufficient information. Digital assistant 108 may not be able to determine accurate results at a high confidence level. The digital assistant 108 may determine to invoke the tree generator 112 instead of outputting a list of candidate results or engaging in multiple inefficient round trips with the user. The data processing system 102 may include a tree generator 112 designed, constructed, and operated to dynamically generate tree structures in real-time. The tree generator 112 may receive a first voice query, associated with an electronic account identifier, detected via a microphone. For example, the tree generator 112 may receive an original voice query or other voice query detected by the microphone 142 of the client computing device 140. The client computing device 140 may be associated or linked to an electronic account identifier. The electronic account identifier may refer to or include a username, identifier, or other unique identifier of a user on a network or platform associated with the data processing system 102. The user may use the electronic account identifier to log into an operating system or application on the client computing device 140. The client computing device 140 may provide an indication of the electronic account identifier to the data processing system 102 along with, prior to, or after transmission of the voice query. In some cases, the client computing device 140 may use the user's electronic account identifier to establish a communication session with the data processing system 102.
The tree generator 112 may parse the first voice query or the original voice query. The tree generator 112 may identify queries, keywords, or semantic information associated with the queries. In some cases, the tree generator 112 may utilize one or more components or functions of the NLP106 to parse or process the query. For example, the NLP106 may parse or process the query to identify one or more keywords or semantic meanings and provide the parsed information to the tree generator 112. In some cases, the tree generator 112 may utilize or use historical searches 122 stored in the data repository 118. The tree generator 112 may use historical searches to generate pivot points in the tree structure of the first voice query. The pivot point may indicate a plurality of child nodes. In the tree structure, the first or original voice query may form a top node, and the pivot point may provide an option or candidate child node from which the user may select a child node of the next level in the tree structure.
The tree generator 112 may identify related searches. Related searches may be stored in the historical search 122. The tree generator 112 may use various factors to determine the relevant search. The search may be related to a voice query based on geographic location, time or date, language, or electronic account identifier. The search may be related to the voice query if conducted through other electronic account identifiers having a profile or similar characteristics to the electronic account identifier that provided the original voice query. For example, the tree generator 112 may identify search results by inputting a voice query into a search engine. The tree generator 112 may also obtain search results from related search queries, which may be similar to the voice query received from the client computing device 140. The tree generator 112 may identify search results that are more likely to be related to the electronic account identifier based on various factors.
The tree generator 112 may divide the population of possible outcomes into disjoint sets of equal or substantially equal size (e.g., having 1%, 2%, 3%, 4%, 5%, 6%, 10%, or other quantities that facilitate generating micro-profiles in real-time using a dynamic tree structure). Sets may be disjoint if they do not contain the same results or results with the same concept. Sets may be disjoint if the sets do not overlap with respect to results or topics. Sets may be substantially disjoint, but may not be completely disjoint. For example, the different sets may contain less than 10% overlap, 8% overlap, 6% overlap, 5% overlap, 3% overlap, or other amount of overlap that facilitates real-time generation of micro-profiles using a dynamic tree structure.
The tree generator 112 may identify the different sets and then determine similarities between the different sets. The tree generator 112 may divide the results into approximately the same size groups with minimal or no overlap. The tree generator 112 may generate child nodes that are equally likely to contain the user's desired end result, even though some child nodes are "larger" in the sense of having more end nodes. These probabilities may be determined based on past queries associated with other electronic account identifiers, or using previously constructed micro-profiles.
The tree generator 112 may use semantic analysis techniques to determine similarities between disjoint sets. The tree generator 112 may use a similarity metric to determine or quantify similarities between disjoint sets. The tree generator 112 may be configured with one or more similarity functions. The tree generator 112 may determine a distance metric or an inverse of a distance metric that takes a large value for similar objects and a zero or negative value for dissimilar objects. The tree generator 112 may use cosine similarity for real-valued vectors. The tree generator 112 may score the similarity of disjoint sets in the vector space model. The tree generator 112 may use a clustering function to determine similarities between disjoint sets. The tree generator 112 may determine semantic similarities between terms in disjoint sets to determine distances between disjoint sets based on their semantic content.
In determining the distance between each disjoint set identified using historical searches related to voice queries, the tree generator 112 may identify two disjoint sets that have the greatest distance between them relative to the other disjoint sets. For example, the tree generator 112 may identify two disjoint sets on opposite ends of the spectrum or having the least common points.
Using these two disjoint sets, the tree generator 112 may generate pivot points. The pivot point may comprise two nodes corresponding to two disjoint sets separated by a maximum distance. The child nodes may be characterized by terms or keywords. The tree generator 112 may use these two child nodes to generate a clarification question to ask the user. The digital assistant may then generate and ask the user a clarification question to proceed to a child node in the tree structure. The tree may be binary (e.g., the digital assistant may be a "yes" or "no" question) or more general. The digital assistant may then generate a pivot point.
As shown in fig. 2, data processing system 102 may receive the query "find a gift for mother of the moon". The data processing system 102 may identify the two disjoint sets that are separated by the maximum amount of distance as: jewelry and tickets. Data processing system 102 may form a first child node of jewelry and a second child node of tickets. The data processing system 102 may generate a pivot point having a first child node and a second child node. Data processing system 102 may add a third option of "something else" to provide an option to proceed along a third child node not provided in the initial list. In some cases, data processing system 102 may provide three child node options. For example, if there are three disjoint sets that are equally separated from each other by the same distance (or substantially the same distance, such as within 1%, 2%, 3%, 5%, 6%, etc.), then data processing system 102 may query the user to select one of the three child nodes. Data processing system 102 may still include a fourth option of "something else".
If the user responds by selecting "something else," the data processing system 102 can return to a related search to identify additional disjoint sets and distances between them to select the next set of child nodes to suggest. Data processing system 102 may repeat this process until the user selects a child node.
Thus, the data processing system 102 can generate a first pivot point having a first child node and a second child node, wherein the first child node and the second child node are separated by a distance greater than a threshold. The threshold may be a relative threshold or a dynamic threshold. The threshold may refer to a ranking, such as a maximum distance. The threshold may be an absolute distance threshold or a normalized distance threshold. For example, the data processing system 102 may rank the distances between each node and then select the highest ranked distance or the first two highest ranked distances or the first three highest ranked distances. Thus, the data processing system 102 may use a threshold to select how many child nodes to form a pivot point based on the distance determination. The data processing system 102 may generate a first pivot point having a first child node and a second child node, wherein a distance between the first child node and the second child node is a maximum distance between a plurality of candidate nodes identified in response to the first voice query, and the first child node and the second child node are formed from disjoint sets of separations having a size within a threshold size (e.g., within 1% of the size, 2% of the size, 3% of the size, 5% of the size, 10% of the size, or other amounts).
The tree generator 112 (e.g., via the NLP106 or digital assistant 108) may generate or provide an indication that an audio prompt is generated. The audio cues may be formed from the selected child nodes. The output prompt may be constructed using a template that includes child node placeholders and adds an option of "something else". For example, the output prompt may be "jewelry, tickets, or something else". The data processing system 102 can provide the audio prompts to the client computing device 140 to cause the client computing device 140 to output the audio prompts via the speaker 144.
The data processing system 102 receives a voice input including a selection of one of the child nodes in response to the audio prompt. The user may select the first child node or the second child node. In some cases, the user may not select one of the suggested child nodes, but may instead indicate "something else," in which case the tree generator 112 may identify another one or more child nodes to suggest generating a new pivot point. The user may select a child node using voice input detected by microphone 142. The speech input may be, for example, the name of the child node (e.g., "jewelry"), or the speech input may indicate a number or order, such as "first" or "second". In some cases, the user may ask data processing system 102 to select one of the first or second child nodes by saying "either may", and data processing system 102 may select the first or second (e.g., by default, or using a random number generator to select one of the first or second child nodes).
Based on the selected child node, data processing system 102 may generate a second pivot point. The data processing system may repeat the process to generate a second tier child node, which may be referred to as a grandchild node. Data processing system 102 may search for a second pivot point in the spanning tree structure that includes a grandchild node from the history associated with the first child node. As depicted in FIG. 2, if the selection is a second node "tickets," an example grandchild node may be "opera," music, "" ballet, "or" sports.
In some cases, tree generator 112 may determine to select two or more grandchild nodes to generate the second pivot point. The tree generator 112 may determine that it may be more efficient and accurate to provide additional candidate grandchild nodes because the tree structure has advanced to a more granular or deeper level (e.g., the second level) in the tree. In some cases, the data processing system 102 may determine that there are a greater number of disjoint sets that are equally sized and equally separated by a distance, thereby justifying the provision of additional grandchild nodes in the second audio prompt.
The data processing system 102 may construct a second output audio prompt using the grandchild node. The second audio prompt may include two or more grandchild nodes. The second audio prompt may or may not include an "everything else" option, depending on the number of grandchild nodes suggested in the second audio prompt. For example, if there are 4 grandchild nodes in the second audio prompt, data processing system 102 may forego the other things option. However, if there are 2 grandchild options, then data processing system 102 may determine that something else is included.
In some cases, data processing system 102 may output a second audio prompt requesting selection of one of the plurality of grandchild nodes and, based on a response to the second audio prompt, determine to skip a level in the tree structure to generate a third pivot point having a plurality of past-great grandchild nodes. The response to the second audio prompt may be, for example, "lake people's sports tickets," in which case, the data processing system 102 may skip the layers (e.g., layer 224 depicted in fig. 2) and proceeds directly to the once-great-grandchild layer 226 with the lake people's tickets or the final node, thereby generating a dynamic tree structure. When skipping layers, the tree structure may omit or not generate intermediate layers, making the tree structure more efficient and dynamic.
The data processing system 102 (e.g., the tree generator 112) may proceed to generate pivot points with nodes and receive a selection of nodes until a final node is identified. The user may provide a response to the audio prompt and the data processing system 102 may continue to narrow the options for the information, product, or service of interest to the user. However, to reduce the computing resource utilization and duration of the communication session (e.g., to reduce network bandwidth and battery utilization), the data processing system 102 may include a checkpoint generator 114 designed, constructed and operated to generate checkpoints. The data processing system 102 can invoke the checkpoint generator 114 based on how far the tree generator 112 has advanced through the tree.
The data processing system 102 may determine to invoke checkpoint generator 114 based on policy 124, such as a resource reduction policy. The resource reduction policy may be configured with a threshold, such as the number of layers in the tree that have been generated, the duration of the communication session from a timestamp associated with receipt of the original voice query, or a metric or measure associated with the child node. For example, if the distance between nodes formed from the results is below a threshold, indicating a large number of similarities between the nodes, the data processing system 102 may determine to generate a checkpoint. By setting the threshold to fewer levels in the tree, the data processing system 102 can reduce the amount of bandwidth consumed by repeated back and forth requests for information by the user, as well as reduce the amount of processor and memory utilization by reaching checkpoints and final nodes at earlier levels in the tree.
Checkpoints may include or refer to the selection of a final or narrower node. A checkpoint may refer to asking the user whether they want to continue along the tree. For example, checkpoint generator 114 may determine to ask the user whether they would like to continue down the tree or get final suggestions based on how many levels the user has progressed through the tree. The user may indicate to continue along the tree, in which case data processing system 102 may generate another pivot point with a node. However, the user indicates a final suggestion, or checkpoint generator 114 determines to generate a final suggestion, tree generator 112 may determine to skip one or more layers in the tree and generate a final node with a narrow suggestion, such as a "lake person ticket". The data processing system 102 may determine to generate checkpoints based on the resource reduction policy to reduce additional child node generation associated with generating more pivot points, outputting audio prompts, and receiving responses. By generating checkpoints after a certain number of levels (e.g., 3 levels, 4 levels, 5 levels, etc.) in the tree, data processing system 102 can reduce the amount of bandwidth consumed by repeated back and forth requests for information by users, as well as reduce the amount of processor and memory utilization by reaching checkpoints and final nodes at earlier levels in the tree.
The tree generator 112 may receive a response to a checkpoint (which may be to continue along the tree) or an indication to select a suggested final node. If the tree generator 112 receives a selection of a final node, the tree generator 112 may identify the final node based on a response to the checkpoint. The data processing system 102 may construct an action based on the final node. The data processing system 102 may perform the action on a remote device configured to perform the action indicated in the final node.
For example, the tree generator 112 may forward the final nodes to the server digital assistant 108. The server digital assistant 108 may receive the end node and process the end node to identify the action. The server digital assistant 108 may proceed to generate an action data structure based on the action in the final node. The server digital assistant 108 may be configured to perform actions such as accessing information, conducting an electronic transaction, purchasing goods, or ordering services. The server digital assistant 108 may access one or more accounts associated with or linked to the electronic account identifier, which may be used to perform actions such as ordering a ride share service, food, or purchasing other goods.
To improve the efficiency of subsequent tree generation and final node selection, the data processing system 102 may generate a micro-profile. For example, if the tree generator 112 receives a selection of a final node, the tree generator 112 may invoke the micro-profile manager 116 to generate or build the micro-profile 120 based on the completion of the tree and the successful selection of the final node. The data processing system 102 may include a micro-profile manager 116 designed, constructed, and operated to maintain, build, generate, or otherwise provide micro-profiles of electronic account identifiers. The micro-profile manager 116 may use the tree structure generated by the tree generator 112 to build or generate micro-profiles. The micro-profile manager 116 may use information about one or more pivot points and the selected child or final nodes to generate a micro-profile. The micro-profile may be different than a regular usage profile due to the particular context associated with the micro-profile.
The context may be associated with semantic information associated with the original query, location information, acoustic characteristics of the user, language, time of day, day of week, season, vacation, or any other contextual information associated with the original query. In some cases, the context may include an emotion of the user, which may be determined based on acoustic characteristics associated with a voice input of the user issuing the voice query. The acoustic characteristics may indicate tone based on amplitude, frequency, tone, or other speech characteristics. The data processing system 102 may compare previous speech characteristics of the user to determine the context. The data processing system 102 may identify the context based on a comparison of the user's emotions when issuing similar voice queries.
For example, if a query to "give me to buy a gift in mother in the Yue" is issued closer to mother's day than another vacation (such as Christmas), the query may have a different final node. In another example, if a query for "I want to watch a movie" is issued on friday nights, the query may have a different final node than on saturday morning. Thus, the micro-profile generator may identify and store context information and the resulting tree structure in order to generate the micro-profile. A micro-profile may be generated or customized for a particular electronic account identifier and context.
The micro-profile manager 116 may store the micro-profiles in a data repository 118, such as a micro-profile data structure 120. The micro-profile manager 116 may limit access to micro-profiles to only devices associated or linked to the electronic account identifier. In some cases, the micro-profile may be stored on the local client computing device 140. The micro-profiles may not be stored on the data processing system 102 or other cloud computing environment or server. In some cases, the micro-profile may be shared between one or more client computing devices 140 owned or used or authorized by the same user associated with the electronic account identifier. In some cases, after the session is completed, the micro-profile may be erased and not stored anywhere. For example, the micro-profile may be used during a communication session established between the client computing device 140 and the data processing system 102, and after reaching the final node and having completed one or more electronic transactions, the micro-profile manager 116 may ask the user whether they want to store the micro-profile, where they want to store it, or whether to erase it. The micro-profile manager 116 may or may not store the micro-profile based on the user's response. Thus, the data processing system 102 can erase the micro-profile in response to termination of the communication session (e.g., completion of a transaction, session timeout based on an idle timeout value, user exit of an application or computing device, computing device enter standby mode).
The data processing system 102 may load a previously generated micro-profile in response to receiving a first voice query that forms a top node in a tree structure. For example, in response to receiving the first voice query, the data processing system 102 may determine whether a micro-profile exists for the electronic account identifier. The data processing system 102 may identify a context associated with the current receipt of the first voice query and then perform a lookup in the micro-profile data structure 120 using the electronic account identifier and the context information. The contextual information may include, for example, concepts or topics associated with the first query, such as time of day, time of year, season, vacation, buying shoes, purchasing gifts, watching movies, geographic location, language, and the like. In some cases, the context may include an emotion of the user, which may be determined based on acoustic characteristics associated with the voice input of the user issuing the voice query. The acoustic characteristics may indicate tone based on amplitude, frequency, tone, or other speech characteristics. The data processing system 102 may compare previous speech characteristics of the user to determine the context. The data processing system 102 may identify the context based on a comparison of the user's emotions when issuing similar voice queries. If the data processing system 102 identifies a micro-profile with an electronic account identifier having a similar context, the data processing system 102 may load the micro-profile.
The tree generator 112 may load the micro-profile and use the micro-profile to generate pivot points. The tree generator 112 may use the micro-profiles and related search results to generate pivot points. For example, the tree generator 112 may weight certain nodes in the pivot point more heavily based on the micro-profile to select those nodes for the pivot point. In another example, the tree generator 112 may skip one or more levels in the tree based on previous node selections or interactions stored in the micro-profile. For example, if a user chooses to watch movies of the same genre on friday nights in response to the query "watch me movies", data processing system 102 may skip to movies of that genre and provide options within that genre, thereby improving efficiency while reducing the number of trips to and from the user.
Thus, in response to receiving the first query, the data processing system 102 may determine whether a micro-profile exists for the user and whether a micro-profile with similar context exists. If there is a matching micro-profile, the data processing system 102 may load the micro-profile. Otherwise, data processing system 102 may proceed to generate a new dynamic tree structure.
For example, the data processing system 102 may receive the third voice query and determine a current context associated with the electronic account identifier. The data processing system 102 may determine that the current context matches the context. The data processing system 102 can load the micro-profile to generate a second audio prompt in response to the third voice query in response to determining that the current context matches the context.
In some cases, the data processing system 102 may determine an update to the micro-profile. The data processing system 102 may load the micro-profile, but the user may select a different child node or a different end node. The data processing system 102 can update the micro-profile based on different interactions in the new instance, thereby adjusting or continually improving the micro-profile for a particular context.
Upon identifying the end node, server digital assistant 108 may perform the action associated with the end node. For example, using natural language processing, a digital assistant may receive voice commands and output various information, or order products and services, or install an application or perform another action on a computing device. For example, the original voice query may be "why did the operating system crash on my laptop? ". Based on the general query, the data processing system 102 of the present technology solution can generate one or more pivot points of one or more levels in the tree structure from disjoint result sets based on historical search results and obtain a selection of pivot points from the user until the final node is reached. Upon reaching the final node, the data processing system 102 may recognize the action and then execute the action on the computing device 140. For example, the action for the end node may be to install an application on the crashed computing device 140 (e.g., the user's laptop), reinstall an application, or upgrade a version of an application. Thus, the data processing system 102 may identify the final node based on the response to the checkpoint. The data processing system 102 constructs an action to install the application on the computing device 140 associated with the electronic account identifier based on the final node. And the data processing system 102 can perform actions on the computing device 140 to install the application.
In some cases, the server digital assistant 108 may determine that the supplemental digital content item is to be provided in addition to performing the action. The server digital assistant 108 can send a request for content to the content selector 110 based on the input audio signal. The server digital assistant 108 can send a request for supplemental or sponsored content from a third-party content provider. The content selector 110 may perform a content selection process to select supplemental content items or sponsored content items based on actions in the voice query. The content item may be a sponsored or supplemental digital component object. The content items may be provided by third party content providers, such as supplemental digital content provider device 130. The supplemental content items may include advertisements for goods or services. The content selector 110 may select the content item using the content selection criteria in response to receiving a request for content from the server digital assistant 108.
The server digital assistant 108 can receive supplemental or sponsored content items from the content selector 110. The server digital assistant 108 can receive the content item in response to the request. The server digital assistant 108 can receive the content item from the content selector 110 and present the content item via an audio output or a visual output. The server digital assistant 108 can provide the content item for presentation via the client computing device 140.
The data processing system 102 can include a content selector 110 designed, constructed or operated to select supplemental content items (or sponsored content items or digital component objects). To select sponsored content items or digital components, the content selector 110 may select matching sponsored content items based on broad matches, exact matches, or phrase matches using the generated content selection criteria. For example, the content selector 110 may analyze, parse, or otherwise process the subject matter of the candidate sponsored content item to determine whether the subject matter of the candidate sponsored content item corresponds to the subject matter (e.g., action or intent) of the keyword or phrase of the content selection criteria. The content selector 110 may use image processing techniques, character recognition techniques, natural language processing techniques, or database lookups to identify, analyze, or recognize speech, audio, terms, characters, text, symbols, or images of candidate digital components. The candidate sponsored content item may include metadata indicating the subject matter of the candidate digital component, in which case the content selector 110 may process the metadata to determine whether the subject matter of the candidate digital component corresponds to the input audio signal. The content campaign (campaigns) provided by the supplemental digital content provider device 130 may include content selection criteria that the data processing system 102 may match to criteria indicated in the second profile tier or the first profile tier.
The supplemental digital content provider may provide additional indicators when establishing content sports that include digital components. The supplemental digital content provider device 130 may provide information of content motion or content group layers that the content selector 110 may identify by performing a lookup using information about candidate digital components. For example, the candidate digital components may include unique identifiers that may map to groups of content, motion of content, or providers of content.
In response to the request, the content selector 110 may select a digital component object associated with the supplemental digital content provider device 130. The supplemental digital content may be provided by a supplemental digital content provider device that is different from the service provider device (e.g., the provider of the ride share service). The supplemental digital content may correspond to a service type other than the service type of the action data structure (e.g., a taxi service versus food delivery service). The client computing device 140 may interact with the supplemental digital content. The client computing device 140 may receive an audio response to the digital component. The client computing device 140 may receive an indication of a selection of a hyperlink or other button associated with the digital component object that causes or allows the client computing device 140 to identify the supplemental digital content provider device 130, request a service from the supplemental digital content provider device 130, instruct the supplemental digital content provider device 130 to perform the service, send information to the supplemental digital content provider device 130 or the service provider device, or otherwise query the supplemental digital content provider device 130.
The supplemental digital content provider device 130 may establish an electronic content campaign. An electronic content campaign may refer to one or more groups of content that correspond to a common story. The content campaign may include a hierarchical data structure including content groups, digital component data objects, and content selection criteria provided by the content provider. The content selection criteria provided by the content provider device 130 may include a content type, such as a digital assistant content type, a search content type, a streaming video content type, a streaming audio content type, or a contextual content type. To create the content campaign, the supplemental digital content provider device 130 may specify values for the motion layer parameters of the content campaign. The movement layer parameters may include, for example, a name of the movement, a preferred content network for placing the digital component object, a resource value to be used for the content movement, a start and end date of the content movement, a duration of the content movement, a schedule of digital component object placement, a language, a geographic location, a type of computing device on which the digital component object is provided. In some cases, an impression may refer to when a digital component object is obtained from a source of the digital component object (e.g., the data processing system 102 or the supplemental digital content provider device 130) and is countable. In some cases, robot activity may be filtered and excluded as an impression due to the possibility of click fraud. Thus, in some cases, an impression may refer to a measure of the response from the Web server to a page request from the browser, filtered from the robot activity and error codes, and logged as close as possible to the point of opportunity to render the digital component object for display on the client computing device 140. In some cases, an impression may refer to a visible or audible impression; for example, the digital component object is at least partially (e.g., 20%, 30%, 40%, 50%, 60%, 70%, or more) visible on a display device of the client computing device 140 or audible via a speaker of the client computing device 140. Clicking or selecting may refer to user interaction with a digital component object, such as a voice response to an audible impression, a mouse click, a touch interaction, a gesture, a shake, an audio interaction, or a keyboard click. Conversion may refer to a user taking a desired action with respect to a digital component object; such as purchasing a product or service, completing a survey, shopping for a brick-and-mortar store corresponding to a digital component, or completing an electronic transaction.
The supplemental digital content provider device 130 may further establish one or more content groups for the content campaign. The content group includes one or more digital component objects and corresponding content selection criteria, such as keywords, words, terms, phrases, geographic locations, computing device type, time of day, interests, topics, or verticals. Content groups under the same content campaign may share the same campaign layer parameters, but may have tailored specifications for particular content group layer parameters, such as keywords, negative keywords (e.g., to prevent placement of digital components if negative keywords are present on the primary content), bids on keywords, or parameters associated with a bid or content campaign.
To create a new content group, the content provider may provide values for the content group layer parameters of the content group. Content group layer parameters include, for example, content group name or content group subject matter, and bids for different content placement opportunities (e.g., automatic placement or managed placement) or results (e.g., clicks, impressions, or conversions). The content group name or content group subject matter may be one or more terms that the supplemental digital content provider device 130 may use to capture the topic or theme of the content group that the digital component object is to be selected for display. For example, an auto dealer may create a different content set for each brand of vehicle that it ships, and may further create a different content set for each model of vehicle that it ships. Examples of content material that can be used by an automobile dealer include, for example, "manufacture a sports car", "manufacture B sports car", "manufacture C truck", "manufacture C hybrid car", or "manufacture D hybrid car". For example, an example content sports theme may be "hybrid" and include a content set of both "manufacturing a C-hybrid vehicle" and "manufacturing a D-hybrid vehicle".
The supplemental digital content provider device 130 may provide one or more keywords and digital component objects to each content group. The keywords may include terms related to the product or service associated with or identified by the digital component object. The keywords may include one or more terms or phrases. For example, an automobile dealer may include "sports car", "V-6 engine", "four wheel drive", "fuel efficiency" as a keyword for a content group or content sports. In some cases, negative keywords may be specified by the content provider to avoid, prevent, block, or disable content placement on certain terms or keywords. The content provider may specify a match type, such as an exact match, a phrase match, or a broad match, for selecting the digital component object.
The supplemental digital content provider device 130 may provide one or more keywords to be used by the data processing system 102 to select the digital component object provided by the supplemental digital content provider device 130. The supplemental digital content provider device 130 may identify one or more keywords to bid on and further provide bid amounts for the various keywords. The supplemental digital content provider device 130 may provide additional content selection criteria to be used by the data processing system 102 to select digital component objects. The plurality of supplemental digital content provider devices 130 may bid on the same or different keywords and the data processing system 102 may run a content selection process or an advertising auction in response to receiving an indication of a keyword of an electronic message.
The supplemental digital content provider device 130 may provide one or more digital component objects for selection by the data processing system 102. The data processing system 102 (e.g., via the content selector 110) can select a digital component object when a content placement opportunity becomes available that matches resource allocation, content scheduling, top bids, keywords, and other selection criteria specified for the content group. Different types of digital component objects may be included in the content set, such as a voice digital component, an audio digital component, a text digital component, an image digital component, a video digital component, a multimedia digital component, a digital component link, or an auxiliary application component. The digital component object (or digital component, supplemental content item, or sponsored content item) may include, for example, a content item, online document, audio, image, video, multimedia content, sponsored content, or auxiliary application. Upon selecting a digital component, the data processing system 102 can send the digital component object for rendering on the client computing device 140 or its display device. Rendering may include displaying the digital component on a display device, executing an application such as a chat robot or conversation robot, or playing the digital component via a speaker of the client computing device 140. The data processing system 102 may provide instructions to the client computing device 140 to render the digital component object. The data processing system 102 may instruct the client computing device 140 to generate an audio signal or sound wave.
The content selector 110 may perform a real-time content selection process in response to the request. Real-time content selection may refer to or include performing content selection in response to a request. Real-time may refer to or include selecting content within 0.2 seconds, 0.3 seconds, 0.4 seconds, 0.5 seconds, 0.6 seconds, or 1 second of receiving the request. Real-time may refer to selecting content in response to receiving an input audio signal from the client computing device 140.
The content selector 110 may identify a plurality of candidate supplemental content items. The content selector 110 may determine a score or rank for each of a plurality of candidate supplemental content items in order to select the highest ranked supplemental content item to provide to the client computing device 140.
FIG. 2 is an illustration of an example query flow for dynamic tree structure generation, according to an embodiment. Flow 200 may be performed by one or more systems or components depicted in FIG. 1, including for example a data processing system. The data processing system may receive an original or first query 202, such as "find a gift for mother of the moon". The data processing system may process the original query and generate a pivot point 204 having two or more child nodes selected from a different disjoint set from each other. The pivot point 204 may be "jewelry, tickets, or something else". The pivot point 204 may be formed from child node jewelry 206, child node tickets 208, and other east-west nodes 210 that allow the user to receive different sets of child nodes.
The data processing system may receive a response from the user to the pivot point that includes an indication of one of the nodes in the pivot point, such as the node 208 of the ticket. The data processing system may proceed down the tree level to child node 208. The data processing system may generate a second pivot point 214 for the child node 208 with the grandchild node option "opera, ballet, or sports". The suggested grandson nodes in pivot point 214, opera 216, music 218, ballet 220, and sports 222 may be associated with the gate ticket node 208. If the user has selected a jewelry child node, the data processing system may generate a second pivot point 212 for the jewelry child node, with a grandchild node option, such as "necklace, bracelet, ring or earring". The proposed grandchild node in pivot point 212 may be related to jewelry node 206.
The data processing system may receive a selection of grandchild node sports 222. The data processing system may perform generating additional pivot points. For example, the data processing system may generate a third pivot point "basketball, football, or hockey" 224 corresponding to the sports 222 node and the tickets 208 node. In some cases, the data processing system may generate checkpoints and suggest final nodes, such as a lake person's ticket 226 corresponding to a basketball node within the pivot point 224.
If the user selects the final node 226, the data processing system may then perform an action, such as purchasing tickets to a lake people basketball game. The data processing system may generate or update a micro-profile for the context. The data processing system may identify the context as purchasing a gift or purchasing a gift to mother of Yue. The data processing system may also specify a context based on time, year, vacation, location, etc.
FIG. 3 is an illustration of an example query flow for dynamic tree structure generation, according to an embodiment. Flow 300 may be performed by one or more systems or components depicted in fig. 1, including, for example, a data processing system. The data processing system may receive an original query or a first query "i want to buy hat in my Yue mother" 302. The initial query may be more or less general than query 202. Thus, the data processing system may generate a new dynamic tree structure that skips one or more levels. In some cases, the data processing system may determine whether a micro-profile exists for the electronic account identifier and context. For example, the data processing system may perform a lookup in the micro-profile data structure. The data processing system may identify a micro-profile generated for purchasing a gift during the flow 200 depicted in fig. 2. The data processing system may identify the final node 226 corresponding to the lake person's ticket.
By loading the micro-profile, the data processing system may generate a first pivot point with the child node "sun hat, baseball hat, or lake hat" 304. As indicated by this first pivot point, the child nodes may be based on general relevant search results, as well as specific final node lake person tickets from the micro-profile. The user may select the lake cap as the final node 306. Thus, by loading the micro-profile generated for the user and context, queries to purchase Yueshan hats can be resolved with a single pivot point, thereby reducing computing resource utilization and network transactions and the duration of communication sessions while improving accuracy.
FIG. 4 is an illustration of an example method for dynamic tree structure generation, according to an embodiment. Method 400 may be performed by one or more components or systems depicted in FIG. 1, including for example a data processing system. At 402, a data processing system may receive a voice query. The voice query may be an original or first voice query. The voice query may be generic or have some degree of specificity. At 404, the data processing system can determine a context associated with the voice query. Context may include time of day, time of year, semantic concepts (purchase of gifts, travel, information requests, movie requests), language, acoustic characteristics of voice input (e.g., mood).
At 406, the data processing system may determine whether a micro-profile exists for a particular electronic account identifier associated with the device that detected the voice query. The data processing system may determine whether there is a matching context for the micro-profile. If a micro-profile exists for the user and context, the data processing system may load the micro-profile at 408 and then proceed to block 410. If the micro-profile does not exist or does not exist the same context for the user, the data processing system may proceed directly to block 410 to generate a pivot point and output a prompt. A tree generator may be used to generate pivot points based on related searches for similar users and micro-profiles, if any.
The data processing system may generate and output a pivot point and then receive a response to the pivot point at 412. The response to the pivot point may indicate a selection of a child node in the pivot point. The data processing system may proceed to decision block 414 to determine whether to generate a checkpoint. A checkpoint may refer to asking the user whether to continue the tree process, or to suggest a final node, or to suggest a narrower pivot point to skip a layer. The data processing system may determine whether to generate a checkpoint based on one or more factors including, for example, the number of levels the user descends in the tree structure from the top node, the distance between previous pivot points or disjoint sets of subsequently available pivot points, the mood of the user's voice (e.g., dissatisfied with the tree process), the duration of the communication session, or the duration since the data processing system received the original query. If the data processing system determines at 414 that a checkpoint is not to be generated, the data processing system may return to block 410 to generate a second pivot point and obtain another response to the second pivot point. The data processing system may iterate through the generation of pivot points and receiving a selection of child nodes until the data processing system determines to generate a checkpoint.
If the data processing system determines to generate a checkpoint, the data processing system may proceed to decision block 416 to determine if the user has reached the final node. For example, if the checkpoint problem is "do you go on" and the user says "no," the final node has been reached. If the user says they do want to continue with tree generation, the data processing system may determine that the final node has not been reached and then return from decision block 416 to block 410. In another example, the data processing system may output a final node proposal, such as "lake people tickets". At decision block 416, the data processing system may ask the user whether the end result is acceptable. If the user indicates that the end node is satisfactory, the data processing system may proceed to block 418.
At 418, the data processing system may generate, build, or update a micro-profile. The data processing system may build the micro-profile based on keywords or interactions associated with the spanning tree structure and reaching the final node. The data processing system may update the micro-profile if the data processing system has previously loaded a micro-profile having the same context. The data processing system may proceed to 420 to perform or execute an action associated with the final node, such as purchasing a lake person's ticket, a lake person's cap, or performing any other action to order a product, service, or access the requested information.
Fig. 5 is a block diagram of an example computer system 500. Computer system or computing device 500 may include or be used to implement system 100 or components thereof, such as data processing system 102 or client computing device 140. The data processing system 102 or client computing device 140 may include an intelligent personal assistant or a voice-based digital assistant. Computing system 500 includes a bus 505 or other communication component for communicating information, and a processor 510 or processing circuit coupled to bus 505 for processing information. Computing system 500 may also include one or more processors 510 or processing circuits coupled to the bus for processing information. Computing system 500 also includes main memory 515, such as a Random Access Memory (RAM) or other dynamic storage device, coupled to bus 505 for storing information and instructions to be executed by processor 510. The main memory 515 may be or include the data repository 118. Main memory 515 also may be used for storing location information, temporary variables, or other intermediate information during execution of instructions by processor 510. Computing system 500 may also include a Read Only Memory (ROM) 520 or other static storage device coupled to bus 505 for storing static information and instructions for processor 510. A storage device 425, such as a solid state device, magnetic disk or optical disk, can be coupled to bus 505 for persistently storing information and instructions. The storage device 425 may include the data repository 118 or be part of the data repository 118.
The processes, systems, and methods described herein may be implemented by the computing system 500 in response to the processor 510 executing an arrangement of instructions contained in main memory 515. Such instructions may be read into main memory 515 from another computer-readable medium, such as storage device 425. Execution of the arrangement of instructions contained in main memory 515 causes computing system 500 to perform the illustrative processes described herein. One or more processors in a multi-processing arrangement may also be employed to execute the instructions contained in main memory 515. Hardwired circuitry may be used in place of or in combination with software instructions with the systems and methods described herein. The systems and methods described herein are not limited to any specific combination of hardware circuitry and software.
Although an example computing system has been described in fig. 5, the subject matter including the operations described in this specification can be implemented in other types of digital electronic circuitry, or in computer software, firmware, or hardware, including the structures disclosed in this specification and their structural equivalents, or in combinations of one or more of them.
For situations where the system discussed herein collects personal information about a user or where personal information may be used, the user may be provided with an opportunity to control whether programs or features may collect personal information (e.g., information about the user's social network, social actions or activities, the user's preferences, or the user's location), or whether or how to receive content from a content server or other data processing system that may be more relevant to the user. In addition, certain data may be anonymized in one or more ways prior to storage or use, such that personally identifiable information is removed when generating the parameters. For example, the identity of the user may be anonymized so that no personally identifiable information can be determined for the user, or the user's geographic location from which location information is obtained may be summarized (such as summarized at a city, zip code, or state level) so that no particular location of the user can be determined. Thus, the user may have control over how information is collected about him or her and used by the content server.
The subject matter and the operations described in this specification can be implemented in digital electronic circuitry, or in computer software, firmware, or hardware, including the structures disclosed in this specification and their structural equivalents, or in combinations of one or more of them. The subject matter described in this specification can be implemented as one or more computer programs, e.g., one or more circuits of computer program instructions, encoded on one or more computer storage media for execution by, or to control the operation of, data processing apparatus. Alternatively or additionally, the program instructions may be encoded on a propagated signal, e.g., a machine-generated electrical, optical, or electromagnetic signal, that is generated to encode information for transmission to suitable receiver apparatus for execution by the data processing apparatus. The computer storage medium may be or be included in a computer-readable storage device, a computer-readable storage substrate, a random or serial access memory array or device, or a combination of one or more of them. Although a computer storage medium is not a propagated signal, a computer storage medium can be a source or destination of computer program instructions encoded in an artificially generated propagated signal. The computer storage medium may also be or be included in one or more separate components or media (e.g., multiple CDs, disks, or other storage devices). The operations described in this specification may be implemented as operations performed by data processing apparatus on data stored on one or more computer-readable storage devices or received from other sources.
The terms "data processing system," "computing device," "component," or "data processing apparatus" encompass various apparatuses, devices, and machines for processing data, including for example, a programmable processor, a computer, a system on a chip, or a plurality or combination of the foregoing. An apparatus may comprise special purpose logic circuitry, e.g., an FPGA (field programmable gate array) or an ASIC (application-specific integrated circuit). The apparatus can include, in addition to hardware, code that creates an execution environment for the computer program in question, e.g., code that constitutes processor firmware, a protocol stack, a database management system, an operating system, a cross-platform runtime environment, a virtual machine, or a combination of one or more of them. The apparatus and execution environment can implement a variety of different computing model infrastructures, such as web services, distributed computing and grid computing infrastructures. For example, tree generator 112, digital assistant 108, checkpoint generator 114, or other components may include or share one or more data processing apparatuses, systems, computing devices, or processors.
A computer program (also known as a program, software application, app, script, or code) can be written in any form of programming language, including compiled or interpreted languages, declarative or procedural languages, and it can be deployed in any form, including as a stand-alone program or as a module, component, subroutine, object, or other unit suitable for use in a computing environment. The computer program may correspond to a file in a file system. A computer program can be stored in a portion of a file that holds other programs or data (e.g., one or more scripts stored in a markup language document), in a single file dedicated to the program in question, or in multiple coordinated files (e.g., files that store one or more modules, sub programs, or portions of code). A computer program can be deployed to be executed on one computer or on multiple computers that are located at one site or distributed across multiple sites and interconnected by a communication network.
The processes and logic flows described in this specification can be performed by one or more programmable processors (e.g., components of data processing system 102) executing one or more computer programs to perform actions by operating on input data and generating output. The processes and logic flows can also be performed by, and apparatus can also be implemented as, special purpose logic circuitry, e.g., an FPGA (field programmable gate array) or an ASIC (application-specific integrated circuit). Devices suitable for storing computer program instructions and data include all forms of non-volatile memory, media and memory devices, including by way of example semiconductor memory devices (e.g., EPROM, EEPROM, and flash memory devices); magnetic disks (e.g., internal hard disks or removable disks); a magneto-optical disk; and CD ROM and DVD-ROM disks. The processor and the memory can be supplemented by, or incorporated in, special purpose logic circuitry.
The subject matter described herein can be implemented in a computing system that includes a back-end component (e.g., as a data server), or that includes a middleware component (e.g., an application server), or that includes a front-end component (e.g., a client computer having a graphical user interface or a web browser through which a user can interact with an implementation described in this specification), or a combination of one or more such back-end, middleware, or front-end components. The components of the system can be interconnected by any form or medium of digital data communication (e.g., a communication network). Examples of communication networks include local area networks ("LANs") and wide area networks ("WANs"), the internet (e.g., the internet), and peer-to-peer networks (e.g., ad hoc peer-to-peer networks).
A computing system, such as system 100 or system 500, may include clients and servers. A client and server are generally remote from each other and typically interact through a communication network, such as network 105. The relationship of client and server arises by virtue of computer programs running on the respective computers and having a client-server relationship to each other. In some implementations, the server sends data (e.g., data packets representing digital components) to the client device (e.g., for the purpose of displaying data to a user interacting with the client device and receiving user input from the user interacting with the client device). Data (e.g., the result of the user interaction) generated at the client device may be received at the server from the client device (e.g., received by the data processing system 102 from the client computing device 140 or the supplemental digital content provider device 130).
Although operations are depicted in the drawings in a particular order, such operations are not required to be performed in the particular order shown or in sequential order, and not all illustrated operations are required to be performed. The actions described herein may be performed in a different order.
The separation of various system components does not require separation in all embodiments, and the described program components may be included in a single hardware or software product. For example, the natural language processor 106 and the interface 104 may be a single component, app, or program, or a logical device having one or more processing circuits, or part of one or more servers of the data processing system 102.
Having now described some illustrative embodiments, it is apparent that the foregoing is illustrative and not limiting, having been provided by way of example. In particular, although many of the examples presented herein involve specific combinations of method acts or system elements, those acts and those elements may be combined in other ways to accomplish the same objectives. Acts, elements and features discussed in connection with one embodiment are not intended to be excluded from a similar role or embodiment in other embodiments.
The phraseology and terminology used herein is for the purpose of description and should not be regarded as limiting. The use of "including," "comprising," "having," "containing," "involving," "consisting of, \8230; \8230characterization," "characterized by," and variations thereof herein is meant to encompass the items listed thereafter, equivalents and additional items thereof, as well as alternative embodiments consisting of the items listed thereafter exclusively. In one embodiment, the systems and methods described herein consist of one, each combination of more than one, or all of the described elements, acts, or components.
Any reference to embodiments or elements or acts of the systems and methods herein referred to in the singular may also include embodiments comprising a plurality of these elements, and any reference to any embodiment or element or act herein in the plural may also include embodiments comprising only a single element. References in the singular or plural form are not intended to limit the presently disclosed systems or methods, their components, acts or elements to a single or multiple configurations. A reference to any action or element based on any information, action, or element may include an implementation in which the action or element is based, at least in part, on any information, action, or element.
Any embodiment disclosed herein may be combined with any other embodiment or examples, and references to "an embodiment," "some embodiments," "one embodiment," etc. are not necessarily mutually exclusive and are intended to indicate that a particular feature, structure, or characteristic described in connection with the embodiment may be included in at least one embodiment or example. Such terms as used herein do not necessarily all refer to the same embodiment. Any embodiment may be combined with any other embodiment, inclusively or exclusively, in any manner consistent with the aspects and embodiments disclosed herein.
References to "or" may be construed as inclusive such that any term described using "or" may indicate any single one, more than one, or all of the described terms. A reference to at least one of a conjunctive list of terms may be interpreted as inclusive or to indicate any of a single, more than one, and all of the described terms. References to "at least one of a 'and' B" may include only 'a', only 'B', and both 'a' and 'B'. Such references used in conjunction with "including" or other open-ended terms of art may include additional items.
Where technical features in the figures, detailed description or any claims are followed by reference signs, the reference signs have been included to increase the intelligibility of the figures, detailed description, and claims. Accordingly, the absence of a reference symbol or symbol has no limiting effect on the scope of any claim element.
The systems and methods described herein may be embodied in other specific forms without departing from the characteristics thereof. The foregoing embodiments are illustrative, and not limiting of the described systems and methods. The scope of the systems and methods described herein is, therefore, indicated by the appended claims rather than by the foregoing description, and all changes which come within the meaning and range of equivalency of the claims are therefore intended to be embraced therein.
Claims (20)
1. A system for dynamic tree structure generation, comprising:
a data processing system comprising a memory and one or more processors to:
receiving a first voice query, associated with an electronic account identifier, detected via a microphone;
generating a first pivot point comprising a plurality of child nodes in a tree structure of a first voice query from historical searches performed by a plurality of computing devices related to the first voice query;
outputting an audio prompt to request selection of one of the plurality of child nodes;
receiving a voice input comprising a selection of a first child node of the plurality of child nodes in response to the audio prompt;
searching a second pivot point comprising a plurality of grandchild nodes in the spanning tree structure from a history relating to the first child node;
determining to generate a checkpoint to reduce additional child node generation based on a resource reduction policy; and
based on the response to the checkpoint, a micro-profile of the electronic account identifier is constructed with a tree structure.
2. The system of claim 1, comprising:
the data processing system generates a first pivot point having a first child node and a second child node, wherein the first child node and the second child node are separated by a distance greater than a threshold.
3. The system of claim 1 or 2, comprising:
the data processing system generates a first pivot point having a first child node and a second child node, wherein a distance between the first child node and the second child node is a maximum distance between a plurality of candidate nodes identified in response to the first voice query.
4. The system of any preceding claim, comprising:
the data processing system generates a first pivot point having a first child node and a second child node, wherein the first child node and the second child node are formed from separate disjoint sets having sizes within a threshold size.
5. The system of any preceding claim, comprising a data processing system for:
outputting a second audio prompt to request selection of one of the plurality of grandchild nodes; and
based on the response to the second audio prompt, one level of the tree structure is skipped to generate a third pivot point having a plurality of past-great-grand nodes.
6. The system of any preceding claim, comprising a data processing system for:
in response to receiving the first voice query, determining whether a micro-profile exists for the electronic account identifier; and
in response to determining that a micro-profile does not exist for the electronic account identifier, a first pivot point is generated.
7. The system of any preceding claim, comprising a data processing system for:
in response to receiving the first voice query, determining a context associated with the electronic account identifier, the context based on at least one of a time of day, a date, or an acoustic characteristic of the first voice query; and
the context is associated with a tree structure in the micro-profile.
8. The system of claim 7, comprising a data processing system to:
receiving a third voice query and determining a current context associated with the electronic account identifier;
determining that a current context matches the context; and
in response to determining that the current context matches the context, a micro-profile is loaded to generate a second audio prompt in response to the third voice query.
9. The system of any preceding claim, comprising:
the data processing system erases the micro-profile from the data processing system in response to termination of the session with the electronic account identifier.
10. The system of any preceding claim, comprising a data processing system for:
identifying a final node based on the response to the checkpoint;
constructing an action based on the final node; and
the action is performed on a remote device configured to perform the action indicated in the final node.
11. The system of any preceding claim, comprising a data processing system for:
identifying a final node based on the response to the checkpoint;
based on the final node, constructing an action to install the application on the computing device associated with the electronic account identifier; and
the action is performed on the computing device to install the application.
12. A method for dynamic tree structure generation, comprising:
receiving, by a data processing system comprising memory and one or more processors, a first voice query, associated with an electronic account identifier, detected via a microphone;
generating, by a data processing system, a first pivot point comprising a plurality of child nodes in a tree structure of a first voice query from historical searches performed by a plurality of computing devices related to the first voice query;
outputting, by the data processing system, an audio prompt to request selection of one of the plurality of child nodes;
receiving, by the data processing system and in response to the audio prompt, a voice input comprising a selection of a first child node of the plurality of child nodes;
searching, by the data processing system, from the history associated with the first child node, a second pivot point in the spanning tree structure that includes a plurality of grandchild nodes;
determining, by the data processing system, to generate a checkpoint to reduce additional child node generation based on the resource reduction policy; and
building, by the data processing system, a micro-profile of the electronic account identifier with a tree structure based on the response to the checkpoint.
13. The method of claim 12, comprising:
generating, by the data processing system, a first pivot point having a first child node and a second child node, wherein the first child node and the second child node are separated by a distance greater than a threshold.
14. The method according to claim 12 or 13, comprising:
a first pivot point is generated by the data processing system having a first child node and a second child node, wherein a distance between the first child node and the second child node is a maximum distance between a plurality of candidate nodes identified in response to the first voice query.
15. The method according to any one of claims 12 to 14, comprising:
a first pivot point is generated by the data processing system having a first child node and a second child node, wherein the first child node and the second child node are formed from separate disjoint sets having sizes within a threshold size.
16. The method according to any one of claims 12 to 15, comprising:
outputting, by the data processing system, a second audio prompt to request selection of one of the plurality of grandchild nodes; and
skipping, by the data processing system, one level of the tree structure based on the response to the second audio prompt to generate a third pivot point having a plurality of past-grand nodes.
17. The method according to any one of claims 12 to 16, comprising:
determining, by the data processing system and in response to receiving the first voice query, whether a micro-profile exists for the electronic account identifier; and
generating, by the data processing system, a first pivot point in response to determining that a micro-profile does not exist for the electronic account identifier.
18. The method according to any one of claims 12 to 17, comprising:
determining, by the data processing system and in response to receiving the first voice query, a context associated with the electronic account identifier, the context based on at least one of a time of day, a date, or an acoustic characteristic of the first voice query; and
associating, by the data processing system, the context with a tree structure in the micro-profile.
19. The system of claim 18, comprising:
receiving, by the data processing system, the third voice query and determining a current context associated with the electronic account identifier;
determining, by the data processing system, that a current context matches the context; and
loading, by the data processing system, the micro-profile to generate a second audio prompt in response to the third voice query in response to determining that the current context matches the context.
20. The method of any of claims 12 to 19, comprising:
identifying, by the data processing system, a final node based on the response to the checkpoint;
constructing, by the data processing system, an action based on the final node; and
the actions are performed by the data processing system on a remote device configured to perform the actions indicated in the final node.
Applications Claiming Priority (1)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
PCT/US2021/040553 WO2023282890A1 (en) | 2021-07-06 | 2021-07-06 | Real-time micro-profile generation using a dynamic tree structure |
Publications (1)
Publication Number | Publication Date |
---|---|
CN115867904A true CN115867904A (en) | 2023-03-28 |
Family
ID=77155891
Family Applications (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
CN202180046635.3A Pending CN115867904A (en) | 2021-07-06 | 2021-07-06 | Real-time micro-profile generation using dynamic tree structures |
Country Status (3)
Country | Link |
---|---|
EP (1) | EP4150479A1 (en) |
CN (1) | CN115867904A (en) |
WO (1) | WO2023282890A1 (en) |
Family Cites Families (3)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US10276170B2 (en) * | 2010-01-18 | 2019-04-30 | Apple Inc. | Intelligent automated assistant |
CN104102699B (en) * | 2014-07-01 | 2018-01-26 | 华中科技大学 | A kind of subgraph search method in the set of graphs that clusters |
US11086909B2 (en) * | 2018-11-27 | 2021-08-10 | International Business Machines Corporation | Partitioning knowledge graph |
-
2021
- 2021-07-06 WO PCT/US2021/040553 patent/WO2023282890A1/en active Application Filing
- 2021-07-06 EP EP21749034.1A patent/EP4150479A1/en active Pending
- 2021-07-06 CN CN202180046635.3A patent/CN115867904A/en active Pending
Also Published As
Publication number | Publication date |
---|---|
WO2023282890A1 (en) | 2023-01-12 |
EP4150479A1 (en) | 2023-03-22 |
Similar Documents
Publication | Publication Date | Title |
---|---|---|
CN108551766B (en) | Natural language processing for session establishment with service provider | |
US11599336B2 (en) | Generating and updating voice-based software applications using application templates | |
JP7171911B2 (en) | Generate interactive audio tracks from visual content | |
US11640822B2 (en) | Dynamic sequence-based adjustment of prompt generation | |
US11837230B2 (en) | Network source identification via audio signals | |
CN114600081A (en) | Interacting with applications via dynamically updating natural language processing | |
CN115210692A (en) | Interface and mode selection for digital motion execution | |
US20220308987A1 (en) | Debugging applications for delivery via an application delivery server | |
US11410651B2 (en) | Network source identification via audio signals | |
US11385990B2 (en) | Debugging applications for delivery via an application delivery server | |
CN115867904A (en) | Real-time micro-profile generation using dynamic tree structures | |
US20230186911A1 (en) | Delivery of Compatible Supplementary Content via a Digital Assistant | |
CN116508096A (en) | Indexing application actions for speech-based execution |
Legal Events
Date | Code | Title | Description |
---|---|---|---|
PB01 | Publication | ||
PB01 | Publication | ||
SE01 | Entry into force of request for substantive examination | ||
SE01 | Entry into force of request for substantive examination |