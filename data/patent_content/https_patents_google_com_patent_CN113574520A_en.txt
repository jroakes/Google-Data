CN113574520A - Dynamic generation and suggestion of tiles based on user context - Google Patents
Dynamic generation and suggestion of tiles based on user context Download PDFInfo
- Publication number
- CN113574520A CN113574520A CN201980044362.1A CN201980044362A CN113574520A CN 113574520 A CN113574520 A CN 113574520A CN 201980044362 A CN201980044362 A CN 201980044362A CN 113574520 A CN113574520 A CN 113574520A
- Authority
- CN
- China
- Prior art keywords
- map
- map tile
- map tiles
- tiles
- tile
- Prior art date
- Legal status (The legal status is an assumption and is not a legal conclusion. Google has not performed a legal analysis and makes no representation as to the accuracy of the status listed.)
- Pending
Links
Images
Classifications
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F16/00—Information retrieval; Database structures therefor; File system structures therefor
- G06F16/20—Information retrieval; Database structures therefor; File system structures therefor of structured data, e.g. relational data
- G06F16/29—Geographical information databases
-
- G—PHYSICS
- G01—MEASURING; TESTING
- G01C—MEASURING DISTANCES, LEVELS OR BEARINGS; SURVEYING; NAVIGATION; GYROSCOPIC INSTRUMENTS; PHOTOGRAMMETRY OR VIDEOGRAMMETRY
- G01C21/00—Navigation; Navigational instruments not provided for in groups G01C1/00 - G01C19/00
- G01C21/38—Electronic maps specially adapted for navigation; Updating thereof
- G01C21/3863—Structures of map data
- G01C21/387—Organisation of map data, e.g. version management or database structures
- G01C21/3881—Tile-based structures
-
- G—PHYSICS
- G01—MEASURING; TESTING
- G01C—MEASURING DISTANCES, LEVELS OR BEARINGS; SURVEYING; NAVIGATION; GYROSCOPIC INSTRUMENTS; PHOTOGRAMMETRY OR VIDEOGRAMMETRY
- G01C21/00—Navigation; Navigational instruments not provided for in groups G01C1/00 - G01C19/00
- G01C21/38—Electronic maps specially adapted for navigation; Updating thereof
- G01C21/3885—Transmission of map data to client devices; Reception of map data by client devices
- G01C21/3889—Transmission of selected map data, e.g. depending on route
-
- G—PHYSICS
- G01—MEASURING; TESTING
- G01C—MEASURING DISTANCES, LEVELS OR BEARINGS; SURVEYING; NAVIGATION; GYROSCOPIC INSTRUMENTS; PHOTOGRAMMETRY OR VIDEOGRAMMETRY
- G01C21/00—Navigation; Navigational instruments not provided for in groups G01C1/00 - G01C19/00
- G01C21/38—Electronic maps specially adapted for navigation; Updating thereof
- G01C21/3885—Transmission of map data to client devices; Reception of map data by client devices
- G01C21/3893—Transmission of map data from distributed sources, e.g. from roadside stations
Abstract
To provide dynamic generation and suggestion of map tiles, a server device receives a request from a user device for map data for a particular geographic area. A server device obtains a set of user context data and a set of candidate map tiles associated with a particular geographic area. The server device then selects one or more of the set of candidate map tiles based on the set of user context data, and transmits the one or more selected map tiles to the user device for display.
Description
Technical Field
The present disclosure relates to context-aware map tile generation and suggestion, and more particularly, to using user context data to identify optimal map tiles to display to a user.
Background
The background description provided herein is for the purpose of generally presenting the context of the disclosure. Work of the presently named inventors, to the extent it is described in this background section, as well as aspects of the description that may not otherwise qualify as prior art at the time of filing, are neither expressly nor impliedly admitted as prior art against the present disclosure.
Today, maps of geographic areas may be displayed by software applications running on a variety of devices, including mobile phones, car navigation systems, handheld Global Positioning System (GPS) units, and computers. Depending on the application and/or user preferences, the map may display terrain data, street data, city bus information, traffic data, and the like. Further, some applications display the map in an interactive mode such that the user can operate various controls (radio buttons, scroll bars, etc.) to, for example, change the zoom level or pan the "camera" to a new position.
Disclosure of Invention
In order to suggest and/or generate map tiles to be displayed to a user, the server device must first receive a request for map data from the user (via the user device). In general, a request for map data may be an indication that a user is scrolling over a particular geographic area of a map. The request for map data may also include an indication of a particular geographic area specified by the user. For example, a user may access a mapping service and enter a geographic area into a search function of the mapping service in order to retrieve map data corresponding to the geographic area. Similarly, when a user requests map data by selecting a route, scrolling on a map to a destination area, and/or performing other map-based services, the user may be traveling along a highway.
In any case, once the user provides a request for map data, the server executing the mapping service may retrieve map data corresponding to the geographic area indicated in the request. The map data corresponding to a geographic area may include a variety of information, such as names of cities and towns, landmarks, roads, and any other relevant information. Map data may be provided for map tiles representing at least a portion of the geographic area corresponding to the request. Several map tiles, each representing the same geographic area, may have different view types. The view type of the map tile may be selected based on the user's interest. For example, a map tile may display a geographic area in a terrain view that includes a terrain indication corresponding to the geographic area. The map tile may also display the geographic area in a satellite view that provides a true image of the geographic area from a high altitude perspective. Thus, if a user wishes to know the mountainous conditions of a geographic area, the terrain view may be the most useful map tile to display.
Prior to providing map tiles to be displayed, the system may obtain a set of user context data in order to determine map tiles that the user may prefer to view. For example, the set of user context data may indicate where the user is currently traveling, the current date, the current time, or a weather forecast corresponding to a particular geographic area. Based on the user context data, the system may determine that the user is hiking and may therefore prefer a topographical view of the geographic area. Thus, the system may obtain a set of candidate map tiles available for a geographic area and determine whether a terrain view (e.g., a terrain map tile) exists for the geographic area. If a map tile is present, the system may transmit the map tile for display on the user device. In some embodiments, if a terrain map tile does not exist for the geographic area, the system may generate a terrain map tile for the geographic area based on historical map tiles for the geographic area and a preferred type of map tile.
One exemplary embodiment of the disclosed technology is a method for selectively generating map tiles based on user context. The method comprises the following steps: a request for map data for a particular geographic area is received at one or more processors from a user device. The method further comprises the following steps: a server device obtains a set of user context data and a set of candidate map tiles associated with a particular geographic area. The method further comprises the following steps: selecting one or more of the set of candidate map tiles based on the set of user context data comprises: in addition, the method comprises: the one or more selected map tiles are transmitted to the user equipment for display.
Another exemplary embodiment is a server device for selectively generating map tiles based on user context, wherein the server device comprises one or more processors; and a non-transitory computer-readable memory coupled to the one or more processors and storing instructions thereon. The instructions, when executed by one or more processors, will cause a server device to receive a request from a user device for map data for a particular geographic area. The instructions further cause the server apparatus to obtain a set of user context data and a set of candidate map tiles associated with a particular geographic area. Further, the instructions cause the server device to select one or more of the set of candidate map tiles based on the set of user context data and transmit the one or more selected map tiles to the user device for display.
Yet another exemplary embodiment is a non-transitory computer-readable medium storing instructions for selectively generating map tiles based on user context. The instructions, when executed by one or more processors in a computing device, cause the one or more processors to receive a request from a user device for map data for a particular geographic area. The instructions further cause the one or more processors to obtain a set of user context data and a set of candidate map tiles associated with a particular geographic area. Additionally, the instructions further cause the one or more processors to select one or more of the set of candidate map tiles based on the set of user context data and transmit the one or more selected map tiles to the user device for display.
Brief Description of Drawings
FIG. 1 illustrates an exemplary vehicle in which techniques of the present disclosure may be used to selectively suggest and/or generate map tiles based on user context;
FIG. 2 is a block diagram of an exemplary system in which techniques for selectively suggesting and/or generating map tiles based on user context may be implemented;
FIG. 3 illustrates an exemplary tree data structure in which each node represents a portion of a geographic area;
FIG. 4A is an exemplary standard map tile that may be presented to a user in accordance with techniques for selectively suggesting and/or generating map tiles based on a user context;
FIG. 4B is an exemplary terrain map tile that may be presented to a user in accordance with techniques for selectively suggesting and/or generating map tiles based on a user context;
FIG. 4C is an exemplary satellite map tile that may be presented to a user in accordance with techniques for selectively suggesting and/or generating map tiles based on user context;
FIG. 5 is a combination box and logic diagram illustrating the use of a machine learning model to selectively suggest map tiles based on user context;
FIG. 6A is a combination block and logic diagram illustrating a training process for a generative machine learning model configured to generate new map tiles based on user context;
FIG. 6B is a combo-box and logic diagram illustrating the selective generation of new map tiles based on user context using a generative machine learning model;
FIG. 7 is a flow diagram of an exemplary method for selectively suggesting and/or generating map tiles based on user context, which may be implemented in a computing device operating in or cooperating with the above context-aware map tile suggestion and/or generation system.
Detailed Description
SUMMARY
In general, the systems and methods of the present disclosure display map data (e.g., a selected map tile) to a user according to a set of user context data (also referred to herein as "client context data"). The user context data may include the current state of the user and/or the user device. For example, the set of user context data may indicate that the user is present in a geographic area, and may further indicate a manner in which the user is moving in the geographic area (e.g., how fast the user is, in which direction, mode of transportation, etc.). Thus, the system may selectively display map data to the user based on the user's location and motion in the real world. Correspondingly, as the user moves and/or otherwise causes the set of user context data to change, the system may determine and display a corresponding change in the selected map tile.
More specifically, the type of map tile that may be preferred by the user may be determined based on the set of user context data, which may include time-varying attributes of the geographic area. These time-varying attributes may include a level of sunshine for a geographic area, a time of year (e.g., a distribution of vegetation colors in the geographic area), or current or predicted weather conditions corresponding to the geographic area (e.g., the presence of rain, fog, or snow, and/or water and/or snow on the ground). Accordingly, the type of map tile may be selected in response to the set of user context data. For example, the types of map tiles may include standard map tiles, terrain map tiles, satellite map tiles, hybrid map tiles, and/or any combination thereof. These map tile types may further depict geographic areas during different seasons or different times of the year (e.g., winter, fall, spring, summer, holiday events or celebrations at travel destinations), or during different times of the day for a particular geographic area (e.g., rush hour, dawn, midday, evening, dusk, night, etc. in a city). Thus, the system may provide the user with data that more accurately represents the current or predicted state of the geographic area. The system may thereby enable the user to perform more accurate and safer navigation of the geographic area. For example, the displayed map tiles may indicate that certain routes in the geographic area are undesirable, and thus the user may avoid them as they move through the area.
Alternatively or additionally, the set of user context data may be indicative of a current state of the user device (i.e. a time-varying property of the user device), such as its current battery state or network connectivity (e.g. the current available bandwidth for accessing the communication network). In this case, the system may select a map tile according to these parameters. For example, when the battery power and/or the currently available bandwidth is low, the system may select a low resolution map tile. This may reduce the risk of battery depletion and/or may reduce delays.
Further, the system may generate a new map tile in response to determining a type of map tile to display and determining that no map tiles of the type exist for the geographic area. The system may generate a new map tile based on the historical map tiles and based on the type of map tile determined from the user context data. The system may generate a new map tile using the historical map tile (which may be an image captured by the camera) such that the new map tile is a more accurate image of a corresponding portion of the particular geographic area than the historical map tile. For example, historical map tiles may not be consistent with current attributes of the geographic area (e.g., seasonal differences, city development, etc.). Thus, the new map tile may represent a more accurate image of the corresponding portion of the geographic area because it conforms to current or predicted attributes of the geographic area. Thus, the present disclosure provides superior imaging methods of geographic areas.
In any case, the new map tile may be included in the set of candidate map tiles and may be selected for transmission to the user device. However, it will be appreciated that the use of a generative machine learning model to generate a new map tile of a particular type based on the types of historical map tiles and map tiles constitutes an aspect of the present disclosure, which is independent of the concept of selecting a map tile from a set of candidate map tiles based on a set of user context data.
Exemplary hardware and software Components
With reference to FIG. 1, an exemplary environment 1 in which the techniques outlined above may be implemented includes a portable device 10 and a vehicle 12 having a host unit 14. For example, the portable device 10 may be a smart phone, a tablet computer, or a car navigation system. The portable device 10 communicates with the host unit 14 of the vehicle 12 via a communication link 16, which may be wired (e.g., Universal Serial Bus (USB)) or wireless (e.g., bluetooth, Wi-Fi direct). The portable device 10 may also communicate with various content providers, servers, etc. via a wireless communication network, such as a fifth, fourth or third generation cellular network (5G, 4G or 3G, respectively).
With reference to FIG. 2, an exemplary computing environment for a system 100 in which the techniques outlined above may be implemented includes a client device 102, a server 101, a navigation server 108, and a search server 110. The client device 102 may display map data using a mapping application 104 that is stored as a set of instructions in a memory 106 and executed on one or more processors (CPUs) 107 and/or Graphics Processing Units (GPUs) 109. In general, the mapping application 104 may display map data including map features provided by the server 101 via the network 112, which may be a wired or wireless network including any suitable local or wide area network (e.g., the internet). For example, mapping application 104 may be located on server 101 or an application server (e.g., Google +)TM) A dedicated application available at the online application store. A user of client device 102 may retrieve a copy of mapping application 104 from an application server and install the retrieved copy of the mapping application on client device 102. In other implementations, the mapping application 104 may be in a web browser (e.g., Google)
In general, client device 102 may be any suitable portable or non-portable computing device. By way of example, the client device 102 may be a smartphone, tablet computer, laptop computer, wearable computing device, or the like, such as the portable device 10 of fig. 1. In various implementations, the client device 102 may include fewer components than shown in FIG. 2, or may instead include additional components. For example, in some implementations, the client device 102 may include multiple instances of the CPU 107. For clarity, the client device 102 may be operated by a user viewing map data.
The server 101 from which the client device 102 receives map data may be communicatively coupled to one or several databases, such as a map database 130 (also referred to herein as "map data" and "map tile database") that stores map data that may include one or more historical map tiles for a geographic area. These one or more historical map tiles may include street and road information, terrain data, satellite images, information related to public transportation routes, information about businesses or other points of interest (POIs). Further, the map database 130 may include information about current traffic conditions, information about non-spatial attributes associated with the map data, such as weather data, demographic data, and/or energy consumption data for corresponding geographic areas, real estate costs, department store prices, etc., and a navigation database storing navigation data, which may include directions from a source to a destination for various modes of transportation (walking, cycling, driving, public transportation, etc.). The map data may be stored in the map database 130 in a vector graphics format, a raster format, or both. In general, the server 101 may receive information about geo-related objects from any number of suitable databases, Web services, and the like. In addition to communicating with server 101, client device 102 may also communicate with any suitable number of servers, such as navigation server 108, search server 110, traffic server (not shown), weather data server (not shown), etc., via communication network 112.
It should be understood that although the server is illustrated in fig. 2 as a single device, in general, the server 101 may correspond to a plurality of servers responsible for respective types of content or respective operations. For example, server 101 may include a server that stores map features corresponding to a first portion of the earth, and another server that stores map features corresponding to a second portion of the earth.
In the illustrated embodiment, a system for suggesting and/or generating map tiles based on user context includes a map tile suggestion module 140 stored in server memory 142 and executed by server CPU 144. Map tile suggestion module 140 may receive a request from client device 102 corresponding to a geographic area and, in response, may obtain a set of user context data by communicating with client device 102. Map tile suggestion module 140 may also obtain a set of candidate map tiles representing the requested geographic area from map data 130 and select one or more candidate map tiles based on user context data. It should be understood that for any requested geographic area, map data 130 may include a plurality of map tiles and map tile types that represent the requested geographic area. Thus, the set of candidate map tiles for any requested geographic area may include one or more satellite map tiles, one or more terrain map tiles, one or more standard map tiles, one or more hybrid map tiles, one or more seasonal map tiles (e.g., winter map tiles, summer map tiles, fall map tiles, spring map tiles), one or more time of day map tiles (e.g., dawn map tiles, midday map tiles, evening map tiles, dusk map tiles, night map tiles, etc.), any other suitable map tiles, and/or any combination thereof.
For example, a user may request a map of san francisco. Map tile suggestion module 140 may receive the request and obtain the set of user context data by communicating with client device 102. The set of user context data may indicate that the user placed the request in the afternoon of the summer and that the last map tile viewed/requested by the user is a satellite map tile. Using the set of user context data, map tile suggestion module 140 may obtain a set of candidate map tiles from map data 130. The set of candidate map tiles may include a set of historical map tiles associated with san francisco city. These historical map tiles may characterize a city in various conditions (e.g., seasonal changes, weather conditions (e.g., rain, snow, etc.), time of day), such that map tile suggestion module 140 may select the historical map tile that is most relevant to the set of user context data. Accordingly, map tile suggestion module 140 may search the set of candidate map tiles to select a satellite map tile in the condition of san francisco in the summer afternoon. However, if map tile suggestion module 140 cannot find a historical map tile for san francisco that meets these conditions, module 140 may determine that another map tile of the historical map tile sufficiently corresponds to the set of user context data such that module 140 will select the map tile for transmission and display to the user. This technique will be described in more detail below.
A map tile generation module 148 is also stored in the server memory 142 and executed by the server CPU 144. If, in response to a user request for map data for a geographic area, the map data 130 does not include map tiles that substantially correspond to the set of user context data, the map tile generation module 148 may generate new map tiles. For example, a user may request map data corresponding to a remote location or a location of a related map tile that has not been updated at all. Accordingly, map tile generation module 148 may obtain historical map tiles corresponding to the geographic area from map data 130 and generate new map tiles based on the historical map tiles and the set of user context data. The new map tile may correspond to the set of user context data such that a map tile type of the new map tile may be preferred by the user, as determined based on the context. The map tile generation module 148 may then transmit the new map tile to the client device 102 for display to the user. This technique will also be described in more detail below.
In some embodiments, map database 130 may store map tiles within a tree data structure that spatially organizes the map tiles. The tree data structure may include a set of nodes containing map tiles corresponding to a geographic area at various levels of detail. The set of nodes may be organized into an ancestor/descendant hierarchy, where each ancestor node includes one or more descendant nodes. Each descendant node may include a map tile that represents a portion of the geographic area represented by the map tile contained in the ancestor node, such that the descendant node map tile includes a higher level of detail than the ancestor node map tile.
When a mapping application or service (e.g., mapping application 104) receives a request to display a geographic region, the application may access the tree data structure to locate an ancestor node corresponding to the requested geographic region. The application may then retrieve the map tiles contained in the ancestor node and display one or more map tiles. However, in embodiments, the application may access one or more descendant nodes to obtain at least one map tile that represents each portion of the requested geographic area at a higher level of detail than the ancestor node map tiles. The application may then combine these descendant node map tiles to create a finer resolution representation of the requested geographic area.
For example, if a user requests map data representing Kansas, the mapping application may search the tree data structure for a node corresponding to Kansas. The application may then access the descendant nodes from the node corresponding to Kansas to retrieve descendant node map tiles for each portion of the state (e.g., northwest Kansas map tile, northeast Kansas map tile, southwest Kansas map tile, and southeast Kansas map tile). Finally, the application may combine each descendant node map tile into a composite representation in Kansas for display to the user.
To illustrate and refer to FIG. 3, an exemplary tree data structure 200 (which may be stored in server 101) spatially organizes map data, such as map database 130 from FIG. 2, such that descendant nodes of the tree data structure correspond to portions of a geographic region at a higher level of detail than their respective ancestor nodes. For example, ancestor node 202 of tree data structure 200 represents the continental united states. Ancestor node 202 has four child nodes that represent the northwest 204, northeast 206, southwest 208, and southeast 210 quadrants of the United states, respectively. Each child node has four child nodes each representing a state or some combination of portions of a state within the united states. For example, the northwest node 204 has a northwest child node 212 representing a portion of the states washington and idaho, and the northeast node 206 has a northwest child node 214 representing a portion of the states minnesota, iowa, wisconsin, michigan, illinois, and indiana.
Each node of the tree data structure may include one or more map tiles that display the geographic area represented by the node and may correspond to a level of detail. For example, a node representing the entire united states may include one or more map tiles at a lower magnification than a descendant node representing a single state. Moreover, each node may correspond to a different number of map tiles that may be used to represent a geographic area. The us nodes 202 may correspond to a relatively large number of map tiles that characterize the us in all seasonal states (e.g., spring, summer, fall, winter), weather conditions (e.g., rain, snow, etc.), time of day, and so forth. In contrast, descendant node 212 may correspond to a relatively small number of map tiles that represent a portion of Washington and Idaho at only one seasonal state, one weather condition, and one time of day.
For each map tile included in a node of the exemplary tree data structure 200, there may be one or several map features that represent geographic entities. For example, the map features may be states, cities, streets, roads, highways, towns, public transportation hubs, waters, shopping malls, department stores, neighborhoods, buildings, residences, restaurants, and the like, or combinations thereof. Each map feature may be comprised of one or several map feature segments, where the map feature segments may be combined to represent the map feature. Thus, as a mapping application or service accesses descendant nodes further down the example tree data structure 200, the map tiles contained therein may include more map features as the magnification of the geographic area increases. For example, a map feature representing a Colorado state boundary may consist of: a first map feature segment representing north, east and west boundaries of the state of colorado, and a second map feature segment representing south boundaries of the state of colorado.
Further, each node of the tree data structure may be identified by a cell Identification (ID), which in some embodiments may be an s2 cell ID along the hilbert curve. In other embodiments, the nodes of the tree data structure may be identified in any other suitable manner. In the exemplary tree data structure 200, the cell ID of the U.S. node 202 may be (0), the cell ID of the northwest node 204 may be (0,0), the cell ID of the northeast node 206 may be (0,1), the cell ID of the southwest node 208 may be (0,2), and the cell ID of the southeast node 210 may be (0, 3). For each respective descendant node, a first portion of the cell ID of the descendant node may be the same as the cell ID of the parent node of the descendant node, and a second portion of the cell ID may be based on the position of the descendant node relative to the parent node. For example, the cell ID (0,0,0) of the descendant node 212 representing a portion of the washington state and the idaho state includes a first portion (0,0) that is the same as the cell ID of the northwest node 204, followed by a second portion (0) indicating that the descendant node 212 represents the northwest quadrant of the northwest node 204. This is merely one example in which nodes of tree data structure 200 may be identified, and in other embodiments, nodes may be identified in any other suitable manner.
Although the exemplary tree data structure 200 includes nodes at three levels of detail, this is for ease of illustration only. The tree data structure 200 may include nodes at 10 levels of detail, at 20 levels of detail, or any other suitable number of levels of detail. Further, although the exemplary tree data structure 200 is shown as a quadtree (a data structure in which one node has a maximum of four child nodes), the tree data structure may be a binary tree, an octree (a data structure in which one node has a maximum of eight child nodes), a k-d tree, or any other suitable tree data structure that spatially organizes map data.
Exemplary History map tiles for generating and suggesting map tiles
Regardless, such an exemplary tree data structure 200 may be accessible to a server, client device, or other computing device capable of generating or suggesting map tiles in response to receiving a request for map data corresponding to a geographic area. The request for map data may include a map tile type. As previously mentioned, map tile type refers to the visual characteristics, information layout, and overall aesthetic quality of the map tiles displayed to the user. Thus, map tiles contained in any node of the exemplary tree data structure 200 may represent one or more map tile types.
For example, a map tile type may include a standard map tile 400, as shown in FIG. 4A. The standard map tile 400 may use mercator projection to render various features in a two-dimensional plane, such as road identifications 402, road names 404, location names 406, geographic feature identifications 408, and/or any other suitable feature or combination thereof. The geographic feature identification 408 may include, for example, a forest protected area, a national monument, a river, a lake, a stream, an ocean, and/or any other geographic feature of a particular geographic area. Standard map tile 400 may include colors, shading, or other patterns to indicate any features included in tile 400. For example, and as shown in fig. 4A, the road markings 402 and geographic feature markings 408 (e.g., forest/park, river) may be a different color than the background of the land representing the geographic area.
Another map tile type may be the terrain map tile 420 shown in fig. 4B. The terrain map tile 420 may include similar features (e.g., road identification 402, road name 404, location name 406, geographic feature identification 408) as the standard map tile 400. The terrain map tile 420 may also include a terrain identifier 422 that represents, for example, a change in terrain in elevation within the geographic area. These terrain identifications 422 may be represented as part of each of the other identifications provided in terrain map tile 420, or independent of the terrain identification. To illustrate, the terrain identifier 422 may be included as part of the identifier 408, for example, of a forest or park protected area. Terrain map tile 420 may include colors, shading, or other patterns to indicate any features included in tile 420. For example, and as shown in fig. 4B, the road markings 402 and geographic feature markings 408 (e.g., forest/park, river) may be a different color than the background of the land representing the geographic area. Further, any suitable method may be used to indicate the terrain indicia 422, such as a color-coded representation of the height (e.g., a terrain "map" or "heat map").
Turning to fig. 4C, yet another map tile type may include a satellite map tile 440. Satellite map tile 440 may represent a photo-level real representation of a geographic area from a bird's eye view. For example, satellite map tile 440 may represent a geographic area captured by a camera or other image capture device from an overhead perspective (e.g., a "satellite" perspective) of the geographic area. Thus, satellite map tile 440 may include features similar to standard map tile 400 (e.g., road identification 402, road name 404, location name 406, geographic feature identification 408) and terrain map tile 420 (e.g., terrain identification 422). However, in contrast to the features generated in standard map tile 400 and terrain map tile 420, similar features represented in satellite map tile 440 may appear different because tile 440 provides a true view of the features. Nonetheless, satellite map tile 440 may include colors, shading, or other patterns to indicate any features included in tile 440.
Thus, fig. 4A-4C provide three examples of map tiles and map tile types. It should be understood that the three identified map types (e.g., "standard," "terrain," and "satellite") include a non-exhaustive list of potential map types. For example, another map tile type may include aspects of two or more map tile types. Such map tiles may represent "hybrid" tile types.
In any case, the map tiles represented in fig. 4A-4C may be stored in a database (e.g., map data 130) to represent one or more map tile types for a particular geographic area. Thus, when a server, client device, or the like receives a request for map data corresponding to a particular geographic area represented by a map tile (400, 420, 440), the relevant device may retrieve one or more of these map tiles from the database. The device may then determine which map tile type should be selected for display based on the request (e.g., a set of user context data). This technique will also be described in more detail below.
Exemplary logic for suggesting map tiles
Determining a map tile type and a corresponding map tile for suggesting to the user may be performed using a set of rules corresponding to the set of user context data. The set of user context data may include one or more context parameters that server device 142 may use to determine a user's preferred map tile type. The server device 142 may retrieve the set of user context data from an application installed on the client device (e.g., a calendar application), data stored on the server, and/or any other suitable location.
For example, server device 142 may retrieve a set of user context data that includes context parameters indicating: (1) the user intends to be hiking on day 9, 10, (2) hiking the place, and (3) the current date is day 9, 10. The set of user context data may also include context parameters indicating: (4) the weather forecast corresponding to the hiking location predicts a thunderstorm on day 9, 10, and (5) the user is currently following a route on the navigation application with an end destination different from the hiking location.
Continuing with the example, server device 142 may analyze each context parameter to determine a preferred map tile type. In an embodiment, server device 142 may associate each context parameter with a known map tile type, count the number of context parameters associated with each known map tile type, and suggest the map tile type with the highest number. To illustrate, server device 142 may associate context parameters (1), (2), and (3) with a terrain map tile type, as the user may prefer to view terrain features of the geographic location before hiking. Server device 142 may also associate context parameters (4) and (5) with the standard map tile type, as the user may no longer intend to be hiking and may not prefer to see the topographical features of the final destination indicated in the route. Thus, server apparatus 142 may suggest a terrain map tile type because three context parameters are associated with a terrain map tile type, while two parameters are associated with a standard map tile type.
Further, server device 142 may apply a weighting factor to the counts to potentially achieve a more accurate representation of the particular context parameter implications. Referring to the above example, server device 142 may apply weighting factors to context parameters (1), (2), and (3) according to context parameters (4) and (5) to reduce their impact on the resulting map tile type suggestion. The server device 142 may associate the adverse weather condition prediction (e.g., context parameter (4)) corresponding to the expected outdoor activity (e.g., context parameters (1) and (2)) with a reduced chance of performing the expected outdoor activity. Further, server device 132 may associate an expected destination (e.g., context parameter (5)) that is different from the location of the expected activity (e.g., context parameter (2)) on the date of the expected activity (e.g., context parameters (1) and (3)) with a reduced chance to perform the expected activity.
Accordingly, server apparatus 142 may apply weighting factors to all or some of context parameters (1), (2), and (3) to reduce their impact on the resulting map tile type suggestion, and may apply weighting factors to one or both of context parameters (4) and (5) to increase their impact on the resulting map tile type suggestion. Server device 142 may then add the weighted count from all context parameters and may determine that the standard map tile type has a larger weighted count than the terrain map tile type. Accordingly, server device 142 may suggest a standard map tile type.
Additionally or alternatively, server device 142 may calculate a confidence score for each context parameter for each known map tile type, average all confidence scores for each known map tile type, and suggest the known map tile type with the largest average score. For example, server device 142 may strongly associate context parameter (1) with a terrain map tile type and may weakly associate context parameter (1) with all other map tile types. Then, for context parameter (1), server device 142 may generate a high confidence score (e.g., 95 out of 100 points) for the terrain map tile type and a lower confidence score (e.g., 30 out of 100 points, etc.) for each other map tile type. Such scores may be predetermined, or server device 142 may calculate confidence scores based on algorithms that utilize data correlation, semantic analysis, and/or any other suitable technique. However, it should be understood that server device 142 may analyze the context parameters according to any suitable algorithm or technique.
For example, fig. 5 schematically illustrates how a server device 142 (e.g., map tile suggestion module 140 of fig. 2) may determine suggested map tiles for each request for map data in an exemplary scenario. Some of the blocks in FIG. 5 represent data structures or memories, registers, or state variables (e.g., blocks 502a-502n, 504a-504n, 506a-506n, 510, 512, 514) that store these data structures, other blocks represent hardware and/or software components (e.g., block 508), and other blocks represent output data (e.g., block 518). The input signal is represented by an arrow corresponding to the signal name label.
In certain embodiments, server device 142 includes machine learning engine 508 to generate machine learning model 510. Various machine learning techniques may be used to generate machine learning model 510, such as regression analysis (e.g., logistic regression, linear regression, or polynomial regression), k-nearest neighbor algorithms, decision trees, random forests, boosting (e.g., extreme gradient boosting), neural networks, support vector machines, deep learning, reinforcement learning, bayesian networks, and the like. To generate the machine learning model 510, the machine learning engine 508 receives training data that includes a first map tile 502a displayed on the client device that was previously provided to the user, along with a first set of client context data 504a when the first map tile 502a was provided, and a first indication 506a of whether the user requested a different map tile. The training data also includes a second map tile 502b displayed on the client device, previously provided to the user, along with a second set of client context data 504b when the second map tile 502b was provided, and a second indication 506b of whether the user requested a different map tile. Further, the training data includes a third map tile 502c displayed on the client device, previously provided to the user, along with a third set of client context data 504c when the third map tile 502c was provided, and a third indication 506c of whether the user requested a different map tile. Still further, the training data includes an nth map tile 502n displayed on the client device that was previously provided to the user, along with an nth set of client context data 504n when the nth map tile 502n was provided, and an nth indication 506n of whether the user requested a different map tile.
While the exemplary training data includes four map tiles 502a-502n provided to the same or different users, this is merely an example, for ease of illustration only. The training data may include any number of map tiles from any number of users (and corresponding context data and an indication of whether a user requested a different map tile).
For example, when the machine learning technique is random forest or boosting, the machine learning engine 508 may collect several representative samples in a subset of training data. Using each representative sample, machine learning engine 508 can generate a decision tree for identifying map tiles. Machine learning engine 508 can then aggregate and/or combine each of the decision trees to generate machine learning model 510, e.g., by majority voting on the map tile types determined at each individual tree, ranking the map tile types according to confidence scores assigned to the map tile types at each individual tree, and selecting the highest ranked map tile type, etc.
Each decision tree may include several nodes, branches, and leaves, where each node of the decision tree represents a test for a client context parameter (e.g., if battery power is above 20%. Each branch represents the result of the test (e.g., battery level below 20%). Further, each leaf represents a confidence score for a different map tile type (e.g., a standard map tile type), or one or more map tile types based on combined test results for branches connected to the leaf (e.g., a confidence score for the standard map tile type of 75, a confidence score for the winter terrain map tile type of 25).
For example, the machine learning engine 508 may generate a decision tree in which a first node corresponds to whether the current user activity is an outdoor activity. If the current user activity is not outdoor activity, the first branch may be connected to a first leaf node, which may indicate that the map tile type is a standard map tile type. If the current user activity is outdoor activity, the second branch may be connected to a second node corresponding to the current time of year.
If the current time of the year is winter, the third branch may be connected to a second leaf node, which may indicate that the map tile type is a winter terrain map tile type. However, if the current time of the year is summer, the fourth branch may be connected to a third leaf node, which may indicate that the map tile type is a summer terrain map tile type. Although the decision tree includes three leaf nodes and four branches, this is merely an example, for ease of illustration only. Each decision tree may include any number of nodes, branches, and leaves, with any suitable number and/or type of tests on client context parameters and/or statistical measures.
Further, although generating the selected map tile 518 is described in the context of a machine learning environment, it should be understood that generating the selected map tile 518 may occur without a machine learning process. For example, map tile suggestion module 140 of fig. 2 may determine suggested map tiles (e.g., selected map tile 518) based on a relational database, weighting logic, and/or any other suitable algorithmic architecture.
In any case, in response to a user request for map data, the system of FIG. 5, for example, receives a set of map tiles for a particular geographic area 512 from map database 130. In this example, the set of map tiles for a particular geographic area 512 includes a map tile type 516 (e.g., "terrain," "satellite," and "hybrid"), but in general, the set of map tiles for a particular geographic area 512 may contain any number of map tiles and map tile types. For each map tile and map tile type, the system receives context data 514 indicating the current and planning environments related to the user. The context data 514 may include travel data indicating upcoming or otherwise planned trips for the user; scrolling data representing user usage of a mapping application or service; current date data such as time of day, day of week, current month, etc.; weather data for an area surrounding a user's location in a map application or service; prediction data of an area surrounding a location of a user in a map application or service; location data indicating a user's location in a mapping application or service, and the like.
Exemplary logic for generating map tiles Using machine learning techniques
In some cases, machine learning model 510 may suggest map tile types that are not present (or outdated) in the available map tiles for a particular geographic area 512. For example, model 510 may determine that satellite map tile 516 should be selected and displayed to the user. However, map tile suggestion module 140 of FIG. 2 may access available map tiles for a particular geographic area 512 and determine that no satellite map tiles exist for that area. Accordingly, the map tile generation module 148 of FIG. 2 may generate a satellite map tile that represents an area to be displayed to a user.
FIG. 6A schematically shows how the map tile generation module 148 of FIG. 2 is trained in an exemplary scenario to generate map tiles for each request for map data. Some of the blocks in FIG. 6A represent data structures or memories, registers, or state variables (e.g., blocks 602, 606A-606n, 608a-608n) that store these data structures, other blocks represent hardware and/or software components (e.g., blocks 604, 610, 612), and other blocks represent output data (e.g., blocks 614a-614 n). The input signal is represented by an arrow corresponding to the signal name label.
In general, and as described above, a database (e.g., map database 130) responsible for storing map tiles representing the entire world to a high level of granularity may include a large number of map tiles. Updating such a database may take a long time so that map tiles representing a particular geographic area may not be updated frequently. A particular geographic area may also have map tiles representing areas that are updated at different rates, such that any given map tile representing any particular geographic area may be updated infrequently or not at all. Further, a particular geographic area may not have map tiles of each map tile type (e.g., "standard," "satellite," "terrain," "hybrid," etc.) that represent the particular geographic area.
Thus, when a user requests map tile data associated with a particular geographic area, the map tile suggestion module 140 of fig. 2 may receive client context data to determine the type of map tile to display. Module 140 may further examine the received map data 130 and determine that no map tiles of the determined map tile type are present in the map data 130 for the particular geographic area. In response, map tile generation module 148 may generate a new map tile that represents a particular geographic area.
Generative machine learning engine 604 may generate a new map tile based on a generative machine learning model method. Broadly, a generative machine learning model approach involves training a generative engine to learn regularities and/or patterns in a set of input data so that the engine can generate new examples of the input data. As the generative engine trains on more input data, new examples generated by the engine may increase similarity to the input data. Thus, the goal of the generative machine learning model approach is to be able to generate new examples of input data that are similar to the original input data.
The map tile generation module 148 of fig. 2 may include a generative machine learning engine 604 to generate map tiles to be displayed to a user. To generate map tiles, generative machine learning engine 604 receives training data comprising a first set of historic map tiles 606a for a particular geographic area and a first set of historic map tile types 608a corresponding to the first set of historic map tiles 606 a. The training data also includes a second set of historical map tiles 606b for the particular geographic area and a second set of historical map tile types 608b corresponding to the second set of historical map tiles 606 b. Further, the training data includes an nth set of historical map tiles 606n for a particular geographic area and an nth set of historical map tile types 608n corresponding to the nth set of historical map tiles 606 n.
Multiple sets of historical map tiles 606a-606n may be stored in map tile database 130 and may represent each available map tile for a particular geographic area. For example, a particular geographic area may have a "standard" map tile representing the area that was last updated two years ago. Similarly, a particular geographic area may have a "satellite" map tile that represents the last updated area a year ago. Further, a particular geographic area may have "terrain" map tiles that were updated two days ago. Thus, the first set of history map tiles 606a may include each of these map tiles. Accordingly, the first set of historical map tile types 608a may include data indicating that the map tile types included in the first set of historical map tiles 606a include "standard," satellite, "and" terrain.
Each of the multiple sets of historical map tiles 606a-606n may include similar map tiles, and each set of historical map tile types 608a-608n may include similar map tile types. However, it should be understood that each of the multiple sets of history map tiles 606a-606n may include different map tiles such that each set represents a different geographic area. It will be similarly understood that each set of historical map tile types 608a-608n may include any combination of map tile types that correspond to map tile types that represent the geographic area indicated in the respective set of historical map tiles 606a-606 n.
In any case, the generative machine learning engine 604 may retrieve multiple sets of historical map tiles 606a-606n and multiple sets of historical map tile types 608a-608n from the map tile database 130. Upon retrieval, generative machine learning engine 604 may utilize this data to train generator 610 and discriminator 612. For example, the generative machine learning engine 604 may pass sets of historical map tiles 606a-606n and historical map tile types 608a-608n through a generator 610 to generate a set of generated map tiles 614a-614 n. Each set of generated map tiles 614a-614n may include any number of generated map tiles.
The generator 610 may then pass the generated map tiles 614a-614n to a discriminator 612. The evaluator 612 can also receive multiple sets of history map tiles 606a-606 n. Using two sets of data (e.g., 606a-606n and 614a-614n), the evaluator 612 may attempt to determine which map tiles are not members of the multiple sets of historical map tiles 606a-606 n. For example, discriminator 612 may analyze each map tile included in the first set of historical map tiles 606a and each map tile included in the first set of generated map tiles 614 a. The discriminator 612 may determine characteristics of consistent map tiles, such as road placement, landmark placement, location names, etc., from which the discriminator may attempt to determine one or more map tiles that deviate from consistent characteristics. If the discriminator 612 analyzes a particular map tile that includes features that are beyond those of map tiles that the discriminator 612 expects to describe a particular geographic area, the discriminator 612 may mark the particular map tile as a generated map tile. In that case, evaluator 612 may return the marked map tiles to generator 610 and/or otherwise indicate to generator 610 that a map tile from a set of generated map tiles is not sufficiently similar to the set of historical map tiles representing the particular geographic area. Generator 610 may analyze the marked map tiles to determine the characteristics of the marked map tiles that resulted in the marked tiles. Thus, in future iterations of the generative machine learning process, generator 610 may alter the map tile generation process to avoid similar labeled results from discriminator 612.
In this manner, generative machine learning engine 604 may progressively generate map tiles that more closely correspond to sets of historical map tiles (e.g., sets of historical map tiles 606a-606 n) for any particular geographic area. Thus, in the event that a user requests map data corresponding to a geographic area and the system determines (e.g., via map tile suggestion module 140) that map tile database 130 does not include map tiles for a particular geographic area corresponding to a preferred/determined map tile type, engine 604 may generate a preferred/determined map tile type of map tile for the particular geographic area to display to the user.
To illustrate, and as shown in the exemplary request scenario 620 of fig. 6B, the generative machine learning engine 604 may receive data indicative of a request to generate a new map tile. Engine 604 may receive an updated map tile request 622. The updated map tile request 622 may include data indicating the type of map tile that engine 604 should generate (e.g., "terrain," "satellite," etc.). For example, a user may scroll over a particular geographic area without an associated "terrain" type map tile. Upon user request, or based on user context data, the system (e.g., server 101) may attempt to retrieve "terrain" type map tiles for a particular geographic area and may fail. Accordingly, an updated map tile request 622 can be transmitted to generative learning machine 604, and request 622 can indicate that the map tile that engine 604 should generate is a "terrain" type map tile for a particular geographic area.
Accordingly, engine 604 may retrieve historical map tiles 624 from map tile database 130 for use in the generation process. The engine 604 may retrieve these historical map tiles 624 after receiving the updated map tile request 622. It should be understood that history map tile 624 may include one or more history map tiles. Regardless, once engine 604 receives both the updated map tile request 622 and the historical map tile 624, engine 604 proceeds with the map tile generation process.
Accordingly, engine 604 may transmit generated map tile 626 and historical map tile 624 to evaluator 612. Discriminator 612 may receive map tiles (624, 626) and attempt to determine which map tiles are not members of history map tile 624. As previously described, discriminator 612 may analyze each map tile included in history map tile 624 and generated map tile 626. The discriminator 612 may determine characteristics of consistent map tiles, such as road placement, landmark placement, location names, etc., from which the discriminator may attempt to determine one or more map tiles that deviate from consistent characteristics. If discriminator 612 analyzes generated map tile 626 and determines that generated map tile 626 includes features beyond those expected by discriminator 612 to describe a map tile for a particular geographic area, discriminator 612 may mark generated map tile 626, as described above. However, if discriminator 612 does not mark generated map tile 626, engine 604 may determine that generated map tile 626 should be transmitted to the user for display. Accordingly, engine 604 may designate generated map tile 626 as a new predicted map tile 628 and transmit new predicted map tile 628 (e.g., via client device 102) to the user for display.
It should be appreciated that for any particular updated map tile request 622, generator 610 may generate and evaluator 612 may mark a plurality of generated map tiles 626. For example, the generated map tile 626 may be marked by the discriminator 612. In that case, generator 610 may receive an indication of map tile 626 generated by discriminator 612 marking, and generator 610 may generate a subsequently generated map tile 626. In an embodiment, this may occur multiple times until generator 610 generates a generated map tile 626 that is not marked by discriminator 612.
Exemplary method for suggesting map tiles
FIG. 7 illustrates a flow chart of an exemplary method 700 for suggesting map tiles to be displayed to a user. The method may be implemented as a set of instructions stored in a computer readable memory and executable at one or more processors of the server device 101. For example, the method may be implemented by map tile suggestion module 140.
At block 702, one or more processors (e.g., CPU 144) may receive a request from a user device (e.g., client device 102) for map data for a particular geographic area. The user may manually request the map data, and/or the user device may automatically send a request for the map data. For example, a user may manually request map data by interacting with a user control appearing on the map display, a text box appearing on the map display, and/or any other suitable indication. Further, the user device may automatically send a request for map data as the user scrolls across the map display and encounters a particular geographic area.
Regardless, once the one or more processors receive a request for map data for a particular area, the one or more processors may obtain a set of user context data (block 704). In an embodiment, the set of user context data may comprise at least one of: (i) a set of current user activity data indicating that the user is traveling, that the user is planning a trip, or that the user is using a mapping application; (ii) the current date; (iii) the current time; (iv) weather forecast; (v) a set of location metadata associated with a particular geographic area; (vi) a set of connectivity data indicating a current state of a communication network in which the user equipment is communicating; (vii) a set of battery life data indicative of a current battery state of the user equipment; and/or any combination thereof. For example, the user device may access GPS data to determine that the user is currently traveling, and the user device may access a calendar associated with the user to retrieve data indicating that the user intends to travel on foot today.
The one or more processors may then obtain a set of candidate map tiles associated with the particular geographic area (block 706). In an embodiment, the set of candidate map tiles may include (i) a terrain map tile, (ii) a satellite image map tile, (iii) a hybrid map tile, (iv) a standard map tile, and/or any combination thereof. Once the one or more processors obtain a set of candidate map tiles, the one or more processors may select one or more of the candidate map tiles based on the set of user context data (block 708).
In an embodiment, the one or more processors may determine a type of the map tile for the set of user context data. Referring to the previous example, the one or more processors may analyze the set of user context data and select a "terrain" map tile type because the user is currently traveling far enough and may prefer to view the terrain for a particular geographic area. The one or more processors may then identify one or more of the set of candidate map tiles corresponding to the determined map tile type. If at least one candidate map tile in the set of candidate map tiles is a determined type of map tile, the one or more processors may transmit the selected map tile to the user device for display (block 710).
However, in an embodiment, the one or more processors may determine that, for at least a portion of the particular geographic area, there is no map tile in the set of candidate map tiles that corresponds to the determined map tile type. In these cases, the one or more processors may need to generate a new map tile corresponding to the determined map tile type. Accordingly, as previously described with reference to fig. 6A-6B, the one or more processors may train a generative machine learning model (e.g., generative machine learning engine 604) in order to generate a new map tile. The one or more processors may train the generative machine learning model using (i) a plurality of previously generated map tiles, (ii) a set of indications of a corresponding type for each of the plurality of previously generated map tiles, and/or any combination thereof.
Once the one or more processors have trained the generative machine learning model, the one or more processors may obtain historical map tiles corresponding to a portion of a particular geographic area and apply data indicative of the determined map tile type and the historical map tiles to the generative machine learning model. The generative machine learning model may then generate a new map tile corresponding to the determined map tile type based on the historical map tiles and data indicative of the determined map tile type. Accordingly, the one or more processors may then transmit the new map tile to the user device for display.
In an embodiment, the one or more processors may train the machine learning model using: (i) a plurality of map tiles previously displayed on the user device; and for each of the plurality of map tiles, using (ii) the user context data for the map tile; and (iii) an indication of whether the user requested other map tiles in response to displaying the map tile. The one or more processors may then apply a machine learning model to the set of candidate map tiles and the set of user context data to select one or more of the set of candidate map tiles.
Additionally or alternatively, in these embodiments, the one or more processors may apply a machine learning model to the set of candidate map tiles and the set of user context data to determine a confidence score for each map tile in the set of candidate map tiles. The confidence score may indicate a predicted relevance of individual map tiles in the set of candidate map tiles, e.g., based on the set of user context data. By way of illustration, and with reference to the previous hiking example, a terrain map tile may have a high confidence score based on user context data (e.g., GPS data indicating that the user is currently traveling and data indicating that the user intends to hike). In contrast, a satellite map tile may have a lower confidence score than a terrain map tile based on user context data. In any case, the one or more processors may compare the respective confidence scores for each map tile to rank the set of candidate map tiles. The map tile in the set of candidate map tiles with the highest confidence score may be transmitted to the user device for display.
In an embodiment, the one or more processors may rank the set of candidate map tiles according to the set of user context data. For example, the set of user context data may include a tag that associates the set of user context data with a particular type of map tile. Referring to the previous hiking example, data indicating that the user intends to hiking today may include a tag associating the data with a map tile of the "terrain" type. In any case, the one or more processors may select one or more highest ranked map tiles from the set of candidate map tiles for transmission to the user device for display.
Other considerations
The following additional considerations apply to the foregoing discussion. Throughout this specification, various examples may implement a component, an operation, or a structure described as a single example. Although individual operations of one or more methods are shown and described as separate operations, one or more of the individual operations may be performed concurrently and nothing requires that the operations be performed in the order illustrated. Structures and functionality presented as separate components in the exemplary configurations may be implemented as a combined structure or component. Similarly, structures and functionality presented as a single component may be implemented as separate components. These and other variations, modifications, additions, and improvements fall within the scope of the subject matter of the present disclosure.
In addition, certain embodiments are described herein as comprising logic or multiple components, modules, or mechanisms. The modules may constitute software modules (e.g., code stored on a machine-readable medium) or hardware modules. A "hardware module" is a tangible unit capable of performing certain operations and may be configured or arranged in a particular manner. In an example embodiment, one or more computer systems (e.g., a standalone computer system, a client computer system, or a server computer system) or one or more hardware modules (e.g., a processor or a set of processors) of a computer system may be configured by software (e.g., an application program or portion of an application program) as a hardware module that operates to perform certain operations as described herein.
In various embodiments, the hardware modules may be implemented mechanically or electronically. For example, a hardware module may comprise special purpose circuitry or logic that is permanently configured (e.g., as a special purpose processor, such as a Field Programmable Gate Array (FPGA) or an Application Specific Integrated Circuit (ASIC)) to perform certain operations. A hardware module may also include programmable logic or circuitry (e.g., as contained in a general-purpose processor or other programmable processor) that is temporarily configured by software to perform certain operations. It will be appreciated that the decision to mechanically implement a hardware module in a dedicated and persistently configured circuit or in a temporarily configured circuit (e.g., configured by software) may be driven by cost and time considerations.
The term hardware, therefore, should be understood to encompass a tangible entity, be that an entity that is physically constructed, permanently configured (e.g., hardwired), or temporarily configured (e.g., programmed) to operate in a certain manner or to perform certain operations described herein. As used herein, "hardware-implemented module" refers to a hardware module. In view of embodiments in which the hardware modules are temporarily configured (e.g., programmed), each of the hardware modules need not be configured or instantiated at any one time. For example, where the hardware modules include a general-purpose processor configured using software, the general-purpose processor may be configured as respective different hardware modules at different times. The software may configure the processor accordingly, for example, to constitute a particular hardware module at one time and to constitute a different hardware module at a different time.
A hardware module may provide information to other hardware engines and receive information from other hardware. Thus, the described hardware modules may be considered to be communicatively coupled. In the case where such hardware modules are simultaneously present, communication may be achieved through signal transmission (e.g., through appropriate circuits and buses) connecting the hardware modules. In embodiments in which multiple hardware modules are configured or instantiated at different times, communication between such hardware modules may be accomplished, for example, through the storage and retrieval of information in memory structures accessible to the multiple hardware modules. For example, a hardware module may perform an operation and store the output of the operation in a memory device communicatively coupled thereto. Another hardware module may then access the memory device at a later time to retrieve and process the stored output. The hardware modules may also initiate communication with input or output devices and may operate on resources (e.g., sets of information).
The method 700 may include one or more functional blocks, modules, individual functions or routines in the form of tangible computer-executable instructions that are stored in a non-transitory computer-readable storage medium and executed using a processor of a computing device (e.g., a server device, a personal computer, a smartphone, a tablet, a smart watch, a mobile computing device, or other client computing device, as described herein). The method 700 may be included as part of any back-end server (e.g., a map data server, a navigation server, or any other type of server computing device as described herein), a client computing device module, or as part of an outside module of such an environment, of the exemplary environment. Although the figures may be described with reference to other figures for ease of illustration, the method 700 may be used with other objects and user interfaces. Moreover, although the above description describes steps of method 700 being performed by a particular device (such as server device 101 or client computing device 102), this is for illustration purposes only. The blocks of method 700 may be performed by one or more devices or other parts of the environment.
Various operations of the example methods described herein may be performed, at least in part, by one or more processors that are temporarily configured (e.g., by software) or permanently configured to perform the relevant operations. Whether temporarily configured or permanently configured, such processors may constitute processor-implemented modules that operate to perform one or more operations or functions. In some example embodiments, the modules referred to herein may comprise processor-implemented modules.
Similarly, the methods or routines described herein may be implemented at least in part by a processor. For example, at least some of the operations of the method may be performed by one or more processors or processor-implemented hardware modules. The execution of certain operations may be distributed among one or more processors, and not only reside within a single machine, but are deployed across multiple machines. In some example embodiments, one or more processors may be located at a single location (e.g., within a home environment, an office environment, or as a server farm), while in other embodiments, processors may be distributed across multiple locations.
The one or more processors may also support the performance of related operations in a "cloud computing" environment or as SaaS. For example, as indicated above, at least some of the operations may be performed by a set of computers (as an example of machines including processors), which may be accessed via a network (e.g., the internet) and via one or more appropriate interfaces (e.g., APIs).
Moreover, the figures depict embodiments of the exemplary environment for purposes of illustration only. One skilled in the art will readily recognize from the following discussion herein that alternative embodiments of the structures and methods illustrated herein may be employed without departing from the principles described herein.
After reading this disclosure, those skilled in the art will understand additional alternative structural and functional designs that provide dynamic generation and suggestion of map tiles based on user context through the principles disclosed herein. Thus, while particular embodiments and applications have been illustrated and described, it is to be understood that the disclosed embodiments are not limited to the precise construction and components disclosed herein. Various modifications, changes, and variations which will be apparent to those skilled in the art may be made in the arrangement, operation, and details of the methods and apparatus disclosed herein without departing from the spirit and scope defined in the appended claims.
Claims (20)
1. A method for selectively generating map tiles based on user context, the method comprising:
receiving, at one or more processors, a request from a user device for map data for a particular geographic area;
obtaining, by the one or more processors, a set of user context data;
obtaining, by the one or more processors, a set of candidate map tiles associated with the particular geographic area;
selecting, by the one or more processors, one or more of the set of candidate map tiles based on the set of user context data; and
transmitting, by the one or more processors, one or more selected map tiles to the user device for display.
2. The method of claim 1, wherein selecting one or more of the set of candidate map tiles based on the set of user context data comprises:
ranking, by the one or more processors, the set of candidate map tiles according to the set of user context data; and
selecting, by the one or more processors, one or more highest-ranked map tiles in the set of candidate map tiles.
3. The method of claim 1, further comprising:
training, by the one or more processors, a machine learning model using: (i) a plurality of map tiles previously displayed on the user device; and for each of the plurality of map tiles, using (ii) the user context data for the map tile; and (iii) an indication of whether a user requested a different map tile in response to displaying the map tile; and
applying, by the one or more processors, the machine learning model to the set of candidate map tiles and the set of user context data to select one or more of the set of candidate map tiles.
4. The method of claim 3, wherein selecting one or more of the set of candidate map tiles based on the set of user context data comprises:
applying, by the one or more processors, the machine learning model to the set of candidate map tiles and the set of user context data to determine a confidence score for each map tile in the set of candidate map tiles; and
comparing, by the one or more processors, the respective confidence scores for each map tile to rank the set of candidate map tiles.
5. The method of claim 1, wherein selecting one or more of the set of candidate map tiles based on the set of user context data comprises:
determining, by the one or more processors, a type of map tile for the set of user context data; and
identifying, by the one or more processors, one or more of the set of candidate map tiles corresponding to the determined map tile type.
6. The method of claim 5, further comprising:
determining, by the one or more processors, that, for at least a portion of the particular geographic area, there is not a map tile in the set of candidate map tiles that corresponds to the determined map tile type;
generating, by the one or more processors, a new map tile corresponding to the determined map tile type comprises:
obtaining, by the one or more processors, historical map tiles corresponding to the portion of the particular geographic area; and
applying, by the one or more processors, the data indicative of the determined map tile type and the historical map tile to a generative machine learning model to generate the new map tile corresponding to the determined map tile type based on the historical map tile and the data indicative of the determined map tile type; and
transmitting, by the one or more processors, the new map tile to the user device for display.
7. The method of claim 6, further comprising: training, by the one or more processors, the generative machine learning model using (i) a plurality of previously generated map tiles, and (ii) an indication of a corresponding type for each of the plurality of previously generated map tiles.
8. The method of claim 1, wherein the set of user context data comprises at least one of: (i) current user activity data indicating that a user is traveling, the user is planning a trip, or the user is using a mapping application; (ii) the current date; (iii) the current time; (iv) weather forecast; (v) a set of location metadata associated with the particular geographic area; (vi) connectivity data indicating a current state of a communication network in which the user equipment is communicating; or (vii) battery life data indicative of a current battery state of the user equipment.
9. The method of claim 1, wherein the set of candidate map tiles comprises at least one of: i) a terrain map tile, (ii) a satellite image map tile, or (iii) a hybrid map tile.
10. A server device for selectively generating map tiles based on user context, the server device comprising:
one or more processors; and
a non-transitory computer-readable memory coupled to the one or more processors and storing instructions thereon that, when executed by the one or more processors, will cause the server apparatus to:
receiving a request from a user device for map data for a particular geographic area;
obtaining a set of user context data;
obtaining a set of candidate map tiles associated with the particular geographic area;
selecting one or more of the set of candidate map tiles based on the set of user context data; and is
Transmitting the one or more selected map tiles to the user equipment for display.
11. The server apparatus of claim 10, wherein the instructions further cause the server apparatus to:
ranking the set of candidate map tiles according to the set of user context data; and is
Selecting one or more highest ranked map tiles among the set of candidate map tiles.
12. The server apparatus of claim 10, wherein the instructions further cause the server apparatus to:
the machine learning model is trained using: (i) a plurality of map tiles previously displayed on the user device; and for each of the plurality of map tiles, using (ii) the user context data for the map tile; and (iii) an indication of whether a user requested a different map tile in response to displaying a map tile of the plurality of map tiles; and is
Applying the machine learning model to the set of candidate map tiles and the set of user context data to select one or more of the set of candidate map tiles.
13. The server apparatus of claim 12, wherein the instructions further cause the server apparatus to:
applying the machine learning model to the set of candidate map tiles and the set of user context data to determine a confidence score for each map tile in the set of candidate map tiles; and is
Comparing the respective confidence scores for each map tile to rank the set of candidate map tiles.
14. The server apparatus of claim 10, wherein the instructions further cause the server apparatus to:
determining a type of map tile for the set of client context data; and is
One or more of the set of candidate map tiles corresponding to the determined map tile type are identified.
15. The server apparatus of claim 14, wherein the instructions further cause the server apparatus to:
determining, for at least a portion of the particular geographic area, that no map tile of the set of candidate map tiles exists that corresponds to the determined map tile type;
generating a new map tile corresponding to the determined map tile type comprises:
training a generative machine learning model using (i) a plurality of previously generated map tiles, and (ii) an indication of a type of each of the plurality of previously generated map tiles;
obtaining a historical map tile corresponding to a portion of the particular geographic area; and
applying the historical map tile to the generative machine learning model to generate the new map tile corresponding to the determined map tile type based on the historical map tile and the plurality of previously generated map tiles; and is
Transmitting the new map tile to the user device for display.
16. A non-transitory computer-readable medium storing instructions for selectively generating map tiles based on user context, the instructions, when executed by one or more processors in a computing device, cause the one or more processors to:
receiving a request from a user device for map data for a particular geographic area;
obtaining a set of user context data;
obtaining a set of candidate map tiles associated with the particular geographic area;
selecting one or more of the set of candidate map tiles based on the set of user context data; and is
Transmitting the one or more selected map tiles to the user equipment for display.
17. The non-transitory computer-readable storage medium of claim 16, wherein the instructions further cause the one or more processors to:
ranking the set of candidate map tiles according to the set of user context data; and is
Selecting one or more highest ranked map tiles among the set of candidate map tiles.
18. The non-transitory computer-readable storage medium of claim 16, wherein the instructions further cause the one or more processors to:
the machine learning model is trained using: (i) a plurality of map tiles previously displayed on the user device; and for each of the plurality of map tiles, using (ii) the user context data for the map tile; and (iii) an indication of whether a user requested a different map tile in response to displaying a map tile of the plurality of map tiles; and is
Applying the machine learning model to the set of candidate map tiles and the set of user context data to select one or more of the set of candidate map tiles.
19. The non-transitory computer-readable storage medium of claim 18, wherein the instructions further cause the one or more processors to:
applying the machine learning model to the set of candidate map tiles and the set of user context data to determine a confidence score for each map tile in the set of candidate map tiles; and is
Comparing the respective confidence scores for each map tile to rank the set of candidate map tiles.
20. The non-transitory computer-readable storage medium of claim 16, wherein the instructions further cause the one or more processors to:
determining a type of map tile for the set of client context data;
identifying one or more of the set of candidate map tiles corresponding to the determined map tile type;
determining, for at least a portion of the particular geographic area, that no map tile of the set of candidate map tiles exists that corresponds to the determined map tile type;
generating a new map tile corresponding to the determined map tile type comprises:
training a generative machine learning model using (i) a plurality of previously generated map tiles, and (ii) an indication of a type of each of the plurality of previously generated map tiles;
obtaining a historical map tile corresponding to a portion of the particular geographic area; and
applying the historical map tile to the generative machine learning model to generate the new map tile corresponding to the determined map tile type based on the historical map tile and the plurality of previously generated map tiles; and is
Transmitting the new map tile to the user device for display.
Applications Claiming Priority (1)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
PCT/US2019/067562 WO2021126218A1 (en) | 2019-12-19 | 2019-12-19 | Dynamic generation and suggestion of tiles based on user context |
Publications (1)
Publication Number | Publication Date |
---|---|
CN113574520A true CN113574520A (en) | 2021-10-29 |
Family
ID=69191240
Family Applications (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
CN201980044362.1A Pending CN113574520A (en) | 2019-12-19 | 2019-12-19 | Dynamic generation and suggestion of tiles based on user context |
Country Status (4)
Country | Link |
---|---|
US (1) | US20220316917A1 (en) |
EP (1) | EP3857404A1 (en) |
CN (1) | CN113574520A (en) |
WO (1) | WO2021126218A1 (en) |
Families Citing this family (1)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
WO2023000278A1 (en) * | 2021-07-22 | 2023-01-26 | 深圳市大疆创新科技有限公司 | Work planning method, control terminal, and storage medium |
Family Cites Families (7)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US8521424B2 (en) * | 2010-09-29 | 2013-08-27 | Ford Global Technologies, Llc | Advanced map information delivery, processing and updating |
US8280414B1 (en) * | 2011-09-26 | 2012-10-02 | Google Inc. | Map tile data pre-fetching based on mobile device generated event analysis |
WO2018126079A1 (en) * | 2016-12-30 | 2018-07-05 | DeepMap Inc. | High definition map and route storage management system for autonomous vehicles |
DE102017218394A1 (en) * | 2017-10-13 | 2019-04-18 | Robert Bosch Gmbh | Method and system for loading digital geographic map tiles |
US20190212977A1 (en) * | 2018-01-08 | 2019-07-11 | Facebook, Inc. | Candidate geographic coordinate ranking |
US11263245B2 (en) * | 2018-10-30 | 2022-03-01 | Here Global B.V. | Method and apparatus for context based map data retrieval |
US11593411B2 (en) * | 2019-09-13 | 2023-02-28 | International Business Machines Corporation | Historical augmentation of electronic maps |
-
2019
- 2019-12-19 US US17/057,077 patent/US20220316917A1/en active Pending
- 2019-12-19 EP EP19842670.2A patent/EP3857404A1/en not_active Withdrawn
- 2019-12-19 WO PCT/US2019/067562 patent/WO2021126218A1/en unknown
- 2019-12-19 CN CN201980044362.1A patent/CN113574520A/en active Pending
Also Published As
Publication number | Publication date |
---|---|
US20220316917A1 (en) | 2022-10-06 |
EP3857404A1 (en) | 2021-08-04 |
WO2021126218A1 (en) | 2021-06-24 |
Similar Documents
Publication | Publication Date | Title |
---|---|---|
US11933622B2 (en) | Collective vehicle traffic routing | |
US9057617B1 (en) | Enhanced identification of interesting points-of-interest | |
US8620579B1 (en) | Enhanced identification of interesting points-of-interest | |
CN117029868A (en) | System and method for using visual landmarks in initial navigation | |
US20150066649A1 (en) | System and method of providing touristic paths | |
US11257200B1 (en) | Computationally efficient distance-based score approximations | |
EP3543907A1 (en) | Method, apparatus, and system for dynamic adaptation of an in-vehicle feature detector | |
US20150260532A1 (en) | Systems and methods for updating map information using local driver input | |
US11055862B2 (en) | Method, apparatus, and system for generating feature correspondence between image views | |
US20220108610A1 (en) | Phantom traffic jam detection and avoidance | |
US11385063B1 (en) | Computationally efficient distance-based score approximations | |
JP2010133913A (en) | Bearing display device and bearing display method | |
JP2024020616A (en) | Providing additional instructions for difficult maneuvers during navigation | |
US20220286804A1 (en) | Recommending targeted locations and optimal experience time | |
CN113574520A (en) | Dynamic generation and suggestion of tiles based on user context | |
JP7189797B2 (en) | Map display device, method and program | |
EP3413099A1 (en) | Method and apparatus for providing a weather volatility index | |
Soe | An Efficient Method of Avoiding Traffic Congestion and Optimal Routing (ATCOR) System in Yangon | |
Deshmukh et al. | Remote Sensing and Geographic Information System-Based Route Planning | |
Goulet et al. | Choosing a Global Positioning System Device for Use in US Army Corps of Engineers Regulatory Districts | |
WO2009093889A1 (en) | Navigation device, method to be performed by such a navigation device |
Legal Events
Date | Code | Title | Description |
---|---|---|---|
PB01 | Publication | ||
PB01 | Publication | ||
SE01 | Entry into force of request for substantive examination | ||
SE01 | Entry into force of request for substantive examination |