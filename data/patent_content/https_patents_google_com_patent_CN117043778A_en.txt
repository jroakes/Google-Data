CN117043778A - Generating a learned representation of a digital circuit design - Google Patents
Generating a learned representation of a digital circuit design Download PDFInfo
- Publication number
- CN117043778A CN117043778A CN202280021111.3A CN202280021111A CN117043778A CN 117043778 A CN117043778 A CN 117043778A CN 202280021111 A CN202280021111 A CN 202280021111A CN 117043778 A CN117043778 A CN 117043778A
- Authority
- CN
- China
- Prior art keywords
- digital circuit
- neural network
- circuit design
- node
- data
- Prior art date
- Legal status (The legal status is an assumption and is not a legal conclusion. Google has not performed a legal analysis and makes no representation as to the accuracy of the status listed.)
- Pending
Links
- 238000013461 design Methods 0.000 title claims abstract description 179
- 238000013528 artificial neural network Methods 0.000 claims abstract description 187
- 238000000034 method Methods 0.000 claims abstract description 89
- 238000012545 processing Methods 0.000 claims abstract description 41
- 238000003860 storage Methods 0.000 claims abstract description 14
- 238000012360 testing method Methods 0.000 claims description 54
- 238000013101 initial test Methods 0.000 claims description 17
- 230000004044 response Effects 0.000 claims description 9
- 230000000306 recurrent effect Effects 0.000 claims description 7
- 238000010200 validation analysis Methods 0.000 claims description 2
- 230000001419 dependent effect Effects 0.000 claims 1
- 238000004590 computer program Methods 0.000 abstract description 15
- 230000008569 process Effects 0.000 description 41
- 238000012549 training Methods 0.000 description 24
- 238000010801 machine learning Methods 0.000 description 8
- 230000006870 function Effects 0.000 description 6
- 238000012795 verification Methods 0.000 description 6
- 230000009471 action Effects 0.000 description 5
- 238000004891 communication Methods 0.000 description 5
- 238000004519 manufacturing process Methods 0.000 description 4
- 238000012546 transfer Methods 0.000 description 4
- 230000007704 transition Effects 0.000 description 4
- 238000010586 diagram Methods 0.000 description 3
- 230000003993 interaction Effects 0.000 description 3
- 230000015654 memory Effects 0.000 description 3
- 238000011176 pooling Methods 0.000 description 3
- 230000026676 system process Effects 0.000 description 3
- 230000008859 change Effects 0.000 description 2
- 230000003287 optical effect Effects 0.000 description 2
- 238000013515 script Methods 0.000 description 2
- 238000000926 separation method Methods 0.000 description 2
- 241001250090 Capra ibex Species 0.000 description 1
- 238000004458 analytical method Methods 0.000 description 1
- 230000005540 biological transmission Effects 0.000 description 1
- 238000004364 calculation method Methods 0.000 description 1
- 230000001149 cognitive effect Effects 0.000 description 1
- 239000002131 composite material Substances 0.000 description 1
- 230000007547 defect Effects 0.000 description 1
- 238000009826 distribution Methods 0.000 description 1
- 239000004973 liquid crystal related substance Substances 0.000 description 1
- 230000008447 perception Effects 0.000 description 1
- 230000000644 propagated effect Effects 0.000 description 1
- 239000004065 semiconductor Substances 0.000 description 1
- 230000001953 sensory effect Effects 0.000 description 1
- 230000006403 short-term memory Effects 0.000 description 1
- 239000000758 substrate Substances 0.000 description 1
- 230000000007 visual effect Effects 0.000 description 1
Classifications
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F30/00—Computer-aided design [CAD]
- G06F30/20—Design optimisation, verification or simulation
- G06F30/27—Design optimisation, verification or simulation using machine learning, e.g. artificial intelligence, neural networks, support vector machines [SVM] or training a model
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F30/00—Computer-aided design [CAD]
- G06F30/30—Circuit design
- G06F30/32—Circuit design at the digital level
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06N—COMPUTING ARRANGEMENTS BASED ON SPECIFIC COMPUTATIONAL MODELS
- G06N3/00—Computing arrangements based on biological models
- G06N3/02—Neural networks
- G06N3/04—Architecture, e.g. interconnection topology
- G06N3/045—Combinations of networks
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F2111/00—Details relating to CAD techniques
- G06F2111/08—Probabilistic or stochastic CAD
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F30/00—Computer-aided design [CAD]
- G06F30/30—Circuit design
- G06F30/32—Circuit design at the digital level
- G06F30/33—Design verification, e.g. functional simulation or model checking
Abstract
Methods, systems, and apparatus, including computer programs encoded on a computer storage medium, for generating a learned representation of a digital circuit design. One of the systems includes: obtaining data representing a program implementing a digital circuit design, the program comprising a plurality of statements; processing the obtained data to generate data representing a graphic representing the digital circuit design, the graphic comprising: a plurality of nodes representing respective statements of a program, a plurality of first edges each representing a control flow between pairs of statements of the program, and a plurality of second edges each representing a data flow between pairs of statements of the program; and generating a learned representation of the digital circuit design, comprising: the data representing the graph is processed using the graph neural network to generate a respective learned representation of each statement represented by the nodes of the graph.
Description
Cross Reference to Related Applications
The present application is based on the priority rights of U.S. provisional application Ser. No. 63/194,934, filed on 5/28 of 2021, volume 35, section 119, which is incorporated herein by reference in its entirety.
Background
The present description relates to neural networks.
Neural networks are machine learning models that employ one or more layers of nonlinear units to predict output for a received input. Some neural networks include one or more hidden layers in addition to the output layer. The output of each hidden layer serves as an input to the next layer (i.e., the next hidden layer or output layer) in the network. Each layer of the network generates an output from the received inputs based on the current values of the respective parameter sets.
Disclosure of Invention
The specification describes a system implemented as a computer program on one or more computers in one or more locations, the system configured to process data representing a digital circuit design to generate a machine-learned representation of the design (or equivalently, a machine-learned representation of a digital circuit manufactured in accordance with the design). The system may then process the learned representation of the digital circuit design using one or more predictive neural networks to generate corresponding predictions about the digital circuit design.
The subject matter described in this specification can be implemented in specific embodiments to realize one or more of the following advantages.
Using the techniques described in this specification, a system may generate a machine-learned representation of a digital circuit design and use the machine-learned representation for a plurality of different downstream tasks. The machine-learned representation may encode information about properties of the digital circuit design and source code information from program statements used to implement the circuit.
Existing systems that perform verification of digital circuit designs may require different manual design testing for each new design, which may require hundreds or thousands of expert engineers hours. Using some of the techniques described in this specification, a trained neural network can automatically generate new tests for a given digital circuit design.
Performing the manually designed test can require a significant amount of time and computational cost, sometimes requiring hours or days to complete a single set of tests. Using some of the techniques described in this specification, the system can predict the results of a particular test more quickly and with high accuracy. For example, in some implementations, generating predictions of test results requires only a single forward propagation through the trained neural network, which may take, for example, a few seconds or a fraction of a second. Providing immediate feedback to a digital circuit design engineer can significantly improve the efficiency of the process of designing new circuits, enabling the engineer to test more designs and iterate much faster.
The details of one or more embodiments of the subject matter of this specification are set forth in the accompanying drawings and the description below. Other features, aspects, and advantages of the subject matter will become apparent from the description, the drawings, and the claims.
Drawings
FIG. 1 is a diagram of an example neural network system configured to generate a learned representation of a digital circuit design.
FIG. 2 illustrates an example graph determined from a digital circuit design.
FIG. 3 is a flow chart of an example process for generating a learned representation of a digital circuit design.
FIG. 4 is a flow chart of an example process for predicting coverage using a learned representation of a digital circuit design.
FIG. 5 is a flow chart of an example process for generating new test inputs using a learned representation of a digital circuit design.
Like reference numbers and designations in the various drawings indicate like elements.
Detailed Description
The present specification describes a system implemented as a computer program on one or more computers in one or more locations, the system configured to generate a composite image using a self-attention-based neural network.
FIG. 1 is a diagram of an example neural network system 100 configured to generate a learned representation 122 of a circuit design 102. The neural network system 100 is an example of a system implemented as a computer program on one or more computers in one or more locations, in which the systems, components, and techniques described below may be implemented.
The neural network system 100 includes a pattern generation system 110, a pattern neural network 120, and a prediction neural network 130.
Graphics generation system 110 is configured to process data representing digital circuit design 102 to generate graphics 112 representing digital circuit design 102. Graphics 112 may include: (i) A plurality of nodes, each node representing a respective component of the digital circuit design, and (ii) a plurality of edges, each edge connecting a respective pair of nodes, and each edge representing a connection between the respective components of the digital circuit design represented by the pair of nodes.
The graphic neural network 120 is configured to process the data representing the graphic 112 to generate a learned representation 122 of the digital circuit design 102. For each component of digital circuit design 102 represented by a respective node of the graph, learned representation 122 may include an updated representation of the component generated by graph neural network 120.
The predictive neural network 130 is configured to process the learned representation 122 of the digital circuit design 102 to generate a prediction 132 about the digital circuit design. Example predictive tasks that may be performed using the learned representation 122 of the digital circuit design 102 are discussed below.
Digital circuit design 102 may be a design for any suitable type of digital circuit. As a particular example, the digital circuit design 102 may be a design for a Reduced Instruction Set Computer (RISC) digital circuit (e.g., a digital circuit having a RISK-V architecture, such as an IBEX digital circuit). In some implementations, digital circuit design 102 represents a design of a dedicated digital circuit, i.e., a digital circuit designed to perform a particular type of task. For example, the digital circuit may be specifically designed to perform machine learning tasks, e.g., the digital circuit may be a Tensor Processing Unit (TPU) or a different ASIC designed to accelerate machine learning computations in hardware.
The neural network system 100 may be configured to receive any suitable type of data representing the digital circuit design 102. For example, the neural network system 100 may receive source code of a program implementing the digital circuit design 102. For example, the source code may be written in a hardware description language (e.g., verilog or VHSIC Hardware Description Language (VHDL)). As another example, instead of or in addition to receiving source code representing digital circuit design 102, neural network system 100 may receive data representing an Abstract Syntax Tree (AST) of the source code. As another example, instead of or in addition to receiving source code and/or AST representing digital circuit design 102, neural network system 100 may receive data representing a gate-level netlist that represents digital circuit design 102.
The data representing the digital circuit design 102 may be a representation of any suitable level of abstraction, such as a Register Transfer Level (RTL) or gate level of abstraction.
In some implementations, the neural network system 100 may be configured to process data representing only a portion of the digital circuit design 102 and generate a learned representation 112 of the portion of the digital circuit design 102. For example, the neural network system 100 may be configured to generate a strict subset of the modules of the digital circuit design 102 or a learned representation 112 of any suitable sub-circuit of the digital circuit design. While the following description generally relates to generating a learned representation of an all-digital circuit design, it should be understood that the same techniques may be applied to generate a learned representation of respective portions of a digital circuit design, such as by generating graphics 112 representing the respective portions of the digital circuit design.
As described above, the graphics generation system 110 is configured to process data representing the digital circuit design 102 to generate graphics 112 representing the digital circuit design 102.
For example, if the neural network system 100 is configured to receive data representing the digital circuit design 102 at the gate level, the pattern generation system 110 may process the data to generate a gate level state transition pattern 112 representing the digital circuit design 102, wherein each node of the gate level state transition pattern 112 corresponds to a single value of a bit level state of a register of the digital circuit design, and each edge of the gate level state transition pattern 112 represents a legal change in state that the digital circuit may make in a single clock cycle. That is, an edge between a first node and a second node representing respective values of the complete state of the register may represent a transition from the state represented by the first node to the state represented by the second node, wherein the digital circuit may change from the state represented by the first node to the state represented by the second node within a single clock cycle of the digital circuit.
As another example, if the neural network system 100 is configured to receive data representing the digital circuit design 102 at a register transfer level (e.g., if the neural network system 100 receives RTL source code of the digital circuit design 102), the pattern generation system 110 may process the data to generate a control data flow pattern (CDFG) 112 representing the digital circuit design 102.
While the following description generally refers to generating the processing graph 112, the graph 112 is a CDFG representing the digital circuit design 102 at the register transfer level, it should be understood that the same technique may be applied using any suitable representation of the digital circuit design 102.
One or more nodes of graph 112 may represent one or more corresponding statements in the source code of digital circuit design 102. In some implementations, each node in graph 112 represents one or more respective statements. That is, each node in graph 112 may represent a single statement of source code or a sequence of multiple statements of source code, e.g., a particular path within the source code that would be traversed given a particular input to a digital circuit manufactured according to digital circuit design 102. In some other implementations, the graph 112 may include one or more nodes that do not represent statements represented by source code of the digital circuit design 102.
While the following description generally refers to an implementation in which each node of graph 112 represents a single statement from source code of digital circuit design 102, it should be understood that the same techniques may be applied in implementations in which: at least some of the nodes of graph 112 represent multiple statements, such as multiple consecutive statements within the source code.
Graphics 112 may include one or more edges, referred to as "control" edges, that represent control flow between corresponding pairs of statements in the source code of digital circuit design 102. That is, a control edge from the first node to the second node represents a control flow between the statement represented by the first node and the statement represented by the second node, i.e., wherein the output of the statement represented by the first node may or may not trigger the execution of the statement represented by the second node. The control edge is sometimes referred to herein as the "first" edge.
Graphics 112 may include one or more edges, referred to as "data" edges, that represent the flow of data between corresponding pairs of statements in the source code of digital circuit design 102. That is, a data edge from a first node to a second node represents a data flow between a statement represented by the first node to a statement represented by the second node, i.e., wherein a variable whose value is generated by the statement represented by the first node is used by the statement represented by the second node.
Typically, each edge in graph 112 is a directed edge, i.e., encodes directionality (e.g., direction of control flow or data flow) from one "parent" node to another "child" node.
In some implementations, each edge in graph 112 is either a control edge or a data edge. In some other implementations, the graph 112 may include one or more edges that do not represent control and data flows within the source code representation of the digital circuit design 102. For example, one or more edges of the graph 112 may encode information about an expected time spent executing a corresponding statement in hardware and/or information about an expected power consumption of executing a corresponding statement in hardware.
The graph generation system 110 may use data representing statements of source code of the digital circuit design 102 represented by the nodes to generate an initial embedding for each node in the graph. In this specification, embedding is an ordered set of values representing inputs in a particular embedding space. For example, the embedding may be a floating point vector or other numerical value having a fixed dimension.
For example, for each node of graph 112, graph generation system 110 can generate an initial embedding of the node from a set of attributes describing the statement represented by the node. The attributes may be provided to the neural network system 100 along with data representing the digital circuit design 102, or the graphics generation system 110 may determine the attributes by processing the data representing the digital circuit design 102 (e.g., by processing source code). For example, the set of attributes may include one or more of the following: an identifier (e.g., a unique numerical value assigned to a node) that identifies the node; the node type of the node; fan-in data, such as the number or type of parent nodes of a node; fan-out data, such as the number or type of children of a node; a condition represented by a node, for example, whether the node has a control node type described below; whether the node represents the beginning of an always block; an identification of the path in the graph 121 to which the node belongs; an identification of assertions, properties, or outputs that are affected by the statement represented by the node; an identification of pipeline stages of the statement represented by the node; or an identification of one or more signals on a sensitive list of statements represented by the node. As a particular example, the graphics-generating system may concatenate the sets of attributes to generate an attribute vector and determine the initial embedding as the attribute vector or from the attribute vector.
As a specific example, the node type of the corresponding node of graph 112 may include one or more of the following: an operation node type, wherein a node having the operation node type represents a statement in source code that processes data, e.g., a statement representing arithmetic, logic, a relationship (ratio), or a complex function or module instantiation; a control node type, wherein a node having the control node type represents a statement in source code that is a conditional decision, such as a branch, loop, or case; or a storage node type, wherein a node having the storage node type represents such a statement in source code: these statements instantiate or update variables or signals that are read or written by the corresponding operations.
As another example, for each node of graph 112, graph generation system 110 can generate an initial embedding of the node by processing portions of source code corresponding to statements represented by the node. For example, the graphics-generating system 110 may identify a sequence of tokens representing sentences, e.g., where each token represents a word or character of source code. The graphics-generating system 110 may combine tokens in the sequence to generate a combined representation of the token sequence and determine the initial embedding as or from the combined representation.
As a particular example, the graphical generation system 110 may determine the combined representation as an average of the tokens. As another particular example, the graphics-generating system 110 may determine the combined representation by processing the token sequence using a pooling function (e.g., max-pooling or average-pooling). As another particular example, the graph generation system 110 may generate the combined representation by processing the token sequence using a recurrent neural network (e.g., a long short term memory network (LSTM)). That is, the graphics-generating system 110 may determine the combined representation φ(s) for each node n by calculating n )：
Wherein,is a token sequence representing a statement corresponding to a node.
In some implementations, for each node of the graph 112, the graph generation system 110 may generate the initial embedding by: a combined representation of (i) the set of attributes of the statement corresponding to the node and (ii) the token sequence representing the statement corresponding to the node is combined (e.g., by concatenation). That is, the graphics-generating system may generate an initial embedded φ for each node n by calculating (0) (n)：
Wherein each ofIs an attribute of the statement corresponding to the node.
An example diagram representing a digital circuit design is discussed in more detail below with reference to fig. 2.
In some implementations, the external system is configured to process the data representation of the digital circuit design 102 to generate the graphic 112 and provide the data representing the graphic 112 to the neural network system 100. That is, in some implementations, the neural network system 100 does not include the graphics-generating system 110, but rather receives the graphics 112 from an external system.
The graphic neural network 120 may process the graphic 112 to generate a learned representation 122 of the digital circuit design 102. Specifically, at each of a plurality of stages of execution of the graphics neural network 120, the graphics neural network 120 may update a respective embedding of each node of the graphics 112. Then, after the final stage, the graphical neural network 120 may output a learned representation 122 of the digital circuit design, the learned representation 122 including, for each node in the graph that corresponds to a respective statement, a final embedding of that node (which may be considered as an embedding of the statement). That is, the learned representation 122 may consist, in whole or in part, of a corresponding embedding of each statement in the source code of the digital circuit design 102.
That is, at each stage t of the graphical neural network 120, the current representation ψ of the digital circuit 102 (t) Can be given by:
where G represents graph 112 and N is the total number of nodes in graph 112.
At each stage t, the graphic neural network 120 may update the current representation ψ of the digital circuit 102 by calculating the following formula (t) ：
ψ (t+1) (G)＝f θ (ψ (t) (G))
Wherein f θ Representing the operation of the graphical neural network 120 with the learned network parameter θ.
The graph neural network 120 can have any suitable configuration for updating the embedding of the nodes of the graph 112. An example graphical neural network configured to generate a learned representation of a digital circuit design is discussed below with reference to fig. 2.
In some implementations, the graphical neural network 120 determines that execution ends after a predetermined number T of phases. In some other implementations, the graphical neural network 120 determines whether to end execution after each stage based on whether one or more conditions are met. For example, after each stage t, the graphical neural network 120 may determine the current embedded φ of node n (t) (n) the extent to which it is updated during this stage, e.g. across phi (t-1) (n) and phi (t) The average difference of all nodes n between (n). If the average difference is below a predetermined threshold, the graphic neural network 120 may determine to end execution and output the current representation ψ of the digital circuit 102 (t) ) As a final learned representation 122.
As described above, the predictive neural network 130 may process the learned representation 122 of the digital circuit design to generate a prediction 132 about the digital circuit design 102.
In some implementations, after the graphical neural network 120 generates the learned representation 122 of the digital circuit design 102, the neural network system 100 provides the learned representation 122 directly to the predictive neural network 130.
In some other implementations, after the graphical neural network 120 generates the learned representation 122 of the digital circuit design 102, the neural network system 100 stores the learned representation 122 in a data store for later use. Then, at a future time, the predictive neural network 130 may obtain the learned representation 112 from the data store and process the learned representation 122 to generate the prediction 132. That is, although the graphical neural network 120 is depicted in fig. 1 as providing the learned representation 122 directly to the predictive neural network 130, in some implementations, the graphical neural network 120 and the predictive neural network 130 may execute asynchronously. For example, at a first point in time, the neural network system 100 may generate a learned representation 122 of the digital circuit design 102, and then at a plurality of future points in time, the respective predictive neural network may use the learned representation 122 to generate predictions 132 about the digital circuit design 102.
In some implementations, the learned representation 122 may be used by a plurality of different predictive neural networks 130, each predictive neural network 130 configured to perform a respective different machine learning task using the learned representation 122. That is, the graphical neural network 120 may be configured by training to encode information about the digital circuit design 102 into a learned representation 122, which learned representation 122 may be utilized to perform a number of different predictive tasks.
The predictive neural network 130 may be configured by training to generate any suitable predictions 130 about the digital circuit design 102. For example, the predictive neural network 130 may be configured to detect defects (bugs) in the digital circuit design 102; as a particular example, the prediction 132 may include an identification of one or more statements or blocks of statements in the digital circuit design 102 that may be different from what is expected to be performed. As another example, the predictions 132 may include data characterizing one or more desired characteristics or assertions of the digital circuit design 102; as a particular example, the predictive neural network 130 may be configured to perform formal verification on the digital circuit design 102.
As another example, the predictive neural network 130 may be configured to perform hardware verification of the digital circuit design 102, for example, as part of an industrial hardware design cycle. That is, the prediction 132 regarding the digital circuit design 102 may be a prediction of whether a particular test input to a digital circuit manufactured in accordance with the digital circuit design 102 will result in a particular coverage point (coverage point) being covered. An overlay point (or simply overlay point) is a sequence of statements (or equivalently, a sequence of nodes in graph 112) of the source code of digital circuit design 102. If a particular test input to the digital circuit design 102 results in each statement in the sequence being executed, the particular test input is referred to as an "override point. In this example, the network inputs of the predictive neural network 130 may include (i) a learned representation 122 of the digital circuit design 102, (ii) an identification of the coverage point, and (ii) an identification of the test input.
Example techniques for performing verification using a learned representation of a digital circuit design are discussed in more detail below with reference to fig. 4.
As another example, the predictive neural network 130 may be configured to generate a new test input that is predicted to cover a particular desired coverage point (or a set of multiple desired coverage points).
Example techniques for generating new test inputs using a learned representation of a digital circuit design are discussed in more detail below with reference to fig. 5.
In other words, the neural network system 100 may be a component of software configured to perform verification of a digital circuit design. That is, a user may generate a new digital circuit design and use the software to verify that the design meets a set of requirements. For example, the neural network system 100 may be available to a digital circuit engineer or other user through an Application Programming Interface (API) or may be part of a software application running on a user device.
As another example, the predictive neural network 130 may be configured to predict respective values that one or more variables will have after a digital circuit manufactured in accordance with the digital circuit design 102 processes a particular test input given the particular test input (or a distribution over the test inputs). As another example, the predictive neural network 130 may be configured to generate constraints for test inputs that are predicted to cover a particular expected coverage point.
Any suitable technique may be used to train the graphical neural network 120 and the predictive neural network 130.
In some implementations, the graphical neural network 120 and the predictive neural network 130 are trained simultaneously, end-to-end. For example, the training system may process the training digital circuit design from a training data set of the training digital circuit design to generate predictions about the training digital circuit design using the neural network system 100. The training system may determine errors in predictions about the training digital circuit design and back propagate the errors through both the predictive neural network 130 and the graphical neural network 120 to determine parameter updates to the network parameters of the neural networks 130 and 120, for example, using gradient descent. In some implementations in which the graphics generation system 110 includes one or more neural network layers (e.g., a recurrent neural network layer configured to generate an initial representation of each node in the graphics 112 as described above), the training system may further train the neural network layers of the graphics generation system 110 concurrently with the graphics neural network 120 and the predictive neural network 130.
In some other implementations, the training system first trains the graphical neural network 120 using a first predictive task (e.g., the validation or test generation task described above) to determine training values for network parameters of the graphical neural network 120 (and optionally any neural network layers in the graphical generation system 110). The training system may then use the trained graphical neural network 120 to generate a learned representation 122, and use the learned representation to train the predictive neural network 130 on a second predictive task to determine training values (optionally fine-tuning, i.e., updating values of network parameters of the graphical neural network 120) of the network parameters of the predictive neural network 130.
The training system may train one or more of the graphical neural network 120 or the predictive neural network 130 using training examples that include (i) training digital circuit designs and (ii) real-valued (group-trunk) outputs for specific predictive tasks (e.g., overlay information describing the overlay of corresponding overlay points of the training digital circuit designs). For example, for each training digital circuit design, the training system may generate one or more random test inputs, and for each test input, use a simulator (e.g., a Verilog simulator) to generate a true value tag of whether a particular coverage point is covered by the test input.
The training system may use any suitable loss function. As a particular example, the training system may use a binary cross entropy loss function to determine errors in predictions generated by the neural network system 100 during training.
A user of the neural network system 100, such as an engineer working on designing a new digital circuit, may thus provide a different corresponding design 102 of the new digital circuit to the neural network system 100 for analysis. For example, a user may use the neural network system 100 to predict whether a particular design properly covers a particular coverage point. In response to the predictions 132 generated by the predictive neural network 130, a user (or external automation system) may determine to update the design 102 of the new digital circuit. For example, in response to the predictive neural network 130 predicting that a particular coverage point cannot be covered using any test input, the user may determine to update the design 102 of the new digital circuit such that the updated design 102 may cover the particular coverage point for a certain test input. As another example, the automation system may be configured to repeatedly send the design 102 to the neural network system 100 and update the design 102, for example, using an evolutionary technique that progressively updates the design 102, for example, according to one or more predetermined heuristics, if the predictive neural network 130 generates a prediction that the current design 102 does not meet one or more criteria.
After determining that a particular design 102 meets all criteria based on the predictions 132 generated by the predictive neural network 130, a user or external system may determine a finalize (finalize) digital circuit design 102. The finalized digital circuit design 102 may then be provided to a manufacturing system for manufacturing digital circuits according to the design 102, i.e., manufacturing digital circuits having an architecture defined by the design 102. The manufactured digital circuits may then be deployed on a corresponding electronic device, such as on cloud computing hardware or on a user device (e.g., a mobile phone or notebook computer).
FIG. 2 illustrates an example graph 200 determined from a digital circuit design.
For example, the graphic 200 may be generated by a graphic generation system of a neural network system (e.g., the graphic generation system 110 of the neural network system 100 described above with reference to fig. 1) configured to generate a learned representation of a digital circuit design.
Graphics 200 may be generated from source code implementing a digital circuit design (e.g., source code written in a hardware description language as described above).
The graphic 200 includes: (i) A set of nodes 210a-l, each node representing a respective statement of source code of the digital circuit design; (ii) A set of control edges 220a-l (depicted as solid lines in fig. 2), each control edge representing a control flow between respective statements; and (iii) a set of data edges 230a-b (depicted as dashed lines in FIG. 2), each data edge representing a data flow between respective statements.
Graph 200 includes three sub-graphs 202, 204, and 206, each representing a respective statement block of source code of a digital circuit design. Specifically, sub-graphs 202, 204, and 206 each represent an "always" block that is repeatedly executed when a digital circuit manufactured using a digital circuit design is executed.
The always blocks represented by sub-graphs 202, 204, and 206 may be executed in parallel. Specifically, at each clock cycle of digital circuit execution, an external clock signal may trigger execution of a corresponding statement for each always block. Thus, the statements in each always block execute sequentially over multiple consecutive clock cycles. When executing the statement, the input value of the corresponding variable of the digital circuit in the current cycle comes from the output value of the corresponding variable of the previous cycle.
For each sub-graph 202, 204, and 206 of graph 200, graph 200 may include a control edge from the final node in the sub-graph (i.e., node 210d in first sub-graph 202, node 210h in second sub-graph 204, and node 210l in third sub-graph 206) to the first node in the sub-graph (i.e., node 210a in first sub-graph 202, node 210e in second sub-graph 204, and node 210i in third sub-graph 206), which represents the loop execution of the always block.
The source code corresponding to the nodes of the sub-graph 202 is reproduced as follows:
the first node 210a in the sub-graph 202 represents an "if" statement.
If variable c is greater than variable d, then along control edge 220a, it goes to node 210b and a statement corresponding to node 210b is executed. And then along control edge 220c to final node 210d in sub-graph 202, which represents the end of the always block.
If variable c is not greater than variable d, then control edge 220b is taken to node 210c and the statement corresponding to node 210c is executed. And then along control edge 220d to final node 210d in child graph 202.
The source code corresponding to the nodes of the child graph 204 is reproduced as follows:
the first node 210e in the sub-graph 204 represents an "if" statement.
If variable c is equal to variable d, then node 210f is followed along control edge 220e and the statement corresponding to node 210f is executed. And then along control edge 220g to final node 210h in sub-graph 204, which represents the end of the always block.
If variable c is not equal to variable d, then node 210g is followed along control edge 220f and the statement corresponding to node 210g is executed. And then along control edge 220h to final node 210d in child graph 204.
The source code corresponding to the nodes of the sub-graph 206 is reproduced as follows:
The first node 210i in the sub-graph 206 represents an "if" statement. Because the "if" statement depends on the values of variables a and b generated by the respective nodes of sub-graphs 202 and 204, graph 200 includes a data edge 230a between final node 210d of sub-graph 202 to first node 210i of sub-graph 206, and a data edge 230b between final node 210h of sub-graph 204 and first node 210i of sub-graph 206.
If variable a is greater than variable b, going along control edge 220i to node 210j and executing the statement corresponding to node 210 j; i.e. the state variable of the digital circuit is set to "active". And then along control edge 220k to final node 210l in sub-graph 206, which represents the end of the always block.
If variable a is not greater than variable b, going along control edge 220j to node 210k, and executing the statement corresponding to node 210 k; that is, the state variable of the digital circuit is set to "idle". And then along control edge 220l to final node 210l in child graph 206.
The respective embedding of each of the nodes 210a-1 may be updated by the graphical neural network at each of a plurality of stages to generate a learned representation of the digital circuit design that includes the respective final embedding of each of the nodes 210 a-1. For example, the graphic neural network 120 described above with reference to fig. 1 may process data representing the graphic 200 to generate a learned representation of a digital circuit design.
The graphics neural network configured to process graphics 200 may have any suitable configuration. For example, the graphic neural network may be a Graphic Convolutional Network (GCN), such as, for example, "Semi-Supervised Classification with Graph Convolutional Networks", arxiv, as in Kipf et al: 1609.02907. As another example, the graphic neural network may be a gated graphic neural network, e.g., "Gated Graph Sequence Neural Networks", arXiv as in Li et al: 1511.05493. As another example, the graphic neural network may be a graphic neural network multi-layer perception (GNN-MLP), e.g., "GNN-FiLM" as at Marc Brockschmidt: graph Neural Networks with Feature-wise Linear Modulation ", arXiv: 1906.12192.
As another example, the graphic neural network may be an instruction pointer attention graphic neural network (IPA-GNN), e.g., "Learning to Execute Programs with Instruction Pointer Attention Graph Neural Networks", arXiv as in Bieber et al: 2010.12621, the entire contents of which are incorporated herein by reference.
In some implementations in which the graphics neural network is an IPA-GNN, the graphics neural network may hold a plurality of different instruction pointers (instead of a single instruction pointer), such as a corresponding instruction pointer for each "always" block in the source code of the digital circuit design. For example, before the first stage, the graphical neural network 120 may pointer the soft instruction pointer p t，n The instantiation is:
p 0，n ＝1 n starting node for always block
At each stage t, the graphical neural network 120 may calculate the hidden state proposal as:
where "Dense" denotes a sequence of one or more feedforward neural network layers.
In some implementations in which the graphics neural network 120 is an IPA-GNN, the graphics neural network may process graphics generated from a digital circuit design that includes switch statements (rather than just binary conditions). For example, at each stage t, the graphical neural network may calculate the soft branch decision as:
b t，n，m ＝softmax(Dense(h t-1，n )·Embed(e n，m ))
wherein m is N out (x n ) Is node x n Is the control child node of (i.e. node x) n Child nodes via control edges; ebed (e) n，m ) Is from x n To x m Is embedded in the control edge of (a). Embedding may include or be generated from one or more of the following: whether the condition is positive or negative, the first variable of the condition reference, or the embedding of the condition in form.
In some implementations in which the graphical neural network is IPA-GNN, the graphical neural network may model the propagation of messages between nodes (corresponding to respective statements) along the data edges of each stage t. For example, the graphical neural network may determine, for each particular node, hidden state suggestions from one or more of: (i) A control node state proposal (e.g., from a node within an always block of a particular node) or (ii) a proposal for other parent nodes (e.g., from a node located in a different always block). As a specific example, the graphical neural network may calculate the hidden state proposal for each node n of phase t as:
Wherein,a set of control nodes in the graph is identified.
In some implementations in which the graphic neural network is IPA-GNN, for each always block, the graphic may include explicit or implicit edges from (i) the final (or "sink") node in the always block and (ii) the first (or "root") node in the always block, modeling non-termination.
FIG. 3 is a flow chart of an example process 300 for generating a learned representation of a digital circuit design. For convenience, process 300 will be described as being performed by a system of one or more computers located in one or more locations. For example, a neural network system (e.g., the neural network system 100 described above with reference to fig. 1) suitably programmed in accordance with the present description may perform process 300.
The system obtains data representing a program implementing the digital circuit design (step 302). The program may contain a set of multiple statements.
The system processes the obtained data to generate data representing a graphic that represents the digital circuit design (step 304). The graphic may include: (i) a set of multiple nodes representing respective statements of a program, (ii) a set of multiple first edges (i.e., control edges), and (iii) a set of multiple second edges (i.e., data edges). Each first edge is located between a respective pair of nodes in the set of nodes and represents a control flow between pairs of statements of a program represented by the respective pair of nodes. Each second edge is located between a respective pair of nodes in the set of nodes and represents a data flow between a pair of statements of the program represented by the respective pair of nodes.
The system uses the graph to generate a learned representation of the digital circuit design (step 306). In particular, the system may process data representing the graph using the graph neural network to generate a respective learned representation of each statement represented by a node of the graph. In general, the learned representation of the statement may represent a learned representation of the digital circuit design.
FIG. 4 is a flow chart of an example process 400 for predicting coverage using a learned representation of a digital circuit design. For convenience, process 400 will be described as being performed by a system of one or more computers located in one or more locations. For example, a neural network system (e.g., the neural network system 100 described above with reference to fig. 1) suitably programmed in accordance with the present description may perform process 400.
In particular, the system may generate a prediction of whether a particular coverage point will be covered by a digital circuit manufactured according to the digital circuit design in response to processing a particular test input.
A particular overlay point includes a sequence of one or more statements implementing source code of a digital circuit design.
For each of one or more variables of a digital circuit design, a particular test input may identify a particular value or range of values for that variable. Each variable may be, for example, a boolean variable, an integer variable, or a class variable.
The system obtains a learned representation of the digital circuit design (step 402). The learned representation may be generated by a graphical neural network of the neural network system (e.g., graphical neural network 120 described above with reference to fig. 1) in response to processing a graph representing a digital circuit design.
The system generates network inputs according to: (i) a learned representation of the digital circuit design, (ii) an identification of a particular overlay point, and (iii) an identification of a particular test input (step 404).
For example, the system may generate a first network input from a learned representation representing the coverage point. As described above, the learned representation of the digital circuit design may include a respective learned representation of each statement in the source code of the digital circuit design. Thus, the first network input may be generated from a learned representation of the statement in the particular coverage point.
For example, the system may generate a bitmask to be applied to a complete set of learned representations of the respective statements, where the bitmask masks (i.e., removes) all learned representations of the statements in the set except for the learned representations of the coverage points. The system may apply the generated bitmask to identify statements for a particular coverage point C:
C＝<n 1 ，n 2 ，...，n m >
Where m is the number of statements in a particular coverage point, each n i Representing the ith statement in the particular coverage point.
The system may process the corresponding learned representation of the statement in C to generate the first network input. For example, the system may determine that the first network is m learned representations φ (n i ) Or a sum of the cascading or sum of (a) to (b). As another example, the system may use one or more recurrent neural network layers (e.g., LSTM neural network layers) to process the m learned representations Φ (n) i ) To generate a first network input. That is, the system may input the first network as phi (T) (C) The calculation is as follows:
φ (T) (C)＝LSTM(<φ (T) (n 1 )，φ (T) (n 2 )，…，φ (T) (n m )>)
the system may also generate a second network input representing the particular test input. For example, the system may determine j corresponding values I for parameter I for a particular test input j And processing the concatenated values using one or more neural network layers (e.g., using one or more feedforward neural network layers). That is, the system may calculate the second network input φ (I) as:
φ(I)＝MLP(Concat(i 1 ，…，i p ))
wherein MLP represents a multi-layer perceptron.
The system may then generate the network input by combining the first network input and the second network input, for example by determining a sum or concatenation of the first network input and the second network input.
The neural network layer used to generate the network inputs may be considered a component of the predictive neural network described below.
The system processes the network inputs using the predictive neural network to generate a prediction of whether a particular test input to a digital circuit manufactured according to the digital circuit design will result in a particular coverage point being covered (step 406). For example, the predictive neural network may be predictive neural network 130 described above with reference to fig. 1.
For example, the output of the predictive neural network may be a likelihood value, e.g., a value between 0 and 1, that indicates the likelihood that the test will cover a coverage point.
As a particular example, the predictive neural network may include one or more feed-forward neural network layers. That is, the system may calculate:
is_hit(C，I)＝MLP σ (Concat(φ (T) (C)，φ(I)))
wherein is_hit (C, I) identifies the likelihood value.
FIG. 5 is a flow chart of an example process 500 for generating new test inputs using a learned representation of a digital circuit design. For convenience, process 500 will be described as being performed by a system of one or more computers located in one or more locations. For example, a neural network system (e.g., the neural network system 100 described above with reference to fig. 1) suitably programmed in accordance with the present description may perform process 500.
In particular, the system may generate new test inputs that are predicted to provide coverage of particular coverage points in digital circuits manufactured according to the digital circuit design.
A particular overlay point includes a sequence of one or more statements implementing source code of a digital circuit design.
For each of one or more variables of the digital circuit design, the new test input may identify a particular value or range of values for that variable. Each variable may be, for example, a boolean variable, an integer variable, or a class variable.
The system may use gradient searching to generate new test inputs. The system may perform gradient searches using a predictive neural network that has been pre-trained on different predictive tasks (e.g., the overlay predictive tasks described above with reference to fig. 1 and 4). That is, the same predictive neural network may be configured to perform both process 500 and process 400 described above with reference to fig. 4.
The system obtains a learned representation of the digital circuit design (step 502). The learned representation may be generated by a graphical neural network of the neural network system (e.g., graphical neural network 120 described above with reference to fig. 1) in response to processing a graph representing a digital circuit design.
The system generates initial test inputs for covering a particular coverage point (step 504). For example, the system may randomly generate an initial test input. As another example, the system may select an initial test input that is known (e.g., from a previous execution of the predictive neural network) to cover a different coverage point (e.g., another coverage point in the same block of source code implementing the digital circuit design) that is similar to or local to the particular coverage point.
The system processes the network inputs generated from the initial test inputs and the particular coverage points using the predictive neural network to generate a prediction of whether the initial test inputs to the digital circuit manufactured according to the digital circuit design will result in coverage of the particular coverage points (step 506). For example, the network input may be generated from the initial test input and the specific coverage point, as described above with reference to fig. 4.
For example, the output of the predictive neural network may be a likelihood value, e.g., a value between 0 and 1, that indicates the likelihood that the test will cover a coverage point.
The system updates the initial test input based on the predictions generated by the predictive neural network (step 508). In particular, the system may determine a difference between the generated prediction and a "desired" prediction indicating that the initial test will cover the coverage point. For example, if the predictive neural network is configured to generate likelihood values as described above, the desired prediction may be output 1.
The goal of the system is to identify a new test input that, when the corresponding network input is processed by the predictive neural network, causes the predictive neural network to output a desired prediction that the test will cover a particular coverage point (e.g., causes the predictive neural network to generate output 1).
The system may consider the determined difference as an "error" of the predictive neural network and back-propagate the difference through the predictive neural network. However, instead of updating the parameter values of the predictive neural network, the system may hold the parameter values constant and update the components of the network input that represent the initial test (e.g., the second network input described above with reference to fig. 4). For example, the system may update the component of the network input representing the initial test using a gradient descent or gradient ascent to generate an updated network input.
The updated network input represents updated test input that is closer to the coverage of the particular coverage point than the initial test. The system may retrieve updated test inputs based on the updated network inputs. For example, in an implementation in which the updated network input is a cascade of (i) a first network input representing a particular coverage point and (ii) a second network input representing an updated test input, the system may remove the first network input from the cascade to retrieve the second network input, as described above with reference to fig. 4. The remaining second network inputs may then include the respective values of each parameter of the updated test inputs, as described above with reference to fig. 4.
The system may repeat steps 506 and 508 multiple times to repeatedly update the current test input until a new test input is identified that is predicted to successfully cover a particular coverage point. For example, the system may repeat steps 506 and 508 until the likelihood value generated by the predictive neural network is greater than a threshold, such as 0.5, 0.9, or 0.99.
The term "configured to" is used in this specification in connection with systems and computer program components. A system for one or more computers configured to perform a particular operation or action means that the system has installed thereon software, firmware, hardware, or a combination thereof, which in operation causes the system to perform the operation or action. For one or more computer programs configured to perform particular operations or actions, it is meant that the one or more programs include instructions that, when executed by a data processing apparatus, cause the apparatus to perform the operations or actions.
Embodiments of the subject matter and the functional operations described in this specification can be implemented in digital electronic circuitry, in tangibly embodied computer software or firmware, in computer hardware (including the structures disclosed in this specification and their structural equivalents), or in combinations of one or more of them. Embodiments of the subject matter described in this specification can be implemented as one or more computer programs, i.e., one or more modules of computer program instructions encoded on a tangible, non-transitory storage medium for execution by, or to control the operation of, data processing apparatus. The computer storage medium may be a machine-readable storage device, a machine-readable storage substrate, a random or serial access memory device, or a combination of one or more of them. Alternatively or additionally, the program instructions may be encoded on a manually-generated propagated signal, e.g., a machine-generated electrical, optical, or electromagnetic signal, that is generated to encode information for transmission to suitable receiver apparatus for execution by data processing apparatus.
The term "data processing apparatus" refers to data processing hardware and encompasses all kinds of apparatus, devices, and machines for processing data, including by way of example a programmable processor, a computer, or multiple processors or computers. The apparatus may also be or further comprise a dedicated logic circuit, for example an FPGA (field programmable gate array) or an ASIC (application specific integrated circuit). In addition to hardware, the apparatus may optionally include code that creates an execution environment for the computer program, e.g., code that constitutes processor firmware, a protocol stack, a database management system, an operating system, or a combination of one or more of them.
A computer program (also known as a program, software application, app, module, software module, script, or code) can be written in any form of programming language, including compiled or interpreted languages, or declarative or procedural languages, and it can be deployed in any form, including as a stand-alone program or as a module, component, subroutine, or other unit suitable for use in a computing environment. A program may, but need not, correspond to a file in a file system. A program can be stored in a portion of a file that holds other programs or data (e.g., one or more scripts stored in a markup language document), in a single file dedicated to the program in question, or in multiple coordinated files (e.g., files that store one or more modules, sub-programs, or portions of code). A computer program can be deployed to be executed on one computer or on multiple computers at one site or distributed across multiple sites and interconnected by a communication network.
In this specification, the term "database" is used broadly to refer to any collection of data: the data need not be structured in any particular way, or structured at all, and it may be stored on a storage device in one or more locations. Thus, for example, an index database may include multiple data sets, each of which may be organized and accessed differently.
Similarly, in this specification, the term "engine" is used broadly to refer to a software-based system, subsystem, or process that is programmed to perform one or more particular functions. Typically, the engine will be implemented as one or more software modules or components installed on one or more computers in one or more locations. In some cases, one or more computers will be dedicated to a particular engine; in other cases, multiple engines may be installed and run on the same computer or on multiple computers.
The processes and logic flows described in this specification can be performed by one or more programmable computers executing one or more computer programs to perform functions by operating on input data and generating output. The processes and logic flows can also be performed by, or in combination with, special purpose logic circuitry (e.g., an FPGA or ASIC) or one or more programmed computers.
A computer suitable for executing a computer program may be based on a general-purpose or special-purpose microprocessor or both, or any other kind of central processing unit. Typically, a central processing unit will receive instructions and data from a read only memory or a random access memory or both. The essential elements of a computer are a central processing unit for executing instructions and one or more memory devices for storing instructions and data. The central processing unit and the memory may be supplemented by, or incorporated in, special purpose logic circuitry. Typically, a computer will also include, or be operatively coupled to receive data from or transfer data to, or both, one or more mass storage devices for storing data, e.g., magnetic, magneto-optical disks, or optical disks. However, such devices are not required for a computer. Furthermore, the computer may be embedded in another device, such as a mobile phone, a Personal Digital Assistant (PDA), a mobile audio or video player, a game console, a Global Positioning System (GPS) receiver, or a portable storage device (e.g., a Universal Serial Bus (USB) flash drive), to name a few.
Computer readable media suitable for storing computer program instructions and data include all forms of non-volatile memory, media and memory devices including, for example: semiconductor memory devices such as EPROM, EEPROM, and flash memory devices; magnetic disks, such as internal hard disks or removable disks; magneto-optical disk; and CD ROM and DVD-ROM discs.
To provide for interaction with a user, embodiments of the subject matter described in this specification can be implemented on a computer having a display device (e.g., a CRT (cathode ray tube) or LCD (liquid crystal display) monitor) and a keyboard and a pointing device (e.g., a mouse or a trackball) for displaying information to the user and the user can provide input to the computer via the display device and the keyboard and the pointing device. Other types of devices may also be used to provide interaction with a user; for example, feedback provided to the user may be any form of sensory feedback, such as visual feedback, auditory feedback, or tactile feedback; and input from the user may be received in any form, including acoustic, speech, or tactile input. In addition, the computer may interact with the user by: transmitting and receiving documents to and from devices used by the user; for example, a web page is sent to a web browser on a user device in response to a request received from the web browser. Further, the computer may interact with the user by sending text messages or other forms of messages to a personal device (e.g., a smart phone running a messaging application) and receiving response messages as a return from the user.
The data processing means for implementing the machine learning model may also comprise, for example, dedicated hardware accelerator units for handling public and computationally intensive parts of machine learning training or production, i.e. inference, workload.
The machine learning model can be implemented and deployed using a machine learning framework (e.g., a TensorFlow framework, a Microsoft cognitive toolkit framework, an Apache Single framework, or an Apache MXNet framework).
Embodiments of the subject matter described in this specification can be implemented in a computing system that includes a back-end component, e.g., as a data server, or that includes a middleware component, e.g., an application server, or that includes a front-end component, e.g., a client computer having a graphical user interface, a Web browser, or an app through which a user can interact with an implementation of the subject matter described in this specification, or any combination of one or more such back-end, middleware, or front-end components. The components of the system can be interconnected by any form or medium of digital data communication (e.g., a communication network). Examples of communication networks include a Local Area Network (LAN) and a Wide Area Network (WAN) (e.g., the internet).
The computing system may include clients and servers. The client and server are typically remote from each other and typically interact through a communication network. The relationship of client and server arises by virtue of computer programs running on the respective computers and having a client-server relationship to each other. In some embodiments, the server sends data (e.g., HTML pages) to the user device, e.g., for purposes of displaying data to and receiving user input from a user interacting with the device as a client. Data generated at the user device, e.g., results of a user interaction, may be received at the server from the device.
In addition to the above-described embodiments, the following embodiments are also innovative:
embodiment 1 is a method of generating a learned representation of a digital circuit design, the method comprising:
obtaining data representing a program implementing a digital circuit design, the program comprising a plurality of statements;
processing the obtained data to generate data representing a graphic representing the digital circuit design, the graphic comprising:
a plurality of nodes representing respective statements of a program,
a plurality of first edges, wherein each first edge is located between a respective pair of nodes in the plurality of nodes and represents a control flow between statement pairs of the program represented by the respective pair of nodes, an
A plurality of second edges, wherein each second edge is located between a respective pair of nodes in the plurality of nodes and represents a data flow between statement pairs of the program represented by the respective pair of nodes; and
generating a learned representation of the digital circuit design includes processing data representing the graph using a graph neural network to generate a respective learned representation of each statement represented by a node of the graph.
Embodiment 2 is the method according to embodiment 1, further comprising:
the network inputs generated from the learned representation of the digital circuit design are processed using a predictive neural network to generate predictions about the digital circuit design.
Embodiment 3 is the method of embodiment 2, wherein predicting hardware verification tasks for the digital circuit design.
Embodiment 4 is the method according to embodiment 3, wherein the prediction regarding the digital circuit design includes a prediction of whether a particular input to a digital circuit manufactured according to the digital circuit design will result in a particular coverage point being covered.
Embodiment 5 is the method of embodiment 4, wherein the network input comprises:
a first network input representing a particular coverage point, an
A second network input representing a particular test.
Embodiment 6 is the method of embodiment 5, wherein processing the network input using the predictive neural network to generate the prediction comprises:
concatenating the first network input and the second network input to generate a concatenated network input; and
cascaded network inputs are processed using one or more feedforward neural network layers.
Embodiment 7 is the method of any one of embodiments 5 or 6, wherein:
the particular coverage point is defined by a subset of the plurality of statements; and
the first network input has been generated by performing operations comprising:
obtaining a respective learned representation of each statement in the subset, and
the obtained learned representations are combined to generate a first network input.
Embodiment 8 is the method of embodiment 7, wherein obtaining a respective learned representation of each statement in the subset comprises:
obtaining representation data characterizing a respective learned representation of each of the plurality of sentences;
generating a bitmask representing the data, wherein the bitmask masks off each learned representation except for a respective learned representation of each statement in the subset; and
a bitmask is applied to the representation data.
Embodiment 9 is the method of any of embodiments 7 or 8, wherein combining the obtained learned representations includes processing the obtained learned representations using a recurrent neural network.
Embodiment 10 is the method of any of embodiments 5-9, wherein the second network input has been generated by performing operations comprising:
obtaining second data characterizing the particular test, the second data including a respective value for each of a plurality of predetermined variables of the particular test; and
the second data is processed using one or more feedforward neural network layers.
Embodiment 11 is the method of any of embodiments 2-10, wherein the prediction regarding the digital circuit design includes an identification of a new test predicted to cover the desired coverage point.
Embodiment 12 is the method of embodiment 11, wherein the new test has been generated by performing operations comprising:
processing an initial network input characterizing an initial test using a predictive neural network;
determining whether the initial test would cover the desired coverage point using a network output generated by the predictive neural network in response to processing the initial network input;
determining a difference between (i) the network output and (ii) the desired network output, the difference indicating that the initial test will cover the desired coverage point; and
the determined differences are back-propagated by the predictive neural network to determine an update to the initial network input.
Embodiment 13 is the method of any of embodiments 1-12, further comprising generating an initial embedding of the nodes for each node in the graph representing the statement, comprising:
obtaining third data characterizing a plurality of attributes of the node;
obtaining a token sequence representing the statement represented by the node; and
processing (i) the third data and (ii) the token sequence to generate an initial embedding of the node.
Embodiment 14 is the method of embodiment 13, wherein processing (i) the third data and (ii) the token sequence to generate an initial embedding of the node comprises:
processing the token sequence using a recurrent neural network to generate a combined representation of the sequence; and
concatenating the combined representation of (i) the sequence and (ii) the third data to generate an initial embedding.
Embodiment 15 is a system comprising one or more computers and one or more storage devices storing instructions that, when executed by the one or more computers, cause the one or more computers to perform operations in accordance with the respective methods of any one of embodiments 1-14.
Embodiment 16 is one or more computer storage media storing instructions that, when executed by one or more computers, cause the one or more computers to perform the operations of the respective method according to any one of embodiments 1-14.
While this specification contains many specific implementation details, these should not be construed as limitations on the scope of any invention or of what may be claimed, but rather as descriptions of features specific to particular embodiments of particular inventions. Certain features that are described in this specification in the context of separate embodiments can also be implemented in combination in a single embodiment. Conversely, various features that are described in the context of a single embodiment can also be implemented in multiple embodiments separately or in any suitable subcombination. Furthermore, although features may be described above as acting in certain combinations and even initially claimed as such, one or more features from a claimed combination can in some cases be excised from the combination, and the claimed combination may be directed to a subcombination or variation of a subcombination.
Similarly, although operations are depicted in the drawings and described in the claims in a particular order, this should not be understood as requiring that such operations be performed in the particular order shown or in sequential order, or that all illustrated operations be performed, to achieve desirable results. In some cases, multitasking and parallel processing may be advantageous. Moreover, the separation of various system modules and components in the embodiments described above should not be understood as requiring such separation in all embodiments, and it should be understood that the described program components and systems can generally be integrated in a single software product or packaged into multiple software products.
Specific embodiments of the subject matter have been described. Other embodiments are within the scope of the following claims. For example, the actions recited in the claims can be performed in a different order and still achieve desirable results. As one example, the processes depicted in the accompanying figures do not necessarily require the particular order shown, or sequential order, to achieve desirable results. In some cases, multitasking and parallel processing may be advantageous.
Claims (18)
1. A method of generating a learned representation of a digital circuit design, the method comprising:
obtaining data representing a program implementing the digital circuit design, the program comprising a plurality of statements;
processing the obtained data to generate data representing a graphic representing the digital circuit design, the graphic comprising:
a plurality of nodes representing respective statements of the program,
a plurality of first edges, wherein each first edge is located between a respective pair of nodes in the plurality of nodes and represents a control flow between statement pairs of the program represented by the respective pair of nodes, and
a plurality of second edges, wherein each second edge is located between a respective pair of nodes in the plurality of nodes and represents a data flow between a pair of statements of the program represented by the respective pair of nodes; and
Generating a learned representation of the digital circuit design, comprising: the data representing the graph is processed using a graph neural network to generate a respective learned representation of each statement represented by a node of the graph.
2. The method of claim 1, further comprising:
a network input generated from the learned representation of the digital circuit design is processed using a predictive neural network to generate a prediction about the digital circuit design.
3. The method of claim 2, wherein the prediction is a hardware validation task for the digital circuit design.
4. A method according to claim 3, wherein the prediction regarding the digital circuit design comprises a prediction of whether a particular input to a digital circuit manufactured in accordance with the digital circuit design will result in a particular coverage point being covered.
5. The method of claim 4, wherein the network input comprises:
a first network input representing the particular coverage point, an
A second network input representing a particular test.
6. The method of claim 5, wherein processing the network input using the predictive neural network to generate the prediction comprises:
Concatenating the first network input and the second network input to generate a concatenated network input; and
the cascaded network inputs are processed using one or more feedforward neural network layers.
7. The method of any one of claims 5 or 6, wherein:
the particular coverage point is defined by a subset of the plurality of statements; and
the first network input has been generated by performing operations comprising:
obtaining a respective learned representation of each statement in the subset, and
the obtained learned representations are combined to generate the first network input.
8. The method of claim 7, wherein obtaining a respective learned representation of each statement in the subset comprises:
obtaining representation data characterizing a respective learned representation of each sentence of the plurality of sentences;
generating a bitmask of the representation data, wherein the bitmask masks out each learned representation except for a respective learned representation of each statement in the subset; and
the bitmask is applied to the representation data.
9. The method of any of claims 7 or 8, wherein combining the obtained learned representations comprises: the obtained learned representation is processed using a recurrent neural network.
10. The method of any of claims 5-9, wherein the second network input has been generated by performing operations comprising:
obtaining second data characterizing the particular test, the second data including a respective value for each of a plurality of predetermined variables of the particular test; and
the second data is processed using one or more feedforward neural network layers.
11. The method of any of claims 2-10, wherein the prediction regarding the digital circuit design includes an identification of a new test predicted to cover a desired coverage point.
12. The method of claim 11, wherein the new test has been generated by performing operations comprising:
processing an initial network input characterizing an initial test using the predictive neural network;
determining whether the initial test would cover the desired coverage point using a network output generated by the predictive neural network in response to processing the initial network input;
determining a difference between (i) the network output and (ii) a desired network output, the difference indicating that the initial test will cover the desired coverage point; and
The determined differences are back-propagated through the predictive neural network to determine an update to the initial network input.
13. The method of any of claims 2-12, further comprising fabricating digital circuit hardware dependent on the prediction.
14. The method of any of claims 1-13, further comprising generating an initial embedding of the node for each node in the graph representing a statement, comprising:
obtaining third data characterizing a plurality of attributes of the node;
obtaining a token sequence, wherein the token sequence represents sentences represented by the nodes; and
processing (i) the third data and (ii) the token sequence to generate the initial embedding of the node.
15. The method of claim 14, wherein processing (i) the third data and (ii) the token sequence to generate the initial embedding of the node comprises:
processing the token sequence using a recurrent neural network to generate a combined representation of the sequence; and
concatenating (i) the combined representation of the sequence and (ii) the third data to generate the initial embedding.
16. The method of any of claims 1-15, further comprising fabricating digital circuit hardware according to the design.
17. A system comprising one or more computers and one or more storage devices storing instructions that, when executed by the one or more computers, cause the one or more computers to perform the operations of the respective method of any one of claims 1-16.
18. One or more computer storage media storing instructions that, when executed by one or more computers, cause the one or more computers to perform the operations of the respective method of any one of claims 1-16.
Applications Claiming Priority (3)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US202163194934P | 2021-05-28 | 2021-05-28 | |
US63/194,934 | 2021-05-28 | ||
PCT/US2022/031624 WO2022251741A1 (en) | 2021-05-28 | 2022-05-31 | Generating learned representations of digital circuit designs |
Publications (1)
Publication Number | Publication Date |
---|---|
CN117043778A true CN117043778A (en) | 2023-11-10 |
Family
ID=82358622
Family Applications (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
CN202280021111.3A Pending CN117043778A (en) | 2021-05-28 | 2022-05-31 | Generating a learned representation of a digital circuit design |
Country Status (3)
Country | Link |
---|---|
EP (1) | EP4285268A1 (en) |
CN (1) | CN117043778A (en) |
WO (1) | WO2022251741A1 (en) |
Families Citing this family (1)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
CN116702852B (en) * | 2023-08-02 | 2023-10-20 | 电子科技大学 | Dynamic reconfiguration neural network acceleration circuit and system based on multistage event driving |
-
2022
- 2022-05-31 CN CN202280021111.3A patent/CN117043778A/en active Pending
- 2022-05-31 WO PCT/US2022/031624 patent/WO2022251741A1/en active Application Filing
- 2022-05-31 EP EP22736071.6A patent/EP4285268A1/en active Pending
Also Published As
Publication number | Publication date |
---|---|
EP4285268A1 (en) | 2023-12-06 |
WO2022251741A1 (en) | 2022-12-01 |
Similar Documents
Publication | Publication Date | Title |
---|---|---|
CN110366734B (en) | Optimizing neural network architecture | |
Singaravel et al. | Deep-learning neural-network architectures and methods: Using component-based models in building-design energy prediction | |
US20230252327A1 (en) | Neural architecture search for convolutional neural networks | |
EP3602409B1 (en) | Selecting actions using multi-modal inputs | |
EP3602419B1 (en) | Neural network optimizer search | |
CN112364880B (en) | Omics data processing method, device, equipment and medium based on graph neural network | |
CN111406267A (en) | Neural architecture search using performance-predictive neural networks | |
US20170228639A1 (en) | Efficient determination of optimized learning settings of neural networks | |
CN112905801B (en) | Stroke prediction method, system, equipment and storage medium based on event map | |
US20220147877A1 (en) | System and method for automatic building of learning machines using learning machines | |
CN112883714B (en) | ABSC task syntactic constraint method based on dependency graph convolution and transfer learning | |
CN114303150A (en) | Machine learning driven prediction in integrated circuit design | |
CN117043778A (en) | Generating a learned representation of a digital circuit design | |
US20220044097A1 (en) | Boolean satisfiability problem solving using restricted boltzmann machines | |
Anh et al. | Effect of gradient descent optimizers and dropout technique on deep learning LSTM performance in rainfall-runoff modeling | |
US20220027739A1 (en) | Search space exploration for deep learning | |
US20230289634A1 (en) | Non-linear causal modeling based on encoded knowledge | |
Li et al. | Graph convolution recurrent denoising diffusion model for multivariate probabilistic temporal forecasting | |
CN111967941A (en) | Method for constructing sequence recommendation model and sequence recommendation method | |
Singaravel et al. | Deep learning neural networks architectures and methods: building design energy prediction by component-based models | |
Huang et al. | Machine learning and its applications in test | |
US20220108205A1 (en) | Generative reasoning for symbolic discovery | |
Dalle | Machine learning and combinatorial optimization algorithms, with applications to railway planning | |
CN115757826A (en) | Event map construction method, device, equipment and medium | |
Kuftinova et al. | Large Language Model in Suburban Transport Data Management |
Legal Events
Date | Code | Title | Description |
---|---|---|---|
PB01 | Publication | ||
PB01 | Publication | ||
SE01 | Entry into force of request for substantive examination | ||
SE01 | Entry into force of request for substantive examination |