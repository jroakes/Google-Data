EP3631760A1 - Non-rigid alignment for volumetric performance capture - Google Patents
Non-rigid alignment for volumetric performance captureInfo
- Publication number
- EP3631760A1 EP3631760A1 EP18756320.0A EP18756320A EP3631760A1 EP 3631760 A1 EP3631760 A1 EP 3631760A1 EP 18756320 A EP18756320 A EP 18756320A EP 3631760 A1 EP3631760 A1 EP 3631760A1
- Authority
- EP
- European Patent Office
- Prior art keywords
- data
- volume
- reference volume
- correspondence
- data volume
- Prior art date
- Legal status (The legal status is an assumption and is not a legal conclusion. Google has not performed a legal analysis and makes no representation as to the accuracy of the status listed.)
- Withdrawn
Links
Classifications
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06T—IMAGE DATA PROCESSING OR GENERATION, IN GENERAL
- G06T7/00—Image analysis
- G06T7/70—Determining position or orientation of objects or cameras
- G06T7/73—Determining position or orientation of objects or cameras using feature-based methods
- G06T7/75—Determining position or orientation of objects or cameras using feature-based methods involving models
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06T—IMAGE DATA PROCESSING OR GENERATION, IN GENERAL
- G06T7/00—Image analysis
- G06T7/50—Depth or shape recovery
- G06T7/55—Depth or shape recovery from multiple images
- G06T7/593—Depth or shape recovery from multiple images from stereo images
- G06T7/596—Depth or shape recovery from multiple images from stereo images from three or more stereo images
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06T—IMAGE DATA PROCESSING OR GENERATION, IN GENERAL
- G06T15/00—3D [Three Dimensional] image rendering
- G06T15/08—Volume rendering
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06T—IMAGE DATA PROCESSING OR GENERATION, IN GENERAL
- G06T17/00—Three dimensional [3D] modelling, e.g. data description of 3D objects
- G06T17/20—Finite element generation, e.g. wire-frame surface description, tesselation
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06T—IMAGE DATA PROCESSING OR GENERATION, IN GENERAL
- G06T2207/00—Indexing scheme for image analysis or image enhancement
- G06T2207/10—Image acquisition modality
- G06T2207/10016—Video; Image sequence
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06T—IMAGE DATA PROCESSING OR GENERATION, IN GENERAL
- G06T2207/00—Indexing scheme for image analysis or image enhancement
- G06T2207/10—Image acquisition modality
- G06T2207/10024—Color image
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06T—IMAGE DATA PROCESSING OR GENERATION, IN GENERAL
- G06T2207/00—Indexing scheme for image analysis or image enhancement
- G06T2207/10—Image acquisition modality
- G06T2207/10028—Range image; Depth image; 3D point clouds
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06T—IMAGE DATA PROCESSING OR GENERATION, IN GENERAL
- G06T2219/00—Indexing scheme for manipulating 3D models or images for computer graphics
- G06T2219/20—Indexing scheme for editing of 3D models
- G06T2219/2004—Aligning objects, relative positioning of parts
Definitions
- Real-time performance capture for modeling the pose, shape, appearance, and motions of humans is used as inputs for computer vision tasks such as hand, body, or object tracking, 3D reconstruction, and simultaneous localization and mapping (SLAM).
- computer vision tasks such as hand, body, or object tracking, 3D reconstruction, and simultaneous localization and mapping (SLAM).
- SLAM simultaneous localization and mapping
- each new frame of depth and image data is used for non-rigid scene reconstruction over time.
- non-rigid scene reconstructions are computationally taxing, suffer from over-smoothing of high frequency details such as faces, and are prone to tracking failures when confronting topology changes.
- FIG. 1 is a block diagram illustrating motion tracking system using spectral embedding and backward and forward matching to correlate a data volume and an evolving reference volume to estimate a pose of objects in an environment in accordance with some embodiments.
- FIG. 2 is a flow diagram illustrating a method of using spectral embedding and backward and forward matching to correlate a data volume and an evolving reference volume to estimate a pose of objects in an environment in accordance with some embodiments.
- FIG. 3 is a flow diagram illustrating a method of computing a sparse
- FIG. 4 is a flow diagram illustrating a method of backward and forward matching of a reference volume to a data volume in accordance with some embodiments.
- FIGs. 1 -4 illustrate techniques for estimating a pose of one or more subjects, such as a person, in an environment by a motion tracking system based on estimating a correspondence between a current data frame and a reference volume containing a plurality of fused prior data frames based on spectral embedding and performing bidirectional non-rigid matching between the reference volume and the current data frame to refine the correspondence so as to support location-based functionality, such as augmented reality (AR) functionality, virtual reality (VR) functionality, visual localization/odometry or other simultaneous localization and mapping (SLAM) functionality, and the like.
- the motion tracking system is an electronic device that computes a data mesh based on extracted zero-crossings of a volume.
- the volume is a three-dimensional (3D) truncated signed distance function, which is an implicit surface (3D model) representing an environment of an electronic device based on depth data captured by one or more depth cameras.
- the electronic device maintains a both data volume and an evolving reference volume.
- the data volume contains a data mesh based on a current frame captured by one or more of the depth cameras (referred to as a current data mesh frame), and the reference volume is populated with an initial data mesh frame and subsequent data mesh frames that are fused to the initial data mesh frame.
- the electronic device predicts correspondences between the data volume and the reference volume based on spectral embedding. The correspondences provide constraints that accelerate the convergence between the data volume and the reference volume.
- the electronic device optimizes a convergence between the data volume and the reference volume based on a color term that corrects drift in areas with finer geometry, such as faces. By tracking changes between the current data mesh frame and the reference volume, the electronic device avoids tracking failures that can occur when relying solely on a previous data mesh frame.
- the electronic device performs bi-directional matching between the reference volume and the data volume ("forward matching"), and between the data volume and the reference volume (“backward matching”) to account for surface topology changes.
- the electronic device uses bi-directional matching between the reference volume and the data volume (“forward matching"), and between the data volume and the reference volume (“backward matching") to account for surface topology changes.
- the electronic device After aligning the reference volume with the data volume, the electronic device fuses the data volume into the reference volume and warps the reference volume to the data to estimate a pose of an object in the environment of the electronic device.
- the electronic device incorporates high frequency details and texture mapping to render a high-fidelity reconstruction of a moving subject, such as a person deforming an object such as an article of clothing, at relatively high speed.
- the electronic device 100 can include a user-portable mobile device, such as a tablet computer, computing- enabled cellular phone (e.g., a "smartphone"), a notebook computer, a personal digital assistant (PDA), a gaming system remote, a television remote, and the like.
- a user-portable mobile device such as a tablet computer, computing- enabled cellular phone (e.g., a "smartphone"), a notebook computer, a personal digital assistant (PDA), a gaming system remote, a television remote, and the like.
- the electronic device 100 can include another type of mobile device, such as a head-mounted display, single camera, multi-sensor camera, and the like.
- the electronic device 100 is generally described herein in the example context of a mobile device, such as a tablet computer or a smartphone; however, the electronic device 100 is not limited to these example implementations.
- the electronic device 100 includes a plurality of sensors (such as, e.g., a depth camera 102 and a color camera 104) to obtain information regarding a local environment (not shown) of the electronic device 100 and a processor 1 10 to analyze the information obtained by the sensors 102, 104 and estimate a pose of a subject in the environment of the electronic device 100.
- the electronic device 100 obtains visual information (imagery) for the local environment in the form of depth data 105 via depth camera 102 and in the form of color data 107 via color (RGB) imaging camera 104.
- the imaging camera 104 is implemented as a wide-angle imaging camera having a fish-eye lens or other wide-angle lens to provide a wide-angle view of the local environment.
- the depth camera 102 uses a modulated light illuminator (not shown) to project a modulated light pattern into the local environment, and uses one or more imaging sensors (not shown) to capture reflections of the modulated light pattern as it reflects back from objects in the local environment.
- the illuminator emits infrared (IR) light.
- the illuminator is a vertical cavity surface emitting laser (VCSEL).
- VCSEL vertical cavity surface emitting laser
- a VCSEL emits light from a larger surface than a laser, and therefore emits more light while still being safe for eyes.
- the illuminator is coupled with a suitable mask (not shown) to emit structured light (i.e., modulated light patterns).
- modulated light patterns are temporally-modulated light patterns.
- the captured reflections of the modulated light patterns are referred to herein as "depth maps.”
- the depth camera 102 captures depth maps at a rate of approximately 200 frames per second, wherein each frame includes depth data for a particular time period.
- the processor 1 10 includes a memory 1 15, a data volume 120, a reference volume 125, a sparse correspondence module 130, a dense correspondence module 135, a final matching module 140, and a skinning module 145.
- the memory 1 15 is a memory device generally configured to store the depth data 105 and the color data 107, and therefore may be a random access memory (RAM) memory module, non-volatile memory device (e.g., flash memory), and the like.
- the memory 1 15 may form part of a memory hierarchy of the electronic device 100 and may include other memory modules, such as additional caches not illustrated at FIG. 1 .
- the memory 1 15 is configured to receive and store the depth data 105 from the depth camera 102 and the color data 107 from the color camera 104.
- the processor 1 10 generates a textured mesh (also referred to as a three- dimensional (3D) point cloud) based on the depth data 105 and the color data 107, and maintains the textured mesh at a data volume 120.
- the data volume 120 includes the textured mesh corresponding to a current frame, referred to as the current data mesh frame 1 17.
- the processor 1 10 also maintains a reference volume 125, also referred to as a key volume. Initially, the processor 1 10 sets the first data mesh frame 1 17 as the reference, or key, frame, and performs a non-rigid alignment between the key frame and a new data mesh frame so that data of the new data mesh frame can be fused into the key frame.
- the processor 1 10 uses a truncated signed distance function (TSDF) at the reference volume 125 to volumetrically fuse the new data mesh to the key frame. If the processor 1 10 determines that an alignment error between a new data mesh frame and the key frame is above a threshold, the processor 1 10 sets the new data mesh frame as the current key frame.
- TSDF truncated signed distance function
- the sparse correspondence module 130 is configured to find correspondences between the 3D meshes of the new data mesh frame 1 17 and the reference volume 125.
- the affinity matrix encodes the similarity of every node in the graph based on their distances D, which approximates a Kernel function to encode non- linearities in the data mesh.
- the sparse correspondence module 130 discards the first eigenvector which is associated with the eigenvalue 0 and is a constant vector.
- the sparse correspondence module 130 learns to approximate embedded points from a set of 3D points X ⁇ R nx3 representing the current data mesh frame 1 17, a process referred to herein as "spectral embedding".
- the sparse correspondence module 130 relates the affinity matrix A to a non-linear mapping of the input space, similar to an approximate Kernel function.
- the sparse correspondence module 130 therefore treats the
- the sparse correspondence module 130 learns a non-linear mapping 0(X) of the point cloud and a regression function W that minimizes the loss: g min£( 0(X) W, Y ) + r(W) where Y ⁇ R fcxn is the embedded space and r(W) is a regularization term to avoid overfitting, which the sparse correspondence module 130 sets to be the i 2 - norm of W.
- the sparse correspondence module 130 uses spatial pooling to summarize the point cloud of the data mesh frame 1 17 and capture both global and local structures.
- the processor 1 10 trains the sparse correspondence module 130 by collecting point clouds Xi , ... X / v and randomly subsamples a number of points (e.g., 256 points) from each point cloud.
- Each point cloud represents a particular subject performing a particular pose (such as, for example, a person holding his body in a particular pose).
- the processor 1 10 computes the embedded space Yi , ... Y / v using an offline process.
- the processor 1 10 then remaps the input point clouds to ⁇ ⁇ , ...
- the sparse correspondence module 130 retrieves closest-point correspondences and uses the correspondences for initialization of a correspondence field between the current data mesh frame 1 17 and the reference volume 125.
- the dense correspondence module 135 is configured to identify non-rigid alignment parameters that warp the mesh at the reference volume 125 to the current data mesh frame 1 17.
- the dense correspondence module 135 runs both forward matching (reference volume 125 to data volume 120) and backward matching (data volume 120 to reference volume 125) to find dense
- the dense correspondence module 135 uses the sparse correspondences identified by the sparse correspondence module 130 as a data term in the optimization problem of the forward matching.
- the data term penalizes the distance between the warped reference point to its corresponding data point.
- the dense correspondence module 135 uses the dense correspondences as residuals in a final non-rigid matching phase, after which the current data mesh frame 1 17 is fused with the reference volume 125 to generate a model encoding the shape of a subject in the environment of the electronic device 100.
- the dense correspondence module 135 uses an embedded deformation (ED) graph-based method for non-rigid matching.
- the dense correspondence module 135 uniformly samples ED nodes from the vertices of a reference mesh, representing the /-th node location as The dense correspondence module 135 associates each ED node with a set of parameters that represent the deformation the ED node imposes in its local neighborhood.
- the dense correspondence module 135 connects neighboring ED nodes together to form an ED graph, and uses G to collectively represent the deformation parameters and ED node locations on the ED graph.
- the dense correspondence module 135 "skins" each mesh vertex to K neighboring ED nodes so that the mesh will be deformed according to the parameters of the ED graph.
- the dense correspondence module 135 identifies the ED graph parameters that deform the reference volume 125 to fit the current data mesh 1 17.
- the dense correspondence module 135 parameterizes the deformation at each ED node as an affine transformation.
- the affine transformation has 12 parameters (a 3 x 3 matrix A together with a 3D vector t).
- the dense correspondence module 135 identifies the ED graph parameters that deform the reference volume 125 to fit the current data mesh 1 17.
- the dense correspondence module 135 parameterizes the deformation at each ED node as an affine transformation.
- the affine transformation
- correspondence module 135 adds a regularization on A as a soft constraint to enforce A as close to a rotation matrix as possible.
- the dense correspondence module 135 represents A as a quaternion q without explicitly forcing q to be unitary, but instead treating
- 1 as a soft constraint.
- R(q) becomes a rotation matrix multiplied by a scalar.
- the dense correspondence module 135 uses linear blending rather than quaternion blending to conserve computational resources while maintaining a high frame rate.
- the dense correspondence module 135 is configured to perform two-way non- rigid matching between the reference volume 125 and the data volume 120.
- the dense correspondence module 135 aligns the reference volume 125 to the data volume 120 (forward matching) and then aligns the data volume 120 to the reference volume 125 (backward matching), based on which the dense correspondence module 135 identifies optimized point-to-point correspondences between the reference volume 125 and the data volume 120.
- the dense correspondence module 135 matches the reference volume 125 to the data volume 120 by measuring the misalignment between the reference mesh and the input depth maps of the data volume 120 using a projective point-to-plane distance:
- the dense correspondence module 135 additionally integrates the visual hull term and the learned correspondence term from Equation (1 ). In some embodiments, the dense correspondence module 135 adds regularization terms to enforce the smoothness of the non-rigid motion field. In some embodiments, the dense correspondence module 135 adds a color term to minimize drift.
- the dense correspondence module 135 After establishing the forward alignment, the dense correspondence module 135 pairs each vertex v m on the reference surface with its corresponding point pj d on the current data mesh frame 1 17 (which as been volumetrically fused from the input depth maps 105).
- the dense correspondence module 135 lets p ⁇ d denote the closest surface point of v m , and discards a corresponding pair if their distance is greater than a threshold (e.g., 2mm) to generate a correspondence
- a threshold e.g. 2mm
- the dense correspondence module 135 uses Equation (3) to warp the ED nodes of the reference to the data pose (g ⁇ g + 1).
- the dense correspondence module 135 then update the node-node connectivity based on the mesh topology at the depth data 105.
- the dense correspondence module 135 uses the updated ED graph for backward matching, where the dense correspondence module 135 finds correspondences with the current data mesh frame 1 17 for each of the vertices of the reference volume 120
- the dense correspondence module 135 re-uses the ED graph instead of resampling a new ED graph from the current data mesh frame 1 17, thereby preserving the correct ED node connectivity during the alignment of the reference volume 125 representing open topology to the current data mesh frame 1 17 representing closed topology, in which case the ED graph from the reference volume 125 will have the correct connectivity but the resampled ED graph at the current data mesh frame 1 17 will have the incorrect connectivity.
- the final matching module 140 is configured to identify the best correspondence for each vertex at the reference volume: ⁇ (v m , p m ) ⁇ . If the final matching module 140 identifies the forward correspondence as having the best correspondence with the current data mesh frame 1 17 for a reference vertex v, the processor 1 10 treats the vertex v as having a reliable correspondence with the current data mesh frame 1 17 given the reference mesh topology at the reference volume 125. If the final matching module 140 identifies the backward correspondence as having the best correspondence with the current data mesh frame 1 17 for the reference vertex v, the final matching module 140 updates the skinning results (both ED node set and weights) for the reference vertex v to match the topology at the current data mesh frame 1 17. The final matching module 140 performs a final matching to align the reference volume 125 to the data volume 120 with the updated graph connectivity and vertex skinning, using the extracted
- the final matching module 140 addresses drift that can occur when the point-to-plane data term used in the forward matching does not constrain a vertex's movement along the tangent plane.
- the final matching module 140 formulates the energy term as:
- ⁇ clr ⁇ m ⁇ n ⁇ mn II In(n n (v m )) - C m
- ⁇ ⁇ ( ⁇ ) projects the warped reference vertex projected to the n-th color image space (2D image coordinate)
- 5 mn is the visibility term as in Equation (4)
- c m represents the 3D color vector of the m-th vertex on the reference mesh.
- the final matching module 140 collapses the 3D color into a single intensity (grayscale) value, which reduces the computation requirement for the J T J evaluation.
- the final matching module 140 collapses multiple residuals on the same vertex into one, incorporating instead the residuals:
- the weight w mn takes into account visibility and viewing angle.
- Voxels in the reference volume 125 sit on regular lattice grid points, but after the forward warp, in some embodiments the final matching module 140 re-samples the TSDF values and weights at the non-uniform grid of the data volume 120. In some cases, voxels corresponding to different surface parts can be warped to the same location.
- the final matching module 140 applies the warp function to each volumetric cube (with eight voxels at its corners) on the lattice grid. After warping, the eight voxels can also become non-cuboid. The final matching module 140 discards cubes that are distorted dramatically and assumes the rest approximately have the shape of a cuboid. The final matching module 140 then performs a rasterization process on each warped cuboid to detect all the lattice points of the data volume 120 that sit inside it. The final matching module 140 trilinearly interpolates the TSDF value and weight for each lattice point.
- a data voxel can get TSDF values from multiple cubes when a collision occurs.
- the final matching module 140 handles collisions with a custom atomic operation.
- the final matching module 140 writes a new TSDF value d new to a voxel with an old TSDF value d old
- the skinning module 145 is configured to perform a relatively fast approximation for geodesic skinning. The skinning module 145 first finds the nearest ED nodes to each vertex using the Euclidean distance.
- the skinning module 145 solves for the heat equilibrium over the surface, where the heat is transferred from the ED node to only the vertices to which the node was selected as one of its k-nearest ED nodes. The skinning module 145 then solves the linear system for ED node / ' :
- D is a diagonal matrix
- Da is the area of vertex / (one third the area of all the triangles incident on vertex / ' )
- ⁇ is the discrete surface Laplacian calculated using the cotangent formula and using a half-edge data structure for the intermediate representation
- t is a temperature hyperparameter
- the skinning module 145 samples ED nodes on the mesh manifold by choosing an ED node as the medoid of a set of vertices instead of the centoid.
- the skinning module 145 solves the resulting linear systems in parallel with a Gauss-Seidel implementation.
- the skinning module 145 determines that the recovered solution is too distant on the manifold and subsequently detaches the recovered solution from ED node /, thus avoiding distortion artifacts.
- the skinning module 145 employs the Euclidean distance during volume warping to conserve computational resources. Thus, the skinning module 145 associates each vertex (or voxel) in the volume to its neighbor ED nodes, and gives a weight for the association.
- the non-rigid deformation (i.e., motion field, or pose) is represented as a set of local semi-rigid deformations at each of the ED nodes.
- the deformation is initially defined only at the position of the ED nodes. Because the vertices of the mesh (or voxels of the volume) typically do not co-locate with an ED node, the skinning module 145 interpolates the deformation parameters for those mesh vertices (or volume voxels). To perform the interpolation, the skinning module 145
- the neighboring ED nodes determines the neighboring ED nodes for each mesh vertex (or voxel), and then interpolates the parameters (e.g., by taking the weighted average of the neighboring ED parameters).
- FIG. 2 is a flow diagram illustrating a method 200 employed by the motion tracking system 100 of FIG. 1 of using spectral embedding and backward and forward matching to correlate a data volume and an evolving reference volume to estimate a pose of objects in an environment in accordance with some
- the processor 1 10 of the motion tracking system 100 of FIG. 1 receives captured depth and color data from the depth camera 102 and the color camera 104.
- the depth and color data may be in the form of one or more depth maps and color images.
- the processor 1 10 generates a current data mesh frame 1 17 which the processor 1 10 maintains at the data volume 120.
- the sparse correspondence module 130 estimates a correspondence field between the data volume 120 and the reference volume 125 based on a learned approximation of spectral embedding. In some embodiments, the sparse correspondence module 130 uses Equation (1 ) to estimate the correspondence field.
- the dense correspondence module 135 runs forward and backward matching between the reference volume 125 and the data volume 120 to find dense correspondences between the meshes.
- the final matching module 140 performs non-rigid optimization based on residuals from the forward and backward matching from the dense correspondence module 135.
- the processor 1 10 fuses the data mesh into the reference volume 125 and warps the reference volume 125 to the data volume 120, after which the method flow continues back to block 202.
- FIG. 3 is a flow diagram illustrating a method 300 employed by the motion tracking system 100 of FIG. 1 of computing a sparse correspondence field between a data volume and a reference volume based on a learned
- the sparse correspondence module 130 receives the 3D point cloud of the current data mesh frame 1 17.
- the sparse correspondence module 130 approximates embedded points from a subset of the 3D points of 3D point cloud of the current data mesh frame 1 17.
- the sparse correspondence module 130 relates an affinity matrix to a non-linear mapping of the current data mesh frame 1 17.
- the sparse correspondence module 130 retrieves closest-point correspondences between the current data mesh frame 1 17 and the reference volume 120 based on the non-linear mapping and embedded spaces.
- FIG. 4 is a flow diagram illustrating a method 400 employed by the motion tracking system 100 of FIG.
- the dense correspondence module 135 performs forward matching of the reference volume 125 to the data volume 120.
- the dense correspondence module 135 warps the embedded deformation nodes of the reference volume 125 to the pose of the data volume 120.
- the dense correspondence module 135 updates node-to-node connectivity between the meshes of the reference volume 125 and the data volume 120 based on the mesh topology at the data volume 120 to generate an updated embedded deformation graph.
- the dense correspondence module 135 performs backward matching of the data volume 120 to the reference volume 125 based on the updated embedded deformation graph.
- the dense correspondence module determines, for each vertex, if the forward matching correspondence is better than the backward matching correspondence. For each vertex, if the dense correspondence 135 module determines that the forward matching correspondence is better than the backward matching correspondence, at block 412, the final matching module 140 determines that the vertex has a reliable correspondence to the current data mesh frame 1 17 given the topology of the mesh at the reference volume 125. If, at block 410, for a given vertex, the dense correspondence module 135 determines that the forward matching correspondence is not better than the backward matching correspondence, at block 414, the final matching module 140 updates the vertex skinning results for the vertex to match the topology of the current data mesh frame 1 17 at the data volume 120. At block 416, the final matching module 140 aligns the reference frame 125 to the data frame 120.
- certain aspects of the techniques described above may be implemented by one or more processors of a processing system executing software.
- the software comprises one or more sets of executable instructions stored or otherwise tangibly embodied on a non-transitory computer readable storage medium.
- the software can include the instructions and certain data that, when executed by the one or more processors, manipulate the one or more processors to perform one or more aspects of the techniques described above.
- the non-transitory computer readable storage medium can include, for example, a magnetic or optical disk storage device, solid state storage devices such as Flash memory, a cache, random access memory (RAM) or other non-volatile memory device or devices, and the like.
- the executable instructions stored on the non-transitory computer readable storage medium may be in source code, assembly language code, object code, or other instruction format that is interpreted or otherwise executable by one or more processors.
- a computer readable storage medium may include any storage medium, or combination of storage media, accessible by a computer system during use to provide instructions and/or data to the computer system.
- Such storage media can include, but is not limited to, optical media (e.g., compact disc (CD), digital versatile disc (DVD), Blu-Ray disc), magnetic media (e.g., floppy disc , magnetic tape, or magnetic hard drive), volatile memory (e.g., random access memory (RAM) or cache), non-volatile memory (e.g., read-only memory (ROM) or Flash memory), or microelectromechanical systems (MEMS)-based storage media.
- optical media e.g., compact disc (CD), digital versatile disc (DVD), Blu-Ray disc
- magnetic media e.g., floppy disc , magnetic tape, or magnetic hard drive
- volatile memory e.g., random access memory (RAM) or cache
- non-volatile memory e.g., read-only memory (ROM) or Flash memory
- MEMS microelect
- the computer readable storage medium may be embedded in the computing system (e.g., system RAM or ROM), fixedly attached to the computing system (e.g., a magnetic hard drive), removably attached to the computing system (e.g., an optical disc or Universal Serial Bus (USB)-based Flash memory), or coupled to the computer system via a wired or wireless network (e.g., network accessible storage (NAS)).
- NAS network accessible storage
Abstract
An electronic device [100] estimates a pose of one or more subjects in an environment based on estimating a correspondence between a data volume [120] containing a data mesh [117] based on a current frame [105] captured by a depth camera [102] and a reference volume [125] containing a plurality of fused prior data frames based on spectral embedding and performing bidirectional non-rigid matching between the reference volume and the current data frame to refine the correspondence so as to support location-based functionality. The electronic device predicts correspondences between the data volume and the reference volume based on spectral embedding. The correspondences provide constraints that accelerate the convergence between the data volume and the reference volume.
Description
NON-RIGID ALIGNMENT FOR VOLUMETRIC PERFORMANCE CAPTURE
BACKGROUND
Real-time performance capture for modeling the pose, shape, appearance, and motions of humans is used as inputs for computer vision tasks such as hand, body, or object tracking, 3D reconstruction, and simultaneous localization and mapping (SLAM). For such tasks, each new frame of depth and image data is used for non-rigid scene reconstruction over time. However, non-rigid scene reconstructions are computationally taxing, suffer from over-smoothing of high frequency details such as faces, and are prone to tracking failures when confronting topology changes.
BRIEF DESCRIPTION OF THE DRAWINGS
The present disclosure may be better understood, and its numerous features and advantages made apparent to those skilled in the art by referencing the accompanying drawings. The use of the same reference symbols in different drawings indicates similar or identical items.
FIG. 1 is a block diagram illustrating motion tracking system using spectral embedding and backward and forward matching to correlate a data volume and an evolving reference volume to estimate a pose of objects in an environment in accordance with some embodiments. FIG. 2 is a flow diagram illustrating a method of using spectral embedding and backward and forward matching to correlate a data volume and an evolving reference volume to estimate a pose of objects in an environment in accordance with some embodiments.
FIG. 3 is a flow diagram illustrating a method of computing a sparse
correspondence field between a data volume and a reference volume based on a
learned approximation of a spectral embedding of extracted points in accordance with some embodiments.
FIG. 4 is a flow diagram illustrating a method of backward and forward matching of a reference volume to a data volume in accordance with some embodiments. DETAILED DESCRIPTION
The following description is intended to convey a thorough understanding of the present disclosure by providing a number of specific embodiments and details involving estimating a correspondence between a current data frame and a reference volume containing a plurality of fused prior data frames based on spectral embedding and performing bidirectional non-rigid matching between the reference volume and the current data frame to refine the correspondence. It is understood, however, that the present disclosure is not limited to these specific embodiments and details, which are examples only, and the scope of the disclosure is accordingly intended to be limited only by the following claims and equivalents thereof. It is further understood that one possessing ordinary skill in the art, in light of known systems and methods, would appreciate the use of the disclosure for its intended purposes and benefits in any number of alternative embodiments, depending upon specific design and other needs.
FIGs. 1 -4 illustrate techniques for estimating a pose of one or more subjects, such as a person, in an environment by a motion tracking system based on estimating a correspondence between a current data frame and a reference volume containing a plurality of fused prior data frames based on spectral embedding and performing bidirectional non-rigid matching between the reference volume and the current data frame to refine the correspondence so as to support location-based functionality, such as augmented reality (AR) functionality, virtual reality (VR) functionality, visual localization/odometry or other simultaneous localization and mapping (SLAM) functionality, and the like. The motion tracking system is an electronic device that computes a data mesh based on extracted zero-crossings of a volume. The volume is a three-dimensional
(3D) truncated signed distance function, which is an implicit surface (3D model) representing an environment of an electronic device based on depth data captured by one or more depth cameras. The electronic device maintains a both data volume and an evolving reference volume. The data volume contains a data mesh based on a current frame captured by one or more of the depth cameras (referred to as a current data mesh frame), and the reference volume is populated with an initial data mesh frame and subsequent data mesh frames that are fused to the initial data mesh frame. The electronic device predicts correspondences between the data volume and the reference volume based on spectral embedding. The correspondences provide constraints that accelerate the convergence between the data volume and the reference volume. In some embodiments, the electronic device optimizes a convergence between the data volume and the reference volume based on a color term that corrects drift in areas with finer geometry, such as faces. By tracking changes between the current data mesh frame and the reference volume, the electronic device avoids tracking failures that can occur when relying solely on a previous data mesh frame.
In some embodiments, the electronic device performs bi-directional matching between the reference volume and the data volume ("forward matching"), and between the data volume and the reference volume ("backward matching") to account for surface topology changes. The electronic device uses
correspondences identified from the bi-directional matching as residuals in a final non-rigid matching phase to align the reference volume with the data volume. After aligning the reference volume with the data volume, the electronic device fuses the data volume into the reference volume and warps the reference volume to the data to estimate a pose of an object in the environment of the electronic device. In some embodiments, the electronic device incorporates high frequency details and texture mapping to render a high-fidelity reconstruction of a moving subject, such as a person deforming an object such as an article of clothing, at relatively high speed.
FIG. 1 illustrates an electronic device 100 configured to support real-time reconstruction of arbitrary non-rigid scenes using depth map data for use in virtual reality (VR) and/or augmented reality (AR) applications in accordance with at least one embodiment of the present disclosure. The electronic device 100 can include a user-portable mobile device, such as a tablet computer, computing- enabled cellular phone (e.g., a "smartphone"), a notebook computer, a personal digital assistant (PDA), a gaming system remote, a television remote, and the like. In other embodiments, the electronic device 100 can include another type of mobile device, such as a head-mounted display, single camera, multi-sensor camera, and the like. For ease of illustration, the electronic device 100 is generally described herein in the example context of a mobile device, such as a tablet computer or a smartphone; however, the electronic device 100 is not limited to these example implementations. The electronic device 100 includes a plurality of sensors (such as, e.g., a depth camera 102 and a color camera 104) to obtain information regarding a local environment (not shown) of the electronic device 100 and a processor 1 10 to analyze the information obtained by the sensors 102, 104 and estimate a pose of a subject in the environment of the electronic device 100.
The electronic device 100 obtains visual information (imagery) for the local environment in the form of depth data 105 via depth camera 102 and in the form of color data 107 via color (RGB) imaging camera 104. In one embodiment, the imaging camera 104 is implemented as a wide-angle imaging camera having a fish-eye lens or other wide-angle lens to provide a wide-angle view of the local environment. The depth camera 102, in one embodiment, uses a modulated light illuminator (not shown) to project a modulated light pattern into the local environment, and uses one or more imaging sensors (not shown) to capture reflections of the modulated light pattern as it reflects back from objects in the local environment. In some embodiments, the illuminator emits infrared (IR) light. In some embodiments, the illuminator is a vertical cavity surface emitting laser (VCSEL).
A VCSEL emits light from a larger surface than a laser, and therefore emits more light while still being safe for eyes. In some embodiments, the illuminator is coupled with a suitable mask (not shown) to emit structured light (i.e., modulated light patterns). In some embodiments, these modulated light patterns are temporally-modulated light patterns. The captured reflections of the modulated light patterns are referred to herein as "depth maps." In some embodiments, the depth camera 102 captures depth maps at a rate of approximately 200 frames per second, wherein each frame includes depth data for a particular time period.
The processor 1 10 includes a memory 1 15, a data volume 120, a reference volume 125, a sparse correspondence module 130, a dense correspondence module 135, a final matching module 140, and a skinning module 145. The memory 1 15 is a memory device generally configured to store the depth data 105 and the color data 107, and therefore may be a random access memory (RAM) memory module, non-volatile memory device (e.g., flash memory), and the like. The memory 1 15 may form part of a memory hierarchy of the electronic device 100 and may include other memory modules, such as additional caches not illustrated at FIG. 1 . The memory 1 15 is configured to receive and store the depth data 105 from the depth camera 102 and the color data 107 from the color camera 104. The processor 1 10 generates a textured mesh (also referred to as a three- dimensional (3D) point cloud) based on the depth data 105 and the color data 107, and maintains the textured mesh at a data volume 120. The data volume 120 includes the textured mesh corresponding to a current frame, referred to as the current data mesh frame 1 17. The processor 1 10 also maintains a reference volume 125, also referred to as a key volume. Initially, the processor 1 10 sets the first data mesh frame 1 17 as the reference, or key, frame, and performs a non-rigid alignment between the key frame and a new data mesh frame so that data of the new data mesh frame can be fused into the key frame. In some embodiments, the processor 1 10 uses a truncated signed distance function (TSDF) at the reference volume 125 to volumetrically fuse the new data mesh to
the key frame. If the processor 1 10 determines that an alignment error between a new data mesh frame and the key frame is above a threshold, the processor 1 10 sets the new data mesh frame as the current key frame.
The sparse correspondence module 130 is configured to find correspondences between the 3D meshes of the new data mesh frame 1 17 and the reference volume 125. In some embodiments, the sparse correspondence module 130 builds an affinity matrix A = exp (-^) for every node (3D point) in the mesh
(graph). The affinity matrix encodes the similarity of every node in the graph based on their distances D, which approximates a Kernel function to encode non- linearities in the data mesh. The sparse correspondence module 130 then decomposes the affinity matrix A using the SVD decomposition in A = USVT and the first k - 1 eigenvectors u2, uk are used as new space to facilitate finding correspondences. The sparse correspondence module 130 discards the first eigenvector which is associated with the eigenvalue 0 and is a constant vector. In some embodiments, the sparse correspondence module 130 learns to approximate embedded points from a set of 3D points X ε Rnx3 representing the current data mesh frame 1 17, a process referred to herein as "spectral embedding". The sparse correspondence module 130 relates the affinity matrix A to a non-linear mapping of the input space, similar to an approximate Kernel function. The sparse correspondence module 130 therefore treats the
embedded space as a target output that is to be learned. In some embodiments, the sparse correspondence module 130 learns a function /(X) = Y ε Rfcxn, where Y are the first k eigenvectors of the affinity matrix A. By learning the function f (X), the sparse correspondence module 130 avoids building the affinity matrix A and performing its SVD decomposition.
The sparse correspondence module 130 learns a non-linear mapping 0(X) of the point cloud and a regression function W that minimizes the loss: g min£( 0(X) W, Y ) + r(W)
where Y ε Rfcxn is the embedded space and r(W) is a regularization term to avoid overfitting, which the sparse correspondence module 130 sets to be the i2- norm of W. The sparse correspondence module 130 avoids computing a Kernel matrix A of the dat pproximating the Kernel matrix via random features and setting 0(X) = exp where F ε R3xF is randomly generated from a Gaussian
distribution.
In some embodiments, the sparse correspondence module 130 uses spatial pooling to summarize the point cloud of the data mesh frame 1 17 and capture both global and local structures. The sparse correspondence module 130 performs an additional non-linear mapping Ψ = exp {^~^ ancl computes its max- pooling over all the points n to obtain a single compact descriptor Ψ = ma ^ ε RF where the sparse correspondence module 130 sets the same number of random features F. In order to capture both global and local information for each point x in the point cloud X, the sparse correspondence module 130 aggregates the descriptors 0(x) and ψ with a simple subtraction Φ = 0(x) - ip.
In some embodiments, the processor 1 10 trains the sparse correspondence module 130 by collecting point clouds Xi , ... X/v and randomly subsamples a number of points (e.g., 256 points) from each point cloud. Each point cloud represents a particular subject performing a particular pose (such as, for example, a person holding his body in a particular pose). The processor 1 10 computes the embedded space Yi , ... Y/v using an offline process. The processor 1 10 then remaps the input point clouds to Φχ, ... ΦΝ and minimizes the following loss function: arg imnSllYi - iW + AHWll2 (2) In some embodiments, at runtime, given two meshes M1 and M2, the processor 1 10 randomly subsamples the meshes to, for example, 256 3D coordinates Xi and X2, computes their non-linear mappings Φ1 and Φ2, and generates the
embedded spaces Yx = xW and Y2 = <i 2W. In the embedded space, the sparse correspondence module 130 retrieves closest-point correspondences and uses the correspondences for initialization of a correspondence field between the current data mesh frame 1 17 and the reference volume 125. The dense correspondence module 135 is configured to identify non-rigid alignment parameters that warp the mesh at the reference volume 125 to the current data mesh frame 1 17. The dense correspondence module 135 runs both forward matching (reference volume 125 to data volume 120) and backward matching (data volume 120 to reference volume 125) to find dense
correspondences between the reference volume 125 and the data volume 120. The dense correspondence module 135 uses the sparse correspondences identified by the sparse correspondence module 130 as a data term in the optimization problem of the forward matching. The data term penalizes the distance between the warped reference point to its corresponding data point. The dense correspondence module 135 uses the dense correspondences as residuals in a final non-rigid matching phase, after which the current data mesh frame 1 17 is fused with the reference volume 125 to generate a model encoding the shape of a subject in the environment of the electronic device 100.
In some embodiments, the dense correspondence module 135 uses an embedded deformation (ED) graph-based method for non-rigid matching. The dense correspondence module 135 uniformly samples ED nodes from the vertices of a reference mesh, representing the /-th node location as
The dense correspondence module 135 associates each ED node with a set of parameters that represent the deformation the ED node imposes in its local neighborhood. The dense correspondence module 135 connects neighboring ED nodes together to form an ED graph, and uses G to collectively represent the deformation parameters and ED node locations on the ED graph. The dense correspondence module 135 "skins" each mesh vertex to K neighboring ED nodes so that the mesh will be deformed according to the parameters of the ED graph.
The dense correspondence module 135 identifies the ED graph parameters that deform the reference volume 125 to fit the current data mesh 1 17. The dense correspondence module 135 parameterizes the deformation at each ED node as an affine transformation. In some embodiments, the affine transformation has 12 parameters (a 3 x 3 matrix A together with a 3D vector t). Using Linear Blend Skinning, the dense correspondence module 135 applies a transformation to warp a vertex v at the reference volume 125 to a corresponding vertex v at the current data mesh frame 1 17, wherein the transformation is denoted as v(G) = ∑k=i Wi(Ak(v - gk) + gk + tk). In some embodiments, the dense
correspondence module 135 adds a regularization on A as a soft constraint to enforce A as close to a rotation matrix as possible.
In some embodiments, the dense correspondence module 135 represents A as a quaternion q without explicitly forcing q to be unitary, but instead treating || q|| = 1 as a soft constraint. To warp a vertex v, the dense correspondence module 135 performs v(G) =∑k Wi(K(qk)(v - gk) + gk + tk), (3) where #(■) converts a quaternion to a rotation matrix. In some embodiments, because the dense correspondence module 135 does not explicitly force q to be unitary, R(q) becomes a rotation matrix multiplied by a scalar. In some
embodiments, the dense correspondence module 135 uses linear blending rather than quaternion blending to conserve computational resources while maintaining a high frame rate.
The dense correspondence module 135 is configured to perform two-way non- rigid matching between the reference volume 125 and the data volume 120. The dense correspondence module 135 aligns the reference volume 125 to the data volume 120 (forward matching) and then aligns the data volume 120 to the reference volume 125 (backward matching), based on which the dense
correspondence module 135 identifies optimized point-to-point correspondences between the reference volume 125 and the data volume 120.
For forward matching, the dense correspondence module 135 matches the reference volume 125 to the data volume 120 by measuring the misalignment between the reference mesh and the input depth maps of the data volume 120 using a projective point-to-plane distance:
£data(G) =∑m∑n <5mn(nT(vm - rn(vm)))2, (4) where v is the warped vertex as defined in Equation (3), m and n are the indices of the vertex and the depth map, respectively, and Γη(ν) represents the corresponding projective 3D point of v from the n-th depth map. 5mn represents the visibility test for vm where 5mn = 1 if it is visible in the n-th depth map, and Smn = 0 otherwise. In some embodiments, the dense correspondence module 135 additionally integrates the visual hull term and the learned correspondence term from Equation (1 ). In some embodiments, the dense correspondence module 135 adds regularization terms to enforce the smoothness of the non-rigid motion field. In some embodiments, the dense correspondence module 135 adds a color term to minimize drift.
After establishing the forward alignment, the dense correspondence module 135 pairs each vertex vm on the reference surface with its corresponding point pj d on the current data mesh frame 1 17 (which as been volumetrically fused from the input depth maps 105). The dense correspondence module 135 lets p{ d denote the closest surface point of vm, and discards a corresponding pair if their distance is greater than a threshold (e.g., 2mm) to generate a correspondence
For backward matching, the dense correspondence module 135 uses Equation (3) to warp the ED nodes of the reference to the data pose (g→ g + 1). The dense correspondence module 135 then update the node-node connectivity
based on the mesh topology at the depth data 105. The dense correspondence module 135 then uses the updated ED graph for backward matching, where the dense correspondence module 135 finds correspondences with the current data mesh frame 1 17 for each of the vertices of the reference volume 120:
{(vm, pmwd )}. The dense correspondence module 135 re-uses the ED graph instead of resampling a new ED graph from the current data mesh frame 1 17, thereby preserving the correct ED node connectivity during the alignment of the reference volume 125 representing open topology to the current data mesh frame 1 17 representing closed topology, in which case the ED graph from the reference volume 125 will have the correct connectivity but the resampled ED graph at the current data mesh frame 1 17 will have the incorrect connectivity.
The dense correspondence module 135 aligns the data mesh to the reference TSDF volume ¥(·) using the following data term to measure the misalignment: G) =∑m|¥(v) |2 (5) where ¥(■) defines the signed distance function at fixed regular lattice points and ¥(■) is a continuous volume field sampled through the trilinear interpolation of ¥(■ ) at any given point. The dense correspondence module 135 initializes the parameters at each ED node for the backward matching as the inverse of the forward transformation at that node: qbwd = q_1 and tbwd = -t. The final matching module 140 is configured to identify the best correspondence for each vertex at the reference volume: {(vm, pm )}. If the final matching module 140 identifies the forward correspondence as having the best correspondence with the current data mesh frame 1 17 for a reference vertex v, the processor 1 10 treats the vertex v as having a reliable correspondence with the current data mesh frame 1 17 given the reference mesh topology at the reference volume 125. If the final matching module 140 identifies the backward correspondence as having the best correspondence with the current data mesh frame 1 17 for the reference vertex v, the final matching module 140 updates the skinning results
(both ED node set and weights) for the reference vertex v to match the topology at the current data mesh frame 1 17. The final matching module 140 performs a final matching to align the reference volume 125 to the data volume 120 with the updated graph connectivity and vertex skinning, using the extracted
correspondences as residuals:
In some embodiments, the final matching module 140 adds an energy term to measure photo-consistency between per-vertex colors on the reference mesh at the reference volume 125 and the observed color for the mesh vertices from the color data 107: {In}^=1. By adding the energy term, the final matching module 140 addresses drift that can occur when the point-to-plane data term used in the forward matching does not constrain a vertex's movement along the tangent plane. The final matching module 140 formulates the energy term as:
^clr =∑m∑n ^mn II In(nn(vm)) - Cm|| , (7) where Πη(ν) projects the warped reference vertex projected to the n-th color image space (2D image coordinate), 5mn is the visibility term as in Equation (4), and cm represents the 3D color vector of the m-th vertex on the reference mesh. In some embodiments, the final matching module 140 collapses the 3D color into a single intensity (grayscale) value, which reduces the computation requirement for the JTJ evaluation. In some embodiments, to further reduce the compute, the final matching module 140 collapses multiple residuals on the same vertex into one, incorporating instead the residuals:
£clr =∑m(∑n Wmn/n(nn(vm)) - Cm) , (8) where / is an input intensity image and c is the per-vertex intensity value, and wmn is the weight on each input view where∑n wmn = 1. The weight wmn takes into account visibility and viewing angle.
Voxels in the reference volume 125 sit on regular lattice grid points, but after the forward warp, in some embodiments the final matching module 140 re-samples the TSDF values and weights at the non-uniform grid of the data volume 120. In some cases, voxels corresponding to different surface parts can be warped to the same location. Instead of treating each voxel individually, the final matching module 140 applies the warp function to each volumetric cube (with eight voxels at its corners) on the lattice grid. After warping, the eight voxels can also become non-cuboid. The final matching module 140 discards cubes that are distorted dramatically and assumes the rest approximately have the shape of a cuboid. The final matching module 140 then performs a rasterization process on each warped cuboid to detect all the lattice points of the data volume 120 that sit inside it. The final matching module 140 trilinearly interpolates the TSDF value and weight for each lattice point.
A data voxel can get TSDF values from multiple cubes when a collision occurs. In some embodiments, the final matching module 140 handles collisions with a custom atomic operation. When the final matching module 140 writes a new TSDF value dnew to a voxel with an old TSDF value dold, the final matching module 140 sets d = dnew if either dold is invalid or \dnew \ < \dold \ ; and sets d = d°ld otherwise. The skinning module 145 is configured to perform a relatively fast approximation for geodesic skinning. The skinning module 145 first finds the nearest ED nodes to each vertex using the Euclidean distance. For each ED node, the skinning module 145 solves for the heat equilibrium over the surface, where the heat is transferred from the ED node to only the vertices to which the node was selected as one of its k-nearest ED nodes. The skinning module 145 then solves the linear system for ED node /':
(D - tA)wt = S (9)
where D is a diagonal matrix where Da is the area of vertex / (one third the area of all the triangles incident on vertex /'), Δ is the discrete surface Laplacian calculated using the cotangent formula and using a half-edge data structure for the intermediate representation, t is a temperature hyperparameter, and is a one-hot vector indicating the vertex that represents the ED node. In some embodiments, the skinning module 145 samples ED nodes on the mesh manifold by choosing an ED node as the medoid of a set of vertices instead of the centoid. In some embodiments, the skinning module 145 solves the resulting linear systems in parallel with a Gauss-Seidel implementation. When the recovered solution Wij is zero for a vertex j, the skinning module 145 determines that the recovered solution is too distant on the manifold and subsequently detaches the recovered solution from ED node /, thus avoiding distortion artifacts. In some embodiments, the skinning module 145 employs the Euclidean distance during volume warping to conserve computational resources. Thus, the skinning module 145 associates each vertex (or voxel) in the volume to its neighbor ED nodes, and gives a weight for the association. The non-rigid deformation (i.e., motion field, or pose) is represented as a set of local semi-rigid deformations at each of the ED nodes. Thus, the deformation is initially defined only at the position of the ED nodes. Because the vertices of the mesh (or voxels of the volume) typically do not co-locate with an ED node, the skinning module 145 interpolates the deformation parameters for those mesh vertices (or volume voxels). To perform the interpolation, the skinning module 145
determines the neighboring ED nodes for each mesh vertex (or voxel), and then interpolates the parameters (e.g., by taking the weighted average of the neighboring ED parameters).
FIG. 2 is a flow diagram illustrating a method 200 employed by the motion tracking system 100 of FIG. 1 of using spectral embedding and backward and forward matching to correlate a data volume and an evolving reference volume to estimate a pose of objects in an environment in accordance with some
embodiments. At block 202, the processor 1 10 of the motion tracking system
100 of FIG. 1 receives captured depth and color data from the depth camera 102 and the color camera 104. The depth and color data may be in the form of one or more depth maps and color images. At block 204, the processor 1 10 generates a current data mesh frame 1 17 which the processor 1 10 maintains at the data volume 120. At block 206, the sparse correspondence module 130 estimates a correspondence field between the data volume 120 and the reference volume 125 based on a learned approximation of spectral embedding. In some embodiments, the sparse correspondence module 130 uses Equation (1 ) to estimate the correspondence field. At block 208, the dense correspondence module 135 runs forward and backward matching between the reference volume 125 and the data volume 120 to find dense correspondences between the meshes. At block 210, the final matching module 140 performs non-rigid optimization based on residuals from the forward and backward matching from the dense correspondence module 135. At block 212, the processor 1 10 fuses the data mesh into the reference volume 125 and warps the reference volume 125 to the data volume 120, after which the method flow continues back to block 202.
FIG. 3 is a flow diagram illustrating a method 300 employed by the motion tracking system 100 of FIG. 1 of computing a sparse correspondence field between a data volume and a reference volume based on a learned
approximation of a spectral embedding of extracted points in accordance with some embodiments. At block 302, the sparse correspondence module 130 receives the 3D point cloud of the current data mesh frame 1 17. At block 304, the sparse correspondence module 130 approximates embedded points from a subset of the 3D points of 3D point cloud of the current data mesh frame 1 17. At block 306, the sparse correspondence module 130 relates an affinity matrix to a non-linear mapping of the current data mesh frame 1 17. At block 308, the sparse correspondence module 130 retrieves closest-point correspondences between the current data mesh frame 1 17 and the reference volume 120 based on the non-linear mapping and embedded spaces.
FIG. 4 is a flow diagram illustrating a method 400 employed by the motion tracking system 100 of FIG. 1 of backward and forward matching of a reference volume to a data volume in accordance with some embodiments. At block 402, the dense correspondence module 135 performs forward matching of the reference volume 125 to the data volume 120. At block 404, the dense correspondence module 135 warps the embedded deformation nodes of the reference volume 125 to the pose of the data volume 120. At block 406, the dense correspondence module 135 updates node-to-node connectivity between the meshes of the reference volume 125 and the data volume 120 based on the mesh topology at the data volume 120 to generate an updated embedded deformation graph. At block 508, the dense correspondence module 135 performs backward matching of the data volume 120 to the reference volume 125 based on the updated embedded deformation graph.
At block 410, the dense correspondence module determines, for each vertex, if the forward matching correspondence is better than the backward matching correspondence. For each vertex, if the dense correspondence 135 module determines that the forward matching correspondence is better than the backward matching correspondence, at block 412, the final matching module 140 determines that the vertex has a reliable correspondence to the current data mesh frame 1 17 given the topology of the mesh at the reference volume 125. If, at block 410, for a given vertex, the dense correspondence module 135 determines that the forward matching correspondence is not better than the backward matching correspondence, at block 414, the final matching module 140 updates the vertex skinning results for the vertex to match the topology of the current data mesh frame 1 17 at the data volume 120. At block 416, the final matching module 140 aligns the reference frame 125 to the data frame 120.
In some embodiments, certain aspects of the techniques described above may be implemented by one or more processors of a processing system executing software. The software comprises one or more sets of executable instructions stored or otherwise tangibly embodied on a non-transitory computer readable
storage medium. The software can include the instructions and certain data that, when executed by the one or more processors, manipulate the one or more processors to perform one or more aspects of the techniques described above. The non-transitory computer readable storage medium can include, for example, a magnetic or optical disk storage device, solid state storage devices such as Flash memory, a cache, random access memory (RAM) or other non-volatile memory device or devices, and the like. The executable instructions stored on the non-transitory computer readable storage medium may be in source code, assembly language code, object code, or other instruction format that is interpreted or otherwise executable by one or more processors.
A computer readable storage medium may include any storage medium, or combination of storage media, accessible by a computer system during use to provide instructions and/or data to the computer system. Such storage media can include, but is not limited to, optical media (e.g., compact disc (CD), digital versatile disc (DVD), Blu-Ray disc), magnetic media (e.g., floppy disc , magnetic tape, or magnetic hard drive), volatile memory (e.g., random access memory (RAM) or cache), non-volatile memory (e.g., read-only memory (ROM) or Flash memory), or microelectromechanical systems (MEMS)-based storage media. The computer readable storage medium may be embedded in the computing system (e.g., system RAM or ROM), fixedly attached to the computing system (e.g., a magnetic hard drive), removably attached to the computing system (e.g., an optical disc or Universal Serial Bus (USB)-based Flash memory), or coupled to the computer system via a wired or wireless network (e.g., network accessible storage (NAS)). Note that not all of the activities or elements described above in the general description are required, that a portion of a specific activity or device may not be required, and that one or more further activities may be performed, or elements included, in addition to those described. Still further, the order in which activities are listed are not necessarily the order in which they are performed. Also, the concepts have been described with reference to specific embodiments.
However, one of ordinary skill in the art appreciates that various modifications and changes can be made without departing from the scope of the present disclosure as set forth in the claims below. Accordingly, the specification and figures are to be regarded in an illustrative rather than a restrictive sense, and all such modifications are intended to be included within the scope of the present disclosure.
Benefits, other advantages, and solutions to problems have been described above with regard to specific embodiments. However, the benefits, advantages, solutions to problems, and any feature(s) that may cause any benefit, advantage, or solution to occur or become more pronounced are not to be construed as a critical, required, or essential feature of any or all the claims. Moreover, the particular embodiments disclosed above are illustrative only, as the disclosed subject matter may be modified and practiced in different but equivalent manners apparent to those skilled in the art having the benefit of the teachings herein. No limitations are intended to the details of construction or design herein shown, other than as described in the claims below. It is therefore evident that the particular embodiments disclosed above may be altered or modified and all such variations are considered within the scope of the disclosed subject matter.
Accordingly, the protection sought herein is as set forth in the claims below.
Claims
1 . A method comprising:
computing a current data mesh frame [1 17] based on at least one depth data frame [105] captured at one or more depth cameras [102] of an electronic device [100] and at least one color data frame [107] captured at one or more color cameras [104] , wherein the current data mesh frame comprises a three-dimensional (3D) point cloud representing an environment of the electronic device; maintaining a data volume [120] comprising the current data mesh frame; maintaining a reference volume [125] comprising a plurality of fused data mesh frames based on previously captured depth data frames and color data frames;
computing an initial correspondence [206] between the data volume and the reference volume based on spectral embedding; and estimating a current pose of at least one object in the environment based on the initial correspondence.
2. The method of claim 1 , wherein computing the initial correspondence
comprises:
summarizing the 3D point cloud of the data volume and the reference volume based on spatial pooling; and
computing embedded points from the summarized 3D point cloud based on non-linear mappings to generate a correspondence field between the data volume and the reference volume.
3. The method of claim 2, further comprising:
aligning the reference volume with the data volume;
calculating an alignment error between the data volume and the reference volume based on the non-linear mappings; and
resetting the reference volume to comprise the current data mesh frame in response to identifying that the alignment error between the data volume and the reference volume exceeds a threshold value.
4. The method of claim 1 , further comprising:
identifying non-rigid alignment parameters to warp the reference volume to a pose of the current data mesh frame.
5. The method of claim 1 , further comprising computing a dense
correspondence between the data volume and the reference volume comprising:
aligning the data volume to the reference volume to generate an
embedded deformation graph comprising a plurality of vertices; and aligning the reference volume to data volume based on the embedded deformation graph to identify correspondences between the vertices of the reference volume and the data volume.
6. The method of claim 5, wherein aligning the data volume to the reference volume comprises matching a color value of each vertex of the data volume to a color value of each corresponding vertex of the reference volume.
7. The method of claim 6, further comprising representing the color value of each vertex of the data volume and the color value of each corresponding vertex of the reference volume as a single intensity value.
8. The method of claim 1 , wherein computing the initial correspondence
comprises computing an affinity matrix encoding a similarity between each 3D point of the point cloud of the data volume.
9. A method, comprising:
capturing depth data [105] of an environment at one or more depth cameras [102] of an electronic device [100];
capturing color data [107] of the environment at one or more color
cameras [104] of the electronic device;
computing a current data mesh frame [1 17] comprising corresponding three-dimensional (3D) points of 3D point clouds based on the depth data and the color data;
maintaining a data volume [120] comprising the current data mesh frame; fusing the current data mesh frame to a plurality of previously computed data mesh frames to generate a reference volume [125];
computing a sparse correspondence between the data volume and the reference volume based on spectral embedding;
computing a dense correspondence between the data volume and the reference volume based on a non-rigid alignment; and estimating a current pose of at least one object in the environment based on the sparse correspondence.
10. The method of claim 9, wherein computing the sparse correspondence
comprises:
summarizing the 3D point clouds of the data volume and the reference volume based on spatial pooling; and
computing embedded points from the summarized 3D point clouds based on non-linear mappings to generate a correspondence field between the data volume and the reference volume.
1 1 . The method of claim 10, further comprising:
calculating an alignment error between the data volume and the reference volume based on the non-linear mappings; and
resetting the reference volume to comprise the current data mesh frame in response to identifying that the alignment error between the data volume and the reference volume exceeds a threshold value.
12. The method of claim 9, further comprising:
solving for non-rigid alignment parameters to warp the reference volume to a pose of the current data mesh frame.
13. The method of claim 9, wherein computing the dense correspondence
between the data volume and the reference volume comprises:
aligning the data volume to the reference volume to generate an
embedded deformation graph comprising a plurality of vertices; and aligning the reference volume to data volume based on the embedded deformation graph to identify correspondences between the reference volume and the data volume.
14. The method of claim 13, further comprising representing a color value of each vertex of the data volume and a color value of each corresponding vertex of the reference volume as a single intensity value.
15. The method of claim 9, wherein computing the sparse correspondence
comprises computing an affinity matrix encoding a similarity between each
3D point of the 3D point clouds of the data volume and the reference volume.
16. An electronic device [100] comprising:
at least one depth camera [102] to capture depth data [105] of an
environment of the electronic device; and
a processor [1 10] to:
compute a current data mesh frame [1 1 17] comprising a three- dimensional (3D) point cloud of the environment of the electronic device based on at least one depth data frame captured at the at least one depth camera;
maintain a data volume [120] comprising the current data mesh frame;
maintain a reference volume [125] comprising a plurality of fused data mesh frames based on previously captured depth data frames and color data frames;
compute a sparse correspondence between the data volume and the reference volume based on spectral embedding; and estimate a current pose of at least one object in the environment based on the sparse correspondence.
The electronic device of claim 16, wherein the processor is to compute the sparse correspondence based on:
summarizing the 3D point clouds of the data volume and the reference volume based on spatial pooling; and
computing embedded points from the summarized 3D point clouds based on non-linear mappings to generate a correspondence field between the data volume and the reference volume.
18. The electronic device of claim 17, wherein the processor is further to:
calculate an alignment error between the data volume and the reference volume based on the non-linear mappings; and
reset the reference volume to comprise the current data mesh frame in response to identifying that the alignment error between the data volume and the reference volume exceeds a threshold value.
19. The electronic device of claim 16, wherein the processor is further to:
solve for non-rigid alignment parameters to warp the reference volume to a pose of the current data mesh frame.
20. The electronic device of claim 16, wherein the processor is further to
compute a dense correspondence between the data volume and the reference volume based on:
aligning the data volume to the reference volume to generate an embedded deformation graph comprising a plurality of vertices; and aligning the reference volume to data volume based on the embedded deformation graph to identify correspondences between the reference volume and the data volume.
Applications Claiming Priority (3)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US201762513176P | 2017-05-31 | 2017-05-31 | |
US15/994,471 US10937182B2 (en) | 2017-05-31 | 2018-05-31 | Non-rigid alignment for volumetric performance capture |
PCT/US2018/043626 WO2018223152A1 (en) | 2017-05-31 | 2018-07-25 | Non-rigid alignment for volumetric performance capture |
Publications (1)
Publication Number | Publication Date |
---|---|
EP3631760A1 true EP3631760A1 (en) | 2020-04-08 |
Family
ID=63254776
Family Applications (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
EP18756320.0A Withdrawn EP3631760A1 (en) | 2017-05-31 | 2018-07-25 | Non-rigid alignment for volumetric performance capture |
Country Status (3)
Country | Link |
---|---|
US (1) | US10937182B2 (en) |
EP (1) | EP3631760A1 (en) |
WO (1) | WO2018223152A1 (en) |
Families Citing this family (8)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US10460512B2 (en) * | 2017-11-07 | 2019-10-29 | Microsoft Technology Licensing, Llc | 3D skeletonization using truncated epipolar lines |
CN109409792B (en) * | 2018-09-25 | 2020-02-04 | 深圳蓝胖子机器人有限公司 | Object tracking detection method and system based on point cloud |
EP3712784A3 (en) * | 2019-03-20 | 2020-11-04 | Tata Consultancy Services Limited | System and method for signal pre-processing based on data driven models and data dependent model transformation |
US11562541B2 (en) * | 2019-09-13 | 2023-01-24 | Board Of Regents, The University Of Texas System | Topology-change-aware volumetric fusion for real-time dynamic 4D reconstruction |
WO2021202803A1 (en) | 2020-03-31 | 2021-10-07 | Sony Group Corporation | Volumetric capture and mesh-tracking based machine learning |
WO2022146772A1 (en) * | 2020-12-30 | 2022-07-07 | Snap Inc. | Flow-guided motion retargeting |
CN113804183B (en) * | 2021-09-17 | 2023-12-22 | 广东汇天航空航天科技有限公司 | Real-time topographic mapping method and system |
US20230154013A1 (en) * | 2021-11-18 | 2023-05-18 | Volkswagen Aktiengesellschaft | Computer vision system for object tracking and time-to-collision |
Family Cites Families (8)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US7221366B2 (en) * | 2004-08-03 | 2007-05-22 | Microsoft Corporation | Real-time rendering system and process for interactive viewpoint video |
KR101697184B1 (en) * | 2010-04-20 | 2017-01-17 | 삼성전자주식회사 | Apparatus and Method for generating mesh, and apparatus and method for processing image |
US9552668B2 (en) * | 2012-12-12 | 2017-01-24 | Microsoft Technology Licensing, Llc | Generation of a three-dimensional representation of a user |
FR3023155A1 (en) * | 2014-07-07 | 2016-01-08 | Inst Nat Rech Inf Automat | SYSTEM AND METHOD FOR THREE DIMENSIONAL IMAGING IN DEPTH |
US20170308736A1 (en) * | 2014-10-28 | 2017-10-26 | Hewlett-Packard Development Company, L.P. | Three dimensional object recognition |
US9393697B1 (en) * | 2015-04-02 | 2016-07-19 | Disney Enterprises, Inc | System and method using foot recognition to create a customized guest experience |
US10157477B2 (en) * | 2016-04-27 | 2018-12-18 | Bellus 3D, Inc. | Robust head pose estimation with a depth camera |
US10635930B2 (en) * | 2017-02-24 | 2020-04-28 | Siemens Healthcare Gmbh | Patient position control for scanning |
-
2018
- 2018-05-31 US US15/994,471 patent/US10937182B2/en active Active
- 2018-07-25 WO PCT/US2018/043626 patent/WO2018223152A1/en active Application Filing
- 2018-07-25 EP EP18756320.0A patent/EP3631760A1/en not_active Withdrawn
Also Published As
Publication number | Publication date |
---|---|
US10937182B2 (en) | 2021-03-02 |
WO2018223152A1 (en) | 2018-12-06 |
US20180350088A1 (en) | 2018-12-06 |
Similar Documents
Publication | Publication Date | Title |
---|---|---|
US10937182B2 (en) | Non-rigid alignment for volumetric performance capture | |
CN108335353B (en) | Three-dimensional reconstruction method, device and system of dynamic scene, server and medium | |
Grassal et al. | Neural head avatars from monocular rgb videos | |
US10553026B2 (en) | Dense visual SLAM with probabilistic surfel map | |
US11145075B2 (en) | Depth from motion for augmented reality for handheld user devices | |
CN106940704B (en) | Positioning method and device based on grid map | |
CN105701857B (en) | Texturing of 3D modeled objects | |
CN107980150B (en) | Modeling three-dimensional space | |
JP2023082038A (en) | Method and system for using convolution image conversion to perform simultaneous position determination and mapping | |
US9269003B2 (en) | Diminished and mediated reality effects from reconstruction | |
US11210804B2 (en) | Methods, devices and computer program products for global bundle adjustment of 3D images | |
KR20210042942A (en) | Object instance mapping using video data | |
US9208563B2 (en) | Method for determining a parameter set designed for determining the pose of a camera and/or for determining a three-dimensional structure of the at least one real object | |
CN106846467B (en) | Entity scene modeling method and system based on optimization of position of each camera | |
KR20210119417A (en) | Depth estimation | |
US10740986B2 (en) | Systems and methods for reconstructing a moving three-dimensional object | |
KR20210058686A (en) | Device and method of implementing simultaneous localization and mapping | |
US11948310B2 (en) | Systems and methods for jointly training a machine-learning-based monocular optical flow, depth, and scene flow estimator | |
CN112967340A (en) | Simultaneous positioning and map construction method and device, electronic equipment and storage medium | |
KR20180035359A (en) | Three-Dimensional Space Modeling and Data Lightening Method using the Plane Information | |
US11069121B2 (en) | Methods, devices and computer program products for creating textured 3D images | |
EP3593323B1 (en) | High speed, high-fidelity face tracking | |
CN110785790A (en) | Non-rigid alignment of volumetric performance capture | |
KR102181832B1 (en) | Apparatus and method for 4d image reconstruction | |
US20240144595A1 (en) | 3d scene reconstruction with additional scene attributes |
Legal Events
Date | Code | Title | Description |
---|---|---|---|
PUAI | Public reference made under article 153(3) epc to a published international application that has entered the european phase |
Free format text: ORIGINAL CODE: 0009012 |
|
17P | Request for examination filed |
Effective date: 20191129 |
|
AK | Designated contracting states |
Kind code of ref document: A1Designated state(s): AL AT BE BG CH CY CZ DE DK EE ES FI FR GB GR HR HU IE IS IT LI LT LU LV MC MK MT NL NO PL PT RO RS SE SI SK SM TR |
|
AX | Request for extension of the european patent |
Extension state: BA ME |
|
STAA | Information on the status of an ep patent application or granted ep patent |
Free format text: STATUS: THE APPLICATION HAS BEEN WITHDRAWN |
|
18W | Application withdrawn |
Effective date: 20200616 |
|
P01 | Opt-out of the competence of the unified patent court (upc) registered |
Effective date: 20230519 |