CN116671065A - Hybrid messaging neural network and personalized page rank graph convolutional network model - Google Patents
Hybrid messaging neural network and personalized page rank graph convolutional network model Download PDFInfo
- Publication number
- CN116671065A CN116671065A CN202180069234.XA CN202180069234A CN116671065A CN 116671065 A CN116671065 A CN 116671065A CN 202180069234 A CN202180069234 A CN 202180069234A CN 116671065 A CN116671065 A CN 116671065A
- Authority
- CN
- China
- Prior art keywords
- node
- nodes
- aggregator
- seed
- neural network
- Prior art date
- Legal status (The legal status is an assumption and is not a legal conclusion. Google has not performed a legal analysis and makes no representation as to the accuracy of the status listed.)
- Pending
Links
- 238000013528 artificial neural network Methods 0.000 title claims abstract description 118
- 238000000034 method Methods 0.000 claims abstract description 69
- 238000004458 analytical method Methods 0.000 claims abstract description 18
- 239000003550 marker Substances 0.000 claims abstract description 14
- 230000004931 aggregating effect Effects 0.000 claims abstract description 9
- 238000012545 processing Methods 0.000 claims description 49
- 230000006870 function Effects 0.000 claims description 14
- 235000008694 Humulus lupulus Nutrition 0.000 claims description 10
- 230000000875 corresponding effect Effects 0.000 description 50
- 230000002776 aggregation Effects 0.000 description 45
- 238000004220 aggregation Methods 0.000 description 45
- 238000004891 communication Methods 0.000 description 13
- 238000001514 detection method Methods 0.000 description 13
- 238000009826 distribution Methods 0.000 description 8
- 238000010586 diagram Methods 0.000 description 7
- 230000000694 effects Effects 0.000 description 6
- 238000005096 rolling process Methods 0.000 description 4
- 230000006399 behavior Effects 0.000 description 3
- 230000008859 change Effects 0.000 description 3
- 230000003287 optical effect Effects 0.000 description 3
- 239000003795 chemical substances by application Substances 0.000 description 2
- 238000007796 conventional method Methods 0.000 description 2
- 235000014510 cooky Nutrition 0.000 description 2
- 238000005516 engineering process Methods 0.000 description 2
- 230000006872 improvement Effects 0.000 description 2
- 238000003860 storage Methods 0.000 description 2
- 241000700605 Viruses Species 0.000 description 1
- 230000009471 action Effects 0.000 description 1
- 238000013459 approach Methods 0.000 description 1
- 238000003491 array Methods 0.000 description 1
- 230000005540 biological transmission Effects 0.000 description 1
- 230000001413 cellular effect Effects 0.000 description 1
- 238000004590 computer program Methods 0.000 description 1
- 238000010276 construction Methods 0.000 description 1
- 125000004122 cyclic group Chemical group 0.000 description 1
- 230000001351 cycling effect Effects 0.000 description 1
- 230000001934 delay Effects 0.000 description 1
- 238000009499 grossing Methods 0.000 description 1
- 230000036541 health Effects 0.000 description 1
- 230000003993 interaction Effects 0.000 description 1
- 238000010801 machine learning Methods 0.000 description 1
- 239000011159 matrix material Substances 0.000 description 1
- 230000007246 mechanism Effects 0.000 description 1
- 238000012986 modification Methods 0.000 description 1
- 230000004048 modification Effects 0.000 description 1
- 238000012806 monitoring device Methods 0.000 description 1
- 230000008569 process Effects 0.000 description 1
- 230000009467 reduction Effects 0.000 description 1
- 230000004044 response Effects 0.000 description 1
- 238000012360 testing method Methods 0.000 description 1
Classifications
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04L—TRANSMISSION OF DIGITAL INFORMATION, e.g. TELEGRAPHIC COMMUNICATION
- H04L63/00—Network architectures or network communication protocols for network security
- H04L63/14—Network architectures or network communication protocols for network security for detecting or protecting against malicious traffic
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06N—COMPUTING ARRANGEMENTS BASED ON SPECIFIC COMPUTATIONAL MODELS
- G06N3/00—Computing arrangements based on biological models
- G06N3/02—Neural networks
- G06N3/04—Architecture, e.g. interconnection topology
- G06N3/0464—Convolutional networks [CNN, ConvNet]
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06N—COMPUTING ARRANGEMENTS BASED ON SPECIFIC COMPUTATIONAL MODELS
- G06N3/00—Computing arrangements based on biological models
- G06N3/02—Neural networks
- G06N3/08—Learning methods
- G06N3/09—Supervised learning
Abstract
Methods and systems for classifying assets according to characteristics of individual entities and relationships of individual entities to assets using neural networks are disclosed herein. The method comprises the following steps: aggregating, at each aggregator node of the plurality of aggregator nodes, data regarding characteristics of each node in each of the plurality of remote neighbors; at each aggregator node of the plurality of aggregator nodes, updating the status of the aggregator node by assigning a weight to each feature of the corresponding remote neighborhood; at the seed node, updating a state of the seed node by performing a convolution analysis on each node in a local neighborhood around the seed node; and determining a marker of the seed node based on the state of the seed node.
Description
Technical Field
The present disclosure relates to neural network processing, and more particularly to analyzing characteristics of sites using hybrid messaging neural networks and graph rolling network models.
Background
Current techniques for analyzing large long range neural networks, such as messaging neural networks (message passing neural networks, MPNN), require deep neural networks with cyclic blocks (recirculation blocks) even for simple message scheduling. Because learning degrades with the size of subgraphs and the cycling of blocks in the network, current techniques result in overcomplete where different nodes appear similar or identical. In addition, analyzing large neural networks using conventional techniques requires long computation time and high power requirements. Accordingly, new techniques for analyzing neural networks are desired.
Disclosure of Invention
The system maintains a network of nodes and edges, each node representing an asset (asset) corresponding to a content source (e.g., a website or domain). The node network includes a central seed node that is analyzed and one or more remote neighbors. Each remote neighborhood includes an aggregator node that aggregates and weights data about the features of each node in the corresponding neighborhood using a linear weighting method.
The seed node performs a convolution analysis on the local neighborhood including each aggregator node. The system then classifies and marks the seed node and the asset and/or content source associated with the seed node based on the output of the convolution analysis.
One example embodiment of these techniques is a method of classifying assets in terms of characteristics of individual entities and relationships of individual entities to assets using a neural network configured to maintain a network of nodes including a plurality of nodes and edges, each node of the plurality of nodes representing a respective asset of a plurality of assets corresponding to a plurality of content sources. The method comprises the following steps: aggregating, by the one or more processors, data regarding characteristics of each node in each of a plurality of remote neighbors at each of a plurality of aggregator nodes in the node network, wherein each remote neighbor corresponds to an aggregator node in the plurality of aggregator nodes, a neighbor is a subset of nodes surrounding the aggregator node within a predefined distance, and a remote neighbor is a node neighbor that is separated from a seed node in the plurality of nodes by at least two intermediate nodes; updating, by the one or more processors, at each of the plurality of aggregator nodes, a state of the aggregator node by assigning a weight to each feature of the corresponding remote neighborhood; updating, by the one or more processors, at the seed node, a state of the seed node by performing a convolution analysis on each node in a local neighborhood around the seed node, the local neighborhood including each aggregator node of the plurality of aggregator nodes; and determining, by the one or more processors, a marker of the seed node based on the state of the seed node.
Another example embodiment of these techniques is a system comprising processing hardware and a memory storing computer-executable instructions configured to implement the above-described methods.
Drawings
FIG. 1A is a block diagram of an example system for performing machine learning using a hybrid messaging neural network and personalized page rank (MPNN-PPR) graph rolling technique for a neural network including a plurality of network nodes;
FIG. 1B is a block diagram of an architecture of a computer system on which one or more network nodes may run;
FIG. 2 illustrates an example node network including a local node neighborhood, aggregator node, and seed node, which may be implemented in the systems and devices of FIGS. 1A-1B;
FIG. 3 is a block diagram of an example neural network implementing a hybrid MPNN-PPR graph convolution technique to label seed nodes;
FIG. 4A is a block diagram of an example neural network implementing messaging scheduling to label seed nodes;
FIG. 4B illustrates a messaging schedule to be implemented in the example neural network of FIGS. 3 and 4A; and
FIG. 5 is a flowchart of an example method implemented on the neural network of FIG. 3 to perform a hybrid MPNN-PPR graph convolution to determine a label for a seed node by aggregating data of a neighborhood of nodes at an aggregator node and performing the convolution at the aggregator node.
Detailed Description
The data processing server, client device, content provider device, and/or publisher device implement the techniques of this disclosure to implement and maintain a hybrid messaging neural network and a personalized page rank (personalized page ranking, PPR) graph rolling network. The data processing server uses the hybrid neural network to analyze an asset, such as a website bound to a seed node, and based on the analysis, determines whether to tag the asset as potentially malicious and/or dangerous.
In particular, referring first to fig. 1A, an example content tagging system 100 for maintaining the integrity of content distribution among a plurality of computing devices includes: data processing server 110, client device 115, content provider 120, and content publisher 125, all communicatively coupled via network 105. In some implementations, the data processing server 110 may include a database 118 and a plurality of logic modules, such as a violation detection module 112, a node aggregation module 114, and a marker classifier module 116.
The data processing server 110 includes at least one processor and memory. The memory stores computer-executable instructions that, when executed by the processor, cause the processor to perform one or more of the operations described herein. Depending on the implementation, the processor may include any one or combination of microprocessors, application Specific Integrated Circuits (ASICs), field Programmable Gate Arrays (FPGAs), and the like. Similarly, the memory may comprise any electronic, optical, magnetic, or any other storage or transmission device capable of providing program instructions to the processor. The memory may also include any or all of a floppy disk, CD-ROM, DVD, magnetic disk, memory chip, ASIC, FPGA, read-only memory (ROM), random Access Memory (RAM), electrically erasable ROM (EEPROM), erasable Programmable ROM (EPROM), flash memory, optical media, or any other suitable memory from which a processor can read instructions. The instructions may include code from any suitable computer programming language. Although not shown in fig. 1A, data processing server 110 may include and/or be communicatively coupled to one or more computing devices or servers capable of performing various functions.
The network 105 may be and/or include a computer network, such as the internet, a Local Area Network (LAN), a Wide Area Network (WAN), a metropolitan area network, one or more intranets, a satellite network, a cellular network, an optical network, other types of data networks, or a combination thereof. The data processing server 110 is capable of communicating with one or more content provider computing devices 115, one or more content publisher computing devices 120, or one or more client devices 125 via the network 105. Network 105 may include any number of network devices such as gateways, switches, routers, modems, repeaters, wireless access points, and the like. The network 105 may also include computing devices such as computer servers. The network 105 may also include any number of hardwired and/or wireless connections.
One or more content provider computing devices 115 are and/or include computer servers, personal computers, handheld devices, smart phones, or other computing devices operated by content provider entities (e.g., advertisers or agents thereof). One or more content provider computing devices 115 may provide content (such as text content, image content, video content, animation content, software program content, content items and/or uniform resource locators, and other types of content) to data processing server 110 for display on an information resource. In particular, one or more content provider computing devices 115 of a given content provider may be a source of content items or content for generating content items for that content provider. The content items may be used for display in information resources presented on the client device 125 (e.g., websites, web pages of search results, client applications, gaming applications or platforms, open source content sharing platforms or social media platforms, etc.).
The data processing server 110 may provide one or more interfaces accessible via the content provider computing device 115 to allow content provider entities to, for example, generate corresponding content provider accounts or generate corresponding activities. The user interface may allow the content provider entity to upload the corresponding content to the data processing server 110 or other remote system, or to provide corresponding payment information. In general, the user interface may allow each content provider entity to indicate the respective asset for distributing the entity's content to the client device 125. As used herein, an asset of a content provider entity may include a content provider account, a content distribution campaign, payment information, a domain name, a host, a website or web page including a landing page, a content item (e.g., a software program, an image, a video clip, text, an animation clip, etc.), or a resource accessible from a website, domain, host, and other asset of a content provider.
The content publisher computing device 120 may include a server or other computing device operated by a content publishing entity to provide primary content for display via the network 105. The primary content may include websites, web pages, client applications, game content, or social media content for display on the client device 125, and the like. The primary content may include search results provided by a search engine. The pages, video clips, or other units of primary content may include executable instructions, such as instructions associated with a content (or advertisement) time slot, that cause the client device 125 to request third party content from the data processing server 110 or other remote system when the primary content is displayed on the client device.
The client device 125 may include a computing device configured to obtain and display primary content provided by the content publisher computing device 120 as well as content (e.g., third party content items such as text, software programs, images, and/or video) provided by the content provider computing device 115. The client device may request and receive such content via the network 105. Client device 125 may include a desktop computer, a laptop computer, a tablet device, a smart phone, a personal digital assistant, a mobile device, a consumer computing device, a server, a digital video recorder, a set-top box, a smart television, a video game console, or any other computing device capable of communicating and consuming media content via network 105. Although fig. 1A shows a single client device 125, the system 100 may include multiple client devices 125 served by the data processing server 110.
In some implementations, while the user of the client device 125 may select which primary content to access, the client device does not have much control over the content provided by the content provider computing device 115 because the data processing server 110 automatically selects such content. The third party content provider or corresponding content provider computing device 115 may expose the client device 125 to inappropriate or undesirable content, data privacy violations, or network security threats, among other risks. To protect the client device 125 from such risks and to preserve the integrity of third-party content distribution, the data processing server 110 may set policies to be complied with by the third-party content provider and/or the corresponding content provider computing device 115. The data processing server 110 may also employ mechanisms to enforce the policies, for example, by detecting violations of policies or tags associated with policies and preventing distribution of content associated with policy violatiors or certain policy tags. Upon detecting a policy violation or policy tag associated with an asset, the data processing server 110 may identify all of the assets associated with the source of the policy violation or the source of the asset associated with the policy tag. Data processing server 110 may then tag such assets as malicious, suspicious, and/or blocked, for example.
The data processing server 110 may include a third party content placement system, such as an advertisement server or advertisement placement system. The data processing server 110 also includes a plurality of logic modules. In some such implementations, the data processing server 110 includes a violation detection module 112, a node aggregation module 114, a tag classifier module 116, and a database 118. Depending on the implementation, each of violation detection module 112, node aggregation module 114, and marker classifier module 116 may be implemented as a software module, a hardware module, or a combination of both. For example, each of these modules may include a processing unit, server, virtual server, circuit, engine, agent, appliance, or other logic device such as a programmable logic array configured to communicate with database 118 and/or other computing device via network 105. The computer-executable instructions of the data processing server 110 may include instructions that, when executed by one or more processors, cause the data processing server 110 to perform the operations discussed below with respect to the violation detection module 112, the node aggregation module 114, and the marker classifier module 116, or a combination thereof.
Database 118 may maintain a network of nodes that includes a plurality of nodes and edges that connect corresponding node pairs. Each node of the plurality of nodes may represent a corresponding asset of a plurality of assets of a plurality of content providers or content sources. The database may use one or more data structures (e.g., trees, linked lists, tables, strings, or a combination thereof) to maintain the network of nodes. The database may use a network of nodes (or one or more data structures) to track assets used in distributing content to the client devices 125. The node network may be a heterogeneous node network including nodes of different types or nodes corresponding to different types of assets. For example, the plurality of assets represented by the nodes of the node network may include at least one asset of a first entity type and at least one asset of a second entity type different from the first entity type. The database may maintain a data structure indicating policies and corresponding flags. Depending on the implementation, the entity type refers to the category type of asset that the system 100 analyzes and/or potentially analyzes. For example, entity types may include web pages, clients, media content elements, and the like. The system 100 may also categorize the nodes representing the assets according to entity type.
Violation detection module 112 may detect, for example, a violation of a policy tag or policy by a third-party content provider, a corresponding content provider computing device 115, or a corresponding asset to data processing server 110. In some implementations, the policy violation module 112 relies on feedback from the client device 125 and/or other computing devices (e.g., computing devices associated with the data processing server 110) that report malicious or fraudulent behavior and/or behavior that is otherwise not in compliance with one or more policies associated with a given asset. Malicious, fraudulent, or otherwise unacceptable actions may include, for example, malware distribution, fraudulent redirection (snagging), or disguising (cloaking) of third-party content providers and/or corresponding assets, and other unacceptable practices. Content items, landing pages, or other resources from malicious content sources (e.g., third-party content providers or corresponding hosts or domains) may cause the client device 125 to download malware by accessing and/or attempting to access the content items, landing pages, or other resources.
Fraudulent redirection occurs when the landing page is configured to automatically redirect the client device 125 to other pages that the client device 125 does not intend to access. For example, the client device 125 may receive a content item from the data processing server 110 that includes a link to a landing page related to the subject of the content item. However, when interacting with the link, the login page may redirect the client device 125 to some other page associated with offensive or inappropriate pornography, for example.
Disguising is the approach of presenting different content or URLs to client device 125 and a computing device associated with the content distribution system (e.g., data processing server 110 or search engine). The host, website, or web page of the rogue content source may include executable instructions to check whether the IP address of a given computing device is associated with the client device 125 or content distribution system, and to determine which content or URL to provide to the computing device based on the check result. In this way, the host, website, or web page may present content to the client device 125 that is different from what is declared to the data processing server 110.
In some implementations, a tester associated with data processing server 110 tests various assets for any practices or activities associated with the policy flags or policies of data processing system 110 and reports any relevant policy flags or violations to violation detection module 112. In further implementations, violation detection module 112 may automatically detect relevant policy tags (e.g., policy tags applied to a given asset). For example, violation detection module 112 may check whether a website and/or landing page associated with the content provider includes malware. The violation detection module may then identify a set of attributes corresponding to instructions that perform fraudulent redirection or examine the IP address to perform masquerading. Assets that include such software instructions can violate the policies of the data processing server 110, even if they are merely attempted to be executed and/or have not been executed to fraudulently redirect or disguise. In some implementations, when a policy tag associated with a given asset is detected, the violation detection module 112 provides an indication of the asset or a characteristic of the asset to the node aggregation module 114 or to the tag classifier module 116.
The node aggregation module 114 may identify nodes (referred to herein as seed nodes) in the node network that are associated with (or mapped to) assets (e.g., that are involved in or can violate policies) that have policy tags. The identified node (or seed node) may be a node representing an asset identified as being associated with a policy tag or another node corresponding to, for example, an asset of a given type that is related to the asset identified as being associated with a policy tag. Further, the seed nodes are associated with one or more aggregator nodes that aggregate information about particular attributes, features, entity types, or other such categories. For example, the seed node may be associated with a customer aggregator node that aggregates information about features of customers accessing the website and a website (or site) aggregator node that aggregates information about features of the website. The aggregator node aggregates and merges hidden states (i.e., inputs to the network node at a given time step) from multiple sources within the aggregator node's local neighborhood.
In some implementations, the hidden state information collected by the aggregator node is information related to the seed node and/or the asset represented by the seed node. For example, the hidden state information may include information such as a website domain linked to the asset, public cookies from a user accessing the asset, and/or cookie information.
The node aggregation module 114 may cause the aggregator node to aggregate information related to a particular entity type. In particular, the aggregation module 114 may configure the aggregator nodes to aggregate data of the predefined types of entities and may initiate an aggregation process for each aggregator node to aggregate data from each node in the overall network having information related to the predefined entity type and/or information of the predefined entity type. For example, the aggregation module 114 may configure the first aggregator node to aggregate data on the website from each node corresponding to the client device. However, it is worth noting that traversing all nodes of a large network of nodes may be computationally inefficient and may result in delays associated with analysis of the seed nodes. Thus, each aggregation node may limit aggregation to the local neighborhood of the aggregation node and/or to particular entity types to reduce processing runtime and increase computational efficiency.
In some implementations, the local neighborhood is a neighborhood of nodes that are no more than two hops away (i.e., one intermediate node) from the aggregator node. In other implementations, the local neighborhood is a neighborhood of nodes that are no more than three, four, or five hops away from the aggregator node. In further implementations, the user determines the size of the local neighborhood of the node aggregation module. Since the complexity of the neural network increases greatly with increasing number of hops, the user may prefer to choose a smaller local neighborhood size where possible. In further implementations, the size of the local neighborhood and/or the remote neighborhood may be determined based on a convolution window in which the system performs convolution analysis, as will be described in more detail below with reference to fig. 3-5. The local neighborhood may be any node within the convolution window, while the remote neighborhood may be any node outside the convolution window.
Each asset may have a respective identifier associated with the entity type (also referred to as an entity identifier), and each node in the network of nodes may include (e.g., as metadata or as an identifier of the node itself) an identifier of the corresponding asset. In some implementations, the node aggregation module 114 searches for any node in the network of nodes that has an identifier associated with the respective entity type. In such an implementation, node aggregation module 114 then causes the corresponding aggregator node to begin collecting data from nodes that include identifiers associated with the relevant entity types. In some implementations, the database 118 includes a data structure that maps entity identifiers to identifiers of corresponding nodes in the network of nodes. The node aggregation module 114 may use the data structure to locate nodes corresponding to related entity types. In other implementations, once the node aggregation module 114 identifies a node having an associated entity type, the associated aggregator node may use links and/or edges connected to the node to identify other nodes corresponding to the entity type in question.
In some implementations, the node aggregation module 114 identifies a set and/or combination of two or more attributes of the seed node (or corresponding asset) identified as being directly associated with the policy tag. The node aggregation module 114 may identify a set of attributes for identifying other assets and corresponding nodes that belong to the same owner or content source as the asset (or corresponding seed node) identified as being directly associated with the policy tag. For example, the fact that two domains are connected to the same content provider account, the same IP address, or the same resource does not necessarily mean that they belong to the same content source (or actor behind the activity or behavior associated with the policy tag). However, in some implementations, a set of domains (or other assets) or corresponding nodes are determined to be created, provided, or used by the same content source when they share a combination of two or more independent attributes. In some such implementations, the node aggregation module 114 may create, identify, and/or designate aggregator nodes for each attribute and/or each set of attributes to identify similar nodes for aggregation. In further implementations, the node aggregation module 114 uses an attribute that is an entity type and aggregates information based on the attribute.
The node aggregation module 114 may use information or data from the node network to identify a set of attributes. In particular, the node aggregation module 114 may identify the set of attributes based on edges, links, or immediate neighbors of the seed node and/or the aggregator node. The node aggregation module 114 may identify attributes using neighboring nodes within the local neighborhood of the seed node and/or the aggregator node. In addition, the node aggregation module 114 may use metadata (if any) associated with the seed nodes to identify attributes. For example, the attributes of a website domain may include a content provider account, payment information, a login page, a data file, or any combination thereof associated with the website domain. The attributes of the content providing account may include a website domain, payment information, a login page, a data file, or any combination thereof associated with the content providing account. The node aggregation module 114 may also identify attributes based on a set of predefined attribute types.
In some implementations, the node aggregation module 114 causes the aggregator node to aggregate data based on the personalized page rank of the asset. The personalized page rank is an asset rank based on characteristics such as the number of links, the frequency of links, and the quality of the asset linked to from the analyzed asset. Depending on the implementation, as described in more detail below with reference to fig. 5, the node aggregation module 114 and/or another component of the system 100 determine a personalized page rank using a topic-based or about page rank algorithm.
In some implementations, the node aggregation module 114 causes the aggregator node to aggregate the data by generating a vector of corresponding entity types according to the following equation: sigma (sigma) i r i f T (x i ) Wherein r is i Personalized page rank, x, about the starting node i to the seed node being analyzed/categorized i Is characteristic of node i, f T Is an embedded neural network specific to learning of the entity type T. Depending on the implementation, the node aggregation module 114 limits the number of nodes analyzed by each aggregator node to a predetermined or user-set number of nodes k. The nodes may be the top k nodes ranked according to the personalized page. Further, in some implementations, the node aggregation module 114 assigns a weight to each feature and/or attribute of the node. In further implementations, the node aggregation module 114 assigns weights according to an influence function that describes the effect of the node y on another node x. For example, the effect of node x on another node y can be expressed as an equationWhere y is an aggregator node and x is any node in the neighborhood of nodes around the aggregator node. In another aspectIn implementations, as described in more detail below with reference to fig. 5, the system 100 may additionally or alternatively assign weights based on personalized page rankings. In further implementations, the system 100 may perform a projection of learning to a common embedded space (i.e., aggregator node). The system 100 then creates an aggregate vector of aggregate weights by weighting the sum according to the personalized page rank to the source node (e.g., seed node or aggregator node).
The node aggregation module 114 may then update and/or cause the aggregator node to update the hidden state of the aggregator node in question. In various implementations outlined above, the node aggregation module 114 may update the hidden state based on weights of various attributes and/or features of the nodes from which the aggregation node aggregates data. Depending on the implementation, node aggregation module 114 may discard attributes and/or features having weights below a predetermined threshold. In some implementations, as described in more detail below with reference to fig. 5, the node aggregation module 114 updates the state of the aggregator nodes by generating a vector for each aggregator node.
In some implementations, the node aggregation module 114 considers only the k nodes that have the strongest relationships and/or correlations with the seed nodes. In further implementations, the user selects the value of k. In further implementations, the node aggregation module 114 selects the value of k based on a predetermined value or based on the size of the neural network. In further implementations, the node aggregation module 114 selects the value of k, but the user may overrule and/or change the value.
The tag classifier module 116 may store in one or more data structures an association between a seed node and a tag that is based on a first asset identified as being directly associated with a policy tag of a policy of the content distribution system. The tag classifier module 116 may use the tag to classify a first set of assets of the plurality of assets corresponding to the node network. For example, the tag classifier module 116 may use the tag to classify assets corresponding to the seed node into categories of rogue, malicious, suspicious, or blocked, and the like. In further implementations, the tag classifier module 116 may further use the tag to similarly classify assets associated with the aggregator node or other nodes in the node network. In further implementations, the tag classifier module 116 prevents or limits the provisioning (or providing) of one or more assets, such as content items of a data file, a landing page, or a tagged asset, to the client device 115.
Fig. 1B depicts a block diagram of an architecture of a computer system 150 on which one or more network nodes may run. The computer system 150 includes a communication interface 155, the communication interface 155 communicatively connected to the output device 152, the input device 154, the processor 156, and the memory 158. Computer system 150 is also connected to network 105 through communication interface 155. In some implementations, the network 105 is the same network as the network 105 of fig. 1A.
According to some implementations, computer system 150 may be employed to implement any of the computer systems and/or servers discussed herein, including server 110 and its components such as violation detection module 112, node aggregation module 114, and tag classification module 116. Computer system 150 may provide information for display via network 105. In some implementations, the computer system 150 includes one or more processors 156 communicatively coupled to a memory 158, one or more communication interfaces 155, one or more output devices 152 (e.g., one or more display units), and one or more input devices 154. In some implementations, the processor 156 is included in the data processing server 110 and/or other components of the server 110 such as the violation detection module 112, the node aggregation module 114, and the tag classification module 116.
In computer system 150, memory 158 may comprise any computer-readable storage medium and may store computer instructions, such as processor-executable instructions for implementing the various functions described herein for the respective system, as well as any data associated therewith, generated thereby, or received via a communication interface or input device, if present. In some implementations, the data processing server 110 as described above with reference to fig. 1A includes a memory 158 to store data structures and/or information related to, for example, a network of nodes. In some such implementations, the memory 158 includes a database 145. The processor 156 may execute instructions stored in the memory 158 and, in doing so, may also read from and/or write to memory various information that is processed and/or generated in accordance with the execution of the instructions.
The processor 156 of the computer system 150 may also be communicatively coupled to and/or control the communication interface 155 to send and/or receive various information in accordance with execution of the instructions. For example, the communication interface 155 may be coupled to a wired or wireless network, bus, and/or other communication component, and thus may allow the computer system 150 to send information to and/or receive information from other devices (e.g., other computer systems). In addition, one or more communication interfaces facilitate the flow of information between components of the system 150. In some implementations, the communication interface may be configured (e.g., via various hardware and/or software components) to provide a website as an access portal to at least some aspects of the computer system 150. Examples of communication interface 155 include a user interface (e.g., a web page) through which a user may communicate with data processing server 110.
For example, an output device 152 of the computer system 150 may be provided to allow a user to view and/or otherwise perceive various information related to the execution of the instructions. For example, an input device 154 may be provided to allow a user to manually adjust, make selections, enter data, and/or interact with the processor in any of a variety of ways during execution of the instructions. Additional information is also provided herein regarding the general-purpose computer system architecture that may be used with the various systems discussed herein.
Computing system 150 may include servers or computing devices of client device 115, content providing computing device 120, content publisher computing device 125, and/or data processing server 110. For example, the data processing server 110 may include one or more servers in one or more data centers or server farms. The client and server are typically remote from each other and typically interact through a communication network. The relationship of client and server arises by virtue of computer programs running on the respective computers and having a client-server relationship to each other. In some implementations, the server sends data (e.g., HTML pages) to the client device (e.g., to display data to and receive user input from a user interacting with the client device). Data generated at the client device (e.g., results of user interactions) may be received at the server from the client device.
FIG. 2 illustrates an example node network 200 including a local node neighborhood, aggregator node, and seed node that may be implemented in the systems and devices of FIGS. 1A-1B. Network 200 is a neural network of nodes that includes at least a seed node 202, a plurality of aggregator nodes 204a-204d, and remote neighbors 206a-206d of the nodes.
In some implementations, each node in the network 200 represents an asset, such as a website, domain, media element, etc., that corresponds to a content source. In such an implementation, seed node 202 is the node analyzed and marked by system 100. Each aggregator node 204a-204d resides in a local neighborhood around the seed node. In some implementations, the aggregator nodes 204a-204d are aspects of the seed node 202 and/or reflect aspects of the seed node 202. In other words, aggregator nodes 204a-204d reflect and include particular characteristics, attributes, and/or features of seed node 202. In other implementations, the aggregator nodes 204a-204d aggregate only information from the remote neighbors 206a-206d. In such an implementation, as explained in more detail below with reference to FIG. 5, the information used to weight the nodes of the remote neighbors 206a-206d may be related to the seed node 202 rather than the aggregator nodes 204a-204 d.
Each node of the network 202 is connected to other nodes by one or more edges. Although FIG. 2 shows a strict hierarchy from seed node 202 to aggregator nodes 204a-204d and further from aggregator nodes 204a-204d to nodes in remote neighbors 206a-206d, this is for clarity of illustration. An actual network 200 may include a greater number of interconnections between nodes. For example, each node in remote neighborhood 206a-206d may be further connected to seed node 202 or indirectly via intermediate nodes, and system 100 may weight and/or calculate the personalized page rank using edges between the nodes in question, as described below with reference to FIG. 5. The edges shown in fig. 2 show the connections along which the overall analysis is performed. For example, as part of the convolution analysis, each aggregator node 204a-204d weights the characteristics of the nodes in the remote neighborhood 206a-206d and aggregates data about the weighted characteristics before passing the message to the seed node 202.
FIG. 3 illustrates a block diagram of an example neural network 300 implementing a hybrid MPNN-PPR graph rolling technique to label seed nodes. The exemplary neural network 300 includes a plurality of neural network blocks and hidden states. Each block labeled "h_x" represents a hidden state, and each block labeled "nn_x" represents a neural network block. Thus, each of blocks 302, 310, 312, and 314 is a hidden state block, while each of blocks 304, 306, and 308 is a neural network block corresponding to a hidden state. In some implementations, each hidden state block represents one or more characteristics of the associated node, such as customer data, site data, tag data, and the like.
The hidden state block 302 is a hidden block with respect to the marking characteristics of a given site. In some implementations, the flag is an indication of whether the site is malicious and/or contains malicious data (e.g., viruses or malware). In further implementations, the flag is an indication of whether the site corresponds to and/or links to a known malicious site. The hidden state block 302 corresponds to and defines the characteristics of a neural network block 304, the neural network block 304 being a node representing an actual site. As shown in fig. 3, the neural network block 304 updates the hidden state block 302 with information from the various aggregator nodes in the network, through the connection edges between the hidden state block 302 and the neural network block 304.
Each of the neural network block 306 and the neural network block 308 functions as an aggregator node for the neural network block 304. For example, neural network block 306 is a neural network block that aggregates information related to site markers and to clients (e.g., sites visited in the past, links followed to the site, site-related error reports and/or messages from client devices, etc.) via hidden state block 310. Similarly, the neural network block 308 is a neural network block that aggregates information related to site tags and related to sites (e.g., linked sites, information related to advertisements displayed on the sites, etc.) via the hidden state block 314. In addition, each of the neural network blocks 306 and 308 aggregates more general information related to the site via the hidden state block 312. In some implementations, the neural network block 304 associated with the site markers functions as a seed node, and each of the neural network blocks 306 and 308 functions as an aggregator node connected to the seed node.
After aggregating the relevant information from the associated hidden state blocks 310, 312, and 314, each of the neural network blocks 306 and 308 passes the information to the neural network block 304. In some implementations, the neural network block 304 forms a Message Passing Neural Network (MPNN) with each aggregator block within a local neighborhood of the aggregator blocks (e.g., neural network blocks 306 and 308) and receives messages from each aggregator block within the local neighborhood. In some such implementations, each aggregator block within the local neighborhood passes at least one message to the neural network block 304 before the neural network block 304 updates the hidden state 302 of the site's tag. In further implementations, the neural network block 304 also receives messages and/or information from other existing neural networks, such as a Graph Convolutional Network (GCN) 310. Depending on the implementation, the neural network block 304 may pull information from a local neighborhood that is more than a single hop (i.e., edge) away from the neural network block 302. For example, neural network blocks 306 and 308 may aggregate information from other aggregator nodes (not shown), and neural network block 304 may receive messages from other aggregator nodes outside of two hops, outside of three hops, or outside of any number of hops determined by a user and/or by a data processing server maintaining neural network 300. In implementations where the neural network block 304 receives messages from an existing GCN 310, the neural network block 304 may receive information from blocks more than three hops apart through convolution processing performed by seed nodes of the existing GCN 310.
Fig. 4A and 4B illustrate block diagrams of an example conventional neural network 400A implementing an example messaging schedule 400B to label seed nodes.
Much like the neural network 300 implementing the hybrid MPNN-PPR technique described herein, the conventional MPNN neural network 400A updates the marker hidden state block 402 by the neural network block 404 receiving information about the site in question. However, unlike neural network 300, neural network block 404 does not receive messages directly from a series of aggregator blocks, but rather uses the hidden state 412 of the site in question to update the tagged hidden state block 402, which hidden state 412 is updated by the neural network client site block alone. For messaging schedule 400B with multiple clients (e.g., client 1 426 and client 2 428) delivering messages to site 420 and continuing to tag 430, hidden state 412 for the site may need to be updated multiple times. For example, in the example neural network of 400A, the hidden state 412 of the site is updated twice for two clients. Specifically, the neural network block 417 pulling information about site and client 1 and the neural network block 419 pulling information about site and client 2 update the hidden states 416 and 418 of client 1 and client 2 blocks, respectively, each time resulting in an update of the hidden state 412 of the site.
Each neural network block 417 and 419 retrieves data about the hidden state of the associated customer (retrieving customer 1 from hidden state block 416 of neural network block 417 and customer 2 from hidden state block 418 of neural network block 419) and retrieves data from hidden state 412 of the site and updates the corresponding hidden states 416 and 418, respectively. The neural network block 414 then uses the site's previous hidden state data 412, as well as the updated hidden state of client 1 416 and the updated hidden state of client 2 418 to update the site's hidden state 412.
Comparing the hybrid MPNN-PPR neural network 300 with the conventional MPNN neural network 400A shows an improvement to network traffic and the functionality of the data processing servers that maintain the neural networks 300 and/or 400A. For example, each of the neural network blocks 306 and 308 delivers a single message to the seed node and neural network block 304 after aggregating hidden state information associated with the client and website at blocks 316 and 318, respectively. Further, the neural network 300 does not have recursive blocks, but rather includes a single neural network block 304 to update the labels and a single neural network block for the client (e.g., neural network block 306) and the site (e.g., neural network block 308), respectively.
In this way, the amount of resources required to manage the neural network 300 is reduced as compared to the conventional neural network 400A. Similarly, even for simple messaging schedules such as 400B, the resources required to maintain messaging in the neural network 300 are reduced. Specifically, the neural network passes two messages to the neural network block 304 (e.g., one message from each of the neural network blocks 306 and 308, respectively) as compared to four messages passed to the neural network block 404 (e.g., one message from each of the neural network blocks 417 and 419 to the neural network block 414 and two messages from the neural network block 414 to the neural network block 404, respectively). Since the neural network 300 adds more aggregator nodes based on the number of entity types rather than the number of actual entities, as the neural network 400A functions, the reduction in the number of messages delivered will improve better with the number of entities analyzed. For sufficiently complex neural networks, the technique of implementing the neural network 300 avoids excessive smoothing of node embeddings that appear the same to the network due to the number of nodes analyzed.
In addition, the data processing system maintaining neural network 300 has improved runtime and speed of operation as compared to the data processing system maintaining neural network 400A. By reducing the number of redundant and neural network blocks required, the data processing system is able to perform analysis on the seed nodes to determine the marker status faster than using conventional techniques. Thus, implementing a hybrid MPNN-PPR neural network architecture on a conventional MPNN architecture improves the operation of the data processing servers and/or other computing devices that maintain the neural network in question.
Furthermore, adding information from the remote neighborhood of the node to the analysis of the seed node improves performance. In particular, the accuracy-recall curve area under-the-curve (AUPRC) metric of the method may represent an improvement over other techniques. In some implementations, application of the present technology may increase the AUPRC by at least 10% (e.g., from 60% to 70%) over a conventional MPNN system. In other implementations, the AUPRC of the technology is at least 95%. In other words, analysis using the hybrid structure of the neural network described herein can correctly identify more than 95% of all positive instances of the applied marker (e.g., detect malicious downloads or other policy violations).
Referring next to fig. 5, a method 500 may be implemented in a neural network 200 of nodes implemented in a system such as system 100 having a data processing server 110, the data processing server 110 including a violation detection module 112, a node aggregation module 114, a marker classifier module 116, and a database 118. Although the method 500 is described below with respect to the neural network of nodes 200 and the system 100, the method 500 may be implemented in any similar neural network of nodes and/or system.
At block 502, the system 100 maintains a network of nodes. In some implementations, the node network is a node network similar to the network 200 shown in fig. 2. The node network includes a plurality of nodes and edges connecting pairs of nodes. Each node in the network represents an asset corresponding to a content source. For example, a particular node may represent an asset such as a third party content item, a login page, a resource, or any other similar asset that may be associated with a content policy. Similarly, a node in the network may represent an asset of the same content source, an asset of a different content source related to the content source (i.e., a content source directly linked from the original content source), or an asset of a content source related to the content source remotely (i.e., a content source that is multi-hop away from the original content source).
At block 504, the system 100 begins aggregating data regarding the characteristics of each node in each remote neighborhood. In some implementations, the system 100 aggregates data via one or more aggregator nodes 204a-204d, each associated with one of the remote neighbors. In further implementations, each aggregator node 204a-204d is associated with a particular asset or entity type. In such an implementation, each aggregator node generates a vector of corresponding entity types according to the following equation: sigma (sigma) i r i f T (x i ) Wherein r is i Personalized page rank, x, about the starting node i to the seed node being analyzed/categorized i Is characteristic of node i, f T Is an embedded neural network specific to learning of the entity type T. Depending onIn an implementation, the system 100 limits the number of nodes analyzed by each aggregator node to a predetermined or user-set number of nodes k. The nodes may be the top k nodes ranked according to the personalized page.
At block 506, the system 100 assigns a weight to each feature of the nodes in the corresponding remote neighborhood of each aggregator node. In some implementations, the system 100 may assign weights at the same time or substantially the same time (i.e., appear to a human observer to be at the same time). For example, the system 100 may send a message to each of the aggregator nodes with a schedule indicating when the node will assign weights to the features. In other implementations, the system 100 may assign weights at separate times or in real-time as nodes are added to the neural network and/or as characteristics of the nodes change. In some implementations, the system 100 assigns weights according to an influence function that describes the effect of the node y on another node x. For example, the effect of a node s on another node y can be expressed as an equation Where y is an aggregator node and x is any node in the neighborhood of nodes around the aggregator node.
In further implementations, the system 100 may additionally or alternatively assign weights based on personalized page rankings (and thus relevance) of nodes in the neighborhood. In some such implementations, the system 100 uses a push flow method (e.g., forward push method) to determine the personalized page rank of the node. In this way, the source node (e.g., aggregator node) pushes the probability mass along the edge to the target node (e.g., neighborhood node). Thus, the system 100 determines a personalized page rank of the target node above the source node. Thus, in such an implementation, the personalized page rank is an approximation of the personalized page rank and is not specialized based on the edge type. In other implementations, the system 100 uses a reverse push method to determine the personalized page rank of the node by pushing values back to the source node starting at each target node and along the edge.
In further implementations, the system 100 can perform a projection of learning to a common embedding space (e.g., aggregator node). The system 100 then creates an aggregate vector of aggregate weights by weighting the sum according to the personalized page rank to the source node. In some implementations, the source node is an aggregator node. In further implementations, the analyzed nodes (e.g., seed nodes) serve as source nodes for computing personalized page ranks, while the aggregator node instead aggregates the seed nodes with features related to particular entities. Thus, for a particular entity type, the aggregator node may act as an extension of the seed node.
At block 508, the system 100 updates the state of the aggregator node based on the weighted features of the corresponding remote neighborhood. In some implementations, the system 100 updates the state of the aggregator nodes by generating a vector for each aggregator node. Depending on the implementation, the aggregator node may represent one particular entity type. In this way, the system 100 may perform entity-specific embedding for remote nodes. In such an implementation, the seed node of system 100 learns a different projection for each entity type. In this way, the neural network 200 learns the relevant features and/or attributes from each entity type. Thus, the number of weights scales with the number of entity types rather than the number of entities. In some implementations, each entity type is represented by a separate aggregator node that collects and aggregates signals from each remote node in the neighborhood. In some implementations, the aggregate vector for each entity type T is Σ i r i f T (x i ) Wherein r is i Personalized page rank, x, about starting node i to seed node or aggregator node i Is characteristic of node i, f T Is an embedding of learning specific to the entity type T.
In some implementations, and all nodes in the graph of entity type T are covered. In other implementations, the system 100 limits the number of nodes to the top k nodes in terms of personalized page ranks. Thus, the system 100 considers only the nodes that have the strongest relationships and/or correlations with the seed nodes. In some implementations, the user selects the value of k. In further implementations, the system 100 selects the value of k based on a predetermined value or based on the size of the neural network. In further implementations, the system 100 selects the value of k, but the user may overrule and/or change the value.
At block 510, the system 100 performs a convolution analysis on each node in the local neighborhood around the seed node. In some implementations, the convolution analysis or convolution is in accordance with a Message Passing Neural Network (MPNN) system. In such implementations, each aggregator node communicates one or more messages to the seed node. For scalability and/or computational speed purposes, in some implementations, each aggregator node is limited to delivering a single message. In further implementations, the aggregator node is limited to delivering a single message, but may deliver additional messages in response to notifications from the seed node and/or other elements of the system 100 to perform the update after marking the seed node.
At block 512, the system 100 updates the state of the seed node. In some implementations, the system 100 updates the state of the seed node by collecting messages from the aggregator node and/or performing convolution analysis on the aggregator node. In this way, the system 100 may update the state of the seed node with a single vector, matrix, feature vector, etc. representing the analyzed data from the aggregator node.
At block 514, the system 100 determines a marker for the seed node based on the state of the seed node. In some implementations, the indicia is an indication of how secure the seed node (e.g., content source, website, media element, etc.). For example, the marker may indicate the seed node as unsafe or malicious due to the number or weight of malicious features and/or elements associated with other nodes in the graph. In further implementations, the indicia is an indication of a feature associated with the seed node, a type of seed node, ownership or relationship of the seed node, or any other similar indicia used in the art.
The following example list reflects various embodiments explicitly contemplated by the present disclosure:
example 1. A method of classifying assets in terms of characteristics of individual entities and relationships of individual entities to assets using a neural network configured to maintain a network of nodes including a plurality of nodes and edges, each node of the plurality of nodes representing a respective asset of a plurality of assets corresponding to a plurality of content sources, the method comprising: aggregating, by the one or more processors, data regarding characteristics of each node in each of a plurality of remote neighbors at each of a plurality of aggregator nodes in the node network, wherein each remote neighbor corresponds to an aggregator node in the plurality of aggregator nodes, a neighborhood is a subset of nodes surrounding the aggregator nodes within a predefined distance, and a remote neighborhood is a neighborhood of nodes separated from seed nodes in the plurality of nodes by at least two intermediate nodes; updating, by the one or more processors, a state of the aggregator node at each of the plurality of aggregator nodes by assigning a weight to each of the features of the corresponding remote neighborhood; updating, by the one or more processors, a state of the seed node by performing a convolution analysis at the seed node on each node in a local neighborhood around the seed node, the local neighborhood including each aggregator node of the plurality of aggregator nodes; and determining, by the one or more processors, a marker of the seed node based on the state of the seed node.
Example 2. The method of example 1, wherein the assigned weights are according to an impact function proportional to the personalized page rank from the first node to the second node.
Example 3 the method of example 2, wherein the influence function isWhere x is the first node in the remote neighborhood, each x i Is characteristic of node x, y is the second node in the remote neighborhood, each y j Is characteristic of node y.
Example 4. The method of example 3, wherein y is an aggregator node of the plurality of aggregator nodes.
Example 5 the method of any of the preceding examples, wherein each node in each remote neighborhood is outside a convolution window around the seed node.
Example 6. The method of any of the preceding examples, wherein each node in each remote neighborhood is no more than a predetermined number of hops away from the corresponding aggregator node.
Example 7. The method of any of the preceding examples, further comprising: limiting the supply of one or more assets.
Example 8. The method of any of the preceding examples, further comprising: a combination of two or more attributes of the seed node is identified.
Example 9. The method of example 8, wherein the state of the seed node is based on a combination of two or more attributes of the seed node.
Example 10 the method of any of the preceding examples, wherein each node of each of the remote neighbors shares an entity type with a corresponding aggregator node, and wherein each aggregator node has a different entity type.
Example 11. The method of example 10, wherein the seed node learns a different projection for each different entity type.
Example 12. The method of example 10 or 11, wherein the number of weights scales with the number of different entity types.
Example 13 the method of any of examples 10-12, wherein the vector of entity types is defined as Σ i r i f T (x i ) Wherein r is i Personalized page rank for a starting node i to a corresponding aggregator node corresponding to a remote neighborhood, each x i Is a feature of the plurality of features of node i, f T Is a neural network embedding specific to learning of entity type T.
Example 14 the method of example 13, wherein the vector is a sum over a subset of nodes, and wherein the subset of nodes are nodes of entity type T having a personalized page rank above a predetermined threshold.
Example 15. The method of example 13 or 14, wherein the personalized page rank is calculated using a push stream method.
Example 16 the method of any of the preceding examples, wherein the plurality of assets includes at least one asset of a first type and at least one asset of a second type, the status of the aggregator node indicates whether the aggregator node represents an asset of the first type or an asset of the second type, and the status of the seed node indicates whether the seed node represents an asset of the first type or an asset of the second type.
Example 17 the method of any of the preceding examples, further comprising: at least one message is communicated from each of the aggregator nodes to the seed node prior to determining the marking of the seed node.
Example 18. The method of any of the preceding examples, wherein an accuracy-recall curve area under-curve (AUPRC) metric of the method is at least 95%.
Example 19. A system for classifying assets in terms of characteristics of individual entities and relationships of individual entities to assets using a neural network configured to maintain a network of nodes including a plurality of nodes and edges, each node of the plurality of nodes representing a respective asset of a plurality of assets corresponding to a plurality of content sources, the system comprising: at least one processor and a memory storing computer-executable instructions that, when executed by the at least one processor, cause the at least one processor to: aggregating, at each aggregator node of the plurality of aggregator nodes in the node network, data regarding characteristics of each node in each of a plurality of remote neighbors, wherein each remote neighborhood corresponds to an aggregator node of the plurality of aggregator nodes, the neighborhood is a subset of nodes surrounding the aggregator node within a predefined distance, and the remote neighborhood is a neighborhood of nodes separated from the seed node by at least two intermediate nodes; updating, at each aggregator node of the plurality of aggregator nodes, a state of the aggregator node by assigning a weight to each feature of the features of the corresponding remote neighborhood; updating, at the seed node, a state of the seed node by performing a convolution analysis on each node in a local neighborhood around the seed node, the local neighborhood including each aggregator node of the plurality of aggregator nodes; and determining a marker of the seed node based on the state of the seed node.
Example 20 the system of example 19, wherein the assigned weights are according to an impact function proportional to the personalized page rank from the first node to the second node.
Example 21 the system of example 20, wherein the impact function isWhere x is the first node in the remote neighborhood, each x i Is characteristic of node x, y is the second node in the remote neighborhood, each y j Is characteristic of node y.
Example 22 the system of example 21, wherein y is an aggregator node of the plurality of aggregator nodes.
Example 23 the system of any of examples 19-22, wherein each node in each remote neighborhood is outside a convolution window around the seed node.
Example 24 the system of any of examples 19-23, wherein each node in each remote neighborhood is no more than a predetermined number of hops away from the corresponding aggregator node.
Example 25 the system of any of examples 19-24, wherein the computer-executable instructions, when executed by the at least one processor, further cause the at least one processor to: limiting the supply of one or more assets.
Example 26 the system of any of examples 19-25, wherein the computer-executable instructions, when executed by the at least one processor, further cause the at least one processor to: a combination of two or more attributes of the seed node is identified.
Example 27 the system of example 26, wherein the state of the seed node is based on a combination of two or more attributes of the seed node.
Example 28 the system of any of examples 19-27, wherein each node of each of the remote neighbors shares an entity type with a corresponding aggregator node, and wherein each aggregator node has a different entity type.
Example 29 the system of example 28, wherein the seed node learns a different projection for each different entity type.
Example 30 the system of examples 28 or 29, wherein the number of weights scales with the number of different entity types.
Example 31 the system of any of examples 28-30, wherein the vector of entity types is defined as Σ i r i f T (x i ) Wherein r is i Personalized page ranking with respect to a starting node i to a respective aggregator node corresponding to a remote neighborhood, each x i Is a feature of the plurality of features of node i, f T Is a neural network embedding specific to learning of entity type T.
Example 32 the system of example 31, wherein the vector is a sum over a subset of nodes, and wherein the subset of nodes are nodes of entity type T having a personalized page rank above a predetermined threshold.
Example 33. The system of examples 31 or 32, wherein the personalized page rank is calculated using a push stream method.
Example 34 the system of any of examples 19-33, wherein the plurality of assets includes at least one asset of a first type and at least one asset of a second type, the status of the aggregator node indicates whether the aggregator node represents an asset of the first type or an asset of the second type, and the status of the seed node indicates whether the seed node represents an asset of the first type or an asset of the second type.
Example 35 the system of any of examples 19-34, wherein the computer-executable instructions, when executed by the at least one processor, further cause the at least one processor to: at least one message is communicated from each of the aggregator nodes to the seed node prior to determining the marking of the seed node.
Embodiment 36. The system of any of embodiments 19-35, wherein the accuracy of the method-area under recall curve (AUPRC) metric is at least 95%.
The following additional considerations apply to the discussion above.
In some implementations, a "message" is used, which may be replaced with an "Information Element (IE)". In some implementations, an "IE" is used, which may be replaced with a "field". In some implementations, the "configuration" may be replaced with "multiple configurations" or configuration parameters.
The user device in which the techniques of this disclosure may be implemented may be any suitable device capable of wireless communication, such as a smart phone, tablet computer, laptop computer, mobile game console, point of sale (POS) terminal, health monitoring device, drone, camera, media stream dongle, or other personal media device, a wearable device such as a smart watch, a wireless hotspot, a femtocell, or a broadband router. Furthermore, in some cases, the user device may be embedded in an electronic system such as a head unit or Advanced Driver Assistance System (ADAS) of the vehicle. Further, the user device may operate as an internet of things (IoT) device or a Mobile Internet Device (MID). Depending on the type, the user device may include one or more general purpose processors, computer readable memory, user interfaces, one or more network interfaces, one or more sensors, and the like.
Certain embodiments are described in this disclosure as comprising logic or multiple components or modules. The modules may be software modules (e.g., code or machine readable instructions stored on a non-transitory machine readable medium) or hardware modules. A hardware module is a tangible unit capable of performing certain operations and may be configured or arranged in a particular manner. A hardware module may include special purpose circuits or logic permanently configured to perform certain operations (e.g., configured as a special purpose processor such as a Field Programmable Gate Array (FPGA) or an Application Specific Integrated Circuit (ASIC), a Digital Signal Processor (DSP)). A hardware module may also include programmable logic or circuitry (e.g., contained within a general-purpose processor or other programmable processor) that is temporarily configured by software to perform particular operations. The decision to implement a hardware module in dedicated and permanently configured circuits or in temporarily configured circuits (e.g., configured by software) may be driven by cost and time considerations.
When implemented in software, the techniques may be provided as part of an operating system, a library of multiple application uses, a particular software application, or the like. The software may be executed by one or more general-purpose processors or one or more special-purpose processors.
Those skilled in the art will appreciate upon reading this disclosure additional and alternative structural and functional designs for managing radio bearers by the principles disclosed herein. Thus, while specific embodiments and applications have been illustrated and described, it is to be understood that the disclosed embodiments are not limited to the precise construction and components disclosed herein. Various modifications, changes, and variations which will be apparent to those skilled in the art may be made in the arrangement, operation, and details of the methods and apparatus disclosed herein without departing from the spirit and scope defined in the appended claims.
Claims (15)
1. A method of classifying assets in terms of characteristics of individual entities and relationships of individual entities to assets using a neural network configured to maintain a network of nodes including a plurality of nodes and edges, each node of the plurality of nodes representing a respective asset of a plurality of assets corresponding to a plurality of content sources, the method comprising:
Aggregating, by one or more processors, data regarding characteristics of each node in each of a plurality of remote neighbors at each of a plurality of aggregator nodes in the node network, wherein each remote neighbor corresponds to an aggregator node in the plurality of aggregator nodes, a neighbor is a subset of nodes surrounding an aggregator node within a predefined distance, and a remote neighbor is a neighbor of a node separated from a seed node in the plurality of nodes by at least two intermediate nodes;
updating, by the one or more processors, at each aggregator node of the plurality of aggregator nodes, a state of the aggregator node by assigning a weight to each feature of the corresponding remote neighborhood;
updating, by the one or more processors, at the seed node, a state of the seed node by performing a convolution analysis of each node in a local neighborhood around the seed node, the local neighborhood including each aggregator node of the plurality of aggregator nodes; and
a marker of the seed node is determined by the one or more processors based on a state of the seed node.
2. The method of claim 1, wherein assigning the weight is according to an impact function proportional to the personalized page rank from the first node to the second node.
3. The method of claim 2, wherein the influence function isWhere x is the first node in the remote neighborhood, each x i Is characteristic of node x, y is the second node in the remote neighborhood, and each y j Is characteristic of node y.
4. The method of claim 3, wherein y is an aggregator node of the aggregator nodes.
5. The method of any of the preceding claims, wherein each node in each remote neighborhood is outside a convolution window around the seed node.
6. The method of any of the preceding claims, wherein each node in each remote neighborhood is no more than a predetermined number of hops away from the corresponding aggregator node.
7. The method of any of the preceding claims, further comprising: identifying a combination of two or more attributes of the seed node; and is also provided with
Wherein the state of the seed node is based on a combination of two or more attributes of the seed node.
8. The method of any of the preceding claims, wherein each node in each of the remote neighbors shares an entity type with a corresponding aggregator node, and wherein each aggregator node has a different entity type.
9. The method of claim 8, wherein the seed node learns a different projection for each different entity type.
10. The method of claim 8 or 9, wherein the number of weights scales with the number of different entity types.
11. The method of any of claims 8 to 10, wherein the vector of entity types is defined as Σ i r i f T (x i ) Wherein r is i Personalized page ranking with respect to a starting node i to a respective aggregator node corresponding to a remote neighborhood, each x i Is a feature of the features of node i, and f T Is a neural network embedding specific to learning of entity type T.
12. The method of claim 11, wherein the vector is a sum over a subset of nodes, and wherein the subset of nodes are nodes of entity type T having a personalized page rank above a predetermined threshold.
13. The method of claim 11 or 12, wherein the personalized page rank is calculated using a push stream method.
14. The method of any of the preceding claims, further comprising: at least one message is communicated from each of the aggregator nodes to the seed node prior to determining the marking of the seed node.
15. A system comprising processing hardware and a memory storing computer-executable instructions, the system configured to implement the method of any one of claims 1-14.
Applications Claiming Priority (1)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
PCT/US2021/065211 WO2023129124A1 (en) | 2021-12-27 | 2021-12-27 | Hybrid message passing neural network and personalized page ranking graph convolution network model |
Publications (1)
Publication Number | Publication Date |
---|---|
CN116671065A true CN116671065A (en) | 2023-08-29 |
Family
ID=80001373
Family Applications (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
CN202180069234.XA Pending CN116671065A (en) | 2021-12-27 | 2021-12-27 | Hybrid messaging neural network and personalized page rank graph convolutional network model |
Country Status (4)
Country | Link |
---|---|
EP (1) | EP4226284A1 (en) |
CN (1) | CN116671065A (en) |
CA (1) | CA3185202A1 (en) |
WO (1) | WO2023129124A1 (en) |
Family Cites Families (1)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20210312042A1 (en) * | 2020-04-06 | 2021-10-07 | Cybereason Inc. | Graph-Based Classification of Elements |
-
2021
- 2021-12-27 EP EP21848087.9A patent/EP4226284A1/en active Pending
- 2021-12-27 CA CA3185202A patent/CA3185202A1/en active Pending
- 2021-12-27 WO PCT/US2021/065211 patent/WO2023129124A1/en active Application Filing
- 2021-12-27 CN CN202180069234.XA patent/CN116671065A/en active Pending
Also Published As
Publication number | Publication date |
---|---|
EP4226284A1 (en) | 2023-08-16 |
CA3185202A1 (en) | 2023-06-27 |
WO2023129124A1 (en) | 2023-07-06 |
Similar Documents
Publication | Publication Date | Title |
---|---|---|
TWI727202B (en) | Method and system for identifying fraudulent publisher networks | |
US10581908B2 (en) | Identifying phishing websites using DOM characteristics | |
US20200204587A1 (en) | Identifying phishing websites using dom characteristics | |
ES2755780T3 (en) | Automated behavior and static analysis using an instrumented sandbox and machine learning classification for mobile security | |
Gupta et al. | Towards detecting fake user accounts in facebook | |
Rahman et al. | Efficient and scalable socware detection in online social networks | |
US7937336B1 (en) | Predicting geographic location associated with network address | |
US20130066814A1 (en) | System and Method for Automated Classification of Web pages and Domains | |
US20090055267A1 (en) | Internet advertising brokerage apparatus, systems, and methods | |
US9904704B2 (en) | System and method for controlling audience data and tracking | |
JP2019517088A (en) | Security vulnerabilities and intrusion detection and remediation in obfuscated website content | |
US10885466B2 (en) | Method for performing user profiling from encrypted network traffic flows | |
US20120209987A1 (en) | Monitoring Use Of Tracking Objects on a Network Property | |
Dewan et al. | Facebook Inspector (FbI): Towards automatic real-time detection of malicious content on Facebook | |
CN111371778B (en) | Attack group identification method, device, computing equipment and medium | |
CN111859234A (en) | Illegal content identification method and device, electronic equipment and storage medium | |
US10291492B2 (en) | Systems and methods for discovering sources of online content | |
US8719934B2 (en) | Methods, systems and media for detecting non-intended traffic using co-visitation information | |
US20240089177A1 (en) | Heterogeneous Graph Clustering Using a Pointwise Mutual Information Criterion | |
EP3203707A1 (en) | A computer-implemented web tracking identification method, a web tracker detecting entity and computer program products | |
CN116671065A (en) | Hybrid messaging neural network and personalized page rank graph convolutional network model | |
Koop | Preventing the Leakage of Privacy Sensitive User Data on the Web | |
Pantelic et al. | Cookies Implementation Analysis and the Impact on User Privacy Regarding GDPR and CCPA Regulations. Sustainability 2022, 14, 5015 | |
Le | Automated Filter Rule Generation for Adblocking | |
CN117439743A (en) | Knowledge graph management method and related equipment |
Legal Events
Date | Code | Title | Description |
---|---|---|---|
PB01 | Publication | ||
PB01 | Publication |