EP2409248B1 - Web translation with display replacement - Google Patents
Web translation with display replacement Download PDFInfo
- Publication number
- EP2409248B1 EP2409248B1 EP09841668.8A EP09841668A EP2409248B1 EP 2409248 B1 EP2409248 B1 EP 2409248B1 EP 09841668 A EP09841668 A EP 09841668A EP 2409248 B1 EP2409248 B1 EP 2409248B1
- Authority
- EP
- European Patent Office
- Prior art keywords
- text
- document
- node
- translated
- texts
- Prior art date
- Legal status (The legal status is an assumption and is not a legal conclusion. Google has not performed a legal analysis and makes no representation as to the accuracy of the status listed.)
- Active
Links
- 238000013519 translation Methods 0.000 title claims description 122
- 238000000034 method Methods 0.000 claims description 35
- 238000009877 rendering Methods 0.000 claims description 11
- 230000014616 translation Effects 0.000 description 101
- 238000013515 script Methods 0.000 description 25
- 238000004590 computer program Methods 0.000 description 12
- 238000012545 processing Methods 0.000 description 8
- 238000004891 communication Methods 0.000 description 7
- 230000008569 process Effects 0.000 description 7
- 230000004044 response Effects 0.000 description 7
- 230000009471 action Effects 0.000 description 6
- 238000012546 transfer Methods 0.000 description 5
- 230000035772 mutation Effects 0.000 description 4
- 239000000284 extract Substances 0.000 description 3
- 230000003993 interaction Effects 0.000 description 3
- 230000004048 modification Effects 0.000 description 3
- 238000012986 modification Methods 0.000 description 3
- 230000000644 propagated effect Effects 0.000 description 3
- 230000001427 coherent effect Effects 0.000 description 2
- 238000013506 data mapping Methods 0.000 description 2
- 230000001419 dependent effect Effects 0.000 description 2
- 238000005516 engineering process Methods 0.000 description 2
- 230000006870 function Effects 0.000 description 2
- 230000003287 optical effect Effects 0.000 description 2
- 238000000926 separation method Methods 0.000 description 2
- 230000003068 static effect Effects 0.000 description 2
- 230000005540 biological transmission Effects 0.000 description 1
- 230000008859 change Effects 0.000 description 1
- 238000001514 detection method Methods 0.000 description 1
- 238000003780 insertion Methods 0.000 description 1
- 230000037431 insertion Effects 0.000 description 1
- 239000004973 liquid crystal related substance Substances 0.000 description 1
- 238000007726 management method Methods 0.000 description 1
- 239000004065 semiconductor Substances 0.000 description 1
- 230000001953 sensory effect Effects 0.000 description 1
- 239000000758 substrate Substances 0.000 description 1
- 230000000007 visual effect Effects 0.000 description 1
Images
Classifications
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F40/00—Handling natural language data
- G06F40/40—Processing or translation of natural language
- G06F40/58—Use of machine translation, e.g. for multi-lingual retrieval, for server-side translation for client devices or for real-time translation
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F16/00—Information retrieval; Database structures therefor; File system structures therefor
- G06F16/80—Information retrieval; Database structures therefor; File system structures therefor of semi-structured data, e.g. markup language structured data such as SGML, XML or HTML
- G06F16/84—Mapping; Conversion
- G06F16/88—Mark-up to mark-up conversion
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F16/00—Information retrieval; Database structures therefor; File system structures therefor
- G06F16/90—Details of database functions independent of the retrieved data types
- G06F16/95—Retrieval from the web
- G06F16/957—Browsing optimisation, e.g. caching or content distillation
- G06F16/9577—Optimising the visualization of content, e.g. distillation of HTML documents
Definitions
- This specification relates to translation of markup language documents.
- markup language document is an electronic document containing text and annotations to the text.
- the annotations generally include structure information and describe how text should be formatted and displayed to a user.
- markup language documents include HyperText Markup Language (HTML) documents, extensible markup language (XML) documents, and Semi-Extensible Markup Language (SEML) documents.
- HTML HyperText Markup Language
- XML extensible markup language
- SEML Semi-Extensible Markup Language
- Translation services for markup language documents typically provide a static translation of the document.
- An identifier of the document for example, a uniform resource locator (URL)
- the translation service retrieves the document, translates the document, and presents a translation of the document as the document appeared when it was retrieved.
- US 2008/172603 A1 discloses a translation capable XML document where the XML elements are containing the respective translatable data, e.g. strings and their respective translations in the target language.
- US 2008/028305 A1 relates to a "static translation of web pages ", where, based on a translation request, a translation service server requests a translation engine to translate an HTML document from a source to a target language.
- US 2008/218578 A1 relates primarily to providing a user interface containing both the original document and a translated document and receiving input from a user describing portions of the translated document that should be modified.
- US 2008/082317 A1 describes a system wherein the reader of the translated text or resources is provided with easy access to the original untranslated text.
- US 2006/173829 A1 discloses a search engine or content subscription system that includes a hidden layer of embedded translations for the words and phrases that occur in a search result page, and automatic insertion of the hidden layer of embedded translations to all content that is linked to/from the results page.
- the embedded translations that are in the hidden layer of the search results are displayed when a user actively requests to see them, per given word or phrase.
- US2008/077384 relates to dynamically translating a software application to a user selected target language that is not natively provided by the software application.
- This specification describes technologies relating to translation of markup language documents with display replacement.
- Markup language documents stored on a server can be translated in place on a client.
- the translation can be dynamic, in that it allows users to interact with scripts on a translated page as the users would with scripts on a non-translated page.
- Secure files and local (or intranet) files can be translated even when the translation service cannot access the files.
- Files that are accessible only with a user log-in can be translated even when the translation service cannot access the files.
- a client machine can translate a markup language document or revert a markup language document to its original language without reloading the document content from a server.
- FIG. 1A-1B illustrate an example markup language document 102 and an example display 104 of the markup language document 102.
- the markup language document 102 is an HTML document.
- Annotations are represented as tags in the document.
- the ⁇ html> tag 106 and the ⁇ /html> tag 108 indicate that the text between the tags is in the HTML language.
- the ⁇ title> tag 110 and the ⁇ /title> tag 112 indicate that the text between the tags should be formatted as a title.
- the ⁇ b> tag 114 and the ⁇ /b> tag 116 indicate that the text between the tags should be formatted in bold.
- FIG. IB illustrates a display of the markup language document 102.
- a markup language display program To display a markup language document, a markup language display program generates an internal representation of the document and renders the document from the internal representation as specified by the annotations.
- the markup language display program is a computer program that allows a user to display and interact with a markup language document. Examples of such programs are web browsers, e.g., FirefoxTM, available from the Mozilla Project in Mountain View, California and XML document editors.
- Some markup language documents include image annotations, such as the ⁇ img> tag 122, indicating that an image should be displayed.
- Some markup language documents include script tags, such as the ⁇ script> and ⁇ /script> tags 124 and 126 indicating that text between the script tags is a script (i.e., executable program code). When the document is displayed, the script can be executed by the markup language display program. Examples of scripts include action scripts, JavaScript scripts, and AJAX scripts.
- FIG. 1C illustrates an internal document object model (DOM) representation 150 of the markup language document 102.
- the document object model provides an interface that allows executing scripts to access and update the style, structure, and content of the document. Executing scripts can process the document and use the DOM to incorporate the results of the processing into the document.
- the DOM represents a document as a tree of node objects. Each node corresponds to a part of the document.
- Nodes can be various types including, for example, root nodes (e.g., the root node 152), element nodes (e.g., the title element node 154), attribute nodes (e.g., the source attribute node 160), text nodes (e.g., text node 158) and script nodes (e.g., script node 162).
- a text node is a node corresponding to text in the document, and includes text stored in the node.
- An element node is a node corresponding to an annotation in the document such as ⁇ html> tags or ⁇ title> tags.
- An attribute node is a node corresponding to an attribute of an element node, such as the source for an ⁇ image> tag.
- a script node includes an executable script.
- a DOM representation can also include other types of nodes.
- the structure of the tree is determined by the hierarchical relationships between nodes.
- the hierarchical relationships of the nodes is due to the nesting of annotations in the document.
- the hierarchical structure, as well as the order of nodes at the same level of the tree, is processed by a markup language display program and used to present the document.
- FIG. 2 illustrates an example display of an HTML web page 202 and an example display of a translated version 224 of the web page.
- the illustrated display is generated by a web browser.
- the web browser initially displays the web page in its original form, with its text in the original language of the web page.
- the web browser (or an add-in running in the web browser) extracts segments of text (e.g., Segment A 210, Segment B 212, and Segment C 214) from the internal representation of the document and sends the segments to a translation service 216.
- the web browser receives translated segments (e.g., Translated Segment A 218, Translated Segment B 220, and Translated Segment C 222) from the translation service and uses the translated segments to update the internal representation of the document 202, resulting in a translated version of the document.
- the web browser uses Translated Segment A to update the internal representation corresponding to region 204, Translated Segment B 220 to update the internal representation corresponding to region 206, and Translated Segment C 222 to update the internal representation corresponding to region 208. Because the internal representation has been updated, the web browser displays a translated version 224 of the web page.
- the web browser performs translation in response to user input requesting the translation.
- the input can be, for example, a user request such as clicking a "translate page" button 203.
- the web browser can be configured to translate all web pages that are not in the user's preferred language, or one of the user's preferred languages, or to translate portions of documents that are not in such language or languages.
- the web browser monitors the web page for changes to its text. Changes can occur, for example, when a script executing in the web browser modifies the text of the web page, or when a user clicks on a link in the web page, causing new or replacement text to be inserted into the web page.
- the web browser detects a change in the text of the web page, it identifies the new text and sends the text to the translation service.
- the web browser uses the resulting translated text to update the internal representation, and then displays an updated web page corresponding to the updated internal representation.
- a user can select a phrase in the displayed text and cause the web browser (or an add-in running in the web browser) to present a translation of the selected text.
- a user can select text with a mouse or other user input device and provide input requesting that the selected text be translated. The input can be, for example, causing the mouse cursor to hover over the selected text or selecting a user interface element to indicate that translation is desired.
- the web browser causes the selected text to be translated using a translation service.
- the web browser receives the translated text from the translation service, the web browser can present the translated text to the user through a tooltip (a box displayed over the selected text) or other graphical user interface element.
- the displayed text on the web page is translated text, and the user causes the web browser to present the selected text in its original language.
- the original language text can be stored on the machine running the web browser, or can be retrieved from the translation service.
- FIG. 3 illustrates an example architecture of a system that provides translations of markup language documents.
- a client device 302 runs a markup language display program, which in the present example is a web browser 304.
- the web browser 304 includes a browser translator module 306 and a renderer module 310.
- the renderer module 310 presents markup language documents by rendering an internal representation of the document, such as a document object model representation.
- the renderer module 310 translates a displayed markup language document using a page translator module 312.
- the page translator module 312 analyzes the internal representation of the current document, extracts text from the text nodes of the representation, and sends the text to the browser translation module 306 for translation.
- the page translator module 312 receives translated text from the browser translator module 306 and updates the internal representation.
- the renderer module 310 then renders the updated internal representation.
- the page translator module 312 and the browser translator module 306 can be configured to interact through event notifications, for example, function callbacks, event sinks, inter-process communication (IPC) messages, or any other convenient form of module-to-module communication.
- IPC inter-process communication
- the web browser 304 maintains two internal representations of the markup language document: an un-translated internal representation corresponding to the document in its original language and a translated internal representation corresponding to a translation of the document.
- the page translator module 312 updates the translated internal representation and the renderer module 310 presents the translated internal representation. Scripts executed in the web browser modify the un-translated internal representation and in response, the page translator module 312 modifies the translated internal representation.
- the translator component 314 receives text corresponding to one or more text nodes in the internal representation from the page translator module 312.
- the translator component 314 then encodes the text as one or more segments in a form that can be processed by a translation service 308 and sends the text to a translation service 308 for translation.
- the translation service 308 provides its clients a translation policy that indicates acceptable segment size and encoding.
- the segments and their translations are encrypted before being sent to the translation service.
- the segments can be encrypted using standard encryption protocols, for example, HTTPS, symmetric key cryptography or asymmetric (public/private key) cryptography.
- the translator component 314 maintains data mapping each translation request to its corresponding segment. When segments can contain text from multiple nodes, the translator component also maintains data mapping each segment portion to a corresponding text node in the internal document representation. When a translation is received from the translation service, the translator component maps the response to the appropriate text node using the data.
- the translation service 308 receives segments from the browser translation module, translates the text of the segments into a different language, and returns the translations of the segments.
- the translation service is run on a server separate from the client device 302. In alternative implementations, the translation service is run on the client device 302.
- each segment is a string of text.
- each segment (and its translation) can be a data structure that contains the text of the text nodes as separate entities.
- each segment can include a number of sub-segments, where each sub-segment includes text from a text node and optional metadata about the text.
- the text sent to the translation service 308 can include in-line markup language tags (e.g., tags occurring within a block of text).
- each segment can be the internal representation containing the text nodes (or a portion of the internal representation, or a reduced or redacted version of the internal representation). If the internal representation is too large to send as a single internal representation, the internal representation can be sent to the translation service in multiple segments.
- the translation service When the translation service receives a segment, it translates the text in the segment and returns a translated segment in the same form as the received segment (e.g., a string of text if the segment was a string of text, or a collection of sub-segments if the segment was a collection of segments).
- a translated segment in the same form as the received segment (e.g., a string of text if the segment was a string of text, or a collection of sub-segments if the segment was a collection of segments).
- the translation service may translate the text without the tags, and then insert the tags back into the translated text at the appropriate locations. For example, if the text includes multiple sentences, and one sentence is marked with ⁇ b> ⁇ /b> tags, then the translation service may mark the translated sentence with the same tags.
- the translation service When the translation service receives a segment containing sub-segments, it translates the text of each sub-segment and generates a translated segment containing an entry for each translated sub-segment.
- the translation service receives metadata with the segment.
- the metadata specifies additional information about the segment, for example, the language into which the segment should be translated, the language of the original document (e.g., as detected from HTTP headers in the document), an identification of the text nodes to which the segment corresponds, markup annotations corresponding to the text, or metadata of the document itself (e.g.,, the document's meta tags).
- the translation service may detect information about the segment. For example, the translation service can detect the current language of the segment by comparing the text of the segment to text in different languages and selecting the language that is the closest match. Any detected information can be returned with the translated segment.
- FIG. 4 illustrates an example architecture of a system in which translations of markup language documents are provided through the actions of an add-in component.
- the system includes a conventional web browser 404 and a browser add-in 412 installed in the web browser, e.g., a toolbar or gadget, that interacts with the DOM and a translation service, and that may also interact with the user.
- a browser add-in 412 installed in the web browser, e.g., a toolbar or gadget, that interacts with the DOM and a translation service, and that may also interact with the user.
- the add-in 412 includes a translator module 410.
- the translator module performs the functions of both the page translator module 312 and the browser translator module 406 described above in reference to FIG. 3 , except that in conventional systems, the web browser and the add-in only interact with one internal representation of the document.
- FIG. 5 illustrates an example method 500 for combining the text in text nodes in an internal representation of a document into segments and sending the segments to a translation service to be translated.
- the document is an HTML document including multiple frames.
- the method considers the nodes of each frame in turn, generates segments of text from text nodes, and sends the segments of text to be translated.
- the example method 500 will be described in reference to a system that performs the method 500.
- the system can be, for example, a computer running a web browser 304 or a web browser 404 with an add-in 412.
- the system initializes a frame_index variable to 0 (step 502).
- Frame_index identifies the current frame, i.e., the frame that is currently being processed.
- the system extracts the text from each frame in turn, until all of the frames have been processed.
- the system then initializes a current_node variable to store a reference (e.g., a pointer) to the first node of the current frame (step 506).
- the current_node variable points to the current node, i.e., the node that is currently being processed.
- the system determines whether or not the current node is a text node (step 508). This can be done, for example, by examining the type of the current node.
- the system adds the text in the current node to a node_segment data structure and to an original_string_array data structure.
- the system also adds a reference to the node itself to a node_array data structure (step 510).
- the node_array stores references to the text nodes in the document
- the original_string_array stores the original (not translated) text of the text nodes in the document, and serves as a cache of the original text in each node.
- the node_segment stores the current segment being built.
- the segment can be formatted, for example, as specified by a translation policy of a translation service.
- the system determines whether the node_segment should be sent to the translation service for translation (step 512).
- the system can determine whether the node_segment should be sent for translation, for example, based on whether the segment is large enough (i.e., contains enough text, as specified by the translation service or a segment policy of the system), whether the segment is about to become too large (e.g., because the size of the next text node would cause the segment to exceed a maximum size specified by the translation service), or whether the segment represents a coherent piece of the document structure.
- the system can determine that the node_segment should be sent for translation when the segment has a predetermined number of text nodes, at least a predetermined number of characters, or at least a predetermined number of words.
- the predefined number can be an absolute number, or an acceptable range.
- the system can use the structure of the internal representation to determine a segment should be sent for translation when the segment represents a coherent piece of the document structure, for example, by containing an entire paragraph, an entire sentence, or other logical units of the document. For example, a segment corresponding to a paragraph element node can be translated once it contains all of the text nodes that are descendants of the paragraph element.
- the system sends a segment for translation as soon as the segment is large enough. If the node_segment should be translated, the text in the node_segment is sent to a translate server and the node_segment data structure is cleared (step 514).
- the system then begins to process the next node in the frame.
- the system updates current_node to point to the next node in the frame (step 516). If the current node is not an end node for the frame, the system determines whether or not the new current node is a text node (steps 518, 508). Otherwise, the system increments frame_index (steps 518, 520) and determines whether frame_index is less than the total number of frames (step 502). If the frame index is greater than or equal to the total number of frames (i.e., when all of the frames have been processed), the system sends text in node_segment to a translation service to be translated, and clears the node_segment data structure(step 522).
- FIG. 6 illustrates an example method 600 for updating an internal representation of a markup language document using a translated segment.
- the method iterates over the text nodes in the internal representation corresponding to the translated segment and updates the text of the nodes using translated text in the translated segment.
- the example method 600 will be described in reference to a system that performs the method 600.
- the system can be, for example, a computer running a web browser 304 or a web browser 404 with an add-in 412.
- the system receives a translated segment corresponding to a segment of text from the document and stores the translated segment in a translated_segment data structure (step 602).
- the translated segment is received, for example, from a translation service.
- the translated segment corresponds to nodes that were added to the node_array (for example, when the system was performing the method described above in reference to FIG. 5 ) between a begin index and an end index.
- the system initializes a translated_segment_index variable to 0 and initializes a node_array_index variable to the begin index for the translated segment (step 604).
- Translated_segment_index identifies the current sub-segment of the translated segment, i.e., the sub-segment that is currently being processed.
- Node_array _index identifies the current node in the node array whose text is being updated.
- the system sets the current_node variable to point to the current node being updated, i.e., the node identified by the node_array_index, and stores the text in the sub-segment of the translated segment corresponding to the translated segment index in a current_node_translation data structure(step 608).
- the system verifies that the current node is a valid node (step 610).
- a node is valid if the node has not been removed from the internal document representation and the text of the node has not been changed since the node was added to the node_array.
- a node can become invalid, for example, when a script executed in the web browser displaying the document removed the node from the internal representation of the document after the system sent the text of the node for translation, when the web browser began loading a new document after the system sent the text of the node for translation, or when the text of the node changed after the system sent the text for translation. Detection of invalid nodes can be dependent on the web browser displaying the document.
- the system receives a mutation event when a node is removed or modified.
- the system marks a node as dirty when the system receives a mutation event for the node. A node is valid when it has not been marked.
- the system automatically removes an invalid node from the node_array when it receives a mutation event (e.g., a DOM Level 2 Mutation Event) for the node.
- a mutation event e.g., a DOM Level 2 Mutation Event
- the system determines whether a node is valid by trying to access the node. If the system is unable to access the node, the node is invalid. If the system is able to access the node, the system compares the text of the node to the text stored in original_string_array for the node. If the texts match, the system determines that the node is valid. Otherwise, the system determines that the node is invalid.
- the system removes the node from the node_array (step 612). In some implementations, once the system removes the current node from the node array, the system determines whether the node is invalid because it was removed from the document or because it was modified. If the node was modified, the system then determines whether a pointer to the modified node is stored in the node_array. If not, the system translates the text in the modified node by adding the modified node to the node_array, sending the text of the modified node to the translation service for translation, and updating the replacement node with translated text received from the translation service.
- the system replaces the text of the node with the text stored in the current_node_translation, and stores the text in the current_node_translation in the translated_string_array (step 614).
- the system then begins to process the next node corresponding to the translated segment by incrementing the translated_segment_index and the node_array_index (step 616).
- the system determines if the entire translated segment has been processed by comparing the translated_segment_index to the total number of sub-segments in the translated segment and comparing the node_array_index to the end index for the translated segment (step 606). If the translated_segment_index is greater than or equal to than the total number of elements and the node_array_index is greater than the end index, then the system stops performing the method. Otherwise, the system updates current_node and current_node_translation (step 608).
- FIG. 7 illustrates an example method 700 for dynamically translating a portion of a document.
- the document is an HTML document including one or more frames.
- the method 700 will be described in reference to a system that performs the method 700.
- the system can be, for example, a computer running a web browser 304 or a web browser 404 with an add-in 412.
- the system receives a notification that the document has been updated (step 702).
- the document can be updated, for example, when a web browser displaying the document executes a script in the document, and the executing script modifies text content of the document.
- the notification can be received from a renderer module 310.
- the system is a browser add-in 412, the notification can be received from the web browser 404 displaying the document.
- the system traverses the node_array to remove any invalid nodes in the array (step 704).
- the system can determine whether a node is valid, for example, as described above in reference to FIG. 6 .
- the system initializes frame_index to 0 to identify the first frame in the page (step 706).
- the system initializes current_node to point to the first node of the current frame, i.e., the current node being processed (step 710).
- the system determines whether or not the current node is a text node (step 712). If the current_node is a text node, the system examines translated_string_array to determine whether the text of the current node is recorded in translated_string_array (step 714).
- the system adds the text in the text node to the node_segment and to the original_string_array (step 716).
- the system determines whether the node_segment should be sent for translation (step 718). If so, the system sends the text in the node_segment to a translation service and then clears the node_segment data structure(step 720).
- the system then begins to process the next node in the frame by updating current_node to point to the next node in the frame (step 722). If the current node is not an end node for the frame, the system determines whether or not the new node is a text node (steps 724, 712). Otherwise, the system increments the frame_index and determines whether frame_index is less than the total number of frames (step 726, 708) .
- the system sends the text in the node_segment to a translation service and then clears the node_segment data structure(step 728).
- FIG. 8 illustrates an example method 800 for switching from a translated version of a document to an original language version of a document using a cache.
- the method iterates over each valid node identified by the node_array and replaces the translated text in the node with the original text of the node.
- the example method 800 will be described in reference to a system that performs the method 800.
- the system can be, for example, a computer running a web browser 304 or a web browser 404 with an add-in 412.
- the system initializes node_array_index to 0 (step 802).
- the system sets the current_node variable to point to the node stored in the node_array at the node_array_index, and stores the text stored in the original_string_array corresponding to the current node in a current_node_original_string data structure (step 806).
- the current_node_original_string stores the original text of the current node.
- the system determines whether the current node is a valid node (step 808), for example, as described above in reference to FIG. 6 . If the current node is a valid node, the system replaces the current text of the current node with the text stored in the current_node_original_string (step 810). If the current node is not a valid node, the system skips the node. In some implementations, the system determines whether there is a modified node and requests translation of the modified node from the translation service as described above in reference to FIG. 6 .
- the system increments the node_array_index (step 812) and determines whether the node_array_index is less than the number of nodes in the node_array (step 804).
- FIG. 9 illustrates an example method 900 for translating the text of a markup language document.
- the example method 900 will be described in reference to a system that performs the method 900.
- the system can be, for example, a computer running a web browser 304 or a web browser 404 with a browser add-in 412.
- the system displays a markup language document (step 902).
- the markup language document can be, for example, a web document or a document on a user's local computer.
- Web documents can be retrieved using a secure transfer protocol, for example, using secure hypertext transfer protocol (HTTPS) or using an insecure transfer protocol, for example, hypertext transfer protocol (HTTP).
- HTTPS secure hypertext transfer protocol
- HTTP hypertext transfer protocol
- the system displays a markup language document by rendering an internal representation of the document, for example, a document object model representation as described above in reference to FIG. 1C .
- the system sends a data structure containing the texts from the text nodes to a translation service, and the texts in the text nodes are replaced with corresponding translated texts to generate a translated internal representation of the markup language document (step 904).
- translation is requested as described above in reference to FIG. 5 and the text of the nodes is replaced with translated texts as described above in reference to FIG. 6 .
- the text of each node is individually sent to a translation service.
- a translation of the markup language document is displayed by rendering the translated internal representation (step 906).
- the system incrementally translates the text of the nodes and updates the internal representation. For example, the system can request translation of text corresponding to a subset of the text nodes, update the internal representation with translated texts corresponding to the subset of nodes resulting in a partially translated representation, and then render the partially translated representation. The system can then repeat those steps for a different subset of the text nodes. In some such implementations, the system can perform incremental translation as the markup language document is loaded (e.g., as portions of the internal representation are received).
- the system reverts the document to its original language (for example, in response to user input), and displays the original language version by rendering an original language internal representation of the document.
- the system generates the original language internal representation from a cache of the original language text of the nodes, for example, as described above in reference to FIG. 8 .
- the system maintains the original language internal representation as a shadow copy of the translated internal representation and updates the original language internal representation to reflect any changes to the text of the document.
- the system receives a notification that text in one of the text nodes is being replaced with new text.
- the system can receive the notification, for example, as a modification event from an event handler, for example, running in a markup language display program displaying the document.
- the system sends a data structure containing the new text to the translation service and replaces the text in the text node with translated text received from the translation service.
- the modification event identifies the node being modified or added, and the system sends the text of that node to the translation service.
- the system traverses the internal representation to identify the node that has been modified or added, for example, as described above in reference to FIG. 7 .
- Embodiments of the subject matter and the operations described in this specification can be implemented in digital electronic circuitry, or in computer software, firmware, or hardware, including the structures disclosed in this specification and their structural equivalents, or in combinations of one or more of them.
- Embodiments of the subject matter described in this specification can be implemented as one or more computer programs, i.e., one or more modules of computer program instructions, encoded on a computer storage medium for execution by, or to control the operation of, data processing apparatus.
- the program instructions can be encoded on an artificially-generated propagated signal, e.g., a machine-generated electrical, optical, or electromagnetic signal, that is generated to encode information for transmission to suitable receiver apparatus for execution by a data processing apparatus.
- a computer storage medium can be, or be included in, a computer-readable storage device, a computer-readable storage substrate, a random or serial access memory array or device, or a combination of one or more of them.
- a computer storage medium is not a propagated signal, a computer storage medium can be a source or destination of computer program instructions encoded in an artificially-generated propagated signal.
- the computer storage medium can also be, or be included in, one or more separate physical components or media (e.g., multiple CDs, disks, or other storage devices).
- the operations described in this specification can be implemented as operations performed by a data processing apparatus on data stored on one or more computer-readable storage devices or received from other sources.
- the term "data processing apparatus” encompasses all kinds of apparatus, devices, and machines for processing data, including by way of example a programmable processor, a computer, a system on a chip, or multiple ones, or combinations, of the foregoing
- the apparatus can include special purpose logic circuitry, e.g., an FPGA (field programmable gate array) or an ASIC (application-specific integrated circuit).
- the apparatus can also include, in addition to hardware, code that creates an execution environment for the computer program in question, e.g., code that constitutes processor firmware, a protocol stack, a database management system, an operating system, a cross-platform runtime environment, a virtual machine, or a combination of one or more of them.
- the apparatus and execution environment can realize various different computing model infrastructures, such as web services, distributed computing and grid computing infrastructures.
- a computer program (also known as a program, software, software application, script, or code) can be written in any form of programming language, including compiled or interpreted languages, declarative or procedural languages, and it can be deployed in any form, including as a standalone program or as a module, component, subroutine, object, or other unit suitable for use in a computing environment.
- a computer program may, but need not, correspond to a file in a file system.
- a program can be stored in a portion of a file that holds other programs or data (e.g., one or more scripts stored in a markup language document), in a single file dedicated to the program in question, or in multiple coordinated files (e.g., files that store one or more modules, subprograms, or portions of code).
- a computer program can be deployed to be executed on one computer or on multiple computers that are located at one site or distributed across multiple sites and interconnected by a communication network.
- the processes and logic flows described in this specification can be performed by one or more programmable processors executing one or more computer programs to perform actions by operating on input data and generating output.
- the processes and logic flows can also be performed by, and apparatus can also be implemented as, special purpose logic circuitry, e.g., an FPGA (field programmable gate array) or an ASIC (application-specific integrated circuit).
- processors suitable for the execution of a computer program include, by way of example, both general and special purpose microprocessors, and any one or more processors of any kind of digital computer.
- a processor will receive instructions and data from a read-only memory or a random access memory or both.
- the essential elements of a computer are a processor for performing actions in accordance with instructions and one or more memory devices for storing instructions and data.
- a computer will also include, or be operatively coupled to receive data from or transfer data to, or both, one or more mass storage devices for storing data, e.g., magnetic, magneto-optical disks, or optical disks.
- mass storage devices for storing data, e.g., magnetic, magneto-optical disks, or optical disks.
- a computer need not have such devices.
- a computer can be embedded in another device, e.g., a mobile telephone, a personal digital assistant (PDA), a mobile audio or video player, a game console, a Global Positioning System (GPS) receiver, or a portable storage device (e.g., a universal serial bus (USB) flash drive), to name just a few.
- Devices suitable for storing computer program instructions and data include all forms of nonvolatile memory, media and memory devices, including by way of example semiconductor memory devices, e.g., EPROM, EEPROM, and flash memory devices; magnetic disks, e.g., internal hard disks or removable disks; magneto-optical disks; and CDROM and DVD-ROM disks.
- the processor and the memory can be supplemented by, or incorporated in, special purpose logic circuitry.
- a computer having a display device, e.g., a CRT (cathode ray tube) or LCD (liquid crystal display) monitor, for displaying information to the user and a keyboard and a pointing device, e.g., a mouse or a trackball, by which the user can provide input to the computer.
- a display device e.g., a CRT (cathode ray tube) or LCD (liquid crystal display) monitor
- keyboard and a pointing device e.g., a mouse or a trackball
- Other kinds of devices can be used to provide for interaction with a user as well; for example, feedback provided to the user can be any form of sensory feedback, e.g., visual feedback, auditory feedback, or tactile feedback; and input from the user can be received in any form, including acoustic, speech, or tactile input.
- a computer can interact with a user by sending documents to and receiving documents from a device that is used by the user; for example, by sending web pages to a
- Embodiments of the subject matter described in this specification can be implemented in a computing system that includes a backend component, e.g., as a data server, or that includes a middleware component, e.g., an application server, or that includes a frontend component, e.g., a client computer having a graphical user interface or a Web browser through which a user can interact with an implementation of the subject matter described in this specification, or any combination of one or more such backend, middleware, or frontend components.
- the components of the system can be interconnected by any form or medium of digital data communication, e.g., a communication network.
- Examples of communication networks include a local area network (“LAN”) and a wide area network (“WAN”), an inter-network (e.g., the Internet), and peer-to-peer networks (e.g., ad hoc peer-to-peer networks).
- LAN local area network
- WAN wide area network
- inter-network e.g., the Internet
- peer-to-peer networks e.g., ad hoc peer-to-peer networks.
- the computing system can include clients and servers.
- a client and server are generally remote from each other and typically interact through a communication network. The relationship of client and server arises by virtue of computer programs running on the respective computers and having a client-server relationship to each other.
- a server transmits data (e.g., an HTML page) to a client device (e.g., for purposes of displaying data to and receiving user input from a user interacting with the client device).
- client device e.g., for purposes of displaying data to and receiving user input from a user interacting with the client device.
- Data generated at the client device e.g., a result of the user interaction
Description
- This specification relates to translation of markup language documents.
- Generally speaking, a markup language document is an electronic document containing text and annotations to the text. The annotations generally include structure information and describe how text should be formatted and displayed to a user. Examples of markup language documents include HyperText Markup Language (HTML) documents, extensible markup language (XML) documents, and Semi-Extensible Markup Language (SEML) documents.
- Translation services for markup language documents typically provide a static translation of the document. An identifier of the document (for example, a uniform resource locator (URL)) is sent to the translation service. The translation service retrieves the document, translates the document, and presents a translation of the document as the document appeared when it was retrieved.
-
US 2008/172603 A1 discloses a translation capable XML document where the XML elements are containing the respective translatable data, e.g. strings and their respective translations in the target language. -
US 2008/028305 A1 relates to a "static translation of web pages ", where, based on a translation request, a translation service server requests a translation engine to translate an HTML document from a source to a target language. -
US 2008/218578 A1 relates primarily to providing a user interface containing both the original document and a translated document and receiving input from a user describing portions of the translated document that should be modified. -
US 2008/082317 A1 describes a system wherein the reader of the translated text or resources is provided with easy access to the original untranslated text. -
US 2006/173829 A1 discloses a search engine or content subscription system that includes a hidden layer of embedded translations for the words and phrases that occur in a search result page, and automatic insertion of the hidden layer of embedded translations to all content that is linked to/from the results page. The embedded translations that are in the hidden layer of the search results are displayed when a user actively requests to see them, per given word or phrase. -
US2008/077384 relates to dynamically translating a software application to a user selected target language that is not natively provided by the software application. Document ""Embedded NLS Solution For Web", IP.COM JOURNAL, IP.COM INC., WEST HENRIETTA, NY, US, 26 September 2006 (2006-09-26), ISSN: 1533-0001" teaches storing text in a separate file from a skeleton page layout and dynamically inserting text from the separate file into the page. - The invention is defined in the independent claims. Advantageous modifications are set forth in the dependent claims.
- This specification describes technologies relating to translation of markup language documents with display replacement.
- These technologies can be realized in the novel embodiments listed at the end of this specification and in the claims.
- The listed embodiments and other embodiments of the subject matter described in this specification can be implemented so as to realize one or more of the following advantages. Markup language documents stored on a server can be translated in place on a client. The translation can be dynamic, in that it allows users to interact with scripts on a translated page as the users would with scripts on a non-translated page. Secure files and local (or intranet) files can be translated even when the translation service cannot access the files. Files that are accessible only with a user log-in can be translated even when the translation service cannot access the files. A client machine can translate a markup language document or revert a markup language document to its original language without reloading the document content from a server.
- The details of one or more embodiments of the subject matter described in this specification are set forth in the accompanying drawings and the description below. Other features, aspects, and advantages will become apparent from the description, the drawings, and the claims.
-
-
FIG. 1A-1B illustrate an example markup language document and an example display of the markup language document. -
FIG. 1C illustrates an internal document object model (DOM) representation of the markup language document. -
FIG. 2 illustrates an example display of an HTML web page and an example display of a translated version of the web page. -
FIG. 3 illustrates an example architecture of a system that provides translations of markup language documents. -
FIG. 4 illustrates an example architecture of a system in which translations of markup language documents are provided through the actions of an add-in component. -
FIG. 5 illustrates an example method for combining the text in text nodes in an internal representation of a document into segments and sending the segments to a translation service to be translated. -
FIG. 6 illustrates an example method for updating an internal representation of a markup language document using a translated segment. -
FIG. 7 illustrates an example of method for dynamically translating a portion of a document. -
FIG. 8 illustrates an example method for switching from a translated version of a document to an original language version of a document using a cache. -
FIG. 9 illustrates an example method for translating the text of a markup language document. - Like reference numbers and designations in the various drawings indicate like elements.
-
FIG. 1A-1B illustrate an examplemarkup language document 102 and an example display 104 of themarkup language document 102. - The
markup language document 102 is an HTML document. Annotations are represented as tags in the document. For example, the <html>tag 106 and the </html>tag 108 indicate that the text between the tags is in the HTML language. The <title>tag 110 and the </title>tag 112 indicate that the text between the tags should be formatted as a title. The <b>tag 114 and the </b>tag 116 indicate that the text between the tags should be formatted in bold. - FIG. IB illustrates a display of the
markup language document 102. To display a markup language document, a markup language display program generates an internal representation of the document and renders the document from the internal representation as specified by the annotations. The markup language display program is a computer program that allows a user to display and interact with a markup language document. Examples of such programs are web browsers, e.g., Firefox™, available from the Mozilla Project in Mountain View, California and XML document editors. - Some markup language documents include image annotations, such as the <img> tag 122, indicating that an image should be displayed. Some markup language documents include script tags, such as the <script> and </script> tags 124 and 126 indicating that text between the script tags is a script (i.e., executable program code). When the document is displayed, the script can be executed by the markup language display program. Examples of scripts include action scripts, JavaScript scripts, and AJAX scripts.
-
FIG. 1C illustrates an internal document object model (DOM)representation 150 of themarkup language document 102. The document object model provides an interface that allows executing scripts to access and update the style, structure, and content of the document. Executing scripts can process the document and use the DOM to incorporate the results of the processing into the document. - As shown in
FIG. 1C , the DOM represents a document as a tree of node objects. Each node corresponds to a part of the document. Nodes can be various types including, for example, root nodes (e.g., the root node 152), element nodes (e.g., the title element node 154), attribute nodes (e.g., the source attribute node 160), text nodes (e.g., text node 158) and script nodes (e.g., script node 162). A text node is a node corresponding to text in the document, and includes text stored in the node. An element node is a node corresponding to an annotation in the document such as <html> tags or <title> tags. An attribute node is a node corresponding to an attribute of an element node, such as the source for an <image> tag. A script node includes an executable script. A DOM representation can also include other types of nodes. - The structure of the tree is determined by the hierarchical relationships between nodes. The hierarchical relationships of the nodes is due to the nesting of annotations in the document. The hierarchical structure, as well as the order of nodes at the same level of the tree, is processed by a markup language display program and used to present the document.
-
FIG. 2 illustrates an example display of anHTML web page 202 and an example display of a translatedversion 224 of the web page. The illustrated display is generated by a web browser. - The web browser initially displays the web page in its original form, with its text in the original language of the web page. When translation is initiated, the web browser (or an add-in running in the web browser) extracts segments of text (e.g.,
Segment A 210,Segment B 212, and Segment C 214) from the internal representation of the document and sends the segments to atranslation service 216. The web browser receives translated segments (e.g., TranslatedSegment A 218, TranslatedSegment B 220, and Translated Segment C 222) from the translation service and uses the translated segments to update the internal representation of thedocument 202, resulting in a translated version of the document. For example, the web browser uses Translated Segment A to update the internal representation corresponding toregion 204, TranslatedSegment B 220 to update the internal representation corresponding toregion 206, and TranslatedSegment C 222 to update the internal representation corresponding toregion 208. Because the internal representation has been updated, the web browser displays a translatedversion 224 of the web page. - In some implementations, the web browser performs translation in response to user input requesting the translation. The input can be, for example, a user request such as clicking a "translate page"
button 203. In some implementations, the web browser can be configured to translate all web pages that are not in the user's preferred language, or one of the user's preferred languages, or to translate portions of documents that are not in such language or languages. - In some implementations, once a web page is translated, the web browser monitors the web page for changes to its text. Changes can occur, for example, when a script executing in the web browser modifies the text of the web page, or when a user clicks on a link in the web page, causing new or replacement text to be inserted into the web page. When the web browser detects a change in the text of the web page, it identifies the new text and sends the text to the translation service. The web browser uses the resulting translated text to update the internal representation, and then displays an updated web page corresponding to the updated internal representation.
- In some implementations, a user can select a phrase in the displayed text and cause the web browser (or an add-in running in the web browser) to present a translation of the selected text. For example, a user can select text with a mouse or other user input device and provide input requesting that the selected text be translated. The input can be, for example, causing the mouse cursor to hover over the selected text or selecting a user interface element to indicate that translation is desired. In response, the web browser causes the selected text to be translated using a translation service. When the web browser receives the translated text from the translation service, the web browser can present the translated text to the user through a tooltip (a box displayed over the selected text) or other graphical user interface element. In some implementations, the displayed text on the web page is translated text, and the user causes the web browser to present the selected text in its original language. The original language text can be stored on the machine running the web browser, or can be retrieved from the translation service.
-
FIG. 3 illustrates an example architecture of a system that provides translations of markup language documents. - A
client device 302 runs a markup language display program, which in the present example is aweb browser 304. Theweb browser 304 includes abrowser translator module 306 and arenderer module 310. - The
renderer module 310 presents markup language documents by rendering an internal representation of the document, such as a document object model representation. Therenderer module 310 translates a displayed markup language document using apage translator module 312. Thepage translator module 312 analyzes the internal representation of the current document, extracts text from the text nodes of the representation, and sends the text to thebrowser translation module 306 for translation. Thepage translator module 312 receives translated text from thebrowser translator module 306 and updates the internal representation. Therenderer module 310 then renders the updated internal representation. Thepage translator module 312 and thebrowser translator module 306 can be configured to interact through event notifications, for example, function callbacks, event sinks, inter-process communication (IPC) messages, or any other convenient form of module-to-module communication. - In some implementations, the
web browser 304 maintains two internal representations of the markup language document: an un-translated internal representation corresponding to the document in its original language and a translated internal representation corresponding to a translation of the document. Thepage translator module 312 updates the translated internal representation and therenderer module 310 presents the translated internal representation. Scripts executed in the web browser modify the un-translated internal representation and in response, thepage translator module 312 modifies the translated internal representation. - The
translator component 314 receives text corresponding to one or more text nodes in the internal representation from thepage translator module 312. Thetranslator component 314 then encodes the text as one or more segments in a form that can be processed by atranslation service 308 and sends the text to atranslation service 308 for translation. In some implementations of thetranslation service 308, the translation service provides its clients a translation policy that indicates acceptable segment size and encoding. In some implementations, the segments and their translations are encrypted before being sent to the translation service. The segments can be encrypted using standard encryption protocols, for example, HTTPS, symmetric key cryptography or asymmetric (public/private key) cryptography. - The
translator component 314 maintains data mapping each translation request to its corresponding segment. When segments can contain text from multiple nodes, the translator component also maintains data mapping each segment portion to a corresponding text node in the internal document representation. When a translation is received from the translation service, the translator component maps the response to the appropriate text node using the data. - The
translation service 308 receives segments from the browser translation module, translates the text of the segments into a different language, and returns the translations of the segments. In some implementations, the translation service is run on a server separate from theclient device 302. In alternative implementations, the translation service is run on theclient device 302. - In some implementations, each segment is a string of text. Alternatively, each segment (and its translation) can be a data structure that contains the text of the text nodes as separate entities. For example, each segment can include a number of sub-segments, where each sub-segment includes text from a text node and optional metadata about the text. The text sent to the
translation service 308 can include in-line markup language tags (e.g., tags occurring within a block of text). As another example, each segment can be the internal representation containing the text nodes (or a portion of the internal representation, or a reduced or redacted version of the internal representation). If the internal representation is too large to send as a single internal representation, the internal representation can be sent to the translation service in multiple segments. - When the translation service receives a segment, it translates the text in the segment and returns a translated segment in the same form as the received segment (e.g., a string of text if the segment was a string of text, or a collection of sub-segments if the segment was a collection of segments). Alternatively, the translation service can return a translated segment in a form such that the translated text can be mapped to the text nodes in the segment (e.g., the translation service can return an "original text" = "translated text" pair which can be used to map the translated text back to the original text stored in the text nodes, or when the segment is an internal representation of the document, the translation service can return a collection of sub-segments corresponding to the text of text nodes in the partial internal representation of the document). If the text includes in-line markup language tags, the translation service may translate the text without the tags, and then insert the tags back into the translated text at the appropriate locations. For example, if the text includes multiple sentences, and one sentence is marked with <b> </b> tags, then the translation service may mark the translated sentence with the same tags.
- When the translation service receives a segment containing sub-segments, it translates the text of each sub-segment and generates a translated segment containing an entry for each translated sub-segment.
- In some implementations, the translation service receives metadata with the segment. The metadata specifies additional information about the segment, for example, the language into which the segment should be translated, the language of the original document (e.g., as detected from HTTP headers in the document), an identification of the text nodes to which the segment corresponds, markup annotations corresponding to the text, or metadata of the document itself (e.g.,, the document's meta tags).
- In some implementations, the translation service may detect information about the segment. For example, the translation service can detect the current language of the segment by comparing the text of the segment to text in different languages and selecting the language that is the closest match. Any detected information can be returned with the translated segment.
-
FIG. 4 illustrates an example architecture of a system in which translations of markup language documents are provided through the actions of an add-in component. In this example, the system includes aconventional web browser 404 and a browser add-in 412 installed in the web browser, e.g., a toolbar or gadget, that interacts with the DOM and a translation service, and that may also interact with the user. - The add-in 412 includes a
translator module 410. The translator module performs the functions of both thepage translator module 312 and thebrowser translator module 406 described above in reference toFIG. 3 , except that in conventional systems, the web browser and the add-in only interact with one internal representation of the document. -
FIG. 5 illustrates anexample method 500 for combining the text in text nodes in an internal representation of a document into segments and sending the segments to a translation service to be translated. In the present example, the document is an HTML document including multiple frames. The method considers the nodes of each frame in turn, generates segments of text from text nodes, and sends the segments of text to be translated. For convenience, theexample method 500 will be described in reference to a system that performs themethod 500. The system can be, for example, a computer running aweb browser 304 or aweb browser 404 with an add-in 412. - The system initializes a frame_index variable to 0 (step 502). Frame_index identifies the current frame, i.e., the frame that is currently being processed.
- The system extracts the text from each frame in turn, until all of the frames have been processed. The system then initializes a current_node variable to store a reference (e.g., a pointer) to the first node of the current frame (step 506). The current_node variable points to the current node, i.e., the node that is currently being processed.
- The system determines whether or not the current node is a text node (step 508). This can be done, for example, by examining the type of the current node.
- If the current node is a text node, the system adds the text in the current node to a node_segment data structure and to an original_string_array data structure. The system also adds a reference to the node itself to a node_array data structure (step 510). The node_array stores references to the text nodes in the document The original_string_array stores the original (not translated) text of the text nodes in the document, and serves as a cache of the original text in each node. The node_segment stores the current segment being built. The segment can be formatted, for example, as specified by a translation policy of a translation service.
- The system determines whether the node_segment should be sent to the translation service for translation (step 512). The system can determine whether the node_segment should be sent for translation, for example, based on whether the segment is large enough (i.e., contains enough text, as specified by the translation service or a segment policy of the system), whether the segment is about to become too large (e.g., because the size of the next text node would cause the segment to exceed a maximum size specified by the translation service), or whether the segment represents a coherent piece of the document structure. For example, the system can determine that the node_segment should be sent for translation when the segment has a predetermined number of text nodes, at least a predetermined number of characters, or at least a predetermined number of words. The predefined number can be an absolute number, or an acceptable range. Alternatively, the system can use the structure of the internal representation to determine a segment should be sent for translation when the segment represents a coherent piece of the document structure, for example, by containing an entire paragraph, an entire sentence, or other logical units of the document. For example, a segment corresponding to a paragraph element node can be translated once it contains all of the text nodes that are descendants of the paragraph element.
- In some implementations, the system sends a segment for translation as soon as the segment is large enough. If the node_segment should be translated, the text in the node_segment is sent to a translate server and the node_segment data structure is cleared (step 514).
- The system then begins to process the next node in the frame. The system updates current_node to point to the next node in the frame (step 516). If the current node is not an end node for the frame, the system determines whether or not the new current node is a text node (
steps 518, 508). Otherwise, the system increments frame_index (steps 518, 520) and determines whether frame_index is less than the total number of frames (step 502). If the frame index is greater than or equal to the total number of frames (i.e., when all of the frames have been processed), the system sends text in node_segment to a translation service to be translated, and clears the node_segment data structure(step 522). -
FIG. 6 illustrates anexample method 600 for updating an internal representation of a markup language document using a translated segment. The method iterates over the text nodes in the internal representation corresponding to the translated segment and updates the text of the nodes using translated text in the translated segment. For convenience, theexample method 600 will be described in reference to a system that performs themethod 600. The system can be, for example, a computer running aweb browser 304 or aweb browser 404 with an add-in 412. - The system receives a translated segment corresponding to a segment of text from the document and stores the translated segment in a translated_segment data structure (step 602). The translated segment is received, for example, from a translation service. The translated segment corresponds to nodes that were added to the node_array (for example, when the system was performing the method described above in reference to
FIG. 5 ) between a begin index and an end index. - The system initializes a translated_segment_index variable to 0 and initializes a node_array_index variable to the begin index for the translated segment (step 604). Translated_segment_index identifies the current sub-segment of the translated segment, i.e., the sub-segment that is currently being processed. Node_array _index identifies the current node in the node array whose text is being updated.
- The system sets the current_node variable to point to the current node being updated, i.e., the node identified by the node_array_index, and stores the text in the sub-segment of the translated segment corresponding to the translated segment index in a current_node_translation data structure(step 608).
- The system verifies that the current node is a valid node (step 610). A node is valid if the node has not been removed from the internal document representation and the text of the node has not been changed since the node was added to the node_array. A node can become invalid, for example, when a script executed in the web browser displaying the document removed the node from the internal representation of the document after the system sent the text of the node for translation, when the web browser began loading a new document after the system sent the text of the node for translation, or when the text of the node changed after the system sent the text for translation. Detection of invalid nodes can be dependent on the web browser displaying the document. For example, in some implementations, the system receives a mutation event when a node is removed or modified. In these implementations, the system marks a node as dirty when the system receives a mutation event for the node. A node is valid when it has not been marked.
- In some implementations, the system automatically removes an invalid node from the node_array when it receives a mutation event (e.g., a DOM Level 2 Mutation Event) for the node. In some implementations, the system determines whether a node is valid by trying to access the node. If the system is unable to access the node, the node is invalid. If the system is able to access the node, the system compares the text of the node to the text stored in original_string_array for the node. If the texts match, the system determines that the node is valid. Otherwise, the system determines that the node is invalid.
- If the current node is not a valid node, the system removes the node from the node_array (step 612). In some implementations, once the system removes the current node from the node array, the system determines whether the node is invalid because it was removed from the document or because it was modified. If the node was modified, the system then determines whether a pointer to the modified node is stored in the node_array. If not, the system translates the text in the modified node by adding the modified node to the node_array, sending the text of the modified node to the translation service for translation, and updating the replacement node with translated text received from the translation service.
- If the current node is a valid node, the system replaces the text of the node with the text stored in the current_node_translation, and stores the text in the current_node_translation in the translated_string_array (step 614).
- The system then begins to process the next node corresponding to the translated segment by incrementing the translated_segment_index and the node_array_index (step 616).
- The system determines if the entire translated segment has been processed by comparing the translated_segment_index to the total number of sub-segments in the translated segment and comparing the node_array_index to the end index for the translated segment (step 606). If the translated_segment_index is greater than or equal to than the total number of elements and the node_array_index is greater than the end index, then the system stops performing the method. Otherwise, the system updates current_node and current_node_translation (step 608).
-
FIG. 7 illustrates anexample method 700 for dynamically translating a portion of a document. In the present example, the document is an HTML document including one or more frames. For convenience, themethod 700 will be described in reference to a system that performs themethod 700. The system can be, for example, a computer running aweb browser 304 or aweb browser 404 with an add-in 412. - The system receives a notification that the document has been updated (step 702). The document can be updated, for example, when a web browser displaying the document executes a script in the document, and the executing script modifies text content of the document. When the system is a web browser, the notification can be received from a
renderer module 310. When the system is a browser add-in 412, the notification can be received from theweb browser 404 displaying the document. - The system traverses the node_array to remove any invalid nodes in the array (step 704). The system can determine whether a node is valid, for example, as described above in reference to
FIG. 6 . - The system initializes frame_index to 0 to identify the first frame in the page (step 706).
- The system initializes current_node to point to the first node of the current frame, i.e., the current node being processed (step 710).
- The system determines whether or not the current node is a text node (step 712). If the current_node is a text node, the system examines translated_string_array to determine whether the text of the current node is recorded in translated_string_array (step 714).
- If the text of the current_node is not recorded in the translated_string_array, the system adds the text in the text node to the node_segment and to the original_string_array (step 716). The system determines whether the node_segment should be sent for translation (step 718). If so, the system sends the text in the node_segment to a translation service and then clears the node_segment data structure(step 720).
- The system then begins to process the next node in the frame by updating current_node to point to the next node in the frame (step 722). If the current node is not an end node for the frame, the system determines whether or not the new node is a text node (
steps 724, 712). Otherwise, the system increments the frame_index and determines whether frame_index is less than the total number of frames (step 726, 708) . - When the frame_index is not less than the total number of frames (i.e., all of the frames have been processed), the system sends the text in the node_segment to a translation service and then clears the node_segment data structure(step 728).
-
FIG. 8 illustrates anexample method 800 for switching from a translated version of a document to an original language version of a document using a cache. The method iterates over each valid node identified by the node_array and replaces the translated text in the node with the original text of the node. For convenience, theexample method 800 will be described in reference to a system that performs themethod 800. The system can be, for example, a computer running aweb browser 304 or aweb browser 404 with an add-in 412. - The system initializes node_array_index to 0 (step 802). The system then sets the current_node variable to point to the node stored in the node_array at the node_array_index, and stores the text stored in the original_string_array corresponding to the current node in a current_node_original_string data structure (step 806). The current_node_original_string stores the original text of the current node.
- The system determines whether the current node is a valid node (step 808), for example, as described above in reference to
FIG. 6 . If the current node is a valid node, the system replaces the current text of the current node with the text stored in the current_node_original_string (step 810). If the current node is not a valid node, the system skips the node. In some implementations, the system determines whether there is a modified node and requests translation of the modified node from the translation service as described above in reference toFIG. 6 . - The system then increments the node_array_index (step 812) and determines whether the node_array_index is less than the number of nodes in the node_array (step 804).
-
FIG. 9 illustrates anexample method 900 for translating the text of a markup language document. For convenience, theexample method 900 will be described in reference to a system that performs themethod 900. The system can be, for example, a computer running aweb browser 304 or aweb browser 404 with a browser add-in 412. - The system displays a markup language document (step 902). The markup language document can be, for example, a web document or a document on a user's local computer. Web documents can be retrieved using a secure transfer protocol, for example, using secure hypertext transfer protocol (HTTPS) or using an insecure transfer protocol, for example, hypertext transfer protocol (HTTP).
- The system displays a markup language document by rendering an internal representation of the document, for example, a document object model representation as described above in reference to
FIG. 1C . - The system sends a data structure containing the texts from the text nodes to a translation service, and the texts in the text nodes are replaced with corresponding translated texts to generate a translated internal representation of the markup language document (step 904). In some implementations, translation is requested as described above in reference to
FIG. 5 and the text of the nodes is replaced with translated texts as described above in reference toFIG. 6 . In alternative implementations, the text of each node is individually sent to a translation service. - A translation of the markup language document is displayed by rendering the translated internal representation (step 906).
- In some implementations, the system incrementally translates the text of the nodes and updates the internal representation. For example, the system can request translation of text corresponding to a subset of the text nodes, update the internal representation with translated texts corresponding to the subset of nodes resulting in a partially translated representation, and then render the partially translated representation. The system can then repeat those steps for a different subset of the text nodes. In some such implementations, the system can perform incremental translation as the markup language document is loaded (e.g., as portions of the internal representation are received).
- In some implementations, after the translated version of the document is displayed,
the system reverts the document to its original language (for example, in response to user input), and displays the original language version by rendering an original language internal representation of the document. In some implementations, the system generates the original language internal representation from a cache of the original language text of the nodes, for example, as described above in reference toFIG. 8 . In alternative implementations, the system maintains the original language internal representation as a shadow copy of the translated internal representation and updates the original language internal representation to reflect any changes to the text of the document. - After the translated version of the document is displayed, the system receives a notification that text in one of the text nodes is being replaced with new text. The system can receive the notification, for example, as a modification event from an event handler, for example, running in a markup language display program displaying the document. In response to the notification, the system sends a data structure containing the new text to the translation service and replaces the text in the text node with translated text received from the translation service. In some implementations, the modification event identifies the node being modified or added, and the system sends the text of that node to the translation service. In alternative implementations, the system traverses the internal representation to identify the node that has been modified or added, for example, as described above in reference to
FIG. 7 . - Embodiments of the subject matter and the operations described in this specification can be implemented in digital electronic circuitry, or in computer software, firmware, or hardware, including the structures disclosed in this specification and their structural equivalents, or in combinations of one or more of them. Embodiments of the subject matter described in this specification can be implemented as one or more computer programs, i.e., one or more modules of computer program instructions, encoded on a computer storage medium for execution by, or to control the operation of, data processing apparatus. Alternatively or in addition, the program instructions can be encoded on an artificially-generated propagated signal, e.g., a machine-generated electrical, optical, or electromagnetic signal, that is generated to encode information for transmission to suitable receiver apparatus for execution by a data processing apparatus. A computer storage medium can be, or be included in, a computer-readable storage device, a computer-readable storage substrate, a random or serial access memory array or device, or a combination of one or more of them. Moreover, while a computer storage medium is not a propagated signal, a computer storage medium can be a source or destination of computer program instructions encoded in an artificially-generated propagated signal. The computer storage medium can also be, or be included in, one or more separate physical components or media (e.g., multiple CDs, disks, or other storage devices).
- The operations described in this specification can be implemented as operations performed by a data processing apparatus on data stored on one or more computer-readable storage devices or received from other sources.
- The term "data processing apparatus" encompasses all kinds of apparatus, devices, and machines for processing data, including by way of example a programmable processor, a computer, a system on a chip, or multiple ones, or combinations, of the foregoing The apparatus can include special purpose logic circuitry, e.g., an FPGA (field programmable gate array) or an ASIC (application-specific integrated circuit). The apparatus can also include, in addition to hardware, code that creates an execution environment for the computer program in question, e.g., code that constitutes processor firmware, a protocol stack, a database management system, an operating system, a cross-platform runtime environment, a virtual machine, or a combination of one or more of them. The apparatus and execution environment can realize various different computing model infrastructures, such as web services, distributed computing and grid computing infrastructures.
- A computer program (also known as a program, software, software application, script, or code) can be written in any form of programming language, including compiled or interpreted languages, declarative or procedural languages, and it can be deployed in any form, including as a standalone program or as a module, component, subroutine, object, or other unit suitable for use in a computing environment. A computer program may, but need not, correspond to a file in a file system. A program can be stored in a portion of a file that holds other programs or data (e.g., one or more scripts stored in a markup language document), in a single file dedicated to the program in question, or in multiple coordinated files (e.g., files that store one or more modules, subprograms, or portions of code). A computer program can be deployed to be executed on one computer or on multiple computers that are located at one site or distributed across multiple sites and interconnected by a communication network.
- The processes and logic flows described in this specification can be performed by one or more programmable processors executing one or more computer programs to perform actions by operating on input data and generating output. The processes and logic flows can also be performed by, and apparatus can also be implemented as, special purpose logic circuitry, e.g., an FPGA (field programmable gate array) or an ASIC (application-specific integrated circuit).
- Processors suitable for the execution of a computer program include, by way of example, both general and special purpose microprocessors, and any one or more processors of any kind of digital computer. Generally, a processor will receive instructions and data from a read-only memory or a random access memory or both. The essential elements of a computer are a processor for performing actions in accordance with instructions and one or more memory devices for storing instructions and data. Generally, a computer will also include, or be operatively coupled to receive data from or transfer data to, or both, one or more mass storage devices for storing data, e.g., magnetic, magneto-optical disks, or optical disks. However, a computer need not have such devices. Moreover, a computer can be embedded in another device, e.g., a mobile telephone, a personal digital assistant (PDA), a mobile audio or video player, a game console, a Global Positioning System (GPS) receiver, or a portable storage device (e.g., a universal serial bus (USB) flash drive), to name just a few. Devices suitable for storing computer program instructions and data include all forms of nonvolatile memory, media and memory devices, including by way of example semiconductor memory devices, e.g., EPROM, EEPROM, and flash memory devices; magnetic disks, e.g., internal hard disks or removable disks; magneto-optical disks; and CDROM and DVD-ROM disks. The processor and the memory can be supplemented by, or incorporated in, special purpose logic circuitry.
- To provide for interaction with a user, embodiments of the subject matter described in this specification can be implemented on a computer having a display device, e.g., a CRT (cathode ray tube) or LCD (liquid crystal display) monitor, for displaying information to the user and a keyboard and a pointing device, e.g., a mouse or a trackball, by which the user can provide input to the computer. Other kinds of devices can be used to provide for interaction with a user as well; for example, feedback provided to the user can be any form of sensory feedback, e.g., visual feedback, auditory feedback, or tactile feedback; and input from the user can be received in any form, including acoustic, speech, or tactile input. In addition, a computer can interact with a user by sending documents to and receiving documents from a device that is used by the user; for example, by sending web pages to a web browser on a user's client device in response to requests received from the web browser.
- Embodiments of the subject matter described in this specification can be implemented in a computing system that includes a backend component, e.g., as a data server, or that includes a middleware component, e.g., an application server, or that includes a frontend component, e.g., a client computer having a graphical user interface or a Web browser through which a user can interact with an implementation of the subject matter described in this specification, or any combination of one or more such backend, middleware, or frontend components. The components of the system can be interconnected by any form or medium of digital data communication, e.g., a communication network. Examples of communication networks include a local area network ("LAN") and a wide area network ("WAN"), an inter-network (e.g., the Internet), and peer-to-peer networks (e.g., ad hoc peer-to-peer networks).
- The computing system can include clients and servers. A client and server are generally remote from each other and typically interact through a communication network. The relationship of client and server arises by virtue of computer programs running on the respective computers and having a client-server relationship to each other. In some embodiments, a server transmits data (e.g., an HTML page) to a client device (e.g., for purposes of displaying data to and receiving user input from a user interacting with the client device). Data generated at the client device (e.g., a result of the user interaction) can be received from the client device at the server.
- While this specification contains many specific implementation details, these should not be construed as limitations on the scope of the invention or of what may be claimed, but rather as descriptions of features specific to particular embodiments of the invention. Certain features that are described in this specification in the context of separate embodiments can also be implemented in combination in a single embodiment. Conversely, various features that are described in the context of a single embodiment can also be implemented in multiple
embodiments separately or in any suitable subcombination. Moreover, although features may be described above as acting in certain combinations and even initially claimed as such, one or more features from a claimed combination can in some cases be excised from the combination, and the claimed combination may be directed to a subcombination or variation of a subcombination. - Similarly, while operations are depicted in the drawings in a particular order, this should not be understood as requiring that such operations be performed in the particular order shown or in sequential order, or that all illustrated operations be performed, to achieve desirable results. In certain circumstances, multitasking and parallel processing may be advantageous. Moreover, the separation of various system components in the embodiments described above should not be understood as requiring such separation in all embodiments, and it should be understood that the described program components and systems can generally be integrated together in a single software product or packaged into multiple software products.
- Thus, particular embodiments of the invention have been described. Other embodiments are within the scope of the following claims. In some cases, the actions recited in the claims can be performed in a different order and still achieve desirable results. In addition, the processes depicted in the accompanying figures do not necessarily require the particular order shown, or sequential order, to achieve desirable results. In certain implementations, multitasking and parallel processing may be advantageous.
Claims (12)
- A system, comprising: one or more computers operable to perform operations comprising:displaying a markup language document in an original language by rendering an internal representation of the document, the representation including nodes, the nodes including one or more text nodes and one or more non-text nodes, the text nodes each including respective original text;while displaying the document from the internal representation, sending a data structure containing the texts from the text nodes, as distinct data entities, to a translation service and replacing the texts in the text nodes with corresponding translated texts received from the translation service to generate a first translated internal representation of the markup language document, where the original texts in the text nodes are in the original language and the translated texts are in a different second language; whereby a first translation of the markup language document is displayed by rendering the first translated internal representation;receiving a notification that first text in a first text node is being replaced with new text in the original language; andthen sending a data structure containing the new text to the translation service and replacing the text in the first text node with a first translated text in the second language received from the translation service to generate a second translated internal representation of the document; whereby a second translation of the markup language document is displayed by rendering the second translated internal representation.
- The system of claim 1 further comprising a server device providing the translation service.
- The system of claim 1, wherein the system comprises a client device running a markup language display program operable to perform the displaying a markup language document operation, and an add-in running in the markup language display program operable to perform the sending the data structure and replacing the texts in the text nodes operations.
- The system of claim 3, wherein the add-in is a gadget.
- The system of claim 3, wherein the add-in is a toolbar.
- The system of claim 1, wherein the system comprises a client device running a web browser operable to perform the displaying a markup language document, sending the data structure, and replacing the texts in the text nodes operations.
- The system of claim 1, wherein sending a data structure containing the texts of the text nodes comprises extracting the texts from the text nodes and assembling the extracted texts into the data structure, where each of the texts is stored as a distinct data entity in the data structure.
- The system of claim 1, wherein sending a data structure containing the texts of the text nodes comprises sending a copy of the internal representation.
- The system of claim 1, wherein sending a data structure containing the texts of the text nodes comprises sending the data structure in multiple segments.
- The system of claim 1, further operable to perform operations comprising:storing the original text corresponding to one or more text nodes;receiving input requesting display of the document in the original language;replacing the texts in the text nodes in the second translated internal representation with the corresponding original texts, resulting in an original language internal representation;whereby the markup language document is displayed by rendering the original language internal representation.
- A method comprising:providing a translation service that receives text and generates a translation of the text;providing a translation module configured to run in a markup language display program, the markup language display program displaying a markup language document in an original language by rendering an internal representation of the document, the representation including nodes, the nodes including one or more text nodes and one or more non-text nodes, the text nodes each including respective original text, the translation module configured to perform the following operations:while the markup language display program displays the document from the internal representation, sending a data structure containing the texts from the text nodes, as distinct data entities, to a translation service; andreplacing the texts in the text nodes with corresponding translated texts received from the translation service to generate a first translated internal representation of the markup language document, where the original texts in the text nodes are in the original language and the translated texts are in a different second language, andproviding the first translated internal representation to the markup language display program for rendering;wherein the translation module is further configured to perform the following operations:receiving a notification that first text in a first text node is being replaced with new text in the original language;then sending a data structure containing the new text to the translation service, andreplacing the text in the first text node with a first translated text in the second language received from the translation service to generate a second translated internal representation of the document; and thenproviding the second translated internal representation to the markup language display program for rendering.
- The method of claim 11, wherein sending a data structure containing the texts of the text nodes comprises extracting the texts from the text nodes and assembling the extracted texts into the data structure, where each of the texts is stored as a distinct data entity in the data structure.
Applications Claiming Priority (1)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
PCT/CN2009/000291 WO2010105383A1 (en) | 2009-03-18 | 2009-03-18 | Web translation with display replacement |
Publications (3)
Publication Number | Publication Date |
---|---|
EP2409248A1 EP2409248A1 (en) | 2012-01-25 |
EP2409248A4 EP2409248A4 (en) | 2018-01-24 |
EP2409248B1 true EP2409248B1 (en) | 2021-07-07 |
Family
ID=42739095
Family Applications (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
EP09841668.8A Active EP2409248B1 (en) | 2009-03-18 | 2009-03-18 | Web translation with display replacement |
Country Status (10)
Country | Link |
---|---|
US (1) | US8683329B2 (en) |
EP (1) | EP2409248B1 (en) |
JP (1) | JP5897456B2 (en) |
KR (1) | KR101642449B1 (en) |
CN (1) | CN102428461B (en) |
AU (1) | AU2009342361A1 (en) |
BR (1) | BRPI0924401B1 (en) |
CA (1) | CA2755427C (en) |
SG (1) | SG174407A1 (en) |
WO (1) | WO2010105383A1 (en) |
Families Citing this family (41)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
SG174407A1 (en) * | 2009-03-18 | 2011-10-28 | Google Inc | Web translation with display replacement |
CN101515300B (en) * | 2009-04-02 | 2011-07-20 | 阿里巴巴集团控股有限公司 | Method and system for grabbing Ajax webpage content |
US10671698B2 (en) | 2009-05-26 | 2020-06-02 | Microsoft Technology Licensing, Llc | Language translation using embeddable component |
US9405745B2 (en) * | 2009-06-01 | 2016-08-02 | Microsoft Technology Licensing, Llc | Language translation using embeddable component |
KR101388394B1 (en) * | 2010-06-25 | 2014-04-22 | 라쿠텐 인코포레이티드 | Machine translation system, method of machine translation, and recording medium |
US9411793B2 (en) | 2010-07-13 | 2016-08-09 | Motionpoint Corporation | Dynamic language translation of web site content |
US8307277B2 (en) * | 2010-09-10 | 2012-11-06 | Facebook, Inc. | Efficient event delegation in browser scripts |
US10657540B2 (en) | 2011-01-29 | 2020-05-19 | Sdl Netherlands B.V. | Systems, methods, and media for web content management |
US9547626B2 (en) | 2011-01-29 | 2017-01-17 | Sdl Plc | Systems, methods, and media for managing ambient adaptability of web applications and web services |
US10580015B2 (en) | 2011-02-25 | 2020-03-03 | Sdl Netherlands B.V. | Systems, methods, and media for executing and optimizing online marketing initiatives |
US8812295B1 (en) | 2011-07-26 | 2014-08-19 | Google Inc. | Techniques for performing language detection and translation for multi-language content feeds |
US9311426B2 (en) * | 2011-08-04 | 2016-04-12 | Blackberry Limited | Orientation-dependent processing of input files by an electronic device |
US9367539B2 (en) | 2011-11-03 | 2016-06-14 | Microsoft Technology Licensing, Llc | Techniques for automated document translation |
JP5911594B2 (en) * | 2011-11-25 | 2016-04-27 | グーグル インコーポレイテッド | Providing translation support for application localization |
US9773270B2 (en) | 2012-05-11 | 2017-09-26 | Fredhopper B.V. | Method and system for recommending products based on a ranking cocktail |
CN102693322B (en) * | 2012-06-01 | 2014-10-22 | 杭州海康威视数字技术股份有限公司 | Multi-language supporting webpage processing method, webpage loading method and systems |
US9116886B2 (en) * | 2012-07-23 | 2015-08-25 | Google Inc. | Document translation including pre-defined term translator and translation model |
US11386186B2 (en) | 2012-09-14 | 2022-07-12 | Sdl Netherlands B.V. | External content library connector systems and methods |
US10452740B2 (en) | 2012-09-14 | 2019-10-22 | Sdl Netherlands B.V. | External content libraries |
US11308528B2 (en) | 2012-09-14 | 2022-04-19 | Sdl Netherlands B.V. | Blueprinting of multimedia assets |
US9300760B2 (en) * | 2013-01-28 | 2016-03-29 | Google Inc. | Machine-specific instruction set translation |
CN104346153B (en) * | 2013-07-31 | 2018-04-17 | 国际商业机器公司 | Method and system for the text message of translation application |
US9524293B2 (en) * | 2014-08-15 | 2016-12-20 | Google Inc. | Techniques for automatically swapping languages and/or content for machine translation |
US10614167B2 (en) * | 2015-10-30 | 2020-04-07 | Sdl Plc | Translation review workflow systems and methods |
US10102203B2 (en) | 2015-12-21 | 2018-10-16 | Verisign, Inc. | Method for writing a foreign language in a pseudo language phonetically resembling native language of the speaker |
US9947311B2 (en) * | 2015-12-21 | 2018-04-17 | Verisign, Inc. | Systems and methods for automatic phonetization of domain names |
US10102189B2 (en) | 2015-12-21 | 2018-10-16 | Verisign, Inc. | Construction of a phonetic representation of a generated string of characters |
US9659010B1 (en) * | 2015-12-28 | 2017-05-23 | International Business Machines Corporation | Multiple language screen capture |
CN106202066B (en) * | 2016-07-05 | 2019-07-05 | 腾讯科技（深圳）有限公司 | The interpretation method and device of website |
US10235363B2 (en) * | 2017-04-28 | 2019-03-19 | Sap Se | Instant translation of user interfaces of a web application |
KR101977207B1 (en) | 2017-07-25 | 2019-06-18 | 주식회사 한글과컴퓨터 | Documents package translation system |
CN109598001A (en) | 2017-09-30 | 2019-04-09 | 阿里巴巴集团控股有限公司 | A kind of information display method, device and equipment |
US10893093B2 (en) * | 2018-01-18 | 2021-01-12 | International Business Machines Corporation | Translating a user's working context from one operating system and associated applications to a different operating system and associated applications |
CN108399166B (en) * | 2018-02-07 | 2021-03-30 | 深圳壹账通智能科技有限公司 | Text translation method and device, computer equipment and storage medium |
CN108491398B (en) * | 2018-03-26 | 2021-09-07 | 深圳市元征科技股份有限公司 | Method for translating updated software text and electronic equipment |
CN109271607A (en) * | 2018-08-17 | 2019-01-25 | 阿里巴巴集团控股有限公司 | User Page layout detection method and device, electronic equipment |
US11574134B2 (en) * | 2018-12-20 | 2023-02-07 | Lexmark International, Inc. | Systems and methods of processing a document in an imaging device |
CN110532576A (en) * | 2019-09-09 | 2019-12-03 | 深圳市元征科技股份有限公司 | A kind of data processing method, device and electronic equipment |
WO2021184249A1 (en) * | 2020-03-18 | 2021-09-23 | Citrix Systems, Inc. | Machine translation of digital content |
CN113743131A (en) * | 2020-05-28 | 2021-12-03 | 腾讯科技（深圳）有限公司 | Translation method and device of electronic mail and computer equipment |
CN113378585B (en) * | 2021-06-01 | 2023-09-22 | 珠海金山办公软件有限公司 | XML text data translation method and device, electronic equipment and storage medium |
Citations (2)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20060173829A1 (en) * | 2005-01-10 | 2006-08-03 | Neeman Yoni M | Embedded translation-enhanced search |
US20080077384A1 (en) * | 2006-09-22 | 2008-03-27 | International Business Machines Corporation | Dynamically translating a software application to a user selected target language that is not natively provided by the software application |
Family Cites Families (36)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
JPH0567141A (en) | 1991-09-09 | 1993-03-19 | Matsushita Electric Ind Co Ltd | Machine translation machine |
JPH0883280A (en) | 1994-09-14 | 1996-03-26 | Sharp Corp | Document processor |
US6993471B1 (en) * | 1995-11-13 | 2006-01-31 | America Online, Inc. | Integrated multilingual browser |
JP3121548B2 (en) * | 1996-10-15 | 2001-01-09 | インターナショナル・ビジネス・マシーンズ・コーポレ−ション | Machine translation method and apparatus |
US6347316B1 (en) * | 1998-12-14 | 2002-02-12 | International Business Machines Corporation | National language proxy file save and incremental cache translation option for world wide web documents |
US7185289B1 (en) | 1999-02-15 | 2007-02-27 | Minolta Co., Ltd. | Device and method for changing languages on a display |
JP2000305690A (en) * | 1999-02-15 | 2000-11-02 | Minolta Co Ltd | Display device |
US7607085B1 (en) * | 1999-05-11 | 2009-10-20 | Microsoft Corporation | Client side localizations on the world wide web |
US6598015B1 (en) * | 1999-09-10 | 2003-07-22 | Rws Group, Llc | Context based computer-assisted language translation |
US7134072B1 (en) * | 1999-10-13 | 2006-11-07 | Microsoft Corporation | Methods and systems for processing XML documents |
US7016977B1 (en) * | 1999-11-05 | 2006-03-21 | International Business Machines Corporation | Method and system for multilingual web server |
US7216072B2 (en) | 2000-02-29 | 2007-05-08 | Fujitsu Limited | Relay device, server device, terminal device, and translation server system utilizing these devices |
JP4073635B2 (en) * | 2000-02-29 | 2008-04-09 | 富士通株式会社 | Relay device, server device, terminal device, and translation server system using the same |
JP2001318918A (en) | 2000-05-09 | 2001-11-16 | Synergy:Kk | Translation device and its method |
US20040205671A1 (en) * | 2000-09-13 | 2004-10-14 | Tatsuya Sukehiro | Natural-language processing system |
US7194411B2 (en) * | 2001-02-26 | 2007-03-20 | Benjamin Slotznick | Method of displaying web pages to enable user access to text information that the user has difficulty reading |
US6999916B2 (en) * | 2001-04-20 | 2006-02-14 | Wordsniffer, Inc. | Method and apparatus for integrated, user-directed web site text translation |
JP3809863B2 (en) * | 2002-02-28 | 2006-08-16 | インターナショナル・ビジネス・マシーンズ・コーポレーション | server |
US20060075070A1 (en) * | 2002-04-02 | 2006-04-06 | Patrick Merissert-Coffinieres | Development and deployment of mobile and desktop applications within a flexible markup-based distributed architecture |
US7219120B2 (en) * | 2002-07-09 | 2007-05-15 | Savvis Communications Corporation | Systems, methods and protocols for securing data in transit over networks |
US7627817B2 (en) * | 2003-02-21 | 2009-12-01 | Motionpoint Corporation | Analyzing web site for translation |
JP4048188B2 (en) * | 2004-06-07 | 2008-02-13 | 株式会社インパルスジャパン | WEB page translation apparatus and WEB page translation method |
CN100354822C (en) * | 2004-07-09 | 2007-12-12 | 中国电子技术标准化研究所 | Conversion method of different language XML document |
US7805670B2 (en) * | 2005-12-16 | 2010-09-28 | Microsoft Corporation | Partial rendering of web pages |
US8006180B2 (en) * | 2006-01-10 | 2011-08-23 | Mircrosoft Corporation | Spell checking in network browser based applications |
US20080040094A1 (en) * | 2006-08-08 | 2008-02-14 | Employease, Inc. | Proxy For Real Time Translation of Source Objects Between A Server And A Client |
US7801721B2 (en) * | 2006-10-02 | 2010-09-21 | Google Inc. | Displaying original text in a user interface with translated text |
GB0623068D0 (en) * | 2006-11-18 | 2006-12-27 | Ibm | A client apparatus for updating data |
US8145993B2 (en) * | 2007-01-03 | 2012-03-27 | Oracle International Corporation | XML-based translation |
US7877251B2 (en) * | 2007-05-07 | 2011-01-25 | Microsoft Corporation | Document translation system |
US7974832B2 (en) * | 2007-12-12 | 2011-07-05 | Microsoft Corporation | Web translation provider |
CN101470705A (en) * | 2007-12-29 | 2009-07-01 | 英业达股份有限公司 | Dynamic web page translation system and method |
JP5151696B2 (en) * | 2008-05-30 | 2013-02-27 | 富士通株式会社 | Program to rewrite uniform resource locator information |
SG174407A1 (en) * | 2009-03-18 | 2011-10-28 | Google Inc | Web translation with display replacement |
US8478579B2 (en) * | 2009-05-05 | 2013-07-02 | Google Inc. | Conditional translation header for translation of web documents |
US9405745B2 (en) * | 2009-06-01 | 2016-08-02 | Microsoft Technology Licensing, Llc | Language translation using embeddable component |
-
2009
- 2009-03-18 SG SG2011066545A patent/SG174407A1/en unknown
- 2009-03-18 WO PCT/CN2009/000291 patent/WO2010105383A1/en active Application Filing
- 2009-03-18 US US13/256,415 patent/US8683329B2/en active Active
- 2009-03-18 CA CA2755427A patent/CA2755427C/en active Active
- 2009-03-18 KR KR1020117021872A patent/KR101642449B1/en active IP Right Grant
- 2009-03-18 BR BRPI0924401A patent/BRPI0924401B1/en active IP Right Grant
- 2009-03-18 EP EP09841668.8A patent/EP2409248B1/en active Active
- 2009-03-18 AU AU2009342361A patent/AU2009342361A1/en not_active Abandoned
- 2009-03-18 CN CN200980159038.0A patent/CN102428461B/en active Active
- 2009-03-18 JP JP2012500028A patent/JP5897456B2/en active Active
Patent Citations (2)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20060173829A1 (en) * | 2005-01-10 | 2006-08-03 | Neeman Yoni M | Embedded translation-enhanced search |
US20080077384A1 (en) * | 2006-09-22 | 2008-03-27 | International Business Machines Corporation | Dynamically translating a software application to a user selected target language that is not natively provided by the software application |
Non-Patent Citations (1)
Title |
---|
"Embedded NLS Solution For Web", IP.COM JOURNAL, IP.COM INC., WEST HENRIETTA, NY, US, 26 September 2006 (2006-09-26), XP013115943, ISSN: 1533-0001 * |
Also Published As
Publication number | Publication date |
---|---|
CN102428461A (en) | 2012-04-25 |
JP5897456B2 (en) | 2016-03-30 |
AU2009342361A1 (en) | 2011-10-06 |
US8683329B2 (en) | 2014-03-25 |
CN102428461B (en) | 2015-11-25 |
BRPI0924401B1 (en) | 2020-05-19 |
KR20120014239A (en) | 2012-02-16 |
CA2755427A1 (en) | 2010-09-23 |
EP2409248A4 (en) | 2018-01-24 |
JP2012521023A (en) | 2012-09-10 |
WO2010105383A1 (en) | 2010-09-23 |
CA2755427C (en) | 2017-03-14 |
BRPI0924401A2 (en) | 2016-01-26 |
US20120005571A1 (en) | 2012-01-05 |
SG174407A1 (en) | 2011-10-28 |
EP2409248A1 (en) | 2012-01-25 |
KR101642449B1 (en) | 2016-07-25 |
Similar Documents
Publication | Publication Date | Title |
---|---|---|
EP2409248B1 (en) | Web translation with display replacement | |
US8478579B2 (en) | Conditional translation header for translation of web documents | |
US9405745B2 (en) | Language translation using embeddable component | |
US10671698B2 (en) | Language translation using embeddable component | |
US8521892B2 (en) | Method and apparatus for controlling web page advertisement through incentives and restrictions | |
US8942973B2 (en) | Content page URL translation | |
US7974832B2 (en) | Web translation provider | |
US8914276B2 (en) | Dynamic video caption translation player | |
US9262544B2 (en) | Translating between address representations | |
US7844897B1 (en) | Blog template generation | |
US20140310588A1 (en) | Managing a display of results of a keyword search on a web page | |
US20130117716A1 (en) | Function Extension for Browsers or Documents | |
US10341415B2 (en) | Electronic information tree-based routing | |
US8862602B1 (en) | Systems and methods for improved readability of URLs | |
US20130155463A1 (en) | Method for selecting user desirable content from web pages | |
JP2008021307A (en) | Computer implemented method and system for managing server-based rendering of message in heterogeneous environment | |
JP2022547789A (en) | Translating multi-format embedded files | |
Kowalczyk et al. | Enhancing SEO in Single-Page Web Applications in Contrast with Multi-Page Applications | |
US20150324333A1 (en) | Systems and methods for automatically generating hyperlinks | |
JP2021526672A (en) | Conditional interpretation of a single style definition identifier on a resource | |
RU2767965C2 (en) | Method and system for translating a source phrase in a first language with a target phrase in a second language | |
JP2005216004A (en) | Program and communication method | |
Manhas et al. | Cross Browsers Compatibility of E-Government Websites |
Legal Events
Date | Code | Title | Description |
---|---|---|---|
PUAI | Public reference made under article 153(3) epc to a published international application that has entered the european phase |
Free format text: ORIGINAL CODE: 0009012 |
|
17P | Request for examination filed |
Effective date: 20111010 |
|
AK | Designated contracting states |
Kind code of ref document: A1Designated state(s): AT BE BG CH CY CZ DE DK EE ES FI FR GB GR HR HU IE IS IT LI LT LU LV MC MK MT NL NO PL PT RO SE SI SK TR |
|
DAX | Request for extension of the european patent (deleted) | ||
RIN1 | Information on inventor provided before grant (corrected) |
Inventor name: HORNUNG, ZELIDRAGInventor name: TANG, JIEInventor name: CHIN, JEFFREYInventor name: ROSART, DANIELInventor name: YAO, BAOGANGInventor name: SHAH, AVNI |
|
RAP1 | Party data changed (applicant data changed or rights of an application transferred) |
Owner name: GOOGLE LLC |
|
RA4 | Supplementary search report drawn up and despatched (corrected) |
Effective date: 20180104 |
|
RIC1 | Information provided on ipc code assigned before grant |
Ipc: G06F 17/28 20060101AFI20171221BHEP |
|
STAA | Information on the status of an ep patent application or granted ep patent |
Free format text: STATUS: EXAMINATION IS IN PROGRESS |
|
17Q | First examination report despatched |
Effective date: 20191219 |
|
STAA | Information on the status of an ep patent application or granted ep patent |
Free format text: STATUS: EXAMINATION IS IN PROGRESS |
|
REG | Reference to a national code |
Ref country code: DERef legal event code: R079Ref document number: 602009063862Country of ref document: DEFree format text: PREVIOUS MAIN CLASS: G06F0017280000Ipc: G06F0016840000 |
|
GRAP | Despatch of communication of intention to grant a patent |
Free format text: ORIGINAL CODE: EPIDOSNIGR1 |
|
STAA | Information on the status of an ep patent application or granted ep patent |
Free format text: STATUS: GRANT OF PATENT IS INTENDED |
|
RIC1 | Information provided on ipc code assigned before grant |
Ipc: G06F 16/84 20190101AFI20210219BHEPIpc: G06F 16/957 20190101ALI20210219BHEP |
|
INTG | Intention to grant announced |
Effective date: 20210322 |
|
GRAS | Grant fee paid |
Free format text: ORIGINAL CODE: EPIDOSNIGR3 |
|
GRAA | (expected) grant |
Free format text: ORIGINAL CODE: 0009210 |
|
STAA | Information on the status of an ep patent application or granted ep patent |
Free format text: STATUS: THE PATENT HAS BEEN GRANTED |
|
AK | Designated contracting states |
Kind code of ref document: B1Designated state(s): AT BE BG CH CY CZ DE DK EE ES FI FR GB GR HR HU IE IS IT LI LT LU LV MC MK MT NL NO PL PT RO SE SI SK TR |
|
REG | Reference to a national code |
Ref country code: GBRef legal event code: FG4D |
|
REG | Reference to a national code |
Ref country code: ATRef legal event code: REFRef document number: 1409269Country of ref document: ATKind code of ref document: TEffective date: 20210715 |
|
REG | Reference to a national code |
Ref country code: DERef legal event code: R096Ref document number: 602009063862Country of ref document: DE |
|
REG | Reference to a national code |
Ref country code: IERef legal event code: FG4D |
|
REG | Reference to a national code |
Ref country code: LTRef legal event code: MG9D |
|
REG | Reference to a national code |
Ref country code: NLRef legal event code: MPEffective date: 20210707 |
|
REG | Reference to a national code |
Ref country code: ATRef legal event code: MK05Ref document number: 1409269Country of ref document: ATKind code of ref document: TEffective date: 20210707 |
|
PG25 | Lapsed in a contracting state [announced via postgrant information from national office to epo] |
Ref country code: HRFree format text: LAPSE BECAUSE OF FAILURE TO SUBMIT A TRANSLATION OF THE DESCRIPTION OR TO PAY THE FEE WITHIN THE PRESCRIBED TIME-LIMITEffective date: 20210707Ref country code: SEFree format text: LAPSE BECAUSE OF FAILURE TO SUBMIT A TRANSLATION OF THE DESCRIPTION OR TO PAY THE FEE WITHIN THE PRESCRIBED TIME-LIMITEffective date: 20210707Ref country code: NLFree format text: LAPSE BECAUSE OF FAILURE TO SUBMIT A TRANSLATION OF THE DESCRIPTION OR TO PAY THE FEE WITHIN THE PRESCRIBED TIME-LIMITEffective date: 20210707Ref country code: NOFree format text: LAPSE BECAUSE OF FAILURE TO SUBMIT A TRANSLATION OF THE DESCRIPTION OR TO PAY THE FEE WITHIN THE PRESCRIBED TIME-LIMITEffective date: 20211007Ref country code: PTFree format text: LAPSE BECAUSE OF FAILURE TO SUBMIT A TRANSLATION OF THE DESCRIPTION OR TO PAY THE FEE WITHIN THE PRESCRIBED TIME-LIMITEffective date: 20211108Ref country code: ESFree format text: LAPSE BECAUSE OF FAILURE TO SUBMIT A TRANSLATION OF THE DESCRIPTION OR TO PAY THE FEE WITHIN THE PRESCRIBED TIME-LIMITEffective date: 20210707Ref country code: FIFree format text: LAPSE BECAUSE OF FAILURE TO SUBMIT A TRANSLATION OF THE DESCRIPTION OR TO PAY THE FEE WITHIN THE PRESCRIBED TIME-LIMITEffective date: 20210707Ref country code: LTFree format text: LAPSE BECAUSE OF FAILURE TO SUBMIT A TRANSLATION OF THE DESCRIPTION OR TO PAY THE FEE WITHIN THE PRESCRIBED TIME-LIMITEffective date: 20210707Ref country code: ATFree format text: LAPSE BECAUSE OF FAILURE TO SUBMIT A TRANSLATION OF THE DESCRIPTION OR TO PAY THE FEE WITHIN THE PRESCRIBED TIME-LIMITEffective date: 20210707Ref country code: BGFree format text: LAPSE BECAUSE OF FAILURE TO SUBMIT A TRANSLATION OF THE DESCRIPTION OR TO PAY THE FEE WITHIN THE PRESCRIBED TIME-LIMITEffective date: 20211007 |
|
PG25 | Lapsed in a contracting state [announced via postgrant information from national office to epo] |
Ref country code: PLFree format text: LAPSE BECAUSE OF FAILURE TO SUBMIT A TRANSLATION OF THE DESCRIPTION OR TO PAY THE FEE WITHIN THE PRESCRIBED TIME-LIMITEffective date: 20210707Ref country code: LVFree format text: LAPSE BECAUSE OF FAILURE TO SUBMIT A TRANSLATION OF THE DESCRIPTION OR TO PAY THE FEE WITHIN THE PRESCRIBED TIME-LIMITEffective date: 20210707Ref country code: GRFree format text: LAPSE BECAUSE OF FAILURE TO SUBMIT A TRANSLATION OF THE DESCRIPTION OR TO PAY THE FEE WITHIN THE PRESCRIBED TIME-LIMITEffective date: 20211008 |
|
REG | Reference to a national code |
Ref country code: DERef legal event code: R097Ref document number: 602009063862Country of ref document: DE |
|
PG25 | Lapsed in a contracting state [announced via postgrant information from national office to epo] |
Ref country code: DKFree format text: LAPSE BECAUSE OF FAILURE TO SUBMIT A TRANSLATION OF THE DESCRIPTION OR TO PAY THE FEE WITHIN THE PRESCRIBED TIME-LIMITEffective date: 20210707 |
|
PLBE | No opposition filed within time limit |
Free format text: ORIGINAL CODE: 0009261 |
|
STAA | Information on the status of an ep patent application or granted ep patent |
Free format text: STATUS: NO OPPOSITION FILED WITHIN TIME LIMIT |
|
PG25 | Lapsed in a contracting state [announced via postgrant information from national office to epo] |
Ref country code: SKFree format text: LAPSE BECAUSE OF FAILURE TO SUBMIT A TRANSLATION OF THE DESCRIPTION OR TO PAY THE FEE WITHIN THE PRESCRIBED TIME-LIMITEffective date: 20210707Ref country code: ROFree format text: LAPSE BECAUSE OF FAILURE TO SUBMIT A TRANSLATION OF THE DESCRIPTION OR TO PAY THE FEE WITHIN THE PRESCRIBED TIME-LIMITEffective date: 20210707Ref country code: EEFree format text: LAPSE BECAUSE OF FAILURE TO SUBMIT A TRANSLATION OF THE DESCRIPTION OR TO PAY THE FEE WITHIN THE PRESCRIBED TIME-LIMITEffective date: 20210707Ref country code: CZFree format text: LAPSE BECAUSE OF FAILURE TO SUBMIT A TRANSLATION OF THE DESCRIPTION OR TO PAY THE FEE WITHIN THE PRESCRIBED TIME-LIMITEffective date: 20210707 |
|
26N | No opposition filed |
Effective date: 20220408 |
|
PG25 | Lapsed in a contracting state [announced via postgrant information from national office to epo] |
Ref country code: ITFree format text: LAPSE BECAUSE OF FAILURE TO SUBMIT A TRANSLATION OF THE DESCRIPTION OR TO PAY THE FEE WITHIN THE PRESCRIBED TIME-LIMITEffective date: 20210707 |
|
PG25 | Lapsed in a contracting state [announced via postgrant information from national office to epo] |
Ref country code: MCFree format text: LAPSE BECAUSE OF FAILURE TO SUBMIT A TRANSLATION OF THE DESCRIPTION OR TO PAY THE FEE WITHIN THE PRESCRIBED TIME-LIMITEffective date: 20210707 |
|
REG | Reference to a national code |
Ref country code: CHRef legal event code: PL |
|
REG | Reference to a national code |
Ref country code: BERef legal event code: MMEffective date: 20220331 |
|
PG25 | Lapsed in a contracting state [announced via postgrant information from national office to epo] |
Ref country code: LUFree format text: LAPSE BECAUSE OF NON-PAYMENT OF DUE FEESEffective date: 20220318Ref country code: LIFree format text: LAPSE BECAUSE OF NON-PAYMENT OF DUE FEESEffective date: 20220331Ref country code: IEFree format text: LAPSE BECAUSE OF NON-PAYMENT OF DUE FEESEffective date: 20220318Ref country code: CHFree format text: LAPSE BECAUSE OF NON-PAYMENT OF DUE FEESEffective date: 20220331 |
|
PG25 | Lapsed in a contracting state [announced via postgrant information from national office to epo] |
Ref country code: BEFree format text: LAPSE BECAUSE OF NON-PAYMENT OF DUE FEESEffective date: 20220331 |
|
PGFP | Annual fee paid to national office [announced via postgrant information from national office to epo] |
Ref country code: FRPayment date: 20230327Year of fee payment: 15 |
|
P01 | Opt-out of the competence of the unified patent court (upc) registered |
Effective date: 20230505 |
|
PG25 | Lapsed in a contracting state [announced via postgrant information from national office to epo] |
Ref country code: HUFree format text: LAPSE BECAUSE OF FAILURE TO SUBMIT A TRANSLATION OF THE DESCRIPTION OR TO PAY THE FEE WITHIN THE PRESCRIBED TIME-LIMIT; INVALID AB INITIOEffective date: 20090318 |
|
PG25 | Lapsed in a contracting state [announced via postgrant information from national office to epo] |
Ref country code: MKFree format text: LAPSE BECAUSE OF FAILURE TO SUBMIT A TRANSLATION OF THE DESCRIPTION OR TO PAY THE FEE WITHIN THE PRESCRIBED TIME-LIMITEffective date: 20210707Ref country code: CYFree format text: LAPSE BECAUSE OF FAILURE TO SUBMIT A TRANSLATION OF THE DESCRIPTION OR TO PAY THE FEE WITHIN THE PRESCRIBED TIME-LIMITEffective date: 20210707 |
|
PGFP | Annual fee paid to national office [announced via postgrant information from national office to epo] |
Ref country code: DEPayment date: 20240327Year of fee payment: 16Ref country code: GBPayment date: 20240327Year of fee payment: 16 |