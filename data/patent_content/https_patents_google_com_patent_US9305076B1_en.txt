US9305076B1 - Flattening a cluster hierarchy tree to filter documents - Google Patents
Flattening a cluster hierarchy tree to filter documents Download PDFInfo
- Publication number
- US9305076B1 US9305076B1 US13/836,970 US201313836970A US9305076B1 US 9305076 B1 US9305076 B1 US 9305076B1 US 201313836970 A US201313836970 A US 201313836970A US 9305076 B1 US9305076 B1 US 9305076B1
- Authority
- US
- United States
- Prior art keywords
- documents
- clustering
- cluster
- clusters
- hierarchy
- Prior art date
- Legal status (The legal status is an assumption and is not a legal conclusion. Google has not performed a legal analysis and makes no representation as to the accuracy of the status listed.)
- Active, expires
Links
Images
Classifications
-
- G06F17/30598—
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F16/00—Information retrieval; Database structures therefor; File system structures therefor
- G06F16/20—Information retrieval; Database structures therefor; File system structures therefor of structured data, e.g. relational data
- G06F16/28—Databases characterised by their database models, e.g. relational or object models
- G06F16/284—Relational databases
- G06F16/285—Clustering or classification
Definitions
- Grouping documents according to a common theme allows reviewers to become knowledgeable about the particular theme of the document they are reviewing, and allows for faster and more accurate review. Additionally, grouping documents together allows for certain bulk operations, such as discarding of a large group of documents that are very likely to be not relevant to the litigation.
- Embodiments of the present invention relate to clustering documents relevant to a subject.
- a method of clustering a set of documents relevant to a subject is disclosed.
- Documents are clustered according to a partitional clustering approach to create a cluster hierarchy.
- One or more branches or levels of the cluster hierarchy are selectively flattened.
- the flattened branches of the cluster hierarchy are re-clustered.
- FIG. 1 is an illustration of a term-document incidence matrix.
- FIG. 2 is an illustration of a cluster hierarchy created as a result of an agglomerative clustering approach.
- FIG. 3 is an illustration of a cluster hierarchy created as a result of a partitional clustering approach.
- FIG. 4 is a flow diagram of a method for clustering documents in accordance with an embodiment.
- FIG. 5A is an example of an execution of a method in accordance with an embodiment.
- FIG. 5B is an example of an execution of a method in accordance with an embodiment.
- FIG. 5C is an example of an execution of a method in accordance with an embodiment.
- FIG. 6 is an illustration of a system in accordance with an embodiment.
- references to “one embodiment”, “an embodiment”, “an example embodiment”, etc. indicate that the embodiment described may include a particular feature, structure, or characteristic, but every embodiment may not necessarily include the particular feature, structure, or characteristic. Moreover, such phrases are not necessarily referring to the same embodiment. Further, when a particular feature, structure, or characteristic is described in connection with an embodiment, it is submitted that it is within the knowledge of one skilled in the art to effect such feature, structure, or characteristic in connection with other embodiments whether or not explicitly described.
- Electronic discovery tools are now used in the vast majority of modern litigations.
- a vendor will collect a set of electronic documents from a business facing a litigation or threat of litigation, and load the documents into a database for further analysis. Analysis may include sorting the documents, filtering them according to a query, or partitioning them to be reviewed by specific reviewers.
- One useful analysis method is to group documents according to a certain theme or other criteria. Grouped documents can then be reviewed together, such that documents related to a particular criteria are all reviewed at the same time. This eliminates the need for a reviewer to keep track of multiple concepts at once. Instead, a reviewer can focus on one concept for a grouped set of documents, and move on to another group related to another concept.
- a set of collected documents may number from thousands to millions of documents. These large sets of documents pose many issues. Database performance on large numbers of documents degrades quickly. Analysis on even a relatively small set of documents may take hours or even days for a relatively simple goal, such as determining a count of instances of a particular phrase.
- clustering routines may be used to create clusters of related documents.
- Clustering routines utilize a measure of similarity between two or more documents and aim to group the most similar documents together into one or more clusters.
- Clustering on text may start by analyzing text documents to determine word counts. Documents may be then clustered together based on the word count statistics. For example, three documents that frequently mention the term “patent” may be clustered together, while four documents that frequently mention the word “copyright” may be clustered together, separate from the “patent” set.
- Clustering documents depends on the similarity between two documents. In many clustering algorithms, statistics regarding word frequency and presence in a document are used to compare documents. Documents may be represented as vectors of the words contained in each document. A term-document incidence matrix may be created to represent each document in a matrix. For example, a matrix may represent each document as a column, and each word contained in all of the documents as a row. The matrix may omit common words such as “to” or “and”, since these words may be present in many documents. The intersection of each document column and each word row contains a value indicating whether the particular word is contained in the document. This value is entered for each document contained in the set to be clustered. A portion of a term-document index is shown in FIG. 1 for four exemplary documents.
- each column may be considered as a vector representation of a particular document.
- a similarity calculation may be performed.
- Each document vector may be represented in a vector space model.
- a similarity measure such as the cosine similarity
- a cosine similarity function determines the cosine of the angle between two vectors, such as document vectors, and returns values between zero and 1. A value of zero indicates that the two documents are entirely dissimilar, while a value of 1 indicates that the two documents are identical.
- Hierarchical clustering creates a representation of clusters in a tree form with a central node or root and branches that stem from the root. Branches represent sub-trees connected to the root and leaf nodes. A leaf may represent individual documents or a cluster, depending on the level of clustering applied. Sub-trees themselves may represent a hierarchy of clusters of documents.
- the two main methods of hierarchical clustering are known as top-down clustering and bottom-up clustering.
- Bottom-up clustering may also be known as agglomerative clustering.
- agglomerative clustering routines start with the individual documents of the set to be clustered. Based on their similarities, two or more documents may be merged to create a cluster. A similarity calculation may return that two documents should be clustered together based on a list of common words. Other similarity calculations may be used as well that will be known to those skilled in the art. Two clusters may then be clustered together, again based on their similarity. Once all sub-clusters are clustered together, the agglomerative clustering routine is complete.
- An example of an agglomerative clustering routine may be shown using the tree structure of FIG. 2 .
- eight words 201 a - 201 h exist, each a particular dog breed.
- similarity is based on alphabetical ordering.
- Clusters are formed with the elements that are most similar to one another.
- the eight words are may be clustered together into four clusters at level 203 , forming sub-trees with nodes 203 a - 203 d as the roots of the sub-trees.
- the four clusters are then clustered into two clusters, again based on similarity, at level 205 , forming two further sub-trees with nodes 205 a and 205 b as the roots of the sub-trees. Finally, the two intermediate clusters are clustered together into one root cluster at level 207 to form the overall tree hierarchy.
- agglomerative clustering routines are that a number of clusters need not be specified before the clustering operation takes place. Further, a representation of an agglomerative clustering routine may be browsed, in that one can follow how a particular document is clustered throughout the hierarchy. In the example above, a user can follow word 201 b through the hierarchy. If a particular cluster level exhibits undesirable results, for example, if two documents are clustered together that are not similar enough, the resulting hierarchy can be cut at that point such that the clusters are cohesive. Agglomerative routines are also considered superior to partitional clustering routines in terms of how cohesive related clusters are. Cohesiveness is measured as the similarity between all elements of a particular cluster, and may use the cosine similarity calculation detailed above, or any other similarity calculation.
- agglomerative clustering routines are slow in execution time, particularly with large sets of data.
- Agglomerative clustering routines at their best, have a time complexity that is exponentially related to the number of documents to be clustered.
- Agglomerative clustering similarity measures include single-link and/or complete-link clustering.
- single link clustering the similarity between two clusters is computed as the similarity of the members of the two clusters that are the most similar to each other.
- the distances between all elements are calculated.
- the elements that are closest to each other form a cluster of two elements for each singular element.
- the similarity between two clusters of two elements is calculated, and the closest or most similar clusters are merged to create a new cluster. This process repeats until a specified stopping level (such as when a maximum number of documents per cluster is reached), or until all documents are clustered together in one cluster of all documents.
- the similarity between two clusters is computed as the similarity of the two clusters' most dissimilar elements.
- the two clusters or elements to be merged have the greatest distance between the two most dissimilar elements.
- the distances between all elements are calculated.
- elements that are most dissimilar form a cluster of two elements, and this step repeats for each cluster until a hierarchy is formed.
- Top-down clustering may also be known as divisive or partitional clustering. Top-down clustering starts with the entire set of data to be clustered, and a number of clusters to be created is specified. Based on the data in the set, clusters may be formed by partitioning the set at a particular point or points. The results of the partition may then be partitioned themselves, until the routine terminates when it has reached the previously specified number of clusters.
- partitional clustering To partition one set into two or more clusters, partitional clustering often employs a clustering sub-routine.
- One such clustering sub-routine is known as k-means clustering.
- K-means clustering attempts to partition a set of observations or a set of data into k clusters, where each element of the set of data belongs to the cluster with the nearest mean or average. The mean is calculated as the center of the data points in the particular cluster.
- k initial means or points are randomly selected from the set of documents.
- Clusters are created by associating documents most similar to the initially selected means into one cluster. After associating documents with the closest means, the center of each cluster is calculated. The center of each cluster is known as the centroid. Documents closest to each centroid are associated with the centroid to create new clusters. The process repeats, calculating new centroids each iteration, until a particular stopping condition occurs.
- the stopping condition may be that the centroids do not change from iteration to iteration, or that a certain number of iterations has occurred.
- k may be set to 2.
- two initial means or points are randomly selected from the data set.
- Clusters are created by associating each data point in the set with the nearest initial mean.
- Distance may be calculated using cosine similarity as described above or any other similarity measure.
- the centroid of each cluster is calculated. This centroid becomes the new mean around which to cluster the data points into two new clusters.
- k clusters are created by again associating each data point in the set with the nearest initial mean.
- the step of calculating new means and associating data points with means are repeated until the stopping condition. This ensures that the selected mean and the clusters are optimal.
- the k-means routine repeats recursively on each of the two clusters, with k set to 2 again, until a hierarchy is created. These divided clusters are connected to their initial clusters to form a hierarchy.
- FIG. 3 An example of a partitional clustering routine may be shown using the tree structure of FIG. 3 .
- a set of eight documents is to be clustered.
- k is chosen to be 2, which allows the set of documents to be partitioned and represented as a binary tree.
- the root of 8 documents is partitioned into two sets. Those two sets are each partitioned into two sets, forming sub-trees. This step is repeated until the routine terminates with each document representing a cluster.
- the document sets of FIG. 2 and FIG. 3 are identical, the different clustering routines may result in different created hierarchies. This can be seen at level 305 , where the clusters of two documents each are slightly different than the clusters at level 203 of FIG. 2 .
- Partitional clustering routines have the advantage of being easier to implement than agglomerative clustering, and are generally faster in execution time than agglomerative clustering.
- K-means clustering for example, has a time complexity that is linearly related to the number of documents to be clustered and the value chosen for k.
- partitional clustering routines may not provide results that are as accurate as agglomerative clustering routines.
- the results of a k-means clustering process often depend on good initial means being selected for each cluster. If the initial means is not optimal, clusters may not provide optimal results. As shown with respect to FIG. 3 , clusters 307 a and 307 b may not be as cohesive as an agglomerative clustering routine's clusters.
- agglomerative and partitional clustering routines have their respective advantages and disadvantages. Partitional clustering routines are faster on large sets of data than agglomerative routines, while agglomerative routines may provide more accurate clustering results.
- the best agglomerative clustering routines execute on the order of exponential time. In computer science, using Big O notation, this is known as O(n 2 ) time, where n is the number of documents in the set to be clustered. As an example, assuming an agglomerative clustering routine takes 1 micro-second per document to execute (0.000001 seconds), clustering 1 million documents using the best agglomerative clustering routines would take on the order of 10 ⁇ 6 seconds, or over 10 days. In a document review environment, a set containing 1 million documents may be typical. Thus, agglomerative clustering routines may be too time-intensive on large document sets to be useful in a document review environment.
- the fastest partitional clustering routines execute in linear time, such as k-means described above. Using Big O notation, this may be known as O(kn) time, where n is the number of documents in the set to be clustered and k is the amount of clusters to create.
- O(kn) time where n is the number of documents in the set to be clustered and k is the amount of clusters to create.
- each clustering routine may vary with the implementation used. However, in nearly all instances, a partitional clustering routine will execute faster over the same amount of data than an agglomerative clustering routine will. Thus, in an embodiment, multiple clustering routines are executed to create superior results.
- FIG. 4 is an illustration of a method 400 for a method of clustering documents identified to be relevant to a subject in accordance with an embodiment.
- a set of documents identified as potentially being relevant to a subject are selected.
- the documents may be text documents, spreadsheets, electronic mail messages, presentations, or any other type of electronic document.
- the documents may be stored in a database, on a storage device, or on a plurality of storage devices.
- the documents identified in block 402 are clustered into a hierarchy according to a partitional clustering approach.
- the created hierarchy may be represented as a tree structure with multiple branches. Each branch contains either a sub-tree or a leaf node.
- a leaf node may represent either a singular document or a cluster of documents.
- a sub-tree is a collection of nodes in a tree structure.
- Documents may be clustered together based on the similarity of data contained in various fields of the document. For example, electronic mail messages may be clustered based on the similarity of their subject fields. Text documents may be clustered together based on the similarity of the text contained in the document.
- one or more branches of the cluster hierarchy are flattened.
- Flattening a branch may be known as recreating a divided cluster by combining the clusters that resulted after its division.
- Branches may be selected to be flattened if the cohesiveness of the divided clusters falls below a particular defined threshold. For example, cosine similarity may provide a measure of cohesiveness of a cluster. Thus, if the cohesiveness of a divided cluster falls below a certain number, the branch may be selected for re-clustering.
- a user may review the results of the cluster hierarchy that is created, and identify particular branches or clusters that require re-clustering in order to give a superior result.
- a number of branches may always he flattened in order to reap the benefits of an agglomerative clustering approach.
- the cluster hierarchy is always flattened at the (n-2) level, where n is the number of levels in the cluster hierarchy.
- the flattened branches are then re-clustered according to an agglomerative clustering approach.
- Any agglomerative clustering routine may be used, depending on the implementation chosen. For example, a particular user may use single-link clustering or complete-link clustering. Again, documents may be clustered together based on the similarity of data contained in various fields of the document. The agglomerative clustering approach re-clusters the flattened branches into a further hierarchy.
- the set of documents may be initially clustered in accordance with block 404 of method 400 using, for example, k-means clustering.
- a cluster hierarchy such as the one shown in FIG. 5A may be the result of the partitional clustering utilizing a k-means routine. As explained above, this operation executes in a smaller amount of time than a comparable agglomerative clustering routine over the same set of data.
- a level or levels of the cluster tree may be selectively flattened.
- the levels contain 1, 2, 4, 8, and 16 clusters per level, respectively. Flattening the bottom two levels of this cluster tree would effectively end the tree at the 4 cluster level.
- those levels may be flattened up to level 505 . The result of such a flattening operation is shown in FIG. 5B .
- the level of cluster to be flattened may be decided according to pre-determined criteria. For example, if the similarity between documents in a particular cluster falls below a certain threshold, the cluster may be selected for flattening.
- a particular level of a cluster hierarchy may always be flattened so that the agglomerative clustering routine is always executed.
- the bottom two or bottom three levels of a hierarchy may always be flattened to execute an agglomerative clustering routine on those clusters.
- the entire level is not flattened. Rather, only those selected sub-trees and clusters that fall below a particular cohesiveness threshold may be flattened. For example, in FIG. 5C , only selected branches at level 507 and 509 are flattened.
- an agglomerative clustering routine may be executed on the documents in each of the clusters at level 9.
- agglomerative clustering routine runtimes may be very long on large sets of documents.
- the time required by 9 agglomerative clustering routines on 9 smaller sets of documents is less than the time required by one agglomerative clustering routine on a very large set of documents.
- each cluster contains the same amount of documents.
- each of the two clusters contains 32,678 documents.
- each of the four clusters contains 16,384 documents, and so on.
- each document cluster contains 256 documents.
- each document cluster contains 128 documents, while each cluster in level 11 contains 64 documents and each cluster in level 12 contains 32 documents.
- the partitional clustering operation may take approximately 1310 seconds per level, or 15,720 seconds to generate the entire tree.
- a comparable agglomerative clustering routine may take 515,396,075 seconds to execute for the entire hierarchy.
- a user may identify that the clusters at those levels lack cohesiveness, or are not clustered well.
- the documents in those clusters may exhibit a low cosine similarity or other measure of similarity.
- the user may desire an agglomerative approach to clustering documents at those levels to improve the cohesiveness of the clusters.
- Re-clustering using an agglomerative approach at level 9 then, where each cluster contains 265 documents, at 0.01 seconds per document, takes 655 seconds per cluster, or 5240 seconds for all clusters in the level. Further clustering at level 10, where each cluster contains 128 documents, at 0.01 seconds per document, takes 163 seconds per cluster, or 2608 seconds for all clusters in the level. Clustering at level 11 takes 40 seconds per cluster or 1310 seconds for all clusters in the level, and clustering at level 12 takes 10 seconds per cluster or 640 seconds for all clusters in the level.
- the step of performing an agglomerative clustering approach may be done in parallel on multiple machines. For example, if the flattened cluster tree results in nine clusters to be further clustered with an agglomerative approach, as in the example above, nine machines may each operate on one cluster such that the operation may complete in 1/9 th of the time that it would if the operation were completed on one singular machine.
- an agglomerative clustering operation may be executed on the individual flattened clusters.
- the agglomerative approach may result in more useful clusters than if the initial partitional clustering method were used for the entire tree.
- clustering on data contained in non-content parameters of an electronic document may be faster than clustering on content data.
- clustering according to a partitional approach is done on data contained in non-content parameters, as described with respect to block 402 of method 400 .
- the re-clustering operation done according to an agglomerative approach may be done on data contained in content parameters of a document to form more cohesive clusters.
- a maximum number of documents per cluster at the completion of the re-clustering operation may be received. For example, in order to provide a manageable set of documents to review for a litigation, 1000 documents may be set as the maximum number of documents per cluster.
- a maximum tree depth level may be received for the initial or the second clustering operation. Tree depth may be measured using the number of steps or connections from the root of the hierarchy to the leaf nodes. For example, a user may desire that the partitional clustering hierarchy terminate after twelve levels. Additionally, the maximum tree depth level for the agglomerative clustering portion of method 400 may be received. For example, the agglomerative clustering operation may terminate after a sub-tree depth of 3 to ensure that an agglomerative clustering operation completes in a desired amount of time.
- documents to be clustered may not be located in a single database. Instead, documents may be distributed across a plurality of clients, such as in a hosted user environment utilizing distributed storage. Thus, in an embodiment, clustering may be performed on a set of documents distributed across a plurality of client devices.
- a maximum or minimum number of levels to flatten may be received as well. For example, based on knowledge of a particular partitional clustering method, a user may identify that the particular partitional clustering method used creates desirable clusters until a certain level, such as the tenth level of a binary tree, but subsequent levels are undesirable. Therefore, in an embodiment, a cluster hierarchy may always be flattened at a particular level. Additionally, as stated above, a maximum number of levels to be flattened may be received.
- the resulting clusters may be filtered in accordance with specified filter criteria.
- a cluster may represent a group of e-mails responsive to a particular subject.
- the cluster can then be further filtered according to desired criteria to present a smaller set of responsive documents for review or other purposes.
- the clustering approaches described herein can be implemented in software, firmware, hardware, or any combination thereof.
- the cluster approaches may be implemented to run on any type of processing device including, but not limited to, a computer, workstation, distributed computing system, embedded system, stand-alone electronic device, networked device, mobile device, set-top box, television, or other type of processor or computer system.
- FIG. 6 is an illustration of a cluster system 600 used to implement embodiments described herein.
- Documents 601 relevant to a subject may be provided to cluster system 600 .
- Documents 601 may be provided from a database or other repository implemented in hardware, software, firmware, or a combination thereof.
- Cluster system 600 contains a first clustering unit 602 .
- Clustering unit 602 may be configured to be a partitional clustering unit, and may utilize a k-means clustering routine or another partitional clustering routine to create a cluster hierarchy as described with respect to block 404 of method 400 .
- Cluster system 600 also contains a flattener unit 604 , which selectively flattens one or more branches, sub-trees, or levels created by partitional clustering unit 602 .
- Flattener unit 604 may be adapted to flatten branches, sub-trees or levels according to previously specified criteria. Alternatively, flattener unit 604 may take input from user interface 610 to control which branches, sub-trees or levels are flattened.
- Cluster system 600 also contains a second clustering unit 606 .
- Clustering unit 606 may be configured to be an agglomerative clustering unit, and may use single-link, complete-link, or other agglomerative clustering techniques to re-cluster the flattened branches selected by flattener unit 604 .
- Cluster system 600 may also contain a filter unit 608 .
- Filter unit 608 may take clusters from agglomerative clustering unit 606 and filter data in accordance with an embodiment. For example, filter unit 608 may output documents that satisfy particular criteria.
- Cluster system 600 may be connected to a user interface 612 .
- User interface 612 may allow a user to specify to clustering unit 602 , configured as a partitional clustering unit, a number of levels to be included in the generated cluster hierarchy. Additionally, user interface 612 may allow a user to control the operation of flattener unit 604 . Further, user interface 612 may allow a user to specify filter criteria to filter unit 608 .
- Document cluster system 600 may further be connected to a repository 614 to store the results of the cluster unit 600 .
- Repository 614 may be used to store documents for a document review system.
- Document cluster system 600 may also be connected to a hosted user environment 616 , as described below.
- Document cluster system 600 may include one or more processors 618 .
- Document cluster system 600 may also include a main memory 620 , preferably random access memory (RAM), and may also include a secondary memory 622 .
- Secondary memory 622 may include a hard disk drive and/or a removable storage drive for allowing computer programs or other instructions to be executed by processor 618 .
- documents to be clustered are distributed across a plurality of clients in a hosted user environment.
- documents are not stored on a central server or on individual user devices. Instead, documents are distributed over multiple storage machines connected to a network.
- a system such as the system described in FIG. 6 may be connected to the network of the hosted user environment to enable clustering and further analysis of documents in a hosted user environment.
- a re-clustered sub-tree or sub-trees may be exported to a document review tool.
- a document review tool may allow a reviewer, such as a member of a company's legal department, to view a highly cohesive cluster of documents and perform further analysis, such as tagging documents as responsive to a particular document request or criteria.
- a re-clustered sub-tree or sub-trees may be assigned to a particular reviewer in accordance with an access control policy. For example, if a sub-tree contains a document marked as attorney's eyes only, that sub-tree may automatically be assigned to an attorney in the legal department as opposed to a paralegal. As another example, if a sub-tree contains a large number of technical documents, the sub-tree may be assigned to a reviewer with technical expertise.
- a maximum or minimum number of documents per cluster may be specified.
- the clustering operation continues until created clusters are under the maximum number.
- the clustering operation may cease once a particular cluster falls below that minimum number.
- the clusters of documents that result after the initial and subsequent re-clustering of documents may be exported to a document review tool.
- documents may be grouped for easier review, so that reviewers may be able to focus on one discrete issue at a time.
- documents relating to a particular topic may be clustered together, and exported to a particular reviewer with previous experience with the topic.
- Embodiments can be implemented by software, firmware, hardware, or a combination thereof.
- Embodiments may be implemented in hardware, software, firmware, or a combination thereof.
- Embodiments may be implemented via a set of programs running in parallel on multiple machines. In an embodiment, different stages of the described methods may be partitioned according to, for example, the number of documents to be clustered, and distributed on the set of available machines.
Abstract
Description
Claims (18)
Priority Applications (1)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US13/836,970 US9305076B1 (en) | 2012-06-28 | 2013-03-15 | Flattening a cluster hierarchy tree to filter documents |
Applications Claiming Priority (2)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US201261665502P | 2012-06-28 | 2012-06-28 | |
US13/836,970 US9305076B1 (en) | 2012-06-28 | 2013-03-15 | Flattening a cluster hierarchy tree to filter documents |
Publications (1)
Publication Number | Publication Date |
---|---|
US9305076B1 true US9305076B1 (en) | 2016-04-05 |
Family
ID=55589009
Family Applications (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
US13/836,970 Active 2033-10-10 US9305076B1 (en) | 2012-06-28 | 2013-03-15 | Flattening a cluster hierarchy tree to filter documents |
Country Status (1)
Country | Link |
---|---|
US (1) | US9305076B1 (en) |
Cited By (9)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20150286704A1 (en) * | 2014-04-08 | 2015-10-08 | International Business Machines Corporation | Adaptive variable selection for data clustering |
US20160042048A1 (en) * | 2014-08-07 | 2016-02-11 | Bank Of America Corporation | Denormalize recursive, unbalanced, & ragged hierarchies |
US20160371345A1 (en) * | 2015-06-22 | 2016-12-22 | International Business Machines Corporation | Preprocessing Heterogeneously-Structured Electronic Documents for Data Warehousing |
US9589045B2 (en) | 2014-04-08 | 2017-03-07 | International Business Machines Corporation | Distributed clustering with outlier detection |
US10140319B2 (en) | 2016-07-26 | 2018-11-27 | Bank Of America | System for identifying anomalies by automatically generating and analyzing a structure |
US10331659B2 (en) | 2016-09-06 | 2019-06-25 | International Business Machines Corporation | Automatic detection and cleansing of erroneous concepts in an aggregated knowledge base |
CN110348521A (en) * | 2019-07-12 | 2019-10-18 | 创新奇智(重庆)科技有限公司 | Image procossing clustering method and its system, electronic equipment |
US10884755B1 (en) * | 2019-07-31 | 2021-01-05 | International Business Machines Corporation | Graph rewriting for large model support using categorized topological sort |
US11321359B2 (en) * | 2019-02-20 | 2022-05-03 | Tamr, Inc. | Review and curation of record clustering changes at large scale |
Citations (2)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20130006996A1 (en) | 2011-06-22 | 2013-01-03 | Google Inc. | Clustering E-Mails Using Collaborative Information |
US20130246422A1 (en) * | 2010-09-12 | 2013-09-19 | Rishi Bhargava | System and method for clustering host inventories |
-
2013
- 2013-03-15 US US13/836,970 patent/US9305076B1/en active Active
Patent Citations (2)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20130246422A1 (en) * | 2010-09-12 | 2013-09-19 | Rishi Bhargava | System and method for clustering host inventories |
US20130006996A1 (en) | 2011-06-22 | 2013-01-03 | Google Inc. | Clustering E-Mails Using Collaborative Information |
Cited By (14)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US9589045B2 (en) | 2014-04-08 | 2017-03-07 | International Business Machines Corporation | Distributed clustering with outlier detection |
US20150286704A1 (en) * | 2014-04-08 | 2015-10-08 | International Business Machines Corporation | Adaptive variable selection for data clustering |
US10042912B2 (en) | 2014-04-08 | 2018-08-07 | International Business Machines Corporation | Distributed clustering with outlier detection |
US9460236B2 (en) * | 2014-04-08 | 2016-10-04 | International Business Machines Corporation | Adaptive variable selection for data clustering |
US9477781B2 (en) * | 2014-04-08 | 2016-10-25 | International Business Machines Corporation | Adaptive variable selection for data clustering |
US20150286702A1 (en) * | 2014-04-08 | 2015-10-08 | International Business Machines Corporation | Adaptive variable selection for data clustering |
US9767176B2 (en) * | 2014-08-07 | 2017-09-19 | Bank Of America Corporation | Denormalize recursive, unbalanced, and ragged hierarchies |
US20160042048A1 (en) * | 2014-08-07 | 2016-02-11 | Bank Of America Corporation | Denormalize recursive, unbalanced, & ragged hierarchies |
US20160371345A1 (en) * | 2015-06-22 | 2016-12-22 | International Business Machines Corporation | Preprocessing Heterogeneously-Structured Electronic Documents for Data Warehousing |
US10140319B2 (en) | 2016-07-26 | 2018-11-27 | Bank Of America | System for identifying anomalies by automatically generating and analyzing a structure |
US10331659B2 (en) | 2016-09-06 | 2019-06-25 | International Business Machines Corporation | Automatic detection and cleansing of erroneous concepts in an aggregated knowledge base |
US11321359B2 (en) * | 2019-02-20 | 2022-05-03 | Tamr, Inc. | Review and curation of record clustering changes at large scale |
CN110348521A (en) * | 2019-07-12 | 2019-10-18 | 创新奇智(重庆)科技有限公司 | Image procossing clustering method and its system, electronic equipment |
US10884755B1 (en) * | 2019-07-31 | 2021-01-05 | International Business Machines Corporation | Graph rewriting for large model support using categorized topological sort |
Similar Documents
Publication | Publication Date | Title |
---|---|---|
US9305076B1 (en) | Flattening a cluster hierarchy tree to filter documents | |
US11232085B2 (en) | Outlier detection for streaming data | |
CA2953969C (en) | Interactive interfaces for machine learning model evaluations | |
US9442929B2 (en) | Determining documents that match a query | |
US9135280B2 (en) | Grouping interdependent fields | |
US20140344195A1 (en) | System and method for machine learning and classifying data | |
US20130006996A1 (en) | Clustering E-Mails Using Collaborative Information | |
CN105989015B (en) | Database capacity expansion method and device and method and device for accessing database | |
US11531831B2 (en) | Managing machine learning features | |
US10331646B2 (en) | Enhancements for optimizing query executions | |
US9268844B1 (en) | Adding document filters to an existing cluster hierarchy | |
KR102465391B1 (en) | Analytical methods of systems for setting data processing cycles based on growth rate of data in real time | |
US11321359B2 (en) | Review and curation of record clustering changes at large scale | |
US20200257684A1 (en) | Higher-order data sketching for ad-hoc query estimation | |
US10909117B2 (en) | Multiple measurements aggregated at multiple levels of execution of a workload | |
CN115203435A (en) | Entity relation generation method and data query method based on knowledge graph | |
US9239867B2 (en) | System and method for fast identification of variable roles during initial data exploration | |
Moertini et al. | Big Data Reduction Technique using Parallel Hierarchical Agglomerative Clustering. | |
CN113360517A (en) | Data processing method and device, electronic equipment and storage medium | |
Li et al. | An agricultural data storage mechanism based on HBase | |
KR101795564B1 (en) | System and method for processing and analysing big data provding efficiently using columnar index data format | |
WO2017023359A1 (en) | Management of content storage and retrieval | |
Saravana et al. | A case study on analyzing Uber datasets using Hadoop framework | |
JP2016126646A (en) | Data processing device, data processing method, and large scale data processing program | |
Nagarjuna et al. | Extended Boolean Retrieval Model using P-Norm and Term Independent Bound Methods |
Legal Events
Date | Code | Title | Description |
---|---|---|---|
AS | Assignment |
Owner name: GOOGLE INC., CALIFORNIAFree format text: ASSIGNMENT OF ASSIGNORS INTEREST;ASSIGNOR:KADARKARAI, JAYAPRABHAKAR;REEL/FRAME:035107/0191Effective date: 20130320 |
|
STCF | Information on status: patent grant |
Free format text: PATENTED CASE |
|
AS | Assignment |
Owner name: GOOGLE LLC, CALIFORNIAFree format text: CHANGE OF NAME;ASSIGNOR:GOOGLE INC.;REEL/FRAME:044566/0657Effective date: 20170929 |
|
MAFP | Maintenance fee payment |
Free format text: PAYMENT OF MAINTENANCE FEE, 4TH YEAR, LARGE ENTITY (ORIGINAL EVENT CODE: M1551); ENTITY STATUS OF PATENT OWNER: LARGE ENTITYYear of fee payment: 4 |
|
MAFP | Maintenance fee payment |
Free format text: PAYMENT OF MAINTENANCE FEE, 8TH YEAR, LARGE ENTITY (ORIGINAL EVENT CODE: M1552); ENTITY STATUS OF PATENT OWNER: LARGE ENTITYYear of fee payment: 8 |