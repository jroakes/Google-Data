US11928601B2 - Neural network compression - Google Patents
Neural network compression Download PDFInfo
- Publication number
- US11928601B2 US11928601B2 US15/892,890 US201815892890A US11928601B2 US 11928601 B2 US11928601 B2 US 11928601B2 US 201815892890 A US201815892890 A US 201815892890A US 11928601 B2 US11928601 B2 US 11928601B2
- Authority
- US
- United States
- Prior art keywords
- neural network
- weights
- anchor points
- values
- loss function
- Prior art date
- Legal status (The legal status is an assumption and is not a legal conclusion. Google has not performed a legal analysis and makes no representation as to the accuracy of the status listed.)
- Active, expires
Links
- 238000013528 artificial neural network Methods 0.000 title claims abstract description 219
- 230000006835 compression Effects 0.000 title claims abstract description 8
- 238000007906 compression Methods 0.000 title claims abstract description 8
- 238000012549 training Methods 0.000 claims abstract description 81
- 238000000034 method Methods 0.000 claims abstract description 40
- 238000003860 storage Methods 0.000 claims abstract description 16
- 230000006870 function Effects 0.000 claims description 40
- 239000000203 mixture Substances 0.000 claims description 40
- 238000009826 distribution Methods 0.000 claims description 27
- 230000008569 process Effects 0.000 claims description 18
- 230000000306 recurrent effect Effects 0.000 claims description 3
- 238000013519 translation Methods 0.000 claims description 2
- 238000004590 computer program Methods 0.000 abstract description 14
- 238000013139 quantization Methods 0.000 description 20
- 238000012545 processing Methods 0.000 description 17
- 230000015654 memory Effects 0.000 description 15
- 238000010801 machine learning Methods 0.000 description 10
- 238000004891 communication Methods 0.000 description 5
- 238000013459 approach Methods 0.000 description 4
- 230000008859 change Effects 0.000 description 4
- 238000013500 data storage Methods 0.000 description 4
- 238000010586 diagram Methods 0.000 description 4
- 230000003993 interaction Effects 0.000 description 3
- 238000004422 calculation algorithm Methods 0.000 description 2
- 238000013527 convolutional neural network Methods 0.000 description 2
- 230000006872 improvement Effects 0.000 description 2
- 230000003287 optical effect Effects 0.000 description 2
- 238000005457 optimization Methods 0.000 description 2
- 238000013515 script Methods 0.000 description 2
- 238000000926 separation method Methods 0.000 description 2
- 230000006403 short-term memory Effects 0.000 description 2
- 241000009334 Singa Species 0.000 description 1
- 230000005540 biological transmission Effects 0.000 description 1
- 239000003795 chemical substances by application Substances 0.000 description 1
- 230000001149 cognitive effect Effects 0.000 description 1
- 238000002790 cross-validation Methods 0.000 description 1
- 238000005516 engineering process Methods 0.000 description 1
- 239000004973 liquid crystal related substance Substances 0.000 description 1
- 238000007726 management method Methods 0.000 description 1
- 238000004519 manufacturing process Methods 0.000 description 1
- 238000003062 neural network model Methods 0.000 description 1
- 210000002569 neuron Anatomy 0.000 description 1
- 238000010606 normalization Methods 0.000 description 1
- 230000000644 propagated effect Effects 0.000 description 1
- 230000002787 reinforcement Effects 0.000 description 1
- 230000004044 response Effects 0.000 description 1
- 239000004065 semiconductor Substances 0.000 description 1
- 230000001953 sensory effect Effects 0.000 description 1
- 239000000758 substrate Substances 0.000 description 1
- 238000012360 testing method Methods 0.000 description 1
- 238000012546 transfer Methods 0.000 description 1
- 230000009466 transformation Effects 0.000 description 1
- 230000000007 visual effect Effects 0.000 description 1
Images
Classifications
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06N—COMPUTING ARRANGEMENTS BASED ON SPECIFIC COMPUTATIONAL MODELS
- G06N3/00—Computing arrangements based on biological models
- G06N3/02—Neural networks
- G06N3/08—Learning methods
- G06N3/084—Backpropagation, e.g. using gradient descent
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06N—COMPUTING ARRANGEMENTS BASED ON SPECIFIC COMPUTATIONAL MODELS
- G06N3/00—Computing arrangements based on biological models
- G06N3/02—Neural networks
- G06N3/04—Architecture, e.g. interconnection topology
- G06N3/044—Recurrent networks, e.g. Hopfield networks
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06N—COMPUTING ARRANGEMENTS BASED ON SPECIFIC COMPUTATIONAL MODELS
- G06N3/00—Computing arrangements based on biological models
- G06N3/02—Neural networks
- G06N3/08—Learning methods
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06N—COMPUTING ARRANGEMENTS BASED ON SPECIFIC COMPUTATIONAL MODELS
- G06N7/00—Computing arrangements based on specific mathematical models
- G06N7/01—Probabilistic graphical models, e.g. probabilistic networks
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06N—COMPUTING ARRANGEMENTS BASED ON SPECIFIC COMPUTATIONAL MODELS
- G06N20/00—Machine learning
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06N—COMPUTING ARRANGEMENTS BASED ON SPECIFIC COMPUTATIONAL MODELS
- G06N3/00—Computing arrangements based on biological models
- G06N3/02—Neural networks
- G06N3/06—Physical realisation, i.e. hardware implementation of neural networks, neurons or parts of neurons
- G06N3/063—Physical realisation, i.e. hardware implementation of neural networks, neurons or parts of neurons using electronic means
Definitions
- This specification relates to neural network compression.
- Machine learning models receive an input and generate an output, e.g., a predicted output, based on the received input.
- Some machine learning models are parametric models and generate the output based on the received input and on values of the parameters of the model.
- Some machine learning models are deep models that employ multiple layers of models to generate an output for a received input.
- a deep neural network is a deep machine learning model that includes an output layer and one or more hidden layers that each apply a non-linear transformation to a received input to generate an output.
- This specification describes a system implemented as computer programs on one or more computers in one or more locations that performs neural network compression.
- a method for neural network compression comprising: receiving a neural network; identifying a particular set of multiple weights of the neural network; determining multiple anchor points based on current values of the particular set of weights of the neural network; training the neural network by, at each of multiple training iterations, performing operations comprising adjusting the values of the particular set of weights by backpropagating gradients of a loss function, wherein the loss function comprises: a first loss function term based on a prediction accuracy of the neural network; and a second loss function term based on a similarity of the current values of the particular set of weights to the anchor points; and quantizing the values of the particular set of weights, comprising, for each weight of the particular set of weights: determining an anchor point corresponding to the weight; and setting the value of the weight to the anchor point.
- training the neural network comprises, at each of one or more of the training iterations: updating the multiple anchor points based on the current values of particular set of weights.
- the second loss function term comprises a sum, over the particular set of weights, of a minimum distance between the current value of the weight and a corresponding anchor point.
- determining the anchor points based on the current values of the particular set of weights comprises: fitting a mixture model to a distribution of the current values of the particular set of weights; and determining the anchor points based on parameters of components of the mixture model.
- the mixture model is a Gaussian mixture model
- the anchor points are determined based on mean parameters of the components of the Gaussian mixture model.
- the components of the Gaussian mixture model are restricted to have a fixed standard deviation.
- determining the anchor points based on the current values of the particular set of weights comprises: determining multiple quantiles of the current values of the particular set of weights; and determining the anchor points based on the quantiles.
- determining the anchor points based on the quantiles comprises determining the anchor points to be mid-points between the quantiles.
- determining the anchor points based on the quantiles comprises determining the anchor points to be averages of the current values of the particular set of weights that are between each adjacent pair of quantiles.
- the neural network is pre-trained to perform a prediction task.
- a system comprising one or more computers and one or more storage devices storing instructions that when executed by the one or more computers cause the one or more computers to perform operations comprising implementing the described method.
- one or more computer storage media storing instructions that when executed by one or more computers cause the one or more computers to perform operations comprising implementing the described method.
- the training system as described in this specification can generate a compressed neural network (i.e., a neural network with quantized weight values) that can effectively perform prediction tasks while having a reduced memory footprint (e.g., occupying less space in a logical data storage area or physical data storage device) compared to conventional neural networks (i.e., neural networks without quantized weight values). Therefore the training system as described in this specification enables more efficient use of computational resources (in particular, memory resources). As a result, the compressed neural networks generated by the training system as described in this specification can more readily be deployed to resource-constrained environments, such as mobile devices, than conventional neural networks. This is a technical improvement in the field of machine learning.
- the training system as described in this specification can generate a family of multiple compressed neural networks, each with the same architecture and configured to perform the same prediction task, but each with different memory footprints and prediction accuracies.
- a neural network has to be deployed to an environment (e.g., a smartwatch)
- the compressed network with memory footprint and prediction accuracy best suited to the environment can be immediately selected for deployment.
- multiple different neural networks with different hand-crafted architectures chosen to satisfy the memory constraints of the environment would be generated and trained in order to find a neural network suitable for deployment to the environment.
- Each of the family of compressed neural networks generated by the training system as described in this specification uses a same architecture. Therefore, the training system as described in this specification can enable more efficient use of computational resources (e.g., memory and computing power) by obviating the need to hand-craft and train multiple different neural networks for different environments. This is another technical improvement in the field of machine learning.
- FIG. 1 is an illustration of an example training system.
- FIG. 2 is a flow diagram of an example process for generating a compressed neural network.
- FIG. 3 is a flow diagram of an example process for training a neural network based on a quantization loss function.
- the technology in this patent application is related to a method for neural network compression.
- the neural network is trained in accordance with a loss function that simultaneously: (i) encourages the neural network to generate accurate prediction outputs, and (ii) encourages each of the weight values of the neural network to approach a predetermined number of anchor points.
- each of the weight values of the neural network is quantized, that is, replaced by the value of a corresponding anchor point.
- the weight values of the neural network are quantized, they include only as many unique values as the number of anchor points, thereby reducing the memory footprint of the neural network.
- the memory footprint of a neural network model may be thus reduced to enable the model to be deployed in a resource constrained environment such as a mobile device.
- the amount by which the memory footprint of the neural network is compressed is controlled by selecting the number of anchor points (e.g., fewer anchor points results in more compression).
- FIG. 1 shows an example training system 100 .
- the training system 100 is an example of a system implemented as computer programs on one or more computers in one or more locations in which the systems, components, and techniques described below are implemented.
- the training system 100 is configured to receive as input a neural network 102 and to generate as output a corresponding compressed neural network 116 .
- the compressed neural network 116 has the same architecture (i.e., configuration of network layers) as the neural network 102 , the same number of weights (e.g., scalar-valued learnable network parameters that scale the outputs of neurons of the network) as the neural network 102 , and is configured to perform the same prediction task as the neural network 102 .
- the weight values of the compressed neural network 116 include at most a predetermined number of unique values, referred to in this specification as anchor points 106 .
- the weight values of the neural network 102 can include as many unique values as the number of weights (e.g., if each weight of the neural network 102 has a different weight value).
- the weight values of the compressed neural network 116 can be stored (e.g., in a logical data storage area or physical data storage device) more efficiently (e.g., using fewer bits) than the weight values of the neural network 102 .
- the weight values of the compressed neural network 116 can be represented and stored as a table of pointers and a table of anchor points.
- a pointer refers to data that references a location in a memory (i.e., a memory address).
- the table of pointers includes a different pointer for each weight of the compressed neural network 116 .
- the pointer corresponding to the weight references the location in the table of anchor points that contains the value of the given weight.
- storing the weight values of the neural network 102 may require a table of weight values with a different entry for each weight of the neural network 102 .
- a pointer can, in some cases, be stored using less memory (e.g., fewer bits) than a weight value
- the weight values of the compressed neural network 116 can be stored more efficiently than those of the neural network 102 , particularly when the number of anchor points is much less than the number of weights of the compressed neural network 116 .
- the neural network 102 includes multiple neural network layers.
- the neural network 102 generates neural network outputs from neural network inputs by processing the neural network inputs through each of the layers.
- the neural network 102 can be a feed-forward neural network (e.g., a multi-layer perceptron or a convolutional neural network), a recurrent neural network (e.g., a long short-term memory network), or any other kind of neural network.
- the neural network 102 can be configured to receive any kind of digital data input and to generate any kind of prediction (e.g., score or classification) output based on the input.
- prediction e.g., score or classification
- the output generated by the neural network 102 for a given image may be scores for each of a set of object categories, with each score representing an estimated likelihood that the image contains an image of an object belonging to the category.
- the output generated by the neural network 102 for a given Internet resource, document, or portion of a document may be a score for each of a set of topics, with each score representing an estimated likelihood that the Internet resource, document, or document portion is about the topic.
- the output generated by the neural network 102 may be a score for each of a set of content items, with each score representing an estimated likelihood that the user will respond favorably to being recommended the content item.
- the output generated by the neural network 102 may be a score for each of a set of pieces of text in another language, with each score representing an estimated likelihood that the piece of text in the other language is a proper translation of the input text into the other language.
- the output generated by the neural network 102 may be a score for each of a set of pieces of text, each score representing an estimated likelihood that the piece of text is the correct transcript for the utterance or sequence of utterances.
- the neural network 102 can be part of an auto-completion system or part of a text processing system.
- the neural network 102 can be part of a reinforcement learning system and can generate outputs used for selecting actions to be performed by an agent interacting with an environment.
- the system 100 provides the neural network 102 as input to an anchor point generation engine 104 that is configured to receive a neural network as input and to process the weight values of the received neural network to generate a predetermined number of scalar-valued anchor points 106 as output.
- the anchor point generation engine 104 generates anchor points based on the distribution 118 of the weight values of the received neural network.
- the anchor point generation engine 104 may generate the anchor points 106 so that most or all weight values of the received neural network are reasonably close to at least one anchor point.
- the anchor point generation engine 104 may generate the anchor points 106 by fitting a mixture model (e.g., a Gaussian mixture model) to the set of weight values of the received neural network, and determine the anchor points based on the parameters of the components of the mixture model (e.g., the mean parameters of the components of a Gaussian mixture model), as will be described in more detail later.
- a mixture model e.g., a Gaussian mixture model
- the system 100 provides the neural network 102 and anchor points 106 to a training engine 110 that is configured to receive a neural network and a set of anchor points as input.
- the training engine 110 trains the received neural network using a neural network training technique (e.g., stochastic gradient descent) based on a quantization loss function 108 .
- a neural network training technique e.g., stochastic gradient descent
- training the received neural network based on the quantization loss function 108 simultaneously: (i) encourages the received neural network to generate accurate prediction outputs, and (ii) encourages each of the weight values of the received neural network to approach (i.e., get closer to) one or more of the anchor points.
- the training engine 110 trains the received neural network for multiple training iterations until a training termination criterion is met.
- the training termination criterion may be that the training engine 110 has trained the received neural network for predetermined number of training iterations.
- the training termination criterion may be that the change in the value of the quantization loss function 108 between training iterations falls below a predetermined threshold.
- the training engine 110 trains the received neural network using a set of training data 120 .
- the training data 120 includes multiple training examples. Each training example includes an input and a corresponding target output. The target output corresponding to an input is the output that the neural network 102 should generate by processing the input.
- the system 100 provides the resulting trained neural network 112 and the anchor points 106 as input to a weight quantization engine 114 (to be described later).
- the system determines updated anchor points 122 for neural network 102 using the anchor point generation engine 104 .
- the values of the updated anchor points 122 are different from the anchor points 106 since training the neural network 102 (i.e., by the training engine 110 ) causes the distribution of its weight values to change.
- the number of updated anchor points 122 is the same as the number of original anchor points 106 .
- the system 100 iterates multiple times between training the neural network 102 using the training engine 110 and updating the anchor points using the anchor point generation engine 104 until an iteration termination criterion is met.
- the iteration termination criterion may be that the system 100 has performed a predetermined number of iterations.
- the iteration termination criterion may be that the differences between the updated anchor points generated between iterations falls below a predetermined threshold.
- the system 100 provides the resulting trained neural network 112 and the anchor points determined for the trained neural network 112 as input to the weight quantization engine 114 .
- the weight quantization engine 114 is configured to receive as input a trained neural network 112 and corresponding anchor points determined for the trained neural network 112 , and to process the inputs to generate the compressed neural network 116 . Specifically, for each weight of the trained neural network 112 , the weight quantization engine 114 determines an anchor point (i.e., from the received anchor points) corresponding to the weight (e.g., the anchor point closest to the weight value), and sets the weight value to the value of the corresponding anchor point. Thereby, the compressed neural network 116 has a number of unique weight values that is at most the number of anchor points.
- the compressed neural network 116 may generate a different output that the trained neural network 112 .
- the prediction performance (i.e., accuracy) of the compressed neural network 116 is similar to that of the trained neural network 112 .
- the weight values of the compressed neural network 116 are similar to those of the trained neural network 112 , resulting in the trained neural network 112 and the compressed neural network 116 generating similar outputs (and thereby having similar prediction performance).
- the performance of the trained neural network 112 and the compressed neural network 116 are similar when respective measures of their performance (e.g., as measured by a loss function) are similar.
- FIG. 2 is a flow diagram of an example process for generating a compressed neural network.
- the process 200 will be described as being performed by a system of one or more computers located in one or more locations.
- a training system e.g., the training system 100 of FIG. 1 , appropriately programmed in accordance with this specification, can perform the process 200 .
- the system receives a neural network ( 202 ).
- the neural network can be configured to receive any kind of digital data input and to generate any kind of prediction (e.g., score or classification) output based on the input.
- the neural network can be a feed-forward neural network (e.g., a multi-layer perceptron or a convolutional neural network), a recurrent neural network (e.g., a long short-term memory network), or any other kind of neural network.
- the neural network is pre-trained, that is, the weight values of the neural network have been tuned to improve the performance of the neural network on its prediction task. In some other cases, the neural network is not pre-trained. In these cases, the weight values of the neural network may be initialized to an arbitrary value (e.g., the value zero), or the weight values may be initialized randomly (e.g., each of the weight values may be sampled from a Gaussian distribution).
- the system identifies a set of neural network weights to be quantized ( 204 ). In some implementations, the system identifies all the weights of the neural network as weights to be quantized. In some other implementations, the system identifies a proper subset of the weights of the neural network as weights to be quantized. For example, the system may determine that the bias and scale factor parameters of batch normalization layers are not to be quantized. In the following, the weight values of the neural network refers to the values of the weights that are to be quantized.
- the system determines anchor points ( 206 ).
- the number of anchor points is predetermined and each of the anchor points is a scalar value.
- the system determines the anchor points based on the distribution of the weight values of the neural network. In general, the system selects anchor points so that most or all weight values of the neural network are reasonably close to at least one anchor point.
- the system determines the anchor points by fitting (e.g., using an appropriate optimization method) a mixture model to the weight values of the neural network.
- Fitting a mixture model to the weight values of the neural network refers to identifying the parameters of a probability distribution that models the distribution of the weight values.
- the probability distribution is a combination of multiple component probability distributions and identifying the parameters of the probability distribution includes identifying the parameters of each of the multiple component probability distributions.
- the system selects the number of component probability distributions to be equal to the number of anchor points, and the system determines the values of the anchor points based on parameters of the respective component probability distributions.
- the system may fit a Gaussian mixture model to the weight values of the neural network.
- a Gaussian mixture model is a mixture model where each of the component probability distributions are Gaussian distributions.
- the parameters of a Gaussian distribution include the mean of the distribution.
- the system may determine the value of each anchor point to be equal to the mean parameter of the Gaussian probability distribution that is the component of the Gaussian mixture model corresponding to the anchor point.
- the system may regularize the standard deviation parameters of the component Gaussian probability distributions during the fitting to reduce the likelihood that the standard deviation parameters of the fitted component Gaussian probability distributions have low values.
- the system imposes the constraint that the standard deviation parameters of component Gaussian probability distributions have the same value.
- the system lower bounds the standard deviation parameter of each component Gaussian probability distribution during fitting by a predetermined value.
- the system adds a predetermined value to the standard deviation parameter of each component Gaussian probability distribution during fitting.
- the system fits the mixture model to the weight values of the neural network using an optimization algorithm that includes steps where parameters of the algorithm are determined stochastically.
- fitting a mixture model to the weight values multiple times may generate a different fitted mixture model (i.e., a mixture model with different parameter values) each time. Therefore, the system may fit the mixture model to the weight values multiple times to generate multiple different fitted mixture models, and determine the anchor points (as described earlier) based on the particular fitted mixture model that is determined to best explain the weight values (e.g., using a statistical goodness of fit test).
- the system determines a set of quantiles of the weight values of the neural network and determines the anchor points based on the quantiles.
- K is a positive integer
- a fraction i/K of the weight values are less than or equal to q i .
- K is a positive integer
- a fraction i/K of the weight values are less than or equal to q i .
- the system determines the anchor points to be the midpoints between the quantiles of the weight values.
- the system determines the anchor points to be the means of the weight values that are between each adjacent pair of quantiles.
- each anchor point is close to approximately 1/K of the weight values, where the number of quantiles is (K+1).
- the system trains the neural network using a quantization loss function ( 208 ). Training the neural network using the quantization loss function simultaneously: (i) encourages the neural network to generate accurate prediction outputs, and (ii) encourages each of the weight values of the neural network to approach (i.e., get closer to) one or more of the anchor points.
- An example process for training a neural network based on a quantization loss function is described with reference to FIG. 3 .
- the system generates the compressed neural network by quantizing the weight values of the trained neural network to the anchor points ( 210 ). Specifically, for each weight value of the trained neural network, the system determines an anchor point that corresponds to the weight value and replaces the weight value by the value of the corresponding anchor point. In general, the system determines the anchor point corresponding to a weight value to be the anchor point with the value that is closest to the weight value.
- FIG. 3 is a flow diagram of an example process for training a neural network based on a quantization loss function.
- the process 300 will be described as being performed by a system of one or more computers located in one or more locations.
- a training system e.g., the training system 100 of FIG. 1 , appropriately programmed in accordance with this specification, can perform the process 300 .
- the system trains the neural network for one or more training iterations using a neural network training technique (e.g., stochastic gradient descent) ( 302 ). Specifically, the system computes gradients of a quantization loss function with respect to the weight values of the neural network, and backpropagates the gradients to adjust the weight values.
- a neural network training technique e.g., stochastic gradient descent
- a quantization loss function is given by:
- L ⁇ ( W ) L pred ⁇ ( W ) + ⁇ ⁇ ⁇ w ⁇ W ⁇ min ⁇ a i ⁇ ⁇ ( w - a i ) 2 ,
- W are the weights of the neural network
- pred (W) is a term that encourages the neural network to generate accurate prediction outputs (for example, a cross-entropy loss term or a squared-error loss term)
- ⁇ is a hyper-parameter (selected, for example, by a cross-validation hyper-parameter selection process)
- ⁇ a i ⁇ are the anchor points.
- L ⁇ ( W ) L pred ⁇ ( W ) + ⁇ ⁇ ⁇ w ⁇ W ⁇ min ⁇ a i ⁇ ⁇ ⁇ exp ⁇ ( w - a i ) , where the notation is defined as earlier.
- the system trains the neural network until a termination criterion is met.
- the termination criterion is that the system has trained the neural network for a predetermined number of training iterations.
- the termination criterion may be that the change in the value of the quantization loss function between training iterations falls below a predetermined threshold.
- the system may update the anchor points ( 304 ) and return to step 302 , where the neural network is trained using the quantization loss function based on the updated anchor points.
- the values of the updated anchor points are different from the previous anchor points since training the neural network causes the distribution of its weight values to change.
- the system continues to iterate between (i) training the neural network using the quantization loss function and (ii) updating the anchor points, until a termination criterion is met.
- the termination criterion is that the system has performed a predetermined number of iterations.
- the termination criterion is that the differences between the updated anchor points generated between iterations falls below a predetermined threshold.
- Embodiments of the subject matter and the functional operations described in this specification can be implemented in digital electronic circuitry, in tangibly-embodied computer software or firmware, in computer hardware, including the structures disclosed in this specification and their structural equivalents, or in combinations of one or more of them.
- Embodiments of the subject matter described in this specification can be implemented as one or more computer programs, i.e., one or more modules of computer program instructions encoded on a tangible non-transitory storage medium for execution by, or to control the operation of, data processing apparatus.
- the computer storage medium can be a machine-readable storage device, a machine-readable storage substrate, a random or serial access memory device, or a combination of one or more of them.
- the program instructions can be encoded on an artificially-generated propagated signal, e.g., a machine-generated electrical, optical, or electromagnetic signal, that is generated to encode information for transmission to suitable receiver apparatus for execution by a data processing apparatus.
- data processing apparatus refers to data processing hardware and encompasses all kinds of apparatus, devices, and machines for processing data, including by way of example a programmable processor, a computer, or multiple processors or computers.
- the apparatus can also be, or further include, special purpose logic circuitry, e.g., an FPGA (field programmable gate array) or an ASIC (application-specific integrated circuit).
- the apparatus can optionally include, in addition to hardware, code that creates an execution environment for computer programs, e.g., code that constitutes processor firmware, a protocol stack, a database management system, an operating system, or a combination of one or more of them.
- a computer program which may also be referred to or described as a program, software, a software application, an app, a module, a software module, a script, or code, can be written in any form of programming language, including compiled or interpreted languages, or declarative or procedural languages; and it can be deployed in any form, including as a stand-alone program or as a module, component, subroutine, or other unit suitable for use in a computing environment.
- a program may, but need not, correspond to a file in a file system.
- a program can be stored in a portion of a file that holds other programs or data, e.g., one or more scripts stored in a markup language document, in a single file dedicated to the program in question, or in multiple coordinated files, e.g., files that store one or more modules, sub-programs, or portions of code.
- a computer program can be deployed to be executed on one computer or on multiple computers that are located at one site or distributed across multiple sites and interconnected by a data communication network.
- engine is used broadly to refer to a software-based system, subsystem, or process that is programmed to perform one or more specific functions.
- an engine will be implemented as one or more software modules or components, installed on one or more computers in one or more locations. In some cases, one or more computers will be dedicated to a particular engine; in other cases, multiple engines can be installed and running on the same computer or computers.
- the processes and logic flows described in this specification can be performed by one or more programmable computers executing one or more computer programs to perform functions by operating on input data and generating output.
- the processes and logic flows can also be performed by special purpose logic circuitry, e.g., an FPGA or an ASIC, or by a combination of special purpose logic circuitry and one or more programmed computers.
- Computers suitable for the execution of a computer program can be based on general or special purpose microprocessors or both, or any other kind of central processing unit.
- a central processing unit will receive instructions and data from a read-only memory or a random access memory or both.
- the essential elements of a computer are a central processing unit for performing or executing instructions and one or more memory devices for storing instructions and data.
- the central processing unit and the memory can be supplemented by, or incorporated in, special purpose logic circuitry.
- a computer will also include, or be operatively coupled to receive data from or transfer data to, or both, one or more mass storage devices for storing data, e.g., magnetic, magneto-optical disks, or optical disks.
- a computer need not have such devices.
- a computer can be embedded in another device, e.g., a mobile telephone, a personal digital assistant (PDA), a mobile audio or video player, a game console, a Global Positioning System (GPS) receiver, or a portable storage device, e.g., a universal serial bus (USB) flash drive, to name just a few.
- PDA personal digital assistant
- GPS Global Positioning System
- USB universal serial bus
- Computer-readable media suitable for storing computer program instructions and data include all forms of non-volatile memory, media and memory devices, including by way of example semiconductor memory devices, e.g., EPROM, EEPROM, and flash memory devices; magnetic disks, e.g., internal hard disks or removable disks; magneto-optical disks; and CD-ROM and DVD-ROM disks.
- semiconductor memory devices e.g., EPROM, EEPROM, and flash memory devices
- magnetic disks e.g., internal hard disks or removable disks
- magneto-optical disks e.g., CD-ROM and DVD-ROM disks.
- embodiments of the subject matter described in this specification can be implemented on a computer having a display device, e.g., a CRT (cathode ray tube) or LCD (liquid crystal display) monitor, for displaying information to the user and a keyboard and a pointing device, e.g., a mouse or a trackball, by which the user can provide input to the computer.
- a display device e.g., a CRT (cathode ray tube) or LCD (liquid crystal display) monitor
- keyboard and a pointing device e.g., a mouse or a trackball
- Other kinds of devices can be used to provide for interaction with a user as well; for example, feedback provided to the user can be any form of sensory feedback, e.g., visual feedback, auditory feedback, or tactile feedback; and input from the user can be received in any form, including acoustic, speech, or tactile input.
- a computer can interact with a user by sending documents to and receiving documents from a device that is used by the user; for example, by sending web pages to a web browser on a user's device in response to requests received from the web browser.
- a computer can interact with a user by sending text messages or other forms of message to a personal device, e.g., a smartphone that is running a messaging application, and receiving responsive messages from the user in return.
- Data processing apparatus for implementing machine learning models can also include, for example, special-purpose hardware accelerator units for processing common and compute-intensive parts of machine learning training or production, i.e., inference, workloads.
- Machine learning models can be implemented and deployed using a machine learning framework, e.g., a TensorFlow framework, a Microsoft Cognitive Toolkit framework, an Apache Singa framework, or an Apache MXNet framework.
- a machine learning framework e.g., a TensorFlow framework, a Microsoft Cognitive Toolkit framework, an Apache Singa framework, or an Apache MXNet framework.
- Embodiments of the subject matter described in this specification can be implemented in a computing system that includes a back-end component, e.g., as a data server, or that includes a middleware component, e.g., an application server, or that includes a front-end component, e.g., a client computer having a graphical user interface, a web browser, or an app through which a user can interact with an implementation of the subject matter described in this specification, or any combination of one or more such back-end, middleware, or front-end components.
- the components of the system can be interconnected by any form or medium of digital data communication, e.g., a communication network. Examples of communication networks include a local area network (LAN) and a wide area network (WAN), e.g., the Internet.
- LAN local area network
- WAN wide area network
- the computing system can include clients and servers.
- a client and server are generally remote from each other and typically interact through a communication network. The relationship of client and server arises by virtue of computer programs running on the respective computers and having a client-server relationship to each other.
- a server transmits data, e.g., an HTML page, to a user device, e.g., for purposes of displaying data to and receiving user input from a user interacting with the device, which acts as a client.
- Data generated at the user device e.g., a result of the user interaction, can be received at the server from the device.
Abstract
Description
where {wj}j=1 J are the weight values of the neural network.
where W are the weights of the neural network,
where the notation is defined as earlier.
Claims (20)
Priority Applications (2)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US15/892,890 US11928601B2 (en) | 2018-02-09 | 2018-02-09 | Neural network compression |
PCT/US2019/017168 WO2019157251A1 (en) | 2018-02-09 | 2019-02-08 | Neural network compression |
Applications Claiming Priority (1)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US15/892,890 US11928601B2 (en) | 2018-02-09 | 2018-02-09 | Neural network compression |
Publications (2)
Publication Number | Publication Date |
---|---|
US20190251445A1 US20190251445A1 (en) | 2019-08-15 |
US11928601B2 true US11928601B2 (en) | 2024-03-12 |
Family
ID=65520437
Family Applications (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
US15/892,890 Active 2041-10-31 US11928601B2 (en) | 2018-02-09 | 2018-02-09 | Neural network compression |
Country Status (2)
Country | Link |
---|---|
US (1) | US11928601B2 (en) |
WO (1) | WO2019157251A1 (en) |
Cited By (1)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20220207853A1 (en) * | 2020-12-28 | 2022-06-30 | Kyocera Document Solutions Inc. | Image recognition method, image recognition apparatus, and non-transitory computer readable recording medium storing an image recognition program |
Families Citing this family (14)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US10878297B2 (en) * | 2018-08-29 | 2020-12-29 | International Business Machines Corporation | System and method for a visual recognition and/or detection of a potentially unbounded set of categories with limited examples per category and restricted query scope |
US11568207B2 (en) * | 2018-09-27 | 2023-01-31 | Deepmind Technologies Limited | Learning observation representations by predicting the future in latent space |
KR102621118B1 (en) * | 2018-11-01 | 2024-01-04 | 삼성전자주식회사 | Encoding apparatus and method of image using quantization table adaptive to image |
KR102462910B1 (en) * | 2018-11-12 | 2022-11-04 | 한국전자통신연구원 | Method and apparatus of quantization for weights of batch normalization layer |
US11776093B2 (en) * | 2019-07-16 | 2023-10-03 | University Of Florida Research Foundation, Incorporated | Automatic sharpness adjustment for imaging modalities |
DE102019210801A1 (en) * | 2019-07-22 | 2021-01-28 | Robert Bosch Gmbh | Method, device, computer program and machine-readable storage medium for detecting an object |
US11727266B2 (en) | 2019-08-02 | 2023-08-15 | International Business Machines Corporation | Annotating customer data |
US11797842B2 (en) * | 2019-08-02 | 2023-10-24 | International Business Machines Corporation | Identifying friction points in customer data |
DE102019214308B4 (en) * | 2019-09-19 | 2022-07-28 | Robert Bosch Gmbh | Fast quantized training of trainable modules |
US11935271B2 (en) | 2020-01-10 | 2024-03-19 | Tencent America LLC | Neural network model compression with selective structured weight unification |
CN113112012B (en) * | 2020-01-10 | 2023-04-25 | 腾讯美国有限责任公司 | Method, apparatus and computer device for video image processing |
CN112149797B (en) * | 2020-08-18 | 2023-01-03 | Oppo（重庆）智能科技有限公司 | Neural network structure optimization method and device and electronic equipment |
TWI795135B (en) * | 2021-12-22 | 2023-03-01 | 財團法人工業技術研究院 | Quantization method for neural network model and deep learning accelerator |
CN114565064B (en) * | 2022-04-26 | 2022-07-15 | 心鉴智控(深圳)科技有限公司 | Method, system and equipment for identifying multi-task learning deep network |
Citations (2)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20180137564A1 (en) * | 2012-12-07 | 2018-05-17 | Capital One Financial Corporation | Systems and computer-implemented processes for occupational risk assessment |
US10776368B1 (en) * | 2017-07-14 | 2020-09-15 | Amazon Technologies, Inc. | Deriving cardinality values from approximate quantile summaries |
-
2018
- 2018-02-09 US US15/892,890 patent/US11928601B2/en active Active
-
2019
- 2019-02-08 WO PCT/US2019/017168 patent/WO2019157251A1/en active Application Filing
Patent Citations (2)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20180137564A1 (en) * | 2012-12-07 | 2018-05-17 | Capital One Financial Corporation | Systems and computer-implemented processes for occupational risk assessment |
US10776368B1 (en) * | 2017-07-14 | 2020-09-15 | Amazon Technologies, Inc. | Deriving cardinality values from approximate quantile summaries |
Non-Patent Citations (18)
Title |
---|
Chen, Wenlin, et al. "Compressing convolutional neural networks." arXiv preprint arXiv:1506.04449 (2015). (Year: 2015). * |
Cheng et al, "A Survey of Model Compression and Acceleration for Deep Neural Networks" IEEE Signal Processing Magazine, Dec. 13, 201, 10 pages. |
Gan, Dahua, et al. "Enhancing short-term probabilistic residential load forecasting with quantile long-short-term memory." The Journal of Engineering 2017.14 (2017): 2622-2627. (Year: 2017). * |
GKFX, "Gaussian function", Wikipedia, Feb. 6, 2018. (Year: 2018). * |
Grønlund, Allan, et al. "Fast exact k-means, k-medians and Bregman divergence clustering in 1D." arXiv preprint arXiv:1701.07204 (2017). (Year: 2017). * |
Han, Song, Huizi Mao, and William J. Dally. "Deep compression: Compressing deep neural networks with pruning, trained quantization and huffman coding." arXiv preprint arXiv:1510.00149 (2015). (Year: 2015). * |
Lei, Wang, Huawei Chen, and Yixuan Wu. "Compressing deep convolutional networks using k-means based on weights distribution." Proceedings of the 2nd International Conference on Intelligent Information Processing. 2017. (Year: 2017). * |
Mayout, "Compute the average for quantiles", StackOverflow, Oct. 2013. (Year: 2013). * |
PCT International Preliminary Report on Patentability in International Application No. PCT/US2018/017168, dated Aug. 11, 2020, 8 pages. |
PCT International Search Report and Written Opinion in International Application No. PCT/US2019/017168, dated May 17, 2019, 14 pages. |
PCT International Written Opinion in International Application No. PCT/US2019/017168, dated Aug. 2, 2019, 6 pages. |
Piketty, Thomas, and Emmanuel Saez. "How progressive is the US federal tax system? A historical and international perspective." Journal of Economic perspectives 21.1 (2007): 3-24. (Year: 2007). * |
See, Abigail, Minh-Thang Luong, and Christopher D. Manning. "Compression of neural machine translation models via pruning." arXiv preprint arXiv:1606.09274 (2016). (Year: 2016). * |
Somers, Mark, and Joe Whittaker. "Quantile regression for modelling distributions of profit and loss." European Journal of Operational Research 183.3 (2007): 1477-1487. (Year: 2007). * |
Ullrich et al, "Soft Weight-Sharing for Neural Network Compression", arXiv, Feb. 13, 2017, 16 pages. |
Ullrich, Karen, Edward Meeds, and Max Welling. "Soft weight-sharing for neural network compression." arXiv preprint arXiv:1702.04008 (2017). (Year: 2017). * |
Vorbis, "Normal distribution", Wikipedia, Feb. 8, 2018. (Year: 2018). * |
Wang, Liwei, Alexander Schwing, and Svetlana Lazebnik. "Diverse and accurate image description using a variational auto-encoder with an additive gaussian encoding space." Advances in Neural Information Processing Systems 30 (2017). (Year: 2017). * |
Cited By (1)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20220207853A1 (en) * | 2020-12-28 | 2022-06-30 | Kyocera Document Solutions Inc. | Image recognition method, image recognition apparatus, and non-transitory computer readable recording medium storing an image recognition program |
Also Published As
Publication number | Publication date |
---|---|
US20190251445A1 (en) | 2019-08-15 |
WO2019157251A1 (en) | 2019-08-15 |
Similar Documents
Publication | Publication Date | Title |
---|---|---|
US11928601B2 (en) | Neural network compression | |
US10936949B2 (en) | Training machine learning models using task selection policies to increase learning progress | |
US11741366B2 (en) | Compressed recurrent neural network models | |
US11790214B2 (en) | Mixture of experts neural networks | |
US20210004677A1 (en) | Data compression using jointly trained encoder, decoder, and prior neural networks | |
US11080589B2 (en) | Sequence processing using online attention | |
US11941527B2 (en) | Population based training of neural networks | |
US11922281B2 (en) | Training machine learning models using teacher annealing | |
US11887004B2 (en) | Batch renormalization layers | |
US20220092416A1 (en) | Neural architecture search through a graph search space | |
US20190188566A1 (en) | Reward augmented model training | |
US10824946B2 (en) | Training neural networks using posterior sharpening | |
US20210034973A1 (en) | Training neural networks using learned adaptive learning rates | |
US20220230065A1 (en) | Semi-supervised training of machine learning models using label guessing | |
CN111008689A (en) | Reducing neural network inference time using SOFTMAX approximation | |
US11676035B2 (en) | Learning non-differentiable weights of neural networks using evolutionary strategies | |
US20240119366A1 (en) | Online training of machine learning models using bayesian inference over noise |
Legal Events
Date | Code | Title | Description |
---|---|---|---|
FEPP | Fee payment procedure |
Free format text: ENTITY STATUS SET TO UNDISCOUNTED (ORIGINAL EVENT CODE: BIG.); ENTITY STATUS OF PATENT OWNER: LARGE ENTITY |
|
AS | Assignment |
Owner name: GOOGLE LLC, CALIFORNIAFree format text: ASSIGNMENT OF ASSIGNORS INTEREST;ASSIGNORS:MOVSHOVITZ-ATTIAS, YAIR;EBAN, ELAD;SIGNING DATES FROM 20180314 TO 20180315;REEL/FRAME:045250/0939 |
|
STPP | Information on status: patent application and granting procedure in general |
Free format text: NON FINAL ACTION MAILED |
|
AS | Assignment |
Owner name: GOOGLE LLC, CALIFORNIAFree format text: CORRECTIVE ASSIGNMENT TO CORRECT THE FIRST INVENTOR'S NAME PREVIOUSLY RECORDED AT REEL: 045250 FRAME: 0939. ASSIGNOR(S) HEREBY CONFIRMS THE ASSIGNMENT;ASSIGNORS:ALON, YAIR;EBAN, ELAD;SIGNING DATES FROM 20180314 TO 20180315;REEL/FRAME:061072/0421 |
|
STPP | Information on status: patent application and granting procedure in general |
Free format text: RESPONSE TO NON-FINAL OFFICE ACTION ENTERED AND FORWARDED TO EXAMINER |
|
STPP | Information on status: patent application and granting procedure in general |
Free format text: FINAL REJECTION MAILED |
|
STPP | Information on status: patent application and granting procedure in general |
Free format text: NON FINAL ACTION MAILED |
|
STPP | Information on status: patent application and granting procedure in general |
Free format text: RESPONSE TO NON-FINAL OFFICE ACTION ENTERED AND FORWARDED TO EXAMINER |
|
STPP | Information on status: patent application and granting procedure in general |
Free format text: NOTICE OF ALLOWANCE MAILED -- APPLICATION RECEIVED IN OFFICE OF PUBLICATIONS |
|
STPP | Information on status: patent application and granting procedure in general |
Free format text: PUBLICATIONS -- ISSUE FEE PAYMENT VERIFIED |
|
STCF | Information on status: patent grant |
Free format text: PATENTED CASE |