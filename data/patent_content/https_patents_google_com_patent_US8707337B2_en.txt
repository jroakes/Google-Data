US8707337B2 - Dispatch API that permits midlets to initiate dispatch calls - Google Patents
Dispatch API that permits midlets to initiate dispatch calls Download PDFInfo
- Publication number
- US8707337B2 US8707337B2 US11/554,942 US55494206A US8707337B2 US 8707337 B2 US8707337 B2 US 8707337B2 US 55494206 A US55494206 A US 55494206A US 8707337 B2 US8707337 B2 US 8707337B2
- Authority
- US
- United States
- Prior art keywords
- dispatch
- environment
- application
- virtual machine
- domain
- Prior art date
- Legal status (The legal status is an assumption and is not a legal conclusion. Google has not performed a legal analysis and makes no representation as to the accuracy of the status listed.)
- Expired - Fee Related, expires
Links
Images
Classifications
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F21/00—Security arrangements for protecting computers, components thereof, programs or data against unauthorised activity
- G06F21/50—Monitoring users, programs or devices to maintain the integrity of platforms, e.g. of processors, firmware or operating systems
- G06F21/52—Monitoring users, programs or devices to maintain the integrity of platforms, e.g. of processors, firmware or operating systems during program execution, e.g. stack integrity ; Preventing unwanted data erasure; Buffer overflow
- G06F21/53—Monitoring users, programs or devices to maintain the integrity of platforms, e.g. of processors, firmware or operating systems during program execution, e.g. stack integrity ; Preventing unwanted data erasure; Buffer overflow by executing in a restricted environment, e.g. sandbox or secure virtual machine
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F9/00—Arrangements for program control, e.g. control units
- G06F9/06—Arrangements for program control, e.g. control units using stored programs, i.e. using an internal store of processing equipment to receive or retain programs
- G06F9/44—Arrangements for executing specific programs
- G06F9/448—Execution paradigms, e.g. implementations of programming paradigms
- G06F9/4482—Procedural
- G06F9/4484—Executing subprograms
- G06F9/4486—Formation of subprogram jump address
Definitions
- the present invention relates to the JAVA platform Micro Edition (ME) and, more particularly, to a dispatch API that permits MIDlets to initiate dispatch calls.
- ME JAVA platform Micro Edition
- JAVA platform Micro Edition is a collection of JAVA Application Program Interfaces (APIs) for the development of software for resource-constrained devices, such as mobile phones, personal data assistants (PDAs), navigation devices, and the like.
- JAVA ME devices implement a profile, such as the Mobile Information Device Profile (MIDP), which is part of the JAVA ME specification.
- MIDP Mobile Information Device Profile
- Application programs written for JAVA ME virtual machines are called MIDlets. MIDlets are often used to create games and applications for mobile phones.
- MIDP handles trust issues using protection domains, which are a collection of permissions that can be granted to MIDlets.
- Standard protection domains include a trusted domain and an untrusted domain.
- One way to establish a level of trust for a MIDlet is to sign the MIDlet using a X.509 based certificate. That is, a MIDlet designer can obtain a public key (PKI) that is used to authenticate the MIDlet upon installation.
- PKI public key
- VERISIGN public key
- GEOTRUST GEOTRUST
- THAWTE THAWTE
- MIDlet designers are left with uncertainty as to whether their MIDlets will be trusted or not, which can prevent these developers from attempting to utilize resources only available when the MIDlet is part of a trusted domain.
- the JAVA API can include a new dispatch initiation method referred to as makeCall, which can be a method of a JavaCall class.
- makeCall a new dispatch initiation method referred to as makeCall
- resulting behavior can be based upon a protection domain to which an invoking MIDlet belongs.
- the makeCall method is invoke from an untrusted domain
- the JAVA ME environment can be exited and the dispatch call can be executed within a native environment of a mobile device.
- the native interface can be called from the JAVA ME environment, where the native interface handles the dispatch call. Processes within the JAVA ME environment can be optionally suspended while the native interface handles the dispatch call.
- one aspect of the present invention can include a JAVA ME API comprising a JAVA ME method.
- the JAVA ME method can initiate a dispatch call from within a JAVA ME environment of a mobile device.
- the method can be invoked from an untrusted MIDlet or from a trusted MIDlet, which affects behavior.
- the JAVA ME environment can be automatically exited, control can be given to a native environment of the mobile device, and the dispatch call can be completed within the native environment.
- a dispatch interface that handles the dispatch call can be invoked without exiting the JAVA ME environment.
- the method can include a step of receiving a dispatch call request from a MIDlet disposed within a JAVA ME environment of a communication device, such as a mobile telephony device.
- the method can determine whether the MIDlet is in a domain having access to dispatch call functions implemented within a native environment of the communication device.
- a dispatch communication session can be established for the dispatch call request.
- the dispatch communication session execute within the native environment without exiting the JAVA ME environment.
- the dispatch call request can be conveyed to the native environment, the MIDlet can quit executing, the JAVA ME environment can be exited, and a dispatch communication session for the dispatch call request can be established from within the native environment.
- Still another aspect of the present invention can include a mobile device having two or more modes and having a dispatch capability that is able to be invoked from a MIDlet.
- the mobile device can include a JAVA ME environment and a native environment.
- the JAVA ME environment can include at least one MIDlet, which is installed in a protection domain.
- the native environment can include at least one dispatch method for establishing a dispatch session.
- the installed MIDlet can include a JAVA ME method for initiating a dispatch call.
- the protection domain is an untrusted domain and when the JAVA ME method is invoked, the JAVA ME environment can be automatically exited, control can be given to a native environment of the mobile device, and the dispatch method can be executed within the native environment.
- the protection domain is a trusted domain and when the JAVA ME method is invoked, the dispatch method can be executed without exiting the JAVA ME environment.
- various aspects of the invention can be implemented as a program for controlling computing environment to implement the functions described herein, or a program for enabling computing equipment to perform processes corresponding to the steps disclosed herein.
- This program may be provided by storing the program in a magnetic disk, an optical disk, a semiconductor memory, or any other recording medium.
- the program can also be provided as a digitally encoded signal conveyed via a carrier wave.
- the described program can be a single program or can be implemented as multiple subprograms, each of which interact within a single computing device or interact in a distributed fashion across a network space.
- the method detailed herein can also be a method performed at least in part by a service agent and/or a machine manipulated by a service agent in response to a service request.
- FIG. 1 is a schematic diagram of a system for initiating dispatch calls from a JAVA ME environment in accordance with an embodiment of the inventive arrangements disclosed herein.
- FIG. 2 is a flow chart of a method for initiating dispatch calls in a dual mode device in accordance with an embodiment of the inventive arrangements disclosed herein.
- FIG. 1 is a schematic diagram of a system 100 for initiating dispatch calls from a JAVA platform Micro Edition (JAVA ME) environment 140 in accordance with an embodiment of the inventive arrangements disclosed herein.
- the invention teaches that a MIDlet 112 can call a method 114 that initiates a dispatch call. Behavior of the method 114 depends on whether the MIDlet 112 belongs to a trusted domain 142 or an untrusted domain 144 .
- a dispatch interface 154 can be invoked for communicating with a layer 151 of a native environment 150 , where the dispatch interface 154 causes one or more dispatch functions 152 to execute.
- JAVA ME environment 140 processes can be suspended while the dispatch functions 152 execute, and the suspended processes can resume once the dispatch actions complete.
- the untrusted domain 144 can lack privileges to directly access layer 151 . Instead, the untrusted layer 144 can initiate a programmatic action that exits the JAVA ME environment 140 .
- One or more dispatch functions 152 can then be directly invoked from the native environment 150 .
- the one or more dispatch functions 152 can establish a dispatch session also referred to as a Push-To-Talk session between mobile device 130 and another mobile device (not shown). This other mobile device can be associated with a phone number specified by method 114 .
- application developers 110 create MIDlets, such as MIDlet 112 , and place them in a data store 118 accessible from one or more mobile devices 130 .
- Certificate authority (CA) 120 can issue a key that indicates that a stored MIDlet 118 is to be trusted.
- a MIDlet 112 is downloaded to device 130 and installed, it is placed in a protection domain.
- a protection domain can determine whether permissions are granted or denied.
- Standard protection domains include the trusted domain 142 and an untrusted domain 144 .
- Other protection domains exist, such as a minimum domain and a maximum domain, which are defined as part of the emulator included in the J2Me Wireless Toolkit 2.0.
- trusted domain 142 can be any protection domain that allows access to layer 151 and interface 154 . That is, trusted domain 142 allows the environment 140 direct access to dispatch functions 152 in native environment 152 and untrusted domain denies environment 140 this direct access.
- a status indicator can be sent to a server of the service provider and/or to an end device that is to receive the dispatch call.
- This status indicator can indicate whether the invoking MIDlet 112 is trusted or untrusted.
- the status indicator can provide additional information about the MIDlet 112 and/or about the mobile device 130 , which can cause the service provider and/or the dispatch receiving device to take a further programmatic action.
- the service provider can automatically send a digital message to a user of device 130 and/or to a developer of the MIDlet 112 that indicates that the MIDlet 112 installed in device 130 is currently untrusted and that enhanced functionally can be provided if the MIDlet 130 were certified by an authorized CA 120 .
- MIDlet 112 can be a JAVA program written for embedded devices, and more specifically to a JAVA ME compliant virtual machine.
- MIDlet 112 can be a subclass of the javax.microedition.MIDlet.MIDlet class that is defined by MIDP.
- MIDP MIDP
- the term MIDlet 112 is to be construed broadly to include any standard based upon or derived from the JAVA ME platform and is not to be limited to any particular specification version.
- JAVA is a platform independent, object-oriented programming language. JAVA code can be compiled into byte code, which can be run within a virtual machine.
- the JAVA ME environment 140 is an environment that includes a virtual machine capable of executing byte code that is configured to run on resource constrained devices, such as device 130 . Different virtual machines can be customized for a different platforms, which results in software written for environment 140 being platform independent.
- the environment 140 can also include a set of APIs suitable for tailored runtime environments of specific resource constrained devices.
- the environment 140 can permit device 130 to implement a profile that is aimed at a mobile device, such as the MIDP.
- JAVA ME environment 140 can be any edition, version, or derivative of the JAVA platform that is targeted at small, standalone, or connectable consumer and embedded devices.
- the JAVA ME method is configured to execute from within a single user virtual machine and is also configured to execute within a Multi-user virtual machine (MVM).
- MVM Multi-user virtual machine
- Mobile Device 130 can be a mobile or embedded communication device having dispatch capabilities.
- the mobile device 130 can have more than one mode and can therefore be a dual mode or a multimode device.
- Mobile device 130 can include, but is not limited to, a mobile telephone, a navigation system, a personal data assistant (PDA), a wearable computer, a media player, a mobile entertainment system, and the like.
- PDA personal data assistant
- CA 120 can be an entity which issues digital certificates for use by other parties. As such, the CA 120 is a trusted third party for purposes of a public key infrastructure (PKA) scheme used to certify MIDlet 112 .
- PKA public key infrastructure
- Examples of CAs 120 can include, but are not limited to, Netrust, ENTRUST, PGP, THAWTE, GEOTRUST, DigiCert, and VERISIGN.
- a service provider that provides dispatch services can act as a CA 120 . Further, the service provider can automatically and dynamically sign or certify MIDlet 112 , provided that developer 110 , device 130 , and/or user specific conditions are met, as established by the service provider. When automatically certified by a service provider, an associated MIDlet 112 can be placed in trusted domain 142 .
- Native Environment 150 can be a non-JAVA ME environment of the mobile device 130 , which includes dispatch functionality.
- the native environment 150 can be an Integrated Dispatch Enhanced Network (iDEN) compliant environment or a QCHAT compliant environment.
- iDEN Integrated Dispatch Enhanced Network
- QCHAT QCHAT compliant environment
- multiple different PTT technologies can be utilized by a single mobile device 130 depending upon resources available proximate to the device 130 .
- mobile device 130 can automatically use iDEN technology by default for PTT functions, but can seamlessly use QCHAT based technology for the dispatch call 114 when iDEN coverage is unavailable.
- the environment 150 is not limited to environments implementing any particular PTT technology.
- system 100 can utilize a TALKGROUP based technology, a Selective Dynamic Group Call (SDGC) based technology, a READYLINK based technology, a VoIP PTT based technology, a KODIAK NETWORKS based technology, and the like.
- SDGC Selective Dynamic Group Call
- Data store 118 can be a physical or virtual storage space configured to store digital information.
- Data store 118 can be physically implemented within any type of hardware including, but not limited to, a magnetic disk, an optical disk, a semiconductor memory, a digitally encoded plastic memory, a holographic memory, or any other recording medium.
- the data store 118 can be a stand-alone storage unit as well as a storage unit formed from a plurality of physical devices.
- information can be stored within data store 118 in a variety of manners. For example, information can be stored within a database structure or can be stored within one or more files of a file storage system, where each file may or may not be indexed for information searching purposes. Further, data store 118 can utilize one or more encryption mechanisms to protect stored information from unauthorized access.
- the various components (items 110 , 118 , 120 , and 130 ) illustrated in system 100 can be communicatively linked to each other via a network (not shown).
- the network can include any hardware/software/and firmware necessary to convey digital content encoded within carrier waves. Digital content can be contained within analog or digital signals and conveyed though data or voice channels.
- the networks can include network equipment, such as routers, data lines, hubs, and intermediary servers which together form a data or telephony network.
- the network can include mobile communication components, such as cellular communication towers, two-way radio transceiving components, and the like.
- FIG. 2 is a flow chart of a method 200 for initiating dispatch calls in a dual mode device in accordance with an embodiment of the inventive arrangement disclosed herein. Method 200 can be performed in the context of a system 100 .
- Method 200 can begin at step 205 , where a dispatch call method can be invoked from a MIDlet.
- the method can be a makeCall method of a JavaCall class.
- the makeCall method can receive a Uniform Resource Identifier (URI) formatted input string.
- URI Uniform Resource Identifier
- the URI's scheme name can be associated with a dispatch call (e.g. “ptt” for Push-To-Talk) and the scheme specific part of the URI can identify a number that is to be called.
- the format for the dispatch method of step 205 can be JavaCall.makeCall (“ptt://number”).
- the makeCall method can be overloaded to also handle voice based calls.
- JavaCall.makeCall (“voice//number”) can initiate a voice based call.
- the input string for the platformrequest ( ) method can be formatted in the same manner as the input string used by the makeCall method.
- the dispatch call can be confirmed. Additionally, any JAVA settings can be optionally saved as necessary.
- step 225 when the dispatch call is confirmed, JAVA ME processes can quit, control can be passed to a native environment that implements the dispatch call, and the dispatch call can be made.
- step 230 When the MIDlet of step 210 is trusted, the method can proceed to step 230 , where a call to a native interface can be made. For example, an INativeNumberEntry interface can be called.
- JAVA processes can be optionally suspended.
- step 240 the dispatch call can be made.
- step 245 the dispatch call can end and any previously suspended JAVA processes can be resumed.
- step 205 of invoking the dispatch call method can occur responsive to many different conditions.
- a user of a mobile device can select an option to invoke the dispatch method from within a JAVA ME based interface.
- an application executing on the mobile device can automatically initiate the dispatch method based upon occurrences of previously established conditions without requiring an explicit user selection of a dispatch initiation option.
- a mobile terminal can receive a dispatch request via an electronic message, such as an email message, a Short Message Service (SMS) message, a Multimedia Message Service (MMS) message, an ASCII/Unicode message, and the like.
- the electronic message can include an embedded URI string (e.g., ptt://number) for initiating a dispatch.
- This string can be interpreted by a browser element or an application management system (AMS) as a dispatch call.
- AMS application management system
- the element or AMS can apply the method 200 or can launch JAVA to handle an associated MIDlet, which in turn handles the dispatch request in accordance with method 200 .
- the present invention may be realized in hardware, software, or a combination of hardware and software.
- the present invention may be realized in a centralized fashion in one computer system or in a distributed fashion where different elements are spread across several interconnected computer systems. Any kind of computer system or other apparatus adapted for carrying out the methods described herein is suited.
- a typical combination of hardware and software may be a general purpose computer system with a computer program that, when being loaded and executed, controls the computer system such that it carries out the methods described herein.
- the present invention also may be embedded in a computer program product, which comprises all the features enabling the implementation of the methods described herein, and which when loaded in a computer system is able to carry out these methods.
- Computer program in the present context means any expression, in any language, code or notation, of a set of instructions intended to cause a system having an information processing capability to perform a particular function either directly or after either or both of the following: a) conversion to another language, code or notation; b) reproduction in a different material form.
Abstract
Description
Claims (20)
Priority Applications (2)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US11/554,942 US8707337B2 (en) | 2006-10-31 | 2006-10-31 | Dispatch API that permits midlets to initiate dispatch calls |
PCT/US2007/081168 WO2008054977A2 (en) | 2006-10-31 | 2007-10-12 | Dispatch api that permits midlets to initiate dispatch calls |
Applications Claiming Priority (1)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US11/554,942 US8707337B2 (en) | 2006-10-31 | 2006-10-31 | Dispatch API that permits midlets to initiate dispatch calls |
Publications (2)
Publication Number | Publication Date |
---|---|
US20080104572A1 US20080104572A1 (en) | 2008-05-01 |
US8707337B2 true US8707337B2 (en) | 2014-04-22 |
Family
ID=39331912
Family Applications (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
US11/554,942 Expired - Fee Related US8707337B2 (en) | 2006-10-31 | 2006-10-31 | Dispatch API that permits midlets to initiate dispatch calls |
Country Status (2)
Country | Link |
---|---|
US (1) | US8707337B2 (en) |
WO (1) | WO2008054977A2 (en) |
Cited By (1)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20130117743A1 (en) * | 2011-10-28 | 2013-05-09 | Gilbert Neiger | Instruction-Set Support for Invocation of VMM-Configured Services without VMM Intervention |
Families Citing this family (7)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
KR100927442B1 (en) * | 2007-08-16 | 2009-11-19 | 주식회사 마크애니 | Virtual Application Creation System, Virtual Application Installation Method, Native API Call Processing Method and Virtual Application Execution Method |
US8233931B2 (en) * | 2008-08-04 | 2012-07-31 | Research In Motion Limited | Initiating a selective dynamic group call from a wireless mobile application |
US8572561B1 (en) * | 2008-08-06 | 2013-10-29 | Sprint Spectrum L.P. | Multiple java ME MIDlet execution in single-instance CLDC JVM |
US9147085B2 (en) * | 2010-09-24 | 2015-09-29 | Blackberry Limited | Method for establishing a plurality of modes of operation on a mobile device |
US20130039266A1 (en) | 2011-08-08 | 2013-02-14 | Research In Motion Limited | System and method to increase link adaptation performance with multi-level feedback |
US9271149B2 (en) * | 2013-10-18 | 2016-02-23 | Verizon Patent And Licensing Inc. | Managing hidden security features in user equipment |
CN109347921A (en) * | 2018-09-20 | 2019-02-15 | 北京京东金融科技控股有限公司 | A kind for the treatment of method and apparatus of digital certificate business |
Citations (18)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20020144233A1 (en) * | 2001-01-22 | 2002-10-03 | Kelvin Chong | Efficient system and method for running and analyzing multi-channel, multi-modal applications |
US20030149801A1 (en) * | 2001-12-12 | 2003-08-07 | Kushnirskiy Igor Davidovich | Scriptable plug-in application programming interface |
US6708276B1 (en) | 1999-08-03 | 2004-03-16 | International Business Machines Corporation | Architecture for denied permissions in Java |
US6742123B1 (en) * | 1999-09-10 | 2004-05-25 | Sun Microsystems, Inc. | Apparatus and methods for preventing denial of service attacks |
US20040127190A1 (en) | 2002-09-23 | 2004-07-01 | Jonas Hansson | Security access manager in middleware |
EP1564957A1 (en) | 2004-02-11 | 2005-08-17 | Sony Ericsson Mobile Communications AB | Method and apparatus for providing dynamic security management |
US20060021029A1 (en) * | 2004-06-29 | 2006-01-26 | Brickell Ernie F | Method of improving computer security through sandboxing |
US20060031408A1 (en) | 2004-05-06 | 2006-02-09 | Motorola, Inc. | Push to activate and connect client/server applications |
US20060031941A1 (en) * | 2004-08-06 | 2006-02-09 | Motorola, Inc. | Enhanced security using service provider authentication |
US7010610B1 (en) * | 2000-05-22 | 2006-03-07 | International Business Machines Corporation | Programmable agent workstation system and method |
US20070019656A1 (en) * | 2004-12-20 | 2007-01-25 | Nextel Communications, Inc. | Systems and method for a dispatch communication router |
US20070074034A1 (en) * | 2005-09-29 | 2007-03-29 | Research In Motion Limited | System and method for registering entities for code signing services |
US20070168953A1 (en) * | 2005-11-16 | 2007-07-19 | Daniel Diez | Unified mobile platform |
US20080144796A1 (en) * | 2005-03-18 | 2008-06-19 | Ringland Simon P A | Establishing Communications Sessions |
US7418718B2 (en) * | 2003-04-02 | 2008-08-26 | Microsoft Corporation | Runtime hosting interfaces |
US7434224B2 (en) * | 2003-04-09 | 2008-10-07 | Jaluna Sa | Plural operating systems having interrupts for all operating systems processed by the highest priority operating system |
US7451484B1 (en) * | 1999-05-27 | 2008-11-11 | International Business Machines Corporation | Method for enabling a program written in untrusted code to interact with a security subsystem of a hosting operating system |
US7895594B2 (en) * | 2005-03-28 | 2011-02-22 | Freescale Semiconductor, Inc. | Virtual machine extended capabilities using application contexts in a resource-constrained device |
-
2006
- 2006-10-31 US US11/554,942 patent/US8707337B2/en not_active Expired - Fee Related
-
2007
- 2007-10-12 WO PCT/US2007/081168 patent/WO2008054977A2/en active Application Filing
Patent Citations (18)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US7451484B1 (en) * | 1999-05-27 | 2008-11-11 | International Business Machines Corporation | Method for enabling a program written in untrusted code to interact with a security subsystem of a hosting operating system |
US6708276B1 (en) | 1999-08-03 | 2004-03-16 | International Business Machines Corporation | Architecture for denied permissions in Java |
US6742123B1 (en) * | 1999-09-10 | 2004-05-25 | Sun Microsystems, Inc. | Apparatus and methods for preventing denial of service attacks |
US7010610B1 (en) * | 2000-05-22 | 2006-03-07 | International Business Machines Corporation | Programmable agent workstation system and method |
US20020144233A1 (en) * | 2001-01-22 | 2002-10-03 | Kelvin Chong | Efficient system and method for running and analyzing multi-channel, multi-modal applications |
US20030149801A1 (en) * | 2001-12-12 | 2003-08-07 | Kushnirskiy Igor Davidovich | Scriptable plug-in application programming interface |
US20040127190A1 (en) | 2002-09-23 | 2004-07-01 | Jonas Hansson | Security access manager in middleware |
US7418718B2 (en) * | 2003-04-02 | 2008-08-26 | Microsoft Corporation | Runtime hosting interfaces |
US7434224B2 (en) * | 2003-04-09 | 2008-10-07 | Jaluna Sa | Plural operating systems having interrupts for all operating systems processed by the highest priority operating system |
EP1564957A1 (en) | 2004-02-11 | 2005-08-17 | Sony Ericsson Mobile Communications AB | Method and apparatus for providing dynamic security management |
US20060031408A1 (en) | 2004-05-06 | 2006-02-09 | Motorola, Inc. | Push to activate and connect client/server applications |
US20060021029A1 (en) * | 2004-06-29 | 2006-01-26 | Brickell Ernie F | Method of improving computer security through sandboxing |
US20060031941A1 (en) * | 2004-08-06 | 2006-02-09 | Motorola, Inc. | Enhanced security using service provider authentication |
US20070019656A1 (en) * | 2004-12-20 | 2007-01-25 | Nextel Communications, Inc. | Systems and method for a dispatch communication router |
US20080144796A1 (en) * | 2005-03-18 | 2008-06-19 | Ringland Simon P A | Establishing Communications Sessions |
US7895594B2 (en) * | 2005-03-28 | 2011-02-22 | Freescale Semiconductor, Inc. | Virtual machine extended capabilities using application contexts in a resource-constrained device |
US20070074034A1 (en) * | 2005-09-29 | 2007-03-29 | Research In Motion Limited | System and method for registering entities for code signing services |
US20070168953A1 (en) * | 2005-11-16 | 2007-07-19 | Daniel Diez | Unified mobile platform |
Non-Patent Citations (5)
Title |
---|
"An Adaptive Model for Reconfigurable Autonomous Services using Profiling", Truchat, 2006, pp. 1-13. * |
"Information Module Profile Next generation", Java Community, 2005, pp. 197. * |
"Supporting Programmale Handoff in Mobile Networks", Kounavis, 1999, pp. 1-11. * |
"Towards a Java Based Enterprise Client for Small device", Bush, 2002, pp. 1-47. * |
Patent Cooperation Treaty, "PCT Search Report and Written Opinion of the International Searching Authority" for International Application No. PCT/US2007/081168 dated Jul. 9, 2008, 11 pages. |
Cited By (5)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20130117743A1 (en) * | 2011-10-28 | 2013-05-09 | Gilbert Neiger | Instruction-Set Support for Invocation of VMM-Configured Services without VMM Intervention |
US20140013326A1 (en) * | 2011-10-28 | 2014-01-09 | Gilbert Neiger | Instruction-Set Support for Invocation of VMM-Configured Services without VMM Intervention |
US9804871B2 (en) * | 2011-10-28 | 2017-10-31 | Intel Corporation | Instruction-set support for invocation of VMM-configured services without VMM intervention |
US9804870B2 (en) * | 2011-10-28 | 2017-10-31 | Intel Corporation | Instruction-set support for invocation of VMM-configured services without VMM intervention |
US10678575B2 (en) | 2011-10-28 | 2020-06-09 | Intel Corporation | Instruction-set support for invocation of VMM-configured services without VMM intervention |
Also Published As
Publication number | Publication date |
---|---|
WO2008054977A3 (en) | 2008-09-04 |
WO2008054977A2 (en) | 2008-05-08 |
US20080104572A1 (en) | 2008-05-01 |
Similar Documents
Publication | Publication Date | Title |
---|---|---|
US11424943B2 (en) | System and method for interapplication communications | |
US8707337B2 (en) | Dispatch API that permits midlets to initiate dispatch calls | |
US9230085B1 (en) | Network based temporary trust extension to a remote or mobile device enabled via specialized cloud services | |
US8424068B2 (en) | Methods and apparatus for providing application credentials | |
JP4685876B2 (en) | System and method for providing multiple credential authentication protocols | |
JP4351046B2 (en) | Using permissions to allocate device resources to applications | |
EP1776799B1 (en) | Enhanced security using service provider authentication | |
US9208339B1 (en) | Verifying Applications in Virtual Environments Using a Trusted Security Zone | |
KR100883699B1 (en) | Execution of unverified programs in a wireless device operating environment | |
EP2102745A1 (en) | Apparatus and methods for client-driven server-side installation | |
US20060137007A1 (en) | Revoking a permission for a program | |
NZ545555A (en) | Methods and apparatus for determining device integrity | |
US9223938B2 (en) | Location bound secure domains | |
CN108563953A (en) | A kind of trusted application development approach of secure extensible | |
US10924280B1 (en) | Digital notary use in distributed ledger technology (DLT) for block construction and verification | |
US20130291091A1 (en) | Location Bound Secure Domains | |
US11838985B2 (en) | Policy-based management of embedded subscriber identity module (eSIM) profiles | |
Ferdous et al. | CAFS: A framework for context-aware federated services | |
KR20130140930A (en) | System for providing isolated- executing-environment and method thereof |
Legal Events
Date | Code | Title | Description |
---|---|---|---|
AS | Assignment |
Owner name: MOTOROLA, INC., ILLINOISFree format text: ASSIGNMENT OF ASSIGNORS INTEREST;ASSIGNORS:HERNANDEZ, EDWIN A.;GUAN, XIN;ZHANG, XIAO-GUO;REEL/FRAME:018460/0380Effective date: 20061031 |
|
AS | Assignment |
Owner name: MOTOROLA MOBILITY, INC, ILLINOISFree format text: ASSIGNMENT OF ASSIGNORS INTEREST;ASSIGNOR:MOTOROLA, INC;REEL/FRAME:025673/0558Effective date: 20100731 |
|
AS | Assignment |
Owner name: MOTOROLA MOBILITY LLC, ILLINOISFree format text: ASSIGNMENT OF ASSIGNORS INTEREST;ASSIGNOR:MOTOROLA MOBILITY, INC.;REEL/FRAME:028829/0856Effective date: 20120622 |
|
STCF | Information on status: patent grant |
Free format text: PATENTED CASE |
|
AS | Assignment |
Owner name: GOOGLE TECHNOLOGY HOLDINGS LLC, CALIFORNIAFree format text: ASSIGNMENT OF ASSIGNORS INTEREST;ASSIGNOR:MOTOROLA MOBILITY LLC;REEL/FRAME:034500/0001Effective date: 20141028 |
|
MAFP | Maintenance fee payment |
Free format text: PAYMENT OF MAINTENANCE FEE, 4TH YEAR, LARGE ENTITY (ORIGINAL EVENT CODE: M1551)Year of fee payment: 4 |
|
FEPP | Fee payment procedure |
Free format text: MAINTENANCE FEE REMINDER MAILED (ORIGINAL EVENT CODE: REM.); ENTITY STATUS OF PATENT OWNER: LARGE ENTITY |
|
LAPS | Lapse for failure to pay maintenance fees |
Free format text: PATENT EXPIRED FOR FAILURE TO PAY MAINTENANCE FEES (ORIGINAL EVENT CODE: EXP.); ENTITY STATUS OF PATENT OWNER: LARGE ENTITY |
|
STCH | Information on status: patent discontinuation |
Free format text: PATENT EXPIRED DUE TO NONPAYMENT OF MAINTENANCE FEES UNDER 37 CFR 1.362 |
|
FP | Lapsed due to failure to pay maintenance fee |
Effective date: 20220422 |