EP3158508A1 - Fine-grained image similarity - Google Patents
Fine-grained image similarityInfo
- Publication number
- EP3158508A1 EP3158508A1 EP15733979.7A EP15733979A EP3158508A1 EP 3158508 A1 EP3158508 A1 EP 3158508A1 EP 15733979 A EP15733979 A EP 15733979A EP 3158508 A1 EP3158508 A1 EP 3158508A1
- Authority
- EP
- European Patent Office
- Prior art keywords
- image
- features
- images
- representation
- similarity
- Prior art date
- Legal status (The legal status is an assumption and is not a legal conclusion. Google has not performed a legal analysis and makes no representation as to the accuracy of the status listed.)
- Withdrawn
Links
Classifications
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06N—COMPUTING ARRANGEMENTS BASED ON SPECIFIC COMPUTATIONAL MODELS
- G06N20/00—Machine learning
- G06N20/10—Machine learning using kernel methods, e.g. support vector machines [SVM]
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F16/00—Information retrieval; Database structures therefor; File system structures therefor
- G06F16/50—Information retrieval; Database structures therefor; File system structures therefor of still image data
- G06F16/51—Indexing; Data structures therefor; Storage structures
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F16/00—Information retrieval; Database structures therefor; File system structures therefor
- G06F16/50—Information retrieval; Database structures therefor; File system structures therefor of still image data
- G06F16/58—Retrieval characterised by using metadata, e.g. metadata not derived from the content or metadata generated manually
- G06F16/583—Retrieval characterised by using metadata, e.g. metadata not derived from the content or metadata generated manually using metadata automatically derived from the content
- G06F16/5838—Retrieval characterised by using metadata, e.g. metadata not derived from the content or metadata generated manually using metadata automatically derived from the content using colour
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F18/00—Pattern recognition
- G06F18/20—Analysing
- G06F18/22—Matching criteria, e.g. proximity measures
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F18/00—Pattern recognition
- G06F18/20—Analysing
- G06F18/24—Classification techniques
- G06F18/241—Classification techniques relating to the classification model, e.g. parametric or non-parametric approaches
- G06F18/2413—Classification techniques relating to the classification model, e.g. parametric or non-parametric approaches based on distances to training or reference patterns
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06N—COMPUTING ARRANGEMENTS BASED ON SPECIFIC COMPUTATIONAL MODELS
- G06N20/00—Machine learning
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06N—COMPUTING ARRANGEMENTS BASED ON SPECIFIC COMPUTATIONAL MODELS
- G06N3/00—Computing arrangements based on biological models
- G06N3/02—Neural networks
- G06N3/04—Architecture, e.g. interconnection topology
- G06N3/045—Combinations of networks
Definitions
- This specification relates to image processing.
- the Internet provides access to a wide variety of resources such as video or audio files, web pages for particular subjects, book articles, or news articles.
- resources such as video or audio files, web pages for particular subjects, book articles, or news articles.
- search queries usually are terms and phrases.
- image searches such as search of still images and videos
- the search queries can be images, or terms and phrases, or a combination of images, terms and phrases.
- a search system ranks the resources in response to the query and provides search results that link to the identified resources. The search results are typically ordered for viewing according to the rank.
- a search system may use a trained model function to identify images that are similar to a search query image.
- a variety of model functions can be used. Many of these trained models are optimized to identify images that belong to a same category.
- This specification describes technologies relating to image processing, and in particular training an image embedding function to distinguish differences and identify similarities between images that belong to a same category.
- one innovative aspect of the subject matter described in this specification can be embodied in methods that include the actions of iteratively training an image embedding function on image triplets, the embedding function comprising a set of parameter weights that operate on an input image to produce as output a representation of features of the image, each iteration of the training comprising: selecting image triplets, each image triplet being a combination of a first image, a second image and a third image, wherein a first pairwise relevance score that measures a similarity of the first image to the second image is greater than a second pairwise relevance score that measures the similarity of the first image to the third image; for each image triplet: providing each of the first, second and third images as input to the image embedding function, generating, by the image embedding function, a first representation of the features of the first image, a second representation of the features of the second image, and a third representation of the features of the third image, determining, based on the first representation of features and the second
- the systems and methods described below learn fine-grained image similarity to distinguish the differences between images belonging to the same category.
- the resulting image embedding function can incorporate both semantic and visual similarity features.
- a learned image embedding function considers both within-class images and between-class images.
- Within-class images are images that belong to the same class, and between-class images are images that belong to different classes.
- the system implements a sampling method and a training data generation method to generate a robust set of image triplets that include both within-class and between-class image sets.
- the multi- scale network structure can capture effectively the global visual appearance and image category information.
- the incorporation of the semantic information is useful for distinguishing images from different classes, and the incorporation of visual information is useful for distinguishing
- the triplet sampling method makes it possible to provide large amounts of training data to learn the image embedding function.
- FIG. 1 is block diagram of a network architecture for learning an image embedding function based on image triplet training data.
- Fig. 2 is a table of image triplets.
- Fig. 3 is a flow diagram of an example process for learning the image embedding function based on image triplet training data.
- Fig. 4 is a block diagram of a network structure for learning the image embedding function.
- FIG. 5 is a flow diagram of an example process for generating image triplet training data.
- Fig. 6 is a flow diagram of an example process for generating collections of images for multiple classes.
- Fig. 1 is block diagram of a system 100 for learning an image embedding function f(.) based on image triplet training data.
- the system 100 can be implemented in a data processing apparatus system of one or more networked computers.
- the system 100 iteratively trains the image embedding function on image triplets selected from training images 102.
- the image embedding function is based on a set of parameter weights fFthat operate on an input image to produce as output a representation of features of the image.
- Data defining the image embedding function is stored in model data 104.
- Each image triplet is a combination of a first image 1 12, a second image 114 and a third image 116.
- the first image may be considered a "query" image Q
- the second image may be considered a "positive” image P
- the third image may be considered a "negative” image N.
- Fig. 2 is a table 200 of image triplets, with rows 210 that correspond to the query image, positive image, and negative image.
- Each column 220 corresponds to an image triplet T such that
- the system 100 uses the triplets to train an image embedding function that can, once trained, distinguish fine-grained image similarity of images within a same class.
- FIG. 3 is a flow diagram of an example process 300 for learning the image embedding function based on image triplet training data.
- the process 300 can be implemented in a data processing apparatus system of one or more networked computers.
- the process 300 is described in the context of a particular image embedding function that can determine a similarity of two images based on a distance metric.
- image embedding function f(.) maps an image into a point in Euclidean space.
- image embedding functions that generate other representations of images based on the image features and classification can also be used.
- any appropriate tunable function that can be iteratively trained by the process 300 can be used, and thus the image embedding function need not be the particular example function described below.
- the process 300 selects image triplets (302).
- the triplet selection layer 1 10 selects the image triplets.
- the image triplets that are selected include the first, second and third images as described above.
- a first pairwise relevance score measures a similarity of the first image to the second image
- a second pairwise relevance score measures the similarity of the first image to the third image.
- the images in the triplet are selected such that the first image is more similar to the second image than it is to the third image.
- the process 300 For each triplet, the process 300 provides each of the first, second and third image as input to the image embedding function (304).
- the triplet selection layer 110 provides the first image 112, the second image 114 and the third image 116 to the image embedding function f(.) to generate instances f(.) 122, f(.) l2A and f(.) ⁇ 26.
- Each instance uses the same embedding function f(.) but receives only one of the images in the image triplet as input.
- the process 300 For each triplet, the process 300 generates, by the image embedding function, representations of the visual features of each of the images (306). For example, as shown in Fig. 1, the representations f(Q), f(P), and f(N) are generated.
- the embedding function generates a mapping of the image in Euclidean space as an output representation of features. However, other functions generating other representations can be used.
- the process 300 determines a first similarity measure that measures a similarity of the first image to the second image (308), and a second similarity measure that measures a similarity of the first image to the third image (310).
- the ranking layer 130 determines, based on the first representation of features f(Q) and the second representation of features f(P), a first similarity measure that measures a similarity of the first image to the second image.
- the ranking layer 130 determines, based on the first representation of features f(Q) and the third representation of features f(N), a second similarity measure that measures a similarity of the first image to the third image.
- the ranking layer 130 may determine the Euclidean distance as the similarity measure, e.g.,
- the smaller the distance D the more fine-grained similarity there is between the images P and Q (or P and N). Conversely, the larger the distance D, the less fine-grained similarity there is between the images P and Q (or P and N).
- other similarity measures can be used, such as different distance type, or a similarity measurement that is not distance based. The similarity measurement used may depend on the representation that the image embedding function f(.) generates.
- the process 300 determines a performance measure of the image embedding function for the image triplet based on the first and second similarity measures (312).
- the ranking layer 130 may determine a performance measure of the image embedding function for the image triplet based on the first
- the system 100 attempts to learn an image embedding function f(.) that assigns a smaller distance to more similar image pairs, which can be expressed as:
- the performance measure of the triplet may, in some implementations, involve determining a hinge loss based on a difference of the first Euclidean distance and the second Euclidean distance, e.g., m ⁇ C ? t- ⁇ / ⁇ , /iff )) - £>(/( ⁇ » ⁇ ' )) ⁇
- variable g is a gap parameter that regularizes the gap between the distance of two image pairs (pi pi + ) and (pi pi).
- the hinge loss is a convex approximation to the 0-1 ranking error loss, which measures the image function's violation of the ranking order specified in the triplet.
- Other types of performance measures depending on the output of the image embedding function f(.), can also be used.
- the process 300 adjusts the parameter weights of the image embedding function based on the performance measures for the image triplets (314). For example, an objective function of erformance can be computed according to: »; , ) , p- ' such th t ip, : -p '*' ) > ip -. p ⁇ ⁇
- the parameter ⁇ is a regularization parameter that controls the margin of the learned function to improve its generalization.
- the process 300 determines if a cessation event has occurred (316).
- a cessation event is an event that causes the training process to stop performing further training iterations. For example, a maximum number of training iterations being reached may be a cessation event, or satisfaction of the objective performance function described above may be a cessation event.
- the system of Fig. 1 can be used to train a neural network structure to learn the image embedding function f(.).
- the neural network computes the embedding of an image pi: f(pi) ER d , where d is the dimension of feature embedding.
- the ranking layer 130 evaluates the embedding function's violation of the ranking order.
- the ranking layer 130 back-propagates the gradients to lower layers of the network so that the lower layers can adjust their parameters to minimize the ranking loss.
- Fig. 4 is a block diagram of a network structure 400 for learning the image embedding function.
- the network structure implements different levels of invariance at different scales.
- the convolution neural network 410 may be of the ConvNet architecture that is trained to classify images into different classes, as described in the paper Imagenet Classification With Deep Convolutional Neural Networks, A. Krizhevsky, I. Sutskever, and G. Hinton, NIPS, pages 1 106-11 14 (2012).
- the convolution neural network 410 implements multiple convolutional layers that encode strong invariance and captures the image semantics.
- the convolution neural network 410 contains multiple stacked convolutional layers, max-pooling layers, local normalization layers and fully-connected layers.
- each additional network has fewer convolution layers than the convolutional neural network 410.
- the additional convolutional neural networks each respectively employ one convolutional layer 422 and 432.
- the convolutional layers 422 and 432 are implemented in two low-resolution paths that extract low resolution visual features.
- the numbers shown on the top of each flow arrow describe the size of the output image or feature.
- the numbers shown on the top of an entity box describe the size of the kernels for the corresponding layer.
- the numbers shown in Fig. 4 are examples only, and may vary based on the size of the original image to be processed before down sampling, and also may vary based on the kernel size.
- the pathways that include the two convolutional layers 422 and 432 have less invariance than the convolutional network 410 and capture the visual appearance of an image.
- the first convolutional neural network 410 has a first quantity of convolutional layers, e.g., 8, and is trained to classify images into different classes.
- the convolutional neural network 410 may, in some implementations, be pre-trained prior to the training of the image embedding function f(.).
- the convolutional neural network 410 may be pre-trained on a dataset that is selected for the convolutional neural network 410 to learn image semantic information.
- convolutional neural network 410 is configured to receive as input an image 402 at a first resolution, e.g., 256 x 256. Other resolutions can also be used.
- Each second convolution neural network 422 and 432 constitutes a path having a second quantity of convolutional layers, e.g., one layer, and is trained to extract low-resolution features at respective second resolutions that are less than the first resolution.
- subsamplers 420 and 430 down sample the image 402 at 4: 1 and 8: 1, respectively, and provide the down sampled images to the convolutional layers 422 and 432.
- Each convolutional layer 422 and 432 receives the down sampled image as input, convolves it with a set of k learnable kernels, and puts through the activation function to generate k feature maps.
- the convolutional layers 422 and 432 can each be implemented as a set of local feature detectors.
- the max pooling layers 424 and 434 perform max pooling over a local neighborhood around a pixel.
- the max pooling involves selecting a maximum of a block that is pooled.
- the max pooling layers 424 and 434 makes the feature maps robust to small translations.
- the normalization layers 412 and 440 normalize the outputs of the
- the normalization layers 412 and 440 normalize the feature maps around a local neighborhood to have unit norm and zero mean. This leads to feature maps that are robust to the differences in illumination and contrast.
- the combiner 442 implements linear embedding to combine the normalized outputs.
- the images are selected according to likelihoods that are based on pairwise relevance scores and pairwise relevance totals of the images.
- the pairwise relevance total for each image is generated from the pairwise relevance scores for the image relative to each other image in a set. This process is described with reference to Fig.
- the process 500 can be implemented in a data processing apparatus system of one or more networked computers.
- the process 500 accesses images collected into respective classes (502). With respect to any particular class, e.g., a category or some other collection construct, a pair of within-class images are a pair of images that belong to the particular class, and a pair of between-class images are an image pair in which one image belongs to the particular class and the other image belongs to another class.
- the images collected into the classes can be provided to the system 100, or, in an alternate implementation, can be generated as described in the next section.
- the pairwise relevance total of an image pi reflects how relevant the image is in terms of its relevance to the other images in the same category.
- the process 500 selects an image in the class of images as a first image in the image triplet according to a likelihood that is proportional to its pairwise relevance total (506).
- the system 100 first samples a first image, or query image, pi from P according to its pairwise relevance total n.
- the likelihood of an image being chosen as a query image is thus proportional to its total relevance score.
- the process 500 selects another image in the class of images as a second image in the image triplet according to a likelihood based on a selection threshold and a pairwise relevance score that measures a similarity of the first image to the second image (508).
- the images that are selected for the second image also known as the positive image, are selected from the same category from which the first image was selected. Because it is desirable to have a relatively high relevance measure for the first and second image of a triplet when compared to a relevance measure of the first and third image of the triplet, the system 100 should be biased to samples the second images pi + from images with high relevance scores m+. Thus, the system determines a likelihood of choosing a given image as the second ima e pi + according to the following probability:
- T P is a threshold parameter for a minimum likelihood
- Zi is a normalization constant that is equal to ⁇ + ⁇ ( ⁇ + ) for all the pt + in the same category as the first image pu
- the third image also known as a negative image, may be selected from either an in-class image or from an out-of-class image.
- the choice between selecting an in-class image or an out-of-class image may be made randomly, or may be made according to an in-class/out-of-class target ratio.
- the process 500 selects another image in the class of images as a third image in the image triplet according to a likelihood based on the section threshold and the pairwise relevance score that measures a similarity of the first image to the third image (510A). Because it is desirable to have a relatively low relevance measure for the first and third image of a triplet when compared to a relevance measure of the first and second image of a triplet, the system 100 should be biased to samples of the second images pi from image with low relevance scores n,u. In some implementations, in-class images are drawn for the third image with the same distribution described above with reference to the second image of the triplet.
- the process 500 selects another image in another class as a third image in the image triplet (510B).
- the out-of- class images are drawing uniformly from all the images that belong to a different class from the first image pu
- the system 100 can require that for each image triplet, the first, second and third images are selected such that the difference resulting from subtracting the second pairwise relevance score from the first pairwise relevance score meets or exceeds a threshold difference TV, e.g.,
- pairwise relevance functions r(.) can be used to realize the pairwise relevance scores.
- the function r(.) is constrained to be 0 for between-class image pairs.
- the function r(.) in some implementations, in some
- implementations may include a weighted linear combination of multiple features, such as histogram object gradients (HOG) features, scale invariant feature transforms (SIFT), Laplacian of Gaussian (LoG) blob detection, and the like.
- HOG histogram object gradients
- SIFT scale invariant feature transforms
- LiG Laplacian of Gaussian
- the function r(.) may also use features derived from the image annotations.
- the linear weights may be learned through max-margin linear weight learning using human rated data.
- the function r(.) accounts for both visual appearance information and semantic information.
- the function r(.) may be expensive to compute, and thus modeling the image embedding function f(.), which is less expensive to compute, results in resource savings.
- pairwise relevance functions can also be used, and the pairwise relevance function need not be constrained to be 0 for between-class image pairs.
- the system 100 uses two collections of training data to train the image embedding function f(.).
- the first is a dataset that is selected for the convolutional neural network 410 to learn image semantic information.
- the data set may contain N images in M categories, where N and M are on the order of 1 ,000.
- training set is the ImageNet ILSVRC-2012 dataset. Other training sets can also be used.
- the second training data set is relevance training data, which is used for learning fine-grained visual similarity.
- the images are collected in a bootstrapping fashion, as described with reference to Fig. 6, which is a flow diagram of an example process 600 for generating collections of images for multiple classes.
- the process 600 can be implemented in a data processing apparatus system of one or more networked computers.
- the process 600 selects a set of image search queries (602).
- the triplet selection layer 110 may communicate with a search system 108 and select a set of popular queries.
- the popular quires may be filtered to ensure class diversity. For example, queries such as "Lions” and “Lion images” may be collapsed into the canonical query “Lions.”
- the filtering can be implemented using appropriate processes that measure query similarity and query equivalence.
- the triplet selection layer 1 10 may have been provided a set of queries from an administrator that specified the set of queries.
- the process 600 submits each image search query to an image search engine and receives in response to the image search query data identifying images responsive to the query (604).
- the triplet selection layer 1 10 provides each query to the search system 108 and receives from the search system image search results for each query.
- the search results are ranked according to an order that is indicative of the relevance of the corresponding image to the query.
- the process 600 for each image search query, selects a proper subset of the top N ranked images identified as being responsive to the image search query (606). For example, for each query, the top N images in the rank order are selected. The value of N is selected to ensure that there may be a diverse set of triplets selected. For example, N may be in the range of 100 to 200.
- the process 600 associates each proper subset of top N ranked images as images collected into a respective class of images, where the respective class is different for each proper subset (608).
- Each class may correspond to the query for which the images were identified.
- the images and their associations with classes are then stored as the training images 102.
- the system 100 may then utilize the process 500 of Fig. 5 to generate the training triplets.
- Embodiments of the subject matter and the operations described in this specification can be implemented in digital electronic circuitry, or in computer software, firmware, or hardware, including the structures disclosed in this specification and their structural equivalents, or in combinations of one or more of them.
- Embodiments of the subject matter described in this specification can be implemented as one or more computer programs, i.e., one or more modules of computer program instructions, encoded on computer storage medium for execution by, or to control the operation of, data processing apparatus.
- a computer storage medium can be, or be included in, a computer-readable storage device, a computer-readable storage substrate, a random or serial access memory array or device, or a combination of one or more of them. Moreover, while a computer storage medium is not a propagated signal, a computer storage medium can be a source or destination of computer program instructions encoded in an artificially-generated propagated signal.
- the term "data processing apparatus” encompasses all kinds of apparatus, devices, and machines for processing data, including by way of example a programmable processor, a computer, a system on a chip, or multiple ones, or combinations, of the foregoing.
- the apparatus can include special purpose logic circuitry, e.g., an FPGA (field programmable gate array) or an ASIC (application-specific integrated circuit).
- the apparatus can also include, in addition to hardware, code that creates an execution environment for the computer program in question, e.g., code that constitutes processor firmware, a protocol stack, a database management system, an operating system, a cross- platform runtime environment, a virtual machine, or a combination of one or more of them.
- the apparatus and execution environment can realize various different computing model infrastructures, such as web services, distributed computing and grid computing infrastructures.
- a computer program (also known as a program, software, software application, script, or code) can be written in any form of programming language, including compiled or interpreted languages, declarative or procedural languages, and it can be deployed in any form, including as a stand-alone program or as a module, component, subroutine, object, or other unit suitable for use in a computing environment.
- a computer program may, but need not, correspond to a file in a file system.
- a program can be stored in a portion of a file that holds other programs or data (e.g., one or more scripts stored in a markup language document), in a single file dedicated to the program in question, or in multiple coordinated files (e.g., files that store one or more modules, sub-programs, or portions of code).
- a computer program can be deployed to be executed on one computer or on multiple computers that are located at one site or distributed across multiple sites and interconnected by a communication network.
- processors suitable for the execution of a computer program include, by way of example, both general and special purpose microprocessors, and any one or more processors of any kind of digital computer.
- processors will receive instructions and data from a read-only memory or a random access memory or both.
- the essential elements of a computer are a processor for performing actions in accordance with instructions and one or more memory devices for storing instructions and data.
- a computer will also include, or be operatively coupled to receive data from or transfer data to, or both, one or more mass storage devices for storing data, e.g., magnetic, magneto-optical disks, or optical disks.
- mass storage devices for storing data, e.g., magnetic, magneto-optical disks, or optical disks.
- a computer need not have such devices.
- Embodiments of the subject matter described in this specification can be implemented in a computing system that includes a back-end component, e.g., as a data server, or that includes a middleware component, e.g., an application server, or that includes a front-end component, e.g., a user computer having a graphical user interface or a Web browser through which a user can interact with an implementation of the subject matter described in this specification, or any combination of one or more such back-end, middleware, or front-end components.
- the components of the system can be interconnected by any form or medium of digital data communication, e.g., a
- the computing system can include users and servers.
- a user and server are generally remote from each other and typically interact through a communication network.
- the relationship of user and server arises by virtue of computer programs running on the respective computers and having a user-server relationship to each other.
Abstract
Methods, systems, and apparatus, for determining fine-grained image similarity. In one aspect, a method includes training an image embedding function on image triplets by selecting image triplets of first, second and third images; generating, by the image embedding function, a first, second and third representations of the features of the first, second and third images; determining, based on the first representation of features and the second representation of features, a first similarity measure for the first image to the second image; determining, based on the first representation of features and the third representation of features, a second similarity measure for the the first image to the third image; determining, based on the first and second similarity measures, a performance measure of the image embedding function for the image triplet; and adjusting the parameter weights of the image embedding function based on the performance measures for the image triplets.
Description
FINE-GRAINED IMAGE SIMILARITY
CLAIM OF PRIORITY
This application claims priority under 35 USC § 119(e) to U.S. Patent Application Serial No. 62/015, 107, filed on June 20, 2014, the entire contents of which are hereby incorporated by reference.
BACKGROUND
[0001] This specification relates to image processing.
[0002] The Internet provides access to a wide variety of resources such as video or audio files, web pages for particular subjects, book articles, or news articles. There are many resources available, and to help users find resources that may be of interest to them, many companies have developed search systems that identify resources in response to a query. For textual searches, search queries usually are terms and phrases. For image searches, such as search of still images and videos, the search queries can be images, or terms and phrases, or a combination of images, terms and phrases. A search system ranks the resources in response to the query and provides search results that link to the identified resources. The search results are typically ordered for viewing according to the rank.
[0003] When searching images, a search system may use a trained model function to identify images that are similar to a search query image. A variety of model functions can be used. Many of these trained models are optimized to identify images that belong to a same category.
SUMMARY
[0004] This specification describes technologies relating to image processing, and in particular training an image embedding function to distinguish differences and identify similarities between images that belong to a same category.
[0005] In general, one innovative aspect of the subject matter described in this specification can be embodied in methods that include the actions of iteratively training an image embedding function on image triplets, the embedding function comprising a set of parameter weights that operate on an input image to produce as output a representation of features of the image, each iteration of the training comprising: selecting image
triplets, each image triplet being a combination of a first image, a second image and a third image, wherein a first pairwise relevance score that measures a similarity of the first image to the second image is greater than a second pairwise relevance score that measures the similarity of the first image to the third image; for each image triplet: providing each of the first, second and third images as input to the image embedding function, generating, by the image embedding function, a first representation of the features of the first image, a second representation of the features of the second image, and a third representation of the features of the third image, determining, based on the first representation of features and the second representation of features, a first similarity measure that measures a similarity of the first image to the second image, determining, based on the first representation of features and the third representation of features, a second similarity measure that measures a similarity of the first image to the third image, determining, based on the first and second similarity measures, a performance measure of the image embedding function for the image triplet; adjusting the parameter weights of the image embedding function based on the performance measures for the image triplets; and performing another iteration of the training until a cessation event occurs.
[0006] Other embodiments of this aspect include corresponding systems, apparatus, and computer programs, configured to perform the actions of the methods, encoded on computer storage devices.
[0007] Particular embodiments of the subject matter described in this specification can be implemented so as to realize one or more of the following advantages and features. The systems and methods described below learn fine-grained image similarity to distinguish the differences between images belonging to the same category. The resulting image embedding function can incorporate both semantic and visual similarity features. To do so, a learned image embedding function considers both within-class images and between-class images. Within-class images are images that belong to the same class, and between-class images are images that belong to different classes. The system implements a sampling method and a training data generation method to generate a robust set of image triplets that include both within-class and between-class image sets. The multi- scale network structure can capture effectively the global visual appearance and image category information.
[0008] The incorporation of the semantic information is useful for distinguishing images from different classes, and the incorporation of visual information is useful for distinguishing
images from the same class. The triplet sampling method makes it possible to provide large amounts of training data to learn the image embedding function.
[0009] The details of one or more embodiments of the subject matter described in this specification are set forth in the accompanying drawings and the description below. Other features, aspects, and advantages of the subject matter will become apparent from the description, the drawings, and the claims.
BRIEF DESCRIPTION OF THE DRAWINGS
[0010] Fig. 1 is block diagram of a network architecture for learning an image embedding function based on image triplet training data.
[0011] Fig. 2 is a table of image triplets.
[0012] Fig. 3 is a flow diagram of an example process for learning the image embedding function based on image triplet training data.
[0013] Fig. 4 is a block diagram of a network structure for learning the image embedding function.
[0014] Fig. 5 is a flow diagram of an example process for generating image triplet training data.
[0015] Fig. 6 is a flow diagram of an example process for generating collections of images for multiple classes.
[0016] Like reference numbers and designations in the various drawings indicate like elements.
DETAILED DESCRIPTION
Overview
[0017] Fig. 1 is block diagram of a system 100 for learning an image embedding function f(.) based on image triplet training data. The system 100 can be implemented in a data processing apparatus system of one or more networked computers.
[0018] The system 100 iteratively trains the image embedding function on image triplets selected from training images 102. The image embedding function is based on a set of parameter weights fFthat operate on an input image to produce as output a
representation of features of the image. Data defining the image embedding function is stored in model data 104.
[0019] Each image triplet is a combination of a first image 1 12, a second image 114 and a third image 116. The first image may be considered a "query" image Q, the second image may be considered a "positive" image P, while the third image may be considered a "negative" image N. Fig. 2 is a table 200 of image triplets, with rows 210 that correspond to the query image, positive image, and negative image. Each column 220 corresponds to an image triplet T such that
[0021] As will be described below, the system 100 uses the triplets to train an image embedding function that can, once trained, distinguish fine-grained image similarity of images within a same class.
Learning The Image Embedding Function
[0022] Operation of the system 100 is described with reference to Fig. 3, which is a flow diagram of an example process 300 for learning the image embedding function based on image triplet training data. The process 300 can be implemented in a data processing apparatus system of one or more networked computers.
[0023] The process 300 is described in the context of a particular image embedding function that can determine a similarity of two images based on a distance metric.
Furthermore, one example implementation of the image embedding function f(.) maps an image into a point in Euclidean space. However, other image embedding functions that generate other representations of images based on the image features and classification can also be used. Accordingly, any appropriate tunable function that can be iteratively trained by the process 300 can be used, and thus the image embedding function need not be the particular example function described below.
[0024] To begin an iteration the process 300 selects image triplets (302). For example, the triplet selection layer 1 10 selects the image triplets. The image triplets that are selected include the first, second and third images as described above. A first pairwise relevance score measures a similarity of the first image to the second image, and a second pairwise relevance score measures the similarity of the first image to the third
image. The images in the triplet are selected such that the first image is more similar to the second image than it is to the third image. The relevance score may be expressed as n,j = r(p pj), where both pi and pj belong to the same class.
[0025] Generation of image triplets is described with reference to Fig. 5 below.
[0026] For each triplet, the process 300 provides each of the first, second and third image as input to the image embedding function (304). For example, as shown in Fig. 1, the triplet selection layer 110 provides the first image 112, the second image 114 and the third image 116 to the image embedding function f(.) to generate instances f(.) 122, f(.) l2A and f(.) \26. Each instance uses the same embedding function f(.) but receives only one of the images in the image triplet as input.
[0027] For each triplet, the process 300 generates, by the image embedding function, representations of the visual features of each of the images (306). For example, as shown in Fig. 1, the representations f(Q), f(P), and f(N) are generated. In some implementations, the embedding function generates a mapping of the image in Euclidean space as an output representation of features. However, other functions generating other representations can be used.
[0028] For each triplet, the process 300 determines a first similarity measure that measures a similarity of the first image to the second image (308), and a second similarity measure that measures a similarity of the first image to the third image (310). For example, the ranking layer 130 determines, based on the first representation of features f(Q) and the second representation of features f(P), a first similarity measure that measures a similarity of the first image to the second image. Likewise, the ranking layer 130 determines, based on the first representation of features f(Q) and the third representation of features f(N), a second similarity measure that measures a similarity of the first image to the third image.
[0029] In the case of the embedding function that maps an image into Euclidean space, the ranking layer 130 may determine the Euclidean distance as the similarity measure, e.g.,
D(f{ P) (Q} } ~ if I F) -
[0030] Thus, the smaller the distance D, the more fine-grained similarity there is between the images P and Q (or P and N). Conversely, the larger the distance D, the less fine-grained similarity there is between the images P and Q (or P and N).
[0031] Again, other similarity measures can be used, such as different distance type, or a similarity measurement that is not distance based. The similarity measurement used may depend on the representation that the image embedding function f(.) generates.
[0032] For each triplet, the process 300 determines a performance measure of the image embedding function for the image triplet based on the first and second similarity measures (312). For example, the ranking layer 130 may determine a performance measure of the image embedding function for the image triplet based on the first
Euclidean distance and the second Euclidean distance. When this type of image embedding function is used, the system 100 attempts to learn an image embedding function f(.) that assigns a smaller distance to more similar image pairs, which can be expressed as:
[0033] Where (pi ρι+, pi) are the respective first, second and third images of a triplet. Accordingly, the performance of the image embedding function f(.) is proportional to the fraction of triplet orderings that agrees with the ranking of the model based on the performance measure.
[0034] The performance measure of the triplet may, in some implementations, involve determining a hinge loss based on a difference of the first Euclidean distance and the second Euclidean distance, e.g., m^{C ? t- Οί/ί , /iff )) - £>(/( {»· ' ))}
[0035] The variable g is a gap parameter that regularizes the gap between the distance of two image pairs (pi pi+) and (pi pi). The hinge loss is a convex approximation to the 0-1 ranking error loss, which measures the image function's violation of the ranking order specified in the triplet. Other types of performance measures, depending on the output of the image embedding function f(.), can also be used.
[0036] The process 300 adjusts the parameter weights of the image embedding function based on the performance measures for the image triplets (314). For example, an
objective function of erformance can be computed according to:
»; , ) , p- ' such th t ip, : -p'*' ) > ip -. p~ }
[0037] The parameter λ is a regularization parameter that controls the margin of the learned function to improve its generalization. W are the parameters of the embedding function f(.). The constraint above can be converted to an unconstrained optimization by replacing ζ; = l(pi, pi+, pf).
[0038] The process 300 determines if a cessation event has occurred (316). A cessation event is an event that causes the training process to stop performing further training iterations. For example, a maximum number of training iterations being reached may be a cessation event, or satisfaction of the objective performance function described above may be a cessation event.
Example Network Architecture
[0039] In some implementations, the system of Fig. 1 can be used to train a neural network structure to learn the image embedding function f(.). The neural network computes the embedding of an image pi: f(pi) ERd, where d is the dimension of feature embedding.
[0040] As described above, the ranking layer 130 evaluates the embedding function's violation of the ranking order. In the case of a neural network being used to generate the embedding function, the ranking layer 130 back-propagates the gradients to lower layers of the network so that the lower layers can adjust their parameters to minimize the ranking loss.
[0041] Fig. 4 is a block diagram of a network structure 400 for learning the image embedding function. The network structure implements different levels of invariance at different scales. For example, the convolution neural network 410 may be of the ConvNet architecture that is trained to classify images into different classes, as described in the paper Imagenet Classification With Deep Convolutional Neural Networks, A. Krizhevsky, I. Sutskever, and G. Hinton, NIPS, pages 1 106-11 14 (2012). The convolution neural network 410 implements multiple convolutional layers that encode strong invariance and captures the image semantics. In particular, the convolution neural
network 410 contains multiple stacked convolutional layers, max-pooling layers, local normalization layers and fully-connected layers.
[0042] In addition to the convolution neural network 410, one or more additional convolutional neural networks are also used. As shown in Fig. 4, each additional network has fewer convolution layers than the convolutional neural network 410. For example, the additional convolutional neural networks each respectively employ one convolutional layer 422 and 432.
[0043] With respect to Fig. 4, the convolutional layers 422 and 432 are implemented in two low-resolution paths that extract low resolution visual features. The numbers shown on the top of each flow arrow describe the size of the output image or feature. The numbers shown on the top of an entity box describe the size of the kernels for the corresponding layer. The numbers shown in Fig. 4 are examples only, and may vary based on the size of the original image to be processed before down sampling, and also may vary based on the kernel size. The pathways that include the two convolutional layers 422 and 432 have less invariance than the convolutional network 410 and capture the visual appearance of an image.
[0044] In the particular example of Fig. 4, the first convolutional neural network 410 has a first quantity of convolutional layers, e.g., 8, and is trained to classify images into different classes. The convolutional neural network 410 may, in some implementations, be pre-trained prior to the training of the image embedding function f(.). For example, the convolutional neural network 410 may be pre-trained on a dataset that is selected for the convolutional neural network 410 to learn image semantic information. The
convolutional neural network 410 is configured to receive as input an image 402 at a first resolution, e.g., 256 x 256. Other resolutions can also be used.
[0045] Each second convolution neural network 422 and 432 constitutes a path having a second quantity of convolutional layers, e.g., one layer, and is trained to extract low-resolution features at respective second resolutions that are less than the first resolution. For example, subsamplers 420 and 430 down sample the image 402 at 4: 1 and 8: 1, respectively, and provide the down sampled images to the convolutional layers 422 and 432.
[0046] Each convolutional layer 422 and 432 receives the down sampled image as input, convolves it with a set of k learnable kernels, and puts through the activation
function to generate k feature maps. In some implementations, the convolutional layers 422 and 432 can each be implemented as a set of local feature detectors.
[0047] The max pooling layers 424 and 434 perform max pooling over a local neighborhood around a pixel. The max pooling involves selecting a maximum of a block that is pooled. The max pooling layers 424 and 434 makes the feature maps robust to small translations.
[0048] The normalization layers 412 and 440 normalize the outputs of the
convolutional neural networks to a normalized scale so that they may be combined in a combiner 442. In some implementations, the normalization layers 412 and 440 normalize the feature maps around a local neighborhood to have unit norm and zero mean. This leads to feature maps that are robust to the differences in illumination and contrast. In some implementations, the combiner 442 implements linear embedding to combine the normalized outputs.
Triplet Generation
[0049] To avoid overfitting of the function f(.), it is desirable to utilize a large variety of training triplets. However, the number of possible triplets increases cubically with the number of images available in a training set. It is thus computationally prohibitive to use all possible triplets for large data sets. For example, for a training dataset of 12 million images, the number of all possible triplets in the dataset is approximately (1.2* 107)3 = 1.728x l021.
[0050] Thus, a proper subset of all possible triplets is selected for training. However, when choosing the images in a triplet, the selection process of the images should have tendency to choose a triplet such that the first image is likely more similar to the second image than it is to the third image, where the relevance score is expressed as nj = r(pi, pj). Thus, instead uniform sampling images for the triplets, the images are selected according to likelihoods that are based on pairwise relevance scores and pairwise relevance totals of the images. As will be described below, the pairwise relevance total for each image is generated from the pairwise relevance scores for the image relative to each other image in a set. This process is described with reference to Fig. 5, which is a flow diagram of an example process 500 for generating image triplet training data. The process 500 can be implemented in a data processing apparatus system of one or more networked computers.
[0051] The process 500 accesses images collected into respective classes (502). With respect to any particular class, e.g., a category or some other collection construct, a pair of within-class images are a pair of images that belong to the particular class, and a pair of between-class images are an image pair in which one image belongs to the particular class and the other image belongs to another class. The images collected into the classes can be provided to the system 100, or, in an alternate implementation, can be generated as described in the next section.
[0052] The following steps 504 - 510 are done for each class, however, in the description that follows, the processing and generation of image triplets for only one class is described.
[0053] The process 500 determines, for a class, pairwise relevance totals of images belonging to the class (504). For example, for a set of images P that belong to a class c, the pairwise relevance scores nj = r(p pj) can be determined. Let the total relevance score, which is the pairwise relevance total, for the ith image be:
[0054] The pairwise relevance total of an image pi reflects how relevant the image is in terms of its relevance to the other images in the same category.
[0055] The process 500 selects an image in the class of images as a first image in the image triplet according to a likelihood that is proportional to its pairwise relevance total (506). In particular, to generate a triplet, the system 100 first samples a first image, or query image, pi from P according to its pairwise relevance total n. The likelihood of an image being chosen as a query image is thus proportional to its total relevance score.
[0056] The process 500 selects another image in the class of images as a second image in the image triplet according to a likelihood based on a selection threshold and a pairwise relevance score that measures a similarity of the first image to the second image (508). The images that are selected for the second image, also known as the positive image, are selected from the same category from which the first image was selected. Because it is desirable to have a relatively high relevance measure for the first and second image of a triplet when compared to a relevance measure of the first and third image of the triplet, the system 100 should be biased to samples the second images pi+ from images
with high relevance scores m+. Thus, the system determines a likelihood of choosing a given image as the second ima e pi+ according to the following probability:
[0057] The value TP is a threshold parameter for a minimum likelihood, and Zi is a normalization constant that is equal to∑ί+ Ρ(ρι+ ) for all the pt+ in the same category as the first image pu
[0058] In some implementations, the third image, also known as a negative image, may be selected from either an in-class image or from an out-of-class image. The choice between selecting an in-class image or an out-of-class image may be made randomly, or may be made according to an in-class/out-of-class target ratio.
[0059] For an in-class selection, the process 500 selects another image in the class of images as a third image in the image triplet according to a likelihood based on the section threshold and the pairwise relevance score that measures a similarity of the first image to the third image (510A). Because it is desirable to have a relatively low relevance measure for the first and third image of a triplet when compared to a relevance measure of the first and second image of a triplet, the system 100 should be biased to samples of the second images pi from image with low relevance scores n,u. In some implementations, in-class images are drawn for the third image with the same distribution described above with reference to the second image of the triplet.
[0060] For out-of-class selections, the process 500 selects another image in another class as a third image in the image triplet (510B). In some implementations, the out-of- class images are drawing uniformly from all the images that belong to a different class from the first image pu
[0061] In some implementations, the system 100 can require that for each image triplet, the first, second and third images are selected such that the difference resulting from subtracting the second pairwise relevance score from the first pairwise relevance score meets or exceeds a threshold difference TV, e.g.,
[0062] Triplets that do not meet this criterion are rejected.
[0063] A variety of pairwise relevance functions r(.) can be used to realize the pairwise relevance scores. In some implementations, the function r(.) is constrained to be 0 for between-class image pairs. For in-class pairs, the function r(.), in some
implementations, may include a weighted linear combination of multiple features, such as histogram object gradients (HOG) features, scale invariant feature transforms (SIFT), Laplacian of Gaussian (LoG) blob detection, and the like. Furthermore, if image annotation data are available, the function r(.) may also use features derived from the image annotations. The linear weights may be learned through max-margin linear weight learning using human rated data. Thus, in some implementations, the function r(.) accounts for both visual appearance information and semantic information. However, the function r(.) may be expensive to compute, and thus modeling the image embedding function f(.), which is less expensive to compute, results in resource savings.
[0064] Other pairwise relevance functions can also be used, and the pairwise relevance function need not be constrained to be 0 for between-class image pairs.
Selection of Training Images
[0065] In implementations that utilize the network structure 400 of Fig. 4, the system 100 uses two collections of training data to train the image embedding function f(.). The first, as described above, is a dataset that is selected for the convolutional neural network 410 to learn image semantic information. For example, the data set may contain N images in M categories, where N and M are on the order of 1 ,000. On example training set is the ImageNet ILSVRC-2012 dataset. Other training sets can also be used.
[0066] The second training data set is relevance training data, which is used for learning fine-grained visual similarity. In some implementations, the images are collected in a bootstrapping fashion, as described with reference to Fig. 6, which is a flow diagram of an example process 600 for generating collections of images for multiple classes. The process 600 can be implemented in a data processing apparatus system of one or more networked computers.
[0067] The process 600 selects a set of image search queries (602). For example, the triplet selection layer 110 may communicate with a search system 108 and select a set of popular queries. The popular quires may be filtered to ensure class diversity. For example, queries such as "Lions" and "Lion images" may be collapsed into the canonical query "Lions." The filtering can be implemented using appropriate processes that
measure query similarity and query equivalence. Alternatively, the triplet selection layer 1 10 may have been provided a set of queries from an administrator that specified the set of queries.
[0068] The process 600 submits each image search query to an image search engine and receives in response to the image search query data identifying images responsive to the query (604). For example, the triplet selection layer 1 10 provides each query to the search system 108 and receives from the search system image search results for each query. The search results are ranked according to an order that is indicative of the relevance of the corresponding image to the query.
[0069] The process 600, for each image search query, selects a proper subset of the top N ranked images identified as being responsive to the image search query (606). For example, for each query, the top N images in the rank order are selected. The value of N is selected to ensure that there may be a diverse set of triplets selected. For example, N may be in the range of 100 to 200.
[0070] The process 600 associates each proper subset of top N ranked images as images collected into a respective class of images, where the respective class is different for each proper subset (608). Each class may correspond to the query for which the images were identified.
[0071] The images and their associations with classes are then stored as the training images 102. The system 100 may then utilize the process 500 of Fig. 5 to generate the training triplets.
[0072] Additional Implementation Details
[0073] Embodiments of the subject matter and the operations described in this specification can be implemented in digital electronic circuitry, or in computer software, firmware, or hardware, including the structures disclosed in this specification and their structural equivalents, or in combinations of one or more of them. Embodiments of the subject matter described in this specification can be implemented as one or more computer programs, i.e., one or more modules of computer program instructions, encoded on computer storage medium for execution by, or to control the operation of, data processing apparatus.
[0074] A computer storage medium can be, or be included in, a computer-readable storage device, a computer-readable storage substrate, a random or serial access memory
array or device, or a combination of one or more of them. Moreover, while a computer storage medium is not a propagated signal, a computer storage medium can be a source or destination of computer program instructions encoded in an artificially-generated propagated signal.
[0075] The operations described in this specification can be implemented as operations performed by a data processing apparatus on data stored on one or more computer-readable storage devices or received from other sources.
[0076] The term "data processing apparatus" encompasses all kinds of apparatus, devices, and machines for processing data, including by way of example a programmable processor, a computer, a system on a chip, or multiple ones, or combinations, of the foregoing. The apparatus can include special purpose logic circuitry, e.g., an FPGA (field programmable gate array) or an ASIC (application-specific integrated circuit). The apparatus can also include, in addition to hardware, code that creates an execution environment for the computer program in question, e.g., code that constitutes processor firmware, a protocol stack, a database management system, an operating system, a cross- platform runtime environment, a virtual machine, or a combination of one or more of them. The apparatus and execution environment can realize various different computing model infrastructures, such as web services, distributed computing and grid computing infrastructures.
[0077] A computer program (also known as a program, software, software application, script, or code) can be written in any form of programming language, including compiled or interpreted languages, declarative or procedural languages, and it can be deployed in any form, including as a stand-alone program or as a module, component, subroutine, object, or other unit suitable for use in a computing environment. A computer program may, but need not, correspond to a file in a file system. A program can be stored in a portion of a file that holds other programs or data (e.g., one or more scripts stored in a markup language document), in a single file dedicated to the program in question, or in multiple coordinated files (e.g., files that store one or more modules, sub-programs, or portions of code). A computer program can be deployed to be executed on one computer or on multiple computers that are located at one site or distributed across multiple sites and interconnected by a communication network.
[0078] The processes and logic flows described in this specification can be performed by one or more programmable processors executing one or more computer programs to
perform actions by operating on input data and generating output. Processors suitable for the execution of a computer program include, by way of example, both general and special purpose microprocessors, and any one or more processors of any kind of digital computer. Generally, a processor will receive instructions and data from a read-only memory or a random access memory or both. The essential elements of a computer are a processor for performing actions in accordance with instructions and one or more memory devices for storing instructions and data. Generally, a computer will also include, or be operatively coupled to receive data from or transfer data to, or both, one or more mass storage devices for storing data, e.g., magnetic, magneto-optical disks, or optical disks. However, a computer need not have such devices.
[0079] Embodiments of the subject matter described in this specification can be implemented in a computing system that includes a back-end component, e.g., as a data server, or that includes a middleware component, e.g., an application server, or that includes a front-end component, e.g., a user computer having a graphical user interface or a Web browser through which a user can interact with an implementation of the subject matter described in this specification, or any combination of one or more such back-end, middleware, or front-end components. The components of the system can be interconnected by any form or medium of digital data communication, e.g., a
communication network.
[0080] The computing system can include users and servers. A user and server are generally remote from each other and typically interact through a communication network. The relationship of user and server arises by virtue of computer programs running on the respective computers and having a user-server relationship to each other.
[0081] While this specification contains many specific implementation details, these should not be construed as limitations on the scope of what may be claimed. Certain features that are described in this specification in the context of separate embodiments can also be implemented in combination in a single embodiment. Conversely, various features that are described in the context of a single embodiment can also be implemented in multiple embodiments separately or in any suitable subcombination. Moreover, although features may be described above as acting in certain combinations and even initially claimed as such, one or more features from a claimed combination can in some cases be excised from the combination, and the claimed combination may be directed to a subcombination or variation of a subcombination.
[0082] Similarly, while operations are depicted in the drawings in a particular order, this should not be understood as requiring that such operations be performed in the particular order shown or in sequential order, or that all illustrated operations be performed, to achieve desirable results. In certain circumstances, multitasking and parallel processing may be advantageous. Moreover, the separation of various system components in the embodiments described above should not be understood as requiring such separation in all embodiments, and it should be understood that the described program components and systems can generally be integrated together in a single software product or packaged into multiple software products.
[0083] Thus, particular embodiments of the subject matter have been described. Other embodiments are within the scope of the following claims. In some cases, the actions recited in the claims can be performed in a different order and still achieve desirable results. In addition, the processes depicted in the accompanying figures do not necessarily require the particular order shown, or sequential order, to achieve desirable results. In certain implementations, multitasking and parallel processing may be advantageous.
What is claimed is:
Claims
1. A computer-implemented method performed by data processing apparatus, the method comprising:
iteratively training an image embedding function on image triplets, the embedding function comprising a set of parameter weights that operate on an input image to produce as output a representation of features of the image, each iteration of the training comprising:
selecting image triplets, each image triplet being a combination of a first image, a second image and a third image, wherein a first pairwise relevance score that measures a similarity of the first image to the second image is greater than a second pairwise relevance score that measures the similarity of the first image to the third image;
for each image triplet:
providing each of the first, second and third images as input to the image embedding function;
generating, by the image embedding function, a first representation of the features of the first image, a second representation of the features of the second image, and a third representation of the features of the third image;
determining, based on the first representation of features and the second representation of features, a first similarity measure that measures a similarity of the first image to the second image;
determining, based on the first representation of features and the third representation of features, a second similarity measure that measures a similarity of the first image to the third image;
determining, based on the first and second similarity measures, a performance measure of the image embedding function for the image triplet;
adjusting the parameter weights of the image embedding function based on the performance measures for the image triplets; and
performing another iteration of the training until a cessation event occurs.
2. The method of claim I, wherein:
determining the first similarity measure that measures the similarity of the first image to the second image comprises determining a first distance measure from the first representation of the features of the first image and the second representation of features of the second image; and
determining the second similarity measure that measures the similarity of the first image to the third image comprises determining a second distance measure from the first representation of the features of the first image and the second representation of features of the second image.
3. The computer- implemented method of claim I, wherein:
the image embedding function generates a mapping of the image in Euclidean space as the output representation of features;
determining the first similarity measure that measures the similarity of the first image to the second image comprises determining a first Euclidean distance between the first representation of the features of the first image and the second representation of features of the second image; and
determining the second similarity measure that measures the similarity of the first image to the third image comprises determining a second Euclidean distance between the first representation of the features of the first image and the third representation of features of the third image.
4. The computer implemented method of claim 3, wherein determining a performance measure of the image embedding function for the image triplet comprises determining the performance measure based on the first Euclidean distance and the second Euclidean distance.
5. The computer-implemented method of claim 4, wherein determining the performance measure based on the first Euclidean distance and the second Euclidean distance comprises determining a hinge loss based on a difference of the first Euclidean distance and the second Euclidean distance.
6. The computer-implemented method of claim 5, further comprising:
summing the hinge losses for the image triplets;
determining whether the summation of the hinge losses meets a minimization criterion; and
determining the cessation event occurs when the summation of the hinge losses meets the minimization criterion.
7. The computer- implemented method of claim 1, wherein the image embedding function comprises:
a first convolutional neural network having a first quantity of convolutional layers and trained to classify a plurality of images into a plurality of different classes, and configured to receive as input an image at a first resolution;
a second convolution neural network having a second quantity of convolutional layers and trained to extract low-resolution features of a second resolution that is less than the first resolution, and configured to receive as input an image at the second resolution, wherein the second quantity of convolutional layers is less than the first quantity of convolutional layers; and
wherein generating by the image embedding function a representation of the features of the image comprises:
providing the image to the first convolution neural network at the first resolution;
down sampling the image to the second resolution to generate a down sampled image; and
providing the down sampled image to the second convolutional neural network.
8. The computer- implemented method of claim 7, wherein the image embedding function further comprises:
a first normalization layer that normalizes the output of the first convolutional neural network;
a second normalization layer that normalizes the output of the second convolutional neural network; and
a linear embedding layer that combines the normalized outputs of the first convolutional neural network and the second convolutional neural network.
9. The computer-implemented method of claim 1, further comprising:
accessing a plurality of images, the images collected into respective classes of images;
for at least one class of images:
determining, for each image, a pairwise relevance total that is based on pairwise relevance scores that respectively measure the similarity of the image to a respective other image in the class of images;
selecting an image in the class of images as a first image in the image triplet according to a likelihood that is proportional to its pairwise relevance total;
selecting another image in the class of images as a second image in the image triplet according to a likelihood based on a selection threshold and a pairwise relevance score that measures a similarity of the first image to the second image; and selecting another image in the class of images as a third image in the image triplet according to a likelihood based on the section threshold and the pairwise relevance score that measures a similarity of the first image to the third image.
10. The computer-implemented method of claim 9, wherein:
selecting another image in the class of images as the second image in the image triplet comprises selecting another image in the class of images based on a minimum of the selection threshold and the pairwise relevance score; and
selecting another image in the class of images as the third image in the image triplet comprises selecting another image in the class of images based on a minimum of the selection threshold and the pairwise relevance score.
1 1. The computer-implemented method of claim 9, further comprising, for at least one image triplet, selecting an image in another class of images as a third image in the image triplet.
12. The computer-implemented method of claim 9, wherein, for each image triplet, the first, second and third images are selected such that the difference resulting from subtracting the second pairwise relevance score from the first pairwise relevance score meets or exceeds a threshold difference.
13. The computer- implemented method of claim 9, wherein:
accessing a plurality of images, the images collected into respective classes of images comprises:
selecting a set of image search queries;
submitting each image search query to an image search engine and receiving in response to the image search query data identifying images responsive to the query, the images ranked according to an order;
for each image search query, selecting a proper subset of the top N ranked images identified as being responsive to the image search query; and
associating each proper subset of top N ranked images as images collected into a respective class of images, where the respective class is different for each proper subset.
14. The computer-implemented method of claim 9, wherein determining a pairwise relevance total comprises determining a pairwise relevance score based on a comparison of histogram object gradients (HOG) features and scale invariant feature transforms (SIFT).
15. A computer storage medium encoded with a computer program, the program comprising instructions that when executed by data processing apparatus cause the data processing apparatus to perform operations comprising:
iteratively training an image embedding function on image triplets, the embedding function comprising a set of parameter weights that operate on an input image to produce as output a representation of features of the image, each iteration of the training comprising:
selecting image triplets, each image triplet being a combination of a first image, a second image and a third image, wherein a first pairwise relevance score that measures a similarity of the first image to the second image is greater than a second pairwise relevance score that measures the similarity of the first image to the third image;
for each image triplet:
providing each of the first, second and third images as input to the image embedding function;
generating, by the image embedding function, a first representation of the features of the first image, a second representation of the features of the second image, and a third representation of the features of the third image;
determining, based on the first representation of features and the second representation of features, a first similarity measure that measures a similarity of the first image to the second image;
determining, based on the first representation of features and the third representation of features, a second similarity measure that measures a similarity of the first image to the third image;
determining, based on the first and second similarity measures, a performance measure of the image embedding function for the image triplet;
adjusting the parameter weights of the image embedding function based on the performance measures for the image triplets; and
performing another iteration of the training until a cessation event occurs.
16. A system, comprising:
a data processing apparatus; and
a computer storage medium encoded with a computer program, the program comprising instructions that when executed by the data processing apparatus cause the data processing apparatus to perform operations comprising:
iteratively training an image embedding function on image triplets, the embedding function comprising a set of parameter weights that operate on an input image to produce as output a representation of features of the image, each iteration of the training comprising:
selecting image triplets, each image triplet being a combination of a first image, a second image and a third image, wherein a first pairwise relevance score that measures a similarity of the first image to the second image is greater than a second pairwise relevance score that measures the similarity of the first image to the third image;
for each image triplet:
providing each of the first, second and third images as input to the image embedding function;
generating, by the image embedding function, a first representation of the features of the first image, a second representation of the features of the second image, and a third representation of the features of the third image;
determining, based on the first representation of features and the second representation of features, a first similarity measure that measures a similarity of the first image to the second image;
determining, based on the first representation of features and the third representation of features, a second similarity measure that measures a similarity of the first image to the third image;
determining, based on the first and second similarity measures, a performance measure of the image embedding function for the image triplet;
adjusting the parameter weights of the image embedding function based on the performance measures for the image triplets; and
performing another iteration of the training until a cessation event occurs.
17. The system of claim 16, wherein:
the image embedding function generates a mapping of the image in Euclidean space as the output representation of features;
determining the first similarity measure that measures the similarity of the first image to the second image comprises determining a first Euclidean distance between the first representation of the features of the first image and the second representation of features of the second image; and
determining the second similarity measure that measures the similarity of the first image to the third image comprises determining a second Euclidean distance between the first representation of the features of the first image and the third representation of features of the third image.
18. The system of claim 17, wherein determining a performance measure of the image embedding function for the image triplet comprises determining the performance measure based on the first Euclidean distance and the second Euclidean distance.
19. The system of claim 16, wherein the image embedding function comprises:
a first convolutional neural network having a first quantity of convolutional layers and trained to classify a plurality of images into a plurality of different classes, and configured to receive as input an image at a first resolution;
a second convolution neural network having a second quantity of convolutional layers and trained to extract low-resolution features of a second resolution that is less than the first resolution, and configured to receive as input an image at the second resolution, wherein the second quantity of convolutional layers is less than the first quantity of convolutional layers; and
wherein generating by the image embedding function a representation of the features of the image comprises:
providing the image to the first convolution neural network at the first resolution;
down sampling the image to the second resolution to generate a down sampled image; and
providing the down sampled image to the second convolutional neural network.
20. The system of claim 16, the operations further comprising:
accessing a plurality of images, the images collected into respective classes of images;
for at least one class of images:
determining, for each image, a pairwise relevance total that is based on pairwise relevance scores that respectively measure the similarity of the image to a respective other image in the class of images;
selecting an image in the class of images as a first image in the image triplet according to a likelihood that is proportional to its pairwise relevance total;
selecting another image in the class of images as a second image in the image triplet according to a likelihood based on a selection threshold and a pairwise relevance score that measures a similarity of the first image to the second image; and selecting another image in the class of images as a third image in the image triplet according to a likelihood based on the section threshold and the pairwise relevance score that measures a similarity of the first image to the third image.
Applications Claiming Priority (2)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US201462015107P | 2014-06-20 | 2014-06-20 | |
PCT/US2015/036740 WO2015196102A1 (en) | 2014-06-20 | 2015-06-19 | Fine-grained image similarity |
Publications (1)
Publication Number | Publication Date |
---|---|
EP3158508A1 true EP3158508A1 (en) | 2017-04-26 |
Family
ID=53510996
Family Applications (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
EP15733979.7A Withdrawn EP3158508A1 (en) | 2014-06-20 | 2015-06-19 | Fine-grained image similarity |
Country Status (4)
Country | Link |
---|---|
US (3) | US10181091B2 (en) |
EP (1) | EP3158508A1 (en) |
CN (1) | CN106537379A (en) |
WO (1) | WO2015196102A1 (en) |
Families Citing this family (26)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US10181091B2 (en) * | 2014-06-20 | 2019-01-15 | Google Llc | Fine-grained image similarity |
WO2017004803A1 (en) * | 2015-07-08 | 2017-01-12 | Xiaoou Tang | An apparatus and a method for semantic image labeling |
US9971940B1 (en) * | 2015-08-10 | 2018-05-15 | Google Llc | Automatic learning of a video matching system |
US9836669B2 (en) | 2016-02-22 | 2017-12-05 | International Business Machines Corporation | Generating a reference digital image based on an indicated time frame and searching for other images using the reference digital image |
ES2909047T3 (en) * | 2016-03-14 | 2022-05-05 | Siemens Mobility GmbH | Method and system to efficiently mine essential elements of a dataset with a resampling strategy with repositioning in pose estimation with 6DOF of 3D objects |
US11144785B2 (en) * | 2016-03-17 | 2021-10-12 | Imagia Cybernetics Inc. | Method and system for processing a task with robustness to missing input information |
US10482091B2 (en) * | 2016-03-18 | 2019-11-19 | Oath Inc. | Computerized system and method for high-quality and high-ranking digital content discovery |
US11461919B2 (en) * | 2016-04-21 | 2022-10-04 | Ramot At Tel Aviv University Ltd. | Cascaded neural network |
GB2549554A (en) * | 2016-04-21 | 2017-10-25 | Ramot At Tel-Aviv Univ Ltd | Method and system for detecting an object in an image |
CN106709532B (en) * | 2017-01-25 | 2020-03-10 | 京东方科技集团股份有限公司 | Image processing method and device |
JP6932987B2 (en) * | 2017-05-11 | 2021-09-08 | オムロン株式会社 | Image processing device, image processing program, image processing system |
KR102481885B1 (en) * | 2017-09-08 | 2022-12-28 | 삼성전자주식회사 | Method and device for learning neural network for recognizing class |
US10452954B2 (en) * | 2017-09-14 | 2019-10-22 | Google Llc | Object detection and representation in images |
US20190108400A1 (en) * | 2017-10-05 | 2019-04-11 | Qualcomm Incorporated | Actor-deformation-invariant action proposals |
CN108665441B (en) * | 2018-03-30 | 2019-09-17 | 北京三快在线科技有限公司 | A kind of Near-duplicate image detection method and device, electronic equipment |
US10635979B2 (en) * | 2018-07-20 | 2020-04-28 | Google Llc | Category learning neural networks |
JP6914233B2 (en) * | 2018-08-31 | 2021-08-04 | 富士フイルム株式会社 | Similarity determination device, method and program |
CN109919320B (en) * | 2019-01-23 | 2022-04-01 | 西北工业大学 | Triplet network learning method based on semantic hierarchy |
US20200250538A1 (en) * | 2019-02-01 | 2020-08-06 | Google Llc | Training image and text embedding models |
US11586927B2 (en) * | 2019-02-01 | 2023-02-21 | Google Llc | Training image and text embedding models |
US10885385B2 (en) * | 2019-03-19 | 2021-01-05 | Sap Se | Image search and training system |
US11580392B2 (en) | 2019-05-30 | 2023-02-14 | Samsung Electronics Co., Ltd. | Apparatus for deep representation learning and method thereof |
US11216697B1 (en) * | 2020-03-11 | 2022-01-04 | Amazon Technologies, Inc. | Backward compatible and backfill-free image search system |
US11449717B2 (en) * | 2020-03-12 | 2022-09-20 | Fujifilm Business Innovation Corp. | System and method for identification and localization of images using triplet loss and predicted regions |
CN113642593B (en) | 2020-04-27 | 2024-03-01 | 台达电子工业股份有限公司 | Image processing method and image processing system |
US20220414336A1 (en) * | 2021-06-23 | 2022-12-29 | Microsoft Technology Licensing, Llc | Semantic Difference Characterization for Documents |
Family Cites Families (18)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
JP2007206919A (en) * | 2006-02-01 | 2007-08-16 | Sony Corp | Display control device, method, program and storage medium |
CN101625763B (en) * | 2009-04-17 | 2011-06-29 | 华中科技大学 | Method for measuring similarity of spatial color histogram |
US8429168B1 (en) * | 2009-12-15 | 2013-04-23 | Google Inc. | Learning semantic image similarity |
US8712156B2 (en) * | 2010-01-10 | 2014-04-29 | Bronstein Bronstein Kimmel Technologies Ltd. | Comparison of visual information |
US8620095B2 (en) * | 2011-03-15 | 2013-12-31 | Microsoft Corporation | Performing structure from motion for unordered images of a scene with multiple object instances |
US9082086B2 (en) * | 2011-05-20 | 2015-07-14 | Microsoft Corporation | Adaptively learning a similarity model |
US8831358B1 (en) | 2011-11-21 | 2014-09-09 | Google Inc. | Evaluating image similarity |
US8917910B2 (en) * | 2012-01-16 | 2014-12-23 | Xerox Corporation | Image segmentation based on approximation of segmentation similarity |
US9075824B2 (en) * | 2012-04-27 | 2015-07-07 | Xerox Corporation | Retrieval system and method leveraging category-level labels |
CN103559191B (en) * | 2013-09-10 | 2016-09-14 | 浙江大学 | Based on latent space study and Bidirectional sort study across media sort method |
US9424492B2 (en) * | 2013-12-27 | 2016-08-23 | Xerox Corporation | Weighting scheme for pooling image descriptors |
US20150248398A1 (en) * | 2014-02-28 | 2015-09-03 | Choosito! Inc. | Adaptive reading level assessment for personalized search |
US10181091B2 (en) * | 2014-06-20 | 2019-01-15 | Google Llc | Fine-grained image similarity |
US9659384B2 (en) * | 2014-10-03 | 2017-05-23 | EyeEm Mobile GmbH. | Systems, methods, and computer program products for searching and sorting images by aesthetic quality |
GB2536493B (en) * | 2015-03-20 | 2020-11-18 | Toshiba Europe Ltd | Object pose recognition |
US9600738B2 (en) * | 2015-04-07 | 2017-03-21 | Xerox Corporation | Discriminative embedding of local color names for object retrieval and classification |
US9875429B2 (en) * | 2015-10-06 | 2018-01-23 | Adobe Systems Incorporated | Font attributes for font recognition and similarity |
US20180373955A1 (en) * | 2017-06-27 | 2018-12-27 | Xerox Corporation | Leveraging captions to learn a global visual representation for semantic retrieval |
-
2015
- 2015-06-19 US US15/504,870 patent/US10181091B2/en not_active Expired - Fee Related
- 2015-06-19 EP EP15733979.7A patent/EP3158508A1/en not_active Withdrawn
- 2015-06-19 WO PCT/US2015/036740 patent/WO2015196102A1/en active Application Filing
- 2015-06-19 CN CN201580033330.3A patent/CN106537379A/en active Pending
-
2018
- 2018-12-03 US US16/208,518 patent/US10339419B2/en active Active
-
2019
- 2019-05-22 US US16/420,154 patent/US10949708B2/en active Active
Also Published As
Publication number | Publication date |
---|---|
US20170243082A1 (en) | 2017-08-24 |
US20190279030A1 (en) | 2019-09-12 |
US10181091B2 (en) | 2019-01-15 |
US10339419B2 (en) | 2019-07-02 |
US20190102651A1 (en) | 2019-04-04 |
US10949708B2 (en) | 2021-03-16 |
WO2015196102A1 (en) | 2015-12-23 |
CN106537379A (en) | 2017-03-22 |
Similar Documents
Publication | Publication Date | Title |
---|---|---|
US10949708B2 (en) | Fine-grained image similarity | |
US20220343626A1 (en) | Text Based Image Search | |
Hua et al. | Clickage: Towards bridging semantic and intent gaps via mining click logs of search engines | |
Yang et al. | Ranking with local regression and global alignment for cross media retrieval | |
CA2727023C (en) | Annotating images | |
EP3928220A1 (en) | Encoder using machine-trained term frequency weighting factors that produces a dense embedding vector | |
Tian et al. | Building descriptive and discriminative visual codebook for large-scale image applications | |
Wang et al. | Aspect-ratio-preserving multi-patch image aesthetics score prediction | |
Cui et al. | Semantic annotation in earth observation based on active learning | |
Cao et al. | Learning to match images in large-scale collections | |
Wu | Image retrieval method based on deep learning semantic feature extraction and regularization softmax | |
Mehmood et al. | Effect of complementary visual words versus complementary features on clustering for effective content-based image search | |
Khan et al. | Food items detection and recognition via multiple deep models | |
Jin et al. | Semantic line detection using mirror attention and comparative ranking and matching | |
Mironica et al. | Fisher kernel based relevance feedback for multimodal video retrieval | |
Mei et al. | MSRA atT TRECVID 2008: High-Level Feature Extraction and Automatic Search. | |
Vadicamo et al. | Enhancing Content-Based Image Retrieval Using Aggregation of Binary Features, Deep Learning, and Supermetric Search. | |
Barbu | CONTENT-BASED IMAGE RETRIEVAL FRAMEWORK USING MULTI-SCALE DEEP-LEARNING-BASED FEATURE EXTRACTION AND GRAPH-BASED CLUSTERING | |
Conilione et al. | Automatic localization and annotation of facial features using machine learning techniques | |
Ji et al. | Learning-based local visual representation and indexing | |
Parajuli | Content Based Image Retrieval (CBIR) for Brand Logos | |
Shirahama et al. | Hybrid negative example selection using visual and conceptual features | |
Tang et al. | Multi-instance positive and unlabeled learning with bi-level embedding | |
Machado | Image visual similarity with deep learning: application to a fashion ecommerce company | |
Li et al. | Fast, Memory-Efficient Spectral Clustering with Cosine Similarity |
Legal Events
Date | Code | Title | Description |
---|---|---|---|
PUAI | Public reference made under article 153(3) epc to a published international application that has entered the european phase |
Free format text: ORIGINAL CODE: 0009012 |
|
17P | Request for examination filed |
Effective date: 20161214 |
|
AK | Designated contracting states |
Kind code of ref document: A1Designated state(s): AL AT BE BG CH CY CZ DE DK EE ES FI FR GB GR HR HU IE IS IT LI LT LU LV MC MK MT NL NO PL PT RO RS SE SI SK SM TR |
|
AX | Request for extension of the european patent |
Extension state: BA ME |
|
STAA | Information on the status of an ep patent application or granted ep patent |
Free format text: STATUS: THE APPLICATION HAS BEEN WITHDRAWN |
|
18W | Application withdrawn |
Effective date: 20170421 |
|
P01 | Opt-out of the competence of the unified patent court (upc) registered |
Effective date: 20230522 |