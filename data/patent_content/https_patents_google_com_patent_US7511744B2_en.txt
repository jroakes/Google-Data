US7511744B2 - Portable camera with inbuilt printer device - Google Patents
Portable camera with inbuilt printer device Download PDFInfo
- Publication number
- US7511744B2 US7511744B2 US10/804,057 US80405704A US7511744B2 US 7511744 B2 US7511744 B2 US 7511744B2 US 80405704 A US80405704 A US 80405704A US 7511744 B2 US7511744 B2 US 7511744B2
- Authority
- US
- United States
- Prior art keywords
- data
- image
- artcard
- illustrates
- bit
- Prior art date
- Legal status (The legal status is an assumption and is not a legal conclusion. Google has not performed a legal analysis and makes no representation as to the accuracy of the status listed.)
- Expired - Lifetime, expires
Links
Images
Classifications
-
- G—PHYSICS
- G03—PHOTOGRAPHY; CINEMATOGRAPHY; ANALOGOUS TECHNIQUES USING WAVES OTHER THAN OPTICAL WAVES; ELECTROGRAPHY; HOLOGRAPHY
- G03B—APPARATUS OR ARRANGEMENTS FOR TAKING PHOTOGRAPHS OR FOR PROJECTING OR VIEWING THEM; APPARATUS OR ARRANGEMENTS EMPLOYING ANALOGOUS TECHNIQUES USING WAVES OTHER THAN OPTICAL WAVES; ACCESSORIES THEREFOR
- G03B27/00—Photographic printing apparatus
- G03B27/32—Projection printing apparatus, e.g. enlarger, copying camera
- G03B27/42—Projection printing apparatus, e.g. enlarger, copying camera for automatic sequential copying of the same original
-
- B—PERFORMING OPERATIONS; TRANSPORTING
- B41—PRINTING; LINING MACHINES; TYPEWRITERS; STAMPS
- B41J—TYPEWRITERS; SELECTIVE PRINTING MECHANISMS, i.e. MECHANISMS PRINTING OTHERWISE THAN FROM A FORME; CORRECTION OF TYPOGRAPHICAL ERRORS
- B41J2/00—Typewriters or selective printing mechanisms characterised by the printing or marking process for which they are designed
- B41J2/005—Typewriters or selective printing mechanisms characterised by the printing or marking process for which they are designed characterised by bringing liquid or particles selectively into contact with a printing material
- B41J2/01—Ink jet
- B41J2/135—Nozzles
- B41J2/14—Structure thereof only for on-demand ink jet heads
-
- B—PERFORMING OPERATIONS; TRANSPORTING
- B41—PRINTING; LINING MACHINES; TYPEWRITERS; STAMPS
- B41J—TYPEWRITERS; SELECTIVE PRINTING MECHANISMS, i.e. MECHANISMS PRINTING OTHERWISE THAN FROM A FORME; CORRECTION OF TYPOGRAPHICAL ERRORS
- B41J11/00—Devices or arrangements of selective printing mechanisms, e.g. ink-jet printers or thermal printers, for supporting or handling copy material in sheet or web form
- B41J11/0005—Curl smoothing, i.e. smoothing down corrugated printing material, e.g. by pressing means acting on wrinkled printing material
-
- B—PERFORMING OPERATIONS; TRANSPORTING
- B41—PRINTING; LINING MACHINES; TYPEWRITERS; STAMPS
- B41J—TYPEWRITERS; SELECTIVE PRINTING MECHANISMS, i.e. MECHANISMS PRINTING OTHERWISE THAN FROM A FORME; CORRECTION OF TYPOGRAPHICAL ERRORS
- B41J2/00—Typewriters or selective printing mechanisms characterised by the printing or marking process for which they are designed
- B41J2/005—Typewriters or selective printing mechanisms characterised by the printing or marking process for which they are designed characterised by bringing liquid or particles selectively into contact with a printing material
- B41J2/01—Ink jet
- B41J2/135—Nozzles
- B41J2/14—Structure thereof only for on-demand ink jet heads
- B41J2/14427—Structure of ink jet print heads with thermal bend detached actuators
-
- B—PERFORMING OPERATIONS; TRANSPORTING
- B41—PRINTING; LINING MACHINES; TYPEWRITERS; STAMPS
- B41J—TYPEWRITERS; SELECTIVE PRINTING MECHANISMS, i.e. MECHANISMS PRINTING OTHERWISE THAN FROM A FORME; CORRECTION OF TYPOGRAPHICAL ERRORS
- B41J2/00—Typewriters or selective printing mechanisms characterised by the printing or marking process for which they are designed
- B41J2/005—Typewriters or selective printing mechanisms characterised by the printing or marking process for which they are designed characterised by bringing liquid or particles selectively into contact with a printing material
- B41J2/01—Ink jet
- B41J2/17—Ink jet characterised by ink handling
- B41J2/175—Ink supply systems ; Circuit parts therefor
- B41J2/17503—Ink cartridges
-
- B—PERFORMING OPERATIONS; TRANSPORTING
- B41—PRINTING; LINING MACHINES; TYPEWRITERS; STAMPS
- B41J—TYPEWRITERS; SELECTIVE PRINTING MECHANISMS, i.e. MECHANISMS PRINTING OTHERWISE THAN FROM A FORME; CORRECTION OF TYPOGRAPHICAL ERRORS
- B41J2/00—Typewriters or selective printing mechanisms characterised by the printing or marking process for which they are designed
- B41J2/005—Typewriters or selective printing mechanisms characterised by the printing or marking process for which they are designed characterised by bringing liquid or particles selectively into contact with a printing material
- B41J2/01—Ink jet
- B41J2/17—Ink jet characterised by ink handling
- B41J2/175—Ink supply systems ; Circuit parts therefor
- B41J2/17503—Ink cartridges
- B41J2/17513—Inner structure
-
- G—PHYSICS
- G03—PHOTOGRAPHY; CINEMATOGRAPHY; ANALOGOUS TECHNIQUES USING WAVES OTHER THAN OPTICAL WAVES; ELECTROGRAPHY; HOLOGRAPHY
- G03B—APPARATUS OR ARRANGEMENTS FOR TAKING PHOTOGRAPHS OR FOR PROJECTING OR VIEWING THEM; APPARATUS OR ARRANGEMENTS EMPLOYING ANALOGOUS TECHNIQUES USING WAVES OTHER THAN OPTICAL WAVES; ACCESSORIES THEREFOR
- G03B17/00—Details of cameras or camera bodies; Accessories therefor
- G03B17/48—Details of cameras or camera bodies; Accessories therefor adapted for combination with other photographic or optical apparatus
- G03B17/50—Details of cameras or camera bodies; Accessories therefor adapted for combination with other photographic or optical apparatus with both developing and finishing apparatus
- G03B17/53—Details of cameras or camera bodies; Accessories therefor adapted for combination with other photographic or optical apparatus with both developing and finishing apparatus for automatically delivering a finished picture after a signal causing exposure has been given, e.g. by pushing a button, by inserting a coin
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F21/00—Security arrangements for protecting computers, components thereof, programs or data against unauthorised activity
- G06F21/70—Protecting specific internal or peripheral components, in which the protection of a component leads to protection of the entire computer
- G06F21/78—Protecting specific internal or peripheral components, in which the protection of a component leads to protection of the entire computer to assure secure storage of data
- G06F21/79—Protecting specific internal or peripheral components, in which the protection of a component leads to protection of the entire computer to assure secure storage of data in semiconductor storage media, e.g. directly-addressable memories
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F21/00—Security arrangements for protecting computers, components thereof, programs or data against unauthorised activity
- G06F21/70—Protecting specific internal or peripheral components, in which the protection of a component leads to protection of the entire computer
- G06F21/86—Secure or tamper-resistant housings
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06K—GRAPHICAL DATA READING; PRESENTATION OF DATA; RECORD CARRIERS; HANDLING RECORD CARRIERS
- G06K1/00—Methods or arrangements for marking the record carrier in digital fashion
- G06K1/12—Methods or arrangements for marking the record carrier in digital fashion otherwise than by punching
- G06K1/121—Methods or arrangements for marking the record carrier in digital fashion otherwise than by punching by printing code marks
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06K—GRAPHICAL DATA READING; PRESENTATION OF DATA; RECORD CARRIERS; HANDLING RECORD CARRIERS
- G06K19/00—Record carriers for use with machines and with at least a part designed to carry digital markings
- G06K19/06—Record carriers for use with machines and with at least a part designed to carry digital markings characterised by the kind of the digital marking, e.g. shape, nature, code
- G06K19/06009—Record carriers for use with machines and with at least a part designed to carry digital markings characterised by the kind of the digital marking, e.g. shape, nature, code with optically detectable marking
- G06K19/06037—Record carriers for use with machines and with at least a part designed to carry digital markings characterised by the kind of the digital marking, e.g. shape, nature, code with optically detectable marking multi-dimensional coding
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06K—GRAPHICAL DATA READING; PRESENTATION OF DATA; RECORD CARRIERS; HANDLING RECORD CARRIERS
- G06K19/00—Record carriers for use with machines and with at least a part designed to carry digital markings
- G06K19/06—Record carriers for use with machines and with at least a part designed to carry digital markings characterised by the kind of the digital marking, e.g. shape, nature, code
- G06K19/067—Record carriers with conductive marks, printed circuits or semiconductor circuit elements, e.g. credit or identity cards also with resonating or responding marks without active components
- G06K19/07—Record carriers with conductive marks, printed circuits or semiconductor circuit elements, e.g. credit or identity cards also with resonating or responding marks without active components with integrated circuit chips
- G06K19/073—Special arrangements for circuits, e.g. for protecting identification code in memory
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06K—GRAPHICAL DATA READING; PRESENTATION OF DATA; RECORD CARRIERS; HANDLING RECORD CARRIERS
- G06K7/00—Methods or arrangements for sensing record carriers, e.g. for reading patterns
- G06K7/10—Methods or arrangements for sensing record carriers, e.g. for reading patterns by electromagnetic radiation, e.g. optical sensing; by corpuscular radiation
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06K—GRAPHICAL DATA READING; PRESENTATION OF DATA; RECORD CARRIERS; HANDLING RECORD CARRIERS
- G06K7/00—Methods or arrangements for sensing record carriers, e.g. for reading patterns
- G06K7/10—Methods or arrangements for sensing record carriers, e.g. for reading patterns by electromagnetic radiation, e.g. optical sensing; by corpuscular radiation
- G06K7/14—Methods or arrangements for sensing record carriers, e.g. for reading patterns by electromagnetic radiation, e.g. optical sensing; by corpuscular radiation using light without selection of wavelength, e.g. sensing reflected white light
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06K—GRAPHICAL DATA READING; PRESENTATION OF DATA; RECORD CARRIERS; HANDLING RECORD CARRIERS
- G06K7/00—Methods or arrangements for sensing record carriers, e.g. for reading patterns
- G06K7/10—Methods or arrangements for sensing record carriers, e.g. for reading patterns by electromagnetic radiation, e.g. optical sensing; by corpuscular radiation
- G06K7/14—Methods or arrangements for sensing record carriers, e.g. for reading patterns by electromagnetic radiation, e.g. optical sensing; by corpuscular radiation using light without selection of wavelength, e.g. sensing reflected white light
- G06K7/1404—Methods for optical code recognition
- G06K7/1408—Methods for optical code recognition the method being specifically adapted for the type of code
- G06K7/1417—2D bar codes
-
- G—PHYSICS
- G07—CHECKING-DEVICES
- G07F—COIN-FREED OR LIKE APPARATUS
- G07F7/00—Mechanisms actuated by objects other than coins to free or to actuate vending, hiring, coin or paper currency dispensing or refunding apparatus
- G07F7/08—Mechanisms actuated by objects other than coins to free or to actuate vending, hiring, coin or paper currency dispensing or refunding apparatus by coded identity card or credit card or other personal identification means
-
- G—PHYSICS
- G07—CHECKING-DEVICES
- G07F—COIN-FREED OR LIKE APPARATUS
- G07F7/00—Mechanisms actuated by objects other than coins to free or to actuate vending, hiring, coin or paper currency dispensing or refunding apparatus
- G07F7/08—Mechanisms actuated by objects other than coins to free or to actuate vending, hiring, coin or paper currency dispensing or refunding apparatus by coded identity card or credit card or other personal identification means
- G07F7/086—Mechanisms actuated by objects other than coins to free or to actuate vending, hiring, coin or paper currency dispensing or refunding apparatus by coded identity card or credit card or other personal identification means by passive credit-cards adapted therefor, e.g. constructive particularities to avoid counterfeiting, e.g. by inclusion of a physical or chemical security-layer
-
- G—PHYSICS
- G07—CHECKING-DEVICES
- G07F—COIN-FREED OR LIKE APPARATUS
- G07F7/00—Mechanisms actuated by objects other than coins to free or to actuate vending, hiring, coin or paper currency dispensing or refunding apparatus
- G07F7/08—Mechanisms actuated by objects other than coins to free or to actuate vending, hiring, coin or paper currency dispensing or refunding apparatus by coded identity card or credit card or other personal identification means
- G07F7/12—Card verification
-
- G—PHYSICS
- G11—INFORMATION STORAGE
- G11C—STATIC STORES
- G11C11/00—Digital stores characterised by the use of particular electric or magnetic storage elements; Storage elements therefor
- G11C11/56—Digital stores characterised by the use of particular electric or magnetic storage elements; Storage elements therefor using storage elements with more than two stable states represented by steps, e.g. of voltage, current, phase, frequency
-
- H—ELECTRICITY
- H01—ELECTRIC ELEMENTS
- H01L—SEMICONDUCTOR DEVICES NOT COVERED BY CLASS H10
- H01L23/00—Details of semiconductor or other solid state devices
- H01L23/57—Protection from inspection, reverse engineering or tampering
- H01L23/576—Protection from inspection, reverse engineering or tampering using active circuits
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04N—PICTORIAL COMMUNICATION, e.g. TELEVISION
- H04N1/00—Scanning, transmission or reproduction of documents or the like, e.g. facsimile transmission; Details thereof
- H04N1/00127—Connection or combination of a still picture apparatus with another apparatus, e.g. for storage, processing or transmission of still picture signals or of information associated with a still picture
- H04N1/00326—Connection or combination of a still picture apparatus with another apparatus, e.g. for storage, processing or transmission of still picture signals or of information associated with a still picture with a data reading, recognizing or recording apparatus, e.g. with a bar-code apparatus
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04N—PICTORIAL COMMUNICATION, e.g. TELEVISION
- H04N1/00—Scanning, transmission or reproduction of documents or the like, e.g. facsimile transmission; Details thereof
- H04N1/0035—User-machine interface; Control console
- H04N1/00405—Output means
- H04N1/00408—Display of information to the user, e.g. menus
- H04N1/0044—Display of information to the user, e.g. menus for image preview or review, e.g. to help the user position a sheet
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04N—PICTORIAL COMMUNICATION, e.g. TELEVISION
- H04N1/00—Scanning, transmission or reproduction of documents or the like, e.g. facsimile transmission; Details thereof
- H04N1/00962—Input arrangements for operating instructions or parameters, e.g. updating internal software
- H04N1/00965—Input arrangements for operating instructions or parameters, e.g. updating internal software using a plug-in memory module, e.g. memory card, memory stick
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04N—PICTORIAL COMMUNICATION, e.g. TELEVISION
- H04N1/00—Scanning, transmission or reproduction of documents or the like, e.g. facsimile transmission; Details thereof
- H04N1/21—Intermediate information storage
- H04N1/2104—Intermediate information storage for one or a few pictures
- H04N1/2112—Intermediate information storage for one or a few pictures using still video cameras
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04N—PICTORIAL COMMUNICATION, e.g. TELEVISION
- H04N1/00—Scanning, transmission or reproduction of documents or the like, e.g. facsimile transmission; Details thereof
- H04N1/21—Intermediate information storage
- H04N1/2104—Intermediate information storage for one or a few pictures
- H04N1/2112—Intermediate information storage for one or a few pictures using still video cameras
- H04N1/2154—Intermediate information storage for one or a few pictures using still video cameras the still video camera incorporating a hardcopy reproducing device, e.g. a printer
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04N—PICTORIAL COMMUNICATION, e.g. TELEVISION
- H04N1/00—Scanning, transmission or reproduction of documents or the like, e.g. facsimile transmission; Details thereof
- H04N1/32—Circuits or arrangements for control or supervision between transmitter and receiver or between image input and image output device, e.g. between a still-image camera and its memory or between a still-image camera and a printer device
- H04N1/32101—Display, printing, storage or transmission of additional information, e.g. ID code, date and time or title
- H04N1/32128—Display, printing, storage or transmission of additional information, e.g. ID code, date and time or title attached to the image data, e.g. file header, transmitted message header, information on the same page or in the same computer file as the image
- H04N1/32133—Display, printing, storage or transmission of additional information, e.g. ID code, date and time or title attached to the image data, e.g. file header, transmitted message header, information on the same page or in the same computer file as the image on the same paper sheet, e.g. a facsimile page header
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04N—PICTORIAL COMMUNICATION, e.g. TELEVISION
- H04N23/00—Cameras or camera modules comprising electronic image sensors; Control thereof
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04N—PICTORIAL COMMUNICATION, e.g. TELEVISION
- H04N5/00—Details of television systems
- H04N5/222—Studio circuitry; Studio devices; Studio equipment
- H04N5/262—Studio circuits, e.g. for mixing, switching-over, change of character of image, other special effects ; Cameras specially adapted for the electronic generation of special effects
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04N—PICTORIAL COMMUNICATION, e.g. TELEVISION
- H04N5/00—Details of television systems
- H04N5/222—Studio circuitry; Studio devices; Studio equipment
- H04N5/262—Studio circuits, e.g. for mixing, switching-over, change of character of image, other special effects ; Cameras specially adapted for the electronic generation of special effects
- H04N5/2628—Alteration of picture size, shape, position or orientation, e.g. zooming, rotation, rolling, perspective, translation
-
- B—PERFORMING OPERATIONS; TRANSPORTING
- B41—PRINTING; LINING MACHINES; TYPEWRITERS; STAMPS
- B41J—TYPEWRITERS; SELECTIVE PRINTING MECHANISMS, i.e. MECHANISMS PRINTING OTHERWISE THAN FROM A FORME; CORRECTION OF TYPOGRAPHICAL ERRORS
- B41J2/00—Typewriters or selective printing mechanisms characterised by the printing or marking process for which they are designed
- B41J2/005—Typewriters or selective printing mechanisms characterised by the printing or marking process for which they are designed characterised by bringing liquid or particles selectively into contact with a printing material
- B41J2/01—Ink jet
- B41J2/135—Nozzles
- B41J2/165—Preventing or detecting of nozzle clogging, e.g. cleaning, capping or moistening for nozzles
- B41J2/16585—Preventing or detecting of nozzle clogging, e.g. cleaning, capping or moistening for nozzles for paper-width or non-reciprocating print heads
-
- B—PERFORMING OPERATIONS; TRANSPORTING
- B41—PRINTING; LINING MACHINES; TYPEWRITERS; STAMPS
- B41J—TYPEWRITERS; SELECTIVE PRINTING MECHANISMS, i.e. MECHANISMS PRINTING OTHERWISE THAN FROM A FORME; CORRECTION OF TYPOGRAPHICAL ERRORS
- B41J2/00—Typewriters or selective printing mechanisms characterised by the printing or marking process for which they are designed
- B41J2/005—Typewriters or selective printing mechanisms characterised by the printing or marking process for which they are designed characterised by bringing liquid or particles selectively into contact with a printing material
- B41J2/01—Ink jet
- B41J2/17—Ink jet characterised by ink handling
- B41J2/175—Ink supply systems ; Circuit parts therefor
- B41J2/17596—Ink pumps, ink valves
-
- B—PERFORMING OPERATIONS; TRANSPORTING
- B41—PRINTING; LINING MACHINES; TYPEWRITERS; STAMPS
- B41J—TYPEWRITERS; SELECTIVE PRINTING MECHANISMS, i.e. MECHANISMS PRINTING OTHERWISE THAN FROM A FORME; CORRECTION OF TYPOGRAPHICAL ERRORS
- B41J2/00—Typewriters or selective printing mechanisms characterised by the printing or marking process for which they are designed
- B41J2/005—Typewriters or selective printing mechanisms characterised by the printing or marking process for which they are designed characterised by bringing liquid or particles selectively into contact with a printing material
- B41J2/01—Ink jet
- B41J2/015—Ink jet characterised by the jet generation process
- B41J2/04—Ink jet characterised by the jet generation process generating single droplets or particles on demand
- B41J2002/041—Electromagnetic transducer
-
- B—PERFORMING OPERATIONS; TRANSPORTING
- B41—PRINTING; LINING MACHINES; TYPEWRITERS; STAMPS
- B41J—TYPEWRITERS; SELECTIVE PRINTING MECHANISMS, i.e. MECHANISMS PRINTING OTHERWISE THAN FROM A FORME; CORRECTION OF TYPOGRAPHICAL ERRORS
- B41J2202/00—Embodiments of or processes related to ink-jet or thermal heads
- B41J2202/01—Embodiments of or processes related to ink-jet heads
- B41J2202/21—Line printing
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F2221/00—Indexing scheme relating to security arrangements for protecting computers, components thereof, programs or data against unauthorised activity
- G06F2221/21—Indexing scheme relating to G06F21/00 and subgroups addressing additional information or applications relating to security arrangements for protecting computers, components thereof, programs or data against unauthorised activity
- G06F2221/2129—Authenticate client device independently of the user
-
- H—ELECTRICITY
- H01—ELECTRIC ELEMENTS
- H01L—SEMICONDUCTOR DEVICES NOT COVERED BY CLASS H10
- H01L2924/00—Indexing scheme for arrangements or methods for connecting or disconnecting semiconductor or solid-state bodies as covered by H01L24/00
- H01L2924/0001—Technical content checked by a classifier
- H01L2924/0002—Not covered by any one of groups H01L24/00, H01L24/00 and H01L2224/00
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04N—PICTORIAL COMMUNICATION, e.g. TELEVISION
- H04N1/00—Scanning, transmission or reproduction of documents or the like, e.g. facsimile transmission; Details thereof
- H04N1/00127—Connection or combination of a still picture apparatus with another apparatus, e.g. for storage, processing or transmission of still picture signals or of information associated with a still picture
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04N—PICTORIAL COMMUNICATION, e.g. TELEVISION
- H04N2101/00—Still video cameras
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04N—PICTORIAL COMMUNICATION, e.g. TELEVISION
- H04N2201/00—Indexing scheme relating to scanning, transmission or reproduction of documents or the like, and to details thereof
- H04N2201/32—Circuits or arrangements for control or supervision between transmitter and receiver or between image input and image output device, e.g. between a still-image camera and its memory or between a still-image camera and a printer device
- H04N2201/3201—Display, printing, storage or transmission of additional information, e.g. ID code, date and time or title
- H04N2201/3212—Display, printing, storage or transmission of additional information, e.g. ID code, date and time or title of data relating to a job, e.g. communication, capture or filing of an image
- H04N2201/3222—Display, printing, storage or transmission of additional information, e.g. ID code, date and time or title of data relating to a job, e.g. communication, capture or filing of an image of processing required or performed, e.g. forwarding, urgent or confidential handling
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04N—PICTORIAL COMMUNICATION, e.g. TELEVISION
- H04N2201/00—Indexing scheme relating to scanning, transmission or reproduction of documents or the like, and to details thereof
- H04N2201/32—Circuits or arrangements for control or supervision between transmitter and receiver or between image input and image output device, e.g. between a still-image camera and its memory or between a still-image camera and a printer device
- H04N2201/3201—Display, printing, storage or transmission of additional information, e.g. ID code, date and time or title
- H04N2201/3269—Display, printing, storage or transmission of additional information, e.g. ID code, date and time or title of machine readable codes or marks, e.g. bar codes or glyphs
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04N—PICTORIAL COMMUNICATION, e.g. TELEVISION
- H04N2201/00—Indexing scheme relating to scanning, transmission or reproduction of documents or the like, and to details thereof
- H04N2201/32—Circuits or arrangements for control or supervision between transmitter and receiver or between image input and image output device, e.g. between a still-image camera and its memory or between a still-image camera and a printer device
- H04N2201/3201—Display, printing, storage or transmission of additional information, e.g. ID code, date and time or title
- H04N2201/3274—Storage or retrieval of prestored additional information
- H04N2201/3276—Storage or retrieval of prestored additional information of a customised additional information profile, e.g. a profile specific to a user ID
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04N—PICTORIAL COMMUNICATION, e.g. TELEVISION
- H04N2201/00—Indexing scheme relating to scanning, transmission or reproduction of documents or the like, and to details thereof
- H04N2201/32—Circuits or arrangements for control or supervision between transmitter and receiver or between image input and image output device, e.g. between a still-image camera and its memory or between a still-image camera and a printer device
- H04N2201/3201—Display, printing, storage or transmission of additional information, e.g. ID code, date and time or title
- H04N2201/328—Processing of the additional information
Definitions
- the present invention relates to a data processing method and apparatus and, in particular, discloses a programmable camera system with software Interpreter.
- an image is normally imaged by CCD array. Subsequently, the images are stored on the camera on storage media such as a semiconductor memory array. At a later stage, the images are downloaded from the camera to a computer or the like where the images undergo subsequent manipulation and printing.
- the printing normally includes various image processing steps to enhance certain aspects of the image.
- CCD arrays, cameras and displays For details on the operation of CCD devices and cameras, reference is made to a standard text in this field such as “CCD arrays, cameras and displays” by Gerald C Holst, published 1996 by SPIE Optical Engineering Press Bellingham, Wash., USA.
- a portable camera with inbuilt printer device, and input means for uploading software said camera including:
- a script input means for inputting a self documenting program script for the manipulation and filtering of said captured digital image to produce visual alterations thereof, said script input means comprising a card reader for optically reading a script printed as an array of dots on one surface of a portable card, there being a visual example of the likely effect of said script on a second surface of the card;
- said script is interpreted and executed by said interpreter means to modify said captured digital image in accordance with said script to produce a digital image modified from said captured digital image, in the manner visually exemplified on said second surface of said card, and to provide a printout of said image on said inbuilt printer device.
- FIG. 1 illustrates an Artcam device constructed in accordance with the preferred embodiment
- FIG. 2 is a schematic block diagram of the main Artcam electronic components
- FIG. 3 is a schematic block diagram of the Artcam Central Processor
- FIG. 3( a ) illustrates the VLIW Vector Processor in more detail
- FIG. 4 illustrates the Processing Unit in more detail
- FIG. 5 illustrates the ALU 188 in more detail
- FIG. 6 illustrates the In block in more detail
- FIG. 7 illustrates the Out block in more detail
- FIG. 8 illustrates the Registers block in more detail
- FIG. 9 illustrates the Crossbar 1 in more detail
- FIG. 10 illustrates the Crossbar 2 in more detail
- FIG. 11 illustrates the read process block in more detail
- FIG. 12 illustrates the read process block in more detail
- FIG. 13 illustrates the barrel shifter block in more detail
- FIG. 14 illustrates the adder/logic block in more detail
- FIG. 15 illustrates the multiply block in more detail
- FIG. 16 illustrates the I/O address generator block in more detail
- FIG. 17 illustrates a pixel storage format
- FIG. 18 illustrates a sequential read iterator process
- FIG. 19 illustrates a box read iterator process
- FIG. 20 illustrates a box write iterator process
- FIG. 21 illustrates the vertical strip read/write iterator process
- FIG. 22 illustrates the vertical strip read/write iterator process
- FIG. 23 illustrates the generate sequential process
- FIG. 24 illustrates the generate sequential process
- FIG. 25 illustrates the generate vertical strip process
- FIG. 26 illustrates the generate vertical strip process
- FIG. 27 illustrates a pixel data configuration
- FIG. 28 illustrates a pixel processing process
- FIG. 29 illustrates a schematic block diagram of the display controller
- FIG. 30 illustrates the CCD image organization
- FIG. 31 illustrates the storage format for a logical image
- FIG. 32 illustrates the internal image memory storage format
- FIG. 33 illustrates the image pyramid storage format
- FIG. 34 illustrates a time line of the process of sampling an Artcard
- FIG. 35 illustrates the super sampling process
- FIG. 36 illustrates the process of reading a rotated Artcard
- FIG. 37 illustrates a flow chart of the steps necessary to decode an Artcard
- FIG. 38 illustrates an enlargement of the left hand corner of a single Artcard
- FIG. 39 illustrates a single target for detection
- FIG. 40 illustrates the method utilised to detect targets
- FIG. 41 illustrates the method of calculating the distance between two targets
- FIG. 42 illustrates the process of centroid drift
- FIG. 43 shows one form of centroid lookup table
- FIG. 44 illustrates the centroid updating process
- FIG. 45 illustrates a delta processing lookup table utilised in the preferred embodiment
- FIG. 46 illustrates the process of unscrambling Artcard data
- FIG. 47 illustrates a magnified view of a series of dots
- FIG. 48 illustrates the data surface of a dot card
- FIG. 49 illustrates schematically the layout of a single datablock
- FIG. 50 illustrates a single datablock
- FIG. 51 and FIG. 52 illustrate magnified views of portions of the datablock of FIG. 50 ;
- FIG. 53 illustrates a single target structure
- FIG. 54 illustrates the target structure of a datablock
- FIG. 55 illustrates the positional relationship of targets relative to border clocking regions of a data region
- FIG. 56 illustrates the orientation columns of a datablock
- FIG. 57 illustrates the array of dots of a datablock
- FIG. 58 illustrates schematically the structure of data for Reed-Solomon encoding
- FIG. 59 illustrates an example Reed-Solomon encoding
- FIG. 60 illustrates the Reed-Solomon encoding process
- FIG. 61 illustrates the layout of encoded data within a datablock
- FIG. 62 illustrates the sampling process in sampling an alternative Artcard
- FIG. 63 illustrates, in exaggerated form, an example of sampling a rotated alternative Artcard
- FIG. 64 illustrates the scanning process
- FIG. 65 illustrates the likely scanning distribution of the scanning process
- FIG. 66 illustrates the relationship between probability of symbol errors and Reed-Solomon block errors
- FIG. 67 illustrates a flow chart of the decoding process
- FIG. 68 illustrates a process utilization diagram of the decoding process
- FIG. 69 illustrates the dataflow steps in decoding
- FIG. 70 illustrates the reading process in more detail
- FIG. 71 illustrates the process of detection of the start of an alternative Artcard in more detail
- FIG. 72 illustrates the extraction of bit data process in more detail
- FIG. 73 illustrates the segmentation process utilized in the decoding process
- FIG. 74 illustrates the decoding process of finding targets in more detail
- FIG. 75 illustrates the data structures utilized in locating targets
- FIG. 76 illustrates the Lancos 3 function structure
- FIG. 77 illustrates an enlarged portion of a datablock illustrating the clockmark and border region
- FIG. 78 illustrates the processing steps in decoding a bit image
- FIG. 79 illustrates the dataflow steps in decoding a bit image
- FIG. 80 illustrates the descrambling process of the preferred embodiment
- FIG. 81 illustrates one form of implementation of the convolver
- FIG. 82 illustrates a convolution process
- FIG. 83 illustrates the compositing process
- FIG. 84 illustrates the regular compositing process in more detail
- FIG. 85 illustrates the process of warping using a warp map
- FIG. 86 illustrates the warping bi-linear interpolation process
- FIG. 87 illustrates the process of span calculation
- FIG. 88 illustrates the basic span calculation process
- FIG. 89 illustrates one form of detail implementation of the span calculation process
- FIG. 90 illustrates the process of reading image pyramid levels
- FIG. 91 illustrates using the pyramid table for bilinear interpolation
- FIG. 92 illustrates the histogram collection process
- FIG. 93 illustrates the color transform process
- FIG. 94 illustrates the color conversion process
- FIG. 95 illustrates the color space conversion process in more detail
- FIG. 96 illustrates the process of calculating an input coordinate
- FIG. 97 illustrates the process of compositing with feedback
- FIG. 98 illustrates the generalized scaling process
- FIG. 99 illustrates the scale in X scaling process
- FIG. 100 illustrates the scale in Y scaling process
- FIG. 101 illustrates the tessellation process
- FIG. 102 illustrates the sub-pixel translation process
- FIG. 103 illustrates the compositing process
- FIG. 104 illustrates the process of compositing with feedback
- FIG. 105 illustrates the process of tiling with color from the input image
- FIG. 106 illustrates the process of tiling with feedback
- FIG. 107 illustrates the process of tiling with texture replacement
- FIG. 108 illustrates the process of tiling with color from the input image
- FIG. 109 illustrates the process of applying a texture without feedback
- FIG. 110 illustrates the process of applying a texture with feedback
- FIG. 111 illustrates the process of rotation of CCD pixels
- FIG. 112 illustrates the process of interpolation of Green subpixels
- FIG. 113 illustrates the process of interpolation of Blue subpixels
- FIG. 114 illustrates the process of interpolation of Red subpixels
- FIG. 115 illustrates the process of CCD pixel interpolation with 0 degree rotation for odd pixel lines
- FIG. 116 illustrates the process of CCD pixel interpolation with 0 degree rotation for even pixel lines
- FIG. 117 illustrates the process of color conversion to Lab color space
- FIG. 118 illustrates the process of calculation of 1/ ⁇ X
- FIG. 119 illustrates the implementation of the calculation of 1/ ⁇ X in more detail
- FIG. 120 illustrates the process of Normal calculation with a bump map
- FIG. 121 illustrates the process of illumination calculation with a bump map
- FIG. 122 illustrates the process of illumination calculation with a bump map in more detail
- FIG. 123 illustrates the process of calculation of L using a directional light
- FIG. 124 illustrates the process of calculation of L using a Omni lights and spotlights
- FIG. 125 illustrates one form of implementation of calculation of L using a Omni lights and spotlights
- FIG. 126 illustrates the process of calculating the N.L dot product
- FIG. 127 illustrates the process of calculating the N.L dot product in more detail
- FIG. 128 illustrates the process of calculating the R.V dot product
- FIG. 129 illustrates the process of calculating the R.V dot product in more detail
- FIG. 130 illustrates the attenuation calculation inputs and outputs
- FIG. 131 illustrates an actual implementation of attenuation calculation
- FIG. 132 illustrates an graph of the cone factor
- FIG. 133 illustrates the process of penumbra calculation
- FIG. 134 illustrates the angles utilised in penumbra calculation
- FIG. 135 illustrates the inputs and outputs to penumbra calculation
- FIG. 136 illustrates an actual implementation of penumbra calculation
- FIG. 137 illustrates the inputs and outputs to ambient calculation
- FIG. 138 illustrates an actual implementation of ambient calculation
- FIG. 139 illustrates an actual implementation of diffuse calculation
- FIG. 140 illustrates the inputs and outputs to a diffuse calculation
- FIG. 141 illustrates an actual implementation of a diffuse calculation
- FIG. 142 illustrates the inputs and outputs to a specular calculation
- FIG. 143 illustrates an actual implementation of a specular calculation
- FIG. 144 illustrates the inputs and outputs to a specular calculation
- FIG. 145 illustrates an actual implementation of a specular calculation
- FIG. 146 illustrates an actual implementation of a ambient only calculation
- FIG. 147 illustrates the process overview of light calculation
- FIG. 148 illustrates an example illumination calculation for a single infinite light source
- FIG. 149 illustrates an example illumination calculation for a Omni light source without a bump map
- FIG. 150 illustrates an example illumination calculation for a Omni light source with a bump map
- FIG. 151 illustrates an example illumination calculation for a Spotlight light source without a bump map
- FIG. 152 illustrates the process of applying a single Spotlight onto an image with an associated bump-map
- FIG. 153 illustrates the logical layout of a single printhead
- FIG. 154 illustrates the structure of the printhead interface
- FIG. 155 illustrates the process of rotation of a Lab image
- FIG. 156 illustrates the format of a pixel of the printed image
- FIG. 157 illustrates the dithering process
- FIG. 158 illustrates the process of generating an 8 bit dot output
- FIG. 159 illustrates a perspective view of the card reader
- FIG. 160 illustrates an exploded perspective of a card reader
- FIG. 161 illustrates a close up view of the Artcard reader
- FIG. 162 illustrates a perspective view of the print roll and print head
- FIG. 163 illustrates a first exploded perspective view of the print roll
- FIG. 164 illustrates a second exploded perspective view of the print roll
- FIG. 165 illustrates the print roll authentication chip
- FIG. 166 illustrates an enlarged view of the print roll authentication chip
- FIG. 167 illustrates a single authentication chip data protocol
- FIG. 168 illustrates a dual authentication chip data protocol
- FIG. 169 illustrates a first presence only protocol
- FIG. 170 illustrates a second presence only protocol
- FIG. 171 illustrates a third data protocol
- FIG. 172 illustrates a fourth data protocol
- FIG. 173 is a schematic block diagram of a maximal period LFSR
- FIG. 174 is a schematic block diagram of a clock limiting filter
- FIG. 175 is a schematic block diagram of the tamper detection lines
- FIG. 176 illustrates an oversized nMOS transistor
- FIG. 177 illustrates the taking of multiple XORs from the Tamper Detect Line
- FIG. 178 illustrate how the Tamper Lines cover the noise generator circuitry
- FIG. 179 illustrates the normal form of FET implementation
- FIG. 180 illustrates the modified form of FET implementation of the preferred embodiment
- FIG. 181 illustrates a schematic block diagram of the authentication chip
- FIG. 182 illustrates an example memory map
- FIG. 183 illustrates an example of the constants memory map
- FIG. 184 illustrates an example of the RAM memory map
- FIG. 185 illustrates an example of the Flash memory variables memory map
- FIG. 186 illustrates an example of the Flash memory program memory map
- FIG. 187 shows the data flow and relationship between components of the State Machine
- FIG. 188 shows the data flow and relationship between components of the I/O Unit
- FIG. 189 illustrates a schematic block diagram of the Arithmetic Logic Unit
- FIG. 190 illustrates a schematic block diagram of the RPL unit
- FIG. 191 illustrates a schematic block diagram of the ROR block of the ALU
- FIG. 192 is a block diagram of the Program Counter Unit
- FIG. 193 is a block diagram of the Memory Unit
- FIG. 194 shows a schematic block diagram for the Address Generator Unit
- FIG. 195 shows a schematic block diagram for the JSIGEN Unit
- FIG. 196 shows a schematic block diagram for the JSRGEN Unit.
- FIG. 197 shows a schematic block diagram for the DBRGEN Unit
- FIG. 198 shows a schematic block diagram for the LDKGEN Unit
- FIG. 199 shows a schematic block diagram for the RPLGEN Unit
- FIG. 200 shows a schematic block diagram for the VARGEN Unit.
- FIG. 201 shows a schematic block diagram for the CLRGEN Unit.
- FIG. 202 shows a schematic block diagram for the BITGEN Unit.
- FIG. 203 sets out the information stored on the print roll authentication chip
- FIG. 204 illustrates the data stored within the Artcam authorization chip
- FIG. 205 illustrates the process of print head pulse characterization
- FIG. 206 is an exploded perspective, in section, of the print head ink supply mechanism
- FIG. 207 is a bottom perspective of the ink head supply unit
- FIG. 208 is a bottom side sectional view of the ink head supply unit
- FIG. 209 is a top perspective of the ink head supply unit
- FIG. 210 is a top side sectional view of the ink head supply unit
- FIG. 211 illustrates a perspective view of a small portion of the print head
- FIG. 212 illustrates is an exploded perspective of the print head unit
- FIG. 213 illustrates a top side perspective view of the internal portions of an Artcam camera, showing the parts flattened out;
- FIG. 214 illustrates a bottom side perspective view of the internal portions of an Artcam camera, showing the parts flattened out
- FIG. 215 illustrates a first top side perspective view of the internal portions of an Artcam camera, showing the parts as encased in an Artcam;
- FIG. 216 illustrates a second top side perspective view of the internal portions of an Artcam camera, showing the parts as encased in an Artcam;
- FIG. 217 illustrates a second top side perspective view of the internal portions of an Artcam camera, showing the parts as encased in an Artcam;
- FIG. 218 illustrates the backing portion of a postcard print roll
- FIG. 219 illustrates the corresponding front image on the postcard print roll after printing out images
- FIG. 220 illustrates a form of print roll ready for purchase by a consumer
- FIG. 221 illustrates a layout of the software/hardware modules of the overall Artcam application
- FIG. 222 illustrates a layout of the software/hardware modules of the Camera Manager
- FIG. 223 illustrates a layout of the software/hardware modules of the Image Processing Manager
- FIG. 224 illustrates a layout of the software/hardware modules of the Printer Manager
- FIG. 225 illustrates a layout of the software/hardware modules of the Image Processing Manager
- FIG. 226 illustrates a layout of the software/hardware modules of the File Manager
- FIG. 227 illustrates a perspective view, partly in section, of an alternative form of printroll
- FIG. 228 is a left side exploded perspective view of the print roll of FIG. 227 ;
- FIG. 229 is a right side exploded perspective view of a single printroll
- FIG. 230 is an exploded perspective view, partly in section, of the core portion of the printroll.
- FIG. 231 is a second exploded perspective view of the core portion of the printroll.
- FIG. 1 A digital image processing camera system constructed in accordance with the preferred embodiment is as illustrated in FIG. 1 .
- the camera unit 1 includes means for the insertion of an integral print roll (not shown).
- the camera unit 1 can include an area image sensor 2 for capturing an image of a scene 3 .
- a second area image sensor can be provided to also image the scene 3 and to optionally provide for the production of stereographic output effects.
- the camera 1 can include an optional color display 5 for the display of the image being sensed by the sensor 2 .
- button 6 can be depressed resulting in the printed image 8 being output by the camera unit 1 .
- a series of cards, herein after known as “Artcards” 9 contain, on one surface encoded information and on the other surface, contain an image distorted by the particular effect produced by the Artcard 9 .
- the Artcard 9 is inserted in an Artcard reader 10 in the side of camera 1 and, upon insertion, results in output image 8 being distorted in the same manner as the distortion appearing on the surface of Artcard 9 .
- a user wishing to produce a particular effect can insert one of many Artcards 9 into the Artcard reader 10 and utilize button 19 to take a picture of the image 3 resulting in a corresponding distorted output image 8 .
- the camera unit 1 can also include a number of other control button 13 , 14 in addition to a simple LCD output display 15 for the display of informative information including the number of printouts left on the internal print roll on the camera unit. Additionally, different output formats can be controlled by CHP switch 17 .
- FIG. 2 there is illustrated a schematic view of the internal hardware of the camera unit 1 .
- the internal hardware is based around an Artcam central processor unit (ACP) 31 .
- ACP Artcam central processor unit
- the Artcam central processor 31 provides many functions which form the ‘heart’ of the system.
- the ACP 31 is preferably implemented as a complex, high speed, CMOS system on-a-chip. Utilizing standard cell design with some full custom regions is recommended. Fabrication on a 0.25 micron CMOS process will provide the density and speed required, along with a reasonably small die area.
- the functions provided by the ACP 31 include:
- a 3D stereoscopic version of the ACP requires two area image sensor interfaces with a second optional image sensor 4 being provided for stereoscopic effects.
- the encoded surface of the Artcard 9 includes information on how to process an image to produce the effects displayed on the image distorted surface of the Artcard 9 .
- This information is in the form of a script, hereinafter known as a “Vark script”.
- the Vark script is utilised by an interpreter running within the ACP 31 to produce the desired effect
- a quartz crystal 58 is used as a frequency reference for the system clock.
- the ACP 31 includes a phase locked loop clock circuit to increase the frequency derived from the crystal 58 .
- the area image sensor 2 converts an image through its lens into an electrical signal. It can either be a charge coupled device (CCD) or an active pixel sensor (APS)CMOS image sensor.
- CCD charge coupled device
- APS active pixel sensor
- CMOS image sensors are eventually expected to be substantially cheaper than CCD's, have smaller pixel areas, and be able to incorporate drive circuitry and signal processing. They can also be made in CMOS fabs, which are transitioning to 12′′ wafers.
- CCD's are usually built in 6′′ wafer fabs, and economics may not allow a conversion to 12′′ fabs. Therefore, the difference in fabrication cost between CCD's and CMOS imagers is likely to increase, progressively favoring CMOS imagers. However, at present, a CCD is probably the best option.
- the Artcam unit will produce suitable results with a 1,500 ⁇ 1,000 area image sensor. However, smaller sensors, such as 750 ⁇ 500, will be adequate for many markets.
- the Artcam is less sensitive to image sensor resolution than are conventional digital cameras. This is because many of the styles contained on Artcards 9 process the image in such a way as to obscure the lack of resolution. For example, if the image is distorted to simulate the effect of being converted to an impressionistic painting, low source image resolution can be used with minimal effect Further examples for which low resolution input images will typically not be noticed include image warps which produce high distorted images, multiple miniature copies of the of the image (eg. passport photos), textural processing such as bump mapping for a base relief metal look, and photo-compositing into structured scenes.
- This tolerance of low resolution image sensors may be a significant factor in reducing the manufacturing cost of an Artcam unit 1 camera.
- An Artcam with a low cost 750 ⁇ 500 image sensor will often produce superior results to a conventional digital camera with a much more expensive. 1,500 ⁇ 1,000 image sensor.
- the 3D versions of the Artcam unit 1 have an additional image sensor 4 , for stereoscopic operation.
- This image sensor is identical to the main image sensor.
- the circuitry to drive the optional image sensor may be included as a standard part of the ACP chip 31 to reduce incremental design cost Alternatively, a separate 3D Artcam ACP can be designed. This option will reduce the manufacturing cost of a mainstream single sensor Artcam.
- a small chip 53 is included in each print roll 42 .
- This chip replaced the functions of the bar code, optical sensor and wheel, and ISO/ASA sensor on other forms of camera film units such as Advanced Photo Systems film cartridges.
- the authentication chip also provides other features:
- the authentication chip 53 contains 1024 bits of Flash memory, of which 128 bits is an authentication key, and 512 bits is the authentication information. Also included is an encryption circuit to ensure that the authentication key cannot be accessed directly.
- the Artcam unit 1 can utilize any color print technology which is small enough, low enough power, fast enough, high enough quality, and low enough cost, and is compatible with the print roll. Relevant printheads will be specifically discussed hereinafter.
- the specifications of the ink jet head are:
- the function of the ink pressure controller depends upon the type of ink jet print head 44 incorporated in the Artcam. For some types of ink jet, the use of an ink pressure controller can be eliminated, as the ink pressure is simply atmospheric pressure. Other types of print head require a regulated positive ink pressure. In this case, the in pressure controller consists of a pump and pressure transducer.
- print heads may require an ultrasonic transducer to cause regular oscillations in the ink pressure, typically at frequencies around 100 KHz.
- the ACP 31 controls the frequency phase and amplitude of these oscillations.
- the paper transport motor 36 moves the paper from within the print roll 42 past the print head at a relatively constant rate.
- the motor 36 is a miniature motor geared down to an appropriate speed to drive rollers which move the paper.
- a high quality motor and mechanical gears are required to achieve high image quality, as mechanical rumble or other vibrations will affect the printed dot row spacing.
- the motor driver 60 is a small circuit which amplifies the digital motor control signals from the APC 31 to levels suitable for driving the motor 36 .
- a paper pull sensor 50 detects a user's attempt to pull a photo from the camera unit during the printing process.
- the APC 31 reads this sensor 50 , and activates the guillotine 41 if the condition occurs.
- the paper pull sensor 50 is incorporated to make the camera more ‘foolproof’ in operation. Were the user to pull the paper out forcefully during printing, the print mechanism 44 or print roll 42 may (in extreme cases) be damaged. Since it is acceptable to pull out the ‘pod’ from a Polaroid type camera before it is fully ejected, the public has been ‘trained’ to do this. Therefore, they are unlikely to heed printed instructions not to pull the paper.
- the Artcam preferably restarts the photo print process after the guillotine 41 has cut the paper after pull sensing.
- the pull sensor can be implemented as a strain gauge sensor, or as an optical sensor detecting a small plastic flag which is deflected by the torque that occurs on the paper drive rollers when the paper is pulled.
- the latter implementation is recommendation for low cost.
- the paper guillotine actuator 40 is a small actuator which causes the guillotine 41 to cut the paper either at the end of a photograph, or when the paper pull sensor 50 is activated.
- the guillotine actuator 40 is a small circuit which amplifies a guillotine control signal from the APC tot the level required by the actuator 41 .
- the Artcard 9 is a program storage medium for the Artcam unit. As noted previously, the programs are in the form of Vark scripts. Vark is a powerful image processing language especially developed for the Artcam unit. Each Artcard 9 contains one Vark script, and thereby defines one image processing style.
- the VARK language is highly image processing specific.
- the language includes facilities for handling many image processing functions including image warping via a warp map, convolution, color lookup tables, posterizing an image, adding noise to an image, image enhancement filters, painting algorithms, brush jittering and manipulation edge detection filters, tiling, illumination via light sources, bump maps, text, face detection and object detection attributes, fonts, including three dimensional fonts, and arbitrary complexity pre-rendered icons. Further details of the operation of the Vark language interpreter are contained hereinafter.
- VARK interpreter is incorporated in the camera device
- a device independent scenario is provided whereby the underlying technology can be completely varied over time.
- the VARK scripts can be updated as new filters are created and distributed in an inexpensive manner, such as via simple cards for card reading.
- the Artcard 9 is a piece of thin white plastic with the same format as a credit card (86 mm long by 54 mm wide).
- the Artcard is printed on both sides using a high resolution ink jet printer.
- the inkjet printer technology is assumed to be the same as that used in the Artcam, with 1600 dpi (63 dpmm) resolution.
- a major feature of the Artcard 9 is low manufacturing cost.
- Artcards can be manufactured at high speeds as a wide web of plastic film.
- the plastic web is coated on both sides with a hydrophilic dye fixing layer.
- the web is printed simultaneously on both sides using a ‘pagewidth’ color ink jet printer.
- the web is then cut and punched into individual cards.
- On one face of the card is printed a human readable representation of the effect the Artcard 9 will have on the sensed image. This can be simply a standard image which has been processed using the Vark script stored on the back face of the card.
- the print area is 80 mm ⁇ 50 mm, giving a total of 15,876,000 dots.
- This array of dots could represent at least 1.89 Mbytes of data.
- extensive error detection and correction is incorporated in the array of dots. This allows a substantial portion of the card to be defaced, worn, creased, or dirty with no effect on data integrity.
- the data coding used is Reed-Solomon coding, with half of the data devoted to error correction. This allows the storage of 967 Kbytes of error corrected data on each Artcard 9 .
- the Artcard linear sensor 34 converts the aforementioned Artcard data image to electrical signals.
- the linear image sensor can be fabricated using either CCD or APS CMOS technology.
- the active length of the image sensor 34 is 50 mm, equal to the width of the data array on the Artcard 9 .
- the resolution of the linear image sensor 34 must be at least twice the highest spatial frequency of the Artcard optical image reaching the image sensor. In practice, data detection is easier if the image sensor resolution is substantially above this.
- a resolution of 4800 dpi (189 dpmm) is chosen, giving a total of 9,450 pixels. This resolution requires a pixel sensor pitch of 5.3 ⁇ m. This can readily be achieved by using four staggered rows of 20 ⁇ m pixel sensors.
- the linear image sensor is mounted in a special package which includes a LED 65 to illuminate the Artcard 9 via a light-pipe (not shown).
- the Artcard reader light-pipe can be a molded light-pipe which has several functions:
- the Artcard reader motor propels the Artcard past the linear image sensor 34 at a relatively constant rate.
- the motor 37 is a standard miniature motor geared down to an appropriate speed to drive a pair of rollers which move the Artcard 9 .
- the speed variations, rumble, and other vibrations will affect the raw image data as circuitry within the APC 31 includes extensive compensation for these effects to reliably read the Artcard data.
- the motor 37 is driven in reverse when the Artcard is to be ejected.
- the Artcard motor driver 61 is a small circuit which amplifies the digital motor control signals from the APC 31 to levels suitable for driving the motor 37 .
- the card insertion sensor 49 is an optical sensor which detects the presence of a card as it is being inserted in the card reader 34 . Upon a signal from this sensor 49 , the APC 31 initiates the card reading process, including the activation of the Artcard reader motor 37 .
- a card eject button 16 ( FIG. 1 ) is used by the user to eject the current Artcard, so that another Artcard can be inserted.
- the APC 31 detects the pressing of the button, and reverses the Artcard reader motor 37 to eject the card.
- a card status indicator 66 is provided to signal the user as to the status of the Artcard reading process. This can be a standard bi-color (red/green) LED. When the card is successfully read, and data integrity has been verified, the LED lights up green continually. If the card is faulty, then the LED lights up red.
- the power supply voltage is less than the forward voltage drop of the greed LED, and the LED will not light.
- red LEDs can be used, or the LED can be powered from a voltage pump which also powers other circuits in the Artcam which require higher voltage.
- the camera utilizes 8 Mbytes of memory 33 . This can be provided by a single 64 Mbit memory chip. Of course, with changing memory technology increased Dram storage sizes may be substituted
- High speed access to the memory chip is required. This can be achieved by using a Rambus DRAM (burst access rate of 500 Mbytes per second) or chips using the new open standards such as double data rate (DDR) SDRAM or Synclink DRAM.
- Rambus DRAM burst access rate of 500 Mbytes per second
- DDR double data rate SDRAM
- Synclink DRAM Synclink DRAM
- the camera authentication chip 54 is identical to the print roll authentication chip 53 , except that it has different information stored in it
- the camera authentication chip 54 has three main purposes:
- the status display 15 is a small passive segment based LCD, similar to those currently provided on silver halide and digital cameras. Its main function is to show the number of prints remaining in the print roll 42 and icons for various standard camera features, such as flash and battery status.
- the color display 5 is a full motion image display which operates as a viewfinder, as a verification of the image to be printed, and as a user interface display.
- the cost of the display 5 is approximately proportional to its area, so large displays (say 4′′ diagonal) unit will be restricted to expensive versions of the Artcam unit. Smaller displays, such as color camcorder viewfinder TFT's at around 1′′, may be effective for mid-range Artcams.
- the Artcam can include a zoom lens.
- This can be a standard electronically controlled zoom lens, identical to one which would be used on a standard electronic camera, and similar to pocket camera zoom lenses.
- a referred version of the Artcam unit may include standard interchangeable 35 mm SLR lenses.
- the autofocus motor 39 changes the focus of the zoom lens.
- the motor is a miniature motor geared down to an appropriate speed to drive the autofocus mechanism.
- the autofocus motor driver 63 is a small circuit which amplifies the digital motor control signals from the APC 31 to levels suitable for driving the motor 39 .
- the zoom motor 38 moves the zoom front lenses in and out.
- the motor is a miniature motor geared down to an appropriate speed to drive the zoom mechanism.
- the zoom motor driver 62 is a small circuit which amplifies the digital motor control signals from the APC 31 to levels suitable for driving the motor.
- the ACP 31 contains a universal serial bus (USB) interface 52 for communication with personal computers. Not all Artcam models are intended to include the USB connector. However, the silicon area required for a USB circuit 52 is small, so the interface can be included in the standard ACP.
- USB universal serial bus
- the Artcam unit may include an optional miniature keyboard 57 for customizing text specified by the Artcard. Any text appearing in an Artcard image may be editable, even if it is in a complex metallic 3D font.
- the miniature keyboard includes a single line alphanumeric LCD to display the original text and edited text.
- the keyboard may be a standard accessory.
- the ACP 31 contains a serial communications circuit for transferring data to and from the miniature keyboard.
- the Artcam unit uses a battery 48 .
- this is either a 3V Lithium cell, 1.5 V AA alkaline cells, or other battery arrangement
- Power consumption is an important design constraint in the Artcam. It is desirable that either standard camera batteries (such as 3V lithium batters) or standard AA or AAA alkaline cells can be used. While the electronic complexity of the Artcam unit is dramatically higher than 35 mm photographic cameras, the power consumption need not be commensurately higher. Power in the Artcam can be carefully managed with all unit being turned off when not in use.
- the most significant current drains are the ACP 31 , the area image sensors 2 , 4 , the printer 44 various motors, the flash unit 56 , and the optional color display 5 dealing with each part separately:
- ACP If fabricated using 0.25 ⁇ m CMOS, and running on 1.5V, the ACP power consumption can be quite low. Clocks to various parts of the ACP chip can be quite low. Clocks to various parts of the ACP chip can be turned off when not in use, virtually eliminating standby current consumption. The ACP will only fully used for approximately 4 seconds for each photograph printed.
- Area image sensor power is only supplied to the area image sensor when the user has their finger on the button.
- the printer power is only supplied to the printer when actually printing. This is for around 2 seconds for each photograph. Even so, suitably lower power consumption printing should be used.
- the motors required in the Artcam are all low power miniature motors, and are typically only activated for a few seconds per photo.
- the flash unit 45 is only used for some photographs. Its power consumption can readily be provided by a 3V lithium battery for a reasonably battery life.
- the optional color display 5 is a major current drain for two reasons: it must be on for the whole time that the camera is in use, and a backlight will be required if a liquid crystal display is used. Cameras which incorporate a color display will require a larger battery to achieve acceptable batter life.
- the flash unit 56 can be a standard miniature electronic flash for consumer cameras.
- FIG. 3 illustrates the Artcam Central Processor (ACP) 31 in more detail.
- the Artcam Central Processor provides all of the processing power for Artcam. It is designed for a 0.25 micron CMOS process, with approximately 1.5 million transistors and an area of around 50 mm 2 .
- the ACP 31 is a complex design, but design effort can be reduced by the use of datapath compilation techniques, macrocells, and IP cores.
- the ACP 31 contains:
- the DRAM Interface 81 is responsible for interfacing between other client portions of the ACP chip and the RAMBUS DRAM.
- each module within the DRAM Interface is an address generator.
- CMOS images are typically different in color space, resolution, and the output & input color spaces which can vary from camera to camera.
- a CCD image on a low-end camera may be a different resolution, or have different color characteristics from that used in a high-end camera.
- all internal image formats are the same format in terms of color space across all cameras.
- the three image types can vary with respect to which direction is ‘up’.
- the physical orientation of the camera causes the notion of a portrait or landscape image, and this must be maintained throughout processing. For this reason, the internal image is always oriented correctly, and rotation is performed on images obtained from the CCD and during the print operation.
- the ACP 31 incorporates a 32 bit RISC CPU 72 to run the Vark image processing language interpreter and to perform Artcam's general operating system duties.
- CPU cores can be any processor core with sufficient processing power to perform the required core calculations and control functions fast enough to met consumer expectations. Examples of suitable cores are: MIPS R4000 core from LSI Logic, StrongARM core.
- MIPS R4000 core from LSI Logic
- StrongARM core There is no need to maintain instruction set continuity between different Artcam models. Artcard compatibility is maintained irrespective of future processor advances and changes, because the Vark interpreter is simply re-compiled for each new instruction set.
- the ACP 31 architecture is therefore also free to evolve. Different ACP 31 chip designs may be fabricated by different manufacturers, without requiring to license or port the CPU core.
- CPU Memory Model An Artcam's CPU memory model consists of a 32 MB area. It consists of 8 MB of physical RDRAM off-chip in the base model of Artcam, with provision for up to 16 MB of off-chip memory. There is a 4 MB Flash memory 70 on the ACP 31 for program storage, and finally a 4 MB address space mapped to the various registers and controls of the ACP 31 .
- the memory map then, for an Artcam is as follows:
- Program scratch RAM 0.50 MB Artcard data 1.00 MB Photo Image, captured from CMOS Sensor 0.50 MB Print Image (compressed) 2.25 MB 1 Channel of expanded Photo Image 1.50 MB 1 Image Pyramid of single channel 1.00 MB Intermediate Image Processing 1.25 MB TOTAL 8 MB Notes: Uncompressed, the Print Image requires 4.5 MB (1.5 MB per channel). To accommodate other objects in the 8 MB model, the Print Image needs to be compressed. If the chrominance channels are compressed by 4:1 they require only 0.375 MB each).
- VLIW Input and Output FIFOs are 8 bit wide FIFOs used for communicating between processes and the VLIW Vector Processor 74 . Both FIFOs are under the control of the VLIW Vector Processor 74 , but can be cleared and queried (e.g. for status) etc by the CPU.
- VLIW Input FIFO 78 A client writes 8-bit data to the VLIW Input FIFO 78 in order to have the data processed by the VLIW Vector Processor 74 .
- Clients include the Image Sensor Interface, Artcard Interface, and CPU. Each of these processes is able to offload processing by simply writing the data to the FIFO, and letting the VLIW Vector Processor 74 do all the hard work.
- An example of the use of a client's use of the VLIW Input FIFO 78 is the Image Sensor Interface (ISI 83 ).
- the ISI 83 takes data from the Image Sensor and writes it to the FIFO.
- a VLIW process takes it from the FIFO, transforming it into the correct image data format, and writing it out to DRAM.
- VLIW Output FIFO 79 The VLIW Vector Processor 74 writes 8-bit data to the VLIW Output FIFO 79 where clients can read it. Clients include the Print Head Interface and the CPU. Both of these clients is able to offload processing by simply reading the already processed data from the FIFO, and letting the VLIW Vector Processor 74 do all the hard work. The CPU can also be interrupted whenever data is placed into the VLIW Output FIFO 79 , allowing it to only process the data as it becomes available rather than polling the FIFO continuously.
- An example of the use of a client's use of the VLIW Output FIFO 79 is the Print Head Interface (PHI 62 ).
- VLIW Process takes an image, rotates it to the correct orientation, color converts it, and dithers the resulting image according to the print head requirements.
- the PHI 62 reads the dithered formatted 8-bit data from the VLIW Output FIFO 79 and simply passes it on to the Print Head external to the ACP 31 .
- the PHI 62 becomes much simpler as a result.
- VLIW Vector Processor 74 To achieve the high processing requirements of Artcam, the ACP 31 contains a VLIW (Very Long Instruction Word) Vector Processor.
- the VLIW processor is a set of 4 identical Processing Units (PU e.g 178 ) working in parallel, connected by a crossbar switch 183 .
- Each PU e.g 178 can perform four 8-bit multiplications, eight 8-bit additions, three 32-bit additions, I/O processing, and various logical operations in each cycle.
- the PUs e.g 178 are microcoded, and each has two Address Generators 189 , 190 to allow full use of available cycles for data processing.
- the four PUs e.g 178 are normally synchronized to provide a tightly interacting VLIW processor. Clocking at 200 MHz, the VLIW Vector Processor 74 runs at 12 Gops (12 billion operations per second). Instructions are tuned for image processing functions such as warping, artistic brushing, complex synthetic illumination, color transforms, image filtering, and compositing. These are accelerated by two orders of magnitude over desktop computers.
- the VLIW Vector Processor 74 is 4 PUs e.g 178 connected by a crossbar switch 183 such that each PU e.g 178 provides two inputs to, and takes two outputs from, the crossbar switch 183 .
- Two common registers form a control and synchronization mechanism for the PUs e.g 178 .
- 8 Cache buses 182 allow connectivity to DRAM via the Data cache 76 , with 2 buses going to each PU e.g 178 (1 bus per I/O Address Generator).
- Each PU e.g 178 consists of an ALU 188 (containing a number of registers & some arithmetic logic for processing data), some microcode RAM 196 , and connections to the outside world (including other ALUs).
- a local PU state machine runs in microcode and is the means by which the PU e.g 178 is controlled.
- Each PU e.g 178 contains two I/O Address Generators 189 , 190 controlling data flow between DRAM (via the Data cache 76 ) and the ALU 188 (via Input FIFO and Output FIFO).
- the address generator is able to read and write data (specifically images in a variety of formats) as well as tables and simulated FIFOs in DRAM.
- the formats are customizable under software control, but are not microcoded.
- Data taken from the Data cache 76 is transferred to the ALU 188 via the 16-bit wide Input FIFO.
- Output data is written to the 16-bit wide Output FIFO and from there to the Data cache 76 .
- all PUs e.g 178 share a single 8-bit wide VLIW Input FIFO 78 and a single 8-bit wide VLIW Output FIFO 79 .
- the low speed data bus connection allows the CPU to read and write registers in the PU e.g 178 , update microcode, as well as the common registers shared by all PUs e.g 178 in the VLIW Vector Processor 74 .
- Microcode Each PU e.g 178 contains a microcode RAM 196 to hold the program for that particular PU e.g 178 . Rather than have the microcode in ROM, the microcode is in RAM, with the CPU responsible for loading it up. For the same space on chip, this tradeoff reduces the maximum size of any one function to the size of the RAM, but allows an unlimited number of functions to be written in microcode. Functions implemented using microcode include Vark acceleration, Artcard reading, and Printing.
- the VLIW Vector Processor 74 scheme has several advantages for the case of the ACP 31 :
- the CPU loaded microcode RAM 196 for controlling each PU e.g 178 is 128 words, with each word being 96 bits wide.
- a summary of the microcode size for control of various units of the PU e.g 178 is listed in the following table:
- the total microcode RAM 196 per PU e.g 178 is 12,288 bits, or 1.5 KB exactly. Since the VLIW Vector Processor 74 consists of 4 identical PUs e.g 178 this equates to 6,144 bytes, exactly 6 KB. Some of the bits in a microcode word are directly used as control bits, while others are decoded. See the various unit descriptions that detail the interpretation of each of the bits of the microcode word.
- Each PU e.g 178 contains a 4 bit Synchronization Register 197 . It is a mask used to determine which PUs e.g 178 work together, and has one bit set for each of the corresponding PUs e.g 178 that are functioning as a single process. For example, if all of the PUs e.g 178 were functioning as a single process, each of the 4 Synchronization Register 197 s would have all 4 bits set.
- Synchronization Register 197 is used in two basic ways:
- each of the four basic input and calculation units within a PU e.g 178 's ALU 188 produces two status bits: a Zero flag and a Negative flag indicating whether the result of the operation during that cycle was 0 or negative.
- Each cycle one of those 4 status bits is chosen by microcode instructions to be output from the PU e.g 178 .
- the 4 status bits (1 per PU e.g 178 's ALU 188 ) are combined into a 4 bit Common Status Register 200 .
- each PU e.g 178 's microcode program can select one of the bits from the Common Status Register 200 , and branch to another microcode address dependant on the value of the status bit.
- Status Bit Each PU e.g 178 's ALU 188 contains a number of input and calculation units. Each unit produces 2 status bits—a negative flag and a zero flag. One of these status bits is output from the PU e.g 178 when a particular unit asserts the value on the 1-bit tri-state status bit bus. The single status bit is output from the PU e.g 178 , and then combined with the other PU e.g 178 status bits to update the Common Status Register 200 .
- the microcode for determining the output status bit takes the following form:
- FIG. 5 illustrates the ALU 188 in more detail. Inside the ALU 188 are a number of specialized processing blocks, controlled by a microcode program.
- the specialized processing blocks include:
- Each PU e.g 178 is able to exchange data via the external crossbar.
- a PU e.g 178 takes two inputs and outputs two values to the external crossbar. In this way two operands for processing can be obtained in a single cycle, but cannot be actually used in an operation until the following cycle.
- This block is illustrated in FIG. 6 and contains two registers, In 1 and In 2 that accept data from the external crossbar. The registers can be loaded each cycle, or can remain unchanged. The selection bits for choosing from among the 8 inputs are output to the external crossbar switch 183 .
- the microcode takes the following form:
- Out 208 Complementing In is Out 208 .
- the Out block is illustrated in more detail in FIG. 7 .
- Out contains two registers, Out 1 and Out 2 , both of which are output to the external crossbar each cycle for use by other PUs e.g 178 .
- the Write unit is also able to write one of Out 1 or Out 2 to one of the output FIFOs attached to the ALU 188 .
- both registers are available as inputs to Crossbar 1 213 , which therefore makes the register values available as inputs to other units within the ALU 188 .
- Each cycle either of the two registers can be updated according to microcode selection.
- the data loaded into the specified register can be one of D 0 -D 3 (selected from Crossbar 1 213 ) one of M, L, S, and R (selected from Crossbar 2 214 ), one of 2 programmable constants, or the fixed values 0 or 1.
- the microcode for Out takes the following form:
- the ALU 188 contains four specialized 32-bit registers to hold the results of the 4 main processing blocks:
- Crossbar 1 213 is illustrated in more detail in FIG. 9 .
- Crossbar 1 213 is used to select from inputs In 1 , In 2 , Out 1 , Out 2 , D 0 -D 3 .
- the control signals for Crossbar 1 213 come from the various units that use the Crossbar inputs. There is no specific microcode that is separate for Crossbar 1 213 .
- Crossbar 2 214 Crossbar 2 214 is illustrated in more detail in FIG. 10 .
- Crossbar 2 214 is used to select from the general ALU 188 registers M, L, S and R. 6 outputs are generated from Crossbar 1 213 : 2 to the Multiply/Interpolate Unit, 2 to the Adder Unit, 1 to the Registers unit and 1 to the Out unit.
- the control signals for Crossbar 2 214 come from the various units that use the Crossbar inputs. There is no specific microcode that is separate for Crossbar 2 214 .
- PUs e.g 178 share data with each other directly via the external crossbar. They also transfer data to and from external processes as well as DRAM.
- Each PU e.g 178 has 2 I/O Address Generators 189 , 190 for transferring data to and from DRAM.
- a PU e.g 178 can send data to DRAM via an I/O Address Generator's Output FIFO e.g. 186 , or accept data from DRAM via an I/O Address Generator's Input FIFO 187 . These FIFOs are local to the PU e.g 178 .
- VLIW Input FIFO 78 There is also a mechanism for transferring data to and from external processes in the form of a common VLIW Input FIFO 78 and a common VLIW Output FIFO 79 , shared between all ALUs.
- the VLIW Input and Output FIFOs are only 8 bits wide, and are used for printing, Artcard reading, transferring data to the CPU etc.
- the local Input and Output FIFOs are 16 bits wide.
- Read The Read process block 202 of FIG. 5 is responsible for updating the ALU 188 's R register 209 , which represents the external input data to a VLIW microcoded process.
- Each cycle the Read Unit is able to read from either the common VLIW Input FIFO 78 (8 bits) or one of two local Input FIFOs (16 bits). A 32-bit value is generated, and then all or part of that data is transferred to the R register 209 .
- the process can be seen in FIG. 11 .
- the microcode for Read is described in the following table. Note that the interpretations of some bit patterns are deliberately chosen to aid decoding.
- Each ALU 188 has two computational process blocks, namely an Adder/Logic process block 204 , and a Multiply/Interpolate process block 205 .
- a Barrel Shifter block to provide help to these computational blocks. Registers from the Registers block 215 can be used for temporary storage during pipelined operations.
- Barrel Shifter The Barrel Shifter process block 206 is shown in more detail in FIG. 13 and takes its input from the output of Adder/Logic or Multiply/Interpolate process blocks or the previous cycle's results from those blocks (ALU registers L and M).
- the 32 bits selected are barrel shifted an arbitrary number of bits in either direction (with sign extension as necessary), and output to the ALU 188 's S register 209 .
- the microcode for the Barrel Shift process block is described in the following table. Note that the interpretations of some bit patterns are deliberately chosen to aid decoding.
- a and B are selected from either of the two crossbars or from the 4 constant registers.
- One crossbar selection allows the results of the previous cycle's arithmetic operation to be used while the second provides access to operands previously calculated by this or another ALU 188 .
- the CPU is the only unit that has write access to the four constants (K 1 -K 4 ).
- the direct output from the adder can be used as input to the Barrel Shifter, and can thus be shifted left 2 places without needing to be latched into the L register 209 first.
- the output from the adder can also be made available to the multiply unit for a multiply-accumulate operation.
- the microcode for the Adder/Logic process block is described in the following table. The interpretations of some bit patterns are deliberately chosen to aid decoding. Microcode bit interpretation for Adder/Logic unit
- ALU 188 is a set of four 8 ⁇ 8 interpolator units that are capable of performing four individual 8 ⁇ 8 interpolates per cycle, or can be combined to perform a single 16 ⁇ 16 multiply. This gives the possibility to perform up to 4 linear interpolations, a single bi-linear interpolation, or half of a tri-linear interpolation in a single cycle.
- the result of the interpolations or multiplication is stored in the ALU 188 's M register 209 .
- a and B are treated as four 8 bit numbers A 0 thru A 3 (A 0 is the low order byte), and B 0 thru B 3 .
- Agen, Bgen, and Fgen are responsible for ordering the inputs to the Interpolate units so that they match the operation being performed. For example, to perform bilinear interpolation, each of the 4 values must be multiplied by a different factor & the result summed, while a 16 ⁇ 16 bit multiplication requires the factors to be 0.
- the microcode for the Adder/Logic process block is described in the following table. Note that the interpretations of some bit patterns are deliberately chosen to aid decoding.
- I/O Address Generators 189 , 190 The I/O Address Generators are shown in more detail in FIG. 16 .
- a VLIW process does not access DRAM directly. Access is via 2 I/O Address Generators 189 , 190 , each with its own Input and Output FIFO.
- a PU e.g 178 reads data from one of two local Input FIFOs, and writes data to one of two local Output FIFOs.
- Each I/O Address Generator is responsible for reading data from DRAM and placing it into its Input FIFO, where it can be read by the PU e.g 178 , and is responsible for taking the data from its Output FIFO (placed there by the PU e.g 178 ) and writing it to DRAM.
- the I/O Address Generator is a state machine responsible for generating addresses and control for data retrieval and storage in DRAM via the Data cache 76 . It is customizable under CPU software control, but cannot be microcoded.
- the address generator produces addresses in two broad categories:
- the I/O Address Generator has a set of registers for that are used to control address generation.
- the addressing mode also determines how the data is formatted and sent into the local Input FIFO, and how data is interpreted from the local Output FIFO.
- the CPU is able to access the registers of the I/O Address Generator via the low speed bus.
- the first set of registers define the housekeeping parameters for the I/O Generator:
- CacheGroup1 4 Defines cache group to read data from CacheGroup2 4 Defines which cache group to write data to, and in the case of the ImagePyramidLookup I/O mode, defines the cache to use for reading the Level Information Table.
- Image Iterators perform all of the addressing and access to the caches of the pixels within an image channel and read, write or read & write pixels for their client.
- Read Iterators read pixels in a specific order for their clients, and Write Iterators write pixels in a specific order for their clients.
- Clients of Iterators read pixels from the local Input FIFO or write pixels via the local Output FIFO.
- Read Image Iterators read through an image in a specific order, placing the pixel data into the local Input FIFO. Every time a client reads a pixel from the Input FIFO, the Read Iterator places the next pixel from the image (via the Data cache 76 ) into the FIFO.
- Write Image Iterators write pixels in a specific order to write out the entire image.
- Clients write pixels to the Output FIFO that is in turn read by the Write Image Iterator and written to DRAM via the Data cache 76 .
- a VLIW process will have its input tied to a Read Iterator, and output tied to a corresponding Write Iterator.
- the FIFO is the effective interface to DRAM. The actual method of carrying out the storage (apart from the logical ordering of the data) is not of concern.
- the FIFO is perceived to be effectively unlimited in length, in practice the FIFO is of limited length, and there can be delays storing and retrieving data, especially if several memory accesses are competing.
- a variety of Image Iterators exist to cope with the most common addressing requirements of image processing algorithms. In most cases there is a corresponding Write Iterator for each Read Iterator. The different Iterators are listed in the following table:
- the Access Specific registers are used as follows:
- AccessSpecific 1 Flags Flags used for reading and writing AccessSpecific 2 XBoxSize Determines the size in X of Box Read. Valid values are 3, 5, and 7.
- AccessSpecific 3 YBoxSize Determines the size in Y of Box Read. Valid values are 3, 5, and 7.
- the Flags register (AccessSpecific 1 ) contains a number of flags used to determine factors affecting the reading and writing of data.
- the Flags register has the following composition:
- Table I/O addressing modes provide this functionality, requiring the client to place the index/es into the Output FIFO.
- the I/O Address Generator then processes the index/es, looks up the data appropriately, and returns the looked-up values in the Input FIFO for subsequent processing by the VLIW client.
- 1D, 2D and 3D tables are supported, with particular modes targeted at interpolation.
- the index values are treated as fixed-point numbers, with AccessSpecific registers defining the fixed point and therefore which bits should be treated as the integer portion of the index.
- Data formats are restricted forms of the general Image Characteristics in that the PixelOffset register is ignored, the data is assumed to be contiguous within a row, and can only be 8 or 16 bits (1 or 2 bytes) per data element.
- the 4 bit Address Mode Register is used to determine the I/O type:
- the access specific registers are:
- AccessSpecific 1 Flags 8 General flags for reading and writing. See below for more information.
- FractX, FractY, and FractZ are used to generate addresses based on indexes, and interpret the format of the index in terms of significant bits and integer/fractional components.
- the various parameters are only defined as required by the number of dimensions in the table being indexed.
- a 1D table only needs FractX, a 2D table requires FractX and FractY.
- Each Fract_ value consists of the number of fractional bits in the corresponding index.
- an X index may be in the format 5:3. This would indicate 5 bits of integer, and 3 bits of fraction. FractX would therefore be set to 3.
- a simple 1D lookup could have the format 8:0, i.e. no fractional component at all. FractX would therefore be 0.
- ZOffset is only required for 3D lookup and takes on two different interpretations. It is described more fully in the 3D-table lookup section.
- the Flags register (AccessSpecific 1 ) contains a number of flags used to determine factors affecting the reading (and in one case, writing) of data.
- the Flags register has the following composition:
- Adr ⁇ Image ⁇ Start + ⁇ ShiftRight ( Y , FractY ) * Row ⁇ Offset ) + ⁇ ShiftRight ( X , FractX )
- AdrOld ⁇ Image ⁇ Start + ⁇ ShiftRight ( Y , FractY ) * Row ⁇ Offset ) + ⁇ ShiftRight ( X , FractX )
- the first cycle of address generation can overlap the insertion of the X index into the FIFO, so the effective timing can be as low as 1 cycle for address generation, and 4 cycles of return data. If the generation of indexes is 2 steps ahead of the results, then there is no effective address generation time, and the data is simply produced at the appropriate rate (2 or 4 cycles per set).
- Tri-Linear Lookup This type of lookup is useful for 3D tables of data, such as color conversion tables.
- the standard image parameters define a single XY plane of the data—i.e. each plane consists of ImageHeight rows, each row containing RowOffset bytes. In most circumstances, assuming contiguous planes, one XY plane will be ImageHeight ⁇ RowOffset bytes after another. Rather than assume or calculate this offset, the software via the CPU must provide it in the form of a 12-bit ZOffset register. In this form of lookup, given 3 fixed-point indexes in the order Z, Y, X, 8 values are returned in order from the lookup table:
- Adr ⁇ ImageStart + ⁇ ( ShiftRight ( Z , FractZ ) * ZOffset ) + ⁇ ( ShiftRight ( Y , FractY ) * RowOffset ) + ⁇ ShiftRight ⁇ ( X , FractX )
- AdrOld ⁇ ImageStart + ⁇ ( ShiftRight ( Z , FractZ ) * ZOffset ) + ⁇ ( ShiftRight ( Y , FractY ) * RowOffset ) + ⁇ ShiftRight ⁇ ( X , FractX )
- Image Pyramid Lookup During brushing, tiling, and warping it is necessary to compute the average color of a particular area in an image. Rather than calculate the value for each area given, these functions make use of an image pyramid.
- the description and construction of an image pyramid is detailed in the section on Internal Image Formats in the DRAM interface 81 chapter of this document. This section is concerned with a method of addressing given pixels in the pyramid in terms of 3 fixed-point indexes ordered: level (Z), Y, and X. Note that Image Pyramid lookup assumes 8 bit data entries, so the DataSize flag is completely ignored. After specification of Z, Y, and X, the following 8 pixels are returned via the Input FIFO:
- Some cycles have 2 shifts, they are either the same shift value (i.e. the output of the Barrel Shifter is used two times) or the shift is 1 bit, and can be hard wired.
- the following internal registers are required: ZAdr, Adr, ZInt, YInt, XInt, ZRowOffset, and ZImageStart.
- the _Int registers only need to be 8 bits maximum, while the others can be up to 24 bits. Since this access method only reads from, and does not write to image pyramids, the CacheGroup 2 is used to lookup the Image Pyramid Address Table (via ZAdr). CacheGroup 1 is used for lookups to the image pyramid itself (via Adr).
- the address table is around 22 entries (depending on original image size), each of 4 bytes. Therefore 3 or 4 cache lines should be allocated to CacheGroup 2 , while as many cache lines as possible should be allocated to CacheGroup 1 .
- the timing is 8 cycles for returning a set of data, assuming that Cycle 8 and Cycle 0 overlap in operation—i.e. the next request's Cycle 0 occurs during Cycle 8. This is acceptable since Cycle 0 has no memory access, and Cycle 8 has no specific operations.
- Generation of Coordinates Using VLIW Vector Processor 74 Some functions that are linked to Write Iterators require the X and/or Y coordinates of the current pixel being processed in part of the processing pipeline. Particular processing may also need to take place at the end of each row, or column being processed.
- the PassX and PassY flags should be sufficient to completely generate all coordinates. However, if there are special requirements, the following functions can be used.
- the calculation can be spread over a number of ALUs, for a single cycle generation, or be in a single ALU 188 for a multi-cycle generation.
- FIG. 25 When a process is processing pixels in order to write them to a Vertical Strip Write Iterator, and for some reason cannot use the PassX/PassY flags, the process as illustrated in FIG. 25 can be used to generate X, Y coordinates.
- the coordinate generator simply counts up to ImageWidth in the X ordinate, and once per ImageWidth pixels increments the Y ordinate.
- the actual process is illustrated in FIG. 26 , where the following constants are set by software:
- Reg 1 StartX (starts at 0, and is incremented by 32 once per vertical strip)
- Reg 2 X
- Reg 3 EndX (starts at 32 and is incremented by 32 to a maximum of ImageWidth) once per vertical strip)
- Reg 4 Y The requirements are summarized as follows:
- the ISI 83 is a state machine that sends control information to the Image Sensor, including frame sync pulses and pixel clock pulses in order to read the image. Pixels are read from the image sensor and placed into the VLIW Input FIFO 78 . The VLIW is then able to process and/or store the pixels. This is illustrated further in FIG. 28 .
- the ISI 83 is used in conjunction with a VLIW program that stores the sensed Photo Image in DRAM. Processing occurs in 2 steps:
- the DRAM Interface 81 is responsible for interfacing between other client portions of the ACP chip and the RAMBUS DRAM.
- each module within the DRAM Interface is an address generator.
- CMOS images are typically different in color space, resolution, and the output & input color spaces which can vary from camera to camera.
- a CCD image on a low-end camera may be a different resolution, or have different color characteristics from that used in a high-end camera.
- all internal image formats are the same format in terms of color space across all cameras.
- the three image types can vary with respect to which direction is ‘up’.
- the physical orientation of the camera causes the notion of a portrait or landscape image, and this must be maintained throughout processing. For this reason, the internal image is always oriented correctly, and rotation is performed on images obtained from the CCD and during the print operation.
- a CCD Image as stored in DRAM has consecutive pixels with a given line contiguous in memory. Each line is stored one after the other.
- the image sensor Interface 83 is responsible for taking data from the CCD and storing it in the DRAM correctly oriented.
- a CCD image with rotation 0 degrees has its first line G, R, G, R, G, R . . . and its second line as B, G, B, G, B, G . . .
- the first line will be R, G, R, G, R, G and the second line G, B, G, B, G, B . . . etc.
- Pixels are stored in an interleaved fashion since all color components are required in order to convert to the internal image format.
- the ACP 31 makes no assumptions about the CCD pixel format, since the actual CCDs for imaging may vary from Artcam to Artcam, and over time. All processing that takes place via the hardware is controlled by major microcode in an attempt to extend the usefulness of the ACP 31 .
- Vark images typically consist of a number of channels. Vark images can include, but are not limited to:
- L, a and b correspond to components of the Lab color space
- ⁇ is a matte channel (used for compositing)
- ⁇ is a bump-map channel (used during brushing, tiling and illuminating).
- the VLIW processor 74 requires images to be organized in a planar configuration. Thus a Lab image would be stored as 3 separate blocks of memory:
- pixels are stored contiguously for a given row (plus some optional padding bytes), and rows are stored one after the other.
- FIG. 31 there is illustrated an example form of storage of a logical image 100 .
- the logical image 100 is stored in a planar fashion having L 101 , a 102 and b 103 color components stored one after another.
- the logical image 100 can be stored in a compressed format having an uncompressed L component 101 and compressed A and B components 105 , 106 .
- the pixels of for line n 110 are stored together before the pixels of for line and n+1 ( 111 ). With the image being stored in contiguous memory within a single channel.
- the final Print Image after all processing is finished needs to be compressed in the chrominance channels.
- Compression of chrominance channels can be 4:1, causing an overall compression of 12:6, or 2:1.
- Clip images stored on Artcards have no explicit support by the ACP 31 .
- Software is responsible for taking any images from the current Artcard and organizing the data into a form known by the ACP. If images are stored compressed on an Artcard, software is responsible for decompressing them, as there is no specific hardware support for decompression of Artcard images.
- an image pyramid is effectively a multi-resolutionpixel-map.
- the original image 115 is a 1:1 representation.
- Low-pass filtering and sub-sampling by 2:1 in each dimension produces an image 1 ⁇ 4 the original size 116 . This process continues until the entire image is represented by a single pixel.
- An image pyramid is constructed from an original internal format image, and consumes 1 ⁇ 3 of the size taken up by the original image (1 ⁇ 4+ 1/16+ 1/64+ . . . ). For an original image of 1500 ⁇ 1000 the corresponding image pyramid is approximately 1 ⁇ 2 MB.
- An image pyramid is constructed by a specific Vark function, and is used as a parameter to other Vark functions.
- the Print Image output can comprise a CMY dithered image and is only a transient image format, used within the Print Image functionality.
- color conversion will need to take place from the internal color space to the print color space.
- color conversion can be tuned to be different for different print rolls in the camera with different ink characteristics e.g. Sepia output can be accomplished by using a specific sepia toning Artcard, or by using a sepia tone print-roll (so all Artcards will work in sepia tone).
- the ACP has no direct knowledge of specific color spaces. Instead, it relies on client color space conversion tables to convert between CCD, internal, and printer color spaces:
- the PixelsRemaining register holds the number of pixels remaining to be read on the current scanline. Note that the CPU should clear the VLIW Input FIFO 78 before initiating a Scan.
- the Status register has bit interpretations as follows:
- the Artcard Interface (AI) 87 is responsible for taking an Artcard image from the Artcard Reader 34 , and decoding it into the original data (usually a Vark script). Specifically, the AI 87 accepts signals from the Artcard scanner linear CCD 34 , detects the bit pattern printed on the card, and converts the bit pattern into the original data, correcting read errors.
- the image printed from an Artcam is simply the sensed Photo Image cleaned up by any standard image processing routines.
- the Artcard 9 is the means by which users are able to modify a photo before printing it out.
- a user is able to define complex image processing to be performed on the Photo Image.
- the Print Image is marked as invalid and a ‘Process Standard’ event is placed in the event queue.
- the event will perform the standard image processing operations on the Photo Image to produce the Print Image.
- the motor is started to eject the Artcard and a time-specific ‘Stop-Motor’ Event is added to the event queue.
- the Artcard Sensor 49 detects it notifying the ACP 72 . This results in the software inserting an ‘Artcard Inserted’ event into the event queue. When the event is processed several things occur:
- the current Artcard is marked as invalid (as opposed to ‘none’).
- the Print Image is marked as invalid.
- the Artcard motor 37 is started up to load the Artcard
- the Artcard Interface 87 is instructed to read the Artcard
- the Artcard Interface 87 accepts signals from the Artcard scanner linear CCD 34 , detects the bit pattern printed on the card, and corrects errors in the detected bit pattern, producing a valid Artcard data block in DRAM.
- the Data Card reading process has 4 phases operated while the pixel data is read from the card.
- the phases are as follows:
- Phase 1 Detect data area on Artcard Phase 2. Detect bit pattern from Artcard based on CCD pixels, and write as bytes. Phase 3. Descramble and XOR the byte-pattern Phase 4. Decode data (Reed-Solomon decode)
- the Artcard 9 must be sampled at least at double the printed resolution to satisfy Nyquist's Theorem. In practice it is better to sample at a higher rate than this.
- the pixels are sampled 230 at 3 times the resolution of a printed dot in each dimension, requiring 9 pixels to define a single dot.
- the resolution of the Artcard 9 is 1600 dpi
- the resolution of the sensor 34 is 4800 dpi
- a dot is not exactly aligned with the sampling CCD the worst and most likely case is that a dot will be sensed over a 16 pixel area (4 ⁇ 4) 231 .
- An Artcard 9 may be slightly warped due to heat damage, slightly rotated (up to, say 1 degree) due to differences in insertion into an Artcard reader, and can have slight differences in true data rate due to fluctuations in the speed of the reader motor 37 . These changes will cause columns of data from the card not to be read as corresponding columns of pixel data. As illustrated in FIG. 36 , a 1 degree rotation in the Artcard 9 can cause the pixels from a column on the card to be read as pixels across 166 columns:
- the Artcard 9 should be read in a reasonable amount of time with respect to the human operator.
- the data on the Artcard covers most of the Artcard surface, so timing concerns can be limited to the Artcard data itself. A reading time of 1.5 seconds is adequate for Artcard reading.
- the Artcard should be loaded in 1.5 seconds. Therefore all 16,000 columns of pixel data must be read from the CCD 34 in 1.5 second, i.e. 10,667 columns per second. Therefore the time available to read one column is 1/10667 seconds, or 93,747 ns. Pixel data can be written to the DRAM one column at a time, completely independently from any processes that are reading the pixel data.
- the time to write one column of data (9450/2 bytes since the reading can be 4 bits per pixel giving 2 ⁇ 4 bit pixels per byte) to DRAM is reduced by using 8 cache lines. If 4 lines were written out at one time, the 4 banks can be written to independently, and thus overlap latency reduced. Thus the 4725 bytes can be written in 11,840 ns (4725/128*320 ns). Thus the time taken to write a given column's data to DRAM uses just under 13% of the available bandwidth.
- the old stored Print Image and any expanded Photo Image becomes invalid.
- the new Artcard 9 can contain directions for creating a new image based on the currently captured Photo Image.
- the old Print Image is invalid, and the area holding expanded Photo Image data and image pyramid is invalid, leaving more than 5 MB that can be used as scratch memory during the read process.
- the 1 MB area where the Artcard raw data is to be written can also be used as scratch data during the Artcard read process as long as by the time the final Reed-Solomon decode is to occur, that 1 MB area is free again.
- the reading process described here does not make use of the extra 1 MB area (except as a final destination for the data).
- the unscrambling process requires two sets of 2 MB areas of memory since unscrambling cannot occur in place. Fortunately the 5 MB scratch area contains enough space for this process.
- FIG. 37 there is shown a flowchart 220 of the steps necessary to decode the Artcard data. These steps include reading in the Artcard 221 , decoding the read data to produce corresponding encoded XORed scrambled bitmap data 223 . Next a checkerboard XOR is applied to the data to produces encoded scrambled data 224 . This data is then unscrambled 227 to produce data 225 before this data is subjected to Reed-Solomon decoding to produce the original raw data 226 . Alternatively, unscrambling and XOR process can take place together, not requiring a separate pass of the data. Each of the above steps is discussed in further detail hereinafter. As noted previously with reference to FIG. 37 , the Artcard Interface, therefore, has 4 phases, the first 2 of which are time-critical, and must take place while pixel data is being read from the CCD:
- Phase 1 Detect data area on Artcard Phase 2. Detect bit pattern from Artcard based on CCD pixels, and write as bytes. Phase 3. Descramble and XOR the byte-pattern Phase 4. Decode data (Reed-Solomon decode)
- Phase 1 As the Artcard 9 moves past the CCD 34 the AI must detect the start of the data area by robustly detecting special targets on the Artcard to the left of the data area. If these cannot be detected, the card is marked as invalid. The detection must occur in real-time, while the Artcard 9 is moving past the CCD 34 .
- rotation invariance can be provided.
- the targets are repeated on the right side of the Artcard, but relative to the bottom right corner instead of the top corner. In this way the targets end up in the correct orientation if the card is inserted the “wrong” way.
- Phase 3 below can be altered to detect the orientation of the data, and account for the potential rotation.
- the main read process begins, placing pixel data from the CCD into an ‘Artcard data window’, detecting bits from this window, assembling the detected bits into bytes, and constructing a byte-image in DRAM. This must all be done while the Artcard is moving past the CCD.
- Phase 3 Once all the pixels have been read from the Artcard data area, the Artcard motor 37 can be stopped, and the byte image descrambled and XORed. Although not requiring real-time performance, the process should be fast enough not to annoy the human operator. The process must take 2 MB of scrambled bit-image and write the unscrambled/XORed bit-image to a separate 2 MB image.
- Phase 4 The final phase in the Artcard read process is the Reed-Solomon decoding process, where the 2 MB bit-image is decoded into a 1 MB valid Artcard data area. Again, while not requiring real-time performance it is still necessary to decode quickly with regard to the human operator. If the decode process is valid, the card is marked as valid. If the decode failed, any duplicates of data in the bit-image are attempted to be decoded, a process that is repeated until success or until there are no more duplicate images of the data in the bit image.
- the four phase process described requires 4.5 MB of DRAM. 2 MB is reserved for Phase 2 output, and 0.5 MB is reserved for scratch data during phases 1 and 2. The remaining 2 MB of space can hold over 440 columns at 4725 byes per column. In practice, the pixel data being read is a few columns ahead of the phase 1 algorithm, and in the worst case, about 180 columns behind phase 2, comfortably inside the 440 column limit
- This phase is concerned with robustly detecting the left-hand side of the data area on the Artcard 9 .
- Accurate detection of the data area is achieved by accurate detection of special targets printed on the left side of the card. These targets are especially designed to be easy to detect even if rotated up to 1 degree.
- FIG. 38 there is shown an enlargement of the left hand side of an Artcard 9 .
- the side of the card is divided into 16 bands, 239 with a target eg. 241 located at the center of each band.
- the bands are logical in that there is no line drawn to separate bands.
- FIG. 39 there is shown a single target 241 .
- the target 241 is a printed black square containing a single white dot. The idea is to detect firstly as many targets 241 as possible, and then to join at least 8 of the detected white-dot locations into a single logical straight line. If this can be done, the start of the data area 243 is a fixed distance from this logical line. If it cannot be done, then the card is rejected as invalid.
- the height of the card 9 is 3150 dots.
- a target (Target0) 241 is placed a fixed distance of 24 dots away from the top left corner 244 of the data area so that it falls well within the first of 16 equal sized regions 239 of 192 dots (576 pixels) with no target in the final pixel region of the card.
- the target 241 must be big enough to be easy to detect, yet be small enough not to go outside the height of the region if the card is rotated 1 degree.
- a suitable size for the target is a 31 ⁇ 31 dot (93 ⁇ 93 sensed pixels) black square 241 with the white dot 242 .
- the black part of the rectangle is 57 pixels high (19 dots) we can be sure that at least 9.5 black pixels will be read in the same column by the CCD (worst case is half the pixels are in one column and half in the next).
- 31 dots is 91 pixels, which at most suffers a 3 pixel shift in column, easily within the 576 pixel band.
- each target is a block of 31 ⁇ 31 dots (93 ⁇ 93 pixels) each with the composition:
- Targets are detected by reading columns of pixels, one column at a time rather than by detecting dots. It is necessary to look within a given band for a number of columns consisting of large numbers of contiguous black pixels to build up the left side of a target. Next, it is expected to see a white region in the center of further black columns, and finally the black columns to the left of the target center.
- Each logical read fills 4 cache lines via 4 sub-reads while the other 4 cache-lines are being used. This effectively uses up 13% of the available DRAM bandwidth.
- the detection mechanism FIFO for detecting the targets uses a filter 245 , run-length encoder 246 , and a FIFO 247 that requires special wiring of the top 3 elements (S 1 , S 2 , and S 3 ) for random access.
- the columns of input pixels are processed one at a time until either all the targets are found, or until a specified number of columns have been processed.
- the pixels are read from DRAM, passed through a filter 245 to detect a 0 or 1, and then run length encoded 246 .
- the bit value and the number of contiguous bits of the same value are placed in FIFO 247 .
- Each entry of the FIFO 249 is in 8 bits, 7 bits 250 to hold the run-length, and 1 bit 249 to hold the value of the bit detected.
- the run-length encoder 246 only encodes contiguous pixels within a 576 pixel (192 dot) region.
- the top 3 elements in the FIFO 247 can be accessed 252 in any random order.
- the run lengths (in pixels) of these entries are filtered into 3 values: short, medium, and long in accordance with the following table:
- Case 1 white long
- S2 black long the left of or to the right of the white center dot.
- S3 white medium/long Case 2
- S1 white long
- S2 black medium Case 1s
- TargetDetected 1 bit BlackDetectCount 4 bits WhiteDetectCount 3 bits
- TargetColumnStartPixel 15 bits TargetColumn ordinate 16 bits (15:1)
- TargetRow ordinate 16 bits 15:1) TOTAL 7 bytes (rounded to 8 bytes for easy addressing)
- S 2 StartPixel 254 When beginning to process a given pixel column, the register value S 2 StartPixel 254 is reset to 0. As entries in the FIFO advance from S 2 to S 1 , they are also added 255 to the existing S 2 StartPixel value, giving the exact pixel position of the run currently defined in S 2 . Looking at each of the 3 cases of interest in the FIFO, S 2 StartPixel can be used to determine the start of the black area of a target (Cases 1 and 2), and also the start of the white dot in the center of the target (Case 3).
- An algorithm for processing columns can be as follows:
- the targets After the targets have been detected, they should be processed. All the targets may be available or merely some of them. Some targets may also have been erroneously detected.
- This phase of processing is to determine a mathematical line that passes through the center of as many targets as possible. The more targets that the line passes through, the more confident the target position has been found. The limit is set to be 8 targets. If a line passes through at least 8 targets, then it is taken to be the right one.
- the resulting algorithm takes 180 divides to calculate ⁇ row and ⁇ column, 180 multiply/adds to calculate target 0 position, and then 2880 adds/comparisons.
- Step 0 Locate the Data Area
- TargetA From Target 0 ( 241 of FIG. 38 ) it is a predetermined fixed distance in rows and columns to the top left border 244 of the data area, and then a further 1 dot column to the vertical clock marks 276 . So we use TargetA, ⁇ row and ⁇ column found in the previous stage ( ⁇ row and ⁇ column refer to distances between targets) to calculate the centroid or expected location for Target0 as described previously.
- Step 1 Write out the Initial Centroid Deltas ( ⁇ ) and Bit History
- bit history is actually an expected bit history since it is known that to the left of the clock mark column 276 is a border column 277 , and before that, a white area.
- the bit history therefore is 011, 010, 011, 010 etc.
- Step 2 Update the Centroids Based on Actual Pixels Read.
- the bit history is set up in Step 1 according to the expected clock marks and data border.
- the actual centroids for each dot row can now be more accurately set (they were initially 0) by comparing the expected data against the actual pixel values.
- the centroid updating mechanism is achieved by simply performing step 3 of Phase 2.
- Phase 2 Detect Bit Pattern from Artcard Based on Pixels Read, and Write as Bytes.
- Step 0 Advance to the next dot column
- Step 1 Detect the top and bottom of an Artcard dot column (check clock marks)
- Step 2 Process the dot column, detecting bits and storing them appropriately
- the worst case is that we cannot process the first column until at least 165 columns have been read into DRAM. Phase 2 would therefore finish the same amount of time after the read process had terminated.
- Step 0 Advance to the Next Dot Column
- the column number is recorded in a register called CurrentColumn. Every time the sensor advances to the next dot column it is necessary to increment the CurrentColumn register. The first time it is incremented, it is incremented from ⁇ 1 to 0 (see Step 0 Phase 1).
- the CurrentColumn register determines when to terminate the read process (when reaching maxColumns), and also is used to advance the DataOut Pointer to the next column of byte information once all 8 bits have been written to the byte (once every 8 dot columns). The lower 3 bits determine what bit we're up to within the current byte. It will be the same bit being written for the whole column.
- Step 1 Detect the Top and Bottom of an Artcard Dot Column.
- dotColumnTop points to the clock mark column 276 .
- step 276 The first task will be to add the ⁇ row and ⁇ column values to dotColumnTop to arrive at the first data dot of the column.
- Step 2 Process an Artcard's Dot Column
- the pixels around the centroid need to be examined to detect the status of the dot and hence the value of the bit.
- a dot covers a 4 ⁇ 4 pixel area.
- the number of pixels required to detect the status of the dot and hence the bit value is much less than this. We only require access to 3 columns of pixel columns at any one time.
- centroids will shift 1 column every 57 pixel rows, but since a dot is 3 pixels in diameter, a given column will be valid for 171 pixel rows (3*57). As a byte contains 2 pixels, the number of bytes valid in each buffered read (4 cache lines) will be a worst case of 86 (out of 128 read).
- a dot 290 has a radius of about 1.5 pixels. Therefore the pixel 291 that holds the centroid, regardless of the actual position of the centroid within that pixel, should be 100% of the dot's value. If the centroid is exactly in the center of the pixel 291 , then the pixels above 292 & below 293 the centroid's pixel, as well as the pixels to the left 294 & right 295 of the centroid's pixel will contain a majority of the dot's value. The further a centroid is away from the exact center of the pixel 295 , the more likely that more than the center pixel will have 100% coverage by the dot.
- FIG. 42 only shows centroids differing to the left and below the center, the same relationship obviously holds for centroids above and to the right of center. center.
- the centroid is exactly in the center of the middle pixel 295 .
- the center pixel 295 is completely covered by the dot, and the pixels above, below, left, and right are also well covered by the dot.
- the centroid is to the left of the center of the middle pixel 291 .
- the center pixel is still completely covered by the dot, and the pixel 294 to the left of the center is now completely covered by the dot.
- the pixels above 292 and below 293 are still well covered.
- the centroid is below the center of the middle pixel 291 .
- the center pixel 291 is still completely covered by the dot 291 , and the pixel below center is now completely covered by the dot
- the pixels left 294 and right 295 of center are still well covered.
- the centroid is left and below the center of the middle pixel.
- the center pixel 291 is still completely covered by the dot, and both the pixel to the left of center 294 and the pixel below center 293 are completely covered by the dot.
- the algorithm for updating the centroid uses the distance of the centroid from the center of the middle pixel 291 in order to select 3 representative pixels and thus decide the value of the dot:
- Pixel 1 the pixel containing the centroid
- Pixel 2 the pixel to the left of Pixel 1 if the centroid's X coordinate (column value) is ⁇ 1 ⁇ 2, otherwise the pixel to the right of Pixel 1 .
- Pixel 3 the pixel above pixel 1 if the centroid's Y coordinate (row value) is ⁇ 1 ⁇ 2, otherwise the pixel below Pixel 1 .
- each pixel is output to a pre-calculated lookup table 301 .
- the 3 pixels are fed into a 12-bit lookup table, which outputs a single bit indicating the value of the dot—on or off.
- the lookup table 301 is constructed at chip definition time, and can be compiled into about 500 gates.
- the lookup table can be a simple threshold table, with the exception that the center pixel (Pixel 1 ) is weighted more heavily.
- Step 3 Update the Centroid ⁇ s for each Row in the Column
- the idea of the ⁇ s processing is to use the previous bit history to generate a ‘perfect’ dot at the expected centroid location for each row in a current column.
- the actual pixels (from the CCD) are compared with the expected ‘perfect’ pixels. If the two match, then the actual centroid location must be exactly in the expected position, so the centroid ⁇ s must be valid and not need updating. Otherwise a process of changing the centroid ⁇ s needs to occur in order to best fit the expected centroid location to the actual data.
- the new centroid ⁇ s will be used for processing the dot in the next column.
- Step 2 of Phase 1 there is enough bandwidth remaining to allow it to allow reuse of DRAM buffers
- centroid ⁇ are processed as ⁇ column ⁇ row respectively to reduce complexity.
- centroid updating requires more than simply the information about a given single dot.
- FIG. 44 shows a single dot 310 from the previous column with a given centroid 311 .
- the 20 bit bit-pattern represents the expected ⁇ values for each of the 5 pixels across the horizontal dimension.
- the first nibble would represent the rightmost pixel of the leftmost dot.
- the next 3 nibbles represent the 3 pixels across the center of the dot 310 from the previous column, and the last nibble would be the leftmost pixel 317 of the rightmost dot (from the current column).
- the pixels to the left and right of the center dot are either 0 or D depending on whether the bit was a 0 or 1 respectively.
- the center three pixels are either 000 or DFD depending on whether the bit was a 0 or 1 respectively. These values are based on the physical area taken by a dot for a given pixel. Depending on the distance of the centroid from the exact center of the pixel, we would expect data shifted slightly, which really only affects the pixels either side of the center pixel. Since there are 16 possibilities, it is possible to divide the distance from the center by 16 and use that amount to shift the expected pixels.
- the 20 bit 5 pixel expected value can be compared against the actual pixels read. This can proceed by subtracting the expected pixels from the actual pixels read on a pixel by pixel basis, and finally adding the differences together to obtain a distance from the expected ⁇ values.
- FIG. 45 illustrates one form of implementation of the above algorithm which includes a look up table 320 which receives the bit history 322 and central fractional component 323 and outputs 324 the corresponding 20 bit number which is subtracted 321 from the central pixel input 326 to produce a pixel difference 327 .
- the 2 MB bit-image DRAM area is read from and written to during Phase 2 processing.
- the 2 MB pixel-data DRAM area is read.
- the 0.5 MB scratch DRAM area is used for storing row data, namely:
- the next step in decoding is to unscramble and XOR the raw data.
- the 2 MB byte image as taken from the Artcard, is in a scrambled XORed form. It must be unscrambled and re-XORed to retrieve the bit image necessary for the Reed Solomon decoder in phase 4.
- the unscrambling process 330 takes a 2 MB scrambled byte image 331 and writes an unscrambled 2 MB image 332 .
- the process cannot reasonably be performed in-place, so 2 sets of 2 MB areas are utilised.
- the scrambled data 331 is in symbol block order arranged in a 16 ⁇ 16 array, with symbol block 0 ( 334 ) having all the symbol 0 's from all the code words in random order.
- Symbol block 1 has all the symbol 1 's from all the code words in random order etc. Since there are only 255 symbols, the 256 th symbol block is currently unused.
- a linear feedback shift register is used to determine the relationship between the position within a symbol block eg. 334 and what code word eg. 355 it came from. This works as long as the same seed is used when generating the original Artcard images.
- the XOR of bytes from alternative source lines with 0 ⁇ AA and 0x55 respectively is effectively free (in time) since the bottleneck of time is waiting for the DRAM to be ready to read/write to non-sequential addresses.
- This phase is a loop, iterating through copies of the data in the bit image, passing them to the Reed-Solomon decode module until either a successful decode is made or until there are no more copies to attempt decode from.
- the Reed-Solomon decoder used can be the VLIW processor, suitably programmed or, alternatively, a separate hardwired core such as LSI Logic's L64712.
- the overall time taken to read the Artcard 9 and decode it is therefore approximately 2.15 seconds.
- the apparent delay to the user is actually only 0.65 seconds (the total of Phases 3 and 4), since the Artcard stops moving after 1.5 seconds.
- the Artvark script must be interpreted, Rather than run the script immediately, the script is only run upon the pressing of the ‘Print’ button 13 ( FIG. 1 ).
- the taken to run the script will vary depending on the complexity of the script, and must be taken into account for the perceived delay between pressing the print button and the actual print button and the actual printing.
- the Alternative Artcards can be used in both embedded and PC type applications, providing a user-friendly interface to large amounts of data or configuration information.
- Alternative Artcard technology can also be independent of the printing resolution.
- the notion of storing data as dots on a card simply means that if it is possible put more dots in the same space (by increasing resolution), then those dots can represent more data.
- the preferred embodiment assumes utilisation of 1600 dpi printing on a 86 mm ⁇ 55 mm card as the sample Artcard, but it is simple to determine alternative equivalent layouts and data sizes for other card sizes and/or other print resolutions. Regardless of the print resolution, the reading technique remains the same.
- alternative Artcards are capable of storing up to 1 Megabyte of data at print resolutions up to 1600 dpi.
- Alternative Artcards can store megabytes of data at print resolutions greater than 1600 dpi.
- the following two tables summarize the effective alternative Artcard data storage capacity for certain print resolutions:
- the dots on the data side of an alternative Artcard can be monochrome. For example, black dots printed on a white background at a predetermined desired print resolution. Consequently a “black dot” is physically different from a “white dot”.
- FIG. 47 illustrates various examples of magnified views of black and white dots.
- the monochromatic scheme of black dots on a white background is preferably chosen to maximize dynamic range in blurry reading environments.
- the black dots are printed at a particular pitch (eg. 1600 dpi)
- the dots themselves are slightly larger in order to create continuous lines when dots are printed contiguously.
- the dots are not as merged as they may be in reality as a result of bleeding. There would be more smoothing out of the black indentations.
- the alternative Artcard system described in the preferred embodiment allows for flexibly different dot sizes, exact dot sizes and ink/printing behaviour for a particular printing technology should be studied in more detail in order to obtain best results.
- the term dot refers to a physical printed dot (ink, thermal, electro-photographic, silver-halide etc) on an alternative Artcard.
- the dots must be sampled at least double the printed resolution to satisfy Nyquist's Theorem.
- the term pixel refers to a sample value from an alternative Artcard reader device. For example, when 1600 dpi dots are scanned at 4800 dpi there are 3 pixels in each dimension of a dot, or 9 pixels per dot. The sampling process will be further explained hereinafter.
- each alternative Artcard consists of an “active” region 1102 surrounded by a white border region 1103 .
- the white border 1103 contains no data information, but can be used by an alternative Artcard reader to calibrate white levels.
- the active region is an array of data blocks eg. 1104 , with each data block separated from the next by a gap of 8 white dots eg. 1106 .
- the number of data blocks on an alternative Artcard will vary.
- the array can be 8 ⁇ 8.
- Each data block 1104 has dimensions of 627 ⁇ 394 dots. With an inter-block gap 1106 of 8 white dots, the active area of an alternative Artcard is therefore 5072 ⁇ 3208 dots (8.1 mm ⁇ 5.1 mm at 1600 dpi).
- FIG. 49 there is shown a single data block 1107 .
- the active region of an alternative Artcard consists of an array of identically structured data blocks 1107 .
- Each of the data blocks has the following structure: a data region 1108 surrounded by clock-marks 1109 , borders 1110 , and targets 1111 .
- the data region holds the encoded data proper, while the clock-marks, borders and targets are present specifically to help locate the data region and ensure accurate recovery of data from within the region.
- Each data block 1107 has dimensions of 627 ⁇ 394 dots. Of this, the central area of 595 ⁇ 384 dots is the data region 1108 . The surrounding dots are used to hold the clock-marks, borders, and targets.
- FIG. 50 illustrates a data block with FIG. 51 and FIG. 52 illustrating magnified edge portions thereof.
- the top 5 dot high region consists of an outer black dot border line 1112 (which stretches the length of the data block), a white dot separator line 1113 (to ensure the border line is independent), and a 3 dot high set of clock marks 1114 .
- the clock marks alternate between a white and black row, starting with a black clock mark at the 8th column from either end of the data block. There is no separation between clockmark dots and dots in the data region.
- the clock marks are symmetric in that if the alternative Artcard is inserted rotated 180 degrees, the same relative border/clockmark regions will be encountered.
- the border 1112 , 1113 is intended for use by an alternative Artcard reader to keep vertical tracking as data is read from the data region.
- the clockmarks 1114 are intended to keep horizontal tracking as data is read from the data region.
- the separation between the border and clockmarks by a white line of dots is desirable as a result of blurring occurring during reading.
- the border thus becomes a black line with white on either side, making for a good frequency response on reading.
- the clockmarks alternating between white and black have a similar result, except in the horizontal rather than the vertical dimension.
- Any alternative Artcard reader must locate the clockmarks and border if it intends to use them for tracking.
- targets which are designed to point the way to the clockmarks, border and data.
- each target region 1116 , 1117 there are two 15-dot wide target regions 1116 , 1117 in each data block: one to the left and one to the right of the data region.
- the target regions are separated from the data region by a single column of dots used for orientation.
- the purpose of the Target Regions 1116 , 1117 is to point the way to the clockmarks, border and data regions.
- Each Target Region contains 6 targets eg. 1118 that are designed to be easy to find by an alternative Artcard reader.
- FIG. 53 there is shown the structure of a single target 1120 .
- Each target 1120 is a 15 ⁇ 15 dot black square with a center structure 1121 and a run-length encoded target number 1122 .
- the center structure 1121 is a simple white cross, and the target number component 1122 is simply two columns of white dots, each being 2 dots long for each part of the target number.
- target number 1 's target id 1122 is 2 dots long
- target number 2 's target id 1122 is 4 dots wide etc.
- the targets are arranged so that they are rotation invariant with regards to card insertion. This means that the left targets and right targets are the same, except rotated 180 degrees.
- the targets are arranged such that targets 1 to 6 are located top to bottom respectively.
- the targets are arranged so that target numbers 1 to 6 are located bottom to top. The target number id is always in the half closest to the data region.
- the magnified view portions of FIG. 54 reveals clearly the how the right targets are simply the same as the left targets, except rotated 180 degrees.
- the targets 1124 , 1125 are specifically placed within the Target Region with centers 55 dots apart.
- the first black clockmark in both regions begins directly in line with the target center (the 8th dot position is the center of the 15 dot-wide target).
- FIG. 55 illustrates the distances between target centers as well as the distance from Target 1 ( 1124 ) to the first dot of the first black clockmark ( 1126 ) in the upper border/clockmark region. Since there is a distance of 55 dots to the clockmarks from both the upper and lower targets, and both sides of the alternative Artcard are symmetrical (rotated through 180 degrees), the card can be read left-to-right or right-to-left Regardless of reading direction, the orientation does need to be determined in order to extract the data from the data region.
- Orientation Columns 1127 , 1128 there are two 1 dot wide Orientation Columns 1127 , 1128 in each data block: one directly to the left and one directly to the right of the data region.
- the Orientation Columns are present to give orientation information to an alternative Artcard reader: On the left side of the data region (to the right of the Left Targets) is a single column of white dots 1127 . On the right side of the data region (to the left of the Right Targets) is a single column of black dots 1128 . Since the targets are rotation invariant, these two columns of dots allow an alternative Artcard reader to determine the orientation of the alternative Artcard—has the card been inserted the right way, or back to front. From the alternative Artcard reader's point of view, assuming no degradation to the dots, there are two possibilities:
- the data region of a data block consists of 595 columns of 384 dots each, for a total of 228,480 dots. These dots must be interpreted and decoded to yield the original data. Each dot represents a single bit, so the 228,480 dots represent 228,480 bits, or 28,560 bytes. The interpretation of each dot can be as follows:
- Reed-Solomon encoding is preferably chosen for its ability to deal with burst errors and effectively detect and correct errors using a minimum of redundancy.
- Reed Solomon encoding is adequately discussed in the standard texts such as Wicker, S., and Bhargava, V., 1994, Reed-Solomon Codes and their Applications, IEEE Press. Rorabaugh, C, 1996, Error Coding Cookbook, McGraw-Hill. Lyppens, H., 1997, Reed-Solomon Error Correction, Dr. Dobb's Journal, January 1997 (Volume 22, Issue 1).
- Reed-Solomon encoding can be used, including different symbol sizes and different levels of redundancy.
- the following encoding parameters are used:
- n 255 bytes (2 8 ⁇ 1 symbols).
- 2t symbols in the final block size must be taken up with redundancy symbols.
- the practical result is that 127 bytes of original data are encoded to become a 255-byte block of Reed-Solomon encoded data.
- the encoded 255-byte blocks are stored on the alternative Artcard and later decoded back to the original 127 bytes again by the alternative Artcard reader.
- the 384 dots in a single column of a data block's data region can hold 48 bytes (384/8). 595 of these columns can hold 28,560 bytes. This amounts to 112 Reed-Solomon blocks (each block having 255 bytes).
- the 64 data blocks of a complete alternative Artcard can hold a total of 7168 Reed-Solomon blocks (1,827,840 bytes, at 255 bytes per Reed-Solomon block).
- FIG. 58 illustrates the overall form of encoding utilised.
- Each of the 2 Control blocks 1132 , 1133 contain the same encoded information required for decoding the remaining 7,166 Reed-Solomon blocks:
- Each control block is then Reed-Solomon encoded, turning the 127 bytes of control information into 255 bytes of Reed-Solomon encoded data.
- the Control Block is stored twice to give greater chance of it surviving.
- the repetition of the data within the Control Block has particular significance when using Reed-Solomon encoding.
- the first 127 bytes of data are exactly the original data, and can be looked at in an attempt to recover the original message if the Control Block fails decoding (more than 64 symbols are corrupted).
- the Control Block fails decoding it is possible to examine sets of 3 bytes in an effort to determine the most likely values for the 2 decoding parameters. It is not guaranteed to be recoverable, but it has a better chance through redundancy.
- the last 159 bytes of the Control Block are destroyed, and the first 96 bytes are perfectly ok. Looking at the first 96 bytes will show a repeating set of numbers. These numbers can be sensibly used to decode the remainder of the message in the remaining 7,166 Reed-Solomon blocks.
- the alternative Artcard would consist of 7,168 Reed-Solomon blocks.
- the first 2 blocks would be Control Blocks
- the next 79 would be the encoded data
- the next 79 would be a duplicate of the encoded data
- the next 79 would be another duplicate of the encoded data, and so on.
- the remaining 56 Reed-Solomon blocks would be another duplicate of the first 56 blocks from the 79 blocks of encoded data (the final 23 blocks of encoded data would not be stored again as there is not enough room on the alternative Artcard).
- a hex representation of the 127 bytes in each Control Block data before being Reed-Solomon encoded would be as illustrated in FIG. 59 .
- a maximum 1,827,840 bytes of data can be stored on the alternative Artcard (2 Control Blocks and 7,166 information blocks, totalling 7,168 Reed-Solomon encoded blocks).
- the data is not directly stored onto the alternative Artcard at this stage however, or all 255 bytes of one Reed-Solomon block will be physically together on the card. Any dirt, grime, or stain that causes physical damage to the card has the potential of damaging more than 64 bytes in a single Reed-Solomon block, which would make that block unrecoverable. If there are no duplicates of that Reed-Solomon block, then the entire alternative Artcard cannot be decoded.
- the solution is to take advantage of the fact that there are a large number of bytes on the alternative Artcard, and that the alternative Artcard has a reasonable physical size.
- the data can therefore be scrambled to ensure that symbols from a single Reed-Solomon block are not in close proximity to one another.
- pathological cases of card degradation can cause Reed-Solomon blocks to be unrecoverable, but on average, the scrambling of data makes the card much more robust.
- the scrambling scheme chosen is simple and is illustrated schematically in FIG. 14 . All the Byte 0 s from each Reed-Solomon block are placed together 1136 , then all the Byte 1 s etc.
- Each data block on the alternative Artcard can store 28,560 bytes. Consequently there are approximately 4 bytes from each Reed-Solomon block in each of the 64 data blocks on the alternative Artcard.
- the data is simply written out to the alternative Artcard data blocks so that the first data block contains the first 28,560 bytes of the scrambled data, the second data block contains the next 28,560 bytes etc.
- the data is written out column-wise left to right.
- the left-most column within a data block contains the first 48 bytes of the 28,560 bytes of scrambled data
- the last column contains the last 48 bytes of the 28,560 bytes of scrambled data.
- bytes are written out top to bottom, one bit at a time, starting from bit 7 and finishing with bit 0 . If the bit is set (1), a black dot is placed on the alternative Artcard, if the bit is clear (0), no dot is placed, leaving it the white background color of the card.
- a set of 1,827,840 bytes of data can be created by scrambling 7,168 Reed-Solomon encoded blocks to be stored onto an alternative Artcard.
- the first 28,560 bytes of data are written to the first data block.
- the first 48 bytes of the first 28,560 bytes are written to the first column of the data block, the next 48 bytes to the next column and so on.
- the first two bytes of the 28,560 bytes are hex D3 5F. Those first two bytes will be stored in column 0 of the data block.
- Bit 7 of byte 0 will be stored first, then bit 6 and so on.
- Bit 7 of byte 1 will be stored through to bit 0 of byte 1 . Since each “1” is stored as a black dot, and each “0” as a white dot, these two bytes will be represented on the alternative Artcard as the following set of dots:
- This section deals with extracting the original data from an alternative Artcard in an accurate and robust manner. Specifically, it assumes the alternative Artcard format as described in the previous chapter, and describes a method of extracting the original pre-encoded data from the alternative Artcard.
- an alternative Artcard is to store data for use in different applications.
- a user inserts an alternative Artcard into an alternative Artcard reader, and expects the data to be loaded in a “reasonable time”.
- a motor transport moves the alternative Artcard into an alternative Artcard reader. This is not perceived as a problematic delay, since the alternative Artcard is in motion. Any time after the alternative Artcard has stopped is perceived as a delay, and should be minimized in any alternative Artcard reading scheme. Ideally, the entire alternative Artcard would be read while in motion, and thus there would be no perceived delay after the card had stopped moving.
- a reasonable time for an alternative Artcard to be physically loaded is defined to be 1.5 seconds. There should be a minimization of time for additional decoding after the alternative Artcard has stopped moving. Since the Active region of an alternative Artcard covers most of the alternative Artcard surface we can limit our timing concerns to that region.
- the dots on an alternative Artcard must be sampled by a CCD reader or the like at least at double the printed resolution to satisfy Nyquist's Theorem. In practice it is better to sample at a higher rate than this.
- dots are preferably sampled at 3 times their printed resolution in each dimension, requiring 9 pixels to define a single dot. If the resolution of the alternative Artcard dots is 1600 dpi, the alternative Artcard reader's image sensor must scan pixels at 4800 dpi. Of course if a dot is not exactly aligned with the sampling sensor, the worst and most likely case as illustrated in FIG. 62 , is that a dot will be sensed over a 4 ⁇ 4 pixel area.
- Each sampled pixel is 1 byte (8 bits). The lowest 2 bits of each pixel can contain significant noise. Decoding algorithms must therefore be noise tolerant.
- this angle of rotation is a maximum of 1 degree. There can be some slight aberrations in angle due to jitter and motor rumble during the reading process, but these are assumed to essentially stay within the 1-degree limit.
- Region Height 0° rotation 1° rotation Active region 3208 dots 3 pixel columns 168 pixel columns
- Data block 394 dots 3 pixel columns 21 pixel columns
- the length of the CCD itself must accommodate:
- the actual amount of memory required for reading and decoding an alternative Artcard is twice the amount of space required to hold the encoded data, together with a small amount of scratch space (1-2 KB). For the 1600 dpi alternative Artcard, this implies a 4 MB memory requirement.
- the actual usage of the memory is detailed in the following algorithm description.
- a standard Rambus Direct RDRAM architecture is assumed, as defined in Rambus Inc, October 1997, Direct Rambus Technology Disclosure , with a peak data transfer rate of 1.6 GB/sec. Assuming 75% efficiency (easily achieved), we have an average of 1.2 GB/sec data transfer rate. The average time to access a block of 16 bytes is therefore 12 ns.
- Alternative Artcards Physically damaged alternative Artcards can be inserted into a reader.
- Alternative Artcards may be scratched, or be stained with grime or dirt.
- a alternative Artcard reader can't assume to read everything perfectly. The effect of dirty data is made worse by blurring, as the dirty data affects the surrounding clean dots.
- FIG. 64 is a schematic illustration of the overlapping of sensed data.
- Black and white dots were chosen for alternative Artcards to give the best dynamic range in blurry reading environments. Blurring can cause problems in attempting to determine whether a given dot is black or white.
- FIG. 65 shows the distribution of resultant center dot values for black and white dots.
- the diagram is intended to be a representative blurring.
- the curve 1140 from 0 to around 180 shows the range of black dots.
- the curve 1141 from 75 to 250 shows the range of white dots.
- a pixel value at the center point of intersection is ambiguous —the dot is equally likely to be a black or a white.
- FIG. 65 is a graph of number predicted number of alternative Artcard Reed-Solomon blocks that cannot be recovered given a particular symbol error rate. Notice how the Reed-Solomon decoding scheme performs well and then substantially degrades. If there is no Reed-Solomon block duplication, then only 1 block needs to be in error for the data to be unrecoverable. Of course, with block duplication the chance of an alternative Artcard decoding increases.
- FIG. 66 only illustrates the symbol (byte) errors corresponding to the number of Reed-Solomon blocks in error.
- a motor transport ideally carries the alternative Artcard past a monochrome linear CCD image sensor.
- the card is sampled in each dimension at three times the printed resolution.
- Alternative Artcard reading hardware and software compensate for rotation up to 1 degree, jitter and vibration due to the motor transport, and blurring due to variations in alternative Artcard to CCD distance.
- a digital bit image of the data is extracted from the sampled image by a complex method described here.
- Reed-Solomon decoding corrects arbitrarily distributed data corruption of up to 25% of the raw data on the alternative Artcard. Approximately 1 MB of corrected data is extracted from a 1600 dpi card.
- the decoding process requires the following steps:
- the rotation and unscrambling of the bit image cannot occur until the whole bit image has been extracted. It is therefore necessary to assign a memory region to hold the extracted bit image.
- the bit image fits easily within 2 MB, leaving 2 MB for use in the extraction process.
- the time taken for Phase 1 is 1.5 seconds, since this is the time taken for the alternative Artcard to travel past the CCD and physically load.
- Phase 2 has no real-time requirements, in that the alternative Artcard has stopped moving, and we are only concerned with the user's perception of elapsed time. Phase 2 therefore involves the remaining tasks of decoding an alternative Artcard:
- the input to Phase 2 is the 2 MB bit image buffer. Unscrambling and rotating cannot be performed in situ, so a second 2 MB buffer is required. The 2 MB buffer used to hold scanned pixels in Phase 1 is no longer required and can be used to store the rotated unscrambled data.
- the Reed-Solomon decoding task takes the unscrambled bit image and decodes it to 910,082 bytes.
- the decoding can be performed in situ, or to a specified location elsewhere. The decoding process does not require any additional memory buffers.
- the 4 MB memory is therefore used as follows:
- Phase 2 The time taken for Phase 2 is hardware dependent and is bound by the time taken for Reed-Solomon decoding. Using a dedicated core such as LSI Logic's L64712, or an equivalent CPU/DSP combination, it is estimated that Phase 2 would take 0.32 seconds.
- Phase 1 can be divided into 2 asynchronous process streams.
- the first of these streams is simply the real-time reader of alternative Artcard pixels from the CCD, writing the pixels to DRAM.
- the second stream involves looking at the pixels, and extracting the bits.
- the second process stream is itself divided into 2 processes.
- the first process is a global process, concerned with locating the start of the alternative Artcard.
- the second process is the bit image extraction proper.
- FIG. 69 illustrates the data flow from a data/process perspective.
- the CCD scans the alternative Artcard at 4800 dpi, and generates 11,000 1-byte pixel samples per column. This process simply takes the data from the CCD and writes it to DRAM, completely independently of any other process that is reading the pixel data from DRAM.
- FIG. 70 illustrates the steps involved.
- the pixels are written contiguously to a 2 MB buffer that can hold 190 full columns of pixels.
- the buffer always holds the 190 columns most recently read. Consequently, any process that wants to read the pixel data (such as Processes 2 and 3) must firstly know where to look for a given column, and secondly, be fast enough to ensure that the data required is actually in the buffer.
- Process 1 makes the current scanline number (CurrentScanLine) available to other processes so they can ensure they are not attempting to access pixels from scanlines that have not been read yet
- Process 1 therefore uses just under 9% of the available DRAM bandwidth (8256/92296).
- This process is concerned with locating the Active Area on a scanned alternative Artcard.
- the input to this stage is the pixel data from DRAM (placed there by Process 1).
- the output is a set of bounds for the first 8 data blocks on the alternative Artcard, required as input to Process 3.
- FIG. 71 A high level overview of the process can be seen in FIG. 71 .
- An alternative Artcard can have vertical slop of 1 mm upon insertion. With a rotation of 1 degree there is further vertical slop of 1.5 mm (86 sin 1°). Consequently there is a total vertical slop of 2.5 mm. At 1600 dpi, this equates to a slop of approximately 160 dots. Since a single data block is only 394 dots high, the slop is just under half a data block. To get a better estimate of where the data blocks are located the alternative Artcard itself needs to be detected.
- Process 2 therefore consists of two parts:
- the scanned pixels outside the alternative Artcard area are black (the surface can be black plastic or some other non-reflective surface).
- the border of the alternative Artcard area is white. If we process the pixel columns one by one, and filter the pixels to either black or white, the transition point from black to white will mark the start of the alternative Artcard. The highest level process is as follows:
- the ProcessColumn function is simple. Pixels from two areas of the scanned column are passed through a threshold filter to determine if they are black or white. It is possible to then wait for a certain number of white pixels and announce the start of the alternative Artcard once the given number has been detected.
- the logic of processing a pixel column is shown in the following pseudocode. 0 is returned if the alternative Artcard has not been detected during the column. Otherwise the pixel number of the detected location is returned.
- the second step of Process 2 determines which was detected and sets the data block bounds for Phase 3 appropriately.
- each data block has a StartPixel and an EndPixel to determine where to look for targets in order to locate the data block's data region.
- the pixel value is in the upper half of the card, it is possible to simply use that as the first StartPixel bounds. If the pixel value is in the lower half of the card, it is possible to move back so that the pixel value is the last segment's EndPixel bounds. We step forwards or backwards by the alternative Artcard data size, and thus set up each segment with appropriate bounds. We are now ready to begin extracting data from the alternative Artcard.
- the MaxPixel value is defined in Process 3, and the SetBounds function simply sets StartPixel and EndPixel clipping with respect to 0 and MaxPixel.
- This process is concerned with extracting the bit data from the CCD pixel data.
- the process essentially creates a bit-image from the pixel data, based on scratch information created by Process 2, and maintained by Process 3.
- a high level overview of the process can be seen in FIG. 72 .
- Process 3 Rather than simply read an alternative Artcard's pixel column and determine what pixels belong to what data block, Process 3 works the other way around. It knows where to look for the pixels of a given data block. It does this by dividing a logical alternative Artcard into 8 segments, each containing 8 data blocks as shown in FIG. 73 .
- the segments as shown match the logical alternative Artcard. Physically, the alternative Artcard is likely to be rotated by some amount The segments remain locked to the logical alternative Artcard structure, and hence are rotation-independent.
- a given segment can have one of two states:
- the process is complete when all 64 data blocks have been extracted, 8 from each region.
- Each data block consists of 595 columns of data, each with 48 bytes.
- the 2 orientation columns for the data block are each extracted at 48 bytes each, giving a total of 28,656 bytes extracted per data block.
- the nth data block for a given segment is stored at the location:
- Each of the 8 segments has an associated data structure.
- the data structure defining each segment is stored in the scratch data area.
- the structure can be as set out in the following table:
- DataName Comment CurrentState Defines the current state of the segment.
- Can be one of: LookingForTargets ExtractingBitImage Initial value is LookingForTargets Used during LookingForTargets: StartPixel Upper pixel bound of segment. Initially set by Process 2. EndPixel Lower pixel bound of segment. Initially set by Process 2 MaxPixel The maximum pixel number for any scanline. It is set to the same value for each segment: 10,866. CurrentColumn Pixel column we're up to while looking for targets. FinalColumn Defines the last pixel column to look in for targets. LocatedTargets Points to a list of located Targets.
- PossibleTargets Points to a set of pointers to Target structures that represent currently investigated pixel shapes that may be targets AvailableTargets Points to a set of pointers to Target structures that are currently unused.
- TargetsFound The number of Targets found so far in this data block.
- Process 3 simply iterates through each of the segments, performing a single line of processing depending on the segment's current state.
- the pseudocode is straightforward:
- Process 3 must be halted by an external controlling process if it has not terminated after a specified amount of time. This will only be the case if the data cannot be extracted. A simple mechanism is to start a countdown after Process 1 has finished reading the alternative Artcard. If Process 3 has not finished by that time, the data from the alternative Artcard cannot be recovered.
- Targets are detected by reading columns of pixels, one pixel-column at a time rather than by detecting dots within a given band of pixels (between StartPixel and EndPixel) certain patterns of pixels are detected.
- the pixel columns are processed one at a time until either all the targets are found, or until a specified number of columns have been processed. At that time the targets can be processed and the data area located via clockmarks.
- the state is changed to ExtractingBitImage to signify that the data is now to be extracted. If enough valid targets are not located, then the data block is ignored, skipping to a column definitely within the missed data block, and then beginning again the process of looking for the targets in the next data block. This can be seen in the following pseudocode:
- Each pixel column is processed within the specified bounds (between StartPixel and EndPixel) to search for certain patterns of pixels which will identify the targets.
- the structure of a single target (target number 2) is as previously shown in FIG. 54 :
- a target can be identified by:
- FIG. 74 An overview of the required process is as shown in FIG. 74 .
- the pixels 1150 from each column are passed through a filter 1151 to detect black or white, and then run length encoded 1152 .
- the run-lengths are then passed to a state machine 1153 that has access to the last 3 run lengths and the 4th last color. Based on these values, possible targets pass through each of the identification stages.
- the GatherMin&Max process 1155 simply keeps the minimum & maximum pixel values encountered during the processing of the segment. These are used once the targets have been located to set BlackMax, WhiteMin, and MidRange values.
- Each segment keeps a set of target structures in its search for targets. While the target structures themselves don't move around in memory, several segment variables point to lists of pointers to these target structures. The three pointer lists are repeated here:
- TargetsFound PossibleTargetCount
- AvailableTargetCount AvailableTargetCount
- TargetsFound and PossibleTargetCount are set to 0, and AvailableTargetCount is set to 28 (the maximum number of target structures possible to have under investigation since the minimum size of a target border is 40 pixels, and the data area is approximately 1152 pixels).
- AvailableTargetCount is set to 28 (the maximum number of target structures possible to have under investigation since the minimum size of a target border is 40 pixels, and the data area is approximately 1152 pixels).
- An example of the target pointer layout is as illustrated in FIG. 75 .
- the target data structure is updated, and the pointer to the structure is added to the PossibleTargets list 1158 .
- a target is completely verified, it is added to the LocatedTargets list 1159 . If a possible target is found not to be a target after all, it is placed back onto the AvailableTargets list 1157 . Consequently there are always 28 target pointers in circulation at any time, moving between the lists.
- the Target data structure 1160 can have the following form:
- the ProcessPixelColumn function within the find targets module 1162 goes through all the run lengths one by one, comparing the runs against existing possible targets (via StartPixel), or creating new possible targets if a potential target is found where none was previously known. In all cases, the comparison is only made if S0.color is white and S1.color is black.
- the last column to be checked for targets can be determined as being within a maximum distance from it For 1° rotation, the maximum distance is 18 pixel columns.
- AddToTarget is a function within the find targets module that determines whether it is possible or not to add the specific run to the given target:
- the AddToTarget pseudocode is as follows:
- DetermineRunType Types of pixel runs are identified in DetermineRunType is as follows:
- the EvaluateState procedure takes action depending on the current state and the run type.
- the located targets (in the LocatedTargets list) are stored in the order they were located. Depending on alternative Artcard rotation these targets will be in ascending pixel order or descending pixel order. In addition, the target numbers recovered from the targets may be in error. We may have also have recovered a false target. Before the clockmark estimates can be obtained, the targets need to be processed to ensure that invalid targets are discarded, and valid targets have target numbers fixed if in error (e.g. a damaged target number due to dirt). Two main steps are involved:
- the first step is simple.
- the nature of the target retrieval means that the data should already be sorted in either ascending pixel or descending pixel.
- a simple swap sort ensures that if the 6 targets are already sorted correctly a maximum of 14 comparisons is made with no swaps. If the data is not sorted, 14 comparisons are made, with 3 swaps.
- the following pseudocode shows the sorting process:
- Locating and fixing erroneous target numbers is only slightly more complex.
- each of the N targets found is assumed to be correct
- the other targets are compared to this “correct” target and the number of targets that require change should target N be correct is counted. If the number of changes is 0, then all the targets must already be correct. Otherwise the target that requires the fewest changes to the others is used as the base for change.
- a change is registered if a given target's target number and pixel position do not correlate when compared to the “correct” target's pixel position and target number.
- the change may mean updating a target's target number, or it may mean elimination of the target. It is possible to assume that ascending targets have pixels in ascending order (since they have already been sorted).
- the LocatedTargets list needs to be compacted and all NULL targets removed.
- the upper region's first clockmark dot 1126 is 55 dots away from the center of the first target 1124 (which is the same as the distance between target centers).
- the center of the clockmark dots is a further 1 dot away, and the black border line 1123 is a further 4 dots away from the first clockmark dot.
- the lower region's first clockmark dot is exactly 7 targets-distance away (7 ⁇ 55 dots) from the upper region's first clockmark dot 1126 .
- Targets 1 and 6 have been located, so it is necessary to use the upper-most and lower-most targets, and use the target numbers to determine which targets are being used. It is necessary at least 2 targets at this point.
- the target centers are only estimates of the actual target centers. It is to locate the target center more accurately.
- the center of a target is white, surrounded by black. We therefore want to find the local maximum in both pixel & column dimensions. This involves reconstructing the continuous image since the maximum is unlikely to be aligned exactly on an integer boundary (our estimate).
- the existing target centers actually are the top left coordinate of the bounding box of the target center. It is a simple process to go through each of the pixels for the area defining the center of the target, and find the pixel with the highest value. There may be more than one pixel with the same maximum pixel value, but the estimate of the center value only requires one pixel.
- the target center coordinates point to the whitest pixel of the target, which should be within one pixel of the actual center.
- the process of building a more accurate position for the target center involves reconstructing the continuous signal for 7 scanline slices of the target, 3 to either side of the estimated target center.
- the 7 maximum values found are then used to reconstruct a continuous signal in the column dimension and thus to locate the maximum value in that dimension.
- FindMax is a function that reconstructs the original 1 dimensional signal based sample points and returns the position of the maximum as well as the maximum value found.
- the method of signal reconstruction/resampling used is the Lanczos3 windowed sinc function as shown in FIG. 76 .
- the Lanczos3 windowed sinc function takes 7 (pixel) samples from the dimension being reconstructed, centered around the estimated position x, i.e. at X ⁇ 3, X ⁇ 2, X ⁇ 1, X, X+1, X+2, X+3.
- the ExtractingBitImage state is one where the data block has already been accurately located via the targets, and bit data is currently being extracted one dot column at a time and written to the alternative Artcard bit image.
- the following of data block clockmarks/borders gives accurate dot recovery regardless of rotation, and thus the segment bounds are ignored.
- Processing a given dot column involves two tasks:
- FIG. 77 illustrates an example data block's top left which corner reveals that there are clockmarks 3 dots high 1166 extending out to the target area, a white row, and then a black border line.
- an estimation of the center of the first black clockmark position is provided (based on the target positions).
- the clockmark estimate is taken and by looking at the pixel data in its vicinity, the continuous signal is reconstructed and the exact center is determined. Since we have broken out the two dimensions into a clockmark and border, this is a simple one-dimensional process that needs to be performed twice. However, this is only done every second dot column, when there is a black clockmark to register against. For the white clockmarks we simply use the estimate and leave it at that. Alternatively, we could update the pixel coordinate based on the border each dot column (since it is always present). In practice it is sufficient to update both ordinates every other column (with the black clockmarks) since the resolution being worked at is so fine. The process therefore becomes:
- DetermineAccurateUpperDotCenter is implemented via the following pseudocode:
- GetAccuratePixel and GetAccurateColumn are functions that determine an accurate dot center given a coordinate, but only from the perspective of a single dimension. Determining accurate dot centers is a process of signal reconstruction and then finding the location where the minimum signal value is found (this is different to locating a target center, which is locating the maximum value of the signal since the target center is white, not black).
- the method chosen for signal reconstruction/resampling for this application is the Lanczos3 windowed sinc function as previously discussed with reference to FIG. 76 .
- the clockmark or border has been damaged in some way—perhaps it has been scratched. If the new center value retrieved by the resampling differs from the estimate by more than a tolerance amount, the center value is only moved by the maximum tolerance. If it is an invalid position, it should be close enough to use for data retrieval, and future clockmarks will resynchronize the position.
- the first thing to do is calculate the deltas for the dot column. This is achieved simply by subtracting the UpperClock from the LowerClock, and then dividing by the number of dots between the two points. It is possible to actually multiply by the inverse of the number of dots since it is constant for an alternative Artcard, and multiplying is faster. It is possible to use different constants for obtaining the deltas in pixel and column dimensions.
- the delta in pixels is the distance between the two borders, while the delta in columns is between the centers of the two clockmarks.
- DetermineDataInfo is two parts.
- k DeltaColumnFactor 1/(DOTS_PER_DATA_COLUMN+2+2 ⁇ 1)
- the variable CurrentDot points is determined to the center of the first dot of the current column.
- DataDelta 2 additions: 1 for the column ordinate, the other for the pixel ordinate.
- a sample of the dot at the given coordinate (bi-linear interpolation) is taken, and a pixel value representing the center of the dot is determined.
- the pixel value is then used to determine the bit value for that dot.
- the high level process of extracting a single line of data (48 bytes) can be seen in the following pseudocode.
- the dataBuffer pointer increments as each byte is stored, ensuring that consecutive bytes and columns of data are stored consecutively.
- the GetPixel function takes a dot coordinate (fixed point) and samples 4 CCD pixels to arrive at a center pixel value via bilinear interpolation.
- the DetermineCenterDot function takes the pixel values representing the dot centers to either side of the dot whose bit value is being determined, and attempts to intelligently guess the value of that center dot's bit value. From the generalized blurring curve of FIG. 64 there are three common cases to consider:
- the scheme used to determine a dot's value if the pixel value is between BlackMax and WhiteMin is not too complex, but gives good results. It uses the pixel values of the dot centers to the left and right of the dot in question, using their values to help determine a more likely value for the center dot:
- the logic is represented by the following:
- DRAM utilization is specified relative to Process 1, which writes each pixel once in a consecutive manner, consuming 9% of the DRAM bandwidth.
- the timing as described in this section shows that the DRAM is easily able to cope with the demands of the alternative Artcard Reader algorithm.
- the timing bottleneck will therefore be the implementation of the algorithm in terms of logic speed, not DRAM access.
- the algorithms have been designed however, with simple architectures in mind, requiring a minimum number of logical operations for every memory cycle. From this point of view, as long as the implementation state machine or equivalent CPU/DSP architecture is able to perform as described in the following subsections, the target speed will be met.
- Targets are located by reading pixels within the bounds of a pixel column. Each pixel is read once at most. Assuming a run-length encoder that operates fast enough, the bounds on the location of targets is memory access. The accesses will therefore be no worse than the timing for Process 1, which means a 9% utilization of the DRAM bandwidth.
- the total utilization of DRAM during target location (including Process 1) is therefore 18%, meaning that the target locator will always be catching up to the alternative Artcard image sensor pixel reader.
- a target is positively identified on the first pixel column after the target number. Since there are 2 dot columns before the orientation column, there are 6 pixel columns.
- the Target Location process effectively uses up the first of the pixel columns, but the remaining 5 pixel columns are not processed at all. Therefore the data area can be located in 2 ⁇ 5 of the time available without impinging on any other process time.
- Extracting the dot information involves only 4 pixel reads per dot (rather than the average 9 that define the dot). Considering the data area of 1152 pixels (384 dots), at best this will save 72 cache reads by only reading 4 pixel dots instead of 9. The worst case is a rotation of 10 which is a single pixel translation every 57 pixels, which gives only slightly worse savings.
- Phase 2 is the non-real-time phase of alternative Artcard data recovery algorithm.
- a bit image has been extracted from the alternative Artcard. It represents the bits read from the data regions of the alternative Artcard. Some of the bits will be in error, and perhaps the entire data is rotated 180° because the alternative Artcard was rotated when inserted.
- Phase 2 is concerned with reliably extracting the original data from this encoded bit image. There are basically 3 steps to be carried out as illustrated in FIG. 79 :
- Each of the 3 steps is defined as a separate process, and performed consecutively, since the output of one is required as the input to the next It is straightforward to combine the first two steps into a single process, but for the purposes of clarity, they are treated separately here.
- Phase 2 has the structure as illustrated in FIG. 80 .
- Processes 1 and 2 are likely to be negligible, consuming less than 1/1000 th of a second between them.
- Process 3 (Reed Solomon decode) consumes approximately 0.32 seconds, making this the total time required for Phase 2.
- bit map in DRAM now represents the retrieved data from the alternative Artcard. However the bit image is not contiguous. It is broken into 64 32k chunks, one chunk for each data block. Each 32k chunk contains only 28,656 useful bytes:
- the 2 MB buffer used for pixel data (stored by Process 1 of Phase 1) can be used to hold the reorganized bit image, since pixel data is not required during Phase 2. At the end of the reorganization, a correctly oriented contiguous bit image will be in the 2 MB pixel buffer, ready for Reed-Solomon decoding.
- the leftmost Orientation Column will be white and the rightmost Orientation Column will be black. If the card has been rotated 180°, then the leftmost Orientation Column will be black and the rightmost Orientation Column will be white.
- the data must now be reorganized, based on whether the card was oriented correctly or not.
- the simplest case is that the card is correctly oriented. In this case the data only needs to be moved around a little to remove the orientation columns and to make the entire data contiguous. This is achieved very simply in situ, as described by the following pseudocode:
- FIG. 80 illustrates the unscrambling process conducted memory
- the algorithm performs the decoding one Reed-Solomon block at a time, and can (if desired) be performed in situ, since the encoded block is larger than the decoded block, and the redundancy bytes are stored after the data bytes.
- the first 2 Reed-Solomon blocks are control blocks, containing information about the size of the data to be extracted from the bit image. This meta-information must be decoded fist, and the resultant information used to decode the data proper.
- the decoding of the data proper is simply a case of decoding the data blocks one at a time. Duplicate data blocks can be used if a particular block fails to decode.
- ⁇ duplicate source + offsetToNextDuplicate while ((! found) &&(duplicate ⁇ sourceEnd))
- the GetControlData function is straightforward as long as there are no decoding errors.
- the function simply calls DecodeBlock to decode one control block at a time until successful.
- the control parameters can then be extracted from the first 3 bytes of the decoded data (destBlocks is stored in the bytes 0 and 1 , and lastblock is stored in byte 2 ). If there are decoding errors the function must traverse the 32 sets of 3 bytes and decide which is the most likely set value to be correct.
- One simple method is to find 2 consecutive equal copies of the 3 bytes, and to declare those values the correct ones.
- An alternative method is to count occurrences of the different sets of 3 bytes, and announce the most common occurrence to be the correct one.
- Reed-Solomon decode depends on the implementation. While it is possible to use a dedicated core to perform the Reed-Solomon decoding process (such as LSI Logic's L64712), it is preferable to select a CPU/DSP combination that can be more generally used throughout the embedded system (usually to do something with the decoded data) depending on the application. Of course decoding time must be fast enough with the CPU/DSP combination.
- the L64712 has a throughput of 50 Mbits per second (around 6.25 MB per second), so the time is bound by the speed of the Reed-Solomon decoder rather than the maximum 2 MB read and 1 MB write memory access time.
- the current reading algorithm of the preferred embodiment has the ability to use the surrounding dots in the same column in order to make a better decision about a dot's value. Since the previous column's dots have already been decoded, a previous column dot history could be useful in determining the value of those dots whose pixel values are in the not-sure range.
- a different possibility with regard to the initial stage is to remove it entirely, make the initial bounds of the data blocks larger than necessary and place greater intelligence into the ProcessingTargets functions. This may reduce overall complexity. Care must be taken to maintain data block independence.
- control block mechanism can be made more robust:
- the overall time taken to read the Artcard 9 and decode it is therefore approximately 2.15 seconds.
- the apparent delay to the user is actually only 0.65 seconds (the total of Phases 3 and 4), since the Artcard stops moving after 1.5 seconds.
- the Artvark script must be interpreted, Rather than run the script immediately, the script is only run upon the pressing of the ‘Print’ button 13 ( FIG. 1 ).
- the taken to run the script will vary depending on the complexity of the script, and must be taken into account for the perceived delay between pressing the print button and the actual print button and the actual printing.
- the VLIW processor 74 is a digital processing system that accelerates computationally expensive Vark functions. The balance of functions performed in software by the CPU core 72 , and in hardware by the VLIW processor 74 will be implementation dependent. The goal of the VLIW processor 74 is to assist all Artcard styles to execute in a time that does not seem too slow to the user. As CPUs become faster and more powerful, the number of functions requiring hardware acceleration becomes less and less.
- the VLIW processor has a microcoded ALU sub-system that allows general hardware speed up of the following time-critical functions.
- a convolve is a weighted average around a center pixel.
- the average may be a simple sum, a sum of absolute values, the absolute value of a sum, or sums truncated at 0.
- the image convolver is a general-purpose convolver, allowing a variety of functions to be implemented by varying the values within a variable-sized coefficient kernel.
- the kernel sizes supported are 3 ⁇ 3, 5 ⁇ 5 and 7 ⁇ 7 only.
- the pixel component values fed into the convolver process 341 come from a Box Read Iterator 342 .
- the Iterator 342 provides the image data row by row, and within each row, pixel by pixel.
- the output from the convolver 341 is sent to a Sequential Write Iterator 344 , which stores the resultant image in a valid image format.
- a Coefficient Kernel 346 is a lookup table in DRAM.
- the kernel is arranged with coefficients in the same order as the Box Read Iterator 342 .
- Each coefficient entry is 8 bits.
- a simple Sequential Read Iterator can be used to index into the kernel 346 and thus provide the coefficients. It simulates an image with ImageWidth equal to the kernel size, and a Loop option is set so that the kernel would continuously be provided.
- FIG. 81 One form of implementation of the convolve process on an ALU unit is as illustrated in FIG. 81 .
- the following constants are set by software:
- the control logic is used to count down the number of multiply/adds per pixel. When the count (accumulated in Latch 2 ) reaches 0, the control signal generated is used to write out the current convolve value (from Latch 1 ) and to reset the count. In this way, one control logic block can be used for a number of parallel convolve streams.
- the number of cycles taken to sum up all the values is therefore the number of entries in the kernel. Since this is compute bound, it is appropriate to divide the image into multiple sections and process them in parallel on different ALU units.
- the time taken for each pixel is 49 cycles, or 490 ns. Since each cache line holds 32 pixels, the time available for memory access is 12,740 ns. ((32 ⁇ 7+1) ⁇ 490 ns).
- the time taken to read 7 cache lines and write 1 is worse case 1,120 ns (8*140 ns, all accesses to same DRAM bank). Consequently it is possible to process up to 10 pixels in parallel given unlimited resources. Given a limited number of ALUs it is possible to do at best 4 in parallel.
- the time taken for each pixel is 25 cycles, or 250 ns. Since each cache line holds 32 pixels, the time available for memory access is 7,000 ns. ((32 ⁇ 5+1) ⁇ 250 ns).
- the time taken to read 5 cache lines and write 1 is worse case 840 ns (6*140 ns, all accesses to same DRAM bank). Consequently it is possible to process up to 7 pixels in parallel given unlimited resources. Given a limited number of ALUs it is possible to do at best 4.
- the time taken for each pixel is 9 cycles, or 90 ns. Since each cache line holds 32 pixels, the time available for memory access is 2,700 ns. ((32 ⁇ 3+1) ⁇ 90 ns).
- the time taken to read 3 cache lines and write 1 is worse case 560 ns (4*140 ns, all accesses to same DRAM bank). Consequently it is possible to process up to 4 pixels in parallel given unlimited resources. Given a limited number of ALUs and Read/Write Iterators it is possible to do at best 4.
- Compositing is to add a foreground image to a background image using a matte or a channel to govern the appropriate proportions of background and foreground in the final image.
- Two styles of compositing are preferably supported, regular compositing and associated compositing. The rules for the two styles are:
- the alpha channel has values from 0 to 255 corresponding to the range 0 to 1.
- a regular composite is implemented as: Foreground+(Background ⁇ Foreground)* ⁇ /255
- the composite process takes 1 cycle per pixel, with a utilization of only half of the ALUs.
- the composite process is only run on a single channel.
- the compositor To composite a 3-channel image with another, the compositor must be run 3 times, once for each channel.
- the time taken to composite a full size single channel is 0.015 s (1500*1000*1*10 ns), or 0.045 s to composite all 3 channels.
- the compositor process requires 3 Sequential Read Iterators 351 - 353 and 1 Sequential Write Iterator 355 , and is implemented as microcode using a Adder ALU in conjunction with a multiplier ALU.
- Composite time is 1 cycle (ions) per-pixel. Different microcode is required for associated and regular compositing, although the average time per pixel composite is the same.
- the composite process is only run on a single channel.
- the compositor To composite one 3-channel image with another, the compositor must be run 3 times, once for each channel. As the a channel is the same for each composite, it must be read each time. However it should be noted that to transfer (read or write) 4 ⁇ 32 byte cache-lines in the best case takes 320 ns.
- the time taken to composite a full size 3 channel image is therefore 0.045 seconds.
- an image pyramid 360 is effectively a multi-resolution pixelmap.
- the original image is a 1:1 representation.
- Sub-sampling by 2:1 in each dimension produces an image 1 ⁇ 4 the original size. This process continues until the entire image is represented by a single pixel.
- An image pyramid is constructed from an original image, and consumes 1 ⁇ 3 of the size taken up by the original image (1 ⁇ 4+ 1/16+ 1/64+ . . . ). For an original image of 1500 ⁇ 1000 the corresponding image pyramid is approximately 1 ⁇ 2 MB
- the image pyramid can be constructed via a 3 ⁇ 3 convolve performed on 1 in 4 input image pixels advancing the center of the convolve kernel by 2 pixels each dimension.
- a 3 ⁇ 3 convolve results in higher accuracy than simply averaging 4 pixels, and has the added advantage that coordinates on different pyramid levels differ only by shifting 1 bit per level.
- the construction of an entire pyramid relies on a software loop that calls the pyramid level construction function once for each level of the pyramid.
- Timing to produce 1 level of the pyramid is 9/4*1 ⁇ 4 of the resolution of the input image since we are generating an image 1 ⁇ 4 of the size of the original.
- the ACP 31 is able to carry out image warping manipulations of the input image.
- image warping The principles of image warping are well-known in theory.
- One thorough text book reference on the process of warping is “Digital Image Warping” by George Wolberg published in 1990 by the IEEE Computer Society Press, Los Alamitos, Calif.
- the warping process utilizes a warp map which forms part of the data fed in via Artcard 9 .
- the warp map can be arbitrarily dimensioned in accordance with requirements and provides information of a mapping of input pixels to output pixels.
- the utilization of arbitrarily sized warp maps presents a number of problems which must be solved by the image warper.
- a warp map 365 having dimensions A ⁇ B comprises array values of a certain magnitude (for example 8 bit values from 0-255) which set out the coordinate of a theoretical input image which maps to the corresponding “theoretical” output image having the same array coordinate indices.
- any output image eg. 366 will have its own dimensions C ⁇ D which may further be totally different from an input image which may have its own dimensions E ⁇ F.
- it is necessary to facilitate the remapping of the warp map 365 so that it can be utilised for output image 366 to determine, for each output pixel, the corresponding area or region of the input image 367 from which the output pixel color data is to be constructed.
- warp map 365 For each output pixel in output image 366 it is necessary to first determine a corresponding warp map value from warp map 365 . This may include the need to bilinearly interpolate the surrounding warp map values when an output image pixel maps to a fractional position within warp map table 365 . The result of this process will give the location of an input image pixel in a “theoretical” image which will be dimensioned by the size of each data value within the warp map 365 . These values must be re-scaled so as to map the theoretical image to the corresponding actual input image 367 .
- the image warper performs several tasks in order to warp an image.
Abstract
Description
US PATENT/PATENT | ||
CROSS- | APPLICATION | |
REFERENCED | (CLAIMING RIGHT | |
AUSTRALIAN | OF PRIORITY | |
PROVISIONAL | FROM AUSTRALIAN | |
PATENT | PROVISIONAL | DOCKET |
APPLICATION NO. | APPLICATION) | NO. |
PO7991 | 6750901 | ART01US |
PO8505 | 6476863 | ART02US |
PO7988 | 6788336 | ART03US |
PO9395 | 6322181 | ART04US |
PO8017 | 6597817 | ART06US |
PO8014 | 6227648 | ART07US |
PO8025 | 6727948 | ART08US |
PO8032 | 6690419 | ART09US |
PO7999 | 6727951 | ART10US |
PO7998 | 6196541 | ART13US |
PO7997 | 6195150 | ART15US |
PO7979 | 6362868 | ART16US |
PO7978 | 6831681 | ART18US |
PO7982 | 6431669 | ART19US |
PO7989 | 6362869 | ART20US |
PO8019 | 6472052 | ART21US |
PO7980 | 6356715 | ART22US |
PO8018 | 6894694 | ART24US |
PO7938 | 6636216 | ART25US |
PO8016 | 6366693 | ART26US |
PO8024 | 6329990 | ART27US |
PO7939 | 6459495 | ART29US |
PO8501 | 6137500 | ART30US |
PO8500 | 6690416 | ART31US |
PO7987 | 7050143 | ART32US |
PO8022 | 6398328 | ART33US |
PO8497 | 7110024 | ART34US |
PO8020 | 6431704 | ART38US |
PO8504 | 6879341 | ART42US |
PO8000 | 6415054 | ART43US |
PO7934 | 6665454 | ART45US |
PO7990 | 6542645 | ART46US |
PO8499 | 6486886 | ART47US |
PO8502 | 6381361 | ART48US |
PO7981 | 6317192 | ART50US |
PO7986 | 6850274 | ART51US |
PO7983 | 09/113054 | ART52US |
PO8026 | 6646757 | ART53US |
PO8028 | 6624848 | ART56US |
PO9394 | 6357135 | ART57US |
PO9397 | 6271931 | ART59US |
PO9398 | 6353772 | ART60US |
PO9399 | 6106147 | ART61US |
PO9400 | 6665008 | ART62US |
PO9401 | 6304291 | ART63US |
PO9403 | 6305770 | ART65US |
PO9405 | 6289262 | ART66US |
PP0959 | 6315200 | ART68US |
PP1397 | 6217165 | ART69US |
PP2370 | 6786420 | DOT01US |
PO8003 | 6350023 | FLUID01US |
PO8005 | 6318849 | FLUID02US |
PO8066 | 6227652 | IJ01US |
PO8072 | 6213588 | IJ02US |
PO8040 | 6213589 | IJ03US |
PO8071 | 6231163 | IJ04US |
PO8047 | 6247795 | IJ05US |
PO8035 | 6394581 | IJ06US |
PO8044 | 6244691 | IJ07US |
PO8063 | 6257704 | IJ08US |
PO8057 | 6416168 | IJ09US |
PO8056 | 6220694 | IJ10US |
PO8069 | 6257705 | IJ11US |
PO8049 | 6247794 | IJ12US |
PO8036 | 6234610 | IJ13US |
PO8048 | 6247793 | IJ14US |
PO8070 | 6264306 | IJ15US |
PO8067 | 6241342 | IJ16US |
PO8001 | 6247792 | IJ17US |
PO8038 | 6264307 | IJ18US |
PO8033 | 6254220 | IJ19US |
PO8002 | 6234611 | IJ20US |
PO8068 | 6302528 | IJ21US |
PO8062 | 6283582 | IJ22US |
PO8034 | 6239821 | IJ23US |
PO8039 | 6338547 | IJ24US |
PO8041 | 6247796 | IJ25US |
PO8004 | 6557977 | IJ26US |
PO8037 | 6390603 | IJ27US |
PO8043 | 6362843 | IJ28US |
PO8042 | 6293653 | IJ29US |
PO8064 | 6312107 | IJ30US |
PO9389 | 6227653 | IJ31US |
PO9391 | 6234609 | IJ32US |
PP0888 | 6238040 | IJ33US |
PP0891 | 6188415 | IJ34US |
PP0890 | 6227654 | IJ35US |
PP0873 | 6209989 | IJ36US |
PP0993 | 6247791 | IJ37US |
PP0890 | 6336710 | IJ38US |
PP1398 | 6217153 | IJ39US |
PP2592 | 6416167 | IJ40US |
PP2593 | 6243113 | IJ41US |
PP3991 | 6283581 | IJ42US |
PP3987 | 6247790 | IJ43US |
PP3985 | 6260953 | IJ44US |
PP3983 | 6267469 | IJ45US |
PO7935 | 6224780 | IJM01US |
PO7936 | 6235212 | IJM02US |
PO7937 | 6280643 | IJM03US |
PO8061 | 6284147 | IJM04US |
PO8054 | 6214244 | IJM05US |
PO8065 | 6071750 | IJM06US |
PO8055 | 6267905 | IJM07US |
PO8053 | 6251298 | IJM08US |
PO8078 | 6258285 | IJM09US |
PO7933 | 6225138 | IJM10US |
PO7950 | 6241904 | IJM11US |
PO7949 | 6299786 | IJM12US |
PO8060 | 6866789 | IJM13US |
PO8059 | 6231773 | IJM14US |
PO8073 | 6190931 | IJM15US |
PO8076 | 6248249 | IJM16US |
PO8075 | 6290862 | IJM17US |
PO8079 | 6241906 | IJM18US |
PO8050 | 6565762 | IJM19US |
PO8052 | 6241905 | IJM20US |
PO7948 | 6451216 | IJM21US |
PO7951 | 6231772 | IJM22US |
PO8074 | 6274056 | IJM23US |
PO7941 | 6290861 | IJM24US |
PO8077 | 6248248 | IJM25US |
PO8058 | 6306671 | IJM26US |
PO8051 | 6331258 | IJM27US |
PO8045 | 6110754 | IJM28US |
PO7952 | 6294101 | IJM29US |
PO8046 | 6416679 | IJM30US |
PO9390 | 6264849 | IJM31US |
PO9392 | 6254793 | IJM32US |
PP0889 | 6235211 | IJM35US |
PP0887 | 6491833 | IJM36US |
PP0882 | 6264850 | IJM37US |
PP0874 | 6258284 | IJM38US |
PP1396 | 6312615 | IJM39US |
PP3989 | 6228668 | IJM40US |
PP2591 | 6180427 | IJM41US |
PP3990 | 6171875 | IJM42US |
PP3986 | 6267904 | IJM43US |
PP3984 | 6245247 | IJM44US |
PP3982 | 6315914 | IJM45US |
PP0895 | 6231148 | IR01US |
PP0869 | 6293658 | IR04US |
PP0887 | 6614560 | IR05US |
PP0885 | 6238033 | IR06US |
PP0884 | 6312070 | IR10US |
PP0886 | 6238111 | IR12US |
PP0877 | 6378970 | IR16US |
PP0878 | 6196739 | IR17US |
PP0883 | 6270182 | IR19US |
PP0880 | 6152619 | IR20US |
PO8006 | 6087638 | MEMS02US |
PO8007 | 6340222 | MEMS03US |
PO8010 | 6041600 | MEMS05US |
PO8011 | 6299300 | MEMS06US |
PO7947 | 6067797 | MEMS07US |
PO7944 | 6286935 | MEMS09US |
PO7946 | 6044646 | MEMS10US |
PP0894 | 6382769 | MEMS13US |
Image type | Bi-level, dithered | ||
Color | CMY | ||
Resolution | |||
1600 dpi | |||
Print head length | ‘Page-width’ (100 mm) | ||
| 2 seconds per photo | ||
Optional Ink Pressure Controller (Not Shown)
-
- A
RISC CPU core 72 - A 4 way parallel
VLIW Vector Processor 74 - A
Direct RAMbus interface 81 - A CMOS
image sensor interface 83 - A CMOS linear
image sensor interface 88 - A USB
serial interface 52 - An
infrared keyboard interface 55 - A
numeric LCD interface 84, and - A color
TFT LCD interface 88 - A 4
Mbyte Flash memory 70 forprogram storage 70
The RISC CPU,Direct RAMbus interface 81,CMOS sensor interface 83 and USBserial interface 52 can be vendor supplied cores. TheACP 31 is intended to run at a clock speed of 200 MHz on 3V externally and 1.5V internally to minimize power consumption. The CPU core needs only to run at 100 MHz. The following two block diagrams give two views of the ACP 31: - A view of the
ACP 31 in isolation
An example Artcam showing a high-level view of theACP 31 connected to the rest of the Artcam hardware.
Image Access
- A
-
- CCD Image, which is the Input Image captured from the CCD.
- Internal Image format—the Image format utilised internally by the Artcam device.
- Print Image—the Output Image format printed by the Artcam
Although the program code is stored in on-
A
CPU Memory Model
An Artcam's CPU memory model consists of a 32 MB area. It consists of 8 MB of physical RDRAM off-chip in the base model of Artcam, with provision for up to 16 MB of off-chip memory. There is a 4
Contents | Size | ||
| 8 MB | ||
Extended | 8 MB | ||
Program memory (on | 4 MB | ||
Reserved for extension of | 4 | ||
ACP | |||
31 registers and memory-mapped I/ | 4 | ||
Reserved | |||
4 | |||
TOTAL | |||
32 MB | |||
A straightforward way of decoding addresses is to use address bits 23-24:
-
- If
bit 24 is clear, the address is in the lower 16-MB range, and hence can be satisfied from DRAM and theData cache 76. In most cases the DRAM will only be 8 MB, but 16 MB is allocated to cater for a higher memory model Artcams. - If
bit 24 is set, and bit 23 is clear, then the address represents theFlash memory 70 4 Mbyte range and is satisfied by theProgram cache 72. - If
bit 24=1 and bit 23=1, the address is translated into an access over the low speed bus to the requested component in the AC by theCPU Memory Decoder 68.
Flash Memory 70
TheACP 31 contains a 4Mbyte Flash memory 70 for storing the Artcam program. It is envisaged thatFlash memory 70 will have denser packing coefficients than masked ROM, and allows for greater flexibility for testing camera program code. The downside of theFlash memory 70 is the access time, which is unlikely to be fast enough for the 100 MHz operating speed (10 ns cycle time) of the CPU. A fast Program Instruction cache 77 therefore acts as the interface between the CPU and theslower Flash memory 70.
Program Cache 72
A small cache is required for good CPU performance. This requirement is due to the slowspeed Flash memory 70 which stores the Program code. 16 cache lines of 32 bytes each are sufficient, for a total of 512 bytes. TheProgram cache 72 is a read only cache. The data used by CPU programs comes through theCPU Memory Decoder 68 and if the address is in DRAM, through thegeneral Data cache 76. The separation allows the CPU to operate independently of theVLIW Vector Processor 74. If the data requirements are low for a given process, it can consequently operate completely out of cache.
Finally, theProgram cache 72 can be read as data by the CPU rather than purely as program instructions. This allows tables, microcode for the VLIW etc to be loaded from theFlash memory 70. Addresses withbit 24 set and bit 23 clear are satisfied from theProgram cache 72.
CPU Memory Decoder 68
TheCPU Memory Decoder 68 is a simple decoder for satisfying CPU data accesses. The Decoder translates data addresses into internal ACP register accesses over the internal low speed bus, and therefore allows for memory mapped I/O of ACP registers. TheCPU Memory Decoder 68 only interprets addresses that havebit 24 set and bit 23 clear. There is no caching in theCPU Memory Decoder 68.
DRAM Interface 81
The DRAM used by the Artcam is asingle channel 64 Mbit (8 MB) RAMbus RDRAM operating at 1.6 GB/sec. RDRAM accesses are by a single channel (16-bit data path) controller. The RDRAM also has several useful operating modes for low power operation. Although the Rambus specification describes a system with random 32 byte transfers as capable of achieving a greater than 95% efficiency, this is not true if only part of the 32 bytes are used. Two reads followed by two writes to the same device yields over 86% efficiency. The primary latency is required for bus turn-around going from a Write to a Read, and since there is a Delayed Write mechanism, efficiency can be further improved. With regards to writes, Write Masks allow specific subsets of bytes to be written to. These write masks would be set via internal cache “dirty bits”. The upshot of the Rambus Direct RDRAM is a throughput of >1 GB/sec is easily achievable, and with multiple reads for every write (most processes) combined with intelligent algorithms making good use of 32 byte transfer knowledge, transfer rates of >1.3 GB/sec are expected. Every 10 ns, 16 bytes can be transferred to or from the core.
Dram Organization
The DRAM organization for a base model (8 MB RDRAM) Artcam is as follows:
- If
Contents | Size | ||
Program scratch RAM | 0.50 MB | ||
Artcard data | 1.00 MB | ||
Photo Image, captured from CMOS Sensor | 0.50 MB | ||
Print Image (compressed) | 2.25 |
||
1 Channel of expanded Photo Image | 1.50 |
||
1 Image Pyramid of single channel | 1.00 MB | ||
Intermediate Image Processing | 1.25 | ||
TOTAL | |||
8 MB | |||
Notes: | |||
Uncompressed, the Print Image requires 4.5 MB (1.5 MB per channel). To accommodate other objects in the 8 MB model, the Print Image needs to be compressed. If the chrominance channels are compressed by 4:1 they require only 0.375 MB each). |
- The memory model described here assumes a single 8 MB RDRAM. Other models of the Artcam may have more memory, and thus not require compression of the Print Image. In addition, with more memory a larger part of the final image can be worked on at once, potentially giving a speed improvement.
- Note that ejecting or inserting an Artcard invalidates the 5.5 MB area holding the Print Image, 1 channel of expanded photo image, and the image pyramid. This space may be safely used by the Artcard Interface for decoding the Artcard data.
Data Cache 76
TheACP 31 contains a dedicated CPU instruction cache 77 and ageneral data cache 76. TheData cache 76 handles all DRAM requests (reads and writes of data) from the CPU, theVLIW Vector Processor 74, and theDisplay Controller 88. These requests may have very different profiles in terms of memory usage and algorithmic timing requirements. For example, a VLIW process may be processing an image in linear memory, and lookup a value in a table for each value in the image. There is little need to cache much of the image, but it may be desirable to cache the entire lookup table so that no real memory access is required. Because of these differing requirements, theData cache 76 allows for an intelligent definition of caching. Although theRambus DRAM interface 81 is capable of very high-speed memory access (an average throughput of 32 bytes in 25 ns), it is not efficient dealing with single byte requests. In order to reduce effective memory latency, theACP 31 contains 128 cache lines. Each cache line is 32 bytes wide. Thus the total amount ofdata cache 76 is 4096 bytes (4 KB). The 128 cache lines are configured into 16 programmable-sized groups. Each of the 16 groups must be a contiguous set of cache lines. The CPU is responsible for determining how many cache lines to allocate to each group. Within each group cache lines are filled according to a simple Least Recently Used algorithm. In terms of CPU data requests, theData cache 76 handles memory access requests that haveaddress bit 24 clear. Ifbit 24 is clear, the address is in the lower 16 MB range, and hence can be satisfied from DRAM and theData cache 76. In most cases the DRAM will only be 8 MB, but 16 MB is allocated to cater for a higher memory model Artcam. Ifbit 24 is set, the address is ignored by theData cache 76.
All CPU data requests are satisfied fromCache Group 0. A minimum of 16 cache lines is recommended for good CPU performance, although the CPU can assign any number of cache lines (except none) toCache Group 0. The remaining Cache Groups (1 to 15) are allocated according to the current requirements. This could mean allocation to aVLIW Vector Processor 74 program or theDisplay Controller 88. For example, a 256 byte lookup table required to be permanently available would require 8 cache lines. Writing out a sequential image would only require 2-4 cache lines (depending on the size of record being generated and whether write requests are being Write Delayed for a significant number of cycles). Associated with each cache line byte is a dirty bit, used for creating a Write Mask when writing memory to DRAM. Associated with each cache line is another dirty bit, which indicates whether any of the cache line bytes has been written to (and therefore the cache line must be written back to DRAM before it can be reused). Note that it is possible for two different Cache Groups to be accessing the same address in memory and to get out of sync. The VLIW program writer is responsible to ensure that this is not an issue. It could be perfectly reasonable, for example, to have a Cache Group responsible for reading an image, and another Cache Group responsible for writing the changed image back to memory again. If the images are read or written sequentially there may be advantages in allocating cache lines in this manner. A total of 8buses 182 connect theVLIW Vector Processor 74 to theData cache 76. Each bus is connected to an I/O Address Generator. (There are 2 I/O Address Generators Processing Unit 178, and there are 4 Processing Units in theVLIW Vector Processor 74. The total number of buses is therefore 8.) In any given cycle, in addition to a single 32 bit (4 byte) access to the CPU's cache group (Group 0), 4 simultaneous accesses of 16 bits (2 bytes) to remaining cache groups are permitted on the 8VLIW Vector Processor 74 buses. TheData cache 76 is responsible for fairly processing the requests. On a given cycle, no more than 1 request to a specific Cache Group will be processed. Given that there are 8Address Generators VLIW Vector Processor 74, each one of these has the potential to refer to an individual Cache Group. However it is possible and occasionally reasonable for 2 ormore Address Generators various Address Generators VLIW Vector Processor 74 reference the specific Cache Groups correctly.
TheData cache 76 as described allows for theDisplay Controller 88 andVLIW Vector Processor 74 to be active simultaneously. If the operation of these two components were deemed to never occur simultaneously, a total 9 Cache Groups would suffice. The CPU would useCache Group 0, and theVLIW Vector Processor 74 and theDisplay Controller 88 would share the remaining 8 Cache Groups, requiring only 3 bits (rather than 4) to define which Cache Group would satisfy a particular request.
JTAG Interface 85
A standard JTAG (Joint Test Action Group) Interface is included in theACP 31 for testing purposes. Due to the complexity of the chip, a variety of testing techniques are required, including BIST (Built In Self Test) and functional block isolation. An overhead of 10% in chip area is assumed for overall chip testing circuitry. The test circuitry is beyond the scope of this document.
Serial Interfaces
USBSerial Port Interface 52
This is a standard USB serial port, which is connected to the internal chip low speed bus, thereby allowing the CPU to control it.
Keyboard Interface 65
This is a standard low-speed serial port, which is connected to the internal chip low speed bus, thereby allowing the CPU to control it. It is designed to be optionally connected to a keyboard to allow simple data input to customize prints.
Authentication Chip Serial Interfaces 64
These are 2 standard low-speed serial ports, which are connected to the internal chip low speed bus, thereby allowing the CPU to control them. The reason for having 2 ports is to connect to both the on-camera Authentication chip, and to the print-roll Authentication chip using separate lines. Only using 1 line may make it possible for a clone print-roll manufacturer to design a chip which, instead of generating an authentication code, tricks the camera into using the code generated by the authentication chip in the camera.
Parallel Interface 67
The parallel interface connects theACP 31 to individual static electrical signals. The CPU is able to control each of these connections as memory-mapped I/O via the low speed bus The following table is a list of connections to the parallel interface:
Connection | Direction | Pins | ||
Paper transport stepper motor | Out | 4 | ||
Artcard stepper motor | Out | 4 | ||
Zoom stepper motor | Out | 4 | ||
Guillotine motor | Out | 1 | ||
Flash trigger | Out | 1 | ||
Status LCD segment drivers | Out | 7 | ||
Status LCD common drivers | Out | 4 | ||
Artcard illumination LED | Out | 1 | ||
Artcard status LED (red/green) | In | 2 | ||
Artcard sensor | In | 1 | ||
Paper pull sensor | In | 1 | ||
Orientation sensor | In | 2 | ||
Buttons | In | 4 | ||
| 36 | |||
VLIW Input and
The VLIW Input and Output FIFOs are 8 bit wide FIFOs used for communicating between processes and the
A client writes 8-bit data to the
The
To achieve the high processing requirements of Artcam, the
As shown in more detail in
Each PU e.g 178 consists of an ALU 188 (containing a number of registers & some arithmetic logic for processing data), some
Microcode
Each PU e.g 178 contains a
-
- Hardware design complexity is reduced
- Hardware risk is reduced due to reduction in complexity
- Hardware design time does not depend on all Vark functionality being implemented in dedicated silicon
- Space on chip is reduced overall (due to large number of processes able to be implemented as microcode)
- Functionality can be added to Vark (via microcode) with no impact on hardware design time
Process Block | Size (bits) | ||
| 3 | ||
Branching (microcode control) | 11 | ||
In | 8 | ||
Out | 6 | ||
| 7 | ||
| 10 | ||
| 6 | ||
| 12 | ||
Adder/Logical | 14 | ||
Multiply/ | 19 | ||
TOTAL | 96 | ||
With 128 instruction words, the
The Synchronization Register 197 is used in two basic ways:
-
- Stopping and starting a given process in synchrony
- Suspending execution within a process
Stopping and Starting Processes
The CPU is responsible for loading themicrocode RAM 196 and loading the execution address for the first instruction (usually 0). When the CPU starts executing microcode, it begins at the specified address.
Execution of microcode only occurs when all the bits of the Synchronization Register 197 are also set in the Common Synchronization Register 197. The CPU therefore sets up all the PUs e.g 178 and then starts or stops processes with a single write to the Common Synchronization Register 197.
This synchronization scheme allows multiple processes to be running asynchronously on the PUs e.g 178, being stopped and started as processes rather than one PU e.g 178 at a time.
Suspending Execution Within a Process
In a given cycle, a PU e.g 178 may need to read from or write to a FIFO (based on the opcode of the current microcode instruction). If the FIFO is empty on a read request, or full on a write request, the FIFO request cannot be completed. The PU e.g 178 will therefore assert itsSuspendProcess control signal 198. The SuspendProcess signals from all PUs e.g 178 are fed back to all the PUs e.g 178. The Synchronization Register 197 is ANDed with the 4 SuspendProcess bits, and if the result is non-zero, none of the PU e.g 178's register WriteEnables or FIFO strobes will be set. Consequently none of the PUs e.g 178 that form the same process group as the PU e.g 178 that was unable to complete its task will have their registers or FIFOs updated during that cycle. This simple technique keeps a given process group in synchronization. Each subsequent cycle the PU e.g 178's state machine will attempt to re-execute the microcode instruction at the same address, and will continue to do so until successful. Of course the Common Synchronization Register 197 can be written to by the CPU to stop the entire process if necessary. This synchronization scheme allows any combinations of PUs e.g 178 to work together, each group only affecting its co-workers with regards to suspension due to data not being ready for reading or writing.
Status Bit
Each PU e.g 178's
| Description | |
2 | Select unit whose status bit is to be |
00 = | |
01 = Multiply/ | |
10 = | |
11 = | |
1 | 0 = Zero |
1 = | |
3 | TOTAL |
Within the
Branching Within Microcode
Each PU e.g 178 contains a 7 bit Program Counter (PC) that holds the current microcode address being executed. Normal program execution is linear, moving from address N in one cycle to address N+1 in the next cycle. Every cycle however, a microcode program has the ability to branch to a different location, or to test a status bit from the
| Description | |
2 | 00 = NOP (PC = PC + 1) |
01 = Branch always | |
10 = Branch if status bit clear | |
11 = Branch if status bit set | |
2 | Select status bit from |
7 | Address to branch to (absolute address, 00-7F) |
11 | TOTAL |
-
-
Read Block 202, for accepting data from the input FIFOs - Write
Block 203, for sending data out via the output FIFOs - Adder/
Logical block 204, for addition & subtraction, comparisons and logical operations - Multiply/Interpolate block 205, for multiple types of interpolations and multiply/accumulates
-
Barrel Shift block 206, for shifting data as required - In
block 207, for accepting data from the external crossbar switch 183 - Out
block 208, for sending data to the external crossbar switch 183 - Registers block 215, for holding data in temporary storage
Four specialized 32 bit registers hold the results of the 4 main processing blocks: - M register 209 holds the result of the Multiply/Interpolate block
- L register 209 holds the result of the Adder/Logic block
- S register 209 holds the result of the Barrel Shifter block
- R register 209 holds the result of the
Read Block 202
In addition there are two internal crossbar switches 213m 214 for data transport. The various process blocks are further expanded in the following sections, together with the microcode definitions that pertain to each block. Note that the microcode is decoded within a block to provide the control signals to the various units within.
-
In 207
This block is illustrated in
| Description | |
1 | 0 = |
1 = Load In1 from | |
3 | |
1 | 0 = |
1 = Load In2 from | |
3 | |
8 | TOTAL |
Out 208
Complementing In is
| Description | |
1 | 0 = |
1 = |
|
1 | Select Register to load [Out1 or Out2] |
4 | Select input [In1, In2, Out1, Out2, D0, D1, D2, D3, M, L, S, R, |
K1, K2, 0, 1] | |
6 | TOTAL |
-
- M register 209 holds the result of the Multiply/Interpolate block
- L register 209 holds the result of the Adder/Logic block
- S register 209 holds the result of the Barrel Shifter block
- R register 209 holds the result of the
Read Block 202
The CPU has direct access to these registers, and other units can select them as inputs viaCrossbar2 214. Sometimes it is necessary to delay an operation for one or more cycles. The Registers block contains four 32-bit registers D0-D3 to hold temporary variables during processing. Each cycle one of the registers can be updated, while all the registers are output for other units to use via Crossbar1 213 (which also includes In1, In2, Out1 , and Out2). The CPU has direct access to these registers. The data loaded into the specified register can be one of D0-D3 (selected from Crossbar1 213) one of M, L, S, and R (selected from Crossbar2 214), one of 2 programmable constants, or the fixedvalues FIG. 8 . The microcode for Registers takes the following form:
| Description | |
1 | 0 = | |
1 = | ||
2 | Select Register to load [D0–D3] | |
4 | Select input [In1, In2, Out1, Out2, D0, D1, D2, D3, M, L, S, R, | |
K1, K2, 0, 1] | ||
7 | TOTAL | |
Read
The Read process block 202 of
| Description | |
2 | 00 = | |
01 = Read from | ||
10 = Read from | ||
11 = Read from | ||
1 | How many | |
0 = 8 bits (pad with 0 or sign extend) | ||
1 = 16 bits (only valid for Local FIFO reads) | ||
1 | 0 = Treat data as unsigned (pad with 0) | |
1 = Treat data as signed (sign extend when reading from FIFO) | ||
2 | How much to shift data left by: | |
00 = 0 bits (no change) | ||
01 = 8 | ||
10 = 16 | ||
11 = 24 | ||
4 | Which bytes of R to update (hi to lo order byte) | |
Each of the 4 bits represents 1 byte WriteEnable on | ||
10 | TOTAL | |
Write
The Write process block is able to write to either the common
| Description | |
2 | 00 = |
|
01 = Write |
||
10 = Write |
||
11 = Write |
||
1 | Select Output Value [Out1 or Out2] | |
3 | Select part of Output Value to write (32 bits = 4 bytes ABCD) | |
000 = |
||
001 = 0D | ||
010 = 0B | ||
011 = |
||
100 = |
||
101 = BC | ||
110 = |
||
111 = 0 | ||
6 | TOTAL | |
Barrel Shifter
The Barrel Shifter process block 206 is shown in more detail in
| Description | |
3 | 000 = | |
001 = Shift Left (unsigned) | ||
010 = Reserved | ||
011 = Shift Left (signed) | ||
100 = Shift right (unsigned, no rounding) | ||
101 = Shift right (unsigned, with rounding) | ||
110 = Shift right (signed, no rounding) | ||
111 = Shift right (signed, with rounding) | ||
2 | Select Input to barrel shift: | |
00 = Multiply/ | ||
01 = | ||
10 = Adder/ | ||
11 = | ||
5 | # bits to shift | |
1 | Ceiling of 255 | |
1 | Floor of 0 (signed data) | |
12 | TOTAL | |
Adder/
The Adder/Logic process block is shown in more detail in
# Bits | Description |
4 | 0000 = A + B (carry in = 0) |
0001 = A + B (carry in = carry out of previous operation) | |
0010 = A + B + 1 (carry in = 1) | |
0011 = A + 1 (increments A) | |
0100 = A − B − 1 (carry in = 0) | |
0101 = A − B (carry in = carry out of previous operation) | |
0110 = A − B (carry in = 1) | |
0111 = A − 1 (decrements A) | |
1000 = NOP | |
1001 = ABS(A − B) | |
1010 = MIN(A, B) | |
1011 = MAX(A, B) | |
1100 = A AND B (both A &B can be inverted, see below) | |
1101 = A OR B (both A &B can be inverted, see below) | |
1110 = A XOR B (both A &B can be inverted, see below) | |
1111 = A (A can be inverted, see below) | |
1 | If logical operation: |
0 = A = A | |
1 = A = NOT(A) | |
If Adder operation: | |
0 = A is unsigned | |
1 = A is signed | |
1 | If logical operation: |
0 = B = B | |
1 = B = NOT(B) | |
If Adder operation | |
0 = B is unsigned | |
1 = B is signed | |
4 | Select A [In1, In2, Out1, Out2, D0, D1, D2, D3, M, L, S, R, |
K1, K2, K3, K4] | |
4 | Select B [In1, In2, Out1, Out2, D0, D1, D2, D3, M, L, S, R, |
K1, K2, K3, K4] | |
14 | TOTAL |
Multiply/Interpolate 205
The Multiply/Interpolate process block is shown in more detail in
# Bits | Description |
4 | 0000 = (A10 * B10) + V |
0001 = (A0 * B0) + (A1 * B1) + V | |
0010 = (A10 * B10) − V | |
0011 = V − (A10 * B10) | |
0100 = Interpolate A0, B0 by f0 | |
0101 = Interpolate A0, B0 by f0, A1, B1 by f1 | |
0110 = Interpolate A0, B0 by f0, A1, B1 by f1, A2, B2 by f2 | |
0111 = Interpolate A0, B0 by f0, A1, B1 by f1, A2, B2 by f2, A3, B3 by f3 | |
1000 = Interpolate 16 bits stage 1 [M = A10 * f10] | |
1001 = Interpolate 16 bits stage 2 [M = M + (A10 * f10)] | |
1010 = Tri-linear interpolate A by f stage 1 [M = A0f0 + A1f1 + A2f2 + A3f3] | |
1011 = Tri-linear interpolate A by f stage 2 [M = M + A0f0 + A1f1 + A2f2 + A3f3] | |
1100 = Bi-linear interpolate A by f stage 1 [M = A0f0 + A1f1] | |
1101 = Bi-linear interpolate A by f stage 2 [M = M + A0f0 + A1f1] | |
1110 = Bi-linear interpolate A by f complete [M = A0f0 + A1f1 + A2f2 + A3f3] | |
1111 = NOP | |
4 | Select A [In1, In2, Out1, Out2, D0, D1, D2, D3, M, L, S, R, K1, K2, K3, K4] |
4 | Select B [In1, In2, Out1, Out2, D0, D1, D2, D3, M, L, S, R, K1, K2, K3, K4] |
If | |
Mult: | |
4 | Select V [In1, In2, Out1, Out2, D0, D1, D2, D3, K1, K2, K3, K4, Adder result, M, 0, 1] |
1 | Treat A as signed |
1 | Treat B as signed |
1 | Treat V as signed |
If | |
Interp: | |
4 | Select basis for f [In1, In2, Out1, Out2, D0, D1, D2, D3, K1, K2, K3, K4, X, X, X, X] |
1 | Select interpolation f generation from P1 or P2 |
Pn is interpreted as # fractional bits in f | |
If Pn = 0, f is range 0..255 representing 0..1 | |
2 | Reserved |
19 | TOTAL |
The same 4 bits are used for the selection of V and f, although the last 4 options for V don't generally make sense as f values. Interpolating with a factor of 1 or 0 is pointless, and the previous multiplication or current result is unlikely to be a meaningful value for f.
I/
The I/O Address Generators are shown in more detail in
-
- Image Iterators, used to iterate (reading, writing or both) through pixels of an image in a variety of ways
- Table I/O, used to randomly access pixels in images, data in tables, and to simulate FIFOs in DRAM
Each of the I/O Address Generators Data cache 76, making 2 bus connections per PU e.g 178, and a total of 8 buses over the entireVLIW Vector Processor 74. TheData cache 76 is able to service 4 of the maximum 8 requests from the 4 PUs e.g 178 each cycle. The Input and Output FIFOs are 8 entry deep 16-bit wide FIFOs. The various types of address generation (Image Iterators and Table I/O) are described in the subsequent sections.
Register Name | # bits | Description |
Reset | 0 | A write to this register halts any operations, and writes 0s to all the data |
registers of the I/O Generator. The input and output FIFOs are not | ||
cleared. | ||
Go | 0 | A write to this register restarts the counters according to the current |
setup. For example, if the I/O Generator is a Read Iterator, and the | ||
Iterator is currently halfway through the image, a write to Go will cause | ||
the reading to begin at the start of the image again. While the I/O | ||
Generator is performing, the Active bit of the Status register will be set. | ||
Halt | 0 | A write to this register stops any current activity and clears the Active |
bit of the Status register. If the Active bit is already cleared, writing to | ||
this register has no effect. | ||
Continue | 0 | A write to this register continues the I/O Generator from the current |
setup. Counters are not reset, and FIFOs are not cleared. A write to this | ||
register while the I/O Generator is active has no effect. | ||
| 1 | 0 = Don't clear FIFOs on a write to the Go bit. |
1 = Do clear FIFOs on a write to the Go bit. | ||
| 8 | Status flags |
The Status register has the following values
Register Name | # bits | Description | ||
Active | 1 | 0 = Currently inactive | ||
1 = Currently active | ||||
Reserved | 7 | — | ||
Caching
Several registers are used to control the caching mechanism, specifying which cache group to use for inputs, outputs etc. See the section on the
Register Name | # | Description |
CacheGroup1 | ||
4 | Defines cache group to read data from | |
|
4 | Defines which cache group to write data to, and |
in the case of the ImagePyramidLookup I/O | ||
mode, defines the cache to use for reading | ||
the Level Information Table. | ||
Read Image Iterators read through an image in a specific order, placing the pixel data into the local Input FIFO. Every time a client reads a pixel from the Input FIFO, the Read Iterator places the next pixel from the image (via the Data cache 76) into the FIFO.
Write Image Iterators write pixels in a specific order to write out the entire image. Clients write pixels to the Output FIFO that is in turn read by the Write Image Iterator and written to DRAM via the
Typically a VLIW process will have its input tied to a Read Iterator, and output tied to a corresponding Write Iterator. From the PU e.g 178 microcode program's perspective, the FIFO is the effective interface to DRAM. The actual method of carrying out the storage (apart from the logical ordering of the data) is not of concern. Although the FIFO is perceived to be effectively unlimited in length, in practice the FIFO is of limited length, and there can be delays storing and retrieving data, especially if several memory accesses are competing. A variety of Image Iterators exist to cope with the most common addressing requirements of image processing algorithms. In most cases there is a corresponding Write Iterator for each Read Iterator. The different Iterators are listed in the following table:
Read Iterators | Write Iterators | ||
Sequential Read | Sequential Write | ||
Box Read | — | ||
Vertical Strip Read | Vertical Strip Write | ||
The 4 bit Address Mode Register is used to determine the Iterator type:
Bit | Address Mode | |
3 | 0 = This addressing mode is an | |
2 to 0 | | |
001 = Sequential Iterator | ||
010 = Box [read only] | ||
100 = Vertical Strip | ||
remaining bit patterns are reserved | ||
The Access Specific registers are used as follows:
Register Name | LocalName | Description |
AccessSpecific1 | Flags | Flags used for reading and writing |
AccessSpecific2 | XBoxSize | Determines the size in X of Box Read. |
Valid values are 3, 5, and 7. | ||
AccessSpecific3 | YBoxSize | Determines the size in Y of Box Read. |
Valid values are 3, 5, and 7. | ||
AccessSpecific4 | BoxOffset | Offset between one pixel center |
and the next during a Box Read only. | ||
Usual value is 1, but other useful values | ||
include 2, 4, 8 . . . | ||
See Box Read for more details. | ||
The Flags register (AccessSpecific1) contains a number of flags used to determine factors affecting the reading and writing of data. The Flags register has the following composition:
Label | # | Description |
ReadEnable | ||
1 | Read data from | |
WriteEnable | ||
1 | Write data to DRAM [not valid for Box mode] | |
| 1 | Pass X (pixel) ordinate back to Input |
PassY | ||
1 | Pass Y (row) ordinate back to Input | |
Loop | ||
1 | 0 = Do not loop through | |
1 = Loop through data | ||
Reserved | 11 | Must be 0 |
Notes on ReadEnable and WriteEnable:
-
- When ReadEnable is set, the I/O Address Generator acts as a Read Iterator, and therefore reads the image in a particular order, placing the pixels into the Input FIFO.
- When WriteEnable is set, the I/O Address Generator acts as a Write Iterator, and therefore writes the image in a particular order, taking the pixels from the Output FIFO.
- When both ReadEnable and WriteEnable are set, the I/O Address Generator acts as a Read Iterator and as a Write Iterator, reading pixels into the Input FIFO, and writing pixels from the Output FIFO. Pixels are only written after they have been read—i.e. the Write Iterator will never go faster than the Read Iterator. Whenever this mode is used, care should be taken to ensure balance between in and out processing by the VLIW microcode. Note that separate cache groups can be specified on reads and writes by loading different values in CacheGroup1 and CacheGroup2.
Notes on PassX and PassY: - If PassX and PassY are both set, the Y ordinate is placed into the Input FIFO before the X ordinate.
- PassX and PassY are only intended to be set when the ReadEnable bit is clear. Instead of passing the ordinates to the address generator, the ordinates are placed directly into the Input FIFO. The ordinates advance as they are removed from the FIFO.
- If WriteEnable bit is set, the VLIW program must ensure that it balances reads of ordinates from the Input FIFO with writes to the Output FIFO, as writes will only occur up to the ordinates (see note on ReadEnable and WriteEnable above).
Notes on Loop: - If the Loop bit is set, reads will recommence at [StartPixel, StartRow] once it has reached [EndPixel, EndRow]. This is ideal for processing a structure such a convolution kernel or a dither cell matrix, where the data must be read repeatedly.
- Looping with ReadEnable and WriteEnable set can be useful in an environment keeping a single line history, but only where it is useful to have reading occur before writing. For a FIFO effect (where writing occurs before reading in a length constrained fashion), use an appropriate Table I/O addressing mode instead of an Image Iterator.
- Looping with only WriteEnable set creates a written window of the last N pixels. This can be used with an asynchronous process that reads the data from the window. The Artcard Reading algorithm makes use of this mode.
Sequential Read and Write Iterators
FIG. 17 illustrates the pixel data format. The simplest Image Iterators are the Sequential Read Iterator and corresponding Sequential Write Iterator. The Sequential Read Iterator presents the pixels from a channel one line at a time from top to bottom, and within a line, pixels are presented left to right. The padding bytes are not presented to the client. It is most useful for algorithms that must perform some process on each pixel from an image but don't care about the order of the pixels being processed, or want the data specifically in this order. Complementing the Sequential Read Iterator is the Sequential Write Iterator. Clients write pixels to the Output FIFO. A Sequential Write Iterator subsequently writes out a valid image using appropriate caching and appropriate padding bytes. Each Sequential Iterator requires access to 2 cache lines. When reading, while 32 pixels are presented from one cache line, the other cache line can be loaded from memory. When writing, while 32 pixels are being filled up in one cache line, the other can be being written to memory.
A process that performs an operation on each pixel of an image independently would typically use a Sequential Read Iterator to obtain pixels, and a Sequential Write Iterator to write the new pixel values to their corresponding locations within the destination image. Such a process is shown inFIG. 18 . In most cases, the source and destination images are different, and are represented by 2 I/O Address Generators
Box Read Iterator
The Box Read Iterator is used to present pixels in an order most useful for performing operations such as general-purpose filters and convolve. The Iterator presents pixel values in a square box around the sequentially read pixels. The box is limited to being 1, 3, 5, or 7 pixels wide in X and Y (set XBoxSize and YBoxSize—they must be the same value or 1 in one dimension and 3, 5, or 7 in the other). The process is shown inFIG. 19 :
BoxOffset: This special purpose register is used to determine a sub-sampling in terms of which input pixels will be used as the center of the box. The usual value is 1, which means that each pixel is used as the center of the box. The value “2” would be useful in scaling an image down by 4:1 as in the case of building an image pyramid. Using pixel addresses from the previous diagram, the box would be centered onpixel 0, then 2, 8, and 10. The Box Read Iterator requires access to a maximum of 14 (2×7) cache lines. While pixels are presented from one set of 7 lines, the other cache lines can be loaded from memory.
Box Write Iterator
There is no corresponding Box Write Iterator, since the duplication of pixels is only required on input. A process that uses the Box Read Iterator for input would most likely use the Sequential Write Iterator for output since they are in sync. A good example is the convolver, where N input pixels are read to calculate 1 output pixel. The process flow is as illustrated inFIG. 20 . The source and destination images should not occupy the same memory when using a Box Read Iterator, as subsequent lines of an image require the original (not newly calculated) values.
Vertical-Strip Read and Write Iterators
In some instances it is necessary to write an image in output pixel order, but there is no knowledge about the direction of coherence in input pixels in relation to output pixels. An example of this is rotation. If an image is rotated 90 degrees, and we process the output pixels horizontally, there is a complete loss of cache coherence. On the other hand, if we process the output image one cache line's width of pixels at a time and then advance to the next line (rather than advance to the next cache-line's worth of pixels on the same line), we will gain cache coherence for our input image pixels. It can also be the case that there is known ‘block’ coherence in the input pixels (such as color coherence), in which case the read governs the processing order, and the write, to be synchronized, must follow the same pixel order.
The order of pixels presented as input (Vertical-Strip Read), or expected for output (Vertical-Strip Write) is the same. The order ispixels 0 to 31 fromline 0, thenpixels 0 to 31 ofline 1 etc for all lines of the image, thenpixels 32 to 63 ofline 0,pixels 32 to 63 ofline 1 etc. In the final vertical strip there may not be exactly 32 pixels wide. In this case only the actual pixels in the image are presented or expected as input. This process is illustrated inFIG. 21 .
process that requires only a Vertical-Strip Write Iterator will typically have a way of mapping input pixel coordinates given an output pixel coordinate. It would access the input image pixels according to this mapping, and coherence is determined by having sufficient cache lines on the ‘random-access’ reader for the input image. The coordinates will typically be generated by setting the PassX and PassY flags on the VerticalStripWrite Iterator, as shown in the process overview illustrated inFIG. 22 .
It is not meaningful to pair a Write Iterator with a Sequential Read Iterator or a Box read Iterator, but a Vertical-Strip Write Iterator does give significant improvements in performance when there is a non trivial mapping between input and output coordinates.
It can be meaningful to pair a Vertical Strip Read Iterator and Vertical Strip Write Iterator. In this case it is possible to assign both to asingle ALU 188 if input and output images are the same. If coordinates are required, a further Iterator must be used with PassX and PassY flags set. The Vertical Strip Read/Write Iterator presents pixels to the Input FIFO, and accepts output pixels from the Output FIFO. Appropriate padding bytes will be inserted on the write. Input and output require a minimum of 2 cache lines each for good performance.
1D, 2D and 3D tables are supported, with particular modes targeted at interpolation. To reduce complexity on the VLIW client side, the index values are treated as fixed-point numbers, with AccessSpecific registers defining the fixed point and therefore which bits should be treated as the integer portion of the index. Data formats are restricted forms of the general Image Characteristics in that the PixelOffset register is ignored, the data is assumed to be contiguous within a row, and can only be 8 or 16 bits (1 or 2 bytes) per data element. The 4 bit Address Mode Register is used to determine the I/O type:
Bit | Address Mode | |
3 | 1 = This addressing mode is Table I/ | |
2 to 0 | 000 = | |
001 = 1D Interpolate (linear) | ||
010 = DRAM FIFO | ||
011 = Reserved | ||
100 = 2D Interpolate (bi-linear) | ||
101 = Reserved | ||
110 = 3D Interpolate (tri-linear) | ||
111 = Image Pyramid Lookup | ||
The access specific registers are:
Register Name | LocalName | #bits | Description |
AccessSpecific1 | Flags | 8 | General flags for reading and writing. |
See below for more information. | |||
AccessSpecific2 | FractX | 8 | Number of fractional bits in X index |
AccessSpecific3 | FractY | 8 | Number of fractional bits in Y index |
AccessSpecific4 | FractZ | 8 | Number of fractional bits in Z index |
(low 8 bits/next 12 or 24 | | 12 or 24 | See below |
bits)) | |||
FractX, FractY, and FractZ are used to generate addresses based on indexes, and interpret the format of the index in terms of significant bits and integer/fractional components. The various parameters are only defined as required by the number of dimensions in the table being indexed. A 1D table only needs FractX, a 2D table requires FractX and FractY. Each Fract_ value consists of the number of fractional bits in the corresponding index. For example, an X index may be in the format 5:3. This would indicate 5 bits of integer, and 3 bits of fraction. FractX would therefore be set to 3. A simple 1D lookup could have the format 8:0, i.e. no fractional component at all. FractX would therefore be 0. ZOffset is only required for 3D lookup and takes on two different interpretations. It is described more fully in the 3D-table lookup section. The Flags register (AccessSpecific1) contains a number of flags used to determine factors affecting the reading (and in one case, writing) of data. The Flags register has the following composition:
Label | # | Description | ||
ReadEnable | ||||
1 | Read data from | |||
WriteEnable | ||||
1 | Write data to DRAM | |||
[only valid for 1D direct lookup] | ||||
| 1 | 0 = 8 | ||
1 = 16 bit data | ||||
Reserved | 5 | Must be 0 | ||
With the exception of the 1D Direct Lookup and DRAM FIFO, all Table I/O modes only support reading, and not writing. Therefore the ReadEnable bit will be set and the WriteEnable bit will be clear for all I/O modes other than these two modes. The 1D Direct Lookup supports 3 modes:
-
- Read only, where the ReadEnable bit is set and the WriteEnable bit is clear
- Write only, where the ReadEnable bit is clear and the WriteEnable bit is clear
- Read-Modify-Write, where both ReadEnable and the WriteEnable bits are set
The different modes are described in the 1D Direct Lookup section below. The DRAM FIFO mode supports only 1 mode: - Write-Read mode, where both ReadEnable and the WriteEnable bits are set
This mode is described in the DRAM FIFO section below. The DataSize flag determines whether the size of each data elements of the table is 8 or 16 bits. Only the two data sizes are supported. 32 bit elements can be created in either of 2 ways depending on the requirements of the process: - Reading from 2 16-bit tables simultaneously and combining the result. This is convenient if timing is an issue, but has the disadvantage of consuming 2 I/
O Address Generators - Reading from a 16-bit table twice and combining the result. This is convenient since only 1 lookup is used, although different indexes must be generated and passed into the lookup.
1 Dimensional Structures
Direct Lookup
A direct lookup is a simple indexing into a 1 dimensional lookup table. Clients can choose between 3 access modes by setting appropriate bits in the Flags register: - Read only
- Write only
- Read-Modify-Write
Read Only
A client passes the fixed-point index X into the Output FIFO, and the 8 or 16-bit value at Table[Int(X)] is returned in the Input FIFO. The fractional component of the index is completely ignored. If the index is out of bounds, the DuplicateEdge flag determines whether the edge pixel or ConstantPixel is returned. The address generation is straightforward: - If DataSize indicates 8 bits, X is barrel-shifted right FractX bits, and the result is added to the table's base address ImageStart.
- If DataSize indicates 16 bits, X is barrel-shifted right FractX bits, and the result shifted left 1 bit (bit0 becomes 0) is added to the table's base address ImageStart.
The 8 or 16-bit data value at the resultant address is placed into the Input FIFO. Address generation takes 1 cycle, and transferring the requested data from the cache to the Output FIFO also takes 1 cycle (assuming a cache hit). For example, assume we are looking up values in a 256-entry table, where each entry is 16 bits, and the index is a 12 bit fixed-point format of 8:4. FractX should be 4, andDataSize 1. When an index is passed to the lookup, we shift right 4 bits, then add the result shifted left 1 bit to ImageStart.
Write Only
A client passes the fixed-point index X into the Output FIFO followed by the 8 or 16-bit value that is to be written to the specified location in the table. A complete transfer takes a minimum of 2 cycles. 1 cycle for address generation, and 1 cycle to transfer the data from the FIFO to DRAM. There can be an arbitrary number of cycles between a VLIW process placing the index into the FIFO and placing the value to be written into the FIFO. Address generation occurs in the same way as Read Only mode, but instead of the data being read from the address, the data from the Output FIFO is written to the address. If the address is outside the table range, the data is removed from the FIFO but not written to DRAM.
Read-Modify-Write
A client passes the fixed-point index X into the Output FIFO, and the 8 or 16-bit value at Table[Int(X)] is returned in the Input FIFO. The next value placed into the Output FIFO is then written to Table[Int(X)], replacing the value that had been returned earlier. The general processing loop then, is that a process reads from a location, modifies the value, and writes it back. The overall time is 4 cycles: - Generate address from index
- Return value from table
- Modify value in some way
- Write it back to the table
There is no specific read/write mode where a client passes in a flag saying “read from X” or “write to X”. Clients can simulate a “read from X” by writing the original value, and a “write to X” by simply ignoring the returned value. However such use of the mode is not encouraged since each action consumes a minimum of 3 cycles (the modify is not required) and 2 data accesses instead of 1 access as provided by the specific Read and Write modes.
Interpolate Table
This is the same as a Direct Lookup in Read mode except that two values are returned for a given fixed-point index X instead of one. The values returned are Table[Int(X)], and Table[Int(X)+1]. If either index is out of bounds the DuplicateEdge flag determines whether the edge pixel or ConstantPixel is returned. Address generation is the same as Direct Lookup, with the exception that the second address is simply Address1+1 or 2 depending on 8 or 16 bit data. Transferring the requested data to the Output FIFO takes 2 cycles (assuming a cache hit), although two 8-bit values may actually be returned from the cache to the Address Generator in a single 16-bit fetch.
DRAM FIFO
A special case of a read/write 1D table is a DRAM FIFO. It is often necessary to have a simulated FIFO of a given length using DRAM and associated caches. With a DRAM FIFO, clients do not index explicitly into the table, but write to the Output FIFO as if it was one end of a FIFO and read from the Input FIFO as if it was the other end of the same logical FIFO. 2 counters keep track of input and output positions in the simulated FIFO, and cache to DRAM as needed. Clients need to set both ReadEnable and WriteEnable bits in the Flags register.
An example use of a DRAM FIFO is keeping a single line history of some value. The initial history is written before processing begins. As the general process goes through a line, the previous line's value is retrieved from the FIFO, and this line's value is placed into the FIFO (this line will be the previous line when we process the next line). So long as input and outputs match each other on average, the Output FIFO should always be full. Consequently there is effectively no access delay for this kind of FIFO (unless the total FIFO length is very small—say 3 or 4 bytes, but that would defeat the purpose of the FIFO).
2 Dimensional Tables
Direct Lookup
A 2 dimensional direct lookup is not supported. Since all cases of 2D lookups are expected to be accessed for bi-linear interpolation, a special bi-linear lookup has been implemented.
Bi-Linear Lookup
This kind of lookup is necessary for bi-linear interpolation of data from a 2D table. Given fixed-point X and Y coordinates (placed into the Output FIFO in the order Y, X), 4 values are returned after lookup. The values (in order) are: - Table[Int(X), Int(Y)]
- Table[Int(X)+1, Int(Y)]
- Table[Int(X), Int(Y)+1]
- Table[Int(X)+1, Int(Y)+1]
The order of values returned gives the best cache coherence. If the data is 8-bit, 2 values are returned each cycle over 2 cycles with the low order byte being the first data element. If the data is 16-bit, the 4 values are returned in 4 cycles, 1 entry per cycle. Address generation takes 2 cycles. The first cycle has the index (Y) barrel-shifted right FractY bits being multiplied by RowOffset, with the result added to ImageStart. The second cycle shifts the X index right by FractX bits, and then either the result (in the case of 8 bit data) or the result shifted left 1 bit (in the case of 16 bit data) is added to the result from the first cycle. This gives us address Adr=address of Table[Int(X), Int(Y)]:
We keep a copy of Adr in AdrOld for use fetching subsequent entries.
-
- If the data is 8 bits, the timing is 2 cycles of address generation, followed by 2 cycles of data being returned (2 table entries per cycle).
- If the data is 16 bits, the timing is 2 cycles of address generation, followed by 4 cycles of data being returned (1 entry per cycle)
The following 2 tables show the method of address calculation for 8 and 16 bit data sizes:
Calculation while fetching | |
|
2 × 8-bit data entries from |
1 | Adr = Adr + |
2 | <preparing next lookup> |
Calculation while fetching | |
|
1 × 16-bit data entry from |
1 | Adr = Adr + 2 |
2 | Adr = AdrOld + |
3 | Adr = Adr + 2 |
4 | <preparing next lookup> |
Tri-Linear Lookup
This type of lookup is useful for 3D tables of data, such as color conversion tables. The standard image parameters define a single XY plane of the data—i.e. each plane consists of ImageHeight rows, each row containing RowOffset bytes. In most circumstances, assuming contiguous planes, one XY plane will be ImageHeight×RowOffset bytes after another. Rather than assume or calculate this offset, the software via the CPU must provide it in the form of a 12-bit ZOffset register. In this form of lookup, given 3 fixed-point indexes in the order Z, Y, X, 8 values are returned in order from the lookup table:
-
- Table[Int(X), Int(Y), Int(Z)]
- Table[Int(X)+1, Int(Y), Int(Z)]
- Table[Int(X), Int(Y)+1, Int(Z)]
- Table[Int(X)+1, Int(Y)+1, Int(Z)]
- Table[Int(X), Int(Y), Int(Z)+1]
- Table[Int(X)+1, Int(Y), Int(Z)+1]
- Table[Int(X), Int(Y)+1, Int(Z)+1]
- Table[Int(X)+1, Int(Y)+1, Int(Z)+1]
The order of values returned gives the best cache coherence. If the data is 8-bit, 2 values are returned each cycle over 4 cycles with the low order byte being the first data element. If the data is 16-bit, the 4 values are returned in 8 cycles, 1 entry per cycle. Address generation takes 3 cycles. The first cycle has the index (Z) barrel-shifted right FractZ bits being multiplied by the 12-bit ZOffset and added to ImageStart. The second cycle has the index (Y) barrel-shifted right FractY bits being multiplied by RowOffset, with the result added to the result of the previous cycle. The second cycle shifts the X index right by FractX bits, and then either the result (in the case of 8 bit data) or the result shifted left 1 bit (in the case of 16 bit data) is added to the result from the second cycle. This gives us address Adr=address of Table[Int(X), Int(Y), Int(Z)]:
We keep a copy of Adr in AdrOld for use fetching subsequent entries.
-
- If the data is 8 bits, the timing is 2 cycles of address generation, followed by 2 cycles of data being returned (2 table entries per cycle).
- If the data is 16 bits, the timing is 2 cycles of address generation, followed by 4 cycles of data being returned (1 entry per cycle)
The following 2 tables show the method of address calculation for 8 and 16 bit data sizes:
Calculation while fetching | |
|
2 × 8-bit data entries from |
1 | Adr = Adr + |
2 | Adr = AdrOld + |
3 | Adr = Adr + |
4 | <preparing next lookup> |
Calculation while fetching | |
| 1 × 16-bit data entries from |
1 | Adr = Adr + 2 |
2 | Adr = AdrOld + |
3 | Adr =Adr + 2 |
4 | Adr, AdrOld = AdrOld + |
5 | Adr = Adr + 2 |
6 | Adr = AdrOld + |
7 | Adr = Adr + 2 |
8 | <preparing next lookup> |
In both cases, the cycles of address generation can overlap the insertion of the indexes into the FIFO, so the effective timing for a single one-off lookup can be as low as 1 cycle for address generation, and 4 cycles of return data. If the generation of indexes is 2 steps ahead of the results, then there is no effective address generation time, and the data is simply produced at the appropriate rate (4 or 8 cycles per set).
Image Pyramid Lookup
During brushing, tiling, and warping it is necessary to compute the average color of a particular area in an image. Rather than calculate the value for each area given, these functions make use of an image pyramid. The description and construction of an image pyramid is detailed in the section on Internal Image Formats in the
-
- The pixel at [Int(X), Int(Y)], level Int(Z)
- The pixel at [Int(X)+1, Int(Y)], level Int(Z)
- The pixel at [Int(X), Int(Y)+1], level Int(Z)
- The pixel at [Int(X)+1, Int(Y)+1], level Int(Z)
- The pixel at [Int(X), Int(Y)], level Int(Z)+1
- The pixel at [Int(X)+1, Int(Y)], level Int(Z)+1
- The pixel at [Int(X), Int(Y)+1], level Int(Z)+1
- The pixel at [Int(X)+1, Int(Y)+1], level Int(Z)+1
The 8 pixels are returned as 4×16 bit entries, with X and X+1 entries combined hi/lo. For example, if the scaled (X, Y) coordinate was (10.4, 12.7) the first 4 pixels returned would be: (10, 12), (11, 12), (10, 13) and (11, 13). When a coordinate is outside the valid range, clients have the choice of edge pixel duplication or returning of a constant color value via the DuplicateEdgePixels and ConstantPixel registers (only the low 8 bits are used). When the Image Pyramid has been constructed, there is a simple mapping fromlevel 0 coordinates to level Z coordinates. The method is simply to shift the X or Y coordinate right by Z bits. This must be done in addition to the number of bits already shifted to retrieve the integer portion of the coordinate (i.e. shifting right FractX and FractY bits for X and Y ordinates respectively). To find the ImageStart and RowOffset value for a given level of the image pyramid, the 24-bit ZOffset register is used as a pointer to a Level Information Table. The table is an array of records, each representing a given level of the pyramid, ordered by level number. Each record consists of a 16-bit offset ZOffset from ImageStart to that level of the pyramid (64-byte aligned address as lower 6 bits of the offset are not present), and a 12 bit ZRowOffset for that level.Element 0 of the table would contain a ZOffset of 0, and a ZRowOffset equal to the general register RowOffset, as it simply points to the full sized image. The ZOffset value at element N of the table should be added to ImageStart to yield the effective ImageStart of level N of the image pyramid. The RowOffset value in element N of the table contains the RowOffset value for level N. The software running on the CPU must set up the table appropriately before using this addressing mode. The actual address generation is outlined here in a cycle by cycle description:
Load | From | |||
Cycle | Register | | Other Operations | |
0 | — | — | ZAdr = ShiftRight(Z, FractZ) + ZOffset | |
ZInt = ShiftRight(Z, FractZ) | ||||
1 | ZOffset | Zadr | ZAdr += 2 | |
YInt = ShiftRight(Y, FractY) | ||||
2 | ZRowOffset | ZAdr | ZAdr += 2 | |
YInt = ShiftRight(YInt, ZInt) | ||||
Adr = ZOffset + | ||||
3 | ZOffset | ZAdr | ZAdr += 2 | |
Adr += ZrowOffset * YInt | ||||
XInt = ShiftRight(X, FractX) | ||||
4 | ZAdr | ZAdr | Adr += ShiftRight(XInt, ZInt) | |
ZOffset += ShiftRight(XInt, 1) | ||||
5 | FIFO | Adr | Adr += ZrowOffset | |
ZOffset += | ||||
6 | FIFO | Adr | Adr = (ZAdr * ShiftRight(Yint, 1)) + | |
| ||||
7 | FIFO | Adr | Adr += | |
8 | FIFO | Adr | < | |
The address generation as described can be achieved using a single Barrel Shifter, 2 adders, and a single 16×16 multiply/add unit yielding 24 bits. Although some cycles have 2 shifts, they are either the same shift value (i.e. the output of the Barrel Shifter is used two times) or the shift is 1 bit, and can be hard wired. The following internal registers are required: ZAdr, Adr, ZInt, YInt, XInt, ZRowOffset, and ZImageStart. The _Int registers only need to be 8 bits maximum, while the others can be up to 24 bits. Since this access method only reads from, and does not write to image pyramids, the CacheGroup2 is used to lookup the Image Pyramid Address Table (via ZAdr). CacheGroup1 is used for lookups to the image pyramid itself (via Adr). The address table is around 22 entries (depending on original image size), each of 4 bytes. Therefore 3 or 4 cache lines should be allocated to CacheGroup2, while as many cache lines as possible should be allocated to CacheGroup1. The timing is 8 cycles for returning a set of data, assuming that
Generation of Coordinates Using
Some functions that are linked to Write Iterators require the X and/or Y coordinates of the current pixel being processed in part of the processing pipeline. Particular processing may also need to take place at the end of each row, or column being processed. In most cases, the PassX and PassY flags should be sufficient to completely generate all coordinates. However, if there are special requirements, the following functions can be used. The calculation can be spread over a number of ALUs, for a single cycle generation, or be in a
The coordinate generator counts up to ImageWidth in the X ordinate, and once per ImageWidth pixels increments the Y ordinate. The actual process is illustrated in
Constant | Value | ||
K1 | ImageWidth | ||
K2 | ImageHeight (optional) | ||
The following registers are used to hold temporary variables:
Variable | Value | ||
Reg1 | X (starts at 0 each line) | ||
Reg2 | Y (starts at 0) | ||
The requirements are summarized as follows:
Requirements | *+ | + | R | K | | Iterators | ||
General | ||||||||
0 | ¾ | 2 | ½ | 0 | 0 | |||
|
0 | ¾ | 2 | ½ | 0 | 0 | ||
Constant | Value | ||
K1 | 32 | ||
K2 | ImageWidth | ||
K3 | ImageHeight | ||
The following registers are used to hold temporary variables:
Variable | Value |
Reg1 | StartX (starts at 0, and is incremented by 32 once per |
vertical strip) | |
Reg2 | X |
Reg3 | EndX (starts at 32 and is incremented by 32 to a maximum of |
ImageWidth) once per vertical strip) | |
Reg4 | Y |
The requirements are summarized as follows:
Requirements | *+ | + | R | K | | Iterators | ||
General | ||||||||
0 | 4 | 4 | 3 | 0 | 0 | |||
| 0 | 4 | 4 | 3 | 0 | 0 | ||
The calculations that occur once per vertical strip (2 additions, one of which has an associated MIN) are not included in the general timing statistics because they are not really part of the per pixel timing. However they do need to be taken into account for the programming of the microcode for the particular function.
Image Sensor Interface (ISI 83)
The Image Sensor Interface (ISI 83) takes data from the CMOS Image Sensor and makes it available for storage in DRAM. The image sensor has an aspect ratio of 3:2, with a typical resolution of 750×500 samples, yielding 375K (8 bits per pixel). Each 2×2 pixel block has the configuration as shown in
-
- A small VLIW program reads the pixels from the FIFO and writes them to DRAM via a Sequential Write Iterator.
- The Photo Image in DRAM is rotated 90, 180 or 270 degrees according to the orientation of the camera when the photo was taken.
If the rotation is 0 degrees, then step 1 merely writes the Photo Image out to the final Photo Image location andstep 2 is not performed. If the rotation is other than 0 degrees, the image is written out to a temporary area (for example into the Print Image memory area), and then rotated duringstep 2 into the final Photo Image location.Step 1 is very simple microcode, taking data from theVLIW Input FIFO 78 and writing it to a Sequential Write Iterator. Step 2 's rotation is accomplished by using the accelerated Vark Affine Transform function. The processing is performed in 2 steps in order to reduce design complexity and to re-use the Vark affine transform rotate logic already required for images. This is acceptable since both steps are completed in approximately 0.03 seconds, a time imperceptible to the operator of the Artcam. Even so, the read process is sensor speed bound, taking 0.02 seconds to read the full frame, and approximately 0.01 seconds to rotate the image.
The orientation is important for converting between the sensed Photo Image and the internal format image, since the relative positioning of R, G, and B pixels changes with orientation. The processed image may also have to be rotated during the Print process in order to be in the correct orientation for printing. The 3D model of the Artcam has 2 image sensors, with their inputs multiplexed to a single ISI 83 (different microcode, but same ACP 31). Since each sensor is a frame store, both images can be taken simultaneously, and then transferred to memory one at a time.
Display Controller 88
When the “Take” button on an Artcam is half depressed, the TFT will display the current image from the image sensor (converted via a simple VLIW process). Once the Take button is fully depressed, the Taken Image is displayed. When the user presses the Print button and image processing begins, the TFT is turned off. Once the image has been printed the TFT is turned on again. TheDisplay Controller 88 is used in those Artcam models that incorporate a flat panel display. An example display is a TFT LCD ofresolution 240×160 pixels. The structure of theDisplay Controller 88 isl illustrated inFIG. 29 . TheDisplay Controller 88 State Machine contains registers that control the timing of the Sync Generation, where the display image is to be taken from (in DRAM via theData cache 76 via a specific Cache Group), and whether the TFT should be active or not (via TFT Enable) at the moment. The CPU can write to these registers via the low speed bus. Displaying a 240×160 pixel image on an RGB TFT requires 3 components per pixel. The image taken from DRAM is displayed via 3 DACs, one for each of the R, G, and B output signals. At an image refresh rate of 30 frames per second (60 fields per second) theDisplay Controller 88 requires data transfer rates of:
240×160×3×30=3.5 MB per second
This data rate is low compared to the rest of the system. However it is high enough to cause VLIW programs to slow down during the intensive image processing. The general principles of TFT operation should reflect this.
Image Data Formats
-
- CCD Image, which is the Input Image captured from the CCD.
- Internal Image format—the Image format utilised internally by the Artcam device.
- Print Image—the Output Image Format Printed by the Artcam
-
- Different CCDs to be used in different cameras
- Different inks (in different print rolls over time) to be used in the same camera
- Separation of CCD selection from ACP design path
- A well defined internal color space for accurate color processing
Artcard Interface 87
The Artcard Interface (AI) takes data from the linear image Sensor while an Artcard is passing under it, and makes that data available for storage in DRAM. The image sensor produces 11,000 8-bit samples per scanline, sampling the Artcard at 4800 dpi. The AI is a state machine that sends control information to the linear sensor, including LineSync pulses and PixelClock pulses in order to read the image. Pixels are read from the linear sensor and placed into theVLIW Input FIFO 78. The VLIW is then able to process and/or store the pixels. The AI has only a few registers:
Description | |
Register Name | |
NumPixels | The number of pixels in a sensor line (approx 11,000) |
Status | The Print Head Interface's Status Register |
PixelsRemaining | The number of bytes remaining in the current line |
Actions | |
Reset | A write to this register resets the AI, stops any scanning, and loads all |
registers with 0. | |
Scan | A write to this register with a non-zero value sets the Scanning bit of the |
Status register, and causes the Artcard Interface Scan cycle to start. | |
A write to this register with 0 stops the scanning process and clears the | |
Scanning bit in the Status register. | |
The Scan cycle causes the AI to transfer NumPixels bytes from the sensor | |
to the | |
appropriately. Upon completion of NumPixels bytes, a LineSync pulse is | |
given and the Scan cycle restarts. | |
The PixelsRemaining register holds the number of pixels remaining to be | |
read on the current scanline. | |
Note that the CPU should clear the
Bit Name | | Description |
Scanning | ||
1 | If set, the AI is currently scanning, with the number | |
of pixels remaining to be transferred from the | ||
current line recorded in PixelsRemaining. | ||
If clear, the AI is not currently scanning, so is not | ||
transferring pixels to the | ||
Artcard Interface (AI) 87
|
Detect data area on | ||
Phase | |||
2. | Detect bit pattern from Artcard based on CCD pixels, | ||
and write as bytes. | |||
|
Descramble and XOR the byte- | ||
Phase | |||
4. | Decode data (Reed-Solomon decode) | ||
|
Detect data area on | ||
Phase | |||
2. | Detect bit pattern from Artcard based on CCD pixels, | ||
and write as bytes. | |||
|
Descramble and XOR the byte- | ||
Phase | |||
4. | Decode data (Reed-Solomon decode) | ||
Short | Used to detect white dot. | RunLength < 16 |
Medium | Used to detect runs of black above | 16 <= RunLength < 48 |
or below the white dot in the | ||
center of the target. | ||
Long | Used to detect run lengths of black to | RunLength >= 48 |
the left and right of the center | ||
dot in the target. | ||
Looking at the top three entries in the
| S1 = white long | We have detected a black column of the target to |
S2 = black long | the left of or to the right of the white center dot. | |
S3 = white medium/ | ||
Case | ||
2 | S1 = white long | If we've been processing a series of columns of |
S2 = black medium | Case 1s, then we have probably detected the | |
S3 = white short | white dot in this column. We know that the next | |
Previous 8 columns were | entry will be black (or it would have been | |
included in the white S3 entry), but the number of | ||
black pixels is in question. Need to verify by | ||
checking after the next FIFO advance (see Case | ||
3). | ||
| Prev = | We have detected part of the white dot. We |
S3 = black med | expect around 3 of these, and then some more | |
columns of | ||
Preferably, the following information per region band is kept:
|
1 | ||
BlackDetectCount | |||
4 | |||
WhiteDetectCount | |||
3 | |||
PrevColumnStartPixel | |||
15 | |||
TargetColumn ordinate | |||
16 bits (15:1) | |||
|
16 bits (15:1) | ||
|
7 bytes | ||
(rounded to 8 bytes for easy addressing) | |||
1 | TargetDetected[0-15] := 0 |
BlackDetectCount[0-15] := 0 | |
WhiteDetectCount[0-15] := 0 | |
TargetRow[0-15] := 0 | |
TargetColumn[0-15] := 0 | |
PrevColStartPixel[0-15] := 0 | |
CurrentColumn := 0 | |
2 | |
3 | |
4 | If (CurrentColumn <= LastValidColumn) |
| |
The steps involved in the processing a column (Process Column) are as follows:
1 | S2StartPixel := 0 |
FIFO := 0 | |
BlackDetectCount := 0 | |
WhiteDetectCount := 0 | |
ThisColumnDetected := FALSE | |
PrevCaseWasCase2 := FALSE | |
2 | If(! TargetDetected[Target]) &(! ColumnDetected[Target]) |
| |
EndIf | |
3 | PrevCaseWasCase2 := Case=2 |
4 | Advance FIFO |
BlackDetectCount[target] < 8 | □ := ABS(S2StartPixel − PrevColStartPixel[Target]) |
OR | If (0<=□< 2) |
WhiteDetectCount[Target] = 0 | BlackDetectCount[Target]++ (max value =8) |
Else | |
BlackDetectCount[Target] := 1 | |
WhiteDetectCount[Target] := 0 | |
EndIf | |
PrevColStartPixel[Target] := S2StartPixel | |
ColumnDetected[Target] := TRUE | |
BitDetected = 1 | |
BlackDetectCount[target] >= 8 | PrevColStartPixel[Target] := S2StartPixel |
WhiteDetectCount[Target] != 0 | ColumnDetected[Target] := TRUE |
BitDetected = 1 | |
TargetDetected[Target] := TRUE | |
TargetColumn[Target] := CurrentColumn − 8 − | |
(WhiteDetectCount[Target]/2) | |
Case 2:
PrevCaseWasCase2 = TRUE | If (WhiteDetectCount[Target] < 2) |
BlackDetectCount[Target] >= 8 | TargetRow[Target] = S2StartPixel + (S2RunLength/2) |
WhiteDetectCount=1 | EndIf |
□ := ABS(S2StartPixel − PrevColStartPixel[Target]) | |
If (0<=□< 2) | |
WhiteDetectCount[Target]++ | |
Else | |
WhiteDetectCount[Target] := 1 | |
EndIf | |
PrevColStartPixel[Target] := S2StartPixel | |
ThisColumnDetected := TRUE | |
BitDetected = 0 | |
TargetA := 0 | ||
MaxFound := 0 | ||
BestLine := 0 | ||
While (TargetA < 15) | ||
If (TargetA is Valid) | ||
TargetB:= TargetA + 1 | ||
While (TargetB<= 15) | ||
If (TargetB is valid) | ||
CurrentLine := line between TargetA and TargetB | ||
TargetC := 0; | ||
While (TargetC <= 15) | ||
If (TargetC valid AND TargetC on line AB) | ||
TargetsHit++ | ||
EndIf | ||
If (TargetsHit > MaxFound) | ||
MaxFound := TargetsHit | ||
BestLine := CurrentLine | ||
EndIf | ||
TargetC++ | ||
EndWhile | ||
EndIf | ||
TargetB ++ | ||
EndWhile | ||
EndIf | ||
TargetA++ | ||
EndWhile | ||
If (MaxFound < 8) | ||
Card is Invalid | ||
Else | ||
Store expected centroids for rows based on BestLine | ||
EndIf | ||
Δrow=(rowTargetA−rowTargetB)/(B−A)
Δcolumn=(columnTargetA−columnTargetB)/(B−A)
Then we calculate the position of Target0:
row=rowTargetA−(A*Δrow)
column=columnTargetA−(A*Δcolumn)
(columnDotColumnTop=columnTarget0+(Δrow/8)
(rowDotColumnTop=
Δrow=Δrow/192
Δcolumn=Δcolumn/192
rownext=row+Δrow
columnnext=column+Δcolumn
-
- Δrow and Δcolumn (2 @ 4 bits each=1 byte)
- row history (3 bits per row, 2 rows are stored per byte)
76*(3150/32)+2*3150=13,824 ns=5% of bandwidth
Read | 5 | ||
Read | |||
3 columns of | 19% | ||
Read/Write detected bits into | 10% | ||
Read/ | 5 | ||
TOTAL | |||
39% | |||
Detecting a Dot
Bit history | Expected |
000 | 00000 |
001 | 0000D |
010 | |
011 | 0DFDD |
100 | |
101 | |
110 | |
111 | DDFDD |
2*(76(3150/32)+2*3150)=27,648 ns=10% of bandwidth
76((3150/2)/32)+2*(3150/2)=4,085 ns=2.5% of bandwidth
5*(((9450/(128*2))*320)*128/86)=88, 112 ns=31% of bandwidth.
Read/Write centroid Δ | 10% | ||
Read bit history | 2.5 | ||
Read | |||
5 columns of | 31% | ||
TOTAL | 43.5% | ||
Memory Usage for Phase 2:
| 24 bits (16:8) * 2 * 3150 = 18,900 byes |
| 3 bits * 3150 entries (2 per byte) = 1575 bytes |
Alternative Artcard Overview
-
- If the column of dots to the left of the data region is white, and the column to the right of the data region is black, then the reader will know that the card has been inserted the same way as it was written.
- If the column of dots to the left of the data region is black, and the column to the right of the data region is white, then the reader will know that the card has been inserted backwards, and the data region is appropriately rotated. The reader must take appropriate action to correctly recover the information from the alternative Artcard.
Data Region
Black | 1 | ||
|
0 | ||
-
- Redundancy encode the original data
- Shuffle the encoded data in a deterministic way to reduce the effect of localized alternative Artcard damage
- Write out the shuffled, encoded data as dots to the data blocks on the alternative Artcard
-
- m=8
- t=64
-
- n=255
- k=127
-
- D3 (1101 0011) becomes: black, black, white, black, white, white, black, black
- 5F (0101 1111) becomes: white, black, white, black, black, black, black, black
Decoding an Alternative Artcard
| Height | 0° |
1° rotation | |
|
3208 |
3 pixel columns | 168 pixel columns | |
Data block | 394 |
3 pixel columns | 21 pixel columns | |
-
- the physical height of the alternative Artcard (55 mm),
- vertical slop on physical alternative Artcard insertion (1 mm)
- insertion rotation of up to 1 degree (86
sin 1°=1.5 mm)
-
- Natural blurring due to nature of the CCD's distance from the alternative Artcard.
- Warping of alternative Artcard
-
- Scan 1144 the alternative Artcard at three times printed resolution (eg scan 1600 dpi alternative Artcard at 4800 dpi)
- Extract 1145 the data bitmap from the scanned dots on the card.
- Reverse 1146 the bitmap if the alternative Artcard was inserted backwards.
- Unscramble 1147 the encoded data
- Reed-Solomon 1148 decode the data from the bitmap
Algorithmic Overview
Phase 1—Real Time Bit Image Extraction
-
- Scan the alternative Artcard at 4800 dpi
- Extract the data bitmap from the scanned dots on the card
-
- The 4 MB memory is therefore used as follows:
- 2 MB for the extracted bit image
- ˜2 MB for the scanned pixels
- 1.5 KB for
Phase 1 scratch data (as required by algorithm)
- The 4 MB memory is therefore used as follows:
-
- Re-organize the bit image, reversing it if the alternative Artcard was inserted backwards
- Unscramble the encoded data
- Reed-Solomon decode the data from the bit image
-
- 2 MB for the extracted bit image (from Phase 1)
- ˜2 MB for the unscrambled, potentially rotated bit image
- <1 KB for
Phase 2 scratch data (as required by algorithm)
-
- Locate the start of the alternative Artcard, and if found,
- Calculate the bounds of the first 8 data blocks based on the start of the alternative Artcard.
Locate the Start of the Alternative Artcard
for (Column=0; Column < MAX_COLUMN; Column++) | ||
{ | ||
Pixel = ProcessColumn(Column) | ||
if (Pixel) | ||
return (Pixel, Column) // success! | ||
} | ||
return failure // no alternative Artcard found | ||
//Try upper region first |
count = 0 |
for (i=0; i<UPPER_REGION_BOUND; i++) |
{ |
if (GetPixel(column, i) < THRESHOLD) |
{ |
count = 0 // pixel is black |
} |
else |
{ |
count++ // pixel is white |
if (count > WHITE_ALTERNATIVE ARTCARD) |
return i |
} |
} |
//Try lower region next. Process pixels in reverse |
count = 0 |
for (i=MAX_PIXEL_BOUND; i>LOWER_REGION_BOUND; i--) |
{ |
if(GetPixel(column, i) < THRESHOLD) |
{ |
count = 0 // pixel is black |
} |
else |
{ |
count++ // pixel is white |
if (count > WHITE_ALTERNATIVE ARTCARD) |
return i |
} |
} |
//Not in upper bound or in lower bound. |
return |
0 |
Calculate Data Block Bounds
// Adjust to become first pixel if is lower pixel | ||
if (pixel > LOWER_REGION_BOUND) | ||
{ | ||
pixel −= 6* 1152 | ||
if (pixel < 0) | ||
pixel = 0 | ||
} | ||
for (i=0; i<6; i++) | ||
{ | ||
endPixel = pixel + 1152 | ||
segment[i].MaxPixel = MAX_PIXEL_BOUND | ||
segment[i].SetBounds(pixel, endPixel) | ||
pixel = endPixel | ||
} | ||
-
- LookingForTargets: where the exact data block position for this segment has not yet been determined. Targets are being located by scanning pixel column data in the bounds indicated by the segment bounds. Once the data block has been located via the targets, and bounds set for black & white, the state changes to ExtractingBitImage.
- ExtractingBitImage: where the data block has been accurately located, and bit data is being extracted one dot column at a time and written to the alternative Artcard bit image. The following of data block clockmarks gives accurate dot recovery regardless of rotation, and thus the segment bounds are ignored. Once the entire data block has been extracted, new segment bounds are calculated for the next data block based on the current position. The state changes to LookingForTargets.
DataName | Comment |
CurrentState | Defines the current state of the segment. Can be one of: |
LookingForTargets | |
ExtractingBitImage | |
Initial value is LookingForTargets | |
Used during LookingForTargets: | |
StartPixel | Upper pixel bound of segment. Initially set by |
EndPixel | Lower pixel bound of segment. Initially set by |
MaxPixel | The maximum pixel number for any scanline. |
It is set to the same value for each segment: 10,866. | |
CurrentColumn | Pixel column we're up to while looking for targets. |
FinalColumn | Defines the last pixel column to look in for targets. |
LocatedTargets | Points to a list of located Targets. |
PossibleTargets | Points to a set of pointers to Target structures that represent currently |
investigated pixel shapes that may be targets | |
AvailableTargets | Points to a set of pointers to Target structures that are currently unused. |
TargetsFound | The number of Targets found so far in this data block. |
PossibleTargetCount | The number of elements in the PossibleTargets list |
AvailabletargetCount | The number of elements in the AvailableTargets list |
Used during ExtractingBitImage: | |
BitImage | The start of the Bit Image data area in DRAM where to store the next |
data block: | |
| |
Advances by 256k each time the state changes from | |
ExtractingBitImageData to Looking ForTargets | |
CurrentByte | Offset within BitImage where to store next extracted byte |
CurrentDotColumn | Holds current clockmark/dot column number. |
Set to −8 when transitioning from state LookingForTarget to | |
ExtractingBitImage. | |
UpperClock | Coordinate (column/pixel) of current upper clockmark/border |
LowerClock | Coordinate (column/pixel) of current lower clockmark/border |
CurrentDot | The center of the current data dot for the current dot column. Initially set |
to the center of the first (topmost) dot of the data column. | |
DataDelta | What to add (column/pixel) to CurrentDot to advance to the center of the |
next dot. | |
BlackMax | Pixel value above which a dot is definitely white |
WhiteMin | Pixel value below which a dot is definitely black |
MidRange | The pixel value that has equal likelihood of coming from black or white. |
When all smarts have not determined the dot, this value is used to | |
determine it. Pixels below this value are black, and above it are white. | |
High Level of
blockCount = 0 | ||
while (blockCount < 64) | ||
for (i=0; i<8; i++) | ||
{ | ||
finishedBlock = segment[i].ProcessState( ) | ||
if (finishedBlock) | ||
blockCount++ | ||
} | ||
finishedBlock = FALSE | ||
if(CurrentColumn < Process1.CurrentScanLine) | ||
{ | ||
ProcessPixelColumn( ) | ||
CurrentColumn++ | ||
} | ||
if ((TargetsFound == 6) ∥ (CurrentColumn > LastColumn)) | ||
{ | ||
if (TargetsFound >= 2) | ||
ProcessTargets( ) | ||
if (TargetsFound >= 2) | ||
{ | ||
BuildClockmarkEstimates( ) | ||
SetBlackAndWhiteBounds( ) | ||
CurrentState = ExtractingBitImage | ||
CurrentDotColumn = −8 | ||
} | ||
else | ||
{ | ||
// data block cannot be recovered. Look for | ||
// next instead. Must adjust pixel bounds to | ||
// take account of possible 1 degree rotation. | ||
finishedBlock = TRUE | ||
SetBounds(StartPixel−12, EndPixel+12) | ||
BitImage += 256KB | ||
CurrentByte = 0 | ||
LastColumn += 1024 | ||
TargetsFound = 0 | ||
} | ||
} | ||
return finishedBlock | ||
ProcessPixelColumn
-
- Left black region, which is a number of pixel columns consisting of large numbers of contiguous black pixels to build up the first part of the target.
- Target center, which is a white region in the center of further black columns
- Second black region, which is the 2 black dot columns after the target center
- Target number, which is a black-surrounded white region that defines the target number by its length
- Third black region, which is the 2 black columns after the target number
LocatedTargets | Points to a set of Target structures that represent |
located targets. | |
PossibleTargets | Points to a set of pointers to Target structures that |
represent currently investigated pixel shapes that may | |
be targets. | |
AvailableTargets | Points to a set of pointers to Target structures that |
are currently unused. | |
DataName | Comment |
CurrentState | The current state of the target search |
DetectCount | Counts how long a target has been in a given state |
StartPixel | Where does the target start? All the lines of pixels in this |
target should start within a tolerance of this pixel value. | |
TargetNumber | Which target number is this (according to what was read) |
Column | Best estimate of the target's center column ordinate |
Pixel | Best estimate of the target's center pixel ordinate |
pixel = StartPixel | ||
t = 0 | ||
target=PossibleTarget[t] | ||
while ((pixel < EndPixel) &&(TargetsFound < 6)) | ||
{ | ||
if ((S0.Color == white) &&(S1.Color == black)) | ||
{ | ||
do | ||
{ | ||
keepTrying = FALSE | ||
if | ||
( | ||
(target != NULL) | ||
&& | ||
(target->AddToTarget(Column, pixel, S1, S2, S3)) | ||
) | ||
{ | ||
if (target->CurrentState == IsATarget) | ||
{ | ||
Remove target from PossibleTargets List | ||
Add target to LocatedTargets List | ||
TargetsFound++ | ||
if (TargetsFound == 1) | ||
FinalColumn = Column + MAX_TARGET_DELTA} | ||
} | ||
else if (target->CurrentState == NotATarget) | ||
{ | ||
Remove target from PossibleTargets List | ||
Add target to AvailableTargets List | ||
keepTrying = TRUE | ||
} | ||
else | ||
{ | ||
t++ // advance to next target | ||
} | ||
target = PossibleTarget[t] | ||
} | ||
else | ||
{ | ||
tmp = AvailableTargets[0] | ||
if (tmp->AddToTarget(Column,pixel,S1,S2,S3) | ||
{ | ||
Remove tmp from AvailableTargets list | ||
Add tmp to PossibleTargets list | ||
t++ // target t has been shifted right | ||
} | ||
} | ||
} while (keepTrying) | ||
} | ||
pixel += S1.RunLength | ||
Advance S0/S1/S2/S3 | ||
} | ||
-
- If the run is within the tolerance of target's starting position, the run is directly related to the current target, and can therefore be applied to it.
- If the run starts before the target, we assume that the existing target is still ok, but not relevant to the run. The target is therefore left unchanged, and a return value of FALSE tells the caller that the run was not applied. The caller can subsequently check the run to see if it starts a whole new target of its own.
- If the run starts after the target, we assume the target is no longer a possible target. The state is changed to be NotATarget, and a return value of TRUE is returned.
MAX_TARGET_DELTA = 1 | ||
if (CurrentState != NothingKnown) | ||
{ | ||
if (pixel > StartPixel) // run starts after target | ||
{ | ||
diff = pixel − StartPixel | ||
if (diff > MAX_TARGET_DELTA) | ||
{ | ||
CurrentState = NotATarget | ||
return TRUE | ||
} | ||
} | ||
else | ||
{ | ||
diff = StartPixel − pixel | ||
if (diff > MAX_TARGET_DELTA) | ||
return FALSE | ||
} | ||
} | ||
runType = DetermineRunType(S1, S2, S3) | ||
EvaluateState(runType) | ||
StartPixel = currentPixel | ||
return TRUE | ||
Types of Pixel Runs |
Type | How identified (S1 is always black) | ||
TargetBorder | S1 = 40 < RunLength < 50 | ||
S2 = white run | |||
TargetCenter | S1 = 15 < RunLength < 26 | ||
S2 = white run with [RunLength < 12] | |||
S3 = black run with [15 < RunLength < 26] | |||
TargetNumber | S2 = white run with [RunLength <= 40] | ||
Type of | ||
CurrentState | Pixel Run | Action |
NothingKnown | TargetBorder | DetectCount = 1 |
CurrentState = LeftOfCenter | ||
LeftOfCenter | TargetBorder | DetectCount++ |
if (DetectCount > 24) | ||
CurrentState = NotATarget | ||
TargetCenter | DetectCount = 1 | |
CurrentState = InCenter | ||
Column = currentColumn | ||
Pixel = currentPixel + S1.RunLength | ||
CurrentState = NotATarget | ||
InCenter | TargetCenter | DetectCount++ |
tmp = currentPixel + S1.RunLength | ||
if (tmp < Pixel) | ||
Pixel = tmp | ||
if (DetectCount > 13) | ||
CurrentState = NotATarget | ||
TargetBorder | DetectCount = 1 | |
CurrentState = RightOfCenter | ||
CurrentState = NotATarget | ||
RightOfCenter | TargetBorder | DetectCount++ |
if (DetectCount >= 12) | ||
CurrentState = NotATarget | ||
TargetNumber | DetectCount = 1 | |
CurrentState = InTargetNumber | ||
TargetNumber = (S2.RunLength + | ||
2)/6 | ||
CurrentState = NotATarget | ||
InTargetNumber | TargetNumber | tmp = (S2.RunLength + 2)/6 |
if (tmp > TargetNumber) | ||
TargetNumber = tmp | ||
DetectCount++ | ||
if (DetectCount >= 12) | ||
CurrentState = NotATarget | ||
TargetBorder | if (DetectCount >= 3) | |
CurrentState = IsATarget | ||
else | ||
CurrentState = NotATarget | ||
CurrentState = NotATarget | ||
IsATarget or | — | — |
NotATarget | ||
Processing Targets
-
- Sort targets into ascending pixel order
- Locate and fix erroneous target numbers
for (i = 0; i < TargetsFound−1; i++) |
{ |
oldTarget = LocatedTargets[i] |
bestPixel = oldTarget->Pixel |
best = i |
j = i+1 |
while (j<TargetsFound) |
{ |
if (LocatedTargets[j]-> Pixel < bestPixel) |
best = j |
j++ |
} |
if (best != i) // move only if necessary |
LocatedTargets[i] = LocatedTargets[best] |
LocatedTargets[best] = oldTarget |
} |
} |
kPixelFactor = 1/(55 * 3) |
bestTarget = 0 |
bestChanges = TargetsFound + 1 |
for (i=0; i< TotalTargetsFound; i++) |
{ |
numberOfChanges = 0; |
fromPixel = (LocatedTargets[i])->Pixel |
fromTargetNumber = LocatedTargets[i].TargetNumber |
for (j=1; j< TotalTargetsFound; j++) |
{ |
toPixel = LocatedTargets[j]->Pixel |
deltaPixel = toPixel − fromPixel |
if (deltaPixel >= 0) |
deltaPixel += PIXELS_BETWEEN_TARGET_CENTRES/2 |
else |
deltaPixel −= PIXELS_BETWEEN_TARGET_CENTRES/2 |
targetNumber =deltaPixel * kPixelFactor |
targetNumber += fromTargetNumber |
if |
( |
(targetNumber < 1)∥(targetNumber > 6) |
∥ |
(targetNumber != LocatedTargets[j]-> TargetNumber) |
) |
numberOfChanges++ |
} |
if (numberOfChanges < bestChanges) |
{ |
bestTarget = i |
bestChanges = numberOfChanges |
} |
if (bestChanges < 2) |
break; |
} |
if ((targetNumber < 1)∥(targetNumber > TARGETS_PER_BLOCK)) |
{ |
LocatedTargets[j] = NULL |
TargetsFound−− |
} |
else |
{ |
LocatedTargets[j]-> TargetNumber = targetNumber |
} |
CENTER_WIDTH = CENTER_HEIGHT = 12 | ||
maxPixel = 0x00 | ||
for (i=0; i<CENTER_WIDTH; i++) | ||
for (j=0; j<CENTER_HEIGHT; j++) | ||
{ | ||
p = GetPixel(column+i, pixel+j) | ||
if (p > maxPixel) | ||
{ | ||
maxPixel = p | ||
centerColumn = column + i | ||
centerPixel = pixel + j | ||
} | ||
} | ||
Target.Column = centerColumn | ||
Target.Pixel = centerPixel | ||
// Given estimates column and pixel, determine a | ||
// betterColumn and betterPixel as the center of | ||
// the target | ||
for (y=0; y<7; y++) | ||
{ | ||
for (x=0; x<7; x++) | ||
samples[x] = GetPixel(column−3+y, | ||
pixel−3+x) | ||
FindMax(samples, pos, maxVal) | ||
reSamples[y] = maxVal | ||
if (y == 3) | ||
betterPixel = pos + pixel | ||
} | ||
FindMax(reSamples, pos, maxVal) | ||
betterColumn = pos + column | ||
TARGETS_PER_BLOCK=6
numTargetsDiff=to.TargetNum−from.TargetNum
deltaPixel=(to.Pixel−from.Pixel)/numTargetsDiff
deltaColumn=(to.Column−from.Column)/numTargetsDiff
UpperClock.pixel=from.Pixel−(from.TargetNum*deltaPixel)
UpperClock.column=from.Column−(from.TargetNum*deltaColumn)
// Given the first dot of the upper clockmark, the |
// first dot of the lower clockmark is straightforward. |
LowerClock.pixel = UpperClock.pixel + |
((TARGETS_PER_BLOCK+1) * deltaPixel) |
LowerClock.column = UpperClock.column + |
((TARGETS_PER_BLOCK+1) * deltaColumn) |
kDeltaDotFactor=1/DOTS_BETWEEN_TARGET_CENTRES
deltaColumn*=kDeltaDotFactor
deltapixel*=4*kDeltaDotFactor
UpperClock.pixel−=deltapixel
UpperClock.column−=deltaColumn
LowerClock.pixel+=deltapixel
LowerClock.column+=deltaColumn
MinPixel=WhiteMin
MaxPixel=BlackMax
MidRange=(MinPixel+MaxPixel)/2
WhiteMin=MaxPixel−105
BlackMax=MinPixel+84
CurrentState=ExtractingBitImage
-
- The first task is to locate the specific dot column of data via the clockmarks.
- The second task is to run down the dot column gathering the bit values, one bit per dot.
finishedBlock = FALSE | ||
if((UpperClock.column < Process1.CurrentScanLine) | ||
&& | ||
(LowerClock.column < Process1.CurrentScanLine)) | ||
{ | ||
DetermineAccurateClockMarks( ) | ||
DetermineDataInfo( ) | ||
if (CurrentDotColumn >= 0) | ||
ExtractDataFromColumn( ) | ||
AdvanceClockMarks( ) | ||
if (CurrentDotColumn == FINAL_COLUMN) | ||
{ | ||
finishedBlock = TRUE | ||
currentState = LookingForTargets | ||
SetBounds(UpperClock.pixel, LowerClock.pixel) | ||
BitImage += 256KB | ||
CurrentByte = 0 | ||
TargetsFound = 0 | ||
} | ||
} | ||
return finishedBlock | ||
Locating the Dot Column
// Turn the estimates of the clockmarks into accurate | ||
// positions only when there is a black clockmark | ||
// (ie every 2nd dot column, starting from −8) | ||
if (Bit0(CurrentDotColumn) == 0) // even column | ||
{ | ||
DetermineAccurateUpperDotCenter( ) | ||
DetermineAccurateLowerDotCenter( ) | ||
} | ||
// Use the estimated pixel position of |
// the border to determine where to look for |
// a more accurate clockmark center. The clockmark |
// is 3 dots high so even if the estimated position |
// of the border is wrong, it won't affect the |
// fixing of the clockmark position. |
MAX_CLOCKMARK_DEVIATION = 0.5 |
diff = GetAccurateColumn(UpperClock.column, |
UpperClock.pixel+(3*PIXELS_PER_DOT)) |
diff −= UpperClock.column |
if (diff > MAX_CLOCKMARK_DEVIATION) |
diff = MAX_CLOCKMARK_DEVIATION |
else |
if (diff < −MAX_CLOCKMARK_DEVIATION) |
diff = −MAX_CLOCKMARK_DEVIATION |
UpperClock.column += diff |
// Use the newly obtained clockmark center to |
// determine a more accurate border position. |
diff = GetAccuratePixel(UpperClock.column, UpperClock.pixel) |
diff −= UpperClock.pixel |
if (diff > MAX_CLOCKMARK_DEVIATION) |
diff = MAX_CLOCKMARK_DEVIATION |
else |
if (diff < −MAX_CLOCKMARK_DEVIATION) |
diff = −MAX_CLOCKMARK_DEVIATION |
UpperClock.pixel += diff |
kDeltaColumnFactor=1/(DOTS_PER_DATA_COLUMN+2+2−1)
kDeltaPixelFactor=1/(DOTS_PER_DATA_COLUMN+5+5−1)
delta=LowerClock.column−UpperClock.column
DataDelta.column=delta*kDeltaColumnFactor
delta=LowerClock.pixel−UpperClock.pixel
DataDelta.pixel=delta*kDeltaPixelFactor
CurrentDot.column=UpperClock.column+(2*DataDelta.column)
CurrentDot.pixel=UpperClock.pixel+(5*DataDelta.pixel)
Running Down a Dot Column
bitCount = 8 | ||
curr = 0x00 // definitely black | ||
next = GetPixel(CurrentDot) | ||
for (i=0; i < DOTS_PER_DATA_COLUMN; i++) | ||
{ | ||
CurrentDot += DataDelta | ||
prev = curr | ||
curr = next | ||
next = GetPixel(CurrentDot) | ||
bit = DetermineCenterDot(prev, curr, next) | ||
byte = (byte << 1) | bit | ||
bitCount−− | ||
if (bitCount == 0) | ||
{ | ||
*(BitImage | CurrentByte) = byte | ||
CurrentByte++ | ||
bitCount = 8 | ||
} | ||
} | ||
-
- The dot's center pixel value is lower than WhiteMin, and is therefore definitely a black dot. The bit value is therefore definitely 1.
- The dot's center pixel value is higher than BlackMax, and is therefore definitely a white dot. The bit value is therefore definitely 0.
- The dot's center pixel value is somewhere between BlackMax and WhiteMin. The dot may be black, and it may be white. The value for the bit is therefore in question. A number of schemes can be devised to make a reasonable guess as to the value of the bit. These schemes must balance complexity against accuracy, and also take into account the fact that in some cases, there is no guaranteed solution. In those cases where we make a wrong bit decision, the bit's Reed-Solomon symbol will be in error, and must be corrected by the Reed-Solomon decoding stage in
Phase 2.
-
- If the two dots to either side are on the white side of MidRange (an average dot value), then we can guess that if the center dot were white, it would likely be a “definite” white. The fact that it is in the not-sure region would indicate that the dot was black, and had been affected by the surrounding white dots to make the value less sure. The dot value is therefore assumed to be black, and hence the bit value is 1.
- If the two dots to either side are on the black side of MidRange, then we can guess that if the center dot were black, it would likely be a “definite” black. The fact that it is in the not-sure region would indicate that the dot was white, and had been affected by the surrounding black dots to make the value less sure. The dot value is therefore assumed to be white, and hence the bit value is 0.
- If one dot is on the black side of MidRange, and the other dot is on the white side of MidRange, we simply use the center dot value to decide. If the center dot is on the black side of MidRange, we choose black (bit value 1). Otherwise we choose white (bit value 0).
if (pixel < WhiteMin) // definitely black | ||
bit = 0x01 | ||
else | ||
if (pixel > BlackMax) // definitely white | ||
bit = 0x00 | ||
else | ||
if ((prev > MidRange) &&(next> MidRange)) //prob black | ||
bit = 0x01 | ||
else | ||
if ((prev < MidRange) &&(next < MidRange)) //prob white | ||
bit = 0x00 | ||
else | ||
if (pixel < MidRange) | ||
bit = 0x01 | ||
else | ||
bit = 0x00 | ||
UpperClock.column +=DataDelta.pixel
LowerClock.column +=DataDelta.pixel
UpperClock.pixel −=DataDelta.column
LowerClock.pixel −=DataDelta.column
-
- Getting accurate clockmarks and border values
- Extracting dot values
-
- Reorganize the bit image, reversing it if the alternative Artcard was inserted backwards
- Unscramble the encoded data
- Reed-Solomon decode the data from the bit image
- 48 bytes from the leftmost Orientation Column
- 28560 bytes from the data region proper
- 48 bytes from the rightmost Orientation Column
- 4112 unused bytes
totalCountL = 0 | ||
totalCountR = 0 | ||
for (i=0; i<64; i++) | ||
{ | ||
blackCountL = 0 | ||
blackCountR = 0 | ||
currBuff = dataBuffer | ||
for (j=0; j<48; j++) | ||
{ | ||
blackCountL += CountBits(*currBuff) | ||
currBuff++ | ||
} | ||
currBuff += 28560 | ||
for (j=0; j<48; j++) | ||
{ | ||
blackCountR += CountBits(*currBuff) | ||
currBuff++ | ||
} | ||
dataBuffer += 32k | ||
if (blackCountR > (blackCountL * 4)) | ||
return TRUE | ||
if (blackCountL > (blackCountR * 4)) | ||
return FALSE | ||
totalCountL += blackCountL | ||
totalCountR += blackCountR | ||
} | ||
return (totalCountR > totalCountL) | ||
DATA_BYTES_PER_DATA_BLOCK = 28560 | ||
to = dataBuffer | ||
from = dataBuffer + 48) // left orientation column | ||
for (i=0; i<64; i++) | ||
{ | ||
BlockMove(from, to, DATA_BYTES_PER_DATA_BLOCK) | ||
from += 32k | ||
to += DATA_BYTES_PER_DATA_BLOCK | ||
} | ||
DATA_BYTES_PER_DATA_BLOCK = 28560 |
to = outBuffer |
for (i=0; i<64; i++) |
{ |
from = dataBuffer + (i * 32k) |
from += 48 // skip orientation column |
from += DATA_BYTES_PER_DATA_BLOCK − 1 // end of block |
for (j=0; j < DATA_BYTES_PER_DATA_BLOCK; j++) |
{ |
*to++ = Reverse[*from] |
from−− |
} |
} |
-
- 2 MB contiguous reads (2048/16×12 ns=1,536 ns)
- 2 MB effectively contiguous byte writes (2048/16×12 ns=1,536 ns)
Unscramble the Encoded Image
groupSize = 255 | ||
numBytes = 1827840; | ||
inBuffer = scrambledBuffer; | ||
outBuffer = unscrambledBuffer; | ||
for (i=0; i<groupSize; i++) | ||
for (j=i; j<numBytes; j+=groupSize) | ||
outBuffer[j] = *inBuffer++ | ||
-
- 2 MB contiguous reads (2048/16×12 ns=1,536 ns)
- 2 MB non-contiguous byte writes (2048×12 ns=24,576 ns)
// Constants for Reed Solomon decode | ||
sourceBlockLength = 255; | ||
destBlockLength = 127; | ||
numControlBlocks = 2; | ||
// Decode the control information | ||
if (! GetControlData(source, destBlocks, lastBlock)) | ||
return error | ||
destBytes = ((destBlocks−1) * destBlockLength) + lastBlock | ||
offsetToNextDuplicate = destBlocks * sourceBlockLength | ||
// Skip the control blocks and position at data | ||
source += numControlBlocks * sourceBlockLength | ||
// Decode each of the data blocks, trying | ||
// duplicates as necessary | ||
blocksInError = 0; | ||
for (i=0; i<destBlocks; i++) | ||
{ | ||
found = DecodeBlock(source, dest); | ||
if (! found) | ||
{ | ||
duplicate = source + offsetToNextDuplicate | ||
while ((! found) &&(duplicate<sourceEnd)) | ||
{ | ||
found = DecodeBlock(duplicate, dest) | ||
duplicate += offsetToNextDuplicate | ||
} | ||
} | ||
if (! found) | ||
blocksInError++ | ||
source += sourceBlockLength | ||
dest += destBlockLength | ||
} | ||
return destBytes and blocksInError | ||
-
- The control block could be the first and last blocks rather than make them contiguous (as is the case now). This may give greater protection against certain pathological damage scenarios.
- The second refinement is to place an additional level of redundancy/error detection into the control block structure to be used if the Reed-Solomon decode step fails. Something as simple as parity might improve the likelihood of control information if the Reed-Solomon stage fails.
Phase 5 Running the Vark Script
- 1) Image access mechanisms for general software processing
- 2) Image convolver.
- 3) Data driven image warper
- 4) Image scaling
- 5) Image tessellation
- 6) Affine transform
- 7) Image compositor
- 8) Color space transform
- 9) Histogram collector
- 10) Illumination of the Image
- 11) Brush stamper
- 12) Histogram collector
- 13) CCD image to internal image conversion
- 14) Construction of image pyramids (used by warper & for brushing)
1500 * 1000 image |
Operation | Speed of |
1 |
3 |
Image composite | |||
1 cycle per output pixel | 0.015 s | 0.045 s | |
Image convolve | k/3 cycles per output | ||
pixel | |||
(k = kernel size) | |||
3 × 3 convolve | 0.045 s | 0.135 s | |
5 × 5 convolve | 0.125 s | 0.375 s | |
7 × 7 convolve | 0.245 s | 0.735 s | |
|
8 cycles per pixel | 0.120 s | 0.360 s |
Histogram collect | 2 cycles per pixel | 0.030 s | 0.090 s |
Image Tessellate | ⅓ cycle per pixel | 0.005 s | 0.015 s |
|
1 cycle per output pixel | — | — |
Color lookup replace | ½ cycle per pixel | 0.008 s | 0.023 |
Color space transform | 8 cycles per pixel | 0.120 s | 0.360 s |
Convert CCD image to | 4 cycles per output pixel | 0.06 s | 0.18 s |
internal image (including | |||
color convert &scale) | |||
Construct |
1 cycle per input pixel | 0.015 s | 0.045 s |
Scale | Maximum of: | 0.015 s | 0.045 s (minimum) |
2 cycles per input pixel | (minimum) | ||
2 cycles per |
|||
2 cycles per output pixel | |||
(scaled in X only) | |||
|
2 cycles per output pixel | 0.03 s | 0.09 s |
Brush rotate/translate and | ? | ||
| |||
Tile Image | |||
4–8 cycles per output | 0.015 s to 0.030 s | 0.060 s to 0.120 s to for | |
|
4 channels (Lab, | ||
texture) | |||
Illuminate image | Cycles per pixel | ||
Ambient only | ½ | 0.008 s | 0.023 s |
|
1 | 0.015 s | 0.045 s |
Directional (bm) | 6 | 0.09 s | 0.27 s |
|
6 | 0.09 s | 0.27 s |
Omni (bm) | 9 | 0.137 s | 0.41 s |
|
9 | 0.137 s | 0.41 s |
Spotlight (bm) | 12 | 0.18 s | 0.54 s |
(bm) = bumpmap | |||
Constant | Value | ||
K1 | Kernel size (9, 25, or 49) | ||
Time taken | Time to process | Time to Process | |
to calculate | 1 channel at | 3 channels at | |
Kernel size | output pixel | 1500 × 1000 | 1500 × 1000 |
3 × 3 (9) | 3 cycles | 0.045 seconds | 0.135 |
5 × 5 (25) | 8⅓ cycles | 0.125 seconds | 0.375 |
7 × 7 (49) | 16⅓ cycles | 0.245 seconds | 0.735 seconds |
Image Compositor
Foreground+(Background−Foreground)*□/255
Constant | Value | ||
K1 | 257 | ||
1500/32*1000*320 ns=15,040,000 ns=0.015 seconds.
Timing to produce
Timing to produce
Timing to produce
Etc.
-
- Scale the warp map to match the output image size.
- Determine the span of the region of input image pixels represented in each output pixel.
- Calculate the final output pixel value via tri-linear interpolation from the input image pyramid
Scale Warp Map
Constant | Value |
K1 | Xscale (scales 0-ImageWidth to 0-WarpmapWidth) |
K2 | Yscale (scales 0-ImageHeight to 0-WarpmapHeight) |
K3 | XrangeScale (scales warpmap range ( |
0-ImageWidth) | |
K4 | YrangeScale (scales warpmap range ( |
0-ImageHeight) | |
The following lookup table is used:
Lookup | Size | Details |
LU1 and | WarpmapWidth × | Warpmap lookup. |
LU2 | WarpmapHeight | Given [X, Y] the 4 entries required for |
bi-linear interpolation are returned. Even if | ||
entries are only 8 bit, they are returned as | ||
16 bit (high 8 bits 0). | ||
Transfer time is 4 entries at 2 bytes per | ||
entry. | ||
Total time is 8 cycles as 2 lookups are used. | ||
Span Calculation
Lookup | | Details |
FIFO | ||
1 | 8 ImageWidth bytes. | P2 history/lookup (both X &Y in same |
[ImageWidth × | FIFO) | |
2 entries at | P1 is put into the FIFO and taken out | |
32 bits per entry] | again at the same pixel on the | |
following row as P2. | ||
Transfer time is 4 cycles | ||
(2 × 32 bits, with 1 cycle per 16 bits) | ||
Cycle | Action |
1 | A = ABS(P1x − P2x) |
Store P1x in P2x history | |
2 | B = ABS(P1x − P0x) |
Store P1x in P0x history | |
3 | A = MAX(A, B) |
4 | B = ABS(P1y − P2y) |
Store P1y in P2y history | |
5 | A = MAX(A, B) |
6 | B = ABS(P1y − P0y) |
Store P1y in P0y history | |
7 | A = MAX(A, B) |
Relative Microcode | Address Unit | ||
Address | A = Base address of | Adder Unit | 1 |
0 | |
Out1 = A | |
A + (Adder1.Out1 << 2) | A = A − 1 | ||
|
|||
1 | Rest of processing | Rest of | |
processing | |||
|
|
|
|
Address Unit | |
1 | A = 0 | A = −1 | |||
2 | Out1 = A | A = Adder1.Out1 | A = Adr.Out1 | A = A + 1 | Out1 = |
BZ2 | A = pixel | Z = pixel − Adder1.Out1 | from: (A + (Adder1.Out1 << 2)) | ||
3 | Out1 = A | Out1 = A | Out1 = A | Write Adder4.Out1 to: | |
A = Adder3.Out1 | (A + (Adder 2.Out << 2) | ||||
4 | Write Adder4.Out1 to: | ||||
(A + (Adder 2.Out << 2) | |||||
Flush caches | |||||
-
- Lookup table replacement
- Color space conversion
Lookup Table Replacement
Lookup | Size | Details |
LU1 | 256 entries | Replacement[X] |
8 bits per entry | Table indexed by the 8 highest | |
significant bits of X. | ||
Resultant 8 bits treated as fixed point 0:8 | ||
Lookup | | Details |
LU | ||
1 | 8 × 8 × 8 entries | Convert[X, Y, Z] |
512 entries | Table indexed by the 3 highest bits of | |
X, Y, and Z. | ||
8 bits per |
8 entries returned from Tri-linear index | |
| ||
Resultant | ||
8 bits treated as fixed point 8:0 | ||
Transfer time is 8 entries at 1 byte per entry | ||
Lookup | Size | Details |
LU1 | Image | Bilinear Image lookup [X, Y] |
width by | Table indexed by the integer part of X and Y. | |
|
4 entries returned from Bilinear index address unit, | |
|
2 per cycle. | |
8 bits per | Each 8 bit entry treated as fixed point 8:0 | |
entry | Transfer time is 2 cycles (2 16 bit entries | |
in FIFO hold the 4 8 bit entries) | ||
Constant | Value |
K1 | Number of input pixels that contribute to an output pixel in |
K | |
2 | 1/K1 |
The following registers are used to hold temporary variables:
Variable | Value | ||
Latch1 | Amount of input pixel remaining unused | ||
(starts at 1 and decrements) | |||
Latch2 | Amount of input pixels remaining to contribute | ||
to current output pixel (starts at K1 and decrements) | |||
Latch3 | Next pixel (in X) | ||
Latch4 | Current pixel | ||
Latch5 | Accumulator for output pixel (unscaled) | ||
Latch6 | Pixel Scaled in X (output) | ||
The Scale in Y process is illustrated in
Where the following constants are set by software:
Constant | Value |
K1 | Number of input pixels that contribute |
to an output pixel in | |
K | |
2 | 1/K1 |
The following registers are used to hold temporary variables:
Variable | Value | ||
Latch1 | Amount of input pixel remaining unused | ||
(starts at 1 and decrements) | |||
Latch2 | Amount of input pixels remaining to contribute | ||
to current output pixel (starts at K1 and decrements) | |||
Latch3 | Next pixel (in Y) | ||
Latch4 | Current pixel | ||
Latch5 | Pixel Scaled in Y (output) | ||
The following DRAM FIFOs are used:
Lookup | Size | Details |
FIFO1 | ImageWidthOUT | 1 row of image pixels already scaled in |
entries | ||
8 | 1 cycle transfer time | |
per entry | ||
FIFO2 | ImageWidthOUT | 1 row of image pixels already scaled in |
entries | ||
16 | 2 cycles transfer time (1 byte per cycle) | |
per entry | ||
Tessellate Image
Pixelout=Pixelin*(1−Translation)+Pixelin−1*Translation
Pixelout=Pixelin−1+(Pixelin−Pixelin−1)*Translation
Constant | Pixel | ||
color | color | ||
Replace | 4 | 4.75 | ||
25% background + | 4 | 4.75 | ||
| 5 | 5.75 | ||
Average height algorithm with feedback | 5.75 | 6.5 | ||
Tile Coloring and Compositing
-
- Sub-pixel translate the tile's opacity values,
- Optionally scale the tile's opacity (if feedback from texture application is enabled).
- Determine the color of the pixel (constant or from an image map).
- Composite the pixel onto the background image.
No feedback from | Feedback from | |
texture | texture | |
Tiling color style | (cycles per pixel) | (cycles per pixel) |
Tile has constant color per | 1 | 2 |
Tile has per pixel color from | 1.25 | 2 |
input image | ||
Constant Color
-
- Replace texture
- 25% background+tile's texture
- Average height algorithm
Cycles per pixel | Cycles per pixel | |
(no feedback from | (feedback from | |
Tiling color style | texture) | texture) |
Replace | 1 | — |
25% background + | 1 | — |
texture value | ||
| 2 | 2 |
Replace Texture
Lookup | Size | Details |
LU1 | 256 |
1/ |
16 bits per entry | Table indexed by N (range 0-255) | |
Resultant 16 bits treated as fixed point 0:16 | ||
-
- Up-interpolation of low-sample rate color components in CCD image (interpreting correct orientation of pixels)
Color conversion from RGB to the internal color space - Scaling of the internal space image from 750×500 to 1500×1000.
- Writing out the image in a planar format
- Up-interpolation of low-sample rate color components in CCD image (interpreting correct orientation of pixels)
-
- 1. Directional—is infinitely distant so it casts parallel light in a single direction
- 2. Omni—casts unfocused lights in all directions.
- 3. Spot—casts a focused beam of light at a specific target point. There is a cone and penumbra associated with a spotlight.
fattIp[kdOd(N·L)+ksOs(R·V)n]
-
- Each light source has three contributions per pixel
- Ambient Contribution
- Diffuse contribution
- Specular contribution
- Each light source has three contributions per pixel
dL | Distance from light source | ||
fatt | Attenuation with distance [fatt = 1/dL 2] | ||
R | Normalised reflection vector [R = 2 N(N.L) − L] | ||
Ia | Ambient light intensity | ||
Ip | Diffuse light coefficient | ||
ka | Ambient reflection coefficient | ||
kd | Diffuse reflection coefficient | ||
ks | Specular reflection coefficient | ||
ksc | Specular color coefficient | ||
L | Normalised light source vector | ||
N | Normalised surface normal vector | ||
n | Specular exponent | ||
Od | Object's diffuse color (i.e. image pixel color) | ||
Os | Object's specular color (kscOd + (1 − ksc)Ip) | ||
V | Normalised viewing vector [V = [0, 0, 1]] | ||
The same reflection coefficients (ka, ks, kd) are used for each color component
V n+1=½V n(3−XV n 2)
| Value | ||
K | |||
1 | 3 | ||
The following lookup table is used:
Lookup | Size | Details |
LU1 | 256 | 1/SquareRoot[X] |
8 bits per | Table indexed by the 8 highest significant | |
entry | bits of X. | |
Resultant 8 bits treated as fixed point 0:8 | ||
Calculation of N
- N=[XN, YN, ZN]=[0, 0, 1]
- ∥N∥=1
- 1/∥N∥=1
- normalized N=N
Constant | Value |
K1 | ScaleFactor (to make N resolution independent) |
Calculation of L
Directional lights
-
- L=[XL, YL, ZL]
- XL=XP−XPL
- YL=YP−YPL
- ZL=−ZPL
We normalize XL, YL and ZL by multiplying each by 1/∥L∥. The calculation of 1/∥L∥ (for later use in normalizing) is accomplished by calculating
V=X L 2 +Y L 2 +Z L 2
and then calculating V−1/2
Constant | Value |
K1 | XPL |
K2 | YPL |
K3 | ZPL 2 (as ZP is 0) |
K4 | −ZPL |
Calculation of N.L
X N X L +Y N Y L +Z N Z L
No Bump-Map
R·V=2Z N(N.L)−Z L
R·V=2Z N(N.L)−Z L
The inputs and outputs are as shown in
Calculation of Attenuation Factor
Directional Lights
f att =f 0 +f 1 /d+f 2 /d 2
Constant | Value | ||
K1 | F2 | ||
K2 | f1 | ||
K3 | F0 | ||
Calculation of Cone and Penumbra Factor
Directional Lights and Omni Lights
(B−A)/(C−A)
Constant | Value |
K1 | XLT |
K2 | YLT |
K3 | ZLT |
K4 | A |
K5 | 1/(C-A). [MAXNUM if no penumbra] |
The following lookup tables are used:
Lookup | | Details |
LU | ||
1 | 64 entries | Arcos(X) |
16 bits | Units are same as for constants K5 and K6 | |
per entry | Table indexed by highest 6 bits | |
Result by linear interpolation of 2 entries | ||
Timing is 2 * 8 bits * 2 entries = 4 | ||
LU | ||
2 | 64 entries | Light |
16 bits | F(1) = 0, F(0) = 1, others are according to cubic | |
per entry | Table indexed by 6 bits (1:5) | |
Result by linear interpolation of 2 entries | ||
Timing is 2 * 8 bits = 4 cycles | ||
Calculation of Ambient Contribution
Constant | Value | ||
K1 | Iaka | ||
Calculation of Diffuse Contribution
diffuse=k d O d(N.L)
There are 2 different implementations to consider:
N.L=Z L
Therefore:
diffuse=k d O d Z L
Constant | Value |
K1 | kd(N.L) = kdZL |
diffuse=k d O d(N.L)
Constant | Value | ||
K1 | kd | ||
Calculation of Specular Contribution
specular=k s O s(R·V)n
where O s =k sc O d+(1−k sc)I p
Constant | Value |
K1 | kskscZL n |
K2 | (1 − ksc)IpksZL n |
Constant | Value | ||
K1 | ks | ||
K2 | ksc | ||
K3 | (1 − ksc)Ip | ||
The following lookup table is used:
Lookup | | Details |
LU | ||
1 | 32 entries | Xn |
16 bits per | Table indexed by 5 highest bits of integer R · V | |
entry | Result by linear interpolation of 2 entries using | |
fraction of R · V. Interpolation by 2 Multiplies. | ||
The time taken to retrieve the data from the lookup | ||
is 2 * 8 bits * 2 entries = 4 cycles. | ||
When Ambient Light is the Only Illumination
Constant | Value | ||
K1 | Ip | ||
Constant | Value | ||
K1 | Kd(NsL) = Kd LZ | ||
K2 | ksc | ||
K3 | Ks(NsH)n = Ks HZ 2 | ||
K4 | Ip | ||
Constant | Value | ||
K1 | kd(LsN) = kdLZ | ||
K4 | Ip | ||
K5 | (1 − ks(NsH)n)Ip = (1 − ksHZ n)Ip | ||
K6 | kscks(NsH)n Ip = kscksHZ nIp | ||
K7 | Iaka | ||
Constant | Value | ||
K1 | XL | ||
K2 | YL | ||
K3 | ZL | ||
K4 | Ip | ||
Constant | Value | ||
K1 | XP | ||
K2 | YP | ||
K3 | Ip | ||
Constant | Value | ||
K1 | XP | ||
K2 | YP | ||
K3 | Ip | ||
Constant | Value | ||
K1 | XP | ||
K2 | YP | ||
K3 | Ip | ||
Segment | First | Last dot | |
0 | 0 | 749 |
1 | 750 | 1499 |
2 | 1500 | 2249 |
3 | 2250 | 2999 |
4 | 3000 | 3749 |
5 | 3750 | 4499 |
6 | 4500 | 5249 |
7 | 5250 | 5999 |
-
- Yellow even dot line=0, therefore input Yellow image line=0/6=0
- Yellow odd dot line=8, therefore input Yellow image line=8/6=1
- Magenta even line=10, therefore input Magenta image line=10/6=1
- Magenta odd line=18, therefore input Magenta image line=18/6=3
- Cyan even line=20, therefore input Cyan image line=20/6=3
- Cyan odd line=28, therefore input Cyan image line=28/6=4
Subsequent sets of input image lines are: - Y=[0, 1], M=[1, 3], C=[3, 4]
- Y=[0, 1], M=[1, 3], C=[3, 4]
- Y=[0, 1], M=[2, 3], C=[3, 5]
- Y=[0, 1], M=[2, 3], C=[3, 5]
- Y=[0, 2], M=[2, 3], C=[4, 5]
Constant | Value | ||
K1 | 375 | ||
Symbolic Nomenclature
The following symbolic nomenclature is used throughout the discussion of this embodiment:
Symbolic Nomenclature | Description |
F[X] | Function F, taking a single parameter X |
F[X, Y] | Function F, taking two parameters, X and Y |
X | Y | X concatenated with Y |
X | Bitwise X AND Y |
X | Bitwise X OR Y (inclusive-OR) |
X⊕Y | Bitwise X XOR Y (exclusive-OR) |
~X | Bitwise NOT X (complement) |
X | X is assigned the value Y |
X | The domain of assignment inputs to X is Y |
and Z. | |
X = Y | X is equal to Y |
X ≠ Y | X is not equal to Y |
Decrement X by 1 (floor 0) | |
□X | Increment X by 1 (with wrapping based on |
register length) | |
Erase X | Erase Flash memory register X |
SetBits[X, Y] | Set the bits of the Flash memory register X |
based on Y | |
Z | Shift register X right one bit position, taking |
input bit from Y and placing the output bit in Z | |
Basic Terms
A message, denoted by M, is plaintext. The process of transforming M into cyphertext C, where the substance of M is hidden, is called encryption. The process of transforming C back into M is called decryption. Referring to the encryption function as E, and the decryption function as D, we have the following identities:
E[M]=C
D[C]=M
Therefore the following identity is true:
D[E[M]]=M
Symmetric Cryptography
A symmetric encryption algorithm is one where:
-
- the encryption function E relies on key K1,
- the decryption function D relies on key K2,
- K2 can be derived from K1, and
- K1 can be derived from K2.
In most symmetric algorithms, K1 usually equals K2. However, even if K1 does not equal K2, given that one key can be derived from the other, a single key K can suffice for the mathematical definition. Thus:
EK[M]=C
DK[C]=M
An enormous variety of symmetric algorithms exist, from the textbooks of ancient history through to sophisticated modern algorithms. Many of these are insecure, in that modern cryptanalysis techniques can successfully attack the algorithm to the extent that K can be derived. The security of the particular symmetric algorithm is normally a function of two things: the strength of the algorithm and the length of the key. The following algorithms include suitable aspects for utilization in the authentication chip. - DES
- Blowfish
- RC5
- IDEA
- DES
DES (Data Encryption Standard) is a US and international standard, where the same key is used to encrypt and decrypt. The key length is 56 bits. It has been implemented in hardware and software, although the original design was for hardware only. The original algorithm used in DES is described in U.S. Pat. No. 3,962,539. A variant of DES, called triple-DES is more secure, but requires 3 keys: K1, K2, and K3. The keys are used in the following manner:
EK3[DK2[EK1[M]]]=C
DK3[EK2[DK1[C]]]=M
The main advantage of triple-DES is that existing DES implementations can be used to give more security than single key DES. Specifically, triple-DES gives protection of equivalent key length of 112 bits. Triple-DES does not give the equivalent protection of a 168-bit key (3×56) as one might naively expect. Equipment that performs triple-DES decoding and/or encoding cannot be exported from the United States.
- DES
Asymmetric Cryptography
As alternative an asymmetric algorithm could be used. An asymmetric encryption algorithm is one where:
-
- the encryption function E relies on key Ki,
- the decryption function D relies on key K2,
- K2 cannot be derived from K1 in a reasonable amount of time, and
- K1 cannot be derived from K2 in a reasonable amount of time.
Thus:
EK1[M]=C
DK2[C]=M
These algorithms are also called public-key because one key K1 can be made public. Thus anyone can encrypt a message (using K1), but only the person with the corresponding decryption key (K2) can decrypt and thus read the message. In most cases, the following identity also holds:
EK2[M]=C
DK1[C]=M
This identity is very important because it implies that anyone with the public key K1 can see M and know that it came from the owner of K2. No-one else could have generated C because to do so would imply knowledge of K2. The property of not being able to derive K1 from K2 and vice versa in a reasonable time is of course clouded by the concept of reasonable time. What has been demonstrated time after time, is that a calculation that was thought to require a long time has been made possible by the introduction of faster computers, new algorithms etc. The security of asymmetric algorithms is based on the difficulty of one of two problems: factoring large numbers (more specifically large numbers that are the product of two large primes), and the difficulty of calculating discrete logarithms in a finite field. Factoring large numbers is conjectured to be a hard problem given today's understanding of mathematics. The problem however, is that factoring is getting easier much faster than anticipated. Ron Rivest in 1977 said that factoring a 125-digit number would take 40 quadrillion years. In 1994 a 129-digit number was factored. According to Schneier, you need a 1024-bit number to get the level of security today that you got from a 512-bit number in the 1980's. If the key is to last for some years then 1024 bits may not even be enough. Rivest revised his key length estimates in 1990: he suggests 1628 bits for high security lasting until 2005, and 1884 bits for high security lasting until 2015. By contrast, Schneier suggests 2048 bits are required in order to protect against corporations and governments until 2015.
A number of public key cryptographic algorithms exist. Most are impractical to implement, and many generate a very large C for a given M or require enormous keys. Still others, while secure, are far too slow to be practical for several years. Because of this, many public-key systems are hybrid—a public key mechanism is used to transmit a symmetric session key, and then the session key is used for the actual messages. All of the algorithms have a problem in terms of key selection. A random number is simply not secure enough. The two large primes p and q must be chosen carefully—there are certain weak combinations that can be factored more easily (some of the weak keys can be tested for). But nonetheless, key selection is not a simple matter of randomly selecting 1024 bits for example. Consequently the key selection process must also be secure.
Of the practical algorithms in use under public scrutiny, the following may be suitable for utilization: - RSA
- DSA
- ElGamal
- RSA
The RSA cryptosystem, named after Rivest, Shamir, and Adleman, is the most widely used public-key cryptosystem, and is a de facto standard in much of the world. The security of RSA is conjectured to depend on the difficulty of factoring large numbers that are the product of two primes (p and q). There are a number of restrictions on the generation of p and q. They should both be large, with a similar number of bits, yet not be close to one another (otherwise pq≈√pq). In addition, many authors have suggested that p and q should be strong primes. The RSA algorithm patent was issued in 1983 (U.S. Pat. No. 4,405,829).
- RSA
Cryptographic Challenge-Response Protocols and Zero Knowledge Proofs
The general principle of a challenge-response protocol is to provide identity authentication adapted to a camera system. The simplest form of challenge-response takes the form of a secret password. A asks B for the secret password, and if B responds with the correct password, A declares B authentic. There are three main problems with this kind of simplistic protocol. Firstly, once B has given out the password, any observer C will know what the password is. Secondly, A must know the password in order to verify it. Thirdly, if C impersonates A, then B will give the password to C (thinking C was A), thus compromising B. Using a copyright text (such as a haiku) is a weaker alternative as we are assuming that anyone is able to copy the password (for example in a country where intellectual property is not respected). The idea of cryptographic challenge-response protocols is that one entity (the claimant) proves its identity to another (the verifier) by demonstrating knowledge of a secret known to be associated with that entity, without revealing the secret itself to the verifier during the protocol. In the generalized case of cryptographic challenge-response protocols, with some schemes the verifier knows the secret, while in others the secret is not even known by the verifier. Since the discussion of this embodiment specifically concerns Authentication, the actual cryptographic challenge-response protocols used for authentication are detailed in the appropriate sections. However the concept of Zero Knowledge Proofs will be discussed here. The Zero Knowledge Proof protocol, first described by Feige, Fiat and Shamir is extensively used in Smart Cards for the purpose of authentication. The protocol's effectiveness is based on the assumption that it is computationally infeasible to compute square roots modulo a large composite integer with unknown factorization. This is provably equivalent to the assumption that factoring large integers is difficult. It should be noted that there is no need for the claimant to have significant computing power. Smart cards implement this kind of authentication using only a few modular multiplications. The Zero Knowledge Proof protocol is described in U.S. Pat. No. 4,748,668.
One-Way Functions
A one-way function F operates on an input X, and returns F[X] such that X cannot be determined from F[X]. When there is no restriction on the format of X, and F[X] contains fewer bits than X, then collisions must exist. A collision is defined as two different X input values producing the same F[X] value—i.e. X1 and X2 exist such that X1≠X2 yet F[X1]=F[X2]. When X contains more bits than F[X], the input must be compressed in some way to create the output. In many cases, X is broken into blocks of a particular size, and compressed over a number of rounds, with the output of one round being the input to the next. The output of the hash function is the last output once X has been consumed. A pseudo-collision of the compression function CF is defined as two different initial values V1 and V2 and two inputs X1 and X2 (possibly identical) are given such that CF(V1, X1)=CF(V2, X2). Note that the existence of a pseudo-collision does not mean that it is easy to compute an X2 for a given X1.
We are only interested in one-way functions that are fast to compute. In addition, we are only interested in deterministic one-way functions that are repeatable in different implementations. Consider an example F where F[X] is the time between calls to F. For a given F[X] X cannot be determined because X is not even used by F. However the output from F will be different for different implementations. This kind of F is therefore not of interest.
In the scope of the discussion of the implementation of the authentication chip of this embodiment, we are interested in the following forms of one-way functions:
-
- Encryption using an unknown key
- Random number sequences
- Hash Functions
- Message Authentication Codes
-
- The key for a given strength encryption algorithm is shorter for a symmetric algorithm than an asymmetric algorithm
- Symmetric algorithms are faster to compute and require less software/silicon
The selection of a good key depends on the encryption algorithm chosen. Certain keys are not strong for particular encryption algorithms, so any key needs to be tested for strength. The more tests that need to be performed for key selection, the less likely the key will remain hidden.
-
- A has a long message M1 that says “I owe B $10”. A signs H[M1] using his private key. B, being greedy, then searches for a collision message M2 where H[M2]=H[M1] but where M2 is favorable to B, for example “I owe B $1 million”. Clearly it is in A's interest to ensure that it is difficult to find such an M2.
Examples of collision resistant one-way hash functions are SHA-1, MD5 and RIPEMD-160, all derived from MD4.
MD4
Ron Rivest introduced MD4 in 1990. It is mentioned here because all other one-way hash functions are derived in some way from MD4. MD4 is now considered completely broken in that collisions can be calculated instead of searched for. In the example above, B could trivially generate a substitute message M2 with the same hash value as the original message M1.
MD5
Ron Rivest introduced MD5 in 1991 as a more secure MD4. Like MD4, MD5 produces a 128-bit hash value. Dobbertin describes the status of MD5 after recent attacks. He describes how pseudo-collisions have been found in MD5, indicating a weakness in the compression function, and more recently, collisions have been found. This means that MD5 should not be used for compression in digital signature schemes where the existence of collisions may have dire consequences. However MD5 can still be used as a one-way function. In addition, the HMAC-MD5 construct is not affected by these recent attacks.
SHA-1
SHA-1 is very similar to MD5, but has a 160-bit hash value (MD5 only has 128 bits of hash value). SHA-1 was designed and introduced by the NIST and NSA for use in the Digital Signature Standard (DSS). The original published description was called SHA, but very soon afterwards, was revised to become SHA-1, supposedly to correct a security flaw in SHA (although the NSA has not released the mathematical reasoning behind the change). There are no known cryptographic attacks against SHA-1. It is also more resistant to brute-force attacks than MD4 or MD5 simply because of the longer hash result. The US Government owns the SHA-1 and DSA algorithms (a digital signature authentication algorithm defined as part of DSS) and has at least one relevant patent (U.S. Pat. No. 5,231,688 granted in 1993).
RIPEMD-160
RIPEMD-160 is a hash function derived from its predecessor RIPEMD (developed for the European Community's RIPE project in 1992). As its name suggests, RIPEMD-160 produces a 160-bit hash result. Tuned for software implementations on 32-bit architectures, RIPEMD-160 is intended to provide a high level of security for 10 years or more. Although there have been no successful attacks on RIPEMD-160, it is comparatively new and has not been extensively cryptanalyzed. The original RIPEMD algorithm was specifically designed to resist known cryptographic attacks on MD4. The recent attacks on MD5 showed similar weaknesses in the RIPEMD 128-bit hash function. Although the attacks showed only theoretical weaknesses, Dobbertin, Preneel and Bosselaers further strengthened RIPEMD into a new algorithm RIPEMD-160.
- A has a long message M1 that says “I owe B $10”. A signs H[M1] using his private key. B, being greedy, then searches for a collision message M2 where H[M2]=H[M1] but where M2 is favorable to B, for example “I owe B $1 million”. Clearly it is in A's interest to ensure that it is difficult to find such an M2.
-
- How can A be sure that a message supposedly from B is in fact from B?
Message authentication is different from entity authentication. With entity authentication, one entity (the claimant) proves its identity to another (the verifier). With message authentication, we are concerned with making sure that a given message is from who we think it is from i.e. it has not been tampered en route from the source to its destination. A one-way hash function is not sufficient protection for a message. Hash functions such as MD5 rely on generating a hash value that is representative of the original input, and the original input cannot be derived from the hash value. A simple attack by E, who is in-between A and B, is to intercept the message from B, and substitute his own. Even if A also sends a hash of the original message, E can simply substitute the hash of his new message. Using a one-way hash function alone, A has no way of knowing that B's message has been changed. One solution to the problem of message authentication is the Message Authentication Code, or MAC. When B sends message M, it also sends MAC[M] so that the receiver will know that M is actually from B. For this to be possible, only B must be able to produce a MAC of M, and in addition, A should be able to verify M against MAC[M]. Notice that this is different from encryption of M—MACs are useful when M does not have to be secret. The simplest method of constructing a MAC from a hash function is to encrypt the hash value with a symmetric algorithm:
- How can A be sure that a message supposedly from B is in fact from B?
- Hash the input message H[M]
- Encrypt the hash EK[H[M]]
This is more secure than first encrypting the message and then hashing the encrypted message. Any symmetric or asymmetric cryptographic function can be used. However, there are advantages to using a key-dependant one-way hash function instead of techniques that use encryption (such as that shown above):- Speed, because one-way hash functions in general work much faster than encryption;
- Message size, because EK[H[M]] is at least the same size as M, while H[M] is a fixed size (usually considerably smaller than M);
- Hardware/software requirements—keyed one-way hash functions are typically far less complexity than their encryption-based counterparts; and
- One-way hash function implementations are not considered to be encryption or decryption devices and therefore are not subject to US export controls.
It should be noted that hash functions were never originally designed to contain a key or to support message authentication. As a result, some ad hoc methods of using hash functions to perform message authentication, including various functions that concatenate messages with secret prefixes, suffixes, or both have been proposed. Most of these ad hoc methods have been successfully attacked by sophisticated means. Additional MACs have been suggested based on XOR schemes and Toeplitz matricies (including the special case of LFSR-based constructions).
HMAC
The HMAC construction in particular is gaining acceptance as a solution for Internet message authentication security protocols. The HMAC construction acts as a wrapper, using the underlying hash function in a black-box way. Replacement of the hash function is straightforward if desired due to security or performance reasons. However, the major advantage of the HMAC construct is that it can be proven secure provided the underlying hash function has some reasonable cryptographic strengths—that is, HMAC's strengths are directly connected to the strength of the hash function. Since the HMAC construct is a wrapper, any iterative hash function can be used in an HMAC. Examples include HMAC-MD5, HMAC-SHA1, HMAC-RIPEMD160 etc. Given the following definitions: - H=the hash function (e.g. MD5 or SHA-1)
- n=number of bits output from H (e.g. 160 for SHA-1, 128 bits for MD5)
- M=the data to which the MAC function is to be applied
- K=the secret key shared by the two parties
- ipad=0×36 repeated 64 times
- opad=0×5C repeated 64 times
The HMAC algorithm is as follows:
- Extend K to 64 bytes by appending 0×00 bytes to the end of K
- XOR the 64 byte string created in (1) with ipad
- Append data stream M to the 64 byte string created in (2)
- Apply H to the stream generated in (3)
- XOR the 64 byte string created in (1) with opad
- Append the H result from (4) to the 64 byte string resulting from (5)
- Apply H to the output of (6) and output the result
Thus:
HMAC[M]=H[(K⊕opad)|H[(K⊕ipad)|M]]
The recommended key length is at least n bits, although it should not be longer than 64 bytes (the length of the hashing block). A key longer than n bits does not add to the security of the function. HMAC optionally allows truncation of the final output e.g. truncation to 128 bits from 160 bits. The HMAC designers' Request for Comments was issued in 1997, one year after the algorithm was first introduced. The designers claimed that the strongest known attack against HMAC is based on the frequency of collisions for the hash function H and is totally impractical for minimally reasonable hash functions. More recently, HMAC protocols with replay prevention components have been defined in order to prevent the capture and replay of any M, HMAC[M] combination within a given time period.
Random Numbers and Time Varying Messages
The use of a random number generator as a one-way function has already been examined. However, random number generator theory is very much intertwined with cryptography, security, and authentication. There are a large number of issues concerned with defining good random number generators. Knuth, describes what makes a generator good (including statistical tests), and the general problems associated with constructing them. One of the uses for random numbers is to ensure that messages vary over time. Consider a system where A encrypts commands and sends them to B. If the encryption algorithm produces the same output for a given input, an attacker could simply record the messages and play them back to fool B. There is no need for the attacker to crack the encryption mechanism other than to know which message to play to B (while pretending to be A). Consequently messages often include a random number and a time stamp to ensure that the message (and hence its encrypted counterpart) varies each time. Random number generators are also often used to generate keys. It is therefore best to say at the moment, that all generators are insecure for this purpose. For example, the Berlekamp-Massey algorithm, is a classic attack on an LFSR random number generator. If the LFSR is of length n, then only 2n bits of the sequence suffice to determine the LFSR, compromising the key generator. If, however, the only role of the random number generator is to make sure that messages vary over time, the security of the generator and seed is not as important as it is for session key generation. If however, the random number seed generator is compromised, and an attacker is able to calculate future “random” numbers, it can leave some protocols open to attack. Any new protocol should be examined with respect to this situation. The actual type of random number generator required will depend upon the implementation and the purposes for which the generator is used. Generators include Blum, Blum, and Shub, stream ciphers such as RC4 by Ron Rivest, hash functions such as SHA-1 and RIPEMD-160, and traditional generators such LFSRs (Linear Feedback Shift Registers) and their more recent counterpart FCSRs (Feedback with Carry Shift Registers).
Attacks
This section describes the various types of attacks that can be undertaken to break an authentication cryptosystem such as the authentication chip. The attacks are grouped into physical and logical attacks. Physical attacks describe methods for breaking a physical implementation of a cryptosystem (for example, breaking open a chip to retrieve the key), while logical attacks involve attacks on the cryptosystem that are implementation independent. Logical types of attack work on the protocols or algorithms, and attempt to do one of three things:- Bypass the authentication process altogether
- Obtain the secret key by force or deduction, so that any question can be answered
- Find enough about the nature of the authenticating questions and answers in order to, without the key, give the right answer to each question.
The attack styles and the forms they take are detailed below. Regardless of the algorithms and protocol used by a security chip, the circuitry of the authentication part of the chip can come under physical attack. Physical attack comes in four main ways, although the form of the attack can vary: - Bypassing the Authentication Chip altogether
- Physical examination of chip while in operation (destructive and non-destructive)
- Physical decomposition of chip
- Physical alteration of chip
The attack styles and the forms they take are detailed below. This section does not suggest solutions to these attacks. It merely describes each attack type. The examination is restricted to the context of an Authentication chip 53 (as opposed to some other kind of system, such as Internet authentication) attached to some System.
Known Plaintext Attack
This is where an attacker has both the plaintext and the encrypted form of the plaintext. In the case of an Authentication Chip, a known-plaintext attack is one where the attacker can see the data flow between the System and the Authentication Chip. The inputs and outputs are observed (not chosen by the attacker), and can be analyzed for weaknesses (such as birthday attacks or by a search for differentially interesting input/output pairs). A known plaintext attack is a weaker type of attack than the chosen plaintext attack, since the attacker can only observe the data flow. A known plaintext attack can be carried out by connecting a logic analyzer to the connection between the System and the Authentication Chip.
Chosen Plaintext Attacks
A chosen plaintext attack describes one where a cryptanalyst has the ability to send any chosen message to the cryptosystem, and observe the response. If the cryptanalyst knows the algorithm, there may be a relationship between inputs and outputs that can be exploited by feeding a specific output to the input of another function. On a system using an embedded Authentication Chip, it is generally very difficult to prevent chosen plaintext attacks since the cryptanalyst can logically pretend he/she is the System, and thus send any chosen bit-pattern streams to the Authentication Chip.
Adaptive Chosen Plaintext Attacks
This type of attack is similar to the chosen plaintext attacks except that the attacker has the added ability to modify subsequent chosen plaintexts based upon the results of previous experiments. This is certainly the case with any System/Authentication Chip scenario described when utilized for consumables such as photocopiers and toner cartridges, especially since both Systems and Consumables are made available to the public.
Brute Force Attack
A guaranteed way to break any key-based cryptosystem algorithm is simply to try every key. Eventually the right one will be found. This is known as a Brute Force Attack. However, the more key possibilities there are, the more keys must be tried, and hence the longer it takes (on average) to find the right one. If there are N keys, it will take a maximum of N tries. If the key is N bits long, it will take a maximum of 2N tries, with a 50% chance of finding the key after only half the attempts (2N−1). The longer N becomes, the longer it will take to find the key, and hence the more secure the key is. Of course, an attack may guess the key on the first try, but this is more unlikely the longer the key is. Consider a key length of 56 bits. In the worst case, all 256 tests (7.2×1016 tests) must be made to find the key. In 1977, Diffie and Hellman described a specialized machine for cracking DES, consisting of one million processors, each capable of running one million tests per second. Such a machine would take 20 hours to break any DES code. Consider a key length of 128 bits. In the worst case, all 2128 tests (3.4×1038 tests) must be made to find the key. This would take ten billion years on an array of a trillion processors each running 1 billion tests per second. With a long enough key length, a Brute Force Attack takes too long to be worth the attacker's efforts.
Guessing Attack
This type of attack is where an attacker attempts to simply “guess” the key. As an attack it is identical to the Brute force attack, where the odds of success depend on the length of the key.
Quantum Computer Attack
To break an n-bit key, a quantum computer (NMR, Optical, or Caged Atom) containing n qubits embedded in an appropriate algorithm must be built. The quantum computer effectively exists in 2n simultaneous coherent states. The trick is to extract the right coherent state without causing any decoherence. To date this has been achieved with a 2 qubit system (which exists in 4 coherent states). It is thought possible to extend this to 6 qubits (with 64 simultaneous coherent states) within a few years. Unfortunately, every additional qubit halves the relative strength of the signal representing the key. This rapidly becomes a serious impediment to key retrieval, especially with the long keys used in cryptographically secure systems. As a result, attacks on a cryptographically secure key (e.g. 160 bits) using a Quantum Computer are likely not to be feasible and it is extremely unlikely that quantum computers will have achieved more than 50 or so qubits within the commercial lifetime of the Authentication Chips. Even using a 50 qubit quantum computer, 2110 tests are required to crack a 160 bit key.
Purposeful Error Attack
With certain algorithms, attackers can gather valuable information from the results of a bad input. This can range from the error message text to the time taken for the error to be generated. A simple example is that of a userid/password scheme. If the error message usually says “Bad userid”, then when an attacker gets a message saying “Bad password” instead, then they know that the userid is correct. If the message always says “Bad userid/password” then much less information is given to the attacker. A more complex example is that of the recent published method of cracking encryption codes from secure web sites. The attack involves sending particular messages to a server and observing the error message responses. The responses give enough information to learn the keys—even the lack of a response gives some information. An example of algorithmic time can be seen with an algorithm that returns an error as soon as an erroneous bit is detected in the input message. Depending on hardware implementation, it may be a simple method for the attacker to time the response and alter each bit one by one depending on the time taken for the error response, and thus obtain the key. Certainly in a chip implementation the time taken can be observed with far greater accuracy than over the Internet.
Birthday Attack
This attack is named after the famous “birthday paradox” (which is not actually a paradox at all). The odds of one person sharing a birthday with another, is 1 in 365 (not counting leap years). Therefore there must be 183 people in a room for the odds to be more than 50% that one of them shares your birthday. However, there only needs to be 23 people in a room for there to be more than a 50% chance that any two share a birthday. This is because 23 people yields 253 different pairs. Birthday attacks are common attacks against hashing algorithms, especially those algorithms that combine hashing with digital signatures. If a message has been generated and already signed, an attacker must search for a collision message that hashes to the same value (analogous to finding one person who shares your birthday). However, if the attacker can generate the message, the Birthday Attack comes into play. The attacker searches for two messages that share the same hash value (analogous to any two people sharing a birthday), only one message is acceptable to the person signing it, and the other is beneficial for the attacker. Once the person has signed the original message the attacker simply claims now that the person signed the alternative message—mathematically there is no way to tell which message was the original, since they both hash to the same value. Assuming a Brute Force Attack is the only way to determine a match, the weakening of an n-bit key by the birthday attack is 2n/2. A key length of 128 bits that is susceptible to the birthday attack has an effective length of only 64 bits.
Chaining Attack
These are attacks made against the chaining nature of hash functions. They focus on the compression function of a hash function. The idea is based on the fact that a hash function generally takes arbitrary length input and produces a constant length output by processing the input n bits at a time. The output from one block is used as the chaining variable set into the next block. Rather than finding a collision against an entire input, the idea is that given an input chaining variable set, to find a substitute block that will result in the same output chaining variables as the proper message. The number of choices for a particular block is based on the length of the block. If the chaining variable is c bits, the hashing function behaves like a random mapping, and the block length is b bits, the number of such b-bit blocks is approximately 2b/2c. The challenge for finding a substitution block is that such blocks are a sparse subset of all possible blocks. For SHA-1, the number of 512 bit blocks is approximately 2512/2160, or 2352. The chance of finding a block by brute force search is about 1 in 2160.
Substitution with a Complete Lookup Table
If the number of potential messages sent to the chip is small, then there is no need for a clone manufacturer to crack the key. Instead, the clone manufacturer could incorporate a ROM in their chip that had a record of all of the responses from a genuine chip to the codes sent by the system. The larger the key, and the larger the response, the more space is required for such a lookup table.
Substitution with a Sparse Lookup Table
If the messages sent to the chip are somehow predictable, rather than effectively random, then the clone manufacturer need not provide a complete lookup table. For example:
-
- If the message is simply a serial number, the clone manufacturer need simply provide a lookup table that contains values for past and predicted future serial numbers. There are unlikely to be more than 109 of these.
- If the test code is simply the date, then the clone manufacturer can produce a lookup table using the date as the address.
- If the test code is a pseudo-random number using either the serial number or the date as a seed, then the clone manufacturer just needs to crack the pseudo-random number generator in the System. This is probably not difficult, as they have access to the object code of the System. The clone manufacturer would then produce a content addressable memory (or other sparse array lookup) using these codes to access stored authentication codes.
Differential Cryptanalysis
Differential cryptanalysis describes an attack where pairs of input streams are generated with known differences, and the differences in the encoded streams are analyzed. Existing differential attacks are heavily dependent on the structure of S boxes, as used in DES and other similar algorithms. Although other algorithms such as HMAC-SHA1 have no S boxes, an attacker can undertake a differential-like attack by undertaking statistical analysis of: - Minimal-difference inputs, and their corresponding outputs
- Minimal-difference outputs, and their corresponding inputs
Most algorithms were strengthened against differential cryptanalysis once the process was described. This is covered in the specific sections devoted to each cryptographic algorithm. However some recent algorithms developed in secret have been broken because the developers had not considered certain styles of differential attacks and did not subject their algorithms to public scrutiny.
Message Substitution Attacks
In certain protocols, a man-in-the-middle can substitute part or all of a message. This is where a real Authentication Chip is plugged into a reusable clone chip within the consumable. The clone chip intercepts all messages between the System and the Authentication Chip, and can perform a number of substitution attacks. Consider a message containing a header followed by content. An attacker may not be able to generate a valid header, but may be able to substitute their own content, especially if the valid response is something along the lines of “Yes, I received your message”. Even if the return message is “Yes, I received the following message . . . ”, the attacker may be able to substitute the original message before sending the acknowledgement back to the original sender. Message Authentication Codes were developed to combat most message substitution attacks.
Reverse Engineering the Key Generator
If a pseudo-random number generator is used to generate keys, there is the potential for a clone manufacture to obtain the generator program or to deduce the random seed used. This was the way in which the Netscape security program was initially broken.
Bypassing Authentication Altogether
It may be that there are problems in the authentication protocols that can allow a bypass of the authentication process altogether. With these kinds of attacks the key is completely irrelevant, and the attacker has no need to recover it or deduce it. Consider an example of a system that Authenticates at power-up, but does not authenticate at any other time. A reusable consumable with a clone Authentication Chip may make use of a real Authentication Chip. Theclone authentication chip 53 uses the real chip for the authentication call, and then simulates the real Authentication Chip's state data after that. Another example of bypassing authentication is if the System authenticates only after the consumable has been used. A clone Authentication Chip can accomplish a simple authentication bypass by simulating a loss of connection after the use of the consumable but before the authentication protocol has completed (or even started). One infamous attack known as the “Kentucky Fried Chip” hack involved replacing a microcontroller chip for a satellite TV system. When a subscriber stopped paying the subscription fee, the system would send out a “disable” message. However the new microcontroller would simply detect this message and not pass it on to the consumer's satellite TV system.
Garrote/Bribe Attack
If people know the key, there is the possibility that they could tell someone else. The telling may be due to coercion (bribe, garrote etc), revenge (e.g. a disgruntled employee), or simply for principle. These attacks are usually cheaper and easier than other efforts at deducing the key. As an example, a number of people claiming to be involved with the development of the Divx standard have recently (May/June 1998) been making noises on a variety of DVD newsgroups to the effect they would like to help develop Divx specific cracking devices—out of principle.
Reading ROM
If a key is stored in ROM it can be read directly. A ROM can thus be safely used to hold a public key (for use in asymmetric cryptography), but not to hold a private key. In symmetric cryptography, a ROM is completely insecure. Using a copyright text (such as a haiku) as the key is not sufficient, because we are assuming that the cloning of the chip is occurring in a country where intellectual property is not respected.
Reverse Engineering of Chip
Reverse engineering of the chip is where an attacker opens the chip and analyzes the circuitry. Once the circuitry has been analyzed the inner workings of the chip's algorithm can be recovered. Lucent Technologies have developed an active method known as TOBIC (Two photon OBIC, where OBIC stands for Optical Beam Induced Current), to image circuits. Developed primarily for static RAM analysis, the process involves removing any back materials, polishing the back surface to a mirror finish, and then focusing light on the surface. The excitation wavelength is specifically chosen not to induce a current in the IC. A Kerckhoffs in the nineteenth century made a fundamental assumption about cryptanalysis: if the algorithm's inner workings are the sole secret of the scheme, the scheme is as good as broken. He stipulated that the secrecy must reside entirely in the key. As a result, the best way to protect against reverse engineering of the chip is to make the inner workings irrelevant.
Usurping the Authentication Process
It must be assumed that any clone manufacturer has access to both the System and consumable designs. If the same channel is used for communication between the System and a trusted System Authentication Chip, and a non-trusted consumable Authentication Chip, it may be possible for the non-trusted chip to interrogate a trusted Authentication Chip in order to obtain the “correct answer”. If this is so, a clone manufacturer would not have to determine the key. They would only have to trick the System into using the responses from the System Authentication Chip. The alternative method of usurping the authentication process follows the same method as the logical attack “Bypassing the Authentication Process”, involving simulated loss of contact with the System whenever authentication processes take place, simulating power-down etc.
Modification of System
This kind of attack is where the System itself is modified to accept clone consumables. The attack may be a change of System ROM, a rewiring of the consumable, or, taken to the extreme case, a completely clone System. This kind of attack requires each individual System to be modified, and would most likely require the owner's consent. There would usually have to be a clear advantage for the consumer to undertake such a modification, since it would typically void warranty and would most likely be costly. An example of such a modification with a clear advantage to the consumer is a software patch to change fixed-region DVD players into region-free DVD players.
Direct Viewing of Chip Operation by Conventional Probing
If chip operation could be directly viewed using an STM or an electron beam, the keys could be recorded as they are read from the internal non-volatile memory and loaded into work registers. These forms of conventional probing require direct access to the top or front sides of the IC while it is powered.
Direct Viewing of the Non-Volatile Memory
If the chip were sliced so that the floating gates of the Flash memory were exposed, without discharging them, then the key could probably be viewed directly using an STM or SKM (Scanning Kelvin Microscope). However, slicing the chip to this level without discharging the gates is probably impossible. Using wet etching, plasma etching, ion milling (focused ion beam etching), or chemical mechanical polishing will almost certainly discharge the small charges present on the floating gates.
Viewing the Light Bursts Caused by State Changes
Whenever a gate changes state, a small amount of infrared energy is emitted. Since silicon is transparent to infrared, these changes can be observed by looking at the circuitry from the underside of a chip. While the emission process is weak, it is bright enough to be detected by highly sensitive equipment developed for use in astronomy. The technique, developed by IBM, is called PICA (Picosecond Imaging Circuit Analyzer). If the state of a register is known at time t, then watching that register change over time will reveal the exact value at time t+n, and if the data is part of the key, then that part is compromised.
Monitoring EMI
Whenever electronic circuitry operates, faint electromagnetic signals are given off. Relatively inexpensive equipment (a few thousand dollars) can monitor these signals. This could give enough information to allow an attacker to deduce the keys.
Viewing Idd Fluctuations
Even if keys cannot be viewed, there is a fluctuation in current whenever registers change state. If there is a high enough signal to noise ratio, an attacker can monitor the difference in Idd that may occur when programming over either a high or a low bit. The change in Idd can reveal information about the key. Attacks such as these have already been used to break smart cards.
Differential Fault Analysis
This attack assumes introduction of a bit error by ionization, microwave radiation, or environmental stress. In most cases such an error is more likely to adversely affect the Chip (eg cause the program code to crash) rather than cause beneficial changes which would reveal the key. Targeted faults such as ROM overwrite, gate destruction etc are far more likely to produce useful results.
Clock Glitch Attacks
Chips are typically designed to properly operate within a certain clock speed range. Some attackers attempt to introduce faults in logic by running the chip at extremely high clock speeds or introduce a clock glitch at a particular time for a particular duration. The idea is to create race conditions where the circuitry does not function properly. An example could be an AND gate that (because of race conditions) gates through Input1 all the time instead of the AND of Input1 and Input2. If an attacker knows the internal structure of the chip, they can attempt to introduce race conditions at the correct moment in the algorithm execution, thereby revealing information about the key (or in the worst case, the key itself).
Power Supply Attacks
Instead of creating a glitch in the clock signal, attackers can also produce glitches in the power supply where the power is increased or decreased to be outside the working operating voltage range. The net effect is the same as a clock glitch—introduction of error in the execution of a particular instruction. The idea is to stop the CPU from XORing the key, or from shifting the data one bit-position etc. Specific instructions are targeted so that information about the key is revealed.
Overwriting ROM
Single bits in a ROM can be overwritten using a laser cutter microscope, to either 1 or 0 depending on the sense of the logic. With a given opcode/operand set, it may be a simple matter for an attacker to change a conditional jump to a non-conditional jump, or perhaps change the destination of a register transfer. If the target instruction is chosen carefully, it may result in the key being revealed.
Modifying EEPROM/Flash
EEPROM/Flash attacks are similar to ROM attacks except that the laser cutter microscope technique can be used to both set and reset individual bits. This gives much greater scope in terms of modification of algorithms.
Gate Destruction
Anderson and Kuhn described the rump session of the 1997 workshop on Fast Software Encryption, where Biham and Shamir presented an attack on DES. The attack was to use a laser cutter to destroy an individual gate in the hardware implementation of a known block cipher (DES). The net effect of the attack was to force a particular bit of a register to be “stuck”. Biham and Shamir described the effect of forcing a particular register to be affected in this way—the least significant bit of the output from the round function is set to 0. Comparing the 6 least significant bits of the left half and the right half can recover several bits of the key. Damaging a number of chips in this way can reveal enough information about the key to make complete key recovery easy. An encryption chip modified in this way will have the property that encryption and decryption will no longer be inverses.
Overwrite Attacks
Instead of trying to read the Flash memory, an attacker may simply set a single bit by use of a laser cutter microscope. Although the attacker doesn't know the previous value, they know the new value. If the chip still works, the bit's original state must be the same as the new state. If the chip doesn't work any longer, the bit's original state must be the logical NOT of the current state. An attacker can perform this attack on each bit of the key and obtain the n-bit key using at most n chips (if the new bit matched the old bit, a new chip is not required for determining the next bit).
Test Circuitry Attack
Most chips contain test circuitry specifically designed to check for manufacturing defects. This includes BIST (Built In Self Test) and scan paths. Quite often the scan paths and test circuitry includes access and readout mechanisms for all the embedded latches. In some cases the test circuitry could potentially be used to give information about the contents of particular registers. Test circuitry is often disabled once the chip has passed all manufacturing tests, in some cases by blowing a specific connection within the chip. A determined attacker, however, can reconnect the test circuitry and hence enable it.
Memory Remanence
Values remain in RAM long after the power has been removed, although they do not remain long enough to be considered non-volatile. An attacker can remove power once sensitive information has been moved into RAM (for example working registers), and then attempt to read the value from RAM. This attack is most useful against security systems that have regular RAM chips. A classic example is where a security system was designed with an automatic power-shut-off that is triggered when the computer case is opened. The attacker was able to simply open the case, remove the RAM chips, and retrieve the key because of memory remanence.
Chip Theft Attack
If there are a number of stages in the lifetime of an Authentication Chip, each of these stages must be examined in terms of ramifications for security should chips be stolen. For example, if information is programmed into the chip in stages, theft of a chip between stages may allow an attacker to have access to key information or reduced efforts for attack. Similarly, if a chip is stolen directly after manufacture but before programming, does it give an attacker any logical or physical advantage?
Requirements
Existing solutions to the problem of authenticating consumables have typically relied on physical patents on packaging. However this does not stop home refill operations or clone manufacture in countries with weak industrial property protection. Consequently a much higher level of protection is required. The authentication mechanism is therefore built into an
-
- Presence Only Authentication
This is where only the presence of an Authentication Chip is tested. The Authentication Chip can be reused in another consumable without being reprogrammed. - Consumable Lifetime Authentication
This is where not only is the presence of the Authentication Chip tested for, but also theAuthentication chip 53 must only last the lifetime of the consumable. For the chip to be reused it must be completely erased and reprogrammed. The two levels of protection address different requirements. We are primarily concerned with Consumable Lifetime Authentication in order to prevent cloned versions of high volume consumables. In this case, each chip should hold secure state information about the consumable being authenticated. It should be noted that a Consumable Lifetime Authentication Chip could be used in any situation requiring a Presence Only Authentication Chip. The requirements for authentication, data storage integrity and manufacture should be considered separately. The following sections summarize requirements of each.
Authentication
The authentication requirements for both Presence Only Authentication and Consumable Lifetime Authentication are restricted to case of a system authenticating a consumable. For Presence Only Authentication, we must be assured that an Authentication Chip is physically present. For Consumable Lifetime Authentication we also need to be assured that state data actually came from the Authentication Chip, and that it has not been altered en route. These issues cannot be separated—data that has been altered has a new source, and if the source cannot be determined, the question of alteration cannot be settled. It is not enough to provide an authentication method that is secret, relying on a home-brew security method that has not been scrutinized by security experts. The primary requirement therefore is to provide authentication by means that have withstood the scrutiny of experts. The authentication scheme used by theAuthentication chip 53 should be resistant to defeat by logical means. Logical types of attack are extensive, and attempt to do one of three things: - Bypass the authentication process altogether
- Obtain the secret key by force or deduction, so that any question can be answered
- Find enough about the nature of the authenticating questions and answers in order to, without the key, give the right answer to each question.
Data Storage Integrity
Although Authentication protocols take care of ensuring data integrity in communicated messages, data storage integrity is also required. Two kinds of data must be stored within the Authentication Chip: - Authentication data, such as secret keys
- Consumable state data, such as serial numbers, and media remaining etc.
The access requirements of these two data types differ greatly. TheAuthentication chip 53 therefore requires a storage/access control mechanism that allows for the integrity requirements of each type.
- Presence Only Authentication
-
- Read Only
- ReadWrite
- Decrement Only
Read Only data needs to be stored in the chip during a manufacturing/programming stage of the chip's life, but from then on should not be allowed to change. Examples of Read Only data items are consumable batch numbers and serial numbers.
ReadWrite data is changeable state information, for example, the last time the particular consumable was used. ReadWrite data items can be read and written an unlimited number of times during the lifetime of the consumable. They can be used to store any state information about the consumable. The only requirement for this data is that it needs to be kept in non-volatile memory. Since an attacker can obtain access to a system (which can write to ReadWrite data), any attacker can potentially change data fields of this type. This data type should not be used for secret information, and must be considered insecure.
Decrement Only data is used to count down the availability of consumable resources. A photocopier's toner cartridge, for example, may store the amount of toner remaining as a Decrement Only data item. An ink cartridge for a color printer may store the amount of each ink color as a Decrement Only data item, requiring 3 (one for each of Cyan, Magenta, and Yellow), or even as many as 5 or 6 Decrement Only data items. The requirement for this kind of data item is that once programmed with an initial value at the manufacturing/programming stage, it can only reduce in value. Once it reaches the minimum value, it cannot decrement any further. The Decrement Only data item is only required by Consumable Lifetime Authentication.
Manufacture
TheAuthentication chip 53 ideally must have a low manufacturing cost in order to be included as the authentication mechanism for low cost consumables. TheAuthentication chip 53 should use a standard manufacturing process, such as Flash. This is necessary to: - Allow a great range of manufacturing location options
- Use well-defined and well-behaved technology
- Reduce cost
Regardless of the authentication scheme used, the circuitry of the authentication part of the chip must be resistant to physical attack. Physical attack comes in four main ways, although the form of the attack can vary: - Bypassing the Authentication Chip altogether
- Physical examination of chip while in operation (destructive and non-destructive)
- Physical decomposition of chip
- Physical alteration of chip
Ideally, the chip should be exportable from the U.S., so it should not be possible to use anAuthentication chip 53 as a secure encryption device. This is low priority requirement since there are many companies in other countries able to manufacture the Authentication chips. In any case, the export restrictions from the U.S. may change.
Authentication
Existing solutions to the problem of authenticating consumables have typically relied on physical patents on packaging. However this does not stop home refill operations or clone manufacture in countries with weak industrial property protection. Consequently a much higher level of protection is required. It is not enough to provide an authentication method that is secret, relying on a home-brew security method that has not been scrutinized by security experts. Security systems such as Netscape's original proprietary system and the GSM Fraud Prevention Network used by cellular phones are examples where design secrecy caused the vulnerability of the security. Both security systems were broken by conventional means that would have been detected if the companies had followed an open design process. The solution is to provide authentication by means that have withstood the scrutiny of experts. A number of protocols that can be used for consumables authentication. We only use security methods that are publicly described, using known behaviors in this new way. For all protocols, the security of the scheme relies on a secret key, not a secret algorithm. All the protocols rely on a time-variant challenge (i.e. the challenge is different each time), where the response depends on the challenge and the secret. The challenge involves a random number so that any observer will not be able to gather useful information about a subsequent identification. Two protocols are presented for each of Presence Only Authentication and Consumable Lifetime Authentication. Although the protocols differ in the number of Authentication Chips required for the authentication process, in all cases the System authenticates the consumable. Certain protocols will work with either one or two chips, while other protocols only work with two chips. Whether one chip or two Authentication Chips are used the System is still responsible for making the authentication decision.
Presence Only Authentication (Insecure State Data)
For this level of consumable authentication we are only concerned about validating the presence of the
K | Key for FK[X]. Must be secret. |
R | Current random number. Does not have to be secret, |
but must be seeded with a different initial value | |
for each chip instance. Changes with each invocation | |
of the Random function. | |
Each Authentication Chip contains the following logical functions:
Random[ ] | Returns R, and advances R to next in sequence. | ||
F[X] | Returns FK[X], the result of applying a one-way | ||
function F to X based upon the secret key K. | |||
The protocol is as follows:
-
- System requests Random[ ] from ChipT;
- ChipT returns R to System;
- System requests F[R] from both ChipT and ChipA;
- ChipT returns FKT[R] to System;
- ChipA returns FKA[R] to System;
- System compares FKT[R] with FKA[R]. If they are equal, then ChipA is considered valid. If not, then ChipA is considered invalid.
The data flow can be seen inFIG. 169 . The System does not have to comprehend FK[R] messages. It must merely check that the responses from ChipA and ChipT are the same. The System therefore does not require the key. The security ofProtocol 1 lies in two places: - The security of F[X]. Only Authentication chips contain the secret key, so anything that can produce an F[X] from an X that matches the F[X] generated by a trusted Authentication chip 53 (ChipT) must be authentic.
- The domain of R generated by all Authentication chips must be large and non-deterministic. If the domain of R generated by all Authentication chips is small, then there is no need for a clone manufacturer to crack the key. Instead, the clone manufacturer could incorporate a ROM in their chip that had a record of all of the responses from a genuine chip to the codes sent by the system. The Random function does not strictly have to be in the Authentication Chip, since System can potentially generate the same random number sequence. However it simplifies the design of System and ensures the security of the random number generator will be the same for all implementations that use the Authentication Chip, reducing possible error in system implementation.
Protocol 1 has several advantages: - K is not revealed during the authentication process
- Given X, a clone chip cannot generate FK[X] without K or access to a real Authentication Chip.
- System is easy to design, especially in low cost systems such as ink-jet printers, as no encryption or decryption is required by System itself.
- A wide range of keyed one-way functions exists, including symmetric cryptography, random number sequences, and message authentication codes.
- One-way functions require fewer gates and are easier to verify than asymmetric algorithms).
- Secure key size for a keyed one-way function does not have to be as large as for an asymmetric (public key) algorithm. A minimum of 128 bits can provide appropriate security if F[X] is a symmetric cryptographic function.
However there are problems with this protocol: - It is susceptible to chosen text attack. An attacker can plug the chip into their own system, generate chosen Rs, and observe the output. In order to find the key, an attacker can also search for an R that will generate a specific F[M] since multiple Authentication chips can be tested in parallel.
- Depending on the one-way function chosen, key generation can be complicated. The method of selecting a good key depends on the algorithm being used. Certain keys are weak for a given algorithm.
- The choice of the keyed one-way functions itself is non-trivial. Some require licensing due to patent protection.
A man-in-the middle could take action on a plaintext message M before passing it on to ChipA—it would be preferable if the man-in-the-middle did not see M until after ChipA had seen it. It would be even more preferable if a man-in-the-middle didn't see M at all.
If F is symmetric encryption, because of the key size needed for adequate security, the chips could not be exported from the USA since they could be used as strong encryption devices.
IfProtocol 1 is implemented with F as an asymmetric encryption algorithm, there is no advantage over the symmetric case—the keys needs to be longer and the encryption algorithm is more expensive in silicon.Protocol 1 must be implemented with 2 Authentication Chips in order to keep the key secure. This means that each System requires an Authentication Chip and each consumable requires an Authentication Chip.
K | Key for EK[X] and DK[X]. Must be secret in ChipA. |
Does not have to be secret in ChipT. | |
R | Current random number. Does not have to be secret, but must be |
seeded with a different initial value for each chip instance. | |
Changes with each invocation of the Random function. | |
The following functions are defined:
E[X] | ChipT only. Returns EK[X] where E is asymmetric encrypt |
function E. | |
D[X] | ChipA only. Returns DK[X] where D is asymmetric decrypt |
function D. | |
Random[ ] | ChipT only. Returns R | EK[R], where R is random number |
based on seed S. Advances R to next in random number | |
sequence. | |
The public key KT is in ChipT, while the secret key KA is in ChipA. Having KT in ChipT has the advantage that ChipT can be implemented in software or hardware (with the proviso that the seed for R is different for each chip or system).
-
- System calls ChipT's Random function;
- ChipT returns R|EKT[R] to System;
- System calls ChipA's D function, passing in EKT[R];
- ChipA returns R, obtained by DKA[EKT[R]];
- System compares R from ChipA to the original R generated by ChipT. If they are equal, then ChipA is considered valid. If not, ChipA is invalid.
The data flow can be seen inFIG. 170 .Protocol 2 has the following advantages: - KA (the secret key) is not revealed during the authentication process
- Given EKT[X], a clone chip cannot generate X without KA or access to a real ChipA.
- Since KT≠KA, ChipT can be implemented completely in software or in insecure hardware or as part of System. Only ChipA (in the consumable) is required to be a secure Authentication Chip.
- If ChipT is a physical chip, System is easy to design.
- There are a number of well-documented and cryptanalyzed asymmetric algorithms to chose from for implementation, including patent-free and license-free solutions.
However,Protocol 2 has a number of its own problems: - For satisfactory security, each key needs to be 2048 bits (compared to
minimum 128 bits for symmetric cryptography in Protocol 1). The associated intermediate memory used by the encryption and decryption algorithms is correspondingly larger. - Key generation is non-trivial. Random numbers are not good keys.
- If ChipT is implemented as a core, there may be difficulties in linking it into a given System ASIC.
- If ChipT is implemented as software, not only is the implementation of System open to programming error and non-rigorous testing, but the integrity of the compiler and mathematics primitives must be rigorously checked for each implementation of System. This is more complicated and costly than simply using a well-tested chip.
- Although many symmetric algorithms are specifically strengthened to be resistant to differential cryptanalysis (which is based on chosen text attacks), the private key KA is susceptible to a chosen text attack
- If ChipA and ChipT are instances of the same Authentication Chip, each chip must contain both asymmetric encrypt and decrypt functionality. Consequently each chip is larger, more complex, and more expensive than the chip required for
Protocol 1. - If the Authentication Chip is broken into 2 chips to save cost and reduce complexity of design/test, two chips still need to be manufactured, reducing the economies of scale. This is offset by the relative numbers of systems to consumables, but must still be taken into account
-
Protocol 2 Authentication Chips could not be exported from the USA, since they would be considered strong encryption devices.
Even if the process of choosing a key forProtocol 2 was straightforward,Protocol 2 is impractical at the present time due to the high cost of silicon implementation (both key size and functional implementation). ThereforeProtocol 1 is the protocol of choice for Presence Only Authentication.
-
- In cases where state data is not written to the Authentication Chip, the chip is completely reusable. Clone manufacturers could therefore recycle a valid consumable into a clone consumable. This may be made more difficult by melding the Authentication Chip into the consumable's physical packaging, but it would not stop refill operators.
- In cases where state data is written to the Authentication Chip, the chip may be new, partially used up, or completely used up. However this does not stop a clone manufacturer from using the Piggyback attack, where the clone manufacturer builds a chip that has a real Authentication Chip as a piggyback. The Attacker's chip (ChipE) is therefore a man-in-the-middle. At power up, ChipE reads all the memory state values from the
real Authentication chip 53 into its own memory. ChipE then examines requests from System, and takes different actions depending on the request. Authentication requests can be passed directly to thereal Authentication chip 53, while read/write requests can be simulated by a memory that resembles real Authentication Chip behavior. In this way theAuthentication chip 53 will always appear fresh at power-up. ChipE can do this because the data access is not authenticated.
In order to fool System into thinking its data accesses were successful, ChipE still requires a real Authentication Chip, and in the second case, a clone chip is required in addition to a real Authentication Chip. ConsequentlyProtocols real Authentication chip 53 into the consumable. If the consumable cannot be recycled or refilled easily, it may be protection enough to useProtocols Protocols 3 and 4) may not be useful.
Longevity of Key
A general problem of these two protocols is that once the authentication key is chosen, it cannot easily be changed. In some instances a key-compromise is not a problem, while for others a key compromise is disastrous. For example, in a car/car-key System/Consumable scenario, the customer has only one set of car/car-keys. Each car has a different authentication key. Consequently the loss of a car-key only compromises the individual car. If the owner considers this a problem, they must get a new lock on the car by replacing the System chip inside the car's electronics. The owner's keys must be reprogrammed/replaced to work with the new car System Authentication Chip. By contrast, a compromise of a key for a high volume consumable market (for example ink cartridges in printers) would allow a clone ink cartridge manufacturer to make their own Authentication Chips. The only solution for existing systems is to update the System Authentication Chips, which is a costly and logistically difficult exercise. In any case, consumers' Systems already work—they have no incentive to hobble their existing equipment.
Consumable Lifetime Authentication
In this level of consumable authentication we are concerned with validating the existence of the Authentication Chip, as well as ensuring that the Authentication Chip lasts only as long as the consumable. In addition to validating that an Authentication Chip is present, writes and reads of the Authentication Chip's memory space must be authenticated as well. In this section we assume that the Authentication Chip's data storage integrity is secure—certain parts of memory are Read Only, others are Read/Write, while others are Decrement Only (see the chapter entitled Error! Reference source not found. for more information). Two protocols are presented.Protocol 3 requires 2 Authentication Chips, whileProtocol 4 can be implemented using either 1 or 2 Authentication Chips.
K1 | Key for calculating FK1[X]. Must be secret. |
K2 | Key for calculating FK2[X]. Must be secret. |
R | Current random number. Does not have to be secret, but must be |
seeded with a different initial value for each chip instance. Changes | |
with each successful authentication as defined by the Test function. | |
M | Memory vector of |
be different for each chip (does not have to be a random number). | |
Each Authentication Chip contains the following logical functions:
F[X] | Internal function only. Returns FK[X], the result of applying |
a one-way function F to X based upon either key K1 or key | |
K2 | |
Random[ ] | Returns R | FK1[R]. |
Test[X, Y] | Returns 1 and advances R if FK2[R | X] = Y. Otherwise |
returns 0. The time taken to return 0 must be identical for | |
all bad inputs. | |
Read[X, Y] | Returns M | FK2[X | M] if FK1[X] = Y. |
Otherwise returns 0. The time taken to return 0 must be | |
identical for all bad inputs. | |
Write[X] | Writes X over those parts of M that can legitimately be |
written over. | |
To authenticate ChipA and read ChipA's memory M:
-
- System calls ChipT's Random function;
- ChipT produces R|FK[R] and returns these to System;
- System calls ChipA's Read function, passing in R, FK[R];
- ChipA returns M and FK[R|M];
- System calls ChipT's Test function, passing in M and FK[R|M];
- System checks response from ChipT. If the response is 1, then ChipA is considered authentic. If 0, ChipA is considered invalid.
To authenticate a write of Mnew to ChipA's memory M: - System calls ChipA's Write function, passing in Mnew;
- The authentication procedure for a Read is carried out;
- If ChipA is authentic and Mnew=M, the write succeeded. Otherwise it failed.
The data flow for read authentication is shown inFIG. 171 . The first thing to note aboutProtocol 3 is that FK[X] cannot be called directly. Instead FK[X] is called indirectly by Random, Test and Read:
Random[ ] calls FK1[X] | X is not chosen by the caller. It is chosen by the Random function. An attacker |
must perform a brute force search using multiple calls to Random, Read, and Test to obtain a desired | |
X, FK1[X] pair. | |
Test[X, Y] calls FK2[R | X] | Does not return result directly, but compares the result to Y and then |
returns 1 or 0. Any attempt to deduce K2 by calling Test multiple times trying different values of | |
FK2[R | X] for a given X is reduced to a brute force search where R cannot even be chosen by the | |
attacker. | |
Read[X, Y] calls FK1[X] | X and FK1[X] must be supplied by caller, so the caller must already know |
the X, FK1[X] pair. Since the call returns 0 if | |
Y ≠ FK1[X], a caller can use the Read function for a brute force attack on K1. | |
Read[X, Y] calls FK2[X | M], | X is supplied by caller, however X can only be those values already given |
out by the Random function (since X and Y are validated via K1). Thus a chosen text attack must first | |
collect pairs from Random (effectively a brute force attack). In addition, only part of M can be used in | |
a chosen text attack since some of M is constant (read-only) and the decrement-only part of M can | |
only be used once per consumable. In the next consumable the read-only part of M will be different. | |
Having FK [X] being called indirectly prevents chosen text attacks on the Authentication Chip. Since an attacker can only obtain a chosen R, FK1[R] pair by calling Random, Read, and Test multiple times until the desired R appears, a brute force attack on K1 is required in order to perform a limited chosen text attack on K2. Any attempt at a chosen text attack on K2 would be limited since the text cannot be completely chosen: parts of M are read-only, yet different for each Authentication Chip. The second thing to note is that two keys are used. Given the small size of M, two different keys K1 and K2 are used in order to ensure there is no correlation between F[R] and F[R|M]. K1 is therefore used to help protect K2 against differential attacks. It is not enough to use a single longer key since M is only 256 bits, and only part of M changes during the lifetime of the consumable. Otherwise it is potentially possible that an attacker via some as-yet undiscovered technique, could determine the effect of the limited changes in M to particular bit combinations in R and thus calculate FK2[X|M] based on FK1[X]. As an added precaution, the Random and Test functions in ChipA should be disabled so that in order to generate R, FK[R] pairs, an attacker must use instances of ChipT, each of which is more expensive than ChipA (since a system must be obtained for each ChipT). Similarly, there should be a minimum delay between calls to Random, Read and Test so that an attacker cannot call these functions at high speed. Thus each chip can only give a specific number of X, FK[X] pairs away in a certain time period. The only specific timing requirement of
Another thing to note about
-
- K1 and K2 are not revealed during the authentication process
- Given X, a clone chip cannot generate FK2[X|M] without the key or access to a real Authentication Chip.
- System is easy to design, especially in low cost systems such as ink-jet printers, as no encryption or decryption is required by System itself.
- A wide range of key based one-way functions exists, including symmetric cryptography, random number sequences, and message authentication codes.
- Keyed one-way functions require fewer gates and are easier to verify than asymmetric algorithms).
- Secure key size for a keyed one-way function does not have to be as large as for an asymmetric (public key) algorithm. A minimum of 128 bits can provide appropriate security if F[X] is a symmetric cryptographic function.
Consequently, withProtocol 3, the only way to authenticate ChipA is to read the contents of ChipA's memory. The security of this protocol depends on the underlying FK[X] scheme and the domain of R over the set of all Systems. Although FK[X] can be any keyed one-way function, there is no advantage to implement it as asymmetric encryption. The keys need to be longer and the encryption algorithm is more expensive in silicon. This leads to a second protocol for use with asymmetric algorithms—Protocol 4.Protocol 3 must be implemented with 2 Authentication Chips in order to keep the keys secure. This means that each System requires an Authentication Chip and each consumable requires an Authentication Chip
K | Key for EK[X] and DK[X]. Must be secret in ChipA. |
Does not have to be secret in ChipT. | |
R | Current random number. Does not have to be secret, but must be |
seeded with a different initial value for each chip instance. Changes | |
with each successful authentication as defined by the Test function. | |
M | Memory vector of |
be different for each chip, (does not have to be a random number). | |
There is no point in verifying anything in the Read function, since anyone can encrypt using a public key. Consequently the following functions are defined:
E[X] | Internal function only. Returns EK[X] where E is asymmetric |
encrypt function E. | |
D[X] | Internal function only. Returns DK[X] where D is asymmetric |
decrypt function D. | |
Random[ ] | ChipT only. Returns EK[R]. |
Test[X, Y] | Returns 1 and advances R if DK[R | X] = Y. |
Otherwise returns 0. The time taken to return 0 must be | |
identical for all bad inputs. | |
Read[X] | Returns M | EK[R | M] where R = DK[X] (does not |
test input). | |
Write[X] | Writes X over those parts of M that can legitimately |
be written over. | |
The public key KT is in ChipT, while the secret key KA is in ChipA. Having KT in ChipT has the advantage that ChipT can be implemented in software or hardware (with the proviso that R is seeded with a different random number for each system). To authenticate ChipA and read ChipA's memory M:
-
- System calls ChipT's Random function;
- ChipT produces ad returns EKT[R] to System;
- System calls ChipA's Read function, passing in EKT[R];
- ChipA returns M|EKA[R|M], first obtaining R by DKA[EKT[R]];
- System calls ChipT's Test function, passing in M and EKA[R|M];
- ChipT calculates DKT[EKA[R|M]] and compares it to R|M.
- System checks response from ChipT. If the response is 1, then ChipA is considered authentic. If 0, ChipA is considered invalid.
To authenticate a write of Mnew to ChipA's memory M: - System calls ChipA's Write function, passing in Mnew;
- The authentication procedure for a Read is carried out;
- If ChipA is authentic and Mnew=M, the write succeeded. Otherwise it failed.
The data flow for read authentication is shown inFIG. 172 . Only a valid ChipA would know the value of R, since R is not passed into the Authenticate function (it is passed in as an encrypted value). R must be obtained by decrypting E[R], which can only be done using the secret key KA. Once obtained, R must be appended to M and then the result re-encoded. ChipT can then verify that the decoded form of EKA[R|M]=R|M and hence ChipA is valid. Since KT≠KA, EKT[R]≠EKA[R].Protocol 4 has the following advantages: - KA (the secret key) is not revealed during the authentication process
- Given EKT[X], a clone chip cannot generate X without KA or access to a real ChipA.
- Since KT≠KA, ChipT can be implemented completely in software or in insecure hardware or as part of System. Only ChipA is required to be a secure Authentication Chip.
- Since ChipT and ChipA contain different keys, intense testing of ChipT will reveal nothing about KA.
- If ChipT is a physical chip, System is easy to design.
- There are a number of well-documented and cryptanalyzed asymmetric algorithms to chose from for implementation, including patent-free and license-free solutions.
- Even if System could be rewired so that ChipA requests were directed to ChipT, ChipT could never answer for ChipA since KT≠KA. The attack would have to be directed at the System ROM itself to bypass the Authentication protocol.
However,Protocol 4 has a number of disadvantages: - All Authentication Chips need to contain both asymmetric encrypt and decrypt functionality. Consequently each chip is larger, more complex, and more expensive than the chip required for
Protocol 3. - For satisfactory security, each key needs to be 2048 bits (compared to a minimum of 128 bits for symmetric cryptography in Protocol 1). The associated intermediate memory used by the encryption and decryption algorithms is correspondingly larger.
- Key generation is non-trivial. Random numbers are not good keys.
- If ChipT is implemented as a core, there may be difficulties in linking it into a given System ASIC.
- If ChipT is implemented as software, not only is the implementation of System open to programming error and non-rigorous testing, but the integrity of the compiler and mathematics primitives must be rigorously checked for each implementation of System. This is more complicated and costly than simply using a well-tested chip.
- Although many symmetric algorithms are specifically strengthened to be resistant to differential cryptanalysis (which is based on chosen text attacks), the private key KA is susceptible to a chosen text attack
Protocol 4 Authentication Chips could not be exported from the USA, since they would be considered strong encryption devices.
As withProtocol 3, the only specific timing requirement ofProtocol 4 is that the return value of 0 (indicating a bad input) must be produced in the same amount of time regardless of where the error is in the input. Attackers can therefore not learn anything about what was bad about the input value. This is true for both RD and TST functions.
Variation on Call to TST
If there are two Authentication Chips used, it is theoretically possible for a clone manufacturer to replace the System Authentication Chip with one that returns 1 (success) for each call to TST. The System can test for this by calling TST a number of times—N times with a wrong hash value, and expect the result to be 0. The final time that TST is called, the true returned value from ChipA is passed, and the return value is trusted. The question then arises of how many times to call TST. The number of calls must be random, so that a clone chip manufacturer cannot know the number ahead of time. If System has a clock, bits from the clock can be used to determine how many false calls to TST should be made. Otherwise the returned value from ChipA can be used. In the latter case, an attacker could still rewire the System to permit a clone ChipT to view the returned value from ChipA, and thus know which hash value is the correct one. The worst case of course, is that the System can be completely replaced by a clone System that does not require authenticated consumables—this is the limit case of rewiring and changing the System. For this reason, the variation on calls to TST is optional, depending on the System, the Consumable, and how likely modifications are to be made. Adding such logic to System (for example in the case of a small desktop printer) may be considered not worthwhile, as the System is made more complicated. By contrast, adding such logic to a camera may be considered worthwhile.
Clone Consumable using Real Authentication Chip
It is important to decrement the amount of consumable remaining before use that consumable portion. If the consumable is used first, a clone consumable could fake a loss of contact during a write to the special known address and then appear as a fresh new consumable. It is important to note that this attack still requires a real Authentication Chip in each consumable.
Longevity of Key
A general problem of these two protocols is that once the authentication keys are chosen, it cannot easily be changed. In some instances a key-compromise is not a problem, while for others a key compromise is disastrous.
Choosing a Protocol
Even if the choice of keys forProtocols Protocols Protocols - both require read and write access;
- both require implementation of a keyed one-way function; and
- both require random number generation functionality.
Protocol 3 requires an additional key (K2), as well as some minimal state machine changes: - a state machine alteration to enable FK1[X] to be called during Random;
- a Test function which calls FK2[X]
- a state machine alteration to the Read function to call FK1[X] and FK2[X]
Protocol 3 only requires minimal changes overProtocol 1. It is more secure and can be used in all places where Presence Only Authentication is required (Protocol 1). It is therefore the protocol of choice. Given thatProtocols
Triple | |||||||||
DES | Blowfish | RC5 | IDEA | Random Sequences | HMAC-MD5 | HMAC-SHA1 | HMAC-RIPEMD160 | ||
Free of patents | • | • | • | • | • | • | ||
Random key generation | • | • | • | |||||
Can be exported from the USA | • | • | • | • | ||||
Fast | • | • | • | • | ||||
Preferred Key Size (bits) for use in | 168 | 128 | 128 | 128 | 512 | 128 | 160 | 160 |
this application | ||||||||
Block size (bits) | 64 | 64 | 64 | 64 | 256 | 512 | 512 | 512 |
Cryptanalysis Attack-Free | • | • | • | • | • | |||
(apart from weak keys) | ||||||||
Output size given input size N | ≧N | ≧N | ≧N | ≧N | 128 | 128 | 160 | 160 |
Low storage requirements | • | • | • | • | ||||
Low silicon complexity | • | • | • | • | ||||
NSA designed | • | • | ||||||
An examination of the table shows that the choice is effectively between the 3 HMAC constructs and the Random Sequence. The problem of key size and key generation eliminates the Random Sequence. Given that a number of attacks have already been carried out on MD5 and since the hash result is only 128 bits, HMAC-MD5 is also eliminated. The choice is therefore between HMAC-SHA1 and HMAC-RIPEMD160. RIPEMD-160 is relatively new, and has not been as extensively cryptanalyzed as SHA1. However, SHA-1 was designed by the NSA, so this may be seen by some as a negative attribute.
Given that there is not much between the two, SHA-1 will be used for the HMAC construct.
Choosing a Random Number Generator
The simplest conceptual method of changing R is to increment it by 1. Since R is random to begin with, the values across differing systems are still likely to be random. However given an initial R, all subsequent R values can be determined directly (there is no need to iterate 10,000 times—R will take on values from R0 to R0+10000). An incrementing R is immune to the earlier attack on a constant R. Since R is always different, there is no way to construct a lookup table for the particular System without wasting as many real Authentication Chips as the clone chip will replace.
Rather than increment using an adder, another way of changing R is to implement it as an LFSR (Linear Feedback Shift Register). This has the advantage of less silicon than an adder, but the advantage of an attacker not being able to directly determine the range of R for a particular System, since an LFSR value-domain is determined by sequential access. To determine which values an given initial R will generate, an attacker must iterate through the possibilities and enumerate them. The advantages of a changing R are also evident in the LFSR solution. Since R is always different, there is no way to construct a lookup table for the particular System without using-up as many real Authentication Chips as the clone chip will replace (and only for that System). There is therefore no advantage in having a more complex function to change R. Regardless of the function, it will always be possible for an attacker to iterate through the lifetime set of values in a simulation. The primary security lies in the initial randomness of R. Using an LFSR to change R (apart from using less silicon than an adder) simply has the advantage of not being restricted to a consecutive numeric range (i.e. knowing R, RN cannot be directly calculated; an attacker must iterate through the LFSR N times).
The Random number generator within the Authentication Chip is therefore an LFSR with 160 bits. Tap selection of the 160 bits for a maximal-period LFSR (i.e. the LFSR will cycle through all 2160-1 states, 0 is not a valid state) yields
Holding out Against Logical Attacks
After all this, the clone manufacturer must rely on the consumer returning for a refill, since the cost of building the ROM in the first place consumes a single consumable. The clone manufacturer's business in such a situation is consequently in the refills. The time and cost then, depends on the size of R and the number of different values for M that must be incorporated in the lookup. In addition, a custom clone consumable ROM must be built to match each and every System, and a different valid Authentication Chip must be used for each System (in order to provide the full and partially used data). The use of an Authentication Chip in a System must therefore be examined to determine whether or not this kind of attack is worthwhile for a clone manufacturer. As an example, of a camera system that has about 10,000 prints in its lifetime. Assume it has a single Decrement Only value (number of prints remaining), and a delay of 1 second between calls to RD. In such a system, the sparse table will take about 3 hours to build, and consumes 100K. Remember that the construction of the ROM requires the consumption of a valid Authentication Chip, so any money charged must be worth more than a single consumable and the clone consumable combined. Thus it is not cost effective to perform this function for a single consumable (unless the clone consumable somehow contained the equivalent of multiple authentic consumables). If a clone manufacturer is going to go to the trouble of building a custom ROM for each owner of a System, an easier approach would be to update System to completely ignore the Authentication Chip.
Consequently, this attack is possible as a per-System attack, and a decision must be made about the chance of this occurring for a given System/Consumable combination. The chance will depend on the cost of the consumable and Authentication Chips, the longevity of the consumable, the profit margin on the consumable, the time taken to generate the ROM, the size of the resultant ROM, and whether customers will come back to the clone manufacturer for refills that use the same clone chip etc.
-
- Minimal-difference inputs, and their corresponding outputs
- Minimal-difference outputs, and their corresponding inputs
To launch an attack of this nature, sets of input/output pairs must be collected. The collection fromProtocol 3 can be via Known Plaintext, or from a Partially Adaptive Chosen Plaintext attack. Obviously the latter, being chosen, will be more useful. Hashing algorithms in general are designed to be resistant to differential analysis. SHA-1 in particular has been specifically strengthened, especially by the 80 word expansion so that minimal differences in input produce will still produce outputs that vary in a larger number of bit positions (compared to 128 bit hash functions). In addition, the information collected is not a direct SHA-1 input/output set, due to the nature of the HMAC algorithm. The HMAC algorithm hashes a known value with an unknown value (the key), and the result of this hash is then rehashed with a separate unknown value. Since the attacker does not know the secret value, nor the result of the first hash, the inputs and outputs from SHA-1 are not known, making any differential attack extremely difficult. The following is a more detailed discussion of minimally different inputs and outputs from the Authentication Chip.
Minimal Difference Inputs
This is where an attacker takes a set of X, FK[X] values where the X values are minimally different, and examines the statistical differences between the outputs FK[X]. The attack relies on X values that only differ by a minimal number of bits. The question then arises as to how to obtain minimally different X values in order to compare the FK[X] values.
K1:With K1, the attacker needs to statistically examine minimally different X, FK1[X] pairs. However the attacker cannot choose any X value and obtain a related FK1[X]value. Since X, FK1[X]pairs can only be generated by calling the RND function on a System Authentication Chip, the attacker must call RND multiple times, recording each observed pair in a table. A search must then be made through the observed values for enough minimally different X values to undertake a statistical analysis of the FK1[X]values. K2:With K2, the attacker needs to statistically examine minimally different X, FK2[X]pairs. The only way of generating X, FK2[X]pairs is via the RD function, which produces FK2[X]for a given Y, FK1[Y] pair, where X=Y|M. This means that Y and the changeable part of M can be chosen to a limited extent by an attacker. The amount of choice must therefore be limited as much as possible.
The first way of limiting an attacker's choice is to limit Y, since RD requires an input of the format Y, FK1[Y]. Although a valid pair can be readily obtained from the RND function, it is a pair of RND's choosing. An attacker can only provide their own Y if they have obtained the appropriate pair from RND, or if they know K1. Obtaining the appropriate pair from RND requires a Brute Force search. Knowing K1 is only logically possible by performing cryptanalysis on pairs obtained from the RND function—effectively a known text attack. Although RND can only be called so many times per second, K1 is common across System chips. Therefore known pairs can be generated in parallel.
The second way to limit an attacker's choice is to limit M, or at least the attacker's ability to choose M. The limiting of M is done by making some parts of M Read Only, yet different for each Authentication Chip, and other parts of M Decrement Only. The Read Only parts of M should ideally be different for each Authentication Chip, so could be information such as serial numbers, batch numbers, or random numbers. The Decrement Only parts of M mean that for an attacker to try a different M, they can only decrement those parts of M so many times—after the Decrement Only parts of M have been reduced to 0 those parts cannot be changed again. Obtaining anew Authentication chip 53 provides a new M, but the Read Only portions will be different from the previous Authentication Chip's Read Only portions, thus reducing an attacker's ability to choose M even further. Consequently an attacker can only gain a limited number of chances at choosing values for Y and M.
Minimal Difference Outputs
This is where an attacker takes a set of X, FK[X] values where the FK[X] values are minimally different, and examines the statistical differences between the X values. The attack relies on FK[X] values that only differ by a minimal number of bits. For both K1 and K2, there is no way for an attacker to generate an X value for a given FK[X]. To do so would violate the fact that F is a one-way function. Consequently the only way for an attacker to mount an attack of this nature is to record all observed X, FK[X] pairs in a table. A search must then be made through the observed values for enough minimally different FK[X] values to undertake a statistical analysis of the X values. Given that this requires more work than a minimally different input attack (which is extremely limited due to the restriction on M and the choice of R), this attack is not fruitful.
-
- K1, K2, and R are already recorded by the chip-programmer, or
- the attacker can coerce future values of K1, K2, and R to be recorded.
If humans or computer systems external to the Programming Station do not know the keys, there is no amount of force or bribery that can reveal them. The level of security against this kind of attack is ultimately a decision for the System/Consumable owner, to be made according to the desired level of service. For example, a car company may wish to keep a record of all keys manufactured, so that a person can request a new key to be made for their car. However this allows the potential compromise of the entire key database, allowing an attacker to make keys for any of the manufacturer's existing cars. It does not allow an attacker to make keys for any new cars. Of course, the key database itself may also be encrypted with a further key that requires a certain number of people to combine their key portions together for access. If no record is kept of which key is used in a particular car, there is no way to make additional keys should one become lost. Thus an owner will have to replace his car's Authentication Chip and all his car-keys. This is not necessarily a bad situation. By contrast, in a consumable such as a printer ink cartridge, the one key combination is used for all Systems and all consumables. Certainly if no backup of the keys is kept, there is no human with knowledge of the key, and therefore no attack is possible. However, a no-backup situation is not desirable for a consumable such as ink cartridges, since if the key is lost no more consumables can be made. The manufacturer should therefore keep a backup of the key information in several parts, where a certain number of people must together combine their portions to reveal the full key information. This may be required if case the chip programming station needs to be reloaded. In any case, none of these attacks are againstProtocol 3 itself, since no humans are involved in the authentication process. Instead, it is an attack against the programming stage of the chips.
HMAC-SHA1
The mechanism for authentication is the HMAC-SHA1 algorithm, acting on one of: - HMAC-SHA1 (R, K1), or
- HMAC-SHA1 (R|M, K2)
-
- H=the hash function (e.g. MD5 or SHA-1)
- n=number of bits output from H (e.g. 160 for SHA-1, 128 bits for MD5)
- M=the data to which the MAC function is to be applied
- K=the secret key shared by the two parties
- ipad=0x36 repeated 64 times
- opad =0x5C repeated 64 times
The HMAC algorithm is as follows: - Extend K to 64 bytes by appending 0×00 bytes to the end of K
- XOR the 64 byte string created in (1) with ipad
- Append data stream M to the 64 byte string created in (2)
- Apply H to the stream generated in (3)
- XOR the 64 byte string created in (1) with opad
- Append the H result from (4) to the 64 byte string resulting from (5)
- Apply H to the output of (6) and output the result
Thus:
HMAC[M]=H[(K⊕opad)|H[(K⊕ipad)|M]]
Initial Chaining Values | Additive Constants | |||
h1 | 0x67452301 | y1 | 0x5A827999 |
h2 | 0xEFCDAB89 | y2 | 0x6ED9EBA1 |
h3 | 0x98BADCFE | y3 | 0x8F1BBCDC |
h4 | 0x10325476 | y4 | 0xCA62C1D6 |
h5 | 0xC3D2E1F0 | ||
Non-optimized SHA-1 requires a total of 2912 bits of data storage:
-
- Five 32-bit chaining variables are defined: H1, H2, H3, H4 and H5.
- Five 32-bit working variables are defined: A, B, C, D, and E.
- One 32-bit temporary variable is defined: t.
- Eighty 32-bit temporary registers are defined: X0-79.
The following functions are defined for SHA-1:
Symbolic Nomenclature | Description |
+ | Addition modulo 232 |
X□Y | Result of rotating X left through Y bit positions |
f(X, Y, Z) | (X |
g(X, Y, Z) | (X |
h(X, Y, Z) | X ⊕ Y ⊕ Z |
The hashing algorithm consists of firstly padding the input message to be a multiple of 512 bits and initializing the chaining variables H1-5 with h1-5. The padded message is then processed in 512-bit chunks, with the output hash value being the final 160-bit value given by the concatenation of the chaining variables: H1|H2 |H3|H4|H5. The steps of the SHA-1 algorithm are now examined in greater detail.
Steps to follow to preprocess the input message |
Pad the | Append a 1 bit to the |
input | Append |
0 bits such that the length of the padded | |
message | message is 64-bits short of a multiple of 512 bits. |
Append a 64-bit value containing the length in bits of the | |
original input message. Store the length as most significant | |
bit through to least significant bit. | |
Initialize | H1 |
the chaining | |
variables | |
Steps to follow for each 512 bit block (InputWord0-15) |
Copy the 512 input | For j = 0 to 15 |
bits into X0-15 | Xj = InputWordj |
Expand X0-15 into X16-79 | For j = 16 to 79 |
Xj | |
Initialize working | A |
variables | E |
Round 1 | For j = 0 to 19 |
t | |
E | |
A | |
Round | |
2 | For j = 20 to 39 |
t = ((A | |
E | |
A | |
Round | |
3 | For j = 40 to 59 |
t | |
E | |
A | |
Round | |
4 | For j = 60 to 79 |
t | |
E | |
A | |
Update chaining | H1 |
variables | H3 |
H5 | |
Steps to follow for each 512 bit block (InputWord0-15) |
Initialize working | A | |
variables | E | |
N1 | ||
| | |
Copy the 512 input bits | XN4 = InputWordN4 | |
into X0-15 | [ | |
| Do | 16 times: |
t | ||
[ | ||
E | ||
A | ||
| Do | 4 times: |
XN4 | ||
t | ||
E | ||
A | ||
Round | ||
2 | | |
XN4 | ||
t | ||
E | ||
A | ||
Round | ||
3 | | |
XN4 | ||
t | ||
E | ||
A | ||
Round | ||
4 | | |
XN4 | ||
t | ||
E | ||
A | ||
Update chaining | H1 | |
variables | H3 | |
H5 | ||
The incrementing of N1, N2, and N3 during
HMAC-SHA1
In the Authentication Chip implementation, the HMAC-SHA1 unit only ever performs hashing on two types of inputs: on R using K1 and on R|M using K2. Since the inputs are two constant lengths, rather than have HMAC and SHA-1 as separate entities on chip, they can be combined and the hardware optimized. The padding of messages in SHA-1 Step 1 (a 1 bit, a string of 0 bits, and the length of the message) is necessary to ensure that different messages will not look the same after padding. Since we only deal with 2 types of messages, our padding can be constant 0s. In addition, the optimized version of the SHA-1 algorithm is used, where only 16 32-bit words are used for temporary storage. These 16 registers are loaded directly by the optimized HMAC-SHA1 hardware. The Nine 32-bit constants h1-5 and y1-4 are still required, although the fact that they are constants is an advantage for hardware implementation. Hardware optimized HMAC-SHA-1 requires a total of 1024 bits of data storage:
-
- Five 32-bit chaining variables are defined: H1, H2, H3, H4 and H5.
- Five 32-bit working variables are defined: A, B, C, D, and E.
- Five 32-bit variables for temporary storage and final result: Buff1601-5
- One 32 bit temporary variable is defined: t.
- Sixteen 32-bit temporary registers are defined: X0-15.
The following two sections describe the steps for the two types of calls to HMAC-SHA1.
| Description | Action | |
1 | Process K ⊕ ipad | X0-4 |
2 | X5-15 | |
3 | H1-5 |
|
4 | |
|
5 | Process R | X0-4 |
6 | X5-15 | |
7 | |
|
8 | Buff1601-5 |
|
9 | Process K ⊕ opad | X0-4 |
10 | X5-15 | |
11 | H1-5 |
|
12 | |
|
13 | Process previous H[x] | X0-4 |
14 | X5-15 | |
15 | |
|
16 | Get results | Buff1601-5 |
X0-15 directly, and thereby omit
| Description | Action | |
1 | Process K ⊕ ipad | X0-4 |
2 | X5-15 | |
3 | H1-5 | |
4 | | |
5 | Process R | M | X0-4 |
6 | X5-12 | |
7 | X13-15 | |
8 | | |
9 | Temp | |
10 | Process K ⊕ opad | X0-4 |
11 | X5-15 | |
12 | H1-5 | |
13 | | |
14 | Process previous H[x] | X0-4 |
15 | X5-15 | |
16 | | |
17 | Get results | Result |
Data Storage Integrity
Each Authentication Chip contains some non-volatile memory in order to hold the variables required by
Variable Name | Size (in bits) | Description |
M[0 . . . 15] | 256 | 16 words (each 16 bits) containing state data such as |
serial numbers, media remaining etc. | ||
| 160 | Key used to transform R during authentication. |
| 160 | Key used to transform M during authentication. |
| 160 | Current random number |
AccessMode[0 . . . 15] | 32 | The 16 sets of 2-bit AccessMode values for M[n]. |
| 32 | The minimum number of clock ticks between calls to |
key-based | ||
SIWritten | ||
1 | If set, the secret key information (K1, K2, and R) has | |
been written to the chip. If clear, the secret information | ||
has not been written yet. | ||
| 1 | If set, the RND and TST functions can be called, but |
RD and WR functions cannot be called. | ||
If clear, the RND and TST functions cannot be called, | ||
but RD and WR functions can be called. | ||
Total bits | 802 | |
Note that if these variables are in Flash memory, it is not a simple matter to write a new value to replace the old. The memory must be erased first, and then the appropriate bits set. This has an effect on the algorithms used to change Flash memory based variables. For example, Flash memory cannot easily be used as shift registers. To update a Flash memory variable by a general operation, it is necessary to follow these steps:
- Read the entire N bit value into a general purpose register;
- Perform the operation on the general purpose register;
- Erase the Flash memory corresponding to the variable; and
- Set the bits of the Flash memory location based on the bits set in the general-purpose register.
- A RESET of the Authentication Chip has no effect on these non-volatile variables.
M and AccessMode
Variables M[0] through M[15] are used to hold consumable state data, such as serial numbers, batch numbers, and amount of consumable remaining. Each M[n] register is 16 bits, making the entire M vector 256 bits (32 bytes). Clients cannot read from or written to individual M[n] variables. Instead, the entire vector, referred to as M, is read or written in a single logical access. M can be read using the RD (read) command, and written to via the WR (write) command. The commands only succeed if K1 and K2 are both defined (SIWritten =1) and the Authentication Chip is a consumable non-trusted chip (IsTrusted =0). Although M may contain a number of different data types, they differ only in their write permissions. Each data type can always be read. Once in client memory, the 256 bits can be interpreted in any way chosen by the client. The entire 256 bits of M are read at one time instead of in smaller amounts for reasons of security, as described in the chapter entitled Authentication. The different write permissions are outlined in the following table:
Data Type | Access Note |
Read Only | Can never be written to |
ReadWrite | Can always be written to |
Decrement Only | Can only be written to if the new |
value is less than the old value. Decrement | |
Only values are typically 16-bit or 32-bit values, | |
but can be any multiple of 16 bits. | |
To accomplish the protection required for writing, a 2-bit access mode value is defined for each M[n]. The following table defines the interpretation of the 2-bit access mode bit-pattern:
Bits | Op | Interpretation | Action taken during |
00 | RW | ReadWrite | The new 16-bit value is always written to M[n]. |
01 | MSR | Decrement Only | The new 16-bit value is only written to M[n] if it is |
(Most Significant | less than the value currently in M[n]. This is used for | ||
Region) | access to the | ||
Only number. | |||
10 | NMSR | Decrement Only | The new 16-bit value is only written to M[n] if |
(Not the Most | M[n + 1] can also be written. The NMSR access mode | ||
Significant Region) | allows multiple precision values of 32 bits and more | ||
(multiples of 16 bits) to decrement. | |||
11 | RO | Read Only | The new 16-bit value is ignored. |
M[n] is left unchanged. | |||
The 16 sets of access mode bits for the 16 M[n] registers are gathered together in a single 32-bit AccessMode register. The 32 bits of the AccessMode register correspond to M[n] with n as follows:
| LSB | |||||||||||||||
15 | 14 | 13 | 12 | 11 | 10 | 9 | 8 | 7 | 6 | 5 | 4 | 3 | 2 | 1 | 0 | |
Each 2-bit value is stored in hi/lo format. Consequently, if M[0-5] were access mode MSR, with M[6-15] access mode RO, the 32-bit AccessMode register would be:
11-11-11-11-11-11-11-11-11-11-01-01-01-01-01-01
During execution of a WR (write) command, AccessMode[n] is examined for each M[n], and a decision made as to whether the new M[n] value will replace the old. The AccessMode register is set using the Authentication Chip's SAM (Set Access Mode) command. Note that the Decrement Only comparison is unsigned, so any Decrement Only values that require negative ranges must be shifted into a positive range. For example, a consumable with a Decrement Only data item range of −50 to 50 must have the range shifted to be 0 to 100. The System must then interpret the
K1
K1 is the 160-bit secret key used to transform R during the authentication protocol. K1 is programmed along with K2 and R with the SSI (Set Secret Information) command. Since K1 must be kept secret, clients cannot directly read K1. The commands that make use of K1 are RND and RD. RND returns a pair R, FK1[R] where R is a random number, while RD requires an X, FK1[X]pair as input. K1 is used in the keyed one-way hash function HMAC-SHA1. As such it should be programmed with a physically generated random number, gathered from a physically random phenomenon. K1 must NOT be generated with a computer-run random number generator. The security of the Authentication chips depends on K1, K2 and R being generated in a way that is not deterministic. For example, to set K1, a person can toss a
K2
K2 is the 160-bit secret key used to transform M|R during the authentication protocol. K2 is programmed along with K1 and R with the SSI (Set Secret Information) command. Since K2 must be kept secret, clients cannot directly read K2. The commands that make use of K2 are RD and TST. RD returns a pair M, FK2[M X] where X was passed in as one of the parameters to the RD function. TST requires an M, FK2[M|R] pair as input, where R was obtained from the Authentication Chip's RND function. K2 is used in the keyed one-way hash function HMAC-SHA1. As such it should be programmed with a physically generated random number, gathered from a physically random phenomenon. K2 must NOT be generated with a computer-run random number generator. The security of the Authentication chips depends on K1, K2 and R being generated in a way that is not deterministic. For example, to set K2, a person can toss a
R and IsTrusted
R is a 160-bit random number seed that is programmed along with K1 and K2 with the SSI (Set Secret Information) command. R does not have to be kept secret, since it is given freely to callers via the RND command. However R must be changed only by the Authentication Chip, and not set to any chosen value by a caller. R is used during the TST command to ensure that the R from the previous call to RND was used to generate the FK2[M|R] value in the non-trusted Authentication Chip (ChipA). Both RND and TST are only used in trusted Authentication Chips (ChipT).
-
- If the IsTrusted bit is set, the chip is considered to be a trusted chip, and hence clients can call RND and TST functions (but not RD or WR).
- If the IsTrusted bit is clear, the chip is not considered to be trusted. Therefore RND and TST functions cannot be called (but RD and WR functions can be called instead). System never needs to call RND or TST on the consumable (since a clone chip would simply return 1 to a function such as TST, and a constant value for RND).
The IsTrusted bit has the added advantage of reducing the number of available R, FK1[R] pairs obtainable by an attacker, yet still maintain the integrity of the Authentication protocol. To obtain valid R, FK1[R] pairs, an attacker requires a System Authentication Chip, which is more expensive and less readily available than the consumables. Both R and the IsTrusted bit are cleared to 0 by the CLR command. They are both written to by the issuing of the SSI command. The IsTrusted bit can only set by storing a non-zero seed value in R via the SSI command (R must be non-zero to be a valid LFSR state, so this is quite reasonable). R is changed via a 160-bit maximal period LFSR with taps onbits
Authentication Chips destined to be trusted Chips used in Systems (ChipT) should have their IsTrusted bit set during programming, and Authentication Chips used in Consumables (ChipA) should have their IsTrusted bit kept clear (by storing 0 in R via the SSI command during programming). There is no command to read or write the IsTrusted bit directly. The security of the Authentication Chip does not only rely upon the randomness of K1 and K2 and the strength of the HMAC-SHA1 algorithm. To prevent an attacker from building a sparse lookup table, the security of the Authentication Chip also depends on the range of R over the lifetime of all Systems. What this means is that an attacker must not be able to deduce what values of R there are in produced and future Systems. As such R should be programmed with a physically generated random number, gathered from a physically random phenomenon. R must NOT be generated with a computer-run random number generator. The generation of R must not be deterministic. For example, to generate an R for use in a trusted System chip, a person can toss afair coin 160 times, recording heads as 1, and tails as 0. 0 is the only non-valid initial value for a trusted R is 0 (or the IsTrusted bit will not be set).
SIWritten
Once the duration of a tick is known, the MinTicks value can to be set. The value for MinTicks is the minimum number of ticks required to pass between calls to the key-based RD and TST functions. The value is a real-time number, and divided by the length of an operating tick. Suppose the input clock speed matches the maximum clock speed of 10 MHz. If we want a minimum of 1 second between calls to key based functions, the value for MinTicks is set to 10,000,000. Consider an attacker attempting to collect X, FK1[X]pairs by calling RND, RD and TST multiple times. If the MinTicks value is set such that the amount of time between calls to TST is 1 second, then each pair requires 1 second to generate. To generate 225 pairs (only requiring 1.25 GB of storage), an attacker requires more than 1 year. An attack requiring 264 pairs would require 5.84×1011 years using a single chip, or 584 years if 1 billion chips were used, making such an attack completely impractical in terms of time (not to mention the storage requirements!).
With regards to K1, it should be noted that the MinTicks variable only slows down an attacker and causes the attack to cost more since it does not stop an attacker using multiple System chips in parallel. However MinTicks does make an attack on K2 more difficult, since each consumable has a different M (part of M is random read-only data). In order to launch a differential attack, minimally different inputs are required, and this can only be achieved with a single consumable (containing an effectively constant part of M). Minimally different inputs require the attacker to use a single chip, and MinTicks causes the use of a single chip to be slowed down. If it takes a year just to get the data to start searching for values to begin a differential attack this increases the cost of attack and reduces the effective market time of a clone consumable.
Authentication Chip Commands
The System communicates with the Authentication Chips via a simple operation command set. This section details the actual commands and parameters necessary for implementation of
Op | T | W | Mn | | Output | Description | |
000 | — | — | CLR | — | — | | |
001 | 0 | 0 | SSI | [160, 160, 160] | — | Set Secret | |
Information | |||||||
010 | 0 | 1 | RD | [160, 160] | [256, 160] | Read M securely | |
010 | 1 | 1 | RND | — | [160, 160] | Random | |
011 | 0 | 1 | WR | [256] | — | Write M | |
011 | 1 | 1 | TST | [256, 160] | [1] | | |
100 | 0 | 1 | SAM | [32] | [32] | | |
101 | — | 1 | GIT | — | [1] | Get Is Trusted | |
110 | — | 1 | SMT | [32] | — | Set MinTicks | |
Op = Opcode, | |||||||
T = IsTrusted value, | |||||||
W = IsWritten value, | |||||||
Mn = Mnemonic, | |||||||
[n] = number of bits required for parameter |
Any command not defined in this table is interpreted as NOP (No Operation). Examples include
CLR | Clear | ||
Input | None | ||
Output | None | ||
Changes | All | ||
The CLR (Clear) Command is designed to completely erase the contents of all Authentication Chip memory. This includes all keys and secret information, access mode bits, and state data. After the execution of the CLR command, an Authentication Chip will be in a programmable state, just as if it had been freshly manufactured. It can be reprogrammed with a new key and reused. A CLR command consists of simply the CLR command opcode. Since the Authentication Chip is serial, this must be transferred one bit at a time. The bit order is LSB to MSB for each command component. A CLR command is therefore sent as bits 0-2 of the CLR opcode. A total of 3 bits are transferred. The CLR command can be called directly at any time. The order of erasure is important. SIWritten must be cleared first, to disable further calls to key access functions (such as RND, TST, RD and WR). If the AccessMode bits are cleared before SIWritten, an attacker could remove power at some point after they have been cleared, and manipulate M, thereby have a better chance of retrieving the secret information with a partial chosen text attack. The CLR command is implemented with the following steps:
| Action | |
1 | Erase SIWritten | |
Erase IsTrusted | ||
Erase K1 | ||
Erase K2 | ||
Erase R | ||
Erase | ||
2 | Erase AccessMode | |
Erase MinTicks | ||
Once the chip has been cleared it is ready for reprogramming and reuse. A blank chip is of no use to an attacker, since although they can create any value for M (M can be read from and written to), key-based functions will not provide any information as K1 and K2 will be incorrect. It is not necessary to consume any input parameter bits if CLR is called for any opcode other than CLR. An attacker will simply have to RESET the chip. The reason for calling CLR is to ensure that all secret information has been destroyed, making the chip useless to an attacker.
SSI—Set Secret Information
- Input: K1, K2, R=[160 bits, 160 bits, 160 bits]
- Output: None
- Changes: K1, K2, R, SIWritten, IsTrusted
The SSI (Set Secret Information) command is used to load the K1, K2 and R variables, and to set SIWritten and IsTrusted flags for later calls to RND, TST, RD and WR commands. An SSI command consists of the SSI command opcode followed by the secret information to be stored in the K1, K2 and R registers. Since the Authentication Chip is serial, this must be transferred one bit at a time. The bit order is LSB to MSB for each command component. An SSI command is therefore sent as: bits 0-2 of the SSI opcode, followed by bits 0-159 of the new value for K1, bits 0-159 of the new value for K2, and finally bits 0-159 of the seed value for R. A total of 483 bits are transferred. The K1, K2, R, SIWritten, and IsTrusted registers are all cleared to 0 with a CLR command. They can only be set using the SSI command.
The SSI command uses the flag SIWritten to store the fact that data has been loaded into K1, K2, and R. If the SIWritten and IsTrusted flags are clear (this is the case after a CLR instruction), then K1, K2 and R are loaded with the new values. If either flag is set, an attempted call to SSI results in a CLR command being executed, since only an attacker or an erroneous client would attempt to change keys or the random seed without calling CLR first. The SSI command also sets the IsTrusted flag depending on the value for R. If R=0, then the chip is considered untrustworthy, and therefore IsTrusted remains at 0. If R≠0, then the chip is considered trustworthy, and therefore IsTrusted is set to 1. Note that the setting of the IsTrusted bit only occurs during the SSI command. If an Authentication Chip is to be reused, the CLR command must be called first. The keys can then be safely reprogrammed with an SSI command, and fresh state information loaded into M using the SAM and WR commands. The SSI command is implemented with the following steps:
| Action | |
1 | CLR | |
2 | K1 | |
3 | K2 | |
4 | R | |
5 | IF (R ≠ 0) | |
IsTrusted | ||
6 | SIWritten | |
RD—Read
- Input: X, FK1[X]=[160 bits, 160 bits]
- Output: M, FK2[X|M]=[256 bits, 160 bits]
- Changes: R
The RD (Read) command is used to securely read the entire 256 bits of state data (M) from a non-trusted Authentication Chip. Only a valid Authentication Chip will respond correctly to the RD request. The output bits from the RD command can be fed as the input bits to the TST command on a trusted Authentication Chip for verification, with the first 256 bits (M) stored for later use if (as we hope) TST returns 1. Since the Authentication Chip is serial, the command and input parameters must be transferred one bit at a time. The bit order is LSB to MSB for each command component. A RD command is therefore: bits 0-2 of the RD opcode, followed by bits 0-159 of X, and bits 0-159 of FK1[X]. 323 bits are transferred in total. X and FK1[X]are obtained by calling the trusted Authentication Chip's RND command. The 320 bits output by the trusted chip's RND command can therefore be fed directly into the non-trusted chip's RD command, with no need for these bits to be stored by System. The RD command can only be used when the following conditions have been met:
SIWritten = 1 | indicating that K1, K2 and R have been set up via the SSI |
command; and | |
IsTrusted = 0 | indicating the chip is not trusted since it is not permitted |
to generate random number sequences; | |
In addition, calls to RD must wait for the MinTicksRemaining register to reach 0. Once it has done so, the register is reloaded with MinTicks to ensure that a minimum time will elapse between calls to RD. Once MinTicksRemaining has been reloaded with MinTicks, the RD command verifies that the input parameters are valid. This is accomplished by internally generating FK1[X]for the input X, and then comparing the result against the input FK1[X]. This generation and comparison must take the same amount of time regardless of whether the input parameters are correct or not. If the times are not the same, an attacker can gain information about which bits of FK1[X]are incorrect. The only way for the input parameters to be invalid is an erroneous System (passing the wrong bits), a case of the wrong consumable in the wrong System, a bad trusted chip (generating bad pairs), or an attack on the Authentication Chip. A constant value of 0 is returned when the input parameters are wrong. The time taken for 0 to be returned must be the same for all bad inputs so that attackers can learn nothing about what was invalid. Once the input parameters have been verified the output values are calculated. The 256 bit content of M are transferred in the following order: bits 0-15 of M[0], bits 0-15 of M[1], through to bits 0-15 of M[15]. FK2[X|M] is calculated and output as bits 0-159. The R register is used to store the X value during the validation of the X, FK1[X] pair. This is because RND and RD are mutually exclusive. The RD command is implemented with the following steps:
| Action | |
1 | IF (MinTicksRemaining ≠ 0 | |
GOTO 1 | ||
2 | MinTicksRemaining | |
3 | R | |
4 | Hash | |
5 | OK | |
Note that this operation must take constant time so an | ||
attacker cannot determine how much of their guess is correct. | ||
6 | IF (OK) | |
Output 256 bits of M to client | ||
ELSE | ||
Output 256 bits of 0 to | ||
7 | Hash | |
8 | IF (OK) | |
| ||
ELSE | ||
Output | ||
160 bits of 0 to client | ||
RND—Random
- Input: None
- Output: R, FK1[R]=[160 bits, 160 bits]
- Changes: None
The RND (Random) command is used by a client to obtain a valid R, FK1[R] pair for use in a subsequent authentication via the RD and TST commands. Since there are no input parameters, an RND command is therefore simply bits 0-2 of the RND opcode. The RND command can only be used when the following conditions have been met:
SIWritten = 1 | indicating K1 and R have been set up via the SSI |
command; | |
IsTrusted = 1 | indicating the chip is permitted to generate random |
number sequences; | |
| Action | |
1 | | |
2 | Hash | |
3 | | |
TST—Test
- Input: X, FK2[R|X]=[256 bits, 160 bits]
- Output: 1 or 0=[1 bit]
- Changes: M, R and MinTicksRemaining (or all registers if attack detected)
SIWritten = 1 | indicating K2 and R have been set up via the SSI |
command; | |
IsTrusted = 1 | indicating the chip is permitted to generate random |
number sequences; | |
In addition, calls to TST must wait for the MinTicksRemaining register to reach 0. Once it has done so, the register is reloaded with MinTicks to ensure that a minimum time will elapse between calls to TST. TST causes the internal M value to be replaced by the input M value. FK2[M|R] is then calculated, and compared against the 160 bit input hash value. A single output bit is produced: 1 if they are the same, and 0 if they are different. The use of the internal M value is to save space on chip, and is the reason why RD and TST are mutually exclusive commands. If the output bit is 1, R is updated to be the next random number in the sequence. This forces the caller to use a new random number each time RD and TST are called. The resultant output bit is not output until the entire input string has been compared, so that the time to evaluate the comparison in the TST function is always the same. Thus no attacker can compare execution times or number of bits processed before an output is given.
The next random number is generated from R using a 160-bit maximal period LFSR (tap selections on
The TST command is implemented with the following steps:
| Action | |
1 | IF (MinTicksRemaining ≠ 0 | |
| ||
2 | MinTicksRemaining | |
3 | M | |
4 | IF (R = 0) | |
| ||
5 | Hash | |
6 | OK | |
Note that this operation must take constant time so an attacker | ||
cannot determine how much of their guess is correct. | ||
7 | IF (OK) | |
Temp | ||
Erase R | ||
Advance TEMP via LFSR | ||
R | ||
8 | | |
Note that we can't simply advance R directly in
WR—Write
- Input: Mnew=[256 bits]
- Output: None
- Changes: M
A WR (Write) command is used to update the writeable parts of M containing Authentication Chip state data. The WR command by itself is not secure. It must be followed by an authenticated read of M (via a RD command) to ensure that the change was made as specified. The WR command is called by passing the WR command opcode followed by the new 256 bits of data to be written to M. Since the Authentication Chip is serial, the new value for M must be transferred one bit at a time. The bit order is LSB to MSB for each command component. A WR command is therefore: bits 0-2 of the WR opcode, followed by bits 0-15 of M[0], bits 0-15 of M[1], through to bits 0-15 of M[15]. 259 bits are transferred in total. The WR command can only be used when SIWritten=1, indicating that K1, K2 and R have been set up via the SSI command (if SIWritten is 0, then K1, K2 and R have not been setup yet, and the CLR command is called instead). The ability to write to a specific M[n] is governed by the corresponding Access Mode bits as stored in the AccessMode register. The AccessMode bits can be set using the SAM command. When writing the new value to M[n] the fact that M[n] is Flash memory must be taken into account. All the bits of M[n] must be erased, and then the appropriate bits set. Since these two steps occur on different cycles, it leaves the possibility of attack open. An attacker can remove power after erasure, but before programming with the new value. However, there is no advantage to an attacker in doing this:- A Read/Write M[n] changed to 0 by this means is of no advantage since the attacker could have written any value using the WR command anyway.
- A Read Only M[n] changed to 0 by this means allows an additional known text pair (where the M[n] is 0 instead of the original value). For future use M[n] values, they are already 0, so no information is given.
- A Decrement Only M[n] changed to 0 simply speeds up the time in which the consumable is used up. It does not give any new information to an attacker that using the consumable would give.
The WR command is implemented with the following steps:
| Action | |
1 | DecEncountered | |
EqEncountered | ||
n | ||
2 | Temp | |
3 | AM = AccessMode[~n] | |
Compare to the | ||
| ||
5 | LT | |
EQ | ||
6 | WE | |
((AM = MSR) | ||
((AM = NMSR) | ||
7 | DecEncountered | |
((AM = NMSR) | ||
((AM = NMSR) | ||
EqEncountered | ||
((AM = NMSR) | ||
Advance to the next | ||
Access Mode set | ||
and write the new | ||
M[~n] if applicable | ||
8 | IF (WE) | |
Erase M[~n] | ||
M[~n] | ||
10 | | |
11 | IF (n ≠ 0) | |
| ||
SAM—Set AccessMode
- Input: AccessModenew=[32 bits]
- Output: AccessMode=[32 bits]
- Changes: AccessMode
The SAM (Set Access Mode) command is used to set the 32 bits of the AccessMode register, and is only available for use in consumable Authentication Chips (where the IsTrusted flag =0). The SAM command is called by passing the SAM command opcode followed by a 32-bit value that is used to set bits in the AccessMode register. Since the Authentication Chip is serial, the data must be transferred one bit at a time. The bit order is LSB to MSB for each command component. A SAM command is therefore: bits 0-2 of the SAM opcode, followed by bits 0-31 of bits to be set in AccessMode. 35 bits are transferred in total. The AccessMode register is only cleared to 0 upon execution of a CLR command. Since an access mode of 00 indicates an access mode of RW (read/write), not setting any AccessMode bits after a CLR means that all of M can be read from and written to. The SAM command only sets bits in the AccessMode register. Consequently a client can change the access mode bits for M[n] from RW to RO (read only) by setting the appropriate bits in a 32-bit word, and calling SAM with that 32-bit value as the input parameter. This allows the programming of the access mode bits at different times, perhaps at different stages of the manufacturing process. For example, the read only random data can be written to during the initial key programming stage, while allowing a second programming stage for items such as consumable serial numbers.
Since the SAM command only sets bits, the effect is to allow the access mode bits corresponding to M[n] to progress from RW to either MSR, NMSR, or RO. It should be noted that an access mode of MSR can be changed to RO, but this would not help an attacker, since the authentication of M after a write to a doctored Authentication Chip would detect that the write was not successful and hence abort the operation. The setting of bits corresponds to the way that Flash memory works best. The only way to clear bits in the AccessMode register, for example to change a Decrement Only M[n] to be Read/Write, is to use the CLR command. The CLR command not only erases (clears) the AccessMode register, but also clears the keys and all of M. Thus the AccessMode[n] bits corresponding to M[n] can only usefully be changed once between CLR commands. The SAM command returns the new value of the AccessMode register (after the appropriate bits have been set due to the input parameter). By calling SAM with an input parameter of 0, AccessMode will not be changed, and therefore the current value of AccessMode will be returned to the caller.
The SAM command is implemented with the following steps:
| Action | |
1 | Temp | |
2 | SetBits(AccessMode, Temp) | |
3 | | |
GIT—Get is Trusted
- Input: None
- Output: IsTrusted=[1 bit]
- Changes: None
The GIT (Get Is Trusted) command is used to read the current value of the IsTrusted bit on the Authentication Chip. If the bit returned is 1, the Authentication Chip is a trusted System Authentication Chip. If the bit returned is 0, the Authentication Chip is a consumable Authentication Chip. A GIT command consists of simply the GIT command opcode. Since the Authentication Chip is serial, this must be transferred one bit at a time. The bit order is LSB to MSB for each command component. A GIT command is therefore sent as bits 0-2 of the GIT opcode. A total of 3 bits are transferred. The GIT command is implemented with the following steps:
| Action | |
1 | Output IsTrusted bit to client | |
SMT—SET MinTicks
- Input: MinTicksnew=[32 bits]
- Output: None
- Changes: MinTicks
The SMT (Set MinTicks) command is used to set bits in the MinTicks register and hence define the minimum number of ticks that must pass in between calls to TST and RD. The SMT command is called by passing the SMT command opcode followed by a 32-bit value that is used to set bits in the MinTicks register. Since the Authentication Chip is serial, the data must be transferred one bit at a time. The bit order is LSB to MSB for each command component. An SMT command is therefore: bits 0-2 of the SMT opcode, followed by bits 0-31 of bits to be set in MinTicks. 35 bits are transferred in total. The MinTicks register is only cleared to 0 upon execution of a CLR command. A value of 0 indicates that no ticks need to pass between calls to key-based functions. The functions may therefore be called as frequently as the clock speed limiting hardware allows the chip to run.
Since the SMT command only sets bits, the effect is to allow a client to set a value, and only increase the time delay if further calls are made. Setting a bit that is already set has no effect, and setting a bit that is clear only serves to slow the chip down further. The setting of bits corresponds to the way that Flash memory works best. The only way to clear bits in the MinTicks register, for example to change a value of 10 ticks to a value of 4 ticks, is to use the CLR command. However the CLR command clears the MinTicks register to 0 as well as clearing all keys and M. It is therefore useless for an attacker. Thus the MinTicks register can only usefully be changed once between CLR commands.
The SMT command is implemented with the following steps:
| Action | |
1 | Temp | |
2 | SetBits(MinTicks, Temp) | |
Programming Authentication Chips
Authentication Chips must be programmed with logically secure information in a physically secure environment. Consequently the programming procedures cover both logical and physical security. Logical security is the process of ensuring that K1, K2, R, and the random M[n] values are generated by a physically random process, and not by a computer. It is also the process of ensuring that the order in which parts of the chip are programmed is the most logically secure. Physical security is the process of ensuring that the programming station is physically secure, so that K1 and K2 remain secret, both during the key generation stage and during the lifetime of the storage of the keys. In addition, the programming station must be resistant to physical attempts to obtain or destroy the keys. The Authentication Chip has its own security mechanisms for ensuring that K1 and K2 are kept secret, but the Programming Station must also keep K1 and K2 safe.
Overview
After manufacture, an Authentication Chip must be programmed before it can be used. In all chips values for K1 and K2 must be established. If the chip is destined to be a System Authentication Chip, the initial value for R must be determined. If the chip is destined to be a consumable Authentication Chip, R must be set to 0, and initial values for M and AccessMode must be set up. The following stages are therefore identified:
-
- Determine Interaction between Systems and Consumables
- Determine Keys for Systems and Consumables
- Determine MinTicks for Systems and Consumables
- Program Keys, Random Seed, MinTicks and Unused M
- Program State Data and Access Modes
Once the consumable or system is no longer required, the attached Authentication Chip can be reused. This is easily accomplished by reprogrammed the chip starting atStage 4 again. Each of the stages is examined in the subsequent sections.
Stage 0: Manufacture
The manufacture of Authentication Chips does not require any special security. There is no secret information programmed into the chips at manufacturing stage. The algorithms and chip process is not special. Standard Flash processes are used. A theft of Authentication Chips between the chip manufacturer and programming station would only provide the clone manufacturer with blank chips. This merely compromises the sale of Authentication chips, not anything authenticated by Authentication Chips. Since the programming station is the only mechanism with consumable and system product keys, a clone manufacturer would not be able to program the chips with the correct key. Clone manufacturers would be able to program the blank chips for their own systems and consumables, but it would be difficult to place these items on the market without detection. In addition, a single theft would be difficult to base a business around.
Stage 1: Determine Interaction Between Systems and Consumables
The decision of what is a System and what is a Consumable needs to be determined before any Authentication Chips can be programmed. A decision needs to be made about which Consumables can be used in which Systems, since all connected Systems and Consumables must share the same key information. They also need to share state-data usage mechanisms even if some of the interpretations of that data have not yet been determined. A simple example is that of a car and car-keys. The car itself is the System, and the car-keys are the consumables. There are several car-keys for each car, each containing the same key information as the specific car. However each car (System) would contain a different key (shared by its car-keys), since we don't want car-keys from one car working in another. Another example is that of a photocopier that requires a particular toner cartridge. In simple terms the photocopier is the System, and the toner cartridge is the consumable. However the decision must be made as to what compatibility there is to be between cartridges and photocopiers. The decision has historically been made in terms of the physical packaging of the toner cartridge: certain cartridges will or won't fit in a new model photocopier based on the design decisions for that copier. When Authentication Chips are used, the components that must work together must share the same key information.
In addition, each type of consumable requires a different way of dividing M (the state data). Although the way in which M is used will vary from application to application, the method of allocating M[n] and AccessMode[n] will be the same: - Define the consumable state data for specific use
- Set some M[n] registers aside for future use (if required). Set these to be 0 and Read Only. The value can be tested for in Systems to maintain compatibility.
- Set the remaining M[n] registers (at least one, but it does not have to be M[15]) to be Read Only, with the contents of each M[n] completely random. This is to make it more difficult for a clone manufacturer to attack the authentication keys.
The following examples show ways in which the state data may be organized.
M[n] | | Description | ||
0 | RO | Key number (16 bits) | ||
1-4 | RO | Car engine number (64 bits) | ||
5-8 | RO | For future expansion = 0 (64 bits) | ||
8-15 | RO | Random bit data (128 bits) | ||
If the car manufacturer keeps all logical keys for all cars, it is a trivial matter to manufacture a new physical car-key for a given car should one be lost. The new car-key would contain a new Key Number in M[0], but have the same K1 and K2 as the car's Authentication Chip. Car Systems could allow specific key numbers to be invalidated (for example if a key is lost). Such a system might require Key 0 (the master key) to be inserted first, then all valid keys, then Key 0 again. Only those valid keys would now work with the car. In the worst case, for example if all car-keys are lost, then a new set of logical keys could be generated for the car and its associated physical car-keys if desired. The Car engine number would be used to tie the key to the particular car. Future use data may include such things as rental information, such as driver/renter details.
M[n] | | Description | ||
0 | RO | Serial number (16 bits) | ||
1 | RO | Batch number (16 bits) | ||
2 | MSR | Page Count Remaining (32 bits, hi/lo) | ||
3 | NMSR | |||
4-7 | RO | For future expansion = 0 (64 bits) | ||
8-15 | RO | Random bit data (128 bits) | ||
If a lower quality image unit is made that must be replaced after only 10,000 copies, the 32-bit page count can still be used for compatibility with existing photocopiers. This allows several consumable types to be used with the same system.
M[n] | | Description | ||
0 | RO | Serial number (16 bits) | ||
1 | RO | Batch number (16 bits) | ||
2 | MSR | Photos Remaining (16 bits) | ||
3-6 | RO | For future expansion = 0 (64 bits) | ||
7-15 | RO | Random bit data (144 bits) | ||
The Photos Remaining value at M[2] allows a number of consumable types to be built for use with the same camera System. For example, a new consumable with 36 photos is trivial to program. Suppose 2 years after the introduction of the camera, a new type of camera was introduced. It is able to use the old consumable, but also can process a new film type. M[3] can be used to define Film Type. Old film types would be 0, and the new film types would be some new value. New Systems can take advantage of this. Original systems would detect a non-zero value at M[3] and realize incompatibility with new film types. New Systems would understand the value of M[3] and so react appropriately. To maintain compatibility with the old consumable, the new consumable and System needs to have the same key information as the old one. To make a clean break with a new System and its own special consumables, a new key set would be required.
M[n] | | Description | ||
0 | RO | Serial number (16 bits) | ||
1 | RO | Batch number (16 bits) | ||
2 | MSR | Cyan Remaining (32 bits, hi/lo) | ||
3 | | |||
4 | MSR | Magenta Remaining (32 bits, hi/lo) | ||
5 | | |||
6 | MSR | Yellow Remaining (32 bits, hi/lo) | ||
7 | NMSR | |||
8-11 | RO | For future expansion = 0 (64 bits) | ||
12-15 | RO | Random bit data (64 bits) | ||
Stage 2: Determine Keys for Systems and Consumables
Once the decision has been made as to which Systems and consumables are to share the same keys, those keys must be defined. The values for K1 and K2 must therefore be determined. In most cases, K1 and K2 will be generated once for all time. All Systems and consumables that have to work together (both now and in the future) need to have the same K1 and K2 values. K1 and K2 must therefore be kept secret since the entire security mechanism for the System/Consumable combination is made void if the keys are compromised. If the keys are compromised, the damage depends on the number of systems and consumables, and the ease to which they can be reprogrammed with new non-compromised keys: In the case of a photocopier with toner cartridges, the worst case is that a clone manufacturer could then manufacture their own Authentication Chips (or worse, buy them), program the chips with the known keys, and then insert them into their own consumables. In the case of a car with car-keys, each car has a different set of keys. This leads to two possible general scenarios. The first is that after the car and car-keys are programmed with the keys, K1 and K2 are deleted so no record of their values are kept, meaning that there is no way to compromise K1 and K2. However no more car-keys can be made for that car without reprogramming the car's Authentication Chip. The second scenario is that the car manufacturer keeps K1 and K2, and new keys can be made for the car. A compromise of K1 and K2 means that someone could make a car-key specifically for a particular car.
The keys and random data used in the Authentication Chips must therefore be generated by a means that is non-deterministic (a completely computer generated pseudo-random number cannot be used because it is deterministic—knowledge of the generator's seed gives all future numbers). K1 and K2 should be generated by a physically random process, and not by a computer. However, random bit generators based on natural sources of randomness are subject to influence by external factors and also to malfunction. It is imperative that such devices be tested periodically for statistical randomness.
A simple yet useful source of random numbers is the Lavarand® system from SGI. This generator uses a digital camera to photograph six lava lamps every few minutes. Lava lamps contain chaotic turbulent systems. The resultant digital images are fed into an SHA-1 implementation that produces a 7-way hash, resulting in a 160-bit value from every 7th bye from the digitized image. These 7 sets of 160 bits total 140 bytes. The 140 byte value is fed into a BBS generator to position the start of the output bitstream. The
An extreme example of a non-deterministic random process is someone flipping a
Stage 3: Determine MinTicks for Systems and Consumables
The value of MinTicks depends on the operating clock speed of the Authentication Chip (System specific) and the notion of what constitutes a reasonable time between RD or TST function calls (application specific). The duration of a single tick depends on the operating clock speed. This is the maximum of the input clock speed and the Authentication Chip's clock-limiting hardware. For example, the Authentication Chip's clock-limiting hardware may be set at 10 MHz (it is not changeable), but the input clock is 1 MHz. In this case, the value of 1 tick is based on 1 MHz, not 10 MHz. If the input clock was 20 MHz instead of 1 MHz, the value of 1 tick is based on 10 MHz (since the clock speed is limited to 10 MHz). Once the duration of a tick is known, the MinTicks value can be set. The value for MinTicks is the minimum number of ticks required to pass between calls to RD or RND key-based functions. Suppose the input clock speed matches the maximum clock speed of 10 MHz. If we want a minimum of 1 second between calls to TST, the value for MinTicks is set to 10,000,000. Even a value such as 2 seconds might be a completely reasonable value for a System such as a printer (one authentication per page, and one page produced every 2 or 3 seconds).
Stage 4: Program Keys, Random Seed, MinTicks and Unused M
Authentication Chips are in an unknown state after manufacture. Alternatively, they have already been used in one consumable, and must be reprogrammed for use in another. Each Authentication Chip must be cleared and programmed with new keys and new state data. Clearing and subsequent programming of Authentication Chips must take place in a secure Programming Station environment.
-
- RESET the chip
- CLR[ ]
- Load R (160 bit register) with physically random data
- SSI[K1, K2, R]
- SMT[MinTicksSystem]
The Authentication Chip is now ready for insertion into a System. It has been completely programmed. If the System Authentication Chips are stolen at this point, a clone manufacturer could use them to generate R, FK1[R] pairs in order to launch a known text attack on K1, or to use for launching a partially chosen-text attack on K2. This is no different to the purchase of a number of Systems, each containing a trusted Authentication Chip. The security relies on the strength of the Authentication protocols and the randomness of K1 and K2.
-
- RESET the chip
- CLR[ ]
- Load R (160 bit register) with 0
- SSI[K1, K2, R]
- Load X (256 bit register) with 0
- Set bits in X corresponding to appropriate M[n] with physically random data
- WR[X]
- Load Y (32 bit register) with 0
- Set bits in Y corresponding to appropriate M[n] with Read Only Access Modes
- SAM[Y]
- SMT[MinTicksConsumable]
The non-trusted consumable chip is now ready to be programmed with the general state data. If the Authentication Chips are stolen at this point, an attacker could perform a limited chosen text attack. In the best situation, parts of M are Read Only (0 and random data), with the remainder of M completely chosen by an attacker (via the WR command). A number of RD calls by an attacker obtains FK2[M|R] for a limited M. In the worst situation, M can be completely chosen by an attacker (since all 256 bits are used for state data). In both cases however, the attacker cannot choose any value for R since it is supplied by calls to RND from a System Authentication Chip. The only way to obtain a chosen R is by a Brute Force attack. It should be noted that ifStages
Stage 5: Program State Data and Access Modes
This stage is only required for consumable Authentication Chips, since M and AccessMode registers cannot be altered on System Authentication Chips. The future use and random values of M[n] have already been programmed inStage 4. The remaining state data values need to be programmed and the associated Access Mode values need to be set. Bear in mind that the speed of this stage will be limited by the value stored in the MinTicks register. This stage is separated fromStage 4 on account of the differences either in physical location or in time between where/whenStage 4 is performed, and where/whenStage 5 is performed. Ideally, Stages 4 and 5 are performed at the same time in the same Programming Station.Stage 4 produces valid Authentication Chips, but does not load them with initial state values (other than 0). This is to allow the programming of the chips to coincide with production line runs of consumables. AlthoughStage 5 can be run multiple times, each time setting a different state data value and Access Mode value, it is more likely to be run a single time, setting all the remaining state data values and setting all the remaining Access Mode values. For example, a production line can be set up where the batch number and serial number of the Authentication Chip is produced according to the physical consumable being produced. This is much harder to match if the state data is loaded at a physically different factory.
TheStage 5 process involves first checking to ensure the chip is a valid consumable chip, which includes a RD to gather the data from the Authentication Chip, followed by a WR of the initial data values, and then a SAM to permanently set the new data values. The steps are outlined here: - IsTrusted=GIT[ ]
- If (IsTrusted), exit with error (wrong kind of chip!)
- Call RND on a valid System chip to get a valid input pair
- Call RD on chip to be programmed, passing in valid input pair
- Load X (256 bit register) with results from a RD of Authentication Chip
- Call TST on valid System chip to ensure X and consumable chip are valid
- If (TST returns 0), exit with error (wrong consumable chip for system)
- Set bits of X to initial state values
- WR[X]
- Load Y (32 bit register) with 0
- Set bits of Y corresponding to Access Modes for new state values
- SAM[Y]
Of course the validation (Steps 1 to 7) does not have to occur ifStage Stage 5 is run as a separate programming process fromStage 4. If these Authentication Chips are now stolen, they are already programmed for use in a particular consumable. An attacker could place the stolen chips into a clone consumable. Such a theft would limit the number of cloned products to the number of chips stolen. A single theft should not create a supply constant enough to provide clone manufacturers with a cost-effective business. The alternative use for the chips is to save the attacker from purchasing the same number of consumables, each with an Authentication Chip, in order to launch a partially chosen text attack or brute force attack. There is no special security breach of the keys if such an attack were to occur.
Manufacture
The circuitry of the Authentication Chip must be resistant to physical attack. A summary of manufacturing implementation guidelines is presented, followed by specification of the chip's physical defenses (ordered by attack).
Guidelines for Manufacturing
The following are general guidelines for implementation of an Authentication Chip in terms of manufacture: - Standard process
- Minimum size (if possible)
- Clock Filter
- Noise Generator
- Tamper Prevention and Detection circuitry
- Protected memory with tamper detection
- Boot circuitry for loading program code
- Special implementation of FETs for key data paths
- Data connections in polysilicon layers where possible
- OverUnderPower Detection Unit
- No test circuitry
-
- Allow a great range of manufacturing location options
- Take advantage of well-defined and well-known technology
- Reduce cost
Note that the standard process still allows physical protection mechanisms.
-
- where you can be certain that a physical attack has occurred.
- where you cannot be certain that a physical attack has occurred.
The two types of detection differ in what is performed as a result of the detection. In the first case, where the circuitry can be certain that a true physical attack has occurred, erasure of Flash memory key information is a sensible action. In the second case, where the circuitry cannot be sure if an attack has occurred, there is still certainly something wrong. Action must be taken, but the action should not be the erasure of secret key information. A suitable action to take in the second case is a chip RESET. If what was detected was an attack that has permanently damaged the chip, the same conditions will occur next time and the chip will RESET again. If, on the other hand, what was detected was part of the normal operating environment of the chip, a RESET will not harm the key.
A good example of an event that circuitry cannot have knowledge about, is a power glitch. The glitch may be an intentional attack, attempting to reveal information about the key. It may, however, be the result of a faulty connection, or simply the start of a power-down sequence. It is therefore best to only RESET the chip, and not erase the key. If the chip was powering down, nothing is lost. If the System is faulty, repeated RESETs will cause the consumer to get the System repaired. In both cases the consumable is still intact. A good example of an event that circuitry can have knowledge about, is the cutting of a data line within the chip. If this attack is somehow detected, it could only be a result of a faulty chip (manufacturing defect) or an attack. In either case, the erasure of the secret information is a sensible step to take.
Consequently each Authentication Chip should have 2 Tamper Detection Lines as illustrated in Fig.—one for definite attacks, and one for possible attacks. Connected to these Tamper Detection Lines would be a number of Tamper Detection test units, each testing for different forms of tampering. In addition, we want to ensure that the Tamper Detection Lines and Circuits themselves cannot also be tampered with. At one end of the Tamper Detection Line is a source of pseudo-random bits (clocking at high speed compared to the general operating circuitry). The Noise Generator circuit described above is an adequate source. The generated bits pass through two different paths—one carries the original data, and the other carries the inverse of the data. The wires carrying these bits are in the layer above the general chip circuitry (for example, the memory, the key manipulation circuitry etc). The wires must also cover the random bit generator. The bits are recombined at a number of places via an XOR gate. If the bits are different (they should be), a 1 is output, and used by the particular unit (for example, each output bit from a memory read should be ANDed with this bit value). The lines finally come together at the Flash memory Erase circuit, where a complete erasure is triggered by a 0 from the XOR. Attached to the line is a number of triggers, each detecting a physical attack on the chip. Each trigger has an oversize nMOS transistor attached to GND. The Tamper Detection Line physically goes through this nMOS transistor. If the test fails, the trigger causes the Tamper Detect Line to become 0. The XOR test will therefore fail on either this clock cycle or the next one (on average), thus RESETing or erasing the chip.FIG. 175 illustrates the basic principle of a Tamper Detection Line in terms of tests and the XOR connected to either the Erase or RESET circuitry. The Tamper Detection Line must go through the drain of an output transistor for each test, as illustrated by the oversize nMOS transistor layout ofFIG. 176 . :It is not possible to break the Tamper Detect Line since this would stop the flow of 1s and 0s from the random source. The XOR tests would therefore fail. As the Tamper Detect Line physically passes through each test, it is not possible to eliminate any particular test without breaking the Tamper Detect Line. It is important that the XORs take values from a variety of places along the Tamper Detect Lines in order to reduce the chances of an attack.FIG. 177 illustrates the taking of multiple XORs from the Tamper Detect Line to be used in the different parts of the chip. Each of these XORs can be considered to be generating a ChipOK bit that can be used within each unit or sub-unit. A sample usage would be to have an OK bit in each unit that is ANDed with a given ChipOK bit each cycle. The OK bit is loaded with 1 on a RESET. If OK is 0, that unit will fail until the next RESET. If the Tamper Detect Line is functioning correctly, the chip will either RESET or erase all key information. If the RESET or erase circuitry has been destroyed, then this unit will not function, thus thwarting an attacker. The destination of the RESET and Erase line and associated circuitry is very context sensitive. It needs to be protected in much the same way as the individual tamper tests. There is no point generating a RESET pulse if the attacker can simply cut the wire leading to the RESET circuitry. The actual implementation will depend very much on what is to be cleared at RESET, and how those items are cleared. Finally,FIG. 178 shows how the Tamper Lines cover the noise generator circuitry of the chip. The generator and NOT gate are on one level, while the Tamper Detect Lines run on a level above the generator.
The second part of the solution for Flash is to use multi-level data storage, but only to use a subset of those multiple levels for valid bit representations. Normally, when multi-level Flash storage is used, a single floating gate holds more than one bit. For example, a 4-voltage-state transistor can represent two bits. Assuming a minimum and maximum voltage representing 00 and 11 respectively, the two middle voltages represent 01 and 10. In the Authentication Chip, we can use the two middle voltages to represent a single bit, and consider the two extremes to be invalid states. If an attacker attempts to force the state of a bit one way or the other by closing or cutting the gate's circuit, an invalid voltage (and hence invalid state) results. The second part of the solution for RAM is to use a parity bit. The data part of the register can be checked against the parity bit (which will not match after an attack). The bits coming from Flash and RAM can therefore be validated by a number of test units (one per bit) connected to the common Tamper Detection Line. The Tamper Detection circuitry would be the first circuitry the data passes through (thus stopping an attacker from cutting the data lines).
For circuitry that manipulates secret key information, such information must be kept hidden. An alternative non-flashing CMOS implementation should therefore be used for all data paths that manipulate the key or a partially calculated value that is based on the key. The use of two non-overlapping clocks φ1 and φ2 can provide a non-flashing mechanism. φ1 is connected to a second gate of all NMOS transistors, and φ2 is connected to a second gate of all pMOS transistors. The transition can only take place in combination with the clock. Since φ1 and φ2 are non-overlapping, the pMOS and NMOS transistors will not have a simultaneous intermediate resistance. The setup is shown in
Finally, regular CMOS inverters can be positioned near critical non-Flashing CMOS components. These inverters should take their input signal from the Tamper Detection Line above. Since the Tamper Detection Line operates multiple times faster than the regular operating circuitry, the net effect will be a high rate of light-bursts next to each non-Flashing CMOS component. Since a bright light overwhelms observation of a nearby faint light, an observer will not be able to detect what switching operations are occurring in the chip proper. These regular CMOS inverters will also effectively increase the amount of circuit noise, reducing the SNR and obscuring useful EMI.
There are a number of side effects due to the use of non-Flashing CMOS:
-
- The effective speed of the chip is reduced by twice the rise time of the clock per clock cycle. This is not a problem for an Authentication Chip.
- The amount of current drawn by the non-Flashing CMOS is reduced (since the short circuits do not occur). However, this is offset by the use of regular CMOS inverters.
- Routing of the clocks increases chip area, especially since multiple versions of φ1 and φ2 are required to cater for different levels of propagation. The estimation of chip area is double that of a regular implementation.
- Design of the non-Flashing areas of the Authentication Chip are slightly more complex than to do the same with a with a regular CMOS design. In particular, standard cell components cannot be used, making these areas full custom. This is not a problem for something as small as an Authentication Chip, particularly when the entire chip does not have to be protected in this manner.
The System/consumable manufacturer must therefore determine how likely an attack of this nature is. Such a study must include given the pricing structure of Systems and Consumables, frequency of System service, advantage to the consumer of having a physical modification performed, and where consumers would go to get the modification performed. The limit case of modifying a system is for a clone manufacturer to provide a completely clone System which takes clone consumables. This may be simple competition or violation of patents. Either way, it is beyond the scope of the Authentication Chip and depends on the technology or service being cloned.
-
- After manufacture, but before programming of key
- After programming of key, but before programming of state data
- After programming of state data, but before insertion into the consumable or system
- After insertion into the system or consumable
A theft in between the chip manufacturer and programming station would only provide the clone manufacturer with blank chips. This merely compromises the sale of Authentication chips, not anything authenticated by the Authentication chips. Since the programming station is the only mechanism with consumable and system product keys, a clone manufacturer would not be able to program the chips with the correct key. Clone manufacturers would be able to program the blank chips for their own Systems and Consumables, but it would be difficult to place these items on the market without detection. The second form of theft can only happen in a situation where an Authentication Chip passes through two or more distinct programming phases. This is possible, but unlikely. In any case, the worst situation is where no state data has been programmed, so all of M is read/write. If this were the case, an attacker could attempt to launch an Adaptive Chosen Text Attack on the chip. The HMAC-SHA1 algorithm is resistant to such attacks. The third form of theft would have to take place in between the programming station and the installation factory. The Authentication chips would already be programmed for use in a particular system or for use in a particular consumable. The only use these chips have to a thief is to place them into a clone System or clone Consumable. Clone systems are irrelevant—a cloned System would not even require anauthentication chip 53. For clone Consumables, such a theft would limit the number of cloned products to the number of chips stolen. A single theft should not create a supply constant enough to provide clone manufacturers with a cost-effective business. The final form of theft is where the System or Consumable itself is stolen. When the theft occurs at the manufacturer, physical security protocols must be enhanced. If the theft occurs anywhere else, it is a matter of concern only for the owner of the item and the police or insurance company. The security mechanisms that the Authentication Chip uses assume that the consumables and systems are in the hands of the public. Consequently, having them stolen makes no difference to the security of the keys.
Authentication Chip Design
The Authentication Chip has a physical and a logical external interface. The physical interface defines how the Authentication Chip can be connected to a physical System, and the logical interface determines how that System can communicate with the Authentication Chip.
Physical Interface
The Authentication Chip is a small 4-pin CMOS package (actual internal size is approximately 0.30 mm2 using 0.25 μm Flash process). The 4 pins are GND, CLK, Power, and Data. Power is a nominal voltage. If the voltage deviates from this by more than a fixed amount, the chip will RESET. The recommended clock speed is 4-10 MHz. Internal circuitry filters the clock signal to ensure that a safe maximum clock speed is not exceeded. Data is transmitted and received one bit at a time along the serial data line. The chip performs a RESET upon power-up, power-down. In addition, tamper detection and prevention circuitry in the chip will cause the chip to either RESET or erase Flash memory (depending on the attack detected) if an attack is detected. A special Programming Mode is enabled by holding the CLK voltage at a particular level. This is defined further in the next section.
Logical Interface
The Authentication Chip has two operating modes—a Normal Mode and a Programming Mode. The two modes are required because the operating program code is stored in Flash memory instead of ROM (for security reasons). The Programming mode is used for testing purposes after manufacture and to load up the operating program code, while the normal mode is used for all subsequent usage of the chip.
Programming Mode
The Programming Mode is enabled by holding a specific voltage on the CLK line for a given amount of time. When the chip enters Programming Mode, all Flash memory is erased (including all secret key information and any program code). The Authentication Chip then validates the erasure. If the erasure was successful, the Authentication Chip receives 384 bytes of data corresponding to the new program code. The bytes are transferred in order byte0 to byte383. The bits are transferred from bit0 to bit7. Once all 384 bytes of program code have been loaded, the Authentication Chip hangs. If the erasure was not successful, the Authentication Chip will hang without loading any data into the Flash memory. After the chip has been programmed, it can be restarted. When the chip is RESET with a normal voltage on the CLK line, Normal Mode is entered.
Normal Mode
Whenever the Authentication Chip is not in Programming Mode, it is in Normal Mode. When the Authentication Chip starts up in Normal Mode (for example a power-up RESET), it executes the program currently stored in the program code region of Flash memory. The program code implements a communication mechanism between the System and Authentication Chip, accepting commands and data from the System and producing output values. Since the Authentication Chip communicates serially, bits are transferred one at a time. The System communicates with the Authentication Chips via a simple operation command set. Each command is defined by 3-bit opcode. The interpretation of the opcode depends on the current value of the IsTrusted bit and the IsWritten bit.
The following operations are defined:
Op | T | W | Mn | | Output | Description | |
000 | — | — | CLR | — | — | | |
001 | 0 | 0 | SSI | [160, 160, 160] | — | Set Secret | |
Information | |||||||
010 | 0 | 1 | RD | [160, 160] | [256, 160] | Read M securely | |
010 | 1 | 1 | RND | — | [160, 160] | Random | |
011 | 0 | 1 | WR | [256] | — | Write M | |
011 | 1 | 1 | TST | [256, 160] | [1] | | |
100 | 0 | 1 | SAM | [32] | [32] | | |
101 | — | 1 | GIT | — | [1] | Get Is Trusted | |
110 | — | 1 | SMT | [32] | — | Set MinTicks | |
Op = Opcode, | |||||||
T = IsTrusted value, | |||||||
W = IsWritten value, | |||||||
Mn = Mnemonic, | |||||||
[n] = number of bits required for parameter |
Any command not defined in this table is interpreted as NOP (No operation). Examples include
In some cases, the output bits from one chip's command can be fed directly as the input bits to another chip's command. An example of this is the RND and RD commands. The output bits from a call to RND on a trusted Authentication Chip do not have to be kept by System. Instead, System can transfer the output bits directly to the input of the non-trusted Authentication Chip's RD command. The description of each command points out where this is so. Each of the commands is examined in detail in the subsequent sections. Note that some algorithms are specifically designed because the permanent registers are kept in Flash memory.
Size | ||
Variable Name | (in bits) | Description |
M[0 . . . 15] | 256 | 16 words (each 16 bits) containing state data such as |
serial numbers, media remaining etc. | ||
| 160 | Key used to transform R during authentication. |
| 160 | Key used to transform M during authentication. |
| 160 | Current random number |
AccessMode[0 . . . 15] | 32 | The 16 sets of 2-bit AccessMode values for M[n]. |
| 32 | The minimum number of clock ticks between calls to key- |
based | ||
SIWritten | ||
1 | If set, the secret key information (K1, K2, and R) has been | |
written to the chip. If clear, the secret information has not | ||
been written yet. | ||
| 1 | If set, the RND and TST functions can be called, but RD |
and WR functions cannot be called. | ||
If clear, the RND and TST functions cannot be called, but | ||
RD and WR functions can be called. | ||
Total bits | 802 | |
Architecture Overview
This section chapter provides the high-level definition of a purpose-built CPU capable of implementing the functionality required of an Authentication Chip. Note that this CPU is not a general purpose CPU. It is tailor-made for implementing the Authentication logic. The authentication commands that a user of an Authentication Chip sees, such as WRITE, TST, RND etc are all implemented as small programs written in the CPU instruction set. The CPU contains a 32-bit Accumulator (which is used in most operations), and a number of registers. The CPU operates on 8-bit instructions specifically tailored to implementing authentication logic. Each 8-bit instruction typically consists of a 4-bit opcode, and a 4-bit operand.
Operating Speed
An internal Clock Frequency Limiter Unit prevents the chip from operating at speeds any faster than a predetermined frequency. The frequency is built into the chip during manufacture, and cannot be changed. The frequency is recommended to be about 4-10 MHz.
Composition and Block Diagram
The Authentication Chip contains the following components:
Unit Name | CMOS Type | Description |
Clock Frequency | Normal | Ensures the operating frequency of the Authentication |
Limiter | Chip does not exceed a specific maximum frequency. | |
OverUnderPower | Normal | Ensures that the power supply remains in a valid |
Detection Unit | operating range. | |
Programming Mode | Normal | Allows users to enter Programming Mode. |
Detection Unit | ||
Noise Generator | Normal | For generating Idd noise and for use in the Tamper |
Prevention and Detection circuitry. | ||
State Machine | Normal | for controlling the two operating modes of the chip |
(Programming Mode and Normal Mode). This | ||
includes generating the two operating cycles of the | ||
CPU, stalling during long command operations, and | ||
storing the op-code and operand during operating | ||
cycles. | ||
I/O Unit | Normal | Responsible for communicating serially with the |
outside world. | ||
ALU | Non-flashing | Contains the 32-bit accumulator as well as the general |
mathematical and logical operators. | ||
MinTicks Unit | Normal (99%), | Responsible for a programmable minimum delay (via a |
Non-flashing (1%) | countdown) between certain key-based operations. | |
Address Generator | Normal (99%), | Generates direct, indirect, and indexed addresses as |
Unit | Non-flashing (1%) | required by specific operands. |
Program Counter Unit | Normal | Includes the 9 bit PC (program counter), as well as |
logic for branching and subroutine control | ||
Memory Unit | Non-flashing | Addressed by 9 bits of address. It contains an 8-bit |
wide program Flash memory, and 32-bit wide Flash | ||
memory, RAM, and look-up tables. Also contains | ||
Programming Mode circuitry to enable loading of | ||
program code. | ||
Memory Map
Registers
A number of registers are defined in the Authentication Chip. They are used for temporary storage during function execution. Some are used for arithmetic functions, others are used for counting and indexing, and others are used for serial I/O. These registers do not need to be kept in non-volatile (Flash) memory. They can be read or written without the need for an erase cycle (unlike Flash memory). Temporary storage registers that contain secret information still need to be protected from physical attack by Tamper Prevention and Detection circuitry and parity checks.
All registers are cleared to 0 on a RESET. However, program code should not assume any particular state, and set up register values appropriately. Note that these registers do not include the various OK bits defined for the Tamper Prevention and Detection circuitry. The OK bits are scattered throughout the various units and are set to 1 upon a RESET.
Register | |||||
Name | Size | | Description | ||
C1 |
1 × 3 | 3 | Counter used to index arrays: | ||
AE, B160, M, H, y, and h. | ||||
| 1 × 5 | 5 | General | |
N | ||||
1-4 | 4 × 4 | 16 | Used to index array X | |
All these counter registers are directly accessible from the instruction set. Special instructions exist to load them with specific values, and other instructions exist to decrement or increment them, or to branch depending on the whether or not the specific counter is zero. There are also 2 special flags (not registers) associated with C1 and C2, and these flags hold the zero-ness of C1 or C2. The flags are used for loop control, and are listed here, for although they are not registers, they can be tested like registers.
| Description | ||
C1Z | |||
1 = C1 is current zero, 0 = C1 is currently non-zero. | |||
|
1 = C2 is current zero, 0 = C2 is currently non-zero. | ||
Name | | Description |
WE | ||
1 | WriteEnable for X register array: | |
0 = Writes to X registers become no- | ||
1 = Writes to X registers are carried out | ||
| 1 | 0 = K1 is accessed during K references. Reads from M |
are interpreted as reads of 0 | ||
1 = K2 is accessed during K references. Reads from M | ||
succeed. | ||
All these 1-bit flags are directly accessible from the instruction set Special instructions exist to set and clear these flags. Registers used for Write Integrity
Name | | Description |
EE | ||
1 | Corresponds to the EqEncountered variable in the WR | |
command pseudocode. Used during the writing of | ||
multi-precision data values to determine whether all more | ||
significant components have been equal to their previous | ||
values. | ||
|
1 | Corresponds to the DecEncountered variable in the WR |
command pseudocode. Used during the writing | ||
of multi-precision data values to determine whether a more | ||
significant components has been decremented already. | ||
-
- Reads from InBit will hang while InBitValid is clear. InBitValid will remain clear until the client has written the next input bit to InBit. Reading InBit clears the InBitValid bit to allow the next InBit to be read from the client A client cannot write a bit to the Authentication Chip unless the InBitValid bit is clear.
- Writes to OutBit will hang while OutBitValid is set. OutBitValid will remain set until the client has read the bit from OutBit. Writing OutBit sets the OutBitValid bit to allow the next OutBit to be read by the client. A client cannot read a bit from the Authentication Chip unless the OutBitValid bit is set.
Register Name | Bits | Parity | Where | ||
Acc |
32 | 1 | Arithmetic | ||
Adr | ||||
9 | 1 | Address | ||
AMT | ||||
32 | Arithmetic | |||
C1 | ||||
3 | 1 | Address | ||
C2 | ||||
5 | 1 | Address | ||
CMD | ||||
8 | 1 | State Machine | ||
Cycle (Old = | 1 | State Machine | ||
Cycle) | ||||
| 1 | Arithmetic | ||
EE | ||||
1 | Arithmetic | |||
InBit | ||||
1 | Input | |||
InBitValid | ||||
1 | Input | |||
K2MX | ||||
1 | Address | |||
MTR | ||||
32 | 1 | | ||
MTRZ | ||||
1 | MinTicks Unit | |||
N[1-4] | 16 | 4 | Address | |
OutBit | ||||
1 | Input | |||
OutBitValid | ||||
1 | Input | |||
PCA | ||||
54 | 6 | Program | ||
RTMP | ||||
1 | Arithmetic | |||
SP | ||||
3 | 1 | Program | ||
WE | ||||
1 | | |||
Z | ||||
1 | Arithmetic Logic | |||
Total bits | ||||
206 | 17 | |||
Instruction Set
The CPU operates on 8-bit instructions specifically tailored to implementing authentication logic. The majority of 8-bit instruction consists of a 4-bit opcode, and a 4-bit operand. The high-
Opcode | | Simple Description | |
0000 | TBR | Test and branch. | |
0001 | DBR | Decrement and | |
001 | JSR | Jump subroutine via table | |
01000 | RTS | Return from subroutine | |
01001 | JSI | Jump subroutine indirect | |
0101 | | Set counter | |
0110 | CLR | Clear | |
0111 | SET | Set bits in | |
1000 | ADD | Add a 32 bit value to the | |
1001 | LOG | Logical operation (AND, and OR) | |
1010 | XOR | Exclusive-OR Accumulator with some | |
1011 | LD | Load Accumulator from specified | |
1100 | ROR | Rotate Accumulator right | |
1101 | RPL | Replace | |
1110 | LDK | Load Accumulator with a constant | |
1111 | ST | Store Accumulator in specified location | |
The following table is a summary of which operands can be used with which opcodes. The table is ordered alphabetically by opcode mnemonic. The binary value for each operand can be found in the subsequent tables.
Opcode | Valid Operand |
ADD | {A, B, C, D, E, T, MT, AM, |
AE[C1], B160[C1], H[C1], M[C1], K[C1], R[C1], X[N4]} | |
CLR | {WE, K2MX, M[C1], Group1, Group2} |
DBR | {C1, C2}, Offset into DBR Table |
JSI | {} |
JSR | Offset into Table 1 |
LD | {A, B, C, D, E, T, MT, AM, |
AE[C1], B160[C1], H[C1], M[C1], K[C1], R[C1], X[N4]} | |
LDK | {0x0000..., 0x3636..., 0x5C5C..., 0xFFFF, h[C1], y[C1]} |
LOG | {AND, OR}, {A, B, C, D, E, T, MT, AM} |
ROR | {InBit, OutBit, LFSR, RLFSR, IST, ISW, MTRZ, 1, 2, 27, 31} |
RPL | {Init, MHI, MLO} |
RTS | {} |
SC | {C1, C2}, Offset into counter list |
SET | {WE, K2MX, Nx, MTR, IST, ISW} |
ST | {A, B, C, D, E, T, MT, AM, |
AE[C1], B160[C1], H[C1], M[C1], K[C1], R[C1], X[N4]} | |
TBR | {0, 1 }, Offset into Table 1 |
XOR | {A, B, C, D, E, T, MT, AM, X[N1], X[N2], X[N3], X[N4]} |
The following operand table shows the interpretation of the 4-bit operands where all 4 bits are used for direct interpretation.
Operand | ADD, LD, ST | XOR | ROR | LDK | RPL | SET | CLR | |
0000 | E | E | InBit | 0x00 . . . | Init | WE | WE | |
0001 | D | D | OutBit | 0x36 . . . | — | K2MX | K2MX | |
0010 | C | C | RB | 0x5C . . . | — | Nx | — | |
0011 | B | B | XRB | 0xFF . . . | — | — | — | |
0100 | A | A | IST | y[C1] | — | IST | — | |
0101 | T | T | ISW | — | — | ISW | — | |
0110 | MT | MT | MTRZ | — | — | MTR | — | |
0111 | | AM | 1 | — | — | — | — | |
1000 | AE[C1] | — | — | h[C1] | — | — | — | |
1001 | B160[C1] | — | 2 | — | — | — | — | |
1010 | H[C1] | — | 27 | — | — | — | — | |
1011 | — | — | — | — | — | — | — | |
1100 | R[C1] | X[N1] | 31 | — | — | — | R | |
1101 | K[C1] | X[N2] | — | — | — | — | Group1 | |
1110 | M[C1] | X[N3] | — | — | MLO | — | M[C1] | |
1111 | X[N4] | X[N4] | — | — | MHI | — | Group2 | |
The following instructions make a selection based upon the highest bit of the operand:
Which Counter? | Which operation? | Which Value? | |
Operand3 | (DBR, SC) | (LOG) | (TBR) |
0 | C1 | AND | |
1 | C2 | OR | Non-zero |
The lowest 3 bits of the operand are either offsets (DBR, TBR), values from a special table (SC) or as in the case of LOG, they select the second input for the logical operation. The interpretation matches the interpretation for the ADD, LD, and ST opcodes:
Operand2-0 | LOG Input2 | SC Value | ||
000 | |
2 | ||
001 | |
3 | ||
010 | |
4 | ||
011 | |
7 | ||
100 | A | 10 | ||
101 | |
15 | ||
110 | |
19 | ||
111 | |
31 | ||
Mnemonic: | ADD | ||
Opcode: | 1000 | ||
Usage: | ADD Value | ||
The ADD instruction adds the specified operand to the Accumulator via modulo 232 addition. The operand is one of A, B, C, D, E, T, AM, MT, AE[C1], H[C1], B160[C1], R[C1], K[C1], M[C1], or X[N4]. The Z flag is also set during this operation, depending on whether the value loaded is zero or not.
Mnemonic: | CLR | ||
Opcode: | 0110 | ||
Usage: | CLR Flag/Register | ||
The CLR instruction causes the specified internal flag or Flash memory registers to be cleared. In the case of Flash memory, although the CLR instruction takes some time the next instruction is stalled until the erasure of Flash memory has finished. The registers that can be cleared are WE and K2MX. The Flash memory that can be cleared are: R, M[C1], Group1, and Group2. Group1 is the IST and ISW flags. If these are cleared, then the only valid high level command is the SSI instruction. Group2 is the MT, AM, K1 and K2 registers. R is erased separately since it must be updated after each call to TST. M is also erased via an index mechanism to allow individual parts of M to be updated. There is also a corresponding SET instruction.
Mnemonic: | DBR | ||
Opcode: | 0001 | ||
Usage: | DBR Counter, Offset | ||
This instruction provides the mechanism for building simple loops. The high hit of the operand selects between testing C1 or C2 (the two counters). If the specified counter is non-zero, then the counter is decremented and the value at the given offset (sign extended) is added to the PC. If the specified counter is zero, it is decremented and processing continues at
Mnemonic: | JSI | ||
Opcode: | 01001 | ||
Usage: | JSI (Acc) | ||
The JSI instruction allows the jumping to a subroutine dependant on the value currently in the Accumulator. The instruction pushes the current PC onto the stack, and loads the PC with a new value. The upper 8 bits of the new PC are loaded from Jump Table 2 (offset given by the lower 5 bits of the Accumulator), and the lowest bit of the PC is cleared to 0. Thus all subroutines must start at even addresses. The stack provides for 6 levels of execution (5 subroutines deep). It is the responsibility of the programmer to ensure that this depth is not exceeded or the return value will be overwritten (since the stack wraps).
Mnemonic: | JSR | ||
Opcode: | 001 | ||
Usage: | JSR Offset | ||
The JSR instruction provides for the most common usage of the subroutine construct. The instruction pushes the current PC onto the stack, and loads the PC with a new value. The upper 8 bits of the new PC value comes from Address Table 1, with the offset into the table provided by the 5-bit operand (32 possible addresses). The lowest bit of the new PC is cleared to 0. Thus all subroutines must start at even addresses. The stack provides for 6 levels of execution (5 subroutines deep). It is the responsibility of the programmer to ensure that this depth is not exceeded or the return value will be overwritten (since the stack wraps).
Mnemonic: | LD | ||
Opcode: | 1011 | ||
Usage: | LD Value | ||
The LD instruction loads the Accumulator from the specified operand. The operand is one of A, B, C, D, E, T, AM, MT, AE[C1], H[C1], B160[C1], R[C1], K[C1], M[C1], or X[N4]. The Z flag is also set during this operation, depending on whether the value loaded is zero or not.
Mnemonic: | LDK | ||
Opcode: | 1110 | ||
Usage: | LDK Constant | ||
The LDK instruction loads the Accumulator with the specified constant. The constants are those 32-bit values required for HMAC-SHA1 and all 0s and all 1s as most useful for general purpose processing. Consequently they are a choice of:
-
- 0x00000000
- 0x36363636
- 0x5C5C5C5C
- 0xFFFFFFFF
or from the h and y constant tables, indexed by C1. The h and y constant tables hold the 32-bit tabular constants required for HMAC-SHA1. The Z flag is also set during this operation, depending on whether the constant loaded is zero or not.
Mnemonic: | LOG | ||
Opcode: | 1001 | ||
Usage: | LOG Operation Value | ||
Mnemonic: | ROR | ||
Opcode: | 1100 | ||
Usage: | ROR Value | ||
The ROR instruction provides a way of rotating the Accumulator right a set number of bits. The bit coming in at the top of the Accumulator (to become bit 31) can either come from the
With operand OutBit, the Accumulator is shifted right one bit position. The bit shifted out from
Mnemonic: | RPL | ||
Opcode: | 1101 | ||
Usage: | ROR Value | ||
The RPL instruction is designed for implementing the high level WRITE command in the Authentication Chip. The instruction is designed to replace the upper 16 bits of the Accumulator by the value that will eventually be written to the M array (dependant on the Access Mode value). The instruction takes 3 operands: Init, MHI, and MLO. The Init operand sets all internal flags and prepares the RPL unit within the ALU for subsequent processing. The Accumulator is transferred to an internal AccessMode register. The Accumulator should have been loaded from the AM Flash memory location before the call to RPL Init in the case of implementing the WRITE command, or with 0 in the case of implementing the TST command. The Accumulator is left unchanged. The MHI and MLO operands refer to whether the upper or lower 16 bits of M[C1] will be used in the comparison against the (always) upper 16 bits of the Accumulator. Each MHI and MLO instruction executed uses the subsequent 2 bits from the initialized AccessMode value. The first execution of MHI or MLO uses the lowest 2 bits, the next uses the second two bits etc.
Mnemonic: | RTS | ||
Opcode: | 01000 | ||
Usage: | RTS | ||
The RTS instruction causes execution to resume at the instruction after the most recently executed JSR or JSI instruction. Hence the term: returning from the subroutine. In actuality, the instruction pulls the saved PC from the stack, adds 1, and resumes execution at the resultant address. Although 6 levels of execution are provided for (5 subroutines), it is the responsibility of the programmer to balance each JSR and JSI instruction with an RTS. An RTS executed with no previous JSR will cause execution to begin at whatever address happens to be pulled from the stack.
Mnemonic: | SC | ||
Opcode: | 0101 | ||
Usage: | SC Counter Value | ||
The SC instruction is used to load a counter with a particular value. The operand determines which of counters C1 and C2 is to be loaded. The Value to be loaded is one of 2, 3, 4, 7, 10, 15, 19, and 31. The counter values are used for looping and indexing. Both C1 and C2 can be used for looping constructs (when combined with the DBR instruction), while only C1 can be used for indexing 32-bit parts of multi-precision variables.
Mnemonic: | SET | ||
Opcode: | 0111 | ||
Usage: | SET FlagRegister | ||
The SET instruction allows the setting of particular flags or flash memory. There is also a corresponding CLR instruction. The WE and K2MX operands each set the specified flag for later processing. The IST and ISW operands each set the appropriate bit in Flash memory, while the MTR operand transfers the current value in the Accumulator into the MTR register. The SET Nx command loads N1-N4 with the following constants:
Index | Constant Loaded | Initial X[N] referred to | ||
N1 | 2 | X[13] | ||
N2 | 7 | X[8] | ||
N3 | 13 | X[2] | ||
N4 | 15 | X[0] | ||
Note that each initial X[Nn] referred to matches the optimized SHA-1 algorithm initial states for indexes N1-N4. When each index value Nn decrements, the effective X[N] increments. This is because the X words are stored in memory with most significant word first.
Mnemonic: | ST | ||
Opcode: | 1111 | ||
Usage: | ST Location | ||
The ST instruction is stores the current value of the Accumulator in the specified location. The location is one of A, B, C, D, E, T, AM, MT, AE[C1], H[C1], B160[C1], R[C1], K[C1], M[C1], or X[N4]. The X[N4] operand has the side effect of advancing the N4 index. After the store has taken place, N4 will be pointing to the next element in the X array. N4 decrements by 1, but since the X array is ordered from high to low, to decrement the index advances to the next element in the array. If the destination is in Flash memory, the effect of the ST instruction is to set the bits in the Flash memory corresponding to the bits in the Accumulator. To ensure a store of the exact value from the Accumulator, be sure to use the CLR instruction to erase the appropriate memory location first.
Mnemonic: | TBR | ||
Opcode: | 0000 | ||
Usage: | TBR Value Index | ||
The Test and Branch instruction tests whether the Accumulator is zero or non-zero, and then branches to the given address if the Accumulator's current state matches that being tested for. If the Z flag matches the TRB test, replace the PC by 9 bit value where
Mnemonic: | XOR | ||
Opcode: | 1010 | ||
Usage: | XOR Value | ||
The XOR instruction performs a 32-bit bitwise XOR with the Accumulator, and stores the result in the Accumulator. The operand is one of A, B, C, D, E, T, AM, MT, X[N1], X[N2], X[N3], or X[N4]. The Z flag is also set during this operation, depending on the result (i.e. what value is loaded into the Accumulator). A bitwise NOT operation can be performed by XORing the Accumulator with 0xFFFFFFFF (via the LDK instruction). The X[N] operands have a side effect of advancing the appropriate index to the next value (after the operation). After the XOR has taken place, the index will be pointing to the next element in the X array. N4 is also advanced by the ST X[N4] instruction. The index decrements by 1, but since the X array is ordered from high to low, to decrement the index advances to the next element in the array.
ProgrammingMode Detection Unit
The ProgrammingMode Detection Unit monitors the input clock voltage. If the clock voltage is a particular value the Erase Tamper Detection Line is triggered to erase all keys, program code, secret information etc and enter Program Mode. The ProgrammingMode Detection Unit can be implemented with regular CMOS, since the key does not pass through this unit. It does not have to be implemented with non-flashing CMOS. There is no particular need to cover the ProgrammingMode Detection Unit by the Tamper Detection Lines, since an attacker can always place the chip in ProgrammingMode via the CLK input. The use of the Erase Tamper Detection Line as the signal for entering Programming Mode means that if an attacker wants to use Programming Mode as part of an attack, the Erase Tamper Detection Lines must be active and functional. This makes an attack on the Authentication Chip far more difficult.
Noise Generator
The Authentication Chip does not require the high speeds and throughput of a general purpose CPU. It must operate fast enough to perform the authentication protocols, but not faster. Rather than have specialized circuitry for optimizing branch control or executing opcodes while fetching the next one (and all the complexity associated with that), the state machine adopts a simplistic view of the world. This helps to minimize design time as well as reducing the possibility of error in implementation.
The general operation of the state machine is to generate sets of cycles:
-
- Cycle 0: Fetch cycle. This is where the opcode is fetched from the program memory, and the effective address from the fetched opcode is generated.
- Cycle 1: Execute cycle. This is where the operand is (potentially) looked up via the generated effective address (from Cycle 0) and the operation itself is executed.
Under normal conditions, the state machine generates cycles: 0, 1, 0, 1, 0, 1, 0, 1 . . . However, in some cases, the state machine stalls, generatingCycle 0 each clock tick until the stall condition finishes. Stall conditions include waiting for erase cycles of Flash memory, waiting for clients to read or write serial information, or an invalid opcode (due to tampering). If the Flash memory is currently being erased, the next instruction cannot execute until the Flash memory has finished being erased. This is determined by the Wait signal coming from the Memory Unit. If Wait=1, the State Machine must only generate Cycle 0s. There are also two cases for stalling due to serial I/O operations: - The opcode is ROR OutBit, and OutBitValid already=1. This means that the current operation requires outputting a bit to the client, but the client hasn't read the last bit yet.
- The operation is ROR InBit, and InBitValid=0. This means that the current operation requires reading a bit from the client, but the client hasn't supplied the bit yet.
In both these cases, the state machine must stall until the stalling condition has finished. The next “cycle” therefore depends on the old or previous cycle, and the current values of CMD, Wait, OutBitValid, and InBitValid. Wait comes from the MU, and OutBitValid and InBitValid come from the I/O Unit. When Cycle is 0, the 8-bit op-code is fetched from the memory unit and placed in the 8-bit CMD register. The write enable for the CMD register is therefore ˜Cycle. There are two outputs from this unit: Cycle and CMD. Both of these values are passed into all the other processing units within the Authentication Chip. The 1-bit Cycle value lets each unit know whether a fetch or execute cycle is taking place, while the 8-bit CMD value allows each unit to take appropriate action for commands related to the specific unit.
FIG. 187 shows the data flow and relationship between components of the State Machine where:
Logic1: | Wait OR |
~(Old OR ((CMD = ROR) &((CMD = InBit AND ~InBitValid) | |
OR | |
(CMD = OutBit AND OutBitValid)))) | |
Old and CMD are both cleared to 0 upon a RESET. This results in the first cycle being 1, which causes the 0 CMD to be executed. 0 is translated as
I/O UNIT
The I/O Unit is responsible for communicating serially with the outside world. The Authentication Chip acts as a slave serial device, accepting serial data from a client, processing the command, and sending the resultant data to the client serially. The I/O Unit can be implemented with regular CMOS, since the key does not pass through this unit. It does not have to be implemented with non-flashing CMOS. In addition, none of the latches need to be parity checked since there is no advantage for an attacker to destroy or modify them. The I/O Unit outputs 0s and inputs 0s if either of the Tamper Detection Lines is broken. This will only come into effect if an attacker has disabled the RESET and/or erase circuitry, since breaking either Tamper Detection Lines should result in a RESET or the erasure of all Flash memory
The InBit, InBitValid, OutBit, and
-
- Reads from InBit will hang while InBitValid is clear. InBitValid will remain clear until the client has written the next input bit to InBit. Reading InBit clears the InBitValid bit to allow the next InBit to be read from the client A client cannot write a bit to the Authentication Chip unless the InBitValid bit is clear.
- Writes to OutBit will hang while OutBitValid is set OutBitValid will remain set until the client has read the bit from OutBit. Writing OutBit sets the OutBitValid bit to allow the next OutBit to be read by the client. A client cannot read a bit from the Authentication Chip unless the OutBitValid bit is set.
The actual stalling of commands is taken care of by the State Machine, but the various communication registers and the communication circuitry is found in the I/O Unit.
FIG. 188 shows the data flow and relationship between components of the I/O Unit where:
Logic1: | Cycle AND (CMD = ROR OutBit) | ||
The Serial I/O unit contains the circuitry for communicating externally with the external world via the Data pin. The InBitUsed control signal must be set by whichever unit consumes the InBit during a given clock cycle (which can be any state of Cycle). The two VAL units are validation units connected to the Tamper Prevention and Detection circuitry, each with an OK bit. The OK bit is set to 1 on RESET, and ORed with the ChipOK values from both Tamper Detection Lines each cycle. The OK bit is ANDed with each data bit that passes through the unit.
In the case of VAL1, the effective bit output from the chip will always be 0 if the chip has been tampered with. Thus no useful output can be generated by an attacker. In the case of VAL2, the effective bit input to the chip will always be 0 if the chip has been tampered with. Thus no useful input can be chosen by an attacker. There is no need to verify the registers in the I/O Unit since an attacker does not gain anything by destroying or modifying them.
ALU
Logic1: | Cycle AND CMD7 AND (CMD6–4 ≠ ST) | ||
Since the WriteEnables of Acc and Z takes CMD7 and Cycle into account (due to Logic1), these two bits are not required by the multiplexor MX1 in order to select the output. The output selection for MX1 only requires bits 6-3 of CMD and is therefore simpler as a result.
Output | CMD6–3 | ||
MX1 | ADD | ADD | ||
AND | LOG AND | |||
OR | LOG OR | |||
XOR | XOR | |||
RPL | RPL | |||
ROR | ROR | |||
From MU | LD or LDK | |||
The two VAL units are validation units connected to the Tamper Prevention and Detection circuitry, each with an OK bit. The OK bit is set to 1 on RESET, and ORed with the ChipOK values from both Tamper Detection Lines each cycle. The OK bit is ANDed with each data bit that passes through the unit. In the case of VAL1, the effective bit output from the Accumulator will always be 0 if the chip has been tampered with. This prevents an attacker from processing anything involving the Accumulator. VAL1 also performs a parity check on the Accumulator, setting the Erase Tamper Detection Line if the check fails. In the case of VAL2, the effective Z status of the Accumulator will always be true if the chip has been tampered with. Thus no looping constructs can be created by an attacker. The remaining function blocks in the ALU are described as follows. All must be implemented in non-flashing CMOS.
Block | Description |
OR | Takes the 32-bit output from the multiplexor MX1, ORs all 32 bits |
together to get 1 bit. | |
ADD | Outputs the result of the addition of its two inputs, modulo 232. |
AND | Outputs the 32-bit result of a parallel bitwise AND of its two 32-bit |
inputs. | |
OR | Outputs the 32-bit result of a parallel bitwise OR of its two 32-bit |
inputs. | |
XOR | Outputs the 32-bit result of a parallel bitwise XOR of its two 32-bit |
inputs. | |
RPL | Examined in further detail below. |
ROR | Examined in further detail below. |
RPL
Operand | CMD3-0 | ||
Init | 0000 | ||
| 1110 | ||
| 1111 | ||
The MHI and MLO have the hi bit set to easily differentiate them from the Init bit pattern, and the lowest bit can be used to differentiate between MHI and MLO. The EE and DE flags must be updated each time the RPL command is issued. For the Init stage, we need to setup the two values with 0, and for MHI and MLO, we need to update the values of EE and DE appropriately. The WriteEnable for EE and DE is therefore:
Logic1: | Cycle AND (CMD7-4 = RPL) | ||
With the 32 bit AMT register, we want to load the register with the contents of AM (read from the MU) upon an RPL Init command, and to shift the AMT register right two bit positions for the RPL MLO and RPL MHI commands. This can be simply tested for with the highest bit of the RPL operand (CMD3). The WriteEnable and ShiftEnable for the AMT register is therefore:
Logic2 | Logic1 AND CMD3 | ||
Logic3 | Logic1 AND ~CMD3 | ||
The output from Logic3 is also useful as input to multiplexor MX1, since it can be used to gate through either the current 2 access mode bits or 00 (which results in a reset of the DE and EE registers since it represents the access mode RW). Consequently MX1 is:
Output | Logic3 | ||
MX1 | AMT output | 0 | ||
00 | 1 | |||
The RPL logic only replaces the upper 16 bits of the Accumulator. The lower 16 bits pass through untouched. However, of the 32 bits from the MU (corresponding to one of M[0-15]), only the upper or lower 16 bits are used. Thus MX2 tests CMD0 to distinguish between MHI and MLO.
Output | CMD0 | ||
MX2 | Lower 16 | 0 | ||
| 1 | |||
The logic for updating the DE and EE registers matches the pseudocode of the WR command. Note that an input of an AccessMode value of 00 (=RW which occurs during an RPL INIT) causes both DE and EE to be loaded with 0 (the correct initialization value). EE is loaded with the result from Logic4, and DE is loaded with the result from Logic5.
Logic4 | (((AccessMode = MSR) AND EQ) OR | ||
((AccessMode = NMSR) AND EE AND EQ)) | |||
Logic5 | (((AccessMode = MSR) AND LT) OR | ||
((AccessMode = NMSR) AND DE) OR | |||
((AccessMode = NMSR) AND EQ AND LT)) | |||
Logic6 | ((AccessMode = RW) OR | ||
((AccessMode = MSR) AND LT) OR | |||
((AccessMode = NMSR) AND (DE OR LT))) | |||
The output from Logic6 is used directly to drive the selection between the original 16 bits from the Accumulator and the value from M[0-15] via multiplexor MX3. If the 16 bits from the Accumulator are selected (leaving the Accumulator unchanged), this signifies that the Accumulator value can be written to M[n]. If the 16-bit value from M is selected (changing the upper 16 bits of the Accumulator), this signifies that the 16-bit value in M will be unchanged. MX3 therefore takes the following form:
Output | Logic6 | ||
MX3 | 16 bits from | 0 | ||
16 bits from | 1 | |||
There is no point parity checking AMT as an attacker is better off forcing the input to MX3 to be 0 (thereby enabling an attacker to write any value to M). However, if an attacker is going to go to the trouble of laser-cutting the chip (including all Tamper Detection tests and circuitry), there are better targets than allowing the possibility of a limited chosen-text attack by fixing the input of Mx3.
ROR
Operand | CMD3-0 | ||
InBit | 0000 | ||
| 0001 | ||
| 0010 | ||
XRB | 0011 | ||
| 0100 | ||
| 0101 | ||
| 0110 | ||
1 | 0111 | ||
2 | 1001 | ||
27 | 1010 | ||
31 | 1100 | ||
Logic1 is used to provide the WriteEnable signal to RTMP. The RTMP register should only be written to during ROR RB and ROR XRB commands. Logic2 is used to provide the control signal whenever the InBit is consumed. The two combinatorial logic blocks are:
Logic1: | Cycle AND (CMD7-4 = ROR) AND (CMD3-1 = 001) | ||
Logic2: | Cycle AND (CMD7-0 = ROR InBit) | ||
With multiplexor MX1, we are selecting the bit to be stored in RTMP. Logic1 already narrows down the CMD inputs to one of RB and XRB. We can therefore simply test CMD0 to differentiate between the two. The following table expresses the relationship between CMD0 and the value output from MX1.
Output | CMD0 | ||
MX1 | Acc0 | 0 | ||
| 1 | |||
With multiplexor MX2, we are selecting which input bit is going to replace
Output | CMD3-0 | Comment | ||
MX2 | Acc0 | 1xxx OR 111 | 1, 2, 27, 31 | ||
RTMP | 001x | RB, XRB | |||
InBit | 000x | InBit, OutBit | |||
MU0 | 010x | IST, | |||
MTRZ | |||||
110 | MTRZ | ||||
The final multiplexor, MX3, does the final rotating of the 32-bit value. Again, the bit patterns of the CMD operand are taken advantage of:
Output | CMD3-0 | Comment | ||
MX3 | ROR 1 | 0xxx | All except 2, 27, and 31 | ||
| | 2 | |||
| | 27 | |||
| | 31 | |||
MinTicks Unit
The MinTicks Unit contains a 32-bit register named MTR (MinTicksRemaining). The MTR register contains the number of clock ticks remaining before the next key-based function can be called. Each cycle, the value in MTR is decremented by 1 until the value is 0. Once MTR hits 0, it does not decrement any further. An additional one-bit register named MTRZ (MinTicksRegisterZero) reflects the current zero-ness of the MTR register. MTRZ is 1 if the MTRZ register is 0, and MTRZ is 0 if the MTRZ register is not 0. The MTR register is cleared by a RESET, and set to a new count via the SET MTR command, which transfers the current value in the Accumulator into the MTR register. Where:
Logic1 | CMD = SET MTR | ||
And:
Output | Logic1 | MTRZ | ||
MX1 | Acc | 1 | — | ||
MTR-1 | 0 | 0 | |||
0 | 0 | 1 | |||
Since Cycle is connected to the WriteEnables of MTR and MTRZ, these registers only update during the Execute cycle, i.e. when Cycle =1. The two VAL units are validation units connected to the Tamper Prevention and Detection circuitry, each with an OK bit. The OK bit is set to 1 on RESET, and ORed with the ChipOK values from both Tamper Detection Lines each cycle. The OK bit is ANDed with each data bit that passes through the unit. In the case of VAL1, the effective output from MTR is 0, which means that the output from the decrementor unit is all 1s, thereby causing MTRZ to remain 0, thereby preventing an attacker from using the key-based functions. VAL1 also validates the parity of the MTR register. If the parity check fails, the Erase Tamper Detection Line is triggered. In the case of VAL2, if the chip has been tampered with, the effective output from MTRZ will be 0, indicating that the MinTicksRemaining register has not yet reached 0, thereby preventing an attacker from using the key-based functions.
Program Counter Unit
The ADD block is a simple adder modulo 29. The inputs are the PC value and either 1 (for incrementing the PC by 1) or a 9 bit offset (with hi bit set and lower 8 bits from the MU). The “+1” block takes a 3-bit input and increments it by 1 (with wrap). The “−1” block takes a 3-bit input and decrements it by 1 (with wrap). The different forms of PC control are as follows:
Command | Action |
JSR, | Save old value of PC onto stack for later. |
JSI (ACC) | New PC is 9 bit value where bit0 = 0 (subroutines must |
therefore start at an even address), and upper 8 bits of address | |
come from MU (MU 8-bit value is Jump Table 1 for JSR, and | |
Jump Table 2 for JSI) | |
JSI RTS | Pop old value of PC from stack and increment by 1 to |
get new PC. | |
TBR | If the Z flag matches the TRB test, replace PC by 9 bit value |
where bit0 = 0 and upper 8 bits come from MU. Otherwise | |
increment current PC by 1. | |
DBR C1, | |
DBR C2 | current PC only if the C1Z or C2Z is set (C1Z for DBR C1, |
C2Z for DBR C2). Otherwise increment current PC by 1. | |
All others | Increment current PC by 1. |
Since the same action takes place for JSR, and JSI (ACC), we specifically detect that case in Logic1. By the same concept, we can specifically test for the JSI RTS case in Logic2.
Logic1 | (CMD7-5 = 001) OR (CMD7-3 = 01001) | ||
Logic2 | CMD7-3 = 01000 | ||
When updating the PC, we must decide if the PC is to be replaced by a completely new item, or by the result of the adder. This is the case for JSR and JSI (ACC), as well as TBR as long as the test bit matches the state of the Accumulator. All but TBR is tested for by Logic1, so Logic3 also includes the output of Logic1 as its input. The output from Logic3 is then used by multiplexors MX2 to obtain the new PC value.
Logic3 | Logic1 OR | ||
((CMD7-4 = TBR) AND (CMD3 XOR Z)) | |||
Output | Logic3 | ||
MX2 | Output from |
0 | ||
|
1 | |||
Logic4 | ((CMD7-3 = DBR C1) AND C1Z) OR | ||
(CMD7-3 = DBR C2) AND C2Z)) | |||
Output | Logic4 | ||
MX3 | Output from | 0 | ||
| 1 | |||
Finally, the selection of which PC entry to use depends on the current value for SP. As we enter a subroutine, the SP index value must increment, and as we return from a subroutine, the SP index value must decrement. In all other cases, and when we want to fetch a command (Cycle 0), the current value for the SP must be used. Logic1 tells us when a subroutine is being entered, and Logic2 tells us when the subroutine is being returned from. The multiplexor selection is therefore defined as follows:
Output | Cycle/Logic1/Logic2 | ||
MX1 | SP − 1 | 1x1 | ||
SP + 1 | 11x | |||
SP | 0xx OR 00 | |||
The two VAL units are validation units connected to the Tamper Prevention and Detection circuitry), each with an OK bit. The OK bit is set to 1 on RESET, and ORed with the ChipOK values from both Tamper Detection Lines each cycle. The OK bit is ANDed with each data bit that passes through the unit. Both VAL units also parity-check the data bits to ensure that they are valid. If the parity-check fails, the Erase Tamper Detection Line is triggered. In the case of VAL1, the effective output from the SP register will always be 0. If the chip has been tampered with. This prevents an attacker from executing any subroutines. In the case of VAL2, the effective PC output will always be 0 if the chip has been tampered with. This prevents an attacker from executing any program code.
Memory Unit
The Memory Unit (MU) contains the internal memory of the Authentication Chip. The internal memory is addressed by 9 bits of address, which is passed in from the Address Generator Unit. The Memory Unit outputs the appropriate 32-bit and 8-bit values according to the address. The Memory Unit is also responsible for the special Programming Mode, which allows input of the program Flash memory. The contents of the entire Memory Unit must be protected from tampering. Therefore the logic and registers contained in the Memory Unit must be covered by both Tamper Detection Lines. This is to ensure that program code, keys, and intermediate data values cannot be changed by an attacker. All Flash memory needs to be multi-state, and must be checked upon being read for invalid voltages. The 32-bit RAM also needs to be parity-checked. The 32-bit data paths through the Memory Unit must be implemented with non-flashing CMOS since the key passes along them. The 8-bit data paths can be implemented in regular CMOS since the key does not pass along them.
Adr3-0 | Output Value | ||
0000 | 0x00000000 | ||
0001 | 0x36363636 | ||
0010 | 0x5C5C5C5C | ||
0011 | |
||
0100 | |
||
0101 | |
||
0110 | |
||
0111 | |
||
1000 | 0x67452301 | ||
1001 | |
||
1010 | |
||
1011 | 0x10325476 | ||
11xx | 0xC3D2E1F0 | ||
Adr4-3 | Erases range | ||
00 | | ||
01 | MT, AM, K10-4, | ||
10 | Individual M address (Adr) | ||
11 | IST, ISW | ||
Flash values are unchanged by a RESET, although program code should not take the initial values for Flash (after manufacture) other than garbage. Operations that make use of Flash addresses are LD, ST, ADD, RPL, ROR, CLR, and SET. In all cases, the operands and the memory placement are closely linked, in order to minimize the address generation and decoding. The entire variable section of Flash memory is also erased upon entering Programming Mode, and upon detection of a definite physical Attack.
Block Diagram of MU
Output | Adr6-5 | ||
MX2 | Output from 32-bit Truth Table | 00 | ||
Output from 32- | 10 | |||
Output from 32- | 11 | |||
The logic for erasing a particular part of the 32-bit Flash memory is satisfied by Logic1. The Erase Part control signal should only be set during a CLR command to the correct part of memory while Cycle=1. Note that a single CLR command may clear a range of Flash memory. Adr6 is sufficient as an address range for CLR since the range will always be within Flash for valid operands, and 0 for non-valid operands. The entire range of 32-bit wide Flash memory is erased when the Erase Detection Lines is triggered (either by an attacker, or by deliberately entering Programming Mode).
Logic1 | Cycle AND (CMD7-4 = CLR) AND Adr6 | ||
The logic for writing to a particular part of Flash memory is satisfied by Logic2. The WriteEnable control signal should only be set during an appropriate ST command to a Flash memory range while Cycle=1. Testing only Adr6-5 is acceptable since the ST command only validly writes to Flash or RAM (if Adr6-5 is 00, K2MX must be 0).
Logic2 | Cycle AND (CMD7-4 = ST) AND (Adr6-5 = 10) | ||
The WE (WriteEnable) flag is set during execution of the SET WE and CLR WE commands. Logic3 tests for these two cases. The actual bit written to WE is CMD4.
Logic3 | Cycle AND (CMD7-5 = 011) AND (CMD3-0 = 0000) | ||
The logic for writing to the RAM region of memory is satisfied by Logic4. The WriteEnable control signal should only be set during an appropriate ST command to a RAM memory range while Cycle=1. However this is tempered by the WE flag, which governs whether writes to X[N] are permitted. The X[N] range is the upper half of the RAM, so this can be tested for using Adr4. Testing only Adr6-5 as the full address range of RAM is acceptable since the ST command only writes to Flash or RAM.
Logic4 | Cycle AND (CMD7-4 = ST) AND (Adr6-5 = 11) AND | ||
((Adr4 AND WE) OR (~Adr4)) | |||
The three VAL units are validation units connected to the Tamper Prevention and Detection circuitry, each with an OK bit. The OK bit is set to 1 on RESET, and ORed with the ChipOK values from both Tamper Detection Lines each cycle. The OK bit is ANDed with each data bit that passes through the unit. The VAL units also check the data bits to ensure that they are valid. VAL1 and VAL2 validate by checking the state of each data bit, and VAL3 performs a parity check. If any validity test fails, the Erase Tamper Detection Line is triggered. In the case of VAL1, the effective output from the program Flash will always be 0 (interpreted as TBR 0) if the chip has been tampered with. This prevents an attacker from executing any useful instructions. In the case of VAL2, the effective 32-bit output will always be 0 if the chip has been tampered with. Thus no key or intermediate storage value is available to an attacker. The 8-bit Flash memory is used to hold the program code, jump tables and other program information. The 384 bytes of Program Flash memory are selected by the full 9 bits of address (using address range 01xxxxxxx-11xxxxxxx). The Program Flash memory is erased only when the Erase Detection Lines is triggered (either by an attacker, or by entering Programming Mode due to the Programming Mode Detection Unit). When the Erase Detection Line is triggered, a small state machine in the Program Flash Memory Unit erases the 8-bit Flash memory, validates the erasure, and loads in the new contents (384 bytes) from the serial input. The following pseudocode illustrates the state machine logic that is executed when the Erase Detection line is triggered:
Set WAIT output bit to prevent the remainder of the chip from functioning |
Fix 8-bit output to be 0 |
Erase all 8-bit Flash memory |
Temp |
For Adr = 0 to 383 |
Temp |
IF (Temp ≠ 0) |
Hang |
For Adr = 0 to 383 |
|
Wait for InBitValid to be set |
ShiftRight[Temp, InBit] |
Set InBitUsed control signal |
FlashAdr |
Hang |
During the Programming Mode state machine execution, 0 must be placed onto the 8-bit output. A 0 command causes the remainder of the Authentication chip to interpret the command as a
Address Generator Unit
The Address Generator Unit generates effective addresses for accessing the Memory Unit (MU). In
Background to Address Generation
The logic for address generation requires an examination of the various opcodes and operand combinations. The relationship between opcode/operand and address is examined in this section, and is used as the basis for the Address Generator Unit.
Constant (upper) | Variable (lower) | |||
Command | Address Range | part of address | part of address | |
TBR | 010000xxx | 010000 | CMD2-0 | |
JSR | 0100xxxxx | 0100 | CMD4-0 | |
| 0101xxxxx | 0101 | Acc4-0 | |
DBR | 011000xxx | 011000 | CMD2-0 | |
Block Diagram of Address Generator Unit
Output | Cycle | ||
MX1 | PC | 0 | ||
| 1 | |||
It is important to distinguish between the CMD data and the 8-bit data from the MU:
-
- In
Cycle 0, the 8-bit data line holds the next instruction to be executed in the followingCycle 1. This 8-bit command value is used to decode the effective address. By contrast, the CMD 8-bit data holds the previous instruction, so should be ignored. - In
Cycle 1, the CMD line holds the currently executing instruction (which was in the 8-bit data line during Cycle 0), while the 8-bit data line holds the data at the effective address from the instruction. The CMD data must be executed duringCycle 1.
Consequently, the choice of 9-bit data from the MU or the CMD value is made by multiplexor MX3, as shown in the following table:
- In
Output | Cycle | ||
MX3 | 8-bit data from | 0 | ||
| 1 | |||
Since the 9-bit Adr register is updated every
Block | Commands for which address is generated | ||
JSIGEN | JSI ACC | ||
JSRGEN | JSR, TBR | ||
DBRGEN | DBR | ||
LDKGEN | LDK | ||
RPLGEN | RPL | ||
VARGEN | LD, ST, ADD, LOG, XOR | ||
BITGEN | ROR, SET | ||
CLRGEN | CLR | ||
Multiplexor MX2 has the following selection criteria:
Output | 8-bit data value from MU | ||
MX2 | 9-bit value from JSIGEN | 01001xxx | ||
9-bit value from JSRGEN | 001xxxxx OR 0000xxxx | |||
9-bit value from DBRGEN | 0001xxxx | |||
9-bit value from | 1110xxxx | |||
9 bit value from RPLGEN | 1101xxxx | |||
9-bit value from VARGEN | 10xxxxxx OR 1x11xxxx | |||
9-bit value from BITGEN | 0111xxxx OR | |||
9 bit value from CLRGEN | 0110xxxx | |||
The VAL1 unit is a validation unit connected to the Tamper Prevention and Detection circuitry. It contains an OK bit that is set to 1 on RESET, and ORed with the ChipOK values from both Tamper Detection Lines each cycle. The OK bit is ANDed with the 9 bits of Effective Address before they can be used. If the chip has been tampered with, the address output will be always 0, thereby preventing an attacker from accessing other parts of memory. The VAL1 unit also performs a parity check on the Effective Address bits to ensure it has not been tampered with. If the parity-check fails, the Erase Tamper Detection Line is triggered.
-
- the 4-bit high part of the address for the JSI Table (0101) and
- the lower 5 bits of the Accumulator value.
Since the Accumulator may hold the key at other times (when a jump address is not being generated), the value must be hidden from sight. Consequently this unit must be implemented with non-flashing CMOS. The multiplexor MX1 simply chooses between the lower 5 bits from Accumulator or 0, based upon whether the command is JSIGEN. Multiplexor MX1 has the following selection criteria:
Output | CMD7-0 | ||
MX1 | Accumulator4-0 | JSI ACC | ||
00000 | ~(JSI ACC) | |||
-
- the 4-bit high part of the address for the JSR table (0100),
- the offset within the table from the operand (5 bits for JSR commands, and 3 bits plus a constant 0 bit for TBR).
where Logic1 producesbit 3 of the effective address. This bit should bebit 3 in the case of JSR, and 0 in the case of TBR:
Logic1 | bit5 AND bit3 | ||
Since the JSR instruction has a 1 in
-
- the 6-bit high part of the address for the DBR table (011000), and
- the lower 3 bits of the operand
-
- the 5-bit high part of the address for the LDK table (00000),
- the high bit of the operand, and
- the lower 3 bits of the operand (in the case of the lower constants), or the lower 3 bits of the operand ORed with C1 (in the case of indexed constants).
The OR2 block simply ORs the 3 bits of C1 with the 3 lowest bits from the 8-bit data output from the MU. The multiplexor MX1 simply chooses between the actual data bits and the data bits ORed with C1, based upon whether the upper bits of the operand are set or not. The selector input to the multiplexor is a simple OR gate, ORing bit2 with bit3. Multiplexor MX1 has the following selection criteria:
Output | bit3 OR bit2 | ||
MX1 | bit2-0 | 0 | ||
Output from OR |
1 | |||
-
- the 6-bit high part of the address for M (001110), and
- the 3 bits of the current value for C1
The multiplexor MX1 chooses between the two addresses, depending on the current value of K2MX. Multiplexor MX1 therefore has the following selection criteria:
| K2MX | ||
MX |
1 | 000000000 | 0 | |
001110| |
1 | ||
Logic1 | Cycle AND bit7-0 = 011x0001 | ||
The bit written to the K2MX variable is 1 during a SET instruction, and 0 during a CLR instruction. It is convenient to use the low order bit of the opcode (bit4) as the source for the input bit. During address generation, a Truth Table implemented as combinatorial logic determines part of the base address as follows:
bit7-4 | bit3-0 | Description | Output Value |
LOG | x | A, B, C, D, E, T, MT, | 00000 |
≠ LOG | 0xxx OR 1x00 | A, B, C, D, E, T, MT, AM, | 00000 |
AE[C1], R[C1] | |||
≠ | 1001 | | 01011 |
≠ LOG | 1010 | | 00110 |
≠ LOG | 111x | X, M | 10000 |
≠ LOG | 1101 | K | K2MX|1000 |
Although the Truth Table produces 5 bits of output, the lower 4 bits are passed to the 4-bit Adder, where they are added to the index value (C1, N or the lower 3 bits of the operand itself). The highest bit passes the adder, and is prepended to the 4-bit result from the adder result in order to produce a 5-bit result. The second input to the adder comes from multiplexor MX1, which chooses the index value from C1, N, and the lower 3 bits of the operand itself). Although C1 is only 3 bits, the fourth bit is a constant 0. Multiplexor MX1 has the following selection criteria:
Output | bit7-0 | ||
MX1 | Data2-0 | (bit3 = 0) OR (bit7-4 = LOG) |
C1 | (bit3 = 1) AND (bit2-0 ≠ 111) AND | |
((bit7-4 = 1x11) OR (bit7-4 = ADD)) | ||
N | ((bit3 = 1) AND (bit7-4 = XOR)) OR | |
(((bit7-4 = 1x11) OR (bit7-4 = ADD)) AND (bit3-0 = | ||
1111)) | ||
The 6th bit (bit5) of the effective address is 0 for RAM addresses, and 1 for Flash memory addresses. The Flash memory addresses are MT, AM, R, K, and M. The computation for bit5 is provided by Logic2:
Logic2 | ((bit3-0 = 110) OR (bit3-0 = 011x) OR (bit3-0 = 110x)) AND |
((bit7-4 = 1x11) OR (bit7-4 = ADD)) | |
A constant 1 bit is prepended, making a total of 7 bits of effective address. These bits will form the effective address unless K2MX is 0 and the instruction is LD, ADD or ST M[C1]. In the latter case, the effective address is the constant address of 0000000. In both cases, two 0 bits are prepended to form the final 9-bit address. The computation is shown here, provided by Logic3 and multiplexor MX2.
Logic3 | ~ K2MX AND (bit3-0 = 1110) AND | ||
((bit7-4 = 1x11) OR (bit7-4 = ADD)) | |||
Output | Logic3 | ||
MX2 | |
0 | ||
0000000 | 1 | |||
Input Value (bit3-0) | | ||
1100 | 00 1100 000 | ||
1101 | 00 1101 000 | ||
1110 | 00 1110| | ||
1111 | 00 1111 110 | ||
~(11xx) | 000000000 | ||
It is a simple matter to reduce the logic required for the Truth Table since in all 4 main cases, the first 6 bits of the effective address are 00 followed by the operand (bits3-0).
Input Value (bit3-0) | Output Value | ||
010x | 00111111|bit0 | ||
~(010x) | 000000000 | ||
Logic1 | Cycle AND (bit7-3 = 0x010) | ||
Logic2 | Cycle AND (bit7-3 = 0x011) | ||
The single bit flags C1Z and C2Z are produced by the NOR of their multibit C1 and C2 counterparts. Thus C1Z is 1 if C1=0, and C2Z is 1 if C2=0. During a DBR instruction, the value of either C1 or C2 is decremented by 1 (with wrap). The input to the Decrementor unit is selected by multiplexor MX2 as follows:
Output | bit3 | ||
MX2 | C1 | 0 | ||
| 1 | |||
The actual value written to C1 or C2 depends on whether the DBR or SC instruction is being executed. Multiplexor MX1 selects between the output from the Decrementor (for a DBR instruction), and the output from the Truth Table (for a SC instruction). Note that only the lowest 3 bits of the 5-bit output are written to C1. Multiplexor MX1 therefore has the following selection criteria:
Output | bit6 | ||
MX1 | Output from Truth Table | 0 | ||
Output from | 1 | |||
The Truth Table holds the values to be loaded by C1 and C2 via the SC instruction. The Truth Table is simple combinatorial logic that implements the following relationship:
Input | Output | ||
Value (bit2-0) | | ||
000 | 00010 | ||
001 | 00011 | ||
010 | 00100 | ||
011 | 00111 | ||
100 | 01010 | ||
101 | 01111 | ||
110 | 10011 | ||
111 | 11111 | ||
Registers N1, N2, N3, and N4 are updated by their next value—1 (with wrap) when they are referred to by the XOR instruction. Register N4 is also updated when a ST X[N4] instruction is executed. LD and ADD instructions do not update N4. In addition, all 4 registers are updated during a SET Nx command. Logic4-7 generate the WriteEnables for registers N1-N4. All use Logic3, which produces a 1 if the command is SET Nx, or 0 otherwise.
Logic3 | bit7-0 = 01110010 | ||
Logic4 | Cycle AND ((bit7-0 = 10101000) OR Logic3) | ||
Logic5 | Cycle AND ((bit7-0 = 10101001) OR Logic3) | ||
Logic6 | Cycle AND ((bit7-0 = 10101010) OR Logic3) | ||
Logic7 | Cycle AND ((bit7-0 = 11111011) OR | ||
(bit7-0 = 10101011) OR Logic3) | |||
The actual N index value passed out, or used as the input to the Decrementor, is simply selected by multiplexor MX4 using the lower 2 bits of the operand:
Output | bit1-0 | |||
MX4 | N1 | 00 | ||
| 01 | |||
| 10 | |||
| 11 | |||
The Incrementor takes 4 bits of input value (selected by multiplexor MX4) and adds 1, producing a 4-bit result (due to addition modulo 24). Finally, four instances of multiplexor MX3 select between a constant value (different for each N, and to be loaded during the SET Nx command), and the result of the Decrementor (during XOR or ST instructions). The value will only be written if the appropriate WriteEnable flag is set (see Logic4-Logic7), so Logic3 can safely be used for the multiplexor.
Output | Logic3 | |||
MX3 | Output from | 0 | ||
| 1 | |||
The SET Nx command loads N1-N4 with the following constants:
Constant | Initial X[N] | |
Index | Loaded | referred to |
N1 | 2 | X[13] |
N2 | 7 | X[8] |
N3 | 13 | X[2] |
N4 | 15 | X[0] |
Note that each initial X[Nn] referred to matches the optimized SHA-1 algorithm initial states for indexes N1-N4. When each index value Nn decrements, the effective X[N] increments. This is because the X words are stored in memory with most significant word first. The three VAL units are validation units connected to the Tamper Prevention and Detection circuitry, each with an OK bit. The OK bit is set to 1 on RESET, and ORed with the ChipOK values from both Tamper Detection Lines each cycle. The OK bit is ANDed with each data bit that passes through the unit. All VAL units also parity check the data to ensure the counters have not been tampered with. If a parity check fails, the Erase Tamper Detection Line is triggered. In the case of VAL1, the effective output from the counter C1 will always be 0 if the chip has been tampered with. This prevents an attacker from executing any looping constructs that index through the keys. In the case of VAL2, the effective output from the counter C2 will always be 0 if the chip has been tampered with. This prevents an attacker from executing any looping constructs. In the case of VAL3, the effective output from any N counter (N1-N4) will always be 0 if the chip has been tampered with. This prevents an attacker from executing any looping constructs that index through X.
Max. ink | |||||||
# of | Nozzles | flow at | Pressure | ||||
Items | Length | Width | Depth | supplied | 5 KHz(U) | drop Δρ | |
Central Moulding | 1 | 106 mm | 6.4 mm | 1.4 mm | 18,750 | 0.23 ml/s | NA |
Cyan main channel | 1 | 100 mm | 1 mm | 1 mm | 6,250 | 0.16 μl/μs | 111 Pa |
(830) | |||||||
Magenta main | 2 | 100 mm | 700 μm | 700 μm | 3,125 | 0.16 μl/μs | 231 Pa |
channel (826) | |||||||
Yellow main | 1 | 100 mm | 1 mm | 1 mm | 6,250 | 0.16 μl/μs | 111 Pa |
channel (831) | |||||||
Cyan sub-channel | 250 | 1.5 mm | 200 μm | 100 μm | 25 | 0.16 μl/μs | 41.7 Pa |
(833) | |||||||
Magenta sub- | 500 | 200 μm | 50 μm | 100 μm | 12.5 | 0.031 μl/μs | 44.5 Pa |
channel (834)(a) | |||||||
Magenta sub- | 500 | 400 μm | 100 μm | 200 μm | 12.5 | 0.031 μl/μs | 5.6 Pa |
channel (838)(b) | |||||||
Yellow sub- | 250 | 1.5 mm | 200 μm | 100 μm | 25 | 0.016 μl/μs | 41.7 Pa |
channel (834) | |||||||
Cyan pit (842) | 250 | 200 μm | 100 μm | 300 μm | 25 | 0.010 μl/μs | 3.2 Pa |
Magenta through | 500 | 200 μm | 50 μm | 200 μm | 12.5 | 0.016 μl/μs | 18.0 Pa |
(840) | |||||||
Yellow pit (846) | 250 | 200 μm | 100 μm | 300 μm | 25 | 0.010 μl/μs | 3.2 Pa |
Cyan via (843) | 500 | 100 μm | 50 μm | 100 μm | 12.5 | 0.031 μl/μs | 22.3 Pa |
Magenta via (842) | 500 | 100 μm | 50 μm | 100 μm | 12.5 | 0.031 μl/μs | 22.3 Pa |
Yellow via | 500 | 100 μm | 50 μm | 100 μm | 12.5 | 0.031 μl/μs | 22.3 Pa |
Magenta through | 500 | 200 μm | 500 μm | 100 μm | 12.5 | 0.003 μl/μs | 0.87 Pa |
hole (837) | |||||||
Chip slot | 1 | 100 mm | 730 μm | 625 | 18,750 | NA | NA |
Print head | 1500 | 600 μ | 100 μm | 50 μm | 12.5 | 0.052 μl/μs | 133 Pa |
through holes | |||||||
(881)(in the chip | |||||||
substrate) | |||||||
Print head | 1,000/ | 50 μm | 60 μm | 20 μm | 3.125 | 0.049 μl/μs | 62.8 Pa |
channel segments | color | ||||||
(on chip front) | |||||||
Filter Slits (on | 8 per | 2 μm | 2 μm | 20 μm | 0.125 | 0.039 μl/μs | 251 Pa |
entrance to | nozzle | ||||||
nozzle chamber | |||||||
(882) | |||||||
Nozzle chamber (on | 1 per | 70 μm | 30 μm | 20 μm | 1 | 0.021 μl/μs | 75.4 Pa |
chip front)(883) | nozzle | ||||||
-
-
FIG. 213 illustrates a top side perspective view of the internal portions of an Artcam camera, showing the parts flattened out; -
FIG. 214 illustrates a bottom side perspective view of the internal portions of an Artcam camera, showing the parts flattened out;FIG. 215 illustrates a first - top side perspective view of the internal portions of an Artcam camera, showing the parts as encased in an Artcam;
FIG. 216 illustrates a second top side perspective view of the internal portions of an Artcam camera, showing the parts as encased in an Artcam; -
FIG. 217 illustrates a second top side perspective view of the internal portions of an Artcam camera, showing the parts as encased in an Artcam;
Postcard Print Rolls
-
User interface event | Action |
Lock Focus | Perform any automatic pre-capture setup via the Camera Manager. This |
includes auto-focussing, auto-adjusting exposure, and charging the | |
flash. This is normally initiated by the user pressing the Take button | |
halfway. | |
Take | Capture an image via the Camera Manager. |
Self-Timer | Capture an image in self-timed mode via the Camera Manager. |
Flash Mode | Update the Camera Manager to use the next flash mode. Update the |
Status Display to show the new flash mode. | |
Print the current image via the Printer Manager. Apply an artistic effect | |
to the image via the Image Processing Manager if there is a current | |
script. Update the remaining prints count on the Status Display (see | |
Print Roll Inserted below). | |
Hold | Apply an artistic effect to the current image via the Image Processing |
Manager if there is a current script, but don't print the image. | |
Eject ArtCards | Eject the currently inserted ArtCards via the File Manager. |
Print Roll Inserted | Calculate the number of prints remaining based on the Print Manager's |
remaining media length and the Camera Manager's aspect ratio. Update | |
the remaining prints count on the Status display. | |
Print Roll Removed | Update the Status Display to indicate there is no print roll present. |
output parameters | domains |
focus range | real, real |
zoom range | real, real |
aperture range | real, real |
shutter speed range | real, real |
input parameters | domains |
focus | real |
zoom | real |
aperture | real |
shutter speed | real |
aspect ratio | classic, HDTV, panoramic |
focus control mode | multi-point auto, single-point auto, manual |
exposure control mode | auto, aperture priority, shutter priority, manual |
flash mode | auto, auto with red-eye removal, fill, off |
view scene mode | on, off |
commands | return value domains |
Lock Focus | none |
Self-Timed Capture | Raw Image |
Capture Image | Raw Image |
output parameters | domains | ||
media is present | bool | ||
media has fixed page size | bool | ||
media width | real | ||
remaining media length | real | ||
fixed page size | real, real | ||
input parameters | domains | ||
page size | real, real | ||
commands | return value domains | ||
Print Image | none | ||
output events | |||
invalid media | |||
media exhausted | |||
media inserted | |||
media removed | |||
While the back side of a ArtCards has the same visual appearance regardless of the application (since it stores the data), the front of a ArtCards is application dependent. It must make sense to the user in the context of the application.
The information could be company information, specific product sheets, web-site pointers, e-mail addresses, a resume . . . in short, whatever the bizCard holder wants it to. BizCards can be read by any ArtCards reader such as an attached PC card reader, which can be connected to a standard PC by a USB port. BizCards can also be displayed as documents on specific embedded devices. In the case of a PC, a user simply inserts the bizCard into their reader. The bizCard is then preferably navigated just like a web-site using a regular web browser. Simply by containing the owner's photograph and digital signature as well as a pointer to the company's public key, each bizCard can be used to electronically verify that the person is in fact who they claim to be and does actually work for the specified company. In addition by pointing to the company's public key, a bizCard permits simple initiation of secure communications.
A further application, hereinafter known as “TourCard” is an application of the ArtCards which contains information for tourists and visitors to a city. When a tourCard is inserted into the ArtCards book reader, information can be in the form of:
-
- Maps
- Public Transport Timetables
- Places of Interest
- Local history
- Events and Exhibitions
- Restaurant locations
- Shopping Centres
TourCard is a low cost alternative to tourist brochures, guide books and street directories. With a manufacturing cost of just one cent per card, tourCards could be distributed at tourist information centres, hotels and tourist attractions, at a minimum cost, or free if sponsored by advertising. The portability of the bookreader makes it the perfect solution for tourists. TourCards can also be used at information kiosk's, where a computer equipped with the ArtCards reader can decode the information encoded into the tourCard on any web browser.
It is interactivity of the bookreader that makes the tourCard so versatile. For example, Hypertext links contained on the map can be selected to show historical narratives of the feature buildings. In this way the tourist can embark on a guided tour of the city, with relevant transportation routes and timetables available at any time. The tourCard eliminates the need for separate maps, guide books, timetables and restaurant guides and creates a simple solution for the independent traveller.
Of course, many other utilizations of the data cards are possible. For example, newspapers, study guides, pop group cards, baseball cards, timetables, music data files, product parts, advertising, TV guides, movie guides, trade show information, tear off cards in magazines, recipes, classified ads, medical information, programmes and software, horse racing form guides, electronic forms, annual reports, restaurant, hotel and vacation guides, translation programmes, golf course information, news broadcast, comics, weather details etc.
ACTUATOR MECHANISM (APPLIED ONLY TO SELECTED INK DROPS) |
Description | Advantages | Disadvantages | Examples | |
Thermal | An electrothermal | Large force generated | High power | Canon Bubblejet 1979 |
bubble | heater heats the ink to | Simple construction | Ink carrier limited to | Endo et al GB |
above boiling point, | No moving parts | water | patent 2,007,162 | |
transferring significant | Fast operation | Low efficiency | Xerox heater-in-pit | |
heat to the aqueous | Small chip area | High temperatures | 1990 Hawkins et al | |
ink. A bubble | required for actuator | required | U.S. Pat. No. 4,899,181 | |
nucleates and quickly | High mechanical | Hewlett-Packard TIJ | ||
forms, expelling the | stress | 1982 Vaught et al | ||
ink. | Unusual materials | U.S. Pat. No. 4,490,728 | ||
The efficiency of the | required | |||
process is low, with | Large drive transistors | |||
typically less than | Cavitation causes | |||
0.05% of the electrical | actuator failure | |||
energy being | Kogation reduces | |||
transformed into | bubble formation | |||
kinetic energy of the | Large print heads are | |||
drop. | difficult to fabricate | |||
Piezoelectric | A piezoelectric crystal | Low power | Very large area | Kyser et al U.S. Pat. No. |
such as lead | consumption | required for actuator | 3,946,398 | |
lanthanum zirconate | Many ink types can be | Difficult to integrate | Zoltan U.S. Pat. No. 3,683,212 | |
(PZT) is electrically | used | with electronics | 1973 Stemme U.S. Pat. No. | |
activated, and either | Fast operation | High voltage drive | 3,747,120 | |
expands, shears, or | High efficiency | transistors required | Epson Stylus | |
bends to apply | Full pagewidth print | Tektronix | ||
pressure to the ink, | heads impractical | IJ04 | ||
ejecting drops. | due to actuator size | |||
Requires electrical | ||||
poling in high field | ||||
strengths during | ||||
manufacture | ||||
Electrostrictive | An electric field is | Low power | Low maximum strain | Seiko Epson, Usui et |
used to activate | consumption | (approx. 0.01%) | all JP 253401/96 | |
electrostriction in | Many ink types can be | Large area required | IJ04 | |
relaxor materials such | used | for actuator due to | ||
as lead lanthanum | Low thermal | low strain | ||
zirconate titanate | expansion | Response speed is | ||
(PLZT) or lead | Electric field strength | marginal (~10 μs) | ||
magnesium niobate | required (approx. | High voltage drive | ||
(PMN). | 3.5 V/μm) can be | transistors required | ||
generated without | Full pagewidth print | |||
difficulty | heads impractical | |||
Does not require | due to actuator size | |||
electrical poling | ||||
Ferroelectric | An electric field is | Low power | Difficult to integrate | IJ04 |
used to induce a phase | consumption | with electronics | ||
transition between the | Many ink types can be | Unusual materials | ||
antiferroelectric (AFE) | used | such as PLZSnT are | ||
and ferroelectric (FE) | Fast operation (<1 μs) | required | ||
phase. Perovskite | Relatively high | Actuators require a | ||
materials such as tin | longitudinal strain | large area | ||
modified lead | High efficiency | |||
lanthanum zirconate | Electric field strength | |||
titanate (PLZSnT) | of around 3 V/μm | |||
exhibit large strains of | can be readily | |||
up to 1% associated | provided | |||
with the AFE to FE | ||||
phase transition. | ||||
Electrostatic | Conductive plates are | Low power | Difficult to operate | IJ02, IJ04 |
plates | separated by a | consumption | electrostatic devices | |
compressible or fluid | Many ink types can be | in an aqueous | ||
dielectric (usually air). | used | environment | ||
Upon application of a | Fast operation | The electrostatic | ||
voltage, the plates | actuator will | |||
attract each other and | normally need to be | |||
displace ink, causing | separated from the | |||
drop ejection. The | ink | |||
conductive plates may | Very large area | |||
be in a comb or | required to achieve | |||
honeycomb structure, | high forces | |||
or stacked to increase | High voltage drive | |||
the surface area and | transistors may be | |||
therefore the force. | required | |||
Full pagewidth print | ||||
heads are not | ||||
competitive due to | ||||
actuator size | ||||
Electrostatic | A strong electric field | Low current | High voltage required | 1989 Saito et al, U.S. Pat. No. |
pull | is applied to the ink, | consumption | May be damaged by | 4,799,068 |
on ink | whereupon | Low temperature | sparks due to air | 1989 Miura et al, U.S. Pat. No. |
electrostatic attraction | breakdown | 4,810,954 | ||
accelerates the ink | Required field | Tone-jet | ||
towards the print | strength increases as | |||
medium. | the drop size | |||
decreases | ||||
High voltage drive | ||||
transistors required | ||||
Electrostatic field | ||||
attracts dust | ||||
Permanent | An electromagnet | Low power | Complex fabrication | IJ07, IJ10 |
magnet | directly attracts a | consumption | Permanent magnetic | |
electromagnetic | permanent magnet, | Many ink types can be | material such as | |
displacing ink and | used | Neodymium Iron | ||
causing drop ejection. | Fast operation | Boron (NdFeB) | ||
Rare earth magnets | High efficiency | required. | ||
with a field strength | Easy extension from | High local currents | ||
around 1 Tesla can be | single nozzles to | required | ||
used. Examples are: | pagewidth print | Copper metalization | ||
Samarium Cobalt | heads | should be used for | ||
(SaCo) and magnetic | long | |||
materials in the | electromigration | |||
neodymium iron boron | lifetime and low | |||
family (NdFeB, | resistivity | |||
NdDyFeBNb, | Pigmented inks are | |||
NdDyFeB, etc) | usually infeasible | |||
Operating temperature | ||||
limited to the Curie | ||||
temperature (around | ||||
540 K) | ||||
Soft | A solenoid induced a | Low power | Complex fabrication | IJ01, IJ05, IJ08, IJ10, |
magnetic | magnetic field in a soft | consumption | Materials not usually | IJ12, IJ14, IJ15, |
core electromagnetic | magnetic core or yoke | Many ink types can be | present in a CMOS | IJ17 |
fabricated from a | used | fab such as NiFe, | ||
ferrous material such | Fast operation | CoNiFe, or CoFe | ||
as electroplated iron | High efficiency | are required | ||
alloys such as CoNiFe | Easy extension from | High local currents | ||
[1], CoFe, or NiFe | single nozzles to | required | ||
alloys. Typically, the | pagewidth print | Copper metalization | ||
soft magnetic material | heads | should be used for | ||
is in two parts, which | long | |||
are normally held | electromigration | |||
apart by a spring. | lifetime and low | |||
When the solenoid is | resistivity | |||
actuated, the two parts | Electroplating is | |||
attract, displacing the | required | |||
ink. | High saturation flux | |||
density is required | ||||
(2.0-2.1 T is | ||||
achievable with | ||||
CoNiFe [1]) | ||||
Lorenz | The Lorenz force | Low power | Force acts as a | IJ06, IJ11, IJ13, IJ16 |
force | acting on a current | consumption | twisting motion | |
carrying wire in a | Many ink types can be | Typically, only a | ||
magnetic field is | used | quarter of the | ||
utilized. | Fast operation | solenoid length | ||
This allows the | High efficiency | provides force in a | ||
magnetic field to be | Easy extension from | useful direction | ||
supplied externally to | single nozzles to | High local currents | ||
the print head, for | pagewidth print | required | ||
example with rare | heads | Copper metalization | ||
earth permanent | should be used for | |||
magnets. | long | |||
Only the current | electromigration | |||
carrying wire need be | lifetime and low | |||
fabricated on the print- | resistivity | |||
head, simplifying | Pigmented inks are | |||
materials | usually infeasible | |||
requirements. | ||||
Magnetostriction | The actuator uses the | Many ink types can be | Force acts as a | Fischenbeck, U.S. Pat. No. |
giant magnetostrictive | used | twisting motion | 4,032,929 | |
effect of materials | Fast operation | Unusual materials | IJ25 | |
such as Terfenol-D (an | Easy extension from | such as Terfenol-D | ||
alloy of terbium, | single nozzles to | are required | ||
dysprosium and iron | pagewidth print | High local currents | ||
developed at the Naval | heads | required | ||
Ordnance Laboratory, | High force is available | Copper metalization | ||
hence Ter-Fe-NOL). | should be used for | |||
For best efficiency, the | long | |||
actuator should be pre- | electromigration | |||
stressed to approx. 8 MPa. | lifetime and low | |||
resistivity | ||||
Pre-stressing may be | ||||
required | ||||
Surface | Ink under positive | Low power | Requires | Silverbrook, EP 0771 |
tension | pressure is held in a | consumption | supplementary force | 658 A2 and related |
reduction | nozzle by surface | Simple construction | to effect drop | patent applications |
tension. The surface | No unusual materials | separation | ||
tension of the ink is | required in | Requires special ink | ||
reduced below the | fabrication | surfactants | ||
bubble threshold, | High efficiency | Speed may be limited | ||
causing the ink to | Easy extension from | by surfactant | ||
egress from the | single nozzles to | properties | ||
nozzle. | pagewidth print | |||
heads | ||||
Viscosity | The ink viscosity is | Simple construction | Requires | Silverbrook, EP 0771 |
reduction | locally reduced to | No unusual materials | supplementary force | 658 A2 and related |
select which drops are | required in | to effect drop | patent applications | |
to be ejected. A | fabrication | separation | ||
viscosity reduction can | Easy extension from | Requires special ink | ||
be achieved | single nozzles to | viscosity properties | ||
electrothermally with | pagewidth print | High speed is difficult | ||
most inks, but special | heads | to achieve | ||
inks can be engineered | Requires oscillating | |||
for a 100:1 viscosity | ink pressure | |||
reduction. | A high temperature | |||
difference (typically | ||||
80 degrees) is | ||||
required | ||||
Acoustic | An acoustic wave is | Can operate without a | Complex drive | 1993 Hadimioglu et |
generated and | nozzle plate | circuitry | al, EUP 550,192 | |
focussed upon the | Complex fabrication | 1993 Elrod et al, EUP | ||
drop ejection region. | Low efficiency | 572,220 | ||
Poor control of drop | ||||
position | ||||
Poor control of drop | ||||
volume | ||||
Thermoelastic | An actuator which | Low power | Efficient aqueous | IJ03, IJ09, IJ17, IJ18, |
bend | relies upon differential | consumption | operation requires a | IJ19, IJ20, IJ21, |
actuator | thermal expansion | Many ink types can be | thermal insulator on | IJ22, IJ23, IJ24, |
upon Joule heating is | used | the hot side | IJ27, IJ28, 1129, | |
used. | Simple planar | Corrosion prevention | IJ30, IJ31, IJ32, | |
fabrication | can be difficult | IJ33, IJ34, IJ35, | ||
Small chip area | Pigmented inks may | IJ36, IJ37, IJ38, | ||
required for each | be infeasible, as | IJ39, IJ40, IJ41 | ||
actuator | pigment particles | |||
Fast operation | may jam the bend | |||
High efficiency | actuator | |||
CMOS compatible | ||||
voltages and | ||||
currents | ||||
Standard MEMS | ||||
processes can be | ||||
used | ||||
Easy extension from | ||||
single nozzles to | ||||
pagewidth print | ||||
heads | ||||
High CTE | A material with a very | High force can be | Requires special | IJ09, IJ17, IJ18, IJ20, |
thermoelastic | high coefficient of | generated | material (e.g. PTFE) | IJ21, IJ22, IJ23, |
actuator | thermal expansion | Three methods of | Requires a PTFE | IJ24, IJ27, IJ28, |
(CTE) such as | PTFE deposition are | deposition process, | IJ29, IJ30, IJ31, | |
polytetrafluoroethylene | under development: | which is not yet | IJ42, IJ43, IJ44 | |
(PTFE) is used. As | chemical vapor | standard in ULSI | ||
high CTE materials | deposition (CVD), | fabs | ||
are usually non- | spin coating, and | PTFE deposition | ||
conductive, a heater | evaporation | cannot be followed | ||
fabricated from a | PTFE is a candidate | with high | ||
conductive material is | for low dielectric | temperature (above | ||
incorporated. A 50 μm | |
350° C.) processing | ||
long PTFE bend | in ULSI | Pigmented inks may | ||
actuator with | Very low power | be infeasible, as | ||
polysilicon heater and | | pigment particles | ||
15 mW power input | Many ink types can be | may jam the bend | ||
can provide 180 μN | used | actuator | ||
force and 10 μm | Simple planar | |||
deflection. Actuator | fabrication | |||
motions include: | Small chip area | |||
Bend | required for each | |||
Push | actuator | |||
Buckle | Fast operation | |||
Rotate | High efficiency | |||
CMOS compatible | ||||
voltages and | ||||
currents | ||||
Easy extension from | ||||
single nozzles to | ||||
pagewidth print | ||||
heads | ||||
Conduct-ive | A polymer with a high | High force can be | Requires special | IJ24 |
polymer | coefficient of thermal | generated | materials | |
thermoelastic | expansion (such as | Very low power | development (High | |
actuator | PTFE) is doped with | consumption | CTE conductive | |
conducting substances | Many ink types can be | polymer) | ||
to increase its | used | Requires a PTFE | ||
conductivity to about 3 | Simple planar | deposition process, | ||
orders of magnitude | fabrication | which is not yet | ||
below that of copper. | Small chip area | standard in ULSI | ||
The conducting | required for each | fabs | ||
polymer expands | actuator | PTFE deposition | ||
when resistively | Fast operation | cannot be followed | ||
heated. | High efficiency | with high | ||
Examples of | CMOS compatible | temperature (above | ||
conducting dopants | voltages and | 350° C.) processing | ||
include: | currents | Evaporation and CVD | ||
Carbon nanotubes | Easy extension from | deposition | ||
Metal fibers | single nozzles to | techniques cannot | ||
Conductive polymers | pagewidth print | be used | ||
such as doped | heads | Pigmented inks may | ||
polythiophene | be infeasible, as | |||
Carbon granules | pigment particles | |||
may jam the bend | ||||
actuator | ||||
Shape | A shape memory alloy | High force is available | Fatigue limits | IJ26 |
memory | such as TiNi (also | (stresses of | maximum number | |
alloy | known as Nitinol — | hundreds of MPa) | of cycles | |
Nickel Titanium alloy | Large strain is | Low strain (1%) is | ||
developed at the Naval | available (more than | required to extend | ||
Ordnance Laboratory) | 3%) | fatigue resistance | ||
is thermally switched | High corrosion | Cycle rate limited by | ||
between its weak | resistance | heat removal | ||
martensitic state and | Simple construction | Requires unusual | ||
its high stiffness | Easy extension from | materials (TiNi) | ||
austenic state. The | single nozzles to | The latent heat of | ||
shape of the actuator | pagewidth print | transformation must | ||
in its martensitic state | heads | be provided | ||
is deformed relative to | Low voltage operation | High current operation | ||
the austenic shape. | Requires pre-stressing | |||
The shape change | to distort the | |||
causes ejection of a | martensitic state | |||
drop. | ||||
Linear | Linear magnetic | Linear Magnetic | Requires unusual | IJ12 |
Magnetic | actuators include the | actuators can be | semiconductor | |
Actuator | Linear Induction | constructed with | materials such as | |
Actuator (LIA), Linear | high thrust, long | soft magnetic alloys | ||
Permanent Magnet | travel, and high | (e.g. CoNiFe) | ||
Synchronous Actuator | efficiency using | Some varieties also | ||
(LPMSA), Linear | planar | require permanent | ||
Reluctance | semiconductor | magnetic materials | ||
Synchronous Actuator | fabrication | such as Neodymium | ||
(LRSA), Linear | techniques | iron boron (NdFeB) | ||
Switched Reluctance | Long actuator travel is | Requires complex | ||
Actuator (LSRA), and | available | multi-phase drive | ||
the Linear Stepper | Medium force is | circuitry | ||
Actuator (LSA). | available | High current operation | ||
Low voltage operation | ||||
BASIC OPERATION MODE |
Description | Advantages | Disadvantages | Examples | |
Actuator | This is the simplest | Simple operation | Drop repetition rate is | Thermal ink jet |
directly | mode of operation: the | No external fields | usually limited to | Piezoelectric ink jet |
pushes ink | actuator directly | required | around 10 kHz. | IJ01, IJ02, IJ03, IJ04, |
supplies sufficient | Satellite drops can be | However, this is not | IJ05, IJ06, IJ07, | |
kinetic energy to expel | avoided if drop | fundamental to the | IJ09, IJ11, IJ12, | |
the drop. The drop | velocity is less than | method, but is | IJ14, IJ16, IJ20, | |
must have a sufficient | 4 m/s | related to the refill | IJ22, IJ23, IJ24, | |
velocity to overcome | Can be efficient, | method normally | IJ25, IJ26, IJ27, | |
the surface tension. | depending upon the | used | IJ28, IJ29, IJ30, | |
actuator used | All of the drop kinetic | IJ31, IJ32, IJ33, | ||
energy must be | IJ34, IJ35, IJ36, | |||
provided by the | IJ37, IJ38, IJ39, | |||
actuator | IJ40, IJ41, IJ42, | |||
Satellite drops usually | IJ43, IJ44 | |||
form if drop | ||||
velocity is greater | ||||
than 4.5 m/s | ||||
Proximity | The drops to be | Very simple print head | Requires close | Silverbrook, EP 0771 |
printed are selected by | fabrication can be | proximity between | 658 A2 and related | |
some manner (e.g. | used | the print head and | patent applications | |
thermally induced | The drop selection | the print media or | ||
surface tension | means does not need | transfer roller | ||
reduction of | to provide the | May require two print | ||
pressurized ink). | energy required to | heads printing | ||
Selected drops are | separate the drop | alternate rows of the | ||
separated from the ink | from the nozzle | image | ||
in the nozzle by | Monolithic color print | |||
contact with the print | heads are difficult | |||
medium or a transfer | ||||
roller. | ||||
Electrostatic | The drops to be | Very simple print head | Requires very high | Silverbrook, EP 0771 |
pull | printed are selected by | fabrication can be | electrostatic field | 658 A2 and related |
on ink | some manner (e.g. | used | Electrostatic field for | patent applications |
thermally induced | The drop selection | small nozzle sizes is | Tone-Jet | |
surface tension | means does not need | above air | ||
reduction of | to provide the | breakdown | ||
pressurized ink). | energy required to | Electrostatic field may | ||
Selected drops are | separate the drop | attract dust | ||
separated from the ink | from the nozzle | |||
in the nozzle by a | ||||
strong electric field. | ||||
Magnetic | The drops to be | Very simple print head | Requires magnetic ink | Silverbrook, EP 0771 |
pull on ink | printed are selected by | fabrication can be | Ink colors other than | 658 A2 and related |
some manner (e.g. | used | black are difficult | patent applications | |
thermally induced | The drop selection | Requires very high | ||
surface tension | means does not need | magnetic fields | ||
reduction of | to provide the | |||
pressurized ink). | energy required to | |||
Selected drops are | separate the drop | |||
separated from the ink | from the nozzle | |||
in the nozzle by a | ||||
strong magnetic field | ||||
acting on the magnetic | ||||
ink. | ||||
Shutter | The actuator moves a | High speed (>50 kHz) | Moving parts are | IJ13, IJ17, IJ21 |
shutter to block ink | operation can be | required | ||
flow to the nozzle. The | achieved due to | Requires ink pressure | ||
ink pressure is pulsed | reduced refill time | modulator | ||
at a multiple of the | Drop timing can be | Friction and wear | ||
drop ejection | very accurate | must be considered | ||
frequency. | The actuator energy | Stiction is possible | ||
can be very low | ||||
Shuttered | The actuator moves a | Actuators with small | Moving parts are | IJ08, IJ15, IJ18, IJ19 |
grill | shutter to block ink | travel can be used | required | |
flow through a grill to | Actuators with small | Requires ink pressure | ||
the nozzle. The shutter | force can be used | modulator | ||
movement need only | High speed (>50 kHz) | Friction and wear | ||
be equal to the width | operation can be | must be considered | ||
of the grill holes, | achieved | Stiction is possible | ||
Pulsed | A pulsed magnetic | Extremely low energy | Requires an external | IJ10 |
magnetic | field attracts an ‘ink | operation is possible | pulsed magnetic | |
pull on ink | pusher’ at the drop | No heat dissipation | field | |
pusher | ejection frequency. An | problems | Requires special | |
actuator controls a | materials for both | |||
catch, which prevents | the actuator and the | |||
the ink pusher from | ink pusher | |||
moving when a drop is | Complex construction | |||
not to be ejected. | ||||
AUXILIARY MECHANISM (APPLIED TO ALL NOZZLES) |
Description | Advantages | Disadvantages | Examples | ||
None | The actuator directly | Simplicity of | Drop ejection energy | Most ink jets, |
fires the ink drop, and | construction | must be supplied by | including | |
there is no external | Simplicity of | individual nozzle | piezoelectric and | |
field or other | operation | actuator | thermal bubble. | |
mechanism required. | Small physical size | IJ01, IJ02, IJ03, IJ04, | ||
IJ05, IJ07, IJ09, | ||||
IJ11, IJ12, IJ14, | ||||
IJ20, IJ22, IJ23, | ||||
IJ24, IJ25, IJ26, | ||||
IJ27, IJ28, IJ29, | ||||
IJ30, IJ31, IJ32, | ||||
IJ33, IJ34, IJ35, | ||||
IJ36, IJ37, IJ38, | ||||
IJ39, IJ40, IJ41, | ||||
IJ42, IJ43, IJ44 | ||||
Oscillating | The ink pressure | Oscillating ink | Requires external ink | Silverbrook, EP 0771 |
ink pressure | oscillates, providing | pressure can provide | pressure oscillator | 658 A2 and related |
(including | much of the drop | a refill pulse, | Ink pressure phase and | patent applications |
acoustic | ejection energy. The | allowing higher | amplitude must be | IJ08, IJ13, IJ15, IJ17, |
stimulation) | actuator selects which | operating speed | carefully controlled | IJ18, IJ19, IJ21 |
drops are to be fired | The actuators may | Acoustic reflections in | ||
by selectively | operate with much | the ink chamber | ||
blocking or enabling | lower energy | must be designed | ||
nozzles. The ink | Acoustic lenses can be | for | ||
pressure oscillation | used to focus the | |||
may be achieved by | sound on the | |||
vibrating the print | nozzles | |||
head, or preferably by | ||||
an actuator in the ink | ||||
supply. | ||||
Media | The print head is | Low power | Precision assembly | Silverbrook, EP 0771 |
proximity | placed in close | High accuracy | required | 658 A2 and related |
proximity to the print | Simple print head | Paper fibers may | patent applications | |
medium. Selected | construction | cause problems | ||
drops protrude from | Cannot print on rough | |||
the print head further | substrates | |||
than unselected drops, | ||||
and contact the print | ||||
medium. The drop | ||||
soaks into the medium | ||||
fast enough to cause | ||||
drop separation. | ||||
Transfer | Drops are printed to a | High accuracy | Bulky | Silverbrook, EP 0771 |
roller | transfer roller instead | Wide range of print | Expensive | 658 A2 and related |
of straight to the print | substrates can be | Complex construction | patent applications | |
medium. A transfer | used | Tektronix hot melt | ||
roller can also be used | Ink can be dried on the | piezoelectric ink jet | ||
for proximity drop | transfer roller | Any of the IJ series | ||
separation. | ||||
Electrostatic | An electric field is | Low power | Field strength required | Silverbrook, EP 0771 |
used to accelerate | Simple print head | for separation of | 658 A2 and related | |
selected drops towards | construction | small drops is near | patent applications | |
the print medium. | or above air | Tone-Jet | ||
breakdown | ||||
Direct | A magnetic field is | Low power | Requires magnetic ink | Silverbrook, EP 0771 |
magnetic | used to accelerate | Simple print head | Requires strong | 658 A2 and related |
field | selected drops of | construction | magnetic field | patent applications |
magnetic ink towards | ||||
the print medium. | ||||
Cross | The print head is | Does not require | Requires external | IJ06, IJ16 |
magnetic | placed in a constant | magnetic materials | magnet | |
field | magnetic field. The | to be integrated in | Current densities may | |
Lorenz force in a | the print head | be high, resulting in | ||
current carrying wire | manufacturing | electromigration | ||
is used to move the | process | problems | ||
actuator. | ||||
Pulsed | A pulsed magnetic | Very low power | Complex print head | IJ10 |
magnetic | field is used to | operation is possible | construction | |
field | cyclically attract a | Small print head size | Magnetic materials | |
paddle, which pushes | required in print | |||
on the ink. A small | head | |||
actuator moves a | ||||
catch, which | ||||
selectively prevents | ||||
the paddle from | ||||
moving. | ||||
ACTUATOR AMPLIFICATION OR MODIFICATION METHOD |
Description | Advantages | Disadvantages | Examples | ||
None | No actuator | Operational simplicity | Many actuator | Thermal Bubble Ink |
mechanical | mechanisms have | jet | ||
amplification is used. | insufficient travel, | IJ01, IJ02, IJ06, IJ07, | ||
The actuator directly | or insufficient force, | IJ16, IJ25, IJ26 | ||
drives the drop | to efficiently drive | |||
ejection process. | the drop ejection | |||
process | ||||
Differential | An actuator material | Provides greater travel | High stresses are | Piezoelectric |
expansion | expands more on one | in a reduced print | involved | IJ03, IJ09, IJ17, IJ18, |
bend | side than on the other. | head area | Care must be taken | IJ19, IJ20, IJ21, |
actuator | The expansion may be | that the materials do | IJ22, IJ23, IJ24, | |
thermal, piezoelectric, | not delaminate | IJ27, IJ29, IJ30, | ||
magnetostrictive, or | Residual bend | IJ31, IJ32, IJ33, | ||
other mechanism. The | resulting from high | IJ34, IJ35, IJ36, | ||
bend actuator converts | temperature or high | IJ37, IJ38, IJ39, | ||
a high force low travel | stress during | IJ42, IJ43, IJ44 | ||
actuator mechanism to | formation | |||
high travel, lower | ||||
force mechanism. | ||||
Transient | A trilayer bend | Very good | High stresses are | IJ40, IJ41 |
bend | actuator where the two | temperature stability | involved | |
actuator | outside layers are | High speed, as a new | Care must be taken | |
identical. This cancels | drop can be fired | that the materials do | ||
bend due to ambient | before heat | not delaminate | ||
temperature and | dissipates | |||
residual stress. The | Cancels residual stress | |||
actuator only responds | of formation | |||
to transient heating of | ||||
one side or the other. | ||||
Reverse | The actuator loads a | Better coupling to the | Fabrication | IJ05, IJ11 |
spring | spring. When the | ink | complexity | |
actuator is turned off, | High stress in the | |||
the spring releases. | spring | |||
This can reverse the | ||||
force/distance curve of | ||||
the actuator to make it | ||||
compatible with the | ||||
force/time | ||||
requirements of the | ||||
drop ejection. | ||||
Actuator | A series of thin | Increased travel | Increased fabrication | Some piezoelectric ink |
stack | actuators are stacked. | Reduced drive voltage | complexity | jets |
This can be | Increased possibility | IJ04 | ||
appropriate where | of short circuits due | |||
actuators require high | to pinholes | |||
electric field strength, | ||||
such as electrostatic | ||||
and piezoelectric | ||||
actuators. | ||||
Multiple | Multiple smaller | Increases the force | Actuator forces may | IJ12, IJI3, IJ18, IJ20, |
actuators | actuators are used | available from an | not add linearly, | IJ22, IJ28, IJ42, |
simultaneously to | actuator | reducing efficiency | IJ43 | |
move the ink. Each | Multiple actuators can | |||
actuator need provide | be positioned to | |||
only a portion of the | control ink flow | |||
force required. | accurately | |||
Linear | A linear spring is used | Matches low travel | Requires print head | IJ15 |
Spring | to transform a motion | actuator with higher | area for the spring | |
with small travel and | travel requirements | |||
high force into a | Non-contact method | |||
longer travel, lower | of motion | |||
force motion. | transformation | |||
Coiled | A bend actuator is | Increases travel | Generally restricted to | IJ17, IJ21, IJ34, IJ35 |
actuator | coiled to provide | Reduces chip area | planar | |
greater travel in a | Planar | implementations | ||
reduced chip area. | implementations are | due to extreme | ||
relatively easy to | fabrication difficulty | |||
fabricate. | in other orientations. | |||
Flexure | A bend actuator has a | Simple means of | Care must be taken | IJ10, IJ19, IJ33 |
bend | small region near the | increasing travel of | not to exceed the | |
actuator | fixture point, which | a bend actuator | elastic limit in the | |
flexes much more | flexure area | |||
readily than the | Stress distribution is | |||
remainder of the | very uneven | |||
actuator. The actuator | Difficult to accurately | |||
flexing is effectively | model with finite | |||
converted from an | element analysis | |||
even coiling to an | ||||
angular bend, resulting | ||||
in greater travel of the | ||||
actuator tip. | ||||
Catch | The actuator controls a | Very low actuator | Complex construction | IJ10 |
small catch. The catch | energy | Requires external | ||
either enables or | Very small actuator | force | ||
disables movement of | size | Unsuitable for | ||
an ink pusher that is | pigmented inks | |||
controlled in a bulk | ||||
manner. | ||||
Gears | Gears can be used to | Low force, low travel | Moving parts are | IJ13 |
increase travel at the | actuators can be | required | ||
expense of duration. | used | Several actuator | ||
Circular gears, rack | Can be fabricated | cycles are required | ||
and pinion, ratchets, | using standard | More complex drive | ||
and other gearing | surface MEMS | electronics | ||
methods can be used. | processes | Complex construction | ||
Friction, friction, and | ||||
wear are possible | ||||
Buckle plate | A buckle plate can be | Very fast movement | Must stay within | S. Hirata et al, “An |
used to change a slow | achievable | elastic limits of the | Ink-jet Head Using | |
actuator into a fast | materials for long | Diaphragm | ||
motion. It can also | device life | Microactuator”, | ||
convert a high force, | High stresses involved | Proc. IEEE MEMS, | ||
low travel actuator | Generally high power | Feb. 1996, pp 418-423. | ||
into a high travel, | requirement | IJ18, IJ27 | ||
medium force motion. | ||||
Tapered | A tapered magnetic | Linearizes the | Complex construction | IJ14 |
magnetic | pole can increase | magnetic | ||
pole | travel at the expense | force/distance curve | ||
of force. | ||||
Lever | A lever and fulcrum is | Matches low travel | High stress around the | IJ32, IJ36, IJ37 |
used to transform a | actuator with higher | fulcrum | ||
motion with small | travel requirements | |||
travel and high force | Fulcrum area has no | |||
into a motion with | linear movement, | |||
longer travel and | and can be used for | |||
lower force. The lever | a fluid seal | |||
can also reverse the | ||||
direction of travel. | ||||
Rotary | The actuator is | High mechanical | Complex construction | IJ28 |
impeller | connected to a rotary | advantage | Unsuitable for | |
impeller. A small | The ratio of force to | pigmented inks | ||
angular deflection of | travel of the actuator | |||
the actuator results in | can be matched to | |||
a rotation of the | the nozzle | |||
impeller vanes, which | requirements by | |||
push the ink against | varying the number | |||
stationary vanes and | of impeller vanes | |||
out of the nozzle. | ||||
Acoustic | A refractive or | No moving parts | Large area required | 1993 Hadimioglu et |
lens | diffractive (e.g. zone | Only relevant for | al, EUP 550,192 | |
plate) acoustic lens is | acoustic ink jets | 1993 Elrod et al, EUP | ||
used to concentrate | 572,220 | |||
sound waves. | ||||
Sharp | A sharp point is used | Simple construction | Difficult to fabricate | Tone-jet |
conductive | to concentrate an | using standard VLSI | ||
point | electrostatic field, | processes for a | ||
surface ejecting ink- | ||||
jet | ||||
Only relevant for | ||||
electrostatic ink jets | ||||
ACTUATOR MOTION |
Description | Advantages | Disadvantages | Examples | ||
Volume | The volume of the | Simple construction in | High energy is | Hewlett-Packard |
expansion | actuator changes, | the case of thermal | typically required to | Thermal Ink jet |
pushing the ink in all | ink jet | achieve volume | Canon Bubblejet | |
directions. | expansion. This | |||
leads to thermal | ||||
stress, cavitation, | ||||
and kogation in | ||||
thermal ink jet | ||||
implementations | ||||
Linear, | The actuator moves in | Efficient coupling to | High fabrication | IJ01, IJ02, IJ04, IJ07, |
normal to | a direction normal to | ink drops ejected | complexity may be | IJ11, IJ14 |
chip surface | the print head surface. | normal to the | required to achieve | |
The nozzle is typically | surface | perpendicular | ||
in the line of | motion | |||
movement. | ||||
Parallel to | The actuator moves | Suitable for planar | Fabrication | IJ12, IJ13, IJ15, IJ33, , |
chip surface | parallel to the print | fabrication | complexity | IJ34, IJ35, IJ36 |
head surface. Drop | Friction | |||
ejection may still be | Stiction | |||
normal to the surface. | ||||
Membrane | An actuator with a | The effective area of | Fabrication | 1982 Howkins U.S. Pat. No. |
push | high force but small | the actuator | complexity | 4,459,601 |
area is used to push a | becomes the | Actuator size | ||
stiff membrane that is | membrane area | Difficulty of | ||
in contact with the ink. | integration in a | |||
VLSI process | ||||
Rotary | The actuator causes | Rotary levers may be | Device complexity | IJ05, IJ08, IJ13, IJ28 |
the rotation of some | used to increase | May have friction at a | ||
element, such a grill or | travel | pivot point | ||
impeller | Small chip area | |||
requirements | ||||
Bend | The actuator bends | A very small change | Requires the actuator | 1970 Kyser et al U.S. Pat. No. |
when energized. This | in dimensions can | to be made from at | 3,946,398 | |
may be due to | be converted to a | least two distinct | 1973 Stemme U.S. Pat. No. | |
differential thermal | large motion. | layers, or to have a | 3,747,120 | |
expansion, | thermal difference | IJ03, IJ09, IJ10, IJ19, | ||
piezoelectric | across the actuator | IJ23, IJ24, IJ25, | ||
expansion, | IJ29, IJ30, IJ31, | |||
magnetostriction, or | IJ33, IJ34, IJ35 | |||
other form of relative | ||||
dimensional change. | ||||
Swivel | The actuator swivels | Allows operation | Inefficient coupling to | IJ06 |
around a central pivot. | where the net linear | the ink motion | ||
This motion is suitable | force on the paddle | |||
where there are | is zero | |||
opposite forces | Small chip area | |||
applied to opposite | requirements | |||
sides of the paddle, | ||||
e.g. Lorenz force. | ||||
Straighten | The actuator is | Can be used with | Requires careful | IJ26, IJ32 |
normally bent, and | shape memory | balance of stresses | ||
straightens when | alloys where the | to ensure that the | ||
energized. | austenic phase is | quiescent bend is | ||
planar | accurate | |||
Double | The actuator bends in | One actuator can be | Difficult to make the | IJ36, IJ37, IJ38 |
bend | one direction when | used to power two | drops ejected by | |
one element is | nozzles. | both bend directions | ||
energized, and bends | Reduced chip size. | identical. | ||
the other way when | Not sensitive to | A small efficiency loss | ||
another element is | ambient temperature | compared to | ||
energized. | equivalent single | |||
bend actuators. | ||||
Shear | Energizing the | Can increase the | Not readily applicable | 1985 Fishbeck U.S. Pat. No. |
actuator causes a shear | effective travel of | to other actuator | 4,584,590 | |
motion in the actuator | piezoelectric | mechanisms | ||
material. | actuators | |||
Radial constriction | The actuator squeezes | Relatively easy to | High force required | 1970 Zoltan U.S. Pat. No. |
an ink reservoir, | fabricate single | Inefficient | 3,683,212 | |
forcing ink from a | nozzles from glass | Difficult to integrate | ||
constricted nozzle. | tubing as | with VLSI | ||
macroscopic | processes | |||
structures | ||||
Coil/uncoil | A coiled actuator | Easy to fabricate as a | Difficult to fabricate | IJ17, IJ21, IJ34, IJ35 |
uncoils or coils more | planar VLSI process | for non-planar | ||
tightly. The motion of | Small area required, | devices | ||
the free end of the | therefore low cost | Poor out-of-plane | ||
actuator ejects the ink. | stiffness | |||
Bow | The actuator bows (or | Can increase the speed | Maximum travel is | IJ16, IJ18, IJ27 |
buckles) in the middle | of travel | constrained | ||
when energized. | Mechanically rigid | High force required | ||
Push-Pull | Two actuators control | The structure is pinned | Not readily suitable | IJ18 |
a shutter. One actuator | at both ends, so has | for ink jets which | ||
pulls the shutter, and | a high out-of-plane | directly push the ink | ||
the other pushes it. | rigidity | |||
Curl | A set of actuators curl | Good fluid flow to the | Design complexity | IJ20, IJ42 |
inwards | inwards to reduce the | region behind the | ||
volume of ink that | actuator increases | |||
they enclose. | efficiency | |||
Curl | A set of actuators curl | Relatively simple | Relatively large chip | IJ43 |
outwards | outwards, pressurizing | construction | area | |
ink in a chamber | ||||
surrounding the | ||||
actuators, and | ||||
expelling ink from a | ||||
nozzle in the chamber. | ||||
Iris | Multiple vanes enclose | High efficiency | High fabrication | IJ22 |
a volume of ink. These | Small chip area | complexity | ||
simultaneously rotate, | Not suitable for | |||
reducing the volume | pigmented inks | |||
between the vanes. | ||||
Acoustic | The actuator vibrates | The actuator can be | Large area required | 1993 Hadimioglu et |
vibration | at a high frequency. | physically distant | for efficient | al, EUP 550,192 |
from the ink | operation at useful | 1993 Elrod et al, EUP | ||
frequencies | 572,220 | |||
Acoustic coupling and | ||||
crosstalk | ||||
Complex drive | ||||
circuitry | ||||
Poor control of drop | ||||
volume and position | ||||
None | In various ink jet | No moving parts | Various other | Silverbrook, EP 0771 |
designs the actuator | tradeoffs are | 658 A2 and related | ||
does not move. | required to | patent applications | ||
eliminate moving | Tone-jet | |||
parts | ||||
NOZZLE REFILL METHOD |
Description | Advantages | Disadvantages | Examples | ||
Surface | This is the normal way | Fabrication simplicity | Low speed | Thermal ink jet |
tension | that ink jets are | Operational simplicity | Surface tension force | Piezoelectric ink jet |
refilled. After the | relatively small | IJ01-IJ07, IJ10-IJ14, | ||
actuator is energized, | compared to | IJ16, IJ20, IJ22-IJ45 | ||
it typically returns | actuator force | |||
rapidly to its normal | Long refill time | |||
position. This rapid | usually dominates | |||
return sucks in air | the total repetition | |||
through the nozzle | rate | |||
opening. The ink | ||||
surface tension at the | ||||
nozzle then exerts a | ||||
small force restoring | ||||
the meniscus to a | ||||
minimum area. This | ||||
force refills the nozzle. | ||||
Shuttered | Ink to the nozzle | High speed | Requires common ink | IJ08, IJ13, IJ15, IJ17, |
oscillating | chamber is provided at | Low actuator energy, | pressure oscillator | IJ18, IJ19, IJ21 |
ink pressure | a pressure that | as the actuator need | May not be suitable | |
oscillates at twice the | only open or close | for pigmented inks | ||
drop ejection | the shutter, instead | |||
frequency. When a | of ejecting the ink | |||
drop is to be ejected, | drop | |||
the shutter is opened | ||||
for 3 half cycles: drop | ||||
ejection, actuator | ||||
return, and refill. The | ||||
shutter is then closed | ||||
to prevent the nozzle | ||||
chamber emptying | ||||
during the next | ||||
negative pressure | ||||
cycle. | ||||
Refill | After the main | High speed, as the | Requires two | IJ09 |
actuator | actuator has ejected a | nozzle is actively | independent | |
drop a second (refill) | refilled | actuators per nozzle | ||
actuator is energized. | ||||
The refill actuator | ||||
pushes ink into the | ||||
nozzle chamber. The | ||||
refill actuator returns | ||||
slowly, to prevent its | ||||
return from emptying | ||||
the chamber again. | ||||
Positive ink | The ink is held a slight | High refill rate, | Surface spill must be | Silverbrook, EP 0771 |
pressure | positive pressure. | therefore a high | prevented | 658 A2 and related |
After the ink drop is | drop repetition rate | Highly hydrophobic | patent applications | |
ejected, the nozzle | is possible | print head surfaces | Alternative for:, IJ01-IJ07, | |
chamber fills quickly | are required | IJ10-IJ14, | ||
as surface tension and | IJ16, IJ20, IJ22-IJ45 | |||
ink pressure both | ||||
operate to refill the | ||||
nozzle. | ||||
METHOD OF RESTRICTING BACK-FLOW THROUGH INLET |
Description | Advantages | Disadvantages | Examples | ||
Long inlet | The ink inlet channel | Design simplicity | Restricts refill rate | Thermal ink jet |
channel | to the nozzle chamber | Operational simplicity | May result in a | Piezoelectric ink jet |
is made long and | Reduces crosstalk | relatively large chip | IJ42, IJ43 | |
relatively narrow, | area | |||
relying on viscous | Only partially | |||
drag to reduce inlet | effective | |||
back-flow. | ||||
Positive ink | The ink is under a | Drop selection and | Requires a method | Silverbrook, EP 0771 |
pressure | positive pressure, so | separation forces | (such as a nozzle | 658 A2 and related |
that in the quiescent | can be reduced | rim or effective | patent applications | |
state some of the ink | Fast refill time | hydrophobizing, or | Possible operation of | |
drop already protrudes | both) to prevent | the following: IJ01-IJ07, | ||
from the nozzle. | flooding of the | IJ09-IJ12, | ||
This reduces the | ejection surface of | IJ14, IJ16, IJ20, | ||
pressure in the nozzle | the print head. | IJ22, , 1J23-IJ34, | ||
chamber which is | 1J36-IJ41, IJ44 | |||
required to eject a | ||||
certain volume of ink. | ||||
The reduction in | ||||
chamber pressure | ||||
results in a reduction | ||||
in ink pushed out | ||||
through the inlet. | ||||
Baffle | One or more baffles | The refill rate is not as | Design complexity | HP Thermal Ink Jet |
are placed in the inlet | restricted as the long | May increase | Tektronix | |
ink flow. When the | inlet method. | fabrication | piezoelectric ink jet | |
actuator is energized, | Reduces crosstalk | complexity (e.g. | ||
the rapid ink | Tektronix hot melt | |||
movement creates | Piezoelectric print | |||
eddies which restrict | heads). | |||
the flow through the | ||||
inlet. The slower refill | ||||
process is unrestricted, | ||||
and does not result in | ||||
eddies. | ||||
Flexible flap | In this method recently | Significantly reduces | Not applicable to most | Canon |
restricts | disclosed by Canon, | back-flow for edge- | ink jet | |
inlet | the expanding actuator | shooter thermal ink | configurations | |
(bubble) pushes on a | jet devices | Increased fabrication | ||
flexible flap that | complexity | |||
restricts the inlet. | Inelastic deformation | |||
of polymer flap | ||||
results in creep over | ||||
extended use | ||||
Inlet filter | A filter is located | Additional advantage | Restricts refill rate | IJ04, IJ12, IJ24, IJ27, |
between the ink inlet | of ink filtration | May result in complex | IJ29, IJ30 | |
and the nozzle | Ink filter may be | construction | ||
chamber. The filter | fabricated with no | |||
has a multitude of | additional process | |||
small holes or slots, | steps | |||
restricting ink flow. | ||||
The filter also removes | ||||
particles which may | ||||
block the nozzle. | ||||
Small inlet | The ink inlet channel | Design simplicity | Restricts refill rate | IJ02, IJ37, IJ44 |
compared | to the nozzle chamber | May result in a | ||
to nozzle | has a substantially | relatively large chip | ||
smaller cross section | area | |||
than that of the nozzle, | Only partially | |||
resulting in easier ink | effective | |||
egress out of the | ||||
nozzle than out of the | ||||
inlet. | ||||
Inlet shutter | A secondary actuator | Increases speed of the | Requires separate | IJ09 |
controls the position of | ink-jet print head | refill actuator and | ||
a shutter, closing off | operation | drive circuit | ||
the ink inlet when the | ||||
main actuator is | ||||
energized. | ||||
The inlet is | The method avoids the | Back-flow problem is | Requires careful | IJ01, IJ03, IJ05, IJ06, |
located | problem of inlet back- | eliminated | design to minimize | IJ07, IJ10, IJ11, |
behind the | flow by arranging the | the negative | IJ14, IJ16, IJ22, | |
ink-pushing | ink-pushing surface of | pressure behind the | IJ23, IJ25, IJ28, | |
surface | the actuator between | paddle | IJ31, IJ32, IJ33, | |
the inlet and the | IJ34, IJ35, IJ36, | |||
nozzle. | IJ39, IJ40, IJ41 | |||
Part of the | The actuator and a | Significant reductions | Small increase in | IJ07, IJ20, IJ26, IJ38 |
actuator | wall of the ink | in back-flow can be | fabrication | |
moves to | chamber are arranged | achieved | complexity | |
shut off the | so that the motion of | Compact designs | ||
inlet | the actuator closes off | possible | ||
the inlet. | ||||
Nozzle | In some configurations | Ink back-flow | None related to ink | Silverbrook, EP 0771 |
actuator | of ink jet, there is no | problem is | back-flow on | 658 A2 and related |
does not | expansion or | eliminated | actuation | patent applications |
result in ink | movement of an | Valve-jet | ||
back-flow | actuator which may | Tone-jet | ||
cause ink back-flow | ||||
through the inlet. | ||||
NOZZLE CLEARING METHOD |
Description | Advantages | Disadvantages | Examples | ||
Normal | All of the nozzles are | No added complexity | May not be sufficient | Most ink jet systems |
nozzle firing | fired periodically, | on the print head | to displace dried ink | IJ01, IJ02, IJ03, IJ04, |
before the ink has a | IJ05, IJ06, IJ07, | |||
chance to dry. When | IJ09, IJ10, IJ11, | |||
not in use the nozzles | IJ12, IJ14, IJ16, | |||
are sealed (capped) | IJ20, IJ22, IJ23, | |||
against air. | IJ24, IJ25, IJ26, | |||
The nozzle firing is | IJ27, IJ28, IJ29, | |||
usually performed | IJ30, IJ31, IJ32, | |||
during a special | IJ33, IJ34, IJ36, | |||
clearing cycle, after | IJ37, IJ38, IJ39, | |||
first moving the print | IJ40,, IJ41, IJ42, | |||
head to a cleaning | IJ43, IJ44,, IJ45 | |||
station. | ||||
Extra | In systems which heat | Can be highly | Requires higher drive | Silverbrook, EP 0771 |
power to | the ink, but do not boil | effective if the | voltage for clearing | 658 A2 and related |
ink heater | it under normal | heater is adjacent to | May require larger | patent applications |
situations, nozzle | the nozzle | drive transistors | ||
clearing can be | ||||
achieved by over- | ||||
powering the heater | ||||
and boiling ink at the | ||||
nozzle. | ||||
Rapid | The actuator is fired in | Does not require extra | Effectiveness depends | May be used with: |
success-ion | rapid succession. In | drive circuits on the | substantially upon | IJ01, IJ02, IJ03, |
of actuator | some configurations, | print head | the configuration of | IJ04, IJ05, IJ06, |
pulses | this may cause heat | Can be readily | the ink jet nozzle | IJ07, IJ09, IJ10, |
build-up at he nozzle | controlled and | IJ11, IJ14, IJ16, | ||
which boils the ink, | initiated by digital | IJ20, IJ22, IJ23, | ||
clearing the nozzle. In | logic | IJ24, IJ25, IJ27, | ||
other situations, it may | IJ28, IJ29, IJ30, | |||
cause sufficient | IJ31, IJ32, IJ33, | |||
vibrations to dislodge | IJ34, IJ36, IJ37, | |||
clogged nozzles. | IJ38, IJ39, IJ40, | |||
IJ41, IJ42, IJ43, | ||||
IJ44, IJ45 | ||||
Extra | Where an actuator is | A simple solution | Not suitable where | May be used with: |
power to | not normally driven to | where applicable | there is a hard limit | IJ03, IJ09, IJ16, |
ink pushing | the limit of its motion, | to actuator | IJ20, IJ23, IJ24, | |
actuator | nozzle clearing may be | movement | IJ25, IJ27, IJ29, | |
assisted by providing | IJ30, IJ31, IJ32, | |||
an enhanced drive | IJ39, IJ40, IJ41, | |||
signal to the actuator. | IJ42, IJ43, IJ44, | |||
IJ45 | ||||
Acoustic | An ultrasonic wave is | A high nozzle clearing | High implementation | IJ08, IJ13, IJ15, IJ17, |
resonance | applied to the ink | capability can be | cost if system does | IJ18, IJ19, IJ21 |
chamber. This wave is | achieved | not already include | ||
of an appropriate | May be implemented | an acoustic actuator | ||
amplitude and | at very low cost in | |||
frequency to cause | systems which | |||
sufficient force at the | already include | |||
nozzle to clear | acoustic actuators | |||
blockages. This is | ||||
easiest to achieve if | ||||
the ultrasonic wave is | ||||
at a resonant | ||||
frequency of the ink | ||||
cavity. | ||||
Nozzle | A microfabricated | Can clear severely | Accurate mechanical | Silverbrook, EP 0771 |
clearing | plate is pushed against | clogged nozzles | alignment is | 658 A2 and related |
plate | the nozzles. The plate | required | patent applications | |
has a post for every | Moving parts are | |||
nozzle. A post moves | required | |||
through each nozzle, | There is risk of | |||
displacing dried ink, | damage to the | |||
nozzles | ||||
Accurate fabrication is | ||||
required | ||||
Ink | The pressure of the ink | May be effective | Requires pressure | May be used with all |
pressure | is temporarily | where other | pump or other | IJ series ink jets |
pulse | increased so that ink | methods cannot be | pressure actuator | |
streams from all of the | used | Expensive | ||
nozzles. This may be | Wasteful of ink | |||
used in conjunction | ||||
with actuator | ||||
energizing. | ||||
Print head | A flexible ‘blade’ is | Effective for planar | Difficult to use if print | Many ink jet systems |
wiper | wiped across the print | print head surfaces | head surface is non- | |
head surface. The | Low cost | planar or very | ||
blade is usually | fragile | |||
fabricated from a | Requires mechanical | |||
flexible polymer, e.g. | parts | |||
rubber or synthetic | Blade can wear out in | |||
elastomer. | high volume print | |||
systems | ||||
Separate | A separate heater is | Can be effective | Fabrication | Can be used with |
ink boiling | provided at the nozzle | where other nozzle | complexity | many IJ series ink |
heater | although the normal | clearing methods | jets | |
drop e-ection | cannot be used | |||
mechanism does not | Can be implemented | |||
require it. The heaters | at no additional cost | |||
do not require | in some ink jet | |||
individual drive | configurations | |||
circuits, as many | ||||
nozzles can be cleared | ||||
simultaneously, and no | ||||
imaging is required. | ||||
NOZZLE PLATE CONSTRUCTION |
Description | Advantages | Disadvantages | Examples | ||
Electroformed | A nozzle plate is | Fabrication simplicity | High temperatures and | Hewlett Packard |
nickel | separately fabricated | pressures are | Thermal Ink jet | |
from electroformed | required to bond | |||
nickel, and bonded to | nozzle plate | |||
the print head chip. | Minimum thickness | |||
constraints | ||||
Differential thermal | ||||
expansion | ||||
Laser | Individual nozzle | No masks required | Each hole must be | Canon Bubblejet |
ablated or | holes are ablated by an | Can be quite fast | individually formed | 1988 Sercel et al., |
drilled | intense UV laser in a | Some control over | Special equipment | SPIE, Vol. 998 |
polymer | nozzle plate, which is | nozzle profile is | required | Excimer Beam |
typically a polymer | possible | Slow where there are | Applications, pp. | |
such as polyimide or | Equipment required is | many thousands of | 76-83 | |
polysulphone | relatively low cost | nozzles per print | 1993 Watanabe et al., | |
head | U.S. Pat. No. 5,208,604 | |||
May produce thin | ||||
burrs at exit holes | ||||
Silicon | A separate nozzle | High accuracy is | Two part construction | K. Bean, IEEE |
micromachined | plate is | attainable | High cost | Transactions on |
micromachined from | Requires precision | Electron Devices, | ||
single crystal silicon, | alignment | Vol. ED-25, No. 10, | ||
and bonded to the | Nozzles may be | 1978, pp 1185-1195 | ||
print head wafer. | clogged by adhesive | Xerox 1990 Hawkins | ||
et al., U.S. Pat. No. | ||||
4,899,181 | ||||
Glass | Fine glass capillaries | No expensive | Very small nozzle | 1970 Zoltan U.S. Pat. No. |
capillaries | are drawn from glass | equipment required | sizes are difficult to | 3,683,212 |
tubing. This method | Simple to make single | form | ||
has been used for | nozzles | Not suited for mass | ||
making individual | production | |||
nozzles, but is difficult | ||||
to use for bulk | ||||
manufacturing of print | ||||
heads with thousands | ||||
of nozzles. | ||||
Monolithic, | The nozzle plate is | High accuracy (<1 μm) | Requires sacrificial | Silverbrook, EP 0771 |
surface | deposited as a layer | Monolithic | layer under the | 658 A2 and related |
micromachined | using standard VLSI | Low cost | nozzle plate to form | patent applications |
using VLSI | deposition techniques. | Existing processes can | the nozzle chamber | IJ01, IJ02, IJ04, IJ11, |
lithographic | Nozzles are etched in | be used | Surface may be fragile | IJ12, IJ17, IJ18, |
processes | the nozzle plate using | to the touch | IJ20, IJ22, IJ24, | |
VLSI lithography and | IJ27, IJ28, IJ29, | |||
etching. | IJ30, IJ31, IJ32, | |||
IJ33, IJ34, IJ36, | ||||
IJ37, IJ38, IJ39, | ||||
IJ40, IJ41, IJ42, | ||||
IJ43, IJ44 | ||||
Monolithic, | The nozzle plate is a | High accuracy (<1 μm) | Requires long etch | IJ03, IJ05, IJ06, IJ07, |
etched | buried etch stop in the | Monolithic | times | IJ08, IJ09, IJ10, |
through | wafer. Nozzle | Low cost | Requires a support | IJ13, IJ14, IJ15, |
substrate | chambers are etched in | No differential | wafer | IJ16, IJ19, IJ21, |
the front of the wafer, | expansion | IJ23, IJ25, IJ26 | ||
and the wafer is | ||||
thinned from the back | ||||
side. Nozzles are then | ||||
etched in the etch stop | ||||
layer. | ||||
No nozzle | Various methods have | No nozzles to become | Difficult to control | Ricoh 1995 Sekiya et |
plate | been tried to eliminate | clogged | drop position | al U.S. Pat. No. 5,412,413 |
the nozzles entirely, to | accurately | 1993 Hadimioglu et al | ||
prevent nozzle | Crosstalk problems | EUP 550,192 | ||
clogging. These | 1993 Elrod et al EUP | |||
include thermal bubble | 572,220 | |||
mechanisms and | ||||
acoustic lens | ||||
mechanisms | ||||
Trough | Each drop ejector has | Reduced | Drop firing direction | IJ35 |
a trough through | manufacturing | is sensitive to | ||
which a paddle moves. | complexity | wicking. | ||
There is no nozzle | Monolithic | |||
plate. | ||||
Nozzle slit | The elimination of | No nozzles to become | Difficult to control | 1989 Saito et al U.S. Pat. No. |
instead of | nozzle holes and | clogged | drop position | 4,799,068 |
individual | replacement by a slit | accurately | ||
nozzles | encompassing many | Crosstalk problems | ||
actuator positions | ||||
reduces nozzle | ||||
clogging, but increases | ||||
crosstalk due to ink | ||||
surface waves | ||||
DROP EJECTION DIRECTION |
Description | Advantages | Disadvantages | Examples | ||
Edge | Ink flow is along the | Simple construction | Nozzles limited to | Canon Bubblejet 1979 |
(‘edge | surface of the chip, | No silicon etching | edge | Endo et al GB |
shooter’) | and ink drops are | required | High resolution is | patent 2,007,162 |
ejected from the chip | Good heat sinking via | difficult | Xerox heater-in-pit | |
edge. | substrate | Fast color printing | 1990 Hawkins et al | |
Mechanically strong | requires one print | U.S. Pat. No. 4,899,181 | ||
Ease of chip handing | head per color | Tone-jet | ||
Surface | Ink flow is along the | No bulk silicon | Maximum ink flow is | Hewlett-Packard TIJ |
(‘roof | surface of the chip, | etching required | severely restricted | 1982 Vaught et al |
shooter’) | and ink drops are | Silicon can make an | U.S. Pat. No. 4,490,728 | |
ejected from the chip | effective heat sink | IJ02, IJ11, IJ12, IJ20, | ||
surface, normal to the | Mechanical strength | IJ22 | ||
plane of the chip. | ||||
Through | Ink flow is through the | High ink flow | Requires bulk silicon | Silverbrook, EP 0771 |
chip, | chip, and ink drops are | Suitable for pagewidth | etching | 658 A2 and related |
forward | ejected from the front | print heads | patent applications | |
(‘up | surface of the chip. | High nozzle packing | IJ04, IJ17, IJ18, IJ24, | |
shooter’) | density therefore | IJ27-IJ45 | ||
low manufacturing | ||||
cost | ||||
Through | Ink flow is through the | High ink flow | Requires wafer | IJ01, IJ03, IJ05, IJ06, |
chip, | chip, and ink drops are | Suitable for pagewidth | thinning | IJ07, IJ08, IJ09, |
reverse | ejected from the rear | print heads | Requires special | IJ10, IJ13, IJ14, |
(‘down | surface of the chip. | High nozzle packing | handling during | IJ15, IJ16, IJ19, |
shooter’) | density therefore | manufacture | IJ21, IJ23, IJ25, | |
low manufacturing | IJ26 | |||
cost | ||||
Through | Ink flow is through the | Suitable for | Pagewidth print heads | Epson Stylus |
actuator | actuator, which is not | piezoelectric print | require several | Tektronix hot melt |
fabricated as part of | heads | thousand | piezoelectric ink jets | |
the same substrate as | connections to drive | |||
the drive transistors. | circuits | |||
Cannot be | ||||
manufactured in | ||||
standard CMOS | ||||
fabs | ||||
Complex assembly | ||||
required | ||||
INK TYPE |
Description | Advantages | Disadvantages | Examples | ||
Aqueous, | Water based ink which | Environmentally | Slow drying | Most existing ink jets |
dye | typically contains: | friendly | Corrosive | All IJ series ink jets |
water, dye, surfactant, | No odor | Bleeds on paper | Silverbrook, EP 0771 | |
humectant, and | May strikethrough | 658 A2 and related | ||
biocide. | Cockles paper | patent applications | ||
Modern ink dyes have | ||||
high water-fastness, | ||||
light fastness | ||||
Aqueous, | Water based ink which | Environmentally | Slow drying | IJ02, IJ04, IJ21, IJ26, |
pigment | typically contains: | friendly | Corrosive | IJ27, IJ30 |
water, pigment, | No odor | Pigment may clog | Silverbrook, EP 0771 | |
surfactant, humectant, | Reduced bleed | nozzles | 658 A2 and related | |
and biocide. | Reduced wicking | Pigment may clog | patent applications | |
Pigments have an | Reduced strikethrough | actuator | Piezoelectric ink-jets | |
advantage in reduced | mechanisms | Thermal ink jets (with | ||
bleed, wicking and | Cockles paper | significant | ||
strikethrough. | restrictions) | |||
Methyl | MEK is a highly | Very fast drying | Odorous | All IJ series ink jets |
Ethyl | volatile solvent used | Prints on various | Flammable | |
Ketone | for industrial printing | substrates such as | ||
(MEK) | on difficult surfaces | metals and plastics | ||
such as aluminum | ||||
cans. | ||||
Alcohol | Alcohol based inks | Fast drying | Slight odor | All IJ series ink jets |
(ethanol, 2- | can be used where the | Operates at sub- | Flammable | |
butanol, | printer must operate at | freezing | ||
and others) | temperatures below | temperatures | ||
the freezing point of | Reduced paper cockle | |||
water. An example of | Low cost | |||
this is in-camera | ||||
consumer | ||||
photographic printing. | ||||
Phase | The ink is solid at | No drying time- ink | High viscosity | Tektronix hot melt |
change | room temperature, and | instantly freezes on | Printed ink typically | piezoelectric ink jets |
(hot melt) | is melted in the print | the print medium | has a ‘waxy’ feel | 1989 Nowak U.S. Pat. No. |
head before jetting. | Almost any print | Printed pages may | 4,820,346 | |
Hot melt inks are | medium can be used | ‘block’ | All IJ series ink jets | |
usually wax based, | No paper cockle | Ink temperature may | ||
with a melting point | occurs | be above the curie | ||
around 80° C. After | No wicking occurs | point of permanent | ||
jetting the ink freezes | No bleed occurs | magnets | ||
almost instantly upon | No strikethrough | Ink heaters consume | ||
contacting the print | occurs | power | ||
medium or a transfer | Long warm-up time | |||
roller. | ||||
Oil | Oil based inks are | High solubility | High viscosity: this is | All IJ series ink jets |
extensively used in | medium for some | a significant | ||
offset printing. They | dyes | limitation for use in | ||
have advantages in | Does not cockle paper | ink jets, which | ||
improved | Does not wick through | usually require a | ||
characteristics on | paper | low viscosity. Some | ||
paper (especially no | short chain and | |||
wicking or cockle). | multi-branched oils | |||
Oil soluble dies and | have a sufficiently | |||
pigments are required. | low viscosity. | |||
Slow drying | ||||
Micro- | A microemulsion is a | Stops ink bleed | Viscosity higher than | All IJ series ink jets |
emulsion | stable, self forming | High dye solubility | water | |
emulsion of oil, water, | Water, oil, and | Cost is slightly higher | ||
and surfactant. The | amphiphilic soluble | than water based ink | ||
characteristic drop size | dies can be used | High surfactant | ||
is less than 100 nm, | Can stabilize pigment | concentration | ||
and is determined by | suspensions | required (around | ||
the |
5%) | |||
of the surfactant. | ||||
Claims (14)
Priority Applications (2)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US10/804,057 US7511744B2 (en) | 1997-07-15 | 2004-03-19 | Portable camera with inbuilt printer device |
US12/276,370 US8068151B2 (en) | 1997-07-15 | 2008-11-23 | Digital camera with card reader for reading program script |
Applications Claiming Priority (7)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
AUPO7991A AUPO799197A0 (en) | 1997-07-15 | 1997-07-15 | Image processing method and apparatus (ART01) |
AUPO7991 | 1997-07-15 | ||
AUPO7987 | 1997-07-15 | ||
AUPO7987A AUPO798797A0 (en) | 1997-07-15 | 1997-07-15 | Data processing method and apparatus (ART32) |
US09/113,071 US7050143B1 (en) | 1998-07-10 | 1998-07-10 | Camera system with computer language interpreter |
US10/291,476 US6750944B2 (en) | 1997-07-15 | 2002-11-12 | Programmable camera system with software interpreter |
US10/804,057 US7511744B2 (en) | 1997-07-15 | 2004-03-19 | Portable camera with inbuilt printer device |
Related Parent Applications (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
US10/291,476 Continuation US6750944B2 (en) | 1997-07-15 | 2002-11-12 | Programmable camera system with software interpreter |
Related Child Applications (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
US12/276,370 Continuation US8068151B2 (en) | 1997-07-15 | 2008-11-23 | Digital camera with card reader for reading program script |
Publications (2)
Publication Number | Publication Date |
---|---|
US20050122399A1 US20050122399A1 (en) | 2005-06-09 |
US7511744B2 true US7511744B2 (en) | 2009-03-31 |
Family
ID=36423853
Family Applications (6)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
US09/113,071 Expired - Fee Related US7050143B1 (en) | 1997-07-15 | 1998-07-10 | Camera system with computer language interpreter |
US10/291,476 Expired - Fee Related US6750944B2 (en) | 1997-07-15 | 2002-11-12 | Programmable camera system with software interpreter |
US10/804,057 Expired - Lifetime US7511744B2 (en) | 1997-07-15 | 2004-03-19 | Portable camera with inbuilt printer device |
US11/239,232 Expired - Fee Related US7559472B2 (en) | 1997-07-15 | 2005-09-30 | User interface for an image transformation device |
US12/276,370 Expired - Fee Related US8068151B2 (en) | 1997-07-15 | 2008-11-23 | Digital camera with card reader for reading program script |
US12/457,725 Expired - Fee Related US7931200B2 (en) | 1997-07-15 | 2009-06-19 | Image transformation device |
Family Applications Before (2)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
US09/113,071 Expired - Fee Related US7050143B1 (en) | 1997-07-15 | 1998-07-10 | Camera system with computer language interpreter |
US10/291,476 Expired - Fee Related US6750944B2 (en) | 1997-07-15 | 2002-11-12 | Programmable camera system with software interpreter |
Family Applications After (3)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
US11/239,232 Expired - Fee Related US7559472B2 (en) | 1997-07-15 | 2005-09-30 | User interface for an image transformation device |
US12/276,370 Expired - Fee Related US8068151B2 (en) | 1997-07-15 | 2008-11-23 | Digital camera with card reader for reading program script |
US12/457,725 Expired - Fee Related US7931200B2 (en) | 1997-07-15 | 2009-06-19 | Image transformation device |
Country Status (1)
Country | Link |
---|---|
US (6) | US7050143B1 (en) |
Cited By (5)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US7934494B1 (en) * | 2003-10-10 | 2011-05-03 | Donna Gail Schneider | Collapsible heating apparatus |
US20120197961A1 (en) * | 2007-04-13 | 2012-08-02 | Platform Computing Corporation | Method and system for information exchange utilizing an asynchronous persistent store protocol |
US20160306010A1 (en) * | 2015-04-17 | 2016-10-20 | Shanghai Huahong Grace Semiconductor Manufacturing Corporation | Built-in self-test circuit |
US9767284B2 (en) | 2012-09-14 | 2017-09-19 | The Research Foundation For The State University Of New York | Continuous run-time validation of program execution: a practical approach |
US9767271B2 (en) | 2010-07-15 | 2017-09-19 | The Research Foundation For The State University Of New York | System and method for validating program execution at run-time |
Families Citing this family (67)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US6786420B1 (en) | 1997-07-15 | 2004-09-07 | Silverbrook Research Pty. Ltd. | Data distribution mechanism in the form of ink dots on cards |
US5973734A (en) | 1997-07-09 | 1999-10-26 | Flashpoint Technology, Inc. | Method and apparatus for correcting aspect ratio in a camera graphical user interface |
US6803989B2 (en) * | 1997-07-15 | 2004-10-12 | Silverbrook Research Pty Ltd | Image printing apparatus including a microcontroller |
US6618117B2 (en) | 1997-07-12 | 2003-09-09 | Silverbrook Research Pty Ltd | Image sensing apparatus including a microcontroller |
US6702417B2 (en) | 1997-07-12 | 2004-03-09 | Silverbrook Research Pty Ltd | Printing cartridge with capacitive sensor identification |
US6547364B2 (en) | 1997-07-12 | 2003-04-15 | Silverbrook Research Pty Ltd | Printing cartridge with an integrated circuit device |
AUPO850597A0 (en) | 1997-08-11 | 1997-09-04 | Silverbrook Research Pty Ltd | Image processing method and apparatus (art01a) |
US6690419B1 (en) | 1997-07-15 | 2004-02-10 | Silverbrook Research Pty Ltd | Utilising eye detection methods for image processing in a digital image camera |
AUPO801997A0 (en) * | 1997-07-15 | 1997-08-07 | Silverbrook Research Pty Ltd | Media processing method and apparatus (ART21) |
US6820968B2 (en) * | 1997-07-15 | 2004-11-23 | Silverbrook Research Pty Ltd | Fluid-dispensing chip |
US7050143B1 (en) * | 1998-07-10 | 2006-05-23 | Silverbrook Research Pty Ltd | Camera system with computer language interpreter |
US6985207B2 (en) * | 1997-07-15 | 2006-01-10 | Silverbrook Research Pty Ltd | Photographic prints having magnetically recordable media |
US6879341B1 (en) | 1997-07-15 | 2005-04-12 | Silverbrook Research Pty Ltd | Digital camera system containing a VLIW vector processor |
US7724282B2 (en) | 1997-07-15 | 2010-05-25 | Silverbrook Research Pty Ltd | Method of processing digital image to correct for flash effects |
US7110024B1 (en) | 1997-07-15 | 2006-09-19 | Silverbrook Research Pty Ltd | Digital camera system having motion deblurring means |
US6624848B1 (en) * | 1997-07-15 | 2003-09-23 | Silverbrook Research Pty Ltd | Cascading image modification using multiple digital cameras incorporating image processing |
AUPO797897A0 (en) * | 1997-07-15 | 1997-08-07 | Silverbrook Research Pty Ltd | Media device (ART18) |
AUPO802797A0 (en) * | 1997-07-15 | 1997-08-07 | Silverbrook Research Pty Ltd | Image processing method and apparatus (ART54) |
US7044589B2 (en) * | 1997-07-15 | 2006-05-16 | Silverbrook Res Pty Ltd | Printing cartridge with barcode identification |
AUPO798697A0 (en) * | 1997-07-15 | 1997-08-07 | Silverbrook Research Pty Ltd | Data processing method and apparatus (ART51) |
US6948794B2 (en) | 1997-07-15 | 2005-09-27 | Silverbrook Reserach Pty Ltd | Printhead re-capping assembly for a print and demand digital camera system |
AUPP702098A0 (en) | 1998-11-09 | 1998-12-03 | Silverbrook Research Pty Ltd | Image creation method and apparatus (ART73) |
AUPP701798A0 (en) * | 1998-11-09 | 1998-12-03 | Silverbrook Research Pty Ltd | Image creation method and apparatus (ART75) |
US6317141B1 (en) | 1998-12-31 | 2001-11-13 | Flashpoint Technology, Inc. | Method and apparatus for editing heterogeneous media objects in a digital imaging device |
AUPQ056099A0 (en) * | 1999-05-25 | 1999-06-17 | Silverbrook Research Pty Ltd | A method and apparatus (pprint01) |
US7370348B1 (en) * | 1999-07-30 | 2008-05-06 | Intel Corporation | Technique and apparatus for processing cryptographic services of data in a network system |
US7937665B1 (en) | 2000-06-13 | 2011-05-03 | National Instruments Corporation | System and method for automatically generating a graphical program to implement a prototype |
US8640027B2 (en) * | 2000-06-13 | 2014-01-28 | National Instruments Corporation | System and method for configuring a hardware device to execute a prototype |
GB2370709A (en) * | 2000-12-28 | 2002-07-03 | Nokia Mobile Phones Ltd | Displaying an image and associated visual effect |
US6959865B2 (en) | 2002-03-28 | 2005-11-01 | Hand Held Products, Inc. | Customizable optical reader |
US7139916B2 (en) * | 2002-06-28 | 2006-11-21 | Ebay, Inc. | Method and system for monitoring user interaction with a computer |
US20040093432A1 (en) * | 2002-11-07 | 2004-05-13 | Eastman Kodak Company | Method and system for conducting image processing from a mobile client device |
US20050140675A1 (en) * | 2003-08-06 | 2005-06-30 | Billingsley Eric N. | Method and system to generate an image for monitoring user interaction with a computer |
US8205154B2 (en) * | 2004-04-16 | 2012-06-19 | Apple Inc. | User definable transition tool |
US7409109B2 (en) * | 2004-06-16 | 2008-08-05 | Seiko Epson Corporation | Apparatuses and methods for incorporating a border within an image by defining a portion of the border |
JP2006080987A (en) * | 2004-09-10 | 2006-03-23 | Victor Co Of Japan Ltd | Information processor |
JP2006140601A (en) * | 2004-11-10 | 2006-06-01 | Canon Inc | Image processor and its control method |
JP2008522167A (en) * | 2004-12-02 | 2008-06-26 | ワールドウォッチ プロプライエタリー リミテッド | Navigation method |
DE102005022019A1 (en) * | 2005-05-12 | 2007-02-01 | Giesecke & Devrient Gmbh | Secure processing of data |
US7809156B2 (en) * | 2005-08-12 | 2010-10-05 | Ricoh Company, Ltd. | Techniques for generating and using a fingerprint for an article |
US7330604B2 (en) | 2006-03-02 | 2008-02-12 | Compulink Management Center, Inc. | Model-based dewarping method and apparatus |
US9525547B2 (en) * | 2006-03-31 | 2016-12-20 | Ricoh Company, Ltd. | Transmission of media keys |
US8689102B2 (en) * | 2006-03-31 | 2014-04-01 | Ricoh Company, Ltd. | User interface for creating and using media keys |
US8554690B2 (en) * | 2006-03-31 | 2013-10-08 | Ricoh Company, Ltd. | Techniques for using media keys |
US20070229678A1 (en) * | 2006-03-31 | 2007-10-04 | Ricoh Company, Ltd. | Camera for generating and sharing media keys |
US20070233612A1 (en) * | 2006-03-31 | 2007-10-04 | Ricoh Company, Ltd. | Techniques for generating a media key |
US9224145B1 (en) | 2006-08-30 | 2015-12-29 | Qurio Holdings, Inc. | Venue based digital rights using capture device with digital watermarking capability |
TWI320913B (en) * | 2006-08-30 | 2010-02-21 | Via Tech Inc | Methods, systems and computer-readable storage medium for shading process compiling of 3d computer graphics |
US8631467B2 (en) * | 2006-09-01 | 2014-01-14 | Ebay Inc. | Contextual visual challenge image for user verification |
JP2008118216A (en) * | 2006-10-31 | 2008-05-22 | Brother Ind Ltd | Image processor and image processing program |
US8300591B1 (en) | 2006-12-08 | 2012-10-30 | Apple Inc. | Allocating resources in a frequency-time space to mobile station data |
US20080170828A1 (en) * | 2007-01-12 | 2008-07-17 | Robert Bruce Elkins | Indoor cable assemblies with flexible network access point |
US20080243702A1 (en) * | 2007-03-30 | 2008-10-02 | Ricoh Company, Ltd. | Tokens Usable in Value-Based Transactions |
US8756673B2 (en) | 2007-03-30 | 2014-06-17 | Ricoh Company, Ltd. | Techniques for sharing data |
JP2009082609A (en) * | 2007-10-02 | 2009-04-23 | Koninkl Philips Electronics Nv | Magnetic resonance imaging apparatus, imaging method and imaging program |
US8631503B2 (en) | 2007-10-03 | 2014-01-14 | Ebay Inc. | System and methods for key challenge validation |
US8174620B2 (en) * | 2007-11-06 | 2012-05-08 | Microsoft Corporation | High definition media content processing |
CN101441587B (en) * | 2007-11-19 | 2011-05-18 | 辉达公司 | Method and system for automatically analyzing GPU test result |
US8175403B1 (en) * | 2008-06-05 | 2012-05-08 | Google Inc. | Iterative backward reference selection with reduced entropy for image compression |
US8184176B2 (en) * | 2009-12-09 | 2012-05-22 | International Business Machines Corporation | Digital camera blending and clashing color warning system |
US8879639B2 (en) | 2011-01-31 | 2014-11-04 | Hand Held Products, Inc. | Adaptive video capture decode system |
EP2544446A1 (en) | 2011-07-05 | 2013-01-09 | DCS Copy Protection Limited | Copy protection system |
US8608071B2 (en) | 2011-10-17 | 2013-12-17 | Honeywell Scanning And Mobility | Optical indicia reading terminal with two image sensors |
US9336618B1 (en) | 2012-11-02 | 2016-05-10 | Kabam, Inc. | Stochastic chunk-based map generation |
US10186061B1 (en) * | 2013-01-11 | 2019-01-22 | Electronic Arts Inc. | Proximate-tile-type-based map generation |
EP4078451A1 (en) * | 2019-12-17 | 2022-10-26 | Sicpa Holding SA | Method and device for reading a two-dimensional encoded pattern applied on a non-uniform background |
TWI789012B (en) | 2021-09-14 | 2023-01-01 | 明俐科技有限公司 | Method and device of calibrating real-time image through dithering process |
Citations (20)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US4868676A (en) | 1986-03-19 | 1989-09-19 | Shapr Kabushiki Kaisha | Manual copying apparatus |
US4914452A (en) | 1987-05-08 | 1990-04-03 | Ricoh Company, Ltd. | Ink sheet/recording paper cassette |
US4937676A (en) | 1989-02-10 | 1990-06-26 | Polariod Corporation | Electronic camera system with detachable printer |
EP0398295A2 (en) | 1989-05-17 | 1990-11-22 | Minolta Co., Ltd. | A camera capable of recording and reproducing a photographed image |
US5184169A (en) | 1990-04-19 | 1993-02-02 | Fuji Photo Film Co., Ltd. | Photography mode input systems |
JPH06149051A (en) | 1992-11-08 | 1994-05-27 | Ricoh Co Ltd | Developer container, processing cartridge, judgement device for recycling of such container or cartridge and image forming device |
US5398131A (en) | 1992-08-13 | 1995-03-14 | Hall; Dennis R. | Stereoscopic hardcopy methods |
WO1995016323A1 (en) | 1993-12-07 | 1995-06-15 | Fisher-Price, Inc. | Instant special effects electronic camera |
US5552837A (en) | 1995-03-01 | 1996-09-03 | Gemstar Development Corporation | Remote controller for scanning data and controlling a video system |
WO1996032265A1 (en) | 1995-04-12 | 1996-10-17 | Eastman Kodak Company | A color video printer and a photocd system with integrated printer |
WO1997006958A1 (en) | 1995-08-18 | 1997-02-27 | Fisher-Price, Inc. | Improved printer assembly with easily loaded paper cartridge |
JPH0971015A (en) | 1995-09-05 | 1997-03-18 | Ricoh Co Ltd | Recording device and image communication device |
EP0763930A1 (en) | 1995-09-15 | 1997-03-19 | Agfa-Gevaert N.V. | Method and apparatus for calculating color gamuts |
JPH09116843A (en) | 1995-10-20 | 1997-05-02 | Canon Inc | Image pickup device with printer |
JPH09187040A (en) | 1995-12-28 | 1997-07-15 | Fuji Photo Optical Co Ltd | Driver for zoom lens |
US5748228A (en) * | 1994-05-27 | 1998-05-05 | Fuji Xerox Co., Ltd. | Image information enlarging reading device |
US5757388A (en) | 1996-12-16 | 1998-05-26 | Eastman Kodak Company | Electronic camera and integral ink jet printer |
US5999697A (en) | 1995-07-21 | 1999-12-07 | Sony Corporation | Apparatus for recording and/or reproducing still images |
US6006039A (en) | 1996-02-13 | 1999-12-21 | Fotonation, Inc. | Method and apparatus for configuring a camera through external means |
US6304291B1 (en) | 1997-07-15 | 2001-10-16 | Silverbrook Research Pty Ltd | Artcard for the administration of the operation of a camera device |
Family Cites Families (83)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US3748939A (en) * | 1971-08-11 | 1973-07-31 | Borden Inc | Traversing film cutter |
US4000239A (en) | 1971-12-13 | 1976-12-28 | Teijin Limited | Process for spinning naphthalate polyester fibers |
OA04528A (en) * | 1972-04-27 | 1980-03-30 | Granger Maurice | Device for the simultaneous distribution and cutting of coiled material bands. |
JPS595273B2 (en) * | 1974-03-08 | 1984-02-03 | サトウ シゲオ | An inexpensive mouthpiece that completely precipitates and cools smoke impurities in the holes and spaces, making the cigarette sweet and enjoyable. |
DE3024672A1 (en) * | 1980-06-30 | 1982-01-28 | Jens Ing.(grad.) 6458 Rodenbach Drefahl | ROOF COVER |
US4494862A (en) * | 1980-09-30 | 1985-01-22 | Minolta Camera Kabushiki Kaisha | Computerized information processing system equipped with copying apparatus |
US4488563A (en) | 1982-04-29 | 1984-12-18 | Mitsubishi Acetate Co., Ltd. | Filter plug |
US4783823A (en) * | 1985-09-16 | 1988-11-08 | Omron Tateisi Electronics, Co. | Card identifying method and apparatus |
EP0227207B1 (en) * | 1985-12-26 | 1992-12-23 | SHIMIZU CONSTRUCTION Co. LTD. | Concrete reinforcing unit |
US4845770A (en) * | 1986-11-20 | 1989-07-04 | Oki Electric Industry Co., Ltd. | Method and apparatus for processing embossed card |
US4791443A (en) * | 1987-06-12 | 1988-12-13 | Eastman Kodak Company | Photographic processor with auxiliary power supply |
JPH07118755B2 (en) * | 1987-08-19 | 1995-12-18 | 株式会社日立製作所 | Mail system |
US4987030A (en) * | 1987-10-07 | 1991-01-22 | Toray Industries, Inc. | High-tenacity conjugated fiber and process for preparation thereof |
US4975969A (en) | 1987-10-22 | 1990-12-04 | Peter Tal | Method and apparatus for uniquely identifying individuals by particular physical characteristics and security system utilizing the same |
NL8800053A (en) * | 1988-01-11 | 1989-08-01 | Philips Nv | VIDEO PROCESSOR SYSTEM, IMAGE SYSTEM AND IMAGE STORAGE SYSTEM, PROVIDED WITH SUCH A VIDEO PROCESSOR SYSTEM. |
US4902880A (en) * | 1988-09-30 | 1990-02-20 | Peripheral Dynamics, Inc. | Card reader system and method with printing and verification capability |
US6070003A (en) * | 1989-11-17 | 2000-05-30 | Texas Instruments Incorporated | System and method of memory access in apparatus having plural processors and plural memories |
JPH03261276A (en) * | 1990-03-12 | 1991-11-21 | Seiko Epson Corp | Print camera |
JP3093781B2 (en) * | 1990-11-09 | 2000-10-03 | オリンパス光学工業株式会社 | Focus position detection device |
US5493409A (en) * | 1990-11-29 | 1996-02-20 | Minolta Camera Kabushiki Kaisha | Still video camera having a printer capable of printing a photographed image in a plurality of printing modes |
JP2990306B2 (en) * | 1991-05-14 | 1999-12-13 | 富士ゼロックス株式会社 | Marker dot detection method for color image recording device |
JPH04358291A (en) * | 1991-06-04 | 1992-12-11 | Hitachi Ltd | Color image changing method |
US5463470A (en) * | 1991-10-09 | 1995-10-31 | Fuji Photo Film Co., Ltd. | Methods of collecting photometric image data and determining light exposure by extracting feature image data from an original image |
US5581773A (en) | 1992-05-12 | 1996-12-03 | Glover; Michael A. | Massively parallel SIMD processor which selectively transfers individual contiguously disposed serial memory elements |
US5604537A (en) * | 1992-09-10 | 1997-02-18 | Canon Kabushiki Kaisha | Imaging apparatus having an automatic focusing means |
FR2698195B1 (en) | 1992-11-19 | 1994-12-16 | Gemplus Card Int | Encryption and authentication method and circuit for synchronous memory card. |
US5398315A (en) * | 1992-12-30 | 1995-03-14 | North American Philips Corporation | Multi-processor video display apparatus |
JP3686684B2 (en) * | 1993-05-19 | 2005-08-24 | 富士通株式会社 | Airbrush method |
GB2278480A (en) * | 1993-05-25 | 1994-11-30 | Sharp Kk | Optical apparatus |
KR950003362A (en) * | 1993-07-21 | 1995-02-16 | 마에다 가츠노스케 | Fiber Reinforced Thermoplastic Structures, Manufacturing Method and Extruder |
JPH07123317A (en) * | 1993-10-21 | 1995-05-12 | Canon Inc | Photographing device with vibration proofing function |
US6116768A (en) * | 1993-11-30 | 2000-09-12 | Texas Instruments Incorporated | Three input arithmetic logic unit with barrel rotator |
US5748326A (en) * | 1993-12-07 | 1998-05-05 | Fisher-Price Inc. | Instant special effects electronic camera |
US5621545A (en) * | 1993-12-08 | 1997-04-15 | Motta; Ricardo J. | Image production using color error diffusion |
US5726435A (en) * | 1994-03-14 | 1998-03-10 | Nippondenso Co., Ltd. | Optically readable two-dimensional code and method and apparatus using the same |
JPH08186757A (en) * | 1994-12-28 | 1996-07-16 | Canon Inc | Electronic camera |
US5642226A (en) * | 1995-01-18 | 1997-06-24 | Rosenthal; Bruce A. | Lenticular optical system |
JP3542397B2 (en) * | 1995-03-20 | 2004-07-14 | キヤノン株式会社 | Imaging device |
US5768482A (en) * | 1995-06-14 | 1998-06-16 | Hewlett-Packard Company | Resolution-triggered sharpening for scaling of a digital-matrix image |
US5847836A (en) * | 1995-08-29 | 1998-12-08 | Canon Kabushiki Kaisha | Printer-built-in image-sensing apparatus and using strobe-light means electric-consumption control method thereof |
US5613175A (en) * | 1995-08-31 | 1997-03-18 | Xerox Corporation | Anisotropic imaging member |
JP3313952B2 (en) * | 1995-09-14 | 2002-08-12 | キヤノン株式会社 | Ink jet recording device |
US5917963A (en) * | 1995-09-21 | 1999-06-29 | Canon Kabushiki Kaisha | Image processing apparatus and image processing method |
US5745175A (en) * | 1995-10-02 | 1998-04-28 | Flashpoint Technologies, Inc. | Method and system for providing automatic focus control for a still digital camera |
US5634730A (en) * | 1995-11-06 | 1997-06-03 | Bobry; Howard H. | Hand-held electronic printer |
US6009188A (en) | 1996-02-16 | 1999-12-28 | Microsoft Corporation | Method and system for digital plenoptic imaging |
JP3423532B2 (en) * | 1996-05-24 | 2003-07-07 | キヤノン株式会社 | Image reading device |
US5852502A (en) | 1996-05-31 | 1998-12-22 | American Digital Imaging, Inc. | Apparatus and method for digital camera and recorder having a high resolution color composite image output |
US5969322A (en) * | 1996-07-29 | 1999-10-19 | Minolta Co., Ltd. | Apparatus having a film condition judging device |
US5866253A (en) * | 1996-08-19 | 1999-02-02 | Isorca, Inc. | Synthetic reinforcing strands with spaced filaments |
US5954254A (en) * | 1996-10-02 | 1999-09-21 | Maeng; Seop | Carrier belt for golf bag |
JP3031613B2 (en) * | 1996-11-12 | 2000-04-10 | 株式会社つくばソフト研究所 | Color / shade image input / output device and input / output method |
US6573927B2 (en) * | 1997-02-20 | 2003-06-03 | Eastman Kodak Company | Electronic still camera for capturing digital image and creating a print order |
US5894309A (en) * | 1997-02-27 | 1999-04-13 | Mitsubishi Electric Information Technology Center America, Inc. | System for modifying lighting in photographs |
US6421050B1 (en) * | 1997-02-27 | 2002-07-16 | Mitsubishi Electric Research Laboratories, Inc. | User interface for creation of image generation and transformation functions |
AUPO799197A0 (en) * | 1997-07-15 | 1997-08-07 | Silverbrook Research Pty Ltd | Image processing method and apparatus (ART01) |
US6803989B2 (en) * | 1997-07-15 | 2004-10-12 | Silverbrook Research Pty Ltd | Image printing apparatus including a microcontroller |
US6416154B1 (en) * | 1997-07-12 | 2002-07-09 | Silverbrook Research Pty Ltd | Printing cartridge with two dimensional code identification |
US6702417B2 (en) * | 1997-07-12 | 2004-03-09 | Silverbrook Research Pty Ltd | Printing cartridge with capacitive sensor identification |
US6565181B2 (en) * | 1997-07-12 | 2003-05-20 | Silverbrook Research Pty Ltd | Printing cartridge with switch array identification |
US6362868B1 (en) * | 1997-07-15 | 2002-03-26 | Silverbrook Research Pty Ltd. | Print media roll and ink replaceable cartridge |
AUPO802797A0 (en) * | 1997-07-15 | 1997-08-07 | Silverbrook Research Pty Ltd | Image processing method and apparatus (ART54) |
AUPO798697A0 (en) * | 1997-07-15 | 1997-08-07 | Silverbrook Research Pty Ltd | Data processing method and apparatus (ART51) |
US7246897B2 (en) * | 1997-07-15 | 2007-07-24 | Silverbrook Research Pty Ltd | Media cartridge for inkjet printhead |
US6665454B1 (en) | 1997-07-15 | 2003-12-16 | Silverbrook Research Pty Ltd | Dot adjacency compensation in optical storage systems using ink dots |
AUPP398798A0 (en) * | 1998-06-09 | 1998-07-02 | Silverbrook Research Pty Ltd | Image creation method and apparatus (ij43) |
US7110024B1 (en) * | 1997-07-15 | 2006-09-19 | Silverbrook Research Pty Ltd | Digital camera system having motion deblurring means |
US6217165B1 (en) * | 1997-07-15 | 2001-04-17 | Silverbrook Research Pty. Ltd. | Ink and media cartridge with axial ink chambers |
US7410243B2 (en) * | 1997-07-15 | 2008-08-12 | Silverbrook Research Pty Ltd | Inkjet nozzle with resiliently biased ejection actuator |
US6879341B1 (en) * | 1997-07-15 | 2005-04-12 | Silverbrook Research Pty Ltd | Digital camera system containing a VLIW vector processor |
US7050143B1 (en) * | 1998-07-10 | 2006-05-23 | Silverbrook Research Pty Ltd | Camera system with computer language interpreter |
US7284843B2 (en) * | 1997-07-15 | 2007-10-23 | Silverbrook Research Pty Ltd | Ink distribution assembly for an ink jet printhead |
US6985207B2 (en) * | 1997-07-15 | 2006-01-10 | Silverbrook Research Pty Ltd | Photographic prints having magnetically recordable media |
US6918654B2 (en) * | 1997-07-15 | 2005-07-19 | Silverbrook Research Pty Ltd | Ink distribution assembly for an ink jet printhead |
AUPO850097A0 (en) * | 1997-08-11 | 1997-09-04 | Silverbrook Research Pty Ltd | Image processing method and apparatus (art31) |
US7578582B2 (en) * | 1997-07-15 | 2009-08-25 | Silverbrook Research Pty Ltd | Inkjet nozzle chamber holding two fluids |
AUPO801997A0 (en) * | 1997-07-15 | 1997-08-07 | Silverbrook Research Pty Ltd | Media processing method and apparatus (ART21) |
US7077515B2 (en) * | 1997-07-15 | 2006-07-18 | Silverbrook Research Pty Ltd | Media cartridge for inkjet printhead |
AUPO850597A0 (en) * | 1997-08-11 | 1997-09-04 | Silverbrook Research Pty Ltd | Image processing method and apparatus (art01a) |
US6727948B1 (en) * | 1997-07-15 | 2004-04-27 | Silverbrook Research Pty Ltd | Utilizing autofocus information for image processing in a digital camera |
US6304684B1 (en) * | 2000-02-15 | 2001-10-16 | Cyberecord, Inc. | Information processing system and method of using same |
US6425661B1 (en) * | 2000-06-30 | 2002-07-30 | Silverbrook Research Pty Ltd | Ink cartridge |
JP2005193384A (en) * | 2003-12-26 | 2005-07-21 | Ricoh Co Ltd | Image processing method, apparatus, and image forming apparatus |
-
1998
- 1998-07-10 US US09/113,071 patent/US7050143B1/en not_active Expired - Fee Related
-
2002
- 2002-11-12 US US10/291,476 patent/US6750944B2/en not_active Expired - Fee Related
-
2004
- 2004-03-19 US US10/804,057 patent/US7511744B2/en not_active Expired - Lifetime
-
2005
- 2005-09-30 US US11/239,232 patent/US7559472B2/en not_active Expired - Fee Related
-
2008
- 2008-11-23 US US12/276,370 patent/US8068151B2/en not_active Expired - Fee Related
-
2009
- 2009-06-19 US US12/457,725 patent/US7931200B2/en not_active Expired - Fee Related
Patent Citations (21)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US4868676A (en) | 1986-03-19 | 1989-09-19 | Shapr Kabushiki Kaisha | Manual copying apparatus |
US4914452A (en) | 1987-05-08 | 1990-04-03 | Ricoh Company, Ltd. | Ink sheet/recording paper cassette |
US4937676A (en) | 1989-02-10 | 1990-06-26 | Polariod Corporation | Electronic camera system with detachable printer |
EP0382044A2 (en) | 1989-02-10 | 1990-08-16 | Polaroid Corporation | Electronic camera system with detachable printer |
EP0398295A2 (en) | 1989-05-17 | 1990-11-22 | Minolta Co., Ltd. | A camera capable of recording and reproducing a photographed image |
US5184169A (en) | 1990-04-19 | 1993-02-02 | Fuji Photo Film Co., Ltd. | Photography mode input systems |
US5398131A (en) | 1992-08-13 | 1995-03-14 | Hall; Dennis R. | Stereoscopic hardcopy methods |
JPH06149051A (en) | 1992-11-08 | 1994-05-27 | Ricoh Co Ltd | Developer container, processing cartridge, judgement device for recycling of such container or cartridge and image forming device |
WO1995016323A1 (en) | 1993-12-07 | 1995-06-15 | Fisher-Price, Inc. | Instant special effects electronic camera |
US5748228A (en) * | 1994-05-27 | 1998-05-05 | Fuji Xerox Co., Ltd. | Image information enlarging reading device |
US5552837A (en) | 1995-03-01 | 1996-09-03 | Gemstar Development Corporation | Remote controller for scanning data and controlling a video system |
WO1996032265A1 (en) | 1995-04-12 | 1996-10-17 | Eastman Kodak Company | A color video printer and a photocd system with integrated printer |
US5999697A (en) | 1995-07-21 | 1999-12-07 | Sony Corporation | Apparatus for recording and/or reproducing still images |
WO1997006958A1 (en) | 1995-08-18 | 1997-02-27 | Fisher-Price, Inc. | Improved printer assembly with easily loaded paper cartridge |
JPH0971015A (en) | 1995-09-05 | 1997-03-18 | Ricoh Co Ltd | Recording device and image communication device |
EP0763930A1 (en) | 1995-09-15 | 1997-03-19 | Agfa-Gevaert N.V. | Method and apparatus for calculating color gamuts |
JPH09116843A (en) | 1995-10-20 | 1997-05-02 | Canon Inc | Image pickup device with printer |
JPH09187040A (en) | 1995-12-28 | 1997-07-15 | Fuji Photo Optical Co Ltd | Driver for zoom lens |
US6006039A (en) | 1996-02-13 | 1999-12-21 | Fotonation, Inc. | Method and apparatus for configuring a camera through external means |
US5757388A (en) | 1996-12-16 | 1998-05-26 | Eastman Kodak Company | Electronic camera and integral ink jet printer |
US6304291B1 (en) | 1997-07-15 | 2001-10-16 | Silverbrook Research Pty Ltd | Artcard for the administration of the operation of a camera device |
Cited By (8)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US7934494B1 (en) * | 2003-10-10 | 2011-05-03 | Donna Gail Schneider | Collapsible heating apparatus |
US20120197961A1 (en) * | 2007-04-13 | 2012-08-02 | Platform Computing Corporation | Method and system for information exchange utilizing an asynchronous persistent store protocol |
US9407715B2 (en) * | 2007-04-13 | 2016-08-02 | International Business Machines Corporation | Method and system for information exchange utilizing an asynchronous persistent store protocol |
US9967360B2 (en) | 2007-04-13 | 2018-05-08 | International Business Machines Corporation | Method and system for information exchange utilizing an asynchronous persistent store protocol |
US9767271B2 (en) | 2010-07-15 | 2017-09-19 | The Research Foundation For The State University Of New York | System and method for validating program execution at run-time |
US9767284B2 (en) | 2012-09-14 | 2017-09-19 | The Research Foundation For The State University Of New York | Continuous run-time validation of program execution: a practical approach |
US20160306010A1 (en) * | 2015-04-17 | 2016-10-20 | Shanghai Huahong Grace Semiconductor Manufacturing Corporation | Built-in self-test circuit |
US9733309B2 (en) * | 2015-04-17 | 2017-08-15 | Shanghai Huahong Grace Semiconductor Manufacturing Corporation | Built-in self-test circuit |
Also Published As
Publication number | Publication date |
---|---|
US8068151B2 (en) | 2011-11-29 |
US20100170951A1 (en) | 2010-07-08 |
US6750944B2 (en) | 2004-06-15 |
US7050143B1 (en) | 2006-05-23 |
US20060056728A1 (en) | 2006-03-16 |
US20090244292A1 (en) | 2009-10-01 |
US7559472B2 (en) | 2009-07-14 |
US20050122399A1 (en) | 2005-06-09 |
US20040004698A1 (en) | 2004-01-08 |
US7931200B2 (en) | 2011-04-26 |
Similar Documents
Publication | Publication Date | Title |
---|---|---|
US7511744B2 (en) | Portable camera with inbuilt printer device | |
US7461931B2 (en) | Method and apparatus for protecting a print engine assembly from print media pulling | |
US7283162B2 (en) | Utilization of color transformation effects in photographs | |
US6442525B1 (en) | System for authenticating physical objects | |
US6459495B1 (en) | Dot center tracking in optical storage systems using ink dots | |
US6918542B2 (en) | Data distribution mechanism in the form of ink dots on cards | |
US6750901B1 (en) | Digital instant printing camera with image processing capability | |
US7289142B2 (en) | Monolithic integrated circuit having a number of programmable processing elements | |
US6636216B1 (en) | Digital image warping system | |
US6665454B1 (en) | Dot adjacency compensation in optical storage systems using ink dots | |
US6431669B1 (en) | Method and apparatus for information storage in a portable print roll | |
US6476863B1 (en) | Image transformation means including user interface | |
US6415054B1 (en) | Target detection for dot region alignment in optical storage systems using ink dots | |
US6542645B1 (en) | Adaptive tracking of dots in optical storage system using ink dots |
Legal Events
Date | Code | Title | Description |
---|---|---|---|
AS | Assignment |
Owner name: SILVERBROOK RESEARCH PTY. LTD., AUSTRALIAFree format text: ASSIGNMENT OF ASSIGNORS INTEREST;ASSIGNORS:SILVERBROOK, KIA;LAPSTUN, PAUL;REEL/FRAME:015120/0193Effective date: 20040304 |
|
STCF | Information on status: patent grant |
Free format text: PATENTED CASE |
|
FEPP | Fee payment procedure |
Free format text: PAT HOLDER NO LONGER CLAIMS SMALL ENTITY STATUS, ENTITY STATUS SET TO UNDISCOUNTED (ORIGINAL EVENT CODE: STOL); ENTITY STATUS OF PATENT OWNER: LARGE ENTITY |
|
FEPP | Fee payment procedure |
Free format text: PAT HOLDER CLAIMS SMALL ENTITY STATUS, ENTITY STATUS SET TO SMALL (ORIGINAL EVENT CODE: LTOS); ENTITY STATUS OF PATENT OWNER: LARGE ENTITY |
|
FPAY | Fee payment |
Year of fee payment: 4 |
|
AS | Assignment |
Owner name: GOOGLE INC., CALIFORNIAFree format text: ASSIGNMENT OF ASSIGNORS INTEREST;ASSIGNOR:SILVERBROOK RESEARCH PTY LTD;REEL/FRAME:029668/0094Effective date: 20120831 |
|
XAS | Not any more in us assignment database |
Free format text: ASSIGNMENT OF ASSIGNORS INTEREST;ASSIGNOR:SILVERBROOK RESEARCH PTY LTD;REEL/FRAME:029668/0094 |
|
AS | Assignment |
Owner name: GOOGLE INC., CALIFORNIAFree format text: ASSIGNMENT OF ASSIGNORS INTEREST;ASSIGNOR:SILVERBROOK RESEARCH PTY LTD;REEL/FRAME:029823/0001Effective date: 20120831 |
|
FPAY | Fee payment |
Year of fee payment: 8 |
|
AS | Assignment |
Owner name: GOOGLE LLC, CALIFORNIAFree format text: CHANGE OF NAME;ASSIGNOR:GOOGLE INC.;REEL/FRAME:044101/0610Effective date: 20170929 |
|
MAFP | Maintenance fee payment |
Free format text: PAYMENT OF MAINTENANCE FEE, 12TH YEAR, LARGE ENTITY (ORIGINAL EVENT CODE: M1553); ENTITY STATUS OF PATENT OWNER: LARGE ENTITYYear of fee payment: 12 |