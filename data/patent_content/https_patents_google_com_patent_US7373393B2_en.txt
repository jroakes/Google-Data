US7373393B2 - File system - Google Patents
File system Download PDFInfo
- Publication number
- US7373393B2 US7373393B2 US10/817,608 US81760804A US7373393B2 US 7373393 B2 US7373393 B2 US 7373393B2 US 81760804 A US81760804 A US 81760804A US 7373393 B2 US7373393 B2 US 7373393B2
- Authority
- US
- United States
- Prior art keywords
- file
- computer
- data
- storage device
- view
- Prior art date
- Legal status (The legal status is an assumption and is not a legal conclusion. Google has not performed a legal analysis and makes no representation as to the accuracy of the status listed.)
- Expired - Fee Related, expires
Links
Images
Classifications
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F16/00—Information retrieval; Database structures therefor; File system structures therefor
- G06F16/10—File systems; File servers
- G06F16/18—File system types
- G06F16/182—Distributed file systems
Definitions
- the present invention relates to a file system for storing files that are accessed by computers, and especially to a distributed file system that is realized by a plurality of server computers and a plurality of storage devices that are connected to network.
- magnetic disks are the mainstream in terms of storage devices for storing electronic files
- the common mode is a mode in which a computer constructs a file system on magnetic disks and the computer stores electronic data as files in the file system. Due to the fact that it is easy to alter or erase files in the file storage method that uses magnetic disks and file systems, it has been difficult to guarantee that the files are original and have not been altered.
- a storage device may calculate a hash value from the entirety of data stored in the storage device and uses the calculated hash value as an identifier for the data. Since the hash value would be different if the corresponding data is different, data can be guaranteed not to have been changed as long as users can access the data using the same hash value.
- changed data is registered and managed in the storage device as data completely different from the original data, so that the relationship between the data after change and the original data is not managed by the storage device.
- the user if the user wishes to restore the changed data to the data before the change was made, the user must manage the relationship between the data before change and the data after change.
- a computer system that stores files that are accessed by client computers
- different identification information is assigned to each data stored in a storage device based on a request from the client computer, and data that have been stored are managed in a way that they would not be updated and the identification information and filenames designated by the client computers are managed in correlation to each other.
- a computer system manages data before update and data after update correlated to each other when write requests are received from client computers.
- a computer system includes a first computer for receiving access requests to files from client computers, a first storage device system that is connected to the first computer and stores file management information, a second computer that receives access requests to data from the first computer, and a second storage device system that is connected to the second computer and stores file data.
- the first computer Every time the first computer receives file data included in a file sent from a client computer, the first computer assigns identification information to the file data and stores the file data in the second storage device system via the second computer.
- the first storage device system stores the identification information assigned to the file data by the first computer and a filename designated by the client computer.
- the first computer Upon receiving from a client computer a write request to a write target file, the first computer assigns second identification information, which is different from the first identification information assigned to file data of the write target file that is already stored in the second storage device system, to write data received with the write request from the client computer.
- the first computer stores the write data, via the second computer, in a storage region within the second storage device system that is different from a storage region that stores the file data of the write target file already stored in the second storage device system.
- the first computer correlates the second identification information to the filename of the write target file and to the first identification information and stores the second identification information in the first storage device system.
- the embodiment of the present invention realizes a computer system that assigns different identification information to each write data received from client computers such that data once stored are managed so as not to be updated, and that manages the identification information assigned to write data and filenames designated by the client computers correlated to each other.
- the embodiment of the present invention realizes a computer system that can manage data before update and data after update correlated to each other.
- FIG. 1 shows a conceptual diagram of one example of a file system in accordance with an embodiment of the present invention.
- FIG. 2 shows an example of a computer system in accordance with an embodiment of the present invention.
- FIG. 3 shows an example of the configuration of files.
- FIG. 4 shows an example of the configuration of Views.
- FIG. 5 shows an example of an open file table.
- FIG. 6 shows an example of a session table.
- FIG. 7 shows a flowchart of an example of a new file creation processing.
- FIG. 8 shows a flowchart of an example of a file write processing.
- FIG. 9 shows a flowchart of an example of a View data acquisition processing.
- FIG. 10 shows an example of a computer system in accordance with another embodiment of the present invention.
- FIG. 11 shows an example of a location table.
- FIG. 12 shows a flowchart of an example of a file read processing.
- FIG. 13 shows an example of the configuration of an SN and a storage device.
- FIG. 1 schematically shows an example of the concept of a file system in accordance with an embodiment of the present invention.
- the file system includes files 120 ( 120 A, 120 B, etc.) and Views 100 ( 100 A, 100 B, etc.) which register the files 120 and Views 100 .
- the Views 100 have a hierarchical structure, so that, for example, a View 4 is registered in a View 3 (hereinafter, a hierarchical relationship such as between the View 3 and the View 4 in FIG. 1 is expressed as “the View 3 is a parent View of the View 4 ” or “the View 4 is a child View of the View 3 ”).
- Each of the Views 100 has View data 110 , and at least one child View 100 in addition to the file 120 may be registered in each View data 110 .
- the View data 110 is created every time the file 120 or the View 110 is created or erased, and holds identification information of the files 120 and the Views 110 registered in the View data 110 .
- the View data 110 is managed in the corresponding View 100 , along with time information regarding the time at which the View data 110 was created. As a result, by referring to the View data 110 and the time information that is managed in conjunction with the View data 110 , the update history of creation, deletion, etc. of the file 120 and the View 100 can be found.
- the View data 110 A and the View data 110 B are registered in the View 4 ( 100 A).
- the View data 110 A has information indicating the status of the View 4 at time date 1 , and only the file 120 A is registered in the View data 110 A. In other words, the View data 110 A indicates that only the file 120 A belonged to the View 4 at the time of the time date 1 .
- the View data 110 B has information indicating the status of the View 4 at time date 2 , and two files, the files 120 A and 120 B, and the View 100 D are registered in the View data 110 B. In other words, the View data 110 B indicates that the two files, the file 120 A and the file 120 B, and the View 6 belonged to the View 4 at the time of date 2 .
- the View data 110 C is registered in the View 100 B.
- the View data 110 C is information indicating the status of the View 3 at time date 1 , and only the View 4 is registered in the View data 110 C.
- the View data 110 C indicates that only the View 4 , which is a child View, belonged to the View 3 at time date 1 . Since there are no View data registered in the View 100 B other than the View data 110 C, it can be ascertained that there has been no change to the status of the View 100 B since time date 1 .
- FIG. 2 is a diagram of one example of a computer system in accordance with an embodiment of the present invention.
- the computer system includes a plurality of computers (hereinafter called “clients”) 1000 used by users; a control node (hereinafter called “CN”) 1200 , which is a server computer that manages file management information (hereinafter called “meta data”); a storage device 1230 A that is connected to the CN 1200 and stores meta data; a storage node (hereinafter called “SN”) 1300 , which is a server computer that manages file data and View data; a storage device 1230 B that is connected to the SN 1300 and stores file data and View data; a computer (hereinafter called “NFS client”) 1100 that accesses files using NFS protocol; a computer (hereinafter called “CIFS client”) 1110 that accesses files using CIFS protocol; a computer (hereinafter called “legacy gateway”) 1600 that converts file access requests according to NFS protocol or CIFS protocol into file access requests
- the plurality of the clients 1000 , the CN 1200 , the SN 1300 , the NFS client 1100 , the CIFS client 1110 , the legacy gateway 1600 , the external node 1500 , and the management node 1400 are connected by a network 1700 , and these computers are mutually communicable.
- FIG. 13 is a diagram of one example of the storage node (SN) 1300 and the storage device 1230 B.
- the SN 1300 is a computer comprising a processor, a main memory that stores a storage server program (hereinafter called “S-SVR 1330 ”) executed by the processor, an input/output device, a network interface for connecting with the network 1700 , and a disk adapter for connecting with the storage device 1230 B.
- the S-SVR 1330 is a program that performs controls to make the control node (CN) 1200 possible to access file data and View data stored in the storage device 1230 B, using general file access protocol such as NFS or CIFS.
- Each of the clients 1000 , the CN 1200 , the NFS client 1100 , the CIFS client 1110 , the external node 1500 , and the management node 1400 has a configuration similar to that of the SN 1300 shown in FIG. 13 , but programs and data stored in the main memory are different from those of the SN 1300 . Furthermore, the clients 1000 , the NFS client 1100 , the CIFS client 1110 , and the management node 1400 also differ from the SN 1300 in that they do not have a disk adapter.
- the storage device 1230 B includes an adapter for connecting with the SN 1300 , a cache memory for temporarily storing data received from the SN 1300 and data read from disks, a main memory, a disk control processor for controlling disks using programs and data stored in the main memory, a disk adapter for connecting with disks, and one or more disks.
- Each of the disks stores at least one file container 1310 , which stores file data, and at least one View container 2200 , which stores View data.
- the storage device 1230 A, the storage device 1230 C, and the storage device 1230 D each has a configuration similar to that of the storage device 1230 B shown in FIG. 13 , but data stored in their disks are different from those stored in the storage device 1230 B.
- the SN 1300 and the storage device 1230 B may be one device configured within one housing as an NAS (Network Attached Storage).
- the CN 1200 and the storage device 1230 A, the legacy gateway 1600 and the storage device 1230 C, and the external node 1500 and the storage device 1230 D may be configured separately as NAS in a housing.
- the CN 1200 stores in its main memory a session table (hereinafter called “ST”) 1210 that holds connection information (hereinafter called “session information”) for communicating with the clients 1000 or the legacy gateway 1600 ; an open file table (hereinafter called “OFT”) 1260 that holds information about files that are open; a control server (hereinafter called “C-SVR”) 1270 , which is a program for file management; and a database management server program (hereinafter called “DBMS”) 1220 for managing database in the storage device 1230 A.
- ST session table
- OFT open file table
- C-SVR control server
- DBMS database management server program
- the storage device 1230 A stores in its disks an attribute table (hereinafter called “AT”) 1240 , which is a database for storing attribute information of files and Views, and a location table (hereinafter called “LT”) 1250 , which is a database for storing location information of files and Views.
- AT attribute table
- LT location table
- the external node 1500 stores in its main memory a history manager 1510 , which is a program for managing history of accesses (access history) to a file system; an accounting manager 1520 , which is a program for managing accounting information on fees charged to users; an ACL manager 1530 , which is a program for managing access authority information; and a search program 1540 for searching files.
- a history manager 1510 which is a program for managing history of accesses (access history) to a file system
- an accounting manager 1520 which is a program for managing accounting information on fees charged to users
- an ACL manager 1530 which is a program for managing access authority information
- search program 1540 for searching files.
- the storage device 1230 D stores in its disks databases that are used by the history manager 1510 , the accounting manager 1520 , and the ACL manager 1530 of the external node 1500 .
- FIG. 3 is a diagram for describing a method for managing files according to the present embodiment.
- Each file comprises at least one file attribute entry 2000 for holding file attribute information and at least one file container 1310 for storing file data, which is the substance of files stored by users.
- the file attribute entry 2000 is held in the AT 1240 of the storage device 1230 A, and the file container 1310 is held in the storage device 1230 B.
- the file attribute entry 2000 is formed from a GUID, which is a unique identifier in the computer system that is assigned to each file data by the C-SVR 1270 ; a name, which is a character string name assigned by a user to each file; a Cdate, which is the date the corresponding file was created; an Mdate, which is the date the corresponding file was updated; a size, which indicates the size of the corresponding file data stored in the file container 1310 ; a type, which indicates the type of file operation; an anc_GUID, which is an identifier of the original data of the file before update; a contents_Loc, which is location information that indicates the storage position in the file container; a contents_info, which indicates which data in what offset of the file is held by the file container indicated by the contents_Loc; an ACL_MGR_ID, which is location information of a server that holds access control information of the corresponding file; and an ACT_MGR_ID, which is location information of a server that holds accounting information
- WORM type files there are two types of file operations, a WORM type and an append type.
- WORM type files once file data is written to the file container 1310 and the file container 1310 is registered in the file attribute entry 2000 , data cannot be appended to the file container 1310 .
- append type files even after the file container 1310 to which file data has been written is registered in the file attribute entry 2000 , data can still be appended to the file container 1310 .
- the type of file operation is WORM type.
- FIG. 3 shows the relationship between a file (hereinafter called “file B”), which comprises the file attribute entry 2000 B and the file container 1310 B, and a file (hereinafter called “file A”) created by changing a part of information of the file B.
- file B a file
- file A a file created by changing a part of information of the file B.
- the file B holds 512 MB data in the file container 1310 B.
- the file A is a file that corresponds to offset 0 to offset 200 M of the file data of the file B held in the file container 1310 B, but has been changed.
- the file A comprises the file attribute entry 2000 A, the file attribute entry 2000 B, the file container 1310 A, and the file container 1310 B.
- the GUID of the file attribute entry 2000 A is an identifier assigned by the C-SVR 1270 to the file A and has a value different from the GUID of the file B.
- the contents_Loc of the file attribute entry 2000 A indicates the storage position of the file container 1310 A that holds the updated data, i.e., the differential content between the file B and the file A, and the contents_info of the file attribute entry 2000 A indicates an offset that indicates which part of the file A the update data corresponds to.
- the anc_GUID of the file attribute entry 2000 A holds the GUID of the file B.
- FIG. 4 shows one example of a method for managing Views.
- a plurality of pairs of character string names, which are designated by the user of files or child Views, and GUIDs, which are identifiers of the corresponding files or child Views, can be registered in the Views; the user can designate a character string name to specify a file by using the Views.
- results obtained by having the search program 1540 of the external node 1500 work in conjunction with the View, and by having the search program 1540 executed, can be registered in the View.
- the search method as a script file in the storage device 1230 D
- having the search program 1540 periodically execute the script file, and having the search results registered in the View
- the View can be updated dynamically.
- Each View comprises at least one View attribute entry 2100 and at least one View container 2200 .
- the View attribute entry 2100 comprises a GUID, which is a unique identifier in the computer system that is assigned to each View by the C-SVR 1270 ; a name, which is a character string name assigned by a user to each View; a Cdate, which is the date the corresponding View was created; an Mdate, which is the date the corresponding View was updated; a type that indicates that an entry is a View attribute; a parent_GUID, which is the GUID of the parent View; a contents_Loc, which indicates the storage position in the View container; a contents_info, which is the offset from the head position of the View container of the latest View delimiter stored in the View container; an ACL_MGR_ID, which indicates the server that holds access control information for the corresponding View; an ACT_MGR_ID, which indicates the server that holds accounting information of the corresponding View; as well as a script_GUID, which is the GUID of a script file; and a script_interval that indicates the interval between script executions
- the View attribute entries 2100 are stored in the AT 1240 of the storage device 1230 A, like the file attribute entries 2000 . For this reason, whether an entry is a View attribute or a file attribute is determined based on the value of type. As described earlier, if an entry is a file attribute, a value for the WORM type or a value for the append type is stored as the type. For View attribute entries, a value indicating the View type is stored.
- Each View container 2200 comprises a plurality of View delimiters 2210 and a plurality of View data 2220 .
- Each View delimiter 2210 is registered as a pair with the corresponding View data 2220 in the View container 2200 ; and each View delimiter 2210 comprises a date, which is the time the corresponding View data 2220 was registered; a size, which is the size of the View data 2220 ; and prev, which is the offset from the head of the View container 2200 for the immediately preceding View data 2220 .
- the View data 2220 holds a plurality of pairs of character string names of files (hereinafter sometimes called “filenames”) and file GUIDs, and/or pairs of character string names of Views (hereinafter sometimes called “View names”) and View GUIDs.
- the C-SVR 1270 of the CN 1200 refers to the times registered in the View delimiters 2210 , obtains the View data 2220 that corresponds to the View delimiter 2210 which registers a time that is before the specified time and closest to the specified time, and uses the GUIDs registered in the View data 2220 to search for the corresponding file attribute entry 2000 or the View attribute entry 2100 . If the storage position of the corresponding file container 1310 or the View container 2200 is found as a result of the search, the C-SVR 1270 can obtain the data of the file or View of the time.
- the View attribute entry 2100 A in FIG. 4 shows the View attribute entry of the View 4 in FIG. 1
- the View container 2200 A shows the View container of the View 4 in FIG. 1
- the View attribute entry 2100 B shows the View attribute entry of the View 6 , which is a child View of the View 4 in FIG. 1 .
- FIG. 4 shows that File 1 was registered in the View 4 at the time (date 1 ) the View delimiter 2210 A and the View data 2220 A were registered in the View container 2200 A.
- the View data 2220 B and the View delimiter 2210 B are added to the View container 2200 A.
- the contents_info of the View attribute entry 2100 A the offset from the head of the View container of the View delimiter 2210 B is set.
- the C-SVR 1270 can refer to the latest View data 2220 by using the contents_info and the contents_Loc of the View attribute entry 2100 .
- the View attribute entries 2100 in FIG. 4 are stored in the AT 1240 of the storage device 1230 A, and the View containers 2200 are stored in the storage device 1230 B.
- FIG. 5 shows one example of the structure of the open file table (OFT) 1260 .
- the OFT 1260 is a table which registeres data concerning files or Views that are currently open.
- the user sends to the CN 1200 a file or View creation request via the client 1000 , the NFS client 1100 , or the CIFS client 1110 , information of the file or View that was opened based on the creation request is held in the OFT 1260 .
- the OFT 1260 has at least one handle 2300 that is used when the user designates a file or a View; at least one GUID 2310 , which is an identifier of a file or View that is opened; at least one credential information (hereinafter called “CRED”) 2320 of the user who can access the file or the View; at least one pointer 2330 for entry in the session table; and at least one GUID of the parent View (hereinafter called “parent GUID”) 2340 in which is registered the corresponding file or View.
- CRED credential information
- FIG. 6 is one example of the session table (ST) 1210 .
- the ST 1210 is a table that holds user connection information between the clients 1000 and the CN 1200 .
- a session for communications between the client 1000 and the CN 1200 is established.
- the user of the client 1000 is verified.
- a session number 2400 for identifying the connection between the client 1000 and the CN 1200 a session number 2400 for identifying the connection between the client 1000 and the CN 1200 , socket identification information 2410 of the socket used for the connection, and credential information (hereinafter called “CRED”) 2420 of the user who is connecting are registered in the ST 1210 .
- CRED credential information
- the CN 1200 can use the ST 1210 to determine which session was used to receive which request and thereby specify the user who issued each request; consequently, the ST 1210 can be used to check access rights when accesses are made to files and to specify users who created files when files are created.
- the CN 1200 and SN 1300 provide a file system for holding file update information to the clients 1000 and the legacy gateway 1600 .
- the legacy gateway 1600 provides functions for accessing file systems using legacy protocols, such as NFS protocol or CIFS protocol, to the NFS client 1100 and the CIFS client 1110 .
- the legacy gateway 1600 converts requests based on the NFS protocol or CIFS protocol received from the NFS client 1100 or the CIFS client 1110 into requests based on a protocol that the CN 1200 can process, and sends the converted requests to the CN 1200 ; it also converts information received from the CN 1200 into information based on NFS protocol or CIFS protocol and sends the information to the NFS client 1100 or the CIFS client 1110 .
- NFS protocol and CIFS protocol access to file systems from clients that use other protocols can also be supported by providing a gateway for such other protocols.
- the processor of the CN 1200 executes the C-SVR 1270 .
- the processor of the CN 1200 executes the C-SVR 1270 .
- any processing that is performed as a result of the processor of the CN 1200 executing the C-SVR 1270 will be described hereunder using the expression “the C-SVR 1270 executes.”
- the file creation request sent from the client 1000 includes the handle of the View in which the new file to be created will be registered (i.e., the parent View of the new file to be created), as well as the filename and file operation type information of the file to be created.
- the handle of the file or View created is notified to the client 1000 . Consequently, the handle of the parent View was already notified to the client 1000 when the parent View was created, and it will be assumed that the client 1000 knows the handle of the parent View in advance.
- the client 1000 may send an open request that includes the View name of the parent View of the new file to the CN 1200 , so that the C-SVR 1270 that received the open request searches the View attribute entries 2100 to obtain the GUID that corresponds to the View name in the open request, uses the GUID obtained to obtain the handle of the parent View from the OFT 1260 , and notifies the client 1000 of it.
- the client 1000 does not have to manage View handles as long as the client 1000 manages the View names, since the client 1000 can obtain the handle of any View by sending an open request to the CN 1200 .
- the client 1000 may also send a GUID acquisition request that includes the View name of the parent View to the CN 1200 , so that the CN 1200 searches the View attribute entries 2100 using the View name to obtain the corresponding GUID and notifies the client 1000 of the GUID.
- the client 1000 can subsequently send to the CN 1200 a file creation request that includes the GUID notified.
- step 3000 described later, can be omitted, and the GUID in the file creation request is used to execute the processing beginning with step 3010 .
- the C-SVR 1270 uses the handle of the parent View included in the file creation request to search the OFT 1260 , and obtains an entry (hereinafter called “handle entry”) in the OFT 1260 that includes the handle (step 3000 ).
- the C-SVR 1270 uses the GUID included in the handle entry obtained to search the AT 1240 and obtains the View attribute entry 2100 in which the GUID is registered.
- the search of the AT 1240 is realized in reality by the CN 1200 's executing the program of the DBMS 1220 based on a search request from the C-SVR 1270 .
- the C-SVR 1270 refers to the ACL_MGR_ID of the View attribute entry 2100 obtained by the DBMS 1220 to obtain the ID of the ACL manager 1530 , and uses the ID obtained to send an access authority check request to the ACL manager 1530 (step 3010 ).
- the access authority check request includes the credential information (CRED) of the user who sent the file creation request.
- the ACL manager 1530 searches the database in the storage device 1230 D for access authority information of the user identified by the CRED with regard to the parent View, and checks whether the user has the authority to create a file in the parent View.
- the C-SVR 1270 can obtain the CRED by using the ST 1210 , as described earlier.
- the C-SVR 1270 receives the result of the access authority check from the ACL manager 1530 , and checks whether the user of the client 1000 has the authority to create a new file in the parent View designated by the client 1000 (step 3020 ). If the user of the client 1000 does not have the authority to create a file, the C-SVR 1270 sends back to the client 1000 the processing result that the file creation failed (step 3080 ) and terminates the file creation processing.
- the C-SVR 1270 creates a new file (step 3030 ). Specifically, the C-SVR 1270 establishes inside the AT 1240 the file attribute entry 2000 that corresponds to the new file, and at the same time assigns a GUID to the new file and stores the GUID along with the filename received from the client 1000 in the file attribute entry 2000 newly established. In addition, the C-SVR 1270 stores via the SN 1300 the file data of the new file received from the client 1000 in the file container 1310 of the storage device 1230 B.
- the C-SVR 1270 registers in the file attribute entry 2000 the time the file was created, the size of the file data, the file type, the storage position of the file data in the storage device 1230 B, ACL_MGR_ID, and ACT_MGR_ID.
- the C-SVR 1270 checks the result of creating the new file (step 3040 ); if it determines that the file creation failed, the C-SVR 1270 sends back to the client 1000 the processing result that the file creation failed (step 3080 ) and terminates the file creation processing.
- the C-SVR 1270 uses the contents_Loc and the contents_info of the View attribute entry 2000 of the parent View of the newly created file to store in the buffer memory within the CN 1200 the latest View data 2220 from the View container 2200 of the parent View, and registers at the end of the View data 2220 in the buffer memory the GUID of the file created in step 3030 and the filename that was included in the file creation request received from the client 1000 (step 3050 ).
- the C-SVR 1270 uses known technologies, such as the NFS protocol or CIFS protocol, to communicate with the SN 1300 and obtain the latest View data.
- the C-SVR 1270 creates the View delimiter 2210 for the View data 2220 created in the buffer, and records via the SN 1300 the data of the new View delimiter 2210 and the View data 2220 , in that order, to the end of the View container 2200 of the parent View stored in the storage device 1230 B (step 3060 ).
- the C-SVR 1270 creates a handle entry for the newly created file in the OFT 1260 (step 3070 ).
- the C-SVR 1270 stores the index number of the handle entry in the handle 2300 ; the GUID of the new file created in step 3030 in the GUID 2310 ; values that are the same as the CRED and SESSION values, which are registered in the entry in the ST 1210 that stores the information regarding the session in which the file creation request was received, in the CRED 2320 and the SESSION 2330 ; and the GUID of the parent View in the parent View GUID 2340 .
- the C-SVR 1270 sends back the handle, which is the index number of the handle entry created in step 3070 , and the result that the file creation was successful to the client 1000 and terminates the file creation processing (step 3080 ).
- a file set managed by the C-SVR 1270 at a specified time can be selected later.
- a new View creation processing can be executed similarly.
- the client 1000 sends to the C-SVR 1270 a View creation request that includes the handle of the parent View, in which the new View will be registered, and the View name of the new View.
- the processing in step 3030 in FIG. 7 is different from the file creation processing; the C-SVR 1270 establishes the View attribute entry 2100 , and at the same time assigns a GUID to the new View and correlates the GUID to the View name of the new View in the View attribute entry 2100 .
- the C-SVR 1270 sets in the newly established View attribute entry 2100 other information in the View attribute entry 2100 in FIG.
- the C-SVR 1270 creates the View container 2200 for the new View in the storage device 1230 B via the SN 1300 . Otherwise, the View creation processing can be executed through a processing similar to the file creation processing shown in FIG. 7 .
- a file write request sent from one of the clients 1000 to the CN 1200 comprises the handle of the write target file, write data, the write beginning offset, and data size.
- the C-SVR 1270 that received the open request will select the file attribute entry 2000 whose Mdate is closest to the current time (in other words, the file attribute entry 2000 whose GUID is not the anc_GUID of any other file) of one or more file attribute entries 2000 which register the filename received from the client 1000 , and use the GUID (hereinafter called “latest original GUID”) registered in the file attribute entry 2000 to obtain the View handle from the OFT 1260 .
- the C-SVR 1270 will send the latest original GUID to the client 1000 .
- the C-SVR 1270 Upon receiving a write request from the client 1000 , the C-SVR 1270 uses the handle included in the write request to search the OFT 1260 and obtains the handle entry of the write target file (step 2600 ).
- the C-SVR 1270 uses the GUID included in the handle entry (hereinafter called “original GUID”) to search the AT 1240 and obtains the file attribute entry 2000 that corresponds to the original GUID.
- the search of the AT 1240 is realized by the CN 1200 's executing the program of the DBMS 1220 .
- the C-SVR 1270 refers to the ACL_MGR_ID field of the file attribute entry 2000 obtained to obtain the ID of the ACL manager, and sends an access authority check request to the ACL manager 1530 indicated by the ACL manager ID (step 2610 ).
- the access authority check request includes the CRED of the user of the client 1000 that was obtained by the C-SVR 1270 through a procedure similar to step 3010 of the file creation processing; the ACL manager 1530 refers to the CRED to search the database in order to check whether the user has the authority to write to the write target file.
- the C-SVR 1270 checks the result of the access authority check that was sent from the ACL manager 1530 (step 2620 ). If the user does not have the authority to write to the file, the C-SVR 1270 sends back to the client 1000 the processing result that the file write failed (step 2670 ) and terminates the file write processing.
- the C-SVR 1270 requests the S-SVR 1330 to newly create the file container 1310 (hereinafter called “new file container”) in the storage device 1230 B, sends the write data received from the client 1000 to the S-SVR 1330 , and has the S-SVR 1330 store the write data in the new file container 1310 (step 2630 ).
- Processing such as creating the new file container 1310 and storing the write data in the new file container 1310 can be realized by utilizing known technologies, such as the NFS or CIFS protocol, between the C-SVR 1270 and the S-SVR 1330 .
- the C-SVR 1270 newly assigns a GUID (hereinafter called “new GUID”) to the new file container 1310 , and at the same time establishes the file attribute entry 2000 (hereinafter called “new file attribute entry”) that corresponds to the new file container 1310 in the AT 1240 and registers the new GUID in the new file attribute entry 2000 (step 2640 ).
- new GUID a GUID
- new file attribute entry the file attribute entry 2000
- the C-SVR 1270 registers the current time in the Mdate; the original GUID in the anc_GUID; the location inside the storage device 1230 B of the new file container 1310 in the contents_Loc; the offset and size included in the file write request received from the client 1000 in the contents_info; and values, which are the same as the values in the corresponding fields of the file attribute entry 2000 which registers the original GUID, in the name Cdate, type, ACL_MGR_ID, and ACT_MGR_ID fields of the new file attribute entry 2000 .
- the write end offset value which is the sum of the offset and size in the file write request received from the client 1000 , is larger than the value in the size field of the file attribute entry 2000 of the original GUID, the write end offset value is stored in the size field of the new file attribute entry 2000 ; if the former is smaller than the latter, the value in the size field of the file attribute entry 2000 of the original GUID is stored in the size field of the new file attribute entry 2000 .
- the C-SVR 1270 registers the new file in the View indicated by the parent GUID 2340 (i.e., the parent View of the write target file) that is registered in the handle entry of the write target file in the OFT 1260 (step 2650 ).
- the registration processing is executed according to the following procedure.
- the C-SVR 1270 reads the latest View data 2220 of the parent View from the storage device 1230 B via the SN 1300 and stores it in the buffer of the CN 1200 .
- the C-SVR 1270 searches for the file attribute entry 2000 , which registers the original GUID, from the View data 2220 stored in the buffer, and changes the value of the original GUID in the file attribute entry 2000 to the new GUID.
- the C-SVR 1270 appends, via the S-SVR 1330 , the View data 2220 that has been changed to the View container 2200 of the parent View as the latest View data 2220 .
- the processing for appending the View data 2220 that has been changed to the View container 2200 is the same as the processing described for step 3050 of the file creation processing, except that the original GUID in the View data 2220 read to the CN 1200 is changed to the new GUID.
- the C-SVR 1270 changes the value of the GUID 2310 registered in the handle entry of the OFT 1260 obtained in step 2600 to the new GUID (step 2660 ), and lastly sends the result that the file creation was successful to the client 1000 and terminates the file creation processing (step 2670 ).
- a read request sent from one of the clients 1000 to the CN 1200 includes the handle of the read target file, the read beginning offset, and data size. It is assumed that the client 1000 obtained in advance the handle of the read target file through a procedure similar to the procedure described in the file write processing.
- the C-SVR 1270 Upon receiving a read request from the client 1000 , the C-SVR 1270 uses a handle number included in the read request to search the OFT 1260 and obtains the corresponding handle entry (step 2800 ).
- the C-SVR 1270 uses the GUID included in the handle entry to search the AT 1240 and obtains the file attribute entry 2000 that corresponds to the GUID.
- the search of the AT 1240 is realized by the CN 1200 's executing the program of the DBMS 1220 .
- the C-SVR 1270 refers to the ACL_MGR_ID field of the file attribute entry 2000 obtained to obtain the ACL manager ID, and sends an access authority check request to the corresponding ACL manager 1530 (step 2810 ).
- This step is similar to the procedures described for the file creation processing and the file write processing in that the access authority check request includes the CRED and that the ACL manager 1530 uses the CRED to check whether the user has the authority to read the file.
- the C-SVR 1270 checks the result of the access authority check that was sent from the ACL manager 1530 (step 2820 ). If the user who is using the client 1000 does not have the read authority with regard to the read target file, the C-SVR 1270 sends back to the client 1000 the processing result that the file read failed (step 2840 ) and terminates the file read processing.
- the C-SVR 1270 obtains the contents_Loc in the file attribute entry 2000 obtained in step 2810 and reads data from the file container 1310 in the storage region indicated by the contents_Loc in the storage device 1230 B (step 2830 ).
- the file data contained in the file container 1310 indicated by the contents_Loc is also file data in the range indicated by the offset and size indicated by the contents_info of the same file attribute entry 2000 .
- the C-SVR 1270 compares the beginning offset and data size included in the read request received from the client 1000 with the offset and size included in the contents_info, and reads only the file data included in the range indicated by the read request from the file container 1310 indicated by the contents_Loc.
- step 2830 is terminated.
- the C-SVR 1270 reads only the file container 1310 indicated by the contents_Loc in the file attribute entry 2000 obtained in step 2810 and does not complete the reading of the data in the range indicated by the read request
- the C-SVR 1270 obtains the contents_Loc in the file attribute entry 2000 indicated by the GUID registered in the anc_GUID of the file attribute entry 2000 obtained in step 2810 and reads data also from the file container 1310 in the storage region indicated by the contents_Loc using the method similar to before.
- the data read processing in step 2830 continues until reading of data in the range indicated by the read request is completed, or until data is read from the file container 1310 in the storage region indicated by the contents_Loc of the final file attribute entry 2000 (i.e., the file attribute entry 2000 in which no GUID is registered under anc_GUID).
- the file data read processing can be realized by utilizing known technologies, such as NFS or CIFS protocol, between the C-SVR 1270 and the S-SVR 1330 .
- the C-SVR 1270 sends the data read in step 2830 , the size of the data read, and the processing result that indicates that the file read processing was successful to the client 1000 , and terminates the file read processing (step 2840 ).
- the client 1000 can obtain the View data 2220 that indicates files and/or Views registered in a View designated and for a designated time by sending to the CN 1200 a View data acquisition request that designates the handle of a View and time. As described in the file creation processing, it is assumed that the client obtained in advance the handle of the View that is the target of the View data acquisition request.
- the C-SVR 1270 Upon receiving a View data acquisition request from the client 1000 , the C-SVR 1270 uses the handle number included in the View data acquisition request to search the OFT 1260 and obtains the handle entry for the designated View (step 2700 ).
- the C-SVR 1270 uses the GUID included in the handle entry to search the AT 1240 and obtains the View attribute entry 2000 that corresponds to the GUID.
- the search of the AT 1240 is realized by the CN 1200 's executing the program of the DBMS 1220 .
- the C-SVR 1270 refers to the ACL_MGR_ID field of the View attribute entry 2000 to obtain the ACL manager ID, and sends an access authority check request to the corresponding ACL manager 1530 (step 2710 ).
- This step is similar to the file creation processing in that the access authority check request includes the CRED, and in terms of the method for the C-SVR 1270 to obtain the CRED and the method for the ACL manager 1530 to check whether the user has the authority to access the View data 2220 .
- the C-SVR 1270 checks the result of the access authority check that was sent from the ACL manager 1530 (step 2720 ). If the user who is using the client 1000 does not have the View data acquisition authority, the C-SVR 1270 sends back to the client 1000 the processing result indicating that the View data acquisition failed (step 2770 ) and terminates the View data acquisition processing.
- the C-SVR 1270 executes the DBMS 1220 to search the AT 1240 and obtains the View attribute entry 2100 that includes the GUID in the handle entry obtained in step 2700 . Further, the C-SVR 1270 uses the contents_Loc and the contents_info in the View attribute entry 2000 obtained to obtain the latest View delimiter 2210 from the View container 2200 in the storage device 1230 B via the S-SVR 1330 (step 2730 ).
- the C-SVR 1270 compares the time data (date) in the View delimiter 2210 obtained with the time data designated by the client 1000 in the View data acquisition request (step 2740 ). If the time in the View delimiter 2210 is not older than the time designated by the client 1000 , the C-SVR 1270 obtains the View delimiter 2210 that is one generation earlier from the View container 2200 in the storage device 1230 B via the S-SVR 1330 (step 2750 ). The C-SVR 1270 repeats steps 2740 and 2750 until it obtains the View delimiter 2210 that is older than the time designated by the client 1000 .
- the C-SVR 1270 reads the View data 2220 that corresponds to the View delimiter 2210 via the S-SVR 1330 (step 2760 ), sends the View data 2220 to the client 1000 , and terminates the processing.
- the View data 2220 sent to the client 1000 contains at least one set of a View name and the GUID that corresponds to the View name, at least one set of a filename and the GUID that corresponds to the filename, or both, that were registered in the View designated by the client 1000 in the View data acquisition request and at the time designated by the client 1000 in the View data acquisition request.
- the client 1000 can obtain data of the file of a specified time by issuing a read request using the GUID of the file obtained to the CN 1200 and by having the C-SVR 1270 perform the read processing using the GUID received from the client 1000 . Since the client 1000 issues a read request that includes the GUID of a file, step 2800 in FIG. 12 is omitted and the processing beginning with step 2810 is executed by the C-SVR 1270 using the GUID in the read request.
- the client 1000 can obtain the file data of a specified time.
- the CN 1200 assigns different identification information to each data received from the client 1000 , and stores in the storage device 1230 A the identification information and the filename received from the client 1000 correlated to each other, it is possible to realize a computer system that manages data once stored in a manner that they would not be updated and that manages the identification information assigned to write data and filenames designated by the client computer correlated to each other.
- the CN 1200 stores in the storage device 1230 A the identification information assigned to file data before update and the identification information assigned to file write data correlated to each other, it is possible to realize a computer system that can manage file data before update and file data after update correlated to each other.
- the legacy gateway 1600 is provided in the computer system so that the legacy gateway 1600 converts requests from the NFS client 1100 or the CIFS client 1110 into a protocol used by the CN 1200 and sends the converted requests to the CN 1200 , a computer system whose files can be accessed from clients that use widely used file access protocols such as NFS or CIFS can be realized.
- FIG. 10 is another example of a computer system in accordance with an embodiment of the present invention and differs from the embodiment shown in FIG. 2 in that it has a plurality of control nodes (hereinafter called “CN”) 1200 , a plurality of storage nodes (hereinafter called “SN”) 1300 , an yellow pages server (hereinafter called “YP”) 1900 , and a directory server 1800 for managing correlations between clients 1000 and the CNs 1200 .
- CN control nodes
- SN plurality of storage nodes
- YP yellow pages server
- a directory server 1800 for managing correlations between clients 1000 and the CNs 1200 .
- the YP 1900 is a server for guaranteeing that each GUID is unique within the computer system.
- the YP 1900 holds unused GUIDs in the computer system and assigns a certain number of unused GUIDs all at once in response to a request from each CN 1200 .
- each CN 1200 selects one GUID from among the unused GUIDs assigned by the YP 1900 and assigns the GUID to the file or View created, or to the update data of a file.
- the uniqueness of each GUID can be ensured within the system and load on the YP 1900 relating to queries for GUIDs can be reduced.
- the directory server 1800 holds a CN table (hereinafter called “CNT”) 1810 for managing correlations between the clients 1000 and the CNs 1200 ; in response to a query from one of the clients 1000 , the directory server 1800 searches the CNT 1810 , obtains the ID of the CN 1200 that corresponds to the client 1000 that made the query, and sends the ID to the client 1000 .
- CNT CN table
- FIG. 11 is one example of a location table (hereinafter called “LT”) 1250 for managing locations of file containers and View containers.
- the LT 1250 is stored in each of the storage devices 1230 to which the corresponding CN 1200 is connected as in the first embodiment example, and the LT 1250 is searched by a DBMS in the corresponding CN 1200 .
- the LT 1250 comprises a GUID field 4000 for storing GUIDs of files or Views, a field for storing first location (hereinafter called “first location”) 4100 of a file container or a View container, and a field for storing second location (hereinafter called “second location”) 4200 of a file container or View container.
- FIG. 11 shows an example in which two pieces of location information are registered in the LT 1250 , but the number of location information registered in the LT 1250 can be increased or decreased depending on the number of storage nodes (CNs) and the redundancy required.
- the directory server 1800 manages the correlation between the clients 1000 and the CNs 1200 .
- each client 1000 queries the directory server 1800 about the CN 1200 to which the file access request should be sent. When this happens, the client 1000 notifies the directory server 1800 of its own ID.
- the directory server 1800 uses the ID of the client 1000 that sent the query to search the CNT 1810 and obtains the ID of the CN 1200 that corresponds to the client ID that matches. When the ID of the CN 1200 is obtained, the directory server 1800 sends the ID of the CN 1200 to the client 1000 that sent the query request.
- the correlations between the clients 1000 and the CNs 1200 in the CNT 1810 are registered statically by taking into consideration the number of the clients 1000 and the number of the CNs 1200 .
- the correlations between the clients 1000 and the CNs 1200 registered in the CNT 1810 can be dynamically changed. In this case, query requests from the clients 1000 and the corresponding responses must be managed in the directory server 1800 , as well as the number of the clients 1000 currently assigned to each CN 1200 .
- the client 1000 that received from the directory server 1800 the ID of the CN 1200 to be accessed uses the ID of the CN 1200 received to send a file access request. Subsequently, processing similar to the processing described in the first embodiment is performed.
- SN 1300 for storing file containers and View containers in accordance with the first embodiment
- a plurality of file containers or View containers can be assigned to one file or View according to the present embodiment, so that files and Views can be stored in a plurality of different storage devices via a plurality of different SNs 1300 .
- the C-SVR 1270 when a C-SVR 1270 accesses a file container or a View container, the C-SVR 1270 first activates the DBMS 1220 , accesses the LT 1250 in the storage device 1230 , and selects either the first location 4100 or the second location 4200 .
- the location to be selected by the C-SVR 1270 can be determined in advance to be either the first location 4100 or the second location 4200 depending on the value of the GUID.
- the C-SVR 1270 executes, on the S-SVR indicated by the location selected, an access processing to a file container or a View container. As a result, load balancing among the SNs 1300 becomes possible.
- the fault tolerance of the computer system can be improved.
Abstract
Description
Claims (12)
Applications Claiming Priority (2)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
JP2003383249A JP4273934B2 (en) | 2003-11-13 | 2003-11-13 | File system |
JP2003-383249 | 2003-11-13 |
Publications (2)
Publication Number | Publication Date |
---|---|
US20050108237A1 US20050108237A1 (en) | 2005-05-19 |
US7373393B2 true US7373393B2 (en) | 2008-05-13 |
Family
ID=34567295
Family Applications (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
US10/817,608 Expired - Fee Related US7373393B2 (en) | 2003-11-13 | 2004-04-02 | File system |
Country Status (2)
Country | Link |
---|---|
US (1) | US7373393B2 (en) |
JP (1) | JP4273934B2 (en) |
Cited By (8)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20060256739A1 (en) * | 2005-02-19 | 2006-11-16 | Kenneth Seier | Flexible multi-media data management |
US20070162574A1 (en) * | 2006-01-06 | 2007-07-12 | Apple Computer, Inc. | Data serialization in a user switching environment |
US20080162415A1 (en) * | 2006-12-28 | 2008-07-03 | Sap Ag | Software and method for utilizing a common database layout |
US20080162457A1 (en) * | 2006-12-28 | 2008-07-03 | Sap Ag | Software and method for utilizing a generic database query |
US20100146064A1 (en) * | 2008-12-08 | 2010-06-10 | Electronics And Telecommunications Research Institute | Source apparatus, sink apparatus and method for sharing information thereof |
US8417731B2 (en) | 2006-12-28 | 2013-04-09 | Sap Ag | Article utilizing a generic update module with recursive calls identify, reformat the update parameters into the identified database table structure |
US20130110904A1 (en) * | 2011-10-27 | 2013-05-02 | Hitachi, Ltd. | Method and apparatus to forward shared file stored in block storages |
US20130239230A1 (en) * | 2004-08-31 | 2013-09-12 | Adobe Systems Incorporated | Document access auditing |
Families Citing this family (7)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
JP2008040645A (en) * | 2006-08-03 | 2008-02-21 | Hitachi Ltd | Load distribution method by means of nas migration, computer system using the same, and nas server |
WO2009043033A2 (en) | 2007-09-28 | 2009-04-02 | Xcerion Aktiebolag | Network operating system |
JP5098950B2 (en) * | 2008-10-21 | 2012-12-12 | 株式会社島津製作所 | Client-server analysis system |
US8886900B2 (en) * | 2010-11-22 | 2014-11-11 | International Business Machines Corporation | Legacy data management |
JP6467999B2 (en) * | 2015-03-06 | 2019-02-13 | 富士ゼロックス株式会社 | Information processing system and program |
US10474629B2 (en) * | 2016-09-28 | 2019-11-12 | Elastifile Ltd. | File systems with global and local naming |
US10430201B1 (en) * | 2017-04-25 | 2019-10-01 | American Megatrends International, Llc | Multi-platform firmware support |
Citations (23)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US5799305A (en) * | 1995-11-02 | 1998-08-25 | Informix Software, Inc. | Method of commitment in a distributed database transaction |
JPH11110376A (en) | 1997-10-08 | 1999-04-23 | Hitachi Ltd | Revision managing system |
US5919258A (en) * | 1996-02-08 | 1999-07-06 | Hitachi, Ltd. | Security system and method for computers connected to network |
WO1999038092A1 (en) | 1998-01-23 | 1999-07-29 | Filepool N.V. | Access to content addressable data over a network |
US6125428A (en) * | 1997-02-28 | 2000-09-26 | Matsushita Electric Industrial Co., Ltd. | Apparatus for reproducing multimedia data, method for reproducing multimedia data, and record media containing multimedia data reproduction program |
US6160874A (en) * | 1997-10-21 | 2000-12-12 | Mci Communications Corporation | Validation gateway |
US6192408B1 (en) * | 1997-09-26 | 2001-02-20 | Emc Corporation | Network file server sharing local caches of file access information in data processors assigned to respective file systems |
US6256675B1 (en) * | 1997-05-06 | 2001-07-03 | At&T Corp. | System and method for allocating requests for objects and managing replicas of objects on a network |
US20010025311A1 (en) * | 2000-03-22 | 2001-09-27 | Masato Arai | Access control system |
US20020049744A1 (en) * | 1999-01-29 | 2002-04-25 | Dimitris Nakos | Techniques for managing a database system including one or more database servers |
US6453354B1 (en) * | 1999-03-03 | 2002-09-17 | Emc Corporation | File server system using connection-oriented protocol and sharing data sets among data movers |
US6556904B1 (en) * | 1999-09-02 | 2003-04-29 | Hunter Engineering Company | Method and apparatus for update and acquisition of automotive vehicle specifications in automotive diagnostic equipment |
US20030093439A1 (en) * | 2001-11-12 | 2003-05-15 | Kazuhiko Mogi | Method and apparatus for relocating data related to database management system |
US20030208625A1 (en) | 2001-02-05 | 2003-11-06 | Fumihiko Nishio | Receiving apparatus, receiving methods, and name resolving method |
US20040015723A1 (en) * | 2002-07-22 | 2004-01-22 | Duc Pham | Secure network file access controller implementing access control and auditing |
US20040237093A1 (en) | 2003-03-28 | 2004-11-25 | International Business Machines Corporation | Technique to generically manage extensible correlation data |
US20050027718A1 (en) * | 2003-07-29 | 2005-02-03 | Akihiko Sakaguchi | File management method in a distributed storage system |
US20050044409A1 (en) * | 2003-08-19 | 2005-02-24 | International Business Machines Corporation | Implementation and use of a PII data access control facility employing personally identifying information labels and purpose serving functions sets |
US6886019B1 (en) * | 2000-05-15 | 2005-04-26 | International Business Machines Corporation | Optimized selection and accessing of stored files to avoid mount and position thrashing |
US6944658B1 (en) * | 1997-07-25 | 2005-09-13 | Eric Schneider | Content notification method, product, and apparatus |
US6950819B1 (en) * | 1999-11-22 | 2005-09-27 | Netscape Communication Corporation | Simplified LDAP access control language system |
US7076558B1 (en) * | 2002-02-27 | 2006-07-11 | Microsoft Corporation | User-centric consent management system and method |
US7146403B2 (en) * | 2001-11-02 | 2006-12-05 | Juniper Networks, Inc. | Dual authentication of a requestor using a mail server and an authentication server |
Family Cites Families (9)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US237093A (en) * | 1881-02-01 | crowell | ||
US208625A (en) * | 1878-10-01 | Improvement in seeder and planter | ||
US27718A (en) * | 1860-04-03 | Vapor-burner | ||
JPH09212404A (en) * | 1996-01-30 | 1997-08-15 | Toshiba Corp | Filing system, and file managing method applied to client/ server system |
JPH1139801A (en) * | 1997-07-14 | 1999-02-12 | Olympus Optical Co Ltd | Method for recording information |
US6263491B1 (en) * | 1998-10-02 | 2001-07-17 | Microsoft Corporation | Heavyweight and lightweight instrumentation |
JP2001282621A (en) * | 2000-03-30 | 2001-10-12 | Ntt Advanced Technology Corp | Existent file additional writing type data saving method and method for acquiring data saved by the same method |
JP2001338062A (en) * | 2000-05-26 | 2001-12-07 | Nec Corp | System for controlling electronic medical record and method for the same |
JP4266096B2 (en) * | 2002-03-26 | 2009-05-20 | 株式会社日立製作所 | File storage system and NAS server |
-
2003
- 2003-11-13 JP JP2003383249A patent/JP4273934B2/en not_active Expired - Fee Related
-
2004
- 2004-04-02 US US10/817,608 patent/US7373393B2/en not_active Expired - Fee Related
Patent Citations (23)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US5799305A (en) * | 1995-11-02 | 1998-08-25 | Informix Software, Inc. | Method of commitment in a distributed database transaction |
US5919258A (en) * | 1996-02-08 | 1999-07-06 | Hitachi, Ltd. | Security system and method for computers connected to network |
US6125428A (en) * | 1997-02-28 | 2000-09-26 | Matsushita Electric Industrial Co., Ltd. | Apparatus for reproducing multimedia data, method for reproducing multimedia data, and record media containing multimedia data reproduction program |
US6256675B1 (en) * | 1997-05-06 | 2001-07-03 | At&T Corp. | System and method for allocating requests for objects and managing replicas of objects on a network |
US6944658B1 (en) * | 1997-07-25 | 2005-09-13 | Eric Schneider | Content notification method, product, and apparatus |
US6192408B1 (en) * | 1997-09-26 | 2001-02-20 | Emc Corporation | Network file server sharing local caches of file access information in data processors assigned to respective file systems |
JPH11110376A (en) | 1997-10-08 | 1999-04-23 | Hitachi Ltd | Revision managing system |
US6160874A (en) * | 1997-10-21 | 2000-12-12 | Mci Communications Corporation | Validation gateway |
WO1999038092A1 (en) | 1998-01-23 | 1999-07-29 | Filepool N.V. | Access to content addressable data over a network |
US20020049744A1 (en) * | 1999-01-29 | 2002-04-25 | Dimitris Nakos | Techniques for managing a database system including one or more database servers |
US6453354B1 (en) * | 1999-03-03 | 2002-09-17 | Emc Corporation | File server system using connection-oriented protocol and sharing data sets among data movers |
US6556904B1 (en) * | 1999-09-02 | 2003-04-29 | Hunter Engineering Company | Method and apparatus for update and acquisition of automotive vehicle specifications in automotive diagnostic equipment |
US6950819B1 (en) * | 1999-11-22 | 2005-09-27 | Netscape Communication Corporation | Simplified LDAP access control language system |
US20010025311A1 (en) * | 2000-03-22 | 2001-09-27 | Masato Arai | Access control system |
US6886019B1 (en) * | 2000-05-15 | 2005-04-26 | International Business Machines Corporation | Optimized selection and accessing of stored files to avoid mount and position thrashing |
US20030208625A1 (en) | 2001-02-05 | 2003-11-06 | Fumihiko Nishio | Receiving apparatus, receiving methods, and name resolving method |
US7146403B2 (en) * | 2001-11-02 | 2006-12-05 | Juniper Networks, Inc. | Dual authentication of a requestor using a mail server and an authentication server |
US20030093439A1 (en) * | 2001-11-12 | 2003-05-15 | Kazuhiko Mogi | Method and apparatus for relocating data related to database management system |
US7076558B1 (en) * | 2002-02-27 | 2006-07-11 | Microsoft Corporation | User-centric consent management system and method |
US20040015723A1 (en) * | 2002-07-22 | 2004-01-22 | Duc Pham | Secure network file access controller implementing access control and auditing |
US20040237093A1 (en) | 2003-03-28 | 2004-11-25 | International Business Machines Corporation | Technique to generically manage extensible correlation data |
US20050027718A1 (en) * | 2003-07-29 | 2005-02-03 | Akihiko Sakaguchi | File management method in a distributed storage system |
US20050044409A1 (en) * | 2003-08-19 | 2005-02-24 | International Business Machines Corporation | Implementation and use of a PII data access control facility employing personally identifying information labels and purpose serving functions sets |
Cited By (13)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US8925108B2 (en) * | 2004-08-31 | 2014-12-30 | Adobe Systems Incorporated | Document access auditing |
US20130239230A1 (en) * | 2004-08-31 | 2013-09-12 | Adobe Systems Incorporated | Document access auditing |
US20060256739A1 (en) * | 2005-02-19 | 2006-11-16 | Kenneth Seier | Flexible multi-media data management |
US20070162574A1 (en) * | 2006-01-06 | 2007-07-12 | Apple Computer, Inc. | Data serialization in a user switching environment |
US8732284B2 (en) * | 2006-01-06 | 2014-05-20 | Apple Inc. | Data serialization in a user switching environment |
US8417731B2 (en) | 2006-12-28 | 2013-04-09 | Sap Ag | Article utilizing a generic update module with recursive calls identify, reformat the update parameters into the identified database table structure |
US7730056B2 (en) * | 2006-12-28 | 2010-06-01 | Sap Ag | Software and method for utilizing a common database layout |
US8606799B2 (en) | 2006-12-28 | 2013-12-10 | Sap Ag | Software and method for utilizing a generic database query |
US20080162457A1 (en) * | 2006-12-28 | 2008-07-03 | Sap Ag | Software and method for utilizing a generic database query |
US20080162415A1 (en) * | 2006-12-28 | 2008-07-03 | Sap Ag | Software and method for utilizing a common database layout |
US8959117B2 (en) | 2006-12-28 | 2015-02-17 | Sap Se | System and method utilizing a generic update module with recursive calls |
US20100146064A1 (en) * | 2008-12-08 | 2010-06-10 | Electronics And Telecommunications Research Institute | Source apparatus, sink apparatus and method for sharing information thereof |
US20130110904A1 (en) * | 2011-10-27 | 2013-05-02 | Hitachi, Ltd. | Method and apparatus to forward shared file stored in block storages |
Also Published As
Publication number | Publication date |
---|---|
US20050108237A1 (en) | 2005-05-19 |
JP2005148962A (en) | 2005-06-09 |
JP4273934B2 (en) | 2009-06-03 |
Similar Documents
Publication | Publication Date | Title |
---|---|---|
US11388251B2 (en) | Providing access to managed content | |
US6449607B1 (en) | Disk storage with modifiable data management function | |
US6678700B1 (en) | System of and method for transparent management of data objects in containers across distributed heterogenous resources | |
US8370910B2 (en) | File server for translating user identifier | |
US8255430B2 (en) | Shared namespace for storage clusters | |
US7409397B2 (en) | Supporting replication among a plurality of file operation servers | |
US8396938B2 (en) | Providing direct access to distributed managed content | |
US20060259611A1 (en) | Method for accessing distributed file system | |
US7373393B2 (en) | File system | |
US20040193879A1 (en) | Computer system | |
US8380806B2 (en) | System and method for absolute path discovery by a storage virtualization system | |
JPH04104342A (en) | Data distributed control method and control system |
Legal Events
Date | Code | Title | Description |
---|---|---|---|
AS | Assignment |
Owner name: HITACHI, LTD., JAPANFree format text: ASSIGNMENT OF ASSIGNORS INTEREST;ASSIGNORS:SONODA, KOJI;IWASAKI, MASAAKI;KISHIMA, SHINICHI;REEL/FRAME:015183/0611Effective date: 20040317 |
|
FEPP | Fee payment procedure |
Free format text: PAYER NUMBER DE-ASSIGNED (ORIGINAL EVENT CODE: RMPN); ENTITY STATUS OF PATENT OWNER: LARGE ENTITY |
|
FEPP | Fee payment procedure |
Free format text: PAYOR NUMBER ASSIGNED (ORIGINAL EVENT CODE: ASPN); ENTITY STATUS OF PATENT OWNER: LARGE ENTITY |
|
FPAY | Fee payment |
Year of fee payment: 4 |
|
AS | Assignment |
Owner name: GOOGLE INC., CALIFORNIAFree format text: ASSIGNMENT OF ASSIGNORS INTEREST;ASSIGNOR:HITACHI, LTD.;REEL/FRAME:030555/0554Effective date: 20121016 |
|
REMI | Maintenance fee reminder mailed | ||
LAPS | Lapse for failure to pay maintenance fees | ||
STCH | Information on status: patent discontinuation |
Free format text: PATENT EXPIRED DUE TO NONPAYMENT OF MAINTENANCE FEES UNDER 37 CFR 1.362 |
|
FP | Lapsed due to failure to pay maintenance fee |
Effective date: 20160513 |
|
AS | Assignment |
Owner name: GOOGLE LLC, CALIFORNIAFree format text: CHANGE OF NAME;ASSIGNOR:GOOGLE INC.;REEL/FRAME:044142/0357Effective date: 20170929 |