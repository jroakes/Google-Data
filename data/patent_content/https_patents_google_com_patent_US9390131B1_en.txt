US9390131B1 - Executing queries subject to different consistency requirements - Google Patents
Executing queries subject to different consistency requirements Download PDFInfo
- Publication number
- US9390131B1 US9390131B1 US13/759,932 US201313759932A US9390131B1 US 9390131 B1 US9390131 B1 US 9390131B1 US 201313759932 A US201313759932 A US 201313759932A US 9390131 B1 US9390131 B1 US 9390131B1
- Authority
- US
- United States
- Prior art keywords
- query
- results
- databases
- entities
- client
- Prior art date
- Legal status (The legal status is an assumption and is not a legal conclusion. Google has not performed a legal analysis and makes no representation as to the accuracy of the status listed.)
- Active, expires
Links
- 238000000034 method Methods 0.000 claims description 55
- 230000004044 response Effects 0.000 claims description 23
- 230000001360 synchronised effect Effects 0.000 claims description 3
- 238000004891 communication Methods 0.000 description 16
- 238000010586 diagram Methods 0.000 description 11
- 230000008569 process Effects 0.000 description 9
- 239000007787 solid Substances 0.000 description 6
- 238000012545 processing Methods 0.000 description 5
- 230000000694 effects Effects 0.000 description 4
- 238000012986 modification Methods 0.000 description 4
- 230000004048 modification Effects 0.000 description 4
- 230000003287 optical effect Effects 0.000 description 4
- 238000001914 filtration Methods 0.000 description 3
- 238000013459 approach Methods 0.000 description 2
- 230000001419 dependent effect Effects 0.000 description 2
- 230000006870 function Effects 0.000 description 2
- 230000008859 change Effects 0.000 description 1
- 230000001934 delay Effects 0.000 description 1
- 230000003203 everyday effect Effects 0.000 description 1
- 230000003993 interaction Effects 0.000 description 1
- 238000005192 partition Methods 0.000 description 1
- 238000012360 testing method Methods 0.000 description 1
Images
Classifications
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F16/00—Information retrieval; Database structures therefor; File system structures therefor
- G06F16/20—Information retrieval; Database structures therefor; File system structures therefor of structured data, e.g. relational data
- G06F16/24—Querying
- G06F16/245—Query processing
- G06F16/2455—Query execution
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F16/00—Information retrieval; Database structures therefor; File system structures therefor
- G06F16/20—Information retrieval; Database structures therefor; File system structures therefor of structured data, e.g. relational data
- G06F16/23—Updating
- G06F16/2365—Ensuring data consistency and integrity
-
- G06F17/30477—
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F16/00—Information retrieval; Database structures therefor; File system structures therefor
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F16/00—Information retrieval; Database structures therefor; File system structures therefor
- G06F16/20—Information retrieval; Database structures therefor; File system structures therefor of structured data, e.g. relational data
- G06F16/24—Querying
- G06F16/245—Query processing
- G06F16/2458—Special types of queries, e.g. statistical queries, fuzzy queries or distributed queries
- G06F16/2471—Distributed queries
-
- G06F17/30—
Definitions
- the disclosed embodiments relates generally to distributed client-server computer network systems, and in particular, to a system and method for executing queries.
- every data operation submitted to a database is applied and resulting entity changes populated to all replicas before query results can be generated.
- This solution ensures that queries against the database produce strongly consistent (e.g., up-to-date) data.
- strongly consistent e.g., up-to-date
- requiring strong consistency for all queries can be inefficient and reduce response times by requiring large numbers of data operations to be completed prior to processing a search query.
- an approach that selectively guarantees strong consistency in response to user queries can ensure entity changes having particular relevancy to a user query are reflected and observable in query results provided to the user, thereby providing many of the benefits of strong consistency without the attendant costs of guaranteeing strong consistency across all results for all queries.
- a method is performed at a server system having one or more processors and memory storing one or more programs for execution by the one or more processors so as to perform the method.
- the method includes storing a plurality of entities in one or more databases, where the one or more databases do not guarantee strong consistency of the entities stored.
- the method further includes executing a first query against at least a first portion of the one or more databases to generate a first set of one or more results, where the first set of one or more results is not guaranteed to be strongly consistent; executing a second query by performing a consistency operation—the consistency operation guaranteeing that a second portion of the one or more databases is strongly consistent—and generating a second set of one or more results from the second portion of the one or more databases.
- the method also includes merging the first set of one or more results and the second set of one or more results.
- a computer system (e.g., a client system or server system) includes one or more processors, memory, and one or more programs.
- the one or more programs are stored in memory and configured to be executed by the one or more processors and the one or more programs include instructions for performing the operations of the method described above.
- a non-transitory computer readable storage medium has stored therein instructions which when executed by one or more processors, cause a computer system (e.g., a client system or server system) to perform the operations of the methods described above.
- FIG. 1 is a block diagram illustrating a distributed client-server system, in accordance with some embodiments.
- FIG. 2 is a block diagram illustrating a client system, in accordance with some embodiments.
- FIG. 3 is a block diagram illustrating a server system, in accordance with some embodiments.
- FIG. 4A is a block diagram illustrating an entity database, in accordance with some embodiments.
- FIG. 4B is a block diagram illustrating a set of indexes or index portions for a plurality of entities, in accordance with some embodiments.
- FIG. 4C is a block diagram illustrating a transaction log, in accordance with some embodiments.
- FIG. 4D is a block diagram illustrating an example of executing a query, in accordance with some embodiments.
- FIG. 5 includes a flow chart illustrating a method for processing a query, in accordance with some embodiments.
- FIGS. 6A-6B include a flow chart illustrating a method for executing a query at a server system, in accordance with some embodiments.
- first could be termed a second request
- a second request could be termed a first request, without changing the meaning of the description, so long as all occurrences of the “first request” are renamed consistently and all occurrences of the second request are renamed consistently.
- the first request and the second request are both requests, but they are not the same request.
- the term “if” may be construed to mean “when” or “upon” or “in response to determining” or “in accordance with a determination” or “in response to detecting,” that a stated condition precedent is true, depending on the context.
- the phrase “if it is determined [that a stated condition precedent is true]” or “if [a stated condition precedent is true]” or “when [a stated condition precedent is true]” may be construed to mean “upon determining” or “in response to determining” or “in accordance with a determination” or “upon detecting” or “in response to detecting” that the stated condition precedent is true, depending on the context.
- client and server systems which typically inter-operate in a distributed client-server system and corresponding methods of executing queries, where a subset of the query is executed on a portion of the database that is guaranteed to be strongly consistent so as to enable the query result be produced efficiently.
- FIG. 1 includes a block diagram illustrating an exemplary distributed client-server system 100 for transmitting database queries.
- Distributed Client-Server System 100 includes one or more Client System(s) 102 (each of which is referred to herein as “Client 102 ”), Server System(s) 106 -A . . . 106 -N (respectively referred to herein as “Server 106 ”) and a Communication Network 120 for connecting Clients 102 to Servers 106 .
- Communication Network 120 optionally includes the Internet, one or more local area networks (LANs), one or more wide area networks (WANs), other types of networks, or a combination of such networks.
- LANs local area networks
- WANs wide area networks
- Client 102 optionally includes Browser 110 and/or Search Application 112 .
- Browser 110 can be a general purpose Internet browser (sometimes called a Web browser) having a browser window used for displaying a query entry interface and query results.
- a web application user interface is optionally implemented using hypertext markup language (HTML) or extensible markup language (XML) elements that are rendered by Browser 110 .
- a query is, optionally, submitted via a standalone Search Application 112 . After a user submits a request for representations of entities matching a query through Browser 110 or a stand-alone Search Application 112 , Client 102 relays the request to Server 106 via Communication Network 120 .
- Server 106 identifies a plurality of matching entities and transfers search results including representations of the matching entities and, optionally, a set of display information back to Client 102 .
- Search Application 112 and/or Browser 110 uses the search results and display information to render a set of search results at Client 102 .
- Server System 106 includes Frontend Server 122 , Query Planner 124 , Query Engine 126 , Result Filter 128 , Entity Database 140 , one or more Indexes 142 , Transaction Log 143 , and Consistency Operation Module 146 .
- Frontend Server 122 relays a query received from Clients 102 to Query Planner 124 , and after the client query is executed, query results from Result Filter 128 back to Clients 102 .
- Query Planner 124 generates one or more queries based on syntax of the client query, logical relationships between database entities relevant to the client query, and/or other criteria, and transmits the one or more queries to Query Engine 126 .
- Query Engine 126 executes the one or more queries to retrieve entities matching the one or more queries from Entity Database 140 .
- Query Engine 126 identifies entities matching the one or more queries using one or more entity indexes.
- the one or more queries are not executed until Consistency Operation Module 146 has applied one or more write operations recorded in Transaction Log 143 to Entity Database 140 .
- query results are transmitted from Query Engine 126 to Result Filter 128 , where they are filtered and further transmitted to Frontend Server 122 , and then to Client 102 .
- Backend Process 144 communicates with the multiple server systems to synchronize entity changes between replicas of Entity Database 140 .
- Backend Process 144 is a background process that scans a set of databases (e.g., the Entity Database replicas) for rows that need to be synced.
- Servers 106 attempt to perform the data operation on all replicas of the database.
- Backend Process 144 eventually identifies this entity as needing to be synced (e.g., during a scan of the databases) and performs a sync operation to synchronize the entity across the replicas of the database.
- FIG. 2 is a block diagram illustrating a Client System 102 (also referred to herein as “Client 102 ”) in accordance with some embodiments.
- Client 102 typically includes one or more processing units CPU(s) 202 (also herein called processors), one or more network or other Communication Interfaces 204 , Memory 206 a User Interface 205 comprising a display device and a keyboard, mouse, touchpad, touchscreen or other input device, and one or more Communication Buses 208 for interconnecting these components.
- Communication Buses 208 optionally include circuitry (sometimes called a chipset) that interconnects and controls communications between system components.
- Memory 206 typically includes high-speed random access memory, such as DRAM, SRAM, DDR RAM or other random access solid state memory devices; and optionally includes non-volatile memory, such as one or more magnetic disk storage devices, optical disk storage devices, flash memory devices, or other non-volatile solid state storage devices. Memory 206 optionally includes one or more storage devices remotely located from the CPU(s) 202 . Memory 206 , or alternatively the non-volatile memory device(s) within Memory 206 , comprises a non-transitory computer readable storage medium. In some embodiments, Memory 206 or alternatively the non-transitory computer readable storage medium stores the following programs, modules and data structures, or a subset thereof:
- each of the above identified elements is stored in one or more of the previously mentioned memory devices, and corresponds to a set of instructions for performing a function described above.
- the above identified modules or programs i.e., sets of instructions
- Memory 206 optionally stores a subset of the modules and data structures identified above.
- Memory 206 may store additional modules and data structures not described above.
- FIG. 3 is a block diagram illustrating a Server System 106 (also referred to herein as “Server 106 ”) in accordance with some embodiments.
- Server 106 typically includes one or more processing units CPU(s) 302 (also herein called processors), one or more network or other Communications Interfaces 304 , Memory 306 , and one or more Communication Buses 308 for interconnecting these components.
- Communication Buses 308 optionally include circuitry (sometimes called a chipset) that interconnects and controls communications between system components.
- Memory 306 includes high-speed random access memory, such as DRAM, SRAM, DDR RAM or other random access solid state memory devices; and optionally includes non-volatile memory, such as one or more magnetic disk storage devices, optical disk storage devices, flash memory devices, or other non-volatile solid state storage devices. Memory 306 optionally includes one or more storage devices remotely located from the CPU(s) 302 . Memory 306 , or alternatively the non-volatile memory device(s) within Memory 306 , comprises a non-transitory computer readable storage medium. In some embodiments, Memory 306 or alternatively the non-transitory computer readable storage medium stores the following programs, modules and data structures, or a subset thereof:
- each of the above identified elements is stored in one or more of the previously mentioned memory devices, and corresponds to a set of instructions for performing a function described above.
- the above identified modules or programs i.e., sets of instructions
- Memory 306 optionally stores a subset of the modules and data structures identified above.
- Memory 306 optionally stores additional modules and data structures not described above.
- FIG. 3 shows a “Server System” 106
- FIG. 3 is intended more as functional description of the various features which may be present in a set of servers than as a structural schematic of the embodiments described herein.
- items shown separately could be combined and some items could be separated.
- some items shown separately in FIG. 3 could be implemented on single servers and single items could be implemented by one or more servers.
- the actual number of servers used to implement a Server System 106 and how features are allocated among them will vary from one implementation to another, and optionally depends in part on the amount of data traffic that the system must handle during peak usage periods as well as during average usage periods.
- FIG. 4A illustrates an example of entities stored in Entity Database 140 , in accordance with some embodiments.
- entities have Keys 402 , Group IDs 404 , and Properties 406 .
- a respective Key 402 uniquely identifies an entity.
- a key also includes an Entity ID associated with the entity, for example an identifier assigned by Server 106 ).
- An entity optionally includes a Group ID 404 , which provides information indicating that the entity is part of a respective group of entities (e.g., other entities that share the same Group ID).
- entities having a same respective Group ID are stored consecutively in Entity Database 140 (e.g., in a portion or partition of Entity Database 140 that is associated with the respective Group ID).
- entities having the same Group ID are not stored consecutively.
- groups of entities in a database are identified using one or more indexes that are sorted in accordance with the Group IDs or other properties of the entities so that index entries for entities having a same respective Group ID (or other property) are located proximate to each other in an index portion that is associated with the Group ID (or other property).
- an entity also has one or more properties.
- the properties optionally have one or more possible values of different types, including one or more of: integers, floating point values, strings, dates, and binary data.
- a property for a respective entity has a single value.
- a property for a respective entity is enabled to have one or more values.
- the property “Media” has a plurality of possible values including one or more of “Video,” “Audio” and/or “Text.”
- a property with multiple values tests whether any of the values meets the filter.
- the values of these properties can be used either as predefined sort parameters for sorting indexes or to determine whether respective entities meet filter criteria.
- An entity can be requested by Client 102 either by requesting an entity directly by transmitting a request for the entity associated with a particular key, or by transmitting a query that matches the entity's properties and causes Server 106 to identify the entity using the one or more indexes.
- the Keys 402 and/or Properties 406 shown in FIG. 4A are, optionally, used to identify groups of entities.
- the keys and/or properties serve the purpose of the Group IDs 404 shown in FIG. 4A and separate Group IDs are not needed.
- keys of entities in a group provide an indication of the membership of the entities in the group (e.g., a respective key of a respective entity includes information enables other entities associated with the respective entity to be identified).
- the keys of all of the entities in a respective group of entities include a shared “group key” or a common ancestor key.
- entities stored in Entity Database 140 are organized in a tree-like structure and the key of a child entity includes a representation of the key of the parent entity.
- a group can be defined as all entities that are children of “entity X” or all entities that are related to “entity X.”
- a search query specifies that results to a portion of the search query are to be strongly consistent for blog posts authored by a particular user, and content (e.g., blog comments) generated by a user are generated as child entities of an entity representing the user.
- keys of the blog comments (which each include a representation of the key of the entity representing the user) are used to identify a group of entities corresponding blog comments that were authored by the user (e.g., by identifying entities in a portion of an index that is sorted by key where the keys start with a key of the entity representing the user).
- FIG. 4B includes a block diagram illustrating a set of indexes for a plurality of entities, in accordance with some embodiments.
- Index 142 (of entities from Entity Database 140 ) is sorted in accordance with Group ID (e.g., in FIG. 4B the index entries are sorted monotonically in alphabetical order by Group ID).
- Group ID e.g., in FIG. 4B the index entries are sorted monotonically in alphabetical order by Group ID.
- the index entries in Index 142 are organized in groups in accordance with their respective Group IDs. For example, in FIG.
- index entries for multiple entities are organized consecutively in Index 142 despite the fact that the entities associated with those index entries are not stored consecutively in Entity Database 140 , as illustrated in FIG. 4A .
- the sorting of Index 142 enables a group of entities to be identified quickly and efficiently even if the entities themselves are not stored consecutively in Entity Database 140 .
- FIG. 4C illustrates an example of a transaction log in accordance with some embodiments.
- Transaction Log 143 sometimes called a pending transaction log, includes a plurality of transaction entries, where the respective transaction entries include a transaction payload (e.g., instructions to perform a transaction operation) and transaction target information indicating a target of the transaction.
- Transaction Log 143 includes transaction entries representing a plurality of data operations (e.g., Operations 402 , 404 , 406 , 408 and 410 ). These data operations are interactions with data items (e.g., requests to read, write, delete and/or otherwise modify data items) that have been requested by respective clients but not yet been applied to entities stored in Entity Database 140 .
- data items e.g., requests to read, write, delete and/or otherwise modify data items
- the transaction target information for respective transaction entries includes unique identifiers for the target entities (e.g., keys). In some embodiments, or for some transactions, the transaction target information for respective transaction entries includes information enabling the target entities to be identified using a search query (e.g., a set of properties and/or Group IDs to be used as query terms for a query).
- a search query e.g., a set of properties and/or Group IDs to be used as query terms for a query.
- Entity 701 continues to exist in Entity Database 140 (the dotted lines indicate the removal of Entity 701 is requested but not yet applied).
- the corresponding transaction entry is deleted from Transaction Log 143 .
- FIG. 4D illustrates an example of a query that is executed as multiple queries that are subject to different consistency requirements (e.g., a first query with eventual consistency and second query with strong consistency).
- a database or a portion of a database is strongly consistent if changes to entities that result from acknowledged data operations are visible to subsequent read operations that would return entities from the database or the portion of the database.
- a database or a portion of a database are not strongly consistent if changes to entities that result from acknowledged data operations are not guaranteed to be visible to subsequent read operations that would return entities from the database or the portion of the database.
- a database or portion thereof that is not strongly consistent can be made “eventually” consistent by running a background synchronization process (e.g., Backend Process 144 in FIG. 1 ) to synchronizes entities across one or more databases and associated replicas that have been added, deleted or modified.
- a background synchronization process e.g., Backend Process 144 in FIG. 1
- a portion of a database is strongly consistent when all of the transaction logs for entities stored in the portion of the database have been applied, and a portion of a database is eventually consistent when there is no guarantee that all of the transaction logs for entities stored in the portion of the database have been applied but there is some background process that eventually applies transaction logs and synchronizes entities across the one or more databases and replicas thereof.
- a current user submits a search Query 412 for blog comments left by all users (including the current user).
- the current user will only have independent knowledge of data operations that have been performed on the user's own posts.
- the results for the search for blog comments are not completely up to date (e.g., not strongly consistent) with respect to content (e.g., blog comments) generated by other users.
- the user-submitted search query is divided into two search queries (e.g., Query 414 and Query 418 ) generated based on Query 412 , where one of the search queries (e.g., Query 414 , which is a search of all blog comments by all users, optionally including the current user) is eventually consistent, and the other search query (e.g., Query 416 , which is a search of all blog comments by the current user) is strongly consistent.
- search queries e.g., Query 414 , which is a search of all blog comments by all users, optionally including the current user
- the other search query e.g., Query 416 , which is a search of all blog comments by the current user
- Query Results 416 may also correspond to entities that have been modified but the modifications are not yet observable because Query Results 416 is not strongly consistent (e.g., other results may be associated with corresponding data operations modifying or deleting the entities where the data operations have been acknowledged and placed in a transaction log but have not yet been applied).
- Query 418 a query for a search of blog comments by current user, is executed with strong consistency.
- Query 418 is executed in parallel with Query 414 .
- Query 414 and Query 418 are executed serially (e.g., Query 418 is executed before or after Query 414 ).
- strong consistency is achieved by performing a consistency operation on entities relevant to Query 418 (e.g., entities related to the current user) before generating query results.
- the consistency operation includes applying data operations involving entities relevant to a query—in this case, applying the data operation corresponding to Transaction Entry 404 from Transaction Log 143 , because the data operation corresponding to Transaction Entry 404 involves Entity 701, which has a Group ID that matches the Group ID of the current user.
- Entity 701 is removed from Entity Database 140 .
- Query Result 420 including a result corresponding to Entity 2 but not a result corresponding to Entity 701 (which has been deleted), is then generated by running the query against the updated portion of Entity Database 140 .
- the transaction logs will include transaction entries corresponding to data operations adding one or more new entities to the group associated with the current user.
- the newly added entities will also be included in Query Result 420 even though they would not necessarily be included in Query Result 416 , as Query Result 416 was generated without guaranteeing strong consistency (e.g., without guaranteeing that the transaction logs had been applied).
- Step 422 eventually consistent Query Results 416 and strongly consistent Query Results 420 are merged into a merged set of Results 424 in accordance with some embodiments.
- a merged set of Results 424 is generated by merging the modified Query Results 416 and Query Result 420 (the bold lines surrounding the result corresponding to Entity 2 in Query Result 422 indicates that it is the result corresponding to Entity 2 that was retrieved via strongly consistent Query Result 420 ).
- FIG. 5 includes a flowchart illustrating a method for receiving from a client system and executing queries with variable consistency at a server system and returning query results back to the client system, in accordance with some embodiments.
- Method 500 is, optionally, governed by instructions that are stored in a non-transitory computer readable storage medium and that are executed by one or more processors of one or more servers (e.g., Server 106 , FIG. 3 ).
- Each of the operations shown in FIG. 5 typically corresponds to instructions stored in a computer memory or non-transitory computer readable storage medium (e.g., memory 306 of Server 106 in FIG. 3 ).
- the non-transitory computer readable storage medium includes a magnetic or optical disk storage device, solid state storage devices such as Flash memory, or other non-volatile memory device or devices.
- the computer readable instructions stored on the computer readable storage medium include one or more of: source code, assembly language code, object code, or other instruction format that is interpreted or executed by one or more processors.
- some operations in method 500 may be combined and/or the order of some operations may be changed from the order shown in FIG. 5 .
- a plurality of entities are stored ( 502 ) in the one or more databases on Server 106 .
- the one or more databases are stored across several Servers 106 .
- Entity Database 140 in FIG. 1 can include one or more databases spread across one or more Servers 106 .
- multiple replicas of Entity Database 140 are stored on different servers (e.g., Server 106 -A, Server 106 -N, etc.)
- Client 102 sends ( 504 ) one or more client specified queries to Server 106 .
- Server 106 splits ( 506 ) a single respective client-specified query into a first query and a second query.
- Client 102 sends two queries to Server 106 , where the two queries have different consistency requirements.
- the first and second queries described in greater detail below are generated by Server 106 from a common client-specified query while in other embodiments, the first and second queries are received from Client 102 .
- the first query is executed ( 508 ) against a first portion of the one or more databases to generate a first set of one or more results.
- the first portion of the one or more databases against which the first query is executed is selected ( 510 ) so as to exclude a second portion of the one or more databases.
- the first portion of the one or more databases is selected so as to avoid generating duplicate results to those that will be retrieved by the second query (e.g., the query executed on the second portion of the database).
- the first set of results is filtered ( 512 ) to remove results corresponding to entities that could have been retrieved by the second query.
- Server 106 first performs ( 514 ) a consistency operation that guarantees that the second portion of the one or more databases is strongly consistent (e.g., the transaction logs relating to entities that are stored in the second portion of the database are applied to the entities in the second portion of the database prior to executing the second query).
- the consistency operation includes a determination that all of the relevant transaction logs have been applied, and thus the consistency operation does not necessarily include applying any additional transaction logs.
- the second query is then executed ( 516 ) against the second portion of the one or more databases, to generate a second set of one or more results.
- the first query and second query will be performed at different times instead of being performed concurrently. However, it is typically faster to run the first query and the second query in parallel, as the results of the first query and the results of the second query are generally independent of each other.
- the first set of one or more results are merged ( 518 ) with the second set of one or more results.
- the merged results are then sent ( 520 ) by Server 106 to Client 102 , where the results are received ( 522 ) and optionally are further processed.
- FIGS. 6A-6B include a flowchart representing a method for executing a query at a server system, according to certain embodiments.
- Method 600 is, optionally, governed by instructions that are stored in a non-transitory computer readable storage medium and that are executed by one or more processors of one or more servers (e.g., Server 106 , FIG. 3 ).
- each of the operations shown in FIGS. 6A-6B corresponds to instructions stored in a computer memory or non-transitory computer readable storage medium (e.g., memory 306 of Server 106 in FIG. 3 ).
- the computer readable storage medium includes a magnetic or optical disk storage device, solid state storage devices such as Flash memory, or other non-volatile memory device or devices.
- the computer readable instructions stored on the computer readable storage medium include one or more of: source code, assembly language code, object code, or other instruction format that is interpreted or executed by one or more processors.
- some operations in method 600 may be combined and/or the order of some operations may be changed from the order shown in FIGS. 6A-6B .
- a plurality of entities is stored ( 602 ) in one or more databases.
- the one or more databases are stored across one or more Servers 106 (e.g., Server 106 -A and Server 106 -N in FIG. 1 ). Strong consistency of these entities is not guaranteed by the one or more databases.
- the plurality of the entities stored in the one or more databases are organized ( 604 ) in groups, a respective group having one or more entities.
- the entities in a group include information that indicates those entities are part of the group.
- the information indicating that entities are part of a respective group includes one or more of: a predefined parameter specifying that the entities are part of the respective group (for example, Group ID 404 in FIGS. 4A-4B ), a shared group key, or a common ancestor key if the one or more databases are organized in a tree-like structure and a respective key for a child entity includes a representation of a respective key of a parent entity.
- the one or more databases include ( 606 ) a first replica and a second replica of a respective database.
- the first replica and the second replica are not fully synchronized. For example, when a respective entity is deleted from a first database replica, the respective entity continues to exist on a second database replica until the second database replica is synchronized with the first database replica.
- data operations requested but not yet applied to a database, or applied to one database replica but not applied to all of the replicas of the database are recorded in one or more transaction logs.
- applying the data operations in the one or more transaction logs that are associated with entities in a respective portion of the database will guarantee that the respective portion of the database is strongly consistent (e.g., up-to-date).
- Server 106 receives ( 608 ) a client-specified query. In some embodiments, Server 106 generates ( 610 ) a first query and a second query from the client-specified query, where the first query is to be executed against a first portion of the one or more databases and the second query is to be executed against a second portion of the one or more databases. In some embodiments, the first query and the second query are received from a client or are generated based on a system-specified query.
- the first query and the second query are generated from the client-specified query ( 612 ) based on syntax of the client-specified query that indicates that a portion of query results to be returned in response to the client-specified query requires guaranteed strong consistency with respect to the second portion of the one or more databases.
- the entities are grouped into groups of entities (e.g., by Group ID, ancestor key or the like).
- the second portion of the one or more databases is selected to include at least a respective group of entities from the entities stored in the one or more databases (e.g., all of the entities having Group IDs indicating that the entities are associated with the user “Gilbert”).
- strong consistency is not required for any portion of a query unless specifically requested or indicated (for example, by the syntax shown above).
- queries are executed without guaranteed strong consistency by default.
- the first query and the second query are generated ( 614 ) based on a determination by Server 106 , in accordance with predefined criteria, that a portion of the merged set of results returned in response to the client-specified query is to be strongly consistent with respect to the second portion of the one or more databases.
- Server 106 determines that strong consistency is required with respect to a portion of the client-specified query because that portion of the client-specified query has a high likelihood of lacking strong consistency.
- Server 106 determines that strong consistency is required with respect to a respective portion of the client-specified query because a lack of strong consistency in the results would be highly visible and undesirable to a user, even though the client-specified query received by Server 106 does not explicitly request that the respective portion of the results be strongly consistent. For example, a client-specified query requests recent blog comments including blog comments by the current user.
- Server 106 will determine that a portion of the client-specified query retrieving blog comments by the current user is to be strongly consistent because the user would notice if a recently added blog comment was not returned as one of the results, if a recently deleted blog comment was returned as one of the results and/or if a recently modified blog comment was returned without modifications made by the user.
- a portion of the client-specified query for retrieving blog comments made by other users will not, in many situations, be strongly consistent, as the user will not typically notice the lack of strong consistency for other users' blog comments.
- Server 106 executes ( 616 ) the first query against a first portion of the one or more databases to generate a first set of one or more results.
- the first set of one or more results is not guaranteed to be strongly consistent.
- the first portion of the one or more database is selected ( 618 ) so as to exclude the second portion of the one or more databases (e.g., “pre-filtering” the first set of results so as to remove results from the first set of results that would have been retrieved by the second search query). For example, after determining that the second query is to be a strongly consistent query executed against a second portion of the one or more databases, Server 106 excludes the second portion of the one or more databases from the first portion of the databases before executing the first query.
- second portion of the one or more databases is not excluded from the first portion of the one or more databases.
- the second portion of the databases is a subset of the first portion of the one or more databases and the results from the first query are filtered after performing the first search query (e.g., “post-filtering” the first set of results so as to remove results that would have been retrieved by the second query, as described in greater detail below).
- Server 106 Concurrently with or in sequence with (e.g., before or after) the execution of the first query, Server 106 executes ( 620 ) the second query against the second portion of the one or more databases. While executing the second query, Server 106 performs ( 622 ) a consistency operation that guarantees the second portion of the one or more databases to be strongly consistent. In some embodiments, the consistency operation includes determining ( 624 ) whether a transaction log includes write operations that have been requested but not yet applied to entities stored in the second portion of the one or more databases.
- Server 106 applies ( 628 ) the write operations that have not been applied and then verifies ( 632 ) that the second portion of the one or more databases is strongly consistent.
- the transaction log does not include any write operations that have been requested but not applied to entities stored in the second portion (e.g., the determination is No ( 630 ))
- Server 106 verifies ( 632 ) that the second portion of the one or more databases is strongly consistent.
- the consistency operation does not necessarily include applying any transactions from the transaction log.
- the consistency operation is an operation that guarantees that the second portion of the database is strongly consistent and, if necessary, applies transactions from transaction logs to make the second portion strongly consistent.
- Server 106 After performing the consistency operation and verifying the second portion to be strongly consistent, Server 106 generates ( 634 ) the second set of one or more results from the second potion of the one or more databases.
- Server 106 merges ( 636 ) the first set of the results and the second set of the results to generate a merged set of results.
- some results from the first set are removed (e.g., so as to remove duplicate results in the first set of results that are also in the second set of results).
- all results in the first set of results that were retrieved from the second portion of the one or more databases are removed ( 638 ) from the first set of results.
- these entities are removed from the first set of results before it is merged with the second set of the results.
- the respective entity is removed ( 640 ) from the first set of results before the results are merged.
- Entity 2 is included in both Query Results 416 and Query Result 420 .
- the merged set of results is transmitted ( 642 ) to a client (e.g., the client from which the client-specified query was received).
- Client 102 submits a search query
- Server 106 executes multiple queries subject to different consistency requirements and produces a merged set of results that includes both some results with guaranteed strong consistency and some results that are not guaranteed to have strong consistency.
- These merged results can be produced without requiring application of all of the transactions in all of the transaction logs to the entire database, while still guaranteeing strong consistency for a portion of the results. Consequently, in these implementations, Client 102 is provided with results that have variable consistency and are guaranteed to be strongly consistent where a user of Client 102 is likely to notice a lack of strong consistency and are not guaranteed to be strongly consistent (e.g., are eventually consistent) where the user is not likely to notice a lack of strong consistency.
- FIGS. 6A-6B have been described are merely exemplary and are not intended to indicate that the described order is the only order in which the operations could be performed.
- One of ordinary skill in the art would recognize various ways to reorder the operations described herein. Additionally, it should be noted that details of other processes described herein with respect to methods 500 (described herein with reference to FIG. 5 ) are also applicable in an analogous manner to method 600 described above with respect to FIGS. 6A-6B .
- the client-specified query, consistency operation, portions of the databases, and search results described above with reference to method 600 may have one or more of the characteristics of the client-specified query, consistency operation, portions of the databases, and search results described herein with reference to method 500 .
- these details are not repeated here.
Abstract
Description
-
-
Operating System 210 that includes procedures for handling various basic system services and for performing hardware dependent tasks; - Network Communication Module (or instructions) 212 that is used for connecting
Client 102 to other computers (e.g., Server 106) via one or more Network Interfaces 204 (wired or wireless) and one or more Communication Networks 120 (FIG. 1 ), such as the Internet, other wide area networks, local area networks, metropolitan area networks, and so on; -
Web Browser 110 for loading web pages such as aSearch Web Page 214, which optionally includes code for executing a Search Application 112-a as an embedded application inSearch Web Page 214, where Search Application 112-a sends requests toServer 106 and displays data received fromServer 106; - dedicated Search Application 112-b (e.g., a stand-alone email client) for transmitting queries to
Server 106 and displaying query results received fromServer 106; and - optionally,
Data 216 includes cached search data (e.g., recently accessed query results, recent queries, etc.) corresponding to one or more prior queries.
-
-
-
Operating System 310 that includes procedures for handling various basic system services and for performing hardware dependent tasks; - Network Communication Module (or instructions) 312 that is used for connecting
Server 106 to other computers (e.g., Client 102) via one or more Network Interfaces 304 (wired or wireless) and one or more Communication Networks 102 (FIG. 1 ), such as the Internet, other wide area networks, local area networks, metropolitan area networks, and so on; -
Frontend Server 122 for coordinating communications betweenServer 106,Clients 102,Result Filter 128, and any other computer systems with whichServer 106 communicates; -
Query Planner 124 for generating one or more queries from a client-specified query received fromClients 102 and transmitting the one or more queries to QueryEngine 126 for execution; in some implementations QueryPlanner 124 includes one or more of:-
Logic Processor 320 for detecting logical relationships between query terms (e.g., search terms) in the client-specified query and optionally using the logical relationships to divide the query terms into one or more portions (e.g., sub-queries); -
Syntax Processor 322 for parsing syntax of the client-specified query to determine the presence of consistency requirements, if any, to which the client-specified query or portions thereof are subject; and -
Query Generator 324 for generating one or more queries from the client-specified query in accordance with information fromLogic Processor 320 and/or Syntax Processor 322 (e.g., splitting a particular portion of a client-specified query into two or more queries where the two or more queries are subject to different consistency requirements);
-
-
Query Engine 126 for executing the one or more queries received fromQuery Planner 124 and transmitting query results to ResultFilter 128; -
Consistency Operation Module 146 for applying write operations recorded inTransaction Log 143 toEntity Database 140; -
Result Filter 128 for merging and filtering query results received fromQuery Engine 126 and transmitting the filtered results toFront End 122; -
Index Generator 340 for generating indexes for use in executing search queries, in someimplementations Index Generator 340 generates a large number of indexes (e.g., at least one index for each property that can be used to sort and/or filter search results) so that for each possible combination of filters and sort orders in a query, there exists an index including an index portion where the index entries matching the combination of filters are arranged in a contiguous block of index entries sorted in the sort order; -
Entity Database 140 for storing entities or information about entities; - one or
more Indexes 142 for storing information about entities and properties of the entities, typically theIndexes 142 are each sorted in accordance with values of the properties for the entities, as described in greater detail below with reference toFIGS. 4A-4D ; and -
Transaction Log 143 for recording data operations that have been requested and, optionally, acknowledged but not yet applied to entities stored inEntity Database 140.
-
Claims (21)
Priority Applications (1)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US13/759,932 US9390131B1 (en) | 2012-02-05 | 2013-02-05 | Executing queries subject to different consistency requirements |
Applications Claiming Priority (2)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US201261595139P | 2012-02-05 | 2012-02-05 | |
US13/759,932 US9390131B1 (en) | 2012-02-05 | 2013-02-05 | Executing queries subject to different consistency requirements |
Publications (1)
Publication Number | Publication Date |
---|---|
US9390131B1 true US9390131B1 (en) | 2016-07-12 |
Family
ID=56321054
Family Applications (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
US13/759,932 Active 2033-05-17 US9390131B1 (en) | 2012-02-05 | 2013-02-05 | Executing queries subject to different consistency requirements |
Country Status (1)
Country | Link |
---|---|
US (1) | US9390131B1 (en) |
Cited By (5)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20160357806A1 (en) * | 2015-06-04 | 2016-12-08 | Citrix Systems, Inc. | Server-based management for querying eventually-consistent database |
US10635597B2 (en) | 2018-02-28 | 2020-04-28 | Citrix Systems, Inc. | Read caching with early refresh for eventually-consistent data store |
CN111352992A (en) * | 2018-12-21 | 2020-06-30 | 北京金山云网络技术有限公司 | Data consistency detection method and device and server |
US10713256B2 (en) * | 2018-11-26 | 2020-07-14 | Bank Of America Corporation | Database tool |
US11556710B2 (en) * | 2018-05-11 | 2023-01-17 | International Business Machines Corporation | Processing entity groups to generate analytics |
Citations (6)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US6243710B1 (en) * | 1997-12-22 | 2001-06-05 | Sun Microsystems, Inc. | Methods and apparatus for efficiently splitting query execution across client and server in an object-relational mapping |
US20080077558A1 (en) * | 2004-03-31 | 2008-03-27 | Lawrence Stephen R | Systems and methods for generating multiple implicit search queries |
US20080114816A1 (en) * | 2006-11-10 | 2008-05-15 | Sybase, Inc. | Replication system with methodology for replicating database sequences |
US20110004608A1 (en) * | 2009-07-02 | 2011-01-06 | Microsoft Corporation | Combining and re-ranking search results from multiple sources |
US20110202541A1 (en) * | 2010-02-12 | 2011-08-18 | Microsoft Corporation | Rapid update of index metadata |
US20120197928A1 (en) * | 2011-01-31 | 2012-08-02 | Splunk Inc. | Real time searching and reporting |
-
2013
- 2013-02-05 US US13/759,932 patent/US9390131B1/en active Active
Patent Citations (6)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US6243710B1 (en) * | 1997-12-22 | 2001-06-05 | Sun Microsystems, Inc. | Methods and apparatus for efficiently splitting query execution across client and server in an object-relational mapping |
US20080077558A1 (en) * | 2004-03-31 | 2008-03-27 | Lawrence Stephen R | Systems and methods for generating multiple implicit search queries |
US20080114816A1 (en) * | 2006-11-10 | 2008-05-15 | Sybase, Inc. | Replication system with methodology for replicating database sequences |
US20110004608A1 (en) * | 2009-07-02 | 2011-01-06 | Microsoft Corporation | Combining and re-ranking search results from multiple sources |
US20110202541A1 (en) * | 2010-02-12 | 2011-08-18 | Microsoft Corporation | Rapid update of index metadata |
US20120197928A1 (en) * | 2011-01-31 | 2012-08-02 | Splunk Inc. | Real time searching and reporting |
Cited By (8)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20160357806A1 (en) * | 2015-06-04 | 2016-12-08 | Citrix Systems, Inc. | Server-based management for querying eventually-consistent database |
US9747339B2 (en) * | 2015-06-04 | 2017-08-29 | Getgo, Inc. | Server-based management for querying eventually-consistent database |
US10635597B2 (en) | 2018-02-28 | 2020-04-28 | Citrix Systems, Inc. | Read caching with early refresh for eventually-consistent data store |
US11556710B2 (en) * | 2018-05-11 | 2023-01-17 | International Business Machines Corporation | Processing entity groups to generate analytics |
US10713256B2 (en) * | 2018-11-26 | 2020-07-14 | Bank Of America Corporation | Database tool |
US11250000B2 (en) | 2018-11-26 | 2022-02-15 | Bank Of America Corporation | Database tool |
CN111352992A (en) * | 2018-12-21 | 2020-06-30 | 北京金山云网络技术有限公司 | Data consistency detection method and device and server |
CN111352992B (en) * | 2018-12-21 | 2023-09-29 | 北京金山云网络技术有限公司 | Data consistency detection method, device and server |
Similar Documents
Publication | Publication Date | Title |
---|---|---|
JP7113040B2 (en) | Versioned hierarchical data structure for distributed data stores | |
US9195698B2 (en) | Selectively retrieving search results in accordance with different logical relationships | |
EP3120261B1 (en) | Dependency-aware transaction batching for data replication | |
US11275774B2 (en) | Systems and methods for generating and using aggregated search indices and non-aggregated value storage | |
US9639542B2 (en) | Dynamic mapping of extensible datasets to relational database schemas | |
US8862588B1 (en) | Generating an empirically-determined schema for a schemaless database | |
EP2874077B1 (en) | Stateless database cache | |
US9495457B2 (en) | Batch crawl and fast crawl clusters for question and answer search engine | |
US10417265B2 (en) | High performance parallel indexing for forensics and electronic discovery | |
US20150186527A1 (en) | Question type detection for indexing in an offline system of question and answer search engine | |
AU2009258015B2 (en) | Paging hierarchical data | |
US9361384B2 (en) | Image extraction service for question and answer search engine | |
US20150186528A1 (en) | Request type detection for answer mode selection in an online system of a question and answer search engine | |
US9390131B1 (en) | Executing queries subject to different consistency requirements | |
EP3499388B1 (en) | Method and device for processing join query | |
US9734177B2 (en) | Index merge ordering | |
US20210042589A1 (en) | System and method for content-based data visualization using a universal knowledge graph | |
CN114461603A (en) | Multi-source heterogeneous data fusion method and device | |
CN110889023A (en) | Distributed multifunctional search engine of elastic search | |
US20150186514A1 (en) | Central aggregator architechture for question and answer search engine | |
US20130006979A1 (en) | Enhancing cluster analysis using document metadata | |
CN113722600A (en) | Data query method, device, equipment and product applied to big data | |
US9256644B1 (en) | System for identifying and investigating shared and derived content | |
US20150134917A1 (en) | Remote materialization of low velocity data | |
US11169979B2 (en) | Database-documentation propagation via temporal log backtracking |
Legal Events
Date | Code | Title | Description |
---|---|---|---|
AS | Assignment |
Owner name: GOOGLE INC., CALIFORNIAFree format text: ASSIGNMENT OF ASSIGNORS INTEREST;ASSIGNOR:FULLER, ALFRED R.K.;REEL/FRAME:030567/0169Effective date: 20130204 |
|
STCF | Information on status: patent grant |
Free format text: PATENTED CASE |
|
AS | Assignment |
Owner name: GOOGLE LLC, CALIFORNIAFree format text: CHANGE OF NAME;ASSIGNOR:GOOGLE INC.;REEL/FRAME:044566/0657Effective date: 20170929 |
|
MAFP | Maintenance fee payment |
Free format text: PAYMENT OF MAINTENANCE FEE, 4TH YEAR, LARGE ENTITY (ORIGINAL EVENT CODE: M1551); ENTITY STATUS OF PATENT OWNER: LARGE ENTITYYear of fee payment: 4 |
|
MAFP | Maintenance fee payment |
Free format text: PAYMENT OF MAINTENANCE FEE, 8TH YEAR, LARGE ENTITY (ORIGINAL EVENT CODE: M1552); ENTITY STATUS OF PATENT OWNER: LARGE ENTITYYear of fee payment: 8 |