EP2946310A1 - Unified searchable storage for resource-constrained and other devices - Google Patents
Unified searchable storage for resource-constrained and other devicesInfo
- Publication number
- EP2946310A1 EP2946310A1 EP13815266.5A EP13815266A EP2946310A1 EP 2946310 A1 EP2946310 A1 EP 2946310A1 EP 13815266 A EP13815266 A EP 13815266A EP 2946310 A1 EP2946310 A1 EP 2946310A1
- Authority
- EP
- European Patent Office
- Prior art keywords
- indexing
- search
- data
- application
- index
- Prior art date
- Legal status (The legal status is an assumption and is not a legal conclusion. Google has not performed a legal analysis and makes no representation as to the accuracy of the status listed.)
- Ceased
Links
Classifications
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F16/00—Information retrieval; Database structures therefor; File system structures therefor
- G06F16/20—Information retrieval; Database structures therefor; File system structures therefor of structured data, e.g. relational data
- G06F16/24—Querying
- G06F16/248—Presentation of query results
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F16/00—Information retrieval; Database structures therefor; File system structures therefor
- G06F16/30—Information retrieval; Database structures therefor; File system structures therefor of unstructured textual data
- G06F16/31—Indexing; Data structures therefor; Storage structures
Definitions
- the present disclosure relates to unified searchable storage for resource constrained devices.
- Search programs can allow a user to perform text searches, for example, of a user's e-mail, computer files, music, photos, chats and Web pages viewed.
- a device e.g., a desktop personal computer
- the software program can index the files in the computer. After initial indexing is completed, the software may continue to index files as needed.
- the indexed files then can be searched by a user, and results can be returned, for example, in a web browser.
- Some devices that store various types of files that a user may wish to search are resource-constrained in the sense that the devices may have, for example, a relatively slow central processing unit (CPU), limited random access memory (RAM) and/or limited disk storage.
- CPU central processing unit
- RAM random access memory
- disk storage In such resource-constrained environments, updating the storage and index can be inefficient, resulting in high background CPU usage and too much disk activity.
- some solutions do not scale easily to the desirable amount of data to be stored and searched. The lack of scalability can make it difficult, if not impossible, to include features such as fast unified searching and unified keyword and entity suggestions that span across multiple applications and databases.
- the present disclosure describes a data indexing and search service that resides locally on a device (e.g., a mobile phone) and that can host data for multiple applications on the device.
- a device e.g., a mobile phone
- unified search queries can be performed by the service without the need, in some cases, to start up multiple applications and open multiple databases.
- a computing device includes a user- interface including a search box and applications residing in the computing device, wherein each application includes a respective content provider.
- the computing device an index manager, a data indexing and search service residing in the computing device and providing an entry point to the index manager, and disk-backed storage (e.g., flash storage).
- the data indexing and search service is operable to obtain data from the content providers associated with respective ones of the applications.
- the index manager indexes the data from the content providers, and stores the indexed data in the disk-backed storage.
- the data index manager includes a query processor to handle execution of search queries received from the search box and received from any of the applications.
- the query processor handles execution of the search queries by searching the indexed data stored in the disk-backed storage and returning results based on the searching.
- Various implementations include one or more of the following features.
- the data indexing and search service in response to receiving a search query from a particular one of the applications, the data indexing and search service returns result only with respect to a corpus associated with the particular one of the applications.
- the data indexing and search service in response to receiving a search query from the search box, can return results with respect to all corpora associated with the applications or with respect to a subset of the corpora.
- the disk-backed storage stores a first index having a lexicon that maps terms contained in documents from a particular application to term identifiers, and a second index having a lexicon that maps terms to term identifiers and an offset into an index file. Indexing of the data can take place, for example, in the first index, which periodically can be merged into the second index.
- the lexicons can be implemented, for example, as file-backed tries.
- the indexing and search service performs indexing of data from a particular one of the applications in response to a request from the particular application to register with the indexing and search service.
- the indexing and search service also may perform indexing of data from a particular one of the applications in response to a request for indexing by the particular application.
- a method of indexing and searching data on a computing device includes binding a first application residing on the computing device to an indexing and search service residing on the computing device, and registering a corpus and a content provider, associated with the first application, with the indexing and search service. Data from files associated with the first application are indexed by the indexing and search service, and the indexed data is stored in disk-backed storage on the device. The indexing and search service then can be used to execute a search query from the first application. A similar process canbe performed with respect to other applications residing on the computing device.
- Some implementations include one or more of the following advantages. For example, storing all application indices in one place (i.e., in the same disk-backed flash storage) can facilitate faster universal searches. Furthermore, the disk-backed storage can be scalable and can provide, for example, statistics for predictive applications.
- the data indexing and search service can execute searches relatively quickly, and can use compressed storage with a relatively small footprint. The service can reduce the number of flash writes required and can allow write operations to include a greater amount of data (e.g., through the use of batching).
- FIG. 1 illustrates an example of a computing device that includes an on-device data indexing and search service.
- FIG. 2 is a flow chart illustrating an example of using the data indexing and search service.
- FIG. 3 is a flow chart illustrating another example of using the data indexing and search service.
- the present disclosure describes a data indexing and search service that resides locally on a device (e.g., a mobile phone) and that hosts the data for multiple applications on the device.
- the data indexing and service can provide an efficient, centralized on-device (offline) search and document store service, and can provide an open application programming interface (API) to the other applications on the device.
- API application programming interface
- the techniques can facilitate searching all corpora (or a subset of corpora) in the device, and can facilitate keyword suggestions across all corpora (or a subset of corpora).
- a privacy model is described to ensure that data (e.g., suggestions and search results) from one corpus does not appear in searches intended for another corpus.
- the techniques described here can be implemented, for example, on various types of resource-constrained devices, including handheld computing devices, such as mobile phones, tablets and personal digital assistants (PDAs).
- handheld computing devices such as mobile phones, tablets and personal digital assistants (PDAs).
- PDAs personal digital assistants
- the techniques also can be implemented on other computing devices, such as desktop personal computers, laptop computers.
- a computing device e.g., a mobile phone
- the device also stores one or more applications (e.g., applications A, B and C) that may be executed on the device.
- applications e.g., applications A, B and C
- An example of such an application is an e-mail application residing on the device.
- a data indexing and search service 14 pulls data (e.g., documents) from respective client content providers 15 associated with each application A, B, C, stores the data in a respective corpus 18 and indexes it.
- Corpora 18 can be stored, for example, in files in flash storage 20 on the computing device.
- Indexing and search service 14 serves as an entry point to an index manager 22, which implements a binder API 38, handles content synchronizations from the client applications, and encapsulates a thread where background processing takes place.
- Index manager 22 includes a document storage manager 26 that manages corpora 18 and a query processor 32 that handles the execution of search queries received from search box 12 or from one of the client applications A, B, C.
- the application delegates the search to service 14 rather than performing the search itself.
- Flash storage 20 also stores a lite index 28 and a main index 30.
- Lite index 28 can be updated on an ongoing basis and has a lexicon 34 that maps terms contained in the documents to term identifiers.
- Main index 30 serves as permanent index that stores the rest of the index.
- Lite index 28 can be merged periodically into permanent index 30, which has a lexicon 36 that maps terms to term identifiers and an offset into an index file.
- the lexicons 34, 36, indices 28, 30 and corpora 18 can be stored in separate files in disk-backed storage 20.
- the lexicons can be implemented, for example, as file-backed tries that are initialized by a disk read.
- an application A, B, C binds to and calls the service's Interface Definition Language Application Programming Interface ("IDL API") 38.
- IDL API Interface Definition Language Application Programming Interface
- Service 14 uses the content provider 15 in the application A, B, C to synchronize the application's data to its own store 20.
- a document can be referred to by a Uniform Resource Identifier (URI), which can be an arbitrary string determined by the client application.
- URI Uniform Resource Identifier
- FIG. 2 illustrates further details according to a particular implementation discussed in the following paragraphs.
- a client application A, B, C binds to service 14 (block 102).
- the client application then calls a Grant URI Permission function with respect to a corpus content provider 15 and registers the corpus and content provider with service 14 using a Registration function (block 104).
- a client application registers with service 14
- the client application provides an address for an API from which the service 14 can pull the content.
- Service 14 then synchronizes the client's data using the client's content provider 15 (block 106). Further details of the synchronization process are described below.
- the client application has new data for service 14, it calls a Request Indexing function (block 108), which causes service 14 to pull more data from the client's content provider 15 (block 110).
- a client application A, B, C can issue a keyword query or ask for suggestions based on a multi-word prefix (block 1 12). The queries and requests for suggestion are handled by service 14 (block 1 14).
- service 14 synchronizes documents and tags, which are properties of a document.
- a client application can dynamically change attributes of a document provided to service 14 and, as discussed below, a user can limit a search query to documents having specified features.
- documents can be uniquely referred to by an opaque string URI and can contain sections, which also can be indexed. For example, for an e-mail application, a document may be a single message, and its sections can include "From,” “To,” “Subject,” and "Body" lines.
- Such a document can include, for example, the following tags: "Inbox,” “Unread,” or “Sent.”
- the total data in the document may not exceed a predetermined amount.
- sections of the document may be truncated, starting, for example, with the longest section in that document.
- Synchronization data is a table keyed by a monotonically increasing action sequence number. Service 14 then applies those actions in that order.
- the respective content provider 15 returns the sequence numbers (e.g., arrival timestamps) in monotonically increasing order.
- a client application A, B, C can use a Get Corpus Status function to gain visibility into the processing of its data by service 14. For example, for any data that is committed, the client application can safely assume that service 14 will not ask for that data again. However, if the user deletes the service's data, the client application would need to re-register, in which case service 14 will request the data anew.
- a client application A, B, C can unregister a corpus, which makes the data no longer accessible; the data eventually is wiped from flash storage 20.
- indexing and searching can be performed by service 14. Indexing can be triggered either by registering a corpus, for example, when an application A, B or C first requests to use data indexing and searching service 14, or by requesting indexing. The tasks of polling application content providers, writing data to flash storage 20 and indexing occurs in a background thread. When registering a new corpus 18, indexing by service 14 commences immediately. When service 14 receives an indexing request with respect to an existing corpus 18, service 14 can delay indexing (e.g., by one second) in anticipation of receiving additional indexing requests.
- indexing takes place in batches of up to twenty documents or one hundred tags representing properties of documents.
- the application's content provider is requested to return at most this many documents for a given query. After this batch is indexed, another indexing task can be rescheduled on the thread immediately.
- the goal is to reduce large queries to the application's content provider and to allow for fairness among corpora 18 that need indexing. Indexing can be performed to completion (i.e., until no documents from any of the corpora 18 remain to be indexed).
- document storage manager 26 manages corpora 18. Each document from one of the applications A, B, C to be stored and indexed in a corresponding corpus 18 is compressed and appended to the file. Deletions and tags (i.e., document properties) can be marked in bitmaps indexed by document identifiers. The file also maintains a mapping from the corpus and URI to the document identifier.
- Term identifier document identifier pairs that indicate documents containing a particular term are appended into buffers in lite index 28 and main index 30.
- Indices 28, 30 then can return all terms matching a specified prefix or can return a list of document identifiers indexed under a specified term in response to a suggest or search query.
- Index files 28, 30 can store posting lists. For example, in some
- each block maintains a free list of byte arrays for posting lists, which can be in blocks of flash page size (e.g., 4K - 8K).
- Posting lists can be strictly ordered, for example, from the most recent document down (the default search result sort order) and contain "hits" (e.g., document identifiers) indicating documents that contain a specified term.
- posting list byte arrays are allocated in fixed sizes, roughly in powers of two, up to 1,000 hits, with each hit containing four bytes. If a term has more than 1,000 hits, the blocks are chained in a single linked list.
- a query is specified in free form and may have a maximum permissible length.
- Special operators supported by some implementations include the following:
- Search and suggest queries arrive through binder API 38 and are executed inline.
- query processor 32 parses the query (block 204) to determine corpus restrictions, tag restrictions and section modifiers (e.g., the "To" line or he "Subject" line in an e-mail message).
- corpus restrictions, tag restrictions and section modifiers e.g., the "To" line or he "Subject" line in an e-mail message.
- a buffer in one of lite index 28 or main index 30 can be sorted by term identifier (block 206).
- a binary search for the term of interest is performed (block 208), and a list of the document identifiers for the documents containing the search term is obtained (block 210).
- query processor 32 looks up the terms in both lite index 28 and main index 30, retrieves a certain portion of document identifiers (up to a parameter "num to score") document identifiers from both indices, and in the case of multiple term searches, obtains the intersection (or union) of the posting lists.
- Query processor 32 can look up a document score array (i.e., a score dictated by each application such as the date of the document) to map each document identifier to its score and computes the top document identifiers by score.
- document identifiers are used to look up content corresponding to the document identifiers. A part of the document content is returned for each document based on query parameters. For subsequent queries, if new documents are indexed, then new terms that were added, for example, to the lite index 28 can be sorted separately and then combined with a previously-sorted list.
- index 24 To manage the disk-backed flash storage 20, storage 20 is accessed through index 24. New documents can be appended immediately to document store as they are added. The newly added documents then are indexed. Although the index and lexicon have two segments (i.e., main and lite), indexing takes place in lite index 28. During indexing, all lexicon and index changes are written to lite index 28 until a flush function is called. Index hits are accumulated in a file, but no explicit disk sync occurs until the flush function is called, which merges lite index 28 into main index 30, erases lite index 28 and calls a fsync function for the main index 30 to commit the buffered data. The flush function can be scheduled when lite index limits are reached or when a timer expires (e.g., once a day).
- query processor 32 searches both lite index 28 and main index 30.
- a lock prevents searches from traversing partially written data; thus, no searches can take place during the flush operation.
- a flush operation takes 2-10 seconds, and about six hundred e-mail messages can be buffered in lite index 28 before a flush operation is required.
- a compaction process is performed to create new copies of the corpus files 18, index files 28, 30 and lexicon files 34, 36. All deleted document identifiers are erased, the document identifier space is re-compacted, and a new index is written based on the new document identifiers. The document identifiers are re-ordered by highest scoring first. A new lexicon points to the posting list locations in the new index. After the compaction is completed, a fsync function is called with respect to all files. The new files are then used. No indexing occurs during compaction, but searches can proceed using the old index.
- the index is like a cache; it contains no irrecoverable data, and all data can be re-created from corpus 18 or, if necessary, re-synced from the content source (e.g., the content provider associated with application A, B or C).
- the content source e.g., the content provider associated with application A, B or C.
- data can be split conceptually into "ground truth" data and recoverable data. If ground truth
- Ground truth data can include, for example, document store, document identifier mapper (maps a document identifier to an offset in the document store), and tag bitmaps.
- Recoverable data can include, for example, a URI map that maps a URI to a document identifier, a document score table that maps a document identifier to a document store, as well as index, lexicon and term properties.
- Ground truth data is append-only. Therefore, flushed ground truth data cannot be corrupted by power loss.
- the lite index 28 and lexicon 34 can use read/write MAP_SHARED file- backed data structures that include updating cyclic redundancy checks (CRCs).
- CRCs cyclic redundancy checks
- each random-write array can be protected by a CRC.
- the file-backed data structure receives an onSleep callback, it updates its CRC.
- Two strategies can be used to update the CRC. First, a small number of random updates can be buffered and used to compute an incremental CRC, whereas large numbers of updates can be clear the buffer and fall back on a complete CRC re-computation. Upon startup, consistency can be checked against the CRCs to ensure that inconsistent data is not loaded and used.
- the main index 30 and lexicon 36 can use MAP_PRIVATE read-only file- backed data that does not modify the file data between flushes. Therefore the main index 30 and lexicon 36 are immune to file corruption between flushes.
- an in_flushing bit is synchronized to flash storage 20, the flush is completed, and then the bit is unset and main index 30 is re-synchronized to flash storage 20.
- the system Upon startup, if the in_flushing bit is set, the system assumes that the files are corrupted and re-constructs them from the ground truth data.
- Consistency can be coordinated between index manager 22, which synchronizes content with client applications A, B and C, and index implementation. For example, upon initialization, index manager 22 passes down the last flush status to index 24. The flush status contains the last flushed (i.e., committed) document store size. Index 24 responds with an indication of how much content it was able to successfully recover since the last flush point and responds with the per-corpus last sequence number it has seen in the recovered region. Index manager 22 resets its last sequence number for each corpus 18 to the last flushed sequence number plus any recovered sequence numbers from index 24. After this document store initialization is complete, the index is initialized. If lite index 28 is corrupted, documents seen since the last flush are re-indexed. If main index 30 is corrupted, the entire index is rebuilt.
- last flush status contains the last flushed (i.e., committed) document store size.
- Index 24 responds with an indication of how much content it was able to successfully recover since the last flush point and responds with the per-corpus last
- data indexing and search service 14 remains active as long as a client application A, B, C is bound to it or the background thread has work to perform.
- index manager 22 receives an "onSleep" event to cache service 14.
- the framework i.e., the device's operating system
- the data and code can be readily available in case the user wants to execute back-to-back queries.
- the service also creates a periodic maintenance alarm that runs, for example, every day at 2:00 a.m. local time. If, for example, the device's battery is low
- the maintenance alarm is retried every hour until it succeeds.
- the maintenance executes the flush function (i.e., disk commit) every day and a compaction either every week or when the free space is less than a predetermined amount (e.g., 10%) of the allowed space.
- unified search queries can be performed by service 14 without the need to start up multiple applications and open multiple databases. Storing all application indices in one place can facilitate faster universal searches. In some cases, fast, relevancy- scored suggestions from the entire lexicon can be provided. Furthermore, storage 20 can be scalable and can serve, for example, statistics for predictive applications. Data indexing and search service 14 can execute searches relatively quickly, and uses compressed storage with a relatively small footprint. The service 14 can reduces the number of flash writes required and can allow write operations to include a greater amount of data (e.g., through the use of batching). Service 14 can fetch a document by using the document's URL Also, in the illustrated implementation, service 14 does not have a durable write interface; thus, service 14 decides when to commit data, not client applications.
- each application A, B, C is permitted to have a search performed only on its own corpus.
- a search query entered into search box 12 can be executed with respect to all corpora (or a specified sub-set of corpora).
- Embodiments of the subject matter described in this specification can be implemented as one or more computer program products, i.e., one or more modules of computer program instructions encoded on a computer readable medium for execution by, or to control the operation of, data processing apparatus.
- the computer readable medium can be a machine-readable storage device, a machine-readable storage substrate, a memory device, a composition of matter effecting a machine-readable propagated signal, or a combination of one or more of them.
- data processing apparatus and “computer” encompasses all apparatus, devices, and machines for processing data, including by way of example a programmable processor, a computer, or multiple processors or computers.
- the apparatus can include, in addition to hardware, code that creates an execution environment for the computer program in question, e.g., code that constitutes processor firmware, a protocol stack, a database management system, an operating system, or a combination of one or more of them.
- a computer program (also known as a program, software, software application, script, or code) can be written in any form of programming language, including compiled or interpreted languages, and it can be deployed in any form, including as a stand alone program or as a module, component, subroutine, or other unit suitable for use in a computing environment.
- a computer program does not necessarily correspond to a file in a file system.
- a program can be stored in a portion of a file that holds other programs or data (e.g., one or more scripts stored in a markup language document), in a single file dedicated to the program in question, or in multiple coordinated files (e.g., files that store one or more modules, sub programs, or portions of code).
- a computer program can be deployed to be executed on one computer or on multiple computers that are located at one site or distributed across multiple sites and interconnected by a communication network.
- the processes and logic flows described in this specification can be performed by one or more programmable processors executing one or more computer programs to perform functions by operating on input data and generating output.
- the processes and logic flows can also be performed by, and apparatus can also be implemented as, special purpose logic circuitry, e.g., an FPGA (field programmable gate array) or an ASIC (application specific integrated circuit).
- processors suitable for the execution of a computer program include, by way of example, both general and special purpose microprocessors, and any one or more processors of any kind of digital computer.
- a processor will receive instructions and data from a read only memory or a random access memory or both.
- the essential elements of a computer are a processor for performing instructions and one or more memory devices for storing instructions and
- a computer will also include, or be operatively coupled to receive data from or transfer data to, or both, one or more mass storage devices for storing data, e.g., magnetic, magneto optical disks, or optical disks.
- mass storage devices for storing data
- a computer need not have such devices.
- a computer can be embedded in another device, e.g., a mobile telephone or other computing device.
- Computer readable media suitable for storing computer program instructions and data include all forms of nonvolatile memory, media and memory devices, including by way of example semiconductor memory devices, e.g., EPROM, EEPROM, and flash memory devices; magnetic disks, e.g., internal hard disks or removable disks; magneto optical disks; and CD ROM and DVD-ROM disks.
- the processor and the memory can be supplemented by, or incorporated in, special purpose logic circuitry.
- embodiments of the subject matter described in this specification can be implemented on a computer having a display device, e.g., a CRT (cathode ray tube) or LCD (liquid crystal display) monitor, for displaying information to the user and a keyboard and a pointing device, e.g., a mouse or a trackball, by which the user can provide input to the computer.
- a display device e.g., a CRT (cathode ray tube) or LCD (liquid crystal display) monitor
- keyboard and a pointing device e.g., a mouse or a trackball
- Other kinds of devices can be used to provide for interaction with a user as well; for example, feedback provided to the user can be any form of sensory feedback, e.g., visual feedback, auditory feedback, or tactile feedback; and input from the user can be received in any form, including acoustic, speech, or tactile input.
Abstract
Description
Claims
Applications Claiming Priority (3)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US201361753152P | 2013-01-16 | 2013-01-16 | |
US13/971,240 US9558248B2 (en) | 2013-01-16 | 2013-08-20 | Unified searchable storage for resource-constrained and other devices |
PCT/US2013/073563 WO2014113147A1 (en) | 2013-01-16 | 2013-12-06 | Unified searchable storage for resource-constrained and other devices |
Publications (1)
Publication Number | Publication Date |
---|---|
EP2946310A1 true EP2946310A1 (en) | 2015-11-25 |
Family
ID=51166025
Family Applications (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
EP13815266.5A Ceased EP2946310A1 (en) | 2013-01-16 | 2013-12-06 | Unified searchable storage for resource-constrained and other devices |
Country Status (4)
Country | Link |
---|---|
US (1) | US9558248B2 (en) |
EP (1) | EP2946310A1 (en) |
CN (1) | CN105074696B (en) |
WO (1) | WO2014113147A1 (en) |
Families Citing this family (7)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
CN105988704B (en) * | 2015-03-03 | 2020-10-02 | 上海触乐信息科技有限公司 | Efficient touch screen text input system and method |
US20180364937A1 (en) | 2017-06-20 | 2018-12-20 | Samsung Electronics Co., Ltd. | System and method for managing memory device |
US11222063B2 (en) * | 2019-04-03 | 2022-01-11 | Microsoft Technology Licensing, Llc | Dynamic query adjustment based on data protection configurations |
US11347756B2 (en) * | 2019-08-26 | 2022-05-31 | Microsoft Technology Licensing, Llc | Deep command search within and across applications |
CN113378022A (en) * | 2020-03-10 | 2021-09-10 | 北京搜狗科技发展有限公司 | In-station search platform, search method and related device |
US11900046B2 (en) | 2020-08-07 | 2024-02-13 | Microsoft Technology Licensing, Llc | Intelligent feature identification and presentation |
CN114817233A (en) * | 2021-01-27 | 2022-07-29 | 伊姆西Ip控股有限责任公司 | Method, apparatus and program product for managing indexes of storage system |
Citations (1)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20110314229A1 (en) * | 2010-06-17 | 2011-12-22 | Microsoft Corporation | Error Detection for Files |
Family Cites Families (22)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US7308462B1 (en) * | 1999-10-29 | 2007-12-11 | Nortel Networks Limited | Methods and systems for building and distributing audio packages |
US7017162B2 (en) | 2001-07-10 | 2006-03-21 | Microsoft Corporation | Application program interface for network software platform |
US7007015B1 (en) | 2002-05-01 | 2006-02-28 | Microsoft Corporation | Prioritized merging for full-text index on relational store |
US7339930B2 (en) * | 2002-11-22 | 2008-03-04 | Sun Microsystems, Inc. | Method and apparatus for performing an address lookup using a multi-bit trie with backtracking |
US7803571B2 (en) | 2003-08-16 | 2010-09-28 | Sanfoi-Aventis Deutschland GmbH | Method for identifying IRS inhibitors or agonists |
US7743064B2 (en) * | 2004-04-29 | 2010-06-22 | Harris Corporation | Media asset management system for managing video segments from fixed-area security cameras and associated methods |
US8219567B2 (en) | 2005-03-15 | 2012-07-10 | Microsoft Corporation | Mobile friendly internet searches |
US7801880B2 (en) * | 2005-03-29 | 2010-09-21 | Microsoft Corporation | Crawling databases for information |
US20060294049A1 (en) * | 2005-06-27 | 2006-12-28 | Microsoft Corporation | Back-off mechanism for search |
US10769215B2 (en) | 2005-07-14 | 2020-09-08 | Conversant Wireless Licensing S.A R.L. | Method, apparatus and computer program product providing an application integrated mobile device search solution using context information |
US20070078803A1 (en) * | 2005-10-05 | 2007-04-05 | Gilmour David L | Method, system and apparatus for searchcasting with privacy control |
US20070220498A1 (en) * | 2006-03-15 | 2007-09-20 | Madsen Jens O | Method, mobile terminal and computer program product for interworking via a card application toolkit |
US7685145B2 (en) * | 2006-03-28 | 2010-03-23 | Microsoft Corporation | Database physical design refinement using a merge-reduce approach |
US8938474B2 (en) | 2006-08-07 | 2015-01-20 | International Business Machines Corporation | Securing application information in system-wide search engines |
US8370849B2 (en) | 2006-10-02 | 2013-02-05 | Salesforce.Com, Inc. | API method and system for providing access to an external service via an application services platform |
US7882076B2 (en) * | 2006-12-14 | 2011-02-01 | Lam Research Corporation | Primary server architectural networking arrangement and methods therefor |
US8046220B2 (en) | 2007-11-28 | 2011-10-25 | Nuance Communications, Inc. | Systems and methods to index and search voice sites |
US20110145581A1 (en) * | 2009-12-14 | 2011-06-16 | Verizon Patent And Licensing, Inc. | Media playback across devices |
EP2553613A4 (en) * | 2010-03-26 | 2017-01-25 | Nokia Technologies Oy | Method and apparatus for portable index on a removable storage medium |
CN102122286A (en) * | 2010-04-01 | 2011-07-13 | 武汉福来尔科技有限公司 | Method for realizing concentrated searching on handheld learning terminal |
JP5740003B2 (en) * | 2010-10-21 | 2015-06-24 | クアルコム，インコーポレイテッド | Search multiple data sources using mobile computing devices |
US20130205001A1 (en) * | 2012-02-02 | 2013-08-08 | Motorola Mobility, Inc. | Modifying application data synchronization based on application usage frequency |
-
2013
- 2013-08-20 US US13/971,240 patent/US9558248B2/en active Active
- 2013-12-06 EP EP13815266.5A patent/EP2946310A1/en not_active Ceased
- 2013-12-06 WO PCT/US2013/073563 patent/WO2014113147A1/en active Application Filing
- 2013-12-06 CN CN201380073965.7A patent/CN105074696B/en active Active
Patent Citations (1)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20110314229A1 (en) * | 2010-06-17 | 2011-12-22 | Microsoft Corporation | Error Detection for Files |
Non-Patent Citations (2)
Title |
---|
ANTON LEUSKI ET AL: "Auxiliary Structures", INFORMATION RETRIEVAL - INDEXES, 26 January 2012 (2012-01-26), pages 41, XP055492763, Retrieved from the Internet <URL:http://projects.ict.usc.edu/nld/ir-class/sites/projects.ict.usc.edu.nld.ir-class/files/slides/06.pdf> [retrieved on 20180716] * |
See also references of WO2014113147A1 * |
Also Published As
Publication number | Publication date |
---|---|
US20140201195A1 (en) | 2014-07-17 |
CN105074696A (en) | 2015-11-18 |
WO2014113147A1 (en) | 2014-07-24 |
CN105074696B (en) | 2019-10-01 |
US9558248B2 (en) | 2017-01-31 |
Similar Documents
Publication | Publication Date | Title |
---|---|---|
US11921760B2 (en) | Distributed transaction management with tokens | |
US9558248B2 (en) | Unified searchable storage for resource-constrained and other devices | |
CN106605221B (en) | Multi-user search system with method for instant indexing | |
EP3170106B1 (en) | High throughput data modifications using blind update operations | |
CN105630863B (en) | Transaction control block for multi-version concurrent commit status | |
US9916313B2 (en) | Mapping of extensible datasets to relational database schemas | |
US7788253B2 (en) | Global anchor text processing | |
US7769792B1 (en) | Low overhead thread synchronization system and method for garbage collecting stale data in a document repository without interrupting concurrent querying | |
US10162716B2 (en) | Hybrid SCM-DRAM transactional storage engine for fast data recovery | |
US7634517B1 (en) | System and method for dynamically updating a document repository without interrupting concurrent querying | |
US10769114B2 (en) | Database syncing | |
US20160283540A1 (en) | Concurrent reads and inserts into a data structure without latching or waiting by readers | |
CN102955792A (en) | Method for implementing transaction processing for real-time full-text search engine | |
US8694508B2 (en) | Columnwise storage of point data | |
US20130159339A1 (en) | Data Container Access in a Database System | |
CN109690522B (en) | Data updating method and device based on B+ tree index and storage device | |
US7617226B1 (en) | Document treadmilling system and method for updating documents in a document repository and recovering storage space from invalidated documents | |
US20160350001A1 (en) | Consistent, disk-backed arrays | |
EP2680168A2 (en) | Columnwise range K-nearest neighbors search queries | |
US20230124036A1 (en) | In-place garbage collection for state machine replication | |
US11113296B1 (en) | Metadata management for a transactional storage system | |
JP2007156844A (en) | Data registration/retrieval system and data registration/retrieval method | |
Kowalski et al. | Auto-updatable Index Approach for OODBMSs |
Legal Events
Date | Code | Title | Description |
---|---|---|---|
PUAI | Public reference made under article 153(3) epc to a published international application that has entered the european phase |
Free format text: ORIGINAL CODE: 0009012 |
|
17P | Request for examination filed |
Effective date: 20150729 |
|
AK | Designated contracting states |
Kind code of ref document: A1Designated state(s): AL AT BE BG CH CY CZ DE DK EE ES FI FR GB GR HR HU IE IS IT LI LT LU LV MC MK MT NL NO PL PT RO RS SE SI SK SM TR |
|
AX | Request for extension of the european patent |
Extension state: BA ME |
|
DAX | Request for extension of the european patent (deleted) | ||
17Q | First examination report despatched |
Effective date: 20170911 |
|
RAP1 | Party data changed (applicant data changed or rights of an application transferred) |
Owner name: GOOGLE LLC |
|
REG | Reference to a national code |
Ref country code: DERef legal event code: R003 |
|
STAA | Information on the status of an ep patent application or granted ep patent |
Free format text: STATUS: THE APPLICATION HAS BEEN REFUSED |
|
18R | Application refused |
Effective date: 20190123 |
|
P01 | Opt-out of the competence of the unified patent court (upc) registered |
Effective date: 20230519 |