US7493548B2 - Method and apparatus for encoding and decoding data - Google Patents
Method and apparatus for encoding and decoding data Download PDFInfo
- Publication number
- US7493548B2 US7493548B2 US11/275,937 US27593706A US7493548B2 US 7493548 B2 US7493548 B2 US 7493548B2 US 27593706 A US27593706 A US 27593706A US 7493548 B2 US7493548 B2 US 7493548B2
- Authority
- US
- United States
- Prior art keywords
- matrix
- parity
- bits
- column
- check
- Prior art date
- Legal status (The legal status is an assumption and is not a legal conclusion. Google has not performed a legal analysis and makes no representation as to the accuracy of the status listed.)
- Active, expires
Links
Images
Classifications
-
- H—ELECTRICITY
- H03—ELECTRONIC CIRCUITRY
- H03M—CODING; DECODING; CODE CONVERSION IN GENERAL
- H03M13/00—Coding, decoding or code conversion, for error detection or error correction; Coding theory basic assumptions; Coding bounds; Error probability evaluation methods; Channel models; Simulation or testing of codes
- H03M13/03—Error detection or forward error correction by redundancy in data representation, i.e. code words containing more digits than the source words
- H03M13/05—Error detection or forward error correction by redundancy in data representation, i.e. code words containing more digits than the source words using block codes, i.e. a predetermined number of check bits joined to a predetermined number of information bits
- H03M13/11—Error detection or forward error correction by redundancy in data representation, i.e. code words containing more digits than the source words using block codes, i.e. a predetermined number of check bits joined to a predetermined number of information bits using multiple parity bits
- H03M13/1102—Codes on graphs and decoding on graphs, e.g. low-density parity check [LDPC] codes
- H03M13/1148—Structural properties of the code parity-check or generator matrix
- H03M13/116—Quasi-cyclic LDPC [QC-LDPC] codes, i.e. the parity-check matrix being composed of permutation or circulant sub-matrices
-
- H—ELECTRICITY
- H03—ELECTRONIC CIRCUITRY
- H03M—CODING; DECODING; CODE CONVERSION IN GENERAL
- H03M13/00—Coding, decoding or code conversion, for error detection or error correction; Coding theory basic assumptions; Coding bounds; Error probability evaluation methods; Channel models; Simulation or testing of codes
- H03M13/03—Error detection or forward error correction by redundancy in data representation, i.e. code words containing more digits than the source words
- H03M13/033—Theoretical methods to calculate these checking codes
-
- H—ELECTRICITY
- H03—ELECTRONIC CIRCUITRY
- H03M—CODING; DECODING; CODE CONVERSION IN GENERAL
- H03M13/00—Coding, decoding or code conversion, for error detection or error correction; Coding theory basic assumptions; Coding bounds; Error probability evaluation methods; Channel models; Simulation or testing of codes
- H03M13/03—Error detection or forward error correction by redundancy in data representation, i.e. code words containing more digits than the source words
- H03M13/05—Error detection or forward error correction by redundancy in data representation, i.e. code words containing more digits than the source words using block codes, i.e. a predetermined number of check bits joined to a predetermined number of information bits
- H03M13/11—Error detection or forward error correction by redundancy in data representation, i.e. code words containing more digits than the source words using block codes, i.e. a predetermined number of check bits joined to a predetermined number of information bits using multiple parity bits
- H03M13/1102—Codes on graphs and decoding on graphs, e.g. low-density parity check [LDPC] codes
- H03M13/1148—Structural properties of the code parity-check or generator matrix
- H03M13/118—Parity check matrix structured for simplifying encoding, e.g. by having a triangular or an approximate triangular structure
- H03M13/1185—Parity check matrix structured for simplifying encoding, e.g. by having a triangular or an approximate triangular structure wherein the parity-check matrix comprises a part with a double-diagonal
-
- H—ELECTRICITY
- H03—ELECTRONIC CIRCUITRY
- H03M—CODING; DECODING; CODE CONVERSION IN GENERAL
- H03M13/00—Coding, decoding or code conversion, for error detection or error correction; Coding theory basic assumptions; Coding bounds; Error probability evaluation methods; Channel models; Simulation or testing of codes
- H03M13/03—Error detection or forward error correction by redundancy in data representation, i.e. code words containing more digits than the source words
- H03M13/05—Error detection or forward error correction by redundancy in data representation, i.e. code words containing more digits than the source words using block codes, i.e. a predetermined number of check bits joined to a predetermined number of information bits
- H03M13/11—Error detection or forward error correction by redundancy in data representation, i.e. code words containing more digits than the source words using block codes, i.e. a predetermined number of check bits joined to a predetermined number of information bits using multiple parity bits
- H03M13/1102—Codes on graphs and decoding on graphs, e.g. low-density parity check [LDPC] codes
- H03M13/1148—Structural properties of the code parity-check or generator matrix
- H03M13/118—Parity check matrix structured for simplifying encoding, e.g. by having a triangular or an approximate triangular structure
- H03M13/1185—Parity check matrix structured for simplifying encoding, e.g. by having a triangular or an approximate triangular structure wherein the parity-check matrix comprises a part with a double-diagonal
- H03M13/1188—Parity check matrix structured for simplifying encoding, e.g. by having a triangular or an approximate triangular structure wherein the parity-check matrix comprises a part with a double-diagonal wherein in the part with the double-diagonal at least one column has an odd column weight equal or greater than three
-
- H—ELECTRICITY
- H03—ELECTRONIC CIRCUITRY
- H03M—CODING; DECODING; CODE CONVERSION IN GENERAL
- H03M13/00—Coding, decoding or code conversion, for error detection or error correction; Coding theory basic assumptions; Coding bounds; Error probability evaluation methods; Channel models; Simulation or testing of codes
- H03M13/63—Joint error correction and other techniques
- H03M13/635—Error control coding in combination with rate matching
- H03M13/6362—Error control coding in combination with rate matching by puncturing
- H03M13/6368—Error control coding in combination with rate matching by puncturing using rate compatible puncturing or complementary puncturing
- H03M13/6393—Rate compatible low-density parity check [LDPC] codes
Definitions
- the present invention relates generally to encoding and decoding data and in particular, to a method and apparatus for encoding and decoding data utilizing low-density parity-check (LDPC) codes.
- LDPC low-density parity-check
- a low-density parity-check (LDPC) code is a linear block code specified by a parity-check matrix H.
- the codeword x is transmitted through a noisy channel, and the received signal vector y is passed to the decoder to estimate the information vector S 1 ⁇ k .
- a parity-check matrix can be also described by a bipartite graph.
- the bipartite graph is not only a graphic description of the code but also a model for the decoder.
- a codeword bit (therefore each column of H) is represented by a variable node on the left
- each parity-check equation (therefore each row of H) is represented by a check node on the right.
- variable node i is connected to check node j if entry h ji of the parity-check matrix H is 1.
- the variable nodes represent a valid codeword if all check nodes have even parity.
- H also has the corresponding bipartite graph shown in FIG. 1 .
- the receiver obtains a contaminated version y of the transmitted codeword x.
- an iterative decoding algorithm such as belief propagation, is applied based on the bipartite graph.
- Soft information in the format of log-likelihood ratio (LLRs) of the codeword bits is passed between the bank of variable nodes and the bank of check nodes. The iteration is stopped either when all check equations are satisfied or a maximum allowed iteration limit is reached.
- LLRs log-likelihood ratio
- H b base matrix
- H b base matrix
- This procedure essentially maps each edge of H b to a vector edge of length z in H, each variable node of H b to a vector variable node of length z in H, and each check node of H b to a vector check node of length z in H.
- the benefits of vectorizing a small matrix H b to build a large matrix H are:
- the structured LDPC design philosophy greatly reduces the implementation complexity, a technique does not exist for designing the base matrix and assigning the permutation matrices for a given target H size which results in a LDPC code that has good error-correcting performance and can be efficiently encoded and decoded. Therefore, a need exists for a method and apparatus for designing a structured H and a method and apparatus for encoding and decoding data utilizing the structured H matrix.
- FIG. 1 illustrates the bipartite graph of an (12, 6) H matrix.
- FIG. 2 illustrates the relationships between the base matrix H b , the model matrix H bm , and the final expanded matrix H.
- FIG. 3 is a block diagram of an encoder.
- FIG. 4 is a block diagram of a decoder.
- FIG. 5 is a flow chart showing the operation of the encoder of FIG. 3 .
- FIG. 6 is a flow chart showing the operation of the decoder of FIG. 4 .
- the expansion of the base matrix H b uses identical submatrices for 1s in each column of the second part H′ b2 , and the expansion uses paired submatrices for an even number of 1s in h b .
- the parity-check bits are transmitted along with the current symbol set.
- the expansion of the base matrix H b uses identical submatrices for 1s in each column of the second part H′ b2 , and wherein the expansion uses paired submatrices for an even number of 1s in h b .
- the expansion of the base matrix H b uses identical submatrices for 1s in each column of the second part H′ b2 , and wherein the expansion uses paired submatrices for an even number of 1s in h b .
- the expansion of the base matrix H b uses identical submatrices for 1s in each column of the second part H′ b2 , and wherein the expansion uses paired submatrices for an even number of 1s in h b .
- Matrix H is an expansion of a base matrix H b with H b comprising a section H b1 and a section H b2 , and wherein H b2 comprises a first part comprising a column h b having an odd weight greater than 2.
- FIG. 3 is a block diagram of encoder 300 in accordance with a first embodiment of the present invention.
- encoder 300 comprises microprocessor 301 and lookup table 303 .
- microprocessor 301 comprises a digital signal processor (DSP), such as, but not limited to MSC8300 and DSP56300 DSPs.
- DSP digital signal processor
- lookup table 303 serves as storage means to store a matrix, and comprises read-only memory; however, one of ordinary skill in the art will recognize that other forms of memory (e.g., random-access memory, magnetic storage memory, etc.) may be utilized as well.
- the functionality of the microprocessor 301 and the lookup table 303 can be incorporated into an application specific integrated circuit (ASIC) or field programmable gate array (FPGA).
- ASIC application specific integrated circuit
- FPGA field programmable gate array
- the lookup table 303 can be implemented in a form of memory corresponding to the existence or non-existence of signal paths in a circuit.
- encoded data is generally output as a plurality of parity-check bits in addition to the systematic bits, where together the parity-check and systematic bits form a codeword x.
- a parity-check matrix H is stored in lookup table 303 , and is accessed by microprocessor 301 to solve Equation (1).
- the parity-check bits and the symbol set are then passed to a transmitter and transmitted to a receiver.
- FIG. 4 is a block diagram of decoder 400 in accordance with one embodiment of the present invention.
- decoder 400 comprises microprocessor 401 and lookup table 403 .
- microprocessor 401 comprises a digital signal processor (DSP), such as, but not limited to MSC8300 and DSP56300 DSPs.
- DSP digital signal processor
- lookup table 403 acts as storage means for storing matrix H, and comprises read-only memory.
- DSP digital signal processor
- lookup table 403 acts as storage means for storing matrix H, and comprises read-only memory.
- other forms of memory e.g., random-access memory, magnetic storage memory, etc.
- the functionality of the microprocessor 401 and the lookup table 403 can be incorporated into an application specific integrated circuit (ASIC) or field programmable gate array (FPGA).
- the lookup table 403 can be implemented in a form of memory corresponding to the existence or non-existence of signal paths in a circuit.
- a parity-check matrix H is stored in lookup table 403 , and is accessed by microprocessor 401 to decode y and estimate the current symbol set s (i.e., the current symbol set (s 0 , . . . , s k ⁇ 1 )).
- the decoder 400 can use the parity-check matrix H in the microprocessor 401 for decoding.
- One such way is to perform a vector-matrix multiplication with H to determine a likely error pattern.
- Another such way is to use H to construct a bipartite graph where the edges in the graph correspond to 1's in H, and to iteratively process y on the bipartite graph.
- the z ⁇ z submatrix may be a permutation matrix, a sum of permutation matrices, or any type of binary matrix. Since a permutation matrix P has a single 1 in each row and a single 1 in each column, the weight distribution of the expanded matrix H is the same as the base matrix H b if the permutation submatrix is used. Therefore, the weight distribution of H b is chosen as close to the desired final weight distribution as possible. The following description is illustrative of the case where the entries of H b are replaced by permutation matrices, though any matrices may be used.
- a permutation submatrix P z ⁇ z of a vector edge has a 1 at (row, column) entry (p(i), i)
- the i-th edge within the vector edge is permuted to the p(i)-th position before the vector edge is connected to the vector check node.
- this permutation makes the i-th variable node within the related vector variable node connected to the p(i)-th check node within the related vector check node.
- each H matrix can be uniquely represented by a m b ⁇ n b model matrix H bm , which can be obtained by
- H bm is a shorthand representation of H if z is given.
- the matrix prototype is distinguished from the base matrix by the subscript ‘bm’, and the expanded matrix is distinguished by removing the subscript ‘bm’. The relationship between the three matrices is illustrated in FIG. 2 .
- the code has error-correcting performance similar to a random H of size m ⁇ n, while encoding and decoding are performed based on a much smaller H bm .
- Equation (2) may be used as a base matrix H b to build a matrix prototype H bm as follows:
- H bm [ 1 - 1 0 - 1 - 1 - 1 0 0 - 1 - 1 - 1 - 1 - 1 2 - 1 - 1 0 - 1 - 1 0 0 - 1 - 1 - 1 - 1 - 1 2 2 - 1 0 0 - 1 - 1 2 - 1 0 0 - 1 - 1 2 - 1 0 0 - 1 - 1 2 - 1 - 1 0 0 - 1 - 1 2 - 1 - 1 - 1 - 1 - 1 - 1 - 1 0 0 - 1 - 1 1 1 - 1 0 0 - 1 - 1 1 - 1 - 1 - 1 0 0 - 1 - 1 - 1 - 1 - 1 0 0 - 1 - 1 - 1 - 1 - 1 0 0 - 1 - 1 - 1 - 1 - 1 0 0 - 1
- P 0 [ 1 0 0 0 1 0 0 0 1 ]
- P 1 [ 0 1 0 0 0 1 1 0 0 ]
- P 2 [ 0 0 1 1 0 0 0 1 0 ] .
- P 0 is the z ⁇ z identity matrix.
- the cyclic-permutation matrix P i is obtained from the z ⁇ z identity matrix by cyclically shifting the columns to the right by i elements, i>0.
- an H matrix with a modified staircase structure for the parity part of H leads to efficient encoding without compromising performance.
- H 2 has a modified staircase structure
- H 1 can be any binary matrix of size m-by-k.
- This same structure can be used to build the base matrix H b in a structured LDPC design.
- H b can be partitioned into two sections, where H b1 corresponds to the systematic bits s, H b2 corresponds to the parity-check bits p:
- H b [ ( H b ⁇ ⁇ 1 ) m b ⁇ k b ( H b ⁇ ⁇ 2 ) m b ⁇ m b ] .
- Section H b2 can be further partitioned into two sections, where vector h b has odd weight w h , and H′ b2 has a staircase structure:
- Section H b1 can be built randomly.
- the entire matrix H b has a weight distribution as close to the desired weight distribution as possible. Shift Sizes
- the circular shift sizes p(i,j) need to be determined for each 1 in H b .
- the shift sizes can be first specified for the H 2 . After the shift sizes for the H 2 section are determined, the H 1 section shift sizes can be determined to achieve overall good performance of H.
- the H 1 portion of the base matrix and the shift sizes of the H 1 portion of the base matrix (section H bm1 ) can be assigned in many different ways. For example, random values for the shift sizes may be selected and accepted if the shift sizes do not cause significant performance degradation. Performance degradation may result from the introduction of excessive numbers of short-length cycles or low-weight codewords. Other techniques available in the LDPC art may also be used.
- the circular shift sizes p(i,j) for a given target H size should be specified to allow efficient encoding without compromising decoding performance.
- the shifts may be assigned such that all but one of the shift matrices corresponding to 1's in h b cancel when added together, and all vector rows of H′ b2 cancel when summed up. This translates to assigning shift sizes to h b in pairs except for one entry, and assigning the same shift size to both 1's in each column of H′ b2 .
- any shift size option is equivalent to the shift size of 0 (i.e., identity submatrices) plus a permutation of the bits within the vector column.
- all shift sizes of H′ b2 can be assigned 0 for convenience, i.e., each 1 in H′ b2 is replaced by a z ⁇ z identity submatrix when expanding to H.
- z is the expansion factor
- p(i) is the circular shift size of edge i in the matrix prototype H bm
- edge 0, 1, 2, . . . , 2c ⁇ 1 (in this order) form a cycle in H b .
- h bm [3 ⁇ 1 3 ⁇ 1 ⁇ 1 ⁇ 1 4] T would result in z cycles of length 6 between h and H′ 2
- h bm [3 ⁇ 1 4 ⁇ 1 ⁇ 1 ⁇ 1 3] T would result in z cycles of length 14 between h and H′ 2
- h and H′ 2 are expanded from h b and H′ b2 .
- Encoding is the process of determining the parity sequence p given an information sequence s.
- each operation is performed over a group of z bits instead of a single bit.
- vector operations do not have to be used, and the equations below are implemented in equivalent scalar form.
- the parity sequence p is determined in groups of z.
- Encoding proceeds in two steps, (a) initialization, which determines v(0), and (b) recursion, which determines v(i+1) from v(i), 0 ⁇ i ⁇ m b ⁇ 2.
- Equation (1) An expression for v(0) can be derived by summing over the rows of Equation (1) to obtain
- Equations (16) and (17) can be derived by considering the structure of H′ b2 .
- Equations (16) and (17) can be simplified to Equations (19) and (20),
- Equations (14), (19), and (20) describe the encoding algorithm. These equations also have a straightforward interpretation in terms of standard digital logic architectures.
- the non-negative elements p(i,j) of H bm represent circular shift sizes of a vector
- all products of the form P p(i,j) u(j) can be implemented by a size-z barrel shifter.
- a circular shift size of zero may not need to be barrel-shifted.
- a barrel shifter that implements all possible circular shifts must provide connections from each input bit to all output bits, the speed with which it can be run depends upon z. For a given z, complexity can be reduced and speed increased by allowing only a proper subset of all possible circular shifts.
- H bm could be constructed with only even circular shift sizes.
- H is represented by any or no column or row-permuted version of the matrix prototype H bm which is equal to:
- the grouped information sequence can be stored in a size-z memory, which can be read out in sequential order.
- the corresponding entry from the H bm ROM can be read out, which instructs the barrel shifter of the necessary circular shift.
- a register containing a partial summation is updated.
- Equation (14) after each inner summation is completed, the result can be used to update another register containing the outer summation.
- the outer summation is complete, it can be circularly shifted by z ⁇ p(x,k b ).
- Equation (14) Assuming the barrel shifting can be implemented in a single clock cycle, encoding can be accomplished in approximately (k b +1)m b clock cycles. This number can be reduced at the expense of m b ⁇ 1 extra z-wide registers by computing and storing the summations of Equation (19) and (20), using results that become available as Equation (14) is being computed.
- the code extension procedure can be applied to the structured code to reach a lower-rate code.
- Progressively lower-rate code can be used in successive transmissions of an incremental redundancy (IR) procedure.
- IR incremental redundancy
- H bm ( 2 ) [ H bm ⁇ ⁇ 1 ( 1 ) H bm ⁇ ⁇ 2 ( 2 ) 0 H bm ⁇ ⁇ 1 ( 2 ) H bm ⁇ ⁇ 2 ( 2 ) ] , ( 22 ) etc., where for each transmission i, submatrix H bm2 (i) has the format in (9) and has size m b (i) ⁇ m b (i) .
- the decoding after the 1 sty transmission is performed using received signals of [u(0), u(1), . . . , u(k b ⁇ 1), v (1) (0), v (1) (1), . . . , v (1) (m b (1) ⁇ 1)] and (21).
- the decoding after the second transmission is performed based on (22) and the combined received signal from the 1 sty transmission and the 2 nd transmission. This procedure may be repeated for more transmissions.
- FIG. 5 is a flow chart showing the operation of encoder 300 , and in particular, microprocessor 301 .
- the logic flow begins at step 501 where a current symbol set (s 0 , . . . , s k ⁇ 1 ) is received by microprocessor 301 .
- values of parity-check bits are determined based on the current symbol set and H.
- the parity-check bits (p 0 , . . . , p m ⁇ 1 ) are determined as described above, with H being an expansion of a base matrix H b .
- H b comprises a section H b1 and a section H b2
- the expansion of the base matrix H b uses identical submatrices for the 1s in each column of the second part H′ b2 , and wherein the expansion uses paired submatrices for an even number of 1s in h b .
- the current symbol set and the parity-check bits are transmitted via over-the-air transmission.
- FIG. 6 is a flow chart showing the operation of decoder 400 , and in particular, microprocessor 401 .
- estimates of the current symbol set s i.e., the current symbol set (s 0 , . . . , s k ⁇ 1 ) are determined based on H.
- the rows of H may be permuted without affecting the value of the parity-check bits.
- the modified staircase structure may be used for a subset of the parity-check bits.
- additional steps may be performed when expanding the base matrix to the expanded matrix.
- the matrix H may also be used in any type of decoder that relies upon a parity-check matrix. It is intended that such changes come within the scope of the following claims.
Abstract
Description
HxT=0T, (1)
where 0 is a row vector of all zeros, and the codeword x=[s p]=[s0, s1, . . . , sk−1, p0, p1, . . . , pm−1], where p0, . . . , pm−1 are the parity-check bits; and s0, . . . , sk−1 are the systematic bits, equal to the information bits within the information vector.
with the left side portion corresponding to k (=6) information bits s, the right side portion corresponding to m (=6) parity bits p. Applying (1), the H in (2) defines 6 parity-check equations as follows:
H also has the corresponding bipartite graph shown in
-
- 1. By using a different values of z, codes of rate kb/nb, where kb=nb−mb, can be designed for many different information sequence sizes k=z×kb from a single base matrix Hb.
- 2. Memory requirements are greatly reduced. With a structured LDPC design, only the base matrix Hb and the permutation for its 1's need to be stored, which requires significantly less memory since Hb is typically much smaller than H and the permutation can be very simple.
- 3. Encoding and decoding can be performed on groups of bits rather than by single bits. For example, a group of z messages can be fetched from memory, permuted, and passed between a vector variable node and a vector check node.
-
- replacing each 0 in Hb by −1 to denote a z×z all-zero submatrix (i.e., a null submatrix), and
- replacing each hi,j=1 in Hb by a circular shift size p(i,j) where p(i,j) is non-negative.
Note that the model matrix can also be referred to as a matrix prototype. Additionally note that the z×z all-zero submatrix (null submatrix) may also be represented using ‘−’ or by any other designator.
When z=3, Hbm is converted to a (mb×z)×(nb×z) matrix H by replacing each −1 with a 3×3 all-zero submatrix and each i with submatrix Pi, i=0, 1, 2, where
Note that P0 is the z×z identity matrix. The cyclic-permutation matrix Pi is obtained from the z×z identity matrix by cyclically shifting the columns to the right by i elements, i>0.
H=[H1 H2], (5)
where H2 has a modified staircase structure, and H1 can be any binary matrix of size m-by-k. This same structure can be used to build the base matrix Hb in a structured LDPC design. Similarly, using the modified staircase structure, Hb can be partitioned into two sections, where Hb1 corresponds to the systematic bits s, Hb2 corresponds to the parity-check bits p:
Section Hb2 can be further partitioned into two sections, where vector hb has odd weight wh, and H′b2 has a staircase structure:
Section Hb1 can be built randomly. Preferably the entire matrix Hb has a weight distribution as close to the desired weight distribution as possible.
Shift Sizes
where z is the expansion factor, p(i) is the circular shift size of edge i in the matrix prototype Hbm, and
where kb=nb−mb, there are wh (odd, wh>=3) nonnegative entries in hbm, and the −1 entries in H′bm2 are left blank for brevity. All p(i,kb) values appear an even number of times in hbm except for one, which may be mapped to any non-zero submatrix. Therefore, all wh shifts could be given the same value (e.g., 0), since wh is odd. For H′bm2, p(i,j)=p(i+1,j), j=kb+1, kb+2, . . . , nb−1, i=j−kb−1. In the preferred embodiment, assuming wh=3, one example has hbm=[0−1 . . . −1 ph−1 . . . −1 . . . 0]T, ph mod z≠0, and p(i,j)=p(i+1,j)=0, j=kb+1, kb+2, . . . , nb−1, i=j−kb−1 in the H′bm2 portion.
-
- 1. In every column of H′bm2, the two non-zero submatrices are identical;
- 2. The wh (odd, wh>=3) non-zero submatrices of hbm are paired (i.e., one submatrix is identical to another submatrix), except for one submatrix, which can be any non-zero matrix.
Encoding
u=[u(0)u(1) . . . u(k b−1)], (10)
where each element of u is a column vector as follows
u(i)=[s iz s iz+1 . . . s (i+1)z−1]T. (11)
v=[v(0)v(1) . . . v(m b−1)], (12)
where each element of v is a column vector as follows
v(i)=[p iz p iz+1 . . . p (i+1)z−1]T. (13)
Encoding proceeds in two steps, (a) initialization, which determines v(0), and (b) recursion, which determines v(i+1) from v(i), 0≦i≦mb−2.
where x is the row index of hbm where the entry is nonnegative and is used an odd number of times. In the preferred embodiment, the top and bottom entries of hbm are paired, thus 1≦x≦mb−2. Equation (14) is solved for v(0) by multiplying both sides by Pp(x,k
Note that using the ‘−’ is equivalent to putting a ‘−1’ or any other designator for the z×z all-zero submatrix.
An example of a column-permuted version of the matrix prototype Hbm wherein the high weight columns appear on the left hand side is shown below.
The matrix prototype Hbm may be expanded with z=54 to define a rate ½ code with n=1296. Following are two more examples of model matrices that may be expanded to defined rate ½ codes for different values of n.
A rate ½ code with n=1944 may be defined by expanding any or no column or row-permuted version of the following matrix prototype Hbm and using z=81:
A rate ½ code with n=648 may be defined by expanding any or no column or row-permuted version of the following matrix prototype Hbm and using z=27:
To implement the summations in Equations (14), (19), and (20) the entries p(i,j) of Hbm, 0≦i≦kb, 0≦j≦mb−1, can be stored in a read-only memory (ROM) of width ┌log2 z┐+1 bits. The grouped information sequence can be stored in a size-z memory, which can be read out in sequential order. As each information vector u(j) is read out, the corresponding entry from the Hbm ROM can be read out, which instructs the barrel shifter of the necessary circular shift. After the circular shift, a register containing a partial summation is updated. For Equation (14), after each inner summation is completed, the result can be used to update another register containing the outer summation. When the outer summation is complete, it can be circularly shifted by z−p(x,kb).
Hbm (1)=[Hbm1 (1) Hbm2 (1)], (21)
then the matrix prototype for the 2nd transmission may use
etc., where for each transmission i, submatrix Hbm2 (i) has the format in (9) and has size mb (i)×mb (i). The first transmission may send nb (1)=kb+mb (1) groups of bits, [u(0), u(1), . . . , u(kb−1), v(1)(0), v(1)(1), . . . , v(1)(mb (1)−1)], each group having size z. The decoding after the 1sty transmission is performed using received signals of [u(0), u(1), . . . , u(kb−1), v(1)(0), v(1)(1), . . . , v(1)(mb (1)−1)] and (21). The 2nd transmission may send another mb (2) groups of bits of size z, [v(2)(0), v(2)(1), . . . , v(2)(mb (2)−1)], where m2=mb (2)z, and the bits of the first transmission and the second transmission together, [u(0), u(1), . . . , u(kb−1), v(1)(0), v(1)(1), . . . , v(1)(mb (1)−1), v(2)(0), v(2)(1), . . . , v(2)(mb (2)−1)],
are a codeword corresponding to (22). Therefore, the decoding after the second transmission is performed based on (22) and the combined received signal from the 1sty transmission and the 2nd transmission. This procedure may be repeated for more transmissions. The decoding after the 2nd transmission is based on a code of rate kb/nb (2)=kb/(nb (1)+mb (2)), which is lower than that of 1sty transmission. This procedure may be repeated for more transmissions, with each additional transmission contributing to a stronger, lower-rate code.
Claims (16)
Priority Applications (2)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US11/275,937 US7493548B2 (en) | 2006-02-06 | 2006-02-06 | Method and apparatus for encoding and decoding data |
PCT/US2007/060896 WO2007092672A2 (en) | 2006-02-06 | 2007-01-23 | Method and apparatus for encoding and decoding data |
Applications Claiming Priority (1)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US11/275,937 US7493548B2 (en) | 2006-02-06 | 2006-02-06 | Method and apparatus for encoding and decoding data |
Publications (2)
Publication Number | Publication Date |
---|---|
US20070220395A1 US20070220395A1 (en) | 2007-09-20 |
US7493548B2 true US7493548B2 (en) | 2009-02-17 |
Family
ID=38345858
Family Applications (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
US11/275,937 Active 2027-07-09 US7493548B2 (en) | 2006-02-06 | 2006-02-06 | Method and apparatus for encoding and decoding data |
Country Status (2)
Country | Link |
---|---|
US (1) | US7493548B2 (en) |
WO (1) | WO2007092672A2 (en) |
Cited By (3)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20080109699A1 (en) * | 2006-10-18 | 2008-05-08 | Nokia Corporation | Method, apparatus and computer program product providing for data block encoding and decoding |
US20080126917A1 (en) * | 2006-11-29 | 2008-05-29 | Wei-Hung Huang | Data processing systems and methods for processing digital data with low density parity check matrix |
US20160259595A1 (en) * | 2015-03-04 | 2016-09-08 | Sk Hynix Memory Solutions Inc. | Encoder and decoder design for near-balanced codes |
Families Citing this family (7)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US8464120B2 (en) * | 2006-10-18 | 2013-06-11 | Panasonic Corporation | Method and system for data transmission in a multiple input multiple output (MIMO) system including unbalanced lifting of a parity check matrix prior to encoding input data streams |
JP5354979B2 (en) * | 2007-07-12 | 2013-11-27 | パナソニック株式会社 | Low density parity check convolutional code (LDPC-CC) encoder and LDPC-CC decoder |
TWI497920B (en) * | 2007-11-26 | 2015-08-21 | Sony Corp | Data processing device and data processing method |
US10289348B2 (en) * | 2016-12-30 | 2019-05-14 | Western Digital Technologies, Inc. | Tapered variable node memory |
CN109327225B9 (en) * | 2017-06-27 | 2021-12-10 | 华为技术有限公司 | Information processing method and device and communication equipment |
US10727869B1 (en) * | 2018-03-28 | 2020-07-28 | Xilinx, Inc. | Efficient method for packing low-density parity-check (LDPC) decode operations |
US11108410B1 (en) | 2018-08-24 | 2021-08-31 | Xilinx, Inc. | User-programmable LDPC decoder |
Citations (5)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US5956351A (en) * | 1997-04-07 | 1999-09-21 | International Business Machines Corporation | Dual error correction code |
US20040221223A1 (en) | 2003-04-29 | 2004-11-04 | Nam-Yul Yu | Apparatus and method for encoding a low density parity check code |
US20050246617A1 (en) | 2004-04-28 | 2005-11-03 | Samsung Electronics Co., Ltd. | Apparatus and method for coding/decoding block low density parity check code with variable block length |
US20050257119A1 (en) | 2004-05-14 | 2005-11-17 | Yufei Blankenship | Method and apparatus for encoding and decoding data |
US7464323B2 (en) * | 2002-12-26 | 2008-12-09 | Canon Kabushiki Kaisha | Algebraic geometric code adapted to error bursts |
-
2006
- 2006-02-06 US US11/275,937 patent/US7493548B2/en active Active
-
2007
- 2007-01-23 WO PCT/US2007/060896 patent/WO2007092672A2/en active Application Filing
Patent Citations (5)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US5956351A (en) * | 1997-04-07 | 1999-09-21 | International Business Machines Corporation | Dual error correction code |
US7464323B2 (en) * | 2002-12-26 | 2008-12-09 | Canon Kabushiki Kaisha | Algebraic geometric code adapted to error bursts |
US20040221223A1 (en) | 2003-04-29 | 2004-11-04 | Nam-Yul Yu | Apparatus and method for encoding a low density parity check code |
US20050246617A1 (en) | 2004-04-28 | 2005-11-03 | Samsung Electronics Co., Ltd. | Apparatus and method for coding/decoding block low density parity check code with variable block length |
US20050257119A1 (en) | 2004-05-14 | 2005-11-17 | Yufei Blankenship | Method and apparatus for encoding and decoding data |
Cited By (6)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20080109699A1 (en) * | 2006-10-18 | 2008-05-08 | Nokia Corporation | Method, apparatus and computer program product providing for data block encoding and decoding |
US7934146B2 (en) * | 2006-10-18 | 2011-04-26 | Nokia Corporation | Method, apparatus and computer program product providing for data block encoding and decoding |
US20080126917A1 (en) * | 2006-11-29 | 2008-05-29 | Wei-Hung Huang | Data processing systems and methods for processing digital data with low density parity check matrix |
US8145971B2 (en) * | 2006-11-29 | 2012-03-27 | Mediatek Inc. | Data processing systems and methods for processing digital data with low density parity check matrix |
US20160259595A1 (en) * | 2015-03-04 | 2016-09-08 | Sk Hynix Memory Solutions Inc. | Encoder and decoder design for near-balanced codes |
US9985647B2 (en) * | 2015-03-04 | 2018-05-29 | SK Hynix Inc. | Encoder and decoder design for near-balanced codes |
Also Published As
Publication number | Publication date |
---|---|
WO2007092672A3 (en) | 2008-05-22 |
US20070220395A1 (en) | 2007-09-20 |
WO2007092672A2 (en) | 2007-08-16 |
Similar Documents
Publication | Publication Date | Title |
---|---|---|
US7143333B2 (en) | Method and apparatus for encoding and decoding data | |
US7493548B2 (en) | Method and apparatus for encoding and decoding data | |
US7343548B2 (en) | Method and apparatus for encoding and decoding data | |
US7203897B2 (en) | Method and apparatus for encoding and decoding data | |
US10693502B2 (en) | Transmission apparatus and method, and reception apparatus and method | |
CN101924565B (en) | LDPC encoders, decoders, systems and methods | |
US7783952B2 (en) | Method and apparatus for decoding data | |
US7395494B2 (en) | Apparatus for encoding and decoding of low-density parity-check codes, and method thereof | |
US7499490B2 (en) | Encoders for block-circulant LDPC codes | |
US7188297B2 (en) | Method and apparatus for encoding and decoding data | |
US8108760B2 (en) | Decoding of linear codes with parity check matrix | |
US20080077843A1 (en) | Apparatus and Method for Decoding Using Channel Code | |
US7191376B2 (en) | Decoding Reed-Solomon codes and related codes represented by graphs | |
Andrews et al. | Encoders for block-circulant LDPC codes | |
JP4832447B2 (en) | Decoding apparatus and method using channel code | |
KR101147768B1 (en) | Apparatus and method for decoding using channel code | |
CN105871385A (en) | LDPC convolutional code construction method | |
US7181677B1 (en) | System and method for producing data and ECC code words using a high rate restricted-symbol code | |
KR20070025522A (en) | Method for decoding of ldpc codes | |
Babalola | Soft-decision decoding of moderate length binary cycle codes based on parity-check transformation | |
KR101218658B1 (en) | Encoing and decoding method using irregular repeat multiple state accumulate code | |
Rosnes | Code design and performance analysis using a 2-level generalized Tanner graph on the binary erasure channel |
Legal Events
Date | Code | Title | Description |
---|---|---|---|
AS | Assignment |
Owner name: MOTOROLA, INC., ILLINOISFree format text: ASSIGNMENT OF ASSIGNORS INTEREST;ASSIGNORS:NIMBALKER, AJIT;BLANKENSHIP, YUFEI W.;CLASSON, BRIAN K.;REEL/FRAME:020001/0942Effective date: 20060206 |
|
STCF | Information on status: patent grant |
Free format text: PATENTED CASE |
|
CC | Certificate of correction | ||
AS | Assignment |
Owner name: MOTOROLA MOBILITY, INC, ILLINOISFree format text: ASSIGNMENT OF ASSIGNORS INTEREST;ASSIGNOR:MOTOROLA, INC;REEL/FRAME:025673/0558Effective date: 20100731 |
|
FPAY | Fee payment |
Year of fee payment: 4 |
|
AS | Assignment |
Owner name: MOTOROLA MOBILITY LLC, ILLINOISFree format text: CHANGE OF NAME;ASSIGNOR:MOTOROLA MOBILITY, INC.;REEL/FRAME:029216/0282Effective date: 20120622 |
|
AS | Assignment |
Owner name: GOOGLE TECHNOLOGY HOLDINGS LLC, CALIFORNIAFree format text: ASSIGNMENT OF ASSIGNORS INTEREST;ASSIGNOR:MOTOROLA MOBILITY LLC;REEL/FRAME:034419/0001Effective date: 20141028 |
|
FPAY | Fee payment |
Year of fee payment: 8 |
|
MAFP | Maintenance fee payment |
Free format text: PAYMENT OF MAINTENANCE FEE, 12TH YEAR, LARGE ENTITY (ORIGINAL EVENT CODE: M1553); ENTITY STATUS OF PATENT OWNER: LARGE ENTITYYear of fee payment: 12 |