US20110093803A1 - Server Geospatially Organized Flat File Data - Google Patents
Server Geospatially Organized Flat File Data Download PDFInfo
- Publication number
- US20110093803A1 US20110093803A1 US12/906,878 US90687810A US2011093803A1 US 20110093803 A1 US20110093803 A1 US 20110093803A1 US 90687810 A US90687810 A US 90687810A US 2011093803 A1 US2011093803 A1 US 2011093803A1
- Authority
- US
- United States
- Prior art keywords
- canceled
- data
- geospatial data
- file
- generating
- Prior art date
- Legal status (The legal status is an assumption and is not a legal conclusion. Google has not performed a legal analysis and makes no representation as to the accuracy of the status listed.)
- Granted
Links
Images
Classifications
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F21/00—Security arrangements for protecting computers, components thereof, programs or data against unauthorised activity
- G06F21/60—Protecting data
- G06F21/62—Protecting access to data via a platform, e.g. using keys or access control rules
- G06F21/6218—Protecting access to data via a platform, e.g. using keys or access control rules to a system of files or objects, e.g. local or distributed file system or database
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F16/00—Information retrieval; Database structures therefor; File system structures therefor
- G06F16/20—Information retrieval; Database structures therefor; File system structures therefor of structured data, e.g. relational data
- G06F16/29—Geographical information databases
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F21/00—Security arrangements for protecting computers, components thereof, programs or data against unauthorised activity
- G06F21/60—Protecting data
-
- Y—GENERAL TAGGING OF NEW TECHNOLOGICAL DEVELOPMENTS; GENERAL TAGGING OF CROSS-SECTIONAL TECHNOLOGIES SPANNING OVER SEVERAL SECTIONS OF THE IPC; TECHNICAL SUBJECTS COVERED BY FORMER USPC CROSS-REFERENCE ART COLLECTIONS [XRACs] AND DIGESTS
- Y10—TECHNICAL SUBJECTS COVERED BY FORMER USPC
- Y10S—TECHNICAL SUBJECTS COVERED BY FORMER USPC CROSS-REFERENCE ART COLLECTIONS [XRACs] AND DIGESTS
- Y10S707/00—Data processing: database and file management or data structures
- Y10S707/912—Applications of a database
- Y10S707/918—Location
- Y10S707/919—Geographic
-
- Y—GENERAL TAGGING OF NEW TECHNOLOGICAL DEVELOPMENTS; GENERAL TAGGING OF CROSS-SECTIONAL TECHNOLOGIES SPANNING OVER SEVERAL SECTIONS OF THE IPC; TECHNICAL SUBJECTS COVERED BY FORMER USPC CROSS-REFERENCE ART COLLECTIONS [XRACs] AND DIGESTS
- Y10—TECHNICAL SUBJECTS COVERED BY FORMER USPC
- Y10S—TECHNICAL SUBJECTS COVERED BY FORMER USPC CROSS-REFERENCE ART COLLECTIONS [XRACs] AND DIGESTS
- Y10S707/00—Data processing: database and file management or data structures
- Y10S707/912—Applications of a database
- Y10S707/918—Location
- Y10S707/921—Spatial
-
- Y—GENERAL TAGGING OF NEW TECHNOLOGICAL DEVELOPMENTS; GENERAL TAGGING OF CROSS-SECTIONAL TECHNOLOGIES SPANNING OVER SEVERAL SECTIONS OF THE IPC; TECHNICAL SUBJECTS COVERED BY FORMER USPC CROSS-REFERENCE ART COLLECTIONS [XRACs] AND DIGESTS
- Y10—TECHNICAL SUBJECTS COVERED BY FORMER USPC
- Y10S—TECHNICAL SUBJECTS COVERED BY FORMER USPC CROSS-REFERENCE ART COLLECTIONS [XRACs] AND DIGESTS
- Y10S707/00—Data processing: database and file management or data structures
- Y10S707/99941—Database schema or data structure
- Y10S707/99944—Object-oriented database structure
- Y10S707/99945—Object-oriented database structure processing
-
- Y—GENERAL TAGGING OF NEW TECHNOLOGICAL DEVELOPMENTS; GENERAL TAGGING OF CROSS-SECTIONAL TECHNOLOGIES SPANNING OVER SEVERAL SECTIONS OF THE IPC; TECHNICAL SUBJECTS COVERED BY FORMER USPC CROSS-REFERENCE ART COLLECTIONS [XRACs] AND DIGESTS
- Y10—TECHNICAL SUBJECTS COVERED BY FORMER USPC
- Y10S—TECHNICAL SUBJECTS COVERED BY FORMER USPC CROSS-REFERENCE ART COLLECTIONS [XRACs] AND DIGESTS
- Y10S707/00—Data processing: database and file management or data structures
- Y10S707/99951—File or database maintenance
- Y10S707/99952—Coherency, e.g. same view to multiple users
- Y10S707/99954—Version management
Definitions
- the present invention is related to organization and processing of flat file data, and more particularly to systems, methods, and computer program products for delivering content from several flat file databases that can reside locally and/or remotely.
- stored data on a server is organized according to a plurality of files in a file system.
- each node may use a separate file for each drawable, with the various files being organized in a hierarchy of directories.
- Data representing imagery can be stored in basically the same way, possibly with different directory hierarchy and file naming protocols (for example, the clipgen format).
- Quadtree packets which are the data files that are sent to the client that describe the quadtree structure and contents of the database, are computed beforehand and stored as files on the server. If a large amount of data is to be managed, creation and storage of such a database can overload a conventional file system. In order to mitigate the strain on the file system, a special output format may be employed to transfer the files. Even with such an arrangement, large amounts of data can result in corruption of the file system.
- KFF Keyhole Flatfile
- Keyhole Flatfile assumes very low cache coherency, to account for the fact that in an application such as a geospatial data viewer, users might be looking at multiple different places on the globe, so that requests are likely to hit disparate parts of database and not just one location. Given this scenario, it is beneficial to minimize disk seeks.
- the indexing system of Keyhole Flatfile is a quadtree-based structure, wherein each node points to a location in a binary file that contains the data files.
- the Keyhole Flatfile system has actually benefited significantly from the caching of the file system. Since it was designed for the worst-case scenario, it performs better than expected during normal access to the server.
- a memory caching system may be employed in conjunction with Keyhole Flatfile, if desired. Performance may be further improved by adding more memory to the server.
- Keyhole Flatfiles may be accessed directly over the Internet by applications such as Earthviewer 3D and Earthviewer PocketPC.
- Earthviewer HTML viewer accesses the data directly on the server and delivers the rendered image to the web browser.
- the present invention uses a quadtree index not only to help find data objects within a massive database, but also for fast delivery of the quadtree index itself to a remote application. This is accomplished by a four-level sectioning of the quadtree index, which allows for the quadtree packets to be generated with a minimal amount of reads from disk.
- the invention further provides the ability to quickly merge quadtree packets on the fly, thus allowing delivery of multiple databases without requiring that they be preprocessed into one database. Such functionality has benefits in the management of the database and for rapid deployment of new data.
- FIG. 1 is a flow chart of KFF data retrieval according to one embodiment of the present invention.
- FIG. 1A is a legend for various Figures of the present application.
- FIG. 2 is a flow chart of QuadTree packet generation according to one embodiment of the present invention.
- FIG. 3 is a flow chart of QuadTree packet merging according to one embodiment of the present invention.
- FIG. 4 is a flow chart of obtaining a session key according to one embodiment of the present invention.
- FIG. 5 is a flow chart of using a session key with a data packet according to one embodiment of the present invention.
- FIG. 6 is a flow chart of general data migration according to one embodiment of the present invention.
- FIG. 7 is a flow chart of the basic system flow according to one embodiment of the present invention.
- FIG. 8 is a diagram showing a QuadTree packet and data file list according to one embodiment of the present invention.
- FIG. 9 is a diagram showing a QuadTree-based approach to spatially organize data according to one embodiment of the present invention.
- FIG. 10 is a diagram showing a data section according to one embodiment of the present invention.
- FIG. 11 is a diagram showing a basetree structure according to one embodiment of the present invention.
- FIG. 12 is a diagram showing a subtree structure according to one embodiment of the present invention.
- EarthServer DataStream A server employing the techniques of the present invention.
- Earthviewer 3D A client application for viewing data provided via EarthServer DataStream.
- Earthviewer PocketPC A client application for viewing data provided via EarthServer DataStream.
- Earthviewer HTML An HTML-based viewer for viewing data provided via EarthServer DataStream.
- KBF Keyhole Binary File
- KFF Keyhole Flat File
- Raw Flat File A file containing imagery or terrain tiles that are concatenated one after another with a header describing where it should go in the database attached to the front of each tile.
- dbRoot A file containing the version and channel information of a given KFFDB. It is used in deployment of a KFFDB to the EarthViewer 3D client.
- QuadTree Packet contains a set of nodes organized in recursive order describing the contents of the database at those specific nodes. This is the data packet that is sent to the EarthViewer 3D client to tell it what is contained in the KFFDB database.
- Drawable Packet This packet contains a set of drawables that can include, etSite (labeled points), etStreet (labled lines for drawing streets), and etPolyLines (multipoint line). These packets are associated with a particular node in the QuadTree and are sent to the client in order to draw such things as roads, points of interest, and state borders.
- Image Tile This is a one section of imagery at a particular resolution and position (i.e. a particular point in the QuadTree).
- Terrain Tile This is a one section of the terrain at a particular resolution and position (i.e. a particular point in the QuadTree).
- the basic flow of the EarthServer DataStream product consists of first taking the customer's data 701 and converting it via a data migration tool 702 into a Keyhole Flatfile Database (KFFDB) 703 .
- KFFDB Keyhole Flatfile Database
- This KFFDB is then transferred over to EarthServer DataStream server 704 and its contents are then delivered to the Earthviewer products (such as Earthviewer 3D 705 and/or Earthviewer HTML 706 ) over the Internet.
- Earthviewer products such as Earthviewer 3D 705 and/or Earthviewer HTML 706
- Tool 702 gets 602 a data item from list 601 of data items, and adds 603 the data item to QuadTree structure 605 . If, in 604 , there are more data items in list 601 , tool 702 returns to step 602 . Otherwise, it proceeds with steps 606 through 610 .
- Tool 702 gets 606 a node from QuadTree structure 605 and gets 607 data items in the node. It then creates 608 a data packet for the data items and puts 609 the data packet into Keyhole Flatfile database 703 . If, in 610 , there are more nodes in QuadTree structure 605 , tool 702 returns to step 606 . Otherwise the data migration process is complete.
- the KFFDB 703 can come in two forms. One is a Keyhole Flatfile (KFF) and the other is a combination of a KFF and a set of Keyhole Binary Files (KBF).
- KFF Keyhole Flatfile
- KBF Keyhole Binary Files
- FIG. 8 there is shown an example of a QuadTree packet 801 and data file list 802 according to one embodiment of the present invention.
- FIGS. 10 , 11 , and 12 there are shown examples of structures for data section 1000 , BaseTree 1100 , and SubTree 1200 respectively.
- the data section 1000 contains the data files 1001 that are inserted into the KFF.
- the BaseTree 1100 contains all the nodes 1101 A at the base of the tree, which are all nodes 1101 A that reside on the first 12 levels.
- the SubTree contains all the nodes 1101 B below the base of the tree.
- the nodes 1101 of the QuadTree packet 801 are stored in four-level packets; each packet has an associated list of data file names and locations. Each node 1101 indexes into that list to store the data file names and locations that are associated with that particular node 1101 .
- the list of data file names and locations is stored in the data section 1000 .
- the data section 1000 holds data files 1001 and QuadTreeFileLists
- the BaseTree section 1100 holds QuadTreeIndexSections 1101 A for the first 12 levels of the QuadTreeIndex
- the SubTree section 1200 holds QuadTreeIndexSections 1101 B for the levels below level 12 of the QuadTreeIndex.
- Each section includes a set of files.
- QuadTree packet data file lists 802 in the data section, the invention allows base 1100 and SubTree 1200 sections to remain unfragmented, since QuadTree packets are atomic units (i.e., space for all 85 nodes are allocated when a QuadTree packet is created) while data file lists 802 can change in size.
- the KFF can stand alone as a KFFDB 703 for the EarthServer DataStream.
- the second form of the KFFDB 703 includes a KBF.
- the KFF is used as an index file into the KBF, which acts as the source for all of the data files.
- the KBF file is used only with drawable packets (such as streets, polylines, sites, and the like), while the FF file format is used for imagery and terrain tiles.
- the KBF/KFF form of the KFFDB 703 may be used for maintaining large KFFDBs 703 such as the Earthserver ASP database, since it allows for small incremental updates to the database rather than a completely new KFFDB 703 .
- KFFDB 703 is implemented using the following files.
- files might include:
- the data section 1000 is the first three files (kffdb.sample, kffdb.sample.1, and kffdb.sample.2); the BaseTree section 1100 is in the fourth file (kffdb.sample.base), and the SubTree section 1200 is in the last two files (kffdb.sample.sub and kffdb.sample.sub.1).
- each section is split up into a series of files of predetermined size (such as one gigabyte, for example). Numbered file names such as kffdb.sample.1 and kffdb.sample.2 represent the split files. In this embodiment, the collection of these six files would be the KFF.
- KFFDB 703 For the KBF/KFF form, in one embodiment the implementation would consist of the following files.
- KFFDB 703 called “kffdb.sample”, files might include:
- the first four files are the KFF that acts as the index into the last three files (restaurant-data.kbf, streetdata.kbf, and imagerydata.ff), which contain data such as streets, points, lines, imagery and terrain.
- the last three files do not require the .kbf/.ff extension.
- the EarthServer DataStream Server includes the following components:
- KFFDB 703 is the database that is to be delivered by the server.
- dbRoot maintains the version and content information of the KFFDB 703 .
- the Apache modules deliver the contents of the KFFDB 703 .
- the EarthServer DataStream server can merge multiple KFFDBs 703 in addition to multiple remote databases.
- the local databases are directly attached and the remote databases are accessed via the mod_flatfile HTTP interface.
- mod_flatfile allows ten local databases and ten remote databases to be merged, although in other embodiments additional databases may be merged.
- EarthServer DataStream allows for one remote database to be merged—specifically, the Earthserver ASP.
- any number of databases can be merged together.
- the mod_earthrender module can only have one remote database and up to ten local databases; in other embodiments, this module can include any number of databases.
- the dbRoot file contains the current version of the KFFDB 703 .
- dbRoot is the first thing that the Earthviewer 3D client asks for when it starts up so that it knows whether the data files it has in its cache are current or not.
- the dbRoot also contains information on what data is contained on each channel. It can potentially contain any other registry values that need to be set or changed in the Earthviewer 3D client, such as the domain name of the stream server, clip texture settings, and default values of buttons.
- the dbRoot file also contains the encryption key that is used by the EarthServer DataStream Server to encrypt the content that is being delivered.
- the encryption key is also used by the client to decrypt the incoming data files.
- the dbRoot version number must be incremented. If any additional channels of data have been added, in one embodiment they are recorded in the dbRoot file in order for the Earthviewer 3D client to be aware of their existence.
- the dbRoot file is created using the dbRoot tool.
- the channel information for a given KFFDB 703 is set by attaching a text file with the dbRoot.
- the text file in the ETA format takes the following form:
- the first value in an entry is the type of icon to use in the “Show Me/Popular Locations” section of the Earthviewer 3D client. In one embodiment, the possible values for this are:
- the second value is whether the channel is turned on (1.0) or off (0.0) by default.
- the third value is the channel number.
- the fourth value is whether the channel is to show up in the “Show Me/Popular Locations” list (true/false).
- the fifth value sets the channel to be triggered by a button on the Earthviewer 3D UI.
- the possible values are:
- This module delivers data files directly from the KFFDB 703 and generates QuadTree packets on demand for the KFFDB 703 .
- This is the main interface for Earthviewer 3D and Earthviewer PocketPC.
- Files are accessed by asking for the QuadTree node location described by a branching traversal guide (BTG) and the name of the file.
- BTG branching traversal guide
- Data packets just use a BTG.
- the URI formats for requesting these data objects are as follows:
- This module delivers image files for viewing the KFFDB 703 through an HTML interface.
- the following are the parameters for defining a desired image:
- lat [float] Sets the latitude of the center pixel of the image.
- long [float] Sets the longitude of the center pixel of the image.
- level [int] Sets the level to access the database.
- xsize [int] Sets the width of the image.
- ysize [int] Sets the height of the image.
- clist [string] Sets what channels to turn on in the image (i.e. turn on 1, 3, 34 then string is 001003034)
- plat [float] Sets the latitude of the annotation point.
- plong [float] Sets the longitude of the annotatin point.
- pname [string] Sets the label of the annotation point.
- ypsearch [string] Sets the string to search for in the yp database.
- filetype [string] Sets what type of file to return.
- jpeg “jpg”
- gif “gif”
- eta “eta”
- textnum [int] If value is 1 then sends over comma-delineated list of visible sites/POIs in the image.
- This module delivers the dbRoot file. It also merges the dbRoot file with the dbRoot file of remote KFFDBs 703 so that when changes are made to remote KFFDBs 703 it is reflected as a change in the delivered database from the EarthServer DataStream Server.
- the delivered version number is computed by adding all of the version numbers of each dbRoot together, therefore if any of the dbRoots get upreved then the merged dbRoot gets upreved. It also can merge the channel content information from other remote KFFDBs 703 , if desired.
- the EarthServer DataStream works in conjunction with an authorization server that passes out session keys to registered users.
- the session keys are needed for two reasons: to validate the user and to restrict access to the database.
- the validation is done both at the authorization server and the stream server.
- the authorization server only gives out session keys to registered users. These session keys have an expiration time that is checked by the stream servers, so old session keys can not be stolen and reused.
- the session keys also contain additional information that tells the stream server which parts of the database a particular user is allowed to access. This is conveyed through the use of package IDs, where each package ID grants database access for a particular region, at a particular resolution, and for a particular channel (i.e. imagery, terrain, roads, restaurants, etc.).
- the present invention runs on a conventional computer, having components such as the following:
- the present invention runs on a conventional computer, having components such as the following:
- the present invention runs on a conventional computer, having components such as the following:
- ESDS EarthServer DataStream
- the processor speed mainly affects how fast ESDS can deliver earthrender images. A faster processor will allow for more images to be delivered per second.
- the main processor-heavy elements of mod_flatfile are encryption, compression, and QuadTree packet generation.
- Hard Drive The more disk space that is available, the more of the KFFDB 703 that can be cached on the local disk, and the fewer requests need to be made to the remote server (i.e. Earthserver ASP). In the case of an NFS-mounted NAS device, it could reduce need to access the NAS device by caching previously requested locally. Also for earthrender, the local drive can be used to cache decompressed image tiles, which can tremendously increase performance.
- the main factor that affects KFFDB 703 read performance is disk seek time, and disk seek time is directly related to rotational speed. Therefore higher rotational speed generally results in improved performance.
- KffFlatfileDatabaseURL a list of kff database URLs
- KffFlatfileSessionCheckLevel the session check level
- KffFlatfileMaximumCacheSize the maximum number of MB of the cache file
- KffFlatfileACLIndexPath the path for the ACL index
- KffFlatfileACLDefaultPolicyPath the path for the ACL default policy
- KffFlatfileCopyrightListPath the path for the copyright list file
- KffEarthrenderDatabaseURL a list of kff database URLs
- KffEarthrenderCheckLevel the check level for access
- KffEarthrenderACLIndexPath the path for the ACL index
- KffEarthrenderACLDefaultPolicyPath the path for the ACL default policy
- KffEarthrenderCopyrightListPath the path for the copyright list file
- KffDbRootMergerURL a list of kff database URLs
- smelter This tool is used to convert customer data into kbf or kff files. It is the main tool used for data migration, as shown in FIG. 6 .
- dbroottool This tool is used to create the dbRoot file. It can read the contents of a dbRoot file, write out a new dbRoot file, or increment the version number of a dbRoot file.
- kbftokff This tool is used to add a kbf file into a kff file. This mainly pertains to drawables such as points and lines.
- fftokff This tool is used to add an ff file into a kff file. This mainly pertains to imagery and terrain.
- kffperf This is a tool to measure the performance of the EarthServer Data-Stream. It takes a log file form the apache server and sends those requests to a given server.
- kffview This tool is used to view the contents of a kff file, just like traversing through directories on a unix file system.
- kffreadlog This tool is used to read the binary log file generated by the mod_flatfile module.
- kff This library is used to create and modify kff files.
- kbf This is a header file that provides classes to create, read, and write kbf files.
- qtpgen This library is used to create/modify drawable packets and QuadTree packets.
- jpegbuffer This library is used to create 2D representations (such as JPEG images) from the KFFDB 703 database.
- FIGS. 1 through 6 there are shown flow charts of various methods according to the present invention.
- the following components, associated with KFF, are used in the various methods as depicted in FIGS. 1 through 6 .
- FIG. 1A there is shown a legend indicating symbols for the various components described below.
- the node contains two numbers, offset and length, which refers to a particular section of the QuadTreeFileList of the QuadTreeIndexSection associated with the node.
- This section contains the list of data packets that are associated with the node, where each item in the list tells the name of the data packet, the location of the data packet, and the size of the data packet.
- This data item contains two numbers, data file index and data file offset, which are used to store the location of a particular data packet.
- the data file index tells which file it is contained in, and the data file offset tells where in that file the data packet is located.
- This data item contains a particular position of a node in the QuadTree by specifying the level of the node and a list of what child was traversed at each level.
- This data item contains three things: name string, QuadTreePosition, and data packet size. These describe the name of the data packet, the location of the data packet, and the size of the data packet.
- This data item is a set of QuadTreeFileEntries. It is associated with a QuadTreeIndexSection and it is the list of all the data packets that are contained within that particular QuadTreeIndexSection.
- This data item is a four-level section of the QuadTreeIndex consisting of QuadTreeIndexNodes and an associated QuadTreeFileList. It also contains QuadTreePositions for all the children of the fourth-level nodes.
- QuadTreeIndex indexing system to the KFF file that tells what is in the database and where in the database it resides. It uses a QuadTree-based approach to spatially organize the data. This means each node of the QuadTree has four children 902 A-C, where each child 902 covers one quarter of its parent's 901 defined area.
- This data item contains information about a particular node in the QuadTree that is delivered to the Earthviewer 3D client.
- This QuadTree is different from the QuadTreeIndex; the information in the node is specific to the Earthviewer 3D client.
- the node contains version numbers for imagery, terrain, cache node, and channels. It also contains children existence information.
- This data item includes a recursively ordered list of QuadTreeQuantums, which describes a section of the Earthviewer 3D client QuadTree.
- FIG. 1 is a flow chart of KFF data retrieval according to one embodiment of the present invention.
- the system gets 101 root QuadTreeIndexSection from KFF 703 and determines 103 whether QuadTreeIndexSection contains the node described by QuadTreePosition 102 . If not, the system gets 104 the next QuadTreeIndexSection from KFF 703 . If QuadTreeIndexSection does contain the node, the system gets 105 the QuadTreeIndexNode identified by the QuadTreePosition from the QuadTreeIndexSection, and gets 106 the QuadTreeFileList associated with the QuadTreeIndexSection from KFF 703 . Then, the system gets 107 the QuadTreeFileEntries from the QuadTreeFileList pointed to by the QuadTreeIndexNode and determines 109 whether Data Name 108 exists in the QuadTreeFileEntries.
- the system returns 112 a returns 113 a “Data Packet Not Found.” If Data Name 108 does exist in the QuadTreeFileEntries, the system gets 110 QuadTreeFilePosition and size of Data Name 108 Data Packet from QuadTreeFileEntry. The system then gets 111 Data Packet at QuadTreePosition, and returns 113 a “Data Packet Found.”
- FIG. 2 is a flow chart of QuadTree packet generation according to one embodiment of the present invention.
- the system gets 202 the QuadTreeIndexSection that includes the QuadTreeIndexNode at the QuadTreePosition 201 from KFF 703 .
- the system then gets 203 the QuadTreeIndexNode identified by the QuadTreePosition 201 from the QuadTreeIndexSection, and gets 204 the QuadTreeFileList associated with the QuadTreeIndexSection from KFF 703 .
- the system then gets 205 the QuadTreeFileEntries from the QuadTreeFileList pointed to by the QuadTreeIndexNode, and creates 206 a QuadTreeQuantum from the QuadTreeFileEntries.
- the system then adds 209 the QuadTreeQuantum to the QuadTreeQuantum list 210 . Also, it determines 207 whether the children at the QuadTreePosition 201 extend beyond the QuadTreePacketDepth 208 . If not, the system determines 213 whether there is a first child at the QuadTreePosition 201 ; if so, it creates 214 a QuadTreePosition for the first child. The system determines 215 whether there is a second child at the QuadTreePosition 201 ; if so, it creates 216 a QuadTreePosition for the second child.
- the system determines 217 whether there is a third child at the QuadTreePosition 201 ; if so, it creates 218 a QuadTreePosition for the third child.
- the system determines 219 whether there is a fourth child at the QuadTreePosition 201 ; if so, it creates 220 a QuadTreePosition for the fourth child.
- the system determines 211 whether this is the last QuadTreeIndexNode to be processed. If so, it creates 212 the QuadTreePacket 801 from the QuadTreeQuantum list 210 .
- FIG. 3 is a flow chart of QuadTree packet merging according to one embodiment of the present invention.
- the system merges QuadTreePacket 1 801 A and QuadTreePacket 2 801 B as follows. It creates 301 A QuadTreeQuantumList 1 210 A from QuadTreePacket 1 801 A, and creates 301 B QuadTreeQuantumList 2 210 B from QuadTreePacket 2 801 B. The system then determines 302 whether there is another QuadTreeQuantum in List 1 210 A. If not, the system determines 303 whether there is another QuadTreeQuantum in List 2 210 B. If not, the system adds 304 QuadTreeQuantum 2 to the merged QuadTreeQuantumList 210 C and creates 311 a merged QuadTreePacket 801 C.
- step 311 the system determines that there is another QuadTreeQuantum in List 2 210 B, it proceeds directly to step 311 to create a merged QuadTreePacket 801 C.
- the system determines that there is another QuadTreeQuantum in List 1 210 A, it gets 305 the first or next QuadTreeQuantum from List 1 210 A, computes 306 the QuadTreePosition of the next QuadTreeQuantum in List 1 210 A, and determines 307 whether there is another QuadTreeQuantum in List 2 210 B. If not, the system adds 308 QuadTreeQuantum 1 to the merged QuadTreeQuantumList 210 C and creates 311 a merged QuadTreePacket 801 C.
- the system determines that there is another QuadTreeQuantum in List 2 210 B, it gets 309 the first or next QuadTreeQuantum from List 2 210 B and computes 310 the QuadTreePosition of the next QuadTreeQuantum in List 2 210 B. Then, it determines 311 whether the level of QuadTreePosition 1 is less than, greater than, or equal to the level of QuadTreePosition 2 .
- QuadTreePosition 1 If the level of QuadTreePosition 1 is less than the level of QuadTreePosition 2 , the system puts back 317 QuadTreeQuantum 2 into QuadTreeQuantumList 2 210 B, adds 318 QuadTreeQuantum 1 to the merged QuadTreeQuantumList 210 C and creates 311 a merged QuadTreePacket 801 C.
- the system determines that the level of QuadTreePosition 1 is greater than the level of QuadTreePosition 2 , it puts back 315 QuadTreeQuantum 1 into QuadTreeQuantumList 1 210 A, adds 316 QuadTreeQuantum 2 to the merged QuadTreeQuantumList 210 C and creates 311 a merged QuadTreePacket 801 C. It also returns to step 302 .
- the system determines 312 whether the child number of QuadTreePosition 1 is less than, greater than, or equal to the child number of QuadTreePosition 2 . If the child number of QuadTreePosition 1 is less than the child number of QuadTreePosition 2 , the system puts back 315 QuadTreeQuantum 1 into QuadTreeQuantumList 1 210 A, adds 316 QuadTreeQuantum 2 to the merged QuadTreeQuantumList 210 C and creates 311 a merged QuadTreePacket 801 C.
- step 302 It also returns to step 302 . If, in 312 , the child number of QuadTreePosition 1 is greater than the child number of QuadTreePosition 2 , the system puts back 317 QuadTreeQuantum 2 into QuadTreeQuantumList 2 210 B, adds 318 QuadTreeQuantum 1 to the merged QuadTreeQuantumList 210 C and creates 311 a merged QuadTreePacket 801 C.
- the system merges 303 the QuadTreeQuantums together, puts 314 the merged QuadTreeQuantum into the merged QuadTreeQuantumList 210 C, and creates 311 a merged QuadTreePacket 801 C. It also returns to step 302 .
- FIG. 4 is a flow chart of obtaining a session key according to one embodiment of the present invention.
- the system determines 401 whether the user has registered the client application. If not, it gets 402 the first name, last name, and registration ID from the user. Next, the system gets 403 the encryption key from the server. Next, it encrypts 404 the first name, last name, and registration ID, and sends 405 the encrypted message to the server for verification. If the server indicates 406 that the registration ID is not valid, the system exits 407 .
- the server If, in 406 , the server indicates that the registration ID is valid, or if, in 401 , the system determines that the user has registered the client application, the system sends 408 the encrypted registration ID and requests a session key.
- the system determines 409 whether the registration ID is valid. If so, it sends 411 a session key back to the client. If not, the system exits 410 .
- FIG. 5 is a flow chart of using a session key with a data packet according to one embodiment of the present invention.
- the system sends 501 the session key with a data packet request to the server. Next, it decrypts 502 the session key on the server side, and gets expiration time 502 , package IDs 503 , and current time 505 . The system then determines 506 whether the current time is past the expiration time. If so, it denies 507 access.
- the system determines 508 whether the data packet requested is accessible to the user given the list of package IDs. If not, it denies 509 access. If the data packet is accessible, the system sends 510 the requested data packet.
- the present invention also relates to an apparatus for performing the operations herein.
- This apparatus may be specially constructed for the required purposes, or it may comprise a general-purpose computer selectively activated or reconfigured by a computer program stored in the computer.
- a computer program may be stored in a computer readable storage medium, such as, but is not limited to, any type of disk including floppy disks, optical disks, CD-ROMs, and magnetic-optical disks, read-only memories (ROMs), random access memories (RAMs), EPROMs, EEPROMs, magnetic or optical cards, or any type of media suitable for storing electronic instructions, and each coupled to a computer system bus.
- the invention may be embodied in other specific forms without departing from the spirit or essential characteristics thereof.
- the particular architectures depicted above are merely exemplary of one implementation of the present invention.
- the functional elements and method steps described above are provided as illustrative examples of one technique for implementing the invention; one skilled in the art will recognize that many other implementations are possible without departing from the present invention as recited in the claims.
- the particular capitalization or naming of the modules, protocols, features, attributes, or any other aspect is not mandatory or significant, and the mechanisms that implement the invention or its features may have different names or formats.
- the present invention may be implemented as a method, process, user interface, computer program product, system, apparatus, or any combination thereof. Accordingly, the disclosure of the present invention is intended to be illustrative, but not limiting, of the scope of the invention, which is set forth in the following claims.
Abstract
Description
- This application is a divisional of U.S. application Ser. No. 11/750,282, filed on May 17, 2007, which is a continuation of U.S. application Ser. No. 10/270,272, filed on Oct. 10, 2002, which claims the benefit of U.S. provisional patent application Ser. No. 60/328,487 for “Server For Geospatially Organized Flat File Data,” filed Oct. 10, 2001, the disclosure of which applications are incorporated herein by reference.
- 1. Field of the Invention
- The present invention is related to organization and processing of flat file data, and more particularly to systems, methods, and computer program products for delivering content from several flat file databases that can reside locally and/or remotely.
- 2. Description of the Background Art
- Conventionally, stored data on a server is organized according to a plurality of files in a file system. In an application for storing, retrieving, and drawing geospatially organized data (such as an interactive viewer for geospatial data), each node may use a separate file for each drawable, with the various files being organized in a hierarchy of directories. Data representing imagery can be stored in basically the same way, possibly with different directory hierarchy and file naming protocols (for example, the clipgen format). Quadtree packets, which are the data files that are sent to the client that describe the quadtree structure and contents of the database, are computed beforehand and stored as files on the server. If a large amount of data is to be managed, creation and storage of such a database can overload a conventional file system. In order to mitigate the strain on the file system, a special output format may be employed to transfer the files. Even with such an arrangement, large amounts of data can result in corruption of the file system.
- In order to avoid the excessive transfer time and inefficiency of using a conventional file system, the present invention employs a flat file data organization technique, referred to herein as “Keyhole Flatfile,” or KFF, for storing and retrieving geospatially organized data. KFF reduces transfer time by transferring a few large files in lieu of a large number of small files. It also moves the process of locating a given data file away from the file system to a proprietary code base. Finally, KFF makes database management much easier by having the quadtree packets generated on demand. Items can be added to the database by simply inserting the files rather than inserting and regenerating the appropriate quadtree packets. Keyhole Flatfile assumes very low cache coherency, to account for the fact that in an application such as a geospatial data viewer, users might be looking at multiple different places on the globe, so that requests are likely to hit disparate parts of database and not just one location. Given this scenario, it is beneficial to minimize disk seeks. The indexing system of Keyhole Flatfile is a quadtree-based structure, wherein each node points to a location in a binary file that contains the data files.
- In practice, the Keyhole Flatfile system has actually benefited significantly from the caching of the file system. Since it was designed for the worst-case scenario, it performs better than expected during normal access to the server. A memory caching system may be employed in conjunction with Keyhole Flatfile, if desired. Performance may be further improved by adding more memory to the server.
- Keyhole Flatfiles may be accessed directly over the Internet by applications such as Earthviewer 3D and Earthviewer PocketPC. Earthviewer HTML viewer accesses the data directly on the server and delivers the rendered image to the web browser.
- The present invention uses a quadtree index not only to help find data objects within a massive database, but also for fast delivery of the quadtree index itself to a remote application. This is accomplished by a four-level sectioning of the quadtree index, which allows for the quadtree packets to be generated with a minimal amount of reads from disk. The invention further provides the ability to quickly merge quadtree packets on the fly, thus allowing delivery of multiple databases without requiring that they be preprocessed into one database. Such functionality has benefits in the management of the database and for rapid deployment of new data.
-
FIG. 1 is a flow chart of KFF data retrieval according to one embodiment of the present invention. -
FIG. 1A is a legend for various Figures of the present application. -
FIG. 2 is a flow chart of QuadTree packet generation according to one embodiment of the present invention. -
FIG. 3 is a flow chart of QuadTree packet merging according to one embodiment of the present invention. -
FIG. 4 is a flow chart of obtaining a session key according to one embodiment of the present invention. -
FIG. 5 is a flow chart of using a session key with a data packet according to one embodiment of the present invention. -
FIG. 6 is a flow chart of general data migration according to one embodiment of the present invention. -
FIG. 7 is a flow chart of the basic system flow according to one embodiment of the present invention. -
FIG. 8 is a diagram showing a QuadTree packet and data file list according to one embodiment of the present invention. -
FIG. 9 is a diagram showing a QuadTree-based approach to spatially organize data according to one embodiment of the present invention. -
FIG. 10 is a diagram showing a data section according to one embodiment of the present invention. -
FIG. 11 is a diagram showing a basetree structure according to one embodiment of the present invention. -
FIG. 12 is a diagram showing a subtree structure according to one embodiment of the present invention. - EarthServer DataStream—A server employing the techniques of the present invention.
- Earthviewer 3D—A client application for viewing data provided via EarthServer DataStream.
- Earthviewer PocketPC—A client application for viewing data provided via EarthServer DataStream.
- Earthviewer HTML—An HTML-based viewer for viewing data provided via EarthServer DataStream.
- Keyhole Binary File (KBF)—A file containing drawable packets that are concatenated one after another with a header describing where it should go in the database attached to the front of each packet.
- Keyhole Flat File (KFF)—A file containing a set of data packets that are spatially indexed. It is the primary data format for EarthServer DataStream.
- Raw Flat File (FF)—A file containing imagery or terrain tiles that are concatenated one after another with a header describing where it should go in the database attached to the front of each tile.
- dbRoot—A file containing the version and channel information of a given KFFDB. It is used in deployment of a KFFDB to the EarthViewer 3D client.
- QuadTree Packet—The QuadTree packet contains a set of nodes organized in recursive order describing the contents of the database at those specific nodes. This is the data packet that is sent to the EarthViewer 3D client to tell it what is contained in the KFFDB database.
- Drawable Packet—This packet contains a set of drawables that can include, etSite (labeled points), etStreet (labled lines for drawing streets), and etPolyLines (multipoint line). These packets are associated with a particular node in the QuadTree and are sent to the client in order to draw such things as roads, points of interest, and state borders.
- Image Tile—This is a one section of imagery at a particular resolution and position (i.e. a particular point in the QuadTree).
- Terrain Tile—This is a one section of the terrain at a particular resolution and position (i.e. a particular point in the QuadTree).
- System Architecture
- Referring now to
FIG. 7 , the basic flow of the EarthServer DataStream product consists of first taking the customer'sdata 701 and converting it via adata migration tool 702 into a Keyhole Flatfile Database (KFFDB) 703. This KFFDB is then transferred over toEarthServer DataStream server 704 and its contents are then delivered to the Earthviewer products (such asEarthviewer 3D - Data Migration
- Referring now to
FIG. 6 , there is shown a flowchart of data migration as performed bydata migration tool 702 according to one embodiment of the present invention.Tool 702 gets 602 a data item fromlist 601 of data items, and adds 603 the data item toQuadTree structure 605. If, in 604, there are more data items inlist 601,tool 702 returns to step 602. Otherwise, it proceeds withsteps 606 through 610.Tool 702 gets 606 a node fromQuadTree structure 605 and gets 607 data items in the node. It then creates 608 a data packet for the data items and puts 609 the data packet intoKeyhole Flatfile database 703. If, in 610, there are more nodes inQuadTree structure 605,tool 702 returns to step 606. Otherwise the data migration process is complete. - Keyhole Flat File Database
- The
KFFDB 703 can come in two forms. One is a Keyhole Flatfile (KFF) and the other is a combination of a KFF and a set of Keyhole Binary Files (KBF). - There are three main parts to the a KFF file:
-
-
Data 1000 -
BaseTree 1100 -
SubTree 1200
-
- Referring now to
FIG. 8 , there is shown an example of aQuadTree packet 801 and data filelist 802 according to one embodiment of the present invention. Referring also toFIGS. 10 , 11, and 12, there are shown examples of structures fordata section 1000,BaseTree 1100, andSubTree 1200 respectively. Thedata section 1000 contains the data files 1001 that are inserted into the KFF. TheBaseTree 1100 contains all thenodes 1101A at the base of the tree, which are allnodes 1101A that reside on the first 12 levels. The SubTree contains all thenodes 1101B below the base of the tree. Thenodes 1101 of theQuadTree packet 801 are stored in four-level packets; each packet has an associated list of data file names and locations. Eachnode 1101 indexes into that list to store the data file names and locations that are associated with thatparticular node 1101. The list of data file names and locations is stored in thedata section 1000. - In one embodiment, the
data section 1000 holdsdata files 1001 and QuadTreeFileLists, theBaseTree section 1100 holdsQuadTreeIndexSections 1101A for the first 12 levels of the QuadTreeIndex, and theSubTree section 1200 holdsQuadTreeIndexSections 1101B for the levels below level 12 of the QuadTreeIndex. Each section includes a set of files. - In the KFF, file space of deleted files is left unused. Therefore, over time with deletions and additions into the KFF, the data file can become fragmented. In the case of replaced files, the space is reused if the new file is less than or equal to the size of the old file. By storing QuadTree packet data file lists 802 in the data section, the invention allows base 1100 and
SubTree 1200 sections to remain unfragmented, since QuadTree packets are atomic units (i.e., space for all 85 nodes are allocated when a QuadTree packet is created) while data file lists 802 can change in size. - Given the case where the data files 1001 are inserted into the KFF, the KFF can stand alone as a KFFDB 703 for the EarthServer DataStream.
- The second form of the
KFFDB 703 includes a KBF. In this case, the KFF is used as an index file into the KBF, which acts as the source for all of the data files. In one embodiment, the KBF file is used only with drawable packets (such as streets, polylines, sites, and the like), while the FF file format is used for imagery and terrain tiles. The KBF/KFF form of theKFFDB 703 may be used for maintaininglarge KFFDBs 703 such as the Earthserver ASP database, since it allows for small incremental updates to the database rather than a completelynew KFFDB 703. - In one embodiment,
KFFDB 703 is implemented using the following files. For aKFFDB 703 called “kffdb.sample”, files might include: -
- kffdb.sample
- kffdb.sample.1
- kffdb.sample.2
- kffdb.sample.base
- kffdb.sample.sub
- kffdb.sample.sub.1
- The
data section 1000 is the first three files (kffdb.sample, kffdb.sample.1, and kffdb.sample.2); theBaseTree section 1100 is in the fourth file (kffdb.sample.base), and theSubTree section 1200 is in the last two files (kffdb.sample.sub and kffdb.sample.sub.1). In this embodiment, each section is split up into a series of files of predetermined size (such as one gigabyte, for example). Numbered file names such as kffdb.sample.1 and kffdb.sample.2 represent the split files. In this embodiment, the collection of these six files would be the KFF. - For the KBF/KFF form, in one embodiment the implementation would consist of the following files. For a
KFFDB 703 called “kffdb.sample”, files might include: -
- kffdb.sample
- kffdb.sample.base
- kffdb.sample.sub
- kffdb.sample.sub1
- restaurantdata.kbf
- streetdata.kbf
- imagerydata.ff
- The first four files (kffdb.sample, kffdb.sample.base, kffdb.sample.sub, and kffdb.sample.sub1) are the KFF that acts as the index into the last three files (restaurant-data.kbf, streetdata.kbf, and imagerydata.ff), which contain data such as streets, points, lines, imagery and terrain. The last three files do not require the .kbf/.ff extension.
- EarthServer DataStream Server
- In one embodiment, the EarthServer DataStream Server includes the following components:
-
-
KFFDB 703 - dbRoot
- Apache modules
- mod_flatfile
- mod_earthrender
- mod_dbrootmerger
-
-
KFFDB 703 is the database that is to be delivered by the server. dbRoot maintains the version and content information of theKFFDB 703. The Apache modules deliver the contents of theKFFDB 703. -
KFFDB 703 - The EarthServer DataStream server can merge
multiple KFFDBs 703 in addition to multiple remote databases. The local databases are directly attached and the remote databases are accessed via the mod_flatfile HTTP interface. In one embodiment, mod_flatfile allows ten local databases and ten remote databases to be merged, although in other embodiments additional databases may be merged. In one embodiment, EarthServer DataStream allows for one remote database to be merged—specifically, the Earthserver ASP. In alternative embodiments, any number of databases can be merged together. In one embodiment, the mod_earthrender module can only have one remote database and up to ten local databases; in other embodiments, this module can include any number of databases. - dbRoot
- The dbRoot file contains the current version of the
KFFDB 703. In one embodiment, dbRoot is the first thing that theEarthviewer 3D client asks for when it starts up so that it knows whether the data files it has in its cache are current or not. The dbRoot also contains information on what data is contained on each channel. It can potentially contain any other registry values that need to be set or changed in theEarthviewer 3D client, such as the domain name of the stream server, clip texture settings, and default values of buttons. - The dbRoot file also contains the encryption key that is used by the EarthServer DataStream Server to encrypt the content that is being delivered. The encryption key is also used by the client to decrypt the incoming data files.
- In one embodiment, whenever the
KFFDB 703 is changed on the server, the dbRoot version number must be incremented. If any additional channels of data have been added, in one embodiment they are recorded in the dbRoot file in order for theEarthviewer 3D client to be aware of their existence. - In one embodiment, the dbRoot file is created using the dbRoot tool. The channel information for a given
KFFDB 703 is set by attaching a text file with the dbRoot. The text file in the ETA format takes the following form: -
<etStruct> [export.layers] { <etLayer> [Channel A] { “recreation” 0.0 128 true “” } <etLayer> [Channel B] { “building” 0.0 129 true “” } <etLayer> [Channel C] { “bang” 0.0 130 true “” } } - For each entry in the list, the name of the channel is placed in the brackets [ ]. The first value in an entry is the type of icon to use in the “Show Me/Popular Locations” section of the
Earthviewer 3D client. In one embodiment, the possible values for this are: -
- “american-flag”
- “asian-flag”
- “auto”
- “auto-service”
- “bang”
- “bars”
- “building”
- “dining”
- “fast-food”
- “four-dollars”
- “french-flag”
- “italian-flag”
- “mexican-flag”
- “misc-dining”
- “one-dollar”
- “parks”
- “recreation”
- “three-dollars”
- “transportation”
- “two-dollars”
- The second value is whether the channel is turned on (1.0) or off (0.0) by default. The third value is the channel number. The fourth value is whether the channel is to show up in the “Show Me/Popular Locations” list (true/false). The fifth value sets the channel to be triggered by a button on the
Earthviewer 3D UI. The possible values are: -
- “borders”
- “roads”
- “terrain”
- “weather”
- Other values can also be set using the ETA file format.
- mod_flatfile
- This module delivers data files directly from the
KFFDB 703 and generates QuadTree packets on demand for theKFFDB 703. This is the main interface forEarthviewer 3D and Earthviewer PocketPC. Files are accessed by asking for the QuadTree node location described by a branching traversal guide (BTG) and the name of the file. Data packets just use a BTG. The URI formats for requesting these data objects are as follows: - Data Files:
-
- http://stream.earthviewer.com/flatfile?f1-<BTG>-<datafilename>
- Example: http://stream.earthviewer.com/flatfile?f1-010302-i.1
- Data File Name Formats:
- image tiles: i.<version>
- terrain tiles: t.<version>
- data files: d.<channel>.<version>
- Data File Name Formats:
- QuadTree Packets:
-
- 8-bit QuadTree Packets: http://stream.earthviewer.com/flatfile?q1-<BTG>
- 16-bit QuadTree Packets: http://stream.earthviewer.com/flatfile?q2-<BTG>
- Example: http://stream.earthviewer.com/flatfile?q1-010302
- mod_earthrender
- This module delivers image files for viewing the
KFFDB 703 through an HTML interface. The following are the parameters for defining a desired image: -
lat=[float] Sets the latitude of the center pixel of the image. long=[float] Sets the longitude of the center pixel of the image. level=[int] Sets the level to access the database. xsize=[int] Sets the width of the image. ysize=[int] Sets the height of the image. clist=[string] Sets what channels to turn on in the image (i.e. turn on 1, 3, 34 then string is 001003034) plat=[float] Sets the latitude of the annotation point. plong=[float] Sets the longitude of the annotatin point. pname=[string] Sets the label of the annotation point. ypsearch=[string] Sets the string to search for in the yp database. filetype=[string] Sets what type of file to return. jpeg = “jpg” gif = “gif” eta = “eta” textnum=[int] If value is 1 then sends over comma-delineated list of visible sites/POIs in the image. - mod_dbrootmerger
- This module delivers the dbRoot file. It also merges the dbRoot file with the dbRoot file of
remote KFFDBs 703 so that when changes are made toremote KFFDBs 703 it is reflected as a change in the delivered database from the EarthServer DataStream Server. The delivered version number is computed by adding all of the version numbers of each dbRoot together, therefore if any of the dbRoots get upreved then the merged dbRoot gets upreved. It also can merge the channel content information from otherremote KFFDBs 703, if desired. - Session Key Verification and Access Control Layer Restrictions
- The EarthServer DataStream works in conjunction with an authorization server that passes out session keys to registered users. The session keys are needed for two reasons: to validate the user and to restrict access to the database.
- The validation is done both at the authorization server and the stream server. The authorization server only gives out session keys to registered users. These session keys have an expiration time that is checked by the stream servers, so old session keys can not be stolen and reused.
- The session keys also contain additional information that tells the stream server which parts of the database a particular user is allowed to access. This is conveyed through the use of package IDs, where each package ID grants database access for a particular region, at a particular resolution, and for a particular channel (i.e. imagery, terrain, roads, restaurants, etc.).
- System
- In one embodiment, the present invention runs on a conventional computer, having components such as the following:
-
- 1×866 MHz Pentium III
- 512 MB Main Memory
- 18 GB Hard Disk Space
- In another embodiment, the present invention runs on a conventional computer, having components such as the following:
-
- 2×1 GHz Pentium III
- 1 GB Main Memory
- 36 GB Hard Disk Space
- In yet another embodiment, the present invention runs on a conventional computer, having components such as the following:
-
- 2×1.26 GHz Pentium III
- 2 GB Main Memory
- 72 GB Hard Disk Space
- One skilled in the art will recognize that many other types of hardware components may be used in connection with the present invention. Component characteristics may affect the performance of EarthServer DataStream (ESDS) as follows.
- CPU: The processor speed mainly affects how fast ESDS can deliver earthrender images. A faster processor will allow for more images to be delivered per second. The main processor-heavy elements of mod_flatfile are encryption, compression, and QuadTree packet generation.
- Memory: The amount of main memory helps tremendously in system caching of file blocks. This increases the speed at which data packets can be pulled out of the
KFFDB 703 and therefore general performance of ESDS. - Hard Drive: The more disk space that is available, the more of the
KFFDB 703 that can be cached on the local disk, and the fewer requests need to be made to the remote server (i.e. Earthserver ASP). In the case of an NFS-mounted NAS device, it could reduce need to access the NAS device by caching previously requested locally. Also for earthrender, the local drive can be used to cache decompressed image tiles, which can tremendously increase performance. The main factor that affectsKFFDB 703 read performance is disk seek time, and disk seek time is directly related to rotational speed. Therefore higher rotational speed generally results in improved performance. - Module Directives
- The following is a list of directives for each module. The directives with the * next to them are required directives and the others are optional. There is an explanation of each directive below along with an example of how to use them.
- mod_flatfile
- *KffFlatfileDatabasePath—a list of kff database paths
- Example:
-
- KffFlatfileDatabasePath/gaiadb/db1/kffdb.db1/gaiadb/db2/kffdb.db2
- KffFlatfileDatabaseURL—a list of kff database URLs
- Example:
-
- KffFlatfileDatabaseURL stream.earthviewer.com stream.companyA.com
- *KffDatabaseRootPath—the path for the dbRoot file
- Example:
-
- KffDatabaseRootPath/var/www/dbroot/dbRoot.ver1
- KffFlatfileLogFilePath—the path for flat file log
- Example:
-
- KffFlatfileLogFilePath/var/www/logs/kffdblog
- KffFlatfileSessionCheckLevel—the session check level
- (0—only valid cookie, 1—valid cookie or no cookie, 2—no restrictions)
- Example:
-
-
KffFlatfileSessionCheckLevel 2
-
- KffFlatfileBinaryLog—flag for using binary log
- Example:
-
- KffFlatfileBinaryLog On
- KffFlatfileBinaryLog Off
- KffFlatfileCacheFilePath—the path for cache file
- Example:
-
- KffFlatfileCacheFilePath/var/www/esds-cache/
- KffFlatfileMaximumCacheSize—the maximum number of MB of the cache file
- Example:
-
-
KffFlatfileMaximumCacheSize 1000
-
- KffFlatfileACLDictionaryPath—the path for the ACL dictionary
- Example:
-
- KffFlatfileACLDictionaryPath/var/www/acl/ACL_dict1
- KffFlatfileACLIndexPath—the path for the ACL index
- Example:
-
- KffFlatfileACLIndexPath/var/www/acl/
ACL_index —1
- KffFlatfileACLIndexPath/var/www/acl/
- KffFlatfileACLDefaultPolicyPath—the path for the ACL default policy
- Example:
-
- KffFlatfileACLDefaultPolicyPath/var/www/acl/ACL_def1
- KffFlatfileACLMemoryResident—flag for whether the dictionary is memory resident or not
- Example:
-
- KffFlatfileACLMemoryResident On
- KffFlatfileACLMemoryResident Off
- KffFlatfileCopyrightListPath—the path for the copyright list file
- Example:
- KffFlatfileCopyrightListPath/var/www/crlist/copyrightlist.crf
- mod_earthrender
- *KffEarthrenderDatabasePath—a list of kff database paths
- Example:
-
- KffEarthrenderDatabasePath/gaiadb/db1/kffdb.db1/gaiadb/db2/kffdb.db2
- KffEarthrenderDatabaseURL—a list of kff database URLs
- Example:
-
- KffEarthrenderDatabaseURL stream.earthviewer.com
- *KffTexturePath—the path for the texture image files
- Example:
-
- KffTexturePath/var/www/textures/
- KffYPServerUrlPath—the url for the ypserver
- Example:
- KffYPServerUrlPath http://yp.earthviewer.com/cgi-bin/ypsearch_beta?long=% 1f&lat=% 1f&dlat=% 1f&dlong=% 1f&name=% s
- KffEarthrenderCheckLevel—the check level for access
- (0—full access, 1—SF only, 2—ACL/SessionKey restricted access)
- Example:
-
-
KffEarthrenderCheckLevel 2
-
- KffEarthrenderACLDictionaryPath—the path for the ACL dictionary
- Example:
-
- KffEarthrenderACLDictionaryPath/var/www/acl/ACL_dict1
- KffEarthrenderACLIndexPath—the path for the ACL index
- Example:
-
- KffEarthrenderACLIndexPath/var/www/acl/
ACL_index —1
- KffEarthrenderACLIndexPath/var/www/acl/
- KffEarthrenderACLDefaultPolicyPath—the path for the ACL default policy
- Example:
-
- KffEarthrenderACLDefaultPolicyPath/var/www/acl/ACL_def1
- KffEarthrenderACLMemoryResident—flag for whether the dictionary is memory resident or not
- Example:
-
- KffEarthrenderACLMemoryResident On
- KffEarthrenderACLMemoryResident Off
- KffEarthrenderCopyrightListPath—the path for the copyright list file
- Example:
-
- KffEarthrenderCopyrightListPath/var/www/crlist/copyrightlist.crf
- mod_dbrootmerger
- KffDbRootMergerURL—a list of kff database URLs
- Example:
-
- KffDbRootMergerURL stream.earthviewer.com
- *KffDbRootMergerDbRootPath—the path for the dbRoot file
- Example:
-
- KffDbRootMergerDbRootPath/var/www/dbroot/dbRoot.ver1
- KffDbRootMergerPostambleMerge—flag for whether to merge the postambles
- Example:
-
- KffDbRootMergerPostambleMerge On
- KffDbRootMergerPostambleMerge Off
- Tools
- smelter—This tool is used to convert customer data into kbf or kff files. It is the main tool used for data migration, as shown in
FIG. 6 . - dbroottool—This tool is used to create the dbRoot file. It can read the contents of a dbRoot file, write out a new dbRoot file, or increment the version number of a dbRoot file.
- kbftokff—This tool is used to add a kbf file into a kff file. This mainly pertains to drawables such as points and lines.
- fftokff—This tool is used to add an ff file into a kff file. This mainly pertains to imagery and terrain.
- kffperf—This is a tool to measure the performance of the EarthServer Data-Stream. It takes a log file form the apache server and sends those requests to a given server.
- kffview—This tool is used to view the contents of a kff file, just like traversing through directories on a unix file system.
- kffreadlog—This tool is used to read the binary log file generated by the mod_flatfile module.
- Libraries
- kff—This library is used to create and modify kff files.
- kbf—This is a header file that provides classes to create, read, and write kbf files.
- qtpgen—This library is used to create/modify drawable packets and QuadTree packets.
- jpegbuffer—This library is used to create 2D representations (such as JPEG images) from the
KFFDB 703 database. - Methods
- Referring now to
FIGS. 1 through 6 , there are shown flow charts of various methods according to the present invention. The following components, associated with KFF, are used in the various methods as depicted inFIGS. 1 through 6 . Referring also toFIG. 1A , there is shown a legend indicating symbols for the various components described below. - Data Packet
- Summary: This is a collection of bytes that contain data about a geospecific area of the earth. This data can be of any type: imagery, terrain, vectors, points, etc.
- QuadTreeIndexNode
- Summary: This is one node of the QuadTreeIndex. The node contains two numbers, offset and length, which refers to a particular section of the QuadTreeFileList of the QuadTreeIndexSection associated with the node. This section contains the list of data packets that are associated with the node, where each item in the list tells the name of the data packet, the location of the data packet, and the size of the data packet.
- QuadTreeFilePosition
- Summary: This data item contains two numbers, data file index and data file offset, which are used to store the location of a particular data packet. The data file index tells which file it is contained in, and the data file offset tells where in that file the data packet is located.
- QuadTreePosition
- Summary: This data item contains a particular position of a node in the QuadTree by specifying the level of the node and a list of what child was traversed at each level.
- QuadTreeFileEntry
- Summary: This data item contains three things: name string, QuadTreePosition, and data packet size. These describe the name of the data packet, the location of the data packet, and the size of the data packet.
- QuadTreeFileList
- Summary: This data item is a set of QuadTreeFileEntries. It is associated with a QuadTreeIndexSection and it is the list of all the data packets that are contained within that particular QuadTreeIndexSection.
- QuadTreeIndexSection
- Summary: This data item is a four-level section of the QuadTreeIndex consisting of QuadTreeIndexNodes and an associated QuadTreeFileList. It also contains QuadTreePositions for all the children of the fourth-level nodes.
- QuadTreeIndex
- Summary: Referring now to
FIG. 9 , there is shown the QuadTreeIndex indexing system to the KFF file that tells what is in the database and where in the database it resides. It uses a QuadTree-based approach to spatially organize the data. This means each node of the QuadTree has fourchildren 902A-C, where each child 902 covers one quarter of its parent's 901 defined area. - QuadTreeQuantum
- Summary: This data item contains information about a particular node in the QuadTree that is delivered to the
Earthviewer 3D client. This QuadTree is different from the QuadTreeIndex; the information in the node is specific to theEarthviewer 3D client. The node contains version numbers for imagery, terrain, cache node, and channels. It also contains children existence information. - QuadTreePacket
- Summary: This data item includes a recursively ordered list of QuadTreeQuantums, which describes a section of the
Earthviewer 3D client QuadTree. - KFF Data Retrieval
-
FIG. 1 is a flow chart of KFF data retrieval according to one embodiment of the present invention. The system gets 101 root QuadTreeIndexSection fromKFF 703 and determines 103 whether QuadTreeIndexSection contains the node described byQuadTreePosition 102. If not, the system gets 104 the next QuadTreeIndexSection fromKFF 703. If QuadTreeIndexSection does contain the node, the system gets 105 the QuadTreeIndexNode identified by the QuadTreePosition from the QuadTreeIndexSection, and gets 106 the QuadTreeFileList associated with the QuadTreeIndexSection fromKFF 703. Then, the system gets 107 the QuadTreeFileEntries from the QuadTreeFileList pointed to by the QuadTreeIndexNode and determines 109 whetherData Name 108 exists in the QuadTreeFileEntries. - If
Data Name 108 does not exist in the QuadTreeFileEntries, the system returns 112 a returns 113 a “Data Packet Not Found.” IfData Name 108 does exist in the QuadTreeFileEntries, the system gets 110 QuadTreeFilePosition and size ofData Name 108 Data Packet from QuadTreeFileEntry. The system then gets 111 Data Packet at QuadTreePosition, and returns 113 a “Data Packet Found.” - QuadTree Packet Generation
-
FIG. 2 is a flow chart of QuadTree packet generation according to one embodiment of the present invention. The system gets 202 the QuadTreeIndexSection that includes the QuadTreeIndexNode at theQuadTreePosition 201 fromKFF 703. The system then gets 203 the QuadTreeIndexNode identified by theQuadTreePosition 201 from the QuadTreeIndexSection, and gets 204 the QuadTreeFileList associated with the QuadTreeIndexSection fromKFF 703. The system then gets 205 the QuadTreeFileEntries from the QuadTreeFileList pointed to by the QuadTreeIndexNode, and creates 206 a QuadTreeQuantum from the QuadTreeFileEntries. - The system then adds 209 the QuadTreeQuantum to the
QuadTreeQuantum list 210. Also, it determines 207 whether the children at theQuadTreePosition 201 extend beyond theQuadTreePacketDepth 208. If not, the system determines 213 whether there is a first child at theQuadTreePosition 201; if so, it creates 214 a QuadTreePosition for the first child. The system determines 215 whether there is a second child at theQuadTreePosition 201; if so, it creates 216 a QuadTreePosition for the second child. The system determines 217 whether there is a third child at theQuadTreePosition 201; if so, it creates 218 a QuadTreePosition for the third child. The system determines 219 whether there is a fourth child at theQuadTreePosition 201; if so, it creates 220 a QuadTreePosition for the fourth child. - The system then determines 211 whether this is the last QuadTreeIndexNode to be processed. If so, it creates 212 the
QuadTreePacket 801 from theQuadTreeQuantum list 210. - QuadTree Packet Merging
-
FIG. 3 is a flow chart of QuadTree packet merging according to one embodiment of the present invention. The system mergesQuadTreePacket1 801A andQuadTreePacket2 801B as follows. It creates301 A QuadTreeQuantumList1 210A fromQuadTreePacket1 801A, and creates301 B QuadTreeQuantumList2 210B fromQuadTreePacket2 801B. The system then determines 302 whether there is another QuadTreeQuantum inList1 210A. If not, the system determines 303 whether there is another QuadTreeQuantum inList2 210B. If not, the system adds 304 QuadTreeQuantum2 to the mergedQuadTreeQuantumList 210C and creates 311 amerged QuadTreePacket 801C. - If, in 303, the system determines that there is another QuadTreeQuantum in
List2 210B, it proceeds directly to step 311 to create amerged QuadTreePacket 801C. - If, in 302, the system determines that there is another QuadTreeQuantum in
List1 210A, it gets 305 the first or next QuadTreeQuantum fromList1 210A, computes 306 the QuadTreePosition of the next QuadTreeQuantum inList1 210A, and determines 307 whether there is another QuadTreeQuantum inList2 210B. If not, the system adds 308 QuadTreeQuantum1 to the mergedQuadTreeQuantumList 210C and creates 311 amerged QuadTreePacket 801C. - If, in 307, the system determines that there is another QuadTreeQuantum in
List2 210B, it gets 309 the first or next QuadTreeQuantum fromList2 210B and computes 310 the QuadTreePosition of the next QuadTreeQuantum inList2 210B. Then, it determines 311 whether the level of QuadTreePosition1 is less than, greater than, or equal to the level of QuadTreePosition2. If the level of QuadTreePosition1 is less than the level of QuadTreePosition2, the system puts back 317 QuadTreeQuantum2 intoQuadTreeQuantumList2 210B, adds 318 QuadTreeQuantum1 to the mergedQuadTreeQuantumList 210C and creates 311 amerged QuadTreePacket 801C. - If, in 311, the system determines that the level of QuadTreePosition1 is greater than the level of QuadTreePosition2, it puts back 315 QuadTreeQuantum1 into
QuadTreeQuantumList1 210A, adds 316 QuadTreeQuantum2 to the mergedQuadTreeQuantumList 210C and creates 311 amerged QuadTreePacket 801C. It also returns to step 302. - If, in 311, the system determines that the level of QuadTreePosition1 is equal to the level of QuadTreePosition2, it determines 312 whether the child number of QuadTreePosition1 is less than, greater than, or equal to the child number of QuadTreePosition2. If the child number of QuadTreePosition1 is less than the child number of QuadTreePosition2, the system puts back 315 QuadTreeQuantum1 into
QuadTreeQuantumList1 210A, adds 316 QuadTreeQuantum2 to the mergedQuadTreeQuantumList 210C and creates 311 amerged QuadTreePacket 801C. It also returns to step 302. If, in 312, the child number of QuadTreePosition1 is greater than the child number of QuadTreePosition2, the system puts back 317 QuadTreeQuantum2 intoQuadTreeQuantumList2 210B, adds 318 QuadTreeQuantum1 to the mergedQuadTreeQuantumList 210C and creates 311 amerged QuadTreePacket 801C. If, in 312, the child number of QuadTreePosition1 is equal to the child number of QuadTreePosition2, the system merges 303 the QuadTreeQuantums together, puts 314 the merged QuadTreeQuantum into themerged QuadTreeQuantumList 210C, and creates 311 amerged QuadTreePacket 801C. It also returns to step 302. - Obtaining a Session Key
-
FIG. 4 is a flow chart of obtaining a session key according to one embodiment of the present invention. The system determines 401 whether the user has registered the client application. If not, it gets 402 the first name, last name, and registration ID from the user. Next, the system gets 403 the encryption key from the server. Next, it encrypts 404 the first name, last name, and registration ID, and sends 405 the encrypted message to the server for verification. If the server indicates 406 that the registration ID is not valid, the system exits 407. - If, in 406, the server indicates that the registration ID is valid, or if, in 401, the system determines that the user has registered the client application, the system sends 408 the encrypted registration ID and requests a session key.
- The system then determines 409 whether the registration ID is valid. If so, it sends 411 a session key back to the client. If not, the system exits 410.
- Using a Session Key
-
FIG. 5 is a flow chart of using a session key with a data packet according to one embodiment of the present invention. The system sends 501 the session key with a data packet request to the server. Next, it decrypts 502 the session key on the server side, and getsexpiration time 502,package IDs 503, andcurrent time 505. The system then determines 506 whether the current time is past the expiration time. If so, it denies 507 access. - If the current time is not past the expiration time, the system determines 508 whether the data packet requested is accessible to the user given the list of package IDs. If not, it denies 509 access. If the data packet is accessible, the system sends 510 the requested data packet.
- In the above description, for purposes of explanation, numerous specific details are set forth in order to provide a thorough understanding of the invention. It will be apparent, however, to one skilled in the art that the invention can be practiced without these specific details. In other instances, structures and devices are shown in block diagram form in order to avoid obscuring the invention.
- Reference in the specification to “one embodiment” or “an embodiment” means that a particular feature, structure, or characteristic described in connection with the embodiment is included in at least one embodiment of the invention. The appearances of the phrase “in one embodiment” in various places in the specification are not necessarily all referring to the same embodiment.
- Some portions of the detailed description are presented in terms of algorithms and symbolic representations of operations on data bits within a computer memory. These algorithmic descriptions and representations are the means used by those skilled in the data processing arts to most effectively convey the substance of their work to others skilled in the art. An algorithm is here, and generally, conceived to be a self-consistent sequence of steps leading to a desired result. The steps are those requiring physical manipulations of physical quantities. Usually, though not necessarily, these quantities take the form of electrical or magnetic signals capable of being stored, transferred, combined, compared, and otherwise manipulated. It has proven convenient at times, principally for reasons of common usage, to refer to these signals as bits, values, elements, symbols, characters, terms, numbers, or the like.
- It should be borne in mind, however, that all of these and similar terms are to be associated with the appropriate physical quantities and are merely convenient labels applied to these quantities. Unless specifically stated otherwise as apparent from the discussion, it is appreciated that throughout the description, discussions utilizing terms such as “processing” or “computing” or “calculating” or “determining” or “displaying” or the like, refer to the action and processes of a computer system, or similar electronic computing device, that manipulates and transforms data represented as physical (electronic) quantities within the computer system's registers and memories into other data similarly represented as physical quantities within the computer system's memories or registers or other such information storage, transmission or display devices.
- The present invention also relates to an apparatus for performing the operations herein. This apparatus may be specially constructed for the required purposes, or it may comprise a general-purpose computer selectively activated or reconfigured by a computer program stored in the computer. Such a computer program may be stored in a computer readable storage medium, such as, but is not limited to, any type of disk including floppy disks, optical disks, CD-ROMs, and magnetic-optical disks, read-only memories (ROMs), random access memories (RAMs), EPROMs, EEPROMs, magnetic or optical cards, or any type of media suitable for storing electronic instructions, and each coupled to a computer system bus.
- The algorithms and displays presented herein are not inherently related to any particular computer, network of computers, or other apparatus. Various general-purpose systems may be used with programs in accordance with the teachings herein, or it may prove convenient to construct a more specialized apparatus to perform the required method steps. The required structure for a variety of these systems appears from the description. In addition, the present invention is not described with reference to any particular programming language. It will be appreciated that a variety of programming languages may be used to implement the teachings of the invention as described herein.
- As will be understood by those familiar with the art, the invention may be embodied in other specific forms without departing from the spirit or essential characteristics thereof. For example, the particular architectures depicted above are merely exemplary of one implementation of the present invention. The functional elements and method steps described above are provided as illustrative examples of one technique for implementing the invention; one skilled in the art will recognize that many other implementations are possible without departing from the present invention as recited in the claims. Likewise, the particular capitalization or naming of the modules, protocols, features, attributes, or any other aspect is not mandatory or significant, and the mechanisms that implement the invention or its features may have different names or formats. In addition, the present invention may be implemented as a method, process, user interface, computer program product, system, apparatus, or any combination thereof. Accordingly, the disclosure of the present invention is intended to be illustrative, but not limiting, of the scope of the invention, which is set forth in the following claims.
Claims (68)
Priority Applications (2)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US12/906,878 US8745080B2 (en) | 2001-10-10 | 2010-10-18 | Server geospatially organized flat file data |
US14/042,261 US9069985B2 (en) | 2001-10-10 | 2013-09-30 | Server geospatially organized flat file data |
Applications Claiming Priority (4)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US32848701P | 2001-10-10 | 2001-10-10 | |
US10/270,272 US7225207B1 (en) | 2001-10-10 | 2002-10-10 | Server for geospatially organized flat file data |
US11/750,282 US7818325B1 (en) | 2001-10-10 | 2007-05-17 | Serving geospatially organized flat file data |
US12/906,878 US8745080B2 (en) | 2001-10-10 | 2010-10-18 | Server geospatially organized flat file data |
Related Parent Applications (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
US11/750,282 Division US7818325B1 (en) | 2001-10-10 | 2007-05-17 | Serving geospatially organized flat file data |
Related Child Applications (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
US14/042,261 Continuation US9069985B2 (en) | 2001-10-10 | 2013-09-30 | Server geospatially organized flat file data |
Publications (2)
Publication Number | Publication Date |
---|---|
US20110093803A1 true US20110093803A1 (en) | 2011-04-21 |
US8745080B2 US8745080B2 (en) | 2014-06-03 |
Family
ID=38056844
Family Applications (4)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
US10/270,272 Active 2024-07-03 US7225207B1 (en) | 2001-10-10 | 2002-10-10 | Server for geospatially organized flat file data |
US11/750,282 Expired - Lifetime US7818325B1 (en) | 2001-10-10 | 2007-05-17 | Serving geospatially organized flat file data |
US12/906,878 Expired - Lifetime US8745080B2 (en) | 2001-10-10 | 2010-10-18 | Server geospatially organized flat file data |
US14/042,261 Expired - Fee Related US9069985B2 (en) | 2001-10-10 | 2013-09-30 | Server geospatially organized flat file data |
Family Applications Before (2)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
US10/270,272 Active 2024-07-03 US7225207B1 (en) | 2001-10-10 | 2002-10-10 | Server for geospatially organized flat file data |
US11/750,282 Expired - Lifetime US7818325B1 (en) | 2001-10-10 | 2007-05-17 | Serving geospatially organized flat file data |
Family Applications After (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
US14/042,261 Expired - Fee Related US9069985B2 (en) | 2001-10-10 | 2013-09-30 | Server geospatially organized flat file data |
Country Status (1)
Country | Link |
---|---|
US (4) | US7225207B1 (en) |
Cited By (5)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20120182298A1 (en) * | 2011-01-14 | 2012-07-19 | Wei Sun | Planetary scale object rendering |
US8380700B2 (en) * | 2011-04-13 | 2013-02-19 | Cisco Technology, Inc. | Ad hoc geospatial directory of users based on optimizing non-Turing complete executable application |
US8650220B2 (en) | 2012-06-05 | 2014-02-11 | Google Inc. | System and method for storing and retrieving geospatial data |
US20160328444A1 (en) * | 2013-05-13 | 2016-11-10 | Microsoft Technology Licensing, Llc | Efficient multi-tenant spatial and relational indexing |
US20170364696A1 (en) * | 2016-06-16 | 2017-12-21 | EMC IP Holding Company LLC | Method for filtering documents and electronic device |
Families Citing this family (37)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
CA2436312C (en) * | 2003-08-01 | 2011-04-05 | Perry Peterson | Close-packed, uniformly adjacent, multiresolutional, overlapping spatial data ordering |
US7739301B2 (en) * | 2004-03-17 | 2010-06-15 | Netapp, Inc. | Method and apparatus for improving file system proxy performance and security by distributing information to clients via file handles |
US7580867B2 (en) | 2004-05-04 | 2009-08-25 | Paul Nykamp | Methods for interactively displaying product information and for collaborative product design |
US7929800B2 (en) | 2007-02-06 | 2011-04-19 | Meadow William D | Methods and apparatus for generating a continuum of image data |
US8207964B1 (en) * | 2008-02-22 | 2012-06-26 | Meadow William D | Methods and apparatus for generating three-dimensional image data models |
EP1797722B1 (en) * | 2004-10-05 | 2019-05-29 | Vectormax Corporation | Adaptive overlapped block matching for accurate motion compensation |
US7353034B2 (en) | 2005-04-04 | 2008-04-01 | X One, Inc. | Location sharing and tracking using mobile phones or other wireless devices |
US7933929B1 (en) | 2005-06-27 | 2011-04-26 | Google Inc. | Network link for providing dynamic data layer in a geographic information system |
US8984033B2 (en) * | 2005-09-23 | 2015-03-17 | Chicago Mercantile Exchange, Inc. | Non-indexed in-memory data storage and retrieval |
US7933897B2 (en) | 2005-10-12 | 2011-04-26 | Google Inc. | Entity display priority in a distributed geographic information system |
WO2007146967A2 (en) * | 2006-06-12 | 2007-12-21 | Google Inc. | Markup language for interactive geographic information system |
US8584013B1 (en) | 2007-03-20 | 2013-11-12 | Google Inc. | Temporal layers for presenting personalization markers on imagery |
US8212807B2 (en) * | 2007-08-30 | 2012-07-03 | Harris Corporation | Geospatial data system for selectively retrieving and displaying geospatial texture data based upon user-selected point-of-view and related methods |
US8203552B2 (en) | 2007-08-30 | 2012-06-19 | Harris Corporation | Geospatial data system for selectively retrieving and displaying geospatial texture data in successive additive layers of resolution and related methods |
US20090100018A1 (en) * | 2007-10-12 | 2009-04-16 | Jonathan Roberts | System and method for capturing, integrating, discovering, and using geo-temporal data |
US8250480B2 (en) * | 2008-08-14 | 2012-08-21 | Mastercard International, Inc. | Interactive navigation of a dataflow process image |
US8077918B2 (en) | 2008-08-28 | 2011-12-13 | Google, Inc. | Architectures and methods for creating and representing time-dependent imagery |
US8872847B2 (en) | 2008-08-28 | 2014-10-28 | Google Inc. | Architectures and methods for creating and representing time-dependent imagery |
US8938456B2 (en) * | 2009-10-23 | 2015-01-20 | Intellidimension, Inc. | Data recovery system and method in a resource description framework environment |
US20110205229A1 (en) | 2010-02-23 | 2011-08-25 | Google Inc. | Portable Globe Creation for a Geographical Information System |
US9672658B2 (en) | 2010-02-23 | 2017-06-06 | Google Inc. | Portable globe creation for a geographical information system |
US20120066205A1 (en) * | 2010-03-14 | 2012-03-15 | Intellidimension, Inc. | Query Compilation Optimization System and Method |
CN101924846A (en) * | 2010-08-31 | 2010-12-22 | 北京云快线软件服务有限公司 | Real-time charging method |
US9311748B2 (en) | 2013-02-20 | 2016-04-12 | Google Inc. | Method and system for generating and storing data objects for multi-resolution geometry in a three dimensional model |
US20150089374A1 (en) * | 2013-09-20 | 2015-03-26 | Cyan Inc. | Network visualization system and method |
USD780777S1 (en) | 2014-04-22 | 2017-03-07 | Google Inc. | Display screen with graphical user interface or portion thereof |
USD781318S1 (en) | 2014-04-22 | 2017-03-14 | Google Inc. | Display screen with graphical user interface or portion thereof |
US9934222B2 (en) | 2014-04-22 | 2018-04-03 | Google Llc | Providing a thumbnail image that follows a main image |
USD781317S1 (en) | 2014-04-22 | 2017-03-14 | Google Inc. | Display screen with graphical user interface or portion thereof |
US9972121B2 (en) | 2014-04-22 | 2018-05-15 | Google Llc | Selecting time-distributed panoramic images for display |
CN104123101A (en) * | 2014-07-18 | 2014-10-29 | 北京京东尚科信息技术有限公司 | Method and device for presenting data |
CN107092604B (en) * | 2016-02-18 | 2020-03-20 | 中国移动通信集团河北有限公司 | File processing method and device |
CN105843841A (en) * | 2016-03-07 | 2016-08-10 | 青岛理工大学 | Small file storing method and system |
US10783173B2 (en) | 2016-04-08 | 2020-09-22 | Global Grid Systems Inc. | Methods and systems for selecting and analyzing geospatial data on a discrete global grid system |
CN108241618B (en) * | 2016-12-23 | 2022-05-17 | 航天信息股份有限公司 | Database migration method and device and service program migration method and device |
US10678842B2 (en) | 2017-03-21 | 2020-06-09 | EarthX, Inc. | Geostory method and apparatus |
US11360952B2 (en) | 2020-08-03 | 2022-06-14 | Bank Of America Corporation | System and method for managing data migration based on analysis of relevant data |
Citations (12)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US4223403A (en) * | 1978-06-30 | 1980-09-16 | International Business Machines Corporation | Cryptographic architecture for use with a high security personal identification system |
US4694404A (en) * | 1984-01-12 | 1987-09-15 | Key Bank N.A. | High-speed image generation of complex solid objects using octree encoding |
US5802492A (en) * | 1994-06-24 | 1998-09-01 | Delorme Publishing Company, Inc. | Computer aided routing and positioning system |
US6108650A (en) * | 1998-08-21 | 2000-08-22 | Myway.Com Corporation | Method and apparatus for an accelerated radius search |
US6223182B1 (en) * | 1998-06-30 | 2001-04-24 | Oracle Corporation | Dynamic data organization |
US6229546B1 (en) * | 1997-09-09 | 2001-05-08 | Geosoftware, Inc. | Rapid terrain model generation with 3-D object features and user customization interface |
US6236907B1 (en) * | 1995-05-30 | 2001-05-22 | Ag-Chem Equipment Co., Inc. | System and method for creating agricultural decision and application maps for automated agricultural machines |
US20010021926A1 (en) * | 1996-01-11 | 2001-09-13 | Paul B. Schneck | System for controlling access and distribution of digital property |
US6343290B1 (en) * | 1999-12-22 | 2002-01-29 | Celeritas Technologies, L.L.C. | Geographic network management system |
US6604046B1 (en) * | 1999-10-20 | 2003-08-05 | Objectfx Corporation | High-performance server architecture, methods, and software for spatial data |
US6609198B1 (en) * | 1999-08-05 | 2003-08-19 | Sun Microsystems, Inc. | Log-on service providing credential level change without loss of session continuity |
US6901428B1 (en) * | 2000-10-11 | 2005-05-31 | Ncr Corporation | Accessing data from a database over a network |
Family Cites Families (3)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US5901214A (en) * | 1996-06-10 | 1999-05-04 | Murex Securities, Ltd. | One number intelligent call processing system |
US6014614A (en) * | 1998-05-29 | 2000-01-11 | Oracle Corporation | Method and mechanism for performing spatial joins |
US20030069693A1 (en) * | 2001-01-16 | 2003-04-10 | Snapp Douglas N. | Geographic pointing device |
-
2002
- 2002-10-10 US US10/270,272 patent/US7225207B1/en active Active
-
2007
- 2007-05-17 US US11/750,282 patent/US7818325B1/en not_active Expired - Lifetime
-
2010
- 2010-10-18 US US12/906,878 patent/US8745080B2/en not_active Expired - Lifetime
-
2013
- 2013-09-30 US US14/042,261 patent/US9069985B2/en not_active Expired - Fee Related
Patent Citations (12)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US4223403A (en) * | 1978-06-30 | 1980-09-16 | International Business Machines Corporation | Cryptographic architecture for use with a high security personal identification system |
US4694404A (en) * | 1984-01-12 | 1987-09-15 | Key Bank N.A. | High-speed image generation of complex solid objects using octree encoding |
US5802492A (en) * | 1994-06-24 | 1998-09-01 | Delorme Publishing Company, Inc. | Computer aided routing and positioning system |
US6236907B1 (en) * | 1995-05-30 | 2001-05-22 | Ag-Chem Equipment Co., Inc. | System and method for creating agricultural decision and application maps for automated agricultural machines |
US20010021926A1 (en) * | 1996-01-11 | 2001-09-13 | Paul B. Schneck | System for controlling access and distribution of digital property |
US6229546B1 (en) * | 1997-09-09 | 2001-05-08 | Geosoftware, Inc. | Rapid terrain model generation with 3-D object features and user customization interface |
US6223182B1 (en) * | 1998-06-30 | 2001-04-24 | Oracle Corporation | Dynamic data organization |
US6108650A (en) * | 1998-08-21 | 2000-08-22 | Myway.Com Corporation | Method and apparatus for an accelerated radius search |
US6609198B1 (en) * | 1999-08-05 | 2003-08-19 | Sun Microsystems, Inc. | Log-on service providing credential level change without loss of session continuity |
US6604046B1 (en) * | 1999-10-20 | 2003-08-05 | Objectfx Corporation | High-performance server architecture, methods, and software for spatial data |
US6343290B1 (en) * | 1999-12-22 | 2002-01-29 | Celeritas Technologies, L.L.C. | Geographic network management system |
US6901428B1 (en) * | 2000-10-11 | 2005-05-31 | Ncr Corporation | Accessing data from a database over a network |
Non-Patent Citations (4)
Title |
---|
Clarke et al., The Contribution of the Global Map to a GSDI, 1999 * |
Haselfeld, USGS Digital Base Map Data, ESRI User's Conference, San Diego, CA, 2000 * |
Karn et al., Photuris Session-Key Management Protocol, 1999 * |
Onsrud et al., GIS Dissemnation Policy, 1996 * |
Cited By (10)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20120182298A1 (en) * | 2011-01-14 | 2012-07-19 | Wei Sun | Planetary scale object rendering |
US9165403B2 (en) * | 2011-01-14 | 2015-10-20 | Intel Corporation | Planetary scale object rendering |
US8380700B2 (en) * | 2011-04-13 | 2013-02-19 | Cisco Technology, Inc. | Ad hoc geospatial directory of users based on optimizing non-Turing complete executable application |
US8650220B2 (en) | 2012-06-05 | 2014-02-11 | Google Inc. | System and method for storing and retrieving geospatial data |
US9734260B2 (en) | 2012-06-05 | 2017-08-15 | Google Inc. | System and method for storing and retrieving geospatial data |
US11200280B2 (en) | 2012-06-05 | 2021-12-14 | Google Llc | System and method for storing and retrieving geospatial data |
US20160328444A1 (en) * | 2013-05-13 | 2016-11-10 | Microsoft Technology Licensing, Llc | Efficient multi-tenant spatial and relational indexing |
US10242051B2 (en) * | 2013-05-13 | 2019-03-26 | Microsoft Technology Licensing, Llc | Efficient multi-tenant spatial and relational indexing |
US20170364696A1 (en) * | 2016-06-16 | 2017-12-21 | EMC IP Holding Company LLC | Method for filtering documents and electronic device |
US10943023B2 (en) * | 2016-06-16 | 2021-03-09 | EMC IP Holding Company LLC | Method for filtering documents and electronic device |
Also Published As
Publication number | Publication date |
---|---|
US7225207B1 (en) | 2007-05-29 |
US20140033329A1 (en) | 2014-01-30 |
US7818325B1 (en) | 2010-10-19 |
US8745080B2 (en) | 2014-06-03 |
US9069985B2 (en) | 2015-06-30 |
Similar Documents
Publication | Publication Date | Title |
---|---|---|
US8745080B2 (en) | Server geospatially organized flat file data | |
CN1606300B (en) | Image distribution method and system in data processing system | |
US7712027B2 (en) | Method for document page delivery to a mobile communication device | |
US7277890B2 (en) | Method of finding a search string in a document for viewing on a mobile communication device | |
US6539424B1 (en) | Restricting deep hyperlinking on the World Wide Web | |
US8583691B2 (en) | Method for viewing document information on a mobile communication device | |
US10922339B2 (en) | Portable globe creation for a geographical information system | |
US20060225001A1 (en) | Method for requesting and viewing a preview of a table attachment on a mobile communication device | |
JP2004509415A (en) | How to search and analyze information in a data network | |
WO2000079379A1 (en) | A system of organising catalog data for searching and retrieval | |
US6098069A (en) | Data managing method and data managing device using the same for manipulating data independently from networks | |
KR20060047899A (en) | Distributed hosting of web content using partial replication | |
GB2339938A (en) | Collecting information about document retrievals over the World Wide Web | |
EP2539833A2 (en) | Portable globe creation for a geographical information system | |
CA2539641A1 (en) | Method for requesting and viewing a preview of a table attachment on a mobile communication device | |
JP4579693B2 (en) | Client-server protocol | |
CN100403310C (en) | Method of finding a search string in a document for viewing on a mobile communication device | |
US7363307B1 (en) | Apparatus and method for communicating hierarchical structures of directories | |
Hinds et al. | Managing metadata for distributed information servers | |
KR20020001960A (en) | Search method of Broadcast and multimedia file on Internet | |
US7328402B1 (en) | Change detection in a hierarchical directory using messages having a filtering mask | |
CA2479606C (en) | Method for document page delivery to a mobile communication device |
Legal Events
Date | Code | Title | Description |
---|---|---|---|
AS | Assignment |
Owner name: LIQUID ACQUISITION CORP. 2, CALIFORNIAFree format text: MERGER;ASSIGNOR:LIQUID ACQUISITION LLC;REEL/FRAME:025904/0802Effective date: 20041015Owner name: GOOGLE INC., CALIFORNIAFree format text: MERGER;ASSIGNOR:LIQUID ACQUISITION CORP. 2;REEL/FRAME:025904/0837Effective date: 20090225Owner name: KEYHOLE, INC., CALIFORNIAFree format text: ASSIGNMENT OF ASSIGNORS INTEREST;ASSIGNORS:OHAZAMA, CHIKAI J.;KESLIN, PHILLIP C.;AUBIN, MARK A.;REEL/FRAME:025905/0820Effective date: 20021220Owner name: LIQUID ACQUISTION LLC, CALIFORNIAFree format text: MERGER;ASSIGNOR:KEYHOLE, INC.;REEL/FRAME:025904/0774Effective date: 20041015 |
|
STCF | Information on status: patent grant |
Free format text: PATENTED CASE |
|
AS | Assignment |
Owner name: GOOGLE LLC, CALIFORNIAFree format text: CHANGE OF NAME;ASSIGNOR:GOOGLE INC.;REEL/FRAME:044129/0001Effective date: 20170929 |
|
MAFP | Maintenance fee payment |
Free format text: PAYMENT OF MAINTENANCE FEE, 4TH YEAR, LARGE ENTITY (ORIGINAL EVENT CODE: M1551)Year of fee payment: 4 |
|
MAFP | Maintenance fee payment |
Free format text: PAYMENT OF MAINTENANCE FEE, 8TH YEAR, LARGE ENTITY (ORIGINAL EVENT CODE: M1552); ENTITY STATUS OF PATENT OWNER: LARGE ENTITYYear of fee payment: 8 |