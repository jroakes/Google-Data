US7272836B1 - Method and apparatus for bridging service for standard object identifier based protocols - Google Patents
Method and apparatus for bridging service for standard object identifier based protocols Download PDFInfo
- Publication number
- US7272836B1 US7272836B1 US09/583,411 US58341100A US7272836B1 US 7272836 B1 US7272836 B1 US 7272836B1 US 58341100 A US58341100 A US 58341100A US 7272836 B1 US7272836 B1 US 7272836B1
- Authority
- US
- United States
- Prior art keywords
- oid
- repository
- abstraction layer
- query
- protocol
- Prior art date
- Legal status (The legal status is an assumption and is not a legal conclusion. Google has not performed a legal analysis and makes no representation as to the accuracy of the status listed.)
- Expired - Fee Related, expires
Links
Images
Classifications
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04L—TRANSMISSION OF DIGITAL INFORMATION, e.g. TELEGRAPHIC COMMUNICATION
- H04L41/00—Arrangements for maintenance, administration or management of data switching networks, e.g. of packet switching networks
- H04L41/02—Standardisation; Integration
- H04L41/0213—Standardised network management protocols, e.g. simple network management protocol [SNMP]
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F9/00—Arrangements for program control, e.g. control units
- G06F9/06—Arrangements for program control, e.g. control units using stored programs, i.e. using an internal store of processing equipment to receive or retain programs
- G06F9/46—Multiprogramming arrangements
- G06F9/465—Distributed object oriented systems
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04L—TRANSMISSION OF DIGITAL INFORMATION, e.g. TELEGRAPHIC COMMUNICATION
- H04L41/00—Arrangements for maintenance, administration or management of data switching networks, e.g. of packet switching networks
- H04L41/02—Standardisation; Integration
- H04L41/0233—Object-oriented techniques, for representation of network management data, e.g. common object request broker architecture [CORBA]
Definitions
- the present invention relates generally to improved remote management and in particular to a method and an apparatus for accessing standard object identifiers using any one of a plurality of standard object identifier based protocol methods.
- An Object Identifier is an Internet standard mechanism for uniquely naming objects that represent information to be remotely managed. Specifically, this mechanism is called the Structure of Management Information (SMI). SMI allows a uniquely identified piece of management information (or object), and attributes of this object, to be retrieved, managed and monitored. Many network management protocols make use of this Internet Engineering Task Force (IETF) SMI standard.
- IETF Internet Engineering Task Force
- the Simple Network Management Protocol is a widely used network monitoring and control protocol that makes use of OIDs.
- SNMP agents report information from various network components, such as hubs, routers, and bridges, to a workstation console used to manage the network. This information is contained in a Management Information Base (MIB), which is a data structure that defines what information is obtainable from the network component and what can be controlled by the network component.
- MIB Management Information Base
- SNMP is a simple protocol as it does not contain relations like the two protocols discussed next.
- Lightweight Directory Access Protocol is another example of a management protocol that uses SMI OIDs. It is a simplified version of the X.500 standard. LDAP support is implemented in Web browsers and e-mail programs, which can query an LDAP-compliant directory. Queries in LDAP can be complex, such as the query for what printer objects can be accessed by a particular user object.
- CIM Common Information Model
- a method and apparatus is presented for maintaining a logical composite repository of Object Identifier (OID) tree structures on a server in a distributed data processing system.
- Each OID tree structure has been programmed to interface with an application programming interface (API) associated with an OID abstraction layer for the composite repository.
- API application programming interface
- An OID subtree structure can be added to the composite repository resulting in registration with the OID abstraction layer and, in addition, an OID subtree structure can be removed from the composite repository resulting in removal of the OID subtree structure from the registry associated with the OID abstraction layer.
- Any query from a requester in the distributed data processing system about an object contained in the logical composite repository associated with the server is processed by the OID abstraction layer.
- the query must be in a protocol, such as SNMP, LDAP, and CIM/XML, recognized by the OID abstraction layer.
- the repository associated with the object of the query is determined from the OID abstraction layer registry.
- the query is formatted to be consistent with the API associated with the OID abstraction layer and sent to the repository associated with the object.
- a reply is received from the repository, it is formatted in the protocol of the original query and sent to the requester in the distributed data processing system.
- FIG. 1 is an exemplary diagram of a distributed data processing system in which the present invention may be implemented
- FIG. 2 is an exemplary block diagram of a server in which the present invention may be implemented
- FIG. 3A is an exemplary diagram of a standard object identifier tree illustrating the naming of nodes
- FIG. 3B is an exemplary diagram of a OID tree structure in accordance with the present invention.
- FIG. 4 is an exemplary block diagram showing the relationship between the OID Abstraction Layer to external queries and a logical composite repository
- FIG. 5 is a flowchart outlining an exemplary operation of the present invention.
- FIG. 1 depicts a pictorial representation of a distributed data processing system.
- Distributed data processing system 100 is a network of computers in which the present invention may be implemented.
- Distributed data processing system 100 contains a network 102 , which is the medium used to provide communications links between various devices and computers connected together within distributed data processing system 100 .
- Network 102 may include permanent connections, such as wire or fiber optic cables, or temporary connections made through telephone connections.
- a server 104 is connected to network 102 along with storage unit 106 .
- clients 108 , 110 , and 112 also are connected to network 102 .
- These clients 108 , 110 , and 112 may be, for example, personal computers or network computers.
- a network computer is any computer, coupled to a network, which receives a program or other application from another computer coupled to the network.
- server 104 provides data, such as boot files, operating system images, and applications to clients 108 - 112 .
- Clients 108 , 110 , and 112 are clients to server 104 .
- Distributed data processing system 100 may include additional servers, clients, and other devices not shown.
- distributed data processing system 100 is the Internet with network 102 representing a worldwide collection of networks and gateways that use the TCP/IP suite of protocols to communicate with one another.
- network 102 representing a worldwide collection of networks and gateways that use the TCP/IP suite of protocols to communicate with one another.
- network 102 representing a worldwide collection of networks and gateways that use the TCP/IP suite of protocols to communicate with one another.
- At the heart of the Internet is a backbone of high-speed data communication lines between major nodes or host computers, consisting of thousands of commercial, government, educational and other computer systems that route data and messages.
- distributed data processing system 100 also may be implemented as a number of different types of networks, such as for example, an intranet, a local area network (LAN), or a wide area network (WAN).
- LAN local area network
- WAN wide area network
- a management server 114 is connected to the network 102 .
- the management server 114 remotely manages the various network devices 104 - 112 based on management information gathered from the network devices 104 - 112 . While a management “server” is shown in FIG. 1 , the management functions of the present invention may be performed by a management application resident on any type computing device connected to the network 102 .
- These network devices are remotely managed using either a standard protocol, such as SNMP, LDAP, and CIM/XML, or another equivalent management protocol. Queries can be submitted using the supported protocols to the server machines.
- a standard protocol such as SNMP, LDAP, and CIM/XML, or another equivalent management protocol. Queries can be submitted using the supported protocols to the server machines.
- FIG. 1 is intended as an example, and not as an architectural limitation for the present invention. As may be readily apparent to those of ordinary skill in the art, many other types of devices may be connected to the network 102 without departing from the spirit and scope of the present invention.
- the network 102 may provide a communication pathway for client devices to send and receive data from printers, plotters, scanners, multiple drive libraries, and the like.
- the managed server such as 104
- the OID abstraction layer receives queries for objects in any of a number of different protocols, such as SNMP, LDAP or CIM/XML, and the like, from a management application running in a management server 114 .
- the OID abstraction layer identifies the object in the query, determines a repository in which the object is represented, and sends a request to the repository for the desired object via the API.
- the repository responds to the API with the object information which is placed into a reply message formatted for the proper protocol and sent to the requesting application.
- Data processing system 200 may be a symmetric multiprocessor (SMP) system including a plurality of processors 202 and 204 connected to system bus 206 . Alternatively, a single processor system may be employed. Also connected to system bus 206 is memory controller/cache 208 , which provides an interface to local memory 209 . I/O bus bridge 210 is connected to system bus 206 and provides an interface to I/O bus 212 . Memory controller/cache 208 and I/O bus bridge 210 may be integrated as depicted.
- SMP symmetric multiprocessor
- Peripheral component interconnect (PCI) bus bridge 214 connected to I/O bus 212 provides an interface to PCI local bus 216 .
- PCI bus 216 A number of modems may be connected to PCI bus 216 .
- Typical PCI bus implementations will support four PCI expansion slots or add-in connectors.
- Communications links to network computers 108 - 112 in FIG. 1 may be provided through modem 218 and network adapter 220 connected to PCI local bus 216 through add-in boards.
- Additional PCI bus bridges 222 and 224 provide interfaces for additional PCI buses 226 and 228 , from which additional modems or network adapters may be supported. In this manner, data processing system 200 allows connections to multiple network computers.
- a memory-mapped graphics adapter 230 and hard disk 232 may also be connected to I/O bus 212 as depicted, either directly or indirectly.
- FIG. 2 may vary.
- other peripheral devices such as optical disk drives and the like, also may be used in addition to or in place of the hardware depicted.
- the depicted example is not meant to imply architectural limitations with respect to the present invention.
- the data processing system depicted in FIG. 2 may be, for example, an IBM RISC/System 6000 system, a product of International Business Machines Corporation in Armonk, N.Y., running the Advanced Interactive Executive (AIX) operating system.
- AIX Advanced Interactive Executive
- the management server such as management server 114 , includes one or more network device management applications used to remotely manage a plurality of network devices 104 - 112 over a network 102 . These one or more network device management applications may be stored, for example, in local memory 209 , for example, and used to control the operations of the processor 202 or 204 on a remotely managed server 104 . As mentioned above, in a preferred embodiment of the present invention, the management server 114 manages the network devices 104 - 112 using a protocol such as SNMP, LDAP, CIM/XML, or a proprietary scheme.
- a protocol such as SNMP, LDAP, CIM/XML, or a proprietary scheme.
- the present invention provides an OID abstraction layer and API executed by the processor 202 and/or 204 of the managed server 200 , for interpreting queries in various protocol formats, determining a repository in which requested object information is resident, sending a request message to the identified repository, and inserting the received object information into a message formatted for the appropriate protocol.
- FIG. 3A is an exemplary diagram of a standard object identifier (OID) tree data structure that can be processed by the present invention.
- FIG. 3A is only intended to be a simplified depiction of a fictitious tree data structure that will aid in the understanding of the present invention and does not necessarily correspond to an actual standardized tree data structure. It should be noted that, while FIG. 3A depicts some nodes as having a single branch, these nodes may contain additional branches which are not shown for clarity.
- FIG. 3A is only an example to illustrate the OID numbering scheme and a different tree data structures of more or less complicated architectures are possible.
- the nodes of the tree data structure designate “objects” and are represented by object identifiers (OIDs).
- An “object” in the context of the tree refers to an entry in the tree.
- OIDs are often referred to by their human readable branch names rather than their numerical value.
- an object OID of a tree may have a numerical value but be referred to as “Age” or “Name” or the like.
- the objects of the tree represent tables and record entries within tables.
- a table “Person” may be comprised of records having entries corresponding to an index, a name, and an age.
- An OID tree structure starts with a single root labeled 0. This is a unique label in the tree so it is always easy to identify the root of the tree.
- a node may have no children or it may have any number of children. If there are n child nodes, then these child nodes are labeled with integer values 1 through n.
- Following the path from the root to a particular node gives a unique numeric name for the node. For example, the node 302 can be reached via root 0, the root's child 1, 1's child 2, and 2's child 1. This path is indicated by starting at the root and sequencing each node number, separated by a dot, until the desired node is reached. So node 302 is identified as “0.1.2.1”.
- node 302 may be identified as “1.2.1”.
- node 304 is identified as “2.1.2.1.1” and node 306 is identified as, “2.1.3.4”.
- this standardized numbering scheme will guarantee that each node in the tree will have a unique OID according to its path.
- the node for a printer may have the OID of 2.1.2.1.1, but it is much easier to read printer.printerTable.printerEntry.printerName.printer1.
- a number of communication protocols make use of the OID tree structure for managing network resources. Some of these protocols include SNMP, LDAP, CIM/XML and the like.
- the present invention provides a mechanism by which each of these protocols is supported and object information represented in server repositories are equally accessible by queries provided in each of the other protocols.
- FIG. 3B is an exemplary diagram of an OID tree structure in accordance with the present invention.
- the OID tree structure is separated into three subtrees 308 , 310 , and 312 .
- These sections represent OID objects that are maintained by different repositories but the objects are contained in a logical composite tree.
- a first subtree 308 may represent a first set of objects that are SNMP objects.
- a second subtree 310 may represent a second set of objects that are CIM objects.
- a third subtree 312 may represent a third set of objects that are LDAP objects. The roots of these subtrees have been assigned numeric values to indicate the sparcity of the tree.
- SNMP is a very simple protocol and the corresponding repository may be small enough to be resident in memory. Since queries are simple, very fast processing is possible. A repository capable of supporting SNMP would be appropriate for information that is changing rapidly and dynamically, such as packet traffic on a network.
- LDAP is a much more complex protocol and the information in a repository supporting LDAP is often stored in secondary storage. It is well suited for information that is more static in nature, such as IP addresses associated with particular network interface cards.
- IP addresses associated with particular network interface cards.
- the advantage of LDAP is that complex, relational queries are possible.
- the present invention allows multiple repositories to coexist in a single logical composite repository where potential inconsistencies are eliminated.
- CIM is a very general data model used to represent any type of information and, in itself, is independent of any protocol.
- XML eXtensible Markup Language
- CIM/XML CIM/XML
- the present invention provides a mechanism by which each of these protocols is able to be used with objects in various repositories regardless of the particular format the repository supports.
- These repositories may be separate repositories or a combined repository.
- the managed server includes an OID abstraction layer 414 , a corresponding API 416 , various repositories 408 - 412 and protocol interfaces 402 - 406 .
- the elements shown in FIG. 4 are implemented as software executing on a managed server, such as server 200 .
- a managed server such as server 200 .
- some or all of these elements may also embodied as hardware elements without departing from the spirit and scope of the present invention as will be readily apparent to those of ordinary skill in the art.
- LDAP 402 LDAP 402
- SNMP 404 SNMP 404
- CIM/XML 406 CIM/XML 406
- Repository # 1 408 Three repositories are shown, Repository # 1 408 , Repository # 2 410 , and Repository # 3 412 .
- Each repository uses an OID tree structure, similar to the structure illustrated in FIG. 3B .
- These repositories can be used to support a standard protocol or they may support a proprietary protocol.
- Repository # 1 408 may be suited to support SNMP
- Repository # 2 410 may be more suited to support LDAP
- Repository # 3 412 may use a proprietary structure.
- the data itself is independent from the protocol, thus separable repositories can be stored in a single, logical composite tree structure.
- OID Abstraction Layer 414 receives queries from applications using different protocols, e.g., SNMP, LDAP, CIM/XML, for object information maintained by one or more of the repositories 408 - 412 .
- the OID Abstraction Layer 414 is able to interpret the received queries and determine the object information which is sought.
- the OID Abstraction Layer 414 Based on the object information sought, the OID Abstraction Layer 414 identifies a repository in which the object information is maintained. This may be done, for example, based on a registry kept in the OID Abstraction Layer 414 , as will be discussed hereafter.
- the repository identifies itself to the OID Abstraction Layer 414 by sending a registration message to the OID Abstraction Layer through the API 416 .
- the repositories 408 - 412 include data structures that store the object information as well as a software application that may be used to search and retrieve information from the data structures. These software applications are provided with the ability to communicate with the API 416 . Each repository must be programmed to work with this API, regardless of the protocol or protocols supported by the repository. This protocol support is established when the subtree is registered with the OID abstraction layer 414 . OID Abstraction Layer 414 maps all incoming requests, regardless of protocol, into an API request that the attached repository can understand.
- the repository When a request is received from API 416 , the repository understands the request, searches the data structure for the requested object information, and sends a reply message to the API 416 with the requested object information.
- the API 416 provides the requested object information to the OID Abstraction Layer 414 .
- the OID Abstraction Layer 414 then generates a reply message to the application that sent the request.
- the reply message is formatted for the particular protocol used in the request message from the requesting application.
- the reply message is then sent to the appropriate protocol interface 402 - 406 .
- SNMP is a very simple protocol with operations like get, getnext, set, and so forth.
- the SNMP query is mapped into the API query and sent to the repository # 2 .
- OID Abstraction Layer 414 it is formatted into an SNMP response and sent back to the source of the query.
- LDAP and CIM/XML can store information about relationships between nodes.
- Repository # 2 410 contains information about five users and ten printers, and has registered with the OID abstraction layer as supporting the LDAP protocol.
- An LDAP query of “What printers are associated with user X” can be answered.
- SNMP does not contain this type of relational structure, so the objects in Repository # 1 408 , which have been registered as being able to support only the SNMP protocol, would not be able to respond to this type of query.
- OID Abstraction 414 received an LDAP query of the form “What printers are associated with User Y” where User Y is contained in Repository # 1 408 , OID Abstraction Layer 414 would have to respond that the query cannot be satisfied.
- OID Abstraction Layer 414 When a repository is added to the set of repositories, it is registered with OID Abstraction Layer 414 based on the protocol capabilities it can support.
- the registry provides information identifying the anchor points in the OID tree structure maintained by the repository. These anchor points are the objects in the OID tree structure that define a subtree of objects and their attributes. If a query is received for an object that has an OID that is below this anchor point in the OID tree structure, the OID Abstraction Layer 414 is able to determine that the object information for the requested object must be in the repository that maintains the object anchor point. In this way, the OID Abstraction Layer 414 is able to identify which repository maintains object information for a requested object.
- a composite repository is beneficial in that only one repository has to maintain potentially multiple instances of single server resource. Thus, the problems associated with having multiple objects, supported by multiple repositories, referencing the same server resource are avoided. In addition, if a single repository is utilized, the need for the OID Abstraction Layer 414 to determine which repository maintains the object information would be greatly simplified.
- Individual repositories can also be removed from the composite repository and the corresponding entries removed from the registry of OID Abstraction Layer 414 .
- many devices include uninstall programs for use when the device is removed from a particular domain. If the device had previous been added to the registry of OID Abstraction Layer 414 , it is possible to have the uninstall program remove that entry.
- FIG. 5 is a flowchart outlining an exemplary operation of the present invention.
- the operation starts with the receipt of a request message from an application in a particular communication protocol (step 510 ).
- the object information in the request is identified (step 520 ) and a repository that maintains this object information is identified based on a repository registry (step 530 ).
- the incoming request must be mapped to an equivalent request using the API (step 535 ).
- the request is sent to the repository for the object information (step 540 ).
- a reply message is received from the repository with the requested object information (step 550 ).
- the requested object information is then inserted into a reply message formatted to the protocol used by the requesting application and sent to the requesting application (step 560 ).
- the operation ends.
- the present invention provides a mechanism by which object information for objects in various repositories may be accessed regardless of the particular protocol used. Furthermore, the present invention provides a mechanism by which a combined repository may be utilized by a plurality of applications using different communication protocols.
Abstract
Description
Claims (36)
Priority Applications (2)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US09/583,411 US7272836B1 (en) | 2000-05-31 | 2000-05-31 | Method and apparatus for bridging service for standard object identifier based protocols |
EP01000137A EP1164481A3 (en) | 2000-05-31 | 2001-05-03 | Object identifier based protocols in a distributed data processing system |
Applications Claiming Priority (1)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US09/583,411 US7272836B1 (en) | 2000-05-31 | 2000-05-31 | Method and apparatus for bridging service for standard object identifier based protocols |
Publications (1)
Publication Number | Publication Date |
---|---|
US7272836B1 true US7272836B1 (en) | 2007-09-18 |
Family
ID=24332989
Family Applications (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
US09/583,411 Expired - Fee Related US7272836B1 (en) | 2000-05-31 | 2000-05-31 | Method and apparatus for bridging service for standard object identifier based protocols |
Country Status (2)
Country | Link |
---|---|
US (1) | US7272836B1 (en) |
EP (1) | EP1164481A3 (en) |
Cited By (10)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20030208609A1 (en) * | 2002-05-01 | 2003-11-06 | Verizon Services, Corp. | Automatic configuration of advanced services over DSL |
US20050251604A1 (en) * | 2004-04-01 | 2005-11-10 | Gerig Michael L | Method and protocol for diagnostics of arbitrarily complex networks of devices |
US20060080313A1 (en) * | 2004-09-17 | 2006-04-13 | Adriano Freire | Midware system 10 and method |
US20060225062A1 (en) * | 2005-03-21 | 2006-10-05 | Lamb James A | Message exchange between software components |
US20090300199A1 (en) * | 2008-05-28 | 2009-12-03 | Dell Products L.P. | Methods and Media for a Protocol Abstraction Layer for Information Handling Systems |
US20110296443A1 (en) * | 2002-04-04 | 2011-12-01 | Verizon Business Global Llc | Method, system and computer program product for a lightweight directory access protocol client application program interface |
US8694656B2 (en) | 2010-11-09 | 2014-04-08 | Sony Corporation | System and method for creating a viewing social network |
US20150065095A1 (en) * | 2013-08-28 | 2015-03-05 | Samsung Electronics Co., Ltd. | Method for transmitting notification information and electronic device thereof |
US20150205610A1 (en) * | 2014-01-23 | 2015-07-23 | Red Hat, Inc. | Configuring managed systems using abstracted functions |
CN114268656A (en) * | 2021-12-20 | 2022-04-01 | 深圳市英维克信息技术有限公司 | Communication protocol conversion method, device, equipment and system, and storage medium |
Families Citing this family (2)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
CN102508639B (en) * | 2011-10-10 | 2014-04-02 | 北京邮电大学 | Distributed parallel processing method based on satellite remote sensing data characteristics |
CN103001813A (en) * | 2013-01-08 | 2013-03-27 | 太仓市同维电子有限公司 | Method for configuration management in network management device |
Citations (10)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US4468728A (en) * | 1981-06-25 | 1984-08-28 | At&T Bell Laboratories | Data structure and search method for a data base management system |
US5913037A (en) * | 1996-07-03 | 1999-06-15 | Compaq Computer Corporation | Dynamic management information base manager |
US5951649A (en) * | 1994-03-22 | 1999-09-14 | Cabletron Systems, Inc. | Network interconnecting apparatus having a separate forwarding engine object at each interface |
US6016499A (en) * | 1997-07-21 | 2000-01-18 | Novell, Inc. | System and method for accessing a directory services respository |
US6023684A (en) * | 1997-10-01 | 2000-02-08 | Security First Technologies, Inc. | Three tier financial transaction system with cache memory |
US6085030A (en) * | 1997-05-02 | 2000-07-04 | Novell, Inc. | Network component server |
US6226649B1 (en) * | 1997-06-23 | 2001-05-01 | Oracle Corporation | Apparatus and method for transparent access of foreign databases in a heterogeneous database system |
US6484177B1 (en) * | 2000-01-13 | 2002-11-19 | International Business Machines Corporation | Data management interoperability methods for heterogeneous directory structures |
US6658432B1 (en) * | 2001-06-20 | 2003-12-02 | Microstrategy, Inc. | Method and system for providing business intelligence web content with reduced client-side processing |
US6775661B1 (en) * | 2001-03-21 | 2004-08-10 | Lycos, Inc. | Querying databases using database pools |
-
2000
- 2000-05-31 US US09/583,411 patent/US7272836B1/en not_active Expired - Fee Related
-
2001
- 2001-05-03 EP EP01000137A patent/EP1164481A3/en not_active Withdrawn
Patent Citations (10)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US4468728A (en) * | 1981-06-25 | 1984-08-28 | At&T Bell Laboratories | Data structure and search method for a data base management system |
US5951649A (en) * | 1994-03-22 | 1999-09-14 | Cabletron Systems, Inc. | Network interconnecting apparatus having a separate forwarding engine object at each interface |
US5913037A (en) * | 1996-07-03 | 1999-06-15 | Compaq Computer Corporation | Dynamic management information base manager |
US6085030A (en) * | 1997-05-02 | 2000-07-04 | Novell, Inc. | Network component server |
US6226649B1 (en) * | 1997-06-23 | 2001-05-01 | Oracle Corporation | Apparatus and method for transparent access of foreign databases in a heterogeneous database system |
US6016499A (en) * | 1997-07-21 | 2000-01-18 | Novell, Inc. | System and method for accessing a directory services respository |
US6023684A (en) * | 1997-10-01 | 2000-02-08 | Security First Technologies, Inc. | Three tier financial transaction system with cache memory |
US6484177B1 (en) * | 2000-01-13 | 2002-11-19 | International Business Machines Corporation | Data management interoperability methods for heterogeneous directory structures |
US6775661B1 (en) * | 2001-03-21 | 2004-08-10 | Lycos, Inc. | Querying databases using database pools |
US6658432B1 (en) * | 2001-06-20 | 2003-12-02 | Microstrategy, Inc. | Method and system for providing business intelligence web content with reduced client-side processing |
Non-Patent Citations (1)
Title |
---|
Leslie Daigle, Monthly report, Jun. 15, 1997. * |
Cited By (20)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20110296443A1 (en) * | 2002-04-04 | 2011-12-01 | Verizon Business Global Llc | Method, system and computer program product for a lightweight directory access protocol client application program interface |
US8307378B2 (en) * | 2002-04-04 | 2012-11-06 | Verizon Patent And Licensing Inc. | Method, system and computer program product for a lightweight directory access protocol client application program interface |
US20030208609A1 (en) * | 2002-05-01 | 2003-11-06 | Verizon Services, Corp. | Automatic configuration of advanced services over DSL |
US20050251604A1 (en) * | 2004-04-01 | 2005-11-10 | Gerig Michael L | Method and protocol for diagnostics of arbitrarily complex networks of devices |
US7523237B2 (en) * | 2004-04-01 | 2009-04-21 | Delphi Tecnhologies, Inc. | Method and protocol for diagnostics or arbitrarily complex networks of devices |
US20060080313A1 (en) * | 2004-09-17 | 2006-04-13 | Adriano Freire | Midware system 10 and method |
US9881103B2 (en) * | 2004-09-17 | 2018-01-30 | First American Financial Corporation | Method and system for query transformation for managing information from multiple datasets |
US8694532B2 (en) * | 2004-09-17 | 2014-04-08 | First American Data Co., Llc | Method and system for query transformation for managing information from multiple datasets |
US20140214809A1 (en) * | 2004-09-17 | 2014-07-31 | First American Financial Corporation | Method and system for query transformation for managing information from multiple datasets |
US8738785B2 (en) | 2005-03-21 | 2014-05-27 | Hewlett-Packard Development Company, L.P. | Message exchange between software components |
US20060225062A1 (en) * | 2005-03-21 | 2006-10-05 | Lamb James A | Message exchange between software components |
US8412826B2 (en) * | 2005-03-21 | 2013-04-02 | Hewlett-Packard Development Company, L.P. | Message exchange between software components |
US20090300199A1 (en) * | 2008-05-28 | 2009-12-03 | Dell Products L.P. | Methods and Media for a Protocol Abstraction Layer for Information Handling Systems |
US7805533B2 (en) | 2008-05-28 | 2010-09-28 | Dell Products, L.P. | Methods and media for a protocol abstraction layer for information handling systems |
US8694656B2 (en) | 2010-11-09 | 2014-04-08 | Sony Corporation | System and method for creating a viewing social network |
US8984072B2 (en) | 2010-11-09 | 2015-03-17 | Sony Corporation | System and method for providing recommendations to a user in a viewing social network |
US20150065095A1 (en) * | 2013-08-28 | 2015-03-05 | Samsung Electronics Co., Ltd. | Method for transmitting notification information and electronic device thereof |
US9451100B2 (en) * | 2013-08-28 | 2016-09-20 | Samsung Electronics Co., Ltd. | Method for transmitting notification information and electronic device thereof |
US20150205610A1 (en) * | 2014-01-23 | 2015-07-23 | Red Hat, Inc. | Configuring managed systems using abstracted functions |
CN114268656A (en) * | 2021-12-20 | 2022-04-01 | 深圳市英维克信息技术有限公司 | Communication protocol conversion method, device, equipment and system, and storage medium |
Also Published As
Publication number | Publication date |
---|---|
EP1164481A2 (en) | 2001-12-19 |
EP1164481A3 (en) | 2005-03-30 |
Similar Documents
Publication | Publication Date | Title |
---|---|---|
US7290049B2 (en) | Management information to object mapping and correlator | |
US6836890B1 (en) | Methods and systems for message translation and parsing of data structures in a distributed component architecture | |
US7188094B2 (en) | Indexing virtual attributes in a directory server system | |
US6542515B1 (en) | Profile service | |
US6003077A (en) | Computer network system and method using domain name system to locate MIB module specification and web browser for managing SNMP agents | |
JP4509916B2 (en) | SNMP-based network management apparatus and method | |
US8112424B2 (en) | Flexible and resilient information collaboration management infrastructure | |
US6418446B1 (en) | Method for grouping of dynamic schema data using XML | |
US6882999B2 (en) | URL mapping methods and systems | |
US7124358B2 (en) | Method for dynamically generating reference identifiers in structured information | |
US20050160090A1 (en) | Method and system for accessing database objects in polyarchical relationships using data path expressions | |
KR100716167B1 (en) | Network management system and method | |
US20060155825A1 (en) | Network device managing apparatus and method and storage medium | |
US7389337B2 (en) | Management of network elements using a proxy agent | |
JP2001034528A (en) | Data management device for object to be managed | |
US7272836B1 (en) | Method and apparatus for bridging service for standard object identifier based protocols | |
GB2414312A (en) | Distribution data model | |
Schwartz et al. | Experience with a semantically cognizant internet white pages directory tool | |
US8201144B2 (en) | Method and system for distributing software components | |
US20040025142A1 (en) | Method and apparatus for managing objects in a CIM environment | |
Ju et al. | An embedded Web server architecture for XML-based network management | |
US5704041A (en) | Object independent scoping in an open system interconnection system | |
US6609155B1 (en) | Method and apparatus for providing relationships in simple network management protocol management information base | |
US7343409B1 (en) | Method, system and article of manufacture for discovering devices in a network monitoring system | |
US7302492B1 (en) | Method and apparatus for matching web service in applications using a data object exchange protocol |
Legal Events
Date | Code | Title | Description |
---|---|---|---|
AS | Assignment |
Owner name: INTERNATIONAL BUSINESS MACHINES CORPORATION, NEW YFree format text: ASSIGNMENT OF ASSIGNORS INTEREST;ASSIGNOR:TAYLOR, KURT RUSSELL;REEL/FRAME:010856/0965Effective date: 20000530 |
|
FEPP | Fee payment procedure |
Free format text: PAYOR NUMBER ASSIGNED (ORIGINAL EVENT CODE: ASPN); ENTITY STATUS OF PATENT OWNER: LARGE ENTITY |
|
STCF | Information on status: patent grant |
Free format text: PATENTED CASE |
|
REMI | Maintenance fee reminder mailed | ||
FPAY | Fee payment |
Year of fee payment: 4 |
|
SULP | Surcharge for late payment | ||
AS | Assignment |
Owner name: GOOGLE INC., CALIFORNIAFree format text: ASSIGNMENT OF ASSIGNORS INTEREST;ASSIGNOR:INTERNATIONAL BUSINESS MACHINES CORPORATION;REEL/FRAME:026894/0001Effective date: 20110817 |
|
FPAY | Fee payment |
Year of fee payment: 8 |
|
AS | Assignment |
Owner name: GOOGLE LLC, CALIFORNIAFree format text: CHANGE OF NAME;ASSIGNOR:GOOGLE INC.;REEL/FRAME:044127/0735Effective date: 20170929 |
|
FEPP | Fee payment procedure |
Free format text: MAINTENANCE FEE REMINDER MAILED (ORIGINAL EVENT CODE: REM.); ENTITY STATUS OF PATENT OWNER: LARGE ENTITY |
|
LAPS | Lapse for failure to pay maintenance fees |
Free format text: PATENT EXPIRED FOR FAILURE TO PAY MAINTENANCE FEES (ORIGINAL EVENT CODE: EXP.); ENTITY STATUS OF PATENT OWNER: LARGE ENTITY |
|
STCH | Information on status: patent discontinuation |
Free format text: PATENT EXPIRED DUE TO NONPAYMENT OF MAINTENANCE FEES UNDER 37 CFR 1.362 |
|
FP | Lapsed due to failure to pay maintenance fee |
Effective date: 20190918 |