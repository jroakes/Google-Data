US9542927B2 - Method and system for building text-to-speech voice from diverse recordings - Google Patents
Method and system for building text-to-speech voice from diverse recordings Download PDFInfo
- Publication number
- US9542927B2 US9542927B2 US14/540,088 US201414540088A US9542927B2 US 9542927 B2 US9542927 B2 US 9542927B2 US 201414540088 A US201414540088 A US 201414540088A US 9542927 B2 US9542927 B2 US 9542927B2
- Authority
- US
- United States
- Prior art keywords
- colloquial
- speaker
- speech
- vectors
- vector
- Prior art date
- Legal status (The legal status is an assumption and is not a legal conclusion. Google has not performed a legal analysis and makes no representation as to the accuracy of the status listed.)
- Active, expires
Links
Images
Classifications
-
- G—PHYSICS
- G10—MUSICAL INSTRUMENTS; ACOUSTICS
- G10L—SPEECH ANALYSIS OR SYNTHESIS; SPEECH RECOGNITION; SPEECH OR VOICE PROCESSING; SPEECH OR AUDIO CODING OR DECODING
- G10L13/00—Speech synthesis; Text to speech systems
- G10L13/02—Methods for producing synthetic speech; Speech synthesisers
-
- G—PHYSICS
- G10—MUSICAL INSTRUMENTS; ACOUSTICS
- G10L—SPEECH ANALYSIS OR SYNTHESIS; SPEECH RECOGNITION; SPEECH OR VOICE PROCESSING; SPEECH OR AUDIO CODING OR DECODING
- G10L13/00—Speech synthesis; Text to speech systems
- G10L13/06—Elementary speech units used in speech synthesisers; Concatenation rules
-
- G—PHYSICS
- G10—MUSICAL INSTRUMENTS; ACOUSTICS
- G10L—SPEECH ANALYSIS OR SYNTHESIS; SPEECH RECOGNITION; SPEECH OR VOICE PROCESSING; SPEECH OR AUDIO CODING OR DECODING
- G10L25/00—Speech or voice analysis techniques not restricted to a single one of groups G10L15/00 - G10L21/00
- G10L25/03—Speech or voice analysis techniques not restricted to a single one of groups G10L15/00 - G10L21/00 characterised by the type of extracted parameters
Definitions
- ASR automatic speech recognition
- a goal of speech synthesis technology is to convert written language into speech that can be output in an audio format, for example directly or stored as an audio file suitable for audio output.
- the written language could take the form of text, or symbolic linguistic representations.
- the speech may be generated as a waveform by a speech synthesizer, which produces artificial human speech. Natural sounding human speech may also be a goal of a speech synthesis system.
- ASR automatic speech recognition
- Communication networks may in turn provide communication paths and links between some or all of such devices, supporting speech synthesis system capabilities and services that may utilize ASR and/or speech synthesis system capabilities.
- an example embodiment presented herein provides a method comprising: extracting speech features from a plurality of recorded reference speech utterances of a reference speaker to generate a reference set of reference-speaker vectors; for each respective plurality of recorded colloquial speech utterances of a respective colloquial speaker of multiple colloquial speakers, extracting speech features from the recorded colloquial speech utterances of the respective colloquial speaker to generate a respective set of colloquial-speaker vectors; for each respective set of colloquial-speaker vectors, replacing each colloquial-speaker vector of the respective set of colloquial-speaker vectors with a respective, optimally-matched reference-speaker vector from among the reference set of reference-speaker vectors, the respective, optimally-matched reference-speaker vector being identified by matching under a transform that compensates for differences in speech between the reference speaker and the respective colloquial speaker; aggregating the replaced colloquial-speaker vector
- an example embodiment presented herein provides a system comprising: one or more processors; memory; and machine-readable instructions stored in the memory, that upon execution by the one or more processors cause the system to carry out operations including: extracting speech features from a plurality of recorded reference speech utterances of a reference speaker to generate a reference set of reference-speaker vectors, for each respective plurality of recorded colloquial speech utterances of a respective colloquial speaker of multiple colloquial speakers, extracting speech features from the recorded colloquial speech utterances of the respective colloquial speaker to generate a respective set of colloquial-speaker vectors, for each respective set of colloquial-speaker vectors, replacing each colloquial-speaker vector of the respective set of colloquial-speaker vectors with a respective, optimally-matched reference-speaker vector from among the reference set of reference-speaker vectors, wherein the respective, optimally-matched reference-speaker vector is identified by
- an example embodiment presented herein provides an article of manufacture including a computer-readable storage medium having stored thereon program instructions that, upon execution by one or more processors of a system, cause the system to perform operations comprising: extracting speech features from a plurality of recorded reference speech utterances of a reference speaker to generate a reference set of reference-speaker vectors; for each respective plurality of recorded colloquial speech utterances of a respective colloquial speaker of multiple colloquial speakers, extracting speech features from the recorded colloquial speech utterances of the respective colloquial speaker to generate a respective set of colloquial-speaker vectors; for each respective set of colloquial-speaker vectors, replacing each colloquial-speaker vector of the respective set of colloquial-speaker vectors with a respective, optimally-matched reference-speaker vector from among the reference set of reference-speaker vectors, wherein the respective, optimally-matched reference-speaker vector is identified by
- FIG. 1 is a flowchart illustrating an example method in accordance with an example embodiment.
- FIG. 2 is a block diagram of an example network and computing architecture, in accordance with an example embodiment.
- FIG. 3A is a block diagram of a server device, in accordance with an example embodiment.
- FIG. 3B depicts a cloud-based server system, in accordance with an example embodiment.
- FIG. 4 depicts a block diagram of a client device, in accordance with an example embodiment.
- FIG. 5 depicts a simplified block diagram of an example text-to-speech system, in accordance with an example embodiment.
- FIG. 6 is a block diagram depicting additional details of an example hidden-Markov-mode-based text-to-speech speech system, in accordance with an example embodiment.
- FIG. 7 is a block diagram depicting an example neural-network-based text-to-speech speech system, in accordance with an example embodiment
- FIG. 8 is a block diagram depicting an alternative version of an example HMM-based text-to-speech speech system, in accordance with an example embodiment.
- FIG. 9 is an example conceptual illustration of speaker vector replacement, in accordance with an example embodiment.
- FIG. 10 is an example conceptual illustration of construction of an aggregated conditioned training database, in accordance with an example embodiment.
- FIG. 11 is a block diagram depicting training of an example HMM-based text-to-speech speech system using an aggregated conditioned training database, in accordance with an example embodiment.
- FIG. 12 depicts a simplified block diagram of an example text-to-speech system using a SPSS trained with an aggregated conditioned training database, in accordance with an example embodiment.
- FIG. 13 is a conceptual illustration of parametric and non-parametric mapping between vector spaces, in accordance with an example embodiment.
- a speech synthesis system can be a processor-based system configured to convert written language into artificially produced speech or spoken language.
- the written language could be written text, such as one or more written sentences or text strings, for example.
- the written language could also take the form of other symbolic representations, such as a speech synthesis mark-up language, which may include information indicative of speaker emotion, speaker gender, speaker identification, as well as speaking styles.
- the source of the written text could be input from a keyboard or keypad of a computing device, such as a portable computing device (e.g., a PDA, smartphone, etc.), or could be from file stored on one or another form of computer readable storage medium.
- the artificially produced speech could be generated as a waveform from a signal generation device or module (e.g., a speech synthesizer device), and output by an audio playout device and/or formatted and recorded as an audio file on a tangible recording medium.
- a signal generation device or module e.g., a speech synthesizer device
- an audio playout device e.g., a microphone
- Such a system may also be referred to as a “text-to-speech” (TTS) system, although the written form may not necessarily be limited to only text.
- TTS text-to-speech
- a speech synthesis system may operate by receiving an input text string (or other form of written language), and translating the written text into an “enriched transcription” corresponding to a symbolic representation of how the spoken rendering of the text sounds or should sound.
- the enriched transcription may then be mapped to speech features that parameterize an acoustic rendering of the enriched transcription, and which then serve as input data to a signal generation module device or element that can produce an audio waveform suitable for playout by an audio output device.
- the playout may sound like a human voice speaking the words (or sounds) of the input text string, for example.
- the audio waveform could also be generated as an audio file that may be stored or recorded on storage media suitable for subsequent playout.
- a TTS system may be used to convey information from an apparatus (e.g. a processor-based device or system) to a user, such as messages, prompts, answers to questions, instructions, news, emails, and speech-to-speech translations, among other information.
- Speech signals may themselves carry various forms or types of information, including linguistic content, affectual state (e.g., emotion and/or mood), physical state (e.g., physical voice characteristics), and speaker identity, to name a few.
- SPSS statistical parametric speech synthesis
- a SPSS system may be trained using data consisting mainly of numerous speech samples and corresponding text strings (or other symbolic renderings). For practical reasons, the speech samples are usually recorded, although they need not be in principle. By construction, the corresponding text strings are in, or generally accommodate, a written storage format. Recorded speech samples and their corresponding text strings can thus constitute training data for a SPSS system.
- HMMs hidden Markov models
- HMMs are used to model statistical probabilities associating enriched transcriptions of input text strings with parametric representations of the corresponding speech to be synthesized.
- One advantageous aspect of HMM-based speech synthesis is that it can facilitate altering or adjusting characteristics of the synthesized voice using one or another form of statistical adaptation. For example, given data in the form of recordings of a reference speaker, the HMM can be adapted to the data so as to make the HMM-based synthesizer sound like the reference speaker. The ability to adapt HMM-based synthesis can therefore make it a flexible approach.
- a TTS system may use a form of machine learning to generate a parametric representation of speech to synthesize speech.
- a neural network may be used to generate speech parameters by training the NN to associated known enriched transcriptions with known parametric representations of speech sounds.
- NN-based speech synthesis can facilitate altering or adjusting characteristics of the synthesized voice using one or another form of statistical adaptation.
- SPSS uses homogeneous data from a single speaker with a consistent speaking style, recorded under controlled conditions.
- consistency of recorded speech samples can help ensure that a SPSS system “learns,” or is trained, to associate a consistent parametric representation of speech sounds with their corresponding enriched transcriptions.
- Controlled recording conditions can similarly help mitigate potential polluting effects of noise or other extraneous background that can distort parametric representations during training and diminish the quality of the training.
- Obtaining large, high-quality speech databases for training of SPSS systems can be expensive in terms of cost and time, and may not scale up well.
- obtaining audio recordings from multiple speakers in diverse recording environments can be considerably cheaper in terms of time and effort, and may be a more scalable approach.
- large collections of such diversely-recorded speech and associated text are often employed in automatic speech recognition (ASR) systems, where diversity and variability of speakers and recording environments can be a benefit to the training process.
- ASR automatic speech recognition
- conventional techniques and approaches for merging diverse speech databases for SPSS purposes of training generally require computationally expensive and/or complex algorithms that clean and normalize the quality of the audio, as well as non-trivial speaker normalization algorithms.
- the ability to build high-quality SPSS systems using recordings from multiple speakers in different recording environments could transform the potential scalability offered by the generally availability diverse-speaker recordings into practice.
- obtaining large numbers of diverse recordings of long-tail languages can be more practical than obtaining large, uniform speech databases of these languages, overcoming technical and practical challenges of building diverse-recording-based SPSS can also help make TTS-based services more widely available in long-tail languages, as well as more generally in other circumstances.
- example embodiments are described herein for a method and system for building high-quality SPSS using recordings from multiple speakers acquired in different recording environments. More particularly, recorded speech samples of multiple speakers of a given language acquired in diverse recording environments can be conditioned using a database of recorded speech samples of a reference speaker of a reference language acquired under controlled conditions. Conditioning techniques applied to the recordings of the multiple speakers can enable the diverse recordings to be conditioned and subsequently aggregated into a conditioned speech database that can be used build and train a high-quality SPSS system in the given language.
- recorded samples of speech recited in a consistent voice by a reference speaker reading specified text in a reference language can represent a high-quality speech database, referred to herein as the “reference speech database.”
- the reference speech database could contain speech samples (and associated text) of a single reference speaker obtained under controlled recording conditions.
- Such a database might be obtained specifically for a SPSS system, with non-trivial emphasis placed on factors that help insure overall quality, such as speaking skills and training of the reference speaker.
- each of multiple speakers reciting written text in a given language under possibly ad hoc (or less controlled) recording conditions can be collected in respective “ordinary,” or ad hoc, quality speech databases.
- these speech databases may be obtained from the Internet, or simply “man-to-the-street” recordings.
- colloquial In order to signify a sort of generalized impact of a relatively diminished emphasis on speaker consistency, speech quality, and/or control of recording conditions—either intentional or due to circumstances of data acquisition—the term “colloquial” will be used herein as a qualitative descriptor in referring to the multiple speakers, the speech samples acquired from them, and the databases containing the speech samples. To maintain consistency of terminology, the term “colloquial language” will also be used to refer to the language of a colloquial speaker.
- the reference language and the colloquial language need not be the same, although they may be lexically related, or be characterized as phonetically similar.
- the colloquial language could be a long-tail language, and the reference language could be phonetically similar but more widely spoken.
- a large speech database of the reference language may be readily available or relatively easy to acquire. Applying the conditioning techniques described herein can therefore enable construction of a high-quality SPSS system in the long-tail language (or more generally, in the colloquial language).
- the reference speech samples in the reference speech database can be processed into a sequence of temporal frames of parameterized reference-speech sounds.
- the reference text strings associated with each reference speech sample can be processed into a corresponding enriched transcription including a sequence of reference “enriched labels.”
- Each temporal frame of parameterized reference speech sound can thus be associated with some number of reference enriched labels.
- the association can be many-to-one, one-to-one, or one-to-many.
- each such temporal frame of parameterized speech sound is typically referred to as a speaker “feature vector.”
- feature vectors derived or extracted from speech of the reference speaker will be referred to reference-speaker vectors.
- colloquial speech samples in the colloquial speech databases can be processed into a sequence of temporal frames of parameterized colloquial-speech sounds.
- the colloquial text strings associated with each colloquial speech sample can be processed into a corresponding enriched transcription including a sequence of colloquial enriched labels.
- Each temporal frame of parameterized colloquial speech sound can thus be associated with some number of colloquial enriched labels.
- the association can be many-to-one, one-to-one, or one-to-many.
- feature vectors derived or extracted from speech of the colloquial speaker will be referred to colloquial-speaker vectors.
- the colloquial-speaker vectors from each colloquial speech database can be conditioned using the reference-speaker vectors from the reference speech database by replacing each colloquial-speaker vector with an optimally-matched reference-speaker vector. More particularly, an analytical matching procedure can be carried out to identify for each colloquial-speaker vector a closest match reference-speaker vector from among the set of reference-speaker vectors.
- This process is enabled by a novel and effective “matching under transform” (“MUT”) technique, and results in determination of reference-speaker vectors that most closely parameterize the sounds represented in the colloquial-speaker vectors, but do so in a way characterized by the voice consistency and controlled recording conditions of the reference speech database.
- MUT matching under transform
- Replacing the colloquial-speaker vectors with the identified, optimally-match reference-speaker vectors thereby yields a set of replaced speaker vectors that represent the speech sounds of the colloquial speakers, but with the quality and consistency of the reference speech database.
- the matching and replacing steps can be carried out separately for each colloquial speech database. Doing so can help mitigate effects of inconsistencies between different colloquial speech databases, even if the consistency and/or or quality within each colloquial speech database is relatively diminished in comparison with the reference speech database. All of the replaced speaker vectors and their associated enriched colloquial labels can be aggregated into a conditioned aggregate speech database, which is of high quality and suitable for training a SPSS system in the colloquial language.
- the MUT technique entails a matching procedure that can compensate for inter-speaker speech differences (e.g., differences between the reference speaker and the colloquial speakers).
- the matching procedure can be specified in terms of a MUT algorithm suitable for implementation as executable instructions on one or more processors of a system, such as a SPSS or TTS system.
- MUT can be used to construct a high-quality speech database from a collection of multiple colloquial speech databases.
- an example method can be implemented as machine-readable instructions that when executed by one or more processors of a system cause the system to carry out the various functions, operations and tasks described herein.
- the system may also include one or more forms of memory for storing the machine-readable instructions of the example method (and possibly other data), as well as one or more input devices/interfaces, one or more output devices/interfaces, among other possible components.
- Some or all aspects of the example method may be implemented in a TTS synthesis system, which can include functionality and capabilities specific to TTS synthesis. However, not all aspects of an example method necessarily depend on implementation in a TTS synthesis system.
- a TTS synthesis system may include one or more processors, one or more forms of memory, one or more input devices/interfaces, one or more output devices/interfaces, and machine-readable instructions that when executed by the one or more processors cause the TTS synthesis system to carry out the various functions and tasks described herein.
- the TTS synthesis system may also include implementations based on one or more hidden Markov models.
- the TTS synthesis system may employ methods that incorporate HMM-based speech synthesis, as well as other possible components.
- the TTS synthesis system may also include implementations based on one or more neural networks (NNs).
- the TTS synthesis system may employ methods that incorporate NN-based speech synthesis, as well as other possible components.
- FIG. 1 is a flowchart illustrating an example method in accordance with example embodiments.
- speech features are extracted from a plurality of recorded reference speech utterances of a reference speaker to generate a reference set of reference-speaker vectors. More particularly, each of the reference-speaker vectors of the reference set corresponds to a feature vector of a temporal frame of a reference speech utterance, and each reference speech utterance can span multiple temporal frames.
- a respective set of colloquial-speaker vectors is generated by extracting speech features from the recorded colloquial speech utterances of the respective colloquial.
- each of the colloquial-speaker vectors of each respective set corresponds to a feature vector of a temporal frame of a colloquial speech utterance, and each colloquial speech utterance can span multiple temporal frames.
- each colloquial-speaker vector of the respective set of colloquial-speaker vectors is replaced with a respective, optimally-matched reference-speaker vector from among the reference set of reference-speaker vectors.
- the respective, optimally-matched reference-speaker vector is identified by matching under a transform that compensates for differences in speech between the reference speaker and the respective colloquial speaker.
- the replaced colloquial-speaker vectors of all the respective sets of colloquial-speaker vectors are aggregated into an aggregate set of conditioned speaker vectors.
- the aggregate set of conditioned speaker vectors is provided to a text-to-speech (TTS) system implemented on one or more computing devices.
- TTS text-to-speech
- the TTS system can be configured to receive the aggregate set of conditioned speaker vectors as input.
- providing the aggregate set of conditioned speaker vectors to the TTS system can correspond to providing particular input to the TTS system.
- the TTS system is trained using the provided aggregate set of conditioned speaker vectors.
- training a TTS system using speaker vectors can entail training the TTS system to associate a transcribed form of text with parameterized speech, such as is represented in feature vectors.
- replacing each colloquial-speaker vector of the respective set of colloquial-speaker vectors with the respective, optimally-matched reference-speaker vector can entail retaining an enriched transcription associated each given colloquial-speaker vector that is replaced in each respective set of colloquial-speaker vectors. More particularly, as described above, each given colloquial-speaker vector of each respective set of colloquial-speaker vectors corresponds to a feature vector extracted from a temporal frame of a particular recorded colloquial speech utterance. In accordance with example embodiments, each recorded colloquial speech utterance has an associated text string, and each text string can be processed to derive an enriched transcription.
- an enriched transcription can include phonetic labels and descriptors of syntactic and linguistic content.
- each given colloquial-speaker vector has an associated enriched transcription derived from a respective text string associated with the particular recorded colloquial speech utterance from which the given colloquial-speaker vector was extracted.
- the associated enriched transcription for the replaced colloquial-speaker vector is retained (i.e., not replaced).
- aggregating the replaced colloquial-speaker vectors of all the respective sets of colloquial-speaker vectors into the aggregate set of conditioned speaker vectors can entail constructing a speech corpus that includes the replaced colloquial-speaker vectors of all the respective sets of colloquial-speaker vectors and the retained enriched transcriptions associated with each given colloquial-speaker vector that was replaced. More particularly, the speech corpus can be a training database for a TTS system.
- replacing the colloquial-speaker vectors of each respective set of colloquial-speaker vectors entails doing so one respective set at a time. More particularly, all of the colloquial-speaker vectors of a given, respective set are individually matched and replaced with a respective, optimally-matched reference-speaker vector from among the reference set in a plurality of match-and-replace operations separate from that applied to the colloquial-speaker vectors of any of the other respective sets. As described below, carrying out the match-and-replace operations one respective set at a time helps mitigate possible inconsistencies between respective sets, particularly in regards to the matching technique, which accounts for statistical characteristics within each respective set.
- extracting speech features from recorded reference speech utterances and from the recorded colloquial speech utterances can entail generating feature vectors. More specifically, and in accordance with example embodiments, extracting speech features from recorded reference speech utterances of the reference speaker can entail decomposing the recorded reference speech utterances of the reference speaker into reference temporal frames of parameterized reference speech units. Each reference temporal frame can correspond to a respective reference-speaker vector of speech features.
- the speech features can include spectral envelope parameters, aperiodicity envelope parameters, fundamental frequencies, and/or voicing, of a respective reference speech unit.
- extracting speech features from recorded colloquial speech utterances of the colloquial speaker can entail decomposing the recorded colloquial speech utterances of the colloquial speaker into colloquial temporal frames of parameterized colloquial speech units.
- Each colloquial temporal frame can correspond to a respective colloquial-speaker vector of speech features.
- the speech features can include spectral envelope parameters, aperiodicity envelope parameters, fundamental frequencies, and/or voicing, of a respective reference speech unit.
- the reference speech units can correspond to one phonemes, triphone, or other context-sequences of phonemes.
- the colloquial speech units can correspond to one phonemes, triphone, or other context-sequences of phonemes.
- replacing each colloquial-speaker vector of each respective set of colloquial-speaker vectors with the respective, optimally-matched reference-speaker vector from among the reference set of reference-speaker vectors can entail optimally matching speech features of the colloquial-speaker vectors with speech features of the reference-speaker vectors. More specifically, for each respective colloquial-speaker vector, an optimal match between its speech features and the speech features of a particular one of the reference-speaker vectors can be determined. In accordance with example embodiments, the optimal match can be determined under a transform that compensates for differences in speech between the reference speaker and each respective colloquial speaker. Then, for each respective colloquial-speaker vector, its speech features are replaced with the speech features of the determined particular one of the reference-speaker vectors.
- the spectral envelope parameters of each vector of reference speech features can be Mel Cepstral coefficients, Line Spectral Pairs, Linear Predictive coefficients, and/or Mel-Generalized Cepstral Coefficients.
- indicia of first and second time derivatives of the spectral envelope parameters can be included.
- the spectral envelope parameters of each vector of colloquial speech features can be Mel Cepstral coefficients, Line Spectral Pairs, Linear Predictive coefficients, and/or Mel-Generalized Cepstral Coefficients.
- indicia of first and second time derivatives of the spectral envelope parameters can be included as well.
- the recorded reference speech utterances of the reference speaker can be in a reference language and the colloquial speech utterances of all the respective colloquial speakers can all be in a colloquial language.
- colloquial language can be lexically related to the reference language.
- the colloquial language and a lexically-related reference language can be different.
- training the TTS system using the provided aggregate set of conditioned speaker vectors can entail training the TTS system to synthesize speech in the colloquial language, but in a voice of the reference speaker.
- FIG. 1 is meant to illustrate a method in accordance with example embodiments. As such, various steps could be altered or modified, the ordering of certain steps could be changed, and additional steps could be added, while still achieving the overall desired operation.
- client devices such as mobile phones and tablet computers
- client services are able to communicate, via a network such as the Internet, with the server devices.
- applications that operate on the client devices may also have a persistent, server-based component. Nonetheless, it should be noted that at least some of the methods, processes, and techniques disclosed herein may be able to operate entirely on a client device or a server device.
- This section describes general system and device architectures for such client devices and server devices.
- the methods, devices, and systems presented in the subsequent sections may operate under different paradigms as well.
- the embodiments of this section are merely examples of how these methods, devices, and systems can be enabled.
- FIG. 2 is a simplified block diagram of a communication system 200 , in which various embodiments described herein can be employed.
- Communication system 200 includes client devices 202 , 204 , and 206 , which represent a desktop personal computer (PC), a tablet computer, and a mobile phone, respectively.
- Client devices could also include wearable computing devices, such as head-mounted displays and/or augmented reality displays, for example.
- Each of these client devices may be able to communicate with other devices (including with each other) via a network 208 through the use of wireline connections (designated by solid lines) and/or wireless connections (designated by dashed lines).
- Network 208 may be, for example, the Internet, or some other form of public or private Internet Protocol (IP) network.
- IP Internet Protocol
- client devices 202 , 204 , and 206 may communicate using packet-switching technologies. Nonetheless, network 208 may also incorporate at least some circuit-switching technologies, and client devices 202 , 204 , and 206 may communicate via circuit switching alternatively or in addition to packet switching.
- a server device 210 may also communicate via network 208 .
- server device 210 may communicate with client devices 202 , 204 , and 206 according to one or more network protocols and/or application-level protocols to facilitate the use of network-based or cloud-based computing on these client devices.
- Server device 210 may include integrated data storage (e.g., memory, disk drives, etc.) and may also be able to access a separate server data storage 212 .
- Communication between server device 210 and server data storage 212 may be direct, via network 208 , or both direct and via network 208 as illustrated in FIG. 2 .
- Server data storage 212 may store application data that is used to facilitate the operations of applications performed by client devices 202 , 204 , and 206 and server device 210 .
- communication system 200 may include any number of each of these components.
- communication system 200 may comprise millions of client devices, thousands of server devices and/or thousands of server data storages.
- client devices may take on forms other than those in FIG. 2 .
- FIG. 3A is a block diagram of a server device in accordance with an example embodiment.
- server device 300 shown in FIG. 3A can be configured to perform one or more functions of server device 210 and/or server data storage 212 .
- Server device 300 may include a user interface 302 , a communication interface 304 , processor 306 , and data storage 308 , all of which may be linked together via a system bus, network, or other connection mechanism 314 .
- User interface 302 may comprise user input devices such as a keyboard, a keypad, a touch screen, a computer mouse, a track ball, a joystick, and/or other similar devices, now known or later developed.
- User interface 302 may also comprise user display devices, such as one or more cathode ray tubes (CRT), liquid crystal displays (LCD), light emitting diodes (LEDs), displays using digital light processing (DLP) technology, printers, light bulbs, and/or other similar devices, now known or later developed.
- user interface 302 may be configured to generate audible output(s), via a speaker, speaker jack, audio output port, audio output device, earphones, and/or other similar devices, now known or later developed.
- user interface 302 may include software, circuitry, or another form of logic that can transmit data to and/or receive data from external user input/output devices.
- Communication interface 304 may include one or more wireless interfaces and/or wireline interfaces that are configurable to communicate via a network, such as network 208 shown in FIG. 2 .
- the wireless interfaces may include one or more wireless transceivers, such as a BLUETOOTH® transceiver, a Wifi transceiver perhaps operating in accordance with an IEEE 802.11 standard (e.g., 802.11b, 802.11g, 802.11n), a WiMAX transceiver perhaps operating in accordance with an IEEE 802.16 standard, a Long-Term Evolution (LTE) transceiver perhaps operating in accordance with a 3rd Generation Partnership Project (3GPP) standard, and/or other types of wireless transceivers configurable to communicate via local-area or wide-area wireless networks.
- a BLUETOOTH® transceiver e.g., 802.11b, 802.11g, 802.11n
- WiMAX transceiver perhaps operating in accordance with an IEEE 802.16 standard
- the wireline interfaces may include one or more wireline transceivers, such as an Ethernet transceiver, a Universal Serial Bus (USB) transceiver, or similar transceiver configurable to communicate via a twisted pair wire, a coaxial cable, a fiber-optic link or other physical connection to a wireline device or network.
- wireline transceivers such as an Ethernet transceiver, a Universal Serial Bus (USB) transceiver, or similar transceiver configurable to communicate via a twisted pair wire, a coaxial cable, a fiber-optic link or other physical connection to a wireline device or network.
- USB Universal Serial Bus
- communication interface 304 may be configured to provide reliable, secured, and/or authenticated communications.
- information for ensuring reliable communications e.g., guaranteed message delivery
- a message header and/or footer e.g., packet/message sequencing information, encapsulation header(s) and/or footer(s), size/time information, and transmission verification information such as cyclic redundancy check (CRC) and/or parity check values.
- CRC cyclic redundancy check
- Communications can be made secure (e.g., be encoded or encrypted) and/or decrypted/decoded using one or more cryptographic protocols and/or algorithms, such as, but not limited to, the data encryption standard (DES), the advanced encryption standard (AES), the Rivest, Shamir, and Adleman (RSA) algorithm, the Diffie-Hellman algorithm, and/or the Digital Signature Algorithm (DSA).
- DES data encryption standard
- AES advanced encryption standard
- RSA Rivest, Shamir, and Adleman
- Diffie-Hellman algorithm Diffie-Hellman algorithm
- DSA Digital Signature Algorithm
- Other cryptographic protocols and/or algorithms may be used instead of or in addition to those listed herein to secure (and then decrypt/decode) communications.
- Processor 306 may include one or more general purpose processors (e.g., microprocessors) and/or one or more special purpose processors (e.g., digital signal processors (DSPs), graphical processing units (GPUs), floating point processing units (FPUs), network processors, or application specific integrated circuits (ASICs)).
- DSPs digital signal processors
- GPUs graphical processing units
- FPUs floating point processing units
- ASICs application specific integrated circuits
- Processor 306 may be configured to execute computer-readable program instructions 310 that are contained in data storage 308 , and/or other instructions, to carry out various functions described herein.
- Data storage 308 may include one or more non-transitory computer-readable storage media that can be read or accessed by processor 306 .
- the one or more computer-readable storage media may include volatile and/or non-volatile storage components, such as optical, magnetic, organic or other memory or disc storage, which can be integrated in whole or in part with processor 306 .
- data storage 308 may be implemented using a single physical device (e.g., one optical, magnetic, organic or other memory or disc storage unit), while in other embodiments, data storage 308 may be implemented using two or more physical devices.
- Data storage 308 may also include program data 312 that can be used by processor 306 to carry out functions described herein.
- data storage 308 may include, or have access to, additional data storage components or devices (e.g., cluster data storages described below).
- server device 210 and server data storage device 212 may store applications and application data at one or more locales accessible via network 208 . These locales may be data centers containing numerous servers and storage devices. The exact physical location, connectivity, and configuration of server device 210 and server data storage device 212 may be unknown and/or unimportant to client devices. Accordingly, server device 210 and server data storage device 212 may be referred to as “cloud-based” devices that are housed at various remote locations. One possible advantage of such “cloud-based” computing is to offload processing and data storage from client devices, thereby simplifying the design and requirements of these client devices.
- server device 210 and server data storage device 212 may be a single computing device residing in a single data center. In other embodiments, server device 210 and server data storage device 212 may include multiple computing devices in a data center, or even multiple computing devices in multiple data centers, where the data centers are located in diverse geographic locations. For example, FIG. 2 depicts each of server device 210 and server data storage device 212 potentially residing in a different physical location.
- FIG. 3B depicts an example of a cloud-based server cluster.
- functions of server device 210 and server data storage device 212 may be distributed among three server clusters 320 A, 320 B, and 320 C.
- Server cluster 320 A may include one or more server devices 300 A, cluster data storage 322 A, and cluster routers 324 A connected by a local cluster network 326 A.
- server cluster 320 B may include one or more server devices 300 B, cluster data storage 322 B, and cluster routers 324 B connected by a local cluster network 326 B.
- server cluster 320 C may include one or more server devices 300 C, cluster data storage 322 C, and cluster routers 324 C connected by a local cluster network 326 C.
- Server clusters 320 A, 320 B, and 320 C may communicate with network 308 via communication links 328 A, 328 B, and 328 C, respectively.
- each of the server clusters 320 A, 320 B, and 320 C may have an equal number of server devices, an equal number of cluster data storages, and an equal number of cluster routers. In other embodiments, however, some or all of the server clusters 320 A, 320 B, and 320 C may have different numbers of server devices, different numbers of cluster data storages, and/or different numbers of cluster routers. The number of server devices, cluster data storages, and cluster routers in each server cluster may depend on the computing task(s) and/or applications assigned to each server cluster.
- server devices 300 A can be configured to perform various computing tasks of a server, such as server device 210 . In one embodiment, these computing tasks can be distributed among one or more of server devices 300 A.
- Server devices 300 B and 300 C in server clusters 320 B and 320 C may be configured the same or similarly to server devices 300 A in server cluster 320 A.
- server devices 300 A, 300 B, and 300 C each may be configured to perform different functions.
- server devices 300 A may be configured to perform one or more functions of server device 210
- server devices 300 B and server device 300 C may be configured to perform functions of one or more other server devices.
- the functions of server data storage device 212 can be dedicated to a single server cluster, or spread across multiple server clusters.
- Cluster data storages 322 A, 322 B, and 322 C of the server clusters 320 A, 320 B, and 320 C, respectively, may be data storage arrays that include disk array controllers configured to manage read and write access to groups of hard disk drives.
- the disk array controllers alone or in conjunction with their respective server devices, may also be configured to manage backup or redundant copies of the data stored in cluster data storages to protect against disk drive failures or other types of failures that prevent one or more server devices from accessing one or more cluster data storages.
- server device 210 and server data storage device 212 can be distributed across server clusters 320 A, 320 B, and 320 C
- various active portions and/or backup/redundant portions of these components can be distributed across cluster data storages 322 A, 322 B, and 322 C.
- some cluster data storages 322 A, 322 B, and 322 C may be configured to store backup versions of data stored in other cluster data storages 322 A, 322 B, and 322 C.
- Cluster routers 324 A, 324 B, and 324 C in server clusters 320 A, 320 B, and 320 C, respectively, may include networking equipment configured to provide internal and external communications for the server clusters.
- cluster routers 324 A in server cluster 320 A may include one or more packet-switching and/or routing devices configured to provide (i) network communications between server devices 300 A and cluster data storage 322 A via cluster network 326 A, and/or (ii) network communications between the server cluster 320 A and other devices via communication link 328 A to network 308 .
- Cluster routers 324 B and 324 C may include network equipment similar to cluster routers 324 A, and cluster routers 324 B and 324 C may perform networking functions for server clusters 320 B and 320 C that cluster routers 324 A perform for server cluster 320 A.
- the configuration of cluster routers 324 A, 324 B, and 324 C can be based at least in part on the data communication requirements of the server devices and cluster storage arrays, the data communications capabilities of the network equipment in the cluster routers 324 A, 324 B, and 324 C, the latency and throughput of the local cluster networks 326 A, 326 B, 326 C, the latency, throughput, and cost of the wide area network connections 328 A, 328 B, and 328 C, and/or other factors that may contribute to the cost, speed, fault-tolerance, resiliency, efficiency and/or other design goals of the system architecture.
- FIG. 4 is a simplified block diagram showing some of the components of an example client device 400 .
- client device 400 may be or include a “plain old telephone system” (POTS) telephone, a cellular mobile telephone, a still camera, a video camera, a fax machine, an answering machine, a computer (such as a desktop, notebook, or tablet computer), a personal digital assistant, a wearable computing device, a home automation component, a digital video recorder (DVR), a digital TV, a remote control, or some other type of device equipped with one or more wireless or wired communication interfaces.
- POTS plain old telephone system
- client device 400 may include a communication interface 402 , a user interface 404 , a processor 406 , and data storage 408 , all of which may be communicatively linked together by a system bus, network, or other connection mechanism 410 .
- Communication interface 402 functions to allow client device 400 to communicate, using analog or digital modulation, with other devices, access networks, and/or transport networks.
- communication interface 402 may facilitate circuit-switched and/or packet-switched communication, such as POTS communication and/or IP or other packetized communication.
- communication interface 402 may include a chipset and antenna arranged for wireless communication with a radio access network or an access point.
- communication interface 402 may take the form of a wireline interface, such as an Ethernet, Token Ring, or USB port.
- Communication interface 402 may also take the form of a wireless interface, such as a Wifi, BLUETOOTH®, global positioning system (GPS), or wide-area wireless interface (e.g., WiMAX or LTE).
- communication interface 402 may comprise multiple physical communication interfaces (e.g., a Wifi interface, a BLUETOOTH® interface, and a wide-area wireless interface).
- User interface 404 may function to allow client device 400 to interact with a human or non-human user, such as to receive input from a user and to provide output to the user.
- user interface 404 may include input components such as a keypad, keyboard, touch-sensitive or presence-sensitive panel, computer mouse, trackball, joystick, microphone, still camera and/or video camera.
- User interface 404 may also include one or more output components such as a display screen (which, for example, may be combined with a touch-sensitive panel), CRT, LCD, LED, a display using DLP technology, printer, light bulb, and/or other similar devices, now known or later developed.
- User interface 404 may also be configured to generate audible output(s), via a speaker, speaker jack, audio output port, audio output device, earphones, and/or other similar devices, now known or later developed.
- user interface 404 may include software, circuitry, or another form of logic that can transmit data to and/or receive data from external user input/output devices.
- client device 400 may support remote access from another device, via communication interface 402 or via another physical interface (not shown).
- Processor 406 may comprise one or more general purpose processors (e.g., microprocessors) and/or one or more special purpose processors (e.g., DSPs, GPUs, FPUs, network processors, or ASICs).
- Data storage 408 may include one or more volatile and/or non-volatile storage components, such as magnetic, optical, flash, or organic storage, and may be integrated in whole or in part with processor 406 .
- Data storage 408 may include removable and/or non-removable components.
- processor 406 may be capable of executing program instructions 418 (e.g., compiled or non-compiled program logic and/or machine code) stored in data storage 408 to carry out the various functions described herein.
- Data storage 408 may include a non-transitory computer-readable medium, having stored thereon program instructions that, upon execution by client device 400 , cause client device 400 to carry out any of the methods, processes, or functions disclosed in this specification and/or the accompanying drawings.
- the execution of program instructions 418 by processor 406 may result in processor 406 using data 412 .
- program instructions 418 may include an operating system 422 (e.g., an operating system kernel, device driver(s), and/or other modules) and one or more application programs 420 (e.g., address book, email, web browsing, social networking, and/or gaming applications) installed on client device 400 .
- data 412 may include operating system data 416 and application data 414 .
- Operating system data 416 may be accessible primarily to operating system 422
- application data 414 may be accessible primarily to one or more of application programs 420 .
- Application data 414 may be arranged in a file system that is visible to or hidden from a user of client device 400 .
- Application programs 420 may communicate with operating system 412 through one or more application programming interfaces (APIs). These APIs may facilitate, for instance, application programs 420 reading and/or writing application data 414 , transmitting or receiving information via communication interface 402 , receiving or displaying information on user interface 404 , and so on.
- APIs application programming interfaces
- application programs 420 may be referred to as “apps” for short. Additionally, application programs 420 may be downloadable to client device 400 through one or more online application stores or application markets. However, application programs can also be installed on client device 400 in other ways, such as via a web browser or through a physical interface (e.g., a USB port) on client device 400 .
- a TTS synthesis system may operate by receiving an input text string, processing the text string into a symbolic representation of the phonetic and linguistic content of the text string, generating a sequence of speech features corresponding to the symbolic representation, and providing the speech features as input to a speech synthesizer in order to produce a spoken rendering of the input text string.
- the symbolic representation of the phonetic and linguistic content of the text string may take the form of a sequence of labels, each label identifying a phonetic speech unit, such as a phoneme, and further identifying or encoding linguistic and/or syntactic context, temporal parameters, and other information for specifying how to render the symbolically-represented sounds as meaningful speech in a given language.
- phonetic transcription is sometimes used to refer to such a symbolic representation of text
- enriched transcription will instead be used herein, in order to signify inclusion of extra-phonetic content, such as linguistic and/or syntactic context and temporal parameters, represented in the sequence of “labels.”
- the enriched transcription provides a symbolic representation of the phonetic and linguistic content of the text string as rendered speech, and can be represented as a sequence of phonetic speech units identified according to labels, which could further identify or encode linguistic and/or syntactic context, temporal parameters, and other information for specifying how to render the symbolically-represented sounds as meaningful speech in a given language.
- the phonetic speech units could be phonemes.
- a phoneme may be considered to be the smallest segment of speech of given language that encompasses a meaningful contrast with other speech segments of the given language.
- a word typically includes one or more phonemes.
- phonemes may be thought of as utterances of letters, although this is not a perfect analogy, as some phonemes may present multiple letters.
- the phonemic spelling for the American English pronunciation of the word “cat” is /k/ /ae/ /t/, and consists of the phonemes /k/, /ae/, and /t/.
- Another example is the phonemic spelling for the word “dog” is /d/ /aw/ /g/, consisting of the phonemes /d/, /aw/, and /g/.
- Different phonemic alphabets exist, and other phonemic representations are possible. Common phonemic alphabets for American English contain about 40 distinct phonemes. Other languages may be described by different phonemic alphabets containing different phonemes.
- the phonetic properties of a phoneme in an utterance can depend on, or be influenced by, the context in which it is (or is intended to be) spoken.
- a “triphone” is a triplet of phonemes in which the spoken rendering of a given phoneme is shaped by a temporally-preceding phoneme, referred to as the “left context,” and a temporally-subsequent phoneme, referred to as the “right context.”
- the ordering of the phonemes of English-language triphones corresponds to the direction in which English is read.
- Other phoneme contexts, such as quinphones may be considered as well.
- Speech features represent acoustic properties of speech as parameters, and in the context of speech synthesis, may be used for driving generation of a synthesized waveform corresponding to an output speech signal.
- features for speech synthesis account for three major components of speech signals, namely spectral envelopes that resemble the effect of the vocal tract, excitation that simulates the glottal source, and prosody that describes pitch contour (“melody”) and tempo (rhythm).
- features may be represented in multidimensional feature vectors that correspond to one or more temporal frames.
- One of the basic operations of a TTS synthesis system is to map an enriched transcription (e.g., a sequence of labels) to an appropriate sequence of feature vectors.
- features may be extracted from a speech signal (e.g., a voice recording) in a process that typically involves sampling and quantizing an input speech utterance within sequential temporal frames, and performing spectral analysis of the data in the frames to derive a vector of features associated with each frame.
- a speech signal e.g., a voice recording
- Each feature vector can thus be viewed as providing a snapshot of the temporal evolution of the speech utterance.
- the features may include Mel Filter Cepstral (MFC) coefficients.
- MFC coefficients may represent the short-term power spectrum of a portion of an input utterance, and may be based on, for example, a linear cosine transform of a log power spectrum on a nonlinear Mel scale of frequency.
- a Mel scale may be a scale of pitches subjectively perceived by listeners to be about equally distant from one another, even though the actual frequencies of these pitches are not equally distant from one another.
- a feature vector may include MFC coefficients, first-order cepstral coefficient derivatives, and second-order cepstral coefficient derivatives.
- the feature vector may contain 13 coefficients, 13 first-order derivatives (“delta”), and 13 second-order derivatives (“delta-delta”), therefore having a length of 39.
- feature vectors may use different combinations of features in other possible embodiments.
- feature vectors could include Perceptual Linear Predictive (PLP) coefficients, Relative Spectral (RASTA) coefficients, Filterbank log-energy coefficients, or some combination thereof.
- PLP Perceptual Linear Predictive
- RASTA Relative Spectral
- Filterbank log-energy coefficients or some combination thereof.
- Each feature vector may be thought of as including a quantified characterization of the acoustic content of a corresponding temporal frame of the utterance (or more generally of an audio input signal).
- a sequence of labels corresponding to enriched transcription of the input text may be treated as observed data, and a sequence of HMMs and HMM states is computed so as to maximize a joint probability of generating the observed enriched transcription.
- the labels of the enriched transcription sequence may identify phonemes, triphones, and/or other phonetic speech units.
- phonemes and/or triphones are represented by HMMs as having three states corresponding to three temporal phases, namely beginning, middle, and end. Other HMMs with a different number of states per phoneme (or triphone, for example) could be used as well.
- the enriched transcription may also include additional information about the input text string, such as time or duration models for the phonetic speech units, linguistic context, and other indicators that may characterize how the output speech should sound, for example.
- speech features corresponding to HMMs and HMM states may be represented by multivariate PDFs for jointly modeling the different features that make up the feature vectors.
- multivariate Gaussian PDFs can be used to compute probabilities of a given state emitting or generating multiple dimensions of features from a given state of the model. Each dimension of a given multivariate Gaussian PDF could thus correspond to different feature. It is also possible to model a feature along a given dimension with more than one Gaussian PDF in that dimension.
- the feature is said to be modeled by a mixture of Gaussians, referred to a “Gaussian mixture model” or “GMM.”
- GMM Gaussian mixture model
- the sequence of features generated by the most probable sequence of HMMs and HMM states can be converted to speech by a speech synthesizer, for example.
- FIG. 5 depicts a simplified block diagram of an example HMM-based text-to-speech (TTS) synthesis system 500 , in accordance with an example embodiment.
- TTS text-to-speech
- FIG. 5 also shows selected example inputs, outputs, and intermediate products of example operation.
- the functional components of the TTS synthesis system 500 include a text analysis module 502 for converting input text 501 into an enriched transcription 503 , and a TTS subsystem 504 , including a reference HMM, for generating synthesized speech 505 from the enriched transcription 503 .
- These functional components could be implemented as machine-language instructions in a centralized and/or distributed fashion on one or more computing platforms or systems, such as those described above.
- the machine-language instructions could be stored in one or another form of a tangible, non-transitory computer-readable medium (or other article of manufacture), such as magnetic or optical disk, or the like, and made available to processing elements of the system as part of a manufacturing procedure, configuration procedure, and/or execution start-up procedure, for example.
- a tangible, non-transitory computer-readable medium such as magnetic or optical disk, or the like
- a TTS system could use a machine-learning model, such a neural network, for generating speech features at run-time based on learned (trained) associations between known labels and known parameterized speech.
- a machine-learning model such as a neural network
- the text analysis module 502 may receive an input text string 501 (or other form of text-based input) and generate an enriched transcription 503 as output.
- the input text string 501 could be a text message, email, chat input, or other text-based communication, for example.
- the enriched transcription could correspond to a sequence of labels that identify speech units, including context information.
- the TTS subsystem 504 may employ HMM-based speech synthesis to generate feature vectors corresponding to the enriched transcription 503 .
- This is illustrated in FIG. 5 by a symbolic depiction of a reference HMM in the TTS subsystem 504 .
- the reference HMM is represented by a configuration of speech-unit HMMs, each corresponding to a phonetic speech unit of a reference language.
- the phonetic units could be phonemes or triphones, for example.
- Each speech-unit HMM is drawn as a set of circles, each representing a state of the speech unit, and arrows connecting the circles, each arrow representing a state transition.
- a circular arrow at each state represents a self-transition.
- Above each circle is a symbolic representation of a PDF.
- the PDF specifies the probability that a given state will “emit” or generate speech features corresponding to the speech unit modeled by the state.
- the depiction in the figure of three states per speech-unit HMM is consistent with some HMM techniques that model three states for each speech unit.
- HMM techniques using different numbers of states per speech units may be employed as well, and the illustrative use of three states in FIG. 5 (as well as in other figures herein) is not intended to be limiting with respect to example embodiments described herein. Further details of an example TTS synthesis system are described below.
- the TTS subsystem 504 outputs synthesized speech 505 in a voice of a reference speaker.
- the reference speaker could be a speaker used to train the reference HMM.
- the HMMs of a HMM-based TTS synthesis system may be trained by tuning the PDF parameters, using a database of text recorded speech and corresponding known text strings.
- FIG. 6 is a block diagram depicting additional details of an example HMM-based text-to-speech speech system, in accordance with an example embodiment. As with the illustration in FIG. 5 , FIG. 6 also displays functional components and selected example inputs, outputs, and intermediate products of example operation.
- the functional components of the speech synthesis system 600 include a text analysis module 602 , a HMM module 604 that includes HMM parameters 606 , a speech synthesizer module 608 , a speech database 610 , a feature extraction module 612 , and a HMM training module 614 .
- These functional components could be implemented as machine-language instructions in a centralized and/or distributed fashion on one or more computing platforms or systems, such as those described above.
- the machine-language instructions could be stored in one or another form of a tangible, non-transitory computer-readable medium (or other article of manufacture), such as magnetic or optical disk, or the like, and made available to processing elements of the system as part of a manufacturing procedure, configuration procedure, and/or execution start-up procedure, for example.
- a tangible, non-transitory computer-readable medium such as magnetic or optical disk, or the like
- FIG. 6 is depicted in a way that represents two operational modes: training-time and run-time.
- a thick, horizontal line marks a conceptual boundary between these two modes, with “Training-Time” labeling a portion of FIG. 6 above the line, and “Run-Time” labeling a portion below the line.
- various arrows in the figure signifying information and/or processing flow and/or transmission are shown as dashed lines in the “Training-Time” portion of the figure, and as solid lines in the “Run-Time” portion.
- a training-time text string 601 from the speech database 610 may be input to the text analysis module 602 , which then generates training-time labels 605 (an enriched transcription of the training-time text string 601 ).
- Each training-time label could be made up of a phonetic label identifying a phonetic speech unit (e.g., a phoneme), context information (e.g., one or more left-context and right-context phoneme labels, physical speech production characteristics, linguistic context, etc.), and timing information, such as a duration, relative timing position, and/or phonetic state model.
- the training-time labels 605 are then input to the HMM module 604 , which models training-time predicted spectral parameters 611 and training-time predicted excitation parameters 613 . These may be considered speech features that are generated by the HMM module according to state transition probabilities and state emission probabilities that make up (at least in part) the HMM parameters.
- the training-time predicted spectral parameters 611 and training-time predicted excitation parameters 613 are then input to the HMM training module 614 , as shown.
- a training-time speech signal 603 from the speech database 610 is input to the feature extraction module 612 , which processes the input signal to generate expected spectral parameters 607 and expected excitation parameters 609 .
- the training-time speech signal 603 is predetermined to correspond to the training-time text string 601 ; this is signified by a wavy, dashed double arrow between the training-time speech signal 603 and the training-time text string 601 .
- the training-time speech signal 601 could be a speech recording of a speaker reading the training-time text string 603 .
- the corpus of training data in the speech database 610 could include numerous recordings of a reference speaker reading numerous text strings.
- the expected spectral parameters 607 and expected excitation parameters 609 may be considered known parameters, since they are derived from a known speech signal.
- the expected spectral parameters 607 and expected excitation parameters 609 are provided as input to the HMM training module 614 .
- the HMM training module 614 can determine how to adjust the HMM parameters 606 so as to achieve closest or optimal agreement between the predicted results and the known results. While this conceptual illustration of HMM training may appear suggestive of a feedback loop for error reduction, the procedure could entail a maximum likelihood (ML) adjustment of the HMM parameters. This is indicated by the return of ML-adjusted HMM parameters 615 from the HMM training module 614 to the HMM parameters 606 .
- the training procedure may involve many iterations over many different speech samples and corresponding text strings in order to cover all (or most) of the phonetic speech units of the language of the TTS speech synthesis system 600 with sufficient data to determine accurate parameter values.
- a run-time text string 617 is input to the text analysis module 602 , which then generates run-time labels 619 (an enriched transcription of the run-time text string 617 ).
- the form of the run-time labels 619 may be the same as that for the training-time labels 605 .
- the run-time labels 619 are then input to the HMM module 604 , which generates run-time predicted spectral parameters 621 and run-time predicted excitation parameters 623 , again according to the HMM-based technique.
- run-time predicted spectral parameters 621 and run-time predicted excitation parameters 623 can generated in pairs, each pair corresponding to a predicted pair of feature vectors for generating a temporal frame of waveform data.
- the run-time predicted spectral parameters 621 and run-time predicted excitation parameters 623 may next be input to the speech synthesizer module 608 , which may then synthesize a run-time speech signal 625 .
- speech synthesize could include a vocoder that can translate the acoustic features of the input into an output waveform suitable for playout on an audio output device, and/or for analysis by a signal measuring device or element. Such a device or element could be based on signal measuring hardware and/or machine language instructions that implement an analysis algorithm.
- the run-time speech signal 625 may have a high likelihood of being an accurate speech rendering of the run-time text string 617 .
- a neural network such as a “feed-forward” neural network
- a neural network can be implemented as machine-language instructions, such as a software and/or firmware program, in a centralized and/or distributed fashion on one or more computing platforms or systems, for example.
- a neural network can be described as having one or more “layers,” each including a set of “nodes.” Each node can correspond to a mathematical function, such as a scalar weighting function, having adjustable parameters, and by which can be computed a scalar output of one or more inputs. All of the nodes may be the same scalar function, differing only according to possibly different parameter values, for example.
- the mathematical function could take the form of a sigmoid function.
- the output of each node in a given layer can be connected to the inputs of one or more nodes of the next “forward” layer.
- the nodes of a first, “input layer” can receive input data at their respective inputs, and the nodes of a last, “output layer” can deliver output data from their respective outputs.
- the input layer could receive one or more enriched transcriptions
- the output layer could deliver feature vectors or other form of parameterized speech.
- the neural network can learn how to later accurately generate and output run-time predicted feature vectors in response to enriched transcriptions received as input at run time.
- FIG. 7 is a block diagram of an example TTS system 700 , in accordance with an alternative example embodiment in which mapping between enriched transcriptions and parameterized speech is achieved by a neural network (NN).
- functional components of the TTS system 700 include a text analysis module 702 , feature generation module 704 that includes a neural network 706 , a speech synthesizer module 708 , a speech database 710 , a feature extraction module 712 , and a neural network training module 714 .
- These functional components could be implemented as machine-language instructions in a centralized and/or distributed fashion on one or more computing platforms or systems, such as those described above.
- the machine-language instructions could be stored in one or another form of a tangible, non-transitory computer-readable medium (or other article of manufacture), such as magnetic or optical disk, or the like, and made available to processing elements of the system as part of a manufacturing procedure, configuration procedure, and/or execution start-up procedure, for example.
- a tangible, non-transitory computer-readable medium such as magnetic or optical disk, or the like
- a training-time operational mode and a run-time operational mode are represented in FIG. 7 .
- a thick, horizontal line marks a conceptual boundary between these two modes, with “Training-Time” labeled above the line, and “Run-Time” labeled below.
- Data/processing flow is represented in dashed lines in the “Training-Time” portion of the figure, and in solid lines in the “Run-Time” portion.
- a training-time text string 701 from the speech database 710 may be input to the text analysis module 702 , which then generates training-time labels 705 (an enriched transcription of the training-time text string 701 ).
- the training-time labels 705 are then input to the feature generation module 704 , which models training-time predicted spectral parameters 711 and training-time predicted excitation parameters 713 . These correspond to speech features generated by the neural network 706 .
- the training-time predicted spectral parameters 711 and training-time predicted excitation parameters 713 are then input to the neural network training module 714 , as shown.
- a training-time speech signal 703 from the speech database 710 is input to the feature extraction module 712 , which processes the input signal to generate expected spectral parameters 707 and expected excitation parameters 709 .
- a correspondence between the training-time speech signal 703 and the training-time text string 701 is signified by a wavy, dashed double arrow between the two.
- the expected spectral parameters 707 and expected excitation parameters 709 are provided as input to the neural network training module 714 .
- the neural network training module 714 can determine how to adjust the neural network 706 so as to achieve closest or optimal agreement between the predicted results and the known results. For example, the parameters of the scalar function in each node of the neural network 706 can be iteratively adjusted to achieve the consistent and accurate agreement between expected and training-time parameters.
- a run-time text string 717 can be input to the text analysis module 702 , which then generates run-time labels 719 .
- the run-time labels 719 are then input to the feature generation module 704 , which generates run-time predicted spectral parameters 721 and run-time predicted excitation parameters 723 , according to the trained NN-based operation.
- the run-time predicted spectral parameters 721 and run-time predicted excitation parameters 723 can be input to the speech synthesizer module 708 , which may then synthesize a run-time speech signal 725 .
- training-time operations feature extraction for generating expected spectral and excitation parameters, and text analysis for generating training-time labels.
- these operations need not necessarily be carried out during training time. More particularly, they can be carried prior to training time, and their outputs stored in a training database, which can subsequently be accessed during training time to achieve the same purpose at that depicted in FIGS. 6 and 7 .
- a training database can be created during a separate phase or operational mode from training, and can further be conditioned prior to training to improve the quality of the data, and hence improve the accuracy and effectiveness of the subsequent training.
- FIG. 8 is a block diagram of a HMM-based TTS system 800 in which construction of a training database is carried out separately from both training and run-time operation.
- the functional components of the TTS system 800 include a text analysis module 802 , a HMM module 804 that includes HMM parameters 806 , a speech synthesizer module 808 , a speech database 810 , a feature extraction module 812 , a HMM training module 814 , and a training database 816 .
- These functional components could be implemented as machine-language instructions in a centralized and/or distributed fashion on one or more computing platforms or systems, such as those described above.
- the machine-language instructions could be stored in one or another form of a tangible, non-transitory computer-readable medium (or other article of manufacture), such as magnetic or optical disk, or the like, and made available to processing elements of the system as part of a manufacturing procedure, configuration procedure, and/or execution start-up procedure, for example.
- a tangible, non-transitory computer-readable medium such as magnetic or optical disk, or the like
- FIG. 8 three operational modes, descriptively labeled “Training Database Construction,” “Training-Time,” and “Run-Time,” are represented in three panels separated by two thick, horizontal lines. Data/processing flow is represented in dashed lines in the “Training Database Construction” panel (top) and the “Training-Time” panel (middle), and in solid lines in the “Run-Time” panel (bottom). Some of the functional components of the TTS system 800 have operational roles in more than one mode, and are represented more than once in FIG. 8 .
- a training-time text string 801 from the speech database 810 may be input to the text analysis module 802 , which then generates training-time labels 805 (an enriched transcription of the training-time text string 801 ).
- a training-time speech signal 803 from the speech database 810 is input to the feature extraction module 812 , which processes the input signal to generate expected spectral parameters 807 and expected excitation parameters 809 .
- a correspondence between the training-time speech signal 803 and the training-time text string 801 is signified by a wavy, dashed double arrow between the two.
- the expected spectral parameters 807 and expected excitation parameters 809 , and the training-time labels 805 are all then stored in the training database 816 , together with a mapping or association between the parameterize speech and the labels.
- the training database 816 can then be accessed during training time to train the TTS system 800 .
- the training-time labels 805 can be retrieved from the training database 816 and input to the HMM module 804 , which models training-time predicted spectral parameters 811 and training-time predicted excitation parameters 813 .
- the training-time predicted spectral parameters 811 and training-time predicted excitation parameters 813 are then input to the HMM training module 814 , as shown.
- the expected spectral parameters 807 and expected excitation parameters 809 associated with the training time labels 805 can be retrieved from the training database 816 and provided as input to the HMM training module 814 .
- the HMM training module 814 can determine how to adjust the HMM parameters 806 so as to achieve closest or optimal agreement between the predicted results and the known results.
- a run-time text string 817 is input to the text analysis module 802 , which then generates run-time labels 819 .
- the run-time labels 819 are then input to the HMM module 804 , which generates run-time predicted spectral parameters 821 and run-time predicted excitation parameters 823 .
- the run-time predicted spectral parameters 821 and run-time predicted excitation parameters 823 can then input to the speech synthesizer module 808 , which can synthesize a run-time speech signal 825 .
- FIG. 8 illustrates three separate operational modes for a HMM-based TTS system 800
- Explicit description of such a configuration is omitted here for the sake of brevity.
- a training database constructed in a separate operation from actual training can be conditioned prior to use in training so as to improve the quality of the training data and thereby improve the accuracy and effectiveness of the subsequent training
- conditioning a training database can entail replacing feature vectors (e.g., the expected spectral parameters 807 and expected excitation parameters 809 ) with ones from a known, high-quality database, using an optimal matching technique. Such a conditioning procedure is described below.
- the accuracy of a TTS system e.g., how accurately the TTS system maps text to intended speech (e.g., as written)—and the quality of a TTS system—e.g., how natural or “good” the synthesize voice sounds—can depend, at least in part, on the quality and quantity of the speech samples (e.g., speech utterances) used for training the TTS system.
- the quality of record samples can affect the accuracy with which speech utterances can be decomposed into feature vectors used for training
- the quality of recorded speech samples, together with the quantity can affect the consistency with which mapping numerous recorded instances of the same intended speech sounds (e.g., acoustic renderings of speech units, such as phonemes) can yield similar characteristic parametric representations of those sounds (e.g. feature vectors). This can, in turn, be a factor in how well the TTS system can be trained to reproduce the parametric representations for speech synthesis at run-time.
- speech samples used for training can be recorded and stored in the speech database 810 , together with their associated text strings.
- the quality and effectiveness of training a text-to-speech system, such as the TTS system 800 can therefore be tied to the quality and quantity of the speech samples in the speech database 810 , since these are among the factors can determine the quality of the feature vectors used in training (e.g., the expected spectral parameters 807 and expected excitation parameters 809 in the example of the TTS system 800 ).
- One conventional approach to assembling a speech database of a large number (quantity) of high-quality recordings is to invest significant effort into acquiring a large number of speech samples from a skilled (trained) speaker reading from standard or canonical text sources, and recording the readings under controlled, relatively noise-free conditions. While this approach can yield good results for training a TTS system, it can pose practical challenges and involve large expense in terms of time and cost in some circumstances. For example, the availability of, and/or demand for, trained readers and controlled recording facilities might be relatively less common among speakers of certain long-tail languages than among large populations of widely-spoken languages. This is just one example of a circumstance that might be an impediment to a conventional approach to building a speech database for TTS training.
- a high-quality training database such as training database 816
- the conditioning technique entails replacing feature vectors derived from recorded speech samples of multiple different speakers of the same common language with optimally-matched speaker vectors derived from recorded speech samples of a reference speaker of a reference language in a quality-controlled speech database, referred to herein as a “reference speech database.” Identification of the optimally-matched speaker vectors is achieved using a technique that matches speaker vectors of different speakers under a transform that compensates for differences in speech between the different speakers.
- the matching technique referred to as “matching under transform” or “MUT,” enables parameterized representations of speech sounds derived from speech of a reference speaker to be optimally matched to parameterized representations of speech sounds derived from speech of one or more other speakers.
- the optimally-matched parameterized representations can serve as higher-quality replacements of the parameterized representations that were derived from the speech of the one or more other speakers.
- the matching-and-replacing technique using MUT can be applied separately to each of multiple speech databases acquired from different speakers to create separate sets of replaced (conditioned) feature vectors.
- the separate sets of replaced feature vectors can then be aggregated into a single conditioned training database, referred to as an aggregated conditioned training database.
- Carrying out the matching-and-replacing technique separately on each of multiple speech databases can eliminate the effect of inconsistencies between the different multiple speech databases, thereby achieving the best MUT results for each of the multiple speech databases before all the replaced feature vectors are aggregated.
- the reference language of the reference speaker need not be the same as the common language of the multiple speakers, although this is not excluded by example embodiments. Rather, the reference language and the common language may be lexically related. For example, they may represent different but related branches (or descendants) of a single language family. Other relationships based on some form of similarity or commonality between the reference language and the common language are possible as well.
- the common language of the multiple speakers will be referred to as a “colloquial language.”
- the use of the qualitative descriptor “colloquial” is meant to signify a generalized impact of a relatively diminished emphasis on speaker consistency, speech quality, and/or control of recording conditions in the process of obtaining the speech databases of the multiple speakers.
- the qualitative descriptor “colloquial” will also be adopted to refer to the multiple speakers, the speech databases obtained from their recordings, as well as aspects and elements related to processing of their speech.
- a respective colloquial speech database can be acquired from each of multiple colloquial speakers of a colloquial language.
- Each colloquial speech database can contain a respective plurality of colloquial speech utterances (speech samples) each corresponding to a text string (or other form of written text).
- the number of colloquial speech databases will be taken to be K, each obtained from one of K colloquial speakers.
- each of the K colloquial speech databases might represent one of K different recording sessions with one of the K colloquial speakers.
- each of the K colloquial speech databases can be of a form represented by the speech database 810 .
- each colloquial speech database can be processed to construct a corresponding, respective colloquial training database.
- the process described for constructing the training database 816 can be used to construct K colloquial training databases.
- Each colloquial training database can be of a form represented by the training database 816 , each containing a respective plurality of colloquial-speaker vectors, and each colloquial-speaker vector having an associated enriched transcription.
- each colloquial-speaker vector can correspond to a vector of expected spectral parameters 807 and expected excitation parameters 809 ; the associated transcription can be the associate training-time labels 805 .
- the number of colloquial-speaker vectors (and associated enriched transcriptions) need not be the same in each of the colloquial training databases.
- a reference speech database can be acquired from a reference speaker of a reference language.
- the reference speech database can contain a plurality of reference speech utterances (speech samples), each corresponding to a text string (or other form or written text).
- the reference speech database can be processed to construct a corresponding, reference training database.
- the process described for constructing the training database 816 can also be used to construct the reference training database.
- the reference training database can be of a form represented by the training database 816 , containing a plurality of reference-speaker vectors, and each reference-speaker vector having an associated enriched transcription.
- each reference-speaker vector can correspond to a vector of expected spectral parameters 807 and expected excitation parameters 809 ; the associated transcription can be the associate training-time labels 805 .
- the number of reference-speaker vectors in the reference training database will be taken to be M.
- M>J k , k 1, . . . , K.
- M ⁇ N or M ⁇ N M ⁇ N.
- example embodiments do not exclude other relative sizes of M, N, and J k .
- MUT can be used to identify an optimally-matched reference-speaker vector from among the M reference-speaker vectors in the reference training database. Once the identification is made, the colloquial-speaker of each match can be replaced in the kth colloquial training database with the identified optimally-matched reference-speaker vector. As described in more detail below, MUT operates jointly over the ensemble of all the J k colloquial-speaker vectors in the kth colloquial training database and the ensemble of all M reference-speaker vectors in the reference training database.
- the enriched transcription associated with the colloquial-speaker vector is retained.
- the respective enriched transcription that represents a symbolic phonetic description of each colloquial-speaker vector comes to be associated with a replaced speaker vector.
- the parametric representation of speech associated with each enriched transcription can be considered as being updated with a new parametric representation of that speech obtained from parametric representations in the reference training database using MUT.
- the replacement of colloquial-speaker vectors in kth colloquial training database can be carried out after the MUT identifications are made for the kth colloquial training database, or after the MUT identifications are made for all K of the colloquial training databases. Either approach can be accommodated by appropriately keeping track of the MUT identifications made in each of the K joint MUT operations.
- the replaced speaker vectors in all the K colloquial training databases can be aggregated into an aggregated conditioned training database.
- a high-quality training database containing all the N total replaced speaker vectors can be constructed.
- the aggregated conditioned training database can then be used to train a TTS system.
- the N replaced speaker vectors can be aggregated iteratively, by adding the replaced J k colloquial-speaker vectors of the kth colloquial training database before carrying out MUT and replacement of the J k+1 colloquial-speaker vectors in the k+1st colloquial training database, and so on, for example.
- FIG. 9 is an example conceptual illustration of the matching-and-replacement operations, in accordance with example embodiments.
- Each respective colloquial-speaker vector in FIG. 9 is also depicted next to its associated enriched transcription, which carries the same index as the respective colloquial-speaker vector.
- the colloquial-speaker vectors are simply labeled “Colloq. Vector” and the associated enriched transcriptions are simply labeled “Colloq. Labels.”
- the same reference training database 904 is used in MUT and replacement for each of the colloquial training databases. This is indicated by the duplicate depiction of the reference training database 904 in the top and bottom of the figure.
- the vertical ellipses in the middle portion of FIG. 9 represent repeated use of the reference training database 904 for the other MUT and replacement operations.
- the reference-speaker vectors are simply labeled “Ref.
- each colloquial-speaker vector is replaced by an optimally-matched reference-speaker vector.
- each respective replaced speaker vector in FIG. 9 is labeled “Ref. Vector” since it comes from the reference training database.
- the respective enriched transcription associated with each replaced speaker vector is retained. This is also indicated in FIG. 9 by the reuse of the “Colloq. Labels” from the colloquial training databases 902 - 1 , . . . , 902 -K.
- Example operation of MUT and replacement illustrated in FIG. 9 is represented conceptually by black curved lines connecting colloquial-speaker vectors in the colloquial training databases 902 - 1 and 902 -K with reference-speaker vectors in the reference training database 904 at the top and bottom of FIG. 9 ; and by black curved arrows connecting the (matched) reference-speaker vectors in the reference training database 904 at the top and bottom of FIG. 9 with the replaced speaker vectors in the replaced training databases 906 - 1 and 906 -K.
- the optimal matching of the individual colloquial-speaker vectors to the reference-speaker vectors is carried out jointly over the ensemble of speaker vectors in both training database.
- the particular matches represented in this example by the thick curved lines are arbitrary and for purposes of illustration only.
- the reference-speaker vectors identified as optimal matches to the colloquial-speaker vectors in the colloquial training database 902 - 1 the become the replacement speaker vectors in the replaced training database 906 - 1 .
- colloquial labels enriched transcriptions
- the replaced training database 906 - 1 can thus be obtained from the colloquial training database 902 - 1 by replacing the colloquial-speaker vectors of the colloquial training database 902 - 1 with the optimally-matched reference-speaker vectors.
- the optimal matching of the individual colloquial-speaker vectors to the reference-speaker vectors is carried out jointly over the ensemble of speaker vectors in both training database.
- the optimal matching for the colloquial-speaker vectors in the colloquial training database 902 -K is carried out separately from that for the colloquial-speaker vectors in the colloquial training database 902 - 1 .
- the particular matches represented in this example by the thick curved lines are, once more, arbitrary and for purposes of illustration only.
- the black curved arrows indicate the replacement operation.
- the reference-speaker vectors identified as optimal matches to the colloquial-speaker vectors in the colloquial training database 902 -K become the replacement speaker vectors in the replaced training database 906 -K.
- the colloquial labels enriched transcriptions
- the replaced training database 906 -K can thus be obtained from the colloquial training database 902 -K by replacing the colloquial-speaker vectors of the colloquial training database 902 -K with the optimally-matched reference-speaker vectors.
- FIG. 10 is an example conceptual illustration of construction of an aggregated conditioned training database, in accordance with an example embodiment.
- the example illustration includes a replaced training database 1006 - 1 (corresponding to the replaced training database 906 - 1 in FIG. 9 ), a replaced training database 1006 - 2 , and a replaced training database 1006 -K (corresponding to the replaced training database 906 -K in FIG. 9 ).
- the three replaced training database, plus the ones represented only by horizontal ellipses, are aggregated in an aggregated conditioned training database 1016 , as shown.
- the operations that achieve conditioning thus entail MUT and replacement.
- the aggregated conditioned training database 1016 can be used to train a TTS system, such as the HMM-based TTS system 800 depicted in FIG. 8 .
- FIG. 11 shows a HMM-based TTS system 1100 .
- the functional components of the TTS system 1110 include a text analysis module 1102 , a HMM module 1104 that includes HMM parameters 1106 , a speech synthesizer module 1108 , a HMM training module 1114 , and an aggregated conditioned training database 1116 .
- These functional components could be implemented as machine-language instructions in a centralized and/or distributed fashion on one or more computing platforms or systems, such as those described above.
- the machine-language instructions could be stored in one or another form of a tangible, non-transitory computer-readable medium (or other article of manufacture), such as magnetic or optical disk, or the like, and made available to processing elements of the system as part of a manufacturing procedure, configuration procedure, and/or execution start-up procedure, for example.
- a tangible, non-transitory computer-readable medium such as magnetic or optical disk, or the like
- the aggregated conditioned training database 1116 can be constructed as described above for the aggregated conditioned training database 1016 .
- FIG. 11 Two operational modes are represented in FIG. 11 , descriptively labeled “Training-Time,” and “Run-Time,” and separated by a thick, horizontal line. Data/processing flow is represented in dashed lines in the “Training-Time” panel (top), and in solid lines in the “Run-Time” panel (bottom).
- the training-time labels 1105 can be retrieved from the aggregated conditioned training database 1116 and input to the HMM module 1104 , which models training-time predicted spectral parameters 1111 and training-time predicted excitation parameters 1113 .
- the training-time predicted spectral parameters 1111 and training-time predicted excitation parameters 1113 are then input to the HMM training module 1114 , as shown.
- the expected spectral parameters 1107 and expected excitation parameters 1109 associated with the training time labels 1105 can be retrieved from the aggregated conditioned training database 1116 and provided as input to the HMM training module 1114 .
- the HMM training module 1114 can determine how to adjust the HMM parameters 1106 so as to achieve closest or optimal agreement between the predicted results and the known results.
- a run-time text string 1117 is input to the text analysis module 1102 , which then generates run-time labels 1119 .
- the run-time labels 1119 are then input to the HMM module 1104 , which generates run-time predicted spectral parameters 1121 and run-time predicted excitation parameters 1123 .
- the run-time predicted spectral parameters 1121 and run-time predicted excitation parameters 1123 can then input to the speech synthesizer module 1108 , which can synthesize a run-time speech signal 1125 .
- FIG. 11 illustrates two separate operational modes for a HMM-based TTS system 1100
- Explicit description of such a configuration is omitted here for the sake of brevity.
- FIG. 12 depicts a simplified block diagram of an example HMM-based text-to-speech (TTS) synthesis system 1200 , in accordance with an example embodiment.
- the HMM-based text-to-speech (TTS) synthesis system 1200 is similar to the TTS system 500 shown in FIG. 5 , except its HMM has been trained using an aggregated conditioned training database such as the ones described above. More particularly, the PDF parameters of the HMM states can be adjusted during training such as that represented in the top of FIG. 11 .
- the functional components of the TTS synthesis system 1200 include a text analysis module 1202 for converting input text 1201 into an enriched transcription 1203 , and a TTS subsystem 1204 , including a conditioned HMM, for generating synthesized speech 1205 from the enriched transcription 1203 .
- the text analysis module 1202 may receive an input text string 1201 (or other form of text-based input) and generate an enriched transcription 1203 as output.
- the TTS subsystem 1204 may then employ the conditioned HMM to generate feature vectors corresponding to the enriched transcription 1203 .
- voice conversion is concerned with converting the voice of a source speaker to the voice of a target speaker.
- target speaker is designated X
- source speaker is designated Y.
- X-space the vector space of speech features
- Y-space the vector space of speech features
- feature vectors could correspond to parameterizations of spectral envelopes and/or excitation, as discussed above.
- X-space and Y-space may be different.
- they could have a different number of vectors and/or different parameters.
- they could correspond to different languages, be generated using different feature extraction techniques, and so on.
- Matching under transform may be considered a technique for matching the X-space and Y-space vectors under a transform that compensates for differences between speakers X and Y. It may be described in algorithmic terms as a computational method, and can be implemented as machine-readable instructions executable by the one or more processors of a computing system, such as a TTS synthesis system.
- the machine-language instructions could be stored in one or another form of a tangible, non-transitory computer-readable medium (or other article of manufacture), such as magnetic or optical disk, or the like, and made available to processing elements of the system as part of a manufacturing procedure, configuration procedure, and/or execution start-up procedure, for example.
- each instance of a colloquial speaker can be taken to be the source speaker of the formalism, and the reference speaker can be taken to be the target speaker of the formalism.
- the computations implied by the formalism can be viewed as being carried out separately for each colloquial speaker as an instance of source speaker.
- the formalism and without loss of generality, the terminology of “source,” “target,” X-space, and Y-space is adopted.
- N and Q may not necessarily be equal, although the possibility that they are is not precluded. In the context of speech modeling, N and Q could correspond to a number of samples from speakers X and Y, respectively.
- the transformation function defines a parametric mapping from X-space to Y-space.
- a non-parametric, association mapping from Y-space to X-space may be defined in terms of conditional probabilities.
- ⁇ right arrow over (y) ⁇ q ) may be used to specify a probability that ⁇ right arrow over (y) ⁇ q maps to ⁇ right arrow over (x) ⁇ n .
- MUT involves bi-directional mapping between X-space and Y-space: parametric in a “forward direction” (X ⁇ Y) via F(•), and non-parametric in the “backward direction” (Y ⁇ X) via p( ⁇ right arrow over (x) ⁇ n
- a goal of MUT is to determine which X-space vectors ⁇ right arrow over (x) ⁇ n correspond to a Y-space ⁇ right arrow over (y) ⁇ q vector in the sense that F( ⁇ right arrow over (x) ⁇ ) is close ⁇ right arrow over (y) ⁇ q in L2-norm, and under the circumstance that F( ⁇ right arrow over (x) ⁇ ) and the probabilities p( ⁇ right arrow over (x) ⁇ n
- FIG. 13 is a conceptual illustration of parametric and non-parametric mapping between vector spaces, in accordance with example embodiments.
- the figure includes an X-space 1302 , represented as an oval containing several dots, each dot symbolically representing an X-space vector (e.g., ⁇ right arrow over (x) ⁇ n ).
- a Y-space 1304 is represented as an oval containing several dots, each dot symbolically representing an Y-space vector (e.g., ⁇ right arrow over (y) ⁇ q ).
- the two spaces are shown to contain a different number of vectors (dots).
- an arrow 1305 from Y-space to X-space symbolically represents non-parametric mapping via p( ⁇ right arrow over (x) ⁇ n
- D′ D ⁇ H ( X
- association probabilities may be expressed in the form of a Gibbs distribution and determined in what is referred to algorithmically herein as an “association step.”
- association step When ⁇ approaches zero, the mapping between Y-space and X-space becomes many to one (many Y-space vectors may be matched to one X-space vector). It can be shown in this case ( ⁇ 0) that the association probabilities may be determined from a search for the nearest X-space vector in terms of the distortion metric d( ⁇ right arrow over (y) ⁇ q , ⁇ right arrow over (x) ⁇ n ), in what is referred to algorithmically herein as a “matching step.”
- the transform function Given the associations determined either by an association step or a matching step, the transform function can be defined and its optimal parameters determined by solving a minimization of D′ with respect to the defined form of F(•). This determination of F( ⁇ right arrow over (x) ⁇ ) is referred to algorithmically herein as a “minimization step.”
- the purpose of the transform is to compensate for speaker differences between, in this example, speakers X and Y. More specifically, cross-speaker variability can be captured by a linear transform of the form ⁇ right arrow over ( ⁇ ) ⁇ k + ⁇ k ⁇ right arrow over (x) ⁇ n , where ⁇ right arrow over ( ⁇ ) ⁇ k is a bias vector, and ⁇ k is linear transformation matrix of the k-th class.
- the linear transform matrix can compensate for differences in the vocal tract that are related to vocal tract shape and size.
- F( ⁇ right arrow over (x) ⁇ ) may be expressed as:
- I is the identity matrix (appropriately dimensioned)
- ⁇ right arrow over ( ⁇ ) ⁇ k ′ ⁇ vec ⁇ k ′ ⁇ contains only the free parameters of the structured matrix ⁇ k
- ⁇ k ⁇ right arrow over (x) ⁇ n X n ⁇ right arrow over ( ⁇ ) ⁇ k ′.
- the optimal ⁇ right arrow over ( ⁇ ) ⁇ can then be obtained by partial differentiation, setting
- association-minimization two algorithms may be used to obtain matching under transform.
- matching-minimization two algorithms may be used to obtain matching under transform.
- association-minimization may be implemented with the following steps:
- Initialization sets a starting point for MUT optimization, and may differ depending on the speech features used.
- MCEP mel-cepstral coefficient
- a search for a good vocal-tract length normalization transform with a single linear frequency warping factor may suffice.
- Empirical evidence suggests that an adequate initialization transform is one that minimizes the distortion in an interval [0.7, 1.3] of frequency warping factor.
- the association step uses the Gibbs distribution function for the association probabilities, as described above.
- the minimization step then incorporates the transformation function. Steps 5 and 6 iterate for convergence and cooling.
- matching-minimization may be implemented with the following steps:
- Initialization is the same as that for association-minimization, starting with a transform that minimizes the distortion in an interval of values of [0.7, 1.3] in frequency warping factor.
- the matching step uses association probabilities determined from a search for the nearest X-space vector, as described above.
- MUT as described is used to replace each source vector of the Y-space (e.g., each colloquial-speaker vector of a given colloquial training database) with an optimally-matched target vector of the X-space (e.g., a reference-speaker vector of the reference training database), in practice, the matching can be performed by considering vectors in contexts of temporally earlier and later vectors.
- a context ⁇ right arrow over (y) ⁇ q ⁇ 2 ⁇ right arrow over (y) ⁇ q ⁇ 1 ⁇ right arrow over (y) ⁇ q ⁇ right arrow over (y) ⁇ q+1 ⁇ right arrow over (y) ⁇ q+2 can be matched against a context ⁇ right arrow over (x) ⁇ n ⁇ 2 ⁇ right arrow over (x) ⁇ n ⁇ 1 ⁇ right arrow over (x) ⁇ n ⁇ right arrow over (x) ⁇ n+1 ⁇ right arrow over (x) ⁇ n+2 to obtain the best match of ⁇ right arrow over (x) ⁇ n to ⁇ right arrow over (y) ⁇ q . Matching in context in this way can help further improve the accuracy of the matching.
- applying MUT to replacement of each colloquial-speaker vector of a given colloquial training database with a reference-speaker vector of the reference training database can be described as entailing the following algorithmic steps:
Abstract
Description
d({right arrow over (y)} q ,{right arrow over (x)} n)=({right arrow over (y)} q −F({right arrow over (x)} n))T W q({right arrow over (y)} q −F({right arrow over (x)} n)) [1]
where Wq is a weighting matrix depending on Y-space vector {right arrow over (y)}q. Then taking p({right arrow over (x)}n|{right arrow over (y)}q) to be the joint probability of matching vectors {right arrow over (y)}q and {right arrow over (x)}n, an average distortion over all possible vector combinations may be expressed as:
D=Σ n,q p({right arrow over (y)} q ,{right arrow over (x)} n)d({right arrow over (y)} q ,{right arrow over (x)} n)=Σq p({right arrow over (y)} q)Σn p({right arrow over (x)} n |{right arrow over (y)} q)d({right arrow over (y)} q ,{right arrow over (x)} n). [2]
In the MUT approach, the bi-directional mapping provides a balance between forward and backward mapping, ensuring convergence to a meaningful solution.
so as to ensure that all Y-space vectors are accounted for equally, it follows that H(Y) is constant. A composite minimization criterion D′ may then be defined as:
D′=D−λH(X|Y), [3]
where the entropy Lagrangian λ corresponds to an annealing temperature.
F({right arrow over (x)} n)Σk=1 K p(k|{right arrow over (x)} n)[{right arrow over (μ)}k+Σk {right arrow over (x)} n], [4]
where p(k|{right arrow over (x)}n) is the probability that {right arrow over (x)}n belongs to the k-th class.
where
Δn =[p(k=1|{right arrow over (x)} n)I p(k=2|{right arrow over (x)} n)I . . . p(k=K|{right arrow over (x)} n)I], [6]
{right arrow over (μ)}=[{right arrow over (μ)}1 T {right arrow over (μ)}2 T . . . {right arrow over (μ)}K T]T, [7]
B n =[p(k=1|{right arrow over (x)} n)X n p(k=2|{right arrow over (x)} n)X n . . . p(k=K|{right arrow over (x)} n)X n],[8]
{right arrow over (σ)}=[{right arrow over (σ)}′1 T {right arrow over (σ)}′2 T . . . {right arrow over (σ)}′K T]T. [9]
In the above expressions, I is the identity matrix (appropriately dimensioned), {right arrow over (σ)}k′≡vec{Σk′} contains only the free parameters of the structured matrix Σk, and Σk{right arrow over (x)}n=Xn{right arrow over (σ)}k′. The optimal {right arrow over (γ)} can then be obtained by partial differentiation, setting
Doing so yields the following unique solution:
{right arrow over (γ)}=−(Σq p({right arrow over (y)} q)Σn p({right arrow over (x)} n |{right arrow over (y)} q)Γn T W qΓn)−1(Σq p({right arrow over (y)} q)Σn p({right arrow over (x)} n |{right arrow over (y)} q)Γn T W q {right arrow over (y)} q). [10]
-
- 1. Initialization.
- 2. Set λ to high value (e.g., λ=1).
- 3. Association step.
- 4. Minimization step.
- 5. Repeat from
step 3 until convergence. - 6. Lower λ according to a cooling schedule and repeat from
step 3, until λ approaches zero or other target value.
-
- 1. Initialization.
- 2. Matching step.
- 3. Minimization step.
- 4. Repeat from
step 2 until convergence.
-
- 1. Let X-space vectors {right arrow over (x)}n correspond to extracted features of utterances of a reference speaker.
- 2. Let Y-space vectors {right arrow over (y)}q correspond to extracted features of utterances of a colloquial speaker.
- 3. Apply matching-minimization to determine a parametric transform that maps {right arrow over (y)}q to F({right arrow over (x)}n) and a non-parametric mapping n=g(q) that matches {right arrow over (y)}q to {right arrow over (x)}n.
- 4. Replace the frame {right arrow over (y)}q with {right arrow over (x)}n.
Claims (33)
Priority Applications (1)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US14/540,088 US9542927B2 (en) | 2014-11-13 | 2014-11-13 | Method and system for building text-to-speech voice from diverse recordings |
Applications Claiming Priority (1)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US14/540,088 US9542927B2 (en) | 2014-11-13 | 2014-11-13 | Method and system for building text-to-speech voice from diverse recordings |
Publications (2)
Publication Number | Publication Date |
---|---|
US20160140951A1 US20160140951A1 (en) | 2016-05-19 |
US9542927B2 true US9542927B2 (en) | 2017-01-10 |
Family
ID=55962252
Family Applications (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
US14/540,088 Active 2035-04-02 US9542927B2 (en) | 2014-11-13 | 2014-11-13 | Method and system for building text-to-speech voice from diverse recordings |
Country Status (1)
Country | Link |
---|---|
US (1) | US9542927B2 (en) |
Cited By (7)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
CN107452369A (en) * | 2017-09-28 | 2017-12-08 | 百度在线网络技术（北京）有限公司 | Phonetic synthesis model generating method and device |
US10671251B2 (en) | 2017-12-22 | 2020-06-02 | Arbordale Publishing, LLC | Interactive eReader interface generation based on synchronization of textual and audial descriptors |
US10685644B2 (en) * | 2017-12-29 | 2020-06-16 | Yandex Europe Ag | Method and system for text-to-speech synthesis |
US20210280202A1 (en) * | 2020-09-25 | 2021-09-09 | Beijing Baidu Netcom Science And Technology Co., Ltd. | Voice conversion method, electronic device, and storage medium |
US11133025B2 (en) * | 2019-11-07 | 2021-09-28 | Sling Media Pvt Ltd | Method and system for speech emotion recognition |
US11443646B2 (en) | 2017-12-22 | 2022-09-13 | Fathom Technologies, LLC | E-Reader interface system with audio and highlighting synchronization for digital books |
US11694072B2 (en) | 2017-05-19 | 2023-07-04 | Nvidia Corporation | Machine learning technique for automatic modeling of multiple-valued outputs |
Families Citing this family (116)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US8677377B2 (en) | 2005-09-08 | 2014-03-18 | Apple Inc. | Method and apparatus for building an intelligent automated assistant |
US9318108B2 (en) | 2010-01-18 | 2016-04-19 | Apple Inc. | Intelligent automated assistant |
US8977255B2 (en) | 2007-04-03 | 2015-03-10 | Apple Inc. | Method and system for operating a multi-function portable electronic device using voice-activation |
US8676904B2 (en) | 2008-10-02 | 2014-03-18 | Apple Inc. | Electronic devices with voice command and contextual data processing capabilities |
US10706373B2 (en) | 2011-06-03 | 2020-07-07 | Apple Inc. | Performing actions associated with task items that represent tasks to perform |
US10276170B2 (en) | 2010-01-18 | 2019-04-30 | Apple Inc. | Intelligent automated assistant |
US10417037B2 (en) | 2012-05-15 | 2019-09-17 | Apple Inc. | Systems and methods for integrating third party services with a digital assistant |
CN104969289B (en) | 2013-02-07 | 2021-05-28 | 苹果公司 | Voice trigger of digital assistant |
US10652394B2 (en) | 2013-03-14 | 2020-05-12 | Apple Inc. | System and method for processing voicemail |
US10748529B1 (en) | 2013-03-15 | 2020-08-18 | Apple Inc. | Voice activated device for use with a voice-based digital assistant |
US10176167B2 (en) | 2013-06-09 | 2019-01-08 | Apple Inc. | System and method for inferring user intent from speech inputs |
KR101959188B1 (en) | 2013-06-09 | 2019-07-02 | 애플 인크. | Device, method, and graphical user interface for enabling conversation persistence across two or more instances of a digital assistant |
US9430463B2 (en) | 2014-05-30 | 2016-08-30 | Apple Inc. | Exemplar-based natural language processing |
US9715875B2 (en) | 2014-05-30 | 2017-07-25 | Apple Inc. | Reducing the need for manual start/end-pointing and trigger phrases |
US10170123B2 (en) | 2014-05-30 | 2019-01-01 | Apple Inc. | Intelligent assistant for home automation |
US9966065B2 (en) | 2014-05-30 | 2018-05-08 | Apple Inc. | Multi-command single utterance input method |
US9338493B2 (en) | 2014-06-30 | 2016-05-10 | Apple Inc. | Intelligent automated assistant for TV user interactions |
US10127911B2 (en) | 2014-09-30 | 2018-11-13 | Apple Inc. | Speaker identification and unsupervised speaker adaptation techniques |
US9668121B2 (en) | 2014-09-30 | 2017-05-30 | Apple Inc. | Social reminders |
KR20160058470A (en) * | 2014-11-17 | 2016-05-25 | 삼성전자주식회사 | Speech synthesis apparatus and control method thereof |
US10152299B2 (en) | 2015-03-06 | 2018-12-11 | Apple Inc. | Reducing response latency of intelligent automated assistants |
US9721566B2 (en) | 2015-03-08 | 2017-08-01 | Apple Inc. | Competing devices responding to voice triggers |
US9886953B2 (en) | 2015-03-08 | 2018-02-06 | Apple Inc. | Virtual assistant activation |
US10109277B2 (en) * | 2015-04-27 | 2018-10-23 | Nuance Communications, Inc. | Methods and apparatus for speech recognition using visual information |
US10460227B2 (en) | 2015-05-15 | 2019-10-29 | Apple Inc. | Virtual assistant in a communication session |
US10200824B2 (en) | 2015-05-27 | 2019-02-05 | Apple Inc. | Systems and methods for proactively identifying and surfacing relevant content on a touch-sensitive device |
US10083688B2 (en) | 2015-05-27 | 2018-09-25 | Apple Inc. | Device voice control for selecting a displayed affordance |
US9578173B2 (en) | 2015-06-05 | 2017-02-21 | Apple Inc. | Virtual assistant aided communication with 3rd party service in a communication session |
US9558734B2 (en) * | 2015-06-29 | 2017-01-31 | Vocalid, Inc. | Aging a text-to-speech voice |
US20160378747A1 (en) | 2015-06-29 | 2016-12-29 | Apple Inc. | Virtual assistant for media playback |
US10671428B2 (en) | 2015-09-08 | 2020-06-02 | Apple Inc. | Distributed personal assistant |
US10740384B2 (en) | 2015-09-08 | 2020-08-11 | Apple Inc. | Intelligent automated assistant for media search and playback |
US10331312B2 (en) | 2015-09-08 | 2019-06-25 | Apple Inc. | Intelligent automated assistant in a media environment |
US10747498B2 (en) | 2015-09-08 | 2020-08-18 | Apple Inc. | Zero latency digital assistant |
US10691473B2 (en) | 2015-11-06 | 2020-06-23 | Apple Inc. | Intelligent automated assistant in a messaging environment |
US10956666B2 (en) | 2015-11-09 | 2021-03-23 | Apple Inc. | Unconventional virtual assistant interactions |
US10223066B2 (en) | 2015-12-23 | 2019-03-05 | Apple Inc. | Proactive assistance based on dialog communication between devices |
US11227589B2 (en) | 2016-06-06 | 2022-01-18 | Apple Inc. | Intelligent list reading |
US10586535B2 (en) | 2016-06-10 | 2020-03-10 | Apple Inc. | Intelligent digital assistant in a multi-tasking environment |
DK201670540A1 (en) | 2016-06-11 | 2018-01-08 | Apple Inc | Application integration with a digital assistant |
DK179415B1 (en) | 2016-06-11 | 2018-06-14 | Apple Inc | Intelligent device arbitration and control |
JP6821970B2 (en) * | 2016-06-30 | 2021-01-27 | ヤマハ株式会社 | Speech synthesizer and speech synthesizer |
EP3767547A1 (en) | 2016-09-06 | 2021-01-20 | Deepmind Technologies Limited | Processing sequences using convolutional neural networks |
EP3497629B1 (en) * | 2016-09-06 | 2020-11-04 | Deepmind Technologies Limited | Generating audio using neural networks |
US11080591B2 (en) | 2016-09-06 | 2021-08-03 | Deepmind Technologies Limited | Processing sequences using convolutional neural networks |
CN110023963B (en) | 2016-10-26 | 2023-05-30 | 渊慧科技有限公司 | Processing text sequences using neural networks |
US10832000B2 (en) * | 2016-11-14 | 2020-11-10 | International Business Machines Corporation | Identification of textual similarity with references |
US10311857B2 (en) * | 2016-12-09 | 2019-06-04 | Microsoft Technology Licensing, Llc | Session text-to-speech conversion |
US10179291B2 (en) | 2016-12-09 | 2019-01-15 | Microsoft Technology Licensing, Llc | Session speech-to-text conversion |
US11204787B2 (en) | 2017-01-09 | 2021-12-21 | Apple Inc. | Application integration with a digital assistant |
US10872598B2 (en) * | 2017-02-24 | 2020-12-22 | Baidu Usa Llc | Systems and methods for real-time neural text-to-speech |
WO2018168427A1 (en) * | 2017-03-13 | 2018-09-20 | ソニー株式会社 | Learning device, learning method, speech synthesizer, and speech synthesis method |
DK201770383A1 (en) | 2017-05-09 | 2018-12-14 | Apple Inc. | User interface for correcting recognition errors |
DK180048B1 (en) | 2017-05-11 | 2020-02-04 | Apple Inc. | MAINTAINING THE DATA PROTECTION OF PERSONAL INFORMATION |
US10726832B2 (en) | 2017-05-11 | 2020-07-28 | Apple Inc. | Maintaining privacy of personal information |
DK179745B1 (en) | 2017-05-12 | 2019-05-01 | Apple Inc. | SYNCHRONIZATION AND TASK DELEGATION OF A DIGITAL ASSISTANT |
DK201770427A1 (en) | 2017-05-12 | 2018-12-20 | Apple Inc. | Low-latency intelligent automated assistant |
DK179496B1 (en) | 2017-05-12 | 2019-01-15 | Apple Inc. | USER-SPECIFIC Acoustic Models |
US10395659B2 (en) * | 2017-05-16 | 2019-08-27 | Apple Inc. | Providing an auditory-based interface of a digital assistant |
DK179560B1 (en) | 2017-05-16 | 2019-02-18 | Apple Inc. | Far-field extension for digital assistant services |
US10303715B2 (en) | 2017-05-16 | 2019-05-28 | Apple Inc. | Intelligent automated assistant for media exploration |
US20180336892A1 (en) | 2017-05-16 | 2018-11-22 | Apple Inc. | Detecting a trigger of a digital assistant |
US10896669B2 (en) | 2017-05-19 | 2021-01-19 | Baidu Usa Llc | Systems and methods for multi-speaker neural text-to-speech |
US20190019500A1 (en) * | 2017-07-13 | 2019-01-17 | Electronics And Telecommunications Research Institute | Apparatus for deep learning based text-to-speech synthesizing by using multi-speaker data and method for the same |
CN107464554B (en) * | 2017-09-28 | 2020-08-25 | 百度在线网络技术（北京）有限公司 | Method and device for generating speech synthesis model |
US10510358B1 (en) * | 2017-09-29 | 2019-12-17 | Amazon Technologies, Inc. | Resolution enhancement of speech signals for speech synthesis |
WO2019111346A1 (en) * | 2017-12-06 | 2019-06-13 | ソースネクスト株式会社 | Full-duplex speech translation system, full-duplex speech translation method, and program |
JP7178028B2 (en) * | 2018-01-11 | 2022-11-25 | ネオサピエンス株式会社 | Speech translation method and system using multilingual text-to-speech synthesis model |
EP3739572A4 (en) * | 2018-01-11 | 2021-09-08 | Neosapience, Inc. | Text-to-speech synthesis method and apparatus using machine learning, and computer-readable storage medium |
GB201804073D0 (en) * | 2018-03-14 | 2018-04-25 | Papercup Tech Limited | A speech processing system and a method of processing a speech signal |
US10818288B2 (en) | 2018-03-26 | 2020-10-27 | Apple Inc. | Natural assistant interaction |
US11145294B2 (en) | 2018-05-07 | 2021-10-12 | Apple Inc. | Intelligent automated assistant for delivering content from user experiences |
US10928918B2 (en) | 2018-05-07 | 2021-02-23 | Apple Inc. | Raise to speak |
JP1621612S (en) | 2018-05-25 | 2019-01-07 | ||
US10892996B2 (en) | 2018-06-01 | 2021-01-12 | Apple Inc. | Variable latency device coordination |
DK179822B1 (en) | 2018-06-01 | 2019-07-12 | Apple Inc. | Voice interaction at a primary device to access call functionality of a companion device |
DK180639B1 (en) | 2018-06-01 | 2021-11-04 | Apple Inc | DISABILITY OF ATTENTION-ATTENTIVE VIRTUAL ASSISTANT |
US11010561B2 (en) | 2018-09-27 | 2021-05-18 | Apple Inc. | Sentiment prediction from textual data |
US11170166B2 (en) | 2018-09-28 | 2021-11-09 | Apple Inc. | Neural typographical error modeling via generative adversarial networks |
US11462215B2 (en) | 2018-09-28 | 2022-10-04 | Apple Inc. | Multi-modal inputs for voice commands |
US10839159B2 (en) | 2018-09-28 | 2020-11-17 | Apple Inc. | Named entity normalization in a spoken dialog system |
US20210358475A1 (en) * | 2018-10-05 | 2021-11-18 | Abelon Inc. | Interpretation system, server apparatus, distribution method, and storage medium |
CN109308892B (en) * | 2018-10-25 | 2020-09-01 | 百度在线网络技术（北京）有限公司 | Voice synthesis broadcasting method, device, equipment and computer readable medium |
US11475898B2 (en) | 2018-10-26 | 2022-10-18 | Apple Inc. | Low-latency multi-speaker speech recognition |
JP6747489B2 (en) * | 2018-11-06 | 2020-08-26 | ヤマハ株式会社 | Information processing method, information processing system and program |
JP6737320B2 (en) | 2018-11-06 | 2020-08-05 | ヤマハ株式会社 | Sound processing method, sound processing system and program |
US11638059B2 (en) | 2019-01-04 | 2023-04-25 | Apple Inc. | Content playback on multiple devices |
CN109671442B (en) * | 2019-01-14 | 2023-02-28 | 南京邮电大学 | Many-to-many speaker conversion method based on STARGAN and x vectors |
CN109754778B (en) * | 2019-01-17 | 2023-05-30 | 平安科技（深圳）有限公司 | Text speech synthesis method and device and computer equipment |
US11348573B2 (en) | 2019-03-18 | 2022-05-31 | Apple Inc. | Multimodality in digital assistant systems |
DK201970509A1 (en) | 2019-05-06 | 2021-01-15 | Apple Inc | Spoken notifications |
US11307752B2 (en) | 2019-05-06 | 2022-04-19 | Apple Inc. | User configurable task triggers |
US11423908B2 (en) | 2019-05-06 | 2022-08-23 | Apple Inc. | Interpreting spoken requests |
US11475884B2 (en) | 2019-05-06 | 2022-10-18 | Apple Inc. | Reducing digital assistant latency when a language is incorrectly determined |
US11140099B2 (en) | 2019-05-21 | 2021-10-05 | Apple Inc. | Providing message response suggestions |
DK201970510A1 (en) | 2019-05-31 | 2021-02-11 | Apple Inc | Voice identification in digital assistant systems |
US11496600B2 (en) | 2019-05-31 | 2022-11-08 | Apple Inc. | Remote execution of machine-learned models |
US11289073B2 (en) | 2019-05-31 | 2022-03-29 | Apple Inc. | Device text to speech |
DK180129B1 (en) | 2019-05-31 | 2020-06-02 | Apple Inc. | User activity shortcut suggestions |
US11360641B2 (en) | 2019-06-01 | 2022-06-14 | Apple Inc. | Increasing the relevance of new available information |
US11227599B2 (en) | 2019-06-01 | 2022-01-18 | Apple Inc. | Methods and user interfaces for voice-based control of electronic devices |
US11488406B2 (en) | 2019-09-25 | 2022-11-01 | Apple Inc. | Text detection using global geometry estimators |
US11295721B2 (en) * | 2019-11-15 | 2022-04-05 | Electronic Arts Inc. | Generating expressive speech audio from text data |
US11061543B1 (en) | 2020-05-11 | 2021-07-13 | Apple Inc. | Providing relevant data items based on context |
US11043220B1 (en) | 2020-05-11 | 2021-06-22 | Apple Inc. | Digital assistant hardware abstraction |
US11755276B2 (en) | 2020-05-12 | 2023-09-12 | Apple Inc. | Reducing description length based on confidence |
US11741941B2 (en) | 2020-06-12 | 2023-08-29 | SoundHound, Inc | Configurable neural speech synthesis |
US11490204B2 (en) | 2020-07-20 | 2022-11-01 | Apple Inc. | Multi-device audio adjustment coordination |
US11438683B2 (en) | 2020-07-21 | 2022-09-06 | Apple Inc. | User identification using headphones |
CN111916093A (en) * | 2020-07-31 | 2020-11-10 | 腾讯音乐娱乐科技（深圳）有限公司 | Audio processing method and device |
US11335321B2 (en) * | 2020-08-28 | 2022-05-17 | Google Llc | Building a text-to-speech system from a small amount of speech data |
WO2022094740A1 (en) * | 2020-11-03 | 2022-05-12 | Microsoft Technology Licensing, Llc | Controlled training and use of text-to-speech models and personalized model generated voices |
EP4198967A4 (en) | 2020-11-12 | 2024-01-24 | Samsung Electronics Co Ltd | Electronic device and control method thereof |
WO2022102987A1 (en) * | 2020-11-12 | 2022-05-19 | 삼성전자 주식회사 | Electronic device and control method thereof |
CN112286366B (en) * | 2020-12-30 | 2022-02-22 | 北京百度网讯科技有限公司 | Method, apparatus, device and medium for human-computer interaction |
TWI766575B (en) * | 2021-02-05 | 2022-06-01 | 國立陽明交通大學 | System and method for improving speech conversion efficiency of articulatory disorder |
Citations (25)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US5129002A (en) | 1987-12-16 | 1992-07-07 | Matsushita Electric Industrial Co., Ltd. | Pattern recognition apparatus |
US5307444A (en) | 1989-12-12 | 1994-04-26 | Matsushita Electric Industrial Co., Ltd. | Voice analyzing system using hidden Markov model and having plural neural network predictors |
US5913193A (en) * | 1996-04-30 | 1999-06-15 | Microsoft Corporation | Method and system of runtime acoustic unit selection for speech synthesis |
US6125345A (en) | 1997-09-19 | 2000-09-26 | At&T Corporation | Method and apparatus for discriminative utterance verification using multiple confidence measures |
US6212500B1 (en) | 1996-09-10 | 2001-04-03 | Siemens Aktiengesellschaft | Process for the multilingual use of a hidden markov sound model in a speech recognition system |
US6460017B1 (en) | 1996-09-10 | 2002-10-01 | Siemens Aktiengesellschaft | Adapting a hidden Markov sound model in a speech recognition lexicon |
US20040078204A1 (en) * | 2002-10-18 | 2004-04-22 | Xerox Corporation | System for learning a language |
US20050131694A1 (en) | 2003-12-12 | 2005-06-16 | Seiko Epson Corporation | Acoustic model creating method, acoustic model creating apparatus, acoustic model creating program, and speech recognition apparatus |
US20050203737A1 (en) | 2002-05-10 | 2005-09-15 | Toshiyuki Miyazaki | Speech recognition device |
US20050216267A1 (en) * | 2002-09-23 | 2005-09-29 | Infineon Technologies Ag | Method and system for computer-aided speech synthesis |
US7003460B1 (en) | 1998-05-11 | 2006-02-21 | Siemens Aktiengesellschaft | Method and apparatus for an adaptive speech recognition system utilizing HMM models |
US20060100874A1 (en) | 2004-10-22 | 2006-05-11 | Oblinger Daniel A | Method for inducing a Hidden Markov Model with a similarity metric |
US20060136209A1 (en) | 2004-12-16 | 2006-06-22 | Sony Corporation | Methodology for generating enhanced demiphone acoustic models for speech recognition |
US20060230140A1 (en) | 2005-04-05 | 2006-10-12 | Kazumi Aoyama | Information processing apparatus, information processing method, and program |
US7216077B1 (en) | 2000-09-26 | 2007-05-08 | International Business Machines Corporation | Lattice-based unsupervised maximum likelihood linear regression for speaker adaptation |
US20080059200A1 (en) * | 2006-08-22 | 2008-03-06 | Accenture Global Services Gmbh | Multi-Lingual Telephonic Service |
US20080091424A1 (en) | 2006-10-16 | 2008-04-17 | Microsoft Corporation | Minimum classification error training with growth transformation optimization |
US20080319743A1 (en) | 2007-06-25 | 2008-12-25 | Alexander Faisman | ASR-Aided Transcription with Segmented Feedback Training |
US7565282B2 (en) | 2005-04-14 | 2009-07-21 | Dictaphone Corporation | System and method for adaptive automatic error correction |
US7603276B2 (en) | 2002-11-21 | 2009-10-13 | Panasonic Corporation | Standard-model generation for speech recognition using a reference model |
US20100198577A1 (en) | 2009-02-03 | 2010-08-05 | Microsoft Corporation | State mapping for cross-language speaker adaptation |
US20110307241A1 (en) * | 2008-04-15 | 2011-12-15 | Mobile Technologies, Llc | Enhanced speech-to-speech translation system and methods |
US8136154B2 (en) | 2007-05-15 | 2012-03-13 | The Penn State Foundation | Hidden markov model (“HMM”)-based user authentication using keystroke dynamics |
US8620136B1 (en) * | 2011-04-30 | 2013-12-31 | Cisco Technology, Inc. | System and method for media intelligent recording in a network environment |
US20160140114A1 (en) * | 2013-02-08 | 2016-05-19 | Machine Zone, Inc. | Systems and methods for multi-user multi-lingual communications |
-
2014
- 2014-11-13 US US14/540,088 patent/US9542927B2/en active Active
Patent Citations (28)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US5129002A (en) | 1987-12-16 | 1992-07-07 | Matsushita Electric Industrial Co., Ltd. | Pattern recognition apparatus |
US5307444A (en) | 1989-12-12 | 1994-04-26 | Matsushita Electric Industrial Co., Ltd. | Voice analyzing system using hidden Markov model and having plural neural network predictors |
US5913193A (en) * | 1996-04-30 | 1999-06-15 | Microsoft Corporation | Method and system of runtime acoustic unit selection for speech synthesis |
US6212500B1 (en) | 1996-09-10 | 2001-04-03 | Siemens Aktiengesellschaft | Process for the multilingual use of a hidden markov sound model in a speech recognition system |
US6460017B1 (en) | 1996-09-10 | 2002-10-01 | Siemens Aktiengesellschaft | Adapting a hidden Markov sound model in a speech recognition lexicon |
US6125345A (en) | 1997-09-19 | 2000-09-26 | At&T Corporation | Method and apparatus for discriminative utterance verification using multiple confidence measures |
US7003460B1 (en) | 1998-05-11 | 2006-02-21 | Siemens Aktiengesellschaft | Method and apparatus for an adaptive speech recognition system utilizing HMM models |
US7216077B1 (en) | 2000-09-26 | 2007-05-08 | International Business Machines Corporation | Lattice-based unsupervised maximum likelihood linear regression for speaker adaptation |
US7487091B2 (en) | 2002-05-10 | 2009-02-03 | Asahi Kasei Kabushiki Kaisha | Speech recognition device for recognizing a word sequence using a switching speech model network |
US20050203737A1 (en) | 2002-05-10 | 2005-09-15 | Toshiyuki Miyazaki | Speech recognition device |
US20050216267A1 (en) * | 2002-09-23 | 2005-09-29 | Infineon Technologies Ag | Method and system for computer-aided speech synthesis |
US20040078204A1 (en) * | 2002-10-18 | 2004-04-22 | Xerox Corporation | System for learning a language |
US7603276B2 (en) | 2002-11-21 | 2009-10-13 | Panasonic Corporation | Standard-model generation for speech recognition using a reference model |
US20050131694A1 (en) | 2003-12-12 | 2005-06-16 | Seiko Epson Corporation | Acoustic model creating method, acoustic model creating apparatus, acoustic model creating program, and speech recognition apparatus |
US20060100874A1 (en) | 2004-10-22 | 2006-05-11 | Oblinger Daniel A | Method for inducing a Hidden Markov Model with a similarity metric |
US20060136209A1 (en) | 2004-12-16 | 2006-06-22 | Sony Corporation | Methodology for generating enhanced demiphone acoustic models for speech recognition |
US20060230140A1 (en) | 2005-04-05 | 2006-10-12 | Kazumi Aoyama | Information processing apparatus, information processing method, and program |
US7565282B2 (en) | 2005-04-14 | 2009-07-21 | Dictaphone Corporation | System and method for adaptive automatic error correction |
US20080059200A1 (en) * | 2006-08-22 | 2008-03-06 | Accenture Global Services Gmbh | Multi-Lingual Telephonic Service |
US20080091424A1 (en) | 2006-10-16 | 2008-04-17 | Microsoft Corporation | Minimum classification error training with growth transformation optimization |
US8301449B2 (en) | 2006-10-16 | 2012-10-30 | Microsoft Corporation | Minimum classification error training with growth transformation optimization |
US8136154B2 (en) | 2007-05-15 | 2012-03-13 | The Penn State Foundation | Hidden markov model (“HMM”)-based user authentication using keystroke dynamics |
US20080319743A1 (en) | 2007-06-25 | 2008-12-25 | Alexander Faisman | ASR-Aided Transcription with Segmented Feedback Training |
US7881930B2 (en) | 2007-06-25 | 2011-02-01 | Nuance Communications, Inc. | ASR-aided transcription with segmented feedback training |
US20110307241A1 (en) * | 2008-04-15 | 2011-12-15 | Mobile Technologies, Llc | Enhanced speech-to-speech translation system and methods |
US20100198577A1 (en) | 2009-02-03 | 2010-08-05 | Microsoft Corporation | State mapping for cross-language speaker adaptation |
US8620136B1 (en) * | 2011-04-30 | 2013-12-31 | Cisco Technology, Inc. | System and method for media intelligent recording in a network environment |
US20160140114A1 (en) * | 2013-02-08 | 2016-05-19 | Machine Zone, Inc. | Systems and methods for multi-user multi-lingual communications |
Non-Patent Citations (42)
Title |
---|
Alan W Black, Heiga Zen, and Keiichi Tokuda, "Statistical Parametric Speech Synthesis," ICASSP 2007, pp. IV-1229-IV-1232. |
Alexander Kain and Michael W Macon, "Spectral voice conversion for text-to-speech synthesis," in Acoustics, Speech and Signal Processing, 1998. Proceedings of the 1998 IEEE International Conference on. IEEE, 1998, vol. 1, pp. 285-288. |
Arun Kumar and Ashish Verma, "Using phone and diphone based acoustic models for voice conversion: a step towards creating voice fonts," in Multimedia and Expo, 2003. ICME'03. Proceedings. 2003 International Conference on. IEEE, 2003, vol. 1, pp. I-393. |
Athanasios Mouchtaris, Jan Van der Spiegel, and Paul Mueller, "Non-parallel training for voice conversion by maximum likelihood constrained adaptation," in Acoustics, Speech, and Signal Processing, 2004. Proceedings.(ICASSP'04). IEEE International Conference on. IEEE, 2004, vol. 1, pp. 1-1. |
Cj Leggetter and PC Woodland, "Maximum likelihood linear regression for speaker adaptation of continuous density hidden markov models," Computer speech and language, vol. 9, No. 2, pp. 171, 1995. |
Daisuke Saito, ShinjiWatanabe, Atsushi Nakamura, and Nobuaki Minematsu, "Statistical voice conversion based on noisy channel model," Audio, Speech, and Language Processing, IEEE Transactions on, vol. 20, No. 6, pp. 1784-1794, 2012. |
Daniel Erro and Asunci'on Moreno, "Frame alignment method for cross-lingual voice conversion," in Interspeech, 2007. |
Daniel Erro Eslava, "Intra-lingual and cross-lingual voice conversion using harmonic plus stochastic models," Barcelona, Spain: PhD Thesis, Universitat Politechnica de Catalunya, 2008. |
Daniel Erro, Asunci'on Moreno, and Antonio Bonafonte, "Inca algorithm for training voice conversion.systems from nonparallel corpora," Audio, Speech, and Language Processing, IEEE Transactions on, vol. 18, No. 5, pp. 944-953, 2010. |
Daniel Erro, Inaki Sainz, Eva Navas, and Inma Hern'aez, "Improved hnm-based vocoder for statistical synthesizers," in Proc. Interspeech, 2011, pp. 1809-1812. |
David Sundermann, Antonio Bonafonte, Hermann Ney, and Harald Hoge, "A first step towards text-independent voice conversion," in Proc. of the ICSLP'04, 2004. |
H Valbret, E Moulines, and Jean-Pierre Tubach, "Voice transformation using psola technique," Speech Communication, vol. 11, No. 2, pp. 175-187, 1992. |
Heiga Zen, Keiichi Tokuda, and Alan W Black, "Statistical parametric speech synthesis," Speech Communication, vol. 51, No. 11, pp. 1039-1064, 2009. |
Hideki Kawahara, "Straight, exploitation of the other aspect of vocoder: Perceptually isomorphic decomposition of speech sounds," Acoustical science and technology, vol. 27, No. 6, pp. 349-353, 2006. |
Hui Ye and Steve Young, "Perceptually weighted linear transformations for voice conversion," in Proc. of the Eurospeech'03, 2003. |
Junichi Yamagishi, "Average-Voice-Based Speech Synthesis" PhD Thesis, 2006. |
Junichi Yamagishi, "Average-voice-based speech synthesis," Tokyo Institute of Technology, 2006. |
Junichi Yamagishi, Bela Usabaev, Simon King, Oliver Watts, John Dines, Jilei Tian, Rile Hu, Keiichiro Oura, Keiichi Tokuda, Reima Karhila, Mikko Kurimo, "Thousands of Voices for HMM-based Speech Synthesis," Interspeech 2009, 10th Annual Conference of the International Speech Communication Association, Brighton, United Kingdom, Sep. 6-10, 2009. |
Junichi Yamagishi, Oliver Watts, Simon King, Bela Usabaev, "Roles of the Average Voice in Speaker-adaptive HMM-based Speech Synthesis," Interspeech 2010, Sep. 26-30, 2010, Makuhari, Chiba, Japan, pp. 418-421. |
Junichi Yamagishi, Takashi Nose, Heiga Zen, Zhen-Hua Ling, Tomoki Toda, Keiichi Tokuda, Simon King, and Steve Renals, "Robust speaker-adaptive hmm-based text-to-speech synthesis," Audio, Speech, and Language Processing, IEEE Transactions on, vol. 17, No. 6, pp. 1208-1230, 2009. |
Keiichi Tokuda, Heiga Zen, and Alan W Black, "An hmm-based speech synthesis system applied to english," in Speech Synthesis, 2002. Proceedings of 2002 IEEE Workshop on. IEEE, 2002, pp. 227-230. |
Kenneth Rose, "Deterministic annealing for clustering, compression, classification, regression, and related optimization problems," Proceedings of the IEEE, vol. 86, No. 11, pp. 2210-2239, 1998. |
Kuldip K Paliwal and Bishnu S Atal, "Efficient vector quantization of Ipc parameters at 24 bits/frame," Speech and Audio Processing, IEEE Transactions on, vol. 1, No. 1, pp. 3-14, 1993. |
Mark JF Gales and PC Woodland, "Mean and variance adaptation within the mllr framework," Computer Speech and Language, vol. 10, No. 4, pp. 249-264, 1996. |
Masatsune Tamura, Takashi Masuko, Keiichi Tokuda, and Takao Kobayashi, "Adaptation of pitch and spectrum for hmm-based speech synthesis using mllr," in Acoustics, Speech, and Signal Processing, 2001. Proceedings.(ICASSP'01). 2001 IEEE International Conference on. IEEE, 2001, vol. 2, pp. 805-808. |
Michael Pitz, Sirko Molau, Ralf Schl{umlaut over (,)}uter, and Hermann Ney, "Vocal tract normalization equals linear transformation in cepstral space," in Proc. EuroSpeech2001, 2001. |
Mikiko Mashimo, Tomoki Toda, Kiyohiro Shikano, and Nick Campbell, "Evaluation of crosslanguage voice conversion based on gmm and straight," 2001. |
Mouchtaris et al., "Non-Parallel Training for Voice Conversion by Maximum Likelihood Constrained Adaptation," Proceedings of the IEEE International Conference on Acoustics, Speech, and Signal Processing 2004 (ICASSP 2004), vol. 1, pp. 1-1 to 1-4. |
M-W Feng, Richard Schwartz, Francis Kubala, and John Makhoul, "Iterative normalization for speaker-adaptive training in continuous speech recognition," in Acoustics, Speech, and Signal Processing, 1989. ICASSP-89., 1989 International Conference on. IEEE, 1989, pp. 612-615. |
R Faltlhauser, T Pfau, and G Ruske, "On-line speaking rate estimation using gaussian mixture models,"in Acoustics, Speech, and Signal Processing, 2000. ICASSP'00. Proceedings. 2000 IEEE International Conference on. IEEE, 2000, vol. 3, pp. 1355-1358. |
Robert J McAulay and Thomas F Quatieri, "Computationally efficient sine-wave synthesis and its application to sinusoidal transform coding," in Acoustics, Speech, and Signal Processing, 1988. ICASSP-88., 1988 International Conference on. IEEE, 1988, pp. 370-373. |
Sankaran Panchapagesan and Abeer Alwan, "Frequency warping for vtln and speaker adaptation by linear transformation of standard mfcc," Computer speech language, vol. 23, No. 1, pp. 42-64, 2009. |
Shrikanth Narayanan and Dagen Wang, "Speech rate estimation via temporal correlation and selected sub-band correlation," in Proc. of the IEEE Int. Conf. on Acoustics, Speech, and Signal Processing (ICASSP). Citeseer, 2005. |
Vassilios V Digalakis, Dimitry Rtischev, and Leonardo G Neumeyer, "Speaker adaptation using constrained estimation of gaussian mixtures," Speech and Audio Processing, IEEE Transactions on, vol. 3, No. 5, pp. 357-366, 1995. |
Vassilis D Diakoloukas and Vassilios V Digalakis, "Maximum-likelihood stochastic-transformation adaptation of hidden markov models," Speech and Audio Processing, IEEE Transactions on, vol. 7, No. 2, pp. 177-187, 1999. |
Vincent Wan, Javier Latorre, Kayoko Yanagisawa, Norbert Braunschweiler, Langzhou Chen, Mark J. F. Gales, and Masami Akamine, "Building HMM-TTS Voices on Diverse Data," IEEE Journal of Selected Topics in Signal Processing, Vol. 8, No. 2, Apr. 2014, pp. 296-306. |
W Bastiaan Kleijn and Kuldip K Paliwal, "Principles of Speech Coding," Speech coding and synthesis, Ch., 1, Elsevier Science Inc., 1995. |
Xianglin Peng, Keiichiro Oura, Yoshihiko Nankaku, and Keiichi Tokuda, "Cross-lingual speaker adaptation for hmm-based speech synthesis considering differences between language-dependent average voices," in Signal Processing (ICSP), 2010 IEEE 10th International Conference on. IEEE, 2010, pp. 605-608. |
Yamato Ohtani, Tomoki Toda, Hiroshi Saruwatari, and Kiyohiro Shikano, "Maximum likelihood voice conversion based on gmm with straight mixed excitation," in Proc. ICSLP, 2006, pp. 2266-2269. |
Yannis Stylianou and Eric Moulines, "Continuous probabilistic transform for voice conversion," IEEE Transactions on Speech and Audio Processing, vol. 6, pp. 131-142, 1998. |
Yannis Stylianou, "Applying the harmonic plus noise model in concatenative speech synthesis," Speech and Audio Processing, IEEE Transactions on, vol. 9, No. 1, pp. 21-29, 2001. |
Yi-Jian Wu, Yoshihiko Nankaku, and Keiichi Tokuda, "State mapping based method for cross-lingual speaker adaptation in hmm-based speech synthesis," in Proc. of Interspeech, 2009, pp. 528-531. |
Cited By (10)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US11694072B2 (en) | 2017-05-19 | 2023-07-04 | Nvidia Corporation | Machine learning technique for automatic modeling of multiple-valued outputs |
CN107452369A (en) * | 2017-09-28 | 2017-12-08 | 百度在线网络技术（北京）有限公司 | Phonetic synthesis model generating method and device |
US10978042B2 (en) | 2017-09-28 | 2021-04-13 | Baidu Online Network Technology (Beijing) Co., Ltd. | Method and apparatus for generating speech synthesis model |
US10671251B2 (en) | 2017-12-22 | 2020-06-02 | Arbordale Publishing, LLC | Interactive eReader interface generation based on synchronization of textual and audial descriptors |
US11443646B2 (en) | 2017-12-22 | 2022-09-13 | Fathom Technologies, LLC | E-Reader interface system with audio and highlighting synchronization for digital books |
US11657725B2 (en) | 2017-12-22 | 2023-05-23 | Fathom Technologies, LLC | E-reader interface system with audio and highlighting synchronization for digital books |
US10685644B2 (en) * | 2017-12-29 | 2020-06-16 | Yandex Europe Ag | Method and system for text-to-speech synthesis |
US11133025B2 (en) * | 2019-11-07 | 2021-09-28 | Sling Media Pvt Ltd | Method and system for speech emotion recognition |
US11688416B2 (en) | 2019-11-07 | 2023-06-27 | Dish Network Technologies India Private Limited | Method and system for speech emotion recognition |
US20210280202A1 (en) * | 2020-09-25 | 2021-09-09 | Beijing Baidu Netcom Science And Technology Co., Ltd. | Voice conversion method, electronic device, and storage medium |
Also Published As
Publication number | Publication date |
---|---|
US20160140951A1 (en) | 2016-05-19 |
Similar Documents
Publication | Publication Date | Title |
---|---|---|
US9542927B2 (en) | Method and system for building text-to-speech voice from diverse recordings | |
US9183830B2 (en) | Method and system for non-parametric voice conversion | |
US9177549B2 (en) | Method and system for cross-lingual voice conversion | |
US8527276B1 (en) | Speech synthesis using deep neural networks | |
US9240184B1 (en) | Frame-level combination of deep neural network and gaussian mixture models | |
US8442821B1 (en) | Multi-frame prediction for hybrid neural network/hidden Markov models | |
CN108573693B (en) | Text-to-speech system and method, and storage medium therefor | |
CN110050302B (en) | Speech synthesis | |
US10388284B2 (en) | Speech recognition apparatus and method | |
US8484022B1 (en) | Adaptive auto-encoders | |
US8805684B1 (en) | Distributed speaker adaptation | |
Le et al. | Deep shallow fusion for RNN-T personalization | |
CN111883110B (en) | Acoustic model training method, system, equipment and medium for speech recognition | |
US20220068255A1 (en) | Speech Recognition Using Unspoken Text and Speech Synthesis | |
US8571871B1 (en) | Methods and systems for adaptation of synthetic speech in an environment | |
US8996366B2 (en) | Multi-stage speaker adaptation | |
US9466292B1 (en) | Online incremental adaptation of deep neural networks using auxiliary Gaussian mixture models in speech recognition | |
US8374866B2 (en) | Generating acoustic models | |
US9123333B2 (en) | Minimum bayesian risk methods for automatic speech recognition | |
US8965763B1 (en) | Discriminative language modeling for automatic speech recognition with a weak acoustic model and distributed training | |
US10650810B2 (en) | Determining phonetic relationships | |
KR20230156121A (en) | Unsupervised parallel tacotron non-autoregressive and controllable text-to-speech | |
US9009050B2 (en) | System and method for cloud-based text-to-speech web services | |
EP3376497B1 (en) | Text-to-speech synthesis using an autoencoder | |
US11322133B2 (en) | Expressive text-to-speech utilizing contextual word-level style tokens |
Legal Events
Date | Code | Title | Description |
---|---|---|---|
AS | Assignment |
Owner name: GOOGLE INC., CALIFORNIAFree format text: ASSIGNMENT OF ASSIGNORS INTEREST;ASSIGNORS:AGIOMYRGIANNAKIS, IOANNIS;GUTKIN, ALEXANDER;SIGNING DATES FROM 20141111 TO 20141112;REEL/FRAME:034162/0025 |
|
STCF | Information on status: patent grant |
Free format text: PATENTED CASE |
|
AS | Assignment |
Owner name: GOOGLE LLC, CALIFORNIAFree format text: CHANGE OF NAME;ASSIGNOR:GOOGLE INC.;REEL/FRAME:044097/0658Effective date: 20170929 |
|
MAFP | Maintenance fee payment |
Free format text: PAYMENT OF MAINTENANCE FEE, 4TH YEAR, LARGE ENTITY (ORIGINAL EVENT CODE: M1551); ENTITY STATUS OF PATENT OWNER: LARGE ENTITYYear of fee payment: 4 |