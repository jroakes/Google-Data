US11886546B2 - Systems and methods for dynamically restricting the rendering of unauthorized content included in information resources - Google Patents
Systems and methods for dynamically restricting the rendering of unauthorized content included in information resources Download PDFInfo
- Publication number
- US11886546B2 US11886546B2 US17/202,082 US202117202082A US11886546B2 US 11886546 B2 US11886546 B2 US 11886546B2 US 202117202082 A US202117202082 A US 202117202082A US 11886546 B2 US11886546 B2 US 11886546B2
- Authority
- US
- United States
- Prior art keywords
- content
- content element
- restricted
- information resource
- computing device
- Prior art date
- Legal status (The legal status is an assumption and is not a legal conclusion. Google has not performed a legal analysis and makes no representation as to the accuracy of the status listed.)
- Active
Links
- 238000009877 rendering Methods 0.000 title claims abstract description 217
- 238000000034 method Methods 0.000 title claims abstract description 97
- 238000001514 detection method Methods 0.000 claims abstract description 465
- 230000009471 action Effects 0.000 claims abstract description 164
- 230000008859 change Effects 0.000 claims description 58
- 230000005540 biological transmission Effects 0.000 claims description 30
- 230000004044 response Effects 0.000 claims description 7
- 238000012217 deletion Methods 0.000 claims 4
- 230000037430 deletion Effects 0.000 claims 4
- 230000000007 visual effect Effects 0.000 abstract description 297
- 238000013515 script Methods 0.000 description 73
- 238000004422 calculation algorithm Methods 0.000 description 67
- 238000012545 processing Methods 0.000 description 64
- 230000008569 process Effects 0.000 description 61
- 230000006870 function Effects 0.000 description 24
- 238000012015 optical character recognition Methods 0.000 description 22
- 238000010586 diagram Methods 0.000 description 17
- 238000003780 insertion Methods 0.000 description 17
- 230000037431 insertion Effects 0.000 description 17
- 238000004891 communication Methods 0.000 description 16
- 238000004590 computer program Methods 0.000 description 16
- 238000011524 similarity measure Methods 0.000 description 16
- 238000003708 edge detection Methods 0.000 description 10
- 238000003909 pattern recognition Methods 0.000 description 10
- 230000004048 modification Effects 0.000 description 7
- 238000012986 modification Methods 0.000 description 7
- 230000003287 optical effect Effects 0.000 description 6
- 230000003993 interaction Effects 0.000 description 5
- 230000004075 alteration Effects 0.000 description 4
- 230000000670 limiting effect Effects 0.000 description 4
- 238000012913 prioritisation Methods 0.000 description 4
- 230000000644 propagated effect Effects 0.000 description 3
- 230000001953 sensory effect Effects 0.000 description 3
- 230000006399 behavior Effects 0.000 description 2
- 230000001413 cellular effect Effects 0.000 description 2
- 230000008676 import Effects 0.000 description 2
- 230000002452 interceptive effect Effects 0.000 description 2
- 238000000926 separation method Methods 0.000 description 2
- 241000700605 Viruses Species 0.000 description 1
- 238000003491 array Methods 0.000 description 1
- 239000003795 chemical substances by application Substances 0.000 description 1
- 239000000835 fiber Substances 0.000 description 1
- 238000002347 injection Methods 0.000 description 1
- 239000007924 injection Substances 0.000 description 1
- 239000004973 liquid crystal related substance Substances 0.000 description 1
- 238000007726 management method Methods 0.000 description 1
- 239000004065 semiconductor Substances 0.000 description 1
- 239000000758 substrate Substances 0.000 description 1
- 238000012546 transfer Methods 0.000 description 1
- 238000012795 verification Methods 0.000 description 1
- 238000012800 visualization Methods 0.000 description 1
Images
Classifications
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F21/00—Security arrangements for protecting computers, components thereof, programs or data against unauthorised activity
- G06F21/10—Protecting distributed programs or content, e.g. vending or licensing of copyrighted material ; Digital rights management [DRM]
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F16/00—Information retrieval; Database structures therefor; File system structures therefor
- G06F16/90—Details of database functions independent of the retrieved data types
- G06F16/95—Retrieval from the web
- G06F16/958—Organisation or management of web site content, e.g. publishing, maintaining pages or automatic linking
- G06F16/986—Document structures and storage, e.g. HTML extensions
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F21/00—Security arrangements for protecting computers, components thereof, programs or data against unauthorised activity
- G06F21/10—Protecting distributed programs or content, e.g. vending or licensing of copyrighted material ; Digital rights management [DRM]
- G06F21/12—Protecting executable software
- G06F21/121—Restricting unauthorised execution of programs
- G06F21/125—Restricting unauthorised execution of programs by manipulating the program code, e.g. source code, compiled code, interpreted code, machine code
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F21/00—Security arrangements for protecting computers, components thereof, programs or data against unauthorised activity
- G06F21/10—Protecting distributed programs or content, e.g. vending or licensing of copyrighted material ; Digital rights management [DRM]
- G06F21/12—Protecting executable software
- G06F21/121—Restricting unauthorised execution of programs
- G06F21/128—Restricting unauthorised execution of programs involving web programs, i.e. using technology especially used in internet, generally interacting with a web browser, e.g. hypertext markup language [HTML], applets, java
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F21/00—Security arrangements for protecting computers, components thereof, programs or data against unauthorised activity
- G06F21/60—Protecting data
- G06F21/62—Protecting access to data via a platform, e.g. using keys or access control rules
- G06F21/6209—Protecting access to data via a platform, e.g. using keys or access control rules to a single file or object, e.g. in a secure envelope, encrypted and accessed using a key, or with access control rules appended to the object itself
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04L—TRANSMISSION OF DIGITAL INFORMATION, e.g. TELEGRAPHIC COMMUNICATION
- H04L63/00—Network architectures or network communication protocols for network security
- H04L63/14—Network architectures or network communication protocols for network security for detecting or protecting against malicious traffic
- H04L63/1408—Network architectures or network communication protocols for network security for detecting or protecting against malicious traffic by monitoring network traffic
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04L—TRANSMISSION OF DIGITAL INFORMATION, e.g. TELEGRAPHIC COMMUNICATION
- H04L63/00—Network architectures or network communication protocols for network security
- H04L63/14—Network architectures or network communication protocols for network security for detecting or protecting against malicious traffic
- H04L63/1408—Network architectures or network communication protocols for network security for detecting or protecting against malicious traffic by monitoring network traffic
- H04L63/1416—Event detection, e.g. attack signature detection
Definitions
- content elements may be rendered by an application (e.g., web browser) on information resources (e.g., webpages).
- information resources e.g., webpages
- Each content element of the information resource may be transmitted via the computer networked environment from a different server to a computing device.
- One or more these different servers may be unauthorized to include content elements on information resources.
- At least one aspect is directed to a method of dynamically restricting rendering of unauthorized content included in information resources.
- a client device can identify an information resource including a content element specifying one or more graphical characteristics.
- the client device can determine that the content element corresponds to a restricted content element by applying at least one of an action-based detection policy to detect actions performed on the information resource or a visual-based detection policy to detect the graphical characteristics of the content element.
- the client device can modify, by applying a content rendering restriction policy, the information resource to alter rendering of the content element on the information resource responsive to determining that the first content element corresponds to the restricted content element by applying at least one of the action-based detection policy or the visual-based detection policy.
- applying the action-based detection policy can further include identifying a regenerate command for a layout corresponding to the information resource, the regenerate command generated by the client device responsive to an insertion of a new content object onto a document tree generated based on the information resource, the new content object corresponding to the content element.
- applying the action-based detection policy can further include identifying a change in the one or more graphical characteristics of a content object of a document tree generated based on the information resource, the content object corresponding to the content element.
- applying the action-based detection policy can further include identifying a change in the one or more graphical characteristics of a content object of a document tree generated based on the information resource, the content object corresponding to the content element.
- applying the action-based detection policy can further include detecting a transmission of a pingback generated from instructions of the content element.
- applying the visual-based detection policy can further include identifying a dimension or a position of the content element from the one or more graphical characteristics. In some implementations, applying the visual-based detection policy can further include determining that the dimension or the position of the content element matches one or more respective predesignated dimensions or one or more respective predesignated positions corresponding to dimensions or positions associated with content elements identified as restricted content elements.
- applying the visual-based detection policy can further include identifying at least one character string on the content element by applying an optical character recognition algorithm on the content element. In some implementations, applying the visual-based detection policy can further include determining that at least one character string on the content element matches one or more predesignated restricted character strings corresponding to character strings associated with content elements identified as restricted content elements.
- applying the visual-based detection policy can further include identifying a first color value of the content element from the one or more graphical characteristics of the first content element. In some implementations, applying the visual-based detection policy can further include identifying a second color value of a second content element of the information resource from one or more graphical characteristics of the second content element. In some implementations, applying the visual-based detection policy can further include calculating a color difference value between the first color value and the second color value. In some implementations, applying the visual-based detection policy can further include calculating a color difference value between the first color value and the second color value.
- applying the content rendering restriction policy can further include deleting a content object from a document tree generated from the information resource, the content object corresponding to the first content element.
- applying the content rendering restriction policy can further include setting to null a display property of a style rule corresponding to a content object, the content object corresponding to the first content element.
- applying the content rendering restriction policy can further include inserting a second content element as an overlay over the first content element to restrict visibility of the first content element on a display of the client device.
- At least one aspect is directed to a system for dynamically restricting rendering of unauthorized content included in information resource.
- the system can include a computing device having one or more processors.
- the computing device can identify an information resource including a content element specifying one or more graphical characteristics.
- the computing device can determine that the content element corresponds to a restricted content element by applying at least one of an action-based detection policy to detect actions performed on the information resource or a visual-based detection policy to detect the graphical characteristics of the content element.
- the computing device can modify, by applying a content rendering restriction policy, the information resource to alter rendering of the content element on the information resource responsive to determining that the first content element corresponds to the restricted content element by applying at least one of the action-based detection policy or the visual-based detection policy.
- the computing device can apply the action-based detection policy by identifying a regenerate command for a layout corresponding to the information resource, the regenerate command generated by the client device responsive to an insertion of a new content object onto a document tree generated based on the information resource, the new content object corresponding to the content element.
- the computing device can apply the action-based detection policy by identifying a change in the one or more graphical characteristics of a content object of a document tree generated based on the information resource, the content object corresponding to the content element.
- the computing device can apply the action-based detection policy by detecting a transmission of a pingback generated from instructions of the content element.
- the computing device can apply the visual-based detection policy by identifying dimension or a position of the content element from the one or more graphical characteristics. In some implementations, the computing device can apply the visual-based detection policy by determining that the dimension or the position of the content element matches one or more respective predesignated dimensions or one or more respective predesignated positions corresponding to dimensions or positions associated with content elements identified as restricted content elements.
- the computing device can apply the visual-based detection policy by identifying at least one character string on the content element by applying an optical character recognition algorithm on the content element. In some implementations, the computing device can apply the visual-based detection policy by determining that at least one character string on the content element matches one or more predesignated restricted character strings corresponding to character strings associated with content elements identified as restricted content elements.
- the computing device can apply the visual-based detection policy by identifying a first color value of the content element from the one or more graphical characteristics of the first content element. In some implementations, the computing device can apply the visual-based detection policy by identifying a second color value of a second content element of the information resource from one or more graphical characteristics of the second content element. In some implementations, the computing device can apply the visual-based detection policy by calculating a color difference value between the first color value and the second color value. In some implementations, the computing device can apply the visual-based detection policy by determining that a color difference value is above a predetermined threshold color value.
- the computing device can apply the content rendering restriction policy by deleting a content object from a document tree generated from the information resource, the content object corresponding to the first content element. In some implementations, the computing device can apply the content rendering restriction policy by setting to null a display property of a style rule corresponding to a content object of an object model generated from the information resource, the content object corresponding to the first content element. In some implementations, the computing device can apply the content rendering restriction policy by inserting a second content element as an overlay over the first content element to restrict visibility of the first content element on a display of the client device.
- FIG. 1 is a block diagram depicting one implementation of an environment for dynamically restricting rendering of unauthorized content included in information resources in a computer network environment, according to an illustrative implementation
- FIG. 2 A is a block diagram depicting one implementation of a computing device including an application render restrictor system, according to an illustrative implementation
- FIG. 2 B is a block diagram depicting an information resource showing content elements of the information resource on an application, according to an illustrative implementation
- FIG. 3 A is a block diagram depicting a document tree generated based on the information resource, according to an illustrative implementation
- FIG. 3 B is a block diagram depicting an object model with each content object matched to a style rule specified by the information resource, according to an illustrative implementation
- FIG. 3 C is a block diagram depicting a rendering tree generated based on the document tree with each object matched to a style rule, according to an illustrative implementation
- FIG. 4 is a flow diagram depicting a method of dynamically inserting content on an information resource, according to an illustrative implementation
- FIG. 5 is a flow diagram depicting a method of dynamically inserting content on an information resource, according to an illustrative implementation.
- FIG. 6 is a block diagram illustrating a general architecture for a computer system that may be employed to implement elements of the systems and methods described and illustrated herein, according to an illustrative implementation.
- Information resources can include one or more content elements (e.g., inline frames, images, and sections, among others).
- Content elements can define the visual content makeup of the information resource.
- the information resource can include primary content (e.g., body text) and a content element including an image.
- An application e.g., web browser
- Some of these content elements may originate from a server different from the server providing the information resource. As such, information resources with such content elements may suffer from security vulnerabilities.
- a proxy network device may intercept the content elements originally intended for the information resource and replace the intercepted ones with its own content elements.
- Such content elements may include malicious code such as Trojans and viruses.
- these content elements may interfere with the user's ability to read or view the primary content of the information resource, even without the injection of malicious code.
- one content element may be of a color different from all the remaining content elements on the information resource, thereby causing the user to be distracted from the primary content or other content elements.
- content publishers may include instructions to cause the client device to request content from the host server hosting the information resource instead of one or more other content servers.
- This implementation may not be able to address the scenarios in which content publishers themselves have inserted content elements that may interfere with the user's experience with the primary content on the displayed information resource.
- an application render restrictor operating on a client device or a proxy device can identify one or more content elements on the information resource.
- the application render restrictor may apply a domain-based, visual-based, or action-based detection policy to detect whether the content element is a restricted content element (that may be prevented from being displayed).
- the application render restrictor can determine whether any of the content elements of the information resource include redirect addresses that may be restricted.
- the application render restrictor can apply various visual recognition algorithms to determine whether any of the content elements are restricted.
- the application render restrictor can detect any restricted processes or transmissions caused by the application processing any of the content elements of the information resource.
- application render restrictor can authenticate whether all of the content objects of the document tree, style rules of the object model, nodes of the rendering tree, or sub-layouts of the layout for the information resource.
- FIG. 1 is a block diagram depicting one implementation of an environment for deploying countermeasures against unauthorized scripts interfering with the rendering of content elements on information resources in a computer network environment.
- the environment 100 includes at least one data processing system 110 .
- the data processing system 110 can include at least one processor and a memory, i.e., a processing circuit.
- the memory stores processor-executable instructions that, when executed by processor, cause the processor to perform one or more of the operations described herein.
- the processor may include a microprocessor, application-specific integrated circuit (ASIC), field-programmable gate array (FPGA), etc., or combinations thereof.
- the memory may include, but is not limited to, electronic, optical, magnetic, or any other storage or transmission device capable of providing the processor with program instructions.
- the memory may further include a floppy disk, CD-ROM, DVD, magnetic disk, memory chip, ASIC, FPGA, read-only memory (ROM), random-access memory (RAM), electrically-erasable ROM (EEPROM), erasable-programmable ROM (EPROM), flash memory, optical media, or any other suitable memory from which the processor can read instructions.
- the instructions may include code from any suitable computer-programming language.
- the data processing system can include one or more computing devices or servers that can perform various functions.
- the data processing system can include an advertising auction system configured to host auctions.
- the data processing system does not include the advertising auction system but is configured to communicate with the advertising auction system via the network 105 .
- the network 105 can include computer networks such as the internet, local, wide, metro or other area networks, intranets, satellite networks, other computer networks such as voice or data mobile phone communication networks, and combinations thereof.
- the data processing system 110 of the system 100 can communicate via the network 105 , for instance with at least one content provider computing device 115 , at least one content publisher computing device 120 , or at least one client device 125 .
- the network 105 may be any form of computer network that relays information between the client device 125 , data processing system 110 , and one or more content sources, for example, web servers, advertising servers, amongst others.
- the network 105 may include the Internet and/or other types of data networks, such as a local area network (LAN), a wide area network (WAN), a cellular network, satellite network, or other types of data networks.
- the network 105 may also include any number of computing devices (e.g., computer, servers, routers, network switches, etc.) that are configured to receive and/or transmit data within network 105 .
- the network 105 may further include any number of hardwired and/or wireless connections.
- the client device 125 may communicate wirelessly (e.g., via WiFi, cellular, radio, etc.) with a transceiver that is hardwired (e.g., via a fiber optic cable, a CAT5 cable, etc.) to other computing devices in network 105 .
- the client device 125 may also communicate wireless with the computing devices of the network 105 via a proxy device 150 (e.g., router, network switch, or gateway).
- a proxy device 150 e.g., router, network switch, or gateway.
- the content provider computing devices 115 can include servers or other computing devices operated by a content provider entity to provide content elements to the content publisher computing devices 120 or the data processing system 110 .
- the content provided by the content provider computing device 115 can include third party content elements for display on information resources, such as a website or web page that includes primary content, e.g. content provided by the content publisher computing device 120 .
- the content elements can also be displayed on a search results web page.
- the content elements associated with the content provider computing device 115 can be displayed on information resources other than web pages, such as content displayed as part of the execution of an application on a smartphone or other client device 125 .
- the content publisher computing devices 120 or the data processing system 110 in turn can select the content elements of the content provider computing devices 115 .
- the data processing system 110 can run an ad auction to select the content elements based on various performance metrics of the respective content elements.
- the content publisher computing devices 120 or the data processing system can transmit the selected content elements of the content provider computing devices for display on information resources at the client devices 125 .
- the content publisher computing devices 120 can include servers or other computing devices operated by a content publishing entity to provide primary content for display via the network 105 .
- the content publisher computing device 120 can include a web page operator who provides primary content for display on the web page.
- the content publisher computing devices 120 can also provide third party content received from the content provider computing devices 115 for display via the network 105 .
- the primary content can include content other than that provided by the content publisher computing device 120
- the web page can include content slots configured for the display of content elements received by the content publisher computing devices 120 from the content provider computing devices 115 .
- the content publisher computing device 120 can operate the website of a company and can provide content about that company for display on web pages of the website.
- the web pages can include content slots configured for the display of content elements such as images, text, videos, or any combination thereof received from the content provider computing device 115 .
- the content publisher computing device 120 includes a search engine computing device (e.g. server) of a search engine operator that operates a search engine website.
- the primary content of search engine web pages e.g., a results or landing web page
- the content publisher computing device 120 can include a server for serving video content.
- the content publisher computing devices 120 can select one or more content elements received from the content publisher computing devices 120 to include in an information resource with the primary content for display via the network 105 .
- the content publisher computing devices 120 can transmit to client devices 125 content elements received from the content publisher computing devices 115 along with the primary content, responsive to a request for content from the client devices 125 .
- the content publisher computing devices 120 can transmit to the client devices 125 content elements received from the content publisher computing devices 115 , responsive to a request for additional content from the client devices 125 .
- the content publisher computing device 120 can receive an initial request for primary content from a client device 125 and in response transmit an information resource including primary content to the client device.
- the content publisher computing device 120 can receive a request for additional content and in turn provide content elements cached at the content publisher computing device 120 and received from the content provider computing devices 115 .
- a dynamic event e.g., change in scroll length of a webpage
- the client devices 125 can include computing devices configured to communicate via the network 105 or via the network 105 through the proxy device 150 to display data such as the content provided by the content publisher computing device 120 (e.g., primary web page content or other information resources) and the content provided by the content provider computing device 115 (e.g., content elements configured for display in an information resource).
- the client device 125 , the content provider computing device 115 , and the content publisher computing device 120 can include desktop computers, laptop computers, tablet computers, smartphones, personal digital assistants, mobile devices, consumer computing devices, servers, clients, digital video recorders, a set-top box for a television, a video game console, or any other computing device configured to communicate via the network 105 .
- the client device 125 can be communication devices through which an end user can submit requests to receive content.
- the requests can be requests to a search engine and the requests can include search queries. In some implementations, the requests can include a request to access a web page.
- the proxy device 150 can include computing devices deployed between the client device 125 and the network 105 .
- the proxy device 150 can be configured to communicate with one or more other computing devices, such as the data processing system 110 , content provider devices 115 , and content publisher devices 125 via the network 105 .
- the proxy device 150 can be, for example, a router, network switch, gateway, network node, or any other computing device configured to receive and forward data packets from the client device 125 to the network 105 or from the network 105 to the client device 125 .
- the content provider computing devices 115 , the content publisher computing device 120 and the client device 125 can include a processor and a memory, i.e., a processing circuit.
- the memory stores machine instructions that, when executed by processor, cause processor to perform one or more of the operations described herein.
- the processor may include a microprocessor, application-specific integrated circuit (ASIC), field-programmable gate array (FPGA), etc., or combinations thereof.
- the memory may include, but is not limited to, electronic, optical, magnetic, or any other storage or transmission device capable of providing the processor with program instructions.
- the memory may further include a floppy disk, CD-ROM, DVD, magnetic disk, memory chip, ASIC, FPGA, read-only memory (ROM), random-access memory (RAM), electrically-erasable ROM (EEPROM), erasable-programmable ROM (EPROM), flash memory, optical media, or any other suitable memory from which the processor can read instructions.
- the instructions may include code from any suitable computer-programming language.
- the content provider computing devices 115 , the content publisher computing devices 120 , and the client device 125 may also include one or more user interface devices.
- a user interface device refers to any electronic device that conveys data to a user by generating sensory information (e.g., a visualization on a display, one or more sounds, etc.) and/or converts received sensory information from a user into electronic signals (e.g., a keyboard, a mouse, a pointing device, a touch screen display, a microphone, etc.).
- the one or more user interface devices may be internal to a housing of the content provider computing devices 115 , the content publisher computing device 120 and the client device 125 (e.g., a built-in display, microphone, etc.) or external to the housing of content provider computing devices 115 , the content publisher computing device 120 and the client device 125 (e.g., a monitor connected to the client device 115 , a speaker connected to the client device 115 , etc.), according to various implementations.
- the content provider computing devices 115 , the content publisher computing device 120 and the client device 125 may include an electronic display, which visually displays web pages using webpage data received from one or more content sources and/or from the data processing system 110 via the network 105 .
- the data processing system 110 can include at least one server.
- the data processing system 110 can include a plurality of servers located in at least one data center or server farm.
- the data processing system 110 includes a content placement system, e.g., an ad server or ad placement system.
- the data processing system 110 can include at least one content request module 130 , at least one content selection module 135 , at least one script provider module 140 , and at least one database 145 .
- the content request module 130 , the content selection module 135 , and the script provider module 140 each can include at least one processing unit, server, virtual server, circuit, engine, agent, appliance, or other logic device such as programmable logic arrays configured to communicate with the database 145 and with other computing devices (e.g., the content provider computing device 115 , the content publisher computing device 120 , or the client device 125 ) via the network 105 .
- the content request module 130 , the content selection module 135 , the script provider module 140 , and the format prioritization module 145 can include or execute at least one computer program or at least one script.
- the content request module 130 , the content selection module 135 , and the script provider module 140 can be separate components, a single component, or part of the data processing system 110 .
- the content request module 130 , the content selection module 135 , and the script provider module 140 can include combinations of software and hardware, such as one or more processors configured to execute one or more scripts.
- the data processing system 110 can also include one or more content repositories or databases 145 .
- the databases 145 can be local to the data processing system 110 .
- the databases 145 can be remote to the data processing system 110 but can communicate with the data processing system 110 via the network 105 .
- the databases 145 can include web pages, content elements (e.g., advertisements), and content formatting script, among others, to serve to a client device 125 .
- information resources and content elements of the information resources can include those illustratively depicted in FIG. 2 B . Additional details of the contents of the database 145 will be provided below.
- the content request module 130 can receive a request for content from the client device 125 .
- the request for content can include a request for an information resource or a request for content element for the information resource.
- the request for content can include a device identifier corresponding to the client device 125 .
- the request for content can include an application profile identifying an application executing on the client device 125 .
- the request for content can include an identifier for the information resource or the content element.
- the request for content can include Uniform Resource Locator (URL) referring to a specific resource such as a webpage (e.g., “www.example.com/homepage.html”).
- the host name of the URL for the information resource may differ from the host name of the URL for the content element.
- the URL for the information resource can be “www.example_publisher.com/index.html” but the URL for the content element can be “www.example_thirdparty.com/content_item_271828.html.”
- the URL for a request for a content element can include a host page same as the URL for the information resource.
- the URL for the information resource can be “www.example.com/index.html” but the URL for the content element can be “www.example.com/content_item_978.html.”
- the request for content can include an indicator indicating a request for a content formatting script.
- the request for the information resource can include a header including an indicator specifying the script provider module 135 or the content publisher computing device 120 to send the content formatting script along with the information resource to the client device 125 .
- the information resource can include the content formatting script inserted in the script or markup for the information resource.
- the information resource can include a script for retrieving the content formatting script for later insertion into the information resource.
- the content selection module 135 or the content publisher computing device 120 can determine the content to transmit to the client device 125 .
- the content selection module 135 or the content publisher computing device 120 can identify the address or identifier for the information resource and the content element included in the request for content.
- the content selection module 135 can access the database 145 and select the information resource or the content element identified by the address or identifier.
- the content selection module 135 can transmit a request to the content provider 115 or the content publisher 120 to access, retrieve, or otherwise receive the information resource or content element identified by the address or identifier.
- the content selection module 135 can transmit the content to the client device 125 on behalf of one or more content publisher computing devices 120 .
- the content selection module 135 can transmit or forward the information resource or content element identified by the address or identifier to the client device 125 .
- the data processing system 110 can receive from a client device 125 a request for an information resource or the content element.
- the request may include an address referring to one of the content publishers 120 .
- the content selection module 135 can forward the request for the information resource to the respective content publisher 120 .
- the content selection module 135 can forward the content document to the client device 125 that made the original request, along with the content formatting script.
- the content selection module 135 can generate the content for transmission to the content device 125 .
- the content selection 135 can generate the information resource and one or more content elements to include in the information resource based on the request received from the client device 125 .
- the content selection 135 can generate the content formatting script to include in the information resource.
- the content formatting script can be configured to cause the client device 125 to request one or more additional content elements for insertion into the information resource and transmit a pingback to the data processing system 100 indicating success of display of the respective content element at the client device 125 .
- a content publisher may configure their domains or website addresses such that requests to access information resources of the content publisher are redirected to a server of the data processing system 110 .
- the content selection module 135 of the data processing system 110 can receive the request to access an information resource of the content publisher.
- the request can include a device identifier or other information that the content selection module 135 can use to select content that is relevant to a user of the client device from which the request was received.
- the content selection module 135 may access one or more servers of the content publisher that maintain content elements or servers of the data processing system 110 that maintain content elements on behalf of the content publisher.
- the content selection module 135 may then generate an information resource or modify an existing information resource to include content elements for display at the client device.
- the content elements can be advertisements that may be received from an ad server.
- the advertisements or other third-party content items can include an image and a source address to which to redirect client devices to responsive to receiving an interaction on the image.
- the source address can be an address of a server of a content provider.
- the image of the content item can include a link to the data processing system 110 or a server that provides the information resource to the client device.
- the link can be an encoded link that causes the client device to be redirected from the server that provides the information resource to the client device to a server of the content publisher that provided the content item to the content selection module for insertion into the information resource.
- the content selection module 135 can receive the content element from an ad auction system that can select the content element for display based on an ad auction.
- the ad auction system can select an ad from a plurality of ads based on ad auction parameters, such as bid values, size of ad, click-through rate (CTR), cost per mille (CPM), and impression rate, among others.
- CTR click-through rate
- CPM cost per mille
- impression rate ad auction parameters
- the ad auction system can select the ad from the plurality of ads further based on size specifications of the respective ad and ad performance from previous presentation of the respective ad.
- the content selection module 135 can select a plurality of formats for each content element on an information resource based on the identified device identifier or the application profile from the request for content.
- the content selection module 135 can determine a prioritization order specifying a selection sequence of the plurality of formats for processing by a computing device.
- the content selection module 135 can include, insert, embed, or otherwise append the prioritization order and the plurality of formats in the information resource to be sent to the client device 125 .
- the content selection module 135 can maintain the prioritization order in the database 145 .
- the script provider module 140 can receive a request for the content formatting script from the content publisher computing device 120 or the content provider computing device 115 for insertion into an information resource or content element to be provided to the client device 125 .
- the script provider module 140 can, responsive to receiving the request for the content formatting script from the content publisher computing device 120 or the content provider computing device 115 , transmit the content formatting script to the content publisher computing device 120 or the content provider computing device 115 for inclusion, insertion, embedding, or appending the content formatting script into the information resource or the content element.
- the script provider module 140 can transmit the information resource or the content element including the content formatting script to the client device 125 , responsive to the request for the content formatting script from the content publisher computing device 120 or the content provider computing device 115 .
- the script provider module 140 can receive a request for the content formatting script from the client device 125 along with a request for content. The script provider module 140 can transmit the content formatting script to the client device 125 . In some implementations, the script provider module 140 can include, insert, embed, or otherwise append the content formatting script into the information resource or the content element to be transmitted to the client device 125 . In some implementations, the script provider module 140 , in conjunction with the other modules of the data processing system 110 , can transmit the information resource or the content element with the content formatting script embedded to the client device 125 .
- the script provider module 140 can receive a request for an up-to-date version of the content formatting script from the content publisher computing device 120 or the content provider computing device 115 .
- the script provider module 140 can periodically receive a request for the content formatting script from the content publisher computing device 120 or the content provider computing device 115 , and in response transmit the most up-to-date version of the content formatting script.
- the content publisher computing device 120 or the content provider computing device 115 can insert or otherwise embed the updated content formatting script into one or more information resources.
- the content publisher computing device 120 or the content provider computing device 115 when the content publisher computing device 120 or the content provider computing device 115 receives a request for an information resource from the client device 125 , the content publisher computing device 120 or the content provider computing device 115 transmit the respective information resource or content element along with the content formatting script to the client device 125 .
- FIG. 2 A is a block diagram depicting one implementation of a computing device (e.g., client device 125 ) in an application render restriction system 200 A, according to an illustrative implementation.
- the application render restriction system 200 A can include a client device 125 , an application 205 (e.g., web browser), an information resource 212 (e.g., web page), and an application render restrictor 220 .
- the application 205 can include, for example, an Internet browser, mobile application, or any other computer program capable of executing or otherwise invoking computer-executable instructions processed by the client device 125 , such as the computer-executable instructions included in the information resource 212 , one or more content elements 215 A-N, or the content formatting script 214 .
- the application 205 can include a document tree generator 206 , rendering tree generator 208 , and display module 210 .
- the information resource 212 can include one or more content elements 215 A-N and a content formatting script 214 . Each of the one or more content elements 215 A-N can include one or more formats.
- the application render restrictor 220 can be a script or computer program on the application 205 (e.g., plug-in for a web browser), another application, computer program, or process running on the client device 125 , or an application, computer program, or process running on another device such as the proxy device 150 .
- the application render restrictor 220 can include a content element identification module 225 , domain-based detection module 230 , visual-based detection module 235 , action-based detection module 240 , content render restriction module 245 , and a restricted format policy database 250 .
- the restricted format policy database 250 may maintain a domain-based detection policy, a visual-based detection policy, an action-based detection policy, and a content rendering restriction policy used by the various modules of the application render restrictor 220 to find and modify restricted content elements.
- the information resource 212 and the one or more content elements 215 A-N of the information resource 212 can be received via the network 105 from the data processing system 110 , the content publisher computing device 115 , or the content provider computing device 120 .
- the information resource 212 and the one or more content elements 215 A-N can be from the same source (e.g., the data processing system 110 ). In some implementation, the same source may be identified by a similar identifier.
- the information resource 212 may correspond to the URL “www.example.com/index.html” whereas one of the content elements 215 A-N corresponds to “www.example.com/q31.html.”
- the host names in the URL for the information resource 212 and the content element 215 A-N is the same.
- the information resource 212 and the one or more content elements 215 A-N can be from the different sources identified by different identifiers.
- the information resource 212 may correspond to the URL.
- the information resource 212 can include script, markup, or otherwise code processed by the application 205 and executed by the one or more processors of the client device 125 .
- the information resource 212 can include HyperText Markup Language (HTML), Extensible HyperText Markup Language (XHTML), Extensible Markup Language (XML), Cascading Style Sheets (CSS), and JAVASCRIPT, or any combination thereof.
- the information resource 212 can include one or more content elements 215 A-N, one or more corresponding style rules, and the content formatting script 214 . Each of the one or more content elements 215 A-N can correspond to a segment of the code of the information resource 212 .
- each of the content elements 215 A-N can include an HTML element.
- An HTML element can include, for example, a heading, body, paragraph, division, section, inline frame, image, canvas, applet, script, audio, video, table, and list, among others.
- Each of the content elements 215 A-N can include one or more formats.
- Each of the one or more formats of each of the content elements 215 A-N can include a corresponding attribute. Examples of attributes for content elements 215 A-N may include color, font, font size, font type, size, and position, among others.
- Each of the one more style rules e.g., CSS style rules
- the CSS style rule of the first format for the content element 215 A can specify that any text of the first content element 215 A is to be aligned to the center (e.g., “text-align: center”).
- the CSS style rule of the second format of the content element 215 A can specify that any text of the first content element 215 A is to be aligned to the right (e.g., “text-align: right”).
- the content formatting script 214 can select one or more formats for the one or more content elements 215 A-N for processing and rendering by the one or more modules of the application 205 .
- FIG. 2 B is a block diagram depicting an information resource 212 showing content elements 215 A-N on the application 205 displayed on the client device 125 , according to an illustrative implementation.
- the example in FIG. 2 B depicts a visual representation 200 B of the information resource 212 processed and rendered by the display module 210 of the application 205 and displayed on the client device 125 .
- the displayed information resource 212 ′ can include four displayed content elements 215 ′A- 215 ′D each corresponding to the respective content element 215 A-D of the information resource 212 .
- the first displayed content element 215 ′A can be, for example, a banner ad slot located generally across the top of the displayed information resource 212 ′.
- the second displayed content element 215 ′B can be, for example, a body text located generally in the middle of the displayed information resource 212 ′.
- the third displayed content element 215 ′C can be, for example, an inline frame including a video element toward the top right of the displayed information resource 212 ′.
- the fourth displayed content element 215 ′D can be, for example, an image including a link 245 generally located toward the bottom left of the displayed information resource 212 ′.
- the content element formatting script 214 can be executed by the application 205 to dynamically change, modify, or update the formatting of each of the one or more content elements 215 A-N of the information resource 212 .
- the content element formatting script 214 can change, modify, or update the one or more content elements 215 A-N of the information resource 212 arbitrarily or randomly.
- the application render restrictor 220 can in turn change, modify, or remove the display or rendering of the one or more content elements 215 A-N based on a domain-based policy, visual-based policy, or an action-based policy, thereby causing an alteration in the behavior of the displayed information resource 212 ′.
- the application render restrictor 220 can remove the content element 212 C corresponding to the displayed video content element 212 ′C, thereby removing the content element 212 ′C from display.
- the functionalities of the application render restrictor 220 are detailed below.
- the content element identification module 225 can identify the information resource 212 and the one or more content elements 215 A-N included in the information resource 212 . In some implementations, the content element identification module 225 can identify one or more code segments corresponding to the one or more content elements 215 A-N included in the information resource 212 . In some implementations, the content element identification module 225 can parse the information resource 212 to identify a content element type for each of the one or more content elements 215 A-N.
- the content element identification module 225 can identify that the information resource 215 includes an inline frame content element based on the HTML, tag “ ⁇ iframe>.”
- the element identification module 225 can parse the information resource 212 and can identify one or more function calls included in the information resource 212 for any of the one or more content elements 215 A-N. For example, the element identification module 225 can search the script of the information resource 212 for a string corresponding to a function call.
- the domain-based detection module 230 can determine whether any of the one or more content elements 215 A-N is a restricted content element based on a domain-based detection policy.
- the domain-based detection policy may be maintained in the restricted format policy database 250 .
- the domain-based detection module 230 can identify a host address one of the one or more content elements 215 A-N and a host address of the information resource 212 .
- the domain-based detection module 230 can determine whether the host address of the identified content element 215 A-N differs from the host address of the information resource 212 .
- the domain-based detection module 230 can determine that the respective content element 215 A-N is a restricted content element. In some implementations, by applying the domain-based detection policy, the action-based detection module 240 can identify that one of one or more content elements 215 A-N includes a link. The domain-based detection module 230 can determine that the link of the respective content element 215 A-N includes an address different from the host address of the information resource.
- the visual-based detection module 235 can determine whether any of the one or more content elements 215 A-N is a restricted content element based on a visual-based detection policy.
- the visual-based detection policy may be maintained by the restricted format policy database 250 .
- the visual-based detection module 235 can determine whether any of the one or more content elements 215 A-N includes one or more restricted properties or attributes specified by the visual-based detection policy.
- the visual-based detection module 235 can identify a dimension or a position of each of the content elements 215 A-N from the one or more graphical properties or attributes of each of the content elements 215 A-N of the information resource 212 . In some implementations, the visual-based detection module 235 can determine that the dimension or the position of each of the content elements 215 A-N of the information resource 212 matches one or more predesignated dimensions or one or more predesignated positions. The predesignated dimensions or predesignated positions may correspond to or be associated with content elements identified as restricted content elements.
- pre-designated dimensions may be those of online ads, such as 468 ⁇ 60 pixels (full banner ads), 160 ⁇ 600 pixels (wide skyscraper banner ads), and 720 ⁇ 300 (pop-under ads), among others.
- pre-designated positions may include top alignments, left alignments, right alignments, and bottom alignments, among others.
- the visual-based detection module 235 can identify a color value (e.g., RGB value, alphanumerical identifier, or HTML, color code) of each of the one or more content elements 215 A-N from the graphical properties or attributes of the respective content element 215 A-N. In some implementations, the visual-based detection module 235 can identify a color value of the information resource 212 . The visual-based detection module 235 can calculate a difference in color value between one and one or more other content elements 215 A-N.
- a color value e.g., RGB value, alphanumerical identifier, or HTML, color code
- the visual-based detection module 235 can determine that the one content element 215 A-N is a restricted content element.
- the visual-based detection module 235 can calculate a difference in color value between one of the content elements 215 A-N and the information resource 212 . If the difference in color value between the content element 215 A-N and the information resource 212 is above a predetermined threshold, the visual-based detection module 235 can determine that the respective content element 215 A-N is a restricted content element.
- the visual-based detection module 235 can identify one or more characters from each of the one or more content elements 215 A-N.
- the one or more characters may be from a text field or a metadata field of the respective content element 215 A-N.
- the visual-based detection module 235 can determine whether the one or more characters identified from each of the one or more content elements 215 A-N matches or is similar to one or more predesignated characters identified in restricted content elements.
- the one or more predesignated characters may be from the restricted format policy.
- the visual-based detection module 235 can determine or calculate a semantic similarity measure between the one or more characters identified from each of the one or more content elements 215 A-N and the one or more predesignated characters.
- the visual-based detection module 235 can apply an approximate string match algorithm to calculate the similarity measure.
- the visual-based detection module 235 can compare the semantic similarity measure to a threshold measure.
- the visual-based detection module 235 can identify the respective content element 215 A-N having the one or more characters as a restricted content element, responsive to determining that the semantic similarity measure is greater than the threshold measure.
- the visual-based detection module 235 can identify one or more image content elements 215 A-N of the information resource 212 based on the content element type identified by the content element identification module 225 .
- the visual-based detection module 235 can apply image recognition algorithms to determine whether the one or more image content elements 215 A-N includes a restricted visual element. Examples of image recognition algorithms include optical character recognition, object recognition, edge detection, feature detection (e.g., affiant feature detection), image matching algorithms, and image pattern recognition algorithms, among others.
- the visual-based detection module 235 can identify one or more character strings from the image content element 215 A-N by applying an optical character recognition algorithm.
- the visual-based detection module 235 can determine that at least one of the one more character strings matches one more predesignated character strings.
- the predesignated character strings can be maintained by the restricted format policy database 250 and can correspond to or be associated with character strings identified in restricted content elements. Examples of predesignated characters include “click here,” “purchase,” “sale,” “xxx,” and “$,” among others.
- the visual-based detection module 235 can identify one or more visual features from the image content element 215 A-N by applying feature detection or object recognition algorithms.
- the visual-based detection module 235 can determine that at least one of the one or more visual features matches one or more predesignated visual features.
- the predesignated visual features can be maintained by the restricted format policy database 250 and can correspond to or be associated with one or more visual features identified in restricted content elements. Examples of predesignated visual features can include user interface elements such as an exit button, minimize, or maximize button, among others.
- the action-based detection module 240 can determine whether any of the one or more content elements 215 A-N is a restricted content element based on an action-based detection policy.
- the action-based policy may be maintained by the restricted format policy database 250 .
- the action-based policy may include a list of events, actions, and transmissions, among others used to determine restricted content elements.
- the action-based detection module 240 can identify the function call from the information resource 212 parsed by the content element identification module 225 . In some implementations, by applying the action-based detection policy, the action-based detection module 240 can identify whether any of the one or more content elements 215 A-N includes a function call that is restricted.
- the third content element 215 C may include a function call to expand responsive to an event such as a mouse click.
- the action-based detection module 240 can determine that the function call is restricted by searching the action-based detection policy for a list of restricted function calls. Examples of restricted function calls include changes in graphical properties or attributes of the content element 215 A-N, such as dimension, position, color, and font, among others.
- the action-based detection module 240 can determine that one of the one or more content elements 215 A-N is a restricted content element.
- the restricted content element may be a pre-designated restricted type of content element.
- the action-based detection policy may indicate that applet, audio, or visual content elements are not to be rendered by the application 205 .
- the content element restriction module 245 can apply a content rendering restriction policy.
- the content rendering restriction policy may be maintained by the restricted format policy database 250 .
- the content element restriction module 245 can change, modify, or remove the respective content element 215 A-N.
- the content element restriction module 245 can alter a portion of the script of the information resource 212 corresponding to the restricted content element.
- the action-based detection module 240 can determine that link 245 of the fourth content element 215 D includes a host address different from the information resource 212 .
- the content element restriction module 245 can change the destination address of the link 245 , remove the link 245 from the fourth content element 215 D, or remove the fourth content element 215 D entirely.
- the content element restriction module 245 can add an additional content element to the information resource 212 as an overlay to occlude or otherwise restrict visibility of the respective content element 215 A-N. For example, in the example depicted in FIG.
- the content element restriction module 245 can insert another content element with the same dimension and position but different color as an overlay to occlude or otherwise restrict visibility of the first content element 215 ′A.
- the document tree generator 206 can process each of the one or more content elements 215 A-N of the information resource 212 to generate a document tree.
- the document tree generator 206 can parse the HTML markup of the information resource 212 to generate a Document Object Model (DOM) tree.
- the document tree can include one or more content objects associated with each other in a hierarchical manner.
- two content objects in the DOM tree can have a parent-child relationship in a tree data structure.
- Each of the content objects can correspond to one format for one of the one or more content elements 215 A-N.
- Each of the content objects in the document tree can include one or more properties or attributes.
- the generation of the document tree facilitates efficient and effective identification and modification of unauthorized content.
- FIG. 3 A is a block diagram depicting a document tree 300 A generated by the document tree generator 206 of the client device 125 based on the information resource 212 , according to an illustrative implementation.
- the document tree 300 A can include a document content object 305 , a head content object 310 , body content object 325 , meta content object 315 , link content object 320 , paragraph content object 330 including a text node 330 A, division content object 335 , an inline frame content object 340 , and an image content object 345 .
- the corresponding information resource 212 may have included a document content element (e.g., “ ⁇ html>” tag), head content element (e.g., “ ⁇ head>” tag), body content element (e.g., “ ⁇ body>” tag), meta content element (e.g., “ ⁇ meta>” tag), link content element (e.g., “ ⁇ link>” tag), paragraph content element (e.g., “ ⁇ p>” tag), division content element (e.g., “ ⁇ div>” tag), inline frame content element (e.g., “ ⁇ iframe>” tag), and an image content element (e.g., “ ⁇ img>” tag).
- a document content element e.g., “ ⁇ html>” tag
- head content element e.g., “ ⁇ head>” tag
- body content element e.g., “ ⁇ body>” tag
- meta content element e.g., “ ⁇ meta>” tag
- link content element e.g., “ ⁇ link>” tag
- the document content object 305 located at the head of the document tree 300 A can correspond to a document portion of the information resource 212 .
- the head content object 310 can include descriptive data associated with the information resource 212 .
- the meta content object 315 can include meta data associated with the information resource 212 .
- the link content object 320 can include source specifier for style rules associated with the content elements 215 A-N and the corresponding content objects for the information resource 212 .
- the body content object 325 can define a body of the document portion (e.g., displayed content element 215 ′B) of the information resource 212 .
- the paragraph content object 330 can include a text node 330 specifying inclusion of text for the information resource 212 .
- the division content object 335 can define a separate division or section of the body of the document of the information resource 212 .
- the inline frame content object 340 can define an inline frame to embed another content element 215 A-N or another information resource into the information resource 212 .
- the image content object 345 can define or reference an image to include into the information resource 212 .
- the content element identification module 225 can identify or access the document tree 300 A generated by the document tree generator 206 . In some implementations, the content element identification module 225 can identify the one or more content objects of the document tree 300 A. The content element identification module 225 can a content object type of each of the one or more content objects in the document tree 300 A. For example, as depicted in FIG. 3 A , the content element identification module 225 can identify that content object 345 is an image content object. The content element identification module 225 can determine, for each of the one or more content elements 215 A-N, a corresponding content object in the document tree 300 A. The content element identification module 225 can identify one or more properties or attributes of each of the one or more content objects of the document tree 300 A.
- the domain-based detection module 230 can efficiently determine whether any of the content objects of the document tree 300 A is a restricted content object.
- the domain-based detection module 230 can apply a domain-based detection policy.
- the domain-based detection policy may be maintained by the restricted format policy database 250 .
- the domain-based detection module 230 can traverse the document tree 300 A. While traversing the document tree 300 A, applying the domain-based detection policy, the domain-based detection module 230 can determine whether any of the one or more content objects is a restricted content object. In some implementations, applying the domain-based detection policy, the domain-based detection module 230 can determine whether any of the one or more content objects includes one or more restricted properties or attributes.
- the domain-based detection module 230 can determine whether any of the one or more content objects originates from a host different from the information resource 212 based on a host name for the content object and the host name for the information resource 212 . In some implementations, applying the domain-based detection policy, the domain-based detection module 230 can determine whether any of the one or more content objects includes a link including a host name different from the host name of the information resource 212 . For example, the domain-based detection module 230 can identify that the content object 330 include a link including a host name different from the information resource 212 . Based on the difference in host names, the domain-based detection module 230 can determine that the content object 330 is a restricted content object.
- the visual-based detection module 235 can determine whether any of the content objects of the document tree 300 A is a restricted content object.
- the visual-based detection module 235 can apply a visual-based detection policy.
- the visual-based detection policy may be maintained by the restricted format policy database 250 .
- the visual-based detection module 235 can traverse the document tree 300 A. While traversing the document tree 300 A, applying the visual-based detection policy, the visual-based detection module 235 can determine whether any of the one or more content objects is a restricted content object.
- the visual-based detection module 230 can determine whether any of the one or more content objects includes one or more restricted properties or attributes specified by the visual-based detection policy. In some implementations, the visual-based detection module 230 can identify a dimension or a position of the content element from the one or more graphical properties or attributes of each of the content objects of the document tree 300 A. In some implementations, the visual-based detection module 230 can determine that the dimension or the position of each of the content object of the document tree 300 A matches one or more predesignated dimensions or one or more predesignated positions. The predesignated dimensions or predesignated positions may correspond to or be associated with content elements identified as restricted content elements.
- pre-designated dimensions may be those of online ads, such as 468 ⁇ 60 pixels (full banner ads), 160 ⁇ 600 pixels (wide skyscraper banner ads), and 720 ⁇ 300 (pop-under ads), among others.
- pre-designated positions may include top alignments, left alignments, right alignments, and bottom alignments, among others.
- the visual-based detection module 235 can identify a color value (e.g., RGB value, alphanumerical identifier, or HTML, color code) of each of the one or more content objects from the graphical properties or attributes of the respective content object of the document tree 300 A. In some implementations, the visual-based detection module 235 can identify a color value of the information resource 212 or from the document content object 305 of document tree 300 A. The visual-based detection module 235 can calculate a difference in color value between one and one or more other content objects of the document tree 300 A.
- a color value e.g., RGB value, alphanumerical identifier, or HTML, color code
- the visual-based detection module 235 can determine that the one content objects is a restricted content object.
- the visual-based detection module 235 can calculate a difference in color value between one of the content objects and the information resource 212 . If the difference in color value between the content object and the information resource 212 is above a predetermined threshold, the visual-based detection module 235 can determine that the respective content objects is a restricted content object.
- the visual-based detection module 235 can identify one or more characters from each of the one or more content objects of the document tree 300 A.
- the one or more characters may be from a text field or a metadata field of the respective content object.
- the visual-based detection module 235 can determine whether the one or more characters identified from each of the one or more content object matches or is similar to one or more predesignated characters identified in restricted content elements.
- the one or more predesignated characters may be from the restricted format policy.
- the visual-based detection module 235 can determine or calculate a semantic similarity measure between the one or more characters identified from each of the one or more content objects and the one or more predesignated characters.
- the visual-based detection module 235 can apply an approximate string match algorithm to calculate the similarity measure.
- the visual-based detection module 235 can compare the semantic similarity measure to a threshold measure.
- the visual-based detection module 235 can identify the respective content object having the one or more characters as a restricted content element, responsive to determining that the semantic similarity measure is greater than the threshold measure.
- the visual-based detection module 235 can identify one or more image content objects of the document tree 300 A based on the content object type identified by the content element identification module 225 .
- the visual-based detection module 235 can access or retrieve images associated with the one or more image content objects of the document tree 300 A.
- the visual-based detection module 235 can apply image recognition algorithms to determine whether an image included in one or more image content objects (e.g., image content object 345 in FIG. 3 A ) includes a restricted visual element. Examples of image recognition algorithms include optical character recognition, object recognition, edge detection, feature detection (e.g., affiant feature detection), image matching algorithms, and image pattern recognition algorithms, among others.
- the visual-based detection module 235 can identify one or more character strings from the image content object by applying an optical character recognition algorithm. The visual-based detection module 235 can determine that at least one of the one more character strings matches one more predesignated character strings.
- the predesignated character strings can be maintained by the restricted format policy database 250 and can correspond to or be associated with character strings identified in restricted content elements. Examples of predesignated characters include “click here,” “purchase,” “sale,” “xxx,” and “$,” among others.
- the visual-based detection module 235 can identify one or more visual features from the image content object by applying feature detection or object recognition algorithms.
- the visual-based detection module 235 can determine that at least one of the one or more visual features matches one or more predesignated visual features.
- the predesignated visual features can be maintained by the restricted format policy database 250 and can correspond to or be associated with one or more visual features identified in restricted content elements. Examples of predesignated visual features can include user interface elements such as an exit button, minimize, or maximize button, among others.
- the action-based detection module 240 can determine whether any of the content objects of the document tree 300 A is a restricted content object.
- the action-based detection module 240 can apply an action-based detection policy.
- the action-based detection policy may be maintained by the restricted format policy database 250 .
- the action-based detection module 240 can traverse the document tree 300 A. While traversing the document tree 300 A, applying the action detection policy, the action-based detection module 240 can determine whether any of the one or more content objects is a restricted content object.
- by applying the action-based detection policy the action-based detection module 240 can determine that one of the one or more content objects of the document tree 300 A is a restricted content element.
- the restricted content element may be a pre-designated restricted type of content element.
- the action-based detection policy may indicate that applet, audio, or visual content elements are not to be rendered by the application 205 .
- the content element restriction module 245 can apply a content rendering restriction policy.
- the content element restriction module 245 can change, modify, or remove the respective content object in the document tree 300 A.
- the content element restriction module 245 can change, modify, or remove the content object in the document tree 300 A.
- the domain-based detection module 240 can determine that the text node 330 A include a link that includes a host address different from the information resource 212 .
- the content element restriction module 245 can change the destination address of the text node 330 A, remove the link in the text of the text node 330 A, or remove the text node 330 A from the document tree 300 A entirely.
- the content element restriction module 245 can add an additional content object to the document tree 300 A as an overlay to occlude or otherwise restrict visibility of the respective content object when displayed by the client device 125 . For example, with reference to FIG.
- the content element restriction module 245 can insert another content object with the same dimension and position but different color as an overlay to occlude or otherwise restrict visibility of the first content element 215 ′ A when displayed.
- the document tree generator 206 can identify a subset of content objects of the document tree 300 A that is to be rendered and a subset of content objects of the document tree 300 A that is not to be rendered.
- the subset of content objects to be rendered are content objects 325 , 330 , 335 , and 345 and the subset of content objects not to be rendered are content objects 305 , 310 , 315 , 320 , and 340 .
- the document tree generator 206 can identify the link content object 320 to import style rules (e.g., CSS style sheets) specified for the information resource 212 .
- the document tree generator 206 can remove the subset of content objects that is not to be rendered from the document tree 300 A.
- the document tree generator 206 can match each of the content objects in subset of the content objects that is to be rendered with the style rule specified in the information resource 212 to generate an object model.
- FIG. 3 B is a block diagram depicting an object model 300 B with each content object matched to a style rule by the document tree generator 206 based on the information resource 212 , according to an illustrative implementation.
- the object model 300 B can include a body content object 325 ′ matched with style rule 360 A, a paragraph content object 330 ′ matched with style rule 360 B, inline frame content object 340 ′ matched with style rule 360 C, and image content object 345 ′ matched with style rule 360 D.
- Each of the style rules 360 A-D can specify attributes or properties of the corresponding content objects 325 ′, 330 ′, 340 ′, and 345 ′.
- the style rule 360 B can specify that the text appearing in paragraph content object 330 ′ is to be colored red.
- the content element identification module 225 can identify or access the object model 300 B generated by the document tree generator 206 .
- the content element identification module 225 can identify the one or more content objects of the object model 300 B.
- the content element identification module 225 can a content object type of each of the one or more content objects in the object model 300 B. For example, as depicted in FIG. 3 A , the content element identification module 225 can identify that content object 345 is an image content object.
- the content element identification module 225 can determine, for each of the one or more content elements 215 A-N, a corresponding content object in the object model 300 B.
- the content element identification module 225 can identify one or more properties or attributes of each of the one or more content objects of the object model 300 B.
- the domain-based detection module 230 can determine whether any of the content objects of the object model 300 B is a restricted content object.
- the domain-based detection module 230 can apply a domain-based detection policy.
- the domain-based detection policy may be maintained by the restricted format policy database 250 .
- the domain-based detection module 230 can traverse the object model 300 B. While traversing the object model 300 B, applying the domain-based detection policy, the domain-based detection module 230 can determine whether any of the one or more content objects is a restricted content object. In some implementations, applying the domain-based detection policy, the domain-based detection module 230 can determine whether any of the one or more content objects includes one or more restricted properties or attributes.
- the domain-based detection module 230 can determine whether any of the one or more content objects originates from a host different from the information resource 212 based on a host name for the content object and the host name for the information resource 212 . In some implementations, applying the domain-based detection policy, the domain-based detection module 230 can determine whether any of the one or more content objects includes a link including a host name different from the host name of the information resource 212 . For example, the domain-based detection module 230 can identify that the content object 330 include a link including a host name different from the information resource 212 . Based on the difference in host names, the domain-based detection module 230 can determine that the content object 330 is a restricted content object.
- the visual-based detection module 235 can determine whether any of the content objects of the object model 300 B is a restricted content object.
- the visual-based detection module 235 can apply a visual-based detection policy.
- the visual-based detection policy may be maintained by the restricted format policy database 250 .
- the visual-based detection module 235 can traverse the object model 300 B. While traversing the object model 300 B, applying the visual-based detection policy, the visual-based detection module 235 can determine whether any of the one or more content objects is a restricted content object based on the corresponding style rule in the object model 300 B.
- the visual-based detection module 230 can determine whether any of style rules 360 A-D matched to the one or more content objects includes one or more restricted properties or attributes specified by the visual-based detection policy. In some implementations, the visual-based detection module 230 can identify a dimension or a position of the content element from the one or more graphical properties or attributes of the style rules matched to each of the content objects of the object model 300 B. In some implementations, the visual-based detection module 230 can determine that the dimension or the position of each of the content object of the object model 300 B matches one or more predesignated dimensions or one or more predesignated positions. The predesignated dimensions or predesignated positions may correspond to or be associated with content elements identified as restricted content elements.
- pre-designated dimensions may be those of online ads, such as 468 ⁇ 60 pixels (full banner ads), 160 ⁇ 600 pixels (wide skyscraper banner ads), and 720 ⁇ 300 (pop-under ads), among others.
- pre-designated positions may include top alignments, left alignments, right alignments, and bottom alignments, among others.
- the visual-based detection module 235 can identify a color value (e.g., RGB value, alphanumeric designator, or HTML color value) of each of the one or more content objects from the graphical properties or attributes of the style rules 360 A-D matched to the respective content object of the object model 300 B.
- the visual-based detection module 235 can identify a color value of the information resource 212 or from the body content object 325 ′ of object model 300 B.
- the visual-based detection module 235 can calculate a difference in color value between one and one or more other content objects of the object model 300 B.
- the visual-based detection module 235 can determine that the one content objects is a restricted content object.
- the visual-based detection module 235 can calculate a difference in color value between one of the content objects and the information resource 212 . If the difference in color value between the content object and the information resource 212 is above a predetermined threshold, the visual-based detection module 235 can determine that the respective content objects is a restricted content object.
- the visual-based detection module 235 can identify one or more image content objects of the object model 300 B based on the content object type identified by the content element identification module 225 .
- the visual-based detection module 235 can access or retrieve images associated with the one or more image content objects of the object model 300 B.
- the visual-based detection module 235 can apply image recognition algorithms to determine whether an image included in one or more image content objects (e.g., image content object 345 in FIG. 3 A ) includes a restricted visual element. Examples of image recognition algorithms include optical character recognition, object recognition, edge detection, feature detection (e.g., affiant feature detection), image matching algorithms, and image pattern recognition algorithms, among others.
- the visual-based detection module 235 can identify one or more character strings from the image content object by applying an optical character recognition algorithm. The visual-based detection module 235 can determine that at least one of the one more character strings matches one more predesignated character strings.
- the predesignated character strings can be maintained by the restricted format policy database 250 and can correspond to or be associated with character strings identified in restricted content elements. Examples of predesignated characters include “click here,” “purchase,” “sale,” “xxx,” and “$,” among others.
- the visual-based detection module 235 can identify one or more visual features from the image content object by applying feature detection or object recognition algorithms.
- the visual-based detection module 235 can determine that at least one of the one or more visual features matches one or more predesignated visual features.
- the predesignated visual features can be maintained by the restricted format policy database 250 and can correspond to or be associated with one or more visual features identified in restricted content elements. Examples of predesignated visual features can include user interface elements such as an exit button, minimize, or maximize button, among others.
- the action-based detection module 240 can determine whether any of the content objects of the object model 300 B is a restricted content object.
- the action-based detection module 240 can apply an action-based detection policy.
- the action-based detection policy may be maintained by the restricted format policy database 250 .
- the action-based detection module 240 can traverse the object model 300 B. While traversing the object model 300 B, applying the action detection policy, the action-based detection module 240 can determine whether any of the one or more content objects is a restricted content object.
- by applying the action-based detection policy the action-based detection module 240 can determine that one of the one or more content objects of the object model 300 B is a restricted content element.
- the restricted content element may be a pre-designated restricted type of content element.
- the action-based detection policy may indicate that applet, audio, or visual content elements are not to be rendered by the application 205 .
- the content element restriction module 245 can apply the content rendering restriction policy.
- the content element restriction module 245 can change, modify, or remove the respective content object or the style rule 360 A-D matched to the content object in the object model 300 B.
- the content element restriction module 245 can change, modify, or remove the content object or the style rule 360 A-D matched to the content object in the object model 300 B.
- the content element restriction module 245 can set a display property of a style rule matched to one of the content objects in the object model 300 B to null.
- the content element restriction module 245 can add an additional content object with a corresponding matched style rule 360 A-D to the object model 300 B as an overlay to occlude or otherwise restrict visibility of the respective content object when displayed by the client device 125 .
- the visual-based detection module 235 determines that the content object of the object model 300 B corresponding to the first content element 215 ′A is a restricted content object based on the dimension, position, or color tuple difference
- the content element restriction module 245 can insert another content object with the same dimension and position but different color as an overlay to occlude or otherwise restrict visibility of the first content element 215 ′ A when displayed.
- the rendering tree generator 208 can generate a rendering tree for rendering the information resource 212 .
- the rendering tree generator 208 can include a layout engine, rendering engine, or any module, engine, or process of the application 205 to prepare rendering of the information resource 212 on a display of the client device 125 .
- the rendering tree generator 208 can generate the rendering tree based on the object model 300 B or the document tree 300 A.
- the rendering tree generator 208 can generate one or more render properties for each of the content objects and the matched style rule 360 A-D in the object model 300 B.
- the rendering tree generator 208 can generate the one or more properties based on the properties or attributes specified in the respective content object in the document tree 300 A or the matched style rule 360 A-D in the object model 300 B.
- the rendering tree can include one or more nodes associated with each other in a hierarchical manner. For example, two nodes can have a parent-child relationship in a tree data structure. Each of the nodes in the rendering tree can correspond to a content element 215 A-N of the information resource 212 that is to be rendered. Each of the nodes in the render can be matched to one or more rendering properties.
- FIG. 3 C is a block diagram depicting a rendering tree 300 C generated based on the object model 300 B, according to an illustrative implementation.
- the rendering tree 300 C can include a body node 325 ′′, paragraph node 330 ′′, text node 330 A′′, inline frame node 345 ′′, division node 335 ′′, and image node 350 ′′.
- the nodes of the rendering tree 300 C may correspond to at least a subset of the content elements 215 A-N of the information resource 212 .
- Some of the nodes of the rendering tree 300 C can have a rendering property 365 A-C specifying rendering information for the respective node 330 ′′, 345 ′′, and 350 ′′.
- the rendering information of the rendering properties 365 A-C can be applicable to the corresponding node and children node of the corresponding node.
- the rendering information in rendering property 365 A may be applicable to both paragraph node 330 ′′ and text node 330 A′′.
- the content element identification module 225 can identify or access the rendering tree 300 C generated by the rendering tree generator 208 . In some implementations, the content element identification module 225 can identify the one or more nodes of the rendering tree 300 C. The content element identification module 225 can identify a node type of each of the one or more nodes in the rendering tree 300 C. For example, as depicted in FIG. 3 C , the content element identification module 225 can identify that node 345 is an image node. The content element identification module 225 can determine, for each of the one or more content elements 215 A-N, a corresponding node in the rendering tree 300 C. The content element identification module 225 can identify one or more properties or attributes of each of the one or more nodes of the rendering tree 300 C.
- the visual-based detection module 235 can determine whether any of the nodes of the rendering tree 300 C is a restricted node.
- the visual-based detection module 235 can apply a visual-based detection policy.
- the visual-based detection policy may be maintained by the restricted format policy database 250 .
- the visual-based detection module 235 can traverse the rendering tree 300 C. While traversing the rendering tree 300 C, applying the visual-based detection policy, the visual-based detection module 235 can determine whether any of the one or more nodes is a restricted node.
- the visual-based detection module 235 can identify the one or more rendering properties for each of the nodes in the rendering tree 300 C.
- the visual-based detection module 230 can determine whether any of the one or more rendering properties corresponding to each of the one or more nodes includes one or more restricted properties or attributes specified by the visual-based detection policy. In some implementations, the visual-based detection module 230 can identify a dimension or a position of the content element from the one or more graphical properties or attributes of the one or more rendering properties for each of the nodes of the rendering tree 300 C. In some implementations, the visual-based detection module 230 can determine that the dimension or the position of each of the node of the rendering tree 300 C matches one or more predesignated dimensions or one or more predesignated positions. The predesignated dimensions or predesignated positions may correspond to or be associated with content elements identified as restricted content elements.
- pre-designated dimensions may be those of online ads, such as 468 ⁇ 60 pixels (full banner ads), 160 ⁇ 600 pixels (wide skyscraper banner ads), and 720 ⁇ 300 (pop-under ads), among others.
- pre-designated positions may include top alignments, left alignments, right alignments, and bottom alignments, among others.
- the visual-based detection module 235 can identify a color value (e.g., RGB value, alphanumerical identifier, or HTML, color code) from the one or more rendering properties for each of the one or more nodes from the graphical properties or attributes of the one or more rendering properties for the respective node of the rendering tree 300 C.
- the visual-based detection module 235 can identify a color value of the information resource 212 or from the body node 325 ′ of rendering tree 300 C.
- the visual-based detection module 235 can calculate a difference in color value between one and one or more other nodes of the rendering tree 300 C.
- the visual-based detection module 235 can determine that the one node is a restricted node.
- the visual-based detection module 235 can calculate a difference in color value between one of the nodes and the information resource 212 . If the difference in color value between the node and the information resource 212 is above a predetermined threshold, the visual-based detection module 235 can determine that the respective node is a restricted node.
- the visual-based detection module 235 can identify one or more image nodes of the rendering tree 300 C based on the node type identified by the content element identification module 225 .
- the visual-based detection module 235 can access or retrieve images associated with the one or more image nodes of the rendering tree 300 C.
- the visual-based detection module 235 can apply image recognition algorithms to determine whether an image included in one or more image nodes (e.g., image node 345 in FIG. 3 A ) includes a restricted visual element. Examples of image recognition algorithms include optical character recognition, object recognition, edge detection, feature detection (e.g., affiant feature detection), image matching algorithms, and image pattern recognition algorithms, among others.
- the visual-based detection module 235 can identify one or more character strings from the image node by applying an optical character recognition algorithm. The visual-based detection module 235 can determine that at least one of the one more character strings matches one more predesignated character strings.
- the predesignated character strings can be maintained by the restricted format policy database 250 and can correspond to or be associated with character strings identified in restricted content elements. Examples of predesignated characters include “click here,” “purchase,” “sale,” “xxx,” and “$,” among others.
- the visual-based detection module 235 can identify one or more visual features from the image node by applying feature detection or object recognition algorithms.
- the visual-based detection module 235 can determine that at least one of the one or more visual features matches one or more predesignated visual features.
- the predesignated visual features can be maintained by the restricted format policy database 250 and can correspond to or be associated with one or more visual features identified in restricted content elements. Examples of predesignated visual features can include user interface elements such as an exit button, minimize, or maximize button, among others.
- the action-based detection module 240 can determine whether any of the nodes of the rendering tree 300 C is a restricted node.
- the action-based detection module 240 can apply an action-based detection policy.
- the action-based detection policy may be maintained by the restricted format policy database 250 .
- the action-based detection module 240 can traverse the rendering tree 300 C. While traversing the rendering tree 300 C, applying the action detection policy, the action-based detection module 240 can determine whether any of the one or more nodes is a restricted node.
- by applying the action-based detection policy the action-based detection module 240 can determine that one of the one or more nodes of the rendering tree 300 C is a restricted content element.
- the restricted content element may be a pre-designated restricted type of content element.
- the action-based detection policy may indicate that applet, audio, or visual content elements are not to be rendered by the application 205 .
- the content element restriction module 245 can apply the content rendering restriction policy.
- the content element restriction module 245 can change, modify, or remove the respective node or the respective one or more rendering properties in the rendering tree 300 C.
- the content element restriction module 245 can change, modify, or remove the node or the respective one or more rendering properties in the rendering tree 300 C.
- the content element restriction module 245 can set a delete a node or a corresponding parent node from the rendering tree 300 C.
- the content element restriction module 245 can add an additional node to the rendering tree 300 C as an overlay to occlude or otherwise restrict visibility of the respective node when displayed by the client device 125 .
- the content element restriction module 245 can insert another node with the same dimension and position but different color as an overlay to occlude or otherwise restrict visibility of the first content element 215 ′ A when displayed.
- the rendering tree generator 208 can process a layout based on the rendering tree 300 C.
- the layout can include one or more sub-layouts in a list, array, or tree data structure.
- Each of the one or more sub-layouts can correspond to a node on the rendering tree 300 C.
- Each of the one or more sub-layouts can include rendering information specifying how the node corresponding to one of the content elements 215 A-N is to be rendered on a display of the client device 125 .
- a sub-layout may specify the absolute pixel positions a node is to occupy on the display.
- the rendering tree generator 208 can traverse the nodes of the rendering tree 300 C.
- the rendering tree generator 208 can generate the corresponding sub-layout based on the one or more rendering properties for the node.
- the display module 210 can additionally process the layout generated by the rendering tree generator 208 for displaying the information resource 212 on the client device 125 .
- the content element identification module 225 can identify or access the layout generated by the rendering tree generator 208 .
- the content element identification module 225 can identify the one or more sub-layouts of the layout.
- the content element identification module 225 can be a sub-layout type of each of the one or more sub-layouts in the layout. For example, the content element identification module 225 can identify that one of the sub-layouts corresponds to an image sub-layout.
- the content element identification module 225 can determine, for each of the one or more content elements 215 A-N, a corresponding sub-layout in the layout.
- the content element identification module 225 can identify one or more properties or attributes of each of the one or more sub-layouts of the layout.
- the visual-based detection module 235 can determine whether any of the sub-layouts of the layout is a restricted sub-layout.
- the visual-based detection module 235 can apply a visual-based detection policy.
- the visual-based detection policy may be maintained by the restricted format policy database 250 .
- the visual-based detection module 235 can traverse the layout. While traversing the layout, applying the visual-based detection policy, the visual-based detection module 235 can determine whether any of the one or more sub-layouts is a restricted sub-layout.
- the visual-based detection module 235 can identify the one or more rendering properties for each of the sub-layouts in the layout.
- the visual-based detection module 230 can determine whether any of the one or more rendering properties corresponding to each of the one or more sub-layouts includes one or more restricted properties or attributes specified by the visual-based detection policy. In some implementations, the visual-based detection module 230 can identify a dimension or a position of the content element from the one or more graphical properties or attributes of the one or more rendering properties for each of the sub-layouts of the layout. In some implementations, the visual-based detection module 230 can determine that the dimension or the position of each of the sub-layout of the layout matches one or more predesignated dimensions or one or more predesignated positions.
- predesignated dimensions or predesignated positions may correspond to or be associated with content elements identified as restricted content elements.
- pre-designated dimensions may be those of online ads, such as 468 ⁇ 60 pixels (full banner ads), 160 ⁇ 600 pixels (wide skyscraper banner ads), and 720 ⁇ 300 (pop-under ads), among others.
- Examples of pre-designated positions may include top alignments, left alignments, right alignments, and bottom alignments, among others.
- the visual-based detection module 235 can identify a color value (e.g., RGB value, alphanumerical identifier, or HTML, color code) from the one or more rendering properties for each of the one or more sub-layouts from the graphical properties or attributes of the one or more rendering properties for the respective sub-layout of the layout.
- the visual-based detection module 235 can identify a color value of the information resource 212 or from the body sub-layout 325 ′ of layout. The visual-based detection module 235 can calculate a difference in color value between one and one or more other sub-layouts of the layout.
- the visual-based detection module 235 can determine that the one sub-layout is a restricted sub-layout.
- the visual-based detection module 235 can calculate a difference in color value between one of the sub-layouts and the information resource 212 . If the difference in color value between the sub-layout and the information resource 212 is above a predetermined threshold, the visual-based detection module 235 can determine that the respective sub-layout is a restricted sub-layout.
- the visual-based detection module 235 can identify one or more image sub-layouts of the layout based on the sub-layout type identified by the content element identification module 225 .
- the visual-based detection module 235 can access or retrieve images associated with the one or more image sub-layouts of the layout.
- the visual-based detection module 235 can apply image recognition algorithms to determine whether an image included in one or more image sub-layouts (e.g., image sub-layout 345 in FIG. 3 A ) includes a restricted visual element. Examples of image recognition algorithms include optical character recognition, object recognition, edge detection, feature detection (e.g., affiant feature detection), image matching algorithms, and image pattern recognition algorithms, among others.
- the visual-based detection module 235 can identify one or more character strings from the image sub-layout by applying an optical character recognition algorithm. The visual-based detection module 235 can determine that at least one of the one more character strings matches one more predesignated character strings.
- the predesignated character strings can be maintained by the restricted format policy database 250 and can correspond to or be associated with character strings identified in restricted content elements. Examples of predesignated characters include “click here,” “purchase,” “sale,” “xxx,” and “$,” among others.
- the visual-based detection module 235 can identify one or more visual features from the image sub-layout by applying feature detection or object recognition algorithms.
- the visual-based detection module 235 can determine that at least one of the one or more visual features matches one or more predesignated visual features.
- the predesignated visual features can be maintained by the restricted format policy database 250 and can correspond to or be associated with one or more visual features identified in restricted content elements. Examples of predesignated visual features can include user interface elements such as an exit button, minimize, or maximize button, among others.
- the action-based detection module 240 can determine whether any of the sub-layouts of the layout is a restricted sub-layout.
- the action-based detection module 240 can apply an action-based detection policy.
- the action-based detection policy may be maintained by the restricted format policy database 250 .
- the action-based detection module 240 can traverse the layout. While traversing the layout, applying the action detection policy, the action-based detection module 240 can determine whether any of the one or more sub-layouts is a restricted sub-layout.
- by applying the action-based detection policy the action-based detection module 240 can determine that one of the one or more sub-layouts of the layout is a restricted content element.
- the restricted content element may be a pre-designated restricted type of content element.
- the action-based detection policy may indicate that applet, audio, or visual content elements are not to be rendered by the application 205 .
- the content element restriction module 245 can apply the content rendering restriction policy.
- the content element restriction module 245 can change, modify, or remove the respective sub-layout or the respective one or more rendering properties in the layout.
- the content element restriction module 245 can change, modify, or remove the sub-layout or the respective one or more rendering properties in the layout.
- the content element restriction module 245 can add an additional sub-layout to the layout as an overlay to occlude or otherwise restrict visibility of the respective sub-layout when displayed by the client device 125 . For example, with reference to FIG.
- the content element restriction module 245 can insert another sub-layout with the same dimension and position but different color as an overlay to occlude or otherwise restrict visibility of the first content element 215 ′ A when displayed.
- the display module 210 can process the altered document tree 300 A, object model 300 B, rendering tree 300 C, or layout.
- the display module 210 can process the document tree 300 A, object model 300 B, rendering tree 300 C, or layout and render the information resource 212 ′ for display on the client device 125 .
- the action-based detection module 240 can monitor for one or more processes of the application 205 .
- the action-based detection module 240 can detect one or more function calls by the application 205 while processing the information resource 212 .
- the content element formatting script 214 may cause changes to any of the one or more content elements 215 A-N of the information resource 212 , one or more content objects of the document tree 300 A, one or more content objects or a matched style rule of the one or more content objects of the object model 300 B, one or more nodes of the rendering tree 300 C, or the sub-layouts of the layout, thereby resulting in one or more function calls in the application 205 .
- the content element formatting script 214 may modify the one or more content elements 215 A-N from one format to another format by setting a different size, position, or color, among other visual characteristics.
- the action-based detection module 240 can identify a change in the one or more graphical attributes or properties of the one or more content elements 215 A-N of the information resource 212 , one or more content objects of the document tree 300 A, one or more content objects or a matched style rule of the one or more content objects of the object model 300 B, one or more nodes of the rendering tree 300 C, or the sub-layouts of the layout.
- the action-based detection module 240 can detect a regenerate command for the information resource 212 .
- the regenerate command may be indicative of one or more changes or alterations in the rendering of the information resource 212 by the client device 125 .
- the regenerate command may be generated by the application 205 of the client device 125 responsive to an insertion or addition of a new content element to the information resource 212 , an insertion or addition of a new content object to the document tree 300 A, an insertion or addition of a new content object or a change or modification in a style rule in the object model 300 B, an insertion or addition of a new node or a change or modification in one or more rendering properties in the rendering tree 300 C, or insertion or addition of a new sub-layout or a change or modification in one or more sub-layouts in the layout.
- the action-based detection module 240 can identify the one or more content elements 215 A-N corresponding to or associated with the respective process. For example, the action-based detection module 240 can detect function calls made by an event listener and identify a button content element on the information resource 212 based on the detected function calls.
- the action-based detection module 240 can identify the one or more content elements 215 A-N corresponding to or associated with the change in the one or more graphical attributes or properties of the one or more content elements 215 A-N of the information resource 212 , one or more content objects of the document tree 300 A, one or more content objects or a matched style rule of the one or more content objects of the object model 300 B, one or more nodes of the rendering tree 300 C, or the sub-layouts of the layout.
- the action-based detection module 240 can identify the one or more content elements 215 A-N, content objects of the document tree 300 A, style rules of the object model 300 B, nodes in the rendering tree 300 C, and sub-layouts in the layout corresponding to or associated with the regenerate command.
- the action-based detection module 240 can determine whether the associated process is a restricted process.
- the action-based detection policy may list one or more processes that may be restricted. Examples of restricted processes include change in size, change in position, and change in color, among others. If the process is not a restricted process, the action-based detection module 240 can allow or permit the process to continue.
- the display module 210 of the application 205 can update the information resource with the process executed and display the newly updated information resource.
- the action-based detection module 240 can terminate the process.
- the action-based detection module 240 can interface with the domain-based detection module 230 or the visual-based detection module 235 to determine whether the process is permitted by repeating previously described functionalities.
- the action-based detection module 240 can modify, change, or remove the respective content elements 215 A-N.
- the action-based detection module 240 can modify, change, or remove the identified one or more content objects of the document tree 300 A, one or more content objects or a matched style rule of the one or more content objects of the object model 300 B, one or more nodes of the rendering tree 300 C, or the sub-layouts of the layout. For example, if a change in size is detected for one of the nodes of the rendering tree, the action-based detection module 240 can identify the previous size from the previous rendering properties for the respective node. In this example, the action-based detection module 240 can set the size to the previous size.
- the action-based detection module 240 can monitor for one or more transmissions from the client device 125 caused by the application 205 .
- the one or more transmissions can include a pingback generated from the instructions for one or more of the content elements 215 A-N.
- the action-based detection module 240 can detect a request from the one or more transmissions from the client device 125 .
- the request can include a request for another information resource or a request for additional content elements, among others. For example, if the action-based detection module 240 resided in the proxy device 150 , the action-based detection module 240 can intercept the one or more transmissions from the client device 125 and detect a request from the one or more transmissions.
- the action-based detection module 240 can identify the one or more content elements 215 A-N corresponding to or associated with the transmission of the pingback or request. In some implementations, the action-based detection module 240 can change, modify, or otherwise remove the one or more content elements 215 A-N corresponding to or associated with the transmission of the pingback or request.
- the pingback or request may include an identifier of the respective content element 215 A-N. Using the identifier, the action-based detection module 240 can identify the respective content element 215 A-N.
- the application render restrictor 220 including the content element identification module 225 , the domain-based detection module 230 , the visual-based detection module 235 , action-based detection module 240 , and the content element restriction module 245 can repeat the above detailed functionality any number of times.
- the application render restrictor 220 can iteratively re-run the functionalities of the content element identification module 225 , the domain-based detection module 230 , the visual-based detection module 235 , action-based detection module 240 , and the content element restriction module 245 for each of the content elements 215 A-N of the information resource 212 .
- the application render restrictor 220 can iteratively re-run the functionalities of the content element identification module 225 , the domain-based detection module 230 , the visual-based detection module 235 , action-based detection module 240 , and the content element restriction module 245 , whenever detecting a process or transmission by the application 205 .
- FIG. 4 is a flow diagram depicting a method 400 of attributing a scroll event on an application.
- the functionality described herein with respect to method 400 can be performed or otherwise executed by the data processing system 110 , client device 125 , or proxy device 150 as shown in FIG. 1 , the content render restriction system as shown in FIG. 2 , or a computing device as shown in FIG. 6 , or any combination thereof.
- a computing device can identify an information resource including a content element (BLOCK 405 ).
- the computing device can determine that the content element corresponds to a restricted content element by applying at least one of an action-based detection policy or a visual-based detection policy (BLOCK 410 ).
- the computing device can modify, by applying a content rendering restriction policy, the information resource to alter rendering of the content element (BLOCK 415 ).
- the computing device can identify an information resource including a content element (BLOCK 405 ).
- the information resource and the one or more content elements (such as the first content element) of the information resource can be received via the network from an external server (e.g., the data processing system 110 , the content publisher computing device 115 , or the content provider computing device 120 ).
- the information resource and the one or more content elements can be from the same source (e.g., the data processing system 110 ).
- the same source may be identified by a similar identifier.
- the information resource may correspond to the URL “www.example.com/index.html” whereas one of the content elements corresponds to “www.example.com/q31.html.”
- the host names in the URL for the information resource and the content element is the same.
- the information resource and the one or more content elements can be from the different sources identified by different identifiers.
- the information resource may correspond to the URL.
- the information resource can include script, markup, or otherwise code processed by the application and executed by the one or more processors of the application.
- the information resource can include HyperText Markup Language (HTML), Extensible HyperText Markup Language (XHTML), Extensible Markup Language (XML), Cascading Style Sheets (CSS), and JAVASCRIPT, or any combination thereof.
- the information resource can include one or more content elements, one or more corresponding style rules, and the content formatting script. Each of the one or more content elements can correspond to a segment of the code of the information resource. In some implementations, each of the content elements can include an HTML element.
- An HTML element can include, for example, a heading, body, paragraph, division, section, inline frame, image, canvas, applet, script, audio, video, table, and list, among others.
- Each of the content elements can include one or more formats.
- Each of the one or more formats of each of the content elements can include a corresponding attribute. Examples of attributes for content elements may include color, font, font size, font type, size, and position, among others.
- Each of the one more style rules e.g., CSS style rules
- the CSS style rule of the first format for the content element 215 A can specify that any text of the first content element 215 A is to be aligned to the center (e.g., “text-align: center”).
- the CSS style rule of the second format of the content element can specify that any text of the first content element is to be aligned to the right (e.g., “text-align: right”).
- the content formatting script can select one or more formats for the one or more content elements for processing and rendering by the one or more modules of the application.
- the content formatting script can be executed by the application to dynamically change, modify, or update the formatting of each of the one or more content elements of the information resource.
- the application can change, modify, or update the one or more content elements of the information resource arbitrarily or randomly.
- the computing device can in turn change, modify, or remove the display or rendering of the one or more content elements based on a domain-based policy, visual-based policy, or an action-based policy, thereby causing an alteration in the behavior of the displayed information resource.
- the computing device can identify the information resource and the one or more content elements included in the information resource. In some implementations, the computing device can identify one or more code segments corresponding to the one or more content elements included in the information resource. In some implementations, the computing device can parse the information resource to identify a content element type for each of the one or more content elements. For example, the computing device can identify that the information resource includes an inline frame content element based on the HTML tag “ ⁇ iframe>.” In some implementations, the computing device can parse the information resource can identify one or more function calls included in the information resource for any of the one or more content elements. For example, the computing device can search the script of the information resource for a string corresponding to a function call.
- the application can process each of the one or more content elements of the information resource to generate a document tree.
- the application can parse the HTML markup of the information resource to generate a Document Object Model (DOM) tree.
- the document tree can include one or more content objects associated with each other in a hierarchical manner.
- two content objects in the DOM tree can have a parent-child relationship in a tree data structure.
- Each of the content objects can correspond to one format for one of the one or more content elements.
- Each of the content objects in the document tree can include one or more properties or attributes.
- the computing device can identify or access the document tree generated by the application. In some implementations, the computing device can identify the one or more content objects of the document tree. The computing device can identify a content object type of each of the one or more content objects in the document tree. The computing device can determine, for each of the one or more content elements, a corresponding content object in the document tree. The computing device can identify one or more properties or attributes of each of the one or more content objects of the document tree.
- the application can identify a subset of content objects of the document tree that is to be rendered and a subset of content objects of the document tree that is not to be rendered.
- the application can identify the link content object to import style rules (e.g., CSS style sheets) specified for the information resource.
- style rules e.g., CSS style sheets
- the application can remove the subset of content objects that is not to be rendered from the document tree.
- the application can match each of the content objects in subset of the content objects that is to be rendered with the style rule specified in the information resource to generate an object model.
- the computing device can identify or access the object model generated by the application.
- the computing device can identify the one or more content objects of the object model.
- the computing device can identify a content object type of each of the one or more content objects in the object model.
- the computing device can determine, for each of the one or more content elements, a corresponding content object in the object model.
- the computing device can identify one or more properties or attributes of each of the one or more content objects of the object model.
- the application can generate a rendering tree for rendering the information resource.
- the application can include a layout engine, rendering engine, or any module, engine, or process of the application to prepare rendering of the information resource on a display of the application.
- the application can generate the rendering tree based on the object model or the document tree.
- the application can generate one or more render properties for each of the content objects and the matched style rule in the object model.
- the application can generate the one or more properties based on the properties or attributes specified in the respective content object in the document tree or the matched style rule in the object model.
- the rendering tree can include one or more nodes associated with each other in a hierarchical manner. For example, two nodes can have a parent-child relationship in a tree data structure. Each of the nodes in the rendering tree can correspond to a content element of the information resource that is to be rendered. Each of the nodes in the render can be matched to one or more rendering properties.
- the computing device can identify or access the rendering tree generated by the application. In some implementations, the computing device can identify the one or more nodes of the rendering tree. The computing device can identify a node type of each of the one or more nodes in the rendering tree. The computing device can determine, for each of the one or more content elements, a corresponding node in the rendering tree. The computing device can identify one or more properties or attributes of each of the one or more nodes of the rendering tree.
- the application can process a layout based on the rendering tree.
- the layout can include one or more sub-layouts in a list, array, or tree data structure. Each of the one or more sub-layouts can correspond to a node on the rendering tree.
- Each of the one or more sub-layouts can include rendering information specifying how the node corresponding to one of the content elements is to be rendered on a display of the application. For example, a sub-layout may specify the absolute pixel positions a node is to occupy on the display.
- the application can traverse the nodes of the rendering tree. For each node traversed, the application can generate the corresponding sub-layout based on the one or more rendering properties for the node.
- the application can additionally process the layout generated by the application for displaying the information resource on the application.
- the computing device can identify or access the layout generated by the application.
- the computing device can identify the one or more sub-layouts of the layout.
- the computing device can identify a sub-layout type of each of the one or more sub-layouts in the layout. For example, the computing device can identify that one of the sub-layouts corresponds to an image sub-layout.
- the computing device can determine, for each of the one or more content elements, a corresponding sub-layout in the layout.
- the computing device can identify one or more properties or attributes of each of the one or more sub-layouts of the layout.
- the computing device can determine that the content element corresponds to a restricted content element by applying at least one of an action-based detection policy or a visual-based detection policy (BLOCK 410 ). In some implementations, using the one or more content elements identified by the computing device, the computing device can determine whether any of the one or more content elements is a restricted content element based on a domain-based detection policy.
- the domain-based detection policy may be maintained in the database of the computing device.
- the computing device can identify a host address one of the one or more content elements and a host address of the information resource. The computing device can determine whether the host address of the identified content element differs from the host address of the information resource.
- the computing device can determine that the respective content element is a restricted content element.
- the computing device can identify that one of one or more content elements includes a link.
- the computing device can determine that the link of the respective content element includes an address different from the host address of the information resource.
- the computing device can determine whether any of the one or more content elements is a restricted content element based on a visual-based detection policy.
- the visual-based detection policy may be maintained by the database of the computing device.
- the computing device can determine whether any of the one or more content elements includes one or more restricted properties or attributes specified by the visual-based detection policy.
- the computing device can identify a dimension or a position of each of the content elements from the one or more graphical properties or attributes of each of the content elements of the information resource. In some implementations, the computing device can determine that the dimension or the position of each of the content elements of the information resource matches one or more predesignated dimensions or one or more predesignated positions.
- the predesignated dimensions or predesignated positions may correspond to or be associated with content elements identified as restricted content elements. For example, pre-designated dimensions may be those of online ads, such as 468 ⁇ 60 pixels (full banner ads), 160 ⁇ 600 pixels (wide skyscraper banner ads), and 720 ⁇ 300 (pop-under ads), among others. Examples of pre-designated positions may include top alignments, left alignments, right alignments, and bottom alignments, among others.
- the computing device can identify a color value (e.g., RGB value, alphanumerical identifier, or HTML color code) of each of the one or more content elements from the graphical properties or attributes of the respective content element.
- the computing device can identify a color value of the information resource.
- the computing device can calculate a difference in color value between one and one or more other content elements. If the difference in color value between one of the content elements versus the remaining content elements is above a predetermined threshold, the computing device can determine that the one content element is a restricted content element.
- the computing device can calculate a difference in color value between one of the content elements and the information resource. If the difference in color value between the content element and the information resource is above a predetermined threshold, the computing device can determine that the respective content element is a restricted content element.
- the computing device can identify one or more characters from each of the one or more content elements.
- the one or more characters may be from a text field or a metadata field of the respective content element.
- the computing device can determine whether the one or more characters identified from each of the one or more content elements matches or is similar to one or more predesignated characters identified in restricted content elements.
- the one or more predesignated characters may be from the restricted format policy.
- the computing device can determine or calculate a semantic similarity measure between the one or more characters identified from each of the one or more content elements and the one or more predesignated characters. For example, the computing device can apply an approximate string match algorithm to calculate the similarity measure.
- the computing device can compare the semantic similarity measure to a threshold measure.
- the computing device can identify the respective content element having the one or more characters as a restricted content element, responsive to determining that the semantic similarity measure is greater than the threshold measure.
- the computing device can identify one or more image content elements of the information resource based on the content element type identified by the computing device.
- the computing device can apply image recognition algorithms to determine whether the one or more image content elements include a restricted visual element. Examples of image recognition algorithms include optical character recognition, object recognition, edge detection, feature detection (e.g., affiant feature detection), image matching algorithms, and image pattern recognition algorithms, among others.
- image recognition algorithms include optical character recognition, object recognition, edge detection, feature detection (e.g., affiant feature detection), image matching algorithms, and image pattern recognition algorithms, among others.
- the computing device can identify one or more character strings from the image content element by applying an optical character recognition algorithm. The computing device can determine that at least one of the one more character strings matches one more predesignated character strings.
- the predesignated character strings can be maintained by the database of the computing device and can correspond to or be associated with character strings identified in restricted content elements.
- predesignated characters include “click here,” “purchase,” “sale,” “xxx,” and “$,” among others.
- the computing device can identify one or more visual features from the image content element by applying feature detection or object recognition algorithms. In some implementations, the computing device can determine that at least one of the one or more visual features matches one or more predesignated visual features.
- the predesignated visual features can be maintained by the database of the computing device and can correspond to or be associated with one or more visual features identified in restricted content elements. Examples of predesignated visual features can include user interface elements such as an exit button, minimize, or maximize button, among others.
- the computing device can determine whether any of the one or more content elements is a restricted content element based on an action-based detection policy.
- the action-based policy may be maintained by the database of the computing device.
- the action-based policy may include a list of events, actions, and transmissions, among others used to determine restricted content elements.
- the computing device can identify the function call from the information resource parsed by the computing device.
- the computing device can identify whether any of the one or more content elements includes a function call that is restricted.
- the computing device can determine that the function call is restricted by searching the action-based detection policy for a list of restricted function calls.
- restricted function calls include changes in graphical properties or attributes of the content element, such as dimension, position, color, and font, among others.
- the computing device can determine that one of the one or more content elements is a restricted content element.
- the restricted content element may be a pre-designated restricted type of content element.
- the action-based detection policy may indicate that applet, audio, or visual content elements are not to be rendered by the application.
- the computing device can determine whether any of the content objects of the document tree is a restricted content object.
- the computing device can apply a domain-based detection policy.
- the domain-based detection policy may be maintained by the database of the computing device.
- the computing device can traverse the document tree. While traversing the document tree, applying the domain-based detection policy, the computing device can determine whether any of the one or more content objects is a restricted content object. In some implementations, applying the domain-based detection policy, the computing device can determine whether any of the one or more content objects includes one or more restricted properties or attributes.
- applying the domain-based detection policy the computing device can determine whether any of the one or more content objects originates from a host different from the information resource based on a host name for the content object and the host name for the information resource. In some implementations, applying the domain-based detection policy, the computing device can determine whether any of the one or more content objects includes a link including a host name different from the host name of the information resource. For example, the computing device can identify that the content object include a link including a host name different from the information resource. Based on the difference in host names, the computing device can determine that the content object is a restricted content object.
- the computing device can determine whether any of the content objects of the document tree is a restricted content object.
- the computing device can apply a visual-based detection policy.
- the visual-based detection policy may be maintained by the database of the computing device.
- the computing device can traverse the document tree. While traversing the document tree, applying the visual-based detection policy, the computing device can determine whether any of the one or more content objects is a restricted content object.
- the computing device can determine whether any of the one or more content objects includes one or more restricted properties or attributes specified by the visual-based detection policy. In some implementations, the computing device can identify a dimension or a position of the content element from the one or more graphical properties or attributes of each of the content objects of the document tree. In some implementations, the computing device can determine that the dimension or the position of each of the content object of the document tree matches one or more predesignated dimensions or one or more predesignated positions. The predesignated dimensions or predesignated positions may correspond to or be associated with content elements identified as restricted content elements.
- pre-designated dimensions may be those of online ads, such as 468 ⁇ 60 pixels (full banner ads), 160 ⁇ 600 pixels (wide skyscraper banner ads), and 720 ⁇ 300 (pop-under ads), among others.
- pre-designated positions may include top alignments, left alignments, right alignments, and bottom alignments, among others.
- the computing device can identify a color value (e.g., RGB value, alphanumerical identifier, or HTML, color code) of each of the one or more content objects from the graphical properties or attributes of the respective content object of the document tree.
- the computing device can identify a color value of the information resource or from the document content object of document tree.
- the computing device can calculate a difference in color value between one and one or more other content objects of the document tree. If the difference in color value between one of the content objects versus the remaining content objects is above a predetermined threshold, the computing device can determine that the one content objects is a restricted content object.
- the computing device can calculate a difference in color value between one of the content objects and the information resource. If the difference in color value between the content object and the information resource is above a predetermined threshold, the computing device can determine that the respective content objects is a restricted content object.
- the computing device can identify one or more characters from each of the one or more content objects of the document tree.
- the one or more characters may be from a text field or a metadata field of the respective content object.
- the computing device can determine whether the one or more characters identified from each of the one or more content object matches or is similar to one or more predesignated characters identified in restricted content elements.
- the one or more predesignated characters may be from the restricted format policy.
- the computing device can determine or calculate a semantic similarity measure between the one or more characters identified from each of the one or more content objects and the one or more predesignated characters. For example, the computing device can apply an approximate string match algorithm to calculate the similarity measure.
- the computing device can compare the semantic similarity measure to a threshold measure. In some implementations, the computing device can identify the respective content object having the one or more characters as a restricted content element, responsive to determining that the semantic similarity measure is greater than the threshold measure.
- the computing device can identify one or more image content objects of the document tree based on the content object type identified by the computing device.
- the computing device can access or retrieve images associated with the one or more image content objects of the document tree.
- the computing device can apply image recognition algorithms to determine whether an image included in one or more image content objects includes a restricted visual element. Examples of image recognition algorithms include optical character recognition, object recognition, edge detection, feature detection (e.g., affiant feature detection), image matching algorithms, and image pattern recognition algorithms, among others.
- the computing device can identify one or more character strings from the image content object by applying an optical character recognition algorithm. The computing device can determine that at least one of the one more character strings matches one more predesignated character strings.
- the predesignated character strings can be maintained by the database of the computing device and can correspond to or be associated with character strings identified in restricted content elements. Examples of predesignated characters include “click here,” “purchase,” “sale,” “xxx,” and “$,” among others.
- the computing device can identify one or more visual features from the image content object by applying feature detection or object recognition algorithms. In some implementations, the computing device can determine that at least one of the one or more visual features matches one or more predesignated visual features.
- the predesignated visual features can be maintained by the database of the computing device and can correspond to or be associated with one or more visual features identified in restricted content elements. Examples of predesignated visual features can include user interface elements such as an exit button, minimize, or maximize button, among others.
- the computing device can determine whether any of the content objects of the document tree is a restricted content object.
- the computing device can apply an action-based detection policy.
- the action-based detection policy may be maintained by the database of the computing device.
- the computing device can traverse the document tree. While traversing the document tree, applying the action detection policy, the computing device can determine whether any of the one or more content objects is a restricted content object.
- by applying the action-based detection policy the computing device can determine that one of the one or more content objects of the document tree is a restricted content element.
- the restricted content element may be a pre-designated restricted type of content element.
- the action-based detection policy may indicate that applet, audio, or visual content elements are not to be rendered by the application.
- the computing device can determine whether any of the content objects of the object model is a restricted content object.
- the computing device can apply a domain-based detection policy.
- the domain-based detection policy may be maintained by the database of the computing device.
- the computing device can traverse the object model. While traversing the object model, applying the domain-based detection policy, the computing device can determine whether any of the one or more content objects is a restricted content object. In some implementations, applying the domain-based detection policy, the computing device can determine whether any of the one or more content objects includes one or more restricted properties or attributes.
- applying the domain-based detection policy the computing device can determine whether any of the one or more content objects originates from a host different from the information resource based on a host name for the content object and the host name for the information resource. In some implementations, applying the domain-based detection policy, the computing device can determine whether any of the one or more content objects includes a link including a host name different from the host name of the information resource.
- the computing device can determine whether any of the content objects of the object model is a restricted content object.
- the computing device can apply a visual-based detection policy.
- the visual-based detection policy may be maintained by the database of the computing device.
- the computing device can traverse the object model. While traversing the object model, applying the visual-based detection policy, the computing device can determine whether any of the one or more content objects is a restricted content object based on the corresponding style rule in the object model.
- the computing device can determine whether any of style rules matched to the one or more content objects includes one or more restricted properties or attributes specified by the visual-based detection policy. In some implementations, the computing device can identify a dimension or a position of the content element from the one or more graphical properties or attributes of the style rules matched to each of the content objects of the object model. In some implementations, the computing device can determine that the dimension or the position of each of the content object of the object model matches one or more predesignated dimensions or one or more predesignated positions. The predesignated dimensions or predesignated positions may correspond to or be associated with content elements identified as restricted content elements.
- pre-designated dimensions may be those of online ads, such as 468 ⁇ 60 pixels (full banner ads), 160 ⁇ 600 pixels (wide skyscraper banner ads), and 720 ⁇ 300 (pop-under ads), among others.
- pre-designated positions may include top alignments, left alignments, right alignments, and bottom alignments, among others.
- the computing device can identify a color value (e.g., RGB value, alphanumeric designator, or HTML, color value) of each of the one or more content objects from the graphical properties or attributes of the style rules matched to the respective content object of the object model.
- the computing device can identify a color value of the information resource or from the body content object of object model.
- the computing device can calculate a difference in color value between one and one or more other content objects of the object model. If the difference in color value between one of the content objects versus the remaining content objects is above a predetermined threshold, the computing device can determine that the one content objects is a restricted content object.
- the computing device can calculate a difference in color value between one of the content objects and the information resource. If the difference in color value between the content object and the information resource is above a predetermined threshold, the computing device can determine that the respective content objects is a restricted content object.
- the computing device can identify one or more image content objects of the object model based on the content object type identified by the computing device.
- the computing device can access or retrieve images associated with the one or more image content objects of the object model.
- the computing device can apply image recognition algorithms to determine whether an image included in one or more image content objects includes a restricted visual element. Examples of image recognition algorithms include optical character recognition, object recognition, edge detection, feature detection (e.g., affiant feature detection), image matching algorithms, and image pattern recognition algorithms, among others.
- the computing device can identify one or more character strings from the image content object by applying an optical character recognition algorithm. The computing device can determine that at least one of the one more character strings matches one more predesignated character strings.
- the predesignated character strings can be maintained by the database of the computing device and can correspond to or be associated with character strings identified in restricted content elements. Examples of predesignated characters include “click here,” “purchase,” “sale,” “xxx,” and “$,” among others.
- the computing device can identify one or more visual features from the image content object by applying feature detection or object recognition algorithms. In some implementations, the computing device can determine that at least one of the one or more visual features matches one or more predesignated visual features.
- the predesignated visual features can be maintained by the database of the computing device and can correspond to or be associated with one or more visual features identified in restricted content elements. Examples of predesignated visual features can include user interface elements such as an exit button, minimize, or maximize button, among others.
- the computing device can determine whether any of the content objects of the object model is a restricted content object.
- the computing device can apply an action-based detection policy.
- the action-based detection policy may be maintained by the database of the computing device.
- the computing device can traverse the object model. While traversing the object model, applying the action detection policy, the computing device can determine whether any of the one or more content objects is a restricted content object.
- by applying the action-based detection policy the computing device can determine that one of the one or more content objects of the object model is a restricted content element.
- the restricted content element may be a pre-designated restricted type of content element.
- the action-based detection policy may indicate that applet, audio, or visual content elements are not to be rendered by the application.
- the computing device can determine whether any of the nodes of the rendering tree is a restricted node.
- the computing device can apply a visual-based detection policy.
- the visual-based detection policy may be maintained by the database of the computing device.
- the computing device can traverse the rendering tree. While traversing the rendering tree, applying the visual-based detection policy, the computing device can determine whether any of the one or more nodes is a restricted node.
- the computing device can identify the one or more rendering properties for each of the nodes in the rendering tree.
- the computing device can determine whether any of the one or more rendering properties corresponding to each of the one or more nodes includes one or more restricted properties or attributes specified by the visual-based detection policy. In some implementations, the computing device can identify a dimension or a position of the content element from the one or more graphical properties or attributes of the one or more rendering properties for each of the nodes of the rendering tree. In some implementations, the computing device can determine that the dimension or the position of each of the node of the rendering tree matches one or more predesignated dimensions or one or more predesignated positions. The predesignated dimensions or predesignated positions may correspond to or be associated with content elements identified as restricted content elements.
- pre-designated dimensions may be those of online ads, such as 468 ⁇ 60 pixels (full banner ads), 160 ⁇ 600 pixels (wide skyscraper banner ads), and 720 ⁇ 300 (pop-under ads), among others.
- pre-designated positions may include top alignments, left alignments, right alignments, and bottom alignments, among others.
- the computing device can identify a color value (e.g., RGB value, alphanumerical identifier, or HTML, color code) from the one or more rendering properties for each of the one or more nodes from the graphical properties or attributes of the one or more rendering properties for the respective node of the rendering tree.
- the computing device can identify a color value of the information resource or from the body node 325 ′ of rendering tree.
- the computing device can calculate a difference in color value between one and one or more other nodes of the rendering tree. If the difference in color value between one of the nodes versus the remaining nodes is above a predetermined threshold, the computing device can determine that the one nodes is a restricted node.
- the computing device can calculate a difference in color value between one of the nodes and the information resource. If the difference in color value between the node and the information resource is above a predetermined threshold, the computing device can determine that the respective nodes is a restricted node.
- the computing device can identify one or more image nodes of the rendering tree based on the node type identified by the computing device.
- the computing device can access or retrieve images associated with the one or more image nodes of the rendering tree.
- the computing device can apply image recognition algorithms to determine whether an image included in one or more image nodes includes a restricted visual element. Examples of image recognition algorithms include optical character recognition, object recognition, edge detection, feature detection (e.g., affiant feature detection), image matching algorithms, and image pattern recognition algorithms, among others.
- the computing device can identify one or more character strings from the image node by applying an optical character recognition algorithm. The computing device can determine that at least one of the one more character strings matches one more predesignated character strings.
- the predesignated character strings can be maintained by the database of the computing device and can correspond to or be associated with character strings identified in restricted content elements. Examples of predesignated characters include “click here,” “purchase,” “sale,” “xxx,” and “$,” among others.
- the computing device can identify one or more visual features from the image node by applying feature detection or object recognition algorithms. In some implementations, the computing device can determine that at least one of the one or more visual features matches one or more predesignated visual features.
- the predesignated visual features can be maintained by the database of the computing device and can correspond to or be associated with one or more visual features identified in restricted content elements. Examples of predesignated visual features can include user interface elements such as an exit button, minimize, or maximize button, among others.
- the computing device can determine whether any of the nodes of the rendering tree is a restricted node.
- the computing device can apply an action-based detection policy.
- the action-based detection policy may be maintained by the database of the computing device.
- the computing device can traverse the rendering tree. While traversing the rendering tree, applying the action detection policy, the computing device can determine whether any of the one or more nodes is a restricted node.
- by applying the action-based detection policy the computing device can determine that one of the one or more nodes of the rendering tree is a restricted content element.
- the restricted content element may be a pre-designated restricted type of content element.
- the action-based detection policy may indicate that applet, audio, or visual content elements are not to be rendered by the application.
- the computing device can determine whether any of the sub-layouts of the layout is a restricted sub-layout.
- the computing device can apply a visual-based detection policy.
- the visual-based detection policy may be maintained by the database of the computing device.
- the computing device can traverse the layout. While traversing the layout, applying the visual-based detection policy, the computing device can determine whether any of the one or more sub-layouts is a restricted sub-layout.
- the computing device can identify the one or more rendering properties for each of the sub-layouts in the layout.
- the computing device can determine whether any of the one or more rendering properties corresponding to each of the one or more sub-layouts includes one or more restricted properties or attributes specified by the visual-based detection policy. In some implementations, the computing device can identify a dimension or a position of the content element from the one or more graphical properties or attributes of the one or more rendering properties for each of the sub-layouts of the layout. In some implementations, the computing device can determine that the dimension or the position of each of the sub-layout of the layout matches one or more predesignated dimensions or one or more predesignated positions. The predesignated dimensions or predesignated positions may correspond to or be associated with content elements identified as restricted content elements.
- pre-designated dimensions may be those of online ads, such as 468 ⁇ 60 pixels (full banner ads), 160 ⁇ 600 pixels (wide skyscraper banner ads), and 720 ⁇ 300 (pop-under ads), among others.
- pre-designated positions may include top alignments, left alignments, right alignments, and bottom alignments, among others.
- the computing device can identify a color value (e.g., RGB value, alphanumerical identifier, or HTML, color code) from the one or more rendering properties for each of the one or more sub-layouts from the graphical properties or attributes of the one or more rendering properties for the respective sub-layout of the layout.
- a color value e.g., RGB value, alphanumerical identifier, or HTML, color code
- the computing device can identify a color value of the information resource or from the body sub-layout 325 ′ of layout.
- the computing device can calculate a difference in color value between one and one or more other sub-layouts of the layout.
- the computing device can determine that the one sub-layouts is a restricted sub-layout.
- the computing device can calculate a difference in color value between one of the sub-layouts and the information resource. If the difference in color value between the sub-layout and the information resource is above a predetermined threshold, the computing device can determine that the respective sub-layouts is a restricted sub-layout.
- the computing device can identify one or more image sub-layouts of the layout based on the sub-layout type identified by the computing device.
- the computing device can access or retrieve images associated with the one or more image sub-layouts of the layout.
- the computing device can apply image recognition algorithms to determine whether an image included in one or more image sub-layouts includes a restricted visual element. Examples of image recognition algorithms include optical character recognition, object recognition, edge detection, feature detection (e.g., affiant feature detection), image matching algorithms, and image pattern recognition algorithms, among others.
- the computing device can identify one or more character strings from the image sub-layout by applying an optical character recognition algorithm. The computing device can determine that at least one of the one more character strings matches one more predesignated character strings.
- the predesignated character strings can be maintained by the database of the computing device and can correspond to or be associated with character strings identified in restricted content elements. Examples of predesignated characters include “click here,” “purchase,” “sale,” “xxx,” and “$,” among others.
- the computing device can identify one or more visual features from the image sub-layout by applying feature detection or object recognition algorithms. In some implementations, the computing device can determine that at least one of the one or more visual features matches one or more predesignated visual features.
- the predesignated visual features can be maintained by the database of the computing device and can correspond to or be associated with one or more visual features identified in restricted content elements. Examples of predesignated visual features can include user interface elements such as an exit button, minimize, or maximize button, among others.
- the computing device can determine whether any of the sub-layouts of the layout is a restricted sub-layout.
- the computing device can apply an action-based detection policy.
- the action-based detection policy may be maintained by the database of the computing device.
- the computing device can traverse the layout. While traversing the layout, applying the action detection policy, the computing device can determine whether any of the one or more sub-layouts is a restricted sub-layout.
- by applying the action-based detection policy the computing device can determine that one of the one or more sub-layouts of the layout is a restricted content element.
- the restricted content element may be a pre-designated restricted type of content element.
- the action-based detection policy may indicate that applet, audio, or visual content elements are not to be rendered by the application.
- the application can process the altered document tree, object model, rendering tree, or layout.
- the application can process the document tree, object model, rendering tree, or layout and render the information resource for display on the application.
- the computing device can monitor for one or more processes of the application.
- the computing device can detect one or more function calls by the application while processing the information resource.
- the computing device may cause changes to any of the one or more content elements of the information resource, one or more content objects of the document tree, one or more content objects or a matched style rule of the one or more content objects of the object model, one or more nodes of the rendering tree, or the sub-layouts of the layout, thereby resulting in one or more function calls in the application.
- the computing device may modify the one or more content elements from one format to another format by setting a different size, position, or color, among other visual characteristics.
- the computing device can identify a change in the one or more graphical attributes or properties of the one or more content elements of the information resource, one or more content objects of the document tree, one or more content objects or a matched style rule of the one or more content objects of the object model, one or more nodes of the rendering tree, or the sub-layouts of the layout.
- the computing device can detect a regenerate command for the information resource. The regenerate command may be indicative of one or more changes or alterations in the rendering of the information resource by the application.
- the regenerate command may be generated by the application of the application responsive to an insertion or addition of a new content element to the information resource, an insertion or addition of a new content object to the document tree, an insertion or addition of a new content object or a change or modification in a style rule in the object model, an insertion or addition of a new node or a change or modification in one or more rendering properties in the rendering tree, or insertion or addition of a new sub-layout or a change or modification in one or more sub-layouts in the layout.
- the computing device can identify the one or more content elements corresponding to or associated with the respective process. For example, the computing device can detect function calls made by an event listener and identify a button content element on the information resource based on the detected function calls. In some implementations, the computing device can identify the one or more content elements corresponding to or associated with the change in the one or more graphical attributes or properties of the one or more content elements of the information resource, one or more content objects of the document tree, one or more content objects or a matched style rule of the one or more content objects of the object model, one or more nodes of the rendering tree, or the sub-layouts of the layout. In some implementations, the computing device can identify the one or more content elements, content objects of the document tree, style rules of the object model, nodes in the rendering tree, and sub-layouts in the layout corresponding to or associated with the regenerate command.
- the computing device can monitor for one or more transmissions from the application.
- the one or more transmissions can include a pingback generated from the instructions for one or more of the content elements.
- the computing device can detect a request from the one or more transmissions from the application.
- the request can include a request for another information resource or a request for additional content elements, among others.
- the computing device can identify the one or more content elements corresponding to or associated with the transmission of the pingback or request.
- the computing device can modify, by applying a content rendering restriction policy, the information resource to alter rendering of the content element, responsive to determining that the content element corresponds to the restricted content element (BLOCK 415 ).
- the computing device responsive to determining that any one of the content elements is a restricted content element, the computing device can apply a content rendering restriction policy.
- the content rendering restriction policy may be maintained by the database of the computing device.
- the computing device can change, modify, or remove the respective content element.
- the computing device can alter a portion of the script of the information resource corresponding to the restricted content element.
- the computing device can add an additional content element to the information resource as an overlay to occlude or otherwise restrict visibility of the respective content element.
- the computing device can apply a content rendering restriction policy.
- the computing device can change, modify, or remove the respective content object in the document tree.
- the computing device can change, modify, or remove the content object in the document tree.
- the computing device can add an additional content object to the document tree as an overlay to occlude or otherwise restrict visibility of the respective content object when displayed by the application.
- the computing device can apply the content rendering restriction policy.
- the computing device can change, modify, or remove the respective content object or the style rule matched to the content object in the object model.
- the computing device can change, modify, or remove the content object or the style rule matched to the content object in the object model.
- the computing device can set a display property of a style rule matched to one of the content objects in the object model to null.
- the computing device can add an additional content object with a corresponding matched style rule to the object model as an overlay to occlude or otherwise restrict visibility of the respective content object when displayed by the application.
- the computing device can apply the content rendering restriction policy.
- the computing device can change, modify, or remove the respective node or the respective one or more rendering properties in the rendering tree.
- the computing device can change, modify, or remove the node or the respective one or more rendering properties in the rendering tree.
- the computing device can set a delete a node or a corresponding parent node from the rendering tree.
- the computing device can add an additional node to the rendering tree as an overlay to occlude or otherwise restrict visibility of the respective node when displayed by the application.
- the computing device can apply the content rendering restriction policy.
- the computing device can change, modify, or remove the respective sub-layout or the respective one or more rendering properties in the layout.
- the computing device can change, modify, or remove the sub-layout or the respective one or more rendering properties in the layout.
- the computing device can add an additional sub-layout to the layout as an overlay to occlude or otherwise restrict visibility of the respective sub-layout when displayed by the application.
- the computing device can determine whether the associated process is a restricted process.
- the action-based detection policy may list one or more processes that may be restricted. Examples of restricted processes include change in size, change in position, and change in color, among others. If the process is not a restricted process, the computing device can allow or permit the process to continue.
- the application of the application can update the information resource with the process executed and display the newly updated information resource. If the process is a restricted process, the computing device can terminate the process.
- the computing device can interface with the computing device or the computing device to determine whether the process is permitted by repeating previously described functionalities.
- the computing device can modify, change, or remove the respective content elements.
- the computing device can modify, change, or remove the identified one or more content objects of the document tree, one or more content objects or a matched style rule of the one or more content objects of the object model, one or more nodes of the rendering tree, or the sub-layouts of the layout. For example, if a change in size is detected for one of the nodes of the rendering tree, the computing device can identify the previous size from the previous rendering properties for the respective node. In this example, the computing device can set the size to the previous size.
- the computing device can change, modify, or otherwise remove the one or more content elements corresponding to or associated with the transmission of the pingback or request.
- the pingback or request may include an identifier of the respective content element. Using the identifier, the computing device can identify the respective content element.
- FIG. 5 is a flow diagram depicting a method 500 of deploying countermeasures against unauthorized scripts interfering with the rendering of content elements on information resources, according to an illustrative implementation.
- the functionality described herein with respect to method 400 can be performed or otherwise executed by the data processing system 110 or client device 125 as shown in FIG. 1 , the content render verification system 200 A as shown in FIG. 2 A , or a computing device as shown in FIG. 7 , or any combination thereof.
- the computing device can receive an information resource including content elements (BLOCK 503 ).
- the computing device can determine whether the information resource includes restricted code (BLOCK 506 ). If the information resource includes restricted code, the computing device can alter the restricted code (BLOCK 509 ).
- the computing device can identify a document tree generated by an application of the device based on the information resource (BLOCK 512 ).
- the computing device can determine whether any content object of the document tree is a restricted content object (BLOCK 515 ). If any content object of the document tree is determined to be a restricted content object, the computing device can alter the restricted content object (BLOCK 518 ).
- the computing device can identify an object model matching style rules to the document tree content objects (BLOCK 521 ).
- the computing device can determine whether any matched style rule is assigned to a restricted content object (BLOCK 524 ). If any matched style rule is assigned to a restricted content object, the computing device can alter the style rule of the restricted content object (BLOCK 527 ).
- the computing device can identify a rendering tree generated by the application from the object model (BLOCK 530 ).
- the computing device can determine whether any node in the rendering tree is a restricted node (BLOCK 533 ). If any node in the rendering tree is a restricted node, the computing device can alter the restricted node (BLOCK 536 ).
- the computing device can identify images associated with the content elements of the information resource (BLOCK 539 ).
- the computing device can determine whether the rendered image includes restricted visual elements (BLOCK 542 ). If the rendered imaged includes restricted visual elements, the computing device can alter the image (BLOCK 545 ).
- the computing device can subsequently display the information resource (BLOCK 548 ).
- the computing device can monitor transmissions for request of content by the application (BLOCK 551 ).
- the computing device can determine whether the transmission is a restricted type of transmission (BLOCK 554 ). If the transmission is a restricted type of transmission, the computing device can modify communications (BLOCK 557 ), identify the document tree content object associated with the transmission (BLOCK 560 ), and alter the document tree content object identified (BLOCK 563 ).
- the computing device can monitor processing of the information resource by the application (BLOCK 566 ).
- the computing device can determine whether a detected process is a restricted process (BLOCK 569 ).
- the computing device can permit the process (BLOCK 572 ) and update the display of the information resource (BLOCK 548 ). If the detected process is a restricted process, the computing device can repeat the method 500 from BLOCK 506 .
- FIG. 6 shows the general architecture of an illustrative computer system 600 that may be employed to implement any of the computer systems discussed herein (including the system 110 and its components such as the content request module 130 , the content selection module 135 , and script provider module 140 or the application 205 and its modules, the document tree generator 206 , the rendering tree generator 208 , the display module 210 , and content formatting script 214 , or the application render restrictor 220 and its components, the content element identification module 225 , domain based detection module 230 , visual based detection module 235 , action based detection module 240 , and content render restriction module 245 ) in accordance with some implementations.
- the computer system 600 can be used to provide information via the network 105 for display.
- processors 620 communicatively coupled to memory 625 , one or more communications interfaces 605 , and one or more output devices 610 (e.g., one or more display units) and one or more input devices 515 .
- the processors 620 can be included in the data processing system 110 or the other components of the system 110 such as the content request module 130 , the content selection module 135 , and the script provider module 140 .
- the processors can be included in the client device 125 or the proxy device 150 or their modules, such as the application 205 , the document tree generator 206 , the rendering tree generator 208 , the display module 210 , content formatting script 214 , the application render restrictor 220 , the content element identification module 225 , domain based detection module 230 , visual based detection module 235 , action based detection module 240 , and content render restriction module 245 .
- the memory 625 may comprise any computer-readable storage media, and may store computer instructions such as processor-executable instructions for implementing the various functionalities described herein for respective systems, as well as any data relating thereto, generated thereby, or received via the communications interface(s) or input device(s) (if present).
- the data processing system 110 can include the memory 625 to store information related to the availability of inventory of one or more content units, reservations of one or more content units, among others.
- the memory 625 can include the database 145 .
- the processor(s) 620 shown in FIG. 6 may be used to execute instructions stored in the memory 625 and, in so doing, also may read from or write to the memory various information processed and or generated pursuant to execution of the instructions.
- the processor 620 of the computer system 600 shown in FIG. 6 also may be communicatively coupled to or control the communications interface(s) 605 to transmit or receive various information pursuant to execution of instructions.
- the communications interface(s) 605 may be coupled to a wired or wireless network, bus, or other communication means and may therefore allow the computer system 600 to transmit information to or receive information from other devices (e.g., other computer systems).
- one or more communications interfaces facilitate information flow between the components of the system 600 .
- the communications interface(s) may be configured (e.g., via various hardware components or software components) to provide a website as an access portal to at least some aspects of the computer system 600 .
- Examples of communications interfaces 605 include user interfaces (e.g., web pages), through which the user can communicate with the data processing system 600 .
- the output devices 610 of the computer system 600 shown in FIG. 6 may be provided, for example, to allow various information to be viewed or otherwise perceived in connection with execution of the instructions.
- the input device(s) 515 may be provided, for example, to allow a user to make manual adjustments, make selections, enter data, or interact in any of a variety of manners with the processor during execution of the instructions. Additional information relating to a general computer system architecture that may be employed for various systems discussed herein is provided further herein.
- Implementations of the subject matter and the operations described in this specification can be implemented in digital electronic circuitry, or in computer software embodied on a tangible medium, firmware, or hardware, including the structures disclosed in this specification and their structural equivalents, or in combinations of one or more of them.
- Implementations of the subject matter described in this specification can be implemented as one or more computer programs, i.e., one or more modules of computer program instructions, encoded on computer storage medium for execution by, or to control the operation of, data processing apparatus.
- the program instructions can be encoded on an artificially-generated propagated signal, e.g., a machine-generated electrical, optical, or electromagnetic signal that is generated to encode information for transmission to suitable receiver apparatus for execution by a data processing apparatus.
- a computer storage medium can be, or be included in, a computer-readable storage device, a computer-readable storage substrate, a random or serial access memory array or device, or a combination of one or more of them.
- a computer storage medium is not a propagated signal, a computer storage medium can include a source or destination of computer program instructions encoded in an artificially-generated propagated signal.
- the computer storage medium can also be, or be included in, one or more separate physical components or media (e.g., multiple CDs, disks, or other storage devices).
- a smart television module (or connected television module, hybrid television module, etc.), which may include a processing module configured to integrate internet connectivity with more traditional television programming sources (e.g., received via cable, satellite, over-the-air, or other signals).
- the smart television module may be physically incorporated into a television set or may include a separate device such as a set-top box, Blu-ray or other digital media player, game console, hotel television system, and other companion device.
- a smart television module may be configured to allow viewers to search and find videos, movies, photos and other content on the web, on a local cable TV channel, on a satellite TV channel, or stored on a local hard drive.
- a set-top box (STB) or set-top unit (STU) may include an information appliance device that may contain a tuner and connect to a television set and an external source of signal, turning the signal into content which is then displayed on the television screen or other display device.
- a smart television module may be configured to provide a home screen or top level screen including icons for a plurality of different applications, such as a web browser and a plurality of streaming media services, a connected cable or satellite media source, other web “channels”, etc.
- the smart television module may further be configured to provide an electronic programming guide to the user.
- a companion application to the smart television module may be operable on a mobile computing device to provide additional information about available programs to a user, to allow the user to control the smart television module, etc.
- the features may be implemented on a laptop computer or other personal computer, a smartphone, other mobile phone, handheld computer, a tablet PC, or other computing device.
- the operations described in this specification can be implemented as operations performed by a data processing apparatus on data stored on one or more computer-readable storage devices or received from other sources.
- data processing apparatus encompasses all kinds of apparatus, devices, and machines for processing data, including by way of example a programmable processor, a computer, a system on a chip, or multiple ones, or combinations, of the foregoing.
- the apparatus can include special purpose logic circuitry, e.g., an FPGA (field programmable gate array) or an ASIC (application-specific integrated circuit).
- the apparatus can also include, in addition to hardware, code that creates an execution environment for the computer program in question, e.g., code that constitutes processor firmware, a protocol stack, a database management system, an operating system, a cross-platform runtime environment, a virtual machine, or a combination of one or more of them.
- the apparatus and execution environment can realize various different computing model infrastructures, such as web services, distributed computing and grid computing infrastructures.
- the content request module 130 , the content selection module 135 , and the script provider module 140 can include or share one or more data processing apparatuses, computing devices, or processors.
- the application 205 , the document tree generator 206 , the rendering tree generator 208 , the display module 210 , the content formatting script 214 , the application render restrictor 220 , the content element identification module 225 , domain based detection module 230 , visual based detection module 235 , action based detection module 240 , and content render restriction module 245 can include or share one or more data processing apparatuses, computing devices, or processors.
- a computer program (also known as a program, software, software application, script, or code) can be written in any form of programming language, including compiled or interpreted languages, declarative or procedural languages, and it can be deployed in any form, including as a stand-alone program or as a module, component, subroutine, object, or other unit suitable for use in a computing environment.
- a computer program may, but need not, correspond to a file in a file system.
- a program can be stored in a portion of a file that holds other programs or data (e.g., one or more scripts stored in a markup language document), in a single file dedicated to the program in question, or in multiple coordinated files (e.g., files that store one or more modules, sub-programs, or portions of code).
- a computer program can be deployed to be executed on one computer or on multiple computers that are located at one site or distributed across multiple sites and interconnected by a communication network.
- the processes and logic flows described in this specification can be performed by one or more programmable processors executing one or more computer programs to perform actions by operating on input data and generating output.
- the processes and logic flows can also be performed by, and apparatuses can also be implemented as, special purpose logic circuitry, e.g., an FPGA (field programmable gate array) or an ASIC (application-specific integrated circuit).
- processors suitable for the execution of a computer program include, by way of example, both general and special purpose microprocessors, and any one or more processors of any kind of digital computer.
- a processor will receive instructions and data from a read-only memory or a random access memory or both.
- the essential elements of a computer are a processor for performing actions in accordance with instructions and one or more memory devices for storing instructions and data.
- a computer will also include, or be operatively coupled to receive data from or transfer data to, or both, one or more mass storage devices for storing data, e.g., magnetic, magneto-optical disks, or optical disks.
- mass storage devices for storing data, e.g., magnetic, magneto-optical disks, or optical disks.
- a computer need not have such devices.
- a computer can be embedded in another device, e.g., a mobile telephone, a personal digital assistant (PDA), a mobile audio or video player, a game console, a Global Positioning System (GPS) receiver, or a portable storage device (e.g., a universal serial bus (USB) flash drive), for example.
- Devices suitable for storing computer program instructions and data include all forms of non-volatile memory, media and memory devices, including by way of example semiconductor memory devices, e.g., EPROM, EEPROM, and flash memory devices; magnetic disks, e.g., internal hard disks or removable disks; magneto-optical disks; and CD-ROM and DVD-ROM disks.
- the processor and the memory can be supplemented by, or incorporated in, special purpose logic circuitry.
- implementations of the subject matter described in this specification can be implemented on a computer having a display device, e.g., a CRT (cathode ray tube), plasma, or LCD (liquid crystal display) monitor, for displaying information to the user and a keyboard and a pointing device, e.g., a mouse or a trackball, by which the user can provide input to the computer.
- a display device e.g., a CRT (cathode ray tube), plasma, or LCD (liquid crystal display) monitor
- a keyboard and a pointing device e.g., a mouse or a trackball
- Other kinds of devices can be used to provide for interaction with a user as well; for example, feedback provided to the user can include any form of sensory feedback, e.g., visual feedback, auditory feedback, or tactile feedback; and input from the user can be received in any form, including acoustic, speech, or tactile input.
- a computer can interact with a user by sending documents to and receiving documents from
- Implementations of the subject matter described in this specification can be implemented in a computing system that includes a back-end component, e.g., as a data server, or that includes a middleware component, e.g., an application server, or that includes a front-end component, e.g., a client computer having a graphical user interface or a Web browser through which a user can interact with an implementation of the subject matter described in this specification, or any combination of one or more such back-end, middleware, or front-end components.
- the components of the system can be interconnected by any form or medium of digital data communication, e.g., a communication network.
- Examples of communication networks include a local area network (“LAN”) and a wide area network (“WAN”), an inter-network (e.g., the Internet), and peer-to-peer networks (e.g., ad hoc peer-to-peer networks).
- LAN local area network
- WAN wide area network
- inter-network e.g., the Internet
- peer-to-peer networks e.g., ad hoc peer-to-peer networks.
- the computing system such as system 600 or system 110 can include clients and servers.
- the data processing system 110 can include one or more servers in one or more data centers or server farms.
- a client and server are generally remote from each other and typically interact through a communication network. The relationship of client and server arises by virtue of computer programs running on the respective computers and having a client-server relationship to each other.
- a server transmits data (e.g., an HTML page) to a client device (e.g., for purposes of displaying data to and receiving user input from a user interacting with the client device).
- Data generated at the client device e.g., a result of the user interaction
- the separation of various system components in the implementations described above should not be understood as requiring such separation in all implementations, and it should be understood that the described program components and systems can generally be integrated together in a single software product or packaged into multiple software products.
- the content request module 130 , the content selection module 135 , and the script provider module 140 can be part of the data processing system 110 , a single module, a logic device having one or more processing modules, one or more servers, or part of a search engine.
- the application 205 , the document tree generator 206 , the rendering tree generator 208 , the display module 210 , the application render restrictor 220 , the content element identification module 225 , domain based detection module 230 , visual based detection module 235 , action based detection module 240 , and content render restriction module 245 can include or can be part of the client device 125 , a single module, or a logic device having one or more processing module.
- the application render restrictor 220 , the content element identification module 225 , domain based detection module 230 , visual based detection module 235 , action based detection module 240 , and content render restriction module 245 can include or share one or more data processing apparatuses, computing devices, or processors can be part of the client device 125 , a single module, or a logic device having one or more processing module.
- references to implementations or elements or acts of the systems and methods herein referred to in the singular may also embrace implementations including a plurality of these elements, and any references in plural to any implementation or element or act herein may also embrace implementations including only a single element.
- References in the singular or plural form are not intended to limit the presently disclosed systems or methods, their components, acts, or elements to single or plural configurations.
- References to any act or element being based on any information, act or element may include implementations where the act or element is based at least in part on any information, act, or element.
- any implementation disclosed herein may be combined with any other implementation, and references to “an implementation,” “some implementations,” “an alternate implementation,” “various implementation,” “one implementation” or the like are not necessarily mutually exclusive and are intended to indicate that a particular feature, structure, or characteristic described in connection with the implementation may be included in at least one implementation. Such terms as used herein are not necessarily all referring to the same implementation. Any implementation may be combined with any other implementation, inclusively or exclusively, in any manner consistent with the aspects and implementations disclosed herein.
- references to “or” may be construed as inclusive so that any terms described using “or” may indicate any of a single, more than one, and all of the described terms.
Abstract
Description
Claims (22)
Priority Applications (1)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US17/202,082 US11886546B2 (en) | 2016-02-01 | 2021-03-15 | Systems and methods for dynamically restricting the rendering of unauthorized content included in information resources |
Applications Claiming Priority (4)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US201662289703P | 2016-02-01 | 2016-02-01 | |
PCT/US2016/034605 WO2017135985A1 (en) | 2016-02-01 | 2016-05-27 | Systems and methods for dynamically restricting the rendering of unauthorized content included in information resources |
US201816062015A | 2018-06-13 | 2018-06-13 | |
US17/202,082 US11886546B2 (en) | 2016-02-01 | 2021-03-15 | Systems and methods for dynamically restricting the rendering of unauthorized content included in information resources |
Related Parent Applications (2)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
PCT/US2016/034605 Continuation WO2017135985A1 (en) | 2016-02-01 | 2016-05-27 | Systems and methods for dynamically restricting the rendering of unauthorized content included in information resources |
US16/062,015 Continuation US10951634B2 (en) | 2016-02-01 | 2016-05-27 | Systems and methods for dynamically restricting the rendering of unauthorized content included in information resources |
Publications (2)
Publication Number | Publication Date |
---|---|
US20210203679A1 US20210203679A1 (en) | 2021-07-01 |
US11886546B2 true US11886546B2 (en) | 2024-01-30 |
Family
ID=56119782
Family Applications (4)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
US16/062,015 Active 2036-08-06 US10951634B2 (en) | 2016-02-01 | 2016-05-27 | Systems and methods for dynamically restricting the rendering of unauthorized content included in information resources |
US16/686,791 Active 2037-01-07 US11363040B2 (en) | 2016-02-01 | 2019-11-18 | Systems and methods for dynamically restricting the rendering of unauthorized content included in information resources |
US17/202,082 Active US11886546B2 (en) | 2016-02-01 | 2021-03-15 | Systems and methods for dynamically restricting the rendering of unauthorized content included in information resources |
US17/729,414 Active US11947377B2 (en) | 2016-02-01 | 2022-04-26 | Systems and methods for dynamically restricting the rendering of unauthorized content included in information resources |
Family Applications Before (2)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
US16/062,015 Active 2036-08-06 US10951634B2 (en) | 2016-02-01 | 2016-05-27 | Systems and methods for dynamically restricting the rendering of unauthorized content included in information resources |
US16/686,791 Active 2037-01-07 US11363040B2 (en) | 2016-02-01 | 2019-11-18 | Systems and methods for dynamically restricting the rendering of unauthorized content included in information resources |
Family Applications After (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
US17/729,414 Active US11947377B2 (en) | 2016-02-01 | 2022-04-26 | Systems and methods for dynamically restricting the rendering of unauthorized content included in information resources |
Country Status (4)
Country | Link |
---|---|
US (4) | US10951634B2 (en) |
EP (2) | EP3335395B1 (en) |
CN (1) | CN108028839B (en) |
WO (1) | WO2017135985A1 (en) |
Families Citing this family (4)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US10623680B1 (en) * | 2017-07-11 | 2020-04-14 | Equinix, Inc. | Data center viewing system |
US10664648B2 (en) * | 2017-12-08 | 2020-05-26 | Ca, Inc. | Webpage rendering using a remotely generated layout node tree |
US11055437B2 (en) * | 2018-02-02 | 2021-07-06 | Florida Atlantic University Board Of Trustees | Systems and methods for ensuring privacy in online information sharing applications |
US11281794B2 (en) * | 2019-09-26 | 2022-03-22 | Microsoft Technology Licensing, Llc | Fine grained access control on procedural language for databases based on accessed resources |
Citations (44)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US6271840B1 (en) * | 1998-09-24 | 2001-08-07 | James Lee Finseth | Graphical search engine visual index |
US20030145197A1 (en) | 2001-12-28 | 2003-07-31 | Lee Jae Seung | Apparatus and method for detecting illegitimate change of web resources |
US20050114516A1 (en) | 2003-11-21 | 2005-05-26 | Smith Steven J. | Systems and methods for automatically updating electronic mail access lists |
US20070256010A1 (en) | 2006-04-26 | 2007-11-01 | Microsoft Corportion | Document layout verification |
US20080027866A1 (en) | 2006-07-26 | 2008-01-31 | Halcrow Michael A | System and method for authenticating file content |
US20080034404A1 (en) | 2006-08-07 | 2008-02-07 | Ryan Pereira | Method and system for validating site data |
US20080155392A1 (en) | 2007-03-02 | 2008-06-26 | Marengo Intellectual Property Ltd. | Integrity Checker for Web Browser Document |
US20080256439A1 (en) | 2007-04-13 | 2008-10-16 | Canon Kabushiki Kaisha | Laying out graphical elements on a page |
US20090216769A1 (en) * | 2008-02-26 | 2009-08-27 | Bellwood Thomas A | Digital Rights Management of Captured Content Based on Criteria Regulating a Combination of Elements |
US20100185953A1 (en) | 2009-01-19 | 2010-07-22 | Compagnie Industrielle Et Financiere D'ingenierie Ingenico | Method for securing an interface between a user and an application, corresponding system, terminal and computer program product |
US7788577B2 (en) | 2005-09-23 | 2010-08-31 | Google Inc. | Displaying information on a mobile device |
US20120166933A1 (en) | 2010-12-23 | 2012-06-28 | International Business Machines Corporation | Verifying page layout automatically |
US20130054371A1 (en) * | 2011-08-31 | 2013-02-28 | Daniel Mark Mason | Systems and methods for contextualizing services for inline mobile banner advertising |
US20130061132A1 (en) | 2010-05-19 | 2013-03-07 | Li-Wei Zheng | System and method for web page segmentation using adaptive threshold computation |
EP2642715A1 (en) | 2012-03-20 | 2013-09-25 | British Telecommunications public limited company | Method and system for malicious code detection |
US20130254655A1 (en) | 2012-03-26 | 2013-09-26 | Vistaprint Technologies Limited | Self-adjusting document layouts using system optimization modeling |
US20130263280A1 (en) | 2012-01-09 | 2013-10-03 | Stephen W. Cote | Secure Dynamic Page Content and Layouts Apparatuses, Methods and Systems |
US8671352B1 (en) | 2013-05-07 | 2014-03-11 | Axure Software Solutions, Inc. | Variable dimension version editing for graphical designs |
US8677481B1 (en) | 2008-09-30 | 2014-03-18 | Trend Micro Incorporated | Verification of web page integrity |
US8732800B1 (en) * | 2007-03-26 | 2014-05-20 | Jerry Askew | Systems and methods for centralized management of policies and access controls |
US20140208197A1 (en) | 2013-01-23 | 2014-07-24 | Go Daddy Operating Company, LLC | Method for conversion of website content |
US20140245115A1 (en) | 2013-02-22 | 2014-08-28 | Google Inc. | Systems and methods for automated content generation |
US8850010B1 (en) | 2013-03-29 | 2014-09-30 | Citrix Systems, Inc. | Providing a managed browser |
US20150074516A1 (en) | 2013-09-12 | 2015-03-12 | Wixpress Ltd. | System and method for automated conversion of interactive sites and applications to support mobile and other display environments |
US20150128064A1 (en) | 2005-03-14 | 2015-05-07 | Seven Networks, Inc. | Intelligent rendering of information in a limited display environment |
US20150278172A1 (en) | 2014-03-31 | 2015-10-01 | NIIT Technologies Ltd | Simplifying identification of potential non-visibility of user interface components when responsive web pages are rendered by disparate devices |
US20150339461A1 (en) * | 2014-05-23 | 2015-11-26 | Ebay Inc. | Presence-based content restriction |
US9231975B2 (en) | 2013-06-27 | 2016-01-05 | Sap Se | Safe script templating to provide reliable protection against attacks |
US9237311B2 (en) | 2009-02-06 | 2016-01-12 | At&T Intellectual Property I, Lp | Network architecture and method for application deployment |
US20160028743A1 (en) | 2014-07-25 | 2016-01-28 | Martin Johns | Web page integrity validation |
US9311422B2 (en) | 2013-09-12 | 2016-04-12 | Adobe Systems Incorporated | Dynamic simulation of a responsive web page |
US20160110082A1 (en) | 2014-10-20 | 2016-04-21 | Google Inc. | Arbitrary size content item generation |
US9407658B1 (en) | 2015-06-30 | 2016-08-02 | AO Kaspersky Lab | System and method for determining modified web pages |
US20160364369A1 (en) | 2015-06-09 | 2016-12-15 | International Business Machines Corporation | Optimization for rendering web pages |
US20170017380A1 (en) | 2015-07-13 | 2017-01-19 | International Business Machines Corporation | Mobile enabling a web application developed without mobile rendering capabilities |
US9575941B1 (en) | 2013-10-01 | 2017-02-21 | Google Inc. | Dynamic adjustment to content for a display device |
US20170111393A1 (en) * | 2015-10-16 | 2017-04-20 | Canon Kabushiki Kaisha | Information processing apparatus, information processing method, and storage medium storing program |
US9692787B1 (en) | 2014-01-16 | 2017-06-27 | Google Inc. | System for controlling browser extensions |
US9697190B2 (en) | 2014-08-14 | 2017-07-04 | International Business Machines Corporation | Integrating image renditions and page layout |
US9811509B2 (en) | 2012-11-07 | 2017-11-07 | International Business Machines Corporation | Ensuring integrity of a displayed web page |
US10007647B2 (en) | 2016-05-23 | 2018-06-26 | International Business Machines Corporation | Adapting and validating graphical user interfaces for target devices |
US10078626B1 (en) | 2012-11-27 | 2018-09-18 | Amazon Technologies, Inc. | Automated layout testing of content |
US10241978B2 (en) | 2014-06-09 | 2019-03-26 | Entit Software Llc | Measuring compatibility of viewers by leveraging user-provided element definitions |
US10303526B2 (en) | 2011-03-08 | 2019-05-28 | Facebook, Inc. | Device specific handling of user interface components |
Family Cites Families (9)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US7406603B1 (en) * | 1999-08-31 | 2008-07-29 | Intertrust Technologies Corp. | Data protection systems and methods |
US8245270B2 (en) * | 2005-09-01 | 2012-08-14 | Microsoft Corporation | Resource based dynamic security authorization |
US20090216630A1 (en) * | 2008-02-22 | 2009-08-27 | Microsoft Corporation | Content monetization system with variable ad insertion |
US8095991B2 (en) * | 2008-02-26 | 2012-01-10 | International Business Machines Corporation | Digital rights management of streaming captured content based on criteria regulating a sequence of elements |
US8650648B2 (en) * | 2008-03-26 | 2014-02-11 | Sophos Limited | Method and system for detecting restricted content associated with retrieved content |
CN102915375B (en) * | 2012-11-08 | 2015-10-21 | 山东大学 | A kind of webpage loading method based on layout subregion |
US9471556B2 (en) * | 2013-01-30 | 2016-10-18 | Microsoft Technology Licensing, Llc | Collaboration using multiple editors or versions of a feature |
US10638196B2 (en) * | 2013-05-27 | 2020-04-28 | Echostar Ukraine Llc | Network-wide remote parental control |
US9083726B2 (en) * | 2013-09-11 | 2015-07-14 | Verizon Patent And Licensing Inc. | Automatic content publication and distribution |
-
2016
- 2016-05-27 CN CN201680053721.6A patent/CN108028839B/en active Active
- 2016-05-27 EP EP16728803.4A patent/EP3335395B1/en active Active
- 2016-05-27 EP EP21156963.7A patent/EP3840331B1/en active Active
- 2016-05-27 WO PCT/US2016/034605 patent/WO2017135985A1/en active Search and Examination
- 2016-05-27 US US16/062,015 patent/US10951634B2/en active Active
-
2019
- 2019-11-18 US US16/686,791 patent/US11363040B2/en active Active
-
2021
- 2021-03-15 US US17/202,082 patent/US11886546B2/en active Active
-
2022
- 2022-04-26 US US17/729,414 patent/US11947377B2/en active Active
Patent Citations (45)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US6271840B1 (en) * | 1998-09-24 | 2001-08-07 | James Lee Finseth | Graphical search engine visual index |
US20030145197A1 (en) | 2001-12-28 | 2003-07-31 | Lee Jae Seung | Apparatus and method for detecting illegitimate change of web resources |
US20050114516A1 (en) | 2003-11-21 | 2005-05-26 | Smith Steven J. | Systems and methods for automatically updating electronic mail access lists |
US20150128064A1 (en) | 2005-03-14 | 2015-05-07 | Seven Networks, Inc. | Intelligent rendering of information in a limited display environment |
US7788577B2 (en) | 2005-09-23 | 2010-08-31 | Google Inc. | Displaying information on a mobile device |
US20070256010A1 (en) | 2006-04-26 | 2007-11-01 | Microsoft Corportion | Document layout verification |
US20080027866A1 (en) | 2006-07-26 | 2008-01-31 | Halcrow Michael A | System and method for authenticating file content |
US20080034404A1 (en) | 2006-08-07 | 2008-02-07 | Ryan Pereira | Method and system for validating site data |
US20080155392A1 (en) | 2007-03-02 | 2008-06-26 | Marengo Intellectual Property Ltd. | Integrity Checker for Web Browser Document |
US8732800B1 (en) * | 2007-03-26 | 2014-05-20 | Jerry Askew | Systems and methods for centralized management of policies and access controls |
US20080256439A1 (en) | 2007-04-13 | 2008-10-16 | Canon Kabushiki Kaisha | Laying out graphical elements on a page |
US20090216769A1 (en) * | 2008-02-26 | 2009-08-27 | Bellwood Thomas A | Digital Rights Management of Captured Content Based on Criteria Regulating a Combination of Elements |
US8677481B1 (en) | 2008-09-30 | 2014-03-18 | Trend Micro Incorporated | Verification of web page integrity |
US20100185953A1 (en) | 2009-01-19 | 2010-07-22 | Compagnie Industrielle Et Financiere D'ingenierie Ingenico | Method for securing an interface between a user and an application, corresponding system, terminal and computer program product |
US9237311B2 (en) | 2009-02-06 | 2016-01-12 | At&T Intellectual Property I, Lp | Network architecture and method for application deployment |
US20130061132A1 (en) | 2010-05-19 | 2013-03-07 | Li-Wei Zheng | System and method for web page segmentation using adaptive threshold computation |
US20120166933A1 (en) | 2010-12-23 | 2012-06-28 | International Business Machines Corporation | Verifying page layout automatically |
US10303526B2 (en) | 2011-03-08 | 2019-05-28 | Facebook, Inc. | Device specific handling of user interface components |
US20130054371A1 (en) * | 2011-08-31 | 2013-02-28 | Daniel Mark Mason | Systems and methods for contextualizing services for inline mobile banner advertising |
US20130263280A1 (en) | 2012-01-09 | 2013-10-03 | Stephen W. Cote | Secure Dynamic Page Content and Layouts Apparatuses, Methods and Systems |
EP2642715A1 (en) | 2012-03-20 | 2013-09-25 | British Telecommunications public limited company | Method and system for malicious code detection |
US20130254655A1 (en) | 2012-03-26 | 2013-09-26 | Vistaprint Technologies Limited | Self-adjusting document layouts using system optimization modeling |
US9811509B2 (en) | 2012-11-07 | 2017-11-07 | International Business Machines Corporation | Ensuring integrity of a displayed web page |
US10078626B1 (en) | 2012-11-27 | 2018-09-18 | Amazon Technologies, Inc. | Automated layout testing of content |
US20140208197A1 (en) | 2013-01-23 | 2014-07-24 | Go Daddy Operating Company, LLC | Method for conversion of website content |
US20140245115A1 (en) | 2013-02-22 | 2014-08-28 | Google Inc. | Systems and methods for automated content generation |
US8850010B1 (en) | 2013-03-29 | 2014-09-30 | Citrix Systems, Inc. | Providing a managed browser |
US8671352B1 (en) | 2013-05-07 | 2014-03-11 | Axure Software Solutions, Inc. | Variable dimension version editing for graphical designs |
US9231975B2 (en) | 2013-06-27 | 2016-01-05 | Sap Se | Safe script templating to provide reliable protection against attacks |
US20150074516A1 (en) | 2013-09-12 | 2015-03-12 | Wixpress Ltd. | System and method for automated conversion of interactive sites and applications to support mobile and other display environments |
US9311422B2 (en) | 2013-09-12 | 2016-04-12 | Adobe Systems Incorporated | Dynamic simulation of a responsive web page |
US9575941B1 (en) | 2013-10-01 | 2017-02-21 | Google Inc. | Dynamic adjustment to content for a display device |
US9692787B1 (en) | 2014-01-16 | 2017-06-27 | Google Inc. | System for controlling browser extensions |
US9792267B2 (en) | 2014-03-31 | 2017-10-17 | NIIT Technologies Ltd | Simplifying identification of potential non-visibility of user interface components when responsive web pages are rendered by disparate devices |
US20150278172A1 (en) | 2014-03-31 | 2015-10-01 | NIIT Technologies Ltd | Simplifying identification of potential non-visibility of user interface components when responsive web pages are rendered by disparate devices |
US20150339461A1 (en) * | 2014-05-23 | 2015-11-26 | Ebay Inc. | Presence-based content restriction |
US10241978B2 (en) | 2014-06-09 | 2019-03-26 | Entit Software Llc | Measuring compatibility of viewers by leveraging user-provided element definitions |
US20160028743A1 (en) | 2014-07-25 | 2016-01-28 | Martin Johns | Web page integrity validation |
US9697190B2 (en) | 2014-08-14 | 2017-07-04 | International Business Machines Corporation | Integrating image renditions and page layout |
US20160110082A1 (en) | 2014-10-20 | 2016-04-21 | Google Inc. | Arbitrary size content item generation |
US20160364369A1 (en) | 2015-06-09 | 2016-12-15 | International Business Machines Corporation | Optimization for rendering web pages |
US9407658B1 (en) | 2015-06-30 | 2016-08-02 | AO Kaspersky Lab | System and method for determining modified web pages |
US20170017380A1 (en) | 2015-07-13 | 2017-01-19 | International Business Machines Corporation | Mobile enabling a web application developed without mobile rendering capabilities |
US20170111393A1 (en) * | 2015-10-16 | 2017-04-20 | Canon Kabushiki Kaisha | Information processing apparatus, information processing method, and storage medium storing program |
US10007647B2 (en) | 2016-05-23 | 2018-06-26 | International Business Machines Corporation | Adapting and validating graphical user interfaces for target devices |
Non-Patent Citations (28)
Title |
---|
"AdBlock Plus filters explained", AdBlock Plus, Jan. 29, 2016, retrieved Mar. 19, 2021 from URL: https://web.archive.org/web/20160129174040/https://adblockplus.org/filter-cheatsheet (7 pages). |
"CSS Layout—The position Property", W3Schools, Jan. 29, 2016, retrieved Mar. 19, 2021 from URL: https://web.archive/org/web/20160129003053/http://www.w3schools.com/css/css_positioning.asp (9 pages). |
"Writing AdBlock Plus Filters", Nov. 12, 2010, retrieved Aug. 10, 2019 from URL: https://www.cnblogs.com/xfixer/archive/2010/11/12/1875492.html (2 pages). |
Corrected Notice of Allowance for U.S. Appl. No. 16/062,015 dated Dec. 4, 2020 (2 pages). |
Decision of Rejection for CN Appln. Ser. No. 201680001924.0 dated Jul. 3, 2020 (6 pages). |
European Search Report for EP Appln. Ser. No. 19181490.4 dated Aug. 13, 2019 (6 pages). |
Examination Report for EP Appln. Ser. No. 16728803.04 dated Mar. 13, 2020 (4 pages). |
Examination Report for EP Appln. Ser. No. 16728803.4 dated Apr. 26, 2019 (6 pages). |
Examination Report for EP Appln. Ser. No. 16728803.4 dated Oct. 15, 2019 (8 pages). |
Examination Report for EP Appln. Ser. No. 21156963.7 dated Mar. 31, 2021 (9 pages). |
Final Office Action for U.S. Appl. No. 16/062,022 dated Dec. 20, 2019 (10 pages). |
Final Office Action for U.S. Appl. No. 16/062,022 dated Oct. 20, 2020 (15 pages). |
First Office Action for CN Appln. Ser. No. 201680001924.0 dated Oct. 9, 2019 (16 pages). |
First Office Action for CN Appln. Ser. No. 201680053721.6 dated Jul. 23, 2020 (13 pages). |
German Office Action for Appln. Ser. No. 202016107277.8 dated Mar. 24, 2017 (1 page). |
International Preliminary Report on Patentability, Ch. II, for PCT Appln. Ser. No. PCT/US2016/034600 dated Jan. 3, 2018 (18 pages). |
International Preliminary Report on Patentability, Ch. II, for PCT Appln. Ser. No. PCT/US2016/034605 dated Apr. 25, 2018 (32 pages). |
International Search Report and Written Opinion for PCT Appln. Ser. No. PCT/US2016/034600 dated Oct. 27, 2016 (13 pages). |
International Search Report and Written Opinion for PCT Appln. Ser. No. PCT/US2016/034605 dated Oct. 7, 2016 (11 pages). |
Johns et al., "Tamper-Resistant LikeJacking Protection", SAP Security Research, Oct. 23, 2013, pp. 265-285, Germany (21 pages). |
Non-Final Office Action for U.S. Appl. No. 16/062,015 dated Apr. 24, 2020 (8 pages). |
Non-Final Office Action for U.S. Appl. No. 16/062,022 dated Jul. 7, 2020 (14 pages). |
Non-Final Office Action for U.S. Appl. No. 16/062,022 dated Sep. 17, 2019 (8 pages). |
Notice of Allowance for U.S. Appl. No. 16/062,015 dated Oct. 27, 2020 (6 pages). |
Notice of Allowance for U.S. Appl. No. 16/062,022 dated Mar. 16, 2021 (14 pages). |
Post et al., "Comparative Study and Evaluation of Online Ad-Blockers", 2015 2nd International Conference on Information Science and Security, IEEE, Dec. 14, 2015 (4 pages). |
Reis et al., "Detecting In-Flight Page Changes with Web Tripwires", NSDI '08: 5th USENIX Symposium on Networked Systems Design and Implementation, USENIX Association, Apr. 5, 2008, pp. 31-44 (14 pages). |
Second Office Action for CN Appln. Ser. No. 201680001924.0 dated Mar. 31, 2020 (13 pages). |
Also Published As
Publication number | Publication date |
---|---|
US20220255955A1 (en) | 2022-08-11 |
CN108028839A (en) | 2018-05-11 |
US20210203679A1 (en) | 2021-07-01 |
WO2017135985A1 (en) | 2017-08-10 |
US11363040B2 (en) | 2022-06-14 |
EP3335395A1 (en) | 2018-06-20 |
US20180367552A1 (en) | 2018-12-20 |
US10951634B2 (en) | 2021-03-16 |
US20200084231A1 (en) | 2020-03-12 |
US11947377B2 (en) | 2024-04-02 |
CN108028839B (en) | 2020-11-17 |
EP3840331A1 (en) | 2021-06-23 |
EP3335395B1 (en) | 2021-03-24 |
EP3840331B1 (en) | 2023-10-04 |
Similar Documents
Publication | Publication Date | Title |
---|---|---|
US11907360B2 (en) | Systems and methods for deploying countermeasures against unauthorized scripts interfering with the rendering of content elements on information resources | |
US11886546B2 (en) | Systems and methods for dynamically restricting the rendering of unauthorized content included in information resources | |
US11350165B2 (en) | Systems and methods for detecting improper implementation of presentation of content items by applications executing on client devices | |
US9767169B1 (en) | Enhancing search results for improved readability | |
US20210133823A1 (en) | Systems and methods for automatically managing placement of content slots in an information resource | |
US10205678B2 (en) | Systems and methods for client-side dynamic information resource activation and deactivation | |
CN108463822B (en) | Dynamic rendering interaction statistics for content elements of an information resource using visual styles | |
US11017154B2 (en) | Methods and systems for identifying styles of properties of document object model elements of an information resource | |
US20140033228A1 (en) | Configuring content display dimensions | |
US11797653B2 (en) | Hash-based dynamic restriction of content on information resources | |
US10049170B1 (en) | Methods and systems for selectively preventing third-party content from being displayed using undefined publisher identifier | |
US9665617B1 (en) | Methods and systems for generating a stable identifier for nodes likely including primary content within an information resource | |
CN117909603A (en) | System and method for preventing interference in rendering content elements on information resources |
Legal Events
Date | Code | Title | Description |
---|---|---|---|
FEPP | Fee payment procedure |
Free format text: ENTITY STATUS SET TO UNDISCOUNTED (ORIGINAL EVENT CODE: BIG.); ENTITY STATUS OF PATENT OWNER: LARGE ENTITY |
|
STPP | Information on status: patent application and granting procedure in general |
Free format text: APPLICATION DISPATCHED FROM PREEXAM, NOT YET DOCKETED |
|
AS | Assignment |
Owner name: GOOGLE LLC, CALIFORNIAFree format text: CHANGE OF NAME;ASSIGNOR:GOOGLE INC.;REEL/FRAME:055739/0421Effective date: 20170930Owner name: GOOGLE INC., CALIFORNIAFree format text: ASSIGNMENT OF ASSIGNORS INTEREST;ASSIGNORS:BURRIESCI, MATTHEW;ILLOWSKY, REBECCA;SIGNING DATES FROM 20160531 TO 20160603;REEL/FRAME:055724/0718 |
|
STPP | Information on status: patent application and granting procedure in general |
Free format text: DOCKETED NEW CASE - READY FOR EXAMINATION |
|
STPP | Information on status: patent application and granting procedure in general |
Free format text: NON FINAL ACTION MAILED |
|
STPP | Information on status: patent application and granting procedure in general |
Free format text: RESPONSE TO NON-FINAL OFFICE ACTION ENTERED AND FORWARDED TO EXAMINER |
|
STPP | Information on status: patent application and granting procedure in general |
Free format text: FINAL REJECTION MAILED |
|
STPP | Information on status: patent application and granting procedure in general |
Free format text: NON FINAL ACTION MAILED |
|
STPP | Information on status: patent application and granting procedure in general |
Free format text: RESPONSE TO NON-FINAL OFFICE ACTION ENTERED AND FORWARDED TO EXAMINER |
|
STPP | Information on status: patent application and granting procedure in general |
Free format text: NOTICE OF ALLOWANCE MAILED -- APPLICATION RECEIVED IN OFFICE OF PUBLICATIONS |
|
STPP | Information on status: patent application and granting procedure in general |
Free format text: PUBLICATIONS -- ISSUE FEE PAYMENT VERIFIED |
|
STCF | Information on status: patent grant |
Free format text: PATENTED CASE |