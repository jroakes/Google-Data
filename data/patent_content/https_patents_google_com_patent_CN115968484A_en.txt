CN115968484A - System and method for cross-media reporting by quickly merging data sources - Google Patents
System and method for cross-media reporting by quickly merging data sources Download PDFInfo
- Publication number
- CN115968484A CN115968484A CN202180046767.6A CN202180046767A CN115968484A CN 115968484 A CN115968484 A CN 115968484A CN 202180046767 A CN202180046767 A CN 202180046767A CN 115968484 A CN115968484 A CN 115968484A
- Authority
- CN
- China
- Prior art keywords
- panelist
- identifiers
- thumbnail
- subset
- data processing
- Prior art date
- Legal status (The legal status is an assumption and is not a legal conclusion. Google has not performed a legal analysis and makes no representation as to the accuracy of the status listed.)
- Pending
Links
Images
Classifications
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06Q—INFORMATION AND COMMUNICATION TECHNOLOGY [ICT] SPECIALLY ADAPTED FOR ADMINISTRATIVE, COMMERCIAL, FINANCIAL, MANAGERIAL OR SUPERVISORY PURPOSES; SYSTEMS OR METHODS SPECIALLY ADAPTED FOR ADMINISTRATIVE, COMMERCIAL, FINANCIAL, MANAGERIAL OR SUPERVISORY PURPOSES, NOT OTHERWISE PROVIDED FOR
- G06Q30/00—Commerce
- G06Q30/02—Marketing; Price estimation or determination; Fundraising
- G06Q30/0201—Market modelling; Market analysis; Collecting market data
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F9/00—Arrangements for program control, e.g. control units
- G06F9/06—Arrangements for program control, e.g. control units using stored programs, i.e. using an internal store of processing equipment to receive or retain programs
- G06F9/44—Arrangements for executing specific programs
- G06F9/455—Emulation; Interpretation; Software simulation, e.g. virtualisation or emulation of application or operating system execution engines
- G06F9/45533—Hypervisors; Virtual machine monitors
- G06F9/45558—Hypervisor-specific management and integration aspects
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F9/00—Arrangements for program control, e.g. control units
- G06F9/06—Arrangements for program control, e.g. control units using stored programs, i.e. using an internal store of processing equipment to receive or retain programs
- G06F9/44—Arrangements for executing specific programs
- G06F9/455—Emulation; Interpretation; Software simulation, e.g. virtualisation or emulation of application or operating system execution engines
- G06F9/45533—Hypervisors; Virtual machine monitors
- G06F9/45558—Hypervisor-specific management and integration aspects
- G06F2009/45583—Memory management, e.g. access or allocation
Abstract
Systems and methods for rapid consolidation of panelist activities are disclosed. The system may maintain a plurality of panelist identifiers, each stored with a respective plurality of offline content events, and identify, from the plurality of panelist identifiers, a subset of the panelist identifiers stored with a respective offline content event matching the target offline content event. The system may map each subset to a respective plurality of unique identifiers corresponding to virtual devices having virtual device attributes. For each of the subsets, the system can reduce the respective plurality of unique identifiers to a thumbnail representing the respective plurality of unique identifiers. The system may combine the thumbnails for each of the subset of panelist identifiers into an aggregated thumbnail and send the aggregated thumbnail to a computing device for analysis along with the aggregated thumbnail representing the online content event.
Description
RELATED APPLICATIONS
The benefit and priority of U.S. provisional patent application serial No. 63/082,980, entitled "Cross Media Reporting by Fast measuring method of TV panel Activity and YouTube Log," filed 24/9/2020, is hereby incorporated by reference in its entirety.
Background
In many cases, as part of data analysis or processing, the computing and data analysis system may determine an intersection or union of large data sets. Computing the union, intersection, or frequency of a large data set distributed across multiple sources typically involves sharing information about the large data set among the multiple sources. The information from each source may include private or protected information, and sharing such information may negatively impact privacy and security.
Disclosure of Invention
At least one aspect of the present disclosure relates to a method of cross-media reporting through rapid consolidation of panelist (panel) activities. The method may include maintaining, by a data processing system comprising one or more processors and memory, a plurality of panelist identifiers, each panelist identifier stored with a respective plurality of offline content events. The method may include identifying, by the data processing system, a subset of panelist identifiers stored with a corresponding offline content event of the corresponding plurality of offline content events that matches the target offline content event from among the plurality of panelist identifiers. The method may include mapping, by the data processing system, each of the subset of panelist identifiers to a respective plurality of unique identifiers corresponding to virtual devices having virtual device attributes. The method may include reducing, by the data processing system, for each of the subset of panelist identifiers, the respective plurality of unique identifiers to a sketch (sketch) representing the respective plurality of unique identifiers. The method may include combining, by the data processing system, the thumbnails for each of the subset of panelist identifiers into an aggregated thumbnail. The method may include sending, by the data processing system, the aggregated thumbnail to the computing device for analysis with the aggregated thumbnail representing the online content event.
In some implementations, generating the thumbnail for each of the subset of the plurality of panelist identifiers may include reducing, for each of the subset of the plurality of panelist identifiers, the respective plurality of unique identifiers to the thumbnail representing the respective plurality of unique identifiers further based on a sampling technique. In some embodiments, the sampling technique is depth thumbnail sub-sampling. In some implementations, the method can include determining a weight for each of the plurality of panelist identifiers.
In some embodiments, mapping each of the subset of the plurality of panelist identifiers to the respective plurality of unique identifiers is further based on a weight of each of the subset of the plurality of panelist identifiers. In some implementations, combining the thumbnails for each of the subset of the plurality of panelist identifiers into the aggregated thumbnail can include determining a maximum register value for the thumbnail across each of the subset of the plurality of panelist identifiers. In some implementations, combining the thumbnails for each of the subset of the plurality of panelist identifiers into the aggregated thumbnail can include selecting, as the value of the corresponding location in the aggregated thumbnail, a value of the location corresponding to the maximum register value for each location of the thumbnail across each of the subset of the plurality of panelist identifiers.
In some implementations, generating a thumbnail for each of a subset of the plurality of panelist identifiers can include generating a Hyper-Log (HLL) thumbnail for each of the subset of the plurality of panelist identifiers. In some implementations, mapping each panelist identifier in the subset of the plurality of panelist identifiers to the respective plurality of unique identifiers is further based on matching the attribute data of the panelist identifier with the attribute data of each of the respective plurality of unique identifiers. In some embodiments of the present invention, the substrate is,
in some implementations, maintaining a plurality of panelist identifiers each stored in association with a respective plurality of offline content event identifiers can include receiving a message from a panelist computing device corresponding to a panelist identifier of the plurality of panelist identifiers, the message identifying the respective offline event. In some implementations, maintaining a plurality of panelist identifiers each stored in association with a respective plurality of offline content event identifiers can include storing an identifier of a respective offline event identified in the message in association with the panelist identifier.
At least one other aspect of the disclosure relates to a system configured for cross-media reporting by quickly merging panelist activities. The system may include a data processing system including one or more processors coupled to a memory. Through a data processing system comprising one or more processors and memory, the data processing system may maintain a plurality of panelist identifiers, each panelist identifier stored with a corresponding plurality of offline content events. With the data processing system, the data processing system may identify, from among the plurality of panelist identifiers, a subset of panelist identifiers stored with a corresponding offline content event of the corresponding plurality of offline content events that matches the target offline content event. With the data processing system, the data processing system can map each of the subset of panelist identifiers to a respective plurality of unique identifiers corresponding to virtual devices having virtual device attributes. With the data processing system, the data processing system can reduce, for each of the subset of panelist identifiers, the respective plurality of unique identifiers to a thumbnail representing the respective plurality of unique identifiers. Through the data processing system, the data processing system can combine the thumbnails for each of the subset of panelist identifiers into an aggregated thumbnail. Through the data processing system, the data processing system may transmit the aggregated thumbnail to the computing device for analysis along with the aggregated thumbnail representing the online content event.
In some embodiments, to generate the thumbnail for each of the subset of the plurality of panelist identifiers, the data processing system is further configured to reduce, for each of the subset of the plurality of panelist identifiers, the respective plurality of unique identifiers to the thumbnail representative of the respective plurality of unique identifiers further based on a sampling technique. In some embodiments, the sampling technique is depth thumbnail sub-sampling. In some embodiments, the data processing system is further configured to determine a weight for each of the plurality of panelist identifiers. In some embodiments, the data processing system is further configured to map each of the subset of the plurality of panelist identifiers to a respective plurality of unique identifiers further based on the weight of each of the subset of the plurality of panelist identifiers.
In some embodiments, to combine the thumbnails for each of the subset of the plurality of panelist identifiers into an aggregated thumbnail, the data processing system is further configured to determine a maximum register value for the thumbnail across each of the subset of the plurality of panelist identifiers. In some implementations, to combine the thumbnails for each of the subset of the plurality of panelist identifiers into the aggregated thumbnail, the data processing system is further configured to select, as the value of the corresponding location in the aggregated thumbnail, the value of the location corresponding to the maximum register value for each location of the thumbnail across each of the subset of the plurality of panelist identifiers.
In some embodiments, to generate a thumbnail of each of the subset of the plurality of panelist identifiers, the data processing system is further configured to generate a HLL thumbnail of each of the subset of the plurality of panelist identifiers. In some embodiments, to map each panelist identifier in the subset of the plurality of panelist identifiers to a respective plurality of unique identifiers, the data processing system is further configured to match the attribute data of the panelist identifier with the attribute data of each of the respective plurality of unique identifiers. In some implementations, to maintain a plurality of panelist identifiers each stored in association with a respective plurality of offline content event identifiers, the data processing system is further configured to receive a message from a panelist computing device corresponding to a panelist identifier of the plurality of panelist identifiers, the message identifying the respective offline event. In some embodiments, to maintain a plurality of panelist identifiers each stored in association with a respective plurality of offline content event identifiers, the data processing system is further configured to store an identifier of the respective offline event identified in the message in association with the panelist identifier.
Yet another aspect of the disclosure relates to a non-transitory computer-readable storage medium having instructions embodied thereon, the instructions being executable by one or more processors to perform a method for cross-media reporting by rapidly merging panelist activities. The method may include maintaining, by a data processing system comprising one or more processors and memory, a plurality of panelist identifiers, each panelist identifier stored with a respective plurality of offline content events. The method may include identifying, by the data processing system, a subset of panelist identifiers stored with a corresponding offline content event of the corresponding plurality of offline content events that matches the target offline content event from among the plurality of panelist identifiers. The method can include mapping, by the data processing system, each of the subset of panelist identifiers to a respective plurality of unique identifiers corresponding to virtual devices having virtual device attributes. The method may include reducing, by the data processing system, for each of the subset of panelist identifiers, the respective plurality of unique identifiers to a thumbnail representing the respective plurality of unique identifiers. The method may include combining, by the data processing system, the thumbnails for each of the subset of panelist identifiers into an aggregated thumbnail. The method may include sending, by the data processing system, the aggregated thumbnail to a computing device for analysis with the aggregated thumbnail representing the online content event.
These and other aspects and embodiments are discussed in detail below. The foregoing information and the following detailed description include illustrative examples of various aspects and embodiments, and provide an overview or framework for understanding the nature and character of the claimed aspects and embodiments. The accompanying drawings provide an illustration and a further understanding of the various aspects and embodiments, and are incorporated in and constitute a part of this specification. The various aspects may be combined, and it will be readily understood that features described in the context of one aspect of the invention may be combined with other aspects. Aspects may be implemented in any convenient form. For example, the program may be carried on a suitable carrier medium (computer readable medium) which may be a tangible carrier medium (e.g. a disk) or an intangible carrier medium (e.g. a communications signal) by means of a suitable computer program. The aspects may also be implemented using suitable apparatus in the form of a programmable computer running a computer program arranged to implement the aspects. As used in the specification and in the claims, the singular form of "a", "an", and "the" include plural referents unless the context clearly dictates otherwise.
Drawings
The figures are not intended to be drawn to scale. Like reference numbers and designations in the various drawings indicate like elements. For purposes of clarity, not every component may be labeled in every drawing. In the drawings:
FIG. 1 illustrates a block diagram of an example system for cross-media reporting through rapid consolidation of panelist activities;
FIG. 2 illustrates a block diagram of an example representation of a mapping between panelist identifiers and virtual identifiers;
FIG. 3 illustrates a block diagram of an example representation of an example thumbnail register generated using a virtual identifier;
FIG. 4 illustrates a block diagram of an example subset sampling of a set of virtual identifiers for thumbnail generation;
FIG. 5 illustrates a block diagram of an example subset sample of a set of virtual identifiers for thumbnail generation using weight values;
FIG. 6 illustrates a block diagram of an example modified subset sampling of a set of virtual identifiers for thumbnail generation;
FIG. 7 illustrates a block diagram of an example depth selection for subset samples of multiple sets of virtual identifiers;
FIG. 8 illustrates an example flow diagram of a method for cross media reporting through rapid consolidation of panelist activities;
FIG. 9 illustrates the general architecture of an illustrative computer system that may be used to implement any of the computers discussed herein.
10A and 10B depict example experimental data of depth thumbnail subsampling from virtual identifiers of different depths;
11A and 11B depict example experimental data from depth thumbnail subsampling using a small portion of a virtual identifier;
12A and 12B depict example experimental data from depth thumbnail subsampling using exponentially distributed virtual identifiers;
13A and 13B depict example experimental data from a simple depth thumbnail sub-sampling of a virtual identifier;
14A and 14B depict example experimental data from depth thumbnail sub-sampling of virtual identifiers of various depths merged with normal thumbnails of various numbers of virtual identifiers; and
fig. 15A and 15B depict example experimental data from pseudo-polynomial sampling of a virtual identifier.
Detailed Description
The following is a detailed description of various concepts and embodiments thereof related to techniques, approaches, methods, apparatuses and systems for cross-media reporting through rapid merging of panelist activities. The various concepts introduced above and discussed in greater detail below may be implemented in any of numerous ways, as the described concepts are not limited to any particular implementation. Examples of specific embodiments and applications are provided primarily for illustrative purposes.
Content providers may provide content to client devices in a variety of online formats, such as text, images, videos, web pages, applications, and so forth. Content providers may also provide content in an offline format, such as a radio broadcast, video broadcast, or other type of one-to-many broadcast format, and so forth. The number and attributes of client devices accessing online content can be easily monitored and analyzed because the online content is provided in response to requests. The request for online content may include information about the client device making the request and may be recorded in a database of the content provider for future processing. By analyzing the stored content request information, the amount of content provided and attributes of the client device to which the content is provided may be collected.
In contrast, offline content may not be provided in response to a request, and thus the content provider may not maintain accurate one-to-one information about the devices accessing the offline content. To estimate the number or nature of devices accessing offline content, different techniques with varying degrees of success may be used. For example, content providers often utilize panelist devices that represent other similar devices that access offline content. The panelist device may monitor and locally record events associated with offline content accessed by the panelist computing device. These events may be reported to a content provider computing device, which may analyze and extrapolate the events to a larger population of devices, for example, to estimate the number of panelist computing devices that accessed offline content and participated in similar offline content events. The properties of the extrapolated device may also be estimated in a similar manner.
However, extrapolation techniques produce data sets that are incompatible with data sets generated by monitoring techniques for online content. If a content provider provides content items, such as video, text, images, audio streams, or any other type of content, in both offline and online formats, it can be challenging for the content provider to combine these data sets for complete analysis. Furthermore, when extrapolating very large data sets for analysis, it may be difficult to efficiently store and process information that yields accurate results in a computationally feasible manner. Accordingly, it would be advantageous for a system to provide improved monitoring and analysis techniques for offline content events, which can generate data sets that are easy to process and combine with data sets generated for online content.
The system and method of the technical solution provides such an improvement. More specifically, the systems and methods described herein may maintain event messages received from panelist computing devices participating in offline content. In addition, the systems and methods described herein may maintain and update associations between identifiers of panelist computing devices and corresponding lists of unique identifiers that may represent virtual devices. Each unique identifier may represent various attributes of the virtual user that would otherwise be attributed to the real user, such as gender, location, interest, and age, among other attributes. For each panelist identifier associated with a target offline content event, the systems and methods described herein can generate a compressed data structure or thumbnail representing a list of unique identifiers associated with each respective panelist.
The compressed representation using the unique identifier associated with each panelist provides an improvement over other analytical systems. First, rather than sequentially computing and updating a single representative data structure for all panelists, thumbnails representing unique identifiers associated with each panelist may be computed in parallel. The thumbnail generated for each panelist may be, for example, a HyperLogLog thumbnail or a LiquidLegins thumbnail (sometimes referred to as an Exponential Bloom Filter (EBF) thumbnail or an Arbitrarily Distributed Bloom Filter (ADBF) thumbnail). These thumbnail formats are chosen because they can be easily combined with other thumbnails generated using a universal realm unique identifier.
Each panelist computing device may represent thousands or even millions of unique identifiers, which presents computational challenges. However, by analyzing only the panelists participating in the targeted (e.g., designated) offline content, further computational gains can be achieved. For example, in the case where a panelist is not associated with any event of the targeted offline content, the unique identifier associated with that panelist can be ignored, thereby further improving computing performance. Once the representative thumbnails have been calculated for each panelist computing device, the representative thumbnails can be combined into a final representative thumbnail. The final representative thumbnail may represent all unique identifiers associated with the target offline content, and may be analyzed along with other thumbnails, such as thumbnails generated from online content event information. Thus, the systems and methods described herein can accurately estimate and generate a representative thumbnail of a target offline content event in a manner compatible with thumbnails generated from online content events.
In general, a content provider or aggregator of data from content providers is able to report the number of unique devices that are "touched" (e.g., accessed, viewed, downloaded, interacted with, or any other type of impression, etc.) through the content or content channel. The data may be decomposed by various device attributes (e.g., demographic data such as age, gender, time, location, device information such as device type, web browser type, application type, date, device identifier, etc.) based on the first party log. The first party log may be maintained in a memory or other data storage of the content provider or other type of first party. To anonymize data, the information report may be a "virtual" based report. This means that rather than revealing personal or actual identifying information about the user, each content-related event (e.g., accessed content, viewed content, interacted with content, etc.) is associated with one or more virtual identifiers (sometimes referred to as "VPIDs" or "VIDs") and with a corresponding event type. Thus, any content provider can analyze the VID to find touches to any particular item or content packet.
As noted above, however, this approach is not applicable to traditional offline content, such as Television (TV) or radio (e.g., internet radio, amplitude Modulation (AM) radio, frequency Modulation (FM) radio, etc.). Other approaches do not utilize virtual identifiers and therefore do not include granular attribute data associated with the virtual identifiers. Moreover, the techniques described herein readily accept additional analysis attributes (e.g., specifications for additional attributes stored in association with the VID, etc.) for further analysis.
This disclosure describes at least two of these techniques. The first includes techniques to correlate or map panelist identifiers to virtual identifiers, while the second includes the use of depth map sampling to increase the speed of analyzing panelist-VID mappings. The techniques described herein may utilize a VID model populated with virtual identifiers that reflect various attributes of the actual audience for the content (e.g., about 3.282 billion virtual identifiers for the United states, how many males or females can access the television or Internet, live in different locations, etc.).
To perform VID-panelist mapping, the systems and methods described herein may receive panelist activities from the panelist computing devices. The systems and methods described herein may extrapolate panelist computing device activities (e.g., content events executed by or associated with the panelist computing device, etc.) through the weight values of each panelist computing device. For example, if a first panelist computing device has a weight value of 10,000, and that panelist accesses a particular content item, this information may be extrapolated to identify 10,000 VIDs (e.g., with similar attributes) that represent user devices that will likely access the same content. The panelist-VID association is such that: (1) Each VID is associated with exactly one panelist computing device, and (2) each panelist is associated with a VID that is proportional to their corresponding weight value.
Intuitively, the system and method may find and associate together exactly 10K VIDs that can access offline content media based on similar locations (e.g., from the same region, etc.) and demographic buckets (e.g., similar demographic information, etc.) or attributes as the panelist computing device. However, there may be hundreds or thousands of small group member computing devices in the same geographic demographic bucket, how do we do it more systematically? Furthermore, if tomorrow's panelists' weights drop from 10K to 9.9K, the VID associations must be updated in a manner that does not over-utilize computing resources. In addition, content providers may run reports that span today and tomorrow, so the VIDs associated with the various panelists should not change too much or may generate inconsistent results.
One solution is to use affinity (affinity) hashing. Essentially, assume that there are Q panelists with weights w _1, w _2,. And w _ Q and P VIDs in the geographic demographic pool. For each panelist-VID pair (Q, P), where Q is between 1 and Q (including 1 and Q), and P is between 1 and P (including 1 and P), a negative exponential pseudorandom variable with rate w _ Q may be generated as the affinity score a (Q, P). Each VID p can then pick the panelist Q ' with the highest affinity score between them (e.g., for any other Q between 1 and Q (including 1 and Q), A (Q ', p) is greater than A (Q ', p.) the nature of the exponential variable is such that the panelist will be associated with a VID that is proportional to their panelist weight, (e.g., a panelist with a weight of 1000 expects to be associated with twice the VID of another panelist with a weight of 500, etc.). In other words, for each VID in the geo-demographic bucket, the panelist with a probability proportional to their respective weight can be sampled.
The team members 1,2.,. The number of VIDs associated with Q may be proportional to their weights w _1, w _2.. W _ Q modulo a negligible binomial sampling variance, and the total number of associated VIDs may be the number P of available VIDs. Thus, once P is fixed, the panelist weights can be taken relatively, (e.g., if all weights are multiplied by 10, the same correlation results are obtained, etc.). Thus, if each panelist is to be associated with as many VIDs as their weights, P may be equal to the sum of the panelist weights w _1+ w _2+. + w _ Q.
For each panelist, when various content events are reported, the panelist's viewing or content activity may be extrapolated to the associated VID, which may be followed by deduplication with the online content event. This may result in a complete picture of the content event associated with the virtual identifier across online and offline content. However, storing thousands of VIDs per panelist (e.g., and associated attributes of each VID, etc.) may be computationally expensive and may not scale efficiently. Thus, the systems and methods described herein may utilize a HyperLogLog (HLL) thumbnail, which may be a data structure that may be used to approximate a unique object count. The HLL outline may (1) approximately encode each panelist's associated VID; (2) Occupying storage constant space in computer memory regardless of how many VIDs are associated with the panelist; and (3) can be easily merged with another HLL sketch representing other content events (e.g., online content events, content events from other content providers, etc.) over a constant time to reach a reach value across the aggregation of online and offline content events. Accordingly, the systems and methods described herein may generate HLL thumbnails (or any other type of thumbnail described herein, etc.) for each panelist member computing device that represent the VIDs (e.g., and attributes associated with the VIDs, etc.) associated with each respective panelist. These thumbnails can then be combined for further processing.
To improve the computational efficiency of these steps, depth thumbnail sampling may be utilized. As described above, associating panelists and VIDs may include the calculation of affinity scores for each panelist-VID pair within a geographic demographic bucket (e.g., groupings of geographic or demographic similarities, etc.), which may be computationally expensive. The systems and methods described herein can avoid such expensive operations while still obtaining a quality approximation of the HLL thumbnail. To do so, the systems and methods described herein may aggregate all VIDs into an initial "depth" thumbnail, and then sample from registers in the depth thumbnail to obtain a thumbnail for each desired panelist without compromising the accuracy of the touchdown estimation.
Before explaining this solution, it may be helpful to first explain at a higher level how the HLL outline works in the context of counting unique VPIDs. An HLL schema may contain thousands of registers, typically 14 to the power of 2, i.e., about 16K registers. However, other numbers of registers may be used. When a new VPID is to be included in the thumbnail, it may be pseudo-randomly pointed to one of the 16K registers and processed there. Each register may be empty or may hold a number between 0 and 1 of the register outline. Within the register, the incoming VPID may be hashed to a uniform pseudo-random variable between 0 and 1. If the hashed value is less than the existing register thumbnail, the latter may be updated to be equal to the former. In other words, if a register has processed R unique VPIDs, it holds the minimum of the R corresponding uniform random variables. Mathematically, this minimum has a distribution of exponential random variables close to the rate R, so it can later provide an approximately unique count of the number of VPIDs contributing to the register. Finally, the unique counts across the registers can be aggregated to obtain a total cardinality estimate of the VPID pointing to the thumbnail.
The above-described optimization techniques may operate at the register level (e.g., implemented at each register of the HLL thumbnail, etc.) rather than at the HLL thumbnail level. Thus, the techniques described for these optimizations are from the perspective of a single register in the HLL sketch. The techniques described herein for depth thumbnail sub-sampling may sample from depth thumbnails generated from all VIDs maintained, for example, using the systems and methods described herein. The goal is to reach the register outline of each panelist without actually going through the associations described in the previous section. A pool is defined as a set of VIDs with the same attributes to a particular register, and a depth pool sketch is defined as the D smallest uniform pseudo-random variables mapped from all VIDs in the pool, where D is a predefined depth. In other words, the depth Chi Lvetu s _1< = s _2< = s _ D. The VID that generates s _1 may be associated with a certain panelist, the VID that generates s _2 may be associated with a certain panelist, and so on. So from s _1 to s _2 to.. To s _ D, for each element of the depth pool sketch, using affinity hashing, one can sort out the panelists whose probability is proportional to their weight. If a panelist thumbnail has not been assigned, then the element is made the register for the panelist thumbnail. Assuming that team member 3 is assigned s _2 and s _4, then his or her register thumbnail is s _2 because s _4 came later.
It is clear that if the depth D is infinite, this may be equivalent to a normal correlation, with no acceleration. However, D can be as small as 10, so after the above process, at most the register thumbnails are assigned to D widget members, while the rest are still not given register thumbnails. Assume that the pool has P VIDs. So far, only the register thumbnails from D have been associated with the panelist, while the remaining P-Ds do not. First, a sample from the polynomial distribution based on the weights w _1, w _2., w _ Q may be obtained to decide how these P-ds are distributed among the Q panel members. Suppose the distribution is b _1, b _2.., b _ Q, which may collectively be P-D. Then, for each panelist q that has not yet been assigned to a register thumbnail, if b _ q is zero, then that panelist's register thumbnail may eventually be determined to be empty. Otherwise, the team member's register sketch may be set to the minimum of b _ q uniform pseudorandom variables between s _ D and 1, bearing in mind that s _ D, the register sketch itself, may also lie between 0 and 1. In short, the system and method may identify that the minimum of b _ q uniform random variables is between s _ D and 1, and may sample accordingly. Note that the last sample can be implemented quickly using the Inverse Transform Sampling (ITS), and therefore does not take time proportional to b _ q.
After each register of the depth thumbnail has been examined using the above-described process, the systems and methods described herein may end up computing a register thumbnail for each panelist and each register. The register thumbnails for each panelist may then be dropped together, generating an HLL thumbnail for that panelist for further analysis. It can be shown that for accurate results, a large D value may not be needed, and a depth of 1 or even 0 may be sufficient for the desired result. If a large touch value is to be determined, it may be reasonable to consider a larger depth value, since we need that the HLL thumbnails representing offline content events must reasonably intersect with the HLL thumbnails representing online content events. This may correspond to an aggregated HLL thumbnail representing a VID accessing online and offline content. Theoretical limits for total touching error due to finite depth as experimentally confirmed are derived. For example, in some experiments and under certain conditions, a depth of 10 may achieve a relative error of 1%.
The systems and methods described herein may perform attribute matching between VIDs and panelist identifiers. For example, one step may include grouping VIDs and panelist identifiers that have the same attributes. Each VID may be associated with a set of location identifiers of different granularity, which may be matched for each panelist's location identifier.
Next, for any given event (e.g., content event, etc.), each panelist may be associated with a weight value. In some embodiments, weight values may be assigned daily. For example, the weights of the panelists may vary on different days, which may result in different numbers of VIDs being represented by the panelists each day. This can maintain touch consistency. Although in this scenario, panelist identifiers may represent different numbers of people on different days, using weighted consistent hashing may reduce VID confusion (shuffling) between panelists.
In some implementations, the weight values of the active panelists (e.g., those with a number of participating offline content events greater than a predetermined threshold, etc.) may be rescaled to match the entire population of VIDs, and all other panelist weights may be set to zero. This means that if the maximum reporting window is a predetermined time window (e.g., 90 days, etc.), any given event may have a predetermined number of weights corresponding to all time windows (e.g., corresponding to time windows, 90 weights for 90 days, etc.).
The association of VIDs to panelist identifiers may be performed based on the weights and pool sizes. If the weight is determined on a day-by-day basis, or if the weight is determined for a range of dates, then have a weight w p Can be associated with the members p in the pool
The weights of the panelists may be proportional to the population they represent. As described above, one step in generating the panelist-VID mapping includes assigning a VID to the panelist in proportion to the weight of the panelist. Therefore, how and when the weight values of the panelists change significantly affects the mapping of the panelists to the VIDs. Some possible weight change scenarios are included below.
In one approach, panelists may have a weight value that depends on a particular time period (e.g., on a daily basis, on a weekly basis, etc.), regardless of which, if any, offline content events they are involved in. The mapping may be generated off-line and may be keyed by date (e.g., indexed, etc.). For example, there may be 2 x 365=730 mappings from the small group member identifier to the VID.
Another approach involves weighting the panelists through intervals. In this scenario, C (2 × 365, 2) ≈ 266K mappings may be generated. For example, the system and method may generate and deactivate 2 x 365-1=729 maps per day. However, this may not guarantee consistency.
As described herein, depth thumbnail sub-sampling can be used to improve the computational performance of the HLL thumbnail calculation process without significantly impacting the touchdown estimation accuracy. The experimental data included herein (e.g., in fig. 10A-15B, etc.) indicates that a relative error of 1.5% produced by depth thumbnail sub-sampling may be reasonable. For the union of the disjoint subset and another independent subset representing an online content event, an approximate theoretical upper bound on relative error is derived, so that the depth required for depth thumbnail sub-sampling can be determined.
Given Q panelists and a pool P with | P | VIDs, the panelist-VID association can take O (Q | P |) operations because each VID, when it is assigned to a panelist, produces the outer product of the panelist and the VID. Although the complexity O (Q | P |) may be computationally affordable for some systems, the computation of large data sets may still take longer than deemed acceptable for some implementations (e.g., smaller time windows, etc.). Using techniques described herein, by approximating HL of panelists participating in offline content eventsL sketch, the process can be improved to O (QD + | P | log2D + | P | log) 2 Q), where D is a predetermined depth value.
In the description that follows, the panelists (sometimes referred to as "panelist identifiers") and subsets may be interchanged in that the VID subset of the VID pool is assigned to the panelist (e.g., panelist identifier, etc.).
In HLL thumbnails, the elements added to the thumbnail may be randomly distributed to the registers of the thumbnail. In each register, each element may be hashed to an exponential random variable. The smallest exponential random variable of the register may be stored in the register, which may carry a robust signal with respect to cardinality.
At least two goals are achieved when generating an outline to approximate the panelist-VID association mapping. One target may be a volume target. For the volume goal, thumbnails may be such that the number of VIDs associated may be proportional to the panelist weight. Another target may be an interaction target, meaning that thumbnails may be merged with thumbnails representing online content events to estimate deduplication touchdowns across two platforms (e.g., thumbnails from different spaces are appropriately "interacted with"). One way to meet the volume target is by depth thumbnail sub-sampling. One way to satisfy the interaction targets is by deriving or determining appropriate depth values for the depth thumbnail sub-samples. The approach of depth thumbnail sub-sampling is described below in conjunction with fig. 3-7.
Referring now to fig. 1, a block diagram of an example system 100 for cross media reporting by rapid merging of panelist activities is illustrated, according to one or more implementations. The system 100 can include at least one data processing system 105, at least one network 110, one or more panelist devices 120A-N (sometimes generically referred to as the panelist device(s) 120 "), one or more content providers 160A-N (only a-B are depicted, sometimes generically referred to as the content provider(s) 160"), and at least one database 115. The data processing system can include at least one identifier maintainer 130, at least one panelist identifier module 135, at least one panelist mapper 150, at least one thumbnail generator 145, at least one thumbnail combiner 150, and at least one thumbnail transmitter 155. The database 115 may include one or more panelist identifiers 165A-N (sometimes generically referred to as the panelist identifier(s) 165 "), one or more panelist attributes 170A-N (sometimes generically referred to as the panelist attribute(s) 170"), one or more virtual identifiers 175A-N (sometimes generically referred to as the virtual identifier(s) 175 "), and one or more virtual attributes 180A-N (sometimes generically referred to as the virtual attribute(s) 180"). In some implementations, the database 115 may be external to the data processing system 105, and the data processing system 105 or a component thereof may query the database 115 via the network 110.
Each of the components of system 100 (e.g., data processing system 105, network 110, panelist devices 120A-N, content providers 160A-N, database 115, identifier maintainer 130, panelist identifier module 135, panelist mapper 150, thumbnail generator 145, thumbnail combiner 150 and thumbnail transmitter 155, panelist identifiers 165A-N, panelist attributes 170A-N, virtual identifiers 175A-N and virtual attributes 180A-N, etc.) may be implemented using hardware components or a combination of software and hardware components of a computing system (e.g., computing system 900, data processing system 105, any other computing system described herein, etc.) described in detail herein in connection with FIG. 9. Each component of the data processing system 105 may perform the functions described in detail herein.
The data processing system 105 may include at least one processor and memory, such as processing circuitry. The memory may store processor-executable instructions that, when executed by the processor, cause the processor to perform one or more of the operations described herein. The processor may comprise a microprocessor, an Application Specific Integrated Circuit (ASIC), a Field Programmable Gate Array (FPGA), the like, or a combination thereof. The memory may include, but is not limited to, an electronic, optical, magnetic, or any other storage or transmission device capable of providing a processor with program instructions. The memory may also include a floppy disk, a CD-ROM, a DVD, a magnetic disk, a memory chip, an ASIC, an FPGA, a read-only memory (ROM), a Random Access Memory (RAM), an Electrically Erasable Programmable ROM (EEPROM), an Erasable Programmable ROM (EPROM), a flash memory, an optical medium, or any other suitable memory from which a processor can read instructions. The instructions may include code from any suitable computer programming language. The data processing system 105 may include one or more computing devices or servers, which may perform the various functions described herein. The data processing system 105 may include any or all of the components of the computer system 900 described herein in conjunction with fig. 9 and perform any or all of its functions.
The network 110 may include a computer network such as the internet, a local area network, a wide area network, a metropolitan area network, or other local area network, an intranet, a satellite network, other computer networks such as voice or data mobile telephone communication networks, and combinations thereof. The data processing system 105 of the system 100 may communicate with, for example, at least one content provider 160 or at least one panelist device 120 via the network 110. The network 110 may be any form of computer network capable of relaying information between the panelist device 120, the content provider 160, the data processing system 105, and one or more content sources (such as web servers), among others. In some implementations, the network 110 can include the internet and/or other types of data networks, such as a Local Area Network (LAN), a Wide Area Network (WAN), a cellular network, a satellite network, or other types of data networks. Network 110 may also include any number of computing devices (e.g., computers, servers, routers, network switches, etc.) configured to receive and/or transmit data within network 110. Network 110 may also include any number of hardwired and/or wireless connections. Any or all of the computing devices described herein (e.g., data processing system 105, computer system 900, etc.) may communicate wirelessly (e.g., via WiFi, cellular, radio, etc.) with transceivers hardwired (e.g., via optical cable, CAT5 cable, etc.) to other computing devices in network 110. Any or all of the computing devices described herein (e.g., data processing system 105, computer system 900, etc.) may also communicate wirelessly with the computing devices of network 110 via a proxy device (e.g., a router, network switch, or gateway).
Database 115 may be a database configured to store and/or maintain any of the information described herein. Database 115 may maintain (e.g., store, etc.) one or more data structures that may contain, index, or otherwise store each of the values, complex numbers, sets, variables, vectors, or thresholds described herein. The database 115 may be accessed using one or more memory addresses, index values, or identifiers of any items, structures, or regions maintained in the database 115. The database 115 may be accessed by components of the data processing system 105 or any other computing device described herein via the network 110. In some embodiments, the database 115 may be internal to the data processing system 105. In some embodiments, the database 115 may reside external to the data processing system 105 and may be accessed via the network 110. The database 115 may be distributed over many different computer systems or storage elements and may be accessed via the network 110 or a suitable computer bus interface. The data processing system 105 (or any component thereof) may store the results of any or all of the calculations, determinations, selections, identifications, generations, constructions, or operations in one or more areas of memory of the data processing system 105, or in the database 115, in one or more data structures indexed or identified by appropriate values. Any or all of the values stored in database 115 may be accessed by any of the computing devices described herein (such as data processing system 105) to perform any of the functions or roles described herein.
The panelist devices 120 may each include at least one processor and memory, such as processing circuitry. The memory may store processor-executable instructions that, when executed by the processor, cause the processor to perform one or more of the operations described herein. The processor may comprise a microprocessor, an Application Specific Integrated Circuit (ASIC), a Field Programmable Gate Array (FPGA), or the like, or a combination thereof. The memory may include, but is not limited to, an electronic, optical, magnetic, or any other storage or transmission device capable of providing a processor with program instructions. The memory may also include a floppy disk, a CD-ROM, a DVD, a magnetic disk, a memory chip, an ASIC, an FPGA, a read-only memory (ROM), a Random Access Memory (RAM), an Electrically Erasable Programmable ROM (EEPROM), an Erasable Programmable ROM (EPROM), a flash memory, an optical medium, or any other suitable memory from which a processor can read instructions. The instructions may include code from any suitable computer programming language. The panelist devices 120 may each include one or more computing devices or servers that may perform the various functions described herein. The panelist devices 120 may each include any or all of the components of the computer system 900 described herein in connection with fig. 9 and perform any or all of their functions.
Each panelist device 120 may be a computing device configured to communicate via the network 110 to send messages to or receive messages from the data processing system 105 or the content provider 160. Panelist device 120 may be a desktop computer, laptop computer, tablet computer, smartphone, personal digital assistant, mobile device, consumer computing device, server, client, digital video recorder, television set-top box, video game console, or any other computing device configured to communicate via network 110, and the like. The panelist device 120 may send one or more requests for content to the content publisher, the content provider 160, or the data processing system 105. The panelist device 120 may receive online content from the device to which the request was sent, wherein the content is selected based on device information about the client device 120 responsible for the request (e.g., device model, device type, device operating system version, device time, device date, any other contextual information described herein, etc.).
The panelist device 120 may access the offline content 190, for example, from one or more cable modems (e.g., external or internal to the panelist device 120, etc.), fiber optic endpoints, radio broadcasts (including television broadcasts, etc.). Offline content may include any kind of television broadcast (e.g., via a cable network, fiber optic network, hybrid network, or radio transmission, etc.), radio broadcast (e.g., AM radio, FM radio, internet radio, etc.), or any other type of offline (e.g., not provided in a one-to-one manner) content broadcast (e.g., including internet live streaming, streaming video, streaming audio, etc.). The panelist device 120 may receive the offline content, for example, from one or more content providers 160 configured to provide the offline content via any of the means described above. Each panelist device 120 may be assigned an identifier unique to that panelist device 120 and stored in the database 115 as a panelist identifier 165. In addition, each panelist device 120 may be associated with panelist attributes (e.g., demographic information such as age, interests, gender, etc., and location information such as region, coordinates, or other location information, etc., as well as any type of interest or other information).
The panelist device 120 may report information regarding the offline content event to the data processing system 105. If the panelist device 120 accesses one or more items of offline content (e.g., television programs, radio programs, any other type of offline content, etc.), the panelist device 120 may record the event as a content event in the memory of the panelist device 120. Content events may be recorded to include information about other such events, such as the duration of time that the panelist device 120 accessed the offline content associated with the event, the time of day that the panelist device 120 accessed the offline content associated with the event, whether the panelist device accessed other offline content (e.g., switched between offline content, etc.), and which other offline content the panelist device 120 accessed. Each content event may be associated with one or more identifiers (e.g., channel identifiers, program identifiers, etc.) of accessed offline content. The panelist device 120 may send information about each content event, including all identifiers and associated information, in one or more content event messages to the data processing system 105. The content event message may include any information associated with the content event described herein and may include an identifier 165 of the panelist device 120 and, in some embodiments, attributes of the panelist device 120.
Content provider 160 may include at least one processor and memory, such as processing circuitry. The memory may store processor-executable instructions that, when executed by the processor, cause the processor to perform one or more of the operations described herein. The processor may comprise a microprocessor, an Application Specific Integrated Circuit (ASIC), a Field Programmable Gate Array (FPGA), the like, or a combination thereof. The memory may include, but is not limited to, an electronic, optical, magnetic, or any other storage or transmission device capable of providing a processor with program instructions. The memory may also include a floppy disk, a CD-ROM, a DVD, a magnetic disk, a memory chip, an ASIC, an FPGA, a Read Only Memory (ROM), a Random Access Memory (RAM), an Electrically Erasable Programmable ROM (EEPROM), an Erasable Programmable ROM (EPROM), a flash memory, an optical medium, or any other suitable memory from which a processor may read instructions. The instructions may include code from any suitable computer programming language. Content provider 160 may include one or more computing devices or servers that may perform the various functions described herein. The content provider 160 may include any or all of the components of the computer system 1000 described herein in connection with fig. 10 and perform any or all of its functions.
The content provider 160 may provide one or more information resources that may include online content or scripts to retrieve online content. The content provider 160 may record which client devices accessed the online content item, including the time of access to the online content, the identifier and attributes of the client devices accessing the online content. The content provider 160 may provide content items that are displayed with the embedded video. The content item may include embedded content and overlay content. Instead of hosting the video, embedded content may be displayed for a limited period of time in a manner similar to news flashes, emergency broadcasts, or commercials that are displayed during traditional television broadcasts. The overlay content may be displayed on top of the embedded video. The overlay content may include any suitable content, such as picture-in-picture video, pop-up notifications, or banners. Content provider 160 may provide online content in response to one or more requests for content from client devices. Thus, the content provider 160 may provide and record content events on a one-to-one basis with the requesting device. This information may be tracked and maintained in memory of the content provider 160, and additional processing may be used to generate a thumbnail representing a client device accessing a specified content item or activity.
Some content providers (e.g., content provider 160B) may provide offline content 190. These content providers 160 may broadcast content, for example, via a cable network, a fiber network, a hybrid network, or radio transmission. Because the offline content 190 may be broadcast and not delivered on a one-to-one basis as the online content, the content providers 160 that provide the offline content do not maintain information about the offline content accessed by offline content devices (e.g., such as the panelist devices 120). While the panelist device 120 may communicate the offline content event to the data processing system 105, the panelist device 120 represents a small fraction of the number of devices accessing the offline content 190. Thus, the content provider 160 is largely unaware of the attributes of the devices accessing the offline content 190. To address this issue, the data processing system 105 performs the functions described herein to accurately estimate attributes of devices accessing online content based on attributes of the panelists accessing the offline content.
The panelist identifiers 165 maintained in the database 115 may be stored in one or more data structures, such as a list or index lookup. Each panelist identifier may be associated with one or more panelist attributes 170 describing a particular panelist device 120. Thus, each panelist device 120 is associated with a respective panelist identifier 165 and a respective set of panelist attributes 170. When it is determined that the data processing system 105 receives a message describing an offline content event, the data processing system 105 can associate the event with an appropriate panelist identifier 165 (e.g., an identifier corresponding to the panelist device from which the message was received, etc.) and the panelist attribute 170 for that panelist device. The message describing the offline content event, or its content, may be stored in a memory of the data processing system 105.
The panelist attributes 170 may include attributes associated with the respective panelist devices 120, and may be stored in one or more lists or index data structures in the database 115. Panelist attributes 170 may include demographic information, such as age, gender, interests, and other demographic information, and may include various granularities of location information, including regional information, coordinate information, or other types of location information. Each group of panelist attributes 170 may be associated with a respective one of the panelist devices 120 and a respective one of the panelist identifiers 165.
The virtual identifier 175 may be an identifier of a virtual user or a virtual device. A virtual device is a device that may have general attributes or characteristics that can represent a user or device, but does not represent an actual real device. The virtual identifier may be a unique identifier stored in association with the corresponding one or more virtual attributes 180. Each virtual identifier 175 may be mapped, for example, by the panelist mapper 140, to a panelist identifier 165 having similar or identical attributes.
The virtual attributes 180 may be stored in association with a respective one of the virtual identifiers 175 and may describe attributes of the virtual device or virtual user to which the virtual identifier corresponds. The virtual attributes 180 may include demographic information, such as age, gender, interests, and other demographic information, and may include various granularities of location information, including regional information, coordinate information, or other types of location information.
The identifier maintainer 130 can maintain panelist identifiers 165 stored in association with respective one or more offline content events. For example, the identifier maintainer 130 can receive a message from the panelist device 120 describing the offline content event and can match the offline content event contained in the message to a particular panelist identifier 165. The panelist identifier 165 may be included in a message reporting an offline content event. The identifier maintainer 130 can store any or all of the information regarding the offline content event (including the type of event, or any other offline content event information described herein, etc.) in association with the identifier of the offline content item that pertains to the offline content event and the panelist identifier 165 reporting the offline content event. These associations may be stored in one or more data structures in the memory or database 115 of the data processing system 105.
The panelist identifier module 135 may identify a subset of the panelist identifiers associated with the particular offline content event. In some implementations, the panelist identifier module 135 may request a thumbnail representing a virtual audience for the item of offline content. In response to the request, the panelist identifier module 135 may identify from the panelist identifier 165a subset of the panelist identifiers stored with the corresponding offline content events that match the target offline content event specified in the request. To do so, the panelist identifier module 135 may traverse each panelist identifier 165 to identify which panelist identifiers are associated with the event (e.g., match any targeted offline content during a specified time period, etc.). In some implementations, the panelist identifier module 135 can construct a list or another type of data structure that includes the identified subset of panelist identifiers 165 that satisfy the criteria identified in the request for the thumbnail.
The panelist mapper 140 may map each of a subset of the panelist identifiers to one or more VIDs 175. The panelist mapper 140 may map the identifiers in a variety of different ways. Some of which may include depth thumbnail sub-sampling, which may occur after or during depth thumbnail generation (e.g., after thumbnail generator 145 generates thumbnails representing all VIDs 175, etc.). In some implementations, the panelist mapper 140 may identify a weight value associated with each of the subset of panelist identifiers. The weight value may be proportional to the number of VIDs 175 to which the panelist identifier may be mapped. In some embodiments, the weight values are assigned in an offline process. In some implementations, the weight values are received from the panelist device 120 via the network 110 or from another computing device associated with the panelist device 120.
The panelist mapper 140 may be based on weightsAnd pool size associate VID175 to a panelist identifier 165 (sometimes referred to herein as "panelist(s)"). If the weight is determined on a day-by-day basis, or if the weight is determined for a range of dates, then have a weight w p Can be associated with the members p in the pool
Referring briefly now to fig. 2, an example mapping of panelist identifiers 165 (and associated panelist attributes 170) to corresponding virtual identifiers 175 (and associated attributes 180) is depicted. As depicted in fig. 2, each panelist can be associated with one or more VIDs 175, but VIDs 175 can be associated with only one panelist 165. Further, an example weight value for panelist 165A would be 3, for panelist 165B would be 3, and for panelist 165N would be 2.
Referring back now to FIG. 1, the panelist mapper 140 may generate a mapping of panelist identifiers to VIDs 175 based on the matching attribute data. For example, the panelist mapper 140 may compare the attribute data of the panelist identifier 165 to the virtual attributes 180 and assign a mapping to the corresponding VID175 having matching attribute data. This may be performed according to a weight value, such that the number of VIDs 175 associated with any given panelist is proportional to the panelist's weight value. The panelist mapper 140 may store the results of this mapping as a contiguous list, a graphic matrix data structure, or any other type of data structure in the memory or database 115 of the data processing system 105.
The panelist mapper 140 may also perform depth thumbnail sub-sampling as described herein. Referring briefly now to fig. 4, an example diagram 400 is depicted in which the panelist mapper 140 may perform depth thumbnail subsampling to generate one or more registers of thumbnails, such as HLL thumbnails, for the panelists. To perform depth thumbnail sub-sampling, the thumbnail generator 145 may first generate depth thumbnails that represent all VIDs. This process need not be performed every time since VIDs are typically updated infrequently, and thus thumbnails may be maintained by the data processing system and updated as needed by the thumbnail generator 145 when new VIDs 175 are added or generated. Depth thumbnail sub-sampling may quickly sample a random subset of the pool of VIDs 175 (e.g., those used to generate depth thumbnails, etc.) without analyzing all VIDs 175 in the pool. The goal is to partition the pool of VIDs 175 into disjoint subsets of VIDs, each of which may be provisioned to a respective panelist identifier 165. As depicted in fig. 4, graph 400 shows that a subset of the VID pool of the HLL register is sampled, resulting in 20% of the original VID175. In this example, the depth value may be 3, but it should be understood that any depth value may be utilized. However, the goal is to sample disjoint subsets to be deployed to the panelists 165, so performing depth thumbnail sub-sampling multiple times may not achieve this goal.
Referring now briefly to fig. 5, an example diagram 500 is depicted. The panelist mapper 140 may utilize a similar approach to sample disjoint subsets of VIDs 175 that may then be assigned to corresponding panelists 165. As depicted in diagram 400, the panelist mapper 140 may sample three disjoint subsets of sizes 20%, 30%, and 50% of the VID set (e.g., for each register in the HLL sketch, etc.). The panelist mapper 140 may perform the sampling using the following algorithm:
inputting: q small group member identifiers 165, their weights w 1 ,w 2 ,…,w q The sum of (a) and (b) is 1. A sketch corresponding to a depth D of the pool P: s 1 ≤S 2 ≤…≤S D 。
And (3) outputting: random disjoint schematic r1, r 2 ,…,r Q 。
The above algorithm 1 can be utilized to achieve the volume target.
The proof of algorithm one is as follows. The following proof includes the results if D =1, but the proof when D > 1 similarly follows the proof. The depth index due to D =1,S is discarded.
For each of the panelists j, r j Is a probability of w j Otherwise is Exp (| P | w) j S). It is sufficient to indicate that w is the weight w1 2 ,…w Q A subset of the panelists of (1), wherein<Q’<Q，
Note that only if based on w 1 ,w2,…,w Q Sampled panelists were located at [1,Q']Inner time, r Q’ Is S, possibly with probability
When implementing the above algorithm, the panelist mapper 140 may look from Exp (| P | w) j ,S D ) And (4) performing intermediate sampling. However, this may present problems. For example, when | P | w j <<When 1 (e.g., a panelist may only expect 0.5 VIDs in a register, etc.), then the panelist mapper 140 may extract Exp (| P | w) greater than 1 j ,S D ) Will cause the register to be treated as empty according to the current cardinality estimate. This may result in severe under-counting (undercount). Current HLL thumbnails may not be sampled from exponential random variables, but from uniform random variables. While such variables may become identical at large bases, they differentiate at small volumes. Adding exponential random variables to uniform random variables may change the distribution. At the same time, from a fraction | P | w j <<Sampling in 1 may also result in an over count (overcount) because the panelists may have non-null thumbnails in only half of the registers, while for a small fraction they may have non-null thumbnails in all registers.
Referring briefly now to fig. 6, an example graph 600 is depicted that samples disjoint subsets of the original set, 20%, 30%, and 50%, in size, with an example depth value of 3. However, as shown in diagram 500, the panelist mapper 140 may select the disjoint subsets according to algorithm 2, which is included below.
Experimental data including the resulting performance of utilizing an example embodiment of algorithm 2 is described herein below in connection with fig. 10A-15B.
To achieve the interaction goal, panelist mapper 140 may determine appropriate depth values for the algorithms described above. To describe the solution to this problem, the emphasis is on a single register that can store the D smallest uniform random samples S from | P | 1 ，S 2 ，...，S D . Referring now briefly to fig. 7, an example diagram 700 of a normal subset and a merging of another independent subset sampled at depth values of 3 is depicted. Consider a size of p 1 Random subset P of P (e.g., a pool of VIDs 175, etc.) of | P | 1 Indicating an online content audience. Let P 1 Is r generated using a production system 1 (e.g., r) 1 Is the smallest of the random subset of | P | samples).
Consider a size p representing an audience for offline content 2 Another independent random subset P of P 2 . Let S 2 Is a sketch of r 2 It is a union generated according to our proposal, e.g. it is with probability p 2 Is equal to S 1 Otherwise it is given a probability p 2 Is equal to S 2 And so on. If r is 2 Is not S 1 ，S 2 ，...，S D Then it is from S D ，1]Is randomly and uniformly sampled. P 1 ∪P 2 Has a true expected size of (p) 1 +p 2 -p 1 p 2 )|P|。
For the idealized sketch, P of the above implementation is as above 1 ∪P 2 The expected size of (d) is defined by:
|P|((1-p 1 ) D (1-p 2 ) D (p 1 +p 2 )+(1-(1-p 1 ) D (1-p 2 ) D )(p 1 +p 2 -p 1 p 2 ))。
certifying that
The outline of the union is r = min (r) 1 ，r 2 ). At probability (1-p) 1 ) D (1-p 2 ) D In the case of (1), no thumbnail is equal to S 1 ，S 2 ，...，S D Any one of them. If not, then,r is an ideal sketch and results in the true expected union size o
When no thumbnail is equal to S 1 ，S 2 ，...，S D At any one of (3), r is S D Top | P | (P) 1 +p 2 ) The smallest of the individual thumbnails
Q.E.D.
Prove the fact
The relative error defined above is
thus simplifying it into
Q.E.D.
Note that the upper bound can be relaxed because of the fact that
TABLE 1
Depth of field | Margin of |
1 | 7.41 |
2 | 4.10E-02 |
5 | 1.75E-02 |
6 | 1.47E-02 |
7 | 1.27E-02 |
8 | 1.11E-02 |
9 | 9.94E-03 |
10 | 8.97E-03 |
11 | 8.18E-03 |
12 | 7.51E-03 |
13 | 6.94E-03 |
14 | 6.45E-03 |
15 | 6.03E-03 |
20 | 4.54E-03 |
50 | 1.83E-03 |
Referring back now to FIG. 1, the thumbnail generator 145 may reduce, for each identified subset of panelist identifiers 165, the associated VIDs 175 to thumbnails representing the VIDs 175 associated with the respective panelist identifier. Thus, the thumbnail generator 145 may generate thumbnails for each panelist 165 identified by the panelist identifier module 135 as part of the subset of panelists. An outline may be a probabilistic data structure that represents the VID in a compact manner. The thumbnail may be, for example, an HLL thumbnail. The thumbnail generator 145 may generate thumbnails to include thousands of registers. For example, an HLL thumbnail may contain 14 registers to the power of 2, or about 16K registers. However, other numbers of registers may be used. When a new VPID is to be included in the thumbnail (e.g., accessed from a mapping generated by the subgroup membership mapper 140, etc.), it may be pseudo-randomly pointed to one of the 16K registers. Each register may be empty or may hold a register outline that may be a number between 0 and 1. Within the registers, the thumbnail generator 145 may hash each VPID to a uniform pseudo-random variable between 0 and 1. If the hashed value is less than the existing register sketch, the latter may be updated to be equal to the former. In other words, if a register has processed R unique VPIDs, it holds the minimum of the R corresponding uniform random variables. Mathematically, this minimum has a distribution of exponential random variables close to the rate R, so it can later provide an approximately unique count of the number of VPIDs contributing to the register. The thumbnail generator 145 can store and update the registers of each HLL thumbnail in the memory of the data processing system 105. After or during thumbnail generation, the panelist mapper 140 may perform the depth thumbnail subsampling described above to improve computation time.
Referring now briefly to FIG. 3, a diagram 300 is depicted that illustrates an example representation of VIDs that map to corresponding registers. As shown, each VID is assigned to only one register (e.g., VIDs cannot be assigned to more than one register, etc.). The register values of all registers (e.g., the minimum value R of any register) can be used to estimate the cardinality (e.g., the number of unique values, etc.) of the VIDs that contribute to the HLL thumbnail.
Referring back now to FIG. 1, thumbnail combiner 150 can combine thumbnails for each of a subset of panelist identifiers into an aggregated thumbnail. HLL thumbnails generated using similar seeds (e.g., hash functions, etc.) may be merged together using an HLL merging algorithm. The resulting aggregated thumbnail may represent all VIDs represented by all panelists 165 in the subset of panelists 165 identified by the panelist identifier module 135. To merge thumbnails, thumbnail combiner 150 may traverse each register in all thumbnails (e.g., select register location 0 from all thumbnails to merge, perform a merge on the selected register, then select register one from all thumbnails, perform a merge on the selected register, etc.). To generate an aggregated thumbnail, the thumbnail combiner may identify a maximum register value for all HLL thumbnails to be merged for a particular merge location and select that value for that location in the aggregated thumbnail. For example, if three thumbnails are merged and at register location 81, the three thumbnails have respective values of 8, 100, and 904, then the aggregated thumbnail may have value 904 at register location 81. Thumbnail combiner 150 can repeat this process for all register locations on the thumbnail. The resulting aggregated thumbnail may be stored in one or more data structures in a memory of the data processing system 105.
Referring now to FIG. 8, an illustrative flow diagram of a method 800 for cross media reporting by rapid merging of panelist activities is depicted. The method 800 may be performed, implemented, or otherwise implemented by the data processing system 105, the computer system 900 described herein in conjunction with fig. 9, or any other computing device described herein. In a brief overview of the method 800, a data processing system (e.g., the data processing system 105, etc.) may maintain panelist identifiers (step 802), identify a subset of panelist identifiers (step 804), select a kth panelist identifier from the subset (step 806), map the panelist identifier to a VID (step 808), reduce the VID to a thumbnail (step 810), determine whether a count register k is equal to the number n of panelists (step 812), increment the count register k (step 814), combine thumbnails into an aggregated thumbnail (step 816), and send the aggregated thumbnail (step 818).
In more detail, the data processing system may maintain a panelist identifier (step 802). The data processing system can maintain panelist identifiers (e.g., stored panelist identifiers 165 in association with respective one or more offline content events). For example, the data processing system may receive a message describing an offline content event from a panelist device (e.g., panelist device 120, etc.), and may match the offline content event contained in the message to a particular panelist identifier 165. The panelist identifier 165 may be included in a message reporting an offline content event. The data processing system may store any or all of the information about the offline content event (including the type of event, or any other offline content event information described herein, etc.) in association with the identifier of the offline content item that pertains to the offline content event and the panelist identifier 165 reporting the offline content event. These associations may be stored in one or more data structures in a memory or database (e.g., database 115, etc.) of the data processing system.
The data processing system may identify a subset of the panelist identifiers (step 804). The data processing system can identify a subset of panelist identifiers associated with a particular offline content event. In some implementations, the data processing system may request a thumbnail representing a virtual audience for an item of offline content. In response to the request, the data processing system may identify from the panelist identifier 165a subset of the panelist identifiers stored with the corresponding offline content events that match the target offline content event specified in the request. To do so, the data processing system may traverse each panelist identifier 165 to identify which panelist identifiers are associated with the event (e.g., match any targeted offline content during a specified time period, etc.). In some implementations, the data processing system can construct a list or another type of data structure that includes the identified subset of panelist identifiers 165 that meet the criteria identified in the request for the thumbnail.
The data processing system may select a kth panelist identifier from the subset of panelist identifiers (step 806). To generate a thumbnail for each panelist in the subset that represents a VID that maps to the respective panelist, the data processing system may iteratively loop through each subset of panelists based on the count register k. Each subset of panelists may be stored and indexed in a data structure by an index value (e.g., index 0, index 1, index 2, etc.). To generate a thumbnail for each panelist, the data processing system may select the panelist of the subset stored in association with an index value equal to the count register k. If this is the first iteration of the loop, the count register k may be initialized to an initial value (e.g., k = 0) before the kth classifier is selected. Accessing the panelist may include copying data associated with the selected panelist to a different region of computer memory, such as a working area of memory in a data processing system.
The data processing system may map the selected panelist identifier to one or more corresponding VIDs (step 808). The data processing system may associate the VID175 to a subset of panelist identifiers 165 (sometimes referred to herein as "panelist(s)") based on the weight of each panelist and the pool size of the VID. If the weight is determined on a day-by-day basis, or if the weight is determined for a range of dates, then have a weight w p Can be associated with the members p in the pool
The data processing system may generate a mapping of panelist identifiers to VID175 based on the matching attribute data. For example, the data processing system may compare the attribute data of the panelist identifier 165 to the virtual attributes 180 and assign a mapping to the corresponding VID175 having matching attribute data. This may be performed according to a weight value such that the number of VIDs 175 associated with any given panelist is proportional to the weight value of that panelist. The data processing system may store the results of this mapping as a adjacency list, a graph matrix data structure, or any other type of data structure in a memory or database (e.g., database 115, etc.) of the data processing system. The data processing system may also perform depth thumbnail sub-sampling as described herein.
The data processing system may reduce the VID to a thumbnail representation representing the VID (step 810). The data processing system may reduce the associated VID175 to an outline representing the VID175 associated with the respective panelist identifier for each identified subset of panelist identifiers 165. Thus, the data processing system can generate a thumbnail for each panelist 165 that is identified by the data processing system as part of the subset of panelists. A thumbnail may be a probabilistic data structure that represents VIDs in a compact manner. The thumbnail may be, for example, an HLL thumbnail. The data processing system may generate the thumbnail to include thousands of registers. For example, an HLL thumbnail may contain 14 registers to the power of 2, or about 16K registers. However, other numbers of registers may be used. When a new VPID is to be included in a thumbnail (e.g., accessed from a mapping generated by the panelist mapper 140, etc.), it may be pseudo-randomly pointed to one of the 16K registers. Each register may be empty or may hold a register outline that may be a number between 0 and 1. Within the registers, the data processing system may hash each VPID to a uniform pseudo-random variable between 0 and 1. If the hashed value is less than the existing register thumbnail, the latter may be updated to be equal to the former. In other words, if a register has processed R unique VPIDs, it holds the minimum of the R corresponding uniform random variables. Mathematically, this minimum has a distribution of exponential random variables close to the rate R, so it can later provide an approximately unique count of the number of VPIDs contributing to the register. The data processing system may store and update the registers of each HLL thumbnail in a memory of the data processing system. After or during thumbnail generation, the data processing system can perform the depth thumbnail sub-sampling described above to improve computation time.
The data processing system may determine whether the count register k is equal to the number n of panelists in the subset (step 812). To determine whether the data processing system has generated a thumbnail for each panelist in the subset, the data processing system can compare a count register used to select each panelist in the subset to the total number n of panelists in the subset. If the count register k is not equal to (e.g., less than) the total number of panelists n in the subset, the data processing system can execute (step 814). If the count register k is equal to (e.g., equal to or greater than) the total number of panelists n in the subset, the data processing system can perform (act 816).
The data processing system may increment the count register k (step 818). To generate a thumbnail for each panelist in the subset, the data processing system may increment the count register k by 1 to indicate the number of panelists in the subset that have been used to generate thumbnails. In some embodiments, the data processing system may set the count register k to the memory address value of the next location in the memory of the next panelist in the subset (e.g., a location in computer memory), for example in a data structure. If this is the first iteration of the loop, the data processing system may initialize the count register k to an initial value, e.g., zero, before incrementing the count register. After incrementing the value of the count register k, the data processing system may perform method 800 (step 806).
The data processing system may combine the thumbnails for each subset of panelist identifiers into an aggregated thumbnail (step 816). The data processing system may combine the thumbnails for each subset of panelist identifiers into an aggregated thumbnail. HLL thumbnails generated using similar or identical seeds (e.g., hash functions, etc.) may be merged together using an HLL merging algorithm. The resulting aggregated thumbnail may represent all VIDs represented by all panelists 165 in the subset of panelists 165 identified by the data processing system. To merge thumbnails, the data processing system can traverse each register in all thumbnails (e.g., select register location 0 from all thumbnails to merge, perform the merge on the selected register, then select register 1 from all thumbnails, perform the merge on the selected register, etc.). To generate an aggregated thumbnail, the thumbnail combiner can identify the maximum register value of all HLL thumbnails to merge for a particular merge location and select that value for that location in the aggregated thumbnail. For example, if three thumbnails are merged and at register location 81, the three thumbnails have respective values of 8, 100, and 904, then the aggregated thumbnail may have value 904 at register location 81. The data processing system may repeat this process for all register locations on the thumbnail. The resulting aggregated thumbnails may be stored in one or more data structures in a memory or database (e.g., database 115, etc.) of the data processing system.
The data processing system may send the aggregated thumbnail to the computing device (step 818). The data processing system can send the aggregated thumbnail to a computing device for analysis with the aggregated thumbnail representing the online content event. Online content events may have thumbnails generated using the same seed, and thus may be combined with thumbnails generated by a data processing system for accessing a complete analysis of virtual identifiers for both online and offline content. The data processing system may access a memory of the data processing system to retrieve the aggregated thumbnail and send the thumbnail in one or more messages to another computing device for further processing. In some implementations, the thumbnail can be sent to a computing device that requests the thumbnail and specifies the target content for identifying a subset of the panelists 165. The data processing system may send the thumbnail as a response to the request for the thumbnail representation and may include a list of panelist identifiers 165 identified as part of the subset. In some embodiments, the list of panelist identifiers is not included in the aggregated thumbnail, but rather the aggregated thumbnail is sent on its own.
Fig. 9 shows the general architecture of an illustrative computer system 900, which computer system 900 may be employed to implement any of the computer systems discussed herein, according to some embodiments. Computer system 900 may be used to provide information for display via network 110. The computer system 900 of fig. 9 includes one or more processors 920 communicatively coupled to a memory 925, one or more communication interfaces 905, one or more output devices 910 (e.g., one or more display units), and one or more input devices 915. The processor 920 may be included in any of the computing devices described herein.
In computer system 900 of fig. 9, memory 925 can include any computer-readable storage medium and can store computer instructions, such as processor-executable instructions for implementing the various functions of the respective systems described herein, as well as any data related thereto, generated thereby, or received via communication interface(s) or input device(s), if present. Referring again to the system 900 of FIG. 9, the computer system 900 may include a memory 925 to store any information, such as information, variables, vectors, data structures, or other computer-readable information described herein. The processor(s) 920 shown in fig. 9 may be used to execute instructions stored in the memory 925 and, in so doing, may also read from and write to the memory various information processed and/or generated pursuant to execution of the instructions.
The processor 920 of the computer system 900 shown in fig. 9 may also be communicatively coupled to or control the communication interface(s) 905 to send or receive various information in accordance with the execution of instructions. For example, communication interface(s) 905 may couple to a wired or wireless network, bus, or other communication component and may, therefore, allow computer system 900 to send information to or receive information from other devices (e.g., other computer systems). Although not explicitly shown in the system of fig. 9, one or more communication interfaces facilitate the flow of information between components of the system 900. In some implementations, the communication interface(s) can be configured (e.g., via various hardware or software components) to provide a website as an access portal to at least some aspects of computer system 900. Examples of communication interface 905 include a user interface (e.g., a web page) through which a user can communicate with computer system 900.
For example, an output device 910 of the computer system 900 shown in fig. 9 may be provided to allow various information to be viewed or otherwise perceived in connection with execution of the instructions. Input device(s) 915 may be provided, for example, to allow a user to manually adjust, select, enter data, or interact with the processor in any of a variety of ways during execution of the instructions. Additional information regarding the general computer system architecture that may be employed for the various systems discussed herein is further provided herein.
Described below are various experimental results of random subset sampling.
Is provided with
M =2 ^ 14 ≈ 16K registers are used. We take a typical bucket with Q =130 panelists, each average representing M/2 ≈ 8K VIDs, e.g., each panelist has only 0.5 VIDs per register. The total pool size for all registers is QM/2 ≈ 1M. The actual panelist weights are randomly generated. Q-1 uniform random variables are sampled, and the length of the interval is divided by these numbers as weights.
Results
In FIGS. 10A, 10B, 11A, 11B, 12A, 12B, 13A, and 13B, the true masses and errors of the first subset, then the union of the first two subsets, the union of the first three subsets, and so on are plotted. So there are Q points per line. The x axis is as follows: true volume of union of subsets. And a y axis: the production floor estimates the absolute value of the simulated relative error (e.g., 1= 100%).
Fig. 10A and 10B depict the error of algorithm 2 for depths D =1 and D =10 of at most 1.5%, comparable to the original sketch. This may also prove that algorithm 1 is correct, which is another version of depth thumbnail sub-sampling.
FIGS. 11A and 11B depict a small portion of the VID going into the sampling formula that may result in over-counting.
12A and 12B depict sampling of exponential random variables on top of uniform random variables of a sketch, where cardinality is low, the sum can easily exceed 1, and the register can be considered empty (e.g., undercounting).
Fig. 13A and 13B depict simple thumbnail sub-sampling to determine whether the over-count and under-count cancel each other. At D =1, it appears that they do, and a 5% error is achieved, but for D =10, the under-count appears to dominate.
Described below are various experimental results for determining optimal depth values for thumbnail sub-sampling.
Is provided with
The settings of the offline content event are the same as the above settings. For online content events, a random subset from offline content events is sampled (e.g., to simulate overlapping online content events, etc.).
As a result, the
Additional lines are added, corresponding to the upper bound of the derivation of the relative error
As depicted, the positive error sign indicated by the yellow line aligns with the introduced over-count prediction, as described above. Furthermore, beyond the 1% level, the derived relative error bound indicated by the purple line matches quite well with the actual error (blue line). The proposed depth D =10 may have a relative error of less than 1%.
Additional implementation details of depth thumbnail sub-sampling are described below. One such implementation is a polynomial sampling implementation. The polynomial sampling embodiments may be performed, for example, by any of the computing systems described herein, including the data processing system 105 (or components thereof).
In a polynomial sampling embodiment, to use | P | times of trial (ignoring subtraction of depth) and w 1 ,w 2 ,…,w Q B is sampled from the polynomial distribution 1 ,b 2 ,…,b Q There are several different embodiments. Note that | P | can be at least on the order of 600, while Q can be on the order of 2000. However, these are example values and should not be construed as limiting the claimed technology to any particular implementation.
In O (Q + | P | log) 2 Q) embodiment, O (Q) may be used to construct array w 1 ,w 1 +w 2 ,w 1 +w 2 +w 3 …, then for each trial a uniform random sample u can be taken. The first element in the array greater than or equal to u may then be found. One advantage of this embodiment is that the calculations involved have no potential numerical problems.
In an O (Q + | P |) implementation, the same array (w) may be constructed first 1 ,w 1 +w 2 ,w 1 +w 2 +w 3 …). Next, the inverse transform sample may be used in an O (1) operation to extract the minimum of | P | independent uniform random values. And then can be at O (log) 2 Q) identifies the panelist, and then may sample the minimum of the remaining uniform random values successively to identify the panelist using a linear scan. One advantage of this embodiment is that it can be done in fewer operations.
In pseudo-polynomial O (| P | Q) operations, each VID and each panelist j may be associated with a probability w j Regardless of whether the VID is associated with any other panelist. One advantage of this approach is that it is very easy to parallelize.
Fig. 15A and 15B depict graphs of the relative error of the union of disjoint subsets. In one exemplary non-limiting embodiment, the relative error may be reduced from 2% to 1% for depth D = 1.
In the folding processIn the label embodiment, when using the label for d e [1,D]Schematic diagram S of d At this time, the data processing system may replicate its set of foldtags. Otherwise, S may be used 1 The tag set of (1).
Frequency and behavior
The frequency may be accumulated over a matched byte spread. Similarly, the data processing system 105 can take the value for d ∈ [1,D]Schematic diagram S of d Byte hashing and even behavior. Otherwise, a sample byte hash may be used because it is part of the sample virtual thumbnail.
Embodiments of the subject matter and the operations described in this specification can be implemented in digital electronic circuitry, or in computer software, firmware, or hardware embodied in tangible media, including the structures disclosed in this specification and their structural equivalents, or in combinations of one or more of them. Embodiments of the subject matter described in this specification can be implemented as one or more computer programs, e.g., one or more components of computer program instructions, encoded on a computer storage medium for execution by, or to control the operation of, data processing apparatus. The program instructions may be encoded on an artificially generated propagated signal (e.g., a machine-generated electrical, optical, or electromagnetic signal) that is generated to encode information for transmission to suitable receiver apparatus for execution by a data processing apparatus. The computer storage media may be or be embodied in a computer-readable storage device, a computer-readable storage substrate, a random or serial access memory array or device, or a combination of one or more of them. In addition, while a computer storage medium is not a propagated signal, a computer storage medium can comprise a source or destination of computer program instructions encoded in an artificially generated propagated signal. The computer storage medium may also be or be included in one or more separate physical components or media (e.g., multiple CDs, disks, or other storage devices).
The features disclosed herein may be implemented on a smart television module (or connected television module, hybrid television module, etc.), which may include a processing module configured to integrate an internet connection with a more traditional television program source (e.g., received via cable, satellite, over-the-air, or other signal). The smart television module may be physically incorporated into a television, or may comprise a separate device, such as a set-top box, a blu-ray or other digital media player, a game console, a hotel television system, and other companion devices. The smart television module may be configured to allow viewers to search for and find videos, movies, photos, and other content over a network, on local cable TV channels, on satellite TV channels, or stored on a local hard drive. A set-top box (STB) or set-top unit (STU) may include an information appliance that may contain a tuner and connect to a television and an external signal source, convert the signal to content, and then display the content on a television screen or other display device. The smart television module may be configured to provide a home screen or top-level screen including icons for a plurality of different applications, such as a web browser and a plurality of streaming media services, a connected cable or satellite media source, other network "channels," and so forth. The smart television module may also be configured to provide an electronic program guide to the user. A companion application to the smart television module may operate on the mobile computing device to provide additional information to the user about available programs, to allow the user to control the smart television module, and so on. In alternative embodiments, these features may be implemented on a laptop or other personal computer, smart phone, other mobile phone, handheld computer, tablet PC, or other computing device.
The operations described in this specification can be implemented as operations performed by data processing apparatus on data stored on one or more computer-readable storage devices or received from other sources.
The terms "data processing apparatus," "data processing system," "client device," "computing platform," "computing device," or "apparatus" encompass all kinds of apparatus, devices, and machines for processing data, including by way of example a programmable processor, a computer, a system on a chip, or a plurality or combination of the foregoing. The apparatus can comprise special purpose logic circuitry, e.g., an FPGA (field programmable gate array) or an ASIC (application-specific integrated circuit). The apparatus can include, in addition to hardware, code that creates an execution environment for the computer program in question, e.g., code that constitutes processor firmware, a protocol stack, a database management system, an operating system, a cross-platform runtime environment, a virtual machine, or a combination of one or more of them. The apparatus and execution environment may implement a variety of different computing model infrastructures, such as web services, distributed computing, and grid computing infrastructures.
A computer program (also known as a program, software application, script, or code) can be written in any form of programming language, including compiled or interpreted languages, declarative or procedural languages, and it can be deployed in any form, including as a stand-alone program or as a module, component, subroutine, object, or other unit suitable for use in a computing environment. A computer program may, but need not, correspond to a file in a file system. A program can be stored in a portion of a file that holds other programs or data (e.g., one or more scripts stored in a markup language document), in a single file dedicated to the program in question, or in multiple coordinated files (e.g., files that store one or more modules, sub programs, or portions of code). A computer program can be deployed to be executed on one computer or on multiple computers that are located at one site or distributed across multiple sites and interconnected by a communication network.
The processes and logic flows described in this specification can be performed by one or more programmable processors executing one or more computer programs to perform actions by operating on input data and generating output. The processes and logic flows can also be performed by, and apparatus can also be implemented as, special purpose logic circuitry, e.g., an FPGA (field programmable gate array) or an ASIC (application-specific integrated circuit).
Processors suitable for the execution of a computer program include, by way of example, both general and special purpose microprocessors, and any one or more processors of any kind of digital computer. Generally, a processor will receive instructions and data from a read-only memory or a random access memory or both. Elements of a computer include a processor for performing actions in accordance with instructions and one or more memory devices for storing instructions and data. Generally, a computer will also include, or be operatively coupled to receive data from or transfer data to, or both, one or more mass storage devices for storing data, e.g., magnetic, magneto-optical disks, or optical disks. However, a computer need not have such a device. Further, the computer may be embedded in another device, e.g., a mobile telephone, a Personal Digital Assistant (PDA), a mobile audio or video player, a game console, a Global Positioning System (GPS) receiver, or a portable storage device (e.g., a Universal Serial Bus (USB) flash drive). Devices suitable for storing computer program instructions and data include all forms of non-volatile memory, media and memory devices, including by way of example semiconductor memory devices, e.g., EPROM, EEPROM, and flash memory devices; magnetic disks, such as internal hard disks or removable disks; magneto-optical disks; CD-ROM and DVD-ROM disks. The processor and the memory can be supplemented by, or incorporated in, special purpose logic circuitry.
To provide for interaction with a user, embodiments of the subject matter described in this specification can be implemented on a computer having a display device, e.g., a CRT (cathode ray tube), plasma or LCD (liquid crystal display) monitor, for displaying information to the user and a keyboard and a pointing device, e.g., a mouse or a trackball, by which the user can provide input to the computer. Other kinds of devices may also be used to provide for interaction with a user; for example, feedback provided to the user can include any form of sensory feedback, such as visual feedback, auditory feedback, or tactile feedback; and input from the user may be received in any form, including acoustic, speech, or tactile input. Further, the computer may interact with the user by transmitting and receiving documents to and from the device used by the user; for example, by transmitting a web page to a web browser on a user's client device in response to a request received from the web browser.
Implementations of the subject matter described in this specification can be implemented in a computing system that includes a back end component, e.g., as a data server, or that includes a middleware component, e.g., an application server, or that includes a front end component, e.g., a client computer having a graphical user interface or a Web browser through which a user can interact with an implementation of the subject matter described is this specification, or any combination of one or more such back end, middleware, or front end components. The components of the system can be interconnected by any form or medium of digital data communication, e.g., a communication network. Examples of communication networks include local area networks ("LANs") and wide area networks ("WANs"), the internet (e.g., the internet), and peer-to-peer networks (e.g., ad hoc peer-to-peer networks).
A computing system, such as data processing system 105, may include clients and servers. For example, the data processing system 105 may include one or more data centers or one or more servers in a server farm. A client and server are generally remote from each other and typically interact through a communication network. The relationship of client and server arises by virtue of computer programs running on the respective computers and having a client-server relationship to each other. In some implementations, the server transmits data (e.g., HTML pages) to the client device (e.g., to display data to and receive input from a user interacting with the client device). Data generated at the client device (e.g., the results of an interaction, computation, or any other event or computation) may be received at the server from the client device, and vice versa.
While this specification contains many specific implementation details, these should not be construed as limitations on the scope of any inventions or of what may be claimed, but rather as descriptions of features specific to particular embodiments of the systems and methods described herein. Certain features that are described in this specification in the context of separate embodiments can also be implemented in combination in a single embodiment. Conversely, various features that are described in the context of a single embodiment can also be implemented in multiple embodiments separately or in any suitable subcombination. Furthermore, although features may be described above as acting in certain combinations and even initially claimed as such, one or more features from a claimed combination can in some cases be excised from the combination, and the claimed combination may be directed to a subcombination or variation of a subcombination.
Similarly, while operations are depicted in the drawings in a particular order, this should not be understood as requiring that such operations be performed in the particular order shown or in sequential order, or that all illustrated operations be performed, to achieve desirable results. In some cases, the actions recited in the claims can be performed in a different order and still achieve desirable results. Moreover, the processes depicted in the accompanying figures do not necessarily require the particular order shown, or sequential order, to achieve desirable results.
In some cases, multitasking and parallel processing may be advantageous. Moreover, the separation of various system components in the embodiments described above should not be understood as requiring such separation in all embodiments, and it should be understood that the described program components and systems can generally be integrated together in a single software product or packaged into multiple software products. For example, the data processing system 105 may be a single module, a logical device with one or more processing modules, one or more servers, or a portion of a search engine.
Having now described some illustrative embodiments and implementations, it should be apparent that the foregoing is illustrative and not limiting, having been presented by way of example. In particular, although many of the examples presented herein involve specific combinations of method acts or system elements, those acts and those elements may be combined in other ways to accomplish the same objectives. Acts, elements and features discussed only in connection with one embodiment are not intended to be excluded from a similar role in other embodiments or implementations.
The phraseology and terminology used herein is for the purpose of description and should not be regarded as limiting. The use of "including," "comprising," "having," "containing," "involving," "characterized by," and variations thereof herein, is meant to encompass the items listed thereafter and equivalents thereof as well as additional items and alternative embodiments consisting of the items specifically listed thereafter. In one embodiment, the systems and methods described herein include one, each combination of more than one, or all of the described elements, acts, or components.
Any reference herein to embodiments or elements or acts of the systems and methods in the singular may also include embodiments that include a plurality of these elements, and any reference herein to any embodiment or element or act in the plural may also include embodiments that include only a single element. References in the singular or plural form are not intended to limit the presently disclosed systems or methods, their components, acts, or elements to a single or multiple configurations. A reference to any action or element based on any information, action, or element may include an implementation in which the action or element is based, at least in part, on any information, action, or element.
Any embodiment disclosed herein may be combined with any other embodiment, and references to "an embodiment," "some embodiments," "an alternate embodiment," "various embodiments," "one embodiment," etc. are not necessarily mutually exclusive and are intended to indicate that a particular feature, structure, or characteristic described in connection with the embodiment may be included in at least one embodiment. The terms used herein do not necessarily all refer to the same embodiment. Any embodiment may be combined with any other embodiment, including exclusively or exclusively, in any manner consistent with aspects and embodiments disclosed herein.
References to "or" may be construed as inclusive such that any term described using "or" may refer to any single, more than one, or all of the described terms.
Where technical features in the drawings, detailed description or any claim are followed by reference signs, these reference signs have been included for the sole purpose of increasing the intelligibility of the drawings, detailed description, and claims. Hence, neither the reference signs nor their absence have any limiting effect on the scope of any claim element.
The systems and methods described herein may be embodied in other specific forms without departing from the characteristics thereof. While the examples provided may be useful for cross-media reporting by quickly merging panelist activities, the systems and methods described herein may be applied to other environments. The foregoing embodiments are illustrative, and not limiting of the described systems and methods. The scope of the systems and methods described herein is, therefore, indicated by the appended claims rather than by the foregoing description, and all changes which come within the meaning and range of equivalency of the claims are therefore intended to be embraced therein.
Claims (20)
1. A method, comprising:
maintaining, by a data processing system comprising one or more processors and memory, a plurality of panelist identifiers, each panelist identifier stored in association with a respective plurality of offline content event identifiers;
identifying, by the data processing system, a subset of the plurality of panelist identifiers stored with respective ones of the respective plurality of offline content events that match the target offline content event from the plurality of panelist identifiers;
mapping, by the data processing system, each of the subset of the plurality of panelist identifiers to a respective plurality of unique identifiers corresponding to virtual devices having virtual device attributes;
generating, by the data processing system, a thumbnail for each of the subset of the plurality of panelist identifiers based on the respective plurality of unique identifiers;
combining, by the data processing system, thumbnails for each of the subset of the plurality of panelist identifiers into an aggregated thumbnail; and
sending, by the data processing system, the aggregated thumbnail to a computing device for analysis with an aggregated thumbnail representing an online content event.
2. The method of claim 1, wherein generating a thumbnail for each of the subset of the plurality of panelist identifiers further comprises, by the data processing system, reducing, for each of the subset of the plurality of panelist identifiers, the respective plurality of unique identifiers to represent the thumbnails of the respective plurality of unique identifiers further based on a sampling technique.
3. The method of claim 2, wherein the sampling technique is depth thumbnail sub-sampling.
4. The method of claim 1, further comprising determining, by the data processing system, a weight for each of the plurality of panelist identifiers.
5. The method of claim 4, wherein mapping each of the subset of the plurality of panelist identifiers to the respective plurality of unique identifiers is further based on the weight of each of the subset of the plurality of panelist identifiers.
6. The method according to claim 1, wherein combining the thumbnail for each of the subset of the plurality of panelist identifiers into the aggregated thumbnail further comprises determining, by the data processing system, a maximum register value for the thumbnail across each of the subset of the plurality of panelist identifiers.
7. A method according to claim 6, wherein combining the thumbnail of each of the subset of the plurality of panelist identifiers into the aggregated thumbnail further comprises selecting, by the data processing system, as the value of the corresponding location in the aggregated thumbnail, a value of the location corresponding to the maximum register value of each location of the thumbnail across each of the subset of the plurality of panelist identifiers.
8. The method of claim 1, wherein generating the thumbnail for each of the subset of the plurality of panelist identifiers further comprises generating, by the data processing system, a Hyper-Log (HLL) thumbnail for each of the subset of the plurality of panelist identifiers.
9. The method of claim 1, wherein mapping each panelist identifier in the subset of the plurality of panelist identifiers to the respective plurality of unique identifiers is further based on matching, by the data processing system, attribute data of the panelist identifier with attribute data of each of the respective plurality of unique identifiers.
10. The method of claim 1, wherein maintaining the plurality of panelist identifiers in which each panelist identifier is stored in association with the respective plurality of offline content event identifiers further comprises:
receiving, by the data processing system, a message from a panelist computing device corresponding to a panelist identifier of the plurality of panelist identifiers, the message identifying a respective offline event; and
storing, by the data processing system, an identifier of the respective offline event identified in the message in association with the panelist identifier.
11. A system, comprising:
a data processing system comprising one or more processors coupled to a memory, the data processing system configured to:
maintaining a plurality of panelist identifiers, each panelist identifier stored in association with a respective plurality of offline content event identifiers;
identifying, from the plurality of panelist identifiers, a subset of the plurality of panelist identifiers stored with a respective offline content event of a respective plurality of offline content events that match a target offline content event;
mapping each of the subset of the plurality of panelist identifiers to a respective plurality of unique identifiers corresponding to virtual devices having virtual device attributes;
generating a thumbnail for each of the subset of the plurality of panelist identifiers based on the respective plurality of unique identifiers;
combining the thumbnails for each of the subset of the plurality of panelist identifiers into an aggregated thumbnail; and
sending the aggregated thumbnail to a computing device for analysis with the aggregated thumbnail representing the online content event.
12. The system according to claim 11, wherein, to generate the thumbnail for each of the subset of the plurality of panelist identifiers, the data processing system is further configured to reduce, for each of the subset of the plurality of panelist identifiers, the respective plurality of unique identifiers to the thumbnail representative of the respective plurality of unique identifiers further based on a sampling technique.
13. The system of claim 12, wherein the sampling technique is depth thumbnail sub-sampling.
14. The system of claim 11, wherein the data processing system is further configured to determine a weight for each of the plurality of panelist identifiers.
15. The system of claim 14, wherein the data processing system is further configured to map each of the subset of the plurality of panelist identifiers to the respective plurality of unique identifiers further based on the weight of each of the subset of the plurality of panelist identifiers.
16. A system according to claim 11, wherein to combine the thumbnail for each of the subset of the plurality of panelist identifiers into the aggregated thumbnail, the data processing system is further configured to determine a maximum register value for the thumbnail across each of the subset of the plurality of panelist identifiers.
17. A system according to claim 16, wherein to combine the thumbnail for each of the subset of the plurality of panelist identifiers into the aggregated thumbnail, the data processing system is further configured to select a value for a location corresponding to the maximum register value for each location of a thumbnail across each of the subset of the plurality of panelist identifiers as a value for a corresponding location in the aggregated thumbnail.
18. The system of claim 11, wherein to generate the thumbnail for each of the subset of the plurality of panelist identifiers, the data processing system is further configured to generate a Hyper-Log (HLL) thumbnail for each of the subset of the plurality of panelist identifiers.
19. The system of claim 11, wherein to map each panelist identifier in the subset of the plurality of panelist identifiers to the respective plurality of unique identifiers, the data processing system is further configured to match attribute data of the panelist identifier with attribute data of each of the respective plurality of unique identifiers.
20. The system of claim 11, wherein to maintain the plurality of panelist identifiers in which each panelist identifier is stored in association with the respective plurality of offline content event identifiers, the data processing system is further configured to:
receiving a message from a panelist computing device corresponding to a panelist identifier of the plurality of panelist identifiers, the message identifying a respective offline event; and
storing an identifier of the respective offline event identified in the message in association with the panelist identifier.
Applications Claiming Priority (3)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US202063082980P | 2020-09-24 | 2020-09-24 | |
US63/082,980 | 2020-09-24 | ||
PCT/US2021/051873 WO2022066990A1 (en) | 2020-09-24 | 2021-09-24 | Systems and methods for cross media reporting by fast merging of data sources |
Publications (1)
Publication Number | Publication Date |
---|---|
CN115968484A true CN115968484A (en) | 2023-04-14 |
Family
ID=78302935
Family Applications (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
CN202180046767.6A Pending CN115968484A (en) | 2020-09-24 | 2021-09-24 | System and method for cross-media reporting by quickly merging data sources |
Country Status (6)
Country | Link |
---|---|
US (1) | US20220091873A1 (en) |
EP (1) | EP4147186A1 (en) |
JP (1) | JP7427119B2 (en) |
KR (1) | KR20230010761A (en) |
CN (1) | CN115968484A (en) |
WO (1) | WO2022066990A1 (en) |
Families Citing this family (2)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
EP3997651A4 (en) * | 2019-07-09 | 2023-08-02 | Hyphametrics, Inc. | Cross-media measurement device and method |
US11487668B2 (en) | 2021-04-06 | 2022-11-01 | Thoughtspot, Inc. | Approximate unique count |
Family Cites Families (15)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20110119278A1 (en) | 2009-08-28 | 2011-05-19 | Resonate Networks, Inc. | Method and apparatus for delivering targeted content to website visitors to promote products and brands |
US20160165277A1 (en) * | 2013-03-15 | 2016-06-09 | Google Inc. | Media metrics estimation from large population data |
US9510038B2 (en) | 2013-12-17 | 2016-11-29 | Google Inc. | Personal measurement devices for media consumption studies |
US9754035B2 (en) * | 2014-02-07 | 2017-09-05 | Excalibur LP, LCC | Recursive unique user metrics in real time |
US8910195B1 (en) | 2014-02-20 | 2014-12-09 | Google Inc. | Systems and methods for enhancing audience measurement data |
EP3111399B1 (en) | 2014-02-26 | 2018-10-31 | Verto Analytics OY | Measurement of multi-screen internet user profiles, transactional behaviors and structure of user population through a hybrid census and user based measurement methodology |
US9934311B2 (en) * | 2014-04-24 | 2018-04-03 | Microsoft Technology Licensing, Llc | Generating unweighted samples from weighted features |
CN108780418A (en) | 2016-03-29 | 2018-11-09 | 安立公司 | For using flow point analysis to measure the system and method that effective client of network problem influences in real time |
JP2019532378A (en) * | 2016-07-27 | 2019-11-07 | ヴェルト アナリティクス オーワイ | Single-source cross-platform media measurement apparatus, device, and related method |
WO2018169584A1 (en) * | 2017-03-16 | 2018-09-20 | Google Llc | Systems and methods for entropy balanced population measurement |
US10484233B2 (en) * | 2017-06-08 | 2019-11-19 | At&T Intellectual Property I, L.P. | Implementing provider edge with hybrid packet processing appliance |
US20190116392A1 (en) | 2017-10-13 | 2019-04-18 | Comscore, Inc. | Deterministic household assignment model |
CN110633745B (en) * | 2017-12-12 | 2022-11-29 | 腾讯科技（深圳）有限公司 | Image classification training method and device based on artificial intelligence and storage medium |
US11823015B2 (en) * | 2018-03-24 | 2023-11-21 | Autodesk, Inc. | Techniques for classifying and recommending software workflows |
US11109085B2 (en) * | 2019-03-28 | 2021-08-31 | Adobe Inc. | Utilizing one hash permutation and populated-value-slot-based densification for generating audience segment trait recommendations |
-
2021
- 2021-08-06 US US17/396,563 patent/US20220091873A1/en active Pending
- 2021-09-24 EP EP21795092.2A patent/EP4147186A1/en active Pending
- 2021-09-24 WO PCT/US2021/051873 patent/WO2022066990A1/en unknown
- 2021-09-24 JP JP2022580960A patent/JP7427119B2/en active Active
- 2021-09-24 CN CN202180046767.6A patent/CN115968484A/en active Pending
- 2021-09-24 KR KR1020227044537A patent/KR20230010761A/en active IP Right Grant
Also Published As
Publication number | Publication date |
---|---|
JP7427119B2 (en) | 2024-02-02 |
JP2023533927A (en) | 2023-08-07 |
US20220091873A1 (en) | 2022-03-24 |
EP4147186A1 (en) | 2023-03-15 |
WO2022066990A1 (en) | 2022-03-31 |
KR20230010761A (en) | 2023-01-19 |
Similar Documents
Publication | Publication Date | Title |
---|---|---|
JP6272494B2 (en) | System and method for improving audience measurement data | |
CN106471539B (en) | System and method for obfuscating audience measurements | |
JP6226444B2 (en) | System and method for audience measurement | |
US20190147461A1 (en) | Methods and apparatus to estimate total audience population distributions | |
US11790116B2 (en) | Systems and methods for privacy preserving determination of intersections of sets of user identifiers | |
CN115968484A (en) | System and method for cross-media reporting by quickly merging data sources | |
CN114747227A (en) | Method, system, and apparatus for estimating census-level audience size and total impression duration across demographic groups | |
US20230144763A1 (en) | Differentially Private Frequency Deduplication | |
JP2023021113A (en) | Content provider recommendations to improve targetting and other settings | |
US20230153454A1 (en) | Meta-Estimation of Bloom Filters with Vectors of Counts | |
US20230259837A1 (en) | Content provider recommendations to improve targetting and other settings | |
CN107873099B (en) | Measuring call conversion for advertisements using aggregated call log data | |
CN114746899A (en) | Methods, systems, and apparatus for estimating census-level audience, impressions, and duration across demographic groups |
Legal Events
Date | Code | Title | Description |
---|---|---|---|
PB01 | Publication | ||
PB01 | Publication | ||
SE01 | Entry into force of request for substantive examination | ||
SE01 | Entry into force of request for substantive examination |