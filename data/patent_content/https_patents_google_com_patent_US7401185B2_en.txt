US7401185B2 - Buffered indexing to manage hierarchical tables - Google Patents
Buffered indexing to manage hierarchical tables Download PDFInfo
- Publication number
- US7401185B2 US7401185B2 US11/428,858 US42885806A US7401185B2 US 7401185 B2 US7401185 B2 US 7401185B2 US 42885806 A US42885806 A US 42885806A US 7401185 B2 US7401185 B2 US 7401185B2
- Authority
- US
- United States
- Prior art keywords
- entries
- level
- index
- tables
- new
- Prior art date
- Legal status (The legal status is an assumption and is not a legal conclusion. Google has not performed a legal analysis and makes no representation as to the accuracy of the status listed.)
- Active, expires
Links
Images
Classifications
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F12/00—Accessing, addressing or allocating within memory systems or architectures
- G06F12/02—Addressing or allocation; Relocation
- G06F12/08—Addressing or allocation; Relocation in hierarchically structured memory systems, e.g. virtual memory systems
- G06F12/0802—Addressing of a memory level in which the access to the desired data or data block requires associative addressing means, e.g. caches
- G06F12/0893—Caches characterised by their organisation or structure
- G06F12/0897—Caches characterised by their organisation or structure with two or more cache hierarchy levels
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F12/00—Accessing, addressing or allocating within memory systems or architectures
- G06F12/02—Addressing or allocation; Relocation
- G06F12/08—Addressing or allocation; Relocation in hierarchically structured memory systems, e.g. virtual memory systems
- G06F12/0802—Addressing of a memory level in which the access to the desired data or data block requires associative addressing means, e.g. caches
- G06F12/0804—Addressing of a memory level in which the access to the desired data or data block requires associative addressing means, e.g. caches with main memory updating
Definitions
- IBM® is a registered trademark of International Business Machines Corporation, Armonk, N.Y., U.S.A. Other names used herein may be registered trademarks, trademarks or product names of International Business Machines Corporation or other companies.
- This invention relates to computer design, and particularly to a hierarchical organization of arrays in a computer allowing creation of translation caches permitting maintaining the coherency of the entries in hierarchical computer tables without impacting service time of requests of the tables or requiring excessive space or logic.
- a multi-level scheme features entries that are associated with a particular level, perhaps in different tables, with each lower-level entry associated with a particular higher-level entry.
- the intent of the higher-level (parent) entries is that they share information common to all of their corresponding lower-level (child) entries. This not only saves space (chip area is probably the most important component of microprocessor design), it allows many common functions to be performed on a single parent entry instead of numerous child entries, which can improve performance and simplify the design.
- the shortcomings of the prior art are overcome and additional advantages are provided through the provision of a hierarchical organization which is useful in IBM computers and other computer systems having cache entries where the system can maintain coherency of the entries in the hierarchical tables.
- Multiple entries are linked in lower level tables to single entries in a higher level table with a buffered index such that having higher-level (parent) entries can share information common to all of their corresponding lower-level (child) entries.
- the index value increments each time a hierarchy-level entry is replaced or invalidated. Multiple sets of index values are maintained so that when one is exhausted, processing can continue with another one of the sets.
- the index management provides that lower level entries have index values including and index set management types, specifically a Current, a Dirty and a Clean index set. The uses of these index sets allows corresponding lower level entries with index values from an old dirty set to be scrubbed/invalidated while new entries are built from a new set.
- the cache uses linking of (multiple) entries in the lower-level tables to single entries in a higher-level table with a buffered index value. This index value increments each time the higher-level entry is replaced or invalidated (and thus disassociated with its corresponding lower-level entries).
- index values are maintained, including the current, dirty and clean index sets, so that when one set is exhausted, processing can continue with one of the other sets. All corresponding lower-level entries with index values from the old (dirty) set can then be scrubbed (invalidated) while new entries are built from the new (clean) set. Scrubbing prevents the coherency risks of associating old entries in the lower-level tables with new entries in the higher-level tables. This scrubbing can take place in the background (that is, between handling requests of the tables), and can be suspended and resumed at any time so as to not impact request service times of the tables.
- This method of maintaining the coherency of entries has the advantage that it takes only a few bits per entry to implement, and it can be expanded as necessary to meet the particular characteristics of the tables in use.
- An example of a background function that can be performed on a parent entry in a table is invalidation. Without the invention, every child entry associated with the parent is invalidated as well. The process of invalidating these children might be cumbersome, such as exhaustively searching every entry of an array in the foreground (that is, deferring all new requests of the array until the invalidation is complete), or require special hardware (such as CAM arrays) that is expensive in complexity or chip area to accomplish, or require significant space and associated logic for structures like doubly-linked lists to maintain child entries associated with the same parent.
- This invention solves the problem of maintaining the coherency of the entries in hierarchical computer tables without impacting service time of requests of the tables or requiring excessive space or logic.
- Existing solutions are either very expensive in silicon chip area or power (such as CAM arrays) or are unnecessarily complex (such as doubly-linked lists).
- FIG. 1A illustrates a computer system having our hierarchical tables
- FIG. 1B illustrates one example of hierarchical tables, one of high level H and another of low level L of the computer cache array in the FIG. 1A computer having a translation cache with a hierarchical table design.
- FIG. 2 illustrates our indexing design showing H and L of FIG. 1 expanded to contain a two-bit index field for each entry.
- FIG. 3 illustrates a new index set field which has been added and which functions as additional high-order bits of the index field.
- FIG. 4 illustrates a one-index-set-bit implementation, where the index set bit has been incorporated into the index field as the high-order bit and where the high order H has two dirty index sets, one for B and one for D.
- FIG. 1A a computer system which has a storage system and microprocessors, often including a cache array can be organized with an array of hierarchy storage elements containing hierarchical tables of entries of values.
- H and L two tables, with H consisting of high-level entries and L consisting of low-level entries.
- H high-level entries
- L low-level entries.
- H high-level entries
- L low-level entries.
- H high-level entries
- L low-level entries
- Each (valid) entry in L points to an entry in H (namely, its parent).
- H contains four entries, A through D, while L contains eight entries, a through h.
- Each entry contains a valid bit (1 means valid, 0 means invalid).
- Each entry in L points to a parent entry in H. For instance, d points to B and g points to D (as shown).
- Entries in H are valid if they have their valid bit set (in this case, B and C are valid).
- Entries in L are valid if both of the following conditions are met: (i) they have their valid bit set and (ii) they point to a valid entry in H. For example, a is invalid (does not have its valid bit set), as is g (has its valid bit set, but points to D, which is not valid), but d is valid (since its valid bit is set, and it points to B, which is valid).
- An entry O in H can become invalid for voluntary (direct action of hardware or software) or involuntary (aging out due to inactivity) reasons.
- One side effect is that its corresponding children in L become invalid since they no longer point to a valid entry in H. If, however, O is replaced with a new valid entry, N, you have the problem that all of O's children now point to N, which is not their parent.
- a straightforward index scheme can be employed, where a certain number of index bits, say I, are added to each entry in H and L. These index bits can encode 2 ⁇ I number of distinct values.
- Each entry in H can start its index at 0, and increment to 2 ⁇ I ⁇ 1 as a new entry overwrites the old one.
- Corresponding child entries in L would have their indices set to the same value, so that these children could be validated by comparing their indices to the index of their parent in H, making sure these indices are set to the same value.
- FIG. 2 demonstrates this indexing scheme.
- H and L are expanded to contain a two-bit index field for each entry.
- its index value is set to that of its parent in H.
- its corresponding index is incremented so that children in L which still point to it no longer have matching indices.
- the index bits form an unsigned binary number, starting at 0, incrementing by one up to 2 ⁇ I ⁇ 1, and then back to 0, every time a new entry is installed in that particular slot (i.e., replaces an existing entry with index value one less).
- a buffered index approach that is, maintaining multiple sets of index values. See FIG. 3 , where a new field has been added (the index set), which works for all intents and purposes as additional high-order bits of the index field. That is, when an index field wraps, the corresponding index set field is incremented.
- a fourth criterion is added for validity of entries in L: (iv) their index set is equal to that of their parent in H. For instance, in FIG. 3 , d is not valid (different index set than its parent C), e is not valid (different index than C), but f is valid (index set and index equal to those of C).
- index set management There are three types of index sets:
- Dirty a dirty index set is one that is not in use and may have associated with it entries in L that have their valid bits set.
- Clean a clean index set is one that is not in use and does not have associated with it any entries in L that have their valid bits set.
- index sets start out clean, with one being identified as the current set. Once the current set is exhausted, it becomes dirty and indexing resumes with a clean set becoming the next current set. While not in use, the dirty sets can be scrubbed, thus converting them to clean sets. As long as this scrubbing takes place while the dirty sets are not needed (background scrubbing), coherency is maintained without apparent interruption to the system. If, however, the current set is exhausted, and it is necessary to switch to a new set, and all other sets are dirty, then the scrubbing cannot be delayed. This could negatively impact performance, holding up requests while the scrubbing is done (foreground scrubbing).
- index set bit that is, two index sets.
- the index field can incorporate the index set as its high-order bit for all practical purposes.
- S you would need S bits to keep track of the dirty index sets.
- this new field could identify the first dirty index set, with all those index sets between this one and the current one (noninclusive) assumed to be dirty.
- FIG. 4 demonstrates a one-index-set-bit implementation, where the index set bit has been incorporated into the index field as the high-order bit.
- H there are two dirty index sets, one for B and one for D. While B's current index set (0) still has some valid values (namely, 10 and 11), D's has been exhausted. When D gets replaced with a new entry, it will be necessary to complete the scrubbing in L of any entry that still points to D with a dirty index set.
- g is just such an entry: its valid bit is one, it points to D, its index set is 0 (which is not the current index set for D), and the state of its index set is dirty.
- g would have to have its valid bit set to 0 before a new entry could be written for D.
- new entries could be written for B, even though h points to a dirty index set of B's, for there is still room in the current index set of B. It is only necessary that h have its valid bit set to 0 before B switches index sets.
- index bits as well as the number of index set bits, is going to depend on many factors, including the frequency and efficiency of scrubbing as well as the activity rate of the table. Increasing either field by one bit doubles (on average) the amount of time needed between scrubbing, at the expense of growing both parent and child entries by one bit. In addition, increasing the index set field by one bit grows the parent entries an additional bit (to manage the dirty index sets), but allows more granularity in the scrubbing process, which can result in more efficient scrubbing.
- H is searched for entries with dirty index sets.
- L is then searched for corresponding child entries with dirty index sets, and such entries are invalidated.
- the dirty index set(s) can be marked clean and the search can resume in H for more entries with dirty index sets.
- Any necessary activity (request of H and/or L) that comes along during this background scrubbing can suspend the scrubbing in order to honor the request without unnecessary delay, with the scrubbing resuming where it left off after the request has been honored.
- the capabilities of the present invention can be implemented in software, firmware, hardware or some combination thereof.
- one or more aspects of the present invention can be included in an article of manufacture (e.g., one or more computer program products) having, for instance, computer usable media.
- the media has embodied therein, for instance, computer readable program code means for providing and facilitating the capabilities of the present invention.
- the article of manufacture can be included as a part of a computer system or sold separately.
- At least one program storage device readable by a machine, tangibly embodying at least one program of instructions executable by the machine to perform the capabilities of the present invention can be provided.
Abstract
Description
Claims (20)
Priority Applications (3)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US11/428,858 US7401185B2 (en) | 2006-07-06 | 2006-07-06 | Buffered indexing to manage hierarchical tables |
CN2007101102341A CN101101574B (en) | 2006-07-06 | 2007-06-05 | Method and system to manage hierarchical tables in array |
JP2007176456A JP5232413B2 (en) | 2006-07-06 | 2007-07-04 | Method and computer system for managing hierarchical tables |
Applications Claiming Priority (1)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US11/428,858 US7401185B2 (en) | 2006-07-06 | 2006-07-06 | Buffered indexing to manage hierarchical tables |
Publications (2)
Publication Number | Publication Date |
---|---|
US20080010407A1 US20080010407A1 (en) | 2008-01-10 |
US7401185B2 true US7401185B2 (en) | 2008-07-15 |
Family
ID=38920318
Family Applications (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
US11/428,858 Active 2027-03-21 US7401185B2 (en) | 2006-07-06 | 2006-07-06 | Buffered indexing to manage hierarchical tables |
Country Status (3)
Country | Link |
---|---|
US (1) | US7401185B2 (en) |
JP (1) | JP5232413B2 (en) |
CN (1) | CN101101574B (en) |
Cited By (2)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US9916359B2 (en) * | 2015-06-01 | 2018-03-13 | Sap Se | Indexing dynamic hierarchical data |
US10977040B2 (en) | 2019-02-19 | 2021-04-13 | International Business Machines Corporation | Heuristic invalidation of non-useful entries in an array |
Families Citing this family (6)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US7689771B2 (en) * | 2006-09-19 | 2010-03-30 | International Business Machines Corporation | Coherency management of castouts |
CN102467560B (en) * | 2010-11-19 | 2014-07-09 | 金蝶软件（中国）有限公司 | Form replacement method and system |
DE102010054446A1 (en) | 2010-12-14 | 2012-06-14 | Giesecke & Devrient Gmbh | Portable data carrier with misoperation counter |
CN103984647B (en) * | 2013-02-08 | 2017-07-21 | 上海芯豪微电子有限公司 | Storage table replacement method |
CN105183754B (en) * | 2015-07-17 | 2018-11-02 | 浙江大学 | A kind of automatic read method of layer-stepping table |
CN106709005B (en) * | 2016-12-23 | 2020-11-24 | 北京奇虎科技有限公司 | Method, device and system for processing redundant index in database system |
Citations (10)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
JPS56101684A (en) | 1980-01-16 | 1981-08-14 | Fujitsu Ltd | Information processing system |
US5966735A (en) | 1996-11-22 | 1999-10-12 | Digital Equipment Corporation | Array index chaining for tree structure save and restore in a process swapping system |
US6035326A (en) | 1997-05-07 | 2000-03-07 | International Business Machines Corporation | Mapping table lookup optimization system |
US6425762B1 (en) | 1998-02-24 | 2002-07-30 | Wind River Systems, Inc. | System and method for cosimulation of heterogeneous systems |
US20020124133A1 (en) | 2001-03-01 | 2002-09-05 | Sony Corporation | Method and system for optimizing data storage and retrieval by an audio/video file system using hierarchical file allocation table |
US6760732B2 (en) | 2001-09-06 | 2004-07-06 | International Business Machines Corporation | Method and system for viewing a record of an organization having a hierarchy of departments |
US20040230749A1 (en) * | 2003-05-12 | 2004-11-18 | International Business Machines Corporation | Invalidating storage, clearing buffer entries, and an instruction therefor |
US6826726B2 (en) | 2000-08-18 | 2004-11-30 | Vaultus Mobile Technologies, Inc. | Remote document updating system using XML and DOM |
US6877089B2 (en) | 2000-12-27 | 2005-04-05 | International Business Machines Corporation | Branch prediction apparatus and process for restoring replaced branch history for use in future branch predictions for an executing program |
US6956848B1 (en) | 1999-06-15 | 2005-10-18 | Altigen Communications, Inc. | Computer network-based auto-attendant method and apparatus |
Family Cites Families (6)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
JP2976980B2 (en) * | 1988-05-06 | 1999-11-10 | 富士通株式会社 | Cache control method |
JPH05216765A (en) * | 1992-02-06 | 1993-08-27 | Hitachi Ltd | Hierarchical buffer storage device |
US5860095A (en) * | 1996-01-02 | 1999-01-12 | Hewlett-Packard Company | Conflict cache having cache miscounters for a computer memory system |
US5802571A (en) * | 1996-10-21 | 1998-09-01 | International Business Machines Corporation | Apparatus and method for enforcing data coherency in an information handling system having multiple hierarchical levels of cache memory |
JP3789998B2 (en) * | 1997-01-17 | 2006-06-28 | 株式会社ルネサステクノロジ | Memory built-in processor |
US6983388B2 (en) * | 2000-10-25 | 2006-01-03 | Agere Systems Inc. | Method and apparatus for reducing leakage power in a cache memory by using a timer control signal that removes power to associated cache lines |
-
2006
- 2006-07-06 US US11/428,858 patent/US7401185B2/en active Active
-
2007
- 2007-06-05 CN CN2007101102341A patent/CN101101574B/en not_active Expired - Fee Related
- 2007-07-04 JP JP2007176456A patent/JP5232413B2/en not_active Expired - Fee Related
Patent Citations (16)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
JPS56101684A (en) | 1980-01-16 | 1981-08-14 | Fujitsu Ltd | Information processing system |
US5966735A (en) | 1996-11-22 | 1999-10-12 | Digital Equipment Corporation | Array index chaining for tree structure save and restore in a process swapping system |
US6035326A (en) | 1997-05-07 | 2000-03-07 | International Business Machines Corporation | Mapping table lookup optimization system |
US6425762B1 (en) | 1998-02-24 | 2002-07-30 | Wind River Systems, Inc. | System and method for cosimulation of heterogeneous systems |
US6956848B1 (en) | 1999-06-15 | 2005-10-18 | Altigen Communications, Inc. | Computer network-based auto-attendant method and apparatus |
US6826726B2 (en) | 2000-08-18 | 2004-11-30 | Vaultus Mobile Technologies, Inc. | Remote document updating system using XML and DOM |
US6877089B2 (en) | 2000-12-27 | 2005-04-05 | International Business Machines Corporation | Branch prediction apparatus and process for restoring replaced branch history for use in future branch predictions for an executing program |
US20020124133A1 (en) | 2001-03-01 | 2002-09-05 | Sony Corporation | Method and system for optimizing data storage and retrieval by an audio/video file system using hierarchical file allocation table |
US6760732B2 (en) | 2001-09-06 | 2004-07-06 | International Business Machines Corporation | Method and system for viewing a record of an organization having a hierarchy of departments |
US20040230749A1 (en) * | 2003-05-12 | 2004-11-18 | International Business Machines Corporation | Invalidating storage, clearing buffer entries, and an instruction therefor |
US20050268045A1 (en) * | 2003-05-12 | 2005-12-01 | International Business Machines Corporation | Method, system and program product for invalidating a range of selected storage translation table entries |
US20050273561A1 (en) * | 2003-05-12 | 2005-12-08 | International Business Machines Corporation | Method, system and program product for clearing selected storage translation buffer entries |
US7197601B2 (en) * | 2003-05-12 | 2007-03-27 | International Business Machines Corporation | Method, system and program product for invalidating a range of selected storage translation table entries |
US20070186075A1 (en) * | 2003-05-12 | 2007-08-09 | International Business Machines Corporation | Clearing Selected Storage Translation Buffer Entries Based on Table Origin Address |
US7281115B2 (en) * | 2003-05-12 | 2007-10-09 | International Business Machines Corporation | Method, system and program product for clearing selected storage translation buffer entries |
US7284100B2 (en) * | 2003-05-12 | 2007-10-16 | International Business Machines Corporation | Invalidating storage, clearing buffer entries, and an instruction therefor |
Cited By (2)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US9916359B2 (en) * | 2015-06-01 | 2018-03-13 | Sap Se | Indexing dynamic hierarchical data |
US10977040B2 (en) | 2019-02-19 | 2021-04-13 | International Business Machines Corporation | Heuristic invalidation of non-useful entries in an array |
Also Published As
Publication number | Publication date |
---|---|
JP5232413B2 (en) | 2013-07-10 |
CN101101574B (en) | 2011-02-09 |
US20080010407A1 (en) | 2008-01-10 |
JP2008016033A (en) | 2008-01-24 |
CN101101574A (en) | 2008-01-09 |
Similar Documents
Publication | Publication Date | Title |
---|---|---|
US7401185B2 (en) | Buffered indexing to manage hierarchical tables | |
US9235531B2 (en) | Multi-level buffer pool extensions | |
O'neil et al. | An optimality proof of the LRU-K page replacement algorithm | |
CN107077495B (en) | High performance transactions in a database management system | |
US9003162B2 (en) | Structuring storage based on latch-free B-trees | |
Tao et al. | Efficient historical R-trees | |
US8443149B2 (en) | Evicting data from a cache via a batch file | |
EP1782212B1 (en) | System and method for maintaining objects in a lookup cache | |
CN102999522B (en) | A kind of date storage method and device | |
EP3170106A1 (en) | High throughput data modifications using blind update operations | |
US20160196063A1 (en) | Apparatus and method for managing buffer having three states on the basis of flash memory | |
Li et al. | {ROLEX}: A Scalable {RDMA-oriented} Learned {Key-Value} Store for Disaggregated Memory Systems | |
CN104778132A (en) | Multi-core processor directory cache replacement method | |
Papagiannis et al. | Kreon: An efficient memory-mapped key-value store for flash storage | |
CN102521144A (en) | Flash translation layer system | |
Tung On et al. | Flash-optimized B+-tree | |
Magdy et al. | On main-memory flushing in microblogs data management systems | |
CN103729309A (en) | Method for cataloging Cache consistency | |
US8135911B2 (en) | Managing a region cache | |
Saxena | A study of page replacement algorithms | |
US7489689B2 (en) | Method, system and apparatus for scheduling a large pool of resources | |
US10331560B2 (en) | Cache coherence in multi-compute-engine systems | |
Das et al. | A framework for block placement, migration, and fast searching in tiled-DNUCA architecture | |
Zheng et al. | ISKEVA: in-SSD key-value database engine for video analytics applications | |
CN115657954B (en) | Data processing method and device |
Legal Events
Date | Code | Title | Description |
---|---|---|---|
AS | Assignment |
Owner name: INTERNATIONAL BUSINESS MACHINES CORPORATION, NEW YFree format text: ASSIGNMENT OF ASSIGNORS INTEREST;ASSIGNORS:GAERTNER, UTE;PFEFFER, ERWIN F;WAGAR, BRUCE;REEL/FRAME:017881/0528;SIGNING DATES FROM 20060608 TO 20060627 |
|
FEPP | Fee payment procedure |
Free format text: PAYOR NUMBER ASSIGNED (ORIGINAL EVENT CODE: ASPN); ENTITY STATUS OF PATENT OWNER: LARGE ENTITY |
|
STCF | Information on status: patent grant |
Free format text: PATENTED CASE |
|
AS | Assignment |
Owner name: GOOGLE INC., CALIFORNIAFree format text: ASSIGNMENT OF ASSIGNORS INTEREST;ASSIGNOR:INTERNATIONAL BUSINESS MACHINES CORPORATION;REEL/FRAME:026894/0001Effective date: 20110817 |
|
FPAY | Fee payment |
Year of fee payment: 4 |
|
FPAY | Fee payment |
Year of fee payment: 8 |
|
AS | Assignment |
Owner name: GOOGLE LLC, CALIFORNIAFree format text: CHANGE OF NAME;ASSIGNOR:GOOGLE INC.;REEL/FRAME:044101/0610Effective date: 20170929 |
|
MAFP | Maintenance fee payment |
Free format text: PAYMENT OF MAINTENANCE FEE, 12TH YEAR, LARGE ENTITY (ORIGINAL EVENT CODE: M1553); ENTITY STATUS OF PATENT OWNER: LARGE ENTITYYear of fee payment: 12 |