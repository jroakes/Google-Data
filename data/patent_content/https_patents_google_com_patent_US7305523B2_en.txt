US7305523B2 - Cache memory direct intervention - Google Patents
Cache memory direct intervention Download PDFInfo
- Publication number
- US7305523B2 US7305523B2 US11/056,673 US5667305A US7305523B2 US 7305523 B2 US7305523 B2 US 7305523B2 US 5667305 A US5667305 A US 5667305A US 7305523 B2 US7305523 B2 US 7305523B2
- Authority
- US
- United States
- Prior art keywords
- cache
- request
- direct intervention
- semi
- processor
- Prior art date
- Legal status (The legal status is an assumption and is not a legal conclusion. Google has not performed a legal analysis and makes no representation as to the accuracy of the status listed.)
- Expired - Fee Related, expires
Links
Images
Classifications
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F12/00—Accessing, addressing or allocating within memory systems or architectures
- G06F12/02—Addressing or allocation; Relocation
- G06F12/08—Addressing or allocation; Relocation in hierarchically structured memory systems, e.g. virtual memory systems
- G06F12/0802—Addressing of a memory level in which the access to the desired data or data block requires associative addressing means, e.g. caches
- G06F12/0893—Caches characterised by their organisation or structure
- G06F12/0897—Caches characterised by their organisation or structure with two or more cache hierarchy levels
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F12/00—Accessing, addressing or allocating within memory systems or architectures
- G06F12/02—Addressing or allocation; Relocation
- G06F12/08—Addressing or allocation; Relocation in hierarchically structured memory systems, e.g. virtual memory systems
- G06F12/12—Replacement control
- G06F12/121—Replacement control using replacement algorithms
- G06F12/126—Replacement control using replacement algorithms with special data handling, e.g. priority of data or instructions, handling errors or pinning
- G06F12/127—Replacement control using replacement algorithms with special data handling, e.g. priority of data or instructions, handling errors or pinning using additional replacement algorithms
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F12/00—Accessing, addressing or allocating within memory systems or architectures
- G06F12/02—Addressing or allocation; Relocation
- G06F12/08—Addressing or allocation; Relocation in hierarchically structured memory systems, e.g. virtual memory systems
- G06F12/0802—Addressing of a memory level in which the access to the desired data or data block requires associative addressing means, e.g. caches
- G06F12/0806—Multiuser, multiprocessor or multiprocessing cache systems
- G06F12/0815—Cache consistency protocols
- G06F12/0831—Cache consistency protocols using a bus scheme, e.g. with bus monitoring or watching means
Definitions
- the present invention relates generally to computer memories, and in particular, to a system and method for implementing direct cache intervention across semi-private cache memory units.
- the present invention further relates to processing of castouts in a manner enabling victim caching across same-level cache memories deployed from hierarchically distinct cache memories.
- a conventional symmetric multiprocessor (SMP) computer system such as a server computer system, includes multiple processing units all coupled to a system interconnect, which typically comprises one or more address, data and control buses. Coupled to the system interconnect is a system memory, which represents the lowest level of volatile memory in the multiprocessor computer system and which generally is accessible for read and write access by all processing units.
- system memory which represents the lowest level of volatile memory in the multiprocessor computer system and which generally is accessible for read and write access by all processing units.
- each processing unit is typically further supported by a respective multi-level cache hierarchy, the lower level(s) of which may be shared by one or more processor cores.
- Cache memories are commonly utilized to temporarily store values that might be accessed by a processor in order to speed up processing by reducing access latency introduced by having loading needed values from memory.
- the cache hierarchy includes at least two levels.
- the level one (L1), or upper-level cache is usually a private cache associated with a particular processor core and cannot be accessed by other cores in an MP system.
- the processor core first looks for a data in the upper-level cache. If the requested data is not found in the upper-level cache, the processor core then access lower-level caches (e.g., level two (L2) or level three (L3) caches) for the requested data.
- the lowest level cache e.g., L3 is often shared among several processor cores.
- the cache memory is directly accessible by its the processor core and other cache units that are part of the same hierarchy.
- the given cache is not directly accessible but must instead be accessed by a shared bus transaction in which read and write requests are placed on a shared bus and retrieved and responded to by lower level memory or intervention snooping.
- the present invention addresses these and other needs unresolved by the prior art.
- a direct intervention request is sent from the first cache memory to a second cache memory requesting a direct intervention that satisfies a data access request sent from a processor core to the first cache memory.
- the present invention provides a direct castin technique combined with the direct intervention to enable victim caching across same-level cache memories deployed from hierarchically distinct cache memories.
- FIG. 1 is a high-level block diagram depicting an exemplary data processing system in which the present invention may be implemented
- FIG. 2 is a more detailed block diagram of a processing unit in which the present invention may be implement
- FIG. 3 is a more detailed block diagram of an L2 cache in which the present invention may be implemented
- FIG. 4A is a flow diagram illustrating steps performed within an L2 cache during a load operation
- FIG. 4B is a flow diagram depicting steps performed within an L2 cache in response to a load miss
- FIG. 5A is a block diagram illustrating a pair of semi-private L2 caches adapted for implementing direct cache intervention in accordance with a preferred embodiment of the present invention
- FIG. 5B is a block diagram illustrating a pair of semi-private L2 caches adapted for implementing victim cache processing in accordance with a preferred embodiment of the present invention
- FIG. 6A is a high-level flow diagram depicting steps performed within an L2 cache during a load operation in accordance with the present invention
- FIG. 6B is a high-level flow diagram illustrating steps performed within an L2 cache responsive to a load miss in accordance with the present invention
- FIG. 7 is a high-level flow diagram depicting steps performed by a direct intervention L2 cache in association with the load processing shown in FIGS. 6A and 6B ;
- FIG. 8A is a high-level flow diagram illustrating conventional processing of a store operation
- FIG. 8B is a high-level flow diagram depicting conventional handling of a cache miss on a store operation
- FIG. 9 is a high-level flow diagram illustrating an cache castout in accordance with the present invention.
- FIGS. 10A and 10B illustrate a high-level flow diagram depicting a cast in corresponding to the castout of FIG. 9 in accordance with the present invention.
- the present invention is generally directed to cache intervention and, more specifically, to an improved cache intervention technique whereby private cache memories directly access other private caches without the need for shared interconnect request processing.
- FIG. 1 there is illustrated a high-level block diagram depicting an exemplary data processing system in which the present invention may be implemented.
- the data processing system is depicted as a cache coherent symmetric multiprocessor (SMP) data processing system 100 .
- SMP cache coherent symmetric multiprocessor
- data processing system 100 includes multiple processing nodes 102 a , 102 b for processing data and instructions.
- Processing nodes 102 are coupled to a system interconnect 110 for conveying address, data and control information.
- System interconnect 110 may be implemented, for example, as a bused interconnect, a switched interconnect or a hybrid interconnect.
- each processing node 102 is realized as a multi-chip module (MCM) containing four processing units 104 a - 104 d , each preferably realized as a respective integrated circuit.
- MCM multi-chip module
- the processing units 104 within each processing node 102 are coupled for communication to each other and system interconnect 110 by a local interconnect 114 , which, like system interconnect 110 , may be implemented, for example, with one or more buses and/or switches.
- each local interconnect 114 includes not only processing units 104 , but also one or more memory controllers (not depicted), each providing an interface to a respective system memory 108 (depicted in FIG. 2 ).
- Data and instructions residing in system memory 108 can generally be accessed and modified by a processor core in any processing unit 104 of any processing node 102 within data processing system 100 .
- one or more memory controllers 106 can be coupled to system interconnect 110 rather than a local interconnect 114 , or alternatively, integrated within another device such as a processing unit 104 .
- SMP data processing system 100 can include many additional non-illustrated components, such as interconnect bridges, non-volatile storage, ports for connection to networks or attached devices, etc. Because such additional components are not necessary for an understanding of the present invention, they are not illustrated in FIG. 1 or discussed further herein. It should also be understood, however, that the enhancements provided by the present invention are applicable to cache coherent data processing systems of diverse architectures and are in no way limited to the generalized data processing system architecture illustrated in FIG. 1 .
- each processing unit 104 includes two processor cores 200 a , 200 b for independently processing instructions and data. While not expressly depicted in FIG. 2 , each processor core 200 includes one or more execution units and supporting sequencing logic for executing instructions. The instructions executed by the execution units include instructions that request access to a memory block or cause the generation of a request for access to a memory block.
- each processor core 200 is supported by a multi-level volatile memory hierarchy having at its lowest level shared system memory 108 , and at its upper levels one or more levels of cache memory, which in the illustrative embodiment include a store-through level one (L1) cache 226 within and private to each processor core 200 , and a respective level two (L2) cache 230 , which, as explained in further detail below, is semi-private to its respective core and is accessible via the direct intervention technique of the present invention.
- L2 cache 230 includes an L2 array and directory 234 , a master 232 and a snooper 236 .
- Master 232 initiates transactions on local interconnect 114 and system interconnect 110 and accesses L2 array and directory 234 in response to memory access (and other) requests received from the associated processor core 200 .
- Snooper 236 snoops operations on local interconnect 114 , provides appropriate responses, and performs any accesses to L2 array and directory 234 required by the operations.
- cache hierarchies includes only two levels of cache, those skilled in the art will appreciate that alternative embodiments may include additional levels (L3, L4, etc.) of on-chip or off-chip in-line or lookaside cache, which may be fully inclusive, partially inclusive, or non-inclusive of the contents the upper levels of cache.
- L3, L4, etc. additional levels of on-chip or off-chip in-line or lookaside cache
- Each processing unit 104 includes an integrated I/O (input/output) controller 214 supporting the attachment of one or more I/O devices.
- I/O controller 214 may issue read and write operations on its local interconnect 114 and system interconnect 110 , for example, in response to requests by attached I/O device (not depicted).
- each L2 cache 230 further comprises a direct intervention (DI) module 250 communicatively coupled with the L2 array aid directory 234 as well as master 232 and snooper 236 .
- DI module 250 is preferably integrated into cache directory arbiter logic (depicted and described with reference to FIGS. 3-7 ) and includes program modules for performing direct cache intervention of the present invention as explained in further detail with reference to FIGS. 4-7 .
- the array and directory 234 of L2 cache 230 generally comprises a cache memory array 302 and a directory 308 of the contents of array 302 . Assuming cache array 302 and directory 308 form a set associative unit, and as in conventional set associative caches, memory locations in system memories are mapped to particular congruence classes within cache array 302 utilizing predetermined index bits within the system memory (real) addresses.
- cache directory 308 which contains one directory entry for each cache line in cache array 302 . While not expressly depicted in FIG. 3 , it will be understood by those skilled in the art that each directory entry in cache directory 308 includes various entry identifier and indexing fields such as tag fields for using a tag portion of the corresponding real address to specify the particular cache line stored in cache array 302 , state fields that indicate the coherency state of the cache lines, and a LRU (Least Recently Used) field indicating a replacement order for the cache line with respect to other cache lines in the same congruence class.
- LRU Least Recently Used
- arbiter logic 305 arbitrates the order of processing of memory access requests from core 200 and interconnect 114 . Memory access requests, including load and store operations, are forwarded in accordance with the arbitration policy implemented by arbiter 305 to a dispatch pipe 306 where each read and write request is processed with respect to directory 308 over a given number of cycles.
- the direct intervention module 250 depicted in FIG. 2 is fully or partially implemented as part of or in association with arbiter logic 305 within L2 cache 230 and includes instructions and modules for implementing the methods described below with reference to the following figures.
- the master 232 of L2 cache 230 comprises RC (read claim) machines 312 that individually handle memory access requests issued from core 200 and CO (castout) machines 310 that manage the removal and writeback of memory blocks from cache array 302 .
- Snoop machines 236 respond to memory access requests “snooped” from interconnect 114 .
- L2 cache 230 further includes an RC queue 320 and a CPI (castout push intervention) queue 318 that buffer data being inserted and removed from the cache array 302 .
- RC queue 320 includes a number of buffer entries that each individually correspond to a particular one of RC machines such that each RC 312 that is dispatched retrieves data from only the designated buffer entry.
- CPI queue 318 includes a number of buffer entries that each individually correspond to a particular one of the castout machines 310 and snoop machines 236 , such that each CO machine 310 and each snooper 236 that is dispatched retrieves data from only the respective designated CPI buffer entry.
- FIG. 4A there is depicted a flow diagram illustrating steps performed during a conventional cache load operation by an exemplary L2 cache such as L2 cache 230 .
- the process commences as shown at steps 402 and 404 with a load operation from core 200 sent to arbiter 305 , dispatch pipe 306 , and directory 308 .
- arbiter 305 , dispatch 306 , and directory 308 process the received load in parallel as illustrated at step 406 .
- arbiter 305 speculatively reads cache array 302 for the requested cache line while the request traverses dispatch pipe 306 during the directory lookup in directory 308 .
- RC machines 312 Following release of the load from dispatch pipe 306 , continued processing of the command depends on availability of one of RC machines 312 for processing the command. As shown at steps 408 , 410 , and 422 , the processing of the load operation terminates if no RC machine 312 is available. Otherwise, an available RC machine 312 is dispatched to handle the load operation as depicted at steps 408 and 412 .
- a pass indicator signals a successfully dispatched RC (step 414 ) so that the load is not re-issued. If the requested cache line is in array 302 and is verified by the coherence state read from directory 308 as valid, the RC machine 312 signals the third multiplexer M 3 to return the data to core 200 as shown at steps 416 and 418 . Processing of the cache hit concludes with the dispatched RC machine 312 being de-allocated or released as shown at steps 420 and 422 .
- FIG. 4B depicts steps performed within L2 cache 230 in response to a miss at step 416 .
- the assigned RC machine 312 issues a read request on interconnect 114 and awaits return of the requested data into an RC queue 320 that buffers incoming cache lines to be placed in array 302 .
- the data is forwarded to processor core 200 via M 3 (step 436 ).
- the castout process ends as shown at step 452 .
- RC machine 312 issues a castout request via M 1 to arbiter 305 and dispatch pipe 306 , which dispatches one of CO machines 310 to handle the castout, as illustrated at steps 438 and 440 .
- the relative instruction processing responsibilities usually dictate that there are a greater number of RC machines 312 than CO machines 310 .
- RC machine 312 therefore repeats the castout request until a CO machine 310 is available and successfully dispatched (steps 440 and 442 ).
- arbiter 305 reads the victim cache line out of array 302 to a CPI (castout push intervention) queue 318 (step 444 ) in preparation for the victim line to be placed in a lower level cache or system memory. Responsive to both the victim line being read out to CPI queue 318 at step 444 (if a castout was necessary) and also the read data being forwarded at step 436 , the data is transferred from RC queue 320 into the appropriate line in array 302 , as shown at steps 437 and 446 . After the data is transferred from RC queue 320 into the appropriate line in array 302 , the RC machine is deallocated and the read process terminates as depicted at steps 420 and 422 .
- CPI castout push intervention
- the CO machine 310 issues a request to fabric controller 316 for the victim line to be pushed from CPI queue 318 to the lower level memory via interconnect 114 (step 448 ).
- the victim line push is processed and completed followed by the CO machine being released as shown at steps 450 , 451 , and 452 .
- the present invention provides an improved intervention method by which caches, such as L2 caches 230 a and 230 b which are otherwise private to their respective cores, can perform what is referred to herein as a “direct intervention” in response to a cache miss.
- caches such as L2 caches 230 a and 230 b which are otherwise private to their respective cores
- direct intervention is performed speculatively (i.e. in parallel with the memory access operation in the host cache) and reduces the likelihood of having to process a shared bus request responsive to a cache miss.
- FIG. 5A and FIG. 5B are block diagrams illustrating a pair of semi-private L2 caches such as those deployed on each of processing units 104 .
- L2 cache 230 a and 230 b are depicted at a sufficient level of detail to illustrate the functions and adaptations provided by the present invention to enable direct intervention and victim caching between the L2 caches.
- the direct cache intervention and victim caching of the present invention are each described only in a single direction from one specified L2 cache unit to the other. It will be apparent to those skilled in the art that both caches 230 a and 230 b may simultaneously implement direct intervention from caches 230 b and 230 a respectively even though intervention processing is depicted herein in only one direction.
- either cache 230 a or 230 b may serve as the victim cache to cache 230 b and 230 a respectively even though only using cache 230 b as a victim cache is shown.
- the respective caches will be further designated as L2.0 and L2.1 will be used to further designate caches 230 a and 230 b , respectively.
- L2.0 cache 230 a and L2.1 cache 230 b incorporate the features depicted in FIG. 5A and FIG. 5B as well as direct intervention logic and castout logic adapted for implementing direct cache intervention and victim cache processing in accordance with a preferred embodiment of the present invention.
- FIGS. 6A and 6B in conjunction with FIG. 5A there are illustrated high-level flow diagrams depicting steps performed within an L2 cache during a load operation in accordance with the present invention. The load operation described is a load performed by the L2.0 cache 230 a .
- the direct intervention described below results from the load performed by the L2.0 cache 230 a in association with the L2.1 cache 230 b and is referred to as an “L2.1 intervention.”
- the process commences as shown at steps 602 and 604 with a load operation from core 200 a sent to arbiter 305 a , dispatch pipe 306 a , and directory 308 a .
- arbiter 305 a , dispatch 306 a , and directory 308 a process the received load in parallel as illustrated at step 608 .
- arbiter 305 a speculatively reads cache array 302 a for the requested cache line while the request traverses dispatch pipe 306 a during the directory lookup in directory 308 a .
- an L2.1 direct invention request is speculatively sent from arbiter 305 a to arbiter 305 b in the L2.1 cache 230 b substantially in parallel with the speculative read and directory lookup in L2.0 cache 230 a .
- the INTRV REQ includes the address of the requested cache line.
- processing of the load operation depends on availability of one of RC machines 312 a for processing the command. As shown at steps 610 , 612 , 614 , and 628 , processing of the load operation terminates if no RC machine 312 is available. Furthermore, an RC dispatch failure results in arbiter 305 a issuing a direct intervention cancellation signal (not depicted) to the L2.1 arbiter 305 b (step 614 ) resulting in L2.1 cache 230 b canceling further processing of the direct intervention request.
- an available RC machine 312 is dispatched to handle the L2.0 load operation.
- a pass indicator signals a successfully dispatched RC (step 618 ) so that the load is not re-issued.
- RC machine 312 a signals the third multiplexer M 3 to return the data to core 200 a as shown at steps 620 and 624 .
- arbiter 305 a issues a direct intervention cancellation signal to the L2.1 arbiter 305 b (step 622 ) to cancel further L2.1 cache 230 b processing of the direct intervention request. Processing of the cache hit concludes by deallocating the dispatched RC machine 312 a as shown at steps 626 and 628 .
- L2.1 arbiter may respond to the direct intervention request, INTRV REQ, with an early or a late acknowledgement signal, referred to herein as “fast ACK” and “slow ACK,” respectively.
- fast ACK early or a late acknowledgement signal
- slow ACK slow ACK
- a NACK negative acknowledgement
- the L2.1 cache 230 b does not accept the direct intervention request, or if late or “slow,” that the intervention processing failed on the L2.1 side, and thus that the L2.0 cache may process with a memory access on the system bus.
- the load operation processing commences in the conventional manner. Namely, a read request is issued onto interconnect 114 as shown at step 642 .
- the assigned RC machine 312 a issues the read request on interconnect 114 and waits for return of the requested data into RC queue 320 a that buffers incoming cache lines to be placed in array 302 a .
- the data is forwarded to processor core 200 a via M 3 (step 645 ).
- RC machine 312 a issues a castout request via M 1 to arbiter 305 a and dispatch pipe 306 a , which dispatches one of CO machines 310 a to handle the castout, as illustrated at steps 646 and 650 .
- RC machine 312 a may have to repeat the castout request until a CO machine 310 a is available and successfully dispatched (steps 650 and 652 ).
- arbiter 305 a reads the victim cache line out of array 302 a to CPI queue 318 a (step 654 ) in preparation for the victim line to be placed in a lower level cache or system memory. Responsive to both the victim line being read out to CPI queue 318 a at step 654 (if a castout was required) and also the read data being forwarded at step 645 , the data buffered in the RC queue 320 a is transferred into the appropriate line in array 302 a as shown at steps 647 and 648 . Finally, RC machine 312 a is released as shown at step 626 and the read process concludes at step 628 .
- the CO machine 310 a issues a request to fabric controller 316 for the victim line to be pushed from CPI queue 318 a to the lower level memory via interconnect 114 (step 656 ).
- the victim line push is processed and completed and the CO machine 310 a released as shown at steps 658 , 659 , and 660 .
- L2.0 arbiter 305 a sends the push request to L2.1 CPI queue 318 b (step 634 ).
- the request preferably includes the tag or other identifier of the L2.1 snoop machine 236 b that was dispatched by arbiter 305 b responsive to the direct intervention request (explained further with reference to FIG. 7 ).
- L2.0 arbiter 305 a received the snoop machine tag with the slow ACK delivered from L2.1 arbiter 305 b .
- the data is received in the buffer entry within RC queue 320 a corresponding to the RC machine 312 a handling the load operation and the procedure continues as previously explained beginning at step 646 and 634 .
- L2.1 cache 230 b in association with the load operation.
- the process begins at step 702 and, in the absence of a direct intervention request, INTRV REQ, from L2.0 arbiter 305 a , L2.1 cache 230 b continues cache processing that is primarily private to the core 200 b in its respective cache hierarchy as shown at steps 704 ad 706 .
- L2.1 cache 230 b may or may not accept the request, and if not, arbiter 305 b sends FAST NACK, or equivalent negative response, to L2.0 arbiter 305 a directing the L2.0 cache 230 a to process the load without direct intervention (steps 708 , 710 ) and L2.1 processing in association with the 2.0 load operation ends (step 744 ). Otherwise, direct intervention processing by the L2.1 cache 230 b commences responsive to acceptance of the request at step 708 .
- an L2.0 direct intervention cancellation received by arbiter 305 b results in termination of the direct intervention.
- a key feature of the L2.1 intervention is allocation of one of the L2.1 snoop machines 236 b to handle the intervention request. If an L2.1 snoop machine 236 b is not available, the direct intervention fails and arbiter 305 b sends a SLOW NACK to the L2.0 cache and the process ends as depicted at steps 714 , 716 and 744 .
- the snoop machine 236 b is allocated and arbiter 305 b speculatively reads cache array 302 b for the requested cache line identified in the received INTRV REQ while the request traverses dispatch pipe 306 b during the directory lookup in directory 308 b (steps 718 and 720 ).
- arbiter 305 b In response to a L2.1 cache miss, arbiter 305 b sends a SLOW NACK to arbiter 305 a to terminate the direct intervention process and signal the L2.0 cache 230 a to proceed with a typical shared bus load request and de-allocates snoop machine 236 b allocated in step 718 as shown at steps 722 , 723 , 716 , and 744 . Otherwise, responsive to a cache bit at step 722 , the direct intervention process continues with arbiter 305 b sending a SLOW ACK to L2.0 arbiter 305 a including the tag identifier of the snoop machine 236 b dispatched at block 718 . Next, as illustrated at step 726 , L2.1 arbiter 305 b reads the cache line from cache array 302 b into the buffer entry of CPi queue 318 b corresponding to the dispatched snoop machine 236 b.
- the present invention further provides an improved castout processing method and mechanism that enables a cache unit included in a memory hierarchy of a processor core to castout “sideways” to another same-level cache unit that is otherwise within the private memory hierarchy of another core and which may serve as a victim cache under certain circumstances.
- a cache unit included in a memory hierarchy of a processor core may castout “sideways” to another same-level cache unit that is otherwise within the private memory hierarchy of another core and which may serve as a victim cache under certain circumstances.
- FIG. 2 one such circumstance may arise when one of the two cores 200 a or 200 b is non-functional while both cores and their respective cache hierarchies are fabricated on a single integrated circuit chip.
- the castout mechanism and technique of the present invention enable the operational core to advantageously utilized the otherwise unused cache hierarchy units as an optional victim cache.
- FIG. 8A provides a high-level flow diagram illustrating conventional processing of a store operation by an exemplary L2 cache such as L2 cache 230 to which the castout processing of the present invention may be applied.
- the process commences as shown at steps 802 and 804 with a store operation from core 200 sent to arbiter 305 , dispatch pipe 306 , and directory 308 .
- arbiter 305 , dispatch 306 , and directory 308 process the received store in parallel as illustrated at step 806 .
- the store request traverses dispatch pipe 306 and is release following the directory lookup in directory 308 .
- steps 808 , 810 , and 822 the processing of the store operation terminates if no RC machine 312 is available. Otherwise, an available RC machine 312 is dispatched to handle the store operation as depicted at steps 808 and 812 .
- a pass indicator signals a successfully dispatched RC (step 814 ) so that the store is not re-issued. If the requested cache line is in array 302 and is verified by the coherence state read from directory 308 as valid and exclusive to the cache, the data is store merged in array 302 as shown at steps 816 and 818 . Processing of the cache hit concludes with the dispatched RC machine 312 being de-allocated or released as shown at steps 820 and 822 .
- FIG. 8B depicts steps performed within L2 cache 230 in response to a miss at step 816 . If the miss was due to shared data, a DCLAIM is issued and continues until is succeeds as shown at steps 862 and 864 . After a successful DCLAIM, the data is store merged into the array as depicted at step 847 . Finally, RC machine 312 a is released as shown at step 820 and the read process terminates at step 822 .
- the assigned RC machine 312 issues a read with intent to modify (RWITM) request on interconnect 114 and awaits return of the requested data into an RC queue 320 that buffers incoming cache lines to be placed in array 302 .
- RWITM read with intent to modify
- the castout process ends as shown at step 852 .
- RC machine 312 issues a castout request via M 1 to arbiter 305 and dispatch pipe 306 , which dispatches one of CO machines 310 to handle the castout, as illustrated at steps 838 and 840 .
- RC machine 312 therefore repeats the castout request until a CO machine 310 is available and successfully dispatched (steps 840 and 842 ).
- arbiter 305 reads the victim cache line out of array 302 to a CPI (castout push intervention) queue 318 (step 444 ) in preparation for the victim line to be placed in a lower level cache or system memory. Responsive to both the victim line being read out to CPI queue 318 at step 844 (if a castout was necessary) and the data being returned to the RCQ at step 834 , the data read from the RC queue 320 to the L2 (step 846 ) and the store data is merged into the appropriate line in array 302 , as shown at step 847 .
- CPI castout push intervention
- the CO machine 310 issues a request to fabric controller 316 for the victim line to be pushed from CPI queue 318 to the lower level memory via interconnect 114 (step 848 ).
- the victim line push is processed and completed followed by the CO machine being released as shown at steps 850 , 851 and 852 .
- the present invention provides an improved castout/castin method by which caches, such as L2 caches 230 a and 230 b which are otherwise private to their respective cores, can perform parallel victim caching in response to a cache miss necessitating a castout.
- caches such as L2 caches 230 a and 230 b which are otherwise private to their respective cores
- the invention facilitates maximum utilization of memory resources in a multiprocessor system in which each core has its direct (i.e. non snooped) access to a respective hierarchy.
- FIG. 9 in conjunction with FIG. 5B there is depicted a high-level flow diagram illustrating a cache castout operation in accordance with the present invention.
- the process begins as illustrated at steps 902 and 904 with issuance and partial processing of a load operation, such as those described with reference to FIGS. 4A , 4 B, 6 A, and 6 B, and 7 , or a store operation, such as that described with reference to FIGS. 8A and 8B issued from core 200 a to L2.0 cache 230 a .
- the load or store is processed up to the point at which a castout determination is made with respect to cache array 302 a .
- step 915 depicts RC queue 320 a being released and the data process concluding (step 928 ).
- the allocated RC machine 312 a issues a castout request via M 1 to arbiter 305 a and dispatch pipe 306 a , which dispatches one of CO machines 310 a to handle the castout, as illustrated at steps 906 and 908 .
- RC machine 312 a repeats the castout request until a CO machine 310 a is available and successfully dispatched (steps 908 and 910 ).
- L2.0 arbiter 305 a reads the victim cache line out of array 302 a to CPI queue 318 (step 912 ) in preparation for the victim line to be selectively placed in a lower level cache or system memory as in conventional castout operations or in the L2.1 cache 230 b in accordance with the invention. Responsive to the victim line being read out to CPI queue 318 a , the read or write data buffered in the RC queue 320 a is placed in the appropriate line in array 302 a at step 914 which has been described, and the L2.0 CO machine 310 a issues a request to fabric controller 316 for the victim line to be pushed from CPI queue 318 a (step 916 ).
- the push request from L2.0 CO machine 310 a depends on whether L2.0 caches 230 a and L2.1 cache 230 b are presently operating in the parallel victim cache mode of the present invention.
- the parallel victim cache mode may be prompted by one of the cores (the 200 b core is the presently described embodiment) being faulty or otherwise rendered non-functional.
- the memory hierarchy directly associated with the non-functioning core (the L2.1 cache 230 b in presently described embodiment) is available as a victim cache to accept castouts from the same-level cache unit (the L2.0 cache 230 a in the present embodiment).
- fabric controller 316 may read a flag in a configuration register 332 that indicates whether or the cache units 230 a and 230 b are operating in parallel victim cache mode.
- the castout is performed in the conventional manner in which the victim data is pushed to lower level memory via interconnect 114 and the castout concludes with the L2.0 castout machine 310 a de-allocated (steps 920 , 924 , 926 , and 928 ). If the configuration register 332 indicates that L2.1 cache 230 b is operating in victim castin mode, fabric controller 316 sends a castin request to the L2.1 op select MUX M 1 . L2.1 cache 230 b then processes the castin request as now depicted and described in FIG. 10 .
- FIGS. 10A and 10B there is illustrated a high-level flow diagram depicting a castin corresponding to the castout of FIG. 9 in accordance with the present invention.
- the process begins as shown at steps 1002 and 1004 with L2.1 op select MUX M 1 receiving the castin request from fabric controller 316 .
- MUX M 1 issues the castin request to L2.1 arbiter 305 b , dispatch pipe 306 b , and directory 308 b as depicted at step 1006 .
- L2.1 arbiter 305 b , dispatch pipe 306 b , and directory 308 b process the received castin request in parallel as illustrated at step 1008 . Specifically, the castin request traverses dispatch pipe 306 b and is released following the directory lookup in directory 308 b.
- the RC machine 312 b determines at step 1015 if a CO machine 310 b is required to evict the cache block in victim cache 230 b chosen to accept the castin. If no such CO machine is necessary, RC machine 312 b sends a request to arbiter 305 b to retrieve the L2.0 castout data from the L2.0 CPI queue 318 a in accordance with the L2.0 CO tag received in the original castin request from fabric controller 316 (step 1014 ) and arbiter 305 b signals CPI queue 318 a with the tag to effectuate the transfer (step 1016 ).
- L2 cache array 302 b is updated as depicted at step 1018 .
- the castin data process then continues with L2.1 arb 305 b signaling the CO data transfer is complete (step 1019 ), deallocating L2.1 RC 312 b (step 1020 ), and concluding as depicted at step 1032 .
- step 1022 depicts RC 312 b issuing a CO request though mux M 1 to dispatch a castout machine.
- arbiter 305 b reads the selected cache line out of cache array 302 b in CPI buffer 318 b (step 1026 ). Once the cache line being castout of victim cache 320 b has been read into CPI buffer 318 b , the process continues at step 1016 to complete the castin data transfer as described above.
- steps 1028 and 1030 depict the eviction of the selected line from L2.1 victim cache 230 b to system memory via interconnect 114 and the process concludes as shown at step 1032 .
- L2 cache 230 a preferably implements direct intervention as described above to retrieve data (including possibly modified data) from victim cache 230 b.
Abstract
Description
Claims (1)
Priority Applications (1)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US11/056,673 US7305523B2 (en) | 2005-02-12 | 2005-02-12 | Cache memory direct intervention |
Applications Claiming Priority (1)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US11/056,673 US7305523B2 (en) | 2005-02-12 | 2005-02-12 | Cache memory direct intervention |
Publications (2)
Publication Number | Publication Date |
---|---|
US20060184743A1 US20060184743A1 (en) | 2006-08-17 |
US7305523B2 true US7305523B2 (en) | 2007-12-04 |
Family
ID=36816973
Family Applications (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
US11/056,673 Expired - Fee Related US7305523B2 (en) | 2005-02-12 | 2005-02-12 | Cache memory direct intervention |
Country Status (1)
Country | Link |
---|---|
US (1) | US7305523B2 (en) |
Cited By (21)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20100100682A1 (en) * | 2008-10-22 | 2010-04-22 | International Business Machines Corporation | Victim Cache Replacement |
US20100100683A1 (en) * | 2008-10-22 | 2010-04-22 | International Business Machines Corporation | Victim Cache Prefetching |
US20100153647A1 (en) * | 2008-12-16 | 2010-06-17 | International Business Machines Corporation | Cache-To-Cache Cast-In |
US20100153650A1 (en) * | 2008-12-16 | 2010-06-17 | International Business Machines Corporation | Victim Cache Line Selection |
US20100235576A1 (en) * | 2008-12-16 | 2010-09-16 | International Business Machines Corporation | Handling Castout Cache Lines In A Victim Cache |
US20100235577A1 (en) * | 2008-12-19 | 2010-09-16 | International Business Machines Corporation | Victim cache lateral castout targeting |
US20100262778A1 (en) * | 2009-04-09 | 2010-10-14 | International Business Machines Corporation | Empirically Based Dynamic Control of Transmission of Victim Cache Lateral Castouts |
US20100262784A1 (en) * | 2009-04-09 | 2010-10-14 | International Business Machines Corporation | Empirically Based Dynamic Control of Acceptance of Victim Cache Lateral Castouts |
US20100262783A1 (en) * | 2009-04-09 | 2010-10-14 | International Business Machines Corporation | Mode-Based Castout Destination Selection |
US20100262786A1 (en) * | 2009-04-13 | 2010-10-14 | International Business Machines Corporation | Barriers Processing in a Multiprocessor System Having a Weakly Ordered Storage Architecture Without Broadcast of a Synchronizing Operation |
US20100262782A1 (en) * | 2009-04-08 | 2010-10-14 | International Business Machines Corporation | Lateral Castout Target Selection |
US20100268883A1 (en) * | 2009-04-15 | 2010-10-21 | International Business Machines Corporation | Information Handling System with Immediate Scheduling of Load Operations and Fine-Grained Access to Cache Memory |
US20100268887A1 (en) * | 2009-04-15 | 2010-10-21 | International Business Machines Corporation | Information handling system with immediate scheduling of load operations in a dual-bank cache with dual dispatch into write/read data flow |
US20100268895A1 (en) * | 2009-04-15 | 2010-10-21 | International Business Machines Corporation | Information handling system with immediate scheduling of load operations |
US20100268890A1 (en) * | 2009-04-15 | 2010-10-21 | International Business Machines Corporation | Information handling system with immediate scheduling of load operations in a dual-bank cache with single dispatch into write/read data flow |
US20120221793A1 (en) * | 2011-02-28 | 2012-08-30 | Tran Thang M | Systems and methods for reconfiguring cache memory |
US8364904B2 (en) | 2010-06-21 | 2013-01-29 | International Business Machines Corporation | Horizontal cache persistence in a multi-compute node, symmetric multiprocessing computer |
US8924644B2 (en) | 2011-12-28 | 2014-12-30 | Lenovo Enterprise Solutions (Singapore) Pte. Ltd. | Extending cache in a multi-processor computer |
US8949540B2 (en) | 2009-03-11 | 2015-02-03 | International Business Machines Corporation | Lateral castout (LCO) of victim cache line in data-invalid state |
US9189403B2 (en) | 2009-12-30 | 2015-11-17 | International Business Machines Corporation | Selective cache-to-cache lateral castouts |
US10152417B2 (en) | 2016-04-11 | 2018-12-11 | International Business Machines Corporation | Early freeing of a snoop machine of a data processing system prior to completion of snoop processing for an interconnect operation |
Families Citing this family (5)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US7616470B2 (en) * | 2006-06-16 | 2009-11-10 | International Business Machines Corporation | Method for achieving very high bandwidth between the levels of a cache hierarchy in 3-dimensional structures, and a 3-dimensional structure resulting therefrom |
US8296520B2 (en) * | 2007-12-19 | 2012-10-23 | International Business Machines Corporation | System and method for optimizing neighboring cache usage in a multiprocessor environment |
US8397029B2 (en) | 2007-12-19 | 2013-03-12 | International Business Machines Corporation | System and method for cache coherency in a multiprocessor system |
US7836257B2 (en) * | 2007-12-19 | 2010-11-16 | International Business Machines Corpation | System and method for cache line replacement selection in a multiprocessor environment |
US7996614B2 (en) | 2008-01-04 | 2011-08-09 | International Business Machines Corporation | Cache intervention on a separate data bus when on-chip bus has separate read and write data busses |
Citations (3)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US5895495A (en) * | 1997-03-13 | 1999-04-20 | International Business Machines Corporation | Demand-based larx-reserve protocol for SMP system buses |
US6226713B1 (en) * | 1998-01-21 | 2001-05-01 | Sun Microsystems, Inc. | Apparatus and method for queueing structures in a multi-level non-blocking cache subsystem |
US20060155792A1 (en) * | 2005-01-07 | 2006-07-13 | Keisuke Inoue | Methods and apparatus for managing a shared memory in a multi-processor system |
-
2005
- 2005-02-12 US US11/056,673 patent/US7305523B2/en not_active Expired - Fee Related
Patent Citations (3)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US5895495A (en) * | 1997-03-13 | 1999-04-20 | International Business Machines Corporation | Demand-based larx-reserve protocol for SMP system buses |
US6226713B1 (en) * | 1998-01-21 | 2001-05-01 | Sun Microsystems, Inc. | Apparatus and method for queueing structures in a multi-level non-blocking cache subsystem |
US20060155792A1 (en) * | 2005-01-07 | 2006-07-13 | Keisuke Inoue | Methods and apparatus for managing a shared memory in a multi-processor system |
Cited By (38)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20100100682A1 (en) * | 2008-10-22 | 2010-04-22 | International Business Machines Corporation | Victim Cache Replacement |
US20100100683A1 (en) * | 2008-10-22 | 2010-04-22 | International Business Machines Corporation | Victim Cache Prefetching |
US8209489B2 (en) | 2008-10-22 | 2012-06-26 | International Business Machines Corporation | Victim cache prefetching |
US8347037B2 (en) | 2008-10-22 | 2013-01-01 | International Business Machines Corporation | Victim cache replacement |
US20100153647A1 (en) * | 2008-12-16 | 2010-06-17 | International Business Machines Corporation | Cache-To-Cache Cast-In |
US20100153650A1 (en) * | 2008-12-16 | 2010-06-17 | International Business Machines Corporation | Victim Cache Line Selection |
US20100235576A1 (en) * | 2008-12-16 | 2010-09-16 | International Business Machines Corporation | Handling Castout Cache Lines In A Victim Cache |
US8117397B2 (en) | 2008-12-16 | 2012-02-14 | International Business Machines Corporation | Victim cache line selection |
US8225045B2 (en) | 2008-12-16 | 2012-07-17 | International Business Machines Corporation | Lateral cache-to-cache cast-in |
US8499124B2 (en) | 2008-12-16 | 2013-07-30 | International Business Machines Corporation | Handling castout cache lines in a victim cache |
US20100235577A1 (en) * | 2008-12-19 | 2010-09-16 | International Business Machines Corporation | Victim cache lateral castout targeting |
US8489819B2 (en) | 2008-12-19 | 2013-07-16 | International Business Machines Corporation | Victim cache lateral castout targeting |
US8949540B2 (en) | 2009-03-11 | 2015-02-03 | International Business Machines Corporation | Lateral castout (LCO) of victim cache line in data-invalid state |
US20100262782A1 (en) * | 2009-04-08 | 2010-10-14 | International Business Machines Corporation | Lateral Castout Target Selection |
US8285939B2 (en) | 2009-04-08 | 2012-10-09 | International Business Machines Corporation | Lateral castout target selection |
US20100262783A1 (en) * | 2009-04-09 | 2010-10-14 | International Business Machines Corporation | Mode-Based Castout Destination Selection |
US8347036B2 (en) | 2009-04-09 | 2013-01-01 | International Business Machines Corporation | Empirically based dynamic control of transmission of victim cache lateral castouts |
US20100262784A1 (en) * | 2009-04-09 | 2010-10-14 | International Business Machines Corporation | Empirically Based Dynamic Control of Acceptance of Victim Cache Lateral Castouts |
US8327073B2 (en) | 2009-04-09 | 2012-12-04 | International Business Machines Corporation | Empirically based dynamic control of acceptance of victim cache lateral castouts |
US8312220B2 (en) | 2009-04-09 | 2012-11-13 | International Business Machines Corporation | Mode-based castout destination selection |
US20100262778A1 (en) * | 2009-04-09 | 2010-10-14 | International Business Machines Corporation | Empirically Based Dynamic Control of Transmission of Victim Cache Lateral Castouts |
US20100262786A1 (en) * | 2009-04-13 | 2010-10-14 | International Business Machines Corporation | Barriers Processing in a Multiprocessor System Having a Weakly Ordered Storage Architecture Without Broadcast of a Synchronizing Operation |
US8095739B2 (en) * | 2009-04-13 | 2012-01-10 | International Business Machines Corporation | Barriers processing in a multiprocessor system having a weakly ordered storage architecture without broadcast of a synchronizing operation |
US20100268887A1 (en) * | 2009-04-15 | 2010-10-21 | International Business Machines Corporation | Information handling system with immediate scheduling of load operations in a dual-bank cache with dual dispatch into write/read data flow |
US20100268883A1 (en) * | 2009-04-15 | 2010-10-21 | International Business Machines Corporation | Information Handling System with Immediate Scheduling of Load Operations and Fine-Grained Access to Cache Memory |
US8140765B2 (en) | 2009-04-15 | 2012-03-20 | International Business Machines Corporation | Information handling system with immediate scheduling of load operations in a dual-bank cache with single dispatch into write/read data flow |
US8195880B2 (en) | 2009-04-15 | 2012-06-05 | International Business Machines Corporation | Information handling system with immediate scheduling of load operations in a dual-bank cache with dual dispatch into write/read data flow |
US20100268890A1 (en) * | 2009-04-15 | 2010-10-21 | International Business Machines Corporation | Information handling system with immediate scheduling of load operations in a dual-bank cache with single dispatch into write/read data flow |
US11157411B2 (en) | 2009-04-15 | 2021-10-26 | International Business Machines Corporation | Information handling system with immediate scheduling of load operations |
US8140756B2 (en) | 2009-04-15 | 2012-03-20 | International Business Machines Corporation | Information handling system with immediate scheduling of load operations and fine-grained access to cache memory |
US10489293B2 (en) | 2009-04-15 | 2019-11-26 | International Business Machines Corporation | Information handling system with immediate scheduling of load operations |
US20100268895A1 (en) * | 2009-04-15 | 2010-10-21 | International Business Machines Corporation | Information handling system with immediate scheduling of load operations |
US9189403B2 (en) | 2009-12-30 | 2015-11-17 | International Business Machines Corporation | Selective cache-to-cache lateral castouts |
US8364904B2 (en) | 2010-06-21 | 2013-01-29 | International Business Machines Corporation | Horizontal cache persistence in a multi-compute node, symmetric multiprocessing computer |
US20120221793A1 (en) * | 2011-02-28 | 2012-08-30 | Tran Thang M | Systems and methods for reconfiguring cache memory |
US9547593B2 (en) * | 2011-02-28 | 2017-01-17 | Nxp Usa, Inc. | Systems and methods for reconfiguring cache memory |
US8924644B2 (en) | 2011-12-28 | 2014-12-30 | Lenovo Enterprise Solutions (Singapore) Pte. Ltd. | Extending cache in a multi-processor computer |
US10152417B2 (en) | 2016-04-11 | 2018-12-11 | International Business Machines Corporation | Early freeing of a snoop machine of a data processing system prior to completion of snoop processing for an interconnect operation |
Also Published As
Publication number | Publication date |
---|---|
US20060184743A1 (en) | 2006-08-17 |
Similar Documents
Publication | Publication Date | Title |
---|---|---|
US7305522B2 (en) | Victim cache using direct intervention | |
US7305523B2 (en) | Cache memory direct intervention | |
US11803486B2 (en) | Write merging on stores with different privilege levels | |
US6721848B2 (en) | Method and mechanism to use a cache to translate from a virtual bus to a physical bus | |
KR100318789B1 (en) | System and method for managing cache in a multiprocessor data processing system | |
US7281092B2 (en) | System and method of managing cache hierarchies with adaptive mechanisms | |
US7698508B2 (en) | System and method for reducing unnecessary cache operations | |
US20100064107A1 (en) | Microprocessor cache line evict array | |
KR101072174B1 (en) | System and method for implementing an enhanced hover state with active prefetches | |
US6687795B2 (en) | Data processing system and method of communication that reduce latency of write transactions subject to retry | |
JP3732397B2 (en) | Cash system | |
US11409656B2 (en) | Semiconductor device | |
US20040030950A1 (en) | Apparatus for imprecisely tracking cache line inclusivity of a higher level cache |
Legal Events
Date | Code | Title | Description |
---|---|---|---|
AS | Assignment |
Owner name: INTERNATIONAL BUSINESS MACHINES CORPORATION, NEW YFree format text: ASSIGNMENT OF ASSIGNORS INTEREST;ASSIGNORS:GUTHRIE, GUY LYNN;STARKE, WILLIAM JOHN;WILLIAMS, DEREK EDWARD;REEL/FRAME:016211/0318Effective date: 20050215Owner name: INTERNATIONAL BUSINESS MACHINES CORPORATION, NEW YFree format text: ASSIGNMENT OF ASSIGNORS INTEREST;ASSIGNORS:GUTHRIE, GUY LYNN;STARKE, WILLIAM JOHN;WILLIAMS, DEREK EDWARD;REEL/FRAME:016211/0315Effective date: 20050215 |
|
FEPP | Fee payment procedure |
Free format text: PAYOR NUMBER ASSIGNED (ORIGINAL EVENT CODE: ASPN); ENTITY STATUS OF PATENT OWNER: LARGE ENTITY |
|
FPAY | Fee payment |
Year of fee payment: 4 |
|
AS | Assignment |
Owner name: GOOGLE INC., CALIFORNIAFree format text: ASSIGNMENT OF ASSIGNORS INTEREST;ASSIGNOR:INTERNATIONAL BUSINESS MACHINES CORPORATION;REEL/FRAME:026664/0866Effective date: 20110503 |
|
REMI | Maintenance fee reminder mailed | ||
LAPS | Lapse for failure to pay maintenance fees | ||
STCH | Information on status: patent discontinuation |
Free format text: PATENT EXPIRED DUE TO NONPAYMENT OF MAINTENANCE FEES UNDER 37 CFR 1.362 |
|
FP | Lapsed due to failure to pay maintenance fee |
Effective date: 20151204 |
|
AS | Assignment |
Owner name: GOOGLE LLC, CALIFORNIAFree format text: CHANGE OF NAME;ASSIGNOR:GOOGLE INC.;REEL/FRAME:044142/0357Effective date: 20170929 |