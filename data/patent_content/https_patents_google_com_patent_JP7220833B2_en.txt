JP7220833B2 - Automatic generation of machine learning models for software tools that run on source code - Google Patents
Automatic generation of machine learning models for software tools that run on source code Download PDFInfo
- Publication number
- JP7220833B2 JP7220833B2 JP2022526211A JP2022526211A JP7220833B2 JP 7220833 B2 JP7220833 B2 JP 7220833B2 JP 2022526211 A JP2022526211 A JP 2022526211A JP 2022526211 A JP2022526211 A JP 2022526211A JP 7220833 B2 JP7220833 B2 JP 7220833B2
- Authority
- JP
- Japan
- Prior art keywords
- source code
- code
- target source
- training
- machine learning
- Prior art date
- Legal status (The legal status is an assumption and is not a legal conclusion. Google has not performed a legal analysis and makes no representation as to the accuracy of the status listed.)
- Active
Links
Images
Classifications
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F8/00—Arrangements for software engineering
- G06F8/70—Software maintenance or management
- G06F8/75—Structural analysis for program understanding
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F8/00—Arrangements for software engineering
- G06F8/30—Creation or generation of source code
- G06F8/34—Graphical or visual programming
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F8/00—Arrangements for software engineering
- G06F8/30—Creation or generation of source code
- G06F8/38—Creation or generation of source code for implementing user interfaces
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F8/00—Arrangements for software engineering
- G06F8/40—Transformation of program code
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F9/00—Arrangements for program control, e.g. control units
- G06F9/06—Arrangements for program control, e.g. control units using stored programs, i.e. using an internal store of processing equipment to receive or retain programs
- G06F9/44—Arrangements for executing specific programs
- G06F9/451—Execution arrangements for user interfaces
- G06F9/453—Help systems
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F9/00—Arrangements for program control, e.g. control units
- G06F9/06—Arrangements for program control, e.g. control units using stored programs, i.e. using an internal store of processing equipment to receive or retain programs
- G06F9/44—Arrangements for executing specific programs
- G06F9/455—Emulation; Interpretation; Software simulation, e.g. virtualisation or emulation of application or operating system execution engines
- G06F9/45504—Abstract machines for programme code execution, e.g. Java virtual machine [JVM], interpreters, emulators
- G06F9/45508—Runtime interpretation or emulation, e g. emulator loops, bytecode interpretation
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06N—COMPUTING ARRANGEMENTS BASED ON SPECIFIC COMPUTATIONAL MODELS
- G06N20/00—Machine learning
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06N—COMPUTING ARRANGEMENTS BASED ON SPECIFIC COMPUTATIONAL MODELS
- G06N5/00—Computing arrangements using knowledge-based models
- G06N5/04—Inference or reasoning models
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06N—COMPUTING ARRANGEMENTS BASED ON SPECIFIC COMPUTATIONAL MODELS
- G06N3/00—Computing arrangements based on biological models
- G06N3/02—Neural networks
- G06N3/08—Learning methods
- G06N3/084—Backpropagation, e.g. using gradient descent
Description
技術分野
本開示は、ソースコード上で動作するソフトウェアツールのための機械学習モデルの生成に関する。
TECHNICAL FIELD This disclosure relates to generating machine learning models for software tools that run on source code.
背景
プログラミングツールまたはソフトウェア開発ツールは、ソフトウェア開発者が他のプログラムおよびアプリケーションを、作成、デバッグ、保守、またはその他の態様ではサポートするために使用するコンピュータプログラムである。この用語は通常、物理的なオブジェクトを修正するために複数のハンドツールを使用するのと同じように、タスクを達成するために組合わせることができる比較的単純なプログラムを指す。最も基本的なツールは、ソースコードエディタおよびコンパイラまたはインタープリタである。その他のツールは、言語、開発方法および個々のエンジニアに応じて多かれ少なかれ使用され、デバッガ、プロファイラ、または静的プログラムアナライザのように、個別のタスクに使用されることがよくある。静的プログラム分析は、実際にプログラムを実行せずに行われるコンピュータソフトウェアの分析である。ほとんどの場合、分析はあるバージョンのソースコードに対して行われる。ソフトウェア開発ツールは、たとえばコマンドラインから別個に実行される個別のプログラムの場合もあれば、統合開発環境（ｉｎｔｅｇｒａｔｅｄ ｄｅｖｅｌｏｐｍｅｎｔ ｅｎｖｉｒｏｎｍｅｎｔ：ＩＤＥ）と呼ばれることもある単一の大きなプログラムの一部である場合もある。
BACKGROUND Programming tools or software development tools are computer programs used by software developers to create, debug, maintain, or otherwise support other programs and applications. The term usually refers to relatively simple programs that can be combined to accomplish a task, much like using multiple hand tools to modify a physical object. The most basic tools are a source code editor and a compiler or interpreter. Other tools are used to a greater or lesser extent depending on the language, development method and individual engineer, and are often used for separate tasks, like debuggers, profilers, or static program analyzers. Static program analysis is analysis of computer software without actually running the program. Most of the time, the analysis is done on some version of the source code. Software development tools can be separate programs that are run separately, e.g. from the command line, or they can be part of a single larger program sometimes called an integrated development environment (IDE). be.
コードベース（ｃｏｄｅｂａｓｅまたはｃｏｄｅ ｂａｓｅ）は、特定のソフトウェアシステム、アプリケーション、またはソフトウェアコンポーネントをビルドするために使用される、人間が書いた、および機械が生成したソースコードスニペットの集合である。コードベースは通常、ソースコードリポジトリに格納される。コードベースの改訂は、バージョンコントロールシステムによって管理されることがある。特定のソフトウェア開発ツールをビルドするためのコードベースを作成するのに、専門のソフトウェアエンジニアが数ヶ月かかる場合が多い。機械学習モデルは、人間が書いたソースコードスニペットの誤りを自動的に識別することによって、これらのソフトウェア開発ツールのビルドプロセスを迅速化するのに役立つ可能性がある。しかしながら、このような機械学習モデルは、ビルドされるソフトウェア開発ツールに特化したものであり、実際にソフトウェア開発ツールをビルドする異なるソフトウェアエンジニアが使用できるように機械学習モデルを作成するためには、専門のソフトウェアエンジニアが必要である。 A codebase (or code base) is a collection of human-written and machine-generated source code snippets used to build a particular software system, application, or software component. Code bases are typically stored in source code repositories. Codebase revisions may be managed by a version control system. It often takes a dedicated software engineer several months to create a code base for building a particular software development tool. Machine learning models could help speed up the build process for these software development tools by automatically identifying mistakes in human-written source code snippets. However, such machine learning models are specific to the software development tools being built, and in order to create the machine learning models for use by different software engineers who actually build the software development tools, Professional software engineers are required.
概要
本開示のある態様は、コードインサイトを生成するための方法を提供する。方法は、データ処理ハードウェアにおいて、ターゲットソースコードのコードインサイトを要求するコードインサイト要求を、ソフトウェア開発ツールをビルドするためにターゲットソースコードを使用する開発者に関連付けられた開発者デバイスから受信することを備える。コードインサイト要求は、ターゲットソースコードと、ツールタイプインジケータとを含む。ツールタイプインジケータは、ソフトウェア開発ツールが、コードラベリングタイプのソフトウェア開発ツールまたはコード変形タイプのソフトウェア開発ツールのうちの１つからなることを指定する。方法はさらに、データ処理ハードウェアが、ツールタイプインジケータに基づいて、コードラベリングタイプのソフトウェア開発ツールまたはコード変形タイプのソフトウェア開発ツールのうちの指定された１つに関連付けられた訓練ソースコードで訓練された機械学習モデルを取得することを備える。方法はさらに、データ処理ハードウェアが、機械学習モデルを使用して、ターゲットソースコードのコードインサイトを生成することを備える。ツールタイプインジケータが、ソフトウェア開発ツールがコードラベリングタイプのソフトウェア開発ツールからなることを指定する場合、ターゲットソースコードのコードインサイトは、ターゲットソースコードの予測ラベルを含む。ツールタイプインジケータが、ソフトウェア開発ツールがコード変形タイプのソフトウェア開発ツールからなることを指定する場合、ターゲットソースコードのコードインサイトは、訓練ソースコードの予測コード変形を含む。方法はさらに、データ処理ハードウェアが、コードインサイトを開発者デバイスに送信することを備え、コードインサイトは、開発者デバイスによって受信されると、開発者デバイスで実行されているグラフィカルユーザインターフェイスに、コードインサイトを開発者デバイスの表示画面に表示させる。
Overview Certain aspects of the present disclosure provide a method for generating code insight. The method receives, at data processing hardware, a code insight request requesting code insight for target source code from a developer device associated with a developer using the target source code to build a software development tool. be prepared to A code insight request includes the target source code and a tool type indicator. The tool type indicator specifies that the software development tool consists of one of a code labeling type software development tool or a code transformation type software development tool. The method further includes training the data processing hardware with training source code associated with a specified one of the code labeling type software development tool or the code transformation type software development tool based on the tool type indicator. obtaining a machine learning model. The method further comprises data processing hardware using the machine learning model to generate code insight for the target source code. If the tool type indicator specifies that the software development tool consists of a code labeling type software development tool, the code insight for the target source code includes predicted labels for the target source code. If the tool type indicator specifies that the software development tool consists of a code transformation type software development tool, the code insight for the target source code includes predicted code transformations for the training source code. The method further comprises the data processing hardware transmitting the code insight to the developer device, wherein the code insight, when received by the developer device, is displayed in a graphical user interface running on the developer device. , to have Code Insight appear on the display screen of the developer device.
本開示の実装は、以下に記載の任意の特徴のうちの１つ以上を含み得る。いくつかの実装では、方法はさらに、データ処理ハードウェアが、機械学習モデルへの入力に適したターゲットソースコードの構文表現に対応するターゲット特徴のセットを、ターゲットソースコードから抽出することを備える。これらの実装では、機械学習モデルは、ターゲット特徴のセットを入力として受信し、ターゲットソースコードのコードインサイトを出力として生成するように構成されている。ターゲットソースコードの構文表現は、構文表現木（Ａｂｓｔｒａｃｔ Ｓｙｎｔａｘ Ｔｒｅｅ：ＡＳＴ）を含み得る。いくつかの例では、機械学習モデルを取得することは、機械学習モデル生成器を使用して、選択された訓練ソースコードで機械学習モデルを訓練することによってコードインサイト要求を受信することに応答して、機械学習モデルを生成することを含む。訓練ソースコードは、データ処理ハードウェアと通信しているメモリハードウェアに格納されているソースコードリポジトリから選択可能であり、訓練ソースコードは、コードラベリングタイプのソフトウェア開発ツールまたはコード変形タイプのソフトウェア開発ツールのうちの指定された１つに関連付けられている。いくつかの実装では、方法はさらに、データ処理ハードウェアが、機械学習モデルを訓練するのに適した訓練ソースコードの構文表現に対応する訓練特徴のセットを、選択された訓練ソースコードから抽出することを備える。訓練ソースコードの構文表現は、抽象構文木（ＡＳＴ）を含み得る。 Implementations of the disclosure may include one or more of any of the features described below. In some implementations, the method further comprises data processing hardware extracting from the target source code a set of target features corresponding to a syntactic representation of the target source code suitable for input to the machine learning model. In these implementations, the machine learning model is configured to receive a set of target features as input and produce code insights for the target source code as output. A syntactic representation of the target source code may include an Abstract Syntax Tree (AST). In some examples, obtaining the machine learning model is in response to receiving a code insight request by training the machine learning model with the selected training source code using a machine learning model generator. to generate a machine learning model. The training source code is selectable from a source code repository stored in memory hardware in communication with the data processing hardware, and the training source code is a code labeling type software development tool or a code transformation type software development tool. Associated with a specified one of the tools. In some implementations, the method further includes data processing hardware extracting from the selected training source code a set of training features corresponding to a syntactic representation of the training source code suitable for training the machine learning model. Be prepared. A syntactic representation of the training source code may include an abstract syntax tree (AST).
いくつかの実装では、コードインサイト要求はさらに、コードインサイトに関連付けられた、開発者によって定義された結果特性タイプを含み、ツールタイプインジケータに基づいて機械学習モデルを取得することはさらに、結果特性タイプに基づいてもよい。これらの実装では、機械学習モデルを使用してターゲットソースコードのコードインサイトを生成することはさらに、機械学習モデルを使用して、コードインサイト要求の結果特性タイプに関連付けられた、コードインサイトのエミュレートされた結果特性を生成することを含み得る。方法はさらに、データ処理ハードウェアが、データ処理ハードウェアと通信しているメモリハードウェアに格納されているソースコードリポジトリから、コードインサイト要求の結果特性タイプに関連付けられた対応する結果特性とペアにされた訓練ソースコードの訓練例を識別することを備え得る。方法はさらに、データ処理ハードウェアが、機械学習モデルを、対応する結果特性とペアにされた訓練ソースコードを含む訓練例で訓練することを備え得る。 In some implementations, the code insight request further includes a developer-defined result trait type associated with the code insight, and retrieving a machine learning model based on the tool type indicator further includes a result May be based on property type. In these implementations, using the machine learning model to generate code insight for the target source code further uses the machine learning model to generate code insight associated with the result characteristic type of the code insight request. generating an emulated result characteristic of The method further comprises the data processing hardware pairing corresponding result characteristics associated with the result characteristic type of the code insight request from a source code repository stored in memory hardware in communication with the data processing hardware. identifying training examples of the rendered training source code. The method may further comprise data processing hardware training the machine learning model with training examples including training source code paired with corresponding result characteristics.
コードインサイトのエミュレートされた結果特性は、ターゲットソースコードもしくはターゲットソースコードの変形のエミュレートされたビルド結果、ターゲットソースコードもしくはターゲットソースコードの変形を実行するためのエミュレートされた経過時間、ターゲットソースコードもしくはターゲットソースコードの変形のエミュレートされたメタデータ、またはターゲットソースコードもしくはターゲットソースコードの変形のエミュレートされた、人間が生成したコメントのうちの１つを含み得る。方法はさらに、ターゲットソースコードの予測コード変形が実行可能なコードを含む場合、データ処理ハードウェアが、機械学習モデルを、訓練ソースコードをコンパイルまたは解釈することによって生じる対応する訓練実行可能なコードとペアにされた訓練ソースコードを含む訓練例で訓練することを備え得る。いくつかの実装では、機械学習モデルを使用してターゲットソースコードのコードインサイトを生成することは、ターゲットソースコードから抽出されるターゲット特徴のセットを特徴入力として受信するように構成された機械学習モデルを使用して、ターゲットソースコードのベクトル表現を生成することと、データ処理ハードウェアと通信しているメモリハードウェアに格納されている訓練ソースコードスニペットのプールの類似スコアを求めることとを含み、類似スコアの各々は、対応する訓練コードスニペットに関連付けられており、かつ、ターゲットソースコードのベクトル表現と、対応する訓練コードスニペットのそれぞれのベクトル表現との類似レベルを示し、生成することはさらに、類似閾値を満たす類似スコアを有する訓練ソースコードスニペットのプールから、１つ以上の訓練ソースコードスニペットを、ターゲットソースコードのミューテーションに対応するものとして識別することを含む。 Code Insight's emulated result characteristics include emulated build results of the target source code or variant of the target source code, emulated elapsed time to execute the target source code or variant of the target source code, It may include one of emulated metadata of the target source code or the target source code variant, or emulated human-generated comments of the target source code or the target source code variant. The method further comprises that, if the predicted code variant of the target source code includes executable code, the data processing hardware compares the machine learning model with the corresponding training executable code resulting from compiling or interpreting the training source code. Training may be provided with training examples comprising paired training source code. In some implementations, generating code insight for target source code using a machine learning model is a machine learning model configured to receive as feature input a set of target features extracted from the target source code. using the model to generate a vector representation of the target source code; and determining a similarity score for a pool of training source code snippets stored in memory hardware in communication with data processing hardware. , each of the similarity scores is associated with a corresponding training code snippet and indicates a level of similarity between a vector representation of the target source code and a respective vector representation of the corresponding training code snippet, generating further , identifying one or more training source code snippets from a pool of training source code snippets having similarity scores that satisfy a similarity threshold as corresponding to mutations in the target source code.
ターゲットソースコードは、ターゲットコードベースからのターゲットソースコードスニペットのペアを含んでもよく、機械学習モデルを使用してターゲットソースコードのコードインサイトを生成することは、ターゲットソースコードスニペットのペア内のターゲットソースコードスニペットごとに、対応するターゲットソースコードスニペットから抽出されるターゲット特徴のセットを特徴入力として受信するように構成された機械学習モデルを使用して、対応するターゲットソースコードスニペットのベクトル表現を生成することと、ベクトル表現に基づいて、ターゲットソースコードスニペットのペアの間のベクトル空間距離を求めることと、ベクトル空間距離が距離閾値を満たす場合、ターゲットソースコードスニペットのペアは互いの複製であると判断することとを含み得る。訓練ソースコードの予測ラベルは、ターゲットソースコードの複雑さの予測レベル、ターゲットソースコードの予測品質、ターゲットソースコードの予測テスト要件、またはターゲットソースコードの予測難易度評価のうちの少なくとも１つを含み得る。ターゲットソースコードの予測コード変形は、ターゲットソースコード内のビルドエラーを修正する更新済みターゲットソースコード、ターゲットソースコードの実行可能なコード、ターゲットソースコードの改訂、またはターゲットソースコードを置換するための推奨される置換ソースコードのうちの少なくとも１つを含み得る。 The target source code may include a pair of target source code snippets from the target codebase, and generating code insights for the target source code using the machine learning model includes the target in the pair of target source code snippets. For each source code snippet, generate a vector representation of the corresponding target source code snippet using a machine learning model configured to receive as feature input a set of target features extracted from the corresponding target source code snippet determining a vector space distance between the pair of target source code snippets based on the vector representation; and determining that the pair of target source code snippets are duplicates of each other if the vector space distance satisfies a distance threshold. and determining. The prediction label of the training source code includes at least one of a prediction level of complexity of the target source code, a prediction quality of the target source code, a prediction test requirement of the target source code, or a prediction difficulty rating of the target source code. obtain. A predictive code transformation of the target source code is an updated target source code that corrects build errors in the target source code, executable code of the target source code, a revision of the target source code, or a recommendation to replace the target source code. may include at least one of the replaced source code.
本開示の他の態様は、コードインサイトを生成するためのシステムを提供する。システムは、データ処理ハードウェアと、データ処理ハードウェアと通信しており、データ処理ハードウェアで実行されると、データ処理ハードウェアに動作を実行させる命令を格納したメモリハードウェアとを備える。動作は、ターゲットソースコードのコードインサイトを要求するコードインサイト要求を、ソフトウェア開発ツールをビルドするためにターゲットソースコードを使用する開発者に関連付けられた開発者デバイスから受信することを含む。コードインサイト要求は、ターゲットソースコードと、ツールタイプインジケータとを含む。ツールタイプインジケータは、ソフトウェア開発ツールがコードラベリングタイプのソフトウェア開発ツールまたはコード変形タイプのソフトウェア開発ツールのうちの１つからなることを指定する。動作はさらに、ツールタイプインジケータに基づいて、コードラベリングタイプのソフトウェア開発ツールまたはコード変形タイプのソフトウェア開発ツールのうちの指定された１つに関連付けられた訓練ソースコードで訓練された機械学習モデルを取得することを含む。動作はさらに、機械学習モデルを使用して、ターゲットソースコードのコードインサイトを生成することを含む。ツールタイプインジケータが、ソフトウェア開発ツールがコードラベリングタイプのソフトウェア開発ツールからなることを指定する場合、ターゲットソースコードのコードインサイトは、ターゲットソースコードの予測ラベルを含む。ツールタイプインジケータが、ソフトウェア開発ツールがコード変形タイプのソフトウェア開発ツールからなることを指定する場合、ターゲットソースコードのコードインサイトは、訓練ソースコードの予測コード変形を含む。動作はさらに、コードインサイトを開発者デバイスに送信することを含み、コードインサイトは、開発者デバイスによって受信されると、開発者デバイスで実行されているグラフィカルユーザインターフェイスに、コードインサイトを開発者デバイスの表示画面に表示させることを含む。 Another aspect of the present disclosure provides a system for generating code insight. The system comprises data processing hardware and memory hardware in communication with the data processing hardware and containing instructions that, when executed on the data processing hardware, cause the data processing hardware to perform operations. The operations include receiving a code insight request requesting code insight for target source code from a developer device associated with a developer using the target source code to build the software development tool. A code insight request includes the target source code and a tool type indicator. The tool type indicator specifies that the software development tool consists of one of a code labeling type software development tool or a code transformation type software development tool. The operation further obtains the machine learning model trained with the training source code associated with the specified one of the code labeling type software development tool or the code transformation type software development tool based on the tool type indicator. including doing The operations further include using the machine learning model to generate code insight for the target source code. If the tool type indicator specifies that the software development tool consists of a code labeling type software development tool, the code insight for the target source code includes predicted labels for the target source code. If the tool type indicator specifies that the software development tool consists of a code transformation type software development tool, the code insight for the target source code includes predicted code transformations for the training source code. The operations further include transmitting the code insight to the developer device, the code insight being received by the developer device and developing the code insight into a graphical user interface running on the developer device. including displaying on the display screen of the person's device.
本開示の実装は、以下の任意の特徴のうちの１つ以上を含み得る。いくつかの実装では、動作はさらに、機械学習モデルへの入力に適したターゲットソースコードの構文表現に対応するターゲット特徴のセットを、ターゲットソースコードから抽出することを含む。これらの実装では、機械学習モデルは、ターゲット特徴のセットを入力として受信し、ターゲットソースコードのコードインサイトを出力として生成するように構成されている。ターゲットソースコードの構文表現は、構文表現木（ＡＳＴ）を含み得る。いくつかの例では、機械学習モデルを取得することは、機械学習モデル生成器を使用して、選択された訓練ソースコードで機械学習モデルを訓練することによってコードインサイト要求を受信することに応答して、機械学習モデルを生成することを含む。訓練ソースコードは、データ処理ハードウェアと通信しているメモリハードウェアに格納されているソースコードリポジトリから選択可能であり、訓練ソースコードは、コードラベリングタイプのソフトウェア開発ツールまたはコード変形タイプのソフトウェア開発ツールのうちの指定された１つに関連付けられている。いくつかの実装では、動作はさらに、機械学習モデルを訓練するのに適した訓練ソースコードの構文表現に対応する訓練特徴のセットを、選択された訓練ソースコードから抽出することを含む。訓練ソースコードの構文表現は、抽象構文木（ＡＳＴ）を含み得る。 Implementations of the disclosure may include one or more of any of the following features. In some implementations, the operations further include extracting from the target source code a set of target features corresponding to a syntactic representation of the target source code suitable for input to the machine learning model. In these implementations, the machine learning model is configured to receive a set of target features as input and produce code insights for the target source code as output. A syntactic representation of the target source code may include a syntactic expression tree (AST). In some examples, obtaining the machine learning model is in response to receiving a code insight request by training the machine learning model with the selected training source code using a machine learning model generator. to generate a machine learning model. The training source code is selectable from a source code repository stored in memory hardware in communication with the data processing hardware, and the training source code is a code labeling type software development tool or a code transformation type software development tool. Associated with a specified one of the tools. In some implementations, the operations further include extracting from the selected training source code a set of training features corresponding to a syntactic representation of the training source code suitable for training the machine learning model. A syntactic representation of the training source code may include an abstract syntax tree (AST).
いくつかの実装では、コードインサイト要求はさらに、コードインサイトに関連付けられた、開発者によって定義された結果特性タイプを含み、ツールタイプインジケータに基づいて機械学習モデルを取得することはさらに、結果特性タイプに基づく。これらの実装では、機械学習モデルを使用してターゲットソースコードのコードインサイトを生成することはさらに、機械学習モデルを使用して、コードインサイト要求の結果特性タイプに関連付けられた、エミュレートされた結果特性を生成することを含み得る。動作はさらに、メモリハードウェアに格納されているソースコードリポジトリから、コードインサイト要求の結果特性タイプに関連付けられた対応する結果特性とペアにされた訓練ソースコードの訓練例を識別することを含み得る。動作はさらに、機械学習モデルを、対応する結果特性とペアにされた訓練ソースコードを含む訓練例で訓練することを含み得る。 In some implementations, the code insight request further includes a developer-defined result trait type associated with the code insight, and retrieving a machine learning model based on the tool type indicator further includes a result Based on the characteristic type. In these implementations, generating Code Insight for the target source code using the machine learning model is further emulated using the machine learning model and associated with the code insight request result characteristic type. generating a result characteristic. The acts further include identifying, from a source code repository stored in the memory hardware, training examples of training source code paired with corresponding result traits associated with the code insight request result trait types. obtain. The operations may further include training the machine learning model with training examples including training source code paired with corresponding result characteristics.
コードインサイトのエミュレートされた結果特性は、ターゲットソースコードもしくはターゲットソースコードの変形のエミュレートされたビルド結果、ターゲットソースコードもしくはターゲットソースコードの変形を実行するためのエミュレートされた経過時間、ターゲットソースコードもしくはターゲットソースコードの変形のエミュレートされたメタデータ、またはターゲットソースコードもしくはターゲットソースコードの変形のエミュレートされた、人間が生成したコメントのうちの１つを含み得る。動作はさらに、ターゲットソースコードの予測コード変形が実行可能なコードを含む場合、機械学習モデルを、訓練ソースコードをコンパイルまたは解釈することによって生じる対応する訓練実行可能なコードとペアにされた訓練ソースコードを含む訓練例で訓練することを含み得る。いくつかの実装では、機械学習モデルを使用してターゲットソースコードのコードインサイトを生成することは、ターゲットソースコードから抽出されるターゲット特徴のセットを特徴入力として受信するように構成された機械学習モデルを使用して、ターゲットソースコードのベクトル表現を生成することと、メモリハードウェアに格納されている訓練ソースコードスニペットのプールの類似スコアを求めることとを含み、類似スコアの各々は、対応する訓練コードスニペットに関連付けられており、かつ、ターゲットソースコードのベクトル表現と、対応する訓練コードスニペットのそれぞれのベクトル表現との類似レベルを示し、さらに、類似閾値を満たす類似スコアを有する訓練ソースコードスニペットのプールから、１つ以上の訓練ソースコードスニペットを、ターゲットソースコードのミューテーションに対応するものとして識別することを含む。 Code Insight's emulated result characteristics include emulated build results of the target source code or variant of the target source code, emulated elapsed time to execute the target source code or variant of the target source code, It may include one of emulated metadata of the target source code or the target source code variant, or emulated human-generated comments of the target source code or the target source code variant. The operation further includes training the machine learning model in the training source paired with the corresponding training executable code resulting from compiling or interpreting the training source code, if the predicted code variant of the target source code includes executable code. It may involve training with training examples that contain code. In some implementations, generating code insight for target source code using a machine learning model is a machine learning model configured to receive as feature input a set of target features extracted from the target source code. using the model to generate a vector representation of the target source code; and determining a similarity score for a pool of training source code snippets stored in memory hardware, each similarity score corresponding to A training source code snippet that is associated with a training code snippet and that indicates a level of similarity between the vector representation of the target source code and the respective vector representation of the corresponding training code snippet, and that has a similarity score that satisfies a similarity threshold. identifying one or more training source code snippets from the pool of as corresponding to the target source code mutations.
ターゲットソースコードは、ターゲットコードベースからのターゲットソースコードスニペットのペアを含んでもよく、機械学習モデルを使用してターゲットソースコードのコードインサイトを生成することは、ターゲットソースコードスニペットのペア内のターゲットソースコードスニペットごとに、対応するターゲットソースコードスニペットから抽出されるターゲット特徴のセットを特徴入力として受信するように構成された機械学習モデルを使用して、対応するターゲットソースコードスニペットのベクトル表現を生成することと、ベクトル表現に基づいて、ターゲットソースコードスニペットのペアの間のベクトル空間距離を求めることと、ベクトル空間距離が距離閾値を満たす場合、ターゲットソースコードスニペットのペアは互いの複製であると判断することとを含み得る。訓練ソースコードの予測ラベルは、ターゲットソースコードの複雑さの予測レベル、ターゲットソースコードの予測品質、ターゲットソースコードの予測テスト要件、またはターゲットソースコードの予測難易度評価のうちの少なくとも１つを含み得る。ターゲットソースコードの予測コード変形は、ターゲットソースコード内のビルドエラーを修正する更新済みターゲットソースコード、ターゲットソースコードの実行可能なコード、ターゲットソースコードの改訂、またはターゲットソースコードを置換するための推奨される置換ソースコードのうちの少なくとも１つを含み得る。 The target source code may include a pair of target source code snippets from the target codebase, and generating code insights for the target source code using the machine learning model includes the target in the pair of target source code snippets. For each source code snippet, generate a vector representation of the corresponding target source code snippet using a machine learning model configured to receive as feature input a set of target features extracted from the corresponding target source code snippet determining a vector space distance between the pair of target source code snippets based on the vector representation; and determining that the pair of target source code snippets are duplicates of each other if the vector space distance satisfies a distance threshold. and determining. The prediction label of the training source code includes at least one of a prediction level of complexity of the target source code, a prediction quality of the target source code, a prediction test requirement of the target source code, or a prediction difficulty rating of the target source code. obtain. A predictive code transformation of the target source code is an updated target source code that corrects build errors in the target source code, executable code of the target source code, a revision of the target source code, or a recommendation to replace the target source code. may include at least one of the replaced source code.
本開示の１つ以上の実装は、添付の図面および以下の説明に詳細に記載されている。他の態様、特性、および利点は、説明および図面、ならびに特許請求の範囲から明らかになるであろう。 The details of one or more implementations of the disclosure are set forth in the accompanying drawings and the description below. Other aspects, features, and advantages will become apparent from the description and drawings, and from the claims.
図面中の同様の符号は、同様の要素を示す。
詳細な説明
本開示の態様は、ソフトウェア開発ツールの機械学習モデルに関する。ソフトウェア開発者は、ソフトウェア開発ツールを使用して、ソフトウェアアプリケーション、ウェブサイト、または他のソフトウェアシステムもしくはコンポーネントを、作成、デバッグ、維持、またはその他の態様ではサポートする。ソフトウェア開発ツールは、たとえばコマンドインタープリタから別個に実行される個別のプログラムでもよい、または、統合開発環境（ＩＤＥ）と呼ばれることが多い単一の大きなプログラムの一部である場合もある。プログラムのバグを発見し、アプリケーションの拡張時に新たなバグが発生するのを防ぎ、一般に認められたプログラミング手法に従うために、コードベースを認識するソフトウェア開発ツールが使用されることがある。コードベース（ｃｏｄｅｂａｓｅまたはｃｏｄｅ ｂａｓｅ）は、特定のソフトウェアシステムまたはソフトウェアコンポーネント（たとえば、ソフトウェア開発ツール）をビルドするために使用されるソースコードの集合である。コードベースは通常、ソースコードリポジトリに格納される。コードベースは一般に、人間が書いたソースコードスニペットを含む。これらのソースコードスニペットは、非常に複雑であるため、または単に長いため、最も経験のあるソフトウェア開発者であっても、コードベースをちらっと見ただけでは、ソースコードスニペットを手動で検査することができないことがよくある。また、高水準プログラミング言語によって提供される抽象化によって、ソースコードとソフトウェアアプリケーションの動作との関係を理解することがさらに難しくなっている。プログラムのバグを発見するため、コードを拡張する際に新たなバグを発生させないため、および一般に認められたプログラミング手法に従うために、ソフトウェア開発者は、ソースコード上で動作するソフトウェア開発ツールをビルドする際に、機械学習モデルを活用することができる。
Like numbers in the drawings indicate like elements.
DETAILED DESCRIPTION Aspects of the present disclosure relate to machine learning models for software development tools. Software developers use software development tools to create, debug, maintain, or otherwise support software applications, websites, or other software systems or components. Software development tools may be separate programs that run separately from, for example, a command interpreter, or they may be part of a single larger program, often called an integrated development environment (IDE). Codebase-aware software development tools are sometimes used to find program bugs, prevent new bugs from being introduced as the application is extended, and follow accepted programming practices. A codebase or code base is a collection of source code used to build a particular software system or software component (eg, software development tool). Code bases are typically stored in source code repositories. A codebase generally contains source code snippets written by humans. These source code snippets are so complex, or just so long, that even the most experienced software developer cannot manually inspect the source code snippets at a glance at the codebase. Often you can't. Also, the abstractions provided by high-level programming languages make it more difficult to understand the relationship between the source code and the behavior of the software application. Software developers build software development tools that run on source code in order to find program bugs, to prevent new bugs from being introduced as the code is extended, and to follow accepted programming practices. Machine learning models can be leveraged for this purpose.
ソフトウェアアナライザは、通常、ソースコードを評価するためにルールを適用することによって作動する。ルールは、プログラミングエラーの一般的な原因に基づいて、言語固有、および／またはオペレーティングシステム固有になることがある。精度が低すぎるルールは、誤表示が多すぎて、ソフトウェア開発者にとって有用でない可能性がある。精度が高すぎるルールは、限られた状況でのみ適用可能である、および／または、実行に時間がかかりすぎて実用的でない可能性がある。機械学習モデルに基づくソフトウェア開発ツールは、誤表示の回避と実用的な実行時間との適切なバランスを効率的に実現することができる。機械学習モデルに基づくソフトウェア開発ツールは、一般的なプログラミングエラーの検出にとどまらない可能性がある。例示的なコードベースを使用して訓練された機械学習モデルは、例示的なコードベースおよび／または例示的なコードベースから抽出される特徴に基づくインサイトを得ることができる場合がある。 Software analyzers typically work by applying rules to evaluate source code. Rules may be language specific and/or operating system specific based on common causes of programming errors. A rule that is too inaccurate may give too many false indications to be useful to software developers. Rules that are too precise may be applicable only in limited circumstances and/or may take too long to be practical. Software development tools based on machine learning models can efficiently achieve the right balance between avoiding false indications and practical execution time. Software development tools based on machine learning models have the potential to go beyond detecting common programming errors. A machine learning model trained using an exemplary codebase may be able to gain insights based on the exemplary codebase and/or features extracted from the exemplary codebase.
ソースコードを理解する機械学習モデルは、ソフトウェア開発ツールをビルドする時間を大幅に短縮し、全体の品質を向上させることができるが、特定のソフトウェア開発ツールのビルドのために調整された機械学習モデルの作成は、大変な作業であり、機械学習の知識を有する専門のエンジニアが必要になる。また、機械学習モデルの作成と、ソースコード上のソフトウェア開発ツールの作成とに必要なスキルおよび知識は、通常、重複しないため、機械学習およびソフトウェア開発ツールを専門とする別のエンジニアが必要になる。機械学習モデルがソフトウェア開発ツールのビルドを最適化するために提供する利点は、機械学習モデルの作成に必要な追加コストおよびリソースを上回らないことが多い。その結果、機械学習モデルを用いずに従来の方法でソフトウェア開発ツールをビルドする方が簡単であることが多い。 Machine learning models that understand source code can significantly reduce the time to build software development tools and improve overall quality, but machine learning models that are tuned for building specific software development tools is a daunting task and requires specialized engineers with knowledge of machine learning. Also, the skills and knowledge required to create machine learning models and create software development tools on source code typically do not overlap, requiring separate engineers who specialize in machine learning and software development tools. . The benefits that machine learning models provide for optimizing the build of software development tools often do not outweigh the additional costs and resources required to create the machine learning models. As a result, it is often easier to build software development tools the traditional way without machine learning models.
本明細書の実装は、開発者がソフトウェア開発ツールをビルドするために使用しているターゲットソースコードのコードインサイトの生成に使用される機械学習モデルを自動的に生成することに向けられている。ターゲットソースコードを理解する機械学習モデルを生成することによって、開発者は、データ収集、ならびに機械学習モデルを生成する際の専門的なスキルおよび知識を有していることなど、機械学習モデルを生成するためのプロセスのすべての側面から軽減される。たとえば、開発者は、ターゲットソースコード用のコードインサイトを要求するコードインサイト要求を提供してもよく、コードインサイト要求は、ターゲットソースコードと、ソフトウェア開発ツールがコードラベリングタイプのソフトウェア開発ツール（たとえば、難易度評価を提供するツール）またはコード変形タイプのソフトウェア開発ツール（たとえば、コードを入力として受取り、異なるコードを出力として生成するツール）のうちの１つからなることを指定するツールタイプインジケータとを含む。コードインサイト要求は、限定されないが、ビルド結果、ターゲットソースコードを実行するための経過時間、ターゲットソースコードのメタデータ、またはターゲットソースコードの人間が生成したコメントなど、コードインサイトに関連付けられた出力特性タイプを任意に含んでもよい。基本的に、出力特性タイプは開発者によって定義され、どのタイプのデータがビルド中のソフトウェア開発ツールに関連するかについてのヒントを提供する。 Implementations herein are directed to automatically generating machine learning models that are used to generate code insight for target source code that developers are using to build software development tools. . By generating a machine learning model that understands the target source code, developers must have specialized skills and knowledge in data collection, and generating machine learning models. Be relieved from all aspects of the process to For example, a developer may provide a code insight request requesting code insight for a target source code, the code insight request includes the target source code and the software development tool is a code labeling type software development tool. (e.g. tools that provide difficulty ratings) or code transformation type software development tools (e.g. tools that take code as input and produce different code as output) including indicators. A code insight request may be associated with code insight, such as, but not limited to, build results, elapsed time to execute target source code, target source code metadata, or human-generated comments in target source code. An output characteristic type may optionally be included. Essentially, output property types are defined by the developer and provide hints as to what types of data are relevant to the software development tool being built.
ツールタイプインジケータ、および必要に応じて出力特性タイプに基づいて、機械学習システムは、コードインサイトの生成方法を学習するための機械学習モデルをビルドするために、訓練ソースコードデータに関連して自動的に収集および結合するように構成されている。すなわち、機械学習モデルが訓練ソースコード上で訓練されると、開発者は、ターゲットソースコード（たとえば、ソースコードスニペット（複数可））を訓練済みの機械学習モデルへの入力として提供することが可能であり、訓練済みの機械学習モデルは、ターゲットソースコードのコードインサイトを生成することが可能である。ここで、コードインサイトは、ツールタイプインジケータが、ソフトウェア開発ツールがコードラベリングタイプのソフトウェア開発ツールからなることを指定する場合のターゲットソースコードの予測ラベル、またはツールタイプインジケータが、ソフトウェア開発ツールがコード変形タイプのソフトウェア開発ツールに対応することを指定する場合の訓練ソースコードの予測コード変形のうちの１つを含む。開発者は、コードインサイトを見て（たとえば、グラフィカルユーザインターフェイス上のディスプレイを介して）、コードインサイトに基づいて、必要に応じてターゲットソースコードを更新することができる。 Based on the tool type indicator, and optionally the output characteristic type, the machine learning system automatically correlates the training source code data to build a machine learning model to learn how to generate code insight. configured to collect and combine systematically. That is, once the machine learning model is trained on the training source code, the developer can provide the target source code (e.g., source code snippet(s)) as input to the trained machine learning model. , and a trained machine learning model is capable of generating code insight for the target source code. Here, code insight is a predictive label of target source code when the tool type indicator specifies that the software development tool consists of a software development tool of the code labeling type, or a tool type indicator indicates that the software development tool is code labeling type software development tool. Include one of the predicted code variants of the training source code as specified to correspond to a variant type software development tool. A developer can view the code insight (eg, via a display on a graphical user interface) and update the target source code as needed based on the code insight.
図１を参照すると、いくつかの実装において、システム１００は、ソフトウェア開発者２０２に関連付けられた開発者デバイス２０４を備え、ソフトウェア開発者は、たとえば、ネットワーク１３０を介して、リモートシステム１４０と通信してもよい。リモートシステム１４０は、スケーラブル／エラスティックなリソース１４２を有する分散システム（たとえば、クラウド環境）でもよい。リソース１４２は、コンピューティングリソース（たとえば、データ処理ハードウェア）１４４および／またはストレージリソース（たとえば、メモリハードウェア）１４６を含む。ソフトウェア開発者２０２は、開発者デバイス２０４を使用して、ターゲットソースコード２１０上で動作するソフトウェア開発ツール（たとえば、ソフトウェアツール）４１８をビルドしてもよい。リモートシステム１４０は、機械学習モデル３０８を自動的に取得し、機械学習モデル３０８を使用して、開発者２０２がソフトウェアツール４１８をビルドするために使用しているターゲットソースコード２１０のコードインサイト４００，４００ａ～ｂを生成するために、コードインサイトサービス１５０を実行する。ソフトウェア開発者２０２が、必要なデータをすべて手動で収集し、ターゲットソースコードを分析するために特別に調整された機械学習モデルをビルドする困難なプロセスを引き受ける必要がある従来の技術とは対照的に、コードインサイトサービス１５０は、ターゲットソースコード２１０と、ツール４１８がコードラベリングタイプのソフトウェア開発ツールまたはコード変形タイプのソフトウェア開発ツールのうちの１つからなることを指定するツールタイプインジケータ２０５とを除いて、開発者２０２からの入力なしに機械学習モデル３０８を自動的に取得（たとえば、自動的に生成）するように構成されている。さらにロバストな機械学習モデル３００を取得／生成するために、開発者２０２は、コードインサイト４００に関連付けられた結果特性タイプ２０７を追加的に提供してもよい。
Referring to FIG. 1, in some implementations,
開発者デバイス２０２は、開発者デバイス２０２の画面上に表示されるグラフィカルユーザインターフェイス（ＧＵＩ）２２０を実行してもよい。開発者２０４は、ＧＵＩ２０４を使用して、ターゲットソースコード２１０上で動作するソフトウェアツール４１８をビルドしてもよい。たとえば、開発者２０４は、ＧＵＩ２０４を介して、開発者デバイス２０２にターゲットソースコード２１０を入力してもよい。開発者２０４は、ＧＵＩ２２０を使用して、コードインサイトサービス１５０と通信し、たとえば、コードインサイトサービス１５０にコードインサイト要求１１０を送信し、コードインサイトサービス１５０によって生成されるコードインサイト４００を表示してもよい。
示された例では、コードインサイトサービス１５０は、ソフトウェア開発ツール４１８をビルドするために使用されるターゲットソースコード２１０のコードインサイト４００を要求するコードインサイト要求１１０を受信する。ターゲットソースコード２１０は、開発者２０４が、たとえば、コードインサイト４００を介してインサイトを得ようとしているコードベース内の１つ以上のソースコードスニペットを含んでもよい。コードインサイト要求１１０は、ターゲットソースコード２１０と、ソフトウェア開発ツール４１８がコードラベリングタイプのソフトウェア開発ツールまたはコード変形タイプのソフトウェア開発ツールのうちの１つからなることを指定するビルドタイプインジケータ２０５とを含む。別の例では、コードインサイト要求１１０はさらに、限定されないが、ビルド結果、ターゲットソースコードを実行するための経過期間、ターゲットソースコードのメタデータ、またはターゲットソースコードの人間が生成したコメントなど、コードインサイト４００に関連付けられた出力特性タイプ２０７を含む。基本的に、出力特性タイプ２０７は、開発者２０２によって定義され、どのタイプのデータがビルド中のソフトウェア開発ツール４１８に関連するかについてのヒントを提供し、より詳細なレベルでは、どのタイプのデータが、コードインサイト４００の生成に使用される機械学習モデル３０８の取得／生成に関連するかについてのヒントを提供する。
In the example shown,
いくつかの実装では、リモートシステム１４０上で実行される（たとえば、データ処理ハードウェア１４４上で実行される）コードインサイトサービス１５０は、特徴抽出器２００、機械学習（ｍａｃｈｉｎｅ ｌｅａｒｎｉｎｇ：ＭＬ）システム３００、およびインサイト生成器４１０を含む。図示の例では、特徴抽出器２００は、開発者デバイス２０４から受信したコードインサイト要求１１０に含まれるターゲットソースコード２１０からターゲット特徴２１２のセットを抽出するように構成されている。ここで、ターゲット特徴２１２のセットは、機械学習モデル３０８への入力に適したターゲットソースコード２１０の構文表現に対応する。たとえば、ターゲット特徴２１２を使用してターゲットソースコード２１０を構文的に表現することによって、ターゲットソースコード２１０を機械学習モデル３０８によって読取り可能な形式で表現し、ターゲットソースコード２１０から不要なデータを除去することによって機械学習モデル３０８のメモリ要件を低減することができる。いくつかの例では、ターゲットソースコード２１０の構文表現は、抽象構文木（ＡＳＴ）を含む。
In some implementations,
図２は、ターゲットソースコード２１０からターゲット特徴２１２のセットを抽出して抽象構文木（ＡＳＴ）表現２１５にする特徴抽出器２００の例を示す図である。同じまたは異なる特徴抽出器２００は、同様に、ターゲットソースコード２１０から訓練特徴を抽出してＡＳＴ表現２１５にしてもよい。また、特徴抽出器２００は、ターゲットソースコード２１０から異なる特徴を抽出して、ターゲットソースコード２１０の他の種類の構文表現を提供するために使用されてもよい。図１は、リモートシステム１４０上で実行される特徴抽出器２００を示しているが、開発者デバイス２０４は、他の構成で特徴抽出器２００を実行してもよい。一般に、ターゲットソースコード２１０は、高水準の構造化されたコンピュータ言語で表現されるソフトウェアを含む。たとえば、ターゲットソースコード２１０は、Ｊａｖａ（登録商標），ＪａｖａＳｃｒｉｐｔ（登録商標），Ｐｙｔｈｏｎ，Ｒｕｂｙ，Ｃ／Ｃ＋＋，Ｃ＃，Ｏｂｊｅｃｔｉｖｅ－Ｃ，ＳＱＬ，ＰＨＰおよび／またはＲを含むがこれらに限定されない、定義された構文を有する高レベルの構造化されたコンピュータ言語で表現されたソフトウェアを含んでもよい。ターゲットソースコード２１０を機械学習モデル３０８に直接挿入すれば、結果が使用不可能となるほど質の低い結果が生じることになる。さらに、利用可能なリソースよりも膨大なリソースが必要となるだろう。しかしながら、特徴抽出器２００は、同じまたはより良い結果を取得し、同時に、メモリ要件を大幅に低減させるために、ノードのペアとそれらの共通の祖先をハッシュ化することによって、ターゲット特徴２１２のセットを抽出してＡＳＴ表現２１５にしてもよい。ＡＳＴ表現２１５は、ターゲットソースコード２１０の構造的なまたはコンテンツ関連の特徴２１２を表現してもよい。たとえば、ＡＳＴ表現２１５は、ターゲットソースコード２１０の構造を定義する中括弧、セミコロン、括弧などの句読点および区切り記号を省略してもよい。図２は、ターゲットソースコード２１０のスニペットを示す。スニペットは、ｗｈｉｌｅループ、ｉｆ／ｔｈｅｎ／ｅｌｓｅ文、および２つの代入文を含む。ＡＳＴ表現２１５に基づくターゲット特徴２１２の一部も示されている。ＡＳＴ表現２１５は、階層ツリー形式で配置されたターゲットソースコード２１０の構文特徴２１２を保持しつつ、コードスニペットの中括弧およびセミコロンを省略する。この例では、木構造の各ボックスは、ターゲットソースコード２１０から抽出された特徴２１２，２１２ａ～ｎを表している。
FIG. 2 is a diagram illustrating an
いくつかの例では、ＡＳＴ表現２１５は、特定のコンピュータ言語に対応する。他の例では、ＡＳＴ表現２１５は、いくつかのプログラミング言語に広く適用され、それによって、機械学習モデル３０８が、多数のプログラミング言語、たとえばＪａｖａまたはＰｙｔｈｏｎで表現されたターゲットソースコード２１０の確立された命名基準への準拠を認識することを学習できるように、訓練ソースコード３１０のプログラミング言語にとらわれないＡＳＴ表現で機械学習モデル３０８を訓練することができる。
In some examples, AST representation 215 corresponds to a particular computer language. In another example, the AST representation 215 has been broadly applied to several programming languages such that the
図１に戻って、いくつかの実装では、ＭＬシステム３００は、開発者デバイス２０４から受信したコードインサイト要求１１０に含まれるツールタイプインジケータ２０５に基づいて、機械学習モデル３０８を取得するように構成されている。コードインサイト要求１１０がコードインサイト４００に関連付けられた出力特性タイプ２０７も含む例では、ＭＬシステム３００は、ツールタイプインジケータ２０５と出力特性タイプ２０７との両方に基づいて機械学習モデル３０８を取得するように構成されている。図３を参照して以下でより詳細に説明するが、ＭＬシステム３００は、ツールタイプインジケータ２０５および出力特性タイプ２０７を使用して、機械学習モデル３０８を生成するための関連データを収集する。より具体的には、ＭＬシステム３００は、ツールタイプインジケータ２０５を使用して、ツールタイプインジケータ２０５によって指定されたコードラベリングタイプのソフトウェア開発ツールまたはコード変形タイプのソフトウェア開発ツールのうちの１つに関連付けられた訓練ソースコード３１０を選択する。ＭＬシステム３００はさらに、出力特性タイプ２０７を使用して、結果特性タイプ２０７に関連付けられた対応する結果特性３２０とペアにされた訓練ソースコード３１０の訓練例を識別してもよい。図示された例では、ＭＬシステム３００は、機械学習モデル３０８を、訓練ソースコード３１０、または対応する結果特性３２０とペアにされた訓練ソースコード３１０を含む訓練例で訓練する。
Returning to FIG. 1, in some implementations,
ＭＬシステム３００が、開発者デバイス２０４からのコードインサイト要求１１０の受信に応答して機械学習モデル３０８を取得した後で、インサイト生成器４１０は、機械学習モデル３０８を使用してターゲットソースコード２１０のコードインサイト４００を生成するように構成されている。いくつかの例では、インサイト生成器４１０は、ターゲットソースコード２１０から抽出されたターゲット特徴２１２のセットをモデル３０８への入力として受信し、ターゲットソースコード２１０のコードインサイト４００を出力として生成する。しかしながら、他の例では、コードインサイトサーバ１５０は、特徴抽出器２００を省略し、代わりに、入力としてターゲットソースコード２１０からコードインサイト４００を生成してもよい。
After
ツールタイプインジケータ２０５が、ソフトウェア開発ツール４１８がコードラベリングタイプのソフトウェア開発ツールからなることを指定する場合、コードインサイト４００は、ターゲットソースコード２１０の予測ラベル４００ａを含む。たとえば、予測ラベル４００ａは、ターゲットソースコード２１０の複雑さの予測レベル（たとえば、複雑対単純）、ターゲットソースコードの予測品質（たとえば、良いコード対悪いコード）、ターゲットソースコードの予測テスト要件（たとえば、テストした方がよい）、またはターゲットソースコードの予測難易度評価のうちの少なくとも１つを含んでもよい。予測ラベル４００ａは、開発者２０２が機械学習モデル３０８にターゲットソースコード２１０について予測させたい任意のタイプのラベルを含んでもよい。さらに、コードインサイト要求１１０に含まれるツールタイプインジケータ２０５は、開発者２０２がコードインサイト要求１１０を提供する際に、開発者２０２が機械学習モデル３０８に予測させたい特定のラベルを提供する場合に、コードラベリングタイプを指定してもよい。すなわち、コードインサイト要求１１０は、開発者２０２がコードインサイトサービス１５０に（たとえば、機械学習モデル３０８を介して）ターゲットソースコード２１０の複雑さ、ターゲットソースコード２１０の品質、ターゲットソースコード２１０のテスト要件、またはターゲットソースコード２１０の難易度評価を予測させたいことを示す場合がある。
If
一方、ツールタイプインジケータ２０５が、ソフトウェア開発ツール４１８がコード変形タイプのソフトウェア開発ツールからなることを指定する場合、コードインサイト４００は、ターゲットソースコード２１０の予測コード変形４００ｂを含む。いくつかの例では、機械学習モデル３０８は、モデル３０８がターゲットソースコード２１０（たとえば、ターゲット特徴２１２）内の１つ以上のビルドエラーを特定し、特定された１つ以上のビルドエラーを修正する予測コード変形４００ｂを生成するビルドエラー修正器として動作するように構成されている。ここで、予測コード変形４００ｂは、ビルドエラーを修正する更新済みのターゲットソースコード２１０を含んでもよい、または、ビルドエラーをもたらしたコードの部分を修正するためのコード改訂を含んでもよい。別の例では、予測コード変形４００ｂは、ターゲットソースコード２１０のコンパイル／解釈をエミュレートする実行可能なコード出力を含む。いくつかの実装では、予測コード変形４００ｂは、ターゲットソースコード２１０を置換するための推奨される置換コードを含む。
On the other hand, if
コードインサイト要求１１０が開発者２０２によって指定された結果特性タイプ２０７を含むシナリオでは、インサイト生成器４１０はさらに、機械学習モデル３０８を使用して、コードインサイト４００のエミュレートされた結果特性３２０を生成するように構成されている。これらのシナリオでは、エミュレートされた結果属性３２０は、コードインサイト要求１１０に含まれる結果特性タイプ２０７に関連付けられている。たとえば、エミュレートされた結果属性３２０は、ターゲットソースコード２１０のビルドが成功するかまたは失敗するかを示す、エミュレートされたビルド結果を含んでもよい。エミュレートされた結果属性３２０は、追加的または代替的に、ターゲットソースコードを実行するためのエミュレートされた経過時間、および／またはターゲットソースコードのエミュレートされたメタデータを含んでもよい。いくつかの例では、結果特性タイプ２０７がユーザコメントを指定する場合、エミュレートされた結果属性３２０は、ターゲットソースコード２１０のコードレビューから生じるであろうユーザコメントをエミュレートする、ターゲットソースコード２１０用に人間が生成した、エミュレートされたコメントを含む。
In scenarios where
図３は、リモートシステム１４０上で実行されるコードインサイトサービス１５０の機械学習（ＭＬ）システム３００の例を示す。ＭＬシステム３００は、データコレクタ３４０と、機械学習モデル生成器３６０と、リモートシステム１４０のメモリハードウェア１４６に格納されているソースコードリポジトリ３１５とを含んでもよい。図示された例では、ソースコードリポジトリ３１５は、モデル生成器３６０が、ターゲットソースコード２１０のラベル４００ａまたはコード変形４００ｂを予測する学習のための訓練済みＭＬモデル３０８を生成（すなわち、訓練）するために使用可能な訓練ソースコード３１０，３１０ａ～ｎのコードベースを含んでもよい。いくつかの例では、ソースコードリポジトリ３１５は、開発者デバイス２０４がソフトウェア開発ツール４１８をビルドするためにアクセスし、コードインサイトサービス１５０へのコードインサイト要求１１０に含まれ得る、ターゲットソースコード２１０のスニペットも含む。コードインサイトサービス１５０によって受信されたコードインサイト要求１１０で提供されたビルドタイプインジケータ２０５（および任意に出力特性タイプ２０７）に基づいて、データコレクタ３４０は、コードラベリングタイプのソフトウェア開発ツールまたはコード変形タイプのソフトウェア開発ツールのうちの指定された１つに関連付けられた訓練ソースコード３１０を選択するために、ソースコードリポジトリ３１５に問合わせてもよい。その後、モデル生成器３６０は、データコレクタ３４０によって選択された訓練ソースコード３１０を、機械学習モデル３０８を訓練するための訓練例３５０として使用する。このように、ＭＬシステム３００は、ソースコードリポジトリ３１５から訓練ソースコード３１０を選択し、機械学習モデル生成器３６０を使用して、選択した訓練ソースコード３１０で機械学習モデル３０８を訓練することにより、コードインサイト要求１１０を受信したことに応答して、機械学習モデル３０８を生成することができる。
FIG. 3 illustrates an example machine learning (ML)
データコレクタ３４０は、ターゲットソースコード２１０上で動作するソフトウェア開発ツール４１８の開発者定義コードインサイト４００を生成するために特に調整された機械学習モデル３０８をビルド／作成するために必要な他の関連データを収集してもよい。モデル生成器３６０は、深層学習ニューラルネットワークなどのニューラルネットワークに基づく機械学習システムに対応する。モデル生成器３６０は、機械学習モデル３０８を訓練するためのニューラルネットワークを生成するために、一般化バックプロパゲーションを実装してもよい。
The
いくつかの実装では、ＭＬシステム３００は、機械学習モデル３０８を訓練するのに適した（たとえば、読取り可能でメモリ要件を低減する）訓練ソースコード３１０の構文表現を提供するために、選択された訓練ソースコード３１０から訓練特徴のセットを抽出する。たとえば、ＭＬシステム３００は、図１および図２を参照して上述したように、特徴抽出器２００を採用してもよい。いくつかの例では、訓練ソースコード３１０の構文表現は、ＡＳＴ表現２１５（図２）を含む。
In some implementations, the
コードインサイト要求１１０が、コードインサイト４００に関連付けられた結果特性タイプ２０７も含む場合、データコレクタ３４０は、ソースコードリポジトリ３１５から、コードインサイト要求１１０の結果特性タイプ２０７に関連付けられた対応する結果特性３２０とペアにされた訓練ソースコード３１０の訓練例３５０を、識別／選択してもよい。ここで、モデル生成器３６０は、対応する結果特性３２０とペアにされた訓練ソースコード３１０の訓練例で機械学習モデル３０８を訓練してもよい。開発者定義の結果特性タイプ２０７を提供することによって、機械学習モデル３０８を訓練するために使用される訓練ソースコード３１０のプールは洗練されてもよい、および／または、モデル生成器３６０は、開発者定義の結果特性タイプ２０７に一致する特定の結果特性３２０とペアにされた訓練ソースコード３１０をより優先するために、ニューラルネットワークの重みを調整してもよい。いくつかの例では、結果特性タイプ２０７は、開発者２０２が知りたがっているコードインサイト４００に基づいて決定される。たとえば、開発者２０２は、あるターゲットソースコード２１０が正常にビルドされるかどうかを判断するように、コードインサイトサービス１５０に（たとえば、コードインサイト要求１１０で）要求することができる。このシナリオでは、結果特性タイプ２０７は、「ビルド結果」とペアにされた訓練ソースコード３１０が、機械学習モデル３０８の訓練での使用に非常に関連性が高いことを示す可能性がある。
If
ソースコードリポジトリ３１５に格納されている訓練ソースコード３１０の各スニペットは、訓練ソースコード３１０に関連付けられた１つ以上の結果特性３２０でラベル付けされてもよい。これらの結果特性３２０は、限定されないが、コード３１０の対応するビルド結果、コード３１０を実行するための経過時間、コード３１０のメタデータ、またはコード３１０のレビューサイクルに基づく人間が生成したコメント（たとえば、ユーザコメント）を含む場合がある。いくつかの例では、訓練ソースコード３１０の結果特性３２０は、訓練ソースコード３１０のコンパイル／解釈から生じる、対応する実行可能コードを含む。
Each snippet of
開発者２０２が、コードインサイトサービス１５０に、ターゲットソースコード２１０のコンパイル／解釈をエミュレートするための実行可能コード出力を含む予測コード変形４００ｂを生成するように（たとえば、コードインサイト要求１１０で）要求する例では、モデル生成器３６０は、訓練ソースコードをコンパイルまたは解釈した結果生じる、対応する訓練実行可能コードとペアにされた訓練ソースコード３１０を含む訓練例３５０で機械学習モデル３０８を訓練してもよい。ここで、訓練実行可能コードは、訓練ソースコード３１０に関連付けられた結果特性３２０に対応してもよい。したがって、データコレクタ３４０は、モデル生成装置３６０が機械学習モデル３０８を訓練するために使用する訓練例３５０として、対応する訓練実行可能コードとペアにされた訓練ソースコード３１０を選択／識別するために、ソースコードリポジトリ３１５に問合わせてもよい。
コードインサイト要求１１０内のビルドタイプインジケータ２０５がラベリングタイプのソフトウェア開発ツールを指定する場合、モデル生成器３６０は、機械学習モデル３０８を正と負との両方の学習例３５０で訓練してもよい。たとえば、開発者２０２がコードインサイトサービス１５０に、ターゲットソースコード２１０がテストされた方がよいどうかを示す予測ラベル４００ｂを生成するよう要求すると仮定すると、モデル生成器３６０は、「テストした方がよい」とラベル付けされた訓練ソースコード３１０を含む正の訓練例３５０と、「テスト不要」とラベル付けされた訓練ソースコード３１０を含む負の訓練例３５０とで、モデル３０８を訓練してもよい。このシナリオでは、正および負の訓練例３５０は、モデル３０８へのソースコード入力が「テストした方がよい」かどうかを学習するように、モデル３０８を訓練する。同様に、コードが単純か／複雑か（または良い／悪い）どうかを示す予測ラベル４００ａを要求することは、モデル３０８へのソースコード入力が単純か複雑か（または良いか／悪いか）をモデル３０８が学習できるように、単純（または良い）とラベル付けされた訓練ソースコード３１０を含む正の訓練例、および複雑（または悪い）とラベル付けされた訓練ソースコード３１０を含む負の訓練例でモデル３０８を訓練するように、モデル生成装置３６０に要求することになる。
If the
いくつかの例では、モデル生成器３６０は、訓練ソースコードスニペットのプール内の訓練ソースコードスニペットごとに対応するベクトル表現を生成するように、モデル３０８を訓練する。ＭＬシステム３００は、インサイト生成器４１０がターゲットソースコード２１０の「近隣」の訓練ソースコードスニペットを識別するためにアクセスし得るメモリハードウェア１４６に、すべてのベクトル表現のベクトル空間マップを格納してもよい。たとえば、図１を参照すると、インサイト生成器４１０は、特徴入力としてターゲット特徴２１２のセットを受信するように構成された機械学習モデル３０８を使用して、ターゲットソースコード２１０のベクトル表現を生成し、メモリハードウェア１４６に格納されている訓練ソースコードスニペットのプールの類似度スコアを決定し、類似度閾値を満たす類似度スコアを有する訓練ソースコードスニペットの１つ以上をターゲットソースコード２１０の「近隣」であると識別してもよい。これらの「近隣」は、インサイト生成器４１０によって、ターゲットソースコード２１０を置換するための推奨される置換コード（たとえば、予測コード変形４００ｂ）として、または他の例では、ターゲットソースコード２１０の可能なミューテーション（たとえば、予測ラベル４００ａ）と識別されてもよい。この例では、各類似度スコアは、対応する訓練ソースコードスニペットに関連付けられ、ターゲットソースコード２１０のベクトル表現と、対応する訓練ソースコードスニペットのそれぞれのベクトル表現との類似度レベルを示す。同様に、インサイト生成器４１０は、ベクトル空間マップにおけるターゲットソースコード２１０のベクトル表現を使用して、ターゲットソースコード２１０がコードベース内のどこに配置されるべきかを予測することができる。
In some examples,
図１および図３を引き続き参照すると、ベクトル表現を生成するようにモデル３０８を訓練することは、他のタイプのコードインサイト４００を生成するためにインサイト生成器４１０によって同様に使用され得る。たとえば、開発者２０２は、ターゲットコードベース（たとえば、開発者デバイス２０４に格納されている、またはメモリハードウェア１４６に格納されている）からのターゲットソースコードスニペットのペアを含むターゲットソースコード２１０を有するコードインサイト要求１１０を送信してもよい。ここで、インサイト生成器４１０は、ターゲットソースコードスニペットのペアのターゲットソースコードスニペットごとに、対応するターゲットソースコードスニペットから抽出されたターゲット特徴２１２のセットを特徴入力として受信するように構成された機械学習モデルを使用して、対応するターゲットソースコードスニペットのベクトル表現を生成することによって、ターゲットソースコード２１０のコードインサイト４００を生成してもよい。その後、インサイト生成器４１０は、ベクトル表現に基づいてターゲットソースコードスニペットのペアの間のベクトル空間距離を求め、ベクトル空間距離が距離閾値を満たす場合、ターゲットソースコードスニペットのペアは互いの重複であると決定し得る。この例では、開発者デバイス２０４が、開発者２０２が見るためのコードインサイト４００を受信して表示すると、開発者２０２は、ストレージ要件を節約するために、ターゲットコードスニペットのうちの１つをターゲットコードベースから削除するように選択可能である。
With continued reference to FIGS. 1 and 3 ,
図４Ａおよび図４Ｂは、開発者がコードインサイト要求１１２を生成し、コードインサイト要求１１２をコードインサイトサービス１５０に送信して、ターゲットソースコード２１０のコードインサイト４００を要求できるようにするためのＧＵＩ２２０，２２０ａ～ｂの例を示す。開発者２０２は、ＧＵＩ２２０を使用して、ターゲットソースコード２１０を入力する。たとえば、開発者２０２は、ターゲットソースコード２１０を手動で入力してもよい、または、コードベース、たとえば、ソースコードリポジトリ３１５（図３）もしくは他の格納場所から、ターゲットソースコード２１２を取得してもよい。ＧＵＩ２２０ａ，２２０ｂの各々は、開発者２０４に、ツールタイプインジケータ２０５を選択することによって、開発者がどのタイプのツールをビルドしているかを指定するように促す。たとえば、図４Ａは、コードラベリングタイプのソフトウェア開発ツールの選択を示す入力表示を受信するＧＵＩ２２０ａを示す。ここで、開発者２０２は、コードラベリングタイプのソフトウェア開発ツールを指定するツールタイプインジケータ２０５をＧＵＩ２００ａに選択させるターゲットソースコード２１０の「テスト要件」ラベルを要求する入力を、（たとえば、マウスカーソルを介して）提供してもよい（たとえば、「コードラベリング」の円内を塗りつぶすことによって）。一方、図４Ｂは、コード変形タイプのソフトウェア開発ツールの選択を示す入力指示を受信するＧＵＩ２００ｂを示し、この場合、開発者２０２は、ターゲットソースコード２１０の実行可能コードへの「コンパイラ／インタープリタ」変形を要求する入力を（たとえば、マウスカーソルを介して）提供する。
4A and 4B enable a developer to generate a code insight request 112 and send the code insight request 112 to a
また、コードインサイト要求ＧＵＩ２２０ａ，２２０ｂは、コードインサイト要求１１０に含めるためのコードインサイト４００に関連付けられた結果特性タイプ２０７を選択するように、開発者２０２を促してもよい。図４Ａおよび図４Ｂの例は、出力特性タイプ２０７、たとえば、「ビルド結果」、「ランタイム」、「メタデータ」、および「ユーザコメント」から選択する４つのオプションを提供するが、ＧＵＩ２２０ａ，２２０ｂは、より多くのオプションを提供でき、さらに開発者２０２が結果特性タイプ２０７を発話またはテキスト入力できるようにしてもよい。図４Ａは、「ユーザコメント」出力特性タイプ２０７の選択を示す入力指示を受信するＧＵＩ２２０ａを示し、図４Ｂは、「ビルド結果」出力特性タイプ２０７の選択を示す入力指示を受信するＧＵＩ２２０ｂを示す。ＧＵＩ２２０ａ，２２０ｂは、選択されると開発者デバイス２０２にコードインサイト要求１１０をコードインサイトサービス１５０に送信させる「提出」ボタンを含み、それによって、コードインサイト要求１１０は、ターゲットソースコード２１０、開発者２０２によって選択されたツールタイプインジケータ２０５、および開発者２０２によって選択された出力特性タイプ２０７を含む。
The code insight request GUI 220 a , 220 b may also prompt the
図４Ｃおよび図４Ｄは、図４Ａおよび図４ＢのＧＵＩ２２０ａ～ｂを使用して生成されたコードインサイト要求１１０に応答してコードインサイトサービス１５０によって生成されたコードインサイト４００を表示するＧＵＩ２２０，２２０ｃ～ｄの例を示す。図４Ｃは、図４ＡのＧＵＩ２２０ａを使用して開発者２０４が送信したコードインサイト要求１１０に含まれるターゲットソースコード２１０の予測ラベル４００ａを含むコードインサイト４００を表示するＧＵＩ２２０ｃを示す。ここで、予測ラベル４００ａは、コードインサイト要求１１０のツールタイプインジケータ２０５が、ソフトウェア開発ツール４１８がコードラベリングタイプのソフトウェア開発ツールに対応することを指定したため、ターゲットソースコード２１０について生成される。図示の例では、予測ラベル４００ａは、ターゲットソースコード２１０が「テストした方がよい」ことを示す。具体的には、予測ラベル４００ａは、「機械学習モデルによるインサイト分析では、提供されたターゲットソースコードは、テストされるのであれば好ましいと予測される。」と通知するメッセージを、開発者に提供してもよい。また、図４Ｃは、コードインサイト４００ａのエミュレートされた結果特性３２０を表示するＧＵＩ２２０ｃを示し、それによって、エミュレートされた結果特性３２０は、コードインサイト要求１１０に含めるために図４ＡのＧＵＩ２２０ａを介して開発者２０２が選択した「ユーザコメント」の結果特性タイプ２０７に関連付けられる。図示された例では、エミュレートされた結果特性３２０は、ターゲットソースコード２１０のエミュレートされた、人間が生成したコメントを含む。したがって、開発者２０２は、レビューサイクル中にターゲットソースコード２１０について人間が生成したコメントがどのようなものである可能性が高いかを確認することができる。
FIGS. 4C and 4D show GUIs 220, which display
図４Ｄは、図４ＢのＧＵＩ２２０ｂを使用して開発者２０４が送信したコードインサイト要求１１０に含まれるターゲットソースコード２１０の予測コード変形４００ｂを含むコードインサイト４００を表示するＧＵＩ２２０ｄを示す。ここで、予測コード変形４００ｂは、コードインサイト要求１１０のツールタイプインジケータ２０５が、ソフトウェア開発ツール４１８がコード変形タイプのソフトウェア開発ツールに対応することを指定したため、ターゲットソースコード２１０について生成される。図示された例では、予測コード変形４００ｂは、ターゲットソースコード２１０から解釈／コンパイルされた実行可能なコードを含む。図４Ｄはまた、コードインサイト４００ｂのエミュレートされた結果特性３２０を表示するＧＵＩ２２０ｄを示し、それによって、エミュレートされた結果特性３２０は、コードインサイト要求１１０に含めるために図４ＢのＧＵＩ２２０ｂを介して開発者２０２によって選択された「ビルド結果」の結果特性タイプ２０７に関連付けられている。図示された例では、エミュレートされた結果特性３２０は、ターゲットソースコード２１０について「成功」というエミュレートされたビルド結果判定を提供する。したがって、開発者２０２は、ターゲットソースコード２１０のビルドが成功する可能性が高いかどうかを確認することができる。
FIG. 4D shows a GUI 220d displaying
図５は、コードインサイト４００を生成する方法の動作の配置例を示すフローチャートである。動作５０２で、方法５００は、データ処理ハードウェア１４４において、ソフトウェア開発ツール４１８をビルドするためにターゲットソースコード２１０を使用する開発者２０２に関連付けられた開発者デバイス２０４から、ターゲットソースコード２１０のコードインサイト４００を要求するコードインサイト要求１１２を受信することを含む。コードインサイト要求１１２は、ターゲットソースコード２１０と、ソフトウェア開発ツール４１８がコードラベリングタイプのソフトウェア開発ツールまたはコード変形タイプのソフトウェア開発ツールのうちの１つからなることを指定するツールタイプインジケータ２０５とを含む。いくつかの例では、コードインサイト要求１１２はさらに、コードインサイト４００に関連付けられた結果特性タイプ２０７を含む。これらの例では、結果特性タイプ２０７は、開発者２０２によって定義される。
FIG. 5 is a flowchart illustrating an example arrangement of operations of a method for generating
動作５０４で、方法５００は、データ処理ハードウェア１４４が、ツールタイプインジケータ２０５に基づいて機械学習モデル３０８を取得することを含む。機械学習モデル３０８は、コードラベリングタイプのソフトウェア開発ツールまたはコード変形タイプのソフトウェア開発ツールのうちの指定された１つに関連付けられた訓練ソースコード３１０で訓練される。
At
動作５０６で、方法５００は、データ処理ハードウェア１４４が、機械学習モデル３０８を使用してターゲットソースコード２１０のコードインサイト４００を生成することを含む。ターゲットソースコード２１０のコードインサイト４００は、ツールタイプインジケータ２０５が、ソフトウェア開発ツール４１８がコードラベリングタイプのソフトウェア開発ツールからなることを指定する場合のターゲットソースコード２１０の予測ラベル４００ａ、またはツールタイプインジケータ２０５が、ソフトウェア開発ツール４１８がコード変形タイプのソフトウェア開発ツールに対応することを指定する場合の訓練ソースコード３１０の予測コード変形４００ｂのうちの１つを含む。訓練ソースコード３１０の予測ラベル４００ａは、ターゲットソースコードの複雑さの予測レベル、ターゲットソースコードの予測品質、ターゲットソースコードの予測テスト要件、またはターゲットソースコードの予測難易度評価のうちの少なくとも１つを含んでもよい。ターゲットソースコードの予測コード変形は、ターゲットソースコードの実行可能な、ターゲットソースコード内のビルドエラーを修正する更新済みのターゲットソースコード、ターゲットソースコードの改訂、またはターゲットソースコードを置換するための推奨される置換ソースコードの少なくとも１つを含んでもよい。
At
動作５０８で、方法５００は、データ処理ハードウェア１４４が、コードインサイト４００を開発者デバイス２０４に送信することを含む。コードインサイト４００は、開発者デバイス２０４によって受信されると、開発者デバイス２０４上で実行されるグラフィカルユーザインターフェイス２２０に、開発者デバイス２０４の表示画面上にコードインサイト４００を表示させる。
At act 508 ,
図６は、本明細書で説明するシステムおよび方法（たとえば、方法５００）を実施するために使用され得るコンピューティングデバイス６００の例を示す概略図である。コンピューティングデバイス６００は、ラップトップ、デスクトップ、ワークステーション、パーソナルデジタルアシスタント、サーバ、ブレードサーバ、メインフレーム、および他の適切なコンピュータなどのさまざまな形態のデジタルコンピュータを表すことを意図している。ここに示された構成要素、それらの接続および関係、ならびにそれらの特徴は、例示に過ぎないことを意味しており、本明細書で説明および／または請求される発明の実装を制限するものでない。
FIG. 6 is a schematic diagram illustrating an
コンピューティングデバイス６００は、プロセッサ６１０（データ処理ハードウェアともいう）、メモリ６２０（メモリハードウェアともいう）、ストレージデバイス６３０、メモリ６２０および高速拡張ポート６５０に接続する高速インターフェイス／コントローラ６４０、ならびに低速バス６７０およびストレージデバイス６３０に接続する低速インターフェイス／コントローラ６６０を含む。構成要素６１０，６２０，６３０，６４０，６５０および６６０の各々は、各種バスを使用して相互接続され、共通のマザーボードに、または適宜他の態様で搭載することができる。プロセッサ６１０は、高速インターフェイス６４０に結合されたディスプレイ６８０などの外部入出力デバイスにグラフィカルユーザインターフェイス（ＧＵＩ）のグラフィック情報を表示するために、メモリ６２０またはストレージデバイス６３０に格納された命令を含む、コンピューティングデバイス６００内で実行するための命令を処理することが可能である。他の実装では、複数のプロセッサおよび／または複数のバスが、複数のメモリおよび複数のタイプのメモリと共に、適宜使用されてもよい。また、複数のコンピューティングデバイス６００が接続され、各デバイスが必要な動作の一部を提供してもよい（たとえば、サーババンク、ブレードサーバのグループ、またはマルチプロセッサシステムとして）。
メモリ６２０は、コンピューティングデバイス６００内の情報を非一時的に格納する。メモリ６２０は、コンピュータ読取可能媒体、揮発性メモリユニット（複数可）、または不揮発性メモリユニット（複数可）でもよい。非一時的なメモリ６２０は、コンピューティングデバイス６００による使用のために、プログラム（たとえば、命令のシーケンス）またはデータ（たとえば、プログラム状態情報）を一時的または恒久的に格納するために使用される物理デバイスでもよい。不揮発性メモリの例には、フラッシュメモリおよびリードオンリーメモリ（ＲＯＭ）／プログラマブルリードオンリーメモリ（ＰＲＯＭ）／消去可能プログラマブルリードオンリーメモリ（ＥＰＲＯＭ）／電子的消去可能プログラマブルリードオンリーメモリ（ＥＥＰＲＯＭ）（たとえば、ブートプログラムといった、ファームウェアに通常使用される）があるが、これらに限定されるわけではない。揮発性メモリの例としては、ランダムアクセスメモリ（ＲＡＭ）、ダイナミックランダムアクセスメモリ（ＤＲＡＭ）、スタティックランダムアクセスメモリ（ＳＲＡＭ）、相変化メモリ（ＰＣＭ）、およびディスクまたはテープがあるが、これらに限定されるわけではない。
ストレージデバイス６３０は、コンピューティングデバイス６００のための大容量記憶装置を提供することができる。いくつかの実装では、ストレージデバイス６３０は、コンピュータ読取可能媒体である。さまざまな異なる実装において、ストレージデバイス６３０は、フロッピー（登録商標）ディスク装置、ハードディスク装置、光ディスク装置、またはテープ装置、フラッシュメモリもしくは他の同様の固体メモリ装置、または記憶領域ネットワークもしくは他の構成における装置を含む装置のアレイでもよい。別の実装では、コンピュータプログラム製品は、情報担体において有形に具現化される。コンピュータプログラム製品は、実行されると、上述したような１つ以上の方法を実行する命令を含む。情報担体は、メモリ６２０、ストレージデバイス６３０、もしくはプロセッサ６１０上のメモリなどの、コンピュータまたは機械読取可能媒体である。
高速コントローラ６４０は、コンピューティングデバイス６００の帯域幅集約的な動作を管理し、低速コントローラ６６０は、より低い帯域幅集約的な動作を管理する。このような機能の割り当ては例示に過ぎない。いくつかの実装では、高速コントローラ６４０は、メモリ６２０、ディスプレイ６８０（たとえば、グラフィックプロセッサまたはアクセラレータを介して）、およびさまざまな拡張カード（図示せず）を受け付けることができる高速拡張ポート６５０に結合される。いくつかの実装では、低速コントローラ６６０は、ストレージデバイス６３０および低速拡張ポート６９０に結合される。さまざまな通信ポート（たとえば、ＵＳＢ、Ｂｌｕｅｔｏｏｔｈ（登録商標）、イーサネット（登録商標）、無線イーサネット）を含み得る低速拡張ポート６９０は、キーボード、ポインティングデバイス、スキャナなどの１つ以上の入出力デバイス、またはスイッチもしくはルータなどのネットワークデバイスに、たとえばネットワークアダプタを介して結合されてもよい。
コンピューティングデバイス６００は、図に示すように、多数の異なる形態で実装されてもよい。たとえば、標準的なサーバ６００ａとして、もしくはそのようなサーバ６００ａのグループ内で複数回、ラップトップコンピュータ６００ｂとして、またはラックサーバシステム６００ｃの一部として、実装されてもよい。
本明細書に記載されたシステムおよび技術のさまざまな実装は、デジタル電子および／または光回路、集積回路、特別に設計された特定用途向け集積回路（ａｐｐｌｉｃａｔｉｏｎ ｓｐｅｃｉｆｉｃ ｉｎｔｅｇｒａｔｅｄ ｃｉｒｃｕｉｔ：ＡＳＩＣ）、コンピュータハードウェア、ファームウェア、ソフトウェア、および／またはそれらの組合わせで実現することが可能である。これらのさまざまな実装は、データおよび命令を記憶システムに対して送受信するように結合された、特殊用途または汎用用途であってもよい少なくとも１つのプログラマブルプロセッサ、少なくとも１つの入力デバイス、および少なくとも１つの出力デバイスを含むプログラマブルシステム上で実行可能および／または解釈可能な１つ以上のコンピュータプログラムにおける実装を含み得る。 Various implementations of the systems and techniques described herein include digital electronic and/or optical circuits, integrated circuits, specially designed application specific integrated circuits (ASICs), computer hardware, It can be implemented in firmware, software, and/or combinations thereof. These various implementations include at least one programmable processor, which may be special or general purpose, at least one input device, and at least one May include implementation in one or more computer programs executable and/or interpretable on a programmable system including an output device.
これらのコンピュータプログラム（プログラム、ソフトウェア、ソフトウェアアプリケーション、またはコードとしても知られている）は、プログラマブルプロセッサ用の機械命令を含み、高レベルの手続き型および／またはオブジェクト指向プログラミング言語、および／またはアセンブリ／機械言語で実装され得る。本明細書で使用される場合、「機械読取可能媒体」および「コンピュータ読取可能媒体」という用語は、機械命令を機械読取可能信号として受信する機械読取可能媒体を含む、プログラマブルプロセッサに機械命令および／またはデータを提供するために使用される任意のコンピュータプログラム製品、非一時的なコンピュータ読取可能媒体、装置および／またはデバイス（たとえば、磁気ディスク、光ディスク、メモリ、プログラマブル論理デバイス（Ｐｒｏｇｒａｍｍａｂｌｅ Ｌｏｇｉｃ Ｄｅｖｉｃｅ：ＰＬＤ）を指す。「機械読取可能信号」という用語は、機械命令および／またはデータをプログラマブルプロセッサに提供するために使用されるあらゆる信号を指す。 These computer programs (also known as programs, software, software applications, or code) contain machine instructions for programmable processors, are written in high-level procedural and/or object-oriented programming languages, and/or assembly/ It can be implemented in machine language. As used herein, the terms "machine-readable medium" and "computer-readable medium" refer to machine instructions and/or instructions to a programmable processor, including any machine-readable medium that receives machine instructions as machine-readable signals. or any computer program product, non-transitory computer-readable medium, apparatus and/or device (e.g., magnetic disk, optical disk, memory, Programmable Logic Device (PLD)) used to provide data The term "machine-readable signal" refers to any signal that is used to provide machine instructions and/or data to a programmable processor.
本明細書に記載された処理および論理フローは、１つ以上のコンピュータプログラムを実行する１つ以上のプログラマブルプロセッサによって実行することができ、入力データに対して動作し、出力を生成することによって、特徴を実行する。また、処理および論理フローは、特殊目的論理回路、たとえば、フィールドプログラマブルゲートアレイ（ＦＰＧＡ）またはＡＳＩＣ（特定用途向け集積回路）によって実行することも可能である。コンピュータプログラムの実行に適したプロセッサには、例として、汎用マイクロプロセッサと特殊目的マイクロプロセッサとの両方、および任意の種類のデジタルコンピュータの任意の１つ以上のプロセッサが含まれる。一般に、プロセッサは、読取り専用メモリまたはランダムアクセスメモリまたはその両方から、命令およびデータを受信することになる。コンピュータの本質的な要素は、命令を実行するためのプロセッサと、命令およびデータを格納するための１つ以上のメモリデバイスとである。一般に、コンピュータは、データを格納するための１つ以上の大容量記憶装置、たとえば、磁気ディスク、光磁気ディスク、もしくは光ディスクを備える、またはデータを格納するための１つ以上の大容量記憶装置、たとえば、磁気ディスク、光磁気ディスク、もしくは光ディスクに対するデータの受信、もしくは転送、もしくはその両方を行うように動作可能に結合されることになる。しかしながら、コンピュータは、そのようなデバイスを有する必要はない。コンピュータプログラム命令およびデータを格納するのに適したコンピュータ読取可能媒体は、例として、半導体メモリデバイス、たとえばＥＰＲＯＭ，ＥＥＰＲＯＭおよびフラッシュメモリデバイス；磁気ディスク、たとえば内蔵ハードディスクまたは取外し可能ディスク；光磁気ディスク；ならびにＣＤ ＲＯＭおよびＤＶＤ－ＲＯＭディスクなどのすべての形式の不揮発メモリ、媒体およびメモリ装置を含む。プロセッサとメモリとを、特殊目的論理回路によって補完する、またはその中に組込むことが可能である。 The processes and logic flows described herein can be performed by one or more programmable processors executing one or more computer programs to operate on input data and generate output, thereby Execute the feature. The processing and logic flow may also be performed by special purpose logic circuits, such as Field Programmable Gate Arrays (FPGAs) or ASICs (Application Specific Integrated Circuits). Processors suitable for the execution of a computer program include, by way of example, both general and special purpose microprocessors, and any one or more processors of any kind of digital computer. Generally, a processor will receive instructions and data from read-only memory and/or random-access memory. The essential elements of a computer are a processor for executing instructions and one or more memory devices for storing instructions and data. Generally, a computer includes one or more mass storage devices, such as magnetic, magneto-optical, or optical discs, for storing data, or one or more mass storage devices for storing data; For example, it would be operably coupled to receive and/or transfer data to a magnetic, magneto-optical, or optical disk. However, a computer need not have such devices. Computer readable media suitable for storing computer program instructions and data include, by way of example, semiconductor memory devices such as EPROM, EEPROM and flash memory devices; magnetic disks such as internal hard disks or removable disks; magneto-optical disks; Includes all forms of non-volatile memory, media and memory devices such as CD ROM and DVD-ROM discs. The processor and memory may be supplemented by, or incorporated within, special purpose logic circuitry.
ユーザとの相互作用を提供するために、本開示の１つ以上の態様は、ユーザに情報を表示するための表示デバイス、たとえばＣＲＴ（陰極線管）、ＬＣＤ（液晶ディスプレイ）モニタ、またはタッチスクリーンと、任意に、ユーザがコンピュータに入力を提供できるキーボードおよびポインティングデバイス、たとえばマウスまたはトラックボールを有するコンピュータ上で実施することができる。他の種類のデバイスも、ユーザとの相互作用を提供するために使用可能である。たとえば、ユーザに提供されるフィードバックは、視覚フィードバック、聴覚フィードバック、または触覚フィードバックなどの任意の形式の感覚フィードバックとすることができ、ユーザからの入力は、音響、音声、または触覚入力などの任意の形式で受信することができる。さらに、コンピュータは、ユーザが使用するデバイスに対して文書を送受信することによって、たとえば、ウェブブラウザから受信した要求に応答して、ユーザのクライアントデバイス上のウェブブラウザにウェブページを送信することによって、ユーザと対話することができる。 To provide for user interaction, one or more aspects of the present disclosure include a display device, such as a CRT (cathode ray tube), LCD (liquid crystal display) monitor, or touch screen, for displaying information to a user. , optionally on a computer having a keyboard and pointing device, such as a mouse or a trackball, through which a user can provide input to the computer. Other types of devices can also be used to provide user interaction. For example, the feedback provided to the user can be any form of sensory feedback, such as visual, auditory, or tactile feedback, and the input from the user can be any form of acoustic, speech, or tactile input. can be received in the form In addition, the computer can be used by sending and receiving documents to and from the device used by the user, e.g., by sending web pages to the web browser on the user's client device in response to requests received from the web browser. Can interact with the user.
多数の実装について説明した。それにもかかわらず、本開示の精神および範囲から逸脱することなく、さまざまな変更がなされ得ることが理解されよう。したがって、他の実装は、以下の特許請求の範囲内である。 A number of implementations have been described. Nevertheless, it will be understood that various changes can be made without departing from the spirit and scope of the disclosure. Accordingly, other implementations are within the scope of the following claims.
Claims (22)
データ処理ハードウェアにおいて、ターゲットソースコードのコードインサイトを要求するコードインサイト要求を、ソフトウェア開発ツールをビルドするために前記ターゲットソースコードを使用する開発者に関連付けられた開発者デバイスから受信することを備え、前記コードインサイト要求は、
ターゲットコードベースからのターゲットソースコードスニペットのペアを含む前記ターゲットソースコードと、
前記ソフトウェア開発ツールがコードラベリングタイプのソフトウェア開発ツールまたはコード変形タイプのソフトウェア開発ツールのうちの１つからなることを指定するツールタイプインジケータとを含み、前記方法はさらに、
前記データ処理ハードウェアが、前記ツールタイプインジケータに基づいて、前記コードラベリングタイプのソフトウェア開発ツールまたは前記コード変形タイプのソフトウェア開発ツールのうちの指定された前記１つに関連付けられた訓練ソースコードで訓練された機械学習モデルを取得することと、
前記データ処理ハードウェアが、前記機械学習モデルを使用して、前記ターゲットソースコードの前記コードインサイトを生成することとを備え、前記ターゲットソースコードの前記コードインサイトは、
前記ツールタイプインジケータが、前記ソフトウェア開発ツールが前記コードラベリングタイプのソフトウェア開発ツールからなることを指定する場合の前記ターゲットソースコードの予測ラベル、または
前記ツールタイプインジケータが、前記ソフトウェア開発ツールが前記コード変形タイプのソフトウェア開発ツールからなることを指定する場合の前記ターゲットソースコードの予測コード変形のうちの１つを含み、前記方法はさらに、
前記データ処理ハードウェアが、前記コードインサイトを前記開発者デバイスに送信することを備え、前記コードインサイトは、前記開発者デバイスによって受信されると、前記開発者デバイスで実行されているグラフィカルユーザインターフェイスに、前記コードインサイトを前記開発者デバイスの表示画面に表示させることを備え、
前記機械学習モデルを使用して、前記ターゲットソースコードの前記コードインサイトを生成することは、
前記ターゲットソースコードスニペットのペア内のターゲットソースコードスニペットごとに、対応するターゲットソースコードスニペットから抽出されるターゲット特徴のセットを、特徴入力として受信するように構成された前記機械学習モデルを使用して、前記対応するターゲットソースコードスニペットのベクトル表現を生成することと、
前記ベクトル表現に基づいて、前記ターゲットソースコードスニペットのペアの間のベクトル空間距離を求めることと、
前記ベクトル空間距離が距離閾値を満たす場合、前記ターゲットソースコードスニペットのペアは互いの複製であると判断することとを含む、方法。 a method ,
In data processing hardware , a code insight request requesting code insight for target source code is sent to a developer device associated with a developer using said target source code to build a software development tool. said Code Insight request comprising:
said target source code comprising pairs of target source code snippets from a target codebase;
a tool type indicator designating that the software development tool consists of one of a code labeling type software development tool or a code transformation type software development tool, the method further comprising:
the data processing hardware in training source code associated with the designated one of the code labeling type software development tool or the code transformation type software development tool based on the tool type indicator; obtaining a trained machine learning model ;
said data processing hardware using said machine learning model to generate said code insight for said target source code , said code insight for said target source code comprising:
a predicted label of the target source code when the tool type indicator specifies that the software development tool consists of the software development tool of the code labeling type; or one of predicted code transformations of said target source code when specifying that said development tool consists of said code transformation type of software development tool, said method further comprising:
The data processing hardware comprises transmitting the code insight to the developer device , the code insight being executed on the developer device upon receipt by the developer device. causing a graphical user interface to display the code insight on a display screen of the developer device ;
Generating the code insight for the target source code using the machine learning model includes:
For each target source code snippet in said target source code snippet pair, using said machine learning model configured to receive as feature input a set of target features extracted from the corresponding target source code snippet. , generating a vector representation of the corresponding target source code snippet;
determining vector spatial distances between pairs of the target source code snippets based on the vector representation;
determining that the pair of target source code snippets are duplicates of each other if the vector space distance satisfies a distance threshold .
前記機械学習モデルは、
前記ターゲット特徴のセットを入力として受信し、
前記ターゲットソースコードの前記コードインサイトを出力として生成するように構成されている、請求項１に記載の方法。 further comprising the data processing hardware extracting from the target source code a set of target features corresponding to a syntactic representation of the target source code suitable for input to the machine learning model ;
The machine learning model is
receiving as input the set of target features ;
2. The method of claim 1, configured to generate the code insight of the target source code as an output .
前記データ処理ハードウェアと通信しているメモリハードウェアに格納されているソースコードリポジトリから、前記コードラベリングタイプのソフトウェア開発ツールまたは前記コード変形タイプのソフトウェア開発ツールのうちの指定された前記１つに関連付けられた前記訓練ソースコードを選択し、かつ
機械学習モデル生成器を使用して、選択された前記訓練ソースコードで前記機械学習モデルを訓練することによって、前記コードインサイト要求を受信することに応答して、前記機械学習モデルを生成することを含む、請求項１に記載の方法。 Obtaining the machine learning model includes:
the designated one of the code labeling type software development tool or the code transformation type software development tool from a source code repository stored in memory hardware in communication with the data processing hardware; selecting the training source code associated with one, and training the machine learning model with the selected training source code using a machine learning model generator . 2. The method of claim 1 , comprising generating the machine learning model in response to receiving .
前記データ処理ハードウェアが、前記機械学習モデルを、前記人間が生成したコメントとペアにされた前記訓練ソースコードを含む前記訓練例で訓練することとをさらに備える、請求項１に記載の方法。 said data processing hardware pairing human-generated comments based on said training source code review cycle from a source code repository stored in memory hardware in communication with said data processing hardware; identifying training examples of the training source code that have been processed;
2. The method of claim 1 , wherein the data processing hardware further comprises training the machine learning model with the training examples comprising the training source code paired with the human-generated comments. law.
前記データ処理ハードウェアと通信しているメモリハードウェアに格納されている訓練ソースコードスニペットのプールの類似スコアを求めることを含み、前記類似スコアの各々は、対応する訓練ソースコードスニペットに関連付けられており、かつ、前記ターゲットソースコードの前記ベクトル表現と、前記対応する訓練コードスニペットのそれぞれのベクトル表現との類似レベルを示し、前記生成することはさらに、
類似閾値を満たす類似スコアを有する前記訓練ソースコードスニペットのプールから、１つ以上の訓練ソースコードスニペットを、前記ターゲットソースコードのミューテーションに対応するものとして識別することを含む、請求項１に記載の方法。 Generating the code insight for the target source code using the machine learning model includes :
determining a similarity score for a pool of training source code snippets stored in memory hardware in communication with the data processing hardware , each of the similarity scores being associated with a corresponding training source code snippet . and indicating a level of similarity between the vector representation of the target source code and each vector representation of the corresponding training code snippet ;
2. The method of claim 1 , comprising identifying one or more training source code snippets from the pool of training source code snippets having a similarity score that satisfies a similarity threshold as corresponding to mutations of the target source code . method.
前記ターゲットソースコードの複雑さの予測レベル、
前記ターゲットソースコードの予測品質、
前記ターゲットソースコードの予測テスト要件、または
前記ターゲットソースコードの予測難易度評価のうちの少なくとも１つを含む、請求項１に記載の方法。 The predicted label of the training source code is
an expected level of complexity of said target source code ;
predicted quality of said target source code ;
2. The method of claim 1 , comprising at least one of: a predictive testing requirement for the target source code ; or a predictive difficulty rating for the target source code .
前記ターゲットソースコード内のビルドエラーを修正する更新済みターゲットソースコード、
前記ターゲットソースコードから解釈／コンパイルされた実行可能なコード、
前記ターゲットソースコードの改訂、または
前記ターゲットソースコードを置換するための推奨される置換ソースコードのうちの少なくとも１つを含む、請求項１に記載の方法。 The predicted code variant of the target source code comprises:
updated target source code that corrects build errors in said target source code;
executable code interpreted/compiled from said target source code ;
2. The method of claim 1 , comprising at least one of : a revision of the target source code ; or a recommended replacement source code for replacing the target source code .
データ処理ハードウェアと、
前記データ処理ハードウェアと通信しており、かつ、前記データ処理ハードウェアで実行されると、前記データ処理ハードウェアに動作を行わせる命令を格納したメモリハードウェアとを備え、前記動作は、
ターゲットソースコードのコードインサイトを要求するコードインサイト要求を、ソフトウェア開発ツールをビルドするために前記ターゲットソースコードを使用する開発者に関連付けられた開発者デバイスから受信することを含み、前記コードインサイト要求は、
ターゲットコードベースからのターゲットソースコードスニペットのペアを含む前記ターゲットソースコードと、
前記ソフトウェア開発ツールがコードラベリングタイプのソフトウェア開発ツールまたはコード変形タイプのソフトウェア開発ツールのうちの１つからなることを指定するツールタイプインジケータとを含み、前記動作はさらに、
前記ツールタイプインジケータに基づいて、前記コードラベリングタイプのソフトウェア開発ツールまたは前記コード変形タイプのソフトウェア開発ツールのうちの指定された前記１つに関連付けられた訓練ソースコードで訓練された機械学習モデルを取得することと、
前記機械学習モデルを使用して、前記ターゲットソースコードの前記コードインサイトを生成することとを含み、前記ターゲットソースコードの前記コードインサイトは、
前記ツールタイプインジケータが、前記ソフトウェア開発ツールが前記コードラベリングタイプのソフトウェア開発ツールからなることを指定する場合の前記ターゲットソースコードの予測ラベル、または
前記ツールタイプインジケータが、前記ソフトウェア開発ツールが前記コード変形タイプのソフトウェア開発ツールからなることを指定する場合の前記ターゲットソースコードの予測コード変形のうちの１つを含み、前記動作はさらに、
前記コードインサイトを前記開発者デバイスに送信することを含み、前記コードインサイトは、前記開発者デバイスによって受信されると、前記開発者デバイスで実行されているグラフィカルユーザインターフェイスに、前記コードインサイトを前記開発者デバイスの表示画面に表示させることを含み、
前記機械学習モデルを使用して、前記ターゲットソースコードの前記コードインサイトを生成することは、
前記ターゲットソースコードスニペットのペア内のターゲットソースコードスニペットごとに、対応するターゲットソースコードスニペットから抽出されるターゲット特徴のセットを、特徴入力として受信するように構成された前記機械学習モデルを使用して、前記対応するターゲットソースコードスニペットのベクトル表現を生成することと、
前記ベクトル表現に基づいて、前記ターゲットソースコードスニペットのペアの間のベクトル空間距離を求めることと、
前記ベクトル空間距離が距離閾値を満たす場合、前記ターゲットソースコードスニペットのペアは互いの複製であると判断することとを含む、システム。 a system ,
data processing hardware ;
memory hardware in communication with the data processing hardware and containing instructions that, when executed by the data processing hardware , cause the data processing hardware to perform an operation, the operation comprising:
receiving a code insight request requesting code insight for target source code from a developer device associated with a developer using said target source code to build a software development tool. , the code insight request is
said target source code comprising pairs of target source code snippets from a target codebase;
a tool type indicator that specifies that the software development tool consists of one of a code labeling type software development tool or a code transformation type software development tool , the operation further comprising:
trained with training source code associated with the specified one of the code labeling type software development tool or the code transformation type software development tool based on the tool type indicator; obtaining a machine learning model ;
generating the code insight for the target source code using the machine learning model , the code insight for the target source code comprising:
a predicted label of the target source code when the tool type indicator specifies that the software development tool consists of the software development tool of the code labeling type; or comprising one of predictive code transformations of said target source code when specifying that said development tool consists of said code transformation type software development tool, said operation further comprising:
transmitting the code insight to the developer device, wherein the code insight , when received by the developer device , displays a graphical user interface running on the developer device ; displaying the code insight on a display screen of the developer device ;
Generating the code insight for the target source code using the machine learning model includes:
For each target source code snippet in said target source code snippet pair, using said machine learning model configured to receive as feature input a set of target features extracted from the corresponding target source code snippet. , generating a vector representation of the corresponding target source code snippet;
determining vector spatial distances between pairs of the target source code snippets based on the vector representation;
determining that the pair of target source code snippets are duplicates of each other if the vector space distance satisfies a distance threshold .
前記機械学習モデルは、
前記ターゲット特徴のセットを入力として受信し、
前記ターゲットソースコードの前記コードインサイトを出力として生成するように構成されている、請求項１２に記載のシステム。 The acts further include extracting from the target source code a set of target features corresponding to a syntactic representation of the target source code suitable for input to the machine learning model ;
The machine learning model is
receiving as input the set of target features ;
13. The system of claim 12 , configured to generate the code insight of the target source code as output .
前記メモリハードウェアに格納されているソースコードリポジトリから、前記コードラベリングタイプのソフトウェア開発ツールまたは前記コード変形タイプのソフトウェア開発ツールのうちの指定された前記１つに関連付けられた前記訓練ソースコードを選択し、かつ
機械学習モデル生成器を使用して、選択された前記訓練ソースコードで前記機械学習モデルを訓練することによって、前記コードインサイト要求を受信することに応答して、前記機械学習モデルを生成することを含む、請求項１２に記載のシステム。 Obtaining the machine learning model includes:
associated with the specified one of the code labeling type software development tool or the code transformation type software development tool from a source code repository stored in the memory hardware; selecting the training source code ; and training the machine learning model with the selected training source code using a machine learning model generator in response to receiving the code insight request. to generate the machine learning model .
前記メモリハードウェアに格納されているソースコードリポジトリから、前記訓練ソースコードのレビューサイクルに基づいて人間が生成したコメントとペアにされた前記訓練ソースコードの訓練例を識別することと、
前記機械学習モデルを、前記人間が生成したコメントとペアにされた前記訓練ソースコードを含む前記訓練例で訓練することとを含む、請求項１２に記載のシステム。 Said operation further comprises:
identifying training examples of the training source code paired with human-generated comments based on a review cycle of the training source code from a source code repository stored in the memory hardware ;
13. The system of claim 12 , comprising training the machine learning model with the training examples comprising the training source code paired with the human-generated comments .
前記メモリハードウェアに格納されている訓練ソースコードスニペットのプールの類似スコアを求めることを含み、各類似スコアは、対応する訓練コードスニペットに関連付けられており、かつ、前記ターゲットソースコードの前記ベクトル表現と、前記対応する訓練コードスニペットのそれぞれのベクトル表現との類似レベルを示し、さらに、
類似閾値を満たす類似スコアを有する前記訓練ソースコードスニペットのプールから、１つ以上の訓練ソースコードスニペットを、前記ターゲットソースコードのミューテーションに対応するものとして識別することを含む、請求項１２に記載のシステム。 Generating the code insight for the target source code using the machine learning model includes :
determining a similarity score for a pool of training source code snippets stored in the memory hardware , each similarity score being associated with a corresponding training code snippet ; and indicating a level of similarity between a representation and each vector representation of said corresponding training code snippet;
13. The method of claim 12 , comprising identifying one or more training source code snippets from the pool of training source code snippets having a similarity score that satisfies a similarity threshold as corresponding to mutations of the target source code . system.
前記ターゲットソースコードの複雑さの予測レベル、
前記ターゲットソースコードの予測品質、
前記ターゲットソースコードの予測テスト要件、または
前記ターゲットソースコードの予測難易度評価のうちの少なくとも１つを含む、請求項１２に記載のシステム。 The predicted label of the training source code is
an expected level of complexity of said target source code ;
predicted quality of said target source code ;
13. The system of claim 12 , comprising at least one of: a predictive testing requirement for the target source code ; or a predictive difficulty rating for the target source code .
前記ターゲットソースコード内のビルドエラーを修正する更新済みターゲットソースコード、
前記ターゲットソースコードから解釈／コンパイルされた実行可能なコード、
前記ターゲットソースコードの改訂、または
前記ターゲットソースコードを置換するための推奨される置換ソースコードのうちの少なくとも１つを含む、請求項１２に記載のシステム。 The predicted code variant of the target source code comprises:
updated target source code that corrects build errors in said target source code;
executable code interpreted/compiled from said target source code ;
13. The system of claim 12 , comprising at least one of: a revision of the target source code; or a recommended replacement source code for replacing the target source code .
Priority Applications (1)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
JP2023012833A JP2023065366A (en) | 2019-11-06 | 2023-01-31 | Automatically generating machine learning models for software tools that operate on source code |
Applications Claiming Priority (3)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US16/676,032 US11150877B2 (en) | 2019-11-06 | 2019-11-06 | Automatically generating machine learning models for software tools that operate on source code |
US16/676,032 | 2019-11-06 | ||
PCT/US2020/059277 WO2021092283A1 (en) | 2019-11-06 | 2020-11-06 | Automatically generating machine learning models for software tools that operate on source code |
Related Child Applications (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
JP2023012833A Division JP2023065366A (en) | 2019-11-06 | 2023-01-31 | Automatically generating machine learning models for software tools that operate on source code |
Publications (2)
Publication Number | Publication Date |
---|---|
JP2022546636A JP2022546636A (en) | 2022-11-04 |
JP7220833B2 true JP7220833B2 (en) | 2023-02-10 |
Family
ID=73646532
Family Applications (2)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
JP2022526211A Active JP7220833B2 (en) | 2019-11-06 | 2020-11-06 | Automatic generation of machine learning models for software tools that run on source code |
JP2023012833A Pending JP2023065366A (en) | 2019-11-06 | 2023-01-31 | Automatically generating machine learning models for software tools that operate on source code |
Family Applications After (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
JP2023012833A Pending JP2023065366A (en) | 2019-11-06 | 2023-01-31 | Automatically generating machine learning models for software tools that operate on source code |
Country Status (6)
Country | Link |
---|---|
US (2) | US11150877B2 (en) |
EP (1) | EP4055474A1 (en) |
JP (2) | JP7220833B2 (en) |
KR (2) | KR20220127376A (en) |
CN (1) | CN114616543A (en) |
WO (1) | WO2021092283A1 (en) |
Families Citing this family (13)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US11385940B2 (en) | 2018-10-26 | 2022-07-12 | EMC IP Holding Company LLC | Multi-cloud framework for microservice-based applications |
US11533317B2 (en) * | 2019-09-30 | 2022-12-20 | EMC IP Holding Company LLC | Serverless application center for multi-cloud deployment of serverless applications |
US11416245B2 (en) * | 2019-12-04 | 2022-08-16 | At&T Intellectual Property I, L.P. | System and method for syntax comparison and analysis of software code |
US11334347B2 (en) * | 2020-05-04 | 2022-05-17 | International Business Machines Corporation | Cognitive build recovery from inter-code commit issues |
US11593678B2 (en) * | 2020-05-26 | 2023-02-28 | Bank Of America Corporation | Green artificial intelligence implementation |
US11494285B1 (en) * | 2020-09-30 | 2022-11-08 | Amazon Technologies, Inc. | Static code analysis tool and configuration selection via codebase analysis |
JP7426493B2 (en) | 2021-06-22 | 2024-02-01 | ベイジン バイドゥ ネットコム サイエンス テクノロジー カンパニー リミテッド | Auxiliary processing methods, equipment, electronic equipment, storage media and programs for software development |
US20230259359A1 (en) * | 2022-02-14 | 2023-08-17 | Jpmorgan Chase Bank , N.A. | Systems and method for automated code analysis and tagging |
KR102519639B1 (en) * | 2021-06-30 | 2023-04-06 | 삼성에스디에스 주식회사 | Method for providing code inspection interface, and apparatus implementing the same method |
CN113741964A (en) * | 2021-08-01 | 2021-12-03 | 北京工业大学 | Data enhancement method oriented to code readability evaluation |
US20230185715A1 (en) * | 2021-12-13 | 2023-06-15 | Relativity Oda Llc | Queue optimization via predicitve caching in cloud computing |
US11847436B2 (en) * | 2022-01-25 | 2023-12-19 | Hewlett Packard Enterprise Development Lp | Machine learning (ML) model-based compiler |
CN115774565B (en) * | 2023-02-10 | 2023-04-18 | 成都数联云算科技有限公司 | Single code warehouse construction method, system, device and medium |
Citations (2)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
JP2006338399A (en) | 2005-06-02 | 2006-12-14 | Canon Inc | Program developing device, program development software and storage medium |
CN109739494A (en) | 2018-12-10 | 2019-05-10 | 复旦大学 | A kind of API based on Tree-LSTM uses code building formula recommended method |
Family Cites Families (25)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
JP2003263255A (en) * | 2002-03-11 | 2003-09-19 | Fujitsu Ltd | Program for performing communication |
US7188345B2 (en) * | 2003-03-19 | 2007-03-06 | International Business Machines Corporation | Installation of data-driven business integration adapters |
US8775526B2 (en) * | 2006-01-16 | 2014-07-08 | Zlango Ltd. | Iconic communication |
US20080295085A1 (en) * | 2007-05-25 | 2008-11-27 | Microsoft Corporation | Integrated code review tool |
US9286063B2 (en) * | 2012-02-22 | 2016-03-15 | Veracode, Inc. | Methods and systems for providing feedback and suggested programming methods |
US9201646B2 (en) * | 2013-01-05 | 2015-12-01 | Vmware, Inc. | Automatic code review and code reviewer recommendation |
US9904672B2 (en) * | 2015-06-30 | 2018-02-27 | Facebook, Inc. | Machine-translation based corrections |
US10990363B2 (en) * | 2015-11-12 | 2021-04-27 | Micro Focus Llc | Classification models for binary code data |
US20170212829A1 (en) * | 2016-01-21 | 2017-07-27 | American Software Safety Reliability Company | Deep Learning Source Code Analyzer and Repairer |
US10838849B2 (en) * | 2016-03-08 | 2020-11-17 | International Business Machines Corporation | Analyzing software test failures using natural language processing and machine learning |
KR102092721B1 (en) * | 2016-03-23 | 2020-04-23 | 포그혼 시스템스 인코포레이티드 | Configuration of pattern-driven reaction in real-time data flow programming |
US10282275B2 (en) * | 2016-09-22 | 2019-05-07 | Microsoft Technology Licensing, Llc | Method and system for managing code |
US20180150742A1 (en) * | 2016-11-28 | 2018-05-31 | Microsoft Technology Licensing, Llc. | Source code bug prediction |
US11205103B2 (en) * | 2016-12-09 | 2021-12-21 | The Research Foundation for the State University | Semisupervised autoencoder for sentiment analysis |
US10310821B2 (en) * | 2017-06-03 | 2019-06-04 | Apple Inc. | Integration of learning models into a software development system |
US11720804B2 (en) * | 2018-01-21 | 2023-08-08 | Microsoft Technology Licensing, Llc. | Data-driven automatic code review |
US10754645B2 (en) * | 2018-03-02 | 2020-08-25 | Microsoft Technology Licensing, Llc | Displaying results of a codebase analysis service |
US10860314B2 (en) * | 2018-05-10 | 2020-12-08 | Microsoft Technology Licensing, Llc | Computing elapsed coding time |
US11436056B2 (en) * | 2018-07-19 | 2022-09-06 | EMC IP Holding Company LLC | Allocation of shared computing resources using source code feature extraction and clustering-based training of machine learning models |
US10831448B2 (en) * | 2018-08-30 | 2020-11-10 | Accenture Global Solutions Limited | Automated process analysis and automation implementation |
US11501191B2 (en) * | 2018-09-21 | 2022-11-15 | International Business Machines Corporation | Recommending machine learning models and source codes for input datasets |
US10725748B2 (en) * | 2018-11-19 | 2020-07-28 | Microsoft Technology Licensing, Llc | Extracting program features for assisting software development |
US11157272B2 (en) * | 2019-04-23 | 2021-10-26 | Microsoft Technology Licensing, Llc. | Automatic identification of appropriate code reviewers using machine learning |
US20200410390A1 (en) * | 2019-06-26 | 2020-12-31 | Microsoft Technology Licensing, Llc. | Machine learning retraining |
US11243746B2 (en) * | 2019-07-01 | 2022-02-08 | X Development Llc | Learning and using programming styles |
-
2019
- 2019-11-06 US US16/676,032 patent/US11150877B2/en active Active
-
2020
- 2020-11-06 KR KR1020227030969A patent/KR20220127376A/en not_active Application Discontinuation
- 2020-11-06 EP EP20816779.1A patent/EP4055474A1/en active Pending
- 2020-11-06 WO PCT/US2020/059277 patent/WO2021092283A1/en unknown
- 2020-11-06 KR KR1020227017291A patent/KR102443654B1/en active Application Filing
- 2020-11-06 JP JP2022526211A patent/JP7220833B2/en active Active
- 2020-11-06 CN CN202080076171.6A patent/CN114616543A/en active Pending
-
2021
- 2021-10-05 US US17/450,068 patent/US11977859B2/en active Active
-
2023
- 2023-01-31 JP JP2023012833A patent/JP2023065366A/en active Pending
Patent Citations (2)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
JP2006338399A (en) | 2005-06-02 | 2006-12-14 | Canon Inc | Program developing device, program development software and storage medium |
CN109739494A (en) | 2018-12-10 | 2019-05-10 | 复旦大学 | A kind of API based on Tree-LSTM uses code building formula recommended method |
Also Published As
Publication number | Publication date |
---|---|
JP2022546636A (en) | 2022-11-04 |
EP4055474A1 (en) | 2022-09-14 |
US11150877B2 (en) | 2021-10-19 |
KR102443654B1 (en) | 2022-09-15 |
US20210132915A1 (en) | 2021-05-06 |
KR20220080002A (en) | 2022-06-14 |
CN114616543A (en) | 2022-06-10 |
WO2021092283A1 (en) | 2021-05-14 |
US20220027134A1 (en) | 2022-01-27 |
JP2023065366A (en) | 2023-05-12 |
KR20220127376A (en) | 2022-09-19 |
US11977859B2 (en) | 2024-05-07 |
Similar Documents
Publication | Publication Date | Title |
---|---|---|
JP7220833B2 (en) | Automatic generation of machine learning models for software tools that run on source code | |
AU2017327823B2 (en) | Test case generator built into data-integration workflow editor | |
US5729746A (en) | Computerized interactive tool for developing a software product that provides convergent metrics for estimating the final size of the product throughout the development process using the life-cycle model | |
US9141344B2 (en) | Hover help support for application source code | |
Santos et al. | Metrics focused on usability ISO 9126 based | |
Zhao et al. | Qchecker: Detecting bugs in quantum programs via static analysis | |
Venkatesh et al. | Enhancing comprehension and navigation in Jupyter notebooks with static analysis | |
Yin et al. | Automatic learning path recommendation for open source projects using deep learning on knowledge graphs | |
US9152388B2 (en) | Tailored language sets for business level scripting | |
Storer et al. | Behave nicely! automatic generation of code for behaviour driven development test suites | |
CN113051262B (en) | Data quality inspection method, device, equipment and storage medium | |
JP2023183447A (en) | Rewriting program, rewriting method, and information processing apparatus | |
Matter | Big data analytics: a guide to data science practitioners making the transition to big data | |
Huang et al. | Context-aware bug reproduction for mobile apps | |
KR102519639B1 (en) | Method for providing code inspection interface, and apparatus implementing the same method | |
Rodrigues et al. | BPM2Text: A language independent framework for Business Process Models to Natural Language Text | |
Vostokov | What AI and Machine Learning Can Do for Python Debugging | |
Benvenuti et al. | Modeling and Assessing User Interaction in Big Data Visualization Systems | |
Jamshidi et al. | Performance Issues? Hey DevOps, Mind the Uncertainty! | |
Sendanayaka | Natural Language based Test Automation Model for Web Applications | |
Akalanka et al. | Software Complexity Automation Tool for Industrial Practices with Qualitative and Quantitative Aspects | |
Hung et al. | A User-centered Decision-aiding Process for Selecting Power Analysis Tools | |
Atanasova et al. | User interfaces in business information systems–problems and solutions | |
Bob et al. | Behave Nicely! Automatic Generation of Code for Behaviour Driven Development Test Suites | |
Gustafsson et al. | A Strategy for Cross-Project Defect Prediction Models in Industry |
Legal Events
Date | Code | Title | Description |
---|---|---|---|
A521 | Request for written amendment filed |
Free format text: JAPANESE INTERMEDIATE CODE: A523Effective date: 20220916 |
|
A621 | Written request for application examination |
Free format text: JAPANESE INTERMEDIATE CODE: A621Effective date: 20220916 |
|
A871 | Explanation of circumstances concerning accelerated examination |
Free format text: JAPANESE INTERMEDIATE CODE: A871Effective date: 20220916 |
|
TRDD | Decision of grant or rejection written | ||
A01 | Written decision to grant a patent or to grant a registration (utility model) |
Free format text: JAPANESE INTERMEDIATE CODE: A01Effective date: 20230110 |
|
A61 | First payment of annual fees (during grant procedure) |
Free format text: JAPANESE INTERMEDIATE CODE: A61Effective date: 20230131 |
|
R150 | Certificate of patent or registration of utility model |
Ref document number: 7220833Country of ref document: JPFree format text: JAPANESE INTERMEDIATE CODE: R150 |