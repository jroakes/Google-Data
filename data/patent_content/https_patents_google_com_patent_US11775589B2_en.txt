US11775589B2 - Systems and methods for weighted quantization - Google Patents
Systems and methods for weighted quantization Download PDFInfo
- Publication number
- US11775589B2 US11775589B2 US17/001,850 US202017001850A US11775589B2 US 11775589 B2 US11775589 B2 US 11775589B2 US 202017001850 A US202017001850 A US 202017001850A US 11775589 B2 US11775589 B2 US 11775589B2
- Authority
- US
- United States
- Prior art keywords
- quantized
- elements
- inner product
- search query
- computer
- Prior art date
- Legal status (The legal status is an assumption and is not a legal conclusion. Google has not performed a legal analysis and makes no representation as to the accuracy of the status listed.)
- Active, expires
Links
Images
Classifications
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F16/00—Information retrieval; Database structures therefor; File system structures therefor
- G06F16/90—Details of database functions independent of the retrieved data types
- G06F16/906—Clustering; Classification
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F16/00—Information retrieval; Database structures therefor; File system structures therefor
- G06F16/20—Information retrieval; Database structures therefor; File system structures therefor of structured data, e.g. relational data
- G06F16/24—Querying
- G06F16/245—Query processing
- G06F16/2457—Query processing with adaptation to user needs
- G06F16/24578—Query processing with adaptation to user needs using ranking
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F16/00—Information retrieval; Database structures therefor; File system structures therefor
- G06F16/20—Information retrieval; Database structures therefor; File system structures therefor of structured data, e.g. relational data
- G06F16/25—Integrating or interfacing systems involving database management systems
- G06F16/258—Data format conversion from or to a database
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F17/00—Digital computing or data processing equipment or methods, specially adapted for specific functions
- G06F17/10—Complex mathematical operations
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F18/00—Pattern recognition
- G06F18/20—Analysing
- G06F18/24—Classification techniques
- G06F18/241—Classification techniques relating to the classification model, e.g. parametric or non-parametric approaches
- G06F18/2413—Classification techniques relating to the classification model, e.g. parametric or non-parametric approaches based on distances to training or reference patterns
-
- H—ELECTRICITY
- H03—ELECTRONIC CIRCUITRY
- H03M—CODING; DECODING; CODE CONVERSION IN GENERAL
- H03M7/00—Conversion of a code where information is represented by a given sequence or number of digits to a code where the same, similar or subset of information is represented by a different sequence or number of digits
- H03M7/30—Compression; Expansion; Suppression of unnecessary data, e.g. redundancy reduction
-
- H—ELECTRICITY
- H03—ELECTRONIC CIRCUITRY
- H03M—CODING; DECODING; CODE CONVERSION IN GENERAL
- H03M7/00—Conversion of a code where information is represented by a given sequence or number of digits to a code where the same, similar or subset of information is represented by a different sequence or number of digits
- H03M7/30—Compression; Expansion; Suppression of unnecessary data, e.g. redundancy reduction
- H03M7/3082—Vector coding
-
- H—ELECTRICITY
- H03—ELECTRONIC CIRCUITRY
- H03M—CODING; DECODING; CODE CONVERSION IN GENERAL
- H03M7/00—Conversion of a code where information is represented by a given sequence or number of digits to a code where the same, similar or subset of information is represented by a different sequence or number of digits
- H03M7/30—Compression; Expansion; Suppression of unnecessary data, e.g. redundancy reduction
- H03M7/60—General implementation details not specific to a particular type of compression
- H03M7/6017—Methods or arrangements to increase the throughput
- H03M7/6023—Parallelization
Definitions
- the present disclosure relates generally to the quantization of a set of datapoints. More particularly, the present disclosure relates to the quantization of a set of datapoints to improve the approximation of an inner product with the datapoints.
- MIPS Maximum inner product search
- user queries and potential results to such queries e.g., documents such as webpages, items of content such as products, images, or the like, words in a vocabulary, etc.
- MIPS is used to find the most relevant results given a user query.
- MIPS is used to predict the class label when a large number of classes, often on the order of millions or even billions are involved.
- MIPS has also been applied to training tasks such as scalable gradient computation in large output spaces, efficient sampling for speeding up softmax computation and sparse updates in end-to-end trainable memory systems.
- quantization techniques determine quantized datapoints so that a quantized value or a combination of quantized values may satisfactorily represent one or more of the original datapoints. In this manner, the quantization technique generates a representation of the original dataset using a smaller number of datapoints (i.e., the quantized datapoints) than the number of datapoints in the original dataset.
- the objective in the quantization procedure is to minimize the reconstruction error for the datapoints to be searched, e.g., the difference between a datapoint and its quantized value.
- the traditional objective function is evaluated equally with respect to all possible query-datapoint combinations, and not all query-datapoint pairs are equally important for the approximation of the maximum inner product.
- a quantization method which tailors the objective to improve the inner product approximation in, e.g., MIPS procedures.
- One example aspect of the present disclosure is directed to a computer-implemented method of quantizing a dataset.
- the method includes obtaining, by one or more computing devices, a dataset containing a plurality of data elements, and determining, by the one or more computing devices, a quantized dataset containing a plurality of quantized elements that respectively correspond to the plurality of data elements.
- each of the plurality of quantized elements has a respective quantization error
- the respective quantization error for each quantized element is weighted by a respective weight value having a weight magnitude that is positively correlated with a magnitude of an inner product between the corresponding data element for such quantized element and a query.
- the quantized dataset comprises a plurality of quantized elements that respectively correspond to a plurality of data elements.
- the plurality of quantized elements were selected based at least in part on a loss function that comprises a sum of respective quantization errors respectively associated with the plurality of quantized elements.
- the respective quantization error for each quantized element is weighted by a respective weight value having a weight magnitude that is positively correlated with a magnitude of an inner product between the corresponding data element and a query.
- the instructions when executed by the one or more processors, cause the computing system to perform operations.
- the operations comprise obtaining, by the one or more computing devices, a new query, and determining, by the one or more computing devices, a respective inner product between the new query and at least some of the plurality of quantized elements to identify one or more of the data elements that are relevant to the new query.
- Another example aspect of the present disclosure is directed to a computing system comprising one or more processors and one or more non-transitory computer-readable media that collectively store instructions that, when executed by one or more computing devices, cause the one or more computing devices to perform operations.
- the operations comprise obtaining a dataset containing a plurality of data elements.
- the operations also comprise determining a quantized dataset containing a plurality of quantized elements that respectively correspond to the plurality of data elements, each of the plurality of quantized elements corresponding to a quantization error.
- the operations also comprise minimizing the sum of the quantization error for each of the plurality of quantized data elements.
- the quantization error is positively correlated to an expected value of a weighted difference between a true inner product and an approximate inner product.
- the true inner product is an inner product between a query and one of the plurality of data elements
- the approximate inner product is an inner product between the query and one of the plurality of quantized elements respectively corresponding to the one of the plurality of data elements.
- the weighted difference is provided a weight positively correlated to the magnitude of the true inner product.
- FIG. 1 A depicts a block diagram of an example computing system according to example embodiments of the present disclosure.
- FIG. 1 B depicts a block diagram of an example computing device according to example embodiments of the present disclosure.
- FIG. 1 C depicts a block diagram of an example computing device according to example embodiments of the present disclosure.
- FIG. 2 depicts a flow chart diagram of an example method to perform quantization according to example embodiments of the present disclosure.
- FIG. 3 depicts a flow chart diagram of an example method to perform quantization according to example embodiments of the present disclosure.
- FIG. 4 depicts a flow chart diagram of an example method to perform a search over a dataset quantized according to example embodiments of the present disclosure.
- the present disclosure is directed to systems and methods of quantizing a database with respect to a novel loss or quantization error function.
- a loss function which applies a respective weight to a respective error measurement of each quantized element that corresponds to one of the datapoints in the database.
- the respective weight for each quantized element can be determined based on the magnitude of an inner product between the corresponding datapoint and a query compared therewith.
- a quantization loss function that weights the error term for each quantized element based on the value of the inner product, giving more importance to pairs of queries and datapoints whose inner products are high.
- Such weighting leads to an effective and intuitive loss function which can be use with a wide class of quantization algorithms, including, as examples, binary quantization and product quantization.
- the present disclosure also provides example algorithms for learning the codebook, as well as quantizing new datapoints, using the new loss functions.
- Example experimental results contained in the U.S. Provisional Patent Application No. 62/891,667 demonstrate that the objective functions described herein yield significant gain on the approximation of true inner product, as well as the retrieval performance.
- the present disclosure is directed to methods and systems for quantizing a dataset and/or performing MIPS between a search query and a dataset quantized as described herein.
- the quantization error function proposed herein improves the accuracy of an estimated MIPS in which the inner product results to be searched are estimated by comparing the search query to the quantized dataset.
- the quantization error function has performed very well in experiments, as illustrated by example experimental data included in U.S. Provisional Patent Application No. 62/891,667, which is fully incorporated into and forms a portion of this disclosure.
- embodiments of the proposed loss function are responsive to the expected magnitude of an inner product between the respective datapoints and a query compared therewith.
- the actual or true inner product is approximated by an inner product between the search query and the quantized element respectively corresponding to the datapoint.
- the loss function proposed herein may prioritize the minimization of the error of the approximate inner products involving the quantized elements which are expected to generate the largest values of an inner product with a query.
- weighting the quantization error as disclosed herein may decrease the magnitude of the relative estimation error (e.g., wherein the difference between the estimated value and the actual value is divided by the actual value) of top-ranking pairs between a search query and a dataset across a wide range of bitrates used in the estimation procedure. Additionally, weighting the quantization error as disclosed herein is shown to increase the recall performance of MIPS algorithms (e.g., the algorithms return a larger proportion of true top-ranked pairs—ground truth results—within a list of predicted top-ranked pairs).
- the systems and methods of the present disclosure provide a number of technical effects and benefits.
- the techniques described herein enable quantization of a dataset according to a loss function that improves, relative to use of traditional loss functions, the ability of a machine-learned model to perform a task (e.g., an image processing, computer vision task, sensor data processing task, audio processing task, text processing task, classification task, detection task, recognition task, data search task, etc.).
- a task e.g., an image processing, computer vision task, sensor data processing task, audio processing task, text processing task, classification task, detection task, recognition task, data search task, etc.
- the systems and methods of the present disclosure can improve the ability of a computing system that includes the machine-learned model to perform various practical applications, thereby improving the functioning of such a computing system.
- the techniques described herein enable the selection of a loss function in a much more efficient fashion than existing techniques, such as, for example, black box optimization techniques.
- the techniques described herein provide for an analytically computable weight value, avoiding costly iterations of the quantization procedure to determine a weight value. Reducing the number of quantization iterations that are required to be performed in order to optimize the quantization performance conserves computing resources such as reducing the amount of processor usage, memory usage, network bandwidth usage, and/or the like, thereby improving the functioning and resource consumption of the computing system itself.
- the above-noted accuracy improvement and increase in recall performance provide for improvements in the ability of computing devices and systems to perform a desired task with greater speed and efficiency.
- a computing device which can estimate MIPS results with greater precision and/or recall while using a lower bitrate can perform tasks such as retrieving data from locations in memory at a lower expense of computing resources.
- the accuracy of the estimations at lower bitrates may also enable, in some embodiments, more compact storage and/or efficient transmission of estimated data and/or results as compared to existing methods and systems.
- improvements in accuracy and recall performance may also permit a user of a computing device or system as disclosed herein to accomplish a particular task with fewer repetitions, lower wait times, and an improved user experience.
- a query q ⁇ d with the database X, e.g., with the calculation of the inner product q,x i for i ⁇ 1, 2, . . . , N ⁇ .
- the set of quantized points may thus be used to estimate the inner product, i.e., q, ⁇ tilde over (x) ⁇ i .
- t represents the value of the true inner product between the query and the datapoints in the database X, q,x i .
- minimizing the reconstruction errors is equivalent to minimizing the expected error of the inner product between a query q and the quantized datapoints ⁇ tilde over (x) ⁇ i as compared to the inner product between q and the original datapoints x i under a mild condition on the query distribution. For instance, consider the quantization objective of minimizing the expected total inner product quantization errors over the query distribution:
- the objective becomes minimizing the reconstruction errors of the database points, which has been considered extensively in the literature.
- Equation (3) takes expectation equally over all possible combinations of datapoints x i and queries q. However, not all pairs of (x,q) are equally important. For instance, the approximation error on the pairs which have a high inner product is far more important in the case of MIPS since they are likely to be among the top ranked pairs and can greatly affect the search result, while for the pairs whose inner product is low the approximation error matters much less. Thus, for a given datapoint x i , existing techniques fail to quantize the database X to prioritize accurate estimation of the higher-valued inner products between a query and the data elements.
- a new objective or loss function is proposed herein which weights the approximation error of the inner product based on the value of the true inner product.
- ⁇ q , x i ⁇ t ] ⁇ d ⁇ P ⁇ ( ⁇ q , x i ⁇ ⁇ t ) . ( 4 )
- the weighting function is positively correlated to the magnitude of t (e.g., having a positive Spearman's correlation coefficient).
- the weighting function monotonically increases in t.
- a weighting function may include one or more decay, ramp, and/or other functions (e.g., exponential, power, logarithmic, and polynomial) to provide an increase from a first weight value to a second weight value as the value of t approaches T. After the value of t meets or exceeds T, the weight value may further increase and approach a third weight value.
- the inner-product weighted quantization errors may be decomposed based on the direction of the datapoints.
- the residual error may be decomposed into two parts, one parallel to x, r ⁇ , and one orthogonal to x, r ⁇ :
- r ⁇ ( x , x ⁇ ) r
- Equation (13) The last step uses the fact that q [ q ⁇ ,r ⁇ ( x, ⁇ tilde over (x) ⁇ ) q ⁇ ,r ⁇ ( x, ⁇ tilde over (x) ⁇ )
- Equation (13) may be further simplified:
- Equation (13) the second term of Equation (13) may be simplified as
- Equation (16) simplifies to
- the weighting function may include a step function which compares the inner product magnitude t to a threshold T and discards from the calculation of the quantization error any contribution from values of ⁇ tilde over (x) ⁇ i for which the corresponding value of the inner product q,x i is not expected to equal or exceed the threshold T.
- some embodiments of the present disclosure may focus on the error reduction of values of ⁇ tilde over (x) ⁇ i for which the corresponding value of the inner product q,x i is expected to equal or exceed the threshold T.
- ⁇ ( x , x ⁇ ) ⁇ 2 + ⁇ i 1 N ⁇ ⁇ r ⁇ ⁇ ( x , x ⁇ ) ⁇ 2
- the parameter ⁇ (T) can be analytically computed, and
- ⁇ ⁇ ( T ) ⁇ 0 ar ⁇ ⁇ ccos ⁇ ( T ) ⁇ sin d - 2 ⁇ ⁇ ⁇ d ⁇ ⁇ ⁇ 0 a ⁇ ⁇ rccos ⁇ ( T ) ⁇ sin d ⁇ ⁇ ⁇ d ⁇ ⁇ - 1. ( 18 )
- I d may be computed with the following recursive formula when d is a positive integer:
- the weighted quantization error of Equation (4) may, in some embodiments, be expressed as
- the objective for determining the quantized datapoints is as follows:
- Equation (28) is a convex function of ⁇ tilde over (x) ⁇
- Equation (28) there exists an optimal solution for Equation (28).
- the optimal solution of Equation (28) is
- Equation (27) The k-Means style Lloyd's algorithm converges in finite number of steps, which follows from the fact that the loss defined in Equation (27) is always non-increasing during both assignment and averaging steps under the changed objective.
- the proposed objective function may be applied to product quantization.
- product quantization the original vector space ⁇ d is decomposed as the Cartesian product of m distinct subspaces of dimension
- x ⁇ d ( x (1) ,x (2) , . . . ,x (m) ) ⁇ d
- x (j) ⁇ d/m is denoted as the sub-vector for the j-th subspace.
- Each of the sub-vectors x (j) may be quantized to ⁇ tilde over (x) ⁇ (j) with its vector quantizer in subspace j, for 1 ⁇ j ⁇ m.
- product quantization x is quantized as ( ⁇ tilde over (x) ⁇ (1) , . . . , ⁇ tilde over (x) ⁇ (m) ) ⁇ d and can be represented compactly using the assigned codes.
- Equation (27) the vector quantization of Equation (27) may be applied over all subspaces, except that the subspace assignment is chosen to minimize the global objective over all subspaces, instead of using the objective in each subspace independently.
- the update rule is found by setting the derivative of loss in (30) with respect to each codebook entry to zero.
- h(x) is learned to quantize datapoints into binary codes, which saves storage space and can speed up distance computation.
- a binary quantization function There are many possible ways to design such a binary quantization function. Some examples explicitly minimize reconstruction loss.
- the encoder and/or decoder can be neural networks.
- the learning objective given in Equation (25) may be used to learn optimal parameters values of the encoder and decoder.
- the learning objective given in Equation (25) can be backpropagated through the encoder and/or decoder and/or other update techniques can be used.
- FIG. 1 A depicts a block diagram of an example computing system 100 that may quantize a database according to example embodiments of the present disclosure.
- the system 100 includes a user computing device 102 , a server computing system 130 , and a training computing system 150 that are communicatively coupled over a network 180 .
- the user computing device 102 can be any type of computing device, such as, for example, a personal computing device (e.g., laptop or desktop), a mobile computing device (e.g., smartphone or tablet), a gaming console or controller, a wearable computing device, an embedded computing device, or any other type of computing device.
- the user computing device 102 can store or include one or more machine-learned models 120 .
- the machine-learned models 120 can be or can otherwise include various machine-learned models such as neural networks (e.g., deep neural networks) or other types of machine-learned models, including non-linear models and/or linear models.
- Neural networks can include feed-forward neural networks, recurrent neural networks (e.g., long short-term memory recurrent neural networks), convolutional neural networks or other forms of neural networks.
- the models 120 can be configured to quantize datapoints included in a dataset to generate quantized elements that respectively correspond to the datapoints included in the dataset.
- the models 120 can correspond to or include the quantized elements themselves.
- the models 120 can operate to search quantized elements relative to a query.
- the models 120 can perform a MIPS technique to return results from the dataset that are relevant a particular query.
- the one or more machine-learned models 120 can be received from the server computing system 130 over network 180 , stored in the user computing device memory 114 , and then used or otherwise implemented by the one or more processors 112 .
- the user computing device 102 can implement multiple parallel instances of a single machine-learned model 120 (e.g., to perform parallel quantization across multiple instances).
- the user computing device 102 can also include one or more user input components 122 that receives user input.
- the user input component 122 can be a touch-sensitive component (e.g., a touch-sensitive display screen or a touch pad) that is sensitive to the touch of a user input object (e.g., a finger or a stylus).
- the touch-sensitive component can serve to implement a virtual keyboard.
- Other example user input components include a microphone, a traditional keyboard, or other means by which a user can provide user input.
- the server computing system 130 includes one or more processors 132 and a memory 134 .
- the one or more processors 132 can be any suitable processing device (e.g., a processor core, a microprocessor, an ASIC, a FPGA, a controller, a microcontroller, etc.) and can be one processor or a plurality of processors that are operatively connected.
- the memory 134 can include one or more non-transitory computer-readable storage mediums, such as RAM, ROM, EEPROM, EPROM, flash memory devices, magnetic disks, etc., and combinations thereof.
- the memory 134 can store data 136 and instructions 138 which are executed by the processor 132 to cause the server computing system 130 to perform operations.
- the data 136 can include datapoints included in a dataset and/or quantized elements that respectively correspond to the datapoints.
- the server computing system 130 includes or is otherwise implemented by one or more server computing devices. In instances in which the server computing system 130 includes plural server computing devices, such server computing devices can operate according to sequential computing architectures, parallel computing architectures, or some combination thereof.
- the server computing system 130 can store or otherwise include one or more machine-learned models 140 .
- the models 140 can be or can otherwise include various machine-learned models.
- Example machine-learned models include neural networks or other multi-layer non-linear models.
- Example neural networks include feed forward neural networks, deep neural networks, recurrent neural networks, and convolutional neural networks.
- the models 120 can be configured to quantize datapoints included in a dataset to generate quantized elements that respectively correspond to the datapoints included in the dataset.
- the models 120 can correspond to or include the quantized elements themselves.
- the models 120 can operate to search quantized elements relative to a query.
- the models 120 can perform a MIPS technique to return results from the dataset that are relevant a particular query.
- the user computing device 102 and/or the server computing system 130 can train the models 120 and/or 140 via interaction with the training computing system 150 that is communicatively coupled over the network 180 .
- the training computing system 150 can be separate from the server computing system 130 or can be a portion of the server computing system 130 .
- the training computing system 150 includes one or more processors 152 and a memory 154 .
- the one or more processors 152 can be any suitable processing device (e.g., a processor core, a microprocessor, an ASIC, a FPGA, a controller, a microcontroller, etc.) and can be one processor or a plurality of processors that are operatively connected.
- the memory 154 can include one or more non-transitory computer-readable storage mediums, such as RAM, ROM, EEPROM, EPROM, flash memory devices, magnetic disks, etc., and combinations thereof.
- the memory 154 can store data 156 and instructions 158 which are executed by the processor 152 to cause the training computing system 150 to perform operations.
- the training computing system 150 includes or is otherwise implemented by one or more server computing devices.
- the training computing system 150 can include a model trainer 160 that trains the machine-learned models 120 and/or 140 stored at the user computing device 102 and/or the server computing system 130 using various training or learning techniques, such as, for example, backwards propagation of errors.
- Gradient descent techniques can be used to iteratively update the parameters over a number of training iterations.
- a loss function can be backpropagated through the model(s) to update one or more parameters of the model(s) (e.g., based on a gradient of the loss function).
- Various loss functions can be used such as mean squared error, likelihood loss, cross entropy loss, hinge loss, and/or various other loss functions.
- a loss function as proposed herein may be used to update one or more parameters of the model(s).
- performing backwards propagation of errors can include performing truncated backpropagation through time.
- the model trainer 160 can perform a number of generalization techniques (e.g., weight decays, dropouts, etc.) to improve the generalization capability of the models being trained.
- the model trainer 160 can train the machine-learned models 120 and/or 140 based on a set of training data 162 .
- the training data 162 can include, for example, training examples which contain a plurality of ground-truth datapoints corresponding to top-ranking pairs of queries and data elements to learn a loss function which prioritizes the accuracy of estimations for top-ranking pairs.
- the plurality of ground-truth datapoints can correspond to a plurality of embeddings that are continuous numerical feature representations included in an embedding dimensional space (e.g., embeddings output by a machine-learned embedding model).
- the training examples can be provided by the user computing device 102 .
- the model 120 provided to the user computing device 102 can be trained by the training computing system 150 on user-specific data received from the user computing device 102 . In some instances, this process can be referred to as personalizing the model.
- the model trainer 160 includes computer logic utilized to provide desired functionality.
- the model trainer 160 can be implemented in hardware, firmware, and/or software controlling a general purpose processor.
- the model trainer 160 includes program files stored on a storage device, loaded into a memory and executed by one or more processors.
- the model trainer 160 includes one or more sets of computer-executable instructions that are stored in a tangible computer-readable storage medium such as RAM hard disk or optical or magnetic media.
- one or more of the machine-learned models 120 and 140 may include parameter values quantized according to the present disclosure.
- model inputs, weights, activations, scale factors, biases, accumulators, outputs, and/or other parameter values used in a model may be quantized according to the present disclosure.
- a parameter value is quantized with respect to a quantization error which is weighted with a weight value that positively correlates to the influence of the particular parameter value on the final output (e.g., the error is weighted with a weight value correlated to a magnitude of the parameter value).
- the output of a machine-learned model may include embeddings which are quantized according to the present disclosure. Such quantization may advantageously improve the speed of a similarity search (e.g., MIPS) across the generated embeddings against a later-submitted search query.
- MIPS similarity search
- the network 180 can be any type of communications network, such as a local area network (e.g., intranet), wide area network (e.g., Internet), or some combination thereof and can include any number of wired or wireless links.
- communication over the network 180 can be carried via any type of wired and/or wireless connection, using a wide variety of communication protocols (e.g., TCP/IP, HTTP, SMTP, FTP), encodings or formats (e.g., HTML, XML), and/or protection schemes (e.g., VPN, secure HTTP, SSL).
- FIG. 1 A illustrates one example computing system that can be used to implement the present disclosure.
- the user computing device 102 can include the model trainer 160 and the training dataset 162 .
- the models 120 can be both trained and used locally at the user computing device 102 .
- the user computing device 102 can implement the model trainer 160 to personalize the models 120 based on user-specific data.
- FIG. 1 B depicts a block diagram of an example computing device 10 that performs according to example embodiments of the present disclosure.
- the computing device 10 can be a user computing device or a server computing device.
- the computing device 10 includes a number of applications (e.g., applications 1 through N). Each application contains its own machine learning library and machine-learned model(s). For example, each application can include a machine-learned model.
- Example applications include a text messaging application, an email application, a dictation application, a virtual keyboard application, a browser application, etc.
- each application can communicate with a number of other components of the computing device, such as, for example, one or more sensors, a context manager, a device state component, and/or additional components.
- each application can communicate with each device component using an API (e.g., a public API).
- the API used by each application is specific to that application.
- FIG. 1 C depicts a block diagram of an example computing device 50 that performs according to example embodiments of the present disclosure.
- the computing device 50 can be a user computing device or a server computing device.
- the computing device 50 includes a number of applications (e.g., applications 1 through N). Each application is in communication with a central intelligence layer.
- Example applications include a text messaging application, an email application, a dictation application, a virtual keyboard application, a browser application, etc.
- each application can communicate with the central intelligence layer (and model(s) stored therein) using an API (e.g., a common API across all applications).
- the central intelligence layer includes a number of machine-learned models. For example, as illustrated in FIG. 1 C , a respective machine-learned model (e.g., a model) can be provided for each application and managed by the central intelligence layer. In other implementations, two or more applications can share a single machine-learned model. For example, in some implementations, the central intelligence layer can provide a single model (e.g., a single model) for all of the applications. In some implementations, the central intelligence layer is included within or otherwise implemented by an operating system of the computing device 50 .
- a respective machine-learned model e.g., a model
- two or more applications can share a single machine-learned model.
- the central intelligence layer can provide a single model (e.g., a single model) for all of the applications.
- the central intelligence layer is included within or otherwise implemented by an operating system of the computing device 50 .
- the central intelligence layer can communicate with a central device data layer.
- the central device data layer can be a centralized repository of data for the computing device 50 . As illustrated in FIG. 1 C , the central device data layer can communicate with a number of other components of the computing device, such as, for example, one or more sensors, a context manager, a device state component, and/or additional components. In some implementations, the central device data layer can communicate with each device component using an API (e.g., a private API).
- an API e.g., a private API
- FIGS. 2 - 4 depict flow chart diagrams of example methods to perform according to example embodiments of the present disclosure.
- the methods may be performed by one or more computing devices and/or systems.
- a figure depicts steps performed in a particular order for purposes of illustration and discussion, the methods of the present disclosure are not limited to the particularly illustrated order or arrangement.
- the various steps of the methods can generally be omitted, rearranged, combined, and/or adapted in various ways without deviating from the scope of the present disclosure.
- Step 204 of method 200 further includes determining a quantized dataset containing a plurality of quantized elements that respectively correspond to the plurality of data elements.
- the quantized element respectively corresponding to a data element may be determined to approximate the data element(s) and/or to approximate a calculation performed with the data element(s). For instance, the quantized element may be determined to reduce the approximation error of an approximate inner product between a query and the quantized element as compared to a true inner product between the query and the data element.
- the approximation error (or an expected value thereof) may be weighted with a weight value positively correlated to the magnitude of the true inner product.
- the quantized dataset may be determined by an algorithm. In some implementations, the quantized dataset may be determined by a machine-learned model in which the model has learned a loss function corresponding to quantization error as disclosed herein. In some implementations, the quantized dataset may be determined by an algorithm which seeks to reduce the quantization error of the quantized dataset.
- steps 302 and 304 of method 300 generally correspond to steps 202 and 204 of method 200 , except that step 304 of method 300 include a substep of minimizing a weighted quantization error function that comprises a sum of the respective quantization errors for the plurality of quantized elements.
- to minimize a quantity may include finding a local or global minimum of the quantity and may alternatively or additionally include the reduction of the quantity, such as the reduction of the quantity to within a target cutoff or convergence criterion (e.g., minimization of a quantity may include reducing the quantity to within a threshold amount (e.g., 5%, 1%, etc.) away from the local or global minimum).
- step 402 of method 400 includes obtaining a quantized dataset containing a plurality of quantized elements that respectively correspond to a plurality of data elements.
- the plurality of quantized elements may be obtained from a storage medium, from a user input, and/or from the output of an upstream system, such as a system or device which generated the quantized dataset according to methods of the present disclosure.
- the quantized dataset of step 402 is generated by a method 200 or method 300 .
- Step 406 of method 400 includes determining a respective inner product between the search query and at least some of the plurality of quantized elements to identify one or more of the data elements that are relevant to the search query.
- step 406 of method 400 can include determining a respective inner product between the search query and each of a number of codebook entries to identify one or more codebook entries that are most relevant to the search query.
- One example aspect is directed to a computing system comprising: one or more processors; and one or more non-transitory computer-readable media that collectively store: a quantized dataset comprising a plurality of quantized elements that respectively correspond to a plurality of data elements, the plurality of quantized elements having been selected based at least in part on a loss function that comprises a sum of respective quantization errors respectively associated with the plurality of quantized elements, wherein the respective quantization error for each quantized element is weighted by a respective weight value having a weight magnitude that is positively correlated with a magnitude of an inner product between the corresponding data element and a query; and instructions that, when executed by the one or more processors, cause the computing system to perform operations, the operations comprising: obtaining a new query; determining a respective inner product between the new query and at least some of the plurality of quantized elements to identify one or more of the data elements that are relevant to the new query.
- the respective quantization error associated with each quantized element can comprise: a parallel component that is parallel to the corresponding data element; and an orthogonal component that is orthogonal to corresponding data element; wherein the quantization error includes a weighted sum of the parallel component and the orthogonal component, the parallel component being weighted by the weight value.
- the inner product between the corresponding data element and the query can comprise an expected inner product between the corresponding data element and the query.
- the query can be uniformly distributed in a d-dimensional unit sphere.
- the weight value for each quantized element can be determined according to a weight function that is a function of the inner product between the corresponding data element for such quantized element and the query.
- the weight function can comprise a function that evaluates whether the inner product is greater than a threshold value.
- the function can be a step function.
- the weight function can comprise a function that outputs a weight determined by the magnitude of the inner product and a threshold value.
- the threshold value can comprises a user-specified value.
- the weight value for each quantized element can be based at least in part on a user-specified hyperparameter.
- the weight value for each quantized element can be determined according to a weight function that is analytically computable.
- the plurality of quantized elements can be selected based at least in part by vector quantization, wherein the loss function was minimized across the plurality of data elements.
- the plurality of quantized elements can be selected based at least in part by product quantization, wherein the loss function was minimized across a plurality of subspaces, each of the plurality of subspaces comprising a subset of one of the plurality of data elements.
Abstract
Description
r(x,{tilde over (x)}):=x−{tilde over (x)}. (5)
where q∥ is parallel to x and q⊥ is orthogonal to x, such that
which may be expanded to
due to symmetry. The first term of Equation (13) may be further simplified:
Since q⊥ is uniformly distributed in the (d−1) dimensional subspace orthogonal to x with the norm
the second term of Equation (13) may be simplified as
Therefore, substituting the Equations (14) and (15) into (13),
where
The parameter λ(T) can be analytically computed, and
as the dimension d→∞.
is proportional to the surface area of (d−1)-dimensional hypersphere with a radius of sin 0:
where Sd-1 is the surface area of a (d−1)-sphere with unit radius.
Furthermore, let
I d=∫0 αsind θdθ, (20)
giving
The parameter λ(T) can thus be re-written as
With a base case of I0=α, and I1=1−cos α, the exact value of λ(T) can be computed explicitly in O(d) time. Additionally, it may be shown that the limit of λ(T) exists and that it approaches
Thus, when T≥0,
where μ is a hyperparameter depending on the datapoint dimension d and the threshold T imposed on the inner product between queries and datapoints:
μ:=(d−1)λ(T). (26)
Note that when the hyperparameter μ is set to be 1, Equation (25) is reduced to the traditional reconstruction errors of the datapoints.
for each partition.
vector quantization algorithm is applied in each subspace separately (random rotation or permutation of the original vectors can be done before doing the Cartesian product). For example, let x∈
x=(x (1) ,x (2) , . . . ,x (m))∈
where x(j)∈
where {tilde over (x)}i denotes the product quantization of xi, i.e.,
{tilde over (x)} i:=(C 1,A
{tilde over (x)}=g(h(x)), h(x)∈{0,1}h (32)
where h(·) is the “encoder” part which binarizes original datapoint into binary space and g(·) is the “decoder” part which reconstructs the datapoints given the binary codes. In one example, h(x)=sign(Wh Tx+bh) is the encoder function and g(h)=Wg Th is the decoder function, respectively. In another example, the encoder and/or decoder can be neural networks. The learning objective given in Equation (25) may be used to learn optimal parameters values of the encoder and decoder. For example, the learning objective given in Equation (25) can be backpropagated through the encoder and/or decoder and/or other update techniques can be used.
Claims (20)
Priority Applications (2)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US17/001,850 US11775589B2 (en) | 2019-08-26 | 2020-08-25 | Systems and methods for weighted quantization |
US18/456,688 US20240061889A1 (en) | 2019-08-26 | 2023-08-28 | Systems and Methods for Weighted Quantization |
Applications Claiming Priority (2)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US201962891667P | 2019-08-26 | 2019-08-26 | |
US17/001,850 US11775589B2 (en) | 2019-08-26 | 2020-08-25 | Systems and methods for weighted quantization |
Related Child Applications (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
US18/456,688 Continuation US20240061889A1 (en) | 2019-08-26 | 2023-08-28 | Systems and Methods for Weighted Quantization |
Publications (2)
Publication Number | Publication Date |
---|---|
US20210064634A1 US20210064634A1 (en) | 2021-03-04 |
US11775589B2 true US11775589B2 (en) | 2023-10-03 |
Family
ID=74681223
Family Applications (2)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
US17/001,850 Active 2041-11-21 US11775589B2 (en) | 2019-08-26 | 2020-08-25 | Systems and methods for weighted quantization |
US18/456,688 Pending US20240061889A1 (en) | 2019-08-26 | 2023-08-28 | Systems and Methods for Weighted Quantization |
Family Applications After (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
US18/456,688 Pending US20240061889A1 (en) | 2019-08-26 | 2023-08-28 | Systems and Methods for Weighted Quantization |
Country Status (1)
Country | Link |
---|---|
US (2) | US11775589B2 (en) |
Families Citing this family (3)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US11521125B2 (en) * | 2020-01-29 | 2022-12-06 | EMC IP Holding Company LLC | Compression and decompression of telemetry data for prediction models |
CN113886723B (en) * | 2021-09-09 | 2024-04-12 | 盐城天眼察微科技有限公司 | Method and device for determining ordering stability, storage medium and electronic equipment |
CN117312325B (en) * | 2023-11-28 | 2024-03-29 | 中国科学技术大学 | Knowledge distillation-based quantization index construction method, device and equipment |
Citations (10)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
JPH06164415A (en) * | 1993-08-06 | 1994-06-10 | Mitsubishi Electric Corp | Amplitude adaptive vector quantizing device |
US20020039450A1 (en) * | 2000-10-02 | 2002-04-04 | Nec Corporation | Image sequence coding method |
US20020156766A1 (en) * | 2001-03-29 | 2002-10-24 | Sanyo Electric Co., Ltd. | Communication setting support method and communication setting support system |
US20020178158A1 (en) * | 1999-12-21 | 2002-11-28 | Yuji Kanno | Vector index preparing method, similar vector searching method, and apparatuses for the methods |
JP2004229100A (en) * | 2003-01-24 | 2004-08-12 | Nippon Telegr & Teleph Corp <Ntt> | Method, device and program for encoding information source, and recording medium recorded with encoding program |
US20090109490A1 (en) * | 2004-10-05 | 2009-04-30 | Lau Daniel L | Method of producing improved lenticular images |
US9008241B1 (en) * | 2013-10-25 | 2015-04-14 | Samsung Electronics Co., Ltd | Low complexity near optimal two spatial stream maximal likelihood detector |
US20180101570A1 (en) * | 2016-10-11 | 2018-04-12 | Google Inc. | Hierarchical quantization for fast inner product search |
US20190281267A1 (en) * | 2016-12-19 | 2019-09-12 | Sony Corporation | Image processing device, image processing method, and program |
US20200134461A1 (en) * | 2018-03-20 | 2020-04-30 | Sri International | Dynamic adaptation of deep neural networks |
-
2020
- 2020-08-25 US US17/001,850 patent/US11775589B2/en active Active
-
2023
- 2023-08-28 US US18/456,688 patent/US20240061889A1/en active Pending
Patent Citations (10)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
JPH06164415A (en) * | 1993-08-06 | 1994-06-10 | Mitsubishi Electric Corp | Amplitude adaptive vector quantizing device |
US20020178158A1 (en) * | 1999-12-21 | 2002-11-28 | Yuji Kanno | Vector index preparing method, similar vector searching method, and apparatuses for the methods |
US20020039450A1 (en) * | 2000-10-02 | 2002-04-04 | Nec Corporation | Image sequence coding method |
US20020156766A1 (en) * | 2001-03-29 | 2002-10-24 | Sanyo Electric Co., Ltd. | Communication setting support method and communication setting support system |
JP2004229100A (en) * | 2003-01-24 | 2004-08-12 | Nippon Telegr & Teleph Corp <Ntt> | Method, device and program for encoding information source, and recording medium recorded with encoding program |
US20090109490A1 (en) * | 2004-10-05 | 2009-04-30 | Lau Daniel L | Method of producing improved lenticular images |
US9008241B1 (en) * | 2013-10-25 | 2015-04-14 | Samsung Electronics Co., Ltd | Low complexity near optimal two spatial stream maximal likelihood detector |
US20180101570A1 (en) * | 2016-10-11 | 2018-04-12 | Google Inc. | Hierarchical quantization for fast inner product search |
US20190281267A1 (en) * | 2016-12-19 | 2019-09-12 | Sony Corporation | Image processing device, image processing method, and program |
US20200134461A1 (en) * | 2018-03-20 | 2020-04-30 | Sri International | Dynamic adaptation of deep neural networks |
Non-Patent Citations (35)
Title |
---|
Andoni et al., "Practical and Optimal LSH for Angular Distance", Advances in Neural Information Processing Systems, Dec. 8-13, 2014, Montreal, Canada, 9 pages. |
Andre et al., "Cache locality is not enough: High-Performance Nearest Neighbor Search with Product Quantization Fast Scan", Proceedings of the VLDB Endowment, vol. 9, No. 4, 2015, pp. 288-299. |
Aumuller et al., "ANN-Benchmarks: A Benchmarking Tool for Approximate Nearest Neighbor Algorithms" Information Systems, vol. 87, No. 11, Feb. 2019, 14 pages. |
Babenko et al., "Additive Quantization for Extreme Vector Compression", 2014 IEEE Conference on Computer Vision and Pattern Recognition (CVPR), Jun. 24-27, 2014, Columbus, Ohio, 8 pages. |
Babenko et al., "The Inverted Multi-Index", Conference on Computer Vision and Pattern Recognition (CVPR), Jun. 16-21, 2012, Providence, Rhode Island, 8 pages. |
Cremonesi et al., "Performance of Recommender Algorithms on Top-N Recommendation Tasks", Fourth ACM Conference on Recommender Systems, Sep. 26-30, 2010, Barcelona, Spain, 8 pages. |
Dai et al., "Stochastic Generative Hashing", 34th International Conference on Machine Learning, Aug. 6-11, 2017, Sydney, Australia, 10 pages. |
Dasgupta et al., "Random projection trees and low dimensional manifolds", Fortieth Annual ACM Symposium on Theory of Computing, May 17-20, 2008, Victoria, British Columbia, Canada, 10 pages. |
Dean et al., "Fast, Accurate Detection of 100,000 Object Classes on a Single Machine: Technical Supplement", IEEE Conference on Computer Vision and Pattern Recognition, Jun. 23-28, 2018, Portland, Oregon, 3 pages. |
Ge et al., "Optimized Product Quantization", IEEE Transactions on Pattern Analysis and Machine Intelligence, vol. 36, No. 4, Apr. 2014, 12 pages. |
Gong et al., "Iterative Quantization: A Procrustean Approach to Learning Binary Codes for Large-scale Image Retrieval", IEEE Transactions on Pattern Analysis and Machine Intelligence, vol. 35, No. 12, Dec. 2013, 15 pages. |
Guo et al., "Quantization based Fast Inner Product Search", 19th International Conference on Artificial Intelligence and Statistics (AISTATS), May 7-11, 2016, Cadiz, Spain, pp. 482-490. |
Harwood et al., "FANNG: Fast Approximate Nearest Neighbour Graphs", 2016 IEEE Conference on Computer Vision and Pattern Recognition (CVPR), Jun. 26-Jul. 1, 2016, Las Vegas, Nevada, pp. 5713-5722. |
He et al., "K-means Hashing: an Affinity-Preserving Quantization Method for Learning Binary Compact Codes", IEEE Conference on Computer Vision and Pattern Recognition, Jun. 23-28, 2013, Portland, Oregon, pp. 2938-2945. |
Indyk et al., "Approximate Nearest Neighbors: Towards Removing the Curse of Dimensionality", Thirtieth Annual ACM Symposium on Theory of Computing (STOC), May 23-26, 1998, Dallas TX, pp. 604-613. |
Jegou et al., "Product Quantization for Nearest Neighbor Search", IEEE Transactions on Pattern Analysis and Machine Intelligence, vol. 33, No. 1, 2011, 14 pages. |
Johnson et al., "Billion-scale similarity search with GPUs", arXiv: 1702.08734v1, Feb. 28, 2017, 12 pages. |
Liong et al., "Deep Hashine for Compact Binary Codes Learning", IEEE Conference on Computer Vision and Pattern Recognition (CVPR), Jun. 7-12, 2015, Boston, Massachusetts, pp. 2475-2483. |
Malkov et al., "Efficient and robust approximate nearest neighbor search using Hierarchical Navigable Small World graphs", arXiv:1603.09320v2, May 21, 2016, 21 pages. |
Martinez et al., "Revisiting Additive Quantization", European Conference on Computer Vision, Oct. 8-16, Amsterdam, The Netherlands, pp. 137-153. |
Matsui et al., "PQTable: Fast Exact Asymmetric Distance Neighbor Search for Product Quantization using Hash Tables", IEEE International Conference on Computer Vision, Dec. 11-18, 2015, Chile, Santiago, pp. 1940-1948. |
Muja et al., "Scalable Nearest Neighbor Algorithms for High Dimensional Data", IEEE Transactions on Pattern Analysis and Machine Intelligence, vol. 36, No. 11, Nov. 2014, pp. 2227-2240. |
Mussmann et al., "Learning and Inference via Maximum Inner Product Search", 33rd International Conference on Machine Learning, Jun. 19-24, 2016, New York, New York, 10 pages. |
Norouzi et al., "Cartesian k-means", IEEE Conference on Computer Vision and Pattern Recognition, Jun. 23-28, 2013, Portland, Oregon, 8 pages. |
Norouzi et al., "Fast Exact Search in Hamming Space with Multi-Index Hashing", IEEE Transaction on Pattern Analysis and Machine Intelligence, vol. 36, No. 6, Jun. 2014, 14 pages. |
Nurvitadhi et al., "Accelerating Binarized Neural Networks: Comparison of FPGA, CPU, GUP, and ASIC", 2016 International Conference on Field-Programmable Technology (FPT), Dec. 7-9, 2016, Xi'an China, 8 pages. |
Pennington et al., "GloVe: Global Vectors for Word Representation", Empirical Methods in Natural Language Processing (EMNLP), Oct. 25-29, 2014, Doha, Qatar, pp. 1532-1543. |
Pritzel et al., "Neural Episodic Control", 34th International Conference on Machine Learning, Aug. 6-11, 2017, Sydney, Australia, 10 pages. |
Shrivastava et al., Asymmetric LSH (ALSH) for Sublinear Time Maximum Inner Product Search (MIPS), Advances in Neural Information Processing Systems, Dec. 8-13, 2014, Montreal, Canada, 9 pages. |
Wang et al., "Hashing for Similarity Search: A Survey", arXiv:1408.2927v1, Aug. 13, 2014, 29 pages. |
Wang et al., "Learning to Hash for Indexing Big Data—A Survey", Proceedings of the IEEE, vol. 104, No. 1, Jan. 2016, pp. 34-57. |
Wu et al., "Multiscale Quantization for Fast Similarity Search", Advances in Neural Information Processing Systems, Dec. 4-9, 2017, Long Beach, CA, 11 pages. |
Yen et al., "Loss Decomposition for Fast Learning in Large Output Spaces", 35th International Conference on Machine Learning, Jul. 10-15, 2018, Stockholm, Sweden, 10 pages. |
Zhang et al., "Composite Quantization for Approximate Nearest Neighbor Search", International Conference on Machine Learning, Jun. 21-26, 2014, Beijing, China, 9 pages. |
Zhu et al., "Trained Ternary Quantization", arXiv:1612.01064v3, Feb. 23, 2017, 10 pages. |
Also Published As
Publication number | Publication date |
---|---|
US20240061889A1 (en) | 2024-02-22 |
US20210064634A1 (en) | 2021-03-04 |
Similar Documents
Publication | Publication Date | Title |
---|---|---|
Guo et al. | Accelerating large-scale inference with anisotropic vector quantization | |
Polino et al. | Model compression via distillation and quantization | |
US20240061889A1 (en) | Systems and Methods for Weighted Quantization | |
US20220269707A1 (en) | Method and system for analyzing entities | |
US11461628B2 (en) | Method for optimizing neural networks | |
EP3295381B1 (en) | Augmenting neural networks with sparsely-accessed external memory | |
US20190138887A1 (en) | Systems, methods, and media for gated recurrent neural networks with reduced parameter gating signals and/or memory-cell units | |
Luo et al. | Online learning of interpretable word embeddings | |
Carreira-Perpinán | Model compression as constrained optimization, with application to neural nets. Part I: General framework | |
US11775770B2 (en) | Adversarial bootstrapping for multi-turn dialogue model training | |
CN114830133A (en) | Supervised contrast learning with multiple positive examples | |
CN112368697A (en) | System and method for evaluating a loss function or a gradient of a loss function via dual decomposition | |
US11636384B1 (en) | Spherical random features for polynomial kernels | |
US11694034B2 (en) | Systems and methods for machine-learned prediction of semantic similarity between documents | |
US20200302283A1 (en) | Mixed precision training of an artificial neural network | |
US11823076B2 (en) | Tuning classification hyperparameters | |
US11874866B2 (en) | Multiscale quantization for fast similarity search | |
US11687730B1 (en) | Automated conversation goal discovery using neural networks and deep multi-view clustering | |
US20220277031A1 (en) | Guided exploration for conversational business intelligence | |
KR102457893B1 (en) | Method for predicting precipitation based on deep learning | |
US20220058487A1 (en) | Electronic apparatus and method for controlling thereof | |
US20220309292A1 (en) | Growing labels from semi-supervised learning | |
Nguyen et al. | Variational hyper-encoding networks | |
US20230153580A1 (en) | Method for Optimizing Neural Networks | |
CN113688229B (en) | Text recommendation method, system, storage medium and equipment |
Legal Events
Date | Code | Title | Description |
---|---|---|---|
AS | Assignment |
Owner name: GOOGLE LLC, CALIFORNIAFree format text: ASSIGNMENT OF ASSIGNORS INTEREST;ASSIGNORS:GUO, RUIQI;SIMCHA, DAVID;GENG, QUAN;AND OTHERS;SIGNING DATES FROM 20190829 TO 20190904;REEL/FRAME:053586/0282 |
|
FEPP | Fee payment procedure |
Free format text: ENTITY STATUS SET TO UNDISCOUNTED (ORIGINAL EVENT CODE: BIG.); ENTITY STATUS OF PATENT OWNER: LARGE ENTITY |
|
STPP | Information on status: patent application and granting procedure in general |
Free format text: DOCKETED NEW CASE - READY FOR EXAMINATION |
|
STPP | Information on status: patent application and granting procedure in general |
Free format text: NON FINAL ACTION MAILED |
|
STPP | Information on status: patent application and granting procedure in general |
Free format text: NOTICE OF ALLOWANCE MAILED -- APPLICATION RECEIVED IN OFFICE OF PUBLICATIONS |
|
STPP | Information on status: patent application and granting procedure in general |
Free format text: PUBLICATIONS -- ISSUE FEE PAYMENT VERIFIED |
|
STCF | Information on status: patent grant |
Free format text: PATENTED CASE |