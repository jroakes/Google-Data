US20230072293A1 - Systems And Methods For Generating Predicted Visual Observations Of An Environment Using Machine Learned Models - Google Patents
Systems And Methods For Generating Predicted Visual Observations Of An Environment Using Machine Learned Models Download PDFInfo
- Publication number
- US20230072293A1 US20230072293A1 US17/409,249 US202117409249A US2023072293A1 US 20230072293 A1 US20230072293 A1 US 20230072293A1 US 202117409249 A US202117409249 A US 202117409249A US 2023072293 A1 US2023072293 A1 US 2023072293A1
- Authority
- US
- United States
- Prior art keywords
- spatial
- observations
- computing system
- environment
- guidance
- Prior art date
- Legal status (The legal status is an assumption and is not a legal conclusion. Google has not performed a legal analysis and makes no representation as to the accuracy of the status listed.)
- Pending
Links
- 238000000034 method Methods 0.000 title claims abstract description 137
- 230000000007 visual effect Effects 0.000 title description 46
- 238000009826 distribution Methods 0.000 claims description 82
- 230000006870 function Effects 0.000 claims description 65
- 238000012545 processing Methods 0.000 claims description 54
- 230000011218 segmentation Effects 0.000 claims description 45
- 238000012549 training Methods 0.000 claims description 35
- 230000015572 biosynthetic process Effects 0.000 claims description 12
- 238000003786 synthesis reaction Methods 0.000 claims description 12
- 238000013527 convolutional neural network Methods 0.000 claims description 9
- 238000005070 sampling Methods 0.000 claims description 5
- 230000008569 process Effects 0.000 abstract description 65
- 238000010586 diagram Methods 0.000 description 18
- 230000015654 memory Effects 0.000 description 13
- 238000013528 artificial neural network Methods 0.000 description 12
- 208000037170 Delayed Emergence from Anesthesia Diseases 0.000 description 5
- 230000009471 action Effects 0.000 description 5
- 239000003795 chemical substances by application Substances 0.000 description 5
- 238000010606 normalization Methods 0.000 description 5
- 238000004891 communication Methods 0.000 description 4
- 230000004075 alteration Effects 0.000 description 3
- 230000008901 benefit Effects 0.000 description 3
- 238000010801 machine learning Methods 0.000 description 3
- 238000013507 mapping Methods 0.000 description 3
- 238000003909 pattern recognition Methods 0.000 description 3
- 230000000306 recurrent effect Effects 0.000 description 3
- 238000013519 translation Methods 0.000 description 3
- 208000009119 Giant Axonal Neuropathy Diseases 0.000 description 2
- 230000003190 augmentative effect Effects 0.000 description 2
- 230000001143 conditioned effect Effects 0.000 description 2
- 238000001514 detection method Methods 0.000 description 2
- 238000005516 engineering process Methods 0.000 description 2
- 201000003382 giant axonal neuropathy 1 Diseases 0.000 description 2
- 238000003709 image segmentation Methods 0.000 description 2
- 230000006872 improvement Effects 0.000 description 2
- 230000007246 mechanism Effects 0.000 description 2
- 230000004048 modification Effects 0.000 description 2
- 238000012986 modification Methods 0.000 description 2
- 230000002787 reinforcement Effects 0.000 description 2
- 230000007704 transition Effects 0.000 description 2
- 238000012800 visualization Methods 0.000 description 2
- 238000007792 addition Methods 0.000 description 1
- 238000013473 artificial intelligence Methods 0.000 description 1
- 239000003086 colorant Substances 0.000 description 1
- 230000003750 conditioning effect Effects 0.000 description 1
- 230000000694 effects Effects 0.000 description 1
- 230000003993 interaction Effects 0.000 description 1
- 239000011159 matrix material Substances 0.000 description 1
- 230000003287 optical effect Effects 0.000 description 1
- 230000003094 perturbing effect Effects 0.000 description 1
- 238000005096 rolling process Methods 0.000 description 1
- 230000006403 short-term memory Effects 0.000 description 1
- 238000002910 structure generation Methods 0.000 description 1
- 238000012546 transfer Methods 0.000 description 1
Images
Classifications
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06T—IMAGE DATA PROCESSING OR GENERATION, IN GENERAL
- G06T15/00—3D [Three Dimensional] image rendering
- G06T15/10—Geometric effects
- G06T15/20—Perspective computation
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06T—IMAGE DATA PROCESSING OR GENERATION, IN GENERAL
- G06T11/00—2D [Two Dimensional] image generation
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F18/00—Pattern recognition
- G06F18/20—Analysing
- G06F18/21—Design or setup of recognition systems or techniques; Extraction of features in feature space; Blind source separation
- G06F18/213—Feature extraction, e.g. by transforming the feature space; Summarisation; Mappings, e.g. subspace methods
-
- G06K9/6232—
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06N—COMPUTING ARRANGEMENTS BASED ON SPECIFIC COMPUTATIONAL MODELS
- G06N3/00—Computing arrangements based on biological models
- G06N3/02—Neural networks
- G06N3/04—Architecture, e.g. interconnection topology
- G06N3/045—Combinations of networks
-
- G06N3/0454—
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06N—COMPUTING ARRANGEMENTS BASED ON SPECIFIC COMPUTATIONAL MODELS
- G06N3/00—Computing arrangements based on biological models
- G06N3/02—Neural networks
- G06N3/04—Architecture, e.g. interconnection topology
- G06N3/045—Combinations of networks
- G06N3/0455—Auto-encoder networks; Encoder-decoder networks
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06N—COMPUTING ARRANGEMENTS BASED ON SPECIFIC COMPUTATIONAL MODELS
- G06N3/00—Computing arrangements based on biological models
- G06N3/02—Neural networks
- G06N3/04—Architecture, e.g. interconnection topology
- G06N3/0464—Convolutional networks [CNN, ConvNet]
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06N—COMPUTING ARRANGEMENTS BASED ON SPECIFIC COMPUTATIONAL MODELS
- G06N3/00—Computing arrangements based on biological models
- G06N3/02—Neural networks
- G06N3/04—Architecture, e.g. interconnection topology
- G06N3/0475—Generative networks
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06N—COMPUTING ARRANGEMENTS BASED ON SPECIFIC COMPUTATIONAL MODELS
- G06N3/00—Computing arrangements based on biological models
- G06N3/02—Neural networks
- G06N3/08—Learning methods
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06N—COMPUTING ARRANGEMENTS BASED ON SPECIFIC COMPUTATIONAL MODELS
- G06N3/00—Computing arrangements based on biological models
- G06N3/02—Neural networks
- G06N3/08—Learning methods
- G06N3/084—Backpropagation, e.g. using gradient descent
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06N—COMPUTING ARRANGEMENTS BASED ON SPECIFIC COMPUTATIONAL MODELS
- G06N3/00—Computing arrangements based on biological models
- G06N3/02—Neural networks
- G06N3/08—Learning methods
- G06N3/094—Adversarial learning
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06T—IMAGE DATA PROCESSING OR GENERATION, IN GENERAL
- G06T15/00—3D [Three Dimensional] image rendering
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06T—IMAGE DATA PROCESSING OR GENERATION, IN GENERAL
- G06T15/00—3D [Three Dimensional] image rendering
- G06T15/08—Volume rendering
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06T—IMAGE DATA PROCESSING OR GENERATION, IN GENERAL
- G06T7/00—Image analysis
- G06T7/10—Segmentation; Edge detection
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06V—IMAGE OR VIDEO RECOGNITION OR UNDERSTANDING
- G06V10/00—Arrangements for image or video recognition or understanding
- G06V10/70—Arrangements for image or video recognition or understanding using pattern recognition or machine learning
- G06V10/82—Arrangements for image or video recognition or understanding using pattern recognition or machine learning using neural networks
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06V—IMAGE OR VIDEO RECOGNITION OR UNDERSTANDING
- G06V20/00—Scenes; Scene-specific elements
- G06V20/60—Type of objects
- G06V20/64—Three-dimensional objects
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06N—COMPUTING ARRANGEMENTS BASED ON SPECIFIC COMPUTATIONAL MODELS
- G06N3/00—Computing arrangements based on biological models
- G06N3/02—Neural networks
- G06N3/08—Learning methods
- G06N3/082—Learning methods modifying the architecture, e.g. adding, deleting or silencing nodes or connections
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06T—IMAGE DATA PROCESSING OR GENERATION, IN GENERAL
- G06T2207/00—Indexing scheme for image analysis or image enhancement
- G06T2207/10—Image acquisition modality
- G06T2207/10028—Range image; Depth image; 3D point clouds
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06T—IMAGE DATA PROCESSING OR GENERATION, IN GENERAL
- G06T2207/00—Indexing scheme for image analysis or image enhancement
- G06T2207/20—Special algorithmic details
- G06T2207/20081—Training; Learning
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06T—IMAGE DATA PROCESSING OR GENERATION, IN GENERAL
- G06T2210/00—Indexing scheme for image generation or computer graphics
- G06T2210/56—Particle system, point based geometry or rendering
Definitions
- the present disclosure relates generally to generating visual observations of an environment. More particularly, the present disclosure relates to systems and methods for generating predicted visual observations of an environment using machine-learned models and training the machine-learned models.
- World models, or models of environments, are an appealing way to represent a computing agent's knowledge about its surroundings.
- An agent with a world model can predict its future by predicting the consequences of a series of proposed actions.
- models that generate predicted visual observations have typically been limited to relatively simple environments, such as video games.
- Previous models have been proposed to represent three-dimensional scenes, including point cloud representations, layered depth images, and mesh representations.
- a significant drawback of previous models is that they require a large number of input views to render a single scene (e.g., 20-62 images per scene).
- these models are typically trained to represent a single scene, and currently do not generalize well to unseen environments.
- the computing system can include one or more processors and one or more non-transitory computer-readable media that store instructions that, when executed by the processors, cause the computing system to perform operations.
- the operations can include, obtaining one or more spatial observations of an environment that may be captured from one or more previous camera poses. Each of the one or more spatial observations may include one or more depth observations of the environment or one or more semantic segmentation observations of the environment.
- the operations can include generating, by the computing system, a three-dimensional point cloud for the environment from the one or more spatial observations and the one or more previous camera poses.
- the operations can include projecting, by the computing system, the three-dimensional point cloud into two-dimensional space to form one or more guidance spatial observations of the environment from a target camera pose that differs from the one or more previous camera poses.
- Each of the one or more guidance spatial observations of the environment may include one or more depth images or one or more semantic segmentation images.
- the operations can include processing, by the computing system, the one or more guidance spatial observations with a machine-learned spatial observation prediction model to generate one or more predicted spatial observations of the environment from the target camera pose.
- Each of the one or more predicted spatial observations may include one or more depth images or one or more semantic segmentation images.
- Processing the one or more guidance spatial observations with the machine-learned spatial observation prediction model can include processing the one or more guidance spatial observations with an encoder model of the machine-learned spatial observation prediction model.
- the encoder model may be configured to generate a feature map from the one or more guidance spatial observations.
- Processing the one or more guidance spatial observations with the encoder model may include inputting a one-hot encoding of the one or more guidance spatial observations to the encoder model to receive the feature map.
- Processing the one or more guidance spatial observations with the machine-learned spatial observation prediction model can include sampling a latent spatial noise tensor from a noise distribution.
- the noise distribution may be a multivariate Gaussian distribution.
- Processing the one or more guidance spatial observations with the machine-learned spatial observation prediction model can include combining the feature map with the latent spatial noise tensor to generate a combined feature set. Processing the one or more guidance spatial observations with the machine-learned spatial observation prediction model can include processing the combined feature set with a decoder model of the machine-learned spatial observation prediction model.
- the decoder model may be configured to generate the one or more predicted spatial observations of the environment from the target camera pose.
- the encoder model may provide spatial information to the decoder model utilizing skip connections.
- the operations can include processing the one or more predicted spatial observations and image data associated with one or more images of the environment captured from the one or more previous camera poses with a machine-learned image prediction model to generate one or more predicted images of the environment from the target camera pose.
- the image data associated with the one or more images of the environment captured from the one or more previous camera poses may include a guidance image.
- the images of the environment may be RGB color images.
- the guidance image may include one or more images of the environment captured from the one or more previous camera poses projected onto the three-dimensional point cloud from the target camera pose.
- the operations can include outputting the one or more predicted images.
- the computer implemented method can include generating, by a computing system, one or more guidance spatial observations of an environment from a target camera pose.
- Generating the one or more guidance spatial observations of an environment from a target pose can include obtaining, by the computing system, one or more spatial observations of the environment that have been captured from the one or more previous camera poses that may differ from the target camera pose.
- Generating the one or more guidance spatial observations of an environment from a target pose can include generating, by the computing system, a three-dimensional point cloud for the environment from the one or more spatial observations and the one or more previous camera poses.
- Generating the one or more guidance spatial observations of an environment from a target pose can include projecting, by the computing system, the three-dimensional point cloud into two-dimensional space to form the one or more guidance spatial observations of the environment from target camera pose.
- the computer-implemented method can include processing, by the computing system, the one or more guidance spatial observations with a first encoder model to generate a guidance spatial observations feature map.
- Processing, by the computing system, the one or more guidance spatial observations with the first encoder model to generate the guidance spatial observations feature map can include inputting, by the computing system, a one-hot encoding of the one or more guidance spatial observations to the first encoder model to generate the guidance spatial observations feature map.
- the computer-implemented method can include processing, by the computing system, one or more ground truth spatial observations of the environment from the target camera pose with a second encoder model to generate a ground truth spatial observations feature map.
- Processing, by the computing system, the one or more ground truth spatial observations with the second encoder model to generate the ground truth spatial observations feature map may include inputting, by the computing system, a one-hot encoding of the one or more ground truth spatial observations to the second encoder model to generate the ground truth observations feature map.
- the first encoder model and the second encoder model may include weights, and the weights may be shared between the first encoder model and the second encoder model.
- the computer-implemented method can include processing, by the computing system, the guidance spatial observations feature map with a first distribution prediction model to generate one or more guidance spatial observation distribution values for a guidance spatial observation distribution.
- the first distribution prediction model can include a first convolutional neural network, and the guidance spatial observation distribution can include a first multivariate Gaussian distribution.
- the computer-implemented method can include processing, by the computing system, the ground truth spatial observations feature map with a second distribution prediction model to generate one or more ground truth observation distribution values for a ground truth observation distribution.
- the second distribution prediction model can include a second convolutional neural network, and the ground truth observation distribution can include a second multivariate Gaussian distribution.
- the computer-implemented method can include evaluating, by the computing system, a loss function that compares the guidance spatial observation distribution and the ground truth observation distribution.
- the loss function can include a Kullback-Leibler divergence function.
- the computer-implemented method can include modifying, by the computing system, one or more parameters of at least the first encoder model based on the loss function. Modifying, by the computing system, the one or more parameters of at least the first encoder model based on the loss function can include modifying the second distribution prediction model based on the loss function.
- the computer-implemented method may include obtaining, by a computing system, one or more spatial observations of an environment that have been captured from one or more previous camera poses.
- the one or more spatial observations of an environment may include one or more depth observations or one or more semantic segmentation observations.
- the computer-implemented method can include generating, by the computing system, a three-dimensional point cloud for the environment from the one or more spatial observations and the one or more previous camera poses.
- the computer-implemented method can include projecting, by the computing system, the three-dimensional point cloud into two-dimensional space to form one or more guidance spatial observations of the environment from a target camera pose that may differ from the from the one or more previous camera poses.
- the computer-implemented method can include processing, by the computing system, the one or more guidance spatial observations with a machine-learned spatial observation prediction model to generate one or more predicted spatial observations of the environment from the target camera pose.
- the computer-implemented method can include evaluating, by the computing system, a loss function that compares the one or more predicted spatial observations to a ground truth spatial observations of the environment from the target camera pose.
- the loss function may include a mean absolute error function or a cross entropy loss function.
- the mean absolute error function may generate a mean absolute error.
- the cross-entropy function may generate a cross entropy loss.
- the computer-implemented method can include modifying, by the computing system, one or more values of one or more parameters of the machine-learned
- the computer-implemented method can include generating, by a computing system, one or more predicted spatial observations of an environment from a target camera pose.
- the computer-implemented method can include processing, by the computing system, the one or more predicted spatial observations and image data associated with one or more images of the environment captured from the one or more previous camera poses with a machine-learned image prediction model to generate one or more predicted images of the environment from the target camera pose.
- the one or more predicted spatial observations may be predicted depth observations or predicted semantic segmentation observations.
- the images of the environment may be RGB color images.
- the machine-learned image prediction model may include one or more convolution blocks or one or more one or more image synthesis layers.
- the image synthesis layers may be configured to receive data from the one or more convolution blocks.
- the computer-implemented method can include evaluating, by the computing system, a loss function that compares the one or more predicted images of the environment from the target camera pose to a ground truth image of the environment from the target camera pose.
- the loss function may include a hinge loss function, a feature mapping function, or a perceptual loss function.
- the computer-implemented method may include modifying, by the computing system, one or more values of one or more parameters of the machine-learned image prediction model based on the loss function.
- FIG. 1 A depicts a block diagram of an example computing system that generates predicted visual observations of an environment according to example embodiments of the present disclosure.
- FIG. 1 B depicts a block diagram of an example computing device that generates predicted visual observations of an environment according to example embodiments of the present disclosure.
- FIG. 1 C depicts a block diagram of an example computing device that generates predicted visual observations of an environment according to example embodiments of the present disclosure.
- FIG. 1 D depicts a block diagram of an example pipeline for generating predicted images along a trajectory of unseen viewpoints according to example embodiments of the present disclosure.
- FIG. 2 depicts a block diagram of an example first stage of an example visual world model according to example embodiments of the present disclosure.
- FIG. 3 depicts a block diagram of an example second stage of an example visual world model according to example embodiments of the present disclosure.
- FIG. 4 depicts a flow chart diagram of an example method for generating predicted observations of an environment according to example embodiments of the present disclosure.
- FIG. 5 depicts a flow chart diagram of an example method for learning an improved noise distribution according to example embodiments of the present disclosure.
- FIG. 6 depicts a flow chart diagram of an example method for training a machine-learned spatial observation prediction model according to example embodiments of the present disclosure.
- FIG. 7 depicts a flow chart diagram of an example method for training a machine-learned image prediction model according to example embodiments of the present disclosure.
- FIGS. 8 A-C depict example input observations according to example embodiments of the present disclosure.
- FIG. 8 D depicts an example three-dimensional point cloud according to example embodiments of the present disclosure.
- FIGS. 8 E-F depict example guidance observations according to example embodiments of the present disclosure.
- FIGS. 8 G-H depict example predicted observations according to example aspects of the present disclosure.
- FIG. 8 I depicts an example predicted image of an environment according to example aspects of the present disclosure.
- FIG. 8 J depicts an example ground truth image for a scene according to example aspects of the present disclosure.
- the present disclosure is directed to systems and methods for generating predicted observations of an environment from multiple unobserved viewpoints.
- a machine-learned model e.g., visual world model
- the visual world model can generate one or more predicted visual observations along a trajectory based on a proposed navigation action sequence.
- the visual world model can be trained such that the predicted visual observations can be generated for environments not seen during training.
- the input to the visual world model can include a sequence of previous observations and corresponding camera poses.
- Observations can include depth observations (e.g., depth images), semantic segmentation observations (e.g., semantic segmentation images), and/or image observations (e.g., color images, RGB images).
- Depth observations can include information descriptive of the distance between a viewpoint and a plurality of points in an environment.
- Semantic segmentation observations can include information descriptive of one or more object classifications of objects of an environment.
- Image observations can contain data descriptive of the colors of objects of an environment.
- the sequence of corresponding camera poses is available from an odometry system.
- Camera intrinsics e.g., a matrix that converts between the two-dimensional camera plane and the three-dimensional world coordinate space
- Example implementations of the present disclosure can generate completions of partially visible objects from potentially unbounded viewpoint changes.
- the partially visible objects can be generated using as few as one previous observation.
- example implementations of the present disclosure can provide for solving the relatively more difficult challenge of predicting around corners. For example, given a future navigation trajectory passing the entrance of an unseen room, example implementations of the present disclosure can generate predicted visual observations spanning the entire contents of that room.
- the visual world model described herein can generate predictions that can be both temporally consistent and stochastic (e.g., the predictions can capture the full distribution of possible outcomes). Thus, revisited regions can be rendered in a consistent manner to previous observations.
- the visual world model can include a hierarchical two-stage model.
- a first stage e.g., a structure generator stage
- the model can generate a new depth image and/or segmentation image to provide a plausible high-level representation of an environment.
- the first stage can use previous semantic segmentation images and/or depth images for context.
- a second stage e.g., an image generator stage
- the model can receive from the first stage the predicted semantic and/or depth images and render them into one or more realistic RGB images.
- the second stage can use previous RGB images as context.
- one or more stages can accumulate previous observations as one or more three-dimensional point clouds.
- the one or more three-dimensional point clouds can be re-projected into two-dimensional space from a target camera pose to provide context to future predictions.
- Example implementations of the present disclosure have several possible applications including, for example, video editing, content creation, and model-based methods for artificial intelligence tasks (e.g., navigating to objects, instruction-guided navigation, dialog-guided navigation, etc.).
- Some example implementations of the present disclosure can be used, for example, for sampling-based planning, for learning policies directly from a model, and/or for counterfactual reasoning. Additionally, or alternatively, example implementations of the present disclosure may improve the sample efficiency of deep reinforcement learning.
- predicted observations generated by the visual world model described herein can improve performance on a downstream visual navigation task (e.g., vision-and-language navigation (VLN)). Reaching a navigation goal involves successfully grounding natural language instructions to visual observations, this provides a challenging task-based assessment of prediction quality.
- VLN vision-and-language navigation
- a baseline VLN agent can generate a large number of possible future trajectories using a beam search. These alternative trajectories can be ranked using an instruction-trajectory compatibility model to assess which trajectory best matches the instruction.
- the agent can then execute a first action from the top-ranked trajectory.
- the agent can then repeat the process.
- Three different planning horizons can be used, with future trajectories including 1, 2, or 3 forward steps.
- the instruction-trajectory compatibility model can be a dual-encoder that separately encodes textual instructions and trajectories (e.g., encoded using visual observations and path geometry) into a shared latent space. Performance on incomplete paths can be improved by introducing truncated paths into the original contrastive training scheme.
- the compatibility model is trained using only ground truth observations. Observations for future steps can be drawn from multiple sources including ground truth (e.g., observations from the actual environment, look ahead observations), the visual world model described herein, and/or a repeated panorama (e.g., a baseline in which the most recent observation is repeated in future steps).
- the geometry of future trajectories can be determined by ground truth navigation graphs.
- the systems and methods of the present disclosure provide a number of technical effects and benefits.
- the systems and methods can generate high-resolution visual observations (e.g., RGB observations, semantic segmentation observations, depth observations) of an environment (e.g., a scene) for viewpoints that have not yet been visited, using as few as one previous observation.
- the systems and methods can generate the observations in environments that have not been seen during training. These improvements can result in less initial observations of an environment necessary to generate predicted observations during an inference phase. Fewer initial observations can result in less processor usage, memory usage, storage usage, and network bandwidth required to generate a predicted observation.
- the ability to generate a predicted observation of an environment without training the model on that particular environment can also result in less processor usage, memory usage, storage usage, and network bandwidth required to generate a predicted observation. Additionally, the systems and methods of the present disclosure provide a practical improvement to computing technology such as, for example, machine-learning techniques by increasing the efficiency of VLN tasks and deep reinforcement learning ultimately reducing the use of computing resources.
- FIG. 1 A depicts a block diagram of an example computing system 100 that performs visual observation prediction according to example embodiments of the present disclosure.
- the system 100 includes a user computing device 102 , a server computing system 130 , and a training computing system 150 that are communicatively coupled over a network 180 .
- the user computing device 102 can be any type of computing device, such as, for example, a personal computing device (e.g., laptop or desktop), a mobile computing device (e.g., smartphone or tablet), a gaming console or controller, a wearable computing device, an embedded computing device, or any other type of computing device.
- a personal computing device e.g., laptop or desktop
- a mobile computing device e.g., smartphone or tablet
- a gaming console or controller e.g., a gaming console or controller
- a wearable computing device e.g., an embedded computing device, or any other type of computing device.
- the user computing device 102 includes one or more processors 112 and a memory 114 .
- the one or more processors 112 can be any suitable processing device (e.g., a processor core, a microprocessor, an ASIC, an FPGA, a controller, a microcontroller, etc.) and can be one processor or a plurality of processors that are operatively connected.
- the memory 114 can include one or more non-transitory computer-readable storage media, such as RAM, ROM, EEPROM, EPROM, flash memory devices, magnetic disks, etc., and combinations thereof.
- the memory 114 can store data 116 and instructions 118 which are executed by the processor 112 to cause the user computing device 102 to perform operations.
- the user computing device 102 can store or include one or more visual world models 120 .
- the visual world models 120 can be or can otherwise include various machine-learned models such as neural networks (e.g., deep neural networks) or other types of machine-learned models, including non-linear models and/or linear models.
- Neural networks can include feed-forward neural networks, recurrent neural networks (e.g., long short-term memory recurrent neural networks), convolutional neural networks or other forms of neural networks.
- Some example machine-learned models can leverage an attention mechanism such as self-attention.
- some example machine-learned models can include multi-headed self-attention models (e.g., transformer models).
- Example visual world models 120 are discussed with reference to FIGS. 2 - 3 .
- the one or more visual world models 120 can be received from the server computing system 130 over network 180 , stored in the user computing device memory 114 , and then used or otherwise implemented by the one or more processors 112 .
- the user computing device 102 can implement multiple parallel instances of a single visual world model 120 (e.g., to perform parallel predictions of visual observations across multiple instances of the visual world model 120 ).
- the visual world models can be used to generate one or more predicted visual observations (e.g., semantic segmentation image predictions, depth image predictions, and/or RGB image predictions) along a trajectory based on a proposed navigation action sequence for viewpoints that have not been visited based on one or more previous observations of an environment.
- predicted visual observations e.g., semantic segmentation image predictions, depth image predictions, and/or RGB image predictions
- one or more visual world models 140 can be included in or otherwise stored and implemented by the server computing system 130 that communicates with the user computing device 102 according to a client-server relationship.
- the visual world models 140 can be implemented by the server computing system 140 as a portion of a web service (e.g., a visual observation prediction service).
- a web service e.g., a visual observation prediction service.
- one or more models 120 can be stored and implemented at the user computing device 102 and/or one or more models 140 can be stored and implemented at the server computing system 130 .
- the user computing device 102 can also include one or more user input components 122 that receives user input.
- the user input component 122 can be a touch-sensitive component (e.g., a touch-sensitive display screen or a touch pad) that is sensitive to the touch of a user input object (e.g., a finger or a stylus).
- the touch-sensitive component can serve to implement a virtual keyboard.
- Other example user input components include a microphone, a traditional keyboard, or other means by which a user can provide user input.
- the server computing system 130 includes one or more processors 132 and a memory 134 .
- the one or more processors 132 can be any suitable processing device (e.g., a processor core, a microprocessor, an ASIC, an FPGA, a controller, a microcontroller, etc.) and can be one processor or a plurality of processors that are operatively connected.
- the memory 134 can include one or more non-transitory computer-readable storage media, such as RAM, ROM, EEPROM, EPROM, flash memory devices, magnetic disks, etc., and combinations thereof.
- the memory 134 can store data 136 and instructions 138 which are executed by the processor 132 to cause the server computing system 130 to perform operations.
- the server computing system 130 includes or is otherwise implemented by one or more server computing devices. In instances in which the server computing system 130 includes plural server computing devices, such server computing devices can operate according to sequential computing architectures, parallel computing architectures, or some combination thereof.
- the server computing system 130 can store or otherwise include one or more visual world models 140 .
- the models 140 can be or can otherwise include various machine-learned models.
- Example machine-learned models include neural networks or other multi-layer non-linear models.
- Example neural networks include feed forward neural networks, deep neural networks, recurrent neural networks, and convolutional neural networks.
- Some example machine-learned models can leverage an attention mechanism such as self-attention.
- some example machine-learned models can include multi-headed self-attention models (e.g., transformer models).
- Example models 140 are discussed with reference to FIGS. 2 - 3 .
- the user computing device 102 and/or the server computing system 130 can train the models 120 and/or 140 via interaction with the training computing system 150 that is communicatively coupled over the network 180 .
- the training computing system 150 can be separate from the server computing system 130 or can be a portion of the server computing system 130 .
- the training computing system 150 includes one or more processors 152 and a memory 154 .
- the one or more processors 152 can be any suitable processing device (e.g., a processor core, a microprocessor, an ASIC, an FPGA, a controller, a microcontroller, etc.) and can be one processor or a plurality of processors that are operatively connected.
- the memory 154 can include one or more non-transitory computer-readable storage media, such as RAM, ROM, EEPROM, EPROM, flash memory devices, magnetic disks, etc., and combinations thereof.
- the memory 154 can store data 156 and instructions 158 which are executed by the processor 152 to cause the training computing system 150 to perform operations.
- the training computing system 150 includes or is otherwise implemented by one or more server computing devices.
- the training computing system 150 can include a model trainer 160 that trains the machine-learned models 120 and/or 140 stored at the user computing device 102 and/or the server computing system 130 using various training or learning techniques, such as, for example, backwards propagation of errors.
- a loss function can be backpropagated through the model(s) to update one or more parameters of the model(s) (e.g., based on a gradient of the loss function).
- Various loss functions can be used such as mean squared error, likelihood loss, cross entropy loss, hinge loss, Kullback-Leibler (KL) divergence loss, and/or various other loss functions.
- Gradient descent techniques can be used to iteratively update the parameters over a number of training iterations.
- performing backwards propagation of errors can include performing truncated backpropagation through time.
- the model trainer 160 can perform a number of generalization techniques (e.g., weight decays, dropouts, etc.) to improve the generalization capability of the models being trained.
- the model trainer 160 can train the machine-learned models 120 and/or 140 based on a set of training data 162 .
- the training data 162 can include, for example, 360-degree panoramas in equirectangular format and a three-dimensional textured mesh annotated with semantic classes. Feasible trajectories can be defined using navigation graphs in which nodes can correspond to panoramic image locations and edges can define navigable state transitions.
- the first and second stages of the visual world model can be trained separately or jointly.
- the first stage can be trained with rendered ground-truth depth and semantic images.
- the training data can be augmented by perturbing the viewpoint coordinates with a random Gaussian noise vector (e.g., N(0,0.2m)) independently along each three-dimensional axis.
- the second stage can be trained with RGB panoramas, rendered ground-truth depth images, and/or semantic segmentation images.
- the training data can be augmented by randomly chopping and horizontally rolling the panoramas.
- the model trainer can train the visual world models using a training dataset.
- One example training dataset contains a significant number of RGB-D images from a number of different building-scale indoor environments.
- the training dataset can also include a textured three-dimensional mesh which is annotated with a number of different semantic classes of objects and building components.
- a plurality of trajectories can be sampled from the dataset and for each trajectory a plurality of panoramas can be sampled, choosing the starting node and the edge transitions uniformly at random.
- the viewpoints in these trajectories can be, for example, two meters apart from each other.
- the training examples can be provided by the user computing device 102 .
- the model 120 provided to the user computing device 102 can be trained by the training computing system 150 on user-specific data received from the user computing device 102 . In some instances, this process can be referred to as personalizing the model.
- the model trainer 160 includes computer logic utilized to provide desired functionality.
- the model trainer 160 can be implemented in hardware, firmware, and/or software controlling a general purpose processor.
- the model trainer 160 includes program files stored on a storage device, loaded into a memory and executed by one or more processors.
- the model trainer 160 includes one or more sets of computer-executable instructions that are stored in a tangible computer-readable storage medium such as RAM, hard disk, or optical or magnetic media.
- the network 180 can be any type of communications network, such as a local area network (e.g., intranet), wide area network (e.g., Internet), or some combination thereof and can include any number of wired or wireless links.
- communication over the network 180 can be carried via any type of wired and/or wireless connection, using a wide variety of communication protocols (e.g., TCP/IP, HTTP, SMTP, FTP), encodings or formats (e.g., HTML, XML), and/or protection schemes (e.g., VPN, secure HTTP, SSL).
- the machine-learned models described in this specification may be used in a variety of tasks, applications, and/or use cases.
- the input to the machine-learned model(s) of the present disclosure can be image data.
- the machine-learned model(s) can process the image data to generate an output.
- the machine-learned model(s) can process the image data to generate an image recognition output (e.g., a recognition of the image data, a latent embedding of the image data, an encoded representation of the image data, a hash of the image data, etc.).
- the machine-learned model(s) can process the image data to generate an image segmentation output (e.g., semantic segmentation image).
- the machine-learned model(s) can process the image data to generate an image classification output.
- the machine-learned model(s) can process the image data to generate an image data modification output (e.g., an alteration of the image data, etc.).
- the machine-learned model(s) can process the image data to generate an encoded image data output (e.g., an encoded and/or compressed representation of the image data, etc.).
- the machine-learned model(s) can process the image data to generate an upscaled image data output.
- the machine-learned model(s) can process the image data to generate a prediction output (e.g., predicted observation).
- the input to the machine-learned model(s) of the present disclosure can be text or natural language data (e.g., vision-and-language navigation instructions).
- the machine-learned model(s) can process the text or natural language data to generate an output.
- the machine-learned model(s) can process the natural language data to generate a language encoding output.
- the machine-learned model(s) can process the text or natural language data to generate a latent text embedding output.
- the machine-learned model(s) can process the text or natural language data to generate a translation output.
- the machine-learned model(s) can process the text or natural language data to generate a classification output.
- the machine-learned model(s) can process the text or natural language data to generate a textual segmentation output.
- the machine-learned model(s) can process the text or natural language data to generate a semantic intent output.
- the machine-learned model(s) can process the text or natural language data to generate an upscaled text or natural language output (e.g., text or natural language data that is higher quality than the input text or natural language, etc.).
- the machine-learned model(s) can process the text or natural language data to generate a prediction output.
- the input to the machine-learned model(s) of the present disclosure can be speech data (e.g., vision-and-language navigation instructions).
- the machine-learned model(s) can process the speech data to generate an output.
- the machine-learned model(s) can process the speech data to generate a speech recognition output.
- the machine-learned model(s) can process the speech data to generate a speech translation output.
- the machine-learned model(s) can process the speech data to generate a latent embedding output.
- the machine-learned model(s) can process the speech data to generate an encoded speech output (e.g., an encoded and/or compressed representation of the speech data, etc.).
- an encoded speech output e.g., an encoded and/or compressed representation of the speech data, etc.
- the machine-learned model(s) can process the speech data to generate an upscaled speech output (e.g., speech data that is higher quality than the input speech data, etc.).
- the machine-learned model(s) can process the speech data to generate a textual representation output (e.g., a textual representation of the input speech data, etc.).
- the machine-learned model(s) can process the speech data to generate a prediction output.
- the input to the machine-learned model(s) of the present disclosure can be latent encoding data (e.g., a latent noise tensor).
- the machine-learned model(s) can process the latent encoding data to generate an output.
- the machine-learned model(s) can process the latent encoding data to generate a recognition output.
- the machine-learned model(s) can process the latent encoding data to generate a reconstruction output.
- the machine-learned model(s) can process the latent encoding data to generate a search output.
- the machine-learned model(s) can process the latent encoding data to generate a reclustering output.
- the machine-learned model(s) can process the latent encoding data to generate a prediction output.
- the input to the machine-learned model(s) of the present disclosure can be statistical data (e.g., observation distribution).
- Statistical data can be, represent, or otherwise include data computed and/or calculated from some other data source.
- the machine-learned model(s) can process the statistical data to generate an output.
- the machine-learned model(s) can process the statistical data to generate a recognition output.
- the machine-learned model(s) can process the statistical data to generate a prediction output.
- the machine-learned model(s) can process the statistical data to generate a classification output.
- the machine-learned model(s) can process the statistical data to generate a segmentation output.
- the machine-learned model(s) can process the statistical data to generate a visualization output.
- the machine-learned model(s) can process the statistical data to generate a diagnostic output.
- the input to the machine-learned model(s) of the present disclosure can be sensor data (e.g., distance information, LIDAR).
- the machine-learned model(s) can process the sensor data to generate an output.
- the machine-learned model(s) can process the sensor data to generate a recognition output.
- the machine-learned model(s) can process the sensor data to generate a prediction output.
- the machine-learned model(s) can process the sensor data to generate a classification output.
- the machine-learned model(s) can process the sensor data to generate a segmentation output.
- the machine-learned model(s) can process the sensor data to generate a visualization output.
- the machine-learned model(s) can process the sensor data to generate a diagnostic output.
- the machine-learned model(s) can process the sensor data to generate a detection output.
- the input includes visual data and the task is a computer vision task.
- the input includes pixel data for one or more images (e.g., observations) and the task is an image processing task (e.g., observation prediction).
- the image processing task can be image classification, where the output is a set of scores, each score corresponding to a different object class and representing the likelihood that the one or more images depict an object belonging to the object class.
- the image processing task may be object detection, where the image processing output identifies one or more regions in the one or more images and, for each region, a likelihood that region depicts an object of interest.
- the image processing task can be image segmentation (e.g., semantic segmentation image), where the image processing output defines, for each pixel in the one or more images, a respective likelihood for each category in a predetermined set of categories.
- the set of categories can be foreground and background.
- the set of categories can be object classes.
- the image processing task can be depth estimation (e.g., depth images), where the image processing output defines, for each pixel in the one or more images, a respective depth value.
- the image processing task can be motion estimation, where the network input includes multiple images, and the image processing output defines, for each pixel of one of the input images, a motion of the scene depicted at the pixel between the images in the network input.
- FIG. 1 A illustrates one example computing system that can be used to implement the present disclosure.
- the user computing device 102 can include the model trainer 160 and the training dataset 162 .
- the models 120 can be both trained and used locally at the user computing device 102 .
- the user computing device 102 can implement the model trainer 160 to personalize the models 120 based on user-specific data.
- FIG. 1 B depicts a block diagram of an example computing device 10 that performs according to example embodiments of the present disclosure.
- the computing device 10 can be a user computing device or a server computing device.
- the computing device 10 includes a number of applications (e.g., applications 1 through N). Each application contains its own machine learning library and machine-learned model(s). For example, each application can include a machine-learned model.
- Example applications include a text messaging application, an email application, a dictation application, a virtual keyboard application, a browser application, etc.
- each application can communicate with a number of other components of the computing device, such as, for example, one or more sensors, a context manager, a device state component, and/or additional components.
- each application can communicate with each device component using an API (e.g., a public API).
- the API used by each application is specific to that application.
- FIG. 1 C depicts a block diagram of an example computing device 50 that performs according to example embodiments of the present disclosure.
- the computing device 50 can be a user computing device or a server computing device.
- the computing device 50 includes a number of applications (e.g., applications 1 through N). Each application is in communication with a central intelligence layer.
- Example applications include a text messaging application, an email application, a dictation application, a virtual keyboard application, a browser application, etc.
- each application can communicate with the central intelligence layer (and model(s) stored therein) using an API (e.g., a common API across all applications).
- the central intelligence layer includes a number of machine-learned models. For example, as illustrated in FIG. 1 C , a respective machine-learned model can be provided for each application and managed by the central intelligence layer. In other implementations, two or more applications can share a single machine-learned model. For example, in some implementations, the central intelligence layer can provide a single model for all of the applications. In some implementations, the central intelligence layer is included within or otherwise implemented by an operating system of the computing device 50 .
- the central intelligence layer can communicate with a central device data layer.
- the central device data layer can be a centralized repository of data for the computing device 50 . As illustrated in FIG. 1 C , the central device data layer can communicate with a number of other components of the computing device, such as, for example, one or more sensors, a context manager, a device state component, and/or additional components. In some implementations, the central device data layer can communicate with each device component using an API (e.g., a private API).
- an API e.g., a private API
- FIG. 1 D depicts a block diagram of an example system for generating predicted images along a trajectory of unseen viewpoints.
- the example system illustrated in FIG. 1 D can obtain one or more spatial observations 12 of an environment that have been captured from one or more previous camera poses.
- the system can generate (e.g., by execution of a point cloud builder 14 encoded in computer-readable instructions) a three-dimensional point cloud 16 for the environment from the one or more spatial observations 12 and the one or more previous camera poses.
- the system can project (e.g., by execution of a projector 18 encoded in computer-readable instructions) the three-dimensional point cloud 16 into two-dimensional space to form one or more guidance spatial observations 20 of the environment from a target camera pose that differs from the one or more previous camera poses.
- a machine-learned spatial observation prediction model 22 can process the one or more guidance spatial observations 20 to generate one or more predicted spatial observations 24 of the environment from the target camera pose.
- a machine-learned image prediction model 26 can process the one or more predicted spatial observations 24 and image data 25 associated with one or more images of the environment captured from the one or more previous camera poses to generate one or more predicted images 28 of the environment from the target camera pose.
- the system can output the one or more predicted images 28 .
- Example implementations of the present disclosure provide for a first stage (e.g., a structure generator stage) suitable for generating one or more predicted observations (e.g., segmentation image(s) and/or depth image(s) ).
- a first stage e.g., a structure generator stage
- the structure generator can receive as input one or more spatial observations of an environment 201 that have been captured from one or more previous camera poses T 1:t-1 .
- the spatial observations 201 can include depth image(s) d 1:t-1 and/or semantic segmentation image(s) s 1:t-1 .
- the structure generator can generate a three-dimensional point cloud 202 for the environment from the one or more spatial observations 201 and the one or more previous camera poses.
- the structure generator can re-project the three-dimensional point cloud back into two-dimensional space 203 to form one or more guidance spatial observations (e.g., guidance depth image(s) d′ t and/or guidance semantic segmentation image(s) s′ t ) 205 of the environment from a target camera pose T t 204 that differs from the one or more previous camera poses.
- guidance spatial observations e.g., guidance depth image(s) d′ t and/or guidance semantic segmentation image(s) s′ t
- the structure generator can process the one or more guidance spatial observations 205 with a machine-learned spatial observation prediction model to generate one or more predicted spatial observations of the environment from the camera pose (e.g., predicted depth image(s) and/or predicted semantic segmentation image(s) ) 212 .
- the machine-learned spatial observation prediction model can contain an encoder-decoder model 206 . See, e.g., Jindong Jiang et al., RedNet: Residual Encoder - Decoder Network for indoor RGB - D Semantic Segmentation (2016), https://arxiv.org/pdf/1806.01054.pdf.
- the encoder-decoder model can use transposed convolutions for upsampling in the decoder 211 and/or skip connections between the encoder 207 and decoder 209 to preserve spatial information.
- the machine-learned spatial observation prediction model can process the one or more guidance spatial observations with an encoder model 207 .
- the encoder model can receive as input a one-hot encoding of semantic guidance image(s) 205 , which may be formally represented as s′ t ⁇ R W ⁇ H ⁇ C .
- the encoder model can receive as input a one-hot encoding of depth guidance image(s) 205 , which may be formally represented as d′ t ⁇ .
- the encoder model can receive as input a concatenation of the one-hot encoding of both the semantic guidance image(s) and the depth guidance image(s).
- the encoder model can be configured to generate a feature map from the one or more guidance spatial observations. In some implementations, the encoder-decoder model is not pretrained.
- a latent spatial noise tensor (e.g., random noise tensor) z t 213 can be introduced into the model in between the encoder model 207 and decoder model 209 by concatenating 208 the latent spatial noise tensor with the feature map generated by the encoder model.
- the latent spatial noise tensor 213 can be generated by a machine-learned noise generation model 214 .
- the decoder model 209 can process the combined feature map to generate the one or more predicted spatial observations (e.g., predicted segmentation image(s) and/or predicted depth image(s) ) of the environment from the target camera pose 212 .
- the output of the decoder model 209 can be processed with a convolution block 211 .
- Predicted semantic segmentation observations can be processed with a C-way softmax function.
- Predicted depth observations can be processed with a sigmoid function and normalized in the range (0,1).
- the predicted observations can be back-projected and added to the three-dimensional point cloud to assist future predictions.
- the latent spatial noise tensor can be generated by sampling from an improved noise distribution (e.g., a conditional prior noise distribution) 216 , which may be formally represented as p ⁇ (z t
- an improved noise distribution e.g., a conditional prior noise distribution
- the latent spatial noise tensor can carry the stochastic information about the next observation that the deterministic encoder may not be able to capture.
- one or more spatial observations of an environment can be captured from one or more previous camera poses that differ from a target camera pose 201 .
- a three-dimensional point cloud can be generated for the environment from the one or more spatial observations and the one or more previous camera poses 202 .
- the three-dimensional point cloud can be projected back into two-dimensional space 203 to form one or more guidance spatial observations 205 of the environment from the target camera pose 204 .
- the one or more guidance spatial observations can be processed with a first encoder model 207 to generate a guidance spatial observations feature map.
- One or more ground truth spatial observations of the environment 221 can be obtained from the target camera pose 204 and processed with a second encoder model 220 to generate a ground truth spatial observations feature map 219 .
- the guidance spatial observations feature map, and the ground truth observations feature map can be further processed by distribution prediction models to generate one or more guidance spatial observation distribution values 216 for a guidance spatial observation distribution and one or more ground truth spatial observation distribution values 218 for a ground truth spatial observation distribution, respectively.
- a loss function can be used to compare the guidance spatial observation distribution and the ground truth observation distribution to generate a loss value 217 .
- One or more parameters of at least the first encoder model can be modified based on the loss value.
- One or more parameters of the second distribution prediction model can also be modified based on the loss value.
- a prior distribution 216 can be forced to become close to a posterior distribution 218 by a KL-divergence loss function 217 .
- the posterior distribution is generated by the output of a first encoder model 207 and the posterior distribution is generated from the output of a second encoder model 220 which can receive as input ground truth semantic segmentation and/or depth observations.
- the first encoder model and the second encoder model can include shared weights 223 .
- the distributions can be modeled using three-layer convolutional neural networks 215 , 219 that take their input from an encoder and output two channels representing ⁇ and a to parametrize multi-variate Gaussian distributions ( ⁇ , a) 216 , 218 .
- the overall structure generator can be trained to minimize a joint loss including a cross entropy loss L ce for semantic predictions, a mean absolute error term for depth predictions, and/or the KL-divergence term for the noise tensor. This may be represented formally as:
- ⁇ ce , ⁇ d , and ⁇ KL can represent weights which can be, for example, determined by a grid search. These weights can, for example, be set to 1, 100, and 0.5, respectively.
- the latent noise tensor can be sampled from a previously learned improved noise distribution 216 , also referred to as a prior distribution, and the posterior distribution 218 is not used. Circular padding can be used (e.g., on the image x-axis) to avoid heading discontinuities during inference.
- the resolution (e.g., 512 ⁇ 256) of the semantic segmentation and/or depth outputs can be upsampled to a higher resolution (e.g., 1024 ⁇ 512) using interpolation (e.g., nearest neighbor interpolation).
- the latent spatial noise tensor can be set to the mean of the conditional prior noise distribution.
- machine-learned models 206 and 214 can together correspond to the machine-learned spatial observation prediction model 22 of FIG. 1 D .
- FIG. 3 depicts an example second stage (e.g., an image generator stage) 300 suitable for generating realistic image(s) (e.g., RGB image(s)) from predicted semantic segmentation observations and/or depth observations .
- the image generator can receive, as input, predicted observations of an environment 301 from, for example, the structure generator, and image data associated with the one or more images of the environment.
- the image data can include, for example, a guidance image (e.g., a RGB guidance image) I′ t 306 generated by back-projecting an RGB three-dimensional point cloud including previous RGB image(s) from a target camera pose.
- the image generator can process the one or more predicted spatial observations and image data associated with the one or more images of the environment captured from the one or more previous camera poses with a machine-learned image prediction model to generate one or more predicted images of the environment from the target camera pose.
- the machine-learned image prediction model can contain one or more convolution blocks 303 and one or more image synthesis layers 304 .
- the image synthesis layers can be configured to receive data from the one or more convolution blocks.
- the machine-learned image prediction model can use one or more residual blocks 305 for image synthesis. See, e.g., Taesung Park et al., Semantic Image Synthesis with Spatially - Adaptive Normalization, in 2019 IEEE/CVF Conference on Computer Vision and Pattern Recognition 2332 (2019).
- the residual blocks can use spatially-adaptive normalization layers 307 to insert context into multiple layers of the model.
- the residual blocks can contain one or more normalization layers 307 , 309 .
- each residual block can contain a normalization layer conditioned on the semantic and/or depth inputs 307 , and a normalization layer conditioned on the guidance image 306 .
- the sparsity of the guidance image(s) can be handled by applying partial convolutions 308 , 310 .
- the image generator can include seven residual blocks 305 , preceded by a single convolution block 303 . Circular padding can be used on the image (e.g., the image x-axis) to avoid heading discontinuities during inference.
- one or more predicted spatial observations of an environment from a target camera pose can be generated 301 .
- the one or more predicted spatial observations and image data associated with one or more images of the environment captured from one or more previous camera poses can be processed to generate one or more predicted images of the environment from the target camera pose 311 .
- a loss function 312 that compares the one or more predicted images of the environment to ground truth image(s) of the environment from the target camera pose can be used to evaluate a loss value.
- the loss function 312 can contain a hinge loss function, a feature matching loss function, and/or a perceptual loss function.
- One or more values of one or more parameters of the machine-learned image prediction model can be modified based on the loss value.
- the model can be trained with various machine-learning techniques.
- the model can include a generative adversarial network (GAN) trained via one or more generative adversarial techniques.
- GAN generative adversarial network
- the GAN can include a model that can learn a mapping from an input image (e.g., predicted observation, ground truth observation) and a random noise vector to an output image.
- the GAN can include a generator model that can be trained to produce outputs that cannot be distinguished from the input images by an adverarially trained discriminator model, which is trained to do as well as possible at discriminating between the input images and the output of the generator model.
- the discriminator can be configured to only penalize structure at the scale of patches. See, e.g., id. at 5969-5970.
- a loss function associated with one or more GANs can include a hinge loss function and/or a feature matching loss function. See, e.g., Ting-Chun Wang et al., High - Resolution Image Synthesis and Semantic Manipulation with Conditional GANs, in 2018 IEEE Conference on Computer Vision and Pattern Recognition 8798 (2016).
- the model can also be trained with a perceptual loss from a pretrained VGG-19 model. See, e.g., Justin Johnson et al., Perceptual Losses for Real - Time Style Transfer and Super - Resolution (2016), https://arxiv.org/pdf/1603.08155.pdf.
- the model can be trained with a generative adversarial network model hinge loss, feature mapping (FM) loss, and a perceptual loss from a pretrained VGG-19 model.
- the image generator can be provided ground-truth semantic segmentation image(s) and/or ground-truth depth image(s).
- the GAN 313 can receive, as input, the concatenation of the ground-truth image I t or generated image , the ground-truth depth image d t , and/or the ground-truth semantic segmentation image s t .
- the discriminator only penalizes structure at the scale of patches.
- the losses L for the generator G and the discriminator D may be represented formally by
- x t (s t , d t , I′ t ) denotes the complete set of inputs to the generator
- ⁇ (i) denotes the intermediate output of the i th layer of the pretrained VGG-19 network
- D (i) denotes the output of the discriminator's i-th layer
- the conditioning inputs s t , d t to the discriminator have been dropped to save space.
- ⁇ GAN , ⁇ VGG , and ⁇ FM can represent weights for the generative adversarial network model (GAN) hinge loss, VGG model perceptual loss, and the feature matching model, respectively.
- GAN generative adversarial network model
- components 303 and 304 of FIG. 3 can correspond to the machine-learned image prediction model 26 of FIG. 1 D .
- FIG. 4 depicts a flow chart diagram of an example method for generating predicted observations of an environment according to example embodiments of the present disclosure.
- FIG. 4 depicts steps performed in a particular order for purposes of illustration and discussion, the methods of the present disclosure are not limited to the particularly illustrated order or arrangement.
- the various steps of the method 400 can be omitted, rearranged, combined, and/or adapted in various ways without deviating from the scope of the present disclosure.
- Observations can include depth observations, semantic segmentation observations, and/or color (e.g., RGB) observations.
- a computing system can obtain one or more spatial observations of an environment that may be captured from one or more previous camera poses.
- the computing system can obtain one or more spatial observations of an environment from a user device (e.g., a smartphone, laptop, camera, etc.).
- the computing system can obtain the spatial observations from the user device over a computer network (e.g., the internet).
- the computing system can generate a three-dimensional point cloud for the environment from the one or more spatial observations and the one or more previous camera poses.
- the three-dimensional point cloud can include data descriptive of semantic segmentation information, depth information, or RGB information.
- the computing system can project the three-dimensional point cloud into two-dimensional space to form one or more guidance spatial observations of the environment from a target camera pose that differs from the one or more previous camera poses.
- the computing system can process the one or more guidance spatial observations with a machine-learned spatial observation prediction model to generate one or more predicted spatial observations of the environment from the target camera pose.
- Processing the one or more guidance spatial observations with the machine-learned spatial observation prediction model can include processing the one or more guidance spatial observations with an encoder model of the machine-learned spatial observation prediction model.
- the encoder model may be configured to generate a feature map from the one or more guidance spatial observations.
- Processing the one or more guidance spatial observations with the encoder model may include inputting a one-hot encoding of the one or more guidance spatial observations to the encoder model to receive the feature map.
- Processing the one or more guidance spatial observations with the machine-learned spatial observation prediction model can include sampling a latent spatial noise tensor from a noise distribution.
- the noise distribution can be a multivariate Gaussian distribution.
- Processing the one or more guidance spatial observations with the machine-learned spatial observation prediction model can include combining the feature map with the latent spatial noise tensor to generate a combined feature set.
- Processing the one or more guidance spatial observations with the machine-learned spatial observation prediction model can include processing the combined feature set with a decoder model of the machine-learned spatial observation prediction model.
- the decoder model may be configured to generate the one or more predicted spatial observations of the environment from the target camera pose.
- the encoder model may provide spatial information to the decoder model utilizing skip connections.
- the computing system can process the one or more predicted spatial observations and image data associated with one or more images of the environment captured from the one or more previous camera poses with a machine-learned image prediction model to generate one or more predicted images of the environment from the target camera pose.
- the image data associated with the one or more images of the environment captured from the one or more previous camera poses may include a guidance image.
- the images of the environment may be color (e.g., RGB) images.
- the guidance image may include one or more images of the environment captured from the one or more previous camera poses projected onto the three-dimensional point cloud from the target camera pose.
- the computing system can output the one or more predicted images.
- Outputting the one or more predicted images can include transmitting the predicted images over a computing network to a user device (e.g., a smartphone, laptop, etc.).
- a user device e.g., a smartphone, laptop, etc.
- FIG. 5 depicts a flow chart diagram of an example method for learning an improved noise distribution according to example embodiments of the present disclosure.
- FIG. 5 depicts steps performed in a particular order for purposes of illustration and discussion, the methods of the present disclosure are not limited to the particularly illustrated order or arrangement.
- the various steps of the method 500 can be omitted, rearranged, combined, and/or adapted in various ways without deviating from the scope of the present disclosure.
- a computing system can generate one or more guidance spatial observations of an environment from a target camera pose.
- the guidance spatial observations of an environment from a target camera pose can be generated by obtaining one or more spatial observations of the environment that have been captured from one or more previous camera poses that differ from the target camera pose, generating a three-dimensional point cloud for the environment from the one or more spatial observations and the one or more previous camera poses, and projecting the three-dimensional point cloud into two-dimensional space to form the one or more guidance spatial observations of the environment form the target camera pose.
- the observations can be semantic segmentation observations and/or depth observations.
- the computing system can process the one or more guidance spatial observations with a first encoder model to generate a guidance spatial observations feature map.
- the first encoder model can receive, as input, a one-hot encoding of the guidance spatial observations.
- the computing system can process one or more ground truth spatial observations of the environment from the target camera pose with a second encoder model to generate a ground truth spatial observations feature map.
- the second encoder model can receive, as input, a one-hot encoding of the ground truth spatial observations.
- the computing system can process the guidance spatial observations feature map with a first distribution prediction model to generate one or more guidance spatial observation distribution values for a guidance spatial observation distribution.
- the first distribution prediction model is a convolutional neural network.
- the guidance spatial observation distribution is a multivariate Gaussian distribution.
- the computing system can process the ground truth spatial observations feature map with a second distribution prediction model to generate one or more ground truth observation distribution values for a ground truth observation distribution.
- the second distribution prediction model is a convolutional neural network.
- the ground truth observation distribution is a multivariate Gaussian distribution.
- the computing system can evaluate a loss function (e.g., a KL-divergence loss function) that compares the guidance spatial observation distribution and the ground truth observation distribution.
- a loss function e.g., a KL-divergence loss function
- the computing system can modify one or more parameters of at least the first encoder model based on the loss function.
- the computing system can modify parameters of the second encoder model. Additionally, or alternatively, the computing system can modify parameters of the first distribution prediction model and/or second distribution prediction model.
- FIG. 6 depicts a flow chart diagram of an example method for training a machine-learned spatial observation prediction model.
- FIG. 6 depicts steps performed in a particular order for purposes of illustration and discussion, the methods of the present disclosure are not limited to the particularly illustrated order or arrangement. The various steps of the method 600 can be omitted, rearranged, combined, and/or adapted in various ways without deviating from the scope of the present disclosure
- a computing system can obtain one or more spatial observations of an environment that have been captured from one or more previous camera poses.
- the spatial observations can include semantic segmentation observations and/or depth observations.
- the computing system can generate a three-dimensional point cloud for the environment from the one or more spatial observations and the one or more previous camera poses.
- the computing system can project the three-dimensional point cloud into two-dimensional space to form one or more guidance spatial observations of the environment from a target camera pose that differs from the one or more previous camera poses.
- the computing system can process the one or more guidance spatial observations with a machine-learned spatial observation prediction model to generate one or more predicted spatial observations of the environment from the target camera pose.
- the computing system can evaluate a loss function (e.g., a KL-divergence loss function) that compares the one or more predicted spatial observations to one or more ground truth spatial observations of the environment from the target camera pose.
- a loss function e.g., a KL-divergence loss function
- the computing system can modify one or more values of one or more parameters of the machine-learned spatial observation prediction model (e.g., encoder, decoder, distribution prediction model, noise tensor, etc.) based on the loss function.
- the machine-learned spatial observation prediction model e.g., encoder, decoder, distribution prediction model, noise tensor, etc.
- FIG. 7 depicts a flow chart diagram of an example method for training a machine-learned image prediction model according to example embodiments of the present disclosure.
- FIG. 7 depicts steps performed in a particular order for purposes of illustration and discussion, the methods of the present disclosure are not limited to the particularly illustrated order or arrangement.
- the various steps of the method 700 can be omitted, rearranged, combined, and/or adapted in various ways without deviating from the scope of the present disclosure.
- a computing system can generate one or more predicted spatial observations of an environment (e.g., predicted depth observations and/or predicted semantic segmentation observations) from a target camera pose.
- the computing system can generate the predicted spatial observations via the systems and methods described herein.
- the computing system can process the one or more predicted spatial observations and image data associated with one or more images (e.g., RGB images) of the environment captured from the one or more previous camera poses with a machine-learned image prediction model to generate one or more predicted images (e.g., RGB images) of the environment from the target camera pose.
- the machine-learned image prediction model can include one or more convolution blocks, and/or one or more image synthesis layers.
- the image synthesis layers can be configured to receive data from the one or more convolution blocks.
- the computing system can evaluate a loss function that compares the one or more predicted images of the environment from the target camera pose to a ground truth image of the environment from the target camera pose.
- the loss function can include a hinge loss function, a feature matching loss function, and/or a perceptual loss function.
- the computing system can modify one or more values of one or more parameters of the machine-learned image prediction model (e.g., convolution blocks, image synthesis layers) based on the loss function.
- the machine-learned image prediction model e.g., convolution blocks, image synthesis layers
- Example implementations of the present disclosure tested the proposed systems and methods on a number of real-world environments. Particularly, the proposed systems and methods were tested on indoor environments. Representative images from various points in the visual world model are shown in FIGS. 8 A- 8 J .
- FIG. 8 A illustrates an example input RGB image of an indoor environment captured from a previous camera pose.
- FIGS. 8 B and 8 C illustrate a corresponding input semantic segmentation image and depth image, respectively, of the indoor environment captured from the same previous camera pose.
- FIG. 8 D illustrates an example three-dimensional point cloud of the environment illustrated in FIG. 8 A-C .
- FIGS. 8 E-F illustrate example guidance observations (semantic segmentation and RGB, respectively) generated by projecting the three-dimensional point cloud of FIG. 8 D into two-dimensional space from a target camera pose that differs from the previous camera pose of FIGS. 8 A-C .
- FIG. 8 G illustrates an example predicted semantic segmentation observation generated by processing the semantic segmentation guidance image illustrated in FIG. 8 E with the first stage of the visual world model described herein.
- FIG. 8 H illustrates an example predicted depth observation generated by processing the semantic segmentation guidance image illustrated in FIG. 8 E with the first stage of the visual world model described herein.
- FIG. 8 I illustrates an example predicted RGB image generated by processing the RGB guidance image illustrated in FIG. 8 F and the predicted observations of FIGS. 8 G and 8 H with the second stage of the visual world model described herein.
- FIG. 8 J illustrates an example ground truth RGB image of the environment from the target pose.
- the technology discussed herein makes reference to servers, databases, software applications, and other computer-based systems, as well as actions taken and information sent to and from such systems.
- the inherent flexibility of computer-based systems allows for a great variety of possible configurations, combinations, and divisions of tasks and functionality between and among components.
- processes discussed herein can be implemented using a single device or component or multiple devices or components working in combination.
- Databases and applications can be implemented on a single system or distributed across multiple systems. Distributed components can operate sequentially or in parallel.
Abstract
A computing system for generating predicted images along a trajectory of unseen viewpoints. The system can obtain one or more spatial observations of an environment that may be captured from one or more previous camera poses. The system can generate a three-dimensional point cloud for the environment from the one or more spatial observations and the one or more previous camera poses. The system can project the three-dimensional point cloud into two-dimensional space to form one or more guidance spatial observations. The system can process the one or more guidance spatial observations with a machine-learned spatial observation prediction model to generate one or more predicted spatial observations. The system can process the one or more predicted spatial observations and image data with a machine-learned image prediction model to generate one or more predicted images from the target camera pose. The system can output the one or more predicted images.
Description
- The present disclosure relates generally to generating visual observations of an environment. More particularly, the present disclosure relates to systems and methods for generating predicted visual observations of an environment using machine-learned models and training the machine-learned models.
- World models, or models of environments, are an appealing way to represent a computing agent's knowledge about its surroundings. An agent with a world model can predict its future by predicting the consequences of a series of proposed actions. However, models that generate predicted visual observations have typically been limited to relatively simple environments, such as video games. Previous models have been proposed to represent three-dimensional scenes, including point cloud representations, layered depth images, and mesh representations. A significant drawback of previous models is that they require a large number of input views to render a single scene (e.g., 20-62 images per scene). Furthermore, these models are typically trained to represent a single scene, and currently do not generalize well to unseen environments.
- Aspects and advantages of embodiments of the present disclosure will be set forth in part in the following description, or can be learned from the description, or can be learned through practice of the embodiments.
- One example aspect of the present disclosure is directed to a computing system for generating predicted images along a trajectory of unseen viewpoints. The computing system can include one or more processors and one or more non-transitory computer-readable media that store instructions that, when executed by the processors, cause the computing system to perform operations. The operations can include, obtaining one or more spatial observations of an environment that may be captured from one or more previous camera poses. Each of the one or more spatial observations may include one or more depth observations of the environment or one or more semantic segmentation observations of the environment. The operations can include generating, by the computing system, a three-dimensional point cloud for the environment from the one or more spatial observations and the one or more previous camera poses. The operations can include projecting, by the computing system, the three-dimensional point cloud into two-dimensional space to form one or more guidance spatial observations of the environment from a target camera pose that differs from the one or more previous camera poses. Each of the one or more guidance spatial observations of the environment may include one or more depth images or one or more semantic segmentation images. The operations can include processing, by the computing system, the one or more guidance spatial observations with a machine-learned spatial observation prediction model to generate one or more predicted spatial observations of the environment from the target camera pose. Each of the one or more predicted spatial observations may include one or more depth images or one or more semantic segmentation images. Processing the one or more guidance spatial observations with the machine-learned spatial observation prediction model can include processing the one or more guidance spatial observations with an encoder model of the machine-learned spatial observation prediction model. The encoder model may be configured to generate a feature map from the one or more guidance spatial observations. Processing the one or more guidance spatial observations with the encoder model may include inputting a one-hot encoding of the one or more guidance spatial observations to the encoder model to receive the feature map. Processing the one or more guidance spatial observations with the machine-learned spatial observation prediction model can include sampling a latent spatial noise tensor from a noise distribution. The noise distribution may be a multivariate Gaussian distribution. Processing the one or more guidance spatial observations with the machine-learned spatial observation prediction model can include combining the feature map with the latent spatial noise tensor to generate a combined feature set. Processing the one or more guidance spatial observations with the machine-learned spatial observation prediction model can include processing the combined feature set with a decoder model of the machine-learned spatial observation prediction model. The decoder model may be configured to generate the one or more predicted spatial observations of the environment from the target camera pose. The encoder model may provide spatial information to the decoder model utilizing skip connections. The operations can include processing the one or more predicted spatial observations and image data associated with one or more images of the environment captured from the one or more previous camera poses with a machine-learned image prediction model to generate one or more predicted images of the environment from the target camera pose. The image data associated with the one or more images of the environment captured from the one or more previous camera poses may include a guidance image. The images of the environment may be RGB color images. The guidance image may include one or more images of the environment captured from the one or more previous camera poses projected onto the three-dimensional point cloud from the target camera pose. The operations can include outputting the one or more predicted images.
- Another example aspect of the present disclosure is directed to a computer-implemented method for learning an improved noise distribution. The computer implemented method can include generating, by a computing system, one or more guidance spatial observations of an environment from a target camera pose. Generating the one or more guidance spatial observations of an environment from a target pose can include obtaining, by the computing system, one or more spatial observations of the environment that have been captured from the one or more previous camera poses that may differ from the target camera pose. Generating the one or more guidance spatial observations of an environment from a target pose can include generating, by the computing system, a three-dimensional point cloud for the environment from the one or more spatial observations and the one or more previous camera poses. Generating the one or more guidance spatial observations of an environment from a target pose can include projecting, by the computing system, the three-dimensional point cloud into two-dimensional space to form the one or more guidance spatial observations of the environment from target camera pose. The computer-implemented method can include processing, by the computing system, the one or more guidance spatial observations with a first encoder model to generate a guidance spatial observations feature map. Processing, by the computing system, the one or more guidance spatial observations with the first encoder model to generate the guidance spatial observations feature map can include inputting, by the computing system, a one-hot encoding of the one or more guidance spatial observations to the first encoder model to generate the guidance spatial observations feature map. The computer-implemented method can include processing, by the computing system, one or more ground truth spatial observations of the environment from the target camera pose with a second encoder model to generate a ground truth spatial observations feature map. Processing, by the computing system, the one or more ground truth spatial observations with the second encoder model to generate the ground truth spatial observations feature map may include inputting, by the computing system, a one-hot encoding of the one or more ground truth spatial observations to the second encoder model to generate the ground truth observations feature map. The first encoder model and the second encoder model may include weights, and the weights may be shared between the first encoder model and the second encoder model. The computer-implemented method can include processing, by the computing system, the guidance spatial observations feature map with a first distribution prediction model to generate one or more guidance spatial observation distribution values for a guidance spatial observation distribution. The first distribution prediction model can include a first convolutional neural network, and the guidance spatial observation distribution can include a first multivariate Gaussian distribution. The computer-implemented method can include processing, by the computing system, the ground truth spatial observations feature map with a second distribution prediction model to generate one or more ground truth observation distribution values for a ground truth observation distribution. The second distribution prediction model can include a second convolutional neural network, and the ground truth observation distribution can include a second multivariate Gaussian distribution. The computer-implemented method can include evaluating, by the computing system, a loss function that compares the guidance spatial observation distribution and the ground truth observation distribution. The loss function can include a Kullback-Leibler divergence function. The computer-implemented method can include modifying, by the computing system, one or more parameters of at least the first encoder model based on the loss function. Modifying, by the computing system, the one or more parameters of at least the first encoder model based on the loss function can include modifying the second distribution prediction model based on the loss function.
- Another example aspect of the present disclosure is directed to a computer-implemented method for training a machine-learned spatial observation prediction model. The computer-implemented method may include obtaining, by a computing system, one or more spatial observations of an environment that have been captured from one or more previous camera poses. The one or more spatial observations of an environment may include one or more depth observations or one or more semantic segmentation observations. The computer-implemented method can include generating, by the computing system, a three-dimensional point cloud for the environment from the one or more spatial observations and the one or more previous camera poses. The computer-implemented method can include projecting, by the computing system, the three-dimensional point cloud into two-dimensional space to form one or more guidance spatial observations of the environment from a target camera pose that may differ from the from the one or more previous camera poses. The computer-implemented method can include processing, by the computing system, the one or more guidance spatial observations with a machine-learned spatial observation prediction model to generate one or more predicted spatial observations of the environment from the target camera pose. The computer-implemented method can include evaluating, by the computing system, a loss function that compares the one or more predicted spatial observations to a ground truth spatial observations of the environment from the target camera pose. The loss function may include a mean absolute error function or a cross entropy loss function. The mean absolute error function may generate a mean absolute error. The cross-entropy function may generate a cross entropy loss. The computer-implemented method can include modifying, by the computing system, one or more values of one or more parameters of the machine-learned spatial observation prediction model based on the loss function.
- Another example aspect of the present disclosure is directed to a computer-implemented method for training a machine-learned image prediction model. The computer-implemented method can include generating, by a computing system, one or more predicted spatial observations of an environment from a target camera pose. The computer-implemented method can include processing, by the computing system, the one or more predicted spatial observations and image data associated with one or more images of the environment captured from the one or more previous camera poses with a machine-learned image prediction model to generate one or more predicted images of the environment from the target camera pose. The one or more predicted spatial observations may be predicted depth observations or predicted semantic segmentation observations. The images of the environment may be RGB color images. The machine-learned image prediction model may include one or more convolution blocks or one or more one or more image synthesis layers. The image synthesis layers may be configured to receive data from the one or more convolution blocks. The computer-implemented method can include evaluating, by the computing system, a loss function that compares the one or more predicted images of the environment from the target camera pose to a ground truth image of the environment from the target camera pose. The loss function may include a hinge loss function, a feature mapping function, or a perceptual loss function. The computer-implemented method may include modifying, by the computing system, one or more values of one or more parameters of the machine-learned image prediction model based on the loss function.
- Other aspects of the present disclosure are directed to various systems, apparatuses, non-transitory computer-readable media, user interfaces, and electronic devices.
- These and other features, aspects, and advantages of various embodiments of the present disclosure will become better understood with reference to the following description and appended claims. The accompanying drawings, which are incorporated in and constitute a part of this specification, illustrate example embodiments of the present disclosure and, together with the description, serve to explain the related principles.
- The patent or application file contains at least one drawing executed in color. Copies of this patent or patent application publication with color drawing(s) will be provided by the Office upon request and payment of the necessary fee.
- Detailed discussion of embodiments directed to one of ordinary skill in the art is set forth in the specification, which makes reference to the appended figures, in which:
-
FIG. 1A depicts a block diagram of an example computing system that generates predicted visual observations of an environment according to example embodiments of the present disclosure. -
FIG. 1B depicts a block diagram of an example computing device that generates predicted visual observations of an environment according to example embodiments of the present disclosure. -
FIG. 1C depicts a block diagram of an example computing device that generates predicted visual observations of an environment according to example embodiments of the present disclosure. -
FIG. 1D depicts a block diagram of an example pipeline for generating predicted images along a trajectory of unseen viewpoints according to example embodiments of the present disclosure. -
FIG. 2 depicts a block diagram of an example first stage of an example visual world model according to example embodiments of the present disclosure. -
FIG. 3 depicts a block diagram of an example second stage of an example visual world model according to example embodiments of the present disclosure. -
FIG. 4 depicts a flow chart diagram of an example method for generating predicted observations of an environment according to example embodiments of the present disclosure. -
FIG. 5 depicts a flow chart diagram of an example method for learning an improved noise distribution according to example embodiments of the present disclosure. -
FIG. 6 depicts a flow chart diagram of an example method for training a machine-learned spatial observation prediction model according to example embodiments of the present disclosure. -
FIG. 7 depicts a flow chart diagram of an example method for training a machine-learned image prediction model according to example embodiments of the present disclosure. -
FIGS. 8A-C depict example input observations according to example embodiments of the present disclosure. -
FIG. 8D depicts an example three-dimensional point cloud according to example embodiments of the present disclosure. -
FIGS. 8E-F depict example guidance observations according to example embodiments of the present disclosure. -
FIGS. 8G-H depict example predicted observations according to example aspects of the present disclosure. -
FIG. 8I depicts an example predicted image of an environment according to example aspects of the present disclosure. -
FIG. 8J depicts an example ground truth image for a scene according to example aspects of the present disclosure. - Reference numerals that are repeated across plural figures are intended to identify the same features in various implementations.
- Generally, the present disclosure is directed to systems and methods for generating predicted observations of an environment from multiple unobserved viewpoints. To do so, the present disclosure describes a machine-learned model (e.g., visual world model) trained to generate predicted visual observations for viewpoints that have not been visited based on one or more previous observations of an environment (e.g., a scene). The visual world model can generate one or more predicted visual observations along a trajectory based on a proposed navigation action sequence. The visual world model can be trained such that the predicted visual observations can be generated for environments not seen during training.
- The input to the visual world model can include a sequence of previous observations and corresponding camera poses. Observations, as used throughout this specification, can include depth observations (e.g., depth images), semantic segmentation observations (e.g., semantic segmentation images), and/or image observations (e.g., color images, RGB images). Depth observations can include information descriptive of the distance between a viewpoint and a plurality of points in an environment. Semantic segmentation observations can include information descriptive of one or more object classifications of objects of an environment. Image observations can contain data descriptive of the colors of objects of an environment. In some implementations, the sequence of corresponding camera poses is available from an odometry system. Camera intrinsics (e.g., a matrix that converts between the two-dimensional camera plane and the three-dimensional world coordinate space) can be known or estimated.
- Example implementations of the present disclosure can generate completions of partially visible objects from potentially unbounded viewpoint changes. The partially visible objects can be generated using as few as one previous observation. Further, example implementations of the present disclosure can provide for solving the relatively more difficult challenge of predicting around corners. For example, given a future navigation trajectory passing the entrance of an unseen room, example implementations of the present disclosure can generate predicted visual observations spanning the entire contents of that room. The visual world model described herein can generate predictions that can be both temporally consistent and stochastic (e.g., the predictions can capture the full distribution of possible outcomes). Thus, revisited regions can be rendered in a consistent manner to previous observations.
- In some implementations, the visual world model can include a hierarchical two-stage model. At a first stage (e.g., a structure generator stage) the model can generate a new depth image and/or segmentation image to provide a plausible high-level representation of an environment. The first stage can use previous semantic segmentation images and/or depth images for context. At a second stage (e.g., an image generator stage) the model can receive from the first stage the predicted semantic and/or depth images and render them into one or more realistic RGB images. The second stage can use previous RGB images as context. In some implementations, one or more stages can accumulate previous observations as one or more three-dimensional point clouds. The one or more three-dimensional point clouds can be re-projected into two-dimensional space from a target camera pose to provide context to future predictions.
- Example implementations of the present disclosure have several possible applications including, for example, video editing, content creation, and model-based methods for artificial intelligence tasks (e.g., navigating to objects, instruction-guided navigation, dialog-guided navigation, etc.). Some example implementations of the present disclosure can be used, for example, for sampling-based planning, for learning policies directly from a model, and/or for counterfactual reasoning. Additionally, or alternatively, example implementations of the present disclosure may improve the sample efficiency of deep reinforcement learning.
- In an example implementation, predicted observations generated by the visual world model described herein can improve performance on a downstream visual navigation task (e.g., vision-and-language navigation (VLN)). Reaching a navigation goal involves successfully grounding natural language instructions to visual observations, this provides a challenging task-based assessment of prediction quality. In an example implementation, at each step while moving through the environment, a baseline VLN agent can generate a large number of possible future trajectories using a beam search. These alternative trajectories can be ranked using an instruction-trajectory compatibility model to assess which trajectory best matches the instruction. The agent can then execute a first action from the top-ranked trajectory. The agent can then repeat the process. Three different planning horizons can be used, with future trajectories including 1, 2, or 3 forward steps.
- The instruction-trajectory compatibility model can be a dual-encoder that separately encodes textual instructions and trajectories (e.g., encoded using visual observations and path geometry) into a shared latent space. Performance on incomplete paths can be improved by introducing truncated paths into the original contrastive training scheme. In some examples, the compatibility model is trained using only ground truth observations. Observations for future steps can be drawn from multiple sources including ground truth (e.g., observations from the actual environment, look ahead observations), the visual world model described herein, and/or a repeated panorama (e.g., a baseline in which the most recent observation is repeated in future steps). The geometry of future trajectories can be determined by ground truth navigation graphs.
- The systems and methods of the present disclosure provide a number of technical effects and benefits. As one example, the systems and methods can generate high-resolution visual observations (e.g., RGB observations, semantic segmentation observations, depth observations) of an environment (e.g., a scene) for viewpoints that have not yet been visited, using as few as one previous observation. Additionally, or alternatively, the systems and methods can generate the observations in environments that have not been seen during training. These improvements can result in less initial observations of an environment necessary to generate predicted observations during an inference phase. Fewer initial observations can result in less processor usage, memory usage, storage usage, and network bandwidth required to generate a predicted observation. The ability to generate a predicted observation of an environment without training the model on that particular environment can also result in less processor usage, memory usage, storage usage, and network bandwidth required to generate a predicted observation. Additionally, the systems and methods of the present disclosure provide a practical improvement to computing technology such as, for example, machine-learning techniques by increasing the efficiency of VLN tasks and deep reinforcement learning ultimately reducing the use of computing resources.
- With reference now to the Figures, example embodiments of the present disclosure will be discussed in further detail.
-
FIG. 1A depicts a block diagram of anexample computing system 100 that performs visual observation prediction according to example embodiments of the present disclosure. Thesystem 100 includes auser computing device 102, aserver computing system 130, and atraining computing system 150 that are communicatively coupled over anetwork 180. - The
user computing device 102 can be any type of computing device, such as, for example, a personal computing device (e.g., laptop or desktop), a mobile computing device (e.g., smartphone or tablet), a gaming console or controller, a wearable computing device, an embedded computing device, or any other type of computing device. - The
user computing device 102 includes one ormore processors 112 and amemory 114. The one ormore processors 112 can be any suitable processing device (e.g., a processor core, a microprocessor, an ASIC, an FPGA, a controller, a microcontroller, etc.) and can be one processor or a plurality of processors that are operatively connected. Thememory 114 can include one or more non-transitory computer-readable storage media, such as RAM, ROM, EEPROM, EPROM, flash memory devices, magnetic disks, etc., and combinations thereof. Thememory 114 can storedata 116 andinstructions 118 which are executed by theprocessor 112 to cause theuser computing device 102 to perform operations. - In some implementations, the
user computing device 102 can store or include one or morevisual world models 120. For example, thevisual world models 120 can be or can otherwise include various machine-learned models such as neural networks (e.g., deep neural networks) or other types of machine-learned models, including non-linear models and/or linear models. Neural networks can include feed-forward neural networks, recurrent neural networks (e.g., long short-term memory recurrent neural networks), convolutional neural networks or other forms of neural networks. Some example machine-learned models can leverage an attention mechanism such as self-attention. For example, some example machine-learned models can include multi-headed self-attention models (e.g., transformer models). Examplevisual world models 120 are discussed with reference toFIGS. 2-3 . - In some implementations, the one or more
visual world models 120 can be received from theserver computing system 130 overnetwork 180, stored in the usercomputing device memory 114, and then used or otherwise implemented by the one ormore processors 112. In some implementations, theuser computing device 102 can implement multiple parallel instances of a single visual world model 120 (e.g., to perform parallel predictions of visual observations across multiple instances of the visual world model 120). - More particularly, the visual world models can be used to generate one or more predicted visual observations (e.g., semantic segmentation image predictions, depth image predictions, and/or RGB image predictions) along a trajectory based on a proposed navigation action sequence for viewpoints that have not been visited based on one or more previous observations of an environment.
- Additionally, or alternatively, one or more
visual world models 140 can be included in or otherwise stored and implemented by theserver computing system 130 that communicates with theuser computing device 102 according to a client-server relationship. For example, thevisual world models 140 can be implemented by theserver computing system 140 as a portion of a web service (e.g., a visual observation prediction service). Thus, one ormore models 120 can be stored and implemented at theuser computing device 102 and/or one ormore models 140 can be stored and implemented at theserver computing system 130. - The
user computing device 102 can also include one or moreuser input components 122 that receives user input. For example, theuser input component 122 can be a touch-sensitive component (e.g., a touch-sensitive display screen or a touch pad) that is sensitive to the touch of a user input object (e.g., a finger or a stylus). The touch-sensitive component can serve to implement a virtual keyboard. Other example user input components include a microphone, a traditional keyboard, or other means by which a user can provide user input. - The
server computing system 130 includes one ormore processors 132 and amemory 134. The one ormore processors 132 can be any suitable processing device (e.g., a processor core, a microprocessor, an ASIC, an FPGA, a controller, a microcontroller, etc.) and can be one processor or a plurality of processors that are operatively connected. Thememory 134 can include one or more non-transitory computer-readable storage media, such as RAM, ROM, EEPROM, EPROM, flash memory devices, magnetic disks, etc., and combinations thereof. Thememory 134 can storedata 136 andinstructions 138 which are executed by theprocessor 132 to cause theserver computing system 130 to perform operations. - In some implementations, the
server computing system 130 includes or is otherwise implemented by one or more server computing devices. In instances in which theserver computing system 130 includes plural server computing devices, such server computing devices can operate according to sequential computing architectures, parallel computing architectures, or some combination thereof. - As described above, the
server computing system 130 can store or otherwise include one or morevisual world models 140. For example, themodels 140 can be or can otherwise include various machine-learned models. Example machine-learned models include neural networks or other multi-layer non-linear models. Example neural networks include feed forward neural networks, deep neural networks, recurrent neural networks, and convolutional neural networks. Some example machine-learned models can leverage an attention mechanism such as self-attention. For example, some example machine-learned models can include multi-headed self-attention models (e.g., transformer models).Example models 140 are discussed with reference toFIGS. 2-3 . - The
user computing device 102 and/or theserver computing system 130 can train themodels 120 and/or 140 via interaction with thetraining computing system 150 that is communicatively coupled over thenetwork 180. Thetraining computing system 150 can be separate from theserver computing system 130 or can be a portion of theserver computing system 130. - The
training computing system 150 includes one ormore processors 152 and amemory 154. The one ormore processors 152 can be any suitable processing device (e.g., a processor core, a microprocessor, an ASIC, an FPGA, a controller, a microcontroller, etc.) and can be one processor or a plurality of processors that are operatively connected. Thememory 154 can include one or more non-transitory computer-readable storage media, such as RAM, ROM, EEPROM, EPROM, flash memory devices, magnetic disks, etc., and combinations thereof. Thememory 154 can storedata 156 andinstructions 158 which are executed by theprocessor 152 to cause thetraining computing system 150 to perform operations. In some implementations, thetraining computing system 150 includes or is otherwise implemented by one or more server computing devices. - The
training computing system 150 can include amodel trainer 160 that trains the machine-learnedmodels 120 and/or 140 stored at theuser computing device 102 and/or theserver computing system 130 using various training or learning techniques, such as, for example, backwards propagation of errors. For example, a loss function can be backpropagated through the model(s) to update one or more parameters of the model(s) (e.g., based on a gradient of the loss function). Various loss functions can be used such as mean squared error, likelihood loss, cross entropy loss, hinge loss, Kullback-Leibler (KL) divergence loss, and/or various other loss functions. Gradient descent techniques can be used to iteratively update the parameters over a number of training iterations. - In some implementations, performing backwards propagation of errors can include performing truncated backpropagation through time. The
model trainer 160 can perform a number of generalization techniques (e.g., weight decays, dropouts, etc.) to improve the generalization capability of the models being trained. - In particular, the
model trainer 160 can train the machine-learnedmodels 120 and/or 140 based on a set oftraining data 162. Thetraining data 162 can include, for example, 360-degree panoramas in equirectangular format and a three-dimensional textured mesh annotated with semantic classes. Feasible trajectories can be defined using navigation graphs in which nodes can correspond to panoramic image locations and edges can define navigable state transitions. The first and second stages of the visual world model can be trained separately or jointly. The first stage can be trained with rendered ground-truth depth and semantic images. The training data can be augmented by perturbing the viewpoint coordinates with a random Gaussian noise vector (e.g., N(0,0.2m)) independently along each three-dimensional axis. The second stage can be trained with RGB panoramas, rendered ground-truth depth images, and/or semantic segmentation images. The training data can be augmented by randomly chopping and horizontally rolling the panoramas. - The model trainer can train the visual world models using a training dataset. One example training dataset contains a significant number of RGB-D images from a number of different building-scale indoor environments. For each environment, the training dataset can also include a textured three-dimensional mesh which is annotated with a number of different semantic classes of objects and building components. A plurality of trajectories can be sampled from the dataset and for each trajectory a plurality of panoramas can be sampled, choosing the starting node and the edge transitions uniformly at random. The viewpoints in these trajectories can be, for example, two meters apart from each other.
- In some implementations, if the user has provided consent, the training examples can be provided by the
user computing device 102. Thus, in such implementations, themodel 120 provided to theuser computing device 102 can be trained by thetraining computing system 150 on user-specific data received from theuser computing device 102. In some instances, this process can be referred to as personalizing the model. - The
model trainer 160 includes computer logic utilized to provide desired functionality. Themodel trainer 160 can be implemented in hardware, firmware, and/or software controlling a general purpose processor. For example, in some implementations, themodel trainer 160 includes program files stored on a storage device, loaded into a memory and executed by one or more processors. In other implementations, themodel trainer 160 includes one or more sets of computer-executable instructions that are stored in a tangible computer-readable storage medium such as RAM, hard disk, or optical or magnetic media. - The
network 180 can be any type of communications network, such as a local area network (e.g., intranet), wide area network (e.g., Internet), or some combination thereof and can include any number of wired or wireless links. In general, communication over thenetwork 180 can be carried via any type of wired and/or wireless connection, using a wide variety of communication protocols (e.g., TCP/IP, HTTP, SMTP, FTP), encodings or formats (e.g., HTML, XML), and/or protection schemes (e.g., VPN, secure HTTP, SSL). - The machine-learned models described in this specification may be used in a variety of tasks, applications, and/or use cases.
- In some implementations, the input to the machine-learned model(s) of the present disclosure can be image data. The machine-learned model(s) can process the image data to generate an output. As an example, the machine-learned model(s) can process the image data to generate an image recognition output (e.g., a recognition of the image data, a latent embedding of the image data, an encoded representation of the image data, a hash of the image data, etc.). As another example, the machine-learned model(s) can process the image data to generate an image segmentation output (e.g., semantic segmentation image). As another example, the machine-learned model(s) can process the image data to generate an image classification output. As another example, the machine-learned model(s) can process the image data to generate an image data modification output (e.g., an alteration of the image data, etc.). As another example, the machine-learned model(s) can process the image data to generate an encoded image data output (e.g., an encoded and/or compressed representation of the image data, etc.). As another example, the machine-learned model(s) can process the image data to generate an upscaled image data output. As another example, the machine-learned model(s) can process the image data to generate a prediction output (e.g., predicted observation).
- In some implementations, the input to the machine-learned model(s) of the present disclosure can be text or natural language data (e.g., vision-and-language navigation instructions). The machine-learned model(s) can process the text or natural language data to generate an output. As an example, the machine-learned model(s) can process the natural language data to generate a language encoding output. As another example, the machine-learned model(s) can process the text or natural language data to generate a latent text embedding output. As another example, the machine-learned model(s) can process the text or natural language data to generate a translation output. As another example, the machine-learned model(s) can process the text or natural language data to generate a classification output. As another example, the machine-learned model(s) can process the text or natural language data to generate a textual segmentation output. As another example, the machine-learned model(s) can process the text or natural language data to generate a semantic intent output. As another example, the machine-learned model(s) can process the text or natural language data to generate an upscaled text or natural language output (e.g., text or natural language data that is higher quality than the input text or natural language, etc.). As another example, the machine-learned model(s) can process the text or natural language data to generate a prediction output.
- In some implementations, the input to the machine-learned model(s) of the present disclosure can be speech data (e.g., vision-and-language navigation instructions). The machine-learned model(s) can process the speech data to generate an output. As an example, the machine-learned model(s) can process the speech data to generate a speech recognition output. As another example, the machine-learned model(s) can process the speech data to generate a speech translation output. As another example, the machine-learned model(s) can process the speech data to generate a latent embedding output. As another example, the machine-learned model(s) can process the speech data to generate an encoded speech output (e.g., an encoded and/or compressed representation of the speech data, etc.). As another example, the machine-learned model(s) can process the speech data to generate an upscaled speech output (e.g., speech data that is higher quality than the input speech data, etc.). As another example, the machine-learned model(s) can process the speech data to generate a textual representation output (e.g., a textual representation of the input speech data, etc.). As another example, the machine-learned model(s) can process the speech data to generate a prediction output.
- In some implementations, the input to the machine-learned model(s) of the present disclosure can be latent encoding data (e.g., a latent noise tensor). The machine-learned model(s) can process the latent encoding data to generate an output. As an example, the machine-learned model(s) can process the latent encoding data to generate a recognition output. As another example, the machine-learned model(s) can process the latent encoding data to generate a reconstruction output. As another example, the machine-learned model(s) can process the latent encoding data to generate a search output. As another example, the machine-learned model(s) can process the latent encoding data to generate a reclustering output. As another example, the machine-learned model(s) can process the latent encoding data to generate a prediction output.
- In some implementations, the input to the machine-learned model(s) of the present disclosure can be statistical data (e.g., observation distribution). Statistical data can be, represent, or otherwise include data computed and/or calculated from some other data source. The machine-learned model(s) can process the statistical data to generate an output. As an example, the machine-learned model(s) can process the statistical data to generate a recognition output. As another example, the machine-learned model(s) can process the statistical data to generate a prediction output. As another example, the machine-learned model(s) can process the statistical data to generate a classification output. As another example, the machine-learned model(s) can process the statistical data to generate a segmentation output. As another example, the machine-learned model(s) can process the statistical data to generate a visualization output. As another example, the machine-learned model(s) can process the statistical data to generate a diagnostic output.
- In some implementations, the input to the machine-learned model(s) of the present disclosure can be sensor data (e.g., distance information, LIDAR). The machine-learned model(s) can process the sensor data to generate an output. As an example, the machine-learned model(s) can process the sensor data to generate a recognition output. As another example, the machine-learned model(s) can process the sensor data to generate a prediction output. As another example, the machine-learned model(s) can process the sensor data to generate a classification output. As another example, the machine-learned model(s) can process the sensor data to generate a segmentation output. As another example, the machine-learned model(s) can process the sensor data to generate a visualization output. As another example, the machine-learned model(s) can process the sensor data to generate a diagnostic output. As another example, the machine-learned model(s) can process the sensor data to generate a detection output.
- In some cases, the input includes visual data and the task is a computer vision task. In some cases, the input includes pixel data for one or more images (e.g., observations) and the task is an image processing task (e.g., observation prediction). For example, the image processing task can be image classification, where the output is a set of scores, each score corresponding to a different object class and representing the likelihood that the one or more images depict an object belonging to the object class. The image processing task may be object detection, where the image processing output identifies one or more regions in the one or more images and, for each region, a likelihood that region depicts an object of interest. As another example, the image processing task can be image segmentation (e.g., semantic segmentation image), where the image processing output defines, for each pixel in the one or more images, a respective likelihood for each category in a predetermined set of categories. For example, the set of categories can be foreground and background. As another example, the set of categories can be object classes. As another example, the image processing task can be depth estimation (e.g., depth images), where the image processing output defines, for each pixel in the one or more images, a respective depth value. As another example, the image processing task can be motion estimation, where the network input includes multiple images, and the image processing output defines, for each pixel of one of the input images, a motion of the scene depicted at the pixel between the images in the network input.
-
FIG. 1A illustrates one example computing system that can be used to implement the present disclosure. Other computing systems can be used as well. For example, in some implementations, theuser computing device 102 can include themodel trainer 160 and thetraining dataset 162. In such implementations, themodels 120 can be both trained and used locally at theuser computing device 102. In some of such implementations, theuser computing device 102 can implement themodel trainer 160 to personalize themodels 120 based on user-specific data. -
FIG. 1B depicts a block diagram of anexample computing device 10 that performs according to example embodiments of the present disclosure. Thecomputing device 10 can be a user computing device or a server computing device. - The
computing device 10 includes a number of applications (e.g.,applications 1 through N). Each application contains its own machine learning library and machine-learned model(s). For example, each application can include a machine-learned model. Example applications include a text messaging application, an email application, a dictation application, a virtual keyboard application, a browser application, etc. - As illustrated in
FIG. 1B , each application can communicate with a number of other components of the computing device, such as, for example, one or more sensors, a context manager, a device state component, and/or additional components. In some implementations, each application can communicate with each device component using an API (e.g., a public API). In some implementations, the API used by each application is specific to that application. -
FIG. 1C depicts a block diagram of anexample computing device 50 that performs according to example embodiments of the present disclosure. Thecomputing device 50 can be a user computing device or a server computing device. - The
computing device 50 includes a number of applications (e.g.,applications 1 through N). Each application is in communication with a central intelligence layer. Example applications include a text messaging application, an email application, a dictation application, a virtual keyboard application, a browser application, etc. In some implementations, each application can communicate with the central intelligence layer (and model(s) stored therein) using an API (e.g., a common API across all applications). - The central intelligence layer includes a number of machine-learned models. For example, as illustrated in
FIG. 1C , a respective machine-learned model can be provided for each application and managed by the central intelligence layer. In other implementations, two or more applications can share a single machine-learned model. For example, in some implementations, the central intelligence layer can provide a single model for all of the applications. In some implementations, the central intelligence layer is included within or otherwise implemented by an operating system of thecomputing device 50. - The central intelligence layer can communicate with a central device data layer. The central device data layer can be a centralized repository of data for the
computing device 50. As illustrated inFIG. 1C , the central device data layer can communicate with a number of other components of the computing device, such as, for example, one or more sensors, a context manager, a device state component, and/or additional components. In some implementations, the central device data layer can communicate with each device component using an API (e.g., a private API). -
FIG. 1D depicts a block diagram of an example system for generating predicted images along a trajectory of unseen viewpoints. - The example system illustrated in
FIG. 1D can obtain one or morespatial observations 12 of an environment that have been captured from one or more previous camera poses. The system can generate (e.g., by execution of apoint cloud builder 14 encoded in computer-readable instructions) a three-dimensional point cloud 16 for the environment from the one or morespatial observations 12 and the one or more previous camera poses. The system can project (e.g., by execution of aprojector 18 encoded in computer-readable instructions) the three-dimensional point cloud 16 into two-dimensional space to form one or more guidancespatial observations 20 of the environment from a target camera pose that differs from the one or more previous camera poses. - A machine-learned spatial
observation prediction model 22 can process the one or more guidancespatial observations 20 to generate one or more predictedspatial observations 24 of the environment from the target camera pose. Next, a machine-learnedimage prediction model 26 can process the one or more predictedspatial observations 24 andimage data 25 associated with one or more images of the environment captured from the one or more previous camera poses to generate one or more predictedimages 28 of the environment from the target camera pose. The system can output the one or more predictedimages 28. - Example implementations of the present disclosure provide for a first stage (e.g., a structure generator stage) suitable for generating one or more predicted observations (e.g., segmentation image(s)
example structure generator 200 is illustrated inFIG. 2 . The structure generator can receive as input one or more spatial observations of anenvironment 201 that have been captured from one or more previous camera poses T1:t-1. Thespatial observations 201 can include depth image(s) d1:t-1 and/or semantic segmentation image(s) s1:t-1. The structure generator can generate a three-dimensional point cloud 202 for the environment from the one or morespatial observations 201 and the one or more previous camera poses. The structure generator can re-project the three-dimensional point cloud back into two-dimensional space 203 to form one or more guidance spatial observations (e.g., guidance depth image(s) d′t and/or guidance semantic segmentation image(s) s′t) 205 of the environment from a target camera poseT t 204 that differs from the one or more previous camera poses. - The structure generator can process the one or more guidance
spatial observations 205 with a machine-learned spatial observation prediction model to generate one or more predicted spatial observations of the environment from the camera pose (e.g., predicted depth image(s)decoder model 206. See, e.g., Jindong Jiang et al., RedNet: Residual Encoder-Decoder Network for indoor RGB-D Semantic Segmentation (2018), https://arxiv.org/pdf/1806.01054.pdf. In some implementations, the encoder-decoder model can use transposed convolutions for upsampling in thedecoder 211 and/or skip connections between theencoder 207 anddecoder 209 to preserve spatial information. The machine-learned spatial observation prediction model can process the one or more guidance spatial observations with anencoder model 207. - In some implementations, the encoder model can receive as input a one-hot encoding of semantic guidance image(s) 205, which may be formally represented as s′t∈RW×H×C. In some implementations, the encoder model can receive as input a one-hot encoding of depth guidance image(s) 205, which may be formally represented as d′t∈
- A latent spatial noise tensor (e.g., random noise tensor)
z t 213 can be introduced into the model in between theencoder model 207 anddecoder model 209 by concatenating 208 the latent spatial noise tensor with the feature map generated by the encoder model. The latentspatial noise tensor 213 can be generated by a machine-learnednoise generation model 214. Thedecoder model 209 can process the combined feature map to generate the one or more predicted spatial observations (e.g., predicted segmentation image(s)decoder model 209 can be processed with aconvolution block 211. Predicted semantic segmentation observations can be processed with a C-way softmax function. Predicted depth observations can be processed with a sigmoid function and normalized in the range (0,1). At each step during an inference phase, the predicted observations can be back-projected and added to the three-dimensional point cloud to assist future predictions. - In some implementations, the latent spatial noise tensor can be generated by sampling from an improved noise distribution (e.g., a conditional prior noise distribution) 216, which may be formally represented as pψ(zt|s′t, d′t). There are many possible scenes that may be generated for an unseen region; thus, the latent spatial noise tensor can carry the stochastic information about the next observation that the deterministic encoder may not be able to capture.
- During a training phase, one or more spatial observations of an environment can be captured from one or more previous camera poses that differ from a target camera pose 201. A three-dimensional point cloud can be generated for the environment from the one or more spatial observations and the one or more previous camera poses 202. The three-dimensional point cloud can be projected back into two-
dimensional space 203 to form one or more guidancespatial observations 205 of the environment from the target camera pose 204. The one or more guidance spatial observations can be processed with afirst encoder model 207 to generate a guidance spatial observations feature map. One or more ground truth spatial observations of theenvironment 221 can be obtained from the target camera pose 204 and processed with asecond encoder model 220 to generate a ground truth spatial observations featuremap 219. The guidance spatial observations feature map, and the ground truth observations feature map can be further processed by distribution prediction models to generate one or more guidance spatial observation distribution values 216 for a guidance spatial observation distribution and one or more ground truth spatial observation distribution values 218 for a ground truth spatial observation distribution, respectively. - A loss function can be used to compare the guidance spatial observation distribution and the ground truth observation distribution to generate a
loss value 217. One or more parameters of at least the first encoder model can be modified based on the loss value. One or more parameters of the second distribution prediction model can also be modified based on the loss value. - For example, a
prior distribution 216 can be forced to become close to aposterior distribution 218 by a KL-divergence loss function 217. The posterior distribution is generated by the output of afirst encoder model 207 and the posterior distribution is generated from the output of asecond encoder model 220 which can receive as input ground truth semantic segmentation and/or depth observations. The first encoder model and the second encoder model can include sharedweights 223. The distributions can be modeled using three-layer convolutionalneural networks - In some implementations, the overall structure generator can be trained to minimize a joint loss including a cross entropy loss Lce for semantic predictions, a mean absolute error term for depth predictions, and/or the KL-divergence term for the noise tensor. This may be represented formally as:
-
+λd ∥d t −{circumflex over (d)} t∥1 -
+λKL D KL(q ϕ(z t |s t ,d t),p ψ(z t |s′ t ,d′ t) - where λce, λd, and λKL can represent weights which can be, for example, determined by a grid search. These weights can, for example, be set to 1, 100, and 0.5, respectively.
- During an inference phase, the latent noise tensor can be sampled from a previously learned
improved noise distribution 216, also referred to as a prior distribution, and theposterior distribution 218 is not used. Circular padding can be used (e.g., on the image x-axis) to avoid heading discontinuities during inference. The resolution (e.g., 512×256) of the semantic segmentation and/or depth outputs can be upsampled to a higher resolution (e.g., 1024×512) using interpolation (e.g., nearest neighbor interpolation). In some implementations, the latent spatial noise tensor can be set to the mean of the conditional prior noise distribution. - In some implementations, machine-learned
models observation prediction model 22 ofFIG. 1D . -
FIG. 3 depicts an example second stage (e.g., an image generator stage) 300 suitable for generating realistic image(s) (e.g., RGB image(s))environment 301 from, for example, the structure generator, and image data associated with the one or more images of the environment. The image data can include, for example, a guidance image (e.g., a RGB guidance image) I′t 306 generated by back-projecting an RGB three-dimensional point cloud including previous RGB image(s) from a target camera pose. The image generator can process the one or more predicted spatial observations and image data associated with the one or more images of the environment captured from the one or more previous camera poses with a machine-learned image prediction model to generate one or more predicted images of the environment from the target camera pose. - The machine-learned image prediction model can contain one or more convolution blocks 303 and one or more image synthesis layers 304. The image synthesis layers can be configured to receive data from the one or more convolution blocks. In some example implementations, the machine-learned image prediction model can use one or more
residual blocks 305 for image synthesis. See, e.g., Taesung Park et al., Semantic Image Synthesis with Spatially-Adaptive Normalization, in 2019 IEEE/CVF Conference on Computer Vision and Pattern Recognition 2332 (2019). The residual blocks can use spatially-adaptive normalization layers 307 to insert context into multiple layers of the model. The residual blocks can contain one ormore normalization layers depth inputs 307, and a normalization layer conditioned on theguidance image 306. The sparsity of the guidance image(s) can be handled by applyingpartial convolutions residual blocks 305, preceded by asingle convolution block 303. Circular padding can be used on the image (e.g., the image x-axis) to avoid heading discontinuities during inference. - During a training phase, one or more predicted spatial observations of an environment from a target camera pose can be generated 301. The one or more predicted spatial observations and image data associated with one or more images of the environment captured from one or more previous camera poses can be processed to generate one or more predicted images of the environment from the target camera pose 311. A
loss function 312 that compares the one or more predicted images of the environment to ground truth image(s) of the environment from the target camera pose can be used to evaluate a loss value. Theloss function 312 can contain a hinge loss function, a feature matching loss function, and/or a perceptual loss function. One or more values of one or more parameters of the machine-learned image prediction model can be modified based on the loss value. - Particularly, the model can be trained with various machine-learning techniques. For example, the model can include a generative adversarial network (GAN) trained via one or more generative adversarial techniques. See, e.g., Phillip Isola et al., Image-to-Image Translation with Conditional Adversarial Networks, in 2017 IEEE Conference on Computer Vision and Pattern Recognition 5967 (2017). The GAN can include a model that can learn a mapping from an input image (e.g., predicted observation, ground truth observation) and a random noise vector to an output image. The GAN can include a generator model that can be trained to produce outputs that cannot be distinguished from the input images by an adverarially trained discriminator model, which is trained to do as well as possible at discriminating between the input images and the output of the generator model. The discriminator can be configured to only penalize structure at the scale of patches. See, e.g., id. at 5969-5970. A loss function associated with one or more GANs can include a hinge loss function and/or a feature matching loss function. See, e.g., Ting-Chun Wang et al., High-Resolution Image Synthesis and Semantic Manipulation with Conditional GANs, in 2018 IEEE Conference on Computer Vision and Pattern Recognition 8798 (2018).
- In some implementations, the model can also be trained with a perceptual loss from a pretrained VGG-19 model. See, e.g., Justin Johnson et al., Perceptual Losses for Real-Time Style Transfer and Super-Resolution (2016), https://arxiv.org/pdf/1603.08155.pdf.
- For example, the model can be trained with a generative adversarial network model hinge loss, feature mapping (FM) loss, and a perceptual loss from a pretrained VGG-19 model. During training, the image generator can be provided ground-truth semantic segmentation image(s) and/or ground-truth depth image(s). The GAN 313 can receive, as input, the concatenation of the ground-truth image It or generated image
- The losses L for the generator G and the discriminator D may be represented formally by
-
- where xt=(st, dt, I′t) denotes the complete set of inputs to the generator, ϕ(i) denotes the intermediate output of the ith layer of the pretrained VGG-19 network, D(i) denotes the output of the discriminator's i-th layer, and the conditioning inputs st, dt to the discriminator have been dropped to save space. λGAN, λVGG, and λFM can represent weights for the generative adversarial network model (GAN) hinge loss, VGG model perceptual loss, and the feature matching model, respectively.
- In some implementations,
components FIG. 3 can correspond to the machine-learnedimage prediction model 26 ofFIG. 1D . -
FIG. 4 depicts a flow chart diagram of an example method for generating predicted observations of an environment according to example embodiments of the present disclosure. AlthoughFIG. 4 depicts steps performed in a particular order for purposes of illustration and discussion, the methods of the present disclosure are not limited to the particularly illustrated order or arrangement. The various steps of themethod 400 can be omitted, rearranged, combined, and/or adapted in various ways without deviating from the scope of the present disclosure. Observations can include depth observations, semantic segmentation observations, and/or color (e.g., RGB) observations. - At 402, a computing system can obtain one or more spatial observations of an environment that may be captured from one or more previous camera poses. The computing system can obtain one or more spatial observations of an environment from a user device (e.g., a smartphone, laptop, camera, etc.). The computing system can obtain the spatial observations from the user device over a computer network (e.g., the internet).
- At 404, the computing system can generate a three-dimensional point cloud for the environment from the one or more spatial observations and the one or more previous camera poses. The three-dimensional point cloud can include data descriptive of semantic segmentation information, depth information, or RGB information.
- At 406, the computing system can project the three-dimensional point cloud into two-dimensional space to form one or more guidance spatial observations of the environment from a target camera pose that differs from the one or more previous camera poses.
- At 408, the computing system can process the one or more guidance spatial observations with a machine-learned spatial observation prediction model to generate one or more predicted spatial observations of the environment from the target camera pose. Processing the one or more guidance spatial observations with the machine-learned spatial observation prediction model can include processing the one or more guidance spatial observations with an encoder model of the machine-learned spatial observation prediction model. The encoder model may be configured to generate a feature map from the one or more guidance spatial observations. Processing the one or more guidance spatial observations with the encoder model may include inputting a one-hot encoding of the one or more guidance spatial observations to the encoder model to receive the feature map. Processing the one or more guidance spatial observations with the machine-learned spatial observation prediction model can include sampling a latent spatial noise tensor from a noise distribution. The noise distribution can be a multivariate Gaussian distribution. Processing the one or more guidance spatial observations with the machine-learned spatial observation prediction model can include combining the feature map with the latent spatial noise tensor to generate a combined feature set. Processing the one or more guidance spatial observations with the machine-learned spatial observation prediction model can include processing the combined feature set with a decoder model of the machine-learned spatial observation prediction model. The decoder model may be configured to generate the one or more predicted spatial observations of the environment from the target camera pose. The encoder model may provide spatial information to the decoder model utilizing skip connections.
- At 410, the computing system can process the one or more predicted spatial observations and image data associated with one or more images of the environment captured from the one or more previous camera poses with a machine-learned image prediction model to generate one or more predicted images of the environment from the target camera pose. The image data associated with the one or more images of the environment captured from the one or more previous camera poses may include a guidance image. The images of the environment may be color (e.g., RGB) images. The guidance image may include one or more images of the environment captured from the one or more previous camera poses projected onto the three-dimensional point cloud from the target camera pose.
- At 412, the computing system can output the one or more predicted images. Outputting the one or more predicted images can include transmitting the predicted images over a computing network to a user device (e.g., a smartphone, laptop, etc.).
-
FIG. 5 depicts a flow chart diagram of an example method for learning an improved noise distribution according to example embodiments of the present disclosure. AlthoughFIG. 5 depicts steps performed in a particular order for purposes of illustration and discussion, the methods of the present disclosure are not limited to the particularly illustrated order or arrangement. The various steps of themethod 500 can be omitted, rearranged, combined, and/or adapted in various ways without deviating from the scope of the present disclosure. - At 502, a computing system can generate one or more guidance spatial observations of an environment from a target camera pose. The guidance spatial observations of an environment from a target camera pose can be generated by obtaining one or more spatial observations of the environment that have been captured from one or more previous camera poses that differ from the target camera pose, generating a three-dimensional point cloud for the environment from the one or more spatial observations and the one or more previous camera poses, and projecting the three-dimensional point cloud into two-dimensional space to form the one or more guidance spatial observations of the environment form the target camera pose. The observations can be semantic segmentation observations and/or depth observations.
- At 504, the computing system can process the one or more guidance spatial observations with a first encoder model to generate a guidance spatial observations feature map. The first encoder model can receive, as input, a one-hot encoding of the guidance spatial observations.
- At 506, the computing system can process one or more ground truth spatial observations of the environment from the target camera pose with a second encoder model to generate a ground truth spatial observations feature map. The second encoder model can receive, as input, a one-hot encoding of the ground truth spatial observations.
- At 508, the computing system can process the guidance spatial observations feature map with a first distribution prediction model to generate one or more guidance spatial observation distribution values for a guidance spatial observation distribution. In some implementations, the first distribution prediction model is a convolutional neural network. In some examples, the guidance spatial observation distribution is a multivariate Gaussian distribution.
- At 510, the computing system can process the ground truth spatial observations feature map with a second distribution prediction model to generate one or more ground truth observation distribution values for a ground truth observation distribution. In some implementations, the second distribution prediction model is a convolutional neural network. In some examples, the ground truth observation distribution is a multivariate Gaussian distribution.
- At 512, the computing system can evaluate a loss function (e.g., a KL-divergence loss function) that compares the guidance spatial observation distribution and the ground truth observation distribution.
- At 514, the computing system can modify one or more parameters of at least the first encoder model based on the loss function. In some implementations, the computing system can modify parameters of the second encoder model. Additionally, or alternatively, the computing system can modify parameters of the first distribution prediction model and/or second distribution prediction model.
-
FIG. 6 depicts a flow chart diagram of an example method for training a machine-learned spatial observation prediction model. AlthoughFIG. 6 depicts steps performed in a particular order for purposes of illustration and discussion, the methods of the present disclosure are not limited to the particularly illustrated order or arrangement. The various steps of themethod 600 can be omitted, rearranged, combined, and/or adapted in various ways without deviating from the scope of the present disclosure - At 602, a computing system can obtain one or more spatial observations of an environment that have been captured from one or more previous camera poses. The spatial observations can include semantic segmentation observations and/or depth observations.
- At 604, the computing system can generate a three-dimensional point cloud for the environment from the one or more spatial observations and the one or more previous camera poses.
- At 606, the computing system can project the three-dimensional point cloud into two-dimensional space to form one or more guidance spatial observations of the environment from a target camera pose that differs from the one or more previous camera poses.
- At 608, the computing system can process the one or more guidance spatial observations with a machine-learned spatial observation prediction model to generate one or more predicted spatial observations of the environment from the target camera pose.
- At 610, the computing system can evaluate a loss function (e.g., a KL-divergence loss function) that compares the one or more predicted spatial observations to one or more ground truth spatial observations of the environment from the target camera pose.
- At 612, the computing system can modify one or more values of one or more parameters of the machine-learned spatial observation prediction model (e.g., encoder, decoder, distribution prediction model, noise tensor, etc.) based on the loss function.
-
FIG. 7 depicts a flow chart diagram of an example method for training a machine-learned image prediction model according to example embodiments of the present disclosure. AlthoughFIG. 7 depicts steps performed in a particular order for purposes of illustration and discussion, the methods of the present disclosure are not limited to the particularly illustrated order or arrangement. The various steps of themethod 700 can be omitted, rearranged, combined, and/or adapted in various ways without deviating from the scope of the present disclosure. - At 702, a computing system can generate one or more predicted spatial observations of an environment (e.g., predicted depth observations and/or predicted semantic segmentation observations) from a target camera pose. The computing system can generate the predicted spatial observations via the systems and methods described herein.
- At 704, the computing system can process the one or more predicted spatial observations and image data associated with one or more images (e.g., RGB images) of the environment captured from the one or more previous camera poses with a machine-learned image prediction model to generate one or more predicted images (e.g., RGB images) of the environment from the target camera pose. The machine-learned image prediction model can include one or more convolution blocks, and/or one or more image synthesis layers. The image synthesis layers can be configured to receive data from the one or more convolution blocks.
- At 706, the computing system can evaluate a loss function that compares the one or more predicted images of the environment from the target camera pose to a ground truth image of the environment from the target camera pose. The loss function can include a hinge loss function, a feature matching loss function, and/or a perceptual loss function.
- At 708, the computing system can modify one or more values of one or more parameters of the machine-learned image prediction model (e.g., convolution blocks, image synthesis layers) based on the loss function.
- Example implementations of the present disclosure tested the proposed systems and methods on a number of real-world environments. Particularly, the proposed systems and methods were tested on indoor environments. Representative images from various points in the visual world model are shown in
FIGS. 8A-8J . -
FIG. 8A illustrates an example input RGB image of an indoor environment captured from a previous camera pose. -
FIGS. 8B and 8C illustrate a corresponding input semantic segmentation image and depth image, respectively, of the indoor environment captured from the same previous camera pose. -
FIG. 8D illustrates an example three-dimensional point cloud of the environment illustrated inFIG. 8A-C . -
FIGS. 8E-F illustrate example guidance observations (semantic segmentation and RGB, respectively) generated by projecting the three-dimensional point cloud ofFIG. 8D into two-dimensional space from a target camera pose that differs from the previous camera pose ofFIGS. 8A-C . -
FIG. 8G illustrates an example predicted semantic segmentation observation generated by processing the semantic segmentation guidance image illustrated inFIG. 8E with the first stage of the visual world model described herein. -
FIG. 8H illustrates an example predicted depth observation generated by processing the semantic segmentation guidance image illustrated inFIG. 8E with the first stage of the visual world model described herein. -
FIG. 8I illustrates an example predicted RGB image generated by processing the RGB guidance image illustrated inFIG. 8F and the predicted observations ofFIGS. 8G and 8H with the second stage of the visual world model described herein. -
FIG. 8J illustrates an example ground truth RGB image of the environment from the target pose. - The technology discussed herein makes reference to servers, databases, software applications, and other computer-based systems, as well as actions taken and information sent to and from such systems. The inherent flexibility of computer-based systems allows for a great variety of possible configurations, combinations, and divisions of tasks and functionality between and among components. For instance, processes discussed herein can be implemented using a single device or component or multiple devices or components working in combination. Databases and applications can be implemented on a single system or distributed across multiple systems. Distributed components can operate sequentially or in parallel.
- While the present subject matter has been described in detail with respect to various specific example embodiments thereof, each example is provided by way of explanation, not limitation of the disclosure. Those skilled in the art, upon attaining an understanding of the foregoing, can readily produce alterations to, variations of, and equivalents to such embodiments. Accordingly, the subject disclosure does not preclude inclusion of such modifications, variations and/or additions to the present subject matter as would be readily apparent to one of ordinary skill in the art. For instance, features illustrated or described as part of one embodiment can be used with another embodiment to yield a still further embodiment. Thus, it is intended that the present disclosure cover such alterations, variations, and equivalents.
Claims (23)
1. A computing system for generating predicted images along a trajectory of unseen viewpoints, the computing system comprising:
one or more processors; and
one or more non-transitory computer-readable media that collectively store instructions that, when executed by the one or more processors, cause the computing system to perform operations, the operations comprising:
obtaining one or more spatial observations of an environment that have been captured from one or more previous camera poses;
generating a three-dimensional point cloud for the environment from the one or more spatial observations and the one or more previous camera poses;
projecting the three-dimensional point cloud into two-dimensional space to form one or more guidance spatial observations of the environment from a target camera pose that differs from the one or more previous camera poses;
processing the one or more guidance spatial observations with a machine-learned spatial observation prediction model to generate one or more predicted spatial observations of the environment from the target camera pose;
processing the one or more predicted spatial observations and image data associated with one or more images of the environment captured from the one or more previous camera poses with a machine-learned image prediction model to generate one or more predicted images of the environment from the target camera pose; and
outputting the one or more predicted images.
2. The computing system of claim 1 , wherein the one or more spatial observations comprises one or more spatial depth images, the one or more guidance spatial observations comprises one or more guidance depth images, and the one or more predicted spatial observations comprises one or more predicted depth images.
3. The computing system of claim 1 , wherein the one or more spatial observations comprises one or more spatial semantic segmentation images, the one or more guidance spatial observations comprises one or more guidance semantic segmentation images, and the one or more predicted spatial observations comprises one or more predicted semantic segmentation images.
4. The computing system of claim 1 , wherein processing the one or more guidance spatial observations with the machine-learned spatial observation prediction model to generate the one or more predicted spatial observations of the environment from the target camera pose comprises:
processing the one or more guidance spatial observations with an encoder model of the machine-learned spatial observation prediction model, wherein the encoder model is configured to generate a feature map from the one or more guidance spatial observations;
sampling, a latent spatial noise tensor from a noise distribution;
combining, the feature map with the latent spatial noise tensor to generate a combined feature set; and
processing the combined feature set with a decoder model of the machine-learned spatial observation prediction model, wherein the decoder model is configured to generate the one or more predicted spatial observations of the environment from the target camera pose.
5. The computing system of claim 4 , wherein processing, the one or more guidance spatial observations with the encoder model comprises inputting a one-hot encoding of the one or more guidance spatial observations to the encoder model to receive the feature map.
6. The computing system of claim 4 , wherein the noise distribution is a multivariate Gaussian distribution.
7. The computing system of claim 4 , wherein the encoder model provides spatial information to the decoder model utilizing skip connections.
8. The computing system of claim 1 , wherein the image data associated with the one or more images of the environment captured from the one or more previous camera poses comprises:
a guidance image comprising the one or more images of the environment captured from the one or more previous camera poses projected onto the three-dimensional point cloud from the target camera pose.
9. A computer-implemented method for learning an improved noise distribution, the method comprising:
generating, by a computing system, one or more guidance spatial observations of an environment from a target camera pose;
processing, by the computing system, the one or more guidance spatial observations with a first encoder model to generate a guidance spatial observations feature map;
processing, by the computing system, one or more ground truth spatial observations of the environment from the target camera pose with a second encoder model to generate a ground truth spatial observations feature map;
processing, by the computing system, the guidance spatial observations feature map with a first distribution prediction model to generate one or more guidance spatial observation distribution values for a guidance spatial observation distribution;
processing, by the computing system, the ground truth spatial observations feature map with a second distribution prediction model to generate one or more ground truth observation distribution values for a ground truth observation distribution;
evaluating, by the computing system, a loss function that compares the guidance spatial observation distribution and the ground truth observation distribution; and
modifying, by the computing system, one or more parameters of at least the first encoder model based on the loss function.
10. The computer-implemented method of claim 9 , wherein modifying, by the computing system, one or more parameters of at least the first encoder model based on the loss function further comprises modifying the second distribution prediction model based on the loss function.
11. The computer-implemented method of claim 9 , wherein generating, by the computing system, the one or more guidance spatial observations of the environment from the target camera pose comprises:
obtaining, by the computing system, one or more spatial observations of the environment that have been captured from one or more previous camera poses that differ from the target camera pose;
generating, by the computing system, a three-dimensional point cloud for the environment from the one or more spatial observations and the one or more previous camera poses; and
projecting, by the computing system, the three-dimensional point cloud into two-dimensional space to form the one or more guidance spatial observations of the environment from target camera pose.
12. The computer-implemented method of claim 9 , wherein processing, by the computing system, the one or more guidance spatial observations with the first encoder model to generate the guidance spatial observations feature map comprises inputting, by the computing system, a one-hot encoding of the one or more guidance spatial observations to the first encoder model to generate the guidance spatial observations feature map.
13. The computer-implemented method of claim 9 , wherein processing, by the computing system, the one or more ground truth spatial observations with the second encoder model to generate the ground truth spatial observations feature map comprises inputting, by the computing system, a one-hot encoding of the one or more ground truth spatial observations to the second encoder model to generate the ground truth observations feature map.
14. The computer-implemented method of claim 9 , wherein the first distribution prediction model comprises a first convolutional neural network and the second distribution prediction model comprises a second convolutional neural network.
15. The computer-implemented method of claim 9 , wherein the first encoder model and the second encoder model comprise one or more shared weights.
16. The computer-implemented method of claim 9 , wherein the loss function comprises a Kullback-Leibler divergence function.
17. The computer-implemented method of claim 9 , wherein the guidance spatial observation distribution comprises a first multivariate Gaussian distribution and the ground truth observation distribution comprises a second multivariate Gaussian distribution.
18. A computer-implemented method for training a machine-learned spatial observation prediction model, the method comprising:
obtaining, by a computing system, one or more spatial observations of an environment that have been captured from one or more previous camera poses;
generating, by the computing system, a three-dimensional point cloud for the environment from the one or more spatial observations and the one or more previous camera poses;
projecting, by the computing system, the three-dimensional point cloud into two-dimensional space to form one or more guidance spatial observations of the environment from a target camera pose that differs from the one or more previous camera poses;
processing, by the computing system, the one or more guidance spatial observations with a machine-learned spatial observation prediction model to generate one or more predicted spatial observations of the environment from the target camera pose;
evaluating, by the computing system, a loss function that compares the one or more predicted spatial observations to one or more ground truth spatial observations of the environment from the target camera pose; and
modifying, by the computing system, one or more values of one or more parameters of the machine-learned spatial observation prediction model based on the loss function.
19. The computer-implemented method of claim 18 , wherein the one or more spatial observations comprises one or more depth observations, and the loss function comprises a mean absolute error function that evaluates the one or more depth observations to generate a mean absolute error.
20. The computer-implemented method of claim 18 , wherein the one or more spatial observations comprises one or more semantic segmentation observations, and the loss function comprises a cross entropy loss function that evaluates the one or more semantic segmentation observations to generate a cross entropy loss.
21. A computer-implemented method for training a machine-learned image prediction model, the method comprising:
generating, by a computing system, one or more predicted spatial observations of an environment from a target camera pose;
processing, by the computing system, the one or more predicted spatial observations and image data associated with one or more images of the environment captured from the one or more previous camera poses with a machine-learned image prediction model to generate one or more predicted images of the environment from the target camera pose;
evaluating, by the computing system, a loss function that compares the one or more predicted images of the environment from the target camera pose to a ground truth image of the environment from the target camera pose; and
modifying, by the computing system, one or more values of one or more parameters of the machine-learned image prediction model based on the loss function.
22. The computer-implemented method of claim 21 , wherein the machine-learned image prediction model comprises:
one or more convolution blocks; and
one or more image synthesis layers, wherein the one or more image synthesis layers is configured to receive data from the one or more convolution blocks.
23. The computer-implemented method of claim 21 , wherein the loss function comprises:
a hinge loss function;
a feature matching loss function; or
a perceptual loss function.
Priority Applications (1)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US17/409,249 US20230072293A1 (en) | 2021-08-23 | 2021-08-23 | Systems And Methods For Generating Predicted Visual Observations Of An Environment Using Machine Learned Models |
Applications Claiming Priority (1)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US17/409,249 US20230072293A1 (en) | 2021-08-23 | 2021-08-23 | Systems And Methods For Generating Predicted Visual Observations Of An Environment Using Machine Learned Models |
Publications (1)
Publication Number | Publication Date |
---|---|
US20230072293A1 true US20230072293A1 (en) | 2023-03-09 |
Family
ID=85385609
Family Applications (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
US17/409,249 Pending US20230072293A1 (en) | 2021-08-23 | 2021-08-23 | Systems And Methods For Generating Predicted Visual Observations Of An Environment Using Machine Learned Models |
Country Status (1)
Country | Link |
---|---|
US (1) | US20230072293A1 (en) |
Cited By (5)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20210122059A1 (en) * | 2018-07-06 | 2021-04-29 | Hexagon Metrology Sas | Measuring arm with multifunctional end |
US20230062151A1 (en) * | 2021-08-10 | 2023-03-02 | Kwai Inc. | Transferable vision transformer for unsupervised domain adaptation |
CN116468744A (en) * | 2023-06-19 | 2023-07-21 | 武汉大水云科技有限公司 | Double-distribution matching multi-domain adaptive segmentation method and system for water area scene |
US11883949B2 (en) | 2018-07-06 | 2024-01-30 | Hexagon Metrology Sas | Measuring arm with multifunctional end |
US11883950B2 (en) | 2018-07-06 | 2024-01-30 | Hexagon Metrology Sas | Measuring arm with multifunctional end |
Citations (3)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US9102055B1 (en) * | 2013-03-15 | 2015-08-11 | Industrial Perception, Inc. | Detection and reconstruction of an environment to facilitate robotic interaction with the environment |
US20200104640A1 (en) * | 2018-09-27 | 2020-04-02 | Deepmind Technologies Limited | Committed information rate variational autoencoders |
US20210295155A1 (en) * | 2020-03-07 | 2021-09-23 | Tata Consultancy Services Limited | Method and system for transfer learning based object detection |
-
2021
- 2021-08-23 US US17/409,249 patent/US20230072293A1/en active Pending
Patent Citations (3)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US9102055B1 (en) * | 2013-03-15 | 2015-08-11 | Industrial Perception, Inc. | Detection and reconstruction of an environment to facilitate robotic interaction with the environment |
US20200104640A1 (en) * | 2018-09-27 | 2020-04-02 | Deepmind Technologies Limited | Committed information rate variational autoencoders |
US20210295155A1 (en) * | 2020-03-07 | 2021-09-23 | Tata Consultancy Services Limited | Method and system for transfer learning based object detection |
Non-Patent Citations (2)
Title |
---|
Arun Mallya, Ting-Chun Wang, Karan Sapra, and Ming-Yu Liu. World-consistent video-to-video synthesis. ECCV, 2020. (Year: 2020) * |
Olivia Wiles, Georgia Gkioxari, Richard Szeliski, and Justin Johnson. Synsin: End-to-end view synthesis from a single image. 2020 (Year: 2020) * |
Cited By (6)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20210122059A1 (en) * | 2018-07-06 | 2021-04-29 | Hexagon Metrology Sas | Measuring arm with multifunctional end |
US11883949B2 (en) | 2018-07-06 | 2024-01-30 | Hexagon Metrology Sas | Measuring arm with multifunctional end |
US11883950B2 (en) | 2018-07-06 | 2024-01-30 | Hexagon Metrology Sas | Measuring arm with multifunctional end |
US11951608B2 (en) * | 2018-07-06 | 2024-04-09 | Hexagon Metrology Sas | Measuring arm with multifunctional end |
US20230062151A1 (en) * | 2021-08-10 | 2023-03-02 | Kwai Inc. | Transferable vision transformer for unsupervised domain adaptation |
CN116468744A (en) * | 2023-06-19 | 2023-07-21 | 武汉大水云科技有限公司 | Double-distribution matching multi-domain adaptive segmentation method and system for water area scene |
Similar Documents
Publication | Publication Date | Title |
---|---|---|
US20230072293A1 (en) | Systems And Methods For Generating Predicted Visual Observations Of An Environment Using Machine Learned Models | |
US11361531B2 (en) | Domain separation neural networks | |
EP3686848A1 (en) | Semantic image synthesis for generating substantially photorealistic images using neural networks | |
US10204299B2 (en) | Unsupervised matching in fine-grained datasets for single-view object reconstruction | |
Turhan et al. | Recent trends in deep generative models: a review | |
US20240119697A1 (en) | Neural Semantic Fields for Generalizable Semantic Segmentation of 3D Scenes | |
US20240096001A1 (en) | Geometry-Free Neural Scene Representations Through Novel-View Synthesis | |
JP2023533907A (en) | Image processing using self-attention-based neural networks | |
US20230267307A1 (en) | Systems and Methods for Generation of Machine-Learned Multitask Models | |
Zeng et al. | Improving visual quality of image synthesis by a token-based generator with transformers | |
CA3180427A1 (en) | Synthesizing sequences of 3d geometries for movement-based performance | |
US20220245910A1 (en) | Mixture of volumetric primitives for efficient neural rendering | |
US20220414974A1 (en) | Systems and methods for reconstructing a scene in three dimensions from a two-dimensional image | |
US11741753B2 (en) | Augmentation for visual action data | |
US20230360181A1 (en) | Machine Learning for High Quality Image Processing | |
US20220215594A1 (en) | Auto-regressive video generation neural networks | |
Saint et al. | 3dbooster: 3d body shape and texture recovery | |
US20230073175A1 (en) | Method and system for processing image based on weighted multiple kernels | |
US11670023B2 (en) | Artificial intelligence techniques for performing image editing operations inferred from natural language requests | |
CN117255998A (en) | Unsupervised learning of object representations from video sequences using spatial and temporal attention | |
CN114708586A (en) | Method for extracting three-dimensional face representation from image and video | |
US20240012955A1 (en) | Generative network-based floor plan generation | |
US20230252198A1 (en) | Stylization-based floor plan generation | |
US11755883B2 (en) | Systems and methods for machine-learned models having convolution and attention | |
US20230394734A1 (en) | Generating Machine-Learned Inverse Rig Models |
Legal Events
Date | Code | Title | Description |
---|---|---|---|
AS | Assignment |
Owner name: GOOGLE LLC, CALIFORNIAFree format text: ASSIGNMENT OF ASSIGNORS INTEREST;ASSIGNORS:KOH, JING YU;LEE, HONGLAK;YANG, YINFEI;AND OTHERS;SIGNING DATES FROM 20210915 TO 20210917;REEL/FRAME:057515/0291 |
|
STPP | Information on status: patent application and granting procedure in general |
Free format text: DOCKETED NEW CASE - READY FOR EXAMINATION |
|
STPP | Information on status: patent application and granting procedure in general |
Free format text: NON FINAL ACTION MAILED |
|
STPP | Information on status: patent application and granting procedure in general |
Free format text: RESPONSE TO NON-FINAL OFFICE ACTION ENTERED AND FORWARDED TO EXAMINER |
|
STPP | Information on status: patent application and granting procedure in general |
Free format text: NOTICE OF ALLOWANCE MAILED -- APPLICATION RECEIVED IN OFFICE OF PUBLICATIONS |