US20230096821A1 - Large-Scale Language Model Data Selection for Rare-Word Speech Recognition - Google Patents
Large-Scale Language Model Data Selection for Rare-Word Speech Recognition Download PDFInfo
- Publication number
- US20230096821A1 US20230096821A1 US17/643,861 US202117643861A US2023096821A1 US 20230096821 A1 US20230096821 A1 US 20230096821A1 US 202117643861 A US202117643861 A US 202117643861A US 2023096821 A1 US2023096821 A1 US 2023096821A1
- Authority
- US
- United States
- Prior art keywords
- training
- encoder
- text samples
- training text
- model
- Prior art date
- Legal status (The legal status is an assumption and is not a legal conclusion. Google has not performed a legal analysis and makes no representation as to the accuracy of the status listed.)
- Pending
Links
- 238000012549 training Methods 0.000 claims abstract description 242
- 238000013518 transcription Methods 0.000 claims abstract description 51
- 230000035897 transcription Effects 0.000 claims abstract description 51
- 238000000034 method Methods 0.000 claims abstract description 42
- 238000001914 filtration Methods 0.000 claims abstract description 11
- 238000012952 Resampling Methods 0.000 claims description 39
- 230000015654 memory Effects 0.000 claims description 37
- 238000009826 distribution Methods 0.000 claims description 34
- 230000006870 function Effects 0.000 claims description 32
- 238000012545 processing Methods 0.000 claims description 25
- 230000001364 causal effect Effects 0.000 claims description 11
- 230000001537 neural effect Effects 0.000 claims description 10
- 230000010354 integration Effects 0.000 claims description 6
- 238000012935 Averaging Methods 0.000 claims 2
- 239000013598 vector Substances 0.000 description 24
- 230000007246 mechanism Effects 0.000 description 11
- 230000008569 process Effects 0.000 description 10
- 238000004590 computer program Methods 0.000 description 8
- 238000004891 communication Methods 0.000 description 7
- 239000011159 matrix material Substances 0.000 description 7
- 230000003287 optical effect Effects 0.000 description 6
- 238000013528 artificial neural network Methods 0.000 description 5
- 238000003058 natural language processing Methods 0.000 description 5
- 230000003993 interaction Effects 0.000 description 4
- 230000000306 recurrent effect Effects 0.000 description 4
- 230000004044 response Effects 0.000 description 4
- 230000008901 benefit Effects 0.000 description 3
- 238000010606 normalization Methods 0.000 description 3
- 238000013459 approach Methods 0.000 description 2
- 230000002457 bidirectional effect Effects 0.000 description 2
- 230000003111 delayed effect Effects 0.000 description 2
- 238000012217 deletion Methods 0.000 description 2
- 230000037430 deletion Effects 0.000 description 2
- 230000006855 networking Effects 0.000 description 2
- 230000006403 short-term memory Effects 0.000 description 2
- 206010068829 Overconfidence Diseases 0.000 description 1
- 239000004783 Serene Substances 0.000 description 1
- 230000009471 action Effects 0.000 description 1
- 230000015556 catabolic process Effects 0.000 description 1
- 230000008859 change Effects 0.000 description 1
- 238000003066 decision tree Methods 0.000 description 1
- 238000006731 degradation reaction Methods 0.000 description 1
- 230000001419 dependent effect Effects 0.000 description 1
- 230000004927 fusion Effects 0.000 description 1
- 239000004973 liquid crystal related substance Substances 0.000 description 1
- 238000012423 maintenance Methods 0.000 description 1
- 238000012986 modification Methods 0.000 description 1
- 230000004048 modification Effects 0.000 description 1
- 230000037361 pathway Effects 0.000 description 1
- 238000005070 sampling Methods 0.000 description 1
- 239000004065 semiconductor Substances 0.000 description 1
- 230000001953 sensory effect Effects 0.000 description 1
- MTCFGRXMJLQNBG-UHFFFAOYSA-N serine Chemical compound OCC(N)C(O)=O MTCFGRXMJLQNBG-UHFFFAOYSA-N 0.000 description 1
- 239000007787 solid Substances 0.000 description 1
- 230000005236 sound signal Effects 0.000 description 1
- 230000003068 static effect Effects 0.000 description 1
- 238000012546 transfer Methods 0.000 description 1
- 230000009466 transformation Effects 0.000 description 1
- 238000013519 translation Methods 0.000 description 1
- 230000000007 visual effect Effects 0.000 description 1
Images
Classifications
-
- G—PHYSICS
- G10—MUSICAL INSTRUMENTS; ACOUSTICS
- G10L—SPEECH ANALYSIS OR SYNTHESIS; SPEECH RECOGNITION; SPEECH OR VOICE PROCESSING; SPEECH OR AUDIO CODING OR DECODING
- G10L15/00—Speech recognition
- G10L15/06—Creation of reference templates; Training of speech recognition systems, e.g. adaptation to the characteristics of the speaker's voice
- G10L15/063—Training
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06N—COMPUTING ARRANGEMENTS BASED ON SPECIFIC COMPUTATIONAL MODELS
- G06N3/00—Computing arrangements based on biological models
- G06N3/02—Neural networks
-
- G—PHYSICS
- G10—MUSICAL INSTRUMENTS; ACOUSTICS
- G10L—SPEECH ANALYSIS OR SYNTHESIS; SPEECH RECOGNITION; SPEECH OR VOICE PROCESSING; SPEECH OR AUDIO CODING OR DECODING
- G10L15/00—Speech recognition
- G10L15/08—Speech classification or search
- G10L15/16—Speech classification or search using artificial neural networks
-
- G—PHYSICS
- G10—MUSICAL INSTRUMENTS; ACOUSTICS
- G10L—SPEECH ANALYSIS OR SYNTHESIS; SPEECH RECOGNITION; SPEECH OR VOICE PROCESSING; SPEECH OR AUDIO CODING OR DECODING
- G10L15/00—Speech recognition
- G10L15/08—Speech classification or search
- G10L15/18—Speech classification or search using natural language modelling
- G10L15/183—Speech classification or search using natural language modelling using context dependencies, e.g. language models
- G10L15/19—Grammatical context, e.g. disambiguation of the recognition hypotheses based on word sequence rules
- G10L15/197—Probabilistic grammars, e.g. word n-grams
-
- G—PHYSICS
- G10—MUSICAL INSTRUMENTS; ACOUSTICS
- G10L—SPEECH ANALYSIS OR SYNTHESIS; SPEECH RECOGNITION; SPEECH OR VOICE PROCESSING; SPEECH OR AUDIO CODING OR DECODING
- G10L15/00—Speech recognition
- G10L15/22—Procedures used during a speech recognition process, e.g. man-machine dialogue
Definitions
- This disclosure relates to large-scale language model data selection for rare-word speech recognition.
- ASR Automated speech recognition
- a single neural network is used to directly map an audio waveform (i.e., input sequence) to an output sentence (i.e., output sequence).
- This integration has resulted in a sequence-to-sequence approach, which generates a sequence of words (or graphemes) when given a sequence of audio features.
- all components of a model may be trained jointly as a single end-to-end (E2E) neural network.
- E2E refers to a model whose architecture is constructed entirely of a neural network.
- a fully neural network functions without external and/or manually designed components (e.g., finite state transducers, a lexicon, or text normalization modules). Additionally, when training E2E models, these models generally do not require bootstrapping from decision trees or time alignments from a separate system.
- E2E automatic speech recognition (ASR) systems have made tremendous progress, surpassing conventional ASR systems in several common benchmarks including word error rates (WER).
- WER word error rates
- the architecture of E2E ASR models are largely application dependent. For instance, a number of applications that involve user interaction, such as voice-search or on-device dictation, require the model to perform recognition in a streaming fashion. Other applications, like offline video captioning, do not require the model to be streaming and can make use of future context to improve performance. Additionally, existing E2E models experience high failure rates in recognizing rare words not seen during training. Rare word recognition is improved by training an external language model on large-scale training datasets.
- One aspect of the disclosure provides a computer-implemented method of training a language model for rare-word speech recognition.
- the computer-implemented method when executed on data processing hardware causes the data processing hardware to perform operations that include obtaining a set of training text samples, and obtaining a set of training utterances used for training an automatic speech recognition (ASR) model.
- ASR automatic speech recognition
- Each training utterance in the plurality of training utterances includes audio data corresponding to an utterance and a corresponding transcription of the utterance.
- the operations also include applying rare word filtering on the set of training text samples to identify a subset of rare-word training text samples that include words that do not appear in the transcriptions from the set of training utterances or appear in the transcriptions from the set of training utterances less than a threshold number of times.
- the operations further include training the external language model on the transcriptions from the set of training utterances and the identified subset of rare-word training text samples.
- Implementations of the disclosure may include one or more of the following optional features.
- obtaining the set of training text samples includes receiving a corpus of training text samples, executing a resampling function on the corpus of training text samples to identify high frequency text samples that occur in the corpus of training text samples, and obtaining the set of training text samples by removing the identified high frequency text samples from the corpus of training text samples.
- the resampling function includes one of a simple power resampling function, a forced power resampling function, or a soft logarithmic resampling function.
- the operations further include applying contrastive filtering on the set of training text samples to identify a subset of target domain training text samples that match a target domain associated with the set of training utterances.
- training the external language model on the transcriptions from the set of training utterances and the identified subset of rare-word training text samples further includes training the external language model on the identified subset of target domain training text samples that match the target domain.
- the external language model includes an external neural language model.
- the external neural language model may include a stack of conformer layers or transformer layers.
- the operations further include integrating the trained external language model with the trained ASR model.
- the trained external language model is configured to rescore probability distributions over possible speech recognition hypotheses predicted by the trained ASR model.
- the ASR model includes a first encoder, a second encoder, and a decoder.
- the first encoder is configured to receive, as input, a sequence of acoustic frames, and generate, at each of a plurality of output steps, a first higher order feature representation for a corresponding acoustic frame in the sequence of acoustic frames.
- the second encoder is configured to receive, as input, the first higher order feature representation generated by the first encoder at each of the plurality of output steps, and generate, at each of the plurality of output steps, a second higher order feature representation for a corresponding first higher order feature frame.
- the decoder is configured to receive, as input, the second higher order feature representation generated by the second encoder at each of the plurality of output steps, and generate, at each of the plurality of time steps, a first probability distribution over possible speech recognition hypotheses.
- the decoder may be further configured to receive, as input, the first higher order feature representation generated by the first encoder at each of the plurality of output steps, and generate, at each of the plurality of time steps, a second probability distribution over possible speech recognition hypothesis.
- the decoder may include a prediction network and a joint network. When the ASR model is operating in a streaming mode, the prediction network is configured to receive, as input, the average embedding generated by the prediction network at each of the plurality of output steps and the first higher order feature representation generated by the first encoder at each of the plurality of output steps, and generate, at each of the plurality of output steps, the second probability distribution over possible speech recognition hypothesis.
- the prediction network is configured to receive, as input, the average embedding generated by the prediction network at each of the plurality of output steps and the second higher order feature representation generated by the second encoder at each of the plurality of output steps, and generate the first probability distribution over possible speech recognition hypothesis.
- the first encoder may include a causal encoder including an initial stack of conformer layers.
- the second encoder may include a non-causal encoder including a final stack of conformer layers overlain on the initial stack of conformer layers.
- the first encoder and the second encoder of the ASR model may be trained using Hybrid Autoregressive Transducer Factorization to facilitate the integration of the external language model trained on text-only data including the transcriptions from the set of training utterances and the identified subset of rare-word training text samples.
- the system includes data processing hardware and memory hardware in communication with the data processing hardware.
- the memory hardware stores instructions that when executed on the data processing hardware causes the date processing hardware to perform operations including obtaining a set of training text samples, and obtaining a set of training utterances used for training an automatic speech recognition (ASR) model.
- ASR automatic speech recognition
- Each training utterance in the plurality of training utterances includes audio data corresponding to an utterance and a corresponding transcription of the utterance.
- the operations also include applying rare word filtering on the set of training text samples to identify a subset of rare-word training text samples that include words that do not appear in the transcriptions from the set of training utterances or appear in the transcriptions from the set of training utterances less than a threshold number of times.
- the operations further include training the external language model on the transcriptions from the set of training utterances and the identified subset of rare-word training text samples.
- obtaining the set of training text samples includes receiving a corpus of training text samples, executing a resampling function on the corpus of training text samples to identify high frequency text samples that occur in the corpus of training text samples, and obtaining the set of training text samples by removing the identified high frequency text samples from the corpus of training text samples.
- the resampling function includes one of a simple power resampling function, a forced power resampling function, or a soft logarithmic resampling function.
- the operations further include applying contrastive filtering on the set of training text samples to identify a subset of target domain training text samples that match a target domain associated with the set of training utterances.
- training the external language model on the transcriptions from the set of training utterances and the identified subset of rare-word training text samples further includes training the external language model on the identified subset of target domain training text samples that match the target domain.
- the external language model includes an external neural language model.
- the external neural language model may include a stack of conformer layers or transformer layers.
- the operations further include integrating the trained external language model with the trained ASR model.
- the trained external language model is configured to rescore probability distributions over possible speech recognition hypotheses predicted by the trained ASR model.
- the ASR model includes a first encoder, a second encoder, and a decoder.
- the first encoder is configured to receive, as input, a sequence of acoustic frames, and generate, at each of a plurality of output steps, a first higher order feature representation for a corresponding acoustic frame in the sequence of acoustic frames.
- the second encoder is configured to receive, as input, the first higher order feature representation generated by the first encoder at each of the plurality of output steps, and generate, at each of the plurality of output steps, a second higher order feature representation for a corresponding first higher order feature frame.
- the decoder is configured to receive, as input, the second higher order feature representation generated by the second encoder at each of the plurality of output steps, and generate, at each of the plurality of time steps, a first probability distribution over possible speech recognition hypotheses.
- the decoder may be further configured to receive, as input, the first higher order feature representation generated by the first encoder at each of the plurality of output steps, and generate, at each of the plurality of time steps, a second probability distribution over possible speech recognition hypothesis.
- the decoder may include a prediction network and a joint network. When the ASR model is operating in a streaming mode, the prediction network is configured to receive, as input, the average embedding generated by the prediction network at each of the plurality of output steps and the first higher order feature representation generated by the first encoder at each of the plurality of output steps, and generate, at each of the plurality of output steps, the second probability distribution over possible speech recognition hypothesis.
- the prediction network is configured to receive, as input the average embedding generated by the prediction network at each of the plurality of output steps and the second higher order feature representation generated by the second encoder at each of the plurality of output steps, and generate the first probability distribution over possible speech recognition hypothesis.
- the first encoder may include a causal encoder including an initial stack of conformer layers.
- the second encoder may include a non-causal encoder including a final stack of conformer layers overlain on the initial stack of conformer layers.
- the first encoder and the second encoder of the speech recognition model may be trained using Hybrid Autoregressive Transducer Factorization to facilitate the integration of the external language model trained on text-only data including the transcriptions from the set of training utterances and the identified subset of rare-word training text samples.
- FIGS. 1 A and 1 B are schematic views of example speech environments using a speech recognition model and external language model architecture for automatic speech recognition.
- FIG. 2 is a schematic view of the speech recognition model and the language model architecture of FIG. 1 .
- FIG. 3 is a schematic view of an example tied and reduced prediction layer of a prediction network of the speech recognition model of FIG. 2 .
- FIG. 4 is a schematic view of a data selection pipeline for training a language model.
- FIG. 5 is a schematic view of an example arrangement of operations for a method of training a language model.
- FIG. 6 is a schematic view of an example computing device that may be used to implement the systems and methods described herein.
- End-to-end (E2E) automatic speech recognition (ASR) models are traditionally structured to operate in either a streaming mode or a non-streaming mode.
- an E2E ASR model includes an encoder and a decoder as the main components.
- Applications that involve end-user interaction like voice-search or on-device dictation, may require the model to perform recognition in a streaming fashion, where the words are expected to be output as they are spoken with as little latency as possible. This prevents the use of models that use future context to improve accuracy, such as bi-directional LSTMs.
- applications such as offline video captioning do not require streaming recognition and may make full use of any available future context to improve performance.
- conventional E2E ASR models are trained on a small fraction of audio-text pairs as compared to over 100 billion text utterances that a conventional model is trained with, and thus performs poorly on long-tail proper nouns and rare words.
- Implementations herein are directed toward a single E2E ASR model in combination with an on-device neural language model trained on data selected to improve the ASR model's recognition quality of rare words. More particularly, implementations herein are directed toward a data selection pipeline for selecting a sufficient subset of training data suitable for training the language model to improve recognition quality of rare words and long-tail proper nouns.
- the ASR model may use cascaded encoders that include streaming and non-streaming encoders, and a single decoder that learns to decode either using the output of the streaming or the non-streaming encoder to enable the ASR model to operate in streaming or non-streaming modes.
- the architecture can apply to other models such as machine translation that implement both streaming and non-streaming modes.
- FIGS. 1 A and 1 B are examples of a speech environment 100 , 100 a - b .
- a user's 104 manner of interacting with a computing device such as a user device 10
- the user device 10 (also referred to generally as a device 10 ) is configured to capture sounds (e.g., streaming audio data) from one or more users 104 within the speech environment 100 .
- the streaming audio data may refer to a spoken utterance 106 by the user 104 that functions as an audible query, a command for the device 10 , or an audible communication captured by the device 10 .
- Speech-enabled systems of the device 10 may field the query or the command by answering the query and/or causing the command to be performed/fulfilled by one or more downstream applications.
- the user device 10 may correspond to any computing device associated with a user 104 and capable of receiving audio data.
- Some examples of user devices 10 include, but are not limited to, mobile devices (e.g., mobile phones, tablets, laptops, etc.), computers, wearable devices (e.g., smart watches), smart appliances, internet of things (IoT) devices, vehicle infotainment systems, smart displays, smart speakers, etc.
- the user device 10 includes data processing hardware 12 and memory hardware 14 in communication with the data processing hardware 12 and stores instructions, that when executed by the data processing hardware 12 , cause the data processing hardware 12 to perform one or more operations.
- the user device 10 further includes an audio system 16 with an audio capture device (e.g., microphone) 16 , 16 a for capturing and converting spoken utterances 106 within the speech environment 100 into electrical signals and a speech output device (e.g., a speaker) 16 , 16 b for communicating an audible audio signal (e.g., as output audio data from the device 10 ). While the user device 10 implements a single audio capture device 16 a in the example shown, the user device 10 may implement an array of audio capture devices 16 a without departing from the scope of the present disclosure, whereby one or more capture devices 16 a in the array may not physically reside on the user device 10 , but be in communication with the audio system 16 .
- an audio capture device e.g., microphone
- a speech output device e.g., a speaker
- an automated speech recognition (ASR) system 109 implementing an ASR model 200 (also referred to as the model 200 ) integrated with an external language model (LM) 206 resides on the user device 10 of the user 104 and/or on a remote computing device 60 (e.g., one or more remote servers of a distributed system executing in a cloud-computing environment) in communication with the user device 10 via a network 40 .
- the remote computing device 60 may include remote resources, such as remote data processing hardware 62 (e.g., remote servers or CPUs) and/or remote memory hardware 64 (e.g., remote databases or other storage hardware).
- the user device 10 and/or the remote computing device 60 also includes an audio subsystem 108 configured to receive the utterance 106 spoken by the user 104 and captured by the audio capture device 16 a , and to convert the utterance 106 into a corresponding digital format associated with input acoustic frames 110 capable of being processed by the ASR system 109 .
- the user 104 speaks a respective utterance 106 and the audio subsystem 108 converts the utterance 106 into corresponding audio data (e.g., acoustic frames) 110 for input to the ASR system 109 .
- the model 200 receives, as input, the audio data 110 corresponding to the utterance 106 , and generates/predicts, as output, a corresponding transcription 120 (also referred to as a recognition result/hypothesis 120 ) of the utterance 106 .
- the model 200 also includes a decoder 204 ( FIG. 2 ) (also referred to as a shared decoder 204 ) shared between its encoders which enables the model 200 to be a single model that can operate in streaming and non-streaming mode (e.g., in contrast with two separate models where each model is dedicated to either a streaming mode or non-streaming mode).
- a digital assistant application 50 executing on the user device 10 may require the speech recognition to be streaming such that words, word pieces, and/or individual characters appear on the screen as soon as they are spoken.
- the user 104 of the user device 10 has a low tolerance for latency when issuing queries for the digital assistant application 50 to perform.
- the model 200 operates in a streaming mode where the model 200 may provide streaming transcription capabilities in real-time as the user 104 is speaking the utterance 106 .
- the same model 200 may operate in a non-streaming mode and may leverage a prediction network to provide an accurate transcription 120 , but incur increased latency.
- the user 104 requires that the ASR system 109 of the user device 10 is able to accurately identify rare words or long-tail proper nouns, which can be achieved through use of the LM 206 with the model 200 to help bias the output of the model 200 when detecting rare words or proper nouns.
- the LM 206 may be trained with data sets obtained through differing data selection strategies to reduce the amount of text-only 1 training data needed to train the LM 206 to accurately bias the output of the model 200 to detect rare words or proper nouns.
- the ASR system 109 may implement a single ASR model that includes cascaded encoders 210 , 220 , for a multitude of different speech recognition tasks to provide both streaming and non-streaming transcription capabilities without having to leverage separately trained ASR models on a task-by-task basis while also using the LM 206 to increase the accuracy of the transcription 120 when the utterance 106 includes rare words or long-tail proper nouns.
- the model 200 performs streaming encoding on the audio data 110 first and then performs non-streaming encoding on the output of the streaming encoder. For instance, in the example shown, the model 200 performs streaming speech recognition on the audio data 110 using a first encoder (i.e., a low latency encoder) to produce partial speech recognition results 120 , 120 a , and non-streaming speech recognition on the encoded audio data 110 using a second encoder (i.e., a high latency encoder) to produce a final speech recognition result 120 , 120 b .
- the first encoder produces the partial speech recognition results 120 a while the second encoder waits for the output of the first encoder to produce the final speech recognition result 120 b .
- the final speech recognition result 120 b for the input utterance 106 may be delayed from the partial speech recognition results 120 a for the input utterance by a duration.
- the user device 10 and/or the remote computing device 60 also executes a user interface generator 107 configured to present a representation of the transcription 120 of the utterance 106 to the user 104 of the user device 10 .
- the user interface generator 107 may display the partial speech recognition results 120 a in a streaming fashion during time 1 and subsequently display the final speech recognition result 120 b during time 2.
- the transcription 120 output from the ASR system 109 is processed, e.g., by a natural language understanding (NLU) module executing on the user device 10 or the remote computing device 60 , to execute a user command/query specified by the utterance 106 .
- NLU natural language understanding
- a text-to-speech system (not shown) (e.g., executing on any combination of the user device 10 or the remote computing device 60 ) may convert the transcription 120 into synthesized speech for audible output by the user device 10 and/or another device.
- FIG. 1 A the user 104 in the speech environment 100 a interacts with a program or application 50 (e.g., the digital assistant application 50 a ) of the user device 10 that uses the ASR system 109 .
- a program or application 50 e.g., the digital assistant application 50 a
- FIG. 1 A depicts the user 104 communicating with the digital assistant application 50 a and the digital assistant application 50 a displaying a digital assistant interface 18 on a screen of the user device 10 to depict a conversation between the user 10 and a digital assistant of the digital assistant application 50 a .
- the user 104 asks the digital assistant application 50 a , “What year was Serendipity released?”
- This question from the user 104 is a spoken utterance 106 captured by the audio capture device 16 a and processed by audio systems 16 of the user device 10 .
- the audio system 16 receives the spoken utterance 106 and converts it into acoustic frames 110 for input to the ASR system 109 .
- the model 200 while receiving the acoustic frames 110 corresponding to the utterance 106 as the user 104 speaks, encodes the acoustic frames 110 using a first encoder 210 (i.e., FIG. 2 ) and then decodes an encoded representation of the acoustic frames 110 using a decoder 204 ( FIG. 2 ) into the partial speech recognition results 120 a .
- the user interface generator 107 presents, via the digital assistant interface 18 , a representation of the partial speech recognition results 120 a of the utterance 106 to the user 104 of the user device 10 in a streaming fashion such that words, word pieces, and/or individual characters appear on the screen as soon as they are spoken.
- the second encoder 220 encodes the encoding output from the first encoder 210 to generate an encoding for the set of acoustic frames 110 corresponding to the utterance 106 already encoded by the first encoder 210 .
- the decoder 204 then decodes the acoustic frames 110 that have been encoded by the second encoder 220 and processes the decoded acoustic frames 110 using the LM 206 , which rescores the decoded acoustic frames and generates a final speech recognition result 120 b .
- the first encoder 210 encodes all of the acoustic frames 110 corresponding to the utterance 106 (e.g., as the acoustic frames 110 are received)
- the second encoder 220 encodes all of the acoustic frames 110 that have been encoded by the first encoder 210 .
- the second encoder 210 is able to provide greater contextual awareness (e.g., by receiving representations of all of the acoustic frames 110 for the utterance 106 ) in a non-streaming fashion which may potentially reconcile or correct aspect(s) of the utterance 106 missed or misinterpreted by the streaming nature of the first encoder 210 .
- an indication such as an endpoint, that identifies that the user 104 has finished speaking the utterance 106 functions to trigger the second encoder 220 of the model 200 to encode all the acoustic frames 110 .
- the second encoder 220 encodes the acoustic frames 110 in parallel with the first encoder 210 and the first encoder 210 identifies the endpoint at the end of the utterance 106 , thereby triggering the second encoder 220 to emit the final speech recognition result 120 b .
- the endpoint identified by the first encoder 210 may simultaneously trigger a microphone closing event.
- the user interface generator 107 presents, via the digital assistant interface 18 , a representation of the final speech recognition result 120 b of the utterance 106 to the user 104 of the user device 10 .
- the user interface generator 107 replaces (or modifies) the representation of the partial speech recognition results 120 a with the representation of the final speech recognition result 120 b .
- the utterance 106 of the user 104 contains a rare word “Serendipity” that the model 200 has not been trained on.
- partial speech recognition results 120 a output by the model 200 and displayed on the screen at time 1 incorrectly predicts that the utterance 106 of the user 104 is “What year was serene released?”
- the final speech recognition result 120 b output by the model 200 and displayed on the screen at time 2 at increased latency improves the speech recognition quality in terms of accuracy by identifying that the user 104 said “Serendipity.”
- the user interface generator 107 displays the partial speech recognition results as the user speaks the utterance 106 , the higher latency associated with producing, and ultimately displaying the final speech recognition result 120 b is less noticeable to the user 104 .
- the model 200 utilizes a pre-fetching technique that reduces latency by fetching speech recognition results before the final speech recognition result 120 b is available.
- the response fetched for the partial speech recognition results 120 a can be emitted instantly to save execution latency that typically occurs after the final speech recognition result 120 b is complete.
- the digital assistant application 50 a may respond to the question posed by the user 104 using natural language processing.
- Natural language processing generally refers to a process of interpreting written language (e.g., the partial speech recognition results 120 a and/or the final speech recognition result 120 b ) and determining whether the written language prompts any action.
- the digital assistant application 50 a uses natural language processing to recognize that the question from the user 10 regards the user's environment and more particularly a song playing in the user's vicinity.
- the automated assistant By recognizing these details with natural language processing, the automated assistant returns a response 19 to the user's query where the response 19 states, “Serendipity was released in 2001.”
- natural language processing occurs on the remote computing device 60 in communication with the data processing hardware 12 of the user device 10 .
- FIG. 1 B is another example of speech recognition with the ASR system 109 of the speech environment 100 b .
- the user 104 interacts with a voicemail application 50 , 50 b displaying a voicemail application interface 18 , 18 b on the screen of the user device 10 to transcribe a voicemail that was left for the user 104 by Jane Doe.
- latency is not important; however, accuracy of the transcription when processing long-tail proper nouns or rare words is important.
- the model 200 of the ASR system 109 and the LM 206 are able to take advantage of the full context of the audio by waiting until all of the acoustic frames 110 corresponding to the voicemail are generated.
- This voicemail scenario also illustrates how the model 200 is capable of handling a long-form of speech because a voicemail is often multiple sentences or even several paragraphs.
- the ability to handle long-form speech is particularly advantageous over other ASR models, such as two-pass models with LAS decoders, because these two pass-models often suffer from long-form issues (e.g., a higher word deletion rate on long-form speech) when applied to long-form conditions.
- the model 200 operates for both long-form speech and short-form speech without the long-form setbacks.
- the model 200 encodes the acoustic frames 110 using the first encoder 210 while receiving the acoustic frames 110 .
- the model 200 provides the first encoder output as input to the second encoder 220 .
- the second encoder 220 encodes the first encoder output before the decoder 204 generates an embedding and the LM 206 rescores the decoder 204 output to generate the final speech recognition result 120 b .
- the user interface generator 107 presents, via the digital assistant interface 18 b , a representation of the final speech recognition result 120 b without first displaying the partial speech recognition results 120 a .
- the final speech recognition result 120 b is a transcript of the long-form voicemail from Jane Doe that states, “Do you want to watch Serendipity tonight? Give me a call back when you get this.”
- FIG. 2 includes an example model 200 capable of operating in various combinations of streaming and non-streaming modes.
- the model 200 includes a cascading encoder 202 , a decoder 204 , and an external LM 206 .
- the cascading encoder 202 refers to a model structure where the encoding pathway includes two encoders 210 , 220 that cascade such that the output of one encoder 210 feeds the input of the other encoder 220 prior to decoding.
- the encoders 210 , 220 can be cascaded irrespective of the underlying architecture for each encoder.
- the encoders 210 , 220 include a stack of 512-dimension conformer layers.
- Causal convolution and left-context attention layers may be used for each conformer layer to strictly restrict the model use no future inputs.
- a multi-headed (e.g., 8 heads) attention mechanisms may be used in a self-attention layer.
- the cascades encoders 210 , 220 may include 17 conformer layers.
- the causal encoder 210 may include 15 conformer layers while the non-causal encoder 210 may include two conformer layers that take in additional right context (e.g., 5.04 seconds).
- transformer layers may be used in lieu of conformer layers.
- one encoder is constructed with an LSTM structure while the other encoder is constructed using bi-directional LSTM layers or conformer layers (e.g., a conformer-transducer).
- the encoders 210 , 220 may have different architectures or similar architectures.
- the cascading encoder 202 may be roughly analogous to an acoustic model (AM) in a traditional ASR system, and may include a recurrent network of stacked Long Short-Term Memory (LSTM) layers.
- the first encoder 210 is a streaming encoder that includes unidirectional Long Short Term Memory (LSTM) layers while the second encoder 220 is a non-streaming encoder that includes bidirectional LSTM layers or conformer layers.
- the second encoder 220 that receives the output of the first encoder 210 may take advantage of the LSTM layers of the first encoder 210 such that the second encoder 220 includes fewer LSTM layers than the first encoder 210 (and fewer LSTM layers than a fully non-streaming model).
- the cascading encoder 202 may reduce the number of more computationally expensive bidirectional layers, making the model 200 more streamlined than simply combining a traditional streaming model with a traditional non-streaming model.
- the second encoder 220 uses some number of conformer layers (e.g., two layers) with a particular amount of right context (e.g., five seconds of right context), while the first encoder 210 continues to use LSTM layers.
- each conformer layer in the second encoder 220 may have 640 units to match the LSTM layers and adds around 10 million additional parameters.
- This first higher-order feature representation is denoted as e s .
- the second encoder 220 is connected in cascade to the first encoder 210 , and is trained to receive the first higher order feature e s as input, and output a second higher order feature representation. This second higher order feature representation is denoted as e a .
- Both the first encoder 210 and the second encoder 220 are directly connected to, and shared by, the decoder 204 . Accordingly, the decoder 204 receives both the first higher order feature representation e s and the second higher order feature representation e a as inputs.
- the decoder 204 may include a recurrent neural network-transducer (RNN-T) architecture having a joint layer 230 and a prediction network 300 .
- the decoder 204 uses the joint layer 230 to combine (i.e., when the model 200 operates in non-streaming mode) the first and second higher order feature representations e s , e a , output by the cascading encoder 202 , as well as an embedding output from the embedding lookup 300 for the previous prediction y r-1 ), in order to produce a decoder output.
- RNN-T recurrent neural network-transducer
- the decoder output is then passed to the external LM 206 that rescores/improves the initial outputs from the decoder 204 with techniques such as lattice rescoring or n-best re-ranking.
- the decoder 204 produces predictions and the external LM 206 finalizes the prediction by improving recognition accuracy on rare words or long-tail proper nouns.
- the joint layer 230 receives the output of the embedding lookup 300 and only the first higher order feature representation e s output from the first encoder 210 .
- the decoder output can be a probability distribution, P (y i
- the model 200 may include a Softmax layer that receives the output of the decoder 204 .
- the Softmax layer is separate from the decoder 204 and processes the output, y r , from the decoder 204 .
- the output of the Softmax layer is then used in a beam search process to select orthographic elements.
- the Softmax layer is integrated with the decoder 204 , such that the output y r of the decoder 204 represents the output of the Softmax layer.
- the prediction network 300 has two 2,048-dimensional LSTM layers, each of which is also followed by 640-dimensional projection layer, such that the LSTM-based embedding lookup 300 may have about 23.4 million parameters.
- the prediction network 300 may include a stateless prediction network that receives a limited-history sequence of non-blank symbols y ui-n , . . . , y ui-1 limited to the N previous non-blank symbols 301 output by the final Softmax layer. For instance, FIG.
- N is equal to two. In other examples, N is equal to five, however, the disclosure is non-limiting and N may equal any integer.
- the sequence of non-blank symbols 301 a - n indicates initial speech recognition results 120 a ( FIG. 1 ).
- the prediction network 300 includes a multi-headed attention mechanism 302 that shares a shared embedding matrix 304 across each head 302 A- 302 H of the multi-headed attention mechanism.
- the multi-headed attention mechanism 302 includes four heads. However, any number of heads may be employed by the multi-headed attention mechanism 302 .
- the multi-headed attention mechanism improves performance significantly with minimal increase to model size.
- each head 302 A-H includes its own row of position vectors 308 , and rather than incurring an increase in model size by concatenating outputs 318 A-H from all the heads, the outputs 318 A-H are instead averaged by a head average module 322 .
- the head 302 A generates, using the shared embedding matrix 304 , a corresponding embedding 306 , 306 a - n (e.g., X ⁇ N ⁇ d e ) for each non-blank symbol 301 among the sequence of non-blank symbols y ui-n , . . . , y ui-1 received as input at the corresponding time step from the plurality of time steps.
- the shared embedding matrix 304 is shared across all heads of the multi-headed attention mechanism 302 , the other heads 302 B-H all generate the same corresponding embeddings 306 for each non-blank symbol.
- the head 302 A also assigns a respective position vector PV Aa-An 308 , 308 Aa-An (e.g., P ⁇ H ⁇ N ⁇ D e ) to each corresponding non-blank symbol in the sequence of non-blank symbols y ui-n , . . . , y ui-1 .
- the respective position vector PV 308 assigned to each non-blank symbol indicates a position in the history of the sequence of non-blank symbols (e.g., the N previous non-blank symbols output by the final Softmax layer).
- each of the embeddings 306 may include a same dimensionality (i.e., dimension size) as each of the position vectors PV 308 .
- each head 302 A-H defines a different set/row of position vectors 308 .
- the first head 302 A defines the row of position vectors PV Aa-An 308 Aa-An
- the second head 302 B defines a different row of position vectors PV Ba-Bn 308 Ba-Bn , . . .
- the H th head 302 H defines another different row of position vectors PV Ha-Hn 308 Ha-Hn .
- the first head 302 A For each non-blank symbol in the sequence of non-blank symbols 301 a - n received, the first head 302 A also weights, via a weight layer 310 , the corresponding embedding 306 proportional to a similarity between the corresponding embedding and the respective position vector PV 308 assigned thereto.
- the similarity omc;ides a cosine similarity (e.g., cosine distance).
- the weight layer 310 outputs a sequence of weighted embeddings 312 , 312 Aa-An each associated the corresponding embedding 306 weighted proportional to the respective position vector PV 308 assigned thereto.
- the weighted embeddings 312 output by the weight layer 310 for each embedding 306 may correspond to a dot product between the embedding 306 and the respective position vector PV 308 .
- the weighted embeddings 312 may be interpreted as attending over the embeddings in proportion to how similar they are to the positioned associated with their respective position vectors PV 308 .
- the prediction network 300 includes non-recurrent layers, and therefore, the sequence of weighted embeddings 312 Aa-An are not concatenated, but instead, averaged by a weighted average module 316 to generate, as output from the first head 302 A, a weighted average 318 A of the weighted embeddings 312 Aa-An represented by:
- Equation 1 h represents the index of the heads 302 , n represents position in context, and e represents the embedding dimension. Additionally, in Equation 1, H, N, and d e include the sizes of the corresponding dimensions.
- the position vector PV 308 does not have to be trainable and may include random values. Notably, even though the weighted embeddings 312 are averaged, the position vectors PV 308 can potentially save position history information, alleviating the need to provide recurrent connections at each layer of the prediction network 300 .
- the weight layer 310 outputs a sequence of weighted embeddings 312 Ba-Bn , 312 Ha-Hn at each other head 302 B-H that is different than the sequence of weighted embeddings 312 Aa-Aa at the first head 302 A.
- the weighted average module 316 generates, as output from each other corresponding head 302 B-H, a respective weighted average 318 B-H of the corresponding weighted embeddings 312 of the sequence of non-blank symbols.
- the prediction network 300 includes a head average module 322 that averages the weighted averages 318 A-H output from the corresponding heads 302 A-H.
- a projection layer 326 with SWISH may receive, as input, an output 324 from the head average module 322 that corresponds to the average of the weighted averages 318 A-H, and generate, as output, a projected output 328 .
- a final layer normalization 330 may normalize the projected output 328 to provide the single embedding vector Pu i 350 at the corresponding time step from the plurality of time steps.
- the prediction network 300 generates only a single embedding vector Pu i 350 at each of the plurality of time steps subsequent to an initial time step.
- the prediction network 300 does not implement the multi-headed attention mechanism 302 and only performs the operations described above with respect to the first head 302 A.
- the weighted average 318 A of the weighted embeddings 312 Aa-An is simply passed through the projection layer 326 and layer normalization 330 to provide the single embedding vector Pu i 350.
- the prediction network 300 may instead include conformer or transformer layers in lieu of LSTM layers.
- the prediction network 300 includes a V2 embedding look up table in lieu of a network of LSTM, transformer, or conformer layers.
- the V2 embedding lookup table may receive, as input, the previous two predictions (e.g., 1-hot vectors) output by the joint layer 230 , compute a respective embedding d 1 , d 2 for each of the previous two predictions, and provide a concatenated output [d 1 , d 2 ] to the joint layer 230 .
- the V2 embedding lookup table may have only about two (2) million parameters, whereas an LSTM-based prediction network may include about 23.4 million parameters.
- the joint layer 230 may also be a one-layer neural network with 640 hidden units.
- the Softmax layer may be composed of a unified word piece or grapheme set that is generated using all unique word pieces or graphemes in a plurality of training data sets.
- the decoder 204 is configured to generate, at each output step, a probability distribution over possible speech recognition hypotheses.
- the joint layer 230 generates, at each output step (e.g., time step), a probability distribution over possible speech recognition hypotheses.
- the “possible speech recognition hypotheses” correspond to a set of output labels/symbols (also referred to as “speech units”) each representing a grapheme (e.g., symbol/character) or a word piece in a specified natural language.
- the set of output labels may include twenty-seven (27) symbols, e.g., one label for each of the 26-letters in the English alphabet and one label designating a space.
- the joint layer 230 may output a set of values indicative of the likelihood of occurrence of each of a predetermined set of output labels.
- This set of values can be a vector (e.g., a one-hot vector) and can indicate a probability distribution over the set of output labels.
- the output labels are graphemes (e.g., individual characters, and potentially punctuation and other symbols), but the set of output labels is not so limited.
- the set of output labels can include wordpieces and/or entire words, in addition to or instead of graphemes.
- the output labels could also be other types of speech units, such as phonemes or sub-phonemes.
- the output distribution of the joint layer 230 can include a posterior probability value for each of the different output labels.
- the output of the joint layer 230 can include 100 different probability values, one for each output label.
- the probability distribution can then be used to select and assign scores to candidate orthographic elements (e.g., graphemes, wordpieces, and/or words) in a beam search process (e.g., by the Softmax layer) for determining the transcription 120 .
- the LM 206 includes a unidirectional conformer that looks back a predetermined number of tokens (e.g., seven tokens) for each output wordpiece model prediction.
- the conformer LM 206 may have a stack of layers (e.g., 12 layers) where each layer includes a model dimension of 768, a feedforward layer dimension of 2048, and a six-head attention. In these implementations, the conformer LM 206 is trained to predict 4,096 wordpieces.
- HAT Hybrid Autoregressive Transducer
- HAT factorization allows the integration of the model 200 with the external LM 206 without requiring coverage penalties as follows.
- ⁇ 1 and ⁇ 2 denote weights assigned to the external LM 206 and the internal language model, respectively.
- the model 200 operates in both the streaming and non-streaming modes in parallel.
- the model 200 first performs streaming speech recognition on the audio data 110 using the first encoder 210 to generate the first higher order representation e s for both the second encoder 220 and the decoder 204 .
- the decoder 204 then produces the partial speech recognition results 120 , 120 a .
- the model 200 also performs non-streaming speech recognition on the encoded audio data 110 where the second encoder 220 uses the first higher order representation e s received from the first encoder 210 to generate the second higher order representation e a .
- the decoder 204 then produces a speech recognition result, which is then rescored by the LM 206 to produce the final speech recognition result 120 , 120 b .
- the first encoder 210 produces the partial speech recognition results 120 a while the second encoder 220 waits for the output of the first encoder 210 .
- the LM 206 may bias the output from the decoder 204 to generate the final speech recognition result 120 b .
- the final speech recognition result 120 b for the input utterance 106 may be delayed from the partial speech recognition results 120 a for the input utterance.
- the first encoder 210 may identify an endpoint of the utterance 106 that triggers a microphone closing event and triggers the final speech recognition result 120 b to be emitted.
- parameter tying between the prediction network 300 and the joint layer 230 is applied.
- and an embedding dimension d e the shared embedding matrix 304 at the prediction network 300 is E ⁇
- a last hidden layer includes a dimension size d h at the joint layer 230 , feed-forward projection weights from the hidden layer to the output logits will be W ⁇ d h x
- the feed-forward layer corresponding to the last layer of the joint layer 230 includes a weight matrix [d h ,
- the prediction network 300 By having the prediction network 300 to tie the size of the embedding dimension d e to the dimensionality d h of the last hidden layer of the joint layer 230 , the feed-forward projection weights of the joint layer 230 and the shared embedding matrix 304 of the prediction network 300 can share their weights for all non-blank symbols via a simple transpose transformation. Since the two matrices share all their values, the decoder 204 only needs to store the values once on memory, instead of storing two individual matrices.
- the decoder 204 By setting the size of the embedding dimension d e equal to the size of the hidden layer dimension d h , the decoder 204 reduces a number of parameters equal to the product of the embedding dimension d e and the vocabulary size
- FIG. 4 shows an example of a data selection pipeline 400 for training the external LM 206 of the ASR system 109 .
- large training data sets such as a corpus of training text samples 412 , 412 a - n are used to train language models that execute in computing environments (e.g., the cloud) that are not inhibited by processing, memory/storage, and power constraints.
- the ASR system 109 resides on the user device 10 of the user 104 , thereby limiting the number of parameters in the LM 206 , and consequently, the number of training samples in the training set used to train the LM 206 .
- a data selection pipeline 400 processes the corpus of training text samples 412 to reduce the amount of training data (i.e., training text samples) needed to train the LM 206 to accurately recognize rare words, thereby allowing the ASR system 109 including the external LM 206 to run on-device where processing and/or memory/storage resources is limited.
- the data selection pipeline 400 filters the training text samples from the corpus to identify a subset of training samples sufficient for improving rare-word recognition.
- the corpus of training text samples 412 may include 213 billion sentences with a size of about 12 terabytes, wherein 7.2 billion of the samples are distinct.
- the pipeline 400 may reduce the number of samples 412 in the corpus to about only four (4) billion sentences for training the LM 206 , which is 53 ⁇ smaller than the original corpus and without degradation in overall performance of the LM 206 in terms of word error rate (WER).
- WER word error rate
- the data selection pipeline 400 uses a resampling filter 420 , a rare word filter 430 , and a contrastive filter 440 to reduce the number of the training text utterances in the corpus of training text samples 412 for training the LM 206 .
- the data selection pipeline 400 obtains the corpus of training text samples 412 , 412 a - n stored in a training text data store 410 and a plurality of training utterances 452 , 452 a - n stored in a training utterances data store 450 .
- the training utterances 452 stored in the training utterances data store 450 are used for training the ASR model 200 and each training utterance 452 includes audio data 454 corresponding to an utterance and a corresponding transcription 456 of the utterance. While FIG. 4 shows the pipeline 400 employing each of the resampling filter 420 , the rare word filter 430 , and the contrastive filter 440 for selecting training text data, the pipeline may use only one or two of the resampling filter 420 , the rare word filter 430 , and the contrastive filer 440 for selecting training text data.
- the resampling filter 420 receives the corpus of training text samples 412 stored in the training text data store 410 and executes a resampling function to identify rare words (e.g., words that occur less frequently) in the corpus by identifying and removing high frequency training text samples from the corpus to output a set of low frequency training text samples (also referred to as ‘set of training text samples’) 422 corresponding samples from the corpus of training text samples 412 that include rare words.
- the resampling filter 420 measures frequency at the sentence level rather than at the word level for the sake of simplicity.
- the resampling filter 420 may, however, measure rareness of a sentence from an aggregate of its own words without departing from the scope of the present disclosure.
- a word or sentence is more rare when it has a lower frequency (there are fewer occurrences of it) in the corpus relative to other words or sentences.
- the term “tailedness” may be used to describe the relative amount of rare words occurring the corpus of training text samples 412 .
- the frequency distribution of the corpus of training text samples 412 as a whole is linear on a log-log plot and is expressed by:
- f denotes the frequency
- A denotes the number of distinct training text samples 412 (i.e., having a frequency f of one).
- ⁇ the distribution changes. For example, a larger ⁇ results in a distribution with a heavy frequency of rare words. Examples where ⁇ approaches infinity indicate that there are no duplicate training texts 412 in the plurality of training text samples 412 .
- the plurality of training text samples 412 stored in the training text data store 410 include an ⁇ of 1.1-2.5.
- training text samples 412 occurring at an excessive frequency rate deviate from the linear distribution of the frequency distribution.
- the resampling filter 420 may execute a resampling function including one of a simple power resampling function, a forced power resampling function, or a soft logarithmic resampling function.
- Simple power resampling may include tuning the rareness of the frequency distribution distinct_count(f) by applying a parameter ⁇ . The simple power frequency distribution may then be expressed as Af ⁇ .
- forced power resampling is used to manage the excessive frequency training text samples in the corpus of training text samples 412 by forcing each training text 412 to fit a line fit.
- the line fit for a Maps domain may indicate a distinct count of 1 corresponding to a frequency of 10 6 .
- its resampled frequency f 1 will be 10 6 regardless of its original frequency f 0 .
- a training text sample with a high original frequency f 0 e.g., 10 8
- This forced power resampling operation is expressed as:
- the resampling filter 420 may execute a soft logarithmic resampling function, which matches the original frequency distribution distinct_count(f) of the corpus of training text samples 412 and then removes training texts from the corpus that exceed a threshold.
- the soft logarithmic function is expressed by:
- f c denotes a threshold frequency
- the resampling filter 420 removes the high frequency training texts from the corpus of training text samples 412 to output the set of training text samples 422 that include rare words
- the set of training text samples 422 are provided as input to the rare word filter 430 and the contrastive filter 440 .
- the removal of high frequency training text samples from the corpus is desirable since these samples would provide a distributional bias that may prevent the LM 206 from learning a long tail of form the corpus that includes many rare words.
- the rare word filter 430 identifies a subset of rare-word training text samples 432 that include words that do not appear in the transcriptions 456 from the set of training utterances 452 or appear in the transcriptions 456 from the set of training utterances 452 less than a threshold number of times.
- the contrastive filter 440 identifies a subset of target domain training text samples 442 within the set training text samples 422 that match a target domain associated with the training utterances 452 used to train the ASR model 200 .
- the training utterances 452 may be referred to as ASR training utterances 452 each including ASR audio data 454 paired with corresponding ASR transcripts 456 .
- the data selection pipeline 400 then combines ASR transcripts 456 , the rare word training text samples 432 , and the target domain training text samples 442 into mini-batches for use by a language model trainer 480 to train the LM 206 .
- the mini-batches may be combined according to a sampling ratio (e.g., 20%/40%/40% for ASR transcriptions 456 /rare word training text samples 432 /target domain training text samples 442 ).
- the rare word filter 430 directly filters the transcriptions 456 from the set of ASR training utterances 452 that include words that appear in the set of training text samples 422 using a frequency threshold f t (e.g., 15) to identify training text samples for inclusion in the subset of rare-word training text samples 432 .
- the rare word filter 420 also identifies any training text samples 422 that do not appear in the transcriptions 456 for inclusion in the subset of rare-word training text samples 432 .
- the contrastive filter 440 applies contrastive selection/filtering on the set of low frequency training text samples 422 output by the resampling filter 420 to identify a subset of target domain training text samples 442 that match a target domain associated with the set of training utterances 452 used to train the ASR model 200 .
- the corpus of training text samples 412 may include text samples collected from domains that are different than the domain the ASR model 200 is trained to recognize speech. For instance, the text samples may collected form typed search queries containing more website names while the target domain of the ASR model 200 corresponds to voice search containing more voice commands. This contrastive selection is calculated for each training text sample in the set of low frequency training text samples 422 by:
- target denotes the target LM 206
- background denotes a background Language Model trained on a fully deduplicated set of training data.
- the contrastive selection is then tuned on the transcriptions 456 of the training utterances 452 to produce the target LM 206 .
- the score for a training text sample will be lower when the training text sample is closer to the transcriptions 456 of the training utterances 452 used to train the ASR model 200 .
- the contrastive filter 440 then may discard a training text sample 422 that is above a threshold, to identify the subset of target domain training texts 442 from the set of low frequency training text samples 422 that are below the threshold.
- a target domain associated with the training utterances may include assistant queries, voice search queries, navigation queries, or utterances associated with any other domain.
- the ASR model 200 of FIGS. 1 - 3 is trained on the training utterances 452 that each include audio data 454 of a corresponding utterance and a corresponding transcription 456 of the utterance that serves as a ground-truth label for the audio data 454 .
- FIG. 5 includes a flowchart of an example arrangement of operations for a method 500 of training a language model 206 for rare-word speech recognition.
- the method 500 includes, at operation 502 , obtaining a set of training text samples 422 .
- the method 500 also includes obtaining a set of training utterances 452 used for training a speech recognition model 200 (e.g., an automatic speech recognition (ASR) model 200 ), each training utterance 452 in the plurality of training utterances 452 including audio data 454 corresponding to an utterance and a corresponding transcription 456 of the utterance.
- ASR automatic speech recognition
- the method 500 includes applying rare word filtering on the set of training text samples 422 to identify a subset of rare-word training text samples 432 .
- the subset of rare-word training text samples 432 include words that do not appear in the transcriptions 456 from the set of training utterances 452 or appear in the transcriptions 456 from the set of training utterances 452 less than a threshold number of times.
- the method 500 further includes, at operation 508 , training the external language model 206 on the transcriptions 456 from the set of training utterances 452 and the identified subset of rare-word training text samples 432 .
- FIG. 6 is schematic view of an example computing device 600 that may be used to implement the systems and methods described in this document.
- the computing device 600 is intended to represent various forms of digital computers, such as laptops, desktops, workstations, personal digital assistants, servers, blade servers, mainframes, and other appropriate computers.
- the components shown here, their connections and relationships, and their functions, are meant to be exemplary only, and are not meant to limit implementations of the implementations described and/or claimed in this document.
- the computing device 600 includes a processor 610 , memory 620 , a storage device 630 , a high-speed interface/controller 640 connecting to the memory 620 and high-speed expansion ports 650 , and a low speed interface/controller 660 connecting to a low speed bus 670 and a storage device 630 .
- Each of the components 610 , 620 , 630 , 640 , 650 , and 660 are interconnected using various busses, and may be mounted on a common motherboard or in other manners as appropriate.
- the processor 610 (also referred to as “data processing hardware 610 ” that may include the data processing hardware 12 of the user device 10 or the data processing hardware 62 of the remote computing device 60 ) can process instructions for execution within the computing device 600 , including instructions stored in the memory 620 or on the storage device 630 to display graphical information for a graphical user interface (GUI) on an external input/output device, such as display 680 coupled to high speed interface 640 .
- GUI graphical user interface
- multiple processors and/or multiple buses may be used, as appropriate, along with multiple memories and types of memory.
- multiple computing devices 600 may be connected, with each device providing portions of the necessary operations (e.g., as a server bank, a group of blade servers, or a multi-processor system).
- the memory 620 (also referred to as “memory hardware 620 ” that may include the memory hardware 14 of the user computing device 10 or the memory hardware 64 of the remote computing device 60 ) stores information non-transitorily within the computing device 600 .
- the memory 620 may be a computer-readable medium, a volatile memory unit(s), or non-volatile memory unit(s).
- the non-transitory memory 620 may be physical devices used to store programs (e.g., sequences of instructions) or data (e.g., program state information) on a temporary or permanent basis for use by the computing device 600 .
- non-volatile memory examples include, but are not limited to, flash memory and read-only memory (ROM)/programmable read-only memory (PROM)/erasable programmable read-only memory (EPROM)/electronically erasable programmable read-only memory (EEPROM) (e.g., typically used for firmware, such as boot programs).
- volatile memory examples include, but are not limited to, random access memory (RAM), dynamic random access memory (DRAM), static random access memory (SRAM), phase change memory (PCM) as well as disks or tapes.
- the storage device 630 is capable of providing mass storage for the computing device 600 .
- the storage device 630 is a computer-readable medium.
- the storage device 630 may be a floppy disk device, a hard disk device, an optical disk device, or a tape device, a flash memory or other similar solid state memory device, or an array of devices, including devices in a storage area network or other configurations.
- a computer program product is tangibly embodied in an information carrier.
- the computer program product contains instructions that, when executed, perform one or more methods, such as those described above.
- the information carrier is a computer- or machine-readable medium, such as the memory 620 , the storage device 630 , or memory on processor 610 .
- the high speed controller 640 manages bandwidth-intensive operations for the computing device 600 , while the low speed controller 660 manages lower bandwidth-intensive operations. Such allocation of duties is exemplary only.
- the high-speed controller 640 is coupled to the memory 620 , the display 680 (e.g., through a graphics processor or accelerator), and to the high-speed expansion ports 650 , which may accept various expansion cards (not shown).
- the low-speed controller 660 is coupled to the storage device 630 and a low-speed expansion port 690 .
- the low-speed expansion port 690 which may include various communication ports (e.g., USB, Bluetooth, Ethernet, wireless Ethernet), may be coupled to one or more input/output devices, such as a keyboard, a pointing device, a scanner, or a networking device such as a switch or router, e.g., through a network adapter.
- input/output devices such as a keyboard, a pointing device, a scanner, or a networking device such as a switch or router, e.g., through a network adapter.
- the computing device 600 may be implemented in a number of different forms, as shown in the figure. For example, it may be implemented as a standard server 600 a or multiple times in a group of such servers 600 a , as a laptop computer 600 b , or as part of a rack server system 600 c.
- implementations of the systems and techniques described herein can be realized in digital electronic and/or optical circuitry, integrated circuitry, specially designed ASICs (application specific integrated circuits), computer hardware, firmware, software, and/or combinations thereof.
- ASICs application specific integrated circuits
- These various implementations can include implementation in one or more computer programs that are executable and/or interpretable on a programmable system including at least one programmable processor, which may be special or general purpose, coupled to receive data and instructions from, and to transmit data and instructions to, a storage system, at least one input device, and at least one output device.
- a software application may refer to computer software that causes a computing device to perform a task.
- a software application may be referred to as an “application,” an “app,” or a “program.”
- Example applications include, but are not limited to, system diagnostic applications, system management applications, system maintenance applications, word processing applications, spreadsheet applications, messaging applications, media streaming applications, social networking applications, and gaming applications.
- the processes and logic flows described in this specification can be performed by one or more programmable processors, also referred to as data processing hardware, executing one or more computer programs to perform functions by operating on input data and generating output.
- the processes and logic flows can also be performed by special purpose logic circuitry, e.g., an FPGA (field programmable gate array) or an ASIC (application specific integrated circuit).
- processors suitable for the execution of a computer program include, by way of example, both general and special purpose microprocessors, and any one or more processors of any kind of digital computer.
- a processor will receive instructions and data from a read only memory or a random access memory or both.
- the essential elements of a computer are a processor for performing instructions and one or more memory devices for storing instructions and data.
- a computer will also include, or be operatively coupled to receive data from or transfer data to, or both, one or more mass storage devices for storing data, e.g., magnetic, magneto optical disks, or optical disks.
- mass storage devices for storing data
- a computer need not have such devices.
- Computer readable media suitable for storing computer program instructions and data include all forms of non-volatile memory, media and memory devices, including by way of example semiconductor memory devices, e.g., EPROM, EEPROM, and flash memory devices; magnetic disks, e.g., internal hard disks or removable disks; magneto optical disks; and CD ROM and DVD-ROM disks.
- the processor and the memory can be supplemented by, or incorporated in, special purpose logic circuitry.
- one or more aspects of the disclosure can be implemented on a computer having a display device, e.g., a CRT (cathode ray tube), LCD (liquid crystal display) monitor, or touch screen for displaying information to the user and optionally a keyboard and a pointing device, e.g., a mouse or a trackball, by which the user can provide input to the computer.
- a display device e.g., a CRT (cathode ray tube), LCD (liquid crystal display) monitor, or touch screen for displaying information to the user and optionally a keyboard and a pointing device, e.g., a mouse or a trackball, by which the user can provide input to the computer.
- Other kinds of devices can be used to provide interaction with a user as well; for example, feedback provided to the user can be any form of sensory feedback, e.g., visual feedback, auditory feedback, or tactile feedback; and input from the user can be received in any form, including acoustic, speech, or tactile input
Abstract
A method of training a language model for rare-word speech recognition includes obtaining a set of training text samples, and obtaining a set of training utterances used for training a speech recognition model. Each training utterance in the plurality of training utterances includes audio data corresponding to an utterance and a corresponding transcription of the utterance. The method also includes applying rare word filtering on the set of training text samples to identify a subset of rare-word training text samples that include words that do not appear in the transcriptions from the set of training utterances or appear in the transcriptions from the set of training utterances less than a threshold number of times. The method further includes training the external language model on the transcriptions from the set of training utterances and the identified subset of rare-word training text samples.
Description
- This U.S. patent application claims priority under 35 U.S.C. § 119(e) to U.S. Provisional Application 63/261,946, filed on Sep. 30, 2021. The disclosure of this prior application is considered part of the disclosure of this application and is hereby incorporated by reference in its entirety.
- This disclosure relates to large-scale language model data selection for rare-word speech recognition.
- Automated speech recognition (ASR) systems have evolved from multiple models where each model had a dedicated purpose to integrated models where a single neural network is used to directly map an audio waveform (i.e., input sequence) to an output sentence (i.e., output sequence). This integration has resulted in a sequence-to-sequence approach, which generates a sequence of words (or graphemes) when given a sequence of audio features. With an integrated structure, all components of a model may be trained jointly as a single end-to-end (E2E) neural network. Here, an E2E model refers to a model whose architecture is constructed entirely of a neural network. A fully neural network functions without external and/or manually designed components (e.g., finite state transducers, a lexicon, or text normalization modules). Additionally, when training E2E models, these models generally do not require bootstrapping from decision trees or time alignments from a separate system. These E2E automatic speech recognition (ASR) systems have made tremendous progress, surpassing conventional ASR systems in several common benchmarks including word error rates (WER). The architecture of E2E ASR models are largely application dependent. For instance, a number of applications that involve user interaction, such as voice-search or on-device dictation, require the model to perform recognition in a streaming fashion. Other applications, like offline video captioning, do not require the model to be streaming and can make use of future context to improve performance. Additionally, existing E2E models experience high failure rates in recognizing rare words not seen during training. Rare word recognition is improved by training an external language model on large-scale training datasets.
- One aspect of the disclosure provides a computer-implemented method of training a language model for rare-word speech recognition. The computer-implemented method when executed on data processing hardware causes the data processing hardware to perform operations that include obtaining a set of training text samples, and obtaining a set of training utterances used for training an automatic speech recognition (ASR) model. Each training utterance in the plurality of training utterances includes audio data corresponding to an utterance and a corresponding transcription of the utterance. The operations also include applying rare word filtering on the set of training text samples to identify a subset of rare-word training text samples that include words that do not appear in the transcriptions from the set of training utterances or appear in the transcriptions from the set of training utterances less than a threshold number of times. The operations further include training the external language model on the transcriptions from the set of training utterances and the identified subset of rare-word training text samples.
- Implementations of the disclosure may include one or more of the following optional features. In some implementations, obtaining the set of training text samples includes receiving a corpus of training text samples, executing a resampling function on the corpus of training text samples to identify high frequency text samples that occur in the corpus of training text samples, and obtaining the set of training text samples by removing the identified high frequency text samples from the corpus of training text samples. In some examples, the resampling function includes one of a simple power resampling function, a forced power resampling function, or a soft logarithmic resampling function.
- In some implementations, the operations further include applying contrastive filtering on the set of training text samples to identify a subset of target domain training text samples that match a target domain associated with the set of training utterances. Here, training the external language model on the transcriptions from the set of training utterances and the identified subset of rare-word training text samples further includes training the external language model on the identified subset of target domain training text samples that match the target domain. In some examples, the external language model includes an external neural language model. In these examples, the external neural language model may include a stack of conformer layers or transformer layers.
- In some implementations, the operations further include integrating the trained external language model with the trained ASR model. The trained external language model is configured to rescore probability distributions over possible speech recognition hypotheses predicted by the trained ASR model. In these implementations, the ASR model includes a first encoder, a second encoder, and a decoder. The first encoder is configured to receive, as input, a sequence of acoustic frames, and generate, at each of a plurality of output steps, a first higher order feature representation for a corresponding acoustic frame in the sequence of acoustic frames. The second encoder is configured to receive, as input, the first higher order feature representation generated by the first encoder at each of the plurality of output steps, and generate, at each of the plurality of output steps, a second higher order feature representation for a corresponding first higher order feature frame. The decoder is configured to receive, as input, the second higher order feature representation generated by the second encoder at each of the plurality of output steps, and generate, at each of the plurality of time steps, a first probability distribution over possible speech recognition hypotheses.
- In these implementations, the decoder may be further configured to receive, as input, the first higher order feature representation generated by the first encoder at each of the plurality of output steps, and generate, at each of the plurality of time steps, a second probability distribution over possible speech recognition hypothesis. Additionally, the decoder may include a prediction network and a joint network. When the ASR model is operating in a streaming mode, the prediction network is configured to receive, as input, the average embedding generated by the prediction network at each of the plurality of output steps and the first higher order feature representation generated by the first encoder at each of the plurality of output steps, and generate, at each of the plurality of output steps, the second probability distribution over possible speech recognition hypothesis. Alternatively, when the ASR model is operating in a non-streaming mode, the prediction network is configured to receive, as input, the average embedding generated by the prediction network at each of the plurality of output steps and the second higher order feature representation generated by the second encoder at each of the plurality of output steps, and generate the first probability distribution over possible speech recognition hypothesis.
- Additionally or alternatively, the first encoder may include a causal encoder including an initial stack of conformer layers. Here, the second encoder may include a non-causal encoder including a final stack of conformer layers overlain on the initial stack of conformer layers. The first encoder and the second encoder of the ASR model may be trained using Hybrid Autoregressive Transducer Factorization to facilitate the integration of the external language model trained on text-only data including the transcriptions from the set of training utterances and the identified subset of rare-word training text samples.
- Another aspect of the disclosure provides a system for training a language model for rare-word speech recognition. The system includes data processing hardware and memory hardware in communication with the data processing hardware. The memory hardware stores instructions that when executed on the data processing hardware causes the date processing hardware to perform operations including obtaining a set of training text samples, and obtaining a set of training utterances used for training an automatic speech recognition (ASR) model. Each training utterance in the plurality of training utterances includes audio data corresponding to an utterance and a corresponding transcription of the utterance. The operations also include applying rare word filtering on the set of training text samples to identify a subset of rare-word training text samples that include words that do not appear in the transcriptions from the set of training utterances or appear in the transcriptions from the set of training utterances less than a threshold number of times. The operations further include training the external language model on the transcriptions from the set of training utterances and the identified subset of rare-word training text samples.
- This aspect may include one or more of the following optional features. In some implementations, obtaining the set of training text samples includes receiving a corpus of training text samples, executing a resampling function on the corpus of training text samples to identify high frequency text samples that occur in the corpus of training text samples, and obtaining the set of training text samples by removing the identified high frequency text samples from the corpus of training text samples. In some examples, the resampling function includes one of a simple power resampling function, a forced power resampling function, or a soft logarithmic resampling function.
- In some implementations, the operations further include applying contrastive filtering on the set of training text samples to identify a subset of target domain training text samples that match a target domain associated with the set of training utterances. Here, training the external language model on the transcriptions from the set of training utterances and the identified subset of rare-word training text samples further includes training the external language model on the identified subset of target domain training text samples that match the target domain. In some examples, the external language model includes an external neural language model. In these examples, the external neural language model may include a stack of conformer layers or transformer layers.
- In some implementations, the operations further include integrating the trained external language model with the trained ASR model. The trained external language model is configured to rescore probability distributions over possible speech recognition hypotheses predicted by the trained ASR model. In these implementations, the ASR model includes a first encoder, a second encoder, and a decoder. The first encoder is configured to receive, as input, a sequence of acoustic frames, and generate, at each of a plurality of output steps, a first higher order feature representation for a corresponding acoustic frame in the sequence of acoustic frames. The second encoder is configured to receive, as input, the first higher order feature representation generated by the first encoder at each of the plurality of output steps, and generate, at each of the plurality of output steps, a second higher order feature representation for a corresponding first higher order feature frame. The decoder is configured to receive, as input, the second higher order feature representation generated by the second encoder at each of the plurality of output steps, and generate, at each of the plurality of time steps, a first probability distribution over possible speech recognition hypotheses.
- In these implementations, the decoder may be further configured to receive, as input, the first higher order feature representation generated by the first encoder at each of the plurality of output steps, and generate, at each of the plurality of time steps, a second probability distribution over possible speech recognition hypothesis. Additionally, the decoder may include a prediction network and a joint network. When the ASR model is operating in a streaming mode, the prediction network is configured to receive, as input, the average embedding generated by the prediction network at each of the plurality of output steps and the first higher order feature representation generated by the first encoder at each of the plurality of output steps, and generate, at each of the plurality of output steps, the second probability distribution over possible speech recognition hypothesis. Alternatively, when the ASR model is operating in a non-streaming mode, the prediction network is configured to receive, as input the average embedding generated by the prediction network at each of the plurality of output steps and the second higher order feature representation generated by the second encoder at each of the plurality of output steps, and generate the first probability distribution over possible speech recognition hypothesis.
- Additionally or alternatively, the first encoder may include a causal encoder including an initial stack of conformer layers. Here, the second encoder may include a non-causal encoder including a final stack of conformer layers overlain on the initial stack of conformer layers. The first encoder and the second encoder of the speech recognition model may be trained using Hybrid Autoregressive Transducer Factorization to facilitate the integration of the external language model trained on text-only data including the transcriptions from the set of training utterances and the identified subset of rare-word training text samples.
- The details of one or more implementations of the disclosure are set forth in the accompanying drawings and the description below. Other aspects, features, and advantages will be apparent from the description and drawings, and from the claims.
-
FIGS. 1A and 1B are schematic views of example speech environments using a speech recognition model and external language model architecture for automatic speech recognition. -
FIG. 2 is a schematic view of the speech recognition model and the language model architecture ofFIG. 1 . -
FIG. 3 is a schematic view of an example tied and reduced prediction layer of a prediction network of the speech recognition model ofFIG. 2 . -
FIG. 4 is a schematic view of a data selection pipeline for training a language model. -
FIG. 5 is a schematic view of an example arrangement of operations for a method of training a language model. -
FIG. 6 is a schematic view of an example computing device that may be used to implement the systems and methods described herein. - Like reference symbols in the various drawings indicate like elements.
- End-to-end (E2E) automatic speech recognition (ASR) models are traditionally structured to operate in either a streaming mode or a non-streaming mode. Conventionally, an E2E ASR model includes an encoder and a decoder as the main components. Applications that involve end-user interaction, like voice-search or on-device dictation, may require the model to perform recognition in a streaming fashion, where the words are expected to be output as they are spoken with as little latency as possible. This prevents the use of models that use future context to improve accuracy, such as bi-directional LSTMs. By contract, applications such as offline video captioning do not require streaming recognition and may make full use of any available future context to improve performance. Furthermore, conventional E2E ASR models are trained on a small fraction of audio-text pairs as compared to over 100 billion text utterances that a conventional model is trained with, and thus performs poorly on long-tail proper nouns and rare words.
- Implementations herein are directed toward a single E2E ASR model in combination with an on-device neural language model trained on data selected to improve the ASR model's recognition quality of rare words. More particularly, implementations herein are directed toward a data selection pipeline for selecting a sufficient subset of training data suitable for training the language model to improve recognition quality of rare words and long-tail proper nouns. The ASR model may use cascaded encoders that include streaming and non-streaming encoders, and a single decoder that learns to decode either using the output of the streaming or the non-streaming encoder to enable the ASR model to operate in streaming or non-streaming modes. In addition to ASR models, the architecture can apply to other models such as machine translation that implement both streaming and non-streaming modes.
-
FIGS. 1A and 1B are examples of a speech environment 100, 100 a-b. In the speech environment 100, a user's 104 manner of interacting with a computing device, such as auser device 10, may be through voice input. The user device 10 (also referred to generally as a device 10) is configured to capture sounds (e.g., streaming audio data) from one ormore users 104 within the speech environment 100. Here, the streaming audio data may refer to a spokenutterance 106 by theuser 104 that functions as an audible query, a command for thedevice 10, or an audible communication captured by thedevice 10. Speech-enabled systems of thedevice 10 may field the query or the command by answering the query and/or causing the command to be performed/fulfilled by one or more downstream applications. - The
user device 10 may correspond to any computing device associated with auser 104 and capable of receiving audio data. Some examples ofuser devices 10 include, but are not limited to, mobile devices (e.g., mobile phones, tablets, laptops, etc.), computers, wearable devices (e.g., smart watches), smart appliances, internet of things (IoT) devices, vehicle infotainment systems, smart displays, smart speakers, etc. Theuser device 10 includesdata processing hardware 12 andmemory hardware 14 in communication with thedata processing hardware 12 and stores instructions, that when executed by thedata processing hardware 12, cause thedata processing hardware 12 to perform one or more operations. Theuser device 10 further includes an audio system 16 with an audio capture device (e.g., microphone) 16, 16 a for capturing and converting spokenutterances 106 within the speech environment 100 into electrical signals and a speech output device (e.g., a speaker) 16, 16 b for communicating an audible audio signal (e.g., as output audio data from the device 10). While theuser device 10 implements a single audio capture device 16 a in the example shown, theuser device 10 may implement an array of audio capture devices 16 a without departing from the scope of the present disclosure, whereby one or more capture devices 16 a in the array may not physically reside on theuser device 10, but be in communication with the audio system 16. - In the speech environment 100, an automated speech recognition (ASR)
system 109 implementing an ASR model 200 (also referred to as the model 200) integrated with an external language model (LM) 206 resides on theuser device 10 of theuser 104 and/or on a remote computing device 60 (e.g., one or more remote servers of a distributed system executing in a cloud-computing environment) in communication with theuser device 10 via anetwork 40. Theremote computing device 60 may include remote resources, such as remote data processing hardware 62 (e.g., remote servers or CPUs) and/or remote memory hardware 64 (e.g., remote databases or other storage hardware). Theuser device 10 and/or theremote computing device 60 also includes anaudio subsystem 108 configured to receive theutterance 106 spoken by theuser 104 and captured by the audio capture device 16 a, and to convert theutterance 106 into a corresponding digital format associated with inputacoustic frames 110 capable of being processed by theASR system 109. In the example shown inFIG. 1A , theuser 104 speaks arespective utterance 106 and theaudio subsystem 108 converts theutterance 106 into corresponding audio data (e.g., acoustic frames) 110 for input to theASR system 109. Thereafter, themodel 200 receives, as input, theaudio data 110 corresponding to theutterance 106, and generates/predicts, as output, a corresponding transcription 120 (also referred to as a recognition result/hypothesis 120) of theutterance 106. - The
model 200 also includes a decoder 204 (FIG. 2 ) (also referred to as a shared decoder 204) shared between its encoders which enables themodel 200 to be a single model that can operate in streaming and non-streaming mode (e.g., in contrast with two separate models where each model is dedicated to either a streaming mode or non-streaming mode). For instance, as shown inFIG. 1A , a digital assistant application 50 executing on theuser device 10 may require the speech recognition to be streaming such that words, word pieces, and/or individual characters appear on the screen as soon as they are spoken. Additionally, it is also likely that theuser 104 of theuser device 10 has a low tolerance for latency when issuing queries for the digital assistant application 50 to perform. In these scenarios where the application demands minimal latency, themodel 200 operates in a streaming mode where themodel 200 may provide streaming transcription capabilities in real-time as theuser 104 is speaking theutterance 106. On the other hand, when theuser 104 has a higher tolerance for speech recognition latency and/or theutterance 106 to be recognized is associated with long-form speech (i.e., referring to speech consisting of full paragraphs or multiple sentences), thesame model 200 may operate in a non-streaming mode and may leverage a prediction network to provide anaccurate transcription 120, but incur increased latency. - Additionally, the
user 104 requires that theASR system 109 of theuser device 10 is able to accurately identify rare words or long-tail proper nouns, which can be achieved through use of theLM 206 with themodel 200 to help bias the output of themodel 200 when detecting rare words or proper nouns. As described in greater detail below with reference toFIG. 4 , theLM 206 may be trained with data sets obtained through differing data selection strategies to reduce the amount of text-only 1 training data needed to train theLM 206 to accurately bias the output of themodel 200 to detect rare words or proper nouns. Accordingly, theASR system 109 may implement a single ASR model that includes cascadedencoders 210, 220, for a multitude of different speech recognition tasks to provide both streaming and non-streaming transcription capabilities without having to leverage separately trained ASR models on a task-by-task basis while also using theLM 206 to increase the accuracy of thetranscription 120 when theutterance 106 includes rare words or long-tail proper nouns. - In some implementations, the
model 200 performs streaming encoding on theaudio data 110 first and then performs non-streaming encoding on the output of the streaming encoder. For instance, in the example shown, themodel 200 performs streaming speech recognition on theaudio data 110 using a first encoder (i.e., a low latency encoder) to produce partial speech recognition results 120, 120 a, and non-streaming speech recognition on the encodedaudio data 110 using a second encoder (i.e., a high latency encoder) to produce a finalspeech recognition result speech recognition result 120 b. Thus, the finalspeech recognition result 120 b for theinput utterance 106 may be delayed from the partial speech recognition results 120 a for the input utterance by a duration. - The
user device 10 and/or theremote computing device 60 also executes auser interface generator 107 configured to present a representation of thetranscription 120 of theutterance 106 to theuser 104 of theuser device 10. As described in greater detail below, theuser interface generator 107 may display the partial speech recognition results 120 a in a streaming fashion duringtime 1 and subsequently display the finalspeech recognition result 120 b duringtime 2. In some configurations, thetranscription 120 output from theASR system 109 is processed, e.g., by a natural language understanding (NLU) module executing on theuser device 10 or theremote computing device 60, to execute a user command/query specified by theutterance 106. Additionally or alternatively, a text-to-speech system (not shown) (e.g., executing on any combination of theuser device 10 or the remote computing device 60) may convert thetranscription 120 into synthesized speech for audible output by theuser device 10 and/or another device. - In the example of
FIG. 1A , theuser 104 in the speech environment 100 a interacts with a program or application 50 (e.g., the digital assistant application 50 a) of theuser device 10 that uses theASR system 109. For instance,FIG. 1A depicts theuser 104 communicating with the digital assistant application 50 a and the digital assistant application 50 a displaying a digital assistant interface 18 on a screen of theuser device 10 to depict a conversation between theuser 10 and a digital assistant of the digital assistant application 50 a. In this example, theuser 104 asks the digital assistant application 50 a, “What year was Serendipity released?” This question from theuser 104 is a spokenutterance 106 captured by the audio capture device 16 a and processed by audio systems 16 of theuser device 10. In this example, the audio system 16 receives the spokenutterance 106 and converts it intoacoustic frames 110 for input to theASR system 109. - Continuing with the example, the
model 200, while receiving theacoustic frames 110 corresponding to theutterance 106 as theuser 104 speaks, encodes theacoustic frames 110 using a first encoder 210 (i.e.,FIG. 2 ) and then decodes an encoded representation of theacoustic frames 110 using a decoder 204 (FIG. 2 ) into the partial speech recognition results 120 a. Duringtime 1, theuser interface generator 107 presents, via the digital assistant interface 18, a representation of the partial speech recognition results 120 a of theutterance 106 to theuser 104 of theuser device 10 in a streaming fashion such that words, word pieces, and/or individual characters appear on the screen as soon as they are spoken. - After all (or some amount) of the
acoustic frames 110 corresponding to theutterance 106 are received, and thefirst encoder 210 has encoded theseacoustic frames 110, the second encoder 220 (i.e.,FIG. 2A ) encodes the encoding output from thefirst encoder 210 to generate an encoding for the set ofacoustic frames 110 corresponding to theutterance 106 already encoded by thefirst encoder 210. Thedecoder 204 then decodes theacoustic frames 110 that have been encoded by the second encoder 220 and processes the decodedacoustic frames 110 using theLM 206, which rescores the decoded acoustic frames and generates a finalspeech recognition result 120 b. For example, when thefirst encoder 210 encodes all of theacoustic frames 110 corresponding to the utterance 106 (e.g., as theacoustic frames 110 are received), the second encoder 220 encodes all of theacoustic frames 110 that have been encoded by thefirst encoder 210. In this respect, by encoding over multiple encodedacoustic frames 110, thesecond encoder 210 is able to provide greater contextual awareness (e.g., by receiving representations of all of theacoustic frames 110 for the utterance 106) in a non-streaming fashion which may potentially reconcile or correct aspect(s) of theutterance 106 missed or misinterpreted by the streaming nature of thefirst encoder 210. - In some examples, an indication, such as an endpoint, that identifies that the
user 104 has finished speaking theutterance 106 functions to trigger the second encoder 220 of themodel 200 to encode all theacoustic frames 110. In other examples, the second encoder 220 encodes theacoustic frames 110 in parallel with thefirst encoder 210 and thefirst encoder 210 identifies the endpoint at the end of theutterance 106, thereby triggering the second encoder 220 to emit the finalspeech recognition result 120 b. The endpoint identified by thefirst encoder 210 may simultaneously trigger a microphone closing event. Duringtime 2, theuser interface generator 107 presents, via the digital assistant interface 18, a representation of the finalspeech recognition result 120 b of theutterance 106 to theuser 104 of theuser device 10. In some implementations, theuser interface generator 107 replaces (or modifies) the representation of the partial speech recognition results 120 a with the representation of the finalspeech recognition result 120 b. In this example, theutterance 106 of theuser 104 contains a rare word “Serendipity” that themodel 200 has not been trained on. Accordingly partial speech recognition results 120 a output by themodel 200 and displayed on the screen attime 1 incorrectly predicts that theutterance 106 of theuser 104 is “What year was serene released?” The finalspeech recognition result 120 b output by themodel 200 and displayed on the screen attime 2 at increased latency improves the speech recognition quality in terms of accuracy by identifying that theuser 104 said “Serendipity.” However, since theuser interface generator 107 displays the partial speech recognition results as the user speaks theutterance 106, the higher latency associated with producing, and ultimately displaying the finalspeech recognition result 120 b is less noticeable to theuser 104. - In some implementations, the
model 200 utilizes a pre-fetching technique that reduces latency by fetching speech recognition results before the finalspeech recognition result 120 b is available. Here, if the partial speech recognition results 120 a match the finalspeech recognition result 120 b, the response fetched for the partial speech recognition results 120 a can be emitted instantly to save execution latency that typically occurs after the finalspeech recognition result 120 b is complete. - In the example shown in
FIG. 1A , the digital assistant application 50 a may respond to the question posed by theuser 104 using natural language processing. Natural language processing generally refers to a process of interpreting written language (e.g., the partial speech recognition results 120 a and/or the finalspeech recognition result 120 b) and determining whether the written language prompts any action. In this example, the digital assistant application 50 a uses natural language processing to recognize that the question from theuser 10 regards the user's environment and more particularly a song playing in the user's vicinity. By recognizing these details with natural language processing, the automated assistant returns aresponse 19 to the user's query where theresponse 19 states, “Serendipity was released in 2001.” In some configurations, natural language processing occurs on theremote computing device 60 in communication with thedata processing hardware 12 of theuser device 10. -
FIG. 1B is another example of speech recognition with theASR system 109 of the speech environment 100 b. As shown in the example, theuser 104 interacts with a voicemail application 50, 50 b displaying a voicemail application interface 18, 18 b on the screen of theuser device 10 to transcribe a voicemail that was left for theuser 104 by Jane Doe. In this example, latency is not important; however, accuracy of the transcription when processing long-tail proper nouns or rare words is important. Themodel 200 of theASR system 109 and theLM 206 are able to take advantage of the full context of the audio by waiting until all of theacoustic frames 110 corresponding to the voicemail are generated. This voicemail scenario also illustrates how themodel 200 is capable of handling a long-form of speech because a voicemail is often multiple sentences or even several paragraphs. The ability to handle long-form speech is particularly advantageous over other ASR models, such as two-pass models with LAS decoders, because these two pass-models often suffer from long-form issues (e.g., a higher word deletion rate on long-form speech) when applied to long-form conditions. For instance, by using an RNN-T decoder as thedecoder 204 in combination with cascading encoders 202 (e.g., thefirst encoder 210 and the second encoder 220), themodel 200 operates for both long-form speech and short-form speech without the long-form setbacks. - With continued reference to
FIG. 1B , as discussed with respect toFIG. 1A , themodel 200 encodes theacoustic frames 110 using thefirst encoder 210 while receiving theacoustic frames 110. After themodel 200 receives all of theacoustic frames 110 and encodes them with thefirst encoder 210, themodel 200 provides the first encoder output as input to the second encoder 220. The second encoder 220 encodes the first encoder output before thedecoder 204 generates an embedding and theLM 206 rescores thedecoder 204 output to generate the finalspeech recognition result 120 b. Duringtime 3, theuser interface generator 107 presents, via the digital assistant interface 18 b, a representation of the finalspeech recognition result 120 b without first displaying the partial speech recognition results 120 a. For example, the finalspeech recognition result 120 b is a transcript of the long-form voicemail from Jane Doe that states, “Do you want to watch Serendipity tonight? Give me a call back when you get this.” -
FIG. 2 includes anexample model 200 capable of operating in various combinations of streaming and non-streaming modes. Specifically, themodel 200 includes a cascadingencoder 202, adecoder 204, and anexternal LM 206. The cascadingencoder 202 refers to a model structure where the encoding pathway includes twoencoders 210, 220 that cascade such that the output of oneencoder 210 feeds the input of the other encoder 220 prior to decoding. Here, theencoders 210, 220 can be cascaded irrespective of the underlying architecture for each encoder. In some examples, theencoders 210, 220 include a stack of 512-dimension conformer layers. Causal convolution and left-context attention layers may be used for each conformer layer to strictly restrict the model use no future inputs. A multi-headed (e.g., 8 heads) attention mechanisms may be used in a self-attention layer. The cascades encoders 210, 220 may include 17 conformer layers. Here, thecausal encoder 210 may include 15 conformer layers while thenon-causal encoder 210 may include two conformer layers that take in additional right context (e.g., 5.04 seconds). Optionally, transformer layers may be used in lieu of conformer layers. - In other implementations, one encoder is constructed with an LSTM structure while the other encoder is constructed using bi-directional LSTM layers or conformer layers (e.g., a conformer-transducer). In other words, the
encoders 210, 220 may have different architectures or similar architectures. For instance, the cascadingencoder 202 may be roughly analogous to an acoustic model (AM) in a traditional ASR system, and may include a recurrent network of stacked Long Short-Term Memory (LSTM) layers. Here, thefirst encoder 210 is a streaming encoder that includes unidirectional Long Short Term Memory (LSTM) layers while the second encoder 220 is a non-streaming encoder that includes bidirectional LSTM layers or conformer layers. In a cascadingencoder 202, where bothencoders first encoder 210 may take advantage of the LSTM layers of thefirst encoder 210 such that the second encoder 220 includes fewer LSTM layers than the first encoder 210 (and fewer LSTM layers than a fully non-streaming model). By having fewer LSTM layers, the cascadingencoder 202 may reduce the number of more computationally expensive bidirectional layers, making themodel 200 more streamlined than simply combining a traditional streaming model with a traditional non-streaming model. In some implementations, in order to limit the amount of future context that the cascadedencoders model 200 sees, the second encoder 220 uses some number of conformer layers (e.g., two layers) with a particular amount of right context (e.g., five seconds of right context), while thefirst encoder 210 continues to use LSTM layers. For these implementations, each conformer layer in the second encoder 220 may have 640 units to match the LSTM layers and adds around 10 million additional parameters. - Still referring to
FIG. 2 , thefirst encoder 210 reads a sequence of d-dimensional feature vectors (e.g.,acoustic frames 110 shown inFIGS. 1A and 1B ) x=(x1, x2, . . . , xT), where xt∈first encoder 210, and is trained to receive the first higher order feature es as input, and output a second higher order feature representation. This second higher order feature representation is denoted as ea. Both thefirst encoder 210 and the second encoder 220 are directly connected to, and shared by, thedecoder 204. Accordingly, thedecoder 204 receives both the first higher order feature representation es and the second higher order feature representation ea as inputs. - The
decoder 204 may include a recurrent neural network-transducer (RNN-T) architecture having ajoint layer 230 and aprediction network 300. Thedecoder 204 uses thejoint layer 230 to combine (i.e., when themodel 200 operates in non-streaming mode) the first and second higher order feature representations es, ea, output by the cascadingencoder 202, as well as an embedding output from the embeddinglookup 300 for the previous prediction yr-1), in order to produce a decoder output. The decoder output is then passed to theexternal LM 206 that rescores/improves the initial outputs from thedecoder 204 with techniques such as lattice rescoring or n-best re-ranking. In other words, thedecoder 204 produces predictions and theexternal LM 206 finalizes the prediction by improving recognition accuracy on rare words or long-tail proper nouns. When themodel 200 operates in the streaming mode, thejoint layer 230 receives the output of the embeddinglookup 300 and only the first higher order feature representation es output from thefirst encoder 210. - The decoder output can be a probability distribution, P (yi|yi-1, . . . , y0, X), over the current sub-word unit, yi, given the sequence of the N previous non-blank symbols 301 previous units, {yi-1, . . . , yi-N}, and input, x. Although not illustrated, the
model 200 may include a Softmax layer that receives the output of thedecoder 204. In some implementations, the Softmax layer is separate from thedecoder 204 and processes the output, yr, from thedecoder 204. The output of the Softmax layer is then used in a beam search process to select orthographic elements. In some implementations, the Softmax layer is integrated with thedecoder 204, such that the output yr of thedecoder 204 represents the output of the Softmax layer. - In some examples, the
prediction network 300 has two 2,048-dimensional LSTM layers, each of which is also followed by 640-dimensional projection layer, such that the LSTM-based embeddinglookup 300 may have about 23.4 million parameters. When theprediction network 300 includes LSTM layers, to contribute to techniques for reducing the size of theprediction network 300 without sacrificing accuracy/performance of themodel 200, theprediction network 300 may include a stateless prediction network that receives a limited-history sequence of non-blank symbols yui-n, . . . , yui-1 limited to the N previous non-blank symbols 301 output by the final Softmax layer. For instance,FIG. 3 shows thestateless prediction network 300 of themodel 200 receiving, as input, a sequence of non-blank symbols yui-n, . . . , yui-1 that is limited to the N previous non-blank symbols 301 a-n output by the final Softmax layer. In some examples, N is equal to two. In other examples, N is equal to five, however, the disclosure is non-limiting and N may equal any integer. The sequence of non-blank symbols 301 a-n indicates initial speech recognition results 120 a (FIG. 1 ). In some implementations, theprediction network 300 includes amulti-headed attention mechanism 302 that shares a shared embeddingmatrix 304 across eachhead 302A-302H of the multi-headed attention mechanism. In one example, themulti-headed attention mechanism 302 includes four heads. However, any number of heads may be employed by themulti-headed attention mechanism 302. Notably, the multi-headed attention mechanism improves performance significantly with minimal increase to model size. As described in greater detail below, eachhead 302A-H includes its own row ofposition vectors 308, and rather than incurring an increase in model size by concatenatingoutputs 318A-H from all the heads, theoutputs 318A-H are instead averaged by a headaverage module 322. - Referring to the
first head 302A of themulti-headed attention mechanism 302, thehead 302A generates, using the shared embeddingmatrix 304, a corresponding embedding 306, 306 a-n (e.g., X∈e ) for each non-blank symbol 301 among the sequence of non-blank symbols yui-n, . . . , yui-1 received as input at the corresponding time step from the plurality of time steps. Notably, since the shared embeddingmatrix 304 is shared across all heads of themulti-headed attention mechanism 302, theother heads 302B-H all generate the same correspondingembeddings 306 for each non-blank symbol. Thehead 302A also assigns a respectiveposition vector PV Aa-An 308, 308Aa-An (e.g., P∈e ) to each corresponding non-blank symbol in the sequence of non-blank symbols yui-n, . . . , yui-1. The respectiveposition vector PV 308 assigned to each non-blank symbol indicates a position in the history of the sequence of non-blank symbols (e.g., the N previous non-blank symbols output by the final Softmax layer). For instance, the first position vector PVAa is assigned to a most recent position in the history, while the last position vector PVAn is assigned to a last position in the history of the N previous non-blank symbols output by the final Softmax layer. Notably, each of theembeddings 306 may include a same dimensionality (i.e., dimension size) as each of theposition vectors PV 308. - While the corresponding embedding generated by shared embedding
matrix 304 for each for each non-blank symbol 301 among the sequence of non-blank symbols 301 a-n,yui-n, . . . , yui-1, the same at all of theheads 302A-H of themulti-headed attention mechanism 302, eachhead 302A-H defines a different set/row ofposition vectors 308. For instance, thefirst head 302A defines the row of position vectors PVAa-An 308Aa-An, thesecond head 302B defines a different row ofposition vectors PV Ba-Bn 308 Ba-Bn, . . . , and the Hth head 302 H defines another different row ofposition vectors PV Ha-Hn 308 Ha-Hn. - For each non-blank symbol in the sequence of non-blank symbols 301 a-n received, the
first head 302A also weights, via aweight layer 310, the corresponding embedding 306 proportional to a similarity between the corresponding embedding and the respectiveposition vector PV 308 assigned thereto. In some examples, the similarity omc;ides a cosine similarity (e.g., cosine distance). In the example shown, theweight layer 310 outputs a sequence ofweighted embeddings 312, 312Aa-An each associated the corresponding embedding 306 weighted proportional to the respectiveposition vector PV 308 assigned thereto. Stated differently, theweighted embeddings 312 output by theweight layer 310 for each embedding 306 may correspond to a dot product between the embedding 306 and the respectiveposition vector PV 308. Theweighted embeddings 312 may be interpreted as attending over the embeddings in proportion to how similar they are to the positioned associated with their respectiveposition vectors PV 308. To increase computational speed, theprediction network 300 includes non-recurrent layers, and therefore, the sequence of weighted embeddings 312Aa-An are not concatenated, but instead, averaged by a weightedaverage module 316 to generate, as output from thefirst head 302A, a weighted average 318A of the weighted embeddings 312Aa-An represented by: -
- In
Equation 1, h represents the index of theheads 302, n represents position in context, and e represents the embedding dimension. Additionally, inEquation 1, H, N, and de include the sizes of the corresponding dimensions. Theposition vector PV 308 does not have to be trainable and may include random values. Notably, even though theweighted embeddings 312 are averaged, theposition vectors PV 308 can potentially save position history information, alleviating the need to provide recurrent connections at each layer of theprediction network 300. - The operations described above with respect to the
first head 302A, are similarly performed by eachother head 302B-H of themulti-headed attention mechanism 302. Due to the different set of positionedvectors PV 308 defined by eachhead 302, theweight layer 310 outputs a sequence ofweighted embeddings other head 302B-H that is different than the sequence ofweighted embeddings 312 Aa-Aa at thefirst head 302A. Thereafter, the weightedaverage module 316 generates, as output from each other correspondinghead 302B-H, a respective weighted average 318B-H of the correspondingweighted embeddings 312 of the sequence of non-blank symbols. - In the example shown, the
prediction network 300 includes a headaverage module 322 that averages theweighted averages 318A-H output from the correspondingheads 302A-H.A projection layer 326 with SWISH may receive, as input, anoutput 324 from the headaverage module 322 that corresponds to the average of theweighted averages 318A-H, and generate, as output, a projected output 328. Afinal layer normalization 330 may normalize the projected output 328 to provide the single embeddingvector Pu i 350 at the corresponding time step from the plurality of time steps. Theprediction network 300 generates only a single embeddingvector Pu i 350 at each of the plurality of time steps subsequent to an initial time step. - In some configurations, the
prediction network 300 does not implement themulti-headed attention mechanism 302 and only performs the operations described above with respect to thefirst head 302A. In these configurations, the weighted average 318A of the weighted embeddings 312Aa-An is simply passed through theprojection layer 326 andlayer normalization 330 to provide the single embeddingvector Pu i 350. - In other configurations, the
prediction network 300 may instead include conformer or transformer layers in lieu of LSTM layers. In other examples, theprediction network 300 includes a V2 embedding look up table in lieu of a network of LSTM, transformer, or conformer layers. At each time step, the V2 embedding lookup table may receive, as input, the previous two predictions (e.g., 1-hot vectors) output by thejoint layer 230, compute a respective embedding d1, d2 for each of the previous two predictions, and provide a concatenated output [d1, d2] to thejoint layer 230. Comparatively, the V2 embedding lookup table may have only about two (2) million parameters, whereas an LSTM-based prediction network may include about 23.4 million parameters. Finally, thejoint layer 230 may also be a one-layer neural network with 640 hidden units. The Softmax layer may be composed of a unified word piece or grapheme set that is generated using all unique word pieces or graphemes in a plurality of training data sets. - The
decoder 204 is configured to generate, at each output step, a probability distribution over possible speech recognition hypotheses. Stated differently, thejoint layer 230 generates, at each output step (e.g., time step), a probability distribution over possible speech recognition hypotheses. Here, the “possible speech recognition hypotheses” correspond to a set of output labels/symbols (also referred to as “speech units”) each representing a grapheme (e.g., symbol/character) or a word piece in a specified natural language. For example, when the natural language is English, the set of output labels may include twenty-seven (27) symbols, e.g., one label for each of the 26-letters in the English alphabet and one label designating a space. Accordingly, thejoint layer 230 may output a set of values indicative of the likelihood of occurrence of each of a predetermined set of output labels. This set of values can be a vector (e.g., a one-hot vector) and can indicate a probability distribution over the set of output labels. In some cases, the output labels are graphemes (e.g., individual characters, and potentially punctuation and other symbols), but the set of output labels is not so limited. For example, the set of output labels can include wordpieces and/or entire words, in addition to or instead of graphemes. The output labels could also be other types of speech units, such as phonemes or sub-phonemes. The output distribution of thejoint layer 230 can include a posterior probability value for each of the different output labels. Thus, if there are 100 different output labels representing different graphemes or other symbols, the output of thejoint layer 230 can include 100 different probability values, one for each output label. The probability distribution can then be used to select and assign scores to candidate orthographic elements (e.g., graphemes, wordpieces, and/or words) in a beam search process (e.g., by the Softmax layer) for determining thetranscription 120. - In some implementations, the
LM 206 includes a unidirectional conformer that looks back a predetermined number of tokens (e.g., seven tokens) for each output wordpiece model prediction. Theconformer LM 206 may have a stack of layers (e.g., 12 layers) where each layer includes a model dimension of 768, a feedforward layer dimension of 2048, and a six-head attention. In these implementations, theconformer LM 206 is trained to predict 4,096 wordpieces. - Integrating ASR models with external LMs typically requires shallow fusion. However, overconfidence of the cascading
encoder 202 and thedecoder 204 can make weighting difficult and often lead to high deletions of words. Accordingly, a Hybrid Autoregressive Transducer (HAT) model may be utilized to factor out an internal loss language model score pILM(y) of themodel 200 so that the effective score of themodel 200 can be represented as follows. -
log p(x|y)≈log p(y|x)−log plm(y) (2) - Accordingly, HAT factorization allows the integration of the
model 200 with theexternal LM 206 without requiring coverage penalties as follows. -
y*=arg maxy[λ1log p(Y|x)−λ2 log pilm(y)+log plm(y)] (3) - where λ1 and λ2 denote weights assigned to the
external LM 206 and the internal language model, respectively. By using HAT factorization during thetraining process 300, theLM 206 is better integrated with the cascadingencoder 202 anddecoder 204. - Continuing with the example in
FIG. 2 , in some implementations, themodel 200 operates in both the streaming and non-streaming modes in parallel. When operating in both streaming and non-streaming mode at the same time, themodel 200 first performs streaming speech recognition on theaudio data 110 using thefirst encoder 210 to generate the first higher order representation es for both the second encoder 220 and thedecoder 204. Thedecoder 204 then produces the partial speech recognition results 120, 120 a. Themodel 200 also performs non-streaming speech recognition on the encodedaudio data 110 where the second encoder 220 uses the first higher order representation es received from thefirst encoder 210 to generate the second higher order representation ea. Thedecoder 204 then produces a speech recognition result, which is then rescored by theLM 206 to produce the finalspeech recognition result first encoder 210 produces the partial speech recognition results 120 a while the second encoder 220 waits for the output of thefirst encoder 210. Finally, theLM 206 may bias the output from thedecoder 204 to generate the finalspeech recognition result 120 b. Thus, the finalspeech recognition result 120 b for theinput utterance 106 may be delayed from the partial speech recognition results 120 a for the input utterance. As mentioned previously, thefirst encoder 210 may identify an endpoint of theutterance 106 that triggers a microphone closing event and triggers the finalspeech recognition result 120 b to be emitted. - In some implementations, to further reduce the size of the
decoder 204, i.e., theprediction network 300 and thejoint layer 230, parameter tying between theprediction network 300 and thejoint layer 230 is applied. Specifically, for a vocabulary size |V| and an embedding dimension de, the shared embeddingmatrix 304 at theprediction network 300 is E∈e Meanwhile, a last hidden layer includes a dimension size dh at thejoint layer 230, feed-forward projection weights from the hidden layer to the output logits will be W∈h x|V+1|, with an extra blank token in the vocabulary. Accordingly, the feed-forward layer corresponding to the last layer of thejoint layer 230 includes a weight matrix [dh, |V]|. By having theprediction network 300 to tie the size of the embedding dimension de to the dimensionality dh of the last hidden layer of thejoint layer 230, the feed-forward projection weights of thejoint layer 230 and the shared embeddingmatrix 304 of theprediction network 300 can share their weights for all non-blank symbols via a simple transpose transformation. Since the two matrices share all their values, thedecoder 204 only needs to store the values once on memory, instead of storing two individual matrices. By setting the size of the embedding dimension de equal to the size of the hidden layer dimension dh, thedecoder 204 reduces a number of parameters equal to the product of the embedding dimension de and the vocabulary size |V|. This weight tying corresponds to a regularization technique. -
FIG. 4 shows an example of adata selection pipeline 400 for training theexternal LM 206 of theASR system 109. Generally, large training data sets, such as a corpus oftraining text samples ASR system 109 resides on theuser device 10 of theuser 104, thereby limiting the number of parameters in theLM 206, and consequently, the number of training samples in the training set used to train theLM 206. To resolve this, adata selection pipeline 400 processes the corpus oftraining text samples 412 to reduce the amount of training data (i.e., training text samples) needed to train theLM 206 to accurately recognize rare words, thereby allowing theASR system 109 including theexternal LM 206 to run on-device where processing and/or memory/storage resources is limited. In other words, thedata selection pipeline 400 filters the training text samples from the corpus to identify a subset of training samples sufficient for improving rare-word recognition. The corpus oftraining text samples 412 may include 213 billion sentences with a size of about 12 terabytes, wherein 7.2 billion of the samples are distinct. Thepipeline 400 may reduce the number ofsamples 412 in the corpus to about only four (4) billion sentences for training theLM 206, which is 53× smaller than the original corpus and without degradation in overall performance of theLM 206 in terms of word error rate (WER). - As shown in
FIG. 4 , thedata selection pipeline 400 uses aresampling filter 420, arare word filter 430, and acontrastive filter 440 to reduce the number of the training text utterances in the corpus oftraining text samples 412 for training theLM 206. Thedata selection pipeline 400 obtains the corpus oftraining text samples text data store 410 and a plurality of training utterances 452, 452 a-n stored in a training utterances data store 450. The training utterances 452 stored in the training utterances data store 450 are used for training theASR model 200 and each training utterance 452 includesaudio data 454 corresponding to an utterance and acorresponding transcription 456 of the utterance. WhileFIG. 4 shows thepipeline 400 employing each of theresampling filter 420, therare word filter 430, and thecontrastive filter 440 for selecting training text data, the pipeline may use only one or two of theresampling filter 420, therare word filter 430, and thecontrastive filer 440 for selecting training text data. - The
resampling filter 420 receives the corpus oftraining text samples 412 stored in the trainingtext data store 410 and executes a resampling function to identify rare words (e.g., words that occur less frequently) in the corpus by identifying and removing high frequency training text samples from the corpus to output a set of low frequency training text samples (also referred to as ‘set of training text samples’) 422 corresponding samples from the corpus oftraining text samples 412 that include rare words. In the example shown, theresampling filter 420 measures frequency at the sentence level rather than at the word level for the sake of simplicity. Theresampling filter 420 may, however, measure rareness of a sentence from an aggregate of its own words without departing from the scope of the present disclosure. As used herein, a word or sentence is more rare when it has a lower frequency (there are fewer occurrences of it) in the corpus relative to other words or sentences. The term “tailedness” may be used to describe the relative amount of rare words occurring the corpus oftraining text samples 412. The frequency distribution of the corpus oftraining text samples 412 as a whole is linear on a log-log plot and is expressed by: -
distinct_count(f)≈Af−∝ (4) - where f denotes the frequency and A denotes the number of distinct training text samples 412 (i.e., having a frequency f of one). By changing the power α, the distribution changes. For example, a larger α results in a distribution with a heavy frequency of rare words. Examples where α approaches infinity indicate that there are no
duplicate training texts 412 in the plurality oftraining text samples 412. However, the plurality oftraining text samples 412 stored in the trainingtext data store 410 include an α of 1.1-2.5. Furthermore,training text samples 412 occurring at an excessive frequency rate (e.g., “home” in a Maps domain) deviate from the linear distribution of the frequency distribution. - To filter the high frequency training texts from the corpus of
training text samples 412, thereby increasing the number of rare words in the set of low frequencytraining text samples 422, theresampling filter 420 may execute a resampling function including one of a simple power resampling function, a forced power resampling function, or a soft logarithmic resampling function. Simple power resampling may include tuning the rareness of the frequency distribution distinct_count(f) by applying a parameter β. The simple power frequency distribution may then be expressed as Af−αβ. In other implementations, forced power resampling is used to manage the excessive frequency training text samples in the corpus oftraining text samples 412 by forcing eachtraining text 412 to fit a line fit. For example, the line fit for a Maps domain may indicate a distinct count of 1 corresponding to a frequency of 106. In these examples, for each training text sample that has a distinct_count of 1, its resampled frequency f1 will be 106 regardless of its original frequency f0. In this example, a training text sample with a high original frequency f0 (e.g., 108) is forced to a resampled frequency f1 of 106. This forced power resampling operation is expressed as: -
- Alternatively, the
resampling filter 420 may execute a soft logarithmic resampling function, which matches the original frequency distribution distinct_count(f) of the corpus oftraining text samples 412 and then removes training texts from the corpus that exceed a threshold. The soft logarithmic function is expressed by: -
- Where fc denotes a threshold frequency.
- Once the
resampling filter 420 removes the high frequency training texts from the corpus oftraining text samples 412 to output the set oftraining text samples 422 that include rare words, the set oftraining text samples 422 are provided as input to therare word filter 430 and thecontrastive filter 440. Notably, the removal of high frequency training text samples from the corpus is desirable since these samples would provide a distributional bias that may prevent theLM 206 from learning a long tail of form the corpus that includes many rare words. Therare word filter 430 identifies a subset of rare-wordtraining text samples 432 that include words that do not appear in thetranscriptions 456 from the set of training utterances 452 or appear in thetranscriptions 456 from the set of training utterances 452 less than a threshold number of times. Likewise, thecontrastive filter 440 identifies a subset of target domaintraining text samples 442 within the settraining text samples 422 that match a target domain associated with the training utterances 452 used to train theASR model 200. The training utterances 452 may be referred to as ASR training utterances 452 each includingASR audio data 454 paired withcorresponding ASR transcripts 456. Thedata selection pipeline 400 then combinesASR transcripts 456, the rare wordtraining text samples 432, and the target domaintraining text samples 442 into mini-batches for use by alanguage model trainer 480 to train theLM 206. The mini-batches may be combined according to a sampling ratio (e.g., 20%/40%/40% forASR transcriptions 456/rare wordtraining text samples 432/target domain training text samples 442). - The
rare word filter 430 directly filters thetranscriptions 456 from the set of ASR training utterances 452 that include words that appear in the set oftraining text samples 422 using a frequency threshold ft (e.g., 15) to identify training text samples for inclusion in the subset of rare-wordtraining text samples 432. Therare word filter 420 also identifies anytraining text samples 422 that do not appear in thetranscriptions 456 for inclusion in the subset of rare-wordtraining text samples 432. Thecontrastive filter 440 applies contrastive selection/filtering on the set of low frequencytraining text samples 422 output by theresampling filter 420 to identify a subset of target domaintraining text samples 442 that match a target domain associated with the set of training utterances 452 used to train theASR model 200. The corpus oftraining text samples 412 may include text samples collected from domains that are different than the domain theASR model 200 is trained to recognize speech. For instance, the text samples may collected form typed search queries containing more website names while the target domain of theASR model 200 corresponds to voice search containing more voice commands. This contrastive selection is calculated for each training text sample in the set of low frequencytraining text samples 422 by: - where
training text sample 422, target denotes thetarget LM 206, and background denotes a background Language Model trained on a fully deduplicated set of training data. The contrastive selection is then tuned on thetranscriptions 456 of the training utterances 452 to produce thetarget LM 206. The score for a training text sample will be lower when the training text sample is closer to thetranscriptions 456 of the training utterances 452 used to train theASR model 200. Thecontrastive filter 440 then may discard atraining text sample 422 that is above a threshold, to identify the subset of target domain training texts 442 from the set of low frequencytraining text samples 422 that are below the threshold. As used herein, a target domain associated with the training utterances may include assistant queries, voice search queries, navigation queries, or utterances associated with any other domain. Notably, theASR model 200 ofFIGS. 1-3 is trained on the training utterances 452 that each includeaudio data 454 of a corresponding utterance and acorresponding transcription 456 of the utterance that serves as a ground-truth label for theaudio data 454. -
FIG. 5 includes a flowchart of an example arrangement of operations for amethod 500 of training alanguage model 206 for rare-word speech recognition. Themethod 500 includes, atoperation 502, obtaining a set oftraining text samples 422. Atoperation 504, themethod 500 also includes obtaining a set of training utterances 452 used for training a speech recognition model 200 (e.g., an automatic speech recognition (ASR) model 200), each training utterance 452 in the plurality of training utterances 452 includingaudio data 454 corresponding to an utterance and acorresponding transcription 456 of the utterance. - At
operation 506, themethod 500 includes applying rare word filtering on the set oftraining text samples 422 to identify a subset of rare-wordtraining text samples 432. The subset of rare-wordtraining text samples 432 include words that do not appear in thetranscriptions 456 from the set of training utterances 452 or appear in thetranscriptions 456 from the set of training utterances 452 less than a threshold number of times. Themethod 500 further includes, atoperation 508, training theexternal language model 206 on thetranscriptions 456 from the set of training utterances 452 and the identified subset of rare-wordtraining text samples 432. -
FIG. 6 is schematic view of anexample computing device 600 that may be used to implement the systems and methods described in this document. Thecomputing device 600 is intended to represent various forms of digital computers, such as laptops, desktops, workstations, personal digital assistants, servers, blade servers, mainframes, and other appropriate computers. The components shown here, their connections and relationships, and their functions, are meant to be exemplary only, and are not meant to limit implementations of the implementations described and/or claimed in this document. - The
computing device 600 includes aprocessor 610,memory 620, astorage device 630, a high-speed interface/controller 640 connecting to thememory 620 and high-speed expansion ports 650, and a low speed interface/controller 660 connecting to a low speed bus 670 and astorage device 630. Each of thecomponents data processing hardware 610” that may include thedata processing hardware 12 of theuser device 10 or thedata processing hardware 62 of the remote computing device 60) can process instructions for execution within thecomputing device 600, including instructions stored in thememory 620 or on thestorage device 630 to display graphical information for a graphical user interface (GUI) on an external input/output device, such asdisplay 680 coupled tohigh speed interface 640. In other implementations, multiple processors and/or multiple buses may be used, as appropriate, along with multiple memories and types of memory. Also,multiple computing devices 600 may be connected, with each device providing portions of the necessary operations (e.g., as a server bank, a group of blade servers, or a multi-processor system). - The memory 620 (also referred to as “
memory hardware 620” that may include thememory hardware 14 of theuser computing device 10 or thememory hardware 64 of the remote computing device 60) stores information non-transitorily within thecomputing device 600. Thememory 620 may be a computer-readable medium, a volatile memory unit(s), or non-volatile memory unit(s). Thenon-transitory memory 620 may be physical devices used to store programs (e.g., sequences of instructions) or data (e.g., program state information) on a temporary or permanent basis for use by thecomputing device 600. Examples of non-volatile memory include, but are not limited to, flash memory and read-only memory (ROM)/programmable read-only memory (PROM)/erasable programmable read-only memory (EPROM)/electronically erasable programmable read-only memory (EEPROM) (e.g., typically used for firmware, such as boot programs). Examples of volatile memory include, but are not limited to, random access memory (RAM), dynamic random access memory (DRAM), static random access memory (SRAM), phase change memory (PCM) as well as disks or tapes. - The
storage device 630 is capable of providing mass storage for thecomputing device 600. In some implementations, thestorage device 630 is a computer-readable medium. In various different implementations, thestorage device 630 may be a floppy disk device, a hard disk device, an optical disk device, or a tape device, a flash memory or other similar solid state memory device, or an array of devices, including devices in a storage area network or other configurations. In additional implementations, a computer program product is tangibly embodied in an information carrier. The computer program product contains instructions that, when executed, perform one or more methods, such as those described above. The information carrier is a computer- or machine-readable medium, such as thememory 620, thestorage device 630, or memory onprocessor 610. - The
high speed controller 640 manages bandwidth-intensive operations for thecomputing device 600, while thelow speed controller 660 manages lower bandwidth-intensive operations. Such allocation of duties is exemplary only. In some implementations, the high-speed controller 640 is coupled to thememory 620, the display 680 (e.g., through a graphics processor or accelerator), and to the high-speed expansion ports 650, which may accept various expansion cards (not shown). In some implementations, the low-speed controller 660 is coupled to thestorage device 630 and a low-speed expansion port 690. The low-speed expansion port 690, which may include various communication ports (e.g., USB, Bluetooth, Ethernet, wireless Ethernet), may be coupled to one or more input/output devices, such as a keyboard, a pointing device, a scanner, or a networking device such as a switch or router, e.g., through a network adapter. - The
computing device 600 may be implemented in a number of different forms, as shown in the figure. For example, it may be implemented as astandard server 600 a or multiple times in a group ofsuch servers 600 a, as alaptop computer 600 b, or as part of arack server system 600 c. - Various implementations of the systems and techniques described herein can be realized in digital electronic and/or optical circuitry, integrated circuitry, specially designed ASICs (application specific integrated circuits), computer hardware, firmware, software, and/or combinations thereof. These various implementations can include implementation in one or more computer programs that are executable and/or interpretable on a programmable system including at least one programmable processor, which may be special or general purpose, coupled to receive data and instructions from, and to transmit data and instructions to, a storage system, at least one input device, and at least one output device.
- A software application (i.e., a software resource) may refer to computer software that causes a computing device to perform a task. In some examples, a software application may be referred to as an “application,” an “app,” or a “program.” Example applications include, but are not limited to, system diagnostic applications, system management applications, system maintenance applications, word processing applications, spreadsheet applications, messaging applications, media streaming applications, social networking applications, and gaming applications.
- These computer programs (also known as programs, software, software applications or code) include machine instructions for a programmable processor, and can be implemented in a high-level procedural and/or object-oriented programming language, and/or in assembly/machine language. As used herein, the terms “machine-readable medium” and “computer-readable medium” refer to any computer program product, non-transitory computer readable medium, apparatus and/or device (e.g., magnetic discs, optical disks, memory, Programmable Logic Devices (PLDs)) used to provide machine instructions and/or data to a programmable processor, including a machine-readable medium that receives machine instructions as a machine-readable signal. The term “machine-readable signal” refers to any signal used to provide machine instructions and/or data to a programmable processor.
- The processes and logic flows described in this specification can be performed by one or more programmable processors, also referred to as data processing hardware, executing one or more computer programs to perform functions by operating on input data and generating output. The processes and logic flows can also be performed by special purpose logic circuitry, e.g., an FPGA (field programmable gate array) or an ASIC (application specific integrated circuit). Processors suitable for the execution of a computer program include, by way of example, both general and special purpose microprocessors, and any one or more processors of any kind of digital computer. Generally, a processor will receive instructions and data from a read only memory or a random access memory or both. The essential elements of a computer are a processor for performing instructions and one or more memory devices for storing instructions and data. Generally, a computer will also include, or be operatively coupled to receive data from or transfer data to, or both, one or more mass storage devices for storing data, e.g., magnetic, magneto optical disks, or optical disks. However, a computer need not have such devices. Computer readable media suitable for storing computer program instructions and data include all forms of non-volatile memory, media and memory devices, including by way of example semiconductor memory devices, e.g., EPROM, EEPROM, and flash memory devices; magnetic disks, e.g., internal hard disks or removable disks; magneto optical disks; and CD ROM and DVD-ROM disks. The processor and the memory can be supplemented by, or incorporated in, special purpose logic circuitry.
- To provide for interaction with a user, one or more aspects of the disclosure can be implemented on a computer having a display device, e.g., a CRT (cathode ray tube), LCD (liquid crystal display) monitor, or touch screen for displaying information to the user and optionally a keyboard and a pointing device, e.g., a mouse or a trackball, by which the user can provide input to the computer. Other kinds of devices can be used to provide interaction with a user as well; for example, feedback provided to the user can be any form of sensory feedback, e.g., visual feedback, auditory feedback, or tactile feedback; and input from the user can be received in any form, including acoustic, speech, or tactile input. In addition, a computer can interact with a user by sending documents to and receiving documents from a device that is used by the user; for example, by sending web pages to a web browser on a user's client device in response to requests received from the web browser.
- A number of implementations have been described. Nevertheless, it will be understood that various modifications may be made without departing from the spirit and scope of the disclosure. Accordingly, other implementations are within the scope of the following claims.
Claims (24)
1. A computer-implemented method for training an external language model to recognize rare words in speech, the computer-implemented method when executed on data processing hardware causes the data processing hardware to perform operations comprising:
obtaining a set of training text samples;
obtaining a set of training utterances used for training an automatic speech recognition (ASR) model, each training utterance in the plurality of training utterances comprising audio data corresponding to an utterance and a corresponding transcription of the utterance;
applying rare word filtering on the set of training text samples to identify a subset of rare-word training text samples that include words that do not appear in the transcriptions from the set of training utterances or appear in the transcriptions from the set of training utterances less than a threshold number of times; and
training the external language model on the transcriptions from the set of training utterances and the identified subset of rare-word training text samples.
2. The computer-implemented method of claim 1 , wherein obtaining the set of training text samples comprises:
receiving a corpus of training text samples;
executing a resampling function on the corpus of training text samples to identify high frequency text samples that occur in the corpus of training text samples; and
obtaining the set of training text samples by removing the identified high frequency text samples from the corpus of training text samples.
3. The computer-implemented method of claim 1 , wherein the resampling function comprises one of a simple power resampling function, a forced power resampling function, or a soft logarithmic resampling function.
4. The computer-implemented method of claim 1 , wherein the operations further comprise:
applying contrastive filtering on the set of training text samples to identify a subset of target domain training text samples that match a target domain associated with the set of training utterances,
wherein training the external language model on the transcriptions from the set of training utterances and the identified subset of rare-word training text samples further comprises training the external language model on the identified subset of target domain training text samples that match the target domain.
5. The computer-implemented method of claim 1 , wherein the external language model comprises an external neural language model.
6. The computer-implemented method of claim 5 , wherein the external neural language model comprises a stack of conformer layers or transformer layers.
7. The computer-implemented method of claim 1 , wherein the operations further comprise integrating the trained external language model with the trained ASR model, the trained external language model configured to rescore probability distributions over possible speech recognition hypotheses predicted by the trained ASR model.
8. The computer-implemented method of claim 7 , wherein the ASR model comprises:
a first encoder configured to:
receive, as input, a sequence of acoustic frames; and
generate, at each of a plurality of output steps, a first higher order feature representation for a corresponding acoustic frame in the sequence of acoustic frames;
a second encoder configured to:
receive, as input, the first higher order feature representation generated by the first encoder at each of the plurality of output steps; and
generate, at each of the plurality of output steps, a second higher order feature representation for a corresponding first higher order feature frame; and
a decoder configured to:
receive, as input, the second higher order feature representation generated by the second encoder at each of the plurality of output steps; and
generate, at each of the plurality of time steps, a first probability distribution over possible speech recognition hypotheses.
9. The computer-implemented method of claim 8 , wherein the decoder is further configured to:
receive, as input, the first higher order feature representation generated by the first encoder at each of the plurality of output steps; and
generate, at each of the plurality of time steps, a second probability distribution over possible speech recognition hypothesis.
10. The computer-implemented method of claim 9 , wherein the decoder comprises:
a prediction network configured to, at each of the plurality of time steps:
receive, as input, a sequence of N previous non-blank symbols output by a final Softmax layer;
for each non-blank symbol of the sequence of N previous non-blank symbols, generate a respective embedding; and
generate an average embedding by averaging the respective embeddings; and
a joint network configured to:
receive, as input, the average embedding generated by the prediction network at each of the plurality of output steps and one of:
when the ASR model is operating in a streaming mode, the first higher order feature representation generated by the first encoder at each of the plurality of output steps; or
when the ASR model is operating in a non-streaming mode, the second higher order feature representation generated by the second encoder at each of the plurality of output steps; and
generate, at each of the plurality of output steps, one of:
when the ASR model is operating in the streaming mode, the second probability distribution over possible speech recognition hypothesis; or
when the ASR model is operating in the non-streaming mode, the first probability distribution over possible speech recognition hypothesis.
11. The computer-implemented method of claim 8 , wherein:
the first encoder comprises a causal encoder comprising an initial stack of conformer layers; and
the second encoder comprises a non-causal encoder comprising a final stack of conformer layers overlain on the initial stack of conformer layers.
12. The computer-implemented method of claim 8 , wherein the first encoder and the second encoder of the ASR model are trained using Hybrid Autoregressive Transducer Factorization to facilitate the integration of the external language model trained on text-only data comprising the transcriptions from the set of training utterances and the identified subset of rare-word training text samples.
13. A system comprising
data processing hardware; and
memory hardware storing instructions that when executed on the data processing hardware causes the data processing hardware to perform operations comprising:
obtaining a set of training text samples;
obtaining a set of training utterances used for training an automatic speech recognition (ASR) model, each training utterance in the plurality of training utterances comprising audio data corresponding to an utterance and a corresponding transcription of the utterance;
applying rare word filtering on the set of training text samples to identify a subset of rare-word training text samples that include words that do not appear in the transcriptions from the set of training utterances or appear in the transcriptions from the set of training utterances less than a threshold number of times; and
training the external language model on the transcriptions from the set of training utterances and the identified subset of rare-word training text samples.
14. The system of claim 13 , wherein obtaining the set of training text samples comprises:
receiving a corpus of training text samples;
executing a resampling function on the corpus of training text samples to identify high frequency text samples that occur in the corpus of training text samples; and
obtaining the set of training text samples by removing the identified high frequency text samples from the corpus of training text samples.
15. The system of claim 13 , wherein the resampling function comprises one of a simple power resampling function, a forced power resampling function, or a soft logarithmic resampling function.
16. The system of claim 13 , wherein the operations further comprise:
applying contrastive filtering on the set of training text samples to identify a subset of target domain training text samples that match a target domain associated with the set of training utterances,
wherein training the external language model on the transcriptions from the set of training utterances and the identified subset of rare-word training text samples further comprises training the external language model on the identified subset of target domain training text samples that match the target domain.
17. The system of claim 13 , wherein the external language model comprises an external neural language model.
18. The system of claim 17 , wherein the external neural language model comprises a stack of conformer layers or transformer layers.
19. The system of claim 13 , wherein the operations further comprise integrating the trained external language model with the trained ASR model, the trained external language model configured to rescore probability distributions over possible speech recognition hypotheses predicted by the trained ASR model.
20. The system of claim 19 , wherein the ASR model comprises:
a first encoder configured to:
receive, as input, a sequence of acoustic frames; and
generate, at each of a plurality of output steps, a first higher order feature representation for a corresponding acoustic frame in the sequence of acoustic frames;
a second encoder configured to:
receive, as input, the first higher order feature representation generated by the first encoder at each of the plurality of output steps; and
generate, at each of the plurality of output steps, a second higher order feature representation for a corresponding first higher order feature frame; and
a decoder configured to:
receive, as input, the second higher order feature representation generated by the second encoder at each of the plurality of output steps; and
generate, at each of the plurality of time steps, a first probability distribution over possible speech recognition hypotheses.
21. The system of claim 20 , wherein the decoder is further configured to:
receive, as input, the first higher order feature representation generated by the first encoder at each of the plurality of output steps; and
generate, at each of the plurality of time steps, a second probability distribution over possible speech recognition hypothesis.
22. The system of claim 21 , wherein the decoder comprises:
a prediction network configured to, at each of the plurality of time steps:
receive, as input, a sequence of N previous non-blank symbols output by a final Softmax layer;
for each non-blank symbol of the sequence of N previous non-blank symbols, generate a respective embedding; and
generate an average embedding by averaging the respective embeddings; and
a joint network configured to:
receive, as input, the average embedding generated by the prediction network at each of the plurality of output steps and one of:
when the ASR model is operating in a streaming mode, the first higher order feature representation generated by the first encoder at each of the plurality of output steps; or
when the ASR model is operating in a non-streaming mode, the second higher order feature representation generated by the second encoder at each of the plurality of output steps; and
generate, at each of the plurality of output steps, one of:
when the ASR model is operating in the streaming mode, the second probability distribution over possible speech recognition hypothesis; or
when the ASR model is operating in the non-streaming mode, the first probability distribution over possible speech recognition hypothesis.
23. The system of claim 20 , wherein:
the first encoder comprises a causal encoder comprising an initial stack of conformer layers; and
the second encoder comprises a non-causal encoder comprising a final stack of conformer layers overlain on the initial stack of conformer layers.
24. The system of claim 20 , wherein the first encoder and the second encoder of the ASR model are trained using Hybrid Autoregressive Transducer Factorization to facilitate the integration of the external language model trained on text-only data comprising the transcriptions from the set of training utterances and the identified subset of rare-word training text samples.
Priority Applications (1)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US17/643,861 US20230096821A1 (en) | 2021-09-30 | 2021-12-13 | Large-Scale Language Model Data Selection for Rare-Word Speech Recognition |
Applications Claiming Priority (2)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US202163261946P | 2021-09-30 | 2021-09-30 | |
US17/643,861 US20230096821A1 (en) | 2021-09-30 | 2021-12-13 | Large-Scale Language Model Data Selection for Rare-Word Speech Recognition |
Publications (1)
Publication Number | Publication Date |
---|---|
US20230096821A1 true US20230096821A1 (en) | 2023-03-30 |
Family
ID=79287697
Family Applications (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
US17/643,861 Pending US20230096821A1 (en) | 2021-09-30 | 2021-12-13 | Large-Scale Language Model Data Selection for Rare-Word Speech Recognition |
Country Status (2)
Country | Link |
---|---|
US (1) | US20230096821A1 (en) |
WO (1) | WO2023055409A1 (en) |
Cited By (1)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
CN116612750A (en) * | 2023-05-23 | 2023-08-18 | 苏州科帕特信息科技有限公司 | Automatic training method for language model |
Citations (4)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US6622119B1 (en) * | 1999-10-30 | 2003-09-16 | International Business Machines Corporation | Adaptive command predictor and method for a natural language dialog system |
US20200349922A1 (en) * | 2019-05-03 | 2020-11-05 | Google Llc | End-To-End Automated Speech Recognition on Numeric Sequences |
US20200357388A1 (en) * | 2019-05-10 | 2020-11-12 | Google Llc | Using Context Information With End-to-End Models for Speech Recognition |
US20220139380A1 (en) * | 2020-10-30 | 2022-05-05 | Microsoft Technology Licensing, Llc | Internal language model for e2e models |
-
2021
- 2021-12-13 US US17/643,861 patent/US20230096821A1/en active Pending
- 2021-12-13 WO PCT/US2021/063004 patent/WO2023055409A1/en active Application Filing
Patent Citations (4)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US6622119B1 (en) * | 1999-10-30 | 2003-09-16 | International Business Machines Corporation | Adaptive command predictor and method for a natural language dialog system |
US20200349922A1 (en) * | 2019-05-03 | 2020-11-05 | Google Llc | End-To-End Automated Speech Recognition on Numeric Sequences |
US20200357388A1 (en) * | 2019-05-10 | 2020-11-12 | Google Llc | Using Context Information With End-to-End Models for Speech Recognition |
US20220139380A1 (en) * | 2020-10-30 | 2022-05-05 | Microsoft Technology Licensing, Llc | Internal language model for e2e models |
Non-Patent Citations (2)
Title |
---|
Fernandez et al. "Sampling Informative Training Data for RNN Language Models". Proceedings of ACL 2018, Student Research Workshop, pages 9–13 Melbourne, Australia, July 15 - 20, 2018 (Year: 2018) * |
Meng et al. "Internal Language Model Adaptation with Text-Only Data for End-to-End Speech Recognition". arxiv.org/abs/2110.05354v1 [cs.CL] 6 Oct 2021 (Year: 2021) * |
Cited By (1)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
CN116612750A (en) * | 2023-05-23 | 2023-08-18 | 苏州科帕特信息科技有限公司 | Automatic training method for language model |
Also Published As
Publication number | Publication date |
---|---|
WO2023055409A1 (en) | 2023-04-06 |
Similar Documents
Publication | Publication Date | Title |
---|---|---|
US11741947B2 (en) | Transformer transducer: one model unifying streaming and non-streaming speech recognition | |
US20220122622A1 (en) | Cascaded Encoders for Simplified Streaming and Non-Streaming ASR | |
US11610586B2 (en) | Learning word-level confidence for subword end-to-end automatic speech recognition | |
US20230343328A1 (en) | Efficient streaming non-recurrent on-device end-to-end model | |
US11749259B2 (en) | Proper noun recognition in end-to-end speech recognition | |
US20230186901A1 (en) | Attention-Based Joint Acoustic and Text On-Device End-to-End Model | |
KR20230158608A (en) | Multi-task learning for end-to-end automatic speech recognition confidence and erasure estimation. | |
US20230352006A1 (en) | Tied and reduced rnn-t | |
US20230096821A1 (en) | Large-Scale Language Model Data Selection for Rare-Word Speech Recognition | |
US20220310097A1 (en) | Reducing Streaming ASR Model Delay With Self Alignment | |
US20230326461A1 (en) | Unified Cascaded Encoder ASR model for Dynamic Model Sizes | |
US20230109407A1 (en) | Transducer-Based Streaming Deliberation for Cascaded Encoders | |
US20230306958A1 (en) | Streaming End-to-end Multilingual Speech Recognition with Joint Language Identification | |
US20230343332A1 (en) | Joint Segmenting and Automatic Speech Recognition | |
US20240135923A1 (en) | Universal Monolingual Output Layer for Multilingual Speech Recognition | |
US20240029720A1 (en) | Context-aware Neural Confidence Estimation for Rare Word Speech Recognition | |
US20230107248A1 (en) | Deliberation of Streaming RNN-Transducer by Non-Autoregressive Decoding | |
US20230298570A1 (en) | Rare Word Recognition with LM-aware MWER Training | |
US20240153495A1 (en) | Multi-Output Decoders for Multi-Task Learning of ASR and Auxiliary Tasks | |
US11580956B2 (en) | Emitting word timings with end-to-end models | |
US20230103382A1 (en) | Training for long-form speech recognition | |
KR20240065125A (en) | Large-scale language model data selection for rare word speech recognition. | |
WO2024081332A1 (en) | Universal monolingual output layer for multilingual speech recognition |
Legal Events
Date | Code | Title | Description |
---|---|---|---|
STPP | Information on status: patent application and granting procedure in general |
Free format text: DOCKETED NEW CASE - READY FOR EXAMINATION |
|
AS | Assignment |
Owner name: GOOGLE LLC, CALIFORNIAFree format text: ASSIGNMENT OF ASSIGNORS INTEREST;ASSIGNORS:HUANG, RONNY;SAINATH, TARA N;REEL/FRAME:058708/0658Effective date: 20210930 |
|
STPP | Information on status: patent application and granting procedure in general |
Free format text: NON FINAL ACTION MAILED |
|
STPP | Information on status: patent application and granting procedure in general |
Free format text: RESPONSE TO NON-FINAL OFFICE ACTION ENTERED AND FORWARDED TO EXAMINER |
|
STPP | Information on status: patent application and granting procedure in general |
Free format text: NOTICE OF ALLOWANCE MAILED -- APPLICATION RECEIVED IN OFFICE OF PUBLICATIONS |