US5909540A - System and method for providing highly available data storage using globally addressable memory - Google Patents
System and method for providing highly available data storage using globally addressable memory Download PDFInfo
- Publication number
- US5909540A US5909540A US08/848,967 US84896797A US5909540A US 5909540 A US5909540 A US 5909540A US 84896797 A US84896797 A US 84896797A US 5909540 A US5909540 A US 5909540A
- Authority
- US
- United States
- Prior art keywords
- node
- data
- directory
- nodes
- file
- Prior art date
- Legal status (The legal status is an assumption and is not a legal conclusion. Google has not performed a legal analysis and makes no representation as to the accuracy of the status listed.)
- Expired - Lifetime
Links
Images
Classifications
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F9/00—Arrangements for program control, e.g. control units
- G06F9/06—Arrangements for program control, e.g. control units using stored programs, i.e. using an internal store of processing equipment to receive or retain programs
- G06F9/46—Multiprogramming arrangements
- G06F9/50—Allocation of resources, e.g. of the central processing unit [CPU]
- G06F9/5005—Allocation of resources, e.g. of the central processing unit [CPU] to service a request
- G06F9/5011—Allocation of resources, e.g. of the central processing unit [CPU] to service a request the resources being hardware resources other than CPUs, Servers and Terminals
- G06F9/5016—Allocation of resources, e.g. of the central processing unit [CPU] to service a request the resources being hardware resources other than CPUs, Servers and Terminals the resource being the memory
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F11/00—Error detection; Error correction; Monitoring
- G06F11/07—Responding to the occurrence of a fault, e.g. fault tolerance
- G06F11/0703—Error or fault processing not based on redundancy, i.e. by taking additional measures to deal with the error or fault not making use of redundancy in operation, in hardware, or in data representation
- G06F11/0706—Error or fault processing not based on redundancy, i.e. by taking additional measures to deal with the error or fault not making use of redundancy in operation, in hardware, or in data representation the processing taking place on a specific hardware platform or in a specific software environment
- G06F11/0721—Error or fault processing not based on redundancy, i.e. by taking additional measures to deal with the error or fault not making use of redundancy in operation, in hardware, or in data representation the processing taking place on a specific hardware platform or in a specific software environment within a central processing unit [CPU]
- G06F11/0724—Error or fault processing not based on redundancy, i.e. by taking additional measures to deal with the error or fault not making use of redundancy in operation, in hardware, or in data representation the processing taking place on a specific hardware platform or in a specific software environment within a central processing unit [CPU] in a multiprocessor or a multi-core unit
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F11/00—Error detection; Error correction; Monitoring
- G06F11/07—Responding to the occurrence of a fault, e.g. fault tolerance
- G06F11/0703—Error or fault processing not based on redundancy, i.e. by taking additional measures to deal with the error or fault not making use of redundancy in operation, in hardware, or in data representation
- G06F11/0751—Error or fault detection not based on redundancy
- G06F11/0754—Error or fault detection not based on redundancy by exceeding limits
- G06F11/0757—Error or fault detection not based on redundancy by exceeding limits by exceeding a time limit, i.e. time-out, e.g. watchdogs
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F11/00—Error detection; Error correction; Monitoring
- G06F11/07—Responding to the occurrence of a fault, e.g. fault tolerance
- G06F11/14—Error detection or correction of the data by redundancy in operation
- G06F11/1402—Saving, restoring, recovering or retrying
- G06F11/1415—Saving, restoring, recovering or retrying at system level
- G06F11/142—Reconfiguring to eliminate the error
- G06F11/1425—Reconfiguring to eliminate the error by reconfiguration of node membership
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F11/00—Error detection; Error correction; Monitoring
- G06F11/07—Responding to the occurrence of a fault, e.g. fault tolerance
- G06F11/14—Error detection or correction of the data by redundancy in operation
- G06F11/1402—Saving, restoring, recovering or retrying
- G06F11/1415—Saving, restoring, recovering or retrying at system level
- G06F11/1435—Saving, restoring, recovering or retrying at system level using file system or storage system metadata
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F11/00—Error detection; Error correction; Monitoring
- G06F11/07—Responding to the occurrence of a fault, e.g. fault tolerance
- G06F11/16—Error detection or correction of the data by redundancy in hardware
- G06F11/18—Error detection or correction of the data by redundancy in hardware using passive fault-masking of the redundant circuits
- G06F11/182—Error detection or correction of the data by redundancy in hardware using passive fault-masking of the redundant circuits based on mutual exchange of the output between redundant processing components
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F11/00—Error detection; Error correction; Monitoring
- G06F11/07—Responding to the occurrence of a fault, e.g. fault tolerance
- G06F11/16—Error detection or correction of the data by redundancy in hardware
- G06F11/20—Error detection or correction of the data by redundancy in hardware using active fault-masking, e.g. by switching out faulty elements or by switching in spare elements
- G06F11/2053—Error detection or correction of the data by redundancy in hardware using active fault-masking, e.g. by switching out faulty elements or by switching in spare elements where persistent mass storage functionality or persistent mass storage control functionality is redundant
- G06F11/2094—Redundant storage or storage space
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F12/00—Accessing, addressing or allocating within memory systems or architectures
- G06F12/02—Addressing or allocation; Relocation
- G06F12/08—Addressing or allocation; Relocation in hierarchically structured memory systems, e.g. virtual memory systems
- G06F12/0802—Addressing of a memory level in which the access to the desired data or data block requires associative addressing means, e.g. caches
- G06F12/0806—Multiuser, multiprocessor or multiprocessing cache systems
- G06F12/0813—Multiuser, multiprocessor or multiprocessing cache systems with a network or matrix configuration
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F12/00—Accessing, addressing or allocating within memory systems or architectures
- G06F12/02—Addressing or allocation; Relocation
- G06F12/08—Addressing or allocation; Relocation in hierarchically structured memory systems, e.g. virtual memory systems
- G06F12/10—Address translation
- G06F12/1072—Decentralised address translation, e.g. in distributed shared memory systems
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F15/00—Digital computers in general; Data processing equipment in general
- G06F15/16—Combinations of two or more digital computers each having at least an arithmetic unit, a program unit and a register, e.g. for a simultaneous processing of several programs
- G06F15/163—Interprocessor communication
- G06F15/167—Interprocessor communication using a common memory, e.g. mailbox
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F16/00—Information retrieval; Database structures therefor; File system structures therefor
- G06F16/90—Details of database functions independent of the retrieved data types
- G06F16/95—Retrieval from the web
- G06F16/957—Browsing optimisation, e.g. caching or content distillation
- G06F16/9574—Browsing optimisation, e.g. caching or content distillation of access to content, e.g. by caching
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04L—TRANSMISSION OF DIGITAL INFORMATION, e.g. TELEGRAPHIC COMMUNICATION
- H04L67/00—Network arrangements or protocols for supporting network services or applications
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04L—TRANSMISSION OF DIGITAL INFORMATION, e.g. TELEGRAPHIC COMMUNICATION
- H04L67/00—Network arrangements or protocols for supporting network services or applications
- H04L67/01—Protocols
- H04L67/02—Protocols based on web technology, e.g. hypertext transfer protocol [HTTP]
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04L—TRANSMISSION OF DIGITAL INFORMATION, e.g. TELEGRAPHIC COMMUNICATION
- H04L67/00—Network arrangements or protocols for supporting network services or applications
- H04L67/01—Protocols
- H04L67/10—Protocols in which an application is distributed across nodes in the network
- H04L67/1001—Protocols in which an application is distributed across nodes in the network for accessing one among a plurality of replicated servers
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04L—TRANSMISSION OF DIGITAL INFORMATION, e.g. TELEGRAPHIC COMMUNICATION
- H04L67/00—Network arrangements or protocols for supporting network services or applications
- H04L67/50—Network services
- H04L67/75—Indicating network or usage conditions on the user display
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04L—TRANSMISSION OF DIGITAL INFORMATION, e.g. TELEGRAPHIC COMMUNICATION
- H04L69/00—Network arrangements, protocols or services independent of the application payload and not provided for in the other groups of this subclass
- H04L69/30—Definitions, standards or architectural aspects of layered protocol stacks
- H04L69/32—Architecture of open systems interconnection [OSI] 7-layer type protocol stacks, e.g. the interfaces between the data link level and the physical level
- H04L69/322—Intralayer communication protocols among peer entities or protocol data unit [PDU] definitions
- H04L69/329—Intralayer communication protocols among peer entities or protocol data unit [PDU] definitions in the application layer [OSI layer 7]
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04L—TRANSMISSION OF DIGITAL INFORMATION, e.g. TELEGRAPHIC COMMUNICATION
- H04L69/00—Network arrangements, protocols or services independent of the application payload and not provided for in the other groups of this subclass
- H04L69/40—Network arrangements, protocols or services independent of the application payload and not provided for in the other groups of this subclass for recovering from a failure of a protocol instance or entity, e.g. service redundancy protocols, protocol state redundancy or protocol service redirection
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04L—TRANSMISSION OF DIGITAL INFORMATION, e.g. TELEGRAPHIC COMMUNICATION
- H04L9/00—Cryptographic mechanisms or cryptographic arrangements for secret or secure communications; Network security protocols
- H04L9/40—Network security protocols
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04L—TRANSMISSION OF DIGITAL INFORMATION, e.g. TELEGRAPHIC COMMUNICATION
- H04L67/00—Network arrangements or protocols for supporting network services or applications
- H04L67/01—Protocols
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04L—TRANSMISSION OF DIGITAL INFORMATION, e.g. TELEGRAPHIC COMMUNICATION
- H04L69/00—Network arrangements, protocols or services independent of the application payload and not provided for in the other groups of this subclass
- H04L69/24—Negotiation of communication capabilities
-
- Y—GENERAL TAGGING OF NEW TECHNOLOGICAL DEVELOPMENTS; GENERAL TAGGING OF CROSS-SECTIONAL TECHNOLOGIES SPANNING OVER SEVERAL SECTIONS OF THE IPC; TECHNICAL SUBJECTS COVERED BY FORMER USPC CROSS-REFERENCE ART COLLECTIONS [XRACs] AND DIGESTS
- Y10—TECHNICAL SUBJECTS COVERED BY FORMER USPC
- Y10S—TECHNICAL SUBJECTS COVERED BY FORMER USPC CROSS-REFERENCE ART COLLECTIONS [XRACs] AND DIGESTS
- Y10S707/00—Data processing: database and file management or data structures
- Y10S707/964—Database arrangement
- Y10S707/966—Distributed
-
- Y—GENERAL TAGGING OF NEW TECHNOLOGICAL DEVELOPMENTS; GENERAL TAGGING OF CROSS-SECTIONAL TECHNOLOGIES SPANNING OVER SEVERAL SECTIONS OF THE IPC; TECHNICAL SUBJECTS COVERED BY FORMER USPC CROSS-REFERENCE ART COLLECTIONS [XRACs] AND DIGESTS
- Y10—TECHNICAL SUBJECTS COVERED BY FORMER USPC
- Y10S—TECHNICAL SUBJECTS COVERED BY FORMER USPC CROSS-REFERENCE ART COLLECTIONS [XRACs] AND DIGESTS
- Y10S707/00—Data processing: database and file management or data structures
- Y10S707/99941—Database schema or data structure
- Y10S707/99943—Generating database or data structure, e.g. via user interface
-
- Y—GENERAL TAGGING OF NEW TECHNOLOGICAL DEVELOPMENTS; GENERAL TAGGING OF CROSS-SECTIONAL TECHNOLOGIES SPANNING OVER SEVERAL SECTIONS OF THE IPC; TECHNICAL SUBJECTS COVERED BY FORMER USPC CROSS-REFERENCE ART COLLECTIONS [XRACs] AND DIGESTS
- Y10—TECHNICAL SUBJECTS COVERED BY FORMER USPC
- Y10S—TECHNICAL SUBJECTS COVERED BY FORMER USPC CROSS-REFERENCE ART COLLECTIONS [XRACs] AND DIGESTS
- Y10S707/00—Data processing: database and file management or data structures
- Y10S707/99941—Database schema or data structure
- Y10S707/99944—Object-oriented database structure
- Y10S707/99945—Object-oriented database structure processing
Definitions
- the present invention relates in general to distributed data storage systems and, more specifically, to systems and methods that maintain a highly available distributed store of data.
- Computer based structured storage systems such as computer file systems and database systems, have been remarkably successful at providing users with quick and facile access to enormous amounts of data.
- the importance of these structured storage systems in today's commerce is difficult to exaggerate.
- structured storage systems have allowed businesses to generate and maintain enormous stores of persistent data that the company can modify and update over the course of years.
- This persistent data is a valuable capital asset that is employed each day to perform the company's core operations.
- the data can be, for example, computer files (e.g., source code, wordprocessing documents, etc.), database records and information (e.g., information on employees, customers, and/or products), and/or Web pages.
- Such data must be "highly available," i.e., the data must be available despite system hardware or software failures, because it is often used for day-to-day decision making processes.
- Redundant systems are typified by double or triple redundancy. These types of systems provide more than one complete machine to accomplish the task of one machine. Each machine performs the same operations in parallel. If one machine fails or encounters an error, the additional machines provide the correct result. Such systems, while highly tolerant of system faults, are extremely expensive. In effect, multiple networks of machines must be provided to implement each network.
- RAID A similar fault-tolerant approach for storage is RAID.
- RAID technology may be implemented as disk mirroring (so-called RAID I) or disk striping with parity (so-called RAID V).
- Disk mirroring provides highly fault tolerant storage but is expensive, since multiple disks, usually two, must be provided to store the data of one disk.
- Disk striping with parity has poor performance for intensive write applications, since each time data is written to the array of disks a parity block must be calculated.
- Disk striping provides rigid N+1 redundancy and suffers additional performance degradation after the first error since the missing block (or blocks) must be recalculated each time a read operation is performed. Finally, such rigid N+1 redundancy schemes have no way of "healing" themselves, that is, after one error the system in no longer N+1 redundant.
- Systems using the first method distribute portions of the data store across a plurality of servers and associated disks.
- Each of the servers maintains a portion of the structured store of data, as well as optionally maintaining an associated portion of a directory structure that describes the portions of the data stored within that particular server.
- These systems guard against a loss of data by distributing the storage of data statically across a plurality of servers such that the failure of any one server will result in a loss of only a portion of the overall data.
- clustered database technology can provide more fault tolerant operation in that it guards against data loss and provides support for dual-path disks, the known systems still rely on static allocation of the data across various servers.
- Systems using the second method store the data stored in a shared data repository, such as a shared disk.
- the shared disks may be shared between a subset of system nodes or between all nodes of the system.
- Each node in the system continually updates the central data repository with its portion of the structured store. For example, in a database system, each node exports tables it is currently using to the data store. While this method exports the problems of load balancing to the central data repository, it suffers from two main drawbacks. First, throughput is lowered because of increased overhead associated with ensuring coherency of the centralized data store. Second, locking is inefficient because entire pages are locked when a node accesses any portion of a page. As a result, nodes may experience contention for memory even when no true conflict exists.
- the present invention relates to data storage systems that are more reliable and provide greater fault tolerant operation than present data storage systems that suffer no performance degradation when an error in encountered.
- the novel systems described herein achieve self-healing N+1 redundancy for disk storage, RAM storage, and structured data storage by distributing system data and data structures throughout a globally addressable memory space, a portion of which is hosted by one of more different nodes on a network. Because each node locally hosts system pages it is currently accessing, the system has the ability to dynamically move data in response to network activity levels and access patterns in order to optimize performance and minimize node access times.
- the system further provides distributed control for a plurality of different types of structured storage systems, such as file systems, database systems, and systems that store, share, and deliver Web pages to requesting nodes.
- the system is further capable of repairing errors encountered during operation because system data is distributed across network nodes.
- Appropriate data structures and operating policies are provided that allow the system to identify when a node has damaged or missing information.
- the information can be located, or regenerated, and is redistributed to other nodes on the network to return the system to N+1 redundancy.
- a shared memory system can be employed, such as a distributed shared memory system (DSM) that distributes the storage of data across some or all of the memory devices connected to a network.
- DSM distributed shared memory system
- Memory devices that may be connected to the network include hard disk drives, tape drives, floppy disk drive, CD-ROM drives, optical disk drives, random access memory chips, or read-only memory chips.
- the invention relates to a method for continuing operation after a node failure in a system for providing distributed control over data.
- a number of nodes are inter-connected by a network and the nodes periodically exchange connectivity information.
- Stored on each node is an instance of a data control program for manipulating data. Accordingly, multiple, distributed instances of the data control program exist throughout the network.
- Each instance of the data control program interfaces to a distributed shared memory system that provides distributed storage across the inter-connected nodes and that provides addressable persistent storage of data.
- Each instance of the data control program is operated to employ the shared memory system as a memory device having data contained therein.
- the shared memory system coordinates access to the data to provide distributed control over the data.
- Exchanged connectivity information is used to determine the failure of a node. Once a node failure is recognized, the portion of the data for which the failed node was responsible is determined.
- the invention in another aspect, relates to a method for continuing operation after a node failure in a system for providing distributed control over data.
- a number of nodes are inter-connected by a network and the nodes periodically exchange connectivity information.
- Stored on each node is an instance of a data control program for manipulating data. Accordingly, multiple, distributed instances of the data control program exist throughout the network.
- Each instance of the data control program interfaces to a globally addressable data store that provides distributed storage across the inter-connected nodes and that provides addressable persistent storage of data.
- Each instance of the data control program is operated to employ the globally addressable data store as a memory device having data contained therein.
- the globally addressable data store coordinates access to the data to provide distributed control over the data.
- Exchanged connectivity information is used to determine the failure of a node. Once a node failure is recognized, the portion of the data for which the failed node was responsible is determined.
- FIG. 1 is a conceptual block diagram of a distributed addressable shared memory structured data storage system according to the invention.
- FIG. 2 is a diagrammatic view of an embodiment for logically organizing network nodes
- FIG. 3 is a diagram of one possible embodiment of the system of FIG. 1, namely a distributed addressable shared memory file system providing storage for computer files such as source code files, wordprocessing documents files, etc.
- FIG. 4 is a graphical representation of the organization of directory entries and associated file descriptors (also known as "Inodes”), suitable for use with the file system of FIG. 3.
- FIG. 5 is a diagram of an Inode suitable for use with the file system of FIG. 3.
- FIG. 6 is a flowchart of the steps to be taken to update file system metadata.
- FIG. 7 illustrates a distributed shared memory computer network.
- FIG. 8 is a functional block diagram that illustrates in more detail one distributed shared memory computer network of the type shown in FIG. 7.
- FIG. 9 illustrates in more detail a shared memory subsystem suitable for practice with the network illustrated in FIG. 8.
- FIG. 10 is a functional block diagram of one shared memory subsystem according to the invention.
- FIG. 11 illustrates a directory page that can be provided by a shared memory subsystem of the type depicted in FIG. 10.
- FIG. 12 illustrates a directory that can be distributed within a shared memory and formed of directory pages of the type illustrated in FIG. 11.
- FIG. 13 illustrates in functional block diagram form a system that employs a directory according to FIG. 12 for tracking portions of a distributed shared memory.
- a network system 10 includes a plurality of network nodes that access a memory space storing a structured store of data, such as a structured file system or a database.
- Each of the nodes includes at least a data control program which accesses and manages the structured store of data.
- the structured store of data may be stored in an addressable shared memory or the structured store may be stored in a more traditional fashion.
- each node may be responsible for storing a particular element or elements of the structured store of data.
- the data control program can access a desired portion of the structured store using a globally unique identifier.
- the underlying system would translate the identifier into one or more commands for accessing the desired data, including network transfer commands.
- the structured store of data is stored in an addressable shared memory space, which allows the nodes to transparently access portions of the structured store using standard memory access commands.
- the system 10 can be a file system, a database system, a Web server, an object repository system, or any other structured storage system that maintains an organized set of data.
- Web server means any processor that transmits data objects (such as Active X objects), applications (such as JAVA applets), or files (such as HTML files), to a requester via Web protocols (e.g., http or ftp).
- the system 10 is a file system that maintains various computer files.
- This is just one embodiment of the invention that is provided for illustrative purposes.
- the invention can be employed to provide any one of a plurality of structured storage systems (e.g., database system, Web page system, Intranet, etc.). The invention is not to be limited to the file system or other particular embodiments described herein.
- a network system 10 includes a plurality of network nodes 12a-12d and an addressable shared memory space 20 that has a portion 22 for storing a structured store of data 28.
- Each of the nodes 12a-12d can include several sub-elements.
- node 12a includes a processor 30a, a data control program 32a, and a shared memory subsystem 34a.
- two of the nodes, 12a and 12c include monitors that provide displays 40 and 42 graphically depicting the structured store of data 28 within the addressable shared memory space 20.
- the addressable shared memory space 20 interconnects each of the network nodes 12a-12d and provides each node 12a-12d with access to the structured store of data 28 contained within the addressable shared memory space 20.
- a system 10 can provide, among other things, each network node 12a-12d with shared control over the structured store of data 28 and, therefore, the system 10 can distribute control of the data store across the nodes of the network.
- each node of the system 10 such as node 12a, includes a data control program 32a that interfaces to a shared memory subsystem 34a.
- the data control program 32a can operate as a structured storage system, such as a file system, that is adapted to maintain a structured store of data and to employ the shared memory system as an addressable memory device that can store a structured store of data.
- the shared memory subsystem 34a can access and store data within the addressable shared memory space 20.
- the invention can provide computer networks with distributively controlled and readily scaled file systems, database systems, Web page systems, object repositories, data caching systems, or any other structured storage system.
- the node information is used to provide a level of failure recovery, which will be described in more detail below.
- Any data structure for maintaining a list of nodes may be used so long as the list remains relatively compact. It is also desirable that the list of network nodes is independent of network technology, which means that network addresses should not be directly used.
- a unique identification code is assigned to each node 12a-d in the network. The identification code assigned to each node should not change.
- a network as described throughout the specification may include many thousands of nodes that are geographically dispersed or located on distinct networks. Maintaining a flat list of nodes for such a network topology results in an extreme amount of list maintenance overhead. Therefore, it is generally desirable to add some structure to the node list in order to reduce maintenance overhead.
- nodes 12a-e are collected into groups of nodes 52, 54 that may be defined to reflect various network topologies. Groups of nodes may also be grouped. This leads to a tree-structured hierarchy of nodes and groups. There is one "root" group 56 that includes as members every group and node present in the network. Further efficiencies may be achieved by limiting group size to a predetermined number of nodes.
- group membership is expected to change infrequently, if at all.
- a node 12a-e when introduced into the network, it is configured into a particular group 52, 54, and the node's group affiliation should change only as a result of a command issued by the network administrator.
- two forms of identification may be assigned to each node.
- a short form of identification may be assigned that encodes grouping information and therefore may change, however infrequently, with network topology or logical organization.
- a longer form of identification may be assigned to each node that is guaranteed to remain unchanged. The latter form is primarily used to refer to each node 12a-e in the network.
- a group of nodes 52, 54 may be limited to 64 members, requiring 6 bits to encode the identification information for each node. Accordingly, 12 bits would allow the system to uniquely identify any node in the network when more than one group of nodes exists, up to a maximum of 64 groups. For networks in which more than 64 groups of nodes exist, groups of nodes must be themselves grouped and 18 bits would be required to uniquely identify any node in the system.
- Each node 12a-e may also be assigned a permanent identification code that is invariant for the life of the node.
- Permanent identification codes may be constructed using a global address component to make it unique in space and a date or time component to make it unique in time.
- a node's permanent identification code will consist both of an address and a time-stamp to ensure that it is unique.
- the system 10 of the invention maintains within the addressable shared memory space 20 a structured store of data 28.
- Each of the nodes 12a-12d can access the addressable shared memory space 20 through the shared memory subsystems 34a-34d.
- Each of the shared memory subsystems 34a-34d provides its node with access to the addressable shared memory space 20.
- the shared memory subsystems 34a-34d coordinate each of the respective node's memory access operations to provide access to the desired data and maintain data coherency within the addressable shared memory space 20. This allows the interconnected nodes 12a-12d to employ the addressable shared memory space 20 as a space for storing and retrieving data.
- FIG. 1 illustrates that systems of the invention have shared memory subsystems providing the network nodes with access to an addressable shared memory space, wherein at least a portion of that space is assigned to at least a portion of one or more of the persistent storage memory devices (e.g., hard disks) to allow the nodes addressably to store and retrieve data to and from the one or more persistent storage memory devices.
- the persistent storage memory devices e.g., hard disks
- each of the nodes 12a-12d can employ its respective shared memory subsystem as a memory device that provides persistent data storage.
- Each of the data control programs 32a-32d is a software module that couples to the respective shared memory subsystem 34a-34d in a way that operates similarly to an interface between a conventional data storage program and a local memory device.
- the data control program 32a can stream data to, and collect data from, the shared memory subsystem 34a. Because the shared memory subsystems coordinate the memory accesses to the addressable shared memory space 20, each of the data control programs is relieved from having to manage and coordinate its activities with the other data control programs on the network or from having to manage and coordinate its activities with one or more central servers.
- each of the data control programs 32a-32d can be a peer incarnation (i.e., an instance) residing on a different one of the network nodes 12a-12d and can treat the respective shared memory subsystem 34a-34d as a local memory device such as a local hard disk.
- One or more of the data control programs 32a-32d can provide a graphical user interface 42 that graphically depicts the structured store of data 28 contained within the addressable shared memory space 20.
- the graphical user interface 42 allows a user at a node, for example at node 12a, to insert data objects graphically within the structured store of data 28.
- the data control program 32a can generate a set of commands that will present a stream of data to the shared memory subsystem 34a and the shared memory subsystem 34a will employ the data stream to store an object within the structured store of data 28.
- the other shared memory subsystems 34b-34d can provide information to their respective nodes that is indicative of this change to the structured store of data 28. Accordingly, as shown depicted in FIG.
- node 12c that node (which includes a graphical user interface 40) reflects the change to the structured store of data 28 affected by the data control program 32a of the node 12a.
- the graphical user interface 40 of the node 12c can depict to a user that an object is being placed within the structured store of data 28.
- the addressable shared memory space 20 also contains the data objects 50a-50c which can be placed within the structured data store 28 to become part of that structured data store.
- a system user at node 12a can direct object 50a to be inserted at a set location within the data store 28.
- the data control program 32a then directs the shared memory subsystem 34a to place the object 50a within the data store 28 at the proper location.
- the shared memory subsystem 34c on node 12c detects the change within the data store 28 and reflects that change within the graphical user interface 40.
- a structured file system 60 is a particular embodiment according to the invention that employs the properties of the addressable shared memory space 20 to implement what looks to all network nodes like a coherent, single file system when in fact it spans all network nodes coupled to the addressable shared memory space 20.
- the file system 60 of FIG. 3 differs from known physical and distributed file systems in a variety of ways.
- the file system 60 manages the mapping of a directory and file structure onto a distributed addressable shared memory system 20 which has at least a portion of its addressable space mapped or assigned to at least a portion of one or more persistent storage devices (e.g., hard disks) on the network.
- the file system 60 of the invention employs peer nodes, each of which have an incarnation or instance of the same data control program.
- the file system 60 of the invention maintains data coherence among network nodes; automatically replicates data for redundancy and fault tolerance; automatically and dynamically migrates data to account for varying network usage and traffic patterns; and provides a variety of other advantages and advances, some of which are disclosed in the commonly-owned U.S. patent application Ser. No. 08/754,481 filed Nov. 22, 1996, and incorporated by reference above.
- the file system 60 resides in part within the addressable shared memory space 20, and includes a structured store of data 62, a super root 64, file sets 66-74, directory entry 80, and file or document 82.
- Two network nodes 84 and 86 are shown accessing the addressable shared memory space 20 (in the manner described previously with reference to FIG. 1) via the logical drives 90 and 94.
- Application programs 92 and 96 executing on the nodes interact with the data control programs (not shown in FIG. 3 but shown in FIG. 1 as 32a-32d) and cause the data control programs in the nodes to access the logical drives 90 and 94.
- the logical drives are DOS devices that "connect to" the fileset directories via Installable File System drivers associated with the file system 60.
- the file system 60 supports one global file system per addressable shared memory space 20 shared by all of the network nodes. This global file system is organized into one or more independent collections of files, depicted as the filesets 66-74.
- a fileset can be considered logically equivalent to a traditional file system partition. It is a collection of files organized hierarchically as a directory tree structure rooted in a root directory. The non-leaf nodes in the tree are the directories 80, and the leaves in the tree are regular files 82 or empty directories. Sub-directory trees within a fileset can overlap by linking a file to multiple directories.
- a benefit of breaking up the file system 60 into filesets 66-74 is that it provides more flexible file system management for users of the system 60.
- the file system 60 grows into very large sizes (e.g., hundreds of nodes with thousands of gigabits of storage), it is desirable to have the files organized into groups of management entities such that management actions can be independently applied to individual groups without affecting the operation of the others.
- the filesets in the addressable shared memory space 20 are described and enumerated in a common structure, the root 64 of which provides the starting point to locate the filesets in the addressable shared memory space 20.
- the root 64 can be stored in a static and well-known memory location in the addressable shared memory space 20, and it can be accessed via a distributed shared memory system program interface.
- a node When a node is accessing a fileset for the first time, it first looks up the root 64 to determine the identifier associated with the fileset, e.g., the shared memory address used to access the fileset. Once it has determined the identifier, the node can access the root directory of the fileset. From the root directory, it then can traverse the entire fileset directory tree to locate the desired file.
- Filesets used by the file system 60 are described in greater detail below under the heading "Fileset.”
- a directory 126 (such as the directory 80 of FIG. 2) is accessed by starting at a directory Inode or descriptor 128 containing an address that points to a directory entries stream descriptor 130.
- This descriptor 130 is a pointer to a block of data containing directory entries for files File 1 through File 3.
- the directory entry for File 1 has a number of entries; one of the entries is a string containing the name of the file and another entry is the address of the Inodes and stream descriptors 132.
- the stream descriptors for File 1 are used to locate and retrieve the various 4 kilobyte pages in the addressable shared memory space 20 that constitute File 1. Other files are retrieved and constructed from the addressable shared memory space 20 in the same fashion.
- the directories used by the file system 60 are described in greater detail below under the heading "Directory.”
- a file 98 (such as the file 82 of FIG. 3) is represented by one or more shared pages of data 100, 102, 104, 106, and 108 in the addressable shared memory space 20.
- Each file 98 has a file Inode or descriptor 110 that includes various file attributes 112.
- the file descriptor 110 contains an address that points to a data stream descriptor 114, and the data stream itself includes one or more addresses 116, 118, 120, 122, and 124 that point to particular pages in the identifiable shared memory space 20.
- a page is the atomic unit in the addressable shared memory space 20, and it contains up to 4 kilobytes of data. Even if the entire 4 kbytes is not needed, an entire page is used. This is illustrated by the page 108 that only contains about 2 kbytes of data.
- the files used by the file system 60 are described in greater detail below under the heading "Files.”
- the filesets are the basic unit for the file system 60. Each fileset is identified with a name having up to 255 characters.
- the file system 60 exports a set of fileset level operations that allow an administrator to manage the filesets through the following type of actions.
- This operation creates a new fileset.
- the fileset is initially created with one file, the empty root directory.
- a default fileset is created automatically at the initialization of the addressable shared memory space 20.
- This operation deletes a fileset. All files in the fileset are removed, and all shared memory space allocated to the files in the fileset is discarded and the backing physical storage freed for new storage.
- the file system 60 will only allow deletion of a fileset until there are no open handles to file data stream in the fileset. In order to ready a fileset for deletion, the fileset must be "shutdown" by putting it off-line.
- This operation enumerates a specific fileset, or all the filesets, in the addressable shared memory space 20.
- This operation performs fileset level control routines such as setting fileset attributes.
- Directory are attached to local devices, i.e., "mounted” using parameters stored in the Windows NT registry, or some other similar central storage area for such information.
- the data control program 60 accesses the central storage and determines which filesets should be mounted.
- the data control program creates a file object representing each fileset identified by the entries in the central storage.
- an API may be provided which allows the data control program 60 to dynamically mount and unmount filesets by making appropriate API calls.
- the users of the file system 60 are not aware of the shared memory "logical volume,” but rather view each fileset as a volume (or partition in the sense of a traditional physical file system).
- the Win32 GetVolumeInformation is used to get information on the fileset (more precisely, on the logical device on which the fileset is attached to). Because all the filesets share the same pool of the storage in the addressable shared memory space 20, the total volume size returned to the user for each fileset is the current aggregate storage capacity in the addressable shared memory space 20. The same approach is taken for the total free space information, and the aggregate value of the addressable shared memory space 20 is returned for each fileset.
- Directory entry scanning is one of the most frequently performed operations by user applications. It is also may be the most visible operation in terms of performance. Consequently, much attention is directed to making the directory scan efficient and the WindowsNT Files System (NTFS) duplicates sufficient file Inode information in the directory entry such that a read directory operation can be satisfied by scanning and reading the directory entries without going out to read the information from the file Inodes.
- NTFS WindowsNT Files System
- the problem with this scheme is that the doubly stored file metadata, such as the file time stamps and file size, can be updated quite frequently, making the metadata update more expensive. However, this overhead is considered acceptable in face of the performance gained in directory scan operations.
- the file system 60 adopts the same philosophy of providing efficient directory scanning by duplicating file Inode information in directory entries. Each directory entry contains sufficient information to satisfy the Win32 query file information requests.
- the file Inode is stored with the file stream descriptors on a separate page. The Inode is located via a pointer in the directory entry.
- the file system's directory entries are stored in the directory file's directory entry data stream. To maximize space utilization, each directory entry is allocated on the first available free space in a page that can hold the entire entry. The length of the entry varies depending on the length of the file's primary name. The following information is part of the directory entry: creation time; change time; last write time; last accessed time; pointers to stream descriptor; pointer to parent directory Inode; MS-DOS type file attributes; and MS-DOS style file name (8.3 naming convention). For average file name lengths, a page contains up to about 30 entries. All the file information in the directory entry is also contained in the file Inode, except for the file primary name and MS-DOS file name. The file primary names and associated short names are only stored in the directory entries. This makes the Inode size fixed.
- the Inode When a file information is modified (except for file names), the Inode is updated in the context of the update transaction and therefore always contains the most up-to-date information.
- the associated directory entry change is lazily flushed to reduce the cost of double updating. This means the Inode updates are either flushed or recoverable, but not the corresponding directory entry updates. If the directory entry gets out of synch with the Inode (when the Inode change is successfully flushed but not the directory change), the entry is updated the next time the Inode is updated.
- the directory entries Inodes
- FIG. 4 illustrates the organization of directory entries and associated Inodes.
- a file of the file system 60 comprises streams of data and the file system metadata to describe the file.
- Files are described in the file system 60 by objects called Inodes.
- the Inode is a data structure that stores the file metadata. It represents the file in the file system 60.
- a data stream is a logically contiguous stream of bytes. It can be the data stored by applications or the internal information stored by the file system 60.
- the data streams are mapped onto pages allocated from the addressable shared memory space 20 for storage.
- the file system 60 segments a data stream into a sequence of 4 kilobyte segments, each segment corresponding to a page.
- the file system 60 maintains two pieces of size information per data stream: the number of bytes in the data stream; and the allocation size in number of pages.
- the byte-stream to segment/page mapping information is part of the file metadata and is stored in a structure called data stream descriptor. See FIG. 5.
- Users' requests for data are specified in terms of range of bytes and the position of the starting byte measured by its offset from the beginning of the data stream, byte position zero.
- the file system 60 maps the offset into the page containing the starting byte and the intra-page offset from the beginning of the page.
- Every file of the file system 60 has at least two data streams: the default data stream; and the Access Control List (ACL) stream. Each file may optionally have other data streams.
- the ACL stream is used to store the security Access Control Lists set on the file.
- Each data stream is individually named so that the user can create or open access to a specific data stream.
- the name of the default data stream is assumed to be the primary name of the file.
- the user of the file system 60 To access a data stream, the user of the file system 60 must first open a file handle to the desired data stream by name. Handle to the default data stream handle to the default data stream is opened. This open file handle represents the data stream in all the file system services that operates on the data stream.
- the file system 60 exports a set of services to operate at the file level.
- the input to the services are the file object handle (Inode) or the data stream object handle, and the operation specific parameters, including the desired portions of the data stream in byte positions.
- Open files are represented by data stream objects (or just file objects). Users access files using these file objects, identified to the users through file handles.
- a file handle is a 32-bit entity representing an instance of an open file stream. For example, WindowsNT creates the file object and returns a file handle to the users in response to the user request for file creation or file open.
- the file system 60 initializes a pointer to a file control block. Multiple file objects point to the same file control block and each file control block maintains separate stream objects for each open context. Externally, the file handle is opaque to the users. Multiple opens can be issued against the same file. When the user closes a file, the file object and the associated file handle is removed.
- the file system 60 maps file streams into sequences of segments which become progressively larger, each segment corresponds to one or more pages.
- the file system 60 attempts to reserve contiguous pages for data streams but only allocates real backing storage on an as needed basis, usually as a result of a file extension requested by writing beyond the data stream allocation size.
- the file system 60 rounds the extension size in number of bytes up to a multiple of 4 kilobytes to make it an integer number of pages, and requests pages for actual allocation.
- the number of 4 kilobyte pages allocated by the file system depends on the number of file extension requests made.
- the file system 60 allocate one 4 kilobyte page for the first extension request, two 4 kilobyte pages for the second request, four 4 kilobyte pages for the third extension request, and so on.
- the newly allocated pages are zero filled.
- the file system 60 can reduce the amount of bookkeeping information on the byte offset to page mapping.
- the file system 60 reserves (sometimes much) larger than requested memory space for a file, and substantiates the storage by allocating backing storage page by page.
- a 4 kilobyte segment also maps naturally to a page, simplifying the data stream segment to page mapping.
- an analogy could be made with the NTFS's allocation policy of 4 kilobyte clusters (segment) size for large disks to speed up allocation and reduce fragmentation, such analogy is not completely valid because the actual on-disk allocation segment size depends greatly on the local disk size and the physical file systems.
- the file system 60 Similar to the NTFS, which controls the allocation of each disk partition and therefore can quickly determine the free volume space available for allocation, the file system 60 requests the total available space information and uses this information to quickly determine whether to proceed with the allocation processing. If the total available space is less than the required allocation size, the request is denied immediately. Otherwise, the file system 60 will proceed to allocate the pages to satisfy the request. The fact that the file system 60 can proceed with the allocation does not guarantee that the allocation will succeed, because the actual total available space may change constantly.
- the file system 60 takes advantage of the page level replication capability of the underlying distributed addressable shared memory system 20 disclosed in the U.S. patent application incorporated by reference above.
- Page level replication allows the system to provide file replication.
- the data streams of a replicated file are backed by pages, which are themselves replicated. In this way, data streams are replicated automatically without intervention of the file system 60.
- the extra space consumed by the multiple replicas is not reflected in the file (data stream) sizes.
- the stream allocation size still reports the total allocation size in pages required for one replica.
- the pages backing temporary files, however, are not replicated.
- the shared memory provides the distribution mechanism for resource sharing among peer nodes running the file system 60 software.
- Each instance of the file system 60 on each network node views the shared memory resources (i.e., pages) as being shared with other local or remote threads.
- the file system 60 needs a way to implement high level, file system locks to provide consistent resource sharing. Any concurrency control structure can be used to implement locks, such as lock objects or semaphores. In database applications, locking may also be achieved by implementing concurrency control structures associated with database indices or keys. In file system applications access to files or directories may be controlled. Another example of file system locks is Byte Range Locking, which provides the users the ability to coordinate shared access to files.
- a byte range lock is a lock set on a range of bytes of a file.
- Coordinated shared access to a file can be accomplished by taking locks on the desired byte ranges.
- the high level file system lock works in the following fashion: (a) a file system resource is to be shared by each file system 60 instance, and the access to the resource is coordinated by a locking protocol using a lock object data structure that represents the high level lock to coordinate the shared resource, and it is the value of the data structure that represents the current state of the lock; (b) to access the resource, the instance at each node must be able to look at the state (or value) of the lock data structure, and if it is "free,” modify it so that it becomes “busy,” but if it is "busy,” then it has to wait to become “free,” and there could be intermediate states between “free” and “busy” (i.e., more than two lock states), but in any event, in this byte range locking example, a lock is a description of a certain byte range being shared/exclusively locked by some thread of the file system 60, and a conflicting new byte range
- the engine can also be used to coordinate access to resources, but in the case of complex high level resource locking such as Byte Range Locking, using the engine's locking features and capabilities directly to provide locks may be too costly for the following reasons: (a) each byte range lock would require a page representing the lock, and since the number of byte range locks can be large, the cost in terms of page consumption may be too high; and (b) the engine locks only provide two lock states (i.e., shared and exclusive), and high level file system locks may require more lock states.
- the file system 60 of the invention implements the file system locking using the engine locking as a primitive to provide serialization to access and update the lock data structures.
- the file system 60 takes a shared lock on the data structure's page using the engine locking features and capabilities before it reads the page to prevent the data structure being modified.
- To modify the lock structure it sets a exclusive lock on the page. The page lock is taken and released as soon as the lock structure value is read or modified.
- the file system 60 implements the high level locks in the following way: (a) to take a file system lock (FS lock), the file system 60 sets a shared lock on the FS lock page and reads the page and then examines the lock structure; (b) if the lock structure indicates the resource is unlocked or locked in compatible lock mode, then the file system 60 requests to exclusively lock the page, and this guarantees only one file system 60 node instance can modify the lock data structure, and if the request succeeds then the file system 60 write maps the lock page and then changes the lock structure to set the lock and unlocks the page and sets page access to none; and (c) if the resource is locked in incompatible lock mode, the file system 60 unlocks the page but retains the page read mapped, and it then puts itself (the current thread) in a queue and waits for a system event notifying that the lock value has changed, and when the lock value does change then the file system 60 thread gets notified and repeats the step (a) above.
- FS lock file system lock
- the file system 60 sets a
- the file system 60 implements the notification using a signal primitive.
- the file system 60 threads waiting for a lock are blocked on a system event.
- a signal is sent to each blocked file system 60 thread.
- Each blocked file system 60 threads then wakes up and repeats step (a).
- FS locks are stored in volatile pages.
- Byte Range Locking is a file system locking service exported to the users through the Win32 LockFile() and LockFileEx() API. It allows simultaneous access to different non-overlapping regions of a file data stream by multiple users. To access the data stream, the user locks the region (byte range) of the file to gain exclusive or shared read access to the region.
- the file system 60 supports byte range locking for each individual data stream of the file.
- the following Win32-style byte range locking behavior is supported: (a) locking a region of a file is used to acquire shared or exclusive access to the specified region of the file, and the file system 60 will track byte range locks by file handle, therefore file handles provide a way to identify uniquely the owner of the lock; (b) locking a region that goes beyond the current end-of-file position is not an error; (c) locking a portion of a file for exclusive access denies all other processes both read and write access to the specified region of the file, and locking a portion of a file for shared access denies all other processes write access to the specified region of the file but allows other processes to read the locked region, and this means that the file system 60 must check byte range locks set on the data stream not only for lock requests but for every read or write access; (d) if an exclusive lock is requested for a region that is already locked either shared or exclusively by other threads, the request blocks or fails immediately depending on the calling option specified
- the file system 60 For each byte range lock, the file system 60 creates a byte range lock record to represent the lock.
- the record contains the following information: (a) byte range; (b) lock mode (shared or exclusive); (c) process identification; and (d) a Win32 lock key value.
- the file system 60 regards the file byte ranges as resources with controlled access. For each byte range lock record, the file system 60 creates a file system lock (as discussed above) to coordinate the access to the byte range "resource.” A compatible byte range lock request (share lock) translates into taking read lock on the file system lock associated with the byte range record. An exclusive byte range lock request is mapped to taking write lock on the file system lock.
- lock requests waiting on the page containing the desired byte range will be notified when the page content changes.
- the file system 60 views the addressable shared memory space 20 as a shared flat identifier space being concurrently accessed by many network nodes (e.g., 12a-12d).
- the file system 60 maps the file data and metadata logically represented as byte streams in pages, and a page is the unit of the addressable shared memory space 20. From the viewpoint of the file system 60, a data stream is stored in an ordered collection of pages.
- the file system 60 calls the engine described in the above-identified, incorporated-by-reference U.S. patent application to allocate space in pages from the addressable shared memory space 20 in order to store its metadata and user file data. Sections of the addressable shared memory space 20 that are reserved by the file system 60 can be accessed by an instance of the file system 60 in the addressable shared memory space 20 but not by other types of network nodes.
- Each instance of the file system 60 (including the data control programs 32a-34d of FIG. 1) is a peer-of all other network nodes running the file system 60 and thus sharing file data via the addressable shared memory space 20. To the local users, the file system 60 exhibits the characteristics of single node consistency, and file sharing behaves as if sharing with other processes on the same node.
- file data update is consistent in the entire network, i.e., if a file page is changed, the modification is seen immediately by other users with open handles to the file, and for shared write file access, the coordination of the shared write access, if any, rests entirely with the users, usually by means of byte range locking; and
- flush is a global operation in the network, i.e., a valid dirty file page can be flushed from any node that has the file open, and if the flush is not successfully completed, the resulting file data state could be either the old state before the flush or a partially written state, and the file system 60 instances utilize the shared address space both as data storage and as mechanism for information passing (locking and information sharing).
- the addressable shared memory system disclosed in the U.S. patent application incorporated by reference is an "engine" that can create and manage a virtual memory space that can be shared by each computer on a network and can span the storage space of each memory device connected to the network. Accordingly, all data stored on the network can be stored within the virtual memory space and the actual physical location of the data can be in any of the memory devices connected to the network.
- the engine or system can create or receive, a global address signal that represents a portion, for example 4 k bytes, of the virtual memory space.
- the global address signal can be decoupled from, i.e., unrelated to, the physical and identifier spaces of the underlying computer hardware, to provide support for a memory space large enough to span each volatile and persistent memory device connected to the system.
- systems of the invention can operate on 32-bit computers, but can employ global address signals that can be 128 bits wide.
- the virtual memory space spans 2 128 bytes, which is much larger than the 2 32 address space supported by the underlying computer hardware.
- Such an address space can be large enough to provide a separate address for every byte of data storage on the network, including all RAM, disk and tape storage.
- the system includes a directory manager that tracks those portions of the virtual memory space that are in use.
- the system provides physical memory storage for each portion of the virtual memory space in use by mapping each such portion to a physical memory device, such as a RAM memory or a hard-drive.
- the mapping includes a level of indirection that facilitates data migration, fault-tolerant operation, and load balancing.
- each computer can share the memory space. This allows the networked computers to appear to have a single memory, and therefore can allow application programs running on different computers to communicate using techniques currently employed to communicate between applications running on the same machine.
- the invention of the above-identified, incorporated-by-reference U.S. patent application can be understood to include computer systems having a addressable shared memory space.
- the systems can comprise a data network that carries data signals representative of computer readable information a persistent memory device that couples to the data network and that provides persistent data storage, and plural computers that each have an interface that couples to the data network, for accessing the data network to exchange data signals therewith.
- each of the computers can include a shared memory subsystem for mapping a portion of the addressable memory space to a portion of the persistent storage to provide addressable persistent storage for data signals.
- the persistent memory device will be understood to include a plurality of local persistent memory devices that each couple to a respective one of the plural computers.
- the system can also include a distributor for mapping portions of the addressable memory space across the plurality of local persistent memory devices and a disk directory manager for tracking the mapped portions of the addressable memory space to provide information representative of the local persistent memory device that stores that portion of the addressable memory space mapped thereon.
- the systems can also include a cache system for operating one of the local persistent memory devices as a cache memory for cache storing data signals associated with recently accessed portions of the addressable memory space.
- the system can include a migration controller for selectively moving portions of the addressable memory space between the local persistent memory devices of the plural computers.
- the migration controller can determine and respond to data access patterns, resource demands or any other criteria or heuristic suitable for practice with the invention. Accordingly, the migration controller can balance the loads on the network, and move data to nodes from which it is commonly accessed.
- the cache controller can be a software program running on a host computer to provide a software managed RAM and disk cache.
- the RAM can be any volatile memory including SRAM, DRAM or any other volatile memory.
- the disk can be any persistent memory including any disk, RAID, tape or other device that provides persistent data storage.
- the systems can also include a coherent replication controller for generating a copy, or select number of copies, of a portion of the addressable memory space maintained in the local persistent memory device of a first computer and for storing the copy in the local persistent memory device of a second computer.
- the coherent replication controller can maintain the coherency of the copies to provide coherent data replication.
- the systems can also be understood to provide integrated control of data stored in volatile memory and in persistent memory.
- a volatile memory device has volatile storage for data signals
- the shared memory subsystem includes an element, typically a software module, for mapping a portion of the addressable memory space to a portion of the volatile storage.
- the volatile memory device can be comprised of a plurality of local volatile memory devices each coupled to a respective one of the plural computers
- the persistent memory device can be comprised of a plurality of local persistent memory devices each coupled to a respective one of the plural computers.
- a directory manager can track the mapped portions of the addressable memory space, and can include two sub-components; a disk directory manager for tracking portions of the addressable memory space mapped to the local persistent memory devices, and a RAM directory manager for tracking portions of the addressable memory space mapped to the local volatile memory devices.
- a RAM cache system can operate one of the local volatile memory devices as a cache memory for cache storing data signals associated with recently accessed portions of the addressable memory space.
- the systems can include additional elements including a paging element for remapping a portion of the addressable memory space between one of the local volatile memory devices and one of the local persistent memory devices; a policy controller for determining a resource available signal representative of storage available on each of the plural computers and, a paging element that remaps the portion of addressable memory space from a memory device of a first computer to a memory device of a second computer, responsive to the resource available signal; and a migration controller for moving portions of addressable memory space between the local volatile memory devices of the plural computers.
- a paging element for remapping a portion of the addressable memory space between one of the local volatile memory devices and one of the local persistent memory devices
- a policy controller for determining a resource available signal representative of storage available on each of the plural computers and, a paging element that remaps the portion of addressable memory space from a memory device of a first computer to a memory device of a second computer, responsive to the resource available signal
- the systems can include a hierarchy manager for organizing the plural computers into a set of hierarchical groups wherein each group includes at least one of the plural computers.
- Each the group can include a group memory manager for migrating portions of addressable memory space as a function of the hierarchical groups.
- the system can maintain coherency between copied portions of the memory space by including a coherent replication controller for generating a coherent copy of a portion of addressable memory space.
- the system can generate or receive global address signals.
- the systems can include an address generator for generating a global address signal representative of a portion of addressable memory space.
- the address generator can include a spanning unit for generating global address signals as a function of a storage capacity associated with the persistent memory devices, to provide global address signals capable of logically addressing the storage capacity of the persistent memory devices.
- the directory manager can be a distributed directory manager for storing within the distributed memory space, a directory signal representative of a storage location of a portion of the addressable memory space.
- the distributed directory manager can include a directory page generator for allocating a portion of the addressable memory space and for storing therein an entry signal representative of a portion of the directory signal.
- the directory page generator optionally includes a range generator for generating a range signal representative of a portion of the addressable memory space, and for generating the entry signal responsive to the range signal, to provide an entry signal representative of a portion of the directory signal that corresponds to the portion of the addressable memory space.
- the distributed directory manager can include a linking system for linking the directory pages to form a hierarchical data structure of the linked directory pages as well as a range linking system for linking the directory pages, as a function of the range signal, to form a hierarchical data structure of linked directory pages.
- a computer system can include a directory page generator that has a node selector for generating a responsible node signal representative of a select one of the plural computers having location information for a portion of the shared address space. This provides a level of indirection that decouples the directory from the physical storage location of the data. Accordingly, the directory needs only to identify the node, or other device, that tracks the physical location of the data. This way, each time data migrates between physical storage locations, the directory does not have to be updated, since the node tracking the location of the data has not changed and still provides the physical location information.
- the system can include page generators that generate directory pages that carry information representative of a location monitor, such as a responsible computer node, that tracks a data storage location, to provide a directory structure for tracking homeless data.
- a location monitor such as a responsible computer node
- the directory itself can be stored as pages within the virtual memory space. Therefore, the data storage location can store information representative of a directory page, to store the directory structure as pages of homeless data.
- the invention of the above-identified, incorporated-by-reference U.S. patent application can be understood as methods for providing a computer system having a addressable shared memory space.
- the method can include the steps of providing a network for carrying data signals representative of computer readable information, providing a hard-disk, coupled to the network, and having persistent storage for data signals, providing plural computers, each having an interface, coupled to the data network, for exchanging data signals between the plural computers, and assigning a portion of the addressable memory space to a portion of the persistent storage of the hard disk to provide addressable persistent storage for data signals.
- FIG. 7 illustrates a computer network 10 that provides a shared memory that spans the memory space of each node of the depicted computer network 210.
- FIG. 7 illustrates a computer network 210 that includes a plurality of nodes 212a-212c, each having a CPU 214, an operating system 216, an optional private memory device 218, and a shared memory subsystem 220.
- each node 212a-212c connects via the shared memory subsystem 220 to a virtual shared memory 222.
- the computer network 210 enables network nodes 212a-212c to communicate and share functionality using the same techniques employed by applications when communicating between applications running on the same machine. These techniques can employ object linking and embedding, dynamic link libraries, class registering, and other such techniques.
- the nodes 212 can employ the virtual shared memory 222 to exchange data and objects between application programs running on the different nodes 212 of the network 210.
- each node 212 can be a conventional computer system such as a commercially available IBM PC compatible computer system.
- the processor 214 can be any processor unit suitable for performing the data processing for that computer system.
- the operating system 216 can be any commercially available or proprietary operating system that includes, or can access, functions for accessing the local memory of the computer system and networking.
- the private memory device 218 can be any computer memory device suitable for storing data signals representative of computer readable information.
- the private memory provides the node with local storage that can be kept inaccessible to the other nodes on the network.
- the private memory device 218 includes a RAM, or a portion of a RAM memory, for temporarily storing data and application programs and for providing the processor 214 with memory storage for executing programs.
- the private memory device 18 can also include persistent memory storage, typically a hard disk unit or a portion of a hard disk unit, for the persistent storage of data.
- the shared memory subsystem 220 depicted in FIG. 7 is an embodiment of the invention that couples between the operating system 216 and the virtual shared memory 222 and forms an interface between the operating system 216 and the virtual shared memory to allow the operating system 216 to access the virtual shared memory 222.
- the depicted shared memory subsystem 220 is a software module that operates as a stand-alone distributed shared memory engine.
- the depicted system is illustrative and other systems of the invention can be realized as shared memory subsystems that can be embedded into an application program, or be implemented as an embedded code of a hardware device. Other such applications can be practiced without departing from the scope of the invention.
- the depicted virtual shared memory 222 illustrates a virtual shared memory that is accessible by each of the nodes 212a-212c via the shared memory subsystem 220.
- the virtual shared memory 222 can map to devices that provide physical storage for computer readable data, depicted in FIG. 7 as a plurality of pages 224a-224d.
- the pages form portions of the shared memory space and divide the address space of the shared memory into page addressable memory spaces.
- the address space can be paged into 4K byte sections.
- alternative granularity can be employed to manager the shared memory space.
- Each node 212a-212c through the shared memory subsystem 220 can access each page 224a-224d stored in the virtual shared memory 222.
- Each page 224a-224d represents a unique entry of computer data stored within the virtual shared memory 222.
- Each page 224a-224d is accessible to each one of the nodes 212a-212c, and alternatively, each node can store additional pages of data within the virtual shared memory 222. Each newly stored page of data can be accessible to each of the other nodes 212a-212c.
- the virtual shared memory 222 provides a system for sharing and communicating data between each node 212 of the computer network 210.
- FIG. 8 illustrates in functional block diagram form a computer network 230 that has a distributed shared memory.
- each node 212a-212c has a memory subsystem 232 that connects between the operating system 216 and the two local memory devices, the RAM 234 and the disk 236, and that further couples to a network 238 that couples to each of the depicted nodes 212a, 212b and 212c and to a network memory device 226.
- FIG. 8 illustrates a distributed shared memory network 30 that includes a plurality of nodes 212a-212c, each including a processing unit 214, an operating system 216, a memory subsystem 232, a RAM 234, and a disk 236.
- FIG. 8 further depicts a computer network system 38 that connects between the nodes 212a-212c and the network memory device 226.
- the network 238 provides a network communication system across these elements.
- the illustrated memory subsystems 232a-232c that connect between the operating system 216a-216c, the memory elements 234a-234c, 236a-236c, and the network 238, encapsulate the local memories of each of the nodes to provide an abstraction of a shared virtual memory system that spans across each of the nodes 212a-212c on the network 238.
- the memory subsystems 232a-232c can be software modules that act as distributors to map portions of the addressable memory space across the depicted memory devices.
- the memory subsystems further track the data stored in the local memory of each node 212 and further operate network connections with network 238 for transferring data between the nodes 212a-212c.
- the memory subsystems 232a-232c access and control each memory element on the network 238 to perform memory access operations that are transparent to the operating system 216. Accordingly, the operating system 216 interfaces with the memory subsystem 232 as an interface to a global memory space that spans each node 212a-212con the network 238.
- FIG. 8 further depicts that the system 230 provides a distributed shared memory that includes persistent storage for portions of the distributed memory.
- the depicted embodiment includes a memory subsystem, such as subsystem 232a, that interfaces to a persistent memory device, depicted as the disk 236a.
- the subsystem 232a can operate the persistent memory device to provide persistent storage for portions of the distributed shared memory space.
- each persistent memory device 236 depicted in FIG. 8 has a portion of the addressable memory space mapped onto it.
- device 236a has the portions of the addressable memory space, C o , C d , C g , mapped onto it, and provides persistent storage for data signals stored in those ranges of addresses.
- the subsystem 232a can provide integrated control of persistent storage devices and electronic memory to allow the distributed shared memory space to span across both types of storage devices, and to allow portions of the distributed shared memory to move between persistent and electronic memory depending on predetermined conditions, such as recent usage.
- the nodes of the network may be organized into a hierarchy of groups.
- the memory subsystems 232a-232c can include a hierarchy manager that provides hierarchical control for the distribution of data. This includes controlling the migration controller, and policy controller, which are discussed in detail below, to perform hierarchical data migration and load balancing, such that data migrates primarily between computers of the same group, and passes to other groups in hierarchical order. Resource distribution is similarly managed.
- FIG. 9 illustrates in more detail one shared memory subsystem 240 according to the invention.
- FIG. 9 depicts a shared memory subsystem 240, that includes an interface 242, a DSM directory manager 244, a memory controller 246, a local disk cache controller 248, and a local RAM cache controller 250.
- FIG. 9 further depicts the network 254, an optional consumer of the DSM system, depicted as the service 258, the operating system 216, a disk driver 260, a disk element 262 and a RAM element 264.
- the shared memory subsystem 240 depicted in FIG. 9 can encapsulate the memory management operations of the network node 212 to provide a virtual shared memory that can span across each node that connects into the network 254. Accordingly, each local node 212 views the network as a set of nodes that are each connected to a large shared computer memory.
- the depicted interface 242 provides an entry point for the local node to access the shared memory space of the computer network.
- the interface 242 can couple directly to the operating system 216, to a distributed service utility such as the depicted DSM file system 258, to a distributed user-level service utility, or alternatively to any combination thereof
- the depicted interface 242 provides an API that is a memory oriented API.
- the illustrated interface 242 can export a set of interfaces that provide low-level control of the distributed memory.
- the interface 242 exports the API to the operating system 216 or to the optional DSM service 258.
- the operating system 216 or the service employs the interface 242 to request standard memory management techniques, such as reading and writing from portions of the memory space.
- These portions of the memory space can be the pages as described above which can be 4 K byte portions of the shared memory space, or other units of memory, such as objects or segments.
- Each page can be located within the shared memory space which is designated by a global address signal for that page of memory.
- the system can receive address signals from an application program or, optionally, can include a global address generator that generates the address signals.
- the address generator can include a spanning module that generates address signals for a memory space that spans the storage capacity of the network.
- the interface 242 receives requests to manipulate pages of the shared memory space.
- the interface 242 can comprise a software module that includes a library of functions that can be called by services, the OS 216, or other caller, or device.
- the function calls provide the OS 216 with an API of high level memory oriented services, such as read data, write data, and allocate memory.
- the implementation of the functions can include a set of calls to controls that operate the directory manager 244, and the local memory controller 246.
- the interface 242 can be a set of high level memory function calls to interface to the low-level functional elements of shared memory subsystem 240.
- FIG. 9 further depicts a DSM directory manager 244 that couples to the interface 242.
- the interface 242 passes request signals that represent requests to implement memory operations such as allocating a portion of memory, locking a portion of memory, mapping a portion of memory, or some other such memory function.
- the directory manager 244 manages a directory that can include mappings than can span across each memory device connected to the network 238 depicted in FIG. 8, including each RAM and disk element accessible by the network.
- the directory manager 244 stores a global directory structure that provides a map of the global address space. In one embodiment as will be explained in greater detail hereinafter, the directory manager 244 provides a global directory that maps between global address signals and responsible nodes on the network.
- a responsible node stores information regarding the location and attributes of data associated with a respective global address, and optionally stores a copy of that page's data. Consequently, the directory manager 244 tracks information for accessing any address location within the identifier space.
- the control of the distributed shared memory can be coordinated by the directory manager 244 and the memory controller 246.
- the directory manager 244 maintains a directory structure that can operate on a global address received from the interface 242 and identify, for that address, a node on the network that is responsible for maintaining the page associated with that address of the shared memory space. Once the directory manager 244 identifies which node is responsible for maintaining a particular address, the directory manager 244 can identify a node that stores information for locating a copy of the page, and make the call to the memory controller 246 of that node and pass to that node's memory controller the memory request provided by the memory interface 242.
- the depicted directory manager 244 is responsible for managing a directory structure that identifies for each page of the shared memory space a responsible node that tracks the physical location of the data stored in the respective page.
- the directory rather than directly providing the location of the page, can optionally identify a responsible node, or other device, that tracks the location of the page. This indirection facilitates maintenance of the directory as pages migrate between nodes.
- the memory controller 246 performs the low level memory access functions that physically store data within the memory elements connected to the network.
- the directory manager 244 of a first node can pass a memory access request through the interface 242, to the network module of the OS 216, and across the network 254 to a second node that the directory manager 244 identifies as the responsible node for the given address.
- the directory manager 244 can then query the responsible node to determine the attributes and the current owner node of the memory page that is associated with the respective global address.
- the owner of the respective page is the network node that has control over the memory storage element on which the data of the associated page is stored.
- the memory controller 246 of the owner can access, through the OS 216 of that node or through any interface, the memory of the owner node to access the data of the page that is physically stored on that owner node.
- the directory manager 244 couples to the network module 252 which couples to the network 254.
- the directory manager can transmit to the network module 252 a command and associated data that directs the network interface 252 to pass a data signal to the owner node.
- the owner node receives the memory request across network 254 and through network module 252 that passes the memory request to the interface 242 of that owner node.
- the interface 242 couples to the memory controller 246 and can pass the memory request to the local memory controller of that owner node for operating the local storage elements, such as the disk or RAM elements, to perform the requested memory operation.
- the memory subsystem 240 of the owner node can then transfer the page of data, or a copy of the page of data, via the network 254 to the node that originally requested access to that portion of the shared memory.
- the page of data is transferred via the network 254 to the network module 252 of the requesting node and the shared memory subsystem 240 operates the memory controller 246 to store in the local memory of the requesting node a copy of the accessed data.
- the directory manager 244 identifies a node that has a copy of the data stored in that page and moves a copy of that data into the local memory of the requesting node.
- the local memory storage both volatile (e.g. local RAM) and persistent (e.g. local disk storage), of the requesting node therefore becomes a cache for pages that have been requested by that local node.
- FIG. 9 depicts a memory controller that has a local disk cache controller 248 and a local RAM cache controller 250. Both of these local cache controllers can provide to the operating system 216, or other consumer pages of the shared memory space that are cache stored in the local memory of the node, including local persistent memory and local volatile memory.
- the shared memory subsystem can include a coherent replication controller that maintains coherency between cached pages by employing a coherence through invalidation process, a coherence through migration process or other coherence process suitable for practice with the present invention.
- the coherent replication controller can automatically generate a copy of the data stored in each page and can store the copy in a memory device that is separate from the memory device of the original copy. This provides for fault tolerant operation, as the failure of any one memory device will not result in the loss of data.
- the coherent replication controller can be a software model that monitors all copies of pages kept in volatile memory and made available for writing.
- the controller can employ any of the coherency techniques named above, and can store tables of location information that identifies the location information for all generated copies.
- FIG. 10 illustrates in greater detail one embodiment of a shared memory subsystem according to the invention.
- the shared memory subsystem 270 depicted in FIG. 10 includes a remote operations element 274, a local RAM cache 276, a RAM copyset 278, a global RAM directory 280, a disk copyset 282, a global disk directory 284, a configuration manager 288, a policy element 290, and a local disk cache 94.
- FIG. 10 further depicts a network element 304, a physical memory 300, shared data element 302, a physical file system 298, which is part of the operating system 216, a configuration service 308, a diagnostic service 310, and a memory access request 312.
- the depicted subsystem 270 can be a computer program that couples to the physical memory, file system, and network system of the host node, or can be electrical circuit card assemblies that interface to the host node, or can be a combination of programs and circuit card assemblies.
- the flow scheduler 272 depicted in FIG. 10 can orchestrate the controls provided by an API of the subsystem 270.
- the flow scheduler 272 can be a state machine that monitors and responds to the requests 312 and remote requests through network 304 which can be instructions for memory operations and which can include signals representative of the global addresses being operated on.
- These memory operation requests 312 can act as op-codes for primitive operations on one or more global addresses. They can be read and write requests, or other memory operations.
- the flow scheduler 272 can be a program, such as an interpreter, that provides an execution environment and can map these op-codes into control flow programs called applets.
- the applets can be independent executable programs that employ both environment services, such as threading, synchronization, and buffer management, and the elements depicted in FIG. 10.
- the API is capable of being called from both external clients, like a distributed shared memory file system, as well as recursively by the applets and the other elements 274-294 of the subsystem 270.
- Each element can provide a level of encapsulation to the management of a particular resource or aspect of the system.
- each element can export an API consisting of functions to be employed by the applets. This structure is illustrated in FIG. 10. Accordingly, the flow scheduler 272 can provide an environment to load and execute applets.
- the applets are dispatched by the flow scheduler 272 on a per op-code basis and can perform the control flow for sequential or parallel execution of an element to implement the op-code on the specified global address, such as a read or write operation.
- the flow scheduler 272 can include an element to change dynamically the applet at run time as well as execute applets in parallel and in interpreted mode.
- the depicted shared memory subsystem 270 includes a bifurcated directory manager that includes the global RAM directory 280 and the global disk directory 284.
- the global RAM directory 280 is a directory manager that tracks information that can provide the location of pages that are stored in the volatile memory, typically RAM, of the network nodes.
- the global disk directory 284 is a global disk directory manager that manages a directory structure that tracks information that can provide the location of pages that are stored on persistent memory devices. Together, the global RAM directory 280 and the global disk directory 284 provide the shared memory subsystem 270 with integrated directory management for pages that are stored in persistent storage and volatile memory.
- a paging element can operate the RAM and disk directory managers to remap portions of the addressable memory space between one of the volatile memories and one of the persistent memories.
- this allows the paging element to remap pages from the volatile memory of one node to a disk memory of another node.
- the RAM directory manager passes control of that page to the disk directory manager which can then treat the page as any other page of data. This allows for improved load balancing, by removing data from RAM memory, and storing it in the disk devices, under the control of the disk directory manager.
- Data may be stored in the Ram memory of more than one node, the persistent memory of more than one node, or some combination of RAM and persistent memory distributed throughout the network. This natural distribution of data present in the system provides a first line of defense against node failures.
- the system may "duplex" pages of data, i.e., the system may store copies on pages or multiple nodes.
- the global disk directory 284 maps address ranges to nodes that are responsible for managing the pages within each range. The nodes responsible for a range of addresses will be referred to as the "core holders" of those pages.
- Each page can be assigned a minimum number of core holders below which it should not fall. For example, if a page is assigned three as the minimum number of core holders and the third core holder suffers a failure which prevents access to the page, the page has fallen below if preferred minimum number of core holders and another copy of the page should be made. Another copy of the page may be made on the core holder node (if it did not completely fail), or a new core holder may be appointed a copy of the page given to it by one of the surviving core holders.
- reduplexing is also used to recover from complete node, and reduplexing after a node failure will be discussed in greater detail below.
- the local memory controller of the subsystem 270 is provided by the local RAM cache 276 and the local disk cache 294.
- the local RAM cache 276 which couples to the physical memory 300 of the local node can access, as described above, the virtual memory space of the local node to access data that is physically stored within the RAM memory 300.
- the local disk cache 294 couples to the persistent storage device 298 and can access a physical location that maintains in the local persistent storage data of the distributed shared memory.
- FIG. 10 also depicts a remote operations element 274 that couples between the network 304 and the flow scheduler 272.
- the remote operations element 274 negotiates the transfer of data across the network 304 for moving portions of the data stored in the shared memory space between the nodes of the network.
- the remote operations element 274 can also request services from remote peers, i.e., invalidate to help maintain coherency or for other reasons.
- FIG. 10 also depicts a policy element 290 that can be a software module that acts as a controller to determine the availability of resources, such as printer capabilities, hard-disk space, available RAM and other such resources.
- the policy controller can employ any of the suitable heuristics to direct the elements, such as the paging controller, disk directory manager, and other elements to dynamically distribute the available resources.
- FIG. 10 further depicts a memory subsystem 270 that includes a RAM copyset 278 and a disk copyset 282.
- the disk copyset 282 can maintain information on copies of pages that are stored in the local disk cache, which can be the local persistent memory.
- the RAM copyset 278 can maintain information on copies of pages that are stored in the local RAM cache which can be the local RAM.
- These copysets encapsulate indexing and storage of copyset data that can be employed by applets or other executing code for purposes of maintaining the coherency of data stored in the shared memory space.
- the copyset elements can maintain copyset data that identifies the pages cached by the host node.
- the copyset can identify the other nodes on the network that maintain a copy of that page, and can further identify for each page which of these nodes is the owner node, wherein the owner node can be a node which has write privileges to the page being accessed.
- the copysets themselves can be stored in pages of the distributed shared memory space.
- the local RAM cache 276 provides storage for memory pages and their attributes.
- the local RAM cache 276 provides a global address index for accessing the cached pages of the distributed memory and the attributes based on that page.
- the local ram cache 276 provides the index by storing in memory a list of each global address cached in the local RAM. With each listed global address, the index provides a pointer into a buffer memory and to the location of the page data.
- the index can further provide attribute information including a version tag representative of the version of the data, a dirty bit representative of whether the RAM cached data is a copy of the data held on disk, or whether the RAM cached data has been modified but not yet flushed to disk, a volatile bit to indicate if the page is backed by backing store in persistent memory, and other such attribute information useful for managing the coherency of the stored data.
- attribute information including a version tag representative of the version of the data, a dirty bit representative of whether the RAM cached data is a copy of the data held on disk, or whether the RAM cached data has been modified but not yet flushed to disk, a volatile bit to indicate if the page is backed by backing store in persistent memory, and other such attribute information useful for managing the coherency of the stored data.
- the memory subsystem 270 provides the node access to the distributed memory space by the coordinated operation of the directory manager that includes the global RAM directory 280 and the global disk directory 284, the cache controller that includes the local RAM cache and the local disk cache elements 276 and 294, and the copyset elements which include the RAM copyset 278 and the disk copyset 282.
- the directory manager provides a directory structure that indexes the shared address space. Continuing with the example of a paged shared address space, the directory manager of the subsystem 270 allows the host node to access, by global addresses, pages of the shared memory space.
- FIGS. 11 and 12 illustrate one example of a directory structure that provides access to the shared memory space.
- FIG. 11 depicts a directory page 320 that includes a page header 322, directory entries 324 and 326, wherein each directory entry includes a range field 330, a responsible node field 332, and an address field 334.
- the directory pages can be generated by a directory page generator that can be a software module controlled by the directory manager. It will be understood that the directory manager can generate multiple directories, including one for the Global disk and one for the Global RAM directories.
- the depicted directory page 320 can be a page of the global address space, such as a 4K byte portion of the shared address space. Therefore, the directory page can be stored in the distributed shared memory space just as the other pages to which the directory pages provide access.
- each directory page 120 includes a page header 322 that includes attribute information for that page header, which is typically metadata for the directory page, and further includes directory entries such as the depicted directory entries, 324 and 326, which provide an index into a portion of the shared address space wherein that portion can be one or more pages, including all the pages of the distributed shared memory space.
- the depicted directory page 320 includes directory entries that index a selected range of global addresses of the shared memory space.
- the directory generator can include a range generator so that each directory entry can include a range field 330 that describes the start of a range of addresses that that entry locates.
- each directory page 320 can include a plurality of directory entries, such as entries 324 and 326, that can subdivide the address space into a subset of address ranges.
- the depicted directory page 320 includes two directory entries 324 and 326.
- the directory entries 324 and 326 can, for example, subdivide the address space into two sub-portions.
- the start address range of the directory entry 324 could be the base address of the address space
- the start address range of the directory entry 326 could be the address for the upper half of the memory space.
- the directory entry 324 provides an index for pages stored in the address space between the base address and up to the mid-point of the memory space and, in complement thereto, the directory entry 326 provides an index to pages stored in the address space that ranges from the mid-point of the address space to the highest address.
- FIG. 11 further depicts a directory page 320 that includes, in each directory entry, a responsible node field 332 and the child page global address field 334. These fields 332, 334 provide further location information for the data stored in pages within the address range identified in field 330.
- FIG. 12 depicts a directory 340 formed from directory pages similar to those depicted in FIG. 9.
- FIG. 12 depicts that the directory 340 includes directory pages 342, 350-354, and 360-366.
- FIG. 12 further depicts that the directory 340 provides location information to the pages of the distributed shared memory space depicted in FIG. 12 as pages 370-384.
- the directory page 342 depicted in FIG. 12 acts like a root directory page and can be located at a static address that is known to each node coupled to the distributed address space.
- the root directory page 342 includes three directory entries 344, 346, and 348.
- Each directory entry depicted in FIG. 12 has directory entries similar to those depicted in FIG. 11.
- directory entry 344 includes a variable Co which represents the address range field 330, a variable Nj representative of the field 332, and a variable Cs representative of the field 334.
- the depicted root directory page 342 subdivides the address space into three ranges illustrated as an address range that extends between the address Co and Cd, a second address range that extends between the address Cd and Cg, and a third address range that extends between Cg and the highest memory location of the address space.
- each directory entry 344, 346, and 348 points to a subordinate directory page, depicted as directory pages 350, 352, and 354, each of which further subdivides the address range index by the associated directory entry of the root directory 342.
- this subdivision process continues as each of the directory pages 350, 352, and 354 each again have directory entries that locate subordinate directory pages including the depicted examples of directory pages 360, 362, 364, and 366.
- the depicted example of directory pages 360, 362, 364, and 366 are each leaf entries.
- the leaf entries contain directory entries such as the directory entries 356 and 358 of the leaf entry 360, that store a range field 330 and the responsible node field 332. These leaf entries identify an address and a responsible node for the page in the distributed memory space that is being accessed, such as the depicted pages 370-384.
- the leaf entry 356 points to the page 370 that corresponds to the range field 330 of the leaf entry 356, which for a leaf entry is the page being accessed.
- the directory structure 340 provides location information for pages stored in the distributed address space.
- a node selector can select a responsible node for each page, as described above, so that the leaf entry 356 provides information of the address and responsible node of the page being located. Accordingly, this directory tracks ownership and responsibility for data, to provide a level of indirection between the directory and the physical location of the data.
- the memory subsystem 270 passes to the responsible node indicated in the leaf entry 356 the address of the page being accessed.
- the shared memory subsystem of that node can identify a node that stores a copy of the page being accessed, including the owner node. This identification of a node having a copy can be performed by the RAM copyset or disk copyset of the responsible node.
- the node having a copy stored in its local physical memory can employ its local cache elements, including the local RAM cache and local disk cache to the identify from the global address signal a physical location of the data stored in the page being accessed.
- the cache element can employ the operating system of the owner node to access the memory device that maintains that physical location in order that the data stored in the page can be accessed.
- the data read from the physical memory of the owner node can be passed via the network to the memory subsystem of the node requesting the read and subsequently stored into the virtual memory space of the requesting node for use by that node.
- the depicted directory structure 340 comprises a hierarchical structure.
- the directory structure 340 provides a structure that continually subdivides the memory space into smaller and smaller sections. Further, each section is represented by directory pages of the same structure, but indexes address spaces of different sizes.
- a linker inserts or deletes the pages from the directory.
- the linker is a software module for linking data structures. The linker can operate responsive to the address ranges to provide the depicted hierarchical structure. Accordingly, the depicted directory 340 provides a scaleable directory for the shared address space.
- the directory pages are stored in the distributed address space and maintained by the distributed shared memory system.
- a root for the directory can be stored in known locations to allow for bootstrap of the system. Consequently, commonly used pages are copied and distributed, and rarely used pages are shuffled off to disk. Similarly, directory pages will migrate to those nodes that access them most, providing a degree of self-organization that reduces network traffic.
- FIG. 13 depicts the directory of FIG. 12 being employed by a system according to the invention.
- FIG. 13 depicts a system 400 that includes two nodes, 406a and 406b, a directory structure 340, and a pair of local memories having volatile memory devices 264a and 264b, and persistent memory devices 262a and 262b.
- Depicted node 406a includes an address consumer 408a, a global address 410a, and interface 242a, a directory manager 244a and a memory controller 246a.
- Node 406b has corresponding elements.
- the nodes are connected by the network 254.
- the directory 340 has a root page, directory pages A-F, and pages 1-5.
- Each node 406a and 406b operates as discussed above.
- the depicted address consumers 408a and 408b can be an application program, file system, hardware device or any other such element that requests access to the virtual memory.
- the address consumers 408a and 408b request an address, or range of addresses, and the directory manager can include a global address generator that provides the consumer with the requested address, or a pointer to the requested address.
- the respective directory managers 244a and 244b generate directory pages and store the pages in the directory structure 340.
- the directory structure 340 tracks the portions of the address space being employed by the system 400, and physical storage for each page is provided within the local memories.
- the data associated with the directory pages are distributively stored across the two local memories and duplicate copies can exist.
- the data can move between different local memories and also move, or page, between volatile and persistent storage.
- the data movement can be responsive to data requests made by memory users like application programs, or by operation of the migration controller described above.
- the movement of data between different memory locations can occur without requiring changes to the directory 340. This is achieved by providing a directory 340 that is decoupled from the physical location of the data by employing a pointer to a responsible node that tracks the data storage location. Accordingly, although the data storage location can change, the responsible node can remain constant, thereby avoiding any need to change the directory 340.
- the system and methods described above allow a distributed system to share address space, including persistent storage for memory, and gracefully handle node failure. Since the RAM directory, disk directory, and file system are distributed over every node in the distributed shared system, failure of one node may leave a "hole" in the RAM directory, disk directory, file system, or some combination of the three.
- Anchor nodes are special network nodes that retain a copy of the entire node directory database and may provide storage for other important system information such as copies of the root of disk directory trees.
- a node is configured as an anchor node when it is introduced to the network and this may be done by setting a value in a configuration file present on the node, or the node may be configured as an anchor using hardware techniques such as jumpers or special cabling.
- Anchor nodes may also store a complete list of all other anchor nodes in the network. Each anchor node may be provided with a list of all other anchor nodes by the system administrator or, on initialization, each anchor node may use a search protocol to locate other anchor nodes.
- Quorum indicates that enough nodes remain functional in the system to provide proper data processing and memory sharing. Because the number of nodes present in a network may be very high, not all nodes participate in the computation of quorum. In order to reduce processing requirements, only “anchor" nodes participate in the quorum computation. In attempting to establish quorum, each anchor node may contribute one "vote.” If the number of votes received is in excess of some predetermined threshold, then quorum is established and normal processing is effected. Quorum may also be used to gracefully operate when network failures result in the partitioning of the network into two or more regions. One of the partitions may continue to operate (because it is able to establish quorum) while the others cannot continue operation. In some embodiments the network administrator may assign more than one vote to certain anchor nodes in an attempt to bias operation of the network towards certain nodes.
- Heartbeat refers to the periodic exchange of connectivity information between all nodes of the network.
- One node is assigned to monitor heartbeat information.
- Heartbeat monitors may be assigned on a per network, per partition, or per group basis. The identity of the heartbeat monitor is dynamically assigned and may, but is not required to, favor selection of anchor nodes as the heartbeat monitor. All other nodes connected to network are heartbeat "slaves,” which means that those nodes report their operating status to the heartbeat monitor and receive periodic connectivity updates from the monitor.
- Heartbeat information propagates in the following manner.
- Each heartbeat slave periodically transmits a member pulse to its local heartbeat monitor indicating to the monitor that it is functional.
- the monitor receives the slave's member pulse, it updates its connectivity information.
- the monitor may store connectivity information as a bitmap, or any other data structure which allows such information to be stored and transmitted.
- the monitor periodically broadcasts the compiled connectivity information to the heartbeat slaves, which will be referred to as a "monitor pulse.”
- the heartbeat monitor In the event that a heartbeat slave misses a deadline three times in a row for transmitting member pulse information, the heartbeat monitor assumes that the errant slave has ceased functioning and updates the stored connectivity information to reflect the change in status. Each surviving heartbeat slave is notified of the change in connectivity on the next monitor pulse. In the event the slave is unable to transmit information but can receive, the slave will receive the broadcasted notification that it is no longer part of the network.
- each slave assumes that the heartbeat monitor has ceased functioning and each slave attempts to become the new heartbeat monitor.
- a slave may arbitrate to become the heartbeat monitor or a configuration file may be created that lists heartbeat monitors in order of preference and from which successive monitors may be selected.
- Each node's responsibilities depend on whether it is a heartbeat monitor, anchor node, or both. Each case is summarized below.
- this node On every connectivity change, i.e., at every deadline for receiving member pulses, this node will recompute whether quorum exists based solely on its stored connectivity bitmap. Resultant quorum state is included in broadcasted monitor pulses. Received quorum state information from other anchor nodes is ignored.
- This node receives member pulses from all slaves. If a member pulse is received from an anchor node, this node immediately updates the current quorum state and transmits the current quorum state on the next monitor pulse.
- these nodes Whenever there is a connectivity change, these nodes recompute quorum based solely on the connectivity information received from the heartbeat monitor. These nodes include the resultant quorum state in their member pulses. Quorum information received from the heartbeat monitor is ignored.
- These nodes transmit no quorum information. These nodes receive updated quorum information from the heartbeat monitor's monitor pulses.
- each group can elect a group heartbeat transmitter.
- the group heartbeat transmitter notifies a group level heartbeat monitor that the group it represents is active.
- the group level heartbeat monitor periodically broadcasts the status of the set of groups present in the network. This hierarchical grouping can be of arbitrary depth.
- quorum information is discarded after a certain period of time. This may be accomplished by associating a timer with quorum information (on heartbeat monitors and slaves) that is restarted whenever the node receives quorum information.
- quorum information on heartbeat monitors and slaves
- anchor nodes maintain a record of the current node database, i.e., anchor nodes record the current connectivity state of the network.
- Anchor nodes may store the node database to disk storage, or some other persistent storage mechanism, in order to provide backup during node failures.
- the node database may be written to a specific directory location. Updates to the database may be controlled by a centralized database. When an anchor nodes prepares to update the database, it may indicate the operation it is attempting to perform (add, delete, or change a node), data identifying the node for which an entry is changing, and the version number of the database that will be used if the update is successful.
- anchor nodes In networks having more than one anchor node, anchor nodes must enter into an arbitration algorithm to perform a node database update.
- An anchor node that initiates the node database update assumes the role of "coordinator.”
- the coordinator obtains a list of all the anchor nodes currently in the quorum set and each anchor node in this list assumes the roles of a "subordinate" anchor node for the purposes of the initiated update. While the database update is in progress, the coordinator and subordinates do not allow a second node database update to begin.
- the coordinator will obtain a list of anchor nodes that includes only the coordinator. In the event that the coordinator retrieves a list of anchor nodes that is empty, an error has occurred and the update is immediately terminated. in some embodiments the coordinator's first action is to check for quorum. If no quorum exists, then the update is immediately terminated.
- GRD pages are volatile pages that are not backed up to redundant, reliable, persistent disk storage and are frequently modified. These qualities make GRD pages highly vulnerable to node failure. Because GRD pages enable the location of other GRD pages, losing a GRD page can result in a section of the shared memory space becoming unfindable.
- node state and "network state” should be introduced.
- a node has four states: normal, notified, quiescent, and rebuilding.
- normal state a node in functioning normally.
- the node When notified of another node's failure, the node enters the "notified" state and waits for all its local processing to cease. Once all processing has ceased, the node enters the quiescent state and discards all GRD pages it has cached.
- the node receives a "start repopulating" message from the recovery coordinator, it leaves the quiescent state and enters the Rebuilding state.
- the node reports to the recovery coordinator that it has completed rebuilding, the node re-enters the normal state.
- Network state has similar properties, except that the network is in the notification state if any node is in the notification state, the network is in the quiescent state only when all nodes are in the quiescent state, the network is in the rebuilding state if any nodes are in the rebuilding state, and the network is in the normal state when the first node returns to the normal state.
- an anchor node When an anchor node notices that a node has failed (via the heartbean mechanism) or receives a request to rebuild the GRD from another node that had detected a node failure, it enters the "notified" state and negotiates with the other anchors to become the recovery coordinator, and thereby gain control of the rebuild.
- the negotiation to control the rebuild can rely on many different qualities. For example, anchor nodes may negotiate based on identification code, with lower assigned identification codes "winning" the negotiation. If the anchor node loses the negotiation, it defers to the winner, ceases attempting to control the rebuild, waits for a "start recovery” message, and proceeds as described above.
- the anchor node controls the rebuild, it sends a "quiesce for recovery" message to all nodes and waits to receive all the replies.
- This can be a synchronous process, although it may be desirable for it to be asynchronous to accommodate node of varying response speeds and capabilities.
- a non-anchor node will first receive the "quiesce for recovery” message from the recovery coordinator anchor node. This will cause the node to enter the "notified" state. Once in the notified state, all local processing activity is stopped, and errors should be returned for most received remote invocations. This state must either complete all invalidations or reliably fail them. Otherwise, a page could be modified while disconnected copyholders are outstanding. Once all local processing has terminated, a reply to the "quiesce for recovery" message is sent to the coordinator and the node enters the quiescent state.
- the node During the quiescent state the node removes all GRD pages from its local RAM cache, whether dirty or not, discards copyset information, and waits for a "start repopulating" message.
- the recovery coordinator sends a "start repopulating" message to all nodes and waits for their reply that repopulation is complete.
- the node When the node receives a "start repopulating" message, it enters the rebuilding state and sends a reply to the message. For any page remaining in the node's local RAM cache, the node sends a message to the recovery coordinator identifying the page by global address and requesting to become the responsible node and owner of the page. IF successful, the node owns the page. If not successful, the node should drop the page from its local RAM cache or register with the new owner to become a copychild of the page.
- the node Once the node has attempted to become owner of every page existing in its local RAM cache, it sends a "repopulation complete” message to the recovery coordinator and waits to receive a "resume operations” message. Once every node has sent a "repopulation complete” message to the recovery coordinator, it sends a "resume operations” message to all nodes in the network.
- a node fails during the GRD rebuild process, it can either be ignored, or the rebuild process can be restarted.
- Pages of the GDD are stored by multiple nodes in the network to provide some degree of tolerance for node failure.
- persistent data and directory pages stored by the failed node need to be reduplexed, in order to survive subsequent failures.
- the second mechanism uses a background reduplexer that asynchronously schedules the activity.
- the PAN maintains the primary copy of the global disk directory (GDD) root page.
- GDD global disk directory
- the PAN is assigned dynamically.
- Anchor nodes may arbitrate to become the PAN in the event of a PAN failure, or a configuration file may be provided which lists a series of nodes that may serve as the PAN. In either case, quorum must still exist. Anchor nodes that are not the PAN behave in the same manner as non-anchor nodes with respect to the reduplexing process.
- the PAN maintains and controls the background reduplexing process.
- the PAN receives notification from other nodes when they detect GDD pages that are below minimum core holder threshold. These GDD pages are typically detected during normal directory traversal operations.
- the PAN reduplexes by activating pages, as described above.
- Nodes maintain state regarding GDD pages that have less than the threshold number of core holders that they have encountered. When such a page is encountered, the node notifies the PAN to reduplex the page, and then monitors the PAN. Should the PAN fail during reduplexing, the node waits for the other anchor nodes to select a new PAN (or until a new PAN is assigned from a configuration file) and transmits the reduplex request to the new PAN.
- the communication subsystem is utilized to monitor the node states for this process.
- the node state is also used to reinitiate reduplexing operations that were incomplete due to resource constraints, such as available disk space.
- Various forms of network outages can cause sets of nodes to become partitioned into separate aggregations. When this occurs, duplexed copies of pages may be split between aggregations, i.e., one core holder for a page is present in the network while another is contained in the aggregation.
- the quorum set which is a majority of the original set of anchor nodes, is required for write access to the data and directory pages. An aggregation of nodes that are not in the quorum set, therefore, may serve data pages but cannot write to them. This inability to modify pages without quorum is enforced by having the anchor nodes disallow modifications to the GDD root page when quorum is lost.
- a node attempts to modify a page without access to all of its core holders, it first will attempt to modify the set of core copy holders, which requires the page's GDD page to be modified. This write to the GDD page will itself require a right to the GDD that stores its core copyset, and so on, until finally the node will attempt to modify the GDD root page. Since this operation will be failed by the anchor nodes, the original write to a normal data page will fail. The anchor nodes' enforcement of quorum on this GDD root page, prevents data corruption in the presence of a partitioned network.
- File system metadata inconsistencies take a number of forms, including (1) inconsistency between the file system representation of allocated pages and the global disk directory (GDD) of allocated or deallocated pages resulting from failure during allocation or deallocation of pages; (2) erroneous file attributes contained in a file Inode; (3) inconsistent pages from the file system resulting from failure during a transaction that requires multiple flush operations to record updates, such as updates that span multiple disk blocks (directory updates and fileset operations); (4) Inode directory errors resulting from failures of single page and multiple page updates; (5) inconsistency between file attributes as stored in the Inode and file attributes as stored in a file's Inode and a file's directory entry resulting from a failure during the synchronization process.
- GDD global disk directory
- File system transactions involving GDD updates are transactions that include allocation, deallocation, and unallocation, i.e., freeing disk space while keeping address space reserved, operations. These transactions require that the state of the pages being allocated are updated in the file system metadata structures and also require the invocation of GDD allocation, deallocation, or unallocation functions. In order to perform these functions in a manner to allows the file system to recover from a node failure, file system pages must be associated with a recovery handle, which is transmitted to the GDD when the page is allocated.
- the recovery handle is any identification entity that uniquely identifies a page such as the file system object identification code.
- the file system provides a call back routine that can be invoked by the GDD to determine the current state of allocation of specified pages according to the file system. For allocation of pages, the file system must invoke the GDD allocation function before attempting the transaction. After the GJDD allocation successfully completes the file system may permanently record the allocation state. If the transaction fails to complete the GDD may have allocated pages that the file system will not recognize.
- the file system For deallocation or unallocation of pages, the file system must report permanently the deallocation or unallocation before invoking the GDD function to deallocate or unallocate the pages. If the transaction fails to complete, the GDD may end up with file system pages that the file system does not recognize.
- the GDD may call the file system to verify pages associated with the file system object ID.
- the GDD passes to the file system what it perceives the state of allocation to be.
- the file system searches its metadata structures to identify the pages and reports back to the GDD only if it disagrees with the GDD.
- File Inode updates require updating metadata information contained in the file's Inode. These attributes may include file time stamps, file flags, and the end of file mark. Attributes may be updated directly by various set file attributes operations or, as in the case of time stamps, they may be set indirectly as part of other file system operations. Since the Inode does not span disk blocks, i.e., the Inode occupies a single page, the update either succeeds completely or fails completely. Accordingly, the file system will not detect inconsistency in the file system metadata. This is true for file size updates also because, even though file size of a primary stream is stored in both the file Inode and the data stream descriptor, both of these metadata structures reside on the same page in the same disk block.
- the file system metadata updates that span multiple pages include directory entry updates, such as create file or directory, delete file or directory, and rename file or directory, file set updates (such as creation and deletion, or super root updates or creations). Each of these multiple page metadata updates is vulnerable to node failure during the transaction and each must be handled in a specific manner.
- Directory entry insertion and deletion can require multiple flushes involving multiple pages.
- the addition or deletion of a file may affect a page containing the entry, the pages containing the previous and the next entries in the list, and the Inode page containing the name hash table.
- directory entry insertion if no free slot can be found in existing directory pages, then a new entry page will be allocated.
- a transaction to insert or delete a directory entry must first mark the directory Inode with the type of transaction. Marks may include: create; create -- directory; rename; rename target; and delete. The Inode number of the file being inserted or removed is also stored in the directory Inode. The directory Inode is then flushed, which marks the beginning of the update transaction.
- the directory Inode is updated with the entry modifications, along with the pages containing the previous and next entries in the sort and hash list and the hash table Inode page. These may occur in parallel.
- the transaction mark in the directory Inode is then cleared and the Inode written out. This marks the end of the transaction.
- a directory Inode page that has a transaction mark indicates that the directory was the target of an incomplete transaction and the directory needs to be recovered.
- the file system recovers directory Inode pages by invoking a function that verifies and repairs individual directories. The functions should check and repair any inconsistencies found in the directory, such as broken sort/hash linked lists, inconsistent free block linked lists, or incorrect hash table bucket entries.
- the directory should be marked as corrupt and future access to the directory should be denied. Otherwise, the file entry Inode number is extracted from the transaction mark and connectivity to the Inode is verified. Once verified, the transaction mark in the directory Inode is cleared and the directory Inode page is flushed. This marks the end of recovery.
- File creation and directory creation involves allocation of new Inode pages and, for directories, allocation of the first directory entry page, and the subsequent insertion of the new file or directory into the parent directory.
- the file system implements file or directory creation by first calling the Inode directory function to return a new Inode.
- the transaction is marked in the parent directory Inode and flushed. All data structure updates are performed under this transaction mark. Once these updates are flushed, the transaction mark in the directory Inode is cleared.
- a transaction mark found in the parent Inode indicates that a node failure occurred during a transaction.
- the file or directory Inode is located using the transaction mark contained in the parent directory Inode.
- the parent directory is recovered in a manner similar described above, but the parent Inode transaction mark is not immediately cleared. If the parent directory can be repaired or is consistent and the new file Inode or the new directory Inode is apparent from the transaction mark, then the transaction mark is cleared in the parent Inode and flushed. In this case, the transaction is complete. Otherwise, the file system must undo the transaction.
- the file system To undo the transaction, the file system must determine if the transaction is a create directory or create file transaction. If the failed transaction was for the creation of a directory and the file system has the pointer to the directory entry page in the Inode page, then it may simple deallocate the directory entry page. Otherwise, the file system must call the Inode directory function to free the Inode, remove the entry from the parent directory if an entry has been created, and then clear the transaction mark from the parent Inode and flush it.
- File deletion and directory deletion are performed in two phases. In brief overview, the file or directory is first marked for deletion and its entries removed from the parent directory. Then, when all open handles to the file or the directory have been closed, it is physically deleted.
- a file system should, during the mark for delete phase, set a transaction mark in the file Inode or the directory Inode to indicate that it is being deleted. The Inode is then flushed. The file entry or directory entry is then removed from the parent directory using the general method described above. The transaction mark set in the parent Inode indicates that a deletion transaction is occurring. Since directory look up for the file will now fail, no new file handles can be opened. However, existing handles may still be used to access the file or directory.
- Inodes are allocated and deallocated from the global pool in groups, for performance and scaling reasons. However Inodes may be allocated and deallocated singly. If a parent directory Inode or a file/directory Inode is found with a transaction mark indicating an incomplete delete transaction, then the deletion must be recovered.
- the Inode of the file/directory being deleted must be located using the transaction mark in the parent Inode. If the file/directory Inode indicates that the target of the delete is a directory, all directory entry pages must be deallocated. The Inode is returned to the local pool, for later disposition. Once the removal of the file/directory's entry has been verified, the parent Inode's transaction mark may be cleared and the parent Inode can be flushed. This step completes the recovery of the deletion.
- a rename operation is effected by performing an insert to a new directory and a delete from an old directory. However, the insertion transaction is not cleared until both the insertion and deletion successfully complete. This allows the system to either "back out" of an unsuccessful rename operation or to complete the failed rename operation when it is encountered, depending on the amount of progress made before failure.
- Fileset creation and deletion also requires multiple page flushes which are vulnerable to a node failure during the transaction.
- Fileset creation involves the allocation and initialization of the new fileset page, the fileset's Inode directory, and the root directory.
- the file system must begin by allocating the necessary pages to initialize the fileset, the Inode directory, and the root directory. Root directory pages are allocated with the file system object ID pointing to the root directory and fileset related pages are initialized with the fileset ID only. Should a node fail at this point, the allocated pages will be lost. The super root is then updated to record the new fileset. If this step is successful, the fileset creation transaction is successful.
- a fileset deletion operation will deallocate the fileset page, the Inode directory, and the root directory. This transaction begins by marking the fileset as the target of a delete transaction. The fileset page is flushed and the root directory is deleted. Once the root directory is deleted, all free Inodes are deallocated and this step may be repeated as many times as necessary. The super root is then updated to remove the fileset from the super root's set of filesets. Should a node fail at this time, the fileset page will be lost but can be recovered via the GDD callback mechanism. The fileset deletion is completed by deleting the fileset pages.
- the Inode directory is a set of persistent data structures used to track all the Inodes in a fileset. Using the Inode directory, the file system can locate any Inode in the fileset.
- the Inode directory contains two major components (1) the free Inode list and (2) the Inode bit map.
- file attributes are duplicated in the file Inode and its directory entry in order to improve the performance of directory queries, one of the most important performance measures in the file systems. Since any file attributes change must be propagated to both structures, the number of flushes required to update a file or directory may double. Since updates to the :node page and the directory entry page are separate, inconsistencies may arise between the two. Inconsistencies may be reduced by providing the Inode in the directory entry with a synchronization version number. The two are synchronized if they have the same synchronization version number. Whenever the Inode is updated, its synchronization version number is incremented.
- the directory entry page is locked and the file attributes in the Inode are copies to the directory entry, including the synchronization version number.
- the entry pages is not yet flushed, but the Inode page is flushed according to the strategies described above. If at this point a node fails, the directory entry in the Inode will not be in synchronization with each other. Once the Inode is flushed, the entry page is also flushed independently.
- the Inode synchronization version is compared with the directory entry's synchronization version. If they do not match, the directory entry is not synchronized with the :node entry and the directory entry must be updated.
Abstract
Description
Claims (14)
Priority Applications (7)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US08/848,967 US5909540A (en) | 1996-11-22 | 1997-05-02 | System and method for providing highly available data storage using globally addressable memory |
AU54611/98A AU5461198A (en) | 1996-11-22 | 1997-11-21 | System and method for providing highly available data storage using globally addressable memory |
JP52399698A JP2001504616A (en) | 1996-11-22 | 1997-11-21 | System and method for providing highly available data storage using globally addressable memory |
PCT/US1997/021734 WO1998022876A1 (en) | 1996-11-22 | 1997-11-21 | System and method for providing highly available data storage using globally addressable memory |
DE69724834T DE69724834T2 (en) | 1996-11-22 | 1997-11-21 | SYSTEM FOR HIGHLY AVAILABLE DATA STORAGE WITH GENERALLY ADDRESSED STORAGE |
AT97948567T ATE249640T1 (en) | 1996-11-22 | 1997-11-21 | HIGH AVAILABILITY DATA STORAGE SYSTEM WITH GENERAL ADDRESSED MEMORY |
EP97948567A EP1008047B1 (en) | 1996-11-22 | 1997-11-21 | System for providing highly available data storage using globally addressable memory |
Applications Claiming Priority (3)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US08/754,481 US6148377A (en) | 1996-11-22 | 1996-11-22 | Shared memory computer networks |
US08/827,534 US5918229A (en) | 1996-11-22 | 1997-03-28 | Structured data storage using globally addressable memory |
US08/848,967 US5909540A (en) | 1996-11-22 | 1997-05-02 | System and method for providing highly available data storage using globally addressable memory |
Related Parent Applications (2)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
US08/754,481 Continuation-In-Part US6148377A (en) | 1996-11-22 | 1996-11-22 | Shared memory computer networks |
US08/827,534 Continuation-In-Part US5918229A (en) | 1996-11-22 | 1997-03-28 | Structured data storage using globally addressable memory |
Publications (1)
Publication Number | Publication Date |
---|---|
US5909540A true US5909540A (en) | 1999-06-01 |
Family
ID=56289762
Family Applications (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
US08/848,967 Expired - Lifetime US5909540A (en) | 1996-11-22 | 1997-05-02 | System and method for providing highly available data storage using globally addressable memory |
Country Status (7)
Country | Link |
---|---|
US (1) | US5909540A (en) |
EP (1) | EP1008047B1 (en) |
JP (1) | JP2001504616A (en) |
AT (1) | ATE249640T1 (en) |
AU (1) | AU5461198A (en) |
DE (1) | DE69724834T2 (en) |
WO (1) | WO1998022876A1 (en) |
Cited By (320)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US5987506A (en) * | 1996-11-22 | 1999-11-16 | Mangosoft Corporation | Remote access and geographically distributed computers in a globally addressable storage environment |
US6026472A (en) * | 1997-06-24 | 2000-02-15 | Intel Corporation | Method and apparatus for determining memory page access information in a non-uniform memory access computer system |
US6035326A (en) * | 1997-05-07 | 2000-03-07 | International Business Machines Corporation | Mapping table lookup optimization system |
US6070174A (en) * | 1997-09-30 | 2000-05-30 | Infraworks Corporation | Method and apparatus for real-time secure file deletion |
WO2000034895A1 (en) * | 1998-12-10 | 2000-06-15 | Mci Worldcom, Inc. | Cluster-wide database system |
US6092213A (en) * | 1997-09-30 | 2000-07-18 | Tandem Computers Incorporated | Fault tolerant method of maintaining and distributing configuration information in a distributed processing system |
US6094663A (en) * | 1998-03-31 | 2000-07-25 | Apple Computer, Inc. | Method and apparatus for implementing atomic queues |
US6098179A (en) * | 1998-01-22 | 2000-08-01 | Digital Equipment Corporation | Method and apparatus for performing error detection |
US6128627A (en) * | 1998-04-15 | 2000-10-03 | Inktomi Corporation | Consistent data storage in an object cache |
US6144970A (en) * | 1998-09-24 | 2000-11-07 | International Business Machines Corporation | Technique for inplace reorganization of a LOB table space |
US6151683A (en) * | 1997-03-31 | 2000-11-21 | Sun Microsystems, Inc. | Rebuilding computer states remotely |
US6154128A (en) * | 1997-05-21 | 2000-11-28 | Sun Microsystems, Inc. | Automatic building and distribution of alerts in a remote monitoring system |
US6163806A (en) * | 1997-06-30 | 2000-12-19 | Sun Microsystems, Inc. | System and method for transparent, global access to physical devices on a computer cluster |
US6163856A (en) * | 1998-05-29 | 2000-12-19 | Sun Microsystems, Inc. | Method and apparatus for file system disaster recovery |
US6170045B1 (en) * | 1997-04-30 | 2001-01-02 | International Business Machines Corporation | Cross-system data piping using an external shared memory |
US6173413B1 (en) * | 1998-05-12 | 2001-01-09 | Sun Microsystems, Inc. | Mechanism for maintaining constant permissions for multiple instances of a device within a cluster |
US6182249B1 (en) | 1997-05-12 | 2001-01-30 | Sun Microsystems, Inc. | Remote alert monitoring and trend analysis |
US6192514B1 (en) * | 1997-02-19 | 2001-02-20 | Unisys Corporation | Multicomputer system |
US6202124B1 (en) * | 1998-05-05 | 2001-03-13 | International Business Machines Corporation | Data storage system with outboard physical data transfer operation utilizing data path distinct from host |
US6202149B1 (en) | 1998-09-30 | 2001-03-13 | Ncr Corporation | Automated application fail-over for coordinating applications with DBMS availability |
US6222529B1 (en) | 1999-05-05 | 2001-04-24 | Shareware, Inc. | Method and apparatus for providing multiple sessions on a single user operating system |
US6230246B1 (en) * | 1998-01-30 | 2001-05-08 | Compaq Computer Corporation | Non-intrusive crash consistent copying in distributed storage systems without client cooperation |
US6237114B1 (en) | 1998-05-13 | 2001-05-22 | Sun Microsystems, Inc. | System and method for evaluating monitored computer systems |
US6249802B1 (en) * | 1997-09-19 | 2001-06-19 | Silicon Graphics, Inc. | Method, system, and computer program product for allocating physical memory in a distributed shared memory network |
US6263433B1 (en) * | 1998-09-30 | 2001-07-17 | Ncr Corporation | Provision of continuous database service and scalable query performance using active redundant copies |
US6279032B1 (en) * | 1997-11-03 | 2001-08-21 | Microsoft Corporation | Method and system for quorum resource arbitration in a server cluster |
WO2001061491A1 (en) * | 2000-02-18 | 2001-08-23 | Avamar Technologies, Inc. | System and method for data protection with multidimensional parity |
US20010020281A1 (en) * | 2000-02-11 | 2001-09-06 | Jochen Retter | Electronic control system |
US6289424B1 (en) | 1997-09-19 | 2001-09-11 | Silicon Graphics, Inc. | Method, system and computer program product for managing memory in a non-uniform memory access system |
US6289358B1 (en) | 1998-04-15 | 2001-09-11 | Inktomi Corporation | Delivering alternate versions of objects from an object cache |
US20010027467A1 (en) * | 2000-03-30 | 2001-10-04 | Anderson David P. | Massively distributed database system and associated method |
US20010034795A1 (en) * | 2000-02-18 | 2001-10-25 | Moulton Gregory Hagan | System and method for intelligent, globally distributed network storage |
US20010044879A1 (en) * | 2000-02-18 | 2001-11-22 | Moulton Gregory Hagan | System and method for distributed management of data storage |
US20010047348A1 (en) * | 2000-02-01 | 2001-11-29 | Lemuel Davis | Consumer driven content media duplication system |
US6330709B1 (en) * | 1998-03-30 | 2001-12-11 | International Business Machines Corporation | Virtual machine implementation for shared persistent objects |
US6330567B1 (en) * | 1998-08-13 | 2001-12-11 | Tornado Technologies Co., Ltd | Searching system for searching files stored in a hard disk of a personal computer |
US20020000991A1 (en) * | 2000-06-30 | 2002-01-03 | Arto Lehtonen | Method and system for displaying markup language based pages on handheld devices |
US20020007366A1 (en) * | 2000-06-09 | 2002-01-17 | Fontijn Wilhelmus Franciscus Johannes | Method of implicit partitioning the storage space available on a storage medium |
US20020055972A1 (en) * | 2000-05-08 | 2002-05-09 | Weinman Joseph Bernard | Dynamic content distribution and data continuity architecture |
US6389551B1 (en) * | 1998-12-17 | 2002-05-14 | Steeleye Technology, Inc. | Method of preventing false or unnecessary failovers in a high availability cluster by using a quorum service |
US6401120B1 (en) | 1999-03-26 | 2002-06-04 | Microsoft Corporation | Method and system for consistent cluster operational data in a server cluster using a quorum of replicas |
US6405217B1 (en) * | 1998-09-21 | 2002-06-11 | Microsoft Corporation | State-based implementation of transactions on a file system |
US20020078445A1 (en) * | 2000-07-11 | 2002-06-20 | Imran Sharif | Internet appliance for interactive audio/video display using a remote control unit for user input |
US20020083120A1 (en) * | 2000-12-22 | 2002-06-27 | Soltis Steven R. | Storage area network file system |
US20020101620A1 (en) * | 2000-07-11 | 2002-08-01 | Imran Sharif | Fax-compatible Internet appliance |
US6434626B1 (en) * | 1999-01-14 | 2002-08-13 | Compaq Information Technologies Group, L.P. | Method and apparatus for low latency network performance monitoring |
US6453319B1 (en) | 1998-04-15 | 2002-09-17 | Inktomi Corporation | Maintaining counters for high performance object cache |
US6453426B1 (en) | 1999-03-26 | 2002-09-17 | Microsoft Corporation | Separately storing core boot data and cluster configuration data in a server cluster |
US20020133655A1 (en) * | 2001-03-16 | 2002-09-19 | Ohad Falik | Sharing of functions between an embedded controller and a host processor |
US20020138722A1 (en) * | 2001-03-26 | 2002-09-26 | Douceur John R. | Encrypted key cache |
US6460071B1 (en) * | 1997-11-21 | 2002-10-01 | International Business Machines Corporation | System and method for managing client application state in a stateless web browser environment |
US20020156840A1 (en) * | 2001-01-29 | 2002-10-24 | Ulrich Thomas R. | File system metadata |
US20020174295A1 (en) * | 2001-01-29 | 2002-11-21 | Ulrich Thomas R. | Enhanced file system failure tolerance |
US20020194484A1 (en) * | 2001-03-21 | 2002-12-19 | Bolosky William J. | On-disk file format for serverless distributed file system with signed manifest of file modifications |
US20030009449A1 (en) * | 2001-06-21 | 2003-01-09 | International Business Machines Corporation | System and method for managing file export information |
US20030009528A1 (en) * | 2001-07-08 | 2003-01-09 | Imran Sharif | System and method for using an internet appliance to send/receive digital content files as E-mail attachments |
US6505382B1 (en) | 1999-05-14 | 2003-01-14 | Apple Computer, Inc. | Hinge apparatus with cam mechanism |
US20030014433A1 (en) * | 2001-07-13 | 2003-01-16 | Sun Microsystems, Inc. | Storage network data replicator |
US6516325B1 (en) * | 1999-11-16 | 2003-02-04 | Novell, Inc. | Virtual partition vector for a computer directory system |
US20030033543A1 (en) * | 2000-03-30 | 2003-02-13 | United Devices, Inc. | Massively distributed processing system with modular client agent and associated method |
US20030037094A1 (en) * | 2001-06-06 | 2003-02-20 | Douceur John R. | Locating potentially identical objects across multiple computers based on stochastic partitioning of workload |
US20030037022A1 (en) * | 2001-06-06 | 2003-02-20 | Atul Adya | Locating potentially identical objects across multiple computers |
EP1290556A1 (en) * | 2000-06-16 | 2003-03-12 | Bull HN Information Systems Inc. | Fast relief swapping of processors in a data processing system |
WO2003025801A1 (en) * | 2001-09-21 | 2003-03-27 | Polyserve, Inc. | System and method for implementing journaling in a multi-node environment |
US20030065782A1 (en) * | 2001-09-28 | 2003-04-03 | Gor Nishanov | Distributed system resource protection via arbitration and ownership |
US6546404B1 (en) * | 2000-01-29 | 2003-04-08 | International Business Machines Corporation | Data migration tool |
US6549949B1 (en) | 1999-08-31 | 2003-04-15 | Accenture Llp | Fixed format stream in a communication services patterns environment |
US6567774B1 (en) * | 1998-01-30 | 2003-05-20 | Compaq Computer Corporation | Method and system for configuring and updating networked client stations using a virtual disk and a snapshot disk |
US6571282B1 (en) | 1999-08-31 | 2003-05-27 | Accenture Llp | Block-based communication in a communication services patterns environment |
US6578068B1 (en) | 1999-08-31 | 2003-06-10 | Accenture Llp | Load balancer in environment services patterns |
US20030115167A1 (en) * | 2000-07-11 | 2003-06-19 | Imran Sharif | Web browser implemented in an Internet appliance |
EP1321865A2 (en) * | 2001-12-19 | 2003-06-25 | Alcatel Canada Inc. | System and method for multiple-threaded access to a database |
US20030126118A1 (en) * | 2002-01-02 | 2003-07-03 | International Business Machines Corporation | Method, system and program for direct client file access in a data management system |
US6601234B1 (en) * | 1999-08-31 | 2003-07-29 | Accenture Llp | Attribute dictionary in a business logic services environment |
US6601192B1 (en) | 1999-08-31 | 2003-07-29 | Accenture Llp | Assertion component in environment services patterns |
US20030149765A1 (en) * | 2000-03-30 | 2003-08-07 | Hubbard Edward A. | Dynamic coordination and control of network connected devices for large-scale network site testing and associated architectures |
US20030149761A1 (en) * | 2001-10-05 | 2003-08-07 | Baldwin Duane Mark | Storage area network methods and apparatus using event notifications with data |
US6606690B2 (en) * | 2001-02-20 | 2003-08-12 | Hewlett-Packard Development Company, L.P. | System and method for accessing a storage area network as network attached storage |
US6609215B1 (en) | 1999-10-21 | 2003-08-19 | International Business Machines Corporation | Method and system for implementing network filesystem-based customized computer system automated rebuild tool |
US6611848B1 (en) * | 2000-09-13 | 2003-08-26 | Radiant Data Corporation | Methods for maintaining data and attribute coherency in instances of sharable files |
US6615253B1 (en) | 1999-08-31 | 2003-09-02 | Accenture Llp | Efficient server side data retrieval for execution of client side applications |
US20030167327A1 (en) * | 2001-10-05 | 2003-09-04 | Baldwin Duane Mark | Storage area network methods and apparatus for topology rendering |
US20030182264A1 (en) * | 2002-03-20 | 2003-09-25 | Wilding Mark F. | Dynamic cluster database architecture |
US6633870B1 (en) * | 2000-09-13 | 2003-10-14 | Radiant Data Corporation | Protocols for locking sharable files and methods for carrying out the protocols |
US20030195903A1 (en) * | 2002-03-19 | 2003-10-16 | Manley Stephen L. | System and method for asynchronous mirroring of snapshots at a destination using a purgatory directory and inode mapping |
US6636242B2 (en) | 1999-08-31 | 2003-10-21 | Accenture Llp | View configurer in a presentation services patterns environment |
US6640249B1 (en) | 1999-08-31 | 2003-10-28 | Accenture Llp | Presentation services patterns in a netcentric environment |
US6640244B1 (en) | 1999-08-31 | 2003-10-28 | Accenture Llp | Request batcher in a transaction services patterns environment |
US6640238B1 (en) | 1999-08-31 | 2003-10-28 | Accenture Llp | Activity component in a presentation services patterns environment |
US6654783B1 (en) | 2000-03-30 | 2003-11-25 | Ethergent Corporation | Network site content indexing method and associated system |
WO2003098447A1 (en) * | 2002-04-29 | 2003-11-27 | Meshnetworks, Inc. | A system and method for creating a graphical view of a network from a node's perspective |
US6658587B1 (en) | 2000-01-10 | 2003-12-02 | Sun Microsystems, Inc. | Emulation of persistent group reservations |
US6662219B1 (en) | 1999-12-15 | 2003-12-09 | Microsoft Corporation | System for determining at subgroup of nodes relative weight to represent cluster by obtaining exclusive possession of quorum resource |
EP1370945A1 (en) * | 2001-02-13 | 2003-12-17 | Candera, Inc. | Failover processing in a storage system |
US20030233389A1 (en) * | 2002-06-18 | 2003-12-18 | Microsoft Corporation | System and method for decoupling space reservation in transactional logs |
US20040001476A1 (en) * | 2002-06-24 | 2004-01-01 | Nayeem Islam | Mobile application environment |
US20040006565A1 (en) * | 2002-07-08 | 2004-01-08 | International Business Machines Corporation | Method, apparatus and computer program product for mapping file handles |
US6687716B1 (en) * | 2000-09-13 | 2004-02-03 | Radiant Data Corporation | File consistency protocols and methods for carrying out the protocols |
US6697846B1 (en) * | 1998-03-20 | 2004-02-24 | Dataplow, Inc. | Shared file system |
US20040054644A1 (en) * | 2002-09-16 | 2004-03-18 | Oracle Corporation | Method and mechanism for implementing in-memory transaction logging records |
US6715145B1 (en) | 1999-08-31 | 2004-03-30 | Accenture Llp | Processing pipeline in a base services pattern environment |
US20040064527A1 (en) * | 1998-06-30 | 2004-04-01 | Jean Brunet | Agent for communication between a manager and at least one resource, and tool library for creating the agent |
US20040066741A1 (en) * | 2002-09-23 | 2004-04-08 | Darpan Dinker | System and method for performing a cluster topology self-healing process in a distributed data system cluster |
US20040068523A1 (en) * | 2002-10-07 | 2004-04-08 | Keith Robert Olan | Method and system for full asynchronous master-to-master file synchronization |
US20040078649A1 (en) * | 2002-05-14 | 2004-04-22 | Nec Corporation | Computer system |
US20040088573A1 (en) * | 2002-10-31 | 2004-05-06 | Prabahar Jeyaram | Method and apparatus for providing dynamic locks for global resources |
US6742015B1 (en) | 1999-08-31 | 2004-05-25 | Accenture Llp | Base services patterns in a netcentric environment |
US20040103139A1 (en) * | 2000-03-30 | 2004-05-27 | United Devices, Inc. | Distributed processing system having sensor based data collection and associated method |
US6748429B1 (en) | 2000-01-10 | 2004-06-08 | Sun Microsystems, Inc. | Method to dynamically change cluster or distributed system configuration |
US20040122873A1 (en) * | 2002-12-20 | 2004-06-24 | International Business Machines Corporation | Free space management |
US6757836B1 (en) | 2000-01-10 | 2004-06-29 | Sun Microsystems, Inc. | Method and apparatus for resolving partial connectivity in a clustered computing system |
US6760756B1 (en) * | 1999-06-23 | 2004-07-06 | Mangosoft Corporation | Distributed virtual web cache implemented entirely in software |
US6769008B1 (en) | 2000-01-10 | 2004-07-27 | Sun Microsystems, Inc. | Method and apparatus for dynamically altering configurations of clustered computer systems |
US20040148589A1 (en) * | 2002-11-27 | 2004-07-29 | Michael Conrad | Method and software for processing data objects in business applications |
US20040148336A1 (en) * | 2000-03-30 | 2004-07-29 | Hubbard Edward A | Massively distributed processing system architecture, scheduling, unique device identification and associated methods |
US20040148447A1 (en) * | 2002-11-27 | 2004-07-29 | Michael Conrad | Method and software application for avoiding data loss |
US20040148495A1 (en) * | 2001-06-05 | 2004-07-29 | Infineon Technologies Ag | Processor with internal memory configuration |
US20040153480A1 (en) * | 2002-11-27 | 2004-08-05 | Michael Conrad | Computerized replication of data objects |
US20040153841A1 (en) * | 2003-01-16 | 2004-08-05 | Silicon Graphics, Inc. | Failure hierarchy in a cluster filesystem |
US6789122B1 (en) * | 1998-05-12 | 2004-09-07 | Sun Microsystems, Inc. | Mechanism for reliable update of virtual disk device mappings without corrupting data |
US6789213B2 (en) * | 2000-01-10 | 2004-09-07 | Sun Microsystems, Inc. | Controlled take over of services by remaining nodes of clustered computing system |
US20040193673A1 (en) * | 2003-03-27 | 2004-09-30 | Mohammed Samji | System and method for sharing items in a computer system |
US20040193564A1 (en) * | 2003-03-27 | 2004-09-30 | M-Systems Flash Disk Pioneers, Ltd. | Robust, self-maintaining file system |
US20040189694A1 (en) * | 2003-03-24 | 2004-09-30 | Kurtz James Brian | System and method for user modification of metadata in a shell browser |
KR100453228B1 (en) * | 2002-03-21 | 2004-10-15 | 한국전자통신연구원 | Journaling and recovery method for shared disk file system |
GB2373902B (en) * | 1999-12-21 | 2004-10-20 | Intel Corp | Architecture for dynamically exposing hardware capabilities using a page description language |
EP1469380A2 (en) | 2003-04-16 | 2004-10-20 | Hitachi, Ltd. | Storage device control apparatus and control method therefor |
US20040215829A1 (en) * | 2000-03-30 | 2004-10-28 | United Devices, Inc. | Data conversion services and associated distributed processing system |
US20040220981A1 (en) * | 1999-12-20 | 2004-11-04 | Taylor Kenneth J | System and method for a backup parallel server data storage system |
US20040236798A1 (en) * | 2001-09-11 | 2004-11-25 | Sudhir Srinivasan | Migration of control in a distributed segmented file system |
US6842906B1 (en) | 1999-08-31 | 2005-01-11 | Accenture Llp | System and method for a refreshable proxy pool in a communication services patterns environment |
US20050010664A1 (en) * | 2000-03-30 | 2005-01-13 | United Devices, Inc. | Method of managing workloads and associated distributed processing system |
US6847995B1 (en) | 2000-03-30 | 2005-01-25 | United Devices, Inc. | Security architecture for distributed processing systems and associated method |
US20050027829A1 (en) * | 2003-07-31 | 2005-02-03 | International Business Machines Corporation | Dynamically configurable fault tolerance in autonomic computing with multiple service points |
US20050027746A1 (en) * | 2001-06-18 | 2005-02-03 | Microsoft Corporation | Selective file purging for delete or rename |
US6856993B1 (en) * | 2000-03-30 | 2005-02-15 | Microsoft Corporation | Transactional file system |
US20050044092A1 (en) * | 2001-03-26 | 2005-02-24 | Microsoft Corporation | Serverless distributed file system |
US20050044301A1 (en) * | 2003-08-20 | 2005-02-24 | Vasilevsky Alexander David | Method and apparatus for providing virtual computing services |
US6862613B1 (en) | 2000-01-10 | 2005-03-01 | Sun Microsystems, Inc. | Method and apparatus for managing operations of clustered computer systems |
US6862668B2 (en) | 2002-02-25 | 2005-03-01 | International Business Machines Corporation | Method and apparatus for using cache coherency locking to facilitate on-line volume expansion in a multi-controller storage system |
US20050050398A1 (en) * | 2003-08-27 | 2005-03-03 | International Business Machines Corporation | Reliable fault resolution in a cluster |
US20050066184A1 (en) * | 2001-01-17 | 2005-03-24 | Microsoft Corporation | Exclusive encryption |
US6873987B1 (en) * | 2000-05-31 | 2005-03-29 | International Business Machines Corporation | Method, system and program products for recovering from failures within a shared nothing distributed computing environment |
US20050080982A1 (en) * | 2003-08-20 | 2005-04-14 | Vasilevsky Alexander D. | Virtual host bus adapter and method |
US20050086324A1 (en) * | 2003-10-20 | 2005-04-21 | Lg Electronics Inc. | Network system and method of sharing memory of electronic appliance using the same |
US6886162B1 (en) * | 1997-08-29 | 2005-04-26 | International Business Machines Corporation | High speed methods for maintaining a summary of thread activity for multiprocessor computer systems |
US20050097318A1 (en) * | 2001-03-21 | 2005-05-05 | Microsoft Corporation | On-disk file format for a serverless distributed file system |
US20050097142A1 (en) * | 2003-10-30 | 2005-05-05 | International Business Machines Corporation | Method and apparatus for increasing efficiency of data storage in a file system |
US6891802B1 (en) | 2000-03-30 | 2005-05-10 | United Devices, Inc. | Network site testing method and associated system |
US20050120173A1 (en) * | 2003-11-27 | 2005-06-02 | Nobuyuki Minowa | Device and method for performing information processing using plurality of processors |
US20050120160A1 (en) * | 2003-08-20 | 2005-06-02 | Jerry Plouffe | System and method for managing virtual servers |
US20050132249A1 (en) * | 2003-12-16 | 2005-06-16 | Burton David A. | Apparatus method and system for fault tolerant virtual memory management |
US20050144514A1 (en) * | 2001-01-29 | 2005-06-30 | Ulrich Thomas R. | Dynamic redistribution of parity groups |
US20050144178A1 (en) * | 2000-09-12 | 2005-06-30 | Chrin David M. | Distributing files across multiple, permissibly heterogeneous, storage devices |
US20050149532A1 (en) * | 2000-03-30 | 2005-07-07 | United Devices, Inc. | Customer services and advertising based upon device attributes and associated distributed processing system |
US6928521B1 (en) | 2000-08-01 | 2005-08-09 | International Business Machines Corporation | Method, system, and data structures for using metadata in updating data in a storage device |
US20050185597A1 (en) * | 2004-02-20 | 2005-08-25 | Le Cuong M. | Method, system, and program for checking and repairing a network configuration |
WO2005081453A1 (en) * | 2004-02-25 | 2005-09-01 | Nhn Corporation | Nonstop service system using voting and, information updating and providing method in the same |
US20050209991A1 (en) * | 2004-03-22 | 2005-09-22 | Microsoft Corporation | Computing device with relatively limited storage space and operating / file system thereof |
US6954220B1 (en) | 1999-08-31 | 2005-10-11 | Accenture Llp | User context component in environment services patterns |
US20050271061A1 (en) * | 2004-06-04 | 2005-12-08 | Lu Nguyen | Method and system for communicating in a computing system |
US6978280B1 (en) * | 2000-10-12 | 2005-12-20 | Hewlett-Packard Development Company, L.P. | Method and system for improving LUN-based backup reliability |
US20050283645A1 (en) * | 2004-06-03 | 2005-12-22 | Turner Bryan C | Arrangement for recovery of data by network nodes based on retrieval of encoded data distributed among the network nodes |
US20060004846A1 (en) * | 2004-06-16 | 2006-01-05 | Bmc Software, Inc. | Low-overhead relational database backup and restore operations |
US20060010150A1 (en) * | 1999-05-18 | 2006-01-12 | Kom, Inc. | Method and System for Electronic File Lifecycle Management |
US20060031653A1 (en) * | 2004-08-04 | 2006-02-09 | Emc Corporation | Methods and apparatus for accessing content in a virtual pool on a content addressable storage system |
US20060031287A1 (en) * | 2001-01-29 | 2006-02-09 | Ulrich Thomas R | Systems and methods for load balancing drives and servers |
US7003547B1 (en) | 2000-03-30 | 2006-02-21 | United Devices, Inc. | Distributed parallel processing system having capability-based incentives and associated method |
US20060041619A1 (en) * | 2004-08-19 | 2006-02-23 | International Business Machines Corporation | System and method for an on-demand peer-to-peer storage virtualization infrastructure |
US7020678B1 (en) | 2000-03-30 | 2006-03-28 | United Devices, Inc. | Machine generated sweepstakes entry model and associated distributed processing system |
US7020665B2 (en) | 2002-03-07 | 2006-03-28 | Microsoft Corporation | File availability in distributed file storage systems |
US20060080514A1 (en) * | 2004-10-08 | 2006-04-13 | International Business Machines Corporation | Managing shared memory |
US20060085428A1 (en) * | 2004-10-01 | 2006-04-20 | Microsoft Corporation | System and method for determining target failback and target priority for a distributed file system |
US20060090095A1 (en) * | 1999-03-26 | 2006-04-27 | Microsoft Corporation | Consistent cluster operational data in a server cluster using a quorum of replicas |
US20060129981A1 (en) * | 2004-12-14 | 2006-06-15 | Jan Dostert | Socket-like communication API for Java |
US20060129546A1 (en) * | 2004-12-14 | 2006-06-15 | Bernhard Braun | Fast channel architecture |
US20060143595A1 (en) * | 2004-12-28 | 2006-06-29 | Jan Dostert | Virtual machine monitoring using shared memory |
US20060143525A1 (en) * | 2004-12-28 | 2006-06-29 | Frank Kilian | Shared memory based monitoring for application servers |
US20060143359A1 (en) * | 2004-12-28 | 2006-06-29 | Jan Dostert | Virtual machine monitoring |
US7082474B1 (en) | 2000-03-30 | 2006-07-25 | United Devices, Inc. | Data sharing and file distribution method and associated distributed processing system |
US20060253504A1 (en) * | 2005-05-04 | 2006-11-09 | Ken Lee | Providing the latest version of a data item from an N-replica set |
US7139885B2 (en) | 2001-12-27 | 2006-11-21 | Hitachi, Ltd. | Method and apparatus for managing storage based replication |
US20060288080A1 (en) * | 2000-09-12 | 2006-12-21 | Ibrix, Inc. | Balanced computer architecture |
US20070022091A1 (en) * | 2005-07-20 | 2007-01-25 | Scriptlogic Corporation | Access based file system directory enumeration |
US20070162525A1 (en) * | 2006-01-11 | 2007-07-12 | Fujitsu Limited | File delete method, file open method, storage medium storing file delete program, and storage medium storing file open program |
US7245291B2 (en) | 2000-07-11 | 2007-07-17 | Imran Sharif | System and method for internet appliance data entry and navigation |
US20070203925A1 (en) * | 2002-05-17 | 2007-08-30 | Aleri, Inc. | Database system and methods |
US7272609B1 (en) * | 2004-01-12 | 2007-09-18 | Hyperion Solutions Corporation | In a distributed hierarchical cache, using a dependency to determine if a version of the first member stored in a database matches the version of the first member returned |
US7284018B1 (en) * | 2003-10-15 | 2007-10-16 | Sun Microsystems, Inc. | Logless transaction coordination |
US7289964B1 (en) | 1999-08-31 | 2007-10-30 | Accenture Llp | System and method for transaction services patterns in a netcentric environment |
US20080005199A1 (en) * | 2006-06-30 | 2008-01-03 | Microsoft Corporation | Collection-Based Object Replication |
US7406484B1 (en) | 2000-09-12 | 2008-07-29 | Tbrix, Inc. | Storage allocation in a distributed segmented file system |
US7409412B2 (en) | 2002-11-27 | 2008-08-05 | Sap Ag | Data element and structure for data processing |
US20080222547A1 (en) * | 2004-04-29 | 2008-09-11 | Microsoft Corporation | Save Preview Representation of Files Being Created |
US20080256231A1 (en) * | 2007-04-11 | 2008-10-16 | Rodney Carlton Burnett | Method for maintaining state consistency among multiple state-driven file system entities when entities become disconnected |
US20080288531A1 (en) * | 2004-04-29 | 2008-11-20 | Microsoft Corporation | Metadata editing control |
US7480909B2 (en) | 2002-02-25 | 2009-01-20 | International Business Machines Corporation | Method and apparatus for cooperative distributed task management in a storage subsystem with multiple controllers using cache locking |
US20090037584A1 (en) * | 2007-07-31 | 2009-02-05 | Lenovo (Singapore) Pte. Ltd. | Methods of creating a voting stop point on a distributed network |
US20090063807A1 (en) * | 2007-08-29 | 2009-03-05 | International Business Machines Corporation | Data redistribution in shared nothing architecture |
US20090125669A1 (en) * | 2007-11-13 | 2009-05-14 | Ratnesh Gupta | Preventing data loss in a storage system |
US20090132649A1 (en) * | 2000-03-30 | 2009-05-21 | Niration Network Group, L.L.C. | Method of Managing Workloads and Associated Distributed Processing System |
US20090171983A1 (en) * | 2003-03-27 | 2009-07-02 | Microsoft Corporation | System and method for virtual folder sharing including utilization of static and dynamic lists |
WO2009087413A1 (en) * | 2008-01-08 | 2009-07-16 | Taptu Ltd. | Data storage |
US20090193346A1 (en) * | 2008-01-30 | 2009-07-30 | International Business Machines Corporation | Apparatus and method to improve a graphical user interface |
US20090193110A1 (en) * | 2005-05-05 | 2009-07-30 | International Business Machines Corporation | Autonomic Storage Provisioning to Enhance Storage Virtualization Infrastructure Availability |
US7574461B1 (en) * | 2005-12-28 | 2009-08-11 | Emc Corporation | Dividing data for multi-thread backup |
US7580915B2 (en) | 2004-12-14 | 2009-08-25 | Sap Ag | Socket-like communication API for C |
US20090222508A1 (en) * | 2000-03-30 | 2009-09-03 | Hubbard Edward A | Network Site Testing |
US7614016B2 (en) | 2005-04-21 | 2009-11-03 | Microsoft Corporation | Multiple roots in navigation pane |
US7627552B2 (en) | 2003-03-27 | 2009-12-01 | Microsoft Corporation | System and method for filtering and organizing items based on common elements |
US7631066B1 (en) * | 2002-03-25 | 2009-12-08 | Symantec Operating Corporation | System and method for preventing data corruption in computer system clusters |
US20090307440A1 (en) * | 2008-06-06 | 2009-12-10 | International Business Machines Corporation | Transparent Hypervisor Pinning of Critical Memory Areas in a Shared Memory Partition Data Processing System |
US20100011242A1 (en) * | 2008-07-10 | 2010-01-14 | Hitachi, Ltd. | Failover method and system for a computer system having clustering configuration |
US7650575B2 (en) | 2003-03-27 | 2010-01-19 | Microsoft Corporation | Rich drag drop user interface |
US20100017456A1 (en) * | 2004-08-19 | 2010-01-21 | Carl Phillip Gusler | System and Method for an On-Demand Peer-to-Peer Storage Virtualization Infrastructure |
US7657846B2 (en) | 2004-04-23 | 2010-02-02 | Microsoft Corporation | System and method for displaying stack icons |
US20100036723A1 (en) * | 2000-03-30 | 2010-02-11 | Hubbard Edward A | Sweepstakes Incentive Model and Associated System |
US20100049921A1 (en) * | 2008-08-25 | 2010-02-25 | International Business Machines Corporation | Distributed Shared Caching for Clustered File Systems |
US20100057985A1 (en) * | 2008-08-27 | 2010-03-04 | Hitachi, Ltd. | System and method for allocating performance to data volumes on data storage systems and controlling performance of data volumes |
US7689715B1 (en) * | 2002-12-20 | 2010-03-30 | Symantec Operating Corporation | Method and system for implementing a global name space service |
US7689989B2 (en) | 2004-12-28 | 2010-03-30 | Sap Ag | Thread monitoring using shared memory |
US7694236B2 (en) | 2004-04-23 | 2010-04-06 | Microsoft Corporation | Stack icons representing multiple objects |
US7693889B1 (en) | 2005-12-28 | 2010-04-06 | Emc Corporation | Automated backup and recovery for content repository |
US7693880B1 (en) * | 2004-05-06 | 2010-04-06 | Symantec Operating Corporation | Mirrored storage at the file system level |
US7712034B2 (en) | 2003-03-24 | 2010-05-04 | Microsoft Corporation | System and method for shell browser |
US20100115006A1 (en) * | 2004-03-22 | 2010-05-06 | Microsoft Corporation | Computing device with relatively limited storage space and operating/file system thereof |
US7720892B1 (en) * | 2006-06-30 | 2010-05-18 | Emc Corporation | Bulk updates and tape synchronization |
US20100153526A1 (en) * | 2008-12-12 | 2010-06-17 | International Business Machines Corporation | Per file system usage of networks |
US7769794B2 (en) | 2003-03-24 | 2010-08-03 | Microsoft Corporation | User interface for a file system shell |
US20100199058A1 (en) * | 2009-02-03 | 2010-08-05 | Bmc Software, Inc. | Data Set Size Tracking and Management |
US7774315B1 (en) * | 1999-03-12 | 2010-08-10 | Eldad Galker | Backup system |
US20100238814A1 (en) * | 2009-03-18 | 2010-09-23 | At&T Intellectual Property I, L.P. | Methods and Apparatus to Characterize and Predict Network Health Status |
US20100262871A1 (en) * | 2007-10-03 | 2010-10-14 | William Bain L | Method for implementing highly available data parallel operations on a computational grid |
US20100268907A1 (en) * | 2009-04-16 | 2010-10-21 | International Business Machines Corporation | Selecting A Target Number of Pages for Allocation to a Partition |
US7831642B1 (en) * | 2004-09-30 | 2010-11-09 | Symantec Operating Corporation | Page cache management for a shared file |
US7836017B1 (en) | 2000-09-12 | 2010-11-16 | Hewlett-Packard Development Company, L.P. | File replication in a distributed segmented file system |
US7853890B2 (en) | 2003-04-17 | 2010-12-14 | Microsoft Corporation | Address bar user interface control |
US20100318632A1 (en) * | 2009-06-16 | 2010-12-16 | Microsoft Corporation | Byte range caching |
USRE42153E1 (en) * | 2000-03-30 | 2011-02-15 | Hubbard Edward A | Dynamic coordination and control of network connected devices for large-scale network site testing and associated architectures |
US20110055494A1 (en) * | 2009-08-25 | 2011-03-03 | Yahoo! Inc. | Method for distributed direct object access storage |
US7908302B1 (en) * | 2004-09-17 | 2011-03-15 | Symantec Operating Corporation | In-place splitting and merging of files |
US20110145363A1 (en) * | 2009-12-16 | 2011-06-16 | International Business Machines Corporation | Disconnected file operations in a scalable multi-node file system cache for a remote cluster file system |
US20110145367A1 (en) * | 2009-12-16 | 2011-06-16 | International Business Machines Corporation | Scalable caching of remote file data in a cluster file system |
US7996361B1 (en) * | 2003-06-30 | 2011-08-09 | Symantec Operating Corporation | Method and system of providing replica files within a fileset |
US8024496B2 (en) | 2009-04-10 | 2011-09-20 | International Business Machines Corporation | Enhanced memory migration descriptor format and method |
US8024335B2 (en) | 2004-05-03 | 2011-09-20 | Microsoft Corporation | System and method for dynamically generating a selectable search extension |
US20120030265A1 (en) * | 2010-07-30 | 2012-02-02 | Anderson Owen T | Fileset Masks to Cluster Inodes for Efficient Fileset Management |
US20120036161A1 (en) * | 2002-11-01 | 2012-02-09 | Bluearc Uk Limited | Distributed File System and Method |
US20120095971A1 (en) * | 2010-10-19 | 2012-04-19 | Symantec Corporation | Online file system consistency check |
US20120116929A1 (en) * | 2010-11-05 | 2012-05-10 | Atc Logistics & Electronics, Inc. | System and method for auditing removal of customer personal information on electronic devices |
US8195646B2 (en) | 2005-04-22 | 2012-06-05 | Microsoft Corporation | Systems, methods, and user interfaces for storing, searching, navigating, and retrieving electronic information |
US20120151175A1 (en) * | 2010-12-08 | 2012-06-14 | Electronics And Telecommunications Research Institute | Memory apparatus for collective volume memory and method for managing metadata thereof |
US20120173486A1 (en) * | 2010-12-31 | 2012-07-05 | Chang-Sik Park | System and method for dynamically selecting storage locations of replicas in cloud storage system |
US8301853B1 (en) * | 2007-12-31 | 2012-10-30 | Emc Corporation | System and method for asynchronously mirroring data |
US20120311289A1 (en) * | 2011-05-31 | 2012-12-06 | Somasundaram Meiyappan | Persistent data storage |
US20130007363A1 (en) * | 2011-06-30 | 2013-01-03 | Fujitsu Limited | Control device and control method |
US20130080481A1 (en) * | 2011-09-27 | 2013-03-28 | Sybase, Inc. | Extreme large space allocation |
US8458239B2 (en) | 2009-12-16 | 2013-06-04 | International Business Machines Corporation | Directory traversal in a scalable multi-node file system cache for a remote cluster file system |
US8495250B2 (en) | 2009-12-16 | 2013-07-23 | International Business Machines Corporation | Asynchronous file operations in a scalable multi-node file system cache for a remote cluster file system |
US20130198262A1 (en) * | 2010-02-04 | 2013-08-01 | St-Ericsson Sa | Management of communications between a client equipment and a server equipment providing to the client equipment computer resources represented according to a file system |
US20130246726A1 (en) * | 2009-07-07 | 2013-09-19 | Sones Gmbh | Method and device for a memory system |
US20130311523A1 (en) * | 2009-09-02 | 2013-11-21 | Microsoft Corporation | Extending file system namespace types |
US8612700B1 (en) | 2010-10-29 | 2013-12-17 | Symantec Corporation | Method and system of performing block level duplications of cataloged backup data |
US20140047185A1 (en) * | 2012-08-07 | 2014-02-13 | Dell Products L.P. | System and Method for Data Redundancy Within a Cache |
US20140047183A1 (en) * | 2012-08-07 | 2014-02-13 | Dell Products L.P. | System and Method for Utilizing a Cache with a Virtual Machine |
US20140068201A1 (en) * | 2012-08-31 | 2014-03-06 | Silicon Graphics International Corp. | Transactional memory proxy |
US20140075017A1 (en) * | 2012-09-12 | 2014-03-13 | salesforce.com,inc. | Mechanism for facilitating a quorum-based coordination of booker health for management of resources for application servers in an on-demand services enviroment |
US8738725B2 (en) | 2011-01-03 | 2014-05-27 | Planetary Data LLC | Community internet drive |
US8745012B2 (en) | 2007-08-10 | 2014-06-03 | Sybase, Inc. | Log-structured store for streaming data |
US8775870B2 (en) | 2010-12-22 | 2014-07-08 | Kt Corporation | Method and apparatus for recovering errors in a storage system |
US20140365597A1 (en) * | 2013-06-07 | 2014-12-11 | International Business Machines Corporation | Processing Element Data Sharing |
US8935307B1 (en) | 2000-09-12 | 2015-01-13 | Hewlett-Packard Development Company, L.P. | Independent data access in a segmented file system |
US20150134900A1 (en) * | 2013-11-08 | 2015-05-14 | Mei-Ling Lin | Cache efficiency in a shared disk database cluster |
US9158460B2 (en) | 2011-04-25 | 2015-10-13 | Kt Corporation | Selecting data nodes using multiple storage policies in cloud storage system |
US9244015B2 (en) | 2010-04-20 | 2016-01-26 | Hewlett-Packard Development Company, L.P. | Self-arranging, luminescence-enhancement device for surface-enhanced luminescence |
US9274058B2 (en) | 2010-10-20 | 2016-03-01 | Hewlett-Packard Development Company, L.P. | Metallic-nanofinger device for chemical sensing |
US9279767B2 (en) | 2010-10-20 | 2016-03-08 | Hewlett-Packard Development Company, L.P. | Chemical-analysis device integrated with metallic-nanofinger device for chemical sensing |
US20160098432A1 (en) * | 2013-03-15 | 2016-04-07 | Emc Corporation | Integrated search for shared storage using index throttling to maintain quality of service |
US9311240B2 (en) | 2012-08-07 | 2016-04-12 | Dell Products L.P. | Location and relocation of data within a cache |
US9361243B2 (en) | 1998-07-31 | 2016-06-07 | Kom Networks Inc. | Method and system for providing restricted access to a storage medium |
US9367480B2 (en) | 2012-08-07 | 2016-06-14 | Dell Products L.P. | System and method for updating data in a cache |
US20160179872A1 (en) * | 2006-03-31 | 2016-06-23 | Amazon Technologies, Inc. | System and Method for Providing High Availability Data |
US9449047B2 (en) | 2007-06-19 | 2016-09-20 | Sybase, Inc. | Dynamic modification of schemas in streaming databases |
US9495301B2 (en) * | 2012-08-07 | 2016-11-15 | Dell Products L.P. | System and method for utilizing non-volatile memory in a cache |
US9549037B2 (en) | 2012-08-07 | 2017-01-17 | Dell Products L.P. | System and method for maintaining solvency within a cache |
US9659292B1 (en) * | 2001-08-30 | 2017-05-23 | EMC IP Holding Company LLC | Storage-based replication of e-commerce transactions in real time |
US20170153849A1 (en) * | 2015-11-26 | 2017-06-01 | Via Alliance Semiconductor Co., Ltd. | Methods and apparatuses for generating machine code for driving an execution unit |
US9792104B2 (en) | 2010-11-05 | 2017-10-17 | FedEx Supply Chain Logistics & Electronics, Inc. | System and method for flashing a wireless device |
US9813516B2 (en) | 2014-02-18 | 2017-11-07 | Salesforce.Com, Inc. | Transparent sharding of traffic across messaging brokers |
US20170344382A1 (en) * | 2016-05-26 | 2017-11-30 | International Business Machines Corporation | Stream computing application shutdown and restart without data loss |
US20180032397A1 (en) * | 2016-07-28 | 2018-02-01 | Hewlett Packard Enterprise Development Lp | Last writers of datasets in storage array errors |
US10049019B2 (en) * | 2014-08-08 | 2018-08-14 | International Business Machines Corporation | Data backup using metadata mapping |
US10169090B2 (en) | 2012-09-12 | 2019-01-01 | Salesforce.Com, Inc. | Facilitating tiered service model-based fair allocation of resources for application servers in multi-tenant environments |
US10204127B1 (en) * | 2011-12-31 | 2019-02-12 | Richard Michael Nemes | Methods and apparatus for information storage and retrieval using a caching technique with probe-limited open-address hashing |
US20190065296A1 (en) * | 2017-08-31 | 2019-02-28 | Nxp Usa, Inc. | System and method of implementing heartbeats in a multicore system |
US10275169B2 (en) * | 2017-01-18 | 2019-04-30 | Microsoft Technology Licensing, Llc | Shared memory in memory isolated partitions |
US10452681B1 (en) | 2015-11-30 | 2019-10-22 | Amazon Technologies, Inc. | Replication group pools for fast provisioning |
US10489044B2 (en) | 2005-07-13 | 2019-11-26 | Microsoft Technology Licensing, Llc | Rich drag drop user interface |
US10489230B1 (en) | 2015-12-02 | 2019-11-26 | Amazon Technologies, Inc. | Chaining log operations in data replication groups |
US10521311B1 (en) | 2016-06-30 | 2019-12-31 | Amazon Technologies, Inc. | Prioritized leadership for data replication groups |
US10567499B1 (en) | 2015-12-02 | 2020-02-18 | Amazon Technologies, Inc. | Unsupervised round robin catch up algorithm |
US10565227B1 (en) | 2016-08-31 | 2020-02-18 | Amazon Technologies, Inc. | Leadership lease protocol for data replication groups |
US10572452B1 (en) * | 2015-01-01 | 2020-02-25 | EMC IP Holding Company LLC | Context-based read-ahead for B+ tree data structures in a deduplication system |
US20200183859A1 (en) * | 2018-12-11 | 2020-06-11 | International Business Machines Corporation | Distributed directory of named data elements in coordination namespace |
US10733201B1 (en) | 2015-11-30 | 2020-08-04 | Amazon Technologies, Inc. | Dynamic provisioning for data replication groups |
US10789267B1 (en) | 2017-09-21 | 2020-09-29 | Amazon Technologies, Inc. | Replication group data management |
US20200320037A1 (en) * | 2016-07-13 | 2020-10-08 | Netapp, Inc. | Persistent indexing and free space management for flat directory |
US10852949B2 (en) | 2019-04-15 | 2020-12-01 | Micron Technology, Inc. | Predictive data pre-fetching in a data storage device |
US10877892B2 (en) | 2018-07-11 | 2020-12-29 | Micron Technology, Inc. | Predictive paging to accelerate memory access |
US10880401B2 (en) * | 2018-02-12 | 2020-12-29 | Micron Technology, Inc. | Optimization of data access and communication in memory systems |
US10924543B1 (en) * | 2015-12-18 | 2021-02-16 | Amazon Technologies, Inc. | Deployment strategy for maintaining integrity of replication groups |
US10963348B1 (en) * | 2014-12-19 | 2021-03-30 | EMC IP Holding Company LLC | Summary change log indexed by inode numbers |
US11099789B2 (en) | 2018-02-05 | 2021-08-24 | Micron Technology, Inc. | Remote direct memory access in multi-tier memory systems |
US11150995B1 (en) | 2016-09-13 | 2021-10-19 | Amazon Technologies, Inc. | Node placement for replication groups |
US11354056B2 (en) | 2018-02-05 | 2022-06-07 | Micron Technology, Inc. | Predictive data orchestration in multi-tier memory systems |
US11416395B2 (en) | 2018-02-05 | 2022-08-16 | Micron Technology, Inc. | Memory virtualization for accessing heterogeneous memory components |
US11429486B1 (en) * | 2010-02-27 | 2022-08-30 | Pure Storage, Inc. | Rebuilding data via locally decodable redundancy in a vast storage network |
US11640410B1 (en) | 2015-12-02 | 2023-05-02 | Amazon Technologies, Inc. | Distributed log processing for data replication groups |
US11734192B2 (en) | 2018-12-10 | 2023-08-22 | International Business Machines Corporation | Identifying location of data granules in global virtual address space |
US11941030B2 (en) * | 2021-03-30 | 2024-03-26 | Netapp, Inc. | Methods for hierarchical propagation in tree structures and devices thereof |
Families Citing this family (7)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US8185602B2 (en) | 2002-11-05 | 2012-05-22 | Newisys, Inc. | Transaction processing using multiple protocol engines in systems having multiple multi-processor clusters |
DE102008012979A1 (en) * | 2008-03-06 | 2009-09-10 | Gip Ag | Method and program for providing data coherency in networks |
US20120137044A1 (en) * | 2010-11-30 | 2012-05-31 | Nokia Corporation | Method and apparatus for providing persistent computations |
US8756378B2 (en) * | 2011-02-17 | 2014-06-17 | Oracle International Corporation | Broadcast protocol for a network of caches |
US20160274806A1 (en) * | 2013-12-11 | 2016-09-22 | Thomas J. Barnes | Cache and non-cache usage in a distributed storage system |
WO2017032394A1 (en) * | 2015-08-21 | 2017-03-02 | Telefonaktiebolaget Lm Ericsson (Publ) | Network data sharing in communication networks |
KR102571197B1 (en) * | 2022-12-07 | 2023-08-30 | 성균관대학교산학협력단 | Method for maintaining cache coherency of cluster file system |
Citations (54)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US4096567A (en) * | 1976-08-13 | 1978-06-20 | Millard William H | Information storage facility with multiple level processors |
US4426688A (en) * | 1981-08-03 | 1984-01-17 | Ncr Corporation | Memory system having an alternate memory |
US4710926A (en) * | 1985-12-27 | 1987-12-01 | American Telephone And Telegraph Company, At&T Bell Laboratories | Fault recovery in a distributed processing system |
EP0288636A2 (en) * | 1987-04-24 | 1988-11-02 | Network Systems Corporation | Network communications adapter |
US4868738A (en) * | 1985-08-15 | 1989-09-19 | Lanier Business Products, Inc. | Operating system independent virtual memory computer system |
US4934764A (en) * | 1989-03-31 | 1990-06-19 | Kendall Square Research Corporation | Computer system module assembly |
US5055999A (en) * | 1987-12-22 | 1991-10-08 | Kendall Square Research Corporation | Multiprocessor digital data processing system |
US5077736A (en) * | 1988-06-28 | 1991-12-31 | Storage Technology Corporation | Disk drive memory |
US5117350A (en) * | 1988-12-15 | 1992-05-26 | Flashpoint Computer Corporation | Memory address mechanism in a distributed memory architecture |
US5119481A (en) * | 1987-12-22 | 1992-06-02 | Kendall Square Research Corporation | Register bus multiprocessor system with shift |
GB2257273A (en) * | 1991-06-27 | 1993-01-06 | Digital Equipment Corp | Data storage system with device independent file directories |
US5226039A (en) * | 1987-12-22 | 1993-07-06 | Kendall Square Research Corporation | Packet routing switch |
US5245563A (en) * | 1991-09-20 | 1993-09-14 | Kendall Square Research Corporation | Fast control for round unit |
US5247673A (en) * | 1989-12-04 | 1993-09-21 | Bull Hn Information Systems Italia S.P.A. | Multiprocessor system having distributed shared resources and dynamic global data replication |
US5251308A (en) * | 1987-12-22 | 1993-10-05 | Kendall Square Research Corporation | Shared memory multiprocessor with data hiding and post-store |
US5274789A (en) * | 1990-03-19 | 1993-12-28 | Bull Hn Information Systems Italia S.P.A. | Multiprocessor system having distributed shared resources and dynamic and selective global data replication |
US5282201A (en) * | 1987-12-22 | 1994-01-25 | Kendall Square Research Corporation | Dynamic packet routing network |
US5313647A (en) * | 1991-09-20 | 1994-05-17 | Kendall Square Research Corporation | Digital data processor with improved checkpointing and forking |
US5335325A (en) * | 1987-12-22 | 1994-08-02 | Kendall Square Research Corporation | High-speed packet switching apparatus and method |
US5341483A (en) * | 1987-12-22 | 1994-08-23 | Kendall Square Research Corporation | Dynamic hierarchial associative memory |
WO1995002307A1 (en) * | 1993-07-05 | 1995-01-19 | Nokia Telecommunications Oy | Time division multiple access radio system, method for intracell capacity allocation, and method for performing an intra-cell handover |
US5390316A (en) * | 1990-08-31 | 1995-02-14 | International Business Machines Corporation | Multicomputer complex having a distributed shared memory system for providing a single system view from multiple consoles |
US5390326A (en) * | 1993-04-30 | 1995-02-14 | The Foxboro Company | Local area network with fault detection and recovery |
US5394555A (en) * | 1992-12-23 | 1995-02-28 | Bull Hn Information Systems Inc. | Multi-node cluster computer system incorporating an external coherency unit at each node to insure integrity of information stored in a shared, distributed memory |
US5408649A (en) * | 1993-04-30 | 1995-04-18 | Quotron Systems, Inc. | Distributed data access system including a plurality of database access processors with one-for-N redundancy |
WO1995014279A1 (en) * | 1993-11-15 | 1995-05-26 | Conner Peripherals, Inc. | Network management system having virtual catalog overview of files distributively stored across network domain |
US5423037A (en) * | 1992-03-17 | 1995-06-06 | Teleserve Transaction Technology As | Continuously available database server having multiple groups of nodes, each group maintaining a database copy with fragments stored on multiple nodes |
EP0661651A1 (en) * | 1993-12-29 | 1995-07-05 | Microsoft Corporation | Unification of directory service with file system services |
WO1995022111A1 (en) * | 1994-02-08 | 1995-08-17 | Telefonaktiebolaget Lm Ericsson | Distributed data base system |
US5452447A (en) * | 1992-12-21 | 1995-09-19 | Sun Microsystems, Inc. | Method and apparatus for a caching file server |
WO1995025306A2 (en) * | 1994-03-14 | 1995-09-21 | Stanford University | Distributed shared-cache for multi-processors |
US5490272A (en) * | 1994-01-28 | 1996-02-06 | International Business Machines Corporation | Method and apparatus for creating multithreaded time slices in a multitasking operating system |
US5493728A (en) * | 1993-02-19 | 1996-02-20 | Borland International, Inc. | System and methods for optimized access in a multi-user environment |
US5513314A (en) * | 1995-01-27 | 1996-04-30 | Auspex Systems, Inc. | Fault tolerant NFS server system and mirroring protocol |
US5519855A (en) * | 1994-01-14 | 1996-05-21 | Microsoft Corporation | Summary catalogs |
US5522045A (en) * | 1992-03-27 | 1996-05-28 | Panasonic Technologies, Inc. | Method for updating value in distributed shared virtual memory among interconnected computer nodes having page table with minimal processor involvement |
WO1996023268A1 (en) * | 1995-01-23 | 1996-08-01 | Tandem Computers Incorporated | Reconstructing directory pathnames from file handles in a computer system |
US5551035A (en) * | 1989-06-30 | 1996-08-27 | Lucent Technologies Inc. | Method and apparatus for inter-object communication in an object-oriented program controlled system |
US5560027A (en) * | 1993-12-15 | 1996-09-24 | Convex Computer Corporation | Scalable parallel processing systems wherein each hypernode has plural processing modules interconnected by crossbar and each processing module has SCI circuitry for forming multi-dimensional network with other hypernodes |
US5560029A (en) * | 1991-07-22 | 1996-09-24 | Massachusetts Institute Of Technology | Data processing system with synchronization coprocessor for multiple threads |
WO1996030847A1 (en) * | 1995-03-17 | 1996-10-03 | Tele-Communications, Inc. | Method and apparatus for transaction processing in a distributed database system |
US5588147A (en) * | 1994-01-14 | 1996-12-24 | Microsoft Corporation | Replication facility |
US5613079A (en) * | 1994-04-20 | 1997-03-18 | Microsoft Corporation | System for verifying the proper operation of a replication facility |
US5617537A (en) * | 1993-10-05 | 1997-04-01 | Nippon Telegraph And Telephone Corporation | Message passing system for distributed shared memory multiprocessor system and message passing method using the same |
US5687308A (en) * | 1995-06-07 | 1997-11-11 | Tandem Computers Incorporated | Method to improve tolerance of non-homogeneous power outages |
US5701462A (en) * | 1993-12-29 | 1997-12-23 | Microsoft Corporation | Distributed file system providing a unified name space with efficient name resolution |
US5727150A (en) * | 1995-05-05 | 1998-03-10 | Silicon Graphics, Inc. | Apparatus and method for page migration in a non-uniform memory access (NUMA) system |
US5768510A (en) * | 1996-07-01 | 1998-06-16 | Sun Microsystems, Inc. | Object-oriented system, method and article of manufacture for a client-server application enabler system |
US5781537A (en) * | 1995-07-07 | 1998-07-14 | International Business Machines Corporation | Setting up, taking down and maintaining connections in a communications network |
US5805786A (en) * | 1996-07-23 | 1998-09-08 | International Business Machines Corporation | Recovery of a name server managing membership of a domain of processors in a distributed computing environment |
US5805785A (en) * | 1996-02-27 | 1998-09-08 | International Business Machines Corporation | Method for monitoring and recovery of subsystems in a distributed/clustered system |
US5812751A (en) * | 1995-05-19 | 1998-09-22 | Compaq Computer Corporation | Multi-server fault tolerance using in-band signalling |
US5812533A (en) * | 1994-02-28 | 1998-09-22 | British Telecommunications Public Limited Company | Service provision in communications networks |
US5832514A (en) * | 1996-06-26 | 1998-11-03 | Microsoft Corporation | System and method for discovery based data recovery in a store and forward replication process |
-
1997
- 1997-05-02 US US08/848,967 patent/US5909540A/en not_active Expired - Lifetime
- 1997-11-21 JP JP52399698A patent/JP2001504616A/en not_active Ceased
- 1997-11-21 WO PCT/US1997/021734 patent/WO1998022876A1/en active IP Right Grant
- 1997-11-21 AT AT97948567T patent/ATE249640T1/en not_active IP Right Cessation
- 1997-11-21 AU AU54611/98A patent/AU5461198A/en not_active Abandoned
- 1997-11-21 EP EP97948567A patent/EP1008047B1/en not_active Expired - Lifetime
- 1997-11-21 DE DE69724834T patent/DE69724834T2/en not_active Expired - Fee Related
Patent Citations (59)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US4096567A (en) * | 1976-08-13 | 1978-06-20 | Millard William H | Information storage facility with multiple level processors |
US4426688A (en) * | 1981-08-03 | 1984-01-17 | Ncr Corporation | Memory system having an alternate memory |
US4868738A (en) * | 1985-08-15 | 1989-09-19 | Lanier Business Products, Inc. | Operating system independent virtual memory computer system |
US4710926A (en) * | 1985-12-27 | 1987-12-01 | American Telephone And Telegraph Company, At&T Bell Laboratories | Fault recovery in a distributed processing system |
EP0288636A2 (en) * | 1987-04-24 | 1988-11-02 | Network Systems Corporation | Network communications adapter |
US5055999A (en) * | 1987-12-22 | 1991-10-08 | Kendall Square Research Corporation | Multiprocessor digital data processing system |
US5251308A (en) * | 1987-12-22 | 1993-10-05 | Kendall Square Research Corporation | Shared memory multiprocessor with data hiding and post-store |
US5335325A (en) * | 1987-12-22 | 1994-08-02 | Kendall Square Research Corporation | High-speed packet switching apparatus and method |
US5119481A (en) * | 1987-12-22 | 1992-06-02 | Kendall Square Research Corporation | Register bus multiprocessor system with shift |
US5297265A (en) * | 1987-12-22 | 1994-03-22 | Kendall Square Research Corporation | Shared memory multiprocessor system and method of operation thereof |
US5226039A (en) * | 1987-12-22 | 1993-07-06 | Kendall Square Research Corporation | Packet routing switch |
US5282201A (en) * | 1987-12-22 | 1994-01-25 | Kendall Square Research Corporation | Dynamic packet routing network |
US5341483A (en) * | 1987-12-22 | 1994-08-23 | Kendall Square Research Corporation | Dynamic hierarchial associative memory |
US5077736A (en) * | 1988-06-28 | 1991-12-31 | Storage Technology Corporation | Disk drive memory |
US5117350A (en) * | 1988-12-15 | 1992-05-26 | Flashpoint Computer Corporation | Memory address mechanism in a distributed memory architecture |
US4934764A (en) * | 1989-03-31 | 1990-06-19 | Kendall Square Research Corporation | Computer system module assembly |
US5551035A (en) * | 1989-06-30 | 1996-08-27 | Lucent Technologies Inc. | Method and apparatus for inter-object communication in an object-oriented program controlled system |
US5247673A (en) * | 1989-12-04 | 1993-09-21 | Bull Hn Information Systems Italia S.P.A. | Multiprocessor system having distributed shared resources and dynamic global data replication |
US5274789A (en) * | 1990-03-19 | 1993-12-28 | Bull Hn Information Systems Italia S.P.A. | Multiprocessor system having distributed shared resources and dynamic and selective global data replication |
US5390316A (en) * | 1990-08-31 | 1995-02-14 | International Business Machines Corporation | Multicomputer complex having a distributed shared memory system for providing a single system view from multiple consoles |
GB2257273A (en) * | 1991-06-27 | 1993-01-06 | Digital Equipment Corp | Data storage system with device independent file directories |
US5560029A (en) * | 1991-07-22 | 1996-09-24 | Massachusetts Institute Of Technology | Data processing system with synchronization coprocessor for multiple threads |
US5313647A (en) * | 1991-09-20 | 1994-05-17 | Kendall Square Research Corporation | Digital data processor with improved checkpointing and forking |
US5245563A (en) * | 1991-09-20 | 1993-09-14 | Kendall Square Research Corporation | Fast control for round unit |
US5423037A (en) * | 1992-03-17 | 1995-06-06 | Teleserve Transaction Technology As | Continuously available database server having multiple groups of nodes, each group maintaining a database copy with fragments stored on multiple nodes |
US5592625A (en) * | 1992-03-27 | 1997-01-07 | Panasonic Technologies, Inc. | Apparatus for providing shared virtual memory among interconnected computer nodes with minimal processor involvement |
US5522045A (en) * | 1992-03-27 | 1996-05-28 | Panasonic Technologies, Inc. | Method for updating value in distributed shared virtual memory among interconnected computer nodes having page table with minimal processor involvement |
US5452447A (en) * | 1992-12-21 | 1995-09-19 | Sun Microsystems, Inc. | Method and apparatus for a caching file server |
US5394555A (en) * | 1992-12-23 | 1995-02-28 | Bull Hn Information Systems Inc. | Multi-node cluster computer system incorporating an external coherency unit at each node to insure integrity of information stored in a shared, distributed memory |
US5493728A (en) * | 1993-02-19 | 1996-02-20 | Borland International, Inc. | System and methods for optimized access in a multi-user environment |
US5408649A (en) * | 1993-04-30 | 1995-04-18 | Quotron Systems, Inc. | Distributed data access system including a plurality of database access processors with one-for-N redundancy |
US5390326A (en) * | 1993-04-30 | 1995-02-14 | The Foxboro Company | Local area network with fault detection and recovery |
WO1995002307A1 (en) * | 1993-07-05 | 1995-01-19 | Nokia Telecommunications Oy | Time division multiple access radio system, method for intracell capacity allocation, and method for performing an intra-cell handover |
US5617537A (en) * | 1993-10-05 | 1997-04-01 | Nippon Telegraph And Telephone Corporation | Message passing system for distributed shared memory multiprocessor system and message passing method using the same |
WO1995014279A1 (en) * | 1993-11-15 | 1995-05-26 | Conner Peripherals, Inc. | Network management system having virtual catalog overview of files distributively stored across network domain |
US5560027A (en) * | 1993-12-15 | 1996-09-24 | Convex Computer Corporation | Scalable parallel processing systems wherein each hypernode has plural processing modules interconnected by crossbar and each processing module has SCI circuitry for forming multi-dimensional network with other hypernodes |
EP0661651A1 (en) * | 1993-12-29 | 1995-07-05 | Microsoft Corporation | Unification of directory service with file system services |
US5649194A (en) * | 1993-12-29 | 1997-07-15 | Microsoft Corporation | Unification of directory service with file system services |
US5701462A (en) * | 1993-12-29 | 1997-12-23 | Microsoft Corporation | Distributed file system providing a unified name space with efficient name resolution |
US5689700A (en) * | 1993-12-29 | 1997-11-18 | Microsoft Corporation | Unification of directory service with file system services |
US5675787A (en) * | 1993-12-29 | 1997-10-07 | Microsoft Corporation | Unification of directory service with file system services |
US5588147A (en) * | 1994-01-14 | 1996-12-24 | Microsoft Corporation | Replication facility |
US5519855A (en) * | 1994-01-14 | 1996-05-21 | Microsoft Corporation | Summary catalogs |
US5490272A (en) * | 1994-01-28 | 1996-02-06 | International Business Machines Corporation | Method and apparatus for creating multithreaded time slices in a multitasking operating system |
WO1995022111A1 (en) * | 1994-02-08 | 1995-08-17 | Telefonaktiebolaget Lm Ericsson | Distributed data base system |
US5812533A (en) * | 1994-02-28 | 1998-09-22 | British Telecommunications Public Limited Company | Service provision in communications networks |
WO1995025306A2 (en) * | 1994-03-14 | 1995-09-21 | Stanford University | Distributed shared-cache for multi-processors |
US5613079A (en) * | 1994-04-20 | 1997-03-18 | Microsoft Corporation | System for verifying the proper operation of a replication facility |
WO1996023268A1 (en) * | 1995-01-23 | 1996-08-01 | Tandem Computers Incorporated | Reconstructing directory pathnames from file handles in a computer system |
US5513314A (en) * | 1995-01-27 | 1996-04-30 | Auspex Systems, Inc. | Fault tolerant NFS server system and mirroring protocol |
WO1996030847A1 (en) * | 1995-03-17 | 1996-10-03 | Tele-Communications, Inc. | Method and apparatus for transaction processing in a distributed database system |
US5727150A (en) * | 1995-05-05 | 1998-03-10 | Silicon Graphics, Inc. | Apparatus and method for page migration in a non-uniform memory access (NUMA) system |
US5812751A (en) * | 1995-05-19 | 1998-09-22 | Compaq Computer Corporation | Multi-server fault tolerance using in-band signalling |
US5687308A (en) * | 1995-06-07 | 1997-11-11 | Tandem Computers Incorporated | Method to improve tolerance of non-homogeneous power outages |
US5781537A (en) * | 1995-07-07 | 1998-07-14 | International Business Machines Corporation | Setting up, taking down and maintaining connections in a communications network |
US5805785A (en) * | 1996-02-27 | 1998-09-08 | International Business Machines Corporation | Method for monitoring and recovery of subsystems in a distributed/clustered system |
US5832514A (en) * | 1996-06-26 | 1998-11-03 | Microsoft Corporation | System and method for discovery based data recovery in a store and forward replication process |
US5768510A (en) * | 1996-07-01 | 1998-06-16 | Sun Microsystems, Inc. | Object-oriented system, method and article of manufacture for a client-server application enabler system |
US5805786A (en) * | 1996-07-23 | 1998-09-08 | International Business Machines Corporation | Recovery of a name server managing membership of a domain of processors in a distributed computing environment |
Non-Patent Citations (85)
Title |
---|
"Java Dynamic Class Loader," IBM Technical Disclosure Bulletin, vol. 39, No. 11, Nov. 1996, pp. 107-108. |
"Software Agents," Genesereth et al., Communications of the ACM, Jul. 1994, vol. 37, No. 7, pp. 48-53. |
"Support for Collaborative Design: Agents and Emergence, Edmonds et al.," Communications of the ACM, Jul. 1994, vol. 37, No. 7, pp. 41-47. |
Amaral et al. "A Model for Persistent Shared Memory Addressing in Distributed Systems," Object Orientation in Operating Systems, 1992, IEEE, pp. 2-11. |
Amaral et al. A Model for Persistent Shared Memory Addressing in Distributed Systems, Object Orientation in Operating Systems, 1992, IEEE, pp. 2 11. * |
Anderson et al. "Scheduler Activations: Effective Kernel Support for the User-Level Management of Parallelism," Operating Systems Review (SIGOPS), vol. 25, No. 1, Jan. 1, 1991, pp. 95-109. |
Anderson et al. Scheduler Activations: Effective Kernel Support for the User Level Management of Parallelism, Operating Systems Review (SIGOPS), vol. 25, No. 1, Jan. 1, 1991, pp. 95 109. * |
Anderson, T., et al. "Serverless Network File Systems," Operating Systems Review (SIGOPS), vol. 29, No. 5, Dec. 1, 1995, pp. 109-126. |
Anderson, T., et al. Serverless Network File Systems, Operating Systems Review ( SIGOPS ), vol. 29, No. 5, Dec. 1, 1995, pp. 109 126. * |
Barton Davis et al. Adding Scheduler Activations to Mach 3.0, Proceedings of the USENIX Mach III Symposium, Santa Fe, NM, USA, Apr. 19 21, 1993, pp. 119 136. * |
Barton-Davis et al. "Adding Scheduler Activations to Mach 3.0," Proceedings of the USENIX Mach III Symposium, Santa Fe, NM, USA, Apr. 19-21, 1993, pp. 119-136. |
Carter, J., et al. "Network Multicomputing Using Recoverable Distributed Shared Memory," Proceedings of the Spring Computer Society International Conference (COMPCON), San Francisco, Feb. 22-26, 1993, pp. 519-527. |
Carter, J., et al. Network Multicomputing Using Recoverable Distributed Shared Memory, Proceedings of the Spring Computer Society International Conference ( COMPCON ), San Francisco, Feb. 22 26, 1993, pp. 519 527. * |
Carter, J.B. et al., "Optimistic Implementation of Bulk Data Transfer Protocols," In Proceedings of the 1989 Signetrics Conference, pp. 61-69 (May, 1989). |
Carter, J.B. et al., Optimistic Implementation of Bulk Data Transfer Protocols, In Proceedings of the 1989 Signetrics Conference, pp. 61 69 (May, 1989). * |
Carter, J.B. et als., "Distributed Operating Systems Based on a Protected Global Virtual Address Space," in the Proceedings of the Third Workshop on Workstation Operating Systems (WWOS)(May, 1992). |
Carter, J.B. et als., "FLEX: A Tool for Building Efficient and Flexible Systems," In the Proceedings of the Fourth Workshop on Workstation Operating Systems ((WWOS)(Oct., 1993). |
Carter, J.B. et als., "Reducing Consistency Traffic and Cache Misses in the Avalanche Multiprocessor," University of Utah technical report. |
Carter, J.B. et als., "Techniques for Reducing Consistency-Related Communication in Distributed Shared Memory Systems," ACM Transactions on Computer Systems, pp. 205-243, vol. 13, No. 3 (Aug., 1995). |
Carter, J.B. et als., Distributed Operating Systems Based on a Protected Global Virtual Address Space, in the Proceedings of the Third Workshop on Workstation Operating Systems (WWOS)(May, 1992). * |
Carter, J.B. et als., FLEX: A Tool for Building Efficient and Flexible Systems, In the Proceedings of the Fourth Workshop on Workstation Operating Systems ((WWOS)(Oct., 1993). * |
Carter, J.B. et als., Reducing Consistency Traffic and Cache Misses in the Avalanche Multiprocessor, University of Utah technical report. * |
Carter, J.B. et als., Techniques for Reducing Consistency Related Communication in Distributed Shared Memory Systems, ACM Transactions on Computer Systems, pp. 205 243, vol. 13, No. 3 (Aug., 1995). * |
Carter, John B., "Design of the Munin Distributed Shared memory System," To appear in the special issue of the Journal of Parallel and Distributed Computing on distributed shared memory(1995). |
Carter, John B., Design of the Munin Distributed Shared memory System, To appear in the special issue of the Journal of Parallel and Distributed Computing on distributed shared memory(1995). * |
Dryden, P. "Users throwing cache at networks delays" Computerworld, Oct. 7, 1996, http://ww.computerworld.com/search/AT-html/9610/961007SL41cacheb.html, originally printed on May 22, 1997, reprinted on Nov. 18, 1998. |
Dryden, P. Users throwing cache at networks delays Computerworld, Oct. 7, 1996, http://ww.computerworld.com/search/AT html/9610/961007SL41cacheb.html, originally printed on May 22, 1997, reprinted on Nov. 18, 1998. * |
Enterprise Networking Web Page, http://www.lancache.com/enad1.html, printed on May 20, 1997. * |
European Patent Office, European Search Report, Appliation No. EP 97 30 9471, mailed on Apr. 23, 1998, 3 pages. * |
Henskens et al. "Course and Fine Grain Objects in a Distributed Persistent Store," Object Orientation in Operating Systems, 1993, IEEE, pp. 116-123. |
Henskens et al. Course and Fine Grain Objects in a Distributed Persistent Store, Object Orientation in Operating Systems, 1993, IEEE, pp. 116 123. * |
Huber, J., et al. "PPFS: A High Performance Portable Parallel File System," Proceedings of the International Conference on Supercomputing, Barcelona, Jul. 3-7, 1995, pp. 385-394. |
Huber, J., et al. PPFS: A High Performance Portable Parallel File System, Proceedings of the International Conference on Supercomputing, Barcelona, Jul. 3 7, 1995, pp. 385 394. * |
Irelenbusch et al. "Towards a Resilient Shared Memory Concept for Distributed Persistent Object Systems," Proceedings of the 28th Annual Hawaii Intl. Conference on System Sciences, 1995, IEEE, pp. 675-684. |
Irelenbusch et al. Towards a Resilient Shared Memory Concept for Distributed Persistent Object Systems, Proceedings of the 28th Annual Hawaii Intl. Conference on System Sciences, 1995, IEEE, pp. 675 684. * |
Java Dynamic Class Loader, IBM Technical Disclosure Bulletin, vol. 39, No. 11, Nov. 1996, pp. 107 108. * |
Koppe C. "Sleeping Threads: A Kernel Mechanism for Support of Efficient User Level Threads," Proceedings of Seventh IASTED-ISMM International Conference on Parallel and Distributed Computing and Systems, Washington, DC, Oct. 19-21, pp. 11-15. |
Koppe C. Sleeping Threads: A Kernel Mechanism for Support of Efficient User Level Threads, Proceedings of Seventh IASTED ISMM International Conference on Parallel and Distributed Computing and Systems, Washington, DC, Oct. 19 21, pp. 11 15. * |
Lea et al. "COOL: System Support for Distributed Programming," Communications of the ACM, vol. 36, No. 9, pp. 37-46. |
Lea et al. COOL: System Support for Distributed Programming, Communications of the ACM, vol. 36, No. 9, pp. 37 46. * |
Lee, E., et al. "Petal: Distributed Virtual Disks," 7th International Conference on Architectural Support for Programming Languages and Operation Systems, Cambridge, MA, Oct. 1-5, 1996, pp. 84-92. |
Lee, E., et al. Petal: Distributed Virtual Disks, 7th International Conference on Architectural Support for Programming Languages and Operation Systems, Cambridge, MA, Oct. 1 5, 1996, pp. 84 92. * |
Li, Kai, "Shared Virtual Memory on Loosely Coupled Multiprocessors," Yale University, Department of Computer Science, (Sep., 1986). |
Li, Kai, Shared Virtual Memory on Loosely Coupled Multiprocessors, Yale University, Department of Computer Science, (Sep., 1986). * |
Measurement Techniques Inc. Web Page, http://www.lancache.com/pr1 4.html, printed May 20, 1997. * |
Measurement Techniques Inc. Web Page, http://www.lancache.com/pr1- 4.html, printed May 20, 1997. |
Measurement Techniques Inc. Web Page, http://www.lancache.com/slc.html, printed on May 20, 1997. * |
Neal, D. "The Harvest Object Cache in New Zealand," Computer Networks and ISDN Systems, vol. 11, No. 28, May 1996, pp. 1415-1430. |
Neal, D. The Harvest Object Cache in New Zealand, Computer Networks and ISDN Systems, vol. 11, No. 28, May 1996, pp. 1415 1430. * |
Network Appliance, Inc. Web Page, http://www.netapp.com/news/level3b/news rel 970421.html, printed on May 22, 1997. * |
Network Appliance, Inc. Web Page, http://www.netapp.com/news/level3b/news- rel- 970421.html, printed on May 22, 1997. |
Network Appliance, Inc. Web Page, http://www.netapp.com/products/level 3/nfs.html, printed on May 22, 1997. * |
Network Appliance, Inc. Web Page, http://www.netapp.com/products/level3/netcache/datasheet.html, printed on May 22, 1997. * |
Network Appliance, Inc. Web Page, http://www.netapp.com/products/level3/ontap.html, printed on May 22, 1997. * |
Network Appliance, Inc. Web Page, http://www.netapp.com/products/level3/webfiler.html, printed on May 22, 1997. * |
Network Appliance, Inc. Web Page, http://www.netapp.com/products/level3/windows.html, printed on May 22, 1997. * |
Ng, T. "The Design and Implementation of a Reliable Disbrituted Operating System-ROSE," Proceedings of the Symposium on Reliable Distributed Systems, Huntsville, Oct. 9-11, 1990, pp. 2-11. |
Ng, T. The Design and Implementation of a Reliable Disbrituted Operating System ROSE, Proceedings of the Symposium on Reliable Distributed Systems, Huntsville, Oct. 9 11, 1990, pp. 2 11. * |
Patent Cooperation Treaty, International Search Report, International Application No. PCT/US 97/21457, mailed on Apr. 23, 1998, 4 pages. * |
Patent Cooperation Treaty, International Search Report, International Application No. PCT/US 97/21458, mailed on Apr. 23, 1998, 3 pages. * |
Patent Cooperation Treaty, International Search Report, International Application No. PCT/US 97/21459, mailed on Apr. 23, 1998, 4 pages. * |
Patent Cooperation Treaty, International Search Report, International Application No. PCT/US 97/21460, mailed on Apr. 23, 1998, 5 pages. * |
Patent Cooperation Treaty, International Search Report, International Application No. PCT/US 97/21466, mailed on Apr. 23, 1998, 3 pages. * |
Patent Cooperation Treaty, International Search Report, International Application No. PCT/US 97/21733, mailed on Apr. 23, 1998, 3 pages. * |
Patent Cooperation Treaty, International Search Report, International Application No. PCT/US 97/21734, mailed on Apr. 23, 1998, 4 pages. * |
Peak Technologies, Inc. Web Page, http://www.peak media.com/PeakJet/quick.html, printed on May 20, 1997. * |
Peak Technologies, Inc. Web Page, http://www.peakJet/PeakJet.html, printed on May 20, 1997. * |
Peak Technologies, Inc. Web Page, http://www.peak-media.com/PeakJet/quick.html, printed on May 20, 1997. |
Raghavan, G. "A Domain Model of WWW Browsers," Proceedings of Southeastcon, Bringing Together Education, Science and Technology, Tampa, Apr. 11-14, 1996, pp. 436-439. |
Raghavan, G. A Domain Model of WWW Browsers, Proceedings of Southeastcon, Bringing Together Education, Science and Technology, Tampa, Apr. 11 14, 1996, pp. 436 439. * |
Relay Web Page, http://www.relay.com/product/gold.html, printed on May 22, 1997. * |
Relay Web Page, http://www.relay.com/product/otg.html, printed on May 22, 1997. * |
Sequel Technology Web Page, http://www.sequeltech.com/product/netPIM/prodinfo.html, printed on May 22, 1997. * |
Software Agents, Genesereth et al., Communications of the ACM, Jul. 1994, vol. 37, No. 7, pp. 48 53. * |
Stac Inc. Web Page, http://www.stac.com/replica/pr legatoagreement.html, printed on May 22, 1997. * |
Stac Inc. Web Page, http://www.stac.com/replica/pr-legatoagreement.html, printed on May 22, 1997. |
Support for Collaborative Design: Agents and Emergence, Edmonds et al., Communications of the ACM, Jul. 1994, vol. 37, No. 7, pp. 41 47. * |
Tricord Systems, Inc. Web Page, http://www.tricord.com/2/10/10 3 96.html, printed on May 22, 1997. * |
Tricord Systems, Inc. Web Page, http://www.tricord.com/2/10/10-3-96.html, printed on May 22, 1997. |
Wilson, Andrew W., "Hierachical Cache/Bus Architecture for Shared Memory Multiprocessors," ACM, pp. 242-252 (1987). |
Wilson, Andrew W., "Organization and Statistical Simulation of Hierarchical Multiprocessors," UMI Dissertation Information Service (1985). |
Wilson, Andrew W., Hierachical Cache/Bus Architecture for Shared Memory Multiprocessors, ACM , pp. 242 252 (1987). * |
Wilson, Andrew W., Organization and Statistical Simulation of Hierarchical Multiprocessors, UMI Dissertation Information Service (1985). * |
Yeung, D., et al. "MGS" A Multigrain Shared Memory System, Computer Architecture News, vol. 24, No. 2, May 1, 1996, pp. 44-55. |
Yeung, D., et al. MGS A Multigrain Shared Memory System, Computer Architecture News, vol. 24, No. 2, May 1, 1996, pp. 44 55. * |
Cited By (625)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US5987506A (en) * | 1996-11-22 | 1999-11-16 | Mangosoft Corporation | Remote access and geographically distributed computers in a globally addressable storage environment |
US6192514B1 (en) * | 1997-02-19 | 2001-02-20 | Unisys Corporation | Multicomputer system |
US6151683A (en) * | 1997-03-31 | 2000-11-21 | Sun Microsystems, Inc. | Rebuilding computer states remotely |
US6170045B1 (en) * | 1997-04-30 | 2001-01-02 | International Business Machines Corporation | Cross-system data piping using an external shared memory |
US6035326A (en) * | 1997-05-07 | 2000-03-07 | International Business Machines Corporation | Mapping table lookup optimization system |
US6182249B1 (en) | 1997-05-12 | 2001-01-30 | Sun Microsystems, Inc. | Remote alert monitoring and trend analysis |
US6154128A (en) * | 1997-05-21 | 2000-11-28 | Sun Microsystems, Inc. | Automatic building and distribution of alerts in a remote monitoring system |
US6026472A (en) * | 1997-06-24 | 2000-02-15 | Intel Corporation | Method and apparatus for determining memory page access information in a non-uniform memory access computer system |
US6163806A (en) * | 1997-06-30 | 2000-12-19 | Sun Microsystems, Inc. | System and method for transparent, global access to physical devices on a computer cluster |
US6886162B1 (en) * | 1997-08-29 | 2005-04-26 | International Business Machines Corporation | High speed methods for maintaining a summary of thread activity for multiprocessor computer systems |
US6289424B1 (en) | 1997-09-19 | 2001-09-11 | Silicon Graphics, Inc. | Method, system and computer program product for managing memory in a non-uniform memory access system |
US6249802B1 (en) * | 1997-09-19 | 2001-06-19 | Silicon Graphics, Inc. | Method, system, and computer program product for allocating physical memory in a distributed shared memory network |
US6336177B1 (en) | 1997-09-19 | 2002-01-01 | Silicon Graphics, Inc. | Method, system and computer program product for managing memory in a non-uniform memory access system |
US6314437B1 (en) * | 1997-09-30 | 2001-11-06 | Infraworks Corporation | Method and apparatus for real-time secure file deletion |
US6070174A (en) * | 1997-09-30 | 2000-05-30 | Infraworks Corporation | Method and apparatus for real-time secure file deletion |
US6092213A (en) * | 1997-09-30 | 2000-07-18 | Tandem Computers Incorporated | Fault tolerant method of maintaining and distributing configuration information in a distributed processing system |
US6279032B1 (en) * | 1997-11-03 | 2001-08-21 | Microsoft Corporation | Method and system for quorum resource arbitration in a server cluster |
US6460071B1 (en) * | 1997-11-21 | 2002-10-01 | International Business Machines Corporation | System and method for managing client application state in a stateless web browser environment |
US6098179A (en) * | 1998-01-22 | 2000-08-01 | Digital Equipment Corporation | Method and apparatus for performing error detection |
US6567774B1 (en) * | 1998-01-30 | 2003-05-20 | Compaq Computer Corporation | Method and system for configuring and updating networked client stations using a virtual disk and a snapshot disk |
US6230246B1 (en) * | 1998-01-30 | 2001-05-08 | Compaq Computer Corporation | Non-intrusive crash consistent copying in distributed storage systems without client cooperation |
US20040133570A1 (en) * | 1998-03-20 | 2004-07-08 | Steven Soltis | Shared file system |
US6697846B1 (en) * | 1998-03-20 | 2004-02-24 | Dataplow, Inc. | Shared file system |
US7743111B2 (en) | 1998-03-20 | 2010-06-22 | Data Plow, Inc. | Shared file system |
US6330709B1 (en) * | 1998-03-30 | 2001-12-11 | International Business Machines Corporation | Virtual machine implementation for shared persistent objects |
US6094663A (en) * | 1998-03-31 | 2000-07-25 | Apple Computer, Inc. | Method and apparatus for implementing atomic queues |
US6289358B1 (en) | 1998-04-15 | 2001-09-11 | Inktomi Corporation | Delivering alternate versions of objects from an object cache |
US6453319B1 (en) | 1998-04-15 | 2002-09-17 | Inktomi Corporation | Maintaining counters for high performance object cache |
US6128627A (en) * | 1998-04-15 | 2000-10-03 | Inktomi Corporation | Consistent data storage in an object cache |
US6202124B1 (en) * | 1998-05-05 | 2001-03-13 | International Business Machines Corporation | Data storage system with outboard physical data transfer operation utilizing data path distinct from host |
US6173413B1 (en) * | 1998-05-12 | 2001-01-09 | Sun Microsystems, Inc. | Mechanism for maintaining constant permissions for multiple instances of a device within a cluster |
US6789122B1 (en) * | 1998-05-12 | 2004-09-07 | Sun Microsystems, Inc. | Mechanism for reliable update of virtual disk device mappings without corrupting data |
US6237114B1 (en) | 1998-05-13 | 2001-05-22 | Sun Microsystems, Inc. | System and method for evaluating monitored computer systems |
US6163856A (en) * | 1998-05-29 | 2000-12-19 | Sun Microsystems, Inc. | Method and apparatus for file system disaster recovery |
US20040064527A1 (en) * | 1998-06-30 | 2004-04-01 | Jean Brunet | Agent for communication between a manager and at least one resource, and tool library for creating the agent |
US7562126B2 (en) * | 1998-06-30 | 2009-07-14 | Thomson Licensing S.A. | Agent for communication between a manager and at least one resource, and tool library for creating the agent |
US9361243B2 (en) | 1998-07-31 | 2016-06-07 | Kom Networks Inc. | Method and system for providing restricted access to a storage medium |
US6330567B1 (en) * | 1998-08-13 | 2001-12-11 | Tornado Technologies Co., Ltd | Searching system for searching files stored in a hard disk of a personal computer |
US6405217B1 (en) * | 1998-09-21 | 2002-06-11 | Microsoft Corporation | State-based implementation of transactions on a file system |
US6144970A (en) * | 1998-09-24 | 2000-11-07 | International Business Machines Corporation | Technique for inplace reorganization of a LOB table space |
US6202149B1 (en) | 1998-09-30 | 2001-03-13 | Ncr Corporation | Automated application fail-over for coordinating applications with DBMS availability |
US6263433B1 (en) * | 1998-09-30 | 2001-07-17 | Ncr Corporation | Provision of continuous database service and scalable query performance using active redundant copies |
US6178519B1 (en) * | 1998-12-10 | 2001-01-23 | Mci Worldcom, Inc. | Cluster-wide database system |
WO2000034895A1 (en) * | 1998-12-10 | 2000-06-15 | Mci Worldcom, Inc. | Cluster-wide database system |
US6389551B1 (en) * | 1998-12-17 | 2002-05-14 | Steeleye Technology, Inc. | Method of preventing false or unnecessary failovers in a high availability cluster by using a quorum service |
US6434626B1 (en) * | 1999-01-14 | 2002-08-13 | Compaq Information Technologies Group, L.P. | Method and apparatus for low latency network performance monitoring |
US7774315B1 (en) * | 1999-03-12 | 2010-08-10 | Eldad Galker | Backup system |
US6453426B1 (en) | 1999-03-26 | 2002-09-17 | Microsoft Corporation | Separately storing core boot data and cluster configuration data in a server cluster |
US7984155B2 (en) * | 1999-03-26 | 2011-07-19 | Microsoft Corporation | Consistent cluster operational data in a server cluster using a quorum of replicas |
US20060090095A1 (en) * | 1999-03-26 | 2006-04-27 | Microsoft Corporation | Consistent cluster operational data in a server cluster using a quorum of replicas |
US20100250750A1 (en) * | 1999-03-26 | 2010-09-30 | Microsoft Corporation | Consistent cluster operational data in a server cluster using a quorum of replicas |
US7774469B2 (en) * | 1999-03-26 | 2010-08-10 | Massa Michael T | Consistent cluster operational data in a server cluster using a quorum of replicas |
US8850007B2 (en) | 1999-03-26 | 2014-09-30 | Microsoft Corporation | Consistent cluster operational data in a server cluster using a quorum of replicas |
US6401120B1 (en) | 1999-03-26 | 2002-06-04 | Microsoft Corporation | Method and system for consistent cluster operational data in a server cluster using a quorum of replicas |
US20110238842A1 (en) * | 1999-03-26 | 2011-09-29 | Microsoft Corporation | Consistent cluster operational data in a server cluster using a quorum of replicas |
US20020161889A1 (en) * | 1999-03-26 | 2002-10-31 | Rod Gamache | Method and system for consistent cluster operational data in a server cluster using a quorum of replicas |
US8850018B2 (en) | 1999-03-26 | 2014-09-30 | Microsoft Corporation | Consistent cluster operational data in a server cluster using a quorum of replicas |
US6938084B2 (en) | 1999-03-26 | 2005-08-30 | Microsoft Corporation | Method and system for consistent cluster operational data in a server cluster using a quorum of replicas |
US20060036896A1 (en) * | 1999-03-26 | 2006-02-16 | Microsoft Corporation | Method and system for consistent cluster operational data in a server cluster using a quorum of replicas |
US6222529B1 (en) | 1999-05-05 | 2001-04-24 | Shareware, Inc. | Method and apparatus for providing multiple sessions on a single user operating system |
US6505382B1 (en) | 1999-05-14 | 2003-01-14 | Apple Computer, Inc. | Hinge apparatus with cam mechanism |
US20060010150A1 (en) * | 1999-05-18 | 2006-01-12 | Kom, Inc. | Method and System for Electronic File Lifecycle Management |
US8782009B2 (en) | 1999-05-18 | 2014-07-15 | Kom Networks Inc. | Method and system for electronic file lifecycle management |
US20080263112A1 (en) * | 1999-05-18 | 2008-10-23 | Kom Inc. | Method and system for electronic file lifecycle management |
US6760756B1 (en) * | 1999-06-23 | 2004-07-06 | Mangosoft Corporation | Distributed virtual web cache implemented entirely in software |
US6742015B1 (en) | 1999-08-31 | 2004-05-25 | Accenture Llp | Base services patterns in a netcentric environment |
US6636242B2 (en) | 1999-08-31 | 2003-10-21 | Accenture Llp | View configurer in a presentation services patterns environment |
US6954220B1 (en) | 1999-08-31 | 2005-10-11 | Accenture Llp | User context component in environment services patterns |
US6615253B1 (en) | 1999-08-31 | 2003-09-02 | Accenture Llp | Efficient server side data retrieval for execution of client side applications |
US6715145B1 (en) | 1999-08-31 | 2004-03-30 | Accenture Llp | Processing pipeline in a base services pattern environment |
US6601192B1 (en) | 1999-08-31 | 2003-07-29 | Accenture Llp | Assertion component in environment services patterns |
US6640238B1 (en) | 1999-08-31 | 2003-10-28 | Accenture Llp | Activity component in a presentation services patterns environment |
US6640244B1 (en) | 1999-08-31 | 2003-10-28 | Accenture Llp | Request batcher in a transaction services patterns environment |
US6640249B1 (en) | 1999-08-31 | 2003-10-28 | Accenture Llp | Presentation services patterns in a netcentric environment |
US6549949B1 (en) | 1999-08-31 | 2003-04-15 | Accenture Llp | Fixed format stream in a communication services patterns environment |
US6601234B1 (en) * | 1999-08-31 | 2003-07-29 | Accenture Llp | Attribute dictionary in a business logic services environment |
US6842906B1 (en) | 1999-08-31 | 2005-01-11 | Accenture Llp | System and method for a refreshable proxy pool in a communication services patterns environment |
US6571282B1 (en) | 1999-08-31 | 2003-05-27 | Accenture Llp | Block-based communication in a communication services patterns environment |
US6578068B1 (en) | 1999-08-31 | 2003-06-10 | Accenture Llp | Load balancer in environment services patterns |
US7289964B1 (en) | 1999-08-31 | 2007-10-30 | Accenture Llp | System and method for transaction services patterns in a netcentric environment |
US6609215B1 (en) | 1999-10-21 | 2003-08-19 | International Business Machines Corporation | Method and system for implementing network filesystem-based customized computer system automated rebuild tool |
US6516325B1 (en) * | 1999-11-16 | 2003-02-04 | Novell, Inc. | Virtual partition vector for a computer directory system |
US6662219B1 (en) | 1999-12-15 | 2003-12-09 | Microsoft Corporation | System for determining at subgroup of nodes relative weight to represent cluster by obtaining exclusive possession of quorum resource |
US7921080B2 (en) * | 1999-12-20 | 2011-04-05 | Emc Corporation | System and method for a backup parallel server data storage system |
US20040220981A1 (en) * | 1999-12-20 | 2004-11-04 | Taylor Kenneth J | System and method for a backup parallel server data storage system |
GB2373902B (en) * | 1999-12-21 | 2004-10-20 | Intel Corp | Architecture for dynamically exposing hardware capabilities using a page description language |
US6769008B1 (en) | 2000-01-10 | 2004-07-27 | Sun Microsystems, Inc. | Method and apparatus for dynamically altering configurations of clustered computer systems |
US6748429B1 (en) | 2000-01-10 | 2004-06-08 | Sun Microsystems, Inc. | Method to dynamically change cluster or distributed system configuration |
US6757836B1 (en) | 2000-01-10 | 2004-06-29 | Sun Microsystems, Inc. | Method and apparatus for resolving partial connectivity in a clustered computing system |
US6862613B1 (en) | 2000-01-10 | 2005-03-01 | Sun Microsystems, Inc. | Method and apparatus for managing operations of clustered computer systems |
US6658587B1 (en) | 2000-01-10 | 2003-12-02 | Sun Microsystems, Inc. | Emulation of persistent group reservations |
US6789213B2 (en) * | 2000-01-10 | 2004-09-07 | Sun Microsystems, Inc. | Controlled take over of services by remaining nodes of clustered computing system |
US6546404B1 (en) * | 2000-01-29 | 2003-04-08 | International Business Machines Corporation | Data migration tool |
US20010047348A1 (en) * | 2000-02-01 | 2001-11-29 | Lemuel Davis | Consumer driven content media duplication system |
US6934874B2 (en) * | 2000-02-11 | 2005-08-23 | Daimlerchrysler Ag | Method and apparatus for ensuring integrity of transmitted data in a distributed control system |
US20010020281A1 (en) * | 2000-02-11 | 2001-09-06 | Jochen Retter | Electronic control system |
US20050022052A1 (en) * | 2000-02-18 | 2005-01-27 | Moulton Gregory Hagan | System and method for data protection with multidimensional parity |
US20010044879A1 (en) * | 2000-02-18 | 2001-11-22 | Moulton Gregory Hagan | System and method for distributed management of data storage |
US7558856B2 (en) | 2000-02-18 | 2009-07-07 | Emc Corporation | System and method for intelligent, globally distributed network storage |
WO2001061491A1 (en) * | 2000-02-18 | 2001-08-23 | Avamar Technologies, Inc. | System and method for data protection with multidimensional parity |
US20010034795A1 (en) * | 2000-02-18 | 2001-10-25 | Moulton Gregory Hagan | System and method for intelligent, globally distributed network storage |
US6826711B2 (en) | 2000-02-18 | 2004-11-30 | Avamar Technologies, Inc. | System and method for data protection with multidimensional parity |
US20050120137A1 (en) * | 2000-02-18 | 2005-06-02 | Moulton Gregory H. | System and method for intelligent, globally distributed network storage |
US10269025B2 (en) | 2000-03-30 | 2019-04-23 | Intellectual Ventures Ii Llc | Monetizing network connected user bases utilizing distributed processing systems |
US20050120059A1 (en) * | 2000-03-30 | 2005-06-02 | Microsoft Corporation | Transactional file system |
US20010027467A1 (en) * | 2000-03-30 | 2001-10-04 | Anderson David P. | Massively distributed database system and associated method |
US7003547B1 (en) | 2000-03-30 | 2006-02-21 | United Devices, Inc. | Distributed parallel processing system having capability-based incentives and associated method |
US7020678B1 (en) | 2000-03-30 | 2006-03-28 | United Devices, Inc. | Machine generated sweepstakes entry model and associated distributed processing system |
USRE42153E1 (en) * | 2000-03-30 | 2011-02-15 | Hubbard Edward A | Dynamic coordination and control of network connected devices for large-scale network site testing and associated architectures |
US6654783B1 (en) | 2000-03-30 | 2003-11-25 | Ethergent Corporation | Network site content indexing method and associated system |
US7039670B2 (en) | 2000-03-30 | 2006-05-02 | United Devices, Inc. | Massively distributed processing system with modular client agent and associated method |
US6963897B1 (en) | 2000-03-30 | 2005-11-08 | United Devices, Inc. | Customer services and advertising based upon device attributes and associated distributed processing system |
US20050149532A1 (en) * | 2000-03-30 | 2005-07-07 | United Devices, Inc. | Customer services and advertising based upon device attributes and associated distributed processing system |
US20050149525A1 (en) * | 2000-03-30 | 2005-07-07 | Microsoft Corporation | Transactional file system |
US7082474B1 (en) | 2000-03-30 | 2006-07-25 | United Devices, Inc. | Data sharing and file distribution method and associated distributed processing system |
US20050138085A1 (en) * | 2000-03-30 | 2005-06-23 | Microsoft Corporation | Transactional file system |
US20050120036A1 (en) * | 2000-03-30 | 2005-06-02 | Microsoft Corporation | Transactional file system |
US20040103139A1 (en) * | 2000-03-30 | 2004-05-27 | United Devices, Inc. | Distributed processing system having sensor based data collection and associated method |
US8010559B2 (en) | 2000-03-30 | 2011-08-30 | Microsoft Corporation | Transactional file system |
US20100042626A1 (en) * | 2000-03-30 | 2010-02-18 | Microsoft Corporation | Transactional File System |
US20030149765A1 (en) * | 2000-03-30 | 2003-08-07 | Hubbard Edward A. | Dynamic coordination and control of network connected devices for large-scale network site testing and associated architectures |
US8010703B2 (en) | 2000-03-30 | 2011-08-30 | Prashtama Wireless Llc | Data conversion services and associated distributed processing system |
US7092985B2 (en) | 2000-03-30 | 2006-08-15 | United Devices, Inc. | Method of managing workloads and associated distributed processing system |
US6891802B1 (en) | 2000-03-30 | 2005-05-10 | United Devices, Inc. | Network site testing method and associated system |
US20100036723A1 (en) * | 2000-03-30 | 2010-02-11 | Hubbard Edward A | Sweepstakes Incentive Model and Associated System |
US20040148336A1 (en) * | 2000-03-30 | 2004-07-29 | Hubbard Edward A | Massively distributed processing system architecture, scheduling, unique device identification and associated methods |
US7613698B2 (en) * | 2000-03-30 | 2009-11-03 | Microsoft Corporation | Transactional file system |
US7254607B2 (en) | 2000-03-30 | 2007-08-07 | United Devices, Inc. | Dynamic coordination and control of network connected devices for large-scale network site testing and associated architectures |
US20090222508A1 (en) * | 2000-03-30 | 2009-09-03 | Hubbard Edward A | Network Site Testing |
US20090216649A1 (en) * | 2000-03-30 | 2009-08-27 | Hubbard Edward A | Capability Based Distributed Processing |
US7257595B2 (en) | 2000-03-30 | 2007-08-14 | Microsoft Corporation | Transactional file system |
US8249940B2 (en) | 2000-03-30 | 2012-08-21 | Niration Network Group, LLC | Capability based distributed processing |
US7418463B2 (en) * | 2000-03-30 | 2008-08-26 | Microsoft Corporation | Transactional file system |
US8510336B2 (en) | 2000-03-30 | 2013-08-13 | Microsoft Corporation | Transactional file system |
US6856993B1 (en) * | 2000-03-30 | 2005-02-15 | Microsoft Corporation | Transactional file system |
US7512636B2 (en) | 2000-03-30 | 2009-03-31 | Microsoft Corporation | Transactional file system |
US20090164533A1 (en) * | 2000-03-30 | 2009-06-25 | Niration Network Group, L.L.C. | Method of Managing Workloads and Associated Distributed Processing System |
US6847995B1 (en) | 2000-03-30 | 2005-01-25 | United Devices, Inc. | Security architecture for distributed processing systems and associated method |
US20090132649A1 (en) * | 2000-03-30 | 2009-05-21 | Niration Network Group, L.L.C. | Method of Managing Workloads and Associated Distributed Processing System |
US20040215829A1 (en) * | 2000-03-30 | 2004-10-28 | United Devices, Inc. | Data conversion services and associated distributed processing system |
US20050010664A1 (en) * | 2000-03-30 | 2005-01-13 | United Devices, Inc. | Method of managing workloads and associated distributed processing system |
US20090138551A1 (en) * | 2000-03-30 | 2009-05-28 | Niration Network Group, L.L.C. | Method of Managing Workloads and Associated Distributed Processing System |
US20030033543A1 (en) * | 2000-03-30 | 2003-02-13 | United Devices, Inc. | Massively distributed processing system with modular client agent and associated method |
US20020055972A1 (en) * | 2000-05-08 | 2002-05-09 | Weinman Joseph Bernard | Dynamic content distribution and data continuity architecture |
US6873987B1 (en) * | 2000-05-31 | 2005-03-29 | International Business Machines Corporation | Method, system and program products for recovering from failures within a shared nothing distributed computing environment |
US20020007366A1 (en) * | 2000-06-09 | 2002-01-17 | Fontijn Wilhelmus Franciscus Johannes | Method of implicit partitioning the storage space available on a storage medium |
US6868429B2 (en) * | 2000-06-09 | 2005-03-15 | Koninklijke Philips Electronics N.V. | Method of implicit partitioning the storage space available on a storage medium |
EP1290556A4 (en) * | 2000-06-16 | 2007-08-29 | Bull Hn Information Syst | Fast relief swapping of processors in a data processing system |
EP1290556A1 (en) * | 2000-06-16 | 2003-03-12 | Bull HN Information Systems Inc. | Fast relief swapping of processors in a data processing system |
US20020000991A1 (en) * | 2000-06-30 | 2002-01-03 | Arto Lehtonen | Method and system for displaying markup language based pages on handheld devices |
US7042473B2 (en) * | 2000-06-30 | 2006-05-09 | Nokia Mobile Phones, Ltd. | Method and system for displaying markup language based pages on handheld devices |
US20020078445A1 (en) * | 2000-07-11 | 2002-06-20 | Imran Sharif | Internet appliance for interactive audio/video display using a remote control unit for user input |
US6980313B2 (en) | 2000-07-11 | 2005-12-27 | Imran Sharif | Fax-compatible internet appliance |
US20030115167A1 (en) * | 2000-07-11 | 2003-06-19 | Imran Sharif | Web browser implemented in an Internet appliance |
US7245291B2 (en) | 2000-07-11 | 2007-07-17 | Imran Sharif | System and method for internet appliance data entry and navigation |
US20020101620A1 (en) * | 2000-07-11 | 2002-08-01 | Imran Sharif | Fax-compatible Internet appliance |
US6928521B1 (en) | 2000-08-01 | 2005-08-09 | International Business Machines Corporation | Method, system, and data structures for using metadata in updating data in a storage device |
US20050144178A1 (en) * | 2000-09-12 | 2005-06-30 | Chrin David M. | Distributing files across multiple, permissibly heterogeneous, storage devices |
US8977659B2 (en) * | 2000-09-12 | 2015-03-10 | Hewlett-Packard Development Company, L.P. | Distributing files across multiple, permissibly heterogeneous, storage devices |
US8935307B1 (en) | 2000-09-12 | 2015-01-13 | Hewlett-Packard Development Company, L.P. | Independent data access in a segmented file system |
US7406484B1 (en) | 2000-09-12 | 2008-07-29 | Tbrix, Inc. | Storage allocation in a distributed segmented file system |
US7769711B2 (en) | 2000-09-12 | 2010-08-03 | Hewlett-Packard Development Company, L.P. | Migration of control in a distributed segmented file system |
US7836017B1 (en) | 2000-09-12 | 2010-11-16 | Hewlett-Packard Development Company, L.P. | File replication in a distributed segmented file system |
US20070288494A1 (en) * | 2000-09-12 | 2007-12-13 | Ibrix, Inc. | Distributing files across multiple, permissibly heterogeneous, storage devices |
US20060288080A1 (en) * | 2000-09-12 | 2006-12-21 | Ibrix, Inc. | Balanced computer architecture |
US20070226331A1 (en) * | 2000-09-12 | 2007-09-27 | Ibrix, Inc. | Migration of control in a distributed segmented file system |
US6687716B1 (en) * | 2000-09-13 | 2004-02-03 | Radiant Data Corporation | File consistency protocols and methods for carrying out the protocols |
US6611848B1 (en) * | 2000-09-13 | 2003-08-26 | Radiant Data Corporation | Methods for maintaining data and attribute coherency in instances of sharable files |
US6633870B1 (en) * | 2000-09-13 | 2003-10-14 | Radiant Data Corporation | Protocols for locking sharable files and methods for carrying out the protocols |
US6978280B1 (en) * | 2000-10-12 | 2005-12-20 | Hewlett-Packard Development Company, L.P. | Method and system for improving LUN-based backup reliability |
US8219639B2 (en) | 2000-12-22 | 2012-07-10 | Soltis Steven R | Storage area network file system |
US20090240784A1 (en) * | 2000-12-22 | 2009-09-24 | Soltis Steven R | Storage Area Network File System |
US20070094354A1 (en) * | 2000-12-22 | 2007-04-26 | Soltis Steven R | Storage area network file system |
US7552197B2 (en) | 2000-12-22 | 2009-06-23 | Dataplow, Inc. | Storage area network file system |
US7165096B2 (en) | 2000-12-22 | 2007-01-16 | Data Plow, Inc. | Storage area network file system |
US20020083120A1 (en) * | 2000-12-22 | 2002-06-27 | Soltis Steven R. | Storage area network file system |
US20050066184A1 (en) * | 2001-01-17 | 2005-03-24 | Microsoft Corporation | Exclusive encryption |
US20050066183A1 (en) * | 2001-01-17 | 2005-03-24 | Microsoft Corporation | Exclusive encryption |
US7555656B2 (en) | 2001-01-17 | 2009-06-30 | Microsoft Corporation | Exclusive encryption |
US7475258B2 (en) | 2001-01-17 | 2009-01-06 | Microsoft Corporation | Exclusive encryption |
US7571327B2 (en) | 2001-01-17 | 2009-08-04 | Microsoft Corporation | Exclusive encryption |
US7685415B2 (en) | 2001-01-17 | 2010-03-23 | Microsoft Corporation | Exclusive encryption |
US7047420B2 (en) | 2001-01-17 | 2006-05-16 | Microsoft Corporation | Exclusive encryption |
US20060107048A1 (en) * | 2001-01-17 | 2006-05-18 | Microsoft Corporation | Exclusive Encryption |
US20070076881A1 (en) * | 2001-01-17 | 2007-04-05 | Microsoft Corporation | Exclusive Encryption |
US7770023B2 (en) | 2001-01-17 | 2010-08-03 | Microsoft Corporation | Exclusive encryption |
US7054927B2 (en) | 2001-01-29 | 2006-05-30 | Adaptec, Inc. | File system metadata describing server directory information |
US20020174295A1 (en) * | 2001-01-29 | 2002-11-21 | Ulrich Thomas R. | Enhanced file system failure tolerance |
US7356730B2 (en) | 2001-01-29 | 2008-04-08 | Adaptec, Inc. | Dynamic redistribution of parity groups |
US20060031287A1 (en) * | 2001-01-29 | 2006-02-09 | Ulrich Thomas R | Systems and methods for load balancing drives and servers |
US8943513B2 (en) | 2001-01-29 | 2015-01-27 | Overland Storage, Inc. | Systems and methods for load balancing drives and servers by pushing a copy of a frequently accessed file to another disk drive |
US20050144514A1 (en) * | 2001-01-29 | 2005-06-30 | Ulrich Thomas R. | Dynamic redistribution of parity groups |
US10079878B2 (en) | 2001-01-29 | 2018-09-18 | Overland Storage, Inc. | Systems and methods for load balancing drives and servers by pushing a copy of a frequently accessed file to another disk drive |
US8782661B2 (en) | 2001-01-29 | 2014-07-15 | Overland Storage, Inc. | Systems and methods for load balancing drives and servers |
US20020156840A1 (en) * | 2001-01-29 | 2002-10-24 | Ulrich Thomas R. | File system metadata |
US20080126704A1 (en) * | 2001-01-29 | 2008-05-29 | Adaptec, Inc. | Systems and methods for storing parity groups |
US7917695B2 (en) | 2001-01-29 | 2011-03-29 | Overland Storage, Inc. | Systems and methods for storing parity groups |
US8214590B2 (en) | 2001-01-29 | 2012-07-03 | Overland Storage, Inc. | Systems and methods for storing parity groups |
EP1370945A1 (en) * | 2001-02-13 | 2003-12-17 | Candera, Inc. | Failover processing in a storage system |
EP1370945A4 (en) * | 2001-02-13 | 2008-01-02 | Candera Inc | Failover processing in a storage system |
US6606690B2 (en) * | 2001-02-20 | 2003-08-12 | Hewlett-Packard Development Company, L.P. | System and method for accessing a storage area network as network attached storage |
US7089339B2 (en) * | 2001-03-16 | 2006-08-08 | National Semiconductor Corporation | Sharing of functions between an embedded controller and a host processor |
US20020133655A1 (en) * | 2001-03-16 | 2002-09-19 | Ohad Falik | Sharing of functions between an embedded controller and a host processor |
US7865646B1 (en) | 2001-03-16 | 2011-01-04 | National Semiconductor Corporation | Sharing of functions between an embedded controller and a host processor |
US7478243B2 (en) * | 2001-03-21 | 2009-01-13 | Microsoft Corporation | On-disk file format for serverless distributed file system with signed manifest of file modifications |
US20050108240A1 (en) * | 2001-03-21 | 2005-05-19 | Microsoft Corporation | On-disk file format for a serverless distributed file system |
US20050097313A1 (en) * | 2001-03-21 | 2005-05-05 | Microsoft Corporation | On-disk file format for a serverless distributed file system |
US7454612B2 (en) | 2001-03-21 | 2008-11-18 | Microsoft Corporation | On-disk file format for a serverless distributed file system |
US7539867B2 (en) * | 2001-03-21 | 2009-05-26 | Microsoft Corporation | On-disk file format for a serverless distributed file system |
US20050097318A1 (en) * | 2001-03-21 | 2005-05-05 | Microsoft Corporation | On-disk file format for a serverless distributed file system |
US7415608B2 (en) | 2001-03-21 | 2008-08-19 | Microsoft Corporation | On-disk file format for a serverless distributed file system |
US7401220B2 (en) | 2001-03-21 | 2008-07-15 | Microsoft Corporation | On-disk file format for a serverless distributed file system |
US20020194484A1 (en) * | 2001-03-21 | 2002-12-19 | Bolosky William J. | On-disk file format for serverless distributed file system with signed manifest of file modifications |
US20050097077A1 (en) * | 2001-03-21 | 2005-05-05 | Microsoft Corporation | On-disk file format for a serverless distributed file system |
US7886364B2 (en) | 2001-03-26 | 2011-02-08 | Microsoft Corporation | Encrypted key cache |
US6981138B2 (en) | 2001-03-26 | 2005-12-27 | Microsoft Corporation | Encrypted key cache |
US20050102268A1 (en) * | 2001-03-26 | 2005-05-12 | Microsoft Corporation | Serverless distributed file system |
US7240060B2 (en) | 2001-03-26 | 2007-07-03 | Microsoft Corporation | Serverless distributed file system |
US20050278525A1 (en) * | 2001-03-26 | 2005-12-15 | Microsoft Corporation | Encrypted key cache |
US7346774B2 (en) | 2001-03-26 | 2008-03-18 | Microsoft Corporation | Encrypted key cache |
US8112452B2 (en) | 2001-03-26 | 2012-02-07 | Microsoft Corporation | Serverless distributed file system |
US20060026425A1 (en) * | 2001-03-26 | 2006-02-02 | Microsoft Corporation | Encrypted key cache |
US20050044092A1 (en) * | 2001-03-26 | 2005-02-24 | Microsoft Corporation | Serverless distributed file system |
US7505970B2 (en) | 2001-03-26 | 2009-03-17 | Microsoft Corporation | Serverless distributed file system |
US20090132552A1 (en) * | 2001-03-26 | 2009-05-21 | Microsoft Corporation | Serverless Distributed File System |
US20020138722A1 (en) * | 2001-03-26 | 2002-09-26 | Douceur John R. | Encrypted key cache |
US20040148495A1 (en) * | 2001-06-05 | 2004-07-29 | Infineon Technologies Ag | Processor with internal memory configuration |
US7447880B2 (en) * | 2001-06-05 | 2008-11-04 | Infineon Technologies Ag | Processor with internal memory configuration |
US20050071315A1 (en) * | 2001-06-06 | 2005-03-31 | Microsoft Corporation | Locating potentially identical objects across multiple computers based on stochastic partitioning of workload |
US20050071340A1 (en) * | 2001-06-06 | 2005-03-31 | Microsoft Corporation | Locating potentially identical objects across multiple computers based on stochastic partitioning of workload |
US7571186B2 (en) | 2001-06-06 | 2009-08-04 | Microsoft Corporation | Locating potentially identical objects across multiple computers based on stochastic partitioning of workload |
US6988124B2 (en) | 2001-06-06 | 2006-01-17 | Microsoft Corporation | Locating potentially identical objects across multiple computers based on stochastic partitioning of workload |
US20030037022A1 (en) * | 2001-06-06 | 2003-02-20 | Atul Adya | Locating potentially identical objects across multiple computers |
US20030037094A1 (en) * | 2001-06-06 | 2003-02-20 | Douceur John R. | Locating potentially identical objects across multiple computers based on stochastic partitioning of workload |
US7487245B2 (en) | 2001-06-06 | 2009-02-03 | Microsoft Corporation | Locating potentially identical objects across multiple computers based on stochastic partitioning of workload |
US7519623B2 (en) | 2001-06-06 | 2009-04-14 | Microsoft Corporation | Locating potentially identical objects across multiple computers based on stochastic partitioning of workload |
US20050216538A1 (en) * | 2001-06-06 | 2005-09-29 | Microsoft Corporation | Locating potentially identical objects across multiple computers based on stochastic partitioning of workload |
US7444387B2 (en) | 2001-06-06 | 2008-10-28 | Microsoft Corporation | Locating potentially identical objects across multiple computers based on stochastic partitioning of workload |
US7359937B2 (en) | 2001-06-06 | 2008-04-15 | Microsoft Corporation | Locating potentially identical objects across multiple computers based on stochastic partitioning of workload |
US20050071339A1 (en) * | 2001-06-06 | 2005-03-31 | Microsoft Corporation | Locating potentially identical objects across multiple computers based on stochastic partitioning of workload |
US7509423B2 (en) | 2001-06-06 | 2009-03-24 | Microsoft Corporation | Locating potentially identical objects across multiple computers based on stochastic partitioning of workload |
US20050097148A1 (en) * | 2001-06-06 | 2005-05-05 | Microsoft Corporation | Locating potentially identical objects across multiple computers based on stochastic partitioning of workload |
US7272630B2 (en) | 2001-06-06 | 2007-09-18 | Microsoft Corporation | Locating potentially identical objects across multiple computers based on stochastic partitioning of workload |
US7310644B2 (en) | 2001-06-06 | 2007-12-18 | Microsoft Corporation | Locating potentially identical objects across multiple computers |
US20050071330A1 (en) * | 2001-06-06 | 2005-03-31 | Microsoft Corporation | Locating potentially identical objects across multiple computers based on stochastic partitioning of workload |
US7895249B2 (en) * | 2001-06-18 | 2011-02-22 | Microsoft Corporation | Selective file purging for delete or rename |
US20050027746A1 (en) * | 2001-06-18 | 2005-02-03 | Microsoft Corporation | Selective file purging for delete or rename |
US6714953B2 (en) * | 2001-06-21 | 2004-03-30 | International Business Machines Corporation | System and method for managing file export information |
US20030009449A1 (en) * | 2001-06-21 | 2003-01-09 | International Business Machines Corporation | System and method for managing file export information |
US7194513B2 (en) | 2001-07-08 | 2007-03-20 | Imran Sharif | System and method for using an internet appliance to send/receive digital content files as E-mail attachments |
US20030009528A1 (en) * | 2001-07-08 | 2003-01-09 | Imran Sharif | System and method for using an internet appliance to send/receive digital content files as E-mail attachments |
US7340490B2 (en) * | 2001-07-13 | 2008-03-04 | Sun Microsystems, Inc. | Storage network data replicator |
US20030014433A1 (en) * | 2001-07-13 | 2003-01-16 | Sun Microsystems, Inc. | Storage network data replicator |
US9659292B1 (en) * | 2001-08-30 | 2017-05-23 | EMC IP Holding Company LLC | Storage-based replication of e-commerce transactions in real time |
US20040236798A1 (en) * | 2001-09-11 | 2004-11-25 | Sudhir Srinivasan | Migration of control in a distributed segmented file system |
US7111197B2 (en) | 2001-09-21 | 2006-09-19 | Polyserve, Inc. | System and method for journal recovery for multinode environments |
US7437386B2 (en) | 2001-09-21 | 2008-10-14 | Hewlett-Packard Development Company, L.P. | System and method for a multi-node environment with shared storage |
WO2003025801A1 (en) * | 2001-09-21 | 2003-03-27 | Polyserve, Inc. | System and method for implementing journaling in a multi-node environment |
US20030065896A1 (en) * | 2001-09-21 | 2003-04-03 | Polyserve, Inc. | System and method for synchronization for enforcing mutual exclusion among multiple negotiators |
US20030065672A1 (en) * | 2001-09-21 | 2003-04-03 | Polyserve, Inc. | System and method for implementing journaling in a multi-node environment |
US7496646B2 (en) * | 2001-09-21 | 2009-02-24 | Hewlett-Packard Development Company, L.P. | System and method for management of a storage area network |
US7240057B2 (en) | 2001-09-21 | 2007-07-03 | Kingsbury Brent A | System and method for implementing journaling in a multi-node environment |
CN1320483C (en) * | 2001-09-21 | 2007-06-06 | 泛伺服公司 | System and method for implementing journaling in a multi-node environment |
US20050015640A1 (en) * | 2001-09-21 | 2005-01-20 | Polyserve, Inc. | System and method for journal recovery for multinode environments |
US20030065686A1 (en) * | 2001-09-21 | 2003-04-03 | Polyserve, Inc. | System and method for a multi-node environment with shared storage |
US7266722B2 (en) | 2001-09-21 | 2007-09-04 | Hewlett-Packard Development Company, L.P. | System and method for efficient lock recovery |
US20030065760A1 (en) * | 2001-09-21 | 2003-04-03 | Polyserve, Inc | System and method for management of a storage area network |
US20030079155A1 (en) * | 2001-09-21 | 2003-04-24 | Polyserve, Inc. | System and method for efficient lock recovery |
US20040202013A1 (en) * | 2001-09-21 | 2004-10-14 | Polyserve, Inc. | System and method for collaborative caching in a multinode system |
US7149853B2 (en) | 2001-09-21 | 2006-12-12 | Polyserve, Inc. | System and method for synchronization for enforcing mutual exclusion among multiple negotiators |
US20030065782A1 (en) * | 2001-09-28 | 2003-04-03 | Gor Nishanov | Distributed system resource protection via arbitration and ownership |
US7277952B2 (en) | 2001-09-28 | 2007-10-02 | Microsoft Corporation | Distributed system resource protection via arbitration and ownership |
US20030149761A1 (en) * | 2001-10-05 | 2003-08-07 | Baldwin Duane Mark | Storage area network methods and apparatus using event notifications with data |
US7287063B2 (en) * | 2001-10-05 | 2007-10-23 | International Business Machines Corporation | Storage area network methods and apparatus using event notifications with data |
US20030167327A1 (en) * | 2001-10-05 | 2003-09-04 | Baldwin Duane Mark | Storage area network methods and apparatus for topology rendering |
US7430593B2 (en) | 2001-10-05 | 2008-09-30 | International Business Machines Corporation | Storage area network for topology rendering |
EP1321865A2 (en) * | 2001-12-19 | 2003-06-25 | Alcatel Canada Inc. | System and method for multiple-threaded access to a database |
EP1321865A3 (en) * | 2001-12-19 | 2006-03-15 | Alcatel Canada Inc. | System and method for multiple-threaded access to a database |
US7139885B2 (en) | 2001-12-27 | 2006-11-21 | Hitachi, Ltd. | Method and apparatus for managing storage based replication |
US20070112787A1 (en) * | 2002-01-02 | 2007-05-17 | International Business Machines Corporation | Method, system and program for direct client file access in a data management system |
US20030126118A1 (en) * | 2002-01-02 | 2003-07-03 | International Business Machines Corporation | Method, system and program for direct client file access in a data management system |
US8682928B2 (en) | 2002-01-02 | 2014-03-25 | International Business Machines Corporation | Method, system and program for direct client file access in a data management system |
US7177868B2 (en) | 2002-01-02 | 2007-02-13 | International Business Machines Corporation | Method, system and program for direct client file access in a data management system |
US20090119666A1 (en) * | 2002-02-25 | 2009-05-07 | International Business Machines Corporation | Apparatus for cooperative distributed task management in a storage subsystem with multiple controllers using cache locking |
US6862668B2 (en) | 2002-02-25 | 2005-03-01 | International Business Machines Corporation | Method and apparatus for using cache coherency locking to facilitate on-line volume expansion in a multi-controller storage system |
US7930697B2 (en) | 2002-02-25 | 2011-04-19 | International Business Machines Corporation | Apparatus for cooperative distributed task management in a storage subsystem with multiple controllers using cache locking |
US7480909B2 (en) | 2002-02-25 | 2009-01-20 | International Business Machines Corporation | Method and apparatus for cooperative distributed task management in a storage subsystem with multiple controllers using cache locking |
US7200618B2 (en) | 2002-03-07 | 2007-04-03 | Microsoft Corporation | File availability in distributed file storage systems |
US20060112154A1 (en) * | 2002-03-07 | 2006-05-25 | Microsoft Corporation | File Availability in Distributed File Storage Systems |
US7299250B2 (en) | 2002-03-07 | 2007-11-20 | Microsoft Corporation | File availability in distributed file storage systems |
US7020665B2 (en) | 2002-03-07 | 2006-03-28 | Microsoft Corporation | File availability in distributed file storage systems |
US20060106882A1 (en) * | 2002-03-07 | 2006-05-18 | Microsoft Corporation | File Availability in Distributed File Storage Systems |
US20030195903A1 (en) * | 2002-03-19 | 2003-10-16 | Manley Stephen L. | System and method for asynchronous mirroring of snapshots at a destination using a purgatory directory and inode mapping |
US7243115B2 (en) * | 2002-03-19 | 2007-07-10 | Network Appliance, Inc. | System and method for asynchronous mirroring of snapshots at a destination using a purgatory directory and inode mapping |
US7447693B2 (en) * | 2002-03-20 | 2008-11-04 | International Business Machines Corporation | Dynamic cluster database architecture |
US7933882B2 (en) * | 2002-03-20 | 2011-04-26 | International Business Machines Corporation | Dynamic cluster database architecture |
US20090055348A1 (en) * | 2002-03-20 | 2009-02-26 | International Business Machines Corporation | Dynamic cluster database architecture |
US20030182264A1 (en) * | 2002-03-20 | 2003-09-25 | Wilding Mark F. | Dynamic cluster database architecture |
US7937377B2 (en) * | 2002-03-20 | 2011-05-03 | International Business Machines Corporation | Dynamic cluster database architecture |
US7970797B2 (en) | 2002-03-20 | 2011-06-28 | International Business Machines Corporation | Dynamic cluster database architecture |
US20080288554A1 (en) * | 2002-03-20 | 2008-11-20 | International Business Machines Corporation | Dynamic cluster database architecture |
US20080016028A1 (en) * | 2002-03-20 | 2008-01-17 | International Business Machines Corporation | Dynamic Cluster Database Architecture |
KR100453228B1 (en) * | 2002-03-21 | 2004-10-15 | 한국전자통신연구원 | Journaling and recovery method for shared disk file system |
US7631066B1 (en) * | 2002-03-25 | 2009-12-08 | Symantec Operating Corporation | System and method for preventing data corruption in computer system clusters |
WO2003098447A1 (en) * | 2002-04-29 | 2003-11-27 | Meshnetworks, Inc. | A system and method for creating a graphical view of a network from a node's perspective |
US7243257B2 (en) * | 2002-05-14 | 2007-07-10 | Nec Corporation | Computer system for preventing inter-node fault propagation |
US20040078649A1 (en) * | 2002-05-14 | 2004-04-22 | Nec Corporation | Computer system |
US20070203925A1 (en) * | 2002-05-17 | 2007-08-30 | Aleri, Inc. | Database system and methods |
US20030233389A1 (en) * | 2002-06-18 | 2003-12-18 | Microsoft Corporation | System and method for decoupling space reservation in transactional logs |
US20090112942A1 (en) * | 2002-06-18 | 2009-04-30 | Microsoft Corporation | System and Method for Decoupling Space Reservation in Transactional Logs |
US7484216B2 (en) * | 2002-06-18 | 2009-01-27 | Microsoft Corporation | System and method for decoupling space reservation in transactional logging systems |
US20040001476A1 (en) * | 2002-06-24 | 2004-01-01 | Nayeem Islam | Mobile application environment |
US6980994B2 (en) | 2002-07-08 | 2005-12-27 | International Business Machines Corporation | Method, apparatus and computer program product for mapping file handles |
US20040006565A1 (en) * | 2002-07-08 | 2004-01-08 | International Business Machines Corporation | Method, apparatus and computer program product for mapping file handles |
US20040054644A1 (en) * | 2002-09-16 | 2004-03-18 | Oracle Corporation | Method and mechanism for implementing in-memory transaction logging records |
US6981004B2 (en) * | 2002-09-16 | 2005-12-27 | Oracle International Corporation | Method and mechanism for implementing in-memory transaction logging records |
US7239605B2 (en) * | 2002-09-23 | 2007-07-03 | Sun Microsystems, Inc. | Item and method for performing a cluster topology self-healing process in a distributed data system cluster |
US20040066741A1 (en) * | 2002-09-23 | 2004-04-08 | Darpan Dinker | System and method for performing a cluster topology self-healing process in a distributed data system cluster |
US20040068523A1 (en) * | 2002-10-07 | 2004-04-08 | Keith Robert Olan | Method and system for full asynchronous master-to-master file synchronization |
US20040088573A1 (en) * | 2002-10-31 | 2004-05-06 | Prabahar Jeyaram | Method and apparatus for providing dynamic locks for global resources |
US7444634B2 (en) * | 2002-10-31 | 2008-10-28 | Sun Microsystems, Inc. | Method and apparatus for providing dynamic locks for global resources |
US8788530B2 (en) * | 2002-11-01 | 2014-07-22 | Hitachi Data Systems Engineering UK Limited | Distributed file system and method |
US20120036161A1 (en) * | 2002-11-01 | 2012-02-09 | Bluearc Uk Limited | Distributed File System and Method |
US7464091B2 (en) | 2002-11-27 | 2008-12-09 | Sap Ag | Method and software for processing data objects in business applications |
US20040148589A1 (en) * | 2002-11-27 | 2004-07-29 | Michael Conrad | Method and software for processing data objects in business applications |
US7430569B2 (en) | 2002-11-27 | 2008-09-30 | Sap Ag | Computerized replication of data objects |
US7225302B2 (en) * | 2002-11-27 | 2007-05-29 | Sap Ag | Method and software application for avoiding data loss |
US7409412B2 (en) | 2002-11-27 | 2008-08-05 | Sap Ag | Data element and structure for data processing |
US20040153480A1 (en) * | 2002-11-27 | 2004-08-05 | Michael Conrad | Computerized replication of data objects |
US20040148447A1 (en) * | 2002-11-27 | 2004-07-29 | Michael Conrad | Method and software application for avoiding data loss |
US7689715B1 (en) * | 2002-12-20 | 2010-03-30 | Symantec Operating Corporation | Method and system for implementing a global name space service |
US7827213B2 (en) * | 2002-12-20 | 2010-11-02 | International Business Machines Corporation | Free space management |
US20040122873A1 (en) * | 2002-12-20 | 2004-06-24 | International Business Machines Corporation | Free space management |
US20080235301A1 (en) * | 2002-12-20 | 2008-09-25 | Wright Cornell G | Free space management |
US7136885B2 (en) * | 2002-12-20 | 2006-11-14 | International Business Machines Corporation | Free space management |
US20040153841A1 (en) * | 2003-01-16 | 2004-08-05 | Silicon Graphics, Inc. | Failure hierarchy in a cluster filesystem |
US7823077B2 (en) | 2003-03-24 | 2010-10-26 | Microsoft Corporation | System and method for user modification of metadata in a shell browser |
US7769794B2 (en) | 2003-03-24 | 2010-08-03 | Microsoft Corporation | User interface for a file system shell |
US7712034B2 (en) | 2003-03-24 | 2010-05-04 | Microsoft Corporation | System and method for shell browser |
US20040189694A1 (en) * | 2003-03-24 | 2004-09-30 | Kurtz James Brian | System and method for user modification of metadata in a shell browser |
US7627552B2 (en) | 2003-03-27 | 2009-12-01 | Microsoft Corporation | System and method for filtering and organizing items based on common elements |
US7650575B2 (en) | 2003-03-27 | 2010-01-19 | Microsoft Corporation | Rich drag drop user interface |
US20040193564A1 (en) * | 2003-03-27 | 2004-09-30 | M-Systems Flash Disk Pioneers, Ltd. | Robust, self-maintaining file system |
US7702659B2 (en) * | 2003-03-27 | 2010-04-20 | Sandisk Il Ltd. | Robust, self-maintaining file system |
US9361313B2 (en) | 2003-03-27 | 2016-06-07 | Microsoft Technology Licensing, Llc | System and method for filtering and organizing items based on common elements |
US20090171983A1 (en) * | 2003-03-27 | 2009-07-02 | Microsoft Corporation | System and method for virtual folder sharing including utilization of static and dynamic lists |
US20040193673A1 (en) * | 2003-03-27 | 2004-09-30 | Mohammed Samji | System and method for sharing items in a computer system |
US7536386B2 (en) * | 2003-03-27 | 2009-05-19 | Microsoft Corporation | System and method for sharing items in a computer system |
US7707197B2 (en) | 2003-03-27 | 2010-04-27 | Microsoft Corporation | System and method for filtering and organizing items based on common elements |
US8117226B2 (en) | 2003-03-27 | 2012-02-14 | Microsoft Corporation | System and method for virtual folder sharing including utilization of static and dynamic lists |
US9361312B2 (en) | 2003-03-27 | 2016-06-07 | Microsoft Technology Licensing, Llc | System and method for filtering and organizing items based on metadata |
US7925682B2 (en) | 2003-03-27 | 2011-04-12 | Microsoft Corporation | System and method utilizing virtual folders |
EP1469380A2 (en) | 2003-04-16 | 2004-10-20 | Hitachi, Ltd. | Storage device control apparatus and control method therefor |
EP1469380A3 (en) * | 2003-04-16 | 2008-02-27 | Hitachi, Ltd. | Storage device control apparatus and control method therefor |
US8209624B2 (en) | 2003-04-17 | 2012-06-26 | Microsoft Corporation | Virtual address bar user interface control |
US7853890B2 (en) | 2003-04-17 | 2010-12-14 | Microsoft Corporation | Address bar user interface control |
US7996361B1 (en) * | 2003-06-30 | 2011-08-09 | Symantec Operating Corporation | Method and system of providing replica files within a fileset |
US20050027829A1 (en) * | 2003-07-31 | 2005-02-03 | International Business Machines Corporation | Dynamically configurable fault tolerance in autonomic computing with multiple service points |
US7111188B2 (en) | 2003-07-31 | 2006-09-19 | International Business Machines Corporation | Dynamically configurable fault tolerance in autonomic computing with multiple service points |
US20050044301A1 (en) * | 2003-08-20 | 2005-02-24 | Vasilevsky Alexander David | Method and apparatus for providing virtual computing services |
US20050080982A1 (en) * | 2003-08-20 | 2005-04-14 | Vasilevsky Alexander D. | Virtual host bus adapter and method |
US8776050B2 (en) | 2003-08-20 | 2014-07-08 | Oracle International Corporation | Distributed virtual machine monitor for managing multiple virtual resources across multiple physical nodes |
US20050120160A1 (en) * | 2003-08-20 | 2005-06-02 | Jerry Plouffe | System and method for managing virtual servers |
US20100115338A1 (en) * | 2003-08-27 | 2010-05-06 | Rao Sudhir G | Reliable Fault Resolution In A Cluster |
US7284147B2 (en) * | 2003-08-27 | 2007-10-16 | International Business Machines Corporation | Reliable fault resolution in a cluster |
US20050050398A1 (en) * | 2003-08-27 | 2005-03-03 | International Business Machines Corporation | Reliable fault resolution in a cluster |
US7941690B2 (en) | 2003-08-27 | 2011-05-10 | International Business Machines Corporation | Reliable fault resolution in a cluster |
US7284018B1 (en) * | 2003-10-15 | 2007-10-16 | Sun Microsystems, Inc. | Logless transaction coordination |
EP1548593A2 (en) * | 2003-10-20 | 2005-06-29 | LG Electronics Inc. | Network system and method of sharing memory of electronic appliance using the same |
EP1548593A3 (en) * | 2003-10-20 | 2007-10-03 | LG Electronics Inc. | Network system and method of sharing memory of electronic appliance using the same |
US20050086324A1 (en) * | 2003-10-20 | 2005-04-21 | Lg Electronics Inc. | Network system and method of sharing memory of electronic appliance using the same |
US20050097142A1 (en) * | 2003-10-30 | 2005-05-05 | International Business Machines Corporation | Method and apparatus for increasing efficiency of data storage in a file system |
US7647355B2 (en) * | 2003-10-30 | 2010-01-12 | International Business Machines Corporation | Method and apparatus for increasing efficiency of data storage in a file system |
US8521790B2 (en) * | 2003-10-30 | 2013-08-27 | International Business Machines Corporation | Increasing efficiency of data storage in a file system |
US20100049755A1 (en) * | 2003-10-30 | 2010-02-25 | International Business Machines Corporation | Method and Apparatus for Increasing Efficiency of Data Storage in a File System |
US7111119B2 (en) | 2003-11-27 | 2006-09-19 | Hitachi, Ltd. | Device and method for performing information processing using plurality of processors |
US20050120173A1 (en) * | 2003-11-27 | 2005-06-02 | Nobuyuki Minowa | Device and method for performing information processing using plurality of processors |
US7107411B2 (en) * | 2003-12-16 | 2006-09-12 | International Business Machines Corporation | Apparatus method and system for fault tolerant virtual memory management |
US20050132249A1 (en) * | 2003-12-16 | 2005-06-16 | Burton David A. | Apparatus method and system for fault tolerant virtual memory management |
US7272609B1 (en) * | 2004-01-12 | 2007-09-18 | Hyperion Solutions Corporation | In a distributed hierarchical cache, using a dependency to determine if a version of the first member stored in a database matches the version of the first member returned |
US20050185597A1 (en) * | 2004-02-20 | 2005-08-25 | Le Cuong M. | Method, system, and program for checking and repairing a network configuration |
US20080209015A1 (en) * | 2004-02-20 | 2008-08-28 | International Business Machines Corporation | Checking and repairing a network configuration |
US7397770B2 (en) | 2004-02-20 | 2008-07-08 | International Business Machines Corporation | Checking and repairing a network configuration |
US7787456B2 (en) | 2004-02-20 | 2010-08-31 | International Business Machines Corporation | Checking and repairing a network configuration |
US7788353B2 (en) | 2004-02-20 | 2010-08-31 | International Business Machines Corporation | Checking and repairing a network configuration |
US20080205300A1 (en) * | 2004-02-20 | 2008-08-28 | International Business Machines Corporation | Checking and repairing a network configuration |
WO2005081453A1 (en) * | 2004-02-25 | 2005-09-01 | Nhn Corporation | Nonstop service system using voting and, information updating and providing method in the same |
US20060282435A1 (en) * | 2004-02-25 | 2006-12-14 | Moon Jang W | Nonstop service system using voting, and information updating and providing method in the same |
US20050209991A1 (en) * | 2004-03-22 | 2005-09-22 | Microsoft Corporation | Computing device with relatively limited storage space and operating / file system thereof |
US8069192B2 (en) | 2004-03-22 | 2011-11-29 | Microsoft Corporation | Computing device with relatively limited storage space and operating / file system thereof |
US20100115006A1 (en) * | 2004-03-22 | 2010-05-06 | Microsoft Corporation | Computing device with relatively limited storage space and operating/file system thereof |
US7657846B2 (en) | 2004-04-23 | 2010-02-02 | Microsoft Corporation | System and method for displaying stack icons |
US7694236B2 (en) | 2004-04-23 | 2010-04-06 | Microsoft Corporation | Stack icons representing multiple objects |
US20080222547A1 (en) * | 2004-04-29 | 2008-09-11 | Microsoft Corporation | Save Preview Representation of Files Being Created |
US20080307346A1 (en) * | 2004-04-29 | 2008-12-11 | Microsoft Corporation | Metadata editing control |
US8707209B2 (en) | 2004-04-29 | 2014-04-22 | Microsoft Corporation | Save preview representation of files being created |
US20080288531A1 (en) * | 2004-04-29 | 2008-11-20 | Microsoft Corporation | Metadata editing control |
US8972342B2 (en) | 2004-04-29 | 2015-03-03 | Microsoft Corporation | Metadata editing control |
US8661036B2 (en) | 2004-04-29 | 2014-02-25 | Microsoft Corporation | Metadata editing control |
US8024335B2 (en) | 2004-05-03 | 2011-09-20 | Microsoft Corporation | System and method for dynamically generating a selectable search extension |
US7693880B1 (en) * | 2004-05-06 | 2010-04-06 | Symantec Operating Corporation | Mirrored storage at the file system level |
US8381024B2 (en) | 2004-06-03 | 2013-02-19 | Cisco Technology, Inc. | Arrangement for recovery of data by network nodes based on retrieval of encoded data distributed among the network nodes |
US20050283645A1 (en) * | 2004-06-03 | 2005-12-22 | Turner Bryan C | Arrangement for recovery of data by network nodes based on retrieval of encoded data distributed among the network nodes |
US8108713B2 (en) | 2004-06-03 | 2012-01-31 | Cisco Technology, Inc. | Arrangement for recovery of data by network nodes based on retrieval of encoded data distributed among the network nodes |
US7818607B2 (en) * | 2004-06-03 | 2010-10-19 | Cisco Technology, Inc. | Arrangement for recovery of data by network nodes based on retrieval of encoded data distributed among the network nodes |
US20050271061A1 (en) * | 2004-06-04 | 2005-12-08 | Lu Nguyen | Method and system for communicating in a computing system |
US7590706B2 (en) | 2004-06-04 | 2009-09-15 | International Business Machines Corporation | Method for communicating in a computing system |
US20090113026A1 (en) * | 2004-06-04 | 2009-04-30 | International Business Machines Corporation | Machine readable storage medium and system for communicating in a computing system |
US8090760B2 (en) | 2004-06-04 | 2012-01-03 | International Business Machines Corporation | Communicating in a computing system |
US20060004846A1 (en) * | 2004-06-16 | 2006-01-05 | Bmc Software, Inc. | Low-overhead relational database backup and restore operations |
US8069269B2 (en) * | 2004-08-04 | 2011-11-29 | Emc Corporation | Methods and apparatus for accessing content in a virtual pool on a content addressable storage system |
US20060031653A1 (en) * | 2004-08-04 | 2006-02-09 | Emc Corporation | Methods and apparatus for accessing content in a virtual pool on a content addressable storage system |
US20100017456A1 (en) * | 2004-08-19 | 2010-01-21 | Carl Phillip Gusler | System and Method for an On-Demand Peer-to-Peer Storage Virtualization Infrastructure |
US7499980B2 (en) * | 2004-08-19 | 2009-03-03 | International Business Machines Corporation | System and method for an on-demand peer-to-peer storage virtualization infrastructure |
US8307026B2 (en) * | 2004-08-19 | 2012-11-06 | International Business Machines Corporation | On-demand peer-to-peer storage virtualization infrastructure |
US20060041619A1 (en) * | 2004-08-19 | 2006-02-23 | International Business Machines Corporation | System and method for an on-demand peer-to-peer storage virtualization infrastructure |
US7908302B1 (en) * | 2004-09-17 | 2011-03-15 | Symantec Operating Corporation | In-place splitting and merging of files |
US7831642B1 (en) * | 2004-09-30 | 2010-11-09 | Symantec Operating Corporation | Page cache management for a shared file |
US7584220B2 (en) | 2004-10-01 | 2009-09-01 | Microsoft Corporation | System and method for determining target failback and target priority for a distributed file system |
US20060085428A1 (en) * | 2004-10-01 | 2006-04-20 | Microsoft Corporation | System and method for determining target failback and target priority for a distributed file system |
US20060080514A1 (en) * | 2004-10-08 | 2006-04-13 | International Business Machines Corporation | Managing shared memory |
US20060129546A1 (en) * | 2004-12-14 | 2006-06-15 | Bernhard Braun | Fast channel architecture |
US20060129981A1 (en) * | 2004-12-14 | 2006-06-15 | Jan Dostert | Socket-like communication API for Java |
US7580915B2 (en) | 2004-12-14 | 2009-08-25 | Sap Ag | Socket-like communication API for C |
US7600217B2 (en) | 2004-12-14 | 2009-10-06 | Sap Ag | Socket-like communication API for Java |
US7593930B2 (en) | 2004-12-14 | 2009-09-22 | Sap Ag | Fast channel architecture |
US20060143525A1 (en) * | 2004-12-28 | 2006-06-29 | Frank Kilian | Shared memory based monitoring for application servers |
US20060143595A1 (en) * | 2004-12-28 | 2006-06-29 | Jan Dostert | Virtual machine monitoring using shared memory |
US20060143359A1 (en) * | 2004-12-28 | 2006-06-29 | Jan Dostert | Virtual machine monitoring |
US7886294B2 (en) | 2004-12-28 | 2011-02-08 | Sap Ag | Virtual machine monitoring |
US7552153B2 (en) * | 2004-12-28 | 2009-06-23 | Sap Ag | Virtual machine monitoring using shared memory |
US7562138B2 (en) | 2004-12-28 | 2009-07-14 | Sap | Shared memory based monitoring for application servers |
US7689989B2 (en) | 2004-12-28 | 2010-03-30 | Sap Ag | Thread monitoring using shared memory |
US7614016B2 (en) | 2005-04-21 | 2009-11-03 | Microsoft Corporation | Multiple roots in navigation pane |
US8195646B2 (en) | 2005-04-22 | 2012-06-05 | Microsoft Corporation | Systems, methods, and user interfaces for storing, searching, navigating, and retrieving electronic information |
US7631016B2 (en) * | 2005-05-04 | 2009-12-08 | Oracle International Corporation | Providing the latest version of a data item from an N-replica set |
US20060253504A1 (en) * | 2005-05-04 | 2006-11-09 | Ken Lee | Providing the latest version of a data item from an N-replica set |
US20090193110A1 (en) * | 2005-05-05 | 2009-07-30 | International Business Machines Corporation | Autonomic Storage Provisioning to Enhance Storage Virtualization Infrastructure Availability |
US10489044B2 (en) | 2005-07-13 | 2019-11-26 | Microsoft Technology Licensing, Llc | Rich drag drop user interface |
US20070022091A1 (en) * | 2005-07-20 | 2007-01-25 | Scriptlogic Corporation | Access based file system directory enumeration |
US7574461B1 (en) * | 2005-12-28 | 2009-08-11 | Emc Corporation | Dividing data for multi-thread backup |
US7693889B1 (en) | 2005-12-28 | 2010-04-06 | Emc Corporation | Automated backup and recovery for content repository |
US8150809B2 (en) * | 2006-01-11 | 2012-04-03 | Fujitsu Semiconductor Limited | File delete method, file open method, storage medium storing file delete program, and storage medium storing file open program |
US20070162525A1 (en) * | 2006-01-11 | 2007-07-12 | Fujitsu Limited | File delete method, file open method, storage medium storing file delete program, and storage medium storing file open program |
US11556518B2 (en) * | 2006-03-31 | 2023-01-17 | Amazon Technologies, Inc. | System and method for providing high availability data |
US20160179872A1 (en) * | 2006-03-31 | 2016-06-23 | Amazon Technologies, Inc. | System and Method for Providing High Availability Data |
US20080005199A1 (en) * | 2006-06-30 | 2008-01-03 | Microsoft Corporation | Collection-Based Object Replication |
US8117155B2 (en) * | 2006-06-30 | 2012-02-14 | Microsoft Corporation | Collection-based object replication |
US7720892B1 (en) * | 2006-06-30 | 2010-05-18 | Emc Corporation | Bulk updates and tape synchronization |
US7809828B2 (en) * | 2007-04-11 | 2010-10-05 | International Business Machines Corporation | Method for maintaining state consistency among multiple state-driven file system entities when entities become disconnected |
US20080256231A1 (en) * | 2007-04-11 | 2008-10-16 | Rodney Carlton Burnett | Method for maintaining state consistency among multiple state-driven file system entities when entities become disconnected |
US9449047B2 (en) | 2007-06-19 | 2016-09-20 | Sybase, Inc. | Dynamic modification of schemas in streaming databases |
US20090037584A1 (en) * | 2007-07-31 | 2009-02-05 | Lenovo (Singapore) Pte. Ltd. | Methods of creating a voting stop point on a distributed network |
US9477560B2 (en) * | 2007-07-31 | 2016-10-25 | Lenovo (Singapore) Pte. Ltd. | Methods of creating a voting stop point on a distributed network |
US8745012B2 (en) | 2007-08-10 | 2014-06-03 | Sybase, Inc. | Log-structured store for streaming data |
US20100125555A1 (en) * | 2007-08-29 | 2010-05-20 | International Business Machines Corporation | Efficient undo-processing during data redistribution |
US9672244B2 (en) | 2007-08-29 | 2017-06-06 | International Business Machines Corporation | Efficient undo-processing during data redistribution |
US20090063807A1 (en) * | 2007-08-29 | 2009-03-05 | International Business Machines Corporation | Data redistribution in shared nothing architecture |
US20100262871A1 (en) * | 2007-10-03 | 2010-10-14 | William Bain L | Method for implementing highly available data parallel operations on a computational grid |
US9880970B2 (en) * | 2007-10-03 | 2018-01-30 | William L. Bain | Method for implementing highly available data parallel operations on a computational grid |
US20120079322A1 (en) * | 2007-11-13 | 2012-03-29 | Ratnesh Gupta | Preventing data loss in a storage system |
US8074019B2 (en) * | 2007-11-13 | 2011-12-06 | Network Appliance, Inc. | Preventing data loss in a storage system |
US8275939B2 (en) * | 2007-11-13 | 2012-09-25 | Network Appliance, Inc. | Preventing data loss in a storage system |
US20090125669A1 (en) * | 2007-11-13 | 2009-05-14 | Ratnesh Gupta | Preventing data loss in a storage system |
US8301853B1 (en) * | 2007-12-31 | 2012-10-30 | Emc Corporation | System and method for asynchronously mirroring data |
GB2469226A (en) * | 2008-01-08 | 2010-10-06 | Taptu Ltd | Data storage |
WO2009087413A1 (en) * | 2008-01-08 | 2009-07-16 | Taptu Ltd. | Data storage |
US20090235115A1 (en) * | 2008-01-08 | 2009-09-17 | Taptu Ltd. | Data storage |
US20090193346A1 (en) * | 2008-01-30 | 2009-07-30 | International Business Machines Corporation | Apparatus and method to improve a graphical user interface |
US8271743B2 (en) | 2008-06-06 | 2012-09-18 | International Business Machines Corporation | Automated paging device management in a shared memory partition data processing system |
US8166254B2 (en) | 2008-06-06 | 2012-04-24 | International Business Machines Corporation | Hypervisor page fault processing in a shared memory partition data processing system |
US8230077B2 (en) | 2008-06-06 | 2012-07-24 | International Business Machines Corporation | Hypervisor-based facility for communicating between a hardware management console and a logical partition |
US20090307713A1 (en) * | 2008-06-06 | 2009-12-10 | International Business Machines Corporation | Hypervisor-Based Facility for Communicating Between a Hardware Management Console and a Logical Partition |
US8195867B2 (en) | 2008-06-06 | 2012-06-05 | International Business Machines Corporation | Controlled shut-down of partitions within a shared memory partition data processing system |
US20090307440A1 (en) * | 2008-06-06 | 2009-12-10 | International Business Machines Corporation | Transparent Hypervisor Pinning of Critical Memory Areas in a Shared Memory Partition Data Processing System |
US8281306B2 (en) | 2008-06-06 | 2012-10-02 | International Business Machines Corporation | Managing assignment of partition services to virtual input/output adapters |
US8281082B2 (en) | 2008-06-06 | 2012-10-02 | International Business Machines Corporation | Hypervisor page fault processing in a shared memory partition data processing system |
US20090307445A1 (en) * | 2008-06-06 | 2009-12-10 | International Business Machines Corporation | Shared Memory Partition Data Processing System With Hypervisor Managed Paging |
US8688923B2 (en) | 2008-06-06 | 2014-04-01 | International Business Machines Corporation | Dynamic control of partition memory affinity in a shared memory partition data processing system |
US8312230B2 (en) | 2008-06-06 | 2012-11-13 | International Business Machines Corporation | Dynamic control of partition memory affinity in a shared memory partition data processing system |
US8327083B2 (en) | 2008-06-06 | 2012-12-04 | International Business Machines Corporation | Transparent hypervisor pinning of critical memory areas in a shared memory partition data processing system |
US8327086B2 (en) | 2008-06-06 | 2012-12-04 | International Business Machines Corporation | Managing migration of a shared memory logical partition from a source system to a target system |
US8127086B2 (en) | 2008-06-06 | 2012-02-28 | International Business Machines Corporation | Transparent hypervisor pinning of critical memory areas in a shared memory partition data processing system |
US20090307447A1 (en) * | 2008-06-06 | 2009-12-10 | International Business Machines Corporation | Managing Migration of a Shared Memory Logical Partition from a Source System to a Target System |
US8171236B2 (en) * | 2008-06-06 | 2012-05-01 | International Business Machines Corporation | Managing migration of a shared memory logical partition from a source system to a target system |
US8135921B2 (en) | 2008-06-06 | 2012-03-13 | International Business Machines Corporation | Automated paging device management in a shared memory partition data processing system |
US8438566B2 (en) | 2008-06-06 | 2013-05-07 | International Business Machines Corporation | Managing assignment of partition services to virtual input/output adapters |
US20090307439A1 (en) * | 2008-06-06 | 2009-12-10 | International Business Machines Corporation | Dynamic Control of Partition Memory Affinity in a Shared Memory Partition Data Processing System |
US20090307436A1 (en) * | 2008-06-06 | 2009-12-10 | International Business Machines Corporation | Hypervisor Page Fault Processing in a Shared Memory Partition Data Processing System |
US20090307690A1 (en) * | 2008-06-06 | 2009-12-10 | International Business Machines Corporation | Managing Assignment of Partition Services to Virtual Input/Output Adapters |
US8607020B2 (en) | 2008-06-06 | 2013-12-10 | International Business Machines Corporation | Shared memory partition data processing system with hypervisor managed paging |
US20090307438A1 (en) * | 2008-06-06 | 2009-12-10 | International Business Machines Corporation | Automated Paging Device Management in a Shared Memory Partition Data Processing System |
US8549534B2 (en) | 2008-06-06 | 2013-10-01 | International Business Machines Corporation | Managing assignment of partition services to virtual input/output adapters |
US20090307441A1 (en) * | 2008-06-06 | 2009-12-10 | International Business Machines Corporation | Controlled Shut-Down of Partitions Within a Shared Memory Partition Data Processing System |
US20100011242A1 (en) * | 2008-07-10 | 2010-01-14 | Hitachi, Ltd. | Failover method and system for a computer system having clustering configuration |
US7925922B2 (en) * | 2008-07-10 | 2011-04-12 | Hitachi, Ltd. | Failover method and system for a computer system having clustering configuration |
US20110179307A1 (en) * | 2008-07-10 | 2011-07-21 | Tsunehiko Baba | Failover method and system for a computer system having clustering configuration |
US9361229B2 (en) * | 2008-08-25 | 2016-06-07 | International Business Machines Corporation | Distributed shared caching for clustered file systems |
US20100049921A1 (en) * | 2008-08-25 | 2010-02-25 | International Business Machines Corporation | Distributed Shared Caching for Clustered File Systems |
US20100057985A1 (en) * | 2008-08-27 | 2010-03-04 | Hitachi, Ltd. | System and method for allocating performance to data volumes on data storage systems and controlling performance of data volumes |
US8171106B2 (en) * | 2008-12-12 | 2012-05-01 | International Business Machines Corporation | Per file system usage of networks |
US20100153526A1 (en) * | 2008-12-12 | 2010-06-17 | International Business Machines Corporation | Per file system usage of networks |
US20100199058A1 (en) * | 2009-02-03 | 2010-08-05 | Bmc Software, Inc. | Data Set Size Tracking and Management |
US9251149B2 (en) * | 2009-02-03 | 2016-02-02 | Bmc Software, Inc. | Data set size tracking and management |
US20100238814A1 (en) * | 2009-03-18 | 2010-09-23 | At&T Intellectual Property I, L.P. | Methods and Apparatus to Characterize and Predict Network Health Status |
US8171134B2 (en) * | 2009-03-18 | 2012-05-01 | At&T Intellectual Property I, L.P. | Methods and apparatus to characterize and predict network health status |
US8024496B2 (en) | 2009-04-10 | 2011-09-20 | International Business Machines Corporation | Enhanced memory migration descriptor format and method |
US8090911B2 (en) | 2009-04-16 | 2012-01-03 | International Business Machines Corporation | Selecting a target number of pages for allocation to a partition |
US8495302B2 (en) | 2009-04-16 | 2013-07-23 | International Business Machines Corporation | Selecting a target number of pages for allocation to a partition |
US20100268907A1 (en) * | 2009-04-16 | 2010-10-21 | International Business Machines Corporation | Selecting A Target Number of Pages for Allocation to a Partition |
US10237625B2 (en) | 2009-06-16 | 2019-03-19 | Microsoft Technology Licensing, Llc | Byte range caching |
US9807468B2 (en) * | 2009-06-16 | 2017-10-31 | Microsoft Technology Licensing, Llc | Byte range caching |
US20100318632A1 (en) * | 2009-06-16 | 2010-12-16 | Microsoft Corporation | Byte range caching |
US20130246726A1 (en) * | 2009-07-07 | 2013-09-19 | Sones Gmbh | Method and device for a memory system |
US20110055494A1 (en) * | 2009-08-25 | 2011-03-03 | Yahoo! Inc. | Method for distributed direct object access storage |
US20130311523A1 (en) * | 2009-09-02 | 2013-11-21 | Microsoft Corporation | Extending file system namespace types |
US10067941B2 (en) * | 2009-09-02 | 2018-09-04 | Microsoft Technology Licensing, Llc | Extending file system namespace types |
US8473582B2 (en) | 2009-12-16 | 2013-06-25 | International Business Machines Corporation | Disconnected file operations in a scalable multi-node file system cache for a remote cluster file system |
US8495250B2 (en) | 2009-12-16 | 2013-07-23 | International Business Machines Corporation | Asynchronous file operations in a scalable multi-node file system cache for a remote cluster file system |
US20110145367A1 (en) * | 2009-12-16 | 2011-06-16 | International Business Machines Corporation | Scalable caching of remote file data in a cluster file system |
US8458239B2 (en) | 2009-12-16 | 2013-06-04 | International Business Machines Corporation | Directory traversal in a scalable multi-node file system cache for a remote cluster file system |
US10659554B2 (en) | 2009-12-16 | 2020-05-19 | International Business Machines Corporation | Scalable caching of remote file data in a cluster file system |
US20110145363A1 (en) * | 2009-12-16 | 2011-06-16 | International Business Machines Corporation | Disconnected file operations in a scalable multi-node file system cache for a remote cluster file system |
US8516159B2 (en) | 2009-12-16 | 2013-08-20 | International Business Machines Corporation | Asynchronous file operations in a scalable multi-node file system cache for a remote cluster file system |
US9860333B2 (en) | 2009-12-16 | 2018-01-02 | International Business Machines Corporation | Scalable caching of remote file data in a cluster file system |
US9158788B2 (en) | 2009-12-16 | 2015-10-13 | International Business Machines Corporation | Scalable caching of remote file data in a cluster file system |
US9176980B2 (en) | 2009-12-16 | 2015-11-03 | International Business Machines Corporation | Scalable caching of remote file data in a cluster file system |
US9215294B2 (en) * | 2010-02-04 | 2015-12-15 | St-Ericsson Sa | Management of communications between a client equipment and a server equipment providing to the client equipment computer resources represented according to a file system |
US20130198262A1 (en) * | 2010-02-04 | 2013-08-01 | St-Ericsson Sa | Management of communications between a client equipment and a server equipment providing to the client equipment computer resources represented according to a file system |
US11429486B1 (en) * | 2010-02-27 | 2022-08-30 | Pure Storage, Inc. | Rebuilding data via locally decodable redundancy in a vast storage network |
US11625300B2 (en) | 2010-02-27 | 2023-04-11 | Pure Storage, Inc. | Recovering missing data in a storage network via locally decodable redundancy data |
US11487620B1 (en) * | 2010-02-27 | 2022-11-01 | Pure Storage, Inc. | Utilizing locally decodable redundancy data in a vast storage network |
US20220327022A1 (en) * | 2010-02-27 | 2022-10-13 | Pure Storage, Inc. | Utilizing Locally Decodable Redundancy Data in a Vast Storage Network |
US9244015B2 (en) | 2010-04-20 | 2016-01-26 | Hewlett-Packard Development Company, L.P. | Self-arranging, luminescence-enhancement device for surface-enhanced luminescence |
US9002911B2 (en) * | 2010-07-30 | 2015-04-07 | International Business Machines Corporation | Fileset masks to cluster inodes for efficient fileset management |
US20120030265A1 (en) * | 2010-07-30 | 2012-02-02 | Anderson Owen T | Fileset Masks to Cluster Inodes for Efficient Fileset Management |
US20120095971A1 (en) * | 2010-10-19 | 2012-04-19 | Symantec Corporation | Online file system consistency check |
US8577855B2 (en) * | 2010-10-19 | 2013-11-05 | Symantec Corporation | Online file system consistency check |
US9274058B2 (en) | 2010-10-20 | 2016-03-01 | Hewlett-Packard Development Company, L.P. | Metallic-nanofinger device for chemical sensing |
US9594022B2 (en) | 2010-10-20 | 2017-03-14 | Hewlett-Packard Development Company, L.P. | Chemical-analysis device integrated with metallic-nanofinger device for chemical sensing |
US9279767B2 (en) | 2010-10-20 | 2016-03-08 | Hewlett-Packard Development Company, L.P. | Chemical-analysis device integrated with metallic-nanofinger device for chemical sensing |
US8612700B1 (en) | 2010-10-29 | 2013-12-17 | Symantec Corporation | Method and system of performing block level duplications of cataloged backup data |
US9465702B2 (en) * | 2010-11-05 | 2016-10-11 | Atc Logistics & Electronics, Inc. | System and method for auditing removal of customer personal information on electronic devices |
US20120116929A1 (en) * | 2010-11-05 | 2012-05-10 | Atc Logistics & Electronics, Inc. | System and method for auditing removal of customer personal information on electronic devices |
US9792104B2 (en) | 2010-11-05 | 2017-10-17 | FedEx Supply Chain Logistics & Electronics, Inc. | System and method for flashing a wireless device |
US20120151175A1 (en) * | 2010-12-08 | 2012-06-14 | Electronics And Telecommunications Research Institute | Memory apparatus for collective volume memory and method for managing metadata thereof |
US8775870B2 (en) | 2010-12-22 | 2014-07-08 | Kt Corporation | Method and apparatus for recovering errors in a storage system |
US20120173486A1 (en) * | 2010-12-31 | 2012-07-05 | Chang-Sik Park | System and method for dynamically selecting storage locations of replicas in cloud storage system |
US8738725B2 (en) | 2011-01-03 | 2014-05-27 | Planetary Data LLC | Community internet drive |
US11218367B2 (en) | 2011-01-03 | 2022-01-04 | Planetary Data LLC | Community internet drive |
US11863380B2 (en) | 2011-01-03 | 2024-01-02 | Planetary Data LLC | Community internet drive |
US10177978B2 (en) | 2011-01-03 | 2019-01-08 | Planetary Data LLC | Community internet drive |
US9800464B2 (en) | 2011-01-03 | 2017-10-24 | Planetary Data LLC | Community internet drive |
US9158460B2 (en) | 2011-04-25 | 2015-10-13 | Kt Corporation | Selecting data nodes using multiple storage policies in cloud storage system |
US20120311289A1 (en) * | 2011-05-31 | 2012-12-06 | Somasundaram Meiyappan | Persistent data storage |
US20130007363A1 (en) * | 2011-06-30 | 2013-01-03 | Fujitsu Limited | Control device and control method |
US20130080481A1 (en) * | 2011-09-27 | 2013-03-28 | Sybase, Inc. | Extreme large space allocation |
US10204127B1 (en) * | 2011-12-31 | 2019-02-12 | Richard Michael Nemes | Methods and apparatus for information storage and retrieval using a caching technique with probe-limited open-address hashing |
US11468033B1 (en) | 2011-12-31 | 2022-10-11 | Richard Michael Nemes | Methods and apparatus for information storage and retrieval using a caching technique with probe-limited open-address hashing |
US9549037B2 (en) | 2012-08-07 | 2017-01-17 | Dell Products L.P. | System and method for maintaining solvency within a cache |
US9495301B2 (en) * | 2012-08-07 | 2016-11-15 | Dell Products L.P. | System and method for utilizing non-volatile memory in a cache |
US20140047183A1 (en) * | 2012-08-07 | 2014-02-13 | Dell Products L.P. | System and Method for Utilizing a Cache with a Virtual Machine |
US9852073B2 (en) * | 2012-08-07 | 2017-12-26 | Dell Products L.P. | System and method for data redundancy within a cache |
US20140047185A1 (en) * | 2012-08-07 | 2014-02-13 | Dell Products L.P. | System and Method for Data Redundancy Within a Cache |
US9311240B2 (en) | 2012-08-07 | 2016-04-12 | Dell Products L.P. | Location and relocation of data within a cache |
US9367480B2 (en) | 2012-08-07 | 2016-06-14 | Dell Products L.P. | System and method for updating data in a cache |
US9491254B2 (en) | 2012-08-07 | 2016-11-08 | Dell Products L.P. | Location and relocation of data within a cache |
US9519584B2 (en) | 2012-08-07 | 2016-12-13 | Dell Products L.P. | System and method for updating data in a cache |
US20140068201A1 (en) * | 2012-08-31 | 2014-03-06 | Silicon Graphics International Corp. | Transactional memory proxy |
US9208090B2 (en) * | 2012-08-31 | 2015-12-08 | Silicon Graphics International Corp. | Transactional memory proxy |
US10768983B2 (en) * | 2012-09-12 | 2020-09-08 | Salesforce.Com, Inc. | Mechanism for facilitating a quorum-based coordination of broker health for management of resources for application servers in an on-demand services environment |
US20140075017A1 (en) * | 2012-09-12 | 2014-03-13 | salesforce.com,inc. | Mechanism for facilitating a quorum-based coordination of booker health for management of resources for application servers in an on-demand services enviroment |
US10140153B2 (en) | 2012-09-12 | 2018-11-27 | Salesforce.Com, Inc. | System, method, and medium for facilitating auction-based resource sharing for message queues in an on-demand services environment |
US10169090B2 (en) | 2012-09-12 | 2019-01-01 | Salesforce.Com, Inc. | Facilitating tiered service model-based fair allocation of resources for application servers in multi-tenant environments |
US9672233B2 (en) * | 2013-03-15 | 2017-06-06 | Emc Corporation | Integrated search for shared storage using index throttling to maintain quality of service |
US20160098432A1 (en) * | 2013-03-15 | 2016-04-07 | Emc Corporation | Integrated search for shared storage using index throttling to maintain quality of service |
US9317472B2 (en) * | 2013-06-07 | 2016-04-19 | International Business Machines Corporation | Processing element data sharing |
US9569378B2 (en) | 2013-06-07 | 2017-02-14 | International Business Machines Corporation | Processing element data sharing |
US20140365597A1 (en) * | 2013-06-07 | 2014-12-11 | International Business Machines Corporation | Processing Element Data Sharing |
US20150134900A1 (en) * | 2013-11-08 | 2015-05-14 | Mei-Ling Lin | Cache efficiency in a shared disk database cluster |
US9262415B2 (en) * | 2013-11-08 | 2016-02-16 | Sybase, Inc. | Cache efficiency in a shared disk database cluster |
US9813516B2 (en) | 2014-02-18 | 2017-11-07 | Salesforce.Com, Inc. | Transparent sharding of traffic across messaging brokers |
US10705919B2 (en) | 2014-08-08 | 2020-07-07 | International Business Machines Corporation | Data backup using metadata mapping |
US10049019B2 (en) * | 2014-08-08 | 2018-08-14 | International Business Machines Corporation | Data backup using metadata mapping |
US10049018B2 (en) * | 2014-08-08 | 2018-08-14 | International Business Machines Corporation | Data backup using metadata mapping |
US10963348B1 (en) * | 2014-12-19 | 2021-03-30 | EMC IP Holding Company LLC | Summary change log indexed by inode numbers |
US10572452B1 (en) * | 2015-01-01 | 2020-02-25 | EMC IP Holding Company LLC | Context-based read-ahead for B+ tree data structures in a deduplication system |
US20170153849A1 (en) * | 2015-11-26 | 2017-06-01 | Via Alliance Semiconductor Co., Ltd. | Methods and apparatuses for generating machine code for driving an execution unit |
US10209920B2 (en) * | 2015-11-26 | 2019-02-19 | Via Alliance Semiconductor Co., Ltd. | Methods and apparatuses for generating machine code for driving an execution unit |
US10452681B1 (en) | 2015-11-30 | 2019-10-22 | Amazon Technologies, Inc. | Replication group pools for fast provisioning |
US10733201B1 (en) | 2015-11-30 | 2020-08-04 | Amazon Technologies, Inc. | Dynamic provisioning for data replication groups |
US10489230B1 (en) | 2015-12-02 | 2019-11-26 | Amazon Technologies, Inc. | Chaining log operations in data replication groups |
US11640410B1 (en) | 2015-12-02 | 2023-05-02 | Amazon Technologies, Inc. | Distributed log processing for data replication groups |
US10567499B1 (en) | 2015-12-02 | 2020-02-18 | Amazon Technologies, Inc. | Unsupervised round robin catch up algorithm |
US10924543B1 (en) * | 2015-12-18 | 2021-02-16 | Amazon Technologies, Inc. | Deployment strategy for maintaining integrity of replication groups |
US20170344382A1 (en) * | 2016-05-26 | 2017-11-30 | International Business Machines Corporation | Stream computing application shutdown and restart without data loss |
US10002004B2 (en) * | 2016-05-26 | 2018-06-19 | International Business Machines Corporation | Stream computing application shutdown and restart without data loss |
US11442818B2 (en) | 2016-06-30 | 2022-09-13 | Amazon Technologies, Inc. | Prioritized leadership for data replication groups |
US10521311B1 (en) | 2016-06-30 | 2019-12-31 | Amazon Technologies, Inc. | Prioritized leadership for data replication groups |
US11630803B2 (en) * | 2016-07-13 | 2023-04-18 | Netapp, Inc. | Persistent indexing and free space management for flat directory |
US20200320037A1 (en) * | 2016-07-13 | 2020-10-08 | Netapp, Inc. | Persistent indexing and free space management for flat directory |
US20180032397A1 (en) * | 2016-07-28 | 2018-02-01 | Hewlett Packard Enterprise Development Lp | Last writers of datasets in storage array errors |
US10228995B2 (en) * | 2016-07-28 | 2019-03-12 | Hewlett Packard Enterprise Development Lp | Last writers of datasets in storage array errors |
US10565227B1 (en) | 2016-08-31 | 2020-02-18 | Amazon Technologies, Inc. | Leadership lease protocol for data replication groups |
US11150995B1 (en) | 2016-09-13 | 2021-10-19 | Amazon Technologies, Inc. | Node placement for replication groups |
US10275169B2 (en) * | 2017-01-18 | 2019-04-30 | Microsoft Technology Licensing, Llc | Shared memory in memory isolated partitions |
US20190065296A1 (en) * | 2017-08-31 | 2019-02-28 | Nxp Usa, Inc. | System and method of implementing heartbeats in a multicore system |
US10459782B2 (en) * | 2017-08-31 | 2019-10-29 | Nxp Usa, Inc. | System and method of implementing heartbeats in a multicore system |
US10789267B1 (en) | 2017-09-21 | 2020-09-29 | Amazon Technologies, Inc. | Replication group data management |
US11354056B2 (en) | 2018-02-05 | 2022-06-07 | Micron Technology, Inc. | Predictive data orchestration in multi-tier memory systems |
US11669260B2 (en) | 2018-02-05 | 2023-06-06 | Micron Technology, Inc. | Predictive data orchestration in multi-tier memory systems |
US11416395B2 (en) | 2018-02-05 | 2022-08-16 | Micron Technology, Inc. | Memory virtualization for accessing heterogeneous memory components |
US11977787B2 (en) | 2018-02-05 | 2024-05-07 | Micron Technology, Inc. | Remote direct memory access in multi-tier memory systems |
US11099789B2 (en) | 2018-02-05 | 2021-08-24 | Micron Technology, Inc. | Remote direct memory access in multi-tier memory systems |
US10880401B2 (en) * | 2018-02-12 | 2020-12-29 | Micron Technology, Inc. | Optimization of data access and communication in memory systems |
US20210120099A1 (en) * | 2018-02-12 | 2021-04-22 | Micron Technology, Inc. | Optimization of data access and communication in memory systems |
US11706317B2 (en) * | 2018-02-12 | 2023-07-18 | Micron Technology, Inc. | Optimization of data access and communication in memory systems |
US10877892B2 (en) | 2018-07-11 | 2020-12-29 | Micron Technology, Inc. | Predictive paging to accelerate memory access |
US11573901B2 (en) | 2018-07-11 | 2023-02-07 | Micron Technology, Inc. | Predictive paging to accelerate memory access |
US11734192B2 (en) | 2018-12-10 | 2023-08-22 | International Business Machines Corporation | Identifying location of data granules in global virtual address space |
US11016908B2 (en) * | 2018-12-11 | 2021-05-25 | International Business Machines Corporation | Distributed directory of named data elements in coordination namespace |
US20200183859A1 (en) * | 2018-12-11 | 2020-06-11 | International Business Machines Corporation | Distributed directory of named data elements in coordination namespace |
US11740793B2 (en) | 2019-04-15 | 2023-08-29 | Micron Technology, Inc. | Predictive data pre-fetching in a data storage device |
US10852949B2 (en) | 2019-04-15 | 2020-12-01 | Micron Technology, Inc. | Predictive data pre-fetching in a data storage device |
US11941030B2 (en) * | 2021-03-30 | 2024-03-26 | Netapp, Inc. | Methods for hierarchical propagation in tree structures and devices thereof |
Also Published As
Publication number | Publication date |
---|---|
EP1008047B1 (en) | 2003-09-10 |
AU5461198A (en) | 1998-06-10 |
ATE249640T1 (en) | 2003-09-15 |
DE69724834D1 (en) | 2003-10-16 |
DE69724834T2 (en) | 2004-07-01 |
WO1998022876A1 (en) | 1998-05-28 |
EP1008047A1 (en) | 2000-06-14 |
JP2001504616A (en) | 2001-04-03 |
Similar Documents
Publication | Publication Date | Title |
---|---|---|
US5909540A (en) | System and method for providing highly available data storage using globally addressable memory | |
US5918229A (en) | Structured data storage using globally addressable memory | |
US5987506A (en) | Remote access and geographically distributed computers in a globally addressable storage environment | |
US6026474A (en) | Shared client-side web caching using globally addressable memory | |
US11755415B2 (en) | Variable data replication for storage implementing data backup | |
WO1998022881A9 (en) | Remote access in a globally addressable storage environment | |
US6029168A (en) | Decentralized file mapping in a striped network file system in a distributed computing environment | |
Schmuck et al. | {GPFS}: A {Shared-Disk} file system for large computing clusters | |
US9047351B2 (en) | Cluster of processing nodes with distributed global flash memory using commodity server technology | |
US7007047B2 (en) | Internally consistent file system image in distributed object-based data storage | |
US8661068B1 (en) | Managing global metadata caches in data storage systems | |
US8667001B2 (en) | Scalable database management software on a cluster of nodes using a shared-distributed flash memory | |
US8484258B2 (en) | Concurrent directory update in a cluster file system | |
JP4568115B2 (en) | Apparatus and method for hardware-based file system | |
US8316066B1 (en) | Shadow directory structure in a distributed segmented file system | |
WO2004055679A2 (en) | A distributed storage system for data-sharing among client computers running different operating system types | |
EP0460934A2 (en) | Fault tolerant relocation of storage with atomicity | |
Preslan et al. | Scalability and failure recovery in a linux cluster file system | |
WO1998022890A1 (en) | System for tracking data | |
BRIEF | I. THE PATENTS-IN-SUIT | |
Helal et al. | Replication of Objects | |
Skousen et al. | Implementing a Very Large Single Address Space Across Multiple Nodes: Memory Partitioning, Protection Domain Migration, Kernel Replication, Consistency and Fault Tolerance | |
GPREC | Distributed File Systems: A Survey | |
Schmuck et al. | Pp. 231–244 of the Proceedings GPFS: A Shared-Disk File System for Large Computing Clusters | |
Ravi et al. | Multi-Cloud Distributed File System |
Legal Events
Date | Code | Title | Description |
---|---|---|---|
AS | Assignment |
Owner name: MANGOSOFT CORPORATION, MASSACHUSETTSFree format text: ASSIGNMENT OF ASSIGNORS INTEREST;ASSIGNORS:CARTER, JOHN B.;DAVIS, SCOTT H.;DIETTERICH, DANIEL J.;AND OTHERS;REEL/FRAME:008799/0911;SIGNING DATES FROM 19970711 TO 19971030 |
|
AS | Assignment |
Owner name: IMPERIAL BANK, CALIFORNIAFree format text: ASSIGNMENT OF ASSIGNORS INTEREST;ASSIGNOR:MANGOSOFT CORPORATION;REEL/FRAME:009277/0209Effective date: 19980528 |
|
STCF | Information on status: patent grant |
Free format text: PATENTED CASE |
|
FEPP | Fee payment procedure |
Free format text: PAT HOLDER NO LONGER CLAIMS SMALL ENTITY STATUS, ENTITY STATUS SET TO UNDISCOUNTED (ORIGINAL EVENT CODE: STOL); ENTITY STATUS OF PATENT OWNER: LARGE ENTITY |
|
FPAY | Fee payment |
Year of fee payment: 4 |
|
REMI | Maintenance fee reminder mailed | ||
AS | Assignment |
Owner name: MANGOSOFT INTELLECTUAL PROPERTY, INC., NEW YORKFree format text: ASSIGNMENT OF ASSIGNORS INTEREST;ASSIGNOR:MANGOSOFT CORPORATION;REEL/FRAME:018247/0438Effective date: 20060911 |
|
FPAY | Fee payment |
Year of fee payment: 8 |
|
FPAY | Fee payment |
Year of fee payment: 12 |
|
AS | Assignment |
Owner name: MANGOSOFT CORPORATION, NEW YORKFree format text: ASSIGNMENT OF ASSIGNORS INTEREST;ASSIGNOR:COMERCIA BANK, A TEXAS BANKING ASSOCIATION, SUCCESSOR IN INTEREST TO IMPERIAL BANK;REEL/FRAME:028083/0471Effective date: 20120416 |
|
AS | Assignment |
Owner name: MANGOSOFT INTELLECTUAL PROPERTY, INC., NEW YORKFree format text: ASSIGNMENT OF ASSIGNORS INTEREST;ASSIGNOR:MANGOSOFT CORPORATION;REEL/FRAME:028089/0846Effective date: 20120423 |
|
AS | Assignment |
Owner name: GOOGLE INC., CALIFORNIAFree format text: ASSIGNMENT OF ASSIGNORS INTEREST;ASSIGNOR:MANGOSOFT INTELLECTUAL PROPERTY INC.;REEL/FRAME:028687/0383Effective date: 20120501 |
|
AS | Assignment |
Owner name: GOOGLE LLC, CALIFORNIAFree format text: CHANGE OF NAME;ASSIGNOR:GOOGLE INC.;REEL/FRAME:044695/0115Effective date: 20170929 |