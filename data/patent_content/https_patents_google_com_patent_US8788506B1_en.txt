US8788506B1 - Methods and systems for estimating a count of unique items - Google Patents
Methods and systems for estimating a count of unique items Download PDFInfo
- Publication number
- US8788506B1 US8788506B1 US13/476,726 US201213476726A US8788506B1 US 8788506 B1 US8788506 B1 US 8788506B1 US 201213476726 A US201213476726 A US 201213476726A US 8788506 B1 US8788506 B1 US 8788506B1
- Authority
- US
- United States
- Prior art keywords
- probability
- zero
- unique
- bit
- mask
- Prior art date
- Legal status (The legal status is an assumption and is not a legal conclusion. Google has not performed a legal analysis and makes no representation as to the accuracy of the status listed.)
- Expired - Fee Related, expires
Links
- 238000000034 method Methods 0.000 title claims abstract description 42
- 230000015654 memory Effects 0.000 claims abstract description 55
- 230000004044 response Effects 0.000 claims description 6
- 238000004891 communication Methods 0.000 description 16
- 230000008569 process Effects 0.000 description 14
- 238000004590 computer program Methods 0.000 description 8
- 230000006870 function Effects 0.000 description 4
- 238000010586 diagram Methods 0.000 description 3
- 230000003287 optical effect Effects 0.000 description 3
- 230000001413 cellular effect Effects 0.000 description 2
- 230000009193 crawling Effects 0.000 description 2
- 230000003993 interaction Effects 0.000 description 2
- 239000004973 liquid crystal related substance Substances 0.000 description 2
- 230000009286 beneficial effect Effects 0.000 description 1
- 238000004364 calculation method Methods 0.000 description 1
- 230000001186 cumulative effect Effects 0.000 description 1
- 238000005516 engineering process Methods 0.000 description 1
- 238000012986 modification Methods 0.000 description 1
- 230000004048 modification Effects 0.000 description 1
- 230000006855 networking Effects 0.000 description 1
- 230000001953 sensory effect Effects 0.000 description 1
- 239000007787 solid Substances 0.000 description 1
- 239000013589 supplement Substances 0.000 description 1
- 230000000007 visual effect Effects 0.000 description 1
Images
Classifications
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F16/00—Information retrieval; Database structures therefor; File system structures therefor
- G06F16/90—Details of database functions independent of the retrieved data types
- G06F16/95—Retrieval from the web
- G06F16/951—Indexing; Web crawling techniques
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04L—TRANSMISSION OF DIGITAL INFORMATION, e.g. TELEGRAPHIC COMMUNICATION
- H04L2209/00—Additional information or applications relating to cryptographic mechanisms or cryptographic arrangements for secret or secure communication H04L9/00
- H04L2209/04—Masking or blinding
Definitions
- This disclosure generally relates to estimating a count of unique items, and in particular to the use of memory-conscious techniques to approximate a count of unique items.
- n-gram is a group of n sequential words, where n is a number, usually between 2 and 8, although it can be any number.
- a system In order to count unique items, a system must remember what items have already been encountered. For example, to determine whether a specific shingle has been seen in contents for a document associated with a URL, the system needs to determine if the URL has already been seen and counted for that shingle.
- One method of counting unique items is to store each item as it is encountered with the key in an index table, so that the table includes a row for each item-key pair. But this method requires a large amount of storage. To reduce the amount of memory required to store a row in such a table, some systems may store a fingerprint of the item in the index. A fingerprint is a much smaller unique code generated from a larger data item. For example, a fingerprint of a few bits may be generated from the characters comprising a URL. However, for an index with hundreds of billions of records, even the memory savings of using a fingerprint may be inadequate because each key value will still require one record in the index for each unique fingerprint.
- a computer-implemented method for managing memory while counting unique items includes receiving a request from a computing system for an estimated count of the unique items for a particular key value and receiving a unique estimator mask for the particular key value from a memory, the unique estimator mask having a number of bits, at least some of the bits being non-zero and at least some of the bits being zero based on fingerprints calculated from previously encountered items, the non-zero bits and the zero bits forming a pattern.
- the method may also include calculating a first probability that a particular number of encountered items created the pattern of non-zero bits and zero bits and determining whether the first probability for the particular number is less than a first probability for another number that is one less than the particular number
- the method further includes identifying the another number as the estimated count of unique items when it is determined that the first probability for the particular number is less than the first probability for the another number and providing the estimated count to the computing system as a response to the request.
- the bit of the unique estimator mask may be set to non-zero when a position of the bit matches the first occurrence of a non-zero bit in a fingerprint for one of the previously encountered items.
- calculating the first probability may include initializing the first probability to one (“1”) and repeating, for each bit position in the mask, the operations of: calculating a second probability that the bit at the position is non-zero, multiplying the first probability by the second probability when the bit at the position is zero, and multiplying the first probability by the difference between the second probability and one (“1”) when the bit at the position is non-zero.
- calculating the second probability may include determining that p i equal to (1 ⁇ 0.5 i+1 ) n , where i is the bit position and n is the particular number of items.
- a tangible computer-readable storage medium including recorded and stored instructions.
- the instructions when executed by one or more processors of a computer system, may cause the computer system to receive a request from a computing system for an estimated count of the unique items for a particular key value and receive a unique estimator mask for the particular key value from a memory, the unique estimator mask having a number of bits, at least some of the being non-zero and at least some of the bits being zero based on fingerprints calculated from previously encountered items, the non-zero bits and the zero bits forming a pattern.
- the instructions may further cause the computer system to calculate a first probability that a particular number of encountered items created the pattern of non-zero bits and zero bits and determine whether the first probability for the particular number is less than a first probability for another number that is one less than the particular number.
- the instructions may also cause the computer system to identify the another number as the estimated number of unique items encountered when it is determined that the first probability for the particular number is less than the first probability for the another number and provide the estimated count of unique items to the computing system as a response to the request.
- the bit of the unique estimator mask may be non-zero when a position of the bit matches the first occurrence of a non-zero bit of a fingerprint for one of the previously encountered items.
- a system may include a memory configured to store executable code, and a processor operably coupled to the memory.
- the processor may be arranged and configured to execute the code to receive a request from a computing system for an estimated count of the unique items for a particular key value and receive a unique estimator mask for the particular key value from a memory, the unique estimator mask having a number of bits, at least some of the bits being non-zero and at least some of the bits being zero based on fingerprints calculated from previously encountered items, the non-zero bits and the zero bits forming a pattern.
- the processor may further execute the code to calculate a first probability that a particular number of encountered items created the pattern of non-zero bits and zero bits and determine whether the first probability for the particular number is less than a first probability for another number that is one less than the particular number.
- the processor may further execute the code to initialize the first probability to one (“1”) and repeat, for each bit position in the mask, the operations of: calculating a second probability that the bit at the position has a non-zero value, multiplying the first probability by the second probability when the bit at the position has a zero value, and multiplying the first probability by the difference between the second probability and one (“1”) when the bit at the position has a non-zero value.
- the processor may further execute the code to identify the another number as the estimated number of unique items encountered when it is determined that the first probability for the particular number is less than the first probability for the another number and provide the estimated count of unique items to the computing system as a response to the request.
- a bit of the unique estimator mask may be non-zero when a position of the bit matches the first occurrence of a non-zero bit of a fingerprint for one of the previously encountered items.
- Implementations can include one or more of the following features.
- the encountered items may be uniform resource locators, and the fingerprint may be calculated from the characters comprising the encountered URL.
- system may repeat the calculating of the first probability and determining whether the first probability for the particular number is less than the first probability for the another number, beginning with the particular number being zero and increasing the particular number each time the calculating and determining are repeated. The system may also terminate the repeating of the calculating and the determining as part of the identifying.
- FIG. 1 illustrates a flow diagram of a process for creating a unique estimator mask for a key value, consistent with some implementations.
- FIG. 2 is an example of data items used to create an exemplary unique estimator mask.
- FIG. 3 illustrates a flow diagram of a process for estimating a count of unique items represented by the unique estimator mask, consistent with some implementations.
- FIG. 4 shows an example of a computer device and a mobile computer device that can be used to implement the techniques described here.
- In some implementations provide a memory-conscious method of tracking the occurrence of unique items.
- memory management may take priority over precision.
- a system storing billions of records may trade memory savings, in the form of smaller storage requirements, for an exact count of unique items.
- a comparatively small unique estimator mask may replace the need to store a record for each unique data item.
- a unique estimator mask of, for example, 32 bits may be used to detect the number of unique data items that occur for a given key value.
- a key value may be any data item for which a count of unique items is required.
- a key value may represent a URL if the process is counting the number of unique IP addresses that request the URL.
- a key value may also represent a shingle if the process is counting the number of unique URLs for documents that contain an occurrence of the shingle.
- a shingle may be a pair of words, sequence of multiple words, or n-grams.
- an Internet search engine that crawls thousands of documents, such as web pages, for cataloging and indexing may need to count the number of unique URLs for documents that contain a particular shingle. Because web pages often link to each other, a single web page, identified by a URL, may be retrieved multiple times during a crawl. In such a system it is important not to double-count a particular web page that has been encountered before.
- a shingle when a shingle is found in the contents of a web page for a URL, rather than storing the URL-shingle pair in a table (resulting in potentially millions of records for each shingle), in some implementations may populate and store a unique estimator mask for the shingle. This results in only one record per shingle, a vast memory savings over storing multiple rows per shingle.
- the pattern of bits in the unique estimator mask for each key value (e.g. each shingle) may be populated based on the fingerprints of the items (e.g. URLs) encountered.
- the unique estimator mask may use the unique estimator mask to calculate an estimated number of counted items represented by the pattern of the bits in the mask. This may be accomplished by computing the number that has the highest probability of producing the pattern of bits in the unique estimator mask. In some implementations, the number with the highest probability is considered the estimate of the count of unique items.
- the search engine may use the estimated count of unique items to facilitate the creation of an index of documents, or to generate more accurate search results for a query to the index. For example, shingles with an extraordinarily high number of unique items may be considered “noise” in a query and, thus, ignored. Such counting of unique items may also be useful in other situations.
- FIG. 1 illustrates a flow diagram of a process 100 for creating a unique estimator mask for a key value, consistent with some implementations.
- Process 100 may be used by a unique estimator system that, for example, counts the number of unique URLs for documents that contain an occurrence of a specific shingle.
- a unique estimator system such as system 400 or 450 shown in FIG. 4 , may include a computing system with a processor and a unique estimator module that contains instructions executed by the processor.
- the unique estimator mask may be stored in memory as an attribute of a shingle.
- the unique estimator system counts the number of unique URLs for documents that contain a shingle, but implementations are not limited to counting such URLs.
- the unique estimator system may initialize the unique estimator mask (step 110 ) for each key (e.g. each shingle) to zero. When set to zero, the unique estimator mask indicates that no items have been encountered for the key value.
- the unique estimator system may initialize the unique estimator mask once, so that the estimated count of items is cumulative, or the unique estimator system may initialize the unique estimator mask at certain time periods or before certain events. For example, in implementations where the unique estimator system initializes the unique estimator mask each day, the estimated count is a daily count. Thus, the unique estimator mask may be re-set as required by the system.
- the unique estimator system may begin crawling a corpus of documents for documents associated with document identifiers (step 120 ).
- the unique estimator system may crawl the Internet for documents located at particular URLs.
- Step 120 may encompass any method of encountering items to be counted and is not limited to crawling the Internet.
- the unique estimator system may read DNS request records, read source code from a source code repository, or read documents from an internal document management system.
- the unique estimator system may create a fingerprint for the URL.
- the fingerprint may be created using any of several known functions for creating unique strings from a larger value, including cryptographic and polynomial hashes.
- the unique estimator system may determine the position of the first non-zero bit in the footprint.
- FIG. 2 is an example of data items used to create an exemplary unique estimator mask.
- the unique estimator system may encounter URL 210 , entitled “http://foo.com/1.”
- the unique estimator system may use a fingerprint function to generate fingerprint 220 for URL 210 .
- fingerprint 220 has the first non-zero bit in position 2.
- the unique estimator system parses the contents of the web page associated with the URL for shingles and obtains a shingle from the contents (step 130 ).
- the unique estimator system may retrieve the unique estimator mask for the encountered shingle.
- the unique estimator mask may be stored in a memory as an attribute of the shingle.
- the unique estimator system may locate the same bit position in the retrieved unique estimator mask as the bit position found in step 120 for the URL and set that bit to a non-zero value (step 140 ). For example, as shown in FIG. 2 , the unique estimator system may locate the bit in the second position of the unique estimator mask 205 and set that bit to a non-zero value.
- the unique estimator system may continue to parse the contents of the document associated with the URL for additional shingles (step 150 ). If another shingle is located (step 150 , Yes), then steps 130 and 140 may be repeated with the unique estimator mask for the additional located shingles. If no more shingles exist (step 150 , No) then the crawl for additional URLs continues. If additional URLs are found (step 160 , Yes), then steps 120 to 150 may be repeated for the additional URL and the shingles located in contents associated with the additional URL. For example, as shown in FIG. 2 , the unique estimator system may encounter URL 230 and URL 250 . The unique estimator system may calculate fingerprint 240 for URL 230 and determine that the first non-zero bit of fingerprint 240 is the 5 th position.
- the unique estimator system when the unique estimator system locates the shingle that was found in contents associated with URL 210 in the contents associated with URL 230 , the unique estimator system will set the 5 th bit position of unique estimator mask 205 to a non-zero value. Similarly, the unique estimator system may calculate fingerprint 260 from URL 250 , determining that the bit in the zero position is non-zero. When the same shingle is encountered in the contents associated with URL 250 that was also found in contents associated with URLs 210 and 230 , the unique estimator system sets the bit in the zero position of the unique estimator mask 205 to a non-zero value. In general, during the crawl the same URL will be encountered more than once.
- the unique estimator system finishes the crawl of URLs (step 160 , No) then the unique estimator system stores the updated unique estimator masks for the shingles (step 170 ) and process 100 ends.
- the unique estimator masks now contain a pattern of zero and non-zero bits that can be used to determine an estimated number of unique items encountered.
- FIG. 3 illustrates a flowchart of a process 300 for estimating a count of unique items represented by a unique estimator mask, consistent with some implementations.
- the flowchart shown in FIG. 3 may be performed at least in part by a unique estimator system (e.g., the system 400 or 450 shown in FIG. 4 ).
- the unique estimator system receives a unique estimator mask (step 305 ).
- the unique estimator mask may have been populated by, for example, process 100 and have a length of x bits.
- the length of the mask may be 32 bits.
- the length of the unique estimator mask may be based on the maximum length of the fingerprint generated for one of the unique items.
- the unique estimator system may initialize a variable n to zero (step 310 ) and then begin a loop that will determine the number that has the highest probability of producing the pattern of zero and non-zero bits in the unique estimator mask. To accomplish this, the unique estimator system may initialize the probability that the number n is the estimated number (P n ) to one (step 315 ).
- the unique estimator system may then adjust the value of P n .
- the unique estimator system may loop through each bit in the unique estimator mask using an index i, and calculate the probability that the bit at position i (p i ) is non-zero after seeing n unique items (step 325 ).
- the unique estimator system may perform a probability calculation 32 times, once for each of the 32 bits, that the particular bit has a non-zero value after counting 5 unique items.
- n is the particular number of items. Using the example above where n is 5, if the unique estimator is calculating the probability for the bit in the 6 th position, the probability would be (1-0.5 7 ) 5 or 0.9615431.
- the unique estimator system may determine whether the bit at position i has a non-zero value (step 330 ). If the bit at the particular position is not zero (step 330 , Yes), then the unique estimator system may multiply P n by (1 ⁇ p i )(step 335 ). For example, if the bit at the 6 th position is a one and the value of P n is currently 0.634, the unique estimator system may multiply 0.634 by (1 ⁇ 0.9615431), resulting in a new value of 0.0243816746 for P n . On the other hand, if the bit at the particular position is zero (step 330 , No), then the unique estimator system may multiply P n by p i (step 340 ). For example, if the bit at the 6 th position is a zero, the unique estimator system may multiply 0.634 by 0.9615431, resulting in a new value of 0.6096183254 for P n .
- the unique estimator system may determine whether all the bits in the unique estimator mask have been considered (step 345 ). If not all the bits have been considered (step 345 , No), then i, which represents the position of the bit being considered, is incremented and steps 325 to 345 are repeated for the new bit position. If all bits have been considered (step 345 , Yes), then the unique estimator system may compare (step 355 ) the value of P n with the probability that the number n ⁇ 1 is the estimated number (P n ⁇ 1 ).
- the unique estimator system may store the probability P n as P n ⁇ 1 (to be used in the next iteration of the loop) and increment the value of n. and repeat steps 315 to 355 with the new value of n.
- P n ⁇ 1 is larger than P n (step 355 , Yes)
- the unique estimator system has found the number with the highest probability of producing the pattern of bits in the unique estimator mask. Accordingly, unique estimator system returns the number one less than n (i.e. n ⁇ 1) as the estimate of the number of items encountered (step 365 ) and process 300 ends.
- steps 325 to 340 may be performed in separate loops of index i with each p i temporarily stored in memory.
- FIG. 4 shows an example of a generic computer device 400 and a generic mobile computer device 450 , which may be used with the techniques described here.
- Computing device 400 is intended to represent various forms of digital computers, such as laptops, netbooks, tablets, desktops, workstations, personal digital assistants, servers, blade servers, mainframes, and other appropriate computers.
- Computing device 450 is intended to represent various forms of mobile devices, such as personal digital assistants, cellular telephones, smart phones, and other similar computing devices.
- the components shown here, their connections and relationships, and their functions, are meant to be exemplary only, and are not meant to limit implementations of the inventions described and/or claimed in this document.
- Computing device 400 includes a processor 402 , memory 404 , a storage device 406 , a high-speed interface 408 connecting to memory 404 and high-speed expansion ports 410 , and a low speed interface 412 connecting to low speed bus 414 and storage device 406 .
- Each of the components 402 , 404 , 406 , 408 , 410 , and 412 are interconnected using various busses, and may be mounted on a common motherboard or in other manners as appropriate.
- the processor 402 can process instructions for execution within the computing device 400 , including instructions stored in the memory 404 or on the storage device 406 to display graphical information for a GUI on an external input/output device, such as display 416 coupled to high speed interface 408 .
- multiple processors and/or multiple buses may be used, as appropriate, along with multiple memories and types of memory.
- multiple computing devices 400 may be connected, with each device providing portions of the necessary operations (e.g., as a server bank, a group of blade servers, or a multi-processor system).
- the memory 404 stores information within the computing device 400 .
- the memory 404 is a volatile memory unit or units.
- the memory 404 is a non-volatile memory unit or units.
- the memory 404 may also be another form of computer-readable medium, such as a magnetic or optical disk.
- the storage device 406 is capable of providing mass storage for the computing device 400 .
- the storage device 406 may be or contain a computer-readable medium, such as a floppy disk device, a hard disk device, an optical disk device, or a tape device, a flash memory or other similar solid state memory device, or an array of devices, including devices in a storage area network or other configurations.
- a computer program product can be tangibly embodied in an information carrier.
- the computer program product may also contain instructions that, when executed, perform one or more methods, such as those described above.
- the information carrier is a computer- or machine-readable medium, such as the memory 404 , the storage device 406 , or memory on processor 402 .
- the high speed controller 408 manages bandwidth-intensive operations for the computing device 400 , while the low speed controller 412 manages lower bandwidth-intensive operations.
- the high-speed controller 408 is coupled to memory 404 , display 416 (e.g., through a graphics processor or accelerator), and to high-speed expansion ports 410 , which may accept various expansion cards (not shown).
- low-speed controller 412 is coupled to storage device 406 and low-speed expansion port 414 .
- the low-speed expansion port which may include various communication ports (e.g., USB, Bluetooth, Ethernet, wireless Ethernet) may be coupled to one or more input/output devices, such as a keyboard, a pointing device, a scanner, or a networking device such as a switch or router, e.g., through a network adapter.
- input/output devices such as a keyboard, a pointing device, a scanner, or a networking device such as a switch or router, e.g., through a network adapter.
- the computing device 400 may be implemented in a number of different forms, as shown in the figure. For example, it may be implemented as a standard server 420 , or multiple times in a group of such servers. It may also be implemented as part of a rack server system 424 . In addition, it may be implemented in a personal computer such as a laptop computer 422 . Alternatively, components from computing device 400 may be combined with other components in a mobile device (not shown), such as device 450 . Each of such devices may contain one or more of computing device 400 , 450 , and an entire system may be made up of multiple computing devices 400 , 450 communicating with each other.
- Computing device 450 includes a processor 452 , memory 464 , an input/output device such as a display 454 , a communication interface 466 , and a transceiver 468 , among other components.
- the device 450 may also be provided with a storage device, such as a microdrive or other device, to provide additional storage.
- a storage device such as a microdrive or other device, to provide additional storage.
- Each of the components 450 , 452 , 464 , 454 , 466 , and 468 are interconnected using various buses, and several of the components may be mounted on a common motherboard or in other manners as appropriate.
- the processor 452 can execute instructions within the computing device 450 , including instructions stored in the memory 464 .
- the processor may be implemented as a chipset of chips that include separate and multiple analog and digital processors.
- the processor may provide, for example, for coordination of the other components of the device 450 , such as control of user interfaces, applications run by device 450 , and wireless communication by device 450 .
- Processor 452 may communicate with a user through control interface 458 and display interface 456 coupled to a display 454 .
- the display 454 may be, for example, a TFT LCD (Thin-Film-Transistor Liquid Crystal Display) or an OLED (Organic Light Emitting Diode) display, or other appropriate display technology.
- the display interface 456 may comprise appropriate circuitry for driving the display 454 to present graphical and other information to a user.
- the control interface 458 may receive commands from a user and convert them for submission to the processor 452 .
- an external interface 462 may be provided in communication with processor 452 , so as to enable near area communication of device 450 with other devices. External interface 462 may provide, for example, for wired communication in some implementations, or for wireless communication in other implementations, and multiple interfaces may also be used.
- the memory 464 stores information within the computing device 450 .
- the memory 464 can be implemented as one or more of a computer-readable medium or media, a volatile memory unit or units, or a non-volatile memory unit or units.
- Expansion memory 474 may also be provided and connected to device 450 through expansion interface 472 , which may include, for example, a SIMM (Single In Line Memory Module) card interface.
- SIMM Single In Line Memory Module
- expansion memory 474 may provide extra storage space for device 450 , or may also store applications or other information for device 450 .
- expansion memory 474 may include instructions to carry out or supplement the processes described above, and may include secure information also.
- expansion memory 474 may be provided as a security module for device 450 , and may be programmed with instructions that permit secure use of device 450 .
- secure applications may be provided via the SIMM cards, along with additional information, such as placing identifying information on the SIMM card in a non-hackable manner.
- the memory may include, for example, flash memory and/or NVRAM memory, as discussed below.
- a computer program product is tangibly embodied in an information carrier.
- the computer program product contains instructions that, when executed, perform one or more methods, such as those described above.
- the information carrier is a computer- or machine-readable medium, such as the memory 464 , expansion memory 474 , or memory on processor 452 , that may be received, for example, over transceiver 468 or external interface 462 .
- Device 450 may communicate wirelessly through communication interface 466 , which may include digital signal processing circuitry where necessary. Communication interface 466 may provide for communications under various modes or protocols, such as GSM voice calls, SMS, EMS, or MMS messaging, CDMA, TDMA, PDC, WCDMA, CDMA2000, or GPRS, among others. Such communication may occur, for example, through radio-frequency transceiver 468 . In addition, short-range communication may occur, such as using a Bluetooth, WiFi, or other such transceiver (not shown). In addition, GPS (Global Positioning System) receiver module 470 may provide additional navigation- and location-related wireless data to device 450 , which may be used as appropriate by applications running on device 450 .
- GPS Global Positioning System
- Device 450 may also communicate audibly using audio codec 460 , which may receive spoken information from a user and convert it to usable digital information. Audio codec 460 may likewise generate audible sound for a user, such as through a speaker, e.g., in a handset of device 450 . Such sound may include sound from voice telephone calls, may include recorded sound (e.g., voice messages, music files, etc.) and may also include sound generated by applications operating on device 450 .
- Audio codec 460 may receive spoken information from a user and convert it to usable digital information. Audio codec 460 may likewise generate audible sound for a user, such as through a speaker, e.g., in a handset of device 450 . Such sound may include sound from voice telephone calls, may include recorded sound (e.g., voice messages, music files, etc.) and may also include sound generated by applications operating on device 450 .
- the computing device 450 may be implemented in a number of different forms, as shown in the figure. For example, it may be implemented as a cellular telephone 480 . It may also be implemented as part of a smart phone 482 , personal digital assistant, or other similar mobile device.
- implementations of the systems and techniques described here can be realized in digital electronic circuitry, integrated circuitry, specially designed ASICs (application specific integrated circuits), computer hardware, firmware, software, and/or combinations thereof.
- ASICs application specific integrated circuits
- These various implementations can include implementation in one or more computer programs that are executable and/or interpretable on a programmable system including at least one programmable processor, which may be special or general purpose, coupled to receive data and instructions from, and to transmit data and instructions to, a storage system, at least one input device, and at least one output device.
- the systems and techniques described here can be implemented on a computer having a display device (e.g., a CRT (cathode ray tube) or LCD (liquid crystal display) monitor) for displaying information to the user and a keyboard and a pointing device (e.g., a mouse or a trackball) by which the user can provide input to the computer.
- a display device e.g., a CRT (cathode ray tube) or LCD (liquid crystal display) monitor
- a keyboard and a pointing device e.g., a mouse or a trackball
- Other kinds of devices can be used to provide for interaction with a user as well; for example, feedback provided to the user can be any form of sensory feedback (e.g., visual feedback, auditory feedback, or tactile feedback); and input from the user can be received in any form, including acoustic, speech, or tactile input.
- the systems and techniques described here can be implemented in a computing system that includes a back end component (e.g., as a data server), or that includes a middleware component (e.g., an application server), or that includes—a front end component (e.g., a client computer having a graphical user interface or a Web browser through which a user can interact with an implementation of the systems and techniques described here), or any combination of such back end, middleware, or front end components.
- the components of the system can be interconnected by any form or medium of digital data communication (e.g., a communication network). Examples of communication networks include a local area network (“LAN”), a wide area network (“WAN”), and the Internet.
- LAN local area network
- WAN wide area network
- the Internet the global information network
- the computing system can include clients and servers.
- a client and server are generally remote from each other and typically interact through a communication network.
- the relationship of client and server arises by virtue of computer programs running on the respective computers and having a client-server relationship to each other.
Abstract
Description
Claims (21)
Priority Applications (1)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US13/476,726 US8788506B1 (en) | 2012-05-21 | 2012-05-21 | Methods and systems for estimating a count of unique items |
Applications Claiming Priority (1)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US13/476,726 US8788506B1 (en) | 2012-05-21 | 2012-05-21 | Methods and systems for estimating a count of unique items |
Publications (1)
Publication Number | Publication Date |
---|---|
US8788506B1 true US8788506B1 (en) | 2014-07-22 |
Family
ID=51178017
Family Applications (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
US13/476,726 Expired - Fee Related US8788506B1 (en) | 2012-05-21 | 2012-05-21 | Methods and systems for estimating a count of unique items |
Country Status (1)
Country | Link |
---|---|
US (1) | US8788506B1 (en) |
Cited By (4)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US9361937B2 (en) * | 2014-08-26 | 2016-06-07 | Seagate Technology Llc | Shingled magnetic recording data store |
US20160179894A1 (en) * | 2014-12-22 | 2016-06-23 | Amazon Technologies, Inc. | Efficient determination of join paths via cardinality estimation |
US10380195B1 (en) * | 2017-01-13 | 2019-08-13 | Parallels International Gmbh | Grouping documents by content similarity |
US10685042B2 (en) | 2014-12-22 | 2020-06-16 | Amazon Technologies, Inc. | Identifying join relationships based on transactional access patterns |
-
2012
- 2012-05-21 US US13/476,726 patent/US8788506B1/en not_active Expired - Fee Related
Non-Patent Citations (1)
Title |
---|
Flajolet, et al, "HyperLogLog: the analysis of a near-optimal cardinality estimation algorithm", Proceedings of the 2007 International Conference on Analysis of Algorithms, May 17, 2007, 18 pages. |
Cited By (7)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US9361937B2 (en) * | 2014-08-26 | 2016-06-07 | Seagate Technology Llc | Shingled magnetic recording data store |
US9666228B2 (en) | 2014-08-26 | 2017-05-30 | Seagate Technology Llc | Shingled magnetic recording data store |
US20160179894A1 (en) * | 2014-12-22 | 2016-06-23 | Amazon Technologies, Inc. | Efficient determination of join paths via cardinality estimation |
US10120905B2 (en) * | 2014-12-22 | 2018-11-06 | Amazon Technologies, Inc. | Efficient determination of join paths via cardinality estimation |
US10685042B2 (en) | 2014-12-22 | 2020-06-16 | Amazon Technologies, Inc. | Identifying join relationships based on transactional access patterns |
US10831759B2 (en) | 2014-12-22 | 2020-11-10 | Amazon Technologies, Inc. | Efficient determination of join paths via cardinality estimation |
US10380195B1 (en) * | 2017-01-13 | 2019-08-13 | Parallels International Gmbh | Grouping documents by content similarity |
Similar Documents
Publication | Publication Date | Title |
---|---|---|
US9817858B2 (en) | Generating hash values | |
WO2019085474A1 (en) | Calculation engine implementing method, electronic device, and storage medium | |
US10853362B2 (en) | Optimized full-spectrum loglog-based cardinality estimation | |
US8788477B1 (en) | Identifying addresses and titles of authoritative web pages by analyzing search queries in query logs | |
US10664481B2 (en) | Computer system programmed to identify common subsequences in logs | |
US10983976B2 (en) | Optimized full-spectrum cardinality estimation based on unified counting and ordering estimation techniques | |
EP3188051B1 (en) | Systems and methods for search template generation | |
US9990396B2 (en) | Forecasting query access plan obsolescence | |
US8788506B1 (en) | Methods and systems for estimating a count of unique items | |
US9158786B1 (en) | Database selection system and method to automatically adjust a database schema based on an input data | |
US11609897B2 (en) | Methods and systems for improved search for data loss prevention | |
US11397733B2 (en) | Estimating distinct values for database systems | |
US11734275B2 (en) | Estimating string intersections for database systems | |
US10909146B2 (en) | Providing automated hashtag suggestions to categorize communication | |
US20240012815A1 (en) | Mobile data synchronization framework | |
US11768752B2 (en) | Optimizing large scale data analysis | |
US11068481B2 (en) | Optimized full-spectrum order statistics-based cardinality estimation | |
WO2019237949A1 (en) | Search method and device | |
US8782023B1 (en) | Versioned database cache | |
CN105787029A (en) | SOLR-based key word recognition method | |
US8700868B1 (en) | Methods and systems for incrementing a logarithmic count | |
US20230252497A1 (en) | Systems and methods for measuring impact of online search queries on user actions | |
US20180101622A1 (en) | Perform graph traversal with graph query language | |
CN108572998A (en) | A kind of data search method and device for electronic card data |
Legal Events
Date | Code | Title | Description |
---|---|---|---|
AS | Assignment |
Owner name: GOOGLE INC., CALIFORNIAFree format text: ASSIGNMENT OF ASSIGNORS INTEREST;ASSIGNOR:DORNBACH, PETER;REEL/FRAME:028785/0202Effective date: 20120521 |
|
STCF | Information on status: patent grant |
Free format text: PATENTED CASE |
|
AS | Assignment |
Owner name: GOOGLE LLC, CALIFORNIAFree format text: CHANGE OF NAME;ASSIGNOR:GOOGLE INC.;REEL/FRAME:044277/0001Effective date: 20170929 |
|
MAFP | Maintenance fee payment |
Free format text: PAYMENT OF MAINTENANCE FEE, 4TH YEAR, LARGE ENTITY (ORIGINAL EVENT CODE: M1551)Year of fee payment: 4 |
|
FEPP | Fee payment procedure |
Free format text: MAINTENANCE FEE REMINDER MAILED (ORIGINAL EVENT CODE: REM.); ENTITY STATUS OF PATENT OWNER: LARGE ENTITY |
|
LAPS | Lapse for failure to pay maintenance fees |
Free format text: PATENT EXPIRED FOR FAILURE TO PAY MAINTENANCE FEES (ORIGINAL EVENT CODE: EXP.); ENTITY STATUS OF PATENT OWNER: LARGE ENTITY |
|
STCH | Information on status: patent discontinuation |
Free format text: PATENT EXPIRED DUE TO NONPAYMENT OF MAINTENANCE FEES UNDER 37 CFR 1.362 |
|
FP | Lapsed due to failure to pay maintenance fee |
Effective date: 20220722 |