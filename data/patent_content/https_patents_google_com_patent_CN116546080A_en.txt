CN116546080A - Enhanced online privacy - Google Patents
Enhanced online privacy Download PDFInfo
- Publication number
- CN116546080A CN116546080A CN202310526058.9A CN202310526058A CN116546080A CN 116546080 A CN116546080 A CN 116546080A CN 202310526058 A CN202310526058 A CN 202310526058A CN 116546080 A CN116546080 A CN 116546080A
- Authority
- CN
- China
- Prior art keywords
- service
- identifier
- given
- publisher
- user
- Prior art date
- Legal status (The legal status is an assumption and is not a legal conclusion. Google has not performed a legal analysis and makes no representation as to the accuracy of the status listed.)
- Pending
Links
- 238000013507 mapping Methods 0.000 claims abstract description 113
- 238000000034 method Methods 0.000 claims abstract description 57
- 230000004044 response Effects 0.000 claims abstract description 30
- 238000004590 computer program Methods 0.000 abstract description 15
- 230000002708 enhancing effect Effects 0.000 abstract description 6
- 235000014510 cooky Nutrition 0.000 description 49
- 238000013515 script Methods 0.000 description 20
- 238000012545 processing Methods 0.000 description 17
- 230000008569 process Effects 0.000 description 16
- 238000010586 diagram Methods 0.000 description 12
- 230000006870 function Effects 0.000 description 11
- 101100190462 Caenorhabditis elegans pid-1 gene Proteins 0.000 description 7
- 230000009471 action Effects 0.000 description 7
- 230000005540 biological transmission Effects 0.000 description 7
- 101100064323 Arabidopsis thaliana DTX47 gene Proteins 0.000 description 6
- 101150026676 SID1 gene Proteins 0.000 description 6
- 238000004891 communication Methods 0.000 description 6
- 101100256916 Caenorhabditis elegans sid-1 gene Proteins 0.000 description 5
- 230000003993 interaction Effects 0.000 description 5
- 238000012797 qualification Methods 0.000 description 5
- 101100011863 Arabidopsis thaliana ERD15 gene Proteins 0.000 description 4
- 101100191082 Saccharomyces cerevisiae (strain ATCC 204508 / S288c) GLC7 gene Proteins 0.000 description 4
- 101100274406 Schizosaccharomyces pombe (strain 972 / ATCC 24843) cid1 gene Proteins 0.000 description 4
- 230000007704 transition Effects 0.000 description 4
- 101000609957 Homo sapiens PTB-containing, cubilin and LRP1-interacting protein Proteins 0.000 description 3
- 102100039157 PTB-containing, cubilin and LRP1-interacting protein Human genes 0.000 description 3
- 230000000694 effects Effects 0.000 description 3
- 230000003287 optical effect Effects 0.000 description 3
- 230000000644 propagated effect Effects 0.000 description 3
- 238000000926 separation method Methods 0.000 description 3
- 230000000007 visual effect Effects 0.000 description 3
- 230000002776 aggregation Effects 0.000 description 2
- 238000004220 aggregation Methods 0.000 description 2
- 230000008901 benefit Effects 0.000 description 2
- 230000008859 change Effects 0.000 description 2
- 239000002131 composite material Substances 0.000 description 2
- 238000010295 mobile communication Methods 0.000 description 2
- 230000000717 retained effect Effects 0.000 description 2
- 101000840469 Arabidopsis thaliana Isochorismate synthase 1, chloroplastic Proteins 0.000 description 1
- 101100190464 Caenorhabditis elegans pid-2 gene Proteins 0.000 description 1
- 101100190466 Caenorhabditis elegans pid-3 gene Proteins 0.000 description 1
- 101100256918 Caenorhabditis elegans sid-2 gene Proteins 0.000 description 1
- 101150109471 PID2 gene Proteins 0.000 description 1
- 230000001934 delay Effects 0.000 description 1
- 230000003111 delayed effect Effects 0.000 description 1
- 238000012854 evaluation process Methods 0.000 description 1
- 230000005284 excitation Effects 0.000 description 1
- 238000010304 firing Methods 0.000 description 1
- 238000010348 incorporation Methods 0.000 description 1
- 230000010354 integration Effects 0.000 description 1
- 239000004973 liquid crystal related substance Substances 0.000 description 1
- 238000010801 machine learning Methods 0.000 description 1
- 238000007726 management method Methods 0.000 description 1
- 230000004048 modification Effects 0.000 description 1
- 238000012986 modification Methods 0.000 description 1
- 230000009467 reduction Effects 0.000 description 1
- 238000009877 rendering Methods 0.000 description 1
- 239000004065 semiconductor Substances 0.000 description 1
- 230000001953 sensory effect Effects 0.000 description 1
- 230000003068 static effect Effects 0.000 description 1
- 239000000758 substrate Substances 0.000 description 1
- 238000012546 transfer Methods 0.000 description 1
Classifications
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04L—TRANSMISSION OF DIGITAL INFORMATION, e.g. TELEGRAPHIC COMMUNICATION
- H04L67/00—Network arrangements or protocols for supporting network services or applications
- H04L67/50—Network services
- H04L67/51—Discovery or management thereof, e.g. service location protocol [SLP] or web services
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F21/00—Security arrangements for protecting computers, components thereof, programs or data against unauthorised activity
- G06F21/30—Authentication, i.e. establishing the identity or authorisation of security principals
- G06F21/31—User authentication
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F21/00—Security arrangements for protecting computers, components thereof, programs or data against unauthorised activity
- G06F21/60—Protecting data
- G06F21/62—Protecting access to data via a platform, e.g. using keys or access control rules
- G06F21/6218—Protecting access to data via a platform, e.g. using keys or access control rules to a system of files or objects, e.g. local or distributed file system or database
- G06F21/6245—Protecting personal data, e.g. for financial or medical purposes
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04L—TRANSMISSION OF DIGITAL INFORMATION, e.g. TELEGRAPHIC COMMUNICATION
- H04L63/00—Network architectures or network communication protocols for network security
- H04L63/04—Network architectures or network communication protocols for network security for providing a confidential data exchange among entities communicating through data packet networks
- H04L63/0407—Network architectures or network communication protocols for network security for providing a confidential data exchange among entities communicating through data packet networks wherein the identity of one or more communicating identities is hidden
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04L—TRANSMISSION OF DIGITAL INFORMATION, e.g. TELEGRAPHIC COMMUNICATION
- H04L63/00—Network architectures or network communication protocols for network security
- H04L63/10—Network architectures or network communication protocols for network security for controlling access to devices or network resources
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04L—TRANSMISSION OF DIGITAL INFORMATION, e.g. TELEGRAPHIC COMMUNICATION
- H04L67/00—Network arrangements or protocols for supporting network services or applications
- H04L67/01—Protocols
- H04L67/02—Protocols based on web technology, e.g. hypertext transfer protocol [HTTP]
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04L—TRANSMISSION OF DIGITAL INFORMATION, e.g. TELEGRAPHIC COMMUNICATION
- H04L67/00—Network arrangements or protocols for supporting network services or applications
- H04L67/14—Session management
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04L—TRANSMISSION OF DIGITAL INFORMATION, e.g. TELEGRAPHIC COMMUNICATION
- H04L67/00—Network arrangements or protocols for supporting network services or applications
- H04L67/50—Network services
- H04L67/56—Provisioning of proxy services
- H04L67/564—Enhancement of application control based on intercepted application data
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04L—TRANSMISSION OF DIGITAL INFORMATION, e.g. TELEGRAPHIC COMMUNICATION
- H04L67/00—Network arrangements or protocols for supporting network services or applications
- H04L67/50—Network services
- H04L67/56—Provisioning of proxy services
- H04L67/565—Conversion or adaptation of application format or content
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04L—TRANSMISSION OF DIGITAL INFORMATION, e.g. TELEGRAPHIC COMMUNICATION
- H04L9/00—Cryptographic mechanisms or cryptographic arrangements for secret or secure communications; Network security protocols
- H04L9/40—Network security protocols
Abstract
Methods, systems, and apparatus, including computer programs encoded on a computer storage medium, for enhancing online user privacy. The method may include receiving tag information specifying a given publisher identifier of a publisher and a given client identifier assigned by the publisher to a user of a client device. A given service identifier assigned to a user by a service device is obtained. A mapping between a given service identifier to a given client identifier is created. A list of client identifiers assigned to a set of users by a publisher is received. A list of matching service identifiers corresponding to the list of client identifiers is stored. A plurality of content requests are received from a plurality of different client devices accessing a service provided by a service apparatus. The response to the content request is based on whether the client device provides a service identifier included in the matching service identifier list.
Description
The present application is a divisional application of the invention patent application with the application date of 2019, 12/5, application number of 201980009069.1 and the invention name of "enhanced online privacy".
Background
The present description relates to data processing and enhancing online privacy.
The internet facilitates information exchange and transactions between users worldwide. This exchange of information enables content to be distributed to various users. In some cases, content from multiple different providers may be integrated into a single electronic document to create a composite document. For example, a portion of content included in an electronic document may be selected (or specified) by a publisher of the electronic document. Different portions of the content (e.g., digital components) may be provided by a third party (e.g., an entity that is not the publisher of the electronic document and/or that does not have the right to modify the code defining the electronic document). In some cases, the digital component is selected for integration with the electronic document after it has been requested to present the electronic document. For example, when an electronic document is rendered (render) at a client device, machine-executable instructions included in the electronic document may be executed by the client device, and the instructions may enable the client device to contact one or more remote servers to obtain digital components in the electronic document to be integrated into the client device.
Disclosure of Invention
In general, one innovative aspect of the subject matter described in this specification can be embodied in methods that include the operations of: receiving, by the service apparatus and from the client device, tag information in a network call to the service apparatus, wherein the network call is generated by exciting a tag embedded in a resource of the publisher, the tag information specifying a given publisher identifier of the publisher and a given client identifier assigned by the publisher to a user of the client device; obtaining, from the client device, a given service identifier assigned to the user by the service apparatus; creating, by the service device and in the data structure, a mapping of the given service identifier to the given client identifier; receiving, from the publisher and through the API, a list of client identifiers assigned by the publisher to the set of users; determining that the list of client identifiers includes a given client identifier mapped to a given service identifier; based on the determination, storing, by the service device, the given service identifier mapped to the given client identifier in a matching service identifier list; receiving, by the service apparatus, a plurality of content requests from a plurality of different client devices accessing a service provided by the service apparatus; responding to the content request based on whether the client device provides a service identifier included in the matching service identifier list, comprising: transmitting first content reserved for the matching service identifier list when the client device provides a corresponding service identifier included in the matching service identifier list; when the client device does not provide the corresponding service identifier included in the matching service identifier list, second content that is not reserved for the matching service identifier list is transmitted. Other embodiments of this aspect include corresponding systems, devices, apparatuses, and computer programs configured to perform the actions of the methods. The computer program (e.g., instructions) may be encoded on a computer storage device. These and other embodiments may each optionally include one or more of the following features.
The method may include the acts of: generating a hash representation of the user, comprising: combining the given publisher identifier and the given client identifier; and generating a hash of the combination of the publisher identifier and the given client identifier. Creating a mapping of the given service identifier to the given client identifier includes mapping a hash table of the user to the given service identifier.
The method may further comprise the acts of: determining that the user is logged into a given service provided by the service device; identifying an account identifier of the user based on the service to which the user is logged; identifying, using the account identifier, a different service identifier assigned to the user for a different service provided by the service device; and creating different mappings between the given client identifier and different service identifiers.
Creating a mapping of the given service identifier to the given client identifier may include creating a mapping of the given service identifier to a first hash value created using the given client identifier and a first hash function or seed. Creating the different mapping between the given client identifier and the different service identifier may include creating a mapping of the different service identifier to a second hash value created using the given client identifier and a second hash function or seed, wherein the second hash value is different from the first hash value.
The method may include the acts of: receiving tag information and different service identifiers from different client devices; deleting the mapping of the given service identifier to the given client identifier from the data structure; and creating different mappings of different service identifiers to a given client identifier in the data structure.
Storing the given service identifier mapped to the given client identifier in the matching service identifier list may include storing the given service identifier in a data structure entry having a set of publisher identifier-content pairs specifying a publisher identifier of a publisher list, wherein the publisher list includes the given client identifier and user-specific content to be distributed to users in the publisher list.
The method may include the acts of: in response to determining that the user has been assigned a different service identifier, updating the matching service identifier list includes: existing associations between a given service identifier and a set of publisher identifier-content pairs are remapped to different identifiers.
The method may include the acts of: after the given service identifier mapped to the given client identifier is stored in the mapped service identifier list, the given client identifier is deleted.
When the client device provides the corresponding service identifier included in the mapping service identifier list, transmitting the first content reserved for the matching service identifier list may include: the first content is presented when a user is accessing a service provided in a second level domain different from the domain of the publisher.
Another aspect of the present disclosure provides a data processing apparatus configured to perform any of the methods disclosed herein. Another aspect of the present disclosure provides a computer-readable medium (which may be transitory or non-transitory) comprising instructions, wherein the instructions, when executed by a computer, cause the computer to perform any of the methods disclosed herein. Yet another aspect of the present disclosure provides a computer program comprising instructions, wherein the instructions, when executed by a computer, cause the computer to perform any of the methods disclosed herein.
Another innovative aspect of the subject matter described in this specification can be embodied in methods that include: receiving, by the service device, tag information in a network call to the service device, the tag information specifying a given client identifier that is (i) assigned by a publisher other than the service device, and (ii) represents a user in a publisher domain of the publisher; obtaining, by the service device, a given service identifier that is (i) assigned by the service device (ii) and that represents a user in a service domain of the service device, wherein the service domain is different from the publisher domain; creating, by the service device, a mapping of the given service identifier to the given client identifier in a data structure; receiving, by a service device, a plurality of content requests from a plurality of different client devices, the plurality of client devices accessing a service provided by the service device in a service domain; and responding to the content request based on whether the client device provides a service identifier mapped to the given client identifier, comprising: when the content request includes a service identifier mapped to a given client identifier, transmitting first content reserved for the content request from a client device providing the service identifier mapped to the given client identifier assigned by the publisher; and when the content request does not include a service identifier mapped to the given client identifier, transmitting second content that is not reserved for the content request from the client device providing the service identifier mapped to the given client identifier assigned by the publisher.
Another innovative aspect of the subject matter described in this specification provides a system comprising: a memory device; and one or more processors configured to interact with the memory device and perform operations when the instructions are executed, the operations comprising: receiving tag information in a network call to a service device, the tag information specifying a given client identifier, the given client identifier (i) being assigned by a publisher other than the service device, and (ii) representing a user in a publisher domain of the publisher; obtaining a given service identifier, the given service identifier being (i) assigned by the service device (ii) and representing a user in a service domain of the service device, wherein the service domain is different from the publisher domain; creating a mapping of a given service identifier to a given client identifier in a data structure; receiving a plurality of content requests from a plurality of different client devices, the plurality of client devices accessing services provided by a service means in a service domain; and responding to the content request based on whether the client device provides a service identifier mapped to the given client identifier, comprising: when the content request includes a service identifier mapped to a given client identifier, transmitting first content reserved for the content request from a client device providing the service identifier mapped to the given client identifier assigned by the publisher; and when the content request does not include a service identifier mapped to the given client identifier, transmitting second content that is not reserved for the content request from the client device providing the service identifier mapped to the given client identifier assigned by the publisher.
Yet another innovative aspect of the subject matter described in this specification provides a non-transitory computer-readable medium storing instructions that, when executed, cause one or more processors to perform operations comprising: receiving tag information in a network call to a service device, the tag information specifying a given client identifier, the given client identifier (i) being assigned by a publisher other than the service device, and (ii) representing a user in a publisher domain of the publisher; obtaining a given service identifier, the given service identifier (i) being assigned (ii) by the service device and representing a user in a service domain of the service device, wherein the service domain is different from the publisher domain; creating a mapping of a given service identifier to a given client identifier in a data structure; receiving a plurality of content requests from a plurality of different client devices, the plurality of client devices accessing services provided by a service means in a service domain; and responding to the content request based on whether the client device provides a service identifier mapped to the given client identifier, comprising: when the content request includes a service identifier mapped to a given client identifier, transmitting first content reserved for the content request from a client device providing the service identifier mapped to the given client identifier assigned by the publisher; and when the content request does not include a service identifier mapped to the given client identifier, transmitting second content that is not reserved for the content request from the client device providing the service identifier mapped to the given client identifier assigned by the publisher.
Particular embodiments of the subject matter described in this specification can be implemented to realize one or more of the following advantages. For example, the innovations discussed herein maintain user privacy while facilitating the ability to provide user-specific information across multiple different services, domains, and entities. More specifically, when users access a third party service, publishers can specify a list of users that they want to provide specific information without specifically identifying those users. Furthermore, the techniques described herein enable specific information to be provided to a specified user list within a computing environment that does not allow third party services to access a publisher cookie. For example, the information may be used to provide specific information in content provided by a third party provider, and also enable the service provider to select content for presentation to users on the list in other web pages or applications (e.g., provided by publishers).
Unlike conventional identifier mapping techniques (e.g., cookie mapping techniques), the mapping mentioned in the techniques discussed throughout this document is used to generate a list of service identifiers corresponding to users that have been selected to receive user-specific information, such that no mapping between client identifiers and service identifiers is required when requesting content for use in a third party service. When requesting content, using a list of service identifiers instead of a mapping reduces latency of the system, e.g., because the system can directly look up using the list of service identifiers included in the list to determine whether user-specific information should be provided, rather than having to first identify the service identifiers in the mapping, then identify client identifiers mapped to the service identifiers, and then determine whether the identified client identifiers are included in a list of client identifiers corresponding to users that are to receive the user-specific information. Aggregation across millions/billions of requests will result in a significant reduction in processor time required to service the requests.
The details of one or more embodiments of the subject matter described in this specification are set forth in the accompanying drawings and the description below. Other features, aspects, and advantages of the subject matter will become apparent from the description, the drawings, and the claims.
Drawings
FIG. 1 is a block diagram of an example environment in which digital components are distributed for presentation with an electronic document.
FIG. 2A is a block diagram illustrating an example technique for creating an identifier map.
FIG. 2B is a block diagram illustrating an example technique for enhancing user privacy in a cross-domain environment.
FIG. 3 is a flow diagram of an example process for enhancing user privacy in a cross-domain content distribution environment.
FIG. 4 is a block diagram of an example computer system.
Like reference numbers and designations in the various drawings indicate like elements.
Detailed Description
Methods, systems, apparatus, and computer readable media are disclosed that maintain user privacy while facilitating the ability to provide user-specific information across multiple different services and entities. More specifically, a publisher (e.g., an owner or operator of a web page or online application) may specify a list of users that it wants to provide specific information when the users access various third party services hosted (host) by online domains of resources other than the publisher (e.g., other than the web page or online application provided by the publisher) without specifically identifying those users.
As described in more detail below, the service device may facilitate distribution of user-specific information specified by the publisher to users of the third party service based on a mapping of service identifiers maintained by the service device to client identifiers assigned to the users by the publisher. The mapping of service identifiers to client identifiers may be generated by the service device. In some implementations, a service obtains a client identifier assigned to a user in a set of tag information that is submitted to the service when pixels within a publisher's resource are executed by a client device (e.g., a browser executing at the client device). The tag that is excited at the client device initiates a network call to the service device and notifies the service device of the client identifier assigned by the publisher and the publisher's identifier. When a call is made to a service device (e.g., a domain of the service device), a client device (e.g., a browser executing at the client device) will also submit a service identifier assigned by the service device and stored at the client device. Using this combination of information, the service device can map the client identifier assigned to a given user by the publisher to the service identifier assigned to that user by the service device.
At the same time, the publisher may submit (e.g., through an application programming interface "API" of the service device) a list of client identifiers that the publisher has selected to receive the user-specific information. The service device uses a map created to convert the list of client identifiers into a corresponding list of service identifiers that does not include client identifiers that represent users in the domain of the publisher, but that still represents those same users in the domain of the service device (e.g., those users represented by the list of client identifiers). When a service device receives content requests from users in the domain of the service device accessing a third party service, those requests will include a service identifier representing the users in the domain of the service device. The received service identifier may then be compared to a list of service identifiers representing users that the publisher has selected to receive user-specific information. When the service device identifies a match between the received service identifier and the list, the service device may send user-specific information in response to the request. When the service device does not recognize a match between the received service identifier and the list, the service device refrains from transmitting user-specific information, but may still transmit other information in response to the request.
FIG. 1 is a block diagram of an example environment 100 in which digital components are distributed for presentation with an electronic document. The example environment 100 includes a network 102, such as a Local Area Network (LAN), wide Area Network (WAN), the Internet, or a combination thereof. Network 102 connects electronic document server 104, user device 106, digital component server 108, and service 110. The example environment 100 may include many different electronic document servers 104, user devices 106, and digital component servers 108.
Client device 106 is an electronic device capable of requesting and receiving resources over network 102. Example client devices 106 include personal computers, mobile communication devices, digital assistant devices, and other devices that can transmit and receive data over the network 102. Client device 106 typically includes a user application, such as a web browser, to facilitate the transmission and reception of data over network 102, although native applications executed by client device 106 may also facilitate the transmission and reception of data over network 102.
Digital assistant devices include devices that include a microphone and a speaker. Digital assistant devices are typically capable of receiving input through speech and responding with content using auditory feedback, and may present other auditory information. In some cases, the digital assistant device also includes or communicates with a visual display (e.g., through a wireless or wired connection). Feedback or other information may also be provided visually when a visual display is present. In some cases, the digital assistant device may also control other devices, such as lights, locks, cameras, climate control devices, alarm systems, and other devices registered with the digital assistant device.
An electronic document is data that presents a collection of content at a client device 106. Examples of electronic documents include web pages, word processing documents, portable Document Format (PDF) documents, images, videos, search result pages, and feeds. Native applications (e.g., "apps") such as applications installed on mobile computing devices, tablet computing devices, or desktop computing devices are also examples of electronic documents. The electronic document may be provided by an electronic document server 104 ("electronic Doc server") to a client device 106. For example, the electronic document server 104 may include a server hosting a publisher website. In this example, the client device 106 may initiate a request for a given publisher web page, and the electronic server 104 hosting the given publisher web page may respond to the request by transmitting machine-executable instructions that initiate presentation of the given web page at the client device 106.
In another example, electronic document server 104 may include an app server from which client device 106 may download apps. In this example, the client device 106 may download files needed to install the app at the client device 106, and then execute the downloaded app locally.
The electronic document may include various contents. For example, the electronic document may include static content (e.g., text or other specified content) that is within the electronic document itself and/or that does not change over time. The electronic document may also include dynamic content that may change over time or on a per request basis. For example, a publisher of a given electronic document may maintain a data source for populating portions of the electronic document. In this example, the given electronic document may include a script that, when processed (e.g., rendered or executed) by the client device 106, causes the client device 106 to request content from a data source. The client device 106 integrates the content obtained from the data source into a given electronic document to create a composite electronic document that includes the content obtained from the data source.
In some cases, a given electronic document may include a digital component script that references service device 110 or a particular service provided by service device 110. In these cases, the digital component script is executed by the client device 106 when a given electronic document is processed by the client device 106. Execution of the digital component script configures the client device 106 to generate a request for the digital component 112 (referred to as a "component request") that is sent to the service apparatus 110 over the network 102. For example, the digital component script may enable the client device 106 to generate a packet data request that includes a header and payload data. Component request 112 may include event data specifying characteristics such as the name (or network location) of the server from which the digital component was requested, the name (or network location) of the requesting device (e.g., client device 106), and/or information that service 110 may use to select one or more digital components or other content provided in response to the request. Component requests 112 are sent by client devices 106 over network 102 (e.g., a telecommunications network) to servers of service apparatuses 110.
Component request 112 may include event data specifying other event characteristics, such as characteristics of the requested electronic document and the location of the electronic document in which the digital component may be presented. For example, event data specifying a reference (e.g., a URL) to an electronic document (e.g., a web page) in which the digital component is to be presented, an available location of the electronic document available for presentation of the digital component, a size of the available location, and/or a media type that is eligible for presentation at the location may be provided to the service device 110. Similarly, event data specifying keywords associated with an electronic document ("document keywords") or entities referenced by the electronic document (e.g., people, places, or things) may also be included in the component request 112 (e.g., as payload data) and provided to the service device 110 to facilitate identification of digital components that qualify for presentation with the electronic document. The event data may also include search queries submitted from the client device 106 to obtain search results pages.
Component request 112 may also include event data related to other information, such as information that a user of the client device has provided, geographic information indicating the state or region from which the component request was submitted, or other information that provides context for the environment in which the digital component will be displayed (e.g., time of day of the component request, day of week of the component request, type of device such as mobile device or tablet device that the digital component will be displayed). The component request 112 may be sent, for example, over a packet network, and the component request 112 itself may be formatted as packet data with a header and payload data. The header may specify the destination of the packet and the payload data may include any of the information discussed above.
Service device 110 selects digital components (e.g., video files, audio files, images, text, and combinations thereof, all of which may take the form of advertising content or non-advertising content) to be presented with a given electronic document in response to receiving component request 112 and/or using information included in component request 112. In some embodiments, the digital component is selected in less than one second to avoid errors that may be caused by delayed selection of the digital component. For example, a delay in providing the digital component in response to the component request 112 may result in a page load error at the client device 106 or result in portions of the electronic document remaining unfilled even after other portions of the electronic document are presented at the client device 106. Further, as the delay in providing the digital component to the client device 106 increases, it is possible that the electronic document is no longer presented at the client device 106 when the digital component is delivered to the client device 106, thereby negatively affecting the user's experience with the electronic document. Further, for example, if an electronic document is no longer presented at the client device 106 at the time the digital component is provided, a delay in providing the digital component may result in a failed delivery of the digital component.
In some implementations, the service apparatus 110 is implemented in a distributed computing system including, for example, a server and a collection 114 of multiple computing devices that interconnect and identify and distribute digital components in response to the request 112. The collection 114 of multiple computing devices operate together to obtain a set of data from millions of available digital components (DC 1-x ) A set of digital components that qualify for presentation in an electronic document is identified. For example, millions of available digital components may be indexed in the digital component database 116. Each digital component index entry may reference a corresponding digital component and/or include a Distribution Parameter (DP) that facilitates (e.g., triggers, adjusts, or limits) distribution/transmission of the corresponding digital component 1 -DP x ). For example, the distribution parameters may facilitate (e.g., trigger) the transmission of the digital component by requiring the component request to include at least one criterion that matches (e.g., precisely or at some pre-specified level of similarity) one of the distribution parameters of the digital component.
In some implementations, the distribution parameters for a particular digital component may include a distribution key that must be matched (e.g., by an electronic document, document key, or term specified in the component request 112) in order for the digital component to be eligible for presentation. The distribution parameters may also require that the component request 112 include information specifying a particular geographic region (e.g., country or state) and/or information specifying that the component request 112 originate from a particular type of client device (e.g., mobile device or tablet device) so that the digital component is eligible for presentation. The distribution parameters may also specify a qualification value (e.g., a bid, a ranking score, or some other specified value) that is used to evaluate the digital component's qualification for distribution/transmission (e.g., among other available digital components), as discussed in more detail below.
The identification of qualified digital components may be partitioned into a plurality of tasks 117a-117c, where the tasks are then distributed among computing devices within the collection 114 of computing devices. For example, different computing devices in the collection 114 may each analyze different portions of the digital component database 116 to identify various digital components having distribution parameters that match the information included in the component request 112. In some implementations, each given computing device in the collection 114 can analyze a different data dimension (or set of dimensions) and communicate (e.g., send) the results of the analysis (Res 1-Res 3) 118a-118c back to the service 110. For example, the results 118a-118c provided by each computing device in the collection 114 may identify a subset of digital components that qualify for distribution in response to a component request and/or a subset of digital components having certain distribution parameters. The identification of the subset of digital components may include, for example, comparing the event data to the distribution parameters, and identifying the subset of digital components having distribution parameters that match at least some features of the event data.
Service 110 aggregates results 118a-118c received from the collection 114 of computing devices and uses information associated with the aggregated results to select one or more digital components to be provided in response to the request 112. For example, as discussed below, the service 110 may select a winning set of digital components (one or more digital components) based on the results of one or more content evaluation processes. In turn, the service 110 may generate and transmit response data 120 (e.g., digital data representing a response) over the network 102, where the response data 120 enables the client device 106 to integrate the winning set of digital components into a given electronic document such that the winning set of digital components is presented at the display of the client device 106 along with the content of the electronic document.
In some implementations, the client device 106 executes instructions included in the reply data 120 that configure and enable the client device 106 to obtain the winning set of digital components from one or more digital component servers. For example, the instructions in reply data 120 may include a network location (e.g., a uniform resource locator (Uniform Resource Locator, URL)) and a script that causes client device 106 to send a Server Request (SR) 121 to digital component Server 108 to obtain a given winning digital component from digital component Server 108. In response to the request, digital component server 108 will identify the given winning digital component specified in server request 121 (e.g., in a database storing a plurality of digital components) and send digital component data (DC data) 122 to client device 106, which digital component data 122 presents the given winning digital component in the electronic document at client device 106.
Service device 110 may utilize various techniques to evaluate the qualifications of various different digital components that may be used to transmit in response to a given component request (e.g., a single component request). For example, service 110 may compare qualification values for various different digital components and select one or more of the digital components having the highest qualification values as the digital component to be transmitted to client device 106 in response to a given component request. In some cases, the initial bid value (e.g., bid or other value) for each digital component may be specified by the provider (or source) of the digital component. For example, one provider (P1) of a video clip (VC 1) may provide an initial cost value of 1.0, while a different provider (P2) of a different video clip (VC 2) may provide an initial cost value of 1.1. For purposes of this example, assume that a component request requests only one digital component to be presented with a particular web page. To select which of the two video clips is to be provided, service apparatus 110 may rank VC1 and VC2 based on their respective initial asset values and select the highest ranked video clip to be sent to the client device in response to the component request. In this example, VC2 ranks higher than VC1 because the initial cost value 1.1 for VC2 is higher than the initial cost value 1.0 for VC 1.
In some cases, the eligibility of the various different digital components may be assessed using only the initial capital values submitted by the provider (source) of the digital components. In other cases, the initial capital value submitted by the provider is increased (or changed) based on one or more other factors. For example, the service 110 may generate an adjusted asset value for the digital component based on the initial eligibility value for the digital component and the quality factor for the digital component.
The quality factor of a given digital component may quantify the likelihood that the given digital component is the appropriate digital component provided in response to the given component request. In some implementations, the quality factor is determined based on one or more features specified by the event data. More specifically, the service device 110 may input one or more features from the event data (e.g., geographic information and/or terms from the electronic document) into a machine learning system that outputs a predicted distribution result that may be used as a quality factor. The predicted distribution result may be expressed, for example, as a predicted interaction rate (e.g., click through rate, play through rate, or another measure of interaction with the digital component) of the digital component in the context of the current component request.
Once the quality factor is obtained, it may be applied to the initial capital value to derive an adjusted capital value. For example, the adjusted grid value (Adjusted Eligibility Value, AEV) may be a product of the initial grid value and the quality factor (e.g., AEV = quality factor the initial grid value). In some cases, the adjusted cost values for the various different digital components may be used to rank the digital classifications (e.g., from highest to lowest), and one or more of the highest ranked digital components may be selected to be sent in response to the component request.
In some cases, the selection of the digital classification may also be based on whether the user is selected to receive user-specific information. As used throughout this document, user-specific information refers to information (e.g., including a digital component) that has been designated for distribution to one or more users included in a particular user list. For example, user-specific information includes, but is not limited to, a specific numeric component that has been designated for distribution to a list of users submitted by publishers of websites, applications, or other resources. The list of users selected to receive/be provided with users on the list may be generated in various ways, but in some cases the list is generated based on users who have performed some particular online activity (e.g., accessing a particular page of a website, reaching a specified level within an application (such as a gaming application), requesting particular information (e.g., using a digital assistant device), viewing a particular video, or other activity). More specifically, the publisher may identify users performing a particular activity, create a list of user identifiers representing those users, and provide the list of user identifiers to the service device 110 along with an indication of the user-specific information to be provided to the users in the list.
The limitation on the user identifier limits the ability of the service device 110 to use the list of user identifiers provided by the publisher. For example, cookies that typically contain a user identifier are typically only accessible by devices (e.g., servers or other computing devices) hosted in domains that match the domain of the cookie. That is, when a cookie is placed on the client device 106 by the electronic document server 104 in the domain example. Com, the cookie is typically only available to a browser or native application running on the client device when the client device accesses a network location (e.g., a web page) within the example. Com. Thus, a server providing content in the domain example. Com will only have access to cookies of the domain example. In this way, any user identifier stored in the example. Com cookie will not be available to devices (e.g., servers or other computing devices) in other domains. Similarly, information stored in cookies placed on client device 106 that includes user identifiers assigned by devices that provide electronic documents in a different domain (e.g., other than example. Com) is typically not accessible by electronic document server 104 in domain example. Com. As such, service device 110 is typically unable to facilitate distribution of user-specific information across domains directly using a list of identifiers assigned to users by publishers.
Cookie mapping may facilitate distribution of user-specific information across domains (and Cookie space), but lacks a process to preserve user privacy, use of Cookie mapping may result in data leakage (e.g., propagation of user information), and/or aggregation of users from multiple different cookies provided by multiple different entities. The cookie mapping itself may also result in higher response delays due to the lookup process associated with the cookie mapping. The following discussion provides details of techniques that may be used to enhance user privacy while facilitating the distribution of user-specific information by a service device to users specified by publishers (e.g., entities operating and/or maintaining electronic document server 104) that publish content in a domain that is different from the domain of the service device. The technique also provides lower response latency than conventional cookie mapping because cookie mapping is not required at service time.
Note that the techniques described herein may be used in any situation where access to a user identifier is limited. For example, even though access to user identifiers allocated in one domain is typically accessible by a device (e.g., a serving device) that provides HTTP requests for web pages/services in a different domain, the techniques described herein may be used in situations where separation of user identifiers is desirable or unavoidable (e.g., to improve user privacy).
This document relates to a service device. As used herein, a service device is one or more data processing devices that perform operations to facilitate distribution of content over a network. The service device is depicted in a block diagram as a single block. However, while the service apparatus may be a single device or a single collection of devices, the present disclosure contemplates that the service apparatus may also be a group of devices, or even a plurality of different systems, that communicate to provide various content to the client devices. For example, the service device may encompass one or more of a search system, a video streaming service, an audio streaming service, an email service, a navigation service, an advertising service, or any other service.
Fig. 2A is a block diagram 200 illustrating an example technique for creating an identifier map 224. Identifier map 250 maps a service identifier ("SID") assigned to a user by service device 110 (or an add-on) to a client identifier ("CID") assigned to the user by publisher 206. The publisher 206 may be an owner, operator, and/or manager of the publisher resource. In some implementations, the publisher resource 206 is in a different domain (e.g., a different fully qualified domain or a different second level domain) than the documents and/or services of the service device 110. For example, publisher resource 206 may be in an example. Com domain, while documents and/or services provided by service device 110 are not in the example. In a particular example, service device 110 may provide HTTP requests for documents and/or services in a google.
The client identifiers assigned to the user by the publisher and stored on the client device 106 are only accessible by devices residing in the example. Com domain (e.g., servers), meaning that the service apparatus 110 will not be able to access those identifiers assigned to the user by the publisher and stored on the client device 106. More specifically, when a client device 106 accesses a given network location (e.g., URL) using a browser 208 (or native application), the browser typically does not provide cookies (or other files) that originate from a different domain than the domain of the web page/service provided from the given network location. In this way, when the client device 106 accesses the service apparatus 110 using the browser 208 (or native application), any cookies discarded on the client device 106 from a domain different from the domain of the document and/or service provided by the service apparatus 110 will not be provided to the service apparatus 110. Thus, any client identifiers assigned to the user by the publisher 206 and stored at the client device 106 (e.g., in the publisher cookie) will not be communicated by the browser 208 to the service apparatus 110.
The publisher 206 may use a tag, referred to as a pixel 210 (for purposes of example), embedded in the properties of the publisher (e.g., web page and/or native application) to cause the client device 106 to send information from the publisher's cookie (e.g., any cookies discarded on the client device from the publisher's domain) to the service apparatus 110. Pixel 210 may be a 1 x 1 pixel (or another pixel, script, or other tag) embedded in publisher resource 206. When a client device 106 submits a request 212 for a publisher resource 206, the request is received by one of the publisher's servers and a response is sent to the client device 106 that includes the publisher resource 206. When client device 106 renders publisher resource 206 within browser 208, the client device will encounter pixel 210. Execution of the pixel 210 by the client device 106 (e.g., using the browser 208) triggers a network call 216 to the service apparatus 110 (e.g., to the URL of the service apparatus 110).
Pixel 210 may be configured to embed a user's client identifier (e.g., "CID 1") into network call 216. Pixel 210 may also be configured to embed additional information, such as an identifier of the publisher (e.g., "PID 1"), into network call 216. For example, when client device 106 requests publisher resource 206 using browser 208, browser 208 may communicate a publisher's cookie stored at client device 106 to the publisher's server. The publisher server may embed this information into the pixels 210 such that when the client device 106 executes the pixels 210, the embedded information will be included in the network call 216 delivered to the service apparatus 110. In this way, the service device 110 is enabled to obtain any client identifiers that have been assigned to the user, even though the browser 208 may not provide those client identifiers to the service device 110 as part of a conventional network call to the service device 110 (e.g., initiated by the user entering the URL of the service device 110 into the browser 208).
When pixel 210 initiates a network call 216 to service device 110, the information embedded in pixel 210 will typically not include any service identifier (e.g., SID 1) assigned to the user by service device 110. This is because when the client device 106 requests the publisher resource 206, the browser 208 does not pass cookies discarded on the client device 106 to the publisher server, as discussed above (e.g., different and/or unmatched domains between the publisher server and cookies). However, when the pixel 210 generates a network call 216 to the service device 110, the network call 216 will be directed to the domain of the service device 110 (e.g., google. Com) such that the browser 208 sends a cookie 218 of the service device 110 (e.g., having the same domain as the service device 110) to the service device 110. The cookie 218 sent to the service apparatus 110 will include a service identifier (e.g., "SID 1") assigned to the user by the service apparatus 110 (or another device within the same domain as the service apparatus 110). Thus, when pixel 210 fires, client device 106 will send service identifier assigned to the user by service device 110 and the client identifier assigned to the user by the publisher to service device 110.
The above examples relate to sending a service identifier and a client identifier to the service device 110 using pixels. In some implementations, the service identifier and the client identifier can be sent by the client device 106 to the service apparatus 110 using a script (e.g., javaScript) embedded in the publisher resource 206. The script may be, for example, a script provided by a service provider owning/operating the service device 110. When the browser 208 encounters a script, the browser 208 will execute the script, which causes the browser 208 to transmit an HTTP request including a service identifier and/or a client identifier to the service device 110. In some implementations, the script causes the browser 208 to access one or more cookies having the same domain as the HTTP request to the service device 110 and provide the cookie and/or information from the cookie to the service device 110. In this way, the script may be used to send the service identifier and the client identifier to the service device 110.
Note that the client identifier may not be stored on the client device, but rather may be generated based on other user-specific information that may be stored on the client device 106, which is included in the HTTP request parameters or in a dynamic HTTP response generated by the publisher server when the client device 106 accesses electronic documents and/or services provided by the publisher. These types of client identifiers may also be obtained by the browser 208 and sent to the service device 110 when the pixel or script is executed by the browser 208. Scripts and/or other executable instructions embedded in the publisher's resources are also referred to as labels, and information provided based on the execution of these scripts and/or other executable instructions is collectively referred to as label information. The execution of a tag is also referred to as excitation of the tag.
The service device 110 receives both the client identifier and the service identifier and generates mapping information 220, which mapping information 220 indicates that both the service identifier and the client identifier are assigned to and/or represent the same user. For example, the mapping information may be a data set arranged in a way that enables the service device 110 to use the service identifier or the client identifier to obtain another corresponding identifier representing the same user. For example, the mapping information may simply be formatted as a key pair indicating that the service identifier and the client identifier represent the same user.
One way in which user privacy is enhanced by the present innovation is by creating and storing a mapping of client identifiers to service identifiers. For example, rather than simply storing a direct mapping of client identifiers assigned by publishers to service identifiers assigned by service device 110, service device 110 may generate a hash of client identifiers mapped to service identifiers. This limits the ability to reveal the user's client identifier. Further, to prevent the possibility of linking two different client identifiers to the same user (e.g., by assigning the same client identifier to the same user by two different publishers), the serving device 110 may combine the publisher identifier with the client identifier prior to hashing.
For example, assume that a publisher having an identifier PID1 has assigned a client identifier CID1 to a particular user, and a different publisher having an identifier PID2 also has assigned a client identifier CID1 to the same particular user. In this example, the mapping of the client identifier of the first publisher may be, for example, sid1=hash (PID 1: CID 1), while the mapping of the second publisher may be sid1=hash (PID 2: CID 1), resulting in different mappings across different publishers.
Service device 110 may store mapping information 220 in ID mapping database 222. For example, each entry in the ID mapping database 222 may correspond to a pair of service identifiers and client identifiers that represent the same user. In other words, each entry may specify a mapping of a user's service provider to the same user's client identifier. The ID map database 222 may store multiple instances of the map information 220 for multiple different users, collectively referred to as identifier maps 224.
Some service providers may use different service identifiers and/or different domains for different services. In these cases, the process performed above may be combined with additional processes as needed to extend cookie mapping while continuing to protect user privacy by preventing different service identifiers from linking to the same client identifier. For example, when a combination of a client identifier and a service identifier is received by the service apparatus 110, the service apparatus 110 may determine whether the user is currently logged into a service provided by the service apparatus 110.
If the user is currently logged into a service (e.g., a video streaming service) provided by service device 110, service device 110 may identify the user account with the account identifier of the service. Using the account identifier, service apparatus 110 may identify another different service identifier (other than the service identifier received from client device 106 based on pixel-based incentive) that has been assigned to the user for another service (e.g., a search service) provided by the service provider. For example, the service device 110 may search the index of account identifiers and corresponding service identifiers for the other service (e.g., a search service) and identify a different service identifier that has been assigned to the user for the other service. The service device 110 may then use the client identifier and the different service identifier to create a mapping between the client identifier and the different service identifier, e.g., in a different database, in a similar manner as described above. In this manner, the service device 110 may trigger, by a single pixel, operations discussed throughout herein across two different identifier spaces (e.g., cookie spaces) on a publisher resource that is in a different identifier space (e.g., cookie space) than the service provided by the service provider.
To further protect user privacy in such cross-identifier space (e.g., cross-cookie space) implementations, a different hash function (or seed) may be used when hashing the client identifier assigned to the user by the publisher 206. For example, instead of using the same hashes of client identifiers discussed above, the service apparatus 110 may use a different hash function (or seed) to create different hashes of client identifiers such that a first mapping of client identifiers and first service identifiers (e.g., of a first service) is different from (and does not directly belong to) a second mapping of client identifiers to second service identifiers. More specifically, the first mapping of the first service may be, for example, sid1=hash 1 (PID 1: CID 1), and the second mapping of the second service may be, for example, sid2=hash 2 (PID 1: CID 1), such that it is not obvious that SID1 and SID2 are assigned to the same user. A similar process may be performed across any number of identifier spaces to link client identifiers to corresponding service identifiers in each identifier space (e.g., for each service) while ensuring that entries in different maps do not attribute to each other.
In some cases, a user may use a plurality of different devices to access services of a service provider (e.g., service apparatus 110). For example, a user may first access a particular service using their mobile device, then access the same service using a digital assistant device, and then access the same service using a tablet device. In this example, each device will have a different service identifier stored at the device. To preserve user privacy, the service device 110 may be configured to retain only the mapping of recently encountered service identifiers.
Continuing with the example above, assume that service apparatus 110 first maps a service identifier stored at a mobile device to a client identifier, for example, in the manner described above. It is further assumed that at a later time, the service apparatus 110 receives the client identifier from the tablet device along with the client identifier (e.g., due to pixel firing). In this case, the service apparatus 110 may delete the mapping of the client identifier to the service identifier created using the service identifier obtained from the mobile device, thereby eliminating the earlier received service identifier from the identifier mapping 224. However, service apparatus 110 may create a new mapping of the second service identifier (e.g., the service identifier received from the tablet device) to the client identifier assigned to the user by publisher 206 and store the mapping in mapping list 224 in a manner similar to that discussed above. In this way, the service device 110 further enhances user privacy by reducing the number of identifiers that can be attributed to the same user, which limits the amount of information attributed to a particular user.
In some implementations, one or more additional devices (not shown) may receive the network call 216 and redirect the client device 106 to the service device 110. For example, pixel 210 may initiate a network call 216 to a server that tracks the transition (or other analysis data). In this example, the server tracking the transitions may record the transitions identified in the network call 216 and pass the client identifier and/or the publisher identifier to the service device 110 in a redirect. The server tracking the transition may also pass the service identifier to the service device 110 (e.g., if the additional device belongs to the same domain as the service device 110). Alternatively and/or additionally, when redirection from the add-on is performed by the client device 106, the browser will identify the service cookie(s) and pass them along with the information from the network call 216, which is embedded in the redirection initiated by the add-on.
FIG. 2B is a block diagram 250 illustrating an example technique for enhancing user privacy in a cross-domain environment. The technique illustrated by block diagram 250 may be performed using (e.g., after creation) the identifier mapping 224 discussed with reference to fig. 2A. Further, the techniques illustrated by block 250 enable the service apparatus 110 to facilitate delivery (e.g., distribution or transmission) of user-specific information to a list of users specified by the publisher 206 (e.g., via a client identifier) when those users are accessing services provided by the service apparatus 110 (e.g., when the client device 106 does not provide the client identifier to the service apparatus 110).
As discussed above, the publisher 206 may specify that user-specific information (e.g., remarket(s) content) be provided to a specified user list. In some cases, the publisher 206 may want user-specific information provided to a specified set of users when those users access (or otherwise utilize) services provided by service devices 110 (or another third party service provider) that are outside of the publisher's domain. To facilitate the ability of the service apparatus 110 to distribute (or send) user-specific information to users selected by the publisher 206, the publisher 206 may provide the service apparatus 110 with a list of client identifiers 252, the list of client identifiers 252 indicating users that the publisher has selected as recipients of the user-specific information. The client identifier list 252 specifies one or more client identifiers that have been assigned to the corresponding user(s) by the publisher 206. When a user first accesses a resource (e.g., any web page of a publisher's web site) provided from a publisher's domain, a client identifier in the list may be assigned to the user. Additionally, or alternatively, a list of client identifiers may be assigned to users when those users access a particular resource provided by a publisher (e.g., a particular page within a publisher's website). The client identifier may be stored on the user's client device 106, for example, in a cookie accessible only by devices (e.g., servers) having a network address within the publisher's domain.
After service device 110 receives client identifier list 252, service device 110 may use identifier map 224 to determine whether a service identifier has been assigned to each user represented by a client identifier in client identifier list 252. In some implementations, the service apparatus 110 may perform a lookup (or search) of the identifier map 224 in an effort to identify entries in the identifier map 224 that match each particular client identifier included in the client identifier list 252. For example, service device 110 may compare each client identifier in the list of client identifiers to the client identifiers in each entry of identifier map 224. In this example, service device 110 will determine that identifier map 224 includes a set of entries 254, where set of entries 254 includes client identifiers (e.g., CID1, CID 2) that match identifiers in client identifier list 252.
When service device 110 determines that an entry in identifier map 224 matches one of the client identifiers in client identifier list 252 (e.g., via a comparison function, a query function, or another function), service device 110 may identify a given service identifier included in the entry containing the matching client identifier. As discussed above, including a given service identifier in the same entry of the identifier map 224 indicates that the given service identifier represents (e.g., is assigned to) the same user represented (e.g., is assigned) by the client identifier in that entry. In this way, the service device 110 may add a service identifier (but not a client identifier) to the matching service identifier list 256 stored in the publisher list database 258. In this way, the service device 110 may generate a set of service identifiers that represent users identified by publishers using client identifiers. The set of service identifiers enables the service device 110 to use the service identifiers alone (e.g., without a client identifier) to determine whether a given user accessing the services of the service device 110 is a user that the publisher has specified should receive user-specific information (e.g., by a client identifier).
In some implementations, the publisher list database 258 stores a data structure 260 that includes a list of matching identifiers 256. The data structure 260 may also include information (e.g., a publisher ID, PID 1) identifying the publisher submitting the client identifier for creation of the matching identifier list 256. The data structure 260 may also include information identifying that the publisher has specified user-specified content (e.g., U-S content 1) that should be delivered to the user specified by the publisher. Note that the publisher list database may store different data structures for a plurality of different publishers so as to be able to provide user-specific information to a plurality of different user lists provided by the plurality of different publishers.
When the client device 106 accesses a service provided by the service apparatus 110 or otherwise submits a request to the service apparatus 110 (e.g., to any resource belonging to the same domain as the service apparatus 110), the client device 106 will submit a service identifier assigned by the service apparatus 110 to the user to the service apparatus 110. For example, as discussed above, if a user is accessing a web site provided by a service device (e.g., in the same second-level domain as the device, such as google. Com), a browser executing at client device 106 will provide service device 110 with any cookies belonging to the domain of service device 110 (e.g., the second-level domain).
In a particular example, as shown in fig. 2B, the client device 106 contacts the service apparatus 110 to access a web page 264 that is hosted in a domain of the service apparatus 110 and includes service content 266. When the client device 106 requests the web page 264, the browser 208 will submit the service identifier 268 assigned to the user by the service apparatus 110 to the service apparatus 110 (e.g., as part of a cookie file).
Service 110 responds to the request for the web page by providing web page 264, which includes service content 266. In some implementations, the service content is a user interface of a search system. In these cases, the user may submit a search query to the service device 110, and the service device may respond with service content 266 in the form of a search results page. The search results page may include content slots (slots) 270 reserved for presentation of third party content (e.g., digital components) other than the search results.
Service device 110 may select third party content that fills content slots 270 based in part on whether user's service identifier 268 is included in publisher list database 258. For example, the service apparatus 110 may look up (or query) the publisher list database 258 to determine whether the service identifier 268 obtained from the client device 106 is included in the publisher's data structure 260. More specifically, service device 110 may query publisher list database 258 using service identifier 268. When the query returns a match in the data structure 260 stored in the publisher list database 258, the service apparatus 110 may send the content specified by the data structure 260 to the client device 106.
For example, when service device 110 queries publisher list database 258 using service identifier 268, the query result may be an indication that matching service identifier 272 is included in publisher's data structure 260 with publisher identifier PID 1. In other words, the response to the query may be an indication that the client device has provided a service identifier included in the publisher's matching service identifier list.
In response to the identification of the matching service identifier 272, the service device may send content reserved (e.g., specified for the user) for the user represented by the service identifier in the data structure 260, in this example U-S content 1 275. For example, the service apparatus 110 may retrieve the U-S content 1 275 from the content database 274 and send the retrieved content to the client device 106 for presentation in the content slot 270, or the service apparatus 110 may send the network address of the U-S content 1 275 to the user device 106 and the user device may retrieve the U-S content 1 275 from the network address. In this example, the retained content is user specific information U-S content 1 275.
When the query fails to return an indication that the publisher list database 258 includes a matching service identifier 272 (the client device does not provide an indication of the service identifiers included in the matching service identifier list provided by the publisher), the service apparatus 110 may not provide any content to populate the content slots 270, or the service apparatus 110 may provide content that is not reserved (or specifically designated) for the user represented by the matching service identifier list. In this example, the user-specific information U-S content 1 275 would not be provided to the client device in this case.
For purposes of example, the description above relates to determining whether the service identifier 268 is included in the publisher's data structure 260 with the publisher identifier PID 1. In some implementations, each service identifier is used as an index key for determining all publisher lists including users. For example, the data structure 260 may include a publisher identifier (e.g., PID) and a mapping of the corresponding content to a service identifier, which enables direct lookup of all publisher lists including users, and the corresponding content to be distributed to users on each list, using the service identifier 268.
More specifically, assume that data structure 260 includes the following map SID1→PID1: U-S content 2, PID3: U-S content 3. In this example, the service device 110 may use the received service identifier SID1 as a query parameter for searching the publisher list database 258 and/or the data structure 260. The response to the query will be a list of publisher identifiers corresponding to the list of publishers including service identifier SID1, and corresponding content that has been designated for provision to users in the list of publishers. The response is also considered to be an indication that the client device has provided a service identifier included in the matching service identifier list of the publisher (or publishers). The service apparatus 110 may use the list of publisher identifiers and corresponding content to determine which content is to be actually sent to the client device 106. For example, the service device may perform a content selection process similar to that described with reference to fig. 1.
In the above example, the service provided by the service apparatus 110 is referred to as a search service, but the service may be any service. For example, the service may be a music streaming service, wherein the content slots are time slots for rendering third party content. The service may also be an email service, a social media service, a digital assistant service, a video streaming service, another online media service, a shopping service, an advertising service, or any other service provided online.
In some implementations, the content and/or services may be provided by a third party that is different from each of the publishers and service devices 110 whose content is ultimately provided. In these cases, a similar process may be used when the service device 110 is providing content and/or services within a service provided by a third party. For example, if the third-party content includes pixels or scripts that generate HTTP requests to the service apparatus 110, the browser (or application) that initiated the HTTP requests may provide the service apparatus 110 with the service identifier 272, and the service apparatus 110 may utilize the service identifier 272 to select content to be presented with the third-party content or service at the client device 106 in a manner similar to that described above.
FIG. 3 is a flow diagram of an example process 300 for enhancing user privacy in a cross-domain content distribution environment. Process 300 may be performed by one or more data processing devices, such as service device 110 discussed above. The process may also be implemented as instructions stored on a non-transitory computer-readable medium. The instructions may be executed by one or more data processing apparatus. Execution of the instructions may cause one or more data processing apparatus to perform the operations of process 300.
Tag information is received in a network call from a client device (302). In some implementations, the network call including the tag information is generated by exciting a tag (e.g., a pixel) embedded in the publisher resource. For example, when a client device exposes a publisher resource, the client device will execute the tag, thereby exciting the tag, which will generate a network call that delivers the tag information to the service device. In some implementations, the tag information includes a given publisher identifier of a publisher of the publisher resource and a given client identifier assigned by the publisher to a user of the client device. A given publisher identifier may uniquely identify a publisher, while a given client identifier may uniquely identify a user within the domain of the publisher.
A given service identifier is obtained from a client device (304). A given service identifier is an identifier assigned to a user by a service device. In some implementations, a given service identifier uniquely identifies a user relative to other users within the domain of the service provider. The given service identifier may be obtained, for example, by discarding a cookie on the client device by the service means.
For example, the client device may have accessed a service provided by a service provider before the client device encounters a tag at a publisher resource. In this example, the cookie including the given service identifier may have been discarded by the service apparatus on the client device. When a tag triggers and submits a network call to a service device at a client device, a browser (or other application) executing at the client device may identify a domain of the service device (e.g., from the tag or network call), use the domain to identify a cookie whose domain matches the domain of the service device, and submit the cookie to the service device that may include a given service identifier.
A blurred representation of the user is generated (306). The ambiguous representation of the user may be any representation of the user that helps prevent the identity of the user from being directly determined by the representation. One technique used in obscuring the representation of the user is hashing. In some implementations, the representation of the user is obscured by hashing a given client identifier assigned to the user by the publisher. However, two different publishers may have assigned the same client identifier to the same user, such that the same hash value may ultimately represent the same user in two different publisher domains (e.g., in two different cookie spaces). To reduce (e.g., prevent) the likelihood that a single user is represented by the same hash value in two different domains, as discussed above, the ambiguity of the user's representation may be a hash of a combination of a given client identifier and a publisher identifier that assigns the given client identifier to the user's publisher.
In a particular example, a hash representation of a user may be generated in the following manner. A given publisher identifier of a publisher (e.g., as indicated in the tag information) may be combined with a given client identifier (e.g., as indicated in the tag information). The combination may be performed in various ways, but in one example the combination may be a concatenation of a given publisher identifier and a given client identifier. The combination of the given publisher identifier and the given client identifier may then have a hash function applied thereto, thereby generating a hash of the combination. The combined hash may serve as a hash representation of the user, or as a fuzzy representation of the user.
A mapping of the given client identifier to the given service identifier is created (308). In some implementations, the map is created in a data structure stored in a database, as discussed above. For example, the service device may create an entry in a data structure that links, associates, or otherwise indicates that the given client identifier and the given service identifier represent the same user.
As discussed above, when a service apparatus provides a plurality of services, the service apparatus may assign different service identifiers to the same user. For example, a service device providing an online search service may assign a first service identifier to a particular user for the search service. Meanwhile, if the service apparatus also provides an online video streaming service, the service apparatus may assign different service identifiers to the same specific user for the video streaming service. In this example, a particular user has two different service identifiers assigned to the user by the service device, but the user may be able to access both services using the same account identifier, e.g., by using the same login credentials.
In some implementations, the service device may extend the mapping of client identifiers to different service identifiers (e.g., different services for the service device). For example, assume that when tag information is received from a client device (e.g., when a user accesses a publisher resource), the user is currently logged into a service (e.g., a video streaming service) provided by a service apparatus. In this example, the service device may identify an account identifier of the user and use the account identifier to identify other service identifiers in other services (e.g., in other cookie spaces) that the service device has assigned to the user. For example, the service device may use the account identifier to search for a mapping of the account identifier to a service identifier in a database associated with other services. When a match between the account identifier and the mapping of account identifiers to service identifiers is found in the database of other services, the service device may continue to identify different service identifiers that have been assigned to the user for different services provided by the service device. Different mappings between client identifiers and different service identifiers may then be created in a manner similar to that discussed above.
Mapping client identifiers to various different service identifiers that the service device has assigned to users for various different services enables the service device to perform sending user-specific information to a set of users specified by a publisher across the various different services provided by the service device (e.g., using the client identifiers assigned to users by the publisher), even though the different services do not share a common user identifier space (e.g., cookie space).
When the mapping of client identifiers to service identifiers is extended to other cookie spaces, for example, for other services provided by the service apparatus, additional privacy enhancement techniques may be used to ensure that information from different cookie spaces cannot be aggregated and attributed to the same user. For example, a given client identifier assigned to a user by a publisher (e.g., a single client identifier received in tag information) may be hashed using a different hash function (or seed) for each different cookie space (e.g., for each service provided by a service device).
In a particular example, assume that the client identifier assigned by the publisher for a particular user is CID1 and the user logs into a particular service provided by the service device. In this example, a given client identifier (or a combination of a given client identifier and a publisher identifier) may be hashed using a first hash function (or seed) to obtain a first hash value, which is then mapped to a service identifier of a particular service. Continuing with this example, before a given client identifier is mapped to a different service identifier of a different service provided by the service device, the given client identifier (or a combination of the given client identifier and the publisher identifier) may be hashed using a second hash function (or seed) to obtain a second hash value that is different from the first hash value, but that represents the same user as the first hash value. A mapping of the second hash value to a different service identifier may be created such that a user corresponding to a given client identifier may be identified in the context of a different service and provided with user specific information specified by the publisher.
In some embodiments, the service device may assign multiple different service identifiers to the same user in other contexts. For example, the same user may access the same service at different times, where the same user logs in during one access and does not log in during another access. In this case, the service device may assign two different service identifiers to the same user. In this example, one of the service identifiers would represent the user at login and the other service identifier represents the user at logoff. Mapping extensions similar to those discussed above may also be used in these situations.
A list of client identifiers is received from a publisher (310). In some implementations, the list of client identifiers is received through an API that enables the publisher to upload the client identifiers to the service device. The client identifier list includes client identifiers that have been assigned to various users by publishers. The client identifier list represents users that the publisher has picked up, and when these users access the services provided by the service device (e.g., in a different domain and/or cookie space than the publisher), user-specific information (e.g., remarketing content) specified by the publisher is received. In some implementations, as discussed above, the client identifier list represents users that have performed some particular action at the publisher's website (or other attribute).
It is determined that the list of client identifiers provided by the publisher includes a given client identifier (312). It may be determined that the client identifier list includes a given client identifier by comparing the client identifier list to a mapping of service identifiers to client identifiers (e.g., the identifier mapping discussed above). In some implementations, each client identifier (or a combination of publisher identifier and each client identifier) in the list of client identifiers is hashed in the same manner as the representation of the user in the map, as discussed above. The hashed version of the client identifier is then compared to the representation of the client identifier in the map. When a match between representations (e.g., hashed representations thereof) of the given client identifiers is found, it is determined that the given client identifier is included in the list of client identifiers. Note that the same steps may be followed for each client identifier in the list, and that all client identifiers that match an entry in the map may be determined. Note also that references to the mapping of client identifiers to service identifiers (or vice versa) contemplate mappings between any representations (e.g., original, hashed, or otherwise) of client identifiers and/or service identifiers.
The service identifiers mapped to the given client identifier are stored in a matching service identifier list (314). In some implementations, the service identifier is stored in a matching service identifier list based on determining that the given client identifier is included in a list of client identifiers received from the publisher. The matching service identifier list is a new/different representation of the client identifier list received from the publisher. That is, the matching service identifier list uses the service identifiers assigned to users by the service device to represent users specified by the publisher using the client identifiers assigned to those users by the publisher. This enables the user specified by the publisher to be identified within the services provided by the service device (e.g., in a different domain and/or cookie space than the publisher). In this way, the matching service identifier list may be used to ensure that the user specified by the publisher receives user-specific information while the user is accessing a service provided by the service provider. Note that this process may be performed for each client identifier in the list of client identifiers in order to create a list of multiple service identifiers representing users corresponding to the list of client identifiers. This may also be performed for a plurality of different publishers. As discussed above, the mapping may be a mapping between a single instance of a service identifier and all pairs of publisher identifiers that include a list of service identifiers and corresponding content that has been designated for distribution to users in the list that include the service identifiers. This facilitates a direct lookup of user-specific content that has been specified by a plurality of different publishers for distribution to the user. This reduces the amount of time required to identify the various content that should be considered for distribution to the user, thereby improving the performance of the system itself (e.g., reducing the latency of selecting content).
Once the service identifier mapped to the given client identifier has been stored in the matching service identifier list, the given client identifier may be deleted (316). In some embodiments, a given client identifier is deleted from the service device in order to further protect user privacy, for example, by limiting the possible distribution of the client identifier.
In some cases, tag information including a given publisher identifier and a given client identifier may be received with different service identifiers (318). For example, suppose a user first uses a mobile device to access a publisher resource and later uses a tablet device to access the publisher resource, as discussed above. In this case, the service identifier assigned to the user will be different on a per device basis. However, the given client identifier and the given publisher identifier may be the same. In this case, only one instance of the service identifier may be mapped to a given client identifier. In some implementations, the mapping of the given service identifier to the given client identifier is deleted (320) and a different mapping of a different service identifier to the given client identifier is created (322) in a similar manner as described above. This particular solution option maintains a mapping between recently received service identifiers, discarding older service identifiers. Of course, older service identifiers (and original mappings) may be retained while deleting later mappings or avoiding creation of later mappings. When the new/different mapping replaces an existing mapping that has been included in the matching service identifier list, a different service identifier may be stored in the matching service identifier list (314).
In some implementations, when a new service identifier replaces an older (or different) service identifier representing the same user, a mapping modification can be made such that a mapping of the publisher identifier(s) and corresponding content is maintained without requiring further action on the publisher portion. For example, assume that SID1a is assigned to a user to whom SID1 has been assigned. In this case, the existing association between SID1 and the publisher identifier (e.g., PID1 and/or any other PID) may be remapped to SID1a. In this example, the resulting mapping may replace the existing mapping such that the publisher does not need to take any further action to ensure that the user is still eligible to distribute user-specific content that the user has been eligible to receive (e.g., by being included in a list of client identifiers previously specified by the publisher). In this way, the system is able to maintain an association between the client identifier, the publisher identifier, and the list of service identifiers even when the originally assigned service identifier changes.
A content request is received (324) from a plurality of different client devices that are accessing a service provided by a service apparatus. In some implementations, the content request is a component request, as discussed with reference to fig. 1. The content request may be a request for third party content to be delivered to the client device for incorporation into a portion of a display (or user interface) at the client device. In some cases, incorporating third party content into a portion of a display (or user interface) may occur at a client. In some cases, third party content may be incorporated at the service device and delivered with the service content provided by the service device. In some cases, no content request is required in order to deliver content within the service provided by the service device. For example, the service device may insert third party content into the service before or when the user accesses the service. In this case, a separate content request is not required.
The content request is responded to based on whether the client device provides a service identifier included in the matching service identifier list (326). For example, first content reserved for a user specified by a publisher (e.g., specified for the user) may be sent to a client device when the client device provides a corresponding service identifier included in a list of matching service identifiers. For example, suppose that a publisher has specified that particular content (e.g., images, messages, or videos) be provided to a user represented by a list of client identifiers uploaded by the publisher. In this case, the corresponding service identifiers of those users will be included in the matching service identifier list, and specific content may be sent (or otherwise distributed) to the client device based on the client device having submitted the service identifiers included in the service identifier list. The user-specific information may be delivered when the user is accessing a service provided by the service device, such that the content is presented when the user is accessing a second level domain that is different from the domain of the publisher.
When the client device does not provide the corresponding service identifier included in the matching service identifier list, different content that is not reserved for the matching identifier list is transmitted to the client device. For example, the different content may be any content that is otherwise available for distribution to the client device based on one or more factors discussed with reference to fig. 1. In some implementations, when the client device does not provide the corresponding service identifier included in the matching service provider list, no third party content will be provided for presentation with the service being accessed by the user.
FIG. 4 is a block diagram of an example computer system 400 that may be used to perform the operations described above. System 400 includes a processor 410, a memory 420, a storage device 430, and an input/output device 440. Each of the components 410, 420, 430, and 440 may be interconnected, for example, using a system bus 450. Processor 410 is capable of processing instructions for execution within system 400. In one implementation, the processor 410 is a single-threaded processor. In another embodiment, the processor 410 is a multi-threaded processor. The processor 410 is capable of processing instructions stored in the memory 420 or on the storage device 430.
Memory 420 stores information within system 400. In one implementation, the memory 420 is a computer-readable medium. In one implementation, the memory 420 is a volatile memory unit. In another implementation, the memory 420 is a non-volatile memory unit.
Storage device 430 is capable of providing mass storage for system 400. In one implementation, the storage device 430 is a computer-readable medium. In various different implementations, storage device 430 may include, for example, a hard disk device, an optical disk device, a storage device shared by multiple computing devices over a network (e.g., a cloud storage device), or some other mass storage device.
Input/output device 440 provides input/output operations for system 400. In one implementation, the input/output device 440 may include one or more network interface devices, such as an ethernet card, a serial communication device (e.g., an RS-232 port), and/or a wireless interface device (e.g., an 802.11 card). In another implementation, the input/output devices may include a drive device configured to receive input data and transmit output data to other input/output devices (e.g., keyboard, printer, and display device 360). However, other implementations may also be used, such as mobile computing devices, mobile communication devices, set-top box television client devices, and the like.
Although an example processing system has been described in FIG. 4, implementations of the subject matter and functional operations described in this specification can be implemented in other types of digital electronic circuitry, or in computer software, firmware, or hardware, including the structures disclosed in this specification and their structural equivalents, or in combinations of one or more of them.
An electronic document (for brevity, simply referred to as a document) does not necessarily correspond to a file. The documents may be stored in a portion of a file holding other documents, in a single file dedicated to the document in question, or in multiple reconciliation files.
Embodiments of the subject matter and the operations described in this specification can be implemented in digital electronic circuitry, or in computer software, firmware, or hardware, including the structures disclosed in this specification and their structural equivalents, or in combinations of one or more of them. Embodiments of the subject matter described in this specification can be implemented as one or more computer programs, i.e., one or more modules of computer program instructions, encoded on a computer storage medium (or media) for execution by, or to control the operation of, data processing apparatus. Alternatively or additionally, the program instructions may be encoded on a manually-generated propagated signal, e.g., a machine-generated electrical, optical, or electromagnetic signal, that is generated to encode information for transmission to suitable receiver apparatus for execution by data processing apparatus. The computer storage medium may be or be included in a computer readable storage device, a computer readable storage substrate, a random or serial access memory array or device, or a combination of one or more of them. Furthermore, while the computer storage medium is not a propagated signal, the computer storage medium may be a source or destination of computer program instructions encoded in an artificially generated propagated signal. Computer storage media may also be or be included in one or more separate physical components or media (e.g., multiple CDs, disks, or other storage devices).
The operations described in this specification may be implemented as operations performed by a data processing apparatus on data stored on one or more computer readable storage devices or received from other sources.
The term "data processing apparatus" encompasses all kind of apparatus, devices, and machines for processing data, including by way of example a programmable processor, a computer, a system-on-a-chip, or a combination of the foregoing. The apparatus may comprise dedicated logic circuitry, such as an FPGA (field programmable gate array) or an ASIC (application specific integrated circuit). In addition to hardware, the apparatus may include code that creates an execution environment for the computer program in question, e.g., code that constitutes processor firmware, a protocol stack, a database management system, an operating system, a cross-platform runtime environment, a virtual machine, or a combination of one or more of them. The apparatus and execution environment may implement a variety of different computing model infrastructures, such as web services, distributed computing, and grid computing infrastructures.
A computer program (also known as a program, software application, script, or code) can be written in any form of programming language, including compiled or interpreted languages, declarative or procedural languages, and it can be deployed in any form, including as a stand-alone program or as a module, component, subroutine, object, or other unit suitable for use in a computing environment. A computer program may, but need not, correspond to a file in a file system. A program can be stored in a portion of a file that holds other programs or data (e.g., one or more scripts stored in a markup language document), in a single file dedicated to the program in question, or in multiple coordinated files (e.g., files that store one or more modules, sub-programs, or portions of code). A computer program can be deployed to be executed on one computer or on multiple computers at one site or distributed across multiple sites and interconnected by a communication network.
The processes and logic flows described in this specification can be performed by one or more programmable processors executing one or more computer programs to perform actions by operating on input data and generating output. The processes and logic flows can also be performed by, and apparatus can also be implemented as, special purpose logic circuitry, e.g., an FPGA (field programmable gate array) or an ASIC (application-specific integrated circuit).
Processors suitable for the execution of a computer program include, by way of example, both general and special purpose microprocessors. Generally, a processor will receive instructions and data from a read-only memory or a random access memory or both. The essential elements of a computer are a processor for performing actions in accordance with instructions and one or more memory devices for storing instructions and data. Typically, a computer will also include, or be operatively coupled to receive data from or transfer data to, or both, one or more mass storage devices for storing data, e.g., magnetic, magneto-optical disks, or optical disks. However, a computer does not require such a device. Furthermore, a computer may be embedded in another device, such as a mobile phone, a Personal Digital Assistant (PDA), a mobile audio or video player, a game console, a Global Positioning System (GPS) receiver, or a portable storage device (e.g., a Universal Serial Bus (USB) flash drive), to name a few. Devices suitable for storing computer program instructions and data include all forms of non-volatile memory, media and memory devices, including by way of example semiconductor memory devices, e.g., EPROM, EEPROM, and flash memory devices; magnetic disks, such as internal hard disks or removable disks; magneto-optical disk; and CD-ROM and DVD-ROM disks. The processor and the memory can be supplemented by, or incorporated in, special purpose logic circuitry.
To provide for interaction with a user, embodiments of the subject matter described in this specification can be implemented on a computer having a display device, e.g., a CRT (cathode ray tube) or LCD (liquid crystal display) monitor, for displaying information to the user and a keyboard and a pointing device, e.g., a mouse or a trackball, by which the user can provide input to the computer. Other types of devices may also be used to provide for interaction with a user; for example, feedback provided to the user may be any form of sensory feedback, such as visual feedback, auditory feedback, or tactile feedback; and input from the user may be received in any form, including acoustic, speech, or tactile input. Further, the computer may interact with the user by sending and receiving documents to and from the device used by the user; for example by sending a web page to a web browser on a user client device in response to a request received from the web browser.
Embodiments of the subject matter described in this specification can be implemented in a computing system that includes a back-end component, e.g., as a data server, or that includes a middleware component, e.g., an application server, or that includes a front-end component, e.g., a client computer having a graphical user interface or a Web browser through which a user can interact with an implementation of the subject matter described in this specification, or any combination of one or more such back-end, middleware, or front-end components. The components of the system can be interconnected by any form or medium of digital data communication (e.g., a communication network). Examples of communication networks include local area networks ("LANs") and wide area networks ("WANs"), internetworks (e.g., the internet), and peer-to-peer networks (e.g., ad hoc peer-to-peer networks).
The computing system may include clients and servers. The client and server are typically remote from each other and typically interact through a communication network. The relationship of client and server arises by virtue of computer programs running on the respective computers and having a client-server relationship to each other. In some embodiments, the server transmits data (e.g., HTML pages) to the client device (e.g., for the purpose of displaying data to and receiving user input from a user interacting with the client device). Data generated at the client device (e.g., results of user interactions) may be received at the server from the client device.
While this specification contains many specifics of implementations, these should not be construed as limitations on the scope of any invention or of what may be claimed, but rather as descriptions of features specific to particular embodiments of particular inventions. Certain features that are described in this specification in the context of separate embodiments can also be implemented in combination in a single embodiment. Conversely, various features that are described in the context of a single embodiment can also be implemented in multiple embodiments separately or in any suitable subcombination. Furthermore, although features may be described above as acting in certain combinations and even initially claimed as such, one or more features from a claimed combination can in some cases be excised from the combination, and the claimed combination may be directed to a subcombination or variation of a subcombination.
Similarly, although operations are depicted in the drawings in a particular order, this should not be understood as requiring that such operations be performed in the particular order shown or in sequential order, or that all illustrated operations be performed, to achieve desirable results. In some cases, multitasking and parallel processing may be advantageous. Moreover, the separation of various system components in the embodiments described above should not be understood as requiring such separation in all embodiments, and it should be understood that the described program components and systems can generally be integrated together in a single software product or packaged into multiple software products.
Thus, particular embodiments of the subject matter have been described. Other embodiments are within the scope of the following claims. In some cases, the actions recited in the claims can be performed in a different order and still achieve desirable results. Furthermore, the processes depicted in the accompanying drawings do not necessarily require the particular order shown, or sequential order, to achieve desirable results. In some embodiments, multitasking and parallel processing may be advantageous.
Claims (20)
1. A method, comprising:
receiving, by a service device, tag information in a network call to the service device, the tag information specifying a given client identifier that is (i) assigned by a publisher other than the service device, and (ii) represents a user in a publisher domain of the publisher;
Obtaining, by the service device, a given service identifier that is (i) assigned by the service device (ii) and that represents a user in a service domain of the service device, wherein the service domain is different from the publisher domain;
creating, by the service device, a mapping of the given service identifier to the given client identifier in a data structure;
receiving, by the service apparatus, a plurality of content requests from a plurality of different client devices accessing services provided by the service apparatus in the service domain; and
responding to the content request based on whether the client device provides a service identifier mapped to the given client identifier, comprising:
when the content request includes a service identifier mapped to the given client identifier, transmitting first content reserved for the content request from a client device providing the service identifier mapped to the given client identifier allocated by the publisher; and
when the content request does not include a service identifier mapped to the given client identifier, second content that is not reserved for content requests from client devices providing a service identifier mapped to the given client identifier assigned by the publisher is transmitted.
2. The method of claim 1, further comprising:
generating a hash representation of the user, comprising:
combining the given publisher identifier and the given client identifier; and
generating a hash of a combination of the publisher identifier and the given client identifier, wherein:
creating a mapping of the given service identifier to the given client identifier includes mapping a hash table of the user to the given service identifier.
3. The method of claim 1, further comprising:
determining that the user is logged into a given service provided by the service device;
identifying an account identifier of the user based on a service the user is logged on;
identifying, using the account identifier, different service identifiers assigned to the user for different services provided by the service device; and
different mappings between the given client identifier and the different service identifiers are created.
4. A method according to claim 3, wherein:
creating a mapping of the given service identifier to the given client identifier includes creating a mapping of the given service identifier to a first hash value created using the given client identifier and a first hash function or seed; and
Creating a different mapping between the given client identifier and the different service identifier includes creating a mapping of the different service identifier to a second hash value, the second hash value created using the given client identifier and a second hash function or seed, wherein the second hash value is different from the first hash value.
5. The method of claim 1, further comprising:
receiving the tag information and different service identifiers from different client devices;
deleting the mapping of the given service identifier to the given client identifier from the data structure; and
different mappings of the different service identifiers to the given client identifier are created in the data structure.
6. The method of claim 5, wherein storing the given service identifier mapped to the given client identifier in a matching service identifier list comprises storing the given service identifier in a data structure entry having a set of publisher identifier-content pairs specifying a publisher identifier of a publisher list, wherein the publisher list includes the given client identifier and user-specific content to be distributed to users in the publisher list, the method further comprising:
In response to determining that the user has been assigned the different service identifier, updating the matching service identifier list includes remapping an existing association between the given service identifier and the set of publisher identifier-content pairs to the different identifier.
7. The method of claim 1, further comprising deleting the given client identifier after storing the given service identifier mapped to the given client identifier in a mapped service identifier list.
8. The method of claim 1, wherein when the content request includes a service identifier mapped to the given client identifier, transmitting the first content reserved for the content request from the client device providing the service identifier mapped to the given client identifier assigned by the publisher comprises: the first content is presented when the user is accessing a service provided in a second level domain different from the domain of the publisher.
9. A system, comprising:
a memory device; and
one or more processors configured to interact with the memory device and perform operations when executing instructions, the operations comprising:
Receiving tag information in a network call to the service device, the tag information specifying a given client identifier that is (i) assigned by a publisher other than the service device, and (ii) represents a user in a publisher domain of the publisher;
obtaining a given service identifier, the given service identifier being (i) assigned by the service device (ii) and representing the user in a service domain of the service device, wherein the service domain is different from the publisher domain;
creating a mapping of the given service identifier to the given client identifier in a data structure;
receiving a plurality of content requests from a plurality of different client devices accessing services provided by service means in the service domain; and
responding to the content request based on whether the client device provides a service identifier mapped to the given client identifier, comprising:
when the content request includes a service identifier mapped to the given client identifier, transmitting first content reserved for the content request from a client device providing the service identifier mapped to the given client identifier allocated by the publisher; and
When the content request does not include a service identifier mapped to the given client identifier, second content that is not reserved for content requests from client devices providing a service identifier mapped to the given client identifier assigned by the publisher is transmitted.
10. The system of claim 9, wherein the instructions cause the one or more processors to perform operations further comprising:
generating a hash representation of the user, comprising:
combining the given publisher identifier and the given client identifier; and
generating a hash of a combination of the publisher identifier and the given client identifier, wherein:
creating a mapping of the given service identifier to the given client identifier includes mapping a hash table of the user to the given service identifier.
11. The system of claim 9, wherein the instructions cause the one or more processors to perform operations further comprising:
determining that the user is logged into a given service provided by the service device;
identifying an account identifier of the user based on a service the user is logged on;
Identifying, using the account identifier, different service identifiers assigned to the user for different services provided by the service device; and
different mappings between the given client identifier and the different service identifiers are created.
12. The system of claim 11, wherein:
creating a mapping of the given service identifier to the given client identifier includes creating a mapping of the given service identifier to a first hash value created using the given client identifier and a first hash function or seed; and
creating a different mapping between the given client identifier and the different service identifier includes creating a mapping of the different service identifier to a second hash value, the second hash value created using the given client identifier and a second hash function or seed, wherein the second hash value is different from the first hash value.
13. The system of claim 9, wherein the instructions cause the one or more processors to perform operations further comprising:
receiving the tag information and different service identifiers from different client devices;
Deleting the mapping of the given service identifier to the given client identifier from the data structure; and
different mappings of the different service identifiers to the given client identifier are created in the data structure.
14. The system of claim 13, wherein storing the given service identifier mapped to the given client identifier in a matching service identifier list comprises storing the given service identifier in a data structure entry having a set of publisher identifier-content pairs specifying a publisher identifier of a publisher list, wherein the publisher list includes the given client identifier and user-specific content to be distributed to users in the publisher list, the method further comprising:
in response to determining that the user has been assigned the different service identifier, updating the matching service identifier list includes remapping an existing association between the given service identifier and the set of publisher identifier-content pairs to the different identifier.
15. The system of claim 9, wherein the instructions cause the one or more processors to perform operations further comprising deleting the given client identifier after storing the given service identifier mapped to the given client identifier in a list of mapped service identifiers.
16. A non-transitory computer-readable medium storing instructions that, when executed, cause one or more processors to perform operations comprising:
receiving tag information in a network call to the service device, the tag information specifying a given client identifier that is (i) assigned by a publisher other than the service device, and (ii) represents a user in a publisher domain of the publisher;
obtaining a given service identifier that is (i) assigned by the service device (ii) and that represents a user in a service domain of the service device, wherein the service domain is different from the publisher domain;
creating a mapping of the given service identifier to the given client identifier in a data structure;
receiving a plurality of content requests from a plurality of different client devices accessing services provided by service means in the service domain; and
responding to the content request based on whether the client device provides a service identifier mapped to the given client identifier, comprising:
when the content request includes a service identifier mapped to the given client identifier, transmitting first content reserved for the content request from a client device providing the service identifier mapped to the given client identifier allocated by the publisher; and
When the content request does not include a service identifier mapped to the given client identifier, second content that is not reserved for content requests from client devices providing a service identifier mapped to the given client identifier assigned by the publisher is transmitted.
17. The non-transitory computer-readable medium of claim 16, wherein the instructions cause the one or more processors to perform operations further comprising:
generating a hash representation of the user, comprising:
combining the given publisher identifier and the given client identifier; and
generating a hash of a combination of the publisher identifier and the given client identifier, wherein:
creating a mapping of the given service identifier to the given client identifier includes mapping a hash table of the user to the given service identifier.
18. The non-transitory computer-readable medium of claim 16, wherein the instructions cause the one or more processors to perform operations further comprising:
determining that the user is logged into a given service provided by the service device;
Identifying an account identifier of the user based on a service the user is logged on;
identifying, using the account identifier, different service identifiers assigned to the user for different services provided by the service device; and
different mappings between the given client identifier and the different service identifiers are created.
19. The non-transitory computer-readable medium of claim 18, wherein:
creating a mapping of the given service identifier to the given client identifier includes creating a mapping of the given service identifier to a first hash value created using the given client identifier and a first hash function or seed; and
creating a different mapping between the given client identifier and the different service identifier includes creating a mapping of the different service identifier to a second hash value, the second hash value created using the given client identifier and a second hash function or seed, wherein the second hash value is different from the first hash value.
20. The non-transitory computer-readable medium of claim 16, wherein the instructions cause the one or more processors to perform operations further comprising:
Receiving the tag information and different service identifiers from different client devices;
deleting the mapping of the given service identifier to the given client identifier from the data structure; and
different mappings of the different service identifiers to the given client identifier are created in the data structure.
Applications Claiming Priority (4)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US16/245,048 US11115479B2 (en) | 2019-01-10 | 2019-01-10 | Enhanced online privacy |
US16/245,048 | 2019-01-10 | ||
PCT/US2019/064690 WO2020146066A1 (en) | 2019-01-10 | 2019-12-05 | Enhanced online privacy |
CN201980009069.1A CN111684448B (en) | 2019-01-10 | 2019-12-05 | Enhanced online privacy |
Related Parent Applications (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
CN201980009069.1A Division CN111684448B (en) | 2019-01-10 | 2019-12-05 | Enhanced online privacy |
Publications (1)
Publication Number | Publication Date |
---|---|
CN116546080A true CN116546080A (en) | 2023-08-04 |
Family
ID=69024679
Family Applications (2)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
CN201980009069.1A Active CN111684448B (en) | 2019-01-10 | 2019-12-05 | Enhanced online privacy |
CN202310526058.9A Pending CN116546080A (en) | 2019-01-10 | 2019-12-05 | Enhanced online privacy |
Family Applications Before (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
CN201980009069.1A Active CN111684448B (en) | 2019-01-10 | 2019-12-05 | Enhanced online privacy |
Country Status (6)
Country | Link |
---|---|
US (3) | US11115479B2 (en) |
EP (2) | EP3724805B1 (en) |
JP (3) | JP6995211B2 (en) |
KR (1) | KR20200098619A (en) |
CN (2) | CN111684448B (en) |
WO (1) | WO2020146066A1 (en) |
Families Citing this family (5)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US11115479B2 (en) * | 2019-01-10 | 2021-09-07 | Google Llc | Enhanced online privacy |
US11593510B1 (en) * | 2019-05-01 | 2023-02-28 | Meta Platforms, Inc. | Systems and methods for securely sharing and processing data between parties |
US11341605B1 (en) * | 2019-09-30 | 2022-05-24 | Amazon Technologies, Inc. | Document rectification via homography recovery using machine learning |
CN112231757B (en) * | 2020-11-03 | 2022-08-02 | 支付宝(杭州)信息技术有限公司 | Privacy protection method, device and equipment for embedded application |
EP4220467A1 (en) * | 2020-12-04 | 2023-08-02 | Google LLC | Secured management of data distribution restrictions |
Family Cites Families (78)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US5948061A (en) | 1996-10-29 | 1999-09-07 | Double Click, Inc. | Method of delivery, targeting, and measuring advertising over networks |
US6225920B1 (en) * | 1997-04-14 | 2001-05-01 | Randy A. Dayle | Portable computer apparatus for assisting persons with cognitive disabilities |
US6807632B1 (en) * | 1999-01-21 | 2004-10-19 | Emc Corporation | Content addressable information encapsulation, representation, and transfer |
US6856991B1 (en) * | 2002-03-19 | 2005-02-15 | Cisco Technology, Inc. | Method and apparatus for routing data to a load balanced server using MPLS packet labels |
US20030149581A1 (en) * | 2002-08-28 | 2003-08-07 | Imran Chaudhri | Method and system for providing intelligent network content delivery |
US7716243B2 (en) * | 2005-02-25 | 2010-05-11 | Microsoft Corporation | Provisions for validating content using a content registration authority |
US7882447B2 (en) * | 2005-03-30 | 2011-02-01 | Ebay Inc. | Method and system to determine area on a user interface |
US7941448B2 (en) * | 2005-08-26 | 2011-05-10 | At&T Intellectual Property Ii, Lp | System and method for event driven publish-subscribe communications |
DE102006024882A1 (en) * | 2006-05-24 | 2007-11-29 | Sagem Orga Gmbh | smart card |
US20080222283A1 (en) * | 2007-03-08 | 2008-09-11 | Phorm Uk, Inc. | Behavioral Networking Systems And Methods For Facilitating Delivery Of Targeted Content |
US20090083155A1 (en) * | 2007-09-21 | 2009-03-26 | Espereka, Inc. | Systems and Methods for Usage Measurement of Content Resources |
US8560669B2 (en) * | 2007-09-26 | 2013-10-15 | Quantcast Corporation | Tracking identifier synchronization |
US9697507B2 (en) * | 2008-03-14 | 2017-07-04 | Ricoh Co., Ltd. | Method for using a camera phone to acquire, store, manage and redeem discount coupons |
CA2722273A1 (en) * | 2008-04-30 | 2009-11-05 | Intertrust Technologies Corporation | Data collection and targeted advertising systems and methods |
US20100057832A1 (en) * | 2008-08-28 | 2010-03-04 | Google Inc. | Requesting A Service |
AU2009305747A1 (en) | 2008-10-15 | 2010-04-22 | Contextweb, Inc. | Method and system for displaying internet ad media using ETags |
US20100131373A1 (en) * | 2008-11-25 | 2010-05-27 | Yahoo! Inc. | Dynamic advertisement tags |
US10064055B2 (en) * | 2009-01-28 | 2018-08-28 | Headwater Research Llc | Security, fraud detection, and fraud mitigation in device-assisted services systems |
US10841839B2 (en) * | 2009-01-28 | 2020-11-17 | Headwater Research Llc | Security, fraud detection, and fraud mitigation in device-assisted services systems |
EP2396742A2 (en) | 2009-02-10 | 2011-12-21 | Uniloc Usa, Inc. | Web content access using a client device identifier |
US20100211960A1 (en) * | 2009-02-17 | 2010-08-19 | Google Inc. | Characterizing User Information |
GB2469468B (en) * | 2009-04-14 | 2015-01-21 | Skype | Method and system for data transmission |
US8346808B2 (en) * | 2009-08-12 | 2013-01-01 | Westell Technologies, Inc. | System and method of accessing resources in a computer network |
CA2795128A1 (en) | 2010-03-31 | 2011-10-06 | Mediamath, Inc. | Systems and methods for integration of a demand side platform |
US8832559B2 (en) * | 2010-06-25 | 2014-09-09 | LeftsnRights, Inc. | Content distribution system and method |
CA2977942C (en) * | 2010-12-20 | 2021-08-03 | The Nielsen Company (Us), Llc | Methods and apparatus to determine media impressions using distributed demographic information |
US9185004B2 (en) * | 2010-12-29 | 2015-11-10 | Comcast Cable Communications, Llc | Quality of service for distribution of content to network devices |
US9792657B2 (en) * | 2011-03-01 | 2017-10-17 | Amobee, Inc. | Methods and systems for leveraging social information, including a social graph, to identify and present content of interest |
EP2686779A4 (en) * | 2011-03-18 | 2014-09-17 | Nielsen Co Us Llc | Methods and apparatus to determine media impressions |
US9607105B1 (en) * | 2011-03-30 | 2017-03-28 | Amazon Technologies, Inc. | Content searching techniques |
US20130013428A1 (en) * | 2011-07-08 | 2013-01-10 | Cbs Interactive Inc. | Method and apparatus for presenting offers |
US10719836B2 (en) * | 2011-09-16 | 2020-07-21 | Amobee, Inc. | Methods and systems for enhancing web content based on a web search query |
KR20140079446A (en) * | 2011-10-04 | 2014-06-26 | 아브시오 코포레이션 | Method and apparatus for precision interest matching locally stored content |
US10339562B2 (en) * | 2011-11-29 | 2019-07-02 | Facebook, Inc. | Protecting identities of users to whom advertising is targeted |
US9009258B2 (en) * | 2012-03-06 | 2015-04-14 | Google Inc. | Providing content to a user across multiple devices |
US9485300B2 (en) * | 2012-03-13 | 2016-11-01 | Yahoo! Inc. | Publish-subscribe platform for cloud file distribution |
US9514446B1 (en) * | 2012-04-27 | 2016-12-06 | Google Inc. | Remarketing content to a user associated with multiple devices |
US8856168B2 (en) * | 2012-04-30 | 2014-10-07 | Hewlett-Packard Development Company, L.P. | Contextual application recommendations |
US20130332854A1 (en) * | 2012-06-10 | 2013-12-12 | Apple Inc. | Creating image streams and sharing the image streams across different devices |
US9639853B2 (en) * | 2012-06-11 | 2017-05-02 | Retailmenot, Inc. | Devices, methods, and computer-readable media for redemption header for merchant offers |
AU2013204865B2 (en) * | 2012-06-11 | 2015-07-09 | The Nielsen Company (Us), Llc | Methods and apparatus to share online media impressions data |
US11023088B2 (en) * | 2012-06-18 | 2021-06-01 | Hewlett-Packard Development Company, L.P. | Composing the display of a virtualized web browser |
US20140019424A1 (en) * | 2012-07-11 | 2014-01-16 | Google Inc. | Identifier validation and debugging |
US20160364771A1 (en) * | 2012-08-15 | 2016-12-15 | Ghostery, Inc. | Methods, apparatus, and systems for surveillance of third-party digital technology vendors providing secondary content in a content publisher's web page |
US8843514B1 (en) * | 2012-08-31 | 2014-09-23 | Google Inc. | Identifier matching exchange |
US20140075428A1 (en) * | 2012-09-11 | 2014-03-13 | Millmobile Bv | Application detection system |
US9317490B2 (en) * | 2012-09-19 | 2016-04-19 | TagMan Inc. | Systems and methods for 3-tier tag container architecture |
US20140172999A1 (en) * | 2012-12-16 | 2014-06-19 | Deep River Ventures, Llc | Methods, Systems, and Computer Program Products for Accessing a Service Via a Proxy Communications Agent |
US11048858B2 (en) * | 2012-11-21 | 2021-06-29 | Roofoveryourhead Marketing Ltd. | Browser extension for the collection and distribution of data and methods of use thereof |
US9438684B2 (en) * | 2012-11-29 | 2016-09-06 | Ebay Inc. | Automatic population of a network accessible content collection |
US20140278948A1 (en) * | 2013-03-14 | 2014-09-18 | Retailmenot, Inc. | Methods and systems for generating electronic deal summary |
US20140278950A1 (en) * | 2013-03-14 | 2014-09-18 | Retailmenot, Inc. | Methods and systems for maximizing online coupon and deal commissions |
US20150046265A1 (en) * | 2013-06-19 | 2015-02-12 | David Wayne BULGER | System and method for tailoring content without publisher access to consumer data |
US20150032494A1 (en) | 2013-07-29 | 2015-01-29 | SquadUP | Integrated event system |
US9648125B2 (en) * | 2013-10-04 | 2017-05-09 | Akamai Technologies, Inc. | Systems and methods for caching content with notification-based invalidation |
US9237138B2 (en) | 2013-12-31 | 2016-01-12 | The Nielsen Company (Us), Llc | Methods and apparatus to collect distributed user information for media impressions and search terms |
US9870578B2 (en) * | 2014-02-03 | 2018-01-16 | Google Llc | Scrolling interstitial advertisements |
US10504200B2 (en) * | 2014-03-13 | 2019-12-10 | Verance Corporation | Metadata acquisition using embedded watermarks |
US10713686B2 (en) * | 2014-03-22 | 2020-07-14 | Retailmenot, Inc. | Peer-to-peer geotargeting content with ad-hoc mesh networks |
US9710567B1 (en) * | 2014-03-27 | 2017-07-18 | Hearsay Social, Inc. | Automated content publication on a social media management platform |
US10250698B2 (en) * | 2014-08-25 | 2019-04-02 | Futurewei Technologies, Inc. | System and method for securing pre-association service discovery |
US9582301B2 (en) * | 2014-09-17 | 2017-02-28 | International Business Machines Corporation | Method of defining javascript objects |
US9954818B2 (en) * | 2014-10-23 | 2018-04-24 | Go Daddy Operating Company, LLC | Domain name hi-jack prevention |
US10084838B2 (en) * | 2014-10-29 | 2018-09-25 | DLVR, Inc. | Generating and using manifest files including content delivery network authentication data |
US10142386B2 (en) * | 2014-10-29 | 2018-11-27 | DLVR, Inc. | Determining manifest file data used in adaptive streaming video delivery |
CN105614272A (en) | 2014-11-28 | 2016-06-01 | 广西大学 | Arctium lappa pudding having efficacy of reducing blood sugar |
US11423420B2 (en) * | 2015-02-06 | 2022-08-23 | The Nielsen Company (Us), Llc | Methods and apparatus to credit media presentations for online media distributions |
US10075442B2 (en) * | 2015-06-30 | 2018-09-11 | Vmware, Inc. | Methods and apparatus to grant access to cloud computing resources |
US20170063969A1 (en) * | 2015-06-30 | 2017-03-02 | Mobex, Inc. | Systems and methods for content distribution |
CN107864677B (en) * | 2015-07-22 | 2022-05-27 | 爱维士软件有限责任公司 | Content access authentication system and method |
JP6968097B2 (en) * | 2016-03-01 | 2021-11-17 | ナンドボックス インコーポレイテッドNandbox Inc. | How to manage user profiles in asynchronous messaging systems, systems, and non-transient computer readable media |
JP6668934B2 (en) | 2016-05-12 | 2020-03-18 | 株式会社リコー | Service providing system, service providing apparatus, service providing method, and program |
US10110427B2 (en) * | 2016-07-01 | 2018-10-23 | Facebook, Inc. | Distributing content based on weights associated with users specified by content provider systems |
CN107944299B (en) * | 2017-12-29 | 2020-03-03 | 西安电子科技大学 | Method, device and system for processing privacy information |
US10678818B2 (en) * | 2018-01-03 | 2020-06-09 | Snap Inc. | Tag distribution visualization system |
US20180260481A1 (en) * | 2018-04-01 | 2018-09-13 | Yogesh Rathod | Displaying search result associated identified or extracted unique identity associated structured contents or structured website |
CN109583228B (en) * | 2018-10-30 | 2021-05-07 | 中国科学院信息工程研究所 | Privacy information management method, device and system |
US11115479B2 (en) * | 2019-01-10 | 2021-09-07 | Google Llc | Enhanced online privacy |
-
2019
- 2019-01-10 US US16/245,048 patent/US11115479B2/en active Active
- 2019-12-05 EP EP19828453.1A patent/EP3724805B1/en active Active
- 2019-12-05 EP EP21177867.5A patent/EP3905091A1/en active Pending
- 2019-12-05 WO PCT/US2019/064690 patent/WO2020146066A1/en unknown
- 2019-12-05 JP JP2020539769A patent/JP6995211B2/en active Active
- 2019-12-05 KR KR1020207020110A patent/KR20200098619A/en not_active Application Discontinuation
- 2019-12-05 CN CN201980009069.1A patent/CN111684448B/en active Active
- 2019-12-05 CN CN202310526058.9A patent/CN116546080A/en active Pending
-
2020
- 2020-12-10 US US17/118,436 patent/US11659044B2/en active Active
-
2021
- 2021-12-10 JP JP2021200891A patent/JP7331073B2/en active Active
-
2022
- 2022-04-11 US US17/717,351 patent/US11949744B2/en active Active
-
2023
- 2023-08-09 JP JP2023130345A patent/JP2023164813A/en active Pending
Also Published As
Publication number | Publication date |
---|---|
US20220239747A1 (en) | 2022-07-28 |
JP2023164813A (en) | 2023-11-14 |
US20210099524A1 (en) | 2021-04-01 |
EP3724805A1 (en) | 2020-10-21 |
US11949744B2 (en) | 2024-04-02 |
EP3905091A1 (en) | 2021-11-03 |
EP3724805B1 (en) | 2021-07-14 |
JP7331073B2 (en) | 2023-08-22 |
US20200228604A1 (en) | 2020-07-16 |
JP2022064883A (en) | 2022-04-26 |
CN111684448B (en) | 2023-04-18 |
JP6995211B2 (en) | 2022-01-14 |
JP2021516381A (en) | 2021-07-01 |
WO2020146066A1 (en) | 2020-07-16 |
US11115479B2 (en) | 2021-09-07 |
CN111684448A (en) | 2020-09-18 |
KR20200098619A (en) | 2020-08-20 |
US11659044B2 (en) | 2023-05-23 |
Similar Documents
Publication | Publication Date | Title |
---|---|---|
AU2018200833B2 (en) | Providing content to a user across multiple devices | |
CN111684448B (en) | Enhanced online privacy | |
US10530899B2 (en) | Method and system for establishing a trust association | |
US20130290711A1 (en) | Providing content to a user across multiple devices | |
US9100286B2 (en) | System for tracking diffusion | |
US11722575B2 (en) | Dynamic application content analysis | |
US20170148053A1 (en) | Identification of installation conversion from online electronic resources | |
US8874687B2 (en) | System and method for dynamically modifying content based on user expectations | |
US11532013B2 (en) | Optimized simultaneous use of content experimentation and content caching | |
US9519683B1 (en) | Inferring social affinity based on interactions with search results | |
US11875376B2 (en) | Minimizing impact of experimental content delivery on computing devices | |
US20150026266A1 (en) | Share to stream | |
US20230065501A1 (en) | Interaction tracking controls | |
US9497251B2 (en) | Serving of web pages according to web site launch times | |
CN110622159A (en) | Improving opt-out compliance |
Legal Events
Date | Code | Title | Description |
---|---|---|---|
PB01 | Publication | ||
PB01 | Publication | ||
SE01 | Entry into force of request for substantive examination | ||
SE01 | Entry into force of request for substantive examination |