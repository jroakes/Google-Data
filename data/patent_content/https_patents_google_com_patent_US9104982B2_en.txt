US9104982B2 - Prevention of invalid selections based on machine learning of user-specific latency - Google Patents
Prevention of invalid selections based on machine learning of user-specific latency Download PDFInfo
- Publication number
- US9104982B2 US9104982B2 US13/840,381 US201313840381A US9104982B2 US 9104982 B2 US9104982 B2 US 9104982B2 US 201313840381 A US201313840381 A US 201313840381A US 9104982 B2 US9104982 B2 US 9104982B2
- Authority
- US
- United States
- Prior art keywords
- user
- selection
- invalid
- time
- dynamic list
- Prior art date
- Legal status (The legal status is an assumption and is not a legal conclusion. Google has not performed a legal analysis and makes no representation as to the accuracy of the status listed.)
- Active, expires
Links
Images
Classifications
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06N—COMPUTING ARRANGEMENTS BASED ON SPECIFIC COMPUTATIONAL MODELS
- G06N20/00—Machine learning
-
- G06N99/005—
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F16/00—Information retrieval; Database structures therefor; File system structures therefor
- G06F16/20—Information retrieval; Database structures therefor; File system structures therefor of structured data, e.g. relational data
- G06F16/24—Querying
- G06F16/245—Query processing
- G06F16/2458—Special types of queries, e.g. statistical queries, fuzzy queries or distributed queries
- G06F16/2477—Temporal data queries
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F16/00—Information retrieval; Database structures therefor; File system structures therefor
- G06F16/90—Details of database functions independent of the retrieved data types
- G06F16/95—Retrieval from the web
- G06F16/951—Indexing; Web crawling techniques
Definitions
- Search engines provide a powerful tool for locating resources in large data repositories, e.g., resources on the Internet or resources stored on computer networks. These resources can be located in response to a search query submitted by a user.
- the user enters a query by adding successive search terms until all search terms are entered. Once the user signals that all of the search terms of the query are entered, the query is sent to a search engine. The user may have alternative ways of signaling completion of the query by, for example, entering a return character by pressing the enter key on a keyboard, or by clicking on a search button on a screen with a finger gesture.
- the search engine processes the search query, searches for resources responsive to the search query, and returns resources to a client device of the user.
- a search system can monitor the input of a search query by a user. Before the user finishes entering the search query, the search system can create a set of suggested queries. The suggested queries can be sent to a client device for possible selection by the user. If one of the suggested queries is selected, the search engine processes the selected search query, searches for resources responsive to the selected search query, and returns resources to a client device of the user. In another approach, the search engine can process suggested search queries without receiving any selection input. In this approach, the search engine can process the suggested query based on a high confidence of a guess performed by the search system.
- a user-specific system identifies and prevents invalid selections of temporally proximate content, e.g., a link that has recently changed on screen.
- the methods comprise the steps of recording time stamps indicating a time a dynamic list is first presented and instances when the dynamic list is updated; receiving an input selection, the input selection indicating that a suggested search query has been chosen from the dynamic list of search suggestions; recording a time stamp for the input selection; and determining if the input selection is an invalid selection, the input selection being determined as the invalid selection when a difference between a time stamp for presenting a most recent dynamic list update and the time stamp of the input selection satisfies a user-specific threshold, the user-specific threshold being calculated with a machine learning system using user-specific latency times and/or device-specific latency times as training data.
- the user-specific threshold can be a function of time versus a probability of being invalid.
- the method is also capable of replacing the suggested search query with a previously suggested search query if the selection was invalid and/or, presenting the suggested search query and a previously suggested search query if the selection is indeterminable,
- a system can comprise one or more processors and one or more computer-readable storage mediums containing instructions configured to cause the one or more processors to perform operations.
- the operations can include: recording time stamps indicating a time a dynamic list is first presented and instances when the dynamic list is updated; receiving an input selection, the input selection indicating that a suggested search query has been chosen from the dynamic list of search suggestions; recording a time stamp for the input selection; and determining if the input selection is an invalid selection, the input selection being determined as the invalid selection when a difference between a time stamp for presenting a most recent dynamic list update and the time stamp of the input selection satisfies a user-specific threshold, the user-specific threshold being calculated with a machine learning system using user-specific latency times and/or device-specific latency times as training data.
- the user-specific threshold can be a function of time versus a probability of being invalid.
- the system is capable of replacing the suggested search query with a previously suggested search query if the selection was invalid and/or, presenting the suggested search query and a previously suggested search query if the selection is indeterminable.
- a computer-program product can be tangibly embodied in a machine-readable storage medium and include instructions configured to cause a data processing apparatus to: record time stamps indicating a time a dynamic list is first presented and instances when the dynamic list is updated; receive an input selection, the input selection indicating that a suggested search query has been chosen from the dynamic list of search suggestions; record a time stamp for the input selection; and determine if the input selection is an invalid selection, the input selection being determined as the invalid selection when a difference between a time stamp for presenting a most recent dynamic list update and the time stamp of the input selection satisfies a user-specific threshold, the user-specific threshold being calculated with a machine learning system using user-specific latency times and/or device-specific latency times as training data.
- the user-specific threshold can be a function of time versus a probability of being invalid.
- the product is capable of replacing the suggested search query with a previously suggested search query if the selection was invalid and/or, presenting the suggested search query and a previously suggested search query if the selection is indeterminable.
- the methods comprise the steps of: establish a user profile in connection with a specific client device; receive a plurality of time stamps indicating times between updates for every dynamic list of search suggestions as received by the specific client device; receive a plurality of time stamps indicating each time a link is chosen from the dynamic list of search suggestions; receive a plurality of time stamps indicating each time an action signifying an invalid selection is performed after the link is chosen from the dynamic list of search suggestions; use a computer-implemented learning system to determine a user-specific threshold for an invalid selection, the user-specific threshold for the invalid selection being a function of time versus a probability of being invalid, the function of time being a difference between a time stamp for presenting a most recent dynamic list update and a time stamp for an input selecting a search suggestion, the input being invalid when the difference satisfies the user-specific threshold; establish an invalid-selection module based upon attributes learned by the system, the module determining a probability a selection is invalid; and send the invalid-selection
- the method is capable of receiving at least one of a user's age, a type of device, a type of connection, a network carrier, a user location, and a signal strength.
- a system can comprise one or more processors and one or more computer-readable storage mediums containing instructions configured to cause the one or more processors to perform operations.
- the operations can include: establish a user profile in connection with a specific client device; receive a plurality of time stamps indicating times between updates for every dynamic list of search suggestions as received by the specific client device; receive a plurality of time stamps indicating each time a link is chosen from the dynamic list of search suggestions; receive a plurality of time stamps indicating each time an action signifying an invalid selection is performed after the link is chosen from the dynamic list of search suggestions; use a computer-implemented learning system to determine a user-specific threshold for an invalid selection, the user-specific threshold for the invalid selection being a function of time versus a probability of being invalid, the function of time being a difference between a time stamp for presenting a most recent dynamic list update and a time stamp for an input selecting a search suggestion, the input being invalid when the difference satisfies the user-specific threshold; establish an invalid-
- the system is capable of receiving at least one of a user's age, a type of device, a type of connection, a network carrier, a user location, and a signal strength.
- a computer-program product can be tangibly embodied in a machine-readable storage medium and include instructions configured to cause a data processing apparatus to: establish a user profile in connection with a specific client device; receive a plurality of time stamps indicating times between updates for every dynamic list of search suggestions as received by the specific client device; receive a plurality of time stamps indicating each time a link is chosen from the dynamic list of search suggestions; receive a plurality of time stamps indicating each time an action signifying an invalid selection is performed after the link is chosen from the dynamic list of search suggestions; use a computer-implemented learning system to determine a user-specific threshold for an invalid selection, the user-specific threshold for the invalid selection being a function of time versus a probability of being invalid, the function of time being a difference between a time stamp for presenting a most recent dynamic list update and a time stamp for an input selecting a search suggestion, the input being invalid when the difference satisfies the user-specific threshold; establish an invalid-selection module
- the product is capable of receiving at least one of a user's age, a type of device, a type of connection, a network carrier, a user location, and a signal strength.
- One or more of the implementations of the subject matter described herein may provide one or more of the following advantages.
- the subject matter described herein presents accurate queries to search systems when a query is chosen from a suggested query list unintentionally.
- FIG. 1 is a block diagram of an example of a search system used with the disclosed technology
- FIG. 2 is a flow chart showing an example process of suggesting queries
- FIG. 3 is a flow chart showing an example process of ranking suggested queries
- FIG. 4 is a flow chart showing an example process of presenting suggested queries
- FIG. 5 is a flow chart showing an example process of establishing an unintentional-selection module
- FIG. 6 is a flow chart showing an example process of utilizing an unintentional-selection module
- FIG. 7 is a flow chart showing an example process of utilizing an unintentional-selection module.
- FIG. 8 is a block diagram of an example of a system used with the disclosed technology.
- the subject matter described herein relates to a prevention of invalid selections based on machine learning of user specific latency by disambiguating selections for temporally proximate content, e.g., a link that has recently changed on screen.
- a contemplated query into a search system
- many search systems offer the user a list of suggested search terms based on the user's partial query. These lists can change when a user enters a new character into the query bar.
- the list produces a suggested query that the user finds relevant to their contemplated query, the user can choose the relevant item from the list and the relevant item will be sent to a search system. This can be deemed as an intentional selection.
- the relevant list item can change due to latency issues and the user can unintentionally select an irrelevant or unwanted link. This brings the user to, e.g., a search results page they did not intend to visit. This can be deemed as an unintentional selection.
- the user can be brought to other types of pages, e.g., an app details page or any other type of page that uses search suggestions to lead to different types of content.
- a machine-learning system is trained to output time-based thresholds that a client device can use as a basis of comparison to determine heuristically whether a selection by a particular user is intentional or unintentional.
- input to the machine-learning system includes information about latency caused by the particular user and, moreover, latency caused by a device associated with the user. Latency caused by a network used by the user is factored out of the input because such latency widely varies and is thus not suitable for predicting whether a selection is intentional or unintentional.
- Feedback signals to the learning machine include data indicating a length of time a user spent on a selection, measurable, for example, by the time between clicks.
- a short click is usually a good indication that the selection was unintentional. (A short click is one where the user spends too little time on a selection to fully read its content before backtracking. A short click is typically 2-3 seconds.)
- An output that resulted in a short click is probably incorrect and would require the learning machine to adjust its parameters, which task is typically iteratively performed until the learning machine consistently produces correct outputs.
- the time-based thresholds the learning machine outputted are sent to the client device of the user.
- Computing resources on the client device then use the thresholds to heuristically determine whether a selection made by the particular user is intentional or unintentional.
- a selection the client device has heuristically determined to be intentional is designated as a valid selection.
- a selection the client device has heuristically determined to be unintentional is designated as an invalid selection.
- the machine learning system can be used to provide time-based thresholds for different users, as long as the data used to train the learning machine during a session for a user is particular to that user.
- FIG. 1 illustrates an example search system 100 for providing a search result or ranked search results relevant to submitted queries as can be implemented in an internet, an intranet, or another client and server environment.
- the search system 100 is an example of an information retrieval system in which the systems, components, and techniques described below can be implemented.
- the search system 100 can be used, for example, to generate a single search result germane to the query or to generate ordered sets of search results.
- a user 103 can interact with server 102 of the search system 100 through a client device 106 .
- the client device 106 can be any computing device where access to a search engine is available, e.g., mobile devices, tablets, computers, etc. or can be a computing device coupled to the server side 102 through a local area network (LAN) or wide area network (WAN), e.g., the Internet.
- the server 102 and the client device 106 can be one machine.
- a user 103 can install a desktop search application on the client device 106 .
- the client device 106 will generally include a random access memory (RAM) 130 and a processor 132 .
- RAM random access memory
- the server 102 can include a search engine 110 and a search assistant 130 .
- the server 102 responds to a query 104 by generating search results 108 , which are transmitted through the network to the client device 106 in a form that can be presented to the user, e.g., a search results web page to be displayed in a web browser running on the client device 106 .
- the search engine 110 identifies resources that match the query 104 .
- the search engine 110 can also identify a particular “snippet” or section of each resource that is relevant to the query or of the highest ranked resources that are relevant to the query.
- the server 102 will generally include: (1) an indexing engine 114 that indexes resources, e.g., web pages, images, or news articles on the Internet found in a corpus, e.g., a collection or repository of content, (2) an index database 118 that stores the index information, and (3) a ranking engine 116 , or other software, to rank the resources that match the query 104 .
- the indexing engine 114 can index information using traditional techniques.
- the search assistant 130 provides a client device 106 with suggested search queries.
- the search assistant 130 can be part of the search engine 110 or can be a stand-alone component.
- the input is monitored by the client system.
- a portion of the user's query is sent from the client system 106 to the server 102 (Step S 1 ).
- the portion of the query can be a single character, a few characters, a search term, or more than one search term.
- the server 102 receives the partial query and sends the search query to the search assistant 130 for processing (Step S 2 ).
- the search assistant 130 uses a data repository containing previously searched query terms, analyzes the partial query (Step S 3 ) and makes a prediction of what the user's contemplated query might be (Step S 4 ). That is, the search assistant 130 attempts to anticipate queries that the user might be in the process of entering based on that partial query.
- the suggested queries can be sent back to the client system 106 (Step S 5 )
- the search assistant 130 could send the suggested queries to a ranking module 142 (Step T 1 ) where the suggested queries can be selected and placed in an order based on a metric or score representative of how likely each entry is to match the user's search query (Step T 2 ).
- the selected and ordered matches can be sent to the client system 106 as a list of suggested queries (Step T 3 ).
- matching entries can be selected based on a metric or score, but are ordered based on other criteria, e.g., alphabetical order.
- the client receives the suggested queries (Step U 1 ) and presents the suggested queries to a user (Step U 2 ), e.g., the suggested search queries might be presented in a drop down menu. Regardless of the manner in which the suggested queries are presented to the user, the user may or may not select a suggested query (Step U 3 ). If one of the suggested queries is what the user intended as the desired query, the user can select this suggested query and proceed without having to finish entering the desired query. The selected query can be sent to a search engine. (Step U 5 ). If the suggested queries do not reflect what the user had in mind, the user can continue to enter the query and the client device can continue to receive the remainder of the desired search query. (Step U 4 ).
- the suggested query is transmitted to the search engine as a search request.
- search results can be ranked and presented to the user for further study or, if the query was in the form of a question, the search engine can return an answer to the query question.
- the search assistant 130 can be used on all computing devices where access to a search engine is available, e.g., mobile devices, tablets, laptops, computers, etc. but can play a particularly important role on mobile devices where small screen size makes typing a burden and users often opt to use the suggested queries instead of typing their full query.
- update speed or latency of the suggested queries is dependent on the quality of network connection and the latency of the client device, e.g., latency associated with processing times of hardware and software of the client device, so any lag between updates is fairly unpredictable, especially on mobile data connections where a connection speed can be dependent on a location.
- An update of a search suggestions list can take anywhere between a few hundred milliseconds up to a few seconds.
- a common user problem occurs during a time interval when a user decides to use a search selection and manually indicates their choice. During this interval, as the user indicates their choice, the choices can be updated and the user can unintentionally indicate a suggestion they did not intend to choose. This incorrect indication takes the user to an incorrect results page and wastes the user's time. The user can be forced to press the backpage button to return to the search page, and often loses his partially-typed search query.
- This problem also presents itself any time webpage content changes dynamically in a way that's too abrupt for the user to react before triggering a selection on the wrong content, for example, in a news webpage where top stories are shown in a slideshow and change every few seconds or on a search results page that has advertising links changing every few seconds. A user may find a story or ad of interest but the link dynamically changes as the user makes a desired selection.
- the system can analyze user behavior to determine which selections are intentional versus unintentional and establishes an average reaction-time profile that is specific to each user and possibly for each of the user's devices, e.g., the user's profile can be different for her smartphone as opposed to her laptop.
- network and equipment latency may contribute to the update speed of the suggested queries list but these latencies can be factored out of the reaction-time profile. That is, regardless of the latency source, the disclosed technology focuses on a time frame between a suggested query being presented on a client device and the client device receiving a selection input for a suggested query.
- a suggested query list was presented on a client device for five or more seconds
- a received selection of a suggested query from the list is most likely intentional because most, if not all, users can react to a suggestion list that is presented for five or more seconds.
- a suggested query list was presented on a client device for 1/100 th of a second most likely a received input selection based on that suggested query list was unintentional because most, if not all users, cannot react to an update that was 1/100 th of a second.
- reaction time There are two different dimensions of reaction time that will be specific to each user: (i) the time it takes a user to mentally register and react to a content refresh that happens onscreen, and (ii) the time it takes a user to manually indicate a suggested search query. Using machine learning techniques, the system builds a profile to determine each user's reaction time.
- a machine learning system can take inputs and signals and train on these inputs and signals to understand and predict probabilities for certain outcomes. The probabilities are then tested against known results. If the systems probabilities are incorrect, the system continues to train on more received input and signals. If after some period of time, the probabilities are consistently correct, the system can use these probabilities to form a determination module. Now when the determination module receives a set of unknown inputs and signals, it can determine the probability, with some accuracy, that the inputs and signals have a high confidence of a certain outcome. For example, an intentional selection is one in which it can be determined to be highly probable that it represented an intended user selection and an unintentional selection can be determined to be highly probable that it does not represent an intended user selection.
- the determinations can be based on user specific time stamps and time thresholds.
- the time thresholds can be generated by a machine learning system using user specific latency signals and time stamp inputs. These probabilities can be updated on an on-going basis to enhance the accuracy of the determination module over time, as will be described more fully below.
- the system acts as a recording device for the system in that it records actions that demonstrate device and user behavior.
- Actions include, e.g., (1) when characters are entered into the query box by a user, (2) when search suggestions appear and are updated on a client, (3) when a user selects a search suggestion, (4) when a user performs an action signifying an unintentional selection, e.g., using a backpage button or a home page button immediately or within a certain time frame after receiving a results page and (5) when a user selects a link from the results page.
- an action can begin when a user types a first character into a query box and ends after a search query is sent to a search engine.
- an action can be app search engine linking searches to an app details page, or typing the first letters of an airport into a flight finder and having it auto-complete a list of several possible airports.
- These actions can be temporarily stored on the client side as a table along with a timestamp marking a time for each action. Also, as additional characters are entered in the query box and the list of suggested search queries are updated, the system can keep in memory the previous suggestions list and their respective timestamps as well as the newest suggestions list and its timestamp.
- the machine learning system on the server side can “learn” which selections were invalid and which selections were valid. This is based on a function of time vs. a probability of the selection being unintentional or intentional. That is, if a selection choosing a suggested query is received more than, e.g., five seconds, after a last list update, the selection has a high probability of being intentional but if a selection is received under, e.g., 1 ⁇ 2 second, the selection has a high probability of being unintentional.
- the machine learning system can learn the differences between an unintentional selection and an intentional selection by distinguishing “short clicks” and “long clicks.” That is, an unintentional selection can be associated with a “short click” where after the search results page appears the user immediately returns to the previous query page or a “short click” can be determined using a previously-determined threshold, e.g., a user stays on the results page for less than ten seconds. An intentional selection can be associated with a “long click” where after the search results page appears the user navigates the results page or a “long click” can be determined using a previously-determined threshold, e.g., a user stays on a results page for more than 10 seconds. These previously-determined “short-click” and “long click” thresholds can be established by another machine learning techniques trained to learn the difference between “long clicks” and “short clicks.”
- an invalid-selection module can be created for a specific user for a specific device.
- the invalid-selection module can indicate the likelihood that a selection was intentional as a function of the amount of time that elapsed between the search suggestion updating and user selecting a search suggestion query.
- the invalid-selection module can be sent to the client side and stored. Please note that after a certain number of invalid-selection modules are established additional invalid-selection modules can be created using a user's profile and finding an existing invalid-selection module of a similarly-situated user. This existing invalid-selection module can be used as the new user's existing invalid-selection module.
- a server populates a user profile in connection with a specific client device.
- the user profile can be imported from a social network, created by answering a list of questions or some other method.
- the user profile can also include a user's age, a type of device, a type of connection, a network carrier, a user location, a signal strength and any other information that is useful for building an invalid-selection module.
- the server also receives information, e.g., action information from a client device.
- the action information can include (1) a plurality of time stamps indicating times between updates for every dynamic list of search suggestions as received by the specific client device, (2) a plurality of time stamps indicating each time a link is chosen from the dynamic list of search suggestions and (3) a plurality of time stamps indicating each time a back-page link is used after the link is chosen from the dynamic list of search suggestions.
- Step A 2 Using a computer-implemented learning system, the server can determine differences from an invalid selection and a valid selection. (Step A 3 ).
- the computer-implemented learning system learns the difference between the intentional and unintentional selections by analyzing a time frame between a suggested query being presented on a client device and the client device receiving a selection input for a suggested query. Once learned, the server can establish an invalid-selection module that establishes probability thresholds indicating if a selection is intentional or unintentional. (Step A 4 ). This module is sent and loaded onto the specific client device. (Step A 5 )
- This invalid-selection module runs on the client side so that the client device can (1) replace selections on search suggestions that have a high probability of being unintentional, e.g., 90% probability that selection was invalid, the time threshold for an invalid selection for a specific user can be, e.g., any time interval less than 0.5 seconds or some other time interval specific to the user, (2) accept selections on search suggestions that have a high probability of being intentional, e.g., 90% probability that selection was valid, the time threshold for a valid selection for a specific user can be, e.g., any time interval greater than 2 seconds or some other time interval specific to the user and/or (3) display to the user two choices for any selection that falls within a pre-defined threshold, e.g., a range between 0.5 and 2 seconds, and cannot predict the user's intention, e.g., any amount of time that falls between a high probability of being intentional vs.
- a pre-defined threshold e.g., a range between 0.5 and 2 seconds
- the client device can signal the user that it has ignored the selection, and can present the user with a box that allows the user the choice of either clicking on the last updated search suggestion or the one that immediately preceded the last updated search suggestion.
- the thresholds can be a range of latency times where any time that fits in the range satisfies the threshold for an invalid selection and anything that falls outside the range is a valid selection.
- the threshold can be a single latency point, e.g., 3 seconds, and not satisfying the threshold can mean meeting or exceeding the latency point for a valid selection, e.g., 3 or more seconds, and satisfying the threshold can mean being short of the latency point for an invalid selection, e.g., less than 3 seconds.
- the thresholds can be a range of latency times, e.g., 1 to 3 seconds and not satisfying the threshold can mean meeting or exceeding the upper latency point range for a valid selection, e.g., 3 or more seconds, satisfying the threshold can mean being below the lower latency point range for an invalid selection, e.g., at or less than 1 second and an indeterminable selection is one that falls within the latency point range, e.g. more than 1 second but less than three seconds.
- Step V 1 For any amount of time [t] that has elapsed between an on-client content update and a selection action, a user-specific probability is produced to predict if the selection action was unintentional (Step V 2 ). Based on the probability, the client device can customize each user's search suggestions experience to minimize unintentional selections (Step V 3 ).
- a visual cue can be used to indicate that the click was rejected as unintentional, for example, the results page can go momentarily grey.
- the search suggestion that was previously presented can be added to the bottom of the results page and a visual effect can be utilized to draw attention to it, e.g., a yellow fade effect.
- a visual effect can be utilized to draw attention to it, e.g., a blue fade effect.
- the user's reaction time may have been faster or slower than expected and this feature allows the user to perform the search that they most likely intended to perform.
- This feature also can add feedback to the system which can be sent to the server side to fine tune a user's unintentional selection module. Additional feedback signals can also be sent to the server side to adjust a user's unintentional selection module as needed over time, e.g., client device updates, network updates and increasing age of user.
- the system in order to receive feedback that an acceptance or rejection of a selected suggested query was wrong, the system can implement a time delay before executing any acceptance or rejection, so that a user could have time to contradict the acceptance or rejection, e.g., click on the “faded-in” alternate choice. In other words, a delay can be added so the user would have a chance to see the alternate choice that has been presented and choose it instead thereby providing feedback to the system.
- the client receives a dynamic list of search suggestions.
- the client device records time stamps indicating a time the dynamic list is first presented and instances when the dynamic list is updated.
- the client device also receives an input indicating that a suggested search query has been chosen from the dynamic list of search suggestions.
- the client device records a time stamp for a time the input is received.
- the time stamps with their associated actions are sent to an invalid-selection module (Step B 5 ).
- the module using established thresholds, determines if an input was unintentional. (Step B 6 ).
- FIG. 8 is a schematic diagram of an example of a search system 1 .
- the system 1 includes one or more processors 23 , 33 , one or more display devices 21 , e.g., CRT, LCD, one or more interfaces 25 , 32 , input devices 22 , e.g., touchscreen, keyboard, mouse, scanner, etc., and one or more computer-readable mediums 24 , 34 .
- These components exchange communications and data using one or more buses 41 , 42 , e.g., EISA, PCI, PCI Express, etc.
- the term “computer-readable medium” refers to any non-transitory medium 24 , 34 that participates in providing instructions to processors 23 , 33 for execution.
- the computer-readable mediums 24 , 34 further include operating systems 26 , 31 .
- the operating systems 26 , 31 can be multi-user, multiprocessing, multitasking, multithreading, real-time, near real-time and the like.
- the operating systems 26 , 31 can perform basic tasks, including but not limited to: recognizing input from input devices 22 ; sending output to display devices 21 ; keeping track of files and directories on computer-readable mediums 24 , 34 and 50 , e.g., memory or a storage device; controlling peripheral devices, e.g., disk drives, printers, etc.; and managing traffic on the one or more buses 41 , 42 .
- the operating systems 26 , 31 can also run algorithms associated with the system 10 .
- the network communications code can include various components for establishing and maintaining network connections, e.g., software for implementing communication protocols, e.g., TCP/IP, HTTP, Ethernet, etc.
- communication protocols e.g., TCP/IP, HTTP, Ethernet, etc.
- the system 1 of FIG. 8 is split into a client-server environment 20 , 30 communicatively connected over the internet with connectors 41 , 42 , where one or more server computers 30 include hardware as shown in FIG. 8 and also code for building, updating and verifying profiles on a computer network, code for machine learning techniques, code for analyzing data and code for making determinations and where one or more client computers 20 include hardware as shown in FIG. 8 and also include code for building, updating and verifying profiles on a computer network, code for analyzing data and code for making determinations.
- Implementations of the subject matter and the operations described in this specification can be done in electronic circuitry, or in computer software, firmware, or hardware, including the structures disclosed in this specification and their structural equivalents, or in combinations of one or more of them. Implementations of the subject matter described in this specification can be done as one or more computer programs, e.g., one or more modules of computer program instructions, encoded on a computer storage media for execution by, or to control the operation of, data processing apparatus, 27 , 37 . Alternatively or in addition, the program instructions can be encoded on an artificially-generated propagated signal, e.g., a machine-generated electrical, optical, or electromagnetic signal that is generated to encode information for transmission to suitable receiver apparatus for execution by a data processing apparatus.
- the computer storage medium can be, or can be included in, a computer-readable storage device, a computer-readable storage substrate, a random or serial access memory array or device, or a combination of one or more of them.
- the operations described in this specification can be implemented as operations performed by a data processing apparatus on data stored on one or more computer-readable storage devices or received from other sources.
- data processing apparatus encompasses all kinds of apparatus, devices, and machines for processing data, including by way of example a programmable processor, a computer, a system on a chip, or combinations of them.
- the apparatus can include special purpose logic circuitry, e.g., an FPGA (field programmable gate array) or an ASIC (application-specific integrated circuit).
- the apparatus can also include, in addition to hardware, code that creates an execution environment for the computer program in question, e.g., code that constitutes processor firmware, a protocol stack, a repository management system, an operating system, a cross-platform runtime environment, e.g., a virtual machine, or a combination of one or more of them.
- code that creates an execution environment for the computer program in question e.g., code that constitutes processor firmware, a protocol stack, a repository management system, an operating system, a cross-platform runtime environment, e.g., a virtual machine, or a combination of one or more of them.
- the apparatus and execution environment can realize various different computing model infrastructures, e.g., web services, distributed computing and grid computing infrastructures.
- a computer program (also known as a program, software, software application, script, or code) can be written in any form of programming language, including compiled or interpreted languages, declarative or procedural languages, and it can be deployed in any form, including as a stand-alone program or as a module, component, subroutine, object, or other unit suitable for use in a computing environment.
- a computer program can, but need not, correspond to a file in a file system.
- a program can be stored in a portion of a file that holds other programs or data, e.g., one or more scripts stored in a markup language document, in a single file dedicated to the program in question, or in multiple coordinated files, e.g., files that store one or more modules, sub-programs, or portions of code.
- a computer program can be deployed to be executed on one computer or on multiple computers that are located at one site or distributed across multiple sites and interconnected by a communication network.
- the processes and logic flows described in this specification can be performed by one or more programmable processors executing one or more computer programs to perform functions by operating on input data and generating output.
- the processes and logic flows can also be performed by, and apparatus can also be implemented as, special purpose logic circuitry, e.g., an FPGA (field programmable gate array) or an ASIC (application-specific integrated circuit).
- processors suitable for the execution of a computer program include, by way of example, both general and special purpose microprocessors, and any one or more processors of any kind of digital computer.
- a processor will receive instructions and data from a read-only memory or a random access memory or both.
- the elements of a computer comprise a processor for performing or executing instructions and one or more memory devices for storing instructions and data.
- a computer will also include, or be operatively coupled to receive data from or transfer data to, or both, one or more mass storage devices for storing data, e.g., magnetic, magneto-optical disks, or optical disks.
- mass storage devices for storing data, e.g., magnetic, magneto-optical disks, or optical disks.
- a computer need not have such devices.
- a computer can be embedded in another device, e.g., a mobile telephone, a personal digital assistant (PDA), a mobile audio or video player, a game console, a Global Positioning System (GPS) receiver, or a portable storage device, e.g., a universal serial bus (USB) flash drive, to name just a few.
- Devices suitable for storing computer program instructions and data include all forms of non-volatile memory, media and memory devices, including by way of example semiconductor memory devices, e.g., EPROM, EEPROM, and flash memory devices; magnetic disks, e.g., internal hard disks or removable disks; magneto-optical disks; and CD-ROM and DVD-ROM disks.
- the processor and the memory can be supplemented by, or incorporated in, special purpose logic circuitry.
- implementations of the subject matter described in this specification can be implemented on a computer having a display device, e.g., a CRT (cathode ray tube) or LCD (liquid crystal display) monitor, for displaying information to the user and a keyboard and a pointing device, e.g., a mouse or a trackball, by which the user can provide input to the computer.
- a display device e.g., a CRT (cathode ray tube) or LCD (liquid crystal display) monitor
- keyboard and a pointing device e.g., a mouse or a trackball
- Other kinds of devices can be used to provide for interaction with a user as well; for example, feedback provided to the user can be any form of sensory feedback, e.g., visual feedback, auditory feedback, or tactile feedback; and input from the user can be received in any form, including acoustic, speech, thought or tactile input.
- a computer can interact with a user by sending documents to and receiving documents from a device that is
- Implementations of the subject matter described in this specification can be implemented in a computing system that includes a back-end component, e.g., as a data server, or that includes a middleware component, e.g., an application server, or that includes a front-end component, e.g., a client computer having a graphical user interface or a Web browser through which a user can interact with an implementation of the subject matter described in this specification, or any combination of one or more such back-end, middleware, or front-end components.
- the components of the system can be interconnected by any form or medium of digital data communication, e.g., a communication network.
- Examples of communication networks include a local area network (“LAN”) and a wide area network (“WAN”), an inter-network, e.g., the Internet, and peer-to-peer networks, e.g., ad hoc peer-to-peer networks.
- LAN local area network
- WAN wide area network
- Internet inter-network
- peer-to-peer networks e.g., ad hoc peer-to-peer networks.
- the computing system can include clients and servers.
- a client and server are generally remote from each other and typically interact through a communication network. The relationship of client and server arises by virtue of computer programs running on the respective computers and having a client-server relationship to each other.
- a server transmits data, e.g., an HTML page, to a client device, e.g., for purposes of displaying data to and receiving user input from a user interacting with the client device.
- Data generated at the client device e.g., a result of the user interaction, can be received from the client device at the server.
Abstract
Description
Claims (20)
Priority Applications (1)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US13/840,381 US9104982B2 (en) | 2013-03-15 | 2013-03-15 | Prevention of invalid selections based on machine learning of user-specific latency |
Applications Claiming Priority (1)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US13/840,381 US9104982B2 (en) | 2013-03-15 | 2013-03-15 | Prevention of invalid selections based on machine learning of user-specific latency |
Publications (2)
Publication Number | Publication Date |
---|---|
US20150170050A1 US20150170050A1 (en) | 2015-06-18 |
US9104982B2 true US9104982B2 (en) | 2015-08-11 |
Family
ID=53368918
Family Applications (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
US13/840,381 Active 2034-02-01 US9104982B2 (en) | 2013-03-15 | 2013-03-15 | Prevention of invalid selections based on machine learning of user-specific latency |
Country Status (1)
Country | Link |
---|---|
US (1) | US9104982B2 (en) |
Cited By (3)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20180248903A1 (en) * | 2017-02-24 | 2018-08-30 | LogRhythm Inc. | Processing pipeline for monitoring information systems |
US10148677B2 (en) * | 2015-08-31 | 2018-12-04 | Splunk Inc. | Model training and deployment in complex event processing of computer network data |
US20220138272A1 (en) * | 2017-05-02 | 2022-05-05 | Palantir Technologies Inc. | Automated assistance for generating relevant and valuable search results for an entity of interest |
Families Citing this family (32)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20230236718A1 (en) * | 2014-03-26 | 2023-07-27 | Unanimous A.I., Inc. | Real-time collaborative slider-swarm with deadbands for amplified collective intelligence |
US10122775B2 (en) | 2014-03-26 | 2018-11-06 | Unanimous A.I., Inc. | Systems and methods for assessment and optimization of real-time collaborative intelligence systems |
US10222961B2 (en) | 2014-03-26 | 2019-03-05 | Unanimous A. I., Inc. | Methods for analyzing decisions made by real-time collective intelligence systems |
US10712929B2 (en) | 2014-03-26 | 2020-07-14 | Unanimous A. I., Inc. | Adaptive confidence calibration for real-time swarm intelligence systems |
US10439836B2 (en) | 2014-03-26 | 2019-10-08 | Unanimous A. I., Inc. | Systems and methods for hybrid swarm intelligence |
US10133460B2 (en) | 2014-03-26 | 2018-11-20 | Unanimous A.I., Inc. | Systems and methods for collaborative synchronous image selection |
US10551999B2 (en) | 2014-03-26 | 2020-02-04 | Unanimous A.I., Inc. | Multi-phase multi-group selection methods for real-time collaborative intelligence systems |
WO2015148738A1 (en) | 2014-03-26 | 2015-10-01 | Unanimous A.I. LLC | Methods and systems for real-time closed-loop collaborative intelligence |
US10353551B2 (en) | 2014-03-26 | 2019-07-16 | Unanimous A. I., Inc. | Methods and systems for modifying user influence during a collaborative session of real-time collective intelligence system |
US9940006B2 (en) * | 2014-03-26 | 2018-04-10 | Unanimous A. I., Inc. | Intuitive interfaces for real-time collaborative intelligence |
US11941239B2 (en) * | 2014-03-26 | 2024-03-26 | Unanimous A.I., Inc. | System and method for enhanced collaborative forecasting |
US10110664B2 (en) | 2014-03-26 | 2018-10-23 | Unanimous A. I., Inc. | Dynamic systems for optimization of real-time collaborative intelligence |
US10817159B2 (en) | 2014-03-26 | 2020-10-27 | Unanimous A. I., Inc. | Non-linear probabilistic wagering for amplified collective intelligence |
US10277645B2 (en) | 2014-03-26 | 2019-04-30 | Unanimous A. I., Inc. | Suggestion and background modes for real-time collaborative intelligence systems |
US10416666B2 (en) | 2014-03-26 | 2019-09-17 | Unanimous A. I., Inc. | Methods and systems for collaborative control of a remote vehicle |
US11151460B2 (en) | 2014-03-26 | 2021-10-19 | Unanimous A. I., Inc. | Adaptive population optimization for amplifying the intelligence of crowds and swarms |
US10310802B2 (en) | 2014-03-26 | 2019-06-04 | Unanimous A. I., Inc. | System and method for moderating real-time closed-loop collaborative decisions on mobile devices |
US10817158B2 (en) | 2014-03-26 | 2020-10-27 | Unanimous A. I., Inc. | Method and system for a parallel distributed hyper-swarm for amplifying human intelligence |
US11269502B2 (en) | 2014-03-26 | 2022-03-08 | Unanimous A. I., Inc. | Interactive behavioral polling and machine learning for amplification of group intelligence |
US9811327B2 (en) | 2015-12-21 | 2017-11-07 | Quixey, Inc. | Dependency-aware transformation of multi-function applications for on-demand execution |
US9952848B2 (en) * | 2015-12-21 | 2018-04-24 | Samsung Electronics Co., Ltd. | Dependency-aware transformation of multi-function applications for on-demand execution |
US11521045B2 (en) | 2017-06-14 | 2022-12-06 | Knowm, Inc. | Anti-Hebbian and Hebbian (AHAH) computing |
US11847246B1 (en) * | 2017-09-14 | 2023-12-19 | United Services Automobile Association (Usaa) | Token based communications for machine learning systems |
US11715042B1 (en) | 2018-04-20 | 2023-08-01 | Meta Platforms Technologies, Llc | Interpretability of deep reinforcement learning models in assistant systems |
US11307880B2 (en) | 2018-04-20 | 2022-04-19 | Meta Platforms, Inc. | Assisting users with personalized and contextual communication content |
US11676220B2 (en) | 2018-04-20 | 2023-06-13 | Meta Platforms, Inc. | Processing multimodal user input for assistant systems |
US11886473B2 (en) | 2018-04-20 | 2024-01-30 | Meta Platforms, Inc. | Intent identification for agent matching by assistant systems |
US10782986B2 (en) | 2018-04-20 | 2020-09-22 | Facebook, Inc. | Assisting users with personalized and contextual communication content |
US11112928B2 (en) | 2018-10-18 | 2021-09-07 | International Business Machines Corporation | Avoiding bad input during user interface layout changes using snapshots |
CN111638841B (en) * | 2020-05-20 | 2021-10-15 | 维沃移动通信有限公司 | Message detail page display method and device and electronic equipment |
US11790003B2 (en) * | 2020-11-30 | 2023-10-17 | Red Hat, Inc. | Client-based search query autocomplete |
US11949638B1 (en) | 2023-03-04 | 2024-04-02 | Unanimous A. I., Inc. | Methods and systems for hyperchat conversations among large networked populations with collective intelligence amplification |
Citations (8)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20060197753A1 (en) | 2005-03-04 | 2006-09-07 | Hotelling Steven P | Multi-functional hand-held device |
US20070152976A1 (en) | 2005-12-30 | 2007-07-05 | Microsoft Corporation | Unintentional touch rejection |
US20080091450A1 (en) * | 2006-10-12 | 2008-04-17 | Fujitsu Limited | Act support program, method, and apparatus |
US20090106224A1 (en) * | 2007-10-19 | 2009-04-23 | Xerox Corporation | Real-time query suggestion in a troubleshooting context |
US20100332876A1 (en) * | 2009-06-26 | 2010-12-30 | Microsoft Corporation | Reducing power consumption of computing devices by forecasting computing performance needs |
US8542196B2 (en) | 2005-07-22 | 2013-09-24 | Move Mobile Systems, Inc. | System and method for a thumb-optimized touch-screen user interface |
US20130265269A1 (en) | 2011-09-30 | 2013-10-10 | Sangita Sharma | Mobile device rejection of unintentional touch sensor contact |
US8660978B2 (en) | 2010-12-17 | 2014-02-25 | Microsoft Corporation | Detecting and responding to unintentional contact with a computing device |
-
2013
- 2013-03-15 US US13/840,381 patent/US9104982B2/en active Active
Patent Citations (8)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20060197753A1 (en) | 2005-03-04 | 2006-09-07 | Hotelling Steven P | Multi-functional hand-held device |
US8542196B2 (en) | 2005-07-22 | 2013-09-24 | Move Mobile Systems, Inc. | System and method for a thumb-optimized touch-screen user interface |
US20070152976A1 (en) | 2005-12-30 | 2007-07-05 | Microsoft Corporation | Unintentional touch rejection |
US20080091450A1 (en) * | 2006-10-12 | 2008-04-17 | Fujitsu Limited | Act support program, method, and apparatus |
US20090106224A1 (en) * | 2007-10-19 | 2009-04-23 | Xerox Corporation | Real-time query suggestion in a troubleshooting context |
US20100332876A1 (en) * | 2009-06-26 | 2010-12-30 | Microsoft Corporation | Reducing power consumption of computing devices by forecasting computing performance needs |
US8660978B2 (en) | 2010-12-17 | 2014-02-25 | Microsoft Corporation | Detecting and responding to unintentional contact with a computing device |
US20130265269A1 (en) | 2011-09-30 | 2013-10-10 | Sangita Sharma | Mobile device rejection of unintentional touch sensor contact |
Cited By (8)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US10148677B2 (en) * | 2015-08-31 | 2018-12-04 | Splunk Inc. | Model training and deployment in complex event processing of computer network data |
US10158652B2 (en) | 2015-08-31 | 2018-12-18 | Splunk Inc. | Sharing model state between real-time and batch paths in network security anomaly detection |
US10419465B2 (en) | 2015-08-31 | 2019-09-17 | Splunk Inc. | Data retrieval in security anomaly detection platform with shared model state between real-time and batch paths |
US10911468B2 (en) | 2015-08-31 | 2021-02-02 | Splunk Inc. | Sharing of machine learning model state between batch and real-time processing paths for detection of network security issues |
US20180248903A1 (en) * | 2017-02-24 | 2018-08-30 | LogRhythm Inc. | Processing pipeline for monitoring information systems |
US10931694B2 (en) * | 2017-02-24 | 2021-02-23 | LogRhythm Inc. | Processing pipeline for monitoring information systems |
US20220138272A1 (en) * | 2017-05-02 | 2022-05-05 | Palantir Technologies Inc. | Automated assistance for generating relevant and valuable search results for an entity of interest |
US11714869B2 (en) * | 2017-05-02 | 2023-08-01 | Palantir Technologies Inc. | Automated assistance for generating relevant and valuable search results for an entity of interest |
Also Published As
Publication number | Publication date |
---|---|
US20150170050A1 (en) | 2015-06-18 |
Similar Documents
Publication | Publication Date | Title |
---|---|---|
US9104982B2 (en) | Prevention of invalid selections based on machine learning of user-specific latency | |
US10452694B2 (en) | Information extraction from question and answer websites | |
US10409903B2 (en) | Unknown word predictor and content-integrated translator | |
US10885076B2 (en) | Computerized system and method for search query auto-completion | |
RU2632100C2 (en) | Method and server of recommended set of elements creation | |
US10798193B2 (en) | System and method for automatic storyline construction based on determined breaking news | |
US11106690B1 (en) | Neural query auto-correction and completion | |
US10152521B2 (en) | Resource recommendations for a displayed resource | |
US9183257B1 (en) | Using web ranking to resolve anaphora | |
CN112262421B (en) | Programmable interface for automatic learning and reviewing | |
EP3158472B1 (en) | Generating contextual search presentations | |
US20230047212A1 (en) | Assistive browsing using context | |
US11132406B2 (en) | Action indicators for search operation output elements | |
US10242320B1 (en) | Machine assisted learning of entities | |
RU2731658C2 (en) | Method and system of selection for ranking search results using machine learning algorithm | |
US11921966B2 (en) | Intelligent response using eye gaze | |
US11574013B1 (en) | Query recommendations for a displayed resource | |
US10467300B1 (en) | Topical resource recommendations for a displayed resource | |
EP3593257A1 (en) | Media contextual information for a displayed resource | |
US11899921B2 (en) | Scroller interface for transcription navigation | |
US20210232659A1 (en) | Query recommendations for a displayed resource |
Legal Events
Date | Code | Title | Description |
---|---|---|---|
AS | Assignment |
Owner name: GOOGLE INC., CALIFORNIAFree format text: ASSIGNMENT OF ASSIGNORS INTEREST;ASSIGNOR:PRICE, THOMAS;REEL/FRAME:030020/0569Effective date: 20130315 |
|
AS | Assignment |
Owner name: GOOGLE INC., CALIFORNIAFree format text: ASSIGNMENT OF ASSIGNORS INTEREST;ASSIGNOR:PRICE, THOMAS GRAHAM;REEL/FRAME:033377/0825Effective date: 20140723 |
|
STCF | Information on status: patent grant |
Free format text: PATENTED CASE |
|
AS | Assignment |
Owner name: GOOGLE LLC, CALIFORNIAFree format text: CHANGE OF NAME;ASSIGNOR:GOOGLE INC.;REEL/FRAME:044334/0466Effective date: 20170929 |
|
MAFP | Maintenance fee payment |
Free format text: PAYMENT OF MAINTENANCE FEE, 4TH YEAR, LARGE ENTITY (ORIGINAL EVENT CODE: M1551); ENTITY STATUS OF PATENT OWNER: LARGE ENTITYYear of fee payment: 4 |
|
MAFP | Maintenance fee payment |
Free format text: PAYMENT OF MAINTENANCE FEE, 8TH YEAR, LARGE ENTITY (ORIGINAL EVENT CODE: M1552); ENTITY STATUS OF PATENT OWNER: LARGE ENTITYYear of fee payment: 8 |