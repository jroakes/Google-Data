US6327593B1 - Automated system and method for capturing and managing user knowledge within a search system - Google Patents
Automated system and method for capturing and managing user knowledge within a search system Download PDFInfo
- Publication number
- US6327593B1 US6327593B1 US09/220,209 US22020998A US6327593B1 US 6327593 B1 US6327593 B1 US 6327593B1 US 22020998 A US22020998 A US 22020998A US 6327593 B1 US6327593 B1 US 6327593B1
- Authority
- US
- United States
- Prior art keywords
- search
- user
- elements
- natural language
- ones
- Prior art date
- Legal status (The legal status is an assumption and is not a legal conclusion. Google has not performed a legal analysis and makes no representation as to the accuracy of the status listed.)
- Expired - Lifetime
Links
Images
Classifications
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F16/00—Information retrieval; Database structures therefor; File system structures therefor
- G06F16/20—Information retrieval; Database structures therefor; File system structures therefor of structured data, e.g. relational data
- G06F16/22—Indexing; Data structures therefor; Storage structures
- G06F16/2228—Indexing structures
- G06F16/2272—Management thereof
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F16/00—Information retrieval; Database structures therefor; File system structures therefor
- G06F16/30—Information retrieval; Database structures therefor; File system structures therefor of unstructured textual data
- G06F16/31—Indexing; Data structures therefor; Storage structures
- G06F16/316—Indexing structures
-
- Y—GENERAL TAGGING OF NEW TECHNOLOGICAL DEVELOPMENTS; GENERAL TAGGING OF CROSS-SECTIONAL TECHNOLOGIES SPANNING OVER SEVERAL SECTIONS OF THE IPC; TECHNICAL SUBJECTS COVERED BY FORMER USPC CROSS-REFERENCE ART COLLECTIONS [XRACs] AND DIGESTS
- Y10—TECHNICAL SUBJECTS COVERED BY FORMER USPC
- Y10S—TECHNICAL SUBJECTS COVERED BY FORMER USPC CROSS-REFERENCE ART COLLECTIONS [XRACs] AND DIGESTS
- Y10S707/00—Data processing: database and file management or data structures
- Y10S707/99931—Database or file accessing
- Y10S707/99933—Query processing, i.e. searching
- Y10S707/99936—Pattern matching access
-
- Y—GENERAL TAGGING OF NEW TECHNOLOGICAL DEVELOPMENTS; GENERAL TAGGING OF CROSS-SECTIONAL TECHNOLOGIES SPANNING OVER SEVERAL SECTIONS OF THE IPC; TECHNICAL SUBJECTS COVERED BY FORMER USPC CROSS-REFERENCE ART COLLECTIONS [XRACs] AND DIGESTS
- Y10—TECHNICAL SUBJECTS COVERED BY FORMER USPC
- Y10S—TECHNICAL SUBJECTS COVERED BY FORMER USPC CROSS-REFERENCE ART COLLECTIONS [XRACs] AND DIGESTS
- Y10S707/00—Data processing: database and file management or data structures
- Y10S707/99941—Database schema or data structure
- Y10S707/99943—Generating database or data structure, e.g. via user interface
Definitions
- This invention relates generally to an improved system and method for use in performing a concept-based search, and more specifically, to a system and method for allowing a user to modify a network of natural language concepts used in performing a search on a corpus of data items, wherein the network may be modified to associate search concepts provided by the user during one or more unsuccessful iterations of a search with those data items discovered during successful iterations of the search.
- the internet is a prime example of this information explosion. It is estimated that between 30 and 50 million pages are currently available to users of the internet. In addition to this publicly-available documentation, many users are also provided with other proprietary sources of information, such as those that are available via corporate intranet sites. Information may be obtained from still other sources, such as newsgroups.
- U.S. Pat. No. 5,708,829 to Kadashevich et al. describes a system for automatically managing a search index such that the index accurately reflects the information being classified.
- the system analyzes a corpus of information that is to be cataloged.
- the system generates a plurality of topic words from the corpus of information, wherein the topic words are to be added to the search index.
- the system ensures that the search index is updated to include additional search categories that accurately reflect new information being cataloged by the system.
- the system does not take into account user preferences or specific user knowledge in creating the additional index terms.
- a search system that allows a user to update a search index to reflect search terminology preferred by the user is described in the U.S. patent application Ser. No. 09/172,423 entitled, “System and Method for Developing a Selectably-Expandable Concept-Based Search”, filed on Oct. 14, 1998 by Goiffon et al., which is assigned to the assignee of the present invention.
- various tools are provided that allow a user to edit the contents of a search index to incorporate additional terms.
- the tools also allow a user to modify the organizational structure of the search index.
- the system does not provide an efficient means for allowing a user to associated search index terms with desired search results so that future searches may be accomplished without the need to perform multiple search iterations to obtain acceptable results.
- What is needed is a system for managing a search index that allows the index and index organization to evolve by selectively creating associations between items of domain knowledge provided by the user as search criteria and items of information discovered during one or more iterations of the search and that were not previously associated with the specified search criteria. These newly-created associations may then be used to perform subsequent searches on the corpus of information being indexed.
- the system includes a repository for storing a network of natural language concepts.
- the repository further stores associations between selected ones of the natural language concepts and selected data items that are being cataloged using the natural language concepts as an index.
- the data items may reside in the repository or on one or more remote systems.
- a search may be performed on the data items by specifying one or more of the natural language concepts as query terms used to locate any associated ones of the data items.
- a user provides one or more natural language concepts.
- a search of the repository is performed to locate any related ones of the data items, which are then displayed for the user as search results.
- a user may thereafter refine the scope of the search by providing additional natural language concepts during one or more additional iterations of the search.
- the user may create one or more new associations, wherein each association relates any selected one of the natural language concepts located during any iteration of the search with any selected one of the data items located during any iteration of the search.
- the user may delete selected relationships existing between located ones of the natural language concepts and selected ones of the data items.
- the knowledge base stored in the repository thereby evolves to reflect the knowledge and preferences of an individual user. Subsequently performed searches employing similar concepts will therefore yield successful search results without the need for multiple search iterations.
- the network of natural language concepts includes relationships between ones of the concepts to organize the concepts according to generalizations and specifications.
- the user is allowed to create additional relationships between any of the natural language concepts located during any iteration of the search such that the organization of the concept network may be tailored to user needs.
- the user is further allowed to store additional natural language concepts in the repository, and to relate the additional natural language concepts both to other concepts, and to selected ones of the data items. In this manner, query terms that were previously ineffective in locating desired search results are added to the knowledge base so that future search efforts may include the new terminology.
- the invention of the preferred embodiment includes a user interface for providing a display of all query terms specified by the user and all concepts located during all iterations of the search.
- the display further indicates all search results obtained for each search iteration. Associations between multiple concepts and/or between concepts and data items that are included in the display may be created using either a standard “drag and drop” interface, or using various keystrokes in a manner known in the art.
- the system includes a browse capability to allow a user to view a list of concepts and concept relationships stored in the repository.
- a search query may be composed by selecting various ones of the existing concepts from the list of concepts provided by the browse function, and/or by manually entering terms to be included in the query.
- a search expansion feature is also provided to allow a user to selectively expand the scope of the search.
- any concept that has one or more predetermined selected relationship(s) to a concept located using the user query is also included in the search.
- a user may specify that all concepts providing a more generalized description of a concept located using the query terms may be included in the search.
- a user may selectively include within the search all concepts that provide a more particularized description of a concept located using the query terms. In this manner, the scope of the search is automatically expanded to locate additional ones of the data items.
- the search system is tailored to catalog data items that each stores meta-data descriptive of an associated software module such as a program, subroutine, database, and the like.
- the search system may be used by an Information Technology group to catalog and manage the various software modules to both track interdependencies existing between the modules, and to make the modules available for potential reuse.
- FIG. 1 is a block diagram of a Data Processing System used to implement the current invention
- FIG. 2 is a block diagram representing a hierarchical tree structure for organizing natural language concepts
- FIG. 3 is a block diagram illustrating an example of the use of asset elements, and relationships created between asset elements
- FIGS. 4A and 4B when arranged as shown in FIG. 4, are a block diagram illustrating an example of concept elements being related to asset elements
- FIG. 5 is a flowchart of the method used by Element Locator to accomplish a search of the Repository
- FIG. 6 is a graph showing a more detailed example of a hierarchical search tree structure for use in performing natural language concept searches to locate asset elements
- FIG. 7 is an illustration of the user interface for Element Locator
- FIG. 8 is an illustration of the user interface provided to facilitate modification of the knowledge base
- FIG. 9 is a flowchart of the functionality provided by Element Locator during a search.
- FIG. 10 is a flowchart of the steps performed to allow modification of the knowledge base.
- FIG. 11 is a flowchart illustrating the steps performed by Element Locator to create or delete relationships between the asset and concept elements, and, if necessary, to create new word and/or concept elements.
- FIG. 1 is a block diagram of Data Processing System 100 that may be used as a system for performing searches in accordance with the present invention.
- the system includes a Memory 102 for storing data signals.
- Memory 102 includes a Repository 104 for storing natural language concepts that can be used to develop a search query as will be discussed further below.
- the Memory is coupled to one or more Instruction Processors (IPs) shown as IP 1 106 a and IP 2 106 b for operating on the data signals stored in Memory 102 .
- IPs Instruction Processors
- the system further includes User Interface 108 such as a display terminal that provides the user with access to Data Processing System 100 .
- Data Processing System 100 may further include mass storage devices such as that shown as Mass Storage Device 110 coupled to Memory 102 .
- the system of the preferred embodiment further includes a search tool shown as Search Means 112 stored in Memory 102 .
- Search Means 112 which interfaces to Repository 104 , provides the user search interface and search routines for performing searches on the contents of Repository 104 in response to user requests provided via User Interface 108 .
- Search Means 112 is a software program called the Element Locator, as will be discussed in detail below.
- FIG. 2 is a block diagram representing a network used to organize natural language concepts based on similarities and differences between the concepts.
- this network is organized as a hierarchical tree structure. This type of tree structure could be used to perform a search as will be discussed further below.
- Natural language concepts are organized into broad categories called “Application Domains”.
- the Application Domain for “Banking” is shown in Block 200 .
- Below an Application Domain in the hierarchical tree structure are stored natural language concepts relating to the general concept “Banking”. For example, in FIG. 2, concepts such as “Loan”, “Mortgage”, “Savings”, and “Checking” are shown in Blocks 202 , 204 , 206 , and 208 , respectively.
- Each concept may further be related to other child concepts wherein each child concept exists immediately below the related (parent) concept in the tree hierarchy.
- the child concept is similar to the parent concept, but with specific differences.
- the concepts “Commercial Checking” and “Consumer Checking” in Blocks 210 and 212 are shown as child concepts of concept “Checking”.
- Each concept may be related to multiple other concepts.
- concept “Consumer Checking” in Block 212 could also be related to a concept called “Consumer Banking”.
- the hierarchical tree structure may contain any number of levels of concepts within a given Application Domain.
- Each concept may be stored as a string of ASCII characters, although other types of identifiers may be used to represent or identify the concepts.
- the hierarchical tree of the preferred embodiment also stores “words”.
- a word is a character string that is indicative of a natural language word or phrase that describes a related concept.
- the tree structure of FIG. 2 shows the words “Adjustable Rate”, “Fixed Rate”, “Fifteen-Year”, and “Thirty-Year” in Blocks 214 , 216 , 218 , and 219 , respectively. These words are related to the Concept “Mortgage” in Block 204 .
- the hierarchical tree further includes “word variants”. Each word variant is a character string that provides an alternative description of a word.
- a word variant may provide an abbreviation, an acronym, a slang term, alternative form or tense, or a foreign language expression, for a word to which it relates.
- the word variant “ARM” is shown in Block 220 related to the character string “Adjustable Rate” in Block 214 .
- Each of the nodes of the hierarchical tree shown in FIG. 2, including each of the application domains, concepts, words, and word variants, may be referred to as a “locator element” because each node facilitates the location of other types of elements in a manner to be discussed below.
- the hierarchical tree structure may be stored in a repository such as Repository 104 .
- Repository 104 is implemented using the Unisys Universal Repository (UREP) commercially available from the Unisys Corporation, although other types of repositories could be utilized including, but not limited to, a Microsoft Repository commercially available from the Microsoft Corporation.
- Unisys Universal Repository (UREP) is a fully object-oriented repository for providing access to, concurrent sharing of, and immediate update support of all objects stored within the repository. For more information on the UREP system from Unisys, see the UREP Technical Overview, Document Number 8807 6971-000 available from the Unisys Corporation, and which is incorporated herein by reference in its entirety.
- each of the locator elements is stored as an object.
- Each of the branches of the hierarchical tree structure is implemented by creating a relationship between two objects.
- each application domain, concept, word, and word variant could be stored as a respective identifier occupying a predetermined storage location within the repository, with pointers between the storage locations used to represent the relationships between the various nodes of the tree.
- Still other implementations of the hierarchical tree structure will be apparent to those skilled in the art.
- Repository 104 stores other types of objects besides those discussed above.
- Each of these other objects could store data that represents, describes, and/or models virtually anything.
- each of the other objects could store an actual document.
- selected ones of the other objects could store meta-data that describes a document, wherein the actual document text is stored in a document repository residing within either Memory 102 , within Mass Storage 110 , or within the storage of a remote data processing system.
- objects could be used to model and/or store information about a particular business.
- the system of the preferred embodiment includes objects that each stores meta-data about a respective reusable software construct.
- assets which are referred to as “asset elements”, each represents and describes a respective code, data, or system software component.
- an asset element may be used to store meta-data about a software program.
- Another asset element may store information about a database.
- Yet another asset element may store descriptive data about a particular system resource, such as a directory within a data processing system.
- the information stored in the asset elements could include the location of the respective software component, revision histories, the name of the author, the language used to implement the software module, and the like. Relationships between the code modules, for example, calls between code components, or references to data modules, are modeled by creating relationships between the respective asset elements that represent and describe the related modules. These relationships are similar to the relationships existing between the locator elements.
- This use of asset elements forms the basis of an object management system that can aid an Information Technology (IT) group in managing existing software components, and in developing new components that interface to existing components.
- the software components being managed may reside within Memory 102 of Data Processing System 100 , but are more likely stored in the memory of a remote data processing system (not shown).
- the implementation details of an object management system of this type are largely beyond the scope of this invention, but are described in detail in the co-pending patent application entitled “Object Management System Supporting the Use of Application Domain Knowledge Mapped to Technology Domain Knowledge” which is referenced above, and incorporated herein by reference in its entirety.
- FIG. 3 is a block diagram illustrating an example of the use of asset elements, and relationships created between asset elements.
- Asset elements of different types exist in the system of the preferred embodiment, just as locator elements of different types are shown in FIG. 2 .
- FIG. 3 illustrates an asset element of the type “application” that represents and describes a group of programs (an application) that is called “BankStatements”.
- This asset element which is shown in Block 300 , is related to elements that represent programs included in the banking application. These elements are shown as program elements “Issue CheckStatements” and “Issue LoanStatements” in Blocks 302 and 304 , respectively.
- This model therefore represents and describes a banking application for generating bank statements, wherein the application includes two programs, each of which performs a function of the banking application.
- Each of the program elements is also related to other asset elements.
- program element “Issue CheckStatements” is related to asset elements of types “Subroutine” and “Database” in Blocks 306 and 308 , respectively. This represents the fact that the program represented by Block 302 calls the subroutine “PrintCheckStatements” represented and described by the asset element shown in Block 306 , and references database “ClientData” represented by the asset element of Block 308 .
- each of the locator elements that stores a concept may have a relationship with one or more of the asset elements.
- these relationships are created using relationships between objects as is supported within the UREP object Repository in the manner discussed above.
- the relationships are selectively created so that each asset element may be linked to one or more concepts that are descriptive of the asset element. Any given asset element may be related to one or more concept elements, and any concept element may be related to one or more asset elements.
- relationships of this type could be created between asset elements and word and word variant elements, as well as between asset elements and concept elements.
- FIGS. 4A and 4B when arranged as shown in FIG. 4, are a block diagram illustrating the concept elements of FIG. 2 and the asset elements of FIG. 3, and relationships that interrelate some of the concept elements to selected asset elements.
- the concept element “Loan” in Block 202 is related to the software construct described by the asset element “Issue LoanStatements” in Block 304 , as indicated by Line 400 .
- This asset element is also related to concept element “Mortgage” in Block 204 , as shown by Line 402 .
- concept element “Checking” in Block 208 is related to the asset element “Issue CheckStatements” in Block 302 , as illustrated by Line 404 .
- the asset and locator elements and the element relationships are included in Object Management System shown in block 406 , used to manage the asset elements.
- the relationships between the locator elements, as well as those between locator and asset elements, may be used to perform a natural language search on the asset elements.
- a user uses an interface such as User Interface 108 , a user provides one or more character strings as a search query.
- the provided character strings are used by Search Means 112 , which in the preferred embodiment is a software program called the “Element Locator”.
- Element Locator searches the system “Lexicon” stored in Repository 104 , wherein the Lexicon comprises each of the character strings stored in a word or word variant element.
- Element Locator also uses the character strings to further search the indicators stored in the concept elements. If one or more matches are found, Element Locator traverses relationships to locate any related concepts.
- the traversal of relationships between concept elements may be controlled by the user. That is, the user is allowed to specify a selectable number of levels within the hierarchy of the concept search tree that are to be traversed to locate additional child and/or parent concepts of any originally-located concept. The user is thereby able to selectably expand the scope of the search.
- the selectable nature of the search expansion capability is discussed further below, and is described in detail in the co-pending application entitled “System and Method for Developing a Selectably-Expandable Concept-Based Search” incorporated by reference above (hereinafter, “First Co-pending Application”).
- Element Locator After an initial set of concept elements is located, Element Locator further traverses any relationships from the located concept elements to find any related asset elements. Using the meta-data stored in the selected asset elements, the user is allowed to gain information on the respective software constructs, including the location of the constructs within Data Processing System 100 or in some other remote data processing system. In this manner, software constructs related to a particular technology may be located using application domain terms instead of technology domain terms.
- An object management system of the type described above is useful for gaining information about software elements relevant to a domain subject area of interest to a user. Once a set of software elements is identified, users may gain further understanding of those software elements in relationship to other interdependent software elements. The user may also gain information related to the precise specification of those software elements. Other uses and advantages associated with an object management system of the type described above are discussed in the co-pending application entitled, “Object Management System Supporting the Use of Application Domain Knowledge Mapped to Technology Domain Knowledge” referenced above (hereinafter, Second Co-pending Application).
- Element Locator searches Repository 104 to locate this string, which is stored as a word variant element in Block 220 .
- Element Locator traverses the relationship between this word variant element and the word element shown storing the character string “Adjustable Rate” in Block 214 .
- Element Locator further traverses the relationship to locate any related concept elements. In this example, concept elements “Loan” in Block 202 and “Mortgage” in Block 204 are located. Finally, the relationships indicated by Lines 400 and 402 are traversed to locate the asset element “LoanStatements” in Block 304 .
- FIG. 5 is a flowchart of the method used by Element Locator to accomplish a search of Repository 104 .
- Element Locator receives one or more query terms from a user.
- Element Locator searches the Lexicon and the concept elements of Repository 104 for these character strings. If a character string is originally located in a word element, the word element is added to a list of word elements stored in memory, as shown in step 504 . Otherwise, if the specified character string is located in a word variant element, all related word elements are located and stored in the list of word elements along with the located word variant element. Additionally, all character strings that are not located in Repository 104 are also added to the list in memory. Next, all related concept elements are located for each of the located word elements. This is illustrated in step 506 . These concepts are stored in the same list in memory that contains the word and word variant elements.
- Element Locator is to locate any concept elements having predetermined relationships to the located concept elements, such as parent, child, or sibling relationships.
- a parent concept is a concept directly related to the located concept and which exists one level of generalization above the located concept in the concept hierarchy.
- a child concept is directly related to the located concept and exists one level of specialization below the located concept in the hierarchy.
- a sibling concept has the same parent as the specified concept. Specifying the inclusion of parent concepts adds more generalized concepts to those already included in the search. This is shown in steps 508 and 510 , respectively. Similarly, specifying the inclusion of child concepts includes more specific concepts in the search, as is shown in steps 512 and 514 , respectively.
- the additionally located concept elements are added to the list of locator elements being stored in memory.
- step 516 All specified and derived word, word variant, and concept elements are stored in an entry in a first stack in Memory 102 , which is called the “Query Stack”, as shown in step 518 .
- all asset elements are stored in an entry in an entry in a second stack in memory called the “Results Stack”, as illustrated in step 520 .
- the use of the Query Stack and the Results Stack will be discussed further below.
- the list of asset elements is provided to the user via User Interface 108 as illustrated in step 522 .
- asset elements are used to describe and model software constructs, similar objects could be defined to store meta-data on any type of information or system requiring management, cataloging, and/or indexing.
- the catalog of meta-data as implemented by the asset elements may be searched using those natural language concepts defined by the locator elements. It may further be noted that although the asset elements of the preferred embodiment reside within Repository 104 , this need not be the case.
- the objects being cataloged by the locator elements may reside on one or more remote systems.
- each Application Domain that is to be stored in Repository 104 is initially created when the Object Management System is installed by system administrators.
- the Concept, Word, and Word Variant Elements are created according to the IT missions performed by the user system.
- Various Application Domains are available commercially from the Unisys Corporation, and those not available as pre-packaged Application Domains may be custom-created, and tailored specifically to an individual user's requirements.
- a system administrator can create the necessary relationships between asset elements and ones of the locator elements based on user specifications.
- the Object Management System 406 provides a suite of interactive tools that allows a user to view the contents of Repository 104 , and to further create additional elements, one element at a time. These tools further provide the capability to create additional relationships between elements, a relationship at a time.
- the interactive tool suite is generally used by system administrators familiar with the underlying system operations of the Object Management System. The end user may or may not be familiar with these interactive tools. Therefore, the current invention is provided as an interactive approach to creating additional concept indicators and relationships between those indicators within a knowledge base used to perform searches.
- the current invention is based on the natural progression of events that is generally employed by a user to accomplish a search.
- a user has some preconceived notion of the search results that are desired and expected.
- the user composes a query using search terms that are thought to be related to those desired results.
- the search may initially be ineffective for a number of reasons. If the initial query does not produce the expected results, the user must modify the query and perform the search again. Several iterations of this nature may be necessary, with the user each time modifying a search query based on what was learned from the results achieved in the previous one or more search iterations. Eventually, the user may be successful in locating the particular items of interest.
- prior art search systems unless a user can remember terminology employed in a previously-performed successful search, the user is forced to repeat the iterative process even if a search is similar to a search performed by the system in the past. That is, prior art search systems do not evolve to reflect user knowledge and preferences regarding the concepts and relationships stored within the knowledge base of the system.
- the current invention alleviates this time-consuming trial-and-error approach by providing a system that is capable of selectively “learning” from prior failed searches to create relationships between objects stored in Repository 104 .
- the system can be used to create relationships between two locator elements, or between a locator element and an asset element.
- the system operates by saving, for each iteration of a given search, the character strings provided by the user as the search query, the concepts located in Repository 104 using the search query, and the results of that query.
- the information is saved in Memory 102 in several last-in, first-out, stacks.
- any provided query terms are saved along with all located word, word variant, and concept elements in the Query Stack.
- the query results are likewise stored in the Results Stack.
- stacks are used in the current embodiment, any type of storage structure could be utilized to store this information, including arrays, queues, and the like. Information may be stored in multiple storage structures as in the current system, or may alternatively be stored in a single storage structure.
- a user is allowed to select an option provided by the Element Locator to view the saved query data and associated results for all prior iterations of the search.
- a user interface is provided that lists each of the user queries, and further lists any of the locator elements that were located as a result of the query.
- the user interface further lists any of the asset elements that are related to the selected locator elements.
- the user is allowed to use this information to modify the information stored in Repository 104 so that new relationships are created between selected elements, or so that new locator elements are added to the Repository. For example, the user may selectively relate the asset elements located during the final search iteration to the concept elements associated with the initial query.
- any future searches performed using terminology that is the same as, or similar to, the original query will locate the desired asset elements immediately, without the need to perform several search iterations.
- the search tree will evolve to reflect the way in which the individual user employs the system lexicon to accomplish searches. The use of this system and method will be described further in reference to the following example.
- FIG. 6 is a graph showing a more detailed example of a hierarchical search tree structure for use in performing natural language concept searches to locate asset elements.
- Each of the blocks in FIG. 6 represents an element or a collection of elements stored in Repository 104 .
- Asset elements are shown in column 602
- locator elements are shown in columns 604 , 606 , and 608 .
- locator elements include concept elements, and further include the word and word variant elements that make up the system Lexicon 610 .
- Repository 104 includes asset elements that describe and model software modules that are associated with a banking application. These asset elements are shown in column 602 . These software modules are described by the concept, word, and word variant elements included in the Application Domain “Banking” illustrated by Box 612 .
- Repository 104 could also store other Application Domains.
- Element Locator in the manner discussed above to perform a search on Repository 104 .
- the user employs User Interface 108 to enter the search term “Account” as the initial query string.
- Element Locator locates this search term in the word element “Account” shown in Block 614 .
- This word element is related to the concept “AccountBalance” shown in Block 616 , which is further related to the asset element “CustAccount” in Block 618 .
- Element Locator displays information about the located asset element for the user, including the name and other descriptive data such as the fact that the asset element describes an Oracle table. In the current example, this is not the software component of interest to the user, and the user must therefore refine the query.
- Element Locator locates the related word element, which in this example includes word element “Customer” in Block 622 .
- Element Locator further locates the concept elements related to this word element, which includes “Customer” in Block 624 and “CustomerInfo” in Block 626 .
- Element Locator locates the related asset elements for each of these concept elements. This once again includes asset element “CustAccount” in Block 618 , which is not the element the user is attempting to locate.
- the user makes a third attempt to refine the search, this time using the character string “Client” shown in Block 628 .
- Concept element “Client” in Block 630 is located, as are the related asset elements of “ClientInfo” and “CustData” shown in Blocks 632 and 634 , respectively.
- the asset element “Clientlnfo” stores meta-data describing the Sybase table that is of interest to the user, and the search is therefore considered complete.
- FIG. 7 is a block diagram of the user interface for Element Locator. This interface is used to perform an iterative search of the type described above.
- a user may enter character strings in Block 700 to be used in searching for concepts.
- One or more character strings may be entered at one time, with multiple character strings being separated by commas.
- the user is allowed to enter one or more character strings in each of Blocks 702 and 704 for use in searching for words and word variants, respectively.
- the user may enter character strings in one, or more than one, of the Blocks 700 , 702 , and 704 at one time.
- Search character strings may be manually entered from a keyboard.
- the user may select the Browse function shown in Block 706 to obtain a visual display of the various concepts, words, and word variants stored in Repository 104 .
- the user may select various concepts, words, and word variants from the display for use in performing the search.
- Window 708 shows a display that would be provided by selecting the Browse function. When this function is selected, all application domains stored in Repository 104 will be displayed in an abbreviated (contracted) form arranged in alphabetical order.
- the display of Window 708 includes application domains “Accounting” and “Banking”.
- the user may selectively expand the display shown in Window 708 for any of the application domains so that the display includes the hierarchy of concepts, words, and word variants existing within the selected application domain.
- Window 708 shows a fully expanded view of the Application Domain “Banking” from FIG. 6 .
- display expansion is performed by selecting various ones of the expansion/contraction selectors shown provided to the left of each of the application domains, concepts, words, and word variants. For example, by selecting expansion/contraction selector 710 , all concepts immediately below Application Domain “Banking” are shown, including “Client”, “Customer”, and “Query”. By further selecting expansion/contraction selector 712 , all concepts and/or words immediately below concept “Client” are displayed, and so on.
- the user may scroll through the list provided in Window 708 using Scroll Bar 713 .
- the user may select one or more concept, word, and word variant elements from the display.
- the selected items will appear in highlighted text.
- the user By selecting the “OK” function in Block 714 , the user then causes the selected concepts, words, and word variants to be entered in Blocks 700 , 702 , and 704 , respectively, for use in performing the search.
- the user may also select the “Cancel” function in Block 716 to exit the Browse function.
- the user is also allowed to control the extent to which search expansion will occur.
- the user may choose to include all parent, sibling, and/or child concepts for each concept located during the search. This selection is performed by using Boxes 720 , 722 , and 724 , respectively. Expanding the search to include parent concepts causes all concepts located immediately above a located concept within the concept hierarchy to be used in searching for asset elements. Similarly, expanding the search to include child concepts causes all concepts located immediately below a located concept within the concept hierarchy to be used in the search. Expanding the search to include sibling concepts causes any concept having the same parent as a located concept to be used in the search. Use of the search expansion capabilities is described in detail in the First Co-pending Application.
- the user After completing entry of the query terms, either manually and/or by using the Browse function, the user initiates a search by selecting the “Search” function in Block 726 . This causes the Element Locator to search the Repository 104 for each of the selected query terms. If a character string specified in Block 704 is located in a word variant elements, any related word elements are located. Word elements are further located by using the character strings specified in Block 702 . For each word element located, any related concept elements are located. Concept elements are further located using the character strings specified in Block 700 . Search expansion may be performed, if selected by the user in Boxes 702 , 722 , and/or 724 , to include concepts related to those located concepts. This will cause additional concept elements to be located for purposes of the search. Finally, all concept elements located during the search are used to locate any related asset elements. At any time during the search process, the user may cancel a search by selecting the “Cancel” function shown in Block 728 .
- the located asset elements are shown in Window 730 .
- the asset element “CustAccount” is shown in Window 730 .
- This display includes the asset element name “CustAccount”, and further includes the type of asset element, which in this case is “Oracle Table”.
- Window 730 may also include other information such as the author of the element, and when the element was cataloged.
- the user may perform multiple search iterations by selecting different query terms in Blocks 700 , 702 , and/or 704 , then re-selecting the “Search” function in Block 726 .
- any located asset elements are shown in Window 730 .
- element locator will store the query terms in the Query Stack, including any word variant, word, and/or concept elements located during the search. Asset elements located during the search are stored in the Results Stack.
- Selection of the “Clear” function in Block 732 clears the Query and Results Stacks so that an entirely new search may be initiated.
- the search display of FIG. 7 may be exited by selecting the “Exit” function shown in Block 734 .
- the Element Locator user interface further allows the user to selectively modify the knowledge base by selecting the option shown as the “History” in Block 736 .
- Element Locator provides a display related to the history of the current search. This knowledge base modification function may be selected at any time during the search process.
- FIG. 8 is an illustration of the user interface provided to facilitate modification of the knowledge base included in the search tree stored within Repository 104 .
- Window 800 displays the locator elements located during each iteration of the search, as is recorded in the Query Stack. This can best be illustrated by returning to the above example provided during the description of FIG. 6 .
- the user supplied the term “Account”. This resulted in location of the word element storing the character string “Account”, and the concept element storing the string “AccountBalance”.
- These locator elements are shown arranged in the hierarchical manner in which they are organized in FIG. 6, and are listed as “Search Inputs 1 ” 802 , correspond to the first search iteration.
- the user supplied the term “Customers”. This located the word variant element storing the term “Customers”, and further resulted in location of the word element “Customer”, and the concept elements “Customer” and “Customer Info”. These terms are therefore displayed as “Search Inputs 2 ” 804 , and so on.
- the search inputs provided by the user are very simple, involving only a single word or word variant element.
- many word, word variant, and concept elements may be provided during a single search iteration, such that the portions of the search tree traversed during a single search iteration may include multiple concept domains, or a large part of a single concept domain.
- the user may scroll through the display of Window 800 using scroll bar 806 to display the entire list of locator elements.
- the user may also expand and contract any selected portion of the display in Window 800 using the expansion/contraction selectors to the left of each locator element. For example, hitting the “-” in Block 808 to the left of “Search Inputs 3 ” will cause contraction of the display so that all items associated with iteration 3 are hidden.
- the display in Window 810 is similar to that shown in Window 800 , but instead displays asset elements located during each of the search iterations, as obtained for the list stored in the Results Stack.
- the asset element “CustAccount” was located in response to the user specifying “Account” as the query term. This is shown located as Search Results 1 812 .
- Search Results 2 814 This same search results was obtained during the second search iteration, and is therefore shown as Search Results 2 814 .
- the search results obtained during the third search iteration in response to the user query “Client” is shown as Search Results 3 816 .
- the search results are arranged according to type. For example, the current search results are all categorized as “Tables”.
- the display of Window 810 includes expansion/contraction selectors for allowing a user to selectively expand and contract portions of the display in a manner known in the art.
- the user is allowed to select any one or more of the asset elements located in Window 810 .
- This selection could be accomplished, for example, by highlighting one or more asset elements using the “control”, “shift” and “arrow” keys in a manner known in the art.
- the selection may be made using a pointing selection device such as a mouse.
- Other ways of making the selection will be obvious to those skilled in the art.
- the user is then able to “drag” the selected asset element(s) to a desired row in Window 800 and “drop” them in the proximity of a selected one of the locator elements. This specifies that a relationship is to be formed between a concept element associated with the selected one of the locator elements and the one or more selected asset elements. This will be discussed further below in reference to the current example.
- the above described association operation may be performed on a group of locator elements as well as on a single locator element.
- a group of elements may be selected in Window 800 . These selected concept elements are shown highlighted in Window 800 .
- a second group of one or more asset elements may then be selected in Window 810 in the manner described above.
- the group of asset elements may be dropped in proximity to any one of the elements highlighted in Window 800 . This specifies that an association is to be formed between each asset element in the group defined in Window 810 , and a concept element associated with each locator element specified in Window 800 .
- the functionality described above may be illustrated by returning to the current example.
- the user wants to relate the query term specified in the first search iteration to the successful search results obtained in the final search iteration. That is, the user wants to associated the term “Account” to the tables “Clientinfo” and “CustData”.
- the user selects the asset elements “ClientInfo” and “CustData” in the manner described above, then uses the drag and drop interface to drag the selected elements adjacent to the term “Account”. Since the Repository of the preferred embodiment stores relationships between concepts and asset elements, this drag and drop operation specifies that relationships are to be formed between the concept element “AccountBalance”, which is directly related to word element “Account”, and the two selected asset elements “ClientInfo” and “CustData”. In an alternative embodiment in which relationships are stored between word and asset elements, performing the above operation would specify the creation of relationships that directly link word element “Account” with the selected asset elements.
- locator element for example, “Account” and “Customers”. Subsequently performing the above-described drag and drop function to either locator element specifies that relationships are to be created between the selected asset elements “ClientInfo” and “CustData” and each of the concept elements “AccountBalance”, “Customer”, and “CustomerInfo”.
- the user may view the asset elements that are related to a selected concept element. This is accomplished by selecting a concept element in Window 800 in the manner discussed above, then selecting the “View Related Elements” function in Block 820 . According to one embodiment, this function selection may also be accomplished by a “right click” of a pointer selection device such as a mouse as is known in the art. This causes a list of any asset elements that are related to the selected concept element to appear in Window 822 .
- the concept elements are grouped according to element type in a manner similar to that shown in Window 810 . The display may be expanded and contracted in a similar manner to that described above. If the user has specified that new relationships are to be created, the newly-related elements appear in bold in Window 810 .
- the user may select an asset element from Window 810 , then select the “View Related Elements” function in Block 820 . This results in a list of related concept elements being displayed in Window 822 .
- the “View Related Elements” function allows the user to view relationships already existing within the system, and to further view relationships that have been specified for creation.
- the “View Related Elements” function uses a local copy of elements retrieved from Repository 104 and stored in a buffer in Memory 102 .
- any word variant, word, or concept element provided during any search iteration that is not located in Repository 104 is shown in Window 800 of the user interface display of FIG. 8 .
- These terms are shown under the heading “Terms Not Located” below the Search Input corresponding to the appropriate search iteration.
- the user also provided the term “Patron” during the third search iteration. This term was not located in any locator element in Repository 104 .
- an entry “Terms Not Located” 826 is provided under “Search Inputs 3 ” with the term “Patron” appearing below this heading. If this had been the only term provided during the third search iteration such that no search results were obtained, an entry for “Search Inputs 3 ” would appear in Window 800 , but no associated “Search Entry 3 ” for search results would appear in Window 810 .
- the user is allowed to select any of the terms not located during any search iteration for inclusion in the knowledge base. That is, the user may specify that one or more new elements are to be created using these new terms. This is performed by selecting one or more terms in the manner described above, then positioning them at a desired location within the locator element network. For example, if the term “Patron” is to be created as a new concept element, this term is selected, then dragged to Row 828 indicating the Banking Domain. Positioning the term at this location causes a new concept element to be created as a child of the Banking Domain locator element, and at the same level in the hierarchy as concept “Customer”. A relationship is created between the new element and the element indicative of the Banking Domain.
- the user may position the term at row 830 in proximity to concept element “Customer” to create a new word element “Patron” that exists immediately below concept “Customer” in the hierarchy, and which is related to concept element “Customer”.
- the user may position the new term in proximity to an existing word element to create a new word variant element that is related to the word element. Multiple such operations may be performed to add one or more concept, word, or word variant elements to the Repository 104 .
- the user may also utilize the user interface of FIG. 8 to specify the deletion of one or more relationships between an asset element and a locator element. This may be accomplished by selecting either an asset element or a locator element, then selecting the “View Related Elements” function of Block 820 .
- the list of related elements is shown in Window 822 as discussed above.
- the user may select one or more of the related elements shown in Window 822 , then select the “Delete” key to delete the relationship(s) between the selected locator and asset element(s).
- the user is allowed to specify that new relationships are to be created between locator elements within Repository 104 .
- This can be accomplished by selecting one or more locator elements in Window 800 , then using the drag and drop function to position the elements at a new position within the concept network of Window 800 .
- the user wished to relate the word element “Client” to the concept element “Customer”.
- This is accomplished by selecting the word element “Client” in Window 800 , then positioning the selected element at row 830 in proximity to concept element “Customer” using the drag and drop interface. This specifies that a relationship is to be created between the word element “Client” and concept element “Customer”.
- FIG. 9 is a flowchart of the functionality provided by Element Locator during a search, including the steps needed to store query and search information needed to provided the functionality supported by the current invention.
- step 900 if the Clear Function is specified by the user, the Query and Results stacks are cleared so that no entries are stored.
- step 902 if the search function is issued, a query string containing one or more character strings is retrieved from the user interface. The received character strings are used to search the Repository to locate any word variant, word, or concept elements that stores a specified term, as shown in step 904 . For each query term that is found, any related concept elements are located, as illustrated in step 906 .
- this step involves first locating a related word element, then locating a related concept element. If search expansion is selected such that parent, child, and/or sibling concepts are to also be utilized in the search, these additional concepts are located for each of the originally located concept elements. This is shown in step 908 . For each concept element located, any related asset elements are located, as depicted in step 910 . The located word variant, word, and concept elements are stored in the Query Stack in an entry associated with the current search iteration, as shown in step 912 . Likewise, the located asset elements are stored in the Results Stack in an entry associated with the current search iteration, as indicated in step 914 .
- the results are provided to the user, as shown in step 916 .
- the search iterations may continue indefinitely until the user either terminates the Element Locator using the Exit function, or until the user selects the History function to initiate modification of the knowledge base stored in Repository 104 , as is illustrated in step 918 .
- FIG. 9 may be implemented in many different ways without departing from the scope of the invention.
- the query and search results data may be stored in many different formats and storage structures, and the use of multiple stacks is merely a design choice.
- the ordering of steps included in the flowchart of FIG. 9 is, in many instances, a design decision, and should not be viewed as limiting.
- FIG. 10 is a flowchart of the steps performed to allow modification of the knowledge base in accordance with the current invention.
- steps 1000 and 1002 all query entries and search results entries are retrieved from the Query Stack and the Results Stack, respectively.
- a display is provided via the user interface relating the search terms provided by the user, including any locator elements located during the search, to respective search results entries. It may be noted that some query entries may not be related to associated entries in the search results stack. This will occur, for example, when a query term is provided that is not located in the Repository.
- step 1006 if the “View Related Elements” function is selected, a display is provided for any concept elements related to a selected asset element, or any asset elements related to a selected concept element.
- the user is allowed to utilize both the initially provided display of query and results terms, and/or the display of related elements to create relationships or new locator elements, and/or to delete existing relationships.
- this modification function is performed using a drag and drop interface, however, many other types of user interfaces are available. For example, the user could modify the display using cut and paste functions, or by re-typing the desired information. The user is allowed to continue modifying the display until the “Exit” or the “Cancel” function is selected.
- step 1010 This is shown in step 1010 , and is indicated by arrow 1011 .
- the “Exit” function is selected, as indicated by decision step 1012 , the “Modify Knowledge Base” routine is invoked to commit the changes to the Repository 104 , as shown in step 1014 , and processing is completed. This function is illustrated in FIG. 11 . Otherwise, the “Cancel” function is selected, and the user display of FIG. 8 is exited without committing the changes.
- FIG. 11 is a flowchart illustrating the steps performed by Element Locator to create or delete relationships between the asset and concept elements, and, if necessary, to create new word and/or concept elements.
- the changes are initially made to copies of the element data that resides with a local storage in Memory 102 that is associated with Element Locator.
- step 1100 the changes made to the user display are retrieved from the user interface.
- a check is made to determined if any new terms are specified that were previously not stored in Repository 104 , as indicated in decision step 1102 .
- a new locator element template is created in local storage to store the character string, as indicated in step 1104 .
- the type of element created will be based on how the user positions the new term within the concept hierarchy, as is described above.
- a relationship is created between the new element and an existing element within the knowledge base, as specified by the user. This is accomplished by updating information in both the newly-created element, and in the existing related element within the element data located in local storage. This is shown in step 1106 .
- a check is made to determine if any relationships are to be created between concept and asset elements, as shown in step 1108 . For each relationship that is to be created, copies of the elements are updated in local storage to reflect the addition of the new relationship, as shown in step 1110 .
- relationships may be implemented in a variety of ways, including through the use of pointers.
- step 1112 a check is made to determine whether any relationships between asset and concept elements are to be deleted, as indicated by decision step 1112 . If not, processing continues at step 1114 , as indicated by arrow 1116 . If one or more relationships are to be deleted between asset and concept elements, data stored in the local copy of these elements is modified to delete the specified relationship, as shown in step 1118 . Finally, all updated copies of the elements are stored in Repository 104 to save the desired changes, as shown in step 1114 .
Abstract
Description
Claims (33)
Priority Applications (1)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US09/220,209 US6327593B1 (en) | 1998-12-23 | 1998-12-23 | Automated system and method for capturing and managing user knowledge within a search system |
Applications Claiming Priority (1)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US09/220,209 US6327593B1 (en) | 1998-12-23 | 1998-12-23 | Automated system and method for capturing and managing user knowledge within a search system |
Publications (1)
Publication Number | Publication Date |
---|---|
US6327593B1 true US6327593B1 (en) | 2001-12-04 |
Family
ID=22822544
Family Applications (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
US09/220,209 Expired - Lifetime US6327593B1 (en) | 1998-12-23 | 1998-12-23 | Automated system and method for capturing and managing user knowledge within a search system |
Country Status (1)
Country | Link |
---|---|
US (1) | US6327593B1 (en) |
Cited By (73)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20020147697A1 (en) * | 2000-06-05 | 2002-10-10 | Schreiber Robert Walter | System and method for storing conceptual information |
US20030061122A1 (en) * | 2001-08-08 | 2003-03-27 | Berkowitz Gary Charles | Knowledge-based e-catalog procurement system and method |
US6542889B1 (en) * | 2000-01-28 | 2003-04-01 | International Business Machines Corporation | Methods and apparatus for similarity text search based on conceptual indexing |
US20030069880A1 (en) * | 2001-09-24 | 2003-04-10 | Ask Jeeves, Inc. | Natural language query processing |
US6564222B1 (en) * | 1999-03-26 | 2003-05-13 | Fujitsu Limited | Information processing system and method that selects an appropriate information retrieval system based on a context in which a user makes a request for retrieval |
US6633869B1 (en) * | 1995-05-09 | 2003-10-14 | Intergraph Corporation | Managing object relationships using an object repository |
US20030227487A1 (en) * | 2002-06-01 | 2003-12-11 | Hugh Harlan M. | Method and apparatus for creating and accessing associative data structures under a shared model of categories, rules, triggers and data relationship permissions |
US6671681B1 (en) * | 2000-05-31 | 2003-12-30 | International Business Machines Corporation | System and technique for suggesting alternate query expressions based on prior user selections and their query strings |
US6684221B1 (en) * | 1999-05-06 | 2004-01-27 | Oracle International Corporation | Uniform hierarchical information classification and mapping system |
US6704739B2 (en) * | 1999-01-04 | 2004-03-09 | Adobe Systems Incorporated | Tagging data assets |
US6727927B1 (en) * | 2000-03-08 | 2004-04-27 | Accenture Llp | System, method and article of manufacture for a user interface for a knowledge management tool |
US20040093344A1 (en) * | 2001-05-25 | 2004-05-13 | Ben Berger | Method and system for mapping enterprise data assets to a semantic information model |
US20040093331A1 (en) * | 2002-09-20 | 2004-05-13 | Board Of Regents, University Of Texas System | Computer program products, systems and methods for information discovery and relational analyses |
US20040111254A1 (en) * | 2002-12-05 | 2004-06-10 | International Business Machines Corporation | User defined text NLS enablement |
US20040193568A1 (en) * | 2003-03-27 | 2004-09-30 | International Business Machines Corporation | Abstract data model filters |
US20040254916A1 (en) * | 2003-06-12 | 2004-12-16 | International Business Machines Corporation | Data query schema based on conceptual context |
US20040260534A1 (en) * | 2003-06-19 | 2004-12-23 | Pak Wai H. | Intelligent data search |
WO2005052719A2 (en) * | 2003-11-25 | 2005-06-09 | Looptv | Method and system for speeding up data |
US20050149484A1 (en) * | 2001-05-25 | 2005-07-07 | Joshua Fox | Run-time architecture for enterprise integration with transformation generation |
US20050198077A1 (en) * | 2003-12-24 | 2005-09-08 | Van Der Heijden Antonius Nicolaas A. | Method, computer system, computer program and computer program product for storage and retrieval of data files in a data storage means |
US20050234889A1 (en) * | 2001-05-25 | 2005-10-20 | Joshua Fox | Method and system for federated querying of data sources |
US20050240606A1 (en) * | 2001-05-25 | 2005-10-27 | Joseph Edelstein | Data query and location through a central ontology model |
US6966031B1 (en) * | 2001-07-10 | 2005-11-15 | Hai Shum | Method of organizing and accessing Chinese words |
US6970881B1 (en) | 2001-05-07 | 2005-11-29 | Intelligenxia, Inc. | Concept-based method and system for dynamically analyzing unstructured information |
US6983288B1 (en) | 2000-11-20 | 2006-01-03 | Cisco Technology, Inc. | Multiple layer information object repository |
US20060020591A1 (en) * | 2001-07-20 | 2006-01-26 | Kommers Jefferson M | Information retrieval from a collection of information objects tagged with hierarchical keywords |
US20060036451A1 (en) * | 2004-08-10 | 2006-02-16 | Lundberg Steven W | Patent mapping |
US7007018B1 (en) * | 2000-11-20 | 2006-02-28 | Cisco Technology, Inc. | Business vocabulary data storage using multiple inter-related hierarchies |
US7010606B1 (en) | 2000-06-05 | 2006-03-07 | International Business Machines Corporation | System and method for caching a network connection |
US20060064666A1 (en) * | 2001-05-25 | 2006-03-23 | Amaru Ruth M | Business rules for configurable metamodels and enterprise impact analysis |
US7062705B1 (en) | 2000-11-20 | 2006-06-13 | Cisco Technology, Inc. | Techniques for forming electronic documents comprising multiple information types |
US20060156253A1 (en) * | 2001-05-25 | 2006-07-13 | Schreiber Marcel Z | Instance browser for ontology |
US7103607B1 (en) | 2000-11-20 | 2006-09-05 | Cisco Technology, Inc. | Business vocabulary data retrieval using alternative forms |
US7139973B1 (en) | 2000-11-20 | 2006-11-21 | Cisco Technology, Inc. | Dynamic information object cache approach useful in a vocabulary retrieval system |
US20060277091A1 (en) * | 2003-04-02 | 2006-12-07 | Kochikar Vivekanand P | Automated method for quantitative measurement of benefits in a plurality of self-assessing, knowledge sharing communities |
US7194483B1 (en) | 2001-05-07 | 2007-03-20 | Intelligenxia, Inc. | Method, system, and computer program product for concept-based multi-dimensional analysis of unstructured information |
US7287029B1 (en) * | 2003-09-25 | 2007-10-23 | Adobe Systems Incorporated | Tagging data assets |
US20080048855A1 (en) * | 2004-05-07 | 2008-02-28 | Berger J L | Medical implant device with RFID tag and method of identification of device |
US7350138B1 (en) * | 2000-03-08 | 2008-03-25 | Accenture Llp | System, method and article of manufacture for a knowledge management tool proposal wizard |
US7493333B2 (en) | 2004-09-03 | 2009-02-17 | Biowisdom Limited | System and method for parsing and/or exporting data from one or more multi-relational ontologies |
US7496593B2 (en) | 2004-09-03 | 2009-02-24 | Biowisdom Limited | Creating a multi-relational ontology having a predetermined structure |
US7505989B2 (en) | 2004-09-03 | 2009-03-17 | Biowisdom Limited | System and method for creating customized ontologies |
US20090077098A1 (en) * | 2005-12-22 | 2009-03-19 | Sendandsee Oy | Distribution of information in telecommunication systems |
US7536413B1 (en) | 2001-05-07 | 2009-05-19 | Ixreveal, Inc. | Concept-based categorization of unstructured objects |
US7599938B1 (en) | 2003-07-11 | 2009-10-06 | Harrison Jr Shelton E | Social news gathering, prioritizing, tagging, searching, and syndication method |
US7627588B1 (en) | 2001-05-07 | 2009-12-01 | Ixreveal, Inc. | System and method for concept based analysis of unstructured data |
US20090300046A1 (en) * | 2008-05-29 | 2009-12-03 | Rania Abouyounes | Method and system for document classification based on document structure and written style |
US7676485B2 (en) | 2006-01-20 | 2010-03-09 | Ixreveal, Inc. | Method and computer program product for converting ontologies into concept semantic networks |
CN1755684B (en) * | 2004-09-30 | 2010-05-05 | 微软公司 | Query forced indexing |
US20100146006A1 (en) * | 2008-12-08 | 2010-06-10 | Sajib Dasgupta | Information Extraction Across Multiple Expertise-Specific Subject Areas |
US20100191763A1 (en) * | 2004-06-22 | 2010-07-29 | Yuh-Cherng Wu | Request-Based Knowledge Acquisition |
US7783743B1 (en) * | 2005-09-23 | 2010-08-24 | Emc Corporation | Methods and apparatus for processing electronic mail-related data |
US7788251B2 (en) | 2005-10-11 | 2010-08-31 | Ixreveal, Inc. | System, method and computer program product for concept-based searching and analysis |
US20100318548A1 (en) * | 2009-06-16 | 2010-12-16 | Florian Alexander Mayr | Querying by Concept Classifications in an Electronic Data Record System |
US20110004566A1 (en) * | 2003-04-09 | 2011-01-06 | Gary Charles Berkowitz | Virtual Supercomputer |
US20110106831A1 (en) * | 2008-05-30 | 2011-05-05 | Microsoft Corporation | Recommending queries when searching against keywords |
US8161025B2 (en) | 2005-07-27 | 2012-04-17 | Schwegman, Lundberg & Woessner, P.A. | Patent mapping |
US8204881B2 (en) | 1999-06-18 | 2012-06-19 | Vision Point Services, Llc | Information search, retrieval and distillation into knowledge objects |
US8589413B1 (en) | 2002-03-01 | 2013-11-19 | Ixreveal, Inc. | Concept-based method and system for dynamically analyzing results from search engines |
US20140297283A1 (en) * | 2013-04-02 | 2014-10-02 | Nuance Communications, Inc. | Concept Cloud in Smart Phone Applications |
US9069843B2 (en) | 2010-09-30 | 2015-06-30 | International Business Machines Corporation | Iterative refinement of search results based on user feedback |
US9245243B2 (en) | 2009-04-14 | 2016-01-26 | Ureveal, Inc. | Concept-based analysis of structured and unstructured data using concept inheritance |
US9754038B2 (en) | 2003-02-05 | 2017-09-05 | Open Text Sa Ulc | Individually deployable managed objects and system and method for managing the same |
US9952860B2 (en) | 2013-03-13 | 2018-04-24 | Veriscape, Inc. | Dynamic memory management for a virtual supercomputer |
USRE46973E1 (en) | 2001-05-07 | 2018-07-31 | Ureveal, Inc. | Method, system, and computer program product for concept-based multi-dimensional analysis of unstructured information |
US10382819B2 (en) * | 2010-08-16 | 2019-08-13 | S.I.Sv.El. Societa Italiana Per Lo Sviluppo Dell'elettronica S.P.A. | Method and apparatus for selecting at least one media item |
US10546273B2 (en) | 2008-10-23 | 2020-01-28 | Black Hills Ip Holdings, Llc | Patent mapping |
US10579662B2 (en) | 2013-04-23 | 2020-03-03 | Black Hills Ip Holdings, Llc | Patent claim scope evaluator |
US10614082B2 (en) | 2011-10-03 | 2020-04-07 | Black Hills Ip Holdings, Llc | Patent mapping |
US10810693B2 (en) | 2005-05-27 | 2020-10-20 | Black Hills Ip Holdings, Llc | Method and apparatus for cross-referencing important IP relationships |
US10860657B2 (en) | 2011-10-03 | 2020-12-08 | Black Hills Ip Holdings, Llc | Patent mapping |
US10885078B2 (en) * | 2011-05-04 | 2021-01-05 | Black Hills Ip Holdings, Llc | Apparatus and method for automated and assisted patent claim mapping and expense planning |
US11461862B2 (en) | 2012-08-20 | 2022-10-04 | Black Hills Ip Holdings, Llc | Analytics generation for patent portfolio management |
Citations (11)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US5062074A (en) * | 1986-12-04 | 1991-10-29 | Tnet, Inc. | Information retrieval system and method |
US5278980A (en) * | 1991-08-16 | 1994-01-11 | Xerox Corporation | Iterative technique for phrase query formation and an information retrieval system employing same |
US5428712A (en) * | 1990-07-02 | 1995-06-27 | Quantum Development Corporation | System and method for representing and solving numeric and symbolic problems |
US5488725A (en) * | 1991-10-08 | 1996-01-30 | West Publishing Company | System of document representation retrieval by successive iterated probability sampling |
US5708829A (en) * | 1991-02-01 | 1998-01-13 | Wang Laboratories, Inc. | Text indexing system |
US5724571A (en) * | 1995-07-07 | 1998-03-03 | Sun Microsystems, Inc. | Method and apparatus for generating query responses in a computer-based document retrieval system |
US5848409A (en) * | 1993-11-19 | 1998-12-08 | Smartpatents, Inc. | System, method and computer program product for maintaining group hits tables and document index tables for the purpose of searching through individual documents and groups of documents |
US5966703A (en) * | 1996-08-09 | 1999-10-12 | Digital Equipment Corporation | Technique for indexing information stored as a plurality of records |
US6029195A (en) * | 1994-11-29 | 2000-02-22 | Herz; Frederick S. M. | System for customized electronic identification of desirable objects |
US6035269A (en) * | 1998-06-23 | 2000-03-07 | Microsoft Corporation | Method for detecting stylistic errors and generating replacement strings in a document containing Japanese text |
US6195651B1 (en) * | 1998-11-19 | 2001-02-27 | Andersen Consulting Properties Bv | System, method and article of manufacture for a tuned user application experience |
-
1998
- 1998-12-23 US US09/220,209 patent/US6327593B1/en not_active Expired - Lifetime
Patent Citations (11)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US5062074A (en) * | 1986-12-04 | 1991-10-29 | Tnet, Inc. | Information retrieval system and method |
US5428712A (en) * | 1990-07-02 | 1995-06-27 | Quantum Development Corporation | System and method for representing and solving numeric and symbolic problems |
US5708829A (en) * | 1991-02-01 | 1998-01-13 | Wang Laboratories, Inc. | Text indexing system |
US5278980A (en) * | 1991-08-16 | 1994-01-11 | Xerox Corporation | Iterative technique for phrase query formation and an information retrieval system employing same |
US5488725A (en) * | 1991-10-08 | 1996-01-30 | West Publishing Company | System of document representation retrieval by successive iterated probability sampling |
US5848409A (en) * | 1993-11-19 | 1998-12-08 | Smartpatents, Inc. | System, method and computer program product for maintaining group hits tables and document index tables for the purpose of searching through individual documents and groups of documents |
US6029195A (en) * | 1994-11-29 | 2000-02-22 | Herz; Frederick S. M. | System for customized electronic identification of desirable objects |
US5724571A (en) * | 1995-07-07 | 1998-03-03 | Sun Microsystems, Inc. | Method and apparatus for generating query responses in a computer-based document retrieval system |
US5966703A (en) * | 1996-08-09 | 1999-10-12 | Digital Equipment Corporation | Technique for indexing information stored as a plurality of records |
US6035269A (en) * | 1998-06-23 | 2000-03-07 | Microsoft Corporation | Method for detecting stylistic errors and generating replacement strings in a document containing Japanese text |
US6195651B1 (en) * | 1998-11-19 | 2001-02-27 | Andersen Consulting Properties Bv | System, method and article of manufacture for a tuned user application experience |
Cited By (134)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US6633869B1 (en) * | 1995-05-09 | 2003-10-14 | Intergraph Corporation | Managing object relationships using an object repository |
US8626756B1 (en) | 1999-01-04 | 2014-01-07 | Adobe Systems Incorporated | Tagging data assets |
US6704739B2 (en) * | 1999-01-04 | 2004-03-09 | Adobe Systems Incorporated | Tagging data assets |
US6564222B1 (en) * | 1999-03-26 | 2003-05-13 | Fujitsu Limited | Information processing system and method that selects an appropriate information retrieval system based on a context in which a user makes a request for retrieval |
US6684221B1 (en) * | 1999-05-06 | 2004-01-27 | Oracle International Corporation | Uniform hierarchical information classification and mapping system |
US8204881B2 (en) | 1999-06-18 | 2012-06-19 | Vision Point Services, Llc | Information search, retrieval and distillation into knowledge objects |
US6542889B1 (en) * | 2000-01-28 | 2003-04-01 | International Business Machines Corporation | Methods and apparatus for similarity text search based on conceptual indexing |
US6727927B1 (en) * | 2000-03-08 | 2004-04-27 | Accenture Llp | System, method and article of manufacture for a user interface for a knowledge management tool |
US7350138B1 (en) * | 2000-03-08 | 2008-03-25 | Accenture Llp | System, method and article of manufacture for a knowledge management tool proposal wizard |
US6671681B1 (en) * | 2000-05-31 | 2003-12-30 | International Business Machines Corporation | System and technique for suggesting alternate query expressions based on prior user selections and their query strings |
US7016917B2 (en) * | 2000-06-05 | 2006-03-21 | International Business Machines Corporation | System and method for storing conceptual information |
US20020147697A1 (en) * | 2000-06-05 | 2002-10-10 | Schreiber Robert Walter | System and method for storing conceptual information |
US7010606B1 (en) | 2000-06-05 | 2006-03-07 | International Business Machines Corporation | System and method for caching a network connection |
US6983288B1 (en) | 2000-11-20 | 2006-01-03 | Cisco Technology, Inc. | Multiple layer information object repository |
US7007018B1 (en) * | 2000-11-20 | 2006-02-28 | Cisco Technology, Inc. | Business vocabulary data storage using multiple inter-related hierarchies |
US7103607B1 (en) | 2000-11-20 | 2006-09-05 | Cisco Technology, Inc. | Business vocabulary data retrieval using alternative forms |
US7062705B1 (en) | 2000-11-20 | 2006-06-13 | Cisco Technology, Inc. | Techniques for forming electronic documents comprising multiple information types |
US7139973B1 (en) | 2000-11-20 | 2006-11-21 | Cisco Technology, Inc. | Dynamic information object cache approach useful in a vocabulary retrieval system |
US7890514B1 (en) | 2001-05-07 | 2011-02-15 | Ixreveal, Inc. | Concept-based searching of unstructured objects |
USRE46973E1 (en) | 2001-05-07 | 2018-07-31 | Ureveal, Inc. | Method, system, and computer program product for concept-based multi-dimensional analysis of unstructured information |
US7194483B1 (en) | 2001-05-07 | 2007-03-20 | Intelligenxia, Inc. | Method, system, and computer program product for concept-based multi-dimensional analysis of unstructured information |
US7627588B1 (en) | 2001-05-07 | 2009-12-01 | Ixreveal, Inc. | System and method for concept based analysis of unstructured data |
US7831559B1 (en) | 2001-05-07 | 2010-11-09 | Ixreveal, Inc. | Concept-based trends and exceptions tracking |
US6970881B1 (en) | 2001-05-07 | 2005-11-29 | Intelligenxia, Inc. | Concept-based method and system for dynamically analyzing unstructured information |
US7536413B1 (en) | 2001-05-07 | 2009-05-19 | Ixreveal, Inc. | Concept-based categorization of unstructured objects |
US20050234889A1 (en) * | 2001-05-25 | 2005-10-20 | Joshua Fox | Method and system for federated querying of data sources |
US7930293B2 (en) | 2001-05-25 | 2011-04-19 | International Business Machines Corporation | Run-time architecture for enterprise integration with transformation generation |
US20050240606A1 (en) * | 2001-05-25 | 2005-10-27 | Joseph Edelstein | Data query and location through a central ontology model |
US7877421B2 (en) | 2001-05-25 | 2011-01-25 | International Business Machines Corporation | Method and system for mapping enterprise data assets to a semantic information model |
US20050149484A1 (en) * | 2001-05-25 | 2005-07-07 | Joshua Fox | Run-time architecture for enterprise integration with transformation generation |
US20060064666A1 (en) * | 2001-05-25 | 2006-03-23 | Amaru Ruth M | Business rules for configurable metamodels and enterprise impact analysis |
US7921098B2 (en) | 2001-05-25 | 2011-04-05 | International Business Machines Corporation | Data query and location through a central ontology model |
US20080313232A1 (en) * | 2001-05-25 | 2008-12-18 | International Business Machines Corporation | Data Query and Location Through a Central Ontology Model |
US20060156253A1 (en) * | 2001-05-25 | 2006-07-13 | Schreiber Marcel Z | Instance browser for ontology |
US7962503B2 (en) | 2001-05-25 | 2011-06-14 | International Business Machines Corporation | Data query and location through a central ontology model |
US8060531B2 (en) | 2001-05-25 | 2011-11-15 | International Business Machines Corporation | Data query and location through a central ontology model |
US20040093344A1 (en) * | 2001-05-25 | 2004-05-13 | Ben Berger | Method and system for mapping enterprise data assets to a semantic information model |
US8412746B2 (en) | 2001-05-25 | 2013-04-02 | International Business Machines Corporation | Method and system for federated querying of data sources |
US8548938B2 (en) | 2001-05-25 | 2013-10-01 | International Business Machines Corporation | Business rules for configurable metamodels and enterprise impact analysis |
US20090077051A1 (en) * | 2001-05-25 | 2009-03-19 | International Business Machines Corporation | Data Query and Location Through a Central Ontology Model |
US6966031B1 (en) * | 2001-07-10 | 2005-11-15 | Hai Shum | Method of organizing and accessing Chinese words |
US7627558B2 (en) | 2001-07-20 | 2009-12-01 | Vignette Software, LLC | Information retrieval from a collection of information objects tagged with hierarchical keywords |
US20100077000A1 (en) * | 2001-07-20 | 2010-03-25 | Kommers Jefferson M | Information retrieval from a collection of information objects tagged with hierarchial keywords |
US20060020591A1 (en) * | 2001-07-20 | 2006-01-26 | Kommers Jefferson M | Information retrieval from a collection of information objects tagged with hierarchical keywords |
US7028024B1 (en) * | 2001-07-20 | 2006-04-11 | Vignette Corporation | Information retrieval from a collection of information objects tagged with hierarchical keywords |
US10303807B2 (en) | 2001-07-20 | 2019-05-28 | Open Text Sa Ulc | Information retrieval from a collection of information objects tagged with hierarchical keywords |
US8301642B2 (en) | 2001-07-20 | 2012-10-30 | Open Text, S.A. | Information retrieval from a collection of information objects tagged with hierarchical keywords |
US8249885B2 (en) * | 2001-08-08 | 2012-08-21 | Gary Charles Berkowitz | Knowledge-based e-catalog procurement system and method |
US20030061122A1 (en) * | 2001-08-08 | 2003-03-27 | Berkowitz Gary Charles | Knowledge-based e-catalog procurement system and method |
US20030069880A1 (en) * | 2001-09-24 | 2003-04-10 | Ask Jeeves, Inc. | Natural language query processing |
US7403938B2 (en) | 2001-09-24 | 2008-07-22 | Iac Search & Media, Inc. | Natural language query processing |
US7917497B2 (en) | 2001-09-24 | 2011-03-29 | Iac Search & Media, Inc. | Natural language query processing |
US20080263019A1 (en) * | 2001-09-24 | 2008-10-23 | Iac Search & Media, Inc. | Natural language query processing |
US8589413B1 (en) | 2002-03-01 | 2013-11-19 | Ixreveal, Inc. | Concept-based method and system for dynamically analyzing results from search engines |
US20030227487A1 (en) * | 2002-06-01 | 2003-12-11 | Hugh Harlan M. | Method and apparatus for creating and accessing associative data structures under a shared model of categories, rules, triggers and data relationship permissions |
US20040093331A1 (en) * | 2002-09-20 | 2004-05-13 | Board Of Regents, University Of Texas System | Computer program products, systems and methods for information discovery and relational analyses |
US20040111254A1 (en) * | 2002-12-05 | 2004-06-10 | International Business Machines Corporation | User defined text NLS enablement |
US9754038B2 (en) | 2003-02-05 | 2017-09-05 | Open Text Sa Ulc | Individually deployable managed objects and system and method for managing the same |
US7991788B2 (en) | 2003-03-27 | 2011-08-02 | International Business Machines Corporation | Abstract data model filters |
US20040193568A1 (en) * | 2003-03-27 | 2004-09-30 | International Business Machines Corporation | Abstract data model filters |
US20060277091A1 (en) * | 2003-04-02 | 2006-12-07 | Kochikar Vivekanand P | Automated method for quantitative measurement of benefits in a plurality of self-assessing, knowledge sharing communities |
US8271259B2 (en) | 2003-04-09 | 2012-09-18 | Gary Charles Berkowitz | Virtual supercomputer |
US20110004566A1 (en) * | 2003-04-09 | 2011-01-06 | Gary Charles Berkowitz | Virtual Supercomputer |
US20040254916A1 (en) * | 2003-06-12 | 2004-12-16 | International Business Machines Corporation | Data query schema based on conceptual context |
US20040260534A1 (en) * | 2003-06-19 | 2004-12-23 | Pak Wai H. | Intelligent data search |
US7409336B2 (en) * | 2003-06-19 | 2008-08-05 | Siebel Systems, Inc. | Method and system for searching data based on identified subset of categories and relevance-scored text representation-category combinations |
US8554571B1 (en) | 2003-07-11 | 2013-10-08 | Search And Social Media Partners Llc | Fundraising system, method and device for charitable causes in a social network environment |
US8583448B1 (en) | 2003-07-11 | 2013-11-12 | Search And Social Media Partners Llc | Method and system for verifying websites and providing enhanced search engine services |
US7599938B1 (en) | 2003-07-11 | 2009-10-06 | Harrison Jr Shelton E | Social news gathering, prioritizing, tagging, searching, and syndication method |
US8719176B1 (en) | 2003-07-11 | 2014-05-06 | Search And Social Media Partners Llc | Social news gathering, prioritizing, tagging, searching and syndication |
US8620828B1 (en) | 2003-07-11 | 2013-12-31 | Search And Social Media Partners Llc | Social networking system, method and device |
US7287029B1 (en) * | 2003-09-25 | 2007-10-23 | Adobe Systems Incorporated | Tagging data assets |
WO2005052719A3 (en) * | 2003-11-25 | 2006-09-14 | Looptv | Method and system for speeding up data |
WO2005052719A2 (en) * | 2003-11-25 | 2005-06-09 | Looptv | Method and system for speeding up data |
US20090019395A1 (en) * | 2003-11-25 | 2009-01-15 | Looptv | Method and System Speeding up Data Input to a Communication System |
US8261208B2 (en) | 2003-11-25 | 2012-09-04 | Looptv | Method and system speeding up data input to a communication system |
US8706686B2 (en) * | 2003-12-24 | 2014-04-22 | Split-Vision Kennis B.V. | Method, computer system, computer program and computer program product for storage and retrieval of data files in a data storage means |
US20050198077A1 (en) * | 2003-12-24 | 2005-09-08 | Van Der Heijden Antonius Nicolaas A. | Method, computer system, computer program and computer program product for storage and retrieval of data files in a data storage means |
US20080048855A1 (en) * | 2004-05-07 | 2008-02-28 | Berger J L | Medical implant device with RFID tag and method of identification of device |
US20100191763A1 (en) * | 2004-06-22 | 2010-07-29 | Yuh-Cherng Wu | Request-Based Knowledge Acquisition |
US8122003B2 (en) * | 2004-06-22 | 2012-02-21 | Sap Ag | Request-based knowledge acquisition |
US11776084B2 (en) | 2004-08-10 | 2023-10-03 | Lucid Patent Llc | Patent mapping |
US20060036451A1 (en) * | 2004-08-10 | 2006-02-16 | Lundberg Steven W | Patent mapping |
US9697577B2 (en) | 2004-08-10 | 2017-07-04 | Lucid Patent Llc | Patent mapping |
US11080807B2 (en) | 2004-08-10 | 2021-08-03 | Lucid Patent Llc | Patent mapping |
US7505989B2 (en) | 2004-09-03 | 2009-03-17 | Biowisdom Limited | System and method for creating customized ontologies |
US7493333B2 (en) | 2004-09-03 | 2009-02-17 | Biowisdom Limited | System and method for parsing and/or exporting data from one or more multi-relational ontologies |
US7496593B2 (en) | 2004-09-03 | 2009-02-24 | Biowisdom Limited | Creating a multi-relational ontology having a predetermined structure |
CN1755684B (en) * | 2004-09-30 | 2010-05-05 | 微软公司 | Query forced indexing |
US10810693B2 (en) | 2005-05-27 | 2020-10-20 | Black Hills Ip Holdings, Llc | Method and apparatus for cross-referencing important IP relationships |
US11798111B2 (en) | 2005-05-27 | 2023-10-24 | Black Hills Ip Holdings, Llc | Method and apparatus for cross-referencing important IP relationships |
US9201956B2 (en) * | 2005-07-27 | 2015-12-01 | Schwegman Lundberg & Woessner, P.A. | Patent mapping |
US8161025B2 (en) | 2005-07-27 | 2012-04-17 | Schwegman, Lundberg & Woessner, P.A. | Patent mapping |
US9659071B2 (en) | 2005-07-27 | 2017-05-23 | Schwegman Lundberg & Woessner, P.A. | Patent mapping |
US20120130993A1 (en) * | 2005-07-27 | 2012-05-24 | Schwegman Lundberg & Woessner, P.A. | Patent mapping |
US7783743B1 (en) * | 2005-09-23 | 2010-08-24 | Emc Corporation | Methods and apparatus for processing electronic mail-related data |
US7788251B2 (en) | 2005-10-11 | 2010-08-31 | Ixreveal, Inc. | System, method and computer program product for concept-based searching and analysis |
US20090077098A1 (en) * | 2005-12-22 | 2009-03-19 | Sendandsee Oy | Distribution of information in telecommunication systems |
US7676485B2 (en) | 2006-01-20 | 2010-03-09 | Ixreveal, Inc. | Method and computer program product for converting ontologies into concept semantic networks |
US20090300046A1 (en) * | 2008-05-29 | 2009-12-03 | Rania Abouyounes | Method and system for document classification based on document structure and written style |
US8082248B2 (en) | 2008-05-29 | 2011-12-20 | Rania Abouyounes | Method and system for document classification based on document structure and written style |
US20110106831A1 (en) * | 2008-05-30 | 2011-05-05 | Microsoft Corporation | Recommending queries when searching against keywords |
US9223851B2 (en) * | 2008-05-30 | 2015-12-29 | Microsoft Technology Licensing, Llc | Recommending queries when searching against keywords |
US11301810B2 (en) | 2008-10-23 | 2022-04-12 | Black Hills Ip Holdings, Llc | Patent mapping |
US10546273B2 (en) | 2008-10-23 | 2020-01-28 | Black Hills Ip Holdings, Llc | Patent mapping |
US20100146006A1 (en) * | 2008-12-08 | 2010-06-10 | Sajib Dasgupta | Information Extraction Across Multiple Expertise-Specific Subject Areas |
US8266164B2 (en) | 2008-12-08 | 2012-09-11 | International Business Machines Corporation | Information extraction across multiple expertise-specific subject areas |
US8533211B2 (en) | 2008-12-08 | 2013-09-10 | International Business Machines Corporation | Information extraction across multiple expertise-specific subject areas |
US9245243B2 (en) | 2009-04-14 | 2016-01-26 | Ureveal, Inc. | Concept-based analysis of structured and unstructured data using concept inheritance |
US20100318548A1 (en) * | 2009-06-16 | 2010-12-16 | Florian Alexander Mayr | Querying by Concept Classifications in an Electronic Data Record System |
US8930386B2 (en) * | 2009-06-16 | 2015-01-06 | Oracle International Corporation | Querying by semantically equivalent concepts in an electronic data record system |
US20100318549A1 (en) * | 2009-06-16 | 2010-12-16 | Florian Alexander Mayr | Querying by Semantically Equivalent Concepts in an Electronic Data Record System |
US8856104B2 (en) * | 2009-06-16 | 2014-10-07 | Oracle International Corporation | Querying by concept classifications in an electronic data record system |
US10382819B2 (en) * | 2010-08-16 | 2019-08-13 | S.I.Sv.El. Societa Italiana Per Lo Sviluppo Dell'elettronica S.P.A. | Method and apparatus for selecting at least one media item |
US9069843B2 (en) | 2010-09-30 | 2015-06-30 | International Business Machines Corporation | Iterative refinement of search results based on user feedback |
US9158836B2 (en) | 2010-09-30 | 2015-10-13 | International Business Machines Corporation | Iterative refinement of search results based on user feedback |
US10885078B2 (en) * | 2011-05-04 | 2021-01-05 | Black Hills Ip Holdings, Llc | Apparatus and method for automated and assisted patent claim mapping and expense planning |
US11714839B2 (en) | 2011-05-04 | 2023-08-01 | Black Hills Ip Holdings, Llc | Apparatus and method for automated and assisted patent claim mapping and expense planning |
US11714819B2 (en) | 2011-10-03 | 2023-08-01 | Black Hills Ip Holdings, Llc | Patent mapping |
US11775538B2 (en) | 2011-10-03 | 2023-10-03 | Black Hills Ip Holdings, Llc | Systems, methods and user interfaces in a patent management system |
US11803560B2 (en) | 2011-10-03 | 2023-10-31 | Black Hills Ip Holdings, Llc | Patent claim mapping |
US11256706B2 (en) | 2011-10-03 | 2022-02-22 | Black Hills Ip Holdings, Llc | System and method for patent and prior art analysis |
US10860657B2 (en) | 2011-10-03 | 2020-12-08 | Black Hills Ip Holdings, Llc | Patent mapping |
US11797546B2 (en) | 2011-10-03 | 2023-10-24 | Black Hills Ip Holdings, Llc | Patent mapping |
US11360988B2 (en) | 2011-10-03 | 2022-06-14 | Black Hills Ip Holdings, Llc | Systems, methods and user interfaces in a patent management system |
US11048709B2 (en) | 2011-10-03 | 2021-06-29 | Black Hills Ip Holdings, Llc | Patent mapping |
US11789954B2 (en) | 2011-10-03 | 2023-10-17 | Black Hills Ip Holdings, Llc | System and method for patent and prior art analysis |
US10614082B2 (en) | 2011-10-03 | 2020-04-07 | Black Hills Ip Holdings, Llc | Patent mapping |
US11461862B2 (en) | 2012-08-20 | 2022-10-04 | Black Hills Ip Holdings, Llc | Analytics generation for patent portfolio management |
US9952860B2 (en) | 2013-03-13 | 2018-04-24 | Veriscape, Inc. | Dynamic memory management for a virtual supercomputer |
US20140297283A1 (en) * | 2013-04-02 | 2014-10-02 | Nuance Communications, Inc. | Concept Cloud in Smart Phone Applications |
US9607617B2 (en) * | 2013-04-02 | 2017-03-28 | Nuance Communications, Inc. | Concept cloud in smart phone applications |
US11354344B2 (en) | 2013-04-23 | 2022-06-07 | Black Hills Ip Holdings, Llc | Patent claim scope evaluator |
US10579662B2 (en) | 2013-04-23 | 2020-03-03 | Black Hills Ip Holdings, Llc | Patent claim scope evaluator |
Similar Documents
Publication | Publication Date | Title |
---|---|---|
US6327593B1 (en) | Automated system and method for capturing and managing user knowledge within a search system | |
US6453312B1 (en) | System and method for developing a selectably-expandable concept-based search | |
US5696916A (en) | Information storage and retrieval system and display method therefor | |
US5418950A (en) | System for interactive clause window construction of SQL queries | |
US7370273B2 (en) | System and method for creating dynamic folder hierarchies | |
US5499359A (en) | Methods for improved referential integrity in a relational database management system | |
JP3842573B2 (en) | Structured document search method, structured document management apparatus and program | |
US8356029B2 (en) | Method and system for reconstruction of object model data in a relational database | |
US8510330B2 (en) | Configurable search graphical user interface and engine | |
US6484161B1 (en) | Method and system for performing online data queries in a distributed computer system | |
US6618727B1 (en) | System and method for performing similarity searching | |
JP3053153B2 (en) | How to start application of document management system | |
US20030061209A1 (en) | Computer user interface tool for navigation of data stored in directed graphs | |
US9501474B2 (en) | Enhanced use of tags when storing relationship information of enterprise objects | |
WO2002039320A1 (en) | Method for structuring and searching information | |
JP2002297605A (en) | Method and device for structured document retrieval, and program | |
US20230071438A1 (en) | System and method for utilizing search trees and tagging data items for data collection managing tasks | |
US5752016A (en) | Method and apparatus for database interrogation using a user-defined table | |
US20080082493A1 (en) | Apparatus and method for receiving a report | |
GB2260007A (en) | Information storage/retrieval system and display method | |
US7698651B2 (en) | Heuristic knowledge portal | |
US7475059B2 (en) | Adapting business objects for searches and searching adapted business objects | |
EP1367503A1 (en) | Method for displaying and modifying a relational database schema | |
JP3842572B2 (en) | Structured document management method, structured document management apparatus and program | |
JPH11282882A (en) | Document management method |
Legal Events
Date | Code | Title | Description |
---|---|---|---|
AS | Assignment |
Owner name: UNISYS CORPORATION, MINNESOTAFree format text: ASSIGNMENT OF ASSIGNORS INTEREST;ASSIGNOR:GOIFFON, DAVID A.;REEL/FRAME:009680/0088Effective date: 19981223 |
|
FEPP | Fee payment procedure |
Free format text: PAYOR NUMBER ASSIGNED (ORIGINAL EVENT CODE: ASPN); ENTITY STATUS OF PATENT OWNER: LARGE ENTITY |
|
STCF | Information on status: patent grant |
Free format text: PATENTED CASE |
|
FPAY | Fee payment |
Year of fee payment: 4 |
|
FPAY | Fee payment |
Year of fee payment: 8 |
|
AS | Assignment |
Owner name: UNISYS CORPORATION, PENNSYLVANIAFree format text: RELEASE BY SECURED PARTY;ASSIGNOR:CITIBANK, N.A.;REEL/FRAME:023312/0044Effective date: 20090601Owner name: UNISYS HOLDING CORPORATION, DELAWAREFree format text: RELEASE BY SECURED PARTY;ASSIGNOR:CITIBANK, N.A.;REEL/FRAME:023312/0044Effective date: 20090601Owner name: UNISYS CORPORATION,PENNSYLVANIAFree format text: RELEASE BY SECURED PARTY;ASSIGNOR:CITIBANK, N.A.;REEL/FRAME:023312/0044Effective date: 20090601Owner name: UNISYS HOLDING CORPORATION,DELAWAREFree format text: RELEASE BY SECURED PARTY;ASSIGNOR:CITIBANK, N.A.;REEL/FRAME:023312/0044Effective date: 20090601 |
|
AS | Assignment |
Owner name: UNISYS CORPORATION, PENNSYLVANIAFree format text: RELEASE BY SECURED PARTY;ASSIGNOR:CITIBANK, N.A.;REEL/FRAME:023263/0631Effective date: 20090601Owner name: UNISYS HOLDING CORPORATION, DELAWAREFree format text: RELEASE BY SECURED PARTY;ASSIGNOR:CITIBANK, N.A.;REEL/FRAME:023263/0631Effective date: 20090601Owner name: UNISYS CORPORATION,PENNSYLVANIAFree format text: RELEASE BY SECURED PARTY;ASSIGNOR:CITIBANK, N.A.;REEL/FRAME:023263/0631Effective date: 20090601Owner name: UNISYS HOLDING CORPORATION,DELAWAREFree format text: RELEASE BY SECURED PARTY;ASSIGNOR:CITIBANK, N.A.;REEL/FRAME:023263/0631Effective date: 20090601 |
|
AS | Assignment |
Owner name: DEUTSCHE BANK TRUST COMPANY AMERICAS, AS COLLATERAFree format text: PATENT SECURITY AGREEMENT (PRIORITY LIEN);ASSIGNOR:UNISYS CORPORATION;REEL/FRAME:023355/0001Effective date: 20090731 |
|
AS | Assignment |
Owner name: DEUTSCHE BANK TRUST COMPANY AMERICAS, AS COLLATERAFree format text: PATENT SECURITY AGREEMENT (JUNIOR LIEN);ASSIGNOR:UNISYS CORPORATION;REEL/FRAME:023364/0098Effective date: 20090731 |
|
AS | Assignment |
Owner name: GENERAL ELECTRIC CAPITAL CORPORATION, AS AGENT, ILFree format text: SECURITY AGREEMENT;ASSIGNOR:UNISYS CORPORATION;REEL/FRAME:026509/0001Effective date: 20110623 |
|
AS | Assignment |
Owner name: UNISYS CORPORATION, PENNSYLVANIAFree format text: RELEASE BY SECURED PARTY;ASSIGNOR:DEUTSCHE BANK TRUST COMPANY AMERICAS;REEL/FRAME:027784/0777Effective date: 20120229Owner name: UNISYS CORPORATION, PENNSYLVANIAFree format text: RELEASE BY SECURED PARTY;ASSIGNOR:DEUTSCHE BANK TRUST COMPANY AMERICAS;REEL/FRAME:027784/0530Effective date: 20120229Owner name: UNISYS CORPORATION, PENNSYLVANIAFree format text: RELEASE BY SECURED PARTY;ASSIGNOR:DEUTSCHE BANK TRUST COMPANY AMERICAS;REEL/FRAME:027784/0701Effective date: 20120229 |
|
AS | Assignment |
Owner name: GOOGLE INC., CALIFORNIAFree format text: ASSIGNMENT OF ASSIGNORS INTEREST;ASSIGNOR:UNISYS CORPORATION;REEL/FRAME:028060/0908Effective date: 20120229 |
|
FEPP | Fee payment procedure |
Free format text: PAYOR NUMBER ASSIGNED (ORIGINAL EVENT CODE: ASPN); ENTITY STATUS OF PATENT OWNER: LARGE ENTITYFree format text: PAYER NUMBER DE-ASSIGNED (ORIGINAL EVENT CODE: RMPN); ENTITY STATUS OF PATENT OWNER: LARGE ENTITY |
|
FPAY | Fee payment |
Year of fee payment: 12 |
|
AS | Assignment |
Owner name: GOOGLE LLC, CALIFORNIAFree format text: CHANGE OF NAME;ASSIGNOR:GOOGLE INC.;REEL/FRAME:044127/0735Effective date: 20170929 |
|
AS | Assignment |
Owner name: UNISYS CORPORATION, PENNSYLVANIAFree format text: RELEASE BY SECURED PARTY;ASSIGNOR:WELLS FARGO BANK, NATIONAL ASSOCIATION (SUCCESSOR TO GENERAL ELECTRIC CAPITAL CORPORATION);REEL/FRAME:044416/0358Effective date: 20171005 |