US8239515B2 - Parallel data transfer over multiple channels with data order prioritization - Google Patents
Parallel data transfer over multiple channels with data order prioritization Download PDFInfo
- Publication number
- US8239515B2 US8239515B2 US13/346,110 US201213346110A US8239515B2 US 8239515 B2 US8239515 B2 US 8239515B2 US 201213346110 A US201213346110 A US 201213346110A US 8239515 B2 US8239515 B2 US 8239515B2
- Authority
- US
- United States
- Prior art keywords
- data
- download
- file
- source
- parallel
- Prior art date
- Legal status (The legal status is an assumption and is not a legal conclusion. Google has not performed a legal analysis and makes no representation as to the accuracy of the status listed.)
- Expired - Lifetime
Links
- 238000012913 prioritisation Methods 0.000 title claims abstract description 38
- 238000012546 transfer Methods 0.000 title claims description 44
- 230000008439 repair process Effects 0.000 claims description 35
- 238000000034 method Methods 0.000 claims description 21
- 238000004891 communication Methods 0.000 claims description 17
- 238000012545 processing Methods 0.000 claims description 7
- 235000008694 Humulus lupulus Nutrition 0.000 claims description 2
- 238000012795 verification Methods 0.000 description 18
- 238000013459 approach Methods 0.000 description 16
- 238000005457 optimization Methods 0.000 description 8
- 230000008569 process Effects 0.000 description 8
- 230000008859 change Effects 0.000 description 5
- 238000005516 engineering process Methods 0.000 description 5
- 230000006870 function Effects 0.000 description 5
- 230000007246 mechanism Effects 0.000 description 5
- 238000010586 diagram Methods 0.000 description 4
- 238000009499 grossing Methods 0.000 description 4
- 230000006399 behavior Effects 0.000 description 3
- 230000008901 benefit Effects 0.000 description 3
- 230000006835 compression Effects 0.000 description 3
- 238000007906 compression Methods 0.000 description 3
- 230000000750 progressive effect Effects 0.000 description 3
- 230000005540 biological transmission Effects 0.000 description 2
- 230000002085 persistent effect Effects 0.000 description 2
- 230000004044 response Effects 0.000 description 2
- 230000002411 adverse Effects 0.000 description 1
- 230000003466 anti-cipated effect Effects 0.000 description 1
- 239000000872 buffer Substances 0.000 description 1
- 238000012937 correction Methods 0.000 description 1
- 238000013500 data storage Methods 0.000 description 1
- 230000003247 decreasing effect Effects 0.000 description 1
- 230000000694 effects Effects 0.000 description 1
- 238000004880 explosion Methods 0.000 description 1
- 239000000835 fiber Substances 0.000 description 1
- 230000006872 improvement Effects 0.000 description 1
- 238000007726 management method Methods 0.000 description 1
- 230000006855 networking Effects 0.000 description 1
Images
Classifications
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04L—TRANSMISSION OF DIGITAL INFORMATION, e.g. TELEGRAPHIC COMMUNICATION
- H04L67/00—Network arrangements or protocols for supporting network services or applications
- H04L67/01—Protocols
- H04L67/10—Protocols in which an application is distributed across nodes in the network
- H04L67/104—Peer-to-peer [P2P] networks
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04L—TRANSMISSION OF DIGITAL INFORMATION, e.g. TELEGRAPHIC COMMUNICATION
- H04L65/00—Network arrangements, protocols or services for supporting real-time applications in data packet communication
- H04L65/60—Network streaming of media packets
- H04L65/75—Media network packet handling
- H04L65/752—Media network packet handling adapting media to network capabilities
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04L—TRANSMISSION OF DIGITAL INFORMATION, e.g. TELEGRAPHIC COMMUNICATION
- H04L65/00—Network arrangements, protocols or services for supporting real-time applications in data packet communication
- H04L65/80—Responding to QoS
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04L—TRANSMISSION OF DIGITAL INFORMATION, e.g. TELEGRAPHIC COMMUNICATION
- H04L67/00—Network arrangements or protocols for supporting network services or applications
- H04L67/01—Protocols
- H04L67/10—Protocols in which an application is distributed across nodes in the network
- H04L67/1001—Protocols in which an application is distributed across nodes in the network for accessing one among a plurality of replicated servers
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04L—TRANSMISSION OF DIGITAL INFORMATION, e.g. TELEGRAPHIC COMMUNICATION
- H04L67/00—Network arrangements or protocols for supporting network services or applications
- H04L67/01—Protocols
- H04L67/10—Protocols in which an application is distributed across nodes in the network
- H04L67/1001—Protocols in which an application is distributed across nodes in the network for accessing one among a plurality of replicated servers
- H04L67/1004—Server selection for load balancing
- H04L67/1008—Server selection for load balancing based on parameters of servers, e.g. available memory or workload
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04L—TRANSMISSION OF DIGITAL INFORMATION, e.g. TELEGRAPHIC COMMUNICATION
- H04L67/00—Network arrangements or protocols for supporting network services or applications
- H04L67/01—Protocols
- H04L67/10—Protocols in which an application is distributed across nodes in the network
- H04L67/1001—Protocols in which an application is distributed across nodes in the network for accessing one among a plurality of replicated servers
- H04L67/1004—Server selection for load balancing
- H04L67/101—Server selection for load balancing based on network conditions
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04L—TRANSMISSION OF DIGITAL INFORMATION, e.g. TELEGRAPHIC COMMUNICATION
- H04L67/00—Network arrangements or protocols for supporting network services or applications
- H04L67/01—Protocols
- H04L67/10—Protocols in which an application is distributed across nodes in the network
- H04L67/1001—Protocols in which an application is distributed across nodes in the network for accessing one among a plurality of replicated servers
- H04L67/1004—Server selection for load balancing
- H04L67/1021—Server selection for load balancing based on client or server locations
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04L—TRANSMISSION OF DIGITAL INFORMATION, e.g. TELEGRAPHIC COMMUNICATION
- H04L67/00—Network arrangements or protocols for supporting network services or applications
- H04L67/01—Protocols
- H04L67/10—Protocols in which an application is distributed across nodes in the network
- H04L67/1001—Protocols in which an application is distributed across nodes in the network for accessing one among a plurality of replicated servers
- H04L67/1004—Server selection for load balancing
- H04L67/1023—Server selection for load balancing based on a hash applied to IP addresses or costs
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04L—TRANSMISSION OF DIGITAL INFORMATION, e.g. TELEGRAPHIC COMMUNICATION
- H04L67/00—Network arrangements or protocols for supporting network services or applications
- H04L67/50—Network services
- H04L67/60—Scheduling or organising the servicing of application requests, e.g. requests for application data transmissions using the analysis and optimisation of the required network resources
- H04L67/62—Establishing a time schedule for servicing the requests
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04L—TRANSMISSION OF DIGITAL INFORMATION, e.g. TELEGRAPHIC COMMUNICATION
- H04L9/00—Cryptographic mechanisms or cryptographic arrangements for secret or secure communications; Network security protocols
- H04L9/40—Network security protocols
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04L—TRANSMISSION OF DIGITAL INFORMATION, e.g. TELEGRAPHIC COMMUNICATION
- H04L65/00—Network arrangements, protocols or services for supporting real-time applications in data packet communication
- H04L65/60—Network streaming of media packets
- H04L65/61—Network streaming of media packets for supporting one-way streaming services, e.g. Internet radio
- H04L65/612—Network streaming of media packets for supporting one-way streaming services, e.g. Internet radio for unicast
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04L—TRANSMISSION OF DIGITAL INFORMATION, e.g. TELEGRAPHIC COMMUNICATION
- H04L67/00—Network arrangements or protocols for supporting network services or applications
- H04L67/01—Protocols
- H04L67/10—Protocols in which an application is distributed across nodes in the network
- H04L67/104—Peer-to-peer [P2P] networks
- H04L67/1074—Peer-to-peer [P2P] networks for supporting data block transmission mechanisms
- H04L67/1078—Resource delivery mechanisms
- H04L67/1085—Resource delivery mechanisms involving dynamic management of active down- or uploading connections
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04L—TRANSMISSION OF DIGITAL INFORMATION, e.g. TELEGRAPHIC COMMUNICATION
- H04L69/00—Network arrangements, protocols or services independent of the application payload and not provided for in the other groups of this subclass
- H04L69/14—Multichannel or multilink protocols
Definitions
- the invention relates to computer networks and, in particular, to the transfer of data over computer networks.
- FIG. 1 is a graph illustrating typical file sizes for different types of files.
- FIG. 2 is a diagram illustrating parallel data transfer over multiple channels.
- FIG. 3 is a diagram illustrating the manner in which transfer rates are increased by using multiple channels.
- FIG. 4 is a block diagram illustrating an exemplary software architecture for implementing the principles of the invention.
- FIG. 5 is a flow diagram illustrating techniques for prioritizing data for transferring data over multiple channels.
- the invention is directed to techniques for transferring data over multiple channels in parallel, possibly from multiple servers. This allows the bandwidth from the various sources to be aggregated to provide a very fast download.
- a file may be split into multiple pieces across the N servers, e.g., four servers, and may be transferred from all of them in parallel.
- the total transfer rate is 360 KB/s.
- the delivered file may be split up in a number of ways to deliver it from multiple servers in parallel.
- One approach for example, is to split the file into a number of fixed-sized blocks and transfer one block from each server. For example, as illustrated in FIG. 2 , four servers may be utilized, and a 20 MB file may be split into 4 pieces. Thus, each server may transfer 5 MB of data to the receiver. However, an individual server may be slow or unavailable, and thus would adversely affect the download speed.
- An enhancement to the first approach is to split the file into N pieces (P 1 , P 2 , . . . , Pn).
- the receiver would request P 1 from server 1 , P 2 from server 2 , P 3 from server 3 , and P 4 from server 4 . Once one of those pieces is received, the receiver will request the next desired piece from the available server.
- One of the unique attributes of the invention is that it allows prioritization of the order in which data is received during a parallel data transfer.
- Two common ways in which data is accessed within a file is either “sequential” or “random access” order.
- Most network protocols such as http and FTP, transfer data in sequential order whereby the first byte of the file is received first, the second byte is received second, etc until the end of the file is reached.
- Most network-aware applications such as web browsers and computer video and audio players, expect content to be received in sequential order and can actually play back content while it is being downloaded if the data is provided to the media player in sequential order.
- TCP contains features to provide reliable transfer of data by acknowledging the receipt of data packets back to the sender.
- FTP Long, Fat Networks
- LFNs Long Fat Networks
- Long Fat Networks include high speed intercontinental networks and satellite-based networks.
- TCP's buffers are not large enough to fill the capacity of a LFN, often only providing 10% of the possible speed available over a long fat network.
- Parallel data transfer can also be used to improve this situation.
- this scenario there is a single server and a single client, but multiple “channels” are established over the route between client and server.
- transfer rates up to 10 ⁇ faster than normal http or FTP can be achieved, as illustrated by FIG. 3 .
- the invention provides reliable, high throughput, and low latency data transfer by downloading data from multiple sources or channels in parallel.
- the software is optimized for both very large and very small content and is uniquely designed to provide high-speed parallel streaming.
- the invention provides reliable downloads even when the sources have poor connectivity, and is thus ideal for distributing data over unreliable networks such as wireless networks or peer-to-peer networks.
- FIG. 4 illustrates one exemplary software architecture for implementing the principles of the invention. More specifically, the software architecture includes a number of cooperating software modules.
- a channel is any communication path along which information can be transferred.
- a bit is the most basic unit of information, but the invention can work equally well with any unit of information, such as a word, or a megabyte. It is anticipated that for the purposes of the invention, a byte or eight bits will be the basic unit.
- Channels may be provided by various networking protocols such as FTP, HTTP, or a peer-to-peer application speaking a custom protocol.
- Channels could also include data coming from a CD-ROM, hard disk storage, or temporary cache storage. Additional examples of channels could include wireless networks or high-speed interconnects such as USB, Firewire, or Fiber Channel.
- URI Uniform Resource Indicator
- URLs Examples of URLs include (http://microsoft.com/) and (ftp://ftp.cdrom.com/) which use the HTTP and FTP protocols respectively to connect to channels and retrieve content.
- the invention allows any number of channels to be opened to any combination of sources.
- the invention will utilize multiple simultaneous channels to a single source.
- multiple channels may be opened to multiple sources.
- two channels to a single source may also take different routes, thus making the characteristics of each channel different even though they may share the same protocol and source.
- Channel Adapters are employed to translate encoded information from the format used to transfer it across the channel to the format desired for the download.
- Examples of channel encodings would include encryption, compression, parity or error correction coding, and delta or difference encoding.
- the invention can receive data over a compressed channel where the transport protocol supports compression. There would then be a channel adapter that automatically decompresses the encoded content and provides the Channel Receiver with the content in uncompressed form.
- the invention would receive data over an encrypted channel using a protocol such as the Secure Sockets Layer (SSL) or Transport Layer Security (TLS). There would then be a channel adapter that automatically decrypts the content and provides the Channel Receiver with the content in unencrypted form. Integrity checking can also be performed within the Channel Adapters. An integrity checking error at this level will be signaled as a transport level error and the bytes that were detected to be corrupt will be thrown out and the channel will close with an error.
- SSL Secure Sockets Layer
- TLS Transport Layer Security
- channel adapters when retrieving encoded content.
- a non-limiting example of this would be a video file wrapped in a Digital Rights Management encryption layer that is decoded by an external media player process.
- bandwidth throttling services Another service that can be added at the Channel Adapter layer is bandwidth throttling services.
- Various bandwidth throttling policies can be employed so that downloads from certain sources are throttled, or certain combinations of sources are throttled, or the overall download rate is throttled, or aggregate rate across multiple downloaders is throttled.
- One such policy is to prefer to download from sources with a cheaper bandwidth cost and if those sources are available, throttle the more expensive sources so that fewer bytes are retrieved from them.
- the invention also implements Channel Adapters such that multiple adapters may be combined together so that multiple decodings may be performed on the incoming data on a single channel, such as both decrypting and decompressing content.
- the control interface allows external applications or users to control the behavior of the parallel download system.
- the control interface provides a number of features:
- the control interface also allows control over the persistent data storage. If the storage is a regular computer file system, a destination file can be specified ahead of time or the destination can be set during the download.
- the output stream is a special channel that provides the downloaded data to an external application or user.
- the output stream makes data available as soon as that data has been verified by the integrity verifiers. Normally the output stream will deliver data in a sequential fashion, though it can also provide data in a random access fashion.
- the mode by which the output stream is accessed can directly affect the data prioritization by having the output stream notify the Prioritization Engine about which bytes are the highest priority.
- the output stream may deliver data to multiple consuming applications or users.
- one consumer may be a media player that is watching a video file being downloaded, while the data may be simultaneously streamed to hard disk storage for later playback.
- the output stream itself is a data channel, it can be used as a source for other parallel streaming downloads that are taking place, either on the same computer, or on other computers.
- this is a peer-to-peer network transfer which provides the very novel concept of a peer-to-peer network with parallel streaming downloads.
- the invention can also be used to enhance the functionality and performance of swarming download systems including those embodied by the Apparatus, Method and System for an Acknowledgement Independent Equalized Data Packet Transfer Mechanism over a Peer to Peer Network for which a non-provisional patent application was filed on Dec. 28, 2001 with the application Ser. No. 10/033,305.
- the source scheduler has the important job of scheduling which sources will be downloaded from at a given time.
- the source scheduler keeps track of various information about each channel source and uses that information to decide which sources to download from. As connections are made to the sources and data is downloaded, the channel scheduler will monitor this activity and record various information about the source such as the latency to the source, or how long it takes to receive data, and the current transfer rate from that source.
- the first step in the source scheduler is to rank the channel sources.
- Various mechanisms may be used to rank the sources. These mechanisms may include:
- the ranking mechanisms can also be combined with any sort of relative weighting between the metrics.
- One common way to combine metrics with weighting is to use a polynomial with the variables as the metric and the coefficients used as the relative weighting. It is also possible to change the weighting of the various metrics based on external factors, such as the time of day. For instance, during critical business hours, it may be desirable to retrieve data from the fastest possible sources, while during the evening it may be desirable to minimize the cost of the data transfer.
- the basic strategy that the source scheduler employs is to assign channel sources to a number of source “slots”.
- the source scheduler is configured with an average number of slots it should maintain as well as a maximum number of slots.
- During a download channels are frequently opened and closed, often leaving slots available for other channels to fill.
- After a source has obtained a slot from the download scheduler, that source is given to the data prioritization scheduler to determine what bytes to download from that source.
- the Source Ranker When a source is initially added to the download engine, either at the beginning of the download, or as a new source during a download, there may not be any information available for the Source Ranker to make a decision about the desirability of that source. Since characteristics such as throughput and latency are often only discernable by downloading from the source for a while, the channel scheduler will give new sources a chance to immediately obtain a slot, up to the maximum number of slots.
- the Source Ranker Once enough information is available for the Source Ranker to properly evaluate the channel source, it is thereafter required to acquire one of the normal slots, of which there is a limited number that is less than the maximum number of slots. In general, as soon as a normal slot becomes available, the channel scheduler will choose the highest ranked available source and give the slot to that source. As soon as the source has been allocated a slot, it is denoted as no longer be available and is not eligible to obtain a new slot until it finishes its current transfer.
- a single physical source such as a web server, may be identified by multiple URIs which allows the invention to schedule multiple connections to a single physical source at the same time.
- Another non-limiting example would be to highly prefer nearby sources on a computer network such that if a nearby source is detected, the engine will only schedule from that source even though multiple source slots may be available.
- very high priority sources may utilize multiple slots, or fewer slots may become available if very desirable hosts are located.
- the channel scheduler can perform compensate for latency to a source by “pipe-lining” requests to a single source.
- the source scheduler may make a source available to be rescheduled slightly before it is finished with its current transfer. This allows the prioritization scheduler to reschedule the source and make a new connection before the current transfer completes. Ideally the new connection will be established exactly when the previous request is complete, thus avoiding wasting any time between transfers.
- the Channel Scheduler After the Channel Scheduler has chosen a source to fill a slot, that source is then passed on to the prioritization scheduler, which will decide what data is requested from the source and at what time.
- the prioritization scheduler tracks the latency and throughput of all channels at all times and dynamically adjusts its scheduling in order to maximize download performance while still prioritizing the order in which that data will be received.
- the first component in the prioritization scheduler is the data prioritizer, which determines the priority of the data to be scheduled.
- the data prioritizer specifies an ordering of data from the highest priority data to the lowest priority data.
- Two examples of policies for the data prioritizer are sequential prioritization and on-demand prioritization.
- Sequential prioritization is a simple and common prioritization where the first byte of the file has the highest priority, the second byte has the next highest, and so on until the last byte which has the lowest priority. For simplicity, most of this specification makes explicit reference to sequential or progressive prioritization, though the invention is not limited to these prioritizations.
- On-demand prioritization specifies an ordering that can change during the lifetime of the download.
- the highest priority data is that which external applications are attempting to access
- the next highest priority data is the next data the applications is expected to access.
- the lowest priority data is that which is expected to be accessed last.
- Another component that can drive the data prioritizer is the corruption repair engine. If the corruption repair engine detects corruption in previously downloaded bytes, it will specify that the prioritizer set a higher priority on the bytes that it is repairing rather than new bytes that are being downloaded.
- the data prioritizer may employ a prioritization scheme such as First Come First Serve, Last Come First Serve, Random, Shortest Processing Time First, Round Robin, or Shortest Remaining Processing Time First or any other flow scheduling algorithm.
- First Come First Serve the data set portions specified first get the highest priority.
- Last Come First Serve the data set portions specified most recently get the highest priority.
- Random the data set portions are chosen at random.
- Shortest Processing Time First the smallest, or cheapest to retrieve data set portions are given the highest priority.
- Round Robin scheme each data set portion is made the highest priority data in turn in order to ensure scheduling fairness.
- the Shortest Remaining Processing Time First scheme the data set portion with the least amount of data waiting to be received is given the highest priority.
- the data order prioritizer may also prioritize the data order based on high-level system or network optimization policies.
- An example of one such policy is for the data order prioritizer to give the data set portions that are available from only a few sources a higher priority than data set portions that are widely available.
- the prioritization scheduler schedules ranges of bytes to be downloaded.
- a range is essentially a run length encoding of a sequential list of bytes.
- a set of bytes can then be compactly represented as a range set which allows all normal mathematical set operations to be efficiently performed on the list of bytes.
- the invention may utilize range sets extensively in its implementation for any task that requires keeping track of a list of bytes. Examples of ranges and range sets are as follows:
- Ranges provide a very compact and natural way to describe scheduling of a content channel.
- Most modern network protocols such as HTTP and FTP support specifying a range of bytes that the receiver desires to download. For example, in HTTP, this is accomplished by using a special header as follows:
- the ranges scheduled by the prioritization scheduler do not necessarily need to correspond to a range of bytes at a given source. These ranges may correspond to data that is interleaved or otherwise encoded. In these cases, a range adapter is used to map the scheduled range onto the list of interleaved or encoded bytes that the source can interpret.
- Ranges also encompass fixed-size data packets or blocks of data as well. In the cases where this specification refers to a dynamically sized range of data, this also includes a dynamically calculated number of data packets or data blocks.
- the Proportional Allocator determines how much data will be transferred from the channel that is being scheduled. This amount of data will be proportional to the throughput that is expected to be received over the channel from the source currently being scheduled. If desired, this policy allows multiple channels transferring data in parallel to complete their transfers at roughly the same time. Thus, if there is a source A that has an expected throughput that is ten times faster than source B, the proportional allocator will allocate ten times more data to the schedule for source A. The proportion of data is also bounded by minimum and maximum values, or can be hard coded for a specific amount of data, making the amount of data received equal among all channels.
- the proportional allocator will use time intervals to determine the proportion of data to be downloaded.
- the proportional allocator chooses an interval T, and calculates how much data is expected to be received from the source being scheduled based off of its expected throughput and latency.
- This approach fairly allocates the amount of data among the sources without having to know the throughputs of all of the sources ahead of time.
- This approach also places a bound on the amount of time data is being received from a channel, allowing other sources an opportunity to be scheduled once the data has been received.
- the proportional allocator automatically responds to different transmission speeds, scaling to provide very low over head data transfer for high speed channels, while ensuring that low speed channels get tight interleaving between the channels and plenty of chances to reschedule channels.
- An enhancement to the interval-based approach is to dynamically change the interval based on the expected overall throughput across all channels. In this case, a given amount of data is scheduled to be allocated during the current interval. The time period T, is then set to be equal to the expected amount of time it will take to download that amount of data from all channels. This approach allows the interval-based allocator to ensure proportional allocation for each block of data within the file.
- proportion allocator Another approach to the proportion allocator is to allocate fixed size and usually small amounts of data to each source. Once the source has received most of the data it has scheduled and is ready to pipeline another request, it is allocated another fixed size amount of data. In this fashion, each source is scheduled proportional amounts of data, because the fast channels will request allocations at a proportionally higher frequency than slow channels. This approach is similar to what happens when the maximum packet size in the interval allocator is set to be very small relative to the size of the interval.
- the bulk scheduler After the proportion allocator has determined the amount of data to be received from the source, the bulk scheduler then determines which bytes will be scheduled. The bulk scheduler maintains a list of data that has yet to be scheduled, as well as a list of data that has already been scheduled, but has yet to be received from a channel. If available, the bulk scheduler will schedule the highest priority unscheduled bytes up to the amount of data specified by the proportional allocator. In some cases, this may be less than the allocated number of bytes, in which case the smaller amount of data is actually scheduled.
- the bulk scheduler will schedule high priority bytes that have been scheduled, but have not yet been downloaded. Also, if the range has already been scheduled, but is just being served by a slow downloader, then it downloads from the end of the undownloaded range, pre-empting some of the range that has already been scheduled for another source. Once the other source catches up to the preempting source, the download from the other source is canceled.
- the Bulk Scheduler preempts the download of another channel, it attempts to schedule the bytes to be downloaded such that the original source will catch up with the preempting source at the exact moment that the preempting source finishes its transfer.
- the advanced scheduler provides a number of optimizations over the bulk scheduler.
- the advanced scheduler integrates with the interval-based proportional allocator to allow data to be allocated during a different time interval than the current one. It then figures out how much time is left in the current cycle, then calculates the time needed to complete a range request by setting a minimum range size and incorporating the amount of time necessary to accommodate for the latency of making a new connection. If this download will not be able to be completed within the current cycle, it is scheduled to complete during the next cycle.
- the advanced scheduler features a sub-interval smoothing component that works to minimize the burstiness of the availability of high priority data with the interval-based allocator.
- the interval-based allocator With the interval-based allocator, one source is always going to be the bottleneck for the stream while the other sources provide data that is a bit lower priority.
- the already downloaded data is read in a burst until it catches up with the next bottleneck source. In this fashion the priority stream consumption goes from relatively slow consumption to very high consumption as the stream catches up with the already buffered data.
- the invention works to eliminate this burstiness as much as possible to enable the delivery of high priority data in as optimal an order as possible.
- the sub-interval smoothing works by intelligently interleaving the data from the multiple channels that will be delivering data during the interval. For a given set of data clusters, find the single data cluster that will take the longest amount of time to retrieve. Then locate any clusters that will take equal or less time to retrieve. If multiple clusters from the same source can combine to take less time than the initial cluster, then these multiple clusters will be combined together. Once all clusters have been allocated and found, the clusters are ordered by the fastest source to the slowest source. These clusters can be scheduled incrementally using historical ranking between sources. Thus if one source was the fastest in a previous schedule, it would be expected to be the fastest again in the next schedule and would be scheduled before other clusters in the next interval.
- a minimum cluster size may be dictated by latency and throughput to enable efficient pipelining of requests.
- the invention utilizes special optimizations to reduce the latency of delivering small objects.
- a key goal of the invention is to reduce inefficiency by not downloading redundant information.
- the minimized latency scheduler sacrifices some of this efficiency for lower latency by requesting the same range of information from many sources in parallel.
- this amount of information is a small bit of information from the front of the file such that if the total file size is less than that segment size, then the download will be complete as soon as the first channel responds back with data. If the file is larger than the segment size, then the initial request from the sources may introduce some redundant data, but more importantly the scheduler now has performance information on the sources and can use that to optimize the schedule.
- An additional optimization for the case when the file size is unknown is to have every other source request its data from a negative offset, which is from the end of the file, in order to minimize overlap in the case that the file is larger than the size of the blocks being requested from the hosts.
- a constraint scheduler is utilized to ensure that the scheduler does not attempt to retrieve data that the source or channel cannot provide.
- An example of the constraint scheduler utilizes a list of bytes that the source advertises that it has available. If some of the bytes that the scheduler is trying to schedule for that source are unavailable, the scheduler will choose lower-priority bytes that are available for the scheduler to download.
- Sources are not necessarily required to store an entire copy of the content. Sources may communicate back with the download scheduling engine about the ranges of bytes they have available, possibly using Run-Length Encoding to concisely describe those bytes. Other encodings may be used, including predetermined (or not predetermined) schedules or interleavings of bytes. The scheduling engine will then use the knowledge of which sources have which bytes to determine when to download content from various sources. The range of bytes provided by a given source may also change over time, so that fewer or greater bytes are available from that source. A source may also include a different version of the same file that shares some bytes in common with the version that is intended to be downloaded. These bytes need not correspond to the same byte position in each file and a decoder module would be used to translate between the bytes locations in the different versions of the file.
- the source is highly constrained in the data it can deliver, this can also negatively affect the source's ranking to the source scheduler.
- the prioritization scheduler chooses the range of bytes to be downloaded, it is the channel connector's job to establish a new channel to the scheduled source.
- the protocol spoken by the channel connector to the channel source is translated by the channel adapters.
- the channel connector will make a request to the source that contains the range or ranges of information that is scheduled to be downloaded.
- the time is then measured between when the channel requests the new range and when data starts being received. This time is the latency of the connection.
- it is common for the channel connector to receive meta-data about the file in response to the connection such as the file length, media type, and caching information.
- the Channel Connector verifies this data with the known meta-data for the file. If there are critical differences between the channel meta-data and the known file meta-data, such as a difference in the file size, then it is assumed that the channel has the incorrect file, or an incorrect version of the file, and the channel connection is then canceled.
- the channel connector will notify the source scheduler of the situation and the source schedule will attempt to another get a slot for the source, reschedule it, and retry the connection process.
- the source itself may choose to redirect the download request to another source.
- the channel connector automatically redirects the channel to the new source and continues the download just as if it had connected to the original source.
- the source may also be busy, or may not have available the content that the scheduler intends to receive. In this case, any information about the source such as the bytes that it has available for scheduling is reported back to the source scheduler and constraint scheduler which then attempt to reschedule that source for a later time or a better range of content.
- the channel receiver reads the data from the channel and writes it to the I/O dispatcher.
- the actual bytes given back by the channel will differ from the ones that are requested to be scheduled. In this case, if the bytes haven't already been received or are being used for corruption repair, the channel receiver will accept those bytes and write them to their proper locations. If the channel begins overwriting data that has already been downloaded, then the channel receiver may choose to cancel that transfer.
- the I/O dispatcher takes the bytes being written from all of the channel receivers and provides them to the integrity verifiers and provides the data to the data store for persistent storage.
- the integrity verifiers are used to ensure that the desired data is received intact and that none of the channels were providing data that is either corrupt or a different version of the content that is desired. Once some of the data has been verified, it is allowed to be accessed via the output stream. If the data is found to be corrupt, then the Corruption Repair engine is notified of this and will work to repair the corruption.
- a number of approaches is used to implement integrity verifiers, but the most common approach is to use cryptographic hash algorithms to verify that the content was received in tact.
- a simple integrity verifier uses a full file hash, which is the result of applying a cryptographic hash function or checksum algorithm to the entire file.
- These full file hash algorithms can be calculated incrementally by feeding the bytes of the content into the hash function in order, but the final result of the hash function cannot be obtained until the entire file has been processed.
- the integrity verifier indicates that some corruption is present in the file, it must provide the entire file to the corruption repair engine, because it cannot know what specific bytes of the file are corrupt.
- An improvement upon this approach is to use multiple hash functions that cover different portions of the file and can pinpoint corruption to smaller sections of the file.
- One approach to this is to use block hashes, where a hash function is applied to fixed length blocks of the content. This allows the integrity verifier to pinpoint which blocks are corrupt, and any blocks that are successfully verified can be immediately accessed via the output stream.
- a third and suggested implementation of an integrity verifier utilizes Merkle Hash Trees.
- the Merkle Hash Tree invented by Ralph Merkle, is a hash construct that has very nice properties for verifying the integrity of files and file subranges in an incremental or out-of-order fashion. This approach has the desired characteristics missing from the full file hash approach and works well for very large files. The idea is to break the file up into a number of small pieces, hash those pieces, and then iteratively combine and rehash the resulting hashes in a tree-like fashion until a single “root hash” is created.
- the root hash by itself behaves exactly the same way that full file hashes do. If the root hash is retrieved from a trusted source, it can be used to verify the integrity of the entire content. More importantly, the root hash can be combined with a small number of other hashes to verify the integrity of any of the file segments. By using more or less data from the hash tree, the verification resolution can be increased or decreased respectively.
- the suggested implementation of a merkle hash tree verification engine for the invention dynamically adjusts the verification resolution of the tree based on the rate at which the content is currently being downloaded. The dynamic verifier fixes a time interval T and aims to do one verification within each time interval T.
- the tree hash is implemented using a stack-based approach that only requires O(Log(n)) hashes to be stored in memory for any given operation, including streaming verification.
- Another important aspect of the hash tree verifier is how it responds in the case that corruption is detected.
- the verification resolution will dynamically be increased by one and additional hash data will be retrieved to enable finer-grained integrity checking.
- the corrupt data block will then be rechecked at the smaller resolution at which point some of the data that was previously thought to be corrupt will be proven to be valid. This process continues until the verification resolution has reached its maximum configured level. In turn, the blocks that are still found to be corrupt at the end of this process will be passed on to the corruption repair engine.
- the Integrity Verification Engine allows multiple content checking algorithms to be combined.
- An additional component that may be combined with the above cryptographic integrity verifiers is one that uses a known number of bytes, such as the first 256 bytes of a file that it received out of band and uses that to compare against the file being downloaded.
- the exact matching verifier could be used at the same time as a hash tree or full file hash integrity checking component. If the exact matching verifier matches a block of data successfully, then that data is declared to be valid and does not need to be further verified by other verifiers.
- the corruption repair engine has the task of attempting to repair corruption that is detected by the integrity verification engine, and will attempt to prove which source or sources caused the corruption.
- the integrity verification engine provides the corruption repair engine with a block of data that is corrupt.
- the integrity verification engine may be using additional techniques to try to pinpoint the corruption to a smaller block of data. If a smaller area is pinpointed, then the corruption repair engine will be updated with this information to make it easier to repair the corruption.
- the corruption repair engine keeps track of a list of all of the bytes that have been received from each source. This list may utilize run-length encoded data structures in order to efficiently keep track of various ranges of bytes that have been retrieved.
- the first step in the corruption repair engine is to determine which sources provided data to the corrupt block. At this point there are a number of possible corruption repair algorithms.
- a recommended corruption repair algorithm is to choose one or more “suspect” sources in each phase of the repair.
- the Corruption Repair engine then creates a new Source Scheduler that is limited to the non-suspect sources, and creates a new Prioritization Scheduler that is specified to only download the data that is being repaired.
- a new corruption repair scheduler may be created to repair the corrupt portion while the normal schedule continues with the file download.
- the data that was received by these suspect sources is then re-downloaded by non-suspect sources, and the integrity verification engine rechecks the integrity of this repair attempt. If the repair attempt is successful, then at least one of the suspects was providing corrupt data. If the repair was not successful, then at least one of the non-suspects was providing corrupt data.
- the choice of suspects can be based on a number of heuristics such as trust metrics, geographical location, software version, etc.
- One good heuristic is to sort the possible suspects according to how much data was received from them in the corrupt block. The sources that uploaded the least amount of data are then marked as the most likely suspects. This approach is good for two reasons—first it forces corruptors to provide a lot of data in order to avoid being flagged as a suspect. This contrasts to corruptors being able to provide single bytes of corrupt data for very low cost. Secondly, by flagging the ones with the least amount of data, it gives the repair engine a chance to repair the corruption with downloading the least amount of data.
- the suspect choosing algorithm is combinatorial. First single suspects are chosen, then they are combined with other suspects in the case that multiple hosts might be colluding to corrupt the download.
- the combinatorial algorithm uses most of the previous suspects when generating new suspect combinations so as to minimize the amount of data that needs to be redownloaded during each phase.
- An additional enhancement to this corruption repair process is to keep track of whether or not newly downloaded data is the same as the data that is already downloaded. In this way, it can be probabilistically determined which hosts may be causing the corruption by observing which combinations of hosts are providing different data from each other.
- Download sources are shared across all schedulers so that if a download source is found to be providing corrupt data, then that source is signaled as a bad source and will be removed from all source schedulers.
- the corruptor may be reported to other hosts in the network or to a central authority so that other nodes may decide to avoid the corrupting host in the future.
- the invention supports arbitrary layering of file storage technologies, to allow things such as keeping track of the bytes downloaded for enabling resumes in the future.
- One such layered file storage filter would be a compressor or encryptor module that stores the bytes on disk in encrypted or compressed form even though the output stream is providing the content in an uncompressed or unencrypted form.
- Another optional layer is one that allows the physical location of the file store on disk to change while the download is taking place. For instance, if the file store runs out of disk space on one hard drive, it can be transparently migrated to another hard disk without affecting the modules that are reading and writing data to the data store.
- Another possible filter could automatically compress the files in the store or delete old files using a Least Recently Used policy if the file store has become to large or has run out of disk space. This allows the file store to automatically make room for the new download without affecting the download in progress.
- the data store physically stores the data on disk as it is being downloaded. This data is then accessed by the output stream and the verification engines in order to verify and process the data.
- the data from the data store can also be saved as a normal file once the download completes, allowing the content to be accessed as a normal file in a computer file system.
- the file is stored in a temporary location such as a user-specific temporary directory or a system wide temporary directory.
- a temporary location such as a user-specific temporary directory or a system wide temporary directory.
- the control API Via the control API, it is possible to set the destination where this file will be saved to.
- the file is moved to the same directory as the final destination, but still using a temporary file name. The file is not moved to its final destination name until the download has completed entirely and the integrity of the file has been fully verified.
- Certain data structures can be shared across instances of the invention, such as information about the latency and speed of individual sources, as well as whether or not they have been detected as providing corrupt data in the past. These data structures can be used to quickly determine optimal sources for a separate download that is contacting the same set of hosts.
- the invention can also perform prioritization and queuing across instances. This allows different priorities to be assigned to different content.
- One such policy is a “smallest content first” policy, whereby small files are scheduled to download before big files.
- One suggested way to implement prioritization is to use shared data structures for bandwidth throttling across all instances of the invention. This allows fine-grained control over the rate that the data is being received from the source.
- the invention is directed to a method comprising communicating data over a computer network via multiple channels in parallel with data order prioritization.
- the data order may be prioritized in a sequential or progressive fashion, providing a parallel streaming download.
- the data order may be prioritized on-demand by external components or internal components such as a corruption repair component.
- the data order may be prioritized utilizing an algorithm that proportionally allocates the amount of data to be received based on the throughput and latency of the channel or channel source.
- the data order may be prioritized utilizing an algorithm that uses time-based intervals to proportionally allocate the amount of data to be received from a channel during the interval.
- the data order may be prioritized utilizing an algorithm that tends to make the fastest channel the bottleneck for the prioritized data transfer.
- the data order may be prioritized utilizing an algorithm that preempts bottleneck channels.
- the rate of the prioritized data may be smoothed to minimize burstiness of the transfer.
- the data transmission may take place over a peer-to-peer network.
- the multiple channels may terminate at the same source.
- the channels may be heterogeneous, with different protocols and channel adapters used to receive data from these multiple channels in parallel.
- the channels may be chosen by a ranking of channels or channel sources. New channels and channel sources may be added dynamically during the data transfer.
- the channels may have adapters that provide encryption, compression, or delta encoding.
- a method comprises providing integrity verification and corruption repair for the data transfer.
- the data may be transferred over multiple channels in parallel with data order prioritization.
- the integrity verification may utilize an iterative hash construct, such as a Merkle Hash Tree, and a corruption repair engine utilizes combinations of channel sources to pinpoint corruption.
- An amount of data that a source has provided may be used in determining the likeliness that the source caused the corruption. A majority of sources may remain the same between iterations. Integrity checking and corruption repair may be performed in iterations.
- the corruption can be further pinpointed by increasing the resolution of the verification algorithm or by employing multiple verification algorithms.
- a source may be proven to have caused the corruption, and may be announced to other components in the system or external systems.
- Bandwidth throttling can be employed to prioritize or deprioritize channels for scheduling.
- the bandwidth throttling is used to slow the overall data transfer across all channels.
- the bandwidth throttling can be used across all channels to the source to limit the data transfer rate to that source.
- a highly ranked source can be pipelined to compensate for latency. Slots can be used to track which sources are currently scheduled.
- a computer-readable medium comprises instructions to cause a processor to receive data over multiple channels in parallel with data order prioritization and present the data to a user.
- the described techniques can be embodied in a variety of devices, including personal computers, workstations, servers, mobile phones, laptop computers, handheld computing devices, personal digital assistants (PDA's), and the like.
- the devices may include a microprocessor, a digital signal processor (DSP), field programmable gate array (FPGA), application specific integrated circuit (ASIC) or similar hardware, firmware and/or software for implementing the techniques.
- DSP digital signal processor
- FPGA field programmable gate array
- ASIC application specific integrated circuit
- a computer-readable medium may store computer readable instructions, i.e., program code, that can be executed by a processor to carry out one of more of the techniques described above.
- the computer-readable medium may comprise random access memory (RAM), read-only memory (ROM), non-volatile random access memory (NVRAM), electrically erasable programmable read-only memory (EEPROM), flash memory, or the like.
- RAM random access memory
- ROM read-only memory
- NVRAM non-volatile random access memory
- EEPROM electrically erasable programmable read-only memory
- flash memory or the like.
Abstract
Description
-
- Speed—It includes optimizations such as Dynamic Range Requests, Pipelining, and Range Preemption to download the data as absolutely fast as possible.
- Intelligence—The engine will automatically discover and download from the most desirable mirrors or sources. It constantly monitors and responses to changing network conditions, optimizing the download on the fly.
- Fault Tolerance—The majority of software is not robust in the face of network problems, they hit a snag and immediately throw an error or hang. In contrast, the invention automatically compensates for network problems when they arise. It routes around problems, retries, and will faithfully deliver the data.
- Streaming—The engine was specifically designed to provide the fastest progressive downloads. Using the technology, one can actually watch a video as it is being downloaded from multiple sources in parallel. This is perfect for Video-On-Demand, P2P, and distance learning applications.
- Security—Full support for encryption via SSL/TLS, including the ability to download content from “https” URLs.
- Streaming Integrity Checking—The invention supports various integrity checking mechanisms, including “Merkle Hash Trees” which can verify the integrity of data in a streaming fashion.
- Corruption Repair—The invention can automatically detect and repair corruption for any file being verified by the integrity checking system. Together these features enable “Self-Healing Downloads”.
-
- Channel sources can be specified before the download starts.
- New sources to be added while the download is in progress.
- The download can be started, stopped, suspended, or resumed.
- External applications can receive notifications of key events, such as when a channel connection occurs, when bytes are received, when bytes are verified, or when bytes are discovered to be corrupt.
- Integrity verifiers can be specified
- Connection verifiers can be specified that include metadata for the data that is desired to be transferred
- Various properties may be set to control the behavior of the downloads, such as whether or not the download should signal an error and abort the download process when the available sources have failed beyond a certain limit. There is also a fail-safe mode that will cause the download to continue until it is either canceled or the download has successfully completed.
- A download in progress may be canceled, an individual connect process may be canceled, or a range download process may be canceled.
-
- External Ranking—The source ranker can use a preconfigured ranking of sources as specified by the user or an administrator. The ranking can also be obtained from an external ranking service that could run on a separate server on the Internet.
- Throughput—The sources can be ranked based on their throughput. Faster sources will be given a higher ranking
- Latency—The sources can be ranked based on their latency. Sources with the lowest latency will be given a higher ranking.
- Network Hops—The sources can be ranked based on the number of network hops to the source. Sources with the lowest hop count will be given a higher ranking
- Geographical Location—The sources can be ranked based on their geographical location relative to the downloader. Closer sources will be given a higher ranking
- Channel Cost—The sources can be ranked based on how much it costs to transfer data over that path. Cheaper sources are given a higher ranking.
-
- 10-20—Inclusive list of bytes 10, 11, 12, . . . , 20
- 1, 3, 10-20—Inclusive list of
bytes - 0—Inclusive list of all bytes from 0 to infinity, or the end of the file.
- −20—Negative ranges start from the end of the file. So this range is a list of the last 20 bytes in the file
Claims (20)
Priority Applications (1)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US13/346,110 US8239515B2 (en) | 2003-02-28 | 2012-01-09 | Parallel data transfer over multiple channels with data order prioritization |
Applications Claiming Priority (4)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US45129503P | 2003-02-28 | 2003-02-28 | |
US10/788,695 US7555559B2 (en) | 2003-02-28 | 2004-02-27 | Parallel data transfer over multiple channels with data order prioritization |
US12/490,128 US8103786B2 (en) | 2003-02-28 | 2009-06-23 | Parallel data transfer over multiple channels with data order prioritization |
US13/346,110 US8239515B2 (en) | 2003-02-28 | 2012-01-09 | Parallel data transfer over multiple channels with data order prioritization |
Related Parent Applications (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
US12/490,128 Continuation US8103786B2 (en) | 2003-02-28 | 2009-06-23 | Parallel data transfer over multiple channels with data order prioritization |
Publications (2)
Publication Number | Publication Date |
---|---|
US20120110140A1 US20120110140A1 (en) | 2012-05-03 |
US8239515B2 true US8239515B2 (en) | 2012-08-07 |
Family
ID=32912407
Family Applications (3)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
US10/788,695 Active 2026-08-03 US7555559B2 (en) | 2003-02-28 | 2004-02-27 | Parallel data transfer over multiple channels with data order prioritization |
US12/490,128 Active 2024-08-09 US8103786B2 (en) | 2003-02-28 | 2009-06-23 | Parallel data transfer over multiple channels with data order prioritization |
US13/346,110 Expired - Lifetime US8239515B2 (en) | 2003-02-28 | 2012-01-09 | Parallel data transfer over multiple channels with data order prioritization |
Family Applications Before (2)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
US10/788,695 Active 2026-08-03 US7555559B2 (en) | 2003-02-28 | 2004-02-27 | Parallel data transfer over multiple channels with data order prioritization |
US12/490,128 Active 2024-08-09 US8103786B2 (en) | 2003-02-28 | 2009-06-23 | Parallel data transfer over multiple channels with data order prioritization |
Country Status (1)
Country | Link |
---|---|
US (3) | US7555559B2 (en) |
Cited By (6)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20100023594A1 (en) * | 2008-07-25 | 2010-01-28 | Fujitsu Limited | Content processing apparatus, content processing method, and recording medium |
US20110131319A1 (en) * | 2009-08-19 | 2011-06-02 | Opanga Networks, Inc. | Systems and methods for optimizing channel resources by coordinating data transfers based on data type and traffic |
US9152502B2 (en) | 2012-12-21 | 2015-10-06 | Microsoft Technology Licensing, Llc | Data error detection and correction using hash values |
US9948708B2 (en) | 2009-06-01 | 2018-04-17 | Google Llc | Data retrieval based on bandwidth cost and delay |
US10554761B2 (en) | 2015-12-12 | 2020-02-04 | At&T Intellectual Property I, Lp | Methods and apparatus to improve transmission of a field data set to a network access point via parallel communication sessions |
US20200220933A1 (en) * | 2019-01-07 | 2020-07-09 | International Business Machines Corporation | Methods and systems for managing multi-channel computing environments to optimize user efficiency |
Families Citing this family (184)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US7370110B2 (en) * | 2000-04-18 | 2008-05-06 | Hoshiko Llc | Method and system for operating a network server to discourage inappropriate use |
US7277950B1 (en) * | 2000-12-29 | 2007-10-02 | Swarmcast, Inc. | Packet transfer mechanism over a peer to peer network |
US8458754B2 (en) | 2001-01-22 | 2013-06-04 | Sony Computer Entertainment Inc. | Method and system for providing instant start multimedia content |
US7555559B2 (en) * | 2003-02-28 | 2009-06-30 | Onion Networks, KK | Parallel data transfer over multiple channels with data order prioritization |
US8291062B2 (en) * | 2003-08-20 | 2012-10-16 | Aol Inc. | Managing access to digital content sources |
US7702817B2 (en) * | 2003-10-28 | 2010-04-20 | Microsoft Corporation | Wireless network access technologies for retrieving a virtual resource via a plurality of wireless network interfaces |
US7162270B2 (en) * | 2003-10-30 | 2007-01-09 | Kuo Liang Chen | Dual communication mode wireless network transmission device |
US8239446B2 (en) * | 2003-11-19 | 2012-08-07 | Sony Computer Entertainment America Llc | Content distribution architecture |
US7398399B2 (en) * | 2003-12-12 | 2008-07-08 | International Business Machines Corporation | Apparatus, methods and computer programs for controlling performance of operations within a data processing system or network |
US7519726B2 (en) * | 2003-12-12 | 2009-04-14 | International Business Machines Corporation | Methods, apparatus and computer programs for enhanced access to resources within a network |
US7475427B2 (en) * | 2003-12-12 | 2009-01-06 | International Business Machines Corporation | Apparatus, methods and computer programs for identifying or managing vulnerabilities within a data processing network |
US20050149890A1 (en) * | 2003-12-29 | 2005-07-07 | Tsai Vicki W. | Programming reconfigurable packetized networks |
US7424698B2 (en) * | 2004-02-27 | 2008-09-09 | Intel Corporation | Allocation of combined or separate data and control planes |
US7424003B2 (en) * | 2004-03-08 | 2008-09-09 | Surf Communication Solutions | Multi-parameter scheduling in communication systems |
US20050223110A1 (en) * | 2004-03-30 | 2005-10-06 | Intel Corporation | Heterogeneous building block scalability |
US20050229139A1 (en) * | 2004-03-30 | 2005-10-13 | Intel Corporation | Block-based processing in a packet-based reconfigurable architecture |
US8098592B2 (en) * | 2004-04-05 | 2012-01-17 | Alcatel Lucent | Cellular data transmission time period estimation |
JP3925869B2 (en) * | 2004-05-27 | 2007-06-06 | インターナショナル・ビジネス・マシーンズ・コーポレーション | Apparatus, method, and program for transferring structured document including a plurality of document elements |
US7631098B2 (en) * | 2004-06-08 | 2009-12-08 | International Business Machines Corporation | Method, system and program product for optimized concurrent data download within a grid computing environment |
US8214447B2 (en) * | 2004-06-08 | 2012-07-03 | Bose Corporation | Managing an audio network |
US20060004902A1 (en) * | 2004-06-30 | 2006-01-05 | Siva Simanapalli | Reconfigurable circuit with programmable split adder |
US7277985B2 (en) | 2004-07-13 | 2007-10-02 | International Business Machines Corporation | Method, system and program product for storing downloadable content on a plurality of enterprise storage system (ESS) cells |
US7174385B2 (en) * | 2004-09-03 | 2007-02-06 | Microsoft Corporation | System and method for receiver-driven streaming in a peer-to-peer network |
US8789119B2 (en) * | 2004-09-30 | 2014-07-22 | Cisco Technology, Inc. | Statistical remultiplexer performance for video on demand applications by use of metadata |
CN101375284B (en) | 2004-10-25 | 2012-02-22 | 安全第一公司 | Secure data parser method and system |
JP2006126894A (en) * | 2004-10-26 | 2006-05-18 | Sony Corp | Content delivery method, program and information processor |
US20060116557A1 (en) * | 2004-11-30 | 2006-06-01 | Alere Medical Incorporated | Methods and systems for evaluating patient data |
JP4593252B2 (en) * | 2004-12-02 | 2010-12-08 | パナソニック株式会社 | Semiconductor integrated circuit |
US7610296B2 (en) * | 2004-12-17 | 2009-10-27 | Microsoft Corporation | Prioritized files |
US20060173799A1 (en) * | 2005-01-31 | 2006-08-03 | Lodovico Minnocci | Technique for prioritizing tasks in a postal service provider data center |
US8352627B1 (en) * | 2005-03-23 | 2013-01-08 | Apple Inc. | Approach for downloading data over networks using automatic bandwidth detection |
US8589508B2 (en) | 2005-04-07 | 2013-11-19 | Opanga Networks, Inc. | System and method for flow control in an adaptive file delivery system |
US8909807B2 (en) | 2005-04-07 | 2014-12-09 | Opanga Networks, Inc. | System and method for progressive download using surplus network capacity |
US8719399B2 (en) * | 2005-04-07 | 2014-05-06 | Opanga Networks, Inc. | Adaptive file delivery with link profiling system and method |
US7500010B2 (en) | 2005-04-07 | 2009-03-03 | Jeffrey Paul Harrang | Adaptive file delivery system and method |
US9065595B2 (en) | 2005-04-07 | 2015-06-23 | Opanga Networks, Inc. | System and method for peak flow detection in a communication network |
US11258531B2 (en) | 2005-04-07 | 2022-02-22 | Opanga Networks, Inc. | System and method for peak flow detection in a communication network |
US7490140B2 (en) * | 2005-05-12 | 2009-02-10 | International Business Machines Corporation | Peer data transfer orchestration |
US20060271926A1 (en) | 2005-05-31 | 2006-11-30 | Microsoft Corporation | Split download for electronic software downloads |
TWI401574B (en) * | 2005-06-06 | 2013-07-11 | Ibm | Method, system and program product for optimized concurrent data download within a grid computing environment |
KR100700588B1 (en) * | 2005-08-09 | 2007-03-28 | 엘지전자 주식회사 | Method and apparatus for downloding the contents in mobile telecommunication terminal equipment |
CN100411341C (en) * | 2005-08-10 | 2008-08-13 | 华为技术有限公司 | Parallel downloading method and terminal |
CN100395978C (en) * | 2005-08-15 | 2008-06-18 | 华为技术有限公司 | Unloading method and terminal |
US8019988B2 (en) * | 2005-08-22 | 2011-09-13 | The State Of Oregon Acting By And Through The State Board Of Higher Education On Behalf Of The University Of Oregon | Security protocols for hybrid peer-to-peer file sharing networks |
US20070067488A1 (en) * | 2005-09-16 | 2007-03-22 | Ebay Inc. | System and method for transferring data |
US20070112945A1 (en) * | 2005-11-12 | 2007-05-17 | Lori Brown | Supply and demand project management tool |
US7673240B2 (en) * | 2005-12-30 | 2010-03-02 | Polaroid Labs, Llc | Ubiquitous navbar user interface across multiple heterogeneous digital media devices |
WO2007136423A2 (en) * | 2005-12-30 | 2007-11-29 | Bmo Llc | Digital content delivery via virtual private network(vpn) incorporating secured set-top devices |
CN101411120B (en) * | 2006-01-25 | 2012-10-31 | 法国电信公司 | Burn-in system for multicast data transmission |
US8788706B2 (en) * | 2006-02-27 | 2014-07-22 | Vudu, Inc. | Method and system for managing data transmission between devices behind network address translators (NATs) |
JP4651571B2 (en) * | 2006-04-14 | 2011-03-16 | 富士通株式会社 | Data communication program, data communication method, and portable terminal device |
US7756134B2 (en) | 2006-05-02 | 2010-07-13 | Harris Corporation | Systems and methods for close queuing to support quality of service |
US7894509B2 (en) | 2006-05-18 | 2011-02-22 | Harris Corporation | Method and system for functional redundancy based quality of service |
US7990860B2 (en) | 2006-06-16 | 2011-08-02 | Harris Corporation | Method and system for rule-based sequencing for QoS |
US8516153B2 (en) | 2006-06-16 | 2013-08-20 | Harris Corporation | Method and system for network-independent QoS |
US7856012B2 (en) | 2006-06-16 | 2010-12-21 | Harris Corporation | System and methods for generic data transparent rules to support quality of service |
US8064464B2 (en) | 2006-06-16 | 2011-11-22 | Harris Corporation | Method and system for inbound content-based QoS |
US7916626B2 (en) | 2006-06-19 | 2011-03-29 | Harris Corporation | Method and system for fault-tolerant quality of service |
US8730981B2 (en) | 2006-06-20 | 2014-05-20 | Harris Corporation | Method and system for compression based quality of service |
US7769028B2 (en) | 2006-06-21 | 2010-08-03 | Harris Corporation | Systems and methods for adaptive throughput management for event-driven message-based data |
US8300653B2 (en) | 2006-07-31 | 2012-10-30 | Harris Corporation | Systems and methods for assured communications with quality of service |
US7761900B2 (en) * | 2006-08-02 | 2010-07-20 | Clarendon Foundation, Inc. | Distribution of content and advertisement |
KR101486431B1 (en) * | 2006-09-06 | 2015-01-26 | 아카마이 테크놀로지스, 인크. | Hybrid content delivery network(cdn) and peer-to-peer(p2p) network |
US8019018B2 (en) * | 2006-10-12 | 2011-09-13 | Powerwave Cognition, Inc. | Determining a mode to transmit data |
US8363102B1 (en) * | 2006-10-13 | 2013-01-29 | L-3 Communications Mobile-Vision, Inc. | Dynamically load balancing date transmission using one or more access points |
US8103247B2 (en) | 2006-10-31 | 2012-01-24 | Microsoft Corporation | Automated secure pairing for wireless devices |
US20080104170A1 (en) * | 2006-10-31 | 2008-05-01 | Microsoft Corporation | Collaborative Networks for Parallel Downloads of Content |
US9544259B2 (en) * | 2006-11-08 | 2017-01-10 | Open Invention Network, Llc | Apparatus and method for dynamic streaming of multimedia files |
US8718555B2 (en) * | 2006-11-10 | 2014-05-06 | Powerwave Cognition, Inc. | Method and system for using selected bearer channels |
US8155127B2 (en) * | 2006-11-10 | 2012-04-10 | Powerwave Cognition, Inc. | Autonomous dynamic spectrum access |
US8208873B2 (en) * | 2006-11-10 | 2012-06-26 | Powerwave Cognition, Inc. | Method and apparatus for adjusting waveform parameters for an adaptive air interface waveform |
US20080112428A1 (en) * | 2006-11-10 | 2008-05-15 | Seidel Scott Y | Scheduling for autonomous dynamic spectrum access systems |
US8014783B2 (en) * | 2006-11-10 | 2011-09-06 | Powerwave Cognition, Inc. | Bearer selection and negotiation in autonomous dynamic spectrum access systems |
EP2095255B1 (en) * | 2006-11-30 | 2014-07-23 | Speedbit Ltd. | Accelerated multimedia file download and playback |
WO2008070050A2 (en) * | 2006-12-04 | 2008-06-12 | Swarmcast, Inc. | Automatic configuration of embedded media player |
JP2008158664A (en) * | 2006-12-21 | 2008-07-10 | Sony Corp | Communication system, server, communication terminal and communication method |
US20080281718A1 (en) * | 2007-01-08 | 2008-11-13 | Barrett Morgan | Household network incorporating secure set-top devices |
US8055902B2 (en) | 2007-01-12 | 2011-11-08 | International Business Machines Corporation | Method, system, and computer program product for data upload in a computing system |
CN101227590B (en) * | 2007-01-19 | 2013-03-06 | 北京风行在线技术有限公司 | P2P protocol-based media file order program control method and apparatus |
US20080244042A1 (en) * | 2007-03-26 | 2008-10-02 | Sugih Jamin | Method and system for communicating media over a computer network |
US8019830B2 (en) * | 2007-04-16 | 2011-09-13 | Mark Thompson | Methods and apparatus for acquiring file segments |
US8296385B2 (en) * | 2007-04-23 | 2012-10-23 | Lenovo (Singapore) Pte. Ltd. | Apparatus and method for selective engagement in software distribution |
WO2009003189A1 (en) * | 2007-06-27 | 2008-12-31 | Acresso Software, Inc. | A method and system for software virtualization directly from an installation package |
BRPI0721958A2 (en) * | 2007-08-30 | 2014-03-18 | Thomson Licensing | A UNIFIED POINT-TO-CACHE SYSTEM FOR CONTENT SERVICES IN WIRELESS MESH NETWORKS |
US8250191B2 (en) * | 2007-09-06 | 2012-08-21 | Pando Networks, Inc. | Methods and apparatus for cooperative file distribution with target data delivery rate |
US9154552B2 (en) | 2007-09-06 | 2015-10-06 | Microsoft Technology Licensing, Llc | Method and apparatus for cooperative file distribution with receiver determined quality of services |
KR100929031B1 (en) * | 2007-09-17 | 2009-11-26 | (주)씨디네트웍스 | Block selection method in file parallel download, file parallel download method using the same, and recording medium recording a program for implementing the same |
US9483405B2 (en) | 2007-09-20 | 2016-11-01 | Sony Interactive Entertainment Inc. | Simplified run-time program translation for emulating complex processor pipelines |
US8635360B2 (en) | 2007-10-19 | 2014-01-21 | Google Inc. | Media playback point seeking using data range requests |
JP2011508916A (en) * | 2007-12-03 | 2011-03-17 | ベロシツクス・リミテツド | Method and apparatus for distributing digital data |
US7908362B2 (en) * | 2007-12-03 | 2011-03-15 | Velocix Ltd. | Method and apparatus for the delivery of digital data |
US8543720B2 (en) | 2007-12-05 | 2013-09-24 | Google Inc. | Dynamic bit rate scaling |
US7979570B2 (en) * | 2008-05-12 | 2011-07-12 | Swarmcast, Inc. | Live media delivery over a packet-based computer network |
WO2009155356A1 (en) | 2008-06-18 | 2009-12-23 | Onion Networks, KK | Traffic and cost containment for internet access by adapting the coding rate when distributing- media content |
US9063947B2 (en) * | 2008-08-18 | 2015-06-23 | Hewlett-Packard Development Company, L.P. | Detecting duplicative hierarchical sets of files |
EP2356576A4 (en) | 2008-11-07 | 2012-05-30 | Opanga Networks Inc | Portable data storage devices that initiate data transfers utilizing host devices |
US8799503B2 (en) * | 2008-11-07 | 2014-08-05 | Dell Products L.P. | System and method for downloading content associated with optical media |
US20100121828A1 (en) * | 2008-11-11 | 2010-05-13 | You Wang | Resource constraint aware network file system |
WO2010065757A1 (en) | 2008-12-04 | 2010-06-10 | Swarmcast, Inc. | Adaptive playback rate with look-ahead |
WO2010111261A1 (en) | 2009-03-23 | 2010-09-30 | Azuki Systems, Inc. | Method and system for efficient streaming video dynamic rate adaptation |
US20100250509A1 (en) * | 2009-03-27 | 2010-09-30 | Bank Of America Corporation | File scanning tool |
US20100250708A1 (en) * | 2009-03-31 | 2010-09-30 | Alexander John Limberis | Digital media referral and distribution |
KR101033813B1 (en) | 2009-05-08 | 2011-05-13 | 주식회사 클루넷 | Cloud computing network system and file distrubuting method of the same |
US9190110B2 (en) | 2009-05-12 | 2015-11-17 | JBF Interlude 2009 LTD | System and method for assembling a recorded composition |
WO2010138972A2 (en) * | 2009-05-29 | 2010-12-02 | Abacast, Inc. | Selective access of multi-rate data from a server and/or peer |
US8019886B2 (en) | 2009-08-19 | 2011-09-13 | Opanga Networks Inc. | Systems and methods for enhanced data delivery based on real time analysis of network communications quality and traffic |
EP2468019A4 (en) | 2009-08-20 | 2013-10-23 | Opanga Networks Inc | Broadcasting content using surplus network capacity |
JP5032543B2 (en) * | 2009-09-16 | 2012-09-26 | 株式会社東芝 | Scheduling apparatus, method and program |
KR101771437B1 (en) * | 2009-11-04 | 2017-08-28 | 삼성전자주식회사 | Method for determining device according to contents attribute and providing contents to the device and electronic device using the same |
US8767544B1 (en) * | 2009-11-10 | 2014-07-01 | Sprint Communications Company L.P. | Data rate selection for wireless communication devices |
US8126987B2 (en) | 2009-11-16 | 2012-02-28 | Sony Computer Entertainment Inc. | Mediation of content-related services |
DE102010006008B4 (en) * | 2010-01-27 | 2012-10-31 | Artec Computer Gmbh | Method for secure download of distributed download resources |
US9607655B2 (en) * | 2010-02-17 | 2017-03-28 | JBF Interlude 2009 LTD | System and method for seamless multimedia assembly |
US11232458B2 (en) | 2010-02-17 | 2022-01-25 | JBF Interlude 2009 LTD | System and method for data mining within interactive multimedia |
US20110231517A1 (en) * | 2010-03-20 | 2011-09-22 | Sudharshan Srinivasan | Smart download system for mobile devices with multiple data interfaces using enhanced HTTP proxy server |
US8495196B2 (en) | 2010-03-22 | 2013-07-23 | Opanga Networks, Inc. | Systems and methods for aligning media content delivery sessions with historical network usage |
FR2957700B1 (en) | 2010-03-22 | 2012-04-13 | Bull Sas | METHOD, COMPUTER PROGRAM AND OPTIMIZATION DEVICE FOR LOADING AND STARTING AN OPERATING SYSTEM IN A COMPUTER SYSTEM VIA A COMMUNICATION NETWORK |
US8433759B2 (en) | 2010-05-24 | 2013-04-30 | Sony Computer Entertainment America Llc | Direction-conscious information sharing |
KR20120015931A (en) * | 2010-08-13 | 2012-02-22 | 삼성전자주식회사 | Portable electric device and display mirorring method therof |
US20120143986A1 (en) * | 2010-11-30 | 2012-06-07 | Rovi Technologies Corporation | Systems and methods for downloading by different processes |
KR101204543B1 (en) | 2010-12-22 | 2012-11-26 | 한양대학교 산학협력단 | Method and apparatus for chunk selection in p2p streaming service |
US8874510B2 (en) * | 2011-01-05 | 2014-10-28 | Lenovo (Singapore) Pte. Ltd. | Synchronizing files between base and detachable device |
JP5238829B2 (en) | 2011-01-13 | 2013-07-17 | 株式会社東芝 | Data collection device, data collection program, and data collection system |
US20120226738A1 (en) * | 2011-03-04 | 2012-09-06 | Zynga Inc. | Simultaneous download of application file portions |
US8510267B2 (en) * | 2011-03-08 | 2013-08-13 | Rackspace Us, Inc. | Synchronization of structured information repositories |
KR101884259B1 (en) * | 2011-08-11 | 2018-08-01 | 삼성전자주식회사 | Apparatus and method for providing streaming service |
US9614688B2 (en) | 2011-11-15 | 2017-04-04 | Canon Kabushiki Kaisha | Providing image data to a client display device |
US9160697B2 (en) * | 2012-01-01 | 2015-10-13 | Qualcomm Incorporated | Data delivery optimization |
US8639894B2 (en) | 2012-01-27 | 2014-01-28 | Comcast Cable Communications, Llc | Efficient read and write operations |
WO2013144982A1 (en) * | 2012-03-28 | 2013-10-03 | Soumya Das | Method and system for streaming of a media file in a distributed media streaming environment |
US8904451B2 (en) * | 2012-04-13 | 2014-12-02 | Theplatform, Llc | Systems for prioritizing video processing events based on availability of media file and agent to process the event type |
US9250771B1 (en) * | 2012-05-31 | 2016-02-02 | Google Inc. | Asynchronously ingesting media content into a content management system from a client computer having an unreliable network connection |
CN103634129B (en) * | 2012-08-22 | 2018-03-20 | 腾讯科技（深圳）有限公司 | A kind of method and device that proxy server is set |
US9009619B2 (en) | 2012-09-19 | 2015-04-14 | JBF Interlude 2009 Ltd—Israel | Progress bar for branched videos |
US9257148B2 (en) | 2013-03-15 | 2016-02-09 | JBF Interlude 2009 LTD | System and method for synchronization of selectably presentable media streams |
KR102164457B1 (en) | 2013-04-25 | 2020-10-14 | 삼성전자주식회사 | Electronic device for multiple radio access and method thereof |
US9832516B2 (en) | 2013-06-19 | 2017-11-28 | JBF Interlude 2009 LTD | Systems and methods for multiple device interaction with selectably presentable media streams |
US9268969B2 (en) * | 2013-08-14 | 2016-02-23 | Guardtime Ip Holdings Limited | System and method for field-verifiable record authentication |
US10448119B2 (en) | 2013-08-30 | 2019-10-15 | JBF Interlude 2009 LTD | Methods and systems for unfolding video pre-roll |
US9530454B2 (en) | 2013-10-10 | 2016-12-27 | JBF Interlude 2009 LTD | Systems and methods for real-time pixel switching |
US9520155B2 (en) | 2013-12-24 | 2016-12-13 | JBF Interlude 2009 LTD | Methods and systems for seeking to non-key frames |
US9641898B2 (en) | 2013-12-24 | 2017-05-02 | JBF Interlude 2009 LTD | Methods and systems for in-video library |
CN103841194B (en) * | 2014-03-07 | 2017-01-25 | 汉柏科技有限公司 | Auxiliary device and method for APP download |
US20150281317A1 (en) * | 2014-03-31 | 2015-10-01 | Google Inc. | Requesting media content segments via multiple network connections |
US9792026B2 (en) | 2014-04-10 | 2017-10-17 | JBF Interlude 2009 LTD | Dynamic timeline for branched video |
US9653115B2 (en) | 2014-04-10 | 2017-05-16 | JBF Interlude 2009 LTD | Systems and methods for creating linear video from branched video |
US9881018B2 (en) | 2014-08-14 | 2018-01-30 | International Business Machines Corporation | File management in thin provisioning storage environments |
US9792957B2 (en) | 2014-10-08 | 2017-10-17 | JBF Interlude 2009 LTD | Systems and methods for dynamic video bookmarking |
US11412276B2 (en) | 2014-10-10 | 2022-08-09 | JBF Interlude 2009 LTD | Systems and methods for parallel track transitions |
CN105812840A (en) * | 2014-12-29 | 2016-07-27 | 乐视网信息技术（北京）股份有限公司 | Live video transmission method, live video transmission device, and video direct broadcast system |
KR102352679B1 (en) | 2015-03-25 | 2022-01-18 | 삼성전자주식회사 | Device supporting multipath tcp, and method of receiving video data of device by streaming |
US10582265B2 (en) | 2015-04-30 | 2020-03-03 | JBF Interlude 2009 LTD | Systems and methods for nonlinear video playback using linear real-time video players |
US9672868B2 (en) | 2015-04-30 | 2017-06-06 | JBF Interlude 2009 LTD | Systems and methods for seamless media creation |
US9729633B2 (en) | 2015-05-29 | 2017-08-08 | Microsoft Technology Licensing, Llc | Distributed data processing system |
US10460765B2 (en) | 2015-08-26 | 2019-10-29 | JBF Interlude 2009 LTD | Systems and methods for adaptive and responsive video |
JP6601066B2 (en) * | 2015-09-01 | 2019-11-06 | 富士通コネクテッドテクノロジーズ株式会社 | COMMUNICATION METHOD, COMMUNICATION DEVICE, AND COMMUNICATION PROGRAM |
JP6601068B2 (en) | 2015-09-01 | 2019-11-06 | 富士通コネクテッドテクノロジーズ株式会社 | COMMUNICATION METHOD, COMMUNICATION DEVICE, AND COMMUNICATION PROGRAM |
US11164548B2 (en) | 2015-12-22 | 2021-11-02 | JBF Interlude 2009 LTD | Intelligent buffering of large-scale video |
US11128853B2 (en) | 2015-12-22 | 2021-09-21 | JBF Interlude 2009 LTD | Seamless transitions in large-scale video |
CN105491151A (en) * | 2015-12-25 | 2016-04-13 | 广东欧珀移动通信有限公司 | Sound box software upgrading method, device and system |
US10462202B2 (en) | 2016-03-30 | 2019-10-29 | JBF Interlude 2009 LTD | Media stream rate synchronization |
US11856271B2 (en) | 2016-04-12 | 2023-12-26 | JBF Interlude 2009 LTD | Symbiotic interactive video |
US10348828B2 (en) * | 2016-06-20 | 2019-07-09 | Cisco Technology, Inc. | Method and apparatus for optimizing data transfers utilizing machine learning |
US10218760B2 (en) | 2016-06-22 | 2019-02-26 | JBF Interlude 2009 LTD | Dynamic summary generation for real-time switchable videos |
US10951591B1 (en) * | 2016-12-20 | 2021-03-16 | Wells Fargo Bank, N.A. | SSL encryption with reduced bandwidth |
CN106790549B (en) * | 2016-12-23 | 2021-01-15 | 北京奇虎科技有限公司 | Data updating method and device |
US11050809B2 (en) | 2016-12-30 | 2021-06-29 | JBF Interlude 2009 LTD | Systems and methods for dynamic weighting of branched video paths |
US10257578B1 (en) | 2018-01-05 | 2019-04-09 | JBF Interlude 2009 LTD | Dynamic library display for interactive videos |
US11601721B2 (en) | 2018-06-04 | 2023-03-07 | JBF Interlude 2009 LTD | Interactive video dynamic adaptation and user profiling |
CN108809736A (en) * | 2018-07-26 | 2018-11-13 | 深圳市共进电子股份有限公司 | Method for diagnosing faults, apparatus and system |
US10810231B2 (en) | 2019-02-05 | 2020-10-20 | Bank Of America Corporation | Data transmission using smart clusters |
US10911571B2 (en) | 2019-03-01 | 2021-02-02 | Walmart Apollo, Llc | System and method for prioritizing the disposition of remote assets for online product listings |
CN110096228B (en) * | 2019-03-29 | 2021-09-14 | 联想(北京)有限公司 | Data storage method, data storage device and data storage system |
US11132210B2 (en) * | 2019-05-09 | 2021-09-28 | International Business Machines Corporation | Dynamic parallelism adjustment |
US11074315B2 (en) * | 2019-07-02 | 2021-07-27 | Bby Solutions, Inc. | Edge cache static asset optimization |
US11490047B2 (en) | 2019-10-02 | 2022-11-01 | JBF Interlude 2009 LTD | Systems and methods for dynamically adjusting video aspect ratios |
US11463651B2 (en) | 2019-12-23 | 2022-10-04 | Carrier Corporation | Video frame-based media stream bandwidth reduction |
US11438545B2 (en) | 2019-12-23 | 2022-09-06 | Carrier Corporation | Video image-based media stream bandwidth reduction |
US11245961B2 (en) | 2020-02-18 | 2022-02-08 | JBF Interlude 2009 LTD | System and methods for detecting anomalous activities for interactive videos |
CN114697733B (en) * | 2020-12-31 | 2023-06-06 | 华为技术有限公司 | Screen-throwing audio and video data transmission method and related equipment |
CN113301285A (en) * | 2021-05-11 | 2021-08-24 | 深圳市度信科技有限公司 | Multi-channel data transmission method, device and system |
US11882337B2 (en) | 2021-05-28 | 2024-01-23 | JBF Interlude 2009 LTD | Automated platform for generating interactive videos |
US11934477B2 (en) | 2021-09-24 | 2024-03-19 | JBF Interlude 2009 LTD | Video player integration within websites |
CN115086296B (en) * | 2022-05-27 | 2024-04-05 | 阿里巴巴（中国）有限公司 | Log transmission system, log transmission method and related device |
Citations (4)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20040172476A1 (en) * | 2003-02-28 | 2004-09-02 | Chapweske Justin F. | Parallel data transfer over multiple channels with data order prioritization |
US7240358B2 (en) * | 2000-12-08 | 2007-07-03 | Digital Fountain, Inc. | Methods and apparatus for scheduling, serving, receiving media-on demand for clients, servers arranged according to constraints on resources |
US7272645B2 (en) * | 2001-05-25 | 2007-09-18 | Sbc Technology Resources, Inc. | Method of improving the reliability of peer-to-peer network downloads |
US7831718B2 (en) * | 2000-12-29 | 2010-11-09 | Swarmcast, Inc. | Rate sensitive packet transfer mechanism over a peer-to-peer network |
Family Cites Families (22)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US4881264A (en) * | 1987-07-30 | 1989-11-14 | Merkle Ralph C | Digital signature system and method based on a conventional encryption function |
US6807632B1 (en) | 1999-01-21 | 2004-10-19 | Emc Corporation | Content addressable information encapsulation, representation, and transfer |
US6141659A (en) * | 1998-05-12 | 2000-10-31 | International Businss Machines Corporation | Systems, methods and computer program products for retrieving documents from multiple document servers via a single client session |
US6771674B1 (en) | 1998-12-28 | 2004-08-03 | 3Com Corporation | Method and system for forward error correction based on parallel streams |
US6477522B1 (en) * | 1999-06-10 | 2002-11-05 | Gateway, Inc. | Dynamic performance based server selection |
US6772337B1 (en) * | 1999-11-09 | 2004-08-03 | Lucent Technologies Inc. | Light weight security for parallel access to multiple mirror sites |
US6339785B1 (en) * | 1999-11-24 | 2002-01-15 | Idan Feigenbaum | Multi-server file download |
US6807550B1 (en) | 1999-12-01 | 2004-10-19 | Microsoft Corporation | Methods and systems for providing random access to structured media content |
US6742023B1 (en) | 2000-04-28 | 2004-05-25 | Roxio, Inc. | Use-sensitive distribution of data files between users |
US7426750B2 (en) | 2000-02-18 | 2008-09-16 | Verimatrix, Inc. | Network-based content distribution system |
US6819325B2 (en) | 2000-03-07 | 2004-11-16 | Microsoft Corporation | API communications for vertex and pixel shaders |
AU2001245800A1 (en) | 2000-03-17 | 2001-10-03 | Mark Nair | System, method and apparatus for controlling the dissemination of digital works |
AU2001261788A1 (en) | 2000-05-19 | 2001-12-03 | Broadstream.Com, Inc. | Management and delivery of online webcasts |
US20020049760A1 (en) * | 2000-06-16 | 2002-04-25 | Flycode, Inc. | Technique for accessing information in a peer-to-peer network |
US7047309B2 (en) * | 2000-08-23 | 2006-05-16 | International Business Machines Corporation | Load balancing and dynamic control of multiple data streams in a network |
US7840652B2 (en) * | 2001-03-21 | 2010-11-23 | Ascentive Llc | System and method for determining network configuration settings that provide optimal network performance |
US7827257B2 (en) * | 2001-06-19 | 2010-11-02 | Intel Corporation | System and method for automatic and adaptive use of active network performance measurement techniques to find the fastest source |
US7133368B2 (en) * | 2002-02-01 | 2006-11-07 | Microsoft Corporation | Peer-to-peer method of quality of service (QoS) probing and analysis and infrastructure employing same |
US20030231661A1 (en) * | 2002-06-18 | 2003-12-18 | General Instrument Corporation | Optimized broadband download for large content |
US7251691B2 (en) * | 2003-07-11 | 2007-07-31 | International Business Machines Corporation | Autonomic predictive load balancing of output transfers for two peer computers for data storage applications |
US7370089B2 (en) * | 2003-07-11 | 2008-05-06 | International Business Machines Corporation | Autonomic learning method to load balance output transfers of two peer nodes |
US20060026161A1 (en) | 2004-07-16 | 2006-02-02 | Henseler David A | Distributed parallel file system for a distributed processing system |
-
2004
- 2004-02-27 US US10/788,695 patent/US7555559B2/en active Active
-
2009
- 2009-06-23 US US12/490,128 patent/US8103786B2/en active Active
-
2012
- 2012-01-09 US US13/346,110 patent/US8239515B2/en not_active Expired - Lifetime
Patent Citations (5)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US7240358B2 (en) * | 2000-12-08 | 2007-07-03 | Digital Fountain, Inc. | Methods and apparatus for scheduling, serving, receiving media-on demand for clients, servers arranged according to constraints on resources |
US7831718B2 (en) * | 2000-12-29 | 2010-11-09 | Swarmcast, Inc. | Rate sensitive packet transfer mechanism over a peer-to-peer network |
US7272645B2 (en) * | 2001-05-25 | 2007-09-18 | Sbc Technology Resources, Inc. | Method of improving the reliability of peer-to-peer network downloads |
US20040172476A1 (en) * | 2003-02-28 | 2004-09-02 | Chapweske Justin F. | Parallel data transfer over multiple channels with data order prioritization |
US8103786B2 (en) * | 2003-02-28 | 2012-01-24 | Swarmcast Inc. (Bvi) | Parallel data transfer over multiple channels with data order prioritization |
Cited By (9)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20100023594A1 (en) * | 2008-07-25 | 2010-01-28 | Fujitsu Limited | Content processing apparatus, content processing method, and recording medium |
US8706853B2 (en) * | 2008-07-25 | 2014-04-22 | Fujitsu Limited | Content processing apparatus, content processing method, and recording medium |
US9948708B2 (en) | 2009-06-01 | 2018-04-17 | Google Llc | Data retrieval based on bandwidth cost and delay |
US20110131319A1 (en) * | 2009-08-19 | 2011-06-02 | Opanga Networks, Inc. | Systems and methods for optimizing channel resources by coordinating data transfers based on data type and traffic |
US8886790B2 (en) * | 2009-08-19 | 2014-11-11 | Opanga Networks, Inc. | Systems and methods for optimizing channel resources by coordinating data transfers based on data type and traffic |
US9152502B2 (en) | 2012-12-21 | 2015-10-06 | Microsoft Technology Licensing, Llc | Data error detection and correction using hash values |
US10554761B2 (en) | 2015-12-12 | 2020-02-04 | At&T Intellectual Property I, Lp | Methods and apparatus to improve transmission of a field data set to a network access point via parallel communication sessions |
US20200220933A1 (en) * | 2019-01-07 | 2020-07-09 | International Business Machines Corporation | Methods and systems for managing multi-channel computing environments to optimize user efficiency |
US11082498B2 (en) * | 2019-01-07 | 2021-08-03 | International Business Machines Corporation | Methods and systems for managing multi-channel computing environments to optimize user efficiency |
Also Published As
Publication number | Publication date |
---|---|
US8103786B2 (en) | 2012-01-24 |
US7555559B2 (en) | 2009-06-30 |
US20120110140A1 (en) | 2012-05-03 |
US20090327512A1 (en) | 2009-12-31 |
US20040172476A1 (en) | 2004-09-02 |
Similar Documents
Publication | Publication Date | Title |
---|---|---|
US8239515B2 (en) | Parallel data transfer over multiple channels with data order prioritization | |
US11194719B2 (en) | Cache optimization | |
KR101432314B1 (en) | Reliable, efficient peer-to-peer storage | |
KR101183430B1 (en) | A system and method for receiver driven streaming in a peer-to-peer network | |
US8239446B2 (en) | Content distribution architecture | |
KR101176648B1 (en) | A system and method for erasure coding of streaming media | |
US8918534B2 (en) | Writing data slices to ready and non-ready distributed storage units in a distributed storage network | |
US8549150B1 (en) | Fractional redundant distribution of media content | |
US20080072264A1 (en) | Distribution of content on a network | |
US7761609B1 (en) | Socket level packet scheduling for connectionless protocols | |
US20020178330A1 (en) | Systems and methods for applying a quality metric to caching and streaming of multimedia files over a network | |
US20100011060A1 (en) | Methods and apparatus for distributing content | |
US20090222515A1 (en) | Methods and apparatus for transferring data | |
WO2012051115A1 (en) | Proxy server configured for hierarchical caching and dynamic site acceleration and custom object and associated method | |
KR20060050381A (en) | A system and method for distributed streaming of scalable media | |
US20130198151A1 (en) | Methods for file sharing related to the bit fountain protocol | |
US20100293172A1 (en) | Method and system for storing and distributing electronic content | |
Boufkhad et al. | Achievable catalog size in peer-to-peer video-on-demand systems | |
US10033822B2 (en) | System and method for atomic file transfer operations over connectionless network protocols |
Legal Events
Date | Code | Title | Description |
---|---|---|---|
AS | Assignment |
Owner name: ONION NETWORKS, MINNESOTAFree format text: ASSIGNMENT OF ASSIGNORS INTEREST;ASSIGNOR:CHAPWESKE, JUSTIN F.;REEL/FRAME:027580/0691Effective date: 20040423Owner name: ONION NETWORKS, KK, JAPANFree format text: ASSIGNMENT OF ASSIGNORS INTEREST;ASSIGNOR:SWARMCAST, INC.;REEL/FRAME:027580/0809Effective date: 20090313Owner name: SWARMCAST, INC., MINNESOTAFree format text: CHANGE OF NAME;ASSIGNOR:ONION NETWORKS, INC.;REEL/FRAME:027580/0800Effective date: 20070221Owner name: SWARMCAST INC. (BVI), VIRGIN ISLANDS, BRITISHFree format text: ASSIGNMENT OF ASSIGNORS INTEREST;ASSIGNOR:SWARMCAST, INC.;REEL/FRAME:027580/0903Effective date: 20111109Owner name: SWARMCAST, INC., MINNESOTAFree format text: ASSIGNMENT OF ASSIGNORS INTEREST;ASSIGNOR:ONION NETWORKS, KK;REEL/FRAME:027580/0814Effective date: 20091023 |
|
AS | Assignment |
Owner name: GOOGLE INC., CALIFORNIAFree format text: ASSIGNMENT OF ASSIGNORS INTEREST;ASSIGNOR:SWARMCAST INC.;REEL/FRAME:027848/0803Effective date: 20120103 |
|
STCF | Information on status: patent grant |
Free format text: PATENTED CASE |
|
FPAY | Fee payment |
Year of fee payment: 4 |
|
AS | Assignment |
Owner name: GOOGLE LLC, CALIFORNIAFree format text: CHANGE OF NAME;ASSIGNOR:GOOGLE INC.;REEL/FRAME:044101/0405Effective date: 20170929 |
|
MAFP | Maintenance fee payment |
Free format text: PAYMENT OF MAINTENANCE FEE, 8TH YEAR, LARGE ENTITY (ORIGINAL EVENT CODE: M1552); ENTITY STATUS OF PATENT OWNER: LARGE ENTITYYear of fee payment: 8 |
|
MAFP | Maintenance fee payment |
Free format text: PAYMENT OF MAINTENANCE FEE, 12TH YEAR, LARGE ENTITY (ORIGINAL EVENT CODE: M1553); ENTITY STATUS OF PATENT OWNER: LARGE ENTITYYear of fee payment: 12 |