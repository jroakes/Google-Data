US20240119366A1 - Online training of machine learning models using bayesian inference over noise - Google Patents
Online training of machine learning models using bayesian inference over noise Download PDFInfo
- Publication number
- US20240119366A1 US20240119366A1 US18/477,525 US202318477525A US2024119366A1 US 20240119366 A1 US20240119366 A1 US 20240119366A1 US 202318477525 A US202318477525 A US 202318477525A US 2024119366 A1 US2024119366 A1 US 2024119366A1
- Authority
- US
- United States
- Prior art keywords
- model
- weights
- sub
- data
- input
- Prior art date
- Legal status (The legal status is an assumption and is not a legal conclusion. Google has not performed a legal analysis and makes no representation as to the accuracy of the status listed.)
- Pending
Links
- 238000010801 machine learning Methods 0.000 title claims abstract description 44
- 238000012549 training Methods 0.000 title abstract description 13
- 238000000034 method Methods 0.000 claims abstract description 40
- 238000012545 processing Methods 0.000 claims abstract description 28
- 238000003860 storage Methods 0.000 claims abstract description 15
- 230000008569 process Effects 0.000 claims description 20
- 239000011159 matrix material Substances 0.000 claims description 18
- 230000001143 conditioned effect Effects 0.000 claims 3
- 238000004590 computer program Methods 0.000 abstract description 15
- 230000002123 temporal effect Effects 0.000 description 70
- 238000009826 distribution Methods 0.000 description 10
- 230000006870 function Effects 0.000 description 8
- 230000009471 action Effects 0.000 description 7
- 238000005309 stochastic process Methods 0.000 description 7
- 238000004891 communication Methods 0.000 description 5
- 239000003795 chemical substances by application Substances 0.000 description 4
- 230000036541 health Effects 0.000 description 4
- 238000009794 Ornstein-Uhlenbeck process Methods 0.000 description 3
- 238000013528 artificial neural network Methods 0.000 description 3
- 230000000694 effects Effects 0.000 description 3
- 230000003993 interaction Effects 0.000 description 3
- 230000004044 response Effects 0.000 description 3
- 230000005653 Brownian motion process Effects 0.000 description 2
- 230000006399 behavior Effects 0.000 description 2
- 230000008901 benefit Effects 0.000 description 2
- 238000010586 diagram Methods 0.000 description 2
- 230000003287 optical effect Effects 0.000 description 2
- 238000013515 script Methods 0.000 description 2
- 238000000926 separation method Methods 0.000 description 2
- 238000009825 accumulation Methods 0.000 description 1
- 230000004913 activation Effects 0.000 description 1
- 230000002411 adverse Effects 0.000 description 1
- 238000013459 approach Methods 0.000 description 1
- 230000005540 biological transmission Effects 0.000 description 1
- 238000005537 brownian motion Methods 0.000 description 1
- 238000004364 calculation method Methods 0.000 description 1
- 230000008859 change Effects 0.000 description 1
- 238000007796 conventional method Methods 0.000 description 1
- 238000001514 detection method Methods 0.000 description 1
- 238000003745 diagnosis Methods 0.000 description 1
- 238000003709 image segmentation Methods 0.000 description 1
- 239000004973 liquid crystal related substance Substances 0.000 description 1
- 238000004519 manufacturing process Methods 0.000 description 1
- 238000003058 natural language processing Methods 0.000 description 1
- 230000000644 propagated effect Effects 0.000 description 1
- 239000004065 semiconductor Substances 0.000 description 1
- 230000001953 sensory effect Effects 0.000 description 1
- 239000000758 substrate Substances 0.000 description 1
- 230000026676 system process Effects 0.000 description 1
- 238000012546 transfer Methods 0.000 description 1
- 230000009466 transformation Effects 0.000 description 1
- 238000013519 translation Methods 0.000 description 1
- 230000000007 visual effect Effects 0.000 description 1
Images
Classifications
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06N—COMPUTING ARRANGEMENTS BASED ON SPECIFIC COMPUTATIONAL MODELS
- G06N20/00—Machine learning
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06N—COMPUTING ARRANGEMENTS BASED ON SPECIFIC COMPUTATIONAL MODELS
- G06N7/00—Computing arrangements based on specific mathematical models
- G06N7/01—Probabilistic graphical models, e.g. probabilistic networks
Definitions
- This specification relates to processing data using machine learning models.
- Machine learning models receive an input and generate an output, e.g., a predicted output, based on the received input.
- Some machine learning models are parametric models and generate the output based on the received input and on values of the parameters of the model.
- Some machine learning models are deep models that employ multiple layers of models to generate an output for a received input.
- a deep neural network is a deep machine learning model that includes an output layer and one or more hidden layers that each apply a non-linear transformation to a received input to generate an output.
- This specification describes a system implemented as computer programs on one or more computers in one or more locations that can perform online training of a machine learning model for predicting time-series data.
- the described methods are able to perform accurate online learning for a wider range of time-series applications compared to conventional methods for online learning.
- the described methods can perform exact or approximate Bayesian inference of model parameters for time-series data with an intricate temporal structure, such as fluctuations across multiple time-scales.
- the model parameters can learn the model parameters more accurately when modeling time-series data, even when the data has an intricate temporal structure.
- FIG. 1 shows an example online learning system.
- FIG. 2 shows an example temporal weight update system.
- FIG. 3 is a flow diagram of an example process for online model training.
- FIG. 1 shows an example online learning system 100 .
- the online learning system 100 is an example of a system implemented as computer programs on one or more computers in one or more locations in which the systems, components, and techniques described below are implemented.
- the system 100 operates in conjunction with a machine learning model 104 .
- the machine learning model is configured to process model inputs 112 in accordance with model weights 110 to produce model outputs 114 that are predictive of ground truth data 116 .
- the model output 114 for a given model input 112 is a prediction of a corresponding ground truth output for the model input 112 for a machine learning task, i.e., of an actual output that should be generated by performing the machine learning task on the model input 112 .
- the model inputs 112 , model outputs 114 , and ground truth data 116 are instances of time-series data. That is, the system 100 receives a respective model input 112 at each of multiple time steps in a sequence of time steps. The system 100 then generates a model output 114 for the model input 112 that was received at the time step and also receives ground truth data 116 for the model input 112 .
- the system 100 can receive the model inputs 112 and ground truth data 116 by any of a variety of methods.
- the system 100 can receive model inputs 112 and ground truth data 116 stored in memory.
- the system 100 can receive values for the model inputs 112 and the ground truth outputs 116 at each time step from one or more sensors that measure the model inputs 112 and the ground truth outputs 116 .
- the model 104 can be trained to perform any kind of machine learning task, i.e., can be configured to receive any kind of digital data input 112 and to generate any kind of score, classification, or regression output 114 based on the input 112 .
- the model 104 is a neural network that is configured to perform an image processing task, i.e., receive an image as the model input 112 and to process the intensity values of the pixels of the input image 112 to generate a model output 114 for the input image 112 .
- the task may be image classification and the output 114 generated by the model 104 for the input image 112 may be scores for each of a set of object categories, with each score representing an estimated likelihood that the input image 112 contains an image of an object belonging to the category.
- the task can be image embedding generation and the output 114 generated by the model 104 can be a numeric embedding of the input image 112 .
- the task can be object detection and the output 114 generated by the model 104 can identify locations in the input image 112 at which particular types of objects are depicted.
- the task can be image segmentation and the output 114 generated by the model 104 can assign each pixel of the input image 112 to a category from a set of categories.
- the task can be to classify the resource or document, i.e., the output 114 generated by the model 104 for a given Internet resource, document, or portion of a document may be a score for each of a set of topics, with each score representing an estimated likelihood that the Internet resource, document, or document portion is about the topic.
- the output 114 generated by the model 104 for a given Internet resource, document, or portion of a document may be a score for each of a set of topics, with each score representing an estimated likelihood that the Internet resource, document, or document portion is about the topic.
- the output 114 generated by the model 104 may be a score that represents an estimated likelihood that the particular advertisement will be clicked on.
- the output 114 generated by the model 104 may be a score for each of a set of content items, with each score representing an estimated likelihood that the user will respond favorably to being recommended the content item.
- the output 114 generated by the model 104 may be a score for each of a set of pieces of text in another language, with each score representing an estimated likelihood that the piece of text in the other language is a proper translation of the input text into the other language.
- the task may be an audio processing task.
- the output 114 generated by the model 104 may be a score for each of a set of pieces of text, each score representing an estimated likelihood that the piece of text is the correct transcript for the utterance.
- the task may be a keyword spotting task where, if the input 112 to the model 104 is a sequence representing a spoken utterance, the output 114 generated by the model 104 can indicate whether a particular word or phrase (“hotword”) was spoken in the utterance.
- the output 114 generated by the model 104 can identify the natural language in which the utterance was spoken.
- the task can be a natural language processing or understanding task, e.g., an entailment task, a paraphrase task, a textual similarity task, a sentiment task, a sentence completion task, a grammaticality task, and so on, that operates on a sequence of text in some natural language.
- a natural language processing or understanding task e.g., an entailment task, a paraphrase task, a textual similarity task, a sentiment task, a sentence completion task, a grammaticality task, and so on, that operates on a sequence of text in some natural language.
- the task can be a text to speech task, where the input 112 is text in a natural language or features of text in a natural language and the model output 114 is a spectrogram or other data defining audio of the text being spoken in the natural language.
- the task can be a health prediction task, where the input 112 is electronic health record data for a patient and the output 114 is a prediction that is relevant to the future health of the patient, e.g., a predicted treatment that should be prescribed to the patient, the likelihood that an adverse health event will occur to the patient, or a predicted diagnosis for the patient.
- the task can be an agent control task, where the input 112 is an observation characterizing the state of an environment and the output 114 defines an action to be performed by the agent in response to the observation.
- the agent can be, e.g., a real-world or simulated robot, a control system for an industrial facility, or a control system that controls a different kind of agent.
- the task can be a content recommendation task, where the input 112 is data characterizing a content recommendation context, i.e. the context in which the recommendation is made and in which the model 104 operates, and the output 114 is one or more scores representing a recommendation of one or more content items.
- the recommended content items can be any appropriate type of content item, e.g., a video, an electronic book, a software application, a news article, a web page, a music content item, e.g., a song, a web page or other resource describing a product, and so on.
- the model 104 can generate content recommendations 114 during a conversation between a user and one or more other entities, e.g., another user or a chatbot or both.
- the model 104 system can generate content recommendations 114 in response to search queries submitted by a user to a search engine, e.g., an Internet search engine that searches web pages on the Internet, an image search engine that searches a repository of images, a video search engine that searches a repository of videos, an app store search engine that searches a repository of software applications that are available for download, an electronic book store search engine that searches a repository of electronic books, and so on.
- a search engine e.g., an Internet search engine that searches web pages on the Internet, an image search engine that searches a repository of images, a video search engine that searches a repository of videos, an app store search engine that searches a repository of software applications that are available for download, an electronic book store search engine that searches a repository of electronic books, and so on.
- the task can be a hardware fault prediction task, where the input 112 is data characterizing the behavior of a hardware device, e.g., signals measured from the hardware device, and the output 114 is a prediction that is relevant to future failures of the hardware device, e.g., a predicted time until the next failure of the hardware device, a likelihood that the hardware device will encounter a fault in a future time span, or a predicted state of the device.
- a hardware fault prediction task where the input 112 is data characterizing the behavior of a hardware device, e.g., signals measured from the hardware device, and the output 114 is a prediction that is relevant to future failures of the hardware device, e.g., a predicted time until the next failure of the hardware device, a likelihood that the hardware device will encounter a fault in a future time span, or a predicted state of the device.
- the task can be a time-series prediction task, where the input 112 is data characterizing past values of a time-series and the output 114 is a prediction of future values of the time-series.
- the task can be a human activity prediction task, where the time-series of data characterizing a user's exercise activity over time as collected by a wearable device and the output 114 predicts future exercise activities.
- the task can be a location prediction task, where the time-series of data characterizing a user's location over time as collected by a device, such as a phone, and the output 114 predicts future locations.
- the model 104 can be any type of parameterized machine learning model, e.g., a linear model, a perceptron with a non-linear activation function, or a neural network with multiple layers of non-linearities.
- This specification generally describes the system 100 as performing online training of the machine learning model 104 to perform a machine learning task.
- the training is referred to as “online” training because the system 100 can update the model weights 110 after one or more time steps for which the model is used to make output predictions 114 .
- the system receives ground truth data 116 and the system uses the model output 114 and ground truth data 116 to update the model weights 110 and train the model 104 .
- the ground truth data 116 corresponds to the model inputs 112 and provides a corresponding example of what model output 114 the model 104 should produce when processing the model input 112 .
- the system 100 processes the model output 114 and the corresponding ground truth data 116 based on an objective function appropriate for measuring how closely the model output 114 replicates the corresponding ground truth data 116 for the purposes of the task performed by the model 104 .
- the objective function can be L2 loss.
- the objective function can be cross-entropy loss.
- the system 100 can update model weight updates 110 to perform online training of the model 104 .
- the system 100 obtains a prediction from the model 104 for each of one or more time-steps within the time-series inputs 112 and ground truth data 116 .
- the system 100 compares the one or more model outputs 114 to the corresponding ground truth data using the appropriate objective function for the machine learning task.
- the system 100 then updates the model weights 110 such that the model 104 processes subsequent inputs 112 to produce predictive model outputs 114 at future time steps.
- the outputs 114 are referred to as “predictive” because the outputs can closely replicate corresponding ground truth data 116 as measured by the appropriate objective function for the machine learning task.
- the model 104 can require different model weights 110 at different times to produce predictive outputs 114 .
- the model 104 can require time-varying model weights 110 in certain meteorological prediction tasks modeling systems affected by climate change.
- the model inputs 112 or the ground truth data 116 can be stochastic processes that fluctuate across multiple time scales and the model 104 can require different model weights 110 at different times in a variety of real-word tasks.
- the model inputs 112 and the ground truth data 116 can fluctuate over different time scales in certain meteorological prediction tasks, where the model inputs 112 and ground truth data are meteorological data.
- model inputs 112 and the ground truth data can fluctuate over different time scales in machine learning tasks for predicting the state or properties of electronic hardware, where the model inputs 112 and the ground truth data 116 characterize the behavior (e.g. signals measured from the hardware) or the properties (e.g., resistance, conductivity, failure probability) of electronic hardware.
- the model inputs 112 or the ground truth data 116 can be instances of 1/f noise.
- the system 100 performs Bayesian inference characterizing the model weights 110 as a time-varying stochastic process.
- the system 100 performs Bayesian inference characterizing the model weights 110 as a combination of multiple time-varying stochastic sub-processes, with each sub-process characterized by one of a set of temporal sub-weights 102 .
- the system 100 characterizes the model weights 110 as a combination of the set of temporal sub-weights 102 and performs Bayesian inference of the temporal sub-weights 102 that characterizes each of the temporal sub-weights 102 as time-varying stochastic processes.
- the system 100 stores the temporal sub-weights 102 .
- each of the temporal sub-weights 102 can correspond to exactly one of the model weights 110 .
- the system 100 can characterize the temporal sub-weights 102 as stochastic processes with different time dependencies, enabling the system 100 to characterize the model weights 110 as a stochastic process that fluctuates appropriately across multiple timescales.
- the system 100 stores multiple sets of temporal sub-weights 102 and combines the sets of sub-weights 102 by summation. Representing the model weights 110 at time t as the stochastic variable ⁇ right arrow over ( ⁇ ) ⁇ t and the i-th set of temporal sub-weights 102 as the stochastic variable ⁇ right arrow over (z) ⁇ i,t , some implementations therefore determine the model weights 110 by performing the summation:
- the system 100 characterizes the temporal sub-weights 102 as Ornstein-Uhlenbeck processes. In some implementations, the system 100 characterizes the temporal sub-weights 102 as particularly specialized Ornstein-Uhlenbeck processes that, for a chosen ⁇ >1 and with ⁇ right arrow over (W) ⁇ i denoting a standard multi-dimensional Wiener process (Brownian motion), satisfy the equation:
- the system 100 characterizes the temporal sub-weights 102 as the above specialized Ornstein-Uhlenbeck processes and determines the model weights 110 by summation of the temporal sub-weights 102 , and the system 100 is said to characterize the model weights 110 as 1/f noise.
- the system 100 includes an update system 106 to update the temporal sub-weights 102 in accordance with the performed Bayesian inference.
- the update system 106 can process the model outputs 114 and ground truth data 116 from one or more time steps to generate sub-weight updates 108 .
- the system 100 can apply these sub-weight updates 108 to the collection of temporal sub-weights 102 .
- the system 100 combines the sets of temporal sub-weights 102 to produce the model weights 110 .
- the machine learning model 104 uses the resulting model weights 110 to produce the model outputs 114 for one or more time steps.
- the system 100 processes the model outputs 114 and the corresponding ground truth data 116 for the same time steps to update the temporal sub-weights 102 .
- the system 100 uses the newly updated temporal sub-weights 102 during later time-steps.
- the model 104 can use the resulting model weights 110 to make accurate predictions, even when the model inputs 112 and the ground truth data 116 are time-series that fluctuate over multiple time-scales.
- FIG. 2 shows an example temporal weight update system 106 .
- the temporal weight update system 106 is an example of a system implemented as computer programs on one or more computers in one or more locations in which the systems, components, and techniques described below are implemented.
- the temporal weight update system 106 includes a temporal filter model 202 and stores sub-weight statistics 204 .
- the sub-weight statistics 204 include covariance data estimating joint uncertainty between the temporal sub-weights.
- the temporal filter model 202 performs the computation required for Bayesian inference of the temporal sub-weights 102 as stochastic processes.
- the temporal filter model 202 is configured to process the model outputs 114 , ground truth data 116 , and stored sub-weight statistics 204 to generate the sub-weight updates 108 and to update the stored sub-weight statistics 204 .
- the temporal filter model 202 can be chosen to perform exact Bayesian inference of the model weights 110 , based on properties of the machine learning model 104 and based on how the system 100 characterizes the model weights 110 .
- the temporal filter model 202 can be a Kalman Filter that can perform online exact Bayesian inference.
- the linear machine learning model 104 predicts scalar output y t based on n dimensional inputs ⁇ right arrow over (x) ⁇ t and model weights ⁇ right arrow over ( ⁇ ) ⁇ t , and the Kalman Filter performs exact Bayesian inference over k sets of temporal sub-weights, characterizing the temporal sub-weights 102 as having a Gaussian distribution with mean ⁇ right arrow over ( ⁇ ) ⁇ t and covariance ⁇ t .
- the Kalman Filter characterizes the temporal sub-weights 102 as being distributed according to the equation:
- ⁇ right arrow over (Z) ⁇ t is an nk dimensional vector representing every temporal sub-weight.
- the notation [ij] will be used throughout to denote a combined index denoting a model weight index, j, and a temporal sub-weight set index, i.
- One such combined index can be computed following:
- a multiplexed copy of the inputs, ⁇ right arrow over (X) ⁇ t can be defined via the relation:
- nk ⁇ nk projection matrix P X,t orthogonal to the multiplexed inputs, ⁇ right arrow over (X) ⁇ t can be defined via the relation:
- a diagonal nk ⁇ nk decay factor matrix D can be defined via the relation:
- a diagonal nk ⁇ nk noise accumulation matrix N can be defined via the relation:
- the linear Kalman Filter performs the updates:
- the system 100 stores the updated ⁇ right arrow over ( ⁇ ) ⁇ t+1 (i.e., the mean of the distribution characterizing the temporal sub-weights) as the current temporal sub-weights 102 and the updated ⁇ t+1 (i.e., the covariance of the distribution characterizing the temporal sub-weights, estimating a joint uncertainty between the temporal sub-weights) as the current sub-weight statistics 204 .
- the temporal filter model 202 can also be chosen to perform approximate Bayesian inference of the model weights 110 .
- the temporal filter model 202 can be an Extended Kalman Filter to perform approximate Bayesian inference.
- An Extended Kalman Filter involves linearizing the non-linear machine learning model 104 by employing a local linear approximation based on a Jacobian of the non-linear model 104 .
- the non-linear model 104 produces an output ⁇ t that predicts an l-dimensional vector of sufficient statistics regarding the ground truth data, ⁇ right arrow over (T) ⁇ y,t .
- this output ⁇ t can be a vector of predicted class probabilities while the sufficient statistics, ⁇ right arrow over (T) ⁇ y,t , can be a one-hot vector encoding the ground truth class.
- the non-linear model can perform the computation:
- the Extended Kalman Filter performs approximate Bayesian inference over k sets of temporal sub-weights characterizing the temporal sub-weights 102 as having a Gaussian distribution with mean ⁇ right arrow over ( ⁇ ) ⁇ t and covariance ⁇ t .
- the Extended Kalman Filter characterizes the temporal sub-weights 102 as being distributed according to the same equation as above:
- J f, ⁇ right arrow over ( ⁇ ) ⁇ t is the Jacobian of f with respect to ⁇ right arrow over (Z) ⁇ t evaluated at ⁇ right arrow over ( ⁇ ) ⁇ t and is a l ⁇ nk matrix.
- R An l ⁇ l conditional outcome variance matrix, R can be defined via the relation:
- the non-linear Extended Kalman Filter performs the updates:
- ⁇ t+1 D ( ⁇ t ⁇ t J f, ⁇ right arrow over ( ⁇ ) ⁇ t T ( J f, ⁇ right arrow over ( ⁇ ) ⁇ t ⁇ t J f, ⁇ right arrow over ( ⁇ ) ⁇ t T +R ) ⁇ 1 J f, ⁇ right arrow over ( ⁇ ) ⁇ t ⁇ t ) ⁇ 1 D+N
- the system 100 stores the updated ⁇ right arrow over ( ⁇ ) ⁇ t+1 (i.e., the mean of the distribution characterizing the temporal sub-weights) as the current temporal sub-weights 102 and the updated ⁇ t+1 (i.e., the covariance of the distribution characterizing the temporal sub-weights, estimating a joint uncertainty between the temporal sub-weights) as the current sub-weight statistics 204 .
- the temporal filter model 202 can be any of a variety of variational approximations of a Kalman Filter or of an Extended Kalman Filter.
- the system 100 can employ a variational approximation that the covariance matrix of the Kalman Filter or Extended Kalman Filter is constrained to be a diagonal covariance matrix.
- an nk dimensional variance vector, ⁇ right arrow over ( ⁇ ) ⁇ t is updated and stored rather than the full covariance matrix, ⁇ t .
- ⁇ is defined via:
- ⁇ ⁇ i , j 4 ⁇ ⁇ 2 ⁇ x t , j 2 ⁇ ⁇ t , [ i ⁇ j ] 2 ⁇ sin ⁇ h ⁇ 1 ⁇ i ⁇ t , [ ij ] 2 ⁇ e - 1 ⁇ i + 4 ⁇ ⁇ 2 ⁇ sin ⁇ h ⁇ 1 ⁇ i
- An nk dimensional learning rate vector, ⁇ right arrow over ( ⁇ ) ⁇ can be defined via:
- the system 100 stores the updated ⁇ right arrow over ( ⁇ ) ⁇ t+1 (i.e., the mean of the distribution characterizing the temporal sub-weights) as the current temporal sub-weights 102 and the updated ⁇ t+1 (i.e., the covariance of the distribution characterizing the temporal sub-weights, estimating a joint uncertainty between the temporal sub-weights) as the current sub-weight statistics 204 .
- the system 100 stores the updated ⁇ right arrow over ( ⁇ ) ⁇ t+1 (i.e., the mean of the distribution characterizing the temporal sub-weights) as the current temporal sub-weights 102 and the updated ⁇ t+1 (i.e., the covariance of the distribution characterizing the temporal sub-weights, estimating a joint uncertainty between the temporal sub-weights) as the current sub-weight statistics 204 .
- these example diagonal covariance variational approximations store, update, and process the nk dimensional vector ⁇ right arrow over ( ⁇ ) ⁇ t stored rather than the nk ⁇ nk dimensional covariance matrix, ⁇ t . Additionally, these diagonal covariance variational approximations avoid matrix inversions, which are particularly costly calculations.
- the system 100 can employ a variational approximation constraining the covariance matrix of the Kalman Filter or Extended Kalman Filter to be a composition of a diagonal matrix with a low-rank matrix, avoiding the computation of matrix inversions.
- the system 100 can employ a variational approximation constraining the covariance matrix of the Kalman Filter or Extended Kalman Filter to be a Kronecker product of multiple matrices, each having dimensions smaller than the nk ⁇ nk dimensional covariance matrix, significantly reducing the sizes of the inverted matrices.
- FIG. 3 is a flow diagram of an example process for online model training.
- the process 300 will be described as being performed by a system of one or more computers located in one or more locations.
- an online learning system e.g., the online learning system 100 of FIG. 1 , appropriately programmed in accordance with this specification, can perform the process 300 .
- the system receives model inputs and ground truth outputs ( 302 ).
- the system can receive the model inputs and ground truth data by any of a variety of methods.
- the system can receive model inputs and ground truth data stored in memory.
- the system 100 can receive values for the model inputs and the ground truth outputs at each time step from one or more sensors that measure the model inputs and the ground truth outputs.
- the system includes a machine learning model that uses a set of model weights to predict the ground truth outputs from the model inputs.
- the system combines currently stored temporal sub-weights to obtain the current model weights ( 304 ).
- the system processes the model inputs using the machine learning model according to the current model weights to obtain output model predictions ( 306 ).
- the system includes a temporal filter model that can determine updates for the temporal sub-weights based on the model predictions, the ground truth data, the current temporal sub-weights, and currently stored statistics for the temporal statistics.
- the system uses the temporal filter model to process the model predictions and the ground truth data to determine updates for the temporal sub-weights and sub-weight statistics ( 308 ).
- the system updates the current temporal sub-weights and the current sub-weight statistics ( 310 ), e.g., using one of the techniques described above with reference to FIG. 2 .
- Embodiments of the subject matter and the functional operations described in this specification can be implemented in digital electronic circuitry, in tangibly-embodied computer software or firmware, in computer hardware, including the structures disclosed in this specification and their structural equivalents, or in combinations of one or more of them.
- Embodiments of the subject matter described in this specification can be implemented as one or more computer programs, i.e., one or more modules of computer program instructions encoded on a tangible non-transitory storage medium for execution by, or to control the operation of, data processing apparatus.
- the computer storage medium can be a machine-readable storage device, a machine-readable storage substrate, a random or serial access memory device, or a combination of one or more of them.
- the program instructions can be encoded on an artificially-generated propagated signal, e.g., a machine-generated electrical, optical, or electromagnetic signal, that is generated to encode information for transmission to suitable receiver apparatus for execution by a data processing apparatus.
- data processing apparatus refers to data processing hardware and encompasses all kinds of apparatus, devices, and machines for processing data, including by way of example a programmable processor, a computer, or multiple processors or computers.
- the apparatus can also be, or further include, special purpose logic circuitry, e.g., an FPGA (field programmable gate array) or an ASIC (application-specific integrated circuit).
- the apparatus can optionally include, in addition to hardware, code that creates an execution environment for computer programs, e.g., code that constitutes processor firmware, a protocol stack, a database management system, an operating system, or a combination of one or more of them.
- a computer program which may also be referred to or described as a program, software, a software application, an app, a module, a software module, a script, or code, can be written in any form of programming language, including compiled or interpreted languages, or declarative or procedural languages; and it can be deployed in any form, including as a stand-alone program or as a module, component, subroutine, or other unit suitable for use in a computing environment.
- a program may, but need not, correspond to a file in a file system.
- a program can be stored in a portion of a file that holds other programs or data, e.g., one or more scripts stored in a markup language document, in a single file dedicated to the program in question, or in multiple coordinated files, e.g., files that store one or more modules, sub-programs, or portions of code.
- a computer program can be deployed to be executed on one computer or on multiple computers that are located at one site or distributed across multiple sites and interconnected by a data communication network.
- engine is used broadly to refer to a software-based system, subsystem, or process that is programmed to perform one or more specific functions.
- an engine will be implemented as one or more software modules or components, installed on one or more computers in one or more locations. In some cases, one or more computers will be dedicated to a particular engine; in other cases, multiple engines can be installed and running on the same computer or computers.
- the processes and logic flows described in this specification can be performed by one or more programmable computers executing one or more computer programs to perform functions by operating on input data and generating output.
- the processes and logic flows can also be performed by special purpose logic circuitry, e.g., an FPGA or an ASIC, or by a combination of special purpose logic circuitry and one or more programmed computers.
- Computers suitable for the execution of a computer program can be based on general or special purpose microprocessors or both, or any other kind of central processing unit.
- a central processing unit will receive instructions and data from a read-only memory or a random access memory or both.
- the essential elements of a computer are a central processing unit for performing or executing instructions and one or more memory devices for storing instructions and data.
- the central processing unit and the memory can be supplemented by, or incorporated in, special purpose logic circuitry.
- a computer will also include, or be operatively coupled to receive data from or transfer data to, or both, one or more mass storage devices for storing data, e.g., magnetic, magneto-optical disks, or optical disks.
- a computer need not have such devices.
- a computer can be embedded in another device, e.g., a mobile telephone, a personal digital assistant (PDA), a mobile audio or video player, a game console, a Global Positioning System (GPS) receiver, or a portable storage device, e.g., a universal serial bus (USB) flash drive, to name just a few.
- PDA personal digital assistant
- GPS Global Positioning System
- USB universal serial bus
- Computer-readable media suitable for storing computer program instructions and data include all forms of non-volatile memory, media and memory devices, including by way of example semiconductor memory devices, e.g., EPROM, EEPROM, and flash memory devices; magnetic disks, e.g., internal hard disks or removable disks; magneto-optical disks; and CD-ROM and DVD-ROM disks.
- semiconductor memory devices e.g., EPROM, EEPROM, and flash memory devices
- magnetic disks e.g., internal hard disks or removable disks
- magneto-optical disks e.g., CD-ROM and DVD-ROM disks.
- embodiments of the subject matter described in this specification can be implemented on a computer having a display device, e.g., a CRT (cathode ray tube) or LCD (liquid crystal display) monitor, for displaying information to the user and a keyboard and a pointing device, e.g., a mouse or a trackball, by which the user can provide input to the computer.
- a display device e.g., a CRT (cathode ray tube) or LCD (liquid crystal display) monitor
- keyboard and a pointing device e.g., a mouse or a trackball
- Other kinds of devices can be used to provide for interaction with a user as well; for example, feedback provided to the user can be any form of sensory feedback, e.g., visual feedback, auditory feedback, or tactile feedback; and input from the user can be received in any form, including acoustic, speech, or tactile input.
- a computer can interact with a user by sending documents to and receiving documents from a device that is used by the user; for example, by sending web pages to a web browser on a user's device in response to requests received from the web browser.
- a computer can interact with a user by sending text messages or other forms of message to a personal device, e.g., a smartphone that is running a messaging application, and receiving responsive messages from the user in return.
- Data processing apparatus for implementing machine learning models can also include, for example, special-purpose hardware accelerator units for processing common and compute-intensive parts of machine learning training or production, i.e., inference, workloads.
- Machine learning models can be implemented and deployed using a machine learning framework, e.g., a TensorFlow framework, or a Jax framework.
- a machine learning framework e.g., a TensorFlow framework, or a Jax framework.
- Embodiments of the subject matter described in this specification can be implemented in a computing system that includes a back-end component, e.g., as a data server, or that includes a middleware component, e.g., an application server, or that includes a front-end component, e.g., a client computer having a graphical user interface, a web browser, or an app through which a user can interact with an implementation of the subject matter described in this specification, or any combination of one or more such back-end, middleware, or front-end components.
- the components of the system can be interconnected by any form or medium of digital data communication, e.g., a communication network. Examples of communication networks include a local area network (LAN) and a wide area network (WAN), e.g., the Internet.
- LAN local area network
- WAN wide area network
- the computing system can include clients and servers.
- a client and server are generally remote from each other and typically interact through a communication network. The relationship of client and server arises by virtue of computer programs running on the respective computers and having a client-server relationship to each other.
- a server transmits data, e.g., an HTML page, to a user device, e.g., for purposes of displaying data to and receiving user input from a user interacting with the device, which acts as a client.
- Data generated at the user device e.g., a result of the user interaction, can be received at the server from the device.
Abstract
Methods, systems, and apparatus, including computer programs encoded on a computer storage medium, for online training of machine learning models predicting time-series data. In one aspect, a method comprises training a machine learning model having a plurality of weights by maintaining weight data, specifying a plurality of sub-weights for each of the plurality of weights and covariance data that estimates the joint uncertainty between the sub-weights, and, at each of a plurality of time steps, receiving model inputs, processing the model inputs using the weight data to generate corresponding model outputs, receiving corresponding ground truth outputs, and updating the weight data using the corresponding ground truth outputs.
Description
- This application claims priority to U.S. Provisional Application No. 63/411,102, filed on Sep. 28, 2022. The disclosure of the prior application is considered part of and is incorporated by reference in the disclosure of this application.
- This specification relates to processing data using machine learning models.
- Machine learning models receive an input and generate an output, e.g., a predicted output, based on the received input. Some machine learning models are parametric models and generate the output based on the received input and on values of the parameters of the model.
- Some machine learning models are deep models that employ multiple layers of models to generate an output for a received input. For example, a deep neural network is a deep machine learning model that includes an output layer and one or more hidden layers that each apply a non-linear transformation to a received input to generate an output.
- This specification describes a system implemented as computer programs on one or more computers in one or more locations that can perform online training of a machine learning model for predicting time-series data.
- Particular embodiments of the subject matter described in this specification can be implemented so as to realize one or more of the following advantages.
- The described methods are able to perform accurate online learning for a wider range of time-series applications compared to conventional methods for online learning. Unlike conventional online learning methods, which commonly rely on heuristic approaches for adapting to fluctuations in model parameters over time, the described methods can perform exact or approximate Bayesian inference of model parameters for time-series data with an intricate temporal structure, such as fluctuations across multiple time-scales. By representing the model parameters as a combination of multiple separate stochastic processes that can behave differently over distinct time-scales, the described methods can learn the model parameters more accurately when modeling time-series data, even when the data has an intricate temporal structure.
- The details of one or more embodiments of the subject matter of this specification are set forth in the accompanying drawings and the description below. Other features, aspects, and advantages of the subject matter will become apparent from the description, the drawings, and the claims.
-
FIG. 1 shows an example online learning system. -
FIG. 2 shows an example temporal weight update system. -
FIG. 3 is a flow diagram of an example process for online model training. - Like reference numbers and designations in the various drawings indicate like elements.
-
FIG. 1 shows an exampleonline learning system 100. Theonline learning system 100 is an example of a system implemented as computer programs on one or more computers in one or more locations in which the systems, components, and techniques described below are implemented. - The
system 100 operates in conjunction with amachine learning model 104. - The machine learning model is configured to process
model inputs 112 in accordance withmodel weights 110 to producemodel outputs 114 that are predictive ofground truth data 116. In other words, themodel output 114 for a givenmodel input 112 is a prediction of a corresponding ground truth output for themodel input 112 for a machine learning task, i.e., of an actual output that should be generated by performing the machine learning task on themodel input 112. - The
model inputs 112,model outputs 114, andground truth data 116 are instances of time-series data. That is, thesystem 100 receives arespective model input 112 at each of multiple time steps in a sequence of time steps. Thesystem 100 then generates amodel output 114 for themodel input 112 that was received at the time step and also receivesground truth data 116 for themodel input 112. - The
system 100 can receive themodel inputs 112 andground truth data 116 by any of a variety of methods. For example, thesystem 100 can receivemodel inputs 112 andground truth data 116 stored in memory. As another example, thesystem 100 can receive values for themodel inputs 112 and theground truth outputs 116 at each time step from one or more sensors that measure themodel inputs 112 and theground truth outputs 116. - The
model 104 can be trained to perform any kind of machine learning task, i.e., can be configured to receive any kind ofdigital data input 112 and to generate any kind of score, classification, orregression output 114 based on theinput 112. - In some cases, the
model 104 is a neural network that is configured to perform an image processing task, i.e., receive an image as themodel input 112 and to process the intensity values of the pixels of theinput image 112 to generate amodel output 114 for theinput image 112. For example, the task may be image classification and theoutput 114 generated by themodel 104 for theinput image 112 may be scores for each of a set of object categories, with each score representing an estimated likelihood that theinput image 112 contains an image of an object belonging to the category. As another example, the task can be image embedding generation and theoutput 114 generated by themodel 104 can be a numeric embedding of theinput image 112. As yet another example, the task can be object detection and theoutput 114 generated by themodel 104 can identify locations in theinput image 112 at which particular types of objects are depicted. As yet another example, the task can be image segmentation and theoutput 114 generated by themodel 104 can assign each pixel of theinput image 112 to a category from a set of categories. - As another example, if the
inputs 112 to themodel 104 are Internet resources (e.g., web pages), documents, or portions of documents or features extracted from Internet resources, documents, or portions of documents, the task can be to classify the resource or document, i.e., theoutput 114 generated by themodel 104 for a given Internet resource, document, or portion of a document may be a score for each of a set of topics, with each score representing an estimated likelihood that the Internet resource, document, or document portion is about the topic. - As another example, if the
inputs 112 to themodel 104 are features of an impression context for a particular advertisement, theoutput 114 generated by themodel 104 may be a score that represents an estimated likelihood that the particular advertisement will be clicked on. - As another example, if the
inputs 112 to themodel 104 are features of a personalized recommendation for a user, e.g., features characterizing the context for the recommendation, e.g., features characterizing previous actions taken by the user, theoutput 114 generated by themodel 104 may be a score for each of a set of content items, with each score representing an estimated likelihood that the user will respond favorably to being recommended the content item. - As another example, if the input to the
model 104 is a sequence of text in one language, theoutput 114 generated by themodel 104 may be a score for each of a set of pieces of text in another language, with each score representing an estimated likelihood that the piece of text in the other language is a proper translation of the input text into the other language. - As another example, the task may be an audio processing task. For example, if the
input 112 to themodel 104 is a sequence representing a spoken utterance, theoutput 114 generated by themodel 104 may be a score for each of a set of pieces of text, each score representing an estimated likelihood that the piece of text is the correct transcript for the utterance. As another example, the task may be a keyword spotting task where, if theinput 112 to themodel 104 is a sequence representing a spoken utterance, theoutput 114 generated by themodel 104 can indicate whether a particular word or phrase (“hotword”) was spoken in the utterance. As another example, if theinput 112 to themodel 104 is a sequence representing a spoken utterance, theoutput 114 generated by themodel 104 can identify the natural language in which the utterance was spoken. - As another example, the task can be a natural language processing or understanding task, e.g., an entailment task, a paraphrase task, a textual similarity task, a sentiment task, a sentence completion task, a grammaticality task, and so on, that operates on a sequence of text in some natural language.
- As another example, the task can be a text to speech task, where the
input 112 is text in a natural language or features of text in a natural language and themodel output 114 is a spectrogram or other data defining audio of the text being spoken in the natural language. - As another example, the task can be a health prediction task, where the
input 112 is electronic health record data for a patient and theoutput 114 is a prediction that is relevant to the future health of the patient, e.g., a predicted treatment that should be prescribed to the patient, the likelihood that an adverse health event will occur to the patient, or a predicted diagnosis for the patient. - As another example, the task can be an agent control task, where the
input 112 is an observation characterizing the state of an environment and theoutput 114 defines an action to be performed by the agent in response to the observation. The agent can be, e.g., a real-world or simulated robot, a control system for an industrial facility, or a control system that controls a different kind of agent. - As another example, the task can be a content recommendation task, where the
input 112 is data characterizing a content recommendation context, i.e. the context in which the recommendation is made and in which themodel 104 operates, and theoutput 114 is one or more scores representing a recommendation of one or more content items. The recommended content items can be any appropriate type of content item, e.g., a video, an electronic book, a software application, a news article, a web page, a music content item, e.g., a song, a web page or other resource describing a product, and so on. For example, themodel 104 can generatecontent recommendations 114 during a conversation between a user and one or more other entities, e.g., another user or a chatbot or both. As another example, themodel 104 system can generatecontent recommendations 114 in response to search queries submitted by a user to a search engine, e.g., an Internet search engine that searches web pages on the Internet, an image search engine that searches a repository of images, a video search engine that searches a repository of videos, an app store search engine that searches a repository of software applications that are available for download, an electronic book store search engine that searches a repository of electronic books, and so on. - As another example, the task can be a hardware fault prediction task, where the
input 112 is data characterizing the behavior of a hardware device, e.g., signals measured from the hardware device, and theoutput 114 is a prediction that is relevant to future failures of the hardware device, e.g., a predicted time until the next failure of the hardware device, a likelihood that the hardware device will encounter a fault in a future time span, or a predicted state of the device. - As another example, the task can be a time-series prediction task, where the
input 112 is data characterizing past values of a time-series and theoutput 114 is a prediction of future values of the time-series. As a further example, the task can be a human activity prediction task, where the time-series of data characterizing a user's exercise activity over time as collected by a wearable device and theoutput 114 predicts future exercise activities. As a further example, the task can be a location prediction task, where the time-series of data characterizing a user's location over time as collected by a device, such as a phone, and theoutput 114 predicts future locations. - Generally, the
model 104 can be any type of parameterized machine learning model, e.g., a linear model, a perceptron with a non-linear activation function, or a neural network with multiple layers of non-linearities. - This specification generally describes the
system 100 as performing online training of themachine learning model 104 to perform a machine learning task. The training is referred to as “online” training because thesystem 100 can update themodel weights 110 after one or more time steps for which the model is used to makeoutput predictions 114. - After the
model 104 generates amodel output 114, the system receivesground truth data 116 and the system uses themodel output 114 andground truth data 116 to update themodel weights 110 and train themodel 104. - The
ground truth data 116 corresponds to themodel inputs 112 and provides a corresponding example of whatmodel output 114 themodel 104 should produce when processing themodel input 112. - During training, the
system 100 processes themodel output 114 and the correspondingground truth data 116 based on an objective function appropriate for measuring how closely themodel output 114 replicates the correspondingground truth data 116 for the purposes of the task performed by themodel 104. For example, if themodel 104 performs a regression task, the objective function can be L2 loss. As another example, if themodel 104 performs a classification task, the objective function can be cross-entropy loss. - The
system 100 can update model weight updates 110 to perform online training of themodel 104. To perform online training of themodel 104 using time-series model inputs 112 and ground-truth data 116, thesystem 100 obtains a prediction from themodel 104 for each of one or more time-steps within the time-series inputs 112 andground truth data 116. Thesystem 100 compares the one ormore model outputs 114 to the corresponding ground truth data using the appropriate objective function for the machine learning task. Thesystem 100 then updates themodel weights 110 such that themodel 104 processessubsequent inputs 112 to produce predictive model outputs 114 at future time steps. Theoutputs 114 are referred to as “predictive” because the outputs can closely replicate correspondingground truth data 116 as measured by the appropriate objective function for the machine learning task. - If the
model inputs 112 or theground truth data 116 are time-series data with intricate temporal structures, themodel 104 can requiredifferent model weights 110 at different times to producepredictive outputs 114. For example, themodel 104 can require time-varyingmodel weights 110 in certain meteorological prediction tasks modeling systems affected by climate change. For example, themodel inputs 112 or theground truth data 116 can be stochastic processes that fluctuate across multiple time scales and themodel 104 can requiredifferent model weights 110 at different times in a variety of real-word tasks. For example, themodel inputs 112 and theground truth data 116 can fluctuate over different time scales in certain meteorological prediction tasks, where themodel inputs 112 and ground truth data are meteorological data. As another example, themodel inputs 112 and the ground truth data can fluctuate over different time scales in machine learning tasks for predicting the state or properties of electronic hardware, where themodel inputs 112 and theground truth data 116 characterize the behavior (e.g. signals measured from the hardware) or the properties (e.g., resistance, conductivity, failure probability) of electronic hardware. As a further example, themodel inputs 112 or theground truth data 116 can be instances of 1/f noise. - To usefully update the
model weights 110 at different times, thesystem 100 performs Bayesian inference characterizing themodel weights 110 as a time-varying stochastic process. In particular, thesystem 100 performs Bayesian inference characterizing themodel weights 110 as a combination of multiple time-varying stochastic sub-processes, with each sub-process characterized by one of a set oftemporal sub-weights 102. Thesystem 100 characterizes themodel weights 110 as a combination of the set oftemporal sub-weights 102 and performs Bayesian inference of thetemporal sub-weights 102 that characterizes each of thetemporal sub-weights 102 as time-varying stochastic processes. Thesystem 100 stores thetemporal sub-weights 102. In some implementations, each of thetemporal sub-weights 102 can correspond to exactly one of themodel weights 110. - The
system 100 can characterize thetemporal sub-weights 102 as stochastic processes with different time dependencies, enabling thesystem 100 to characterize themodel weights 110 as a stochastic process that fluctuates appropriately across multiple timescales. - In some implementations, the
system 100 stores multiple sets oftemporal sub-weights 102 and combines the sets ofsub-weights 102 by summation. Representing themodel weights 110 at time t as the stochastic variable {right arrow over (θ)}t and the i-th set oftemporal sub-weights 102 as the stochastic variable {right arrow over (z)}i,t, some implementations therefore determine themodel weights 110 by performing the summation: -
- In some implementations, the
system 100 characterizes thetemporal sub-weights 102 as Ornstein-Uhlenbeck processes. In some implementations, thesystem 100 characterizes thetemporal sub-weights 102 as particularly specialized Ornstein-Uhlenbeck processes that, for a chosen γ>1 and with {right arrow over (W)}i denoting a standard multi-dimensional Wiener process (Brownian motion), satisfy the equation: -
- In some implementations, the
system 100 characterizes thetemporal sub-weights 102 as the above specialized Ornstein-Uhlenbeck processes and determines themodel weights 110 by summation of thetemporal sub-weights 102, and thesystem 100 is said to characterize themodel weights 110 as 1/f noise. - The
system 100 includes anupdate system 106 to update thetemporal sub-weights 102 in accordance with the performed Bayesian inference. Theupdate system 106 can process the model outputs 114 andground truth data 116 from one or more time steps to generatesub-weight updates 108. Thesystem 100 can apply thesesub-weight updates 108 to the collection oftemporal sub-weights 102. - The
system 100 combines the sets oftemporal sub-weights 102 to produce themodel weights 110. - The
machine learning model 104 uses the resultingmodel weights 110 to produce the model outputs 114 for one or more time steps. Thesystem 100 processes the model outputs 114 and the correspondingground truth data 116 for the same time steps to update thetemporal sub-weights 102. - The
system 100 uses the newly updatedtemporal sub-weights 102 during later time-steps. By updating thetemporal sub-weights 102 in this manner, themodel 104 can use the resultingmodel weights 110 to make accurate predictions, even when themodel inputs 112 and theground truth data 116 are time-series that fluctuate over multiple time-scales. -
FIG. 2 shows an example temporalweight update system 106. The temporalweight update system 106 is an example of a system implemented as computer programs on one or more computers in one or more locations in which the systems, components, and techniques described below are implemented. - The temporal
weight update system 106 includes atemporal filter model 202 and storessub-weight statistics 204. Thesub-weight statistics 204 include covariance data estimating joint uncertainty between the temporal sub-weights. - The
temporal filter model 202 performs the computation required for Bayesian inference of thetemporal sub-weights 102 as stochastic processes. Thetemporal filter model 202 is configured to process the model outputs 114,ground truth data 116, and storedsub-weight statistics 204 to generate thesub-weight updates 108 and to update the storedsub-weight statistics 204. - The
temporal filter model 202 can be chosen to perform exact Bayesian inference of themodel weights 110, based on properties of themachine learning model 104 and based on how thesystem 100 characterizes themodel weights 110. - As an example, in implementations where the
machine learning model 104 is a linear model, predicting scalar output yt based on inputs {right arrow over (x)}t and model weights {right arrow over (θ)}t, and where thesystem 100 characterizes themodel weights 110 and thetemporal sub-weights 102 as forming a linear dynamic system, thetemporal filter model 202 can be a Kalman Filter that can perform online exact Bayesian inference. In this linear example, the linearmachine learning model 104 predicts scalar output yt based on n dimensional inputs {right arrow over (x)}t and model weights {right arrow over (θ)}t, and the Kalman Filter performs exact Bayesian inference over k sets of temporal sub-weights, characterizing thetemporal sub-weights 102 as having a Gaussian distribution with mean {right arrow over (μ)}t and covariance Σt. In this linear example, the Kalman Filter characterizes thetemporal sub-weights 102 as being distributed according to the equation: - Where {right arrow over (Z)}t is an nk dimensional vector representing every temporal sub-weight. The notation [ij] will be used throughout to denote a combined index denoting a model weight index, j, and a temporal sub-weight set index, i. One such combined index can be computed following:
-
[ij]=ni+j - Using this common index, {right arrow over (Z)}t can be defined via the relation:
-
Z t,[ij] =z i,t,j - A multiplexed copy of the inputs, {right arrow over (X)}t, can be defined via the relation:
-
{right arrow over (X)} t,[ij] ={right arrow over (x)} t,j - An nk×nk projection matrix PX,t orthogonal to the multiplexed inputs, {right arrow over (X)}t, can be defined via the relation:
-
- A diagonal nk×nk decay factor matrix D can be defined via the relation:
-
- A diagonal nk×nk noise accumulation matrix N can be defined via the relation:
-
- In this linear example, exact Bayesian inference following the Kalman Filter predicts yt by performing the computation:
-
ŷ t ={right arrow over (X)} t T{right arrow over (μ)}t - The linear Kalman Filter performs the updates:
-
- In this example, the
system 100 stores the updated {right arrow over (μ)}t+1 (i.e., the mean of the distribution characterizing the temporal sub-weights) as the currenttemporal sub-weights 102 and the updated Σt+1 (i.e., the covariance of the distribution characterizing the temporal sub-weights, estimating a joint uncertainty between the temporal sub-weights) as the currentsub-weight statistics 204. - The
temporal filter model 202 can also be chosen to perform approximate Bayesian inference of themodel weights 110. As an example, in implementations where themachine learning model 104 is a non-linear model and where thesystem 100 characterizes themodel weights 110 and thetemporal sub-weights 102 as forming a linear dynamic system, thetemporal filter model 202 can be an Extended Kalman Filter to perform approximate Bayesian inference. An Extended Kalman Filter involves linearizing the non-linearmachine learning model 104 by employing a local linear approximation based on a Jacobian of thenon-linear model 104. - In this non-linear example, the
non-linear model 104 produces an output ŷt that predicts an l-dimensional vector of sufficient statistics regarding the ground truth data, {right arrow over (T)}y,t. In a classification task, this output ŷt can be a vector of predicted class probabilities while the sufficient statistics, {right arrow over (T)}y,t, can be a one-hot vector encoding the ground truth class. The non-linear model can perform the computation: -
{right arrow over (y)} t =f({right arrow over (x)} t,{right arrow over (μ)}t) - In this non-linear example, the Extended Kalman Filter performs approximate Bayesian inference over k sets of temporal sub-weights characterizing the
temporal sub-weights 102 as having a Gaussian distribution with mean {right arrow over (μ)}t and covariance Σt. In this non-linear example, the Extended Kalman Filter characterizes thetemporal sub-weights 102 as being distributed according to the same equation as above: - During application of the Extended Kalman Filter, a local linear approximation, {tilde over (f)}, is computed following:
-
f({right arrow over (x)} t ,{right arrow over (Z)} t)≈{tilde over (f)}({right arrow over (x)} t ,{right arrow over (Z)} t)=f({right arrow over (x)} t,{right arrow over (μ)}t)+J f,{right arrow over (μ)}t ({right arrow over (Z)} t−{right arrow over (μ)}t) - Where Jf,{right arrow over (μ)}
t is the Jacobian of f with respect to {right arrow over (Z)}t evaluated at {right arrow over (μ)}t and is a l×nk matrix. - An l×l conditional outcome variance matrix, R can be defined via the relation:
-
- The non-linear Extended Kalman Filter performs the updates:
-
{right arrow over (μ)}t+1 +D({right arrow over (μ)}t+Σt J f,{right arrow over (μ)}t T(J f,{right arrow over (μ)}t Σt J f,{right arrow over (μ)}t T +R)−1({right arrow over (T)} y,t −ŷ t)) -
Σt+1 =D(Σt−Σt J f,{right arrow over (μ)}t T(J f,{right arrow over (μ)}t Σt J f,{right arrow over (μ)}t T +R)−1 J f,{right arrow over (μ)}t Σt)−1 D+N - As in the previous example, the
system 100 stores the updated {right arrow over (μ)}t+1 (i.e., the mean of the distribution characterizing the temporal sub-weights) as the currenttemporal sub-weights 102 and the updated Σt+1 (i.e., the covariance of the distribution characterizing the temporal sub-weights, estimating a joint uncertainty between the temporal sub-weights) as the currentsub-weight statistics 204. - To improve computational efficiency, the
temporal filter model 202 can be any of a variety of variational approximations of a Kalman Filter or of an Extended Kalman Filter. As an example, thesystem 100 can employ a variational approximation that the covariance matrix of the Kalman Filter or Extended Kalman Filter is constrained to be a diagonal covariance matrix. In these diagonal covariance variational approximations, an nk dimensional variance vector, {right arrow over (σ)}t, is updated and stored rather than the full covariance matrix, Σt. - As one example, the linear Kalman Filter above utilizing this diagonal covariance variational approximation performs the variance update:
-
- Where Ω is defined via:
-
- An nk dimensional learning rate vector, {right arrow over (α)}, can be defined via:
-
- The linear Kalman Filter utilizing this diagonal covariance variational approximation performs the mean update:
-
- As in the previous examples, the
system 100 stores the updated {right arrow over (μ)}t+1 (i.e., the mean of the distribution characterizing the temporal sub-weights) as the currenttemporal sub-weights 102 and the updated Σt+1 (i.e., the covariance of the distribution characterizing the temporal sub-weights, estimating a joint uncertainty between the temporal sub-weights) as the currentsub-weight statistics 204. - As another example, the non-linear Extended Kalman Filter above utilizing this diagonal covariance variational approximation performs the variance updates:
-
- As in the previous examples, the
system 100 stores the updated {right arrow over (μ)}t+1 (i.e., the mean of the distribution characterizing the temporal sub-weights) as the currenttemporal sub-weights 102 and the updated Σt+1 (i.e., the covariance of the distribution characterizing the temporal sub-weights, estimating a joint uncertainty between the temporal sub-weights) as the currentsub-weight statistics 204. - It should be noted that these example diagonal covariance variational approximations store, update, and process the nk dimensional vector {right arrow over (σ)}t stored rather than the nk×nk dimensional covariance matrix, Σt. Additionally, these diagonal covariance variational approximations avoid matrix inversions, which are particularly costly calculations.
- As another example, the
system 100 can employ a variational approximation constraining the covariance matrix of the Kalman Filter or Extended Kalman Filter to be a composition of a diagonal matrix with a low-rank matrix, avoiding the computation of matrix inversions. As another example, thesystem 100 can employ a variational approximation constraining the covariance matrix of the Kalman Filter or Extended Kalman Filter to be a Kronecker product of multiple matrices, each having dimensions smaller than the nk×nk dimensional covariance matrix, significantly reducing the sizes of the inverted matrices. -
FIG. 3 is a flow diagram of an example process for online model training. For convenience, theprocess 300 will be described as being performed by a system of one or more computers located in one or more locations. For example, an online learning system, e.g., theonline learning system 100 ofFIG. 1 , appropriately programmed in accordance with this specification, can perform theprocess 300. - The system receives model inputs and ground truth outputs (302). The system can receive the model inputs and ground truth data by any of a variety of methods. For example, the system can receive model inputs and ground truth data stored in memory. As another example, the
system 100 can receive values for the model inputs and the ground truth outputs at each time step from one or more sensors that measure the model inputs and the ground truth outputs. - The system includes a machine learning model that uses a set of model weights to predict the ground truth outputs from the model inputs. The system combines currently stored temporal sub-weights to obtain the current model weights (304).
- The system processes the model inputs using the machine learning model according to the current model weights to obtain output model predictions (306).
- The system includes a temporal filter model that can determine updates for the temporal sub-weights based on the model predictions, the ground truth data, the current temporal sub-weights, and currently stored statistics for the temporal statistics. The system uses the temporal filter model to process the model predictions and the ground truth data to determine updates for the temporal sub-weights and sub-weight statistics (308).
- The system updates the current temporal sub-weights and the current sub-weight statistics (310), e.g., using one of the techniques described above with reference to
FIG. 2 . - This specification uses the term “configured” in connection with systems and computer program components. For a system of one or more computers to be configured to perform particular operations or actions means that the system has installed on it software, firmware, hardware, or a combination of them that in operation cause the system to perform the operations or actions. For one or more computer programs to be configured to perform particular operations or actions means that the one or more programs include instructions that, when executed by data processing apparatus, cause the apparatus to perform the operations or actions.
- Embodiments of the subject matter and the functional operations described in this specification can be implemented in digital electronic circuitry, in tangibly-embodied computer software or firmware, in computer hardware, including the structures disclosed in this specification and their structural equivalents, or in combinations of one or more of them. Embodiments of the subject matter described in this specification can be implemented as one or more computer programs, i.e., one or more modules of computer program instructions encoded on a tangible non-transitory storage medium for execution by, or to control the operation of, data processing apparatus. The computer storage medium can be a machine-readable storage device, a machine-readable storage substrate, a random or serial access memory device, or a combination of one or more of them. Alternatively or in addition, the program instructions can be encoded on an artificially-generated propagated signal, e.g., a machine-generated electrical, optical, or electromagnetic signal, that is generated to encode information for transmission to suitable receiver apparatus for execution by a data processing apparatus.
- The term “data processing apparatus” refers to data processing hardware and encompasses all kinds of apparatus, devices, and machines for processing data, including by way of example a programmable processor, a computer, or multiple processors or computers. The apparatus can also be, or further include, special purpose logic circuitry, e.g., an FPGA (field programmable gate array) or an ASIC (application-specific integrated circuit). The apparatus can optionally include, in addition to hardware, code that creates an execution environment for computer programs, e.g., code that constitutes processor firmware, a protocol stack, a database management system, an operating system, or a combination of one or more of them.
- A computer program, which may also be referred to or described as a program, software, a software application, an app, a module, a software module, a script, or code, can be written in any form of programming language, including compiled or interpreted languages, or declarative or procedural languages; and it can be deployed in any form, including as a stand-alone program or as a module, component, subroutine, or other unit suitable for use in a computing environment. A program may, but need not, correspond to a file in a file system. A program can be stored in a portion of a file that holds other programs or data, e.g., one or more scripts stored in a markup language document, in a single file dedicated to the program in question, or in multiple coordinated files, e.g., files that store one or more modules, sub-programs, or portions of code. A computer program can be deployed to be executed on one computer or on multiple computers that are located at one site or distributed across multiple sites and interconnected by a data communication network.
- In this specification the term “engine” is used broadly to refer to a software-based system, subsystem, or process that is programmed to perform one or more specific functions. Generally, an engine will be implemented as one or more software modules or components, installed on one or more computers in one or more locations. In some cases, one or more computers will be dedicated to a particular engine; in other cases, multiple engines can be installed and running on the same computer or computers.
- The processes and logic flows described in this specification can be performed by one or more programmable computers executing one or more computer programs to perform functions by operating on input data and generating output. The processes and logic flows can also be performed by special purpose logic circuitry, e.g., an FPGA or an ASIC, or by a combination of special purpose logic circuitry and one or more programmed computers.
- Computers suitable for the execution of a computer program can be based on general or special purpose microprocessors or both, or any other kind of central processing unit. Generally, a central processing unit will receive instructions and data from a read-only memory or a random access memory or both. The essential elements of a computer are a central processing unit for performing or executing instructions and one or more memory devices for storing instructions and data. The central processing unit and the memory can be supplemented by, or incorporated in, special purpose logic circuitry. Generally, a computer will also include, or be operatively coupled to receive data from or transfer data to, or both, one or more mass storage devices for storing data, e.g., magnetic, magneto-optical disks, or optical disks. However, a computer need not have such devices. Moreover, a computer can be embedded in another device, e.g., a mobile telephone, a personal digital assistant (PDA), a mobile audio or video player, a game console, a Global Positioning System (GPS) receiver, or a portable storage device, e.g., a universal serial bus (USB) flash drive, to name just a few.
- Computer-readable media suitable for storing computer program instructions and data include all forms of non-volatile memory, media and memory devices, including by way of example semiconductor memory devices, e.g., EPROM, EEPROM, and flash memory devices; magnetic disks, e.g., internal hard disks or removable disks; magneto-optical disks; and CD-ROM and DVD-ROM disks.
- To provide for interaction with a user, embodiments of the subject matter described in this specification can be implemented on a computer having a display device, e.g., a CRT (cathode ray tube) or LCD (liquid crystal display) monitor, for displaying information to the user and a keyboard and a pointing device, e.g., a mouse or a trackball, by which the user can provide input to the computer. Other kinds of devices can be used to provide for interaction with a user as well; for example, feedback provided to the user can be any form of sensory feedback, e.g., visual feedback, auditory feedback, or tactile feedback; and input from the user can be received in any form, including acoustic, speech, or tactile input. In addition, a computer can interact with a user by sending documents to and receiving documents from a device that is used by the user; for example, by sending web pages to a web browser on a user's device in response to requests received from the web browser. Also, a computer can interact with a user by sending text messages or other forms of message to a personal device, e.g., a smartphone that is running a messaging application, and receiving responsive messages from the user in return.
- Data processing apparatus for implementing machine learning models can also include, for example, special-purpose hardware accelerator units for processing common and compute-intensive parts of machine learning training or production, i.e., inference, workloads.
- Machine learning models can be implemented and deployed using a machine learning framework, e.g., a TensorFlow framework, or a Jax framework.
- Embodiments of the subject matter described in this specification can be implemented in a computing system that includes a back-end component, e.g., as a data server, or that includes a middleware component, e.g., an application server, or that includes a front-end component, e.g., a client computer having a graphical user interface, a web browser, or an app through which a user can interact with an implementation of the subject matter described in this specification, or any combination of one or more such back-end, middleware, or front-end components. The components of the system can be interconnected by any form or medium of digital data communication, e.g., a communication network. Examples of communication networks include a local area network (LAN) and a wide area network (WAN), e.g., the Internet.
- The computing system can include clients and servers. A client and server are generally remote from each other and typically interact through a communication network. The relationship of client and server arises by virtue of computer programs running on the respective computers and having a client-server relationship to each other. In some embodiments, a server transmits data, e.g., an HTML page, to a user device, e.g., for purposes of displaying data to and receiving user input from a user interacting with the device, which acts as a client. Data generated at the user device, e.g., a result of the user interaction, can be received at the server from the device.
- While this specification contains many specific implementation details, these should not be construed as limitations on the scope of any invention or on the scope of what may be claimed, but rather as descriptions of features that may be specific to particular embodiments of particular inventions. Certain features that are described in this specification in the context of separate embodiments can also be implemented in combination in a single embodiment. Conversely, various features that are described in the context of a single embodiment can also be implemented in multiple embodiments separately or in any suitable subcombination. Moreover, although features may be described above as acting in certain combinations and even initially be claimed as such, one or more features from a claimed combination can in some cases be excised from the combination, and the claimed combination may be directed to a subcombination or variation of a sub combination.
- Similarly, while operations are depicted in the drawings and recited in the claims in a particular order, this should not be understood as requiring that such operations be performed in the particular order shown or in sequential order, or that all illustrated operations be performed, to achieve desirable results. In certain circumstances, multitasking and parallel processing may be advantageous. Moreover, the separation of various system modules and components in the embodiments described above should not be understood as requiring such separation in all embodiments, and it should be understood that the described program components and systems can generally be integrated together in a single software product or packaged into multiple software products.
- Particular embodiments of the subject matter have been described. Other embodiments are within the scope of the following claims. For example, the actions recited in the claims can be performed in a different order and still achieve desirable results. As one example, the processes depicted in the accompanying figures do not necessarily require the particular order shown, or sequential order, to achieve desirable results. In some cases, multitasking and parallel processing may be advantageous.
Claims (20)
1. A method implemented by one or more computers, comprising:
maintaining weight data for a machine learning model having a plurality of weights, wherein the machine learning model is configured to receive a model input and to process the model input in accordance with the weights to generate a model output for the model input, the weight data specifying:
for each of the plurality of weights, a plurality of sub-weights, and
covariance data that estimates the joint uncertainty between the sub-weights for the plurality of weights;
at each of the plurality of time steps:
receiving one or more model inputs;
processing each of the one or more model inputs using the plurality of sub-weights in the weight data to generate a respective model output for the model input;
receiving a respective ground truth output for each of the one or more model inputs; and
performing online learning by updating the plurality of sub-weights and the covariance data in the weight data using the respective ground truth outputs for the one or more model inputs.
2. The method of claim 1 , wherein processing each of the one or more model inputs using the plurality of sub-weights in the weight data to generate a respective model output for the model input comprises:
for each weight, summing the sub-weights for the weight to generate a combined weight; and
processing each of the one or more model inputs in accordance with the combined weights to generate the respective model output for the model input.
3. The method of claim 1 wherein the machine learning model is a linear model and wherein performing online learning by updating the plurality of sub-weights and the covariance data in the weight data using the respective ground truth outputs for the one or more model inputs comprises:
updating the sub-weights and the covariance data using a Kalman Filter (KF) update.
4. The method of claim 1 , wherein the machine learning model is a non-linear model and wherein performing online learning by updating the plurality of sub-weights and the covariance data in the weight data using the respective ground truth outputs for the one or more model inputs comprises:
updating the sub-weights and the covariance data by using a local linear approximation of the model for each of the model inputs as input to a Kalman Filter (KF) update.
5. The method of claim 4 , wherein updating the sub-weights and the covariance data by using a local linear approximation of the model as input to a Kalman Filter (KF) update comprises:
using a local linear approximation of the model for each of the model inputs and, for each of the model inputs, a variance of the ground truth output for the model input conditioned on the model output for the model input as input to a Kalman Filter update.
6. The method of claim 1 , wherein the covariance data is an approximation of a covariance matrix of the sub-weights that is constrained to be diagonal.
7. The method of claim 1 , wherein performing online learning by updating the plurality of sub-weights and the covariance data in the weight data using the respective ground truth outputs for the one or more model inputs comprises:
updating the sub-weights and covariance data using a variational approximation of a Kalman Filter model or an Extended Kalman Filter model.
8. A system, comprising:
one or more computers; and
one or more storage devices communicatively coupled to the one or more computers, wherein the one or more storage devices store instructions that, when executed by the one or more computers, cause the one or more computers to perform operations, the operations comprising:
maintaining weight data for a machine learning model having a plurality of weights, wherein the machine learning model is configured to receive a model input and to process the model input in accordance with the weights to generate a model output for the model input, the weight data specifying:
for each of the plurality of weights, a plurality of sub-weights, and
covariance data that estimates the joint uncertainty between the sub-weights for the plurality of weights;
at each of the plurality of time steps:
receiving one or more model inputs;
processing each of the one or more model inputs using the plurality of sub-weights in the weight data to generate a respective model output for the model input;
receiving a respective ground truth output for each of the one or more model inputs; and
performing online learning by updating the plurality of sub-weights and the covariance data in the weight data using the respective ground truth outputs for the one or more model inputs.
9. The system of claim 8 , wherein processing each of the one or more model inputs using the plurality of sub-weights in the weight data to generate a respective model output for the model input comprises:
for each weight, summing the sub-weights for the weight to generate a combined weight; and
processing each of the one or more model inputs in accordance with the combined weights to generate the respective model output for the model input.
10. The system of claim 8 wherein the machine learning model is a linear model and wherein performing online learning by updating the plurality of sub-weights and the covariance data in the weight data using the respective ground truth outputs for the one or more model inputs comprises:
updating the sub-weights and the covariance data using a Kalman Filter (KF) update.
11. The system of claim 8 , wherein the machine learning model is a non-linear model and wherein performing online learning by updating the plurality of sub-weights and the covariance data in the weight data using the respective ground truth outputs for the one or more model inputs comprises:
updating the sub-weights and the covariance data by using a local linear approximation of the model for each of the model inputs as input to a Kalman Filter (KF) update.
12. The system of claim 11 , wherein updating the sub-weights and the covariance data by using a local linear approximation of the model as input to a Kalman Filter (KF) update comprises:
using a local linear approximation of the model for each of the model inputs and, for each of the model inputs, a variance of the ground truth output for the model input conditioned on the model output for the model input as input to a Kalman Filter update.
13. The system of claim 8 , wherein the covariance data is an approximation of a covariance matrix of the sub-weights that is constrained to be diagonal.
14. The system of claim 8 , wherein performing online learning by updating the plurality of sub-weights and the covariance data in the weight data using the respective ground truth outputs for the one or more model inputs comprises:
updating the sub-weights and covariance data using a variational approximation of a Kalman Filter model or an Extended Kalman Filter model.
15. One or more non-transitory computer storage media storing instructions that when executed by one or more computers cause the one or more computers to perform operations, the operations comprising:
maintaining weight data for a machine learning model having a plurality of weights, wherein the machine learning model is configured to receive a model input and to process the model input in accordance with the weights to generate a model output for the model input, the weight data specifying:
for each of the plurality of weights, a plurality of sub-weights, and
covariance data that estimates the joint uncertainty between the sub-weights for the plurality of weights;
at each of the plurality of time steps:
receiving one or more model inputs;
processing each of the one or more model inputs using the plurality of sub-weights in the weight data to generate a respective model output for the model input;
receiving a respective ground truth output for each of the one or more model inputs; and
performing online learning by updating the plurality of sub-weights and the covariance data in the weight data using the respective ground truth outputs for the one or more model inputs.
16. The non-transitory computer storage media of claim 15 , wherein processing each of the one or more model inputs using the plurality of sub-weights in the weight data to generate a respective model output for the model input comprises:
for each weight, summing the sub-weights for the weight to generate a combined weight; and
processing each of the one or more model inputs in accordance with the combined weights to generate the respective model output for the model input.
17. The non-transitory computer storage media of claim 15 wherein the machine learning model is a linear model and wherein performing online learning by updating the plurality of sub-weights and the covariance data in the weight data using the respective ground truth outputs for the one or more model inputs comprises:
updating the sub-weights and the covariance data using a Kalman Filter (KF) update.
18. The non-transitory computer storage media of claim 15 , wherein the machine learning model is a non-linear model and wherein performing online learning by updating the plurality of sub-weights and the covariance data in the weight data using the respective ground truth outputs for the one or more model inputs comprises:
updating the sub-weights and the covariance data by using a local linear approximation of the model for each of the model inputs as input to a Kalman Filter (KF) update.
19. The non-transitory computer storage media of claim 18 , wherein updating the sub-weights and the covariance data by using a local linear approximation of the model as input to a Kalman Filter (KF) update comprises:
using a local linear approximation of the model for each of the model inputs and, for each of the model inputs, a variance of the ground truth output for the model input conditioned on the model output for the model input as input to a Kalman Filter update.
20. The non-transitory computer storage media of claim 15 , wherein performing online learning by updating the plurality of sub-weights and the covariance data in the weight data using the respective ground truth outputs for the one or more model inputs comprises:
updating the sub-weights and covariance data using a variational approximation of a Kalman Filter model or an Extended Kalman Filter model.
Priority Applications (1)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US18/477,525 US20240119366A1 (en) | 2022-09-28 | 2023-09-28 | Online training of machine learning models using bayesian inference over noise |
Applications Claiming Priority (2)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US202263411102P | 2022-09-28 | 2022-09-28 | |
US18/477,525 US20240119366A1 (en) | 2022-09-28 | 2023-09-28 | Online training of machine learning models using bayesian inference over noise |
Publications (1)
Publication Number | Publication Date |
---|---|
US20240119366A1 true US20240119366A1 (en) | 2024-04-11 |
Family
ID=90574303
Family Applications (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
US18/477,525 Pending US20240119366A1 (en) | 2022-09-28 | 2023-09-28 | Online training of machine learning models using bayesian inference over noise |
Country Status (1)
Country | Link |
---|---|
US (1) | US20240119366A1 (en) |
-
2023
- 2023-09-28 US US18/477,525 patent/US20240119366A1/en active Pending
Similar Documents
Publication | Publication Date | Title |
---|---|---|
US11568207B2 (en) | Learning observation representations by predicting the future in latent space | |
US10936949B2 (en) | Training machine learning models using task selection policies to increase learning progress | |
US11741366B2 (en) | Compressed recurrent neural network models | |
US11443170B2 (en) | Semi-supervised training of neural networks | |
US11928601B2 (en) | Neural network compression | |
CN108205699B (en) | Generating outputs for neural network output layers | |
US20180189950A1 (en) | Generating structured output predictions using neural networks | |
US20200104710A1 (en) | Training machine learning models using adaptive transfer learning | |
US11922281B2 (en) | Training machine learning models using teacher annealing | |
US20210049298A1 (en) | Privacy preserving machine learning model training | |
US20210034973A1 (en) | Training neural networks using learned adaptive learning rates | |
US20240029436A1 (en) | Action classification in video clips using attention-based neural networks | |
US20220230065A1 (en) | Semi-supervised training of machine learning models using label guessing | |
US11907825B2 (en) | Training neural networks using distributed batch normalization | |
US20220108149A1 (en) | Neural networks with pre-normalized layers or regularization normalization layers | |
US20220398500A1 (en) | Partially local federated learning | |
US20220391706A1 (en) | Training neural networks using learned optimizers | |
US20220253713A1 (en) | Training neural networks using layer-wise losses | |
WO2023158881A1 (en) | Computationally efficient distillation using generative neural networks | |
WO2020152267A1 (en) | Learning non-differentiable weights of neural networks using evolutionary strategies | |
US20220019856A1 (en) | Predicting neural network performance using neural network gaussian process | |
US20220108174A1 (en) | Training neural networks using auxiliary task update decomposition | |
US20240119366A1 (en) | Online training of machine learning models using bayesian inference over noise | |
US20230017505A1 (en) | Accounting for long-tail training data through logit adjustment | |
US20230063686A1 (en) | Fine-grained stochastic neural architecture search |
Legal Events
Date | Code | Title | Description |
---|---|---|---|
AS | Assignment |
Owner name: GOOGLE LLC, CALIFORNIAFree format text: ASSIGNMENT OF ASSIGNORS INTEREST;ASSIGNORS:JONES, MATTHEW;MOZER, MICHAEL CURTIS;REEL/FRAME:065166/0131Effective date: 20231009 |
|
STPP | Information on status: patent application and granting procedure in general |
Free format text: DOCKETED NEW CASE - READY FOR EXAMINATION |