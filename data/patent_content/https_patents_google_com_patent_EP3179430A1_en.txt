EP3179430A1 - Secure application directory - Google Patents
Secure application directory Download PDFInfo
- Publication number
- EP3179430A1 EP3179430A1 EP17152190.9A EP17152190A EP3179430A1 EP 3179430 A1 EP3179430 A1 EP 3179430A1 EP 17152190 A EP17152190 A EP 17152190A EP 3179430 A1 EP3179430 A1 EP 3179430A1
- Authority
- EP
- European Patent Office
- Prior art keywords
- memory block
- application
- smart card
- software application
- access
- Prior art date
- Legal status (The legal status is an assumption and is not a legal conclusion. Google has not performed a legal analysis and makes no representation as to the accuracy of the status listed.)
- Granted
Links
- 238000000034 method Methods 0.000 claims description 70
- 238000004590 computer program Methods 0.000 claims description 44
- 230000001174 ascending effect Effects 0.000 description 13
- 230000006870 function Effects 0.000 description 7
- 238000004891 communication Methods 0.000 description 4
- 238000013500 data storage Methods 0.000 description 4
- 238000005192 partition Methods 0.000 description 4
- 238000012545 processing Methods 0.000 description 4
- 230000004044 response Effects 0.000 description 4
- 238000003860 storage Methods 0.000 description 4
- 230000008859 change Effects 0.000 description 3
- 238000007726 management method Methods 0.000 description 3
- 230000008520 organization Effects 0.000 description 3
- 238000012795 verification Methods 0.000 description 3
- 230000009471 action Effects 0.000 description 2
- 239000008186 active pharmaceutical agent Substances 0.000 description 2
- 230000003993 interaction Effects 0.000 description 2
- 238000004519 manufacturing process Methods 0.000 description 2
- 238000013507 mapping Methods 0.000 description 2
- 230000005055 memory storage Effects 0.000 description 2
- 238000010295 mobile communication Methods 0.000 description 2
- 238000012986 modification Methods 0.000 description 2
- 230000004048 modification Effects 0.000 description 2
- 239000004065 semiconductor Substances 0.000 description 2
- 238000004513 sizing Methods 0.000 description 2
- 230000008901 benefit Effects 0.000 description 1
- 238000004422 calculation algorithm Methods 0.000 description 1
- 238000004364 calculation method Methods 0.000 description 1
- 125000004122 cyclic group Chemical group 0.000 description 1
- 238000013461 design Methods 0.000 description 1
- 238000011161 development Methods 0.000 description 1
- 238000009826 distribution Methods 0.000 description 1
- 230000000694 effects Effects 0.000 description 1
- 239000003999 initiator Substances 0.000 description 1
- 230000000977 initiatory effect Effects 0.000 description 1
- 230000007935 neutral effect Effects 0.000 description 1
- 230000003287 optical effect Effects 0.000 description 1
- 230000008569 process Effects 0.000 description 1
- 238000013515 script Methods 0.000 description 1
- 230000026676 system process Effects 0.000 description 1
- 238000012546 transfer Methods 0.000 description 1
Images
Classifications
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06K—GRAPHICAL DATA READING; PRESENTATION OF DATA; RECORD CARRIERS; HANDLING RECORD CARRIERS
- G06K19/00—Record carriers for use with machines and with at least a part designed to carry digital markings
- G06K19/06—Record carriers for use with machines and with at least a part designed to carry digital markings characterised by the kind of the digital marking, e.g. shape, nature, code
- G06K19/067—Record carriers with conductive marks, printed circuits or semiconductor circuit elements, e.g. credit or identity cards also with resonating or responding marks without active components
- G06K19/07—Record carriers with conductive marks, printed circuits or semiconductor circuit elements, e.g. credit or identity cards also with resonating or responding marks without active components with integrated circuit chips
- G06K19/077—Constructional details, e.g. mounting of circuits in the carrier
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06K—GRAPHICAL DATA READING; PRESENTATION OF DATA; RECORD CARRIERS; HANDLING RECORD CARRIERS
- G06K19/00—Record carriers for use with machines and with at least a part designed to carry digital markings
- G06K19/06—Record carriers for use with machines and with at least a part designed to carry digital markings characterised by the kind of the digital marking, e.g. shape, nature, code
- G06K19/067—Record carriers with conductive marks, printed circuits or semiconductor circuit elements, e.g. credit or identity cards also with resonating or responding marks without active components
- G06K19/07—Record carriers with conductive marks, printed circuits or semiconductor circuit elements, e.g. credit or identity cards also with resonating or responding marks without active components with integrated circuit chips
- G06K19/073—Special arrangements for circuits, e.g. for protecting identification code in memory
- G06K19/07309—Means for preventing undesired reading or writing from or onto record carriers
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F21/00—Security arrangements for protecting computers, components thereof, programs or data against unauthorised activity
- G06F21/10—Protecting distributed programs or content, e.g. vending or licensing of copyrighted material ; Digital rights management [DRM]
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F21/00—Security arrangements for protecting computers, components thereof, programs or data against unauthorised activity
- G06F21/70—Protecting specific internal or peripheral components, in which the protection of a component leads to protection of the entire computer
- G06F21/71—Protecting specific internal or peripheral components, in which the protection of a component leads to protection of the entire computer to assure secure computing or processing of information
- G06F21/77—Protecting specific internal or peripheral components, in which the protection of a component leads to protection of the entire computer to assure secure computing or processing of information in smart cards
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06Q—INFORMATION AND COMMUNICATION TECHNOLOGY [ICT] SPECIALLY ADAPTED FOR ADMINISTRATIVE, COMMERCIAL, FINANCIAL, MANAGERIAL OR SUPERVISORY PURPOSES; SYSTEMS OR METHODS SPECIALLY ADAPTED FOR ADMINISTRATIVE, COMMERCIAL, FINANCIAL, MANAGERIAL OR SUPERVISORY PURPOSES, NOT OTHERWISE PROVIDED FOR
- G06Q20/00—Payment architectures, schemes or protocols
- G06Q20/30—Payment architectures, schemes or protocols characterised by the use of specific devices or networks
- G06Q20/34—Payment architectures, schemes or protocols characterised by the use of specific devices or networks using cards, e.g. integrated circuit [IC] cards or magnetic cards
- G06Q20/352—Contactless payments by cards
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06Q—INFORMATION AND COMMUNICATION TECHNOLOGY [ICT] SPECIALLY ADAPTED FOR ADMINISTRATIVE, COMMERCIAL, FINANCIAL, MANAGERIAL OR SUPERVISORY PURPOSES; SYSTEMS OR METHODS SPECIALLY ADAPTED FOR ADMINISTRATIVE, COMMERCIAL, FINANCIAL, MANAGERIAL OR SUPERVISORY PURPOSES, NOT OTHERWISE PROVIDED FOR
- G06Q20/00—Payment architectures, schemes or protocols
- G06Q20/30—Payment architectures, schemes or protocols characterised by the use of specific devices or networks
- G06Q20/34—Payment architectures, schemes or protocols characterised by the use of specific devices or networks using cards, e.g. integrated circuit [IC] cards or magnetic cards
- G06Q20/357—Cards having a plurality of specified features
- G06Q20/3574—Multiple applications on card
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06Q—INFORMATION AND COMMUNICATION TECHNOLOGY [ICT] SPECIALLY ADAPTED FOR ADMINISTRATIVE, COMMERCIAL, FINANCIAL, MANAGERIAL OR SUPERVISORY PURPOSES; SYSTEMS OR METHODS SPECIALLY ADAPTED FOR ADMINISTRATIVE, COMMERCIAL, FINANCIAL, MANAGERIAL OR SUPERVISORY PURPOSES, NOT OTHERWISE PROVIDED FOR
- G06Q20/00—Payment architectures, schemes or protocols
- G06Q20/30—Payment architectures, schemes or protocols characterised by the use of specific devices or networks
- G06Q20/34—Payment architectures, schemes or protocols characterised by the use of specific devices or networks using cards, e.g. integrated circuit [IC] cards or magnetic cards
- G06Q20/357—Cards having a plurality of specified features
- G06Q20/3576—Multiple memory zones on card
Definitions
- the present disclosure relates generally to computer-implemented methods, devices, and computer-programs for a secure application directory in contactless smart cards.
- Contactless transaction systems use secure contactless smart card for transaction purposes.
- Some exemplary transaction systems include transportation - transit cards, authentication and identity cards, parking cards, and phone cards.
- An exemplary secure contactless smart card is the MIFARE® card from NXP Semiconductors or an iClass® card from HID Global.
- Certain conventional smart cards use radio frequency identification (RFID) standards to transmit and receive information to and from a card reader device.
- RFID based contactless smart card devices are supported via the International Organization for Standardization and the International Electrotechnical Commission standard (ISO/IEC) 14443 for smart cards and card readers.
- Certain contactless smart cards may include multiple electronic components, such as an antenna and secure memory. Additionally, certain contactless smart cards also may include supporting semiconductor components, such as a memory management unit, a processor, and a cryptographic generator..
- the different types of software applications or application data memory areas include random access memory (RAM), read only memory (ROM), and non-volatile flash memory. These memory areas may be secure memory areas for secure information required to access software applications for such purposes as external secure access systems, membership, or payment purposes. Further, each secure memory area is assigned specific application functions included in the secure element area within the contactless smart card. Certain low-end contactless smart cards may not offer significant processing capabilities; these smart cards may communicate only a radio frequency with information from a passive memory.
- Certain contactless smart cards include a platform for hardware and software that supports both EMV (electronic credit card standards) and MIFARE® operating functions. Such cards further include a processor for retaining different areas within combined or separated secure elements of the contactless smart card device.
- Contactless smart cards are available in different memory sizes, for example, a 4 KB of EEPROM (flash memory) or a 1 KB EEPROM package.
- certain widely used smart cards do not have any intelligent processing capability and are software coded such that certain memory areas alone can be read by certain card readers.
- MIFARE Classic® a limited amount of resources are available within the smart card to enable further development. For example, on a 4 KB card, a requirement may exist that all of the 4 KB should be active within the card at any given time.
- a 4KB contactless smart card includes data memory areas are typically divided into about 40 sectors, with 32 sectors of 4 blocks each and 8 sectors of 16 blocks each.
- One block is dedicated to manufacturer information for the contactless smart card, while a sector may be dedicated to a pre-installed application directory configured to direct an external card reader to one of several software applications stored in the contactless smart card.
- the application directory may point the external card reader to the application stored by the sector in which the application is stored. Accordingly, the data memory areas store applications by sectors and un-used memory blocks in a sector may be left idle.
- a computer-implemented method for a secure application directory in a contactless smart card comprises storing, in a data memory block of the contactless smart card, an application directory entry for one of a plurality of software applications stored in the contactless smart card, the application directory entry comprising: an application identifier (AID) for the software application; a starting memory block number for a starting memory block of the memory area, wherein the starting memory block holds at least a part of the software application; and; and a size for the software application, the size defining a number of data memory blocks from the starting data memory block for storing the entire software application; and storing, in an access memory block of the contactless smart card, an access key for access to read the application directory entry stored within the data memory block.
- AID application identifier
- An application directory table reserves special blocks in the secure element namespace as metadata blocks. These blocks contain the logical mapping of application identifiers (AIDs) to the slot/block that contains the software application to be presented to an external card reader device.
- AIDs application identifiers
- the external card reader device encounters a contactless smart card, it tries to authenticate to the special metadata block identified in the directory with a defined access key known to the card reader and the software application.
- the card reader reads the contents of an application directory table in the assigned block, and performs a look-up to find which sector/blocks to which the application ID is mapped.
- a targeted card reader device would read the application directory table in the data memory block of the secure element namespace and lookup the AID '10'. While the directory service is a useful service, it requires the complete use of the block and its AID namespace and is managed externally by a third party.
- Access key for a contactless smart card may provide different types of access to the application data or software application within the contactless smart card.
- "Key “A” or the “A Key” of sector 0 is a public sector access key with a 6 byte code
- key “B” or the “B Key” of sector 0 is determined by the contactless smart card issuer or card owner, where the card issuer controls certain access keys and a control software application or certain aspects of the other software applications on the contactless smart card.
- Card issuer or “card owner” are terms used interchangeably herein, and generally refer to the entity that places the secure element and an application directory within the contactless smart card.
- An NFC service provider may be an example of a card issuer type entity.
- the B Key may be a 6 byte code that is kept private for making changes to the software application or the application data within the related memory block.
- Application data defines the data that augments, updates, or provides data to a software application.
- Software application refers to any software application obtained in any format from an external computer that can be installed and executed within the secure element of the contactless smart card. Further, “software application” and “application data” are used interchangeably herein to refer to the types of data stored within the secure element from an external computer.
- the term “software application” also includes all formats of the software application, from the downloaded format, any intermediate format, and the final executed format, unless otherwise described.
- a software application is mapped using its 2 byte Application identifier (AID) by using a single byte cluster code for access control and another single byte as a software application code or the least significant bit (LSB).
- AID Application identifier
- LSB least significant bit
- the contactless smart card may be loaded with an application directory and software applications to perform the various secure functions as an independent card device.
- a contactless smart card device incorporates the contactless smart card and provides a user-interface software application access to the contactless smart card.
- Exemplary contactless smart card devices include smart phones; mobile phones; personal digital assistants (PDAs); mobile computing devices such as netbooks and iPad®s; electronically enabled key fobs; electronically enabled card type devices; and other electronically enabled devices, where each device can be used for a plurality of purposes including, but not limited to, financial transactions, coupons, ticketing, secure authentication, and related applications.
- the secure element namespace can be divided into different partitions for different card types, including different card protocols or platforms, e.g., EMVCo on JavaCard platform, near field communication (NFC) for proximity sensing, or MIFARE.
- the secure element namespace is virtually dividend into sectors, where each sector includes 4 memory blocks that are 16 bytes in length for each, with the options for sector sizing different from the pre-defined sector sizing, thereby including contiguous blocks, over contiguous sectors for a single software application.
- the trailing block of each sector is a dedicated access memory block that is divided into the 3 memory sections for storage of access information to the remainder of the memory block.
- the access information includes an A Key, access bits within the access memory block, and a B Key.
- the access memory block controls access to the rest of the blocks in the sector depending on individual access keys or a combination of the access keys that is used to access the memory blocks.
- the remainder of the memory blocks in a sector is data memory blocks that contain application data or the software application.
- Software applications can also be stored across sectors by providing a pointer or continuity information to the ending bytes of the software application in a previous sector.
- the pointer may include the AID of the software application and the block location and sector location of the continuing section of the software application.
- the access keys in the access memory block support different access types to the data memory block for the application data and the application directory table in sector 0.
- the access control block can be configured to describe the permissions of key A, while key B maintains the ability to rotate keys in the control block and to overwrite the access bits within the access control block.
- key B may be used to edit the directory, to change the mapping of AIDs to sector and memory block locations, and to reallocate the memory blocks by changing the access type in the secure element namespace.
- Access types that may be available to the contactless smart card include a write access, a read access, an increment access, a decrement access, or a combination of two or more of each of the read, write, and increment and decrement accesses.
- the write access includes the ability to write or install software applications or application data to data memory blocks within the secure element namespace.
- Each of the sectors in the secure element namespace is assigned a unique identifier from which the device keysets are derived, where the unique identifier may be assigned to the contactless smart card at manufacture or by a card owner.
- the card owner may refer to the entity that deploys a secure element and the application directory structure on to the contactless smart card.
- SIM Services Identity Module
- SD secure digital
- UICC Universal Integrated Circuit Card
- a wireless service provider for a Global System for Mobile Communications (GSM), Universal Mobile Telecommunications System (UMTS), or Code Division Multiple Access (CDMA) may embed the secure element and create the application directory prior to selling the cards for enabling mobile communications.
- GSM Global System for Mobile Communications
- UMTS Universal Mobile Telecommunications System
- CDMA Code Division Multiple Access
- card issuer for providing the secure element and support application directory within the contactless smart card.
- card issuer may also refer to service providers that create and deploy the control software application within the secure element of the contactless smart card, where the control software application can be used to control, initiate, and partition the secure element namespace.
- the application directory may be considered as an embedded software application at the embedding stage.
- a contactless smart card device manufacturer or a contactless smart card device operating system developer may be considered to be the card issuer.
- the card issuer may, independently or in cooperation with the card owner, provide additional software application within the contactless smart card, via the secure element or an external secure element.
- the additional software application may perform a management role among a number of card protocols within the contactless smart card device using a single NFC controller and antenna, or may control the secure element namespace of the contactless smart card.
- a software application provider provides software applications via over-the-air methods, using the card issuers services or though regular wireless Internet using the 802.11 standards.
- Each sector of the secure element can, as a part of the application directory structure, store a single application with an application identification (AID), thereby enabling multiple software applications to co-exist within the contactless smart card.
- One memory block at sector address 0 may contain only the manufacturer's data, while the other memory blocks are data memory blocks which include AIDs of unique applications on the card and the access memory block which provides access to the application directory table.
- the manufacturer's data can used to trace the integrated circuit (IC) details in case of quality problems. So, sector 0 of the secure element namespace contains 2 data blocks of 16 bytes each, which is commonly the AID information of applications located in other memory blocks within the contactless smart card.
- a software application on a contactless smart card in the context of a transit environment application allows a card reader to access the memory blocks of certain sectors to record where the transit system was entered or exited, to set initial values, and to decrement values on the card.
- the turnstile may be limited to access key A, which is a lower security key and authenticates the card reader turnstile to read card values and write the exit or entry point in a certain block of the contactless smart card depending on the access memory block assignment on the card.
- the transit software application may be stored in a certain block with references to other sectors for value - increment/decrement and for station - exit/entered, where the decrement value may be calculated from the station value allocation in the corresponding data memory block.
- Each sector may include a different set of Key A and Key B, where appropriate.
- the software applications' provider e.g., a transit office, would have access to key B for the initial value settings in a different sector and memory block of the contactless smart card, where the sector allows for writing using the key B.
- the card may be configured to allow key B accessible devices to write the initial value to a pre-determined "initial value" data memory block or sector of the contactless smart card.
- a different data memory block of a sector for storing "station information" includes different set of access keys, key A and key B, which allow the station information entry and exit to be registered.
- a value of charge can be calculated between the entry and exit stations and may then be applied to the "initial value" data memory block or sector of the contactless smart card when the card user exists at a station.
- the transit system verifies key A for the "initial value" data memory block or sector for reading the value remaining prior to allowing entry.
- a different key B writes the entry location into the station information data memory block allocated and protected by the key B.
- the card is notified, and the fare is calculated from the exit and entry points and is decremented from the initial value, while wiping the initial location.
- the decrement value is greater than the initial value, the card will signal the turnstile to prevent exit. Adding more value to the card using key B for access via a ticket machine or at an office will rectify the problem.
- Contactless smart cards can be manufactured with known default keys (for example, 0xFF is a typical default key) for initialization purposes. Since the default keys are known, the security element embedded on the contactless smart card or within the contactless smart card device may be considered as disabled, which implies that access may be prevented via the contactless interface (external card readers) or a contact interface, such as, applications programming interface (API) or a different software application within the secure element.
- the runtime environment of the secure element or the contactless smart card device that hosts the secure element may support the APIs.
- a main access key, key B will have exclusive management access to the sector with any option for overrides. Accordingly, the rotation or changing of the keys is set into a known state to preserve control of the memory blocks.
- Messages, software application, or application data within the memory blocks are generally in plaintext format, while the encrypted message (encrypted by the applicable keys - A or B) is in a ciphertext format.
- Key B may be used to change Key A in certain sectors, as well as the access bits associated with the key may be changed for certain sectors.
- the card reader terminal or device reads the contactless smart card by browsing through the secure element memory for the relevant application directory, and then scanning the AIDs for a pre-determined software application AID or a pre-determined sector as specified in the card reader.
- An application directory can establish a data structure table for directory and application entries, thereby enabling the reader to identify the correct software applications with which to being transactions.
- the contactless smart card can be seen as a memory storage area, as the card reader will request application data from the memory storage area for processing such applications as payment or even transit.
- the contactless smart card typically provides a random number challenge to the card reader, while the card reader provides its own response, using a mutual secret key, back to the contactless smart card.
- the contactless smart card then verifies the response from the card reader by comparing its random number to ensure the same secret key. Thereafter the actual transaction is processed using the encryption secret key that is mutually agreed upon.
- the transit software application in a contactless smart card may include multiple software applications or for different regions or purposes.
- a New York Transit system and a Los Angles Transit system may provide different software applications to a single contactless smart card within a contactless smart card device.
- the two software applications can be used on terminals in the corresponding locations as the corresponding card readers can automatically determine which directory to access by checking the AD.
- the information or the application directory data in the directory part of the data memory block provides the reference section of the AD, and includes pointers to the card issuer or a manufacturer's sector for information on the distribution of the remaining free card sectors where the software applications are allocated.
- the secure element namespace may be managed by the control software application.
- the control software application may be a JavaCard applet executing on a JavaCard Virtual Machine within a different secure element namespace in the contactless smart card device incorporating the contactless smart card. Accordingly, the JavaCard applet may control the deployment of access keys, software applications, application data, the application directory, and the access bits in the access memory blocks using APIs and interacting with the secure element of the contactless smart card via a secure communication channel.
- a contactless smart card may include more than one application directory, where each application directory is readable by an external card reader only when the external card reader knows the access key and the location of the application directory. Accordingly, for a 4KB contactless smart card, a default application directory may be stored in sector 0 of the contactless smart card, where AIDs of various applications within a fixed number of sectors are available to external card readers capable of accessing sector 0, reading the default application directory, and transacting with software applications linked in the default application directory.
- the implementation of two application directories may effectively splits the memory area of the contactless smart card into two types of applications or for different types of external card readers.
- a second application directory may be stored within the namespace of the 4KB-40 sector contactless smart card.
- the second application directory may be assigned an application identifier (AID) for identification via the default application directory within the contactless smart card.
- AID application identifier
- a code of 0x000 may be the default application directory AID.
- the contactless smart card may be configured to include 32 sectors at 4 memory blocks per sector, each sector of 16 bytes of length. The remaining 8 sectors may be configured to include 16 memory blocks per sector, each memory block at 16 bytes of length.
- the second application directory is stored in sector 39 of a 40 sector, 4KB contactless smart card.
- sector 39 is a 16 block sector, where 15 memory blocks may be data memory blocks for storing application data, with the last memory block forming the access memory block for the sector.
- the access memory block may include two access keys and an access bits defining one of a number of access conditions available to the sector.
- the application directory in sector 39 may be protected via an access key for reading purposes, where only external card readers with the read access key may access the second application directory.
- the default application directory stored in sector 0 provides access to 15 sectors available for default application data storage.
- the 4KB-40 sector contactless smart card includes 153 individual 16-byte data memory blocks for the second set of application data storage. This may be calculated by discounting 1 access memory block from the sectors 16 through 39, thereby providing 16 (4-memory block type) sectors multiplied with 3 data memory blocks per sector for a second set of application data storage, and sectors 32 through 39 (16-memory block type) sectors, providing 7 sectors multiplied with 15 data memory block per sector for the second set of application data storage.
- the second application directory occupies 16 memory blocks of sector 39, thereby providing 56 concurrently installed applications to be listed via the second set of application identifiers (AIDs), where each of the second set of AIDs provides a reference to a second set of software applications stored within the contactless smart card.
- AIDs application identifiers
- the second application director includes improved application directory entries, where the improved application directory entry is a 4 byte entry including a 2 byte second application identifier (AID), a single byte start value, and a single byte size value for each of the second set of software applications.
- the single byte start value corresponds to the starting block number assigned to each of the second set of software applications stored within the contactless smart card. For a 1KB, 16 sector type smart card, there may be limited space for defining two application directories and associated default set and second set of software applications. However, such an implementation may be apparent for segregating the namespace of the contactless smart card into two access types or for different types of external card readers.
- the start value may be an absolute memory address of the memory block calculated by multiplying the number of memory blocks per sector from the first available memory sector and amending the number by 1.
- the calculation involves finding the number of memory blocks in the first available sector, e.g., sector 0 in this case, excluding memory block 0 for manufacturer's information.
- sector 2 where sector 2 is a 4 block sector
- the number of blocks from the first available memory block is 8, where the first available memory block is memory block 1 in sector 0, and the number of memory block from memory block 1, sector 0 to memory block 1, sector 2, including the access memory blocks is 8.
- the resulting value is incremented by 1 to account for absolute, zero-based addressing, thereby resulting in a start value of 9.
- the size value of the improved application directory entry can be further divided into a lower nibble and an upper nibble, the lower nibble for storing an entry size value, while the upper nibble is reserved for future use or as an error or logging flag.
- Further size value of a stored software application refers to contiguous blocks of data memory blocks in the sectors of the contactless smart card, ignoring the access memory blocks. By way of an example, an application starting at block 9 (sector 2, memory block 1) with size 4, would be stored in blocks 1 and 2 of sector 2 and then blocks 0 and 1 of sector 3, avoiding the access memory blocks in between.
- the structure of the second application directory stored in sector 39 may include a header entry for recognition by an external card reader, similar to the manufacturer's memory block in sector 0.
- the header memory block of sector 39 includes a 2 byte cyclic redundancy check (CRC), a 4 byte unique identifier for the application directory provider, a single byte version code, an 8 byte reserved area, and a single byte entry count.
- CRC value includes a CRC 16 verification for the application directory, the CRC 16 verification following the definition of CRC_B as stated in the ISO/IEC 14443 standards.
- the unique identifier identifies the owner or issuer of the second application directory, and external card readers may verify the unique identifier prior to accessing linked software applications or application data.
- the version code provides space for storage of revision information related to the second application directory, while the entry count stores a number corresponding to the number of active software applications registered with the second application directory. Further, the entries in the second application directory may be pre-sorted in an ascending or descending order, thereby making it easier for an external card reader to locate the preferred software application for reading.
- a transaction log may be made available within the memory area assigned to the second set of software applications. Accordingly, the transaction log may be implemented as a software application with a default AID, such as 0xfffe, stored as one of the second set of software applications within a pre-determined area in the contactless smart card assigned for the second application directory.
- an application directory entry for the transaction log may define the transaction log from a minimum size of 1 block to a maximum size of 15 blocks, per the requirement of the transaction volumes, and the number of the second set of software applications stored within the memory area of the second application directory.
- the transaction log may, therefore, be assigned an AID that is referenced in the second application directory as an entry.
- the transaction log may store codes for activities involving the second set of software applications of the contactless smart card, where in one example, a transaction status is logged in the transaction log when the contactless smart card transacts with an external card reader.
- the structure of the transaction log includes a 2 byte CRC_B verification code, a single byte log, a single byte count field for the number of AIDs of active software applications available for transaction purposes, an 8 byte reader identifier field for identifying the external card reader that is in transaction with the software applications on the contactless smart card, and an AID for the active second software application in transaction with the external card reader.
- the transaction log may be used by external card reader, when the AID of the transaction log exists in the second application directory.
- the first 3 bytes are an organization identifier to identify the organization/owner of the reader device, where the 3 bytes match a standard identifier following Institute of Electrical and Electronics Engineers (IEEE) Organizationally Unique Identifier (OUI) standards.
- IEEE Institute of Electrical and Electronics Engineers
- UAI Organizationally Unique Identifier
- Five bytes remaining in the reader identifier are assigned for unique codes within the 8 byte reader identifier, where the unique codes are globally unique for the life of an external card reader.
- MAC Media Access Control
- the single byte log in the transaction log includes a transaction status to log post-transaction results between the contactless smart card and the external card reader.
- the transaction statues available for storage include, an AID not found status code, an AID read success status code, an AID read failure status code, and a final reserved status code.
- the single byte log may log the application directory status interaction with the external card reader.
- the final reserved status code may be used for storing a status of the actual transaction with a software application after the application directory has forwarded the external card reader to a select software application.
- the AIDs for the second application directory may include a 12 bit merchant prefix and a 4 bit program code.
- the program code divides the merchant prefix by the type of merchant.
- 0x0 is an undefined/uncategorized program code
- 0x1 is a loyalty card program code
- 0x2 is a coupon program code
- 0x3 is a prepaid gift card program code
- 0x4 to 0xf are reserved for other categories.
- An AID with code 0xfed2 can be decoded by merchant prefix Oxfed, with program code 0x2.
- the control software application or the control applet, and the wallet software application perform service and provisioning of the secure element namespace and provide a convenient interface to ensure that the software application providers or the card issuer provisions the memory using correct application IDs (AIDs). This action ensures that new software applications do not overwrite the application software or application data of other software applications in the secure element namespace.
- the card issuer publishes a protocol, which may be in a message format and an associated transaction model. The initiation of provisioning can be driven from the wallet software application by the user. Once a credential has been provisioned for a partner (one of a number of software application providers), the solution provides a callback identifier that the software application provider can use to deliver push notifications to the device.
- all control applet transactions can be initiated by the wallet software application, even if a transaction occurs as a consequence of a pushed event notification.
- the wallet software application can be the initiator of the transaction.
- the control software application solution may be different from the traditional EMVCo provisioning in that, in the control software application, the wallet software application is the master and the software applications are slaves of the transaction.
- the software application providers for example, financial institutions or transit systems
- the wallet software application is the slave without knowledge of even what actions are being performed to it by the software application provider, via the TSM.
- control software application may additionally define all interactions that will be driven over a secure channel (enforced by at least a secure socket layer or SSL).
- the control software application implementation is performed via a Representative State Transfer (RESTful) interface, which is a stateless client-server architecture, using messages in a defined JavaScript Object Notification or JSON format.
- the control software application involves transaction in a sequence of events that starts with the wallet software application sending a commence provision message to a partner device, where the partner device may be a non-TSM computer or a TSM computer operating as a remote server host for multiple software applications.
- the commence message includes the information necessary for the non-TSM computer to encode a 'manage transaction' response that is securely returned to the wallet software application.
- the partner uses the information in the commence transaction message to encode data in the response message.
- the commence message can include the public key for the control applet to match with a private key stored in the contactless smart card device.
- Fig. 1 illustrates a system 100 for a contactless smart card device 144 including a contactless smart card 156 with a secure element 160, where the secure element 160 has stored within it, a secure application directory according to certain exemplary embodiments.
- Software applications are deployed to the contactless smart card device 144 from a trusted service manager (TSM) 108 hosted by a near field communication (NFC) service provider 104 or software application providers 112. Further, the TSM may receive software applications from the providers 112 via a secure communication internet channel 132, where the providers 112 include servers hosting a software application for different merchants and merchant types, such as credit card companies 116, ticketing companies 120, coupon companies 124, and authentication companies 128.
- TSM trusted service manager
- NFC near field communication
- the providers 112 may receive software applications from the providers 112 via a secure communication internet channel 132, where the providers 112 include servers hosting a software application for different merchants and merchant types, such as credit card companies 116, ticketing companies 120, coupon companies 124, and authentication
- the software applications from the TSM 108 may be deployed to the contactless smart card device 144 via a secure wireless connection, e.g., GSM and CDMA 140 using a wireless service provider 136 as a proxy server.
- the TSM 108 deploys software applications to the contactless smart card 144 via a secure wireless 802.11 standard connection to a Wi-Fi enabled device 144.
- the software applications may be requested by an end-user using a user-interface software application 152 on the device 144.
- the received software applications deploy directly to the secure element namespace 160 or a secure memory in the contactless smart card 156.
- the contactless smart card interacts with an external card reader device 172 via the NFC controller chip 164 and an antenna 168 configured to transmit and receive radio frequency signals.
- the contactless smart card 156 is an independent card device capable of interacting with an external reader device 172 independent of any contactless smart card device serving as its host.
- the contactless smart card 156 may then be loaded with software applications using an external card reader device especially configured to provision the namespace 160 of the contactless smart card device 156 using radio frequency signals and a write access key to write software applications or application data to the appropriate areas of the namespace.
- Fig. 2 illustrates a memory structure 200 of a 4KB contactless smart card with a default or existing application directory 248B according to certain exemplary embodiments.
- the secure element namespace 204 is divided, virtually, into 40 sectors 208, each sector including a number of memory blocks 212. Further, the 40 sectors include 32 sectors of 4 memory blocks and 8 sectors of 16 memory blocks. Each sector includes at least one access memory block 220, 228, and 252, for access control of the blocks within the sector. In each sector, the remaining blocks may be reserved as data memory blocks for storing software applications or application data.
- Each memory block, for an access or data type memory block includes 16 bytes per block 216 of access or data stored within it.
- the access memory blocks for each sector stores an A keys 220A-Z, access bits in access memory blocks 228A-Z, and a B keys 252A-Z for accessing the sectors' memory blocks, where either the A key 220, the B key 252, or a combination of both the access keys 220 and 252 may be used to define different access types stored as access bits within the memory blocks of each sector.
- an external card reader may only access data memory blocks for reading stored application data, e.g., in an authentication card, the authentication information may be stored in the data memory blocks, where the external card reader may only read the authentication information, but not edit it.
- a specialized external card reader device with write access key may be used to edit the authentication information in the data memory block.
- the sector including the transaction logs within the data memory block of the sector may be configured to be accessed for writing purposes by the external card reader, to write the card reader's reader identifier to the transaction log.
- the external card reader provides the contactless smart card with its write access key prior to being allowed any write access.
- Sectors 0 has one data memory block 256 assigned for manufacturer's information.
- the manufacturer of the contactless smart card may store card unique identifier, which may be used by a card issuer to generate the default access keys for the A key and the B key. Thereafter, the card issuer may change the access keys and store new access keys within the contactless smart card for use by specialized external card readers, according to the type of function provided by the external card readers.
- Fig. 3 illustrates a memory structure 300A-B of a 4KB contactless smart card with a secure application directory 328A-Z according to certain exemplary embodiments.
- the secure element namespace 304 includes a default or existing application directory 336B, where a limited number of the 40 sectors 312 are allocated to the default application directory. This allows legacy card readers to read existing software applications within the namespace of the contactless smart card.
- the default application directory 336B may generally be stored in sector 0 of the secure element namespace, with sectors 0-15 assigned to the default application directory. Further, the sectors 0-15 may be 4-memory blocks 316 per-sector type memory areas for storing default or legacy software applications.
- the second application directory is stored in sector 39 and includes 15 data memory blocks for storing AIDs relating to a second set of software applications.
- the second application directory 328 may be accessed by an external card reader, provided that the external card reader has access to a read type for accessing and finding the application directory 328 and linking to software applications stored within sectors of the memory area associated with the second application directory, e.g., 328A-Z. Since sectors 0-15 are associated with the default application directory, sectors 16-39 may be configured to store the second set of software applications.
- the memory structure illustration of 300B includes more details for sector 39 of the contactless smart card, where sector 39 stores the second application directory 328.
- Memory block 15 of the series of memory blocks 316 in sector 39 includes the access memory blocks including 320A, 324A, and 340A.
- the A key 320A may be configured to provide read access to external card readers, e.g., turnstiles and other transaction devices. The external card readers are then provided access to read the second application directory starting at data memory block 1 to memory block 14.
- Memory block 9 of sector 39 is reserved for a header entry including 364A-E, for the CRC, UNIQUE_ID, version, count, and reserved areas.
- Data memory blocks 0 to 16 each 16 bytes per memory block, where 4 bytes of data memory block is an application directory entry.
- the application directory entry includes an AID of a target software application 352A, 356A, and 360A; the start byte value 352B, 356B, and 360B; and the size byte value for the target software application 352A, 352B, and 352C.
- Fig. 4 illustrates a computer-implemented method 400 for a secure application directory in contactless smart cards according to certain exemplary embodiments.
- block 405 stores the information in respective memory blocks of the contactless smart card.
- an external card reader device with write access permissions to memory blocks in sectors 16-39 may access sector 39 to write an application directory entry for one of a number of software applications stored in the contactless smart card.
- the storing process of block 405 includes writing an application identifier (AID) for the software application; a starting memory block number for a starting memory block of the memory area, where the starting memory block holds at least a part of the software application; and a size for the software application, the size defining a number of data memory blocks from the starting data memory block for storing the entire software application.
- AID application identifier
- Block 410 performs a storing function for storing an access key for access to read the application directory entry stored within the data memory block.
- the access key for reading the application directory in stored in access memory block of the contactless smart card, the access memory block providing access control over the sector of the contactless smart card including the application directory entry.
- the exemplary embodiments can be used with computer hardware and software that perform the methods and processing functions described above.
- the systems, methods, and procedures described herein can be embodied in a programmable computer, computer executable software, or digital circuitry.
- the software can be stored on computer readable media.
- “computer-coded,” “software,” “scripts,” “computer-readable software code,” and “programs” are software codes used interchangeably for the purposes of simplicity in this disclosure.
- “memory,” “computer-program product” and storage can include such media as, floppy disk, RAM, ROM, hard disk, removable media, flash memory, memory stick, optical media, magneto-optical media, CD-ROM, etc.
Abstract
Description
- This patent application claims priority to
U.S. Patent Application No. 13/246,466 U.S. Patent Application No. 13/234,849 - The present disclosure relates generally to computer-implemented methods, devices, and computer-programs for a secure application directory in contactless smart cards.
- Contactless transaction systems use secure contactless smart card for transaction purposes. Some exemplary transaction systems include transportation - transit cards, authentication and identity cards, parking cards, and phone cards. An exemplary secure contactless smart card is the MIFARE® card from NXP Semiconductors or an iClass® card from HID Global. Certain conventional smart cards use radio frequency identification (RFID) standards to transmit and receive information to and from a card reader device. RFID based contactless smart card devices are supported via the International Organization for Standardization and the International Electrotechnical Commission standard (ISO/IEC) 14443 for smart cards and card readers. Certain contactless smart cards may include multiple electronic components, such as an antenna and secure memory. Additionally, certain contactless smart cards also may include supporting semiconductor components, such as a memory management unit, a processor, and a cryptographic generator..
- paragraphs 4-5, use definitive language. The different types of software applications or application data memory areas include random access memory (RAM), read only memory (ROM), and non-volatile flash memory. These memory areas may be secure memory areas for secure information required to access software applications for such purposes as external secure access systems, membership, or payment purposes. Further, each secure memory area is assigned specific application functions included in the secure element area within the contactless smart card. Certain low-end contactless smart cards may not offer significant processing capabilities; these smart cards may communicate only a radio frequency with information from a passive memory.
- Certain contactless smart cards include a platform for hardware and software that supports both EMV (electronic credit card standards) and MIFARE® operating functions. Such cards further include a processor for retaining different areas within combined or separated secure elements of the contactless smart card device. Contactless smart cards are available in different memory sizes, for example, a 4 KB of EEPROM (flash memory) or a 1 KB EEPROM package. However, certain widely used smart cards do not have any intelligent processing capability and are software coded such that certain memory areas alone can be read by certain card readers. In many widely used contactless transaction cards, such as the MIFARE Classic®, a limited amount of resources are available within the smart card to enable further development. For example, on a 4 KB card, a requirement may exist that all of the 4 KB should be active within the card at any given time.
- In some secure element namespaces, also referred to as "memory areas" within contactless cards, the available memory is statically partitioned. The card reader is encoded to read certain ones of the partitions.. Accordingly, the card reader may read only from the pre-determined partitions. Further, each secure memory area is assigned specific application functions, included in the secure element area within the contactless smart card. A 4KB contactless smart card includes data memory areas are typically divided into about 40 sectors, with 32 sectors of 4 blocks each and 8 sectors of 16 blocks each. One block is dedicated to manufacturer information for the contactless smart card, while a sector may be dedicated to a pre-installed application directory configured to direct an external card reader to one of several software applications stored in the contactless smart card. The application directory may point the external card reader to the application stored by the sector in which the application is stored. Accordingly, the data memory areas store applications by sectors and un-used memory blocks in a sector may be left idle.
- In certain exemplary embodiments, a computer-implemented method for a secure application directory in a contactless smart card comprises storing, in a data memory block of the contactless smart card, an application directory entry for one of a plurality of software applications stored in the contactless smart card, the application directory entry comprising: an application identifier (AID) for the software application; a starting memory block number for a starting memory block of the memory area, wherein the starting memory block holds at least a part of the software application; and; and a size for the software application, the size defining a number of data memory blocks from the starting data memory block for storing the entire software application; and storing, in an access memory block of the contactless smart card, an access key for access to read the application directory entry stored within the data memory block.
-
-
FIG. 1 illustrates a system for a contactless smart card device including a contactless smart card with a secure element, where the secure element has stored within it, and a secure application directory according to certain exemplary embodiments. -
FIG. 2 illustrates a memory structure of a 4KB contactless smart card with a default or existing application directory according to certain exemplary embodiments. -
FIG. 3 illustrates a memory structure of a 4KB contactless smart card with a secure application directory according to certain exemplary embodiments. -
FIG. 4 illustrates a computer-implemented method for a secure application directory in contactless smart cards according to certain exemplary embodiments. - An application directory table reserves special blocks in the secure element namespace as metadata blocks. These blocks contain the logical mapping of application identifiers (AIDs) to the slot/block that contains the software application to be presented to an external card reader device. When the external card reader device encounters a contactless smart card, it tries to authenticate to the special metadata block identified in the directory with a defined access key known to the card reader and the software application. When the block is valid, the card reader reads the contents of an application directory table in the assigned block, and performs a look-up to find which sector/blocks to which the application ID is mapped. By way of an example, when a retailer's loyalty card has an AID of '10', a targeted card reader device would read the application directory table in the data memory block of the secure element namespace and lookup the AID '10'. While the directory service is a useful service, it requires the complete use of the block and its AID namespace and is managed externally by a third party.
- Access key for a contactless smart card may provide different types of access to the application data or software application within the contactless smart card. In certain exemplary embodiments, "Key "A" or the "A Key" of
sector 0 is a public sector access key with a 6 byte code, while key "B" or the "B Key" ofsector 0 is determined by the contactless smart card issuer or card owner, where the card issuer controls certain access keys and a control software application or certain aspects of the other software applications on the contactless smart card. "Card issuer" or "card owner" are terms used interchangeably herein, and generally refer to the entity that places the secure element and an application directory within the contactless smart card. An NFC service provider may be an example of a card issuer type entity. - The B Key may be a 6 byte code that is kept private for making changes to the software application or the application data within the related memory block. "Application data" as used herein defines the data that augments, updates, or provides data to a software application. "Software application" as used herein refers to any software application obtained in any format from an external computer that can be installed and executed within the secure element of the contactless smart card. Further, "software application" and "application data" are used interchangeably herein to refer to the types of data stored within the secure element from an external computer. The term "software application" also includes all formats of the software application, from the downloaded format, any intermediate format, and the final executed format, unless otherwise described. In the data memory block for the application directory table in the secure element namespace, a software application is mapped using its 2 byte Application identifier (AID) by using a single byte cluster code for access control and another single byte as a software application code or the least significant bit (LSB).
- In certain exemplary embodiments, the contactless smart card may be loaded with an application directory and software applications to perform the various secure functions as an independent card device. In certain exemplary embodiments, a contactless smart card device incorporates the contactless smart card and provides a user-interface software application access to the contactless smart card. Exemplary contactless smart card devices include smart phones; mobile phones; personal digital assistants (PDAs); mobile computing devices such as netbooks and iPad®s; electronically enabled key fobs; electronically enabled card type devices; and other electronically enabled devices, where each device can be used for a plurality of purposes including, but not limited to, financial transactions, coupons, ticketing, secure authentication, and related applications.
- In certain exemplary embodiments, certain contactless smart cards or implementations of a contactless smart card, the secure element namespace can be divided into different partitions for different card types, including different card protocols or platforms, e.g., EMVCo on JavaCard platform, near field communication (NFC) for proximity sensing, or MIFARE. In one embodiment, for a 1KB contactless smart card, the secure element namespace is virtually dividend into sectors, where each sector includes 4 memory blocks that are 16 bytes in length for each, with the options for sector sizing different from the pre-defined sector sizing, thereby including contiguous blocks, over contiguous sectors for a single software application.
- The trailing block of each sector is a dedicated access memory block that is divided into the 3 memory sections for storage of access information to the remainder of the memory block. The access information includes an A Key, access bits within the access memory block, and a B Key. The access memory block controls access to the rest of the blocks in the sector depending on individual access keys or a combination of the access keys that is used to access the memory blocks. The remainder of the memory blocks in a sector is data memory blocks that contain application data or the software application. Software applications can also be stored across sectors by providing a pointer or continuity information to the ending bytes of the software application in a previous sector. The pointer may include the AID of the software application and the block location and sector location of the continuing section of the software application.
- In certain exemplary embodiments, the access keys in the access memory block support different access types to the data memory block for the application data and the application directory table in
sector 0. The access control block can be configured to describe the permissions of key A, while key B maintains the ability to rotate keys in the control block and to overwrite the access bits within the access control block. In the data memory block ofsector 0, including the application directory table, key B may be used to edit the directory, to change the mapping of AIDs to sector and memory block locations, and to reallocate the memory blocks by changing the access type in the secure element namespace. These functionalities allow the contactless smart card to functionally support multiple applications and access types, depending on the access keys and the access bits in the access memory block. Access types that may be available to the contactless smart card include a write access, a read access, an increment access, a decrement access, or a combination of two or more of each of the read, write, and increment and decrement accesses. The write access includes the ability to write or install software applications or application data to data memory blocks within the secure element namespace. - Each of the sectors in the secure element namespace is assigned a unique identifier from which the device keysets are derived, where the unique identifier may be assigned to the contactless smart card at manufacture or by a card owner. The card owner may refer to the entity that deploys a secure element and the application directory structure on to the contactless smart card. By way of an example, a Services Identity Module (SIM), a secure digital (SD) memory card, or a Universal Integrated Circuit Card (UICC) manufacturer may be a card owner by embedding the secure element and application directory structure into the SIM, UICC, or SD card prior to selling it to a wireless service provider for deployment in a smart phone. Alternatively, a wireless service provider for a Global System for Mobile Communications (GSM), Universal Mobile Telecommunications System (UMTS), or Code Division Multiple Access (CDMA) may embed the secure element and create the application directory prior to selling the cards for enabling mobile communications.
- Each of the "card manufacturer," the "card owner," or the "wireless service provider" may be referred to as a "card issuer" for providing the secure element and support application directory within the contactless smart card. In an exemplary embodiment, the term "card issuer" may also refer to service providers that create and deploy the control software application within the secure element of the contactless smart card, where the control software application can be used to control, initiate, and partition the secure element namespace. The application directory may be considered as an embedded software application at the embedding stage.
- In certain exemplary embodiments, a contactless smart card device manufacturer or a contactless smart card device operating system developer may be considered to be the card issuer. The card issuer may, independently or in cooperation with the card owner, provide additional software application within the contactless smart card, via the secure element or an external secure element. The additional software application may perform a management role among a number of card protocols within the contactless smart card device using a single NFC controller and antenna, or may control the secure element namespace of the contactless smart card. Further, a software application provider provides software applications via over-the-air methods, using the card issuers services or though regular wireless Internet using the 802.11 standards.
- Each sector of the secure element can, as a part of the application directory structure, store a single application with an application identification (AID), thereby enabling multiple software applications to co-exist within the contactless smart card. One memory block at
sector address 0, may contain only the manufacturer's data, while the other memory blocks are data memory blocks which include AIDs of unique applications on the card and the access memory block which provides access to the application directory table. The manufacturer's data can used to trace the integrated circuit (IC) details in case of quality problems. So,sector 0 of the secure element namespace contains 2 data blocks of 16 bytes each, which is commonly the AID information of applications located in other memory blocks within the contactless smart card. - In certain exemplary embodiments, a software application on a contactless smart card in the context of a transit environment application allows a card reader to access the memory blocks of certain sectors to record where the transit system was entered or exited, to set initial values, and to decrement values on the card. The turnstile may be limited to access key A, which is a lower security key and authenticates the card reader turnstile to read card values and write the exit or entry point in a certain block of the contactless smart card depending on the access memory block assignment on the card. Accordingly, the transit software application may be stored in a certain block with references to other sectors for value - increment/decrement and for station - exit/entered, where the decrement value may be calculated from the station value allocation in the corresponding data memory block. Each sector may include a different set of Key A and Key B, where appropriate.
- The software applications' provider, e.g., a transit office, would have access to key B for the initial value settings in a different sector and memory block of the contactless smart card, where the sector allows for writing using the key B. Accordingly, the card may be configured to allow key B accessible devices to write the initial value to a pre-determined "initial value" data memory block or sector of the contactless smart card. A different data memory block of a sector for storing "station information" includes different set of access keys, key A and key B, which allow the station information entry and exit to be registered. A value of charge can be calculated between the entry and exit stations and may then be applied to the "initial value" data memory block or sector of the contactless smart card when the card user exists at a station. The transit system verifies key A for the "initial value" data memory block or sector for reading the value remaining prior to allowing entry. A different key B writes the entry location into the station information data memory block allocated and protected by the key B. When the turnstile is exited, the card is notified, and the fare is calculated from the exit and entry points and is decremented from the initial value, while wiping the initial location. Alternatively, when the decrement value is greater than the initial value, the card will signal the turnstile to prevent exit. Adding more value to the card using key B for access via a ticket machine or at an office will rectify the problem.
- Contactless smart cards can be manufactured with known default keys (for example, 0xFF is a typical default key) for initialization purposes. Since the default keys are known, the security element embedded on the contactless smart card or within the contactless smart card device may be considered as disabled, which implies that access may be prevented via the contactless interface (external card readers) or a contact interface, such as, applications programming interface (API) or a different software application within the secure element. The runtime environment of the secure element or the contactless smart card device that hosts the secure element may support the APIs. Once the keys in the sector are designated by the initial setting device at the card manufacture's location or the card issuer's (or owner) location using a set of access keys, a main access key, key B, will have exclusive management access to the sector with any option for overrides. Accordingly, the rotation or changing of the keys is set into a known state to preserve control of the memory blocks. Messages, software application, or application data within the memory blocks are generally in plaintext format, while the encrypted message (encrypted by the applicable keys - A or B) is in a ciphertext format. Key B may be used to change Key A in certain sectors, as well as the access bits associated with the key may be changed for certain sectors.
- In certain exemplary embodiments, the card reader terminal or device reads the contactless smart card by browsing through the secure element memory for the relevant application directory, and then scanning the AIDs for a pre-determined software application AID or a pre-determined sector as specified in the card reader. An application directory (AD) can establish a data structure table for directory and application entries, thereby enabling the reader to identify the correct software applications with which to being transactions. The contactless smart card can be seen as a memory storage area, as the card reader will request application data from the memory storage area for processing such applications as payment or even transit. The contactless smart card typically provides a random number challenge to the card reader, while the card reader provides its own response, using a mutual secret key, back to the contactless smart card. The contactless smart card then verifies the response from the card reader by comparing its random number to ensure the same secret key. Thereafter the actual transaction is processed using the encryption secret key that is mutually agreed upon.
- In certain exemplary embodiments, the transit software application in a contactless smart card may include multiple software applications or for different regions or purposes. By way of an example, a New York Transit system and a Los Angles Transit system, may provide different software applications to a single contactless smart card within a contactless smart card device. The two software applications can be used on terminals in the corresponding locations as the corresponding card readers can automatically determine which directory to access by checking the AD. The information or the application directory data in the directory part of the data memory block provides the reference section of the AD, and includes pointers to the card issuer or a manufacturer's sector for information on the distribution of the remaining free card sectors where the software applications are allocated.
- In certain exemplary embodiments, the secure element namespace may be managed by the control software application. The control software application may be a JavaCard applet executing on a JavaCard Virtual Machine within a different secure element namespace in the contactless smart card device incorporating the contactless smart card. Accordingly, the JavaCard applet may control the deployment of access keys, software applications, application data, the application directory, and the access bits in the access memory blocks using APIs and interacting with the secure element of the contactless smart card via a secure communication channel.
- In certain exemplary embodiments, a contactless smart card may include more than one application directory, where each application directory is readable by an external card reader only when the external card reader knows the access key and the location of the application directory. Accordingly, for a 4KB contactless smart card, a default application directory may be stored in
sector 0 of the contactless smart card, where AIDs of various applications within a fixed number of sectors are available to external card readers capable of accessingsector 0, reading the default application directory, and transacting with software applications linked in the default application directory. The implementation of two application directories may effectively splits the memory area of the contactless smart card into two types of applications or for different types of external card readers. - In certain exemplary embodiments, a second application directory may be stored within the namespace of the 4KB-40 sector contactless smart card. The second application directory may be assigned an application identifier (AID) for identification via the default application directory within the contactless smart card. By way of an example, a code of 0x000 may be the default application directory AID. The contactless smart card may be configured to include 32 sectors at 4 memory blocks per sector, each sector of 16 bytes of length. The remaining 8 sectors may be configured to include 16 memory blocks per sector, each memory block at 16 bytes of length. In an exemplary embodiment, the second application directory is stored in
sector 39 of a 40 sector, 4KB contactless smart card. Accordingly,sector 39 is a 16 block sector, where 15 memory blocks may be data memory blocks for storing application data, with the last memory block forming the access memory block for the sector. The access memory block may include two access keys and an access bits defining one of a number of access conditions available to the sector. The application directory insector 39 may be protected via an access key for reading purposes, where only external card readers with the read access key may access the second application directory. As a result of the configuration settings of the sectors of the 4KB-40 sector contactless smart card; there are multiple levels of application data available to external card readers. - In certain exemplary embodiments, the default application directory stored in
sector 0 provides access to 15 sectors available for default application data storage. By storing the second application directory insector 39, the 4KB-40 sector contactless smart card includes 153 individual 16-byte data memory blocks for the second set of application data storage. This may be calculated by discounting 1 access memory block from the sectors 16 through 39, thereby providing 16 (4-memory block type) sectors multiplied with 3 data memory blocks per sector for a second set of application data storage, andsectors 32 through 39 (16-memory block type) sectors, providing 7 sectors multiplied with 15 data memory block per sector for the second set of application data storage. Further, the second application directory occupies 16 memory blocks ofsector 39, thereby providing 56 concurrently installed applications to be listed via the second set of application identifiers (AIDs), where each of the second set of AIDs provides a reference to a second set of software applications stored within the contactless smart card. - In certain exemplary embodiments, software applications or application data may not need to be stored per sector as in the case of the default application directory. The second application director includes improved application directory entries, where the improved application directory entry is a 4 byte entry including a 2 byte second application identifier (AID), a single byte start value, and a single byte size value for each of the second set of software applications. The single byte start value corresponds to the starting block number assigned to each of the second set of software applications stored within the contactless smart card. For a 1KB, 16 sector type smart card, there may be limited space for defining two application directories and associated default set and second set of software applications. However, such an implementation may be apparent for segregating the namespace of the contactless smart card into two access types or for different types of external card readers.
- In certain exemplary embodiments, the start value may be an absolute memory address of the memory block calculated by multiplying the number of memory blocks per sector from the first available memory sector and amending the number by 1. By way of an example, to find the absolute address (starting memory block) for a software application stored at
sector 2,memory block 1, when the software application is 4 memory blocks in length, the calculation involves finding the number of memory blocks in the first available sector, e.g.,sector 0 in this case, excludingmemory block 0 for manufacturer's information. For asector 2, wheresector 2 is a 4 block sector, the number of blocks from the first available memory block is 8, where the first available memory block ismemory block 1 insector 0, and the number of memory block frommemory block 1,sector 0 tomemory block 1,sector 2, including the access memory blocks is 8. The resulting value is incremented by 1 to account for absolute, zero-based addressing, thereby resulting in a start value of 9. - In certain exemplary embodiments, the size value of the improved application directory entry can be further divided into a lower nibble and an upper nibble, the lower nibble for storing an entry size value, while the upper nibble is reserved for future use or as an error or logging flag. Further size value of a stored software application refers to contiguous blocks of data memory blocks in the sectors of the contactless smart card, ignoring the access memory blocks. By way of an example, an application starting at block 9 (
sector 2, memory block 1) with size 4, would be stored inblocks sector 2 and then blocks 0 and 1 ofsector 3, avoiding the access memory blocks in between. - In certain exemplary embodiments, the structure of the second application directory stored in
sector 39 may include a header entry for recognition by an external card reader, similar to the manufacturer's memory block insector 0. The header memory block ofsector 39 includes a 2 byte cyclic redundancy check (CRC), a 4 byte unique identifier for the application directory provider, a single byte version code, an 8 byte reserved area, and a single byte entry count. Further, the CRC value includes a CRC 16 verification for the application directory, the CRC 16 verification following the definition of CRC_B as stated in the ISO/IEC 14443 standards. The unique identifier identifies the owner or issuer of the second application directory, and external card readers may verify the unique identifier prior to accessing linked software applications or application data. - The version code provides space for storage of revision information related to the second application directory, while the entry count stores a number corresponding to the number of active software applications registered with the second application directory. Further, the entries in the second application directory may be pre-sorted in an ascending or descending order, thereby making it easier for an external card reader to locate the preferred software application for reading. In another exemplary embodiment, a transaction log may be made available within the memory area assigned to the second set of software applications. Accordingly, the transaction log may be implemented as a software application with a default AID, such as 0xfffe, stored as one of the second set of software applications within a pre-determined area in the contactless smart card assigned for the second application directory. Further, in an exemplary embodiment, an application directory entry for the transaction log may define the transaction log from a minimum size of 1 block to a maximum size of 15 blocks, per the requirement of the transaction volumes, and the number of the second set of software applications stored within the memory area of the second application directory. The transaction log may, therefore, be assigned an AID that is referenced in the second application directory as an entry.
- The transaction log may store codes for activities involving the second set of software applications of the contactless smart card, where in one example, a transaction status is logged in the transaction log when the contactless smart card transacts with an external card reader. The structure of the transaction log includes a 2 byte CRC_B verification code, a single byte log, a single byte count field for the number of AIDs of active software applications available for transaction purposes, an 8 byte reader identifier field for identifying the external card reader that is in transaction with the software applications on the contactless smart card, and an AID for the active second software application in transaction with the external card reader. The transaction log may be used by external card reader, when the AID of the transaction log exists in the second application directory. For the reader identifier, the first 3 bytes are an organization identifier to identify the organization/owner of the reader device, where the 3 bytes match a standard identifier following Institute of Electrical and Electronics Engineers (IEEE) Organizationally Unique Identifier (OUI) standards. Five bytes remaining in the reader identifier are assigned for unique codes within the 8 byte reader identifier, where the unique codes are globally unique for the life of an external card reader. By way of an example, a 48 bit Media Access Control (MAC) address may be used as a unique code for the 8 byte section of the reader identifier.
- The single byte log in the transaction log includes a transaction status to log post-transaction results between the contactless smart card and the external card reader. By way of an example, the transaction statues available for storage include, an AID not found status code, an AID read success status code, an AID read failure status code, and a final reserved status code. Further, the single byte log may log the application directory status interaction with the external card reader. The final reserved status code may be used for storing a status of the actual transaction with a software application after the application directory has forwarded the external card reader to a select software application.
- The AIDs for the second application directory may include a 12 bit merchant prefix and a 4 bit program code. The program code divides the merchant prefix by the type of merchant. By way of an example, in the program code, 0x0 is an undefined/uncategorized program code, 0x1 is a loyalty card program code, 0x2 is a coupon program code, 0x3 is a prepaid gift card program code, 0x4 to 0xf are reserved for other categories. An AID with code 0xfed2 can be decoded by merchant prefix Oxfed, with program code 0x2.
- The control software application or the control applet, and the wallet software application (user-interface software application) perform service and provisioning of the secure element namespace and provide a convenient interface to ensure that the software application providers or the card issuer provisions the memory using correct application IDs (AIDs). This action ensures that new software applications do not overwrite the application software or application data of other software applications in the secure element namespace. For the software application providers to interact with the control software application, the card issuer publishes a protocol, which may be in a message format and an associated transaction model. The initiation of provisioning can be driven from the wallet software application by the user. Once a credential has been provisioned for a partner (one of a number of software application providers), the solution provides a callback identifier that the software application provider can use to deliver push notifications to the device.
- In certain exemplary embodiments, all control applet transactions can be initiated by the wallet software application, even if a transaction occurs as a consequence of a pushed event notification. The wallet software application can be the initiator of the transaction. In this method, the control software application solution may be different from the traditional EMVCo provisioning in that, in the control software application, the wallet software application is the master and the software applications are slaves of the transaction. Conversely, for EMVCo provisioning, the software application providers (for example, financial institutions or transit systems) are the masters of the transactions and the wallet software application is the slave without knowledge of even what actions are being performed to it by the software application provider, via the TSM. This design can alleviate the necessity of a TSM, as the control applet in conjunction with the wallet software application, and an asymmetric key-pair cryptography algorithm plays the role of the trusted neutral and secure software application provider. The control software application may additionally define all interactions that will be driven over a secure channel (enforced by at least a secure socket layer or SSL).
- In certain exemplary embodiments, the control software application implementation is performed via a Representative State Transfer (RESTful) interface, which is a stateless client-server architecture, using messages in a defined JavaScript Object Notification or JSON format. The control software application involves transaction in a sequence of events that starts with the wallet software application sending a commence provision message to a partner device, where the partner device may be a non-TSM computer or a TSM computer operating as a remote server host for multiple software applications. The commence message includes the information necessary for the non-TSM computer to encode a 'manage transaction' response that is securely returned to the wallet software application. The partner uses the information in the commence transaction message to encode data in the response message. For example, the commence message can include the public key for the control applet to match with a private key stored in the contactless smart card device.
-
Fig. 1 illustrates asystem 100 for a contactlesssmart card device 144 including a contactlesssmart card 156 with a secure element 160, where the secure element 160 has stored within it, a secure application directory according to certain exemplary embodiments. Software applications are deployed to the contactlesssmart card device 144 from a trusted service manager (TSM) 108 hosted by a near field communication (NFC)service provider 104 orsoftware application providers 112. Further, the TSM may receive software applications from theproviders 112 via a securecommunication internet channel 132, where theproviders 112 include servers hosting a software application for different merchants and merchant types, such ascredit card companies 116,ticketing companies 120,coupon companies 124, andauthentication companies 128. - The software applications from the
TSM 108 may be deployed to the contactlesssmart card device 144 via a secure wireless connection, e.g., GSM andCDMA 140 using awireless service provider 136 as a proxy server. Alternatively, theTSM 108 deploys software applications to the contactlesssmart card 144 via a secure wireless 802.11 standard connection to a Wi-Fi enableddevice 144. The software applications may be requested by an end-user using a user-interface software application 152 on thedevice 144. The received software applications deploy directly to the secure element namespace 160 or a secure memory in the contactlesssmart card 156. The contactless smart card interacts with an externalcard reader device 172 via theNFC controller chip 164 and anantenna 168 configured to transmit and receive radio frequency signals. - In certain exemplary embodiments, the contactless
smart card 156 is an independent card device capable of interacting with anexternal reader device 172 independent of any contactless smart card device serving as its host. The contactlesssmart card 156 may then be loaded with software applications using an external card reader device especially configured to provision the namespace 160 of the contactlesssmart card device 156 using radio frequency signals and a write access key to write software applications or application data to the appropriate areas of the namespace. -
Fig. 2 illustrates amemory structure 200 of a 4KB contactless smart card with a default or existingapplication directory 248B according to certain exemplary embodiments. Thesecure element namespace 204 is divided, virtually, into 40sectors 208, each sector including a number of memory blocks 212. Further, the 40 sectors include 32 sectors of 4 memory blocks and 8 sectors of 16 memory blocks. Each sector includes at least oneaccess memory block 220, 228, and 252, for access control of the blocks within the sector. In each sector, the remaining blocks may be reserved as data memory blocks for storing software applications or application data. Each memory block, for an access or data type memory block, includes 16 bytes perblock 216 of access or data stored within it. - The access memory blocks for each sector stores an
A keys 220A-Z, access bits in access memory blocks 228A-Z, and aB keys 252A-Z for accessing the sectors' memory blocks, where either the A key 220, theB key 252, or a combination of both theaccess keys 220 and 252 may be used to define different access types stored as access bits within the memory blocks of each sector. By way of an example, in certain sectors, an external card reader may only access data memory blocks for reading stored application data, e.g., in an authentication card, the authentication information may be stored in the data memory blocks, where the external card reader may only read the authentication information, but not edit it. A specialized external card reader device with write access key may be used to edit the authentication information in the data memory block. - In an example, for the transaction log, the sector including the transaction logs within the data memory block of the sector may be configured to be accessed for writing purposes by the external card reader, to write the card reader's reader identifier to the transaction log. The external card reader provides the contactless smart card with its write access key prior to being allowed any write access.
Sectors 0 has onedata memory block 256 assigned for manufacturer's information. The manufacturer of the contactless smart card may store card unique identifier, which may be used by a card issuer to generate the default access keys for the A key and the B key. Thereafter, the card issuer may change the access keys and store new access keys within the contactless smart card for use by specialized external card readers, according to the type of function provided by the external card readers. -
Fig. 3 illustrates amemory structure 300A-B of a 4KB contactless smart card with asecure application directory 328A-Z according to certain exemplary embodiments. In the memory structure illustration of 300A, thesecure element namespace 304 includes a default or existingapplication directory 336B, where a limited number of the 40sectors 312 are allocated to the default application directory. This allows legacy card readers to read existing software applications within the namespace of the contactless smart card. Thedefault application directory 336B may generally be stored insector 0 of the secure element namespace, with sectors 0-15 assigned to the default application directory. Further, the sectors 0-15 may be 4-memory blocks 316 per-sector type memory areas for storing default or legacy software applications. The second application directory is stored insector 39 and includes 15 data memory blocks for storing AIDs relating to a second set of software applications. The second application directory 328 may be accessed by an external card reader, provided that the external card reader has access to a read type for accessing and finding the application directory 328 and linking to software applications stored within sectors of the memory area associated with the second application directory, e.g., 328A-Z. Since sectors 0-15 are associated with the default application directory, sectors 16-39 may be configured to store the second set of software applications. - The memory structure illustration of 300B includes more details for
sector 39 of the contactless smart card, wheresector 39 stores the second application directory 328.Memory block 15 of the series of memory blocks 316 insector 39 includes the access memory blocks including 320A, 324A, and 340A. The A key 320A may be configured to provide read access to external card readers, e.g., turnstiles and other transaction devices. The external card readers are then provided access to read the second application directory starting atdata memory block 1 tomemory block 14.Memory block 9 ofsector 39 is reserved for a header entry including 364A-E, for the CRC, UNIQUE_ID, version, count, and reserved areas. Data memory blocks 0 to 16 each 16 bytes per memory block, where 4 bytes of data memory block is an application directory entry. By way of an example, as described in detail above, the application directory entry includes an AID of atarget software application start byte value target software application -
Fig. 4 illustrates a computer-implementedmethod 400 for a secure application directory in contactless smart cards according to certain exemplary embodiments. Once the second application directory is defined in terms of number of software applications, size of the secure element namespace, and the access control information, block 405 stores the information in respective memory blocks of the contactless smart card. Inblock 405, an external card reader device with write access permissions to memory blocks in sectors 16-39 may accesssector 39 to write an application directory entry for one of a number of software applications stored in the contactless smart card. The storing process ofblock 405 includes writing an application identifier (AID) for the software application; a starting memory block number for a starting memory block of the memory area, where the starting memory block holds at least a part of the software application; and a size for the software application, the size defining a number of data memory blocks from the starting data memory block for storing the entire software application. -
Block 410 performs a storing function for storing an access key for access to read the application directory entry stored within the data memory block. The access key for reading the application directory in stored in access memory block of the contactless smart card, the access memory block providing access control over the sector of the contactless smart card including the application directory entry. - The exemplary methods and acts described in the embodiments presented previously are illustrative, and, in alternative embodiments, certain acts can be performed in a different order, in parallel with one another, omitted entirely, and/or combined between different exemplary embodiments, and/or certain additional acts can be performed, without departing from the scope and spirit of the disclosure. Accordingly, such alternative embodiments are included in the disclosures described herein.
- The exemplary embodiments can be used with computer hardware and software that perform the methods and processing functions described above. As will be appreciated by those having ordinary skill in that art, the systems, methods, and procedures described herein can be embodied in a programmable computer, computer executable software, or digital circuitry. The software can be stored on computer readable media. For example, "computer-coded," "software," "scripts," "computer-readable software code," and "programs" are software codes used interchangeably for the purposes of simplicity in this disclosure. Further, "memory," "computer-program product" and storage can include such media as, floppy disk, RAM, ROM, hard disk, removable media, flash memory, memory stick, optical media, magneto-optical media, CD-ROM, etc.
- Although specific embodiments have been described above in detail, the description is merely for purposes of illustration. It should be appreciated, therefore, that many aspects described above are not intended as required or essential elements unless explicitly stated otherwise. Various modifications of, and equivalent acts corresponding to, the disclosed aspects of the exemplary embodiments, in addition to those described above, can be made by a person of ordinary skill in the art, having the benefit of the present disclosure, without departing from the spirit and scope of the invention defined in the following claims, the scope of which is to be accorded the broadest interpretation so as to encompass such modifications and equivalent structures.
The following description pages 19 to 42 contain preferred embodiments. - 1. A computer-implemented method for a secure application directory in a smart card, the method comprising:
- storing, in a data memory block of the smart card, an application directory entry for one of a plurality of software applications stored in the smart card, the application directory entry comprising:
- an application identifier (AID) for the software application;
- a starting memory block number for a starting memory block of the memory area, wherein the starting memory block holds at least a part of the software application; and
- a size for the software application, the size defining a number of data memory blocks from the starting data memory block for storing the entire software application; and
- storing, in an access memory block of the smart card, an access key for access to read the application directory entry stored within the data memory block.
- storing, in a data memory block of the smart card, an application directory entry for one of a plurality of software applications stored in the smart card, the application directory entry comprising:
- 2. The method according to 1, wherein the smart card comprises a default or existing application directory, different from the secure application directory, and stored in a different data memory block of the smart card.
- 3. The method according to 1, wherein the starting memory block number is a single byte value comprising an absolute value for an address of the data memory block, the absolute value calculated using a zero-based numbering system.
- 4. The method according to 1, wherein the starting memory block number is a single byte value for an absolute memory address calculated as a sum of a product of the size of the software application stored in the memory block and the reference index of the memory block, and the memory address of the first memory block within the reference index of the memory block.
- 5. The method according to 1, wherein the size of the software application is in the form of a single byte having a value for the number of contiguous memory blocks assigned to store the software application.
- 6. The method according to 1, wherein the size of the software application is in the form of a single byte, and wherein the single byte further comprises a lower nibble with a value for the number of contiguous memory blocks assigned to store the software application.
- 7. The method according to 1, wherein the application directory entry comprising the AID is sorted in an ascending or descending order prior to storing within the data memory block.
- 8. The method according to 1, wherein a second access key is stored in the access memory block for access to edit the application directory entry stored within the data memory block.
- 9. The method according to 1, further comprising an external card reader using the access key for reading the application directory entry stored within the data memory block.
- 10. The method according to 1, further comprising a group of log memory blocks for recording transactions performed by an external card reader and the smart card.
- 11. The method according to 1, wherein the AID comprises a software code defining the type of software application related to the AID, the type of software application defined as one among a loyalty card software application, a coupon software application, a prepaid gift card software application, and a transit card software application.
- 12. A smart card with a secure application directory, the smart card, comprising:
- a data memory block for storing an application directory entry for one of a plurality of software applications stored in the smart card, the application directory entry comprising:
- an application identifier (AID) for the software application;
- a starting memory block number for a starting memory block of the memory area, wherein the starting memory block holds at least a part of the software application; and
- a size for the software application, the size defining a number of data memory blocks from the starting data memory block for storing the entire software application; and
- an access memory block for storing an access key for access to read the application directory entry stored within the data memory block.
- a data memory block for storing an application directory entry for one of a plurality of software applications stored in the smart card, the application directory entry comprising:
- 13. The smart card according to 12, wherein the smart card comprises a default or existing application directory, different from the secure application directory, and stored in a different data memory block of the smart card.
- 14. The smart card according to 12, wherein the starting memory block number is a single byte value comprising an absolute value for an address of the data memory block, the absolute value calculated using a zero-based numbering system.
- 15. The smart card according to 12, wherein the starting memory block number is a single byte value for an absolute memory address calculated as a sum of a product of the size of the software application stored in the memory block and the reference index of the memory block, and the memory address of the first memory block within the reference index of the memory block.
- 16. The smart card according to 12, wherein the size of the software application is in the form of a single byte having a value for the number of contiguous memory blocks assigned to store the software application.
- 17. The smart card according to 12, wherein the size of the software application is in the form of a single byte, and wherein the single byte further comprises a lower nibble with a value for the number of contiguous memory blocks assigned to store the software application.
- 18. The smart card according to 12, wherein the application directory entry comprising the AID is sorted in an ascending or descending order prior to storing within the directory memory block.
- 19. The smart card according to 12, wherein a second access key is assigned is stored in the access memory block for access to edit the application directory entry stored within the data memory block.
- 20. The smart card according to 12, further comprising an external card reader using the access key for reading the application directory entry stored within the data memory block.
- 21. The smart card according to 12, further comprising a group of log memory blocks for recording transactions performed by an external card reader and the smart card.
- 22. The smart card according to 12, wherein the AID comprises a software code defining the type of software application related to the AID, the type of software application defined as one among a loyalty card software application, a coupon software application, a prepaid gift card software application, and a transit card software application.
- 23. A computer-program product comprising computer-readable software code for a smart card with a secure application directory, the computer-program product comprising:
- computer-readable software code storing, in a data memory block of the smart card, an application directory entry for one of a plurality of software applications stored in the smart card, the application directory entry comprising:
- an application identifier (AID) for the software application;
- a starting memory block number for a starting memory block of the memory area, wherein the starting memory block holds at least a part of the software application; and
- a size for the software application, the size defining a number of data memory blocks from the starting data memory block for storing the entire software application; and
- computer-readable software code for storing, in an access memory block of the smart card, an access key for access to read the application directory entry stored within the data memory block.
- computer-readable software code storing, in a data memory block of the smart card, an application directory entry for one of a plurality of software applications stored in the smart card, the application directory entry comprising:
- 24. The computer-program product according to 23, wherein the smart card comprises a default or existing application directory, different from the secure application directory, and stored in a different data memory block of the smart card.
- 25. The computer-program product according to 23, wherein the starting memory block number is a single byte value comprising an absolute value for an address of the data memory block, the absolute value calculated using a zero-based numbering system.
- 26. The computer-program product according to 23, wherein the starting memory block number is a single byte value for an absolute memory address calculated as a sum of a product of the size of the software application stored in the memory block and the reference index of the memory block, and the memory address of the first memory block within the reference index of the memory block.
- 27. The computer-program product according to 23, wherein the size of the software application is in the form of a single byte, and wherein the single byte further comprises a lower nibble with a value for the number of contiguous memory blocks assigned to store the software application.
- 28. The computer-program product according to 23, wherein the application directory entry comprising the AID is sorted in an ascending or descending order prior to storing within the directory memory block.
- 29. The computer-program product according to 23, wherein a second access key is stored in the access memory block for access to edit the application directory entry stored within the data memory block.
- 30. The computer-program product according to 23, further comprising an external card reader using the access key for reading the application directory entry stored within the data memory block.
- 31. The computer-program product according to 23, further comprising a group of log memory blocks for recording transactions performed by an external card reader and the smart card.
- 32. The computer-program product according to 23, wherein the AID comprises a software code defining the type of software application related to the AID, the type of software application defined as one among a loyalty card software application, a coupon software application, a prepaid gift card software application, and a transit card software application.
- 33. A computer-implemented method for a secure application directory in a smart card, the method comprising:
- storing, in a data memory block of the smart card, an application directory entry for one of a plurality of software applications stored in the smart card, wherein the smart card comprises a default or existing application directory, different from the secure application directory comprising the application directory entry, and stored in a different data memory block of the smart card, the application directory entry comprising:
- an application identifier (AID) for the software application;
- a starting memory block number for a starting memory block of the memory area, wherein the starting memory block holds at least a part of the software application; and
- a size for the software application, the size defining a number of data memory blocks from the starting data memory block for storing the entire software application; and
- storing, in an access memory block of the smart card, an access key for access to read the application directory entry stored within the data memory block.
- storing, in a data memory block of the smart card, an application directory entry for one of a plurality of software applications stored in the smart card, wherein the smart card comprises a default or existing application directory, different from the secure application directory comprising the application directory entry, and stored in a different data memory block of the smart card, the application directory entry comprising:
- 34. The method according to 33, wherein the starting memory block number is a single byte value comprising an absolute value for an address of the data memory block, the absolute value calculated using a zero-based numbering system.
- 35. The method according to 33, wherein the starting memory block number is a single byte value for an absolute memory address calculated as a sum of a product of the size of the software application stored in the memory block and the reference index of the memory block, and the memory address of the first memory block within the reference index of the memory block.
- 36. The method according to 33, wherein the size of the software application is in the form of a single byte having a value for the number of contiguous memory blocks assigned to store the software application.
- 37. The method according to 33, wherein the size of the software application is in the form of a single byte, and wherein the single byte further comprises a lower nibble with a value for the number of contiguous memory blocks assigned to store the software application.
- 38. The method according to 33, wherein the application directory entry comprising the AID is sorted in an ascending or descending order prior to storing within the data memory block.
- 39. The method according to 33, wherein a second access key is stored in the access memory block for access to edit the application directory entry stored within the data memory block.
- 40. The method according to 33, further comprising an external card reader using the access key for reading the application directory entry stored within the data memory block.
- 41. The method according to 33, further comprising a group of log memory blocks for recording transactions performed by an external card reader and the smart card.
- 42. The method according to 33, wherein the AID comprises a software code defining the type of software application related to the AID, the type of software application defined as one among a loyalty card software application, a coupon software application, a prepaid gift card software application, and a transit card software application.
- 43. A smart card with a secure application directory, the smart card, comprising:
- a data memory block for storing an application directory entry for one of a plurality of software applications stored in the smart card, wherein the smart card comprises a default or existing application directory, different from the secure application directory comprising the application directory entry, and stored in a different data memory block of the smart card, the application directory entry comprising:
- an application identifier (AID) for the software application;
- a starting memory block number for a starting memory block of the memory area, wherein the starting memory block holds at least a part of the software application; and
- a size for the software application, the size defining a number of data memory blocks from the starting data memory block for storing the entire software application; and
- an access memory block for storing an access key for access to read the application directory entry stored within the data memory block.
- a data memory block for storing an application directory entry for one of a plurality of software applications stored in the smart card, wherein the smart card comprises a default or existing application directory, different from the secure application directory comprising the application directory entry, and stored in a different data memory block of the smart card, the application directory entry comprising:
- 44. The smart card according to 43, wherein the starting memory block number is a single byte value comprising an absolute value for an address of the data memory block, the absolute value calculated using a zero-based numbering system.
- 45. The smart card according to 43, wherein the starting memory block number is a single byte value for an absolute memory address calculated as a sum of a product of the size of the software application stored in the memory block and the reference index of the memory block, and the memory address of the first memory block within the reference index of the memory block.
- 46. The smart card according to 43, wherein the size of the software application is in the form of a single byte having a value for the number of contiguous memory blocks assigned to store the software application.
- 47. The smart card according to 43, wherein the size of the software application is in the form of a single byte, and wherein the single byte further comprises a lower nibble with a value for the number of contiguous memory blocks assigned to store the software application.
- 48. The smart card according to 43, wherein the application directory entry comprising the AID is sorted in an ascending or descending order prior to storing within the directory memory block.
- 49. The smart card according to 43, wherein a second access key is assigned is stored in the access memory block for access to edit the application directory entry stored within the data memory block.
- 50. The smart card according to 43, further comprising an external card reader using the access key for reading the application directory entry stored within the data memory block.
- 51. The smart card according to 43, further comprising a group of log memory blocks for recording transactions performed by an external card reader and the smart card.
- 52. The smart card according to 43, wherein the AID comprises a software code defining the type of software application related to the AID, the type of software application defined as one among a loyalty card software application, a coupon software application, a prepaid gift card software application, and a transit card software application.
- 53. A computer-program product comprising computer-readable software code for a smart card with a secure application directory, the computer-program product comprising:
- computer-readable software code storing, in a data memory block of the smart card, an application directory entry for one of a plurality of software applications stored in the smart card, wherein the smart card comprises a default or existing application directory, different from the secure application directory comprising the application directory entry, and stored in a different data memory block of the smart card, the application directory entry comprising:
- an application identifier (AID) for the software application;
- a starting memory block number for a starting memory block of the memory area, wherein the starting memory block holds at least a part of the software application; and
- a size for the software application, the size defining a number of data memory blocks from the starting data memory block for storing the entire software application; and
- computer-readable software code for storing, in an access memory block of the smart card, an access key for access to read the application directory entry stored within the data memory block.
- computer-readable software code storing, in a data memory block of the smart card, an application directory entry for one of a plurality of software applications stored in the smart card, wherein the smart card comprises a default or existing application directory, different from the secure application directory comprising the application directory entry, and stored in a different data memory block of the smart card, the application directory entry comprising:
- 54. The computer-program product according to 53, wherein the starting memory block number is a single byte value comprising an absolute value for an address of the data memory block, the absolute value calculated using a zero-based numbering system.
- 55. The computer-program product according to 53, wherein the starting memory block number is a single byte value for an absolute memory address calculated as a sum of a product of the size of the software application stored in the memory block and the reference index of the memory block, and the memory address of the first memory block within the reference index of the memory block.
- 56. The computer-program product according to 53, wherein the size of the software application is in the form of a single byte, and wherein the single byte further comprises a lower nibble with a value for the number of contiguous memory blocks assigned to store the software application.
- 57. The computer-program product according to 53, wherein the application directory entry comprising the AID is sorted in an ascending or descending order prior to storing within the directory memory block.
- 58. The computer-program product according to 53, wherein a second access key is assigned is stored in the access memory block for access to edit the application directory entry stored within the data memory block.
- 59. The computer-program product according to 53, further comprising an external card reader using the access key for reading the application directory entry stored within the data memory block.
- 60. The computer-program product according to 53, further comprising a group of log memory blocks for recording transactions performed by an external card reader and the smart card.
- 61. The computer-program product according to 53, wherein the ID comprises a software code defining the type of software application related to the AID, the type of software application defined as one among a loyalty card software application, a coupon software application, a prepaid gift card software application, and a transit card software application.
- 62. A computer-implemented method for storing multiple applications in a single sector of a contactless smart card namespace, the method comprising:
- storing, for each application stored in the namespace, an application directory entry in a data memory block of an application directory in the contactless smart card namespace, each application directory entry comprising:
- an application identifier (AID) for each corresponding software application stored in one or more data memory blocks of the contactless smart card namespace;
- a starting memory block number for a starting memory block in a sector of the contactless smart card namespace, wherein the starting memory block holds at least a part of the corresponding software application; and
- a size for the corresponding software application, the size defining a number of contiguous data memory blocks including the starting data memory block that store the entire software application.
- storing, for each application stored in the namespace, an application directory entry in a data memory block of an application directory in the contactless smart card namespace, each application directory entry comprising:
- 63. The method according to 62, wherein the contactless smart card comprises a default or existing application directory, different from the secure application directory, and stored in a different data memory block of the contactless smart card.
- 64. The method according to 62, wherein the starting memory block number is a single byte value comprising an absolute value for an address of the data memory block in the contactless smart card namespace, the absolute value calculated using a zero-based numbering system.
- 65. The method according to 62, wherein the starting memory block number is a single byte value for an absolute memory address calculated as a sum of a product of the size of the software application stored in the memory block and the reference index of the memory block, and the memory address of the first memory block within the reference index of the memory block.
- 66. The method according to 62, wherein the size of the software application is in the form of a single byte having a value for the number of contiguous memory blocks assigned to store the software application.
- 67. The method according to 62, wherein the size of the software application is in the form of a single byte, and wherein the single byte further comprises a lower nibble with a value for the number of contiguous memory blocks assigned to store the software application.
- 68. The method according to 62, wherein the application directory entry comprising the AID is sorted in an ascending or descending order prior to storing within the data memory block.
- 69. The method according to 62, further comprising an external card reader for reading the application directory entry stored within the data memory block.
- 70. The method according to 62, further comprising a group of log memory blocks for recording transactions performed by an external card reader and the contactless smart card.
- 71. The method according to 62, wherein the AID comprises a software code defining the type of software application related to the AID, the type of software application defined as one among a loyalty card software application, a coupon software application, a prepaid gift card software application, and a transit card software application.
- 72. A contactless smart card with a secure application directory, the contactless smart card, comprising:
- a namespace comprising a plurality of sectors, each sector comprising a plurality of data memory blocks;
- an application directory in a sector of the namespace, wherein the application directory comprises, for each software application stored in the namespace, an application directory entry, each application directory entry comprising:
- an application identifier (AID) for the corresponding software application;
- a starting memory block number for a starting memory block in a sector of the contactless smart card namespace, wherein the starting memory block holds at least a part of the software application; and
- a size for the corresponding software application, the size defining a number of contiguous data memory blocks from the starting data memory block that store a remainder of the software application.
- 73. The contactless smart card according to 72, wherein the contactless smart card comprises a default or existing application directory, different from the secure application directory, and stored in a different data memory block of the contactless smart card.
- 74. The contactless smart card according to 72, wherein the starting memory block number is a single byte value comprising an absolute value for an address of the data memory block in the contactless smart card namespace, the absolute value calculated using a zero-based numbering system.
- 75. The contactless smart card according to 72, wherein the starting memory block number is a single byte value for an absolute memory address calculated as a sum of a product of the size of the software application stored in the memory block and the reference index of the memory block, and the memory address of the first memory block within the reference index of the memory block.
- 76. The contactless smart card according to 72, wherein the size of the software application is in the form of a single byte having a value for the number of contiguous memory blocks assigned to store the software application.
- 77. The contactless smart card according to 72, wherein the size of the software application is in the form of a single byte, and wherein the single byte further comprises a lower nibble with a value for the number of contiguous memory blocks assigned to store the software application.
- 78. The contactless smart card according to 72, wherein the application directory entry comprising the AID is sorted in an ascending or descending order prior to storing within the directory memory block.
- 79. The contactless smart card according to 72, further comprising an external card reader for reading the application directory entry stored within the data memory block.
- 80. The contactless smart card according to 72, further comprising a group of log memory blocks for recording transactions performed by an external card reader and the contactless smart card.
- 81. The contactless smart card according to 72, wherein the AID comprises a software code defining the type of software application related to the AID, the type of software application defined as one among a loyalty card software application, a coupon software application, a prepaid gift card software application, and a transit card software application.
- 82. A computer-program product comprising computer-readable software code for storing multiple applications in a single sector of a contactless smart card namespace, the computer-program product comprising:
- computer-readable software code for storing, for each application stored in the namespace, an application directory entry in a data memory block of an application directory in the contactless smart card namespace, each application directory entry comprising:
- an application identifier (AID) for each corresponding software application;
- a starting memory block number for a starting memory block in the sector of the contactless smart card namespace, wherein the starting memory block holds at least a part of the corresponding software application; and
- a size for the corresponding software application, the size defining a number of contiguous data memory blocks from the starting data memory block that store a remainder of the software application; and
- computer-readable software code for storing, for each application stored in the namespace, an application directory entry in a data memory block of an application directory in the contactless smart card namespace, each application directory entry comprising:
- 83. The computer-program product according to 82, wherein the contactless smart card comprises a default or existing application directory, different from the secure application directory, and stored in a different data memory block of the contactless smart card.
- 84. The computer-program product according to 82, wherein the starting memory block number is a single byte value comprising an absolute value for an address of the data memory block in the contactless smart card namespace, the absolute value calculated using a zero-based numbering system.
- 85. The computer-program product according to 82, wherein the starting memory block number is a single byte value for an absolute memory address calculated as a sum of a product of the size of the software application stored in the memory block and the reference index of the memory block, and the memory address of the first memory block within the reference index of the memory block.
- 86. The computer-program product according to 82, wherein the size of the software application is in the form of a single byte, and wherein the single byte further comprises a lower nibble with a value for the number of contiguous memory blocks assigned to store the software application.
- 87. The computer-program product according to 82, wherein the application directory entry comprising the AID is sorted in an ascending or descending order prior to storing within the directory memory block.
- 88. The computer-program product according to 82, further comprising an external card reader for reading the application directory entry stored within the data memory block.
- 89. The computer-program product according to 82, further comprising a group of log memory blocks for recording transactions performed by an external card reader and the contactless smart card.
- 90. The computer-program product according to 82, wherein the ID comprises a software code defining the type of software application related to the AID, the type of software application defined as one among a loyalty card software application, a coupon software application, a prepaid gift card software application, and a transit card software application.
- 91. A computer-implemented method for storing multiple applications in a single sector of a contactless smart card namespace, the method comprising:
- storing, for each application stored in the namespace, an application directory entry in a data memory block of an application directory in the contactless smart card namespace, each application directory entry comprising:
- an application identifier (AID) for each corresponding software application stored in one or more data memory blocks of the contactless smart card namespace;
- a starting memory block number for a starting memory block in a sector of the contactless smart card namespace, wherein the starting memory block holds at least a part of the corresponding software application; and
- a size for the corresponding software application, the size defining a number of contiguous data memory blocks including the starting data memory block that store the entire software application; and
- storing, in an access memory block of the application directory, an access key for read access to the application directory.
- storing, for each application stored in the namespace, an application directory entry in a data memory block of an application directory in the contactless smart card namespace, each application directory entry comprising:
- 92. The method according to 91, wherein the starting memory block number is a single byte value comprising an absolute value for an address of the data memory block in the contactless smart card namespace, the absolute value calculated using a zero-based numbering system.
- 93. The method according to 91, wherein the starting memory block number is a single byte value for an absolute memory address in the contactless smart card namespace, calculated as a sum of a product of the size of the software application stored in the memory block and the reference index of the memory block, and the memory address of the first memory block within the reference index of the memory block.
- 94. The method according to 91, wherein the size of the software application is in the form of a single byte having a value for the number of contiguous memory blocks assigned to store the software application.
- 95. The method according to 91, wherein the size of the software application is in the form of a single byte, and wherein the single byte further comprises a lower nibble with a value for the number of contiguous memory blocks assigned to store the software application.
- 96. The method according to 91, wherein the application directory entry comprising the AID is sorted in an ascending or descending order prior to storing within the data memory block.
- 97. The method according to 91, wherein a second access key is stored in the access memory block for access to edit the application directory entry stored within the data memory block.
- 98. The method according to 91, further comprising an external card reader using the access key for reading the application directory entry stored within the data memory block.
- 99. The method according to 91, further comprising a group of log memory blocks for recording transactions performed by an external card reader and the contactless smart card.
- 100. The method according to 91, wherein the AID comprises a software code defining the type of software application related to the AID, the type of software application defined as one among a loyalty card software application, a coupon software application, a prepaid gift card software application, and a transit card software application.
- 101. The computer-implemented method of 91, wherein the contactless smart card comprises a MIFARE type data structure.
- 102. A contactless smart card with a secure application directory, the contactless smart card, comprising:
- a namespace comprising a plurality of sectors, each sector comprising a plurality of data memory blocks;
- an application directory in a sector of the namespace, wherein the application directory comprises an access memory block for storing an access memory key for read access to the application directory, and for each software application stored in the namespace, an application directory entry stored in the data memory blocks of the application directory, each application directory entry comprising:
- an application identifier (AID) for the corresponding software application;
- a starting memory block number for a starting memory block in a sector of the contactless smart card namespace, wherein the starting memory block holds at least a part of the software application; and
- a size for the corresponding software application, the size defining a number of contiguous data memory blocks from the starting data memory block that store a remainder of the software application.
- 103. The contactless smart card according to 102, wherein the starting memory block number is a single byte value comprising an absolute value for an address of the data memory block in the contactless smart card namespace, the absolute value calculated using a zero-based numbering system.
- 104. The contactless smart card according to 102, wherein the starting memory block number is a single byte value for an absolute memory address calculated as a sum of a product of the size of the software application stored in the memory block and the reference index of the memory block, and the memory address of the first memory block within the reference index of the memory block.
- 105. The contactless smart card according to 102, wherein the size of the software application is in the form of a single byte having a value for the number of contiguous memory blocks assigned to store the software application.
- 106. The contactless smart card according to 102, wherein the size of the software application is in the form of a single byte, and wherein the single byte further comprises a lower nibble with a value for the number of contiguous memory blocks assigned to store the software application.
- 107. The contactless smart card according to 102, wherein the application directory entry comprising the AID is sorted in an ascending or descending order prior to storing within the directory memory block.
- 108. The contactless smart card according to 102, wherein a second access key is stored in the access memory block for access to edit the application directory entry stored within the data memory block.
- 109. The contactless smart card according to 102, further comprising an external card reader using the access key for reading the application directory entry stored within the data memory block.
- 110. The contactless smart card according to 102, further comprising a group of log memory blocks for recording transactions performed by an external card reader and the contactless smart card.
- 111. The contactless smart card according to 102, wherein the AID comprises a software code defining the type of software application related to the AID, the type of software application defined as one among a loyalty card software application, a coupon software application, a prepaid gift card software application, and a transit card software application.
- 112. A computer-program product comprising computer-readable software code for storing multiple applications in a single sector of a contactless smart card namespace, the computer-program product comprising:
- computer-readable software code for storing, for each application stored in the namespace, an application directory entry in a data memory block of an application directory in the contactless smart card namespace, each application directory entry comprising:
- an application identifier (AID) for each corresponding software application;
- a starting memory block number for a starting memory block in the sector of the contactless smart card namespace, wherein the starting memory block holds at least a part of the corresponding software application; and
- a size for the corresponding software application, the size defining a number of contiguous data memory blocks from the starting data memory block that store a remainder of the software application; and
- computer-readable software code for storing, in an access memory block of the application directory an access key for read access to the application directory.
- computer-readable software code for storing, for each application stored in the namespace, an application directory entry in a data memory block of an application directory in the contactless smart card namespace, each application directory entry comprising:
- 113. The computer-program product according to 112, wherein the starting memory block number is a single byte value comprising an absolute value for an address of the data memory block in the contactless smart card namespace, the absolute value calculated using a zero-based numbering system.
- 114. The computer-program product according to 112, wherein the starting memory block number is a single byte value for an absolute memory address calculated as a sum of a product of the size of the software application stored in the memory block and the reference index of the memory block, and the memory address of the first memory block within the reference index of the memory block.
- 115. The computer-program product according to 112, wherein the size of the software application is in the form of a single byte, and wherein the single byte further comprises a lower nibble with a value for the number of contiguous memory blocks assigned to store the software application.
- 116. The computer-program product according to 112, wherein the application directory entry comprising the AID is sorted in an ascending or descending order prior to storing within the directory memory block.
- 117. The computer-program product according to 112, wherein a second access key is stored in the access memory block for access to edit the application directory entry stored within the data memory block.
- 118. The computer-program product according to 112, further comprising an external card reader using the access key for reading the application directory entry stored within the data memory block.
- 119. The computer-program product according to 112, further comprising a group of log memory blocks for recording transactions performed by an external card reader and the contactless smart card.
- 120. The computer-program product according to 112, wherein the AID comprises a software code defining the type of software application related to the AID, the type of software application defined as one among a loyalty card software application, a coupon software application, a prepaid gift card software application, and a transit card software application.
Claims (14)
- A computer-implemented method for storing multiple applications in single sectors of smart card namespaces, the method comprising:storing, for each application stored in a smart card namespace, an application directory entry in a data memory block of a secure application directory in the smart card namespace, each application directory entry comprising:an application identifier (AID) for each corresponding software application stored in one or more data memory blocks of a sector of the smart card namespace;a starting memory block number for a starting memory block in the sector of the smart card namespace, wherein the starting memory block holds at least a part of a corresponding software application; anda size for the corresponding software application, the size defining a number of contiguous data memory blocks including the starting data memory block that store the entire corresponding software application.
- The method according to claim 1, wherein the smart card comprises a default or existing application directory, different from the secure application directory, and stored in a different data memory block of the smart card namespace.
- The method according to claim 1, wherein the starting memory block number is a single byte value comprising an absolute value for an address of the data memory block in the smart card namespace, the absolute value calculated using a zero-based numbering system.
- The method according to claim 1, wherein the starting memory block number is a single byte value for an absolute memory address in the smart card namespace, calculated as a sum of a product of the size of the software application stored in the memory block and a reference index of the memory block, and a memory address of the first memory block within the reference index of the memory block.
- The method according to claim 1, wherein the size of the software application is in the form of a single byte having a value for the number of contiguous memory blocks assigned to store the software application.
- The method according to claim 1, wherein the size of the software application is in the form of a single byte, and wherein the single byte further comprises a lower nibble with a value for the number of contiguous memory blocks assigned to store the software application.
- The method according to claim 1, further comprising a group of log memory blocks for recording transactions performed by an external card reader and the smart card namespace.
- The method according to claim 1, wherein the AID comprises a software code defining a type of software application related to the AID, the type of software application defined as one among a loyalty card software application, a coupon software application, a prepaid gift card software application, and a transit card software application.
- The method according to any preceding claim, further comprising storing, for each application stored in the smart card namespace, an access key for read access to the secure application directory in an access memory block of the secure application directory.
- The method according to claim 9, wherein a second access key is stored in the access memory block for access to edit the application directory entry stored within the secure application directory.
- A smart card, comprising:a namespace comprising a plurality of sectors, each sector comprising a plurality of data memory blocks;a secure application directory in a sector of the namespace, wherein the secure application directory comprises, for each software application stored in the namespace, an application directory entry, each application directory entry comprising:an application identifier (AID) for each corresponding software application stored in one or more data memory blocks of a sector of the smart card namespace;a starting memory block number for a starting memory block in the sector of the smart card namespace, wherein the starting memory block holds at least a part of a corresponding software application; anda size for the corresponding software application, the size defining a number of contiguous data memory blocks from the starting data memory block that store a remainder of the software application.
- The smart card according to claim 11, wherein the application directory comprises an access memory block for storing, for each software application stored in the namespace, an access memory key for read access to the secure application directory, and an application directory entry stored in the data memory blocks of the secure application directory.
- The smart card according to claim 11 configured to perform a method as claimed in any one of claims 2 to 10.
- A computer program product comprising computer-readable software code configured to be run by a processor to store multiple applications in single sectors of smart card namespaces according to a method as claimed in any one of claims 1 to 10.
Applications Claiming Priority (4)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US13/234,849 US8313036B1 (en) | 2011-09-16 | 2011-09-16 | Secure application directory |
US13/246,466 US8297520B1 (en) | 2011-09-16 | 2011-09-27 | Secure application directory |
EP12826614.5A EP2612273B1 (en) | 2011-09-16 | 2012-09-13 | Secure application directory |
PCT/US2012/055091 WO2013040165A1 (en) | 2011-09-16 | 2012-09-13 | Secure application directory |
Related Parent Applications (2)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
EP12826614.5A Division EP2612273B1 (en) | 2011-09-16 | 2012-09-13 | Secure application directory |
EP12826614.5A Division-Into EP2612273B1 (en) | 2011-09-16 | 2012-09-13 | Secure application directory |
Publications (2)
Publication Number | Publication Date |
---|---|
EP3179430A1 true EP3179430A1 (en) | 2017-06-14 |
EP3179430B1 EP3179430B1 (en) | 2019-11-06 |
Family
ID=47045678
Family Applications (2)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
EP12826614.5A Active EP2612273B1 (en) | 2011-09-16 | 2012-09-13 | Secure application directory |
EP17152190.9A Active EP3179430B1 (en) | 2011-09-16 | 2012-09-13 | Secure application directory |
Family Applications Before (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
EP12826614.5A Active EP2612273B1 (en) | 2011-09-16 | 2012-09-13 | Secure application directory |
Country Status (7)
Country | Link |
---|---|
US (4) | US8313036B1 (en) |
EP (2) | EP2612273B1 (en) |
JP (1) | JP5462420B2 (en) |
KR (1) | KR101429736B1 (en) |
AU (1) | AU2013201170B2 (en) |
CA (1) | CA2814007C (en) |
WO (1) | WO2013040165A1 (en) |
Cited By (1)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
CN108427982A (en) * | 2018-03-16 | 2018-08-21 | 中国联合网络通信集团有限公司 | A kind of data read-write method and device |
Families Citing this family (32)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US9047601B2 (en) * | 2006-09-24 | 2015-06-02 | RFCyber Corpration | Method and apparatus for settling payments using mobile devices |
US20120266220A1 (en) * | 2010-11-17 | 2012-10-18 | Sequent Software Inc. | System and Method for Controlling Access to a Third-Party Application with Passwords Stored in a Secure Element |
US8621168B2 (en) | 2010-12-17 | 2013-12-31 | Google Inc. | Partitioning the namespace of a contactless smart card |
US8807440B1 (en) | 2010-12-17 | 2014-08-19 | Google Inc. | Routing secure element payment requests to an alternate application |
US8352749B2 (en) | 2010-12-17 | 2013-01-08 | Google Inc. | Local trusted services manager for a contactless smart card |
US8171525B1 (en) | 2011-09-15 | 2012-05-01 | Google Inc. | Enabling users to select between secure service providers using a central trusted service manager |
US8255687B1 (en) | 2011-09-15 | 2012-08-28 | Google Inc. | Enabling users to select between secure service providers using a key escrow service |
US8313036B1 (en) * | 2011-09-16 | 2012-11-20 | Google Inc. | Secure application directory |
MY185301A (en) | 2011-09-16 | 2021-04-30 | 3M Innovative Properties Co | Mechanical fastener, fastening system, and disposable absorbent article |
WO2013100419A1 (en) * | 2011-12-30 | 2013-07-04 | 에스케이씨앤씨 주식회사 | System and method for controlling applet access |
EP2800311A4 (en) | 2011-12-30 | 2016-01-06 | Mozido Corfire Korea Ltd | Master tsm |
US8385553B1 (en) | 2012-02-28 | 2013-02-26 | Google Inc. | Portable secure element |
US8429409B1 (en) | 2012-04-06 | 2013-04-23 | Google Inc. | Secure reset of personal and service provider information on mobile devices |
US20140189880A1 (en) * | 2012-12-31 | 2014-07-03 | Gemalto Sa | System and method for administrating access control rules on a secure element |
US9571372B1 (en) * | 2013-01-24 | 2017-02-14 | Symantec Corporation | Systems and methods for estimating ages of network devices |
US9495558B2 (en) * | 2013-03-26 | 2016-11-15 | Google Inc. | Systems, methods, and computer program products for managing access control |
US9287935B2 (en) * | 2013-08-01 | 2016-03-15 | Blackberry Limited | Method and apparatus for anti-eavesdropping in vunerable NFC applications |
US9880926B1 (en) * | 2013-08-20 | 2018-01-30 | Seagate Technology Llc | Log structured reserved zone for a data storage device |
EP2902947A1 (en) * | 2014-01-31 | 2015-08-05 | Nxp B.V. | RF communication device with access control for host interface |
DK3125882T3 (en) | 2014-04-01 | 2020-06-29 | Boehringer Ingelheim Vetmedica Gmbh | TREATMENT OF METABOLIC DISORDERS IN ANIMAL ANIMALS |
DE102014010698B3 (en) * | 2014-07-18 | 2015-11-19 | Giesecke & Devrient Gmbh | Subscriber identity module with multiple services |
US9843361B2 (en) * | 2014-10-06 | 2017-12-12 | Google Llc | Communicating via near field communications |
CN106294193B (en) * | 2015-06-03 | 2019-10-15 | 杭州海康威视系统技术有限公司 | Store equipment and the piecemeal storage method based on the storage equipment |
FR3042894B1 (en) * | 2015-10-27 | 2018-10-12 | Ingenico Group | METHOD FOR SECURING TRANSACTION DATA PROCESSING, TERMINAL AND CORRESPONDING COMPUTER PROGRAM |
EP3236405B1 (en) | 2016-04-21 | 2022-11-02 | IDEMIA France | Selecting an application on a card |
CN107590149B (en) * | 2016-07-07 | 2021-01-08 | 北京数码视讯科技股份有限公司 | File directory creation method and device in smart card |
US11157901B2 (en) * | 2016-07-18 | 2021-10-26 | Dream Payments Corp. | Systems and methods for initialization and activation of secure elements |
CN107229490B (en) * | 2016-12-02 | 2020-08-21 | 天地融科技股份有限公司 | Multi-application smart card transaction method and multi-application smart card |
BR102017010139B1 (en) * | 2017-05-15 | 2023-12-12 | Artur Pestana Ribeiro Costa | TECHNOLOGY VIRTUALIZATION METHOD FOR TRANSACTIONS INVOLVING CONTACTLESS CARDS |
US10467622B1 (en) * | 2019-02-01 | 2019-11-05 | Capital One Services, Llc | Using on-demand applications to generate virtual numbers for a contactless card to securely autofill forms |
RU2704528C1 (en) * | 2019-03-13 | 2019-10-29 | Акционерное общество "Актив-софт" | Method of using a smart card designed for a java operating system and having a manufacturing defect |
EP3948741A4 (en) * | 2019-03-27 | 2023-01-18 | Xard Group Pty Ltd | Storage of cryptographic key on a digital payment device (dpd) |
Citations (4)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20030174839A1 (en) * | 2001-06-27 | 2003-09-18 | Akihiko Yamagata | Integrated circuit device, information processing device, information recording device memory management method, mobile terminal device, semiconductor integrated circuit device, and communication method using mobile terminal device |
US20060206704A1 (en) * | 2003-08-26 | 2006-09-14 | Rf-It Solutions Gmbh | Data transmission system and method for operating a data transmission system |
US7308433B1 (en) * | 1998-01-23 | 2007-12-11 | Fujitsu Limited | Application managing method and information processing apparatus using the method |
US20100291896A1 (en) * | 2007-07-24 | 2010-11-18 | Nxp B.V. | Method, system and trusted service manager for securely transmitting an application to a mobile phone |
Family Cites Families (137)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
FR2606530A1 (en) | 1986-11-07 | 1988-05-13 | Eurotechnique Sa | INTEGRATED CIRCUIT FOR MEMORIZING AND PROCESSING CONFIDENTIALLY INFORMATION WITH AN ANTI-FRAUD DEVICE |
JPH02214994A (en) * | 1989-02-15 | 1990-08-27 | Hitachi Maxell Ltd | Ic card |
US5321242A (en) | 1991-12-09 | 1994-06-14 | Brinks, Incorporated | Apparatus and method for controlled access to a secured location |
US5221838A (en) | 1990-12-24 | 1993-06-22 | Motorola, Inc. | Electronic wallet |
US5375169A (en) | 1993-05-28 | 1994-12-20 | Tecsec, Incorporated | Cryptographic key management method and apparatus |
US5434919A (en) | 1994-01-11 | 1995-07-18 | Chaum; David | Compact endorsement signature systems |
NZ279622A (en) | 1994-01-13 | 1998-04-27 | Certco Llc | Encrypted secure and verifiable communication: cryptographic keys escrowed |
US7353396B2 (en) * | 1995-10-02 | 2008-04-01 | Corestreet, Ltd. | Physical access control |
US6041123A (en) | 1996-07-01 | 2000-03-21 | Allsoft Distributing Incorporated | Centralized secure communications system |
WO1998019237A1 (en) | 1996-10-25 | 1998-05-07 | Schlumberger Systemes | Using a high level programming language with a microcontroller |
US6151657A (en) | 1996-10-28 | 2000-11-21 | Macronix International Co., Ltd. | Processor with embedded in-circuit programming structures |
WO1998043212A1 (en) | 1997-03-24 | 1998-10-01 | Visa International Service Association | A system and method for a multi-application smart card which can facilitate a post-issuance download of an application onto the smart card |
EP1004992A3 (en) | 1997-03-24 | 2001-12-05 | Visa International Service Association | A system and method for a multi-application smart card which can facilitate a post-issuance download of an application onto the smart card |
US6230267B1 (en) | 1997-05-15 | 2001-05-08 | Mondex International Limited | IC card transportation key set |
US6328217B1 (en) | 1997-05-15 | 2001-12-11 | Mondex International Limited | Integrated circuit card with application history list |
US6092201A (en) | 1997-10-24 | 2000-07-18 | Entrust Technologies | Method and apparatus for extending secure communication operations via a shared list |
EP0917119A3 (en) | 1997-11-12 | 2001-01-10 | Citicorp Development Center, Inc. | Distributed network based electronic wallet |
US20020004783A1 (en) | 1997-11-12 | 2002-01-10 | Cris T. Paltenghe | Virtual wallet system |
US5991399A (en) | 1997-12-18 | 1999-11-23 | Intel Corporation | Method for securely distributing a conditional use private key to a trusted entity on a remote system |
US6101477A (en) | 1998-01-23 | 2000-08-08 | American Express Travel Related Services Company, Inc. | Methods and apparatus for a travel-related multi-function smartcard |
US6484174B1 (en) | 1998-04-20 | 2002-11-19 | Sun Microsystems, Inc. | Method and apparatus for session management and user authentication |
US6141752A (en) | 1998-05-05 | 2000-10-31 | Liberate Technologies | Mechanism for facilitating secure storage and retrieval of information on a smart card by an internet service provider using various network computer client devices |
US6131811A (en) | 1998-05-29 | 2000-10-17 | E-Micro Corporation | Wallet consolidator |
EP0987642A3 (en) | 1998-09-15 | 2004-03-10 | Citibank, N.A. | Method and system for co-branding an electronic payment platform such as an electronic wallet |
US7093122B1 (en) | 1999-01-22 | 2006-08-15 | Sun Microsystems, Inc. | Techniques for permitting access across a context barrier in a small footprint device using shared object interfaces |
US6922835B1 (en) | 1999-01-22 | 2005-07-26 | Sun Microsystems, Inc. | Techniques for permitting access across a context barrier on a small footprint device using run time environment privileges |
US6907608B1 (en) | 1999-01-22 | 2005-06-14 | Sun Microsystems, Inc. | Techniques for permitting access across a context barrier in a small footprint device using global data structures |
US6633984B2 (en) | 1999-01-22 | 2003-10-14 | Sun Microsystems, Inc. | Techniques for permitting access across a context barrier on a small footprint device using an entry point object |
US6823520B1 (en) | 1999-01-22 | 2004-11-23 | Sun Microsystems, Inc. | Techniques for implementing security on a small footprint device using a context barrier |
US6402028B1 (en) | 1999-04-06 | 2002-06-11 | Visa International Service Association | Integrated production of smart cards |
US6647260B2 (en) | 1999-04-09 | 2003-11-11 | Openwave Systems Inc. | Method and system facilitating web based provisioning of two-way mobile communications devices |
US6609113B1 (en) | 1999-05-03 | 2003-08-19 | The Chase Manhattan Bank | Method and system for processing internet payments using the electronic funds transfer network |
DE19925389A1 (en) | 1999-06-02 | 2000-12-21 | Beta Res Gmbh | Transferring data onto smart cards involves transmitting encrypted data to card, decrypting in card using different keys, encrypting and decrypting data on basis of specific information in smart card |
US6792536B1 (en) * | 1999-10-20 | 2004-09-14 | Timecertain Llc | Smart card system and methods for proving dates in digital files |
US6963270B1 (en) * | 1999-10-27 | 2005-11-08 | Checkpoint Systems, Inc. | Anticollision protocol with fast read request and additional schemes for reading multiple transponders in an RFID system |
WO2001061659A1 (en) | 2000-02-16 | 2001-08-23 | Mastercard International Incorporated | System and method for conducting electronic commerce with a remote wallet server |
EP1132873A1 (en) | 2000-03-07 | 2001-09-12 | THOMSON multimedia | Electronic wallet system |
EP2278538A1 (en) | 2000-04-24 | 2011-01-26 | Visa International Service Association | Online payer authentication service |
US20010039657A1 (en) | 2000-04-28 | 2001-11-08 | Tvmentor, Inc. | Methods, systems and devices for selectively presenting and sorting data content |
CA2329895A1 (en) | 2000-09-19 | 2002-03-19 | Soft Tracks Enterprises Ltd. | Merchant wallet server |
US7774231B2 (en) | 2000-09-29 | 2010-08-10 | Nokia Corporation | Electronic payment methods for a mobile device |
US8103881B2 (en) | 2000-11-06 | 2012-01-24 | Innovation Connection Corporation | System, method and apparatus for electronic ticketing |
JP4581246B2 (en) | 2000-12-26 | 2010-11-17 | ソニー株式会社 | Information processing system, information processing method, and program recording medium |
JP2002215410A (en) * | 2001-01-16 | 2002-08-02 | Nippon Telegr & Teleph Corp <Ntt> | User device, and methods of storing and eliminating user device ap |
US20030074579A1 (en) | 2001-10-16 | 2003-04-17 | Microsoft Corporation | Virtual distributed security system |
US7243853B1 (en) | 2001-12-04 | 2007-07-17 | Visa U.S.A. Inc. | Method and system for facilitating memory and application management on a secured token |
JP3880384B2 (en) | 2001-12-06 | 2007-02-14 | 松下電器産業株式会社 | IC card |
US7159180B2 (en) | 2001-12-14 | 2007-01-02 | America Online, Inc. | Proxy platform integration system |
WO2003058391A2 (en) | 2001-12-26 | 2003-07-17 | Vivotech, Inc. | Wireless network micropayment financial transaction processing |
US20040139021A1 (en) * | 2002-10-07 | 2004-07-15 | Visa International Service Association | Method and system for facilitating data access and management on a secure token |
KR100578148B1 (en) | 2002-12-07 | 2006-05-10 | 주식회사 헬스피아 | mobile phone with integrated IC card settlement feature |
US6986458B2 (en) | 2002-12-11 | 2006-01-17 | Scheidt & Bachmann Gmbh | Methods and systems for user media interoperability |
US20040123152A1 (en) | 2002-12-18 | 2004-06-24 | Eric Le Saint | Uniform framework for security tokens |
US20040128259A1 (en) | 2002-12-31 | 2004-07-01 | Blakeley Douglas Burnette | Method for ensuring privacy in electronic transactions with session key blocks |
US7392378B1 (en) | 2003-03-19 | 2008-06-24 | Verizon Corporate Services Group Inc. | Method and apparatus for routing data traffic in a cryptographically-protected network |
KR100519770B1 (en) | 2003-07-08 | 2005-10-07 | 삼성전자주식회사 | Method and apparatus for distributed certificate management for Ad-hoc networks |
US7152782B2 (en) | 2003-07-11 | 2006-12-26 | Visa International Service Association | System and method for managing electronic data transfer applications |
US9100814B2 (en) | 2003-09-17 | 2015-08-04 | Unwired Plant, Llc | Federated download of digital content to wireless devices |
US7478390B2 (en) | 2003-09-25 | 2009-01-13 | International Business Machines Corporation | Task queue management of virtual devices using a plurality of processors |
US7543331B2 (en) | 2003-12-22 | 2009-06-02 | Sun Microsystems, Inc. | Framework for providing a configurable firewall for computing systems |
EP1560172A1 (en) | 2004-02-02 | 2005-08-03 | Matsushita Electric Industrial Co., Ltd. | Secure device and mobile terminal which carry out data exchange between card applications |
US7140549B2 (en) | 2004-02-24 | 2006-11-28 | Sun Microsystems, Inc. | Method and apparatus for selecting a desired application on a smart card |
US7374099B2 (en) | 2004-02-24 | 2008-05-20 | Sun Microsystems, Inc. | Method and apparatus for processing an application identifier from a smart card |
US7165727B2 (en) | 2004-02-24 | 2007-01-23 | Sun Microsystems, Inc. | Method and apparatus for installing an application onto a smart card |
US7191288B2 (en) | 2004-02-24 | 2007-03-13 | Sun Microsystems, Inc. | Method and apparatus for providing an application on a smart card |
US20050222961A1 (en) | 2004-04-05 | 2005-10-06 | Philippe Staib | System and method of facilitating contactless payment transactions across different payment systems using a common mobile device acting as a stored value device |
EP1733305A1 (en) | 2004-04-08 | 2006-12-20 | Matsushita Electric Industries Co., Ltd. | Semiconductor memory |
US7275685B2 (en) | 2004-04-12 | 2007-10-02 | Rearden Capital Corporation | Method for electronic payment |
CN100481013C (en) | 2004-08-03 | 2009-04-22 | 索芙特瑞斯提股份有限公司 | System and method for controlling inter-application association through contextual policy control |
US20060041507A1 (en) | 2004-08-13 | 2006-02-23 | Sbc Knowledge Ventures L.P. | Pluggable authentication for transaction tool management services |
US7860486B2 (en) | 2004-10-22 | 2010-12-28 | Broadcom Corporation | Key revocation in a mobile device |
US20060126831A1 (en) | 2004-12-14 | 2006-06-15 | Cerruti Julian A | Systems, methods, and media for adding an additional level of indirection to title key encryption |
US7232073B1 (en) | 2004-12-21 | 2007-06-19 | Sun Microsystems, Inc. | Smart card with multiple applications |
US7502946B2 (en) | 2005-01-20 | 2009-03-10 | Panasonic Corporation | Using hardware to secure areas of long term storage in CE devices |
US8700729B2 (en) | 2005-01-21 | 2014-04-15 | Robin Dua | Method and apparatus for managing credentials through a wireless network |
US20070067325A1 (en) | 2005-02-14 | 2007-03-22 | Xsapio, Ltd. | Methods and apparatus to load and run software programs in data collection devices |
EP1851695A1 (en) | 2005-02-14 | 2007-11-07 | SmartTrust AB | Method for performing an electronic transaction |
US20060219774A1 (en) | 2005-03-30 | 2006-10-05 | Benco David S | Network support for credit card receipt reconciliation |
US7631346B2 (en) | 2005-04-01 | 2009-12-08 | International Business Machines Corporation | Method and system for a runtime user account creation operation within a single-sign-on process in a federated computing environment |
US7739731B2 (en) | 2006-01-09 | 2010-06-15 | Oracle America, Inc. | Method and apparatus for protection domain based security |
US8032872B2 (en) | 2006-01-09 | 2011-10-04 | Oracle America, Inc. | Supporting applets on a high end platform |
US7444670B2 (en) | 2006-03-21 | 2008-10-28 | International Business Machines Corporation | Method and apparatus for migrating a virtual TPM instance and preserving uniqueness and completeness of the instance |
US7936878B2 (en) | 2006-04-10 | 2011-05-03 | Honeywell International Inc. | Secure wireless instrumentation network system |
US7469151B2 (en) | 2006-09-01 | 2008-12-23 | Vivotech, Inc. | Methods, systems and computer program products for over the air (OTA) provisioning of soft cards on devices with wireless communications capabilities |
WO2008030549A2 (en) | 2006-09-06 | 2008-03-13 | Sslnext Inc. | Method and system for providing authentication service for internet users |
US8118218B2 (en) | 2006-09-24 | 2012-02-21 | Rich House Global Technology Ltd. | Method and apparatus for providing electronic purse |
US20120129452A1 (en) | 2006-09-24 | 2012-05-24 | Rfcyber Corp. | Method and apparatus for provisioning applications in mobile devices |
US7527208B2 (en) | 2006-12-04 | 2009-05-05 | Visa U.S.A. Inc. | Bank issued contactless payment card used in transit fare collection |
US20080208681A1 (en) | 2006-09-28 | 2008-08-28 | Ayman Hammad | Payment using a mobile device |
GB2444798B (en) | 2006-12-15 | 2010-06-30 | Innovision Res & Tech Plc | Communications devices comprising near field RF communicators |
US7631810B2 (en) | 2006-12-19 | 2009-12-15 | Vivotech, Inc. | Systems, methods, and computer program products for supporting multiple applications and multiple instances of the same application on a wireless smart device |
US8014755B2 (en) | 2007-01-05 | 2011-09-06 | Macronix International Co., Ltd. | System and method of managing contactless payment transactions using a mobile communication device as a stored value device |
DE102007003580A1 (en) | 2007-01-24 | 2008-07-31 | Giesecke & Devrient Gmbh | Install a patch in a smart card module |
EP2111597B1 (en) | 2007-01-31 | 2017-07-19 | Nokia Technologies Oy | Managing applications related to secure modules |
US20080208762A1 (en) | 2007-02-22 | 2008-08-28 | First Data Corporation | Payments using a mobile commerce device |
EP2176808A2 (en) * | 2007-08-01 | 2010-04-21 | Nxp B.V. | Mobile communication device and method for disabling applications |
EP2043060A1 (en) | 2007-09-27 | 2009-04-01 | Nxp B.V. | Trusted service manager managing reports of lost or stolen mobile communication devices |
EP2043016A1 (en) | 2007-09-27 | 2009-04-01 | Nxp B.V. | Method, system, trusted service manager, service provider and memory element for managing access rights for trusted applications |
GB2457221A (en) | 2007-10-17 | 2009-08-12 | Vodafone Plc | Smart Card Web Server (SCWS) administration within a plurality of security domains |
WO2009060393A2 (en) | 2007-11-06 | 2009-05-14 | Gemalto Sa | Sharing or reselling nfc applications among mobile communication devices |
US8126806B1 (en) | 2007-12-03 | 2012-02-28 | Sprint Communications Company L.P. | Method for launching an electronic wallet |
KR20090064698A (en) | 2007-12-17 | 2009-06-22 | 한국전자통신연구원 | Drm method and drm system using trusted platform module |
SK50042008A3 (en) | 2008-01-04 | 2009-09-07 | Logomotion, S. R. O. | Method and system for authentication preferably at payments, identifier of identity and/or agreement |
EP2081125A1 (en) | 2008-01-16 | 2009-07-22 | Nxp B.V. | Method for installing and managing NFC applications with pictures |
WO2009109877A1 (en) * | 2008-03-04 | 2009-09-11 | Nxp B.V. | Mobile communication device and method for implementing mifare memory multiple sectors mechanisms |
US8495213B2 (en) | 2008-04-10 | 2013-07-23 | Lg Electronics Inc. | Terminal and method for managing secure devices |
US7967215B2 (en) | 2008-04-18 | 2011-06-28 | Vivotech Inc. | Systems, methods, and computer program products for supporting multiple contactless applications using different security keys |
CN102037499B (en) | 2008-05-19 | 2013-06-12 | Nxp股份有限公司 | NFC mobile communication device and NFC reader |
WO2009147548A2 (en) * | 2008-05-27 | 2009-12-10 | Nxp B.V. | Method for storing nfc applications in a secure memory device |
US20090307140A1 (en) | 2008-06-06 | 2009-12-10 | Upendra Mardikar | Mobile device over-the-air (ota) registration and point-of-sale (pos) payment |
WO2009156880A1 (en) | 2008-06-24 | 2009-12-30 | Nxp B.V. | Method of accessing applications in a secure mobile environment |
US9454865B2 (en) | 2008-08-06 | 2016-09-27 | Intel Corporation | Methods and systems to securely load / reload acontactless payment device |
US9317708B2 (en) | 2008-08-14 | 2016-04-19 | Teleputers, Llc | Hardware trust anchors in SP-enabled processors |
FR2935510B1 (en) | 2008-08-28 | 2010-12-10 | Oberthur Technologies | METHOD OF EXCHANGING DATA BETWEEN TWO ELECTRONIC ENTITIES |
US20100063893A1 (en) | 2008-09-11 | 2010-03-11 | Palm, Inc. | Method of and system for secure on-line purchases |
US10706402B2 (en) | 2008-09-22 | 2020-07-07 | Visa International Service Association | Over the air update of payment transaction data stored in secure memory |
US8965811B2 (en) | 2008-10-04 | 2015-02-24 | Mastercard International Incorporated | Methods and systems for using physical payment cards in secure E-commerce transactions |
US20100114731A1 (en) | 2008-10-30 | 2010-05-06 | Kingston Tamara S | ELECTRONIC WALLET ("eWallet") |
US8615466B2 (en) | 2008-11-24 | 2013-12-24 | Mfoundry | Method and system for downloading information into a secure element of an electronic device |
US8120460B1 (en) | 2009-01-05 | 2012-02-21 | Sprint Communications Company L.P. | Electronic key provisioning |
EP2852070B1 (en) | 2009-01-26 | 2019-01-23 | Google Technology Holdings LLC | Wireless communication device for providing at least one near field communication service |
CN102341782B (en) | 2009-03-10 | 2015-03-11 | Nxp股份有限公司 | Method for transmitting an nfc application and computer device |
US8725122B2 (en) | 2009-05-13 | 2014-05-13 | First Data Corporation | Systems and methods for providing trusted service management services |
US9734496B2 (en) | 2009-05-29 | 2017-08-15 | Paypal, Inc. | Trusted remote attestation agent (TRAA) |
US20100306531A1 (en) | 2009-05-29 | 2010-12-02 | Ebay Inc. | Hardware-Based Zero-Knowledge Strong Authentication (H0KSA) |
US20100306076A1 (en) | 2009-05-29 | 2010-12-02 | Ebay Inc. | Trusted Integrity Manager (TIM) |
US10454693B2 (en) | 2009-09-30 | 2019-10-22 | Visa International Service Association | Mobile payment application architecture |
US8447699B2 (en) | 2009-10-13 | 2013-05-21 | Qualcomm Incorporated | Global secure service provider directory |
US20110131421A1 (en) | 2009-12-02 | 2011-06-02 | Fabrice Jogand-Coulomb | Method for installing an application on a sim card |
US8807440B1 (en) | 2010-12-17 | 2014-08-19 | Google Inc. | Routing secure element payment requests to an alternate application |
US8621168B2 (en) | 2010-12-17 | 2013-12-31 | Google Inc. | Partitioning the namespace of a contactless smart card |
US8352749B2 (en) | 2010-12-17 | 2013-01-08 | Google Inc. | Local trusted services manager for a contactless smart card |
US8171137B1 (en) | 2011-05-09 | 2012-05-01 | Google Inc. | Transferring application state across devices |
US8171525B1 (en) | 2011-09-15 | 2012-05-01 | Google Inc. | Enabling users to select between secure service providers using a central trusted service manager |
US8255687B1 (en) | 2011-09-15 | 2012-08-28 | Google Inc. | Enabling users to select between secure service providers using a key escrow service |
US8313036B1 (en) * | 2011-09-16 | 2012-11-20 | Google Inc. | Secure application directory |
US8385553B1 (en) | 2012-02-28 | 2013-02-26 | Google Inc. | Portable secure element |
-
2011
- 2011-09-16 US US13/234,849 patent/US8313036B1/en active Active
- 2011-09-27 US US13/246,466 patent/US8297520B1/en active Active
-
2012
- 2012-09-13 KR KR1020137012599A patent/KR101429736B1/en active IP Right Grant
- 2012-09-13 AU AU2013201170A patent/AU2013201170B2/en active Active
- 2012-09-13 EP EP12826614.5A patent/EP2612273B1/en active Active
- 2012-09-13 EP EP17152190.9A patent/EP3179430B1/en active Active
- 2012-09-13 CA CA2814007A patent/CA2814007C/en active Active
- 2012-09-13 JP JP2013534078A patent/JP5462420B2/en active Active
- 2012-09-13 WO PCT/US2012/055091 patent/WO2013040165A1/en active Application Filing
- 2012-09-14 US US13/618,166 patent/US8511573B2/en active Active
-
2013
- 2013-08-19 US US13/970,548 patent/US8814055B2/en active Active
Patent Citations (4)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US7308433B1 (en) * | 1998-01-23 | 2007-12-11 | Fujitsu Limited | Application managing method and information processing apparatus using the method |
US20030174839A1 (en) * | 2001-06-27 | 2003-09-18 | Akihiko Yamagata | Integrated circuit device, information processing device, information recording device memory management method, mobile terminal device, semiconductor integrated circuit device, and communication method using mobile terminal device |
US20060206704A1 (en) * | 2003-08-26 | 2006-09-14 | Rf-It Solutions Gmbh | Data transmission system and method for operating a data transmission system |
US20100291896A1 (en) * | 2007-07-24 | 2010-11-18 | Nxp B.V. | Method, system and trusted service manager for securely transmitting an application to a mobile phone |
Cited By (1)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
CN108427982A (en) * | 2018-03-16 | 2018-08-21 | 中国联合网络通信集团有限公司 | A kind of data read-write method and device |
Also Published As
Publication number | Publication date |
---|---|
EP2612273A1 (en) | 2013-07-10 |
US8814055B2 (en) | 2014-08-26 |
US20130334318A1 (en) | 2013-12-19 |
US20130073818A1 (en) | 2013-03-21 |
AU2013201170B2 (en) | 2014-01-16 |
US8511573B2 (en) | 2013-08-20 |
CA2814007A1 (en) | 2013-03-21 |
AU2013201170A1 (en) | 2013-04-04 |
KR101429736B1 (en) | 2014-08-12 |
CA2814007C (en) | 2016-08-09 |
US8313036B1 (en) | 2012-11-20 |
EP2612273A4 (en) | 2013-08-28 |
WO2013040165A1 (en) | 2013-03-21 |
KR20130091347A (en) | 2013-08-16 |
JP2013539895A (en) | 2013-10-28 |
US8297520B1 (en) | 2012-10-30 |
JP5462420B2 (en) | 2014-04-02 |
EP2612273B1 (en) | 2017-03-08 |
EP3179430B1 (en) | 2019-11-06 |
Similar Documents
Publication | Publication Date | Title |
---|---|---|
EP3179430B1 (en) | Secure application directory | |
US8391837B2 (en) | Method, system and trusted service manager for securely transmitting an application to a mobile phone | |
US8352749B2 (en) | Local trusted services manager for a contactless smart card | |
US8621168B2 (en) | Partitioning the namespace of a contactless smart card | |
KR101760502B1 (en) | Payment system and method using dynamic track 2 | |
AU2015201772B2 (en) | Secure application directory | |
AU2014202122B2 (en) | Secure application directory | |
AU2013222020B2 (en) | Local trusted services manager for a contactless smart card |
Legal Events
Date | Code | Title | Description |
---|---|---|---|
PUAI | Public reference made under article 153(3) epc to a published international application that has entered the european phase |
Free format text: ORIGINAL CODE: 0009012 |
|
STAA | Information on the status of an ep patent application or granted ep patent |
Free format text: STATUS: REQUEST FOR EXAMINATION WAS MADE |
|
17P | Request for examination filed |
Effective date: 20170119 |
|
AC | Divisional application: reference to earlier application |
Ref document number: 2612273Country of ref document: EPKind code of ref document: P |
|
AK | Designated contracting states |
Kind code of ref document: A1Designated state(s): AL AT BE BG CH CY CZ DE DK EE ES FI FR GB GR HR HU IE IS IT LI LT LU LV MC MK MT NL NO PL PT RO RS SE SI SK SM TR |
|
RAP1 | Party data changed (applicant data changed or rights of an application transferred) |
Owner name: GOOGLE LLC |
|
STAA | Information on the status of an ep patent application or granted ep patent |
Free format text: STATUS: EXAMINATION IS IN PROGRESS |
|
17Q | First examination report despatched |
Effective date: 20180103 |
|
GRAP | Despatch of communication of intention to grant a patent |
Free format text: ORIGINAL CODE: EPIDOSNIGR1 |
|
STAA | Information on the status of an ep patent application or granted ep patent |
Free format text: STATUS: GRANT OF PATENT IS INTENDED |
|
INTG | Intention to grant announced |
Effective date: 20190513 |
|
RIN1 | Information on inventor provided before grant (corrected) |
Inventor name: WALL, JONATHANInventor name: WAKERLY, MICHAEL, JOHN |
|
GRAS | Grant fee paid |
Free format text: ORIGINAL CODE: EPIDOSNIGR3 |
|
GRAA | (expected) grant |
Free format text: ORIGINAL CODE: 0009210 |
|
STAA | Information on the status of an ep patent application or granted ep patent |
Free format text: STATUS: THE PATENT HAS BEEN GRANTED |
|
AC | Divisional application: reference to earlier application |
Ref document number: 2612273Country of ref document: EPKind code of ref document: P |
|
AK | Designated contracting states |
Kind code of ref document: B1Designated state(s): AL AT BE BG CH CY CZ DE DK EE ES FI FR GB GR HR HU IE IS IT LI LT LU LV MC MK MT NL NO PL PT RO RS SE SI SK SM TR |
|
REG | Reference to a national code |
Ref country code: GBRef legal event code: FG4D |
|
REG | Reference to a national code |
Ref country code: CHRef legal event code: EPRef country code: ATRef legal event code: REFRef document number: 1199796Country of ref document: ATKind code of ref document: TEffective date: 20191115 |
|
REG | Reference to a national code |
Ref country code: IERef legal event code: FG4D |
|
REG | Reference to a national code |
Ref country code: DERef legal event code: R096Ref document number: 602012065567Country of ref document: DE |
|
REG | Reference to a national code |
Ref country code: NLRef legal event code: FP |
|
REG | Reference to a national code |
Ref country code: LTRef legal event code: MG4D |
|
PG25 | Lapsed in a contracting state [announced via postgrant information from national office to epo] |
Ref country code: LTFree format text: LAPSE BECAUSE OF FAILURE TO SUBMIT A TRANSLATION OF THE DESCRIPTION OR TO PAY THE FEE WITHIN THE PRESCRIBED TIME-LIMITEffective date: 20191106Ref country code: PLFree format text: LAPSE BECAUSE OF FAILURE TO SUBMIT A TRANSLATION OF THE DESCRIPTION OR TO PAY THE FEE WITHIN THE PRESCRIBED TIME-LIMITEffective date: 20191106Ref country code: NOFree format text: LAPSE BECAUSE OF FAILURE TO SUBMIT A TRANSLATION OF THE DESCRIPTION OR TO PAY THE FEE WITHIN THE PRESCRIBED TIME-LIMITEffective date: 20200206Ref country code: LVFree format text: LAPSE BECAUSE OF FAILURE TO SUBMIT A TRANSLATION OF THE DESCRIPTION OR TO PAY THE FEE WITHIN THE PRESCRIBED TIME-LIMITEffective date: 20191106Ref country code: SEFree format text: LAPSE BECAUSE OF FAILURE TO SUBMIT A TRANSLATION OF THE DESCRIPTION OR TO PAY THE FEE WITHIN THE PRESCRIBED TIME-LIMITEffective date: 20191106Ref country code: FIFree format text: LAPSE BECAUSE OF FAILURE TO SUBMIT A TRANSLATION OF THE DESCRIPTION OR TO PAY THE FEE WITHIN THE PRESCRIBED TIME-LIMITEffective date: 20191106Ref country code: BGFree format text: LAPSE BECAUSE OF FAILURE TO SUBMIT A TRANSLATION OF THE DESCRIPTION OR TO PAY THE FEE WITHIN THE PRESCRIBED TIME-LIMITEffective date: 20200206Ref country code: PTFree format text: LAPSE BECAUSE OF FAILURE TO SUBMIT A TRANSLATION OF THE DESCRIPTION OR TO PAY THE FEE WITHIN THE PRESCRIBED TIME-LIMITEffective date: 20200306Ref country code: GRFree format text: LAPSE BECAUSE OF FAILURE TO SUBMIT A TRANSLATION OF THE DESCRIPTION OR TO PAY THE FEE WITHIN THE PRESCRIBED TIME-LIMITEffective date: 20200207 |
|
PG25 | Lapsed in a contracting state [announced via postgrant information from national office to epo] |
Ref country code: ISFree format text: LAPSE BECAUSE OF FAILURE TO SUBMIT A TRANSLATION OF THE DESCRIPTION OR TO PAY THE FEE WITHIN THE PRESCRIBED TIME-LIMITEffective date: 20200306Ref country code: HRFree format text: LAPSE BECAUSE OF FAILURE TO SUBMIT A TRANSLATION OF THE DESCRIPTION OR TO PAY THE FEE WITHIN THE PRESCRIBED TIME-LIMITEffective date: 20191106Ref country code: RSFree format text: LAPSE BECAUSE OF FAILURE TO SUBMIT A TRANSLATION OF THE DESCRIPTION OR TO PAY THE FEE WITHIN THE PRESCRIBED TIME-LIMITEffective date: 20191106 |
|
PG25 | Lapsed in a contracting state [announced via postgrant information from national office to epo] |
Ref country code: ALFree format text: LAPSE BECAUSE OF FAILURE TO SUBMIT A TRANSLATION OF THE DESCRIPTION OR TO PAY THE FEE WITHIN THE PRESCRIBED TIME-LIMITEffective date: 20191106 |
|
PG25 | Lapsed in a contracting state [announced via postgrant information from national office to epo] |
Ref country code: ROFree format text: LAPSE BECAUSE OF FAILURE TO SUBMIT A TRANSLATION OF THE DESCRIPTION OR TO PAY THE FEE WITHIN THE PRESCRIBED TIME-LIMITEffective date: 20191106Ref country code: ESFree format text: LAPSE BECAUSE OF FAILURE TO SUBMIT A TRANSLATION OF THE DESCRIPTION OR TO PAY THE FEE WITHIN THE PRESCRIBED TIME-LIMITEffective date: 20191106Ref country code: CZFree format text: LAPSE BECAUSE OF FAILURE TO SUBMIT A TRANSLATION OF THE DESCRIPTION OR TO PAY THE FEE WITHIN THE PRESCRIBED TIME-LIMITEffective date: 20191106Ref country code: EEFree format text: LAPSE BECAUSE OF FAILURE TO SUBMIT A TRANSLATION OF THE DESCRIPTION OR TO PAY THE FEE WITHIN THE PRESCRIBED TIME-LIMITEffective date: 20191106Ref country code: DKFree format text: LAPSE BECAUSE OF FAILURE TO SUBMIT A TRANSLATION OF THE DESCRIPTION OR TO PAY THE FEE WITHIN THE PRESCRIBED TIME-LIMITEffective date: 20191106 |
|
REG | Reference to a national code |
Ref country code: DERef legal event code: R097Ref document number: 602012065567Country of ref document: DE |
|
REG | Reference to a national code |
Ref country code: ATRef legal event code: MK05Ref document number: 1199796Country of ref document: ATKind code of ref document: TEffective date: 20191106 |
|
PG25 | Lapsed in a contracting state [announced via postgrant information from national office to epo] |
Ref country code: SMFree format text: LAPSE BECAUSE OF FAILURE TO SUBMIT A TRANSLATION OF THE DESCRIPTION OR TO PAY THE FEE WITHIN THE PRESCRIBED TIME-LIMITEffective date: 20191106Ref country code: SKFree format text: LAPSE BECAUSE OF FAILURE TO SUBMIT A TRANSLATION OF THE DESCRIPTION OR TO PAY THE FEE WITHIN THE PRESCRIBED TIME-LIMITEffective date: 20191106 |
|
PLBE | No opposition filed within time limit |
Free format text: ORIGINAL CODE: 0009261 |
|
STAA | Information on the status of an ep patent application or granted ep patent |
Free format text: STATUS: NO OPPOSITION FILED WITHIN TIME LIMIT |
|
26N | No opposition filed |
Effective date: 20200807 |
|
PG25 | Lapsed in a contracting state [announced via postgrant information from national office to epo] |
Ref country code: ATFree format text: LAPSE BECAUSE OF FAILURE TO SUBMIT A TRANSLATION OF THE DESCRIPTION OR TO PAY THE FEE WITHIN THE PRESCRIBED TIME-LIMITEffective date: 20191106Ref country code: SIFree format text: LAPSE BECAUSE OF FAILURE TO SUBMIT A TRANSLATION OF THE DESCRIPTION OR TO PAY THE FEE WITHIN THE PRESCRIBED TIME-LIMITEffective date: 20191106 |
|
PG25 | Lapsed in a contracting state [announced via postgrant information from national office to epo] |
Ref country code: ITFree format text: LAPSE BECAUSE OF FAILURE TO SUBMIT A TRANSLATION OF THE DESCRIPTION OR TO PAY THE FEE WITHIN THE PRESCRIBED TIME-LIMITEffective date: 20191106 |
|
PG25 | Lapsed in a contracting state [announced via postgrant information from national office to epo] |
Ref country code: MCFree format text: LAPSE BECAUSE OF FAILURE TO SUBMIT A TRANSLATION OF THE DESCRIPTION OR TO PAY THE FEE WITHIN THE PRESCRIBED TIME-LIMITEffective date: 20191106 |
|
REG | Reference to a national code |
Ref country code: CHRef legal event code: PL |
|
REG | Reference to a national code |
Ref country code: BERef legal event code: MMEffective date: 20200930 |
|
PG25 | Lapsed in a contracting state [announced via postgrant information from national office to epo] |
Ref country code: LUFree format text: LAPSE BECAUSE OF NON-PAYMENT OF DUE FEESEffective date: 20200913 |
|
PG25 | Lapsed in a contracting state [announced via postgrant information from national office to epo] |
Ref country code: IEFree format text: LAPSE BECAUSE OF NON-PAYMENT OF DUE FEESEffective date: 20200913Ref country code: LIFree format text: LAPSE BECAUSE OF NON-PAYMENT OF DUE FEESEffective date: 20200930Ref country code: CHFree format text: LAPSE BECAUSE OF NON-PAYMENT OF DUE FEESEffective date: 20200930Ref country code: BEFree format text: LAPSE BECAUSE OF NON-PAYMENT OF DUE FEESEffective date: 20200930 |
|
PG25 | Lapsed in a contracting state [announced via postgrant information from national office to epo] |
Ref country code: TRFree format text: LAPSE BECAUSE OF FAILURE TO SUBMIT A TRANSLATION OF THE DESCRIPTION OR TO PAY THE FEE WITHIN THE PRESCRIBED TIME-LIMITEffective date: 20191106Ref country code: MTFree format text: LAPSE BECAUSE OF FAILURE TO SUBMIT A TRANSLATION OF THE DESCRIPTION OR TO PAY THE FEE WITHIN THE PRESCRIBED TIME-LIMITEffective date: 20191106Ref country code: CYFree format text: LAPSE BECAUSE OF FAILURE TO SUBMIT A TRANSLATION OF THE DESCRIPTION OR TO PAY THE FEE WITHIN THE PRESCRIBED TIME-LIMITEffective date: 20191106 |
|
PG25 | Lapsed in a contracting state [announced via postgrant information from national office to epo] |
Ref country code: MKFree format text: LAPSE BECAUSE OF FAILURE TO SUBMIT A TRANSLATION OF THE DESCRIPTION OR TO PAY THE FEE WITHIN THE PRESCRIBED TIME-LIMITEffective date: 20191106 |
|
P01 | Opt-out of the competence of the unified patent court (upc) registered |
Effective date: 20230505 |
|
PGFP | Annual fee paid to national office [announced via postgrant information from national office to epo] |
Ref country code: NLPayment date: 20230926Year of fee payment: 12Ref country code: GBPayment date: 20230927Year of fee payment: 12 |
|
PGFP | Annual fee paid to national office [announced via postgrant information from national office to epo] |
Ref country code: FRPayment date: 20230925Year of fee payment: 12Ref country code: DEPayment date: 20230927Year of fee payment: 12 |