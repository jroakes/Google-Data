US20240020321A1 - Category recommendation with implicit item feedback - Google Patents
Category recommendation with implicit item feedback Download PDFInfo
- Publication number
- US20240020321A1 US20240020321A1 US18/062,635 US202218062635A US2024020321A1 US 20240020321 A1 US20240020321 A1 US 20240020321A1 US 202218062635 A US202218062635 A US 202218062635A US 2024020321 A1 US2024020321 A1 US 2024020321A1
- Authority
- US
- United States
- Prior art keywords
- category
- embedding
- user
- embeddings
- categories
- Prior art date
- Legal status (The legal status is an assumption and is not a legal conclusion. Google has not performed a legal analysis and makes no representation as to the accuracy of the status listed.)
- Pending
Links
- 238000000034 method Methods 0.000 claims abstract description 54
- 230000003993 interaction Effects 0.000 claims abstract description 20
- 230000015654 memory Effects 0.000 claims description 76
- 238000011524 similarity measure Methods 0.000 claims description 27
- 238000012545 processing Methods 0.000 claims description 18
- 230000004931 aggregating effect Effects 0.000 claims description 15
- 238000004590 computer program Methods 0.000 claims description 12
- 238000013507 mapping Methods 0.000 claims description 8
- 230000002776 aggregation Effects 0.000 abstract description 3
- 238000004220 aggregation Methods 0.000 abstract description 3
- 239000013598 vector Substances 0.000 description 92
- 238000004891 communication Methods 0.000 description 20
- 239000000047 product Substances 0.000 description 14
- 235000015220 hamburgers Nutrition 0.000 description 12
- 238000010586 diagram Methods 0.000 description 11
- 238000010801 machine learning Methods 0.000 description 10
- 230000006870 function Effects 0.000 description 7
- 230000003287 optical effect Effects 0.000 description 7
- 230000008569 process Effects 0.000 description 7
- 235000013305 food Nutrition 0.000 description 6
- 230000004044 response Effects 0.000 description 5
- 230000009977 dual effect Effects 0.000 description 4
- 241000287828 Gallus gallus Species 0.000 description 3
- 235000015278 beef Nutrition 0.000 description 3
- 230000001413 cellular effect Effects 0.000 description 3
- 230000006835 compression Effects 0.000 description 3
- 238000007906 compression Methods 0.000 description 3
- 238000012986 modification Methods 0.000 description 3
- 230000004048 modification Effects 0.000 description 3
- 239000007787 solid Substances 0.000 description 3
- 230000008901 benefit Effects 0.000 description 2
- 239000004973 liquid crystal related substance Substances 0.000 description 2
- 230000006855 networking Effects 0.000 description 2
- 102000004169 proteins and genes Human genes 0.000 description 2
- 108090000623 proteins and genes Proteins 0.000 description 2
- 238000013515 script Methods 0.000 description 2
- 241000238631 Hexapoda Species 0.000 description 1
- 230000000712 assembly Effects 0.000 description 1
- 238000000429 assembly Methods 0.000 description 1
- 235000013527 bean curd Nutrition 0.000 description 1
- 238000004422 calculation algorithm Methods 0.000 description 1
- 230000009193 crawling Effects 0.000 description 1
- 238000005516 engineering process Methods 0.000 description 1
- 238000010295 mobile communication Methods 0.000 description 1
- 238000009877 rendering Methods 0.000 description 1
- 238000012552 review Methods 0.000 description 1
- 235000013580 sausages Nutrition 0.000 description 1
- 230000001953 sensory effect Effects 0.000 description 1
- 230000003068 static effect Effects 0.000 description 1
- 238000006467 substitution reaction Methods 0.000 description 1
- 239000013589 supplement Substances 0.000 description 1
- 230000000007 visual effect Effects 0.000 description 1
Images
Classifications
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F16/00—Information retrieval; Database structures therefor; File system structures therefor
- G06F16/90—Details of database functions independent of the retrieved data types
- G06F16/95—Retrieval from the web
- G06F16/953—Querying, e.g. by the use of web search engines
- G06F16/9536—Search customisation based on social or collaborative filtering
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F16/00—Information retrieval; Database structures therefor; File system structures therefor
- G06F16/20—Information retrieval; Database structures therefor; File system structures therefor of structured data, e.g. relational data
- G06F16/28—Databases characterised by their database models, e.g. relational or object models
- G06F16/284—Relational databases
- G06F16/285—Clustering or classification
- G06F16/287—Visualization; Browsing
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F16/00—Information retrieval; Database structures therefor; File system structures therefor
- G06F16/20—Information retrieval; Database structures therefor; File system structures therefor of structured data, e.g. relational data
- G06F16/24—Querying
- G06F16/245—Query processing
- G06F16/2457—Query processing with adaptation to user needs
- G06F16/24578—Query processing with adaptation to user needs using ranking
Definitions
- Some recommender systems provide recommendations to users based on the input received from the users. Some input is explicit (e.g., ratings, selections of specific preferences), while other input is implicit (e.g., clicks, views, swipes, skips, etc.). For example, some video service providers recommend videos to users based on explicit feedback such as star ratings. Such video services may also provide recommendations based on implicit feedback such as viewing time.
- explicit e.g., ratings, selections of specific preferences
- implicit e.g., clicks, views, swipes, skips, etc.
- video service providers recommend videos to users based on explicit feedback such as star ratings. Such video services may also provide recommendations based on implicit feedback such as viewing time.
- Implementations described herein are related to providing users recommended categories based on implicit data (e.g., user-item interactions) and/or explicit data (e.g., queries, user information). For example, a user whose search history includes recipes for hamburgers, chicken wings, and baby-back ribs might receive recommendations of categories such as American recipes, pub food recipes, BBQ recipes, and so on based on prior user interaction data and/or queries associating recipes for hamburgers, chicken wings, and baby-back ribs with the terms “American,” “pub food,” “BBQ,” and so on.
- implicit data e.g., user-item interactions
- explicit data e.g., queries, user information
- a user whose search history includes recipes for hamburgers, chicken wings, and baby-back ribs might receive recommendations of categories such as American recipes, pub food recipes, BBQ recipes, and so on based on prior user interaction data and/or queries associating recipes for hamburgers, chicken wings, and baby-back ribs with the terms “American,” “pub food,” “BBQ
- the recommendations can be personalized or non-personalized (i.e., depending on whether user embeddings are used), queried or non-queried (i.e., depending on whether query embeddings are used), or personalized and queried (i.e., when both user and query embeddings are used).
- there is an offline mode and a serving mode In the offline mode, a category embedding is generated from an aggregation of item embeddings associated with a candidate category.
- the serving mode the candidate category is selected for display on a user device based on a similarity between the category embedding and either, or both, of the user embedding and the query embedding.
- a computer-based method can include generating a plurality of category embeddings by, for each candidate category of a plurality of candidate categories, selecting a respective subset of item embeddings that correspond to that candidate category; and aggregating the respective subset of item embeddings to produce a category embedding for that candidate category.
- the method can also include selecting a set of categories based on a similarity between category embeddings for categories of the set of categories and at least one of a user embedding representing a user or a query embedding representing a query.
- the method can further include providing, for display on a user device, the set of categories.
- a computer program product comprises a non-transitory storage medium, the computer program product including code that, when executed by processing circuitry of a computing device, causes the processing circuitry to perform a method.
- the method can include generating a plurality of category embeddings by, for each candidate category of a plurality of candidate categories, selecting a respective subset of item embeddings that correspond to that candidate category; and aggregating the respective subset of item embeddings to produce a category embedding for that candidate category.
- the method can also include selecting a set of categories based on a similarity between category embeddings for categories of the set of categories and at least one of a user embedding representing a user or a query embedding representing a query.
- the method can further include providing, for display on a user device, the set of categories.
- an electronic apparatus comprises memory and controlling circuitry coupled to the memory.
- the controlling circuitry can be configured to generate a plurality of category embeddings by, for each candidate category of a plurality of candidate categories by being further configured to select a respective subset of item embeddings that correspond to that candidate category; and aggregate the respective subset of item embeddings to produce a category embedding for that candidate category.
- the controlling circuitry can also be configured to select a set of categories based on a similarity between category embeddings for categories of the set of categories and at least one of a user embedding representing a user or a query embedding representing a query.
- the controlling circuitry can further be configured to provide, for a display on a user device, the set of categories.
- FIG. 1 A is a diagram that illustrates an example search engine in which improved techniques described herein may be implemented.
- FIG. 1 B is a diagram that illustrates an example set of categories displayed to a user, resulting from a search query.
- FIG. 2 is a diagram that illustrates an example electronic environment in which the improved techniques described herein may be implemented.
- FIG. 3 is a flow diagram that illustrates an example offline mode of a category generation system.
- FIG. 4 is a flow diagram that illustrates an example serving mode of a category generation system.
- FIG. 5 is a flow chart that illustrates an example method of generating categories, according to disclosed implementations.
- FIG. 6 is a diagram that illustrates an example of a computer device and a mobile computer device that can be used to implement the described techniques.
- FIG. 7 is a diagram that illustrates an example of a distributed computer device that can be used to implement the described techniques.
- Conventional recommendation systems offer recommended items based on user feedback. This may be done by mapping items and users to a latent space (embedding space) and then computing a similarity measure between users and items in the latent space.
- a search system may return other, hamburger and rib recipes, with maybe some other closely-related recipes depending on the browsing history, e.g., a beef taco recipe, grilled sausage recipe, relish recipe, etc.
- a technical problem with the above-described conventional recommendation systems is that the recommended results are limited in scope. For example, even in the above example in which the recommendation system provided recipes other than the hamburger or rib recipes, the options offered by the recommendation system only cover what the user might probably enjoy given the items on which the user clicked. It is unlikely that the user will be prompted to explore other items the user may enjoy but cannot be determined from the browsing history and/or other implicit and explicit feedback.
- a technical solution to the above-described technical problem includes a category recommendation system that provides users recommended categories based on implicit data (e.g., user-item interactions) and/or explicit data (e.g., queries, user information). For example, a user whose search history includes recipes for hamburgers and ribs might receive recommendations of categories such as American recipes, pub food recipes, BBQ recipes, and so on.
- the recommendations can be personalized or non-personalized (i.e., depending on whether user embeddings are used), queried or non-queried (i.e., depending on whether query embeddings are used), or personalized and queried (i.e., when both user and query embeddings are used).
- a category embedding is generated from an aggregation of item embeddings associated with a candidate category.
- the serving mode the candidate category is selected for display on a user device based on a similarity between the category embedding and either, or both, of the user embedding and the query embedding.
- a technical advantage of disclosed implementations is that, in contrast to the conventional recommendation systems, the above-described category recommendation system expands recommendations to include whole families of items not provided using the conventional recommendation systems. For example, providing whole families of items represented by categories of recipes such as American recipes, pub food recipes, and/or BBQ recipes broadens the scope of recommendation systems to feature new families of items that are likely missed by the conventional recommendation systems that merely provide a few related, individual items.
- categories of recipes such as American recipes, pub food recipes, and/or BBQ recipes
- FIG. 1 A depicts an example environment 100 in which users can interact with one or more computer-implemented search services.
- Example computer-implemented search services can include a search service for an electronic mail service, a chat service, a document sharing service, a calendar sharing service, a photo sharing service, a video sharing service, a shopping service, a blogging service, a micro-blogging service, a social networking service, a location (location-aware) service, a check-in service and/or a ratings and review service.
- an Internet search service is depicted, which is discussed in further detail herein. It is appreciated, however, that implementations of the present disclosure can include one or more computer-implemented services, such as the examples discussed herein.
- a search engine 120 provides search services.
- the example environment 100 includes a network 102 , e.g., a local area network (LAN), wide area network (WAN), the Internet, or a combination thereof, connects web site 104 , user devices 106 , and the search engine 120 .
- the network 102 can be accessed over a wired and/or a wireless communications link.
- mobile computing devices such as smartphones can utilize a cellular network to access the network.
- the environment 100 may include millions of web site 104 and user devices 106 .
- a web site 104 is provided as web site resources 105 associated with a domain name and hosted by one or more servers.
- An example web site is a collection of web pages formatted in an appropriate machine-readable language, e.g., hypertext markup language (HTML), that can contain text, images, multimedia content, and programming elements, e.g., scripts.
- HTML hypertext markup language
- Each web site 104 is maintained by a publisher, e.g., an entity that manages and/or owns the web site.
- Web site resources 105 can be static or dynamic.
- web site resources 105 is data provided over the network 102 and that is associated with a resource address, e.g., a uniform resource locator (URL).
- resources 105 that can be provided by a web site 104 include web pages, word processing documents, and portable document format (PDF) documents, images, video, and feed sources, among other appropriate digital content.
- PDF portable document format
- the resources 105 can include content, e.g., words, phrases, images and sounds and may include embedded information, e.g., meta information and hyperlinks, and/or embedded instructions, e.g., scripts.
- a user device 106 is an electronic device that is under control of a user and is capable of requesting and receiving resources 105 over the network 102 .
- Example user devices 106 include personal computers, mobile computing devices, e.g., smartphones, wearable devices, and/or tablet computing devices that can send and receive data over the network 102 .
- mobile computing device refers to a user device that is configured to communicate over a mobile communications network.
- a smartphone e.g., a phone that is enabled to communicate over the Internet, is an example of a mobile device, as are wearables and other smart devices such as smart speakers.
- a user device 106 typically includes a user application, e.g., a web browser, to facilitate the sending and receiving of data over the network 102 .
- the search engine 120 identifies the resources 105 by crawling and indexing the resources 105 provided on web site 104 .
- Data about the resources 105 can be indexed based on the resource to which the data corresponds.
- the indexed and, optionally, cached copies of the resources 105 are stored in a search index 122 , e.g., as indexed resources 126 .
- a user device 106 can include one or more input modalities.
- Example modalities can include a keyboard, a touchscreen, and/or a microphone.
- a user can use a keyboard and/or touchscreen to type in a search query.
- a user can speak a search query, the user speech being captured through a microphone, and being processed through speech recognition to provide the search query.
- a search engine 120 accesses the search index 122 to identify resources 105 that are relevant to, e.g., have at least a minimum specified relevance score for, the search query 109 .
- the search engine 120 identifies the resources 105 , generates a search result display 111 that includes search result 112 identifying resources 105 , and returns the search result display 111 to the user devices 106 .
- a search results display can include one or more web pages, e.g., one or more search results pages.
- a web page can be provided based on a web document that can be written in any appropriate machine-readable language. It is contemplated, however, that implementations of the present disclosure can include other appropriate display types.
- search results can be provided in a display generated by an application that is executed on a computing device, and/or a display generated by an operating system, e.g., mobile operating system.
- search results can be provided based on any appropriate form, e.g., JavaScript-html, plaintext.
- a search result 112 is data generated by the search engine 120 that identifies a web site resource 105 that is responsive to a particular search query, and includes a link to the web site resource 105 .
- An example search result 112 can include a web page title, a snippet of text or a portion of an image extracted from the web page, and the URL of the web page.
- data provided in the search result 112 can be retrieved from a resource data store.
- the search engine 120 can provide the search result display 111 , which displays the search result 112 .
- the search result display 111 can be populated with information, e.g., a web page title, a snippet of text or a portion of an image extracted from the web page, that is provided from the resource data store.
- the example environment 100 also includes a category recommendation system 130 communicably coupled to the search engine 120 , e.g., directly coupled or coupled over a network such as network 102 .
- the category recommendation system 130 is communicably coupled to respective systems that provide functionality of the respective computer-implemented services.
- the systems e.g., the search engine 120
- the search engine 120 has access to user embeddings 132 , item embeddings 134 , and query embeddings 136 stored on respective storage.
- Each of the user embeddings 132 is a vector of values representing different attributes and/or characteristics of a user and is generated from, e.g., respective user data (e.g., user's location, preferences, etc., obtained with user consent).
- the user embeddings 132 are generated using a supervised learning engine such as a dual encoder in concert with items.
- Each of the item embeddings 134 is a vector of values representing various attributes and/or characteristics of an item and is generated from, e.g., item data/item interaction data (item descriptors and/or identifiers, history of interaction by a user or users).
- the item embeddings 134 are generated using a supervised learning engine such as a dual encoder in concert with users or queries
- Each of the query embeddings 136 is a vector of values representing a query, generated from respective query data (representation of text, image, audio, video, tactile, etc. information provided as a query or in response to a query provided to a search engine).
- the query embeddings 136 are generated using a supervised learning engine such as a dual encoder in concert with items.
- a supervised machine learning algorithm maps the user data, item data, and query data to their respective embeddings such that the respective embeddings are usually of a significantly smaller dimension than the data.
- a latent space is an embedding space in which the embedding vectors are arranged by similarity measure to each other. Mapping the data vectors into a latent space for their embeddings simplifies the selection of users and items that are likely compatible.
- the mapping of query and item/item interaction data generated item embeddings 134 and query embeddings 136 into a common latent space.
- FIG. 1 B is a diagram that illustrates a user interface 150 in which an example set of category results 113 is displayed on the user device 106 . As shown in FIG. 1 B , the user interface 150 is split into two sections 160 and 170 .
- the section 160 displays a search bar in which a user inputs a query composed of text, or in some implementations, an image, audio, a video, or the like.
- a query is the text, “How to make a great burger.”
- a conventional search system may return example search results as shown in FIG. 1 B , entitled “Perfect Burger Recipe” and “Steakhouse Burgers,” with websites, star ratings, and a brief description.
- the conventional search engine may also include some more links to websites in which the user is likely to be interested.
- the section 170 includes a set of categories entitled “Related Searches” as shown in FIG. 1 B .
- This is an output of the search engine 120
- the related searches are categories generated and selected by the category recommendation system 130 .
- the displayed categories include “hamburger recipes,” “ground beef recipes,” “steak recipes” “barbeque recipes,” “high protein recipes,” “American food recipes”, and “pub food recipes.” These categories provide the user with a far more diverse set of items of likely further interest than using the conventional search engine. For example, when the user clicks on “ground beef recipes,” that category may provide a new set of links including taco recipes, sloppy joe recipes, escalloped macaroni recipes, and so on.
- High protein recipes that may provide another new set of links including chicken recipes, tofu recipes, and insect recipes.
- the search engine 120 accordingly provides links to recipes that may have some similarity to the query (or user) but would not likely be presented by a conventional search engine.
- FIG. 2 is a diagram that illustrates an example environment 200 in which the above-described technical solution may be implemented.
- the example environment 200 includes a computer 220 configured to produce categories for display to a user device in response to a query from a user.
- the computer 220 includes a network interface 222 , a set of processing units 224 , memory 226 , and a display interface 228 .
- the network interface 222 includes, for example, Ethernet adaptors, Token Ring adaptors, and the like, for converting electronic and/or optical signals received from the network to electronic form for use by the computer 220 .
- the set of processing units 224 include one or more processing chips and/or assemblies.
- the memory 226 includes both volatile memory (e.g., RAM) and non-volatile memory, such as one or more ROMs, disk drives, solid state drives, and the like.
- the set of processing units 224 and the memory 226 together form controlling circuitry, which is configured and arranged to carry out various methods and functions as described herein.
- the display interface 228 is configured to provide data to a display device for rendering and display to a user.
- one or more of the components of the computer 220 can be, or can include processors (e.g., processing units 224 ) configured to process instructions stored in the memory 226 . Examples of such instructions as depicted in FIG. 2 include a latent space manager 230 , an offline mode manager 240 , and a serving mode manager 250 . Further, as illustrated in FIG. 2 , the memory 226 is configured to store various data, which is described with respect to the respective managers that use such data.
- the latent space manager 230 is configured to produce latent space data 232 from items, users, and queries.
- the latent space manager 230 is configured to form item embedding vectors 234 , user embedding vectors 236 , and query embedding vectors 238 based on item, user, and query data available to the latent space manager 230 .
- the latent space manager 230 receives the item, user, and query data over the network interface 222 , i.e., over a network.
- An item embedding vector 234 is a representation of an item with which a user has or users have interacted. As described earlier, in some implementations the item embedding vector 234 is a result of a supervised machine learning engine with the item data as input. In some implementations, the item embedding vector 234 includes a vector of values and has a dimension significantly less than the input item data. In such implementations, the supervised machine learning engine performs a compression in such a way that similar items have similar embedding vectors, e.g., by computing a similarity (distance) measure between pairs of item embedding vectors 234 . In some implementations, an item embedding vector 234 is an input item vector. In such an implementation, an item embedding vector 234 has binary values, with each value corresponding to, e.g., an item descriptor (e.g., size, weight, purpose, etc.).
- an item descriptor e.g., size, weight, purpose, etc.
- User embedding vectors 236 are a representations of users.
- the user embedding vectors 236 may be formed from user data that includes explicit descriptions of the users. Examples of explicit descriptions are those provided by the users, e.g., user settings in a browser.
- the user embedding vectors 236 may be formed from user data including implicit descriptions of the user.
- An implicit description is a description not provided directly by a user but rather through computer instructions that perform observations of/analysis of data accessed by the user operating a computer running those instructions. Put another way, implicit descriptions of the user are descriptions derived from a user's interaction with a computing device or system.
- Examples of implicit descriptions include geolocation, interaction data (i.e., data generated by a user with respect to an item by e.g., viewing, clicking, highlighting, etc.) including number of clicks and mouse movement data, amount of time spent with item in an active window, and the like.
- interaction data i.e., data generated by a user with respect to an item by e.g., viewing, clicking, highlighting, etc.
- number of clicks and mouse movement data i.e., number of clicks and mouse movement data, amount of time spent with item in an active window, and the like.
- the user embedding vectors 236 include a vector of values and has a dimension significantly less than the input user data that is input into a supervised machine learning engine.
- the supervised machine learning engine performs a compression in such a way that similar users have similar embedding vectors, e.g., by computing a similarity (distance) measure between pairs of user embedding vectors 236 .
- the user embedding vectors 236 include an input user vector.
- the user embedding vectors 238 has binary values, with each value corresponding to, e.g., an explicit or implicit user descriptor.
- the supervised machine learning engine maps item embedding vectors 234 and the user embedding vectors 236 to the same latent space. Accordingly, when item embedding vectors 234 and user embedding vectors 236 are in the same latent space, there is a high likelihood of users represented by the user embedding vectors 236 producing items represented by item embedding vectors 234 .
- An advantage of mapping data across the same latent space is that is reduces the amount of and simplifies the processing necessary to perform,
- Query embedding vectors 238 are representations of query data input by users. As described earlier, in some implementations the query embedding vectors 238 are a result of a supervised machine learning engine with the query data as input. In some implementations, the query embedding vectors 238 include vectors of values and have a dimension significantly less than the input query data. In such implementations, the supervised machine learning engine performs a compression in such a way that similar queries have similar embedding vectors, e.g., by computing a similarity (distance) measure between pairs of query embedding vectors 238 . In some implementations, the query embedding vectors 238 are an input item vector. In such an implementation, query embedding vectors 238 have binary values, with each value corresponding to, e.g., an item descriptor (e.g., size, weight, purpose, etc.).
- an item descriptor e.g., size, weight, purpose, etc.
- the supervised machine learning engine maps item embedding vectors 234 and the query embedding vectors 238 to the same latent space.
- a latent space is an embedding space in which the embedding vectors are arranged by similarity measure to each other. Accordingly, when item embedding vectors 234 and query embedding vectors 238 are in the same latent space, there is a high likelihood of queries represented by the query embedding vectors 238 producing items represented by item embedding vectors 234 .
- the offline mode manager 240 is configured to generate offline model data 241 , specifically category embedding data 244 , from candidate category data 242 and item embedding subset data 243 .
- the category embedding data 244 is then an input for the serving mode manager 250 which provides the category links displayed to the user in a browser window. Details of the offline mode manager 240 are illustrated with regard to FIG. 3 .
- FIG. 3 is a flow diagram 300 that illustrates an example offline mode of a category generation system (e.g., offline mode manager 240 ).
- the offline mode has as an input a plurality of candidate categories 310 and, as an output at 370 , a plurality of category embeddings 380 .
- the plurality of candidate categories 310 may include a list (set, plurality) of possible categories that may be presented to the user.
- the candidate categories may originate from a pool of categories defined and developed over time.
- each of the plurality of candidate categories is represented by a text string. This is not limiting, however, and in some implementations, each of the plurality of candidate categories is represented by an image, an audio clip, a video clip, tactile feedback, or the like.
- each of the plurality of candidate categories 310 is defined by a category label provided manually.
- each of the plurality of candidate categories 310 may be defined using a machine learning process.
- the offline mode manager 240 is configured to provide each of the plurality of candidate categories 310 as a search string into a search engine (e.g., search engine 120 ) and obtain a respective search result for the category provided.
- the search result corresponds to a candidate category of the plurality of candidate categories 310 . That is, each of the candidate categories has, as a result of the search at 320 , a respective query-to-item mapping.
- search engine when a first candidate category “hamburger recipes” is input into a search engine, the search engine returns a first list of items from the input “hamburger recipes.” When a second candidate category “barbeque recipes” is input into the search engine, the search engine returns a second list of items from the input “barbeque recipes.” This process of inputting a candidate category of the plurality of candidate categories 310 into the search engine and returning a corresponding list of search results repeats for each of the plurality of candidate categories 310 .
- the offline mode manager 240 is configured to, for each of the candidate categories 310 , rank the list of search results corresponding to that candidate category. In some implementations, the offline mode manager 240 performs the ranking according to a metric of relevance to that candidate category (input query).
- the offline mode manager 240 is configured to, for each of the candidate categories 310 , select item embeddings for a subset of the ranked items for that candidate category to form item embedding subset data 243 .
- the offline mode manager 240 generates item embedding vectors for top-N ranked items, where N is a specified number, e.g., 25, 50, 100, etc.
- the item embedding vectors 234 form item embedding subset data 243 .
- the item embedding subset data 243 takes the form, for each candidate category, of item embeddings 350 ( 1 ), 350 ( 2 ), . . . , 350 (N).
- the offline mode manager 240 is configured to, for each of the candidate categories 310 , aggregate the item embeddings 350 ( 1 ), 350 ( 2 ), . . . , 350 (N) to form an aggregated embedding.
- aggregating includes summing.
- aggregating includes forming an arithmetic mean of item embedding vectors representing the item embeddings 350 ( 1 ), 350 ( 2 ), . . . , 350 (N).
- aggregating includes summing or forming a median of item embedding vectors representing the item embeddings 350 ( 1 ), 350 ( 2 ), . . . , 350 (N).
- aggregating includes forming a normalized average/sum/median of item embedding vectors representing the item embeddings 350 ( 1 ), 350 ( 2 ), . . . , 350 (N), or in other words normalizing the aggregated embedding.
- aggregating includes selecting an item embedding, e.g., item embedding 350 (J), having the smallest distance from a query embedding vector based on the query that produced the list of items for each of the candidate categories 310 . For example, the distance may be based on a similarity metric such as an inner product or cosine metric.
- aggregating includes forming a weighted average of item embedding vectors representing the item embeddings 350 ( 1 ), 350 ( 2 ), . . . , 350 (N).
- the offline mode manager 240 is configured to, for each of the candidate categories 310 , form, for that candidate category, a category embedding of the category embeddings 380 from the aggregated embedding. That is, in some implementations, the aggregated item embedding vector for a candidate category is represented in the category embeddings 380 , e.g., a respective category embedding for the candidate category.
- the output of the offline mode is category embedding of the category embeddings 380 corresponding to a respective candidate category of the plurality of candidate categories 310 .
- the serving mode manager 250 is configured to produce selected category data 259 by selecting a set of the category embeddings 380 (i.e., category embedding data 244 ) in order to display the categories corresponding to the category embeddings in a browser window displayed on the user device 106 . How the set of category embeddings is selected is based on serving mode data 254 . As shown in FIG. 2 , the serving mode manager 250 includes an embedding manager 251 and a ranking manager 252 .
- Serving mode data 254 includes an indication of whether the set of category embeddings is based on user embedding vectors 236 or query embedding vectors 238 , or both. Details of the selection of the set of category embeddings by the serving mode manager 250 is detailed in FIG. 4 .
- FIG. 4 is a diagram 400 that illustrates an example serving mode of a category generation system.
- the embedding manager 251 takes as input one or both of user feature data 410 and query data 420 .
- the user feature data 410 represents the user inputting the query represented by the query data 420 .
- the user feature data 410 takes the form of a binary vector indicating the presence or absence of binary user features.
- the query data 420 takes the form of a text string.
- the query data 420 takes the form of an image, an audio clip, a video clip, or tactile input.
- the embedding manager 251 is configured to input the user feature data 410 into a user embedding generator 430 to produce a latent user embedding vector representation 255 from the latent space in which the user embedding vectors 236 and item embedding vectors 234 are located.
- a latent space also known as a latent feature space or embedding space, is a representation of compressed data in a high-dimensional space (e.g., 127 or 256 dimensions), were similar data points are closer together in space.
- the latent user/Item embeddings can be generated using user-item interactions and dual-encoder (also, known as two-tower model) architecture.
- the embedding manager 251 is configured to input the query data 420 into a query embedding generator 450 to produce a latent query embedding vector representation 256 from the latent space in which the query embedding vectors 238 and item embedding vectors 234 are located.
- Query embeddings can be generated in different ways, including but not limited to, (1) aggregating the embeddings of the items returned by the Search engine for the particular query, (2) aggregating the embeddings of the words used in the query.
- the embedding manager 251 only uses the user feature data 410 . Accordingly, in such an implementation, the latent query embedding vector representation 256 representation is not generated.
- the ranking manager 252 inputs the latent user embedding vector representation 255 and each of the of category embeddings 380 into a similarity score engine 440 to produce, as similarity data 257 , a similarity score between the latent user embedding vector representation 255 and that category embedding of the category embeddings 380 . That is, if there are M category embeddings in the category embeddings 380 , then there are M similarity scores, each of which corresponds to a category embedding.
- the ranking manager 252 selects a specified number K of optimal/greatest similarity scores and produces as the ranked category data 258 a ranking of the plurality of category embeddings by similarity score, i.e., a set of optimal similarity scores.
- the selected category data 259 represents the categories to which the top K similarity scores between the latent user embedding vector representation 255 and the category embeddings 380 .
- the similarity score is based on a similarity measure.
- the similarity measure includes an inner product between the user embedding vector representation 255 and a category embedding.
- An inner product in this context is a sum over products of corresponding vector elements.
- the similarity measure includes a cosine of an angle between the user embedding vector representation 255 and a category embedding.
- the top K similarity scores are chosen based on a specified threshold value, e.g., the similarity scores greater than the specified threshold. Other similar methods of determining a similarity score may be used.
- the embedding manager 251 only uses the query data 420 . Accordingly, in such an implementation, the user embedding vector representation 255 is not generated.
- the ranking manager 252 inputs the latent query embedding vector representation 256 and each of the category embeddings 380 into a similarity score engine 440 to produce, as similarity data 257 , a similarity score between the latent query embedding vector representation 256 and that category embedding of the category embeddings 380 . That is, if there are M category embeddings in the category embeddings 380 , then there are M similarity scores, each of which corresponds to a category embedding.
- the ranking manager 252 at 480 selects a specified number K of greatest similarity scores and produces as the ranked category data 258 a ranking of the plurality of category embeddings by similarity score, i.e., a set of highest-ranked similarity scores.
- the selected category data 259 represents the categories to which the top K similarity scores between the latent query embedding vector representation 256 and the category embeddings 380 .
- the similarity score is based on a similarity measure.
- the similarity measure includes an inner product between the latent query embedding vector representation 256 and a category embedding.
- An inner product in this context is a sum over products of corresponding vector elements.
- the similarity measure includes a cosine of an angle between the latent query embedding vector representation 256 and a category embedding.
- the embedding manager 251 uses both the user feature data 410 and the query data 420 . Accordingly, in such an implementation, the user embedding vector representation 255 and the latent query embedding vector representation 256 are generated.
- the ranking manager 252 may operate on the latent query embedding vector representation 256 first or the user embedding vector representation 255 first.
- the ranking manager 252 inputs the latent query embedding vector representation 256 and each of the plurality of category embeddings 380 into a similarity score engine 440 to produce, as similarity data 257 , a first similarity score between the latent query embedding vector representation 256 and that category embedding of the category embeddings 380 . That is, if there are M category embeddings in the category embeddings 380 , then there are M similarity scores, each of which corresponds to a category embedding. The ranking manager 252 then produces at 460 an interim ranking of the plurality of category embeddings by first similarity score.
- the ranking manager 252 then at 470 selects the top K/highest ranked interim category embeddings based on similarity scores. In addition, the ranking manager 252 re-ranks the top K category embeddings based on second similarity scores between the latent user embedding vector representation 255 and the top K/highest ranked interim category embeddings to produce the ranked category data 258 .
- first similarity score and the second similarity scores do not need to be computed using the same similarity metric.
- first similarity score may be based on an inner product while the second similarity score is based on a cosine, or vice-versa.
- the ranking manager 252 inputs the latent user embedding vector representation 255 and each of the category embeddings 380 into a similarity score engine 440 to produce, as similarity data 257 , a first similarity score between the latent user embedding vector representation 255 and that category embedding of the category embeddings 380 . That is, if there are M category embeddings in the category embeddings 380 , then there are M similarity scores, each of which corresponds to a category embedding. The ranking manager 252 then produces at 460 an interim ranking of the plurality of category embeddings by first similarity score.
- the ranking manager 252 then at 470 selects the top K/highest ranked interim category embeddings based on similarity scores. In addition, the ranking manager 252 re-ranks the top K category embeddings based on second similarity scores between the latent query embedding vector representation 256 and the top K/highest ranked interim category embeddings to produce the ranked category data 258 .
- the selected category data 259 is a list of categories to which the elements of the ranked category data 258 correspond.
- the components (e.g., modules, processing units 224 ) of the user device 106 can be configured to operate based on one or more platforms (e.g., one or more similar or different platforms) that can include one or more types of hardware, software, firmware, operating systems, runtime libraries, and/or so forth.
- the components of the computer 220 can be configured to operate within a cluster of devices (e.g., a server farm). In such an implementation, the functionality and processing of the components of the computer 220 can be distributed to several devices of the cluster of devices.
- the components of the computer 220 can be, or can include, any type of hardware and/or software configured to process attributes.
- one or more portions of the components shown in the components of the computer 220 in FIG. 2 can be, or can include, a hardware-based module (e.g., a digital signal processor (DSP), a field programmable gate array (FPGA), a memory), a firmware module, and/or a software-based module (e.g., a module of computer code, a set of computer-readable instructions that can be executed at a computer).
- DSP digital signal processor
- FPGA field programmable gate array
- a memory e.g., a firmware module, and/or a software-based module (e.g., a module of computer code, a set of computer-readable instructions that can be executed at a computer).
- a software-based module e.g., a module of computer code, a set of computer-readable instructions that can be executed at a computer.
- the components of the computer 220 can be configured to operate within, for example, a data center (e.g., a cloud computing environment), a computer system, one or more server/host devices, and/or so forth.
- the components of the computer 220 can be configured to operate within a network.
- the components of the computer 220 can be configured to function within various types of network environments that can include one or more devices and/or one or more server devices.
- the network can be, or can include, a local area network (LAN), a wide area network (WAN), and/or so forth.
- the network can be, or can include, a wireless network and/or wireless network implemented using, for example, gateway devices, bridges, switches, and/or so forth.
- the network can include one or more segments and/or can have portions based on various protocols such as Internet Protocol (IP) and/or a proprietary protocol.
- IP Internet Protocol
- the network can include at least a portion of the Internet.
- one or more of the components of the search engine 120 can be, or can include, processors configured to process instructions stored in a memory.
- processors configured to process instructions stored in a memory.
- latent space manager 230 and/or a portion thereof
- offline mode manager 240 and/or a portion thereof
- serving mode manager 250 and/or a portion thereof.
- the memory 226 can be any type of memory such as a random-access memory, a disk drive memory, flash memory, and/or so forth. In some implementations, the memory 226 can be implemented as more than one memory component (e.g., more than one RAM component or disk drive memory) associated with the components of the computer 220 . In some implementations, the memory 226 can be a database memory. In some implementations, the memory 226 can be, or can include, a non-local memory. For example, the memory 226 can be, or can include, a memory shared by multiple devices (not shown). In some implementations, the memory 226 can be associated with a server device (not shown) within a network and configured to serve the components of the computer 220 .
- a server device not shown
- the memory 226 may be a nontransitory storage device or a transitory storage device that causes the processing circuitry (e.g., processing units 224 ) to carry out a method 500 as described with regard to FIG. 5 . As illustrated in FIG. 2 , the memory 226 is configured to store various data, including latent space data 232 , offline mode data 241 , and serving mode data 254 .
- FIG. 5 is a flow chart depicting an example method 500 according to the above-described improved techniques.
- the method 500 may be performed by software constructs described in connection with FIG. 2 , which reside in memory 226 of the computer 220 and are run by the set of processing units 224 .
- the offline mode manager 240 generates a plurality of category embeddings (i.e., category embeddings 380 ) by, at 504 , for each candidate category of a plurality of candidate categories, selecting a respective subset of item embeddings that correspond to that candidate category (i.e., item embedding subset data 243 ), and at 506 aggregating the respective subset of item embeddings to produce a category embedding for that candidate category.
- category embeddings 380 a plurality of category embeddings by, at 504 , for each candidate category of a plurality of candidate categories, selecting a respective subset of item embeddings that correspond to that candidate category (i.e., item embedding subset data 243 ), and at 506 aggregating the respective subset of item embeddings to produce a category embedding for that candidate category.
- the ranking manager 252 selects a set of categories (e.g., selected category data 259 ) based on a similarity (e.g., similarity data 257 ) between category embeddings for categories the set of categories and at least one of a user embedding representing a user (e.g., latent user embedding vector representation 255 ) or a query embedding representing a query (e.g., latent query embedding vector representation 256 ).
- a similarity e.g., similarity data 257
- the computer 220 provides, for display on a user device (e.g., user device 106 ), the set of categories.
- a user device e.g., user device 106
- FIG. 6 illustrates an example of a generic computer device 600 and a generic mobile computer device 650 , which may be used with the techniques described here.
- Computer device 600 is one example configuration of search engine 120 and/or category recommendation system 130 of FIG. 1 A and computer 220 of FIG. 2 .
- computing device 600 is intended to represent various forms of digital computers, such as laptops, desktops, workstations, personal digital assistants, servers, blade servers, mainframes, and other appropriate computers.
- Computing device 650 is intended to represent various forms of mobile devices, such as personal digital assistants, cellular telephones, smart phones, and other similar computing devices.
- the components shown here, their connections and relationships, and their functions, are meant to be examples only, and are not meant to limit implementations of the inventions described and/or claimed in this document.
- Computing device 600 includes a processor 602 , memory 604 , a storage device 606 , a high-speed interface 608 connecting to memory 604 and high-speed expansion ports 610 , and a low speed interface 612 connecting to low speed bus 614 and storage device 606 .
- Each of the components 602 , 604 , 606 , 608 , 610 , and 612 are interconnected using various busses, and may be mounted on a common motherboard or in other manners as appropriate.
- the processor 602 can process instructions for execution within the computing device 600 , including instructions stored in the memory 604 or on the storage device 606 to display graphical information for a GUI on an external input/output device, such as display 616 coupled to high speed interface 608 .
- multiple processors and/or multiple buses may be used, as appropriate, along with multiple memories and types of memory.
- multiple computing devices 600 may be connected, with each device providing portions of the necessary operations (e.g., as a server bank, a group of blade servers, or a multi-processor system).
- the memory 604 stores information within the computing device 600 .
- the memory 604 is a volatile memory unit or units.
- the memory 604 is a non-volatile memory unit or units.
- the memory 604 may also be another form of computer-readable medium, such as a magnetic or optical disk.
- the storage device 606 is capable of providing mass storage for the computing device 600 .
- the storage device 606 may be or contain a computer-readable medium, such as a floppy disk device, a hard disk device, an optical disk device, or a tape device, a flash memory or other similar solid state memory device, or an array of devices, including devices in a storage area network or other configurations.
- a computer program product can be tangibly embodied in an information carrier.
- the computer program product may also contain instructions that, when executed, perform one or more methods, such as those described above.
- the information carrier is a computer- or machine-readable medium, such as the memory 604 , the storage device 606 , or memory on processor 602 .
- the high speed controller 608 manages bandwidth-intensive operations for the computing device 600 , while the low speed controller 612 manages lower bandwidth-intensive operations. Such allocation of functions are examples only.
- the high-speed controller 608 is coupled to memory 604 , display 616 (e.g., through a graphics processor or accelerator), and to high-speed expansion ports 610 , which may accept various expansion cards (not shown).
- low-speed controller 612 is coupled to storage device 606 and low-speed expansion port 614 .
- the low-speed expansion port which may include various communication ports (e.g., USB, Bluetooth, Ethernet, wireless Ethernet) may be coupled to one or more input/output devices, such as a keyboard, a pointing device, a scanner, or a networking device such as a switch or router, e.g., through a network adapter.
- input/output devices such as a keyboard, a pointing device, a scanner, or a networking device such as a switch or router, e.g., through a network adapter.
- the computing device 600 may be implemented in a number of different forms, as shown in the figure. For example, it may be implemented as a standard server 620 , or multiple times in a group of such servers. It may also be implemented as part of a rack server system 624 . In addition, it may be implemented in a personal computer such as a laptop computer 622 . Alternatively, components from computing device 600 may be combined with other components in a mobile device (not shown), such as device 650 . Each of such devices may contain one or more of computing device 600 , 650 , and an entire system may be made up of multiple computing devices 600 , 650 communicating with each other.
- Computing device 650 includes a processor 652 , memory 664 , an input/output device such as a display 654 , a communication interface 666 , and a transceiver 668 , among other components.
- the device 650 may also be provided with a storage device, such as a microdrive or other device, to provide additional storage.
- a storage device such as a microdrive or other device, to provide additional storage.
- Each of the components 650 , 652 , 664 , 654 , 666 , and 668 are interconnected using various buses, and several of the components may be mounted on a common motherboard or in other manners as appropriate.
- the processor 652 can execute instructions within the computing device 650 , including instructions stored in the memory 664 .
- the processor may be implemented as a chipset of chips that include separate and multiple analog and digital processors.
- the processor may provide, for example, for coordination of the other components of the device 650 , such as control of user interfaces, applications run by device 650 , and wireless communication by device 650 .
- Processor 652 may communicate with a user through control interface 658 and display interface 656 coupled to a display 654 .
- the display 654 may be, for example, a TFT LCD (Thin-Film-Transistor Liquid Crystal Display) or an OLED (Organic Light Emitting Diode) display, or other appropriate display technology.
- the display interface 656 may comprise appropriate circuitry for driving the display 654 to present graphical and other information to a user.
- the control interface 658 may receive commands from a user and convert them for submission to the processor 652 .
- an external interface 660 may be provided in communication with processor 652 , so as to enable near area communication of device 650 with other devices. External interface 660 may provide, for example, for wired communication in some implementations, or for wireless communication in other implementations, and multiple interfaces may also be used.
- the memory 664 stores information within the computing device 650 .
- the memory 664 can be implemented as one or more of a computer-readable medium or media, a volatile memory unit or units, or a non-volatile memory unit or units.
- Expansion memory 674 may also be provided and connected to device 650 through expansion interface 672 , which may include, for example, a SIMM (Single In Line Memory Module) card interface.
- SIMM Single In Line Memory Module
- expansion memory 674 may provide extra storage space for device 650 , or may also store applications or other information for device 650 .
- expansion memory 674 may include instructions to carry out or supplement the processes described above, and may include secure information also.
- expansion memory 674 may be provided as a security module for device 650 , and may be programmed with instructions that permit secure use of device 650 .
- secure applications may be provided via the SIMM cards, along with additional information, such as placing identifying information on the SWIM card in a non-hackable manner.
- the memory may include, for example, flash memory and/or NVRAM memory, as discussed below.
- a computer program product is tangibly embodied in an information carrier.
- the computer program product contains instructions that, when executed, perform one or more methods, such as those described above.
- the information carrier is a computer- or machine-readable medium, such as the memory 664 , expansion memory 674 , or memory on processor 652 , that may be received, for example, over transceiver 668 or external interface 660 .
- Device 650 may communicate wirelessly through communication interface 666 , which may include digital signal processing circuitry where necessary. Communication interface 666 may provide for communications under various modes or protocols, such as GSM voice calls, SMS, EMS, or MMS messaging, CDMA, TDMA, PDC, WCDMA, CDMA2000, or GPRS, among others. Such communication may occur, for example, through transceiver 668 . In addition, short-range communication may occur, such as using a Bluetooth, WiFi, or other such transceiver (not shown). In addition, GPS (Global Positioning System) receiver module 670 may provide additional navigation- and location-related wireless data to device 650 , which may be used as appropriate by applications running on device 650 .
- GPS Global Positioning System
- Device 650 may also communicate audibly using audio codec 660 , which may receive spoken information from a user and convert it to usable digital information. Audio codec 660 may likewise generate audible sound for a user, such as through a speaker, e.g., in a handset of device 650 . Such sound may include sound from voice telephone calls, may include recorded sound (e.g., voice messages, music files, etc.) and may also include sound generated by applications operating on device 650 .
- Audio codec 660 may receive spoken information from a user and convert it to usable digital information. Audio codec 660 may likewise generate audible sound for a user, such as through a speaker, e.g., in a handset of device 650 . Such sound may include sound from voice telephone calls, may include recorded sound (e.g., voice messages, music files, etc.) and may also include sound generated by applications operating on device 650 .
- the computing device 650 may be implemented in a number of different forms, as shown in the figure. For example, it may be implemented as a cellular telephone 680 . It may also be implemented as part of a smart phone 682 , personal digital assistant, or other similar mobile device.
- FIG. 7 shows an example of a generic computer device 700 , which may be computer 220 of FIG. 2 , which may be used with the techniques described here.
- Computing device 700 is intended to represent various example forms of large-scale data processing devices, such as servers, blade servers, datacenters, mainframes, and other large-scale computing devices.
- Computing device 700 may be a distributed system having multiple processors, possibly including network attached storage nodes, that are interconnected by one or more communication networks.
- the components shown here, their connections and relationships, and their functions, are meant to be examples only, and are not meant to limit implementations of the inventions described and/or claimed in this document.
- Distributed computing system 70 may include any number of computing devices 780 .
- Computing devices 780 may include a server or rack servers, mainframes, etc. communicating over a local or wide-area network, dedicated optical links, modems, bridges, routers, switches, wired or wireless networks, etc.
- each computing device may include multiple racks.
- computing device 780 a includes multiple racks 758 a , 758 b , . . . , 758 n .
- Each rack may include one or more processors, such as processors 752 a , 752 B, . . . , 752 n and 762 a , 762 b , . . . , 762 n .
- the processors may include data processors, network attached storage devices, and other computer controlled devices.
- one processor may operate as a master processor and control the scheduling and data distribution tasks.
- Processors may be interconnected through one or more rack switches 758 , and one or more racks may be connected through switch 778 .
- Switch 778 may handle communications between multiples of computing device 700 , connected.
- Each rack may include memory, such as memory 754 and memory 764 , and storage, such as 756 and 766 .
- Storage 756 and 766 may provide mass storage and may include volatile or non-volatile storage, such as network-attached disks, floppy disks, hard disks, optical disks, tapes, flash memory or other similar solid state memory devices, or an array of devices, including devices in a storage area network or other configurations.
- Storage 756 or 766 may be shared between multiple processors, multiple racks, or multiple computing devices and may include a computer-readable medium storing instructions executable by one or more of the processors.
- Memory 754 and 764 may include, e.g., volatile memory unit or units, a non-volatile memory unit or units, and/or other forms of computer-readable media, such as a magnetic or optical disks, flash memory, cache, Random Access Memory (RAM), Read Only Memory (ROM), and combinations thereof. Memory, such as memory 754 may also be shared between processors 752 a , 752 b , . . . , 752 n . Data structures, such as an index, may be stored, for example, across storage 756 and memory 754 . Computing device 700 may include other components not shown, such as controllers, buses, input/output devices, communications modules, etc.
- An entire system such as environment 100 , may be made up of multiples of computing device 700 communicating with each other.
- device 780 a may communicate with devices 780 b , 780 c , and 780 d , and these may collectively be known as environment 100 .
- environment 200 of FIG. 2 may include computing device 700 or multiples thereof. Some of the computing devices may be located geographically close to each other, and others may be located geographically distant.
- the layout of computing device 700 is an example only and the system may take on other layouts or configurations.
- providing, based on the accuracy score, the candidate passage for display includes comparing the accuracy score to an accuracy score threshold; in response to the accuracy score being greater than the accuracy score threshold, displaying the candidate passage on the display; and in response to the accuracy score being less than the accuracy score threshold, not displaying the candidate passage on the display.
- selecting the set of categories includes obtaining the query embedding generated from the query; producing a plurality of similarity scores by generating a respective similarity score based on a similarity measure between the query embedding and each of the plurality of category embeddings; and generating the set of categories by ranking the plurality of similarity scores.
- generating the respective similarity score includes, generating an inner product between the query embedding and that category embedding.
- the query embedding is obtained from a latent space, the latent space also including the item embeddings.
- selecting the set of categories includes obtaining the user embedding generated from user feature data and user-item interaction data; producing a plurality of similarity scores by generating a respective similarity score based on a similarity measure between the user embedding and each of the plurality of category embeddings; and generating the set of categories by ranking the plurality of similarity scores.
- generating the respective score includes generating an inner product between the user embedding and that category embedding.
- the user embedding is obtained from a latent space, the latent space also including the item embeddings.
- selecting the set of categories includes obtaining the query embedding and the user embedding; producing a plurality of first similarity scores based on a first similarity measure between the query embedding and each of the plurality of category embeddings; generating a set of interim category embeddings by ranking a specified number of the first similarity scores of the plurality of first similarity scores; producing a plurality of second similarity scores based on a second similarity measure between the query embedding and each of the set of interim category embeddings; and generating the set of categories by ranking the plurality of second similarity scores.
- the user embedding is generated from user feature data of user interaction data.
- generating the respective first similarity measure between the query embedding and a category embedding of the plurality of category embeddings includes generating an inner product between the query embedding and that category embedding.
- generating the respective second similarity measure of the user embedding and a category embedding of the set of interim category embeddings includes generating an inner product between the user embedding and that category embedding.
- selecting the set of categories includes obtaining the query embedding and the user embedding; producing a plurality of first similarity scores based on a first similarity measure between the user embedding and each of the plurality of category embeddings; generating a set of interim category embeddings by ranking the first similarity scores; producing a plurality of second similarity scores based on a second similarity measure between the query embedding and each of the set of interim category embeddings; and generating the set of categories by ranking the plurality of second similarity scores.
- the user embedding is generated from user feature data or user interaction data.
- generating the respective first similarity measure between the user embedding and a category embedding of the plurality of category embeddings includes generating an inner product between the query embedding and that category embedding.
- generating the respective second similarity measure of the user embedding and a category embedding of the set of interim category embeddings includes generating an inner product between the query embedding and that category embedding.
- aggregating the respective subset of item embeddings for each candidate category of the plurality of candidate categories includes generating, as the category embedding for that candidate category, a median of the item embeddings that correspond to that candidate category.
- the method 500 further comprises obtaining a plurality of items corresponding to a candidate category of the plurality of candidate categories; producing a list of items by selecting a set of the plurality of items corresponding to the candidate category; and performing a mapping (i.e., via a supervised machine-learned function generated via, e.g., dual encoding) from the list of items to the item embeddings for the candidate category.
- a mapping i.e., via a supervised machine-learned function generated via, e.g., dual encoding
- obtaining the plurality of items corresponding to each of the plurality of candidate categories includes producing, as output of a search engine, the plurality of items corresponding to that candidate category by providing a search string into a search engine, the search string being based on an identifier (e.g., alpha-numeric) of that candidate category.
- an identifier e.g., alpha-numeric
- implementations of the systems and techniques described here can be realized in digital electronic circuitry, integrated circuitry, specially designed ASICs (application specific integrated circuits), computer hardware, firmware, software, and/or combinations thereof.
- ASICs application specific integrated circuits
- These various implementations can include implementation in one or more computer programs that are executable and/or interpretable on a programmable system including at least one programmable processor, which may be special or general purpose, coupled to receive data and instructions from, and to transmit data and instructions to, a storage system, at least one input device, and at least one output device.
- the systems and techniques described here can be implemented on a computer having a display device (e.g., a CRT (cathode ray tube) or LCD (liquid crystal display) monitor) for displaying information to the user and a keyboard and a pointing device (e.g., a mouse or a trackball) by which the user can provide input to the computer.
- a display device e.g., a CRT (cathode ray tube) or LCD (liquid crystal display) monitor
- a keyboard and a pointing device e.g., a mouse or a trackball
- Other kinds of devices can be used to provide for interaction with a user as well; for example, feedback provided to the user can be any form of sensory feedback (e.g., visual feedback, auditory feedback, or tactile feedback); and input from the user can be received in any form, including acoustic, speech, or tactile input.
- the systems and techniques described here can be implemented in a computing system that includes a back end component (e.g., as a data server), or that includes a middleware component (e.g., an application server), or that includes a front end component (e.g., a client computer having a graphical user interface or a Web browser through which a user can interact with an implementation of the systems and techniques described here), or any combination of such back end, middleware, or front end components.
- the components of the system can be interconnected by any form or medium of digital data communication (e.g., a communication network). Examples of communication networks include a local area network (“LAN”), a wide area network (“WAN”), and the Internet.
- LAN local area network
- WAN wide area network
- the Internet the global information network
- the computing system can include clients and servers.
- a client and server are generally remote from each other and typically interact through a communication network.
- the relationship of client and server arises by virtue of computer programs running on the respective computers and having a client-server relationship to each other.
Abstract
Techniques of providing category recommendations include a category recommendation system that provides users recommended categories based on implicit data (e.g., user-item interactions) and/or explicit data (e.g., queries, user information). The recommendations can be personalized or non-personalized (i.e., depending if user embeddings are used), queried or non-queried (i.e., depending on whether query embeddings are used), or personalized and queried (if both user and query embeddings are used). In any of these cases, there is an offline mode and a serving mode. In the offline mode, a category embedding is generated from an aggregation of item embeddings associated with a candidate category. In the serving mode, the candidate category is selected for display on a user device based on a similarity between the category embedding and either, or both, of the user embedding and the query embedding.
Description
- This application is a bypass continuation application of PCT Application No. PCT/US2022/073837, filed Jul. 18, 2022, the disclosure of which is incorporated herein by reference in its entirety.
- Some recommender systems provide recommendations to users based on the input received from the users. Some input is explicit (e.g., ratings, selections of specific preferences), while other input is implicit (e.g., clicks, views, swipes, skips, etc.). For example, some video service providers recommend videos to users based on explicit feedback such as star ratings. Such video services may also provide recommendations based on implicit feedback such as viewing time.
- Implementations described herein are related to providing users recommended categories based on implicit data (e.g., user-item interactions) and/or explicit data (e.g., queries, user information). For example, a user whose search history includes recipes for hamburgers, chicken wings, and baby-back ribs might receive recommendations of categories such as American recipes, pub food recipes, BBQ recipes, and so on based on prior user interaction data and/or queries associating recipes for hamburgers, chicken wings, and baby-back ribs with the terms “American,” “pub food,” “BBQ,” and so on. The recommendations can be personalized or non-personalized (i.e., depending on whether user embeddings are used), queried or non-queried (i.e., depending on whether query embeddings are used), or personalized and queried (i.e., when both user and query embeddings are used). In any of these cases, there is an offline mode and a serving mode. In the offline mode, a category embedding is generated from an aggregation of item embeddings associated with a candidate category. In the serving mode, the candidate category is selected for display on a user device based on a similarity between the category embedding and either, or both, of the user embedding and the query embedding.
- In one general aspect, a computer-based method can include generating a plurality of category embeddings by, for each candidate category of a plurality of candidate categories, selecting a respective subset of item embeddings that correspond to that candidate category; and aggregating the respective subset of item embeddings to produce a category embedding for that candidate category. The method can also include selecting a set of categories based on a similarity between category embeddings for categories of the set of categories and at least one of a user embedding representing a user or a query embedding representing a query. The method can further include providing, for display on a user device, the set of categories.
- In another general aspect, a computer program product comprises a non-transitory storage medium, the computer program product including code that, when executed by processing circuitry of a computing device, causes the processing circuitry to perform a method. The method can include generating a plurality of category embeddings by, for each candidate category of a plurality of candidate categories, selecting a respective subset of item embeddings that correspond to that candidate category; and aggregating the respective subset of item embeddings to produce a category embedding for that candidate category. The method can also include selecting a set of categories based on a similarity between category embeddings for categories of the set of categories and at least one of a user embedding representing a user or a query embedding representing a query. The method can further include providing, for display on a user device, the set of categories.
- In another general aspect, an electronic apparatus comprises memory and controlling circuitry coupled to the memory. The controlling circuitry can be configured to generate a plurality of category embeddings by, for each candidate category of a plurality of candidate categories by being further configured to select a respective subset of item embeddings that correspond to that candidate category; and aggregate the respective subset of item embeddings to produce a category embedding for that candidate category. The controlling circuitry can also be configured to select a set of categories based on a similarity between category embeddings for categories of the set of categories and at least one of a user embedding representing a user or a query embedding representing a query. The controlling circuitry can further be configured to provide, for a display on a user device, the set of categories.
- The details of one or more implementations are set forth in the accompanying drawings and the description below. Other features will be apparent from the description and drawings, and from the claims.
-
FIG. 1A is a diagram that illustrates an example search engine in which improved techniques described herein may be implemented. -
FIG. 1B is a diagram that illustrates an example set of categories displayed to a user, resulting from a search query. -
FIG. 2 is a diagram that illustrates an example electronic environment in which the improved techniques described herein may be implemented. -
FIG. 3 is a flow diagram that illustrates an example offline mode of a category generation system. -
FIG. 4 is a flow diagram that illustrates an example serving mode of a category generation system. -
FIG. 5 is a flow chart that illustrates an example method of generating categories, according to disclosed implementations. -
FIG. 6 is a diagram that illustrates an example of a computer device and a mobile computer device that can be used to implement the described techniques. -
FIG. 7 is a diagram that illustrates an example of a distributed computer device that can be used to implement the described techniques. - Conventional recommendation systems offer recommended items based on user feedback. This may be done by mapping items and users to a latent space (embedding space) and then computing a similarity measure between users and items in the latent space.
- For example, when a user has a browsing history that includes clicks on hamburger recipes and a rib recipes, a search system may return other, hamburger and rib recipes, with maybe some other closely-related recipes depending on the browsing history, e.g., a beef taco recipe, grilled sausage recipe, relish recipe, etc.
- A technical problem with the above-described conventional recommendation systems is that the recommended results are limited in scope. For example, even in the above example in which the recommendation system provided recipes other than the hamburger or rib recipes, the options offered by the recommendation system only cover what the user might probably enjoy given the items on which the user clicked. It is unlikely that the user will be prompted to explore other items the user may enjoy but cannot be determined from the browsing history and/or other implicit and explicit feedback.
- In accordance with the implementations described herein, a technical solution to the above-described technical problem includes a category recommendation system that provides users recommended categories based on implicit data (e.g., user-item interactions) and/or explicit data (e.g., queries, user information). For example, a user whose search history includes recipes for hamburgers and ribs might receive recommendations of categories such as American recipes, pub food recipes, BBQ recipes, and so on. The recommendations can be personalized or non-personalized (i.e., depending on whether user embeddings are used), queried or non-queried (i.e., depending on whether query embeddings are used), or personalized and queried (i.e., when both user and query embeddings are used). In any of these cases, there is an offline mode and a serving mode. In the offline mode, a category embedding is generated from an aggregation of item embeddings associated with a candidate category. In the serving mode, the candidate category is selected for display on a user device based on a similarity between the category embedding and either, or both, of the user embedding and the query embedding.
- A technical advantage of disclosed implementations is that, in contrast to the conventional recommendation systems, the above-described category recommendation system expands recommendations to include whole families of items not provided using the conventional recommendation systems. For example, providing whole families of items represented by categories of recipes such as American recipes, pub food recipes, and/or BBQ recipes broadens the scope of recommendation systems to feature new families of items that are likely missed by the conventional recommendation systems that merely provide a few related, individual items.
-
FIG. 1A depicts anexample environment 100 in which users can interact with one or more computer-implemented search services. Example computer-implemented search services can include a search service for an electronic mail service, a chat service, a document sharing service, a calendar sharing service, a photo sharing service, a video sharing service, a shopping service, a blogging service, a micro-blogging service, a social networking service, a location (location-aware) service, a check-in service and/or a ratings and review service. In the example ofFIG. 1A , an Internet search service is depicted, which is discussed in further detail herein. It is appreciated, however, that implementations of the present disclosure can include one or more computer-implemented services, such as the examples discussed herein. - With continued reference to
FIG. 1A , asearch engine 120 provides search services. Theexample environment 100 includes anetwork 102, e.g., a local area network (LAN), wide area network (WAN), the Internet, or a combination thereof, connectsweb site 104,user devices 106, and thesearch engine 120. In some examples, thenetwork 102 can be accessed over a wired and/or a wireless communications link. For example, mobile computing devices, such as smartphones can utilize a cellular network to access the network. Theenvironment 100 may include millions ofweb site 104 anduser devices 106. - In some examples, a
web site 104 is provided asweb site resources 105 associated with a domain name and hosted by one or more servers. An example web site is a collection of web pages formatted in an appropriate machine-readable language, e.g., hypertext markup language (HTML), that can contain text, images, multimedia content, and programming elements, e.g., scripts. Eachweb site 104 is maintained by a publisher, e.g., an entity that manages and/or owns the web site.Web site resources 105 can be static or dynamic. - In some examples,
web site resources 105 is data provided over thenetwork 102 and that is associated with a resource address, e.g., a uniform resource locator (URL). In some examples,resources 105 that can be provided by aweb site 104 include web pages, word processing documents, and portable document format (PDF) documents, images, video, and feed sources, among other appropriate digital content. Theresources 105 can include content, e.g., words, phrases, images and sounds and may include embedded information, e.g., meta information and hyperlinks, and/or embedded instructions, e.g., scripts. - In some examples, a
user device 106 is an electronic device that is under control of a user and is capable of requesting and receivingresources 105 over thenetwork 102.Example user devices 106 include personal computers, mobile computing devices, e.g., smartphones, wearable devices, and/or tablet computing devices that can send and receive data over thenetwork 102. As used throughout this document, the term mobile computing device (“mobile device”) refers to a user device that is configured to communicate over a mobile communications network. A smartphone, e.g., a phone that is enabled to communicate over the Internet, is an example of a mobile device, as are wearables and other smart devices such as smart speakers. Auser device 106 typically includes a user application, e.g., a web browser, to facilitate the sending and receiving of data over thenetwork 102. - In some examples, to facilitate searching of
resources 105, thesearch engine 120 identifies theresources 105 by crawling and indexing theresources 105 provided onweb site 104. Data about theresources 105 can be indexed based on the resource to which the data corresponds. The indexed and, optionally, cached copies of theresources 105 are stored in asearch index 122, e.g., as indexedresources 126. - The
user devices 106 submit search query 109 to thesearch engine 120. In some examples, auser device 106 can include one or more input modalities. Example modalities can include a keyboard, a touchscreen, and/or a microphone. For example, a user can use a keyboard and/or touchscreen to type in a search query. As another example, a user can speak a search query, the user speech being captured through a microphone, and being processed through speech recognition to provide the search query. - In response to receiving a search query 109, the
search engine 120 accesses thesearch index 122 to identifyresources 105 that are relevant to, e.g., have at least a minimum specified relevance score for, the search query 109. Thesearch engine 120 identifies theresources 105, generates asearch result display 111 that includessearch result 112 identifyingresources 105, and returns thesearch result display 111 to theuser devices 106. In an example context, a search results display can include one or more web pages, e.g., one or more search results pages. In some examples, a web page can be provided based on a web document that can be written in any appropriate machine-readable language. It is contemplated, however, that implementations of the present disclosure can include other appropriate display types. For example, the search results can be provided in a display generated by an application that is executed on a computing device, and/or a display generated by an operating system, e.g., mobile operating system. In some examples, search results can be provided based on any appropriate form, e.g., JavaScript-html, plaintext. - A
search result 112 is data generated by thesearch engine 120 that identifies aweb site resource 105 that is responsive to a particular search query, and includes a link to theweb site resource 105. Anexample search result 112 can include a web page title, a snippet of text or a portion of an image extracted from the web page, and the URL of the web page. In some examples, data provided in thesearch result 112 can be retrieved from a resource data store. For example, thesearch engine 120 can provide thesearch result display 111, which displays thesearch result 112. In some examples, thesearch result display 111 can be populated with information, e.g., a web page title, a snippet of text or a portion of an image extracted from the web page, that is provided from the resource data store. - In accordance with implementations of the present disclosure, the
example environment 100 also includes acategory recommendation system 130 communicably coupled to thesearch engine 120, e.g., directly coupled or coupled over a network such asnetwork 102. In some examples, and in the case of multiple computer-implemented services, thecategory recommendation system 130 is communicably coupled to respective systems that provide functionality of the respective computer-implemented services. In some examples, the systems, e.g., thesearch engine 120, can interact with thecategory recommendation system 130 to providecategory results 113 displayed in a browser window running thesearch engine 120, as discussed in further detail herein. - To enable the
category recommendation system 130, thesearch engine 120 has access touser embeddings 132, item embeddings 134, and queryembeddings 136 stored on respective storage. Each of theuser embeddings 132 is a vector of values representing different attributes and/or characteristics of a user and is generated from, e.g., respective user data (e.g., user's location, preferences, etc., obtained with user consent). In some implementations, theuser embeddings 132 are generated using a supervised learning engine such as a dual encoder in concert with items. Each of theitem embeddings 134 is a vector of values representing various attributes and/or characteristics of an item and is generated from, e.g., item data/item interaction data (item descriptors and/or identifiers, history of interaction by a user or users). In some implementations, theitem embeddings 134 are generated using a supervised learning engine such as a dual encoder in concert with users or queries Each of thequery embeddings 136 is a vector of values representing a query, generated from respective query data (representation of text, image, audio, video, tactile, etc. information provided as a query or in response to a query provided to a search engine). In some implementations, thequery embeddings 136 are generated using a supervised learning engine such as a dual encoder in concert with items. - A supervised machine learning algorithm maps the user data, item data, and query data to their respective embeddings such that the respective embeddings are usually of a significantly smaller dimension than the data. In some implementations, the mapping of user and item/item interaction data generated item embeddings 134 and
user embeddings 132 into a common latent space. A latent space is an embedding space in which the embedding vectors are arranged by similarity measure to each other. Mapping the data vectors into a latent space for their embeddings simplifies the selection of users and items that are likely compatible. In some implementations, the mapping of query and item/item interaction data generated item embeddings 134 and queryembeddings 136 into a common latent space. -
FIG. 1B is a diagram that illustrates auser interface 150 in which an example set of category results 113 is displayed on theuser device 106. As shown inFIG. 1B , theuser interface 150 is split into twosections - The
section 160 displays a search bar in which a user inputs a query composed of text, or in some implementations, an image, audio, a video, or the like. As shown inFIG. 1B , an example query is the text, “How to make a great burger.” A conventional search system may return example search results as shown inFIG. 1B , entitled “Perfect Burger Recipe” and “Steakhouse Burgers,” with websites, star ratings, and a brief description. The conventional search engine may also include some more links to websites in which the user is likely to be interested. - The
section 170, however, includes a set of categories entitled “Related Searches” as shown inFIG. 1B . This is an output of thesearch engine 120 As shown inFIG. 1B , the related searches are categories generated and selected by thecategory recommendation system 130. In this example, the displayed categories include “hamburger recipes,” “ground beef recipes,” “steak recipes” “barbeque recipes,” “high protein recipes,” “American food recipes”, and “pub food recipes.” These categories provide the user with a far more diverse set of items of likely further interest than using the conventional search engine. For example, when the user clicks on “ground beef recipes,” that category may provide a new set of links including taco recipes, sloppy joe recipes, escalloped macaroni recipes, and so on. When the user clicks on High protein recipes,” that may provide another new set of links including chicken recipes, tofu recipes, and insect recipes. Thesearch engine 120 accordingly provides links to recipes that may have some similarity to the query (or user) but would not likely be presented by a conventional search engine. -
FIG. 2 is a diagram that illustrates an example environment 200 in which the above-described technical solution may be implemented. The example environment 200 includes acomputer 220 configured to produce categories for display to a user device in response to a query from a user. - The
computer 220 includes anetwork interface 222, a set of processing units 224,memory 226, and a display interface 228. Thenetwork interface 222 includes, for example, Ethernet adaptors, Token Ring adaptors, and the like, for converting electronic and/or optical signals received from the network to electronic form for use by thecomputer 220. The set of processing units 224 include one or more processing chips and/or assemblies. Thememory 226 includes both volatile memory (e.g., RAM) and non-volatile memory, such as one or more ROMs, disk drives, solid state drives, and the like. The set of processing units 224 and thememory 226 together form controlling circuitry, which is configured and arranged to carry out various methods and functions as described herein. The display interface 228 is configured to provide data to a display device for rendering and display to a user. - In some implementations, one or more of the components of the
computer 220 can be, or can include processors (e.g., processing units 224) configured to process instructions stored in thememory 226. Examples of such instructions as depicted inFIG. 2 include alatent space manager 230, anoffline mode manager 240, and a servingmode manager 250. Further, as illustrated inFIG. 2 , thememory 226 is configured to store various data, which is described with respect to the respective managers that use such data. - The
latent space manager 230 is configured to produce latent space data 232 from items, users, and queries. Thelatent space manager 230 is configured to form item embedding vectors 234, user embedding vectors 236, and query embedding vectors 238 based on item, user, and query data available to thelatent space manager 230. In some implementations, thelatent space manager 230 receives the item, user, and query data over thenetwork interface 222, i.e., over a network. - An item embedding vector 234 is a representation of an item with which a user has or users have interacted. As described earlier, in some implementations the item embedding vector 234 is a result of a supervised machine learning engine with the item data as input. In some implementations, the item embedding vector 234 includes a vector of values and has a dimension significantly less than the input item data. In such implementations, the supervised machine learning engine performs a compression in such a way that similar items have similar embedding vectors, e.g., by computing a similarity (distance) measure between pairs of item embedding vectors 234. In some implementations, an item embedding vector 234 is an input item vector. In such an implementation, an item embedding vector 234 has binary values, with each value corresponding to, e.g., an item descriptor (e.g., size, weight, purpose, etc.).
- User embedding vectors 236 are a representations of users. In some implementations, the user embedding vectors 236 may be formed from user data that includes explicit descriptions of the users. Examples of explicit descriptions are those provided by the users, e.g., user settings in a browser. In some implementations, the user embedding vectors 236 may be formed from user data including implicit descriptions of the user. An implicit description is a description not provided directly by a user but rather through computer instructions that perform observations of/analysis of data accessed by the user operating a computer running those instructions. Put another way, implicit descriptions of the user are descriptions derived from a user's interaction with a computing device or system. Examples of implicit descriptions include geolocation, interaction data (i.e., data generated by a user with respect to an item by e.g., viewing, clicking, highlighting, etc.) including number of clicks and mouse movement data, amount of time spent with item in an active window, and the like.
- In some implementations, the user embedding vectors 236 include a vector of values and has a dimension significantly less than the input user data that is input into a supervised machine learning engine. In such implementations, the supervised machine learning engine performs a compression in such a way that similar users have similar embedding vectors, e.g., by computing a similarity (distance) measure between pairs of user embedding vectors 236. In some implementations, the user embedding vectors 236 include an input user vector. In such an implementation, the user embedding vectors 238 has binary values, with each value corresponding to, e.g., an explicit or implicit user descriptor.
- Moreover, in some implementations, the supervised machine learning engine maps item embedding vectors 234 and the user embedding vectors 236 to the same latent space. Accordingly, when item embedding vectors 234 and user embedding vectors 236 are in the same latent space, there is a high likelihood of users represented by the user embedding vectors 236 producing items represented by item embedding vectors 234. An advantage of mapping data across the same latent space is that is reduces the amount of and simplifies the processing necessary to perform,
- Query embedding vectors 238 are representations of query data input by users. As described earlier, in some implementations the query embedding vectors 238 are a result of a supervised machine learning engine with the query data as input. In some implementations, the query embedding vectors 238 include vectors of values and have a dimension significantly less than the input query data. In such implementations, the supervised machine learning engine performs a compression in such a way that similar queries have similar embedding vectors, e.g., by computing a similarity (distance) measure between pairs of query embedding vectors 238. In some implementations, the query embedding vectors 238 are an input item vector. In such an implementation, query embedding vectors 238 have binary values, with each value corresponding to, e.g., an item descriptor (e.g., size, weight, purpose, etc.).
- Moreover, in some implementations, the supervised machine learning engine maps item embedding vectors 234 and the query embedding vectors 238 to the same latent space. As discussed previously, a latent space is an embedding space in which the embedding vectors are arranged by similarity measure to each other. Accordingly, when item embedding vectors 234 and query embedding vectors 238 are in the same latent space, there is a high likelihood of queries represented by the query embedding vectors 238 producing items represented by item embedding vectors 234.
- The
offline mode manager 240 is configured to generate offline model data 241, specifically category embedding data 244, from candidate category data 242 and item embedding subset data 243. The category embedding data 244 is then an input for the servingmode manager 250 which provides the category links displayed to the user in a browser window. Details of theoffline mode manager 240 are illustrated with regard toFIG. 3 . -
FIG. 3 is a flow diagram 300 that illustrates an example offline mode of a category generation system (e.g., offline mode manager 240). As shown inFIG. 3 , the offline mode has as an input a plurality ofcandidate categories 310 and, as an output at 370, a plurality ofcategory embeddings 380. - The plurality of
candidate categories 310 may include a list (set, plurality) of possible categories that may be presented to the user. The candidate categories may originate from a pool of categories defined and developed over time. In some implementations, each of the plurality of candidate categories is represented by a text string. This is not limiting, however, and in some implementations, each of the plurality of candidate categories is represented by an image, an audio clip, a video clip, tactile feedback, or the like. In some implementations, each of the plurality ofcandidate categories 310 is defined by a category label provided manually. In some implementations, each of the plurality ofcandidate categories 310 may be defined using a machine learning process. - At 320, the
offline mode manager 240 is configured to provide each of the plurality ofcandidate categories 310 as a search string into a search engine (e.g., search engine 120) and obtain a respective search result for the category provided. The search result corresponds to a candidate category of the plurality ofcandidate categories 310. That is, each of the candidate categories has, as a result of the search at 320, a respective query-to-item mapping. For example, when a first candidate category “hamburger recipes” is input into a search engine, the search engine returns a first list of items from the input “hamburger recipes.” When a second candidate category “barbeque recipes” is input into the search engine, the search engine returns a second list of items from the input “barbeque recipes.” This process of inputting a candidate category of the plurality ofcandidate categories 310 into the search engine and returning a corresponding list of search results repeats for each of the plurality ofcandidate categories 310. - At 330, the
offline mode manager 240 is configured to, for each of thecandidate categories 310, rank the list of search results corresponding to that candidate category. In some implementations, theoffline mode manager 240 performs the ranking according to a metric of relevance to that candidate category (input query). - At 340, the
offline mode manager 240 is configured to, for each of thecandidate categories 310, select item embeddings for a subset of the ranked items for that candidate category to form item embedding subset data 243. In some implementations, theoffline mode manager 240 generates item embedding vectors for top-N ranked items, where N is a specified number, e.g., 25, 50, 100, etc. In some implementations, the item embedding vectors 234 form item embedding subset data 243. As shown inFIG. 3 , the item embedding subset data 243 takes the form, for each candidate category, of item embeddings 350(1), 350(2), . . . , 350(N). - At 360, the
offline mode manager 240 is configured to, for each of thecandidate categories 310, aggregate the item embeddings 350(1), 350(2), . . . , 350(N) to form an aggregated embedding. In some implementations, aggregating includes summing. In some implementations, aggregating includes forming an arithmetic mean of item embedding vectors representing the item embeddings 350(1), 350(2), . . . , 350(N). In some implementations, aggregating includes summing or forming a median of item embedding vectors representing the item embeddings 350(1), 350(2), . . . , 350(N). In some implementations, aggregating includes forming a normalized average/sum/median of item embedding vectors representing the item embeddings 350(1), 350(2), . . . , 350(N), or in other words normalizing the aggregated embedding. In some implementations, aggregating includes selecting an item embedding, e.g., item embedding 350(J), having the smallest distance from a query embedding vector based on the query that produced the list of items for each of thecandidate categories 310. For example, the distance may be based on a similarity metric such as an inner product or cosine metric. In some implementations, aggregating includes forming a weighted average of item embedding vectors representing the item embeddings 350(1), 350(2), . . . , 350(N). - At 370, the
offline mode manager 240 is configured to, for each of thecandidate categories 310, form, for that candidate category, a category embedding of the category embeddings 380 from the aggregated embedding. That is, in some implementations, the aggregated item embedding vector for a candidate category is represented in thecategory embeddings 380, e.g., a respective category embedding for the candidate category. - As shown in
FIG. 3 , the output of the offline mode is category embedding of the category embeddings 380 corresponding to a respective candidate category of the plurality ofcandidate categories 310. - Returning to
FIG. 2 , the servingmode manager 250 is configured to produce selectedcategory data 259 by selecting a set of the category embeddings 380 (i.e., category embedding data 244) in order to display the categories corresponding to the category embeddings in a browser window displayed on theuser device 106. How the set of category embeddings is selected is based on serving mode data 254. As shown inFIG. 2 , the servingmode manager 250 includes an embedding manager 251 and aranking manager 252. - Serving mode data 254 includes an indication of whether the set of category embeddings is based on user embedding vectors 236 or query embedding vectors 238, or both. Details of the selection of the set of category embeddings by the serving
mode manager 250 is detailed inFIG. 4 . -
FIG. 4 is a diagram 400 that illustrates an example serving mode of a category generation system. As shown inFIG. 4 , the embedding manager 251 takes as input one or both of user feature data 410 andquery data 420. The user feature data 410 represents the user inputting the query represented by thequery data 420. In some implementations, the user feature data 410 takes the form of a binary vector indicating the presence or absence of binary user features. In some implementations, thequery data 420 takes the form of a text string. In some implementations, thequery data 420 takes the form of an image, an audio clip, a video clip, or tactile input. - As shown in
FIG. 4 , the embedding manager 251 is configured to input the user feature data 410 into auser embedding generator 430 to produce a latent user embedding vector representation 255 from the latent space in which the user embedding vectors 236 and item embedding vectors 234 are located. A latent space, also known as a latent feature space or embedding space, is a representation of compressed data in a high-dimensional space (e.g., 127 or 256 dimensions), were similar data points are closer together in space. The latent user/Item embeddings can be generated using user-item interactions and dual-encoder (also, known as two-tower model) architecture. - As shown in
FIG. 4 , the embedding manager 251 is configured to input thequery data 420 into aquery embedding generator 450 to produce a latent query embedding vector representation 256 from the latent space in which the query embedding vectors 238 and item embedding vectors 234 are located. Query embeddings can be generated in different ways, including but not limited to, (1) aggregating the embeddings of the items returned by the Search engine for the particular query, (2) aggregating the embeddings of the words used in the query. - In some implementations in which the serving mode data 254 indicates that the selected categories are based on the user feature data 410 alone, the embedding manager 251 only uses the user feature data 410. Accordingly, in such an implementation, the latent query embedding vector representation 256 representation is not generated.
- In the implementations in which the serving mode data 254 indicates that the selected categories are based on the user feature data 410 alone, the
ranking manager 252 inputs the latent user embedding vector representation 255 and each of the ofcategory embeddings 380 into a similarity score engine 440 to produce, as similarity data 257, a similarity score between the latent user embedding vector representation 255 and that category embedding of thecategory embeddings 380. That is, if there are M category embeddings in thecategory embeddings 380, then there are M similarity scores, each of which corresponds to a category embedding. Theranking manager 252 then at 480 selects a specified number K of optimal/greatest similarity scores and produces as the ranked category data 258 a ranking of the plurality of category embeddings by similarity score, i.e., a set of optimal similarity scores. The selectedcategory data 259 represents the categories to which the top K similarity scores between the latent user embedding vector representation 255 and thecategory embeddings 380. - In some implementations, the similarity score is based on a similarity measure. In some implementations, the similarity measure includes an inner product between the user embedding vector representation 255 and a category embedding. An inner product in this context is a sum over products of corresponding vector elements. In some implementations, the similarity measure includes a cosine of an angle between the user embedding vector representation 255 and a category embedding. In some implementations, the top K similarity scores are chosen based on a specified threshold value, e.g., the similarity scores greater than the specified threshold. Other similar methods of determining a similarity score may be used.
- In some implementations in which the serving mode data 254 indicates that the selected categories are based on the
query data 420 alone, the embedding manager 251 only uses thequery data 420. Accordingly, in such an implementation, the user embedding vector representation 255 is not generated. - In the implementations in which the serving mode data 254 indicates that the selected categories are based on the
query data 420 alone, theranking manager 252 inputs the latent query embedding vector representation 256 and each of the category embeddings 380 into a similarity score engine 440 to produce, as similarity data 257, a similarity score between the latent query embedding vector representation 256 and that category embedding of thecategory embeddings 380. That is, if there are M category embeddings in thecategory embeddings 380, then there are M similarity scores, each of which corresponds to a category embedding. Theranking manager 252 at 480 then selects a specified number K of greatest similarity scores and produces as the ranked category data 258 a ranking of the plurality of category embeddings by similarity score, i.e., a set of highest-ranked similarity scores. The selectedcategory data 259 represents the categories to which the top K similarity scores between the latent query embedding vector representation 256 and thecategory embeddings 380. - In some implementations, the similarity score is based on a similarity measure. In some implementations, the similarity measure includes an inner product between the latent query embedding vector representation 256 and a category embedding. An inner product in this context is a sum over products of corresponding vector elements. In some implementations, the similarity measure includes a cosine of an angle between the latent query embedding vector representation 256 and a category embedding.
- In some implementations in which the serving mode data 254 indicates that the selected categories are based on both the user feature data 410 and the
query data 420, the embedding manager 251 uses both the user feature data 410 and thequery data 420. Accordingly, in such an implementation, the user embedding vector representation 255 and the latent query embedding vector representation 256 are generated. - In the implementations in which the serving mode data 254 indicates that the selected categories are based on both the user feature data 410 and the
query data 420, theranking manager 252 may operate on the latent query embedding vector representation 256 first or the user embedding vector representation 255 first. - In the former case, the
ranking manager 252 inputs the latent query embedding vector representation 256 and each of the plurality ofcategory embeddings 380 into a similarity score engine 440 to produce, as similarity data 257, a first similarity score between the latent query embedding vector representation 256 and that category embedding of thecategory embeddings 380. That is, if there are M category embeddings in thecategory embeddings 380, then there are M similarity scores, each of which corresponds to a category embedding. Theranking manager 252 then produces at 460 an interim ranking of the plurality of category embeddings by first similarity score. Theranking manager 252 then at 470 selects the top K/highest ranked interim category embeddings based on similarity scores. In addition, theranking manager 252 re-ranks the top K category embeddings based on second similarity scores between the latent user embedding vector representation 255 and the top K/highest ranked interim category embeddings to produce the rankedcategory data 258. - It is noted that the first similarity score and the second similarity scores do not need to be computed using the same similarity metric. For example, the first similarity score may be based on an inner product while the second similarity score is based on a cosine, or vice-versa.
- In the latter case, the
ranking manager 252 inputs the latent user embedding vector representation 255 and each of the category embeddings 380 into a similarity score engine 440 to produce, as similarity data 257, a first similarity score between the latent user embedding vector representation 255 and that category embedding of thecategory embeddings 380. That is, if there are M category embeddings in thecategory embeddings 380, then there are M similarity scores, each of which corresponds to a category embedding. Theranking manager 252 then produces at 460 an interim ranking of the plurality of category embeddings by first similarity score. Theranking manager 252 then at 470 selects the top K/highest ranked interim category embeddings based on similarity scores. In addition, theranking manager 252 re-ranks the top K category embeddings based on second similarity scores between the latent query embedding vector representation 256 and the top K/highest ranked interim category embeddings to produce the rankedcategory data 258. - In all cases described above with regard to the
ranking manager 252, the selectedcategory data 259 is a list of categories to which the elements of the rankedcategory data 258 correspond. - The components (e.g., modules, processing units 224) of the
user device 106 can be configured to operate based on one or more platforms (e.g., one or more similar or different platforms) that can include one or more types of hardware, software, firmware, operating systems, runtime libraries, and/or so forth. In some implementations, the components of thecomputer 220 can be configured to operate within a cluster of devices (e.g., a server farm). In such an implementation, the functionality and processing of the components of thecomputer 220 can be distributed to several devices of the cluster of devices. - The components of the
computer 220 can be, or can include, any type of hardware and/or software configured to process attributes. In some implementations, one or more portions of the components shown in the components of thecomputer 220 inFIG. 2 can be, or can include, a hardware-based module (e.g., a digital signal processor (DSP), a field programmable gate array (FPGA), a memory), a firmware module, and/or a software-based module (e.g., a module of computer code, a set of computer-readable instructions that can be executed at a computer). For example, in some implementations, one or more portions of the components of thecomputer 220 can be, or can include, a software module configured for execution by at least one processor (not shown). In some implementations, the functionality of the components can be included in different modules and/or different components than those shown inFIG. 2 , including combining functionality illustrated as two components into a single component. - Although not shown, in some implementations, the components of the computer 220 (or portions thereof) can be configured to operate within, for example, a data center (e.g., a cloud computing environment), a computer system, one or more server/host devices, and/or so forth. In some implementations, the components of the computer 220 (or portions thereof) can be configured to operate within a network. Thus, the components of the computer 220 (or portions thereof) can be configured to function within various types of network environments that can include one or more devices and/or one or more server devices. For example, the network can be, or can include, a local area network (LAN), a wide area network (WAN), and/or so forth. The network can be, or can include, a wireless network and/or wireless network implemented using, for example, gateway devices, bridges, switches, and/or so forth. The network can include one or more segments and/or can have portions based on various protocols such as Internet Protocol (IP) and/or a proprietary protocol. The network can include at least a portion of the Internet.
- In some implementations, one or more of the components of the
search engine 120 can be, or can include, processors configured to process instructions stored in a memory. For example, latent space manager 230 (and/or a portion thereof), an offline mode manager 240 (and/or a portion thereof), and a serving mode manager 250 (and/or a portion thereof). - In some implementations, the
memory 226 can be any type of memory such as a random-access memory, a disk drive memory, flash memory, and/or so forth. In some implementations, thememory 226 can be implemented as more than one memory component (e.g., more than one RAM component or disk drive memory) associated with the components of thecomputer 220. In some implementations, thememory 226 can be a database memory. In some implementations, thememory 226 can be, or can include, a non-local memory. For example, thememory 226 can be, or can include, a memory shared by multiple devices (not shown). In some implementations, thememory 226 can be associated with a server device (not shown) within a network and configured to serve the components of thecomputer 220. Thememory 226 may be a nontransitory storage device or a transitory storage device that causes the processing circuitry (e.g., processing units 224) to carry out amethod 500 as described with regard toFIG. 5 . As illustrated inFIG. 2 , thememory 226 is configured to store various data, including latent space data 232, offline mode data 241, and serving mode data 254. -
FIG. 5 is a flow chart depicting anexample method 500 according to the above-described improved techniques. Themethod 500 may be performed by software constructs described in connection withFIG. 2 , which reside inmemory 226 of thecomputer 220 and are run by the set of processing units 224. - At 502, the
offline mode manager 240 generates a plurality of category embeddings (i.e., category embeddings 380) by, at 504, for each candidate category of a plurality of candidate categories, selecting a respective subset of item embeddings that correspond to that candidate category (i.e., item embedding subset data 243), and at 506 aggregating the respective subset of item embeddings to produce a category embedding for that candidate category. - At 508, the
ranking manager 252 selects a set of categories (e.g., selected category data 259) based on a similarity (e.g., similarity data 257) between category embeddings for categories the set of categories and at least one of a user embedding representing a user (e.g., latent user embedding vector representation 255) or a query embedding representing a query (e.g., latent query embedding vector representation 256). - At 510, the
computer 220 provides, for display on a user device (e.g., user device 106), the set of categories. -
FIG. 6 illustrates an example of ageneric computer device 600 and a genericmobile computer device 650, which may be used with the techniques described here.Computer device 600 is one example configuration ofsearch engine 120 and/orcategory recommendation system 130 ofFIG. 1A andcomputer 220 ofFIG. 2 . - As shown in
FIG. 6 ,computing device 600 is intended to represent various forms of digital computers, such as laptops, desktops, workstations, personal digital assistants, servers, blade servers, mainframes, and other appropriate computers.Computing device 650 is intended to represent various forms of mobile devices, such as personal digital assistants, cellular telephones, smart phones, and other similar computing devices. The components shown here, their connections and relationships, and their functions, are meant to be examples only, and are not meant to limit implementations of the inventions described and/or claimed in this document. -
Computing device 600 includes aprocessor 602,memory 604, astorage device 606, a high-speed interface 608 connecting tomemory 604 and high-speed expansion ports 610, and alow speed interface 612 connecting tolow speed bus 614 andstorage device 606. Each of thecomponents processor 602 can process instructions for execution within thecomputing device 600, including instructions stored in thememory 604 or on thestorage device 606 to display graphical information for a GUI on an external input/output device, such asdisplay 616 coupled tohigh speed interface 608. In other implementations, multiple processors and/or multiple buses may be used, as appropriate, along with multiple memories and types of memory. Also,multiple computing devices 600 may be connected, with each device providing portions of the necessary operations (e.g., as a server bank, a group of blade servers, or a multi-processor system). - The
memory 604 stores information within thecomputing device 600. In one implementation, thememory 604 is a volatile memory unit or units. In another implementation, thememory 604 is a non-volatile memory unit or units. Thememory 604 may also be another form of computer-readable medium, such as a magnetic or optical disk. - The
storage device 606 is capable of providing mass storage for thecomputing device 600. In one implementation, thestorage device 606 may be or contain a computer-readable medium, such as a floppy disk device, a hard disk device, an optical disk device, or a tape device, a flash memory or other similar solid state memory device, or an array of devices, including devices in a storage area network or other configurations. A computer program product can be tangibly embodied in an information carrier. The computer program product may also contain instructions that, when executed, perform one or more methods, such as those described above. The information carrier is a computer- or machine-readable medium, such as thememory 604, thestorage device 606, or memory onprocessor 602. - The
high speed controller 608 manages bandwidth-intensive operations for thecomputing device 600, while thelow speed controller 612 manages lower bandwidth-intensive operations. Such allocation of functions are examples only. In one implementation, the high-speed controller 608 is coupled tomemory 604, display 616 (e.g., through a graphics processor or accelerator), and to high-speed expansion ports 610, which may accept various expansion cards (not shown). In the implementation, low-speed controller 612 is coupled tostorage device 606 and low-speed expansion port 614. The low-speed expansion port, which may include various communication ports (e.g., USB, Bluetooth, Ethernet, wireless Ethernet) may be coupled to one or more input/output devices, such as a keyboard, a pointing device, a scanner, or a networking device such as a switch or router, e.g., through a network adapter. - The
computing device 600 may be implemented in a number of different forms, as shown in the figure. For example, it may be implemented as astandard server 620, or multiple times in a group of such servers. It may also be implemented as part of arack server system 624. In addition, it may be implemented in a personal computer such as alaptop computer 622. Alternatively, components fromcomputing device 600 may be combined with other components in a mobile device (not shown), such asdevice 650. Each of such devices may contain one or more ofcomputing device multiple computing devices -
Computing device 650 includes aprocessor 652, memory 664, an input/output device such as adisplay 654, acommunication interface 666, and atransceiver 668, among other components. Thedevice 650 may also be provided with a storage device, such as a microdrive or other device, to provide additional storage. Each of thecomponents - The
processor 652 can execute instructions within thecomputing device 650, including instructions stored in the memory 664. The processor may be implemented as a chipset of chips that include separate and multiple analog and digital processors. The processor may provide, for example, for coordination of the other components of thedevice 650, such as control of user interfaces, applications run bydevice 650, and wireless communication bydevice 650. -
Processor 652 may communicate with a user throughcontrol interface 658 anddisplay interface 656 coupled to adisplay 654. Thedisplay 654 may be, for example, a TFT LCD (Thin-Film-Transistor Liquid Crystal Display) or an OLED (Organic Light Emitting Diode) display, or other appropriate display technology. Thedisplay interface 656 may comprise appropriate circuitry for driving thedisplay 654 to present graphical and other information to a user. Thecontrol interface 658 may receive commands from a user and convert them for submission to theprocessor 652. In addition, anexternal interface 660 may be provided in communication withprocessor 652, so as to enable near area communication ofdevice 650 with other devices.External interface 660 may provide, for example, for wired communication in some implementations, or for wireless communication in other implementations, and multiple interfaces may also be used. - The memory 664 stores information within the
computing device 650. The memory 664 can be implemented as one or more of a computer-readable medium or media, a volatile memory unit or units, or a non-volatile memory unit or units.Expansion memory 674 may also be provided and connected todevice 650 throughexpansion interface 672, which may include, for example, a SIMM (Single In Line Memory Module) card interface.Such expansion memory 674 may provide extra storage space fordevice 650, or may also store applications or other information fordevice 650. Specifically,expansion memory 674 may include instructions to carry out or supplement the processes described above, and may include secure information also. Thus, for example,expansion memory 674 may be provided as a security module fordevice 650, and may be programmed with instructions that permit secure use ofdevice 650. In addition, secure applications may be provided via the SIMM cards, along with additional information, such as placing identifying information on the SWIM card in a non-hackable manner. - The memory may include, for example, flash memory and/or NVRAM memory, as discussed below. In one implementation, a computer program product is tangibly embodied in an information carrier. The computer program product contains instructions that, when executed, perform one or more methods, such as those described above. The information carrier is a computer- or machine-readable medium, such as the memory 664,
expansion memory 674, or memory onprocessor 652, that may be received, for example, overtransceiver 668 orexternal interface 660. -
Device 650 may communicate wirelessly throughcommunication interface 666, which may include digital signal processing circuitry where necessary.Communication interface 666 may provide for communications under various modes or protocols, such as GSM voice calls, SMS, EMS, or MMS messaging, CDMA, TDMA, PDC, WCDMA, CDMA2000, or GPRS, among others. Such communication may occur, for example, throughtransceiver 668. In addition, short-range communication may occur, such as using a Bluetooth, WiFi, or other such transceiver (not shown). In addition, GPS (Global Positioning System)receiver module 670 may provide additional navigation- and location-related wireless data todevice 650, which may be used as appropriate by applications running ondevice 650. -
Device 650 may also communicate audibly usingaudio codec 660, which may receive spoken information from a user and convert it to usable digital information.Audio codec 660 may likewise generate audible sound for a user, such as through a speaker, e.g., in a handset ofdevice 650. Such sound may include sound from voice telephone calls, may include recorded sound (e.g., voice messages, music files, etc.) and may also include sound generated by applications operating ondevice 650. - The
computing device 650 may be implemented in a number of different forms, as shown in the figure. For example, it may be implemented as acellular telephone 680. It may also be implemented as part of asmart phone 682, personal digital assistant, or other similar mobile device. -
FIG. 7 shows an example of ageneric computer device 700, which may becomputer 220 ofFIG. 2 , which may be used with the techniques described here.Computing device 700 is intended to represent various example forms of large-scale data processing devices, such as servers, blade servers, datacenters, mainframes, and other large-scale computing devices.Computing device 700 may be a distributed system having multiple processors, possibly including network attached storage nodes, that are interconnected by one or more communication networks. The components shown here, their connections and relationships, and their functions, are meant to be examples only, and are not meant to limit implementations of the inventions described and/or claimed in this document. - Distributed computing system 70 may include any number of computing devices 780. Computing devices 780 may include a server or rack servers, mainframes, etc. communicating over a local or wide-area network, dedicated optical links, modems, bridges, routers, switches, wired or wireless networks, etc.
- In some implementations, each computing device may include multiple racks. For example,
computing device 780 a includesmultiple racks 758 a, 758 b, . . . , 758 n. Each rack may include one or more processors, such asprocessors 752 a, 752B, . . . , 752 n and 762 a, 762 b, . . . , 762 n. The processors may include data processors, network attached storage devices, and other computer controlled devices. In some implementations, one processor may operate as a master processor and control the scheduling and data distribution tasks. Processors may be interconnected through one or more rack switches 758, and one or more racks may be connected throughswitch 778.Switch 778 may handle communications between multiples ofcomputing device 700, connected. - Each rack may include memory, such as
memory 754 andmemory 764, and storage, such as 756 and 766.Storage Storage Memory memory 754 may also be shared betweenprocessors storage 756 andmemory 754.Computing device 700 may include other components not shown, such as controllers, buses, input/output devices, communications modules, etc. - An entire system, such as
environment 100, may be made up of multiples ofcomputing device 700 communicating with each other. For example,device 780 a may communicate withdevices environment 100. As another example, environment 200 ofFIG. 2 may includecomputing device 700 or multiples thereof. Some of the computing devices may be located geographically close to each other, and others may be located geographically distant. The layout ofcomputing device 700 is an example only and the system may take on other layouts or configurations. - In some implementations, providing, based on the accuracy score, the candidate passage for display includes comparing the accuracy score to an accuracy score threshold; in response to the accuracy score being greater than the accuracy score threshold, displaying the candidate passage on the display; and in response to the accuracy score being less than the accuracy score threshold, not displaying the candidate passage on the display.
- In some implementations, selecting the set of categories includes obtaining the query embedding generated from the query; producing a plurality of similarity scores by generating a respective similarity score based on a similarity measure between the query embedding and each of the plurality of category embeddings; and generating the set of categories by ranking the plurality of similarity scores. In some implementations, generating the respective similarity score includes, generating an inner product between the query embedding and that category embedding. In some implementations, the query embedding is obtained from a latent space, the latent space also including the item embeddings.
- In some implementations, selecting the set of categories includes obtaining the user embedding generated from user feature data and user-item interaction data; producing a plurality of similarity scores by generating a respective similarity score based on a similarity measure between the user embedding and each of the plurality of category embeddings; and generating the set of categories by ranking the plurality of similarity scores. In some implementations, generating the respective score includes generating an inner product between the user embedding and that category embedding. In some implementations, the user embedding is obtained from a latent space, the latent space also including the item embeddings.
- In some implementations, selecting the set of categories includes obtaining the query embedding and the user embedding; producing a plurality of first similarity scores based on a first similarity measure between the query embedding and each of the plurality of category embeddings; generating a set of interim category embeddings by ranking a specified number of the first similarity scores of the plurality of first similarity scores; producing a plurality of second similarity scores based on a second similarity measure between the query embedding and each of the set of interim category embeddings; and generating the set of categories by ranking the plurality of second similarity scores. In some implementations, the user embedding is generated from user feature data of user interaction data. In some implementations, generating the respective first similarity measure between the query embedding and a category embedding of the plurality of category embeddings includes generating an inner product between the query embedding and that category embedding. In some implementations, generating the respective second similarity measure of the user embedding and a category embedding of the set of interim category embeddings includes generating an inner product between the user embedding and that category embedding.
- In some implementations, selecting the set of categories includes obtaining the query embedding and the user embedding; producing a plurality of first similarity scores based on a first similarity measure between the user embedding and each of the plurality of category embeddings; generating a set of interim category embeddings by ranking the first similarity scores; producing a plurality of second similarity scores based on a second similarity measure between the query embedding and each of the set of interim category embeddings; and generating the set of categories by ranking the plurality of second similarity scores. In some implementations, the user embedding is generated from user feature data or user interaction data. In some implementations, generating the respective first similarity measure between the user embedding and a category embedding of the plurality of category embeddings includes generating an inner product between the query embedding and that category embedding. In some implementations, generating the respective second similarity measure of the user embedding and a category embedding of the set of interim category embeddings includes generating an inner product between the query embedding and that category embedding.
- In some implementations, aggregating the respective subset of item embeddings for each candidate category of the plurality of candidate categories includes generating, as the category embedding for that candidate category, a median of the item embeddings that correspond to that candidate category.
- In some implementations, the
method 500 further comprises obtaining a plurality of items corresponding to a candidate category of the plurality of candidate categories; producing a list of items by selecting a set of the plurality of items corresponding to the candidate category; and performing a mapping (i.e., via a supervised machine-learned function generated via, e.g., dual encoding) from the list of items to the item embeddings for the candidate category. In some implementations, obtaining the plurality of items corresponding to each of the plurality of candidate categories includes producing, as output of a search engine, the plurality of items corresponding to that candidate category by providing a search string into a search engine, the search string being based on an identifier (e.g., alpha-numeric) of that candidate category. - Various implementations of the systems and techniques described here can be realized in digital electronic circuitry, integrated circuitry, specially designed ASICs (application specific integrated circuits), computer hardware, firmware, software, and/or combinations thereof. These various implementations can include implementation in one or more computer programs that are executable and/or interpretable on a programmable system including at least one programmable processor, which may be special or general purpose, coupled to receive data and instructions from, and to transmit data and instructions to, a storage system, at least one input device, and at least one output device.
- These computer programs (also known as programs, software, software applications or code) include machine instructions for a programmable processor and can be implemented in a high-level procedural and/or object-oriented programming language, and/or in assembly/machine language. As used herein, the terms “machine-readable medium” “computer-readable medium” refers to any computer program product, apparatus and/or device (e.g., magnetic discs, optical disks, memory, Programmable Logic Devices (PLDs)) used to provide machine instructions and/or data to a programmable processor, including a machine-readable medium that receives machine instructions as a machine-readable signal. The term “machine-readable signal” refers to any signal used to provide machine instructions and/or data to a programmable processor.
- To provide for interaction with a user, the systems and techniques described here can be implemented on a computer having a display device (e.g., a CRT (cathode ray tube) or LCD (liquid crystal display) monitor) for displaying information to the user and a keyboard and a pointing device (e.g., a mouse or a trackball) by which the user can provide input to the computer. Other kinds of devices can be used to provide for interaction with a user as well; for example, feedback provided to the user can be any form of sensory feedback (e.g., visual feedback, auditory feedback, or tactile feedback); and input from the user can be received in any form, including acoustic, speech, or tactile input.
- The systems and techniques described here can be implemented in a computing system that includes a back end component (e.g., as a data server), or that includes a middleware component (e.g., an application server), or that includes a front end component (e.g., a client computer having a graphical user interface or a Web browser through which a user can interact with an implementation of the systems and techniques described here), or any combination of such back end, middleware, or front end components. The components of the system can be interconnected by any form or medium of digital data communication (e.g., a communication network). Examples of communication networks include a local area network (“LAN”), a wide area network (“WAN”), and the Internet.
- The computing system can include clients and servers. A client and server are generally remote from each other and typically interact through a communication network. The relationship of client and server arises by virtue of computer programs running on the respective computers and having a client-server relationship to each other.
- A number of implementations have been described. Nevertheless, it will be understood that various modifications may be made without departing from the spirit and scope of the specification.
- It will also be understood that when an element is referred to as being on, connected to, electrically connected to, coupled to, or electrically coupled to another element, it may be directly on, connected or coupled to the other element, or one or more intervening elements may be present. In contrast, when an element is referred to as being directly on, directly connected to or directly coupled to another element, there are no intervening elements present. Although the terms directly on, directly connected to, or directly coupled to may not be used throughout the detailed description, elements that are shown as being directly on, directly connected or directly coupled can be referred to as such. The claims of the application may be amended to recite example relationships described in the specification or shown in the figures.
- While certain features of the described implementations have been illustrated as described herein, many modifications, substitutions, changes and equivalents will now occur to those skilled in the art. It is, therefore, to be understood that the appended claims are intended to cover all such modifications and changes as fall within the scope of the implementations. It should be understood that they have been presented by way of example only, not limitation, and various changes in form and details may be made. Any portion of the apparatus and/or methods described herein may be combined in any combination, except mutually exclusive combinations. The implementations described herein can include various combinations and/or sub-combinations of the functions, components and/or features of the different implementations described.
- In addition, the logic flows depicted in the figures do not require the particular order shown, or sequential order, to achieve desirable results. In addition, other steps may be provided, or steps may be eliminated, from the described flows, and other components may be added to, or removed from, the described systems. Accordingly, other implementations are within the scope of the following claims.
Claims (20)
1. A method comprising:
generating a plurality of category embeddings by, for each candidate category of a plurality of candidate categories:
selecting a respective subset of item embeddings that correspond to that candidate category, and
aggregating the respective subset of item embeddings to produce a category embedding for that candidate category;
selecting a set of categories from the plurality of category embeddings based on a similarity between category embeddings for categories of the set of categories and at least one of a user embedding representing a user or a query embedding representing a query; and
providing, for display on a user device, the set of categories.
2. The method as in claim 1 , wherein selecting the set of categories includes:
obtaining the query embedding generated from the query;
producing a plurality of similarity scores by generating a respective similarity score based on a similarity measure between the query embedding and each of the plurality of category embeddings; and
generating the set of categories by ranking the plurality of similarity scores and selecting at least some categories having highest-ranked similarity scores.
3. The method as in claim 2 , wherein generating the respective similarity score includes:
generating an inner product between the query embedding and the category embedding.
4. The method as in claim 2 , wherein the query embedding is obtained from a latent space, the latent space also including the item embeddings.
5. The method as in claim 1 , wherein selecting the set of categories includes:
obtaining the user embedding generated from user feature data or user-item interaction data;
producing a plurality of similarity scores by generating a respective similarity score based on a similarity measure between the user embedding and each of the plurality of category embeddings; and
generating the set of categories by ranking the plurality of similarity scores and selecting at least some categories having highest-ranked similarity scores.
6. The method as in claim 5 , wherein generating the respective similarity score includes:
generating an inner product between the user embedding and the category embedding.
7. The method as in claim 5 , wherein the user embedding is obtained from a latent space, the latent space also including the item embeddings.
8. The method as in claim 1 , wherein selecting the set of categories includes:
obtaining the query embedding and the user embedding;
producing a plurality of first similarity scores based on a first similarity measure between the query embedding and each of the plurality of category embeddings;
generating a set of interim category embeddings by selecting a specified number of categories with highest-ranked first similarity scores;
producing a plurality of second similarity scores based on a second similarity measure between the query embedding and each of the set of interim category embeddings; and
generating the set of categories by selecting categories with highest-ranked interim category embeddings.
9. The method as in claim 8 , wherein the user embedding is generated from user feature data or user interaction data.
10. The method as in claim 8 , wherein generating the respective first similarity score between the query embedding and a category embedding of the plurality of category embeddings includes:
generating an inner product between the query embedding and the category embedding.
11. The method as in claim 8 , wherein generating the respective second similarity score of the user embedding and a category embedding of the set of interim category embeddings includes:
generating an inner product between the user embedding and the category embedding.
12. The method as in claim 1 , wherein selecting the set of categories includes:
obtaining the query embedding and the user embedding;
producing a plurality of first similarity scores based on a first similarity measure between the user embedding and each of the plurality of category embeddings;
generating a set of interim category embeddings by selecting a specified number of categories with highest-ranked first similarity scores;
producing a plurality of second similarity scores based on a second similarity measure between the query embedding and each of the set of interim category embeddings; and
generating the set of categories by selecting, categories having highest-ranked category embeddings.
13. The method as in claim 12 , wherein the user embedding is generated from user feature data or user interaction data.
14. The method as in claim 1 , wherein aggregating the respective subset of item embeddings for a candidate category of the plurality of candidate categories includes:
generating, as the category embedding for the candidate category, a median of the item embeddings that correspond to the candidate category.
15. The method as in claim 1 , further comprising:
obtaining a plurality of items corresponding to a candidate category of the plurality of candidate categories;
producing a list of items by selecting a set of the plurality of items corresponding to the candidate category; and
performing a mapping from the list of items to the item embeddings for the candidate category.
16. The method as in claim 15 , wherein obtaining the plurality of items corresponding to each of the plurality of candidate categories includes:
producing, as output of a search engine, the plurality of items corresponding to that candidate category by providing a search string to the search engine, the search string being based on an identifier of that candidate category.
17. A computer program product comprising a nontransitory storage medium, the computer program product including code that, when executed by processing circuitry on which a search engine is configured to execute, causes the processing circuitry to perform a method, the method comprising:
generating a plurality of category embeddings by, for each candidate category of a plurality of candidate categories:
selecting a respective subset of item embeddings that correspond to that candidate category, and
aggregating the respective subset of item embeddings to produce a category embedding for that candidate category;
selecting a set of categories based on a similarity between category embeddings for categories of the set of categories and at least one of a user embedding representing a user or a query embedding representing a query; and
providing, for display on a user device, the set of categories.
18. An apparatus, the apparatus comprising:
memory; and
controlling circuitry coupled to the memory, the controlling circuitry being configured to:
generate a plurality of category embeddings by, for each candidate category of a plurality of candidate categories:
select a respective subset of item embeddings that correspond to that candidate category, and
aggregate the respective subset of item embeddings to produce a category embedding for that candidate category;
select a set of categories based on a similarity between category embeddings for categories of the set of categories and at least one of a user embedding representing a user or a query embedding representing a query; and
provide, for a display on a user device, the set of categories.
19. The apparatus as in claim 18 , wherein the controlling circuitry configured to select the set of categories is further configured to:
obtain the query embedding generated from the query;
produce a plurality of similarity scores by generating a respective similarity score based on a similarity measure between the query embedding and each of the plurality of category embeddings; and
generate the set of categories by ranking the plurality of similarity scores.
20. The apparatus as in claim 18 , wherein the controlling circuitry configured to select the set of categories is further configured to:
obtain the user embedding generated from user feature data or user-item interaction data;
produce a plurality of similarity scores by generating a respective similarity score based on a similarity measure between the user embedding and each of the plurality of category embeddings; and
generate the set of categories by ranking the plurality of similarity scores.
Applications Claiming Priority (1)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
PCT/US2022/073837 WO2024019753A1 (en) | 2022-07-18 | 2022-07-18 | Category recommendation with implicit item feedback |
Related Parent Applications (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
PCT/US2022/073837 Continuation WO2024019753A1 (en) | 2022-07-18 | 2022-07-18 | Category recommendation with implicit item feedback |
Publications (1)
Publication Number | Publication Date |
---|---|
US20240020321A1 true US20240020321A1 (en) | 2024-01-18 |
Family
ID=82850708
Family Applications (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
US18/062,635 Pending US20240020321A1 (en) | 2022-07-18 | 2022-12-07 | Category recommendation with implicit item feedback |
Country Status (3)
Country | Link |
---|---|
US (1) | US20240020321A1 (en) |
EP (1) | EP4330834A1 (en) |
WO (1) | WO2024019753A1 (en) |
Cited By (1)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20240061845A1 (en) * | 2022-08-16 | 2024-02-22 | Capital One Services, Llc | Machine learning model for recommending interaction parties |
-
2022
- 2022-07-18 EP EP22753960.8A patent/EP4330834A1/en active Pending
- 2022-07-18 WO PCT/US2022/073837 patent/WO2024019753A1/en unknown
- 2022-12-07 US US18/062,635 patent/US20240020321A1/en active Pending
Cited By (1)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20240061845A1 (en) * | 2022-08-16 | 2024-02-22 | Capital One Services, Llc | Machine learning model for recommending interaction parties |
Also Published As
Publication number | Publication date |
---|---|
WO2024019753A1 (en) | 2024-01-25 |
EP4330834A1 (en) | 2024-03-06 |
Similar Documents
Publication | Publication Date | Title |
---|---|---|
US11100175B2 (en) | Method of and system for conducting personalized federated search and presentation of results therefrom | |
US20210352030A1 (en) | Computerized system and method for automatically determining and providing digital content within an electronic communication system | |
US10484745B2 (en) | Computerized system and method for determining media based on selected motion video inputs | |
US10073913B2 (en) | System and method for displaying of most relevant vertical search results | |
US9305092B1 (en) | Search query auto-completions based on social graph | |
US10049149B2 (en) | Computerized system and method for search query auto-completion | |
US8515934B1 (en) | Providing parallel resources in search results | |
US11797634B2 (en) | System and method for providing a content item based on computer vision processing of images | |
US10430718B2 (en) | Automatic social media content timeline summarization method and apparatus | |
US10990620B2 (en) | Aiding composition of themed articles about popular and novel topics and offering users a navigable experience of associated content | |
US20210279297A1 (en) | Linking to a search result | |
US20220327130A1 (en) | Triggering local extensions based on inferred intent | |
US8799257B1 (en) | Searching based on audio and/or visual features of documents | |
US20160246886A1 (en) | Efficient retrieval of fresh internet content | |
WO2014093446A2 (en) | Context based look-up in e-readers | |
US20170052926A1 (en) | System, method, and computer program product for recommending content to users | |
US20240020321A1 (en) | Category recommendation with implicit item feedback | |
US9824149B2 (en) | Opportunistically solving search use cases | |
US9298712B2 (en) | Content and object metadata based search in e-reader environment | |
US9519683B1 (en) | Inferring social affinity based on interactions with search results | |
WO2022182584A1 (en) | Processing queries using an attention-based ranking system | |
US10579630B2 (en) | Content creation from extracted content | |
US20240028661A1 (en) | Augmented ui generated through natural language query and semantic data connections | |
US10445384B2 (en) | System and method for determining a search response to a research query | |
US8688669B1 (en) | Content item searching and retrieval |
Legal Events
Date | Code | Title | Description |
---|---|---|---|
AS | Assignment |
Owner name: GOOGLE LLC, CALIFORNIAFree format text: ASSIGNMENT OF ASSIGNORS INTEREST;ASSIGNORS:MOSENIA, ARSALAN;KESARI, ANANDSUDHAKAR;CAI, YANLI;AND OTHERS;SIGNING DATES FROM 20220715 TO 20220718;REEL/FRAME:062133/0029 |
|
STPP | Information on status: patent application and granting procedure in general |
Free format text: DOCKETED NEW CASE - READY FOR EXAMINATION |