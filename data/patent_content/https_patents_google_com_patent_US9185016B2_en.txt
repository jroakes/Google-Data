US9185016B2 - System and method for monitoring and analyzing internet traffic - Google Patents
System and method for monitoring and analyzing internet traffic Download PDFInfo
- Publication number
- US9185016B2 US9185016B2 US13/966,433 US201313966433A US9185016B2 US 9185016 B2 US9185016 B2 US 9185016B2 US 201313966433 A US201313966433 A US 201313966433A US 9185016 B2 US9185016 B2 US 9185016B2
- Authority
- US
- United States
- Prior art keywords
- visitor
- data
- log
- report
- buffer
- Prior art date
- Legal status (The legal status is an assumption and is not a legal conclusion. Google has not performed a legal analysis and makes no representation as to the accuracy of the status listed.)
- Expired - Fee Related
Links
- 238000000034 method Methods 0.000 title claims abstract description 76
- 238000012544 monitoring process Methods 0.000 title description 13
- 230000004044 response Effects 0.000 claims abstract description 19
- 239000000872 buffer Substances 0.000 claims description 80
- 238000012545 processing Methods 0.000 claims description 41
- 230000000694 effects Effects 0.000 claims description 10
- 230000002085 persistent effect Effects 0.000 claims 12
- 238000010586 diagram Methods 0.000 description 30
- 230000008569 process Effects 0.000 description 25
- 230000008901 benefit Effects 0.000 description 13
- 230000014509 gene expression Effects 0.000 description 13
- 238000004458 analytical method Methods 0.000 description 8
- 230000010354 integration Effects 0.000 description 8
- 230000007246 mechanism Effects 0.000 description 7
- 238000005516 engineering process Methods 0.000 description 6
- 230000006870 function Effects 0.000 description 6
- 230000008859 change Effects 0.000 description 5
- 238000013499 data model Methods 0.000 description 4
- 230000003068 static effect Effects 0.000 description 4
- 230000002123 temporal effect Effects 0.000 description 4
- 230000002441 reversible effect Effects 0.000 description 3
- 125000006850 spacer group Chemical group 0.000 description 3
- 238000010200 validation analysis Methods 0.000 description 3
- 241000239290 Araneae Species 0.000 description 2
- 230000015556 catabolic process Effects 0.000 description 2
- 230000002596 correlated effect Effects 0.000 description 2
- 230000000875 corresponding effect Effects 0.000 description 2
- 238000009434 installation Methods 0.000 description 2
- 230000002452 interceptive effect Effects 0.000 description 2
- 238000012423 maintenance Methods 0.000 description 2
- 239000003550 marker Substances 0.000 description 2
- 230000002829 reductive effect Effects 0.000 description 2
- 238000004904 shortening Methods 0.000 description 2
- 241000257465 Echinoidea Species 0.000 description 1
- 241001522296 Erithacus rubecula Species 0.000 description 1
- 230000009471 action Effects 0.000 description 1
- 238000013475 authorization Methods 0.000 description 1
- 230000006399 behavior Effects 0.000 description 1
- 230000000903 blocking effect Effects 0.000 description 1
- 239000003086 colorant Substances 0.000 description 1
- 238000004891 communication Methods 0.000 description 1
- 230000002860 competitive effect Effects 0.000 description 1
- 230000001010 compromised effect Effects 0.000 description 1
- 230000001276 controlling effect Effects 0.000 description 1
- 238000013500 data storage Methods 0.000 description 1
- 230000007812 deficiency Effects 0.000 description 1
- 230000001934 delay Effects 0.000 description 1
- 230000008713 feedback mechanism Effects 0.000 description 1
- 230000003993 interaction Effects 0.000 description 1
- 238000005065 mining Methods 0.000 description 1
- 238000012986 modification Methods 0.000 description 1
- 230000004048 modification Effects 0.000 description 1
- 230000006855 networking Effects 0.000 description 1
- 230000002093 peripheral effect Effects 0.000 description 1
- 238000010223 real-time analysis Methods 0.000 description 1
- 230000009467 reduction Effects 0.000 description 1
- 239000007787 solid Substances 0.000 description 1
- 238000012795 verification Methods 0.000 description 1
- 230000000007 visual effect Effects 0.000 description 1
Images
Classifications
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04L—TRANSMISSION OF DIGITAL INFORMATION, e.g. TELEGRAPHIC COMMUNICATION
- H04L43/00—Arrangements for monitoring or testing data switching networks
- H04L43/08—Monitoring or testing based on specific metrics, e.g. QoS, energy consumption or environmental parameters
- H04L43/0876—Network utilisation, e.g. volume of load or congestion level
- H04L43/0888—Throughput
-
- C—CHEMISTRY; METALLURGY
- C07—ORGANIC CHEMISTRY
- C07K—PEPTIDES
- C07K14/00—Peptides having more than 20 amino acids; Gastrins; Somatostatins; Melanotropins; Derivatives thereof
- C07K14/435—Peptides having more than 20 amino acids; Gastrins; Somatostatins; Melanotropins; Derivatives thereof from animals; from humans
- C07K14/705—Receptors; Cell surface antigens; Cell surface determinants
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06Q—INFORMATION AND COMMUNICATION TECHNOLOGY [ICT] SPECIALLY ADAPTED FOR ADMINISTRATIVE, COMMERCIAL, FINANCIAL, MANAGERIAL OR SUPERVISORY PURPOSES; SYSTEMS OR METHODS SPECIALLY ADAPTED FOR ADMINISTRATIVE, COMMERCIAL, FINANCIAL, MANAGERIAL OR SUPERVISORY PURPOSES, NOT OTHERWISE PROVIDED FOR
- G06Q30/00—Commerce
- G06Q30/06—Buying, selling or leasing transactions
-
- A—HUMAN NECESSITIES
- A61—MEDICAL OR VETERINARY SCIENCE; HYGIENE
- A61K—PREPARATIONS FOR MEDICAL, DENTAL OR TOILETRY PURPOSES
- A61K38/00—Medicinal preparations containing peptides
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F16/00—Information retrieval; Database structures therefor; File system structures therefor
- G06F16/10—File systems; File servers
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F16/00—Information retrieval; Database structures therefor; File system structures therefor
- G06F16/20—Information retrieval; Database structures therefor; File system structures therefor of structured data, e.g. relational data
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F16/00—Information retrieval; Database structures therefor; File system structures therefor
- G06F16/20—Information retrieval; Database structures therefor; File system structures therefor of structured data, e.g. relational data
- G06F16/28—Databases characterised by their database models, e.g. relational or object models
- G06F16/284—Relational databases
-
- G06F17/30067—
-
- G06F17/30286—
-
- G06F17/30595—
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06Q—INFORMATION AND COMMUNICATION TECHNOLOGY [ICT] SPECIALLY ADAPTED FOR ADMINISTRATIVE, COMMERCIAL, FINANCIAL, MANAGERIAL OR SUPERVISORY PURPOSES; SYSTEMS OR METHODS SPECIALLY ADAPTED FOR ADMINISTRATIVE, COMMERCIAL, FINANCIAL, MANAGERIAL OR SUPERVISORY PURPOSES, NOT OTHERWISE PROVIDED FOR
- G06Q10/00—Administration; Management
- G06Q10/10—Office automation; Time management
-
- Y—GENERAL TAGGING OF NEW TECHNOLOGICAL DEVELOPMENTS; GENERAL TAGGING OF CROSS-SECTIONAL TECHNOLOGIES SPANNING OVER SEVERAL SECTIONS OF THE IPC; TECHNICAL SUBJECTS COVERED BY FORMER USPC CROSS-REFERENCE ART COLLECTIONS [XRACs] AND DIGESTS
- Y10—TECHNICAL SUBJECTS COVERED BY FORMER USPC
- Y10S—TECHNICAL SUBJECTS COVERED BY FORMER USPC CROSS-REFERENCE ART COLLECTIONS [XRACs] AND DIGESTS
- Y10S707/00—Data processing: database and file management or data structures
- Y10S707/99941—Database schema or data structure
- Y10S707/99943—Generating database or data structure, e.g. via user interface
Definitions
- the present invention relates to Internet traffic and, more specifically, to a system and method for monitoring and analyzing Internet traffic.
- Internet web servers such as those used by Internet Service Providers (ISP), are typically configured to keep a log of server usage by the on-line community. For example, as a visitor to a website clicks on various hyperlinks and travels through a website, each step is recorded by the web server in a log. Each web page, image and multimedia file viewed by the visitor, as well as each form submitted, may be recorded in the log.
- ISP Internet Service Providers
- the type of information logged generally includes the Internet Protocol (IP) address or host name of the visitor, the time of the transaction, the request, the referring page, the web browser and type of platform used by the visitor, and how much data was transferred.
- IP Internet Protocol
- This information can help marketing executives, webmasters, system administrators, business owners, or others make critical marketing, business, commerce and technical decisions.
- the data can be mined for all types of decision supporting information, e.g. analyzing which webbrowsers people are using, determining which banner ads are producing the most traffic, etc.
- a problem with mining the raw log data for useful information is the shear volume of data that is logged each day.
- ISPs may have dozens of web servers containing thousands of websites that produce gigabytes of data each day.
- Providing a robust system that can be used on various platforms, that can efficiently process the huge amounts of data that are logged, and that can produce easy to use reports for each website in an automated fashion is a daunting task.
- the present invention provides a system and method for monitoring and analyzing Internet traffic that is efficient, completely automated, and fast enough to handle the busiest websites on the Internet, processing data many times faster than existing systems.
- the system and method of the present invention processes data by reading log files produced by web servers, or by interfacing with the web server in real time, processing the data as it occurs.
- the system and method of the present invention can be applied to one website or thousands of websites, whether they reside on one server or multiple servers.
- the multi-site and sub-reporting capabilities of the system and method of the present invention makes it applicable to servers containing thousands of websites and entire on-line communities.
- the system and method of the present invention can create reports for individual websites, as well as reports for all of the websites residing on a single server or multiple server.
- the system can also create reports from a centralized system, in which reports are delivered upon request directly from the system database via a Common Gateway Interface (CGI).
- CGI Common Gateway Interface
- the system and method of the present invention can also include real-time analysis and reporting functionality in which data from web servers is processed as it occurs.
- the system and method of the present invention can produce animated reports showing current activity on the web server, which can be used by administrators and managers to monitor website effectiveness and performance.
- the system and method of the present invention can further include e-commerce analysis and reporting functionality in which data from standard traffic logs is received and merged with data from e-commerce systems.
- the system and method of the present invention can produce reports showing detailed “return on investment” information, including identifying which banner ads, referrals, domains, etc. are producing specific dollars.
- the present invention can be achieved in whole or in part by a system for analyzing and monitoring internet traffic, comprising a relational database, a log engine that processes log files received from at least one internet server and stores data processed from the log files in the relational database; and a report engine that generates reports based on the processed data stored in the relational database.
- the system and method of the present invention preferably utilizes Visitor Centric Data Modeling, which keeps data associated with the visitor that generated it, and that allows for the cross-comparing of different elements of data coming from different log entries or different log files altogether.
- FIG. 1 is a schematic diagram of a system for monitoring and analyzing Internet traffic, in accordance with the present invention
- FIG. 2 is a schematic diagram of a series of hash tables stored by the database shown in FIG. 1 ;
- FIG. 3 is a block diagram of a preferred embodiment of the log engine shown in FIG. 1 ;
- FIG. 4 is a flowchart and schematic diagram illustrating a preferred control routine for the log parser module of FIG. 3 ;
- FIG. 5 is a flowchart and schematic diagram of a preferred control routine for the read line step of FIG. 4 , for accessing and processing log file data in real time;
- FIG. 6 is a flowchart and schematic diagram illustrating a preferred control routine for the website identification module of FIG. 3 ;
- FIG. 7 is a flowchart and schematic diagram illustrating a preferred control routine for the visitor identification module of FIG. 3 ;
- FIG. 8 is a flowchart and schematic diagram illustrating a preferred control routine for the buffer update module of FIG. 3 ;
- FIG. 9 is a schematic representation of the contents of the database buffer shown in FIG. 3 ;
- FIG. 10 is a schematic diagram illustrating the operation of the DNS resolver module of FIG. 3 ;
- FIG. 11 is a flowchart and schematic diagram of a feedback loop control routine preferably used by the DNS resolver module of FIG. 3 ;
- FIG. 12 is a schematic diagram of how a preferred embodiment of an adaptable resolution mechanism in the DNS resolver module operates
- FIG. 13 is a flowchart of preferred control routines for various control loops within the DNS resolver module of FIG. 3 ;
- FIG. 14 is a flowchart and schematic diagram illustrating a preferred control routine for the database update module of FIG. 3 ;
- FIG. 15 is a schematic diagram illustrating the main components of the database shown in FIG. 1 ;
- FIG. 16 is a schematic diagram of a preferred embodiment of the report engine of FIG. 1 ;
- FIG. 17 is a flowchart of a preferred control routine for the session parser module of FIG. 16 ;
- FIG. 18 is a flowchart of a preferred control routine for the authentication module of FIG. 16 ;
- FIG. 19 is a flowchart of a preferred control routine for the data query module of FIG. 16 ;
- FIG. 20 is a flowchart of a preferred control routine for the format output module of FIG. 16 ;
- FIG. 21 is a schematic diagram of a preferred embodiment of a Javascript system used by the report engine of FIG. 16 ;
- FIG. 22 is an example of a visitor monitor report created by the system of the present invention.
- FIG. 23 is an example of a temporal visitor drill down report created by the system of the present invention.
- FIG. 24 is an example of a visitor footprint report created by the system of the present invention.
- FIG. 25 illustrates an example of a system meter report created by the system of the present invention
- FIG. 26 shows visitor table containing e-commerce data, and residing in the database buffer
- FIG. 27 shows an example of an ROW e-commerce report generated by the system of the present invention
- FIG. 28 shows an example of a snapshot report generated by the system of the present invention
- FIG. 29 shows an example of a user interface and an hourly graph report generated by the system of the present invention
- FIG. 30 shows an example of a top pages report generated by the system of the present invention
- FIG. 31 shows an example of a directory tree report generated by the system of the present invention
- FIG. 32 shows an example of a search engines report generated by the system of the present invention
- FIG. 33 shows an example of a top domains report generated by the system of the present invention
- FIG. 34 shows an example of a browser tree report generated by the system of the present invention
- FIG. 35 shows an example of a top entrances report generated by the system of the present invention.
- FIG. 36 shows an example of a top products report generated by the system of the present invention.
- FIG. 1 illustrates a system 100 for monitoring and analyzing Internet traffic, in accordance with the present invention.
- the system 100 comprises a log engine 200 , a database 300 and a report engine 400 .
- log files 510 generated by web servers 500 are sent to the log engine 200 .
- Web (Internet) traffic is served by the web server 500 .
- the web server 500 can host one or many individual websites. As visitors access the web servers 500 for content, each website hit or transaction is appended to a log. Each web server will typically have its own log file. Multiple websites on a single server could be logged centrally in one log file, or could be configured so that each website has its own log file.
- the system 100 is able to handle all of these different architectures.
- each of the log files 510 are interleaved so that individual website hits or transactions are recorded in the order they are received. If a single log file contains log entries from multiple websites, the log entries are also interleaved so that individual hits or transactions from each website are recorded in the order they are received.
- Each line in the log files 510 represents a hit or a transaction from the website on one of the web servers 500 .
- the system 100 can optionally analyze the demographics of on-line shopping by receiving e-commerce log files 580 produced by e-commerce enabled websites.
- the e-commerce log files 580 are transaction logs that contain information about each order placed on the website.
- Each of the e-commerce log files 580 generally contains data on the pricing of products purchased, dollar amounts and shipping regions.
- Sensitive information such as credit numbers, individual names and e-mail addresses are generally not stored on the e-commerce log files 580 .
- Dashed lines are used to represent the e-commerce log files 580 to indicate that the e-commerce functionality is an optional feature of the system 100 .
- the preferred embodiment of the log engine 200 is responsible for processing all of the log files 510 and 580 , domain name system (DNS) resolving and updating the database 300 .
- DNS domain name system
- the log engine 200 utilizes memory buffers, fixed-width data models and other techniques to efficiently process the log files 510 and 580 .
- the log engine 200 can be optionally, configured to access live data. The operation of the log engine 200 will be described in more detail below.
- the log engine 200 efficiently reads each line in each of the log files 510 and separates each line into its individual parts.
- the individual parts can include fields such as the IP address, time stamp, bites sent, status code, referral, etc.
- the log engine 200 utilizes a technique called Visitor Centric Data Modeling. Rather than parsing each log line and counting how many of one type of browser was used or how many times a particular webpage was viewed, Visitor Centric Data Modeling keeps that data associated with the visitor that generated it.
- Visitor Centric Data Modeling One of the primary advantages of Visitor Centric Data Modeling is the ability to cross compare different elements of data coming from different log entries or different log files altogether. Visitor Centric Data Modeling allows one to determine what percentage of users that originated from a YahooTM search looked at a particular webpage.
- Visitor Centric Data Modeling A second benefit of Visitor Centric Data Modeling is reduction of overall data processing. Because many elements of the data will be the same during a visitor's visit, the information only needs to be processed once per visitor, rather than once per log line. For example, the primary domain name of the visitor will be the same for each log entry produced by a particular visitor. Visitor Centric Modeling allows one to process this information only once per visitor. Additional details on how the log engine 200 utilizes the Visitor Centric Data Modeling will be provided below.
- the log engine 200 processes each log entry and updates the database 300 .
- the database 300 contains a series of hash tables.
- the database 300 comprises a series of hash tables, as shown in FIG. 2 .
- the hash tables comprise a visitor table 310 and associated data tables 315 .
- the visitor table 310 contains the central record for each visitor to a website.
- the hits, bytes, page views, and other fixed data parameters (hereinafter collectively referred to as “traffic information”) are stored directly in the visitor table 310 .
- the remaining non-unique parameters e.g., domain names, types of web browsers, referring web sites, etc., are stored relationally in respective data tables 315 .
- one of the data tables 315 could be configured to store a list of the different domain names from which the visitors to the website being monitored by the system 100 originate, while another of the data tables 315 could be configured to store the names of the different types of web browsers used by the visitors to the web site being monitored by the system 100 .
- the database 300 is relational and centers the data in the visitor table 310 , creating a Visitor Centric Data Model.
- the visitor table 310 contains a hash table 320 that is used for quickly seeking visitor records. Below the hash table 310 , the actual records 325 contain the traffic information of each visitor. Each unique visitor will have their own record in the visitor table 310 .
- the visitor table 310 is relational in nature and has a relations area 330 that contains pointers 335 to records 350 within the data tables 315 .
- each of these data tables 315 store different visitor parameters such as domain, browser, and referral. Besides vastly reducing the storage requirements relative to a non-relational database, the data tables 315 can be used to create statistical reports on the usage of different visitor parameters.
- Each data table 315 contains a hash table 340 , a rank table 345 , a record table 350 , and a string table 355 .
- the hash table 340 is used to seek records in the record table 350 .
- the rank table 345 is used to keep track of the top entries in the record table 350 based on the number of pointers 335 set to the records in the record table 350 . This is useful for quick access to reports.
- the record table 350 stores the actual records within the data table 315 including the traffic information associated with the parameter associated with the data table 315 .
- the record table 350 does not store the value of the parameter. Instead, the record table 350 contains a pointer to a record in the string table 355 .
- Each of these subtables ( 320 , 325 , 340 , 345 , 350 , 355 ) has fixed width records allowing for efficient reading, writing, and copying of the entire data sets.
- the relational structure of the database 300 has at least two advantages.
- the visitor table 310 simplifies the task of processing each hit because, once the visitor is identified, the appropriate visitor table 310 can be identified and updated accordingly.
- the data tables 315 simplify the task of report generation, because each of the data tables 315 stores a specific parameter (e.g., the names of the web browsers used by the visitors) and are ranked. Thus, each of the data tables 315 can easily deliver the top list of entries for a particular report.
- the system 100 is ready to deliver reports based on the updated information in the database 300 .
- a user 530 sends a report request 540 to the report engine 400 via a web server 520 .
- the report engine 400 obtains the data required to generate the report from the database 300 , generates the report, and delivers the generated report 550 to the user 530 via the web server 520 .
- the web server 520 can optionally be one of the web servers 500 that created the log files 510 and 580 .
- the report engine 400 preferably utilizes javascript application techniques, dictionaries, and templates to provide flexible, efficient, customizable and attractive reports, as will be explained in more detail below. Reports are generated on the fly when requested by the user 530 using the standard Common Gateway Interface (CGI) of the web server 520 . Storage requirements are kept small as all HTML and graphics for the reports are generated as needed.
- CGI Common Gateway Interface
- FIG. 3 is a block diagram of a preferred embodiment of the log engine 200 .
- the log engine preferably comprises a log parser module 210 , a website identification module 220 , a visitor identification module 230 , a buffer update module 240 , a DNS resolver module 250 , a database buffer 260 and a database update module 270 .
- the log parser module 210 is responsible for the actual reading and processing of the log files 510 and the e-commerce log files 580 .
- the log parser module 210 can be configured to process either static log files or log files that are being generated live in real-time.
- the log parser module 210 loads each log line from the log files 510 and 580 and separates each log line into its individual fields.
- the website identification module 220 is primarily used when multiple websites are being logged to the same file.
- a class of web hosting known as “virtual hosting” or “shared hosting” allows ISPs to offer solid performing website hosting service at reasonable prices. By setting up a robust set of servers with virtual hosting capable software, ISPs can place multiple websites on the servers, thus allowing the website owners to share the cost of the servers, maintenance, and networking.
- the system and method of the present invention utilizes Subreport/Multisite Reporting Technology.
- This technology allows hosting providers to centralize the logging for all websites.
- Each server can have just one log file 510 for all websites, keeping resources in check.
- This website identification module 220 identifies each hit as belonging to a particular website. If the log file 510 or e-commerce log file 580 has data from only one website, then the task is simple and is handled through straight configuration. However, if the log file 510 or e-commerce log file 580 contains data from multiple websites, then the website identification module 220 employs a series of regular expression filters to perform the website identification. The website identification module 220 must be flexible and be able to pull any consistent part of the log file 510 for website identification. The website identification performed by the website identification module is later used to determine what portion of the database 300 to write the data to.
- the log engine 200 utilizes Visitor Centric Data Modeling.
- the first step in using a Visitor Centric Data Model is to be able to identify the specific visitor within each log file line.
- the visitor identification module 230 analyzes the fields in each hit (log file line) and identifies the hit as belonging to a new or existing visitor. Based on a unique identifier, such as an IP number or session id and a timestamp, the visitor identification module 230 determines which visitor record in the database 300 will need to be updated. If the timestamp of the hit is within a predetermined amount of time (e.g., 30 minutes) of an existing visitor, then the hit is considered as coming from that visitor.
- a predetermined amount of time e.g. 30 minutes
- the buffer update module 240 updates the parameters of the visitor record found by the visitor identification module 230 and stored on the database buffer 250 with the current hit's information.
- the timestamp of the hit is used to keep the chronological order of events intact.
- the database buffer 250 is a volatile storage area, preferably RAM memory, that mirrors the actual database 300 .
- RAM memory that mirrors the actual database 300 .
- current data is read from the database 300 into the database buffer 250 .
- data is written back to the database 300 .
- the purpose of the database buffer 250 is to speed up the processing of each hit. Instead of accessing the actual database 300 for each hit in the log file 510 or e-commerce log file 580 , the database buffer 250 allows the log engine 200 to build up the data in the faster RAM memory location of the database buffer 250 and then flush data to the database 300 in larger chunks. The operation of the database buffer 250 will be explained in more detail below.
- the data is passed through the DNS resolver module 260 for reverse DNS resolution of IP addresses.
- Most web servers log only the IP address of the visitor and not the host and domain information.
- the domain information provides valuable data about the physical and network location of visitors.
- the DNS resolver module 260 employs a customized resolution routine designed specifically to speed up the process of typically slow DNS operations.
- the database update module 270 performs the task of updating the database with the contents of the database buffer 260 .
- the database update module 270 performs some processing (e.g., visitor sorting) before writing to the database 300 .
- FIG. 4 is a flowchart and schematic diagram illustrating a preferred control routine for the log parser module 210 of FIG. 3 , configured to process static log files 510 .
- One of the most time consuming operations is reading and processing the raw Jog files 510 .
- individual log files 510 containing potentially over a gigabyte of data, getting the raw data into the system 100 is an important step.
- the purpose of the log parser module 210 is to efficiently read each log line 512 and separate it into its individual fields.
- the fields can include the IP address, timestamp, bytes sent, status code, referral, etc.
- each log line 512 in the log file 510 represents a hit or transaction from one of the web servers 500 .
- the log parser module 210 employs a log buffer 600 and a pointer array 610 that is reused for each log line 512 in the log file 510 . Thus, memory allocation for this log parser module 210 is only done at startup.
- the states of the log buffer 600 and pointer array 610 at each step in the control routine shown in FIG. 4 are represented schematically under the corresponding step in the control routine.
- the control routine starts at step 620 , where the pre-allocated log buffer 600 and the pointer array 610 are cleared.
- the log buffer 600 is cleared by setting the first character in the log buffer 600 to zero.
- the pointer array 610 is cleared by setting the values of all the individual pointers 612 to zero. It is important for stable processing to set all of the pointers in the pointer array 610 to zero before using the pointer array 610 .
- step 630 the next log line 512 in the log file 510 is read into the log buffer 600 .
- step 630 is accomplished using standard file access library calls.
- control routine then proceeds to step 640 , field spacers are identified in the log buffer 600 and marked.
- the field spacers could be spaces, tabs, commas, or anything that can be used as the separator between the fields in the logging format.
- step 650 the marked field spacers are replaced with a zero and the appropriate pointer 612 is set to the next character in the log buffer 600 .
- steps 640 and 650 are shown as separate steps for purposes of illustration, they are preferably performed at substantially the same time.
- the log buffer 600 containing the single log line 512 is converted into a series of smaller character strings, each representing a particular field 602 , and with each zero terminated.
- the pointers 612 in the pointer array 610 can then be used to access the fields 602 as if they were separate strings. Accordingly, with minimal processing and absolutely no iterative memory allocation, each log line 512 is read and efficiently separated into its fields 602 .
- FIG. 5 is a flowchart and schematic diagram of a preferred control routine for the read line step of FIG. 4 , for accessing and processing log file data in real time.
- a web server 500 under normal configuration is shown. The web server 500 handles all requests as they come in and logs each hit to the log file 510 by appending the log file 510 with data from each request.
- the built in log file 510 acts as a buffer. It is the simplest and most robust way to pass data between the web server 500 and the live data access routine 700 .
- the live data access routine 700 can be turned on or off at will. Once started, the live data access routine 700 runs as a low priority daemon.
- the live data access routine 700 can exist in two states: wait 710 and process 720 , toggling between the two as data arrives into the buffer 510 .
- the control routine starts at step 730 , where the system checks for an “End of File” mark in the log file 510 . As long as this mark is not detected, control moves to read step 740 , where the next line in the log file 510 is read into the system. Control then continues to the finish control routine step 750 , which finishes the control routine steps in the log parser control routine of FIG. 4 , starting with the mark fields step 640 in FIG. 4 . All of the read, write and EOF routines are autonomous, which means the web server 500 can continue to write new data to the end of the log 510 during the live data access routine 700 .
- control moves to truncate step 760 where the log file 510 is immediately truncated.
- the live data access routine 700 As long the log file 510 is empty, the live data access routine 700 will remain in the wait loop 710 . In this manner, the live data access routine 700 has real-time access to write data, while maintaining an arms length from the web server 500 itself.
- Website Identification Module ( 220 )
- FIG. 6 is a flowchart and schematic diagram illustrating a preferred control routine for the website identification module 220 of FIG. 3 , which is designed to identify the website that created each log line 512 in a log file 510 .
- the log lines 512 are interleaved and written to the log file 510 as hits occur.
- the format of the log file 510 may vary from provider to provider. Some may use the canonical domain name in the log file 510 , while others will use a subdirectory in the URI to identify the website.
- the subreport field (SF) specifies which field in the log file 510 contains the website identifier text.
- the subreport expression (SE) is a POSIX extended regular expression that is used to capture all or part of the field specified by SF.
- the report name expression (RN) is used to build the website name from the information captured by SE.
- log parser module 210 processes each log line 512 one at a time, and separates the log line 512 into separate fields 602 .
- log line field 602 ′ contains the website identifier text, and is also indicated in FIG. 6 with shading.
- the control routine for the website identification module begins at step 800 , where log line field 602 ′ is selected using the SF configuration variable.
- the control routine then continues to step 810 , where the subreport expression (SE) is applied to the log line field 602 ′ selected at step 800 .
- SE subreport expression
- This is done using POSIX extended regular expressions.
- the operator of the system 100 will need to be familiar with regular expressions or seek assistance from the manuals or technical support.
- the SE expression is used to match part or all of log line field 602 ′. Parenthesis are used to define what is to be matched. For example, to simply capture the entire field, the SE expression “(.*)” would be used.
- the $1 and $2 variables are used to generate the name 830 of the website.
- the variables $1 and $2 are replaced with the actual contents of the matched components. For example, if the following configuration parameters are set:
- the website identification module 220 at step 800 , would select “SITE:human-resources” as log line field 602 ′ in the log line 512 .
- the SE would capture everything after the “SITE:” part of log line field 602 ′ as defined by the parenthesis location in the SE expression. This information is placed into the $1 variable.
- the website name 830 is then identified at step 820 by expanding the RN expression and replacing the $1 variable with the actual contents of the match. In this example, the resulting website name 830 is “www.mydomain.com/human-resources”. Visitor Identification Module ( 230 )
- FIG. 7 is a flowchart and schematic diagram illustrating a preferred control routine for the visitor identification module 230 of FIG. 3 .
- the log file 510 contains a number of log lines 512 or hits. Because the log lines 512 are interleaved, each log line 512 can be from a different visitor.
- the log parser module 210 processes each log line 512 in the log file 510 , and places the information in the log buffer.
- the log line fields 602 are separated and the data is passed to the visitor identification module 230 .
- log line field 602 ′′ contains the ID value and log line field 602 ′′′ contains the timestamp of the hit.
- Log line fields 602 ′′ and 602 ′′′ are also indicated in FIG. 7 with shading.
- the control routine for the visitor identification module 230 begins at step 900 , where log line fields 602 ′′ and 602 ′′′ are selected, as represented schematically under the Identify step 900 in FIG. 7 .
- the control routine then continues to step 910 , where the control routine looks up the ID value 602 ′′ in the visitor hash table 320 of the visitor table 310 (shown in FIG. 2 ). If the ID value 602 ′′ does not exist in the visitor hash table 320 , control continues to step 920 , where a new visitor record is created in the visitor hash table 320 . If the ID value 602 ′′ does exist in the visitor hash table, control skips to step 930 .
- step 930 the timestamp 602 ′′′ of the log line 512 is checked against the time range of the visitor record in the visitor hash table that corresponds to the ID value 602 ′′. If the timestamp 602 ′′′ falls within a predetermined allowable range, control continues to step 940 , where the visitor record identified by the ID value 602 ′′ in the visitor hash table is determined to be the existing visitor. Otherwise, control jumps back to step 910 , where the seek continues through records not previously searched until either a new record is created or another existing visitor is found.
- Visitor Centric Data Modeling has a very important and powerful benefit for real world applications. Many systems or websites will use multiple servers either mirroring each other or each handling a different part of a website. Extremely busy websites will often use an array of servers to handle the extreme load of traffic. Other websites may have a secure server area that resides on a special machine.
- Each web server 500 will create its own log file 510 , recording entries from visitors as they travel through the website. Often, a single visitor will create log entries in the log file 510 for each web server 500 , especially if the web servers 500 perform different functions of the website.
- FIG. 8 is a flowchart and schematic diagram illustrating a preferred control routine for the buffer update module 240 of FIG. 3 .
- the control routine starts at step 1000 , where it is determined if the log line 512 (hit) is from a new day by analyzing the timestamp 602 ′′′ of the log line 512 . If the log line 512 is the first of a particular day, then control continues to step 1010 . Otherwise, control jumps directly to step 1020 .
- step 1010 the database buffer 260 is preloaded with any existing contents for that day from the actual database 300 . Control then continues to step 1020 .
- the visitor record identified or created by the visitor identification module 230 is located in the database buffer 260 .
- the located visitor record 1040 is shown schematically under the locate visitor record step shown in FIG. 8 .
- Traffic information is preferably updated for the visitor If the located visitor record 1040 is a new visitor record, then domain, referral, and browser information is preferably inserted into the located visitor record 1040 . All visitors preferably have their path information updated with any new pageview information.
- the updated visitor record 1050 is shown schematically below the update record step 1030 .
- the timestamp 602 ′′′ of the log line 512 is used to determine the order of the events that took place.
- An illustrative example is shown in FIG. 8 .
- a particular visitor is recorded as looking at Page A 1060 first and then Page C 1070 .
- the buffer update module 240 (at step 1030 ) checks the timestamp 602 ′′′ of the log line 512 to see where in the chain of events the page belongs.
- Page B 1080 occurred between Page A 1060 and Page C 1070 .
- Page B 1080 is inserted into the visitor record between the Page A 1060 and Page C 1070 . In this manner, the system 100 is able to update and correlate visitor data even if it is out of order in the log file 510 .
- This automatic processing of multiple log files 510 came from the discovery that a single multi threading web server, such as Netscape, may not log all hits sequentially in time. Due to the nature of multi-threading applications, it is possible that a single log file 510 may contain hits out of chronological order. The system and method of the present invention was therefore designed to handle this situation properly by checking the timestamp 602 ′′′ of each log line 512 and inserting the information in the log line 512 into the appropriate place in the retrieved visitor record 1040 based on the chain of events. With this functionality, the processing of multiple load-balancing log files 510 is as simple as reading two log files instead of one.
- the log engine 200 contains an internal database buffer 250 that mirrors part of the actual database 300 , preferably in RAM. This allows the log engine 200 to correlate and update visitor records quickly for each hit without accessing the actual database 300 for each hit. Data is correlated and cached into the database buffer 250 , which stores the data temporarily while processing the log file 510 . When processing of the log file 510 is completed, the database buffer 250 is written back to the database 300 in one step.
- the use of a database buffer 250 results in more RAM usage, but has the advantage of lowering the overhead of database access, resulting in faster processing times.
- the log engine 200 determines the time ranges being used and reads the appropriate data into the database buffer 250 .
- the database buffer 250 allows Urchin to avoid reading and writing to the database 300 for each log line 512 .
- the log engine 200 is able to make updates to the visitor tables 310 and the data tables 315 in memory (through the database buffer 250 ) and then read and write the entire data block to and from the database 300 , which is preferably stored on disk, only once.
- FIG. 9 is a schematic representation of the contents of the database buffer 250 .
- the database buffer 250 mirrors a portion of the database 300 , preferably in RAM.
- the visitor tables 310 ′ and data tables 315 ′ in the database buffer 250 have the same format as the visitor tables 310 and data tables 315 in the actual database 300 .
- the visitor tables 310 ′ and data tables 340 ′ in the database buffer 250 are also relational.
- the data is centered in the visitor table 310 ′, creating a Visitor Centric Data Model.
- the visitor table 310 ′ contains a partially filled hash table 320 ′ that is used for quickly seeking visitor records.
- the actual records 325 ′ contain data about each visitor, such as hits, bytes, time, etc. Each unique visitor will have their own record in the visitor table 310 ′.
- the visitor table 310 ′ in the database buffer 250 is relational in nature and has a relations area 330 ′ that contains pointers 335 ′ to the data tables 315 ′.
- each of the data tables 315 ′ in the database buffer 250 store different visitor parameters such as domain, browser, and referral.
- Each data table 315 ′ contains a hash table 340 ′, a rank table 345 ′, a record table 350 ′, and a string table 355 ′.
- the hash table 340 ′ is used to seek records in the record table 350 ′.
- the rank table 345 ′ is used to keep track of the top entries in the record table 350 ′ based on the number of visitors using the parameter associated the data table 315 ′. This is useful for quick access to reports.
- the record table 350 ′ stores the actual records within the data table 315 ′ including the traffic information associated with the parameter associated with the data table 315 ′.
- the record table 350 ′ does not store the value of the parameter.
- the record table 350 ′ contains a pointer to a record in the string table 355 ′.
- Each of these subtables ( 320 , 325 , 330 , 340 , 345 , 350 , 355 ) has fixed width records allowing for efficient reading, writing, and copying of the entire data sets.
- the records in the subtables are allocated in large blocks. Memory allocation is not necessary for each new record individually.
- resizing of the database buffer 250 is done so that data tables 315 ′ and the hash table 320 ′ in the visitor table 310 ′ are partially empty. This allows new records to be created instantly without allocating additional memory.
- the gray areas in the data tables 315 ′ and the hash table 320 ′ in the visitor table 310 ′ indicate the used portions. As the tables reach a predetermined fullness threshold, they are preferably increased in size.
- the data tables 315 ′ and the visitor table 310 ′ are written back into the actual stored database 300 .
- the subtables are written separately so that empty records are not stored on the disk that holds the actual database 300 .
- the fixed width nature of the subtables allows for efficient writing of entire blocks of data to the actual database 300 .
- the use of the database buffer 250 increases the speed of the log engine 200 by avoiding frequent memory allocation and disk access. By caching information in volatile memory (in the form of the database buffer 250 ), and reading and writing fixed sized blocks of data, the log engine 200 is extremely fast.
- the web server 500 can either log the IP address of the visitor or it can use DNS to resolve the host and domain information of the visitor. While domain information is valuable for market analysis purposes, the resolution can add significant overhead to the web server 500 and delay the response of the web server to the end user. It is therefore desirable to pass the task of DNS resolving onto the system 100 of the present invention. This allows the web server 500 to stay as light and quick as possible for visitors accessing the website.
- IP numbers One of the biggest and most time consuming tasks in processing web server logs files 510 and creating valuable reports is the processing of the reverse DNS of the IP numbers.
- Each IP number must be converted to a host/domain name by using the distributed DNS system of the Internet. While the local name server may cache many of the answers, most will likely need to go out to the Internet for resolution.
- the speed and scalability of the present system 100 is one of its advantages within the operations of large hosting companies. Whether processing single large websites or hundreds of thousands of small websites, the speed of the DNS resolver module 260 is important.
- the DNS resolver module 260 uses several innovative techniques for improving the speed and accuracy of the process, as will be described in more detail below.
- An aspect of the present invention is the discovery that, since each of the queries is separate and unique, the processing can be done in parallel using multithreading techniques. The overall waiting can be done all at once instead of sequentially, thus shortening the overall processing considerably.
- multithreading systems such as those based on the use of POSIX threads and BIND 8.2
- carry a significant overhead and the setting up of sockets and memory locking reduces the benefits of the multithreading.
- the DNS resolver module 260 is not based on threads, but takes on the advantage of the parallel nature of the underlying protocols themselves to simulate threading operation without the additional overhead. Besides improving the overall speed and accuracy, the porting of the software is simplified, as it depends on less library calls.
- the DNS resolver module 260 generally uses the User Datagram Protocol (UDP) on top of the IP network protocol.
- UDP User Datagram Protocol
- the UDP protocol has inherent parallel capabilities. Each query in the protocol is sent like a letter and uses a connectionless socket. Thus, multiple queries can be sent simultaneously without waiting for responses. Multiple responses can be received at any time and in any order. There is no guarantee that all the answers will return or that they will appear in any particular order. But, as long as the queries are tracked with an ID number, this UDP protocol can be used effectively to parallelize the DNS resolving operation without the overhead of threads.
- FIG. 10 is a schematic diagram of illustrating the operation of the DNS resolver module 260 .
- the DNS resolver module 260 communicates with a local name server 1100 .
- the local name server 1100 is part of the Internet 1110 DNS system, but resides in the local network as a primary caching name server acting as a relay between the DNS resolver module 260 and the multiple DNS servers in the Internet 1110 .
- the communication between the DNS resolver module 260 and the local name server uses several UDP sockets 1120 .
- the UDP sockets 1120 are setup and destroyed only once.
- the DNS resolver module 260 sends groups of queries 1130 .
- the queries 1130 are represented by “Q” boxes, and the responses (or answers) 1140 are represented by “A” boxes.
- the local name server 1100 relays the queries 1130 and answers 1140 to the Internet 1110 using a built-in DNS system.
- the local name server has caching ability and will remember recently asked queries 1130 and answer immediately instead of sending them on to the Internet 1110 .
- the DNS resolver module 260 takes advantage of the UDP protocol, and goes through a loop of sending and reading queries 1130 and answers 1140 , as will be described in more detail below. Without waiting for all answers 1140 to return or for thread controls to be freed up, the DNS resolver module preferably sends as many queries 1130 as possible out into the Internet 1110 .
- IP numbers are efficiently resolved in a manner that truly parallelizes the waiting and thus dramatically reduces the processing time without the overhead of threads.
- the DNS resolver module 260 goes through a primary loop of sending queries 1130 and reading answers 1140 .
- the kernel level sockets and the local name server 1100 can only handle so many requests simultaneously, and will drop excess queries 1130 if capacity is reached. While having a few (i.e., less than 10%) of the queries 1130 dropped is acceptable, having too many queries 1130 dropped will result in a large percentage of retries, creating additional work and actually slowing the overall processing time. However, it is desirable to send queries 1130 as rapidly as possible. What is needed is a feedback loop that can adjust the rate at which queries 1130 are sent and the waiting time for answers 1140 .
- FIG. 11 is a flowchart and schematic diagram of a feedback loop control routine preferably used by the DNS resolver module 260 .
- a resolver loop 1150 controls a loop that cycles between sending and reading queries 1130 and answers 1140 .
- the control routine starts at step 1160 , where a group of queries 1130 are sent through the UDP sockets 1120 . Once the queries 1130 are sent, control continues to step 1170 , where the resolver loop 1150 will try reading answers 1140 for a predetermined amount of time (Timeout). Once the Timeout is reached, the resolver loop will compare how many queries 1130 were sent against how many answers 1140 were received, and adjust the Timeout accordingly. Control then returns to step 1160 .
- the resolver loop 1150 preferably begins with a very aggressive (short) Timeout, and progressively increases the Timeout to wait for the answers 1140 that are taking longer to arrive.
- the resolver loop 1150 will actually go through multiple loops and, at a slower pace, reattempt queries 1130 that were never answered.
- This adaptable resolving speed control gives the DNS resolver module 260 the ability to process the bulk of queries 1130 very quickly, and minimize the impact of a few slow or non-responding answers 1140 .
- the DNS resolver module 260 is preferably configured with the ability to increase the resolving percentage and overall accuracy of the DNS resolving module 260 by adapting the query level.
- the IP number is mapped to a specific hostname. For example, the IP number 202.110.52.16 may map to the hostname:
- the first part of the answer 1140 is specific to each provider and does not contribute to the demographic-type reporting that the present system 100 is preferably designed to provide.
- IPs are not always mapped to anything.
- the query 1130 of a specific IP may return with an answer 1140 of “unknown host”, which means that not all if the IPs were mapped back to the hostnames.
- This can reduce the resolving percentage by 20 or 30 percent, and skew the demographic data away from non-resolvable networks such as are often found in government, military, and educational networks.
- the DNS resolving module 260 preferably deploys an adaptable resolving level mechanism that attempts to find out who controls the network in question if the hostname answer 1140 returns unsuccessfully.
- FIG. 12 is a schematic diagram of how a preferred embodiment of the adaptable resolution mechanism operates.
- An unresolved IP number 1180 enters the DNS resolver module 260 .
- the DNS resolver module 260 will make multiple attempts at resolving the IP number by sending out multiple queries 1130 one at a time using different query information.
- the first query 1130 a will attempt to resolve the entire specific IP number. If that returns unsuccessful, then a second query 1130 b will attempt to resolve the Class-C network address (a Class-C network address is equivalent to the first three parts of an IP address).
- a third query 1130 c will attempt to resolve the Class-B network address. If the third query is unsuccessful, a fourth query 1130 d will attempt to resolve the Class-A network address. Many times, the Class-C or Class-B network addresses will resolve correctly when the IP address did not.
- the DNS resolver module comprises a nested-loop, adaptable system that is fast and efficient.
- the nested-loop architecture is shown in FIG. 13 , which is a flowchart of a preferred control routine for the various loops within the DNS resolver module 260 .
- the control routine begins by initializing some variables, including five configuration variables 1190 that include:
- the control routine comprises a main loop 1200 , a visitor loop 1210 nested within the main loop 1200 , and a read loop 1215 nested within the visitor loop 1210 . Dashed lines indicate asynchronous non-loop flow tasks. Sockets are initialized before the main loop 1200 begins.
- the control routine begins at step 1220 , where it is determined if the loop should continue.
- the loop 1200 will continue as long as the “number of loops” (NL) has not been reached and the “resolution target” (RT) has not been reached. NL is incremented once the loop begins and RT is adjusted after each “decode answer” step 1290 , which will be described below.
- the NL and RT variables serve an important purpose. They allow a high resolving target to be set, while setting an ultimate timeout. Depending on the size of the data, the number of sites, and the amount of time available, system administrators can modify these variables before operation. Once the resolution target, or the number of loops NL, is reached, the control routine will exit and clean up.
- the visitor loop 1210 starts at step 1230 , where the next unresolved visitor record from the visitor table 310 ′ is pulled and a query 1130 is built.
- An ID number 1250 from the visitor table 310 ′ is used in the building of the query 1130 so that it can be tracked later on as a response.
- the query 1130 is sent to the UDP sockets 1120 .
- the UDP sockets 1120 are used in round robin fashion which allows minimizes the waiting for buffer controls.
- a counter keeps track of how many queries 1130 have been sent in the current batch. Control then continues to step 1260 , where the counter is checked against the NQ variable. If NQ has not been reached, control loops back to step 1230 .
- An optional interquery delay (DQ) step 1270 can be inserted between steps 1260 and 1230 to keep the visitor loop 1210 from running too fast.
- NQ is reset and control then continues to the read loop 1215 .
- the read loop 1215 continues until the WT timeout variable is reached.
- any buffered incoming answers 1140 are read from the UDP sockets 1120 .
- each answer 1140 is decoded. Control then continues to step 1300 .
- step 1300 it is determined if the answer 1140 is successful. If the answer 1140 is successful, control continues to step 1310 , where the visitor table 310 ′ is updated with the domain information. Control then continues to step 1330 .
- step 1300 If, at step 1300 , it is determined that the answer 1140 is unsuccessful, control continues to step 1320 , where the record in the visitor table 310 ′ is modified by changing the resolution status.
- the resolution status is used to control the resolution level, as discussed above. If the answer 1140 comes back as “unknown” then the resolution status is changed for that visitor record, indicating that the next query 1130 should attempt to resolve the larger network instead of the specific IP. Control then continues to step 1330 .
- the read loop 1215 condition is checked by determining if the incoming UDP sockets 1120 are empty and if the timeout WT has been reached. If the incoming UDP sockets 1120 are empty and the WT timeout has been reached, the read loop 1215 ends, and control flows back to the visitor loop 1210 at step 1340 . Otherwise, the read loop 1215 continues, and control loops back to step 1280 .
- step 1340 it is determined if the resolution target (RT) has been reached. If it has, the visitor loop 1210 ends, and control flows back to the main loop 1200 at step 1350 . Otherwise, the visitor loop 1210 continues at step 1230 with the next batch of unresolved queries.
- RT resolution target
- step 1350 of the main loop 1200 the WT timeout is adjusted (increased for the next loop). Control then continues to step 1220 , where NL and RT are checked, NL is incremented and starts the entire process over again if neither NL nor RT have been reached.
- the DNS resolver module 260 takes advantage of the UDP protocol and maximizes the parallelization of the processing. Through a series of nested loops and control parameters, the DNS resolver loop is able to adapt both speed and level in order to meet the resolving target as quickly as possible. Multiple rounds and levels of queries 1130 are resent to cover lost or failed attempts, thereby increasing overall accuracy and resolution percentage dramatically. Thus, system administrators can put a cap on overall processing time, while maintaining a high resolution target.
- the visitor table 310 ′ is sorted (if multiple websites are represented).
- the database buffer 250 is outputted to the database 300 using the database update module 270 .
- FIG. 14 is a flowchart and schematic diagram illustrating a preferred control routine for the database update module 270 .
- the schematic diagram below the control routine steps illustrates what is occurring to the data during the control routine.
- the control routine starts at step 1360 , where the visitors in the database buffer 250 are sorted based on their associated website identification. Preferably using a quicksort algorithm, the records in the database buffer 250 are sorted into groups that belong to the same website. If only one website is represented by the log file 510 , then step 1360 is trivial. However, in the case of multiple websites, the database buffer 250 is sorted into groups of visitors.
- step 1370 the database 300 is opened.
- step 1380 the database 300 is updated with the data in one of the visitor groups 1400 .
- step 1390 the database 300 is closed.
- control routine then loops back to step 1370 , and the database update process is repeated for each visitor group 1400 .
- the overhead created by accessing the database 300 is reduced.
- FIG. 15 is a schematic diagram illustrating the main components of the database 300 .
- the database 300 contains a visitor table 310 and data tables 315 .
- the structure is relational in nature as the visitor table 310 relates to information stored in the data tables 315 .
- the database 300 also includes methods module 1410 that provides an interface for accessing, seeking, and inserting data into the visitor and data tables 310 and 315 . Both the log engine 200 and the report engine 400 access the methods module 1410 .
- the methods module 1410 is the only module that is allowed to directly access the data in the database 300 . This creates a modularity to the database 300 , in which the format of the visitor table 310 and/or the data tables 315 can be modified without changing the interface to the other modules in the system 100 .
- the report engine 400 provides a centralized system that contains a single copy of the report templates and icons needed to generate reports, and delivers specific reports for a particular web site only when requested.
- the report engine 400 only stores the data for each web site, and not the specific reports. Since the reports are web-based, they can be delivered on the fly as requested through the Common Gateway Interface (CGI) of the web server.
- CGI Common Gateway Interface
- FIG. 16 is a schematic diagram of a preferred embodiment of the report engine 400 .
- the report engine 400 comprises a session parser module 1420 , an authentication module 1430 , a data query module 1440 , an format output module 1450 and a template/dictionary module 1460 .
- a report request 540 received by the web server 520 from an end-user is sent by the web server 520 to the report engine 400 through the Common Gateway Interface (CGI) 1470 of the web server 520 .
- the CGI 1470 is a standard mechanism for web servers to allow an application to process input and deliver content dynamically via the web.
- the session parser module 1420 reads the input from the report request 540 and sets internal variables accordingly. The variables are then used to determine the data to use, the report to create, and the format of delivery.
- the authentication module 1430 verifies that the end-user that sent the report request has permission to view the requested report. Upon verification, the data query module 1440 queries the database 300 for the raw data needed to generate the requested report.
- the raw data is passed to the format output module 1450 , which uses a set of templates from the template/dictionary module 1460 to format and create the report 550 to be sent back to the end-user via the web server 520 .
- the use of templates and dictionaries in the template module allows for easy customization of the reporting format. Templates can be used to change branding and the overall look and feel of the report interface. Dictionaries in the template/dictionary module 1460 can be used to change the report language on the fly. The end-user can toggle which dictionary is used for reporting directly through the CGI interface 1470 .
- the access and delivery of reports is preferably controlled using a Javascript application, which is preferably delivered to the end-user upon the first report request 540 .
- the Javascript Application provides the mechanisms for displaying report content and querying for new reports.
- the session parser module 1420 is used to read and access data specific to the type of request being made. Furthermore, hosting operations are creating control panel interfaces with which customers can login and access all of their tools and applications from one web-based location. Customers login once into the control panel, and then have access to e-mail, website builder tools, newsgroups, etc.
- the session parser module 1420 is a flexible session sensitive system that allows the present system 100 to work seamlessly with the user's control panel.
- FIG. 17 is a flowchart and schematic diagram of a preferred control routine for the session parser module of FIG. 16 .
- User requests for reports are generated and passed to the report engine 400 from the web server 520 . Since the system 100 only contains one report engine 400 , parameters 1500 are passed to the session parser module 1420 within the report engine 400 in order to determine which report to generate. The passing of parameters 1500 is built into the navigation of the reporting interface, i.e., as the end-user clicks through the navigation menus within the interface and selects a report, the proper parameters 1500 are automatically sent to the session parser module 1420 .
- the parameters 1500 preferably contain three parts.
- the session-id 1510 is used to keep track of which user is logged into the system.
- the application data 1520 contains the report-specific parameters used to select the correct report.
- the user session info is an optional set of parameters that can be used to integrate the system 100 into a user control panel containing multiple applications.
- the control routine 1420 begins at step with the read input step 1540 , which parses the list of parameters 1500 and separates the data into “name-value pairs.” Control then passes to the identify variables step 1550 , which uses a predetermined configuration 1560 to match the external name-value pairs with internal variables. This allows the system 100 to recognize custom variables being used by proprietary control panels and other user interface mechanisms.
- FIG. 18 is a flowchart of a preferred control routine for the authentication module 1430 . After the specific variables of the report request and session are determined, the authentication module 1430 provides a flexible way to check access authorization for report requesters. While the authentication module 1430 may user either built in functionality or access pre-existing user databases, the basic steps of the control routine are the same.
- the control routine starts at step 1600 , where the identity of the user, the website and the report being requested are determined based on data from the session parser module 1420 .
- the control routine then continues to step 1610 , where the validation of the user is performed.
- step 1610 can either access internal configuration parameters, listing users and reports, or it can access an external source (not shown) for user validation. If the user is validated for the report request, then control continues to step 1630 , where the report request is passed to the data query module 1440 . If the validation fails, control jumps to step 1640 , where an error response is returned to the user.
- FIG. 19 is a flowchart of a preferred control routine for the data query module 1440 .
- This data query module 1440 accesses the methods module 1410 in the database 300 in order to receive a report-ready raw data set.
- the control routine starts at step 1650 , where the identification of the requested report and other parameters parsed previously by the session parser module 1420 are formatted into a query that can be passed to the database 300 .
- the format of the query is based on the specification of the methods module 1410 in the database 300 .
- SQL type queries are created at step 1650 .
- step 1660 the query generated at step 1650 is sent to the database 300 .
- step 1670 the data from the database 300 is received and stored in a buffer.
- the buffer now contains the raw unformatted data for the requested report Control then continues to step 1680 , where the data received and stored in the buffer is passed to the format output module.
- FIG. 20 is a flowchart of a preferred control routine for the format output module 1450 .
- the control routine starts at step 1690 , where templates and dictionaries are obtained from the template/dictionary module 1460 .
- the templates and dictionaries are chosen based on the type of report and language desired.
- the report engine 400 preferably uses a Javascript system comprising a special combination of HTML and Javascript to produce interactive reports that are extremely efficient and easy to use.
- the basic concept is that the Javascript, which is loaded into the user's web browser contains the code necessary to create the visual reports. Once loaded, the web server 520 only needs to deliver data to the web browser, which is then rendered on the user side of the Javascript system.
- Javascript system is less connections to the web server 520 .
- the user can experience real-time navigation, as many of the controls do not require new connections to the web server 520 . Opening menus and sorting data occur directly in the web browser. Used in conjunction with the CGI Reporting technology described previously, the Javascript system is extremely efficient and scalable for even the most crowded web server communities.
- FIG. 21 is a schematic diagram of a preferred embodiment of the Javascript system.
- the system comprises an end-user web browser side 1810 and a server side 1820 .
- the report request is sent to the web server 520 which returns the frameset/application 1830 and icons 1840 .
- a Javascript application 1850 resides hidden in the parent frameset 1860 .
- the Javascript application 1850 then draws the two frames: the navigation frame 1870 and the report frame 1880 .
- the navigation frame 1870 is drawn directly from the Javascript application 1850 .
- the end-user wants to see a different attribute of the report or data, they can click on navigational and control elements in either the navigation frame 1870 or the report frame 1880 . These control elements affect variables in the code of the frameset 1860 , which then redraws the necessary subframes. If the end-user has selected something that requires a new data set, only the data is requested and delivered from the web server 520 through the report engine 400 .
- the Javascript application 1850 loads the new data 1890 , and draws the subframes and reports accordingly.
- the system 100 using the live data access control routine shown in FIG. 5 , has the ability to record web traffic into the database 300 continuously as it occurs. Since, as describe above, the report engine 400 creates reports when they are requested, all reports can display up-to-date real-time information. In addition to general demographic and statistical reports, the system 100 is preferably configured to create a series of reports that are specifically designed to take advantage of real-time data.
- FIG. 22 illustrates an example of a visitor monitor report 1900 created by the system 100 of the present invention.
- the report 1900 preferably uses custom templates specifically designed for real-time reporting.
- the report 1900 is a web-based interface that provides a “live” real-time look at one of several possible data parameters 1910 , such as visitors, pages, hits, bytes and dollars.
- the report preferably includes a visitor monitor graph 1920 that is preferably refreshed approximately every second to reflect new data.
- the data in the visitor monitor graph 1920 preferably moves from right to left as time progresses.
- the current time 1930 is preferably indicated above the visitor monitor graph 1920 .
- the report 1900 preferably displays the current value 1940 of the data parameter 1910 currently being displayed, as well as the parameter's average value for that day 1950 .
- Controls 1960 are preferably provided that are configured so that the user can look at previous data, stop and freeze the graph, or continue with current data.
- a small amount of Javascript is preferably used to control the refreshing of the visitor monitor report 1900 .
- the visitor monitor report 1900 preferably uses a small amount of Javascript to time and reload the image 1970 .
- the image 1970 is generated by the report engine 400 , and uses the PNG format for compact lightweight operation. Since only the image 1970 is reloaded approximately every second, the visitor monitor report 1900 does not flicker when viewed with most browsers, thus creating an animated appearance to the graph 1920 .
- the images 1970 loaded into the visitor monitor report 1900 preferably include an HTML/javascript image map that provides “clickable” drill-down access to detailed information within the visitor monitor graph 1920 .
- the visitor monitor report 1900 preferably contains a series of invisible rectangles (not shown) which cover the surface of the visitor monitor graph 1920 . When the end-user clicks within the visitor monitor graph 1920 , within one of the rectangles, that rectangle is mapped to a specific point in time. This time information is then compiled into a URL query and sent to the server to provide information on that specific point in time.
- FIG. 23 is an example of a temporal visitor drill down report 2000 created by the system 100 of the present invention, for displaying the time-specific data discussed above. All visitors 2010 that were currently active on the website at the selected time are listed by IP address and sorted based on the number of hits 2020 . Bytes 2030 , pageviews 2040 , and length of visit 2050 are also preferably shown for each visitor 2010 . The totals 2060 of bytes 2030 , pageviews 2040 , hits 2020 and length of visit 2050 for all visitors are also preferably displayed at the bottom of each column
- Administrators can use this drill down capability to quickly assess which visitors 2010 are responsible for the corresponding web server traffic. Hostile attacks from robots and web spiders can also be monitored in real-time. Administrators can take action against hostile clients by blocking their access to the servers.
- Each visitor 2010 listed in the Temporal Visitor Drill Down report 2000 is preferably selectable and linked to provide a visitor footprint on that specific visitor. All of the views are web-based and linking is preferably accomplished using simple HTML and Javascript. When the user selects a link on their browser, a new browser window opens and queries the report engine 400 for the specific information on that visitor.
- FIG. 24 illustrates an example of a visitor footprint report 2100 created by the system 100 of the present invention.
- the visitor footprint report 2100 preferably contains detailed information on the activity of the selected visitor, including traffic information 2110 , browser information 2120 , referral information 2130 , domain information 2140 and the visitor path 2150 (the specific path the visitor took through the web site).
- visitor shown in the visitor footprint report 2100 is responsible for an e-commerce transaction that is processed by the system 100 , then additional e-commerce information 2160 is preferably shown in the visitor footprint report 2100 . If the visitor shown in the visitor footprint report 2100 looked at multimedia clips that are captured by the system 100 , then additional streaming information 2170 is preferably shown in the visitor footprint report.
- the browser information 2120 is preferably analyzed to see if it matches a known browser or platform. If the browser is recognized then an icon of the browser and platform 2180 can be optionally shown as part of the browser information 2120 . If the visitor is identified as a robot, then an icon of a robot (not shown) can be optionally shown as part of the browser information 2120 . This can be useful for quickly identifying hostile attacks from aggressive robots and spiders which can flood the web servers 500 with requests, creating a slow down in response times.
- the visitor footprint report 2100 can provide insight into the usage of the website as well as help analyze specific visitors. While the detailed activity of the visitor can be monitored, the system 100 preferably does not record, use, or display any personal or identification information such as e-mail addresses, names, etc. Each visitor, while specific in the database 300 , preferably remains anonymous.
- FIG. 25 illustrates an example of a system meter report 2200 created by the system 100 of the present invention.
- the system meter report 2200 is similar to the web-based visitor monitor report 1900 shown in FIG. 22 . However, instead of providing a full-sized analysis tool, the system meter report 2200 is designed to be small enough to fit on a desktop computer screen at all times.
- the system meter report 2200 contains multiple thumbnail sized report images ( 2210 , 2220 , 2230 , 2240 , 2250 ) that all refresh in the same manner as the visitor monitor report 1900 .
- the end-user preferably selects a collapse button 1980 (shown in FIG. 22 ) or a “system meter” navigation button (not shown) within the visitor monitor report 1900 .
- the window containing the visitor monitor report 1900 preferably closes and a new smaller window appears on the desktop computer screen containing the system meter report 2200 .
- the system meter report 2200 is preferably configured so that a user can resize the system meter report 2200 (with, for example, a computer mouse) creating a compact live web-meter that gives them constant monitoring of critical systems.
- the system meter report 2200 is also preferably configured so that selecting one of the report images ( 2210 , 2220 , 2230 , 2240 , 2250 ) re-opens the full-sized visitor monitor report 1900 .
- the system meter report 2200 preferably displays graphs of visitors 2210 , hits 2220 , pages 2230 , bytes sent 2240 , and money 2250 (if e-commerce is activated).
- ROIR Return On Investment Reporting
- the key to this technology is the present invention's ability to correlate data in a Visitor-Centric way.
- the Visitor-Centric configuration of the present invention allows the system 100 to report on dollars spent in correlation with any visitor parameter.
- shopping carts allow the end-user to add products to their virtual shopping basket, change quantities and check out, similar to a normal shopping experience.
- shopping cart products such as Miva's MerchantTM and Mercantec's SoftcartTM.
- the shopping cart software keeps track of each visitor shopping session. As products are added to an individual's shopping cart, the software updates the visitor's specific information. When the visitor decides to check out and purchase the products, the shopping cart provides the necessary shipping and billing forms and can process the transaction.
- the internet traffic monitoring and analysis system and method of the present invention utilizes the e-commerce log files 580 produced by the shopping carts to perform the e-commerce data correlation.
- the log file formats used by different shopping carts can vary.
- a preferred e-commerce log file format for use with the internet traffic monitoring and analysis system and method of the present invention is described below.
- the e-commerce log file format is preferably a tab-separated, multiline format.
- the transaction preferably begins with the exclamation mark (!) character (which is thusly prohibited from the rest of the data).
- the first line of the e-commerce log file preferably contains the geographic and overall information on the e-commerce transaction. Subsequent lines preferably contain details on individual products.
- the preferred basic format of the e-commerce log file 580 is as follows:
- Blank fields preferably contain a dash (-) character.
- the preferred format for the transaction line is as follows:
- % ⁇ TAX ⁇ is the amount of tax charged to the subtotal.
- % ⁇ SHIPPING ⁇ is the amount of shipping charges.
- % ⁇ BILL_CITY ⁇ is the billing city of the customer.
- % ⁇ BILL_STATE ⁇ is the billing state of the customer.
- % ⁇ BILL_ZIP ⁇ is the billing zip of the customer.
- % ⁇ BILL_CNTRY ⁇ is the billing country of the customer The preferred format for the product line is:
- % ⁇ ORDERID ⁇ is the order number.
- % ⁇ PRODUCTCODE ⁇ is the identifier of the product.
- % ⁇ PRODUCTNAME ⁇ is the name of the product.
- % ⁇ VARIATION ⁇ is an optional variation of the product for colors,sizes, etc.
- % ⁇ PRICE ⁇ is the unit price of the product (decimal only, no “$” signs).
- % ⁇ QUANTITY ⁇ is the quantity ordered of the product.
- % ⁇ UPSOLD ⁇ is a boolean (1
- An aspect of the present invention is the optional provision of a plug-in module for existing shopping carts that will allow the shopping cart to create the e-commerce file log 580 in the preferred format.
- the system 100 performs a special correlation between the e-commerce transaction data in the e-commerce log file 580 and normal website visitor traffic data in the standard log files 510 .
- each line of the log files 510 and 580 is processed and passes through the following steps.
- the log line 512 of the log file 510 or 580 is read into the database buffer 250 ; depending on the format of the log file, the log line 512 is processed and identified;
- the website identification module is used if multiple websites are logged into the same log file 510 or 580 ;
- the visitor identification module uses the IP number and a timestamp found in the log line 512 (or session id) to establish the unique identity of the visitor;
- the visitor ID is used to determine the record number in the visitor table 310 ′; and (6) the record is updated with the information from the log line 512 .
- FIG. 26 shows the visitor table 310 ′ in the database buffer 250 .
- the visitor table 310 ′ may include many fields, such as Hits 3000 , Bytes 3010 , Pages 3020 , Dollars 3030 , Referrals 3040 , Domain 3050 , Browser 3060 , etc.
- the visitor table 310 ′ is where the e-commerce correlation is done.
- the e-commerce log file 580 will update the visitor's Dollars field 3030 , which indicates money spent by the visitor.
- the remaining fields are updated using the standard log file 510 .
- the Dollars field 3030 is used to determine money spent on the website in terms of the other fields (parameters).
- the Referral field 3040 in the visitor table 310 ′ holds a record number to an entry in the referral data table 3070 .
- the referral in the referral data table 3070 indicates how the visitor found the website. For example, if the visitor came from the Yahoo.comTM website, then the referral field 3040 in the visitor table 310 ′ would hold the record number pertaining to the Yahoo.comTM entry in the referral data table 3070 . All visitors that came from Yahoo.comTM would have the same referral record number in the referral field 3040 .
- the Domain and browser fields 3050 and 3060 in the visitor table 310 ′ would hold record numbers to entries in the domain data table 3080 and browser data table 3090 .
- the other fields 3000 , 3010 and 3020 would likewise have data tables associated with them (not shown).
- a money amount can be associated with each entry in any of the data tables. If, for example, a money amount is associated with each entry in the referral data table 3070 , all shoppers that came from Yahoo.comTM (as an example) would be aggregated to produce a return-on-investment indicator.
- FIG. 27 shows an example of an ROIR e-commerce report generated by the system 100 of the present invention.
- the report 3100 uses the domain data table 3080 , shown in FIG. 22 , to produce a top-10 report of Internet Domains whose visitors spent the most money on the website represented by the report 3100 .
- Aol.comTM is the top domain in terms of money, spending approximately 46% of all money spent on the website.
- the total money spent by all the visitors for each domain is displayed when the “Dollars” tab 3110 is selected.
- the average amount of money spent by each visitor at each domain can also be displayed selecting the “Dollars/Visitor” tab 3120 .
- the average amount of money spent by each visitor is calculated by dividing the total amount of money spent at each domain by the number of visitors to the domain.
- E-commerce website owners can use these correlations to make valuable business decisions.
- the system and method of the present invention can correlate money to keywords, banner ads, search engines, referrals, domains; countries, browsers, platforms, or any other parameter of interest.
- the website operators can monitor the performance of search engine registrations, banner ad placements, regional ad campaigns, and more.
- All reports and interfaces are preferably web-based and viewed with a web browser. While not all possible reports are shown, the reports shown are representative of the types of reports and report configurations that are possible with the system and method of the present invention. Accordingly, it should be appreciated that the configuration and types of reports, as well as the configuration and types of user interfaces may vary from those shown while still falling within the scope of the present invention.
- FIG. 28 shows a preferred browser-based user interface 4000 .
- This is preferably the first user interface 4000 shown when the user first accesses the reporting interface of the system 100 .
- the user interface 4000 preferably contains areas 4020 and 4030 for displaying product and/or company logos.
- the user interface 4000 also includes a main reporting window 4100 for displaying a currently chosen report.
- the user interface 4000 preferably includes a navigation area 4040 that contains a collection of menus that group the available reports into different categories, preferably seven main categories, each with an associated link 4050 : Traffic; Pages; Referrals; Domains; Browsers; Tracking; and E-Commerce.
- a collection of links to specific reports 4060 related to a chosen category link 4050 is preferably displayed under a chosen category link 4050 .
- the currently chosen report link 4070 is preferably indicated by a change in color or shading. In the example shown in FIG. 28 , the currently chosen report link 4070 corresponds to the “Snapshot” report.
- the user interface 4000 preferably includes a “date range” functions area 4080 . Depending on the report chosen, this date range functions area 4080 allows the user to select the date range of the report being shown.
- the user interface also preferably includes a controls area 4090 that preferably includes preferences and report exporting features.
- the preferences function of the controls area 4090 allows the user to change report settings, such as the language that is used for display.
- the exporting function of the controls area 4090 allows the user to export the currently viewed data for use in other applications, such as Microsoft ExcelTM.
- the user interface 4000 also preferably includes a Help Information area 4130 , which gives a brief synopsis of the report being displayed and provides a link 4135 for more in-depth information.
- the Snapshot report 4010 shown in FIG. 28 is preferably a bar graph 4110 of the last 7 days of web site traffic in terms of various fields, preferably Visitors, Pageviews, Hits, or Bytes. There are preferably tab controls 4120 on the report 4010 that allow the user to select which field is displayed. The date of each day is preferably shown below the bars in the graph 4110 .
- FIG. 29 shows an example of an Hourly Graph report 4200 .
- the Hourly Graph report preferably shows traffic versus hour of the day in terms of various fields, preferably Visitors, Pageviews, Hits, or Bytes. There are preferably tab controls 4120 on the report 4200 that allow the user to select which field is displayed.
- the Hourly Graph report 4200 is preferably a bar graph indicating the 24 hours of the day from left to right. This report allows administrators to see when peak activity is expected and when to plan site maintenance and upgrades.
- the Summary report gives a text based summary of overall traffic to the site.
- the Daily Graph is similar to the Hourly Graph report 4200 , except that the traffic is displayed as a function of the day of the month.
- the Monthly Graph report provides traffic displayed versus month of the year, and the Top Servers report indicates which log files or servers are responsible for the most traffic in the cluster.
- FIG. 30 shows an example of a Top Pages report 4300 .
- the Top Pages report 4300 is one of the reports listed under the Pages menu 4310 .
- the Top Pages report 4300 preferably indicates a top-ten type list, ranking which pages in the website are the most visited.
- the tabs 4120 are preferably used to view the report 4300 in terms of either Pageviews or Bytes transferred.
- Next and previous buttons 4320 are preferably provided that allow the user to scroll through the Top Pages Report 4300 .
- the number of entries shown are preferably adjusted with the #Shown menu 4330 .
- FIG. 31 shows an example of a Directory Tree Report 4400 .
- the Directory Tree Report 4400 is similar to the top pages report 4300 of FIG. 30 , except that the Directory Tree Report 4400 preferably includes links 4410 next to each entry that can be selected to open information below that entry. This allows for easy display and navigation of hierarchical type data, such as a directory structure.
- the directory tree report 4400 indicates which directories within the website architecture are being accessed the most. Under each directory, the end user can drill down to see the subdirectories or individual pages contained within the primary directory by selecting the links 4410 .
- the File Types report is a top-ten type report that indicates which file extensions or types are accessed the most. This allows the user to distinguish between HTML page, GIF images, etc.
- the Status/Errors report is a tree-type report that indicates status codes and error messages that occur during web content delivery.
- the Posted Forms report is a top-ten type report that indicates the forms that were submitted using the POST method as defined in the HTTP protocol.
- FIG. 32 shows an example of a Search Engine report 4500 from the Referrals menu 4510 of the navigation area 4040 .
- the Referrals menu 4510 provides reports related to how the visitor found a website.
- the Search Engines report 4500 contains a tree-type list of the most used search engines. Each search engine can then be expanded to see which keywords were used during those searches.
- Additional reports in the Referrals menu 4510 preferably include Top Referrals, Top Keywords, and the Referral Tree.
- the Top Referrals reports is a simple top-ten type list of the top referring URLs.
- the Keywords report indicates the top keywords used across all search engines.
- the Referral Tree report breaks down the Referral URLs by domain.
- FIG. 33 is an example of a Top Domains report 4600 , which indicates regional and network information about the visitors.
- the visitor's domain is determined by the IP address of the visitor.
- the domain is resolved using the Reverse DNS module 260 within the log engine 200 described previously.
- Additional reports under the Domains menu 4610 in the navigation area 4040 preferably include Domain Tree and Top countries.
- the Domain Tree report provides the different levels of domains. Primary domains such as .com and .edu are shown first. Preferably, these can be expanded to show detailed information within.
- the Top countries report expands and analyzes which countries people are coming from.
- FIG. 34 shows an example of a Browser Tree report 4700 , which is a tree-type report that ranks the most widely used browsers by visitor to the website. Browsers such as Internet ExplorerTM and NetscapeTM are reported upon as a whole and by version. Each primary browser can be expanded to see the breakdown by version.
- Browsers such as Internet ExplorerTM and NetscapeTM are reported upon as a whole and by version. Each primary browser can be expanded to see the breakdown by version.
- Additional reports in the Browsers menu 4710 of the navigation area 4040 preferably include Platform Tree and Top Combos.
- the Platform Tree report indicates the operating system of the visitor. It is a tree-type report that can be expanded to show the versions under each platform.
- the Top Combos report ranks the correlation between browser and platform.
- FIG. 35 shows an example of a Top Entrances report 4800 .
- the Top Entrances report 4800 indicates the starting point of visitors in the website. Additional reports in the Tracking section 4810 preferably include Top Exits, Click Through, Depth of Visit, Length of Visit, and Usernames.
- the Top Exits report provides a list of the last page visitors looked at before leaving the site.
- the Click Through report indicates the click percentage from any one page to another.
- the Depth of visit report provides a histogram of the number of pages viewed by visitors.
- the Length of Visit report provides a histogram of the time spent on the site by visitors.
- the Usernames report analyzes the usage of password protected areas of a website by listing the usernames that were used to login to the those sections.
- FIG. 36 shows an example of a Top Products report 4900 , which is part of the E-Commerce menu 4910 in the navigation area 4040 .
- the Top Products report 4900 indicates the Top Products purchased from the site by revenue.
- Additional reports in the E-Commerce menu 4910 preferably include Totals, Product Tree, Regions, and Top Stores.
- the Totals report gives a summary of overall e-commerce activity.
- the Product Tree report groups products by category.
- the Regions report indicates the regional location of shoppers including cities, states and countries. If multiple store fronts are used by the same shopping system, the Top Stores report can breakdown revenue by storefront.
- the system and method of the present invention can be configured in many different ways. From single server configurations to complex load balancing systems, the system and method of the present invention is flexible in its integration abilities. While it is difficult to catalog every possible architecture, several possible configurations are described below.
- the system and method of the present invention can be implemented directly on the web, server 500 that produces the log files ( 510 , 580 ), or on a separate dedicated computer. If the system 100 is implemented directly on the web server 500 , it can then use the web server 500 for the reporting web server 520 . If the system 100 is implemented on a dedicated box, then a web server 520 will need to be configured on the dedicated computer in order to service the report requests.
- Access to log files is slightly more complicated on a dedicated computer. If the system 100 is implemented on a dedicated computer, then the log files ( 510 , 580 ) from the web server 500 will need to be accessible to the dedicated computer by using FTP, NFS, or some other suitable disk access method. Real-time processing of log files requires writing permission to the log files ( 510 , 580 ) which may require an extra configuration step if using a dedicated computer.
- the system 100 can work just as well directly on the web server 500 or on a dedicated computer.
- the system and method of the present invention can handle multiple websites.
- a unique reporting directory for data storage can be configured for each of the websites.
- the system 100 will link the individual report directories back to the main installation, so that there is only one copy of the templates and icons. Users will need internet access to the reporting directories.
- the web server 520 configuration should be similar to the system 100 configuration.
- a typical installation will use a subdirectory within each website's document root to store and access the reports.
- the integration preferably provides a unique web accessible directory for each website configuration.
- Web servers 500 can be configured to create unique log files ( 510 , 580 ) for each website in the web server's configuration, or a single log file ( 510 , 580 ) for all websites in the configuration.
- the system of the present invention can be configured to work with either of these architectures. If each website has its own unique log file, then the log files are preferably entered into the system's 100 configuration, so that each website has its own area in the configuration. The system 100 will process the logs one at a time treating each website independently.
- the log file ( 510 , 580 ) preferably contains some website identification marker in order for the system 100 to be able to sort and process the log file 510 .
- the website identification module 220 is designed to capture some parameter within the log file, in order to determine which hits go with which websites. This type of integration can automatically detect new websites as they are added to the web server 500 without modifying the configuration of the system 100 .
- the system and method of the present invention can be configured for systems that reside on one web server 500 or on multiple web servers 500 .
- Multiple web servers 500 are often used for load-balancing, redundancy, and functional serving.
- Multiple web servers 500 will each have their own set of logs 510 .
- the system and method of the present invention can automatically correlate the visitor centric data from multiple logs ( 510 , 580 ), as described previously. By simply entering the multiple logs in the configuration, the system 100 will process the multiple logs.
- the system and method of the present invention can include e-commerce reporting functionality, and can be used in conjunction with shopping cart software.
- the e-commerce log files 580 are handled similarly to the multi-log architecture discussed above.
- the e-commerce logs 580 are simply treated as multiple logs. Additional entries will need to be made in the configuration.
- the shopping cart software is preferably configured to create the preferred log file format described above.
- hosting providers are creating centralized web-based control panels that contain links to all of the tools and systems available to the hosting clients.
- Hosting clients log into the control panel once and are provided with customized information and interaction, such as accessing their unique e-mail account, uploading files to their unique website, and viewing the reports created by the system of the present invention.
- Stand-alone systems will have unique reporting directories for each website. Thus, accessing the reporting area is simple, as each reporting area will have a unique URL. Protecting report access can be accomplished through the web server 520 itself, and does not require integration with the system 100 .
- the system and method of the present invention is preferably sensitive to session controlling technology.
- the session parser module 1420 has the ability to detect custom variables and control report delivery from a central location.
- the various components of the present invention are preferably implemented on internet (e.g., web) servers, which may be or include, for instance, a work station running the Microsoft WindowsTM NTTM, WindowsTM 2000, UNIX, LINUX, XENIX, IBM, AIX, Hewlett-Packard UXTM, NovelTM, Sun Micro Systems SolarisTM, OS/2TM, BeOSTM, Mach, Apache Open StepTM, or other operating system or platform.
- internet e.g., web servers
- a work station running the Microsoft WindowsTM NTTM, WindowsTM 2000, UNIX, LINUX, XENIX, IBM, AIX, Hewlett-Packard UXTM, NovelTM, Sun Micro Systems SolarisTM, OS/2TM, BeOSTM, Mach, Apache Open StepTM, or other operating system or platform.
- the various components of the present invention could also be implemented on a programmed general purpose computer, a special purpose computer, a programmed microprocessor or microcontroller and peripheral integrated circuit elements, an ASIC or other integrated circuit, a hardwired electronic or logic circuit such as a discrete element circuit, a programmable logic device such as a FPGA, PLD, PLA, or PAL, or the like.
- any device on which a finite state machine capable of implementing the modules and control routines discussed above can be used to implement the present invention.
Abstract
Description
Visitor Identification Module (230)
!transfield1 transfield2.... | ||
productfield1 productfield2... | ||
productfield1 productfield2... | ||
. | ||
. | ||
. | ||
!transfield transfield2... | ||
etc. | ||
Blank fields preferably contain a dash (-) character. The preferred format for the transaction line is as follows:
\!%{ORDERID}%h%{STORE}%{SESSIONID}%t%{TOTAL}% |
{TAX}%{SHIPPING}%{BILL_CITY}%{BILL_STATE} |
%{BILL_ZIP}%{BILL_CNTRY} |
where %{ORDERID} | is the order number. |
%h | is the remote host (see apache.org). |
%{STORE} | is the name/id of the storefront. |
%{SESSIONID} | is the unique session identifier of |
the customer. | |
%t | is time in the common log format |
%{TOTAL} | is the transaction total including |
tax and shipping. (decimal only, no “$” | |
signs). | |
%{TAX} | is the amount of tax charged to the subtotal. |
%{SHIPPING} | is the amount of shipping charges. |
%{BILL_CITY} | is the billing city of the customer. |
%{BILL_STATE} | is the billing state of the customer. |
%{BILL_ZIP} | is the billing zip of the customer. |
%{BILL_CNTRY} | is the billing country of the customer |
The preferred format for the product line is:
%{ORDERID}%{PRODUCTCODE}%{PRODUCTNAME}% |
{VARIATION}%{PRICE}%{QUANTITY}%{UPSOLD} |
where %{ORDERID} | is the order number. |
%{PRODUCTCODE} | is the identifier of the product. |
%{PRODUCTNAME} | is the name of the product. |
%{VARIATION} | is an optional variation of the product |
for colors,sizes, etc. | |
%{PRICE} | is the unit price of the product |
(decimal only, no “$” signs). | |
%{QUANTITY} | is the quantity ordered of the product. |
%{UPSOLD} | is a boolean (1|0) if the product was on |
sale. | |
Claims (15)
Priority Applications (1)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US13/966,433 US9185016B2 (en) | 1999-10-04 | 2013-08-14 | System and method for monitoring and analyzing internet traffic |
Applications Claiming Priority (6)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US15764999P | 1999-10-04 | 1999-10-04 | |
US09/679,297 US6792458B1 (en) | 1999-10-04 | 2000-10-04 | System and method for monitoring and analyzing internet traffic |
US10/799,738 US7610289B2 (en) | 2000-10-04 | 2004-03-15 | System and method for monitoring and analyzing internet traffic |
US12/606,683 US8032564B2 (en) | 1999-10-04 | 2009-10-27 | System and method for monitoring and analyzing internet traffic |
US13/233,698 US8554804B2 (en) | 1999-10-04 | 2011-09-15 | System and method for monitoring and analyzing internet traffic |
US13/966,433 US9185016B2 (en) | 1999-10-04 | 2013-08-14 | System and method for monitoring and analyzing internet traffic |
Related Parent Applications (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
US13/233,698 Continuation US8554804B2 (en) | 1999-10-04 | 2011-09-15 | System and method for monitoring and analyzing internet traffic |
Publications (2)
Publication Number | Publication Date |
---|---|
US20140025814A1 US20140025814A1 (en) | 2014-01-23 |
US9185016B2 true US9185016B2 (en) | 2015-11-10 |
Family
ID=34795908
Family Applications (4)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
US10/799,738 Expired - Lifetime US7610289B2 (en) | 1999-10-04 | 2004-03-15 | System and method for monitoring and analyzing internet traffic |
US12/606,683 Expired - Fee Related US8032564B2 (en) | 1999-10-04 | 2009-10-27 | System and method for monitoring and analyzing internet traffic |
US13/233,698 Expired - Fee Related US8554804B2 (en) | 1999-10-04 | 2011-09-15 | System and method for monitoring and analyzing internet traffic |
US13/966,433 Expired - Fee Related US9185016B2 (en) | 1999-10-04 | 2013-08-14 | System and method for monitoring and analyzing internet traffic |
Family Applications Before (3)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
US10/799,738 Expired - Lifetime US7610289B2 (en) | 1999-10-04 | 2004-03-15 | System and method for monitoring and analyzing internet traffic |
US12/606,683 Expired - Fee Related US8032564B2 (en) | 1999-10-04 | 2009-10-27 | System and method for monitoring and analyzing internet traffic |
US13/233,698 Expired - Fee Related US8554804B2 (en) | 1999-10-04 | 2011-09-15 | System and method for monitoring and analyzing internet traffic |
Country Status (1)
Country | Link |
---|---|
US (4) | US7610289B2 (en) |
Cited By (5)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US9357366B2 (en) | 2014-09-12 | 2016-05-31 | Observepoint, Inc. | Auditing of mobile applications |
US9412115B2 (en) | 2013-03-14 | 2016-08-09 | Observepoint, Inc. | Configuring tags to monitor other webpage tags in a tag management system |
US9418170B2 (en) | 2013-03-14 | 2016-08-16 | Observepoint, Inc. | Creating rules for use in third-party tag management systems |
US9842133B2 (en) | 2014-09-12 | 2017-12-12 | Observepoint, Inc. | Auditing of web-based video |
US10656907B2 (en) | 2015-11-03 | 2020-05-19 | Observepoint Inc. | Translation of natural language into user interface actions |
Families Citing this family (163)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20030120560A1 (en) * | 2001-12-20 | 2003-06-26 | John Almeida | Method for creating and maintaning worldwide e-commerce |
US8375286B2 (en) * | 2002-09-19 | 2013-02-12 | Ancestry.com Operations, Inc. | Systems and methods for displaying statistical information on a web page |
US7617531B1 (en) * | 2004-02-18 | 2009-11-10 | Citrix Systems, Inc. | Inferencing data types of message components |
US8782654B2 (en) | 2004-03-13 | 2014-07-15 | Adaptive Computing Enterprises, Inc. | Co-allocating a reservation spanning different compute resources types |
US7490325B2 (en) | 2004-03-13 | 2009-02-10 | Cluster Resources, Inc. | System and method for providing intelligent pre-staging of data in a compute environment |
US20070266388A1 (en) | 2004-06-18 | 2007-11-15 | Cluster Resources, Inc. | System and method for providing advanced reservations in a compute environment |
US7395260B2 (en) * | 2004-08-04 | 2008-07-01 | International Business Machines Corporation | Method for providing graphical representations of search results in multiple related histograms |
US8176490B1 (en) | 2004-08-20 | 2012-05-08 | Adaptive Computing Enterprises, Inc. | System and method of interfacing a workload manager and scheduler with an identity manager |
US8271980B2 (en) | 2004-11-08 | 2012-09-18 | Adaptive Computing Enterprises, Inc. | System and method of providing system jobs within a compute environment |
US8005795B2 (en) * | 2005-03-04 | 2011-08-23 | Emc Corporation | Techniques for recording file operations and consistency points for producing a consistent copy |
US8930536B2 (en) | 2005-03-16 | 2015-01-06 | Adaptive Computing Enterprises, Inc. | Virtual private cluster |
US9075657B2 (en) | 2005-04-07 | 2015-07-07 | Adaptive Computing Enterprises, Inc. | On-demand access to compute resources |
US8863143B2 (en) | 2006-03-16 | 2014-10-14 | Adaptive Computing Enterprises, Inc. | System and method for managing a hybrid compute environment |
US9015324B2 (en) | 2005-03-16 | 2015-04-21 | Adaptive Computing Enterprises, Inc. | System and method of brokering cloud computing resources |
US9231886B2 (en) | 2005-03-16 | 2016-01-05 | Adaptive Computing Enterprises, Inc. | Simple integration of an on-demand compute environment |
US8782120B2 (en) * | 2005-04-07 | 2014-07-15 | Adaptive Computing Enterprises, Inc. | Elastic management of compute resources between a web server and an on-demand compute environment |
US9692725B2 (en) | 2005-05-26 | 2017-06-27 | Citrix Systems, Inc. | Systems and methods for using an HTTP-aware client agent |
US8943304B2 (en) | 2006-08-03 | 2015-01-27 | Citrix Systems, Inc. | Systems and methods for using an HTTP-aware client agent |
US7756826B2 (en) * | 2006-06-30 | 2010-07-13 | Citrix Systems, Inc. | Method and systems for efficient delivery of previously stored content |
US9621666B2 (en) | 2005-05-26 | 2017-04-11 | Citrix Systems, Inc. | Systems and methods for enhanced delta compression |
US9407608B2 (en) | 2005-05-26 | 2016-08-02 | Citrix Systems, Inc. | Systems and methods for enhanced client side policy |
US9311398B2 (en) * | 2005-11-15 | 2016-04-12 | Ebay Inc. | Method and system to process navigation information |
US8484082B2 (en) * | 2006-02-17 | 2013-07-09 | Jonathan C. Coon | Systems and methods for electronic marketing |
US7870024B2 (en) * | 2006-02-17 | 2011-01-11 | Coon Jonathan C | Systems and methods for electronic marketing |
US8645206B2 (en) * | 2006-02-17 | 2014-02-04 | Jonathan C. Coon | Systems and methods for electronic marketing |
US7818201B2 (en) * | 2006-03-31 | 2010-10-19 | Vology, Inc. | Lead referral system |
US20070244739A1 (en) * | 2006-04-13 | 2007-10-18 | Yahoo! Inc. | Techniques for measuring user engagement |
US8131703B2 (en) * | 2006-04-14 | 2012-03-06 | Adobe Systems Incorporated | Analytics based generation of ordered lists, search engine feed data, and sitemaps |
US7805675B2 (en) * | 2006-05-19 | 2010-09-28 | International Business Machines Corporation | Methods, systems, and computer program products for recreating events occurring within a web application |
US20080120165A1 (en) * | 2006-11-20 | 2008-05-22 | Google Inc. | Large-Scale Aggregating and Reporting of Ad Data |
US10235677B1 (en) | 2006-12-15 | 2019-03-19 | Comscore, Inc. | Determination and application of click quality |
US10402832B2 (en) * | 2006-12-15 | 2019-09-03 | Comscore, Inc. | Network interaction correlation |
US8990379B2 (en) | 2006-12-15 | 2015-03-24 | Comscore, Inc. | Network interaction monitoring appliance |
US20090077156A1 (en) * | 2007-09-14 | 2009-03-19 | Srinivas Raghav Kashyap | Efficient constraint monitoring using adaptive thresholds |
JP4962782B2 (en) * | 2007-08-13 | 2012-06-27 | 富士通株式会社 | User state estimation system, user state estimation method, and user state estimation program |
EP2198398A4 (en) * | 2007-08-28 | 2017-08-30 | Sugarcrm Inc. | Crm system and method having drilldowns, acls, shared folders, a tracker and a module builder |
US8041773B2 (en) | 2007-09-24 | 2011-10-18 | The Research Foundation Of State University Of New York | Automatic clustering for self-organizing grids |
WO2009070748A1 (en) | 2007-11-27 | 2009-06-04 | Umber Systems | System for collecting and analyzing data on application-level activity on a mobile data network |
US8775391B2 (en) * | 2008-03-26 | 2014-07-08 | Zettics, Inc. | System and method for sharing anonymous user profiles with a third party |
US9336527B2 (en) * | 2008-02-20 | 2016-05-10 | Purplecomm, Inc. | Collaborative website presence |
US8539057B2 (en) * | 2008-02-20 | 2013-09-17 | Purplecomm, Inc. | Website presence |
US20090210352A1 (en) * | 2008-02-20 | 2009-08-20 | Purplecomm, Inc., A Delaware Corporation | Website presence marketplace |
WO2009146178A1 (en) * | 2008-04-15 | 2009-12-03 | President And Fellows Of Harvard College | Angiogenin and amyotrophic lateral sclerosis |
CN102016840A (en) * | 2008-04-24 | 2011-04-13 | 摩维迪欧控股有限公司 | System and method for tracking usage |
US8090679B2 (en) * | 2008-06-30 | 2012-01-03 | Microsoft Corporation | Method for measuring web site performance |
US9372900B2 (en) * | 2008-08-08 | 2016-06-21 | Adobe Systems Incorporated | Method and system for processing measurement data for website statistics |
US8549163B2 (en) * | 2008-09-18 | 2013-10-01 | Jonathan M. Urdan | Passive parameter based demographics generation |
US20090282028A1 (en) * | 2008-09-23 | 2009-11-12 | Michael Subotin | User Interface and Method for Web Browsing based on Topical Relatedness of Domain Names |
US20100106764A1 (en) * | 2008-10-29 | 2010-04-29 | The Go Daddy Group, Inc. | Datacenter hosting multiple online data management solutions |
US20100198742A1 (en) * | 2009-02-03 | 2010-08-05 | Purplecomm, Inc. | Online Social Encountering |
CN101482888A (en) * | 2009-02-23 | 2009-07-15 | 阿里巴巴集团控股有限公司 | Website caller value computing method and system |
CN101604435A (en) * | 2009-07-14 | 2009-12-16 | 阿里巴巴集团控股有限公司 | A kind of method of monitoring website visitor values and device |
US8977705B2 (en) * | 2009-07-27 | 2015-03-10 | Verisign, Inc. | Method and system for data logging and analysis |
US8671089B2 (en) * | 2009-10-06 | 2014-03-11 | Brightedge Technologies, Inc. | Correlating web page visits and conversions with external references |
US8554699B2 (en) * | 2009-10-20 | 2013-10-08 | Google Inc. | Method and system for detecting anomalies in time series data |
US11720290B2 (en) | 2009-10-30 | 2023-08-08 | Iii Holdings 2, Llc | Memcached server functionality in a cluster of data processing nodes |
US10877695B2 (en) | 2009-10-30 | 2020-12-29 | Iii Holdings 2, Llc | Memcached server functionality in a cluster of data processing nodes |
AU2010349015B2 (en) | 2010-03-23 | 2015-07-16 | Amara, Ashok Babu | Conversion path performance measures and reports |
US9642536B2 (en) | 2010-06-07 | 2017-05-09 | Affectiva, Inc. | Mental state analysis using heart rate collection based on video imagery |
US10143414B2 (en) | 2010-06-07 | 2018-12-04 | Affectiva, Inc. | Sporadic collection with mobile affect data |
US11430561B2 (en) | 2010-06-07 | 2022-08-30 | Affectiva, Inc. | Remote computing analysis for cognitive state data metrics |
US10843078B2 (en) | 2010-06-07 | 2020-11-24 | Affectiva, Inc. | Affect usage within a gaming context |
US10482333B1 (en) | 2017-01-04 | 2019-11-19 | Affectiva, Inc. | Mental state analysis using blink rate within vehicles |
US10922567B2 (en) | 2010-06-07 | 2021-02-16 | Affectiva, Inc. | Cognitive state based vehicle manipulation using near-infrared image processing |
US11056225B2 (en) | 2010-06-07 | 2021-07-06 | Affectiva, Inc. | Analytics for livestreaming based on image analysis within a shared digital environment |
US10592757B2 (en) | 2010-06-07 | 2020-03-17 | Affectiva, Inc. | Vehicular cognitive data collection using multiple devices |
US9247903B2 (en) | 2010-06-07 | 2016-02-02 | Affectiva, Inc. | Using affect within a gaming context |
US10474875B2 (en) | 2010-06-07 | 2019-11-12 | Affectiva, Inc. | Image analysis using a semiconductor processor for facial evaluation |
US10779761B2 (en) | 2010-06-07 | 2020-09-22 | Affectiva, Inc. | Sporadic collection of affect data within a vehicle |
US11704574B2 (en) | 2010-06-07 | 2023-07-18 | Affectiva, Inc. | Multimodal machine learning for vehicle manipulation |
US9934425B2 (en) | 2010-06-07 | 2018-04-03 | Affectiva, Inc. | Collection of affect data from multiple mobile devices |
US11700420B2 (en) | 2010-06-07 | 2023-07-11 | Affectiva, Inc. | Media manipulation using cognitive state metric analysis |
US10111611B2 (en) | 2010-06-07 | 2018-10-30 | Affectiva, Inc. | Personal emotional profile generation |
US11935281B2 (en) | 2010-06-07 | 2024-03-19 | Affectiva, Inc. | Vehicular in-cabin facial tracking using machine learning |
US10289898B2 (en) | 2010-06-07 | 2019-05-14 | Affectiva, Inc. | Video recommendation via affect |
US11410438B2 (en) | 2010-06-07 | 2022-08-09 | Affectiva, Inc. | Image analysis using a semiconductor processor for facial evaluation in vehicles |
US11017250B2 (en) | 2010-06-07 | 2021-05-25 | Affectiva, Inc. | Vehicle manipulation using convolutional image processing |
US10897650B2 (en) | 2010-06-07 | 2021-01-19 | Affectiva, Inc. | Vehicle content recommendation using cognitive states |
US11657288B2 (en) | 2010-06-07 | 2023-05-23 | Affectiva, Inc. | Convolutional computing using multilayered analysis engine |
US10108852B2 (en) | 2010-06-07 | 2018-10-23 | Affectiva, Inc. | Facial analysis to detect asymmetric expressions |
US10911829B2 (en) | 2010-06-07 | 2021-02-02 | Affectiva, Inc. | Vehicle video recommendation via affect |
US11465640B2 (en) | 2010-06-07 | 2022-10-11 | Affectiva, Inc. | Directed control transfer for autonomous vehicles |
US10627817B2 (en) | 2010-06-07 | 2020-04-21 | Affectiva, Inc. | Vehicle manipulation using occupant image analysis |
US9204836B2 (en) | 2010-06-07 | 2015-12-08 | Affectiva, Inc. | Sporadic collection of mobile affect data |
US11073899B2 (en) | 2010-06-07 | 2021-07-27 | Affectiva, Inc. | Multidevice multimodal emotion services monitoring |
US11151610B2 (en) | 2010-06-07 | 2021-10-19 | Affectiva, Inc. | Autonomous vehicle control using heart rate collection based on video imagery |
US9503786B2 (en) | 2010-06-07 | 2016-11-22 | Affectiva, Inc. | Video recommendation using affect |
US9646046B2 (en) | 2010-06-07 | 2017-05-09 | Affectiva, Inc. | Mental state data tagging for data collected from multiple sources |
US11587357B2 (en) | 2010-06-07 | 2023-02-21 | Affectiva, Inc. | Vehicular cognitive data collection with multiple devices |
US11067405B2 (en) | 2010-06-07 | 2021-07-20 | Affectiva, Inc. | Cognitive state vehicle navigation based on image processing |
US11511757B2 (en) | 2010-06-07 | 2022-11-29 | Affectiva, Inc. | Vehicle manipulation with crowdsourcing |
US10799168B2 (en) | 2010-06-07 | 2020-10-13 | Affectiva, Inc. | Individual data sharing across a social network |
US10628741B2 (en) | 2010-06-07 | 2020-04-21 | Affectiva, Inc. | Multimodal machine learning for emotion metrics |
US11292477B2 (en) | 2010-06-07 | 2022-04-05 | Affectiva, Inc. | Vehicle manipulation using cognitive state engineering |
US9959549B2 (en) | 2010-06-07 | 2018-05-01 | Affectiva, Inc. | Mental state analysis for norm generation |
US10204625B2 (en) | 2010-06-07 | 2019-02-12 | Affectiva, Inc. | Audio analysis learning using video data |
US11823055B2 (en) | 2019-03-31 | 2023-11-21 | Affectiva, Inc. | Vehicular in-cabin sensing using machine learning |
US10401860B2 (en) | 2010-06-07 | 2019-09-03 | Affectiva, Inc. | Image analysis for two-sided data hub |
US10869626B2 (en) | 2010-06-07 | 2020-12-22 | Affectiva, Inc. | Image analysis for emotional metric evaluation |
US11318949B2 (en) | 2010-06-07 | 2022-05-03 | Affectiva, Inc. | In-vehicle drowsiness analysis using blink rate |
US11232290B2 (en) | 2010-06-07 | 2022-01-25 | Affectiva, Inc. | Image analysis using sub-sectional component evaluation to augment classifier usage |
US11887352B2 (en) | 2010-06-07 | 2024-01-30 | Affectiva, Inc. | Live streaming analytics within a shared digital environment |
US10517521B2 (en) | 2010-06-07 | 2019-12-31 | Affectiva, Inc. | Mental state mood analysis using heart rate collection based on video imagery |
US11430260B2 (en) | 2010-06-07 | 2022-08-30 | Affectiva, Inc. | Electronic display viewing verification |
US11484685B2 (en) | 2010-06-07 | 2022-11-01 | Affectiva, Inc. | Robotic control using profiles |
US10614289B2 (en) | 2010-06-07 | 2020-04-07 | Affectiva, Inc. | Facial tracking with classifiers |
US11393133B2 (en) | 2010-06-07 | 2022-07-19 | Affectiva, Inc. | Emoji manipulation using machine learning |
US10074024B2 (en) | 2010-06-07 | 2018-09-11 | Affectiva, Inc. | Mental state analysis using blink rate for vehicles |
US9723992B2 (en) | 2010-06-07 | 2017-08-08 | Affectiva, Inc. | Mental state analysis using blink rate |
US10796176B2 (en) | 2010-06-07 | 2020-10-06 | Affectiva, Inc. | Personal emotional profile generation for vehicle manipulation |
US9250759B1 (en) * | 2010-07-23 | 2016-02-02 | Amazon Technologies, Inc. | Visual representation of user-node interactions |
US8838784B1 (en) | 2010-08-04 | 2014-09-16 | Zettics, Inc. | Method and apparatus for privacy-safe actionable analytics on mobile data usage |
US9020922B2 (en) * | 2010-08-10 | 2015-04-28 | Brightedge Technologies, Inc. | Search engine optimization at scale |
US8521774B1 (en) | 2010-08-20 | 2013-08-27 | Google Inc. | Dynamically generating pre-aggregated datasets |
US8549138B2 (en) | 2010-10-01 | 2013-10-01 | Microsoft Corporation | Web test generation |
US9049229B2 (en) | 2010-10-28 | 2015-06-02 | Verisign, Inc. | Evaluation of DNS pre-registration data to predict future DNS traffic |
US9881257B2 (en) | 2010-12-29 | 2018-01-30 | Tickr, Inc. | Multi-dimensional visualization of temporal information |
US20120203592A1 (en) * | 2011-02-08 | 2012-08-09 | Balaji Ravindran | Methods, apparatus, and articles of manufacture to determine search engine market share |
BR112013021503A2 (en) | 2011-02-27 | 2018-06-12 | Affectiva Inc | computer-implemented method for affection-based recommendations; computer program product incorporated into a computer readable medium; computer system for affection-based recommendations; and computer-implemented method for affect-based classification |
US8898290B2 (en) * | 2011-05-11 | 2014-11-25 | Google Inc. | Personally identifiable information independent utilization of analytics data |
US8782162B1 (en) * | 2011-07-20 | 2014-07-15 | Google Inc. | System for merging and comparing real-time analytics data with conventional analytics data |
US8782166B1 (en) * | 2011-07-20 | 2014-07-15 | Google Inc. | System for generating a site pathing report based on real-time analytics data |
US20130060932A1 (en) * | 2011-09-06 | 2013-03-07 | Shachar Ofek | Discovering tiers within an application |
US9686152B2 (en) * | 2012-01-27 | 2017-06-20 | Microsoft Technology Licensing, Llc | Techniques for tracking resource usage statistics per transaction across multiple layers of protocols |
US9946746B2 (en) | 2012-05-02 | 2018-04-17 | Google Llc | Persist and process analytics data dimensions for server-side sessionization |
US9178771B2 (en) * | 2012-08-23 | 2015-11-03 | Hewlett-Packard Development Company, L.P. | Determining the type of a network tier |
US8990935B1 (en) | 2012-10-17 | 2015-03-24 | Google Inc. | Activity signatures and activity replay detection |
US8719462B1 (en) * | 2013-10-16 | 2014-05-06 | Google Inc. | Systems and methods for distributed log file processing |
US20150172625A1 (en) * | 2013-12-13 | 2015-06-18 | Philip S. Kossin | Transmission of uncompressed video for 3-d and multiview hdtv |
US9838512B2 (en) | 2014-10-30 | 2017-12-05 | Splunk Inc. | Protocol-based capture of network data using remote capture agents |
US10523521B2 (en) | 2014-04-15 | 2019-12-31 | Splunk Inc. | Managing ephemeral event streams generated from captured network data |
US10127273B2 (en) | 2014-04-15 | 2018-11-13 | Splunk Inc. | Distributed processing of network data using remote capture agents |
US11281643B2 (en) | 2014-04-15 | 2022-03-22 | Splunk Inc. | Generating event streams including aggregated values from monitored network data |
US10693742B2 (en) | 2014-04-15 | 2020-06-23 | Splunk Inc. | Inline visualizations of metrics related to captured network data |
US10360196B2 (en) | 2014-04-15 | 2019-07-23 | Splunk Inc. | Grouping and managing event streams generated from captured network data |
US11086897B2 (en) | 2014-04-15 | 2021-08-10 | Splunk Inc. | Linking event streams across applications of a data intake and query system |
US10700950B2 (en) | 2014-04-15 | 2020-06-30 | Splunk Inc. | Adjusting network data storage based on event stream statistics |
US10462004B2 (en) | 2014-04-15 | 2019-10-29 | Splunk Inc. | Visualizations of statistics associated with captured network data |
US9923767B2 (en) | 2014-04-15 | 2018-03-20 | Splunk Inc. | Dynamic configuration of remote capture agents for network data capture |
US10366101B2 (en) | 2014-04-15 | 2019-07-30 | Splunk Inc. | Bidirectional linking of ephemeral event streams to creators of the ephemeral event streams |
US9762443B2 (en) | 2014-04-15 | 2017-09-12 | Splunk Inc. | Transformation of network data at remote capture agents |
EP2933734A1 (en) * | 2014-04-17 | 2015-10-21 | OnPage.org GmbH | Method and system for the structural analysis of websites |
US10103961B2 (en) * | 2014-07-25 | 2018-10-16 | Teacher Insurance & Annuity Association of America | Collecting client-side application performance monitoring information |
US9906497B2 (en) | 2014-10-06 | 2018-02-27 | Cryptzone North America, Inc. | Multi-tunneling virtual network adapter |
US9148408B1 (en) | 2014-10-06 | 2015-09-29 | Cryptzone North America, Inc. | Systems and methods for protecting network devices |
US9596253B2 (en) | 2014-10-30 | 2017-03-14 | Splunk Inc. | Capture triggers for capturing network data |
US11768994B1 (en) * | 2014-12-16 | 2023-09-26 | EMC IP Holding Company LLC | Methods, systems, and computer readable mediums for generating a curated user interface (UI) marker |
US10334085B2 (en) | 2015-01-29 | 2019-06-25 | Splunk Inc. | Facilitating custom content extraction from network packets |
US9866519B2 (en) | 2015-10-16 | 2018-01-09 | Cryptzone North America, Inc. | Name resolving in segmented networks |
US9628444B1 (en) | 2016-02-08 | 2017-04-18 | Cryptzone North America, Inc. | Protecting network devices by a firewall |
US10412048B2 (en) | 2016-02-08 | 2019-09-10 | Cryptzone North America, Inc. | Protecting network devices by a firewall |
US20180077227A1 (en) * | 2016-08-24 | 2018-03-15 | Oleg Yeshaya RYABOY | High Volume Traffic Handling for Ordering High Demand Products |
US10922566B2 (en) | 2017-05-09 | 2021-02-16 | Affectiva, Inc. | Cognitive state evaluation for vehicle navigation |
US20190172458A1 (en) | 2017-12-01 | 2019-06-06 | Affectiva, Inc. | Speech analysis for cross-language mental state identification |
US11328026B2 (en) | 2018-06-13 | 2022-05-10 | The Globe and Mall Inc. | Multi-source data analytics system, data manager and related methods |
US11290432B2 (en) * | 2018-12-04 | 2022-03-29 | International Business Machines Corporation | Secure data transfer architecture for benchmarking |
US11887383B2 (en) | 2019-03-31 | 2024-01-30 | Affectiva, Inc. | Vehicle interior object management |
US11769056B2 (en) | 2019-12-30 | 2023-09-26 | Affectiva, Inc. | Synthetic data for neural network training using vectors |
US20210313032A1 (en) * | 2020-04-07 | 2021-10-07 | Gemini Health LLC | Systems and methods for dynamic interactive drug savings reports services |
CN112291089A (en) * | 2020-10-23 | 2021-01-29 | 全知科技(杭州)有限责任公司 | Application system identification and definition method based on flow |
US11347579B1 (en) * | 2021-04-29 | 2022-05-31 | Bank Of America Corporation | Instinctive slither application assessment engine |
CN113515425A (en) * | 2021-05-19 | 2021-10-19 | 湖南快乐阳光互动娱乐传媒有限公司 | Method and device for dynamically reporting data |
CN115277468B (en) * | 2022-06-09 | 2024-01-16 | 药小鹿(成都)数字营销策划有限公司 | Method for carrying out actual flow statistics on each secondary domain name of website based on Nginx |
Citations (38)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US5511190A (en) | 1995-01-20 | 1996-04-23 | Tandem Computers, Inc. | Hash-based database grouping system and method |
US5675510A (en) | 1995-06-07 | 1997-10-07 | Pc Meter L.P. | Computer use meter and analyzer |
US5689416A (en) | 1994-07-11 | 1997-11-18 | Fujitsu Limited | Computer system monitoring apparatus |
US5727129A (en) | 1996-06-04 | 1998-03-10 | International Business Machines Corporation | Network system for profiling and actively facilitating user activities |
US5732218A (en) | 1997-01-02 | 1998-03-24 | Lucent Technologies Inc. | Management-data-gathering system for gathering on clients and servers data regarding interactions between the servers, the clients, and users of the clients during real use of a network of clients and servers |
US5787253A (en) | 1996-05-28 | 1998-07-28 | The Ag Group | Apparatus and method of analyzing internet activity |
US5796952A (en) | 1997-03-21 | 1998-08-18 | Dot Com Development, Inc. | Method and apparatus for tracking client interaction with a network resource and creating client profiles and resource database |
US5878223A (en) | 1997-05-07 | 1999-03-02 | International Business Machines Corporation | System and method for predictive caching of information pages |
US5951642A (en) | 1997-08-06 | 1999-09-14 | Hypertak, Inc. | System for collecting detailed internet information on the basis of the condition of activities of information viewers viewing information of service providers |
US6018713A (en) | 1997-04-09 | 2000-01-25 | Coli; Robert D. | Integrated system and method for ordering and cumulative results reporting of medical tests |
US6112238A (en) | 1997-02-14 | 2000-08-29 | Webtrends Corporation | System and method for analyzing remote traffic data in a distributed computing environment |
US6122639A (en) | 1997-12-23 | 2000-09-19 | Cisco Technology, Inc. | Network device information collection and change detection |
US6199160B1 (en) * | 1993-09-14 | 2001-03-06 | International Business Machines Corporation | Computer system and method for performing multiple tasks |
US6233600B1 (en) | 1997-07-15 | 2001-05-15 | Eroom Technology, Inc. | Method and system for providing a networked collaborative work environment |
US6249813B1 (en) | 1998-08-06 | 2001-06-19 | Mci Communications Corporation | Automated method of and apparatus for internet address management |
US6256671B1 (en) | 1998-06-24 | 2001-07-03 | Nortel Networks Limited | Method and apparatus for providing network access control using a domain name system |
US6289368B1 (en) * | 1995-12-27 | 2001-09-11 | First Data Corporation | Method and apparatus for indicating the status of one or more computer processes |
US6317787B1 (en) | 1998-08-11 | 2001-11-13 | Webtrends Corporation | System and method for analyzing web-server log files |
US6332158B1 (en) | 1998-12-03 | 2001-12-18 | Chris Risley | Domain name system lookup allowing intelligent correction of searches and presentation of auxiliary information |
US6360246B1 (en) | 1998-11-13 | 2002-03-19 | The Nasdaq Stock Market, Inc. | Report generation architecture for remotely generated data |
US6377993B1 (en) | 1997-09-26 | 2002-04-23 | Mci Worldcom, Inc. | Integrated proxy interface for web based data management reports |
US6411966B1 (en) | 1998-09-21 | 2002-06-25 | Microsoft Corporation | Method and computer readable medium for DNS dynamic update to minimize client-server and incremental zone transfer traffic |
US6427170B1 (en) | 1998-12-08 | 2002-07-30 | Cisco Technology, Inc. | Integrated IP address management |
US6430623B1 (en) | 1998-01-29 | 2002-08-06 | Ip Dynamics, Inc. | Domain name routing |
US6442602B1 (en) | 1999-06-14 | 2002-08-27 | Web And Net Computing | System and method for dynamic creation and management of virtual subdomain addresses |
US6449657B2 (en) | 1999-08-06 | 2002-09-10 | Namezero.Com, Inc. | Internet hosting system |
US6480891B1 (en) | 1999-01-04 | 2002-11-12 | 3Com Corporation | Embedded code memory size reduction in asynchronous mode transfer devices |
US6515968B1 (en) * | 1995-03-17 | 2003-02-04 | Worldcom, Inc. | Integrated interface for real time web based viewing of telecommunications network call traffic |
US20030058277A1 (en) * | 1999-08-31 | 2003-03-27 | Bowman-Amuah Michel K. | A view configurer in a presentation services patterns enviroment |
US6560634B1 (en) | 1997-08-15 | 2003-05-06 | Verisign, Inc. | Method of determining unavailability of an internet domain name |
US20030220998A1 (en) * | 1999-08-27 | 2003-11-27 | Raymond Byars Jennings | Server site restructuring |
US6691259B1 (en) | 2000-09-19 | 2004-02-10 | Unisys Corporation | Terminal server data file extraction and analysis application |
US6697948B1 (en) * | 1999-05-05 | 2004-02-24 | Michael O. Rabin | Methods and apparatus for protecting information |
US6701323B2 (en) | 2000-04-18 | 2004-03-02 | Hitachi, Ltd. | Object management system and method for distributed object system |
US6768994B1 (en) | 2001-02-23 | 2004-07-27 | Trimble Navigation Limited | Web based data mining and location data reporting and system |
US6789115B1 (en) | 1999-07-09 | 2004-09-07 | Merrill Lynch & Company | System for collecting, analyzing, and reporting high volume multi-web server usage |
US6839680B1 (en) * | 1999-09-30 | 2005-01-04 | Fujitsu Limited | Internet profiling |
US7093194B2 (en) | 2000-10-27 | 2006-08-15 | Swiftknowledge, Inc. | Data access system |
-
2004
- 2004-03-15 US US10/799,738 patent/US7610289B2/en not_active Expired - Lifetime
-
2009
- 2009-10-27 US US12/606,683 patent/US8032564B2/en not_active Expired - Fee Related
-
2011
- 2011-09-15 US US13/233,698 patent/US8554804B2/en not_active Expired - Fee Related
-
2013
- 2013-08-14 US US13/966,433 patent/US9185016B2/en not_active Expired - Fee Related
Patent Citations (39)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US6199160B1 (en) * | 1993-09-14 | 2001-03-06 | International Business Machines Corporation | Computer system and method for performing multiple tasks |
US5689416A (en) | 1994-07-11 | 1997-11-18 | Fujitsu Limited | Computer system monitoring apparatus |
US5511190A (en) | 1995-01-20 | 1996-04-23 | Tandem Computers, Inc. | Hash-based database grouping system and method |
US6515968B1 (en) * | 1995-03-17 | 2003-02-04 | Worldcom, Inc. | Integrated interface for real time web based viewing of telecommunications network call traffic |
US5675510A (en) | 1995-06-07 | 1997-10-07 | Pc Meter L.P. | Computer use meter and analyzer |
US6289368B1 (en) * | 1995-12-27 | 2001-09-11 | First Data Corporation | Method and apparatus for indicating the status of one or more computer processes |
US5787253A (en) | 1996-05-28 | 1998-07-28 | The Ag Group | Apparatus and method of analyzing internet activity |
US5727129A (en) | 1996-06-04 | 1998-03-10 | International Business Machines Corporation | Network system for profiling and actively facilitating user activities |
US5732218A (en) | 1997-01-02 | 1998-03-24 | Lucent Technologies Inc. | Management-data-gathering system for gathering on clients and servers data regarding interactions between the servers, the clients, and users of the clients during real use of a network of clients and servers |
US6662227B2 (en) | 1997-02-14 | 2003-12-09 | Netiq Corp | System and method for analyzing remote traffic data in a distributed computing environment |
US6112238A (en) | 1997-02-14 | 2000-08-29 | Webtrends Corporation | System and method for analyzing remote traffic data in a distributed computing environment |
US5796952A (en) | 1997-03-21 | 1998-08-18 | Dot Com Development, Inc. | Method and apparatus for tracking client interaction with a network resource and creating client profiles and resource database |
US6018713A (en) | 1997-04-09 | 2000-01-25 | Coli; Robert D. | Integrated system and method for ordering and cumulative results reporting of medical tests |
US5878223A (en) | 1997-05-07 | 1999-03-02 | International Business Machines Corporation | System and method for predictive caching of information pages |
US6233600B1 (en) | 1997-07-15 | 2001-05-15 | Eroom Technology, Inc. | Method and system for providing a networked collaborative work environment |
US5951642A (en) | 1997-08-06 | 1999-09-14 | Hypertak, Inc. | System for collecting detailed internet information on the basis of the condition of activities of information viewers viewing information of service providers |
US6560634B1 (en) | 1997-08-15 | 2003-05-06 | Verisign, Inc. | Method of determining unavailability of an internet domain name |
US6377993B1 (en) | 1997-09-26 | 2002-04-23 | Mci Worldcom, Inc. | Integrated proxy interface for web based data management reports |
US6122639A (en) | 1997-12-23 | 2000-09-19 | Cisco Technology, Inc. | Network device information collection and change detection |
US6430623B1 (en) | 1998-01-29 | 2002-08-06 | Ip Dynamics, Inc. | Domain name routing |
US6256671B1 (en) | 1998-06-24 | 2001-07-03 | Nortel Networks Limited | Method and apparatus for providing network access control using a domain name system |
US6249813B1 (en) | 1998-08-06 | 2001-06-19 | Mci Communications Corporation | Automated method of and apparatus for internet address management |
US6317787B1 (en) | 1998-08-11 | 2001-11-13 | Webtrends Corporation | System and method for analyzing web-server log files |
US6411966B1 (en) | 1998-09-21 | 2002-06-25 | Microsoft Corporation | Method and computer readable medium for DNS dynamic update to minimize client-server and incremental zone transfer traffic |
US6360246B1 (en) | 1998-11-13 | 2002-03-19 | The Nasdaq Stock Market, Inc. | Report generation architecture for remotely generated data |
US6332158B1 (en) | 1998-12-03 | 2001-12-18 | Chris Risley | Domain name system lookup allowing intelligent correction of searches and presentation of auxiliary information |
US6427170B1 (en) | 1998-12-08 | 2002-07-30 | Cisco Technology, Inc. | Integrated IP address management |
US6480891B1 (en) | 1999-01-04 | 2002-11-12 | 3Com Corporation | Embedded code memory size reduction in asynchronous mode transfer devices |
US6697948B1 (en) * | 1999-05-05 | 2004-02-24 | Michael O. Rabin | Methods and apparatus for protecting information |
US6442602B1 (en) | 1999-06-14 | 2002-08-27 | Web And Net Computing | System and method for dynamic creation and management of virtual subdomain addresses |
US6789115B1 (en) | 1999-07-09 | 2004-09-07 | Merrill Lynch & Company | System for collecting, analyzing, and reporting high volume multi-web server usage |
US6449657B2 (en) | 1999-08-06 | 2002-09-10 | Namezero.Com, Inc. | Internet hosting system |
US20030220998A1 (en) * | 1999-08-27 | 2003-11-27 | Raymond Byars Jennings | Server site restructuring |
US20030058277A1 (en) * | 1999-08-31 | 2003-03-27 | Bowman-Amuah Michel K. | A view configurer in a presentation services patterns enviroment |
US6839680B1 (en) * | 1999-09-30 | 2005-01-04 | Fujitsu Limited | Internet profiling |
US6701323B2 (en) | 2000-04-18 | 2004-03-02 | Hitachi, Ltd. | Object management system and method for distributed object system |
US6691259B1 (en) | 2000-09-19 | 2004-02-10 | Unisys Corporation | Terminal server data file extraction and analysis application |
US7093194B2 (en) | 2000-10-27 | 2006-08-15 | Swiftknowledge, Inc. | Data access system |
US6768994B1 (en) | 2001-02-23 | 2004-07-27 | Trimble Navigation Limited | Web based data mining and location data reporting and system |
Non-Patent Citations (4)
Title |
---|
Home Web page for Analog logfile analyser (www.analog.cx). |
'Power to the People', Quantified Systems, Inc. (Sep. 1, 1999). |
UrchinTM 2 Installation and Administration Guide for UNIX', Quantified Systems, Inc., pp. 1-1 through 7-2 (Sep. 1, 1999). |
'UrchinTM ISP 1.4 for UNIX Installation and Administration Guide', Quantified Web Systems, Inc., pp. 1-1 through 6-5 (Dec. 1, 1997). |
Cited By (7)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US9412115B2 (en) | 2013-03-14 | 2016-08-09 | Observepoint, Inc. | Configuring tags to monitor other webpage tags in a tag management system |
US9418170B2 (en) | 2013-03-14 | 2016-08-16 | Observepoint, Inc. | Creating rules for use in third-party tag management systems |
US10394902B2 (en) | 2013-03-14 | 2019-08-27 | Observepoint Inc. | Creating rules for use in third-party tag management systems |
US10693943B2 (en) | 2013-03-14 | 2020-06-23 | Observepoint Llc | Configuring tags to monitor other webpage tags in a tag management system |
US9357366B2 (en) | 2014-09-12 | 2016-05-31 | Observepoint, Inc. | Auditing of mobile applications |
US9842133B2 (en) | 2014-09-12 | 2017-12-12 | Observepoint, Inc. | Auditing of web-based video |
US10656907B2 (en) | 2015-11-03 | 2020-05-19 | Observepoint Inc. | Translation of natural language into user interface actions |
Also Published As
Publication number | Publication date |
---|---|
US7610289B2 (en) | 2009-10-27 |
US20120042051A1 (en) | 2012-02-16 |
US20050165889A1 (en) | 2005-07-28 |
US20100049847A1 (en) | 2010-02-25 |
US20140025814A1 (en) | 2014-01-23 |
US8554804B2 (en) | 2013-10-08 |
US8032564B2 (en) | 2011-10-04 |
Similar Documents
Publication | Publication Date | Title |
---|---|---|
US9185016B2 (en) | System and method for monitoring and analyzing internet traffic | |
US6804701B2 (en) | System and method for monitoring and analyzing internet traffic | |
US11809504B2 (en) | Auto-refinement of search results based on monitored search activities of users | |
Eirinaki et al. | Web mining for web personalization | |
JP5072160B2 (en) | System and method for estimating the spread of digital content on the World Wide Web | |
US6928474B2 (en) | Using a probability associative matrix algorithm to modify web pages | |
US20020186237A1 (en) | Method and system for displaying analytics about a website and its contents | |
US20030023715A1 (en) | System and method for logical view analysis and visualization of user behavior in a distributed computer network | |
US20030187677A1 (en) | Processing user interaction data in a collaborative commerce environment | |
KR20060121923A (en) | Techniques for analyzing the performance of websites | |
WO2001025896A1 (en) | System and method for monitoring and analyzing internet traffic | |
Raju | Online Visitor Classification and Unified Creation With Clickstream Data | |
Kiruthika et al. | WEB PERSONALIZATION |
Legal Events
Date | Code | Title | Description |
---|---|---|---|
AS | Assignment |
Owner name: URCHIN SOFTWARE CORPORATION, CALIFORNIAFree format text: CHANGE OF NAME;ASSIGNOR:QUANTIFIED SYSTEMS, INC.;REEL/FRAME:032457/0075Effective date: 20020516Owner name: GOOGLE INC., CALIFORNIAFree format text: ASSIGNMENT OF ASSIGNORS INTEREST;ASSIGNOR:URCHIN SOFTWARE CORPORATION;REEL/FRAME:032451/0731Effective date: 20090325Owner name: QUANTIFIED SYSTEMS, INC., CALIFORNIAFree format text: ASSIGNMENT OF ASSIGNORS INTEREST;ASSIGNORS:MURET, PAUL N.;MOON, HUI SOK;REEL/FRAME:032451/0647Effective date: 20001004 |
|
STCF | Information on status: patent grant |
Free format text: PATENTED CASE |
|
AS | Assignment |
Owner name: GOOGLE LLC, CALIFORNIAFree format text: CHANGE OF NAME;ASSIGNOR:GOOGLE INC.;REEL/FRAME:044129/0001Effective date: 20170929 |
|
MAFP | Maintenance fee payment |
Free format text: PAYMENT OF MAINTENANCE FEE, 4TH YEAR, LARGE ENTITY (ORIGINAL EVENT CODE: M1551); ENTITY STATUS OF PATENT OWNER: LARGE ENTITYYear of fee payment: 4 |
|
FEPP | Fee payment procedure |
Free format text: MAINTENANCE FEE REMINDER MAILED (ORIGINAL EVENT CODE: REM.); ENTITY STATUS OF PATENT OWNER: LARGE ENTITY |
|
LAPS | Lapse for failure to pay maintenance fees |
Free format text: PATENT EXPIRED FOR FAILURE TO PAY MAINTENANCE FEES (ORIGINAL EVENT CODE: EXP.); ENTITY STATUS OF PATENT OWNER: LARGE ENTITY |
|
STCH | Information on status: patent discontinuation |
Free format text: PATENT EXPIRED DUE TO NONPAYMENT OF MAINTENANCE FEES UNDER 37 CFR 1.362 |
|
FP | Lapsed due to failure to pay maintenance fee |
Effective date: 20231110 |