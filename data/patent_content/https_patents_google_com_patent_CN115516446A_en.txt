CN115516446A - Antagonistic bundy strategy for crawling highly dynamic content - Google Patents
Antagonistic bundy strategy for crawling highly dynamic content Download PDFInfo
- Publication number
- CN115516446A CN115516446A CN202080099441.5A CN202080099441A CN115516446A CN 115516446 A CN115516446 A CN 115516446A CN 202080099441 A CN202080099441 A CN 202080099441A CN 115516446 A CN115516446 A CN 115516446A
- Authority
- CN
- China
- Prior art keywords
- refresh
- entities
- strategy
- entity
- value
- Prior art date
- Legal status (The legal status is an assumption and is not a legal conclusion. Google has not performed a legal analysis and makes no representation as to the accuracy of the status listed.)
- Pending
Links
Images
Classifications
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F16/00—Information retrieval; Database structures therefor; File system structures therefor
- G06F16/90—Details of database functions independent of the retrieved data types
- G06F16/95—Retrieval from the web
- G06F16/951—Indexing; Web crawling techniques
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06Q—INFORMATION AND COMMUNICATION TECHNOLOGY [ICT] SPECIALLY ADAPTED FOR ADMINISTRATIVE, COMMERCIAL, FINANCIAL, MANAGERIAL OR SUPERVISORY PURPOSES; SYSTEMS OR METHODS SPECIALLY ADAPTED FOR ADMINISTRATIVE, COMMERCIAL, FINANCIAL, MANAGERIAL OR SUPERVISORY PURPOSES, NOT OTHERWISE PROVIDED FOR
- G06Q30/00—Commerce
- G06Q30/02—Marketing; Price estimation or determination; Fundraising
- G06Q30/0201—Market modelling; Market analysis; Collecting market data
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06Q—INFORMATION AND COMMUNICATION TECHNOLOGY [ICT] SPECIALLY ADAPTED FOR ADMINISTRATIVE, COMMERCIAL, FINANCIAL, MANAGERIAL OR SUPERVISORY PURPOSES; SYSTEMS OR METHODS SPECIALLY ADAPTED FOR ADMINISTRATIVE, COMMERCIAL, FINANCIAL, MANAGERIAL OR SUPERVISORY PURPOSES, NOT OTHERWISE PROVIDED FOR
- G06Q30/00—Commerce
- G06Q30/02—Marketing; Price estimation or determination; Fundraising
- G06Q30/0207—Discounts or incentives, e.g. coupons or rebates
- G06Q30/0239—Online discounts or incentives
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06Q—INFORMATION AND COMMUNICATION TECHNOLOGY [ICT] SPECIALLY ADAPTED FOR ADMINISTRATIVE, COMMERCIAL, FINANCIAL, MANAGERIAL OR SUPERVISORY PURPOSES; SYSTEMS OR METHODS SPECIALLY ADAPTED FOR ADMINISTRATIVE, COMMERCIAL, FINANCIAL, MANAGERIAL OR SUPERVISORY PURPOSES, NOT OTHERWISE PROVIDED FOR
- G06Q30/00—Commerce
- G06Q30/02—Marketing; Price estimation or determination; Fundraising
- G06Q30/0282—Rating or review of business operators or products
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06Q—INFORMATION AND COMMUNICATION TECHNOLOGY [ICT] SPECIALLY ADAPTED FOR ADMINISTRATIVE, COMMERCIAL, FINANCIAL, MANAGERIAL OR SUPERVISORY PURPOSES; SYSTEMS OR METHODS SPECIALLY ADAPTED FOR ADMINISTRATIVE, COMMERCIAL, FINANCIAL, MANAGERIAL OR SUPERVISORY PURPOSES, NOT OTHERWISE PROVIDED FOR
- G06Q30/00—Commerce
- G06Q30/06—Buying, selling or leasing transactions
- G06Q30/0601—Electronic shopping [e-shopping]
Abstract
Techniques to generate re-crawl policies for business offer pages include generating multi-policy methods using a variety of different strategies. In some embodiments, each strategy is an arm with a K-arm-to-bundy algorithm with reinforcement learning. Also, in some embodiments, the multi-strategy approach also uses machine learning algorithms to estimate parameters such as click rate, exposure rate, and likelihood of price change, i.e., rate of change, which is assumed to be known in traditional approaches.
Description
Technical Field
The present description relates to generating a web re-crawling policy for highly dynamic content, such as web pages.
Background
Web crawlers (crawlers) include internet autorun trojans (internet bots) configured to systematically browse the internet. The web crawler starts with an initial or seed list of URLs to be visited. From there, the web crawler identifies the web pages of each URL link and stores the identified web pages in the repository. To identify relevant web pages, the web crawler accesses the web pages. But some web pages change over time. To ensure that the content is fresh, e.g., accurately reflecting changes, the web crawler needs to periodically re-crawl or revisit the web.
Disclosure of Invention
Embodiments provide a refresh strategy (strategy) configured to deliver accurate information to a user while minimizing the use of computer resources. For example, web page content, such as a quote page, presents a product to a user at a price within a browser. Presenting dynamic attributes of offers on the internet means that the repository of data obtained from the offer page may need to be updated frequently. Such updates occur using a web crawler, and more particularly, through a re-crawling operation of the URL repository by the web crawler. Each re-crawling operation uses a certain amount of network resources, and therefore a re-crawling strategy that works within a limited amount of network resources is desirable. Although individual re-crawling strategies for a given number of quotes have been used, the efficacy of these strategies is not always optimal. In contrast, the disclosed techniques use a combination of multiple re-crawling strategies to optimize factual freshness within network resource constraints. The disclosed embodiments use a K-arm (K-arm) versus bandit (base) algorithm to determine a strategy (policy) for selecting a re-crawling strategy at any given time, where each arm is a different re-crawling strategy. The K-arm versus bondy determines the distribution of importance weights assigned to each re-crawling strategy. Further, each re-crawling strategy corresponds to a respective re-crawling rate, which is determined from parameter values such as click rate (click rate), exposure rate (impression rate), and change rate. Conventional re-crawling strategies assume certain static values for these parameters, although such parameter values are not static in nature. Rather, the disclosed embodiments include a process of using both historical data and metadata alone or in combination in a deep learning algorithm to estimate these parameter values. Using this K-arm versus the bundy process and deep learning parameter value estimation, improved factual freshness results are achieved with minimal computational resources.
In one general aspect, a method may include receiving entity data representing a plurality of entities from a repository, each of the plurality of entities having a respective quantity value that was accurate at a previous time. The method may further include, for each of the plurality of entities, generating a respective value at a current time for each of a plurality of parameters, the parameters including at least one of a likelihood of a change in a value of the quantity of the entity and a rate of access of the entity from the repository. The method may further include selecting a refresh strategy from a plurality of refresh strategies for updating a value of the quantity for each of the plurality of entities according to the refresh strategy. The method may also include generating a respective refresh rate for each of the plurality of entities according to the selected refresh maneuver, the refresh rate of the entity of the plurality of entities being based on values of the plurality of parameters at a time sequence prior to the current time. The method may also include performing a refresh operation on the repository based on the respective refresh rates of the plurality of entities, the refresh operation configured to obtain a value of the quantity of the entity at the current time. The method may also include updating the refresh policy based on a difference between the value of the quantity at the previous time and the value of the quantity at the current time for each of the plurality of entities.
In another general aspect, a computer program product includes a non-transitory storage medium, the computer program product including code that, when executed by processing circuitry of a computing device, causes the processing circuitry to perform a method. The method may include receiving entity data representing a plurality of entities from a repository, each of the plurality of entities having a respective value of a quantity, the value of the quantity being accurate at a previous time. The method may further include, for each of the plurality of entities, generating a respective value at a current time for each of a plurality of parameters, the parameters including at least one of a likelihood of a change in a value of the quantity of the entity and a rate of access of the entity from the repository. The method may further include selecting a refresh strategy from a plurality of refresh strategies for updating a value of the quantity for each of the plurality of entities according to the refresh strategy. The method may also include generating a respective refresh rate for each of the plurality of entities according to the selected refresh maneuver, the refresh rate of the entity of the plurality of entities being based on values of the plurality of parameters at a time sequence prior to the current time. The method may also include performing a refresh operation on the repository based on the respective refresh rates of the plurality of entities, the refresh operation configured to obtain a value of the quantity of the entity at the current time. The method may also include updating the refresh policy based on a difference between the value of the quantity at the previous time and the value of the quantity at the current time for each of the plurality of entities.
In another general aspect, an electronic device configured to generate a refresh policy includes a memory and a control circuit coupled to the memory. The control circuitry may be configured to receive entity data from the repository representing a plurality of entities, each of the plurality of entities having a value of a respective quantity, the value of the quantity being accurate at a previous time. The control circuitry may be further configured to, for each of the plurality of entities, generate a respective value at a current time for each of a plurality of parameters, the parameters including at least one of a likelihood of a change in the value of the quantity of the entity and an access rate of the entity from the repository. The control circuitry may be further configured to select a refresh strategy for updating the value of the quantity for each of the plurality of entities from a plurality of refresh strategies according to the refresh strategy. The control circuit may be further configured to generate a respective refresh rate for each of the plurality of entities according to the selected refresh maneuver, the refresh rate of the entity of the plurality of entities being based on values of the plurality of parameters at a time sequence prior to the current time. The control circuitry may be further configured to perform a refresh operation on the repository based on the respective refresh rates of the plurality of entities, the refresh operation configured to obtain a value of the quantity of the entity at the current time. The control circuitry may be further configured to update the refresh policy based on a difference between the value of the quantity at the previous time and the value of the quantity at the current time for each of the plurality of entities.
The details of one or more implementations are set forth in the accompanying drawings and the description below. Other features will be apparent from the description and drawings, and from the claims.
Drawings
FIGS. 1A and 1B are diagrams illustrating an example electronic environment in which improved techniques described herein may be implemented.
FIG. 2 is a flowchart illustrating an example method of determining network re-crawling policies in accordance with the disclosed embodiments.
FIG. 3 is an illustration of an example method of generating a web page re-crawling policy in accordance with a disclosed embodiment.
FIG. 4 is a diagram of an example dataset generation process for daily prediction, according to a disclosed embodiment.
FIG. 5 illustrates an example of a computer device and a mobile computer device that can be used to implement the described techniques.
FIG. 6 illustrates an example of a distributed computer device that may be used to implement the described techniques.
Detailed Description
The web crawler provides the content of the web pages to the search system, for example, for indexing and retrieval. Because web crawlers can use a large amount of network resources, web crawlers typically employ one or more strategies to determine what web pages to access. Some example scheduling policies include breadth first, reverse link count, and page rank calculation.
Because some web pages are dynamic and continually changing, some web crawlers perform re-crawls of web sites to ensure that the content of those web sites in the search system is fresh. That is, when the content of a web page delivered from a search system to a user's web browser is identical to the content of the web page stored on the server hosting the web page, the content is fresh. Conventional methods of generating policies for re-crawling websites include re-crawling websites at a uniform rate, i.e., re-crawling each page with equal probability.
A technical problem in generating policies for re-crawling websites is that the above-described conventional approaches do not perform well when re-crawling is performed on highly dynamic content. A domain may have highly dynamic content when the domain includes web pages that change frequently (e.g., add/delete) and/or web pages that have factual information on the page that changes frequently. Examples of such highly dynamic content include commercial web content, news reports, weather forecasts, movie reviews, and the like. The business's domain may include web page content with volume data, such as offers to users to purchase products at a price. Such content may also be referred to as an offer page. But not all of the content of the domain changes at the same rate. For example, in some cases, the price of a first offer on a first web page in a domain changes rapidly over time, while the price of a second offer on a second web page in the domain changes slowly. Further, the rate of change of the first web page may not be constant, e.g., the price changes more quickly near a holiday or some other event, and changes slower after the holiday or event. The goal of the web crawler is to optimize the synchronization of factual content (e.g., volume information including price information) stored in the repository of the search system with the content stored at the domain. If the content stored in the search system does not match the content stored at the domain, the content is said to be stale.
Refreshing dynamic fact content (such as a quote page) at a uniform rate does not make optimal use of network resources. To ensure that the content is fresh, web crawlers will crawl frequently, but if the content has not changed, frequent crawl requests can consume unnecessary network resources and may also overwhelm (over) domains. Less frequent crawling ensures that domains are not overwhelmed and saves network resources, but results in more stale content. Therefore, re-crawl scheduling is often a balance between network resources (frequency of crawls) and staleness. One conventional re-crawling scheduling strategy includes a page selection heuristic that selects web pages based on a rate of change. Another conventional strategy, known as lambdacrowl, seeks an optimal re-crawl rate under resource constraints.
Some web crawlers focus on a single strategy. However, such a single strategic crawler typically crawls one particular type of web page, and thus may not be able to efficiently crawl other page types.
According to embodiments described herein, a technical solution to the above technical problem comprises generating an adaptive multi-strategy approach using a plurality of different re-crawling strategies. In some embodiments, each strategy is an arm of the K-arm-to-bundy algorithm with reinforcement learning. In some implementations, the multi-strategy approach can use machine learning to estimate parameters such as click rate, exposure rate, and likelihood of price change, i.e., rate of change. These parameters are assumed to be known in the conventional method. A problem with such conventional methods is that, for example, knowing the rate of change in advance is not generally available in practice. In order to obtain such information, conventional methods have developed various estimation methods. A simple approach involves estimating the rate of change from past history. However, such approaches suffer from cold start problems and are subject to feedback loops. These shortcomings motivate other approaches to incorporate universally available or relatively static predictive features, such as page content, in predicting rates of change. In contrast, the disclosed embodiments may include using not only historical data but also metadata, both separately or in combination, to estimate the rate of change, click rate, and exposure rate.
A technical advantage of the disclosed embodiments is that such a multi-strategic approach achieves greater freshness than any single strategy and is robust under strict resource constraints (e.g., computer processing cycles, network bandwidth, etc.). Furthermore, parameter estimation substantially affects the effectiveness of the re-crawling strategy. Thus, the disclosed embodiments use a predictive model that takes into account both past history and metadata information. The disclosed predictive model improves upon history-based models. The K-arm-to-bundy approach used by the disclosed embodiments combines multiple re-crawling strategies under a unified strategy with provable freshness assurance. The disclosed embodiments outperform a single strategy that includes a resource optimization strategy such as lambdacrowl (which depends on the constancy of the rate of change of content), even if such a resource optimization strategy is not included as a candidate strategy.
In general, the above-described solution may be configured to update a refresh policy, where a re-crawl policy is a special case. Thus, the technical solution is not limited to the re-crawling operation. However, unless explicitly stated, embodiments herein are directed to updating the re-crawl policy.
Fig. 1A and 1B are diagrams illustrating an example electronic environment 100 in which the above-described technical solution may be implemented. Computer 120 is configured to generate and execute policies for re-crawling websites. In other words, computer 120 may be referred to as a production crawler.
Computer 120 includes a network interface 122, one or more processing units 124, and memory 126. Network interface 122 includes, for example, an ethernet adapter, a token ring adapter, or the like, for converting electronic and/or optical signals received from network 150 into electronic form for use by computer 120. The set of processing units 124 includes one or more processing chips and/or components (assembly). The memory 126 includes both volatile memory (e.g., RAM) and non-volatile memory, such as one or more ROMs, disk drives, solid-state drives, or the like. The set of processing units 124 and the memory 126 together form a control circuit that is configured and arranged to perform the various methods and functions described herein.
In some implementations, one or more components (components) of computer 120 may be or may include a processor (e.g., processing unit 124) configured to process instructions stored in memory 126. Examples of such instructions as depicted in FIG. 1 include an entity manager 130, a prediction manager 140, a re-crawl manager 150, and a re-crawl policy manager 160. Further, as shown in FIG. 1A, the memory 126 is configured to store various data, which is described with respect to a corresponding manager that uses such data. Note that in some embodiments, the entity page corresponds to an offer page that includes an offer to sell a product.
FIG. 1B illustrates an example electronic environment 100 in which the improved techniques may be implemented. The electronic environment 100 includes a repository 102 of crawl logs, a repository 104 of entity page signals, the internet 106 (or alternatively, a web page), a content repository 108, and a computer 120 of fig. 1A.
The repository 102 of crawl logs is configured to store crawl history data. In some implementations, the crawl history data is used by the prediction manager 140, and more specifically, by a training manager 142 configured to train models, to estimate parameters for the crawl rate calculations.
The repository 104 of entity page signals is configured to store metadata related to content included in entity pages. Example metadata stored in entity page signal 104 includes brand identifiers, merchant identifiers, country codes, and the like. Further details regarding the metadata are described with respect to table 3. In some implementations, the prediction manager 140 also uses the metadata to train a model for estimating parameters of the crawl rate calculations.
The repository 108 of content data is configured to store content extracted from the entity web page and a URL pointing to the entity web page. The content data 108 may include factual data for an entity. Factual data may include, for example, the price or availability of offered products for sale, or product grades. Factual data may also be referred to as quantities. It should be understood that each quantity (e.g., fact) has a value. Thus, for example, price is understood to have a value representing price, while availability has a value representing availability. Thus, as used herein, an amount may refer to a label (e.g., price, availability) or a value of a label, as appropriate. The freshness of fact data is indicated by the agreement between the value of the quantity stored in the repository 108 of content data (e.g., the price of a quote) and the value of the quantity found on a field (not shown) (e.g., obtained via the internet 106). If the value stored in the entity's content data 108 matches the same amount of value for the entity on the domain, the value stored in the entity's content data 108 is considered fresh. Otherwise, the values stored in the entity's content data 108 are stale.
Embodiments are not limited to the exact configuration illustrated in fig. 1B. For example, any of the crawl logs 102, entity page signals 104, and/or content data 108 may be included as part of the computer 120, such as stored in the memory 126. As another example, any of the crawl logs 102, entity page signals 104, and/or content data 108 may be remote from the computer 120, but accessible to the computer 120. In some implementations, one or more of the crawl logs 102, the entity page signals 104, the content data 108, and the computers 120 can be part of a distributed computing system.
Returning to fig. 1A, the entity manager 130 is configured to receive entity data 132 representing entities 132 (1), 132 (2), … …,132 (N). In some implementations, the entity manager 130 receives the entity data 132 from a remote computer (not pictured) through the network interface 122, i.e., over a network, such as the internet 106. In some embodiments, the entity manager 130 receives entity data 132 from a local storage device (e.g., a disk drive, flash drive, SSD, etc.).
For example, in some implementations, the entities (e.g., offers) 132 (1), 132 (2), … …,132 (N) represented by the entity data 132 each offer to purchase a product. Such offers may be found within the browser's search tools, such as google shopping. Such entities may also be referred to as product offers or offer-only offers. Other examples of entities include event pages (e.g., time or location of events that tend to change) or user-generated event reviews. Each of the entities 132 (1), 132 (2), … …,132 (N) (e.g., entity 132 (1)) includes respective quantity data 133 (1) representing a quantity at a previous time. Each quantity (e.g., price) at a previous time may need to be updated with the latest information from the internet 106 via the URL from the content data 108. For each entity (e.g., entity 132 (1)), entity data 132 further includes parameter values: click rate μ represented by click rate data 134 (1), exposure rate v represented by exposure rate data 135 (1), and likelihood of price change Δ represented by volume (e.g., price) change likelihood data 136 (1). The click rate μ represents the number of times the user selects an entity from the search results per time interval. The exposure rate v indicates the number of times the entity for each time interval is displayed in the search results.
To facilitate discussion of FIG. 1A, the remaining discussion of FIG. 1A will use the entity data 132 to represent quote data (i.e., a quote to sell a product), and the volume data to represent an example of a price of the quote. Thus, entities 132 (1), … …,132 (N) are referred to as bids and quantity data 133 is referred to as price data. However, embodiments are not limited to price quotes and price data.
The prediction manager 140 is configured to generate predictions of values for click rate, exposure rate, and rate of change based on metadata 144 and historical data 146. In particular, price change prediction is modeled as a classification task whose goal is to predict whether the price of a quote will change the next day. Similarly, for click rate and exposure rate predictions, forecasting includes determining whether the offer will be clicked or exposed the next day. In calculating the crawl rate, the prediction output will be used directly as μ, v and Δ. In some embodiments, the prediction horizon (horizon) is set to daily granularity, as click and exposure statistics are aggregated on a daily basis. However, embodiments may use other prediction ranges, such as hourly, weekly, every other day, and so forth.
The re-crawl manager 150 is configured to perform re-crawl operations to re-crawl a repository of URLs for web page pages. The web page may have volume (e.g., pricing) information for offers 132 (1), 132 (2), … …,132 (N). The re-crawling operation is performed by the re-crawling manager 150 according to one of a plurality of re-crawling strategies. Each recall strategy is represented by re-crawl strategy data 152.
The re-crawling strategy data 152 includes data items that define a plurality of re-crawling strategies. For example, the re-crawling strategy data 152 may include re-crawling strategy identifier data 153 that represents an identifier corresponding to each re-crawling strategy. For example, the re-crawling strategies considered herein include a unification strategy, a change weighting strategy, a click weighting strategy, an exposure weighting strategy, and a resource optimization strategy. These strategies are not exhaustive and other re-crawling strategies may be used. The re-crawl strategy data 152 can include re-crawl constraint data 154. The re-crawl constraint data 154 represents constraints on network resources that limit the number of re-crawls per time step that can be performed. In some implementations, the constraint can be represented in terms of an aggregate re-crawling rate (i.e., the total number of re-crawling events per time step) across all re-crawling strategies. The re-crawling strategy data 152 can include re-crawling rate data 155, the re-crawling rate data 155 representing a number of re-crawling events performed per time step. The time step depends on the crawler. In some examples, the time step may be one hour. Additionally, the re-crawl strategy data 152 can include updated volume (e.g., price) data 156 for each bid price 132 (1), … …,132 (N) obtained as a result of re-crawling according to the re-crawling strategy.
The re-crawl policy manager 160 is configured to generate re-crawl policies represented by re-crawl policy data 162. The re-crawling strategy is a distribution of weights across multiple re-crawling strategies, each weight indicating a strategic importance level and, accordingly, how often the strategy is used in re-crawling operations. In some implementations, the re-crawl policy manager 160 uses reinforcement learning to generate the re-crawl policy data 162. Reinforcement learning is a type of machine learning that determines the actions to be taken to maximize rewards. Embodiments may use rewards for re-crawls that result in updated amounts of entities (e.g., re-crawls that extract price changes for offered products for sale). No reward may be given for re-crawls that do not result in an updated amount (e.g., re-crawls that extract the same amount already stored in the product repository).
The re-crawl policy data 162 represents re-crawl policies and may include policy weight data 163. Strategic weight data 163 ultimately includes re-crawling strategic weight distributions. Each re-crawling strategy has its own weight distribution in the policy weight data 163. The weight of strategy k can be markedShown as w k . Each weight corresponds to a likelihood that a particular re-crawling strategy will be selected at the next time instant. Thus, the weights may be distributed over the time series. The importance weight of strategy k at time step t in the time series can be denoted as
The re-crawl policy data 162 may include policy probability data 164. The policy probability data 164 is an intermediate quantity used in the K-arm-to-bundy algorithm from which adjustments to the policy weight data are derived at each time step. For example, the policy probability data 164 includes an exploration probability and represents a probability that a re-crawl strategy will be selected based on the current weights and the exploration probability. The exploration probability itself indicates the likelihood of selecting a re-crawl strategy against the bundy's "arm (arm)" or selection, not solely according to the historical strategy represented by the strategy weight data 163, but rather a uniformly weighted strategy. In other words, the exploration probability prevents the system from selecting the next re-crawling strategy based only on historical data, which makes the system robust and avoids historical bias.
The re-crawl policy data 162 may include reward data 165. The reward data 165 is also an intermediate quantity used in the K-arm-to-bundy algorithm from which adjustments to the policy weight data are derived at each time step. Reward data 165 represents the reward of selecting a particular arm or re-crawling strategy among all offers at a time. The reward for each offer or the utility of each offer indicates whether the reward strategy for that offer results in an update to the price of that offer. In other words, reward data 165 represents a re-crawled reward for identifying changes in volume.
The components (e.g., modules, processing unit 124) of user device 120 may be configured to operate based on one or more platforms (e.g., one or more similar or different platforms) that may include one or more types of hardware, software, firmware, operating systems, runtime libraries, and/or the like. In some implementations, the components of computer 120 may be configured to operate within a cluster of devices (e.g., a server farm). In such an embodiment, the functions and processing of the components of computer 120 may be distributed to several devices of a device cluster.
The components of computer 120 may be or include any type of hardware and/or software configured to generate and/or update re-crawling policies. In some embodiments, one or more portions of the components shown in the components of computer 120 in fig. 1 may be or may include a hardware-based module (e.g., a Digital Signal Processor (DSP), a Field Programmable Gate Array (FPGA), a memory), a firmware module, and/or a software-based module (e.g., a module of computer code, a set of computer-readable instructions that may be executed by a computer). For example, in some embodiments, one or more portions of the components of computer 120 may be or include software modules configured for execution by at least one processor (not shown). In some embodiments, the functionality of the components may be included in different modules and/or different components than those shown in fig. 1, including combining the functionality illustrated as two components into a single component.
Although not shown, in some embodiments, the components of computer 120 (or portions thereof) may be configured to operate within, for example, a data center (e.g., a cloud computing environment), a computer system, one or more servers/host devices, and/or the like. In some implementations, the components of computer 120 (or portions thereof) may be configured to operate within a network. Accordingly, the components of computer 120 (or portions thereof) may be configured to operate within various types of network environments that can include one or more devices and/or one or more server devices. For example, the network may be or may include a Local Area Network (LAN), a Wide Area Network (WAN), or the like. The network may be or may include a wireless network and/or a wireless network implemented using, for example, gateway devices, bridges, switches, etc. The network may include one or more segments and/or may have portions based on various protocols, such as Internet Protocol (IP) and/or proprietary protocols. The network may include at least a portion of the internet.
In some embodiments, one or more components of computer 120 may be or include a processor configured to process instructions stored in a memory. For example, the entity manager 130 (and/or portions thereof), the prediction manager 140 (and/or portions thereof), the re-crawl manager 150 (and/or portions thereof), and the re-crawl policy manager 160 (and/or portions thereof) may be a combination of processors and memory that is configured to execute instructions related to a process that implements one or more functions.
In some embodiments, the memory 126 may be any type of memory, such as random access memory, disk drive memory, flash memory, or the like. In some implementations, the memory 126 may be implemented as more than one memory component (e.g., more than one RAM component or disk drive memory) associated with a component of the computer 120. In some implementations, the memory 126 may be a database memory. In some implementations, the memory 126 may be or include non-local memory. For example, the memory 126 may be or may include a memory shared by multiple devices (not shown). In some embodiments, memory 126 may be associated with a server device (not shown) within a network and configured to serve components of computer 120. As illustrated in fig. 1A, the memory 126 is configured to store various data including entity data 132, metadata 144, historical data 146, re-crawl strategy data 152, and re-crawl strategy data 162.
It will be assumed herein that the entity data 132 represents offer data representing offers to sell products. According to these principles, the value of the quantity is the price of the quote. The entities 132 (1), … …,132 (N) are assumed to be quotes.
Before delving into generating the details of the re-search strategy, a formal description of the problem is presented. Imagine that there are a total of n bids (o) in the search environment 1 ,o 2 ,……,o n ) Such as crawl log 102. Each offer o i (also called entity) as a time series, the data point at time step t is represented by three parameters
In addition, offer o i The latest price at time step t is denoted ascontent data 108
For example, a production crawler such as computer 120 also needs to handle resource constraints. In this example, a fixed crawling constraint for the b-quote is assumed at each time step. The goal is to find a re-crawl rate that maximizes the overall utility given the resource constraints
Table 1 summarizes the notation used to represent data elements used in the disclosed environment.
Table 1 notation as used herein
The re-crawling task of the re-crawling manager 150, for example, is modeled as a K-arm-to-bundy (KAB) problem, where each re-crawling strategy is considered an arm. At each time step, one arm is selected based on its historical performance, entities (offers) crawled using the selected arm are determined, rewards are observed and the performance of the selected arm is updated. By repeating this process, the arm selection process can be improved over time.
Table 2 summarizes the re-crawling strategy discussed herein. It should be understood that the re-crawling strategy listed here, or even the number of re-crawling strategies, is not required, and that other re-crawling strategies using improved techniques, or more or less than the five re-crawling strategies listed, are possible.
Table 2 re-crawl strategy and its corresponding re-crawl rate. It is to be noted that it is preferable that,
FIG. 2 is a flow diagram depicting an example method 200 of generating and using a re-crawling policy for re-crawling a website, according to an embodiment. The method 200 may be performed by the software structure described in connection with fig. 1 residing in the memory 126 of the computer 120 and being executed by the set of processing units 124. The method 200 generates and uses re-crawling strategies by estimating parameters of re-crawling rates of various re-crawling strategies, and then employs reinforcement learning via, for example, a K-arm versus bundy algorithm to derive a weight distribution over the re-crawling strategies that defines the re-crawling strategies.
At 202, the entity manager 130 receives entity data 132 from the repository representing a plurality of entities (e.g., offers 132 (1), … …,132 (N)), each of the plurality of entities having a corresponding value of an amount (e.g., a price at which a product was sold) that was accurate at a previous time. For example, the price at the previous time may have been obtained from the content repository 108 during a previous crawl.
At 204, for each of the plurality of entities, the prediction manager 140 generates values for a plurality of parameters at a current time. The parameter includes at least one of a click rate, an exposure rate, or a likelihood of a change in a value of the quantity of the entity (e.g., a price of the offer). In conventional approaches, these parameter values are taken from historical data. Rather, the disclosed embodiments use neural networks to generate these parameter values. The neural network is based not only on historical data but also on metadata stored, for example, in the entity signal repository 104. As discussed below with respect to FIG. 4, the metadata and history based model outperforms the history or price change only based predictive model
At 206, the re-crawling manager 150 selects a re-crawling strategy (represented by re-crawling strategy data 152) from a plurality of re-crawling strategies. The selected re-crawling strategy is used to update a local repository, e.g., the content data 108, by re-crawling entity pages. As will be described with reference to fig. 3, the selection may be made according to a probability distribution over multiple re-crawl strategies.
At 208, the re-crawling manager 150 generates respective re-crawling rates (represented by re-crawling rate data 155) for each of the plurality of entities according to the selected re-crawling strategy. The re-crawl rate of entities in the plurality of entities is based on values of a plurality of parameters (click rate, exposure rate, or likelihood of change) at a time series. For example, if the selected re-crawling strategy is a uniform re-crawling strategy, the re-crawling rates on all entities are equal. As another example, if the selected re-crawling strategy is change weighted, the selected re-crawling rate is proportional to the entity's rate of change. In this case, the rate of change is determined by the prediction discussed with respect to fig. 4. The re-crawl rates of other re-crawl strategies may be similarly generated, as summarized in table 2.
At 210, the re-crawl manager 150 schedules re-crawl operations for the repository 108 based on the re-crawl rates of each of the plurality of entities. In other words, the re-crawl manager 150 schedules re-crawl ρ times for a particular entity during a time step (e.g., hours, weeks, twice a day, etc.) for the current time step. Each re-crawl of the quote obtains a value for the quantity of each of the plurality of entities. The updated value is up to the current time.
At 212, the re-crawl policy manager 160 updates the re-crawl policy (represented by the re-crawl policy data 162) based on the re-crawl. The re-crawl policy manager 160 updates the time series of values for the entity's volume each time an offer page is re-crawled. The value of the updated amount becomes part of the historical data used to predict the next crawled parameter value, for example as part of step 204. Updating the re-crawl policy also includes calculating rewards. The click rate promotes rewards. In some embodiments, the rewards may be normalized to [0,1]And can be expressed as
FIG. 3 is an illustration of an example method 300 of generating a web page re-crawling policy. In fig. 3, the method begins with selecting each arm with equal selection opportunities at time step 1 (310 (1)). And selecting a crawling strategy and re-crawling according to strategic scheduling. After re-crawling, the system calculates rewards (for each entity) and updates the historical performance of the crawling strategy. Certain re-crawling strategies reap more preferences over time through aggregate rewards. In the example of fig. 3, the click weighting strategy and the resource optimization strategy are illustrated as progressively more favoring over time (see 310 (1) at t =1, 310 (2) at t =100, and 310 (3) at t = 100). Note that embodiments may use fewer re-crawling strategies than illustrated in fig. 3. Embodiments may also use more and/or different re-crawling strategies.
The use of antagonistic bundy is more advantageous than using a single strategy in the following respects: (1) Merging multiple strategies allows us to explore offers from different perspectives, making them more robust to errors made by individual strategies; (2) Unlike the random bundy algorithm, the anti-bundy makes no stationarity assumption on the reward distribution, which is a better choice if the reward (click weighted freshness) is dynamic.
The anti-bundy method, more specifically a scaled version of the EXP3 algorithm, can be formalized as follows: assume that there are K candidate arms, and let
Unfortunately R is given by the following expression:
rewardsteps 210 and 212). Unfortunately, the following is defined: such a crawl is considered useful if it helps to update the local price to the latest, and assigns a positive reward accordingly. The local price from time step (t-1) is used to verify that it will not match the true price at time step t; if the prices do match, crawling the quote will not have any utility harvest. To align with the click weighted freshness, the click rate promotes rewards. In fact, the utility measures the increase in freshness of the click weighting between two time steps. Re-crawl rate
The reward is updated as shown in equation (2):
because the cumulative reward of applying the best strategy at each time step is a constant factor, minimizing R in equation (1) is equivalent to maximizing the expected reward. Furthermore, based on the definition in equation (2), the time-aggregated reward actually represents the freshness of the click-weighting, which means that the freshness of the click-weighting is essentially optimized using the disclosed embodiments of the anti-bundy approach.
Example implementation details are described in algorithm 1. Algorithm 1 is one example of an implementation of the method 200 of fig. 2.
Algorithm 1K arm pair bundy method
Parameters are as follows: gamma epsilon [0,1]
2: for time T =1,2, … …, T
6: for quotes i =1,2, … …, n
10: end up
12: end up
In some embodiments, the time step is assumed to be two hours. The crawl rate of table 2 is calculated using a time step of two hours. In some embodiments, the time step is every other hour. When the crawl rate in table 2 is calculated for time steps of every two hours, the crawl rate should be multiplied by (12 hours/time unit).
The re-crawling strategy deployed in K-arm banddy for use as an arm (in addition to uniform crawling) requires knowledge of click rate, exposure rate, and change rate. The disclosed embodiments use a predictive modeling approach in which both metadata and past historical information are employed in the model for better parameter estimation accuracy.
In particular, embodiments may initially train a predictive model based on existing crawl log data. In some implementations, price change prediction is modeled as a classification task whose goal is to predict whether the price of an offer will change in the next day or any time horizon depending on the granularity of the data. Similarly, for click and exposure prediction, it is forecasted whether the offer will be clicked or exposed the next day. When calculating the crawl rate, the prediction output is used directly as μ, ν, and Δ. In some embodiments, the prediction horizon may be set to a daily granularity, as click and exposure statistics are aggregated on a daily basis.
An embodiment may employ two change history features, including the frequency of monthly price changes and the most recent changes. A set of click and exposure history features may also be included that are strong signals predicting future clicks and exposures. Table 3 provides all these features and their descriptions. The product category information may be from a shopping taxonomy (taxonomy), such as google shopping product taxonomy. The change frequency, click and exposure statistics may be considered as numerically dense features, and the metadata information may be modeled by sparse features and embedded into a low dimensional space.
TABLE 3 historical and metadata features that can be used in predictive models
For each prediction task, the model is trained using combined metadata and historical features. An example model, which may be a feed-forward Deep Neural Network (DNN) model, employs a TensorFlow dnnclasifier in which three hidden layers are set to 256, 128, and 64 hidden units in each layer. The ReLU (corrected linear unit) is used as the activation function for the hidden unit and the adagard algorithm is chosen that optimizes the cross entropy loss. Other neural network configurations may also be used. In some embodiments, to handle overfitting, both L1 and L2 regularization may be employed and both set to 0.001. Embodiments may use multiple sets of hyper-parameters. Such an embodiment has similar results.
An example crawl log may include millions of entities. For example, an example crawl log (e.g., 102) may include 130 ten thousand indexed offers, and hourly crawls scheduled for those offers. The samples used by the disclosed embodiments to train the predictive model may come from two types: (ii) (a) a random unified sample from the entire quotation corpus; and (b) click-weighted samples that better represent popular offers with clicks. A total of billions of quote page snapshots may be crawled. For ease of discussion, example time periods for log coverage may be from 2018/08/01 to 2019/04/10.
FIG. 4 is a diagram of an example dataset generation process 400 for daily prediction used to train the predictive model used in the disclosed embodiments. As shown in fig. 4, for each simulated predicted date d, the predicted time t is defined as the beginning of d (12 am. Features are then extracted from the crawl logs up to time t. Crawling every hour after t provides a complete view of future price information, which helps generate binary labels reflecting whether the price will change the next day. Similarly, click and exposure information for date d +1 is used to create a binary click/exposure label that indicates whether the offer will be clicked/exposed the next day. By moving the forecast date d and repeating the above process, a set of training, testing and verification examples is created.
The training, validation and test data sets in this example were created with data from different dates. In particular, in the example of FIG. 4, data from 2018/08/01 to 2018/12/31 is used for training, data from 2019/01/01 to 2019/01/09 is used for verification, and the remainder is used for testing. A total of 60 million validation examples, 800 million test examples, and 1 million training examples were obtained. In the test and validation data, the positive/negative label ratio for price change was 1:20, click positive/negative tab ratio of 1:75, positive/negative label ratio of exposure 1: for the training data, we observed a higher positive/negative ratio due to the click-weighted samples involved. The rate of price change becomes 1:20, the ratio of clicks becomes 1:1, the ratio of exposure becomes 4:1. note that since the uniform samples are randomly chosen from the entire corpus, many samples are discarded, removed, or have no extraction price. This results in a lower than expected number of test and verification examples.
Embodiments may be used with metadata-only based predictive models, history-only based predictive models, or metadata and history-based predictive models. Table 4 illustrates that the metadata and history based model is more accurate (by area measurement under the receiver operating characteristic curve, where a value of 0.5 means a random guess, while 1.0 indicates perfect prediction).
Task \ model | Metadata | History of | Metadata + History |
Price change | 0.860(0.008) | 0.833(0.011) | 0.882(0.007) |
Click on | 0.796(0.021) | 0.948(0.006) | 0.949(0.006) |
Exposure to light | 0.736(0.008) | 0.896(0.003) | 0.895(0.003) |
TABLE 4 AUC (and standard deviation) of the test prediction model
FIG. 5 illustrates an example of a general purpose computer device 600 and a general purpose mobile computer device 650, which can be used with the techniques described herein. Computer device 600 is one example configuration of computer 120 of fig. 1 and 2.
As shown in FIG. 5, computing device 600 is intended to represent various forms of digital computers, such as laptops, desktops, workstations, personal digital assistants, servers, blade servers, mainframes, and other appropriate computers. Computing device 650 is intended to represent various forms of mobile devices, such as personal digital assistants, cellular telephones, smart phones, and other similar computing devices. The components shown here, their connections and relationships, and their functions, are meant to be exemplary only, and are not meant to limit implementations of the inventions described and/or claimed in this document.
The memory 604 stores information within the computing device 600. In one implementation, the memory 604 is a volatile memory unit or units. In another implementation, the memory 604 is a non-volatile memory unit or units. The memory 604 may also be another form of computer-readable medium, such as a magnetic or optical disk.
The storage device 606 is capable of providing mass storage for the computing device 600. In one implementation, the storage device 606 may be or contain a computer-readable medium, such as a floppy disk device, a hard disk device, an optical disk device, or a tape device, a flash memory or other similar solid state memory device, or an array of devices, including devices in a storage area network or other configurations. The computer program product may be tangibly embodied in an information carrier. The computer program product may also contain instructions that, when executed, perform one or more methods, such as those described above. The information carrier is a computer-or machine-readable medium, such as the memory 604, the storage device 606, or memory on processor 602.
The high speed controller 608 manages bandwidth-intensive operations for the computing device 500, while the low speed controller 612 manages lower bandwidth-intensive operations. Such allocation of functions is exemplary only. In one embodiment, the high-speed controller 608 is coupled to memory 604, display 616 (e.g., through a graphics processor or accelerator), and to high-speed expansion ports 610, which high-speed expansion ports 610 may accept various expansion cards (not shown). In an embodiment, low-speed controller 612 is coupled to storage device 506 and low-speed expansion port 614. The low-speed expansion port, which may include various communication ports (e.g., USB, bluetooth, ethernet, wireless ethernet), may be coupled through, for example, a network adapter to one or more input/output devices, such as a keyboard, a pointing device, a scanner, or a networking device such as a switch or router.
As shown, the computing device 600 may be implemented in a number of different forms. For example, it may be implemented as a standard server 620, or multiple times in a group of such servers. It may also be implemented as part of a rack server system 624. Further, it may be implemented in a personal computer such as a laptop computer 622. Alternatively, components from computing device 600 may be combined with other components in a mobile device (not shown), such as device 650. Each such device may contain one or more computing devices 600, 650, and an entire system may be made up of multiple computing devices 600, 650 communicating with each other.
FIG. 6 illustrates an example of a general purpose computer device 700, which may be the computer 120 of FIG. 1A or FIG. 1B, which may be used with the techniques described herein. Computing device 700 is intended to represent various example forms of large-scale data processing devices, such as servers, blade servers, data centers, mainframes, and other large-scale computing devices. Computing device 700 may be a distributed system with multiple processors, possibly including network-attached storage nodes interconnected by one or more communication networks. The components shown here, their connections and relationships, and their functions, are meant to be exemplary only, and are not meant to limit implementations of the inventions described and/or claimed in this document.
The distributed computing system 700 may include any number of computing devices 780. Computing device 780 may include a server or a rack server, a mainframe, etc. that communicates over a local or wide area network, dedicated optical link, modem, bridge, router, switch, wired or wireless network, etc.
In some implementations, each computing device can include multiple racks. For example, the computing device 780a includes a plurality of racks 758a-758n. Each rack may include one or more processors, such as processors 752a-752n and 762a-762n. The processor may include a data processor, a network attached storage device, and other computer controlled devices. In some embodiments, one processor may act as a master processor and control scheduling and data distribution tasks. The processors may be interconnected through one or more rack switches 758, and one or more racks may be connected through a switch 778. The switch 778 may handle communications between multiple connected computing devices 700.
Each rack may include storage, such as storage 754 and storage 764, and storage devices, such as 756 and 766. The storage 756 and 766 may provide mass storage, and may comprise volatile or non-volatile storage, such as a network attached disk, floppy disk, hard disk, optical disk, magnetic tape, flash memory or other similar solid state storage device, or an array of devices including devices in a storage area network or other configurations. The storage 756 or 766 may be shared among multiple processors, multiple racks, or multiple computing devices, and may comprise a computer-readable medium storing instructions executable by one or more processors. The memory 754 and 764 may include, for example, one or more volatile memory units, one or more non-volatile memory units, and/or other forms of computer-readable media, such as magnetic or optical disks, flash memory, cache, random Access Memory (RAM), read Only Memory (ROM), and combinations thereof. A memory, such as memory 754, may also be shared among the processors 752a-752 n. Data structures such as indexes may be stored across, for example, storage 756 and memory 754. Computing device 700 may include other components not shown, such as controllers, buses, input/output devices, communication modules, and so forth.
The overall system may be made up of multiple computing devices 700 in communication with each other. For example, device 780a may communicate with devices 780b, 780c, and 780d, and these devices may be collectively referred to as computer 120. As another example, computer 120 of fig. 1 may include one or more computing devices 700. Some computing devices may be geographically located close to each other, while other computing devices may be geographically located far apart. The layout of system 700 is merely an example, and the system may take on other layouts or configurations.
Various implementations of the systems and techniques described here can be realized in digital electronic circuitry, integrated circuitry, specially designed ASICs (application specific integrated circuits), computer hardware, firmware, software, and/or combinations thereof. These various implementations can include implementation in one or more computer programs that are executable and/or interpretable on a programmable system including at least one programmable processor, which may be special or general purpose, coupled to receive data and instructions from, and to transmit data and instructions to, a storage system, at least one input device, and at least one output device.
These computer programs (also known as programs, software applications or code) include machine instructions for a programmable processor, and can be implemented in a high-level procedural and/or object-oriented programming language, and/or in assembly/machine language. As used herein, the terms "machine-readable medium" and "computer-readable medium" refer to any computer program product, apparatus and/or device (e.g., magnetic discs, optical disks, memory, programmable Logic Devices (PLDs)) used to provide machine instructions and/or data to a programmable processor, including a machine-readable medium that receives machine instructions as a machine-readable signal. The term "machine-readable signal" refers to any signal used to provide machine instructions and/or data to a programmable processor.
To provide for interaction with a user, the systems and techniques described here can be implemented on a computer having a display device (e.g., a CRT (cathode ray tube) or LCD (liquid crystal display) monitor) for displaying information to the user and a keyboard and a pointing device (e.g., a mouse or a trackball) by which the user can provide input to the computer. Other kinds of devices may also be used to provide for interaction with the user; for example, feedback provided to the user can be any form of sensory feedback (e.g., visual feedback, auditory feedback, or tactile feedback); and input from the user may be received in any form, including acoustic, speech, or tactile input.
The systems and techniques described here can be implemented in a computing system that includes a back-end component (e.g., as a data server), or that includes a middleware component (e.g., an application server), or that includes a front-end component (e.g., a client computer having a graphical user interface or a web browser through which a user can interact with an implementation of the systems and techniques described here), or any combination of such back-end, middleware, or front-end components. The components of the system can be interconnected by any form or medium of digital data communication (e.g., a communication network). Examples of communication networks include a local area network ("LAN"), a wide area network ("WAN"), and the internet.
The computing system may include clients and servers. A client and server are generally remote from each other and typically interact through a communication network. The relationship of client and server arises by virtue of computer programs running on the respective computers and having a client-server relationship to each other.
Several embodiments have been described. Nevertheless, it will be understood that various modifications may be made without departing from the spirit and scope of the description.
It will also be understood that when an element is referred to as being on, connected to, electrically connected to, coupled to, or electrically coupled to another element, it can be directly on, connected to, or coupled to the other element or one or more intervening elements may be present. In contrast, when an element is referred to as being directly on, directly connected to, or directly coupled to another element, there are no intervening elements present. Although the terms directly on, directly connected to, or directly coupled to may not be used throughout the detailed description, elements shown as directly on, directly connected to, or directly coupled to may be referred to as such. The claims of the present application may be modified to list exemplary relationships described in the specification or shown in the drawings.
While certain features of the described embodiments have been illustrated as described herein, many modifications, substitutions, changes and equivalents will now occur to those skilled in the art. It is, therefore, to be understood that the appended claims are intended to cover all such modifications and changes as fall within the scope of the embodiments. It should be understood that they have been presented by way of example only, and not limitation, and various changes in form and details may be made. Any portions of the apparatus and/or methods described herein may be combined in any combination, except mutually exclusive combinations. The embodiments described herein may include various combinations and/or subcombinations of the functions, features and/or properties of the different embodiments described.
Moreover, the logic flows depicted in the figures do not require the particular order shown, or sequential order, to achieve desirable results. In addition, other steps may be provided, or steps may be eliminated, from the described flows, and other components may be added to, or removed from, the described systems. Accordingly, other implementations are within the scope of the following claims.
Claims (20)
1. A computer-implemented method, comprising:
receiving entity data representing a plurality of entities from a repository, each of the plurality of entities having a respective value of an amount that was accurate at a previous time instance;
for each of a plurality of entities, generating an associated value of a plurality of parameters at a current time, the plurality of parameters including at least one of a likelihood of a change in a value of a quantity of the entity or a rate of access of the entity from a repository;
selecting a refresh strategy of a plurality of refresh strategies for updating a value of the quantity of each of the plurality of entities according to the refresh strategy;
generating a respective refresh rate for each of the plurality of entities according to the selected refresh strategy, the respective refresh rate for each of the plurality of offers being based on the associated values of the plurality of parameters at a time sequence including a previous time and a current time;
performing a refresh operation on a repository based on respective refresh rates of a plurality of entities, the refresh operation configured to obtain a value of an amount of an entity at a current time; and
the refresh policy is updated based on a difference between the value of the quantity at the previous time instance and the value of the quantity at the current time instance for each of the plurality of entities.
2. The method of claim 1, wherein the refresh policy includes a weight distribution representing a respective likelihood of selecting each of a plurality of refresh strategies.
3. The method of claim 2, wherein selecting a refresh strategy of a plurality of refresh strategies comprises:
generating a probability distribution of refresh strategies over a plurality of refresh strategies, the probability distribution including a respective probability corresponding to each of the plurality of refresh strategies; and
random sampling of the plurality of refresh strategies is performed according to the probability distribution to produce a selected refresh strategy.
4. The method of claim 3, wherein generating a probability distribution comprises:
an average of weights of the weight distribution and an inverse of a number of refresh strategies of the plurality of refresh strategies are performed, the weights corresponding to the refresh strategies.
5. The method of any preceding claim, wherein the plurality of refresh strategies includes at least two of a unification strategy, a change weighting strategy, an access weighting strategy, and a resource optimization strategy.
6. The method of any preceding claim, wherein generating a respective refresh rate for each of a plurality of entities according to the selected refresh maneuver comprises:
for a parameter of a plurality of parameters, generating a respective neural network model corresponding to the parameter; and
generating a respective refresh rate for the parameter using a neural network model corresponding to the parameter.
7. The method of claim 6, wherein the parameter of a plurality of parameters is a likelihood of a change in a value of an amount of an entity of a plurality of entities, and
wherein generating a neural network model corresponding to the parameters comprises:
the model is trained based on a set of historical features including at least one of a frequency of change of the quantity in a previous time period and a length of time since a most recent change.
8. The method of claim 6, wherein the parameter of a plurality of parameters is an access rate of an entity of a plurality of entities, and
wherein generating a neural network model corresponding to the parameters comprises:
the model is trained based on a set of historical features including at least one of a number of visits within a previous time period and a number of visits within a previous time period.
9. The method of claim 6, wherein generating a neural network model corresponding to the parameters comprises:
training a model based on metadata, the metadata including a day of a week of a predicted time and at least one of a characteristic of each of a plurality of entities.
10. The method of claim 6, wherein:
the repository includes a plurality of offer web pages;
each of the plurality of entities comprises a quote web page of a plurality of quote web pages, the quote web page displaying a product quote;
the refresh operation on the entity comprises re-crawling a webpage from the merchant website;
the plurality of parameters of an entity in the plurality of entities include an exposure rate of a quote webpage page and a click rate of the quote webpage page;
the entity includes a brand identifier of the offer webpage, a merchant identifier of the offer webpage, and a country identifier of the offer webpage, and
wherein generating a neural network model corresponding to the parameters comprises:
training a model based on metadata including at least one of a brand identifier, a country identifier, a day of week of a predicted time, and a merchant identifier.
11. A computer program product comprising a non-transitory storage medium, the computer program product comprising code that, when executed by processing circuitry of a user device configured to generate a refresh policy, the method comprising:
receiving entity data representing a plurality of entities from a repository, each of the plurality of entities having a respective value of an amount that was accurate at a previous time instance;
for each of a plurality of entities, generating associated values of a plurality of parameters at a current time, the plurality of parameters including at least one of a likelihood of a change in a value of a quantity of the entity or a rate of access of the entity from a repository;
selecting a refresh strategy of a plurality of refresh strategies for updating a value of the quantity of each of the plurality of entities according to the refresh strategy;
generating, for each of the plurality of entities, a respective refresh rate according to the selected refresh strategy, the refresh rate of the entity of the plurality of entities being based on the associated values of the plurality of parameters at a time sequence including a previous time instant and a current time instant;
performing a refresh operation on the repository based on the respective refresh rates of the plurality of entities, the refresh operation configured to obtain a value of the quantity of entities at a current time; and
the refresh policy is updated based on a difference between the value of the quantity at the previous time instance and the value of the quantity at the current time instance for each of the plurality of entities.
12. The computer program product of claim 11, wherein each of the plurality of refresh strategies is represented as an arm of a K-arm-to-bundy algorithm.
13. The computer program product of claim 11, wherein a sum of respective refresh rates of the plurality of bids is normalized based on an entity refresh budget constraint.
14. The computer program product of claim 11, wherein updating the refresh policy comprises:
generating a utility for each entity of a plurality of entities, the utility for each entity comprising a product of: the access rate of the entity, (ii) the refresh rate of the entity, and (iii) a binary function that takes a value of one when a value of the quantity of the entity at a previous time obtained using a refresh strategy of the plurality of strategies is not equal to a value of the quantity of the entity at a current time, and takes a value of zero when a value of the quantity of the entity at a previous time obtained using a refresh strategy of the plurality of strategies is equal to a value of the quantity of the entity at the current time.
15. The computer program product of claim 14, wherein updating the refresh policy further comprises:
adding, at the current time, a utility of each entity of each of the plurality of entities to a reward parameter indicating a relative usefulness of the refresh strategy at the current time.
16. An electronic device configured to generate a refresh policy, the electronic device comprising:
a memory; and
control circuitry coupled to the memory, the control circuitry configured to:
receiving entity data representing a plurality of entities from a repository, each of the plurality of entities having a respective value of an amount that was accurate at a previous time instance;
for each of a plurality of entities, generating an associated value of a plurality of parameters at a current time, the plurality of parameters including at least one of a likelihood of a change in a value of a quantity of the entity or a rate of access of the entity from a repository;
selecting a refresh strategy of a plurality of refresh strategies for updating a value of the quantity of each of the plurality of entities according to the refresh strategy;
generating a respective refresh rate for each of the plurality of entities according to the selected refresh strategy, the respective refresh rate for each of the plurality of offers being based on the associated values of the plurality of parameters at a time sequence including a previous time and a current time;
performing a refresh operation on a repository based on respective refresh rates of a plurality of entities, the refresh operation configured to obtain a value of an amount of an entity at a current time; and
the refresh policy is updated based on a difference between the value of the quantity at the previous time instance and the value of the quantity at the current time instance for each of the plurality of entities.
17. The electronic device of claim 16, wherein the refresh policy includes a weight distribution representing a respective likelihood of selecting each of a plurality of refresh strategies.
18. The electronic device of claim 17, wherein the control circuit configured to select the refresh strategy of a plurality of refresh strategies is further configured to:
generating a probability distribution of refresh strategies over a plurality of refresh strategies, the probability distribution including a respective probability corresponding to each of the plurality of refresh strategies; and
random sampling of the plurality of refresh strategies is performed according to the probability distribution to produce a selected refresh strategy.
19. The electronic device of claim 18, wherein the control circuitry configured to generate the probability distribution is further configured to:
an average of weights of the weight distribution and an inverse of a number of refresh strategies of the plurality of refresh strategies are performed, the weights corresponding to the refresh strategies.
20. The electronic device of claim 16, wherein the plurality of refresh strategies includes at least two of a unification strategy, a change weighting strategy, an exposure weighting strategy, and a resource optimization strategy.
Applications Claiming Priority (1)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
PCT/US2020/025757 WO2021201825A1 (en) | 2020-03-30 | 2020-03-30 | Adversarial bandits policy for crawling highly dynamic content |
Publications (1)
Publication Number | Publication Date |
---|---|
CN115516446A true CN115516446A (en) | 2022-12-23 |
Family
ID=70465344
Family Applications (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
CN202080099441.5A Pending CN115516446A (en) | 2020-03-30 | 2020-03-30 | Antagonistic bundy strategy for crawling highly dynamic content |
Country Status (3)
Country | Link |
---|---|
US (1) | US20230169128A1 (en) |
CN (1) | CN115516446A (en) |
WO (1) | WO2021201825A1 (en) |
Family Cites Families (2)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20150006023A1 (en) * | 2012-11-16 | 2015-01-01 | Scope Technologies Holdings Ltd | System and method for determination of vheicle accident information |
US11379539B2 (en) * | 2019-05-22 | 2022-07-05 | Microsoft Technology Licensing, Llc | Efficient freshness crawl scheduling |
-
2020
- 2020-03-30 CN CN202080099441.5A patent/CN115516446A/en active Pending
- 2020-03-30 US US17/995,248 patent/US20230169128A1/en active Pending
- 2020-03-30 WO PCT/US2020/025757 patent/WO2021201825A1/en active Application Filing
Also Published As
Publication number | Publication date |
---|---|
US20230169128A1 (en) | 2023-06-01 |
WO2021201825A1 (en) | 2021-10-07 |
Similar Documents
Publication | Publication Date | Title |
---|---|---|
US10296935B2 (en) | Real time audience forecasting | |
US10580035B2 (en) | Promotion selection for online customers using Bayesian bandits | |
US8560293B2 (en) | Enhanced matching through explore/exploit schemes | |
US10032176B2 (en) | Real time statistics extraction from arbitrary advertising audiences | |
WO2015192667A1 (en) | Advertisement recommending method and advertisement recommending server | |
US20120303598A1 (en) | Real-time adaptive binning | |
US20170330239A1 (en) | Methods and systems for near real-time lookalike audience expansion in ads targeting | |
US10878058B2 (en) | Systems and methods for optimizing and simulating webpage ranking and traffic | |
Agarwal et al. | Content recommendation on web portals | |
US10559004B2 (en) | Systems and methods for establishing and utilizing a hierarchical Bayesian framework for ad click through rate prediction | |
US11710065B2 (en) | Utilizing a bayesian approach and multi-armed bandit algorithms to improve distribution timing of electronic communications | |
US11875368B2 (en) | Proactively predicting transaction quantity based on sparse transaction data | |
US20100121801A1 (en) | Enhanced matching through explore/exploit schemes | |
US11663509B2 (en) | System and method for a personalized machine learning pipeline selection and result interpretation | |
US20210192549A1 (en) | Generating analytics tools using a personalized market share | |
CN111079014A (en) | Recommendation method, system, medium and electronic device based on tree structure | |
JP6748312B2 (en) | System and method for eliminating bias in media mix modeling | |
US20150066661A1 (en) | System for scalable keyword bid optimization | |
US8285583B2 (en) | Contact stream optimization using FEC and CC constraints | |
US8090835B1 (en) | Optimizing website traffic among content sources | |
US20230169128A1 (en) | Adversarial bandits policy for crawling highly dynamic content | |
CN115129964A (en) | Method for pushing content item to be recommended, pushing system and electronic equipment | |
CN116034354A (en) | System and method for automated intervention | |
KR102614813B1 (en) | Adaptive timing prediction for updating information | |
US20230126932A1 (en) | Recommended audience size |
Legal Events
Date | Code | Title | Description |
---|---|---|---|
PB01 | Publication | ||
PB01 | Publication | ||
SE01 | Entry into force of request for substantive examination | ||
SE01 | Entry into force of request for substantive examination |