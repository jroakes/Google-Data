CN102576350A - System and method of caching information - Google Patents
System and method of caching information Download PDFInfo
- Publication number
- CN102576350A CN102576350A CN2010800472303A CN201080047230A CN102576350A CN 102576350 A CN102576350 A CN 102576350A CN 2010800472303 A CN2010800472303 A CN 2010800472303A CN 201080047230 A CN201080047230 A CN 201080047230A CN 102576350 A CN102576350 A CN 102576350A
- Authority
- CN
- China
- Prior art keywords
- project
- memory
- stored
- request
- speed cache
- Prior art date
- Legal status (The legal status is an assumption and is not a legal conclusion. Google has not performed a legal analysis and makes no representation as to the accuracy of the status listed.)
- Granted
Links
Images
Classifications
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F12/00—Accessing, addressing or allocating within memory systems or architectures
- G06F12/02—Addressing or allocation; Relocation
- G06F12/08—Addressing or allocation; Relocation in hierarchically structured memory systems, e.g. virtual memory systems
- G06F12/12—Replacement control
- G06F12/121—Replacement control using replacement algorithms
- G06F12/123—Replacement control using replacement algorithms with age lists, e.g. queue, most recently used [MRU] list or least recently used [LRU] list
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F12/00—Accessing, addressing or allocating within memory systems or architectures
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F12/00—Accessing, addressing or allocating within memory systems or architectures
- G06F12/02—Addressing or allocation; Relocation
- G06F12/0223—User address space allocation, e.g. contiguous or non contiguous base addressing
- G06F12/023—Free address space management
- G06F12/0238—Memory management in non-volatile memory, e.g. resistive RAM or ferroelectric memory
- G06F12/0246—Memory management in non-volatile memory, e.g. resistive RAM or ferroelectric memory in block erasable memory, e.g. flash memory
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F12/00—Accessing, addressing or allocating within memory systems or architectures
- G06F12/02—Addressing or allocation; Relocation
- G06F12/08—Addressing or allocation; Relocation in hierarchically structured memory systems, e.g. virtual memory systems
- G06F12/0802—Addressing of a memory level in which the access to the desired data or data block requires associative addressing means, e.g. caches
- G06F12/0806—Multiuser, multiprocessor or multiprocessing cache systems
- G06F12/0842—Multiuser, multiprocessor or multiprocessing cache systems for multiprocessing or multitasking
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F12/00—Accessing, addressing or allocating within memory systems or architectures
- G06F12/02—Addressing or allocation; Relocation
- G06F12/08—Addressing or allocation; Relocation in hierarchically structured memory systems, e.g. virtual memory systems
- G06F12/0802—Addressing of a memory level in which the access to the desired data or data block requires associative addressing means, e.g. caches
- G06F12/0888—Addressing of a memory level in which the access to the desired data or data block requires associative addressing means, e.g. caches using selective caching, e.g. bypass
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F12/00—Accessing, addressing or allocating within memory systems or architectures
- G06F12/02—Addressing or allocation; Relocation
- G06F12/08—Addressing or allocation; Relocation in hierarchically structured memory systems, e.g. virtual memory systems
- G06F12/12—Replacement control
- G06F12/121—Replacement control using replacement algorithms
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F12/00—Accessing, addressing or allocating within memory systems or architectures
- G06F12/02—Addressing or allocation; Relocation
- G06F12/08—Addressing or allocation; Relocation in hierarchically structured memory systems, e.g. virtual memory systems
- G06F12/12—Replacement control
- G06F12/121—Replacement control using replacement algorithms
- G06F12/122—Replacement control using replacement algorithms of the least frequently used [LFU] type, e.g. with individual count value
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04L—TRANSMISSION OF DIGITAL INFORMATION, e.g. TELEGRAPHIC COMMUNICATION
- H04L67/00—Network arrangements or protocols for supporting network services or applications
- H04L67/50—Network services
- H04L67/56—Provisioning of proxy services
- H04L67/568—Storing data temporarily at an intermediate stage, e.g. caching
- H04L67/5683—Storage of data provided by user terminals, i.e. reverse caching
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F12/00—Accessing, addressing or allocating within memory systems or architectures
- G06F12/02—Addressing or allocation; Relocation
- G06F12/08—Addressing or allocation; Relocation in hierarchically structured memory systems, e.g. virtual memory systems
- G06F12/0802—Addressing of a memory level in which the access to the desired data or data block requires associative addressing means, e.g. caches
- G06F12/0866—Addressing of a memory level in which the access to the desired data or data block requires associative addressing means, e.g. caches for peripheral storage systems, e.g. disk cache
- G06F12/0871—Allocation or management of cache space
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F2212/00—Indexing scheme relating to accessing, addressing or allocation within memory systems or architectures
- G06F2212/26—Using a specific storage system architecture
- G06F2212/264—Remote server
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F2212/00—Indexing scheme relating to accessing, addressing or allocation within memory systems or architectures
- G06F2212/72—Details relating to flash memory management
- G06F2212/7209—Validity control, e.g. using flags, time stamps or sequence numbers
Abstract
A system (100) and method (FIGS. 5-6) are provided wherein, in one aspect, a currently-requested item of information (143) is stored in a cache (140) based on whether it has been previously requested and, if so, the time of the previous request. If the item has not been previously requested, it may not be stored in the cache. If the subject item has been previously requested, it may or may not be cached based on a comparison of durations, namely (1) the duration of time between the current request and the previous request for the subject item and (2) for each other item in the cache, the duration of time between the current request and the previous request for the other item. If the duration associated with the subject item is less than the duration of another item in the cache, the subject item may be stored in the cache.
Description
The cross reference of related application
The application has required to submit on August 21st, 2009, application number is 12/545,225, denomination of invention be the rights and interests of " system and method for cache information ", and its whole disclosures are included in this through reference.
Background technology
Usually, in having the system of processor, provide high-speed cache to come the canned data project, thus than do not exist high-speed cache with lower " cost " through the processor access information project.For example, system can be configured to than other storeies, and processor can obtain data or programmed instruction quickly from a storer.Thereby this storer can be as high-speed cache can copy in the high-speed cache and from high-speed cache, visits so that be kept at information that the frequent quilt in other storeies visits.In addition; But the use of high-speed cache can help to reduce when information project be the processor of this locality time spent and the internal data flow between built-in system element such as storer or the input-output interface, but and reduce when information be not the system of this locality time spent and the external data flow between the remote system.
Often too little and all information that can not storage of processor possibly need of high-speed cache.Therefore, in the time will confirming which information stores in high-speed cache, typically need selective power based on the system of high-speed cache.For example, processor maybe be times without number with visit ten different information projects frequently, but high-speed cache possibly can only be stored five.
Having existed various algorithm to determine when needs project is stored in the high-speed cache.For example, some existing systems automatically with the most recently used information stores in high-speed cache.High-speed cache can be stored five if processor was handled ten projects recently, so last five discrete items are stored in the high-speed cache, and no matter the frequency of utilization of these projects how.
Summary of the invention
On the one hand, a kind of method is provided, comprises: receive the request that information project is handled at the processor place, wherein said processor has relevant high-speed cache; When said project is stored in the said high-speed cache, the requested project of retrieval from said high-speed cache; When said project is not stored in the said high-speed cache, the requested project of retrieval from other storeies; When said project in the scheduled period not by before ask out-of-dately, handle said project and said project be not stored in the said high-speed cache; When said project in the scheduled period by before asked and the time ratio of said request in advance to the nearest request of each project of being stored in one group of project in the said high-speed cache all early the time, handle said project and said project be not stored in the said high-speed cache; And when said project in the scheduled period by before asked and said before the time ratio of request to the nearest request of at least one project of being stored in one group of project in the said high-speed cache when late, handle said project and said project be stored in the said high-speed cache.
On the other hand, a kind of method is provided, comprises: receive the current request to first project of electronics canned data, said first project is stored in the first memory; When said first project also is stored in the second memory, said first project is provided from said second memory; When said first project is not stored in the said second memory, said first project is provided from said first memory; Use processor to confirm whether at the fixed time said first project was asked in the section before; When definite said first project by before ask out-of-date; Use processor to confirm first duration relevant with said first project, wherein said first duration is to the current request of said first project with to the duration between the request before said first project; Use processor to confirm to be stored in second duration of each project of second project of asking before a group in the said second memory, wherein second value is to the current request of said first project with to the duration between the last-minute plea of said second project; And when said first project by before asked and said first duration when being shorter than at least one of said second duration, said first project is stored in the said second memory.
Another kind of again method relates to: receive the request to first project of electronics canned data; When said first project at the fixed time in the section not by before ask out-of-dately, from first memory, provide said first project said first project not to be stored in the second memory; When said first project is stored in the said second memory, said first project is provided from said second memory, said second memory is also stored a plurality of sundry items, each of said a plurality of sundry items at least by before asked twice; When said first project at the fixed time in the section not by before ask out-of-dately, said first project is provided from said first memory and said first project is not stored in the said second memory; When confirm said first project by before asked out-of-dately, use processor to confirm first value relevant with said first project, wherein said first value is based on to the duration between the asking before of said first project; Use processor confirm be stored in said second memory in one group before the second relevant value of each project in second project of asking, wherein said second is worth based on to the current request of said first project with to the duration between the last-minute plea of said second project; And when said first project at the fixed time the section in by before ask out-of-date; Based on the comparative result of said first value and said second value, from said first memory, provide said first project also said first project to be stored in the said second memory.
Another aspect provides a kind of system, comprising: high-speed cache, and said high-speed cache is configured to be used for the canned data project; Other storeies, said other storeies are configured to be used for the canned data project; And processor, said processor is configured to be used for provide to request unit in said high-speed cache retrieval and stored items and with said project according to instruction.In response to from the described request device to by the request of request items, said instruction comprises: when said requested project is stored in the said high-speed cache, the said requested project of retrieval from said high-speed cache; When said requested project is not stored in the said high-speed cache, from said other storeies, retrieve said requested project; When said project in the scheduled period not by before ask out-of-dately, said requested project is provided to the described request device, and before next one request, said requested project is not stored in the said high-speed cache; When said project in the scheduled period by before asked and said before the time ratio of the request last-minute plea reality of each project all early time that is stored in one group of project in the said high-speed cache; Said requested project is provided to the described request device, and before next one request, said requested project is not stored in the said high-speed cache; And when said project in the scheduled period by before asked and said before the time ratio of request when being stored in evening last-minute plea time of at least one project of one group of project in the said high-speed cache, said requested project is provided to the described request device and will between next one request, said requested project be stored in the said high-speed cache.
Another kind of system can comprise: processor, said processor are configured to be used for according to instruction in buffer retrieval and stored items.It also can comprise: first memory, said first memory have first capacity and first access time (wherein, the access time representes that said processor obtains the averaging time that information spends from storer); Second memory, said second memory had than bigger capacity of said first memory and slower access time; And the 3rd storer, said the 3rd storer had than bigger capacity of said second memory and slower access time.In response to the request that receives through said processor to said project, said instruction can comprise: when requested project is stored in the said first memory, from said first memory the retrieval said requested project; When said requested project is stored in the said second memory, the said requested project of retrieval from said second memory; When said requested project is stored in said the 3rd storer, the said requested project of retrieval from said the 3rd storer; According to said project the time point of described request whether be stored in the said second memory and from time that the requested final time of said project begins to be passed whether less than evicting the duration at last from; Said requested project is stored in the said first memory, wherein saidly evicts the duration at last from and comprise the duration till the last-minute plea during still being stored in said first memory the time begins to evict from from first memory to nearest dispossessed project to nearest dispossessed project; Whether be stored in the said second memory and whether said project is from said the 3rd storer, to retrieve according to said project at the time point of described request, said requested project is stored in the said second memory.
Description of drawings
Fig. 1 is the functional block diagram of the system of server and client side's device according to an aspect of the present invention;
Fig. 2 is computer chip and the functional block diagram of instruction storage according to an aspect of the present invention;
Fig. 3 is the functional block diagram of the multilevel system of server and client side's device according to an aspect of the present invention;
Fig. 4 is the functional block diagram of computing machine according to an aspect of the present invention;
Fig. 5 is a process flow diagram according to an aspect of the present invention; And
Fig. 6 is a process flow diagram according to an aspect of the present invention.
Embodiment
According to an aspect of the present invention; Based on the information project of current request whether by before asked; And if the information project of current request by before asked then based on before the request time, confirm whether the information project of current request is stored in the high-speed cache.Especially; If project never by before asked; Then project be not stored in the high-speed cache (wherein " never " can be represented predetermined amount of time, for example " in 24 hours never " or in a period of time never, wherein a period of time is dynamically confirmed based on time dependent data).If the object project by before asked; Then based on the duration confirm and relatively come the cache object project; Just (1) to the current request of object project and before the request between the duration; And (2) for each sundry item in the high-speed cache, to the current request of sundry item and before between the request the duration.If be shorter than the duration of relevant with the object project another project in the high-speed cache the duration, the object project is stored in the high-speed cache.
As shown in fig. 1, system according to one aspect of the invention 100 comprises computing machine 110, and computing machine 110 comprises processor 120, storer 130, clock 115 and other assemblies that typical case exists in multi-purpose computer.Storer 130 storages can be processed the information of device 120 visits, comprise being processed the instruction 131 that device 120 is carried out.It also comprises the data that can be processed device retrieval (retrieve), operation or storage.Storer can be any can storage can be processed the type of info that device is visited, and comprises computer-readable medium, and like hard drive, storage card, ROM, RAM, DVD or other CDs, and other can be write and ROM (read-only memory).Processor 120 can be any processor of knowing, like the processor of Intel company or AMD.Replacedly, processor can be nonshared control unit, like ASIC.
Although Fig. 1 functionally illustrates processor and storer in identical piece, those of ordinary skill in the art should be understood that in fact processor and storer can comprise and a plurality ofly can or can not be stored in processor and the storer in the identical physical housings.For example, some instruction and datas can be stored on the removable CD-ROM, and other instruction and datas can be stored in the read-only computer chip.Some or all of instruction and datas can be stored in physically away from processor but still can be processed in the storage unit of device visit.Therefore, the reference that should be understood that computing machine, processor and storer comprises set of computers, processor or the reference of computing machine that can or can not parallel work-flow.
Intermediate node between network 195 and server 110 and the client terminal device can comprise different configurations and use different protocol, comprise that internet, WWW, LAN, VPN, wide area network, local network, use are specific to the various combinations of the dedicated network of the communication protocol of one or more companies, Cellular Networks and other wireless networks, Internet relay chat sound channel (IRC), instant message, Simple Mail Transfer protocol (SMTP), Ethernet, WLAN and HTTP and above-mentioned agreement.Although a spot of computing machine only is shown among Fig. 1, should be understood that exemplary systems can comprise a large amount of interconnective computing machines.
Each client terminal device is configurable to be similar with server 110, has processor, storer and instruction.Each client terminal device 150-52 can be the personal computer that supplies personnel 190-191 to use; Have all intrawares that in personal computer, occur usually; Like CPU (CPU), display device 160 (for example; Have watch-dog, projector, touch-screen, small LCD screen, televisor or other devices of screen as can operate and be used to show the electronic installation that is processed the device information processed); DVD driving, hard drive, user input apparatus 163 (for example, mouse, keyboard, touch-screen or microphone), loudspeaker, modulator-demodular unit or Network Interface Unit (phone, cable, wireless or other) and all component that is used to connect these elements to another element.
Although client terminal device 150-52 can comprise complete personal computer, native system and method also can with can be through the mobile device of the swap data use that combines wirelessly of network such as internet and server.For example, client terminal device can be wireless enabled PDA, like the cell phone of blackberry, blueberry phone or support internet.The user can use miniature keyboard (under the situation of blackberry, blueberry phone), button (under typical cellular situation), touch-screen (under the situation at PDA) or any other user input apparatus input information.In fact, according to the computing machine of system and method described herein can comprise any can processing instruction and give and comprise multi-purpose computer, lack the network computer of local storage capacity and be used for the STB of televisor from device and other computing machines that the user transmits data.
Except server 110, system 100 also can comprise other servers.For example, server 115-16 can store the information of other nodes that can be transferred into network, the audio/visual video file that provides like the YouTube server through Google.Other non-limitative examples of content comprise music, still image, comprise the program of computer game and above-mentioned combination.Video content can show that through the electronics of client terminal device 160 offer the user, and audio content can provide through the loudspeaker relevant with client terminal device.Content can freely or be chargeed and provided, and can be limited or be limited by copyrighted digital content encipherment protection technology (DRM).
On the one hand and under many circumstances, than obtaining information from content server 115-16, server 110 typically can be sent to client terminal device 150-52 with the information from high-speed cache 140 quickly.For example, server 110 more approaches client terminal device than content server on geography.Server 100 also can more approach client terminal device on topology; For example; If the internet is simultaneously as network 195 and network 196, so between content server 115 and the client terminal device 150 than having more intermediate node between server 110 and the client terminal device 150.Further, high-speed cache 140 can be stored in the identical housing with processor 120, as physically being arranged on the large-scale hard drive in the server; Such configuration typically is processor message reference speed very fast is provided.But high-speed cache 140 also can cause the stand-by period longer than hard drive in other position, but than obtaining the shorter stand-by period of informational needs from content server 115-16.
The information of different-format, configuration and size can be stored, retrieves and handled to native system and method.In this respect, the information project that is stored in the high-speed cache can be different sizes or have identical size.Aspect some, each project is the single file (for example, file is the music video of whole first song) of all information of representative of consumer needs.In other respects, each project is the fixed size bag of information, and it can not be had a mind to the free burial ground for the destitute by the user and use until the user client device and receive and a plurality of bags are gathered together.Above-mentioned combination also is possible; For example; The independent project of in the high-speed cache each can be the part of the music video of fixed size, and server 110 flows to the user client device through retrieving and transmit independent bag from high-speed cache with music video.
Native system and method also can be handled the data of the time span between the request of directory entry.For example, data 135 can be stored request record 145, and wherein each record identification is stored in content file 143 and file in the high-speed cache 140 by the date and time of client terminal device last-minute plea.On the one hand, request record 145 can be stored as Hash table, and wherein key word is the sign (for example, distributing to unique numeral of each different audio file) of file and the key point that shows the date and time of client terminal device last-minute plea file.
Whether the request record also can identify project and be stored in the high-speed cache, because not all requested project can be evicted from from high-speed cache by high-speed cache by high-speed cache and the project of asking before then.
As mentioned below, extra information also can be stored in some aspects.
Except the operation shown in Fig. 5, different operating according to various aspects of the invention will be described now.Should be understood that following operation needn't be by the particular order execution of following description.And each step can be by opposite sequential operation or operation simultaneously.
On the one hand, native system and method comprise use high-speed cache to store can be by the server of client terminal device information requested.For example, server 110 can be a limit server (edge server) of a lot of servers relevant with network address such as www.youtube.com.In this respect, the user can use client terminal device 150 mutual with the webserver of operating audio medium file search engine.Engine server can be the inventory that the user provides a video that is complementary, and allows user's selection and go to the webpage to needed video.Although it provides service by engine server, the distinctive webpage of this video can comprise the URL of direct sensing server 110 and unique ID of file.Therefore, when the user asked video copy, for example through clicking the Play button, request directly was sent to server 110 rather than engine server.
After the request that receives information, native system and method can make requested information be retrieved and offer request entity.For example, server 110 can confirm at first whether high-speed cache 140 comprises requested content file.If literature kit is contained in the high-speed cache, processor 120 can be sent to client terminal device 150 with file from high-speed cache 140 through network 195.If file is not included in the high-speed cache, processor can and forward it to client terminal device 150 from demand file of content server 115-16, as through the agency.Replacedly; Server 110 can be that content server or client terminal device provide enough information so that client terminal device can obtain file and not transmit files through server 110 from content server, for example the redirected reference that the position is provided through HTTP302.
When processor receives the request to information, it confirm information whether by before asked.For example, but server 110 query requests record 145 and confirm that whether content files asked by before any of client terminal device 150-52.If recording storage is in Hash table, processor 120 can be checked the record of the key word that Hash table is complementary with the UID that confirms to have with file.If such key word does not exist, so processor 120 confirm files not by before asked.If such key word exists, so processor 120 confirm files by before asked.
If requested project not by before asked native system and method data of time correlation of cache information but storage and request not so.For example, it can increase the requested file of identification the key word/value of date and time of UID and request in Hash table 145.It also can comprise value in record, like the current mark that is not stored in the high-speed cache of indication file.
If needed information by before asked, processor confirm its by before the final time of asking and it is compared with the information of request time of other information in discerning high-speed cache.The decision of high-speed cache can be confirmed the result based on this.
In the one side of native system and method, if except that the time of current request, certain project was more closely asked than the sundry item in the high-speed cache, so this project of high-speed cache.For example, suppose server 110 in the afternoon 7:00 receive request, and the information below 145 identifications of request record to " file #3 ":
UID | Project is by the date and time of last-minute plea | Project is current to be stored in the high-speed cache? |
1 | Afternoon 1:00 | Be |
2 | Afternoon 2:00 | Not |
3 | Afternoon 3:00 | Not |
4 | Afternoon 4:00 | Be |
5 | Afternoon 5:00 | Not |
6 | Afternoon 6:00 | Be |
Based on above-mentioned information, except the time of current request, the request time of file #3 (3:00 in afternoon) is more late than the request time (1:00 in afternoon) of file #1.Therefore, file #3 will be stored high-speed cache.
If high-speed cache lacks the capacity of the project of storing current request, native system and method are removable from the longest project of time of in high-speed cache, being lain idle by last-minute plea.Use above-mentioned example, since file #1 was asked to rise existing six hours (afternoon, 7:00 deducted 1:00 in afternoon) before.Therefore, when arrive regardless of next request to file #1, the duration between last-minute plea and the next request can not be less than six hours.Any another duration of this any other file of duration comparison is all long.Therefore,, can from high-speed cache 140, remove file #1 so, can file #3 be increased to high-speed cache, and can 145 renewals of request record (be illustrated the variation with a last chart with black matrix) as follows if there are not enough spaces to give file #1 and file #3.
UID | Project is by the date and time of last-minute plea | Project is current to be stored in the high-speed cache? |
1 | Afternoon 1:00 | Not |
2 | Afternoon 2:00 | Not |
3 | Afternoon 7:00 | Be |
4 | Afternoon 4:00 | Be |
5 | Afternoon 5:00 | Not |
6 | Afternoon 6:00 | Be |
If after removing another project, still there are not enough spaces to store the project of current request, native system and method can continue the project of evicting from until enough spaces are provided so.
On the one hand, native system uses the data relevant with nearest dispossessed project to confirm whether the project of current request should be by high-speed cache with method.For example, when file #1 was removed, server 110 can be stored the pointer of the request record that points to file #1 in data 135, as following indicated through " X-＞".
UID | Project is by the date and time of last-minute plea | Project is current to be stored in the high-speed cache? |
-X-＞1 | Afternoon 1:00 | Not |
2 | Afternoon 2:00 | Not |
3 | Afternoon 7:00 | Be |
4 | Afternoon 4:00 | Be |
5 | Afternoon 5:00 | Not |
6 | Afternoon 6:00 | Be |
Suppose server 110 next in the afternoon 8:00 receive request to file #5.Processor can be compared the last-minute plea time of nearest requested project with the project that is removed recently, rather than compares with each project in the high-speed cache.In this respect, confirmed request time (5:00 in afternoon) to file #5 than just evening more requested time of more dispossessed file (file #1 is 1:00 in the afternoon), so can file #5 be increased in the high-speed cache.If thereby file #4 must be removed to file #5 provides the space, the request record 145 that generates so can be as follows.
UID | Project is by the date and time of last-minute plea | Project is current to be stored in the high-speed cache? |
1 | Afternoon 1:00 | Not |
2 | Afternoon 2:00 | Not |
3 | Afternoon 7:00 | Be |
-X-＞4 | Afternoon 4:00 | Not |
5 | Afternoon 8:00 | Be |
6 | Afternoon 6:00 | Be |
On the other hand, native system can be compared the time value that the current project and the last-minute plea from it of last dispossessed project are survived with method in high-speed cache.Get back to above-mentioned example, when native system and method when 7:00 selects project and evicts from the afternoon, it evicts file #1 from, and the not requested time is not longer because there is alternative document in high-speed cache, to shelve.Thus; If definition " the worst operator " is nearest dispossessed project; And if definition " time that is wasted " is for being shelved on not requested time span in the high-speed cache before being determined a crime at its, file #1 is the worst operator and six hours (7:00 is evicted from deducts 1:00 by last-minute plea) of its waste so.
In this respect, if estimate new projects than " the worst operator " " waste " more time, the one side of the present invention and method can be confirmed not need new projects are carried out high-speed cache.In this respect, it will be by high-speed cache when file #5 is asked, and is because between its last-minute plea (5:00 in afternoon) and its current request (8:00 in afternoon) be three hours at interval, shorter than the time (six hours) of the worst operator's waste.But, suppose that file #11 is asked in the identical time (8:00 in afternoon) with file #5, but file #11 (11:00 in the morning) before nine hours was asked before.If file #11 is placed in the high-speed cache and it was not asked at other nine hours, this means its six hours waste more time in high-speed cache than the worst current operator's file #1.Therefore, native system and method can confirm that file #11 does not need by high-speed cache.
If the sundry item in the last requested time ratio high-speed cache of the project of current request early, processor can determine project not to be carried out high-speed cache.Even so, the time of reflecting current request is write down in still renewable request.For example, suppose that 9:00 receives the request to file #1 in the afternoon, the request record is as follows so.
UID | Project is by the date and time of last-minute plea | Project is current to be stored in the high-speed cache? |
1 | Afternoon 1:00 | Not |
2 | Afternoon 2:00 | Not |
3 | Afternoon 7:00 | Be |
-X-＞4 | Afternoon 4:00 | Not |
5 | Afternoon 8:00 | Be |
6 | Afternoon 6:00 | Be |
Native system and method can compare the previous request (file #1 is 1:00 in the afternoon) of the project of current request and last-minute plea (file #4 is at 4:00) to nearest dispossessed project.Even file #4 was not evicted from by request because of the long time in high-speed cache, it is also than requested time of file #1 more late (putting aside system) to the fact that the current request of file #1 is assessed.Therefore, file #1 will not be placed in the high-speed cache, but its record will be updated as follows.
UID | Project is by the date and time of last-minute plea | Project is current to be stored in the high-speed cache? |
1 | Afternoon 9:00 | Not |
2 | Afternoon 2:00 | Not |
3 | Afternoon 7:00 | Be |
-X-＞4 | Afternoon 4:00 | Not |
5 | Afternoon 8:00 | Be |
6 | Afternoon 6:00 | Be |
In this respect, if the afternoon 10:00 of file #1 after one hour asked once more, it will be added in the high-speed cache because it than just the requested time of more dispossessed project (file #4 is 4:00 in the afternoon) more the evening (9:00 in afternoon).
As stated, the one side of native system and method use the time (except other) of time and the last-minute plea of current request to identify project whether should be by high-speed cache.
On the other hand, native system and method use the time of current request, the time of last-minute plea and the time of request more early to make a policy.And when making decision-making, native system can be used different weights with method.For example, whether when identifying project should be by high-speed cache the time, the time of last-minute plea can think more important than the time of more Zao request.
A kind of such system and method uses exponential damping.As just example, each project can be assigned with a priority value, so that if necessary, thereby the project of lower priority removed to the project of higher priority the space is provided from high-speed cache.Only a possible method is included as each allocation of items priority value " E ", wherein:
E
n＝-1*(ALPHA*LS
n+(1-ALPHA)*E
n-1)；
N request that takes place of " n " expression, for example, E
10The expression project is asked the priority value after 10 times;
" LS
n" time value that passes between request and the request before of n generation of expression, for example, LS
10Be illustrated in the time value that passes between the 9th time of project request and the 10th request; And
" ALPHA " representes the value between 0 and 1 and comprises 0 and 1.In this respect, processor can calculate its priority value when project is asked at every turn.If the sundry item in the priority ratio high-speed cache of directory entry is high as a result, project is by high-speed cache.If there are not enough spaces to give project in the high-speed cache, the project of lower priority can be removed.(should be understood that the multiplier-1 in the above-mentioned formula can omit, in this case, can think higher E
nBe worth lower E
nValue does not more need high-speed cache.)
As stated, but the calculating priority level value so that give nearest request bigger weight than early request.In this respect, if use above-mentioned for E
nFormula, thereby can select ALPHA greater or lesser weight to be provided for the latest request.For example, be 0.9 if select ALPHA, the duration that 90% of priority value depends between current request and the last-minute plea.But, be 0.2 if select ALPHA, priority value is 20% duration of depending between current request and the last-minute plea only; All the other will depend on the duration between the previous request.In this respect, can select ALPHA based on the demand of system.Also can automatically and dynamically adjust ALPHA based on the periodic statistics analysis of system.
Along with receiving more request subsequently, but previous request reduces the influence index ground of the high-speed cache priority of project.For example, suppose that project is had 10 requests.Even E
nThe ALPHA value be set to 0.2 (making priority value only 20% depend on two duration between the request recently), the duration between first and second requests will be far smaller than duration between the 9th and the tenth request to the influence of priority value to the influence of priority value.In fact, if ALPHA is 0.2 and has about 10 requests that the influence of so last duration is about 10: 1 than the duration the earliest.On the other hand, ALPHA can be set to 1, and in this case, priority value places one's entire reliance upon the duration between the last request.
If receive for the first time the request of project and use the above-mentioned E of being used for
nFormula, can be E
0Choose default value.Because less E value is typically indicated the project of higher priority,, can be E so if therefore preferably give the project that had never seen in the past high priority
0Choose little default value, vice versa.
Replacedly, request record 145 can be the single E value of each project storage, and just, it is not the E value of a separation of each request storage of each project.In this respect, when project was asked for the first time, can store specific E value also was to ask its for the first time with the last-minute plea of directory entry.When the next one request that receives project, native system can check with method whether current E value is identical with particular value.If identical, can suppose that ALPHA=1 calculates the E value, wherein the entitlement in the formula heavily was placed on the time interval between first and second requests.If it is not particular value that native system and method are confirmed current E value, so will be according to the general value computing formula of ALPHA.In any case system and method can use the previous E value of E value replacement that newly calculates then.
An advantage of native system and method is its dirigibility, for example it can with above-mentioned aspect implement in the different configuration, perhaps can with above-mentioned aspect cooperative cooperating.
For example, said system and method can combine with other system and method and be used for confirming whether information project should be by high-speed cache.In this respect, can have such situation: project is carried out high-speed cache, and no matter it never by before the fact of asking.Processor can automatically be stored in project in the high-speed cache when there is the space in high-speed cache, and just, the size of project deducts the combined size of the every other project (if any) that is stored in the high-speed cache less than the total volume of high-speed cache.Replacedly, but can exist other directory entries relevant whether should be by the characteristic of high-speed cache with project.For example, can be processor provides the indication file very welcome information, and above-described E
nFormula can comprise that the popularity of file is as weight factor.
Native system and method also can be made the decision-making of high-speed cache and not store the accurate date and time of request based on the time of request.Like the description of top combination priority value, native system and method can be stored the value that calculates from the formula with a lot of parameters, in wherein a lot of parameters only one be request time.
Also as stated, native system and method do not receive the restriction of any specific size of project.As just example, single project can comprise that part or both of fixed size of file, the data of variable sizeization include.Can consider to store and the example of the audio file of the variable sizeization that flows, for example comprise the file of 8.5MB of block of block and the 0.5MB of 4 each 2MB with the block of fixed size.The user stops video after finishing watching beginning through being everlasting, so server will only send first block or preceding two blocks probably.On the one hand, native system can consider that with method each block is one and separates project, and in this case, preceding two blocks maybe be by high-speed cache and all the other blocks maybe be by high-speed cache.
On the other hand, native system and method can consider that whole file is independent project, in this case, corresponding to the request repeatedly to file, even only first or preceding two blocks are transferred into the terminal user, also all blocks are carried out high-speed cache.When server 110 passed through proxy from other server availability files according to http protocol, this aspect can be useful especially; For server 110, can not by preceding two blocks of demand file all the other blocks be redirected to other servers from its high-speed cache outflow.
Again on the other hand, native system can be evicted project partly from according to different standards according to the whole project of system and method high-speed cache again with method.For example, server can be based on all four blocks that the request of file write down high-speed cache 8.5MB file.But server also can use the cache algorithm of knowing (for example, least recently used (LRU) algorithm) to evict unwelcome block once in a while from, if for example latter two block of 8.5MB file seldom is sent out to the user then they are evicted from.As stated, native system and method can determine whether the up-to-date requested project of high-speed cache through the request time of up-to-date requested file is compared with the survival of nearest dispossessed project at interval.In the aspect of describing in this manual, native system and method can compare the request time of up-to-date requested file and the time-to-live of nearest dispossessed block.
And although when native system and method and the marquee account end/server content-certain benefits of can gushing out when distributing network is used in combination, some aspect also can be implemented in loop system little as computer chip.As just example and as shown in Figure 2; Microprocessor 210 can be from command source 220 preextraction microcode instruction sequences; And if system estimates that instruction will be used in the near future, be stored in the less relatively high-speed cache 230 that is arranged on the single semiconductor chip 240 with them.In this respect, the independent project of information can be formed by the microcode instruction sequence of microprocessor retrieval and processing.When microprocessor 210 needs instruction, from high-speed cache control 250, ask it.Be stored in the high-speed cache 230 if instruction is the part of branch instruction and the branch of instruction, control 250 provides instruction from high-speed cache.Otherwise applicable branch is obtained in control 250 from instruction storage 220.If from storing retrieval 220, it will be by high-speed cache so by for the first time in branch.But, if branch by before retrieved, control 250 final time that can be processed based on branch and the relation decisions that are stored in other branches in the high-speed cache so and carry out high-speed cache branch.
On the contrary, native system and method can be implemented in the network based on system bigger than above-described network.For example; As shown in Figure 3; Limit server 310 can be from the server 315-16 of the second level request msg; Second level server 315-16 can have their high-speed cache 325-26 separately and request record group 335-36, and only comprises the part of the file that can obtain from other servers, and wherein other servers are operated by the company of the server of operation shown in Fig. 3.Under many circumstances, second level server will have the memory capacity bigger than limit server, like bigger cache memory sizes.Thus, second level server 315-16 can be from other servers such as third level server 340-41 demand file, and conversely, third level server can be stored all information that (perhaps can obtain) can obtain via server 310.Thus, can cause the request of file and its high-speed cache multi-stage cascade from the request of any client terminal device 150-53 total system 300 to file.In this respect, can use native system and method to confirm that which file is cached at limit server 310 and which file should be redirected to and have more jumbo large high-speed buffer memory.
When the limit server that distributes when native system and method and region is used in combination, may be favourable especially.For example, if native system and method are implemented on the limit server that is arranged in extensive distribution geographic area, can change according to the position to a great extent by the request of limit server service.For example, use the video clipping of making laughs of Japanese maybe be more welcome in user by the limit cache service in Tokyo.But montage possibly be out of favour in the user by the limit cache service in London, therefore stored clips not.
Individual server also can have multilevel cache and need not to visit these high-speed caches by network.For example, as shown in Figure 4, computing machine 400 can at first write down 410 inspection items through inquiry with high-speed cache 411 relevant requests.If project not in high-speed cache, can be inquired about the request record 420 of second independent groups relevant with the second independent high-speed cache 421.If second high-speed cache does not contain this project, then computing machine can be checked with the request of other groups and write down other relevant high-speed caches.
In this respect, native system and the method use that can combine with device with a plurality of dissimilar storeies.For example, server can drive at solid state hard disc (for example, carry-on dish) and a plurality of local disk of local accessing individual.The comparable hard drive of flash memory has littler capacity, but on average, it also can provide information than hard drive quickly.Further, server can comprise be less than whole can requested information; Thus, the information of its accessible storage on the server of the information of generation.This information can be with the stored in form of block, and block is jointly formed video file.
Fig. 6 only illustrates a kind of method that can in system, implement, wherein in the system with the block of retrieval rate not at the same level and capacity storage information, for example, flash memory, disk drive and be positioned at the storer (as from original server) of other nodes.Can from the fastest storer of memory block, retrieve block; For example; If in flash memory then from flash memory, retrieve, if not from disk drive, retrieve, and if neither be stored in and also be not stored in the flash memory in the disk drive then from original server, retrieve.And, whenever acquisition from original server during block, can be on local disk stored copies (and evicting least active block from from local disk where necessary).
But, although from server the retrieval block after, can automatically with block stores in magnetic disk memory, but from disk the retrieval block after, can automatically it be placed in the flash memory.And, can block directly not delivered to flash memory from original server.More properly, aspect of system and method for the present invention, shown in label 610-13, the time-to-live of the nearest dispossessed block when the time ratio flash memory that the last-minute plea from block passes, block only was sent to flash memory from magnetic disk memory in short-term.
Again on the other hand, if there is the space in the flash memory, the system and method for Fig. 6 will be automatically with block stores in flash memory.Replacedly, automatically will directly store into from any block that original server receives the flash memory in the time interval till it can begin at the space state from high-speed cache to evict to first of the block of high speed buffer memory and (for example, not pass through disk).
Except the date and time that relies on the client terminal device request items, high-speed cache also can use the basis of other time-based incidents as the high-speed cache decision.For example; If being executable file and system and method, on personal computer, implements information project; Can think so relevant time of request be file from time that disk downloads to special-purpose disk cache (just; The request that in the assembly of computing machine, generates forms the request of the demand of file in download to disk cache, and the time of request is the time that file begins to download).Replacedly, the time of request can think to download files into the time that the RAM preprocessor begins execute file.Further, the time of request can be thought time, or time of accomplishing request of the time of the request of receiving, the request of sending.
Native system and method may further include the measure of different protection data.For example, although request record 145 can be stored as metadata among the RAM with fast access, record also can often store disk into, if other programs are restarted so that relative program crashes perhaps, can read state and need not rebuild from disk.
The major part of above-mentioned alternative embodiment is not repelled each other, can implement to realize unique advantage with different combinations on the contrary.Because can be at these and other variations and combination that do not break away from by claim in the defined scope of the present invention the characteristic of discussing above using, so the description of the foregoing description should be understood that to explain rather than like the defined limitation of the present invention of claim.Should also be understood that the providing of example of the present invention (and with the phrase of expressing " for example ", " comprising " or the like) should not be construed as is restricted to specific examples with the present invention; More properly, these examples only are to be used to explain of a lot of feasible embodiment.
Industrial applicability
The present invention has the wide industrial application, includes but not limited to computer data processing system.
Claims (according to the modification of the 19th of treaty)
1. method comprises:
Receive the request that information project is handled at the processor place, wherein said processor has relevant high-speed cache;
When said project is stored in the said high-speed cache, the requested project of retrieval from said high-speed cache;
When said project is not stored in the said high-speed cache, the requested project of retrieval from other storeies;
When said project in the scheduled period not by before ask out-of-dately, handle said project and said project be not stored in the said high-speed cache;
When said project in the scheduled period by before asked and said before the time ratio of request to the nearest request of each project of being stored in one group of project in the said high-speed cache all early the time, handle said project and said project be not stored in the said high-speed cache; And
When said project in the scheduled period by before asked and said before the time ratio of request to the nearest request of at least one project of being stored in one group of project in the said high-speed cache when late, handle said project and said project be stored in the said high-speed cache.
2. method according to claim 1 wherein receives described request through network from client terminal device by server, and the request of handling said project comprises requested project is sent to said client terminal device.
3. method according to claim 2, wherein said project comprise the audio or video data that provide at said client terminal device.
4. method according to claim 3, wherein said project comprises file.
5. method according to claim 4, wherein said project comprise the file of part.
6. method according to claim 1, the last-minute plea that further comprises any other project in the last-minute plea of certain project being compared said one group of project all early the time, remove said certain project from said one group of project.
7. method according to claim 6 wherein removed said project before requested project being stored in the said high-speed cache.
8. method according to claim 7 when the size that wherein surpasses said high-speed cache when the size of requested project deducts the combined size of said one group of project, removes said project.
9. method according to claim 1, wherein said project comprises computer instruction, the request of handling said project comprises handles said instruction.
10. method according to claim 1, wherein said project comprises content file, the request of handling said project comprises content is offered the user.
11. method according to claim 1, the said one group of project that wherein is stored in the said high-speed cache comprises all items that is stored in the said high-speed cache.
12. a method comprises:
Reception is to the current request of first project of electronics canned data, and said first project is stored in the first memory;
When said first project also is stored in the second memory, said first project is provided from said second memory;
When said first project is not stored in the said second memory, said first project is provided from said first memory;
Use processor to confirm whether at the fixed time said first project was asked in the section before;
When definite said first project by before ask out-of-date; Use processor to confirm first duration relevant with said first project, wherein said first duration is to the current request of said first project with to the duration between the request before said first project;
Use processor to confirm to be stored in second duration of each project of second project of asking before a group in the said second memory, wherein second value is to the current request of said first project with to the duration between the last-minute plea of said second project; And
When said first project by before asked and said first duration when being shorter than at least one of said second duration, said first project is stored in the said second memory.
13. method according to claim 12 further comprises based on other standards said first project is stored in the said second memory.
14. method according to claim 13, wherein said other standards comprise the popularity of said first project.
15. method according to claim 12 further comprises through provide the reference for the position of said project that said first project is provided to the request terms destination entity.
16. method according to claim 12 further comprises through provide the copy of said project that said first project is provided to the request terms destination entity.
17. a method comprises:
Reception is to the request of first project of electronics canned data;
When said first project at the fixed time in the section not by before ask out-of-dately, said first project is provided from first memory and said first project is not stored in the second memory;
When said first project is stored in the said second memory, said first project is provided from said second memory, said second memory is also stored a plurality of sundry items, each of said a plurality of sundry items at least by before asked twice;
When confirm said first project by before asked out-of-dately, use processor to confirm first value relevant with said first project, wherein said first value is based on to the duration between the asking before of said first project;
Use processor confirm be stored in said second memory in one group before the second relevant value of each project in second project of asking, wherein said second is worth based on to the current request of said first project with to the duration between the last-minute plea of said second project; And
When said first project at the fixed time in the section by before ask out-of-dately, the comparative result based on said first value and said second is worth provides said first project also said first project to be stored in the said second memory from said first memory.
18. method according to claim 17 is wherein confirmed said second value based on weighting function, and is applied to ask and the weight minimizing when receiving another request at every turn of the duration between the request subsequently.
19. method according to claim 17, wherein said second is worth based on following function:
Second value=-1* (ALPHA*LS
n+ (1-ALPHA) * E
N-1);
N request that takes place of " n " expression;
" LS
n" be illustrated in the time value that passes between n request that takes place and the request before; And
" ALPHA " representes the value between 0 and 1 and comprises 0 and 1.
20. method according to claim 18, wherein said first value is based on said function.
21. a system comprises:
High-speed cache, said high-speed cache is configured to be used for the canned data project;
Other storeies, said other storeies are configured to be used for the canned data project;
Processor, said processor are configured to be used for provide to request unit in said high-speed cache retrieval and stored items and with said project according to instruction;
Said commanded response in from the described request device to by the request of request items, said instruction comprises:
When said requested project is stored in the said high-speed cache, the said requested project of retrieval from said high-speed cache;
When said requested project is not stored in the said high-speed cache, from said other storeies, retrieve said requested project;
When said project in the scheduled period not by before ask out-of-dately, said requested project is provided to the described request device, and before next one request, said requested project is not stored in the said high-speed cache;
When said project in the scheduled period by before asked and said before the time ratio of request last-minute plea time of each project all early time of being stored in one group of project in the said high-speed cache; Said requested project is provided to the described request device, and before next one request, said requested project is not stored in the said high-speed cache; And
When said project in the scheduled period by before asked and said before the time ratio of request when being stored in evening last-minute plea time of at least one project of one group of project in the said high-speed cache, will said requested project provide before said requested project to be stored in the said high-speed cache to the described request device and in next one request.
22. system according to claim 21, wherein said processor is at the node place of network, and the described request device is included in the device with the node different network nodes place of said processor.
23. system according to claim 21, wherein said processor is at the node place of network, and the described request device is included in the multiple arrangement at a plurality of network nodes place different with the node of said processor.
24. system according to claim 23, wherein said information project comprises video information, and said network comprises the internet, and the described request device comprises subscriber computer.
25. system according to claim 21, wherein said processor is identical with the described request device so that the project that said processor processes is retrieved from said high-speed cache and other storeies.
26. a system comprises:
Processor, said processor are configured to be used for according to instruction in storer retrieval and stored items;
First memory, said first memory have first capacity and first access time, and wherein, the access time representes that said processor obtains the averaging time that information spends from storer;
Second memory, said second memory have second capacity and second access time, and said first capacity of said second volume ratio is big and said second access time is slower than said first access time;
The 3rd storer, said the 3rd storer has the 3rd capacity and the 3rd access time, and said second capacity of said the 3rd volume ratio is big and said the 3rd access time is slower than said second access time;
Said commanded response is in the request to said project that receives through said processor, and said instruction comprises:
When requested project is stored in the said first memory, the said requested project of retrieval from said first memory;
When said requested project is stored in the said second memory, the said requested project of retrieval from said second memory;
According to said project the time point of described request whether be stored in the said second memory and from time that the requested final time of said project begins to be passed whether less than evicting the duration at last from; Said requested project is stored in the said first memory, wherein saidly evicts the duration at last from and comprise the duration till last-minute plea when still being stored in the said first memory to nearest dispossessed project begins to evict from from first memory to nearest dispossessed project; And
Whether be stored in the said second memory and whether said project is from said the 3rd storer, to retrieve according to said project at the time point of described request, said requested project is stored in the said second memory.
27. system according to claim 26, wherein said first memory is a flash memory.
28. system according to claim 27, wherein said second memory is a magnetic disk memory.
29. system according to claim 27, wherein said processor is through said the 3rd storer of access to netwoks.
30. system according to claim 26, wherein said information project comprises the block of video file.
31. a system comprises:
Processor, said processor are configured to be used for according to instruction in storer retrieval and stored items;
First memory, said first memory has first memory capacity;
Second memory, said second memory have second memory capacity bigger than said first memory capacity;
The 3rd storer, said the 3rd storer have three memory capacity bigger than said second memory capacity;
The request that said commanded response receives in said processor to said project, said instruction comprises:
When said requested project is stored in the said first memory, the said requested project of retrieval from said first memory;
When said requested project is stored in the said second memory, the said requested project of retrieval from said second memory;
When said requested project is stored in said the 3rd storer, the said requested project of retrieval from said the 3rd storer;
Confirm to be stored in a plurality of projects and the priority value of requested project in the said first memory; Said priority value is based on pri function; Said pri function is wherein used less weight to the duration between the request early of project based on to the duration between the request of project;
When said project by before asked; And said requested project is stored in the said second memory; And when the priority value of said requested project is bigger than the priority value that is stored at least one sundry item in the said first memory, said requested project is stored in the said first memory.
32. system according to claim 31, wherein said priority value is based on following function:
Priority value=-1* (ALPHA*LS
n+ (1-ALPHA) * E
N-1);
N request that takes place of " n " expression;
" LS
n" be illustrated in the time value that passes between n request that takes place and the former request; And
" ALPHA " representes the value between 0 and 1 and comprises 0 and 1.
33. system according to claim 31, wherein said first memory had for first access time, and wherein the access time representes that said processor obtains the averaging time that information spends from storer; Said second memory has second access time slower than said first access time; And said the 3rd storer has three access time slower than said second access time.
Claims (33)
1. method comprises:
Receive the request that information project is handled at the processor place, wherein said processor has relevant high-speed cache;
When said project is stored in the said high-speed cache, the requested project of retrieval from said high-speed cache;
When said project is not stored in the said high-speed cache, the requested project of retrieval from other storeies;
When said project in the scheduled period not by before ask out-of-dately, handle said project and said project be not stored in the said high-speed cache;
When said project in the scheduled period by before asked and said before the time ratio of request to the nearest request of each project of being stored in one group of project in the said high-speed cache all early the time, handle said project and said project be not stored in the said high-speed cache; And
When said project in the scheduled period by before asked and said before the time ratio of request to the nearest request of at least one project of being stored in one group of project in the said high-speed cache when late, handle said project and said project be stored in the said high-speed cache.
2. method according to claim 1 wherein receives described request through network from client terminal device by server, and the request of handling said project comprises requested project is sent to said client terminal device.
3. method according to claim 2, wherein said project comprise the audio or video data that provide at said client terminal device.
4. method according to claim 3, wherein said project comprises file.
5. method according to claim 4, wherein said project comprise the file of part.
6. method according to claim 1, the last-minute plea that further comprises any other project in the last-minute plea of certain project being compared said one group of project all early the time, remove said certain project from said one group of project.
7. method according to claim 6 wherein removed said project before requested project being stored in the said high-speed cache.
8. method according to claim 7 when the size that wherein surpasses said high-speed cache when the size of requested project deducts the combined size of said one group of project, removes said project.
9. method according to claim 1, wherein said project comprises computer instruction, the request of handling said project comprises handles said instruction.
10. method according to claim 1, wherein said project comprises content file, the request of handling said project comprises content is offered the user.
11. method according to claim 1, the said one group of project that wherein is stored in the said high-speed cache comprises all items that is stored in the said high-speed cache.
12. a method comprises:
Reception is to the current request of first project of electronics canned data, and said first project is stored in the first memory;
When said first project also is stored in the second memory, said first project is provided from said second memory;
When said first project is not stored in the said second memory, said first project is provided from said first memory;
Use processor to confirm whether at the fixed time said first project was asked in the section before;
When definite said first project by before ask out-of-date; Use processor to confirm first duration relevant with said first project, wherein said first duration is to the current request of said first project with to the duration between the request before said first project;
Use processor to confirm to be stored in second duration of each project of second project of asking before a group in the said second memory, wherein second value is to the current request of said first project with to the duration between the last-minute plea of said second project; And
When said first project by before asked and said first duration when being shorter than at least one of said second duration, said first project is stored in the said second memory.
13. method according to claim 12 further comprises based on other standards said first project is stored in the said second memory.
14. method according to claim 13, wherein said other standards comprise the popularity of said first project.
15. method according to claim 12 further comprises through provide the reference for the position of said project that said first project is provided to the request terms destination entity.
16. method according to claim 12 further comprises through provide the copy of said project that said first project is provided to the request terms destination entity.
17. a method comprises:
Reception is to the request of first project of electronics canned data;
When said first project at the fixed time in the section not by before ask out-of-dately, said first project is provided from first memory and said first project is not stored in the second memory;
When said first project is stored in the said second memory, said first project is provided from said second memory, said second memory is also stored a plurality of sundry items, each of said a plurality of sundry items at least by before asked twice;
When said first project at the fixed time in the section not by before ask out-of-dately, said first project is provided from said first memory and said first project is not stored in the said second memory;
When confirm said first project by before asked out-of-dately, use processor to confirm first value relevant with said first project, wherein said first value is based on to the duration between the asking before of said first project;
Use processor confirm be stored in said second memory in one group before the second relevant value of each project in second project of asking, wherein said second is worth based on to the current request of said first project with to the duration between the last-minute plea of said second project; And
When said first project at the fixed time in the section by before ask out-of-dately, the comparative result based on said first value and said second is worth provides said first project also said first project to be stored in the said second memory from said first memory.
18. method according to claim 17 is wherein confirmed said second value based on weighting function, and is applied to ask and the weight minimizing when receiving another request at every turn of the duration between the request subsequently.
19. method according to claim 17, wherein said second is worth based on following function:
Second value=-1* (ALPHA*LS
n+ (1-ALPHA) * E
N-1);
N request that takes place of " n " expression;
" LS
n" be illustrated in the time value that passes between n request that takes place and the request before; And
" ALPHA " representes the value between 0 and 1 and comprises 0 and 1.
20. method according to claim 18, wherein said first value is based on said function.
21. a system comprises:
High-speed cache, said high-speed cache is configured to be used for the canned data project;
Other storeies, said other storeies are configured to be used for the canned data project;
Processor, said processor are configured to be used for provide to request unit in said high-speed cache retrieval and stored items and with said project according to instruction;
Said commanded response in from the described request device to by the request of request items, said instruction comprises:
When said requested project is stored in the said high-speed cache, the said requested project of retrieval from said high-speed cache;
When said requested project is not stored in the said high-speed cache, from said other storeies, retrieve said requested project;
When said project in the scheduled period not by before ask out-of-dately, said requested project is provided to the described request device, and before next one request, said requested project is not stored in the said high-speed cache;
When said project in the scheduled period by before asked and said before the time ratio of request last-minute plea time of each project all early time of being stored in one group of project in the said high-speed cache; Said requested project is provided to the described request device, and before next one request, said requested project is not stored in the said high-speed cache; And
When said project in the scheduled period by before asked and said before the time ratio of request when being stored in evening last-minute plea time of at least one project of one group of project in the said high-speed cache, will said requested project provide before said requested project to be stored in the said high-speed cache to the described request device and in next one request.
22. system according to claim 21, wherein said processor is at the node place of network, and the described request device is included in the device with the node different network nodes place of said processor.
23. system according to claim 21, wherein said processor is at the node place of network, and the described request device is included in the multiple arrangement at a plurality of network nodes place different with the node of said processor.
24. system according to claim 23, wherein said information project comprises video information, and said network comprises the internet, and the described request device comprises subscriber computer.
25. system according to claim 21, wherein said processor is identical with the described request device so that the project that said processor processes is retrieved from said high-speed cache and other storeies.
26. a system comprises:
Processor, said processor are configured to be used for according to instruction in storer retrieval and stored items;
First memory, said first memory have first capacity and first access time, and wherein, the access time representes that said processor obtains the averaging time that information spends from storer;
Second memory, said second memory have second capacity and second access time, and said first capacity of said second volume ratio is big and said second access time is slower than said first access time;
The 3rd storer, said the 3rd storer has the 3rd capacity and the 3rd access time, and said second capacity of said the 3rd volume ratio is big and said the 3rd access time is slower than said second access time;
Said commanded response is in the request to said project that receives through said processor, and said instruction comprises:
When requested project is stored in the said first memory, the said requested project of retrieval from said first memory;
When said requested project is stored in the said second memory, the said requested project of retrieval from said second memory;
According to said project the time point of described request whether be stored in the said second memory and from time that the requested final time of said project begins to be passed whether less than evicting the duration at last from; Said requested project is stored in the said first memory, wherein saidly evicts the duration at last from and comprise the duration till last-minute plea when still being stored in the said first memory to nearest dispossessed project begins to evict from from first memory to nearest dispossessed project; And
Whether be stored in the said second memory and whether said project is from said the 3rd storer, to retrieve according to said project at the time point of described request, said requested project is stored in the said second memory.
27. system according to claim 26, wherein said first memory is a flash memory.
28. system according to claim 27, wherein said second memory is a magnetic disk memory.
29. system according to claim 27, wherein said processor is through said the 3rd storer of access to netwoks.
30. system according to claim 26, wherein said information project comprises the block of video file.
31. a system comprises:
Processor, said processor are configured to be used for according to instruction in storer retrieval and stored items;
First memory, said first memory has first memory capacity;
Second memory, said second memory have second memory capacity bigger than said first memory capacity;
The 3rd storer, said the 3rd storer have three memory capacity bigger than said second memory capacity;
The request that said commanded response receives in said processor to said project, said instruction comprises:
When said requested project is stored in the said first memory, the said requested project of retrieval from said first memory;
When said requested project is stored in the said second memory, the said requested project of retrieval from said second memory;
When said requested project is stored in said the 3rd storer, the said requested project of retrieval from said the 3rd storer;
Confirm to be stored in a plurality of projects and the priority value of requested project in the said first memory; Said priority value is based on pri function; Said pri function is wherein used less weight to the duration between the request early of project based on to the duration between the request of project;
When said project by before asked; And said requested project is stored in the said second memory; And when the priority value of said requested project is bigger than the priority value that is stored at least one sundry item in the said first memory, said requested project is stored in the said first memory.
32. system according to claim 31, wherein said priority value is based on following function:
Priority value=-1* (ALPHA*LS
n+ (1-ALPHA) * E
N-1);
N request that takes place of " n " expression;
" LS
n" be illustrated in the time value that passes between n request that takes place and the former request; And
" ALPHA " representes the value between 0 and 1 and comprises 0 and 1.
33. system according to claim 31, wherein said first memory had for first access time, and wherein the access time representes that said processor obtains the averaging time that information spends from storer; Said second memory has second access time slower than said first access time; And said the 3rd storer has three access time slower than said second access time.
Priority Applications (1)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
CN201510204702.6A CN104915319B (en) | 2009-08-21 | 2010-08-20 | The system and method for cache information |
Applications Claiming Priority (3)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US12/545,225 | 2009-08-21 | ||
US12/545,225 US8566531B2 (en) | 2009-08-21 | 2009-08-21 | System and method of selectively caching information based on the interarrival time of requests for the same information |
PCT/US2010/002317 WO2011022079A2 (en) | 2009-08-21 | 2010-08-20 | System and method of caching information |
Related Child Applications (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
CN201510204702.6A Division CN104915319B (en) | 2009-08-21 | 2010-08-20 | The system and method for cache information |
Publications (2)
Publication Number | Publication Date |
---|---|
CN102576350A true CN102576350A (en) | 2012-07-11 |
CN102576350B CN102576350B (en) | 2015-05-27 |
Family
ID=43606203
Family Applications (2)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
CN201080047230.3A Active CN102576350B (en) | 2009-08-21 | 2010-08-20 | System and method of caching information |
CN201510204702.6A Active CN104915319B (en) | 2009-08-21 | 2010-08-20 | The system and method for cache information |
Family Applications After (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
CN201510204702.6A Active CN104915319B (en) | 2009-08-21 | 2010-08-20 | The system and method for cache information |
Country Status (9)
Country | Link |
---|---|
US (7) | US8566531B2 (en) |
EP (3) | EP3125131B1 (en) |
JP (2) | JP5592489B2 (en) |
CN (2) | CN102576350B (en) |
AU (1) | AU2010284682B2 (en) |
CA (3) | CA3026715C (en) |
DE (1) | DE202010018478U1 (en) |
DK (2) | DK3125131T3 (en) |
WO (1) | WO2011022079A2 (en) |
Cited By (7)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
CN105359485A (en) * | 2013-06-28 | 2016-02-24 | 汤姆逊许可公司 | Method for retrieving, by a client terminal, a content part of a multimedia content |
CN107430552A (en) * | 2015-03-26 | 2017-12-01 | 阿尔卡特朗讯公司 | The caching based on classification cost for online Media |
CN107646187A (en) * | 2015-06-12 | 2018-01-30 | 慧与发展有限责任合伙企业 | Application identities cache |
CN109947665A (en) * | 2017-12-20 | 2019-06-28 | 阿里巴巴集团控股有限公司 | A kind of caching method and device |
CN110046175A (en) * | 2019-03-18 | 2019-07-23 | 阿里巴巴集团控股有限公司 | A kind of buffer update, data return method and device |
CN111209227A (en) * | 2018-11-21 | 2020-05-29 | 爱思开海力士有限公司 | Data processing system |
CN113971144A (en) * | 2021-10-27 | 2022-01-25 | 合肥学院 | Dynamic hybrid lottery method for multiprocessor priority arbitration |
Families Citing this family (14)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US8341207B2 (en) | 2010-04-07 | 2012-12-25 | Apple Inc. | Apparatus and method for matching users for online sessions |
WO2011153478A2 (en) * | 2010-06-04 | 2011-12-08 | Flashsoft Corporation | Cache management and acceleration of storage media |
US8732569B2 (en) * | 2011-05-04 | 2014-05-20 | Google Inc. | Predicting user navigation events |
US8527467B2 (en) * | 2011-06-30 | 2013-09-03 | International Business Machines Corporation | Compression-aware data storage tiering |
JP5304853B2 (en) * | 2011-07-27 | 2013-10-02 | 株式会社デンソー | Cooperation system, navigation system, in-vehicle device, and portable terminal |
US9323659B2 (en) | 2011-08-12 | 2016-04-26 | Sandisk Enterprise Ip Llc | Cache management including solid state device virtualization |
US9164904B2 (en) * | 2012-08-28 | 2015-10-20 | Hewlett-Packard Development Company, L.P. | Accessing remote memory on a memory blade |
WO2014138411A1 (en) * | 2013-03-06 | 2014-09-12 | Condusiv Technologies Corporation | System and method for tiered caching and storage allocation |
JP6027504B2 (en) * | 2013-08-02 | 2016-11-16 | 日本電信電話株式会社 | Application server and cache control method |
US20160062916A1 (en) * | 2014-08-27 | 2016-03-03 | The Board Trustees Of The Leland Stanford Junior University | Circuit-based apparatuses and methods with probabilistic cache eviction or replacement |
US9904874B2 (en) * | 2015-11-05 | 2018-02-27 | Microsoft Technology Licensing, Llc | Hardware-efficient deep convolutional neural networks |
US10963381B2 (en) * | 2018-11-26 | 2021-03-30 | Verizon Digital Media Services Inc. | Dynamic caching and eviction |
US11036594B1 (en) | 2019-07-25 | 2021-06-15 | Jetstream Software Inc. | Disaster recovery systems and methods with low recovery point objectives |
US11393548B2 (en) * | 2020-12-18 | 2022-07-19 | Micron Technology, Inc. | Workload adaptive scans for memory sub-systems |
Citations (2)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US5297270A (en) * | 1989-11-13 | 1994-03-22 | Zenith Data Systems Corporation | Programmable cache memory which associates each section of main memory to be cached with a status bit which enables/disables the caching accessibility of the particular section, and with the capability of functioning with memory areas of varying size |
US7496715B1 (en) * | 2003-07-16 | 2009-02-24 | Unisys Corporation | Programmable cache management system and method |
Family Cites Families (35)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
JP2502844B2 (en) * | 1991-07-11 | 1996-05-29 | 松下電送株式会社 | Electronic file device |
US5611049A (en) * | 1992-06-03 | 1997-03-11 | Pitts; William M. | System for accessing distributed data cache channel at each network node to pass requests and data |
US5381539A (en) * | 1992-06-04 | 1995-01-10 | Emc Corporation | System and method for dynamically controlling cache management |
CA2130395C (en) | 1993-12-09 | 1999-01-19 | David G. Greenwood | Multimedia distribution over wide area networks |
US5813031A (en) * | 1994-09-21 | 1998-09-22 | Industrial Technology Research Institute | Caching tag for a large scale cache computer memory system |
US6266742B1 (en) * | 1997-10-27 | 2001-07-24 | International Business Machines Corporation | Algorithm for cache replacement |
KR19990049284A (en) * | 1997-12-12 | 1999-07-05 | 구본준 | Data program unit |
JP2001318902A (en) * | 2000-05-09 | 2001-11-16 | Matsushita Electric Ind Co Ltd | Cache device |
JP3612271B2 (en) * | 2000-09-12 | 2005-01-19 | 株式会社東芝 | File system |
US6970939B2 (en) * | 2000-10-26 | 2005-11-29 | Intel Corporation | Method and apparatus for large payload distribution in a network |
US20020103974A1 (en) * | 2000-11-29 | 2002-08-01 | Giacomini Peter Joseph | Method and apparatus for economical cache population |
US6745295B2 (en) * | 2001-04-19 | 2004-06-01 | International Business Machines Corporation | Designing a cache with adaptive reconfiguration |
US7444662B2 (en) * | 2001-06-28 | 2008-10-28 | Emc Corporation | Video file server cache management using movie ratings for reservation of memory and bandwidth resources |
JP4042359B2 (en) * | 2001-07-10 | 2008-02-06 | 日本電気株式会社 | Cache control method and cache device |
US6687792B2 (en) * | 2001-09-27 | 2004-02-03 | Siemens Information & Communication Networks, Inc. | Method and system for selectively caching web elements |
US6687793B1 (en) * | 2001-12-28 | 2004-02-03 | Vignette Corporation | Method and system for optimizing resources for cache management |
KR100496159B1 (en) | 2002-06-29 | 2005-06-20 | 주식회사 케이티 | Usability-based Cache Management Scheme Method of Query Results |
US7093072B2 (en) * | 2003-02-21 | 2006-08-15 | Enterasys Networks, Inc. | Methods for improved data caching |
US7073027B2 (en) * | 2003-07-11 | 2006-07-04 | International Business Machines Corporation | Methods, systems and computer program products for controlling caching of distributed data |
US7349968B2 (en) * | 2003-07-31 | 2008-03-25 | International Business Machines Corporation | Method, system and program product for asynchronously processing requests |
US7085894B2 (en) * | 2003-09-11 | 2006-08-01 | International Business Machines Corporation | Selectively accepting cache content |
WO2006041471A2 (en) | 2004-10-06 | 2006-04-20 | Thomson Licensing | Method and system for caching data |
US7228388B2 (en) * | 2004-11-19 | 2007-06-05 | International Business Machines Corporation | Enabling and disabling cache bypass using predicted cache line usage |
WO2007001518A1 (en) | 2005-06-14 | 2007-01-04 | Broadband Royalty Corporation | Media stream distribution system |
TWI265414B (en) * | 2005-07-25 | 2006-11-01 | Ind Tech Res Inst | Data caching method and computer program product therefor |
US20070094450A1 (en) * | 2005-10-26 | 2007-04-26 | International Business Machines Corporation | Multi-level cache architecture having a selective victim cache |
US7577793B2 (en) * | 2006-01-19 | 2009-08-18 | International Business Machines Corporation | Patrol snooping for higher level cache eviction candidate identification |
JP2007241612A (en) * | 2006-03-08 | 2007-09-20 | Matsushita Electric Ind Co Ltd | Multi-master system |
US8166248B2 (en) * | 2006-06-12 | 2012-04-24 | Arris Group, Inc. | Caching of information according to popularity |
US7502890B2 (en) * | 2006-07-07 | 2009-03-10 | International Business Machines Corporation | Method and apparatus for dynamic priority-based cache replacement |
US7826944B2 (en) * | 2006-12-14 | 2010-11-02 | General Motors Llc | Configurable vehicle bus storage cache mechanism |
US7644230B1 (en) * | 2007-03-15 | 2010-01-05 | Silver Peak Systems, Inc. | Dynamic load management of network memory |
US20090144388A1 (en) * | 2007-11-08 | 2009-06-04 | Rna Networks, Inc. | Network with distributed shared memory |
US8612698B2 (en) * | 2008-10-31 | 2013-12-17 | Intel Corporation | Replacement policy for hot code detection |
US8103822B2 (en) * | 2009-04-26 | 2012-01-24 | Sandisk Il Ltd. | Method and apparatus for implementing a caching policy for non-volatile memory |
-
2009
- 2009-08-21 US US12/545,225 patent/US8566531B2/en active Active
-
2010
- 2010-08-20 CN CN201080047230.3A patent/CN102576350B/en active Active
- 2010-08-20 CA CA3026715A patent/CA3026715C/en active Active
- 2010-08-20 EP EP16188263.4A patent/EP3125131B1/en active Active
- 2010-08-20 DE DE202010018478.9U patent/DE202010018478U1/en not_active Expired - Lifetime
- 2010-08-20 DK DK16188263.4T patent/DK3125131T3/en active
- 2010-08-20 WO PCT/US2010/002317 patent/WO2011022079A2/en active Application Filing
- 2010-08-20 JP JP2012525535A patent/JP5592489B2/en active Active
- 2010-08-20 EP EP10810295.5A patent/EP2467784B1/en active Active
- 2010-08-20 EP EP20178341.2A patent/EP3722962A1/en active Pending
- 2010-08-20 CA CA2771599A patent/CA2771599C/en active Active
- 2010-08-20 CN CN201510204702.6A patent/CN104915319B/en active Active
- 2010-08-20 CA CA2942418A patent/CA2942418C/en active Active
- 2010-08-20 AU AU2010284682A patent/AU2010284682B2/en active Active
- 2010-08-20 DK DK10810295.5T patent/DK2467784T3/en active
-
2011
- 2011-08-19 US US13/213,779 patent/US8572327B2/en active Active
-
2013
- 2013-10-08 US US14/048,869 patent/US8812791B2/en active Active
- 2013-10-16 US US14/055,210 patent/US8825960B2/en active Active
- 2013-10-16 US US14/055,357 patent/US8825961B2/en active Active
-
2014
- 2014-04-01 US US14/242,266 patent/US8904116B2/en active Active
- 2014-07-24 JP JP2014150555A patent/JP5814436B2/en active Active
- 2014-07-28 US US14/444,057 patent/US9104605B1/en active Active
Patent Citations (2)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US5297270A (en) * | 1989-11-13 | 1994-03-22 | Zenith Data Systems Corporation | Programmable cache memory which associates each section of main memory to be cached with a status bit which enables/disables the caching accessibility of the particular section, and with the capability of functioning with memory areas of varying size |
US7496715B1 (en) * | 2003-07-16 | 2009-02-24 | Unisys Corporation | Programmable cache management system and method |
Non-Patent Citations (2)
Title |
---|
关炜: "《"99电脑应用精华本》", 30 June 1999, article "《高速缓存Cache尽知晓》" * |
郑纬民等: "《计算机系统结构》", 28 February 2001, article "《页面替换算法》", pages: 121 - 9 * |
Cited By (11)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
CN105359485A (en) * | 2013-06-28 | 2016-02-24 | 汤姆逊许可公司 | Method for retrieving, by a client terminal, a content part of a multimedia content |
CN107430552A (en) * | 2015-03-26 | 2017-12-01 | 阿尔卡特朗讯公司 | The caching based on classification cost for online Media |
CN107646187A (en) * | 2015-06-12 | 2018-01-30 | 慧与发展有限责任合伙企业 | Application identities cache |
CN109947665A (en) * | 2017-12-20 | 2019-06-28 | 阿里巴巴集团控股有限公司 | A kind of caching method and device |
CN109947665B (en) * | 2017-12-20 | 2023-06-13 | 阿里巴巴集团控股有限公司 | Caching method and device |
CN111209227A (en) * | 2018-11-21 | 2020-05-29 | 爱思开海力士有限公司 | Data processing system |
CN111209227B (en) * | 2018-11-21 | 2023-08-18 | 爱思开海力士有限公司 | Data processing system |
CN110046175A (en) * | 2019-03-18 | 2019-07-23 | 阿里巴巴集团控股有限公司 | A kind of buffer update, data return method and device |
CN110046175B (en) * | 2019-03-18 | 2023-02-28 | 创新先进技术有限公司 | Cache updating and data returning method and device |
CN113971144A (en) * | 2021-10-27 | 2022-01-25 | 合肥学院 | Dynamic hybrid lottery method for multiprocessor priority arbitration |
CN113971144B (en) * | 2021-10-27 | 2024-04-16 | 合肥学院 | Dynamic mixed lottery method for multiprocessor priority arbitration |
Also Published As
Similar Documents
Publication | Publication Date | Title |
---|---|---|
CN102576350B (en) | System and method of caching information | |
KR101997305B1 (en) | Application-driven cdn pre-caching | |
US8516114B2 (en) | Method and apparatus for content pre-fetching and preparation | |
EP3080720B1 (en) | Social-driven recaching of accessible objects | |
KR101228230B1 (en) | Methods and apparatus for self-organized caching in a content delivery network | |
US20090182946A1 (en) | Method and system for employing a multiple layer cache mechanism to enhance performance of a multi-user information retrieval system | |
CN101236569B (en) | Highly effective dynamic path analysis method based on ContextFS | |
CN101482882A (en) | Method and system for cross-domain treatment of COOKIE | |
CN105210352A (en) | Fingerprint-based, intelligent, content pre-fetching | |
US9015414B2 (en) | Load balancing based upon data usage | |
CN103650518A (en) | Predictive, multi-layer caching architectures | |
CN102307234A (en) | Resource retrieval method based on mobile terminal | |
CN109033759A (en) | Based on network performance management from the downloading in network-based digital data storage library | |
CN106681995B (en) | Data caching method, data query method and device | |
CN103455439A (en) | Local caching device, system and method for providing content caching service | |
CN102006500B (en) | Video dragging method and device applied to cache server | |
JP2004280405A (en) | System and method for providing information, and computer program | |
JP5272428B2 (en) | Predictive cache method for caching information with high access frequency in advance, system thereof and program thereof | |
CN102375881A (en) | Content signature notification | |
CN102164309B (en) | Program processing method, system and device | |
CN100473041C (en) | Method and system for searching seed for P2P system | |
US20230026912A1 (en) | Systems and methods for storing content items in secondary storage | |
JP2009193440A (en) | Cache system, server, and terminal | |
CN101388863A (en) | Implementing method and system for WAP gateway extraction service | |
US10841400B2 (en) | Request processing in a content delivery framework |
Legal Events
Date | Code | Title | Description |
---|---|---|---|
C06 | Publication | ||
PB01 | Publication | ||
C10 | Entry into substantive examination | ||
SE01 | Entry into force of request for substantive examination | ||
C14 | Grant of patent or utility model | ||
GR01 | Patent grant | ||
CP01 | Change in the name or title of a patent holder |
Address after: American CaliforniaPatentee after: Google limited liability companyAddress before: American CaliforniaPatentee before: Google Inc. |
|
CP01 | Change in the name or title of a patent holder |