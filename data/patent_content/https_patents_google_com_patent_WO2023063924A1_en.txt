WO2023063924A1 - Accelerating quantum-resistant, cryptographic hash-based signature computations - Google Patents
Accelerating quantum-resistant, cryptographic hash-based signature computations Download PDFInfo
- Publication number
- WO2023063924A1 WO2023063924A1 PCT/US2021/054431 US2021054431W WO2023063924A1 WO 2023063924 A1 WO2023063924 A1 WO 2023063924A1 US 2021054431 W US2021054431 W US 2021054431W WO 2023063924 A1 WO2023063924 A1 WO 2023063924A1
- Authority
- WO
- WIPO (PCT)
- Prior art keywords
- hash
- computer
- message
- recited
- implemented method
- Prior art date
Links
- 238000000034 method Methods 0.000 claims abstract description 56
- 230000015654 memory Effects 0.000 claims abstract description 15
- 230000006870 function Effects 0.000 claims description 22
- 238000012795 verification Methods 0.000 claims description 4
- 238000004422 calculation algorithm Methods 0.000 description 12
- 238000004891 communication Methods 0.000 description 12
- 238000012545 processing Methods 0.000 description 5
- 230000002093 peripheral effect Effects 0.000 description 4
- 230000005540 biological transmission Effects 0.000 description 3
- 238000004364 calculation method Methods 0.000 description 3
- 230000001413 cellular effect Effects 0.000 description 3
- 238000012546 transfer Methods 0.000 description 3
- 230000001351 cycling effect Effects 0.000 description 2
- 239000000463 material Substances 0.000 description 2
- 239000000758 substrate Substances 0.000 description 2
- 230000001133 acceleration Effects 0.000 description 1
- 230000004075 alteration Effects 0.000 description 1
- 238000013459 approach Methods 0.000 description 1
- 230000008859 change Effects 0.000 description 1
- 230000007547 defect Effects 0.000 description 1
- 238000011161 development Methods 0.000 description 1
- 230000000694 effects Effects 0.000 description 1
- 238000005516 engineering process Methods 0.000 description 1
- 230000036541 health Effects 0.000 description 1
- 230000002427 irreversible effect Effects 0.000 description 1
- 238000004519 manufacturing process Methods 0.000 description 1
- 238000007620 mathematical function Methods 0.000 description 1
- 238000010295 mobile communication Methods 0.000 description 1
- 238000012806 monitoring device Methods 0.000 description 1
- 230000003121 nonmonotonic effect Effects 0.000 description 1
- 230000004044 response Effects 0.000 description 1
- 238000009938 salting Methods 0.000 description 1
- 150000003839 salts Chemical class 0.000 description 1
- 239000004065 semiconductor Substances 0.000 description 1
- 230000003068 static effect Effects 0.000 description 1
- 230000001052 transient effect Effects 0.000 description 1
- 239000013598 vector Substances 0.000 description 1
- 230000000007 visual effect Effects 0.000 description 1
Classifications
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04L—TRANSMISSION OF DIGITAL INFORMATION, e.g. TELEGRAPHIC COMMUNICATION
- H04L9/00—Cryptographic mechanisms or cryptographic arrangements for secret or secure communications; Network security protocols
- H04L9/32—Cryptographic mechanisms or cryptographic arrangements for secret or secure communications; Network security protocols including means for verifying the identity or authority of a user of the system or for message authentication, e.g. authorization, entity authentication, data integrity or data verification, non-repudiation, key authentication or verification of credentials
- H04L9/3236—Cryptographic mechanisms or cryptographic arrangements for secret or secure communications; Network security protocols including means for verifying the identity or authority of a user of the system or for message authentication, e.g. authorization, entity authentication, data integrity or data verification, non-repudiation, key authentication or verification of credentials using cryptographic hash functions
- H04L9/3239—Cryptographic mechanisms or cryptographic arrangements for secret or secure communications; Network security protocols including means for verifying the identity or authority of a user of the system or for message authentication, e.g. authorization, entity authentication, data integrity or data verification, non-repudiation, key authentication or verification of credentials using cryptographic hash functions involving non-keyed hash functions, e.g. modification detection codes [MDCs], MD5, SHA or RIPEMD
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04L—TRANSMISSION OF DIGITAL INFORMATION, e.g. TELEGRAPHIC COMMUNICATION
- H04L9/00—Cryptographic mechanisms or cryptographic arrangements for secret or secure communications; Network security protocols
- H04L9/32—Cryptographic mechanisms or cryptographic arrangements for secret or secure communications; Network security protocols including means for verifying the identity or authority of a user of the system or for message authentication, e.g. authorization, entity authentication, data integrity or data verification, non-repudiation, key authentication or verification of credentials
- H04L9/3247—Cryptographic mechanisms or cryptographic arrangements for secret or secure communications; Network security protocols including means for verifying the identity or authority of a user of the system or for message authentication, e.g. authorization, entity authentication, data integrity or data verification, non-repudiation, key authentication or verification of credentials involving digital signatures
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04L—TRANSMISSION OF DIGITAL INFORMATION, e.g. TELEGRAPHIC COMMUNICATION
- H04L2209/00—Additional information or applications relating to cryptographic mechanisms or cryptographic arrangements for secret or secure communication H04L9/00
- H04L2209/12—Details relating to cryptographic hardware or logic circuitry
- H04L2209/122—Hardware reduction or efficient architectures
Definitions
- This document describes techniques and apparatuses directed at accelerating quantum-resistant, cryptographic hash-based signature computations.
- one or more processors implement a hash manager.
- the hash manager is configured to initialize variables, load the input message and initialized variables into an input buffer, and execute a hash-based signature computation.
- the hash-based signature computation is repeated for a predetermined number of iterations with each iteration involving loading at least a portion of a digest message directly into a configurable position in the input buffer. In so doing, this method of iterative hash computation bypasses memory copies and bus latencies, accelerating quantum-resistant, cryptographic hash-based signature computations.
- FIG. 1 illustrates an example operating environment that includes an example computing device, which is capable of implementing cryptographic techniques and other security functions in accordance with one or more aspects disclosed in this document;
- FIG. 2 illustrates one example integrated circuit component implemented as a cryptographic coprocessor
- FIG. 3 illustrates operations of a hash manager when executed by a processor
- FIG. 4 illustrates an example method, implemented by a hash manager, to accelerate iterative hash-based signature computations
- FIG. 5 illustrates an example method, implemented by a hash manager, to accelerate iterative hash-based signature computations by directly loading at least a portion of a digest message into a configurable position in the input buffer and performing a hash computation for a predetermined number of iterations;
- FIG. 6 illustrates an integrated circuit component implemented as a System-on- Chip (SoC) that can implement various aspects of accelerating iterative hash-based signature computations.
- SoC System-on- Chip
- Computing devices often include an integrated circuit with security circuitry and software to provide a measure of protection against defects, attacks, and other potentially compromising events.
- the security circuitry and software may implement a number of security paradigms, such as those adhering to guidelines including those outlined in the National Institute of Standards and Technology (NIST) and/or Public-Key Cryptography Standards (PKCS).
- NIST National Institute of Standards and Technology
- PKCS Public-Key Cryptography Standards
- the security circuitry and software adhering to PKCS standards, may verify the authenticity and integrity of the data the computing device receives and executes using digital signatures (e.g., cryptographic signatures).
- a digital signature scheme is a mathematical scheme employed to validate a digital message or document.
- a valid digital signature gives a recipient confidence to know that the message was generated by a known sender (“authenticity”) and that it was not manipulated sometime during transmission (“integrity”). In so doing, the security circuitry and software reduce the opportunity for information to be inadvertently exposed or for some function to be used in a harmful or otherwise unauthorized maimer.
- quantum computing In today’s computing environment, bad actors can uncover encrypted data or attack computing devices at a myriad of levels using a multitude of attack vectors. Recent development in quantum computing, for instance, greatly diminishes the protection many of these security paradigms afford, since they presuppose attacks using classical computing techniques. As a result, an attacker using quantum computing may be able to gain unauthorized access to, or control of, a computing device or device data by a variety of cyberattacks. For example, a computing device may cryptographically encrypt sensitive data and transmit the encrypted data over a network. An attacker, connected to the network, may acquire the encrypted data and decrypt it using quantum computing.
- an attacker may be able to inject malware into firmware updates for a computing device, such as a Wi-Fi® router or an loT device. If the attacker successfully installs a fraudulent segment of code into the computing device without the computing device verifying the authenticity or integrity of the firmware update, the unauthorized reconfiguration of the computing device can uncover confidential or sensitive data, or even cause the device to operate unintendedly, posing a potential safety risk to human operators.
- a computing device such as a Wi-Fi® router or an loT device.
- Hashbased signatures schemes combine a one-time signature scheme (e.g., Lamport one-time signature scheme) with a Merkle tree structure (e.g., a technique to combine many keys within a single, larger structure).
- One-time signature schemes are built from any cryptographically secure one-way function, such as a cryptographic hash function (e.g., a hashing algorithm, a trap function, an irreversible function).
- a cryptographic hash function is a mathematical function that maps an arbitrary-length input data stream (“input message”) to a fixed-length output (“digest message”).
- An iterative hash computation includes repeating the cryptographic hash function for an iterative number of times. Due to this method of iterative hash computation, any alterations to the input message will, with very high probability, completely change the message digest (e.g., the avalanche effect).
- Cryptographic hash functions are, therefore, effective in secure and efficient digital information transmission and processing.
- this document describes techniques and apparatuses directed at accelerating quantum-resistant, cryptographic hash-based signature computations by loading at least a portion of a digest message directly into a configurable position in an input buffer. In so doing, this method of iterative hash computation bypasses memory copies and bus latencies, accelerating quantum-resistant, cryptographic hash-based signature computations.
- FIG. 1 illustrates an example operating environment 100 that includes an example computing device 102, which is capable of implementing cryptographic techniques and other security functions.
- Examples of the computing device 102 include a smart-phone 102-1, a tablet computer 102-2, a wireless router 102-3, a set-top box 102-4, a network- attached storage (NAS) device 102-5, awearable computing device 102-6 (e.g., computerized watch), and an automobile 102-7.
- NAS network- attached storage
- the computing device 102 may also be implemented as any of a mobile station (e.g., fixed- or mobile-STA), a mobile communication device, a client device, a home automation and control system, an entertainment system, a gaming console, a personal media device, a health monitoring device, a drone, a camera, an Internet home appliance capable of wireless Internet access and browsing, an loT device, security systems, and the like.
- a mobile station e.g., fixed- or mobile-STA
- a mobile communication device e.g., a mobile communication device
- client device e.g., a home automation and control system
- an entertainment system e.g., a gaming console
- a personal media device e.g., a health monitoring device
- a drone e.g., a camera
- an Internet home appliance capable of wireless Internet access and browsing, an loT device, security systems, and the like.
- the electronic device 102 can be wearable, non-wearable but mobile, or relatively immobile (e
- the computing device 102 may implement cryptography or security functions for any suitable purpose, such as to enable security functionalities of a particular type of computing device, enable secure network access, encrypt data for storage, verify software signatures, authenticate users or other devices, sign electronic files or documents, and the like.
- the computing device 102 may provide other functions or include components or interfaces omitted from FIG. 1 for the sake of clarity or visual brevity.
- the computing device 102 includes a printed circuit board assembly 104 (PCBA) 104 on which components and interconnects of the computing device are embodied. Alternately or additionally, components of the computing device 102 can be embodied on other substrates, such as flexible circuit material or other insulative material. Although not shown, the computing device 102 may also include a housing, various human-input devices, a display, a battery pack, antennas, and the like. Generally, electrical components and electromechanical components of the computing device 102 are assembled onto a printed circuit board (PCB) to form the PCBA 104. Various components of the PCBA 104 (e.g, processors and memories) are then programmed and tested to verify the correct function of the PCBA 104. The PCBA 104 is connected to or assembled with other parts of the computing device 102 into a housing.
- PCBA printed circuit board assembly 104
- the PCBA 104 includes one or more processors 106 and computer-readable media 108.
- the processor(s) 106 may be any suitable single-core or multi-core processor (e.g., an application processor (AP), a digital-signal processor (DSP), a central processing unit (CPU), graphics processing unit (GPU)).
- the processor(s) 106 may be configured to execute instructions or commands stored within the computer- readable media 110 to implement an operating system 112 and a hash manager 114 having an initialization module 116, a Cryptography Module 118, and/or a hashing module 120 which are stored within computer-readable storage media 110.
- the computer-readable storage media 110 may include one or more non-transitory storage devices such as a random access memory (RAM, dynamic RAM (DRAM), non-volatile RAM (NVRAM), or static RAM (SRAM)), read-only memory (ROM), or flash memory), hard drive, SSD, or any type of media suitable for storing electronic instructions, each coupled with a computer system bus.
- RAM random access memory
- DRAM dynamic RAM
- NVRAM non-volatile RAM
- SRAM static RAM
- ROM read-only memory
- flash memory hard drive, SSD, or any type of media suitable for storing electronic instructions, each coupled with a computer system bus.
- the term “coupled” may refer to two or more elements that are in direct contact (physically, electrically, magnetically, optically, etc.) or to two or more elements that are not in direct contact with each other, but still cooperate and/or interact with each other.
- the PCBA 104 may also include I/O ports 122 and communication systems 124.
- the I/O ports 122 allow the computing device 102 to interact with other devices or users.
- the I/O ports 122 may include any combination of internal or external ports, such as USB ports, audio ports, Serial ATA (SATA) ports, PCI-express based ports or card-slots, secure digital input/output (SDIO) slots, and/or other legacy ports.
- Various peripherals may be operatively coupled with the I/O ports 122, such as human-input devices (HIDs), external computer-readable storage media, or other peripherals.
- HIDs human-input devices
- the communication systems 124 enable communication of device data, such as received data, transmitted data, or other information as described herein, and may provide connectivity to one or more networks and other devices connected therewith.
- Example communication systems include NFC transceivers, WPAN radios compliant with various IEEE 802.15 (Bluetooth®) standards, WLAN radios compliant with any of the various IEEE 802.11 (WiFi®) standards, WWAN (3 GPP-compliant) radios for cellular telephony, wireless metropolitan area network (WMAN) radios compliant with various IEEE 802.16 (WiMAX®) standards, infrared (IR) transceivers compliant with an Infrared Data Association (IrDA) protocol, and wired local area network (LAN) Ethernet transceivers.
- WiMAX® wireless metropolitan area network
- IR infrared
- IrDA Infrared Data Association
- LAN local area network
- Device data communicated over communication systems 124 may be packetized or framed depending on a communication protocol or standard by which the computing device 102 is communicating.
- the communication systems 124 may include wired interfaces, such as Ethernet or fiber-optic interfaces for communication over a local network, intranet, or the Internet.
- the communication systems 124 may include wireless interfaces that facilitate communication over wireless networks, such as wireless LANs, cellular networks, or WPANs.
- the computing device 102 can also include a system bus, interconnect, crossbar, or data transfer system that couples the various components within the device.
- a system bus or interconnect can include any one or combination of different bus structures, such as a memory bus or memory controller, a peripheral bus, a universal serial bus, and/or a processor or local bus that utilizes any of a variety of bus architectures.
- the PCBA 104 further includes an integrated circuit component 126.
- the integrated circuit component 126 may be a secure, root of trust (RoT) application-specific integrated circuit (ASIC) component, including a cryptographic coprocessor, processor, microcontroller, microprocessor, System-on-Chip (SoC), or the like operably interfaced to the processor(s) 106 (e.g., a host processor).
- the integrated circuit component 126 e.g., a hash engine, a hash accelerator
- the integrated circuit component 126 may be communicatively coupled, through private interfaces, to a secure, non-volatile computer-readable storage media 108.
- the integrated circuit component 126 may include a hash engine (e.g., a processor configured to execute a hash function).
- the integrated circuit component 126 may be a hash engine.
- the integrated circuit component 126 implemented as a cryptographic coprocessor 202, shown in FIG. 2.
- the integrated circuit component 126 may be implemented as a cryptographic microprocessor, microcontroller, SoC, or the like.
- the cryptographic coprocessor 202 may operate as a hash engine.
- the integrated circuit component 126 may be, for example, an SoC having components including a processor operating as a hash engine.
- the cryptographic coprocessor 202 may include an arithmetical and logical unit 204 (ALU 204), a register file 206, a control unit 208, a hardware counter 210, and input/output (I/O) units 212.
- the ALU 204 may be configured to perform arithmetic and logical operations on received data.
- the register file 206 may be an array of processor registers (e.g., control registers), serving as high-speed, semi- transient memory configured for quick data access during program or function processing.
- the registers may be tightly coupled to the ALU 204 or other execution unit to enable the cryptographic coprocessor 202 to quickly access the working data.
- the register file may include multiple read ports or multiple write ports to enable the ALU 204 and/or execution unit to contemporaneously retrieve multiple operands in a single cycle.
- the cryptographic coprocessor 202, or ALU 204 and execution unit thereof may access the register file using a register address space that is separate from the system address space. In some cases, registers are numbered for access via a register address space.
- the register files may be formed from flip-flops to accelerate reading and writing bits of the data.
- the control unit 208 may be configured to control the flow of data throughout the system(s).
- the hardware counter 210 e.g., a hardware performance counter, a processor performance counter
- the hardware counter 210 may count events, transactions, or iterations that take place at the processor level. For example, the hardware counter 210 may count the number of cycles and instructions that a program executed.
- the I/O units 212 may include ports operably interfaced with other components of the device.
- the computing device 102 may implement steps for verification of a hash-based signature.
- the processor(s) 106 may receive an input message (e.g., a firmware update, a configuration data file), as well as a digital signature signed with the same private key.
- an iterative hash computation to generate a digest message of the input message may be performed.
- the computing device 102 may implement steps for public key computation and public key signing.
- the processor(s) 106 upon receipt of the input message, may run a fetch/execute cycle, cycling through instructions of the hash manager 114 stored in the computer-readable media 108.
- the processor(s) 106 may load the input message to the integrated circuit component 126 and instruct the integrated circuit component 126 to run a fetch/execute cycle, cycling through instructions of the hash manager 114 stored in the computer- readable media 108.
- FIG. 3 illustrates operations of a hash manager 114 (not shown) when executed by a processor (e.g., processor(s) 106).
- the hash manager 114 selects a mode 302.
- the mode selection 302 may be a binary decision, including a mode configured for a single hash computation and a mode configured for an iterative hash computation. If the selected mode 302 indicates an iterative hash computation 304, then the hash manager 114 may execute the initialization module 116.
- the initialization module 116 may initialize variables 306 for the iterative hash computation.
- the processor may program values for the following variables: input message length, copy offset, copy length, update offset, and update length.
- the values of these variables may be used to identify a byte index within an input message.
- the processor may further program a desirable number of iterations to perform a hash computation and assign this value to a variable referred to herein as iteration counter. For example, the processor may assign the value of 255 to the iteration counter variable, thereby programing a hash computation to execute as many as 256 times.
- the values of the variables for the iterative hash computation may be loaded into configurable positions within an input buffer (e.g., the register file of the cryptographic coprocessor 202).
- the hash manager 114 may load the input message 308 into a configurable position in the input buffer of the integrated circuit component 126. Once the input message and the variables for the iterative hash computation have been loaded, the hash manager 114 may trigger execution 310 of the iterative hash computation on the integrated circuit component 126.
- FIG. 4 illustrates example method 400, implemented by a hash manager 114, to accelerate iterative hash computations.
- the hash manager 114 may determine a selected mode. If the selected mode indicates an iterative hash computation, then the hash manager 114 may execute the cryptography module 118.
- the cryptography module 118 may implement various cryptographic techniques, such as breaking the input message into n message blocks (“chunking”) 404 or adding data to the beginning, middle, or end of an input message (“padding”) 406.
- the cryptography module 118 may incorporate random data into an input message (“salting”).
- some or all operations of the cryptography module 118 may be included in the hashing module 120.
- the input message may be a bit-string (e.g.,
- the input message may be 55 bytes long, having a 22-byte prefix, a 1-byte counter, and a 32-byte secret seed.
- the 22-byte prefix may be padded data added to the beginning of the input message
- the 1-byte counter may be a section of the input message wherein the hashing module 120 monotonically increases the value by 1-bit for an iteration
- the 32-byte secret seed may include bytes of the input message or bytes of a digest message.
- the 1-byte counter may increase or decrease in a non-monotonic fashion.
- the 1-byte counter may be initialized at a value configured for a use case, including hash-based signature verification or public key computation and signing.
- the hash manager 114 may then execute the hashing module 120.
- the hashing module 120 may involve executing a hash computation 408, decrementing the iteration counter 410, determining if the iteration counter is greater than zero 412, loading at least a portion of a digest message 414 if the iteration counter is greater than zero, determining if a 1-byte counter exists 416 in the input message, and incrementing the 1- byte counter 418 if it exists.
- the hash engine using the input message as input, may execute a hash computation 408.
- the hash engine may execute a cryptographic hash function to generate a digest message.
- the hash engine may implement any cryptographic hash function, complying with a particular standard, such as SHA256. Depending on the cryptographic hash function utilized, the digest message may vary in length. [0031] After, or in parallel to, executing the hash computation 408, the hashing module 120 may decrement the iteration counter 410 by one count value. If the iteration counter value is greater than zero 412, then the hashing module 116 may load at least a portion of the digest message directly into a configurable position in the input buffer 414. Next, or in parallel to loading at least a portion of the digest message, the hash manager 114 may determine if a 1-byte counter exists 416 in the input message.
- the hashing module 120 can increment the 1-byte counter 418 by one count value. Once the 1-byte counter in the input message is incremented, then the hashing module 120 can continue, repeating operations of the hashing module 120 until the iteration counter count is no longer greater than zero. If the 1-byte counter does not exist in the input message, then the hashing module 120 can continue, repeating operations of the hashing module 120 until the iteration counter count is no longer greater than zero.
- the hashing module 120 may cease execution and the hash manager 114 may transfer the result of the iterative hash computation (e.g., the digest message) 420 to a processor (e.g., a Hash-Based Message Authentication Codes (HMAC) core, a host processor).
- a processor e.g., a Hash-Based Message Authentication Codes (HMAC) core, a host processor.
- HMAC Hash-Based Message Authentication Codes
- FIG. 5 illustrates example method 500, implemented by a hash manager (e.g., hash manager 114), to accelerate iterative hash computations by directly loading at least a portion of a digest message into a configurable position in an input buffer and performing a hash computation for a predetermined number of iterations.
- a hash manager e.g., hash manager 114
- an input buffer 502 includes an input message 504, having a prefix 506, a 1-byte counter 508, and a secret seed 510.
- the prefix 506 may be, for example, 22 bytes long.
- the 1- byte counter may, for example, start at an 8-bit binary value equaling zero (e.g., 00000000 in binary).
- the secret seed 510 may be, for example, 32 bytes long.
- the input buffer 502 may further include variables initialized by an initialization module (not shown).
- An update offset 512 variable may be a 6- or 8-bit string equal to 22.
- a copy length 514 variable may be a 6- or 8-bit string equal to 23.
- a copy length (not shown) variable may be a 6- or 8-bit string equal to the digest message length. In an implementation, the copy length may be equal to at least a portion of the digest message length.
- An update length (not shown) may be a 6- or 8-bit string equal to the length of the 1-byte counter.
- the input buffer may include an 8-bit iteration counter 516 variable. For example, the iteration counter may be initialized to a count value of 255 (e.g., 11111111 in binary). The iteration counter may determine the number of iterations a hash computation is repeated.
- FIG. 5 further illustrates a hashing module 518.
- the hashing module 518 is implemented by a hash engine (not shown).
- the hash engine may be a cryptographic coprocessor implementing the cryptographic hash function SHA256.
- the hash engine using the input message as input, may perform an iterative hash computation.
- the hashing module 518 may execute a hash computation 520, resulting in a digest message (not shown).
- the hashing module 518 may decrement the iteration counter 522.
- the iteration counter 516 may be decremented to a count value of 254 (e.g., 11111110 in binary).
- the hashing module 518 may determine if the iteration counter 516 value is greater than zero. If the iteration counter 516 value is not greater than zero, then the hashing module 518 may cease execution and a Hashing Manager (not shown) can transfer the digest message to a processor. If the iteration counter 516 value is greater than zero, then the hashing module 518 can load at least a portion of the digest message 526 to a configurable position in the input buffer 502. For example, the hash engine executing SHA256 may generate a 32- byte digest message. The hashing module 518 may load the bits of the digest message into the secret seed section of the input message, replacing an old secret seed.
- the hashing module 518 may determine if a 1-byte counter 528 exists in the input message 504. If the hashing module 518 determines a 1-byte counter 508 does exist in the input message, then the hashing module may increment the 1-byte counter 530. For example, the 1-byte counter 508 may increment to a count value of one (e.g., 00000001 in binary). In so doing, the hashing module 120 may monotonically increase the 1-byte counter 508 value by 1-bit for an iteration. For example, the monotonical increase of the 1-byte counter 508 value may salt the input message.
- the hashing module 518 can continue to a next hash computation execution 520. In this way, at least a portion of the digest message of a given iteration may be loaded directly back into a configurable position in the input buffer 502, updating the input message for a next hash computation (“repeated hash computation”). In so doing, this method of iterative hash computation bypasses memory copies and bus latencies, accelerating quantum-resistant, cryptographic hash-based signature computations.
- FIG. 6 illustrates an integrated circuit component (e.g., integrated circuit component 126) implemented as an SoC 600 that can implement various aspects of accelerating iterative hash computations.
- the SoC 600 may be a single chip including components that are fabricated on a same semiconductor substrate. Alternatively, the SoC may be a number of such chips that are epoxied together.
- the SoC 600 can be implemented in any suitable device, such as a smartphone, cellular phone, netbook, tablet computer, server, wireless router, network-attached storage, camera, smart appliance, printer, a set-top box, or any other suitable type of device.
- the entities of FIG. 6 may also be implemented as an ASIC, a field- programmable gate array (FPGA), or the like.
- FPGA field- programmable gate array
- the SoC 600 can be integrated with electronic circuitry, including the components described in the operating system listed herein.
- the SoC 600 can also include an integrated data bus (not shown) that couples the various components of the SoC for data communication between the components.
- the integrated data bus or other components of the SoC 600 may be exposed or accessed through an external port, such as a JTAG port.
- components of the SoC 600 may be tested, configured, or programmed (e.g, flashed) through the external port at different stages of manufacture.
- the SoC 600 includes computer-readable storage media 602, one or more processor(s) 604, a hash engine 606, and I/O units 608.
- the computer- readable storage media 602 may include one or more non-transitory storage devices such as a RAM ((DRAM, NVRAM, or SRAM), ROM, or flash memory), hard drive, SSD, or any type of media suitable for storing electronic instructions, each coupled with a computer system bus.
- the computer-readable storage media 602 may include all, or some, instructions of a hash manager (e.g., hash manager 114).
- the processor(s) 604 may implement instructions of the hash manager.
- any secure, root of trust (RoT) component may be implemented as the hash engine 604, including a cryptographic processor.
- the hash engine 604 may implement any cryptographic hash function, such as SHA256.
- Example 1 A computer-implemented method comprising: loading a first input message into an input buffer; computing, by a hash engine and using the first input message as input, a hash computation, the hash computation resulting in a digest message; loading at least a portion of the digest message directly to a configurable position in the input buffer; and repeating the hash computation for a predetermined number of iterations, each of the repeated hash computations resulting in at least a portion of a digest message loaded directly into a configurable position in the input buffer for use as input to be used by a later iteration of the repeated hash computation.
- Example 2 The computer-implemented method as recited in example 1, wherein the hash engine is a cryptographic processor implementing a cryptographic hash function.
- Example 3 The computer-implemented method as recited m example 1, wherein the digest message is 32 bytes in length.
- Example 4 The computer-implemented method as recited m example 1, wherein the input buffer is a register file of the hash engine.
- Example 5 The computer-implemented method as recited m example 1, wherein loading at least a portion of the digest message directly into the configurable position in the input buffer is implemented without loading the digest message to memory external to the hash engine.
- Example 6 The computer-implemented method as recited in example 1, wherein the first input message is a bit-string including a concatenation of a prefix, a counter, and a secret seed.
- Example 7 The computer-implemented method as recited in example 5, wherein the first input message is 56 bytes in length.
- Example 8 The computer-implemented method as recited in example 1, wherein loading at least a portion of the digest message directly into a configurable position in the input buffer replaces a secret seed.
- Example 9 The computer-implemented method as recited in example 1, wherein the repeating the hash computation executes as many as 256 times.
- Example 10 The computer-implemented method as recited in example 1 further comprising: decrementing an iteration counter; and incrementing a 1-byte counter if an input message to the repeated hash computation includes a 1-byte counter.
- Example 11 The computer-implemented method as recited in example 10, wherein the iteration counter is assigned a value in a range of 0 to 255 at initialization.
- Example 12 The computer-implemented method as recited in example 11, wherein the iteration counter is loaded into a register of the hash engine.
- Example 13 The computer-implemented method as recited in example 10, wherein the 1-byte counter starts at a value configured for hash-based signature verification.
- Example 14 The computer-implemented method as recited in example 13, wherein the 1-byte counter monotonically increases.
- Example 15 A computing device comprising: at least one processor; and at least one computer-readable storage medium comprising instructions that, when executed by the at least one processor, cause the processor to perform the method of any preceding example.
Abstract
Description
Claims
Priority Applications (2)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
PCT/US2021/054431 WO2023063924A1 (en) | 2021-10-11 | 2021-10-11 | Accelerating quantum-resistant, cryptographic hash-based signature computations |
KR1020247010154A KR20240050406A (en) | 2021-10-11 | 2021-10-11 | Accelerate quantum-resistant, cryptographic hash-based signature computation |
Applications Claiming Priority (1)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
PCT/US2021/054431 WO2023063924A1 (en) | 2021-10-11 | 2021-10-11 | Accelerating quantum-resistant, cryptographic hash-based signature computations |
Publications (1)
Publication Number | Publication Date |
---|---|
WO2023063924A1 true WO2023063924A1 (en) | 2023-04-20 |
Family
ID=78516945
Family Applications (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
PCT/US2021/054431 WO2023063924A1 (en) | 2021-10-11 | 2021-10-11 | Accelerating quantum-resistant, cryptographic hash-based signature computations |
Country Status (2)
Country | Link |
---|---|
KR (1) | KR20240050406A (en) |
WO (1) | WO2023063924A1 (en) |
-
2021
- 2021-10-11 WO PCT/US2021/054431 patent/WO2023063924A1/en active Application Filing
- 2021-10-11 KR KR1020247010154A patent/KR20240050406A/en unknown
Non-Patent Citations (4)
Title |
---|
ALMAHDI ISMAIL: "HMAC-SHA384-VHDL/HMACSHA384_ISMAIL.vhd", 29 August 2017 (2017-08-29), XP055933946, Retrieved from the Internet <URL:https://github.com/ismailalmahdi/HMAC-SHA384-VHDL/blob/master/HMACSHA384_ISMAIL.vhd> [retrieved on 20220621] * |
AUMASSON JEAN-PHILIPPE ET AL: "SPHINCS + Submission to the NIST post-quantum project, v.3 Contents", 1 October 2020 (2020-10-01), XP055934227, Retrieved from the Internet <URL:https://sphincs.org/data/sphincs+-round3-specification.pdf> [retrieved on 20220622] * |
BERTHET QUENTIN ET AL: "An Area-Efficient SPHINCS+ Post-Quantum Signature Coprocessor", 2021 IEEE INTERNATIONAL PARALLEL AND DISTRIBUTED PROCESSING SYMPOSIUM WORKSHOPS (IPDPSW), IEEE, 17 June 2021 (2021-06-17), pages 180 - 187, XP033931233, DOI: 10.1109/IPDPSW52791.2021.00034 * |
KERLER BJOERN: "opencl_brute/pbkdf2.cl", 9 October 2019 (2019-10-09), XP055933964, Retrieved from the Internet <URL:https://github.com/KenChen-Xeniro/opencl_brute/blob/master/Library/worker/generic/pbkdf2.cl> [retrieved on 20220621] * |
Also Published As
Publication number | Publication date |
---|---|
KR20240050406A (en) | 2024-04-18 |
Similar Documents
Publication | Publication Date | Title |
---|---|---|
US7711960B2 (en) | Mechanisms to control access to cryptographic keys and to attest to the approved configurations of computer platforms | |
Seshadri et al. | SWATT: Software-based attestation for embedded devices | |
CN109313690B (en) | Self-contained encrypted boot policy verification | |
US8914627B2 (en) | Method for generating a secured boot image including an update boot loader for a secured update of the version information | |
US10771264B2 (en) | Securing firmware | |
US9690498B2 (en) | Protected mode for securing computing devices | |
US8291226B2 (en) | Method and apparatus for securely booting from an external storage device | |
US10491401B2 (en) | Verification of code signature with flexible constraints | |
JP2022541057A (en) | Cryptographic architecture for cryptographic permutation | |
CN115048652A (en) | End-to-end security for hardware running verified software | |
CN110612517B (en) | Memory protection based on system state | |
CN111971672A (en) | Provable and destructible device identity | |
US20190080093A1 (en) | Secure selective load of dynamic paged segments in memory constrained systems | |
US20220327214A1 (en) | Firmware verification mechanism | |
US8311212B2 (en) | Method of processing data protected against attacks by generating errors and associated device | |
US8380991B2 (en) | Hash function based on polymorphic code | |
CN113056739A (en) | Verification and installation of file systems into transient, non-persistent storage circuits | |
WO2023063924A1 (en) | Accelerating quantum-resistant, cryptographic hash-based signature computations | |
CN118056377A (en) | Quantum-resistant, cryptographic hash-based signature computation acceleration | |
US11777717B2 (en) | Method for end entity attestation | |
Fiolhais et al. | Software Emulation of Quantum Resistant Trusted Platform Modules. | |
WO2023091803A1 (en) | Control flow integrity measurements to validate flow of control in computing systems | |
KR20230121382A (en) | Semiconductor chip and software security execution method using thereof | |
Warsi et al. | Secure Firmware based Lightweight Trusted Platform Module (FLTPM) for IoT Devices | |
Singh et al. | Lightweight Security Architecture for IoT Edge Devices |
Legal Events
Date | Code | Title | Description |
---|---|---|---|
121 | Ep: the epo has been informed by wipo that ep was designated in this application |
Ref document number: 21802510Country of ref document: EPKind code of ref document: A1 |
|
ENP | Entry into the national phase |
Ref document number: 20247010154Country of ref document: KRKind code of ref document: A |
|
WWE | Wipo information: entry into national phase |
Ref document number: 2021802510Country of ref document: EP |
|
ENP | Entry into the national phase |
Ref document number: 2021802510Country of ref document: EPEffective date: 20240326 |