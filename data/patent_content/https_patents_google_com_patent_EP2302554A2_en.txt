EP2302554A2 - Method for identifying a section of computer program contained in a computer storage system - Google Patents
Method for identifying a section of computer program contained in a computer storage system Download PDFInfo
- Publication number
- EP2302554A2 EP2302554A2 EP10009475A EP10009475A EP2302554A2 EP 2302554 A2 EP2302554 A2 EP 2302554A2 EP 10009475 A EP10009475 A EP 10009475A EP 10009475 A EP10009475 A EP 10009475A EP 2302554 A2 EP2302554 A2 EP 2302554A2
- Authority
- EP
- European Patent Office
- Prior art keywords
- computer program
- computer
- program
- identifying
- section
- Prior art date
- Legal status (The legal status is an assumption and is not a legal conclusion. Google has not performed a legal analysis and makes no representation as to the accuracy of the status listed.)
- Withdrawn
Links
Images
Classifications
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F21/00—Security arrangements for protecting computers, components thereof, programs or data against unauthorised activity
- G06F21/50—Monitoring users, programs or devices to maintain the integrity of platforms, e.g. of processors, firmware or operating systems
- G06F21/55—Detecting local intrusion or implementing counter-measures
- G06F21/56—Computer malware detection or handling, e.g. anti-virus arrangements
- G06F21/562—Static detection
- G06F21/564—Static detection by virus signature recognition
Definitions
- the invention relates to a method for identifying a computer program section contained in a computer memory system according to the preamble of claim 1.
- a computer program means a plurality of program instructions to be processed in a computer system by one or more microprocessors in a specific order.
- the program instructions In order for the program instructions to be executed by the microprocessor (s), they are in a binary format that is directly understandable to the microprocessor and specific to the executing microprocessor.
- the working instructions in this microprocessor-specific format are generally very difficult or even impossible to understand for a human observer, for example a programmer.
- program instructions to be processed by the microprocessor are formulated by the programmer in a language understandable to humans and stored in a so-called source text.
- the program instructions to be processed by a microprocessor in a particular order are typically not in that specific order in a computer storage system. Rather, in each case one or more program instructions to be executed directly after one another are combined into groups, these groups being connected to one another by program sequence instructions which are designed, for example, as jump instructions or function calls.
- This structure of a computer program is also regularly reflected in the associated source text written in a high-level language, which is likewise subdivided into functions or subroutines and has blocks of program instructions interconnected by branches or jump instructions.
- a clear assignment of blocks of program statements in the source code and groups of program statements in the microprocessor-specific format is generally not available.
- a reliable method of detecting matches or differences between two or more non-source code computer programs is desirable, for example, to detect inappropriate changes to a computer program, detect differences between different versions of a computer program, or improper use of to discover protected source code.
- the method works as follows: First of all, the two computer programs, which are present in a microprocessor-specific format, are back-translated to each receive an assembler source code. This is followed by a division of the computer program into computer program sections, wherein each of the computer program sections comprises exactly one function or exactly one subprogram of the computer program.
- the obtained computer program sections are connected to one another by program flow instructions in the form of function calls or subroutine calls, so that a program flow relationship between the computer program sections is defined.
- the program flow relationship can be represented in the form of a first directed graph known from mathematical graph theory, the computer program sections defining nodes and the program flow statements interconnecting the computer program sections defining edges of the first directed graph.
- an edge connects in each case a first computer program section (source node) to a second computer program section (destination node), the direction of the edge being predetermined by a program execution instruction pointing from the source node to the destination node.
- the totality of the nodes and edges forms an abstract program flowchart of the computer program.
- the division of the computer program into computer program sections is followed by a breakdown of each of the computer program sections into segments, each of the segments being defined by immediate successive instructions, and a program flow relationship of the segments being defined by jump instructions, such as conditional instructions or loop instructions.
- the program flow relationship of the segments can be represented for each of the computer program sections in the form of a second directed graph, wherein the segments nodes and the program flow statements which connect the segments together define edges of the second directed graph.
- the entirety of the nodes and edges of the second directed graph forms an abstract program flowchart of the respective computer program section.
- Each node of the first directed graph can be represented by the second directed graph corresponding to the associated computer program section in order to obtain a complete, abstract program flowchart of the computer program.
- the comparison of the two computer programs contained in the computer memory system now takes place by comparison of the respectively determined complete abstract program flowcharts, ie by comparison of the complete first directed graphs containing in each case all second directed graphs.
- US Pat. No. 7,207,038 B2 describes a method for creating schedules of an executable computer program.
- the method comprises dividing the computer program contained in a computer storage system into computer program sections which are interconnected by function calls or jump instructions, and creating a schedule structure based on the identified ones Computer program sections.
- the purpose is to optimize a computer program not known in high-level language source code for the efficiency of its operation by changing the order of function calls.
- the flow graphs are sorted in the order of the assigned number - with the same assigned numbers in any order - and then provided in the order of sorting with a letter of the alphabet as a name.
- a function named A internally calls functions B, C and D in this order, the function A is assigned an A -> BCD label called a grammar rule.
- the corresponding grammar rule is determined for each function.
- all determined grammar rules are combined serially into a string, whereby the thus determined string is used as a marking of the computer program.
- the string associated with the computer program is compared to the strings of known computer viruses.
- a disadvantage of the method is that only whole computer programs, but not computer program sections a label is assigned, so that already relatively simple changes such as the Umbett of program commands in new functions or the direct insertion of the program instructions from functions into calling functions (inlining) leads to strongly changed markings.
- Another disadvantage is that the string associated with a computer program is not unique due to the arbitrary sorting of flow graphs of the same assigned length.
- strings determined for different computer programs generally have a different length in each case, so that the strings are difficult to compare with one another.
- the compaction according to the invention of the program sequence of the segments assignable characteristic data to a computer program section identifying signature is a unique identifier of the computer program section.
- the compression of the characteristic data to the signature takes place in such a way that the most unambiguous assignment of the signature to the program flow relationship of the segments is ensured.
- the mapping of the characteristic data to the signatures can be carried out simply and efficiently, while an inverse assignment of the signature to the characterized program sequence relationship without knowledge of the program sequence relationship need not be carried out efficiently. Knowledge of only the signature can thus advantageously no direct inference to the program flow relationship.
- Matching signatures indicate with high probability that they are computer program sections with an identical abstracted program flowchart and thus with high probability translations of an identical or at least functionally identical source text.
- the compression of the characteristics is chosen so that at sufficiently large, for real computer programs typical program sections the associated signature is practically unique.
- the signature can advantageously be stored with little storage effort and comparison operations can be easily accessed, so that advantageous computer program sections not yet marked can be checked for agreement or deviation with already known computer program sections by comparing the generated signatures.
- a compression of characteristic data to a signature is particularly advantageous in that a plurality of characteristic data is detected, wherein the plurality of characteristic data is understood as a vector of a vector space and transformed by mathematical convolution of the vector into a real number.
- the determination of the characteristic data that can be assigned to the program flow relationship is preferably done by representing the program flow relationship in a directed graph, the segments defining the nodes of the graph and the program flow statement defining program flow statements defining the edges of the graph.
- the characteristic data can then be determined in a simple manner by properties of the graph. Characteristics are preferably generated by properties of at least one edge and the source node and destination node connected to the respective at least one edge; most preferably, the characteristics include characteristics of all or at least a majority of the edges.
- the topological order of the source node of an edge (defined by the maximum number of directed edges leading from a starting node having no leading edges directly to the source node), the number of edges leading to the source node (ie Input level of the jumper node), the number of edges leading away from the source node (ie the source node's source level), the input level of the destination node, the output level of the destination node and / or the number of sub-function calls within a node as characteristics.
- the computer program section expediently comprises at least one function or a subprogram of a computer program stored at least partially in the computer memory system.
- the method can be applied directly to a computer program section which is present in a format that can be executed directly by a microprocessor.
- the method is applied to an assembler source code of the computer program section obtained, if appropriate, by back translation.
- the method can also be applied to a computer program section present in a high-level language, a computer program section to be interpreted or a byte code, for example the bytecode of a Java program.
- each of the segments comprises a linear sequence of program instructions which are not interconnected by jump instructions or the like.
- Subroutine calls contained in the segments can each be resolved or remain unresolved.
- the method is performed by a computer program on a computer system with a microprocessor.
- An advantage of the method is that the computer program section to be identified can also be present in a format incompatible with the microprocessor, so that the program rejections contained in the computer program section can not be executed by the microprocessor performing the method itself.
- an identification of the computer program section can also take place during operation of the computer program comprising the computer program section.
- the digest includes an identification of program flow instructions of the computer program portion.
- Such program flow instructions may in particular be designed as unconditional jump instructions, conditional jump instructions, loops or subfunction calls.
- the definition of segments is then expediently carried out by identifying areas which do not comprise program execution instructions.
- the inventive method advantageously allows identification of malware during operation of a computer system.
- a marking of known malware computer programs is carried out using the method according to the invention and deposit of the signatures determined by the method.
- a method for identifying at least one computer program contained in a computer memory system comprises the steps of dividing the computer program into computer program sections and applying the inventive method for identifying a computer program section contained in a computer memory system to at least one of the computer program sections for determining a signature identifying the computer program section.
- the method is applied to a plurality, particularly preferably to all computer program sections, so that a total of the computer program identifying amount of signatures is generated. Changes of the computer program are recognizable by this procedure particularly reliably, since a change of the Computer program regularly only leads to a change of a few signatures from the set of signatures.
- the computer program sections are formed by functions or subroutines of the computer program.
- relationships of computer programs to each other which are defined by the use of matching or equivalent functions or subroutines, can be determined by comparing the signatures.
- the classification of the computer program into computer program sections comprises a back translation from a format that can be executed directly by a microprocessor into an assembler language.
- the method can be used advantageously for identifying computer programs belonging to a computer program family.
- a computer program family is defined by the fact that a plurality of computer programs have a significant share of common functions, as is the case, for example, with developments of computer programs or smaller modifications of the computer program. This makes it possible, in particular, to simplify the analysis of malicious software, because it is possible to fall back on previously obtained analytical results by detecting a modification of already known malicious programs. Also, identification of functions changed by a patch within a computer program family is enabled.
- An advantageous method of comparing a machine-executable first computer program and a machine-executable second computer program to determine a degree of coincidence comprises the steps of applying the method of characterizing a computer program section or computer program to the first computer program or a computer program section of the first computer program to produce a first set of the same first computer program identifying signatures, applying the procedure for marking a computer program section or a computer program on the second computer program or a computer program section of the second computer program for generating a second set of signatures identifying the second computer program, and determining the degree of coincidence by differentiating between the first set and the second set of signatures.
- those functions of the first computer program and of the second computer programs can be identified in a simple and reliable manner, which have different abstract program schedules. Accordingly, it is preferable to identify the computer program sections which have a signature not contained in the intersection of the first set and the second set of signatures.
- a change of a source-text unknown computer program can be determined, in which the method is applied to the unchanged and the changed version of the computer program.
- An advantageous method for detecting changes or matches of a machine-executable computer program or computer program section contained in a computer memory system of a local computer to at least one reference computer program comprises the steps of applying the inventive method for identifying a computer program section or a computer program to the computer program or the computer program section for determining at least one signature , Transmitting the at least one signature to a remote computer system, and comparing the transmitted signatures to a set of signatures stored on the remote computer system to determine a change or coincidence.
- this method can be used to determine the authenticity of software, ie a complete match of the computer program contained in the computer memory system of the local computer with a reference computer program.
- the method enables efficient and secure checking of computer programs executed on a local computer for harmful or undesired program sections, even if their specific binary form was previously unknown.
- the storage of signatures on a computer system that can be reached, for example, by network connections such as the Internet makes it possible to set up a search service for recognizing and assigning computer programs and computer program sections, similar to the known Internet search services for texts or multimedia files.
- a particular advantage is the independent of the specific machine-executable form of a computer program identification of the computer program by the at least one signature.
- the in Fig. 1 Computer program section shown is written in the programming language C and includes a single function, the main function main () of a computer program.
- the statements contained in the source code do the following: First, calling the subfunction printf causes the text "Hello.” spent on the screen. This is followed by a program flow statement, which in the present case is designed as a conditional branch of the type of an if-else statement.
- the if (g-variable) statement tests whether the g-vahable variable takes the value "TRUE” or "FALSE”. If the variable g-variable has the value "TRUE", "Hello2.” Is output, otherwise "Hello3,” is output on the screen by means of the subfunction printf. Finally, by calling the printf subfunction, the output of "Goodbye" is displayed on the screen.
- Fig. 2 shows one of the source text Fig. 1 associated assembler source code.
- the assembler source code was created as follows: First, the source code was created according to Fig. 1 translated by means of a compiler on a computer system into a computer program which can be directly executed by the microprocessor of the computer system.
- the computer program in this case comprises a computer program section defined by the main function, which corresponds to a realization of the in Fig. 1 corresponds to the source code.
- back translation (disassembly) of the computer program was in Fig. 2 reproduced assembler source code of the computer program.
- the assembler Quslltext is in the representation according to Fig. 2 divided into segments S1, S2, S3, S4.
- the source code has a first segment S1, which contains instructions for calling the subroutine printf and for outputting the string "Hello.” on the screen.
- the segment S1 further comprises instructions for checking the value of the variable g-variable and the jump instruction jz.
- the program is continued in the segment S2, in which instructions for the output of the character string "Hello3,” are contained on the screen, or the segment S3, for the output of the string "Hello2.”
- a continuation of the program takes place by jumping from the end of the segment S2 or S3 to the beginning of the segment S4 and the output of "Goodbye" on the screen,
- each pair of Segments S1, S2, S3, S4 interconnect are shown by arrows.
- the arrows correspond to the program flow instructions of the computer program and form edges K1, K2, K3, K4 of the graph Fig. 2
- the graph shown has four nodes and four edges.
- V condensed characteristic number
- V 0.471699652.
- a particularly advantageous method for identifying a computer program thus results from the fact that, after the computer program has been divided into computer program sections, a first Computer program section is associated with a second computer program section connecting edge respectively the compacted signature of the first computer program section and the second computer program section as an edge signature. If a large number of identical edge signatures occur in two computer programs, this results in a corresponding degree of similarity or conformity of the computer programs.
- the method according to the invention has been explained with reference to a computer program with only one function, the main function main (). It is understood that the method is also applicable to a computer program having a plurality of functions and subroutines, wherein each function or each subroutine is expediently identified as a computer program section.
- the application of the method according to the invention to computer programs of the usual scope leads to a computer program uniquely identifying signature, which comprises a number of numbers with up to ten thousand or more elements. It is understood that in any case condensed signatures can be created from signatures by means of the aforementioned second function. It is further understood that in any case, generation of edge signatures may be made for immediate or later comparison with other possibly unknown computer programs.
Abstract
Description
Die Erfindung betrifft ein Verfahren zur Kennzeichnung eines in einem Computerspeichersystem enthaltenen Computerprogrammabschnitts nach dem Oberbegriff des Anspruchs 1.The invention relates to a method for identifying a computer program section contained in a computer memory system according to the preamble of claim 1.
Unter einem Computerprogramm versteht man eine Mehrzahl von in einem Computersystem durch einen oder mehrere Mikroprozessoren in einer bestimmten Reihenfolge abzuarbeitenden Programmanweisungen. Damit die Programmanweisungen durch den oder die Mikroprozessoren ausgeführt werden können, liegen sie in einem für den Mikroprozessor unmittelbar verständlichen und für den ausführenden Mikroprozessor spezifischen Binärformat vor. Die Arbeitsanweisungen sind in diesem für den Mikroprozessor spezifischen Format für einen menschlichen Betrachter, beispielsweise einen Programmierer, in der Regel nur sehr schwer oder gar nicht verständlich. Um die Erstellung eines Computerprogramms zu erleichtern beziehungsweise erst zu ermöglichen, finden heutzutage in der Regel als Hochsprachen bezeichnete Programmiersprachen Verwendung. Bei solchen Hochsprachen werden von dem Mikroprozessor abzuarbeitende Programmanweisungen durch den Programmierer in einer für Menschen verständlichen Sprache formuliert und in einem sogenannten Quelltext abgelegt. Damit die in dem Quelltext enthaltenen Programmanweisungen durch den Mikroprozessor ausgeführt werden können, ist eine Transformation in das für den Mikroprozessor abarbeitbare spezifische Format notwendig. Hierzu bestehen grundsätzlich zwei Möglichkeiten: Zum Einen kann der gesamte Quelltext vor Ausführung durch den Mikroprozessor vollständig in das für den Mikroprozessor spezifische Format übersetzt werden; zum Anderen besteht die Möglichkeit, jede Programmanweisung des Quelltextes zunächst durch ein weiteres Computerprogramm, den sogenannten Interpreter, zu interpretieren und in die zur Ausführung der Arbeitsanweisung notwendigen, für den Mikroprozessor spezifischen Programmanweisungen umzuwandeln. Ebenso sind Mischformen bekannt, wie Sie beispielsweise in der Programmiersprache Java realisiert sind: Hier erfolgt zunächst eine vollständige Übersetzung des Quelltextes in einen noch nicht für den Mikroprozessor spezifischen Bytecode und eine anschließende Interpretation des Bytecodes zur Erzeugung von für den Mikroprozessor spezifischen Programmanweisungen. Aus Effizienzgründen erfolgt heutzutage überwiegend eine vollständige Übersetzung eines Quellcodes vor der ersten Abarbeitung der Programmanweisungen durch einen Mikroprozessor. Hierzu wird ein sogenannter Compiler verwendet.A computer program means a plurality of program instructions to be processed in a computer system by one or more microprocessors in a specific order. In order for the program instructions to be executed by the microprocessor (s), they are in a binary format that is directly understandable to the microprocessor and specific to the executing microprocessor. The working instructions in this microprocessor-specific format are generally very difficult or even impossible to understand for a human observer, for example a programmer. In order to facilitate the creation of a computer program or to make it possible to find programming languages that are generally referred to as high-level languages nowadays are used. In such high-level languages, program instructions to be processed by the microprocessor are formulated by the programmer in a language understandable to humans and stored in a so-called source text. In order for the program instructions contained in the source code to be executed by the microprocessor, a transformation into the specific format executable by the microprocessor is necessary. There are basically two possibilities for this: On the one hand, the entire source code can be completely translated into the format specific to the microprocessor before execution by the microprocessor; On the other hand, there is the possibility of first interpreting each program statement of the source text by means of another computer program, the so-called interpreter, and converting it into the microprocessor-specific program instructions necessary for executing the work instruction. Likewise, mixed forms are known, as you for example in the Here, a complete translation of the source code into a not yet specific for the microprocessor bytecode and a subsequent interpretation of the bytecode to generate specific for the microprocessor program instructions. For reasons of efficiency, nowadays a complete translation of a source code takes place predominantly before the first execution of the program instructions by a microprocessor. For this purpose, a so-called compiler is used.
Die von einem Mikroprozessor in einer bestimmten Reihenfolge zu verarbeitenden Programmanweisungen liegen in der Regel nicht in dieser spezifischen Reihenfolge in einem Computerspeichersystem vor. Vielmehr sind jeweils eine oder mehrere unmittelbar hintereinander auszuführende Programmanweisungen zu Gruppen zusammengefasst, wobei diese Gruppen durch Programmablaufanweisungen, die beispielsweise als Sprunganweisungen oder Funktionsaufrufe ausgebildet sind, miteinander verbunden sind. Diese Struktur eines Computerprogramms spiegelt sich regelmäßig auch in dem zugehörigen, in einer Hochsprache geschriebenen Quelltext wieder, der ebenfalls in Funktionen oder Unterprogramme unterteilt ist sowie durch Verzweigungen oder Sprunganweisungen miteinander verbundene Blöcke von Programmanweisungen aufweist. Eine eindeutige Zuordnung von Blöcken von Programmanweisungen im Quelltext und Gruppen von Programmanweisungen im mikroprozessorspezifischen Format liegt im Allgemeinen jedoch nicht vor.The program instructions to be processed by a microprocessor in a particular order are typically not in that specific order in a computer storage system. Rather, in each case one or more program instructions to be executed directly after one another are combined into groups, these groups being connected to one another by program sequence instructions which are designed, for example, as jump instructions or function calls. This structure of a computer program is also regularly reflected in the associated source text written in a high-level language, which is likewise subdivided into functions or subroutines and has blocks of program instructions interconnected by branches or jump instructions. However, a clear assignment of blocks of program statements in the source code and groups of program statements in the microprocessor-specific format is generally not available.
Die Übersetzung eines in einer Hochsprache vorliegenden Quelltextes in mikroprozessorspezifische Programmanweisungen mittels eines Compilers führt nicht zu einem eindeutig bestimmten Computerprogramm, d.h. zu einer notwendig eindeutig definierten Sequenz von im Binärformat vorliegenden mikroprozessorspezifischen Programmanweisungen. Dies ist zum einen dann der Fall, wenn die Übersetzung des Hochsprachen-Quelltextes für eine Abarbeitung auf nicht miteinander Befehlskompatiblen, unterschiedlichen Mikroprozessoren erfolgt. Aber auch dann, wenn die Übersetzung für einen identischen Typus von Mikroprozessor erzeugt wird, können verschiedene Übersetzungen eines identischen Hochsprachen-Quelltextes zu im Binärformat unterschiedlichen Computerprogrammen führen. Ein Grund hierfür ist in Optimierungen zu sehen, welche der Compiler zur Erzielung eines möglichst effizient abarbeitbaren Computerprogramms vornimmt. So gehören eine Änderung der Abarbeitungsreihenfolge von Programmanweisungen, die Invertierung von Sprungbedingungen und das Zusammenfassen von eigentlich durch einen Sprungbefehl miteinander verbundener Programmanweisungen zu einer zusammengehörigen Gruppe zu gängigen Optimierungsverfahren von Compilern. Je nach Wahl des Optimierungsgrades durch den Compiler und andere Umgebungsbedingungen entstehen daher durch Übersetzung mittels des Compilers aus einem identischen Hochsprachen-Quellcode sehr unterschiedliche Computerprogramme. Problematisch ist hierbei, dass bei Vorliegen zweier in ihrer spezifischen Abfolge von Mikroprozessoranweisungen unterschiedlichen Computerprogrammen ohne Vorliegen des Quelltextes nicht festgestellt werden kann, ob diese tatsächlich durch Übersetzung des identischen Quelltextes erzeugt wurden. Dies trifft umso mehr für Übersetzungen eines identischen Quelltextes mit unterschiedlichen Compilern oder für unterschiedliche Ziel-Mikroprozessoren zu.The translation of a source text present in a high-level language into microprocessor-specific program instructions by means of a compiler does not lead to a clearly defined computer program, ie to a necessarily clearly defined sequence of binary-format microprocessor-specific program instructions. This is the case, on the one hand, when the translation of the high-level language source text is carried out for processing on non-mutually command-compatible, different microprocessors. But even if the translation for a generated identical type of microprocessor, different translations of an identical high-level language source code can lead to binary programs in different computer programs. One reason for this is to be seen in optimizations, which the compiler makes to achieve a computer program that can be processed as efficiently as possible. Thus, a change in the execution order of program instructions, the inversion of branch conditions, and the aggregation of program instructions actually connected by a jump instruction to a related group, belong to common optimization methods of compilers. Depending on the choice of the degree of optimization by the compiler and other environmental conditions therefore arise by translation using the compiler from an identical high-level language source code very different computer programs. The problem here is that when two different in their specific sequence of microprocessor instructions computer programs without the presence of the source text can not be determined whether they were actually generated by translation of the same source code. This is all the more true for translations of identical source code with different compilers or for different target microprocessors.
Zwar besteht die Möglichkeit, Computerprogramme durch Rückübersetzung (Disassemblierung) in einen für den Menschen lesbaren, jedoch maschinen nahen Assembler-Quelltext umzuwandeln. Problematisch ist hierbei jedoch, dass zum Einen durch die vorhergehende Übersetzung des Hochsprachen-Quelltextes in das mikroprozessorspezifische Computerprogramm wichtige Informationsträger wie beispielsweise Funktions-oder Variablennamen verloren gegangen sind; andererseits geben die durch Disassemblierung gewonnenen Assembler-Quelltexte die von dem Compiler vorgenommenen Optimierungen wieder, so dass auch durch Vergleich zweier durch Rückübersetzung gewonnener Assembler-Quelltexte nicht auf die Identität des ursprünglichen Hochsprachen-Quelltextes zurückgeschlossen werden kann. Diese relativ leichte Veränderbarkeit der mikroprozessorspezifischen Darstellung eines Computerprogramms ohne Änderung oder wesentliche Änderung des eigentlichen Hochsprache-Quelltextes wird insbesondere von Schadsoftware, beispielsweise Computerviren, Computer-Einbruchswerkzeugen und so weiter, ausgenutzt, um eine Erkennung von Schadsoftware in laufenden Computersystemen zu erschweren. Da in der Regel der Hochsprachen-Quelitext einer Schadsoftware unbekannt ist, können im laufenden Computerbetrieb Schadprogramme nur durch Vergleich des im Computerspeichersystem vorliegenden Computerprogramms in seiner mikroprozessorspezifischen Form mit bereits bekannten mikroprozessorspezifischen Formen von Schadprogrammen identifiziert werden. Durch einfache Neuübersetzung des Hochsprache-Quelltextes des Schadprogramms besteht die Möglichkeit, ein in seiner binären Darstellung derart verändertes Computerprogramm zu erhalten, dass das Computerprogramm von gängiger Anti-Virensoftware nicht mehr als schadhaft erkannt werden kann.Although it is possible to convert computer programs by back translation (disassembly) in a human-readable, but machine-friendly Assembler source code. However, the problem here is that, on the one hand, important information carriers such as function or variable names have been lost due to the previous translation of the high-level language code into the microprocessor-specific computer program; On the other hand, the assembler source texts obtained by disassembly reproduce the optimizations made by the compiler, so that it is not possible to deduce the identity of the original high-level language source text even by comparing two assembler source texts obtained by back translation. This relatively easy variability of the microprocessor-specific representation of a computer program without Modification or substantial change of the actual high-level language source code is exploited in particular by malware, for example computer viruses, computer burglary tools and so on, in order to make detection of malware in running computer systems more difficult. Since the high-level language quelite text of a malicious software is generally unknown, malicious programs can only be identified by comparing the computer program present in the computer memory system in its microprocessor-specific form with already known microprocessor-specific forms of malicious programs. By simple retranslation of the high-level language source code of the malicious program, it is possible to obtain a modified in his binary representation computer program that the computer program of common anti-virus software can not be detected as defective.
Auch außerhalb von der Erkennung von Schadsoftware ist ein zuverlässiges Verfahren zur Erkennung von Übereinstimmungen oder Unterschieden zwischen zwei oder mehr nicht im Quelltext bekannten Computerprogrammen wünschenswert, beispielsweise um unzulässige Änderungen eines Computerprogramms zu erkennen, Unterschiede zwischen verschiedenen Versionen eines Computerprogramms feststellbar zu machen oder unzulässige Verwendung von geschützten Quelltexten zu entdecken.Even outside the detection of malware, a reliable method of detecting matches or differences between two or more non-source code computer programs is desirable, for example, to detect inappropriate changes to a computer program, detect differences between different versions of a computer program, or improper use of to discover protected source code.
Die Druckschrift
Die Druckschrift
Es ist die Aufgabe der Erfindung, ein Verfahren zur Kennzeichnung eines in einem Computerspeichersystem enthaltenen Computerprogrammabschnitts anzugeben, welches eine zuverlässige und effiziente Kennzeichnung und Identifikation des Computerprogrammabschnitts ermöglicht.It is the object of the invention to specify a method for identifying a computer program section contained in a computer memory system, which enables a reliable and efficient identification and identification of the computer program section.
Diese Aufgabe wird erfindungsgemäß durch ein Verfahren mit den Merkmalen des Anspruchs 1 gelöst.This object is achieved by a method having the features of claim 1.
Durch die erfindungsgemäße Verdichtung der der Programmablaufbeziehung der Segmente zuordenbaren Kenndaten zu einer den Computerprogrammabschnitt identifizierenden Signatur erfolgt eine eindeutige Kennzeichnung des Computerprogrammabschnitts. Zweckmäßig erfolgt die Verdichtung der Kenndaten zu der Signatur dabei derart, dass eine möglichst eindeutige Zuordnung der Signatur zu der Programmablaufbeziehung der Segmente gewährleistet ist. Vorzugsweise lässt sich die Abbildung der Kenndaten auf die Signaturen einfach und effizient durchführen, während eine inverse Zuordnung der Signatur zu der charakterisierten Programmablaufbeziehung ohne Kenntnis der Programmablaufbeziehung nicht effizient durchführbar sein muss. Die Kenntnis nur der Signatur lässt so vorteilhaft keinen unmittelbaren Rückschluss auf die Programmablaufbeziehung zu. Übereinstimmende Signaturen zeigen mit hoher Wahrscheinlichkeit an, dass es sich um Computerprogrammabschnitte mit identischem abstrahierten Programmablaufplan und somit mit hoher Wahrscheinlichkeit um Übersetzungen eines identischen oder zumindest funktionsgleichen Quelltextes handelt. Vorteilhaft ist die Verdichtung der Kenndaten so gewählt, dass bei ausreichend großen, für reale Computerprogramme typischen Programmabschnitten die zugeordnete Signatur praktisch eindeutig ist. Die Signatur ist vorteilhaft mit geringem Speicheraufwand speicherbar und Vergleichsoperationen einfach zugänglich, so dass vorteilhaft bisher noch nicht gekennzeichnete Computerprogrammabschnitte effizient auf Übereinstimmung oder Abweichung mit bereits bekannten Computerprogrammabschnitten durch Vergleich der erzeugten Signaturen überprüfbar sind. Besonders vorteilhaft erfolgt eine Verdichtung von Kenndaten zu einer Signatur dadurch, dass eine Mehrzahl von Kenndaten erfasst wird, wobei die Mehrzahl von Kenndaten als Vektor eines Vektorraums aufgefasst und durch mathematische Faltung des Vektors in eine reelle Zahl transformiert wird.The compaction according to the invention of the program sequence of the segments assignable characteristic data to a computer program section identifying signature is a unique identifier of the computer program section. Appropriately, the compression of the characteristic data to the signature takes place in such a way that the most unambiguous assignment of the signature to the program flow relationship of the segments is ensured. Preferably, the mapping of the characteristic data to the signatures can be carried out simply and efficiently, while an inverse assignment of the signature to the characterized program sequence relationship without knowledge of the program sequence relationship need not be carried out efficiently. Knowledge of only the signature can thus advantageously no direct inference to the program flow relationship. Matching signatures indicate with high probability that they are computer program sections with an identical abstracted program flowchart and thus with high probability translations of an identical or at least functionally identical source text. Advantageously, the compression of the characteristics is chosen so that at sufficiently large, for real computer programs typical program sections the associated signature is practically unique. The signature can advantageously be stored with little storage effort and comparison operations can be easily accessed, so that advantageous computer program sections not yet marked can be checked for agreement or deviation with already known computer program sections by comparing the generated signatures. A compression of characteristic data to a signature is particularly advantageous in that a plurality of characteristic data is detected, wherein the plurality of characteristic data is understood as a vector of a vector space and transformed by mathematical convolution of the vector into a real number.
Die Bestimmung der Kenndaten, die der Programmablaufbeziehung zuordenbar sind, erfolgt vorzugsweise durch Darstellung der Programmablaufbeziehung in einem gerichteten Graphen, wobei die Segmente die Knoten des Graphen und die die Programmablaufbeziehung definierenden Programmablaufanweisungen die Kanten des Graphen definieren. Die Kenndaten können dann auf einfache Weise durch Eigenschaften des Graphen bestimmt werden. Vorzugsweise werden Kenndaten durch Eigenschaften wenigstens einer Kante und der mit der jeweils wenigstens einen Kante verbundenen Quellknoten und Zielknoten erzeugt; besonders bevorzugt umfassen die Kenndaten Eigenschaften aller oder wenigstens einer Mehrzahl der Kanten. Zweckmäßig werden als Kenndaten die topologische Ordnung des Quellknotens einer Kante (definiert durch die maximale Anzahl an gerichteten Kanten, welche ausgehend von einem keine zugehende Kanten aufweisenden Startknoten auf direktem Weg zu dem Quellknoten führen), die Anzahl der zu dem Quellknoten hinführenden Kanten (d.h. der Eingangsgrad des Quallknotens), die Anzahl der von dem Quellknoten wegführenden Kanten (d.h. der Ausgangsgrad des Quellknotens), der Eingangsgrad des Zielknotens, der Ausgangsgrad des Zielknotens und/oder die Anzahl an Unterfunktionsaufrufen innerhalb eines Knotens als Kenndaten erfasst.The determination of the characteristic data that can be assigned to the program flow relationship is preferably done by representing the program flow relationship in a directed graph, the segments defining the nodes of the graph and the program flow statement defining program flow statements defining the edges of the graph. The characteristic data can then be determined in a simple manner by properties of the graph. Characteristics are preferably generated by properties of at least one edge and the source node and destination node connected to the respective at least one edge; most preferably, the characteristics include characteristics of all or at least a majority of the edges. Suitably, as characteristics, the topological order of the source node of an edge (defined by the maximum number of directed edges leading from a starting node having no leading edges directly to the source node), the number of edges leading to the source node (ie Input level of the jumper node), the number of edges leading away from the source node (ie the source node's source level), the input level of the destination node, the output level of the destination node and / or the number of sub-function calls within a node as characteristics.
Zweckmäßig umfasst der Computerprogrammabschnitt wenigstens eine Funktion oder ein Unterprogramm eines wenigstens teilweise in dem Computerspeichersystem abgelegten Computerprogramms. Das Verfahren kann dabei unmittelbar auf einen Computerprogrammabschnitt angewendet werden, der in einem für einen Mikroprozessor unmittelbar ausführbaren Format vorliegt. Vorzugsweise erfolgt eine Anwendung des Verfahrens jedoch auf einen gegebenenfalls durch Rückübersetzung gewonnenen Assembler-Quelltext des Computerprogrammabschnitts. Es versteht sich, dass das Verfahren auch auf einen in einer Hochsprache vorliegenden Computerprogrammabschnitt, einen zu interpretierenden Computerprogrammabschnitt oder einen Bytecode, beispielsweise den Bytecode eines Java-Programms, angewendet werden kann.The computer program section expediently comprises at least one function or a subprogram of a computer program stored at least partially in the computer memory system. In this case, the method can be applied directly to a computer program section which is present in a format that can be executed directly by a microprocessor. Preferably, however, the method is applied to an assembler source code of the computer program section obtained, if appropriate, by back translation. It goes without saying that the method can also be applied to a computer program section present in a high-level language, a computer program section to be interpreted or a byte code, for example the bytecode of a Java program.
Dle Zergliederung des Computerprogrammabschnitts erfolgt vorzugsweise derart, dass jedes der Segmente eine lineare Abfolge von Programmanweisungen umfasst, welche nicht durch Sprunganweisungen oder dergleichen miteinander verbunden sind, In den Segmenten enthaltene Unterprogrammaufrufe können dabei jeweils aufgelöst werden oder unaufgelöst bleiben.The parsing of the computer program section is preferably carried out such that each of the segments comprises a linear sequence of program instructions which are not interconnected by jump instructions or the like. Subroutine calls contained in the segments can each be resolved or remain unresolved.
Zweckmäßig wird das Verfahren durch ein Computerprogramm auf einem Computersystem mit einem Mikroprozessor durchgeführt. Ein Vorteil des Verfahrens ist dabei, dass der zu kennzeichnende Computerprogrammabschnitt auch in einem zu dem Mikroprozessor inkompatiblen Format vorliegen kann, so dass die in dem Computerprogrammabschnitt enthaltenen Programmabweisungen durch den das Verfahren durchführenden Mikroprozessor nicht selbst ausführbar sind. Gleichwohl ist ein Ausführen des Computerprogrammabschnitts auf dem das Verfahren durchführenden Computersystem möglich; insbesondere kann eine Kennzeichnung des Computerprogrammabschnitts auch im laufenden Betrieb des den Computerprogrammabschnitt umfassenden Computerprogramms erfolgen. Vorzugsweise umfasst die Zergliederung eine Identifikation von Programmablaufanweisungen des Computerprogrammabschnitts. Solche Programmablaufanweisungen können insbesondere als unbedingte Sprungbefehle, bedingte Sprungbefehle, Schleifen oder Unterfunktionsaufrufe ausgebildet sein. Die Definition von Segmenten erfolgt dann zweckmäßig durch Identifikation von Bereichen, welche keine Programmablaufanweisungen umfassen.Conveniently, the method is performed by a computer program on a computer system with a microprocessor. An advantage of the method is that the computer program section to be identified can also be present in a format incompatible with the microprocessor, so that the program rejections contained in the computer program section can not be executed by the microprocessor performing the method itself. However, it is possible to execute the computer program section on the computer system performing the method; In particular, an identification of the computer program section can also take place during operation of the computer program comprising the computer program section. Preferably, the digest includes an identification of program flow instructions of the computer program portion. Such program flow instructions may in particular be designed as unconditional jump instructions, conditional jump instructions, loops or subfunction calls. The definition of segments is then expediently carried out by identifying areas which do not comprise program execution instructions.
Das erfindungsgemäße Verfahren ermöglicht vorteilhaft eine Identifizierung von Schadsoftware im laufenden Betrieb eines Computersystems. Hierzu erfolgt eine Kennzeichnung von bekannten Schadsoftware-Computerprogrammen unter Verwendung des erfindungsgemäßen Verfahrens und Hinterlegung der durch das Verfahren ermittelten Signaturen. Durch Anwendung des erfindungsgemäßen Verfahrens auf in dem Computersystem ablaufende Computerprogrammabschnitte und Vergleich der erzeugten Signatur mit den abgelegten Signaturen bekannter Schadsoftware-Computerprogrammen, ist eine Identifikation von Schadsoftware ermöglicht, auch wenn die im Computerspeichersystem vorhandene spezifische Realisierung des Computerprogrammabschnitts bisher noch nicht als schadhaft bekannt war.The inventive method advantageously allows identification of malware during operation of a computer system. For this purpose, a marking of known malware computer programs is carried out using the method according to the invention and deposit of the signatures determined by the method. By applying the method according to the invention to running in the computer system computer program sections and comparison of the generated signature with the stored signatures known malware computer programs, identification of malicious software is possible, even if the present in the computer storage system specific implementation of the computer program section was not yet known to be defective.
Ein erfindungsgemäßes Verfahren zur Identifizierung wenigstens eines in einem Computerspeichersystem enthaltenen Computerprogramms umfasst die Schritte Gliederung des Computerprogramms in Computerprogrammabschnitte und Anwendung des erfindungsgemäßen Verfahrens zur Kennzeichnung eines in einem Computerspeichersystem enthaltenen Computerprogrammabschnitts auf wenigstens einen der Computerprogrammabschnitte zur Ermittlung einer den Computerprogrammabschnitt identifizierenden Signatur. Vorzugsweise wird das Verfahren auf eine Mehrzahl, besonders bevorzugt auf alle Computerprogrammabschnitte angewandt, so dass eine das Computerprogramm insgesamt identifizierende Menge von Signaturen erzeugt wird. Veränderungen des Computerprogramms sind durch dieses Verfahren besonders zuverlässig erkennbar, da eine Veränderung des Computerprogramms regelmäßig nur zu einer Änderung von wenigen Signaturen aus der Menge der Signaturen führt.A method according to the invention for identifying at least one computer program contained in a computer memory system comprises the steps of dividing the computer program into computer program sections and applying the inventive method for identifying a computer program section contained in a computer memory system to at least one of the computer program sections for determining a signature identifying the computer program section. Preferably, the method is applied to a plurality, particularly preferably to all computer program sections, so that a total of the computer program identifying amount of signatures is generated. Changes of the computer program are recognizable by this procedure particularly reliably, since a change of the Computer program regularly only leads to a change of a few signatures from the set of signatures.
Zweckmäßig sind die Computerprogrammabschnitte durch Funktionen oder Unterprogramme des Computerprogramms ausgebildet. Vorteilhaft sind so Beziehungen von Computerprogrammen zueinander, die durch die Verwendung übereinstimmender oder wirkungsgleicher Funktionen oder Unterprogramme definiert sind, durch Vergleich der Signaturen ermittelbar.Suitably, the computer program sections are formed by functions or subroutines of the computer program. Advantageously, relationships of computer programs to each other, which are defined by the use of matching or equivalent functions or subroutines, can be determined by comparing the signatures.
Zweckmäßig umfasst das Gliedern des Computerprogramms in Computerprogrammabschnitte eine Rückübersetzung aus einem für einen Mikroprozessor unmittelbar ausführbaren Format in eine Assembler-Sprache.Expediently, the classification of the computer program into computer program sections comprises a back translation from a format that can be executed directly by a microprocessor into an assembler language.
Das Verfahren lässt sich vorteilhaft zur identifizlerung von zu einer Computerprogrammfamilie gehörenden Computerprogrammen verwenden. Eine Computerprogrammfamilie ist dabei dadurch definiert, dass mehrere Computerprogramme einen signifikanten Anteil gemeinsamer Funktionen aufweisen, wie es beispielsweise bei Fortentwicklungen von Computerprogrammen oder kleineren Abwandlungen des Computerprogramms der Fall ist. Dies ermöglicht insbesondere eine Vereinfachung der Analyse von Schadsoftware, da durch Erkennung einer Abwandlungen bereits bekannter Schadprogramme auf vorab erlangte Analyseergebnisse zurückgegriffen werden kann. Ebenfalls wird eine Identifikation von durch einen Patch geänderter Funktionen innerhalb einer Computerprogrammfamilie ermöglicht.The method can be used advantageously for identifying computer programs belonging to a computer program family. A computer program family is defined by the fact that a plurality of computer programs have a significant share of common functions, as is the case, for example, with developments of computer programs or smaller modifications of the computer program. This makes it possible, in particular, to simplify the analysis of malicious software, because it is possible to fall back on previously obtained analytical results by detecting a modification of already known malicious programs. Also, identification of functions changed by a patch within a computer program family is enabled.
Ein vorteilhaftes Verfahren zum Vergleich eines maschinenausführbaren ersten Computerprogramms und eines maschinenausführbaren zweiten Computerprogramms zur Ermittlung eines Grads von Übereinstimmung umfasst die Schritte Anwenden des Verfahrens zur Kennzeichnung eines Computerprogrammabschnitts oder eines Computerprogramms auf das erste Computerprogramm oder einen Computerprogrammabschnitt des ersten Computerprogramms zur Erzeugung einer ersten Menge von das erste Computerprogramm identifizierenden Signaturen, Anwenden des Verfahrens zur Kennzeichnung eines Computerprogrammabschnitts oder eines Computerprogramms auf das zweite Computerprogramm oder einen Computerprogrammabschnitt des zweiten Computerprogramms zur Erzeugung einer zweiten Menge von das zweite Computerprogramm identifizierenden Signaturen, und Bestimmung des Grads der Übereinstimmung durch Differenzbildung zwischen der ersten Menge und der zweiten Menge von Signaturen. Hierdurch lassen sich auf einfache und zuverlässige Weise diejenigen Funktionen des ersten Computerprogramms und des zweiten Computerprogramme identifizieren, welche unterschiedliche abstrakte Programmablaufpläne aufweisen. Entsprechend erfolgt vorzugsweise eine Kenntlichmachung der Computerprogrammabschnitte, welche eine nicht in der Schnittmenge der ersten Menge und der zweiten Menge von Signaturen enthaltene Signatur aufweisen.An advantageous method of comparing a machine-executable first computer program and a machine-executable second computer program to determine a degree of coincidence comprises the steps of applying the method of characterizing a computer program section or computer program to the first computer program or a computer program section of the first computer program to produce a first set of the same first computer program identifying signatures, applying the procedure for marking a computer program section or a computer program on the second computer program or a computer program section of the second computer program for generating a second set of signatures identifying the second computer program, and determining the degree of coincidence by differentiating between the first set and the second set of signatures. In this way, those functions of the first computer program and of the second computer programs can be identified in a simple and reliable manner, which have different abstract program schedules. Accordingly, it is preferable to identify the computer program sections which have a signature not contained in the intersection of the first set and the second set of signatures.
Vorteilhaft ist durch Verwendung des Verfahrens zum Vergleich eines maschinenausführbaren ersten Computerprogramms und eines maschinenausführbaren zweiten Computerprogramms eine Veränderung eines quelltextunbekannten Computerprogramms ermittelbar, in dem das Verfahren auf die ungeänderte und die geänderte Fassung des Computerprogramms angewendet wird.Advantageously, by using the method for comparing a machine-executable first computer program and a machine-executable second computer program, a change of a source-text unknown computer program can be determined, in which the method is applied to the unchanged and the changed version of the computer program.
Ein vorteilhaftes Verfahren zur Ermittlung von Veränderungen oder Übereinstimmungen eines in einem Computerspeichersystem eines lokalen Computers enthaltenen maschinenausführbaren Computerprogramms oder Computerprogrammabschnitts gegenüber wenigstens einem Referenzcomputerprogramm umfasst die Schritte Anwenden des erfindungsgemäßen Verfahrens zur Kennzeichnung eines Computerprogrammabschnitts oder eines Computerprogramms auf das Computerprogramm oder den Computerprogrammabschnitt zur Ermittlung wenigstens einer Signatur, Übertragen der wenigstens einen Signatur zu einem entfernten Computersystem, und Vergleich der übertragenen Signaturen mit einer Menge von auf dem entfernten Computersystem gespeicherten Signaturen zur Ermittlung einer Veränderung oder Übereinstimmung. Vorteilhaft kann durch dieses Verfahren die Echtheit von Software, also eine vollständige Übereinstimmung des im Computerspeichersystem des lokalen Computers enthaltenen Computerprogramms mit einem Referenzcomputerprogramm, ermittelt werden. Weiterhin ermöglicht das Verfahren eine effiziente und sichere Überprüfung von auf einem lokalen Computer ausgeführten Computerprogrammen auf schädigende oder unerwünschte Programmabschnitte, auch wenn deren spezifische binäre Form bisher noch unbekannt war. Zudem ermöglicht die Speicherung von Signaturen auf einem beispielsweise durch Netzwerkverbindungen wie dem Internet erreichbaren Computersystem die Einrichtung eines Suchdienstes zur Erkennung und Zuordnung von Computerprogrammen und Computerprogrammabschnitten, ähnlich der bekannten Internet-Suchdienste für Texte oder Multimedia-Dateien. Ein besonderer Vorteil ist dabei die von der spezifischen maschinenausführbaren Form eines Computerprogramms unabhängige Identifikation des Computerprogramms durch die wenigstens eine Signatur.An advantageous method for detecting changes or matches of a machine-executable computer program or computer program section contained in a computer memory system of a local computer to at least one reference computer program comprises the steps of applying the inventive method for identifying a computer program section or a computer program to the computer program or the computer program section for determining at least one signature , Transmitting the at least one signature to a remote computer system, and comparing the transmitted signatures to a set of signatures stored on the remote computer system to determine a change or coincidence. Advantageous For example, this method can be used to determine the authenticity of software, ie a complete match of the computer program contained in the computer memory system of the local computer with a reference computer program. Furthermore, the method enables efficient and secure checking of computer programs executed on a local computer for harmful or undesired program sections, even if their specific binary form was previously unknown. In addition, the storage of signatures on a computer system that can be reached, for example, by network connections such as the Internet makes it possible to set up a search service for recognizing and assigning computer programs and computer program sections, similar to the known Internet search services for texts or multimedia files. A particular advantage is the independent of the specific machine-executable form of a computer program identification of the computer program by the at least one signature.
Weitere Vorteile und Merkmale der Erfindung ergeben sich aus der nachfolgenden Beschreibung bevorzugter Ausführungabeispiele und den abhängigen Ansprüchen.Further advantages and features of the invention will become apparent from the following description of preferred Ausführungsbeiispiele and the dependent claims.
Die Erfindung wird nachstehend unter Bezugnahme auf die anliegenden Figuren anhand eines bevorzugten Ausführungsbeispiels erläutert.
- Fig. 1
- zeigt den Quelltext eines in der Hochsprache C geschriebenen Computerprogrammabschnitts.
- Fig. 2
- zeigt den Quelltext aus
Fig. 1 in einer Assembler-Sproche, wobei Segmente des Assembler-Quelltextes kenntlich gemacht sind.
- Fig. 1
- shows the source code of a computer program section written in the high-level language C.
- Fig. 2
- shows the source text
Fig. 1 in an assembler language, with segments of the assembler source being identified.
Der in
in der Darstellung gemäß
Das Verfahren zur Kennzeichnung des Computerprogrammabschnitts funktioniert nun automatisiert durch ein auf dem Mikroprozessor des Computersysteme ablaufendes Auswerteprogramm wie folgt:
- Zunächst werden der Programmablaufbeziehung zwischen den Segmenten S1, S2, S3, S4 Kenndaten zugeordnet. Vorliegend erfolgt eine Zuordnung zu den Kanten K1, K2, K3, K4 des Graphen wie folgt:
- 1. Bestimmung der topologischen Ordnung T des Quellknotens der Kante.
- 2. Bestimmung des Eingangsgrads EQ des Quellknotens.
- 3. Bestimmung des Ausgangsgrads AQ des Quellknotens.
- 4. Bestimmung des Eingangsgrads EZ des Zielknotens.
- 5. Bestimmung des Ausgangsgrads AZ des Zielknotens.
- First, the program flow relationship between the segments S1, S2, S3, S4 are assigned characteristic data. In the present case, an assignment to the edges K1, K2, K3, K4 of the graph is carried out as follows:
- 1. Determination of the topological order T of the source node of the edge.
- 2. Determination of the input degree EQ of the source node.
- 3. Determination of the output degree AQ of the source node.
- 4. Determination of the input degree EZ of the destination node.
- 5. Determination of the starting degree AZ of the target node.
Für die Kanten K1, K2, K3, K4 gemäß
Eine Verdichtung der Kenndaten zu einer Signatur funktioniert nun wie folgt:
Jeder Kante K1, K2, K3, K4 wird zunächst ein Vektor der ermittelten Kenndaten (T, EQ, AQ, EZ, AZ) zugeordnet. Anschließend wird jeder Kante durch Berechnung der ersten Funktion Z = T + EQ*sqrt(2) + AQ*sqrt(3) + EZ*sqrt(5) + AZ*sqrt(7), wobei sqrt( ) die mathematische Quadratwurzelfunktion bezeichnet, eine eindeutig bestimmte Zahl zugeordnet. Es ergibt sich die Zuordnung:
Each edge K1, K2, K3, K4 is first assigned a vector of the determined characteristic data (T, EQ, AQ, EZ, AZ). Then, each edge is calculated by computing the first function Z = T + EQ * sqrt (2) + AQ * sqrt (3) + EZ * sqrt (5) + AZ * sqrt (7), where sqrt () denotes the mathematical square root function, assigned a unique number. The result is the assignment:
Als Signatur des Computerprogrammabschnitts ergibt sich somit die Zahlenmenge {Z1=8,3459209; Z2=8,3459209; Z3=8,81840032; Z4=8,61840032}. Eine weitere Verdichtung dieser Zahlenmenge erfolgt durch Erzeugung einer verdichteten Kennzahl V mittels einer zweiten Funktion, bestehtend aus der Addition der Kehrwerte der den Kanten K1, K2, K3, K4 zugeordneten Zahlen: V=1/Z1 + 1/Z2 + 1/Z3 + 1/Z4. Im vorgenannten Beispiel ergibt sich somit eine verdichtete Kennzahl V=0,471699652. Durch Summation der Kehrwerte 1/Z in der zweiten Funktion wird vorteilhaft eine Interaktion, insbesondere ein gegenseitiges Aufheben, von einzelnen Termen der ersten Funktion vermieden.The signature of the computer program section is thus the number set {Z1 = 8.3459209; Z2 = 8.3459209; Z3 = 8.81840032; Z4 = 8.61840032}. Further compression of this set of numbers takes place by generating a compressed characteristic number V by means of a second function, consisting of adding the reciprocals of the numbers assigned to the edges K1, K2, K3, K4: V = 1 / Z1 + 1 / Z2 + 1 / Z3 + 1 / Z4. In the aforementioned example, this results in a condensed characteristic number V = 0.471699652. By summation of the reciprocal values 1 / Z in the second function, an interaction, in particular a mutual cancellation, of individual terms of the first function is advantageously avoided.
Als besonders wirkungsvolles Verfahren zum Vergleich von Computerprogrammen hat sich herausgestellt, die Computerprogramme daraufhin zu untersuchen, ob jeweils Paare von Computerprogrammabschnitten mit gleichen verdichteten Kennzahlen vorliegen, die sich gegenseitig aufrufen. Während das Auffinden von Computerprogrammabschnitten mit identischer verdichteter Kennzahl, Insbesondere bei Computerprogrammen geringen Umfangs, möglicherweise noch durch zufällige Übereinstimmung herrühren kann, ist eine zufällige Übereinstimmung von solchen Paaren von Computerprogrammabschnitten bei Anwendung auf realen Computerprogrammen mit nahezu vollständiger Sicherheit ausgeschlossen. Ein besonders vorteilhaftes Verfahren zur Kennzeichnung eines Computerprogramms ergibt sich somit dadurch, dass nach Gliederung des Computerprogramms in Computerprogrammabschnitte einer einen ersten Computerprogrammabschnitt mit einem zweiten Computerprogrammabschnitt verbindenden Kante jeweils die verdichtete Signatur des ersten Computerprogrammabschnitts und des zweiten Computerprogrammabschnitts als Kantensignatur zugeordnet wird. Kommt in zwei Computerprogrammen eine große Anzahl von identischen Kantensignaturen vor, ergibt sich hieraus ein entsprechendes Maß der Ähnlichkeit bzw. Übereinstimmung der Computerprogramme.As a particularly effective method for comparing computer programs has been found to examine the computer programs to determine whether there are pairs of computer program sections with the same condensed ratios that call each other. While locating computer program portions of identical compressed index, especially in small-scale computer programs, may still be due to random match, random match of such pairs of computer program portions when applied to real-world computer programs is almost impossible. A particularly advantageous method for identifying a computer program thus results from the fact that, after the computer program has been divided into computer program sections, a first Computer program section is associated with a second computer program section connecting edge respectively the compacted signature of the first computer program section and the second computer program section as an edge signature. If a large number of identical edge signatures occur in two computer programs, this results in a corresponding degree of similarity or conformity of the computer programs.
Vorstehend wurde das erfindungsgemäße Verfahren unter Bezugnahme auf ein Computerprogramm mit nur einer Funktion, der Hauptfunktion main(), erläutert. Es versteht sich, dass das Verfahren auch auf ein Computerprogramm mit einer Vielzahl von Funktionen und Unterprogrammen anwendbar ist, wobei zweckmäßig jede Funktion bzw. jedes Unterprogramm als Computerprogrammabschnitt gekennzeichnet wird. Die Anwendung des erfindungsgemäßen Verfahrens auf Computerprogramme üblichen Umfangs führt zu einer das Computerprogramm eindeutig identifizierenden Signatur, welche eine Zahlenmenge mit bis zu zehntausend oder mehr Elementen umfasst. Es versteht sich, dass in jedem Fall aus Signaturen mittels der vorgenannten zweiten Funktion verdichtete Signaturen erstellbar sind. Es versteht sich ferner, dass in jedem Fall eine Erzeugung von Kantensignaturen zum sofortigen oder späteren Vergleich mit anderen, möglicherweise noch unbekannten Computerprogrammen erfolgen kann.In the foregoing, the method according to the invention has been explained with reference to a computer program with only one function, the main function main (). It is understood that the method is also applicable to a computer program having a plurality of functions and subroutines, wherein each function or each subroutine is expediently identified as a computer program section. The application of the method according to the invention to computer programs of the usual scope leads to a computer program uniquely identifying signature, which comprises a number of numbers with up to ten thousand or more elements. It is understood that in any case condensed signatures can be created from signatures by means of the aforementioned second function. It is further understood that in any case, generation of edge signatures may be made for immediate or later comparison with other possibly unknown computer programs.
Claims (15)
Zergliederung des Computerprogrammabschnitts in Segmente, wobei durch in dem Computerprogrammabschnitt enthaltene Programmbefehle eine Progammablaufbeziehung zwischen den Segmenten definierbar ist, und
Bestimmung von Kenndaten, die der Programmablaufbeziehung der Segmente zuordenbar sind,
dadurch gekennzeichnet,
dass die Kenndaten zu einer den Computerprogrammabschnitt identifizierenden Signatur verdichtet werden.A method of identifying a computer program portion contained in a computer storage system, comprising the steps of:
Parsing the computer program section into segments, wherein a program sequence relationship between the segments is definable by program instructions contained in the computer program section, and
Determination of characteristic data that can be assigned to the program flow relationship of the segments,
characterized,
that the characteristic data is compressed to a signature identifying the computer program section.
Gliederung des Computerprogramms in
Computerprogrammabschnitte, und
Anwendung des Verfahrens nach einem der Ansprüche 1 bis 7 auf wenigstens einen der Computerprogrammabschnitte zur Ermittlung einer den Computerprogrammabschnitt identifizierenden Signatur.A method of identifying at least one computer program contained in a computer storage system comprising the steps
Outline of the computer program in
Computer program sections, and
Application of the method according to one of claims 1 to 7 to at least one of the computer program sections for determining a signature identifying the computer program section.
Anwenden des Verfahrens nach einem der Ansprüche 1 bis 11 auf das erste Computerprogramm oder einen Programmabschnitt des ersten Computerprogramms zur Erzeugung einer ersten Menge von das erste Computerprogramm identifizierenden Signaturen,
Anwenden des Verfahrens nach einem der Ansprüche 1 bis 11 auf das zweite Computerprogramm oder einen Programmabschnitt des zweiten Computerprogramms zur Erzeugung einer zweiten Menge von das zweite Computerprogramm identifizierenden Signaturen, und
Bestimmung des Grads der Übereinstimmung durch Differenzbildung zwischen der ersten Menge und der zweiten Menge von Signaturen.A method of comparing a machine-executable first computer program and a machine-executable second computer program to determine a degree of coincidence comprising the steps
Applying the method according to one of claims 1 to 11 to the first computer program or a program section of the first computer program for generating a first set of signatures identifying the first computer program,
Applying the method according to one of claims 1 to 11 to the second computer program or a program section of the second computer program for generating a second set of signatures identifying the second computer program, and
Determining the degree of correspondence by difference between the first set and the second set of signatures.
Anwenden des Verfahrens nach einem der Ansprüche 1 bis 11 auf das Computerprogramm oder den Computerprogammabschnitt zur Ermittlung wengstens einer Signatur,
Übertragen der wenigstens einen Signatur zu einem entfernten Computersystem, und
Vergleich der übertragenen Signatur mit einer Menge von auf dem entfernten Computersystem gespeicherten Signaturen zur Ermittlung einer Veränderung oder Übereinstimmung.A method for detecting changes or matches of a machine-executable computer program included in a computer memory system of a local computer or Computer program section opposite at least one reference computer program, comprising the steps
Applying the method according to one of claims 1 to 11 to the computer program or the computer program section for determining at least one signature,
Transmitting the at least one signature to a remote computer system, and
Comparing the transmitted signature with a set of signatures stored on the remote computer system to determine a change or match.
Applications Claiming Priority (1)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
DE102009041098A DE102009041098A1 (en) | 2009-09-14 | 2009-09-14 | A method of identifying a computer program section contained in a computer storage system |
Publications (2)
Publication Number | Publication Date |
---|---|
EP2302554A2 true EP2302554A2 (en) | 2011-03-30 |
EP2302554A3 EP2302554A3 (en) | 2012-10-31 |
Family
ID=43242283
Family Applications (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
EP10009475A Withdrawn EP2302554A3 (en) | 2009-09-14 | 2010-09-13 | Method for identifying a section of computer program contained in a computer storage system |
Country Status (3)
Country | Link |
---|---|
US (1) | US8689327B2 (en) |
EP (1) | EP2302554A3 (en) |
DE (1) | DE102009041098A1 (en) |
Families Citing this family (4)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
JP4839424B2 (en) * | 2008-12-15 | 2011-12-21 | インターナショナル・ビジネス・マシーンズ・コーポレーション | Method for supporting program analysis, and computer program and computer system thereof |
US8972947B2 (en) * | 2013-01-09 | 2015-03-03 | Apple Inc. | Data presentation in integrated development environments |
US10467409B2 (en) * | 2014-12-23 | 2019-11-05 | Mcafee, Llc | Identification of malicious execution of a process |
US11182472B2 (en) * | 2019-09-30 | 2021-11-23 | Vmware, Inc. | Security in a computing environment by monitoring expected operation of processes within the computing environment |
Citations (2)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US7207038B2 (en) | 2003-08-29 | 2007-04-17 | Nokia Corporation | Constructing control flows graphs of binary executable programs at post-link time |
US20080189530A1 (en) * | 2007-02-07 | 2008-08-07 | International Business Machines Corporation | Method and system for hardware based program flow monitor for embedded software |
Family Cites Families (4)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
JP2501771B2 (en) | 1993-01-19 | 1996-05-29 | インターナショナル・ビジネス・マシーンズ・コーポレイション | Method and apparatus for obtaining multiple valid signatures of an unwanted software entity |
GB2353372B (en) * | 1999-12-24 | 2001-08-22 | F Secure Oyj | Remote computer virus scanning |
US6937606B2 (en) | 2001-04-20 | 2005-08-30 | International Business Machines Corporation | Data structures for efficient processing of IP fragmentation and reassembly |
US8250645B2 (en) | 2008-06-25 | 2012-08-21 | Alcatel Lucent | Malware detection methods and systems for multiple users sharing common access switch |
-
2009
- 2009-09-14 DE DE102009041098A patent/DE102009041098A1/en not_active Ceased
-
2010
- 2010-09-13 EP EP10009475A patent/EP2302554A3/en not_active Withdrawn
- 2010-09-14 US US12/881,223 patent/US8689327B2/en active Active
Patent Citations (2)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US7207038B2 (en) | 2003-08-29 | 2007-04-17 | Nokia Corporation | Constructing control flows graphs of binary executable programs at post-link time |
US20080189530A1 (en) * | 2007-02-07 | 2008-08-07 | International Business Machines Corporation | Method and system for hardware based program flow monitor for embedded software |
Non-Patent Citations (1)
Title |
---|
G.R. THOMSON ET AL.: "Polymorphie Malware Detectlon and Identification via Context-Free Grammar Homomorphismu", BELL LABS TECHNLCAL JOURNAL, vol. 12, no. 3, 2007, pages 139 - 147 |
Also Published As
Publication number | Publication date |
---|---|
US8689327B2 (en) | 2014-04-01 |
US20110067010A1 (en) | 2011-03-17 |
EP2302554A3 (en) | 2012-10-31 |
DE102009041098A1 (en) | 2011-03-24 |
Similar Documents
Publication | Publication Date | Title |
---|---|---|
DE602004010563T2 (en) | Detailed identification of hardware to connect the software to a change-tolerant computer system | |
DE69909945T2 (en) | Method and arrangement for correlating profile data dynamically generated by an optimized executable program with source code instructions | |
EP1668431B1 (en) | Method, computer program with program code means and computer program product for analyzing variables influencing a combustion process in a combustion chamber, using a trainable statistical model | |
US10261967B2 (en) | Data extraction | |
DE112010003979T5 (en) | System and method for the static recognition and categorization of information flow downgraders | |
EP2095238A2 (en) | Method for testing a computer programme | |
DE10348591A1 (en) | Automatically identifying a program error in a computer program | |
DE112019001121T5 (en) | DETECTING MALWARE | |
EP1738257B1 (en) | Method for preventing data inconsistency between accesses of different functions of an application to a global variable in a data processing installation | |
DE60002327T2 (en) | DERIVING OPERAND TYPES WITHIN A INTERMEDIATE LANGUAGE | |
DE112018004660T5 (en) | USE COMMENTS TO PROVIDE OPTIMIZATION | |
DE102012217315A1 (en) | Use native routines instead of emulated routines in an emulated application | |
EP2302554A2 (en) | Method for identifying a section of computer program contained in a computer storage system | |
EP2362321A1 (en) | Method and system for detecting malware | |
EP1010070B1 (en) | Method for converting an object code into a programme code | |
AT522281B1 (en) | Procedure for characterizing the operating state of a computer system | |
DE102014105218A1 (en) | Search device using finite automata for partial words | |
EP3286683A1 (en) | System and method for monitoring the integrity of a component delivered by a server system to a client system | |
DE112017006528T5 (en) | ATTACK / ABNORMALITY DETECTION DEVICE, ATTACK / ABNORMALITY DETECTION PROCEDURE AND ATTACK / ABNORMALITY DETECTION PROGRAM | |
DE19617842A1 (en) | Code transformation method | |
EP0708941B1 (en) | Process for testing an object-oriented programme | |
EP2682866B1 (en) | Methods for the implementation of data formats | |
EP1668494B1 (en) | Method and system for configuring the language of a computer programme | |
DE112012003812B4 (en) | Use a heuristically generated policy to dynamically select string analysis algorithms for client queries | |
EP2757466B1 (en) | A computer implemented method for generating computer program code |
Legal Events
Date | Code | Title | Description |
---|---|---|---|
PUAI | Public reference made under article 153(3) epc to a published international application that has entered the european phase |
Free format text: ORIGINAL CODE: 0009012 |
|
AK | Designated contracting states |
Kind code of ref document: A2Designated state(s): AL AT BE BG CH CY CZ DE DK EE ES FI FR GB GR HR HU IE IS IT LI LT LU LV MC MK MT NL NO PL PT RO SE SI SK SM TR |
|
AX | Request for extension of the european patent |
Extension state: BA ME RS |
|
RAP1 | Party data changed (applicant data changed or rights of an application transferred) |
Owner name: GOOGLE INC. |
|
PUAL | Search report despatched |
Free format text: ORIGINAL CODE: 0009013 |
|
AK | Designated contracting states |
Kind code of ref document: A3Designated state(s): AL AT BE BG CH CY CZ DE DK EE ES FI FR GB GR HR HU IE IS IT LI LT LU LV MC MK MT NL NO PL PT RO SE SI SK SM TR |
|
AX | Request for extension of the european patent |
Extension state: BA ME RS |
|
RIC1 | Information provided on ipc code assigned before grant |
Ipc: G06F 21/00 20060101AFI20120927BHEP |
|
17P | Request for examination filed |
Effective date: 20130426 |
|
17Q | First examination report despatched |
Effective date: 20160713 |
|
RAP1 | Party data changed (applicant data changed or rights of an application transferred) |
Owner name: GOOGLE LLC |
|
STAA | Information on the status of an ep patent application or granted ep patent |
Free format text: STATUS: THE APPLICATION IS DEEMED TO BE WITHDRAWN |
|
18D | Application deemed to be withdrawn |
Effective date: 20190402 |
|
P01 | Opt-out of the competence of the unified patent court (upc) registered |
Effective date: 20230519 |