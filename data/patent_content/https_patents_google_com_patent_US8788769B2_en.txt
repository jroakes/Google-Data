US8788769B2 - System and method for performing backup or restore operations utilizing difference information and timeline state information - Google Patents
System and method for performing backup or restore operations utilizing difference information and timeline state information Download PDFInfo
- Publication number
- US8788769B2 US8788769B2 US12/947,393 US94739310A US8788769B2 US 8788769 B2 US8788769 B2 US 8788769B2 US 94739310 A US94739310 A US 94739310A US 8788769 B2 US8788769 B2 US 8788769B2
- Authority
- US
- United States
- Prior art keywords
- data
- time
- point
- storage
- storage pool
- Prior art date
- Legal status (The legal status is an assumption and is not a legal conclusion. Google has not performed a legal analysis and makes no representation as to the accuracy of the status listed.)
- Expired - Fee Related, expires
Links
Images
Classifications
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F11/00—Error detection; Error correction; Monitoring
- G06F11/07—Responding to the occurrence of a fault, e.g. fault tolerance
- G06F11/14—Error detection or correction of the data by redundancy in operation
- G06F11/1402—Saving, restoring, recovering or retrying
- G06F11/1446—Point-in-time backing up or restoration of persistent data
- G06F11/1448—Management of the data involved in backup or backup restore
- G06F11/1451—Management of the data involved in backup or backup restore by selection of backup contents
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F11/00—Error detection; Error correction; Monitoring
- G06F11/07—Responding to the occurrence of a fault, e.g. fault tolerance
- G06F11/14—Error detection or correction of the data by redundancy in operation
- G06F11/1402—Saving, restoring, recovering or retrying
- G06F11/1446—Point-in-time backing up or restoration of persistent data
- G06F11/1456—Hardware arrangements for backup
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F11/00—Error detection; Error correction; Monitoring
- G06F11/07—Responding to the occurrence of a fault, e.g. fault tolerance
- G06F11/14—Error detection or correction of the data by redundancy in operation
- G06F11/1402—Saving, restoring, recovering or retrying
- G06F11/1446—Point-in-time backing up or restoration of persistent data
- G06F11/1458—Management of the backup or restore process
- G06F11/1461—Backup scheduling policy
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F11/00—Error detection; Error correction; Monitoring
- G06F11/07—Responding to the occurrence of a fault, e.g. fault tolerance
- G06F11/14—Error detection or correction of the data by redundancy in operation
- G06F11/1402—Saving, restoring, recovering or retrying
- G06F11/1446—Point-in-time backing up or restoration of persistent data
- G06F11/1458—Management of the backup or restore process
- G06F11/1469—Backup restoration techniques
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F11/00—Error detection; Error correction; Monitoring
- G06F11/07—Responding to the occurrence of a fault, e.g. fault tolerance
- G06F11/14—Error detection or correction of the data by redundancy in operation
- G06F11/1402—Saving, restoring, recovering or retrying
- G06F11/1446—Point-in-time backing up or restoration of persistent data
- G06F11/1448—Management of the data involved in backup or backup restore
- G06F11/1453—Management of the data involved in backup or backup restore using de-duplication of the data
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F2201/00—Indexing scheme relating to error detection, to error correction, and to monitoring
- G06F2201/84—Using snapshots, i.e. a logical point-in-time copy of the data
Definitions
- This invention relates generally to data management, data protection, disaster recovery and business continuity. More specifically, this invention relates to a system and method for performing backup or restore operations utilizing difference information and timeline state information.
- FIG. 1 shows a typical set of data management operations that would be applied to the data of an application such as a database underlying a business service such as payroll management.
- application 102 requires primary data storage 122 with some contracted level of reliability and availability.
- Backups 104 are made to guard against corruption or the primary data storage through hardware or software failure or human error. Typically backups may be made daily or weekly to local disk or tape 124 , and moved less frequently (weekly or monthly) to a remote physically secure location 125 .
- Compliance with legal or voluntary policies 108 may require that some data be retained for safely future access for some number of years; usually data is copied regularly (say, monthly) to a long-term archiving system 128 .
- Disaster Recovery services 110 guard against catastrophic loss of data if systems providing primary business services fail due to some physical disaster.
- Primary data is copied 130 to a physically distinct location as frequently as is feasible given other constraints (such as cost). In the event of a disaster the primary site can be reconstructed and data moved back from the safe copy.
- Business Continuity services 112 provide a facility for ensuring continued business services should the primary site become compromised. Usually this requires a hot copy 132 of the primary data that is in near-lockstep with the primary data, as well as duplicate systems and applications and mechanisms for switching incoming requests to the Business Continuity servers.
- FIG. 1 is a simplified diagram of current methods deployed to manage the data lifecycle for a business service.
- FIG. 2 is an overview of the management of data throughout its lifecycle by a single Data Management Virtualization System.
- FIG. 3 is a simplified block diagram of the Data Management Virtualization system.
- FIG. 4 is a view of the Data Management Virtualization Engine.
- FIG. 5 illustrates the Object Management and Data Movement Engine.
- FIG. 6 shows the Storage Pool Manager.
- FIG. 7 shows the decomposition of the Service Level Agreement.
- FIG. 8 illustrates the Application Specific Module.
- FIG. 9 shows the Service Policy Manager.
- FIG. 10 is a flowchart of the Service Policy Scheduler.
- FIG. 11 is a block diagram of the Content Addressable Storage (CAS) provider.
- CAS Content Addressable Storage
- FIG. 12 shows the definition of an object handle within the CAS system.
- FIG. 13 shows the data model and operations for the temporal relationship graph stored for objects within the CAS.
- FIG. 14 is a diagram representing the operation of a garbage collection algorithm in the CAS.
- FIG. 15 is a flowchart for the operation of copying an object into the CAS.
- FIG. 16 is a system diagram of a typical deployment of the Data Management Virtualization system.
- FIG. 17 is a schematic diagram of a characteristic physical server device for use with the Data Management Virtualization system.
- Data Management Virtualization Data Management activities, such as Backup, Replication and Archiving are virtualized in that they do not have to be configured and run individually and separately. Instead, the user defines their business requirement with regard to the lifecycle of the data, and the Data Management Virtualization System performs these operations automatically.
- a snapshot is taken from primary storage to secondary storage; this snapshot is then used for a backup operation to other secondary storage. Essentially an arbitrary number of these backups may be made, providing a level of data protection specified by a Service Level Agreement.
- This disclosure also pertains to a system for backing-up data from a first storage pool to a second storage pool using difference information between time states, incorporating a data management engine for performing data management functions, including at least a back-up function to create a back-up copy of data.
- the data management engine is operable to execute a sequence of snapshot operations to create point-in-time images of application data on a first storage pool, each successive point-in-time image corresponding to a specific, successive time-state of the application data, and each snapshot operation creating difference information indicating which application data has changed and the content of the changed application data for the corresponding time state.
- the data management engine is also operable to execute at least one back-up function for the application data that is scheduled for execution at non-consecutive time-states, and is also full of maintain history information having time-state information indicating the time-state of the last back-up function performed on the application data for a corresponding back-up copy of data.
- the data management engine creates composite difference information from the difference information for each time-state between the time-state of the last back-up function performed on the application data and the time-state of the currently-scheduled back-up function to be performed on the application data, and sends the composite difference information to a second storage pool to be compiled with the back-up copy of data at the last time-state to create a back-up copy of data for the current time-state.
- Data Management Virtualization technology is based on an architecture and implementation based on the following guiding principles.
- SLA Service Level Agreement
- RTO Retention and Recovery Time Objective
- the Data Management Virtualization system achieves these improvements by leveraging extended capabilities of modern storage systems by tracking the portions of the data that have changed over time and by data deduplication and compression algorithms that reduce the amount of data that needs to be copied and moved.
- the Data Management Virtualization System leverages a single copy of the data for multiple purposes. A single instance of the data maintained by the system may serve as the source, from which each data management function may make additional copies as needed. This contrasts with requiring application data to be copied multiple times by multiple independent data management applications in the traditional approach.
- the Data Management Virtualization system allows the user to classify and aggregate different storage media into storage pools, for example, a Quick Recovery Pool, which consists of high speed disks, and a Cost Efficient Long-term Storage Pool, which may be a deduplicated store on high capacity disks, or a tape library.
- the Data Management Virtualization System can move data amongst these pools to take advantage of the unique characteristics of each storage medium.
- the abstraction of Storage Pools provides access independent of the type, physical location or underlying storage technology.
- the Data Management Virtualization System discovers the capabilities of the storage systems that comprise the Storage Pools, and takes advantage of these capabilities to move data efficiently. If the Storage System is a disk array that supports the capability of creating a snapshot or clone of a data volume, the Data Management Virtualization System will take advantage of this capability and use a snapshot to make a copy of the data rather than reading the data from one place and writing it to another. Similarly, if a storage system supports change tracking, the Data Management Virtualization System will update an older copy with just the changes to efficiently create a new copy. When moving data across a network, the Data Management Virtualization system uses a deduplication and compression algorithm that avoids sending data that is already available on the other side of the network.
- a copy of an application that is made today will, in general, have a lot of similarities to the copy of the same application that was made yesterday.
- today's copy of the data could be represented as yesterday's copy with a series of delta transformations, where the size of the delta transformations themselves are usually much smaller than all of the data in the copy itself.
- the Data Management Virtualization system captures and records these transformations in the form of bitmaps or extent lists.
- the underlying storage resources a disk array or server virtualization system—are capable of tracking the changes made to a volume or file; in these environments, the Data Management Virtualization system queries the storage resources to obtain these change lists, and saves them with the data being protected.
- the Data Management Virtualization system there is a mechanism for eavesdropping on the primary data access path of the application, which enables the Data Management Virtualization system to observe which parts of the application data are modified, and to generate its own bitmap of modified data. If, for example, the application modifies blocks 100 , 200 and 300 during a particular period, the Data Management Virtualization system will eavesdrop on these events, and create a bitmap that indicates that these particular blocks were modified. When processing the next copy of application data, the Data Management Virtualization system will only process blocks 100 , 200 and 300 since it knows that these were the only blocks that were modified.
- the Data Management Virtualization system takes advantage of a point-in-time snapshot capability of an underlying storage device to make the initial copy of the data.
- This virtual copy mechanism is a fast, efficient and low-impact technique of creating the initial copy that does not guarantee that all the bits will be copied, or stored together.
- virtual copies are constructed by maintaining metadata and data structures, such as copy-on-write volume bitmaps or extents, that allow the copies to be reconstructed at access time. The copy has a lightweight impact on the application and on the primary storage device.
- the Data Management Virtualization system uses the similar virtual-machine-snapshot capability that is built into the Server Virtualization systems.
- the Data Management Virtualization System may include its own built-in snapshot mechanism.
- the snapshot is possible to use as a data primitive underlying all of the data management functions supported by the system. Because it is lightweight, the snapshot can be used as an internal operation even when the requested operation is not a snapshot per se; it is created to enable and facilitate other operations.
- the preparatory operations may include application quiescence, which includes flushing data caches and freezing the state of the application; it may also include other operations known in the art and other operations useful for retaining a complete image, such as collecting metadata information from the application to be stored with the image.
- FIG. 2 illustrates one way that a Virtualized Data Management system can address the data lifecycle requirements described earlier in accordance with these principles.
- a sequence of efficient snapshots are made within local high-availability storage 202 . Some of these snapshots are used to serve development/test requirements without making another copy.
- a copy is made efficiently into long-term local storage 204 , which in this implementation uses deduplication to reduce repeated copying.
- the copies within long-term storage may be accessed as backups or treated as an archive, depending on the retention policy applied by the SLA.
- a copy of the data is made to remote storage 206 in order to satisfy requirements for remote backup and business continuity—again a single set of copies suffices both purposes.
- a further copy of the data may be made efficiently to a repository 208 hosted by a commercial or private cloud storage provider.
- FIG. 3 illustrates the high level components of the Data Management Virtualization System that implements the above principles.
- the system comprises these basic functional components further described below.
- Application 300 creates and owns the data. This is the software system that has been deployed by the user, as for example, an email system, a database system, or financial reporting system, in order to satisfy some computational need.
- the Application typically runs on a server and utilizes storage. For illustrative purposes, only one application has been indicated. In reality there may be hundreds or even thousands of applications that are managed by a single Data Management Virtualization System.
- Storage Resources 302 is where application data is stored through its lifecycle.
- the Storage Resources are the physical storage assets, including internal disk drives, disk arrays, optical and tape storage libraries and cloud-based storage systems that the user has acquired to address data storage requirements.
- the storage resources consist of Primary Storage 310 , where the online, active copy of the application data is stored, and Secondary Storage 312 where additional copies of the application data are stored for the purposes such as backup, disaster recovery, archiving, indexing, reporting and other uses.
- Secondary storage resources may include additional storage within the same enclosure as the primary storage, as well as storage based on similar or different storage technologies within the same data center, another location or across the internet.
- One or more Management Workstations 308 allow the user to specify a Service Level Agreement (SLA) 304 that defines the lifecycle for the application data.
- SLA Service Level Agreement
- a Management workstation is a desktop or laptop computer or a mobile computing device that is used to configure, monitor and control the Data Management Virtualization System.
- a Service Level Agreement is a detailed specification that captures the detailed business requirements related to the creation, retention and deletion of secondary copies of the application data.
- the SLA is much more than the simple RTO and RPO that are used in traditional data management applications to represent the frequency of copies and the anticipated restore time for a single class of secondary storage.
- the SLA captures the multiple stages in the data lifecycle specification, and allows for non uniform frequency and retention specifications within each class of secondary storage. The SLA is described in greater detail in FIG. 7 .
- Data Management Virtualization Engine 306 manages all of the lifecycle of the application data as specified in SLA. It manages potentially a large number of SLAs for a large number of applications.
- the Data Management Virtualization Engine takes inputs from the user through the Management Workstation and interacts with the applications to discover the applications primary storage resources.
- the Data Management Virtualization Engine makes decisions regarding what data needs to be protected and what secondary storage resources best fulfill the protection needs. For example, if an enterprise designates its accounting data as requiring copies to be made at very short intervals for business continuity purposes as well as for backup purposes, the Engine may decide to create copies of the accounting data at a short interval to a first storage pool, and to also create backup copies of the accounting data to a second storage pool at a longer interval, according to an appropriate set of SLAs. This is determined by the business requirements of the storage application.
- the Engine then makes copies of application data using advanced capabilities of the storage resources as available.
- the Engine may schedule the short-interval business continuity copy using a storage appliance's built-in virtual copy or snapshot capabilities.
- Data Management Virtualization Engine moves the application data amongst the storage resources in order to satisfy the business requirements that are captured in the SLA. The Data Management Virtualization Engine is described in greater detail in FIG. 4 .
- the Data Management Virtualization System as a whole may be deployed within a single host computer system or appliance, or it may be one logical entity but physically distributed across a network of general-purpose and purpose-built systems. Certain components of the system may also be deployed within a computing or storage cloud.
- the Data Management Virtualization Engine largely runs as multiple processes on a fault tolerant, redundant pair of computers. Certain components of the Data Management Virtualization Engine may run close to the application within the application servers. Some other components may run close to the primary and secondary storage, within the storage fabric or in the storage systems themselves.
- the Management stations are typically desktop and laptop computers and mobile devices that connect over a secure network to the Engine.
- FIG. 4 illustrates an architectural overview of the Data Management Virtualization Engine 306 according to certain embodiments of the invention.
- the 306 Engine includes the following modules:
- Application Specific Module 402 This module is responsible for controlling and collecting metadata from the application 300 .
- Application metadata includes information about the application such as the type of application, details about its configuration, location of its datastores, its current operating state. Controlling the operation of the application includes actions such as flushing cached data to disk, freezing and thawing application I/O, rotating or truncating log files, and shutting down and restarting applications.
- the Application Specific module performs these operations and sends and receives metadata in responses to commands from the Service Level Policy Engine 406 , described below. The Application Specific Module is described in more detail in connection with FIG. 8 .
- Service Level Policy Engine 406 acts on the SLA 304 provided by the user to make decisions regarding the creation, movement and deletion of copies of the application data.
- Each SLA describes the business requirements related to protection of one application.
- the Service Level Policy Engine analyzes each SLA and arrives at a series of actions each of which involve the copying of application data from one storage location to another. The Service Level Policy Engine then reviews these actions to determine priorities and dependencies, and schedules and initiates the data movement jobs.
- the Service Level Policy Engine is described in more detail in connection with FIG. 9 .
- Object Manager and Data Movement Engine 410 creates a composite object consisting of the Application data, the Application Metadata and the SLA which it moves through different storage pools per instruction from the Policy Engine.
- the Object Manager receives instructions from the Service Policy Engine 406 in the form of a command to create a copy of application data in a particular pool based on the live primary data 413 belonging to the application 300 , or from an existing copy, e.g., 415 , in another pool.
- the copy of the composite object that is created by the Object Manager and the Data Movement Engine is self contained and self describing in that it contains not only application data, but also application metadata and the SLA for the application.
- the Object Manager and Data Movement Engine are described in more detail in connection with FIG. 5 .
- Storage Pool Manager 412 is a component that adapts and abstracts the underlying physical storage resources 302 and presents them as virtual storage pools 418 .
- the physical storage resources are the actual storage assets, such as disk arrays and tape libraries that the user has deployed for the purpose of supporting the lifecycle of the data of the user's applications. These storage resources might be based on different storage technologies such as disk, tape, flash memory or optical storage. The storage resources may also have different geographic locations, cost and speed attributes, and may support different protocols.
- the role of the Storage Pool Manager is to combine and aggregate the storage resources, and mask the differences between their programming interfaces.
- the Storage Pool Manager presents the physical storage resources to the Object Manager 410 as a set of storage pools that have characteristics that make these pools suitable for particular stages in the lifecycle of application data. The Storage Pool Manager is described in more detail in connection with FIG. 6 .
- FIG. 5 illustrates the Object Manager and Data Movement Engine 410 .
- the Object Manager and Data Movement Engine discovers and uses Virtual Storage Resources 510 presented to it by the Pool Managers 504 . It accepts requests from the Service Level Policy Engine 406 to create and maintain Data Storage Object instances from the resources in a Virtual Storage Pool, and it copies application data among instances of storage objects from the Virtual Storage Pools according to the instructions from the Service Level Policy Engine.
- the target pool selected for the copy implicitly designates the business operation being selected, e.g. backup, replication or restore.
- the Service Level Policy Engine resides either locally to the Object Manager (on the same system) or remotely, and communicates using a protocol over standard networking communication. TCP/IP may be used in a preferred embodiment, as it is well understood, widely available, and allows the Service Level Policy Engine to be located locally to the Object Manager or remotely with little modification.
- the system may deploy the Service Level Policy Engine on the same computer system as the Object Manager for ease of implementation.
- the system may employ multiple systems, each hosting a subset of the components if beneficial or convenient for an application, without changing the design.
- the Object Manager 501 and the Storage Pool Managers 504 are software components that may reside on the computer system platform that interconnects the storage resources and the computer systems that use those storage resources, where the user's application resides.
- the placement of these software components on the interconnect platform is designated as a preferred embodiment, and may provide the ability to connect customer systems to storage via communication protocols widely used for such applications (e.g. Fibre Channel, iSCSI, etc.), and may also provide ease of deployment of the various software components.
- the Object Manager 501 and Storage Pool Manager 504 communicate with the underlying storage virtualization platform via the Application Programming Interfaces made available by the platform. These interfaces allow the software components to query and control the behavior of the computer system and how it interconnects the storage resources and the computer system where the user's Application resides.
- the components apply modularity techniques as is common within the practice to allow replacement of the intercommunication code particular to a given platform.
- the Object Manager and Storage Pool Managers communicate via a protocol. These are transmitted over standard networking protocols, e.g. TCP/IP, or standard Interprocess Communication (IPC) mechanisms typically available on the computer system. This allows comparable communication between the components if they reside on the same computer platform or on multiple computer platforms connected by a network, depending on the particular computer platform.
- TCP/IP standard networking protocols
- IPC Interprocess Communication
- the current configuration has all of the local software components residing on the same computer system for ease of deployment. This is not a strict requirement of the design, as described above, and can be reconfigured in the future as needed.
- Object Manager 501 is a software component for maintaining Data Storage Objects, and provides a set of protocol operations to control it.
- the operations include creation, destruction, duplication, and copying of data among the objects, maintaining access to objects, and in particular allow the specification of the storage pool used to create copies.
- the pools may be remote or local.
- the storage pools are classified according to various criteria, including means by which a user may make a business decision, e.g. cost per gigabyte of storage.
- the particular storage device from which the storage is drawn may be a consideration, as equipment is allocated for different business purposes, along with associated cost and other practical considerations. Some devices may not even be actual hardware but capacity provided as a service, and selection of such a resource can be done for practical business purposes.
- the network topological “proximity” is considered, as near storage is typically connected by low-latency, inexpensive network resources, while distant storage may be connected by high-latency, bandwidth limited expensive network resources; conversely, the distance of a storage pool relative to the source may be beneficial when geographic diversity protects against a physical disaster affecting local resources.
- the amount of storage used and the amount available in a given pool are considered, as there may be benefit to either concentrating or spreading the storage capacity used.
- the Service Level Policy Engine described below, combines the SLA provided by the user with the classification criteria to determine how and when to maintain the application data, and from which storage pools to draw the needed resources to meet the Service Level Agreement (SLA).
- SLA Service Level Agreement
- the object manager 501 creates, maintains and employs a history mechanism to track the series of operations performed on a data object within the performance pools, and to correlate those operations with others that move the object to other storage pools, in particular capacity-optimized ones.
- This series of records for each data object is maintained at the object manager for all data objects in the primary pool, initially correlated by primary data object, then correlated by operation order: a time line for each object and a list of all such time lines.
- Each operation performed exploits underlying virtualization primitives to capture the state of the data object at a given point in time.
- the underlying storage virtualization appliance may be modified to expose and allow retrieval of internal data structures, such as bitmaps, that indicate the modification of portions of the data within the data object.
- data structures are exploited to capture the state of a data object at a point in time: e.g., a snapshot of the data object, and to provide differences between snapshots taken at a specific time, and thereby enables optimal backup and restore. While the particular implementations and data structures may vary among different appliances from different vendors, a data structure is employed to track changes to the data object, and storage is employed to retain the original state of those portions of the object that have changed: indications in the data structure correspond to data retained in the storage.
- a typical data structure employed is a bitmap, where each bit corresponds to a section of the data object. Setting the bit indicates that section has been modified after the point in time of the snapshot operation.
- the underlying snapshot primitive mechanism maintains this for as long as the snapshot object exists.
- the time line described above maintains a list of the snapshot operations against a given primary data object, including the time an operation is started, the time it is stopped (if at all), a reference to the snapshot object, and a reference to the internal data structure (e.g. bitmaps or extent lists), so that it can be obtained from the underlying system. Also maintained is a reference to the result of copying the state of the data object at any given point in time into another pool—as an example, copying the state of a data object into a capacity-optimized pool 407 using content addressing results in an object handle. That object handle corresponds to a given snapshot and is stored with the snapshot operation in the time line. This correlation is used to identify suitable starting points.
- Optimal backup and restore consult the list of operations from a desired starting point to an end point.
- a time ordered list of operations and their corresponding data structures are constructed such that a continuous time series from start to finish is realized: there is no gap between start times of the operations in the series. This ensures that all changes to the data object are represented by the corresponding bitmap data structures. It is not necessary to retrieve all operations from start to finish; simultaneously existing data objects and underlying snapshots overlap in time; it is only necessary that there are no gaps in time where a change might have occurred that was not tracked. As bitmaps indicate that a certain block of storage has changed but not what the change is, the bitmaps may be added or composed together to realize a set of all changes that occurred in the time interval.
- the system instead of using this data structure to access the state at a point in time, the system instead exploits the fact that the data structure represents data modified as time marches forward. Rather, the end state of the data object is accessed at the indicated areas, thus returning the set of changes to the given data object from the given start time to the end time.
- the backup operation exploits this time line, the correlated references, and access to the internal data structures to realize our backup operation. Similarly, it uses the system in a complementary fashion to accomplish our restore operation. The specific steps are described below in the section for “Optimal Backup/Restore.”
- FIG. 5 illustrates several representative storage pool types. Although one primary storage pool and two secondary storage pools are depicted in the figure, many more may be configured in some embodiments.
- Primary Storage Pool 507 contains the storage resources used to create the data objects in which the user Application stores its data. This is in contrast to the other storage pools, which exist to primarily fulfill the operation of the Data Management Virtualization Engine.
- Performance Optimized Pool 508 a virtual storage pool able to provide high performance backup (i.e. point in time duplication, described below) as well as rapid access to the backup image by the user Application
- Capacity Optimized Pool 509 a virtual storage pool that chiefly provides storage of a data object in a highly space-efficient manner by use of deduplication techniques described below.
- the virtual storage pool provides access to the copy of the data object, but does not do so with high performance as its chief aim, in contrast to the Performance Optimized pool above.
- the initial deployments contain storage pools as described above, as a minimal operational set.
- the design fully expects multiple Pools of a variety of types, representing various combinations of the criteria illustrated above, and multiple Pool Managers as is convenient to represent all of the storage in future deployments.
- the tradeoffs illustrated above are typical of computer data storage systems.
- these three pools represent a preferred embodiment, addressing most users requirements in a very simple way. Most users will find that if they have one pool of storage for urgent restore needs, which affords quick recovery, and one other pool that is low cost, so that a large number of images can be retained for a large period of time, almost all of the business requirements for data protection can be met with little compromise.
- the format of data in each pool is dictated by the objectives and technology used within the pool.
- the quick recovery pool is maintained in the form very similar to the original data to minimize the translation required and to improve the speed of recovery.
- the long-term storage pool uses deduplication and compression to reduce the size of the data and thus reduce the cost of storage.
- the Object Manager 501 creates and maintains instances of Data Storage Objects 503 from the Virtual Storage Pools 418 according to the instructions sent to it by the Service Level Policy Engine 406 .
- the Object Manager provides data object operations in five major areas: point-in-time duplication or copying (commonly referred to as “snapshots”), standard copying, object maintenance, mapping and access maintenance, and collections.
- Object Management operations also include a series of Resource Discovery operations for maintaining Virtual Storage Pools themselves and retrieving information about them.
- the Pool Manager 504 ultimately supplies the functionality for these.
- Snapshot operations create a data object instance representing an initial object instance at a specific point in time. More specifically, a snapshot operation creates a complete virtual copy of the members of a collection using the resources of a specified Virtual Storage Pool. This is called a Data Storage Object. Multiple states of a Data Storage Object are maintained over time, such that the state of a Data Storage Object as it existed at a point in time is available.
- a virtual copy is a copy implemented using an underlying storage virtualization API that allows a copy to be created in a lightweight fashion, using copy-on-write or other in-band technologies instead of copying and storing all bits of duplicate data to disk.
- This may be implemented using software modules written to access the capabilities of an off-the-shelf underlying storage virtualization system such as provided by EMC, vmware or IBM in some embodiments. Where such underlying virtualizations are not available, the described system may provide its own virtualization layer for interfacing with unintelligent hardware.
- Snapshot operations require the application to freeze the state of the data to a specific point so that the image data is coherent, and so that the snapshot may later be used to restore the state of the application at the time of the snapshot. Other preparatory steps may also be required. These are handled by the Application-Specific Module 302 , which is described in a subsequent section. For live applications, therefore, the most lightweight operations are desired.
- Snapshot operations are used as the data primitive for all higher-level operations in the system. In effect, they provide access to the state of the data at a particular point in time. As well, since snapshots are typically implemented using copy-on-write techniques that distinguish what has changed from what is resident on disk, these snapshots provide differences that can also be composed or added together to efficiently copy data throughout the system.
- the format of the snapshot may be the format of data that is copied by Data Mover 502 , which is described below.
- a standard copy operation copies all or a subset of a source data object in one storage pool to a data object in another storage pool.
- the result is two distinct objects.
- One type of standard copy operation that may be used is an initial “baseline” copy. This is typically done when data is initially copied from one Virtual Storage Pool into another, such as from a performance-optimized pool to a capacity-optimized storage pool.
- Another type of standard copy operation may be used wherein only changed data or differences are copied to a target storage pool to update the target object. This would occur after an initial baseline copy has previously been performed.
- a complete exhaustive version of an object need not be preserved in the system each time a copy is made, even though a baseline copy is needed when the Data Virtualization System is first initialized. This is because each virtual copy provides access to a complete copy. Any delta or difference can be expressed in relation to a virtual copy instead of in relation to a baseline. This has the positive side effect of virtually eliminating the common step of walking through a series of change lists.
- Standard copy operations are initiated by a series of instructions or requests supplied by the Pool Manager and received by the Data Mover to cause the movement of data among the Data Storage Objects, and to maintain the Data Storage Objects themselves.
- the copy operations allow the creation of copies of the specified Data Storage Objects using the resources of a specified Virtual Storage Pool. The result is a copy of the source Data Object in a target Data Object in the storage pool.
- the Snapshot and Copy operations are each structured with a preparation operation and an activation operation.
- the two steps of prepare and activate allow the long-running resource allocation operations, typical of the prepare phase, to be decoupled from the actuation. This is required by applications that can only be paused for a short while to fulfill the point-in-time characteristics of a snapshot operation, which in reality takes a finite but non-zero amount of time to accomplish.
- this two-step preparation and activation structure allows the Policy Engine to proceed with an operation only if resources for all of the collection members can be allocated.
- Object Maintenance operations are a series of operations for maintaining data objects, including creation, destruction, and duplication.
- the Object Manager and Data Mover use functionality provided by a Pool Request Broker (more below) to implement these operations.
- the data objects may be maintained at a global level, at each Storage Pool, or preferably both.
- Collection operations are auxiliary functions. Collections are abstract software concepts, lists maintained in memory by the object manager. They allow the Policy Engine 206 to request a series of operations over all of the members in a collection, allowing a consistent application of a request to all members.
- the use of collections allows for simultaneous activation of the point-in-time snapshot so that multiple Data Storage Objects are all captured at precisely the same point in time, as this is typically required by the application for a logically correct restore.
- the use of collections allows for convenient request of a copy operation across all members of a collection, where an application would use multiple storage objects as a logical whole.
- the Object Manager discovers Virtual Storage Pools by issuing Object Management Operations 505 to the Pool Manager 504 , and uses the information obtained about each of the pools to select one that meets the required criteria for a given request, or in the case where none match, a default pool is selected, and the Object Manager can then create a data storage object using resources from the selected Virtual Storage Pool.
- the Object Manager also provides sets of Object Management operations to allow and maintain the availability of these objects to external Applications.
- the first set is operations for registering and unregistering the computers where the user's Applications reside.
- the computers are registered by the identities typical to the storage network in use (e.g. Fibre Channel WWPN, iSCSI identity, etc.).
- the second set is “mapping” operations, and when permitted by the storage pool from which an object is created, the Data Storage Object can be “mapped,” that is, made available for use to a computer on which a user Application resides.
- This availability takes a form appropriate to the storage, e.g. a block device presented on a SAN as a Fibre Channel disk or iSCSI device on a network, a filesystem on a file sharing network, etc. and is usable by the operating system on the Application computer.
- an “unmapping” operation reverses the availability of the virtual storage device on the network to a user Application. In this way, data stored for one Application, i.e. a backup, can be made available to another Application on another computer at a later time, i.e. a restore.
- the Data Mover 502 is a software component within the Object Manager and Data Mover that reads and writes data among the various Data Storage Objects 503 according to instructions received from the Object Manager for Snapshot (Point in Time) Copy requests and standard copy requests.
- the Data Mover provides operations for reading and writing data among instances of data objects throughout the system.
- the Data Mover also provides operations that allow querying and maintaining the state of long running operations that the Object Manager has requested for it to perform.
- the Data Mover uses functionality from the Pool Functionality Providers (see FIG. 6 ) to accomplish its operation.
- the Snapshot functionality provider 608 allows creation of a data object instance representing an initial object instance at a specific point in time.
- the Difference Engine functionality provider 614 is used to request a description of the differences between two data objects that are related in a temporal chain. For data objects stored on content-addressable pools, a special functionality is provided that can provide differences between any two arbitrary data objects. This functionality is also provided for performance-optimized pools, in some cases by an underlying storage virtualization system, and in other cases by a module that implements this on top of commodity storage.
- the Data Mover 502 uses the information about the differences to select the set of data that it copies between instances of data objects 503 .
- the Difference Engine Provider provides a specific representation of the differences between two states of a Data Storage Object over time.
- the changes between two points in time are recorded as writes to a given part of the Data Storage Object.
- the difference is represented as a bitmap where each bit corresponds to an ordered list of the Data Object areas, starting at the first and ascending in order to the last, where a set bit indicates a modified area. This bitmap is derived from the copy-on-write bitmaps used by the underlying storage virtualization system.
- the difference may be represented as a list of extents corresponding to changed areas of data.
- the representation is described below, and is used to determine efficiently the parts of two Content Addressable Data Objects that differ.
- the Data Mover uses this information to copy only those sections that differ, so that a new version of a Data Object can be created from an existing version by first duplicating it, obtaining the list of differences, and then moving only the data corresponding to those differences in the list.
- the Data Mover 502 traverses the list of differences, moving the indicated areas from the source Data Object to the target Data Object. (See Optimal Way for Data Backup and Restore.)
- the Object Manager 501 instructs the Data Mover 502 through a series of operations to copy data among the data objects in the Virtual Storage Pools 418 .
- the procedure comprises the following steps, starting at the reception of instructions:
- the collection name from above is used as well as the name of the source Data Object that is to be copied and the name of two antecedents: a Data Object against which differences are to be taken in the source Storage Resource Pool, and a corresponding Data Object in the target Storage Resource Pool. This step is repeated for each source Data Object to be operated on in this set.
- the collection name is supplied as well as a Storage Resource Pool to act as a target.
- the prepare command instructs the Object Manager to contact the Storage Pool Manager to create the necessary target Data Objects, corresponding to each of the sources in the collection.
- the prepare command also supplies the corresponding Data Object in the target Storage Resource Pool to be duplicated, so the Provider can duplicate the provided object and use that as a target object.
- a reference name for the copy request is returned.
- the reference name for the copy request returned above is supplied.
- the Data Mover is instructed to copy a given source object to its corresponding target object.
- Each request includes a reference name as well as a sequence number to describe the overall job (the entire set of source target pairs) as well as a sequence number to describe each individual source-target pair.
- the names of the corresponding antecedents are supplied as part of the Copy instruction.
- the Copy Engine uses the name of the Data Object in the source pool to obtain the differences between the antecedent and the source from the Difference Engine at the source.
- the indicated differences are then transmitted from the source to the target.
- these differences are transmitted as bitmaps and data.
- these differences are transmitted as extent lists and data.
- Data Storage Objects are software constructs that permit the storage and retrieval of Application data using idioms and methods familiar to computer data processing equipment and software. In practice these currently take the form of a SCSI block device on a storage network, e.g. a SCSI LUN, or a content-addressable container, where a designator for the content is constructed from and uniquely identifies the data therein.
- Data Storage Objects are created and maintained by issuing instructions to the Pool Manager. The actual storage for persisting the Application data is drawn from the Virtual Storage Pool from which the Data Storage Object is created.
- the structure of the data storage object varies depending on the storage pool from which it is created.
- the data structure for a given block device Data Object implements a mapping between the Logical Block Address (LBA) of each of the blocks within the Data Object to the device identifier and LBA of the actual storage location.
- LBA Logical Block Address
- the identifier of the Data Object is used to identify the set of mappings to be used.
- the current embodiment relies on the services provided by the underlying physical computer platform to implement this mapping, and relies on its internal data structures, such as bitmaps or extent lists.
- the content signature is used as the identifier, and the Data Object is stored as is described below in the section about deduplication.
- a Pool Manager 504 is a software component for managing virtual storage resources and the associated functionality and characteristics as described below.
- the Object manager 501 and Data Movement Engine 502 communicate with one or more Pool Managers 504 to maintain Data Storage Objects 503 .
- Virtual Storage Resources 510 are various kinds of storage made available to the Pool Manager for implementing storage pool functions, as described below.
- a storage virtualizer is used to present various external Fibre Channel or iSCSI storage LUNs as virtualized storage to the Pool Manager 504 .
- FIG. 6 further illustrates the Storage Pool Manager 504 .
- the purpose of the storage pool manager is to present underlying virtual storage resources to the Object Manager/Data Mover as Storage Resource Pools, which are abstractions of storage and data management functionality with common interfaces that are utilized by other components of the system. These common interfaces typically include a mechanism for identifying and addressing data objects associated with a specific temporal state, and a mechanism for producing differences between data objects in the form of bitmaps or extents.
- the pool manager presents a Primary Storage Pool, a Performance Optimized Pool, and a Capacity Optimized Pool.
- the common interfaces allow the object manager to create and delete Data Storage objects in these pools, either as copies of other data storage objects or as new objects, and the data mover can move data between data storage objects, and can use the results of data object differencing operations.
- the storage pool manager has a typical architecture for implementing a common interface to diverse implementations of similar functionality, where some functionality is provided by “smart” underlying resources, and other functionality must be implemented on top of less functional underlying resources.
- Pool request broker 602 and pool functionality providers 604 are software modules executing in either the same process as the Object Manager/Data Mover, or in another process communicating via a local or network protocol such as TCP.
- the providers comprise a Primary Storage provider 606 , Snapshot provider 608 , Content Addressable provider 610 , and Difference Engine provider 614 , and these are further described below.
- the set of providers may be a superset of those shown here.
- Virtual Storage Resources 510 are the different kinds of storage made available to the Pool Manager for implementing storage pool functions.
- the virtual storage resources comprise sets of SCSI logical units from a storage virtualization system that runs on the same hardware as the pool manager, and accessible (for both data and management operations) through a programmatic interface: in addition to standard block storage functionality additional capabilities are available including creating and deleting snapshots, and tracking changed portions of volumes.
- the virtual resources can be from an external storage system that exposes similar capabilities, or may differ in interface (for example accessed through a file-system, or through a network interface such as CIFS, iSCSI or CDMI), in capability (for example, whether the resource supports an operation to make a copy-on-write snapshot), or in non-functional aspects (for example, high-speed/limited-capacity such as Solid State Disk versus low-speed/high-capacity such as SATA disk).
- interface for example accessed through a file-system, or through a network interface such as CIFS, iSCSI or CDMI
- capability for example, whether the resource supports an operation to make a copy-on-write snapshot
- non-functional aspects for example, high-speed/limited-capacity such as Solid State Disk versus low-speed/high-capacity such as SATA disk).
- the capabilities and interface available determine which providers can consume the virtual storage resources, and which pool functionality needs to be implemented within the pool manager by one or more providers: for example, this implementation of a content addressable storage provider only requires “dumb” storage, and the implementation is entirely within content addressable provider 610 ; an underlying content addressable virtual storage resource could be used instead with a simpler “pass-through” provider. Conversely, this implementation of a snapshot provider is mostly “pass-through” and requires storage that exposes a quick point-in-time copy operation.
- Pool Request Broker 602 is a simple software component that services requests for storage pool specific functions by executing an appropriate set of pool functionality providers against the configured virtual storage resource 510 .
- the requests that can be serviced include, but are not limited to, creating an object in a pool; deleting an object from a pool; writing data to an object; reading data from an object; copying an object within a pool; copying an object between pools; requesting a summary of the differences between two objects in a pool.
- Primary storage provider 606 enables management interfaces (for example, creating and deleting snapshots, and tracking changed portions of files) to a virtual storage resource that is also exposed directly to applications via an interface such as fibre channel, iSCSI, NFS or CIFS.
- management interfaces for example, creating and deleting snapshots, and tracking changed portions of files
- a virtual storage resource that is also exposed directly to applications via an interface such as fibre channel, iSCSI, NFS or CIFS.
- Snapshot provider 608 implements the function of making a point-in-time copy of data from a Primary resource pool. This creates the abstraction of another resource pool populated with snapshots. As implemented, the point-in-time copy is a copy-on-write snapshot of the object from the primary resource pool, consuming a second virtual storage resource to accommodate the copy-on-write copies, since this management functionality is exposed by the virtual storage resources used for primary storage and for the snapshot provider.
- Difference engine provider 614 can satisfy a request for two objects in a pool to be compared that are connected in a temporal chain.
- the difference sections between the two objects are identified and summarized in a provider-specific way, e.g. using bitmaps or extents.
- the difference sections might be represented as a bitmap where each set bit denotes a fixed size region where the two objects differ; or the differences might be represented procedurally as a series of function calls or callbacks.
- a difference engine may produce a result efficiently in various ways.
- a difference engine acting on a pool implemented via a snapshot provider uses the copy-on-write nature of the snapshot provider to track changes to objects that have had snapshots made. Consecutive snapshots of a single changing primary object thus have a record of the differences that is stored alongside them by the snapshot provider, and the difference engine for snapshot pools simply retrieves this record of change.
- a difference engine acting on a pool implemented via a Content Addressable provider uses the efficient tree structure (see below, FIG. 12 ) of the content addressable implementation to do rapid comparisons between objects on demand.
- Content addressable provider 610 implements a write-once content addressable interface to the virtual storage resource it consumes. It satisfies read, write, duplicate and delete operations. Each written or copied object is identified by a unique handle that is derived from its content. The content addressable provider is described further below ( FIG. 11 ).
- the pool request broker 502 accepts requests for data manipulation operations such as copy, snapshot, or delete on a pool or object.
- the request broker determines which provider code from pool 504 to execute by looking at the name or reference to the pool or object.
- the broker then translates the incoming service request into a form that can be handled by the specific pool functionality provider, and invokes the appropriate sequence of provider operations.
- an incoming request could ask to make a snapshot from a volume in a primary storage pool, into a snapshot pool.
- the incoming request identifies the object (volume) in the primary storage pool by name, and the combination of name and operation (snapshot) determines that the snapshot provider should be invoked which can make point-in-time snapshots from the primary pool using the underlying snapshot capability.
- This snapshot provider will translate the request into the exact form required by the native copy-on-write function performed by the underlying storage virtualization appliance, such as bitmaps or extents, and it will translate the result of the native copy-on-write function to a storage volume handle that can be returned to the object manager and used in future requests to the pool manager.
- Optimal Way for Data Backup is a series of operations to make successive versions of Application Data objects over time, while minimizing the amount of data that must be copied by using bitmaps, extents and other temporal difference information stored at the Object Mover. It stores the application data in a data storage object and associates with it the metadata that relates the various changes to the application data over time, such that changes over time can be readily identified.
- the procedure comprises the following steps:
- Each data object within the destination Virtual Storage Pool is complete; that is, it represents the entire data object and allows access to the all of the Application Data at the point in time without requiring external reference to state or representations at other points in time.
- the object is accessible without replaying all deltas from a baseline state to the present state.
- the duplication of initial and subsequent versions of the data object in the destination Virtual Storage Pool does not require exhaustive duplication of the Application Data contents therein.
- to arrive at second and subsequent states requires only the transmission of the changes tracked and maintained, as described above, without exhaustive traversal, transmission or replication of the contents of the data storage object.
- the operation of the Optimal Way for Data Restore is the converse of the Optimal Way for Data Backup.
- the procedure to recreate the desired state of a data object in a destination Virtual Storage Pool at a given point in time comprises the following steps:
- Access to the desired state is complete: it does not require external reference to other containers or other states. Establishing the desired state given a reference state requires neither exhaustive traversal nor exhaustive transmission, only the retrieved changes indicated by the provided representations within the source Virtual Storage Pool.
- FIG. 7 illustrates the Service Level Agreement.
- the Service Level Agreement captures the detailed business requirements with respect to secondary copies of the application data.
- the business requirements define when and how often copies are created, how long they are retained and in what type of storage pools these copies reside. This simplistic description does not capture several aspects of the business requirements.
- the frequency of copy creation for a given type of pool may not be uniform across all hours of the day or across all days of a week. Certain hours of the day, or certain days of a week or month may represent more (or less) critical periods in the application data, and thus may call for more (or less) frequent copies.
- all copies of application data in a particular pool may not be required to be retained for the same length of time. For example, a copy of the application data created at the end of monthly processing may need to be retained for a longer period of time than a copy in the same storage pool created in the middle of a month.
- the Service Level Agreement 304 of certain embodiments has been designed to represent all of these complexities that exist in the business requirements.
- the Service Level Agreement has four primary parts: the name, the description, the housekeeping attributes and a collection of Service Level Policies. As mentioned above, there is one SLA per application.
- the name attribute 701 allows each Service Level Agreement to have a unique name.
- the description attribute 702 is where the user can assign a helpful description for the Service Level Agreement.
- the Service Level agreement also has a number of housekeeping attributes 703 that enable it to be maintained and revised. These attributes include but are not limited to the owner's identity, the dates and times of creation, modification and access, priority, enable/disable flags.
- the Service Level Agreement also contains a plurality of Service Level Policies 705 .
- Some Service level Agreements may have just a single Service Level Policy. More typically, a single SLA may contain tens of policies.
- Each Service Level Policy consists of at least the following, in certain embodiments: the source storage pool location 706 and type 708 ; the target storage pool location 710 and type 712 ; the frequency for the creation of copies 714 , expressed as a period of time; the length of retention of the copy 716 , expressed as a period of time; the hours of operation 718 during the day for this particular Service Level Policy; and the days of the week, month or year 720 on which this Service Level Policy applies.
- Each Service Level Policy specifies a source and target storage pool, and the frequency of copies of application data that are desired between those storage pools. Furthermore, the Service Level Policy specifies its hours of operation and days on which it is applicable. Each Service Level Policy is the representation of one single statement in the business requirements for the protection of application data. For example, if a particular application has a business requirement for an archive copy to be created each month after the monthly close and retained for three years, this might translate to a Service level Policy that requires a copy from the Local Backup Storage Pool into the Long-term Archive Storage Pool at midnight on the last day of the month, with a retention of three years.
- All of the Service Level Policies with a particular combination of source and destination pool and location say for example, source Primary Storage pool and destination local Snapshot pool, when taken together, specify the business requirements for creating copies into that particular destination pool.
- Business requirements may dictate for example that snapshot copies be created every hour during regular working hours, but only once every four hours outside of these times.
- Two Service Level Policies with the same source and target storage pools will effectively capture these requirements in a form that can be put into practice by the Service Policy Engine.
- This form of a Service Level Agreement allows the representation of the schedule of daily, weekly and monthly business activities, and thus captures business requirements for protecting and managing application data much more accurately than traditional RPO and RPO based schemes. By allowing hour of operation and days, weeks, and months of the year, scheduling can occur on a “calendar basis.”
- a combination of Service Level Policies may require a large number of snapshots to be preserved for a short time, such as 10 minutes, and a lesser number of snapshots to be preserved for a longer time, such as 8 hours; this allows a small amount of information that has been accidentally deleted can be reverted to a state not more than 10 minutes before, while still providing substantial data protection at longer time horizons without requiring the storage overhead of storing all snapshots taken every ten minutes.
- the backup data protection function may be given one Policy that operates with one frequency during the work week, and another frequency during the weekend.
- Service Level Policies for all of the different classes of source and destination storage are included, the Service Level Agreement fully captures all of the data protection requirements for the entire application, including local snapshots, local long duration stores, off-site storage, archives, etc.
- a collection of policies within a SLA is capable of expressing when a given function should be performed, and is capable of expressing multiple data management functions that should be performed on a given source of data.
- Service Level Agreements are created and modified by the user through a user interface on a management workstation. These agreements are electronic documents stored by the Service Policy Engine in a structured SQL database or other repository that it manages. The policies are retrieved, electronically analyzed, and acted upon by the Service Policy Engine through its normal scheduling algorithm as described below.
- FIG. 8 illustrates the Application Specific Module 402 .
- the Application Specific module runs close to the Application 300 (as described above), and interacts with the Application and its operating environment to gather metadata and to query and control the Application as required for data management operations.
- the Application Specific Module interacts with various components of the application and its operating environment including Application Service Processes and Daemons 801 , Application Configuration Data 802 , Operating System Storage Services 803 (such as VSS and VDS on Windows), Logical Volume Management and Filesystem Services 804 , and Operating System Drivers and Modules 805 .
- the Application Specific Module performs these operations in response to control commands from the Service Policy Engine 406 .
- Metadata Collection and Application Consistency.
- Metadata Collection is the process by which the Application Specific Module collects metadata about the application.
- metadata includes information such as: configuration parameters for the application; state and status of the application; control files and startup/shutdown scripts for the application; location of the datafiles, journal and transaction logs for the application; and symbolic links, filesystem mount points, logical volume names, and other such entities that can affect the access to application data.
- Metadata is collected and saved along with application data and SLA information. This guarantees that each copy of application data within the system is self contained and includes all of the details required to rebuild the application data.
- Application Consistency is the set of actions that ensure that when a copy of the application data is created, the copy is valid, and can be restored into a valid instance of the application. This is critical when the business requirements dictate that the application be protected while it is live, in its online, operational state. The application may have interdependent data relations within its data stores, and if these are not copied in a consistent state will not provide a valid restorable image.
- the exact process of achieving application consistency varies from application to application. Some applications have a simple flush command that forces cached data to disk. Some applications support a hot backup mode where the application ensures that its operations are journalled in a manner that guarantees consistency even as application data is changing. Some applications require interactions with operating system storage services such as VSS and VDS to ensure consistency.
- the Application Specific Module is purpose-built to work with a particular application and to ensure the consistency of that application. The Application Specific Module interacts with the underlying storage virtualization device and the Object Manager to provide consistent snapshots of application data.
- the preferred embodiment of the Application Specific Module 402 is to run on the same server as Application 300 . This assures the minimum latency in the interactions with the application, and provides access to storage services and filesystems on the application host.
- the application host is typically considered primary storage, which is then snapshotted to a performance-optimized store.
- the Application Specific Module is only triggered to make a snapshot when access to application data is required at a specific time, and when a snapshot for that time does not exist elsewhere in the system, as tracked by the Object Manager.
- the Object Manager is able to fulfill subsequent data requests from the performance-optimized data store, including for satisfying multiple requests for backup and replication which may issue from secondary, capacity-optimized pools.
- the Object Manager may be able to provide object handles to the snapshot in the performance-optimized store, and may direct the performance-optimized store in a native format that is specific to the format of the snapshot, which is dependent on the underlying storage appliance.
- this format may be application data combined with one or more LUN bitmaps indicating which blocks have changed; in other embodiments it may be specific extents.
- the format used for data transfer is thus able to transfer only a delta or difference between two snapshots using bitmaps or extents.
- Metadata such as the version number of the application, may also be stored for each application along with the snapshot.
- application metadata is read and used for the policy. This metadata is stored along with the data objects.
- application metadata will only be read once during the lightweight snapshot operation, and preparatory operations which occur at that time such as flushing caches will only be performed once during the lightweight snapshot operation, even though this copy of application data along with its metadata may be used for multiple data management functions.
- FIG. 9 illustrates the Service Policy Engine 406 .
- the Service Policy Engine contains the Service Policy Scheduler 902 , which examines all of the Service Level Agreements configured by the user and makes scheduling decisions to satisfy Service Level Agreements. It relies on several data stores to capture information and persist it over time, including, in some embodiments, a SLA Store 904 , where configured Service Level Agreements are persisted and updated; a Resource Profile Store 906 , storing Resource Profiles that provide a mapping between logical storage pool names and actual storage pools; Protection Catalog Store 908 , where information is cataloged about previous successful copies created in various pools that have not yet expired; and centralized History Store 910 .
- History Store 910 is where historical information about past activities is saved for the use of all data management applications, including the timestamp, order and hierarchy of previous copies of each application into various storage pools. For example, a snapshot copy from a primary data store to a capacity-optimized data store that is initiated at 1 P.M. and is scheduled to expire at 9 P.M. will be recorded in History Store 910 in a temporal data store that also includes linked object data for snapshots for the same source and target that have taken place at 11 A.M. and 12 P.M.
- These stores are managed by the Service Policy Engine. For example, when the user, through the Management workstation creates a Service Level Agreement, or modifies one of the policies within it, it is the Service Policy Engine that persists this new SLA in its store, and reacts to this modification by scheduling copies as dictated by the SLA. Similarly, when the Service Policy Engine successfully completes a data movement job that results in a new copy of an application in a Storage Pool, the Storage Policy Engine updates the History Store, so that this copy will be factored into future decisions.
- the preferred embodiment of the various stores used by the Service Policy Engine is in the form of tables in a relational database management system in close proximity to the Service Policy Engine. This ensures consistent transactional semantics when querying and updating the stores, and allows for flexibility in retrieving interdependent data.
- the scheduling algorithm for the Service Policy Scheduler 902 is illustrated in FIG. 10 .
- the Service Policy Scheduler decides it needs to make a copy of application data from one storage pool to another, it initiates a Data Movement Requestor and Monitor task, 912 .
- These tasks are not recurring tasks and terminate when they are completed.
- a plurality of these requestors might be operational at the same time.
- the Service Policy Scheduler considers the priorities of Service Level Agreements when determining which additional tasks to undertake. For example, if one Service Level Agreement has a high priority because it specifies the protection for a mission-critical application, whereas another SLA has a lower priority because it specifies the protection for a test database, then the Service Policy Engine may choose to run only the protection for the mission-critical application, and may postpone or even entirely skip the protection for the lower priority application. This is accomplished by the Service Policy Engine scheduling a higher priority SLA ahead of a lower priority SLA. In the preferred embodiment, in such a situation, for auditing purposes, the Service Policy Engine will also trigger a notification event to the management workstation.
- FIG. 10 illustrates the flowchart of the Policy Schedule Engine.
- the Policy Schedule Engine continuously cycles through all the SLAs defined. When it gets to the end of all of the SLAs, it sleeps for a short while, e.g. 10 seconds, and resumes looking through the SLAs again.
- Each SLA encapsulates the complete data protection business requirements for one application; thus all of the SLAs represent all of the applications.
- the schedule engine collects together all of the Service Level Policies that have the same source pool and destination pool 1004 the process state at 1000 and iterates to the next SLA in the set of SLAs in 1002 . Taken together, this subset of the Service Level Policies represent all of the requirements for a copy from that source storage pool to that particular destination storage pool.
- the Service Policy Scheduler discards the policies that are not applicable to today, or are outside their hours of operation. Among the policies that are left, find the policy that has the shortest frequency 1006 , and based on the history data and in history store 910 , the one with the longest retention that needs to be run next 1008 .
- the Scheduler moves to the next Source and Destination pool combination for the same Service Level agreement 1018 . If there are no more distinct combinations, the Scheduler moves on to the next Service Level Agreement 1020 .
- Service Policy Scheduler After the Service Policy Scheduler has been through all source/destination pool combinations of all Service Level Agreements, it pauses for a short period and then resumes the cycle.
- a simple example system with a snapshot store and a backup store, with only 2 policies defined, would interact with the Service Policy Scheduler as follows. Given two policies, one stating “backup every hour, the backup to be kept for 4 hours” and another stating “backup every 2 hours, the backup to be kept for 8 hours,” the result would be a single snapshot taken each hour, the snapshots each being copied to the backup store but retained a different amount of time at both the snapshot store and the backup store. The “backup every 2 hours” policy is scheduled to go into effect at 12:00 P.M by the system administrator.
- the Service Policy Scheduler begins operating at step 1000 , it finds the two policies at step 1002 . (Both policies apply because a multiple of two hours has elapsed since 12:00 P.M.) There is only one source and destination pool combination at step 1004 . There are two frequencies at step 1006 , and the system selects the 1-hour frequency because it is shorter than the 2-hour frequency. There are two operations with different retentions at step 1008 , and the system selects the operation with the 8-hour retention, as it has the longer retention value. Instead of one copy being made to satisfy the 4-hour requirement and another copy being made to satisfy the 8-hour requirement, the two requirements are coalesced into the longer 8-hour requirement, and are satisfied by a single snapshot copy operation.
- the system determines that a copy is due at step 1010 , and checks the relevant objects at the History Store 910 to determine if the copy has already been made at the target (at step 912 ) and at the source (at step 914 ). If these checks are passed, the system initiates the copy at step 916 , and in the process triggers a snapshot to be made and saved at the snapshot store. The snapshot is then copied from the snapshot store to the backup store. The system then goes to sleep 1022 and wakes up again after a short period, such as 10 seconds. The result is a copy at the backup store and a copy at the snapshot store, where every even-hour snapshot lasts for 8 hours, and every odd-hour snapshot lasts 4 hours. The even-hour snapshots at the backup store and the snapshot store are both tagged with the retention period of 8 hours, and will be automatically deleted from the system by another process at that time.
- FIG. 11 is a block diagram of the modules implementing the content addressable store for the Content Addressable Provider 510 .
- the content addressable store 510 implementation provides a storage resource pool that is optimized for capacity rather than for copy-in or copy-out speed, as would be the case for the performance-optimized pool implemented through snapshots, described earlier, and thus is typically used for offline backup, replication and remote backup.
- Content addressable storage provides a way of storing common subsets of different objects only once, where those common subsets may be of varying sizes but typically as small as 4 KiBytes.
- the storage overhead of a content addressable store is low compared to a snapshot store, though the access time is usually higher.
- a content addressable store has no intrinsic relationship to one another, even though they may share a large percentage of their content, though in this implementation a history relationship is also maintained, which is an enabler of various optimizations to be described.
- the content addressable store will store only one copy of a data subset that is repeated multiple times within a single object, whereas a snapshot-based store will store at least one full-copy of any object.
- the content addressable store 510 is a software module that executes on the same system as the pool manager, either in the same process or in a separate process communicating via a local transport such as TCP.
- the content addressable store module runs in a separate process so as to minimize impact of software failures from different components.
- This module's purpose is to allow storage of Data Storage Objects 403 in a highly space-efficient manner by deduplicating content (i.e., ensuring repeated content within single or multiple data objects is stored only once).
- the content addressable store module provides services to the pool manager via a programmatic API. These services comprise the following:
- Object to Handle mapping 1102 an object can be created by writing data into the store via an API; once the data is written completely the API returns an object handle determined by the content of the object. Conversely, data may be read as a stream of bytes from an offset within an object by providing the handle. Details of how the handle is constructed are explained in connection with the description of FIG. 12 .
- Temporal Tree Management 1104 tracks parent/child relationships between data objects stored.
- an API When a data object is written into the store 510 , an API allows it to be linked as a child to a parent object already in the store. This indicates to the content addressable store that the child object is a modification of the parent.
- a single parent may have multiple children with different modifications, as might be the case for example if an application's data were saved into the store regularly for some while; then an early copy were restored and used as a new starting point for subsequent modifications.
- Temporal tree management operations and data models are described in more detail below.
- Difference Engine 1106 can generate a summary of difference regions between two arbitrary objects in the store.
- the differencing operation is invoked via an API specifying the handles of two objects to be compared, and the form of the difference summary is a sequence of callbacks with the offset and size of sequential difference sections.
- the difference is calculated by comparing two hashed representations of the objects in parallel.
- Garbage Collector 1108 is a service that analyzes the store to find saved data that is not referenced by any object handle, and to reclaim the storage space committed to this data. It is the nature of the content addressable store that much data is referenced by multiple object handles, i.e., the data is shared between data objects; some data will be referenced by a single object handle; but data that is referenced by no object handles (as might be the case if an object handle has been deleted from the content addressable system) can be safely overwritten by new data.
- Object Replicator 1110 is a service to duplicate data objects between two different content addressable stores. Multiple content addressable stores may be used to satisfy additional business requirements, such as offline backup or remote backup.
- the Data Hash module 1112 generates fixed length keys for data chunks up to a fixed size limit. For example, in this embodiment the maximum size of chunk that the hash generator will make a key for is 64 KiB.
- the fixed length key is either a hash, tagged to indicate the hashing scheme used, or a non-lossy algorithmic encoding.
- the hashing scheme used in this embodiment is SHA-1, which generates a secure cryptographic hash with a uniform distribution and a probability of hash collision near enough zero that no facility need be incorporated into this system to detect and deal with collisions.
- the Data Handle Cache 1114 is a software module managing an in-memory database that provides ephemeral storage for data and for handle-to-data mappings.
- the Persistent Handle Management Index 1104 is a reliable persistent database of CAH-to-data mappings.
- this embodiment is implemented as a B-tree, mapping hashes from the hash generator to pages in the persistent data store 1118 that contain the data for this hash. Since the full B-tree cannot be held in memory at one time, for efficiency, this embodiment also uses an in-memory bloom filter to avoid expensive B-tree searches for hashes known not to be present.
- the Persistent Data Storage module 1118 stores data and handles to long-term persistent storage, returning a token indicating where the data is stored.
- the handle/token pair is subsequently used to retrieve the data.
- data is written to persistent storage, it passes through a layer of lossless data compression 1120 , in this embodiment implemented using zlib, and a layer of optional reversible encryption 1122 , which is not enabled in this embodiment.
- copying a data object into the content addressable store is an operation provided by the object/handle mapper service, since an incoming object will be stored and a handle will be returned to the requestor.
- the object/handle mapper reads the incoming object, requests hashes to be generated by the Data Hash Generator, stores the data to Persistent Data Storage and the handle to the Persistent Handle Management Index.
- the Data Handle Cache is kept updated for future quick lookups of data for the handle.
- Data stored to Persistent Data Storage is compressed and (optionally) encrypted before being written to disk.
- a request to copy in a data object will also invoke the temporal tree management service to make a history record for the object, and this is also persisted via Persistent Data Storage.
- copying a data object out of the content addressable store given its handle is another operation provided by the object/handle mapper service.
- the handle is looked up in the Data Handle Cache to locate the corresponding data; if the data is missing in the cache the persistent index is used; once the data is located on disk, it is retrieved via persistent data storage module (which decrypts and decompresses the disk data) and then reconstituted to return to the requestor.
- FIG. 12 shows how the handle for a content addressed object is generated.
- the data object manager references all content addressable objects with a content addressable handle.
- This handle is made up of three parts.
- the first part 1201 is the size of the underlying data object the handle immediately points to.
- the second part 1202 is the depth of object it points to.
- the third 1203 is a hash of the object it points to.
- Field 1203 optionally includes a tag indicating that the hash is a non-lossy encoding of the underlying data.
- the tag indicates the encoding scheme used, such as a form of run-length encoding (RLE) of data used as an algorithmic encoding if the data chunk can be fully represented as a short enough RLE. If the underlying data object is too large to be represented as a non-lossy encoding, a mapping from the hash to a pointer or reference to the data is stored separately in the persistent handle management index 1104 .
- RLE run-length
- the data for a content addressable object is broken up into chunks 1204 .
- the size of each chunk must be addressable by one content addressable handle 1205 .
- the data is hashed by the data hash module 1102 , and the hash of the chunk is used to make the handle. If the data of the object fits in one chunk, then the handle created is the final handle of the object. If not, then the handles themselves are grouped together into chunks 1206 and a hash is generated for each group of handles. This grouping of handles continues 1207 until there is only one handle 1208 produced which is then the handle for the object.
- the top level content handle is dereferenced to obtain a list of next-level content handles. These are dereferenced in turn to obtain further lists of content handles until depth-0 handles are obtained. These are expanded to data, either by looking up the handle in the handle management index or cache, or (in the case of an algorithmic hash such as run-length encoding) expanding deterministically to the full content.
- FIG. 13 illustrates the temporal tree relationship created for data objects stored within the content addressable store. This particular data structure is utilized only within the content addressable store.
- the temporal tree management module maintains data structures 1302 in the persistent store that associate each content-addressed data object to a parent (which may be null, to indicate the first in a sequence of revisions).
- the individual nodes of the tree contain a single hash value. This hash value references a chunk of data, if the hash is a depth-0 hash, or a list of other hashes, if the hash is a depth-1 or higher hash.
- the references mapped to a hash value is contained in the Persistent Handle Management Index 1104 .
- the edges of the tree may have weights or lengths, which may be used in an algorithm for finding neighbors.
- the “Add” operation is used whenever an object is copied-in to the CAS from an external pool. If the copy-in is via the Optimal Way for Data Backup, or if the object is originating in a different CAS pool, then it is required that a predecessor object be specified, and the Add operation is invoked to record this predecessor/successor relationship.
- the “Remove” operation is invoked by the object manager when the policy manager determines that an object's retention period has expired. This may lead to data stored in the CAS having no object in the temporal tree referring to it, and therefore a subsequent garbage collection pass can free up the storage space for that data as available for re-use.
- Different CAS pools may be used to accomplish different business objectives such as providing disaster recovery in a remote location.
- the copy may be sent as hashes and offsets, to take advantage of the native deduplication capabilities of the target CAS.
- the underlying data pointed to by any new hashes is also sent on an as-needed basis.
- the temporal tree structure is read or navigated as part of the implementation of various services:
- the CAS difference engine 1106 compares two objects identified by hash values or handles as in FIGS. 11 and 12 , and produces a sequence of offsets and extents within the objects where the object data is known to differ. This sequence is achieved by traversing the two object trees in parallel in the hash data structure of FIG. 12 .
- the tree traversal is a standard depth- or breadth-first traversal. During traversal, the hashes at the current depth are compared. Where the hash of a node is identical between both sides, there is no need to descend the tree further, so the traversal may be pruned. If the hash of a node is not identical, the traversal continues descending into the next lowest level of the tree.
- the traversal reaches a depth-0 hash that is not identical to its counterpart, then the absolute offset into the data object being compared where the non-identical data occurs, together with the data length, is emitted into the output sequence. If one object is smaller in size than another, then its traversal will complete earlier, and all subsequent offsets encountered in the traversal of the other are emitted as differences.
- Garbage Collector is a service that analyzes a particular CAS store to find saved data that is not referenced by any object handle in the CAS store temporal data structure, and to reclaim the storage space committed to this data.
- Garbage collection uses a standard “Mark and Sweep” approach. Since the “mark” phase may be quite expensive, the algorithm used for the mark phase attempts to minimize marking the same data multiple times, even though it may be referenced many times; however the mark phase must be complete, ensuring that no referenced data is left unmarked, as this would result in data loss from the store as, after a sweep phase, unmarked data would later be overwritten by new data.
- the algorithm employed for marking referenced data uses the fact that objects in the CAS are arranged in graphs with temporal relationships using the data structure depicted in FIG. 13 . It is likely that objects that share an edge in these graphs differ in only a small subset of their data, and it is also rare that any new data chunk that appears when an object is created from a predecessor should appear again between any two other objects. Thus, the mark phase of garbage collection processes each connected component of the temporal graph.
- FIG. 14 is an example of garbage collection using temporal relationships in certain embodiments.
- a depth-first search is made, represented by arrows 1402 , of a data structure containing temporal relationships. Take a starting node 1404 from which to begin the tree traversal. Node 1404 is the tree root and references no objects. Node 1406 contains references to objects H 1 and H 2 , denoting a hash value for object 1 and a hash value for object 2 . All depth-0, depth-1 and higher data objects that are referenced by node 1406 , here H 1 and H 2 , are enumerated and marked as referenced.
- node 1408 is processed. As it shares an edge with node 1406 , which has been marked, the difference engine is applied to the difference between the object referenced by 1406 and the object referenced by 1408 , obtaining a set of depth-0, depth-1 and higher hashes that exist in the unmarked object but not in the marked object.
- the hash that exists in node 1408 but not in node 1406 is H 3 , so H 3 is marked as referenced. This procedure is continued until all edges are exhausted.
- a comparison of the results produced by a prior art algorithm 1418 and the present embodiment 1420 shows that when node 1408 is processed by the prior art algorithm, previously-seen hashes H 1 and H 2 are emitted into the output stream along with new hash H 3 .
- Present embodiment 1420 does not emit previously seen hashes into the output stream, resulting in only new hashes H 3 , H 4 , H 5 , H 6 , H 7 being emitted into the output stream, with a corresponding improvement in performance. Note that this method does not guarantee that data will not be marked more than once. For example, if hash value H 4 occurs independently in node 1416 , it will be independently marked a second time.
- Copying an object from another pool into the CAS uses the software modules described in FIG. 11 to produce a data structure referenced by an object handle as in FIG. 12 .
- the input to the process is (a) a sequence of chunks of data at specified offsets, sized appropriately for making depth-0 handles, and optionally (b) a previous version of the same object. Implicitly, the new object will be identical to the previous version except where the input data is provided and itself differs from the previous version.
- the algorithm for the copy-in operation is illustrated in a flowchart at FIG. 15 .
- the sequence (a) may be a sparse set of changes from (b).
- this can greatly reduce the amount of data that needs to be copied in, and therefore reduce the computation and i/o activity required. This is the case, for example, when the object is to be copied in via the optimal way for data backup described previously.
- sequence (a) includes sections that are largely unchanged from a predecessor, identifying the predecessor (b) allows the copy-in procedure to do quick checks as to whether the data has indeed changed and therefore to avoid data duplication at a finer level of granularity than might be possible for the difference engine in some other storage pool providing input to a CAS.
- the new object will be identical to the previous version except where the input data is provided and itself differs from the previous version.
- the algorithm for the copy-in operation is illustrated in a flowchart at FIG. 15 .
- the process starts at step 1500 as an arbitrarily-sized data object in the temporal store is provided, and proceeds to 1502 , which enumerates any and all hashes (depth-0 through the highest level) referenced by the hash value in the predecessor object, if such is provided. This will be used as a quick check to avoid storing data that is already contained in the predecessor.
- step 1504 if a predecessor is input, create a reference to a clone of it in the content-addressable data store temporal data structure. This clone will be updated to become the new object. Thus the new object will become a copy of the predecessor modified by the differences copied into the CAS from the copying source pool.
- the Data Mover 502 pushes the data into the CAS.
- the data is accompanied by an object reference and an offset, which is the target location for the data.
- the data may be sparse, as only the differences from the predecessor need to be moved into the new object.
- the incoming data is broken into depth-0 chunks sized small enough that each can be represented by a single depth-0 hash.
- the data hash module generates a hash for each depth-0 chunk.
- step 1512 read the predecessor hash at the same offset. If the hash of the data matches the hash of the predecessor at the same offset, then no data needs to be stored and the depth-1 and higher objects do not need to be updated for this depth-0 chunk. In this case, return to accept the next depth-0 chunk of data.
- This achieves temporal deduplication without having to do expensive global lookups.
- the source system is ideally sending only the differences from the data that has previously been stored in the CAS, this check may be necessary if the source system is performing differencing at a different level of granularity, or if the data is marked as changed but has been changed back to its previously-stored value. Differencing may be performed at a different level of granularity if, for example, the source system is a snapshot pool which creates deltas on a 32 KiB boundary and the CAS store creates hashes on 4 KiB chunks.
- the data may be hashed and stored. Data is written starting at the provided offset and ending once the new data has been exhausted. Once the data has been stored, at step 1516 , if the offset is still contained within the same depth-1 object, then depth-1, depth-2 and all higher objects 1518 are updated, generating new hashes at each level, and the depth-0, depth-1 and all higher objects are stored at step 1514 to a local cache.
- step 1520 if the amount of data to be stored exceeds the depth-1 chunk size and the offset is to be contained in a new depth-1 object, the current depth-1 must be flushed to the store, unless it is determined to be stored there already. First look it up in the global index 1116 . If it is found there, remove the depth-1 and all associated depth-0 objects from the local cache and proceed with the new chunk 1522 .
- step 1524 as a quick check to avoid visiting the global index, for each depth-0, depth-1 and higher object in the local cache, lookup its hash in the local store established in 1502 . Discard any that match.
- step 1526 for each depth-0, depth-1 and higher object in the local cache, lookup its hash in the global index 1116 . Discard any that match. This ensures that data is deduplicated globally.
- step 1528 store all remaining content from the local cache into the persistent store, then continue to process the new chunk.
- Reading an object out of the CAS is a simpler process and is common across many implementations of CAS.
- the handle for the object is mapped to a persistent data object via the global index, and the offset required is read from within this persistent data. In some cases it may be necessary to recurse through several depths in the object handle tree.
- the Replicator 1110 is a service to duplicate data objects between two different content addressable stores.
- the process of replication could be achieved through reading out of one store and writing back into another, but this architecture allows more efficient replication over a limited bandwidth connection such as a local- or wide-area network.
- a replicating system operating on each CAS store uses the difference engine service described above together with the temporal relationship structure as described in FIG. 13 , and additionally stores on a per-object basis in the temporal data structure used by the CAS store a record of what remote store the object has been replicated to. This provides definitive knowledge of object presence at a certain data store.
- the system uses the temporal data structure to determine which objects exist on which data stores. This information is leveraged by the Data Mover and Difference Engine to determine a minimal subset of data to be sent over the network during a copy operation to bring a target data store up to date. For example, if data object O has been copied at time T 3 from a server in Boston to a remote server in Seattle, Protection Catalog Store 908 will store that object O at time T 3 exists both in Boston and Seattle. At time T 5 , during a subsequent copy from Boston to Seattle, the temporal data structure will be consulted to determine the previous state of object O in Seattle that should be used for differencing on the source server in Boston. The Boston server will then take the difference of T 5 and T 3 , and send that difference to the Seattle server.
- the process to replicate an object A is then as follows: Identify an object A 0 that is recorded as having already been replicated to the target store and a near neighbor of A in the local store. If no such object A 0 exists then send A to the remote store and record it locally as having been sent.
- a typical method as embodied here is: send all the hashes and offsets of data chunks within the object; query the remote store as to which hashes represent data that is not present remotely; send the required data to the remote store (sending the data and hashes is implemented in this embodiment by encapsulating them in a TCP data stream).
- a 0 is identified, then run the difference engine to identify data chunks that are in A but not in A 0 . This should be a superset of the data that needs to be sent to the remote store. Send hashes and offsets for chunks that are in A but not in A 0 . Query the remote store as to which hashes represent data that is not present remotely; send the required data to the remote store.
- FIG. 16 shows the software and hardware components that comprise one embodiment of the Data Management Virtualization (DMV) system.
- the software that comprises the system executes as three distributed components:
- the Host Agent software 1602 a , 1602 b , 1602 c implements some of the application-specific module described above. It executes on the same servers 1610 a , 1610 b , 1610 c as the application whose data is under management.
- the DMV server software 1604 a , 1604 b implements the remainder of the system as described here. It runs on a set of Linux servers 1612 , 1614 that also provide highly available virtualized storage services.
- Management Client software 1606 that runs on a desktop or laptop computer 1620 .
- Data Management Virtualization systems communicate with one another between primary site 1622 and data replication (DR) site 1624 over an IP network such as a public internet backbone.
- DR data replication
- the DMV systems at primary and DR sites access one or more SAN storage systems 1616 , 1618 via a fibre-channel network 1626 .
- the servers running primary applications access the storage virtualized by the DMV systems access the storage via fibre-channel over the fibre-channel network, or iSCSI over the IP network.
- the DMV system at the remote DR site runs a parallel instance of DMV server software 1604 c on Linux server 1628 .
- Linux server 1628 may also be an Amazon Web Services EC 2 instance or other similar cloud computational resource.
- FIG. 17 is a diagram that depicts the various components of a computerized system upon which certain elements may be implemented, according to certain embodiments of the invention.
- the logical modules described may be implemented on a host computer 1701 that contains volatile memory 1702 , a persistent storage device such as a hard drive, 1708 , a processor, 1703 , and a network interface, 1704 .
- the system computer can interact with storage pools 1705 , 1706 over a SAN or Fibre Channel device, among other embodiments.
- FIG. 17 illustrates a system in which the system computer is separate from the various storage pools, some or all of the storage pools may be housed within the host computer, eliminating the need for a network interface.
- the programmatic processes may be executed on a single host, as shown in FIG. 17 , or they may be distributed across multiple hosts.
- the host computer shown in FIG. 17 may serve as an administrative workstation, or may implement the application and Application Specific Agent 402 , or may implement any and all logical modules described in this specification, including the Data Virtualization System itself, or may serve as a storage controller for exposing storage pools of physical media to the system.
- Workstations may be connected to a graphical display device, 1707 , and to input devices such as a mouse 1709 and a keyboard 1710 .
- the active user's workstation may comprise a handheld device.
Abstract
Description
-
- “System and Method for Managing Data with Service Level Agreements That May Specify Non-Uniform Copying of Data” (U.S. application Ser. No. 12/947,385);
- “System and Method for Performing a Plurality of Prescribed Data Management Functions in a Manner That Reduces Redundant Access Operations to Primary Storage” (U.S. application Ser. No. 12/947,436);
- “System and Method for Creating Deduplicated Copies of Data by Tracking Temporal Relationships Among Copies and by Ingesting Difference Data” (U.S. application Ser. No. 12/947,418);
- “System and Method for Managing Deduplicated Copies of Data Using Temporal Relationships Among Copies” (U.S. application Ser. No. 12/947,375);
- “System and Method for Creating Deduplicated Copies of Data by Sending Difference Data Between Two Near-Neighbor Temporal States” (U.S. application Ser. No. 12/947,513);
- “System and Method for Creating Deduplicated Copies of Data Storing Non-Lossy Encodings of Data Directly in a Content Addressable Store” (U.S. application Ser. No. 12/947,438); and
- “System and Method for Improved Garbage Collection Operations in a Deduplicated Store by Tracking Temporal Relationships Among Copies” (U.S. application Ser. No. 12/947,383).
-
- 1. The mechanism provides an initial reference state, e.g. T0, of the Application Data within a Data Storage Object.
- 2. Subsequent instances (versions) are created on demand over time of the Data Storage Object in a Virtual Storage Pool that has a Difference Engine Provider.
- 3. Each successive version, e.g. T4, T5, uses the Difference Engine Provider for the Virtual Storage Pool to obtain the difference between it and the instance created prior to it, so that T5 is stored as a reference to T4 and a set of differences between T5 and T4.
- 4. The Copy Engine receives a request to copy data from one data object (the source) to another data object (the destination).
- 5. If the Virtual Storage Pool in which the destination object will be created contains no other objects created from prior versions of the source data object, then a new object is created in the destination Virtual Storage Pool and the entire contents of the source data object are copied to the destination object; the procedure is complete. Otherwise the next steps are followed.
- 6. If the Virtual Storage Pool in which the destination object is created contains objects created from prior versions of the source data object, a recently created prior version in the destination Virtual Storage Pool is selected for which there exists a corresponding prior version in the Virtual Storage Pool of the source data object. For example, if a copy of T5 is initiated from a snapshot pool, and an object created at time T3 is the most recent version available at the target, T3 is selected as the prior version.
- 7. Construct a time-ordered list of the versions of the source data object, beginning with an initial version identified in the previous step, and ending with the source data object that is about to be copied. In the above example, at the snapshot pool, all states of the object are available, but only the states including and following T3 are of interest: T3, T4, T5.
- 8. Construct a corresponding list of the differences between each successive version in the list such that all of the differences, from the beginning version of the list to the end are represented. Difference both, identify which portion of data has changed and includes the new data for the corresponding time. This creates a set of differences from the target version to the source version, e.g. the difference between T3 and T5.
- 9. Create the destination object by duplicating the prior version of the object identified in Step 6 in the destination Virtual Storage Pool, e.g. object T3 in the target store.
- 10. Copy the set of differences identified in the list created in
Step 8 from the source data object to the destination object; the procedure is complete.
-
- 1. Identify a version of the data object in another Virtual Storage Pool that has a Difference Engine Provider, corresponding to the desired state to be recreated. This is the source data object in the source Virtual Storage Pool.
- 2. Identify a preceding version of the data object to be recreated in the destination Virtual Storage Pool.
- 3. If no version of the data object is identified in
Step 2, then create a new destination object in the destination Virtual Storage Pool and copy the data from the source data object to the destination data object. The procedure is complete. Otherwise, proceed with the following steps. - 4. If a version of the data object is identified in
Step 2, then identify a data object in the source Virtual Storage Pool corresponding to the data object identified inStep 2. - 5. If no data object is identified in Step 4, then create a new destination object in the destination Virtual Storage Pool and copy the data from the source data object to the destination data object. The procedure is complete. Otherwise, proceed with the following steps.
- 6. Create a new destination data object in the Destination Virtual Storage Pool by duplicating the data object identified in
Step 2. - 7. Employ the Difference Engine Provider for the source Virtual Storage Pool to obtain the set of differences between the data object identified in
Step 1 and the data object identified in Step 4. - 8. Copy the data identified by the list created in Step 7 from the source data object to the destination data object. The procedure is complete.
-
- Garbage Collection navigates the tree in order to reduce the cost of the “mark” phase, as described below
- Replication to a different CAS pool finds a set of near-neighbors in the temporal tree that are also known to have been transferred already to the other CAS pool, so that only a small set of differences need to be transferred additionally
- Optimal-Way for data restore uses the temporal tree to find a predecessor that can be used as a basis for the restore operation. In the CAS temporal tree data structure, children are subsequent versions, e.g., as dictated by archive policy. Multiple children are supported on the same parent node; this case may arise when a parent node is changed, then used as the basis for a restore, and subsequently changed again.
CAS Difference Engine
Claims (8)
Priority Applications (10)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US12/947,393 US8788769B2 (en) | 2010-11-16 | 2010-11-16 | System and method for performing backup or restore operations utilizing difference information and timeline state information |
AU2011329232A AU2011329232A1 (en) | 2010-11-16 | 2011-11-11 | Systems and methods for data management virtualization |
JP2013539918A JP2013543198A (en) | 2010-11-16 | 2011-11-11 | System and method for data management virtualization |
EP11841345.9A EP2643760A4 (en) | 2010-11-16 | 2011-11-11 | Systems and methods for data management virtualization |
CN201180061716.7A CN103415842B (en) | 2010-11-16 | 2011-11-11 | For the virtualized system and method for data management |
KR1020137015597A KR20140051107A (en) | 2010-11-16 | 2011-11-11 | Systems and methods for data management virtualization |
CA2817592A CA2817592A1 (en) | 2010-11-16 | 2011-11-11 | Systems and methods for data management virtualization |
BR112013012134A BR112013012134A2 (en) | 2010-11-16 | 2011-11-11 | systems and methods for data management virtualization |
PCT/US2011/060417 WO2012067964A1 (en) | 2010-11-16 | 2011-11-11 | Systems and methods for data management virtualization |
US14/309,033 US20150106580A1 (en) | 2010-11-16 | 2014-06-19 | System and method for performing backup or restore operations utilizing difference information and timeline state information |
Applications Claiming Priority (1)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US12/947,393 US8788769B2 (en) | 2010-11-16 | 2010-11-16 | System and method for performing backup or restore operations utilizing difference information and timeline state information |
Related Child Applications (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
US14/309,033 Continuation US20150106580A1 (en) | 2010-11-16 | 2014-06-19 | System and method for performing backup or restore operations utilizing difference information and timeline state information |
Publications (2)
Publication Number | Publication Date |
---|---|
US20120124306A1 US20120124306A1 (en) | 2012-05-17 |
US8788769B2 true US8788769B2 (en) | 2014-07-22 |
Family
ID=46048872
Family Applications (2)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
US12/947,393 Expired - Fee Related US8788769B2 (en) | 2010-11-16 | 2010-11-16 | System and method for performing backup or restore operations utilizing difference information and timeline state information |
US14/309,033 Abandoned US20150106580A1 (en) | 2010-11-16 | 2014-06-19 | System and method for performing backup or restore operations utilizing difference information and timeline state information |
Family Applications After (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
US14/309,033 Abandoned US20150106580A1 (en) | 2010-11-16 | 2014-06-19 | System and method for performing backup or restore operations utilizing difference information and timeline state information |
Country Status (1)
Country | Link |
---|---|
US (2) | US8788769B2 (en) |
Cited By (44)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20140280187A1 (en) * | 2013-03-15 | 2014-09-18 | Datadirect Networks, Inc. | Data storage system having mutable objects incorporating time |
US20150227438A1 (en) * | 2014-02-07 | 2015-08-13 | International Business Machines Corporation | Creating a restore copy from a copy of a full copy of source data in a repository that is at a different point-in-time than a restore point-in-time of a restore request |
US9158828B1 (en) * | 2011-12-19 | 2015-10-13 | Emc Corporation | Techniques using associated object properties |
US9244967B2 (en) | 2011-08-01 | 2016-01-26 | Actifio, Inc. | Incremental copy performance between data stores |
US9372866B2 (en) | 2010-11-16 | 2016-06-21 | Actifio, Inc. | System and method for creating deduplicated copies of data by sending difference data between near-neighbor temporal states |
US9372758B2 (en) | 2010-11-16 | 2016-06-21 | Actifio, Inc. | System and method for performing a plurality of prescribed data management functions in a manner that reduces redundant access operations to primary storage |
US9384207B2 (en) | 2010-11-16 | 2016-07-05 | Actifio, Inc. | System and method for creating deduplicated copies of data by tracking temporal relationships among copies using higher-level hash structures |
US9384254B2 (en) | 2012-06-18 | 2016-07-05 | Actifio, Inc. | System and method for providing intra-process communication for an application programming interface |
WO2016160143A1 (en) * | 2015-03-31 | 2016-10-06 | Emc Corporation | Disaster recovery as a service |
US9563683B2 (en) | 2013-05-14 | 2017-02-07 | Actifio, Inc. | Efficient data replication |
US9665437B2 (en) | 2013-11-18 | 2017-05-30 | Actifio, Inc. | Test-and-development workflow automation |
US9679007B1 (en) * | 2013-03-15 | 2017-06-13 | Veritas Technologies Llc | Techniques for managing references to containers |
US9720778B2 (en) | 2014-02-14 | 2017-08-01 | Actifio, Inc. | Local area network free data movement |
US9772916B2 (en) | 2014-06-17 | 2017-09-26 | Actifio, Inc. | Resiliency director |
US9792187B2 (en) | 2014-05-06 | 2017-10-17 | Actifio, Inc. | Facilitating test failover using a thin provisioned virtual machine created from a snapshot |
US9858155B2 (en) | 2010-11-16 | 2018-01-02 | Actifio, Inc. | System and method for managing data with service level agreements that may specify non-uniform copying of data |
US9880757B1 (en) | 2015-03-23 | 2018-01-30 | Symantec Corporation | Copy data management with data security |
US20180101438A1 (en) * | 2014-12-02 | 2018-04-12 | International Business Machines Corporation | Rebuilding strategy in memory managed multi-site duplication |
US9953038B2 (en) | 2015-01-30 | 2018-04-24 | Microsoft Technology Licensing, Llc | Cloud-based hierarchical system preservation |
US10013313B2 (en) | 2014-09-16 | 2018-07-03 | Actifio, Inc. | Integrated database and log backup |
US10049121B2 (en) | 2015-03-30 | 2018-08-14 | International Business Machines Corporation | Clone file backup and restore |
US10055299B2 (en) | 2015-03-30 | 2018-08-21 | International Business Machines Corporation | Clone file backup and restore |
US10055300B2 (en) | 2015-01-12 | 2018-08-21 | Actifio, Inc. | Disk group based backup |
US10176048B2 (en) | 2014-02-07 | 2019-01-08 | International Business Machines Corporation | Creating a restore copy from a copy of source data in a repository having source data at different point-in-times and reading data from the repository for the restore copy |
US20190114229A1 (en) * | 2012-08-07 | 2019-04-18 | International Business Machines Corporation | Apparatus, system and method for data collection, import and modeling |
US10275474B2 (en) | 2010-11-16 | 2019-04-30 | Actifio, Inc. | System and method for managing deduplicated copies of data using temporal relationships among copies |
US10282201B2 (en) | 2015-04-30 | 2019-05-07 | Actifo, Inc. | Data provisioning techniques |
US10372546B2 (en) | 2014-02-07 | 2019-08-06 | International Business Machines Corporation | Creating a restore copy from a copy of source data in a repository having source data at different point-in-times |
US10379963B2 (en) | 2014-09-16 | 2019-08-13 | Actifio, Inc. | Methods and apparatus for managing a large-scale environment of copy data management appliances |
US10387446B2 (en) | 2014-04-28 | 2019-08-20 | International Business Machines Corporation | Merging multiple point-in-time copies into a merged point-in-time copy |
US10437817B2 (en) | 2016-04-19 | 2019-10-08 | Huawei Technologies Co., Ltd. | Concurrent segmentation using vector processing |
US10445298B2 (en) | 2016-05-18 | 2019-10-15 | Actifio, Inc. | Vault to object store |
US10445187B2 (en) | 2014-12-12 | 2019-10-15 | Actifio, Inc. | Searching and indexing of backup data sets |
US10459961B2 (en) | 2016-04-19 | 2019-10-29 | Huawei Technologies Co., Ltd. | Vector processing for segmentation hash values calculation |
US10476955B2 (en) | 2016-06-02 | 2019-11-12 | Actifio, Inc. | Streaming and sequential data replication |
US10613938B2 (en) | 2015-07-01 | 2020-04-07 | Actifio, Inc. | Data virtualization using copy data tokens |
US10691659B2 (en) | 2015-07-01 | 2020-06-23 | Actifio, Inc. | Integrating copy data tokens with source code repositories |
US10776210B2 (en) | 2016-09-30 | 2020-09-15 | Hewlett Packard Enterprise Development Lp | Restoration of content of a volume |
US10855554B2 (en) | 2017-04-28 | 2020-12-01 | Actifio, Inc. | Systems and methods for determining service level agreement compliance |
US11169958B2 (en) | 2014-02-07 | 2021-11-09 | International Business Machines Corporation | Using a repository having a full copy of source data and point-in-time information from point-in-time copies of the source data to restore the source data at different points-in-time |
US11176001B2 (en) | 2018-06-08 | 2021-11-16 | Google Llc | Automated backup and restore of a disk group |
US11176090B2 (en) | 2019-01-28 | 2021-11-16 | International Business Machines Corporation | Verification of the integrity of data files stored in copy-on-write (CoW) based file system snapshots |
US11392541B2 (en) | 2019-03-22 | 2022-07-19 | Hewlett Packard Enterprise Development Lp | Data transfer using snapshot differencing from edge system to core system |
US11403178B2 (en) | 2017-09-29 | 2022-08-02 | Google Llc | Incremental vault to object store |
Families Citing this family (103)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US8326814B2 (en) | 2007-12-05 | 2012-12-04 | Box, Inc. | Web-based file management system and service |
US20160162371A1 (en) * | 2011-01-05 | 2016-06-09 | Netapp, Inc. | Supporting multi-tenancy through service catalog |
US10554426B2 (en) | 2011-01-20 | 2020-02-04 | Box, Inc. | Real time notification of activities that occur in a web-based collaboration environment |
US8522068B2 (en) * | 2011-05-02 | 2013-08-27 | International Business Machines Corporation | Coordinated disaster recovery production takeover operations |
US8671308B2 (en) | 2011-05-02 | 2014-03-11 | International Business Machines Corporation | Optimizing disaster recovery systems during takeover operations |
US9063912B2 (en) | 2011-06-22 | 2015-06-23 | Box, Inc. | Multimedia content preview rendering in a cloud content management system |
US9978040B2 (en) | 2011-07-08 | 2018-05-22 | Box, Inc. | Collaboration sessions in a workspace on a cloud-based content management system |
WO2013009337A2 (en) | 2011-07-08 | 2013-01-17 | Arnold Goldberg | Desktop application for access and interaction with workspaces in a cloud-based content management system and synchronization mechanisms thereof |
US9197718B2 (en) | 2011-09-23 | 2015-11-24 | Box, Inc. | Central management and control of user-contributed content in a web-based collaboration environment and management console thereof |
US8930320B2 (en) * | 2011-09-30 | 2015-01-06 | Accenture Global Services Limited | Distributed computing backup and recovery system |
US8515902B2 (en) | 2011-10-14 | 2013-08-20 | Box, Inc. | Automatic and semi-automatic tagging features of work items in a shared workspace for metadata tracking in a cloud-based content management system with selective or optional user contribution |
US9098474B2 (en) | 2011-10-26 | 2015-08-04 | Box, Inc. | Preview pre-generation based on heuristics and algorithmic prediction/assessment of predicted user behavior for enhancement of user experience |
US8990307B2 (en) | 2011-11-16 | 2015-03-24 | Box, Inc. | Resource effective incremental updating of a remote client with events which occurred via a cloud-enabled platform |
GB2500152A (en) | 2011-11-29 | 2013-09-11 | Box Inc | Mobile platform file and folder selection functionalities for offline access and synchronization |
US9019123B2 (en) | 2011-12-22 | 2015-04-28 | Box, Inc. | Health check services for web-based collaboration environments |
US9904435B2 (en) | 2012-01-06 | 2018-02-27 | Box, Inc. | System and method for actionable event generation for task delegation and management via a discussion forum in a web-based collaboration environment |
US11232481B2 (en) | 2012-01-30 | 2022-01-25 | Box, Inc. | Extended applications of multimedia content previews in the cloud-based content management system |
US9965745B2 (en) | 2012-02-24 | 2018-05-08 | Box, Inc. | System and method for promoting enterprise adoption of a web-based collaboration environment |
US9195636B2 (en) | 2012-03-07 | 2015-11-24 | Box, Inc. | Universal file type preview for mobile devices |
EP2825967A4 (en) * | 2012-03-15 | 2015-10-14 | Hewlett Packard Development Co | Accessing and replicating backup data objects |
US8918392B1 (en) * | 2012-03-29 | 2014-12-23 | Amazon Technologies, Inc. | Data storage mapping and management |
US8832234B1 (en) | 2012-03-29 | 2014-09-09 | Amazon Technologies, Inc. | Distributed data storage controller |
US8930364B1 (en) * | 2012-03-29 | 2015-01-06 | Amazon Technologies, Inc. | Intelligent data integration |
US8935203B1 (en) | 2012-03-29 | 2015-01-13 | Amazon Technologies, Inc. | Environment-sensitive distributed data management |
US9054919B2 (en) | 2012-04-05 | 2015-06-09 | Box, Inc. | Device pinning capability for enterprise cloud service and storage accounts |
US9575981B2 (en) | 2012-04-11 | 2017-02-21 | Box, Inc. | Cloud service enabled to handle a set of files depicted to a user as a single file in a native operating system |
GB2514947B (en) | 2012-05-04 | 2015-06-17 | Box Inc | Repository redundancy implementation of a system which incrementally updates clients with events that occured via a cloud-enabled platform |
US9691051B2 (en) | 2012-05-21 | 2017-06-27 | Box, Inc. | Security enhancement through application access control |
US9027108B2 (en) | 2012-05-23 | 2015-05-05 | Box, Inc. | Systems and methods for secure file portability between mobile applications on a mobile device |
US8914900B2 (en) | 2012-05-23 | 2014-12-16 | Box, Inc. | Methods, architectures and security mechanisms for a third-party application to access content in a cloud-based platform |
US9021099B2 (en) | 2012-07-03 | 2015-04-28 | Box, Inc. | Load balancing secure FTP connections among multiple FTP servers |
US9712510B2 (en) | 2012-07-06 | 2017-07-18 | Box, Inc. | Systems and methods for securely submitting comments among users via external messaging applications in a cloud-based platform |
US9792320B2 (en) | 2012-07-06 | 2017-10-17 | Box, Inc. | System and method for performing shard migration to support functions of a cloud-based service |
GB2505072A (en) | 2012-07-06 | 2014-02-19 | Box Inc | Identifying users and collaborators as search results in a cloud-based system |
US9237170B2 (en) | 2012-07-19 | 2016-01-12 | Box, Inc. | Data loss prevention (DLP) methods and architectures by a cloud service |
US9794256B2 (en) | 2012-07-30 | 2017-10-17 | Box, Inc. | System and method for advanced control tools for administrators in a cloud-based service |
US8745267B2 (en) | 2012-08-19 | 2014-06-03 | Box, Inc. | Enhancement of upload and/or download performance based on client and/or server feedback information |
US9369520B2 (en) | 2012-08-19 | 2016-06-14 | Box, Inc. | Enhancement of upload and/or download performance based on client and/or server feedback information |
GB2513671A (en) | 2012-08-27 | 2014-11-05 | Box Inc | Server side techniques for reducing database workload in implementing selective subfolder synchronization in a cloud-based environment |
US9135462B2 (en) | 2012-08-29 | 2015-09-15 | Box, Inc. | Upload and download streaming encryption to/from a cloud-based platform |
US9117087B2 (en) | 2012-09-06 | 2015-08-25 | Box, Inc. | System and method for creating a secure channel for inter-application communication based on intents |
US9195519B2 (en) | 2012-09-06 | 2015-11-24 | Box, Inc. | Disabling the self-referential appearance of a mobile application in an intent via a background registration |
US9311071B2 (en) | 2012-09-06 | 2016-04-12 | Box, Inc. | Force upgrade of a mobile application via a server side configuration file |
US9292833B2 (en) | 2012-09-14 | 2016-03-22 | Box, Inc. | Batching notifications of activities that occur in a web-based collaboration environment |
US10200256B2 (en) | 2012-09-17 | 2019-02-05 | Box, Inc. | System and method of a manipulative handle in an interactive mobile user interface |
US9553758B2 (en) | 2012-09-18 | 2017-01-24 | Box, Inc. | Sandboxing individual applications to specific user folders in a cloud-based service |
US10915492B2 (en) | 2012-09-19 | 2021-02-09 | Box, Inc. | Cloud-based platform enabled with media content indexed for text-based searches and/or metadata extraction |
US9959420B2 (en) | 2012-10-02 | 2018-05-01 | Box, Inc. | System and method for enhanced security and management mechanisms for enterprise administrators in a cloud-based environment |
US9705967B2 (en) | 2012-10-04 | 2017-07-11 | Box, Inc. | Corporate user discovery and identification of recommended collaborators in a cloud platform |
US9495364B2 (en) | 2012-10-04 | 2016-11-15 | Box, Inc. | Enhanced quick search features, low-barrier commenting/interactive features in a collaboration platform |
US9665349B2 (en) | 2012-10-05 | 2017-05-30 | Box, Inc. | System and method for generating embeddable widgets which enable access to a cloud-based collaboration platform |
US20140108588A1 (en) * | 2012-10-15 | 2014-04-17 | Dell Products L.P. | System and Method for Migration of Digital Assets Leveraging Data Protection |
GB2507191B (en) | 2012-10-17 | 2015-03-04 | Box Inc | Remote key management in a cloud-based environment |
US9756022B2 (en) | 2014-08-29 | 2017-09-05 | Box, Inc. | Enhanced remote key management for an enterprise in a cloud-based environment |
US20150205674A1 (en) * | 2012-10-31 | 2015-07-23 | Hewlett-Packard Development Company, L.P. | Cataloging backup data |
US8983961B2 (en) * | 2012-11-29 | 2015-03-17 | International Business Machines Corporation | High availability for cloud servers |
GB2508659A (en) * | 2012-12-10 | 2014-06-11 | Ibm | Backing up an in-memory database |
GB2509057A (en) | 2012-12-18 | 2014-06-25 | Ibm | Predictive point-in-time copy for storage systems |
US10235383B2 (en) | 2012-12-19 | 2019-03-19 | Box, Inc. | Method and apparatus for synchronization of items with read-only permissions in a cloud-based environment |
US9396245B2 (en) | 2013-01-02 | 2016-07-19 | Box, Inc. | Race condition handling in a system which incrementally updates clients with events that occurred in a cloud-based collaboration platform |
US9953036B2 (en) | 2013-01-09 | 2018-04-24 | Box, Inc. | File system monitoring in a system which incrementally updates clients with events that occurred in a cloud-based collaboration platform |
EP2755151A3 (en) | 2013-01-11 | 2014-09-24 | Box, Inc. | Functionalities, features and user interface of a synchronization client to a cloud-based environment |
EP2757491A1 (en) | 2013-01-17 | 2014-07-23 | Box, Inc. | Conflict resolution, retry condition management, and handling of problem files for the synchronization client to a cloud-based platform |
US9450981B2 (en) * | 2013-03-14 | 2016-09-20 | Radware, Ltd. | System and method thereof for mitigating denial of service attacks in virtual networks |
US10846074B2 (en) | 2013-05-10 | 2020-11-24 | Box, Inc. | Identification and handling of items to be ignored for synchronization with a cloud-based platform by a synchronization client |
US10725968B2 (en) | 2013-05-10 | 2020-07-28 | Box, Inc. | Top down delete or unsynchronization on delete of and depiction of item synchronization with a synchronization client to a cloud-based platform |
US10496490B2 (en) | 2013-05-16 | 2019-12-03 | Hewlett Packard Enterprise Development Lp | Selecting a store for deduplicated data |
US10592347B2 (en) | 2013-05-16 | 2020-03-17 | Hewlett Packard Enterprise Development Lp | Selecting a store for deduplicated data |
GB2515192B (en) | 2013-06-13 | 2016-12-14 | Box Inc | Systems and methods for synchronization event building and/or collapsing by a synchronization component of a cloud-based platform |
US9805050B2 (en) * | 2013-06-21 | 2017-10-31 | Box, Inc. | Maintaining and updating file system shadows on a local device by a synchronization client of a cloud-based platform |
US10229134B2 (en) | 2013-06-25 | 2019-03-12 | Box, Inc. | Systems and methods for managing upgrades, migration of user data and improving performance of a cloud-based platform |
US10110656B2 (en) | 2013-06-25 | 2018-10-23 | Box, Inc. | Systems and methods for providing shell communication in a cloud-based platform |
US9535924B2 (en) | 2013-07-30 | 2017-01-03 | Box, Inc. | Scalability improvement in a system which incrementally updates clients with events that occurred in a cloud-based collaboration platform |
US20160196145A1 (en) * | 2013-08-08 | 2016-07-07 | Hewlett-Packard Development Company, L.P. | Boot from modified factory image |
US8892679B1 (en) | 2013-09-13 | 2014-11-18 | Box, Inc. | Mobile device, methods and user interfaces thereof in a mobile device platform featuring multifunctional access and engagement in a collaborative environment provided by a cloud-based platform |
US10509527B2 (en) | 2013-09-13 | 2019-12-17 | Box, Inc. | Systems and methods for configuring event-based automation in cloud-based collaboration platforms |
US9213684B2 (en) | 2013-09-13 | 2015-12-15 | Box, Inc. | System and method for rendering document in web browser or mobile device regardless of third-party plug-in software |
US9704137B2 (en) | 2013-09-13 | 2017-07-11 | Box, Inc. | Simultaneous editing/accessing of content by collaborator invitation through a web-based or mobile application to a cloud-based collaboration platform |
GB2518298A (en) | 2013-09-13 | 2015-03-18 | Box Inc | High-availability architecture for a cloud-based concurrent-access collaboration platform |
US9535909B2 (en) | 2013-09-13 | 2017-01-03 | Box, Inc. | Configurable event-based automation architecture for cloud-based collaboration platforms |
US10866931B2 (en) | 2013-10-22 | 2020-12-15 | Box, Inc. | Desktop application for accessing a cloud collaboration platform |
US9529545B1 (en) * | 2013-12-26 | 2016-12-27 | EMC IP Holding Company LLC | Managing data deduplication in storage systems based on storage space characteristics |
US10530854B2 (en) | 2014-05-30 | 2020-01-07 | Box, Inc. | Synchronization of permissioned content in cloud-based environments |
US9602514B2 (en) | 2014-06-16 | 2017-03-21 | Box, Inc. | Enterprise mobility management and verification of a managed application by a content provider |
US10038731B2 (en) | 2014-08-29 | 2018-07-31 | Box, Inc. | Managing flow-based interactions with cloud-based shared content |
US9894119B2 (en) | 2014-08-29 | 2018-02-13 | Box, Inc. | Configurable metadata-based automation and content classification architecture for cloud-based collaboration platforms |
US10574442B2 (en) | 2014-08-29 | 2020-02-25 | Box, Inc. | Enhanced remote key management for an enterprise in a cloud-based environment |
US20170083630A1 (en) * | 2015-09-21 | 2017-03-23 | Egemen Tas | Method to virtualize large files in a sandbox |
US9894510B1 (en) * | 2015-08-10 | 2018-02-13 | Acronis International Gmbh | Event-based data backup and recovery for mobile devices |
EP3353627B1 (en) * | 2015-09-25 | 2022-01-19 | Hitachi Vantara LLC | Adaptive storage reclamation |
US9477555B1 (en) | 2015-11-16 | 2016-10-25 | International Business Machines Corporation | Optimized disaster-recovery-as-a-service system |
CN107027326B (en) | 2015-11-25 | 2018-12-07 | 华为技术有限公司 | The method and device of data backup in storage system |
US9772910B1 (en) * | 2015-12-07 | 2017-09-26 | EMC IP Holding Co. LLC | Resource optimization for storage integrated data protection |
US11263171B2 (en) * | 2015-12-09 | 2022-03-01 | Druva Inc. | Unified time-indexed catalogue for multiple archived snapshots |
US10725872B2 (en) | 2015-12-14 | 2020-07-28 | Hitachi Vantara Llc | Restore points based on milestone versions |
US10146638B1 (en) * | 2016-06-24 | 2018-12-04 | EMC IP Holding Company LLC | Check point recovery based on identifying changed blocks for block-based backup files |
CN107957918B (en) * | 2016-10-14 | 2019-05-10 | 腾讯科技（深圳）有限公司 | Data reconstruction method and device |
US10846339B2 (en) * | 2017-06-20 | 2020-11-24 | Cisco Technology, Inc. | Structured schema for temporal graph storage and retrieval |
US11256667B2 (en) | 2017-10-26 | 2022-02-22 | Druva Inc. | Deduplicated merged indexed object storage file system |
US11593421B2 (en) | 2019-10-16 | 2023-02-28 | International Business Machines Corporation | Recreating electronic content |
US11537476B2 (en) * | 2020-03-25 | 2022-12-27 | Sap Se | Database management system backup and recovery management |
TWI740429B (en) * | 2020-03-26 | 2021-09-21 | 威聯通科技股份有限公司 | Method and system for managing backup data |
US20230393947A1 (en) * | 2022-06-01 | 2023-12-07 | Rubrik, Inc. | Archiving computing snapshots to multiple locations in accordance with a service level agreement |
Citations (28)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US4309569A (en) | 1979-09-05 | 1982-01-05 | The Board Of Trustees Of The Leland Stanford Junior University | Method of providing digital signatures |
US5978791A (en) | 1995-04-11 | 1999-11-02 | Kinetech, Inc. | Data processing system using substantially unique identifiers to identify data items, whereby identical data items have the same identifiers |
US20020049778A1 (en) | 2000-03-31 | 2002-04-25 | Bell Peter W. | System and method of information outsourcing |
US20020126872A1 (en) | 2000-12-21 | 2002-09-12 | Brunk Hugh L. | Method, apparatus and programs for generating and utilizing content signatures |
US6883073B2 (en) | 2002-01-09 | 2005-04-19 | Hitachi, Ltd. | Virtualized volume snapshot formation method |
US20060020754A1 (en) | 2004-07-21 | 2006-01-26 | Susumu Suzuki | Storage system |
US20060080367A1 (en) | 2004-10-07 | 2006-04-13 | Microsoft Corporation | Method and system for limiting resource usage of a version store |
US7065619B1 (en) | 2002-12-20 | 2006-06-20 | Data Domain, Inc. | Efficient data storage system |
US20060271622A1 (en) * | 2002-10-18 | 2006-11-30 | International Business Machines Corporation | Simultaneous data backup in a computer system |
US20070162716A1 (en) * | 2006-01-12 | 2007-07-12 | Ikuya Yagisawa | Storage controller and control method thereof |
US20080034016A1 (en) | 2006-08-04 | 2008-02-07 | Pavel Cisler | Consistent back up of electronic information |
US20080243769A1 (en) | 2007-03-30 | 2008-10-02 | Symantec Corporation | System and method for exporting data directly from deduplication storage to non-deduplication storage |
US20090307251A1 (en) | 2008-06-06 | 2009-12-10 | Steve Heller | Method for reducing redundancy between two or more datasets |
US7640454B1 (en) * | 2004-06-28 | 2009-12-29 | Symantec Operating Corporation | System and method for point-in-time recovery of application resource sets |
US20100077013A1 (en) | 2008-09-11 | 2010-03-25 | Vmware, Inc. | Computer storage deduplication |
US20100088277A1 (en) | 2008-10-07 | 2010-04-08 | Ocarina Networks | Object deduplication and application aware snapshots |
US20100138827A1 (en) | 2008-11-30 | 2010-06-03 | Shahar Frank | Hashing storage images of a virtual machine |
US7814149B1 (en) | 2008-09-29 | 2010-10-12 | Symantec Operating Corporation | Client side data deduplication |
US20100276744A1 (en) | 2009-04-30 | 2010-11-04 | Nam-Jae Lee | Non-volatile memory device and method for fabricating the same |
US20110179341A1 (en) | 2010-01-15 | 2011-07-21 | Patrick Terence Falls | Method and apparatus for compression and network transport of data in support of continuous availability of applications |
US8010495B1 (en) | 2006-04-25 | 2011-08-30 | Parallels Holdings, Ltd. | Method and system for fast generation of file system snapshot bitmap in virtual environment |
US20110252198A1 (en) | 2010-04-13 | 2011-10-13 | Hitachi, Ltd. | Storage network system and its control method |
US20110307447A1 (en) | 2010-06-09 | 2011-12-15 | Brocade Communications Systems, Inc. | Inline Wire Speed Deduplication System |
US20110307683A1 (en) | 2010-06-15 | 2011-12-15 | Quantum Corporation | Index entry eviction |
US8099391B1 (en) * | 2009-03-17 | 2012-01-17 | Symantec Corporation | Incremental and differential backups of virtual machine files |
US20120017060A1 (en) | 2009-03-30 | 2012-01-19 | Sri Harshan Kapanipathi | Deduplication of data stored in a copy volume |
US20120078855A1 (en) * | 2010-09-29 | 2012-03-29 | Louis Beatty | Method and system of performing a granular restore of a database from a differential backup |
US8645647B2 (en) | 2009-09-02 | 2014-02-04 | International Business Machines Corporation | Data storage snapshot with reduced copy-on-write |
-
2010
- 2010-11-16 US US12/947,393 patent/US8788769B2/en not_active Expired - Fee Related
-
2014
- 2014-06-19 US US14/309,033 patent/US20150106580A1/en not_active Abandoned
Patent Citations (28)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US4309569A (en) | 1979-09-05 | 1982-01-05 | The Board Of Trustees Of The Leland Stanford Junior University | Method of providing digital signatures |
US5978791A (en) | 1995-04-11 | 1999-11-02 | Kinetech, Inc. | Data processing system using substantially unique identifiers to identify data items, whereby identical data items have the same identifiers |
US20020049778A1 (en) | 2000-03-31 | 2002-04-25 | Bell Peter W. | System and method of information outsourcing |
US20020126872A1 (en) | 2000-12-21 | 2002-09-12 | Brunk Hugh L. | Method, apparatus and programs for generating and utilizing content signatures |
US6883073B2 (en) | 2002-01-09 | 2005-04-19 | Hitachi, Ltd. | Virtualized volume snapshot formation method |
US20060271622A1 (en) * | 2002-10-18 | 2006-11-30 | International Business Machines Corporation | Simultaneous data backup in a computer system |
US7065619B1 (en) | 2002-12-20 | 2006-06-20 | Data Domain, Inc. | Efficient data storage system |
US7640454B1 (en) * | 2004-06-28 | 2009-12-29 | Symantec Operating Corporation | System and method for point-in-time recovery of application resource sets |
US20060020754A1 (en) | 2004-07-21 | 2006-01-26 | Susumu Suzuki | Storage system |
US20060080367A1 (en) | 2004-10-07 | 2006-04-13 | Microsoft Corporation | Method and system for limiting resource usage of a version store |
US20070162716A1 (en) * | 2006-01-12 | 2007-07-12 | Ikuya Yagisawa | Storage controller and control method thereof |
US8010495B1 (en) | 2006-04-25 | 2011-08-30 | Parallels Holdings, Ltd. | Method and system for fast generation of file system snapshot bitmap in virtual environment |
US20080034016A1 (en) | 2006-08-04 | 2008-02-07 | Pavel Cisler | Consistent back up of electronic information |
US20080243769A1 (en) | 2007-03-30 | 2008-10-02 | Symantec Corporation | System and method for exporting data directly from deduplication storage to non-deduplication storage |
US20090307251A1 (en) | 2008-06-06 | 2009-12-10 | Steve Heller | Method for reducing redundancy between two or more datasets |
US20100077013A1 (en) | 2008-09-11 | 2010-03-25 | Vmware, Inc. | Computer storage deduplication |
US7814149B1 (en) | 2008-09-29 | 2010-10-12 | Symantec Operating Corporation | Client side data deduplication |
US20100088277A1 (en) | 2008-10-07 | 2010-04-08 | Ocarina Networks | Object deduplication and application aware snapshots |
US20100138827A1 (en) | 2008-11-30 | 2010-06-03 | Shahar Frank | Hashing storage images of a virtual machine |
US8099391B1 (en) * | 2009-03-17 | 2012-01-17 | Symantec Corporation | Incremental and differential backups of virtual machine files |
US20120017060A1 (en) | 2009-03-30 | 2012-01-19 | Sri Harshan Kapanipathi | Deduplication of data stored in a copy volume |
US20100276744A1 (en) | 2009-04-30 | 2010-11-04 | Nam-Jae Lee | Non-volatile memory device and method for fabricating the same |
US8645647B2 (en) | 2009-09-02 | 2014-02-04 | International Business Machines Corporation | Data storage snapshot with reduced copy-on-write |
US20110179341A1 (en) | 2010-01-15 | 2011-07-21 | Patrick Terence Falls | Method and apparatus for compression and network transport of data in support of continuous availability of applications |
US20110252198A1 (en) | 2010-04-13 | 2011-10-13 | Hitachi, Ltd. | Storage network system and its control method |
US20110307447A1 (en) | 2010-06-09 | 2011-12-15 | Brocade Communications Systems, Inc. | Inline Wire Speed Deduplication System |
US20110307683A1 (en) | 2010-06-15 | 2011-12-15 | Quantum Corporation | Index entry eviction |
US20120078855A1 (en) * | 2010-09-29 | 2012-03-29 | Louis Beatty | Method and system of performing a granular restore of a database from a differential backup |
Non-Patent Citations (11)
Title |
---|
"EMC Data Domain Replicator," White Paper, EMC Corporation 2011 (25 pages). |
Guo, F. and Efstathopoulos, P., "Building a High-performance Deduplication System," Symantec Research Labs, Symantec Corporation, Culver City, CA, USA (14 pages) (2011). |
Hash Tree, From Wikipedia, the free encyclopedia; http://en.wikipedia.org/wiki/Hash-tree, retrieved online Mar. 18, 2013 (9 pages). |
Hash Tree, From Wikipedia, the free encyclopedia; http://en.wikipedia.org/wiki/Hash—tree, retrieved online Mar. 18, 2013 (9 pages). |
IEEE 100, The Authoritative Dictionary of IEEE Standards Terms, Seventh Edition, 2000, the Institute of Electrical and Electronics Engineering, Inc. p. 532. |
IEEE 100, The Authoritative Dictionary of IEEE Standards Terms, Seventh Edition, 2000, the Institute of Electrical and Electronics Engineering, Inc., p. 532. * |
International Search Report issued for PCT/US2011/060417, dated Mar. 16, 2012 (2 pages). |
Silverberg, S. "SDFS Overview," Apr. 2010 (17 pages). |
Tridgell, A., "Efficient Algorithms for Sorting and Synchronization," Thesis, The Australian National University (Feb. 1999) (115 pages). |
What is Deduplication and Why Does It Matter?, dated May 7, 2010 (2 pages). |
Zhu, B. et al., "Avoiding the Disk Bottleneck in the Data Domain Deduplication File System," Fast '08: 6th USENIX Conference on File and Storage Technologies, USENIX Association, pp. 269-282 (2008). |
Cited By (69)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US9858155B2 (en) | 2010-11-16 | 2018-01-02 | Actifio, Inc. | System and method for managing data with service level agreements that may specify non-uniform copying of data |
US10275474B2 (en) | 2010-11-16 | 2019-04-30 | Actifio, Inc. | System and method for managing deduplicated copies of data using temporal relationships among copies |
US9372866B2 (en) | 2010-11-16 | 2016-06-21 | Actifio, Inc. | System and method for creating deduplicated copies of data by sending difference data between near-neighbor temporal states |
US9372758B2 (en) | 2010-11-16 | 2016-06-21 | Actifio, Inc. | System and method for performing a plurality of prescribed data management functions in a manner that reduces redundant access operations to primary storage |
US9384207B2 (en) | 2010-11-16 | 2016-07-05 | Actifio, Inc. | System and method for creating deduplicated copies of data by tracking temporal relationships among copies using higher-level hash structures |
US10037154B2 (en) | 2011-08-01 | 2018-07-31 | Actifio, Inc. | Incremental copy performance between data stores |
US9244967B2 (en) | 2011-08-01 | 2016-01-26 | Actifio, Inc. | Incremental copy performance between data stores |
US9251198B2 (en) | 2011-08-01 | 2016-02-02 | Actifio, Inc. | Data replication system |
US9880756B2 (en) | 2011-08-01 | 2018-01-30 | Actifio, Inc. | Successive data fingerprinting for copy accuracy assurance |
US9158828B1 (en) * | 2011-12-19 | 2015-10-13 | Emc Corporation | Techniques using associated object properties |
US9754005B2 (en) | 2012-06-18 | 2017-09-05 | Actifio, Inc. | System and method for incrementally backing up out-of-band data |
US9495435B2 (en) | 2012-06-18 | 2016-11-15 | Actifio, Inc. | System and method for intelligent database backup |
US9501545B2 (en) | 2012-06-18 | 2016-11-22 | Actifio, Inc. | System and method for caching hashes for co-located data in a deduplication data store |
US9501546B2 (en) | 2012-06-18 | 2016-11-22 | Actifio, Inc. | System and method for quick-linking user interface jobs across services based on system implementation information |
US9384254B2 (en) | 2012-06-18 | 2016-07-05 | Actifio, Inc. | System and method for providing intra-process communication for an application programming interface |
US9659077B2 (en) | 2012-06-18 | 2017-05-23 | Actifio, Inc. | System and method for efficient database record replication using different replication strategies based on the database records |
US20190114229A1 (en) * | 2012-08-07 | 2019-04-18 | International Business Machines Corporation | Apparatus, system and method for data collection, import and modeling |
US10783040B2 (en) * | 2012-08-07 | 2020-09-22 | International Business Machines Corporation | Apparatus, system and method for data collection, import and modeling |
US10430398B2 (en) | 2013-03-15 | 2019-10-01 | Datadirect Networks, Inc. | Data storage system having mutable objects incorporating time |
US20140280187A1 (en) * | 2013-03-15 | 2014-09-18 | Datadirect Networks, Inc. | Data storage system having mutable objects incorporating time |
US8983967B2 (en) * | 2013-03-15 | 2015-03-17 | Datadirect Networks, Inc. | Data storage system having mutable objects incorporating time |
US9679007B1 (en) * | 2013-03-15 | 2017-06-13 | Veritas Technologies Llc | Techniques for managing references to containers |
US9646067B2 (en) | 2013-05-14 | 2017-05-09 | Actifio, Inc. | Garbage collection predictions |
US9563683B2 (en) | 2013-05-14 | 2017-02-07 | Actifio, Inc. | Efficient data replication |
US9904603B2 (en) | 2013-11-18 | 2018-02-27 | Actifio, Inc. | Successive data fingerprinting for copy accuracy assurance |
US9665437B2 (en) | 2013-11-18 | 2017-05-30 | Actifio, Inc. | Test-and-development workflow automation |
US11194667B2 (en) * | 2014-02-07 | 2021-12-07 | International Business Machines Corporation | Creating a restore copy from a copy of a full copy of source data in a repository that is at a different point-in-time than a restore point-in-time of a restore request |
US11169958B2 (en) | 2014-02-07 | 2021-11-09 | International Business Machines Corporation | Using a repository having a full copy of source data and point-in-time information from point-in-time copies of the source data to restore the source data at different points-in-time |
US11150994B2 (en) | 2014-02-07 | 2021-10-19 | International Business Machines Corporation | Creating a restore copy from a copy of source data in a repository having source data at different point-in-times |
US10176048B2 (en) | 2014-02-07 | 2019-01-08 | International Business Machines Corporation | Creating a restore copy from a copy of source data in a repository having source data at different point-in-times and reading data from the repository for the restore copy |
US20150227438A1 (en) * | 2014-02-07 | 2015-08-13 | International Business Machines Corporation | Creating a restore copy from a copy of a full copy of source data in a repository that is at a different point-in-time than a restore point-in-time of a restore request |
US10372546B2 (en) | 2014-02-07 | 2019-08-06 | International Business Machines Corporation | Creating a restore copy from a copy of source data in a repository having source data at different point-in-times |
US9720778B2 (en) | 2014-02-14 | 2017-08-01 | Actifio, Inc. | Local area network free data movement |
US11630839B2 (en) | 2014-04-28 | 2023-04-18 | International Business Machines Corporation | Merging multiple point-in-time copies into a merged point-in-time copy |
US10387446B2 (en) | 2014-04-28 | 2019-08-20 | International Business Machines Corporation | Merging multiple point-in-time copies into a merged point-in-time copy |
US9792187B2 (en) | 2014-05-06 | 2017-10-17 | Actifio, Inc. | Facilitating test failover using a thin provisioned virtual machine created from a snapshot |
US9772916B2 (en) | 2014-06-17 | 2017-09-26 | Actifio, Inc. | Resiliency director |
US10042710B2 (en) | 2014-09-16 | 2018-08-07 | Actifio, Inc. | System and method for multi-hop data backup |
US10540236B2 (en) | 2014-09-16 | 2020-01-21 | Actiflo, Inc. | System and method for multi-hop data backup |
US10089185B2 (en) | 2014-09-16 | 2018-10-02 | Actifio, Inc. | Multi-threaded smart copy |
US10013313B2 (en) | 2014-09-16 | 2018-07-03 | Actifio, Inc. | Integrated database and log backup |
US10248510B2 (en) | 2014-09-16 | 2019-04-02 | Actifio, Inc. | Guardrails for copy data storage |
US10379963B2 (en) | 2014-09-16 | 2019-08-13 | Actifio, Inc. | Methods and apparatus for managing a large-scale environment of copy data management appliances |
US10558527B2 (en) * | 2014-12-02 | 2020-02-11 | Pure Storage, Inc. | Rebuilding strategy in memory managed multi-site duplication |
US20180101438A1 (en) * | 2014-12-02 | 2018-04-12 | International Business Machines Corporation | Rebuilding strategy in memory managed multi-site duplication |
US10445187B2 (en) | 2014-12-12 | 2019-10-15 | Actifio, Inc. | Searching and indexing of backup data sets |
US10055300B2 (en) | 2015-01-12 | 2018-08-21 | Actifio, Inc. | Disk group based backup |
US9953038B2 (en) | 2015-01-30 | 2018-04-24 | Microsoft Technology Licensing, Llc | Cloud-based hierarchical system preservation |
US9880757B1 (en) | 2015-03-23 | 2018-01-30 | Symantec Corporation | Copy data management with data security |
US10049121B2 (en) | 2015-03-30 | 2018-08-14 | International Business Machines Corporation | Clone file backup and restore |
US10055299B2 (en) | 2015-03-30 | 2018-08-21 | International Business Machines Corporation | Clone file backup and restore |
US10896157B2 (en) | 2015-03-30 | 2021-01-19 | International Business Machines Corporation | Clone file backup and restore |
WO2016160143A1 (en) * | 2015-03-31 | 2016-10-06 | Emc Corporation | Disaster recovery as a service |
US10997030B2 (en) | 2015-03-31 | 2021-05-04 | EMC IP Holding Company LLC | Disaster recovery as a service |
US10282201B2 (en) | 2015-04-30 | 2019-05-07 | Actifo, Inc. | Data provisioning techniques |
US10613938B2 (en) | 2015-07-01 | 2020-04-07 | Actifio, Inc. | Data virtualization using copy data tokens |
US10691659B2 (en) | 2015-07-01 | 2020-06-23 | Actifio, Inc. | Integrating copy data tokens with source code repositories |
US10459961B2 (en) | 2016-04-19 | 2019-10-29 | Huawei Technologies Co., Ltd. | Vector processing for segmentation hash values calculation |
US10437817B2 (en) | 2016-04-19 | 2019-10-08 | Huawei Technologies Co., Ltd. | Concurrent segmentation using vector processing |
US10445298B2 (en) | 2016-05-18 | 2019-10-15 | Actifio, Inc. | Vault to object store |
US10476955B2 (en) | 2016-06-02 | 2019-11-12 | Actifio, Inc. | Streaming and sequential data replication |
US10776210B2 (en) | 2016-09-30 | 2020-09-15 | Hewlett Packard Enterprise Development Lp | Restoration of content of a volume |
US10855554B2 (en) | 2017-04-28 | 2020-12-01 | Actifio, Inc. | Systems and methods for determining service level agreement compliance |
US11403178B2 (en) | 2017-09-29 | 2022-08-02 | Google Llc | Incremental vault to object store |
US11714724B2 (en) | 2017-09-29 | 2023-08-01 | Google Llc | Incremental vault to object store |
US11176001B2 (en) | 2018-06-08 | 2021-11-16 | Google Llc | Automated backup and restore of a disk group |
US11960365B2 (en) | 2018-06-08 | 2024-04-16 | Google Llc | Automated backup and restore of a disk group |
US11176090B2 (en) | 2019-01-28 | 2021-11-16 | International Business Machines Corporation | Verification of the integrity of data files stored in copy-on-write (CoW) based file system snapshots |
US11392541B2 (en) | 2019-03-22 | 2022-07-19 | Hewlett Packard Enterprise Development Lp | Data transfer using snapshot differencing from edge system to core system |
Also Published As
Publication number | Publication date |
---|---|
US20150106580A1 (en) | 2015-04-16 |
US20120124306A1 (en) | 2012-05-17 |
Similar Documents
Publication | Publication Date | Title |
---|---|---|
US9384207B2 (en) | System and method for creating deduplicated copies of data by tracking temporal relationships among copies using higher-level hash structures | |
US9372758B2 (en) | System and method for performing a plurality of prescribed data management functions in a manner that reduces redundant access operations to primary storage | |
US10275474B2 (en) | System and method for managing deduplicated copies of data using temporal relationships among copies | |
US9372866B2 (en) | System and method for creating deduplicated copies of data by sending difference data between near-neighbor temporal states | |
US8788769B2 (en) | System and method for performing backup or restore operations utilizing difference information and timeline state information | |
US9858155B2 (en) | System and method for managing data with service level agreements that may specify non-uniform copying of data | |
US8299944B2 (en) | System and method for creating deduplicated copies of data storing non-lossy encodings of data directly in a content addressable store | |
US8396905B2 (en) | System and method for improved garbage collection operations in a deduplicated store by tracking temporal relationships among copies | |
US10037154B2 (en) | Incremental copy performance between data stores | |
US9563683B2 (en) | Efficient data replication | |
US20150161194A1 (en) | System and method for rapid estimation of data similarity | |
EP2643760A1 (en) | Systems and methods for data management virtualization |
Legal Events
Date | Code | Title | Description |
---|---|---|---|
AS | Assignment |
Owner name: ACTIFIO, INC., MASSACHUSETTSFree format text: ASSIGNMENT OF ASSIGNORS INTEREST;ASSIGNORS:ABERCROMBIE, PHILIP J.;MUTALIK, MADHAV;PROVENZANO, CHRISTOPHER A.;AND OTHERS;SIGNING DATES FROM 20101118 TO 20101119;REEL/FRAME:025621/0808 |
|
AS | Assignment |
Owner name: HERCULES TECHNOLOGY GROWTH CAPITAL, INC., AS AGENT, CALIFORNIAFree format text: SECURITY INTEREST;ASSIGNOR:ACTIFIO, INC.;REEL/FRAME:036106/0004Effective date: 20150714Owner name: HERCULES TECHNOLOGY GROWTH CAPITAL, INC., AS AGENTFree format text: SECURITY INTEREST;ASSIGNOR:ACTIFIO, INC.;REEL/FRAME:036106/0004Effective date: 20150714 |
|
AS | Assignment |
Owner name: SILICON VALLEY BANK, MASSACHUSETTSFree format text: SECURITY AGREEMENT;ASSIGNOR:ACTIFIO, INC.;REEL/FRAME:036113/0970Effective date: 20150714 |
|
IPR | Aia trial proceeding filed before the patent and appeal board: inter partes review |
Free format text: TRIAL NO: IPR2015-01689Opponent name: DELPHIX CORPORATIONEffective date: 20150807 |
|
AS | Assignment |
Owner name: ACTIFIO, INC., MASSACHUSETTSFree format text: RELEASE BY SECURED PARTY;ASSIGNOR:HERCULES CAPITAL, INC. (FORMERLY KNOWN AS HERCULES TECHNOLOGY GROWTH CAPITAL, INC.);REEL/FRAME:042415/0395Effective date: 20170505Owner name: ACTIFIO, INC., MASSACHUSETTSFree format text: RELEASE BY SECURED PARTY;ASSIGNOR:SILICON VALLEY BANK;REEL/FRAME:042415/0317Effective date: 20170505 |
|
IPRC | Trial and appeal board: inter partes review certificate |
Kind code of ref document: K1Free format text: INTER PARTES REVIEW CERTIFICATE; TRIAL NO. IPR2015-01689, AUG. 7, 2015INTER PARTES REVIEW CERTIFICATE FOR PATENT 8,788,769, ISSUED JUL. 22, 2014, APPL. NO. 12/947,393, NOV. 16, 2010INTER PARTES REVIEW CERTIFICATE ISSUED FEB. 14, 2018Effective date: 20180214 |
|
FEPP | Fee payment procedure |
Free format text: MAINTENANCE FEE REMINDER MAILED (ORIGINAL EVENT CODE: REM.) |
|
AS | Assignment |
Owner name: CRESTLINE DIRECT FINANCE, L.P., AS ADMINISTRATIVE AGENT, COLLATERAL AGENT AND SOLE LEAD ARRANGER, TEXASFree format text: SECURITY INTEREST;ASSIGNOR:ACTIFIO, INC.;REEL/FRAME:046702/0543Effective date: 20180802Owner name: CRESTLINE DIRECT FINANCE, L.P., AS ADMINISTRATIVEFree format text: SECURITY INTEREST;ASSIGNOR:ACTIFIO, INC.;REEL/FRAME:046702/0543Effective date: 20180802 |
|
LAPS | Lapse for failure to pay maintenance fees |
Free format text: PATENT EXPIRED FOR FAILURE TO PAY MAINTENANCE FEES (ORIGINAL EVENT CODE: EXP.); ENTITY STATUS OF PATENT OWNER: SMALL ENTITY |
|
STCH | Information on status: patent discontinuation |
Free format text: PATENT EXPIRED DUE TO NONPAYMENT OF MAINTENANCE FEES UNDER 37 CFR 1.362 |
|
FP | Lapsed due to failure to pay maintenance fee |
Effective date: 20180722 |
|
AS | Assignment |
Owner name: ACTIFIO, INC., MASSACHUSETTSFree format text: RELEASE BY SECURED PARTY;ASSIGNOR:CRESTLINE DIRECT FINANCE, L.P., AS COLLATERAL AGENT;REEL/FRAME:053483/0084Effective date: 20200522 |
|
AS | Assignment |
Owner name: GOOGLE LLC, CALIFORNIAFree format text: ASSIGNMENT OF ASSIGNORS INTEREST;ASSIGNOR:ACTIFIO, INC.;REEL/FRAME:056911/0517Effective date: 20210316 |
|
DC | Disclaimer filed |
Free format text: DISCLAIM THE FOLLOWING COMPLETE CLAIMS 1-8 OF SAID PATENTEffective date: 20160511 |