CN114128232B - Method for managing flow table and flow table management system - Google Patents
Method for managing flow table and flow table management system Download PDFInfo
- Publication number
- CN114128232B CN114128232B CN201980098495.7A CN201980098495A CN114128232B CN 114128232 B CN114128232 B CN 114128232B CN 201980098495 A CN201980098495 A CN 201980098495A CN 114128232 B CN114128232 B CN 114128232B
- Authority
- CN
- China
- Prior art keywords
- flow
- flow table
- age
- network
- entry
- Prior art date
- Legal status (The legal status is an assumption and is not a legal conclusion. Google has not performed a legal analysis and makes no representation as to the accuracy of the status listed.)
- Active
Links
Images
Classifications
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04L—TRANSMISSION OF DIGITAL INFORMATION, e.g. TELEGRAPHIC COMMUNICATION
- H04L45/00—Routing or path finding of packets in data switching networks
- H04L45/38—Flow based routing
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F12/00—Accessing, addressing or allocating within memory systems or architectures
- G06F12/02—Addressing or allocation; Relocation
- G06F12/08—Addressing or allocation; Relocation in hierarchically structured memory systems, e.g. virtual memory systems
- G06F12/0802—Addressing of a memory level in which the access to the desired data or data block requires associative addressing means, e.g. caches
- G06F12/0875—Addressing of a memory level in which the access to the desired data or data block requires associative addressing means, e.g. caches with dedicated cache, e.g. instruction or stack
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04L—TRANSMISSION OF DIGITAL INFORMATION, e.g. TELEGRAPHIC COMMUNICATION
- H04L45/00—Routing or path finding of packets in data switching networks
- H04L45/54—Organization of routing tables
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04L—TRANSMISSION OF DIGITAL INFORMATION, e.g. TELEGRAPHIC COMMUNICATION
- H04L47/00—Traffic control in data switching networks
- H04L47/50—Queue scheduling
- H04L47/52—Queue scheduling by attributing bandwidth to queues
- H04L47/522—Dynamic queue service slot or variable bandwidth allocation
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04L—TRANSMISSION OF DIGITAL INFORMATION, e.g. TELEGRAPHIC COMMUNICATION
- H04L47/00—Traffic control in data switching networks
- H04L47/10—Flow control; Congestion control
- H04L47/24—Traffic characterised by specific attributes, e.g. priority or QoS
- H04L47/2483—Traffic characterised by specific attributes, e.g. priority or QoS involving identification of individual flows
Abstract
The flow table management system may include a hardware memory module communicatively coupled to the network interface card. The hardware memory module is configured to store a flow table comprising a plurality of network flow entries. The network interface card further includes a flow table age cache configured to store a set of recently active network flows and a flow table management module configured to use the flow table age cache to manage a duration of time that a corresponding network flow entry in the flow table stored in the hardware memory module remains in the flow table. In some implementations, age information for each respective flow in the flow table is stored in an age status table in the hardware memory module separate from the flow table.
Description
Cross Reference to Related Applications
This application is a continuation of U.S. patent application 16/549,695, filed on day 8, 23, 2019, which claims the benefit of the filing date of U.S. provisional patent application 62/849,594, filed on day 5, 17, 2019, the disclosure of which is incorporated herein by reference.
Background
A hardware component, such as a Network Interface Card (NIC), network router, switch, or server, may access a flow table for storing instructions regarding network traffic handling. Network traffic is typically handled on a per network flow (network flow) basis. When a data packet (data packet) associated with a flow enters a network component, the network component may look up the flow in a flow table or flow table cache to determine how to process the incoming data packet. For example, if the flow is stored in a flow table cache, the flow table itself need not be accessed. The flow table may reside in a Dynamic Random Access Memory (DRAM) module coupled to the network component, while the flow table cache typically resides in the network component itself. If the flow is not stored in the flow table cache, which typically has a relatively small amount of cache memory compared to the memory storing the full flow table, the network component queries the full flow table for processing instructions. If a flow is not in the full flow table, the network component may query the larger computing device or remote computing device in which the flow is incorporated to determine how packets associated with such flow should be processed. The network component may then add the results of the query to the flow table and/or flow table cache for processing future packets associated with the flow.
In some cases, a flow stored in a flow table may become outdated over time if packets associated with a particular flow are not processed by the network component. Thus, entries in the flow table may benefit from new queries that are routinely cleared to create space for new flows or to hint flow processing instructions for a given flow. The process of determining if and when a flow table entry should be considered obsolete and thus removed is called flow table aging (aging). Current systems for flow table aging in which the flow table is stored in DRAM typically rely heavily on accessing the flow table DRAM which already has bandwidth limitations. Continuous access of DRAM can overcome these bandwidth limitations and cause failures or unacceptable delays. Accordingly, there is a need for an improved method of managing flow entries in a flow table to alleviate bandwidth constraints between network components and memory modules storing flow tables of such network components.
Disclosure of Invention
At least one aspect relates to a method of managing a flow table. The method includes providing a hardware memory module coupled to a network component. The hardware memory module stores a flow table including a plurality of entries. Each entry corresponds to a network flow. The method also includes providing, on the network component, a flow table age cache configured to store a set of recently active network flows. The method also includes providing, on the network component, a flow table management module configured to manage a duration of time that a corresponding entry in the flow table remains in the flow table.
In some implementations, the flow table management module manages the duration of time that a corresponding entry in the flow table remains in the flow table by updating the flow table age cache with information indicating activity associated with the network flow and periodically scanning the entries in the flow table as the network component processes data packets associated with the network flow.
In some embodiments of the method, the scanning includes, for each entry in the flow table, looking up the network flow associated with the entry in the flow table age cache. In response to finding the network flow associated with the entry in the flow table age cache, the timer information of the network flow stored in the memory module is updated. In some implementations of the method, responsive to the network flow associated with the entry not being found in the flow table age cache, the scanning includes evaluating an age of the entry based on information stored in the hardware memory module, and removing the entry from the flow table responsive to the age of the entry exceeding a threshold time value associated with the network flow.
In some implementations, the flow table management module is based on a state of the network flow associated with an entryAnd determining the age of each entry with a respective age threshold corresponding to a possible state of the network flow. In some implementations, the flow table management module is configured to evaluate the age of a flow entry by comparing a last active timer value stored for the flow entry to a timer value and to determine a current state of the flow entry based on the current state and the current state of the flow entry, and to determine a current state of the flow entry based on the current state and the current state of the flow entry based on the current state
In some implementations, age information associated with each of the entries of the flow table is stored in the hardware memory module in a data structure separate from the flow table. In some embodiments, the network component is a network interface card.
In some embodiments, updating the timer information for the network flow includes resetting an age timer for the network flow. In some implementations, updating the timer information for the network flow includes modifying a state of the network flow, thereby modifying the threshold time value associated with the network flow. In some implementations, the possible states of the network flow include a Transmission Control Protocol (TCP) flow state including at least a startup state, an established state, a termination state, and a closed state. In some implementations, updating the flow table age cache with information indicative of activity associated with the network flow includes changing the state of the network flow from a first one of the possible states to a second one of the possible states based on a type of the packet processed in association with the network flow.
In some implementations, the flow table management module is configured to maintain a multi-bit clock and to maintain a last active time value for each flow entry in the flow table that is represented by the same number of bits as used in the multi-bit clock. In such an embodiment, evaluating the age of a flow table entry may include comparing the last active time of the entry in the hardware memory module with a current value of the multi-bit clock. In some implementations, if the last active time value stored for the flow table entry matches the bit of the multi-bit clock during the comparison, it is determined that the flow entry has exceeded the threshold.
At least one aspect relates to a flow table management system. The system includes a hardware memory module configured to store a flow table including a plurality of network flow entries. The system also includes a network component communicatively coupled to the hardware memory module. The network component further includes a memory and a processor. The memory stores a flow table age cache configured to store a set of recently active network flows. The processor is configured to execute a flow table management module configured to manage a duration of time that a corresponding network flow entry in the flow table stored in the hardware memory module remains in the flow table.
In some implementations, the flow table management system can include a hardware memory module communicatively coupled to a network interface card. The hardware memory module is configured to store a flow table comprising a plurality of network flow entries. The network interface card further includes a flow table age cache configured to store a set of recently active network flows and a flow table management module configured to use the flow table age cache to manage a duration of time that a corresponding network flow entry in the flow table stored in the hardware memory module remains in the flow table. In some implementations, age information for each respective flow in the flow table is stored in an age status table in the hardware memory module separate from the flow table.
The flow table management module manages the duration of time that respective entries in the flow table remain in the flow table by updating the flow table age cache with information indicating activity associated with a network flow as the network component processes data packets associated with the network flow. The flow table management module is further configured to periodically scan the network flow entries in the flow table. Periodically said scanning of said network flow entries in said flow table comprises looking up said network flow associated with each entry in said flow table age cache. In some implementations, the flow table management module updates timer information for the network flow stored in the hardware memory module in response to finding the network flow in the flow table age cache. In some implementations, in response to not finding the network flow associated with an entry in the flow table age cache, the method further includes evaluating an age of the entry based on information stored in the hardware memory module, and removing the entry from the flow table in response to the age of the entry exceeding a threshold time value associated with the network flow.
In some implementations, the flow table management module is configured to determine the age of each entry based on a state of the network flow associated with the entry and a respective age threshold corresponding to a possible state of the network flow. In some implementations, the flow table management module is configured to scan the entry with a period that is less than one-fourth of a minimum value of the age threshold associated with the possible state.
In some implementations, the age information associated with each of the entries of the flow table is stored in the hardware memory module in a separate data structure from the flow table.
In some embodiments, updating the timer information for the network flow includes resetting an age timer for the network flow. In some implementations, updating the timer information for the network flow includes modifying a state of the network flow, thereby modifying the threshold time value associated with the network flow. In some implementations, the possible states of the network flow include TCP flow states including at least a startup state, an established state, a termination state, and a closed state. In some implementations, updating the flow table age cache with information indicative of activity associated with the network flow includes changing the state of the network flow from a first one of the possible states to a second one of the possible states based on a type of the packet processed in association with the network flow.
In some implementations, the flow table management module is configured to maintain a multi-bit clock and to maintain a last active time value for each flow entry in the flow table that is represented by the same number of bits as used in the multi-bit clock. In such an embodiment, evaluating the age of a flow table entry may include comparing the last active time of the entry in the hardware memory module with a current value of the multi-bit clock. In some implementations, if the last active time value stored for the flow table entry matches the bit of the multi-bit clock during the comparison, it is determined that the flow entry has exceeded the threshold.
These and other aspects and embodiments are discussed in detail below. The foregoing information and the following detailed description include illustrative examples of various aspects and embodiments, and provide an overview or framework for understanding the nature and character of the claimed aspects and embodiments. The accompanying drawings provide a description and a further understanding of various aspects and embodiments, and are incorporated in and constitute a part of this specification.
Drawings
The drawings are not intended to be drawn to scale. Like reference numbers and designations in the various drawings indicate like elements. For purposes of clarity, not every component may be labeled in every drawing. In the figure:
FIG. 1 is a block diagram showing various components of a flow table management system in accordance with an illustrative embodiment;
FIG. 2 shows an example of an age status table in accordance with an illustrative embodiment;
FIG. 3 shows an example of a flow table age cache in accordance with an illustrative embodiment;
FIG. 4 is a flowchart of a method of managing a flow table in accordance with an illustrative embodiment;
FIG. 5A shows an example of a flow table timer in accordance with an illustrative embodiment; and
fig. 5B shows an example of an age status table using the flow table timer of fig. 5A.
Detailed Description
The technology described herein relates generally to a method of managing flow tables in a network component, such as a Network Interface Card (NIC), router, switch, server, or any other network component. In various embodiments of the disclosed technology, the management method is used in conjunction with a network component coupled to a memory module, such as Random Access Memory (RAM), static RAM (SRAM), dynamic RAM (DRAM), synchronous Dynamic RAM (SDRAM), or double data rate RAM (DDR RAM), including DDR2 RAM, DDR3 RAM, DDR4 RAM, and low power DDR (LPDDR), among others. As disclosed herein, in various embodiments, a hardware memory module stores a flow table comprising a plurality of entries, wherein each entry corresponds to a network flow. A flow table age cache on the network interface card is maintained and configured to store a set of recently active (active) network flows. A flow table management module on the network interface card manages the duration of time that the corresponding entry in the flow table remains in the flow table.
In operation, as the network component processes data packets associated with the network flow, the flow table management module updates the flow table age cache with information indicating activity associated with the network flow. The network management module also periodically scans entries in the flow table, comparing those entries to entries in the flow table age cache. In response to finding the network flow associated with the entry in the flow table age cache during the scan, the timer information for the network flow stored in the memory module is updated. The timer information may be stored directly in the flow table or in a separate age state table. Updating the timer information for the network flow may include resetting a timer associated with the flow or modifying a state of the network flow, thereby modifying a threshold time value associated with the network flow. The state of the flow may be modified based on the type of packet received with respect to the flow.
In response to not finding a network flow associated with the entry in the flow table age cache, an age (age) of the entry is evaluated based on information stored in the hardware memory module. If the entry's age exceeds a threshold time value associated with the network flow, the entry is removed from the flow table. In some implementations, the flow table management module determines an age of each entry with reference to a state of the network flow associated with the entry and a respective age threshold corresponding to a possible state of the network flow. In some embodiments, the flow state corresponds to the state of a flow in the TCP protocol or other stateful communication protocol. Example states include a startup state, an established state, a termination state, and a closed state. In some implementations, the flow table management module may be configured to scan the entries with a period that is less than one-fourth of a minimum value of the age threshold associated with the possible states.
In some embodiments of the disclosed methods, the flow table management module may be configured to maintain a multi-bit clock (multi-bit clock) for evaluating the age of entries in the flow table. Evaluating the age of the flow table entry includes comparing the timer information stored for the entry in the hardware memory module with the number of bits of the multi-bit clock. The number of bits used in the comparison may be based on the state of the network flow. In some implementations, if during the comparison, the value of the number of bits stored for the flow table entry matches the value of the number of bits of the multi-bit clock associated with the flow state, it is determined that the flow entry has exceeded the threshold.
Fig. 1 is a block diagram showing various components of a flow table management system 100 in accordance with an illustrative embodiment of the technology as described herein. As shown in fig. 1, the system 100 includes a (hardware) memory module 120 coupled to a network component 150. The memory module 120 stores a flow table 130 and an age status table 140. The network component 150 includes a flow table cache 160, an age cache 170, a flow table management module 180, and a packet processing engine 190, the packet processing engine 190 being configured to receive the incoming data packet 110 and to generate the processed data packet 115. In some implementations, the network component 150 can be a Network Interface Card (NIC) of a server. In some implementations, the network component 150 may be a router, a switch, a firewall, a network appliance, or any other network component.
When an incoming data packet 110 arrives, the packet processing engine 190 is configured to determine what network operations to perform on the packet and what parameters, if applicable. The determination is made based on the network flow to which the packet belongs. A network flow refers to a unique stream of data packets that make up a distinct communication flow between two endpoints. Streams are typically identified by 5-tuple information. For example, for a TCP flow, the 5-tuple information of the flow typically includes a source Internet Protocol (IP) address, a source port number, a destination IP address, a destination port number, and a protocol identifier. For other types of streams, other header data fields may be used to define 5-tuples. For example, for some protocols, instead of a source port number and a destination port number, a 5-tuple may include a source MAC address and a destination MAC address. As described further below, to determine the appropriate instructions for the packet, the packet processing engine queries the flow table cache 160 stored on the network component or, if desired, the flow table 130 stored in the memory module 120.
In some embodiments where network component 150 is a NIC, memory module 120 may reside on NIC 150 or on a common circuit board that is a NIC. The memory module 120 and the NIC are communicatively coupled via an interconnection bus.
In some embodiments, memory module 120 may include, for example, random Access Memory (RAM), static RAM (SRAM), dynamic RAM (DRAM), synchronous Dynamic RAM (SDRAM), or double data rate RAM (DDR RAM), including DDR2 RAM, DDR3 RAM, DDR4 RAM, low power DDR (LPDDR), high Bandwidth Memory (HBM), graphics Double Data Rate (GDDR) memory, embedded DRAM (eDRAM), etc.
As shown on the left side of fig. 1, the flow table cache 160 is communicatively coupled to the flow table 130 in the memory module 120. In some embodiments, packet processing engine 190 is configured to first look up processing instructions for data packet 110 for a flow in flow table cache 160, which flow table cache 160 serves as a locally cached version of a portion of full flow table 130. The lookup may be based directly on the 5-tuple information associated with the stream or on a 5-tuple hash. If the flow is not in the flow table cache, the packet processing engine may transmit a query to the flow table 130 in the memory module 120. If the flow is not located in the flow table cache 160 or the flow table 130, the packet processing engine 190 may be configured to query another process or device, such as a network controller in the case of a router, or a server hypervisor in the case of a server, to identify processing instructions, which may then be stored in the flow table 130 and the flow table cache 160.
When a hit is found in the flow table 130 or the flow table cache 160 or an instruction is received from an external process or device, the packet processing engine obtains instructions on how to process the data packet 110. For example, an entry for a flow may indicate that a data packet should be processed by any network function implemented by packet processing engine 190. For example, in embodiments in which NIC 150 is part of a network router or switch, the flow table entry may only indicate through which port to forward the packet. For certain types of routers, such as gateway routers, the flow table entries may include more complex instructions including firewall processing, network address translation, or execution of other network functions. For NICs incorporated into a server, a flow table entry may indicate that the packet processing engine should perform decryption or physical memory address translation to direct the packet to a particular virtual machine or container executing on the server. Packet processing engine 190 then executes the instructions indicated in the information retrieved from flow table cache 160 or flow table 130.
As shown in fig. 1, the flow table 130 and the age status table 140 are separate data structures. As described further below, this embodiment may provide independent access to each data structure for processing queries of the flow table and flow table aging processes performed by the flow table management module 180 for analysis. In some implementations, the flow table 130 and the age status table 140 may be combined into a single data structure. This embodiment with a single data structure for the combined flow table 130 and age state table 140 may require more bandwidth for handling flow table entry aging, each aging query may result in returning much more data than the query of the age state table alone. In particular, when information is collected from the age status table 140 back to the flow table management module 180 for analysis, to reduce processing requirements, consecutive blocks of memory are typically retrieved, thereby avoiding the processing required to parse the memory portion. Thus, a combined flow table/age status table will result in the transmission of the same number of larger data blocks, or more data transmissions, where each transmission includes information about fewer flow table entries. Since the flow table may include up to 1600 tens of thousands of entries or more, it is valuable to keep the number and size of transmissions to a minimum to reduce bandwidth, reduce energy consumption, and improve execution speed. Maintaining separate flow tables 130 and age status tables 140 may help achieve these goals.
As shown on the right side of fig. 1, the flow table management module 180 is communicatively coupled to the age cache 170 and the age status table 140 in the memory module 120. In some embodiments, the flow table management module 180 and the flow table cache 170 may be connected to a common interconnect bus as the memory module 120 storing the age status table 140. In some implementations, the flow table management module 180 executes on the same processor as the packet processing engine 190. In other implementations, the flow table management module 180 may execute on a dedicated processor. Further details are provided below with respect to fig. 2 and 3.
Fig. 2 shows an example of an age status table 200 in accordance with an illustrative embodiment. As shown in FIG. 2, the age status table 200 includes a series of entries 208. For each entry, the age status table stores a flow ID 210, a timer selection 212, and a last active value 214. The stream ID 210 is an identifier of the stream. In some implementations, the stream ID 210 can be a number, 5-tuple data associated with the stream, or a hash value, such as a hash of the 5-tuple. Preferably, the age status table 200 has the same number of entries as the flow table 130 shown in fig. 1, because the age status table 200 is configured to track the age of each flow listed in the flow table 130. In some implementations, the timer selection 212 may be a value selected to identify which time count or age threshold to apply when evaluating whether the corresponding entry in the flow table is outdated and should be removed. In some implementations, last active value 214 is a value that indicates when a particular stream ID 210 was last determined to be active. For example, last active value 214 indicates when NIC 150 last processed the packet associated with a particular flow ID 210. The last activity value may be a value indicating the actual clock time when the last packet associated with the flow was received, or it may be a timer value associated with the last scan flow table age cache 170 indicating that there is a last activity associated with the flow.
In some implementations, the age status table 200 may include additional "static" flags (not shown). If a static flag is set for a given entry, that entry will not be outdated regardless of its state or age.
In some implementations, the age status table 200 may discard the explicit stream id 210 data field. Instead, each row of the age status table 200 may be logically linked to a given row of the flow table such that the system understands the nth row of the age status table 200 as always corresponding to a flow stored in the nth row of the flow table 130.
Fig. 3 shows an example of a flow table age cache 300 in accordance with an illustrative embodiment. As shown in fig. 3, flow table age cache 300 includes a plurality of entries 308. For each entry, the flow table age cache stores a corresponding flow ID 310, timer selection 312, and optional active flag 316. Stream ID 310 is an identifier of the stream, and as with stream ID 210, stream ID 310 may be a number, 5-tuple information, or a hash value, such as a hash value of 5-tuple information. In some implementations, the age status table 140, the stream table age cache 170, the stream table cache 160, and the stream table 130 may identify streams having data fields of larger or smaller tuples (such as 4-tuple, 6-tuple, etc.) without departing from the scope of the disclosure. In some implementations, the stream ID 310 is a number or pointer that serves as an index into the age status table 140 and the stream table 130. The timer selection 312 identifies what timing threshold or age threshold should be applied to the flow associated with the corresponding flow ID 310. In some implementations, the active flag 316 is a binary value, which may be 0 or 1. For example, packet processing engine 190 may set active flag 316 of a flow to 1 upon receipt of a packet associated with the flow, and flow table management module 180 may set active flag to 0 after updating age state table 140 to indicate recent activity in the flow. If the flow table age cache 170 is filled, then an entry with an active flag value of 0 may be overwritten. If no entry has an active flag value of 0, the flow table age cache may be immediately flushed to the age state table, setting all active flag values back to 0, thereby providing new room to add the flow to the flow table age cache 170. Alternatively, if there is no entry in the flow table age cache 170 that is associated with a given flow, the packet processing engine may add an entry to the flow table age cache 170 only when processing packets associated with that flow. The flow table management module 180 may delete the entry associated with the flow after updating the age status table 140 with the most recently used indication. If the flow table age cache 170 is full when the packet processing engine 190 attempts to add a new flow to the flow table age cache 170, the age state table may be updated immediately based on the current state of the flow table age cache 170 and the flow table age cache 170 may be refreshed.
Fig. 4 is a flowchart of a method 400 of managing a flow table in accordance with an illustrative embodiment. The method 400 may be performed, for example, by the flow table management module 180 shown in fig. 1 using the age status table 140 and the flow table age cache 170. The method includes providing a hardware memory module coupled to a network interface card. The hardware memory module stores a flow table including a plurality of entries, each entry corresponding to a network flow (step 410). The flow table may include a separate flow table and an age status table as shown in fig. 1 (e.g., age status table 200 shown in fig. 2), or a combined flow table/age status table. The method 400 further includes providing a flow table age cache on the network interface card, such as the flow table age cache 170 shown in fig. 1 or the flow table age cache 300 shown in fig. 3 (step 420). The flow table age cache is configured to store a set of recently active network flows. The method 400 further includes providing a flow table management module, such as the flow table management module 180, on the network interface card, the flow table management module configured to manage the duration of time that corresponding entries in the flow table remain in the flow table (step 430).
As the network interface card processes data packets associated with the network flow, method 400 includes updating the flow table age cache with information indicating activity associated with the network flow (step 440). The flow table age cache may be updated by adding an entry associated with the network flow (if the entry does not already exist in the flow table age cache) or by setting an active flag associated with the flow to a value (e.g., value 1) indicating recent activity. In addition, a timer selection value associated with the flow may be updated depending on the type of packet received with respect to the packet. For example, upon receipt of a TCP SYN, ACK packet, the state of the flow may transition from the SYN sent state to the established state. Upon receipt of a TCP FIN packet, the flow state may transition from the established state to the off-wait state. The packet processing engine may be configured to set a timer selection value in the flow table age cache selected to correspond to the new state. Those of ordinary skill in the art will appreciate that certain TCP flow states are more transient than others. Thus, a shorter timer may be set for a flow in a more transient state than a flow in a more persistent state.
The method 400 further includes periodically scanning entries in the flow table relative to entries in the flow table age cache (step 450). The block of entries may be retrieved by the flow table management module from an age state table stored in the memory module and each retrieved entry is looked up in the flow table age cache for scanning. In response to finding the network flow associated with the entry in the flow table age cache (decision block 460), method 400 further includes updating timer information for the network flow stored in the memory module (step 470). For example, the flow table management module may store the current state of the flow and the time at which the scan was performed in the age state table 140. In response to not finding a network flow associated with the entry in the flow table age cache (decision block 460), the method 400 includes evaluating the age of the entry based on the information stored in the hardware memory module, and removing the entry from the flow table in response to the age of the entry exceeding a threshold time value associated with the network flow (step 480). The flow table entry may be removed by the flow table management module 180, clearing an entry in the flow table, or marking the flow table entry as out-of-date, allowing it to be overwritten if a new flow is added, or causing it to be refreshed if a new packet for the flow is received before the flow is overwritten.
In some implementations of the method 400, the flow table management module is configured to repeat the scanning process at a period less than or equal to one-fourth of a minimum value of the age thresholds associated with the possible states (steps 450-480). In some embodiments, the scanning frequency is related to the number of bits used in the age comparison. Thus, in some embodiments, the scanning frequency may be
In some embodiments of method 400, the flow table management module is configured to track the age of the flow table entry by maintaining a periodically increasing multi-bit clock timer. In some embodiments, the timer is incremented each time the scan is completed. In other embodiments, the time is periodically incremented based on the passage of a predetermined amount of time (e.g., one or more microseconds, seconds, minutes, etc.). In other embodiments, the flow management module maintains a plurality of timers, each associated with a different timer selection value. For example, a first timer may be incremented every x microseconds, a second timer may be incremented every y seconds, a third timer may be incremented every z minutes, and so on, depending on how many timer selection values are supported by the stream management module. In embodiments where multiple timers are maintained, evaluating the age of a flow table entry at stage 480 includes comparing the stored timer information for the flow entry in the hardware memory module with bits of a timer corresponding to a timer selection value associated with the flow. In some embodiments with a single timer, the age of a flow table entry may be assessed by comparing the timer information stored for the flow entry in the hardware memory module with certain numbers of bits of the timer (as indicated by the timer selection value associated with the flow). In some other implementations that utilize a single timer, the timer value may first be converted to a value in a time scale associated with the timer selection value of the flow, and then the converted time value may be compared to the stored timer information for the flow in the hardware memory module. In such an embodiment, the number of bits used in the comparison, the timer used in the comparison, or the time scale used for the comparison (if applicable) may be based on the state of the network flow. In some embodiments of method 400, if the stored timer value for the flow table entry matches the applicable timer value during the comparison, it is determined that the flow entry has exceeded the age threshold. An example of this comparison process is described below.
Fig. 5A shows an example of a flow table timer 500 according to an illustrative embodiment suitable for use in the timer scheme described above. As shown in fig. 5, the timer 500 is a three bit long timer as shown in the table, wherein 8 possible time scales in a row repeat from 0-0-0 at the top row, 0-0-1 at the second row, 0-1-0 … … at the third row to 1-1-1 at the bottom row, and then again from 0-0-0-0 at the top row. In some embodiments, the timer 500 is incremented each time the scanning of the age status table 140 is completed. During the scan, if a flow entry in the age state table 140 is found in the flow table age cache, the last active value 214 of the entry is updated to the current value of the timer. Timer 500 may then be used to determine the age of a particular flow ID by comparing the last active value 214 associated with the flow to the current timer value.
Fig. 5B shows an example of an age status table 510 using a flow table timer 500. As shown in fig. 5B, the age status table 510 includes two flow entries, entries 520a and 520B. Age status table entry 520a includes flow ID 510a, timer selection 512a, and last active value 514a. Similarly, age status table entry 520b shows flow ID 510b, timer selection 512b, and last active value 514b. As shown in FIG. 5B, entry 520a has a timer select value 512a of 0 and has a last active value 514a of 0-0-0. Entry 520b has a timer select value 512b of 1 and a last active value 514b of 0-1-0. In some embodiments, a timer selection value of 0 may indicate that the comparison should consider the two least significant bits of the timer counter 500, while a timer selection value of 1 indicates that the comparison should consider all three bits of the timer counter 500.
Thus, for an entry 520a with a timer selection value of 0, assuming no new packet for the flow is received, the flow table management module 180 will consider the entry 520a to have aged during the next scan, with the last two bits of the timer counter 500 matching the last two bits of the last active value 514a, in this case 0-0. As shown in fig. 5A, the last two digits of the timer 500 are 0-0 for every four counter values. Thus, entry 520a will age from the flow table after four scans of the age state table have been completed without processing a new packet for the flow. In contrast, because the timer selection value of entry 520b is 1, indicating that all three bits of last active value 514b should be used in the comparison, it is apparent that all three bits of the last active value will match the timer value once every 8 counter values, based on FIG. 5. Thus, a flow with a timer selection value of 1 may remain in the flow table without any activity twice, as long as a flow with a timer selection value of 0 is in the corresponding entry of the age state table 140.
While the discussion of fig. 5A and 5B suggests a three-bit timer, it is apparent that a timer employing additional bits may allow additional timer selection values and different aging thresholds. For example, a third timing threshold may be added by adding a fourth bit and a third possible timer selection value to the timer that requires the last four bits of the last active value to match the last four bits of the timer value. The third timing threshold will be twice the second timing threshold (timer selection value of 1) and four times the first timing threshold (timer selection value of 0). Adding the fifth bit to the timer will enable additional, longer thresholds, and so on.
While the timer architecture described above provides a processor and memory efficient way of tracking age in a flow table, the system disclosed herein may use other timing mechanisms. For example, the last active value may be a CPU or other processor clock that identifies a particular time when the last packet associated with the flow was received by the NIC. The timer selection value may be an actual value indicating the amount of time (in terms of CPU clock cycles) that may elapse without activity before the entry ages. In such an embodiment, the comparison made at stage 480 may be a comparison of the difference between the current clock time and the stored clock time relative to a threshold time indicated by the timer selection value. In yet another embodiment, the timer selection value may be an index to an age threshold data structure storing a correspondence between the timer selection value and an actual aging threshold.
As indicated above, in some implementations, the flow table management module may maintain multiple equally wide clocks (i.e., each clock tracks time using the same number of bits), where each clock corresponds to a different time scale. For example, a first clock may track time in microseconds, a second clock may track time in milliseconds, a third clock may track time in seconds, and a fourth clock may track time in minutes. Each clock may track time in individual units of time or increments of blocks of units of time. For example, one microsecond clock may increment every 1, 5, 10, or 25, or any other number of microseconds. In some implementations, the second microsecond clock may track time in different numbers of microsecond increments. The time increment for each timer is selected based on the maximum time threshold desired to be tracked by the timer and the number of bits (corresponding to the degree of accuracy) desired to track such time. For example, for an age threshold of 100 microseconds tracked with a two bit timer, the timer may increment every 25 microseconds. If a three bit timer is used, the timer will increment every 12.5 microseconds, and so on. The last active time value stored in the age state table is represented by the same number of bits used for the timer. To evaluate whether a given flow should be aged, the flow table management module may identify an appropriate timer as indicated by the stored timer selection value for that flow and compare the value stored in the timer to the current value of the indicated timer. If the values match, it is determined that the flow has exceeded an age threshold.
The methods described herein may be implemented in various ways, depending on the application. For example, the methods may be implemented in hardware, firmware, software, or any combination thereof. For a hardware implementation, the processing units may be implemented within one or more Application Specific Integrated Circuits (ASICs), digital Signal Processors (DSPs), digital Signal Processing Devices (DSPDs), programmable Logic Devices (PLDs), field Programmable Gate Arrays (FPGAs), processors, controllers, micro-controllers, microprocessors, electronic devices, other electronic units designed to perform the functions described herein, or a combination thereof.
In various embodiments, the methods of the present teachings may be implemented as firmware and/or software programs and applications written in conventional programming languages, such as C, C ++, python, and the like. If implemented as firmware and/or software, the embodiments described herein may be implemented on a non-transitory computer-readable medium storing a program for causing a computer to perform the above-described methods.
Embodiments of the subject matter and the operations described in this specification can be implemented in digital electronic circuitry, or in computer software embodied on tangible media, firmware, or hardware, including the structures disclosed in this specification and their structural equivalents, or in combinations of one or more of them. Embodiments of the subject matter described in this specification can be implemented as one or more computer programs embodied on tangible media, i.e., modules of one or more computer program instructions encoded on one or more computer storage media, for execution by, or to control the operation of, data processing apparatus. The computer storage medium may be or be included in a computer readable storage device, a computer readable storage substrate, a random or serial access memory array or device, or a combination of one or more of them. Computer storage media may also be or be included in one or more separate components or media (e.g., a plurality of CDs, discs, or other storage devices). Computer storage media may be tangible and non-transitory.
While this specification contains many specifics of specific embodiments, these should not be construed as limitations on the scope of any invention or of what may be claimed, but rather as descriptions of features specific to particular embodiments of particular inventions. Certain features that are described in this specification in the context of separate embodiments can also be implemented in combination in a single embodiment. Conversely, various features that are described in the context of a single embodiment can also be implemented in multiple embodiments separately or in any suitable subcombination. Furthermore, although features may be described above as acting in certain combinations and even initially claimed as such, one or more features from a claimed combination can in some cases be excised from the combination, and the claimed combination may be directed to a subcombination or variation of a subcombination.
Similarly, although operations are illustrated in a particular order in the figures, this should not be understood as requiring that such operations be performed in the particular order or sequence illustrated, or that all illustrated operations be performed, to achieve desirable results. In some cases, multitasking and parallel processing may be advantageous. Moreover, the separation of various system components in the embodiments described above should not be understood as requiring such separation in all embodiments, and it should be understood that the described program components and systems can generally be integrated in a single software product or packaged into multiple software products.
References to "or" may be construed as inclusive such that any term described using "or" may indicate any one of the singular, more than one, and all of the terms described. The labels "first," "second," "third," etc. do not necessarily imply a sequence of indications and are generally only used to distinguish between the same or similar items or elements.
Various modifications to the embodiments described in the disclosure may be readily apparent to those skilled in the art, and the generic principles defined herein may be applied to other embodiments without departing from the spirit or scope of the disclosure. Thus, the claims are not intended to be limited to the embodiments shown herein but are to be accorded the widest scope consistent with the disclosure, principles and novel features disclosed herein.
Claims (22)
1. A method of managing a flow table, comprising:
providing a hardware memory module coupled to the network component, the hardware memory module storing a flow table comprising a plurality of entries, each entry corresponding to a network flow;
providing a flow table age cache on the network component, the flow table age cache configured to store a set of recently active network flows;
Providing a flow table management module on the network component, the flow table management module configured to manage the duration of time that respective entries in the flow table remain in the flow table by:
updating the flow table age cache with information indicating activity associated with the network flow;
periodically scanning the entries in the flow table, the scanning comprising, for each entry in the flow table:
looking up the network flow associated with the entry in the flow table age cache;
in response to finding the network flow associated with the entry in the flow table age cache, updating timer information for the network flow stored in the memory module; and
in response to the network flow associated with the entry not being found in the flow table age cache, evaluating an age of the entry based on information stored in the hardware memory module, and removing the entry from the flow table in response to the age of the entry exceeding a threshold time value associated with the network flow;
wherein the flow table management module evaluates the age of each entry based on the status of the network flow associated with the entry and a respective age threshold corresponding to a possible status of the network flow.
2. The method of claim 1, wherein the flow table management module is configured to evaluate the age of a flow entry by comparing an associated stored last active timer value with a timer and to evaluate the age of a flow entry by less than a minimum age threshold associated with the possible status
3. The method of claim 1, wherein age information associated with each of the entries of the flow table is stored in the hardware memory module, the age information being separate from the flow table in a data structure.
4. The method of claim 1, wherein the network component comprises a network interface card of a server.
5. The method of claim 1, wherein updating the timer information for the network flow comprises resetting an age timer for the network flow.
6. The method of claim 1, wherein updating the timer information for the network flow comprises modifying a state of the network flow, thereby modifying the threshold time value associated with the network flow.
7. The method of claim 6, wherein the possible states of the network flow comprise TCP flow states including at least a startup state, an established state, a termination state, and a closed state.
8. The method of claim 6, wherein updating the flow table age cache with information indicative of activity associated with the network flow comprises changing the state of the network flow from a first one of the possible states to a second one of the possible states based on a type of data packets processed by the network component in association with the network flow prior to updating the flow table age cache.
9. The method of claim 6, wherein the flow table management module is configured to maintain a multi-bit clock and to maintain a last active time value represented by the same number of bits as used in the multi-bit clock for each flow entry in the flow table, and wherein evaluating the age of a flow table entry comprises comparing the last active time of the entry in the hardware memory module to a current value of the multi-bit clock.
10. The method of claim 9, wherein if the last active time value stored for the flow table entry matches the bit of the multi-bit clock during the comparison, determining that the flow entry has exceeded the threshold.
11. The method of claim 1, wherein updating the flow table age cache with information indicative of activity associated with the network flow occurs after processing data packets associated with the network flow by the network component.
12. A flow table management system, comprising:
a hardware memory module configured to store a flow table comprising a plurality of network flow entries;
a network component communicatively coupled to the hardware memory module, the network component further comprising:
a memory storing a flow table age cache configured to store a set of recently active network flows;
a processor configured to execute a flow table management module configured to manage a duration of time that a corresponding network flow entry in the flow table stored in the hardware memory module remains in the flow table by:
updating the flow table age cache with information indicating activity associated with the network flow;
periodically scanning the network flow entries in the flow table, the scanning comprising, for each entry in the flow table:
Looking up the network flow associated with the entry in the flow table age cache;
in response to finding the network flow associated with the entry in the flow table age cache, updating timer information for the network flow stored in the memory module; and
in response to the network flow associated with the entry not being found in the flow table age cache, evaluating an age of the entry based on information stored in the hardware memory module, and removing the entry from the flow table in response to the age of the entry exceeding a threshold time value associated with the network flow;
wherein the flow table management module is configured to determine the age of each entry based on the status of the network flow associated with the entry and a respective age threshold corresponding to a possible status of the network flow.
13. The system of claim 12, wherein the flow table management module is configured to evaluate the age of a flow entry by comparing a last active timer value stored for the flow entry to a timer and to determine a minimum age threshold associated with the possible status
14. The system of claim 12, wherein age information associated with each of the entries of the flow table is stored in the hardware memory module, the age information being separate from the flow table in a data structure.
15. The system of claim 12, wherein updating the timer information for the network flow comprises resetting an age timer for the network flow.
16. The system of claim 12, wherein updating the timer information for the network flow comprises modifying a state of the network flow, thereby modifying the threshold time value associated with the network flow.
17. The system of claim 16, wherein the possible states of the network flow comprise TCP flow states including at least a startup state, an established state, a termination state, and a closed state.
18. The system of claim 16, wherein updating the flow table age cache with information indicative of activity associated with the network flow comprises changing the state of the network flow from a first one of the possible states to a second one of the possible states based on a type of data packets processed by the network component in association with the network flow prior to updating the flow table age cache.
19. The system of claim 16, wherein the flow table management module is configured to maintain a multi-bit clock and to maintain a last active time value represented by the same number of bits as used in the multi-bit clock for each flow entry in the flow table, and wherein evaluating the age of a flow table entry comprises comparing the last active time of the entry in the hardware memory module to a current value of the multi-bit clock.
20. The system of claim 19, wherein if the last active time value stored for the flow table entry matches the bit of the multi-bit clock during the comparison, then determining that the flow entry has exceeded the threshold.
21. The system of claim 12, wherein the network component comprises a network interface card.
22. The system of claim 12, wherein updating the flow table age cache with information indicative of activity associated with the network flow occurs after processing of data packets associated with the network flow by the network component.
Applications Claiming Priority (5)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US201962849594P | 2019-05-17 | 2019-05-17 | |
US62/849,594 | 2019-05-17 | ||
US16/549,695 | 2019-08-23 | ||
US16/549,695 US11169932B2 (en) | 2019-05-17 | 2019-08-23 | Flow table aging optimized for dram access |
US2019060203 | 2019-11-07 |
Publications (2)
Publication Number | Publication Date |
---|---|
CN114128232A CN114128232A (en) | 2022-03-01 |
CN114128232B true CN114128232B (en) | 2023-07-07 |
Family
ID=80248756
Family Applications (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
CN201980098495.7A Active CN114128232B (en) | 2019-05-17 | 2019-11-07 | Method for managing flow table and flow table management system |
Country Status (2)
Country | Link |
---|---|
EP (1) | EP3970328A1 (en) |
CN (1) | CN114128232B (en) |
Citations (3)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US9244843B1 (en) * | 2012-02-20 | 2016-01-26 | F5 Networks, Inc. | Methods for improving flow cache bandwidth utilization and devices thereof |
CN105282037A (en) * | 2014-05-28 | 2016-01-27 | 凯为公司 | Method and apparatus for table aging in a network switch |
CN108337172A (en) * | 2018-01-30 | 2018-07-27 | 长沙理工大学 | Extensive OpenFlow flow table classification storage architecture and acceleration lookup method |
-
2019
- 2019-11-07 CN CN201980098495.7A patent/CN114128232B/en active Active
- 2019-11-07 EP EP19836024.0A patent/EP3970328A1/en active Pending
Patent Citations (3)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US9244843B1 (en) * | 2012-02-20 | 2016-01-26 | F5 Networks, Inc. | Methods for improving flow cache bandwidth utilization and devices thereof |
CN105282037A (en) * | 2014-05-28 | 2016-01-27 | 凯为公司 | Method and apparatus for table aging in a network switch |
CN108337172A (en) * | 2018-01-30 | 2018-07-27 | 长沙理工大学 | Extensive OpenFlow flow table classification storage architecture and acceleration lookup method |
Non-Patent Citations (3)
Title |
---|
Flow Handling,访问时间：2022.08.10;Haripk;《Github,https://github.com/Juniper/contrail-controller/wiki/Vrouter-Module-Parameters》;20160223;全文 * |
基于两级存储流跟踪管理器的业务识别系统;郭潇宇等;《计算机工程与设计》;20131116(第11期);全文 * |
软件定义网络中可扩展的流表项处理机制;朱向阳等;《计算机技术与发展》;20161122;第26卷(第12期);全文 * |
Also Published As
Publication number | Publication date |
---|---|
EP3970328A1 (en) | 2022-03-23 |
CN114128232A (en) | 2022-03-01 |
Similar Documents
Publication | Publication Date | Title |
---|---|---|
US11960413B2 (en) | Flow table aging optimized for DRAM access | |
Eatherton et al. | Tree bitmap: hardware/software IP lookups with incremental updates | |
US8627448B2 (en) | Selective invalidation of packet filtering results | |
Perino et al. | Caesar: A content router for high-speed forwarding on content names | |
Liu | Efficient mapping of range classifier into ternary-CAM | |
US20200136971A1 (en) | Hash-table lookup with controlled latency | |
Bando et al. | FlashTrie: beyond 100-Gb/s IP route lookup using hash-based prefix-compressed trie | |
Bando et al. | Flashtrie: Hash-based prefix-compressed trie for IP route lookup beyond 100Gbps | |
Zec et al. | DXR: towards a billion routing lookups per second in software | |
Lee et al. | An efficient flow cache algorithm with improved fairness in software-defined data center networks | |
US8798066B2 (en) | Method for IPv6 longest prefix match | |
US20090002864A1 (en) | Memory Controller for Packet Applications | |
CN100385881C (en) | Dynamic load allocating method for network processor based on cache and apparatus thereof | |
US20190075060A1 (en) | Low-redistribution load balancing | |
Geethakumari et al. | Single window stream aggregation using reconfigurable hardware | |
CN114128232B (en) | Method for managing flow table and flow table management system | |
US20210089216A1 (en) | Techniques to control an insertion ratio for a cache | |
Pan et al. | Tracking millions of flows in high speed networks for application identification | |
US11038797B2 (en) | Forwarding table entry access | |
US20080010428A1 (en) | Method and system for updating network flow statistics stored in an external memory | |
US7266635B1 (en) | Address lookup apparatus having memory and content addressable memory | |
US11550715B2 (en) | Virtual splitting of memories | |
Yang et al. | Architecture and performance models for scalable IP lookup engines on FPGA | |
US11252096B2 (en) | Network flow state management for connectionless protocol(s) | |
Lin et al. | DRAM is plenty fast for wirespeed statistics counting |
Legal Events
Date | Code | Title | Description |
---|---|---|---|
PB01 | Publication | ||
PB01 | Publication | ||
SE01 | Entry into force of request for substantive examination | ||
SE01 | Entry into force of request for substantive examination | ||
GR01 | Patent grant | ||
GR01 | Patent grant |