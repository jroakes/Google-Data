EP3090374A1 - Notification of application permissions - Google Patents
Notification of application permissionsInfo
- Publication number
- EP3090374A1 EP3090374A1 EP14877362.5A EP14877362A EP3090374A1 EP 3090374 A1 EP3090374 A1 EP 3090374A1 EP 14877362 A EP14877362 A EP 14877362A EP 3090374 A1 EP3090374 A1 EP 3090374A1
- Authority
- EP
- European Patent Office
- Prior art keywords
- api
- application
- api call
- processors
- author
- Prior art date
- Legal status (The legal status is an assumption and is not a legal conclusion. Google has not performed a legal analysis and makes no representation as to the accuracy of the status listed.)
- Granted
Links
- 238000000034 method Methods 0.000 claims abstract description 101
- 230000035945 sensitivity Effects 0.000 claims abstract description 62
- 230000004044 response Effects 0.000 claims description 6
- 230000003213 activating effect Effects 0.000 claims description 3
- 230000000694 effects Effects 0.000 abstract description 8
- 230000008569 process Effects 0.000 description 46
- 238000005516 engineering process Methods 0.000 description 32
- 238000009434 installation Methods 0.000 description 21
- 238000012545 processing Methods 0.000 description 15
- 238000004891 communication Methods 0.000 description 14
- 230000007246 mechanism Effects 0.000 description 10
- 238000004590 computer program Methods 0.000 description 7
- 239000010410 layer Substances 0.000 description 4
- 238000012552 review Methods 0.000 description 4
- 238000013475 authorization Methods 0.000 description 3
- 238000013461 design Methods 0.000 description 3
- 238000010586 diagram Methods 0.000 description 3
- 230000006870 function Effects 0.000 description 3
- 230000003993 interaction Effects 0.000 description 3
- 230000004048 modification Effects 0.000 description 3
- 238000012986 modification Methods 0.000 description 3
- 230000003287 optical effect Effects 0.000 description 3
- 238000012546 transfer Methods 0.000 description 3
- 230000000007 visual effect Effects 0.000 description 3
- 238000013459 approach Methods 0.000 description 2
- 235000014510 cooky Nutrition 0.000 description 2
- 239000004973 liquid crystal related substance Substances 0.000 description 2
- 229920001690 polydopamine Polymers 0.000 description 2
- 238000000926 separation method Methods 0.000 description 2
- 230000001960 triggered effect Effects 0.000 description 2
- 230000009471 action Effects 0.000 description 1
- 230000004913 activation Effects 0.000 description 1
- 238000004458 analytical method Methods 0.000 description 1
- 238000003491 array Methods 0.000 description 1
- 230000008901 benefit Effects 0.000 description 1
- 230000005540 biological transmission Effects 0.000 description 1
- 230000001413 cellular effect Effects 0.000 description 1
- 230000008859 change Effects 0.000 description 1
- 239000003086 colorant Substances 0.000 description 1
- 239000002355 dual-layer Substances 0.000 description 1
- 230000002452 interceptive effect Effects 0.000 description 1
- 238000007726 management method Methods 0.000 description 1
- 230000007935 neutral effect Effects 0.000 description 1
- 230000002093 peripheral effect Effects 0.000 description 1
- 238000011112 process operation Methods 0.000 description 1
- 238000010079 rubber tapping Methods 0.000 description 1
- 230000001953 sensory effect Effects 0.000 description 1
- 239000007787 solid Substances 0.000 description 1
- 230000003068 static effect Effects 0.000 description 1
- 230000001360 synchronised effect Effects 0.000 description 1
Classifications
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F21/00—Security arrangements for protecting computers, components thereof, programs or data against unauthorised activity
- G06F21/50—Monitoring users, programs or devices to maintain the integrity of platforms, e.g. of processors, firmware or operating systems
- G06F21/52—Monitoring users, programs or devices to maintain the integrity of platforms, e.g. of processors, firmware or operating systems during program execution, e.g. stack integrity ; Preventing unwanted data erasure; Buffer overflow
- G06F21/53—Monitoring users, programs or devices to maintain the integrity of platforms, e.g. of processors, firmware or operating systems during program execution, e.g. stack integrity ; Preventing unwanted data erasure; Buffer overflow by executing in a restricted environment, e.g. sandbox or secure virtual machine
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F21/00—Security arrangements for protecting computers, components thereof, programs or data against unauthorised activity
- G06F21/60—Protecting data
- G06F21/62—Protecting access to data via a platform, e.g. using keys or access control rules
- G06F21/6209—Protecting access to data via a platform, e.g. using keys or access control rules to a single file or object, e.g. in a secure envelope, encrypted and accessed using a key, or with access control rules appended to the object itself
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F21/00—Security arrangements for protecting computers, components thereof, programs or data against unauthorised activity
- G06F21/50—Monitoring users, programs or devices to maintain the integrity of platforms, e.g. of processors, firmware or operating systems
- G06F21/55—Detecting local intrusion or implementing counter-measures
- G06F21/554—Detecting local intrusion or implementing counter-measures involving event detection and direct action
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F21/00—Security arrangements for protecting computers, components thereof, programs or data against unauthorised activity
- G06F21/60—Protecting data
- G06F21/62—Protecting access to data via a platform, e.g. using keys or access control rules
- G06F21/6218—Protecting access to data via a platform, e.g. using keys or access control rules to a system of files or objects, e.g. local or distributed file system or database
- G06F21/6281—Protecting access to data via a platform, e.g. using keys or access control rules to a system of files or objects, e.g. local or distributed file system or database at program execution time, where the protection is within the operating system
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F2221/00—Indexing scheme relating to security arrangements for protecting computers, components thereof, programs or data against unauthorised activity
- G06F2221/21—Indexing scheme relating to G06F21/00 and subgroups addressing additional information or applications relating to security arrangements for protecting computers, components thereof, programs or data against unauthorised activity
- G06F2221/2101—Auditing as a secondary aspect
Definitions
- Security models for applications typically involve showing a user some kind of a dialog at the time of installation of the application. The user may be provided an opportunity to review various access permissions and accept them. After such user acceptance, the installed application generally has access to a set of application programming interfaces (APIs) on a going forward basis. Certain APIs, to which the installed application has access, may relate to the user's sensitive data or information.
- APIs application programming interfaces
- the present disclosure relates generally application permissions and data security, and more particularly to techniques related to granting application permissions and providing notifications of API activity.
- An example method may comprise processing a request to install an application that requires access to one or more application programming interfaces (APIs) by the application.
- the method may further comprise determining a sensitivity level of each of the one or more required APIs.
- the method may comprise when the determined sensitivity level of at least one API of the one or more required APIs is associated with a restricted API classification, requiring that code of the application be delivered using a secure mechanism.
- APIs application programming interfaces
- Another example computer-implemented method may comprise receiving a first application programming interface (API) call by an installed application.
- the method may further comprise determining a sensitivity level of the received first API call.
- the method may further comprise when the determined sensitivity level of the received first API call is associated with a restricted API classification, determining whether an author of the installed application is an authorized author.
- the method may comprise when the author of the installed application is determined to be an authorized author, allowing the received first API call access to its associated API.
- Another example computer-implemented method may comprise processing a request to install an application that requires one or more application programming interface (API) calls by the application.
- the method may further comprise determining an authoring entity of the application.
- the method may further comprise determining whether the authoring entity is certified by one or more trusted entities.
- the method may comprise allowing an installation of the application when the authoring entity is certified by at least one trusted entity of the one or more trusted entities.
- Another example computer-implemented method may comprise detecting an API call by an application, the API call for accessing data associated with a computing device.
- the method may further comprise determining a sensitivity level of the API call based on the associated data.
- the method may comprise providing an indication of the API call based on the determined sensitivity level.
- the disclosed subject matter further relates to systems for granting application permissions during installation, allowing API calls based on authorization of an author of an application, and providing notifications of API activity.
- An example system may comprise one or more processors, and a memory including instructions that, when executed by the one or more processors, cause the one or more processors to perform operations.
- the one or more processors of the system may be configured to process a request to install an application that requires access to one or more application programming interfaces (APIs) by the application.
- APIs application programming interfaces
- the one or more processors of the system may be further configured to determine a sensitivity level of each of the one or more required APIs.
- the one or more processors of the system may be configured to when the determined sensitivity level of at least one API of the one or more required APIs is associated with a restricted API classification, require that code of the application be delivered using a secure mechanism.
- Another example system may comprise one or more processors configured to receive a first application programming interface (API) call by an installed application.
- the one or more processors of the system may be further configured to determine a sensitivity level of the received first API call.
- the one or more processors of the system may be further configured to when the determined sensitivity level of the received first API call is associated with a restricted API classification, determine whether an author of the installed application is an authorized author.
- the one or more processors of the system may be configured to when the author of the installed application is determined to be an authorized author, allowing the received first API call access to its associated API.
- Another example system may comprise one or more processors configured to process a request to install an application that requires one or more application programming interface (API) calls by the application.
- the one or more processors of the system may be further configured to determine an authoring entity of the application.
- the one or more processors of the system may be further configured to determine whether the authoring entity is certified by one or more trusted entities.
- the one or more processors of the system may be configured to allow an installation of the application when the authoring entity is certified by at least one trusted entity of the one or more trusted entities.
- Another example system may comprise one or more processors configured to detect an API call by an application, the API call for accessing data associated with a computing device.
- the one or more processors of the system may be further configured to determine a sensitivity level of the API call based on the associated data.
- the one or more processors of the system may be configured to provide an indication of the API call based on the determined sensitivity level.
- the disclosed subject matter also relates to example machine-readable media comprising instructions stored therein, which when executed by a system, cause the system to perform operations for granting application permissions during installation, allowing API calls based on authorization of an author of an application, and providing notifications of API activity.
- An example machine-readable medium may comprise instructions for processing a request to install an application that requires access to one or more application programming interfaces (APIs) by the application.
- the machine-readable medium may further comprise instructions for determining a sensitivity level of each of the one or more required APIs.
- the machine-readable medium may comprise instructions for requiring, when the determined sensitivity level of at least one API of the one or more required APIs is associated with a restricted API classification, that code of the application be delivered using a secure mechanism.
- Another example machine-readable medium may comprise instructions for receiving a first application programming interface (API) call by an installed application.
- the machine- readable medium may comprise instructions for determining a sensitivity level of the received first API call.
- the machine-readable medium may comprise instructions for determining, when the determined sensitivity level of the received first API call is associated with a restricted API classification, whether an author of the installed application is an authorized author.
- the machine-readable medium may comprise instructions for allowing, when the author of the installed application is determined to be an authorized author, the received first API call access to its associated API.
- Another example machine-readable medium may comprise instructions for processing a request to install an application that requires one or more application programming interface (API) calls by the application.
- the machine-readable medium may comprise instructions for determining an authoring entity of the application.
- the machine-readable medium may comprise instructions for determining whether the authoring entity is certified by one or more trusted entities.
- the machine-readable medium may comprise instructions for allowing an installation of the application when the authoring entity is certified by at least one trusted entity of the one or more trusted entities.
- Another example machine-readable medium may comprise instructions for detecting an API call by an application, the API call for accessing data associated with a computing device.
- the machine-readable medium may comprise instructions for determining a sensitivity level of the API call based on the associated data.
- the machine-readable medium may comprise instructions for providing an indication of the API call based on the determined sensitivity level.
- FIG. 1 illustrates an example client-server network environment which provides for application permissions in accordance with various aspects of the subject technology.
- FIG. 2 illustrates examples of authorship trust techniques for granting application permissions in accordance with various aspects of the subject technology.
- FIG. 3A and 3B illustrate examples of API usage notification techniques in accordance with various aspects of the subject technology.
- FIG. 4 illustrates an example of a process for installing an application that requires one or more APIs in accordance with various aspects of the subject technology.
- FIG. 5 illustrates an example of a process for restricting API calls by an installed application in accordance with various aspects of the subject technology.
- FIG. 6 illustrates an example of a process related to a request to install an application that requires one or more API calls in accordance with various aspects of the subject technology.
- FIG. 7 conceptually illustrates an electronic system with which some aspects of the subject technology are implemented.
- the present disclosure describes techniques for managing application permissions and indicating API call activity. For example, many users have relatively low awareness regarding the application permissions to which they are agreeing at the time of downloading and installing an application. Users likewise have little visibility to these application permissions and any problems that may be caused by the installed application, particularly when a large number of applications are downloaded to a device, for example.
- a mobile device may receive a request to install (or send a request to download) an application that requires access to one or more APIs.
- the sensitivity level of the API associated with the application may be determined, and when the sensitivity level of the API call is determined to be of a sensitive or restricted nature, the mobile device may require that the code of the application be delivered using a secure mechanism that identifies the author.
- delivery using secure sockets layer (SSL) protocol and SSL certificate may be required.
- SSL protocol technology may be used as the secure mechanism to enable two systems to communicate via encrypted data.
- the receiving system has the ability to certify that the received data was indeed transmitted from the source that is claiming to deliver it.
- the mobile device may receive an API call from the application. The mobile device may then determine whether the received API call is a sensitive or restricted API call. If it is determined that the received API call is a sensitive or restricted API call, then the received API call may only be allowed if the author of the installed application is an authorized author.
- Whether the author of the installed application is an authorized author may be determined by determining whether a certificate associated with delivery of code during the installation of the application is owned by a trusted entity or has been validated by a trusted entity.
- a trusted entity may be a corporate entity or an individual user in accordance with various examples and implementations.
- a trusted entity approach to granting application permissions may be further employed, for example, when a device processes a request to install an application that requires one or more API calls. For example, a user of the device may wish to initiate a download of an application from a remote server, but may not be knowledgeable of who the author of the application is or the author's credentials, for example. Accordingly, an authoring entity of the application may be determined, and if the authoring entity is certified by one or more trusted entities, the device may allow the download and installation of the application requires one or more API calls.
- a user of a device in accordance with the subject technology can indicate trust of a trusted entity. Accordingly, each of a plurality of trusted entities can serve to identify a plurality of authors that are permitted provide applications to users.
- a device may provide a user with a real-time indication that an API call or other information access request is taking place.
- a user of the device may be running an application, for instance, a racing game, when a sensitive or restricted API call that is not expected by the user is triggered by the application.
- the racing game application may invoke an API call associated with the access of the user's financial data stored on the device.
- the device may provide an indication that the sensitive or restricted API call has just occurred. For example, the device may activate an API access indicator light position somewhere on the phone housing or an API access indicator icon positioned on a display screen of the device. For example, the indicator light and/or indicator icon may illuminate, flash, blink, or pulse different colors (e.g., red, yellow, or green) for different durations based on the level of sensitivity associated with the API call.
- an API access indicator light position somewhere on the phone housing or an API access indicator icon positioned on a display screen of the device.
- the indicator light and/or indicator icon may illuminate, flash, blink, or pulse different colors (e.g., red, yellow, or green) for different durations based on the level of sensitivity associated with the API call.
- an API access log can be provided as a notification log viewable on the display screen of the device.
- the API access log may be dedicated to providing only API access notifications in some implementations.
- the API access log can include entries providing information such as application name, level of sensitivity, details, time, etc., related to API access events that have occurred on the device.
- the API access log can be launched from an API access indicator icon positioned on a display screen of the device.
- real-time indication of API access may be communicated along with notification details regarding the level of sensitivity of the detected API call such that a user of a device in accordance with the subject technology can readily correlate a sensitive or restricted API to an application being currently executed by the device.
- FIG. 1 illustrates an example client-server network environment which may support application permissions and be used to implement various techniques for granting or denying permissions.
- Network environment 100 may include a number of electronic devices 102, 103, 104, 106 communicably connected to one or more servers 1 10, such as by network 108.
- electronic devices 102, 103, 104, 106 may be communicably connected to one another, such as by network 108, but not communicably connected to one or more servers 1 10.
- one or more server 1 10 may host one or more systems or services including but not limited to systems for downloading and installing based on application permissions techniques.
- each of one or more servers 1 10 may be a single computing device such as a computer server.
- one or more servers 1 10 may represent more than one computing device working together to perform the actions of a server computer (e.g., a cloud of computers or a distributed system).
- each of one or more servers 1 10 may be coupled with various databases, storage services, or other computing devices. Each of one or more servers 1 10 and the coupled databases, storage services, or other computing devices may be collocated, or may be disparately located.
- each of one or more servers 1 10 may include one or more processing devices 1 12 and one or more data stores 1 14.
- One or more processing devices 1 12 may execute instructions stored in one or more data stores 1 14.
- One or more data stores 1 14 may store the computer instructions on non-transitory computer-readable medium.
- Network 108 may be a public communication network, a private communications network, or a combination of both.
- network 108 can include any one or more of a personal area network (PAN), a local area network (LAN), a campus area network (CAN), a metropolitan area network (MAN), a wide area network (WAN), a broadband network (BBN), the Internet, and the like.
- PAN personal area network
- LAN local area network
- CAN campus area network
- MAN metropolitan area network
- WAN wide area network
- BBN broadband network
- network 108 can include, but is not limited to, any one or more of the following network topologies, including a bus network, a star network, a ring network, a mesh network, a star-bus network, tree or hierarchical network, and the like.
- Network 108 may be a public communication network (including, but not limited to, the Internet, cellular data network, cable data network, or dialup modems over a public switched telephone network) or a private communications network (such as, for example, private local area network ("LAN”) or leased-line network).
- Network 108 may also include, but is not limited to, any one or more of the following network topologies, including a bus network, a star network, a ring network, a mesh network, a star-bus network, a tree or hierarchical network, and the like.
- electronic devices 102, 103, 104 and 106 can be computing devices such as laptop or desktop computers, smartphones, personal digital assistants ("PDAs"), portable media players, tablet computers, televisions or other displays with one or more processors coupled thereto or embedded therein, or other appropriate computing devices.
- PDAs personal digital assistants
- electronic device 102 is depicted as a desktop computer
- electronic devices 103, 104 are depicted as smartphones
- electronic device 106 is depicted as a tablet device.
- Communications between electronic devices 102, 103, 104, 106, and server 1 10 may be facilitated utilizing various file sharing techniques and data transmission protocols such as, but not limited to, Hypertext Transfer Protocol (HTTP), Extensible Messaging and Presence Protocol (XMPP), File Transfer Protocol (FTP), Secure Shell (SSH), Server Message Block (SMB), etc., for some or all communications between electronic devices 102, 103, 104, 106 and server 1 10.
- HTTP Hypertext Transfer Protocol
- XMPP Extensible Messaging and Presence Protocol
- FTP File Transfer Protocol
- SSH Secure Shell
- SMB Server Message Block
- electronic devices 102, 103, 104, 106 may be in communication with one another without communicating with server 1 10.
- each electronic device 102, 103, 104, 106 may download applications from server 1 10 or another of electronic devices 102, 103, 104, 106, in response to a request to install an application.
- the request to install an application may be received from another device on network 108 (or connected thereto), or may be initiated by the electronic device 102, 103, 104, 106, on which the application will be installed.
- server 1 10 may provide and process operations for hosting a website that may deliver an application to electronic devices 102, 103, 104, 106.
- Electronic devices 102, 103, 104, 106 may each establish a communications with server 1 10, for purposes of downloading applications from the hosted website.
- an author or authoring entity of an application can be the individual or entity that developed the application or distributes the application. In some instances, the author or authoring entity may be both the developer and distributer of the application. In other instances, the author or authoring entity of the application may be an entity that provides for or facilitates the distribution of the application.
- authorship attribution is based on whether the author of the application has an SSL certificate that has been used to deliver the binary code of the application to electronic device 104.
- SSL protocol technology may be used to enable two systems to communicate via encrypted data.
- the receiving system e.g., the permissions system of electronic device 104 has the ability to certify that the received data was indeed transmitted from the source that is claiming to deliver it.
- Similar techniques may be utilized, for example, when a user's device attempts to retrieve web email from a remote server. If the user's device is connected to an non-Internet connected network (e.g., a wireless network at a hotel that block Internet access), the web browser of the user's device may provide an indication that the website to which the user is trying to connect does not look like the website acknowledging the communications (e.g., the user's traffic is being intercepted by the hotel server because the user has not yet paid for wireless access).
- an non-Internet connected network e.g., a wireless network at a hotel that block Internet access
- the web browser of the user's device may provide an indication that the website to which the user is trying to connect does not look like the website acknowledging the communications (e.g., the user's traffic is being intercepted by the hotel server because the user has not yet paid for wireless access).
- such security mechanism and similar variations and implementations can be used to validate that the application code being executed by electronic device 104 came from the server identified as the source of the application code. If the delivered code is not properly signed by the certificate and if the certificate itself is not trusted (e.g., the certificate has not been validated by some other third party that is trusted by the user), then the application will not be allowed make the sensitive or restricted API call.
- the permissions system of electronic device 104 will allow the application to access the sensitive or restricted APIs based on the identity of the authorized entity that delivered the code.
- a source e.g., a web service provider or service provider
- the permissions system of electronic device 104 can immediately allow that installed application to access sensitive or restricted APIs without having to go through an additional step of the user validating that he or she trusts that particular application.
- a user of electronic device 104 can therefore trust sources of applications and need not trust each individual application.
- FIG. 2 illustrates examples of trust techniques for granting permissions.
- Applications 262a-c, 264a-c, and 266 may be available for installation on mobile device 204. Each of applications 262a-c, 264a-c, and 266 are authored by a different authoring entity in some examples.
- Mobile device 204 is operable to trust various entities (e.g., a trusted entity) such that applications by authoring entities that are trusted or certified by a trusted entity may be download directly to the mobile device 204 without any user interface interrogatory or additional permissions request by a server (e.g., server 1 10).
- a server e.g., server 1 10
- mobile device 204 may include trusted web service provider 252 as a trusted entity and as a trusted connection 212 for facilitating access to and/or downloading applications. However, mobile device 204 has not included service provider 254 as a trusted entity and has an untrusted connection 214 with respect to service provider 254.
- service provider 254 may be a trusted provided to other devices and could be a trusted entity of mobile device 204 should mobile device 204 elect to include service provider 254 as trusted at some point, for example.
- each authoring entity that authored applications 262a-c, 264a-c, 266 could be selected and designated as a trusted entity by mobile device 204.
- mobile device has not designated any authoring entity that authored applications 262a-c, 264a-c, 266 as such in the following examples.
- Trusted web service provider 252 expressly trusts and has certified each of the authoring entities of applications 262a-c.
- mobile device 204 may process a request to install application 262a that requires access to one or more API calls.
- Mobile device 204 determines the authoring entity of application 262a, and that the authoring entity of application 262a is certified by trusted web service provider 252.
- mobile device 204 allows application to be downloaded (e.g., over network 108) and installed without any permissions dialog directed to a user of the mobile device 204 regardless of whether application 262a requires API calls to sensitive or restricted APIs.
- mobile device 204 may similarly process a request to install application 262b and automatically install application 262b because application 262b is likewise trusted and certified by trusted web service provider 252. If, however, trusted web service provider 252 revokes its trust and certification of 262b, and if application 262b has already been installed by mobile device 204, then any API call by application 262b will likewise be revoked by the mobile device 204. For example, trusted web service provider 252 may send a notification to devices for which it has a trusted connection 212 and/or revoke an SSL certificate issued to the authoring entity of application 262b.
- service provider 254 expressly trusts and has certified each of the authoring entities of applications 264a-c.
- any trust and certification of authoring entities by service provider 254 is of no consequence to mobile device 204 with respect to automatically downloading and installing an application on mobile device 204.
- the trust and certification of the authoring entities of applications 264a-c may have some relevancy in certain instances and described below.
- mobile device 204 may process a request to install application 264c that requires access to one or more API calls.
- Mobile device 204 determines the authoring entity of application 264c, and that the authoring entity of application 264c is not trusted or certified by any trusted entity of the mobile device 204.
- mobile device 204 denies the installation of application 264c that requires one or more API calls, at least initially with regard to trusted automatic download as installation techniques.
- mobile device 204 may receive a request to install application 264c (e.g., a map and driving directions program) that identifies the one or more API calls of application 264c and that identifies multiple entities that certify the authoring entity of application 264c.
- application 264c e.g., a map and driving directions program
- device 204 may provide a dialog in a user interface indicating that the one or more API calls of application relate to location information of the mobile device 204 and that service provider 254 (e.g., a well-known service provider) and fifteen other entities (e.g., several of which are deemed highly trustworthy) have certified the authoring entity of application 264c. If a user of device 204 is agreeable to allow such permissions based on the information provided in the dialog, an acknowledgement confirming the received request may be processed and application 264c can be installed on the mobile device 204.
- service provider 254 e.g., a well-known service provider
- fifteen other entities e.g., several of
- mobile device 204 may receive a request to install application 266 (e.g., a flashlight program that uses a mobile phone's existing camera flash) that identifies the one or more API calls of application 266 and that identifies several entities that certify the authoring entity of application 266.
- application 266 e.g., a flashlight program that uses a mobile phone's existing camera flash
- device 204 may provide a dialog in a user interface indicating that the one or more API calls of application relate to access of email and browser history data stored on the mobile device 204 and that three entities (e.g., none of which are known to a user of the mobile device 204) have certified the authoring entity of application 264c.
- the user of device 204 may not be agreeable to allow such permissions and deny the received request.
- FIG. 3A is an example of a mobile device 304 employing API usage notification techniques.
- mobile device 304 may provide the user with a real-time indication that an API call or other information access request is taking place.
- the API call can be associated with an API and accessed data on the mobile device 304 or with an API on the mobile device 304 and remotely accessed data, for example.
- a user of the mobile device 304 may be running an application 335 (e.g., playing a racing game). In some examples, access permissions for the application 335 may have been previously granted and acknowledged in some manner by the user.
- Certain API calls may be expected during the execution of the application, for example, access to a hard drive to retrieve code associated with the continued execution of the application.
- a sensitive or restricted API call that is not expected may be triggered by application 335 while the application 335 is running on the mobile device 304.
- application 335 may invoke an API call associated with the access of financial data on the mobile device 304.
- mobile device 304 may provide an indication that the sensitive or restricted API call has just occurred.
- the indication that an API call has been invoked can be provided by a hardwired indicator light 322 (e.g., an LED, lamp, or the like) on mobile device 304.
- a hardwired indicator light 322 e.g., an LED, lamp, or the like
- such a hardwired indicator implementation may be virtually impervious to circumvention or tampering attempts by a malicious software application.
- a malicious software application would not be able to cover or overlay an image on a display screen indication of an sensitive or restricted API call.
- an indication that an API call is being invoked may be provided by an indicator icon 324 on a portion of the display screen of the mobile device 304.
- Controls and modules related to both indicator light implementation may be included in the device as separate operating system subsystems to further minimize attempts by malicious software applications to circumvent sensitive or restricted API notification techniques.
- indicator light 322 and/or indicator icon 324 may illuminate, flash, blink, pulse or the like in various color and durations according to how sensitive the API being accessed is. For example, local storage access related to an application for which application data and code are isolated (e.g., sandboxed), could be shown as a green indicator. However, a more sensitive assess, for example, sharing cookies or other user-related information between applications could be shown as yellow indicator (e.g., certain advertisement systems may perform such task in order to show a user advertisement targeted based on a user's browsing history rather than current context).
- the indicator light 322 and/or indicator icon 324 could be shown as a red indicator for highly sensitive or restricted access, for example, highly personal information such as, but not limited to, a user's contact list, location, documents, and email.
- the duration of the indication provided by of the indicator light 322 and/or indicator icon 324 may differ for various sensitivity levels associated with API calls being invoked.
- a green indicator may be a short blink or pulse
- a yellow indicator could be slightly longer blink or pulse (e.g., 500 millisecond)
- a red indicator could be long flash (e.g., 1 second) so as to encourage the user of the mobile device 304 to notice when highly sensitive or restricted API calls are being invoked.
- the indication that an API call has been invoked may include a sound (e.g., a chirp, beep, or alarm) or vibration of the mobile device 304.
- a sound e.g., a chirp, beep, or alarm
- different sounds and durations of the sounds may be utilized depending on the sensitivity of the API call.
- the sounds used for indicating that an API call has been invoked can be unique sounds that are not selectable for use in other system settings of the mobile device 304.
- an entry related to an API call invoked may be provided to an API access log or similar information access log.
- the API access log can be accessed by as user of the mobile device 304 by tapping on the indicator icon 324.
- the user of the mobile device 304 can be alerted in real-time to the potential threat, investigate the details associated with the sensitive or restricted API access, and take any corrective measures, if necessary.
- FIG. 3B illustrates an example of an API access log 350.
- API access log 350 can be a notification log viewable on the display screen of the mobile device 304 that provides only API access notifications.
- API access log 350 can include a notification header bar 352 that indicates columns for application name, level of sensitivity, details, time, etc., related to API access events.
- API access log entries 355a-g identify the particulars of the API access events and may be sorted in various manners, for example, based on time of occurrence.
- a user of mobile device 304 may inspect the API access log 350, for example, when alerted to an unusual or unexpected API indication by indicator light 322 and/or indicator icon 324. However, the user may review the API access log entries 355a-g at a time more convenient for the user. It is important to note that a high level (e.g., red indictor) API access log entry does not necessarily indicate that any improper API access occurred. Rather, the API notification techniques in accordance with certain aspects may simply alert and inform the user that a specific API call or event is occurring. For example, API access log entry 355d for an API call related to personal information associated with a finance application and API access log entry 355g for an API call related to location information associated with a map application may be entirely expected by the user.
- a high level (e.g., red indictor) API access log entry does not necessarily indicate that any improper API access occurred. Rather, the API notification techniques in accordance with certain aspects may simply alert and inform the user that a specific API call or event is occurring. For example
- API access log entries 355b, 355e, 355f may be expected by the user.
- other high and medium access level API calls may be cause for concern.
- a user would likely inquire into the details of API access log entry 355a for an API call related to personal financial information associated with a racing game application.
- a user may be alerted by indicator light 322 and/or indicator icon 324 and inquire into the details of API access log entry 355c for an API call related to installing a new icon on the user's home screen associated with an operating system library application.
- an operating system library application For example, certain operating system libraries may install new icons on the user's home screen in order to drive installs of applications that the user hasn't discovered yet. The user may not understand why or how the new application icon for downloading appears on the home screen, or which application or applications are responsibly for such installation activity.
- the user of mobile device 304 could access the API access log 350 and review the details of API access log entry 355c. The user could then make a decision whether the API call and resulting event were acceptable to the user or remove the application making the API call or remove the application's permission to invoke that specific API call, if possible.
- real-time indication of API access and related information access may be communicated along with a degree of sensitivity of the detected API access and specific details such that a user of the mobile device 304 can readily correlate sensitive or restricted API calls to an application being currently executed by the mobile device 304.
- the access levels or classifications associated with the sensitive or restricted API calls are fixed whereby a user cannot modify the sensitivity level given to a particular API or API call.
- a malicious software application cannot attempt to change a high- level access (e.g., red indicator) to a low-level access (e.g., green indicator) classification via settings parameters of user configuration source code, for example.
- an API usage notification process related to the API usage notification techniques described above is further provided.
- the example API usage notification process may be used in conjunction with other processes and aspects of the present disclosure. Although aspects are described with relation to the examples provided in FIGS. 1 -3B, the API usage notification process is not limited to such.
- an API call by an application may be detected by a computing device (e.g., electronic device 104, mobile device 204, or mobile device 304).
- the detected API call may be related to accessing data associated with the computing device.
- a sensitivity level of the API call may be determined based on the associated data.
- the sensitivity level of the API call may be determined as high, medium, or low.
- An indication of the API call based on the determined sensitivity level may be provided by the API usage notification process.
- the API usage notification process a hardwired indicator (e.g., indicator light 322) on the computing device and/or an indicator icon (e.g., indicator icon 324) on a display screen of the computing device may be activated to provide an indication of the API call.
- the indicator icon can be launched such that an API access log comprising one or more API access entries associated with one or more corresponding API calls is provided, for instance, on the display screen of the computing device.
- FIG. 4 illustrates a flow diagram of an example process related to the installation of an application containing one or more API calls. It is to be understood that the operations in process 400 may be used in conjunction with other processes and aspects of the present disclosure. Although aspects of process 400 are described with relation to the examples provided in FIGS. 1 -3B, process 400 is not limited to such.
- a request (e.g., by electronic device 104, a website hosted by server 1 10, or another electronic device 102, 103, 105 having connectivity to electronic device 104) may be processed to install an application that requires access to one or more APIs.
- the application may include any executable program code such as, but not limited to, code written with various general purpose or interpreted programming languages (e.g., Java, C++, JavaScript, Visual Basic, etc.).
- the sensitivity level of the one or more APIs may be determined.
- a device e.g., electronic device 104, mobile device 204, or mobile device 304 may determine the sensitivity level of each of the one or more APIs for which access is required by the application to be installed. It may be determined that all of the APIs required by the application requesting to be installed on the device may be associated with harmless APIs, some of the required APIs may be associated with harmless APIs and some may be associated with restricted APIs, or all of the required APIs may be associated with restricted APIs.
- restricted (or sensitive) API classifications may include APIs that share a user's contact list, the user's location, the user's email, the user's cookies, and/or the user's documents or files stored on the device or accessible by the device.
- Other examples involving restricted (or sensitive) API classifications may include APIs associated with control of a user's entire screen of the device (e.g., full screen mode), accessing a microphone on the device, accessing a speaker on the device, accessing a camera on the device, acquiring information as to whether or not a face can be detected by either a forward facing or rearward facing camera on the device, acquiring an IP address assigned to the device, acquiring the user's email address, acquiring the user's avatar (e.g., a photograph or likeness of the user), acquiring the user's browsing or web search history, acquiring a configuration of the user's home screen on the device (e.g., information pertaining to what icons exist and where the icons are positioned on the home screen), acquiring a list of applications that the user has installed on the device, acquiring usage frequency and history of applications that the user has installed on the device, acquiring an amount of battery life remaining on the device, acquiring information regarding detectable Bluetooth beacons of other user devices or WiFi beacon
- personally identifying information may potentially be determined by an application having permissions to APIs associated with various sensors on the device, particularly when such acquired sensor information is taken in combination with other information regarding the user of the device.
- the determined sensitivity level of at least one API of the one or more required APIs is associated with a restricted API classification, requiring that code of the application containing the one or more API calls to be delivered by the website using a secure mechanism.
- secure sockets layer (SSL) protocol may be included in the secure mechanism related to the delivery of the code.
- SSL secure sockets layer
- the application that requires the one or more API calls may be installed on the device (e.g., by downloaded from server 1 10 hosting the website).
- the manner in which the application is installed on the device can be based on the determined sensitivity level of each of the one or more required APIs.
- the code of the application containing the one or more APIs may be delivered using a secured mechanism as may be required when the determined sensitivity level of at least one API of the one or more required APIs is associated with a restricted API classification.
- the code of the application containing the one or more required APIs may be delivered in an unsecured manner when all of the required APIs contained in the application are classified as low or harmless.
- process 500 for determining whether to allow an API call is illustrated. It is to be understood that the operations in process 500 may be used in conjunction with other processes and aspects of the present disclosure. Although aspects of process 500 are described with relation to examples provided in of FIGS. 1 -3B, process 500 is not limited to such.
- a device may receive a first API call by an installed application.
- an API calling module e.g., an application program or a device driver
- an API may specify one or more functions, data structures, protocols, formats and/or features of an API implementing module (e.g., an operating system or an application program) residing on the device.
- the application making the first API call may have been installed using the operations described in process 400.
- the application may have been installed on the device by other manners (e.g., installed by flash drive, CD-ROM, etc., or installed by activating a resident code on electronic device 104 such as a preinstalled application) or installed without process 400.
- the device may process the received first API call by the installed application.
- a sensitivity level of the received first API call may be determined by the device. For example, a permissions system of the device may determine that the first API call shares the location of the device with a remote application (e.g., an application across network 108 residing on server 1 10). In some implementations, sharing the location of the device is deemed to be a restricted API classification.
- the permissions system of device may allow the API call.
- the permissions system of the device may allow any harmless API call regardless of whether an author of the installed application is determined to be an authorized author.
- permissions system of the device may determine whether an author of the installed application is determined to be an authorized author even when the determined sensitivity level of an API call is not associated with the restricted API classification (e.g., requiring that an author be an authorized user for all installed applications that require access to one or more APIs).
- the permissions system of the device may determine whether an author of the installed application is determined to be an authorized author (decision block 508). For example, whether the author of the installed application is determined to be an authorized author may be determined by determining whether a certificate associated with a delivery of code during the installation of the application is owned by a trusted entity or has been validated by a trusted entity.
- a trusted entity may be a corporate entity (e.g., a web search provider, a software developer, etc. associated with server 1 10) or an individual user (e.g., a user associated with electronic devices 102, 103) in various examples and implementations of process 500.
- the certificate associated with the delivery of code may be a secure sockets layer (SSL) certificate.
- SSL secure sockets layer
- authorizing an author of an application can be based on having an SSL certificate that was used to deliver binary code to the device during the process of installing the application. It is to be appreciated that an advantage of utilizing SSL techniques is that such techniques are not seen to impose constraints on websites delivering applications in such a manner as SSL protocol and related delivery mechanisms may be used in some situations involving brokerage transactions, for example.
- the received first API call that has been determined to be associated with a restricted API may be allowed (block 506) by the permissions system of the device. However, when the author of the application is not determined to be an authorized author, the received first API call may be disallowed or denied access to its associated API (block 510).
- a second API call by the installed application may be received. Accordingly, when the author of the installed application is determined to be an authorized author, the received second API call may be allowed access to its associated API (block 5 14). Similarly, once the permissions system of the device has determined that the author of the application is an authorized author, any subsequent API call by that application may be automatically allowed by the permissions system.
- FIG. 6 is a flow diagram illustrating an example process 600 for determining whether to allow an application that requires one or more API calls to be installed on a device based on certification of the author of the application by one or more trusted entities. It is to be understood that the operations in process 600 may be used in conjunction with other processes and aspects of the present disclosure. Although process 600 is described with relation to system of FIG. 1 -3B, process 600 is not limited to such.
- a device may process a request to install an application that requires one or more API calls by the application to be installed.
- a user of the device may wish to initiate a download of an application (e.g., application 262a) from a remote server.
- an application e.g., application 262a
- the user may not be knowledgeable of who the author of the application is or the author's credentials, for example.
- an authoring entity of the application may be determined (block 604).
- the device may determine an authoring entity of the application by receiving an indication from the remote server.
- the device may also determine an authoring entity of the application by receiving an indication from a trusted entity (e.g., trusted web search provider entity 252).
- a trusted entity e.g., trusted web search provider entity 252
- the device may determine whether the authoring entity is certified by one or more trusted entities (e.g., trusted web search provider 252).
- the one or more trusted entities are deemed trusted by the user of the device.
- the device may include a list of trusted entities including, but not limited to, web search providers, service providers, software developers, and other entities that may facilitate the distribution of applications.
- the determination whether the authoring entity is determined to be certified by one or more trusted entities may be based on a security certificate received by the one or more trusted entities associated with the delivery of the code of the application by the authoring entity.
- the security certificate is a secure sockets layer (SSL) certificate.
- SSL secure sockets layer
- the trust provided by the one or more trusted entities in example certification processes may be time barred in accordance with certain aspects.
- determining whether the authoring entity is certified by one or more trusted entities may include determining whether the certification of the authoring entity by the one or more trusted entity has exceeded an expiry period.
- the expiry period of the certification is one year; however, in other implementations, a thirty-day expiry period of the certification may be used, for example.
- the device may receive a trust level rating associated with a first trusted entity of the one or more trusted entities.
- the trust level rating may be based on a number of security violations caused by applications by authoring entities trusted by the first trusted entity, for example.
- the device may decide to remove the first trusted entity as a trusted entity of the device if the number of security violations (and or type/severity of the violations) is unacceptable to the device (e.g., an associated threshold in device settings) or the user of the device (e.g., upon review of a dialog screen).
- the trust level rating is generated by a neutral third party.
- an installation of the application that requires one or more API calls may be allowed or permitted by the device when the authoring entity is certified by at least one trusted entity. However, if it is determined that the application that requires one or more API calls is not certified by any trusted entity, then installation of the application may be denied in accordance with some examples.
- a transitive trust technique may be employed for allowing installation of an application on a device.
- a request by a remote server regarding an application e.g., application 264c or application 266) of an authoring entity may be received by the device.
- the request by the remote server may originate from a third party (e.g. a trusted entity of the device that has not certified the authoring entity, but may act as an intermediary).
- the request by the remote server may originate directly from the authoring entity, and may be sent in a secure manner (e.g., via an SSL connection) to the device.
- the request may identify the one or more API calls or required APIs of the application and at least one transitive trust entity that certifies the authoring entity of the application.
- the at least one transitive trust entity may be an entity that certifies and trusts the authoring entity of the application (e.g., application 264c), but is not identified as a trusted entity of the device.
- the device may not have established a trusted relationship with the at least one transitive trust entity because the user of the device may be unaware of the existence of that particular entity (or entities) or may choose to not allow every application authorized by that particular entity (or entities) without an explicit request.
- the process of the receiving an explicit request by the remote server would not be necessary in certain implementations (e.g., if service provider 254 were a trusted entity of the device, then application 264c, which is authored by an authoring entity that is trusted by service provider 254, would be allowed as described in block 606 without requiring the request for installation). Accordingly, if the explicit request identifying the one or more API calls or required APIs of the application and at least one transitive trust entity that certifies the authoring entity of the application is acknowledged by the device (e.g., approved by the user), the device will allow or permit installation of the application through this transitive trust technique.
- FIG. 7 conceptually illustrates an electronic system with which some implementations of the subject technology are implemented.
- Electronic system 700 can be a server, computer, phone, PDA, a tablet computer, a television with one or more processors embedded therein or coupled thereto, or generally any electronic device.
- Such an electronic system includes various types of computer readable media and interfaces for various other types of computer readable media.
- Electronic system 700 includes a bus 708, processing unit(s) 712, a system memory 704, a read-only memory (ROM) 710, a permanent storage device 702, an input device interface 714, an output device interface 706, and a network interface 716.
- ROM read-only memory
- Bus 708 collectively represents all system, peripheral, and chipset buses that communicatively connect the numerous internal devices of electronic system 700. For instance, bus 708 communicatively connects processing unit(s) 712 with ROM 710, system memory 704, and permanent storage device 702.
- processing unit(s) 712 retrieves instructions to execute and data to process in order to execute the processes of the subject disclosure.
- the processing unit(s) can be a single processor or a multi-core processor in different implementations.
- ROM 710 stores static data and instructions that are needed by processing unit(s) 712 and other modules of the electronic system.
- Permanent storage device 702 is a read-and-write memory device. This device is a non-volatile memory unit that stores instructions and data even when electronic system 700 is off.
- Some implementations of the subject disclosure use a mass-storage device (such as a magnetic or optical disk and its corresponding disk drive) as permanent storage device 702.
- system memory 704 is a read-and-write memory device. However, unlike storage device 702, system memory 704 is a volatile read-and-write memory, such a random access memory. System memory 704 stores some of the instructions and data that the processor needs at runtime. In some implementations, the processes of the subject disclosure are stored in system memory 704, permanent storage device 702, or ROM 710.
- the various memory units may include instructions for operations related to application permissions and API access notification techniques in accordance with some implementations of the subject technology. From these various memory units, processing unit(s) 712 retrieves instructions to execute and data to process in order to execute the processes of some implementations.
- Bus 708 also connects to input and output device interfaces 714 and 706.
- Input device interface 714 enables the user to communicate information and select commands to the electronic system.
- Input devices used with input device interface 714 include, for example, alphanumeric keyboards and pointing devices (also called “cursor control devices").
- Output device interfaces 706 enables, for example, the display of images generated by the electronic system 700.
- Output devices used with output device interface 706 include, for example, printers and display devices, such as cathode ray tubes (CRT) or liquid crystal displays (LCD). Some implementations include devices such as a touchscreen that functions as both input and output devices.
- CTR cathode ray tubes
- LCD liquid crystal displays
- bus 708 also couples electronic system 700 to a network (not shown) through a network interface 716.
- the computer can be a part of a network of computers (such as a local area network (“LAN”), a wide area network (“WAN”), or an Intranet, or a network of networks, such as the Internet. Any or all components of electronic system 700 can be used in conjunction with the subject disclosure.
- Some implementations include electronic components, such as microprocessors, storage and memory that store computer program instructions in a machine-readable or computer-readable medium (alternatively referred to as computer-readable storage media, machine-readable media, or machine-readable storage media).
- electronic components such as microprocessors, storage and memory that store computer program instructions in a machine-readable or computer-readable medium (alternatively referred to as computer-readable storage media, machine-readable media, or machine-readable storage media).
- Such computer-readable media include RAM, ROM, read-only compact discs (CD-ROM), recordable compact discs (CD-R), rewritable compact discs (CD-RW), read-only digital versatile discs (e.g., DVD-ROM, dual-layer DVD-ROM), a variety of recordable/rewritable DVDs (e.g., DVD-RAM, DVD-RW, DVD+RW, etc.), flash memory (e.g., SD cards, mini-SD cards, micro-SD cards, etc.), magnetic or solid state hard drives, ultra density optical discs, any other optical or magnetic media, and floppy disks.
- RAM random access memory
- ROM read-only compact discs
- CD-R recordable compact discs
- CD-RW rewritable compact discs
- read-only digital versatile discs e.g., DVD-ROM, dual-layer DVD-ROM
- flash memory e.g., SD cards, mini-SD cards, micro-SD cards, etc.
- the computer-readable media can store a computer program that is executable by at least one processing unit and includes sets of instructions for performing various operations.
- Examples of computer programs or computer code include machine code, such as is produced by a compiler, and files including higher-level code that are executed by a computer, an electronic component, or a microprocessor using an interpreter.
- the instructions for performing various operations may be stored in the memory units and implemented in one or more computer program products, for example, one or more modules of computer program instructions encoded on a computer readable medium for execution by, or to control the operation of, the electronic system 700, and according to any method known to those of skill in the art, including, but not limited to, computer languages such as data-oriented languages (e.g., SQL, dBase), system languages (e.g., C, Objective-C, C++, Assembly), architectural languages (e.g., Java, .NET), and application languages (e.g., PHP, Ruby, Perl, Python).
- data-oriented languages e.g., SQL, dBase
- system languages e.g., C, Objective-C, C++, Assembly
- architectural languages e.g., Java, .NET
- application languages e.g., PHP, Ruby, Perl, Python.
- Instructions for performing various operations may also be implemented in computer languages such as array languages, aspect-oriented languages, assembly languages, authoring languages, command line interface languages, compiled languages, concurrent languages, curly- bracket languages,dataflow languages, data-structured languages, declarative languages, esoteric languages, extension languages, fourth-generation languages, functional languages, interactive mode languages, interpreted languages, iterative languages, list-based languages, little languages, logic-based languages, machine languages, macro languages, metaprogramming languages, multiparadigm languages, numerical analysis, non-English-based languages, object-oriented class-based languages, object-oriented prototype-based languages, off-side rule languages, procedural languages, reflective languages, rule-based languages, scripting languages, stack- based languages, synchronous languages, syntax handling languages, visual languages, wirth languages, embeddable languages, and xml-based languages.
- Various memory units may also be used for storing temporary variable or other intermediate information during execution of instructions to be executed by processing unit(s) 712.
- ASICs application specific integrated circuits
- FPGAs field programmable gate arrays
- integrated circuits execute instructions that are stored on the circuit itself.
- the terms "computer”, “server”, “processor”, and “memory” all refer to electronic or other technological devices. These terms exclude people or groups of people.
- the terms “display” or “displaying” means displaying on an electronic device.
- the terms “computer readable medium” and “computer readable media” are entirely restricted to tangible, physical objects that store information in a form that is readable by a computer. These terms exclude any wireless signals, wired download signals, and any other ephemeral signals.
- implementations of the subject matter described in this specification can be implemented on a computer having a display device, such as a CRT (cathode ray tube) or LCD (liquid crystal display) monitor, for displaying information to the user and a keyboard and a pointing device, such as a mouse or a trackball, by which the user can provide input to the computer.
- a display device such as a CRT (cathode ray tube) or LCD (liquid crystal display) monitor
- keyboard and a pointing device such as a mouse or a trackball
- Other kinds of devices can be used to provide for interaction with a user as well; for example, feedback provided to the user can be any form of sensory feedback, such as visual feedback, auditory feedback, or tactile feedback; and input from the user can be received in any form, including acoustic, speech, or tactile input.
- a computer can interact with a user by sending documents to and receiving documents from a device that is used by the user; for example, by sending web pages to a web browser on a user
- Embodiments of the subject matter described in this specification can be implemented in a computing system that includes a back end component, such as a data server, or that includes a middleware component, such as an application server, or that includes a front end component, such as a client computer having a graphical user interface or a Web browser through which a user can interact with an implementation of the subject matter described in this specification, or any combination of one or more such back end, middleware, or front end components.
- the components of the system can be interconnected by any form or medium of digital data communication, such as a communication network.
- Examples of communication networks include a local area network (“LAN”) and a wide area network (“WAN”), an inter-network (e.g., the Internet), and peer-to-peer networks (e.g., ad hoc peer-to-peer networks).
- LAN local area network
- WAN wide area network
- inter-network e.g., the Internet
- peer-to-peer networks e.g., ad hoc peer-to-peer networks.
- the computing system can include clients and servers.
- a client and server are generally remote from each other and typically interact through a communication network. The relationship of client and server arises by virtue of computer programs running on the respective computers and having a client-server relationship to each other.
- a server transmits data (e.g., an HTML page) to a client device (e.g., for purposes of displaying data to and receiving user input from a user interacting with the client device).
- client device e.g., for purposes of displaying data to and receiving user input from a user interacting with the client device.
- Data generated at the client device e.g., a result of the user interaction
- any specific order or hierarchy of blocks in the processes disclosed is an illustration of example approaches. Based upon design preferences, it is understood that the specific order or hierarchy of blocks in the processes may be rearranged, or that all illustrated blocks be performed. Some of the blocks may be performed simultaneously. For example, in certain circumstances, multitasking and parallel processing may be advantageous. Moreover, the separation of various system components in the embodiments described above should not be understood as requiring such separation in all embodiments, and it should be understood that the described program components and systems can generally be integrated together in a single software product or packaged into multiple software products.
- website may include any aspect of a website, including one or more web pages, one or more servers used to host or store web related content, and the like. Accordingly, the term website may be used interchangeably with the terms web page and server.
- a processor configured to monitor and control an operation or a component may also mean the processor being programmed to monitor and control the operation or the processor being operable to monitor and control the operation.
- a processor configured to execute code can be construed as a processor programmed to execute code or operable to execute code.
- the phrase "at least one of preceding a series of items, with the term “or” to separate any of the items, modifies the list as a whole, rather than each item of the list.
- the phrase “at least one of A, B, or C” may refer to: only A, only B, or only C; or any combination of A, B, and C.
- a phrase such as an "aspect” does not imply that such aspect is essential to the subject technology or that such aspect applies to all configurations of the subject technology.
- a disclosure relating to an aspect may apply to all configurations, or one or more configurations.
- a phrase such as an aspect may refer to one or more aspects and vice versa.
- a phrase such as a “configuration” does not imply that such configuration is essential to the subject technology or that such configuration applies to all configurations of the subject technology.
- a disclosure relating to a configuration may apply to all configurations, or one or more configurations.
- a phrase such as a configuration may refer to one or more configurations and vice versa.
- Example is used herein to mean “serving as an example or illustration.” Any aspect or design described herein as “example” is not necessarily to be construed as preferred or advantageous over other aspects or designs.
Abstract
Description
Claims
Priority Applications (1)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
EP18183379.9A EP3404571A1 (en) | 2013-12-31 | 2014-12-23 | Notification of application permissions |
Applications Claiming Priority (2)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US14/145,644 US9256755B2 (en) | 2013-12-31 | 2013-12-31 | Notification of application permissions |
PCT/US2014/072274 WO2015103058A1 (en) | 2013-12-31 | 2014-12-23 | Notification of application permissions |
Related Child Applications (2)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
EP18183379.9A Division EP3404571A1 (en) | 2013-12-31 | 2014-12-23 | Notification of application permissions |
EP18183379.9A Division-Into EP3404571A1 (en) | 2013-12-31 | 2014-12-23 | Notification of application permissions |
Publications (3)
Publication Number | Publication Date |
---|---|
EP3090374A1 true EP3090374A1 (en) | 2016-11-09 |
EP3090374A4 EP3090374A4 (en) | 2017-07-26 |
EP3090374B1 EP3090374B1 (en) | 2018-08-22 |
Family
ID=53482122
Family Applications (2)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
EP14877362.5A Active EP3090374B1 (en) | 2013-12-31 | 2014-12-23 | Notification of application permissions |
EP18183379.9A Withdrawn EP3404571A1 (en) | 2013-12-31 | 2014-12-23 | Notification of application permissions |
Family Applications After (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
EP18183379.9A Withdrawn EP3404571A1 (en) | 2013-12-31 | 2014-12-23 | Notification of application permissions |
Country Status (6)
Country | Link |
---|---|
US (2) | US9256755B2 (en) |
EP (2) | EP3090374B1 (en) |
CN (1) | CN105874462B (en) |
AU (1) | AU2014374041B2 (en) |
CA (1) | CA2931640C (en) |
WO (1) | WO2015103058A1 (en) |
Families Citing this family (24)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US9225715B2 (en) * | 2013-11-14 | 2015-12-29 | Globalfoundries U.S. 2 Llc | Securely associating an application with a well-known entity |
US9112834B1 (en) * | 2014-01-02 | 2015-08-18 | Juniper Networks, Inc. | Protecting sensitive web transactions using a communication channel associated with a user |
US9473883B2 (en) | 2014-05-31 | 2016-10-18 | Apple Inc. | Location service authorization and indication |
US20160275000A1 (en) * | 2015-03-17 | 2016-09-22 | Wegilant Net Solutions Pvt. Ltd. | System and method of automated application screen flow generation for detecting aberration in mobile application |
US9591443B2 (en) * | 2015-06-01 | 2017-03-07 | Apple Inc. | Location service management |
US9591000B2 (en) * | 2015-06-19 | 2017-03-07 | Oracle International Corporation | Methods, systems, and computer readable media for authorization frameworks for web-based applications |
JP6493086B2 (en) * | 2015-08-24 | 2019-04-03 | 富士通コネクテッドテクノロジーズ株式会社 | Information processing apparatus and information processing program |
US20180260864A1 (en) * | 2017-03-07 | 2018-09-13 | Facebook, Inc. | Merchant-facing Queue Interface |
US11637844B2 (en) * | 2017-09-28 | 2023-04-25 | Oracle International Corporation | Cloud-based threat detection |
US11379565B2 (en) * | 2017-10-02 | 2022-07-05 | Microsoft Technology Licensing, Llc | Identifying and consenting to permissions for workflow and code execution |
KR102477043B1 (en) | 2017-11-08 | 2022-12-14 | 삼성전자주식회사 | Electronic device and control method thereof |
US20190394239A1 (en) * | 2018-06-20 | 2019-12-26 | GM Global Technology Operations LLC | Application based policy management used with a client and a service provider |
US11171929B2 (en) * | 2018-12-17 | 2021-11-09 | International Business Machines Corporation | Applying differential security to API message payload data elements |
WO2020180298A1 (en) * | 2019-03-05 | 2020-09-10 | Intel Corporation | Deterministic trusted executed container through managed runtime language metadata |
US11392467B2 (en) | 2019-04-17 | 2022-07-19 | Microsoft Technology Licensing, Llc | Failover between decentralized identity stores |
US11190512B2 (en) | 2019-04-17 | 2021-11-30 | Microsoft Technology Licensing, Llc | Integrity attestation of attestation component |
US11429743B2 (en) | 2019-04-29 | 2022-08-30 | Microsoft Technology Licensing, Llc | Localization of DID-related claims and data |
US11381567B2 (en) | 2019-04-29 | 2022-07-05 | Microsoft Technology Licensing, Llc | Execution of an application within a scope of user-granted permission |
US11411959B2 (en) * | 2019-05-03 | 2022-08-09 | Microsoft Technology Licensing, Llc | Execution of application in a container within a scope of user-granted permission |
US11222137B2 (en) | 2019-05-03 | 2022-01-11 | Microsoft Technology Licensing, Llc | Storing and executing an application in a user's personal storage with user granted permission |
US20210304143A1 (en) * | 2020-03-31 | 2021-09-30 | Atlassian Pty Ltd. | Data classification in application programming interfaces at attribute level |
US11755776B2 (en) * | 2020-11-20 | 2023-09-12 | Paypal, Inc. | Detecting leakage of personal information in computing code configurations |
JP2022120689A (en) * | 2021-02-05 | 2022-08-18 | トヨタ自動車株式会社 | On-vehicle information processing device, information processing method, and program |
US20220407861A1 (en) * | 2021-06-18 | 2022-12-22 | ALTR Solutions, Inc. | Security driver external functions |
Family Cites Families (20)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
GB0212314D0 (en) | 2002-05-28 | 2002-07-10 | Symbian Ltd | Secure mobile wireless device |
DE10246621A1 (en) * | 2002-10-07 | 2004-04-15 | Axel Benkhardt | Signaling system is built into a computer to warn of unauthorized connection to such as Internet |
GB0322876D0 (en) | 2003-09-30 | 2003-10-29 | British Telecomm | Method and system for authenticating a user |
US8156488B2 (en) | 2004-10-20 | 2012-04-10 | Nokia Corporation | Terminal, method and computer program product for validating a software application |
US7797545B2 (en) * | 2005-09-29 | 2010-09-14 | Research In Motion Limited | System and method for registering entities for code signing services |
US7730539B2 (en) * | 2005-10-21 | 2010-06-01 | Microsoft Corporation | Authenticating third party products via a secure extensibility model |
US20100138652A1 (en) | 2006-07-07 | 2010-06-03 | Rotem Sela | Content control method using certificate revocation lists |
US8321949B1 (en) | 2008-08-29 | 2012-11-27 | Adobe Systems Incorporated | Managing software run in a computing system |
US9367680B2 (en) | 2008-10-21 | 2016-06-14 | Lookout, Inc. | System and method for mobile communication device application advisement |
US20100242097A1 (en) | 2009-03-20 | 2010-09-23 | Wavemarket, Inc. | System and method for managing application program access to a protected resource residing on a mobile device |
US8788809B2 (en) * | 2009-04-27 | 2014-07-22 | Qualcomm Incorporated | Method and apparatus to create a secure web-browsing environment with privilege signing |
US20120222083A1 (en) * | 2011-02-28 | 2012-08-30 | Nokia Corporation | Method and apparatus for enforcing data privacy |
US9219752B2 (en) * | 2011-08-26 | 2015-12-22 | Hewlett-Packard Development Company, L.P. | Data leak prevention systems and methods |
US9009856B2 (en) | 2011-12-16 | 2015-04-14 | Dell Products L.P. | Protected application programming interfaces |
US8844032B2 (en) | 2012-03-02 | 2014-09-23 | Sri International | Method and system for application-based policy monitoring and enforcement on a mobile device |
US9317689B2 (en) | 2012-06-15 | 2016-04-19 | Visa International Service Association | Method and apparatus for secure application execution |
CN103514000B (en) * | 2012-06-26 | 2015-09-16 | 腾讯科技（深圳）有限公司 | Browser plug-in installation method and device |
GB2507596B (en) | 2012-10-30 | 2014-09-17 | Barclays Bank Plc | Secure computing device and method |
US9202057B2 (en) | 2013-08-30 | 2015-12-01 | Symantec Corporation | Systems and methods for identifying private keys that have been compromised |
US9280679B2 (en) | 2013-12-31 | 2016-03-08 | Google Inc. | Tiered application permissions |
-
2013
- 2013-12-31 US US14/145,644 patent/US9256755B2/en active Active
-
2014
- 2014-12-23 WO PCT/US2014/072274 patent/WO2015103058A1/en active Application Filing
- 2014-12-23 CA CA2931640A patent/CA2931640C/en active Active
- 2014-12-23 CN CN201480071883.3A patent/CN105874462B/en active Active
- 2014-12-23 EP EP14877362.5A patent/EP3090374B1/en active Active
- 2014-12-23 EP EP18183379.9A patent/EP3404571A1/en not_active Withdrawn
- 2014-12-23 AU AU2014374041A patent/AU2014374041B2/en active Active
-
2015
- 2015-12-31 US US14/986,343 patent/US9990508B1/en active Active
Also Published As
Publication number | Publication date |
---|---|
CN105874462A (en) | 2016-08-17 |
US9256755B2 (en) | 2016-02-09 |
EP3404571A1 (en) | 2018-11-21 |
CN105874462B (en) | 2019-06-14 |
EP3090374A4 (en) | 2017-07-26 |
WO2015103058A1 (en) | 2015-07-09 |
AU2014374041B2 (en) | 2017-03-30 |
CA2931640C (en) | 2019-09-17 |
US9990508B1 (en) | 2018-06-05 |
US20150186664A1 (en) | 2015-07-02 |
AU2014374041A1 (en) | 2016-06-09 |
EP3090374B1 (en) | 2018-08-22 |
CA2931640A1 (en) | 2015-07-09 |
Similar Documents
Publication | Publication Date | Title |
---|---|---|
US9990508B1 (en) | Notification of application permissions | |
US10019592B2 (en) | Tiered application permissions | |
US11102232B2 (en) | Blockchain web browser interface | |
EP3854047B1 (en) | Supervised learning system for identity compromise risk computation | |
KR102403480B1 (en) | Device policy manager | |
US9942269B2 (en) | Effectively preventing data leakage, spying and eavesdropping through a networked computing device by controlling access to a plurality of its device interfaces | |
US9635041B1 (en) | Distributed split browser content inspection and analysis | |
US9275221B2 (en) | Context-aware permission control of hybrid mobile applications | |
US10699234B1 (en) | Computer systems and methods to protect user credential against phishing | |
US10528739B2 (en) | Boot security | |
US11700266B2 (en) | Virtual browser application systems and methods | |
EP4107618A1 (en) | Method and system for online user behavior management | |
US9906553B1 (en) | Personalized privacy warnings | |
Furnell | Usable Cybersecurity: a Contradiction in Terms? | |
Lancioni et al. | Abnormal Situation Detection for Mobile Devices: Feasible Implementation of a Mobile Framework to Detect Abnormal Situations |
Legal Events
Date | Code | Title | Description |
---|---|---|---|
PUAI | Public reference made under article 153(3) epc to a published international application that has entered the european phase |
Free format text: ORIGINAL CODE: 0009012 |
|
17P | Request for examination filed |
Effective date: 20160628 |
|
AK | Designated contracting states |
Kind code of ref document: A1Designated state(s): AL AT BE BG CH CY CZ DE DK EE ES FI FR GB GR HR HU IE IS IT LI LT LU LV MC MK MT NL NO PL PT RO RS SE SI SK SM TR |
|
AX | Request for extension of the european patent |
Extension state: BA ME |
|
DAX | Request for extension of the european patent (deleted) | ||
A4 | Supplementary search report drawn up and despatched |
Effective date: 20170623 |
|
RIC1 | Information provided on ipc code assigned before grant |
Ipc: G06F 21/55 20130101ALI20170619BHEPIpc: G06F 21/53 20130101ALI20170619BHEPIpc: G06F 21/50 20130101AFI20170619BHEPIpc: G06F 21/62 20130101ALI20170619BHEP |
|
RAP1 | Party data changed (applicant data changed or rights of an application transferred) |
Owner name: GOOGLE LLC |
|
GRAP | Despatch of communication of intention to grant a patent |
Free format text: ORIGINAL CODE: EPIDOSNIGR1 |
|
INTG | Intention to grant announced |
Effective date: 20180309 |
|
GRAS | Grant fee paid |
Free format text: ORIGINAL CODE: EPIDOSNIGR3 |
|
GRAA | (expected) grant |
Free format text: ORIGINAL CODE: 0009210 |
|
AK | Designated contracting states |
Kind code of ref document: B1Designated state(s): AL AT BE BG CH CY CZ DE DK EE ES FI FR GB GR HR HU IE IS IT LI LT LU LV MC MK MT NL NO PL PT RO RS SE SI SK SM TR |
|
REG | Reference to a national code |
Ref country code: GBRef legal event code: FG4D |
|
REG | Reference to a national code |
Ref country code: CHRef legal event code: EP |
|
REG | Reference to a national code |
Ref country code: ATRef legal event code: REFRef document number: 1033318Country of ref document: ATKind code of ref document: TEffective date: 20180915 |
|
REG | Reference to a national code |
Ref country code: IERef legal event code: FG4D |
|
REG | Reference to a national code |
Ref country code: DERef legal event code: R096Ref document number: 602014031129Country of ref document: DE |
|
REG | Reference to a national code |
Ref country code: NLRef legal event code: MPEffective date: 20180822 |
|
REG | Reference to a national code |
Ref country code: LTRef legal event code: MG4D |
|
PG25 | Lapsed in a contracting state [announced via postgrant information from national office to epo] |
Ref country code: ISFree format text: LAPSE BECAUSE OF FAILURE TO SUBMIT A TRANSLATION OF THE DESCRIPTION OR TO PAY THE FEE WITHIN THE PRESCRIBED TIME-LIMITEffective date: 20181222Ref country code: BGFree format text: LAPSE BECAUSE OF FAILURE TO SUBMIT A TRANSLATION OF THE DESCRIPTION OR TO PAY THE FEE WITHIN THE PRESCRIBED TIME-LIMITEffective date: 20181122Ref country code: NLFree format text: LAPSE BECAUSE OF FAILURE TO SUBMIT A TRANSLATION OF THE DESCRIPTION OR TO PAY THE FEE WITHIN THE PRESCRIBED TIME-LIMITEffective date: 20180822Ref country code: LTFree format text: LAPSE BECAUSE OF FAILURE TO SUBMIT A TRANSLATION OF THE DESCRIPTION OR TO PAY THE FEE WITHIN THE PRESCRIBED TIME-LIMITEffective date: 20180822Ref country code: SEFree format text: LAPSE BECAUSE OF FAILURE TO SUBMIT A TRANSLATION OF THE DESCRIPTION OR TO PAY THE FEE WITHIN THE PRESCRIBED TIME-LIMITEffective date: 20180822Ref country code: NOFree format text: LAPSE BECAUSE OF FAILURE TO SUBMIT A TRANSLATION OF THE DESCRIPTION OR TO PAY THE FEE WITHIN THE PRESCRIBED TIME-LIMITEffective date: 20181122Ref country code: FIFree format text: LAPSE BECAUSE OF FAILURE TO SUBMIT A TRANSLATION OF THE DESCRIPTION OR TO PAY THE FEE WITHIN THE PRESCRIBED TIME-LIMITEffective date: 20180822Ref country code: GRFree format text: LAPSE BECAUSE OF FAILURE TO SUBMIT A TRANSLATION OF THE DESCRIPTION OR TO PAY THE FEE WITHIN THE PRESCRIBED TIME-LIMITEffective date: 20181123Ref country code: RSFree format text: LAPSE BECAUSE OF FAILURE TO SUBMIT A TRANSLATION OF THE DESCRIPTION OR TO PAY THE FEE WITHIN THE PRESCRIBED TIME-LIMITEffective date: 20180822 |
|
REG | Reference to a national code |
Ref country code: ATRef legal event code: MK05Ref document number: 1033318Country of ref document: ATKind code of ref document: TEffective date: 20180822 |
|
PG25 | Lapsed in a contracting state [announced via postgrant information from national office to epo] |
Ref country code: HRFree format text: LAPSE BECAUSE OF FAILURE TO SUBMIT A TRANSLATION OF THE DESCRIPTION OR TO PAY THE FEE WITHIN THE PRESCRIBED TIME-LIMITEffective date: 20180822Ref country code: LVFree format text: LAPSE BECAUSE OF FAILURE TO SUBMIT A TRANSLATION OF THE DESCRIPTION OR TO PAY THE FEE WITHIN THE PRESCRIBED TIME-LIMITEffective date: 20180822Ref country code: ALFree format text: LAPSE BECAUSE OF FAILURE TO SUBMIT A TRANSLATION OF THE DESCRIPTION OR TO PAY THE FEE WITHIN THE PRESCRIBED TIME-LIMITEffective date: 20180822 |
|
PG25 | Lapsed in a contracting state [announced via postgrant information from national office to epo] |
Ref country code: CZFree format text: LAPSE BECAUSE OF FAILURE TO SUBMIT A TRANSLATION OF THE DESCRIPTION OR TO PAY THE FEE WITHIN THE PRESCRIBED TIME-LIMITEffective date: 20180822Ref country code: ROFree format text: LAPSE BECAUSE OF FAILURE TO SUBMIT A TRANSLATION OF THE DESCRIPTION OR TO PAY THE FEE WITHIN THE PRESCRIBED TIME-LIMITEffective date: 20180822Ref country code: ITFree format text: LAPSE BECAUSE OF FAILURE TO SUBMIT A TRANSLATION OF THE DESCRIPTION OR TO PAY THE FEE WITHIN THE PRESCRIBED TIME-LIMITEffective date: 20180822Ref country code: EEFree format text: LAPSE BECAUSE OF FAILURE TO SUBMIT A TRANSLATION OF THE DESCRIPTION OR TO PAY THE FEE WITHIN THE PRESCRIBED TIME-LIMITEffective date: 20180822Ref country code: ATFree format text: LAPSE BECAUSE OF FAILURE TO SUBMIT A TRANSLATION OF THE DESCRIPTION OR TO PAY THE FEE WITHIN THE PRESCRIBED TIME-LIMITEffective date: 20180822Ref country code: ESFree format text: LAPSE BECAUSE OF FAILURE TO SUBMIT A TRANSLATION OF THE DESCRIPTION OR TO PAY THE FEE WITHIN THE PRESCRIBED TIME-LIMITEffective date: 20180822Ref country code: PLFree format text: LAPSE BECAUSE OF FAILURE TO SUBMIT A TRANSLATION OF THE DESCRIPTION OR TO PAY THE FEE WITHIN THE PRESCRIBED TIME-LIMITEffective date: 20180822 |
|
REG | Reference to a national code |
Ref country code: DERef legal event code: R097Ref document number: 602014031129Country of ref document: DE |
|
PG25 | Lapsed in a contracting state [announced via postgrant information from national office to epo] |
Ref country code: SKFree format text: LAPSE BECAUSE OF FAILURE TO SUBMIT A TRANSLATION OF THE DESCRIPTION OR TO PAY THE FEE WITHIN THE PRESCRIBED TIME-LIMITEffective date: 20180822Ref country code: SMFree format text: LAPSE BECAUSE OF FAILURE TO SUBMIT A TRANSLATION OF THE DESCRIPTION OR TO PAY THE FEE WITHIN THE PRESCRIBED TIME-LIMITEffective date: 20180822Ref country code: DKFree format text: LAPSE BECAUSE OF FAILURE TO SUBMIT A TRANSLATION OF THE DESCRIPTION OR TO PAY THE FEE WITHIN THE PRESCRIBED TIME-LIMITEffective date: 20180822 |
|
PLBE | No opposition filed within time limit |
Free format text: ORIGINAL CODE: 0009261 |
|
STAA | Information on the status of an ep patent application or granted ep patent |
Free format text: STATUS: NO OPPOSITION FILED WITHIN TIME LIMIT |
|
26N | No opposition filed |
Effective date: 20190523 |
|
REG | Reference to a national code |
Ref country code: CHRef legal event code: PL |
|
PG25 | Lapsed in a contracting state [announced via postgrant information from national office to epo] |
Ref country code: LUFree format text: LAPSE BECAUSE OF NON-PAYMENT OF DUE FEESEffective date: 20181223Ref country code: SIFree format text: LAPSE BECAUSE OF FAILURE TO SUBMIT A TRANSLATION OF THE DESCRIPTION OR TO PAY THE FEE WITHIN THE PRESCRIBED TIME-LIMITEffective date: 20180822Ref country code: MCFree format text: LAPSE BECAUSE OF FAILURE TO SUBMIT A TRANSLATION OF THE DESCRIPTION OR TO PAY THE FEE WITHIN THE PRESCRIBED TIME-LIMITEffective date: 20180822 |
|
REG | Reference to a national code |
Ref country code: IERef legal event code: MM4A |
|
REG | Reference to a national code |
Ref country code: BERef legal event code: MMEffective date: 20181231 |
|
PG25 | Lapsed in a contracting state [announced via postgrant information from national office to epo] |
Ref country code: IEFree format text: LAPSE BECAUSE OF NON-PAYMENT OF DUE FEESEffective date: 20181223Ref country code: FRFree format text: LAPSE BECAUSE OF NON-PAYMENT OF DUE FEESEffective date: 20181231 |
|
PG25 | Lapsed in a contracting state [announced via postgrant information from national office to epo] |
Ref country code: BEFree format text: LAPSE BECAUSE OF NON-PAYMENT OF DUE FEESEffective date: 20181231 |
|
PG25 | Lapsed in a contracting state [announced via postgrant information from national office to epo] |
Ref country code: CHFree format text: LAPSE BECAUSE OF NON-PAYMENT OF DUE FEESEffective date: 20181231Ref country code: LIFree format text: LAPSE BECAUSE OF NON-PAYMENT OF DUE FEESEffective date: 20181231 |
|
PG25 | Lapsed in a contracting state [announced via postgrant information from national office to epo] |
Ref country code: MTFree format text: LAPSE BECAUSE OF NON-PAYMENT OF DUE FEESEffective date: 20181223 |
|
PG25 | Lapsed in a contracting state [announced via postgrant information from national office to epo] |
Ref country code: TRFree format text: LAPSE BECAUSE OF FAILURE TO SUBMIT A TRANSLATION OF THE DESCRIPTION OR TO PAY THE FEE WITHIN THE PRESCRIBED TIME-LIMITEffective date: 20180822 |
|
PG25 | Lapsed in a contracting state [announced via postgrant information from national office to epo] |
Ref country code: PTFree format text: LAPSE BECAUSE OF FAILURE TO SUBMIT A TRANSLATION OF THE DESCRIPTION OR TO PAY THE FEE WITHIN THE PRESCRIBED TIME-LIMITEffective date: 20180822 |
|
PG25 | Lapsed in a contracting state [announced via postgrant information from national office to epo] |
Ref country code: MKFree format text: LAPSE BECAUSE OF NON-PAYMENT OF DUE FEESEffective date: 20180822Ref country code: CYFree format text: LAPSE BECAUSE OF FAILURE TO SUBMIT A TRANSLATION OF THE DESCRIPTION OR TO PAY THE FEE WITHIN THE PRESCRIBED TIME-LIMITEffective date: 20180822Ref country code: HUFree format text: LAPSE BECAUSE OF FAILURE TO SUBMIT A TRANSLATION OF THE DESCRIPTION OR TO PAY THE FEE WITHIN THE PRESCRIBED TIME-LIMIT; INVALID AB INITIOEffective date: 20141223 |
|
PGFP | Annual fee paid to national office [announced via postgrant information from national office to epo] |
Ref country code: DEPayment date: 20221228Year of fee payment: 9 |
|
P01 | Opt-out of the competence of the unified patent court (upc) registered |
Effective date: 20230510 |
|
PGFP | Annual fee paid to national office [announced via postgrant information from national office to epo] |
Ref country code: GBPayment date: 20231227Year of fee payment: 10 |
|
PGFP | Annual fee paid to national office [announced via postgrant information from national office to epo] |
Ref country code: DEPayment date: 20231229Year of fee payment: 10 |