US7350126B2 - Method for constructing erasure correcting codes whose implementation requires only exclusive ORs - Google Patents
Method for constructing erasure correcting codes whose implementation requires only exclusive ORs Download PDFInfo
- Publication number
- US7350126B2 US7350126B2 US10/600,593 US60059303A US7350126B2 US 7350126 B2 US7350126 B2 US 7350126B2 US 60059303 A US60059303 A US 60059303A US 7350126 B2 US7350126 B2 US 7350126B2
- Authority
- US
- United States
- Prior art keywords
- code
- data
- encoding
- correcting
- words
- Prior art date
- Legal status (The legal status is an assumption and is not a legal conclusion. Google has not performed a legal analysis and makes no representation as to the accuracy of the status listed.)
- Expired - Fee Related, expires
Links
Images
Classifications
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F11/00—Error detection; Error correction; Monitoring
- G06F11/07—Responding to the occurrence of a fault, e.g. fault tolerance
- G06F11/08—Error detection or correction by redundancy in data representation, e.g. by using checking codes
- G06F11/10—Adding special bits or symbols to the coded information, e.g. parity check, casting out 9's or 11's
- G06F11/1076—Parity data used in redundant arrays of independent storages, e.g. in RAID systems
-
- H—ELECTRICITY
- H03—ELECTRONIC CIRCUITRY
- H03M—CODING; DECODING; CODE CONVERSION IN GENERAL
- H03M13/00—Coding, decoding or code conversion, for error detection or error correction; Coding theory basic assumptions; Coding bounds; Error probability evaluation methods; Channel models; Simulation or testing of codes
- H03M13/03—Error detection or forward error correction by redundancy in data representation, i.e. code words containing more digits than the source words
- H03M13/05—Error detection or forward error correction by redundancy in data representation, i.e. code words containing more digits than the source words using block codes, i.e. a predetermined number of check bits joined to a predetermined number of information bits
- H03M13/13—Linear codes
- H03M13/134—Non-binary linear block codes not provided for otherwise
-
- H—ELECTRICITY
- H03—ELECTRONIC CIRCUITRY
- H03M—CODING; DECODING; CODE CONVERSION IN GENERAL
- H03M13/00—Coding, decoding or code conversion, for error detection or error correction; Coding theory basic assumptions; Coding bounds; Error probability evaluation methods; Channel models; Simulation or testing of codes
- H03M13/03—Error detection or forward error correction by redundancy in data representation, i.e. code words containing more digits than the source words
- H03M13/05—Error detection or forward error correction by redundancy in data representation, i.e. code words containing more digits than the source words using block codes, i.e. a predetermined number of check bits joined to a predetermined number of information bits
- H03M13/13—Linear codes
- H03M13/15—Cyclic codes, i.e. cyclic shifts of codewords produce other codewords, e.g. codes defined by a generator polynomial, Bose-Chaudhuri-Hocquenghem [BCH] codes
- H03M13/151—Cyclic codes, i.e. cyclic shifts of codewords produce other codewords, e.g. codes defined by a generator polynomial, Bose-Chaudhuri-Hocquenghem [BCH] codes using error location or error correction polynomials
- H03M13/1515—Reed-Solomon codes
-
- H—ELECTRICITY
- H03—ELECTRONIC CIRCUITRY
- H03M—CODING; DECODING; CODE CONVERSION IN GENERAL
- H03M13/00—Coding, decoding or code conversion, for error detection or error correction; Coding theory basic assumptions; Coding bounds; Error probability evaluation methods; Channel models; Simulation or testing of codes
- H03M13/37—Decoding methods or techniques, not specific to the particular type of coding provided for in groups H03M13/03 - H03M13/35
- H03M13/373—Decoding methods or techniques, not specific to the particular type of coding provided for in groups H03M13/03 - H03M13/35 with erasure correction and erasure determination, e.g. for packet loss recovery or setting of erasures for the decoding of Reed-Solomon codes
-
- H—ELECTRICITY
- H03—ELECTRONIC CIRCUITRY
- H03M—CODING; DECODING; CODE CONVERSION IN GENERAL
- H03M13/00—Coding, decoding or code conversion, for error detection or error correction; Coding theory basic assumptions; Coding bounds; Error probability evaluation methods; Channel models; Simulation or testing of codes
- H03M13/61—Aspects and characteristics of methods and arrangements for error correction or error detection, not provided for otherwise
- H03M13/615—Use of computational or mathematical techniques
- H03M13/616—Matrix operations, especially for generator matrices or check matrices, e.g. column or row permutations
-
- H—ELECTRICITY
- H03—ELECTRONIC CIRCUITRY
- H03M—CODING; DECODING; CODE CONVERSION IN GENERAL
- H03M13/00—Coding, decoding or code conversion, for error detection or error correction; Coding theory basic assumptions; Coding bounds; Error probability evaluation methods; Channel models; Simulation or testing of codes
- H03M13/65—Purpose and implementation aspects
- H03M13/6569—Implementation on processors, e.g. DSPs, or software implementations
Definitions
- the present invention generally relates to codes for correcting erasure errors and, more particularly, to constructing codes for which the encoding and correcting algorithms can be executed fast or “on-the-fly”.
- the invention has particular application in reading data from arrays of hard disks in data processing systems.
- Storage systems have relied on simple erasure codes (e.g., parity, mirroring, etc.) to protect against data loss.
- simple erasure codes e.g., parity, mirroring, etc.
- disk drive reliability has not increased as fast as the drive capacity has increased, creating significant vulnerabilities for simple codes.
- SATA Serial Advanced Technology Attachment
- HDDs hard disk drives
- Reed-Solomon (RS) coding is used in RAID systems. See, for example, the article by James S. Plank entitled “A tutorial on Reed-Solomon Coding for Fault-Tolerance in RAID-like Systems”, Software - Practice and Experience , Vol. 27(9), September 1997, pp. 995–1012.
- the author describes a three data, three check arrangement as an example of how to produce RS encoding and decoding. He shows how to generate the appropriate Vandermonde matrix, how to use it to generate three checks, and then how to use it to decode from three devices.
- the author states on page 1008: “To the author's knowledge, there is no parity-based scheme that tolerates three or more device failures with minimal device overhead.”
- U.S. Pat. No. 5,271,012 to Blaum et al. discloses a method for encoding and rebuilding the data contents of up to two unavailable direct access storage devices (DASDs) in a DASD array. This method uses an example of the EVENODD code described above. Also relevant are U.S. Pat. No. 5,33,143 and No. 5,579,475, both to Blaum et al., which disclose similar methods for coding and rebuilding data from up to two unavailable DASDs in a DASD array.
- any code over a finite field of characteristic two can be converted into a code whose encoding and correcting algorithms involve only XORs of words (and loading and storing of the data).
- the implementation of the encoding and correcting algorithms is more efficient, since it uses only XORs of words—an operation which is available on almost all microprocessors.
- the preferred embodiment of the invention is a computer implemented method for correcting four or more erasure errors whose locations are known.
- the method first converts a code over a finite field of characteristic two into a code whose encoding and correcting algorithms involve only exclusive OR (XOR) operations of words.
- Data is read from main volatile memory and encoded using only XOR operations to generate a correcting code.
- the data and correcting code are then stored in an auxiliary array of non-volatile storage devices.
- Data and correcting code are read from the auxiliary array of non-volatile storage devices. Erasure errors in the data read from the auxiliary array of non-volatile storage devices are detected and, using only XOR operations, generate reconstructed data is generated.
- an encoding and correcting method which can be performed using only XOR operations on words for error correcting codes with four or more check symbols which can correct as many errors as there are check symbols.
- an encoding and correcting method which can be obtained by transforming encoding and decoding matrices over GF(2 n ), the Galois Field of 2 n elements for n greater than one. This method can be performed using only XOR operations on words.
- a code whose encoding a decoding involve only XOR operations of words that is specific to (3, 3) code of distance 4.
- FIG. 1 is a block diagram illustrating an encoding system for a RAID system
- FIG. 2 is a block diagram illustrating a data reconstructing system for reading data from the RAID system
- FIG. 3 is a flow diagram illustrating the logic implemented in the encoder of the system shown in FIG. 1 ;
- FIG. 4 is a flow diagram illustrating the logic implemented in the decoder of the system shown in FIG. 2 .
- FIG. 1 there is shown a block diagram illustrating an encoding system for a RAID system in which the present invention may be implemented.
- main memory 10 such as volatile random access memory (RAM)
- RAM volatile random access memory
- auxiliary storage RAID system 12 for non-volatile storage.
- the data is read to an encoder 14 for encoding the erasure correcting codes.
- the encoder can be implemented by suitable code in a microprocessor of the computer system.
- These erasure correcting codes are also stored in the RAID system 12 .
- the RAID array comprises three data disks, 12 1 to 12 3 , across which the data is striped, and three disks 12 4 to 12 6 , which store the checking part of the erasure correcting code.
- FIG. 2 is a block diagram illustrating an example of reconstructing data from the RAID system 12 for the case of two failed disks, disks 12 2 and 12 5 , for example.
- the data from the four non-failed disks, disks 12 1 , 12 3 , 12 4 and 12 6 are read out to a correcting circuit 20 for reconstructing the data.
- This circuit can be implemented by suitable code in the microprocessor of the computer system.
- the reconstructed data output from the circuit 20 is stored in memory 10 .
- This code has distance four; that is, it is possible to correct any three (or fewer) erasure errors. For example, if x 0 , X 3 and x 5 have failed, then:
- [ w 0 , 0 w 0 , 1 ] [ 1 0 0 1 1 1 1 1 0 ] ⁇ [ w 4 , 0 w 4 , 1 w 1 , 0 w 1 , 1 w 1 , 1 w 2 , 0 w 2 , 1 ] , and w 0 can be recovered by performing five XORs.
- FIG. 3 is a flow diagram illustrating the logic of the implementation of the encoder 14 in FIG. 1 .
- the input to the process is W 0 , W 1 , W 2 blocks of 2n words, and the output is W 3 , W 4 , W 5 check blocks.
- the process begins by initializing the index, i, to zero in function block 31 .
- a processing loop is entered at decision block 32 where a determination is made as to whether i is greater than or equal to 2 n . If so, the process exits; otherwise, the following exclusive OR operations are performed in function block 33 :
- FIG. 4 is a flow diagram illustrating the logic of the implementation of the decoder 20 in FIG. 2 where disks 12 2 and 12 5 have failed, for example. Corrections of other failure patterns of at most three failed disks can be performed in a similar manner for this example.
- the input to the process is W 1 , W 2 , W 4 blocks of 2 n words, and the output is W 0 data block.
- the process begins by initializing the index, i, to 0 in function block 41 .
- a processing loop is entered at decision block 42 where a determination is made as to whether i is greater than or equal to 2 n . If so, the process exits; otherwise, the following exclusive OR operations are performed in function block 43 :
- the method according to the invention has been implemented in software and compared with other known solutions.
- the software was written in the C programming language, and the performance measured on an IBM ThinkPad® laptop computer with a 1.7 GHz Intel Pentium® 4 (P4) processor.
- the P4 processor has a two level cache and pipelined architecture. We therefore examined the performance of the codes as a function of the buffer size for each hard disk drive (HDD). Small buffer sizes would show the performance of the 512 KB L2 cache, while larger sizes would show the performance of the underlying memory system.
- HDD hard disk drive
Abstract
Description
where α is an element of GF(4) which satisfies the
We now replace, in X C and in X 1, each xi(i=0, 1, 2, 3, 4, 5) by the pair of words wi=(wi,0, wi,1)t, and in A we replace 1 by the 2×2 matrix
α by the 2×2 matrix
and α2 by the 2×2 matrix
and X C=AX 1 becomes
This code, which we call the (3, 3) code, has the property that even if all the information in any three of the words wi is erased, the data can be recovered.
-
- v1=w1,0⊕w2,0
- v2=w1,1⊕w2,1
- v3=w2,0⊕w0,0
- v4=W2,1⊕w0,1
- w3,0=w0,0⊕v1
- w3,1=w0,1⊕V2
- w5,1=v4⊕v1
- w4,0=v3⊕v2
- w4,1=v2⊕w5,1
- w5,0=v1⊕w4,0
and w0 can be recovered by performing five XORs.
-
- 1. The encoding for code C is of the form X C=AX 1, and each of the corrections is also of the form xi=Bi X, where A and the Bis are matrices over GF(2n).
- 2. Choose a representation, r, of GF(2n). The representation assigns an n×n matrix, r(α), for every element a in GF(2n), whose elements are in GF(2); i.e., are “0” or “1”.
- 3. To obtain the encoder of code C, substitute the matrix r(α) for every element a of A, to obtain the matrix r(A), and substitute wi for xi in X 1 and in X C, where wi=(wi,0, wi,1, . . . , wi,n−1)t to obtain W 1 and W C. The encoder of code C is W C=r(A)W 1.
- 4. Similarly, by substituting r(α) for every element α of Bi to obtain r(Bi), and substituting wj for every element xj of X to obtain W, we can recover xi by using wi=r(Bi)W.
Since the entries of matrix A and of the Bis are elements of GF(2), i.e., “0” or “1”, it is clear that both the encoding and recovery can be done by XORs of the words wij It is also clear that code C, by its construction, can recover the loss of up to e of the wis.
-
- v1=W1(i)⊕W2(i)
- v2=W1(i+1)⊕W2(i+1)
- v3=W2(i)⊕W0(i)
- v4=W2(i+1)⊕W0(i+1′)
This is followed by performing the following exclusive OR operations in function block 34: - W3(i)=W0(i)⊕v1
- W3(i+1)=W0(i+1)⊕v2
- W5(i+1)=v4⊕v 1
- W4(i)=v3⊕v 2
- W4(i+1)=v2⊕W 5(i+1)
- W5(i)=v1⊕W 4(i)
The index, i, is incremented by two infunction block 35, and the process loops back todecision block 32. This processing loop continues until i is determined to be greater than or equal to 2n.
-
- v1=W 1(i+1)⊕W2(i)
- v2=W 4(i)⊕W2(i+1)
- v3=W 4(i+1)⊕W1(i)
This is followed by performing the following exclusive OR operations in function block 44: - W0(i)=v1⊕v 2
- W0(i+1)=v1⊕v 3
The index, i, is incremented by two infunction block 45, and the process loops back todecision block 42. This processing loop continues until i is determined to be greater than or equal to 2n.
Claims (12)
Priority Applications (1)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US10/600,593 US7350126B2 (en) | 2003-06-23 | 2003-06-23 | Method for constructing erasure correcting codes whose implementation requires only exclusive ORs |
Applications Claiming Priority (1)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US10/600,593 US7350126B2 (en) | 2003-06-23 | 2003-06-23 | Method for constructing erasure correcting codes whose implementation requires only exclusive ORs |
Publications (2)
Publication Number | Publication Date |
---|---|
US20040260994A1 US20040260994A1 (en) | 2004-12-23 |
US7350126B2 true US7350126B2 (en) | 2008-03-25 |
Family
ID=33517792
Family Applications (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
US10/600,593 Expired - Fee Related US7350126B2 (en) | 2003-06-23 | 2003-06-23 | Method for constructing erasure correcting codes whose implementation requires only exclusive ORs |
Country Status (1)
Country | Link |
---|---|
US (1) | US7350126B2 (en) |
Cited By (15)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20070006019A1 (en) * | 2005-01-07 | 2007-01-04 | Hung-Ming Chien | Data storage system |
US20090083590A1 (en) * | 2007-09-26 | 2009-03-26 | John Johnson Wylie | System and method for determining the fault-tolerance of an erasure code |
US20100083069A1 (en) * | 2008-06-18 | 2010-04-01 | John Johnson Wylie | Selecting Erasure Codes For A Fault Tolerant System |
US8386891B2 (en) | 2003-07-14 | 2013-02-26 | International Business Machines Corporation | Anamorphic codes |
US20130173996A1 (en) * | 2011-12-30 | 2013-07-04 | Michael H. Anderson | Accelerated erasure coding system and method |
US20130173956A1 (en) * | 2011-12-30 | 2013-07-04 | Streamscale, Inc. | Using parity data for concurrent data authentication, correction, compression, and encryption |
US8869006B2 (en) * | 2012-02-02 | 2014-10-21 | International Business Machines Corporation | Partial-maximum distance separable (PMDS) erasure correcting codes for storage arrays |
US8918701B2 (en) | 2011-02-28 | 2014-12-23 | SK Hynix Inc. | Nested multiple erasure correcting codes for storage arrays |
US9037564B2 (en) | 2011-04-29 | 2015-05-19 | Stephen Lesavich | Method and system for electronic content storage and retrieval with galois fields on cloud computing networks |
US9058291B2 (en) | 2011-02-28 | 2015-06-16 | International Business Machines Corporation | Multiple erasure correcting codes for storage arrays |
US9137250B2 (en) | 2011-04-29 | 2015-09-15 | Stephen Lesavich | Method and system for electronic content storage and retrieval using galois fields and information entropy on cloud computing networks |
US9361479B2 (en) | 2011-04-29 | 2016-06-07 | Stephen Lesavich | Method and system for electronic content storage and retrieval using Galois fields and geometric shapes on cloud computing networks |
US9569771B2 (en) | 2011-04-29 | 2017-02-14 | Stephen Lesavich | Method and system for storage and retrieval of blockchain blocks using galois fields |
US9722632B2 (en) | 2014-09-22 | 2017-08-01 | Streamscale, Inc. | Sliding window list decoder for error correcting codes |
US11474898B2 (en) * | 2020-12-09 | 2022-10-18 | International Business Machines Corporation | Multiple responder approach to systems with different types of failures |
Families Citing this family (7)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US7254754B2 (en) * | 2003-07-14 | 2007-08-07 | International Business Machines Corporation | Raid 3+3 |
FR2860360B1 (en) * | 2003-09-29 | 2005-12-09 | Canon Kk | ENCODING / DECODING DEVICE USING REED-SOLOMON ENCODER / DECODER |
US7870464B2 (en) | 2004-11-02 | 2011-01-11 | International Business Machines Corporation | System and method for recovery of data for a lost sector in a storage system |
US20060123321A1 (en) * | 2004-11-22 | 2006-06-08 | International Business Machines Corporation | System and method for reconstructing lost data in a storage system |
TWI285313B (en) * | 2005-06-22 | 2007-08-11 | Accusys Inc | XOR circuit, RAID device capable of recover a plurality of failures and method thereof |
US7634692B2 (en) * | 2006-02-10 | 2009-12-15 | Mediatek Inc. | SATA primitive prediction and correction |
US8209577B2 (en) * | 2007-12-20 | 2012-06-26 | Microsoft Corporation | Optimizing XOR-based codes |
Citations (10)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US5271012A (en) | 1991-02-11 | 1993-12-14 | International Business Machines Corporation | Method and means for encoding and rebuilding data contents of up to two unavailable DASDs in an array of DASDs |
US5333143A (en) | 1991-08-29 | 1994-07-26 | International Business Machines Corporation | Method and means for b-adjacent coding and rebuilding data from up to two unavailable DASDS in a DASD array |
US5579475A (en) | 1991-02-11 | 1996-11-26 | International Business Machines Corporation | Method and means for encoding and rebuilding the data contents of up to two unavailable DASDS in a DASD array using simple non-recursive diagonal and row parity |
US6148430A (en) * | 1998-05-15 | 2000-11-14 | Quantum Corporation | Encoding apparatus for RAID-6 system and tape drives |
US20030126522A1 (en) * | 2001-12-28 | 2003-07-03 | English Robert M. | Correcting multiple block data loss in a storage array using a combination of a single diagonal parity group and multiple row parity groups |
US6643822B1 (en) * | 2000-05-23 | 2003-11-04 | Hewlett-Packard Development Company, L.P. | Computer system with greater than fifteen drive fault tolerance |
US6694479B1 (en) * | 2000-05-23 | 2004-02-17 | Hewlett-Packard Development Company, L.P. | Multiple drive failure recovery for a computer system having an array of storage drives |
US6748488B2 (en) * | 2001-09-28 | 2004-06-08 | Sun Microsystems, Inc. | Storage array having multiple erasure correction and sub-stripe writing |
US6792391B1 (en) * | 2002-11-15 | 2004-09-14 | Adeptec, Inc. | Method and system for three disk fault tolerance in a disk array |
US6823425B2 (en) * | 2001-10-23 | 2004-11-23 | Ivivity, Inc. | System and method for implementing advanced RAID using a set of unique matrices as coefficients |
-
2003
- 2003-06-23 US US10/600,593 patent/US7350126B2/en not_active Expired - Fee Related
Patent Citations (10)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US5271012A (en) | 1991-02-11 | 1993-12-14 | International Business Machines Corporation | Method and means for encoding and rebuilding data contents of up to two unavailable DASDs in an array of DASDs |
US5579475A (en) | 1991-02-11 | 1996-11-26 | International Business Machines Corporation | Method and means for encoding and rebuilding the data contents of up to two unavailable DASDS in a DASD array using simple non-recursive diagonal and row parity |
US5333143A (en) | 1991-08-29 | 1994-07-26 | International Business Machines Corporation | Method and means for b-adjacent coding and rebuilding data from up to two unavailable DASDS in a DASD array |
US6148430A (en) * | 1998-05-15 | 2000-11-14 | Quantum Corporation | Encoding apparatus for RAID-6 system and tape drives |
US6643822B1 (en) * | 2000-05-23 | 2003-11-04 | Hewlett-Packard Development Company, L.P. | Computer system with greater than fifteen drive fault tolerance |
US6694479B1 (en) * | 2000-05-23 | 2004-02-17 | Hewlett-Packard Development Company, L.P. | Multiple drive failure recovery for a computer system having an array of storage drives |
US6748488B2 (en) * | 2001-09-28 | 2004-06-08 | Sun Microsystems, Inc. | Storage array having multiple erasure correction and sub-stripe writing |
US6823425B2 (en) * | 2001-10-23 | 2004-11-23 | Ivivity, Inc. | System and method for implementing advanced RAID using a set of unique matrices as coefficients |
US20030126522A1 (en) * | 2001-12-28 | 2003-07-03 | English Robert M. | Correcting multiple block data loss in a storage array using a combination of a single diagonal parity group and multiple row parity groups |
US6792391B1 (en) * | 2002-11-15 | 2004-09-14 | Adeptec, Inc. | Method and system for three disk fault tolerance in a disk array |
Non-Patent Citations (1)
Title |
---|
James S. Plank; A Tutorial ofn Reed-Solomon Coding for Fault-Tolerance in RAID-like Systems; Department of Computer Science, University of Tennessee, Feb. 19, 1999; pp. 1-19. |
Cited By (40)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US8386891B2 (en) | 2003-07-14 | 2013-02-26 | International Business Machines Corporation | Anamorphic codes |
US20070006019A1 (en) * | 2005-01-07 | 2007-01-04 | Hung-Ming Chien | Data storage system |
US20090083590A1 (en) * | 2007-09-26 | 2009-03-26 | John Johnson Wylie | System and method for determining the fault-tolerance of an erasure code |
US8127212B2 (en) * | 2007-09-26 | 2012-02-28 | Hewlett-Packard Development Company, L.P. | System and method for determining the fault-tolerance of an erasure code |
US20100083069A1 (en) * | 2008-06-18 | 2010-04-01 | John Johnson Wylie | Selecting Erasure Codes For A Fault Tolerant System |
US8250427B2 (en) | 2008-06-18 | 2012-08-21 | Hewlett-Packard Development Company | Selecting erasure codes for a fault tolerant system |
US8918701B2 (en) | 2011-02-28 | 2014-12-23 | SK Hynix Inc. | Nested multiple erasure correcting codes for storage arrays |
US9058291B2 (en) | 2011-02-28 | 2015-06-16 | International Business Machines Corporation | Multiple erasure correcting codes for storage arrays |
US9569771B2 (en) | 2011-04-29 | 2017-02-14 | Stephen Lesavich | Method and system for storage and retrieval of blockchain blocks using galois fields |
US9361479B2 (en) | 2011-04-29 | 2016-06-07 | Stephen Lesavich | Method and system for electronic content storage and retrieval using Galois fields and geometric shapes on cloud computing networks |
US9137250B2 (en) | 2011-04-29 | 2015-09-15 | Stephen Lesavich | Method and system for electronic content storage and retrieval using galois fields and information entropy on cloud computing networks |
US9037564B2 (en) | 2011-04-29 | 2015-05-19 | Stephen Lesavich | Method and system for electronic content storage and retrieval with galois fields on cloud computing networks |
US20190205210A1 (en) * | 2011-12-30 | 2019-07-04 | Streamscale, Inc. | Using parity data for concurrent data authentication, correction, compression, and encyption |
US10003358B2 (en) * | 2011-12-30 | 2018-06-19 | Streamscale, Inc. | Accelerated erasure coding system and method |
US20150012796A1 (en) * | 2011-12-30 | 2015-01-08 | Streamscale, Inc. | Accelerated erasure coding system and method |
US20230336191A1 (en) * | 2011-12-30 | 2023-10-19 | Streamscale, Inc. | Accelerated erasure coding system and method |
US11736125B2 (en) * | 2011-12-30 | 2023-08-22 | Streamscale, Inc. | Accelerated erasure coding system and method |
US11500723B2 (en) * | 2011-12-30 | 2022-11-15 | Streamscale, Inc. | Using parity data for concurrent data authentication, correction, compression, and encryption |
US9160374B2 (en) * | 2011-12-30 | 2015-10-13 | Streamscale, Inc. | Accelerated erasure coding system and method |
US9258014B2 (en) * | 2011-12-30 | 2016-02-09 | Streamscale, Inc. | Using parity data for concurrent data authentication, correction, compression, and encryption |
US8683296B2 (en) * | 2011-12-30 | 2014-03-25 | Streamscale, Inc. | Accelerated erasure coding system and method |
US9385759B2 (en) * | 2011-12-30 | 2016-07-05 | Streamscale, Inc. | Accelerated erasure coding system and method |
US20130173956A1 (en) * | 2011-12-30 | 2013-07-04 | Streamscale, Inc. | Using parity data for concurrent data authentication, correction, compression, and encryption |
US20220271777A1 (en) * | 2011-12-30 | 2022-08-25 | Streamscale, Inc. | Accelerated erasure coding system and method |
US9760439B2 (en) * | 2011-12-30 | 2017-09-12 | Streamscale, Inc. | Using parity data for concurrent data authentication, correction, compression, and encryption |
US8914706B2 (en) * | 2011-12-30 | 2014-12-16 | Streamscale, Inc. | Using parity data for concurrent data authentication, correction, compression, and encryption |
US20180203764A1 (en) * | 2011-12-30 | 2018-07-19 | Streamscale, Inc. | Using parity data for concurrent data authentication, correction, compression, and encryption |
US11362678B2 (en) * | 2011-12-30 | 2022-06-14 | Streamscale, Inc. | Accelerated erasure coding system and method |
US10268544B2 (en) * | 2011-12-30 | 2019-04-23 | Streamscale, Inc. | Using parity data for concurrent data authentication, correction, compression, and encryption |
US10291259B2 (en) * | 2011-12-30 | 2019-05-14 | Streamscale, Inc. | Accelerated erasure coding system and method |
US20130173996A1 (en) * | 2011-12-30 | 2013-07-04 | Michael H. Anderson | Accelerated erasure coding system and method |
US20190215013A1 (en) * | 2011-12-30 | 2019-07-11 | Streamscale, Inc. | Accelerated erasure coding system and method |
US10666296B2 (en) * | 2011-12-30 | 2020-05-26 | Streamscale, Inc. | Accelerated erasure coding system and method |
US10664347B2 (en) * | 2011-12-30 | 2020-05-26 | Streamscale, Inc. | Using parity data for concurrent data authentication, correction, compression, and encryption |
US8869006B2 (en) * | 2012-02-02 | 2014-10-21 | International Business Machines Corporation | Partial-maximum distance separable (PMDS) erasure correcting codes for storage arrays |
US8874995B2 (en) * | 2012-02-02 | 2014-10-28 | International Business Machines Corporation | Partial-maximum distance separable (PMDS) erasure correcting codes for storage arrays |
CN104160452A (en) * | 2012-02-02 | 2014-11-19 | 国际商业机器公司 | Erasure correcting codes for storage arrays |
US10044372B2 (en) | 2014-09-22 | 2018-08-07 | Streamscale, Inc. | Sliding window list decoder for error correcting codes |
US9722632B2 (en) | 2014-09-22 | 2017-08-01 | Streamscale, Inc. | Sliding window list decoder for error correcting codes |
US11474898B2 (en) * | 2020-12-09 | 2022-10-18 | International Business Machines Corporation | Multiple responder approach to systems with different types of failures |
Also Published As
Publication number | Publication date |
---|---|
US20040260994A1 (en) | 2004-12-23 |
Similar Documents
Publication | Publication Date | Title |
---|---|---|
US7350126B2 (en) | Method for constructing erasure correcting codes whose implementation requires only exclusive ORs | |
US8041989B2 (en) | System and method for providing a high fault tolerant memory system | |
US7844880B2 (en) | Error correction for flash memory | |
US8869006B2 (en) | Partial-maximum distance separable (PMDS) erasure correcting codes for storage arrays | |
EP1828899B1 (en) | Method and system for syndrome generation and data recovery | |
US8145941B2 (en) | Detection and correction of block-level data corruption in fault-tolerant data-storage systems | |
Corbett et al. | Row-diagonal parity for double disk failure correction | |
US5333143A (en) | Method and means for b-adjacent coding and rebuilding data from up to two unavailable DASDS in a DASD array | |
US6041430A (en) | Error detection and correction code for data and check code fields | |
US7398449B1 (en) | Encoding 64-bit data nibble error correct and cyclic-redundancy code (CRC) address error detect for use on a 76-bit memory module | |
US5644695A (en) | Array combinatorial decoding with multiple error and erasure detection and location using cyclic equivalence testing | |
US7231585B2 (en) | Error correction for flash memory | |
US20100138691A1 (en) | Redundant array of independent disks level 5 (raid 5) with a mirroring functionality | |
CN109358980B (en) | RAID6 encoding method friendly to data updating and single-disk error recovery | |
Huang et al. | XI-Code: a family of practical lowest density MDS array codes of distance 4 | |
JP2589957B2 (en) | Coding method and memory system for single sub-block error and single bit error detection | |
US20060123321A1 (en) | System and method for reconstructing lost data in a storage system | |
US20070006019A1 (en) | Data storage system | |
US10824504B2 (en) | Common high and low random bit error correction logic | |
Huang et al. | Optimal encoding and decoding algorithms for the raid-6 liberation codes | |
US20050066254A1 (en) | Error detection in redundant array of storage units | |
Sazeides et al. | Implicit-storing and redundant-encoding-of-attribute information in error-correction-codes | |
US11831333B2 (en) | Encoding for data recovery in storage systems | |
Hu et al. | An efficient coding scheme for tolerating double disk failures | |
Park et al. | A practical parity scheme for tolerating triple disk failures in RAID architectures |
Legal Events
Date | Code | Title | Description |
---|---|---|---|
AS | Assignment |
Owner name: INTERNATIONAL BUSINESS MACHINES CORPORATION, NEW YFree format text: ASSIGNMENT OF ASSIGNORS INTEREST;ASSIGNORS:WINOGRAD, SHMUEL;TRAGER, BARRY M.;REEL/FRAME:014224/0379;SIGNING DATES FROM 20030616 TO 20030617 |
|
STCF | Information on status: patent grant |
Free format text: PATENTED CASE |
|
AS | Assignment |
Owner name: GOOGLE INC., CALIFORNIAFree format text: ASSIGNMENT OF ASSIGNORS INTEREST;ASSIGNOR:INTERNATIONAL BUSINESS MACHINES CORPORATION;REEL/FRAME:026894/0001Effective date: 20110817 |
|
FPAY | Fee payment |
Year of fee payment: 4 |
|
FPAY | Fee payment |
Year of fee payment: 8 |
|
AS | Assignment |
Owner name: GOOGLE LLC, CALIFORNIAFree format text: CHANGE OF NAME;ASSIGNOR:GOOGLE INC.;REEL/FRAME:044101/0610Effective date: 20170929 |
|
FEPP | Fee payment procedure |
Free format text: MAINTENANCE FEE REMINDER MAILED (ORIGINAL EVENT CODE: REM.); ENTITY STATUS OF PATENT OWNER: LARGE ENTITY |
|
LAPS | Lapse for failure to pay maintenance fees |
Free format text: PATENT EXPIRED FOR FAILURE TO PAY MAINTENANCE FEES (ORIGINAL EVENT CODE: EXP.); ENTITY STATUS OF PATENT OWNER: LARGE ENTITY |
|
STCH | Information on status: patent discontinuation |
Free format text: PATENT EXPIRED DUE TO NONPAYMENT OF MAINTENANCE FEES UNDER 37 CFR 1.362 |
|
FP | Lapsed due to failure to pay maintenance fee |
Effective date: 20200325 |