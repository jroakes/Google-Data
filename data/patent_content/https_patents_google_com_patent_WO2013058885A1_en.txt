WO2013058885A1 - Selective notification of native applications - Google Patents
Selective notification of native applications Download PDFInfo
- Publication number
- WO2013058885A1 WO2013058885A1 PCT/US2012/054087 US2012054087W WO2013058885A1 WO 2013058885 A1 WO2013058885 A1 WO 2013058885A1 US 2012054087 W US2012054087 W US 2012054087W WO 2013058885 A1 WO2013058885 A1 WO 2013058885A1
- Authority
- WO
- WIPO (PCT)
- Prior art keywords
- application
- web application
- notification
- native application
- web
- Prior art date
Links
Classifications
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F9/00—Arrangements for program control, e.g. control units
- G06F9/06—Arrangements for program control, e.g. control units using stored programs, i.e. using an internal store of processing equipment to receive or retain programs
- G06F9/44—Arrangements for executing specific programs
- G06F9/445—Program loading or initiating
- G06F9/44521—Dynamic linking or loading; Link editing at or after load time, e.g. Java class loading
- G06F9/44526—Plug-ins; Add-ons
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F8/00—Arrangements for software engineering
- G06F8/60—Software deployment
- G06F8/61—Installation
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04L—TRANSMISSION OF DIGITAL INFORMATION, e.g. TELEGRAPHIC COMMUNICATION
- H04L67/00—Network arrangements or protocols for supporting network services or applications
- H04L67/34—Network arrangements or protocols for supporting network services or applications involving the movement of software or configuration parameters
Definitions
- the present specification relates to content serving.
- a content provider can generate content and serve content to users across data networks such as the Internet.
- the content may take different display formats based on the type of device used to render and display the content. For example, a webpage can be displayed in a desktop format on a desktop web browser, a mobile format on a mobile web browser, an RSS feed that records recent updates, and mobile applications native to mobile clients.
- Each display format may be configured to take advantage of display and input capabilities of a particular display device (e.g. GPS in a mobile phone, a large screen on a desktop computer), and may be designed to avoid shortcomings of display devices (e.g. a small screen on a mobile phone, lack of GPS in a desktop computer).
- the code of a webpage with a native application alternative can include a reference to the native application alternative.
- the browser rendering the page or another system can determine whether to display a notification of the native application alternative.
- This displaying may take place in the browser, for example as an interactive button for the user to press.
- the display may also take place in a different application, for example the native application can have a search result boost the next time the user opens an application market to find new applications.
- the notification can respect user and system settings, such as displaying in a way specified by the user and only if the device used is compatible with the native application alternative.
- a process includes receiving code for a web application, the code including a reference to the native application equivalent to the web application, and determining whether to display a notification regarding the native application equivalent to the web application, then selectively displaying the notification regarding the native application equivalent to the web application based on the determination.
- a process includes receiving, by a client device, code for a web application, the code including a reference to a native application equivalent to the web application, and determining, by the client device, whether to display a notification regarding installation of the native application equivalent to the web application on the client device, then selectively displaying the notification regarding installation of the native application equivalent to the web application on the client device based on the determination.
- a process includes receiving code for a web application, the code including a reference to a native application equivalent to the web application, and determining whether the native application equivalent to the web application is already installed on one or more of the computers, then displaying the notification regarding the native application equivalent to the web application based on determining that the native application equivalent to the web application is not already installed on the one or more computers.
- a process includes receiving code for a web application, the code identifying a native application that corresponds to the web application, and determining that the native application that corresponds to the web application is already installed on one or more of the computers, then blocking a notification to install the native application that corresponds to the web application.
- Other embodiments of these aspects include corresponding methods, systems, apparatus, and computer programs, configured to perform the actions of the methods, encoded on computer storage devices.
- the reference to the native application equivalent to the web application is included in a META tag in a header of the code; the process includes rendering the web application, where selectively displaying the notification includes displaying the notification in the rendered web application;
- determining whether to display a notification includes determining whether the native application is already installed on a device; determining whether to display a notification includes determining whether the native application is available;
- determining whether to display a notification includes determining whether the native application is permitted to be installed; determining whether to display a notification includes determining whether notifications are enabled; and/or determining whether to display a notification includes determining whether the native application is compatible with a device that receives the code for the web application;
- the determination is made by a mobile device that receives the code for the web application; determining whether to display a notification includes transmitting, to one or more servers and by a mobile device that receives the code for the web application, a request to make the determination, and receiving, from the one or more servers and by the mobile device, a result of making the determination; the process includes determining a time when the notification is to be displayed; wherein the notification is displayed at the determined time; selectively displaying the notification includes displaying an application recommendation regarding the native application; selectively displaying the notification includes not displaying the notification when the determination is made to not display the notification; the process includes validating the reference to the native application equivalent to the web application; and/or validating the reference includes determining that an address associated with the reference matches an address of a web server from which the code for the code was received.
- Webpages with native application alternatives may restrict notification of the native application alternative to users that wish to receive them and to devices that are able to install them.
- User searching for native applications can be refined based on past web browsing.
- Native application notifications can be restricted to only be displayed on the websites of the publisher of the native application. Verifying the native application can prevent notifications of malicious or unwanted native applications.
- FIG. 1 is a diagram of an example system that displays a web application that has a corresponding native application equivalent.
- FIG. 2 is a flow chart illustrating an example process for notifying a user about a native application equivalent.
- FIG. 3 is a diagram of example users interfaces for replacing a web application with a native application.
- FIG. 4 is a schematic diagram that shows an example of a computing system that may be used in connection with computer-implemented methods and systems described in this document.
- FIG. 1 is a diagram of an example system 100 that displays a web application that has a corresponding native application equivalent.
- a user is using a user device 102 to browse the Internet, and requests a web application 104 on a content provider web server 106.
- the content provider web server 106 can serve the web application 104 with a reference to a native application 108.
- the user device 102 optionally with a native application evaluation engine 1 10, can render the web application 104 and the reference to the native application 108.
- the user device 102, the content provider web server 106, and the native application evaluation engine 1 10 can be implemented, for example, as computing devices 400 and/or mobile computing devices 450 described with reference to FIG. 4 below.
- the content provider web server 106 and the native application evaluation engine 1 10 will be described as separate web servers under different administrative domains, and the user device 102 will be described as a mobile phone.
- the content provider web server 106 and the native application evaluation engine 1 10 may be incorporated in the same computer device, and the user device 102 could be a desktop computer.
- the user device 102, the content provider web server 106, and the native application evaluation engine 1 10 are all connected to a network 1 12 (e.g. the Internet) for communication with each other and other computer systems.
- a network 1 12 e.g. the Internet
- the content provider web server 106 is a public facing web server that, among other features, can receive request the web application 104 and respond with messages containing the code of the web application 104 and, optionally, the reference to the native application 108.
- the reference to the native application 108 identifies a native application 1 14 that may be stored by and served from the content provider web server 106 or another computer system.
- the native application 1 14 and the web application 104 may both provide the same content to users in different formats.
- a web application 104 may be an HTML web page with embedded scripting to provide a user with an editable spreadsheet.
- the native application 1 14 may be an application configured to run on a user device that provides a user with the same editable spreadsheet, optionally with different input or output format based on the capacities of the user device.
- the web application 104 is software that is downloaded, in whole or part, each time that it is run, and that is hosted within a browser-controlled environment, or coded in a browser-supported language. Used here, the web application 104 is not limited to interactive or editable digital assets.
- Web applications 104 also include, for example, substantially static web pages (e.g.
- the native application 1 14 can include software that is stored and run on a device's operating system and machine firmware, or on an environment hosted on the device's operating system and machine firmware (e.g. a virtual machine or a managed runtime environment).
- a native application equivalent includes a native application that implements the same functionality as is implemented by the web application
- the content provider web server 106 can reply with the web application 104 (a webpage with a user editable spreadsheet) or with the web application 104 and the reference to the native application 108.
- the reference to the native application 108 included in the reply can take a variety of forms, such as being included in a META tag in a header of the code of the reply.
- the content provider web server 106 may decide to or not to include the reference to the native application 108 depending on factors such as, for example, the type of user device 102 making the request. This information may be available to the content provider web server 106 based on the user-agent field of the request for the web application 104. Another factor that may be used by the content provider web server 106 is to verify that the requesting user is a "subscribing" or "premium member" that is authorized to use the native application 1 14.
- the user device 102 is an electronic device for displaying content to one or more uses. As previously described, the user device 102 is this example is a mobile phone, but other user devices are possible, including e-book readers, televisions, navigation devices and laptop, tablet, or desktop computers.
- the user device 102 includes a web browser to request, receive, and display remote content, including the web application 104.
- the user device 102 can request the web application 104 and may receive the reference to the native application 108 with the response that includes the code for the web application 104.
- the user device 102 can determine how to handle the reference to the native application 108 according to a set of criteria 1 16.
- the criteria can include logical determinations including, but not limited to, tests such as:
- the criteria 1 16 is stored locally on the user device 102, and optionally backed up to a server or another computer device owned by the user of the user device 102. Additionally, the criteria 1 16 can be stored in the native application evaluation engine 1 10.
- the native application evaluation engine 1 10 can coordinate all of the criteria 1 16 associated with a particular user across all of the user's user device 102. That is, a user may have a mobile phone and a desktop computer registered with the native application evaluation engine 1 10.
- the native application evaluation engine 1 10 can store the criteria 1 16 for both the mobile phone and desktop computer. Some of the criteria 1 16 may apply to both devices (e.g. "Has the user enabled notifications?") and some of the criteria 1 16 may only apply to one or the other device (e.g. "Is the native application 1 14 already installed?")
- validating the reference to the native application 108 includes determining that an address associated with the reference to the native application 108 matches an address of the content provider web server 106.
- the native application 1 14 can be published under a naming convention that specifies the name space of the application as
- ⁇ publisher ⁇ , ⁇ application ⁇ and ⁇ version ⁇ are variables for the publisher, application name, and version number of the native application.
- the user device 102 can check that the ⁇ publisher ⁇ value matches the domain name of the uniform resource locator (URL) of the content provider web server 106. If the ⁇ publisher ⁇ and domain name do not match, the user device 102 may be configured to ignore the reference to the native application.
- URL uniform resource locator
- Examples of cases where the ⁇ publisher ⁇ and domain name do not match include a content provider web server 106 that has been compromised by a malicious program that provides a reference to the native application that is not related to the web application 104, or a content provider web server 106 that deceptively provides references to native applications published by a third party.
- the user device can optionally display the web application with a notification 1 18 or the web application without a notification 120.
- the notification is embedded in the web application as a user- activatable button.
- other formats of notifications are possible, including notifications displayed at later times and/or in other applications.
- the web application may specify a display location and format of the notification.
- the author of the web application may wish to place the notification in an area that is problematic to view or interact with on some types of user devices.
- the operating system or web browser of the user device 102 may handle the reference outside of the web application being rendered.
- the web browser may list any notification in the chrome of the browser, or the operating system may add the notification to a universal notification user interface that also displays notification such as new emails, calendar appointments, etc.
- the user device 102 and/or the native application evaluation engine 1 10 may record the notification for use later or in another software system. For example, the next time the user is in an application market - an application that displays applications for purchase or free installation - the native application 1 14 can be displayed as a suggested application or be assigned a search rank boost.
- the user may set a preference to have the user device 102 automatically download and transition to the native application 1 14 upon receipt of the reference to the native application 108, without any additional user input.
- FIG. 2 is a flow chart illustrating an example process 200 for notifying a user about a native application equivalent.
- the process 200 includes receiving a notification of a native application, and determining if a user should be alerted to the notification.
- the process 200 may be performed by, for example, the user device 102 and the native application evaluation engine 1 10 of the systems 100, but another system, or combination of systems, may also perform the process 200. While a particular number, type, and order of actions are described here, other numbers, orders, and types of actions may be possible within the process 200.
- Code for a web application is received (202).
- the code includes a reference to the native application equivalent to the web application.
- a web browser the user device 102 may send an HTTP GET message to the content provider web server 106 requesting the web application 104.
- the content provider web server 106 may respond with a HTTP response that includes the code of the web application 104 and, within the code of the web application 104, a reference to the native application 108.
- the reference to the native application 108 may include, for example, the URL or package name of the native application 1 14 that is a native application equivalent of the web application 104.
- Code for the reference to the native application equivalent to the web application is parsed (204).
- the web browser of the user device 102 can parse the HTTP response and identify, among other information, the reference to the native application 108.
- An evaluation of whether to notify the user about the native application is made using predefined criteria (206). In some implementation, this evaluation can include determining whether to display a notification regarding the native application equivalent to the web application.
- the user device 102 and/or the native application evaluation engine 1 10 can compare the criteria 1 16 to the state of the user device 102, metadata of the reference to the native application 108, or other input to determine if the notification should be displayed to the user.
- test option A list of possible criteria 1 16 test option is provided below, but other test options are possible.
- the user device 102 and/or the native application evaluation engine 1 10 can be configured to use multiple test options for the same notification, or different test options for different classes of notifications.
- the criteria 1 16 can include determining whether the native application is already installed on a device. For example, the user device 102 or the native application evaluation engine 1 10 may access a list of native application already installed on the user device 102 and reject any matching an entry in that list.
- the criteria 1 16 can include determining whether the native application is available.
- the reference to the native application 108 may refer to an application that has been discontinued or the reference to the native application 108 may be malformed and not point to any native application 1 14.
- the criteria 1 16 can include determining whether the native application is permitted to be installed.
- the native application 1 14 may be restricted by user location (e.g. only in some countries) or only to users that have paid for a service or for the native application 1 14.
- the criteria 1 16 can include determining whether notifications are enabled. For example, the user of the user device 102 may have previously set a system level preference to not receive any native application notifications, or only native application notification of a particular class (e.g. only free application).
- the criteria 1 16 can include determining whether the native application is compatible with a device that receives the code for the web application. For example, the user device 102 may not meet the hardware and/or software requirements of the native application 1 14 or may have some required security features disabled.
- the user device 102 may be configured to perform the evaluation, the native application evaluation engine 1 10 may be configured to perform the evaluation, or the two may be configured to interact to perform the evaluation. In some
- the browser or operating system of the user device 102 can perform this evaluation substantially 'in-line' with rendering the web application 104. That is, the evaluation may be made locally by the user device 102 without any additional communication to another computer system. In some other
- the user device 102 can transmit, to the native application evaluation engine 1 10 and/or other systems, a request to make the evaluation.
- This request can include addition information, such as a user identifier, the state of the user device 102, etc.
- the native application evaluation engine 1 10 and/or the other systems can receive, process, and reply to this request with an indication to display or not display the notification.
- the user device may perform a first evaluation based on limited criteria 1 16 (e.g. the state of the user device 102) and the native application evaluation engine 1 10 can perform a second evaluation based on different criteria 1 16 (e.g. user preferences that apply to all devices used by the user)
- a type of notification display can be selected (208). If the evaluation is to not display the notification, then no notification display may need be selected. If the evaluation is to display the notification, one or more styles of display may be selected.
- Example notification displays include, but are not limited to, logging the notification for use by a different application, displaying the notification as part of the web application 104, displaying the notification by the application displaying the web 104, or displaying the notification with an operating system feature.
- the web application is rendered with the notification (210). This notification may be displayed at the same time as the web application 104, or the user device 102 and/or the native application evaluation engine 1 10 may determine a time when the notification is to be displayed. Later, the user device 102 or another device associated with the user, either by way of the operating system, the browser rendering the web application 104, or another application can display the notification to the user.
- the web application is rendered without the notification (212).
- the web application 104 rendered without the notification may appear to the use substantially identical to the web application 104 if no reference to the native application 108 was provided to the user device 102.
- FIG. 3 is a diagram of example users interfaces for replacing a web application with a native application.
- the user interfaces illustrates a sequence of screens of a mobile phone where a user is notified of a native application alternative to a web application, and where the user chooses to use the native application instead of the web application.
- Interface 300 shows an example web application that begins with a "GO" button and instructions to press the "GO" button for some action to start. The exact nature of the web application is unimportant for this example, except to note the "GO" button to start some of functionality.
- a placeholder location is specified by the web application for a notification to be placed by the web browser rendering the web application. In practice, this placeholder location need not be actually shown to the user and may be defined by non-rendering metadata in the Interface 300. The placeholder location may also define the look-and-feel and functionality of the notification, if it is to be displayed to the user.
- Interface 302 shows the example web application with the notification displayed to the user.
- the user device or another system has determined that the notification should be shown to the user.
- the user may have specified in a setting screen that the user wishes to see this type of notification.
- the notification takes the form of a user- activatable button in the web application. If the user activates the button, the user is transitioned to an application market at an entry for the native application that is an equivalent to the web application.
- Interface 304 shows the application market opened to the native application equivalent.
- the application market is a program that allows the user to browse available native applications available on the user device. In some other
- the user instead of being directed to an application market, the user may be directed to a webpage managed by the native application publisher that permits the user to download the native application.
- the user may press the purchase button on the application market screen to purchase, download, and install the native application.
- the purchase button may be replaced by a download or install button.
- Interface 306 shows the native application equivalent to the web application.
- the native application is configured specifically for a touch-pad enabled user device and consists of a user-dragable interface element "Ready". Dragging the "Ready" element to the "GO" dock initiates substantially the same action in the native application as pressing the "GO" button in the web application.
- the transition from the interface 302 to the interface 304 and then to the interface 306 can maintain information from the interface 302. For example, if a user is logged into the web application in the interface 302 or has data already generated, this information can be retained and loaded into the native application in the interface 306.
- FIG. 4 shows an example of a computing device 400 and a mobile computing device that can be used to implement the techniques described here.
- the computing device 400 is intended to represent various forms of digital computers, such as laptops, desktops, workstations, personal digital assistants, servers, blade servers, mainframes, and other appropriate computers.
- the mobile computing device is intended to represent various forms of mobile devices, such as personal digital assistants, cellular telephones, smart-phones, and other similar computing devices.
- the components shown here, their connections and relationships, and their functions, are meant to be exemplary only, and are not meant to limit
- the computing device 400 includes a processor 402, a memory 404, a storage device 406, a high-speed interface 408 connecting to the memory 404 and multiple high-speed expansion ports 410, and a low-speed interface 412 connecting to a low-speed expansion port 414 and the storage device 406.
- Each of the processor 402, the memory 404, the storage device 406, the high-speed interface 408, the high-speed expansion ports 410, and the low-speed interface 412 are interconnected using various busses, and may be mounted on a common
- the processor 402 can process instructions for execution within the computing device 400, including instructions stored in the memory 404 or on the storage device 406 to display graphical information for a GUI on an external input/output device, such as a display 416 coupled to the high-speed interface 408.
- an external input/output device such as a display 416 coupled to the high-speed interface 408.
- multiple processors and/or multiple buses may be used, as appropriate, along with multiple memories and types of memory.
- multiple computing devices may be connected, with each device providing portions of the necessary operations (e.g., as a server bank, a group of blade servers, or a multi-processor system).
- the memory 404 stores information within the computing device 400.
- the memory 404 is a volatile memory unit or units.
- the memory 404 is a non-volatile memory unit or units.
- the memory 404 may also be another form of computer-readable medium, such as a magnetic or optical disk.
- the storage device 406 is capable of providing mass storage for the computing device 400.
- the storage device 406 may be or contain a computer-readable medium, such as a floppy disk device, a hard disk device, an optical disk device, or a tape device, a flash memory or other similar solid state memory device, or an array of devices, including devices in a storage area network or other configurations.
- a computer program product can be tangibly embodied in an information carrier.
- the computer program product may also contain instructions that, when executed, perform one or more methods, such as those described above.
- the computer program product can also be tangibly embodied in a computer- or machine-readable medium, such as the memory 404, the storage device 406, or memory on the processor 402.
- the high-speed interface 408 manages bandwidth-intensive operations for the computing device 400, while the low-speed interface 412 manages lower bandwidth- intensive operations. Such allocation of functions is exemplary only.
- the high-speed interface 408 is coupled to the memory 404, the display 416 (e.g., through a graphics processor or accelerator), and to the highspeed expansion ports 410, which may accept various expansion cards (not shown).
- the low-speed interface 412 is coupled to the storage device 406 and the low-speed expansion port 414.
- the low-speed expansion port 414 which may include various communication ports (e.g., USB, Bluetooth, Ethernet, wireless Ethernet) may be coupled to one or more input/output devices, such as a keyboard, a pointing device, a scanner, or a networking device such as a switch or router, e.g., through a network adapter.
- input/output devices such as a keyboard, a pointing device, a scanner, or a networking device such as a switch or router, e.g., through a network adapter.
- the computing device 400 may be implemented in a number of different forms, as shown in the figure. For example, it may be implemented as a standard server 420, or multiple times in a group of such servers. In addition, it may be implemented in a personal computer such as a laptop computer 422. It may also be implemented as part of a rack server system 424. Alternatively, components from the computing device 400 may be combined with other components in a mobile device (not shown), such as a mobile computing device 450. Each of such devices may contain one or more of the computing device 400 and the mobile computing device 450, and an entire system may be made up of multiple computing devices communicating with each other.
- the mobile computing device 450 includes a processor 452, a memory 464, an input/output device such as a display 454, a communication interface 466, and a transceiver 468, among other components.
- the mobile computing device 450 may also be provided with a storage device, such as a micro-drive or other device, to provide additional storage.
- a storage device such as a micro-drive or other device, to provide additional storage.
- Each of the processor 452, the memory 464, the display 454, the communication interface 466, and the transceiver 468, are interconnected using various buses, and several of the components may be mounted on a common motherboard or in other manners as appropriate.
- the processor 452 can execute instructions within the mobile computing device 450, including instructions stored in the memory 464.
- the processor 452 may be implemented as a chipset of chips that include separate and multiple analog and digital processors.
- the processor 452 may provide, for example, for
- the mobile computing device 450 coordination of the other components of the mobile computing device 450, such as control of user interfaces, applications run by the mobile computing device 450, and wireless communication by the mobile computing device 450.
- the processor 452 may communicate with a user through a control interface 458 and a display interface 456 coupled to the display 454.
- the display 454 may be, for example, a TFT (Thin-Film-Transistor Liquid Crystal Display) display or an OLED (Organic Light Emitting Diode) display, or other appropriate display technology.
- the display interface 456 may comprise appropriate circuitry for driving the display 454 to present graphical and other information to a user.
- the control interface 458 may receive commands from a user and convert them for submission to the processor 452.
- an external interface 462 may provide communication with the processor 452, so as to enable near area communication of the mobile computing device 450 with other devices.
- the external interface 462 may provide, for example, for wired communication in some implementations, or for wireless communication in other implementations, and multiple interfaces may also be used.
- the memory 464 stores information within the mobile computing device 450.
- the memory 464 can be implemented as one or more of a computer-readable medium or media, a volatile memory unit or units, or a non-volatile memory unit or units.
- An expansion memory 474 may also be provided and connected to the mobile computing device 450 through an expansion interface 472, which may include, for example, a SIMM (Single In Line Memory Module) card interface.
- SIMM Single In Line Memory Module
- the expansion memory 474 may provide extra storage space for the mobile computing device 450, or may also store applications or other information for the mobile computing device 450.
- the expansion memory 474 may include instructions to carry out or supplement the processes described above, and may include secure information also.
- the expansion memory 474 may be provide as a security module for the mobile computing device 450, and may be programmed with instructions that permit secure use of the mobile computing device 450.
- secure applications may be provided via the SIMM cards, along with additional information, such as placing identifying information on the SIMM card in a non- hackable manner.
- the memory may include, for example, flash memory and/or NVRAM memory (non-volatile random access memory), as discussed below.
- NVRAM non-volatile random access memory
- a computer program product is tangibly embodied in an information carrier.
- the computer program product contains instructions that, when executed, perform one or more methods, such as those described above.
- the computer program product can be a computer- or machine-readable medium, such as the memory 464, the expansion memory 474, or memory on the processor 452.
- the computer program product can be received in a propagated signal, for example, over the transceiver 468 or the external interface 462.
- the mobile computing device 450 may communicate wirelessly through the communication interface 466, which may include digital signal processing circuitry where necessary.
- the communication interface 466 may provide for
- GSM voice calls Global System for Mobile communications
- SMS Short Message Service
- EMS EMS
- Such communication may occur, for example, through the transceiver 468 using a radio-frequency.
- short-range communication may occur, such as using a Bluetooth, WiFi, or other such transceiver (not shown).
- GPS Global Positioning System
- a GPS receiver module 470 may provide additional navigation- and location-related wireless data to the mobile computing device 450, which may be used as appropriate by applications running on the mobile computing device 450.
- the mobile computing device 450 may also communicate audibly using an audio codec 460, which may receive spoken information from a user and convert it to usable digital information.
- the audio codec 460 may likewise generate audible sound for a user, such as through a speaker, e.g., in a handset of the mobile computing device 450.
- Such sound may include sound from voice telephone calls, may include recorded sound (e.g., voice messages, music files, etc.) and may also include sound generated by applications operating on the mobile computing device 450.
- the mobile computing device 450 may be implemented in a number of different forms, as shown in the figure. For example, it may be implemented as a cellular telephone 480. It may also be implemented as part of a smart-phone 482, personal digital assistant, or other similar mobile device.
- Various implementations of the systems and techniques described here can be realized in digital electronic circuitry, integrated circuitry, specially designed ASICs (application specific integrated circuits), computer hardware, firmware, software, and/or combinations thereof.
- ASICs application specific integrated circuits
- These various implementations can include implementation in one or more computer programs that are executable and/or interpretable on a programmable system including at least one programmable processor, which may be special or general purpose, coupled to receive data and instructions from, and to transmit data and instructions to, a storage system, at least one input device, and at least one output device.
- These computer programs include machine instructions for a programmable processor, and can be implemented in a high-level procedural and/or object-oriented
- machine-readable medium and computer-readable medium refer to any computer program product, apparatus and/or device (e.g., magnetic discs, optical disks, memory, Programmable Logic Devices (PLDs)) used to provide machine instructions and/or data to a programmable processor, including a machine-readable medium that receives machine instructions as a machine-readable signal.
- machine-readable signal refers to any signal used to provide machine instructions and/or data to a programmable processor.
- the systems and techniques described here can be implemented on a computer having a display device (e.g., a CRT (cathode ray tube) or LCD (liquid crystal display) monitor) for displaying information to the user and a keyboard and a pointing device (e.g., a mouse or a trackball) by which the user can provide input to the computer.
- a display device e.g., a CRT (cathode ray tube) or LCD (liquid crystal display) monitor
- a keyboard and a pointing device e.g., a mouse or a trackball
- Other kinds of devices can be used to provide for interaction with a user as well; for example, feedback provided to the user can be any form of sensory feedback (e.g., visual feedback, auditory feedback, or tactile feedback); and input from the user can be received in any form, including acoustic, speech, or tactile input.
- the systems and techniques described here can be implemented in a computing system that includes a back end component (e.g., as a data server), or that includes a middleware component (e.g., an application server), or that includes a front end component (e.g., a client computer having a graphical user interface or a Web browser through which a user can interact with an implementation of the systems and techniques described here), or any combination of such back end, middleware, or front end components.
- the components of the system can be interconnected by any form or medium of digital data communication (e.g., a communication network). Examples of communication networks include a local area network (LAN), a wide area network (WAN), and the Internet.
- LAN local area network
- WAN wide area network
- the Internet the global information network
- the computing system can include clients and servers.
- a client and server are generally remote from each other and typically interact through a communication network.
- the relationship of client and server arises by virtue of computer programs running on the respective computers and having a client-server relationship to each other.
Abstract
Methods, systems, and apparatus, including computer programs encoded on a computer storage medium, for providing selective notifications. In one aspect, a method includes receiving code for a web application, the code including a reference to a native application equivalent to the web application, and determining whether to display a notification regarding the native application equivalent to the web application, then selectively displaying the notification regarding the native application equivalent to the web application based on the determination.
Description
SELECTIVE NOTIFICATION OF NATIVE APPLICATIONS
CROSS-REFERENCE TO RELATED APPLICATION
[0001] This application claims the benefit of U.S. Provisional Pat. App. No.
61 /547,810, filed October 17, 201 1 , and U.S. Pat. App. No. 13/490,123, filed June 6, 2012, which are incorporated herein by reference.
BACKGROUND
[0002] The present specification relates to content serving.
[0003] A content provider can generate content and serve content to users across data networks such as the Internet. The content may take different display formats based on the type of device used to render and display the content. For example, a webpage can be displayed in a desktop format on a desktop web browser, a mobile format on a mobile web browser, an RSS feed that records recent updates, and mobile applications native to mobile clients. Each display format may be configured to take advantage of display and input capabilities of a particular display device (e.g. GPS in a mobile phone, a large screen on a desktop computer), and may be designed to avoid shortcomings of display devices (e.g. a small screen on a mobile phone, lack of GPS in a desktop computer).
SUMMARY
[0004] According to one innovative aspect of the subject matter described in this specification, the code of a webpage with a native application alternative can include a reference to the native application alternative. When the code is loaded, the browser rendering the page or another system can determine whether to display a notification of the native application alternative. This displaying may take place in the browser, for example as an interactive button for the user to press. The display may also take place in a different application, for example the native application can have a search result boost the next time the user opens an application market to find new applications. According to another innovative aspect of the subject matter described in this specification, the notification can respect user and system settings,
such as displaying in a way specified by the user and only if the device used is compatible with the native application alternative.
[0005] According to another innovative aspect of the subject matter described in this specification, a process includes receiving code for a web application, the code including a reference to the native application equivalent to the web application, and determining whether to display a notification regarding the native application equivalent to the web application, then selectively displaying the notification regarding the native application equivalent to the web application based on the determination.
[0006] According to another innovative aspect of the subject matter described in this specification, a process includes receiving, by a client device, code for a web application, the code including a reference to a native application equivalent to the web application, and determining, by the client device, whether to display a notification regarding installation of the native application equivalent to the web application on the client device, then selectively displaying the notification regarding installation of the native application equivalent to the web application on the client device based on the determination.
[0007] According to another innovative aspect of the subject matter described in this specification, a process includes receiving code for a web application, the code including a reference to a native application equivalent to the web application, and determining whether the native application equivalent to the web application is already installed on one or more of the computers, then displaying the notification regarding the native application equivalent to the web application based on determining that the native application equivalent to the web application is not already installed on the one or more computers.
[0008] According to another innovative aspect of the subject matter described in this specification, a process includes receiving code for a web application, the code identifying a native application that corresponds to the web application, and determining that the native application that corresponds to the web application is already installed on one or more of the computers, then blocking a notification to install the native application that corresponds to the web application.
[0009] Other embodiments of these aspects include corresponding methods, systems, apparatus, and computer programs, configured to perform the actions of the methods, encoded on computer storage devices.
[0010] These and other implementations may each optionally include one or more of the following features. For instance, the reference to the native application equivalent to the web application is included in a META tag in a header of the code; the process includes rendering the web application, where selectively displaying the notification includes displaying the notification in the rendered web application;
determining whether to display a notification includes determining whether the native application is already installed on a device; determining whether to display a notification includes determining whether the native application is available;
determining whether to display a notification includes determining whether the native application is permitted to be installed; determining whether to display a notification includes determining whether notifications are enabled; and/or determining whether to display a notification includes determining whether the native application is compatible with a device that receives the code for the web application;
[001 1] In some implementations, the determination is made by a mobile device that receives the code for the web application; determining whether to display a notification includes transmitting, to one or more servers and by a mobile device that receives the code for the web application, a request to make the determination, and receiving, from the one or more servers and by the mobile device, a result of making the determination; the process includes determining a time when the notification is to be displayed; wherein the notification is displayed at the determined time; selectively displaying the notification includes displaying an application recommendation regarding the native application; selectively displaying the notification includes not displaying the notification when the determination is made to not display the notification; the process includes validating the reference to the native application equivalent to the web application; and/or validating the reference includes determining that an address associated with the reference matches an address of a web server from which the code for the code was received.
[0012] Advantageous implementations may include one or more of the following features. Webpages with native application alternatives may restrict notification of the native application alternative to users that wish to receive them and to devices
that are able to install them. User searching for native applications can be refined based on past web browsing. Native application notifications can be restricted to only be displayed on the websites of the publisher of the native application. Verifying the native application can prevent notifications of malicious or unwanted native applications.
[0013] The details of one or more implementations are set forth in the accompanying drawings and the description below. Other potential features and advantages will become apparent from the description, the drawings, and the claims.
BRIEF DESCRIPTION OF THE DRAWINGS
[0014] FIG. 1 is a diagram of an example system that displays a web application that has a corresponding native application equivalent.
[0015] FIG. 2 is a flow chart illustrating an example process for notifying a user about a native application equivalent.
[0016] FIG. 3 is a diagram of example users interfaces for replacing a web application with a native application.
[0017] FIG. 4 is a schematic diagram that shows an example of a computing system that may be used in connection with computer-implemented methods and systems described in this document.
[0018] Like reference numbers and designations in the various drawings indicate like elements.
DETAILED DESCRIPTION
[0019] FIG. 1 is a diagram of an example system 100 that displays a web application that has a corresponding native application equivalent. In the system 100, a user is using a user device 102 to browse the Internet, and requests a web application 104 on a content provider web server 106. The content provider web server 106 can serve the web application 104 with a reference to a native application 108. The user device 102, optionally with a native application evaluation engine 1 10, can render the web application 104 and the reference to the native application 108.
[0020] The user device 102, the content provider web server 106, and the native application evaluation engine 1 10 can be implemented, for example, as computing devices 400 and/or mobile computing devices 450 described with reference to FIG. 4 below. In this example, the content provider web server 106 and the native application evaluation engine 1 10 will be described as separate web servers under different administrative domains, and the user device 102 will be described as a mobile phone. However, other configurations are possible. For example, the content provider web server 106 and the native application evaluation engine 1 10 may be incorporated in the same computer device, and the user device 102 could be a desktop computer. The user device 102, the content provider web server 106, and the native application evaluation engine 1 10 are all connected to a network 1 12 (e.g. the Internet) for communication with each other and other computer systems.
[0021] The content provider web server 106 is a public facing web server that, among other features, can receive request the web application 104 and respond with messages containing the code of the web application 104 and, optionally, the reference to the native application 108. The reference to the native application 108 identifies a native application 1 14 that may be stored by and served from the content provider web server 106 or another computer system. The native application 1 14 and the web application 104 may both provide the same content to users in different formats.
[0022] For example, a web application 104 may be an HTML web page with embedded scripting to provide a user with an editable spreadsheet. The native application 1 14 may be an application configured to run on a user device that provides a user with the same editable spreadsheet, optionally with different input or output format based on the capacities of the user device. In many, but not all, cases, the web application 104 is software that is downloaded, in whole or part, each time that it is run, and that is hosted within a browser-controlled environment, or coded in a browser-supported language. Used here, the web application 104 is not limited to interactive or editable digital assets. Web applications 104 also include, for example, substantially static web pages (e.g. a news website, discussion forum) as well as more interactive assets (e.g. chat/messaging websites, hosted applications). The native application 1 14 can include software that is stored and run on a device's operating system and machine firmware, or on an environment hosted on the
device's operating system and machine firmware (e.g. a virtual machine or a managed runtime environment). A native application equivalent includes a native application that implements the same functionality as is implemented by the web application
[0023] Continuing with the example of a user editable spreadsheet, when the content provider web server 106 receives a request for the web application 104, the content provider web server 106 can reply with the web application 104 (a webpage with a user editable spreadsheet) or with the web application 104 and the reference to the native application 108. The reference to the native application 108 included in the reply can take a variety of forms, such as being included in a META tag in a header of the code of the reply.
[0024] In some implementations, the content provider web server 106 may decide to or not to include the reference to the native application 108 depending on factors such as, for example, the type of user device 102 making the request. This information may be available to the content provider web server 106 based on the user-agent field of the request for the web application 104. Another factor that may be used by the content provider web server 106 is to verify that the requesting user is a "subscribing" or "premium member" that is authorized to use the native application 1 14.
[0025] The user device 102 is an electronic device for displaying content to one or more uses. As previously described, the user device 102 is this example is a mobile phone, but other user devices are possible, including e-book readers, televisions, navigation devices and laptop, tablet, or desktop computers. The user device 102 includes a web browser to request, receive, and display remote content, including the web application 104.
[0026] The user device 102 can request the web application 104 and may receive the reference to the native application 108 with the response that includes the code for the web application 104. The user device 102 can determine how to handle the reference to the native application 108 according to a set of criteria 1 16. The criteria can include logical determinations including, but not limited to, tests such as:
[0027] "Is the native application 1 14 already installed?"
[0028] "Is the native application 1 14 available on the platform of the user device 102?;
[0029] "Is the native application 1 14 distributed in the country in which the user device is registered?"
[0030] "Has the user enabled notifications?'
[0031] In some implementations, the criteria 1 16 is stored locally on the user device 102, and optionally backed up to a server or another computer device owned by the user of the user device 102. Additionally, the criteria 1 16 can be stored in the native application evaluation engine 1 10. The native application evaluation engine 1 10 can coordinate all of the criteria 1 16 associated with a particular user across all of the user's user device 102. That is, a user may have a mobile phone and a desktop computer registered with the native application evaluation engine 1 10. The native application evaluation engine 1 10 can store the criteria 1 16 for both the mobile phone and desktop computer. Some of the criteria 1 16 may apply to both devices (e.g. "Has the user enabled notifications?") and some of the criteria 1 16 may only apply to one or the other device (e.g. "Is the native application 1 14 already installed?")
[0032] Upon receipt of the reference to the native application 108, the user device 102 or the native application evaluation engine 1 10 can validate the reference to the native application 108. This validation process can ensure, for example, that the web application 104 and the native application 1 14 are both from the same content provider or that the native application 1 14 is not blacklisted (e.g. by an anti-virus application). In some implementations, validating the reference to the native application 108 includes determining that an address associated with the reference to the native application 108 matches an address of the content provider web server 106.
[0033] For example, the native application 1 14 can be published under a naming convention that specifies the name space of the application as
com.{publisher}.{application}.{version}. In this example, {publisher}, {application} and {version} are variables for the publisher, application name, and version number of the native application. The user device 102 can check that the {publisher} value matches the domain name of the uniform resource locator (URL) of the content
provider web server 106. If the {publisher} and domain name do not match, the user device 102 may be configured to ignore the reference to the native application. Examples of cases where the {publisher} and domain name do not match include a content provider web server 106 that has been compromised by a malicious program that provides a reference to the native application that is not related to the web application 104, or a content provider web server 106 that deceptively provides references to native applications published by a third party.
[0034] Based on the criteria 1 16, the user device can optionally display the web application with a notification 1 18 or the web application without a notification 120. In the example shown, the notification is embedded in the web application as a user- activatable button. However, other formats of notifications are possible, including notifications displayed at later times and/or in other applications.
[0035] The web application may specify a display location and format of the notification. In this case, the author of the web application may wish to place the notification in an area that is problematic to view or interact with on some types of user devices. The operating system or web browser of the user device 102 may handle the reference outside of the web application being rendered. For example, the web browser may list any notification in the chrome of the browser, or the operating system may add the notification to a universal notification user interface that also displays notification such as new emails, calendar appointments, etc. The user device 102 and/or the native application evaluation engine 1 10 may record the notification for use later or in another software system. For example, the next time the user is in an application market - an application that displays applications for purchase or free installation - the native application 1 14 can be displayed as a suggested application or be assigned a search rank boost. In some
implementations, the user may set a preference to have the user device 102 automatically download and transition to the native application 1 14 upon receipt of the reference to the native application 108, without any additional user input.
[0036] FIG. 2 is a flow chart illustrating an example process 200 for notifying a user about a native application equivalent. Briefly, the process 200 includes receiving a notification of a native application, and determining if a user should be alerted to the notification. The process 200 may be performed by, for example, the user device 102 and the native application evaluation engine 1 10 of the systems 100, but
another system, or combination of systems, may also perform the process 200. While a particular number, type, and order of actions are described here, other numbers, orders, and types of actions may be possible within the process 200.
[0037] Code for a web application is received (202). The code includes a reference to the native application equivalent to the web application. For example, a web browser the user device 102 may send an HTTP GET message to the content provider web server 106 requesting the web application 104. The content provider web server 106 may respond with a HTTP response that includes the code of the web application 104 and, within the code of the web application 104, a reference to the native application 108. The reference to the native application 108 may include, for example, the URL or package name of the native application 1 14 that is a native application equivalent of the web application 104.
[0038] Code for the reference to the native application equivalent to the web application is parsed (204). For example, the web browser of the user device 102 can parse the HTTP response and identify, among other information, the reference to the native application 108. An evaluation of whether to notify the user about the native application is made using predefined criteria (206). In some implementation, this evaluation can include determining whether to display a notification regarding the native application equivalent to the web application. For example, the user device 102 and/or the native application evaluation engine 1 10 can compare the criteria 1 16 to the state of the user device 102, metadata of the reference to the native application 108, or other input to determine if the notification should be displayed to the user.
[0039] A list of possible criteria 1 16 test option is provided below, but other test options are possible. In some implementations, the user device 102 and/or the native application evaluation engine 1 10 can be configured to use multiple test options for the same notification, or different test options for different classes of notifications.
[0040] The criteria 1 16 can include determining whether the native application is already installed on a device. For example, the user device 102 or the native application evaluation engine 1 10 may access a list of
native application already installed on the user device 102 and reject any matching an entry in that list.
[0041] The criteria 1 16 can include determining whether the native application is available. For example, the reference to the native application 108 may refer to an application that has been discontinued or the reference to the native application 108 may be malformed and not point to any native application 1 14.
[0042] The criteria 1 16 can include determining whether the native application is permitted to be installed. For example, the native application 1 14 may be restricted by user location (e.g. only in some countries) or only to users that have paid for a service or for the native application 1 14.
[0043] The criteria 1 16 can include determining whether notifications are enabled. For example, the user of the user device 102 may have previously set a system level preference to not receive any native application notifications, or only native application notification of a particular class (e.g. only free application).
[0044] The criteria 1 16 can include determining whether the native application is compatible with a device that receives the code for the web application. For example, the user device 102 may not meet the hardware and/or software requirements of the native application 1 14 or may have some required security features disabled.
[0045] The user device 102 may be configured to perform the evaluation, the native application evaluation engine 1 10 may be configured to perform the evaluation, or the two may be configured to interact to perform the evaluation. In some
implementations, the browser or operating system of the user device 102 can perform this evaluation substantially 'in-line' with rendering the web application 104. That is, the evaluation may be made locally by the user device 102 without any additional communication to another computer system. In some other
implementations, the user device 102 can transmit, to the native application evaluation engine 1 10 and/or other systems, a request to make the evaluation. This request can include addition information, such as a user identifier, the state of the user device 102, etc. The native application evaluation engine 1 10 and/or the other
systems can receive, process, and reply to this request with an indication to display or not display the notification. In still some other implementations, the user device may perform a first evaluation based on limited criteria 1 16 (e.g. the state of the user device 102) and the native application evaluation engine 1 10 can perform a second evaluation based on different criteria 1 16 (e.g. user preferences that apply to all devices used by the user)
[0046] Based on the evaluation, a type of notification display can be selected (208). If the evaluation is to not display the notification, then no notification display may need be selected. If the evaluation is to display the notification, one or more styles of display may be selected. Example notification displays include, but are not limited to, logging the notification for use by a different application, displaying the notification as part of the web application 104, displaying the notification by the application displaying the web 104, or displaying the notification with an operating system feature.
[0047] If the notification is to be displayed, the web application is rendered with the notification (210). This notification may be displayed at the same time as the web application 104, or the user device 102 and/or the native application evaluation engine 1 10 may determine a time when the notification is to be displayed. Later, the user device 102 or another device associated with the user, either by way of the operating system, the browser rendering the web application 104, or another application can display the notification to the user.
[0048] If the notification is not to be displayed, the web application is rendered without the notification (212). In some implementations, the web application 104 rendered without the notification may appear to the use substantially identical to the web application 104 if no reference to the native application 108 was provided to the user device 102.
[0049] FIG. 3 is a diagram of example users interfaces for replacing a web application with a native application. The user interfaces illustrates a sequence of screens of a mobile phone where a user is notified of a native application alternative to a web application, and where the user chooses to use the native application instead of the web application.
[0050] Interface 300 shows an example web application that begins with a "GO" button and instructions to press the "GO" button for some action to start. The exact nature of the web application is unimportant for this example, except to note the "GO" button to start some of functionality. A placeholder location is specified by the web application for a notification to be placed by the web browser rendering the web application. In practice, this placeholder location need not be actually shown to the user and may be defined by non-rendering metadata in the Interface 300. The placeholder location may also define the look-and-feel and functionality of the notification, if it is to be displayed to the user.
[0051] Interface 302 shows the example web application with the notification displayed to the user. Between the interface 300 and 302, the user device or another system has determined that the notification should be shown to the user. For example, the user may have specified in a setting screen that the user wishes to see this type of notification. In this example, the notification takes the form of a user- activatable button in the web application. If the user activates the button, the user is transitioned to an application market at an entry for the native application that is an equivalent to the web application.
[0052] Interface 304 shows the application market opened to the native application equivalent. The application market is a program that allows the user to browse available native applications available on the user device. In some other
implementations, instead of being directed to an application market, the user may be directed to a webpage managed by the native application publisher that permits the user to download the native application. The user may press the purchase button on the application market screen to purchase, download, and install the native application. For native application provided free or without cost, the purchase button may be replaced by a download or install button.
[0053] Interface 306 shows the native application equivalent to the web application. The native application is configured specifically for a touch-pad enabled user device and consists of a user-dragable interface element "Ready". Dragging the "Ready" element to the "GO" dock initiates substantially the same action in the native application as pressing the "GO" button in the web application.
[0054] In some implementations, the transition from the interface 302 to the interface 304 and then to the interface 306 can maintain information from the interface 302. For example, if a user is logged into the web application in the interface 302 or has data already generated, this information can be retained and loaded into the native application in the interface 306.
[0055] FIG. 4 shows an example of a computing device 400 and a mobile computing device that can be used to implement the techniques described here. The computing device 400 is intended to represent various forms of digital computers, such as laptops, desktops, workstations, personal digital assistants, servers, blade servers, mainframes, and other appropriate computers. The mobile computing device is intended to represent various forms of mobile devices, such as personal digital assistants, cellular telephones, smart-phones, and other similar computing devices. The components shown here, their connections and relationships, and their functions, are meant to be exemplary only, and are not meant to limit
implementations of the inventions described and/or claimed in this document.
[0056] The computing device 400 includes a processor 402, a memory 404, a storage device 406, a high-speed interface 408 connecting to the memory 404 and multiple high-speed expansion ports 410, and a low-speed interface 412 connecting to a low-speed expansion port 414 and the storage device 406. Each of the processor 402, the memory 404, the storage device 406, the high-speed interface 408, the high-speed expansion ports 410, and the low-speed interface 412, are interconnected using various busses, and may be mounted on a common
motherboard or in other manners as appropriate. The processor 402 can process instructions for execution within the computing device 400, including instructions stored in the memory 404 or on the storage device 406 to display graphical information for a GUI on an external input/output device, such as a display 416 coupled to the high-speed interface 408. In other implementations, multiple processors and/or multiple buses may be used, as appropriate, along with multiple memories and types of memory. Also, multiple computing devices may be connected, with each device providing portions of the necessary operations (e.g., as a server bank, a group of blade servers, or a multi-processor system).
[0057] The memory 404 stores information within the computing device 400. In some implementations, the memory 404 is a volatile memory unit or units. In some
implementations, the memory 404 is a non-volatile memory unit or units. The memory 404 may also be another form of computer-readable medium, such as a magnetic or optical disk.
[0058] The storage device 406 is capable of providing mass storage for the computing device 400. In some implementations, the storage device 406 may be or contain a computer-readable medium, such as a floppy disk device, a hard disk device, an optical disk device, or a tape device, a flash memory or other similar solid state memory device, or an array of devices, including devices in a storage area network or other configurations. A computer program product can be tangibly embodied in an information carrier. The computer program product may also contain instructions that, when executed, perform one or more methods, such as those described above. The computer program product can also be tangibly embodied in a computer- or machine-readable medium, such as the memory 404, the storage device 406, or memory on the processor 402.
[0059] The high-speed interface 408 manages bandwidth-intensive operations for the computing device 400, while the low-speed interface 412 manages lower bandwidth- intensive operations. Such allocation of functions is exemplary only. In some implementations, the high-speed interface 408 is coupled to the memory 404, the display 416 (e.g., through a graphics processor or accelerator), and to the highspeed expansion ports 410, which may accept various expansion cards (not shown). In the implementation, the low-speed interface 412 is coupled to the storage device 406 and the low-speed expansion port 414. The low-speed expansion port 414, which may include various communication ports (e.g., USB, Bluetooth, Ethernet, wireless Ethernet) may be coupled to one or more input/output devices, such as a keyboard, a pointing device, a scanner, or a networking device such as a switch or router, e.g., through a network adapter.
[0060] The computing device 400 may be implemented in a number of different forms, as shown in the figure. For example, it may be implemented as a standard server 420, or multiple times in a group of such servers. In addition, it may be implemented in a personal computer such as a laptop computer 422. It may also be implemented as part of a rack server system 424. Alternatively, components from the computing device 400 may be combined with other components in a mobile device (not shown), such as a mobile computing device 450. Each of such devices
may contain one or more of the computing device 400 and the mobile computing device 450, and an entire system may be made up of multiple computing devices communicating with each other.
[0061] The mobile computing device 450 includes a processor 452, a memory 464, an input/output device such as a display 454, a communication interface 466, and a transceiver 468, among other components. The mobile computing device 450 may also be provided with a storage device, such as a micro-drive or other device, to provide additional storage. Each of the processor 452, the memory 464, the display 454, the communication interface 466, and the transceiver 468, are interconnected using various buses, and several of the components may be mounted on a common motherboard or in other manners as appropriate.
[0062] The processor 452 can execute instructions within the mobile computing device 450, including instructions stored in the memory 464. The processor 452 may be implemented as a chipset of chips that include separate and multiple analog and digital processors. The processor 452 may provide, for example, for
coordination of the other components of the mobile computing device 450, such as control of user interfaces, applications run by the mobile computing device 450, and wireless communication by the mobile computing device 450.
[0063] The processor 452 may communicate with a user through a control interface 458 and a display interface 456 coupled to the display 454. The display 454 may be, for example, a TFT (Thin-Film-Transistor Liquid Crystal Display) display or an OLED (Organic Light Emitting Diode) display, or other appropriate display technology. The display interface 456 may comprise appropriate circuitry for driving the display 454 to present graphical and other information to a user. The control interface 458 may receive commands from a user and convert them for submission to the processor 452. In addition, an external interface 462 may provide communication with the processor 452, so as to enable near area communication of the mobile computing device 450 with other devices. The external interface 462 may provide, for example, for wired communication in some implementations, or for wireless communication in other implementations, and multiple interfaces may also be used.
[0064] The memory 464 stores information within the mobile computing device 450. The memory 464 can be implemented as one or more of a computer-readable
medium or media, a volatile memory unit or units, or a non-volatile memory unit or units. An expansion memory 474 may also be provided and connected to the mobile computing device 450 through an expansion interface 472, which may include, for example, a SIMM (Single In Line Memory Module) card interface. The expansion memory 474 may provide extra storage space for the mobile computing device 450, or may also store applications or other information for the mobile computing device 450. Specifically, the expansion memory 474 may include instructions to carry out or supplement the processes described above, and may include secure information also. Thus, for example, the expansion memory 474 may be provide as a security module for the mobile computing device 450, and may be programmed with instructions that permit secure use of the mobile computing device 450. In addition, secure applications may be provided via the SIMM cards, along with additional information, such as placing identifying information on the SIMM card in a non- hackable manner.
[0065] The memory may include, for example, flash memory and/or NVRAM memory (non-volatile random access memory), as discussed below. In some
implementations, a computer program product is tangibly embodied in an information carrier. The computer program product contains instructions that, when executed, perform one or more methods, such as those described above. The computer program product can be a computer- or machine-readable medium, such as the memory 464, the expansion memory 474, or memory on the processor 452. In some implementations, the computer program product can be received in a propagated signal, for example, over the transceiver 468 or the external interface 462.
[0066] The mobile computing device 450 may communicate wirelessly through the communication interface 466, which may include digital signal processing circuitry where necessary. The communication interface 466 may provide for
communications under various modes or protocols, such as GSM voice calls (Global System for Mobile communications), SMS (Short Message Service), EMS
(Enhanced Messaging Service), or MMS messaging (Multimedia Messaging
Service), CDMA (code division multiple access), TDMA (time division multiple access), PDC (Personal Digital Cellular), WCDMA (Wideband Code Division Multiple Access), CDMA2000, or GPRS (General Packet Radio Service), among others. Such communication may occur, for example, through the transceiver 468 using a
radio-frequency. In addition, short-range communication may occur, such as using a Bluetooth, WiFi, or other such transceiver (not shown). In addition, a GPS (Global Positioning System) receiver module 470 may provide additional navigation- and location-related wireless data to the mobile computing device 450, which may be used as appropriate by applications running on the mobile computing device 450.
[0067] The mobile computing device 450 may also communicate audibly using an audio codec 460, which may receive spoken information from a user and convert it to usable digital information. The audio codec 460 may likewise generate audible sound for a user, such as through a speaker, e.g., in a handset of the mobile computing device 450. Such sound may include sound from voice telephone calls, may include recorded sound (e.g., voice messages, music files, etc.) and may also include sound generated by applications operating on the mobile computing device 450.
[0068] The mobile computing device 450 may be implemented in a number of different forms, as shown in the figure. For example, it may be implemented as a cellular telephone 480. It may also be implemented as part of a smart-phone 482, personal digital assistant, or other similar mobile device.
[0069] Various implementations of the systems and techniques described here can be realized in digital electronic circuitry, integrated circuitry, specially designed ASICs (application specific integrated circuits), computer hardware, firmware, software, and/or combinations thereof. These various implementations can include implementation in one or more computer programs that are executable and/or interpretable on a programmable system including at least one programmable processor, which may be special or general purpose, coupled to receive data and instructions from, and to transmit data and instructions to, a storage system, at least one input device, and at least one output device.
[0070] These computer programs (also known as programs, software, software applications or code) include machine instructions for a programmable processor, and can be implemented in a high-level procedural and/or object-oriented
programming language, and/or in assembly/machine language. As used herein, the terms machine-readable medium and computer-readable medium refer to any computer program product, apparatus and/or device (e.g., magnetic discs, optical
disks, memory, Programmable Logic Devices (PLDs)) used to provide machine instructions and/or data to a programmable processor, including a machine-readable medium that receives machine instructions as a machine-readable signal. The term machine-readable signal refers to any signal used to provide machine instructions and/or data to a programmable processor.
[0071] To provide for interaction with a user, the systems and techniques described here can be implemented on a computer having a display device (e.g., a CRT (cathode ray tube) or LCD (liquid crystal display) monitor) for displaying information to the user and a keyboard and a pointing device (e.g., a mouse or a trackball) by which the user can provide input to the computer. Other kinds of devices can be used to provide for interaction with a user as well; for example, feedback provided to the user can be any form of sensory feedback (e.g., visual feedback, auditory feedback, or tactile feedback); and input from the user can be received in any form, including acoustic, speech, or tactile input.
[0072] The systems and techniques described here can be implemented in a computing system that includes a back end component (e.g., as a data server), or that includes a middleware component (e.g., an application server), or that includes a front end component (e.g., a client computer having a graphical user interface or a Web browser through which a user can interact with an implementation of the systems and techniques described here), or any combination of such back end, middleware, or front end components. The components of the system can be interconnected by any form or medium of digital data communication (e.g., a communication network). Examples of communication networks include a local area network (LAN), a wide area network (WAN), and the Internet.
[0073] The computing system can include clients and servers. A client and server are generally remote from each other and typically interact through a communication network. The relationship of client and server arises by virtue of computer programs running on the respective computers and having a client-server relationship to each other.
Claims
1 . A computer-implemented method comprising:
receiving, by a client device, code for a web application, the code including a reference to a native application equivalent to the web application; and
determining, by the client device, whether to display a notification regarding installation of the native application equivalent to the web application on the client device, then selectively displaying the notification regarding installation of the native application equivalent to the web application on the client device based on the determination.
2. The method of claim 1 , wherein the reference to the native application equivalent to the web application is included in a META tag in a header of the code.
3. The method of claim 1 , comprising:
rendering the web application,
wherein selectively displaying the notification comprises displaying the notification in the rendered web application.
4. The method of claim 1 , wherein determining whether to display a notification comprises determining whether the native application is already installed on a device.
5. The method of claim 1 , wherein determining whether to display a notification comprises determining whether the native application is available.
6. The method of claim 1 , wherein determining whether to display a notification comprises determining whether the native application is permitted to be installed.
7. The method of claim 1 , wherein determining whether to display a notification comprises determining whether notifications are enabled.
8. The method of claim 1 , wherein determining whether to display a notification comprises determining whether the native application is compatible with a device that receives the code for the web application.
9. The method of claim 1 , wherein the determination is made by the client device that receives the code for the web application.
10. The method of claim 1 , wherein determining whether to display a notification comprises:
transmitting, to one or more servers and by a mobile device that receives the code for the web application, a request to make the determination, and
receiving, from the one or more servers and by the mobile device, a result of making the determination.
1 1 . The method of claim 1 , further comprising determining a time when the notification is to be displayed, wherein the notification is displayed at the determined time.
12. The method of claim 1 , wherein selectively displaying the notification comprises displaying an application recommendation regarding the native
application.
13. The method of claim 1 , wherein selectively displaying the notification comprises not displaying the notification when the determination is made to not display the notification.
14. The method of claim 1 , comprising validating the reference to the native application equivalent to the web application.
15. The method of claim 14, wherein validating the reference comprises determining that an address associated with the reference matches an address of a web server from which the code for the code was received.
16. A system comprising:
one or more computers and one or more storage devices storing instructions that are operable, when executed by the one or more computers, to cause the one or more computers to perform operations comprising:
receiving code for a web application, the code including a reference to a native application equivalent to the web application; and
determining whether the native application equivalent to the web application is already installed on one or more of the computers, then displaying the notification regarding the native application equivalent to the web application based on determining that the native application equivalent to the web application is not already installed on the one or more computers.
17. The system of claim 16, the operations further comprising:
rendering the web application,
wherein selectively displaying the notification comprises displaying the notification in the rendered web application.
18. The system of claim 16, the operations further comprising validating the reference to the native application equivalent to the web application.
19. The system of claim 18, wherein validating the reference comprises determining that an address associated with the reference matches an address of a web server from which the code for the code was received
20. A non-transitory computer-readable medium storing software comprising instructions executable by one or more computers which, upon such execution, cause the one or more computers to perform operations comprising:
receiving code for a web application, the code identifying a native application that corresponds to the web application; and
determining that the native application that corresponds to the web application is already installed on one or more of the computers, then blocking a notification to install the native application that corresponds to the web application.
21 . A system comprising:
a content provider system configured to:
receive, from a client, a request for a web application; and transmit, to the client, the a reply message that comprises i) code of the web application and ii) a reference to a native application equivalent to the web application; and a client configured to:
transmit, to the content provider system, the request for the web application; and
receive, from the content provider system, the reply message.
22. The system of claim 21 , wherein the web application does not include instructions to render the notification.
23. The system of claim 21 , wherein the client is further configured to:
determine whether to display a notification regarding the native application equivalent to the web application, then selectively displaying the notification regarding the native application equivalent to the web application based on the determination.
24. The system of claim 23, wherein the system further comprises:
a native application evaluation engine configured to:
receive, from the client, a request to make the determination; and transmit, to the client, a result of making the determination; and the client further configured to:
transmit, to the native application evaluation engine, the request to make the determination; and
receive, from the native application evaluation engine, the result of making the determination.
Applications Claiming Priority (4)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US201161547810P | 2011-10-17 | 2011-10-17 | |
US61/547,810 | 2011-10-17 | ||
US13/490,123 US9195479B2 (en) | 2011-10-17 | 2012-06-06 | Selective notification of native applications |
US13/490,123 | 2012-06-06 |
Publications (1)
Publication Number | Publication Date |
---|---|
WO2013058885A1 true WO2013058885A1 (en) | 2013-04-25 |
Family
ID=48086872
Family Applications (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
PCT/US2012/054087 WO2013058885A1 (en) | 2011-10-17 | 2012-09-07 | Selective notification of native applications |
Country Status (2)
Country | Link |
---|---|
US (1) | US9195479B2 (en) |
WO (1) | WO2013058885A1 (en) |
Families Citing this family (8)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US9256697B2 (en) * | 2012-05-11 | 2016-02-09 | Microsoft Technology Licensing, Llc | Bidirectional mapping between applications and network content |
US9762698B2 (en) * | 2012-12-14 | 2017-09-12 | Google Inc. | Computer application promotion |
US9372681B1 (en) * | 2013-10-02 | 2016-06-21 | Google Inc. | Redirection of a document URL to a natively-operating application |
US9509827B2 (en) * | 2014-03-12 | 2016-11-29 | Intel IP Corporation | Apparatus, system and method of managing at a mobile device execution of an application by a computing device |
US10210263B1 (en) * | 2014-06-24 | 2019-02-19 | Google Llc | Native application search results |
US10382376B2 (en) * | 2016-09-23 | 2019-08-13 | Microsoft Technology Licensing, Llc | Forwarding notification information regardless of user access to an application |
CN108509228B (en) * | 2017-11-10 | 2021-04-30 | 平安普惠企业管理有限公司 | Page loading method, terminal equipment and computer readable storage medium |
US11632362B1 (en) * | 2021-04-14 | 2023-04-18 | SHAYRE, Inc. | Systems and methods for using JWTs for information security |
Citations (1)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20100017461A1 (en) * | 2008-07-16 | 2010-01-21 | Google Inc. | Method and system for executing applications using native code modules |
Family Cites Families (19)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US6449617B1 (en) * | 1999-06-15 | 2002-09-10 | Microsoft Corporation | Edit command delegation program for editing electronic files |
US7331034B2 (en) * | 2001-01-09 | 2008-02-12 | Anderson Thomas G | Distributed software development tool |
CA2471855C (en) * | 2002-01-11 | 2013-03-19 | Akamai Technologies, Inc. | Java application framework for use in a content delivery network (cdn) |
US7478385B2 (en) * | 2003-01-17 | 2009-01-13 | National Instruments Corporation | Installing software using programmatic component dependency analysis |
US7594219B2 (en) * | 2003-07-24 | 2009-09-22 | International Business Machines Corporation | Method and apparatus for monitoring compatibility of software combinations |
US20050086391A1 (en) * | 2003-09-30 | 2005-04-21 | International Business Machines Corporation | Location sensitive software download |
EP1783580A4 (en) * | 2004-08-12 | 2011-03-23 | Fujitsu Ltd | Java applet, jar file creating method, jar file creating program, and jar file creating device |
US7581216B2 (en) * | 2005-01-21 | 2009-08-25 | International Business Machines Corporation | Preserving platform independence with native accelerators for performance critical program objects |
US8296758B2 (en) * | 2006-09-20 | 2012-10-23 | Sap Ag | Deployment and versioning of applications |
US20080120609A1 (en) * | 2006-11-17 | 2008-05-22 | Patrick Gates | Method and System for Upgrading a Previously Purchased Media Asset |
US8424082B2 (en) * | 2008-05-08 | 2013-04-16 | Google Inc. | Safely executing an untrusted native code module on a computing device |
US20090288079A1 (en) * | 2008-05-13 | 2009-11-19 | Google Inc. | Automatic installation of a software product on a device |
US8418168B2 (en) * | 2008-05-29 | 2013-04-09 | Research In Motion Limited | Method and system for performing a software upgrade on an electronic device connected to a computer |
US8294723B2 (en) * | 2008-11-07 | 2012-10-23 | Google Inc. | Hardware-accelerated graphics for web applications using native code modules |
CA2709437C (en) * | 2009-07-15 | 2015-12-08 | Accenture Global Services Gmbh | System image customization tool |
US8561183B2 (en) * | 2009-07-31 | 2013-10-15 | Google Inc. | Native code module security for arm instruction set architectures |
US10580051B2 (en) * | 2010-05-18 | 2020-03-03 | Google Llc | Background element associated with an application installed in a browser application |
US9465596B2 (en) * | 2012-09-27 | 2016-10-11 | Google Inc. | Cross system installation of web applications |
US9317272B2 (en) * | 2013-03-15 | 2016-04-19 | Yahoo! Inc. | Computerized system and method for creating a resource URL for rendering the resource in a resource specific application |
-
2012
- 2012-06-06 US US13/490,123 patent/US9195479B2/en active Active
- 2012-09-07 WO PCT/US2012/054087 patent/WO2013058885A1/en active Application Filing
Patent Citations (1)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20100017461A1 (en) * | 2008-07-16 | 2010-01-21 | Google Inc. | Method and system for executing applications using native code modules |
Also Published As
Publication number | Publication date |
---|---|
US9195479B2 (en) | 2015-11-24 |
US20130097596A1 (en) | 2013-04-18 |
Similar Documents
Publication | Publication Date | Title |
---|---|---|
US9195479B2 (en) | Selective notification of native applications | |
JP6219296B2 (en) | Launching an application from a web page | |
US11750683B2 (en) | Computer application promotion | |
CN111033505B (en) | Data collection consent tool | |
US9563750B1 (en) | Computer application pre-permissioning | |
US8935755B1 (en) | Managing permissions and capabilities of web applications and browser extensions based on install location | |
JP6318266B2 (en) | System for managing extension changes to web pages | |
US9135445B2 (en) | Providing information about a web application or extension offered by website based on information about the application or extension gathered from a trusted site | |
US9537925B2 (en) | Browser notifications | |
US20120265607A1 (en) | Click-to-reveal content | |
US9336358B2 (en) | Granting permission in association with an application | |
US8887245B1 (en) | Browser-based prevention of unsecure online transmission of sensitive information | |
US8775554B2 (en) | Cloud-based web page applications for extending functionality | |
US20140282032A1 (en) | Dynamically configuring user experiences with action uniform resource identifiers | |
US9819678B1 (en) | Linking a forwarded contact on a resource to a user interaction on a requesting source item | |
CN107182209B (en) | Detecting digital content visibility | |
US10262155B1 (en) | Disabling features using feature toggle | |
US9342386B1 (en) | Messaging channel for web pages, extensions, and applications to communicate | |
US10581783B2 (en) | Method and system for creating dynamic email signatures | |
US10462246B2 (en) | Unified content posting | |
US8745169B2 (en) | Intelligent system of unified content posting |
Legal Events
Date | Code | Title | Description |
---|---|---|---|
121 | Ep: the epo has been informed by wipo that ep was designated in this application |
Ref document number: 12759609Country of ref document: EPKind code of ref document: A1 |
|
NENP | Non-entry into the national phase |
Ref country code: DE |
|
122 | Ep: pct application non-entry in european phase |
Ref document number: 12759609Country of ref document: EPKind code of ref document: A1 |