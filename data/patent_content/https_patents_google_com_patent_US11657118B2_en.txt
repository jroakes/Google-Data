US11657118B2 - Systems and methods for learning effective loss functions efficiently - Google Patents
Systems and methods for learning effective loss functions efficiently Download PDFInfo
- Publication number
- US11657118B2 US11657118B2 US16/880,274 US202016880274A US11657118B2 US 11657118 B2 US11657118 B2 US 11657118B2 US 202016880274 A US202016880274 A US 202016880274A US 11657118 B2 US11657118 B2 US 11657118B2
- Authority
- US
- United States
- Prior art keywords
- machine
- loss function
- learned model
- learned
- vector
- Prior art date
- Legal status (The legal status is an assumption and is not a legal conclusion. Google has not performed a legal analysis and makes no representation as to the accuracy of the status listed.)
- Active, expires
Links
Images
Classifications
-
- G06K9/6262—
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F17/00—Digital computing or data processing equipment or methods, specially adapted for specific functions
- G06F17/10—Complex mathematical operations
- G06F17/11—Complex mathematical operations for solving equations, e.g. nonlinear equations, general mathematical optimization problems
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F17/00—Digital computing or data processing equipment or methods, specially adapted for specific functions
- G06F17/10—Complex mathematical operations
- G06F17/18—Complex mathematical operations for evaluating statistical data, e.g. average values, frequency distributions, probability functions, regression analysis
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F18/00—Pattern recognition
- G06F18/20—Analysing
- G06F18/21—Design or setup of recognition systems or techniques; Extraction of features in feature space; Blind source separation
- G06F18/214—Generating training patterns; Bootstrap methods, e.g. bagging or boosting
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F18/00—Pattern recognition
- G06F18/20—Analysing
- G06F18/21—Design or setup of recognition systems or techniques; Extraction of features in feature space; Blind source separation
- G06F18/217—Validation; Performance evaluation; Active pattern learning techniques
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06N—COMPUTING ARRANGEMENTS BASED ON SPECIFIC COMPUTATIONAL MODELS
- G06N20/00—Machine learning
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06N—COMPUTING ARRANGEMENTS BASED ON SPECIFIC COMPUTATIONAL MODELS
- G06N3/00—Computing arrangements based on biological models
- G06N3/02—Neural networks
- G06N3/08—Learning methods
- G06N3/084—Backpropagation, e.g. using gradient descent
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06N—COMPUTING ARRANGEMENTS BASED ON SPECIFIC COMPUTATIONAL MODELS
- G06N5/00—Computing arrangements using knowledge-based models
- G06N5/01—Dynamic search techniques; Heuristics; Dynamic trees; Branch-and-bound
Definitions
- the present disclosure relates generally to machine learning. More particularly, the present disclosure relates to systems and methods for efficiently learning loss functions effective to train improved machine-learned models.
- machine-learned image classification models are often trained using a “log loss” training loss function which determines a log loss between the labels predicted by the model and ground truth training labels.
- a log loss training loss function which determines a log loss between the labels predicted by the model and ground truth training labels.
- the log loss training loss function does not optimize the model's test performance.
- One example aspect of the present disclosure is directed to a computer-implemented method to learn improved loss functions.
- the method includes, for each of one or more learning iterations, determining, by one or more computing devices, a plurality of feature vectors respectively associated with a plurality of machine-learned models.
- the feature vector for each machine-learned model describes a respective performance of the machine-learned model on each of a plurality of loss function components.
- the method includes, for each of the one or more learning iterations, determining, by one or more computing devices, a plurality of validation errors respectively for the plurality of machine-learned models.
- the validation error for each machine-learned model describes a performance of the machine-learned model relative to a validation metric.
- the method includes, for each of one or more optimization iterations included in each of the one or more learning iterations: attempting to optimize, by the one or more computing devices, a cost function to learn a vector of variable hyperparameter values subject to a constraint.
- the cost function evaluates a sum, for all of the machine-learned models, of an absolute or squared error between a respective loss function for each machine-learned model and the validation error for such machine-learned model.
- the respective loss function for each machine-learned model comprises the feature vector for the machine-learned model respectively multiplied by the vector of variable hyperparameter values.
- the constraint requires that the vector of variable hyperparameter values be such that minimization of the respective loss for each machine-learned model returns a current machine-learned model associated with a current optimization iteration.
- the method includes, for each of the one or more optimization iterations: if the cost function is successfully optimized subject to the constraint, providing the vector of variable hyperparameter values as an output.
- FIG. 1 illustrates a comparison of three example quadratic loss functions, on a one-dimensional minimization problem.
- FIG. 2 illustrates a first example algorithm according to example embodiments of the present disclosure.
- FIG. 3 illustrates a second example algorithm according to example embodiments of the present disclosure.
- FIG. 4 A depicts a block diagram of an example computing system according to example embodiments of the present disclosure.
- FIG. 4 B depicts a block diagram of an example computing device according to example embodiments of the present disclosure.
- FIG. 4 C depicts a block diagram of an example computing device according to example embodiments of the present disclosure.
- FIG. 5 depicts a flow chart diagram of an example method to learn a loss function according to example embodiments of the present disclosure.
- the present disclosure is directed to systems and methods that learn a loss function that, when (approximately) minimized over the training data, produces a model that performs well on test data according to some error metric.
- the error metric need not be differentiable and may be only loosely related to the loss function.
- the present disclosure presents a convex-programming-based algorithm that takes as input observed data from training a small number of models and produces as output a loss function. This algorithm can be used to tune loss function hyperparameters and/or to adjust the loss function on-the-fly during training.
- the algorithm comes with appealing theoretical guarantees and has performed very well in experiments, as illustrated by example experimental data included in U.S. Provisional Patent Application No. 62/852,029, which is fully incorporated into and forms a portion of this disclosure.
- the proposed algorithms can make use of gradient information in the case where the error metric is differentiable (or can be approximated by a differentiable proxy function).
- using gradient information can dramatically accelerate the search for a good loss function, and allows efficient discovery of loss functions with hundreds of hyperparameters on-the-fly during training.
- the systems and methods of the present disclosure provide solutions to the problem of learning a loss function which, when minimized over a training dataset, yields a model that approximately minimizes a validation error metric.
- learning an optimal loss function is NP-hard
- the present disclosure presents an anytime algorithm that is asymptotically optimal in the worst case, and is provably efficient in an idealized “easy” case.
- the systems and methods of the present disclosure provide a number of technical effects and benefits.
- the techniques described herein enable learning of a loss function that improves, relative to use of traditional loss functions, the ability of a machine-learned model to perform a task (e.g., an image processing, computer vision task, sensor data processing task, audio processing task, text processing task, classification task, detection task, recognition task, etc.).
- a task e.g., an image processing, computer vision task, sensor data processing task, audio processing task, text processing task, classification task, detection task, recognition task, etc.
- the systems and methods of the present disclosure can improve the ability of a computing system that includes the machine-learned model to perform various practical applications, thereby improving the functioning of such a computing system.
- the techniques described herein enable tuning of loss function hyperparameters is a much more efficient fashion than existing techniques, such as, for example, black box optimization techniques.
- the techniques described herein provide order-of-magnitude improvements in the number of training runs that must be performed to reach a given test error.
- the techniques described herein enable learning of high quality machine-learned models through performance of a fewer number of training iterations. Reducing the number of training iterations that are required to be performed conserves computing resources such as reducing the amount of processor usage, memory usage, network bandwidth usage, and/or the like, thereby improving the functioning and resource consumption of the computing system itself.
- aspects of the present disclosure consider a general learning problem where the goal is to produce a model from some set ⁇ n of models, so as to minimize a test error e: ⁇ ⁇ 0 .
- Our model is obtained by minimizing a training loss : ⁇ ⁇ 0 , which belongs to a set of possible loss functions. We would like to find the ⁇ that, when minimized, produces the lowest test error. That is, we wish to solve the bilevel minimization problem:
- finding an optimal loss function of the form ⁇ ( ⁇ ) will (after suitable rescaling) give us the optimal values of the hyperparameters ⁇ 1 and ⁇ 2 (and potentially an additional hyperparameter for the logloss term).
- convex_pwl(X) is the set of convex, piecewise-linear functions that change slope at a predefined, finite set X ⁇ of points. It can be shown that this is equivalent to the set of non-negative linear combinations of the functions ⁇ f ⁇ ,a
- f ⁇ ,a (x) ⁇ max ⁇ 0, ⁇ (x ⁇ a) ⁇ we can write as a linear function of a feature vector of length 1+2
- a good loss function is one that we can (approximately) minimize, and one whose argmin has low test error. To ensure that the loss functions we consider can be approximately minimized, we confine our attention to linear functions of a user-provided feature vector (which can be minimized efficiently if, for example, each component of the feature vector is a convex function of ⁇ ). How can we guarantee that the argmin of training loss has low test error?
- FIG. 1 illustrates this point for a one-dimensional model ⁇ , where test error is a piecewise-linear function of ⁇ , but training loss is constrained to be a quadratic function of ⁇ .
- the LearnLoss algorithm has two desirable theoretical guarantees. First, by an argument similar to the one used to prove Theorem 2, it runs in polynomial time and returns a loss function that would be optimal if the loss was minimized over ⁇ 0 rather than over ⁇ , as summarized in Theorem 3. Second, it is provably efficient in certain special cases, as shown in Theorem 4.
- ⁇ 0 ⁇ be a finite set of models. Given as input the set of pairs ⁇ ( ⁇ tilde over (e) ⁇ ( ⁇ ), ⁇ ( ⁇ ))
- and k
- Theorem 4 shows that if a perfect loss function exists, LearnLoss can recover it given ⁇ tilde over (e) ⁇ ( ⁇ ), ⁇ ( ⁇ ), and ⁇ tilde over (e) ⁇ ( ⁇ ) for just one model. This is clearly a strong assumption that is unlikely to be literally satisfied in practice. Nevertheless, our experiments will show that on certain real-world problems, LearnLoss achieves efficiency similar to what Theorem 4 suggests.
- the LearnLoss algorithm suggests a natural procedure for tuning loss functions, either based on results of full training runs (as in traditional hyperparameter tuning), or on-the-fly during training.
- ⁇ 0 be an initial set of trained models (obtained, for example, as intermediate checkpoints when minimizing an initial “default” loss function).
- ⁇ 1 was an initial set of trained models (obtained, for example, as intermediate checkpoints when minimizing an initial “default” loss function).
- TuneLoss makes use of a subroutine, train_with_warm_start. If this subroutine runs on online algorithm such as AdaGrad for a small number of mini-batches, then TuneLoss will adjust the loss function online during training. If the subroutine instead performs a full training run (possibly ignoring the second argument), TuneLoss becomes a sequential hyperparameter tuning algorithm. TuneLoss can also be modified to provide the optional gradient information in the calls to LearnLoss.
- FIG. 4 A depicts a block diagram of an example computing system 100 according to example embodiments of the present disclosure.
- the system 100 includes a user computing device 102 , a server computing system 130 , and a training computing system 150 that are communicatively coupled over a network 180 .
- the user computing device 102 can be any type of computing device, such as, for example, a personal computing device (e.g., laptop or desktop), a mobile computing device (e.g., smartphone or tablet), a gaming console or controller, a wearable computing device, an embedded computing device, or any other type of computing device.
- a personal computing device e.g., laptop or desktop
- a mobile computing device e.g., smartphone or tablet
- a gaming console or controller e.g., a gaming console or controller
- a wearable computing device e.g., an embedded computing device, or any other type of computing device.
- the user computing device 102 includes one or more processors 112 and a memory 114 .
- the one or more processors 112 can be any suitable processing device (e.g., a processor core, a microprocessor, an ASIC, a FPGA, a controller, a microcontroller, etc.) and can be one processor or a plurality of processors that are operatively connected.
- the memory 114 can include one or more non-transitory computer-readable storage mediums, such as RAM, ROM, EEPROM, EPROM, flash memory devices, magnetic disks, etc., and combinations thereof.
- the memory 114 can store data 116 and instructions 118 which are executed by the processor 112 to cause the user computing device 102 to perform operations.
- the user computing device 102 can store or include one or more machine-learned models 120 .
- the machine-learned models 120 can be or can otherwise include various machine-learned models such as neural networks (e.g., deep neural networks) or other types of machine-learned models, including non-linear models and/or linear models.
- Neural networks can include feed-forward neural networks, recurrent neural networks (e.g., long short-term memory recurrent neural networks), convolutional neural networks or other forms of neural networks.
- the one or more machine-learned models 120 can be received from the server computing system 130 over network 180 , stored in the user computing device memory 114 , and then used or otherwise implemented by the one or more processors 112 .
- the user computing device 102 can implement multiple parallel instances of a single machine-learned model 120 .
- one or more machine-learned models 140 can be included in or otherwise stored and implemented by the server computing system 130 that communicates with the user computing device 102 according to a client-server relationship.
- the machine-learned models 140 can be implemented by the server computing system 140 as a portion of a web service.
- one or more models 120 can be stored and implemented at the user computing device 102 and/or one or more models 140 can be stored and implemented at the server computing system 130 .
- the user computing device 102 can also include one or more user input component 122 that receives user input.
- the user input component 122 can be a touch-sensitive component (e.g., a touch-sensitive display screen or a touch pad) that is sensitive to the touch of a user input object (e.g., a finger or a stylus).
- the touch-sensitive component can serve to implement a virtual keyboard.
- Other example user input components include a microphone, a traditional keyboard, or other means by which a user can provide user input.
- the server computing system 130 includes one or more processors 132 and a memory 134 .
- the one or more processors 132 can be any suitable processing device (e.g., a processor core, a microprocessor, an ASIC, a FPGA, a controller, a microcontroller, etc.) and can be one processor or a plurality of processors that are operatively connected.
- the memory 134 can include one or more non-transitory computer-readable storage mediums, such as RAM, ROM, EEPROM, EPROM, flash memory devices, magnetic disks, etc., and combinations thereof.
- the memory 134 can store data 136 and instructions 138 which are executed by the processor 132 to cause the server computing system 130 to perform operations.
- the server computing system 130 includes or is otherwise implemented by one or more server computing devices. In instances in which the server computing system 130 includes plural server computing devices, such server computing devices can operate according to sequential computing architectures, parallel computing architectures, or some combination thereof.
- the server computing system 130 can store or otherwise include one or more machine-learned models 140 .
- the models 140 can be or can otherwise include various machine-learned models.
- Example machine-learned models include neural networks or other multi-layer non-linear models.
- Example neural networks include feed forward neural networks, deep neural networks, recurrent neural networks, and convolutional neural networks.
- the user computing device 102 and/or the server computing system 130 can train the models 120 and/or 140 via interaction with the training computing system 150 that is communicatively coupled over the network 180 .
- the training computing system 150 can be separate from the server computing system 130 or can be a portion of the server computing system 130 .
- the training computing system 150 includes one or more processors 153 and a memory 154 .
- the one or more processors 153 can be any suitable processing device (e.g., a processor core, a microprocessor, an ASIC, a FPGA, a controller, a microcontroller, etc.) and can be one processor or a plurality of processors that are operatively connected.
- the memory 154 can include one or more non-transitory computer-readable storage mediums, such as RAM, ROM, EEPROM, EPROM, flash memory devices, magnetic disks, etc., and combinations thereof.
- the memory 154 can store data 156 and instructions 158 which are executed by the processor 153 to cause the training computing system 150 to perform operations.
- the training computing system 150 includes or is otherwise implemented by one or more server computing devices.
- the training computing system 150 can include a model trainer 160 that trains the machine-learned models 120 and/or 140 stored at the user computing device 102 and/or the server computing system 130 using various training or learning techniques, such as, for example, backwards propagation of errors.
- performing backwards propagation of errors can include performing truncated backpropagation through time.
- the model trainer 160 can perform a number of generalization techniques (e.g., weight decays, dropouts, etc.) to improve the generalization capability of the models being trained.
- the model trainer 160 can train the machine-learned models 120 and/or 140 based on a set of training data 162 .
- the training data 162 can include, for example, labeled training data, weakly labeled training data, and/or unlabeled training data.
- the training examples can be provided by the user computing device 102 .
- the model 120 provided to the user computing device 102 can be trained by the training computing system 150 on user-specific data received from the user computing device 102 . In some instances, this process can be referred to as personalizing the model.
- the training computing system 150 can also include a loss learner 164 .
- the loss leaner 164 can operate to learn a loss function by performing any of the techniques described herein, including, as examples, the LearnLoss algorithm, the TuneLoss algorithm, method 500 of FIG. 5 , and/or other techniques.
- the model trainer 160 includes computer logic utilized to provide desired functionality.
- the model trainer 160 can be implemented in hardware, firmware, and/or software controlling a general purpose processor.
- the model trainer 160 includes program files stored on a storage device, loaded into a memory and executed by one or more processors.
- the model trainer 160 includes one or more sets of computer-executable instructions that are stored in a tangible computer-readable storage medium such as RAM hard disk or optical or magnetic media.
- the loss learner 164 includes computer logic utilized to provide desired functionality.
- the loss learner 164 can be implemented in hardware, firmware, and/or software controlling a general purpose processor.
- the loss learner 164 includes program files stored on a storage device, loaded into a memory and executed by one or more processors.
- the loss learner 164 includes one or more sets of computer-executable instructions that are stored in a tangible computer-readable storage medium such as RAM hard disk or optical or magnetic media.
- the network 180 can be any type of communications network, such as a local area network (e.g., intranet), wide area network (e.g., Internet), or some combination thereof and can include any number of wired or wireless links.
- communication over the network 180 can be carried via any type of wired and/or wireless connection, using a wide variety of communication protocols (e.g., TCP/IP, HTTP, SMTP, FTP), encodings or formats (e.g., HTML, XML), and/or protection schemes (e.g., VPN, secure HTTP, SSL).
- FIG. 4 A illustrates one example computing system that can be used to implement the present disclosure.
- the user computing device 102 can include the model trainer 160 , the training dataset 162 , and/or the loss learner 164 .
- the models 120 can be both trained and used locally at the user computing device 102 .
- the user computing device 102 can implement the model trainer 160 to personalize the models 120 based on user-specific data.
- FIG. 4 B depicts a block diagram of an example computing device 10 that performs according to example embodiments of the present disclosure.
- the computing device 10 can be a user computing device or a server computing device.
- the computing device 10 includes a number of applications (e.g., applications 1 through N). Each application contains its own machine learning library and machine-learned model(s). For example, each application can include a machine-learned model.
- Example applications include a text messaging application, an email application, a dictation application, a virtual keyboard application, a browser application, etc.
- each application can communicate with a number of other components of the computing device, such as, for example, one or more sensors, a context manager, a device state component, and/or additional components.
- each application can communicate with each device component using an API (e.g., a public API).
- the API used by each application is specific to that application.
- FIG. 4 C depicts a block diagram of an example computing device 50 that performs according to example embodiments of the present disclosure.
- the computing device 50 can be a user computing device or a server computing device.
- the computing device 50 includes a number of applications (e.g., applications 1 through N). Each application is in communication with a central intelligence layer.
- Example applications include a text messaging application, an email application, a dictation application, a virtual keyboard application, a browser application, etc.
- each application can communicate with the central intelligence layer (and model(s) stored therein) using an API (e.g., a common API across all applications).
- the central intelligence layer includes a number of machine-learned models. For example, as illustrated in FIG. 4 C , a respective machine-learned model (e.g., a model) can be provided for each application and managed by the central intelligence layer. In other implementations, two or more applications can share a single machine-learned model. For example, in some implementations, the central intelligence layer can provide a single model (e.g., a single model) for all of the applications. In some implementations, the central intelligence layer is included within or otherwise implemented by an operating system of the computing device 50 .
- a respective machine-learned model e.g., a model
- two or more applications can share a single machine-learned model.
- the central intelligence layer can provide a single model (e.g., a single model) for all of the applications.
- the central intelligence layer is included within or otherwise implemented by an operating system of the computing device 50 .
- the central intelligence layer can communicate with a central device data layer.
- the central device data layer can be a centralized repository of data for the computing device 50 . As illustrated in FIG. 4 C , the central device data layer can communicate with a number of other components of the computing device, such as, for example, one or more sensors, a context manager, a device state component, and/or additional components. In some implementations, the central device data layer can communicate with each device component using an API (e.g., a private API).
- an API e.g., a private API
- FIG. 5 depicts a flow chart diagram of an example method 500 to perform according to example embodiments of the present disclosure.
- FIG. 5 depicts steps performed in a particular order for purposes of illustration and discussion, the methods of the present disclosure are not limited to the particularly illustrated order or arrangement.
- the various steps of the method 500 can be omitted, rearranged, combined, and/or adapted in various ways without deviating from the scope of the present disclosure.
- a computing system can determine a plurality of feature vectors respectively associated with a plurality of machine-learned models.
- the feature vector for each machine-learned model describes a respective performance of the machine-learned model on each of a plurality of loss function components.
- the plurality of loss function components can be set, selected, and/or defined by a user.
- the computing system can run the models to determine the feature vectors or the computing system can determine the feature vectors by receiving them from another computing system.
- the feature vectors can be determined as part of training the machine-learned models and/or can be determine separately (e.g., in parallel with) training of the machine-learned models.
- the computing system can have a process running in parallel to training of the model(s), which reads model checkpoints and computes the values of the features/loss components. This can be done, for example, in parallel with computing validation error.
- the computing system can also approximately compute some components of the feature vector(s) during training. For example, if logloss( ⁇ ) is one of the plurality of loss function components (which can also be referred to as the features), and the system is training using stochastic gradient descent with mini-batches, the computing system can assess the values of log loss for the last few mini-batches, as an estimate of log loss over the entire training dataset. In cases where training the model includes optimizing a loss function that has log loss as one of the terms, this requires no extra work, because the system would be computing log loss for each mini-batch anyway as part of training.
- the machine-learned models can be trained on some or all of the plurality of loss function components or can be trained using loss functions that include components that are not included in the plurality of loss function components.
- the plurality of machine-learned models can be or include a plurality of different versions of a same machine-learned model respectively saved at a plurality of training checkpoints of a training process.
- the plurality of loss function components can include one or more of: a logloss loss function component; an L1 regularization loss function component; an L2 regularization loss function component; a uniform-labeled loss function component, a dropout loss function component, and/or various other types of loss function components.
- the plurality of loss function components can include a plurality of loss function components that respectively correspond to a plurality of different augmentation operations performed on a set of training data.
- the plurality of loss function components can include a plurality of convex, non-negative, piecewise-linear functions.
- the computing system can obtain a plurality of validation errors respectively for the plurality of machine-learned models, wherein the validation error for each machine-learned model describes a performance of the machine-learned model relative to a validation metric.
- the validation error for each machine-learned model approximates a test error for the machine-learned model.
- the test error can be any test error, including, for example, any top-n test error metric (e.g., top-1, top-5, etc.).
- the computing system can order the machine-learned models (e.g., the data associated therewith) into a sequence with ascending order of validation error.
- the computing system can then iteratively proceed through the sequence (e.g., one model/pair of data) at a time, for example, until a solution is found.
- the computing system can attempt to optimize a cost function to learn a vector of variable hyperparameter values subject to a constraint.
- the cost function can evaluates a sum, for all of the machine-learned models, of an absolute or squared error between a respective loss function for each machine-learned model and the validation error for such machine-learned model.
- the respective loss function for each machine-learned model comprises the feature vector for the machine-learned model respectively multiplied by a vector of variable hyperparameter values.
- the constraint can require, for example, that the vector of variable hyperparameter values be such that minimization of the respective loss for each machine-learned model returns a current machine-learned model associated with a current optimization iteration.
- the computing system can attempt to minimize the cost function subject to a constraint that says the vector of hyperparameter values must be such that if the system minimizes the learned loss function over all the m provided models, the system gets back the model with the current iteration index. So at the first optimization iteration, the system is only considering loss functions whose argmin (e.g., evaluated over the plurality of models) is the model with best validation error.
- the motivation for this constraint is set form in Theorems 2 and 3, described above.
- the cost function further evaluates a sum, for all of the machine-learned models, of an absolute or squared error between a gradient of the respective feature vector for each machine-learned model and a gradient of the validation error for such machine-learned model. This can enable the computing system to learn the hyperparameter values more efficiently.
- attempting to optimize the cost function can include solving a quadratic program.
- the ellipsoid method or derivatives thereof can be performed to solve the quadratic program.
- the computing system can provide the vector of variable hyperparameter values as an output. In such fashion, the method 500 can learn improved hyperparameter values for an overall loss function.
- the computing system can train an additional machine-learned model via optimization of an inferred loss function.
- the inferred loss function can be generated through multiplication of the vector of variable hyperparameter values with a vector of the plurality of loss function components.
- the method 500 can conclude at 510 , while in other implementations the method 500 can continue to 512 .
- the computing system can evaluate an additional validation error for the additional machine-learned model.
- the computing system can add the additional machine-learned model (and/or a feature vector therefor) and the additional validation error to the corpus of model data obtained at 502 and 504 .
- method 500 can optionally return to 505 and again order the models and attempt to optimize the cost function. In such fashion, method 500 can be iteratively performed to iteratively learn improved hyperparameter values for the loss function.
- the method 500 can further include determining an optimal probability distribution for the plurality of different augmentation operations based at least in part on the vector of variable hyperparameter values.
- the technology discussed herein makes reference to servers, databases, software applications, and other computer-based systems, as well as actions taken and information sent to and from such systems.
- the inherent flexibility of computer-based systems allows for a great variety of possible configurations, combinations, and divisions of tasks and functionality between and among components.
- processes discussed herein can be implemented using a single device or component or multiple devices or components working in combination.
- Databases and applications can be implemented on a single system or distributed across multiple systems. Distributed components can operate sequentially or in parallel.
Abstract
Description
where
factor to convert to the desired form).
By learning a linear loss function of this form, we can discover novel, problem-specific regularizers.
-
- Computing an optimal linear loss function is NP-hard, even under strong assumptions about the set of models Θ the validation error {tilde over (e)}, and the feature vector ϕ.
- However, if Θ is finite, an optimal loss function can be computed in time polynomial in |Θ|.
-
- When used to tune loss function hyperparameters based on results of full training runs, our algorithm can outperform state-of-the-art alternatives by multiple orders of magnitude.
- By tuning the loss function online, we can achieve test error competitive with the results of extensive hyperparameter tuning during the course of a single training run.
Claims (20)
Priority Applications (1)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US16/880,274 US11657118B2 (en) | 2019-05-23 | 2020-05-21 | Systems and methods for learning effective loss functions efficiently |
Applications Claiming Priority (2)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US201962852029P | 2019-05-23 | 2019-05-23 | |
US16/880,274 US11657118B2 (en) | 2019-05-23 | 2020-05-21 | Systems and methods for learning effective loss functions efficiently |
Publications (2)
Publication Number | Publication Date |
---|---|
US20200372305A1 US20200372305A1 (en) | 2020-11-26 |
US11657118B2 true US11657118B2 (en) | 2023-05-23 |
Family
ID=73456807
Family Applications (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
US16/880,274 Active 2041-04-12 US11657118B2 (en) | 2019-05-23 | 2020-05-21 | Systems and methods for learning effective loss functions efficiently |
Country Status (1)
Country | Link |
---|---|
US (1) | US11657118B2 (en) |
Families Citing this family (6)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US11681923B2 (en) * | 2019-04-19 | 2023-06-20 | Samsung Electronics Co., Ltd. | Multi-model structures for classification and intent determination |
US20210374128A1 (en) * | 2020-06-01 | 2021-12-02 | Replica Analytics | Optimizing generation of synthetic data |
CN114559297B (en) * | 2020-11-27 | 2023-09-19 | 财团法人工业技术研究院 | Tool state evaluation system and method |
CN112766387B (en) * | 2021-01-25 | 2024-01-23 | 卡奥斯数字科技(上海)有限公司 | Training data error correction method, device, equipment and storage medium |
CN116542134B (en) * | 2023-04-13 | 2024-02-09 | 南京大学 | Method and device for learning to organize and search |
CN117709210A (en) * | 2024-02-18 | 2024-03-15 | 粤港澳大湾区数字经济研究院(福田) | Constraint inference model training, constraint inference method, constraint inference component, constraint inference terminal and constraint inference medium |
Citations (20)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20140358831A1 (en) * | 2013-05-30 | 2014-12-04 | President And Fellows Of Harvard College | Systems and methods for bayesian optimization using non-linear mapping of input |
US20160224903A1 (en) * | 2015-01-29 | 2016-08-04 | Qualcomm Incorporated | Hyper-parameter selection for deep convolutional networks |
US20160247089A1 (en) * | 2015-02-24 | 2016-08-25 | Sas Institute, Inc. | Acceleration of sparse support vector machine training through safe feature screening |
US20160328644A1 (en) * | 2015-05-08 | 2016-11-10 | Qualcomm Incorporated | Adaptive selection of artificial neural networks |
US20170024642A1 (en) * | 2015-03-13 | 2017-01-26 | Deep Genomics Incorporated | System and method for training neural networks |
US20180121814A1 (en) * | 2016-10-31 | 2018-05-03 | Microsoft Technology Licensing, Llc | Hyperparameter tuning |
US20180240041A1 (en) * | 2017-02-22 | 2018-08-23 | Sas Institute Inc. | Distributed hyperparameter tuning system for machine learning |
US20180307986A1 (en) * | 2017-04-20 | 2018-10-25 | Sas Institute Inc. | Two-phase distributed neural network training system |
WO2018212710A1 (en) * | 2017-05-19 | 2018-11-22 | National University Of Singapore | Predictive analysis methods and systems |
WO2018226492A1 (en) * | 2017-06-05 | 2018-12-13 | D5Ai Llc | Asynchronous agents with learning coaches and structurally modifying deep neural networks without performance degradation |
US20190066713A1 (en) * | 2016-06-14 | 2019-02-28 | The Trustees Of Columbia University In The City Of New York | Systems and methods for speech separation and neural decoding of attentional selection in multi-speaker environments |
US20190080253A1 (en) * | 2017-09-12 | 2019-03-14 | Sas Institute Inc. | Analytic system for graphical interpretability of and improvement of machine learning models |
WO2019083578A1 (en) * | 2017-10-27 | 2019-05-02 | Google Llc | Systems and methods for improved optimization of machine-learned models |
US20190236487A1 (en) * | 2018-01-30 | 2019-08-01 | Microsoft Technology Licensing, Llc | Machine learning hyperparameter tuning tool |
US20190244139A1 (en) * | 2018-02-02 | 2019-08-08 | Oracle International Corporation | Using meta-learning for automatic gradient-based hyperparameter optimization for machine learning and deep learning models |
EP3543917A1 (en) * | 2018-03-19 | 2019-09-25 | SRI International Inc. | Dynamic adaptation of deep neural networks |
WO2019238976A1 (en) * | 2018-06-15 | 2019-12-19 | Université de Liège | Image classification using neural networks |
US20200134461A1 (en) * | 2018-03-20 | 2020-04-30 | Sri International | Dynamic adaptation of deep neural networks |
US20210224692A1 (en) * | 2018-10-09 | 2021-07-22 | Preferred Networks, Inc. | Hyperparameter tuning method, device, and program |
US11210144B2 (en) * | 2018-07-06 | 2021-12-28 | Capital One Services, Llc | Systems and methods for hyperparameter tuning |
-
2020
- 2020-05-21 US US16/880,274 patent/US11657118B2/en active Active
Patent Citations (21)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20140358831A1 (en) * | 2013-05-30 | 2014-12-04 | President And Fellows Of Harvard College | Systems and methods for bayesian optimization using non-linear mapping of input |
US20160224903A1 (en) * | 2015-01-29 | 2016-08-04 | Qualcomm Incorporated | Hyper-parameter selection for deep convolutional networks |
US20160247089A1 (en) * | 2015-02-24 | 2016-08-25 | Sas Institute, Inc. | Acceleration of sparse support vector machine training through safe feature screening |
US20170024642A1 (en) * | 2015-03-13 | 2017-01-26 | Deep Genomics Incorporated | System and method for training neural networks |
US20160328644A1 (en) * | 2015-05-08 | 2016-11-10 | Qualcomm Incorporated | Adaptive selection of artificial neural networks |
US20190066713A1 (en) * | 2016-06-14 | 2019-02-28 | The Trustees Of Columbia University In The City Of New York | Systems and methods for speech separation and neural decoding of attentional selection in multi-speaker environments |
US20180121814A1 (en) * | 2016-10-31 | 2018-05-03 | Microsoft Technology Licensing, Llc | Hyperparameter tuning |
US20180240041A1 (en) * | 2017-02-22 | 2018-08-23 | Sas Institute Inc. | Distributed hyperparameter tuning system for machine learning |
US20180307986A1 (en) * | 2017-04-20 | 2018-10-25 | Sas Institute Inc. | Two-phase distributed neural network training system |
WO2018212710A1 (en) * | 2017-05-19 | 2018-11-22 | National University Of Singapore | Predictive analysis methods and systems |
WO2018226492A1 (en) * | 2017-06-05 | 2018-12-13 | D5Ai Llc | Asynchronous agents with learning coaches and structurally modifying deep neural networks without performance degradation |
US20190080253A1 (en) * | 2017-09-12 | 2019-03-14 | Sas Institute Inc. | Analytic system for graphical interpretability of and improvement of machine learning models |
US20200250515A1 (en) * | 2017-10-27 | 2020-08-06 | Google Llc | Systems and Methods for Improved Optimization of Machine-Learned Models |
WO2019083578A1 (en) * | 2017-10-27 | 2019-05-02 | Google Llc | Systems and methods for improved optimization of machine-learned models |
US20190236487A1 (en) * | 2018-01-30 | 2019-08-01 | Microsoft Technology Licensing, Llc | Machine learning hyperparameter tuning tool |
US20190244139A1 (en) * | 2018-02-02 | 2019-08-08 | Oracle International Corporation | Using meta-learning for automatic gradient-based hyperparameter optimization for machine learning and deep learning models |
EP3543917A1 (en) * | 2018-03-19 | 2019-09-25 | SRI International Inc. | Dynamic adaptation of deep neural networks |
US20200134461A1 (en) * | 2018-03-20 | 2020-04-30 | Sri International | Dynamic adaptation of deep neural networks |
WO2019238976A1 (en) * | 2018-06-15 | 2019-12-19 | Université de Liège | Image classification using neural networks |
US11210144B2 (en) * | 2018-07-06 | 2021-12-28 | Capital One Services, Llc | Systems and methods for hyperparameter tuning |
US20210224692A1 (en) * | 2018-10-09 | 2021-07-22 | Preferred Networks, Inc. | Hyperparameter tuning method, device, and program |
Non-Patent Citations (38)
Title |
---|
Bengio, "Gradient-Based Optimization of Hyperparameters", Neural Computation, vol. 12, 2000, pp. 1889-1900. |
Caruana et al., "Overfitting in Neural Nets: Backpropagation, Conjugate Gradient, and Early Stopping", Advances in Neural Information Processing Systems 13, May 2001, 7 pages. |
Cohen et al., "Solving Linear Programs in the Current Matrix Multiplication Time", arXiv:1810.07896v2, Nov. 23, 2019, 42 pages. |
Diaconis et al., "Conjugate Priors for Exponential Families", The Annals of Statistics, vol. 7, No. 2, 1979, pp. 269-281. |
Diamond et al., "CVXPY: A Python-Embedded Modeling Language for Convex Optimization", Journal of Machine Learning Research, vol. 17, 2016, 5 pages. |
Donahue et al., "DeCAF: A Deep Convolutional Activation Feature for Generic Visual Recognition", 31st International Conference on Machine Learning, Jun. 21-26, 2014, Beijing, China, 9 pages. |
Duan, Kaibo, S. Sathiya Keerthi, and Aun Neow Poo. "Evaluation of simple performance measures fortuning SVM hyperparameters." Neurocomputing 51 (2003): 41-59. (Year: 2003). * |
Duchi et al., "Adaptive Subgradient Methods for Online Learning and Stochastic Optimization", Journal of Machine Learning Research, vol. 12, Jul. 2011, pp. 2121-2159. |
Fan et al., "Learning to Teach", International Conference on Learning Representations, Apr. 30-May 3, 2018, Vancouver, Canada, 16 pages. |
Fei-Fei et al., "Learning Generative Visual Models from Few Training Examples: An Incremental Bayesian Approach Tested on 101 Object Categories", Computer Vision and Pattern Recognition Workshop, Jun. 27-Jul. 2, 2004, Washington, D.C., 9 pages. |
Foo, Chuan-sheng, and Andrew Ng. "Efficient multiple hyperparameter learning for log-linear models." Advances in neural information processing systems 20 (2007). (Year: 2007). * |
Frank et al., "A Statistical View of Some Chemometrics Regression Tools", Technometrics, vol. 35, No. 2, May 1993, pp. 109-135. |
Fu, "Penalized Regressions: The Bridge Versus the Lasso", Journal of Computational and Graphical Statistics, vol. 7, No. 3, 1998, 20 pages. |
Hoerl et al., "Ridge Regression: Biased Estimation for Nonorthogonal Problems", Technometrics, vol. 12, No. 1, Feb. 1970, pp. 55-67. |
Jiang et al., "Predicting the Generalization Gap in Deep Networks with Margin Distributions", International Conference on Learning Representations, May 6-9, 2019, New Orleans, Louisiana, pp. 1-19. |
Kather et al., "Multi-class texture analysis in colorectal cancer histology". Scientific Reports, vol. 6:27988, Jun. 2016, 11 pages. |
Keerthi, Sathiya, Vikas Sindhwani, and Olivier Chapelle. "An efficient method for gradient-based adaptation of hyperparameters in SVM models." Advances in neural information processing systems 19 (2006). (Year: 2006). * |
Klein, Aaron, et al. "Fast bayesian optimization of machine learning hyperparameters on large datasets." Artificial intelligence and statistics. PMLR, 2017. (Year: 2017). * |
LeCun et al., "Gradient-Based Learning Applied to Document Recognition", Proceedings of the IEEE, vol. 86, No. 11, Nov. 1998, 46 pages. |
Liang et al., "Asvmptoticallv Optimal Regularization in Smooth Parametric Models", Twenty Third Annual Conference on Neural Information Processing Systems, Dec. 7-12, 2009, Vancouver, British Columbia, Canada, 9 pages. |
MacKay et al., "Self-Tuning Networks: Bilevel Optimization of Hyperparameters Using Structured Best-Response Functions", Seventh International Conference on Learning Representations, May 6-9, 2019, New Orleans, Louisiana, 25 pages. |
McMahan et al., "Ad Click Prediction: a View from the Trenches", 19th ACM SIGKDD Conference on Knowledge Discovery and Data Mining (KDD), Aug. 11-14, 2013, Cincago, Illinois, 9 pages. |
McMahan, "A Survey of Algorithms and Analysis for Adaptive Online Learning", The Journal of Machine Learning, vol. 18, Aug. 2017, 50 pages. |
Parkhi et al., "Cats and Dogs", IEEE Conference on Computer Vision and Pattern Recognition, Jun. 16-21, 2012, Providence, Rhode Island, 8 pages. |
Pedregosa, "Hyperparameter optimization with approximate gradient", Proceedings of the 33rd International Conference on Machine Learning, PMLR, vol. 48, 2016, 10 pages. |
Russakovsky et al., "ImageNet Large Scale Visual Recognition Challenge", arXiv:1409.0575v3, Jan. 30, 2015, 43 pages. |
Snoek et al., "Practical Bayesian Optimization of Machine Learning Algorithms", Advances in Neural Information Processing Systems 25 (NIPS), 2012, 9 pages. |
Srivastava et al., "Dropout: A Simple Way to Prevent Neural Networks from Overfitting", The Journal of Machine learning Research, vol. 15, No. 56, 2014, pp. 1929-1958. |
Streeter, "Learning Optimal Linear Regularizers", 36th International Conference on Machine Learning, Jun. 9-15, 2019, Long Beach, CA, 9 pages. |
Szegedy et al., "Rethinking the Inception Architecture for Computer Vision", IEEE Conference on Computer Vision and Pattern Recognition, Jun. 26-Jul. 1, 2016, Las Vegas, Nevada, pp. 2818-2826. |
Tensorflow.org, "Retraining an Image Classifier", https://www.tensorflow.org/hub/tutorials/image_retraining, retrieved on Apr. 6, 2021, 12 pages. |
Tensorflow.org, "tf_flowers", https://www.tensorflow.org/datasets/catalog/tf_flowers, retrieved on Apr. 7, 2021, 4 pages. |
Tibshirani, "Regression Shrinkage and Selection via the Lasso", Journal of the Royal Statistical Society, Senes B, vol. 58, No. 1, 1996, pp. 267-288. |
Wu et al., "Bayesian Optimization with Gradients", Thirty-first Conference on Neural Information Processing Systems, Dec. 4-9, 2017, Long Beach, CA, 12 pages. |
Wu et al., "Learning to Teach with Dynamic Loss Functions", Thirty-second Conference on Neural Information Processing Systems, Dec. 3-8, 2018, Montreal, Canada, 12 pages. |
Yu, Jiaqian, and Matthew Blaschko. "A convex surrogate operator for general non-modular loss functions." Artificial Intelligence and Statistics. PMLR, 2016. (Year: 2016). * |
Zhang et al., "Understanding Deep Learning Requires Rethinking Generalization", International Conference on Learning Representations, Apr. 24-26, 2017, Toulon, France, 15 pages. |
Zou et al., "Regularization and variable selection via the elastic net", Journal of the Royal Statistical Society, Series B, vol. 67, No. 2, 2005, pp. 301-320. |
Also Published As
Publication number | Publication date |
---|---|
US20200372305A1 (en) | 2020-11-26 |
Similar Documents
Publication | Publication Date | Title |
---|---|---|
US11657118B2 (en) | Systems and methods for learning effective loss functions efficiently | |
US11676008B2 (en) | Parameter-efficient multi-task and transfer learning | |
US11809993B2 (en) | Systems and methods for determining graph similarity | |
US20210034985A1 (en) | Unification of models having respective target classes with distillation | |
EP3446260B1 (en) | Memory-efficient backpropagation through time | |
US20220036203A1 (en) | Identifying and Correcting Label Bias in Machine Learning | |
US11526752B2 (en) | Systems and methods for active learning | |
US11048718B2 (en) | Methods and systems for feature engineering | |
US20180197087A1 (en) | Systems and methods for retraining a classification model | |
US11436496B2 (en) | Systems and methods for regularizing neural networks | |
US8589331B2 (en) | Predicting outcomes of a content driven process instance execution | |
US11429894B2 (en) | Constrained classification and ranking via quantiles | |
US11100406B2 (en) | Knowledge network platform | |
EP4120138B1 (en) | System and method for molecular property prediction using hypergraph message passing neural network (hmpnn) | |
US20210383223A1 (en) | Joint Architecture And Hyper-Parameter Search For Machine Learning Models | |
US20210397895A1 (en) | Intelligent learning system with noisy label data | |
US20200241878A1 (en) | Generating and providing proposed digital actions in high-dimensional action spaces using reinforcement learning models | |
EP4120137A1 (en) | System and method for molecular property prediction using edge conditioned identity mapping convolution neural network | |
US20220366257A1 (en) | Small and Fast Video Processing Networks via Neural Architecture Search | |
US20230059708A1 (en) | Generation of Optimized Hyperparameter Values for Application to Machine Learning Tasks | |
US20220043681A1 (en) | Memory usage prediction for machine learning and deep learning models | |
US20220092387A1 (en) | Systems and Methods for Producing an Architecture of a Pyramid Layer | |
US10304007B2 (en) | Using a plurality of heterogeneous decision engines to produce a single decision | |
US20230267018A1 (en) | System and method of automated processing for dynamic api generation | |
US20220083571A1 (en) | Systems and methods for classifying imbalanced data |
Legal Events
Date | Code | Title | Description |
---|---|---|---|
FEPP | Fee payment procedure |
Free format text: ENTITY STATUS SET TO UNDISCOUNTED (ORIGINAL EVENT CODE: BIG.); ENTITY STATUS OF PATENT OWNER: LARGE ENTITY |
|
AS | Assignment |
Owner name: GOOGLE LLC, CALIFORNIAFree format text: ASSIGNMENT OF ASSIGNORS INTEREST;ASSIGNOR:STREETER, MATTHEW JOHN;REEL/FRAME:052905/0891Effective date: 20190531 |
|
STPP | Information on status: patent application and granting procedure in general |
Free format text: APPLICATION DISPATCHED FROM PREEXAM, NOT YET DOCKETED |
|
STPP | Information on status: patent application and granting procedure in general |
Free format text: DOCKETED NEW CASE - READY FOR EXAMINATION |
|
STPP | Information on status: patent application and granting procedure in general |
Free format text: NON FINAL ACTION MAILED |
|
STPP | Information on status: patent application and granting procedure in general |
Free format text: RESPONSE TO NON-FINAL OFFICE ACTION ENTERED AND FORWARDED TO EXAMINER |
|
STCF | Information on status: patent grant |
Free format text: PATENTED CASE |