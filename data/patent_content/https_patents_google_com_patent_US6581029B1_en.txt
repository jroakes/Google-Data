US6581029B1 - Method and system for optimizing execution of a collection of related module sequences by eliminating redundant modules - Google Patents
Method and system for optimizing execution of a collection of related module sequences by eliminating redundant modules Download PDFInfo
- Publication number
- US6581029B1 US6581029B1 US09/310,144 US31014499A US6581029B1 US 6581029 B1 US6581029 B1 US 6581029B1 US 31014499 A US31014499 A US 31014499A US 6581029 B1 US6581029 B1 US 6581029B1
- Authority
- US
- United States
- Prior art keywords
- modules
- execution
- prerequisites
- equivalent
- scripts
- Prior art date
- Legal status (The legal status is an assumption and is not a legal conclusion. Google has not performed a legal analysis and makes no representation as to the accuracy of the status listed.)
- Expired - Lifetime
Links
Images
Classifications
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F30/00—Computer-aided design [CAD]
- G06F30/30—Circuit design
- G06F30/36—Circuit design at the analogue level
- G06F30/367—Design verification, e.g. using simulation, simulation program with integrated circuit emphasis [SPICE], direct methods or relaxation methods
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F30/00—Computer-aided design [CAD]
- G06F30/20—Design optimisation, verification or simulation
- G06F30/23—Design optimisation, verification or simulation using finite element methods [FEM] or finite difference methods [FDM]
Definitions
- the present invention relates to the semiconductor device simulation art. Specifically, a computer-implemented method and system is described which increases efficiency in the processing of executable modules representing steps in the creation and testing of simulated semiconductor devices, by eliminating redundant modules from the process flow.
- TCAD Technical Computer-Aided Design
- simulation control “recipes” are computer-executable scripts defining a set of process steps to be performed by a simulation processor in the creation of a simulated device.
- the simulation processor under the control of a simulation control script, produces an output data file representing a virtual semiconductor device, such as a transistor. This output data file may then be studied by a designer, and may further be input to a device test simulation processor which simulates the response of the virtual device to a selected test of its electrical properties.
- the process steps defined by the simulation control scripts reflect process steps used in the actual manufacture of semiconductor devices. Variables in the process steps include, for example, dosages and energies for implantation of impurities into a silicon wafer, annealing times and temperatures, and mask layout. It is of interest to designers to determine values for these variables so as to produce a device with desired or optimal electrical properties; simulation makes this convenient and cost-effective, since no physical device need be constructed. Instead, a collection of simulation control scripts may be constructed, each script defining a different set of values for process variables and representing a particular simulation experiment. The simulation control scripts may then be executed, and the resulting virtual devices may be tested and compared.
- Such a collection of simulation control scripts can be quite numerous, owing to numerous varying parameters having been defined for the process steps. Moreover, the time required by the simulation processor to perform the computations necessary for simulation can be substantial, ranging from hours to days.
- a method and system according to the present invention provides an approach to processing a collection of simulation control scripts which meets the foregoing objective, and which is not known to exist in the prior art.
- the method exploits commonalities in a collection of modules containing scripts to be executed, to eliminate redundant modules from the execution process.
- the collection of modules represents a set of related simulation experiments and are organized as generations of related module sequences having execution interdependencies.
- the related sequences typically include common module sequences, followed by one or more points known as “splits” at which the sequences diverge, representing points at which a variation in process parameters has been introduced by a user of the simulation system.
- the method according to the present invention organizes the common module sequences preceding splits into groups of equivalent modules, and then eliminates redundant modules in each group.
- the groups of equivalent modules are formed by comparing the modules within each generation to each other to determine which modules are equivalent. Modules which will produce the same output data given the same input data, and which have equivalent execution prerequisites, are considered equivalent.
- a single “target” module is selected to substitute for the others in the module execution sequences, and execution interdependencies are redefined to effect the substitution.
- execution is optimal in that redundant modules have been eliminated from the sequences, making it possible to realize a significant savings in simulation time and a reduction of the workload on the simulation system.
- FIG. 1 shows a high-level representation of a computer system for implementing an embodiment of the present invention
- FIG. 2 shows an example of a collection of executable modules organized as generations of related module sequences having execution interdependencies
- FIGS. 3A and 3B show a directory structure for implementing the execution interdependencies of FIG. 2;
- FIG. 4A shows generation 1 equivalency groups
- FIG. 4B shows target modules within the generation 1 equivalency groups, with associated linked (redundant) modules
- FIGS. 5A and 5B show generation 2 equivalency groups and subsequent links, respectively;
- FIG. 6 shows the redefinition of execution interdependencies after application of the method of the present invention, in terms of target modules and associated linked (redundant) modules;
- FIGS. 7A and 7B show the same information as FIG. 6 in terms of directory contents
- FIG. 8 shows an effective execution interdependency structure, following application of the method of the present invention to the modules shown in FIG. 2;
- FIGS. 9A and 9B show a flowchart of the basic logic of an embodiment of the method.
- FIG. 1 shows a high-level representation of a computer system for implementing a preferred embodiment of the present invention.
- the computer system represents a known and commercially available hardware and software platform for the invention, and comprises a processing system 5 including a processor 10 , memory 15 , computer-usable storage means 20 , and a user interface 25 allowing for user interaction with the system.
- a computer program comprising computer-executable instructions for performing method steps according to the present invention may reside on a computer-usable medium such as storage means 20 .
- computer instructions according to the present invention may be retrieved from storage means 20 into memory 15 , and executed by a processor 10 .
- the programming structures and functionality disclosed herein for performing the method may find specific implementations in a variety of forms, which are considered to be within the abilities of a programmer of ordinary skill in the art after having reviewed the specification.
- the method steps of the present invention are applied to data comprising a collection of executable modules representing steps in a simulation process flow.
- the executable modules include simulation control scripts written in a high-level programming language such as Tcl/Tk, along with associated execution sequence and status information.
- the modules may be executed to provide control input to a simulation processor 30 for producing and/or testing one or more virtual devices.
- a given sequence of executable modules represents a particular experiment designed by a user, typically a process or device engineer, for determining the effect of varying parameters in process steps on the electrical properties of a simulated semiconductor device.
- the above-noted applications also describe in detail how such modules are created and stored.
- a collection of related experiments typically includes experiments having sequences of modules in common, but further having one or more points known as “splits” at which the sequences diverge, representing points at which a variation in process parameters has been introduced by a user.
- FIG. 2 shows an example of commonalities in module sequences such as typically occur in a collection of related experiments.
- Modules designated with identical letters (A-L) are to be considered as containing identical scripts (i.e., given identical input, the scripts will produce identical output).
- modules 102 , 103 and 107 have scripts identical to the scripts of modules 100 , 101 and 106 , respectively
- modules 105 , 109 and 114 have scripts identical to the scripts of modules 104 , 108 and 113 , respectively.
- a split between sequences 1 and 2 occurs at generation 3
- a split between sequences 3 and 4 occurs at generation 4 , since at these points, the scripts are different.
- a module in an execution sequence may have one or more prerequisites, and its execution must be delayed until the prerequisite modules have executed to provide the necessary input.
- execution interdependencies are represented by connecting lines. Modules at a generation level lower (numerically) than the generation level of a connected module must execute and complete earlier than the higher-level-generation connected module. Thus, for example, modules 100 and 101 must execute before module 106 , modules 104 , 108 and 113 must execute before module 117 , and so on.
- the method of the present invention exploits commonalities in module sequences such as those illustrated in FIG. 2 to minimize the number of modules which need to be executed in a collection of related experiments. Because module sequences preceding splits often include modules with identical scripts and equivalent prerequisites, only one such module sequence need be executed, and the resulting data can be fed at the split points into diverging module sequences of higher generations.
- the method of the present invention performs a restructuring of execution interdependencies in order to realize this possibility.
- execution interdependencies are conveniently referred to in terms of “ancestry”.
- execution prerequisites represented by generationally lower-level connected modules, are hereinafter referred to as “parent” modules, while higher-level connected modules are called “child” modules.
- modules 100 and 101 are the parent modules of module 106
- module 110 is the child module of module 106 , and so on.
- a structure such as that represented by sequence 1 in FIG. 2 is known as a “directed acyclic graph” (DAG).
- DAG is characterized in that, as opposed to a more specialized “tree” structure, a node or vertex in the DAG (here, a module) may have multiple parent nodes.
- sequence 2 is also a DAG.
- FIG. 2 are implemented on storage means such as storage means 20 in a set of directories linked by a system of pointers.
- Each executable module is a directory containing a simulation control script, along with information relating to the execution interdependencies and execution status of the script.
- Directories implementing the structure of FIG. 2 are illustrated in FIGS. 3A and 3B.
- each executable module 100 - 118 includes execution interdependency information comprising at a minimum either the parent modules, if any, or the child modules, if any; either may be derived from the other.
- execution interdependency information comprising at a minimum either the parent modules, if any, or the child modules, if any; either may be derived from the other.
- parent and child information is included in the modules shown in FIGS. 3A and 3B.
- the modules further comprise a simulation control script written in a high-level programming language (represented here by single uppercase letters A-L); and an execution status, which can indicate that the module is either awaiting execution, is currently executing, or has completed execution.
- modules 100 - 105 are parentless modules, and consequently form generation 1 .
- modules 106 - 109 each have generation 1 modules as parents, and consequently form generation 2 .
- Generations 3 and 4 are similarly defined.
- FIGS. 3A and 3B describe in detail how the information shown in FIGS. 3A and 3B is used to manage the execution of such a collection of modules to account for execution interdependencies, and in particular when the process flow includes DAG structures.
- parentless modules are executed first, since they have no prerequisites. When a module has begun or completed execution, its execution status information is updated accordingly. Parent execution status for each child module is monitored, and when all parents of a child module have completed execution, the child module is added to a list of runable jobs to be farmed out to an available processor in a multiprocessor system.
- the method according to the present invention optimizes the collection of executable modules to be processed as described in the foregoing paragraph, and comprises the fundamental steps of:
- Step 1 may be further subdivided into the steps of:
- Step 2 may be further subdivided into the steps of:
- modules are equivalent if:
- FIGS. 9A and 9B Basic logic flow for an implementation of the foregoing steps is illustrated in FIGS. 9A and 9B.
- the operations described in the following will be understood to be occurring in a computer memory such as memory 15 under the control of a processor such as processor 10 executing instructions according to the method of the present invention.
- generation 1 modules are determined by examining the parent information for the modules as shown in FIGS. 3A and 3B.
- Parentless modules have no prerequisites, and consequently form the generation 1 modules.
- Parentless modules have equivalent ancestry because they have no ancestry, and thus all that needs to be determined for generation 1 modules is which of them, given the same input data, will produce the same output data.
- the foregoing condition is met when the modules contain scripts (fully expanded if they contain macro references of any sort) which are letter-for-letter identical.
- equivalency group 1 Given a number N of generation 1 modules, one module is arbitrarily assigned to equivalency group 1 , as shown in block 45 .
- “equivalency group 1 ” simply refers to a newly-created classification for the modules which might or might not ultimately contain more than one equivalent member.
- modules are systematically compared to determine which of the modules contain identical scripts, using, for example, an indexed looping procedure such as that shown in block 50 .
- Modules containing identical scripts are assigned to the same equivalency group. If a match is not found for a module in an existing equivalency group, a new equivalency group is generated for the module.
- N equivalency groups After a routine such as that shown in block 50 is performed, up to N equivalency groups will have been created, although ideally there will be fewer than N equivalency groups, indicating that some of the modules are equivalent, and consequently redundant and suitable for elimination.
- Block 55 depicts this step.
- the most mature module is selected as the target, by testing first for whether any module has completed execution, then for whether any module is currently executing. By selecting an already-executed or executing module as the target module, further time savings can be realized. If a mature module cannot be found, the target module is selected arbitrarily.
- All modules in each equivalency group not selected as the target module are redundant, so they are replaced by references to the target module. This is implemented by issuing a “link” command to the file system supporting the module directories, which generates pointers causing all references to a linked directory to be directed to a target directory. Effectively, the contents of a linked directory are replaced by those of the target, accomplishing a redefinition of execution interdependencies.
- the generations succeeding generation 1 are processed next, as shown in blocks 65 - 80 .
- the modules of these higher-level generations are first organized into potential equivalency groups, by testing whether any modules have equivalent ancestry, as shown in block 65 .
- Block 65 illustrates a routine for finding potential equivalency groups for a generation having a number K of modules. Then, actual equivalency groups are determined by determining which modules within a potential equivalency group contain identical scripts, as shown in block 70 .
- Block 70 illustrates a routine for assigning actual equivalency groups for a potential equivalency group having L members.
- target modules are designated for each actual equivalency group having more than one member. All other modules are replaced by references to the target module.
- Module 100 is assigned to equivalency group 1 . Next, module 101 is compared with module 100 to determine whether the two modules contain identical scripts.
- Modules 100 and 101 scripts are not identical (module 100 contains script “A” and module 101 contains script “B”). Thus, module 101 is assigned to new equivalency group 2 .
- module 102 is compared with module 100 .
- Modules 100 and 102 are equivalent, because they contain identical scripts and have equivalent ancestry.
- module 102 is assigned to equivalency group 1 with module 100 .
- module 103 is compared with module 100 . They do not contain identical scripts, so module 103 is compared with module 101 . Modules 101 and 103 are equivalent, because they contain identical scripts and have equivalent ancestry. Thus, module 103 is assigned to equivalency group 2 with module 101 .
- FIG. 4A shows the resulting equivalency groups for generation 1 .
- All equivalency groups for generation 1 have now been determined.
- target modules are designated. As shown in FIGS. 3A and 3B, in this example modules 100 and 102 are both awaiting execution, so module 100 is arbitrarily selected as the target module in equivalency group 1 . In equivalency group 2 , module 104 has completed execution, so it is selected as the target module.
- FIG. 4B shows the equivalency groups of generation 1 after the target modules have been selected and redundant modules replaced by references to the target modules.
- Left-pointing arrows indicate linked modules. For example, the left-pointing arrow from module 102 to module 100 indicates that module 102 has been linked to module 100 .
- FIGS. 7A and 7B further illustrates how this structure is effected in the module directories.
- the method steps are now complete for generation 1 , and the steps are next applied to the generation 2 modules, 106 , 107 , 108 and 109 .
- modules 106 and 107 are first assigned to the same potential equivalency group because they each have the same number of parent modules (two), and corresponding parent modules ( 100 and 102 , and 101 and 103 , respectively) are equivalent. Then, they are assigned to the same actual equivalency groups because they contain identical scripts.
- FIG. 5A shows the equivalency groups for generation 2 , and the links formed earlier for generation 1 .
- target modules are designated for the generation 2 modules, which results in the configuration shown in FIG. 5B, with module 107 being linked to module 106 , and module 109 being linked to module 108 .
- FIG. 6 The structure of FIG. 6 is reflected in FIGS. 7A and 7B, as the structure is implemented by the directory pointers. Redundant modules 101 , 102 , 103 , 105 , 107 , 109 and 114 have all been replaced by references to equivalent target modules.
- module 111 shows module 107 as its parent.
- module 106 effectively becomes the parent of module 111 , eliminating module 107 from the chain of interdependencies.
- the new, effective execution flow may be represented by a structure such as FIG. 8 .
- the split in sequences 1 and 2 at generation 3 is now supplied by the single sequence of modules 100 , 104 and 106 , and the split in sequences 3 and 4 at generation 4 is supplied by the single sequence 104 , 108 and 113 .
- the method of the present invention may be invoked by a user at any time to optimize the execution of a collection of modules generated as a group of related experiments in simulation modeling of semiconductor devices.
- a user invokes the software of the invention by clicking on an option provided in a pop-up menu in a user interface such as user interface 25 , and selecting a group of executable modules as input.
- the modules may be at various stages in the execution process; i.e., either awaiting execution, currently executing, or complete. Following reconstruction of execution interdependencies by application of the method, execution is thenceforward optimal in that redundant modules are eliminated.
- the present invention may advantageously be embodied as computer-executable instructions on a computer-usable storage medium; the instructions may be retrieved into a computer memory and executed by a processor.
- the instructions may reside on portable computer-usable media such as tape, floppy disks, hard disks, CD-ROMs and the like.
Abstract
Description
Claims (10)
Priority Applications (1)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US09/310,144 US6581029B1 (en) | 1999-05-11 | 1999-05-11 | Method and system for optimizing execution of a collection of related module sequences by eliminating redundant modules |
Applications Claiming Priority (1)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US09/310,144 US6581029B1 (en) | 1999-05-11 | 1999-05-11 | Method and system for optimizing execution of a collection of related module sequences by eliminating redundant modules |
Publications (1)
Publication Number | Publication Date |
---|---|
US6581029B1 true US6581029B1 (en) | 2003-06-17 |
Family
ID=23201186
Family Applications (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
US09/310,144 Expired - Lifetime US6581029B1 (en) | 1999-05-11 | 1999-05-11 | Method and system for optimizing execution of a collection of related module sequences by eliminating redundant modules |
Country Status (1)
Country | Link |
---|---|
US (1) | US6581029B1 (en) |
Cited By (8)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US6802045B1 (en) * | 2001-04-19 | 2004-10-05 | Advanced Micro Devices, Inc. | Method and apparatus for incorporating control simulation environment |
US20050071036A1 (en) * | 2003-09-30 | 2005-03-31 | Tokyo Electron Limited | System and method for using first-principles simulation to characterize a semiconductor manufacturing process |
US20050071034A1 (en) * | 2003-09-30 | 2005-03-31 | Tokyo Electron Limited | System and method for using first-principles simulation to facilitate a semiconductor manufacturing process |
US20080195857A1 (en) * | 2007-02-09 | 2008-08-14 | Sony Corporation | Techniques For Automatic Registration Of Appliances |
US8036869B2 (en) | 2003-09-30 | 2011-10-11 | Tokyo Electron Limited | System and method for using first-principles simulation to control a semiconductor manufacturing process via a simulation result or a derived empirical model |
US8539404B2 (en) | 2011-09-23 | 2013-09-17 | International Business Machines Corporation | Functional simulation redundancy reduction by state comparison and pruning |
WO2018228528A1 (en) * | 2017-06-16 | 2018-12-20 | 北京紫光得瑞科技有限公司 | Batch circuit simulation method and system |
US10664248B2 (en) * | 2018-07-16 | 2020-05-26 | Servicenow, Inc. | Systems and methods for comparing computer scripts |
Citations (7)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US5801958A (en) * | 1990-04-06 | 1998-09-01 | Lsi Logic Corporation | Method and system for creating and validating low level description of electronic design from higher level, behavior-oriented description, including interactive system for hierarchical display of control and dataflow information |
US5805860A (en) * | 1995-07-05 | 1998-09-08 | Sun Microsystems, Inc. | Methods, data structures and apparatus for traversing a hierarchical netlist |
US5838948A (en) * | 1995-12-01 | 1998-11-17 | Eagle Design Automation, Inc. | System and method for simulation of computer systems combining hardware and software interaction |
US5903475A (en) * | 1996-07-18 | 1999-05-11 | Lsi Logic Corporation | System simulation for testing integrated circuit models |
US5937183A (en) * | 1996-11-05 | 1999-08-10 | Nec Usa, Inc. | Enhanced binary decision diagram-based functional simulation |
US6026228A (en) * | 1996-12-13 | 2000-02-15 | Semiconductor Technology Academic Research Center | Integrated circuit design method, database apparatus for designing integrated circuit and integrated circuit design support apparatus |
US6477683B1 (en) * | 1999-02-05 | 2002-11-05 | Tensilica, Inc. | Automated processor generation system for designing a configurable processor and method for the same |
-
1999
- 1999-05-11 US US09/310,144 patent/US6581029B1/en not_active Expired - Lifetime
Patent Citations (7)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US5801958A (en) * | 1990-04-06 | 1998-09-01 | Lsi Logic Corporation | Method and system for creating and validating low level description of electronic design from higher level, behavior-oriented description, including interactive system for hierarchical display of control and dataflow information |
US5805860A (en) * | 1995-07-05 | 1998-09-08 | Sun Microsystems, Inc. | Methods, data structures and apparatus for traversing a hierarchical netlist |
US5838948A (en) * | 1995-12-01 | 1998-11-17 | Eagle Design Automation, Inc. | System and method for simulation of computer systems combining hardware and software interaction |
US5903475A (en) * | 1996-07-18 | 1999-05-11 | Lsi Logic Corporation | System simulation for testing integrated circuit models |
US5937183A (en) * | 1996-11-05 | 1999-08-10 | Nec Usa, Inc. | Enhanced binary decision diagram-based functional simulation |
US6026228A (en) * | 1996-12-13 | 2000-02-15 | Semiconductor Technology Academic Research Center | Integrated circuit design method, database apparatus for designing integrated circuit and integrated circuit design support apparatus |
US6477683B1 (en) * | 1999-02-05 | 2002-11-05 | Tensilica, Inc. | Automated processor generation system for designing a configurable processor and method for the same |
Cited By (16)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US6802045B1 (en) * | 2001-04-19 | 2004-10-05 | Advanced Micro Devices, Inc. | Method and apparatus for incorporating control simulation environment |
US8032348B2 (en) | 2003-09-30 | 2011-10-04 | Tokyo Electron Limited | System and method for using first-principles simulation to facilitate a semiconductor manufacturing process |
US8036869B2 (en) | 2003-09-30 | 2011-10-11 | Tokyo Electron Limited | System and method for using first-principles simulation to control a semiconductor manufacturing process via a simulation result or a derived empirical model |
US20050071034A1 (en) * | 2003-09-30 | 2005-03-31 | Tokyo Electron Limited | System and method for using first-principles simulation to facilitate a semiconductor manufacturing process |
WO2005034185A2 (en) * | 2003-09-30 | 2005-04-14 | Tokyo Electron Limited | System and method for on-tool semiconductor simulation |
WO2005034185A3 (en) * | 2003-09-30 | 2005-10-20 | Tokyo Electron Ltd | System and method for on-tool semiconductor simulation |
US8050900B2 (en) | 2003-09-30 | 2011-11-01 | Tokyo Electron Limited | System and method for using first-principles simulation to provide virtual sensors that facilitate a semiconductor manufacturing process |
US20050071039A1 (en) * | 2003-09-30 | 2005-03-31 | Tokyo Electron Limited | System and method for using first-principles simulation to provide virtual sensors that facilitate a semiconductor manufacturing process |
US20050071036A1 (en) * | 2003-09-30 | 2005-03-31 | Tokyo Electron Limited | System and method for using first-principles simulation to characterize a semiconductor manufacturing process |
US8014991B2 (en) | 2003-09-30 | 2011-09-06 | Tokyo Electron Limited | System and method for using first-principles simulation to characterize a semiconductor manufacturing process |
US20080195857A1 (en) * | 2007-02-09 | 2008-08-14 | Sony Corporation | Techniques For Automatic Registration Of Appliances |
US8539404B2 (en) | 2011-09-23 | 2013-09-17 | International Business Machines Corporation | Functional simulation redundancy reduction by state comparison and pruning |
WO2018228528A1 (en) * | 2017-06-16 | 2018-12-20 | 北京紫光得瑞科技有限公司 | Batch circuit simulation method and system |
US10664248B2 (en) * | 2018-07-16 | 2020-05-26 | Servicenow, Inc. | Systems and methods for comparing computer scripts |
AU2019205025B2 (en) * | 2018-07-16 | 2020-09-17 | Servicenow, Inc. | Systems and methods for comparing computer scripts |
US10996934B2 (en) | 2018-07-16 | 2021-05-04 | Servicenow, Inc. | Systems and methods for comparing computer scripts |
Similar Documents
Publication | Publication Date | Title |
---|---|---|
US7055065B2 (en) | Method, system, and computer program product for automated test generation for non-deterministic software using state transition rules | |
US5809283A (en) | Simulator for simulating systems including mixed triggers | |
Naveh et al. | Constraint-based random stimuli generation for hardware verification | |
US6430590B1 (en) | Method and apparatus for processing executable program modules having multiple dependencies | |
US5691925A (en) | Deriving tractable sub-system for model of larger system | |
US5831869A (en) | Method of compacting data representations of hierarchical logic designs used for static timing analysis | |
US6026220A (en) | Method and apparatus for incremntally optimizing a circuit design | |
US5960182A (en) | Hardware-software co-simulation system, hardware-software co-simulation method, and computer-readable memory containing a hardware-software co-simulation program | |
US6295517B1 (en) | Method and apparatus for adaptively or selectively choosing event-triggered cycle-based simulation or oblivious-triggered cycle-based simulation on a cluster-by-cluster basis | |
NL8900084A (en) | KNOWLEDGE-BASED METHODS AND APPARATUS FOR DESIGNING INTEGRATED CIRCUITS FROM FUNCTIONAL SPECIFICATIONS | |
US9047165B1 (en) | Multiversion model versioning system and method | |
US5587919A (en) | Apparatus and method for logic optimization by redundancy addition and removal | |
JP2011096107A (en) | Parallelizing method, system, and program | |
EP0847022A2 (en) | Method for designing an architectural system | |
US6581029B1 (en) | Method and system for optimizing execution of a collection of related module sequences by eliminating redundant modules | |
JP5479942B2 (en) | Parallelization method, system, and program | |
US5940604A (en) | Method and apparatus for monitoring the performance of a circuit optimization tool | |
US20050086565A1 (en) | System and method for generating a test case | |
US9298858B1 (en) | System and method for reducing models based on a criterion | |
Bhattacharya et al. | Hierarchical Modeling for VLSI Circuit Testing | |
JPH05101141A (en) | High-level composition device | |
GB2354096A (en) | Obtaining design parameters for satisfying multiple constraints and/or optimizing multiple objective functions | |
CN114417757A (en) | Method for automatically compiling and generating FPGA (field programmable Gate array) engineering with different functions | |
JP3641090B2 (en) | Programming support apparatus and method | |
Saab | Parallel-concurrent fault simulation |
Legal Events
Date | Code | Title | Description |
---|---|---|---|
AS | Assignment |
Owner name: INTERNATIONAL BUSINESS MACHINES CORPORATION, NEW YFree format text: ASSIGNMENT OF ASSIGNORS INTEREST;ASSIGNOR:FISCHER, STEPHEN E.;REEL/FRAME:009955/0333Effective date: 19990507 |
|
FEPP | Fee payment procedure |
Free format text: PAYOR NUMBER ASSIGNED (ORIGINAL EVENT CODE: ASPN); ENTITY STATUS OF PATENT OWNER: LARGE ENTITY |
|
STCF | Information on status: patent grant |
Free format text: PATENTED CASE |
|
FPAY | Fee payment |
Year of fee payment: 4 |
|
REMI | Maintenance fee reminder mailed | ||
FPAY | Fee payment |
Year of fee payment: 8 |
|
SULP | Surcharge for late payment |
Year of fee payment: 7 |
|
AS | Assignment |
Owner name: GOOGLE INC., CALIFORNIAFree format text: ASSIGNMENT OF ASSIGNORS INTEREST;ASSIGNOR:INTERNATIONAL BUSINESS MACHINES CORPORATION;REEL/FRAME:026664/0866Effective date: 20110503 |
|
FEPP | Fee payment procedure |
Free format text: PAYOR NUMBER ASSIGNED (ORIGINAL EVENT CODE: ASPN); ENTITY STATUS OF PATENT OWNER: LARGE ENTITYFree format text: PAYER NUMBER DE-ASSIGNED (ORIGINAL EVENT CODE: RMPN); ENTITY STATUS OF PATENT OWNER: LARGE ENTITY |
|
FPAY | Fee payment |
Year of fee payment: 12 |
|
AS | Assignment |
Owner name: GOOGLE LLC, CALIFORNIAFree format text: CHANGE OF NAME;ASSIGNOR:GOOGLE INC.;REEL/FRAME:044127/0735Effective date: 20170929 |