US7266663B2 - Automatic cache activation and deactivation for power reduction - Google Patents
Automatic cache activation and deactivation for power reduction Download PDFInfo
- Publication number
- US7266663B2 US7266663B2 US11/034,617 US3461705A US7266663B2 US 7266663 B2 US7266663 B2 US 7266663B2 US 3461705 A US3461705 A US 3461705A US 7266663 B2 US7266663 B2 US 7266663B2
- Authority
- US
- United States
- Prior art keywords
- cache
- refaction
- size
- action
- requests
- Prior art date
- Legal status (The legal status is an assumption and is not a legal conclusion. Google has not performed a legal analysis and makes no representation as to the accuracy of the status listed.)
- Active, expires
Links
Images
Classifications
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F1/00—Details not covered by groups G06F3/00 - G06F13/00 and G06F21/00
- G06F1/26—Power supply means, e.g. regulation thereof
- G06F1/32—Means for saving power
- G06F1/3203—Power management, i.e. event-based initiation of a power-saving mode
-
- Y—GENERAL TAGGING OF NEW TECHNOLOGICAL DEVELOPMENTS; GENERAL TAGGING OF CROSS-SECTIONAL TECHNOLOGIES SPANNING OVER SEVERAL SECTIONS OF THE IPC; TECHNICAL SUBJECTS COVERED BY FORMER USPC CROSS-REFERENCE ART COLLECTIONS [XRACs] AND DIGESTS
- Y02—TECHNOLOGIES OR APPLICATIONS FOR MITIGATION OR ADAPTATION AGAINST CLIMATE CHANGE
- Y02D—CLIMATE CHANGE MITIGATION TECHNOLOGIES IN INFORMATION AND COMMUNICATION TECHNOLOGIES [ICT], I.E. INFORMATION AND COMMUNICATION TECHNOLOGIES AIMING AT THE REDUCTION OF THEIR OWN ENERGY USE
- Y02D10/00—Energy efficient computing, e.g. low power processors, power management or thermal management
Definitions
- This invention relates to a performance-based system for monitoring and regulating computer chip power consumption based upon cache size and performance evaluation.
- a major motivation driving continuing improvement in computer technology is the consumer demand for more speed and power.
- One of the major obstacles for increasing the speed of a computer is the speed at which data can be accessed from memory. Accordingly, there is a strong emphasis on improving memory access times.
- the use of cache memory has helped to overcome this obstacle by providing a small amount of very fast memory that is used to store a copy of frequently accessed information.
- This cache memory is used along with the much larger but slower main memory.
- the cache resources of a chip may be partly or completely put on standby (partially or completely powered down) as programs run.
- the choice can be dynamic and revised as programs run (dynamically and automatically).
- a simple optimizing policy for cache size is defined as follows. All measurements are taken over a fixed interval Dt (which could be a time interval, cycle count or item count).
- the miss rate M is the number of workload events over Dt in which an item sought in the cache is not located and so had to be found in main memory. Depending upon cache storage policy, an item not found in the cache might or might not be added to the cache.
- the cache size C is fixed over each Dt but can be adjusted every Dt. If the miss rate M is below a threshold, then the cache size C is decreased. Otherwise, the cache size C is increased.
- the workload may include in principle only one-time items (items seen once and then for all practical purposes never again).
- caching has no performance benefit. Following this cache sizing policy with such a workload will result in no performance benefit but instead will cause eventual selection of maximum possible cache size with highest possible power consumption.
- DRI Dynamically Resizable i-Cache
- the DRI method compares M to a target miss rate value.
- the size of the cache C is 2 ⁇ N (2 raised to the power N) instructions. If the observed miss rate M is too high, then N is increased. If M is too low, then N is decreased.
- the simplest policy for cache consistency is that the cache is flushed every time N is changed, but more sophisticated approaches are described by Yang et al. There are many details that would be implementation-dependent, such as defining threshold miss rate values as well as a time interval over which to take the observed miss rate measurement. In fact, the DRI method apparently must find by trial and error an optimal cache miss rate threshold for any given benchmark. Then, as the benchmark is run, the memory changes are made in an effort to stay near the target miss rate.
- AMC Adaptive Mode Control
- AMC compares the number of all misses with a “performance factor” multiplied by the number of ideal misses.
- a feedback mechanism increases the delay time of a line if the number of misses is >150% of a “performance factor” (>1) multiplied by the number of ideal misses. It decreases the delay time if the number of misses is ⁇ 50% of this same factor.
- the performance factor is set at a configuration according to the desired balance between performance degradation and static power savings. Complexity of implementation is again an issue.
- DRI is the simplest method of the three methods described above, but it can power up the entire cache resource when actually the ideal answer is to turn the cache completely off (the extreme case of all one-time traffic with a positive target miss rate).
- a hash function is applied to its label.
- the hash function may be simple (selection of some label bits) or complex (a mathematical function applied to some or all label bits).
- the value of the hash function is an index into the active cache memory.
- the index derived from an item may point to a memory location with zero, exactly one, or more than one stored (cached) memory. If the memory location has zero memories, then there is a miss and the lookup must be performed in main memory.
- the item might or might not be entered into the cache, depending upon cache policy. If there is exactly one stored memory, then the cache points to the one stored memory.
- the full label of the item is then compared to a stored value. If there is a match, then the action stored with the memory is applied.
- the cache memory might or might not be updated to store the missed item, depending upon cache policy. If there are two or more memories with the hit cache index, then the fill label of the item may be used in a Patricia tree (see D. Knuth, The Art of Computer Programming , Addison-Wesley, Reading Mass., 2nd ed, 1998, Vol. 3, p 498). The Patricia tree tests label bits until, at most, one stored memory might fit the item. The full item label is then compared with the stored memory. If there is a match, then the stored action is applied. If there is not a match, then the item must be sought in main memory. The cache might or might not be updated to include the item, depending upon cache policy.
- the prior art typically includes lookup by means of Direct Table and Patricia Tree searches.
- the key is hashed to N bits (perhaps by just using the first N bits of the full key or by a nontrivial hash function).
- Each N-bit value is an index into a Direct Table (DT).
- DT Direct Table
- the number S of slots is thus 2 ⁇ N.
- Each occupied slot in the DT contains no memories, exactly one memory, or points to a Patricia tree in which two or more memories are stored as leaves.
- the full key must be compared to a stored copy of the full key. If there is a match, then the slot points to the data needed for the item. If there is not a match, then a miss is declared and a leaf is added to the Patricia tree by well-known methods of prior art.
- a cache is a set of items that are stored in a memory that typically is much smaller and faster than main memory.
- a key can be first or simultaneously sought in cache memory. Full comparison with key values is needed for a match, but an intermediate step might be a hash function. Numerous cache policies are possible for selecting which items to store in the cache.
- FIGS. 1 and 2 The typical behavior of prior art cache sizing is shown on the charts represented by FIGS. 1 and 2 .
- this can be the above Automatic Cache Sizing algorithm with the variable skew locked at 0 (so never detecting skewness).
- the number of Frequent Flyers is constantly 512 (2 ⁇ 9) and their Proportion in all traffic is constantly 0.5.
- the value of Workload is initially 256 (2 ⁇ 8) per Dt (for 100 time steps), then 8192 or 2 ⁇ 13 (for 200 time steps), then 1024 or 2 ⁇ 10 (for 300 time steps), then 16384 or 2 ⁇ 14 (for 100 time steps), then 1024 (for 300 time steps).
- Cache use for this sequence is as follows: Initially, the cache is not needed, then even the full cache cannot quite keep M below 4000 (even with full cache M is about 4096) then it is not needed, then it is needed again but cannot keep M below 4000 (even with full cache M is about 8193).
- DecProb is 1/32.
- FIGS. 1 and 2 are representative of prior art in the sense that M>M max triggers cache size increase, whether or not that is actually beneficial. In fact, in FIG. 1 , the use of the full cache wastes power and does not confer any performance benefit.
- the same system with skew enabled is modeled in FIG. 2 .
- An object of the present invention is to overcome the shortcomings of the prior art approaches to cache power utilization without reference to any specific cache policy.
- the present invention can be more easily understood by reference to four extreme cases.
- the items that recur over a certain large number of Dt intervals are called Frequent Flyers.
- the ratio of Frequent Flyers to all traffic items in such a sample can be called the Proportion. Both values can be high or low, thereby leading to the four extremes:
- the present invention provides a simple, automatic method that correctly responds to all traffic.
- the invention is not based on theoretical miss rates, but instead on reconfiguring of cache size dependent on a periodically computed sum of hit slots in a hash table.
- the present invention invokes the following policy:
- the minimum possible cache size is C min .
- the maximum size is C max .
- C min ⁇ C max The cache size C is the log base 2 of the memory size of the cache. Hence, adding 1 to C results in a doubling of the number of memory locations in the cache.
- miss rate M is below a threshold, then the cache size C is decreased.
- the present invention consists of a new approach to Automatic Cache Sizing that has advantages over the above prior art.
- Embodiments of the invention apply to either instruction caching or to data caching.
- Cache size C is the log base 2 of the memory size of the cache. Hence, adding 1 to C results in the doubling of the number of memory locations in the cache.
- the prior art taught the strategy of increasing the cache size if the rate M of references to main memory is high. However, in such circumstance, there can also be few Frequent Flyers. If so, then the benefit of increasing cache size can be small or zero, yet there is a cost, namely, increased power consumption.
- the present invention considers not only the miss rate but also the observed effect and value of increasing cache size when the miss rate is high. This value is deduced by observing a skew or nonskew distribution of hits on all cache slots. That is, the number of Frequent Flyers and their Proportion cannot be readily and directly found. Rather, indirect information (skewness) can be used.
- a computer system comprises a processor, a memory, and storage including cache storage.
- the system which utilizes a method of conserving computer chip power consumption in the system comprises dynamically adjusting the size (C) of cache storage depending on both the frequency of missed requests (M) and the ratio of frequently accessed data records to all requests for access to said cache during an incremental unit (Dt).
- the incremental unit Dt can be a unit of time, cycles, instructions or other appropriate criterion.
- the cache size is updated for each unit of Dt.
- the method includes the step of selecting a value against which the frequency of missed requests M per Dt is compared, and the further step of predetermining an acceptable ratio of frequently accessed data records in a cache to all requests for access to said cache. This ratio typically is based on experience with benchmarks.
- the cache size is adjusted if necessary during each incremental value that is used for determining the ratio of frequently accessed data records to total data requests.
- the invention also relates to a computer usable medium, such as a floppy disc having a computer readable program embodied in said medium.
- the program when executed on a computer, causes the computer to perform the following steps:
- the invention also relates to a sizing algorithm for determining optimum cache size (C) of each incremental unit (Dt).
- the size depends on the frequency of missed access requests (M(t)) and the ratio of frequently accessed data records to all access requests during said incremental unit. Cache size is increased only if the algorithm determines that an increase will result in an increase in performance. Otherwise, the cache size will remain unchanged or will be reduced.
- the incremental unit (Dt) typically is a time interval, but can also be a cycle count or item count or other criterion.
- the size of the cache is determined during each unit of time by using a suitable algorithm, such as probability theory to calculate skew distribution (S) of requests to all memory locations in a cache, and comparing skew to a given skew threshold value.
- a reduction in cache size is indicated if the number of memory locations accessed during Dt is less than the product of the skew threshold times the total number of items sought, and an increase in cache size is indicated if the number of accessed memory locations is greater than the product of these two parameters.
- FIGS. 1 and 2 are representative graphs showing the prior art approach to management of cache power consumption
- FIGS. 3 and 4 are graphs showing the power conservation according to the present invention.
- FIGS. 5 and 6 are two more graphs of the prior art showing power conservation for large cache requirements
- FIGS. 7 and 8 are comparative graphs of the present invention for large cache requirements
- FIG. 9 is a process flow diagram of the present invention.
- FIGS. 10 a - 10 d are partial flow diagrams showing various subsets of the present invention.
- FIG. 11 shows a floppy disc, indicative of a computer-readable medium for carrying out the steps of the present invention.
- W(t) is the workload, representing the number of arriving references to memory over a given incremental value [t ⁇ Dt, t]. This incremental value is generally a time period but can also be a number of cycles or instructions;
- M(t) are the number of references missed in the cache over this given interval
- S represents a slot
- H(t) is the number of hit slots in the cache over the same interval
- Skew(t) is a variable representing the hit rates of index values representing the ratio of frequently hit values to values that are hit infrequently or not at all;
- C(t) is cache size at a given interval
- Action(t) is a variable that will be used to incorporate the result of tests into a tentative action taken by the system.
- Dt An increment value for triggering measurement of variables is fixed and is denoted Dt.
- Dt can be in units of time, cycles, or instructions. Measurement times are t,t+Dt,t+2*Dt, and so on.
- Cache size C is updated every Dt interval.
- the value C(t) is that held over the interval [t ⁇ Dt, t)
- the value C(t+Dt) is that held over the interval [t, t+Dt)
- C(t+Dt) is computed instantaneously at times t.
- Miss rate M(t) is the rate per Dt of references to main memory caused by cache misses. M(t) is deduced from data collected over the interval [t ⁇ Dt, t).
- Performance Threshold M max is a target performance limit value for M.
- Frequent Flyers are memory records that are accessed frequently.
- S is the number of slots in a cache. Each slot contains an index value to a specific record in cache memory.
- the present invention includes a one bit “hit indicator” for each slot.
- the number of 1 hit indicators is summed or estimated.
- the cache size is too big, regardless of the miss rate. In the extreme case that the Proportion is zero, then caching is of no benefit whatsoever. It follows then that if the periodic sum is very small or zero (regardless of miss rate), then the cache size should be decreased. The key is to detect a skewed distribution of hits.
- the remaining 512,000 one-time items would go to about 412,000 (distinct) random slots (the number of occupied slots after randomly sending 512K items into about 1M slots from Probability Theory), so the total count of hit slots would be about 413,000.
- the expected total number of hit slots from 1 Mn items would be about 663,000 hit slots (based on Probability Theory). Since 413 ⁇ 663, such a low count (413,000) might be used to trigger reduction of the cache size C from an initial value of 1 M, regardless of the miss rate.
- An Automatic Sizing Algorithm can be used to increase cache size if needed and is effective, or to decrease cache size.
- the Automatic Sizing Algorithm can be described as follows.
- the inputs of the Automatic Sizing Algorithm are the values Skew(t), C(t), M(t), ⁇ M(t), and ⁇ C(t).
- the outputs of the Automatic Sizing Algorithm are intermediate variables called Action(t) and Refaction(t) (from “refined action”), as well as the new value for C, namely, C(t+Dt).
- the intermediate variables Action(t) and Refaction(t) are computed instantaneously at times t.
- An Automatic Cache Sizing Algorithm is triggered by a timer interrupt every increment Dt. For times ⁇ 2*Dt and ⁇ Dt (the first two times), all the variables C, M, Skew, ⁇ M, ⁇ C, Action, and Refaction are defined to be zero. For times 0*Dt, 1*Dt, 2*Dt, 3*Dt, and so on, the variables are updated as follows.
- M(t) is determined as the sum of Miss references over [t ⁇ Dt, t). Skew(t) is determined at time (t) by a sum of cache hit indicators over [t ⁇ Dt, t) or by the alternative method described above.
- C( t+Dt ) min ⁇ max( C ( t )+Refaction( t ), C min ⁇ , C max ⁇ .
- the target maximum miss rate value M max is sometimes exceeded. This is shown in FIGS. 1 and 3 .
- the present invention determines that a cache of half the size (2 ⁇ 19 versus 2 ⁇ 20) achieves almost the same performance and so is a better choice.
- the present invention also reduces cache size twice as fast once the surge of heavy workload is over.
- the present invention determines that a cache of half the size (2 ⁇ 19 versus 2 ⁇ 20) achieves almost the same performance and so is a better choice.
- the present invention also reduces cache size twice as fast once the surge of heavy workload is over.
- the present invention determines that a minimum cache size is optimal. During high workloads, the present invention only increases cache size if the benefit to performance is actually significant. On the other hand, if the workload is very heavy, if the number of Frequent Flyers is high, and if the Proportion of Frequent Flyers is high (so a very large cache is optimal), then the present invention correctly determines that a very large cache is necessary and actually beneficial.
- FIG. 11 shows a computer-readable medium in the form of a floppy disc 110 for containing the software implementation of the program to carry out the various steps of cache management according to the present invention.
- Other machine readable storage mediums are fixed hard drives, optical discs, magnetic tapes, semiconductor memories, such as read-only memories (ROMs), programmable read-only memories (PROMs), etc.
- the article containing this computer readable code is utilized by executing the code directly from the storage device, or by copying the code from one storage device to another storage device, or by transmitting the code on a network for remote execution.
- the computer program may be loaded into the memory to configure and to run the program herein described and claimed for execution.
- the computer program comprises instructions which, when read and executed by the system, perform the steps necessary to execute the steps or elements of the present invention.
- the present invention can be realized in hardware, software, or a combination of the two. Any kind of computer system or other apparatus adapted for carrying out the methods described herein is suited. A typical combination of hardware and software could be a general purpose computer system that, when loaded and executed, controls the computer system such that it carries out the methods described herein.
- the present invention can also be embedded in a computer program product, which comprises all the features enabling the implementation of the methods described herein, and which, when loaded in a computer system, is able to carry out these methods.
- Computer program instructions or a computer program in the present context mean any expression, in any language, code (i.e., picocode instructions) or notation, of a set of instructions intended to cause a system having an information processing capability to perform a particular function either directly or after either or both of the following occur: (a) conversion to another language, code or notation; (b) reproduction in a different material form.
Abstract
Description
Sk=S*C X,k*(1/S)^k*(1−1/S)^(X−k)=C X,k*(1/S)^(k−1)*(1−1/S)^(X−k)
Here, CX,k=factorial(X)/(factorial(X−k)*factorial(k)).
Lookup Mechanisms
Skew=one (1)if FF+(1−Prop)*W<0.5*C. Otherwise, skew=0
t,t+Dt,t+2*Dt,
and so on.
0<=C min <=C(t)<=C max. Also C min <C max.
Sum=S1+S2+S3+
S1=377 S2=188 S3=63 S4=16 S5=3 S6=1 S7<1
Thus, Sum is approximately 648. So with a random hash of 1 K items into 1 K slots, the expected value of the Sum of hit indices would be 648.
Skew(t)=Zero if Workload(t)=0;
Otherwise, it equals 1 if (Sum hit slots)/C(t)<=SkewThresh. Otherwise, it is 0.
ΔM(t)=M(t)−M(t−Dt)
ΔC(t)=C(t)−C(t−Dt)
Action(t)=One (1) if M(t)>M max; or if ΔM(t)>0 and ΔC(t)<=0, or if ΔM(t)<=0 and ΔC(t)>0; otherwise, it equals minus one (−1).
Refaction(t+Dt)=Zero (0) if Refaction(t−Dt)!=0; (note ‘!’means “not equal ”)
Refaction(t+Dt)=One (1) if Action(t)=1 and Skew(t)=0;
Refaction(t+Dt)=Minus one (−1) if RAND<=DecProb, Otherwise,
Refaction(t+Dt)=zero (0). C(t+Dt)=min{max(C(t)+Refaction(t), C min}, Cmax}.
TABLE I | ||||||
Skew | ||||||
Thresh | Workload | Proportion | Mmax | Cache Size | M | Notes |
1 | 8192 | .5 | 4000 | 2{circumflex over ( )}8 | 5600 | Fixed, minimum cache size of |
2{circumflex over ( )}8, regardless of M versus Mmax | ||||||
.5 | 8192 | .5 | 4000 | 2{circumflex over ( )}13 | 4159 | Recommended response to Cache |
Hit Skewness | ||||||
.05 | 8192 | .5 | 4000 | 2{circumflex over ( )}14 | 4128 | Low response to |
Skewness | ||||||
0 | 8192 | .5 | 4000 | 2{circumflex over ( )}20 | 4096 | Prior Art, no response to Cache |
Hit Skewness | ||||||
Claims (16)
Priority Applications (1)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US11/034,617 US7266663B2 (en) | 2005-01-13 | 2005-01-13 | Automatic cache activation and deactivation for power reduction |
Applications Claiming Priority (1)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US11/034,617 US7266663B2 (en) | 2005-01-13 | 2005-01-13 | Automatic cache activation and deactivation for power reduction |
Publications (2)
Publication Number | Publication Date |
---|---|
US20060156048A1 US20060156048A1 (en) | 2006-07-13 |
US7266663B2 true US7266663B2 (en) | 2007-09-04 |
Family
ID=36654668
Family Applications (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
US11/034,617 Active 2025-09-10 US7266663B2 (en) | 2005-01-13 | 2005-01-13 | Automatic cache activation and deactivation for power reduction |
Country Status (1)
Country | Link |
---|---|
US (1) | US7266663B2 (en) |
Cited By (2)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
USRE41958E1 (en) * | 2000-11-09 | 2010-11-23 | Sandhya Dwarkadas | Memory hierarchy reconfiguration for energy and performance in general-purpose processor architectures |
US20110252215A1 (en) * | 2010-04-09 | 2011-10-13 | International Business Machines Corporation | Computer memory with dynamic cell density |
Families Citing this family (8)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US9274807B2 (en) | 2006-04-20 | 2016-03-01 | Qualcomm Incorporated | Selective hibernation of activities in an electronic device |
US8055847B2 (en) * | 2008-07-07 | 2011-11-08 | International Business Machines Corporation | Efficient processing of data requests with the aid of a region cache |
US8631198B2 (en) * | 2010-08-06 | 2014-01-14 | Seagate Technology Llc | Dynamic cache reduction utilizing voltage warning mechanism |
US9615126B2 (en) * | 2011-06-24 | 2017-04-04 | Google Technology Holdings LLC | Intelligent buffering of media streams delivered over internet |
US8984311B2 (en) * | 2011-12-30 | 2015-03-17 | Intel Corporation | Method, apparatus, and system for energy efficiency and energy conservation including dynamic C0-state cache resizing |
US20130238851A1 (en) * | 2012-03-07 | 2013-09-12 | Netapp, Inc. | Hybrid storage aggregate block tracking |
WO2017031637A1 (en) * | 2015-08-21 | 2017-03-02 | 华为技术有限公司 | Memory access method, apparatus and system |
US10073787B2 (en) | 2016-04-18 | 2018-09-11 | Via Alliance Semiconductor Co., Ltd. | Dynamic powering of cache memory by ways within multiple set groups based on utilization trends |
Citations (6)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US5668987A (en) | 1995-08-31 | 1997-09-16 | Sybase, Inc. | Database system with subquery optimizer |
US5802600A (en) | 1996-11-12 | 1998-09-01 | International Business Machines Corporation | Method and apparatus for determining a desirable directory/data block ratio in a cache memory |
US5963975A (en) | 1994-04-19 | 1999-10-05 | Lsi Logic Corporation | Single chip integrated circuit distributed shared memory (DSM) and communications nodes |
US20020065992A1 (en) | 2000-08-21 | 2002-05-30 | Gerard Chauvel | Software controlled cache configuration based on average miss rate |
US6493810B1 (en) * | 2000-04-28 | 2002-12-10 | Microsoft Corporation | Method and system for allocating cache memory for a network database service |
US6604174B1 (en) | 2000-11-10 | 2003-08-05 | International Business Machines Corporation | Performance based system and method for dynamic allocation of a unified multiport cache |
-
2005
- 2005-01-13 US US11/034,617 patent/US7266663B2/en active Active
Patent Citations (6)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US5963975A (en) | 1994-04-19 | 1999-10-05 | Lsi Logic Corporation | Single chip integrated circuit distributed shared memory (DSM) and communications nodes |
US5668987A (en) | 1995-08-31 | 1997-09-16 | Sybase, Inc. | Database system with subquery optimizer |
US5802600A (en) | 1996-11-12 | 1998-09-01 | International Business Machines Corporation | Method and apparatus for determining a desirable directory/data block ratio in a cache memory |
US6493810B1 (en) * | 2000-04-28 | 2002-12-10 | Microsoft Corporation | Method and system for allocating cache memory for a network database service |
US20020065992A1 (en) | 2000-08-21 | 2002-05-30 | Gerard Chauvel | Software controlled cache configuration based on average miss rate |
US6604174B1 (en) | 2000-11-10 | 2003-08-05 | International Business Machines Corporation | Performance based system and method for dynamic allocation of a unified multiport cache |
Non-Patent Citations (2)
Title |
---|
An Integrated Circuit/Architecture Approach to Reducing Leakage in Deep-Submicron High-Performance I-Caches, Se-Hyun Yang et al, Proceedings of the Seventh International Symposium on High-Performance Computer Architecture (HPCA), 2001, 11 pp. |
Se-Hyeung Yang, Michael D. Powell, Babak Falsafi, Kaushik Roy, and T.N. Vijaykumar "An Integrated Circuit/Architecture Approach to Reducing Leakage in Deep-Submicron High-Performance I-Caches" Proceedings on the Seventh International Symposium on High-Performance Computer Architecture, 2001, 11pp. * |
Cited By (3)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
USRE41958E1 (en) * | 2000-11-09 | 2010-11-23 | Sandhya Dwarkadas | Memory hierarchy reconfiguration for energy and performance in general-purpose processor architectures |
USRE42213E1 (en) | 2000-11-09 | 2011-03-08 | University Of Rochester | Dynamic reconfigurable memory hierarchy |
US20110252215A1 (en) * | 2010-04-09 | 2011-10-13 | International Business Machines Corporation | Computer memory with dynamic cell density |
Also Published As
Publication number | Publication date |
---|---|
US20060156048A1 (en) | 2006-07-13 |
Similar Documents
Publication | Publication Date | Title |
---|---|---|
US7266663B2 (en) | Automatic cache activation and deactivation for power reduction | |
US7437513B2 (en) | Cache memory with the number of operated ways being changed according to access pattern | |
EP3769226B1 (en) | Prefetcher based speculative dynamic random-access memory read request technique | |
US8402226B1 (en) | Rate proportional cache write-back in a storage server | |
US5675797A (en) | Goal-oriented resource allocation manager and performance index technique for servers | |
US7594128B2 (en) | Systems and methods to determine processor utilization | |
US8447948B1 (en) | Dynamic selective cache compression | |
US8166269B2 (en) | Adaptive triggering of garbage collection | |
CN106909515B (en) | Multi-core shared last-level cache management method and device for mixed main memory | |
US6557080B1 (en) | Cache with dynamic control of sub-block fetching | |
US6981112B2 (en) | Dynamic cache disable | |
US20060041769A1 (en) | Method and apparatus for reducing leakage power in a cache memory using adaptive time-based decay | |
EP3230874B1 (en) | Fully associative cache memory budgeted by memory access type | |
US7181588B2 (en) | Computer apparatus and method for autonomic adjustment of block transfer size | |
US20090319255A1 (en) | Maximizing throughput for a garbage collector | |
US10359831B2 (en) | Cache power management | |
EP1259870A1 (en) | Microprocessor with digital power throttle | |
US20130111175A1 (en) | Methods and apparatus to control generation of memory access requests | |
US7346602B2 (en) | Avoiding creation of database statistics | |
Ryu et al. | Resource policing to support fine-grain cycle stealing in networks of workstations | |
Xiang et al. | Less reused filter: improving l2 cache performance via filtering less reused lines | |
Kim et al. | HAD-TWL: Hot address detection-based wear leveling for phase-change memory systems with low latency | |
CN112131005B (en) | Resource adjustment strategy determination method and device | |
US7412693B2 (en) | Method and apparatus for determining frequency of execution for compiled methods within a virtual machine | |
US20050050291A1 (en) | Structure and method for efficient management of memory resources |
Legal Events
Date | Code | Title | Description |
---|---|---|---|
AS | Assignment |
Owner name: INTERNATIONAL BUSINESS MACHINES CORPORATION, NEW YFree format text: ASSIGNMENT OF ASSIGNORS INTEREST;ASSIGNORS:HINES, JEFFERY S.;JEFFRIES, CLARK D.;TONG, MINH H.;REEL/FRAME:015995/0054;SIGNING DATES FROM 20050111 TO 20050112 |
|
FEPP | Fee payment procedure |
Free format text: PAYOR NUMBER ASSIGNED (ORIGINAL EVENT CODE: ASPN); ENTITY STATUS OF PATENT OWNER: LARGE ENTITY |
|
STCF | Information on status: patent grant |
Free format text: PATENTED CASE |
|
REMI | Maintenance fee reminder mailed | ||
FPAY | Fee payment |
Year of fee payment: 4 |
|
SULP | Surcharge for late payment | ||
AS | Assignment |
Owner name: GOOGLE INC., CALIFORNIAFree format text: ASSIGNMENT OF ASSIGNORS INTEREST;ASSIGNOR:INTERNATIONAL BUSINESS MACHINES CORPORATION;REEL/FRAME:026664/0866Effective date: 20110503 |
|
FPAY | Fee payment |
Year of fee payment: 8 |
|
AS | Assignment |
Owner name: GOOGLE LLC, CALIFORNIAFree format text: CHANGE OF NAME;ASSIGNOR:GOOGLE INC.;REEL/FRAME:044127/0735Effective date: 20170929 |
|
MAFP | Maintenance fee payment |
Free format text: PAYMENT OF MAINTENANCE FEE, 12TH YEAR, LARGE ENTITY (ORIGINAL EVENT CODE: M1553); ENTITY STATUS OF PATENT OWNER: LARGE ENTITYYear of fee payment: 12 |