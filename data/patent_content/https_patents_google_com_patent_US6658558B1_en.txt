US6658558B1 - Branch prediction circuit selector with instruction context related condition type determining - Google Patents
Branch prediction circuit selector with instruction context related condition type determining Download PDFInfo
- Publication number
- US6658558B1 US6658558B1 US09/538,991 US53899100A US6658558B1 US 6658558 B1 US6658558 B1 US 6658558B1 US 53899100 A US53899100 A US 53899100A US 6658558 B1 US6658558 B1 US 6658558B1
- Authority
- US
- United States
- Prior art keywords
- branch
- branch prediction
- instruction
- condition
- conditional
- Prior art date
- Legal status (The legal status is an assumption and is not a legal conclusion. Google has not performed a legal analysis and makes no representation as to the accuracy of the status listed.)
- Expired - Lifetime
Links
- 238000000034 method Methods 0.000 claims abstract description 15
- 230000015654 memory Effects 0.000 claims description 7
- 230000008569 process Effects 0.000 abstract description 2
- 230000001419 dependent effect Effects 0.000 description 19
- 239000000872 buffer Substances 0.000 description 4
- 238000010586 diagram Methods 0.000 description 3
- 230000004044 response Effects 0.000 description 3
- 230000003068 static effect Effects 0.000 description 3
- 238000013459 approach Methods 0.000 description 2
- 230000008859 change Effects 0.000 description 2
- 239000004744 fabric Substances 0.000 description 2
- 238000012163 sequencing technique Methods 0.000 description 2
- 230000001360 synchronised effect Effects 0.000 description 2
- 238000012240 conditional targeting Methods 0.000 description 1
- 230000003111 delayed effect Effects 0.000 description 1
Images
Classifications
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F9/00—Arrangements for program control, e.g. control units
- G06F9/06—Arrangements for program control, e.g. control units using stored programs, i.e. using an internal store of processing equipment to receive or retain programs
- G06F9/30—Arrangements for executing machine instructions, e.g. instruction decode
- G06F9/38—Concurrent instruction execution, e.g. pipeline, look ahead
- G06F9/3861—Recovery, e.g. branch miss-prediction, exception handling
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F9/00—Arrangements for program control, e.g. control units
- G06F9/06—Arrangements for program control, e.g. control units using stored programs, i.e. using an internal store of processing equipment to receive or retain programs
- G06F9/30—Arrangements for executing machine instructions, e.g. instruction decode
- G06F9/30094—Condition code generation, e.g. Carry, Zero flag
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F9/00—Arrangements for program control, e.g. control units
- G06F9/06—Arrangements for program control, e.g. control units using stored programs, i.e. using an internal store of processing equipment to receive or retain programs
- G06F9/30—Arrangements for executing machine instructions, e.g. instruction decode
- G06F9/30098—Register arrangements
- G06F9/30101—Special purpose registers
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F9/00—Arrangements for program control, e.g. control units
- G06F9/06—Arrangements for program control, e.g. control units using stored programs, i.e. using an internal store of processing equipment to receive or retain programs
- G06F9/30—Arrangements for executing machine instructions, e.g. instruction decode
- G06F9/38—Concurrent instruction execution, e.g. pipeline, look ahead
- G06F9/3802—Instruction prefetching
- G06F9/3804—Instruction prefetching for branches, e.g. hedging, branch folding
- G06F9/3806—Instruction prefetching for branches, e.g. hedging, branch folding using address prediction, e.g. return stack, branch history buffer
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F9/00—Arrangements for program control, e.g. control units
- G06F9/06—Arrangements for program control, e.g. control units using stored programs, i.e. using an internal store of processing equipment to receive or retain programs
- G06F9/30—Arrangements for executing machine instructions, e.g. instruction decode
- G06F9/38—Concurrent instruction execution, e.g. pipeline, look ahead
- G06F9/3836—Instruction issuing, e.g. dynamic instruction scheduling or out of order instruction execution
- G06F9/3842—Speculative instruction execution
- G06F9/3846—Speculative instruction execution using static prediction, e.g. branch taken strategy
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F9/00—Arrangements for program control, e.g. control units
- G06F9/06—Arrangements for program control, e.g. control units using stored programs, i.e. using an internal store of processing equipment to receive or retain programs
- G06F9/30—Arrangements for executing machine instructions, e.g. instruction decode
- G06F9/38—Concurrent instruction execution, e.g. pipeline, look ahead
- G06F9/3836—Instruction issuing, e.g. dynamic instruction scheduling or out of order instruction execution
- G06F9/3842—Speculative instruction execution
- G06F9/3848—Speculative instruction execution using hybrid branch prediction, e.g. selection between prediction techniques
Definitions
- the present invention relates in general to data processing and, in particular, to branch prediction within a data processing system. Still more particularly, the present invention relates to a processor and method of branch prediction that select one of a plurality of branch predictions in accordance with the type of underlying condition upon which a branch depends.
- a state-of-the-art superscalar processor can comprise, for example, an instruction cache for storing instructions, one or more execution units for executing sequential instructions, a branch unit for executing branch instructions, instruction sequencing logic for routing instructions to the various execution units, and registers for storing operands and result data.
- Branch instructions executed by the branch unit of the superscalar processor can be classified as either conditional or unconditional branch instructions.
- Unconditional branch instructions are branch instructions that change the flow of program execution from a sequential execution path to a specified target execution path and which do not depend upon a condition supplied by the occurrence of an event. Thus, the branch in program flow specified by an unconditional branch instruction is always taken.
- conditional branch instructions are branch instructions for which the indicated branch in program flow may be taken or may not taken depending upon a condition within the processor, for example, the state of a specified condition register bit or the value of a counter.
- Conditional branch instructions can be further classified as either resolved or unresolved, based upon whether or not the condition upon which the branch depends is available when the conditional branch instruction is evaluated by the branch unit. Because the condition upon which a resolved conditional branch instruction depends is known prior to execution, resolved conditional branch instructions can typically be executed and instructions within the target execution path fetched with little or no delay in the execution of sequential instructions. Unresolved conditional branches, on the other hand, can create significant performance penalties if fetching of sequential instructions is delayed until the condition upon which the branch depends becomes available and the branch is resolved.
- some processors speculatively execute unresolved branch instructions by predicting whether or not the indicated branch will be taken. Utilizing the result of the prediction, the instruction sequencing logic is then able to speculatively fetch instructions within a target execution path prior to the resolution of the branch, thereby avoiding a stall in the execution pipeline in cases in which the branch is subsequently resolved as correctly predicted.
- prediction of unresolved conditional branch instructions has been accomplished utilizing static branch prediction, which predicts resolutions of branch instructions based upon criteria determined by a compiler prior to program execution, or dynamic branch prediction, which predicts resolutions of branch instructions by reference to branch history accumulated on a per-address basis within a branch history table.
- a processor having improved branch prediction accuracy includes at least one execution unit that executes sequential instructions and branch processing circuitry that processes branch instructions.
- the branch processing circuitry includes a number of branch prediction circuits that are each capable of providing a branch prediction for a conditional branch instruction, a selector that selects a branch prediction of a branch prediction circuit based upon the type of condition upon which the conditional branch instruction depends, and branch resolution circuitry that corrects for branch misprediction multiple pipeline stages later.
- the branch processing circuitry further includes path address logic that determines a path address of the selected branch prediction.
- FIG. 1 depicts an illustrative embodiment of a data processing system with which the present invention may advantageously be utilized
- FIG. 2 is a more detailed block diagram of the branch prediction unit (BPU) of FIG. 1;
- FIG. 3 illustrates an exemplary embodiment of a conditional branch instruction including a prediction field in accordance with the present invention.
- processor 10 comprises a single integrated circuit superscalar processor, which, as discussed 10 further below, includes various execution units, registers, buffers, memories, and other functional units that are all formed by integrated circuitry.
- processor 10 may be coupled to other devices, such as a system memory 12 and a second processor 10 , by an interconnect fabric 14 to form a larger data processing system such as computer system.
- Processor 10 has an on-chip multi-level cache hierarchy including a unified level two (L2) cache 16 and bifurcated level one (L1) instruction (I) and data (D) caches 18 and 20 , respectively.
- L2 cache 16 and bifurcated level one (L1) instruction (I) and data (D) caches 18 and 20 , respectively.
- I instruction
- caches 16 , 18 and 20 provide low latency access to cache lines corresponding to memory locations in system memory 12 .
- Instructions are fetched for processing from L1 I-cache 18 in response to the effective address (EA) residing in instruction fetch address register (IFAR) 30 .
- EA effective address
- IFAR instruction fetch address register
- a new instruction fetch address may be loaded into IFAR 30 from one of three sources: branch prediction unit (BPU) 36 , which provides speculative path addresses resulting from the prediction of conditional branch instructions, global completion table (GCT) 38 , which provides non-speculative sequential path addresses, and branch execution unit (BEU) 92 , which provides non-speculative addresses resulting from the resolution of incorrectly predicted conditional branch instructions.
- branch prediction unit BPU
- GCT global completion table
- BEU branch execution unit
- hit/miss logic 22 determines, after translation of the EA contained in IFAR 30 by effective-to-real address translation (ERAT) 32 and lookup of the real address (RA) in I-cache directory 34 , that the cache line of instructions corresponding to the EA in IFAR 30 does not reside in L1 I-cache 18 , then hit/miss logic 22 provides the RA to L2 cache 16 as a request address via I-cache request bus 24 .
- request addresses may also be generated by prefetch logic within L2 cache 16 based upon recent access patterns.
- L2 cache 16 In response to a request address, L2 cache 16 outputs a cache line of instructions, which are loaded into prefetch buffer (PB) 28 and L1 I-cache 18 via I-cache reload bus 26 , possibly after passing through optional predecode logic 144 .
- PB prefetch buffer
- L1 I-cache 18 outputs the cache line to both branch prediction unit (BPU) 36 and to instruction fetch buffer (IFB) 40 .
- BPU 36 scans the cache line of instructions for branch instructions and predicts the outcome of conditional branch instructions, if any.
- BPU 36 furnishes a speculative instruction fetch address to IFAR 30 , as discussed above, and passes the prediction to branch instruction queue 64 so that the accuracy of the prediction can be determined when the conditional branch instruction is subsequently resolved by branch execution unit 92 .
- IFB 40 temporarily buffers the cache line of instructions received from L1 I-cache 18 until the cache line of instructions can be translated by instruction translation unit (ITU) 42 .
- ITU 42 translates instructions from user instruction set architecture (UISA) instructions into a possibly different number of internal ISA (IISA) instructions that are directly executable by the execution units of processor 10 .
- UISA user instruction set architecture
- IISA internal ISA
- Such translation may be performed, for example, by reference to microcode stored in a read-only memory (ROM) template.
- ROM read-only memory
- the UISA-to-IISA translation results in a different number of IISA instructions than UISA instructions and/or IISA instructions of different lengths than corresponding UISA instructions.
- the resultant IISA instructions are then assigned by global completion table 38 to an instruction group, the members of which are permitted to be dispatched and executed out-of-order with respect to one another.
- Global completion table 38 tracks each instruction group for which execution has yet to be completed by at least one associated EA, which is preferably the EA of the oldest instruction in the instruction group.
- instructions are dispatched to one of latches 44 , 46 , 48 and 50 , possibly out-of-order, based upon instruction type. That is, branch instructions and other condition register (CR) modifying instructions are dispatched to latch 44 , fixed-point and load-store instructions are dispatched to either of latches 46 and 48 , and floating-point instructions are dispatched to latch 50 .
- CR condition register
- Each instruction requiring a rename register for temporarily storing execution results is then assigned one or more rename registers by the appropriate one of CR mapper 52 , link and count (LC) register mapper 54 , exception register (XER) mapper 56 , general-purpose register (GPR) mapper 58 , and floating-point register (FPR) mapper 60 .
- CRIQ CR issue queue
- BIQ branch issue queue
- FXIQs fixed-point issue queues
- FPIQs floating-point issue queues
- the execution units of processor 10 include a CR unit (CRU) 90 for executing CR-modifying instructions, a branch execution unit (BEU) 92 for executing branch instructions, two fixed-point units (FXUs) 94 and 100 for executing fixed-point instructions, two load-store units (LSUs) 96 and 98 for executing load and store instructions, and two floating-point units (FPUs) 102 and 104 for executing floating-point instructions.
- Each of execution units 90 - 104 is preferably implemented as an execution pipeline having a number of pipeline stages.
- an instruction receives operands, if any, from one or more architected and/or rename registers within a register file coupled to the execution unit.
- CRU 90 and BEU 92 access the CR register file 80 , which in a preferred embodiment contains a CR and a number of CR rename registers that each comprise a number of distinct fields formed of one or more bits.
- LT, GT, and EQ fields that respectively indicate if a value (typically the result or operand of an instruction) is less than zero, greater than zero, or equal to zero.
- Link and count register (LCR) register file 82 contains a count register (CTR), a link register (LR) and rename registers of each, by which BEU 92 may also resolve conditional branches to obtain a path address.
- CTR count register
- LR link register
- GPRs General-purpose register files
- FXUs 94 and 100 and LSUs 96 and 98 store fixed-point and integer values accessed and produced by FXUs 94 and 100 and LSUs 96 and 98 .
- Floating-point register file (FPR) 88 which like GPRs 84 and 86 may also be implemented as duplicate sets of synchronized registers, contains floating-point values that result from the execution of floating-point instructions by FPUs 102 and 104 and floating-point load instructions by LSUs 96 and 98 .
- GCT 38 After an execution unit finishes execution of an instruction, the execution notifies GCT 38 , which schedules completion of instructions in program order. To complete an instruction executed by one of CRU 90 , FXUs 94 and 100 or FPUs 102 and 104 , GCT 38 signals the execution unit, which writes back the result data, if any, from the assigned rename register(s) to one or more architected registers within the appropriate register file. The instruction is then removed from the issue queue, and once all instructions within its instruction group have completed, is removed from GCT 38 . Other types of instructions, however, are completed differently.
- BEU 92 When BEU 92 resolves a conditional branch instruction and determines the path address of the execution path that should be taken, the path address is compared against the speculative path address predicted by BPU 36 . If the path addresses match, no further processing is required. If, however, the calculated path address does not match the predicted path address, BEU 92 supplies the correct path address to IFAR 30 . In either event, the branch instruction can then be removed from BIQ 64 , and when all other instructions within the same instruction group have completed, from GCT 38 .
- the effective address computed by executing the load instruction is translated to a real address by a data ERAT (not illustrated) and then provided to L1 D-cache 20 as a request address.
- the load instruction is removed from FXIQ 66 or 68 and placed in load reorder queue (LRQ) 114 until the indicated load is performed. If the request address misses in L1 D-cache 20 , the request address is placed in load miss queue (LMQ) 116 , from which the requested data is retrieved from L2 cache 16 , and failing that, from another processor 10 or from system memory 12 .
- LMQ load miss queue
- LRQ 114 snoops exclusive access requests (e.g., read-with-intent-to-modify), flushes or kills on interconnect fabric 14 against loads in flight, and if a hit occurs, cancels and reissues the load instruction.
- exclusive access requests e.g., read-with-intent-to-modify
- Store instructions are similarly completed utilizing a store queue (STQ) 110 into which effective addresses for stores are loaded following execution of the store instructions. From STQ 110 , data can be stored into either or both of L1 D-cache 20 and L2 cache 16 .
- STQ store queue
- BPU 36 includes branch scan logic 120 that receives cache lines of instructions output by L1 I-cache 18 and scans the cache lines for UISA branch instructions. Branch instructions detected by branch scan logic 120 are decoded and then routed by branch scan logic 120 according to the type of branch instruction. Branch scan logic 120 can output up to two branch instructions per cycle.
- prediction of branch instructions can involve both direction prediction (e.g., taken or not taken) and address prediction.
- BPU 36 concurrently performs both direction and address prediction as follows.
- Conditional branch instructions that depend upon the state of the link register or the count register are respectively output to link stack 124 and count cache 122 for address prediction.
- the address for the predicted path (e.g., either the branch target address or the next sequential instruction address) forms an input of multiplexer 126 .
- Address prediction for other conditional branch instructions or for unconditional branch instructions i.e., branch instructions indicating a branch in program flow that is always taken
- branch scan logic 120 i.e., branch instructions indicating a branch in program flow that is always taken
- branch target addresses for these other types of branch instructions similarly form inputs of multiplexer 126 .
- multiplexer 126 selects the appropriate one-of its input addresses as a predicted path address that is latched by output latch 142 , and from there provided to the control of both BIQ 64 and IFAR 30 , as discussed above.
- Branch scan logic 120 routes conditional branch instructions to branch prediction circuits 130 - 136 for direction prediction.
- each of branch prediction circuits 130 - 136 generates a direction prediction (taken or not taken) for the conditional branch instruction and provides the direction prediction to multiplexer 138 .
- Select logic 140 selects one of the direction prediction presented at the inputs of multiplexer 138 as an output that is latched by output latch 142 , and from output latch 142 sent to the control of BIQ 64 and IFAR 30 .
- select logic 140 could be configured to select only one of branch predictions circuits 136 - 142 to perform a direction prediction for a given conditional branch instruction.
- the branch prediction circuits of BPU 36 include a global branch prediction circuit 130 that predicts the direction of a conditional branch instruction by reference to a branch pattern table accessed by a vector of bits indicating the previous N (e.g., 12) conditional branch resolutions (i.e., taken or not taken).
- the branch predictions circuits include a local branch prediction circuit 132 that accesses a branch history table (BHT) utilizing the instruction address of the conditional branch instruction to be predicted as an index into the BHT.
- BHT branch history table
- the branch prediction circuits further include a lock acquisition branch prediction circuit 134 and a condition register branch prediction circuit 136 , which are each specifically designed to predict a path direction for conditional branch instructions that depend upon a particular type of underlying condition and/or occur in a particular instruction context defined by one or more instructions adjacent to or surrounding the branch instruction.
- lock acquisition branch prediction circuit 134 is designed to provide path predictions for conditional branch instructions that often terminate lock acquisition instruction sequences
- condition register branch prediction circuit 136 is designed to provide path predictions for conditional branch instructions that depend upon the state of one or more fields within the CR.
- BPU 36 may also include additional branch prediction circuits that are designed to predict the direction of conditional branch instructions having other defined types of underlying conditions or instruction contexts.
- the type of the underlying branch condition and/or the instruction context can be determined by either or both hardware and software.
- the branch condition type and/or the instruction context can be detected either statically (i.e., before program execution) by program restructuring software (such as a compiler) or dynamically during program execution by predecode logic 144 interposed between L2 cache 16 and L1 I-cache 18 , as shown in FIG. 1, or by branch scan logic 120 .
- program restructuring software such as a compiler
- predecode logic 144 interposed between L2 cache 16 and L1 I-cache 18 , as shown in FIG. 1, or by branch scan logic 120 .
- a typical lock acquisition sequence of instructions is as follows:
- either the hardware or the software described above can identify “bc A” as a branch terminating the lock acquisition sequence by reference to one or more of the preceding instructions. If the CR bit upon which “bc A” depends is set, execution should continue at the next sequential instruction address (i.e., the add instruction); however, if the CR bit is reset, meaning that the store-conditional failed, execution should branch back to the load-reserve instruction “larx B.” Hardware or software can also readily identify other conditional branch instructions that depend upon the state of a CR bit but that are not part of a lock acquisition sequence by decoding the instruction type or by examining the operands of the conditional branch instruction.
- an indication of the underlying condition or instruction context is preferably provided to select logic 140 , for example, encoded within the branch conditional instruction.
- an exemplary conditional branch instruction 150 is depicted that, in addition to conventional opcode and operand fields 152 and 154 , includes a prediction field 156 for conveying condition type/instruction context information.
- prediction field 156 includes an S/D bit 158 that can be set (e.g., to “1”) by a compiler to indicate that conditional branch instruction 150 should be predicted according to the prediction (i.e., taken or not taken) indicated by the state of static prediction (SP) bit 160 .
- SP state of static prediction
- Prediction field 156 further includes one condition type (CT) bit 162 for each respective condition type/instruction context.
- CT condition type
- select logic 140 can determine the condition type/instruction context, if any, of conditional branch instruction 150 and, based upon that determination, can select the appropriate speculative path address to supply to IFAR 30 and BIQ 64 .
- select logic 140 will select the speculative path address output by lock acquisition branch prediction circuit 134 ; and if the CT bit 162 corresponding to a CR-dependent branch is set and S/D bit 158 is reset, select logic 140 will select the speculative path address output by CR branch prediction circuit 136 . Because instruction traces indicate that lock acquisition sequences are typically successful (i.e., the lock is successfully acquired), lock acquisition branch prediction circuit 134 is preferably heavily weighted toward producing the not-taken (i.e., sequential) path as the speculative path address.
- local and global branch prediction circuits 132 and 130 can be implemented similarly to or differently from than the remainder of branch prediction circuits 130 - 136 .
- each of local and global branch prediction circuits 130 and 132 may have a respective associated bit within prediction field 156 just like branch prediction circuits 134 and 136 .
- prediction field 156 may contain no bits corresponding to local and global branch prediction circuits 132 and 130 , and select logic 140 may select one of the direction predictions output by these branch prediction circuits only when another of the branch prediction circuits is not indicated within prediction field 156 . Such selection by selection logic 140 could then be based upon some measure of branch prediction accuracy for each of local and global branch prediction circuits 132 and 130 .
- the present invention recognizes that conventional processors implement an interlock between the generation of the CR bits upon which the branch depends (e.g., the generation of GT, LT, and EQ by a compare instruction) and the resolution of the conditional branch instruction.
- CR-dependent conditional branch instructions are typically predicted by reference to a branch history table or the like.
- the present invention recognizes that, given processor clock speeds approaching and surpassing 1 GHz, it is impractical and possibly harmful to performance for a compiler to restructure programs to separate CR-bit-producing instructions and CR-dependent conditional branch instructions because the relevant CR bit(s) are physically too far away from the branch prediction logic to arrive in time to resolve CR-dependent conditional branch instructions. For example, assuming a processor clock frequency of 1 GHz or more, the contents of a CR rename register may require as many as 10 cycles to be communicated from CRR 80 to BPU 36 .
- a preferred embodiment of CR branch prediction circuit 136 utilizes the most recently available contents of the architected CR within CRR 80 rather than the actual value of the CR bit(s) upon which a CR-dependent conditional branch instruction depends (which is/are typically within a CR rename register) to predict the direction of a CR-dependent conditional branch instruction.
- this branch prediction methodology three scenarios are possible. First, the CR-setting instruction and the CR-dependent branch instruction may be spaced far enough apart in the instruction stream to permit the actual CR bit value(s) upon which a CR-dependent conditional branch instruction depends to be received by CR branch prediction circuit 136 .
- CR branch prediction circuit 136 may predict a speculative path of a CR-dependent conditional branch instruction utilizing a previous state of the CR bit(s) upon which the branch depends, and the state of the CR bit(s) is/are not modified by any intervening “recording” instruction. In this case, the path address predicted by CR branch prediction circuit 136 is truly speculative, but BEU 92 will later resolve the CR-dependent conditional branch instruction as correctly predicted.
- a recording instruction preceding a CR-dependent conditional branch instruction in program order may change the state of a CR bit utilized by CR branch prediction circuit 136 to predict a path address.
- BEU 92 will resolve the CR-dependent conditional branch instruction as mispredicted, will supply the correct path address to IFAR 30 , and will initiate a flush of all instructions in the mispredicted path and any subsequently predicted paths.
- the present invention provides a processor having an improved branch prediction unit.
- the branch prediction unit predicts at least some conditional branch instructions based upon the type of the underlying condition upon which the branches depend or the instruction context adjacent the conditional branch instructions.
- conditional branch instructions include lock acquisition conditional branch instructions, which are typically predicted not-taken, and CR-dependent conditional branch instructions, which are predicted utilizing the most recently available version of the architected CR.
- the conditional branch instructions that will be predicted by reference to condition type or instruction context can advantageously be identified to the branch prediction unit by appropriately setting a prediction field in the conditional branch instructions utilizing hardware or software.
Abstract
Description
A | larx B | ! | load-reserve of variable |
. . . | ! | other instruction(s) | |
bc C | ! | compare-and-swap conditional branch | |
stcx B | ! | store conditional targeting reserved | |
variable | |||
bc A | ! | conditional branch dependent upon a | |
CR bit set if stcx was successful | |||
C | add | ! | next sequential instruction following |
lock acquisition sequence | |||
Claims (22)
Priority Applications (1)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US09/538,991 US6658558B1 (en) | 2000-03-30 | 2000-03-30 | Branch prediction circuit selector with instruction context related condition type determining |
Applications Claiming Priority (1)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US09/538,991 US6658558B1 (en) | 2000-03-30 | 2000-03-30 | Branch prediction circuit selector with instruction context related condition type determining |
Publications (1)
Publication Number | Publication Date |
---|---|
US6658558B1 true US6658558B1 (en) | 2003-12-02 |
Family
ID=29550313
Family Applications (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
US09/538,991 Expired - Lifetime US6658558B1 (en) | 2000-03-30 | 2000-03-30 | Branch prediction circuit selector with instruction context related condition type determining |
Country Status (1)
Country | Link |
---|---|
US (1) | US6658558B1 (en) |
Cited By (9)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20050066154A1 (en) * | 2003-09-24 | 2005-03-24 | Sung-Woo Chung | Branch prediction apparatus and method for low power consumption |
US20050223203A1 (en) * | 2004-03-30 | 2005-10-06 | Gabriel Loh | Segmented branch predictor |
WO2012098435A1 (en) * | 2011-01-21 | 2012-07-26 | Freescale Semiconductor, Inc. | Integrated circuit device and method for calculating a predicate value |
US10383718B2 (en) | 2011-02-28 | 2019-08-20 | Adient Medical, Inc. | Absorbable vascular filter |
US10531942B2 (en) | 2011-02-28 | 2020-01-14 | Adient Medical, Inc. | Absorbable vascular filter |
US10607137B2 (en) | 2017-04-05 | 2020-03-31 | International Business Machines Corporation | Branch predictor selection management |
US10740104B2 (en) | 2018-08-16 | 2020-08-11 | International Business Machines Corporation | Tagging target branch predictors with context with index modification and late stop fetch on tag mismatch |
US11231931B1 (en) * | 2018-12-20 | 2022-01-25 | Advanced Micro Devices, Inc. | Mechanism for mitigating information leak via cache side channels during speculative execution |
CN117093272A (en) * | 2023-10-07 | 2023-11-21 | 飞腾信息技术有限公司 | Instruction sending method and processor |
Citations (20)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US4435756A (en) | 1981-12-03 | 1984-03-06 | Burroughs Corporation | Branch predicting computer |
US4439828A (en) | 1981-07-27 | 1984-03-27 | International Business Machines Corp. | Instruction substitution mechanism in an instruction handling unit of a data processing system |
US5193167A (en) | 1990-06-29 | 1993-03-09 | Digital Equipment Corporation | Ensuring data integrity by locked-load and conditional-store operations in a multiprocessor system |
US5454117A (en) * | 1993-08-25 | 1995-09-26 | Nexgen, Inc. | Configurable branch prediction for a processor performing speculative execution |
US5515518A (en) | 1990-02-26 | 1996-05-07 | Nexgen, Inc. | Two-level branch prediction cache |
US5530825A (en) | 1994-04-15 | 1996-06-25 | Motorola, Inc. | Data processor with branch target address cache and method of operation |
US5553255A (en) | 1993-12-20 | 1996-09-03 | Motorola, Inc. | Data processor with programmable levels of speculative instruction fetching and method of operation |
US5687360A (en) * | 1995-04-28 | 1997-11-11 | Intel Corporation | Branch predictor using multiple prediction heuristics and a heuristic identifier in the branch instruction |
US5752014A (en) * | 1996-04-29 | 1998-05-12 | International Business Machines Corporation | Automatic selection of branch prediction methodology for subsequent branch instruction based on outcome of previous branch prediction |
US5758142A (en) * | 1994-05-31 | 1998-05-26 | Digital Equipment Corporation | Trainable apparatus for predicting instruction outcomes in pipelined processors |
US5794063A (en) | 1996-01-26 | 1998-08-11 | Advanced Micro Devices, Inc. | Instruction decoder including emulation using indirect specifiers |
US5794028A (en) | 1996-10-17 | 1998-08-11 | Advanced Micro Devices, Inc. | Shared branch prediction structure |
US5933628A (en) * | 1996-08-20 | 1999-08-03 | Idea Corporation | Method for identifying hard-to-predict branches to enhance processor performance |
US6092187A (en) * | 1997-09-19 | 2000-07-18 | Mips Technologies, Inc. | Instruction prediction based on filtering |
US6105098A (en) | 1997-08-26 | 2000-08-15 | Hitachi, Ltd. | Method for managing shared resources |
US6230261B1 (en) * | 1998-12-02 | 2001-05-08 | I. P. First, L.L.C. | Method and apparatus for predicting conditional branch instruction outcome based on branch condition test type |
US6247122B1 (en) * | 1998-12-02 | 2001-06-12 | Ip-First, L.L.C. | Method and apparatus for performing branch prediction combining static and dynamic branch predictors |
US6374349B2 (en) * | 1998-03-19 | 2002-04-16 | Mcfarling Scott | Branch predictor with serially connected predictor stages for improving branch prediction accuracy |
US6421774B1 (en) * | 1999-11-05 | 2002-07-16 | Ip First L.L.C. | Static branch predictor using opcode of instruction preceding conditional branch |
US6499101B1 (en) * | 1999-03-18 | 2002-12-24 | I.P. First L.L.C. | Static branch prediction mechanism for conditional branch instructions |
-
2000
- 2000-03-30 US US09/538,991 patent/US6658558B1/en not_active Expired - Lifetime
Patent Citations (20)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US4439828A (en) | 1981-07-27 | 1984-03-27 | International Business Machines Corp. | Instruction substitution mechanism in an instruction handling unit of a data processing system |
US4435756A (en) | 1981-12-03 | 1984-03-06 | Burroughs Corporation | Branch predicting computer |
US5515518A (en) | 1990-02-26 | 1996-05-07 | Nexgen, Inc. | Two-level branch prediction cache |
US5193167A (en) | 1990-06-29 | 1993-03-09 | Digital Equipment Corporation | Ensuring data integrity by locked-load and conditional-store operations in a multiprocessor system |
US5454117A (en) * | 1993-08-25 | 1995-09-26 | Nexgen, Inc. | Configurable branch prediction for a processor performing speculative execution |
US5553255A (en) | 1993-12-20 | 1996-09-03 | Motorola, Inc. | Data processor with programmable levels of speculative instruction fetching and method of operation |
US5530825A (en) | 1994-04-15 | 1996-06-25 | Motorola, Inc. | Data processor with branch target address cache and method of operation |
US5758142A (en) * | 1994-05-31 | 1998-05-26 | Digital Equipment Corporation | Trainable apparatus for predicting instruction outcomes in pipelined processors |
US5687360A (en) * | 1995-04-28 | 1997-11-11 | Intel Corporation | Branch predictor using multiple prediction heuristics and a heuristic identifier in the branch instruction |
US5794063A (en) | 1996-01-26 | 1998-08-11 | Advanced Micro Devices, Inc. | Instruction decoder including emulation using indirect specifiers |
US5752014A (en) * | 1996-04-29 | 1998-05-12 | International Business Machines Corporation | Automatic selection of branch prediction methodology for subsequent branch instruction based on outcome of previous branch prediction |
US5933628A (en) * | 1996-08-20 | 1999-08-03 | Idea Corporation | Method for identifying hard-to-predict branches to enhance processor performance |
US5794028A (en) | 1996-10-17 | 1998-08-11 | Advanced Micro Devices, Inc. | Shared branch prediction structure |
US6105098A (en) | 1997-08-26 | 2000-08-15 | Hitachi, Ltd. | Method for managing shared resources |
US6092187A (en) * | 1997-09-19 | 2000-07-18 | Mips Technologies, Inc. | Instruction prediction based on filtering |
US6374349B2 (en) * | 1998-03-19 | 2002-04-16 | Mcfarling Scott | Branch predictor with serially connected predictor stages for improving branch prediction accuracy |
US6230261B1 (en) * | 1998-12-02 | 2001-05-08 | I. P. First, L.L.C. | Method and apparatus for predicting conditional branch instruction outcome based on branch condition test type |
US6247122B1 (en) * | 1998-12-02 | 2001-06-12 | Ip-First, L.L.C. | Method and apparatus for performing branch prediction combining static and dynamic branch predictors |
US6499101B1 (en) * | 1999-03-18 | 2002-12-24 | I.P. First L.L.C. | Static branch prediction mechanism for conditional branch instructions |
US6421774B1 (en) * | 1999-11-05 | 2002-07-16 | Ip First L.L.C. | Static branch predictor using opcode of instruction preceding conditional branch |
Non-Patent Citations (1)
Title |
---|
Computer Dictionary Second Edition: The Comprehensive Standard for Business, School, Library and Home; Redmond, Washington: Microsoft Press, 1994; p. 253. |
Cited By (12)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20050066154A1 (en) * | 2003-09-24 | 2005-03-24 | Sung-Woo Chung | Branch prediction apparatus and method for low power consumption |
US20050223203A1 (en) * | 2004-03-30 | 2005-10-06 | Gabriel Loh | Segmented branch predictor |
WO2012098435A1 (en) * | 2011-01-21 | 2012-07-26 | Freescale Semiconductor, Inc. | Integrated circuit device and method for calculating a predicate value |
CN103329092A (en) * | 2011-01-21 | 2013-09-25 | 飞思卡尔半导体公司 | Integrated circuit device and method for calculating a predicate value |
CN103329092B (en) * | 2011-01-21 | 2018-03-23 | 恩智浦美国有限公司 | For calculating the IC apparatus and method of predicted value |
US10383718B2 (en) | 2011-02-28 | 2019-08-20 | Adient Medical, Inc. | Absorbable vascular filter |
US10531942B2 (en) | 2011-02-28 | 2020-01-14 | Adient Medical, Inc. | Absorbable vascular filter |
US10607137B2 (en) | 2017-04-05 | 2020-03-31 | International Business Machines Corporation | Branch predictor selection management |
US10740104B2 (en) | 2018-08-16 | 2020-08-11 | International Business Machines Corporation | Tagging target branch predictors with context with index modification and late stop fetch on tag mismatch |
US11231931B1 (en) * | 2018-12-20 | 2022-01-25 | Advanced Micro Devices, Inc. | Mechanism for mitigating information leak via cache side channels during speculative execution |
CN117093272A (en) * | 2023-10-07 | 2023-11-21 | 飞腾信息技术有限公司 | Instruction sending method and processor |
CN117093272B (en) * | 2023-10-07 | 2024-01-16 | 飞腾信息技术有限公司 | Instruction sending method and processor |
Similar Documents
Publication | Publication Date | Title |
---|---|---|
US6553480B1 (en) | System and method for managing the execution of instruction groups having multiple executable instructions | |
US7707396B2 (en) | Data processing system, processor and method of data processing having improved branch target address cache | |
US6721874B1 (en) | Method and system for dynamically shared completion table supporting multiple threads in a processing system | |
US7711929B2 (en) | Method and system for tracking instruction dependency in an out-of-order processor | |
US6766441B2 (en) | Prefetching instructions in mis-predicted path for low confidence branches | |
US7783870B2 (en) | Branch target address cache | |
US6704860B1 (en) | Data processing system and method for fetching instruction blocks in response to a detected block sequence | |
US7363469B2 (en) | Method and system for on-demand scratch register renaming | |
US6766442B1 (en) | Processor and method that predict condition register-dependent conditional branch instructions utilizing a potentially stale condition register value | |
US7660971B2 (en) | Method and system for dependency tracking and flush recovery for an out-of-order microprocessor | |
US7689812B2 (en) | Method and system for restoring register mapper states for an out-of-order microprocessor | |
US6880073B2 (en) | Speculative execution of instructions and processes before completion of preceding barrier operations | |
US20090113182A1 (en) | System and Method for Issuing Load-Dependent Instructions from an Issue Queue in a Processing Unit | |
US7877586B2 (en) | Branch target address cache selectively applying a delayed hit | |
US6868491B1 (en) | Processor and method of executing load instructions out-of-order having reduced hazard penalty | |
US7032097B2 (en) | Zero cycle penalty in selecting instructions in prefetch buffer in the event of a miss in the instruction cache | |
US7844807B2 (en) | Branch target address cache storing direct predictions | |
US20070101102A1 (en) | Selectively pausing a software thread | |
WO2006091778A2 (en) | Suppressing update of a branch history register by loop-ending branches | |
KR20070118135A (en) | Branch target address cache storing two or more branch target addresses per index | |
US6971000B1 (en) | Use of software hint for branch prediction in the absence of hint bit in the branch instruction | |
US7991979B2 (en) | Issuing load-dependent instructions in an issue queue in a processing unit of a data processing system | |
US8086831B2 (en) | Indexed table circuit having reduced aliasing | |
US6725358B1 (en) | Processor and method having a load reorder queue that supports reservations | |
US7475226B2 (en) | System for managing data dependency using bit field instruction destination vector identifying destination for execution results |
Legal Events
Date | Code | Title | Description |
---|---|---|---|
AS | Assignment |
Owner name: INTERNATIONAL BUSINES MACHINES CORPORATION, NEW YOFree format text: ASSIGNMENT OF ASSIGNORS INTEREST;ASSIGNORS:KAHLE, JAMES A.;MOORE, CHARLES R.;REEL/FRAME:010679/0447Effective date: 20000327 |
|
STCF | Information on status: patent grant |
Free format text: PATENTED CASE |
|
FPAY | Fee payment |
Year of fee payment: 4 |
|
FPAY | Fee payment |
Year of fee payment: 8 |
|
AS | Assignment |
Owner name: GOOGLE INC., CALIFORNIAFree format text: ASSIGNMENT OF ASSIGNORS INTEREST;ASSIGNOR:INTERNATIONAL BUSINESS MACHINES CORPORATION;REEL/FRAME:026664/0866Effective date: 20110503 |
|
FPAY | Fee payment |
Year of fee payment: 12 |
|
AS | Assignment |
Owner name: GOOGLE LLC, CALIFORNIAFree format text: CHANGE OF NAME;ASSIGNOR:GOOGLE INC.;REEL/FRAME:044127/0735Effective date: 20170929 |