CN112166589A - Measurement of polymerization transitions - Google Patents
Measurement of polymerization transitions Download PDFInfo
- Publication number
- CN112166589A CN112166589A CN201980023653.2A CN201980023653A CN112166589A CN 112166589 A CN112166589 A CN 112166589A CN 201980023653 A CN201980023653 A CN 201980023653A CN 112166589 A CN112166589 A CN 112166589A
- Authority
- CN
- China
- Prior art keywords
- url
- content
- web browser
- client device
- server
- Prior art date
- Legal status (The legal status is an assumption and is not a legal conclusion. Google has not performed a legal analysis and makes no representation as to the accuracy of the status listed.)
- Granted
Links
Images
Classifications
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04L—TRANSMISSION OF DIGITAL INFORMATION, e.g. TELEGRAPHIC COMMUNICATION
- H04L67/00—Network arrangements or protocols for supporting network services or applications
- H04L67/01—Protocols
- H04L67/02—Protocols based on web technology, e.g. hypertext transfer protocol [HTTP]
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04L—TRANSMISSION OF DIGITAL INFORMATION, e.g. TELEGRAPHIC COMMUNICATION
- H04L67/00—Network arrangements or protocols for supporting network services or applications
- H04L67/01—Protocols
- H04L67/133—Protocols for remote procedure calls [RPC]
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04L—TRANSMISSION OF DIGITAL INFORMATION, e.g. TELEGRAPHIC COMMUNICATION
- H04L67/00—Network arrangements or protocols for supporting network services or applications
- H04L67/14—Session management
- H04L67/146—Markers for unambiguous identification of a particular session, e.g. session cookie or URL-encoding
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04L—TRANSMISSION OF DIGITAL INFORMATION, e.g. TELEGRAPHIC COMMUNICATION
- H04L67/00—Network arrangements or protocols for supporting network services or applications
- H04L67/50—Network services
- H04L67/53—Network services using third party service providers
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04L—TRANSMISSION OF DIGITAL INFORMATION, e.g. TELEGRAPHIC COMMUNICATION
- H04L67/00—Network arrangements or protocols for supporting network services or applications
- H04L67/50—Network services
- H04L67/535—Tracking the activity of the user
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04L—TRANSMISSION OF DIGITAL INFORMATION, e.g. TELEGRAPHIC COMMUNICATION
- H04L67/00—Network arrangements or protocols for supporting network services or applications
- H04L67/50—Network services
- H04L67/56—Provisioning of proxy services
- H04L67/568—Storing data temporarily at an intermediate stage, e.g. caching
Abstract
The systems and methods described herein may relate to a web browser-based Application Programming Interface (API) that may control authorization of data transfers within a networked environment. The system enables a content item displayed in a web page to invoke a browser to request the browser to register the content item with the browser. The web browser may control the network transmission of content items approved or authorized by the web browser. The system may reduce the number of times that transmission of client device content will not result, thereby saving bandwidth and computing resources of the client device.
Description
Background
When a client device accesses a website, the website may send small data packets to the client device. The cookie may include preferences (preferences), session information, or be used to verify and maintain a session between the client device and the device hosting the website. The data stored by the web site may be stored indefinitely or may be purged periodically. When the client device is not in an active session with a domain, the web browser may prevent the domain from accessing data of other domains or storing data on the client device.
Disclosure of Invention
Content items provided by third parties to populate content slots on a web page may be associated with the auxiliary web page. The auxiliary web page may be referred to as a landing page because activating (e.g., clicking on) the content item may bring the web browser to the auxiliary page. For example, the content item may include an HTML link to the auxiliary web page. In some implementations, the user may view the content item, but not activate the content item to access the landing page. Then, at a later time and without activating the content item, the user can navigate independently to the landing page. In a "non-cookie" environment that prevents the use of third party cookies, it is difficult to attribute access to landing pages. The systems and methods described herein can attribute navigation to a landing page to a content item while increasing user privacy.
For example, the system described herein may include a browser-based Application Programming Interface (API). The API enables a content item displayed in a web page to call a browser to request the browser to register the content item with the browser. Requests (e.g., calls to APIs) may include: landing page URL, conversion report URL, and activity id (campaigns id). After registering the content item with the browser, and the browser accesses a different URL, the browser may compare the URL of the current page with the login page URL registered with the browser. When the browser determines that it is accessing one of the registered login page URLs, the browser may generate a response message to the conversion report URL associated with the login page URL. The browser may set and enforce a number of policies for registering content items with the browser and transmitting response messages to the conversion report URL. For example, the policy may set a timing requirement that requires the content item to be displayed for a predetermined length of time before registration can occur, a display requirement that prevents invisibility or minor (e.g., tracking pixels) registration with the browser, and so on.
According to at least one aspect of the present disclosure, a method of authorizing data transmissions in a networked environment may comprise: a web browser executed by a client device receives a registration request from a content item displayed by the web browser. The registration request may include a first Uniform Resource Locator (URL) and a second URL. The method may include: a web browser executed by the client device stores the first URL, the second URL, and the timestamp to a registry stored at the client device. The method may include: the web browser executed by the client device identifies a third URL of the web page displayed by the web browser. The method may include: the web browser executed by the client device determines that the third URL matches the first URL stored in the registry and that the display time of the web page is within the predetermined duration of the timestamp. The method may include: the web browser executed by the client device sends the message to the second URL.
According to at least one aspect of the present disclosure, a system for authorizing data transfers in a networked environment may include a web browser executed by a client device. The web browser may execute or include a translation engine to receive a registration request from a content item displayed by the web browser, where the registration request may include a first URL and a second URL. The translation engine may store the first URL, the second URL, and the timestamp to a registry stored at the client device. The translation engine may identify a third URL of the web page displayed by the web browser. The conversion engine may determine that the third URL matches the first URL stored in the registry and that the display time of the web page is within a predetermined duration of the timestamp. The translation engine may send the message to the second URL.
The foregoing general description and the following description of the drawings, as well as the detailed description, are exemplary and explanatory and are intended to provide further explanation of the invention as claimed. Other objects, advantages and novel features will become apparent to one skilled in the art from the following brief description of the drawings and detailed description.
Drawings
The accompanying drawings are not intended to be drawn to scale. Like reference numbers and designations in the various drawings indicate like elements. For purposes of clarity, not every component may be labeled in every drawing. In the drawings:
FIG. 1 illustrates a block diagram of a network and device environment for data exchange, according to some implementations;
FIG. 2 illustrates a block diagram of an implementation of a computing device used in the network and device environment shown in FIG. 1, according to some implementations;
FIG. 3 illustrates a flow diagram for authorizing data exchanges in the network and device environment shown in FIG. 1 according to some implementations; and
FIG. 4 illustrates a flow diagram of an example method of exchanging data in the network and device environment shown in FIG. 1, according to some implementations.
Detailed Description
The various concepts introduced above and discussed in greater detail below may be implemented in any of numerous ways, as the described concepts are not limited to any particular implementation. Examples of specific implementations and applications are provided primarily for illustrative purposes.
Content downloaded from the internet and displayed in, for example, a web browser, may request additional content from a third party server. For example, a web page executed by a client device may include one or more content slots, which may include processor-executable instructions (e.g., JavaScript) that may cause a web browser to request the content of the content slot from a third-party server. When rendering a web page, the web browser may automatically generate the request. In some implementations, the processor-executable instructions may instruct the web browser to generate one or more requests that do not result in the generation or display of content in the rendered web page. For example, a request that the web browser may send to a server may include a status notification or update to a third party server that provides web page content. Additional content requests and responses may cause the client device to waste bandwidth and computing resources, which may not cause the client device to receive additional content for rendering to the user. The systems and methods described herein may reduce the number of transmissions that do not result in content for the client device, thereby saving bandwidth and computing resources of the client device. Further, these systems and methods may control the authorization of a response or request transmission, which may increase the privacy of the client device user.
For example, a content item provided by a third party to fill a content slot on a web page may be associated with an auxiliary web page. The auxiliary web page may be referred to as a landing page because activating (e.g., clicking on) the content item may bring the web browser to the auxiliary page. For example, the content item may include an HTML link to the auxiliary web page. In some implementations, the user may view the content item, but not activate the content item to access the landing page. Then, at a later time and without activating the content item, the user can navigate independently to the landing page. In a "non-Cookie" environment that prevents the use of third party cookies, it is difficult to attribute access to landing pages. The systems and methods described herein can attribute navigation to a landing page to a content item while increasing user privacy.
For example, the system described herein may include a browser-based Application Programming Interface (API). The API enables a content item displayed in a web page to call a browser to request the browser to register the content item with the browser. Requests (e.g., calls to APIs) may include: login page URL, conversion report URL, and activity id (campaigns id). After registering the content item with the browser, and the browser accesses a different URL, the browser may compare the URL of the current page with the login page URL registered with the browser. When the browser determines that it is accessing one of the registered login page URLs, the browser may generate a response message to the conversion report URL associated with the login page URL. In some implementations, the response message may be referred to as a message or a request message. The browser may set and enforce a number of policies for registering content items with the browser and transmitting response messages to the conversion report URL. For example, the policy may set timing requirements that require the content item to be displayed for a predetermined length of time before registration can occur, display requirements that prevent invisibility or small (e.g., tracking pixels) registration with the browser, and so on.
The present solution provides a number of technical solutions where the measurement of the conversion cannot be performed in browsers that do not enable third party cookies. For example, using a browser-based API in a content item rather than JavaScript protects user privacy in a number of ways. First, while JavaScript for content items is not controlled by the user, browser-based APIs are functions of the browser and may be controlled or limited by the user. This enables the user to set which information can be shared and when to configure through the policies described above. Second, the browser provider (or user) may set the maximum size and other requirements (e.g., format) of the response message reporting the URL. This may limit the amount of information that the browser may send to third parties. For example, the campaign ID may be limited to a brief, limited number of characters, so that a hash of the user agent (agent) and other information about the browser cannot be encoded and sent back to the third party in a report message. Third, the browser may delay or batch process the reporting message to the conversion reporting URL to mask the IP address and the time the browser accesses the landing page URL. Fourth, the browser can send the reporting message to a proxy, which then forwards the reporting message to a third party. The agent may further obfuscate the information contained in the report message.
FIG. 1 illustrates a block diagram of an example network and device environment 100 for data exchange. As shown, one or more client devices 102 may communicate with one or more content servers 110(1) -110(N) via network 106, which content servers 110(1) -110(N) may be generally referred to as content servers 110. Client device 102 may communicate with content server 110 via one or more intermediate servers 108. The client devices 102 may include any type and form of computing device, including desktop computers, laptop computers, portable computers, tablet computers, wearable computers, embedded computers, smart televisions, consoles, internet of things (IoT) devices, or smart devices, or any other type and form of computing device. Client device 102 may communicate with one or more remote servers 104(1) -104(N) via network 106, which remote servers 104(1) -104(N) may be referred to generally as remote servers 104. In response to a request from client device 102, remote server 104 sends or otherwise provides primary content (e.g., a web page) to client device 102. For example, the client device 102 may execute an application to request content. The application may be a web browser, social media application, video game, or other such application. Client device 102 may request content from remote server 104 and content server 110. For example, remote server 104 may host a web page that includes content slots. The content slots of the web page may include JavaScript or other processor-executable instructions that may cause the client device 102 to request content from the content server 110 (via the intermediate server 108) to fill the content slots. The processor-executable instructions may be provided to remote server 104 by intermediate server 108 or content server 110.
The system 100 may include one or more networks 106. The network 106 may include types and forms of networks including a Local Area Network (LAN), a Wide Area Network (WAN) such as the internet, a satellite network, a cable network, a broadband network, a fiber optic network, a microwave network, a cellular network, a wireless network, or any combination of these or other such networks. The system 100 may include networks 106 of the same or different types. For example, the network 106 between the client device 102 and the intermediary server 108 may be of a first type, and the network 106 between the intermediary server 108 and the content server 110 may be of a second type. The network 106 between the client device 102 and the intermediary server 108 and the network 106 between the intermediary server 108 and the content server 110 may be the same network or components of the same network.
The system 100 may include one or more intermediary servers 108. The intermediary server 108 may manage content requests received from the client device 102. The content request may be for content, which may also be referred to as auxiliary content or content items, to be rendered in a content slot of the primary content provided by remote server 104. The intermediary server 108 may satisfy content requests from a plurality of content servers 110. For example, the intermediary server 108 may receive a request for content from the client device 102 and may select a content server 110 from the plurality of content servers 110 that provides the requested content. The selection may be via a load balancing algorithm, an auction algorithm (e.g., bidding for opportunities to provide content with the content server 110), and so forth. The intermediate server 108 may thus be referred to as a swap server, a load balancer, an auction provider, or any other such terminology.
The system 100 may include one or more content servers 110. Content server 110 may include a content repository. In response to receiving a content request from intermediary server 108 or client device 102, content server 110 may select content from a content store. In some implementations, the content request from the client device 102 can include an identifier, such as a cookie, that the content server 110 provided to the client device 102 in an earlier data exchange. Content server 110 may select content from a content store based on the identifier. For example, the content server 110 may associate the identifier with a user interface such as, but not limited to, preferences and computing resources (e.g., screen size and resolution) of the client device 102. Content server 110 may select content from a data store based on data associated with the identifier.
The intermediate server 108, remote server 104, and content server 110 may include any type and form of computing device, including desktop computers, servers, workstations, laptop computers, portable computers, embedded computers, or any other type and form of computing device. The intermediary server 108 and the content server 110 may comprise virtual machines executed by one or more physical computing devices and may be configured as a server farm, cluster, or device cloud.
FIG. 2 illustrates a block diagram that shows an example computing device for data exchange. As described above with respect to fig. 1, the system 100 may include a client device 102. The client device 102 may execute an application 208, such as a web browser, to receive content from the remote server 104. The intermediary server 108 may also provide content from the content server 110 to the client device 102.
As described above, client device 102 may be referred to as a client, a device, a client device, a computing device, a user device, or any other such terminology. Client device 102 may include or be an integral part of a desktop computer, laptop computer, tablet computer, smart phone, video game, smart television or set-top box, server, workstation, or any other type and form of computing device capable of communicating over network 106. In some implementations, the client device 102 can execute an application 208 for communicating over the network 106. The application 208 may be a service, server, daemon, routine, or other executable logic for communicating over the network 106. The application 208 may be a web browser, mail client, video player, music player, video game, or any other such application. Such applications may include command line interfaces, graphical user interfaces, or any combination of these or other interfaces. The application 208 may include an instance of a transformation engine 212.
The client device 102 may include one or more processors 200, a network interface 202, and an I/O interface 204. The client device 102 may include a memory 206. The memory 206 may store machine instructions that, when executed by the processor 200, cause the processor 200 to perform one or more of the operations described herein. The processor 200 may comprise a microprocessor, ASIC, FPGA, the like, or a combination thereof. Processor 200 may be a multi-core processor or processor array. Memory 206 may include, but is not limited to, an electronic, optical, magnetic, or any other storage device capable of providing program instructions to processor 200. Memory 206 may include a floppy disk, CD-ROM, DVD, magnetic disk, memory chip, ROM, RAM, EEPROM, EPROM, flash memory, optical media, or any other suitable memory from which processor 200 may read instructions. The instructions may include code from any suitable computer programming language, such as, but not limited to C, C + +, C #, Java, JavaScript, Perl, HTML, XML, Python, and Visual Basic.
The client device 102 may include one or more network interfaces 202. The network interface 202 may include any type and form of interface for communicating with the network 106, including ethernet (including 10Base T, 100Base T, or 1000Base T ("gigabit")); any kind of 802.11 wireless (such as 802.11a, 802.11b, 802.11g, 802.11n, or 802.11 ac); cellular (including CDMA, LTE, 3G, or 4G cellular); bluetooth or other short-range wireless connection; or any combination of these or other interfaces. The client device 102 may include a plurality of different types of network interfaces 202 that allow connection to various networks 106 or networks 106 (such as the internet) through different subnets.
The client device 102 may include one or more I/O interfaces 204. The I/O interface 204 may be hardware-based or software-based. The I/O interface 204 may be any electronic device (e.g., a keyboard, a mouse, a pointing device, a touch screen display, a microphone, etc.) that communicates data to a user by generating sensory information (e.g., a visualization on a display, one or more sounds, haptic feedback, etc.) and/or converts sensory information received from a user into electronic signals. According to various implementations, the one or more user interface devices may be internal to the housing of the client device 102, such as a built-in display, touch screen, microphone, etc., or external to the housing of the client device 102, such as a monitor connected to the client device 102, a speaker connected to the client device 102, etc.
The client device 102 may store data and processor-executable instructions in the memory 206. For example, the client device 102 may store the application 208 as processor-executable instructions in the memory 206. The application 208 may be an application, applet, script, service, daemon, routine, or other executable logic for receiving content via the I/O interface 204 (e.g., display, speaker, etc.) of the client device and displaying or otherwise outputting the content. For example, the application 208 may be a web browser that receives and renders a landing page 218 or other web page or content. The application 208 may include functionality for displaying content received via the network interface 202 and/or generated locally by the processor 200.
The client device 102 may include a device ID 210. The client device 102 may identify itself to the intermediary server 108, the content server 110, or the remote server 104 using the device ID 210. The device ID210 may be an alphanumeric string, a data string, a serial number, a Media Access Control (MAC) address, an Internet Protocol (IP) address, a username or account name, a Globally Unique Identifier (GUID), a cookie, a random or pseudo-random number, or any other type and form of identifier, including combinations of these or other identifiers. For example, the device ID210 may be a hash or MAC address of a user agent of the client device. The device ID210 may be fixed to the client device 102. For example, the device ID210 may be preconfigured in the device by the manufacturer. For example, the device ID210 may be a manufacturer serial number or a MAC address. The device ID210 may be dynamically set by the client device 102, the remote server 104, the intermediate server 108, or the content server 110. The device ID210 may be static. The device ID210 may be updated at a predetermined interface. For example, a unique or new device ID210 may be set for each communication with the intermediary server 108. The device ID210 may be changed or updated periodically (e.g., hourly, daily, weekly, etc.) or at other intervals (e.g., upon reboot of the client device, login to an internet service, etc.). The device ID210 may be associated with one or more other device identifiers 210 (e.g., a device identifier of a mobile device, a device identifier of a home computer, etc.).
The client device 102 may include a translation engine 212. The transformation engine 212 may be an application, applet, script, service, daemon, routine, or other executable logic for registering content items with the client device 102. The transformation engine 212 may be a component of the application 208 or may be separate from the application 208. For example, the transformation engine 212 may be a script that may be separate from a particular application 208 and may receive API calls from multiple applications 208 (e.g., client devices web browsers and email clients). As further described with respect to fig. 3 and 4, the transformation engine 212 may provide an interface for content items to interact with the application 208. For example, the transformation engine 212 may be a module, subroutine, or additional component of the application 208. For example, the transformation engine 212 may provide an API or other hook that enables the content item to register with the application 208. For example, the content item may include processor-executable instructions that, when executed by the application 208 (via the processor 200), call an API. The invocation may be registering the content item with the application 208. The call may include a payload. The payload may include an activity ID, a login page URL, and a report URL. When registering with the application 208, the translation engine 212 may store the contents of the payload in a registry 214. For example, registry 214 may be a table that may include an entry for each content item registered with application 208. Each entry in the table may store, for example, an activity ID, a landing page URL, a reporting URL, and a timestamp. The timestamp may indicate the time at which the entry was saved to the registry 214. In some implementations, the contents of the payload can be indexed to the landing page URL in the registry 214.
The memory 206 may include an aggregation table 216. As further described with respect to fig. 3 and 4, the transformation engine 212 may include one or more reporting policies. The reporting policy may indicate whether the reporting message should be sent to the reporting URL as a single message (e.g., with a time delay at the time of generation or to protect user privacy) or in bulk. When the batch report flag is set in the reporting policy, the conversion engine 212 may send report messages in batches. In response to generating the report message, when bulk transfer is active, the transformation engine 212 can save the report message into the aggregation table 216 until the bulk transfer requirement is met. For example, the reporting policy may indicate that bulk transfers should be sent periodically (e.g., every 12 hours). The translation engine 212 may save the generated report message into the aggregation table 216 until the transmission time is triggered (e.g., 00:00 hours or 12:00 hours in the above example). The transformation engine 212 may then read the reporting message from the aggregation table 216 and send the reporting message to the corresponding reporting URL. The translation engine 212 may purge or otherwise delete reported report messages from the aggregation table 216. In some implementations, the reporting policy can be generated at a login page (e.g., remote server 104). For example, the remote server 104 may specify which reporting URL or which reporting URLs may receive reporting messages or other indications of conversion events.
As also shown in fig. 2, the system 100 may include an intermediary server 108. Like the client device 102, the intermediary server 108 may include one or more processors 200, memory 206, a network interface 202, and an I/O interface 204. Intermediate server 108 may communicate with client device 102, content server 110, or remote server 104 via network 106. The memory 206 of the intermediary server 108 may store one or more applications executed by the processor 200 of the intermediary server 108. For example, the intermediate server 108 may include an application that enables the intermediate server 108 to function as an FTP server, a web server, a mail server, a file sharing server, a peer server, or other such application for communicating content or redirection commands to allow clients to access content at the content server 110.
The intermediary server 108 may include a content provider selector 220. The content provider selector 220 may include an application, server, service, daemon, routine, or other executable logic. The content provider selector 220 may be configured to select a content server 110 from a list of content servers 110. For example, the content provider selector 220 may select the content server 110 from a list of content servers 110 using a polling or other load balancing system or via an auction-based system. The content provider selector 220 may be configured to send requests to the content server 110 and receive responses from the content server 110, such as bids for opportunities to provide content to the client device 102. The content server 110 may be configured to generate a response to the client device 102 request that may include an identifier (such as a domain or address) of the selected content server 110, such that the client device 102 may generate or retrieve the device ID210 and provide the device ID210 to the intermediary server 108 or the content server 110 for use in selecting the content item.
As also shown in fig. 2, system 100 may include a plurality of content servers 110. Each content server 110 may include one or more computing devices connected to network 106 and configured to provide content items (e.g., content 222) to client device 102 directly or via intermediary server 108. The content 222 provided by the content server 110 may be referred to as secondary content because the content 222 may be rendered, for example, as content slots of primary content provided by the remote server 104. In some implementations, the content 222 may be or may include primary content. Content server 110 may be variously referred to as a content provider, server, web server, data server, publisher, service provider, or other similar terminology. The content server 110 may include a plurality of computing devices configured as a server farm or cloud, and may include routers, load balancers, network address translators, firewalls, or other such devices. The content server 110 may be a computer server (e.g., FTP server, file sharing server, web server, etc.) or a combination of servers (e.g., data center, cloud computing platform, etc.). Content server 110 may provide any type and form of content including text, images, video, audio, multimedia or other data or any combination of these. Content 222 may include live media content, pre-recorded media content, rendered content, movies, television shows, podcasts, video blogs, video games or other interactive content, advertisements in any format, social media, or any other type and form of content.
As also shown in fig. 2, system 100 may include one or more remote servers 104. Remote server 104 may include one or more processors 200, network interface 202, and/or I/O interface 204. The memory 206 of the remote server 104 may store one or more applications that are executed by the processor 200 of the remote server 104. For example, remote server 104 may include an application that enables remote server 104 to function as an FTP server, a web server, a mail server, a file sharing server, a peer-to-peer server, or other such application for transmitting content to client device 102. For example, the remote server 104 may include one or more login pages 218 stored in the memory 206. The landing page 218 may be a web page or other type of content such as, but not limited to, audio, video, animation, text, multimedia, still or animated graphics, executable scripts, or any other type and form of content. Each landing page 218 may be identified by a URL. To retrieve or access the login page 218, the URL may be entered into the application 208 of the client device 102. The client device 102 may generate a request to the remote server 104 for a login page 218 (or other form of content) located at the URL. The landing page 218 may be used as a redirection target for the content 222. For example, when the content 222 is rendered by a web browser, the content 222 can include a hyperlink to the login page 218 such that the application 208 can redirect to the login page 218 when the user activates (e.g., clicks on or selects) the content 222. In some implementations, the user of the client device 102 can navigate locally to the login page 218. For example, the user may enter the URL of the login page into a navigation bar of a web browser, or find the login page 218 by an online search, rather than being redirected to the login page 218 by activating the rendered content 222.
Fig. 3 shows a flow diagram 300 of authorizing data exchanges in a network and device environment. Referring also to fig. 1 and 2, at step 302, the client device 102 may obtain content from the first remote server 104 (1). For example, remote server 104(1) may host one or more websites or other primary content. The user may enter or select a URL pointing to a website hosted by remote server 104 (1). An application 208 (e.g., a web browser) on the client device 102 may generate a request for content (e.g., a website) identified by the URL. Client device 102 may send the request to remote server 104(1) via any suitable protocol, such as via an http request or a RESTful request. The request may include a device identifier, account identifier, user identifier, session identifier, or other such identifier, or a cookie generated by remote server 104(1) and stored on the client device. For example, remote server 104(1) may have previously provided a cookie to client device 102 (e.g., during an authentication process or other such event), and client device 102 may thereafter provide the same cookie in the request.
At step 304, remote server 104(1) may return the content. The content may be a web page or other type of content identified in a URL contained within the request. The returned content may include one or more content slots. The content slots may be filled with content 222 from the content server 110 via the intermediate server 108. The content slot may include processor-executable instructions that may cause application 208 to generate a request to intermediate server 108 or content server 110 for content that fills the content slot in response to application 208 rendering (or otherwise executing) content, at least in part, from remote server 104 (1).
At step 306, client device 102 may render content from remote server 104 (1). As described above, in one example, the content may be a web page hosted by remote server 104 (1). The content may include processor-executable instructions that may cause the application 208 to request additional content from additional network resources, such as the intermediary server 108. For example, the web page may include an auxiliary content slot that includes processor-executable instructions for requesting content from the intermediary server 108.
In step 308, the client device 102 may retrieve content from the intermediary server 108. Rendering the auxiliary content slots may cause application 208 to generate a request to intermediate server 108 for content that fills (e.g., renders) the auxiliary content slots. Client device 102 may send the request to remote server 104(1) via any suitable protocol, such as via an http request or a RESTful request. The request may include a device identifier, account identifier, user identifier, session identifier, or other such identifier, or a cookie generated or provided by the client device. For example, remote server 104(1) may have previously provided a cookie to client device 102 (e.g., during an authentication process or other such event), and client device 102 may thereafter provide the same cookie in the request.
At step 310, the intermediary server 108 may return the content to the client device 102. In some implementations, the intermediary server 108 may forward the request for content to the content server 110 at step 308. Intermediary server 108 may select content server 110 to provide content from the list of content servers 110. For example, the intermediary server 108 may select the content server 110 from a list of content servers 110 using a polling or other load balancing system or via an auction-based system. The content server 110 may select the content item to return in response to the request and may send the content item directly to the client device 102 or to the client device 102 via the intermediary server 108. For example, at step 310, the content server 110 may send the content item to the intermediary server 108 and the intermediary server 108 may send the content item to the client device 102.
At step 312, the client device 102 may render the content. The client device 102 may render the content as part of the rendering of the content returned at step 304. For example, the content returned at step 310 may be rendered into a content slot that causes the generation of a request for content. At step 314, the content item may be registered with the client device 102. Rendering the content item (at step 312) may register the content item with the client device 102. For example, the content item may include a payload (e.g., non-visible data) and processor-executable instructions. The payload may include, for example, a URL of a landing page, one or more identifiers, and a reporting URL. The content item may also include processor-executable instructions that may register the content item with the application 208. For example, the content item may include a call to a javascript API exposed to the content item by the transformation engine 212 on the client device 102. In another example, the content item may include a tag, which may include one or more attributes or processor-executable instructions. The call to the API may include a payload of the content item. For example, the call to the API may include a URL of a landing page, one or more identifiers, and a reporting URL. The translation engine 212 may store data from the API calls in the registry 214. Step 302-314 may be repeated multiple times. For example, content provided to client device 102 from remote server 104(1) may include a plurality of content slots for which a plurality of content items are returned from intermediate server 108. In some implementations, each content item can be registered in the registry 214 by the transformation engine 212. Step 302-314 may be repeated multiple times for multiple different first remote servers 104 (1). For example, a user may navigate to a number of different web pages that may each include a content slot. As the client device 102 navigates to the web pages, content items that return to fill the content slots of each different web page may be registered in the registry 214.
At step 316, the client device 102 may obtain content from the second remote server 104 (2). The request for content at step 316 may occur after one or more content items are registered in the registry 214. Similar to first remote server 104(2), second remote server 104(2) may host one or more web pages. In some implementations, the one or more web pages can be a landing page for one of the content items registered in the registry 214. When the content item includes a URL that points the web browser to a web page, the web page may be a landing page for the content item. At step 316, client device 102 may send the request to remote server 104(2) via any suitable protocol, such as via an http request or a RESTful request.
Remote server 104(2) may return the requested content at step 318. Remote server 104(2) may send content to client device 102 via HTTP, HTTPs, or other protocol. In response to receiving the content from remote server 104(2), client device 102 may render, for example, the content via a web browser. Rendering the content may display the content to a user of the web browser.
At step 320, the translation engine 212 may match the URL with a URL in the registry 214. In response to rendering the content returned from remote server 104(2), translation engine 212 may determine whether the URL of the returned content is registered in registry 214. In some implementations, the data in the registry 214 may be indexed by URL. In these examples, the translation engine 212 may use the URL of the content returned from the remote server 104(2) as a key (key). The conversion engine 212 may determine whether any data (e.g., content item identifiers or reporting URLs) is associated with a URL in the registry 214.
If the translation engine 212 finds a match at step 320, the translation engine 212 may send a report message at step 322. The transformation engine 212 may send the report message to a report URL that is indexed to the matching URL in the registry 214. In some implementations, the reporting URL may be a URL for the intermediate server 108 or associated with the intermediate server 108 (as shown in fig. 3). In some implementations, the reporting URL may be used to receive and forward the reporting message to a proxy device of the final destination, such as the intermediate server 108. The agent may process the report message to remove the identifiable data from the report message. For example, the proxy may remove the original IP address of the report message from the report message. In some implementations, the reporting URL may be a URL associated with the remote server 104. The report message may be an automatic reference notification (pingback) message to a report URL. Receipt of the report message at the reporting URL by the server may indicate to the server that the client device rendered and displayed the content item, and that the client device subsequently independently navigated to a landing page for the content item.
Fig. 4 illustrates an example method 400 of authorizing data exchanges in a network and device environment. The method 400 may indicate the steps performed by the client device 102, the remote server 104, and the intermediary server 108 in the method 400. Referring also to fig. 1 and 2, at step 402, the client device 102 may request content from the intermediary server 108. Client device 102 may generate a request for content to intermediary server 108 in response to rendering a content slot, e.g., a web page. For example, the content slots of the web page may include processor-executable instructions that may cause the web browser to generate a request to the intermediary server 108. Client device 102 may transmit the request to remote server 104(1) via any suitable protocol, such as via an http request or a RESTful request. The request may include a device identifier, account identifier, user identifier, session identifier, or other such identifier, or a cookie generated by the client device 102 or provided to the client device 102. For example, remote server 104(1) may have previously provided a cookie to client device 102 (e.g., during an authentication process or other such event), and client device 102 may thereafter provide the same cookie in the request.
In response to the request, intermediary server 108 may select content at step 404. In some implementations, the intermediary server 108 can select the content server 110, and the content server 110 can select or provide the content. For example, the intermediary server 108 may select the content server 110 from a list of content servers 110 using a polling or other load balancing system or via an auction-based system. The content server 110 may select a content item to return in response to the request and may send the content item directly to the client device 102 or to the client device 102 via the intermediary server 108. For example, the content server 110 may send the content item to the intermediary server 108, and the intermediary server 108 may send the content item to the client device 102. At step 406, the intermediary server 108 may send the content to the client device 102 as a response to the request at step 402.
At step 408, the content item may be registered with the client device 102. The content may include a payload (e.g., non-visible data) and processor-executable instructions. Execution of the processor-executable instructions during rendering of the content may generate calls to the APIs provided by the transformation engine 212. Through the API call, the content item may pass the payload to the transformation engine 212 to register the content item with the client device 102. The payload may include, for example, a URL of a login page, an activity ID, one or more identifiers, and a reporting URL. The campaign ID may identify the content item to the intermediary server 108 or the content server 110. Content items of the same type or otherwise related from the same third party may include the same campaign ID.
In some implementations, the translation engine 212 can include one or more enrollment policies. The translation engine 212 may determine whether the registration policy is satisfied prior to registering the content with the client device 102. The registration policy may be set or controlled by a user of the client device 102. For example, the user may generate a white list or a black list indicating which content (or types thereof) the transformation engine 212 may register. The white list and the black list may indicate the provider of the content (e.g., intermediate server 108, remote server 104, or content server 110) via a URL. The white list and the black list may indicate the types of content that may be registered. For example, the user may blacklist video content such that no video content (independent of provider) may be registered with the conversion engine 212. The registration policy may include one or more requirements that must be met before the content can be registered. For example, in some implementations, the conversion engine 212 may only register the content if the content is displayed to the user for a predetermined length of time. The transformation engine 212 may generate or execute a timer script that is activated (e.g., started) when the content item is rendered and displayed to the user. The conversion engine 212 may end when the window containing the content item is closed, the user navigates to a different web page, or the content is otherwise no longer available or displayed to the user. The user may set a time threshold (e.g., 10 seconds, 30 seconds, 1 minute). The conversion engine 212 may only register the content item if the length of time the content is displayed exceeds a time threshold. The registration policy may set the display frequency of registrations. The display frequency may be the number of times each time window of content items must be displayed before the content items can be registered with the conversion engine 212. The time window may be 1 day, 1 week, 1 month, or 3 months. For example, the registration policy may indicate that the content item needs to be displayed at least twice a month before the content item can be registered. In these implementations, the transformation engine 212 may register content items as candidate content items in the registry 214. The transformation engine 212 may periodically purge (e.g., delete) candidate content items from the registry 214 that do not meet a display frequency within a predetermined threshold. For example, the conversion engine 212 may clear candidate content items hourly, daily, weekly, or monthly and clear candidate content items that are displayed less frequently than indicated by the registration policy. The content item in the registry 214 may not match the incoming URL until the content item is displayed more than often and the translation engine 212 deletes the candidate tag from the content item entry in the registry 214. In some implementations, the user may choose to clear, reset, or otherwise delete the registry 214. For example, the transformation engine 212 may automatically delete entries in the registry 214 that are older than one day, one week, one month, or 3 months. In some implementations, the user can deactivate the conversion engine 212 so that the content item cannot be entered into the registry 214.
The registration policy may include visibility requirements. In some implementations, the content from the intermediary server 108 may not be visually presented to the user when rendered. For example, the content may include only processor-executable instructions that cause the client device 102 to generate a request to a third party, and the content may not include text, images, audio, or other data that is rendered and displayed to the user. In another example, the content may be rendered to a relatively small size or otherwise hidden from the user when displayed. For example, the content may be rendered as only a single pixel. The visibility requirement of the registration policy may indicate a required size of the content for the content to be registered when the content is rendered. For example, the visibility requirement may indicate that the rendered content must be at least 5 pixels by 5 pixels in order for the transformation engine 212 to authorize registration of the content. In this example, if the rendered content is less than 5 pixels x 5 pixels, the conversion engine 212 may determine not to register the content item.
At step 410, the client device 102 may generate a request for content. In this example, step 410 may occur once registry 214 is populated with one or more entries. Remote server 104 may host one or more web pages. In some implementations, the one or more web pages can be a landing page for one of the content items registered in the registry 214. When the content item includes a URL that points the web browser to a web page, the web page may be a landing page for the content item. Client device 102 may send the request to remote server 104 through any suitable protocol, such as through an http request or a RESTful request. At step 412, remote server 104 may select the content identified in the request. For example, the request may include a URL, and remote server 104 may retrieve a web page located at the URL. At step 414, remote server 104 may send the content to client device 102.
At step 416, the client device 102 may render the content from the remote server 104. The content from remote server 104 may be a web page. In some implementations, when the application 208 (e.g., web browser) begins rendering a web page from the remote server 104, the translation engine 212 can execute a JavaScript (or other processor-executable) timer. The conversion engine 212 can run a timer until the web browser of the client device 102 navigates to another web page or closes a window displaying the web page. The web page may be associated with a URL. The translation engine 212 may determine or receive a URL from a web browser. For example, the translation engine 212 may invoke a web browser on a URL in the location bar of the front-most window or active window of the web browser.
At step 418, the conversion engine 212 may determine whether the content is registered. For example, the translation engine 212 may determine whether a web page returned from the remote server 104 is registered in the registry 214 or is associated with an entry of the registry 214. For example, as described above, the transformation engine 212 may register the content item into the registry 214. The content item may include a payload included as an entry in the registry 214. The entry for the content item in the registry 214 may include a landing page URL, one or more identifiers, or other data. Registry 214 may be indexed by landing page URL. In steps 412 and 414, the translation engine 212 may search the registry 214 for the URL of the web page provided by the remote server 104. The conversion engine 212 performs a lookup or search of the registry 214 by using the URL as an input key to the registry 214 to determine whether the URL of the web page matches one of the login page URLs saved to the registry 214. If the translation engine 212 finds the URL of the web page in the registry 214, the client device 102 previously received a content item from the intermediary server 108 or the content server 110 indicating that the web page (from the remote server 104 at steps 412 and 414) is a landing page for the content item. If the conversion engine 212 does not find a match with the URL, the web page is not used as a landing page for the previously received content item, and the method 400 may end at step 420. If the content is registered, the method 400 may continue to step 422.
At step 422, the conversion engine 212 may determine whether the report is authorized. The translation engine 212 may reference the reporting policy to determine whether the reporting is authorized. The reporting policy may include rules regarding whether the rendering of the content may be reported. For example, the reporting policy may include a display time requirement. The display time requirement may be a length of time in seconds, minutes or hours. The display time requirement may be set by the user or the intermediary server 108. The display time requirement may indicate a length of time that the remote server's content must be displayed after the remote server's content is rendered at step 416 before the conversion engine 212 will generate a report message for the content. For example, as described above, the conversion engine 212 may set a timer when content is rendered to a user. In response to the closing of the window containing the content, the transition engine 212 may compare the time determined by the timer to the display time requirement. If the display time is less than the display time requirement, the conversion engine 212 may determine that the report is not authorized. If the display time is greater than the display time requirement, the conversion engine 212 may determine that the report is authorized. The reporting policies may include whitelists and blacklists similar to whitelists and blacklists of registration policies. A user of client device 102 or intermediate server 108 may create a list of remote servers 104 for which reports are authorized (white list) or for which reports are not authorized (black list). If, at step 422, the conversion engine 212 determines that the report is not authorized, the method 400 may end at step 420. If, at step 422, the conversion engine 212 determines that the report is authorized, the method 400 may continue to step 424.
At step 426, the conversion engine 212 may generate a report message. As described above, at step 418, the transformation engine 212 may determine that the content is registered in the registry 214. The translation engine 212 may retrieve entries associated with the content from the registry 214, for example, by using the URL of the content as a key to perform a lookup in the registry 214. The entry of content may include the above-described payload, which may contain one or more identifiers (e.g., activity IDs) and one or more URLs (e.g., reporting URLs). The report message may be an auto-quote notification response. The auto-refer notification response may be an XML remote procedure call. The response may be sent to the destination over HTTP or HTTPs, and the payload of the response may be encoded in XML. The destination of the report message may be a report URL retrieved from the registry 214. The response payload may include one or more identifiers. The identifier may be or may include the device ID210, the activity ID, or a combination thereof. For example, the translation engine 212 may concatenate the most significant bits of the device ID210 with the active ID. A portion or all of the response payload may be encrypted or hashed. For example, the transformation engine 212 may generate a portion of the response by hashing an input from a browser, application, device or session specific identifier, a device type or serial number, a clock skew time, a hardware identifier, or any other such data. In some implementations, the reporting policy may set a size limit (e.g., in bits or characters) for the content of the response payload. For example, the reporting policy may indicate that the reporting message payload is limited to the size and content of the activity ID. In this example, the response payload may include information about the content being viewed, but not information about the client device 102 rendering or otherwise receiving the content.
At step 426, the transformation engine 212 may determine whether the report message should be saved for bulk transfer. The reporting policy may include a bulk transfer flag or bit. When set, the conversion engine 212 may hold (hold) report messages for bulk transfers. If, at step 426, the conversion engine 212 determines that the bulk transfer flag is set, the method 400 may enter a hold phase at step 428. At step 428, the translation engine 212 may write or save the report message to the aggregation table 216. The translation engine 212 may save the reporting messages to the aggregation table 216 using a timestamp indicating when the reporting messages were generated or saved to the aggregation table 216. In some implementations, the reporting policy may include batch requirements. When the transformation engine 212 determines that the batch requirements have been met, the transformation engine 212 may send the report messages stored in the aggregation table 216 to their respective destinations, as indicated by their respective report URLs. The batch requirements may be based on quantity or based on time. The number of report messages required in a batch transfer may be set based on the batch requirement for the number. For example, the conversion engine 212 may send report messages when 10, 50, or 100 report messages are batched (e.g., saved) to the aggregation table 216. The time-based batch requirement may set an interval (e.g., hours, days, weeks, or months) at which to send the report messages saved to the aggregate table 216.
At step 430, the transformation engine 212 can send the response as part of the batch process. For example, at step 430, the transformation engine 212 may determine that the batch requirements are met, and the transformation engine 212 may retrieve each report message from the aggregation table 216. The translation engine 212 may send each report message to their respective destinations. If, at step 426, the conversion engine 212 determines that the bulk transfer flag is not set, the method 400 may proceed to step 434 and the conversion engine 212 may send a report message.
At steps 432 and 436, the intermediary server 108 may record the response. While the report message is shown in fig. 4 as being sent to the intermediate server 108, the report message may be sent to any server (e.g., remote server 104, content server 110, or proxy server). Similarly, the transformation engine 212 may send (at step 430) each report message to a different destination in a bulk transfer. For example, the conversion engine 212 may send a first portion of the report message to the first intermediate server 108, a second portion of the report message to the second intermediate server 108, and a third portion of the report message to the remote server 104. The intermediate server 108, or more generally, the recipient of the report message, may record that the report message was received. The intermediary server 108 may save an indication of the report message to the conversation table. The intermediate server 108 may save the contents of the report message into a translation table. For example, the intermediary server 108 may save the activity ID of the report message to a translation table. Periodically, the intermediary server 108 may analyze the translation table to determine, for example, the frequency with which content items from a given content server 110 are viewed, and then the client device subsequently navigates independently to a landing page for the content item.
Thus, in accordance with at least one aspect of the present disclosure, a method of authorizing data transmissions in a networked environment may comprise: a web browser executed by a client device receives a registration request from a content item displayed by the web browser. The registration request may include a first URL and a second URL. The method may include: a web browser executed by the client device stores the first URL, the second URL, and the timestamp to a registry stored at the client device. The method may include: the web browser executed by the client device identifies a third URL of the web page displayed by the web browser. The method may include: the web browser executed by the client device determines that the third URL matches the first URL stored in the registry and that the display time of the web page is within the predetermined duration of the timestamp. The method may include: the web browser executed by the client device sends the response to the second URL.
In some implementations, the method can include generating, by the web browser, a response to the second URL. The method may include storing, by the web browser, the response to the second URL in an aggregation table. The method may include determining, by the web browser, that the batch requirement is satisfied. The method may include sending, by the web browser, the response to the second URL as a bulk transfer including a plurality of responses.
In some implementations, the method can include determining, by the web browser, a duration of time for which the web page is displayed by the web browser. The method may include: sending, by the web browser, a response to the second URL in response to the duration of the web browser displaying the web page being above the predetermined threshold.
In some implementations, the method can include determining, by the web browser, a duration of time for which the content item is displayed by the web browser. The method may include: the first URL, the second URL, and the timestamp are stored by the web browser in response to a duration of time that the web browser displays the content item being above a predetermined threshold.
In some implementations, the method may include: a web browser executed by a client device determines that a time at which a first URL and a second URL are stored at the web browser is less than a predetermined length of time. The method may include deleting, by the web browser, the first URL and the second URL from a translation table stored at the client device after the predetermined length of time. The registration request includes an Application Programming Interface (API) call with a data payload. The method may include sending at least a portion of the data payload to the second URL in the response. The method may include setting a payload limit for the response to the second URL. The method may include sending a response to the second URL via the proxy server.
According to at least one aspect of the present disclosure, a system for authorizing data transfers in a networked environment may include a web browser executed by a client device. The web browser can execute a translation engine to receive a registration request from a content item displayed by the web browser. The registration request may include a first URL and a second URL. The translation engine may store the first URL, the second URL, and the timestamp to a registry stored at the client device. The translation engine may identify a third URL of the web page displayed by the web browser. The conversion engine may determine that the third URL matches the first URL stored in the registry and that the display time of the web page is within a predetermined duration of the timestamp. The translation engine may send the response to the second URL.
In some implementations, the web browser can generate a response to the second URL. The web browser may store the response to the second URL in an aggregation table. The web browser may determine that the batch requirement is satisfied and send the response to the second URL as a batch transmission including a plurality of responses.
In some implementations, the web browser can determine a duration for which the web browser displays the web page. The web browser may send the response to the second URL in response to the web browser displaying the web page for a duration of time above a predetermined threshold.
In some implementations, the web browser can determine a duration for which the web browser displays the content item. The web browser may store the first URL, the second URL, and the timestamp in response to a duration of time that the web browser displays the content item being above a predetermined threshold.
The web browser may determine that the first URL and the second URL are stored at the web browser for less than a predetermined length of time. After the predetermined length of time, the web browser may delete the first URL and the second URL from a translation table stored at the client device. The registration request includes an Application Programming Interface (API) call with a data payload.
In some implementations, the web browser can send at least a portion of the data payload to the second URL in the response. The web browser may set a payload limit for the response to the second URL. The web browser may send the response to the second URL via the proxy server. In some implementations, the proxy server may hide the IP address of the client device from third party servers so that the IP address of the client device cannot be tracked. The agent may also aggregate reporting messages from multiple client devices to generate batch reports and protect individual user privacy.
Implementations of the subject matter and the operations described in this specification can be implemented in digital electronic circuitry, or in computer software, firmware, or hardware, including the structures disclosed in this specification and their equivalents, or in combinations of one or more of them. Implementations of the subject matter described in this specification can be implemented as one or more computer programs (i.e., one or more modules of computer program instructions) encoded on one or more computer storage media for execution by, or to control the operation of, data processing apparatus. Alternatively or additionally, the program instructions may be encoded on an artificially generated propagated signal, e.g., a machine-generated electrical, optical, or electromagnetic signal, that is generated to encode information for transmission to suitable receiver apparatus for execution by the data processing apparatus. The computer storage media may be or be included in a computer-readable storage device, a computer-readable storage substrate, a random or serial access memory array or device, or a combination of one or more of them. Further, although the computer storage medium is not a propagated signal, the computer storage medium can be a source or destination of computer program instructions encoded in an artificially generated propagated signal. The computer storage media may also be or be included in one or more separate physical components or media (e.g., multiple CDs, disks, or other storage devices). Thus, computer storage media may be tangible.
The operations described in this specification can be implemented as operations performed by data processing apparatus on data stored on one or more computer-readable storage devices or received from other sources.
The term "client" or "server" includes all kinds of devices, apparatuses and machines for processing data, such as programmable processors, computers, systems on a chip or a plurality or combination of the foregoing. An apparatus may comprise special purpose logic circuitry, e.g., an FPGA (field programmable gate array) or an ASIC (application-specific integrated circuit). The apparatus can include, in addition to hardware, code that creates an execution environment for the computer program in question, e.g., code that constitutes processor firmware, a protocol stack, a database management system, an operating system, a cross-platform runtime environment, a virtual machine, or a combination of one or more of them. The apparatus and execution environment may implement a variety of different computing model architectures, such as web services, distributed computing, and grid computing architectures.
A computer program (also known as a program, software application, script, or code) can be written in any form of programming language, including compiled or interpreted languages, declarative or procedural languages, and it can be deployed in any form, including as a stand-alone program or as a module, component, subroutine, object, or other unit suitable for use in a computing environment. A computer program may, but need not, correspond to a file in a file system. A program can be stored in a portion of a file that holds other programs or data (e.g., one or more scripts stored in a markup language document), in a single file dedicated to the program in question, or in multiple coordinated files (e.g., files that store one or more modules, sub programs, or portions of code). A computer program can be deployed to be executed on one computer or on multiple computers that are located at one site or distributed across multiple sites and interconnected by a communication network.
The processes and logic flows described in this specification can be performed by one or more programmable processors executing one or more computer programs to perform actions by operating on input data and generating output. The processes and logic flows can also be performed by, and apparatus can also be implemented as, special purpose logic circuitry, e.g., an FPGA (field programmable gate array) or an ASIC (application-specific integrated circuit).
Processors suitable for the execution of a computer program include, by way of example, both general and special purpose microprocessors, and any one or more processors of any kind of digital computer. Generally, a processor will receive instructions and data from a read-only memory or a random access memory or both. The essential elements of a computer are a processor for performing actions in accordance with the instructions and one or more memory devices for storing instructions and data. Generally, a computer will also include, or be operatively coupled to receive data from or transfer data to, or both, one or more mass storage devices for storing data, e.g., magnetic, magneto-optical disks, or optical disks. However, a computer need not have such devices. Moreover, a computer may be embedded in another device, e.g., a mobile telephone, a Personal Digital Assistant (PDA), a mobile audio or video player, a game console, a Global Positioning System (GPS) receiver, or a portable storage device (e.g., a Universal Serial Bus (USB) flash drive), to name a few. Devices suitable for storing computer program instructions and data include all forms of non-volatile memory, media and memory devices, including semiconductor memory devices, e.g., EPROM, EEPROM, and flash memory devices; magnetic disks, e.g., internal hard disks or removable disks; magneto-optical disks; and CD ROM and DVD-ROM disks. The processor and the memory can be supplemented by, or incorporated in, special purpose logic circuitry.
To provide for interaction with a user, implementations of the subject matter described in this specification can be implemented on a computer having a display device (e.g., a CRT (cathode ray tube), LCD (liquid crystal display), OLED (organic light emitting diode), TFT (thin film transistor), plasma, other flexible configurations, or any other monitor) for displaying information to the user and a keyboard, pointing device (e.g., a mouse, trackball, or the like) or touch screen, touch pad, or the like through which the user can provide input to the computer. Other kinds of devices may also be used to provide interaction with the user, and the feedback provided to the user may be any form of sensory feedback, e.g., visual feedback, auditory feedback, or tactile feedback; and input from the user may be received in any form, including acoustic, speech, or tactile input. In addition, the computer may interact with the user by sending documents to and receiving documents from the device used by the user; for example, by sending a web page to a web browser on the user's client device in response to a request received from the web browser.
Implementations of the subject matter described in this specification can be implemented in a computing system that includes a back-end component (e.g., as a data server), or that includes a middleware component (e.g., an application server), or that includes a front-end component (e.g., a client computer having a graphical user interface or a Web browser through which a user can interact with an implementation of the subject matter described in this specification), or any combination of one or more such back-end, middleware, or front-end components. The components of the system can be interconnected by any form or medium of digital data communication (e.g., a communication network). The communication networks may include local area networks ("LANs") and wide area networks ("WANs"), the internet (e.g., the internet), and peer-to-peer networks (e.g., ad hoc peer-to-peer networks).
For situations in which the system discussed herein collects personal information about a user or can use personal information, the user may be provided with an opportunity to control programs or features that control whether or not personal information can be collected (e.g., information about the user's social network, social actions or activities, the user's preferences, or the user's location) or to control whether or how content is received from a content server or other data processing system that may be more relevant to the user. In addition, certain data may be processed anonymously before it is stored or used in one or more ways, such that personally identifiable information is deleted when parameters are generated. For example, the identity of the user may be anonymized such that no personally identifiable information can be determined for the user, or the geographic location of the user may be generalized where location information is obtained (e.g., to a city, zip code, or state level) such that a particular location of the user cannot be determined. Thus, the user may control how information is collected about him or her and used by the content server.
While this specification contains many specific implementation details, these should not be construed as limitations on the scope of any inventions that may be claimed, but rather as descriptions of features specific to particular implementations of particular inventions. Certain features that are described in this specification in the context of separate embodiments can also be implemented in combination in a single embodiment. Conversely, various features that are described in the context of a single implementation can also be implemented in multiple implementations separately or in any suitable subcombination. Furthermore, although features may be described above as acting in certain combinations and even initially claimed as such, one or more features from a claimed combination can in some cases be excised from the combination, and the claimed combination may be directed to a subcombination or variation of a subcombination.
Similarly, while operations are depicted in the drawings in a particular order, this should not be understood as requiring that such operations be performed in the particular order shown or in sequential order, or that all illustrated operations be performed, to achieve desirable results. In certain situations, multitasking and parallel processing may be advantageous. Moreover, the separation of various system components in the implementations described above should not be understood as requiring such separation in all implementations, and it should be understood that the described program components and systems can generally be integrated together in a single software product or packaged into multiple software products.
Thus, particular embodiments of the subject matter have been described. Other implementations are within the scope of the following claims. In some cases, the actions recited in the claims can be performed in a different order and still achieve desirable results. In addition, the processes depicted in the accompanying figures do not necessarily require the particular order shown, or sequential order, to achieve desirable results. In particular implementations, multitasking and parallel processing may be utilized.
Claims (20)
1. A method of authorizing data transmissions in a networked environment, comprising:
receiving, by a web browser executed by a client device, a registration request from a content item displayed by the web browser, wherein the registration request includes a first Uniform Resource Locator (URL) and a second URL;
storing, by a web browser executed by a client device, the first URL, the second URL, and the timestamp to a registry stored at the client device;
identifying, by a web browser executed by the client device, a third URL of a web page displayed by the web browser;
determining, by a web browser executed by the client device, that the third URL matches the first URL stored in the registry and that a display time of the web page is within a predetermined duration of the timestamp; and
based on determining that the third URL matches the first URL stored in the registry and that the display time of the web page is within the predetermined duration of the timestamp, a web browser executed by the client device sends a message to the second URL.
2. The method of claim 1, further comprising:
generating, by the web browser, a message to the second URL;
storing, by the web browser, the message for the second URL in an aggregation table;
determining, by the web browser, that the batch requirements are met; and
the message is sent by the web browser to the second URL as a bulk transmission comprising a plurality of messages.
3. The method of claim 1, further comprising:
determining, by the web browser, a duration of time for which the web page is displayed by the web browser; and
in response to the duration of the web page being displayed by the web browser exceeding a threshold, sending, by the web browser, a message to the second URL.
4. The method of claim 1, further comprising:
determining, by the web browser, a duration of time for which the content item is displayed by the web browser; and
the first URL, the second URL, and the timestamp are stored by the web browser in response to a duration of time for which the content item is displayed by the web browser exceeding a threshold.
5. The method of claim 1, further comprising: a web browser executed by a client device determines that the first URL and the second URL are stored at the web browser for less than a predetermined duration.
6. The method of claim 1, further comprising: in response to a difference between the stored time of the first URL and the second URL and the current time exceeding a threshold, deleting, by the web browser, the first URL and the second URL from a translation table stored at the client device.
7. The method of claim 1, wherein the registration request comprises an Application Programming Interface (API) call having a data payload.
8. The method of claim 7, further comprising: at least a portion of the data payload is sent in a message to the second URL.
9. The method of claim 1, further comprising: a payload limit is set for the message for the second URL.
10. The method of claim 1, further comprising: the message is sent to the second URL via the proxy server.
11. A system for authorizing data transmissions in a networked environment, comprising:
a web browser executed by a client device, the web browser executing a translation engine to:
receiving a registration request from a content item displayed by a web browser, wherein the registration request includes a first Uniform Resource Locator (URL) and a second URL;
storing the first URL, the second URL, and the timestamp to a registry stored at the client device;
identifying a third URL of a web page displayed by the web browser;
determining that the third URL matches the first URL stored in the registry and that the display time of the web page is within a predetermined duration of the timestamp; and
based on determining that the third URL matches the first URL stored in the registry and that the display time of the web page is within the predetermined duration of the timestamp, sending a message to the second URL.
12. The system of claim 11, further comprising a translation engine to:
generating a message to a second URL;
storing the message to the second URL in an aggregation table;
determining that the batch requirements are met; and
the message is sent to the second URL as a bulk transmission comprising a plurality of messages.
13. The system of claim 11, further comprising a translation engine to:
determining a duration of time for which the web page is displayed by the web browser; and
in response to the duration of the display of the web page by the web browser being above a threshold, a message is sent to the second URL.
14. The system of claim 11, further comprising a translation engine to:
determining a duration of time for which the content item is displayed by the web browser; and
in response to a duration of display of the content item by the web browser being above a threshold, the first URL, the second URL, and the timestamp are stored.
15. The system of claim 11, further comprising a translation engine to determine that the first URL and the second URL are stored at the web browser for less than a predetermined duration.
16. The system of claim 11, further comprising a translation engine to delete the first URL and the second URL from a translation table stored at the client device after a predetermined duration.
17. The system of claim 11, wherein the registration request comprises an Application Programming Interface (API) call having a data payload.
18. The system of claim 17, further comprising a translation engine to send at least a portion of the data payload to the second URL in a message.
19. The system of claim 11, further comprising a translation engine to set a payload limit for the message to the second URL.
20. The system of claim 11, further comprising a translation engine to send the message to the second URL via the proxy server.
Priority Applications (1)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
CN202210048744.5A CN114500489B (en) | 2019-04-16 | 2019-04-16 | Method and system for authorizing data transmission in a networked environment |
Applications Claiming Priority (1)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
PCT/US2019/027735 WO2020214155A1 (en) | 2019-04-16 | 2019-04-16 | Aggregated conversion measurement |
Related Child Applications (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
CN202210048744.5A Division CN114500489B (en) | 2019-04-16 | 2019-04-16 | Method and system for authorizing data transmission in a networked environment |
Publications (2)
Publication Number | Publication Date |
---|---|
CN112166589A true CN112166589A (en) | 2021-01-01 |
CN112166589B CN112166589B (en) | 2022-02-25 |
Family
ID=66429572
Family Applications (2)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
CN201980023653.2A Active CN112166589B (en) | 2019-04-16 | 2019-04-16 | Method and system for authorizing data transfers in a networked environment |
CN202210048744.5A Active CN114500489B (en) | 2019-04-16 | 2019-04-16 | Method and system for authorizing data transmission in a networked environment |
Family Applications After (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
CN202210048744.5A Active CN114500489B (en) | 2019-04-16 | 2019-04-16 | Method and system for authorizing data transmission in a networked environment |
Country Status (7)
Country | Link |
---|---|
US (2) | US11212351B2 (en) |
EP (1) | EP3759893B1 (en) |
JP (2) | JP7015939B2 (en) |
KR (1) | KR102239281B1 (en) |
CN (2) | CN112166589B (en) |
ES (1) | ES2881658T3 (en) |
WO (1) | WO2020214155A1 (en) |
Families Citing this family (1)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
KR102417742B1 (en) * | 2021-09-08 | 2022-07-06 | 비엠텍시스템 주식회사 | API Data Aggregation System And Method Of The Same |
Citations (4)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20120173345A1 (en) * | 2010-12-30 | 2012-07-05 | Microsoft Corporation | Unified Tracking and Reporting Across Multiple Publishers |
CN104346464A (en) * | 2014-11-07 | 2015-02-11 | 北京奇虎科技有限公司 | Processing method and device of webpage element information and browser client |
CN106462561A (en) * | 2014-06-26 | 2017-02-22 | 谷歌公司 | Optimized browser render process |
US20170180229A1 (en) * | 2015-12-18 | 2017-06-22 | Google Inc. | Systems and methods for latency reduction in content item interactions using client-generated click identifiers |
Family Cites Families (22)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US5963915A (en) * | 1996-02-21 | 1999-10-05 | Infoseek Corporation | Secure, convenient and efficient system and method of performing trans-internet purchase transactions |
WO2001009703A1 (en) * | 1999-08-02 | 2001-02-08 | Harris Interactive, Inc. | System for protecting information over the internet |
KR20020084374A (en) * | 2001-04-30 | 2002-11-07 | 주식회사 팬택 | Discrimination And Display Method Of Abnormal URL In Wireless Internet |
US20050255833A1 (en) * | 2004-05-13 | 2005-11-17 | Mobile (R&D) Ltd. | Message aggregation system and method for a mobile communication device |
US8271329B2 (en) * | 2007-10-18 | 2012-09-18 | Linkshare Corporation | Methods and systems for tracking electronic commerce transactions |
JP4952531B2 (en) * | 2007-11-19 | 2012-06-13 | 富士通株式会社 | Recording apparatus, recording program, and recording method |
US8868637B2 (en) * | 2009-09-02 | 2014-10-21 | Facebook, Inc. | Page rendering for dynamic web pages |
US20110072502A1 (en) * | 2009-09-18 | 2011-03-24 | Zhexuan Song | Method and Apparatus for Identity Verification |
US10298614B2 (en) * | 2010-11-29 | 2019-05-21 | Biocatch Ltd. | System, device, and method of generating and managing behavioral biometric cookies |
CN103092857A (en) * | 2011-11-01 | 2013-05-08 | 腾讯科技（深圳）有限公司 | Method and device for sorting historical records |
US8935798B1 (en) * | 2011-11-08 | 2015-01-13 | Google Inc. | Automatically enabling private browsing of a web page, and applications thereof |
US8984091B1 (en) * | 2012-08-03 | 2015-03-17 | Google Inc. | Providing content based on timestamp of last request for content |
US9104767B2 (en) | 2012-08-28 | 2015-08-11 | Adobe Systems Incorporated | Identifying web pages that are likely to guide browsing viewers to improve conversion rate |
US20140068411A1 (en) * | 2012-08-31 | 2014-03-06 | Scott Ross | Methods and apparatus to monitor usage of internet advertising networks |
CN104166652B (en) * | 2013-05-16 | 2019-03-26 | 腾讯科技（深圳）有限公司 | Browse information synchronization method and device |
CN104216921B (en) * | 2013-06-05 | 2019-06-04 | 腾讯科技（深圳）有限公司 | A kind of addition reminding method, apparatus and system for realizing quick links in browser |
US9571512B2 (en) * | 2014-12-15 | 2017-02-14 | Sophos Limited | Threat detection using endpoint variance |
US10091076B2 (en) * | 2015-08-25 | 2018-10-02 | Google Llc | Systems and methods for configuring a resource for network traffic analysis |
WO2017122981A1 (en) | 2016-01-13 | 2017-07-20 | Samsung Electronics Co., Ltd. | Method and system to decrease page load time by leveraging network latency |
JP2017167684A (en) * | 2016-03-14 | 2017-09-21 | キヤノン株式会社 | Information processor, control method thereof, and program |
CN106503134B (en) * | 2016-10-19 | 2019-08-13 | Oppo广东移动通信有限公司 | Browser jumps to the method for data synchronization and device of application program |
JP6615941B2 (en) | 2018-05-21 | 2019-12-04 | グリー株式会社 | Communication terminal, conversion measurement method and conversion measurement system |
-
2019
- 2019-04-16 KR KR1020207027401A patent/KR102239281B1/en active IP Right Grant
- 2019-04-16 JP JP2020552762A patent/JP7015939B2/en active Active
- 2019-04-16 US US16/980,378 patent/US11212351B2/en active Active
- 2019-04-16 CN CN201980023653.2A patent/CN112166589B/en active Active
- 2019-04-16 CN CN202210048744.5A patent/CN114500489B/en active Active
- 2019-04-16 EP EP19722347.2A patent/EP3759893B1/en active Active
- 2019-04-16 WO PCT/US2019/027735 patent/WO2020214155A1/en unknown
- 2019-04-16 ES ES19722347T patent/ES2881658T3/en active Active
-
2021
- 2021-11-29 US US17/536,623 patent/US11711436B2/en active Active
-
2022
- 2022-01-21 JP JP2022007894A patent/JP7442553B2/en active Active
Patent Citations (4)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20120173345A1 (en) * | 2010-12-30 | 2012-07-05 | Microsoft Corporation | Unified Tracking and Reporting Across Multiple Publishers |
CN106462561A (en) * | 2014-06-26 | 2017-02-22 | 谷歌公司 | Optimized browser render process |
CN104346464A (en) * | 2014-11-07 | 2015-02-11 | 北京奇虎科技有限公司 | Processing method and device of webpage element information and browser client |
US20170180229A1 (en) * | 2015-12-18 | 2017-06-22 | Google Inc. | Systems and methods for latency reduction in content item interactions using client-generated click identifiers |
Also Published As
Publication number | Publication date |
---|---|
CN112166589B (en) | 2022-02-25 |
JP7015939B2 (en) | 2022-02-03 |
JP2022068159A (en) | 2022-05-09 |
ES2881658T3 (en) | 2021-11-30 |
CN114500489A (en) | 2022-05-13 |
JP7442553B2 (en) | 2024-03-04 |
US20220086240A1 (en) | 2022-03-17 |
EP3759893A1 (en) | 2021-01-06 |
US20210168213A1 (en) | 2021-06-03 |
US11711436B2 (en) | 2023-07-25 |
WO2020214155A1 (en) | 2020-10-22 |
US11212351B2 (en) | 2021-12-28 |
KR102239281B1 (en) | 2021-04-12 |
CN114500489B (en) | 2024-03-12 |
KR20200122381A (en) | 2020-10-27 |
EP3759893B1 (en) | 2021-05-05 |
JP2021519467A (en) | 2021-08-10 |
Similar Documents
Publication | Publication Date | Title |
---|---|---|
US10333945B2 (en) | Automatic token based secure content streaming method and apparatus | |
US10430830B2 (en) | Advertisement selection using uncertain user data | |
KR102390938B1 (en) | A domain-specific browser identifier that replaces browser cookies | |
EP3763108B1 (en) | Restricted environments for message generation in networked environments | |
US8966118B2 (en) | Unauthenticated redirection requests with protection | |
JP7442553B2 (en) | Aggregated conversion measurement | |
JP7074926B1 (en) | Systems and methods for encrypting content request data | |
JP7015400B2 (en) | Self-authentication domain-specific browser identifier | |
US20220020066A1 (en) | Content server for managing media data between publishers, third-party networks, and a computing device | |
US20240143840A1 (en) | Protecting access to information in online interactions | |
JP2023551077A (en) | Local cryptography techniques for privacy protection |
Legal Events
Date | Code | Title | Description |
---|---|---|---|
PB01 | Publication | ||
PB01 | Publication | ||
SE01 | Entry into force of request for substantive examination | ||
SE01 | Entry into force of request for substantive examination | ||
GR01 | Patent grant | ||
GR01 | Patent grant |