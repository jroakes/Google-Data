RELATED APPLICATION
This application is related to U.S. patent application Ser. No. 11/953,806, filed Dec. 10, 2007, “Viewport-Relative Scoring for Location Search Queries,” which is hereby incorporated by reference in its entirety.
This application is related to U.S. patent application Ser. No. 11/775,066, filed Jul. 9, 2007, “Interpreting Local Search Queries,” which is hereby incorporated by reference in its entirety.
This application is related to U.S. patent application Ser. No. 12/099,762, filed Apr. 8, 2008, “Dynamic Determination of Location-Identifying Search Phrases,” which is hereby incorporated by reference in its entirety.
This application is related to U.S. patent application Ser. No. 11/607,568, filed Dec. 1, 2006, “Method and Apparatus for Identifying a Standalone Location,” which is hereby incorporated by reference in its entirety.
This application is related to U.S. patent application Ser. No. 11/788,722, filed Apr. 20, 2007, “Using a Query Log From a Two-Box Interface to Identify Standalone Locations,” which is hereby incorporated by reference in its entirety.
TECHNICAL FIELD
Search engines provide a powerful tool for locating content in documents in a large database of documents, such as the documents on the Internet or World Wide Web (WWW), and/or the documents stored on the computers of an Intranet. The documents are located using an index of documents in response to a search query, consisting of one or more words, terms, keywords and/or phrases, henceforth called terms, that are submitted by a user. Documents in the index of documents may be matched to one or more terms in the search query to determine scores. A ranked listing of relevant documents or document locations, based on the scores, is provided to the user.
Search queries may have a variety of purposes and formats. One class of formats corresponds to location searches. Conventional location searches often use a fixed format, such as a template. Existing templates are often fixed or may only allow a limited number of variations. For example, words or terms in an existing location search query may have a pre-determined order (street name, state, zip code) and/or a pre-determined spelling. As a consequence, it is difficult or impossible to accommodate a wide range of spellings, including spelling errors, alternative names for locations, and alternative address formats, such as those found in different countries.
Many existing search engines often return a single result in response to location search queries. In conjunction with the lack of format flexibility for the location search queries, this makes it difficult to accommodate an uncertainty or ambiguity in either the location search query and/or the results that are returned to a user.
The lack of flexibility in existing location search queries also often compromises search engine performance, since the existing location search queries are often processed in a single data structure. An inability to scale the data structure and distributed it throughout the search engine may lead to slower processing of location search queries. Overcoming such bottlenecks may result in additional search engine complexity and expense.
There is a need therefore, for improved formats and techniques for processing location search queries. In addition, there is also a need for improved reporting of results of location search queries to users.
SUMMARY
The above deficiencies and other problems associated with location search queries are reduced or eliminated by the disclosed embodiments of processes and search engines.
In some embodiments, a method for performing a location search includes receiving a location search query, identifying one or more geographic feature documents that satisfy the location search query, ranking the identified geographic feature documents in accordance with scores that are based, at least in part, on corresponding address support scores, to produce a set of ranked documents, and providing results, in accordance with the ranked documents, that identify at least one geographic feature corresponding to at least one of the ranked documents. In some embodiments, each of the identified geographic feature documents corresponds to a geographic feature. In some embodiments, an address support score for a respective identified geographic feature document is based on one or more of: a standalone support score that indicates a level of confidence that one of more elements of the location search query are associated with a geographic feature of the respective identified geographic feature document, and a template support score that indicates, when the location search query includes a plurality of elements, the extent that the plurality of elements of the location search query satisfy an address template.
The aforementioned methods, as well as corresponding data structures and graphical user interfaces may be included in and/or performed by a search engine system having one or more central processing units, a memory in one or more computers, and one or more programs stored in the memory and executed by the one or more central processing units.
BRIEF DESCRIPTION OF THE DRAWINGS
For a better understanding of the aforementioned embodiments of the invention as well as additional embodiments thereof, reference should be made to the Description of Embodiments below, in conjunction with the following drawings in which like reference numerals refer to corresponding parts throughout the figures.
FIG. 1 is a flow diagram illustrating an embodiment of a location search process.
FIG. 2 is a block diagram illustrating an embodiment of processing a location search query.
FIG. 3 is a block diagram illustrating an embodiment of distributing geographic feature documents over a plurality of indexes.
FIG. 4 is a block diagram illustrating an embodiment of a geographic feature document.
FIG. 5A is a block diagram illustrating an embodiment of a map image.
FIG. 5B is a block diagram illustrating an embodiment of a map image.
FIG. 6 is a block diagram illustrating an embodiment of results that are returned in response to a location search query.
FIG. 7 is a block diagram illustrating an embodiment of a search engine system.
FIG. 8 is a block diagram illustrating an embodiment of a search engine.
FIG. 9 is a block diagram illustrating an embodiment of a client computer.
FIG. 10 is a block diagram illustrating an embodiment of a geographic features document data structure.
FIG. 11 depicts a set of geographic regions with respect to a current display window.
FIGS. 12 and 13 show how distances and regions on the surface of the Earth are measured as normalized angular distances, and also show how the location of a geographic feature in a viewport skirt region is converted into a ratio value.
FIG. 14 depicts a graph of a function for determining the radius of a skirt region in accordance with the radius of a viewport region.
FIG. 15 depicts a graph of a function used to assign a score attenuation factor in accordance with the location of a geographic feature relative to a current viewport region and skirt region.
FIG. 16 is a block diagram of a search engine system according to some embodiments.
FIG. 17 is a flow diagram illustrating an exemplary process of calculating a universal score for a location search query according to some embodiments.
FIG. 18 depicts a graph of a function used to determine a strength of a score attenuation factor in accordance with the location of a geographic feature relative to a current viewport region according to some embodiments.
FIG. 19 depicts a graph of a function used to determine a viewport support score in accordance with the location of a geographic feature relative to a current viewport region according to some embodiments.
FIG. 20 depicts a graph of a function used to determine a viewport support score in accordance with the location of a geographic feature relative to a current viewport region according to some embodiments.
DESCRIPTION OF EMBODIMENTS
Reference will now be made in detail to embodiments, examples of which are illustrated in the accompanying drawings. In the following detailed description, numerous specific details are set forth in order to provide a thorough understanding of the present invention. However, it will be apparent to one of ordinary skill in the art that the present invention may be practiced without these specific details. In other instances, well-known methods, procedures, components, and circuits have not been described in detail so as not to unnecessarily obscure aspects of the embodiments.
Embodiments of systems and methods for performing location search queries and providing corresponding results to users are described. This processing is sometimes referred to as geocoding. Location search queries, such as a street address in a city, may be received from a user using a search engine coupled to a network, such as the Internet (also referred to as the World Wide Web or WWW) and/or one or more intranets. The location search queries are processed to determine a canonical or Boolean expression. The processing may include determining one or more key words in a respective location search query, removing punctuation marks and non-location terms (such as articles) from the respective location search query, and determining one or more synonyms for one or more terms in the respective location search query. The synonyms may include predetermined abbreviations for and/or predetermined misspellings of one or more terms in the respective location search query. The canonical expression may be independent of, i.e., insensitive to, an order of the key words.
The canonical expression may be compared to an index of geographic feature documents in a search engine. Each geographical feature document corresponds to a geographical feature, which may be a location (e.g., a street, city, country, state, country) or a geographical entity (e.g., lake, river, mountain, continent, ocean, etc.). While a single geographical feature may correspond to a set of locations, such as a set of street addresses, all the locations associated with a geographical feature may be considered to be “a location” in the context of identifying the locations or geographical features that best match a location search query. The terms “geographical feature” and “location” are used synonymously in at least some portions of this document.
The index of geographical feature documents may be distributed over multiple computers in the search engine. The index may include location information and supplemental information. The location information may include key words, synonyms for the key words, and proximate objects for multiple locations. The supplemental information may include reference coordinates, such as latitude and longitude and/or a range or street numbers, for the locations.
Scores for a subset of the geographic feature documents that are a close match to a respective canonical expression may be returned by the computers. A ranking of a top-N geographic feature document may be determined. If a best score is more than a pre-determined multiple of a next best score, the location corresponding to the best score may be provided to the user along with a map image of the corresponding location. The map image may be centered on the corresponding location and may be sized to include a pre-determined bounding box, region or window around the corresponding location. Alternatively, if the best score is less than the pre-determined multiple, several locations corresponding to a range of scores may be provided to the user. Additional information, such as a location identifier (city, state, zip code and/or country) and/or links to corresponding map images, may be provided.
The embodiments, therefore, may accommodate a wide variety of formats, allow for ambiguity in the location search query and/or in the results, and may be use parallel processing so as to provide high speed processing of location search queries (sometimes called location searching). The embodiments, therefore, may provide improved processing of location search queries.
Attention is now directed towards location search processes. FIG. 1 is a flow diagram illustrating an embodiment of a location search process 100. While the location search process 100 described below includes a number of operations that appear to occur in a specific order, it should be apparent that the process 100 can include more or fewer operations, which can be executed serially or in parallel (e.g., using parallel processors or a multi-threading environment), an order of two or more operations may be changed and/or two or more operations may be combined into a single operation.
A location search query may be received (110). Key words may be determined (112). The location search query may be converted into a canonical form (114). This may include removing one or more non-location or noise words or terms, punctuation marks, diacritical marks (i.e., a mark added to letter to indicate a special pronunciation), and/or street numbers from the location search query. A Boolean expression may be generated (116). The Boolean Expression may contain synonyms for one or more words or terms in the location search query. Converting the search query into canonical form may also include expanding one or more abbreviations, such as expanding “st.” or “st” into “street”. In some embodiments, a misspelled word or term in the location search query (e.g., a term the query processing process determines is likely to be misspelled) may be “corrected” by supplementing the query with a “synonym” for the misspelled word that comprises the corresponding correctly spelled word. Determining the key words (112) may make a resulting query independent of the order of the key words. N (e.g., ten) best matching geographical feature documents may be identified from a geographic features document database (118). At least one geographical feature or location corresponding to the identified documents may be provided (120).
Identifying the N best matching documents 118 requires several computational operations. First, geographical feature documents satisfying the search query are identified 118A. For example, this may be accomplished by retrieving lists of documents that match each of the query terms and then performing a Boolean AND operation on the retrieved lists to produce a list of documents (if any) that match all the query terms. In another example, the search query is first “rewritten,” by removing any non-location terms and any punctuation, prior to identifying documents that satisfy the search query. Optionally, a respective individual term in the search query can be replaced by a Boolean OR expression that includes the term and one or more synonyms. In some embodiments, synonyms are added to the search query for each term in the query for which a set of synonyms has been predefined. Optionally, other modifications can be made to the search query in accordance with predefined rules so as to improve the quality of the search results.
Next, scores are computed for the identified matching documents 118B. Exemplary processes for generating the score for each matching document are discussed in some detail below. Generally, though, documents with high quality matches to the search query are assigned higher scores than documents with lower quality matches to the search query. Other factors, such as a level of confidence that one or more elements of the search query are associated with a geographic feature of the matching document, the extent that the plurality of elements of the search query satisfy an address template, a relevancy of tokens corresponding to the matching document with respect to the elements of the search query, the locations of the geographical features corresponding to the matching documents, relative to a current viewport in which a map or image is displayed, and the relative importance of these geographical features, may also be factors in computing the scores. The matching documents are then ranked based on the computed scores 118C, and the N highest ranked documents are identified 118D. In some embodiments, the ranking of the documents and the selection of the N highest ranked documents is combined into a single operation (e.g., by running a top N filter over the scores). In some embodiments, documents having lower rank than the top N documents are not ranked.
FIG. 2 is a block diagram illustrating an embodiment 200 of processing a location search query. A location search query 210, such as “155 Abe Ave. Great Neck N.Y.”, is used as an illustrative example. The street number 155 and the period may be removed during operation 114 resulting in Abe Ave Great Neck N.Y. In operation 116, the location search query may be converted into a Boolean expression, including expanding abbreviations (such as Ave) and synonyms. The resulting Boolean expression is Abe AND (Ave OR Avenue OR Street OR Lane OR Court OR . . . ) AND (Great Neck) AND (NY OR (NEW YORK)). This Boolean expression is independent of, i.e., insensitive to, an original word or term order in the location search query 210. As such, it may accommodate a wide variety of formats for the location search query 210. Such a Boolean expression has a form that may be processed in a search engine using a distributed geographic feature document database. This is discussed further below.
Attention is now directed towards embodiments of the geographic feature document database. FIG. 3 is a block diagram illustrating an embodiment 300 of distributing geographic feature documents over a plurality of indexes, which may be stored on multiple computers in a search engine. Geographic features documents 310 may include a plurality of geographic feature documents 312. A respective geographic feature document, such as document 312-1, may include a feature type (such as a street, road, route, city, country, intersection, etc.), a feature name (i.e., the name of a location), primary terms (such as specific key words associated with the feature), nearby feature terms (such as adjacent or proximate landmarks or locations of interest) and supplemental information (such as latitude and longitude of the feature). The supplemental information may be used by a map or tile server to present a map image(s) corresponding to the location in the respective geographic feature document. This is described further below with reference to FIGS. 5 and 7.
A partitioner 314 may distribute subsets of the geographic feature documents 310 via one or more indexers 316 to a respective index, such as index 320-1, in a plurality of indexes 320. The index 320-1 may correspond to one partition or sub-partition of the indexes 320 (which may collectively be considered to be the inverse index of the entire geographic feature documents database). The indexes 320 may be stored on one or more computers in the search engine. The subsets may be distributed such each index 320 handles an equivalent or approximately equivalent portion of processing associated with the respective location search query. For example, the documents 312-1 may be distributed randomly or pseudo-randomly over the indexes 320. For instance, a hash function and modulo function may be used to distribute the geographic feature documents to M indexers, were M is the number of indexes (sometimes called index partitions or index sub-partitions). In this example, a hash function is applied to each geographic feature document (or to a predefined portion of the document) to produce a hash value, and then a “modulo M” function is applied to the hash value to produce a selection value between 0 and M−1. The selection value determines which of the M indexers 316 is to receive the document for indexing.
When processing the respective search query, each of the indexes 320 may provide a top-N (such as a top-10) set of documents in the subset of documents that match the respective query. As discussed further below, the top-N documents may be based on a ranking of scores. In particular, a score may be determined for each document that matches the search query. The score may be based on the canonical and/or Boolean expression for the respective location search query. Referring to FIG. 7, the query processing for each sub-partition of the index 320 is handled by a respective server 730, which returns information identifying up to N of the highest ranking documents that match the query. A server 726 that may be called an aggregator or partition level query execution manager combines the search results from the servers 730, for example by selecting the N best search results from among the results returned by the servers 730. At a next higher level in the hierarchy, query execution manager 720, the search results from all the aggregators 726 are combined, by selecting the N best search results from among the results returned by the aggregators 726. In some embodiments, the query server 716 includes the query execution manager 720. More generally, a predefined number of best search results are selected at each level in a distributed hierarchy and are passed on to the next level. For example, if 10 sets of top-10 documents are received at a given level, the top-10 documents may be determined and passed on. In this way, the top-N documents in the documents 312 may be determined and/or identified using a distributed implementation. This approach may improve performance of the search engine and may reduce system cost and/or complexity.
FIG. 4 is a block diagram illustrating an embodiment of a geographic feature document 400, such as the document 312-1. The document 400 may be compatible with hypertext markup language (HTML) and/or extensible markup language (XML). The document 400 may include information corresponding to a geographic feature, such as a location (e.g., a street, intersection, city, point of interest, etc.). Some documents 400 may include information for more than one location (e.g., multiple segments of a street, city, or the like). Such location information may include key words corresponding to the one or more locations, one or more regions associated with the one or more locations and synonyms for one or more of the key words.
As shown in the embodiment 400, text following an HTML tag <CN> may indicate a type of location, in this case a route. Text following an HTML tag <CNA> may indicate an explicit name for the location, in this case Victoria Street. Text following HTML tags <CA> may indicate key words corresponding to the location, such as Westminster, London and England. Text following HTML tags <A> may indicate synonyms for the key words and/or the explicit name for the location, such as Angleterre, United Kingdom and Verenigd Koninkrijk. The synonyms may include words from foreign languages (i.e., languages other than the language of the key words). In some embodiments, the synonyms may include abbreviations and/or common misspellings in one or more keywords and/or in the explicit name for the location. Text following HTML tags <Cn> may indicate other locations or regions that are nearby or that neighbor the location. In this example, the nearby locations or regions are Islington, West End and Covent Garden.
The tagged text or information items in a document 400 may be called information items or text items. The information items or text items are processed by the indexers 316 (FIG. 3) to produce the indexes 320.
The document 400 may include less information or additional information, including fewer or additional tags. For example, the document 400 may include supplemental information, such as reference coordinates corresponding to the geographic features, that may be used by a map or tile server. In an exemplary embodiment, the reference coordinates may include latitudes and longitudes for one or more locations and/or a range of street numbers that bracket one or more locations. In other embodiments, an order of the information in the document 400 may be changed. Two or more items in the document 400 may be combined into a single item.
One specific example of supplemental information in a document 400 is the supplemental information for street or other route. In this example, the supplemental information includes one or more segments, each corresponding to a portion of the street or route. Each segments specifies a beginning and ending street number corresponding to first and second ends of the segment, and also specifies a latitude and longitude for each end of the segment. When a location search query that includes a street number matches the document 400, the specified street number is used to identify the best matching segment in the document's supplemental information. If the specified street number falls between the beginning and ending street numbers for the best matching segment, linear interpolation is used to determine a latitude and longitude for the location specified by the location search query. Alternately, if the specified street number matches the beginning or ending street number for the best matching segment, then the corresponding latitude and longitude are used for the location of the location specified by the location search query.
As mentioned previously, when comparing a canonical and/or Boolean expression corresponding to the respective location search query to documents 312 (FIG. 3) in the geographic feature documents 310 (FIG. 3) scores indicative of a degree of matching may be determined. These scores may indicate a relevancy of the documents 212, and thus, the corresponding locations, to the location search query. As such, the scores may be used by the search engine to determine a best result, i.e., a best location, or a list of the top-N results, i.e., the top-N locations, in response to the location search query.
In some embodiments, scores may only be determined for a subset of the documents 312 (FIG. 3), i.e., the search engine may determine a candidate set of documents that may correspond to the location search query. In an exemplary embodiment, criteria for inclusion in the candidate set of documents may include a requirement that at least one of the key words match the explicit name of the feature (the text following the <CNA> tag in FIG. 4) and that each of the elements or terms in the canonical and/or Boolean expression occurs in a document.
In an exemplary embodiment, the scores may be determined using
where IRi is a query match score (with respect to a particular candidate document) corresponding to a respective term or element “i” in the canonical and/or Boolean expression, FR is “feature rank” that indicates an importance of the feature or location, E is a normalization value, and Q is an optional factor. Q may correspond to the quality of the match between the query and the candidate document, or it may correspond to any other metric that may be used to improve the quality of the search results. Examples of the Q factor are described below with reference to FIGS. 11-20. In other embodiments, Q is not used, or equivalently is set equal to 1.
In some embodiments, the normalization value, E, is the maximum value of the sum of the IRi scores for a perfect match, or equivalently the sum of the token masses for the key words in the search query. The sum of the IRi values may be called the total match score or IR score for the candidate document. The value of IRi for a particular key word in the search query may include a product of weights. The weights may include a token mass, a relevance score and an element mass for the corresponding element or term in the canonical and/or Boolean expression. The token mass may correspond to a type of term, where the types of terms may include stop words, street affix key words (e.g., a street prefix word such as “rue” in French, or street suffix words such as “street,” “avenue,” “road,” and “place” in English), numbers, synonyms, and other key words, with each predefined type of term being assigned a predefined token mass. The predefined token mass values may have a predefined range, such as 0 to 1, or 0 to 8, or the like. In some embodiments, the default token mass (for “other key words”) is 1, while token types such as synonyms, and street affix key words and stop words are all assigned lower token mass values. In some embodiments synonyms are assigned a larger token mass than street affix words.
The relevance score may vary based on the degree of text match, with a predefined largest value for a complete text match between a query key word and an information element of the document. When the best match of a query key word with the information elements of a document is only a partial match (e.g., the query key word matches only one word of a multiword element), the relevance score is less than the predefined largest value, and reflects the degree of text match.
The element mass may vary as a function of a size or type of the geographic feature associated with an information item (in the candidate document) that matches a query key word. For example, an information item that is country name may be given a higher element mass than an information item that is a locality name (such as a city name), which in turn is given a higher value than an information that is a street name. The element mass may also reflect the type of information item that matches the query key word. For example, the information item that contains the explicit name for the geographical feature may be assigned a highest element mass, an information item that is a “context” item (e.g., the city or country in which a street is located) may be assigned a next highest element mass, and an information item that contains the name of a nearby city, region or other geographical feature may be assigned a lowest element mass. In some embodiments, the element mass for an information item in a candidate document is equal to the product of two element mass factors, one of which is based on the size or type of the geographical feature named by the information item and the second of which is based on the type of information item (explicit name, context, or nearby feature) that matches the query key word. In some other embodiments, the element mass for an information item in a candidate document is equal to the sum of these two element mass factors.
The feature rank, FR, for a candidate document may be based on a document frequency (a number of times a feature is referenced in the documents 312, FIG. 3), or it may be based on the size of a geographic feature, with bigger features (i.e., geographic extent) given higher feature rank values. In other embodiments, the feature rank can be based, at least in part, on the importance or popularity of the geographic feature corresponding to the candidate document. For example, the importance or popularity of the geographic feature corresponding to a candidate document may be determined by a world-wide-web search or other database search on the name of the geographic feature.
When a query key word has one or more synonyms, an IR score is computed (with respect to a candidate document) for each of the synonyms and for the query key word, and then the best of those IR scores is selected and used when computing the combined IR score for the candidate document.
In some embodiments, the scoring function shown above is modified so as to increase the importance of one or more factors relative to the other factors. For example, the scoring function may be changed to
where the exponent, M, is a value greater than one (e.g., 2, 2.5 or 3), and is typically between two and five (2≦M≦5), so as give the normalized total match score more importance in the scoring function than the feature rank, FR, and Q factors. In some embodiments, the scoring function discussed above is modified to favor documents whose name has terms in the same order as the terms are positioned in the search query over documents matching the same terms, but which have the terms in a different order in their name. For example, the total match score may be supplemented with a pair-wise matching score (e.g., total match score+pair-wise match score), which is based on the number of ordered term pairs (ordered, neighboring terms) in the search query that match ordered terms pairs in the document name.
Attention is now directed towards embodiments of a process for providing one or more location results to the user in response to the location search query. If a best score for a first document is greater than a pre-determined multiple of a next best score for a second document in a top-N ranking (for example, the next best score is less than 70% of the best score), the location corresponding to the first document may be provided to the user. Using the supplemental information stored with the document, a map or tile server may provide a map image of a region centered on the location to the user. For example, if the supplemental information includes street addresses bracketing the location, the center of the map image may be determined using linear interpolation. FIG. 5A is a block diagram illustrating an embodiment of a map image 500 provided to the user. A location tag 512-1 corresponding to the location 518 is centered in a bounding box 510. The bounding box 510 is sized such that a region 514 surrounding the location may be provided. The size of the bounding box 510 may be determined based on the size of the geographic feature or location. Different sized features (such as cities or countries) may have different sized bounding boxes.
In some cases, more than one distinct location (i.e., spatially separated from one another) in a region may have the same or almost the same score. For example, more than one location may match all of the key words in the canonical and/or Boolean expression corresponding to the location search query. In such cases, these results may be provided to the user. This is illustrated in FIG. 5B, which is a block diagram illustrating an embodiment of a map image 550. A bounding box 510 is defined which includes all the locations that meet predefined selection criteria. Location tags 512 corresponding to the distinct locations are included in the bounding box 510. In some embodiments, the tags are links. By clicking on one of the tags, the user may select the corresponding location. This location may be presented to the user along with a map image, such as the map image 500 (FIG. 5A). In some other embodiments, a list 520 of the best matching locations is listed next to the map 550. Each item in the list may include a link to a map corresponding to that location. Each item in the list 520 may be represented by the canonical name (identified by a CNA tag in the example in FIG. 4) and the context text (identified by the CA tags in the example in FIG. 4) from the corresponding geographical feature document.
If the best score is not greater than the pre-determined multiple of the next best score, locations corresponding to a range in the top-N ranking may be provided. For example, locations (from among the top N results) having scores greater than or equal to 50% of the best score may be provided. A variety of information may be provided along with the locations. An exemplary graphical user interface 600 for showing multiple search results returned in response to a location search query is shown in FIG. 6. In one region 610 or column, the best matching geographic features or locations are listed, and in another region of the graphical user interface are shown individual small maps 620, one for each of the best matching geographic features or locations listed in region 610. In this example, the location search query was “San Antonio,” which produced several possible relevant answers. The answers may be provided with one or more location identifiers, such as a city, a state, a zip code, and/or a country. In some embodiments, the small maps 620 each include a link to a corresponding, larger map. Similarly, in some embodiments, each of the listed best matching locations in region 610 include a link to a corresponding larger map. Clicking on one of the answers or small maps may allow the location to presented to the user along with a map image, such as the map image 500 (FIG. 5A).
Attention is now directed towards embodiments of search engines, client computers and data structures for implementing the previously described method, geographic feature documents and graphic user interfaces. FIG. 7 is a block diagram illustrating an embodiment of a search engine system 700 that generates location search query results in response to location search queries received from one or more clients 710, such as client system or device 900 (FIG. 9). Each client 710 may have a search assistant, such as search assistant module 930 (FIG. 9). It should be appreciated that the layout of the search engine system 700 as shown in FIG. 7 is merely exemplary and may take on any other suitable layouts or configurations. The search engine system 700, therefore, may include fewer or additional components or modules, may be implemented in hardware and/or in software, and a location or one or more components or modules may be changed. The search engine system 700 is used to search an index of documents, such as the geographic feature documents 310 (FIG. 3).
The search engine system 700 may include a mapping application server 714 that communicates with the clients 710 using a communication network 712. The communication network 712 may be the Internet and/or an intranet. The mapping application server 714 may forward location search queries to query server 716 and receive location results from the query server 716. In some embodiments, the query server 716 includes a query execution manager 720. In other embodiments, the query execution manager 720 is separate from the query server 716. The mapping application server 714 may use the supplemental information in the locations results to access appropriate map images from tile server 718 and to provide such map images along with the location results to the clients 710.
The query server 716 may determine the key words in the location search query, including converting the location search query to canonical form and/or generating a Boolean expression. The canonical and/or Boolean expression may be forwarded to query execution manager 720 for processing. The query execution manager 720 may provide the canonical and/or Boolean expression to multiple partitions 724 in geographic features documents database 722. In each partition 724, such as partition 724-K, a partition level query execution manager 726 may distribute the canonical and/or Boolean expression to servers 730 for one partition. The servers 730 may store the indexes 320 (FIG. 3). As discussed previously, the servers in the geographic features documents database 722 may determine the top-N documents corresponding to the location search query in a hierarchical fashion.
Upon receiving the top-N documents, the query execution manager 720 may access corresponding geographic or location information, such as the supplemental information, in document servers 734. In some embodiments, the geographic or location information may be included in the geographic features documents database 722.
Elements in the search engine system 700, such as the query server 716, may be dispersed over a group of servers so as to provide very fast processing of location search queries. In some embodiments, the search engine system 700 may include replicas of the query server, query execution manager, tile server and geographic features documents database at multiple locations, in a plurality of datacenters (e.g., located on different continents, and/or at different locations within one or more countries). Location search queries submitted by users at one of the clients 710 to the search engine system 700 are routed to an appropriate datacenter using the Domain Name System (DNS), based on current load, geographic locality and/or the operational status of each of the datacenters.
Each backend may include multiple query servers, such as query server 716, coupled to a communications network 712. The communications network 712 may be the Internet, but may also be any local area network (LAN) and/or wide area network (WAN). In some embodiments, each query server 716 is a server that receives location search query requests and delivers search location results in the form of web pages via HTTP, XML or similar protocols. Alternatively, if the query server 716 is used within a LAN, i.e., internally and not by the public, it may be an Intranet server. The query servers, such as query server 716, are configured to control the search process, including searching a document index, analyzing and formatting the search results. In some embodiments, a backend includes multiple query execution managers 720, coupled to the multiple query servers, such as the query server 716. In some embodiments, a backend includes multiple query servers, such as the query server 716, each of which include a query execution manager, such as the query execution manager 720.
FIG. 8 is a block diagram illustrating an embodiment of a search engine 800. The search engine 800 may include at least one data processor or central processing unit (CPU) 810, a communications or network interface 820 for communicating with other computers, servers and/or clients, memory 822 and one or more communication buses 812 for coupling these components to one another. The communication buses 812 may include circuitry (sometimes called a chipset) that interconnects and controls communications between system components.
Memory 822 may include high-speed random access memory and/or non-volatile memory, such as one or more magnetic disk storage devices. Memory 822, or alternately the non-volatile memory device(s) within memory 822, comprises a computer readable storage medium. In some embodiments, memory 822 stores an operating system (or a set of instructions) 824, such as LINUX, UNIX or WINDOWS, that includes procedures for handling basic system services and for performing hardware dependent tasks. Memory 822 may also store communication procedures (or a set of instructions) in a network communication module 826. The communication procedures are used for communicating with clients, such as the clients 710 (FIG. 7), and with other servers and computers in the search engine system 700 (FIG. 7).
Memory 822 may also store a query server module (or a set of instructions) corresponding to the query server 716 (FIG. 7), geographic feature document database 722, documents 832 and selected results 836. The query server 716 includes a key word processor 828 (or a set of instructions), which may rewrite received search queries, as described above, and a results ranking module 840 (or a set of instructions). The results ranking module 840 includes a standalone score module 842 (or a set of instructions), which generates a score that indicates a level of confidence that one or more elements of a search query are associated with a geographic feature of a matched geographic feature document, a template score module 844 (or a set of instructions), which generates a score that indicates the extent that a plurality of elements of the search query satisfy an address template, a viewport score module 846 (or a set of instructions), which generates a score that corresponds to a proximity of the geographic feature corresponding to the matched geographic feature document to a geographic viewport region of a client system, a matching score module 848 (or a set of instructions), which generates a score that indicates a relevancy of tokens corresponding to the matched geographic feature document with respect to the elements of the search query, and one or more score combiners 850 (or a set of instructions), which combine the aforementioned scores into a single score for the matched geographic feature document. Note that the results ranking module 840 is described in more detail below. The geographic feature document database 722 may include multiple indexes 830. The documents 832 may include multiple documents 834 that include geographic or location information. Furthermore, documents 832 may correspond to documents stored in document servers 734. The selected results 836 may include results 838 to one or more location search queries.
Although FIG. 8 (like FIG. 7) shows search engine 800 as a number of discrete items, FIG. 8 is intended more as a functional description of the various features which may be present in a search engine system rather than as a structural schematic of the embodiments described herein. In practice, and as recognized by those of ordinary skill in the art, the functions of the search engine 800 may be distributed over a large number of servers or computers, with various groups of the servers performing particular subsets of those functions. Items shown separately in FIG. 8 could be combined and some items could be separated. For example, some items shown separately in FIG. 8 could be implemented on single servers and single items could be implemented by one or more servers. The actual number of servers in a search engine system and how features are allocated among them will vary from one implementation to another, and may depend in part on the amount of information stored by the system and/or the amount data traffic that the system must handle during peak usage periods as well as during average usage periods.
FIG. 9 is a block diagram illustrating an embodiment of a client computer 900. The client computer 900 can be any one of the clients 710 in FIG. 7 or one of the clients 1602 in FIG. 16. The client computer 900 generally includes one or more processing units (CPU's) 910, a user interface 914, one or more network or other communications interfaces 912, memory 922, and one or more communication buses 920 for coupling these components to one another. The communication buses 920 may include circuitry (sometimes called a chipset) that interconnects and controls communications between system components. The user interface 914 may include one or more keyboards and/or one or more pointers (e.g., a mouse) 918, and/or one or more displays 916. Memory 922 may include random access memory, such as DRAM, SRAM, DDR RAM or other random access solid state memory devices; and may include non-volatile memory, such as one or more magnetic disk storage devices, optical disk storage devices, flash memory devices, or other non-volatile solid state storage devices. The communication buses 920 may include circuitry (sometimes called a chipset) that interconnects and controls communications between system components. Memory 922 may include mass storage that is remotely located from the central processing unit(s) 910.
Memory 922, or alternately the non-volatile memory device(s) within memory 922, comprises a computer readable storage medium. In some embodiments, memory 922 may include an operating system (or a set of instructions) 924, a network communications module (or a set of instructions) 926, a browser/tool module 928 and/or a search assistant module (or a set of instructions) 930. The search assistant module 930 may include an entry and selection monitoring module (or a set of instructions) 932, a transmission module (or a set of instructions) 934, a search results receipt module (or a set of instructions) 936 and/or a display module (or a set of instructions) 936.
The operating system 924, such as LINUX, UNIX or WINDOWS, may include procedures (or sets of instructions) for handling various basic system services and for performing hardware dependent tasks. The network communication module 926 may be used to connect the client system 900 to other computers (e.g., other client computers and/or a search engine) via the one or more communication network interfaces 912 and one or more communication networks, such as the Internet, other wide area networks, local area networks, metropolitan area networks, and so on.
The browser/tool module 928 may be a web browser that a user of the client system 900 may use to communicate and/or exchange information with one or more hosts (such as one or more websites and/or web pages) on the one or more communication networks. For example, the user may surf the Internet (e.g., display a web page and/or a web site) using the browser/tool module 928.
The search assistant module 930 (e.g., a browser extension, a browser toolbar, or instructions embedded in a search engine web page) may be used by the user to perform one or more search queries, such as location search queries, using a search engine and to receive corresponding search results, including one or more locations, one or more map images, one or more URLs and/or hyperlinks. In particular, the entry and selection monitoring module 932 may monitor user input, the transmission module 934 may send a search query to the search engine, the search results receipt module 936 may receive the search results from the search engine, and the display module 938 may display the search results (or may assist in rendering the search results for display by the browser module 928), such as a ranking of the one or more documents and/or document locations that contain identified content corresponding to the search query. The user may access or select one or more of the documents and/or document locations in the search results using the user interface 914 and the browser/tool module 928. For example, the user may click on a hyperlink using the pointer (not shown).
In embodiments where the client system 900 is coupled to a local server computer, one or more of the modules and/or applications in memory 922 may be stored in the server computer, which is typically at a different location than the client system 900. Each of the above identified modules and applications corresponds to a set of instructions for performing one or more functions described above. These modules (i.e., sets of instructions) need not be implemented as separate software programs, procedures or modules. The various modules and sub-modules may be rearranged and/or combined. Memory 922 may include additional modules and/or sub-modules, or fewer modules and/or sub-modules. For example, the search assistant module 930 may be integrated into the browser/tool module 928. Memory 922 may, therefore, include a subset or a superset of the above identified modules and/or sub-modules.
FIG. 10 is a block diagram illustrating an embodiment of a geographic feature document data structure 1000. The geographic feature documents data structure 1000 may include geographic feature documents 1002 that are included in the geographic feature documents database 722. The geographic feature documents 1002 may include multiple records 1010 that are distributed over multiple partitions on multiple computers. Each record 1010 may correspond to a respective geographic feature document. As explained above, the geographic feature documents may correspond to geographic features or locations. The records may include key words 1012, synonyms 1014 for one or more key words, associated words 1016 (such as a city where the location occurs) and/or proximate objects 1018. The geographic feature documents data structure 1000 may include fewer or additional elements, two or more elements may be combined and positions of one or more elements may be changed. For example, a respective record 1010 may further include supplemental information 1020, including latitude and longitude information for one or more locations or bounding boxes associated with the geographic feature represented by the record 1010.
Viewport-Relative Scoring of Results from Location Search Queries
When a user performs a series of location searches, for example using an online mapping program or service, the user is often searching for geographic features (e.g., cities, streets, specific addresses, or the like) that are nearby the geographic feature(s) found in the immediately prior location search. For example, after searching for a first geographic feature in a particular city, the user will often search for a second geographic feature that is either in the same city, or in a neighboring or nearby city. For ease of discussion, geographic features are sometimes called “locations,” but it should be understood that some geographic features, such as a street (as opposed to a specific street address), correspond to a large number of locations.
Referring to FIG. 11, in the following discussion, the “viewport” or “current viewport” corresponds to the geographic region currently displayed on the user's client device or system. For example, the viewport may be the display window produced (e.g., by an online mapping program or service) in response to the immediately preceding location search, or it may be a circular region that bounds the viewport rectangle displayed on the user's client system. Thus, the viewport can be rectangular or circular in shape. In the remainder of this discussion, the viewport is assumed to be circular in shape and to surround and include the viewport rectangle displayed on the user's client system. In addition, the viewport may result from user actions (e.g., pan and/or zoom commands or actions) that change the viewport to a user-specified region. In some embodiments, where viewport information is not present (e.g., from a web search), a user preferred location can be used to simulate a viewport. For example, if it is known that a user lives in San Francisco (e.g., from a user profile, etc.) and the user searches for “1st street,” the query can be augmented to include a “default virtual viewport” of San Francisco. In some embodiments, viewport information includes information from a current viewport of the user's client system and/or a current location of the user's client system. For example, a current viewport for a user's client system (e.g., a mobile device, etc.) may display “Paris, France”, but the user's client may be located in San Francisco (e.g., the location may be determined from the IP address of the user's client, a GPS signal received at the user's client, etc.). In these embodiments, specified weightings of the current viewport and a current location can be used to calculate a viewport score as described below.
When a user submits a location query that results in more than one result, the results may be scored so as to favor results (i.e., locations) within the current viewport (e.g., within a radius of R1) over locations outside the viewport (e.g., outside a radius of R1), and to favor locations near the viewport (e.g., within a skirt region around the viewport, herein called the “viewport skirt region”) than locations further away from the viewport. Note that the viewport skirt region can be defined as the region between a radius of R2 and R1, having a skirt width R2-R1. In one embodiment, the scoring function described above for scoring “documents” (sometimes called location description documents or location description database entries) is modified to include a score attenuation factor (SAF), which biases the score to favor results that intersect the current viewport, and to favor results that intersect a viewport skirt region that surrounds the viewport over results that intersect neither the viewport region nor the viewport skirt region (i.e., which are outside the viewport skirt region). In this context, the term “intersect” means that at least a portion of the geographic feature identified by a search result falls within a particular region.
As shown in FIGS. 12 and 13 (which are three-dimensional and perspective views, respectively, corresponding to FIG. 11), the sizes of regions and distances on the surface of the earth may be measured in terms of “angular distances”, which is the angular size of the arc on the earth's surface that is subtended by those regions or distances. Angular distances may be measured in units of radians or degrees. Normalized angular distances are divided by a normalization factor, such as 2π, so that the maximum angular distance is 1 (or any other predefined value) and the minimum angular distance is 0. In FIGS. 12 and 13, X1 represents the normalized size of the viewport region, based on the angular distance of the viewport region's radius R1 (see FIG. 11). X2 is the normalized size of the viewport skirt region, based on the angular distance of the viewport skirt region's radius R2 (see FIG. 11). X2-X1 represents the width of the viewport skirt region specified in angular distances. X3 represents the normalized angular distance between a geographical feature and the closest edge of the viewport region, or more generally the distance between the geographical feature and the viewport region. X represents the ratio of (A) the distance between the geographical feature and the viewport region (e.g., X3), and (B) the width of the viewport skirt region (e.g., X2-X1).
In one embodiment, the size of the viewport skirt region (e.g., R2) depends on the size of the viewport region (e.g., R1). In particular, when the radius of the viewport region is small (e.g., less than a few kilometers), the radius of the viewport skirt region is as much as 1+SkirtFactor times as large as the radius of the viewport region, where SkirtFactor is a configurable parameter. When the radius of the viewport region is large (e.g., more than a few hundred kilometers), the radius of the viewport skirt region is approximately the same as the radius of the viewport region. In an exemplary embodiment, the radius of the viewport skirt region is defined as:
SkirtRegionRadius=ViewportRadius×(1+SkirtFactor×EV)
EV=A+B×e −M×X1
where A and B are selected so that EV equals its maximum value, 1, when X1 is equal to zero (i.e., when the viewport region is very small), and EV equals its minimum value, 0, when X1 is equal to its maximum value, 1 (corresponding to a viewport region that covers the entire earth). FIG. 14 depicts a graph of an exemplary ratio of the radius of the skirt region to the radius of the viewport region (e.g., SkirtRegionRadius/ViewportRadius from the equation above). SkirtFactor is a configurable scaling factor. An exemplary value of SkirtFactor is 10; in other embodiments, SkirtFactor is equal to a value between 4 and 20. M is a configurable exponential rate factor. An exemplary value of M is 50; in other embodiments, M is equal to a value between 10 and 200. In addition, the value of M depends on the scaling of the angular distance X1. Solving for A and B in accordance with the constraints stated above, the equation for EV becomes:
When M=50, e−M is very close to zero (e−5≈1.9*10−22), and EV is approximately equal to e−M*X1.
In an exemplary embodiment, the scores may be determined in accordance with the following scoring function
where IRi is a query match score (with respect to a particular candidate document) corresponding to a respective term or element “i” in the canonical and/or Boolean expression, FR is the “feature rank,” which indicates the importance of the feature or location, E is a normalization value, and SAF is the scoring attenuation factor mentioned above. The IR, FR and E parameters are discussed in more detail above, and that discussion is equally applicable to the scoring function discussed here. It is noted that the sum of the IRi values for a particular candidate document (or geographical feature) can be considered to be an information retrieval score or query match score for the candidate, and that all the other parameters of the scoring function are for scaling, boosting or attenuating the score in accordance with additional factors so as to improve how the search results are ranked (i.e., so that the topmost ranked search results are the search results that are most likely to correspond to the geographical feature that is being sought by the user).
In an exemplary embodiment, the SAF for a particular geographic feature is determined in accordance with the following function
SAF=C+D×e −K×X
where K is an exponential scaling factor, and X is the ratio of (A) the distance between the geographical feature and the viewport region (i.e., the closest edge of the viewport region), and (B) the width of the viewport skirt region, as explained above with reference to FIG. 13. In the above equation, C and D are values that are selected so that SAF equals its minimum value, MinScore, when X is equal to 1 (i.e., when the geographical feature is in the outermost portion of the skirt region, and is equal to its maximum value, 1, when X is equal to zero (i.e., when the geographical feature intersects or is adjacent the line or boundary between the viewport region and the viewport skirt region). Solving for C and D in accordance with the constraints stated above, the equation for SAF becomes:
When K=3, e−K is approximately equal to 0.5, and 1−e−K is approximately equal to 0.95. When MinScore=0.2 and K=3, SAF is approximately equal to 0.158+0.842*e−3X for geographic features that intersect the viewport skirt region (but do not intersect the viewport region). Note that SAF, according to this equation is equal to 1.0 when X=0, and is approximately equal to 0.2 when X=1. As noted above, SAF is equal to 1 for geographic features that intersect the viewport region, and is equal to MinScore (e.g., 0.2) for geographic features that intersect neither the viewport region nor the viewport skirt region. In other embodiments, MinScore is a value between 0.1 and 0.5, and K is a value between 2 and 10. FIG. 15 illustrates an exemplary graph of the SAF versus X.
Universal Score for Location Search Queries
Presently, a score generated by a map search engine as described above is not scaled and/or normalized in a way that would facilitate meaningful comparison with a score generated from another type of search engine (e.g., a web search engine that performs a general web search, a reviews search engine that search reviews of products and/or services, a time search engine that retrieves a time at a given time zone, a news search engine that searches news articles, etc.) because the results of the map search engine are relative to documents retrieved by the map search engine. Thus, some embodiments provide methods and systems for calculating a universal score for a map search engine that can be compared to scores generated by other types of search engines as described below.
FIG. 16 is a block diagram of a search engine system 1600 according to some embodiments. One or more client computers or devices 1602 (hereinafter “clients”) and a server 1606 are connected to a communication network 1604.
The server 1606 (also sometimes called a search engine system or cluster) may include a query server 1620 (sometimes called the “web server”), a web database search engine 1624 and one or more search engines 1622. In some embodiments, the web database search engine 1624 is also known as a primary search engine and the one or more search engines 1622 are also known as secondary search engines. Note that the query server 1620 can correspond to the query server 716 in FIG. 7.
A web interface (also called the “front end server”) 1608 facilitates communication between the server 1606 and the communication network 1604. The web interface 1608 allows for the transfer of information from the server 1606 to the communication network 1604 to be displayed on a client application 1612 of a client 1602. The web database search engine 1624 receives search queries from the query server 1620 and sends web results to the query server 1620. In some embodiments, there are multiple query servers 1620 and search engine servers 1606 (only one is shown in FIG. 16), and it is the job of the front end server (web interface) 1608 to direct incoming queries to one query servers 1620.
The web database search engine 1624 includes a web database 1626 (sometimes herein called an Internet database), which stores information associated with information available on the World Wide Web. The one or more search engines 1622 also receive search queries from the query server 1620 and sends results (if any) to the query server 1620. Each of the one or more search engines 1622 includes a database 1610, which stores information associated with a respective search engine 1622. For example, the databases 1610 can include information about time zones, reviews for products and/or services, news, etc. The databases 1610 may be known as secondary databases. Results from the web database search engine 1624 and the one or more search engines 1622 are combined to produce results to a user. The results can be combined in a number of ways. For example, the top result(s) from one or more of the search engines 1622 can be presented to the user in addition to one or more results from the web database search engine 1624. For example, a single result that is the highest scoring result from the search engines 1622 can be presented to the user in addition to one or more results from the web database search engine 1624. Other combinations of search results will be apparent to one of ordinary skill in the art.
The client 1602 may be any of a number of devices (e.g., a computer, an internet kiosk, a personal digital assistant, a cell phone, a desktop computer, or a laptop computer) and can include a client application 1612 that permits a user to view web page 114 or other documents or information. Note that clients 1602 can correspond to any of the clients 710 in FIG. 7. The client application 1612 may be a software application that permits a user to interact with the client 1602 and/or network resources to perform one or more tasks. For example, the client application 1612 may be a web browser (e.g., Firefox (trademark of Mozilla Foundation), Internet Explorer (trademark of Microsoft Corporation) or Safari (trademark of Apple Inc.)) or other type of application that permits a user to search for, browse, and/or use resources, such as one or more web pages 1614, on the client 1602 and/or accessible via the communication network 1604.
The communication network 1604 may be a local area network (LAN), a metropolitan area network, a wide area network (WAN), such as an intranet, an extranet, or the Internet, or any combination of such networks. It is sufficient that the communication network 1604 provides communication capability between the clients 1602 and the server 1606. In some embodiments, the communication network 1604 uses the HyperText Transport Protocol (HTTP) to transport information using the Transmission Control Protocol/Internet Protocol (TCP/IP). The HTTP permits client computers to access various resources available via the communication network 1604. The various embodiments of the invention, however, are not limited to the use of any particular protocol. The term “resource” as used throughout this specification refers to any document, object, information item, set of information, or service that is accessible via a Uniform Resource Locator (URL) and can be, for example, a web page, a text or word processing document, a database, an image, a search engine or service, or a computational object.
FIG. 17 is a flow diagram illustrating an embodiment of calculating a universal score for a location search query. Note that FIG. 17 expands on steps 118A and 118B in FIG. 1. In some embodiments, a client (e.g., any one of the clients 1602 in FIG. 16) sends a search query to a web interface or application server (e.g., web interface 1608 in FIG. 16) which then directs the search query to a query server (e.g., the query server 1620 in FIG. 16). The search query can include location search terms (e.g., a full or partial address or landmark), non-location search terms (e.g., “Marilyn Monroe”), or a combination of location and non-location search terms (e.g., “pizza in New York City”). The query server can then process the query as described with reference to FIG. 1 (e.g., operations 112-116), and dispatch the processed search query to one or more servers (e.g., search engines 1622). For example, the search query can be received at a map search engine 1704. As illustrated in FIG. 17, the search query is a location search query 1702. In some embodiments, the location search query 1702 can be a search query that is processed as described in FIG. 1 (e.g., operations 112-116). In some embodiments, the location search query 1702 is the unprocessed search query received from a client.
The map search engine 1704 identifies one or more documents from the geographic feature documents database 1706 which match the search terms and/or keywords in the location search query 1702 as described in FIGS. 3 and 7 above. Note that the geographic feature documents database 1706 can correspond to the geographic feature documents database 722 in FIG. 7.
In some embodiments, one or more documents are then scored (118B). The various scores are described in more detail below.
In some embodiments, a standalone support score 1714 for a given identified geographic feature document can be determined based on the geographic feature of the identified geographic feature documents, one or more elements of the location search query 1702, and information from a standalone database 1708. The standalone database 1708 can include information, such as a score, based on one or more of: a level of confidence that a name is associated with a geographic feature, a strength of an association of the name with a geographic feature, and a uniqueness of the name in identifying a geographic feature. In some embodiments, the score can be based on a total number of web documents (e.g., web documents 1712) which include both the name of a geographic feature used in the location search query 1702 (e.g., one or more elements of the location search query 1702) and the geographic feature from the identified geographic feature document. In some embodiments, the standalone support score 1714 for a given identified geographic feature document can represent a probability that a user desires information about a feature X when the user submits a name Y in a location search query. For example, the name “Paris” can be associated with the following geographic features with exemplary numbers of pages that include the name/geographic feature pair: (“Paris, France”, 80,000,000), (“Paris, Tex.”, 23,000,000), (“Paris, Ohio”, 5,000,000), and (“Paris, USA”, 4,000,000). In some embodiments, the standalone support score 1714 for a given geographic feature is based on a ratio of the number of pages that include the given geographic feature (e.g., “Paris, France”) and the total number of pages that include the name (e.g., “Paris”). Furthermore, standalone support score 1714 can be normalized (e.g., to a specified range, etc.). In some embodiments, a given geographic feature included in a given web document is determined by analyzing other geographic features included in the given web document. For example, a web document may include the word “Paris” as well as the words such as “France”, “Europe”, “Eiffel Tower”, “Champs Elysees”, etc., which can indicate that the given geographic feature included in the given web document is related to “Paris, France”. In some embodiments, the scores can also be based on query logs (e.g., logs 1710). For example, consider a user who searches for “Paris” and receives “Paris, Tex.” from the map search engine 1704. In response, if the user next searches for “Paris, France”, it is likely that the name “Paris” should be associated with “Paris, France” instead of “Paris, Tex.”. Thus, a score can be generated based in part on the number of users who subsequently changed the search query. In some embodiments, the standalone database 1708 is generated prior to receiving the location search query 1702. For example, the standalone database 1708 can be generated during an indexing/crawling operation which is separate and distinct to the search operation.
In some embodiments, the standalone support score 1714 can be determined from at least the information from the standalone database 1708. The standalone database 1708 can include information that indicates one or more of: a level of confidence that one or more elements of the location search query 1702 are associated with a geographic feature of the identified geographic feature document, the strength of an association of one or more elements of the location search query 1702 with a geographic feature of the identified geographic feature document, and the uniqueness of the one or more elements of the location search query 1702 in identifying a geographic feature of the identified geographic feature document. For example, if the location search query 1702 is “Paris,” a geographic feature document for “Paris, France” may have a high standalone support score, whereas a geographic feature document for “Paris, Tex.” may have a low standalone support score because users typically refer to “Paris, France” when referring to “Paris”.
The standalone support score 1714 can be determined for single elements and/or multiple elements in the location search query 1702. For example, for the location search query “1st Street San Francisco Calif.”, a standalone support score can be determined for single elements (e.g., “1st Street”, “San Francisco”, “CA”) and/or multiple elements (e.g., “1st Street San Francisco”, “1st Street CA”, “San Francisco Calif.”, “1st Street San Francisco Calif.”). In some embodiments, if multiple elements exist for the location search query 1702, only the pairwise combination of elements is considered. The pairwise standalone support scores can be combined to produce a single standalone support score (e.g., the standalone support score 1714) by using the following function:
where Si is the standalone score of the pairwise elements. In some embodiments, if multiple elements exist for the location search query 1702, a specified function (e.g., a summation, an average, etc.) of the standalone score of each element from the location search query 1702 that is found in the matched geographic feature document can be used to determine the standalone support score 1714. For example, for the location search query “1st Street San Francisco Calif.”, a geographic feature document may include the geographic feature “1st Street” “San Francisco”. “1st Street” is not “standalone” (i.e., has a low standalone support score for this geographic feature document) but “San Francisco” is standalone (i.e., has a high support score for this geographic feature document).
In some embodiments, a template support score 1716 indicates one or more of: the extent that the elements of the location search query 1702 satisfy an address template, the compatibility of the elements of the location search query 1702 with each other (e.g., a county element may also require a city element), and an ordering of the elements of the location search query 1702 with respect to each other. The template support score 1716 for an identified geographic feature document can be determined based on the geographic feature of the identified geographic feature document, one or more elements of the location search query 1702, and information from a standalone database 1708. For example, consider a location search query “1st Street New York”. The map search engine 1704 may identify one or more geographic feature documents. For example, the following geographic feature documents can be identified:
-
- Document 1: “1st Street” “New York” “New York”
- Document 2: “1st Street” “Newburgh” “New York”
- Document 3: “1st” “New York Street” “Leeds” “UK”
- Document 4: “1st Street” “New York” “California”
In some embodiments, the template support score 1716 is boosted based on the type of element matched in the geographic feature document. For example, if the matched element in the geographic feature document is a city or a postal code, the template support score 1716 for the geographic feature document receives a large specified boost (e.g., 0.5). Note that if the matched element in the geographic feature document is a “near” feature, the template support score 1716 may be boosted by a smaller amount (e.g., 0.4) than the large specified boost for a matched city or zip code. In contrast, if the matched element in the geographic feature document is a state or a country, the template support score 1716 for the geographic feature document receives a small boost (e.g., 0.2). The geographic features matched in Document 1 are “1st Street” (a street) “New York” (a city). Since “New York” is matched as a city in Document 1, Document 1 receives a large boost (e.g., 0.5) to the template support score 1716. The geographic features matched in Document 2 are “1st Street” (a street) and “New York” (a state). Since “New York” matched as a state in Document 2, Document 2 receives a small boost (e.g., 0.2) to the template support score 1716 because only a state was matched. The geographic features matched in Document 3 are “1st” and “New York Street” (a street). Since Document 3 only matches a street, the template support score 1716 does not receive a boost. The geographic features matched in Document 4 are “1st Street” (a street) and “New York” (a city). Since “New York” is matched as a city in Document 4, Document 4 receives a large boost (e.g., 0.5) to the template support score 1716. The template support score 1716 can also be affected by other factors, which may increase or decrease the template support score 1716 (e.g., standaloneness of the matched elements and/or penalties), as discussed below.
In some embodiments, the template support score 1716 is boosted by a specified amount if a matched element is standalone, as described above with respect to the standalone support score 1714 above. In some embodiments, the template support score 1716 is reduced by a specified amount if a matched element is not standalone. Thus, using the example from above, the template support scores 1716 for Documents 2, 3, and 4 may be reduced by a specified amount because none of the matched geographic features are standalone. In contrast, the template support score 1716 for Document 1 may be increased by a specified amount because the matched geographic feature “New York” city is standalone.
Penalties 1718 can include one or more specified reductions to the template support score 1716 and/or to the standalone support score 1714. For example, the template support score 1716 can be reduced based on one or more violations of a specified set of rules. The specified set of rules can include, but are not limited to: a rule for determining whether the location search query includes a country element (e.g., determined from the domain of the user performing the query, the center of the viewport, the location search query, etc.) that does not correspond to a country element of the geographic feature in the geographic feature document (e.g., if the determined country is the United States or Germany, a penalty is applied to the geographic feature document for “Paris, France”), a rule for determining whether the elements of the location search query are assigned to address elements of the geographic feature document so that a county/state element of the geographic feature document is matched but a city element of the geographic feature document is not matched (e.g., an element in the location search query is assigned to a county element in the geographic feature document but an element in the location search query is not assigned to a city element in the geographic feature document), and a rule for determining whether an ordering of elements in location search query does not match the address template (e.g., for an address within the United States, a template support score may be reduced if the location search query includes a street name, followed by a city name, followed by a street number—because the street number should precede the street name).
In some embodiments, the address template can correspond to a geographic feature identified by the geographic feature document. For example, if the geographic feature in a geographic feature document is “1st Street” “San Francisco” “USA”, the address template can be an address template for addresses within the United States. On the other hand, if the geographic feature in a geographic feature document is “rue de l'universite” “Paris” “France”, the address template can be an address template for addresses within France. The location search query 1702 can then be compared to the address template to determine whether the location search query 1702 corresponds to a format specified in the address template. For example, if the location search query 1702 is “12 mullerstrasse”, a number of geographic feature documents can be retrieved, including a geographic feature document for a geographic feature located in Germany. When generating the template support score 1716 for the geographic feature document for the geographic feature located in Germany, an address template for addresses within Germany is used. The location search query 1702 can then be compared to the German address template. Since German addresses list street names before the street number, the location search query 1702 “12 mullerstrasse” does not correspond to the format specified in the German address template. Thus, the template support score 1716 for the geographic feature document in this example is penalized (e.g., reduced by a specified amount).
In some embodiments, the template support score 1716 can be calculated by assigning elements of the location search query to address elements of the geographic feature document, comparing the assignment of the elements of the location search query to the address elements of the geographic feature document with an address template selected in accordance with one or more elements of the location search query, wherein the selected address template is one of a plurality of address templates, each corresponding to a particular geographic region, and calculating the template support 1716 based on the comparison. For example, consider a case in which the location search query 1702 is “1st St New York” and the geographic feature document includes a geographic feature “1st Street” (a street) “New York” (a city) “New York” (a state) “US” (a country). The elements of the location search query 1702 can be assigned in a number of ways. For example, in one such assignment, the elements “New” and York” can be assigned to as “New” (a city) “York” (a state). In another assignment, the elements “New” and “York” can be assigned as “New York” (a state). In another assignment, the elements “New” and “York” can be assigned as “New York” (a city). In some embodiments, a subset of the possible assignments is scored and the highest scoring assignment is used as the template support score 1716. In some embodiments, a subset of the possible assignments is scored and the sum of these scores are used as the template support score 1716. The comparing operation can include comparing the assignment of elements in the location search query to the address elements of the geographic feature document with the address template, and/or comparing an ordering of the elements in the address template with an ordering of the elements in the location search query, as described above.
In some embodiments, the template support score 1716 is normalized so that the range of values for the template support score 1716 is between 0 and 1. In some embodiments, a function which reduces an initial range of values for the template support score to the range between 0 and 1 is used. For example, small values can be increased (e.g., 0.2 becomes 0.3) whereas large values are decreased (e.g., 1.5 becomes 0.8). (The value produced by the normalization function is the normalized template support score 1716.)
In some embodiments, an address support score 1720 is a combination of the standalone support score 1714 and the template support score 1716. Furthermore, the penalties 1718 can be applied to the address support score to reduce the standalone support score 1714 and/or the template support score 1716.
In some embodiments, a viewport support score 1722 corresponds to a proximity of the geographic feature corresponding to the identified geographic feature document to a current geographic viewport region 1730 of a client system. In some embodiments, the viewport support score for the identified geographic feature document is calculated by: determining a zoom level of the geographic viewport region of the client system; and calculating the viewport score based on the determined zoom level. The zoom level can be specified as an angular size of an arc, measured with respect to the center of the Earth, that includes the geographic viewport region (see discussion of FIGS. 11-13 above).
In some embodiments, if the viewport is at a city zoom level, a geographic feature document which corresponds to a geographic feature within the city receives a high viewport support score (e.g., 1.0). A geographic feature document which corresponds to a geographic feature within the viewport skirt region receives a lower viewport support score (e.g., 0.9). A geographic feature document which corresponds to a geographic feature which is outside of the viewport skirt region receives a low viewport support score (e.g., 0.0).
In some embodiments, if the viewport is at a zoom level that is more zoomed-in than a city zoom level (e.g., street zoom level), a geographic feature document which corresponds to a geographic feature within the city also receives a high viewport support score (e.g., 1.0). The rationale for this type of scoring is that a user would typically accept results within the city that the street is a part of. The viewport support score of geographic feature documents that correspond to geographic features outside of the current geographic viewport region 1730 can be determined as described above with respect to the city zoom level.
In some embodiments, if no viewport is defined, the viewport support score 1722 for all matched geographic feature documents is set to a default score. For example, the default score can be 0.5 for all matched geographic feature documents.
In some embodiments, if the viewport is zoomed out to a large area (e.g., a country zoom level), a geographic feature document which corresponds to a geographic feature within the viewport region receives a viewport support score that is slightly larger than the default score (e.g., 0.6), while a geographic feature document which corresponds to a geographic feature outside of the viewport region receives a viewport support score that is slightly smaller than the default score (e.g., 0.4). The rationale for this type of scoring is a matched geographic feature document which corresponds to a geographic feature within the viewport region should produce some support. However, the support should not be determinative. For example, if the location search query 1702 is “Wall Street” and the viewport region includes the United Kingdom, a matched geographic feature document which corresponds to “Wall Street” “Camelon” “UK” should receive some support (e.g., 0.6). However, due to the large viewport area, a matched geographic feature document which corresponds to “Wall Street” “New York” (or some other geographic feature far—thousands of miles—outside of the geographic viewport region) should also receive some support (e.g., 0.4). (Note that although the viewport score for “Wall Street” “Camelon” “UK” is higher in this example, when the viewport support score is combined with the address support score and/or the standalone support score, “Wall Street” “New York” may produce a higher overall score than “Wall Street” “Camelon” “UK”.) However, if the viewport region includes the city Camelon, UK, then “Wall Street” “Camelon” “UK” would have a strong viewport support score (e.g., 1.0).
In some embodiments, if the viewport zoom level is between a large area and a city zoom level, the viewport support score 1722 is interpolated.
In some embodiments, the viewport score attenuation factor (SAF) described above with reference to FIG. 15 is used to calculate the viewport support score 1722. For example, the viewport support score 1722 for a matched geographic feature document is calculated as:
ViewportSupportScore=0.5+strength*rescaled_SAF
where “strength” is the strength of the viewport and “rescaled_SAF” is a rescaled version of the SAF. Note that this exemplary viewport support score function produces a viewport support score that is between 0 and 1. The SAF can be rescaled so that the rescaled SAF has a range between −0.5 and 0.5. The “strength” of the viewport can be calculated as:
Strength=e −A*viewport — cap — angle
where “viewport_cap_angle” is the viewport angle capped between a specified range and A is a constant (e.g., 10). For example, the viewport angle can be capped between a maximum zoomed-in level (e.g., 1 km) and a quarter of the Earth. Thus, the strength of the viewport is 1.0 when the viewport zoom level is at the city zoom level and the strength of the viewport is 0.0 when the viewport zoom level is large (e.g., a continent zoom level). FIG. 18 depicts a graph of an exemplary strength function used to determine a viewport strength 1800 in accordance with the location of a geographic feature relative to a current viewport region. As illustrated in FIG. 18, the viewport strength is 1.0 for small viewport cap angles such as viewport cap angle 1802. The viewport strength is 0.0 for large viewport cap angles such as viewport cap angle 1804.
FIG. 19 depicts a graph of a function used to determine a viewport support score 1900 in accordance with the location of a geographic feature relative to a current viewport region. As illustrated in FIG. 19, a viewport region 1902 is set so that the viewport zoom level is 1 km. Since the viewport zoom level is 1 km, the strength of the viewport is 1.0 using the equations above. As a result, the viewport support score for geographic feature documents which have corresponding geographic features within the viewport region is 1.0. The viewport support score for geographic feature documents which have corresponding geographic features outside of the viewport region decays exponentially from 1.0 as described above.
FIG. 20 depicts a graph of a function used to determine a viewport support score 2000 in accordance with the location of a geographic feature relative to a current viewport region. As illustrated in FIG. 20, a viewport region 2002 is set so that the viewport zoom level is 1000 km. Since the viewport zoom level is 1000 km, the strength of the viewport is substantially lower than the city zoom level illustrated in FIG. 19. For example, the strength of the viewport can be 0.2. As a result, the viewport support score for geographic feature documents which have corresponding geographic features within the viewport region is 0.6. The viewport support score for geographic feature documents which have corresponding geographic features outside of the viewport region decays exponentially from 0.6 to 0.4 as described above.
Returning to FIG. 17, in some embodiments, a support score 1724 is calculated by combining the address support score 1720 and the viewport support score 1722. In some embodiments, the support score 1724 is calculated using a decision tree. For example, if the viewport support score 1722 is high (e.g., >0.7), the address support score 1720 and the viewport support score 1722 are combined to produce the support score 1720 as follows:
max(address_support_score, A*viewport_support_score+B*address_support_score)
where A and B are constant scaling factors where A>B. For example, A can be 0.8 and B can be 0.2. If the viewport support score 1722 is not significant (e.g., in the range 0.3 to 0.7), the equation above can be used and A and B can be selected so that A<B. For example, A can be 0.2 and B can be 0.8. If the address support score 1720 is a maximum (e.g., 1.0), the support score 1724 is the address support score 1720. In other words, for a perfect address support score 1720, the viewport support score 1722 is ignored because the address is completely specified.
Note that other combining functions can be used, including, but not limited to, a multiplication function, a function based on a decision tree, a piecewise linear function, a parametric function, and a non-linear function.
In some embodiments, a matching score 1726 indicates a relevancy of tokens corresponding to the respective identified geographic feature document with respect to the elements of the location search query. In some embodiments, the matching score 1726 can be determined using the following function:
where IRi is a query match score (with respect to a particular candidate document) corresponding to a respective term or element “i” in the canonical and/or Boolean expression, E is a normalization value, and the exponent M is a value greater than or equal to one (e.g., 2, 2.5 or 3), and is typically between one and five (1≦M≦5), as described above. The normalization factor E can be selected so that the matching score 1726 is between 0 and 1. In some embodiments, the matching score 1726 can be determined using the following function:
In some embodiments, the MUS score 1728 is computed by combining the support score 1724 and the matching score 1726. In some embodiments, the MUS score 1728 is calculated by multiplying the support score 1724 and the matching score 1726. In some embodiments, other combining functions can be used, including, but not limited to, a multiplication function, a function based on a decision tree, a piecewise linear function, a parametric function, and a non-linear function. In some embodiments, the resulting MUS score 1728 is a universal score that is scaled and/or normalized (as described above) to facilitate meaningful comparison with the scores generated for search results produced by one or more other search engines.
The matched geographic feature documents and the corresponding MUS scores 1728 for the matched geographic feature documents are used to rank the matched geographic feature documents (118C). The N (wherein N is a positive integer) highest ranked matching documents are then identified (118D). In some embodiments, at least one geographic feature corresponding to at least one of the ranked geographic feature documents is provided to the user.
The aforementioned methods, as well as corresponding data structures and graphical user interfaces may be included in and/or performed by a search engine system having one or more central processing units, a memory in one or more computers, and one or more programs stored in the memory and executed by the one or more central processing units.
The foregoing descriptions of specific embodiments of the present invention are presented for purposes of illustration and description. They are not intended to be exhaustive or to limit the invention to the precise forms disclosed. Rather, it should be appreciated that many modifications and variations are possible in view of the above teachings. The embodiments were chosen and described in order to best explain the principles of the invention and its practical applications, to thereby enable others skilled in the art to best utilize the invention and various embodiments with various modifications as are suited to the particular use contemplated.