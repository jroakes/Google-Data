US20230090175A1 - Contextual situation analysis - Google Patents
Contextual situation analysis Download PDFInfo
- Publication number
- US20230090175A1 US20230090175A1 US18/070,338 US202218070338A US2023090175A1 US 20230090175 A1 US20230090175 A1 US 20230090175A1 US 202218070338 A US202218070338 A US 202218070338A US 2023090175 A1 US2023090175 A1 US 2023090175A1
- Authority
- US
- United States
- Prior art keywords
- contextual
- conditions
- contextual situation
- decision tree
- context update
- Prior art date
- Legal status (The legal status is an assumption and is not a legal conclusion. Google has not performed a legal analysis and makes no representation as to the accuracy of the status listed.)
- Pending
Links
- 238000003066 decision tree Methods 0.000 claims abstract description 75
- 230000009471 action Effects 0.000 claims abstract description 33
- 238000000034 method Methods 0.000 claims description 67
- 238000011156 evaluation Methods 0.000 claims description 50
- 238000012545 processing Methods 0.000 claims description 40
- 230000006870 function Effects 0.000 claims description 38
- 230000015654 memory Effects 0.000 claims description 21
- 230000008569 process Effects 0.000 description 13
- 230000000694 effects Effects 0.000 description 8
- 238000010586 diagram Methods 0.000 description 7
- 230000008859 change Effects 0.000 description 6
- 230000003287 optical effect Effects 0.000 description 3
- 230000003190 augmentative effect Effects 0.000 description 2
- 230000008901 benefit Effects 0.000 description 2
- 230000006835 compression Effects 0.000 description 2
- 238000007906 compression Methods 0.000 description 2
- 238000004590 computer program Methods 0.000 description 2
- 238000013500 data storage Methods 0.000 description 2
- 238000013461 design Methods 0.000 description 2
- 238000009826 distribution Methods 0.000 description 2
- 230000003993 interaction Effects 0.000 description 2
- 230000033001 locomotion Effects 0.000 description 2
- 238000004088 simulation Methods 0.000 description 2
- 230000003068 static effect Effects 0.000 description 2
- 239000000126 substance Substances 0.000 description 2
- 230000006399 behavior Effects 0.000 description 1
- 230000005540 biological transmission Effects 0.000 description 1
- 230000001413 cellular effect Effects 0.000 description 1
- 238000004891 communication Methods 0.000 description 1
- 235000014510 cooky Nutrition 0.000 description 1
- 230000001419 dependent effect Effects 0.000 description 1
- 230000037406 food intake Effects 0.000 description 1
- 230000007274 generation of a signal involved in cell-cell signaling Effects 0.000 description 1
- 239000004973 liquid crystal related substance Substances 0.000 description 1
- 230000007774 longterm Effects 0.000 description 1
- 230000007246 mechanism Effects 0.000 description 1
- 230000004048 modification Effects 0.000 description 1
- 238000012986 modification Methods 0.000 description 1
- 230000001737 promoting effect Effects 0.000 description 1
- 230000009467 reduction Effects 0.000 description 1
- 230000001360 synchronised effect Effects 0.000 description 1
- 230000007704 transition Effects 0.000 description 1
Images
Classifications
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06N—COMPUTING ARRANGEMENTS BASED ON SPECIFIC COMPUTATIONAL MODELS
- G06N5/00—Computing arrangements using knowledge-based models
- G06N5/04—Inference or reasoning models
- G06N5/045—Explanation of inference; Explainable artificial intelligence [XAI]; Interpretable artificial intelligence
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06N—COMPUTING ARRANGEMENTS BASED ON SPECIFIC COMPUTATIONAL MODELS
- G06N5/00—Computing arrangements using knowledge-based models
- G06N5/01—Dynamic search techniques; Heuristics; Dynamic trees; Branch-and-bound
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F16/00—Information retrieval; Database structures therefor; File system structures therefor
- G06F16/90—Details of database functions independent of the retrieved data types
- G06F16/901—Indexing; Data structures therefor; Storage structures
- G06F16/9027—Trees
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F8/00—Arrangements for software engineering
- G06F8/10—Requirements analysis; Specification techniques
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F8/00—Arrangements for software engineering
- G06F8/40—Transformation of program code
- G06F8/41—Compilation
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06N—COMPUTING ARRANGEMENTS BASED ON SPECIFIC COMPUTATIONAL MODELS
- G06N5/00—Computing arrangements using knowledge-based models
- G06N5/04—Inference or reasoning models
- G06N5/046—Forward inferencing; Production systems
- G06N5/047—Pattern matching networks; Rete networks
Definitions
- This disclosure relates to the field of contextual situation analysis.
- a processor receives inputs (eg from cameras and/or radar) relating to the position and movement of other vehicles or people, and is required to make decisions such as whether to cause the vehicle to slow down, make an emergency stop, change direction etc.
- inputs eg from cameras and/or radar
- decisions such as whether to cause the vehicle to slow down, make an emergency stop, change direction etc.
- the most appropriate decision for the processor to make when it receives a particular input is likely to depend not only on that input but on the circumstances (or context) of the situation in which the input occurs. For example, if a pedestrian steps into the road it may be appropriate for the processor to instruct the vehicle to slow down or stop and/or change direction.
- the processor does not need to take any further action. That is, the processor is required to evaluate both the input and the context in which the input occurs in order to decide how, or whether, the vehicle should react.
- contextual situation analysis is not limited to the field of autonomous vehicles but occurs in other fields.
- a method includes receiving, by a compiler, source code including multiple rules. Each of the multiple of rules includes one or more of multiple conditions and is associated with one of multiple contextual situations. The method also generates, using the source code, a decision tree for the multiple rules. Generating the decision tree includes minimizing a number of the multiple conditions to be evaluated to determine whether a particular rule of the multiple rules has been satisfied. The method also generates a callable function that implements the decision tree. The callable function helps identify at least one of the multiple contextual situations that corresponds to a state of an application interacted with by a user.
- the method for generating the decision tree for the multiple rules includes determining a condition from the multiple conditions as a root node of the decision tree. The determined condition optimizes a number of the multiple conditions that are eliminated from subsequent evaluations.
- the method for generating the decision tree for the multiple rules includes organizing the decision tree with multiple nodes that are associated with multiple conditions.
- the multiple nodes are organized so that a condition of the multiple conditions having an outcome that is implied by an outcome of an evaluation of a previous node is not subsequently evaluated.
- the source code is a domain-specific language that allows a satisfaction of a subset of conditions of the multiple conditions to be implied from a satisfaction of other conditions of the multiple conditions.
- conditions for a particular rule of the multiple rules are related by a logical conjunction, and the each of the conditions includes a feature compared to a constant using a comparison operator.
- the method of determining the condition from the multiple conditions as the root node of the decision tree includes for each condition of the plurality of conditions evaluating a condition of the multiple conditions as true to determine a first number of conditions where an outcome is implied in view of an evaluation of the condition as true.
- the method also includes evaluating the condition of the multiple conditions as false to determine a second number of conditions where the outcome is implied in view of an evaluation of the condition as false.
- the method also includes determining a condition from the multiple conditions to be the root node based on the first number and the second number.
- a method receives a first context update for an application. The method determines whether one or more of multiple rules has been satisfied in view of the first context update.
- the multiple rules include a multiple conditions and are associated with multiple contextual situations. The determining includes minimizing a number of the multiple conditions to be evaluated to determine whether a particular rule of the multiple rules has been satisfied.
- the method responsive to determining a first rule of the multiple rules has been satisfied, identifies a first contextual situation of the multiple contextual situations that is associated with the first rule.
- the method also determines at least one action that is associated with the first contextual situation.
- the method further causes performance of a first action of the at least one actions determined for the application.
- determining an action may for example comprise a processor of the autonomous vehicle determining that the vehicle needs to change direction and/or brake—causing performance of a first action of the at least one determined actions may comprise the processor instructing the braking system of the vehicle to apply the brakes and/or instructing the steering system of the vehicle to change the vehicle's direction of travel.
- the at least one action may be a playlist of media items that is associated with the first contextual situation, and the first action may be playback of a first media item of the playlist of media items to accompany the first contextual situation identified for the application.
- the method includes receiving a second context update for the application.
- the method also includes determining whether one or more of the multiple rules has been satisfied in view of the second context update.
- the method responsive to determining a second rule of the multiple rules has been satisfied in view of the second context update, identifies a second contextual situation of the multiple contextual situations that is associated with the second rule.
- the method includes determining at least one other action for the second contextual situation associated with the second rule.
- the method of determining whether one or more of the multiple rules has been satisfied in view of the first context update includes applying a data set associated with the first context update to a callable function that implements a decision tree.
- the parameters of multiple features identified by the data set are compared to conditions of the multiple conditions that are associated with multiple nodes of the decision tree.
- the method of determining whether one or more of the multiple rules has been satisfied in view of the first context update includes keeping a record of conditions of the multiple conditions that have outcomes that are explicitly and implicitly determined from evaluated nodes of the multiple nodes of the decision tree.
- the method of determining whether one or more of the multiple rules has been satisfied in view of the first context update includes determining an initial condition of the multiple conditions to evaluate by determining a root node of the multiple nodes of the decision tree.
- the root node indicates a feature and a condition associated with the feature.
- the method also includes evaluating the initial condition identified by the root node in view of the data set of the first context update.
- the method of determining whether one or more of the multiple rules has been satisfied in view of the first context update includes responsive to the evaluation of the initial condition, evaluating a subsequent node of the decision tree where a number of the multiple conditions that have outcomes that are implied by the evaluation of the initial condition are eliminated from subsequent evaluation.
- each of the multiple rules includes one or more conditions of the multiple conditions.
- the one or more conditions for a particular rule of the multiple rules are related by a logical conjunction, and each of the one or more conditions include a feature compared to a constant using a comparison operator.
- the method may be performed by one or more processing devices that control a device (such as an autonomous vehicle based on the contextual situation of the device.
- a device such as an autonomous vehicle based on the contextual situation of the device.
- a further aspect of the present disclosure provides a processor-implemented method of controlling a device or process comprising: generating a callable function according to any implementation described herein; identifying, using the callable function, a contextual situation; and controlling the device or process based on the identified contextual situation.
- controlling the device or process based on the identified contextual situation may comprise determining at least one action to be performed by the device or process based at least on the identified contextual situation and optionally also based on one or more further inputs. It may further comprise the processor controlling or instructing the device or process to implement a first action of the at least one determined actions.
- one or more processing devices for performing the operations of the above described implementations are disclosed.
- a computer-readable storage medium (which may be a non-transitory computer-readable storage medium, although these implementations are not limited to this) stores instructions for performing a method according to any of the described implementations.
- systems for performing a method according to any one of the described implementations are also disclosed.
- the system may comprise a memory; and a processing device, coupled to the memory, that is configured to perform a method according to any one of the described implementations.
- the memory may store computer-readable instructions that, when executed by the processing device, cause the processing device to perform a method according to any one of the described implementations.
- FIG. 1 illustrates an example system architecture, in accordance with one implementation of the disclosure
- FIG. 2 illustrates an example list of rules that can be used by a contextual music application, in accordance with an implementation of the disclosure.
- FIG. 3 is an example system that uses contextual music application, in accordance with implementations of the disclosure.
- FIG. 4 A illustrates generation and use of a decision tree by contextual music application, in accordance with implementations.
- FIG. 4 B illustrates a record used to keep track of whether a particular rule has been satisfied, in accordance with implementations.
- FIG. 5 is a flow diagram illustrating a method for generating a callable function that implements a decision tree, in accordance with some implementations.
- FIG. 6 is a flow diagram illustrating a method for providing a playlist for a current contextual situation associated with an application interacted with by a use, in accordance with some implementations.
- FIG. 7 is a block diagram illustrating an exemplary computer system, according to some implementations.
- Contextual updates that include low-level information (e.g., “a person has stepped into the road”) about the present contextual situation or environment may be monitored to determine if a particular high-level contextual situation (e.g., “need for emergency braking”) is taking place (e.g., based on rules that map low-level information to specific high-level contextual situations).
- Contextual updates may occur frequently (e.g., every 0.25 seconds) and include a large set of information that is evaluated in view of a large set of rules.
- aspects of the present disclosure address the above-mentioned and other challenges by generating a decision tree for evaluating multiple rules used to identify particular contextual situations.
- the decision tree minimizes a number of conditions associated with the rules that are to be evaluated to determine whether a particular rule has been satisfied, and identify a particular contextual situation that corresponds to a current state of an application or environment interacted with by the user/device determined.
- a context update is received by an application.
- the method determines whether one or more of the multiple rules have been satisfied in view of the context update, where the determining minimizes a number of conditions to be evaluated to determine whether a particular rule of the multiple rules has been satisfied.
- the method includes identifying a contextual situation based on determining that a particular rule has been satisfied, and determining one or more actions for the contextual situation.
- aspects of the present disclosure provides a mechanism that minimizes computations involved in evaluating conditions to determine whether a particular rule has been satisfied, determines from the satisfied rule a contextual situation that corresponds to a state of the application or environment, and selects one or more actions for the identified contextual situation.
- aspects of the present disclosure result in reduction of storage and computational (processing) resources, as well as associated resources such as battery power, because reducing the number of conditions (and rules) for evaluation to determine a particular contextual situation is more efficient than evaluating all or a majority of rules to determine a particular situational context.
- reducing the number of conditions (and rules) for evaluation to determine a particular contextual situation reduces the time taken to determine an appropriate action to be taken, and this may, for example, improve the braking/stopping performance of an autonomous vehicle by reducing the time required for the processor of the vehicle to determine that the vehicle needs to stop to avoid a collision.
- the present disclosure provides an improved method of selecting one or more actions for an identified contextual situation, and may be applied in many fields.
- a user may be interacting with an online gaming system where the contextual situation or environment of the game frequently changes (e.g., from a “peaceful desert environment at night” to “a ride in a spaceship in outer space”).
- contextual updates may occur frequently and significant computational resources and power may be required to frequently perform contextual situation analysis and identify one or more relevant actions for an identified contextual situation, such as determining a playlist for a contextual situation.
- the term “playlist” or “media playlist” may be a list or an order or a grouping of different media items that can be viewed or displayed or played back in sequential or shuffled order with or without interaction from a user.
- FIG. 1 illustrates an example system architecture 100 , in accordance with one implementation of the disclosure.
- the system architecture 100 includes client devices 110 A through 110 Z, a network 105 , a data store 106 , a content sharing platform 120 , an application platform 143 , a collaboration platform 145 , and a contextual music platform 141 .
- network 105 may include a public network (e.g., the Internet), a private network (e.g., a local area network (LAN) or wide area network (WAN)), a wired network (e.g., Ethernet network), a wireless network (e.g., an 802.11 network or a Wi-Fi network), a cellular network (e.g., a Long Term Evolution (LTE) network), routers, hubs, switches, server computers, and/or a combination thereof.
- a public network e.g., the Internet
- a private network e.g., a local area network (LAN) or wide area network (WAN)
- a wired network e.g., Ethernet network
- a wireless network e.g., an 802.11 network or a Wi-Fi network
- a cellular network e.g., a Long Term Evolution (LTE) network
- the data store 106 may be a memory (e.g., random access memory), a cache, a drive (e.g., a hard drive), a flash drive, a database system, or another type of component or device capable of storing data.
- the data store 106 may also include multiple storage components (e.g., multiple drives or multiple databases) that may also span multiple computing devices (e.g., multiple server computers).
- data store 106 stores media items, such as video items.
- the client devices 110 A through 110 Z may each include computing devices such as personal computers (PCs), laptops, mobile phones, smart phones, tablet computers, netbook computers, network-connected televisions, etc. In some implementations, client devices 110 A through 110 Z may also be referred to as “user devices.” Each client device includes a media viewer 111 .
- the media viewers 111 may be applications that allow users to view or upload content, such as images, video items, web pages, documents, etc.
- the media viewer 111 may be a web browser that can access, retrieve, present, and/or navigate content (e.g., web pages such as Hyper Text Markup Language (HTML) pages, digital media items, etc.) served by a web server.
- HTML Hyper Text Markup Language
- the media viewer 111 may render, display, and/or present the content (e.g., a web page, a media viewer) to a user.
- the media viewer 111 may also include an embedded media player (e.g., a Flash® player or an HTML5 player) that is embedded in a web page (e.g., a web page that may provide information about a product sold by an online merchant).
- an embedded media player e.g., a Flash® player or an HTML5 player
- a web page e.g., a web page that may provide information about a product sold by an online merchant.
- the media viewer 111 may be a standalone application (e.g., a mobile application or app) that allows users to view digital media items (e.g., digital video items, digital images, electronic books, etc.).
- the media viewer 111 may be a content sharing platform application for users to record, edit, and/or upload content for sharing on the content sharing platform.
- the media viewers 111 may be provided to the client devices 110 A through 110 Z by the contextual music platform 141 and/or content sharing platform 120 .
- the media viewers 111 may be embedded media players that are embedded in web pages provided by the content sharing platform 120 .
- the media viewers 111 may be applications that are downloaded from the contextual music platform 141 .
- functions described in one implementation as being performed by the content sharing platform 120 can also be performed on the client devices 110 A through 110 Z in other implementations, if appropriate. In other implementations, functions described as being performed by a particular component may be performed by an alternative component. In addition, the functionality attributed to a particular component can be performed by different or multiple components operating together.
- the content sharing platform 120 can also be accessed as a service provided to other systems or devices through appropriate application programming interfaces, and thus is not limited to use in websites.
- the content sharing platform 120 may be one or more computing devices (such as a rackmount server, a router computer, a server computer, a personal computer, a mainframe computer, a laptop computer, a tablet computer, a desktop computer, etc.), data stores (e.g., hard disks, memories, databases), networks, software components, and/or hardware components that may be used to provide a user with access to media items and/or provide the media items to the user.
- the content sharing platform 120 may allow a user to consume, upload, search for, approve of (“like”), disapprove of (“dislike”), and/or comment on media items.
- the content sharing platform 120 may also include a website (e.g., a webpage) or application back-end software that may be used to provide a user with access to the media items.
- a “user” may be represented as a single individual.
- other implementations of the disclosure encompass a “user” being an entity controlled by a set of users and/or an automated source.
- a set of individual users federated as a community in a social network may be considered a “user”.
- an automated consumer may be an automated ingestion pipeline, such as a topic channel, of the content sharing platform 120 .
- the content sharing platform 120 may include multiple channels (e.g., channels A through Z).
- a channel can be data content available from a common source or data content having a common topic, theme, or substance.
- the data content can be digital content chosen by a user, digital content made available by a user, digital content uploaded by a user, digital content chosen by a content provider, digital content chosen by a broadcaster, etc.
- a channel X can include videos Y and Z.
- a channel can be associated with an owner, who is a user that can perform actions on the channel.
- Different activities can be associated with the channel based on the owner's actions, such as the owner making digital content available on the channel, the owner selecting (e.g., liking) digital content associated with another channel, the owner commenting on digital content associated with another channel, etc.
- the activities associated with the channel can be collected into an activity feed for the channel.
- Users, other than the owner of the channel can subscribe to one or more channels in which they are interested.
- the concept of “subscribing” may also be referred to as “liking”, “following”, “friending”, and so on.
- the user can be presented with information from the channel's activity feed. If a user subscribes to multiple channels, the activity feed for each channel to which the user is subscribed can be combined into a syndicated activity feed. Information from the syndicated activity feed can be presented to the user.
- Channels may have their own feeds. For example, when navigating to a home page of a channel on the content sharing platform, feed items produced by that channel may be shown on the channel home page.
- Users may have a syndicated feed, which is a feed including at least a subset of the content items from all of the channels to which the user is subscribed.
- Syndicated feeds may also include content items from channels that the user is not subscribed. For example, the content sharing platform 120 or other social networks may insert recommended content items into the user's syndicated feed, or may insert content items associated with a related connection of the user in the syndicated feed.
- Each channel may include one or more media items 121 .
- a media item 121 can include, and are not limited to, digital video, digital movies, digital photos, digital music, audio content, melodies, website content, social media updates, electronic books (ebooks), electronic magazines, digital newspapers, digital audio books, electronic journals, web blogs, real simple syndication (RSS) feeds, electronic comic books, software applications, etc.
- media item 121 is also referred to as content or a content item.
- a media item 121 may be consumed via the Internet and/or via a mobile device application.
- a video item is used as an example of a media item 121 throughout this document.
- “media,” media item,” “online media item,” “digital media,” “digital media item,” “content,” and “content item” can include an electronic file that can be executed or loaded using software, firmware or hardware configured to present the digital media item to an entity.
- the content sharing platform 120 may store the media items 121 using the data store 106 .
- the content sharing platform 120 may store video items and/or fingerprints as electronic files in one or more formats using data store 106 .
- the media items are video items.
- a video item is a set of sequential video frames (e.g., image frames) representing a scene in motion. For example, a series of sequential video frames may be captured continuously or later reconstructed to produce animation.
- Video items may be presented in various formats including, but not limited to, analog, digital, two-dimensional and three-dimensional video. Further, video items may include movies, video clips or a set of animated images to be displayed in sequence.
- a video item may be stored as a video file that includes a video component and an audio component.
- the video component may refer to video data in a video coding format or image coding format (e.g., H.264 (MPEG-4 AVC), H.264 MPEG-4 Part 2 , Graphic Interchange Format (GIF), WebP, etc.).
- the audio component may refer to audio data in an audio coding format (e.g., advanced audio coding (AAC), MP3, etc.).
- GIF may be saved as an image file (e.g., .gif file) or saved as a series of images into an animated GIF (e.g., GIF89a format).
- H.264 may be a video coding format that is block-oriented motion-compensation-based video compression standard for recording, compression, or distribution of video content, for example.
- the video items may be consumed primarily for the audio component rather than the video component.
- the media items are audio-only items, such as music items.
- content sharing platform 120 may allow users to create, share, view or use playlists containing media items (e.g., playlist A-Z, containing media items 121 ).
- a playlist refers to a collection of one or more media items that are configured to play one after another in a particular order without user interaction.
- content sharing platform 120 may maintain the playlist on behalf of a user.
- the playlist feature of the content sharing platform 120 allows users to group their favorite media items together in a single location for playback.
- content sharing platform 120 may send a media item on a playlist to client device 110 for playback or display.
- the media viewer 111 may be used to play the media items on a playlist in the order in which the media items are listed on the playlist.
- a user may transition between media items on a playlist.
- a user may wait for the next media item on the playlist to play or may select a particular media item in the playlist for playback.
- contextual music application 140 may select media items from a playlist for playback on client device 110 .
- a playlist may be associated with a particular user or users, or made widely available to users of the content sharing platform 120 .
- content sharing platform 120 may associate the specific user with a playlist using user account information (e.g., a user account identifier such as username and password).
- user account information e.g., a user account identifier such as username and password.
- content sharing platform 120 may associate a playlist with additional information (also referred to as “metadata” or “playlist metadata” herein).
- a playlist may be associated with a title (e.g., Jakob's playlist), information related to the playlist (e.g., when the playlist was created, user account information), additional information regarding the media items of the playlist (e.g., artist information, genre, tempo, a hyperlink (link) to the media item, etc.), or information regarding the electronic messages used to populate the playlist with the media items (e.g., part or all the electronic messages, sentiment identifiers associated with the electronic messages, topics associated with the electronic messages, sender or receiver information related to the electronic messages (such as name of sender), etc.).
- a playlist may be created by content sharing platform 120 , contextual music platform 141 , application 142 , or a user of the aforementioned.
- content sharing platform 120 may make recommendations of media items to a user or group of users.
- a recommendation may be an indicator (e.g., interface component, electronic message, recommendation feed, etc.) that provides a user with personalized suggestions of media items that may appeal to a user.
- a recommendation may be made using data from a variety of sources including a user's favorite media items, recently added playlist media items, recently watched media items, media item ratings, information from a cookie, user history, and other sources.
- content sharing platform 120 , application platform 143 , contextual music platform 141 , or collaboration platform 145 may be implemented on one or more servers 130 .
- the server 130 e.g., 130 A-C
- the server 130 may be included in the content sharing platform 120 , be an independent system or be part of another system/platform, such as application platform 143 , contextual music platform 141 , or collaboration platform 145 .
- collaboration platform 145 may be executed on server 130 C and store source code 144 .
- a user or administrator may access collaboration platform 145 to upload or otherwise modify source code 144 .
- collaboration platform 145 may be a document sharing platform where users may create, edit, and share documents.
- the source code 144 may be stored on client device 110 A or provided by application platform 143 or contextual music platform 141 .
- collaboration platform 145 may in part or wholly be implemented on client device 110 or other platforms.
- application platform 143 may provide an application that is accessed by a user through client devices 110 A- 110 Z.
- application platform 143 executes a gaming environment, such as a 3 D-gaming environment or virtual gaming environment, for access by client devices 110 A- 110 Z.
- application platform 143 may be implemented on server 130 A.
- Application platform 143 may execute application 142 B (also referred to as “application with contextual situations” herein).
- the application 142 B may be in a particular state at a given time, where the particular state corresponds to a contextual situation.
- a contextual situation may refer to a state or particular context of for example, an application, a user, a physical environment, virtual environment (e.g., virtual reality), or augment environment (e.g., augmented reality).
- the contextual situation may further refer to the state or particular context of the application that is interacted with by the user at a particular point in time.
- application 142 may be a gaming application and a contextual situation may be a high-level description of the gaming environment at a particular time.
- the contextual situation “in a peaceful forest at night” may reflect the current gaming environment of an application 142 B, where the gaming environment is concurrently displayed on client device 110 .
- a user may interact with the application 142 B using client device 110 .
- application 142 B may be in part or wholly implemented on client device 110 (or on other platforms), as illustrated by application 142 A on client device 110 A.
- contextual music platform 141 may be implemented on server 130 B. In implementations, contextual music platform 141 may execute contextual music application 140 B. In implementations, contextual music application 140 B may in part or wholly be implemented on client device 110 (or on other platforms), as illustrated by contextual music application 140 A on client device 110 A. Contextual music application 140 may include contextual music compiler 112 or contextual music selector 113 . In other implementations, contextual music compiler 112 and contextual music selector 113 may be separate applications implemented on the same or different devices.
- implementations of the disclosure are discussed in terms of content sharing platforms and promoting social network sharing of a content item on the content sharing platform, implementations may also be generally applied to multiple types of social networks that provide connections between users or multiple types of systems where contextual situation analysis may be applied. Implementations of the disclosure are not limited to content sharing platforms that provide channel subscriptions to users.
- the users may be provided with an opportunity to control whether the content sharing platform 120 collects user information (e.g., information about a user's social network, social actions or activities, profession, a user's preferences, or a user's current location), or to control whether and/or how to receive content from the content server that may be more relevant to the user.
- user information e.g., information about a user's social network, social actions or activities, profession, a user's preferences, or a user's current location
- certain data may be treated in one or more ways before it is stored or used, so that personally identifiable information is removed.
- a user's identity may be treated so that no personally identifiable information can be determined for the user, or a user's geographic location may be generalized where location information is obtained (such as to a city, ZIP code, or state level), so that a particular location of a user cannot be determined.
- location information such as to a city, ZIP code, or state level
- the user may have control over how information is collected about the user and used by the content sharing platform 120 .
- FIG. 2 illustrates an example list of rules that can be used by the contextual music application, in accordance with an implementation of the disclosure.
- Source code 200 may be similar to source code 144 as described with respect to FIG. 1 . It may be noted that components of FIG. 1 may be used herein to help describe FIG. 2 .
- the list 200 can be stored in a tabular format including columns, such as columns labeled contextual situations 250 , rules 251 , and playlists 252 , and rows such as rows 260 A-J.
- the list 200 includes source code that defines rules using a programming language (e.g., object-oriented language, scripting language, markup language, etc.), It may be noted that the list 200 is provided for purposes of illustration, rather than limitation, and may have one or more columns, rows, or types of information.
- contextual situations 250 may refer to a state or particular context of, for example, an application, a user, a physical environment, virtual environment (e.g., virtual reality), or augment environment (e.g., augmented reality).
- contextual situations 250 may describe particular states of a gaming environment, such as “Sandy Desert at Night,” (e.g., row 260 B), “Zombie Siege,” (e.g., row 260 H), or “Hunting” (e.g., row 260 J).
- each of the contextual situations 250 is associated with a rule 251 and a playlist 252 .
- a particular rule such as rule 251 of row 260 A, may have one or more associated conditions, such as conditions 257 .
- the satisfaction of conditions, such as conditions 257 of the associated rule 251 of row 260 A indicates the existence of the associated contextual situation 250 (e.g., “In a Peaceful Forest at Night”).
- conditions, such as conditions 257 are related by logical conjunctions, such as a logical “AND.” For example, all the conditions 257 are to be satisfied at the same time before the existence of the contextual situation 250 , “In a Peaceful Forest at Night,” is determined.
- each contextual situation 250 of rows 260 A-J is associated with a corresponding playlist 252 A-J.
- the playlists 252 may include one or more media items, such as video items or audio items.
- Each of the playlists 252 may include an indicator to locate the playlist or associated media items.
- playlist 252 A may contain a universal resource locator (URL) that points to the playlist stored on content sharing platform 120 .
- URL universal resource locator
- playlist 252 A may point to a folder or file stored locally on the user device.
- one or more playlists 252 may include additional information such as start or end timestamps that identify portions of a media item on a playlist for playback. For example, the start or end timestamps may indicate playback of a particular media item should begin at minute 1 : 00 and end at minute 1 : 45 .
- each condition 257 includes a feature 253 compared to a constant 254 by a comparison operator 256 .
- a feature 253 may describe an element of a contextual situation 250 .
- “altitude,” “isNight,” “isSkyVisible,” “biome,” and “difficulty” may be features of one or more contextual situations 250 of a gaming application.
- a constant 254 may include a string or number, such as an integer.
- the comparison operators 256 for constants 254 that are numbers may include equality or inequality (e.g., equal to, not equal to, less than, greater than, less than or equal to, greater than or equal to).
- the comparison operators 256 for constants 254 that are strings may include equality, inequality, match, or does not match a regular expression.
- the domain-specific language may implement a constrained set of comparison operators 256 and include conditions 257 that are related by logical conjunctions, as described above.
- the list 200 may be available to the user for creation and modification.
- a user may create a file including the list 200 using collaboration platform 145 .
- the user may define particular contextual situations 250 , define the rules 251 , or associate particular playlists 252 with the contextual situations 250 .
- the user may select the media items contained in a particular playlist 152 .
- the list 200 may be created or managed by an administrator or developer.
- FIG. 3 is an example system utilizing the contextual music application, in accordance with implementations of the disclosure.
- system 300 may be implemented using system architecture 100 described with respect to FIG. 1 .
- Features of FIG. 3 may include components described in FIGS. 1 - 2 , as well as additional components.
- the list 200 includes source code that defines rules using a programming language.
- the source code 200 may be sent to contextual music compiler 112 of contextual music application 140 , where contextual music compiler 112 may translate source code 200 into executable code.
- source code 200 may include multiple rules, where each of the rules includes one or more conditions. In implementations, each of the multiple rules may be associated with a contextual situation.
- the contextual music compiler 112 uses source code to generate a decision tree.
- the decision tree includes a root node that is connected to other nodes (also referred to as “subsequent nodes” herein) by branches.
- the decision tree may be used to minimize the number of conditions to be evaluated to determine whether a particular rule of the multitude of rules has been satisfied. It may be noted that minimizing the number of conditions to be evaluated to determine whether a particular rule has been satisfied may be performed in other manners.
- a single root node may be used and subsequent nodes are evaluated dependent on the outcome of the root node or one or more previous nodes.
- Evaluation may refer to a determination process to determine the outcome of a particular condition. For example, the outcome of an evaluation of a condition of a node of a decision tree may be “true” or “false.” Responsive to the outcome of an evaluation of a node, other conditions associated with other nodes, may be known or moot and not need to be further evaluated.
- the outcome of an evaluation of a condition of a node may imply that other conditions are satisfied, imply that other conditions are not satisfied, or imply that some rules cannot be satisfied (and the conditions associated with the rules are moot and need not be evaluated), for example.
- the decision tree may be constructed so that some or all implied conditions are not evaluated at subsequent nodes. Additional information regarding decision tree is described with respect to FIG. 4 .
- contextual music compiler 112 generates a callable function 370 that implements the decision tree.
- Callable function 370 may be used to identify at least one of the multiple contextual situations, as defined in the source code 200 , which corresponds to a state of the application 142 that is interacted with by the user.
- the callable function 370 may be sent to contextual music selector 113 of contextual music application 140 .
- callable function 370 applies a context update 272 as input.
- a context update 272 may include a data set that provides parameters for various features of a contextual situation being executed by application 142 .
- the parameters for features identified in the data set are compared to conditions that are associated with nodes of the decision tree.
- callable function 370 responsive to applying the context update 272 , determines whether one or more of the multiple rules have been satisfied.
- the callable function 370 implements the decision tree to make the determination that a rule has been satisfied to minimize a number of the multiple conditions to be evaluated to determine whether a particular rule of the multiple rules has been satisfied.
- callable function 370 in conjunction with contextual music application 140 may identify a particular rule that has been satisfied responsive to applying the context update 272 to the callable function 370 .
- the callable function 370 of contextual music application 140 may identify a contextual situation that is associated with the satisfied rule, responsive to determining the particular rule has been satisfied.
- the callable function may output one or more identifiers that indicate one or more corresponding contextual situations.
- contextual music selector 113 may determine the particular playlist that is associated with the satisfied rule. It may be noted that in implementations, responsive to a single context update 272 , one or more rules (or none) may be satisfied and one or more corresponding contextual situations may be identified. Responsive to identifying multiple satisfied contextual situations, multiple playlists may be identified, and media items from a particular playlist of the multiple playlists may be selected for playback. Responsive to determining the particular playlist, contextual music selector 113 may retrieve or cause playback of media items from the particular playlist.
- contextual music selector 113 may query content sharing platform 120 using an application program interface (API) for access or playback of the particular playlist A.
- contextual music selector 113 may cause a concurrent playback of a media item of the playlist A with the occurrence of the contextual situation identified for the application 142 .
- a video item e.g., music video
- a media item may be randomly chosen from the playlist A.
- various algorithms may be used to choose a media item from the playlist by determining which media item the user would have the most affinity towards in view of the particular contextual situation. It may be noted that in other implementations, playlists associated with particular contextual situations may be retrieved by different or multiple platforms, or may be retrieved local to the user device.
- a context update may be mapped to one or more contextual situations and multiple media items, such as audio-only items, that are contained in the one or more playlist.
- determining a media item from the one or playlists for playback may include one or more factors, such as matching scores, variety settings, playback history, or user feedback.
- each of the media items of the identified playlist(s) may be assigned a matching score.
- a matching score may be indicative of a media item's determined matching or affinity with an identified contextual situation(s). For example, a media item with a matching score of 90 has a higher affinity with a particular contextual situation than another media item with a matching score of 60 for the same contextual situation.
- the new media item responsive to receiving a context update 272 , if a new media item has a matching score that is higher than the current media item that is presently being played, the new media item will interrupt playback of the current media item (e.g., fade out) and replace (e.g., fade in) the current media item.
- the next media item may be determined from the most recent context update in a manner described herein.
- a context update is stale (received before a threshold amount of time)
- contextual music selector 113 may not begin playback of a new media item.
- the other media items of the one or more playlists are blocked from interrupting playback.
- a variety setting may be controlled by a user, developer, or administrator.
- a variety setting may refer to an indication, such as a numerical setting, that indicates the relative importance of diversity (e.g., importance of playback of different media items rather than playback of media items with the highest matching score).
- the variety setting may provide a statistical probability (e.g., relative likelihood) of selecting media items for playback where the items have different matching scores, where media items with lower matching scores have a lower probability of being selected.
- the variety setting may be 25% and three candidate audio-only items may have matching scores of 85, 75, and 65.
- a probability (e.g., ratio) may be determined for each candidate audio-only item so that each item has a non-zero probability of being selected.
- the probability that one of the candidate audio-only items is selected is 100%.
- the probability that each candidate audio-only item may be selected may be determined by choosing a first ratio that allows each subsequent ratio to be 25% of the preceding ratio and have all the ratios add to 100%.
- the probability for the matching score-85 audio-only item to play is 16/21
- the probability for the matching score-75 audio-only item is 25% of that, e.g., 4/21
- playback history may be taken into account to select media items from playlists for playback. For example, a rule may be implemented where the last N-number of last played songs are not repeated.
- user feedback may be used to change the probabilities of playback. For example, selection of like or dislike input elements by a user may be used to change the probability of playback (e.g., relative play probabilities as described above with respect to variety settings) of a particular media item.
- contextual music selector 113 determines the fraction of times each candidate media item has been played as well as the fraction of times each candidate media item should be played e.g., (relative play probabilities as described above with respect to variety settings), and picks the media item that minimizes the relative entropy (Kullback-Leibler divergence) between the observed and desired times-played distributions.
- application 142 may generate frequent context updates 272 .
- context updates 272 may occur every 0.25 seconds and contain a data set with dozens to hundreds of parameters.
- contextual music selector 113 may use an API to communicate and request context updates 272 from application 142 .
- content recognition techniques may be used to generate some or all of the data set of context update 272 .
- screen shot analysis may be implemented that identifies text and elements or features displayed by application 142 on client device.
- contextual music selector 113 may receive a new context update 272 . If the contextual music selector 113 determines, in view of the new context update 272 , that the contextual situation for the application has not changed, the contextual music selector 113 may continue playback of the media item or choose another media item from the associated playlist for playback. If the contextual music selector 113 determines, in view of the new context update 272 , that a new rule of the multiple rules has been satisfied, contextual music selector 113 may identify another contextual situation associated with the newly identified rule. Contextual music selector 113 may retrieve another playlist from content sharing platform 120 for the new contextual situation, and cause playback of a media item from the other playlist.
- contextual music compiler 112 of contextual music application 140 may generate a decision tree for the multiple rules by determining a condition from the multiple conditions to be the root node of the decision tree.
- a single decision tree with a single root node is used.
- multiple decision trees may be used.
- the root node optimizes a number of the plurality of conditions that are eliminated from subsequent evaluations.
- the outcome of an evaluation of a condition of a node may imply that other conditions are satisfied, imply that other conditions are not satisfied, or imply that some rules cannot be satisfied (and the conditions associated with the rules are moot and need not be evaluated).
- implied conditions may not need to be re-evaluated.
- contextual music compiler 112 may check every condition (or feature) that best approximates a 50-50 split between conditions (or rules) that are eliminated from subsequent evaluation and conditions that are not eliminated from subsequent evaluation responsive to the outcome of the evaluation of a condition of the root node.
- the decision tree may be organized with subsequent nodes connected to each other and the root node by branches. It may be noted that a decision tree may be evaluated in serial manner such that the outcome of an evaluation of a previous node determines which subsequent node(s) to evaluate and which subsequent node(s) not to evaluate. In implementations, the nodes of the decision tree may be organized so that a condition of the multiple conditions where the outcome is implied (e.g., by the outcome of an evaluation of a previous node) is not evaluated at a connected subsequent node.
- the nodes subsequent to the root node may be determined after the root node is determined, and in a similar manner as the root node is determined. For example, for determining subsequent nodes for each branch of the decision tree, contextual music compiler 112 may check every remaining condition (e.g., conditions not determined as previous nodes) for the one condition that best approximates a 50-50 split between conditions (or rules) that are eliminated from subsequent evaluation and conditions that are not eliminated from subsequent evaluation responsive to the outcome of the evaluation of a condition of the corresponding node.
- contextual music compiler 112 may check every remaining condition (e.g., conditions not determined as previous nodes) for the one condition that best approximates a 50-50 split between conditions (or rules) that are eliminated from subsequent evaluation and conditions that are not eliminated from subsequent evaluation responsive to the outcome of the evaluation of a condition of the corresponding node.
- the decision tree may be implemented in a callable function 370 that receives context updates 272 as inputs.
- the callable function 370 may determine whether one or more of the multiple rules has been satisfied in view of the context update 272 .
- the callable function 370 uses the decision tree to identify the initial condition to evaluate.
- the callable function 370 may determine the root node of the decision tree, and determine from the root node the associated feature and condition from which to begin the contextual situation analysis.
- the callable function 370 may evaluate the initial condition identified by the root node in view of the data set of the context update 272 .
- the outcome of the evaluation may be either “true” or “false.”
- the outcome of the evaluation may direct the callable function 370 to follow a specific branch or specific branches and evaluate corresponding subsequent node(s).
- the callable function 370 evaluates a subsequent node of the decision tree where a number of the plurality of condition that have outcomes that are implied by the evaluation of the initial condition are eliminated from subsequent evaluation.
- callable function 370 or contextual music selector 113 keeps a record (e.g., table or scoreboard) of the conditions that have outcomes that are explicitly and implicitly determined from the evaluated nodes of the decision tree.
- the record may held keep track of whether or not a particular rule has been satisfied. Once a rule has been satisfied, the associated contextual situation is identified and the associated playlist is retrieved.
- FIG. 4 A illustrates generation and use of a decision tree 400 , in accordance with implementations.
- FIG. 4 B illustrates a record 450 used to keep track of whether one or more rules has been satisfied, in accordance with implementations.
- a decision tree 400 may be used minimize the number of conditions to be evaluated to determine whether one or more rules of the multitude of rules has been satisfied. Components of the previous FIGS. 1 - 3 are used to help describe FIG. 4 A-B . It may be noted that the number of elements, such as conditions, rules, and nodes, is provide for purposes of illustration, rather than limitation. In other implementations, another number of elements may be used.
- decision tree 400 shows root node 410 , and various subsequent nodes 411 - 419 .
- the nodes are connected by branches, such as braches 420 and 421 .
- root node 410 is connected to node 411 by branch 420 and is connected to node 415 by branch 421 .
- Conditions corresponding to each node are identified as C1 through C11.
- a rule may include on or more conditions.
- decision tree 400 may represent a decision tree for six rules, Rules 1-6.
- Record 450 of FIG. 4 B illustrates the Rules 1-6 as regions R1 through R6, respectively, of record 450 .
- Record 450 shows a checkerboard having an X-axis (horizontal axis) and Y-axis (vertical axis), where each checker represents an X-Y value.
- a compiler for example the contextual music compiler 112 ) generates decision tree 400 where every node 410 - 419 has 3 subtrees, rather than 2 subtrees. In some implementations, 1 or more subtrees may be used. It may be noted that one or more subtrees may be empty and not shown connected to a particular node.
- the 3 subtrees may include a subtree to evaluate if the current node's check evaluates as “true” (The “(Y)es” branch) (e.g., subtree 430 A), a subtree to evaluate if the current node's check evaluates as “false” (The “(N)o” branch) (e.g., subtree 430 B), and a subtree to always (A) evaluate after evaluating the (Y)es or (N)o branch (e.g., subtree 430 C).
- Subtree 430 C represents an “always” subtree, and is to be evaluated if the condition of node 412 is evaluated as “true” or “false.” Subtree 430 C may also be referred to an independent subtree, where the evaluations of conditions of the independent subtree are independent from the evaluation of one or more nodes, such as node 412 (e.g., the outcome of the nodes of the independent subtree cannot be explicitly or implicitly determined from the evaluation of other related conditions or nodes).
- root node 410 includes condition C3.
- condition C3 of root node 410 gets checked first by contextual music selector 113 .
- C3 evaluates as “true” or “false” 3 out of 6 rules are eliminated (e.g., 50/50 split) from further evaluation.
- contextual music selector 113 may perform the evaluation of conditions or rules using decision tree 400 and record 450 .
- condition C3 of root node 410 is “true”
- C2 of node 411 gets checked next. If C2 is “true,” C1 of node 412 gets checked (which decides if Rule 1 is “true”), and irrespective of the outcome of C1 of node 412 , C9 of node 419 gets checked afterwards (which decides if Rule 3 is true).
- C5 on record 450 gets marked as “satisfied” and is not re-checked.
- C8 is checked, and if “true,” C7 is checked (which decides if rule 4 is “true”).
- C6 of node 415 is checked to exclude Rule 5 and Rule 6 in the case C6 does not hold. If C6 is “true,” the outcome implies C4 (and hence Rule 2). If C6 is “false,” then C4 is checked to decide Rule 2. Also, if C6 is “true,” contextual music selector 113 checks if C10 holds (which decides Rule 6), and only if C10 is “false,” then C11 needs to be checked (since C10 and C11 are mutually exclusive), which decides Rule 5.
- FIG. 5 is a flow diagram illustrating method 500 for generating a callable function that implements a decision tree, for example a decision tree as in FIG. 4 A , in accordance with some implementations.
- Method 500 may be performed by processing logic that includes hardware (e.g., circuitry, dedicated logic, programmable logic, microcode), software (e.g., instructions run on a processing device to perform hardware simulation), or a combination thereof.
- processing logic includes hardware (e.g., circuitry, dedicated logic, programmable logic, microcode), software (e.g., instructions run on a processing device to perform hardware simulation), or a combination thereof.
- contextual music application 140 and in particular, contextual music compiler 112 , may perform some or all the operations described herein.
- Method 500 begins at block 505 where processing logic receives source code defining multiple rules. Each of the multiple of rules includes one or more of multiple conditions and is associated with one of multiple contextual situations.
- processing logic generates, using the source code, a decision tree for the multiple rules. Generating the decision tree includes minimizing a number of the multiple conditions to be evaluated to determine whether a particular rule of the multiple rules has been satisfied.
- processing logic generates a callable function that implements the decision tree. The callable function identifies one of the multiple contextual situations that corresponds to a state of an application interacted with by a user.
- a processing device may use the callable function in controlling a device (such as an autonomous vehicle) or process.
- the processing device that uses the callable function in controlling the device or process may have generated the callable function, but this implementation does not require this.
- the processing device may use the callable function to control the device or process by identifying, using the callable function, a contextual situation; and controlling the device or process based on the identified contextual situation.
- the processing device may determine at least one action to be performed by the device or process based at least on the identified contextual situation and optionally also based on one or more further inputs.
- the processing device may be further controlling or instructing the device or process to implement a first action of the at least one determined actions.
- FIG. 6 is a flow diagram illustrating a method for providing a playlist for a current contextual situation associated with an application interacted with by a user in accordance with some implementations.
- Method 600 may be performed by processing logic that includes hardware (e.g., circuitry, dedicated logic, programmable logic, microcode), software (e.g., instructions run on a processing device to perform hardware simulation), or a combination thereof.
- contextual music application 140 in particular contextual music selector 113 , may perform some or all the operations described herein.
- Method 600 begins at block 605 where processing logic receives a first context update for an application.
- processing logic determines whether one or more of multiple rules have been satisfied in view of the first context update.
- the multiple rules include multiple conditions and are associated with multiple contextual situations. The determining includes minimizing a number of the multiple conditions to be evaluated to determine whether a particular rule of the multiple rules has been satisfied.
- processing logic responsive to determining a first rule of the multiple rules has been satisfied identifies a first contextual situation of the multiple contextual situations that is associated with the first rule.
- processing logic determines a playlist of media items that is associated with the first contextual situation.
- processing logic causes playback of a first media item of the playlist of media items to accompany the first contextual situation identified for the application.
- FIG. 7 is a block diagram illustrating an exemplary computer system 700 , in accordance with implementations.
- the computer system 700 executes one or more sets of instructions that cause the machine to perform one or more of the methodologies discussed herein.
- Set of instructions, instructions, and the like may refer to instructions that, when executed computer system 700 , cause computer system 700 to perform one or more operations of contextual music application 140 .
- the machine may operate in the capacity of a server or a client device in client-server network environment, or as a peer machine in a peer-to-peer (or distributed) network environment.
- the machine may be a personal computer (PC), a tablet PC, a set-top box (STB), a personal digital assistant (PDA), a mobile telephone, a web appliance, a server, a network router, switch or bridge, or a machine capable of executing a set of instructions (sequential or otherwise) that specify actions to be taken by that machine.
- PC personal computer
- PDA personal digital assistant
- STB set-top box
- PDA personal digital assistant
- mobile telephone a web appliance
- server a server
- network router switch or bridge
- machine capable of executing a set of instructions (sequential or otherwise) that specify actions to be taken by that machine.
- machine shall also be taken to include a collection of machines that individually or jointly execute the sets of instructions to perform one or more of the methodologies discussed herein.
- the computer system 700 includes a processing device 702 , a main memory 704 (e.g., read-only memory (ROM), flash memory, dynamic random access memory (DRAM) such as synchronous DRAM (SDRAM) or Rambus DRAM (RDRAM), etc.), a static memory 706 (e.g., flash memory, static random access memory (SRAM), etc.), and a data storage device 716 , which communicate with each other via a bus 708 .
- main memory 704 e.g., read-only memory (ROM), flash memory, dynamic random access memory (DRAM) such as synchronous DRAM (SDRAM) or Rambus DRAM (RDRAM), etc.
- DRAM dynamic random access memory
- SDRAM synchronous DRAM
- RDRAM Rambus DRAM
- static memory 706 e.g., flash memory, static random access memory (SRAM), etc.
- SRAM static random access memory
- the processing device 702 represents one or more general-purpose processing devices such as a microprocessor, central processing unit, or the like. More particularly, the processing device 702 may be a complex instruction set computing (CISC) microprocessor, reduced instruction set computing (RISC) microprocessor, very long instruction word (VLIW) microprocessor, or a processing device implementing other instruction sets or processing devices implementing a combination of instruction sets.
- the processing device 702 may also be one or more special-purpose processing devices such as an application specific integrated circuit (ASIC), a field programmable gate array (FPGA), a digital signal processor (DSP), network processor, or the like.
- the processing device 702 is configured to execute instructions of the system architecture 100 and the contextual music application 140 for performing the operations discussed herein.
- the computer system 700 may further include a network interface device 722 that provides communication with other machines over a network 718 , such as a local area network (LAN), an intranet, an extranet, or the Internet.
- the computer system 700 also may include a display device 710 (e.g., a liquid crystal display (LCD) or a cathode ray tube (CRT)), an alphanumeric input device 712 (e.g., a keyboard), a cursor control device 714 (e.g., a mouse), and a signal generation device 720 (e.g., a speaker).
- a display device 710 e.g., a liquid crystal display (LCD) or a cathode ray tube (CRT)
- an alphanumeric input device 712 e.g., a keyboard
- a cursor control device 714 e.g., a mouse
- a signal generation device 720 e.g., a speaker
- the data storage device 716 may include a non-transitory computer-readable storage medium 724 on which is stored the sets of instructions of the system architecture 100 and contextual music application 140 embodying one or more of the methodologies or functions described herein.
- the sets of instructions of the system architecture 100 and contextual music application 140 may also reside, completely or at least partially, within the main memory 704 and/or within the processing device 702 during execution thereof by the computer system 700 , the main memory 704 and the processing device 702 also constituting computer-readable storage media.
- the sets of instructions may further be transmitted or received over the network 718 via the network interface device 722 .
- While the example of the computer-readable storage medium 724 is shown as a single medium, the term “computer-readable storage medium” can include a single medium or multiple media (e.g., a centralized or distributed database, and/or associated caches and servers) that store the sets of instructions.
- the term “computer-readable storage medium” can include a medium that is capable of storing, encoding or carrying a set of instructions for execution by the machine and that cause the machine to perform one or more of the methodologies of the present disclosure.
- the term “computer-readable storage medium” can include, but not be limited to, solid-state memories, optical media, and magnetic media.
- the present disclosure also relates to an apparatus for performing the operations herein.
- This apparatus may be specially constructed for the required purposes, or it may include a general purpose computer selectively activated or reconfigured by a computer program stored in the computer.
- a computer program may be stored in a computer readable storage medium, such as, but not limited to, a type of disk including a floppy disk, an optical disk, a compact disc read-only memory (CD-ROM), a magnetic-optical disk, a read-only memory (ROM), a random access memory (RAM), an erasable programmable read-only memory (EPROM), an electrically erasable programmable read-only memory (EEPROM), a magnetic or optical card, or a type of media suitable for storing electronic instructions.
- a type of disk including a floppy disk, an optical disk, a compact disc read-only memory (CD-ROM), a magnetic-optical disk, a read-only memory (ROM), a random access memory (RAM), an erasable programm
- example or “exemplary” are used herein to mean serving as an example, instance, or illustration.
- An aspect or design described herein as “example’ or “exemplary” is not necessarily to be construed as preferred or advantageous over other aspects or designs. Rather, use of the words “example” or “exemplary” is intended to present concepts in a concrete fashion.
- the term “or” is intended to mean an inclusive “or” rather than an exclusive “or.” That is, unless specified otherwise, or clear from context, “X includes A or B” is intended to mean the natural inclusive permutations.
Abstract
A first context update indicative of a present state associated with an application is received. A first contextual situation, among a plurality of contextual situations associated with a plurality of conditions, that corresponds to the first context update is identified. Identifying the first contextual situation includes implementing a decision tree to minimize a number of the plurality of conditions to be evaluated, identifying the first contextual situation using the decision tree, and determining one or more actions to be performed corresponding with the first contextual situation.
Description
- This application is a continuation application of U.S. patent application Ser. No. 16/607,021, filed Oct. 21, 2019, which is a continuation of International Application No. PCT/US2018/025744, filed Apr. 2, 2018, which claims the benefit of Provisional Application No. 62/489,333, filed Apr. 24, 2017, the entire contents of all are hereby incorporated by reference herein.
- This disclosure relates to the field of contextual situation analysis.
- There are situations in which a processor is required to make decisions based on one or more received inputs. In an autonomous (or “driverless” vehicle), for example, a processor receives inputs (eg from cameras and/or radar) relating to the position and movement of other vehicles or people, and is required to make decisions such as whether to cause the vehicle to slow down, make an emergency stop, change direction etc. However, the most appropriate decision for the processor to make when it receives a particular input (such as a particular observed behaviour of another road user) is likely to depend not only on that input but on the circumstances (or context) of the situation in which the input occurs. For example, if a pedestrian steps into the road it may be appropriate for the processor to instruct the vehicle to slow down or stop and/or change direction. However, if the vehicle is already slowing to a stop at a red traffic light, and the pedestrian has stepped into the road beyond the red traffic light, the processor does not need to take any further action. That is, the processor is required to evaluate both the input and the context in which the input occurs in order to decide how, or whether, the vehicle should react. Although described here with specific reference to an autonomous vehicle, contextual situation analysis is not limited to the field of autonomous vehicles but occurs in other fields.
- The following is a simplified summary of the disclosure in order to provide a basic understanding of some aspects of the disclosure. This summary is not an extensive overview of the disclosure. It is intended to neither identify key or critical elements of the disclosure, nor delineate a scope of the particular implementations of the disclosure or a scope of the claims. Its sole purpose is to present some concepts of the disclosure in a simplified form as a prelude to the more detailed description that is presented later.
- In one implementation, a method includes receiving, by a compiler, source code including multiple rules. Each of the multiple of rules includes one or more of multiple conditions and is associated with one of multiple contextual situations. The method also generates, using the source code, a decision tree for the multiple rules. Generating the decision tree includes minimizing a number of the multiple conditions to be evaluated to determine whether a particular rule of the multiple rules has been satisfied. The method also generates a callable function that implements the decision tree. The callable function helps identify at least one of the multiple contextual situations that corresponds to a state of an application interacted with by a user.
- In another implementation, the method for generating the decision tree for the multiple rules includes determining a condition from the multiple conditions as a root node of the decision tree. The determined condition optimizes a number of the multiple conditions that are eliminated from subsequent evaluations.
- In implementations, the method for generating the decision tree for the multiple rules includes organizing the decision tree with multiple nodes that are associated with multiple conditions. The multiple nodes are organized so that a condition of the multiple conditions having an outcome that is implied by an outcome of an evaluation of a previous node is not subsequently evaluated.
- In implementations, the source code is a domain-specific language that allows a satisfaction of a subset of conditions of the multiple conditions to be implied from a satisfaction of other conditions of the multiple conditions. In implementations, in the source code, conditions for a particular rule of the multiple rules are related by a logical conjunction, and the each of the conditions includes a feature compared to a constant using a comparison operator.
- In some implementations, the method of determining the condition from the multiple conditions as the root node of the decision tree includes for each condition of the plurality of conditions evaluating a condition of the multiple conditions as true to determine a first number of conditions where an outcome is implied in view of an evaluation of the condition as true. The method also includes evaluating the condition of the multiple conditions as false to determine a second number of conditions where the outcome is implied in view of an evaluation of the condition as false. The method also includes determining a condition from the multiple conditions to be the root node based on the first number and the second number.
- In implementations, a method receives a first context update for an application. The method determines whether one or more of multiple rules has been satisfied in view of the first context update. The multiple rules include a multiple conditions and are associated with multiple contextual situations. The determining includes minimizing a number of the multiple conditions to be evaluated to determine whether a particular rule of the multiple rules has been satisfied. The method responsive to determining a first rule of the multiple rules has been satisfied, identifies a first contextual situation of the multiple contextual situations that is associated with the first rule. The method also determines at least one action that is associated with the first contextual situation. In implementations, the method further causes performance of a first action of the at least one actions determined for the application. In an example relating to an autonomous vehicle, determining an action may for example comprise a processor of the autonomous vehicle determining that the vehicle needs to change direction and/or brake—causing performance of a first action of the at least one determined actions may comprise the processor instructing the braking system of the vehicle to apply the brakes and/or instructing the steering system of the vehicle to change the vehicle's direction of travel. In another one simple example, the at least one action may be a playlist of media items that is associated with the first contextual situation, and the first action may be playback of a first media item of the playlist of media items to accompany the first contextual situation identified for the application.
- In implementations, the method includes receiving a second context update for the application. The method also includes determining whether one or more of the multiple rules has been satisfied in view of the second context update. The method responsive to determining a second rule of the multiple rules has been satisfied in view of the second context update, identifies a second contextual situation of the multiple contextual situations that is associated with the second rule. The method includes determining at least one other action for the second contextual situation associated with the second rule.
- In implementations, the method of determining whether one or more of the multiple rules has been satisfied in view of the first context update includes applying a data set associated with the first context update to a callable function that implements a decision tree. The parameters of multiple features identified by the data set are compared to conditions of the multiple conditions that are associated with multiple nodes of the decision tree.
- In implementations, the method of determining whether one or more of the multiple rules has been satisfied in view of the first context update includes keeping a record of conditions of the multiple conditions that have outcomes that are explicitly and implicitly determined from evaluated nodes of the multiple nodes of the decision tree.
- In implementations, the method of determining whether one or more of the multiple rules has been satisfied in view of the first context update includes determining an initial condition of the multiple conditions to evaluate by determining a root node of the multiple nodes of the decision tree. The root node indicates a feature and a condition associated with the feature. The method also includes evaluating the initial condition identified by the root node in view of the data set of the first context update.
- In implementations, the method of determining whether one or more of the multiple rules has been satisfied in view of the first context update includes responsive to the evaluation of the initial condition, evaluating a subsequent node of the decision tree where a number of the multiple conditions that have outcomes that are implied by the evaluation of the initial condition are eliminated from subsequent evaluation.
- In implementations, each of the multiple rules includes one or more conditions of the multiple conditions. The one or more conditions for a particular rule of the multiple rules are related by a logical conjunction, and each of the one or more conditions include a feature compared to a constant using a comparison operator.
- In implementations, the method may be performed by one or more processing devices that control a device (such as an autonomous vehicle based on the contextual situation of the device.
- A further aspect of the present disclosure provides a processor-implemented method of controlling a device or process comprising: generating a callable function according to any implementation described herein; identifying, using the callable function, a contextual situation; and controlling the device or process based on the identified contextual situation. In an implementation, controlling the device or process based on the identified contextual situation may comprise determining at least one action to be performed by the device or process based at least on the identified contextual situation and optionally also based on one or more further inputs. It may further comprise the processor controlling or instructing the device or process to implement a first action of the at least one determined actions. In additional implementations, one or more processing devices for performing the operations of the above described implementations are disclosed. Additionally, in implementations of the disclosure, a computer-readable storage medium (which may be a non-transitory computer-readable storage medium, although these implementations are not limited to this) stores instructions for performing a method according to any of the described implementations. Also in other implementations, systems for performing a method according to any one of the described implementations are also disclosed. The system may comprise a memory; and a processing device, coupled to the memory, that is configured to perform a method according to any one of the described implementations. The memory may store computer-readable instructions that, when executed by the processing device, cause the processing device to perform a method according to any one of the described implementations.
- Various implementations of the present disclosure will be understood more fully from the detailed description given below and from the accompanying drawings of various implementations of the disclosure.
-
FIG. 1 illustrates an example system architecture, in accordance with one implementation of the disclosure -
FIG. 2 illustrates an example list of rules that can be used by a contextual music application, in accordance with an implementation of the disclosure. -
FIG. 3 is an example system that uses contextual music application, in accordance with implementations of the disclosure. -
FIG. 4A illustrates generation and use of a decision tree by contextual music application, in accordance with implementations. -
FIG. 4B illustrates a record used to keep track of whether a particular rule has been satisfied, in accordance with implementations. -
FIG. 5 is a flow diagram illustrating a method for generating a callable function that implements a decision tree, in accordance with some implementations. -
FIG. 6 is a flow diagram illustrating a method for providing a playlist for a current contextual situation associated with an application interacted with by a use, in accordance with some implementations. -
FIG. 7 is a block diagram illustrating an exemplary computer system, according to some implementations. - In an example of an autonomous vehicle interacting with a public road environment the contextual situation or environment of the vehicle frequently changes (e.g., from an “empty road” to “a congested road”). Contextual updates that include low-level information (e.g., “a person has stepped into the road”) about the present contextual situation or environment may be monitored to determine if a particular high-level contextual situation (e.g., “need for emergency braking”) is taking place (e.g., based on rules that map low-level information to specific high-level contextual situations). Contextual updates may occur frequently (e.g., every 0.25 seconds) and include a large set of information that is evaluated in view of a large set of rules. The aforementioned presents many challenges, such as inability to provide sufficient computational resources and power to frequently perform contextual situation analysis and identify one or more relevant actions for an identified contextual situation.
- Aspects of the present disclosure address the above-mentioned and other challenges by generating a decision tree for evaluating multiple rules used to identify particular contextual situations. The decision tree minimizes a number of conditions associated with the rules that are to be evaluated to determine whether a particular rule has been satisfied, and identify a particular contextual situation that corresponds to a current state of an application or environment interacted with by the user/device determined.
- In some implementations, a context update is received by an application. The method determines whether one or more of the multiple rules have been satisfied in view of the context update, where the determining minimizes a number of conditions to be evaluated to determine whether a particular rule of the multiple rules has been satisfied. The method includes identifying a contextual situation based on determining that a particular rule has been satisfied, and determining one or more actions for the contextual situation.
- Accordingly, aspects of the present disclosure provides a mechanism that minimizes computations involved in evaluating conditions to determine whether a particular rule has been satisfied, determines from the satisfied rule a contextual situation that corresponds to a state of the application or environment, and selects one or more actions for the identified contextual situation. Aspects of the present disclosure result in reduction of storage and computational (processing) resources, as well as associated resources such as battery power, because reducing the number of conditions (and rules) for evaluation to determine a particular contextual situation is more efficient than evaluating all or a majority of rules to determine a particular situational context. Furthermore, reducing the number of conditions (and rules) for evaluation to determine a particular contextual situation reduces the time taken to determine an appropriate action to be taken, and this may, for example, improve the braking/stopping performance of an autonomous vehicle by reducing the time required for the processor of the vehicle to determine that the vehicle needs to stop to avoid a collision.
- As noted, the present disclosure provides an improved method of selecting one or more actions for an identified contextual situation, and may be applied in many fields. As another example, a user may be interacting with an online gaming system where the contextual situation or environment of the game frequently changes (e.g., from a “peaceful desert environment at night” to “a ride in a spaceship in outer space”). Contextual updates that include low-level information (e.g., “altitude=1k meters”) about the present contextual situation or environment may be monitored to determine if a particular high-level contextual situation (e.g., “a ride in a spaceship in outer space”) is taking place (e.g., based on rules that map low-level information to specific high-level contextual situations). When interacting with an application, users may prefer customized and varied music that corresponds to fast changing contextual situations. As in the case of an autonomous vehicle, contextual updates may occur frequently and significant computational resources and power may be required to frequently perform contextual situation analysis and identify one or more relevant actions for an identified contextual situation, such as determining a playlist for a contextual situation. For purposes of clarity and simplicity, the term “playlist” or “media playlist” may be a list or an order or a grouping of different media items that can be viewed or displayed or played back in sequential or shuffled order with or without interaction from a user.
- In the following, simple examples referring to selection of a playlist are used for illustration rather than limitation. As explained, however, it may be appreciated that features of the present disclosure may be applied to multiple types of applications.
-
FIG. 1 illustrates anexample system architecture 100, in accordance with one implementation of the disclosure. Thesystem architecture 100 includesclient devices 110A through 110Z, anetwork 105, adata store 106, acontent sharing platform 120, anapplication platform 143, acollaboration platform 145, and a contextual music platform 141. - In one implementation,
network 105 may include a public network (e.g., the Internet), a private network (e.g., a local area network (LAN) or wide area network (WAN)), a wired network (e.g., Ethernet network), a wireless network (e.g., an 802.11 network or a Wi-Fi network), a cellular network (e.g., a Long Term Evolution (LTE) network), routers, hubs, switches, server computers, and/or a combination thereof. - In one implementation, the
data store 106 may be a memory (e.g., random access memory), a cache, a drive (e.g., a hard drive), a flash drive, a database system, or another type of component or device capable of storing data. Thedata store 106 may also include multiple storage components (e.g., multiple drives or multiple databases) that may also span multiple computing devices (e.g., multiple server computers). In one implementation,data store 106 stores media items, such as video items. - The
client devices 110A through 110Z may each include computing devices such as personal computers (PCs), laptops, mobile phones, smart phones, tablet computers, netbook computers, network-connected televisions, etc. In some implementations,client devices 110A through 110Z may also be referred to as “user devices.” Each client device includes amedia viewer 111. In one implementation, themedia viewers 111 may be applications that allow users to view or upload content, such as images, video items, web pages, documents, etc. For example, themedia viewer 111 may be a web browser that can access, retrieve, present, and/or navigate content (e.g., web pages such as Hyper Text Markup Language (HTML) pages, digital media items, etc.) served by a web server. Themedia viewer 111 may render, display, and/or present the content (e.g., a web page, a media viewer) to a user. Themedia viewer 111 may also include an embedded media player (e.g., a Flash® player or an HTML5 player) that is embedded in a web page (e.g., a web page that may provide information about a product sold by an online merchant). In another example, themedia viewer 111 may be a standalone application (e.g., a mobile application or app) that allows users to view digital media items (e.g., digital video items, digital images, electronic books, etc.). According to aspects of the disclosure, themedia viewer 111 may be a content sharing platform application for users to record, edit, and/or upload content for sharing on the content sharing platform. As such, themedia viewers 111 may be provided to theclient devices 110A through 110Z by the contextual music platform 141 and/orcontent sharing platform 120. For example, themedia viewers 111 may be embedded media players that are embedded in web pages provided by thecontent sharing platform 120. In another example, themedia viewers 111 may be applications that are downloaded from the contextual music platform 141. - In general, functions described in one implementation as being performed by the
content sharing platform 120 can also be performed on theclient devices 110A through 110Z in other implementations, if appropriate. In other implementations, functions described as being performed by a particular component may be performed by an alternative component. In addition, the functionality attributed to a particular component can be performed by different or multiple components operating together. Thecontent sharing platform 120 can also be accessed as a service provided to other systems or devices through appropriate application programming interfaces, and thus is not limited to use in websites. - In one implementation, the
content sharing platform 120 may be one or more computing devices (such as a rackmount server, a router computer, a server computer, a personal computer, a mainframe computer, a laptop computer, a tablet computer, a desktop computer, etc.), data stores (e.g., hard disks, memories, databases), networks, software components, and/or hardware components that may be used to provide a user with access to media items and/or provide the media items to the user. For example, thecontent sharing platform 120 may allow a user to consume, upload, search for, approve of (“like”), disapprove of (“dislike”), and/or comment on media items. Thecontent sharing platform 120 may also include a website (e.g., a webpage) or application back-end software that may be used to provide a user with access to the media items. - In implementations of the disclosure, a “user” may be represented as a single individual. However, other implementations of the disclosure encompass a “user” being an entity controlled by a set of users and/or an automated source. For example, a set of individual users federated as a community in a social network may be considered a “user”. In another example, an automated consumer may be an automated ingestion pipeline, such as a topic channel, of the
content sharing platform 120. - The
content sharing platform 120 may include multiple channels (e.g., channels A through Z). A channel can be data content available from a common source or data content having a common topic, theme, or substance. The data content can be digital content chosen by a user, digital content made available by a user, digital content uploaded by a user, digital content chosen by a content provider, digital content chosen by a broadcaster, etc. For example, a channel X can include videos Y and Z. A channel can be associated with an owner, who is a user that can perform actions on the channel. Different activities can be associated with the channel based on the owner's actions, such as the owner making digital content available on the channel, the owner selecting (e.g., liking) digital content associated with another channel, the owner commenting on digital content associated with another channel, etc. The activities associated with the channel can be collected into an activity feed for the channel. Users, other than the owner of the channel, can subscribe to one or more channels in which they are interested. The concept of “subscribing” may also be referred to as “liking”, “following”, “friending”, and so on. - Once a user subscribes to a channel, the user can be presented with information from the channel's activity feed. If a user subscribes to multiple channels, the activity feed for each channel to which the user is subscribed can be combined into a syndicated activity feed. Information from the syndicated activity feed can be presented to the user. Channels may have their own feeds. For example, when navigating to a home page of a channel on the content sharing platform, feed items produced by that channel may be shown on the channel home page. Users may have a syndicated feed, which is a feed including at least a subset of the content items from all of the channels to which the user is subscribed. Syndicated feeds may also include content items from channels that the user is not subscribed. For example, the
content sharing platform 120 or other social networks may insert recommended content items into the user's syndicated feed, or may insert content items associated with a related connection of the user in the syndicated feed. - Each channel may include one or
more media items 121. Examples of amedia item 121 can include, and are not limited to, digital video, digital movies, digital photos, digital music, audio content, melodies, website content, social media updates, electronic books (ebooks), electronic magazines, digital newspapers, digital audio books, electronic journals, web blogs, real simple syndication (RSS) feeds, electronic comic books, software applications, etc. In some implementations,media item 121 is also referred to as content or a content item. - A
media item 121 may be consumed via the Internet and/or via a mobile device application. For brevity and simplicity, a video item is used as an example of amedia item 121 throughout this document. As used herein, “media,” media item,” “online media item,” “digital media,” “digital media item,” “content,” and “content item” can include an electronic file that can be executed or loaded using software, firmware or hardware configured to present the digital media item to an entity. In one implementation, thecontent sharing platform 120 may store themedia items 121 using thedata store 106. In another implementation, thecontent sharing platform 120 may store video items and/or fingerprints as electronic files in one or more formats usingdata store 106. - In one implementation, the media items are video items. A video item is a set of sequential video frames (e.g., image frames) representing a scene in motion. For example, a series of sequential video frames may be captured continuously or later reconstructed to produce animation. Video items may be presented in various formats including, but not limited to, analog, digital, two-dimensional and three-dimensional video. Further, video items may include movies, video clips or a set of animated images to be displayed in sequence. In addition, a video item may be stored as a video file that includes a video component and an audio component. The video component may refer to video data in a video coding format or image coding format (e.g., H.264 (MPEG-4 AVC), H.264 MPEG-4
Part 2, Graphic Interchange Format (GIF), WebP, etc.). The audio component may refer to audio data in an audio coding format (e.g., advanced audio coding (AAC), MP3, etc.). It may be noted GIF may be saved as an image file (e.g., .gif file) or saved as a series of images into an animated GIF (e.g., GIF89a format). It may be noted that H.264 may be a video coding format that is block-oriented motion-compensation-based video compression standard for recording, compression, or distribution of video content, for example. In some implementations, the video items may be consumed primarily for the audio component rather than the video component. In one implementation, the media items are audio-only items, such as music items. - In implementations,
content sharing platform 120 may allow users to create, share, view or use playlists containing media items (e.g., playlist A-Z, containing media items 121). A playlist refers to a collection of one or more media items that are configured to play one after another in a particular order without user interaction. In implementations,content sharing platform 120 may maintain the playlist on behalf of a user. In implementations, the playlist feature of thecontent sharing platform 120 allows users to group their favorite media items together in a single location for playback. In implementations,content sharing platform 120 may send a media item on a playlist to client device 110 for playback or display. For example, themedia viewer 111 may be used to play the media items on a playlist in the order in which the media items are listed on the playlist. In another example, a user may transition between media items on a playlist. In still another example, a user may wait for the next media item on the playlist to play or may select a particular media item in the playlist for playback. In another example, contextual music application 140 may select media items from a playlist for playback on client device 110. - In implementations, a playlist may be associated with a particular user or users, or made widely available to users of the
content sharing platform 120. In implementations, wherecontent sharing platform 120 associates one or more playlists with a specific user or group of users,content sharing platform 120 may associated the specific user with a playlist using user account information (e.g., a user account identifier such as username and password). In other implementations,content sharing platform 120 may associate a playlist with additional information (also referred to as “metadata” or “playlist metadata” herein). For example, a playlist may be associated with a title (e.g., Jakob's playlist), information related to the playlist (e.g., when the playlist was created, user account information), additional information regarding the media items of the playlist (e.g., artist information, genre, tempo, a hyperlink (link) to the media item, etc.), or information regarding the electronic messages used to populate the playlist with the media items (e.g., part or all the electronic messages, sentiment identifiers associated with the electronic messages, topics associated with the electronic messages, sender or receiver information related to the electronic messages (such as name of sender), etc.). In some implementations, a playlist may be created bycontent sharing platform 120, contextual music platform 141,application 142, or a user of the aforementioned. - In some implementations,
content sharing platform 120 may make recommendations of media items to a user or group of users. A recommendation may be an indicator (e.g., interface component, electronic message, recommendation feed, etc.) that provides a user with personalized suggestions of media items that may appeal to a user. In implementations, a recommendation may be made using data from a variety of sources including a user's favorite media items, recently added playlist media items, recently watched media items, media item ratings, information from a cookie, user history, and other sources. - In implementations,
content sharing platform 120,application platform 143, contextual music platform 141, orcollaboration platform 145 may be implemented on one or more servers 130. In implementations, the server 130 (e.g., 130A-C) may be one or more computing devices (e.g., a rackmount server, a server computer, etc.). The server 130 may be included in thecontent sharing platform 120, be an independent system or be part of another system/platform, such asapplication platform 143, contextual music platform 141, orcollaboration platform 145. - In implementations,
collaboration platform 145 may be executed onserver 130C and storesource code 144. In some implementations, a user or administrator may accesscollaboration platform 145 to upload or otherwise modifysource code 144. In some implementations,collaboration platform 145 may be a document sharing platform where users may create, edit, and share documents. In other implementations, thesource code 144 may be stored onclient device 110A or provided byapplication platform 143 or contextual music platform 141. In other implementations,collaboration platform 145 may in part or wholly be implemented on client device 110 or other platforms. - In implementations,
application platform 143 may provide an application that is accessed by a user throughclient devices 110A-110Z. In some examples,application platform 143 executes a gaming environment, such as a 3D-gaming environment or virtual gaming environment, for access byclient devices 110A-110Z. In implementations,application platform 143 may be implemented onserver 130A.Application platform 143 may executeapplication 142B (also referred to as “application with contextual situations” herein). Theapplication 142B may be in a particular state at a given time, where the particular state corresponds to a contextual situation. In implementations, a contextual situation may refer to a state or particular context of for example, an application, a user, a physical environment, virtual environment (e.g., virtual reality), or augment environment (e.g., augmented reality). In implementations, the contextual situation may further refer to the state or particular context of the application that is interacted with by the user at a particular point in time. For example,application 142 may be a gaming application and a contextual situation may be a high-level description of the gaming environment at a particular time. For instance, the contextual situation “in a peaceful forest at night” may reflect the current gaming environment of anapplication 142B, where the gaming environment is concurrently displayed on client device 110. In implementations, a user may interact with theapplication 142B using client device 110. In still other implementations,application 142B may be in part or wholly implemented on client device 110 (or on other platforms), as illustrated byapplication 142A onclient device 110A. - In implementations, contextual music platform 141 may be implemented on
server 130B. In implementations, contextual music platform 141 may executecontextual music application 140B. In implementations,contextual music application 140B may in part or wholly be implemented on client device 110 (or on other platforms), as illustrated bycontextual music application 140A onclient device 110A. Contextual music application 140 may includecontextual music compiler 112 orcontextual music selector 113. In other implementations,contextual music compiler 112 andcontextual music selector 113 may be separate applications implemented on the same or different devices. - Although implementations of the disclosure are discussed in terms of content sharing platforms and promoting social network sharing of a content item on the content sharing platform, implementations may also be generally applied to multiple types of social networks that provide connections between users or multiple types of systems where contextual situation analysis may be applied. Implementations of the disclosure are not limited to content sharing platforms that provide channel subscriptions to users.
- In situations in which the systems discussed here collect personal information about users, or may make use of personal information, the users may be provided with an opportunity to control whether the
content sharing platform 120 collects user information (e.g., information about a user's social network, social actions or activities, profession, a user's preferences, or a user's current location), or to control whether and/or how to receive content from the content server that may be more relevant to the user. In addition, certain data may be treated in one or more ways before it is stored or used, so that personally identifiable information is removed. For example, a user's identity may be treated so that no personally identifiable information can be determined for the user, or a user's geographic location may be generalized where location information is obtained (such as to a city, ZIP code, or state level), so that a particular location of a user cannot be determined. Thus, the user may have control over how information is collected about the user and used by thecontent sharing platform 120. -
FIG. 2 illustrates an example list of rules that can be used by the contextual music application, in accordance with an implementation of the disclosure.Source code 200 may be similar tosource code 144 as described with respect toFIG. 1 . It may be noted that components ofFIG. 1 may be used herein to help describeFIG. 2 . - The
list 200 can be stored in a tabular format including columns, such as columns labeledcontextual situations 250,rules 251, andplaylists 252, and rows such asrows 260A-J. In some implementations, thelist 200 includes source code that defines rules using a programming language (e.g., object-oriented language, scripting language, markup language, etc.), It may be noted that thelist 200 is provided for purposes of illustration, rather than limitation, and may have one or more columns, rows, or types of information. - As noted above,
contextual situations 250 may refer to a state or particular context of, for example, an application, a user, a physical environment, virtual environment (e.g., virtual reality), or augment environment (e.g., augmented reality). For example,contextual situations 250 may describe particular states of a gaming environment, such as “Sandy Desert at Night,” (e.g.,row 260B), “Zombie Siege,” (e.g.,row 260H), or “Hunting” (e.g.,row 260J). In implementations, each of thecontextual situations 250 is associated with arule 251 and aplaylist 252. For example,contextual situation 250 ofrow 260A, “In a Peaceful Forest at Night,” is associated withrule 251 ofrow 260A (e.g., “isNight>0 . . . difficulty==‘PEACEFUL’”) andplaylists 252A. - In implementations, a particular rule, such as
rule 251 ofrow 260A, may have one or more associated conditions, such asconditions 257. In some implementations, the satisfaction of conditions, such asconditions 257 of the associatedrule 251 ofrow 260A, indicates the existence of the associated contextual situation 250 (e.g., “In a Peaceful Forest at Night”). In some implementations, conditions, such asconditions 257, are related by logical conjunctions, such as a logical “AND.” For example, all theconditions 257 are to be satisfied at the same time before the existence of thecontextual situation 250, “In a Peaceful Forest at Night,” is determined. - In implementations, each
contextual situation 250 ofrows 260A-J is associated with acorresponding playlist 252A-J. In implementations, theplaylists 252 may include one or more media items, such as video items or audio items. Each of theplaylists 252 may include an indicator to locate the playlist or associated media items. For example,playlist 252A may contain a universal resource locator (URL) that points to the playlist stored oncontent sharing platform 120. In another example,playlist 252A may point to a folder or file stored locally on the user device. In still other implementations, one ormore playlists 252 may include additional information such as start or end timestamps that identify portions of a media item on a playlist for playback. For example, the start or end timestamps may indicate playback of a particular media item should begin at minute 1:00 and end at minute 1:45. - In some implementations, each
condition 257 includes afeature 253 compared to a constant 254 by acomparison operator 256. In implementations, afeature 253 may describe an element of acontextual situation 250. For example, “altitude,” “isNight,” “isSkyVisible,” “biome,” and “difficulty” may be features of one or morecontextual situations 250 of a gaming application. - In some implementations, a constant 254 may include a string or number, such as an integer. In implementations, the
comparison operators 256 forconstants 254 that are numbers may include equality or inequality (e.g., equal to, not equal to, less than, greater than, less than or equal to, greater than or equal to). In implementations, thecomparison operators 256 forconstants 254 that are strings may include equality, inequality, match, or does not match a regular expression. - In some implementations,
source code 200 may be a domain-specific language that allows for a satisfaction of someconditions 257 to be implied from a satisfaction of other conditions. For example, if the condition “altitude>10,000 meters” is true, then it may be logically implied that the condition “altitude>1,000 meters” is also true. In another example, if the condition “biome==‘ocean’” is true, then it may be logically reasoned that “biome==‘forest’” is not true. In some implementations, the domain-specific language may implement a constrained set ofcomparison operators 256 and includeconditions 257 that are related by logical conjunctions, as described above. - In some implementations, the
list 200 may be available to the user for creation and modification. For example, a user may create a file including thelist 200 usingcollaboration platform 145. The user may define particularcontextual situations 250, define therules 251, or associateparticular playlists 252 with thecontextual situations 250. In other implementations, the user may select the media items contained in a particular playlist 152. In other implementations, thelist 200 may be created or managed by an administrator or developer. -
FIG. 3 is an example system utilizing the contextual music application, in accordance with implementations of the disclosure. In implementations,system 300 may be implemented usingsystem architecture 100 described with respect toFIG. 1 . Features ofFIG. 3 may include components described inFIGS. 1-2 , as well as additional components. - In implementations, the
list 200, as described with respect toFIG. 2 , includes source code that defines rules using a programming language. Thesource code 200 may be sent tocontextual music compiler 112 of contextual music application 140, wherecontextual music compiler 112 may translatesource code 200 into executable code. As described with respect toFIG. 2 ,source code 200 may include multiple rules, where each of the rules includes one or more conditions. In implementations, each of the multiple rules may be associated with a contextual situation. - In one implementation, the
contextual music compiler 112 uses source code to generate a decision tree. In implementations, the decision tree includes a root node that is connected to other nodes (also referred to as “subsequent nodes” herein) by branches. In one implementation, each of the nodes of the decision tree may be defined by a particular condition, for example “biome=‘forest’”, or a particular feature, such as “biome.” In implementations, the decision tree may be used to minimize the number of conditions to be evaluated to determine whether a particular rule of the multitude of rules has been satisfied. It may be noted that minimizing the number of conditions to be evaluated to determine whether a particular rule has been satisfied may be performed in other manners. - In implementations, a single root node may be used and subsequent nodes are evaluated dependent on the outcome of the root node or one or more previous nodes. Evaluation may refer to a determination process to determine the outcome of a particular condition. For example, the outcome of an evaluation of a condition of a node of a decision tree may be “true” or “false.” Responsive to the outcome of an evaluation of a node, other conditions associated with other nodes, may be known or moot and not need to be further evaluated. In implementations, the outcome of an evaluation of a condition of a node may imply that other conditions are satisfied, imply that other conditions are not satisfied, or imply that some rules cannot be satisfied (and the conditions associated with the rules are moot and need not be evaluated), for example. In implementations, the decision tree may be constructed so that some or all implied conditions are not evaluated at subsequent nodes. Additional information regarding decision tree is described with respect to
FIG. 4 . - In implementations,
contextual music compiler 112 generates acallable function 370 that implements the decision tree.Callable function 370 may be used to identify at least one of the multiple contextual situations, as defined in thesource code 200, which corresponds to a state of theapplication 142 that is interacted with by the user. In implementations, thecallable function 370 may be sent tocontextual music selector 113 of contextual music application 140. - In an implementation,
callable function 370 applies acontext update 272 as input. In an implementation, acontext update 272 may include a data set that provides parameters for various features of a contextual situation being executed byapplication 142. For example,context update 272 may include “altitude=10,000 meters, biome=‘desert; . . . ” In implementations, the parameters for features identified in the data set are compared to conditions that are associated with nodes of the decision tree. In implementations,callable function 370, responsive to applying thecontext update 272, determines whether one or more of the multiple rules have been satisfied. In implementations, thecallable function 370 implements the decision tree to make the determination that a rule has been satisfied to minimize a number of the multiple conditions to be evaluated to determine whether a particular rule of the multiple rules has been satisfied. - In one implementation,
callable function 370 in conjunction with contextual music application 140 may identify a particular rule that has been satisfied responsive to applying thecontext update 272 to thecallable function 370. Thecallable function 370 of contextual music application 140 may identify a contextual situation that is associated with the satisfied rule, responsive to determining the particular rule has been satisfied. For example, the callable function may output one or more identifiers that indicate one or more corresponding contextual situations. - In implementations, responsive to determining the particular rule has been satisfied and determining the contextual situation associated with the rule,
contextual music selector 113 may determine the particular playlist that is associated with the satisfied rule. It may be noted that in implementations, responsive to asingle context update 272, one or more rules (or none) may be satisfied and one or more corresponding contextual situations may be identified. Responsive to identifying multiple satisfied contextual situations, multiple playlists may be identified, and media items from a particular playlist of the multiple playlists may be selected for playback. Responsive to determining the particular playlist,contextual music selector 113 may retrieve or cause playback of media items from the particular playlist. In some implementations,contextual music selector 113 may querycontent sharing platform 120 using an application program interface (API) for access or playback of the particular playlist A. In implementations,contextual music selector 113 may cause a concurrent playback of a media item of the playlist A with the occurrence of the contextual situation identified for theapplication 142. For example, a video item (e.g., music video) may be caused to play in a browser or application on the user device while the user is engaged in a particular contextual situation executing on a gaming application. - In implementations, a media item may be randomly chosen from the playlist A. In other implementations, various algorithms may be used to choose a media item from the playlist by determining which media item the user would have the most affinity towards in view of the particular contextual situation. It may be noted that in other implementations, playlists associated with particular contextual situations may be retrieved by different or multiple platforms, or may be retrieved local to the user device.
- In some implementations, a context update may be mapped to one or more contextual situations and multiple media items, such as audio-only items, that are contained in the one or more playlist. In implementations, determining a media item from the one or playlists for playback may include one or more factors, such as matching scores, variety settings, playback history, or user feedback.
- In implementations, each of the media items of the identified playlist(s) may be assigned a matching score. A matching score may be indicative of a media item's determined matching or affinity with an identified contextual situation(s). For example, a media item with a matching score of 90 has a higher affinity with a particular contextual situation than another media item with a matching score of 60 for the same contextual situation. In implementations, responsive to receiving a
context update 272, if a new media item has a matching score that is higher than the current media item that is presently being played, the new media item will interrupt playback of the current media item (e.g., fade out) and replace (e.g., fade in) the current media item. In other implementations, if playback of a current media item has ended (e.g., reached the end of the song or user has interrupted playback), the next media item may be determined from the most recent context update in a manner described herein. In some implementations where the playback of the current media item has ended and a context update is stale (received before a threshold amount of time),contextual music selector 113 may not begin playback of a new media item. In implementations, after playback of a particular media item begins, the other media items of the one or more playlists are blocked from interrupting playback. - In some implementations, a variety setting may be controlled by a user, developer, or administrator. In implementations, a variety setting may refer to an indication, such as a numerical setting, that indicates the relative importance of diversity (e.g., importance of playback of different media items rather than playback of media items with the highest matching score). The variety setting may provide a statistical probability (e.g., relative likelihood) of selecting media items for playback where the items have different matching scores, where media items with lower matching scores have a lower probability of being selected. For example, the variety setting may be 25% and three candidate audio-only items may have matching scores of 85, 75, and 65. A probability (e.g., ratio) may be determined for each candidate audio-only item so that each item has a non-zero probability of being selected. For instance, the probability that one of the candidate audio-only items is selected is 100%. The probability that each candidate audio-only item may be selected may be determined by choosing a first ratio that allows each subsequent ratio to be 25% of the preceding ratio and have all the ratios add to 100%. For instance, the probability for the matching score-85 audio-only item to play is 16/21, the probability for the matching score-75 audio-only item is 25% of that, e.g., 4/21, and the probability of the matching score-65 audio-only item is 1/21, e.g., 25% of that of the matching score-75 audio-only item (note that 16/21+4/21+1/21=21/21=1).
- In some implementations, playback history may be taken into account to select media items from playlists for playback. For example, a rule may be implemented where the last N-number of last played songs are not repeated. In some implementations, user feedback may be used to change the probabilities of playback. For example, selection of like or dislike input elements by a user may be used to change the probability of playback (e.g., relative play probabilities as described above with respect to variety settings) of a particular media item. In still other implementations,
contextual music selector 113 determines the fraction of times each candidate media item has been played as well as the fraction of times each candidate media item should be played e.g., (relative play probabilities as described above with respect to variety settings), and picks the media item that minimizes the relative entropy (Kullback-Leibler divergence) between the observed and desired times-played distributions. - In some implementations,
application 142 may generate frequent context updates 272. For example, context updates 272 may occur every 0.25 seconds and contain a data set with dozens to hundreds of parameters. In some implementations,contextual music selector 113 may use an API to communicate and request context updates 272 fromapplication 142. In some implementations, content recognition techniques may be used to generate some or all of the data set ofcontext update 272. For example, screen shot analysis may be implemented that identifies text and elements or features displayed byapplication 142 on client device. - In implementations, after a media item is played back on a user device responsive to determining the contextual situation of the
application 142,contextual music selector 113 may receive anew context update 272. If thecontextual music selector 113 determines, in view of thenew context update 272, that the contextual situation for the application has not changed, thecontextual music selector 113 may continue playback of the media item or choose another media item from the associated playlist for playback. If thecontextual music selector 113 determines, in view of thenew context update 272, that a new rule of the multiple rules has been satisfied,contextual music selector 113 may identify another contextual situation associated with the newly identified rule.Contextual music selector 113 may retrieve another playlist fromcontent sharing platform 120 for the new contextual situation, and cause playback of a media item from the other playlist. - In one implementation,
contextual music compiler 112 of contextual music application 140 may generate a decision tree for the multiple rules by determining a condition from the multiple conditions to be the root node of the decision tree. In implementations, a single decision tree with a single root node is used. In other implementations, multiple decision trees may be used. In implementations, the root node optimizes a number of the plurality of conditions that are eliminated from subsequent evaluations. As noted above, in implementations, the outcome of an evaluation of a condition of a node may imply that other conditions are satisfied, imply that other conditions are not satisfied, or imply that some rules cannot be satisfied (and the conditions associated with the rules are moot and need not be evaluated). In implementations, implied conditions may not need to be re-evaluated. - In one implementation, in order to construct the decision tree,
contextual music compiler 112 may check every condition (or feature) that best approximates a 50-50 split between conditions (or rules) that are eliminated from subsequent evaluation and conditions that are not eliminated from subsequent evaluation responsive to the outcome of the evaluation of a condition of the root node. - For example,
contextual music compiler 112 may evaluate the condition “biome=‘forest’.” Evaluating the condition “biome=‘forest’” as true implies the outcome of 40 percent of the conditions and eliminates 40 percent of the conditions (as described in source code 200) from subsequent evaluation. Evaluating the condition “biome=‘forest’” as false implies the outcome of 50 percent of the conditions and eliminates 50 percent of the conditions from subsequent evaluation. The worst case split for the condition “biome=‘forest’,” irrespective of the outcome of the evaluation (e.g., “true” or “false”), is 40-60 (e.g., percentage conditions eliminated from a subsequent evaluation compared to percentage of conditions not eliminated from subsequent evaluation responsive to the outcome of the evaluation of “biome=‘forest’”). Each condition may be evaluated in a similar manner as described above to determine the condition of the root node. If the 40-60 split for the condition “biome=‘forest’” is determined to be closest or one of the closest to the target split, such as a 50-50 split, “biome=‘forest’” may be chosen as a root node. - In other implementations, the decision tree may be organized with subsequent nodes connected to each other and the root node by branches. It may be noted that a decision tree may be evaluated in serial manner such that the outcome of an evaluation of a previous node determines which subsequent node(s) to evaluate and which subsequent node(s) not to evaluate. In implementations, the nodes of the decision tree may be organized so that a condition of the multiple conditions where the outcome is implied (e.g., by the outcome of an evaluation of a previous node) is not evaluated at a connected subsequent node.
- In some implementations, the nodes subsequent to the root node may be determined after the root node is determined, and in a similar manner as the root node is determined. For example, for determining subsequent nodes for each branch of the decision tree,
contextual music compiler 112 may check every remaining condition (e.g., conditions not determined as previous nodes) for the one condition that best approximates a 50-50 split between conditions (or rules) that are eliminated from subsequent evaluation and conditions that are not eliminated from subsequent evaluation responsive to the outcome of the evaluation of a condition of the corresponding node. - In an implementation, the decision tree may be implemented in a
callable function 370 that receives context updates 272 as inputs. Thecallable function 370 may determine whether one or more of the multiple rules has been satisfied in view of thecontext update 272. In one implementation, thecallable function 370 uses the decision tree to identify the initial condition to evaluate. In implementations, thecallable function 370 may determine the root node of the decision tree, and determine from the root node the associated feature and condition from which to begin the contextual situation analysis. Thecallable function 370 may evaluate the initial condition identified by the root node in view of the data set of thecontext update 272. In implementations, the outcome of the evaluation may be either “true” or “false.” The outcome of the evaluation may direct thecallable function 370 to follow a specific branch or specific branches and evaluate corresponding subsequent node(s). In some implementations, responsive to the evaluation of the initial condition of the root node (or other nodes of the decision tree), thecallable function 370 evaluates a subsequent node of the decision tree where a number of the plurality of condition that have outcomes that are implied by the evaluation of the initial condition are eliminated from subsequent evaluation. - In some implementations,
callable function 370 orcontextual music selector 113 keeps a record (e.g., table or scoreboard) of the conditions that have outcomes that are explicitly and implicitly determined from the evaluated nodes of the decision tree. In implementations, the record may held keep track of whether or not a particular rule has been satisfied. Once a rule has been satisfied, the associated contextual situation is identified and the associated playlist is retrieved. -
FIG. 4A illustrates generation and use of adecision tree 400, in accordance with implementations.FIG. 4B illustrates arecord 450 used to keep track of whether one or more rules has been satisfied, in accordance with implementations. As noted above, adecision tree 400 may be used minimize the number of conditions to be evaluated to determine whether one or more rules of the multitude of rules has been satisfied. Components of the previousFIGS. 1-3 are used to help describeFIG. 4A-B . It may be noted that the number of elements, such as conditions, rules, and nodes, is provide for purposes of illustration, rather than limitation. In other implementations, another number of elements may be used. - In an implementation,
decision tree 400 showsroot node 410, and various subsequent nodes 411-419. The nodes are connected by branches, such asbraches root node 410 is connected tonode 411 bybranch 420 and is connected tonode 415 bybranch 421. Conditions corresponding to each node are identified as C1 through C11. The conditions C1-C11 are as follows: C1: y<=2, C2: y<=3, C3: y<=5, C4: y>6, C5: y>3, C6: y>7, C7: x>3, C8: x<=5, C9: x>5, C10: x<=1, C11: x>7. - As noted above, a rule may include on or more conditions. For example,
decision tree 400 may represent a decision tree for six rules, Rules 1-6. For example, theRules 1 through 6 are represented as follows: Rule 1: C1, y<=2; Rule 2: C4, y>6; Rule 3: C2 AND C9, y<=3 AND x>5; Rule 4: C5 AND C3 AND C7 AND C8, y>3 AND y<=5 AND x>3 AND x<=5; Rule 5: C6 and C11, y>7 AND x>7; Rule 6: C6 AND C10, y>7 AND x<=1.Record 450 ofFIG. 4B illustrates the Rules 1-6 as regions R1 through R6, respectively, ofrecord 450.Record 450 shows a checkerboard having an X-axis (horizontal axis) and Y-axis (vertical axis), where each checker represents an X-Y value. For example, region R1 corresponds to rule 1 (e.g., Rule 1: C1, y<=2). If condition C1 (y<=2) is “true,” all the checkboxes located below y=2, are checked and are also “true.” It may be noted that at least of some of values corresponding to Rule 3 (e.g., R3) are also “true” ifRule 1 is “true,” as illustrated by the overlap of regions R1 and R3. - In one implementation, given conditions C1-C11, a compiler (for example the contextual music compiler 112) generates
decision tree 400 where every node 410-419 has 3 subtrees, rather than 2 subtrees. In some implementations, 1 or more subtrees may be used. It may be noted that one or more subtrees may be empty and not shown connected to a particular node. - In an implementations, the 3 subtrees may include a subtree to evaluate if the current node's check evaluates as “true” (The “(Y)es” branch) (e.g.,
subtree 430A), a subtree to evaluate if the current node's check evaluates as “false” (The “(N)o” branch) (e.g.,subtree 430B), and a subtree to always (A) evaluate after evaluating the (Y)es or (N)o branch (e.g.,subtree 430C).Subtree 430C represents an “always” subtree, and is to be evaluated if the condition ofnode 412 is evaluated as “true” or “false.”Subtree 430C may also be referred to an independent subtree, where the evaluations of conditions of the independent subtree are independent from the evaluation of one or more nodes, such as node 412 (e.g., the outcome of the nodes of the independent subtree cannot be explicitly or implicitly determined from the evaluation of other related conditions or nodes). - In
decision tree 400,root node 410 includes condition C3. In implementations, the condition (e.g., C3) ofroot node 410 gets checked first bycontextual music selector 113. As illustrated, irrespective of whether C3 evaluates as “true” or “false,” 3 out of 6 rules are eliminated (e.g., 50/50 split) from further evaluation. - In implementations, responsive to a condition being evaluated as “true” or responsive to an evaluation of a condition that implies outcomes (e.g., “true” or “false”) of other conditions (e.g., a branch is entered that implies a particular condition(s)), the corresponding explicit and implied conditions get marked as “satisfied” on the
record 450 for each related rule that contain the explicit and implied conditions. It may be noted that in implementations,contextual music selector 113 may perform the evaluation of conditions or rules usingdecision tree 400 andrecord 450. - In one example, if the condition C3 of
root node 410 is “true,” C2 ofnode 411 gets checked next. If C2 is “true,” C1 ofnode 412 gets checked (which decides ifRule 1 is “true”), and irrespective of the outcome of C1 ofnode 412, C9 ofnode 419 gets checked afterwards (which decides ifRule 3 is true). In another example, in case the check C2 ofnode 411 is “false” (e.g., not y<=3), the outcome of the evaluation ofnode 411 implies condition C5 (y>3) (as illustrated). It may be noted that implied conditions may be represented by the decision tree as illustrated bybranch 423. Responsive to the determining the implied condition C5 is satisfied, C5 onrecord 450 gets marked as “satisfied” and is not re-checked. Continuing the example, responsive to C2 being evaluated as “false,” C8 is checked, and if “true,” C7 is checked (which decides if rule 4 is “true”). - In another example, responsive to condition C3 of
root node 410 being evaluated as “false,” C6 ofnode 415 is checked to excludeRule 5 andRule 6 in the case C6 does not hold. If C6 is “true,” the outcome implies C4 (and hence Rule 2). If C6 is “false,” then C4 is checked to decideRule 2. Also, if C6 is “true,”contextual music selector 113 checks if C10 holds (which decides Rule 6), and only if C10 is “false,” then C11 needs to be checked (since C10 and C11 are mutually exclusive), which decidesRule 5. - It may be noted that by implementing
decision tree 400, only 4 condition evaluations have been performed to determine for each of the 6 rules whether one or more rules are “true” or “false.” It may be noted that a brute force evaluation may check all the conditions for all the rules independently and perform the evaluation of 12 conditions. -
FIG. 5 is a flowdiagram illustrating method 500 for generating a callable function that implements a decision tree, for example a decision tree as inFIG. 4A , in accordance with some implementations.Method 500 may be performed by processing logic that includes hardware (e.g., circuitry, dedicated logic, programmable logic, microcode), software (e.g., instructions run on a processing device to perform hardware simulation), or a combination thereof. In one implementation, contextual music application 140, and in particular,contextual music compiler 112, may perform some or all the operations described herein. -
Method 500 begins atblock 505 where processing logic receives source code defining multiple rules. Each of the multiple of rules includes one or more of multiple conditions and is associated with one of multiple contextual situations. Atblock 510, processing logic generates, using the source code, a decision tree for the multiple rules. Generating the decision tree includes minimizing a number of the multiple conditions to be evaluated to determine whether a particular rule of the multiple rules has been satisfied. Atblock 515, processing logic generates a callable function that implements the decision tree. The callable function identifies one of the multiple contextual situations that corresponds to a state of an application interacted with by a user. - Once the callable function has been generated, a processing device may use the callable function in controlling a device (such as an autonomous vehicle) or process. The processing device that uses the callable function in controlling the device or process may have generated the callable function, but this implementation does not require this. The processing device may use the callable function to control the device or process by identifying, using the callable function, a contextual situation; and controlling the device or process based on the identified contextual situation. In an implementation, the processing device may determine at least one action to be performed by the device or process based at least on the identified contextual situation and optionally also based on one or more further inputs. The processing device may be further controlling or instructing the device or process to implement a first action of the at least one determined actions.
-
FIG. 6 is a flow diagram illustrating a method for providing a playlist for a current contextual situation associated with an application interacted with by a user in accordance with some implementations.Method 600 may be performed by processing logic that includes hardware (e.g., circuitry, dedicated logic, programmable logic, microcode), software (e.g., instructions run on a processing device to perform hardware simulation), or a combination thereof. In one implementation, contextual music application 140, in particularcontextual music selector 113, may perform some or all the operations described herein. -
Method 600 begins atblock 605 where processing logic receives a first context update for an application. Atblock 610, processing logic determines whether one or more of multiple rules have been satisfied in view of the first context update. The multiple rules include multiple conditions and are associated with multiple contextual situations. The determining includes minimizing a number of the multiple conditions to be evaluated to determine whether a particular rule of the multiple rules has been satisfied. Atblock 615, processing logic responsive to determining a first rule of the multiple rules has been satisfied, identifies a first contextual situation of the multiple contextual situations that is associated with the first rule. Atblock 620, processing logic determines a playlist of media items that is associated with the first contextual situation. Atblock 625, processing logic causes playback of a first media item of the playlist of media items to accompany the first contextual situation identified for the application. -
FIG. 7 is a block diagram illustrating anexemplary computer system 700, in accordance with implementations. Thecomputer system 700 executes one or more sets of instructions that cause the machine to perform one or more of the methodologies discussed herein. Set of instructions, instructions, and the like may refer to instructions that, when executedcomputer system 700,cause computer system 700 to perform one or more operations of contextual music application 140. The machine may operate in the capacity of a server or a client device in client-server network environment, or as a peer machine in a peer-to-peer (or distributed) network environment. The machine may be a personal computer (PC), a tablet PC, a set-top box (STB), a personal digital assistant (PDA), a mobile telephone, a web appliance, a server, a network router, switch or bridge, or a machine capable of executing a set of instructions (sequential or otherwise) that specify actions to be taken by that machine. Further, while only a single machine is illustrated, the term “machine” shall also be taken to include a collection of machines that individually or jointly execute the sets of instructions to perform one or more of the methodologies discussed herein. - The
computer system 700 includes aprocessing device 702, a main memory 704 (e.g., read-only memory (ROM), flash memory, dynamic random access memory (DRAM) such as synchronous DRAM (SDRAM) or Rambus DRAM (RDRAM), etc.), a static memory 706 (e.g., flash memory, static random access memory (SRAM), etc.), and adata storage device 716, which communicate with each other via abus 708. - The
processing device 702 represents one or more general-purpose processing devices such as a microprocessor, central processing unit, or the like. More particularly, theprocessing device 702 may be a complex instruction set computing (CISC) microprocessor, reduced instruction set computing (RISC) microprocessor, very long instruction word (VLIW) microprocessor, or a processing device implementing other instruction sets or processing devices implementing a combination of instruction sets. Theprocessing device 702 may also be one or more special-purpose processing devices such as an application specific integrated circuit (ASIC), a field programmable gate array (FPGA), a digital signal processor (DSP), network processor, or the like. Theprocessing device 702 is configured to execute instructions of thesystem architecture 100 and the contextual music application 140 for performing the operations discussed herein. - The
computer system 700 may further include anetwork interface device 722 that provides communication with other machines over anetwork 718, such as a local area network (LAN), an intranet, an extranet, or the Internet. Thecomputer system 700 also may include a display device 710 (e.g., a liquid crystal display (LCD) or a cathode ray tube (CRT)), an alphanumeric input device 712 (e.g., a keyboard), a cursor control device 714 (e.g., a mouse), and a signal generation device 720 (e.g., a speaker). - The
data storage device 716 may include a non-transitory computer-readable storage medium 724 on which is stored the sets of instructions of thesystem architecture 100 and contextual music application 140 embodying one or more of the methodologies or functions described herein. The sets of instructions of thesystem architecture 100 and contextual music application 140 may also reside, completely or at least partially, within themain memory 704 and/or within theprocessing device 702 during execution thereof by thecomputer system 700, themain memory 704 and theprocessing device 702 also constituting computer-readable storage media. The sets of instructions may further be transmitted or received over thenetwork 718 via thenetwork interface device 722. - While the example of the computer-
readable storage medium 724 is shown as a single medium, the term “computer-readable storage medium” can include a single medium or multiple media (e.g., a centralized or distributed database, and/or associated caches and servers) that store the sets of instructions. The term “computer-readable storage medium” can include a medium that is capable of storing, encoding or carrying a set of instructions for execution by the machine and that cause the machine to perform one or more of the methodologies of the present disclosure. The term “computer-readable storage medium” can include, but not be limited to, solid-state memories, optical media, and magnetic media. - In the foregoing description, numerous details are set forth. It will be apparent, however, to one of ordinary skill in the art having the benefit of this disclosure, that the present disclosure may be practiced without these specific details. In some instances, well-known structures and devices are shown in block diagram form, rather than in detail, in order to avoid obscuring the present disclosure.
- Some portions of the detailed description have been presented in terms of algorithms and symbolic representations of operations on data bits within a computer memory. These algorithmic descriptions and representations are the means used by those skilled in the data processing arts to most effectively convey the substance of their work to others skilled in the art. An algorithm is here, and generally, conceived to be a self-consistent sequence of steps leading to a desired result. The steps are those requiring physical manipulations of physical quantities. Usually, though not necessarily, these quantities take the form of electrical or magnetic signals capable of being stored, transferred, combined, compared, and otherwise manipulated. It has proven convenient at times, principally for reasons of common usage, to refer to these signals as bits, values, elements, symbols, characters, terms, numbers, or the like.
- It may be borne in mind, however, that all of these and similar terms are to be associated with the appropriate physical quantities and are merely convenient labels applied to these quantities. Unless specifically stated otherwise, it is appreciated that throughout the description, discussions utilizing terms such as “receiving”, “generating”, “determining”, “organizing”, “evaluating”, “retrieving”, “applying”, “identifying”, “keeping”, or the like, refer to the actions and processes of a computer system, or similar electronic computing device, that manipulates and transforms data represented as physical (e.g., electronic) quantities within the computer system memories or registers into other data similarly represented as physical quantities within the computer system memories or registers or other such information storage, transmission or display devices.
- The present disclosure also relates to an apparatus for performing the operations herein. This apparatus may be specially constructed for the required purposes, or it may include a general purpose computer selectively activated or reconfigured by a computer program stored in the computer. Such a computer program may be stored in a computer readable storage medium, such as, but not limited to, a type of disk including a floppy disk, an optical disk, a compact disc read-only memory (CD-ROM), a magnetic-optical disk, a read-only memory (ROM), a random access memory (RAM), an erasable programmable read-only memory (EPROM), an electrically erasable programmable read-only memory (EEPROM), a magnetic or optical card, or a type of media suitable for storing electronic instructions.
- The words “example” or “exemplary” are used herein to mean serving as an example, instance, or illustration. An aspect or design described herein as “example’ or “exemplary” is not necessarily to be construed as preferred or advantageous over other aspects or designs. Rather, use of the words “example” or “exemplary” is intended to present concepts in a concrete fashion. As used in this application, the term “or” is intended to mean an inclusive “or” rather than an exclusive “or.” That is, unless specified otherwise, or clear from context, “X includes A or B” is intended to mean the natural inclusive permutations. That is, if X includes A; X includes B; or X includes both A and B, then “X includes A or B” is satisfied under one or more of the foregoing instances. In addition, the articles “a” and “an” as used in this application and the appended claims may generally be construed to mean “one or more” unless specified otherwise or clear from context to be directed to a singular form. Moreover, use of the term “an implementation” or “one implementation” or “an implementation” or “one implementation” throughout is not intended to mean the same implementation or implementation unless described as such. The terms “first,” “second,” “third,” “fourth,” etc. as used herein are meant as labels to distinguish among different elements and may not necessarily have an ordinal meaning according to their numerical designation.
- It is to be understood that the above description is intended to be illustrative, and not restrictive. Other implementations will be apparent to those of skill in the art upon reading and understanding the above description. The scope of the disclosure may, therefore, be determined with reference to the appended claims, along with the full scope of equivalents to which such claims are entitled.
Claims (20)
1. A method comprising:
receiving, by a processing device, a first context update indicative of a present state associated with an application;
identifying a first contextual situation, among a plurality of contextual situations associated with a plurality of conditions, that corresponds to the first context update, wherein identifying the first contextual situation comprises:
implementing a decision tree to minimize a number of the plurality of conditions to be evaluated, and
identifying the first contextual situation using the decision tree; and
determining one or more actions to be performed corresponding with the first contextual situation.
2. The method of claim 1 , wherein the application is part of an online gaming system.
3. The method of claim 1 , wherein the application is part of an autonomous vehicle system.
4. The method of claim 1 , further comprising:
causing playback of a first media item of a playlist of media items to accompany the first contextual situation identified for the application.
5. The method of claim 1 , further comprising:
receiving a second context update indicative of a new state associated with the application;
identifying a second contextual situation, among the plurality of contextual situations associated with the plurality of conditions, that corresponds to the second context update; and
determining one or more other actions to be performed with the second contextual situation.
6. The method of claim 5 , further comprising:
causing playback of a second media item of a playlist of media items to accompany the second contextual situation identified for the application.
7. The method of claim 1 , wherein identifying the first contextual situation, among the plurality of contextual situations associated with the plurality of conditions, that corresponds to the first context update comprises:
applying a data set associated with the first context update to a callable function that implements the decision tree, wherein parameters of a plurality of features identified by the data set are compared to conditions of the plurality of conditions that are associated with a plurality of nodes of the decision tree.
8. The method of claim 7 , wherein identifying the first contextual situation, among the plurality of contextual situations associated with the plurality of conditions, that corresponds to the first context update further comprises:
keeping a record of conditions of the plurality of conditions that have outcomes that are explicitly and implicitly determined from evaluated nodes of the plurality of nodes of the decision tree.
9. The method of claim 7 , wherein identifying the first contextual situation, among the plurality of contextual situations associated with the plurality of conditions, that corresponds to the first context update further comprises:
determining an initial condition of the plurality of conditions to evaluate by determining a root node of the plurality of nodes of the decision tree, wherein the root node indicates a feature and a condition associated with the feature; and
evaluating the initial condition identified by the root node in view of the data set of the first context update.
10. The method of claim 9 , wherein identifying the first contextual situation, among the plurality of contextual situations associated with the plurality of conditions, that corresponds to the first context update further comprises:
responsive to the evaluation of the initial condition, evaluating a subsequent node of the decision tree where a number of the plurality of conditions that have outcomes that are implied by the evaluation of the initial condition are eliminated from subsequent evaluation.
11. A system, comprising:
a memory; and
processing device, coupled to the memory, to perform operations comprising:
receiving a first context update indicative of a present state associated with an application;
identifying a first contextual situation, among a plurality of contextual situations associated with a plurality of conditions, that corresponds to the first context update, wherein identifying the first contextual situation comprises:
implementing a decision tree to minimize a number of the plurality of conditions to be evaluated, and
identifying the first contextual situation using the decision tree; and
determining one or more actions to be performed corresponding with the first contextual situation.
12. The system of claim 11 , the operations further comprising:
causing playback of a first media item of a playlist of media items to accompany the first contextual situation identified for the application.
13. The system of claim 11 , the operations further comprising:
receiving a second context update indicative of a new state associated with the application;
identifying a second contextual situation, among the plurality of contextual situations associated with the plurality of conditions, that corresponds to the second context update; and
determining one or more other actions to be performed with the second contextual situation.
14. The system of claim 13 , the operations further comprising:
causing playback of a second media item of a playlist of media items to accompany the second contextual situation identified for the application.
15. The system of claim 11 , wherein identifying the first contextual situation, among the plurality of contextual situations associated with the plurality of conditions, that corresponds to the first context update comprises:
applying a data set associated with the first context update to a callable function that implements the decision tree, wherein parameters of a plurality of features identified by the data set are compared to conditions of the plurality of conditions that are associated with a plurality of nodes of the decision tree.
16. The system of claim 15 , wherein identifying the first contextual situation, among the plurality of contextual situations associated with the plurality of conditions, that corresponds to the first context update further comprises:
keeping a record of conditions of the plurality of conditions that have outcomes that are explicitly and implicitly determined from evaluated nodes of the plurality of nodes of the decision tree.
17. The system of claim 15 , wherein identifying the first contextual situation, among the plurality of contextual situations associated with the plurality of conditions, that corresponds to the first context update further comprises:
determining an initial condition of the plurality of conditions to evaluate by determining a root node of the plurality of nodes of the decision tree, wherein the root node indicates a feature and a condition associated with the feature; and
evaluating the initial condition identified by the root node in view of the data set of the first context update.
18. The system of claim 17 , wherein identifying the first contextual situation, among the plurality of contextual situations associated with the plurality of conditions, that corresponds to the first context update further comprises:
responsive to the evaluation of the initial condition, evaluating a subsequent node of the decision tree where a number of the plurality of conditions that have outcomes that are implied by the evaluation of the initial condition are eliminated from subsequent evaluation.
19. A non-transitory computer-readable medium comprising instructions that, responsive to execution by a processing device, cause the processing device to perform operations comprising:
receiving a first context update indicative of a present state associated with an application;
identifying a first contextual situation, among a plurality of contextual situations associated with a plurality of conditions, that corresponds to the first context update, wherein identifying the first contextual situation comprises:
implementing a decision tree to minimize a number of the plurality of conditions to be evaluated, and
identifying the first contextual situation using the decision tree; and
determining one or more actions to be performed corresponding with the first contextual situation.
20. The non-transitory computer-readable medium of claim 19 , the operations further comprising:
causing playback of a first media item of a playlist of media items to accompany the first contextual situation identified for the application.
Priority Applications (1)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US18/070,338 US20230090175A1 (en) | 2017-04-24 | 2022-11-28 | Contextual situation analysis |
Applications Claiming Priority (4)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US201762489333P | 2017-04-24 | 2017-04-24 | |
PCT/US2018/025744 WO2018200134A1 (en) | 2017-04-24 | 2018-04-02 | Contextual situation analysis |
US201916607021A | 2019-10-21 | 2019-10-21 | |
US18/070,338 US20230090175A1 (en) | 2017-04-24 | 2022-11-28 | Contextual situation analysis |
Related Parent Applications (2)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
US16/607,021 Continuation US11514346B2 (en) | 2017-04-24 | 2018-04-02 | Contextual situation analysis |
PCT/US2018/025744 Continuation WO2018200134A1 (en) | 2017-04-24 | 2018-04-02 | Contextual situation analysis |
Publications (1)
Publication Number | Publication Date |
---|---|
US20230090175A1 true US20230090175A1 (en) | 2023-03-23 |
Family
ID=62111175
Family Applications (2)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
US16/607,021 Active 2039-08-21 US11514346B2 (en) | 2017-04-24 | 2018-04-02 | Contextual situation analysis |
US18/070,338 Pending US20230090175A1 (en) | 2017-04-24 | 2022-11-28 | Contextual situation analysis |
Family Applications Before (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
US16/607,021 Active 2039-08-21 US11514346B2 (en) | 2017-04-24 | 2018-04-02 | Contextual situation analysis |
Country Status (2)
Country | Link |
---|---|
US (2) | US11514346B2 (en) |
WO (1) | WO2018200134A1 (en) |
Families Citing this family (4)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US11258818B2 (en) * | 2018-01-31 | 2022-02-22 | Ironsdn Corp. | Method and system for generating stateful attacks |
US10893347B2 (en) * | 2019-04-19 | 2021-01-12 | Pio Networking Pte. Ltd. | Intelligent audio playback and community sharing system |
US11531696B2 (en) * | 2020-07-17 | 2022-12-20 | Spotify Ab | Communicating shuffled media content |
US20220230249A1 (en) * | 2021-01-19 | 2022-07-21 | Better Holdco, Inc. | Condition tree optimization |
Citations (6)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US7797267B2 (en) * | 2006-06-30 | 2010-09-14 | Microsoft Corporation | Methods and architecture for learning and reasoning in support of context-sensitive reminding, informing, and service facilitation |
US20140279814A1 (en) * | 2013-03-14 | 2014-09-18 | Samsung Electronics Co., Ltd. | Context-aware method and apparatus |
US9443192B1 (en) * | 2015-08-30 | 2016-09-13 | Jasmin Cosic | Universal artificial intelligence engine for autonomous computing devices and software applications |
US20160360382A1 (en) * | 2015-05-27 | 2016-12-08 | Apple Inc. | Systems and Methods for Proactively Identifying and Surfacing Relevant Content on a Touch-Sensitive Device |
US10057736B2 (en) * | 2011-06-03 | 2018-08-21 | Apple Inc. | Active transport based notifications |
US10170123B2 (en) * | 2014-05-30 | 2019-01-01 | Apple Inc. | Intelligent assistant for home automation |
Family Cites Families (21)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US6009420A (en) * | 1992-10-05 | 1999-12-28 | Expert Systems Publishing Co. | Computer-implemented decision management system with dynamically generated questions and answer choices |
US5602982A (en) * | 1994-09-23 | 1997-02-11 | Kelly Properties, Inc. | Universal automated training and testing software system |
US5875285A (en) * | 1996-11-22 | 1999-02-23 | Chang; Hou-Mei Henry | Object-oriented data mining and decision making system |
IL159332A0 (en) * | 1999-10-31 | 2004-06-01 | Insyst Ltd | A knowledge-engineering protocol-suite |
US7987144B1 (en) * | 2000-11-14 | 2011-07-26 | International Business Machines Corporation | Methods and apparatus for generating a data classification model using an adaptive learning algorithm |
US7236963B1 (en) * | 2002-03-25 | 2007-06-26 | John E. LaMuth | Inductive inference affective language analyzer simulating transitional artificial intelligence |
US7805461B2 (en) * | 2003-12-05 | 2010-09-28 | Edgenet, Inc. | Method and apparatus for database induction for creating frame based knowledge tree |
US8898098B1 (en) * | 2004-05-21 | 2014-11-25 | Ray Anthony Luechtefeld | Method, artificially intelligent system and networked complex for facilitating group interactions |
US8217756B2 (en) * | 2004-09-01 | 2012-07-10 | Microsoft Corporation | Rule-based filtering and alerting |
US7657497B2 (en) * | 2006-11-07 | 2010-02-02 | Ebay Inc. | Online fraud prevention using genetic algorithm solution |
US20090182689A1 (en) * | 2008-01-15 | 2009-07-16 | Microsoft Corporation | Rule-based dynamic operation evaluation |
US8650144B2 (en) * | 2008-02-14 | 2014-02-11 | Yahoo! Inc. | Apparatus and methods for lossless compression of numerical attributes in rule based systems |
US8572287B2 (en) | 2008-02-14 | 2013-10-29 | Blackberry Limited | Method and apparatus for communicating compression state information for interactive compression |
CN103036921B (en) | 2011-09-29 | 2015-09-23 | 北京新媒传信科技有限公司 | A kind of user behavior analysis system and method |
US9495444B2 (en) * | 2014-02-07 | 2016-11-15 | Quixey, Inc. | Rules-based generation of search results |
US20150235126A1 (en) | 2014-02-18 | 2015-08-20 | F5 Networks, Inc. | Concurrent evaluation of large rule sets with conditions |
US9665248B2 (en) * | 2014-07-15 | 2017-05-30 | Google Inc. | Adaptive background playback behavior |
US10650067B2 (en) * | 2015-08-13 | 2020-05-12 | Samsung Electronics Co., Ltd. | Cloud-enabled architecture for on-demand native application crawling |
US9990187B1 (en) * | 2017-01-27 | 2018-06-05 | Sas Institute Inc. | Analytic execution for automatic decision making |
US10713289B1 (en) * | 2017-03-31 | 2020-07-14 | Amazon Technologies, Inc. | Question answering system |
US11238241B1 (en) * | 2019-05-29 | 2022-02-01 | Amazon Technologies, Inc. | Natural language dialog scoring |
-
2018
- 2018-04-02 US US16/607,021 patent/US11514346B2/en active Active
- 2018-04-02 WO PCT/US2018/025744 patent/WO2018200134A1/en active Application Filing
-
2022
- 2022-11-28 US US18/070,338 patent/US20230090175A1/en active Pending
Patent Citations (6)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US7797267B2 (en) * | 2006-06-30 | 2010-09-14 | Microsoft Corporation | Methods and architecture for learning and reasoning in support of context-sensitive reminding, informing, and service facilitation |
US10057736B2 (en) * | 2011-06-03 | 2018-08-21 | Apple Inc. | Active transport based notifications |
US20140279814A1 (en) * | 2013-03-14 | 2014-09-18 | Samsung Electronics Co., Ltd. | Context-aware method and apparatus |
US10170123B2 (en) * | 2014-05-30 | 2019-01-01 | Apple Inc. | Intelligent assistant for home automation |
US20160360382A1 (en) * | 2015-05-27 | 2016-12-08 | Apple Inc. | Systems and Methods for Proactively Identifying and Surfacing Relevant Content on a Touch-Sensitive Device |
US9443192B1 (en) * | 2015-08-30 | 2016-09-13 | Jasmin Cosic | Universal artificial intelligence engine for autonomous computing devices and software applications |
Non-Patent Citations (2)
Title |
---|
Do et al, "Sentiment Analysis of Real-Life Situations Using Location, People and Time as Contextual Features", IEEE, pp 39-42 (Year: 2015) * |
Harris, Mitigating Cognitive Biases in Machine Learning Algorithms for Decision Making", ACM, pp 775-781 (Year: 2019) * |
Also Published As
Publication number | Publication date |
---|---|
US11514346B2 (en) | 2022-11-29 |
WO2018200134A1 (en) | 2018-11-01 |
US20200050953A1 (en) | 2020-02-13 |
Similar Documents
Publication | Publication Date | Title |
---|---|---|
US20230090175A1 (en) | Contextual situation analysis | |
US11947594B2 (en) | Personalized content sharing | |
KR102281863B1 (en) | Recommendation of live-stream content using machine learning | |
US9866914B2 (en) | Subscribable channel collections | |
US11570498B2 (en) | Using machine learning and other models to determine a user preference to cancel a stream or download | |
US10320939B2 (en) | Video playlists and recommendations based on electronic messaging communications | |
US9936242B2 (en) | Merging content channels | |
EP3028168A1 (en) | Creating personalized and continuous playlists for a content sharing platform based on user history | |
US10419376B2 (en) | Staggered notification by affinity to promote positive discussion | |
WO2017151218A1 (en) | Providing an indication of highlights in a video content item | |
CN114676273A (en) | Algorithmic radio for arbitrary text queries | |
US10127312B1 (en) | Mutable list resilient index for canonical addresses of variable playlists | |
WO2023059653A9 (en) | Matching video content to podcast episodes | |
WO2023059653A1 (en) | Matching video content to podcast episodes |
Legal Events
Date | Code | Title | Description |
---|---|---|---|
STPP | Information on status: patent application and granting procedure in general |
Free format text: DOCKETED NEW CASE - READY FOR EXAMINATION |
|
STPP | Information on status: patent application and granting procedure in general |
Free format text: NON FINAL ACTION MAILED |
|
STPP | Information on status: patent application and granting procedure in general |
Free format text: RESPONSE TO NON-FINAL OFFICE ACTION ENTERED AND FORWARDED TO EXAMINER |